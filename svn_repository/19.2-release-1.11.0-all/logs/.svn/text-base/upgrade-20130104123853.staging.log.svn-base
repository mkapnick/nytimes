12:39:05 SQL> @/dbbackups/ECST2/migrations/core_owner/19.2-release-1.11.0-all/upgrade.sql
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> -- DDL for package PROCS_ACCOUNT_CRU
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE CREATE_ACCOUNT (
12:39:05   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
12:39:05   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
12:39:05   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
12:39:05   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
12:39:05   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
12:39:05   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
12:39:05  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
12:39:05  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
12:39:05  12  );
12:39:05  13  
12:39:05  14  PROCEDURE UPDATE_ACCOUNT (
12:39:05  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
12:39:05  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
12:39:05  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
12:39:05  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
12:39:05  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
12:39:05  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
12:39:05  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
12:39:05  22  );
12:39:05  23  
12:39:05  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
12:39:05  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
12:39:05  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
12:39:05  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
12:39:05  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
12:39:05  29  );
12:39:05  30  
12:39:05  31  PROCEDURE READ_ACCOUNT (
12:39:05  32  	in_account_id  IN ACCOUNT.ID%TYPE,
12:39:05  33  	out_result_set OUT SYS_REFCURSOR
12:39:05  34  );
12:39:05  35  
12:39:05  36  PROCEDURE CREATE_ACCOUNT_NOTE (
12:39:05  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
12:39:05  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
12:39:05  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
12:39:05  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
12:39:05  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
12:39:05  42  );
12:39:05  43  
12:39:05  44  END PROCS_ACCOUNT_CRU_V16;
12:39:05  45  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.08
12:39:05 SQL> 
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> -- DDL for package PROCS_ACCOUNT
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE ANNOTATE_ACCOUNT (
12:39:05   4  /*
12:39:05   5  Throws exceptions:
12:39:05   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05   8  */
12:39:05   9  	in_group_id   IN  NUMBER,
12:39:05  10  	in_agent_id   IN  NUMBER,
12:39:05  11  	in_note       IN  VARCHAR2,
12:39:05  12  	in_created_by IN  VARCHAR2
12:39:05  13  );
12:39:05  14  
12:39:05  15  PROCEDURE ASSERT_ACCOUNT_EXISTS (
12:39:05  16  /*
12:39:05  17  Throws exceptions:
12:39:05  18  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05  19  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  20  */
12:39:05  21  	in_group_id IN	NUMBER,
12:39:05  22  	out_exists  OUT NUMBER
12:39:05  23  );
12:39:05  24  
12:39:05  25  PROCEDURE DISABLE_ACCOUNT (
12:39:05  26  /*
12:39:05  27  Throws exceptions:
12:39:05  28  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:05  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:05  30  */
12:39:05  31  	in_group_id   IN NUMBER,
12:39:05  32  	in_updated_by IN VARCHAR2,
12:39:05  33  	in_note       IN VARCHAR2,
12:39:05  34  	in_agent_id   IN NUMBER
12:39:05  35  );
12:39:05  36  
12:39:05  37  PROCEDURE CREATE_ACTIVE_ACCOUNT(
12:39:05  38  /*
12:39:05  39  Throws exceptions:
12:39:05  40  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:05  41  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  42  */
12:39:05  43  	in_created_by	       IN VARCHAR2,
12:39:05  44  	in_group_id	       IN NUMBER
12:39:05  45  );
12:39:05  46  
12:39:05  47  PROCEDURE REACTIVATE_ACCOUNT (
12:39:05  48  /*
12:39:05  49  Throws exceptions:
12:39:05  50  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:05  51  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:05  52  */
12:39:05  53  	in_group_id	  IN NUMBER,
12:39:05  54  	in_updated_by	  IN VARCHAR2,
12:39:05  55  	in_note 	  IN VARCHAR2,
12:39:05  56  	in_agent_id	  IN NUMBER
12:39:05  57  );
12:39:05  58  
12:39:05  59  /*
12:39:05  60  
12:39:05  61  THERE ARE NO ACCOUNT STATUS "SUSPENDED"
12:39:05  62  Waiting for new instructions.
12:39:05  63  
12:39:05  64  PROCEDURE SUSPEND_ACCOUNT (
12:39:05  65  /*
12:39:05  66  Throws exceptions:
12:39:05  67  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:05  68  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:05  69  
12:39:05  70  	  in_group_id	 IN  NUMBER,
12:39:05  71  	  in_updated_by  IN  VARCHAR2
12:39:05  72  )
12:39:05  73  */
12:39:05  74  
12:39:05  75  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
12:39:05  76  /*
12:39:05  77  IN:
12:39:05  78  instr_status:
12:39:05  79  1 - get active instruments only (default)
12:39:05  80  0 - get inactive instruments only
12:39:05  81  
12:39:05  82  Throws exceptions:
12:39:05  83  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  85  */
12:39:05  86  	in_group_id	  IN NUMBER,
12:39:05  87  	out_result_cc_set OUT SYS_REFCURSOR,
12:39:05  88  	out_default_id	  OUT NUMBER,
12:39:05  89  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
12:39:05  90  );
12:39:05  91  
12:39:05  92  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
12:39:05  93  /*
12:39:05  94  IN:
12:39:05  95  instr_status:
12:39:05  96  GLOBAL_CONSTANTS_V16.TRUE - get active instruments only (default)
12:39:05  97  GLOBAL_CONSTANTS_V16.FALSE - get inactive instruments only
12:39:05  98  
12:39:05  99  Throws exceptions:
12:39:05 100  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 102  */
12:39:05 103  	in_group_id	  IN NUMBER,
12:39:05 104  	out_result_gc_set OUT SYS_REFCURSOR,
12:39:05 105  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
12:39:05 106  );
12:39:05 107  
12:39:05 108  PROCEDURE GET_ACCOUNT_INFO  (
12:39:05 109  /*
12:39:05 110  Throws exceptions:
12:39:05 111  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 112  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 113  */
12:39:05 114  	  in_group_id	    IN	NUMBER,
12:39:05 115  	  out_account_info  OUT SYS_REFCURSOR
12:39:05 116  );
12:39:05 117  
12:39:05 118  PROCEDURE GET_ACCOUNT_NOTES (
12:39:05 119  /*
12:39:05 120  Throws exceptions:
12:39:05 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 122  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05 123  */
12:39:05 124  	  in_group_id	 IN  NUMBER,
12:39:05 125  	  out_result_set OUT SYS_REFCURSOR
12:39:05 126  );
12:39:05 127  
12:39:05 128  PROCEDURE GET_ACCOUNT_PAYPALS(
12:39:05 129  /*
12:39:05 130  IN:
12:39:05 131  instr_status:
12:39:05 132  1 - get active instruments only (default)
12:39:05 133  0 - get inactive instruments only
12:39:05 134  
12:39:05 135  Throws exceptions:
12:39:05 136  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 137  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 138  */
12:39:05 139  	in_group_id	  IN NUMBER,
12:39:05 140  	out_result_pp_set OUT SYS_REFCURSOR,
12:39:05 141  	out_default_id	  OUT NUMBER,
12:39:05 142  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
12:39:05 143  );
12:39:05 144  
12:39:05 145  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
12:39:05 146  /*
12:39:05 147  Throws exceptions:
12:39:05 148  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 149  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:05 150  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 151  */
12:39:05 152  	  in_group_id	 IN  NUMBER,
12:39:05 153  	  in_start_date  IN DATE,
12:39:05 154  	  in_end_date	 IN DATE,
12:39:05 155  	  in_status	 IN NUMBER,
12:39:05 156  	  in_group_account_type IN VARCHAR2,
12:39:05 157  	  out_result_set  OUT SYS_REFCURSOR
12:39:05 158  );
12:39:05 159  
12:39:05 160  PROCEDURE FREEZE_ACCOUNT (
12:39:05 161  /*
12:39:05 162  Throws exceptions:
12:39:05 163  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 164  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 165  */
12:39:05 166  	in_group_id   IN NUMBER,
12:39:05 167  	in_updated_by IN VARCHAR2,
12:39:05 168  	in_note       IN VARCHAR2,
12:39:05 169  	in_agent_id   IN NUMBER
12:39:05 170  );
12:39:05 171  
12:39:05 172  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
12:39:05 173  /*
12:39:05 174  Throws exceptions:
12:39:05 175  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 176  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 177  */
12:39:05 178  	in_group_id	   IN  NUMBER,
12:39:05 179  	in_subscription_id IN NUMBER,
12:39:05 180  	out_result_set	   OUT SYS_REFCURSOR
12:39:05 181  );
12:39:05 182  
12:39:05 183  PROCEDURE GET_ACCOUNT_GC_INVOICES (
12:39:05 184  /*
12:39:05 185  Throws exceptions:
12:39:05 186  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 188  */
12:39:05 189  	in_group_id    IN  NUMBER,
12:39:05 190  	out_result_set OUT SYS_REFCURSOR
12:39:05 191  );
12:39:05 192  
12:39:05 193  PROCEDURE GET_GC_INVOICE (
12:39:05 194  /*
12:39:05 195  Throws exceptions:
12:39:05 196  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 198  */
12:39:05 199  	in_group_id    IN  NUMBER,
12:39:05 200  	in_gc_code     IN  VARCHAR2,
12:39:05 201  	out_result_set OUT SYS_REFCURSOR
12:39:05 202  );
12:39:05 203  
12:39:05 204  PROCEDURE GET_ACCOUNT_PRODUCTS (
12:39:05 205  /*
12:39:05 206  Throws exceptions:
12:39:05 207  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 208  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 209  */
12:39:05 210  	in_group_id    IN  NUMBER,
12:39:05 211  	out_result_set OUT SYS_REFCURSOR
12:39:05 212  );
12:39:05 213  
12:39:05 214  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
12:39:05 215  /*
12:39:05 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 218  */
12:39:05 219  	in_group_id IN NUMBER,
12:39:05 220  	out_result_set	   OUT SYS_REFCURSOR
12:39:05 221  );
12:39:05 222  
12:39:05 223  PROCEDURE UPDATE_ACCOUNT_STATUS (
12:39:05 224  /*
12:39:05 225  Throws exceptions:
12:39:05 226  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 227  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 228  */
12:39:05 229  	in_account_id	     IN ACCOUNT.ID%TYPE,
12:39:05 230  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
12:39:05 231  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
12:39:05 232  );
12:39:05 233  
12:39:05 234  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
12:39:05 235  /*
12:39:05 236  Throws exceptions:
12:39:05 237  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 239  */
12:39:05 240  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
12:39:05 241  	out_licenses_num OUT NUMBER
12:39:05 242  );
12:39:05 243  
12:39:05 244  PROCEDURE SET_TAX_EXEMPT (
12:39:05 245  /*
12:39:05 246  Throws exceptions:
12:39:05 247  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 248  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 249  */
12:39:05 250  	in_group_id  IN NUMBER,
12:39:05 251  	in_exempt_id IN VARCHAR2
12:39:05 252  );
12:39:05 253  
12:39:05 254  PROCEDURE IS_TAX_EXEMPT (
12:39:05 255  /*
12:39:05 256  Throws exceptions:
12:39:05 257  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 258  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 259  Return:
12:39:05 260  	GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
12:39:05 261  	GLOBAL_CONSTANTS_V16.FALSE else
12:39:05 262  */
12:39:05 263  	in_group_id	  IN NUMBER,
12:39:05 264  	out_is_tax_exempt OUT NUMBER
12:39:05 265  );
12:39:05 266  
12:39:05 267  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
12:39:05 268  /*
12:39:05 269  Throws exceptions:
12:39:05 270  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 271  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 272  */
12:39:05 273  	in_account_id IN NUMBER,
12:39:05 274  	out_group_id  OUT NUMBER
12:39:05 275  );
12:39:05 276  
12:39:05 277  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
12:39:05 278  /*
12:39:05 279  Throws exceptions:
12:39:05 280  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 281  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 282  */
12:39:05 283  	in_group_id IN NUMBER,
12:39:05 284  	out_account_id	OUT NUMBER
12:39:05 285  );
12:39:05 286  
12:39:05 287  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
12:39:05 288  /*
12:39:05 289  Throws exceptions:
12:39:05 290  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 291  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 292  */
12:39:05 293  	in_invoice_id IN NUMBER,
12:39:05 294  	out_group_ids OUT SYS_REFCURSOR
12:39:05 295  );
12:39:05 296  
12:39:05 297  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
12:39:05 298  /*
12:39:05 299  Throws exceptions:
12:39:05 300  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 301  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 302  */
12:39:05 303  	in_group_id	  IN NUMBER,
12:39:05 304  	out_tax_exempt_id OUT VARCHAR2
12:39:05 305  );
12:39:05 306  
12:39:05 307  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
12:39:05 308  /*
12:39:05 309  Throws exceptions:
12:39:05 310  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 312  
12:39:05 313  Result has two columns:
12:39:05 314  subscription_id and offer_chain_id
12:39:05 315  */
12:39:05 316  	in_group_id    IN NUMBER,
12:39:05 317  	out_result_set OUT SYS_REFCURSOR
12:39:05 318  );
12:39:05 319  
12:39:05 320  PROCEDURE GET_USR_ALL_SBSCR_IDS (
12:39:05 321  /*
12:39:05 322  Throws exceptions:
12:39:05 323  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 324  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05 325  
12:39:05 326  Result has two columns:
12:39:05 327  subscription_id and offer_chain_id
12:39:05 328  */
12:39:05 329  	in_group_id	   IN NUMBER,
12:39:05 330  	out_result_set	   OUT SYS_REFCURSOR
12:39:05 331  );
12:39:05 332  
12:39:05 333  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
12:39:05 334  /*
12:39:05 335  Throws exceptions:
12:39:05 336  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:05 337  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:05 338  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:05 339  
12:39:05 340  Result has two columns:
12:39:05 341  subscription_id and offer_chain_id
12:39:05 342  */
12:39:05 343  	in_group_id	   IN NUMBER,
12:39:05 344  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
12:39:05 345  	out_result_set	   OUT SYS_REFCURSOR
12:39:05 346  );
12:39:05 347  
12:39:05 348  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
12:39:05 349  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
12:39:05 350  	in_expiration_date IN DATE,
12:39:05 351  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
12:39:05 352  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:05 353  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
12:39:05 354  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
12:39:05 355  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
12:39:05 356  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
12:39:05 357  	in_lower_bound IN NUMBER DEFAULT 1,
12:39:05 358  	in_upper_bound IN NUMBER DEFAULT 11,
12:39:05 359  	out_result_set OUT SYS_REFCURSOR
12:39:05 360  );
12:39:05 361  
12:39:05 362  END PROCS_ACCOUNT_V16;
12:39:05 363  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.18
12:39:05 SQL> 
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> -- DDL for package PROCS_ADDRESS_CRU
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE CREATE_ADDRESS(
12:39:05   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
12:39:05   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
12:39:05   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
12:39:05   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
12:39:05   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
12:39:05   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
12:39:05  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:05  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
12:39:05  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
12:39:05  13  );
12:39:05  14  
12:39:05  15  PROCEDURE UPDATE_ADDRESS(
12:39:05  16  	in_address_id	      IN ADDRESS.ID%TYPE,
12:39:05  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
12:39:05  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
12:39:05  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
12:39:05  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
12:39:05  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:05  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
12:39:05  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
12:39:05  24  );
12:39:05  25  
12:39:05  26  END PROCS_ADDRESS_CRU_V16;
12:39:05  27  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE CREATE_ADDRESS(
12:39:05   4  /*
12:39:05   5  Throws exceptions:
12:39:05   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05   7  */
12:39:05   8  	  out_address_id	OUT NUMBER,
12:39:05   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
12:39:05  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
12:39:05  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
12:39:05  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
12:39:05  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:05  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
12:39:05  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
12:39:05  16  );
12:39:05  17  
12:39:05  18  PROCEDURE UPDATE_ADDRESS(
12:39:05  19  /*
12:39:05  20  Throws exceptions:
12:39:05  21  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  22  */
12:39:05  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
12:39:05  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
12:39:05  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
12:39:05  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
12:39:05  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
12:39:05  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:05  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
12:39:05  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
12:39:05  31  );
12:39:05  32  
12:39:05  33  PROCEDURE GET_ADDRESS (
12:39:05  34  /*
12:39:05  35  Throws exceptions:
12:39:05  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  37  */
12:39:05  38  	  in_id 		IN ADDRESS.ID%TYPE,
12:39:05  39  	  out_result_set	OUT SYS_REFCURSOR
12:39:05  40  );
12:39:05  41  
12:39:05  42  END PROCS_ADDRESS_V16;
12:39:05  43  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:05 SQL> 
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> -- DDL for package PROCS_ADJUSTMENTS
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
12:39:05   4  	in_invoice_id		  IN NUMBER,
12:39:05   5  	in_adjustment_reason	  IN VARCHAR2,
12:39:05   6  	in_is_credit		  IN NUMBER,
12:39:05   7  	in_charge_id		  IN NUMBER,
12:39:05   8  	in_business_date	  IN DATE,
12:39:05   9  	in_created_by		  IN VARCHAR2,
12:39:05  10  	out_invoice_adjustment_id OUT NUMBER
12:39:05  11  );
12:39:05  12  
12:39:05  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
12:39:05  14  	in_invoice_id		  IN NUMBER,
12:39:05  15  	in_original_charge_id	  IN NUMBER,
12:39:05  16  	in_charge_id		  IN NUMBER,
12:39:05  17  	in_updated_by		  IN VARCHAR2
12:39:05  18  );
12:39:05  19  
12:39:05  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
12:39:05  21  	in_line_item_id 	    IN NUMBER,
12:39:05  22  	in_invoice_adjustment_id    IN NUMBER,
12:39:05  23  	in_amount		    IN NUMBER,
12:39:05  24  	in_tax			    IN NUMBER,
12:39:05  25  	in_discount		    IN NUMBER,
12:39:05  26  	in_created_by		    IN VARCHAR2,
12:39:05  27  	out_line_item_adjustment_id OUT NUMBER
12:39:05  28  );
12:39:05  29  
12:39:05  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
12:39:05  31  	in_tax_id		   IN NUMBER,
12:39:05  32  	in_line_item_adjustment_id IN NUMBER,
12:39:05  33  	in_amount		   IN NUMBER,
12:39:05  34  	in_created_by		   IN VARCHAR2,
12:39:05  35  	out_tax_adjustment_id	   OUT NUMBER
12:39:05  36  );
12:39:05  37  
12:39:05  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
12:39:05  39  	in_discount_id		   NUMBER,
12:39:05  40  	in_line_item_id 	   NUMBER,
12:39:05  41  	in_line_item_adjustment_id IN NUMBER,
12:39:05  42  	in_amount		   IN NUMBER,
12:39:05  43  	in_created_by		   IN VARCHAR2,
12:39:05  44  	out_discount_li_id	   OUT NUMBER
12:39:05  45  );
12:39:05  46  
12:39:05  47  END PROCS_ADJUSTMENTS_V16;
12:39:05  48  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.04
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE GET_SUB_ADX_INFO (
12:39:05   4  /*
12:39:05   5  Throws exceptions:
12:39:05   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05   7  */
12:39:05   8  	out_result_set	    OUT SYS_REFCURSOR,
12:39:05   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
12:39:05  10  );
12:39:05  11  
12:39:05  12  END PROCS_ADX_V16;
12:39:05  13  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE CREATE_AMAZON_SUB(
12:39:05   4  /*
12:39:05   5  Throws exceptions:
12:39:05   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05   7  */
12:39:05   8  	  out_id	      OUT NUMBER,
12:39:05   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
12:39:05  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
12:39:05  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
12:39:05  12  );
12:39:05  13  
12:39:05  14  END PROCS_AMAZON_CRU_V16;
12:39:05  15  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE CREATE_AMAZON_SUB(
12:39:05   4  /*
12:39:05   5  Throws exceptions:
12:39:05   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05   7  */
12:39:05   8  	  out_id	      OUT NUMBER,
12:39:05   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
12:39:05  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
12:39:05  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
12:39:05  12  );
12:39:05  13  
12:39:05  14  PROCEDURE GET_ACTIVE_SUB_IDS (
12:39:05  15  /*
12:39:05  16  Throws exceptions:
12:39:05  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  18  */
12:39:05  19  	out_result_set	    OUT SYS_REFCURSOR,
12:39:05  20  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
12:39:05  21  );
12:39:05  22  
12:39:05  23  PROCEDURE GET_ACTIVE_GROUP_IDS (
12:39:05  24  /*
12:39:05  25  Throws exceptions:
12:39:05  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  27  */
12:39:05  28  	out_result_set	    OUT SYS_REFCURSOR,
12:39:05  29  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
12:39:05  30  );
12:39:05  31  
12:39:05  32  END PROCS_AMAZON_V16;
12:39:05  33  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:05 SQL> 
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> -- DDL for package PROCS_CHARGE_CRU
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE CREATE_CHARGE(
12:39:05   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
12:39:05   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
12:39:05   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
12:39:05   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
12:39:05   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
12:39:05   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
12:39:05  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
12:39:05  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
12:39:05  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
12:39:05  13  );
12:39:05  14  
12:39:05  15  PROCEDURE UPDATE_CHARGE(
12:39:05  16  	in_charge_id	      IN CHARGE.ID%TYPE,
12:39:05  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
12:39:05  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
12:39:05  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
12:39:05  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
12:39:05  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
12:39:05  22  );
12:39:05  23  
12:39:05  24  END PROCS_CHARGE_CRU_V16;
12:39:05  25  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.04
12:39:05 SQL> 
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> -- DDL for package PROCS_CHARGE
12:39:05 SQL> --------------------------------------------------------------------------------
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V16" AS
12:39:05   2  
12:39:05   3  PROCEDURE CREATE_CHARGE(
12:39:05   4  /*
12:39:05   5  Throws exceptions:
12:39:05   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05   8  */
12:39:05   9  	in_invoice_id	      IN NUMBER,
12:39:05  10  	in_transaction_id     IN NUMBER,
12:39:05  11  	in_instrument_type_id IN NUMBER,
12:39:05  12  	in_instrument_id      IN NUMBER,
12:39:05  13  	in_charge_amount      IN NUMBER,
12:39:05  14  	in_created_by	      IN VARCHAR2,
12:39:05  15  	in_charge_status_id   IN NUMBER,
12:39:05  16  	out_charge_id	      OUT NUMBER
12:39:05  17  );
12:39:05  18  
12:39:05  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
12:39:05  20  /*
12:39:05  21  Throws exceptions:
12:39:05  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  23  */
12:39:05  24  	out_result_set	    OUT SYS_REFCURSOR,
12:39:05  25  	in_row_number	    IN NUMBER DEFAULT NULL
12:39:05  26  );
12:39:05  27  
12:39:05  28  PROCEDURE GET_UNPROCESSED_CHARGES (
12:39:05  29  /*
12:39:05  30  Throws exceptions:
12:39:05  31  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05  32  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  33  */
12:39:05  34  	in_invoice_id  IN NUMBER,
12:39:05  35  	out_result_set OUT SYS_REFCURSOR
12:39:05  36  );
12:39:05  37  
12:39:05  38  PROCEDURE GET_PROCESSED_CHARGES (
12:39:05  39  /*
12:39:05  40  Throws exceptions:
12:39:05  41  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05  42  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  43  */
12:39:05  44  	in_invoice_id  IN NUMBER,
12:39:05  45  	out_result_set OUT SYS_REFCURSOR
12:39:05  46  );
12:39:05  47  
12:39:05  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
12:39:05  49  /*
12:39:05  50  Throws exceptions:
12:39:05  51  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  53  */
12:39:05  54  	in_charge_id	    IN NUMBER,
12:39:05  55  	out_subscription_id OUT NUMBER
12:39:05  56  );
12:39:05  57  
12:39:05  58  PROCEDURE UPDATE_CHARGE_STATUS (
12:39:05  59  /*
12:39:05  60  Throws exceptions:
12:39:05  61  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  63  */
12:39:05  64  	in_charge_id	    IN CHARGE.ID%TYPE,
12:39:05  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
12:39:05  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
12:39:05  67  );
12:39:05  68  
12:39:05  69  FUNCTION IS_CHARGE_COLLECTED (
12:39:05  70  /*
12:39:05  71  Throws:
12:39:05  72  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  74  Returns:
12:39:05  75  GLOBAL_CONST.TRUE if transaction collected,
12:39:05  76  GLOBAL_CONST.FALSE else
12:39:05  77  */
12:39:05  78  	in_charge_id IN NUMBER
12:39:05  79  ) RETURN NUMBER;
12:39:05  80  
12:39:05  81  PROCEDURE GET_COLLECTED_CHARGES (
12:39:05  82  /*
12:39:05  83  Throws exceptions:
12:39:05  84  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:05  85  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:05  86  */
12:39:05  87  	in_invoice_id  IN NUMBER,
12:39:05  88  	out_result_set OUT SYS_REFCURSOR
12:39:05  89  );
12:39:05  90  
12:39:05  91  END PROCS_CHARGE_V16;
12:39:05  92  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:05 SQL> 
12:39:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
12:39:05   2  
12:39:05   3  	PROCEDURE POPULATE_REQUEST_INFO(
12:39:05   4  	  in_hours_prior    IN	NUMBER,
12:39:05   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
12:39:05   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
12:39:05   7  	);
12:39:05   8  
12:39:05   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
12:39:05  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
12:39:05  11  	  in_start	     IN NUMBER,
12:39:05  12  	  in_end	     IN NUMBER,
12:39:05  13  	  out_result_set     OUT SYS_REFCURSOR
12:39:05  14  	);
12:39:05  15  
12:39:05  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
12:39:05  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
12:39:05  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
12:39:05  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
12:39:05  20  	);
12:39:05  21  
12:39:05  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
12:39:05  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
12:39:05  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
12:39:05  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
12:39:05  26  	);
12:39:05  27  
12:39:05  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
12:39:05  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
12:39:05  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
12:39:05  31  	  out_request_files   OUT SYS_REFCURSOR
12:39:05  32  	);
12:39:05  33  
12:39:05  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
12:39:05  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
12:39:05  36  	  out_count OUT NUMBER
12:39:05  37  	);
12:39:05  38  
12:39:05  39  	PROCEDURE GET_CREDIT_CARD_LICENSE (
12:39:05  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
12:39:05  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
12:39:05  42  	  out_card_license     OUT SYS_REFCURSOR
12:39:05  43  	);
12:39:05  44  
12:39:05  45  	PROCEDURE UPDATE_CC_UPDATE(
12:39:05  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
12:39:05  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
12:39:05  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
12:39:05  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
12:39:05  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
12:39:05  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
12:39:05  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
12:39:05  53  	);
12:39:05  54  
12:39:05  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
12:39:05  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
12:39:05  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
12:39:05  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
12:39:05  59  	);
12:39:05  60  
12:39:05  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
12:39:05  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
12:39:05  63  	  out_request_file     OUT SYS_REFCURSOR
12:39:05  64  	);
12:39:05  65  
12:39:05  66  	PROCEDURE SUSPEND_CREDIT_CARD (
12:39:05  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
12:39:05  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
12:39:05  69  	);
12:39:05  70  
12:39:05  71  	PROCEDURE UPDATE_CREDIT_CARD (
12:39:05  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
12:39:05  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
12:39:05  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
12:39:05  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
12:39:05  76  	);
12:39:05  77  
12:39:05  78  	PROCEDURE COMPLETABLE_REQUESTS (
12:39:05  79  	  out_request_files OUT SYS_REFCURSOR
12:39:05  80  	);
12:39:05  81  
12:39:05  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
12:39:05  83  	  in_max_hours_before_report IN  NUMBER,
12:39:05  84  	  out_request_files	     OUT SYS_REFCURSOR
12:39:05  85  	);
12:39:05  86  
12:39:05  87  END PROCS_CUPY;
12:39:05  88  .
12:39:05 SQL> /

Package created.

Elapsed: 00:00:00.14
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE
12:39:06   2  PACKAGE PROCS_ENTITLEMENT_V16 AS
12:39:06   3  
12:39:06   4  PROCEDURE GET_ALL_ENTITLEMENTS(
12:39:06   5  	in_group_id IN NUMBER,
12:39:06   6  	out_result_set OUT SYS_REFCURSOR);
12:39:06   7  
12:39:06   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
12:39:06   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:06  10  	out_result_set OUT SYS_REFCURSOR);
12:39:06  11  
12:39:06  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
12:39:06  13  	in_subscription_id IN NUMBER,
12:39:06  14  	out_uri OUT VARCHAR2);
12:39:06  15  
12:39:06  16  END PROCS_ENTITLEMENT_V16;
12:39:06  17  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.06
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE CREATE_CREDIT_CARD(
12:39:06   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
12:39:06   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
12:39:06   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
12:39:06   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
12:39:06   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
12:39:06   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
12:39:06  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
12:39:06  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
12:39:06  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
12:39:06  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
12:39:06  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
12:39:06  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
12:39:06  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
12:39:06  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
12:39:06  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
12:39:06  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
12:39:06  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
12:39:06  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
12:39:06  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
12:39:06  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
12:39:06  24  );
12:39:06  25  
12:39:06  26  PROCEDURE UPDATE_CREDIT_CARD(
12:39:06  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
12:39:06  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
12:39:06  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
12:39:06  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
12:39:06  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
12:39:06  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
12:39:06  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
12:39:06  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:06  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
12:39:06  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
12:39:06  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
12:39:06  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
12:39:06  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
12:39:06  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
12:39:06  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
12:39:06  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
12:39:06  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
12:39:06  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
12:39:06  45  );
12:39:06  46  
12:39:06  47  PROCEDURE CREATE_PAYPAL(
12:39:06  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
12:39:06  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
12:39:06  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
12:39:06  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
12:39:06  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
12:39:06  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
12:39:06  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
12:39:06  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
12:39:06  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
12:39:06  57  	in_state			IN PAYPAL.STATE%TYPE,
12:39:06  58  	in_city 			IN PAYPAL.CITY%TYPE,
12:39:06  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
12:39:06  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
12:39:06  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
12:39:06  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
12:39:06  63  );
12:39:06  64  
12:39:06  65  PROCEDURE UPDATE_PAYPAL(
12:39:06  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
12:39:06  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
12:39:06  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
12:39:06  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
12:39:06  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
12:39:06  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
12:39:06  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
12:39:06  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
12:39:06  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
12:39:06  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:06  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
12:39:06  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
12:39:06  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
12:39:06  79  );
12:39:06  80  
12:39:06  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
12:39:06  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
12:39:06  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
12:39:06  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
12:39:06  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:06  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
12:39:06  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
12:39:06  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
12:39:06  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
12:39:06  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
12:39:06  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
12:39:06  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
12:39:06  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
12:39:06  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
12:39:06  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
12:39:06  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
12:39:06  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
12:39:06  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
12:39:06  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
12:39:06 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
12:39:06 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
12:39:06 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
12:39:06 103  );
12:39:06 104  
12:39:06 105  PROCEDURE UPDATE_GIFT_CERTIFICATE(
12:39:06 106  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
12:39:06 107  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
12:39:06 108  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
12:39:06 109  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
12:39:06 110  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
12:39:06 111  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
12:39:06 112  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
12:39:06 113  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
12:39:06 114  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
12:39:06 115  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
12:39:06 116  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
12:39:06 117  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
12:39:06 118  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
12:39:06 119  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
12:39:06 120  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
12:39:06 121  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
12:39:06 122  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
12:39:06 123  );
12:39:06 124  
12:39:06 125  END PROCS_FIN_INSTRUMENTS_CRU_V16;
12:39:06 126  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.12
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
12:39:06   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:06   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
12:39:06   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
12:39:06   7  );
12:39:06   8  
12:39:06   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
12:39:06  10  	in_invoice_id		     IN NUMBER,
12:39:06  11  	out_is_invoice_for_redeem_gc OUT NUMBER
12:39:06  12  );
12:39:06  13  
12:39:06  14  PROCEDURE GET_UNREDEEMED_GCS (
12:39:06  15  	out_result_set		OUT SYS_REFCURSOR,
12:39:06  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
12:39:06  17  	in_num_rows		IN NUMBER DEFAULT 10000,
12:39:06  18  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:06  19  );
12:39:06  20  
12:39:06  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
12:39:06  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:06  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
12:39:06  24  );
12:39:06  25  
12:39:06  26  PROCEDURE ADD_CREDIT_CARD (
12:39:06  27  /*
12:39:06  28  Throws exceptions:
12:39:06  29  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  31  */
12:39:06  32  	in_group_id		  IN NUMBER,
12:39:06  33  	in_updated_by		  IN VARCHAR2,
12:39:06  34  	in_instrument_name	  IN VARCHAR2,
12:39:06  35  	in_card_holder_name	  IN VARCHAR2,
12:39:06  36  	in_street_address	  IN VARCHAR2,
12:39:06  37  	in_street_address2	  IN VARCHAR2,
12:39:06  38  	in_state		  IN VARCHAR2,
12:39:06  39  	in_city 		  IN VARCHAR2,
12:39:06  40  	in_postal_code		  IN VARCHAR2,
12:39:06  41  	in_country		  IN CHAR,
12:39:06  42  	in_last_four_cc 	  IN VARCHAR2,
12:39:06  43  	in_expiration_date	  IN DATE,
12:39:06  44  	in_credit_card_type_id	  IN NUMBER,
12:39:06  45  	in_token		  IN VARCHAR2,
12:39:06  46  	in_chase_profile_id	  IN VARCHAR2,
12:39:06  47  	in_credit_card_status_id  IN NUMBER,
12:39:06  48  	in_private_first_name	  IN VARCHAR2,
12:39:06  49  	in_private_last_name	  IN VARCHAR2,
12:39:06  50  	out_credit_card_id	  OUT NUMBER
12:39:06  51  );
12:39:06  52  
12:39:06  53  /******************************************************************************/
12:39:06  54  
12:39:06  55  PROCEDURE ADD_PAYPAL (
12:39:06  56  /*
12:39:06  57  Throws exceptions:
12:39:06  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  60  */
12:39:06  61  	in_group_id			IN NUMBER,
12:39:06  62  	in_instrument_name		IN VARCHAR2,
12:39:06  63  	in_private_email_address	IN VARCHAR2,
12:39:06  64  	in_created_by			IN VARCHAR2,
12:39:06  65  	in_paypal_status_id		IN NUMBER,
12:39:06  66  	in_paypal_prvt_street_address	IN VARCHAR2,
12:39:06  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
12:39:06  68  	in_state			IN VARCHAR2,
12:39:06  69  	in_city 			IN VARCHAR2,
12:39:06  70  	in_postal_code			IN VARCHAR2,
12:39:06  71  	in_country			IN CHAR,
12:39:06  72  	in_expiration_date		IN DATE,
12:39:06  73  	in_secret_token 		IN VARCHAR2,
12:39:06  74  	out_paypal_id			OUT NUMBER
12:39:06  75  );
12:39:06  76  
12:39:06  77  /********************************************/
12:39:06  78  
12:39:06  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
12:39:06  80  /*
12:39:06  81  Throws exceptions:
12:39:06  82  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:06  83  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  84  */
12:39:06  85  	in_code       IN VARCHAR,
12:39:06  86  	out_result_set OUT SYS_REFCURSOR
12:39:06  87  );
12:39:06  88  
12:39:06  89  /********************************************/
12:39:06  90  
12:39:06  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
12:39:06  92  /*
12:39:06  93  Throws exceptions:
12:39:06  94  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:06  95  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  96  */
12:39:06  97  	in_gift_certificate_id IN NUMBER,
12:39:06  98  	out_result_set	       OUT SYS_REFCURSOR
12:39:06  99  );
12:39:06 100  
12:39:06 101  /********************************************/
12:39:06 102  
12:39:06 103  PROCEDURE DISABLE_CREDIT_CARD (
12:39:06 104  /*
12:39:06 105  Throws exceptions:
12:39:06 106  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06 107  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06 108  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06 109  */
12:39:06 110  	in_credit_card_id IN NUMBER,
12:39:06 111  	in_updated_by	  IN VARCHAR2
12:39:06 112  );
12:39:06 113  
12:39:06 114  /********************************************/
12:39:06 115  
12:39:06 116  PROCEDURE DISABLE_PAYPAL (
12:39:06 117  /*
12:39:06 118  Throws exceptions:
12:39:06 119  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06 120  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06 121  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06 122  */
12:39:06 123  	in_paypal_id  IN NUMBER,
12:39:06 124  	in_updated_by IN VARCHAR2
12:39:06 125  );
12:39:06 126  
12:39:06 127  /********************************************/
12:39:06 128  
12:39:06 129  PROCEDURE UPDATE_CREDIT_CARD (
12:39:06 130  /*
12:39:06 131  Throws exceptions:
12:39:06 132  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06 133  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06 134  */
12:39:06 135  	in_credit_card_id	  IN NUMBER,
12:39:06 136  	in_updated_by		  IN VARCHAR2,
12:39:06 137  	in_instrument_name	  IN VARCHAR2,
12:39:06 138  	in_is_default		  IN NUMBER
12:39:06 139  );
12:39:06 140  
12:39:06 141  /********************************************/
12:39:06 142  
12:39:06 143  PROCEDURE START_GC_PURCHASING (
12:39:06 144  	in_group_id		  IN NUMBER,
12:39:06 145  	in_offer_chain_id	  IN VARCHAR2,
12:39:06 146  	in_gift_certificate_code  IN  VARCHAR2,
12:39:06 147  	in_created_by		  IN  VARCHAR2,
12:39:06 148  	in_recipient_name	  IN  VARCHAR2,
12:39:06 149  	in_recipient_email	  IN  VARCHAR2,
12:39:06 150  	in_recipient_address_id   IN NUMBER,
12:39:06 151  	in_recipient_notify_date  IN DATE,
12:39:06 152  	in_sender_name		  IN VARCHAR2,
12:39:06 153  	in_sender_email 	  IN VARCHAR2,
12:39:06 154  	in_gift_message 	  IN  VARCHAR2,
12:39:06 155  	in_expiration_date	  IN DATE,
12:39:06 156  	out_gift_certificate_id   OUT NUMBER,
12:39:06 157  	out_invoice_id		  OUT NUMBER
12:39:06 158  );
12:39:06 159  
12:39:06 160  PROCEDURE FINALIZE_GC_PURCHASING (
12:39:06 161  	in_invoice_id	      IN NUMBER,
12:39:06 162  	in_created_by	      IN VARCHAR2,
12:39:06 163  	in_instrument_id      IN NUMBER,
12:39:06 164  	in_instrument_type_id IN NUMBER,
12:39:06 165  	in_order_id	      IN VARCHAR2,
12:39:06 166  	in_transaction_id     IN NUMBER,
12:39:06 167  	out_charge_amount     OUT NUMBER
12:39:06 168  );
12:39:06 169  
12:39:06 170  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
12:39:06 171  	in_group_id	  IN NUMBER,
12:39:06 172  	in_offer_chain_id IN VARCHAR2,
12:39:06 173  	in_gift_certificate_code  IN  VARCHAR2,
12:39:06 174  	in_created_by IN  VARCHAR2,
12:39:06 175  	in_recipient_name IN  VARCHAR2,
12:39:06 176  	in_recipient_email IN  VARCHAR2,
12:39:06 177  	in_sender_name IN VARCHAR2,
12:39:06 178  	in_sender_email IN VARCHAR2,
12:39:06 179  	in_gift_message IN  VARCHAR2,
12:39:06 180  	in_instrument_id  IN  NUMBER,
12:39:06 181  	in_instrument_type_id IN NUMBER,
12:39:06 182  	in_expiration_date IN DATE,
12:39:06 183  	in_order_id IN VARCHAR2,
12:39:06 184  	in_transaction_id IN NUMBER
12:39:06 185  );
12:39:06 186  
12:39:06 187  /*********************************************/
12:39:06 188  
12:39:06 189  PROCEDURE REDEEM_GIFT_CERTIFICATE (
12:39:06 190  	in_group_id			IN NUMBER,
12:39:06 191  	in_gift_certificate_code	IN VARCHAR2,
12:39:06 192  	in_created_by			IN VARCHAR2,
12:39:06 193  	in_redeemer_address_id		IN NUMBER,
12:39:06 194  	in_fin_instrument_id		IN NUMBER,
12:39:06 195  	in_fin_instrument_type_id	IN NUMBER,
12:39:06 196  	in_redemption_offer_chain_id	IN NUMBER,
12:39:06 197  	out_subscription_id		OUT NUMBER,
12:39:06 198  	out_license_id			OUT NUMBER
12:39:06 199  );
12:39:06 200  
12:39:06 201  /********************************************/
12:39:06 202  
12:39:06 203  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
12:39:06 204  	in_group_id	       IN  NUMBER,
12:39:06 205  	out_instrument_type_id OUT NUMBER,
12:39:06 206  	out_instrument_id      OUT NUMBER
12:39:06 207  );
12:39:06 208  
12:39:06 209  /************************************************/
12:39:06 210  
12:39:06 211  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
12:39:06 212  	in_group_id	      IN NUMBER,
12:39:06 213  	in_instrument_type_id IN NUMBER,
12:39:06 214  	in_instrument_id      IN NUMBER,
12:39:06 215  	in_updated_by	      IN VARCHAR2
12:39:06 216  );
12:39:06 217  
12:39:06 218  /***************************************************/
12:39:06 219  
12:39:06 220  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
12:39:06 221  	in_group_id	      IN NUMBER
12:39:06 222  );
12:39:06 223  
12:39:06 224  /****************************************************/
12:39:06 225  
12:39:06 226  PROCEDURE GET_CREDIT_CARD_BY_ID (
12:39:06 227  	in_credit_card_id IN  NUMBER,
12:39:06 228  	out_result_set	  OUT SYS_REFCURSOR
12:39:06 229  );
12:39:06 230  
12:39:06 231  /****************************************************/
12:39:06 232  
12:39:06 233  PROCEDURE GET_PAYPAL_BY_ID (
12:39:06 234  	in_paypal_id   IN  NUMBER,
12:39:06 235  	out_result_set OUT SYS_REFCURSOR
12:39:06 236  );
12:39:06 237  
12:39:06 238  /***********************************************/
12:39:06 239  
12:39:06 240  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
12:39:06 241  	in_credit_card_id NUMBER
12:39:06 242  ) RETURN NUMBER;
12:39:06 243  
12:39:06 244  /*************************************************/
12:39:06 245  
12:39:06 246  PROCEDURE GET_PURCHASED_GCERTIFICATES (
12:39:06 247  	in_group_id    IN NUMBER,
12:39:06 248  	out_result_set OUT SYS_REFCURSOR
12:39:06 249  );
12:39:06 250  
12:39:06 251  /*************************************************/
12:39:06 252  
12:39:06 253  -- isGiftCertificateForProperOffer
12:39:06 254  
12:39:06 255  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
12:39:06 256  	in_gift_certificate_id IN NUMBER,
12:39:06 257  	in_charge_id	       IN NUMBER,
12:39:06 258  	out_result	       OUT NUMBER
12:39:06 259  );
12:39:06 260  
12:39:06 261  FUNCTION IS_CREDIT_CARD_EXISTS (
12:39:06 262  /*
12:39:06 263  1 - if instrument exists
12:39:06 264  0 - else
12:39:06 265  */
12:39:06 266  	in_credit_card_id IN NUMBER
12:39:06 267  ) RETURN NUMBER;
12:39:06 268  
12:39:06 269  FUNCTION IS_PAYPAL_EXISTS (
12:39:06 270  /*
12:39:06 271  1 - if instrument exists
12:39:06 272  0 - else
12:39:06 273  */
12:39:06 274  	in_paypal_id IN NUMBER
12:39:06 275  ) RETURN NUMBER;
12:39:06 276  
12:39:06 277  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
12:39:06 278  /*
12:39:06 279  1 - if instrument exists
12:39:06 280  0 - else
12:39:06 281  */
12:39:06 282  	in_gift_certificate_id IN NUMBER
12:39:06 283  ) RETURN NUMBER;
12:39:06 284  
12:39:06 285  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
12:39:06 286  	in_credit_card_id IN NUMBER,
12:39:06 287  	out_group_id	  OUT NUMBER
12:39:06 288  );
12:39:06 289  
12:39:06 290  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
12:39:06 291  	in_paypal_id IN NUMBER,
12:39:06 292  	out_group_id	  OUT NUMBER
12:39:06 293  );
12:39:06 294  
12:39:06 295  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
12:39:06 296  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
12:39:06 297  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
12:39:06 298  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
12:39:06 299  );
12:39:06 300  
12:39:06 301  PROCEDURE UPDATE_PAYPAL_STATUS (
12:39:06 302  	in_paypal_id	    IN PAYPAL.ID%TYPE,
12:39:06 303  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
12:39:06 304  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
12:39:06 305  );
12:39:06 306  
12:39:06 307  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
12:39:06 308  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
12:39:06 309  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
12:39:06 310  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
12:39:06 311  );
12:39:06 312  
12:39:06 313  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
12:39:06 314  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:06 315  	out_result_set OUT SYS_REFCURSOR
12:39:06 316  );
12:39:06 317  
12:39:06 318  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
12:39:06 319  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
12:39:06 320  	in_old_fin_instrument_id   IN NUMBER,
12:39:06 321  	in_old_fin_instrument_type IN NUMBER,
12:39:06 322  	in_new_fin_instrument_id   IN NUMBER,
12:39:06 323  	in_new_fin_instrument_type IN NUMBER,
12:39:06 324  	in_updated_by		   IN VARCHAR2
12:39:06 325  );
12:39:06 326  
12:39:06 327  END PROCS_FIN_INSTRUMENTS_V16;
12:39:06 328  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.10
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
12:39:06   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
12:39:06   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
12:39:06   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
12:39:06   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
12:39:06   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
12:39:06   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
12:39:06  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
12:39:06  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:06  12  );
12:39:06  13  
12:39:06  14  PROCEDURE CREATE_GROUP_ACCOUNT (
12:39:06  15  	in_subscription_id	 IN NUMBER,
12:39:06  16  	in_group_name		 IN VARCHAR2,
12:39:06  17  	in_first_name		 IN VARCHAR2,
12:39:06  18  	in_last_name		 IN VARCHAR2,
12:39:06  19  	in_email		 IN VARCHAR2,
12:39:06  20  	in_phone		 IN VARCHAR2,
12:39:06  21  	in_organization_type	 IN VARCHAR2,
12:39:06  22  	in_seats		 IN NUMBER,
12:39:06  23  	in_seat_ttl_in_hours	 IN NUMBER,
12:39:06  24  	in_ip			 IN NUMBER,
12:39:06  25  	in_created_by		 IN VARCHAR2
12:39:06  26  );
12:39:06  27  
12:39:06  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
12:39:06  29  	in_group_account_id    IN NUMBER,
12:39:06  30  	in_borrower_account_id IN NUMBER,
12:39:06  31  	in_ip_address	       IN VARCHAR2,
12:39:06  32  	in_email_domain        IN VARCHAR2,
12:39:06  33  	in_start_date	       IN DATE,
12:39:06  34  	in_end_date	       IN DATE,
12:39:06  35  	in_created_by	       IN VARCHAR2
12:39:06  36  );
12:39:06  37  
12:39:06  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
12:39:06  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:06  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
12:39:06  41  );
12:39:06  42  
12:39:06  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
12:39:06  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
12:39:06  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
12:39:06  46  );
12:39:06  47  
12:39:06  48  PROCEDURE ADD_IP_RANGE (
12:39:06  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:06  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
12:39:06  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
12:39:06  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
12:39:06  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
12:39:06  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
12:39:06  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
12:39:06  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
12:39:06  57  );
12:39:06  58  
12:39:06  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
12:39:06  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:06  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:06  62  );
12:39:06  63  
12:39:06  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
12:39:06  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
12:39:06  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:06  67  );
12:39:06  68  
12:39:06  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
12:39:06  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
12:39:06  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:06  72  );
12:39:06  73  
12:39:06  74  PROCEDURE ADD_EMAIL_DOMAIN (
12:39:06  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:06  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
12:39:06  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
12:39:06  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
12:39:06  79  );
12:39:06  80  
12:39:06  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
12:39:06  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
12:39:06  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
12:39:06  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
12:39:06  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
12:39:06  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
12:39:06  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
12:39:06  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
12:39:06  89  );
12:39:06  90  
12:39:06  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
12:39:06  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
12:39:06  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
12:39:06  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
12:39:06  95  );
12:39:06  96  END PROCS_GROUP_ACCOUNT_CRU_V16;
12:39:06  97  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.16
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V16" As
12:39:06   2  
12:39:06   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
12:39:06   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
12:39:06   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
12:39:06   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:06   7  );
12:39:06   8  
12:39:06   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
12:39:06  10  	out_result_set OUT SYS_REFCURSOR
12:39:06  11  );
12:39:06  12  
12:39:06  13  PROCEDURE EXPIRE_SUB_SHARE (
12:39:06  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
12:39:06  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:06  16  );
12:39:06  17  
12:39:06  18  PROCEDURE EXPIRE_ALL_SHARES (
12:39:06  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
12:39:06  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:06  21  );
12:39:06  22  
12:39:06  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
12:39:06  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
12:39:06  25  	in_start	 IN  NUMBER,
12:39:06  26  	in_end		 IN  NUMBER,
12:39:06  27  	in_expired	 IN  NUMBER,
12:39:06  28  	out_result_set	 OUT SYS_REFCURSOR,
12:39:06  29  	out_shares_count OUT NUMBER
12:39:06  30  );
12:39:06  31  
12:39:06  32  PROCEDURE IS_VALID_IP_ADDRESS (
12:39:06  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:06  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
12:39:06  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
12:39:06  36  	out_is_valid	    OUT NUMBER
12:39:06  37  );
12:39:06  38  
12:39:06  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
12:39:06  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:06  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
12:39:06  42  	out_is_valid	    OUT NUMBER
12:39:06  43  );
12:39:06  44  
12:39:06  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
12:39:06  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
12:39:06  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
12:39:06  48  	Out_Result_Set	       Out Sys_Refcursor
12:39:06  49  );
12:39:06  50  
12:39:06  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
12:39:06  52  	in_group_account_id IN NUMBER,
12:39:06  53  	in_start	    IN NUMBER,
12:39:06  54  	in_end		    IN NUMBER,
12:39:06  55  	Out_Result_Set	    OUT Sys_Refcursor
12:39:06  56  );
12:39:06  57  
12:39:06  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
12:39:06  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
12:39:06  60  	Out_Result_Set	   Out Sys_Refcursor
12:39:06  61  );
12:39:06  62  
12:39:06  63  PROCEDURE CREATE_GROUP_ACCOUNT (
12:39:06  64  	in_subscription_id	 IN NUMBER,
12:39:06  65  	in_group_name		 IN VARCHAR2,
12:39:06  66  	in_first_name		 IN VARCHAR2,
12:39:06  67  	in_last_name		 IN VARCHAR2,
12:39:06  68  	in_email		 IN VARCHAR2,
12:39:06  69  	in_phone		 IN VARCHAR2,
12:39:06  70  	in_organization_type	 IN VARCHAR2,
12:39:06  71  	in_seats		 IN NUMBER,
12:39:06  72  	in_seat_ttl_in_hours	 IN NUMBER,
12:39:06  73  	in_ip			 IN NUMBER,
12:39:06  74  	in_created_by		 IN VARCHAR2
12:39:06  75  );
12:39:06  76  
12:39:06  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
12:39:06  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
12:39:06  79  	out_result_set	    OUT SYS_REFCURSOR
12:39:06  80  );
12:39:06  81  
12:39:06  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
12:39:06  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
12:39:06  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
12:39:06  85  	out_result_set	    OUT SYS_REFCURSOR
12:39:06  86  );
12:39:06  87  
12:39:06  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
12:39:06  89  	in_group_account_id   IN NUMBER,
12:39:06  90  	in_start	      IN NUMBER,
12:39:06  91  	in_end		      IN NUMBER,
12:39:06  92  	in_status	      IN NUMBER,
12:39:06  93  	out_record_count      OUT NUMBER,
12:39:06  94  	out_result_set	      OUT SYS_REFCURSOR
12:39:06  95  );
12:39:06  96  
12:39:06  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
12:39:06  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:06  99  	in_start	      IN NUMBER,
12:39:06 100  	in_end		      IN NUMBER,
12:39:06 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
12:39:06 102  	out_record_count      OUT NUMBER,
12:39:06 103  	out_result_set	      OUT SYS_REFCURSOR
12:39:06 104  );
12:39:06 105  
12:39:06 106  PROCEDURE ADD_EMAIL_DOMAIN (
12:39:06 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:06 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
12:39:06 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
12:39:06 110  );
12:39:06 111  
12:39:06 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
12:39:06 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:06 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:06 115  );
12:39:06 116  
12:39:06 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
12:39:06 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
12:39:06 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:06 120  );
12:39:06 121  
12:39:06 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
12:39:06 123  	in_group_account_id    IN NUMBER,
12:39:06 124  	in_borrower_account_id IN NUMBER,
12:39:06 125  	in_ip_address	       IN VARCHAR2,
12:39:06 126  	in_email_domain        IN VARCHAR2,
12:39:06 127  	in_created_by	       IN VARCHAR2
12:39:06 128  );
12:39:06 129  
12:39:06 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
12:39:06 131  	in_group_account_id   IN NUMBER,
12:39:06 132  	out_occupied_seats   OUT NUMBER
12:39:06 133  );
12:39:06 134  
12:39:06 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
12:39:06 136  	in_group_account_id   IN NUMBER
12:39:06 137  ) RETURN NUMBER;
12:39:06 138  
12:39:06 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
12:39:06 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:06 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
12:39:06 142  );
12:39:06 143  
12:39:06 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
12:39:06 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
12:39:06 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
12:39:06 147  );
12:39:06 148  
12:39:06 149  PROCEDURE ADD_IP_RANGE (
12:39:06 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:06 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
12:39:06 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
12:39:06 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
12:39:06 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
12:39:06 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
12:39:06 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
12:39:06 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
12:39:06 158  );
12:39:06 159  
12:39:06 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
12:39:06 161  	in_group_account_id IN NUMBER,
12:39:06 162  	out_group_id OUT NUMBER
12:39:06 163  );
12:39:06 164  
12:39:06 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
12:39:06 166  	in_group_account_ip_range_id IN NUMBER,
12:39:06 167  	out_group_id OUT NUMBER
12:39:06 168  );
12:39:06 169  
12:39:06 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
12:39:06 171  	in_group_account_email_dom_id IN NUMBER,
12:39:06 172  	out_group_id OUT NUMBER
12:39:06 173  );
12:39:06 174  
12:39:06 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
12:39:06 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
12:39:06 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
12:39:06 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
12:39:06 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
12:39:06 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
12:39:06 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
12:39:06 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
12:39:06 183  );
12:39:06 184  
12:39:06 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
12:39:06 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
12:39:06 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
12:39:06 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
12:39:06 189  );
12:39:06 190  
12:39:06 191  END PROCS_GROUP_ACCOUNT_V16;
12:39:06 192  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.06
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_HISTORY
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE CREATE_ADDRESS_HISTORY(
12:39:06   4  /*
12:39:06   5  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06   7  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06   8  */
12:39:06   9  	in_address_id		     IN NUMBER,
12:39:06  10  	in_system_activity_reason_id IN NUMBER
12:39:06  11  );
12:39:06  12  
12:39:06  13  PROCEDURE CREATE_ACCOUNT_HISTORY(
12:39:06  14  /*
12:39:06  15  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  17  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  18  */
12:39:06  19  	in_account_id		     IN NUMBER,
12:39:06  20  	in_system_activity_reason_id IN NUMBER
12:39:06  21  );
12:39:06  22  
12:39:06  23  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
12:39:06  24  /*
12:39:06  25  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  27  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  28  */
12:39:06  29  	in_subscription_id	     IN NUMBER,
12:39:06  30  	in_system_activity_reason_id IN NUMBER
12:39:06  31  );
12:39:06  32  
12:39:06  33  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
12:39:06  34  /*
12:39:06  35  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  37  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  38  */
12:39:06  39  	in_credit_card_id	      IN NUMBER,
12:39:06  40  	in_system_activity_reason_id  IN  NUMBER
12:39:06  41  );
12:39:06  42  
12:39:06  43  PROCEDURE CREATE_PAYPAL_HISTORY(
12:39:06  44  /*
12:39:06  45  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  46  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  47  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  48  */
12:39:06  49  	in_paypal_id		      IN NUMBER,
12:39:06  50  	in_system_activity_reason_id  IN NUMBER
12:39:06  51  );
12:39:06  52  
12:39:06  53  PROCEDURE CREATE_GIFT_CERT_HISTORY(
12:39:06  54  /*
12:39:06  55  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  56  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  57  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  58  */
12:39:06  59  	in_gift_certificate_id	      IN NUMBER,
12:39:06  60  	in_system_activity_reason_id  IN  NUMBER
12:39:06  61  );
12:39:06  62  
12:39:06  63  PROCEDURE CREATE_TRANSACTION_HISTORY (
12:39:06  64  /*
12:39:06  65  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  67  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  68  */
12:39:06  69  	in_transaction_id	     IN NUMBER,
12:39:06  70  	in_system_activity_reason_id IN NUMBER
12:39:06  71  );
12:39:06  72  
12:39:06  73  PROCEDURE CREATE_INVOICE_HISTORY (
12:39:06  74  /*
12:39:06  75  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  76  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  77  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  78  */
12:39:06  79  	in_invoice_id		     IN NUMBER,
12:39:06  80  	in_system_activity_reason_id IN NUMBER
12:39:06  81  );
12:39:06  82  
12:39:06  83  PROCEDURE CREATE_LICENSE_HISTORY (
12:39:06  84  /*
12:39:06  85  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  87  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  88  */
12:39:06  89  	in_license_id		     IN NUMBER,
12:39:06  90  	in_system_activity_reason_id IN NUMBER
12:39:06  91  );
12:39:06  92  
12:39:06  93  PROCEDURE CREATE_CHARGE_HISTORY (
12:39:06  94  /*
12:39:06  95  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  96  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  97  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06  98  */
12:39:06  99  	in_charge_id		    IN NUMBER,
12:39:06 100  	in_system_activity_reason_id IN NUMBER
12:39:06 101  );
12:39:06 102  
12:39:06 103  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
12:39:06 104  /*
12:39:06 105  APP_EXCEPTION_CODES_V14.NOT_FOUND
12:39:06 106  APP_EXCEPTION_CODES_V14.UNKNOWN_ERROR
12:39:06 107  APP_EXCEPTION_CODES_V14.INTERNAL_ERROR
12:39:06 108  */
12:39:06 109  	in_invoice_adjustment_id     IN NUMBER,
12:39:06 110  	in_system_activity_reason_id IN NUMBER
12:39:06 111  );
12:39:06 112  
12:39:06 113  
12:39:06 114  END PROCS_HISTORY_V16;
12:39:06 115  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.04
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_INVOICE_CRU
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE CREATE_INVOICE (
12:39:06   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
12:39:06   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
12:39:06   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
12:39:06   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
12:39:06   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
12:39:06   9  );
12:39:06  10  
12:39:06  11  PROCEDURE UPDATE_INVOICE (
12:39:06  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
12:39:06  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
12:39:06  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
12:39:06  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
12:39:06  16  );
12:39:06  17  
12:39:06  18  END PROCS_INVOICE_CRU_V16;
12:39:06  19  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.09
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_INVOICE
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE IS_INVOICE_FOR_GC (
12:39:06   4  	in_invoice_id  IN NUMBER,
12:39:06   5  	out_result     OUT NUMBER
12:39:06   6  );
12:39:06   7  
12:39:06   8  PROCEDURE CREATE_INVOICE(
12:39:06   9  /*
12:39:06  10  Throws exceptions:
12:39:06  11  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  12  */
12:39:06  13  	  in_invoice_status IN NUMBER,
12:39:06  14  	  in_created_by     IN VARCHAR2,
12:39:06  15  	  in_tax_exempt_id  IN VARCHAR2,
12:39:06  16  	  out_invoice_id    OUT NUMBER
12:39:06  17  );
12:39:06  18  
12:39:06  19  PROCEDURE GET_PENDING_INVOICES (
12:39:06  20  /*
12:39:06  21  Throws exceptions:
12:39:06  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  23  */
12:39:06  24  	out_result_set1      OUT SYS_REFCURSOR,
12:39:06  25  	out_result_set2      OUT SYS_REFCURSOR,
12:39:06  26  	out_result_set3      OUT SYS_REFCURSOR,
12:39:06  27  	in_row_number	     IN NUMBER DEFAULT NULL
12:39:06  28  );
12:39:06  29  
12:39:06  30  PROCEDURE CALCULATE_INVOICE_AMOUNT (
12:39:06  31  /*
12:39:06  32  Throws exceptions:
12:39:06  33  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  34  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  35  */
12:39:06  36  	in_invoice_id IN  NUMBER,
12:39:06  37  	out_amount    OUT NUMBER
12:39:06  38  );
12:39:06  39  
12:39:06  40  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
12:39:06  41  	in_invoice_id IN  NUMBER
12:39:06  42  ) RETURN NUMBER;
12:39:06  43  
12:39:06  44  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
12:39:06  45  /*
12:39:06  46  Throws exceptions:
12:39:06  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  49  */
12:39:06  50  	in_invoice_id  IN  NUMBER,
12:39:06  51  	out_account_id OUT NUMBER
12:39:06  52  );
12:39:06  53  
12:39:06  54  PROCEDURE GET_INVOICE_DETAILS (
12:39:06  55  /*
12:39:06  56  Throws exceptions:
12:39:06  57  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  58  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  59  */
12:39:06  60  	in_invoice_id	   IN  NUMBER,
12:39:06  61  	out_group_id	   OUT NUMBER,
12:39:06  62  	out_status_id	   OUT NUMBER,
12:39:06  63  	out_line_items_set OUT SYS_REFCURSOR,
12:39:06  64  	out_pp_charges_set OUT SYS_REFCURSOR,
12:39:06  65  	out_cc_charges_set OUT SYS_REFCURSOR,
12:39:06  66  	out_gc_charges_set OUT SYS_REFCURSOR
12:39:06  67  );
12:39:06  68  -- norlov: #38796
12:39:06  69  PROCEDURE GET_TRANSACTION_INVOICE (
12:39:06  70  /*
12:39:06  71  Throws exceptions:
12:39:06  72  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  74  */
12:39:06  75  	in_transaction_id  IN  NUMBER,
12:39:06  76  	out_result_set	      OUT SYS_REFCURSOR
12:39:06  77  );
12:39:06  78  
12:39:06  79  PROCEDURE UPDATE_INVOICE_STATUS (
12:39:06  80  /*
12:39:06  81  Throws exceptions:
12:39:06  82  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  83  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  84  */
12:39:06  85  	in_invoice_id		       IN NUMBER,
12:39:06  86  	in_invoice_status_id	       IN NUMBER,
12:39:06  87  	in_updated_by		       IN VARCHAR2
12:39:06  88  );
12:39:06  89  
12:39:06  90  FUNCTION IS_INVOICE_PAYING_STARTED (
12:39:06  91  /*
12:39:06  92  Throws exceptions:
12:39:06  93  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  95  */
12:39:06  96  	in_invoice_id IN NUMBER
12:39:06  97  ) RETURN NUMBER;
12:39:06  98  
12:39:06  99  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
12:39:06 100  	in_invoice_id  IN NUMBER,
12:39:06 101  	out_is_started OUT NUMBER
12:39:06 102  );
12:39:06 103  
12:39:06 104  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
12:39:06 105  	in_invoice_id	      IN NUMBER,
12:39:06 106  	in_chargeback_date    IN DATE,
12:39:06 107  	out_chargeback_amount OUT NUMBER
12:39:06 108  );
12:39:06 109  
12:39:06 110  PROCEDURE APPLY_REFUND (
12:39:06 111  	in_invoice_id	     IN NUMBER,
12:39:06 112  	in_chargeback_amount IN NUMBER,
12:39:06 113  	in_created_by	     IN VARCHAR2,
12:39:06 114  	out_charge_id	     OUT NUMBER
12:39:06 115  );
12:39:06 116  
12:39:06 117  PROCEDURE GET_MAX_REFUND (
12:39:06 118  	in_invoice_id IN NUMBER,
12:39:06 119  	out_amount    OUT NUMBER
12:39:06 120  );
12:39:06 121  
12:39:06 122  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
12:39:06 123  	in_invoice_id	    IN NUMBER,
12:39:06 124  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
12:39:06 125  	out_days_num	    OUT NUMBER
12:39:06 126  );
12:39:06 127  
12:39:06 128  PROCEDURE GET_INVOICE_LINE_ITEMS (
12:39:06 129  	in_invoice_id  IN NUMBER,
12:39:06 130  	out_result_set OUT SYS_REFCURSOR
12:39:06 131  );
12:39:06 132  
12:39:06 133  PROCEDURE GET_INVOICE_LICENSES (
12:39:06 134  	in_invoice_id  IN NUMBER,
12:39:06 135  	out_result_set OUT SYS_REFCURSOR
12:39:06 136  );
12:39:06 137  
12:39:06 138  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
12:39:06 139  	in_invoice_id	   IN NUMBER,
12:39:06 140  	out_offer_chain_id OUT NUMBER
12:39:06 141  );
12:39:06 142  
12:39:06 143  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
12:39:06 144  -- Closing invoice without refund
12:39:06 145  	in_invoice_id IN NUMBER,
12:39:06 146  	in_updated_by IN VARCHAR2
12:39:06 147  );
12:39:06 148  
12:39:06 149  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
12:39:06 150  	in_invoice_id	    IN NUMBER,
12:39:06 151  	out_subscription_id OUT NUMBER
12:39:06 152  );
12:39:06 153  
12:39:06 154  PROCEDURE IS_INVOICE_TAX_EXEMPT (
12:39:06 155  /*
12:39:06 156  Throws exceptions:
12:39:06 157  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:06 158  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06 159  Return:
12:39:06 160  	GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
12:39:06 161  	GLOBAL_CONSTANTS_V16.FALSE else
12:39:06 162  */
12:39:06 163  	in_invoice_id	  IN NUMBER,
12:39:06 164  	out_is_tax_exempt OUT NUMBER
12:39:06 165  );
12:39:06 166  
12:39:06 167  PROCEDURE GET_INVOICE_BY_ID (
12:39:06 168  	in_invoice_id  IN NUMBER,
12:39:06 169  	out_result_set OUT SYS_REFCURSOR
12:39:06 170  );
12:39:06 171  
12:39:06 172  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
12:39:06 173  	in_invoice_id		      IN NUMBER,
12:39:06 174  	out_is_tax_calculation_needed OUT NUMBER
12:39:06 175  );
12:39:06 176  
12:39:06 177  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
12:39:06 178  	in_invoice_id		     IN NUMBER,
12:39:06 179  	in_updated_by		     IN VARCHAR2,
12:39:06 180  	in_is_tax_calculation_needed IN NUMBER
12:39:06 181  );
12:39:06 182  
12:39:06 183  PROCEDURE REFUND_INVOICE (
12:39:06 184  	in_invoice_id	   IN NUMBER,
12:39:06 185  	in_refund_amount   IN NUMBER,
12:39:06 186  	in_note 	   IN VARCHAR2,
12:39:06 187  	in_created_by	   IN VARCHAR2,
12:39:06 188  	out_charge_id	   OUT NUMBER
12:39:06 189  );
12:39:06 190  
12:39:06 191  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
12:39:06 192  	in_invoice_id		    IN NUMBER,
12:39:06 193  	out_order_id		    OUT VARCHAR2,
12:39:06 194  	out_external_transaction_id OUT VARCHAR2
12:39:06 195  );
12:39:06 196  
12:39:06 197  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
12:39:06 198  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
12:39:06 199  	out_result_set OUT SYS_REFCURSOR
12:39:06 200  );
12:39:06 201  
12:39:06 202  PROCEDURE IS_REVOKE_ENTITLEMENTS(
12:39:06 203  	in_invoice_id IN NUMBER,
12:39:06 204  	out_is_revoke OUT NUMBER
12:39:06 205  );
12:39:06 206  
12:39:06 207  END PROCS_INVOICE_V16;
12:39:06 208  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.05
12:39:06 SQL> 
12:39:06 SQL> /*
12:39:06 SQL> CREATE TABLE ITUNES_RECEIPT (
12:39:06 SQL> 	id NUMBER NOT NULL ENABLE,
12:39:06 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
12:39:06 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
12:39:06 SQL> 	status NUMBER,
12:39:06 SQL> 	quantity NUMBER,
12:39:06 SQL> 	product_id VARCHAR(1024),
12:39:06 SQL> 	transaction_id VARCHAR(1024),
12:39:06 SQL> 	purchase_date TIMESTAMP,
12:39:06 SQL> 	original_transaction_id VARCHAR(1024),
12:39:06 SQL> 	original_purchase_date TIMESTAMP,
12:39:06 SQL> 	app_item_id VARCHAR(1024),
12:39:06 SQL> 	version_external_id NUMBER,
12:39:06 SQL> 	bid VARCHAR(1024),
12:39:06 SQL> 	bvrs VARCHAR(255),
12:39:06 SQL> 	expires_date TIMESTAMP,
12:39:06 SQL> 	create_date DATE NOT NULL,
12:39:06 SQL> 	created_by VARCHAR(255) NOT NULL,
12:39:06 SQL> 	update_date DATE NOT NULL,
12:39:06 SQL> 	updated_by VARCHAR(255) NOT NULL,
12:39:06 SQL> 	last_check_date DATE NOT NULL,
12:39:06 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
12:39:06 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
12:39:06 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
12:39:06 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
12:39:06 SQL> )
12:39:06 SQL> TABLESPACE CORE;
12:39:06 SQL> */
12:39:06 SQL> 
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE CREATE_RECEIPT(
12:39:06   4  /*
12:39:06   5  Throws exceptions:
12:39:06   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06   7  */
12:39:06   8  	  out_id	      OUT NUMBER,
12:39:06   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
12:39:06  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
12:39:06  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
12:39:06  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
12:39:06  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:06  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
12:39:06  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
12:39:06  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:06  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
12:39:06  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
12:39:06  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
12:39:06  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
12:39:06  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
12:39:06  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
12:39:06  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
12:39:06  24  );
12:39:06  25  
12:39:06  26  PROCEDURE UPDATE_RECEIPT(
12:39:06  27  /*
12:39:06  28  Throws exceptions:
12:39:06  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  30  */
12:39:06  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
12:39:06  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
12:39:06  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
12:39:06  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
12:39:06  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:06  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
12:39:06  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
12:39:06  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:06  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
12:39:06  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
12:39:06  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
12:39:06  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
12:39:06  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
12:39:06  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
12:39:06  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
12:39:06  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
12:39:06  47  );
12:39:06  48  
12:39:06  49  PROCEDURE LINK_ITUNES_RECEIPT(
12:39:06  50  /*
12:39:06  51  Throws exceptions:
12:39:06  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  53  */
12:39:06  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
12:39:06  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
12:39:06  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
12:39:06  57  );
12:39:06  58  
12:39:06  59  PROCEDURE MARK_RECEIPT_CHECKED(
12:39:06  60  /*
12:39:06  61  Throws exceptions:
12:39:06  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  63  */
12:39:06  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
12:39:06  65  );
12:39:06  66  
12:39:06  67  END PROCS_ITUNES_RECEIPT_CRU_V16;
12:39:06  68  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.04
12:39:06 SQL> 
12:39:06 SQL> /*
12:39:06 SQL> CREATE TABLE ITUNES_RECEIPT (
12:39:06 SQL> 	id NUMBER NOT NULL ENABLE,
12:39:06 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
12:39:06 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
12:39:06 SQL> 	status NUMBER,
12:39:06 SQL> 	quantity NUMBER,
12:39:06 SQL> 	product_id VARCHAR(1024),
12:39:06 SQL> 	transaction_id VARCHAR(1024),
12:39:06 SQL> 	purchase_date TIMESTAMP,
12:39:06 SQL> 	original_transaction_id VARCHAR(1024),
12:39:06 SQL> 	original_purchase_date TIMESTAMP,
12:39:06 SQL> 	app_item_id VARCHAR(1024),
12:39:06 SQL> 	version_external_id NUMBER,
12:39:06 SQL> 	bid VARCHAR(1024),
12:39:06 SQL> 	bvrs VARCHAR(255),
12:39:06 SQL> 	expires_date TIMESTAMP,
12:39:06 SQL> 	create_date DATE NOT NULL,
12:39:06 SQL> 	created_by VARCHAR(255) NOT NULL,
12:39:06 SQL> 	update_date DATE NOT NULL,
12:39:06 SQL> 	updated_by VARCHAR(255) NOT NULL,
12:39:06 SQL> 	last_check_date DATE NOT NULL,
12:39:06 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
12:39:06 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
12:39:06 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
12:39:06 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
12:39:06 SQL> )
12:39:06 SQL> TABLESPACE CORE;
12:39:06 SQL> */
12:39:06 SQL> 
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
12:39:06   4  	      /*
12:39:06   5  	      Throws exceptions:
12:39:06   6  	      APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06   7  	      */
12:39:06   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:06   9  	      out_result_set	  OUT SYS_REFCURSOR
12:39:06  10  );
12:39:06  11  
12:39:06  12  PROCEDURE CREATE_RECEIPT(
12:39:06  13  /*
12:39:06  14  Throws exceptions:
12:39:06  15  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  16  */
12:39:06  17  	  out_id	      OUT NUMBER,
12:39:06  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
12:39:06  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
12:39:06  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
12:39:06  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
12:39:06  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:06  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
12:39:06  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
12:39:06  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:06  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
12:39:06  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
12:39:06  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
12:39:06  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
12:39:06  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
12:39:06  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
12:39:06  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
12:39:06  33  );
12:39:06  34  
12:39:06  35  PROCEDURE UPDATE_RECEIPT(
12:39:06  36  /*
12:39:06  37  Throws exceptions:
12:39:06  38  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  39  */
12:39:06  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
12:39:06  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
12:39:06  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
12:39:06  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
12:39:06  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:06  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
12:39:06  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
12:39:06  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:06  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
12:39:06  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
12:39:06  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
12:39:06  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
12:39:06  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
12:39:06  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
12:39:06  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
12:39:06  55  	  in_is_expired       IN NUMBER
12:39:06  56  );
12:39:06  57  
12:39:06  58  PROCEDURE LINK_ITUNES_RECEIPT(
12:39:06  59  /*
12:39:06  60  Throws exceptions:
12:39:06  61  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  62  */
12:39:06  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
12:39:06  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
12:39:06  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
12:39:06  66  );
12:39:06  67  
12:39:06  68  PROCEDURE MARK_RECEIPT_CHECKED(
12:39:06  69  /*
12:39:06  70  Throws exceptions:
12:39:06  71  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  72  */
12:39:06  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
12:39:06  74  );
12:39:06  75  
12:39:06  76  PROCEDURE GET_ITUNES_RECEIPTS (
12:39:06  77  /*
12:39:06  78  Throws exceptions:
12:39:06  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  80  */
12:39:06  81  	out_result_set	    OUT SYS_REFCURSOR,
12:39:06  82  	in_row_number	    IN NUMBER DEFAULT 500
12:39:06  83  );
12:39:06  84  
12:39:06  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
12:39:06  86  /*
12:39:06  87  Throws exceptions:
12:39:06  88  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  89  */
12:39:06  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
12:39:06  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
12:39:06  92  );
12:39:06  93  
12:39:06  94  END PROCS_ITUNES_RECEIPT_V16;
12:39:06  95  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_LICENSE_CRU
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE CREATE_LICENSE(
12:39:06   4  	out_license_id		    OUT LICENSE.ID%TYPE,
12:39:06   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
12:39:06   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
12:39:06   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
12:39:06   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
12:39:06   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
12:39:06  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
12:39:06  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
12:39:06  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
12:39:06  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
12:39:06  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
12:39:06  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
12:39:06  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
12:39:06  17  );
12:39:06  18  
12:39:06  19  PROCEDURE UPDATE_LICENSE (
12:39:06  20  	in_license_id		    IN LICENSE.ID%TYPE,
12:39:06  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
12:39:06  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
12:39:06  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
12:39:06  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
12:39:06  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
12:39:06  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
12:39:06  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
12:39:06  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
12:39:06  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
12:39:06  30  );
12:39:06  31  
12:39:06  32  END PROCS_LICENSE_CRU_V16;
12:39:06  33  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_LICENSE
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE CREATE_LICENSE(
12:39:06   4  /*
12:39:06   5  Throws exceptions:
12:39:06   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06   8  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:06   9  */
12:39:06  10  	in_status_id		    IN NUMBER,
12:39:06  11  	in_needs_entitlements	    IN NUMBER,
12:39:06  12  	in_start_date		    IN DATE,
12:39:06  13  	in_end_date		    IN DATE,
12:39:06  14  	in_offer_id		    IN NUMBER,
12:39:06  15  	in_subscription_id	    IN NUMBER,
12:39:06  16  	in_invoice_id		    IN NUMBER,
12:39:06  17  	in_created_by		    IN VARCHAR2,
12:39:06  18  	in_is_extension 	    IN NUMBER,
12:39:06  19  	in_current_offer_index	    IN NUMBER,
12:39:06  20  	in_current_offer_recurr_num IN NUMBER,
12:39:06  21  	out_license_id		    OUT NUMBER
12:39:06  22  );
12:39:06  23  
12:39:06  24  /*********************************************/
12:39:06  25  
12:39:06  26  PROCEDURE UPDATE_LICENSE_STATUS(
12:39:06  27  /*
12:39:06  28  Throws exceptions:
12:39:06  29  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  31  */
12:39:06  32  	  in_license_id     IN NUMBER,
12:39:06  33  	  in_license_status IN NUMBER,
12:39:06  34  	  in_updated_by     IN VARCHAR2,
12:39:06  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:06  36  );
12:39:06  37  
12:39:06  38  /*********************************************/
12:39:06  39  
12:39:06  40  PROCEDURE GET_ENDING_LICENSES (
12:39:06  41  	in_hours_number IN NUMBER,
12:39:06  42  	out_result_set OUT SYS_REFCURSOR
12:39:06  43  );
12:39:06  44  
12:39:06  45  /*********************************************/
12:39:06  46  
12:39:06  47  PROCEDURE GET_ENDING_LICENSES_CC (
12:39:06  48  	in_hours_number IN NUMBER,
12:39:06  49  	out_result_set OUT SYS_REFCURSOR,
12:39:06  50  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:06  51  );
12:39:06  52  
12:39:06  53  /**********************************************/
12:39:06  54  
12:39:06  55  PROCEDURE GET_RECURRING_OFFER (
12:39:06  56  	in_license_id  IN NUMBER,
12:39:06  57  	out_result_set OUT SYS_REFCURSOR
12:39:06  58  );
12:39:06  59  
12:39:06  60  /**********************************************/
12:39:06  61  
12:39:06  62  PROCEDURE GET_NEXT_OFFER (
12:39:06  63  	in_license_id  IN NUMBER,
12:39:06  64  	out_result_set OUT SYS_REFCURSOR
12:39:06  65  );
12:39:06  66  
12:39:06  67  /**********************************************/
12:39:06  68  
12:39:06  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
12:39:06  70  	in_license_id IN NUMBER,
12:39:06  71  	out_group_id  OUT NUMBER
12:39:06  72  );
12:39:06  73  
12:39:06  74  /**************************************************/
12:39:06  75  
12:39:06  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
12:39:06  77  	out_result_set OUT SYS_REFCURSOR
12:39:06  78  );
12:39:06  79  
12:39:06  80  /**************************************************/
12:39:06  81  
12:39:06  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
12:39:06  83  	in_license_id	      IN NUMBER,
12:39:06  84  	in_needs_entitlements IN NUMBER,
12:39:06  85  	in_updated_by	      IN VARCHAR2
12:39:06  86  );
12:39:06  87  
12:39:06  88  PROCEDURE GET_ENDED_GC_LICENSES (
12:39:06  89  	out_result_set		OUT SYS_REFCURSOR,
12:39:06  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
12:39:06  91  	in_num_rows		IN NUMBER DEFAULT 10000,
12:39:06  92  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:06  93  );
12:39:06  94  
12:39:06  95  PROCEDURE GET_LICENSE_BY_ID (
12:39:06  96  
12:39:06  97  	in_license_id  IN NUMBER,
12:39:06  98  
12:39:06  99  	out_result_set OUT SYS_REFCURSOR
12:39:06 100  
12:39:06 101  );
12:39:06 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
12:39:06 103  	in_subscription_id IN NUMBER,
12:39:06 104  	in_end_date IN DATE,
12:39:06 105  	in_updated_by IN VARCHAR2
12:39:06 106  );
12:39:06 107  END PROCS_LICENSE_V16;
12:39:06 108  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE CREATE_LINE_ITEM (
12:39:06   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
12:39:06   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
12:39:06   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
12:39:06   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
12:39:06   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
12:39:06   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
12:39:06  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
12:39:06  11  );
12:39:06  12  
12:39:06  13  PROCEDURE UPDATE_LINE_ITEM (
12:39:06  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
12:39:06  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
12:39:06  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
12:39:06  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
12:39:06  18  );
12:39:06  19  
12:39:06  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
12:39:06  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
12:39:06  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
12:39:06  23  );
12:39:06  24  
12:39:06  25  END PROCS_LINE_ITEMS_CRU_V16;
12:39:06  26  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_LINE_ITEMS
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V16" AS
12:39:06   2  
12:39:06   3  PROCEDURE ADD_LINE_ITEMS(
12:39:06   4  /*
12:39:06   5  Throws exceptions:
12:39:06   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06   8  */
12:39:06   9  	in_invoice_id IN NUMBER,
12:39:06  10  	in_offer_id   IN NUMBER,
12:39:06  11  	in_created_by IN VARCHAR2
12:39:06  12  );
12:39:06  13  
12:39:06  14  /****************************************************/
12:39:06  15  
12:39:06  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
12:39:06  17  	in_line_item_id    IN NUMBER,
12:39:06  18  	in_amount	   IN NUMBER,
12:39:06  19  	in_discount_amount IN NUMBER,
12:39:06  20  	in_taxes_amount    IN NUMBER
12:39:06  21  );
12:39:06  22  
12:39:06  23  /****************************************************/
12:39:06  24  
12:39:06  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
12:39:06  26  /*
12:39:06  27  Throws exceptions:
12:39:06  28  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  30  */
12:39:06  31  	in_invoice_id  IN NUMBER,
12:39:06  32  	out_result_set OUT SYS_REFCURSOR
12:39:06  33  );
12:39:06  34  
12:39:06  35  /****************************************************/
12:39:06  36  
12:39:06  37  PROCEDURE GET_LINE_ITEM_TAXES (
12:39:06  38  /*
12:39:06  39  Throws exceptions:
12:39:06  40  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  41  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  42  */
12:39:06  43  	in_line_item_id IN  NUMBER,
12:39:06  44  	out_result_set	OUT SYS_REFCURSOR
12:39:06  45  );
12:39:06  46  /****************************************************/
12:39:06  47  
12:39:06  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
12:39:06  49  /*
12:39:06  50  Throws exceptions:
12:39:06  51  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  53  */
12:39:06  54  	in_line_item_id IN  NUMBER,
12:39:06  55  	out_result_set	OUT SYS_REFCURSOR
12:39:06  56  );
12:39:06  57  
12:39:06  58  /****************************************************/
12:39:06  59  
12:39:06  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
12:39:06  61  /*
12:39:06  62  Throws exceptions:
12:39:06  63  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  64  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  65  */
12:39:06  66  	in_line_item_id     IN	NUMBER,
12:39:06  67  	out_amount	    OUT NUMBER
12:39:06  68  );
12:39:06  69  
12:39:06  70  /****************************************************/
12:39:06  71  
12:39:06  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
12:39:06  73  /*
12:39:06  74  Throws exceptions:
12:39:06  75  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:06  76  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:06  77  */
12:39:06  78  	in_line_item_id     IN	NUMBER
12:39:06  79  ) RETURN NUMBER;
12:39:06  80  
12:39:06  81  END PROCS_LINE_ITEMS_V16;
12:39:06  82  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:06 SQL> 
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> -- DDL for package PROCS_LOCKING
12:39:06 SQL> --------------------------------------------------------------------------------
12:39:06 SQL> 
12:39:06 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V16" AS
12:39:06   2  
12:39:06   3  /*
12:39:06   4  Removed by Sergey
12:39:06   5  10.12.2010
12:39:06   6  PROCEDURE INITIALIZE_SYSTEM;
12:39:06   7  
12:39:06   8  PROCEDURE INITIALIZE_ACCOUNT (
12:39:06   9  	in_account_id IN NUMBER
12:39:06  10  );
12:39:06  11  
12:39:06  12  PROCEDURE INITIALIZE_GROUP (
12:39:06  13  	in_group_id IN NUMBER
12:39:06  14  );
12:39:06  15  */
12:39:06  16  
12:39:06  17  PROCEDURE LOCK_ACCOUNT (
12:39:06  18  	in_group_id    IN NUMBER,
12:39:06  19  	in_lock_key    IN VARCHAR2,
12:39:06  20  	in_seconds_num IN NUMBER,
12:39:06  21  	in_created_by  IN VARCHAR2,
12:39:06  22  	in_reason      IN VARCHAR2
12:39:06  23  );
12:39:06  24  
12:39:06  25  PROCEDURE RELEASE_LOCK (
12:39:06  26  	in_group_id IN NUMBER,
12:39:06  27  	in_lock_key IN VARCHAR2
12:39:06  28  );
12:39:06  29  
12:39:06  30  END PROCS_LOCKING_V16;
12:39:06  31  .
12:39:06 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_OFFER_CHAIN
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
12:39:07   4  /*
12:39:07   5  Throws exceptions:
12:39:07   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07   8  */
12:39:07   9  	  in_offer_chain_id IN	 NUMBER,
12:39:07  10  	  out_result_set    OUT  SYS_REFCURSOR
12:39:07  11  );
12:39:07  12  
12:39:07  13  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
12:39:07  14  /*
12:39:07  15  Throws exceptions:
12:39:07  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:07  17  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:07  18  */
12:39:07  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
12:39:07  20  	out_result_set	   OUT SYS_REFCURSOR
12:39:07  21  );
12:39:07  22  
12:39:07  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
12:39:07  24  /*
12:39:07  25  Throws exceptions:
12:39:07  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:07  27  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:07  28  */
12:39:07  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
12:39:07  30  	out_result_set	   OUT SYS_REFCURSOR
12:39:07  31  );
12:39:07  32  
12:39:07  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
12:39:07  34  /*
12:39:07  35  Throws exceptions:
12:39:07  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:07  37  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:07  38  */
12:39:07  39  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
12:39:07  40  	out_result_set	   OUT SYS_REFCURSOR
12:39:07  41  );
12:39:07  42  
12:39:07  43  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
12:39:07  44  /*
12:39:07  45  Throws exceptions (codes):
12:39:07  46  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  47  */
12:39:07  48  	in_product_id  IN  NUMBER,
12:39:07  49  	out_result_set OUT SYS_REFCURSOR
12:39:07  50  );
12:39:07  51  
12:39:07  52  PROCEDURE GET_OFFER_CHAIN_PRICE (
12:39:07  53  /*
12:39:07  54  Throws exceptions (codes):
12:39:07  55  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  56  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  57  */
12:39:07  58  	in_offer_chain_id IN NUMBER,
12:39:07  59  	out_price	  OUT NUMBER
12:39:07  60  );
12:39:07  61  
12:39:07  62  PROCEDURE GET_FIRST_OFFER(
12:39:07  63  /*
12:39:07  64  Throws exceptions (codes):
12:39:07  65  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  67  */
12:39:07  68  	in_offer_chain_id IN  NUMBER,
12:39:07  69  	out_offer_id	  OUT NUMBER
12:39:07  70  );
12:39:07  71  
12:39:07  72  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
12:39:07  73  /*
12:39:07  74  Throws exceptions (codes):
12:39:07  75  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  76  */
12:39:07  77  	out_result_set OUT SYS_REFCURSOR
12:39:07  78  );
12:39:07  79  
12:39:07  80  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
12:39:07  81  /*
12:39:07  82  Throws exceptions (codes):
12:39:07  83  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  85  */
12:39:07  86  	in_offer_chain_id IN NUMBER,
12:39:07  87  	out_result_set	  OUT SYS_REFCURSOR
12:39:07  88  );
12:39:07  89  
12:39:07  90  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
12:39:07  91  /*
12:39:07  92  Throws exceptions (codes):
12:39:07  93  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  95  */
12:39:07  96  	in_offer_chain_id	  IN NUMBER,
12:39:07  97  	in_offer_chain_start_date IN DATE
12:39:07  98  ) RETURN DATE;
12:39:07  99  
12:39:07 100  FUNCTION CALCULATE_OFFER_AMOUNT (
12:39:07 101  	in_offer_id IN NUMBER
12:39:07 102  ) RETURN NUMBER;
12:39:07 103  
12:39:07 104  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
12:39:07 105  	in_offer_chain_id IN NUMBER
12:39:07 106  ) RETURN NUMBER;
12:39:07 107  
12:39:07 108  FUNCTION GET_FIRST_OFFER_INDEX (
12:39:07 109  	in_offer_chain_id IN NUMBER
12:39:07 110  ) RETURN NUMBER;
12:39:07 111  
12:39:07 112  FUNCTION GET_NEXT_OFFER_INDEX (
12:39:07 113  /*
12:39:07 114  NULL, if not exists
12:39:07 115  */
12:39:07 116  	in_offer_chain_id	     IN NUMBER,
12:39:07 117  	in_offer_chain_current_index IN NUMBER
12:39:07 118  ) RETURN NUMBER;
12:39:07 119  
12:39:07 120  PROCEDURE P_GET_NEXT_OFFER_INDEX (
12:39:07 121  	in_offer_chain_id	     IN NUMBER,
12:39:07 122  	in_offer_chain_current_index IN NUMBER,
12:39:07 123  	out_next_offer_index	     OUT NUMBER
12:39:07 124  );
12:39:07 125  
12:39:07 126  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
12:39:07 127  	in_license_id		     IN NUMBER,
12:39:07 128  	in_offer_chain_current_index IN NUMBER,
12:39:07 129  	out_next_offer_index	     OUT NUMBER
12:39:07 130  );
12:39:07 131  
12:39:07 132  FUNCTION IS_OFFER_INDEX_EXISTS (
12:39:07 133  /*
12:39:07 134  1 - exists
12:39:07 135  0 - not exists
12:39:07 136  */
12:39:07 137  	in_offer_chain_id	   IN NUMBER,
12:39:07 138  	in_offer_chain_offer_index IN NUMBER
12:39:07 139  ) RETURN NUMBER;
12:39:07 140  
12:39:07 141  PROCEDURE GET_OFFER_LENGTH (
12:39:07 142  	in_offer_id IN NUMBER,
12:39:07 143  	out_years   OUT NUMBER,
12:39:07 144  	out_months  OUT NUMBER,
12:39:07 145  	out_days    OUT NUMBER
12:39:07 146  );
12:39:07 147  
12:39:07 148  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
12:39:07 149  	in_offer_id   IN NUMBER,
12:39:07 150  	in_start_date IN DATE DEFAULT SYSDATE,
12:39:07 151  	out_days      OUT NUMBER
12:39:07 152  );
12:39:07 153  
12:39:07 154  PROCEDURE GET_OFFER_PRODUCTS (
12:39:07 155  /*
12:39:07 156  Throws exceptions (codes):
12:39:07 157  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 158  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 159  */
12:39:07 160  	in_offer_id    IN NUMBER,
12:39:07 161  	out_result_set OUT SYS_REFCURSOR
12:39:07 162  );
12:39:07 163  
12:39:07 164  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
12:39:07 165  /*
12:39:07 166  Throws exceptions (codes):
12:39:07 167  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 168  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 169  */
12:39:07 170  	in_offer_chain_id IN NUMBER,
12:39:07 171  	out_result_set	  OUT SYS_REFCURSOR
12:39:07 172  );
12:39:07 173  
12:39:07 174  FUNCTION CHECK_FOR_SAME_PRODUCTS (
12:39:07 175  /*
12:39:07 176  Throws exceptions (codes):
12:39:07 177  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 178  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 179  Returns:
12:39:07 180  GLOBAL_CONSTANTS_V16.TRUE if there are at least one same product
12:39:07 181  GLOBAL_CONSTANTS_V16.FALSE else
12:39:07 182  */
12:39:07 183  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
12:39:07 184  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
12:39:07 185  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:07 186  ) RETURN NUMBER;
12:39:07 187  
12:39:07 188  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
12:39:07 189  /*
12:39:07 190  Throws exceptions (codes):
12:39:07 191  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 192  Returns:
12:39:07 193  GLOBAL_CONSTANTS_V16.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
12:39:07 194  GLOBAL_CONSTANTS_V16.FALSE else
12:39:07 195  */
12:39:07 196  	in_offer_chain_id IN NUMBER
12:39:07 197  ) RETURN NUMBER;
12:39:07 198  
12:39:07 199  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
12:39:07 200  /*
12:39:07 201  Throws exceptions (codes):
12:39:07 202  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 203  */
12:39:07 204  	in_offer_chain_id IN NUMBER
12:39:07 205  ) RETURN NUMBER;
12:39:07 206  
12:39:07 207  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
12:39:07 208  /*
12:39:07 209  Throws exceptions (codes):
12:39:07 210  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 211  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 212  */
12:39:07 213  	in_offer_chain_id   IN NUMBER,
12:39:07 214  	in_eligibility_name IN VARCHAR2,
12:39:07 215  	out_result_set	    OUT SYS_REFCURSOR
12:39:07 216  );
12:39:07 217  
12:39:07 218  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
12:39:07 219  /*
12:39:07 220  Throws exceptions (codes):
12:39:07 221  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 222  */
12:39:07 223  	in_offer_chain_ids  IN VARCHAR2,
12:39:07 224  	in_eligibility_name IN VARCHAR2,
12:39:07 225  	out_result_set	    OUT SYS_REFCURSOR
12:39:07 226  );
12:39:07 227  
12:39:07 228  PROCEDURE GET_OFFER_CHAIN_META_DATA (
12:39:07 229  /*
12:39:07 230  Throws exceptions (codes):
12:39:07 231  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 232  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 233  */
12:39:07 234  	in_offer_chain_id IN NUMBER,
12:39:07 235  	in_meta_data_name IN VARCHAR2,
12:39:07 236  	out_result_set	  OUT SYS_REFCURSOR
12:39:07 237  );
12:39:07 238  
12:39:07 239  PROCEDURE GET_OFFER_CHAINS_META_DATA (
12:39:07 240  /*
12:39:07 241  Throws exceptions (codes):
12:39:07 242  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 243  */
12:39:07 244  	in_offer_chain_ids IN VARCHAR2,
12:39:07 245  	in_meta_data_name  IN VARCHAR2,
12:39:07 246  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 247  );
12:39:07 248  
12:39:07 249  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
12:39:07 250  /*
12:39:07 251  Throws exceptions (codes):
12:39:07 252  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 253  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 254  */
12:39:07 255  	in_offer_id    IN NUMBER,
12:39:07 256  	out_result_set OUT SYS_REFCURSOR
12:39:07 257  );
12:39:07 258  
12:39:07 259  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
12:39:07 260  /*
12:39:07 261  Throws exceptions (codes):
12:39:07 262  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 263  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 264  */
12:39:07 265  	in_product_offering_id IN NUMBER,
12:39:07 266  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
12:39:07 267  	out_result_set	       OUT SYS_REFCURSOR
12:39:07 268  );
12:39:07 269  
12:39:07 270  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
12:39:07 271  /*
12:39:07 272  Throws exceptions (codes):
12:39:07 273  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 274  */
12:39:07 275  	in_offer_chain_1 IN NUMBER,
12:39:07 276  	in_offer_chain_2 IN NUMBER,
12:39:07 277  	out_result_set	OUT SYS_REFCURSOR
12:39:07 278  );
12:39:07 279  
12:39:07 280  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
12:39:07 281  	in_offer_chain_id IN NUMBER,
12:39:07 282  	in_meta_data_name IN VARCHAR2,
12:39:07 283  	out_value	  OUT VARCHAR2
12:39:07 284  );
12:39:07 285  
12:39:07 286  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
12:39:07 287  	in_offer_chain_id   IN NUMBER,
12:39:07 288  	in_eligibility_name IN VARCHAR2,
12:39:07 289  	out_value	    OUT VARCHAR2
12:39:07 290  );
12:39:07 291  
12:39:07 292  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
12:39:07 293  	in_offer_id    IN NUMBER,
12:39:07 294  	out_result_set OUT SYS_REFCURSOR
12:39:07 295  );
12:39:07 296  
12:39:07 297  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
12:39:07 298  	in_meta_data_name  IN VARCHAR2,
12:39:07 299  	in_meta_data_value IN VARCHAR2,
12:39:07 300  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 301  );
12:39:07 302  
12:39:07 303  PROCEDURE GET_ALL_META_DATA (
12:39:07 304  	in_offer_chain_id IN NUMBER,
12:39:07 305  	out_result_set	  OUT SYS_REFCURSOR
12:39:07 306  );
12:39:07 307  
12:39:07 308  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
12:39:07 309  	in_group_id	  IN NUMBER,
12:39:07 310  	in_offer_chain_id IN NUMBER,
12:39:07 311  	out_is_eligible   OUT NUMBER,
12:39:07 312  	out_concurrent_subscription_id OUT NUMBER
12:39:07 313  );
12:39:07 314  
12:39:07 315  PROCEDURE GET_NOTIFICATION_TYPE_ID (
12:39:07 316  	in_offer_chain_id	 IN NUMBER,
12:39:07 317  	in_action_name		 IN VARCHAR2,
12:39:07 318  	out_notification_type_id OUT NUMBER
12:39:07 319  );
12:39:07 320  
12:39:07 321  END PROCS_OFFER_CHAIN_V16;
12:39:07 322  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.04
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
12:39:07   2  AS
12:39:07   3  
12:39:07   4  ----
12:39:07   5  --------------------------------------------------------------------------------
12:39:07   6  ----
12:39:07   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
12:39:07   8  	      returned from the previous call and store the result for the
12:39:07   9  	      next call.
12:39:07  10  	     This method will identify and create new Sync Events from trigger activity data */
12:39:07  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
12:39:07  12  ----
12:39:07  13  --------------------------------------------------------------------------------
12:39:07  14  ----
12:39:07  15  	  /* Internal logic call may need to be used to fix poller data */
12:39:07  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
12:39:07  17  ----
12:39:07  18  --------------------------------------------------------------------------------
12:39:07  19  ----
12:39:07  20  	  /* User request for sync events. Params should be hard-coded in the application
12:39:07  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
12:39:07  22  	      skipped. Last read time is logged.
12:39:07  23  	     Params:
12:39:07  24  		  set_maximum: Size of each transfer set
12:39:07  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
12:39:07  26  	     Returns:
12:39:07  27  		  set_id: Transfer set id, duplicated for all entries
12:39:07  28  		  group_id: regi_id value
12:39:07  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
12:39:07  30  	  */
12:39:07  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
12:39:07  32  ----
12:39:07  33  --------------------------------------------------------------------------------
12:39:07  34  ----
12:39:07  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
12:39:07  36  	      single confirmation per transfer set.
12:39:07  37  	  */
12:39:07  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
12:39:07  39  ----
12:39:07  40  --------------------------------------------------------------------------------
12:39:07  41  ----
12:39:07  42  	  procedure SET_LAST_RUN(ts in timestamp);
12:39:07  43  	  procedure GET_LAST_RUN(ts out timestamp);
12:39:07  44  END PROCS_POLLING_SYNC;
12:39:07  45  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.06
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_PRODUCT
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE GET_PRODUCTS (
12:39:07   4  /*
12:39:07   5  Throws exceptions:
12:39:07   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07   7  */
12:39:07   8  	in_status_id   IN  NUMBER,
12:39:07   9  	out_result_set OUT SYS_REFCURSOR
12:39:07  10  );
12:39:07  11  
12:39:07  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
12:39:07  13  /*
12:39:07  14  Throws exceptions:
12:39:07  15  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  17  */
12:39:07  18  	in_product_offering_id	IN NUMBER,
12:39:07  19  	out_result_set OUT SYS_REFCURSOR
12:39:07  20  );
12:39:07  21  
12:39:07  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
12:39:07  23  /*
12:39:07  24  Throws exceptions:
12:39:07  25  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  27  */
12:39:07  28  	in_product_id	    IN NUMBER,
12:39:07  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
12:39:07  30  	out_result_set	    OUT SYS_REFCURSOR
12:39:07  31  );
12:39:07  32  
12:39:07  33  PROCEDURE GET_PRODUCT_BY_ID (
12:39:07  34  	in_product_id  IN NUMBER,
12:39:07  35  	out_result_set OUT SYS_REFCURSOR
12:39:07  36  );
12:39:07  37  
12:39:07  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
12:39:07  39  	in_line_item_id IN NUMBER,
12:39:07  40  	out_result_set	OUT SYS_REFCURSOR
12:39:07  41  );
12:39:07  42  
12:39:07  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
12:39:07  44  	in_product_offering_id IN NUMBER,
12:39:07  45  	out_result_set	OUT SYS_REFCURSOR
12:39:07  46  );
12:39:07  47  
12:39:07  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
12:39:07  49  	in_product_offering_id IN NUMBER,
12:39:07  50  	out_result_set	       OUT SYS_REFCURSOR
12:39:07  51  );
12:39:07  52  
12:39:07  53  END PROCS_PRODUCT_V16;
12:39:07  54  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
12:39:07   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
12:39:07   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
12:39:07   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:07   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
12:39:07   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
12:39:07   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
12:39:07  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
12:39:07  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
12:39:07  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
12:39:07  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
12:39:07  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
12:39:07  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
12:39:07  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
12:39:07  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
12:39:07  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
12:39:07  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
12:39:07  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
12:39:07  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
12:39:07  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
12:39:07  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
12:39:07  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
12:39:07  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
12:39:07  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
12:39:07  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
12:39:07  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
12:39:07  29  );
12:39:07  30  
12:39:07  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
12:39:07  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
12:39:07  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
12:39:07  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
12:39:07  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
12:39:07  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
12:39:07  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
12:39:07  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
12:39:07  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
12:39:07  40  );
12:39:07  41  
12:39:07  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
12:39:07  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
12:39:07  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
12:39:07  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:07  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
12:39:07  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
12:39:07  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
12:39:07  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
12:39:07  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
12:39:07  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
12:39:07  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
12:39:07  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
12:39:07  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
12:39:07  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
12:39:07  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
12:39:07  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
12:39:07  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
12:39:07  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
12:39:07  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
12:39:07  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
12:39:07  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
12:39:07  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
12:39:07  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
12:39:07  65  );
12:39:07  66  
12:39:07  67  PROCEDURE CREATE_CPT_EXCEPTION (
12:39:07  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
12:39:07  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
12:39:07  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:07  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
12:39:07  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
12:39:07  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
12:39:07  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
12:39:07  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
12:39:07  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
12:39:07  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
12:39:07  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
12:39:07  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
12:39:07  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
12:39:07  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
12:39:07  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
12:39:07  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
12:39:07  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
12:39:07  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
12:39:07  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
12:39:07  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
12:39:07  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
12:39:07  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
12:39:07  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
12:39:07  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
12:39:07  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
12:39:07  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
12:39:07  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
12:39:07  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
12:39:07  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
12:39:07  97  );
12:39:07  98  
12:39:07  99  PROCEDURE CREATE_CPT_DEPOSIT (
12:39:07 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
12:39:07 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
12:39:07 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:07 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
12:39:07 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
12:39:07 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
12:39:07 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
12:39:07 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
12:39:07 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
12:39:07 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
12:39:07 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
12:39:07 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
12:39:07 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
12:39:07 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
12:39:07 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
12:39:07 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
12:39:07 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
12:39:07 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
12:39:07 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
12:39:07 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
12:39:07 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
12:39:07 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
12:39:07 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
12:39:07 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
12:39:07 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
12:39:07 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
12:39:07 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
12:39:07 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
12:39:07 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
12:39:07 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
12:39:07 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
12:39:07 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
12:39:07 132  );
12:39:07 133  
12:39:07 134  PROCEDURE CREATE_PP_SETTLEMENT (
12:39:07 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
12:39:07 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
12:39:07 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:07 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
12:39:07 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
12:39:07 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
12:39:07 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
12:39:07 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
12:39:07 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
12:39:07 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
12:39:07 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
12:39:07 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
12:39:07 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
12:39:07 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
12:39:07 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
12:39:07 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
12:39:07 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
12:39:07 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
12:39:07 153  );
12:39:07 154  
12:39:07 155  PROCEDURE CREATE_PP_DISPUTE (
12:39:07 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
12:39:07 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
12:39:07 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:07 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
12:39:07 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
12:39:07 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
12:39:07 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
12:39:07 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
12:39:07 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
12:39:07 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
12:39:07 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
12:39:07 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
12:39:07 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
12:39:07 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
12:39:07 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
12:39:07 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
12:39:07 172  );
12:39:07 173  
12:39:07 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
12:39:07 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
12:39:07 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
12:39:07 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:07 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
12:39:07 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
12:39:07 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
12:39:07 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
12:39:07 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
12:39:07 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
12:39:07 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
12:39:07 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
12:39:07 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
12:39:07 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
12:39:07 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
12:39:07 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
12:39:07 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
12:39:07 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
12:39:07 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
12:39:07 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
12:39:07 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
12:39:07 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
12:39:07 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
12:39:07 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
12:39:07 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
12:39:07 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
12:39:07 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
12:39:07 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
12:39:07 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
12:39:07 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
12:39:07 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
12:39:07 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
12:39:07 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
12:39:07 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
12:39:07 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
12:39:07 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
12:39:07 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
12:39:07 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
12:39:07 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
12:39:07 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
12:39:07 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
12:39:07 215  );
12:39:07 216  
12:39:07 217  PROCEDURE GET_EXT_SOURCE_LOG (
12:39:07 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
12:39:07 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
12:39:07 220  	out_result_set		 OUT SYS_REFCURSOR
12:39:07 221  );
12:39:07 222  
12:39:07 223  END PROCS_RECONCILIATION_CRU_V16;
12:39:07 224  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.08
12:39:07 SQL> 
12:39:07 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
12:39:07 SQL> 
12:39:07 SQL> whenever sqlerror exit failure
12:39:07 SQL> 
12:39:07 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
12:39:07   2  
12:39:07   3  ----
12:39:07   4  --------------------------------------------------------------------------------
12:39:07   5  ----
12:39:07   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
12:39:07   7  	      return line_item.amount%type;
12:39:07   8  ----
12:39:07   9  --------------------------------------------------------------------------------
12:39:07  10  ----
12:39:07  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
12:39:07  12  	      return line_item.amount%type;
12:39:07  13  ----
12:39:07  14  --------------------------------------------------------------------------------
12:39:07  15  ----
12:39:07  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
12:39:07  17  	      in_lower_date_bound DATE,
12:39:07  18  	      in_upper_date_bound DATE,
12:39:07  19  	      out_lic_cur OUT sys_refcursor
12:39:07  20  	  );
12:39:07  21  ----
12:39:07  22  --------------------------------------------------------------------------------
12:39:07  23  ----
12:39:07  24  END PROCS_REPORTING_1A;
12:39:07  25  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.07
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
12:39:07   2  
12:39:07   3  ----
12:39:07   4  --------------------------------------------------------------------------------
12:39:07   5  ----
12:39:07   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07   7  ----
12:39:07   8  --------------------------------------------------------------------------------
12:39:07   9  ----
12:39:07  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  11  ----
12:39:07  12  --------------------------------------------------------------------------------
12:39:07  13  ----
12:39:07  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  15  ----
12:39:07  16  --------------------------------------------------------------------------------
12:39:07  17  ----
12:39:07  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  19  ----
12:39:07  20  --------------------------------------------------------------------------------
12:39:07  21  ----
12:39:07  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  23  ----
12:39:07  24  --------------------------------------------------------------------------------
12:39:07  25  ----
12:39:07  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  27  ----
12:39:07  28  --------------------------------------------------------------------------------
12:39:07  29  ----
12:39:07  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  31  ----
12:39:07  32  --------------------------------------------------------------------------------
12:39:07  33  ----
12:39:07  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  35  ----
12:39:07  36  --------------------------------------------------------------------------------
12:39:07  37  ----
12:39:07  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  39  ----
12:39:07  40  --------------------------------------------------------------------------------
12:39:07  41  ----
12:39:07  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  43  ----
12:39:07  44  --------------------------------------------------------------------------------
12:39:07  45  ----
12:39:07  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  47  ----
12:39:07  48  --------------------------------------------------------------------------------
12:39:07  49  ----
12:39:07  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  51  ----
12:39:07  52  --------------------------------------------------------------------------------
12:39:07  53  ----
12:39:07  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  55  ----
12:39:07  56  --------------------------------------------------------------------------------
12:39:07  57  ----
12:39:07  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  59  ----
12:39:07  60  --------------------------------------------------------------------------------
12:39:07  61  ----
12:39:07  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  63  ----
12:39:07  64  --------------------------------------------------------------------------------
12:39:07  65  ----
12:39:07  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  67  ----
12:39:07  68  --------------------------------------------------------------------------------
12:39:07  69  ----
12:39:07  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  71  ----
12:39:07  72  --------------------------------------------------------------------------------
12:39:07  73  ----
12:39:07  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  75  ----
12:39:07  76  --------------------------------------------------------------------------------
12:39:07  77  ----
12:39:07  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  79  ----
12:39:07  80  --------------------------------------------------------------------------------
12:39:07  81  ----
12:39:07  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  83  ----
12:39:07  84  --------------------------------------------------------------------------------
12:39:07  85  ----
12:39:07  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  87  ----
12:39:07  88  --------------------------------------------------------------------------------
12:39:07  89  ----
12:39:07  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  91  ----
12:39:07  92  --------------------------------------------------------------------------------
12:39:07  93  ----
12:39:07  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  95  ----
12:39:07  96  --------------------------------------------------------------------------------
12:39:07  97  ----
12:39:07  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07  99  ----
12:39:07 100  --------------------------------------------------------------------------------
12:39:07 101  ----
12:39:07 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 103  ----
12:39:07 104  --------------------------------------------------------------------------------
12:39:07 105  ----
12:39:07 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 107  ----
12:39:07 108  --------------------------------------------------------------------------------
12:39:07 109  ----
12:39:07 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 111  ----
12:39:07 112  --------------------------------------------------------------------------------
12:39:07 113  ----
12:39:07 114  /**/
12:39:07 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 116  ----
12:39:07 117  --------------------------------------------------------------------------------
12:39:07 118  ----
12:39:07 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 120  ----
12:39:07 121  --------------------------------------------------------------------------------
12:39:07 122  ----
12:39:07 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 124  ----
12:39:07 125  --------------------------------------------------------------------------------
12:39:07 126  ----
12:39:07 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 128  ----
12:39:07 129  --------------------------------------------------------------------------------
12:39:07 130  ----
12:39:07 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 132  ----
12:39:07 133  --------------------------------------------------------------------------------
12:39:07 134  ----
12:39:07 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 136  ----
12:39:07 137  --------------------------------------------------------------------------------
12:39:07 138  ----
12:39:07 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 140  ----
12:39:07 141  --------------------------------------------------------------------------------
12:39:07 142  ----
12:39:07 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 144  ----
12:39:07 145  --------------------------------------------------------------------------------
12:39:07 146  ----
12:39:07 147  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 148  ----
12:39:07 149  --------------------------------------------------------------------------------
12:39:07 150  ----
12:39:07 151  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
12:39:07 152  ----
12:39:07 153  --------------------------------------------------------------------------------
12:39:07 154  ----
12:39:07 155  /**/
12:39:07 156  END PROCS_REPORTING;
12:39:07 157  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.43
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_REPORTS
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V5" AS
12:39:07   2  
12:39:07   3  FUNCTION GET_PRODUCT_NAMES(
12:39:07   4  	in_offer_id IN NUMBER
12:39:07   5  ) RETURN VARCHAR2;
12:39:07   6  
12:39:07   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
12:39:07   8  	in_start_date  IN DATE,
12:39:07   9  	in_end_date    IN DATE,
12:39:07  10  	out_result_set OUT SYS_REFCURSOR
12:39:07  11  );
12:39:07  12  
12:39:07  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
12:39:07  14  	in_offer_id	       IN NUMBER,
12:39:07  15  	in_start_date	       IN DATE,
12:39:07  16  	in_end_date	       IN DATE,
12:39:07  17  	out_new_purchasers_num OUT NUMBER,
12:39:07  18  	out_renewals_num       OUT NUMBER,
12:39:07  19  	out_product_names      OUT VARCHAR2,
12:39:07  20  	out_total_dollar_value OUT NUMBER,
12:39:07  21  	out_unique_purchasers  OUT NUMBER
12:39:07  22  );
12:39:07  23  
12:39:07  24  /*
12:39:07  25  FUNCTIONS FOR THE FLASH REPORT
12:39:07  26  */
12:39:07  27  
12:39:07  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
12:39:07  29  	in_offer_id	       IN NUMBER,
12:39:07  30  	in_start_date	       IN DATE,
12:39:07  31  	in_end_date	       IN DATE
12:39:07  32  ) RETURN NUMBER;
12:39:07  33  
12:39:07  34  FUNCTION FLR_RENEWALS_NUM (
12:39:07  35  	in_offer_id	       IN NUMBER,
12:39:07  36  	in_start_date	       IN DATE,
12:39:07  37  	in_end_date	       IN DATE
12:39:07  38  ) RETURN NUMBER;
12:39:07  39  
12:39:07  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
12:39:07  41  	in_offer_id	       IN NUMBER,
12:39:07  42  	in_start_date	       IN DATE,
12:39:07  43  	in_end_date	       IN DATE
12:39:07  44  ) RETURN NUMBER;
12:39:07  45  
12:39:07  46  FUNCTION FLR_UNIQUE_PURCHASERS (
12:39:07  47  	in_offer_id	       IN NUMBER,
12:39:07  48  	in_start_date	       IN DATE,
12:39:07  49  	in_end_date	       IN DATE
12:39:07  50  ) RETURN NUMBER;
12:39:07  51  
12:39:07  52  END PROCS_REPORTS_V5;
12:39:07  53  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE CREATE_SUBSCRIPTION(
12:39:07   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
12:39:07   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
12:39:07   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
12:39:07   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
12:39:07   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
12:39:07   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
12:39:07  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
12:39:07  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
12:39:07  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
12:39:07  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
12:39:07  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
12:39:07  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
12:39:07  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
12:39:07  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
12:39:07  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
12:39:07  19  );
12:39:07  20  
12:39:07  21  PROCEDURE UPDATE_SUBSCRIPTION(
12:39:07  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
12:39:07  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
12:39:07  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
12:39:07  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
12:39:07  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
12:39:07  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
12:39:07  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
12:39:07  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
12:39:07  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
12:39:07  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
12:39:07  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
12:39:07  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
12:39:07  34  );
12:39:07  35  
12:39:07  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
12:39:07  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
12:39:07  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
12:39:07  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
12:39:07  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
12:39:07  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
12:39:07  42  );
12:39:07  43  
12:39:07  44  END PROCS_SUBSCRIPTION_CRU_V16;
12:39:07  45  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_SUBSCRIPTION
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE START_SUBSCRIPTION_CREATION (
12:39:07   4  	in_group_id	      IN NUMBER,
12:39:07   5  	in_created_by	      IN VARCHAR2,
12:39:07   6  	in_offer_chain_id     IN NUMBER,
12:39:07   7  	in_instrument_type_id IN NUMBER,
12:39:07   8  	in_instrument_id      IN NUMBER,
12:39:07   9  	in_agent_id	      IN NUMBER,
12:39:07  10  	in_note 	      IN VARCHAR2,
12:39:07  11  	out_subscription_id   OUT NUMBER,
12:39:07  12  	out_invoice_id	      OUT NUMBER,
12:39:07  13  	out_new_license_id    OUT NUMBER,
12:39:07  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
12:39:07  15  );
12:39:07  16  
12:39:07  17  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
12:39:07  18  	in_subscription_id    IN NUMBER,
12:39:07  19  	in_invoice_id	      IN NUMBER,
12:39:07  20  	in_instrument_type_id IN NUMBER,
12:39:07  21  	in_instrument_id      IN NUMBER,
12:39:07  22  	in_created_by	      IN VARCHAR2
12:39:07  23  );
12:39:07  24  
12:39:07  25  PROCEDURE SUSPEND_SUBSCRIPTION(
12:39:07  26  /*
12:39:07  27  Throws exceptions:
12:39:07  28  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  29  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:07  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  31  */
12:39:07  32  	  in_subs_id	IN NUMBER ,
12:39:07  33  	  in_updated_by IN VARCHAR2
12:39:07  34  );
12:39:07  35  
12:39:07  36  PROCEDURE REACTIVATE_SUBSCRIPTION (
12:39:07  37  	in_subscription_id IN  NUMBER,
12:39:07  38  	in_updated_by	   IN  VARCHAR2
12:39:07  39  );
12:39:07  40  
12:39:07  41  PROCEDURE GET_SUBSCRIPTION_INFO (
12:39:07  42  /*
12:39:07  43  Throws exceptions:
12:39:07  44  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  45  */
12:39:07  46  	  in_subscription_id IN  NUMBER,
12:39:07  47  	  out_result_set      OUT SYS_REFCURSOR
12:39:07  48  );
12:39:07  49  
12:39:07  50  PROCEDURE GET_SUBSCRIPTION_INVOICES (
12:39:07  51  /*
12:39:07  52  Throws exceptions:
12:39:07  53  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:07  54  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  55  */
12:39:07  56  	in_subscription_id  IN	NUMBER,
12:39:07  57  	out_result_set	    OUT SYS_REFCURSOR
12:39:07  58  );
12:39:07  59  
12:39:07  60  PROCEDURE GET_SUBSCRIPTION_NOTES (
12:39:07  61  /*
12:39:07  62  Throws exceptions:
12:39:07  63  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  64  */
12:39:07  65  	in_subscription_id  IN	NUMBER,
12:39:07  66  	out_result_set	    OUT SYS_REFCURSOR
12:39:07  67  );
12:39:07  68  
12:39:07  69  PROCEDURE ANNOTATE_SUBSCRIPTION (
12:39:07  70  /*
12:39:07  71  Throws exceptions:
12:39:07  72  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:07  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  74  */
12:39:07  75  	in_subscription_id IN  NUMBER,
12:39:07  76  	in_agent_id	   IN  NUMBER,
12:39:07  77  	in_note 	   IN  VARCHAR2,
12:39:07  78  	in_created_by	   IN  VARCHAR2
12:39:07  79  );
12:39:07  80  
12:39:07  81  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
12:39:07  82  /*
12:39:07  83  Throws exceptions:
12:39:07  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  85  */
12:39:07  86  	out_result_set OUT SYS_REFCURSOR
12:39:07  87  );
12:39:07  88  
12:39:07  89  FUNCTION GET_RENEWAL_DATE (
12:39:07  90  /*
12:39:07  91  Throws exceptions:
12:39:07  92  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  93  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  94  */
12:39:07  95  	in_subscription_id in NUMBER
12:39:07  96  ) RETURN DATE;
12:39:07  97  
12:39:07  98  FUNCTION GET_RECENT_CHARGE (
12:39:07  99  /*
12:39:07 100  Throws exceptions:
12:39:07 101  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 102  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 103  */
12:39:07 104  	in_subscription_id IN NUMBER
12:39:07 105  ) RETURN NUMBER;
12:39:07 106  
12:39:07 107  FUNCTION GET_BILLING_CYCLE (
12:39:07 108  /*
12:39:07 109  Throws exceptions:
12:39:07 110  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 111  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 112  */
12:39:07 113  	in_subscription_id IN NUMBER
12:39:07 114  ) RETURN VARCHAR2;
12:39:07 115  
12:39:07 116  PROCEDURE REFUND_SUBSCRIPTION (
12:39:07 117  /*
12:39:07 118  Throws exceptions:
12:39:07 119  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 120  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 121  */
12:39:07 122  	in_subscription_id IN NUMBER,
12:39:07 123  	in_invoice_id	   IN NUMBER,
12:39:07 124  	in_refund_amount   IN NUMBER,
12:39:07 125  	in_note 	   IN VARCHAR2,
12:39:07 126  	in_created_by	   IN VARCHAR2,
12:39:07 127  	out_charge_id	   OUT NUMBER
12:39:07 128  );
12:39:07 129  
12:39:07 130  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
12:39:07 131  /*
12:39:07 132  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 133  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:07 134  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 135  */
12:39:07 136  	in_subscription_id	IN NUMBER,
12:39:07 137  	in_effective_start_date IN DATE,
12:39:07 138  	in_effective_end_date	IN DATE,
12:39:07 139  	in_note 		IN VARCHAR2,
12:39:07 140  	in_updated_by		IN VARCHAR2
12:39:07 141  );
12:39:07 142  
12:39:07 143  FUNCTION CALC_SUBSCRIPTION_END_DATE (
12:39:07 144  /*
12:39:07 145  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 146  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:07 147  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 148  Returns:
12:39:07 149  NULL if it is impossible to calculate end date (for example,
12:39:07 150  	offer chain includes offer with infinity recurrences number)
12:39:07 151  DATE else
12:39:07 152  */
12:39:07 153  	in_subscription_id IN NUMBER
12:39:07 154  ) RETURN DATE;
12:39:07 155  
12:39:07 156  PROCEDURE HAS_FUTURE_LICENSE (
12:39:07 157  /*
12:39:07 158  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 159  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 160  */
12:39:07 161  	in_license_id IN  NUMBER,
12:39:07 162  	out_result    OUT NUMBER
12:39:07 163  );
12:39:07 164  
12:39:07 165  PROCEDURE CLOSE_SUBSCRIPTION (
12:39:07 166  	in_subscription_id IN NUMBER,
12:39:07 167  	in_updated_by	   IN VARCHAR2
12:39:07 168  );
12:39:07 169  
12:39:07 170  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
12:39:07 171  	in_subscription_id IN NUMBER,
12:39:07 172  	out_group_id	   OUT NUMBER
12:39:07 173  );
12:39:07 174  
12:39:07 175  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
12:39:07 176  /*
12:39:07 177  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 178  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 179  */
12:39:07 180  	in_subscription_id IN NUMBER,
12:39:07 181  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 182  );
12:39:07 183  
12:39:07 184  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
12:39:07 185  /*
12:39:07 186  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 188  */
12:39:07 189  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
12:39:07 190  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
12:39:07 191  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
12:39:07 192  );
12:39:07 193  
12:39:07 194  PROCEDURE GET_ACTIVE_INVOICES_IDS (
12:39:07 195  /*
12:39:07 196  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 198  */
12:39:07 199  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
12:39:07 200  	in_subscription_id IN NUMBER,
12:39:07 201  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 202  );
12:39:07 203  
12:39:07 204  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
12:39:07 205  /*
12:39:07 206  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 207  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 208  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:07 209  */
12:39:07 210  	in_invoice_id	     IN NUMBER,
12:39:07 211  	in_updated_by	     IN VARCHAR2,
12:39:07 212  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:07 213  );
12:39:07 214  
12:39:07 215  PROCEDURE FINALIZE_CANCELATION (
12:39:07 216  /*
12:39:07 217  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 218  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 219  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:07 220  */
12:39:07 221  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
12:39:07 222  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
12:39:07 223  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
12:39:07 224  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
12:39:07 225  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
12:39:07 226  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
12:39:07 227  	in_subscription_id    IN NUMBER,
12:39:07 228  	in_cancelation_reason IN VARCHAR2,
12:39:07 229  	in_cancelation_date   IN DATE,
12:39:07 230  	in_note 	      IN VARCHAR2,
12:39:07 231  	in_agent_id	      IN NUMBER,
12:39:07 232  	in_updated_by	      IN VARCHAR2
12:39:07 233  );
12:39:07 234  
12:39:07 235  PROCEDURE FINALIZE_FALSE_START (
12:39:07 236  /*
12:39:07 237  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 239  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:07 240  */
12:39:07 241  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
12:39:07 242  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
12:39:07 243  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
12:39:07 244  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
12:39:07 245  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
12:39:07 246  	in_subscription_id    IN NUMBER,
12:39:07 247  	in_cancelation_date   IN DATE,
12:39:07 248  	in_note 	      IN VARCHAR2,
12:39:07 249  	in_agent_id	      IN NUMBER,
12:39:07 250  	in_updated_by	      IN VARCHAR2
12:39:07 251  );
12:39:07 252  
12:39:07 253  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
12:39:07 254  	in_subscription_id IN NUMBER
12:39:07 255  ) RETURN NUMBER;
12:39:07 256  
12:39:07 257  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
12:39:07 258  /*
12:39:07 259  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 260  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 261  */
12:39:07 262  	in_subscription_id IN NUMBER,
12:39:07 263  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 264  );
12:39:07 265  
12:39:07 266  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
12:39:07 267  /*
12:39:07 268  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 269  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 270  */
12:39:07 271  	in_subscription_id IN NUMBER,
12:39:07 272  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 273  );
12:39:07 274  
12:39:07 275  PROCEDURE GET_SUBSCR_LIC_OFFER (
12:39:07 276  /*
12:39:07 277  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 278  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 279  */
12:39:07 280  	in_subscription_id IN NUMBER,
12:39:07 281  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 282  );
12:39:07 283  
12:39:07 284  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
12:39:07 285  /*
12:39:07 286  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 287  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 288  */
12:39:07 289  	in_subscription_id IN NUMBER,
12:39:07 290  	out_result	   OUT NUMBER
12:39:07 291  );
12:39:07 292  
12:39:07 293  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
12:39:07 294  /*
12:39:07 295  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 296  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 297  */
12:39:07 298  	in_group_id	   IN NUMBER,
12:39:07 299  	in_offer_chain_id  IN NUMBER,
12:39:07 300  	out_result	   out number
12:39:07 301  );
12:39:07 302  
12:39:07 303  PROCEDURE GET_EXISTING_SUBSCR_IDS (
12:39:07 304  /*
12:39:07 305  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 306  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 307  */
12:39:07 308  	in_group_id	   IN NUMBER,
12:39:07 309  	in_offer_chain_id  IN NUMBER,
12:39:07 310  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 311  );
12:39:07 312  
12:39:07 313  PROCEDURE ADD_META_DATA (
12:39:07 314  /*
12:39:07 315  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 316  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 317  */
12:39:07 318  	in_subscription_id IN NUMBER,
12:39:07 319  	in_name 	   IN VARCHAR2,
12:39:07 320  	in_value	   IN VARCHAR2,
12:39:07 321  	in_created_by	   IN VARCHAR2
12:39:07 322  );
12:39:07 323  
12:39:07 324  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
12:39:07 325  /*
12:39:07 326  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:07 327  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 328  */
12:39:07 329  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
12:39:07 330  	out_result_set	     OUT SYS_REFCURSOR
12:39:07 331  );
12:39:07 332  
12:39:07 333  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
12:39:07 334  /*
12:39:07 335  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 336  */
12:39:07 337  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
12:39:07 338  	out_result_set	   OUT SYS_REFCURSOR
12:39:07 339  );
12:39:07 340  
12:39:07 341  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
12:39:07 342   (
12:39:07 343  /*
12:39:07 344  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 345  */
12:39:07 346  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
12:39:07 347  	out_result_set	    OUT SYS_REFCURSOR
12:39:07 348  );
12:39:07 349  
12:39:07 350  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
12:39:07 351  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
12:39:07 352  ) RETURN NUMBER;
12:39:07 353  
12:39:07 354  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
12:39:07 355  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
12:39:07 356  ) RETURN VARCHAR2;
12:39:07 357  
12:39:07 358  
12:39:07 359  
12:39:07 360  PROCEDURE GET_ACTIVE_MEU_SUBS (
12:39:07 361  	out_result_set	    OUT SYS_REFCURSOR
12:39:07 362  );
12:39:07 363  
12:39:07 364  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
12:39:07 365  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
12:39:07 366  	out_offer_id	    OUT NUMBER
12:39:07 367  );
12:39:07 368  
12:39:07 369  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
12:39:07 370  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
12:39:07 371  	out_license_id	    OUT NUMBER
12:39:07 372  );
12:39:07 373  
12:39:07 374  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
12:39:07 375  	out_result_set	    OUT SYS_REFCURSOR
12:39:07 376  );
12:39:07 377  
12:39:07 378  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
12:39:07 379  	out_result_set	    OUT SYS_REFCURSOR
12:39:07 380  );
12:39:07 381  
12:39:07 382  END PROCS_SUBSCRIPTION_V16;
12:39:07 383  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.06
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_SYSTEM
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE INCREMENT_VERSION;
12:39:07   4  
12:39:07   5  PROCEDURE CHECK_VERSION(
12:39:07   6  	  in_vers    IN NUMBER,
12:39:07   7  	  out_result OUT NUMBER
12:39:07   8  );
12:39:07   9  
12:39:07  10  END PROCS_SYSTEM_V16;
12:39:07  11  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_TAXES_CRU
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE CREATE_TAX (
12:39:07   4  	inout_tax_id		 IN OUT NUMBER,
12:39:07   5  	in_tax_type_id		 IN NUMBER,
12:39:07   6  	in_calculated_amount	 IN NUMBER,
12:39:07   7  	in_created_by		 IN VARCHAR2,
12:39:07   8  	in_line_item_id 	 IN NUMBER,
12:39:07   9  	in_effective_rate	 IN VARCHAR2,
12:39:07  10  	in_taxable_amount	 IN NUMBER,
12:39:07  11  	in_tax_rule_id		 IN NUMBER,
12:39:07  12  	in_jurisdiction_level_id IN NUMBER,
12:39:07  13  	in_jurisdiction_name	 IN VARCHAR2,
12:39:07  14  	in_jurisdiction_id	 IN VARCHAR2,
12:39:07  15  	in_ext_tax_type 	 IN VARCHAR2,
12:39:07  16  	in_ext_result		 IN VARCHAR2,
12:39:07  17  	in_imposition_type	 IN VARCHAR2,
12:39:07  18  	in_imposition		 IN VARCHAR2
12:39:07  19  );
12:39:07  20  
12:39:07  21  END PROCS_TAXES_CRU_V16;
12:39:07  22  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_TAXES
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE ADD_TAX (
12:39:07   4  	in_tax_type_id		 IN NUMBER,
12:39:07   5  	in_calculated_amount	 IN NUMBER,
12:39:07   6  	in_created_by		 IN VARCHAR2,
12:39:07   7  	in_line_item_id 	 IN NUMBER,
12:39:07   8  	in_effective_rate	 IN VARCHAR2,
12:39:07   9  	in_taxable_amount	 IN NUMBER,
12:39:07  10  	in_tax_rule_id		 IN NUMBER,
12:39:07  11  	in_jurisdiction_level_id IN NUMBER,
12:39:07  12  	in_jurisdiction_name	 IN VARCHAR2,
12:39:07  13  	in_jurisdiction_id	 IN VARCHAR2,
12:39:07  14  	in_ext_tax_type 	 IN VARCHAR2,
12:39:07  15  	in_ext_result		 IN VARCHAR2,
12:39:07  16  	in_imposition_type	 IN VARCHAR2,
12:39:07  17  	in_imposition		 IN VARCHAR2
12:39:07  18  );
12:39:07  19  
12:39:07  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
12:39:07  21  	in_country_code IN CHAR,
12:39:07  22  	in_check_date IN DATE,
12:39:07  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V16.FALSE
12:39:07  24  );
12:39:07  25  
12:39:07  26  PROCEDURE GET_TAX_CATEGORY (
12:39:07  27  	in_tax_category_id IN NUMBER,
12:39:07  28  	out_result_set	   OUT SYS_REFCURSOR
12:39:07  29  );
12:39:07  30  
12:39:07  31  END PROCS_TAXES_V16;
12:39:07  32  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_TEST
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE TEST_CLEAR_ALL;
12:39:07   4  PROCEDURE TEST_CLEAR_PRODUCTS;
12:39:07   5  
12:39:07   6  /********************************************/
12:39:07   7  
12:39:07   8  PROCEDURE TEST_GET_ACCOUNT (
12:39:07   9  	in_group_id	IN NUMBER,
12:39:07  10  	out_result_set	OUT SYS_REFCURSOR
12:39:07  11  );
12:39:07  12  
12:39:07  13  /********************************************/
12:39:07  14  
12:39:07  15  PROCEDURE TEST_GET_SUBSCRIPTION (
12:39:07  16  	in_subscription_id IN NUMBER,
12:39:07  17  	out_result_set	   OUT SYS_REFCURSOR
12:39:07  18  );
12:39:07  19  
12:39:07  20  /*********************************************/
12:39:07  21  
12:39:07  22  PROCEDURE TEST_DELETE_INVOICE (
12:39:07  23  	in_invoice_id IN NUMBER
12:39:07  24  );
12:39:07  25  
12:39:07  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
12:39:07  27  	in_group_id IN NUMBER
12:39:07  28  );
12:39:07  29  
12:39:07  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
12:39:07  31  	in_start_group_id IN NUMBER,
12:39:07  32  	in_end_group_id   IN NUMBER
12:39:07  33  );
12:39:07  34  
12:39:07  35  /**********************************************/
12:39:07  36  
12:39:07  37  FUNCTION TEST_IS_INVOICE_EXISTS(
12:39:07  38  /*
12:39:07  39  1 - exists
12:39:07  40  0 - not exists
12:39:07  41  */
12:39:07  42  	in_invoice_id IN NUMBER
12:39:07  43  ) RETURN NUMBER;
12:39:07  44  
12:39:07  45  PROCEDURE TEST_GET_INVOICE_INFO (
12:39:07  46  	in_invoice_id  IN NUMBER,
12:39:07  47  	out_result_set OUT SYS_REFCURSOR
12:39:07  48  );
12:39:07  49  
12:39:07  50  /******************************************************************************/
12:39:07  51  
12:39:07  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
12:39:07  53  	in_offer_chain_id in number
12:39:07  54  );
12:39:07  55  
12:39:07  56  END PROCS_TEST_V16;
12:39:07  57  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.03
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_TRANSACTION_CRU
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE CREATE_TRANSACTION (
12:39:07   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
12:39:07   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
12:39:07   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
12:39:07   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
12:39:07   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
12:39:07   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
12:39:07  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:07  11  );
12:39:07  12  
12:39:07  13  PROCEDURE UPDATE_TRANSACTION (
12:39:07  14  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
12:39:07  15  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
12:39:07  16  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
12:39:07  17  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
12:39:07  18  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
12:39:07  19  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
12:39:07  20  );
12:39:07  21  
12:39:07  22  PROCEDURE READ_TRANSACTION (
12:39:07  23  	in_transaction_id IN TRANSACTION.ID%TYPE,
12:39:07  24  	out_result_set	  OUT SYS_REFCURSOR
12:39:07  25  );
12:39:07  26  
12:39:07  27  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
12:39:07  28  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
12:39:07  29  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
12:39:07  30  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
12:39:07  31  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
12:39:07  32  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
12:39:07  33  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
12:39:07  34  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
12:39:07  35  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
12:39:07  36  );
12:39:07  37  
12:39:07  38  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
12:39:07  39  /*
12:39:07  40  Throws exceptions:
12:39:07  41  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  42  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
12:39:07  43  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  44  */
12:39:07  45  	in_transaction_id IN TRANSACTION.ID%TYPE,
12:39:07  46  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
12:39:07  47  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
12:39:07  48  );
12:39:07  49  
12:39:07  50  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
12:39:07  51  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
12:39:07  52  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
12:39:07  53  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
12:39:07  54  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
12:39:07  55  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
12:39:07  56  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
12:39:07  57  );
12:39:07  58  
12:39:07  59  END PROCS_TRANSACTION_CRU_V16;
12:39:07  60  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.02
12:39:07 SQL> 
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> -- DDL for package PROCS_TRANSACTION
12:39:07 SQL> --------------------------------------------------------------------------------
12:39:07 SQL> 
12:39:07 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V16" AS
12:39:07   2  
12:39:07   3  PROCEDURE CREATE_TRANSACTION (
12:39:07   4  /*
12:39:07   5  Throws exceptions:
12:39:07   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07   8  */
12:39:07   9  	in_transaction_id  IN NUMBER,
12:39:07  10  	in_status_id	   IN NUMBER,
12:39:07  11  	in_amount	   IN NUMBER,
12:39:07  12  	in_created_by	   IN VARCHAR2,
12:39:07  13  	in_order_id	   IN VARCHAR2,
12:39:07  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE,
12:39:07  15  	out_transaction_id OUT NUMBER
12:39:07  16  );
12:39:07  17  
12:39:07  18  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
12:39:07  19  /*
12:39:07  20  Throws exceptions:
12:39:07  21  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  23  */
12:39:07  24  	in_transaction_id	   IN NUMBER,
12:39:07  25  	in_trans_attempt_status    IN NUMBER,
12:39:07  26  	in_external_status_code    IN VARCHAR2,
12:39:07  27  	in_external_status_message IN VARCHAR2,
12:39:07  28  	in_created_by		   IN VARCHAR2,
12:39:07  29  	in_ext_transaction_id	   IN VARCHAR2,
12:39:07  30  	out_transaction_attempt_id OUT NUMBER
12:39:07  31  );
12:39:07  32  
12:39:07  33  PROCEDURE UPDATE_TRANSACTION_STATUS (
12:39:07  34  /*
12:39:07  35  Throws exceptions:
12:39:07  36  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  37  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  38  */
12:39:07  39  	in_transaction_id	 IN NUMBER,
12:39:07  40  	in_updated_by		 IN VARCHAR2,
12:39:07  41  	in_transaction_status_id IN NUMBER
12:39:07  42  );
12:39:07  43  
12:39:07  44  PROCEDURE UPDATE_TRANSACTION_SETTLED (
12:39:07  45  /*
12:39:07  46  Throws exceptions:
12:39:07  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  49  */
12:39:07  50  	in_transaction_id	 IN NUMBER,
12:39:07  51  	in_updated_by		 IN VARCHAR2,
12:39:07  52  	in_is_settled		 IN NUMBER
12:39:07  53  );
12:39:07  54  
12:39:07  55  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
12:39:07  56  /*
12:39:07  57  Throws exceptions:
12:39:07  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  60  */
12:39:07  61  	in_transaction_attempt_id IN NUMBER,
12:39:07  62  	in_updated_by		  IN VARCHAR2
12:39:07  63  );
12:39:07  64  
12:39:07  65  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
12:39:07  66  /*
12:39:07  67  Throws exceptions:
12:39:07  68  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  69  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  70  */
12:39:07  71  	in_transaction_attempt_id     IN NUMBER,
12:39:07  72  	in_transaction_attempt_status IN NUMBER
12:39:07  73  );
12:39:07  74  
12:39:07  75  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
12:39:07  76  /*
12:39:07  77  Throws exceptions:
12:39:07  78  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  79  */
12:39:07  80  	in_transaction_id	      IN NUMBER,
12:39:07  81  	in_transaction_attempt_status IN NUMBER,
12:39:07  82  	out_result_set		      OUT SYS_REFCURSOR
12:39:07  83  );
12:39:07  84  
12:39:07  85  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
12:39:07  86  /*
12:39:07  87  Throws exceptions:
12:39:07  88  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07  89  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07  90  */
12:39:07  91  	in_transaction_attempt_id IN NUMBER,
12:39:07  92  	in_ext_status_code	  IN VARCHAR2,
12:39:07  93  	in_ext_status_message	  IN VARCHAR2,
12:39:07  94  	in_ext_transaction_id	  IN VARCHAR2
12:39:07  95  );
12:39:07  96  
12:39:07  97  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
12:39:07  98  /*
12:39:07  99  Throws exceptions:
12:39:07 100  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 102  */
12:39:07 103  	in_transaction_id IN  NUMBER,
12:39:07 104  	out_attempts_num  OUT NUMBER
12:39:07 105  );
12:39:07 106  
12:39:07 107  PROCEDURE GET_TRANSACTION_AMOUNT (
12:39:07 108  /*
12:39:07 109  Throws exceptions:
12:39:07 110  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 111  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 112  */
12:39:07 113  	in_transaction_id      IN  NUMBER,
12:39:07 114  	out_transaction_amount OUT NUMBER
12:39:07 115  );
12:39:07 116  
12:39:07 117  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
12:39:07 118  /*
12:39:07 119  Throws exceptions:
12:39:07 120  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 122  */
12:39:07 123  	in_charge_id   IN  NUMBER,
12:39:07 124  	out_result_set OUT SYS_REFCURSOR
12:39:07 125  );
12:39:07 126  
12:39:07 127  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
12:39:07 128  /*
12:39:07 129  Throws exceptions:
12:39:07 130  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 131  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 132  */
12:39:07 133  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
12:39:07 134  	out_result_set OUT SYS_REFCURSOR
12:39:07 135  );
12:39:07 136  
12:39:07 137  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
12:39:07 138  /*
12:39:07 139  Throws exceptions:
12:39:07 140  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 141  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 142  */
12:39:07 143  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
12:39:07 144  	out_result_set OUT SYS_REFCURSOR
12:39:07 145  );
12:39:07 146  
12:39:07 147  PROCEDURE GET_TRANSACTION_ATTEMPTS (
12:39:07 148  /*
12:39:07 149  Throws exceptions:
12:39:07 150  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 151  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 152  */
12:39:07 153  	in_transaction_id IN  NUMBER,
12:39:07 154  	out_result_set	  OUT SYS_REFCURSOR
12:39:07 155  );
12:39:07 156  
12:39:07 157  PROCEDURE RESERVE_TRANSACTION_ID (
12:39:07 158  /*
12:39:07 159  Throws exceptions:
12:39:07 160  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 161  */
12:39:07 162  	out_transaction_id OUT NUMBER
12:39:07 163  );
12:39:07 164  
12:39:07 165  PROCEDURE GET_TRANSACTION_BY_ID (
12:39:07 166  /*
12:39:07 167  Throws exceptions:
12:39:07 168  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 169  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 170  */
12:39:07 171  	in_transaction_id IN NUMBER,
12:39:07 172  	out_result_set	  OUT SYS_REFCURSOR
12:39:07 173  );
12:39:07 174  
12:39:07 175  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
12:39:07 176  /*
12:39:07 177  Throws exceptions:
12:39:07 178  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 179  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
12:39:07 180  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 181  */
12:39:07 182  	in_transaction_id IN TRANSACTION.ID%TYPE,
12:39:07 183  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
12:39:07 184  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
12:39:07 185  );
12:39:07 186  
12:39:07 187  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
12:39:07 188  /*
12:39:07 189  Throws exceptions:
12:39:07 190  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 191  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 192  */
12:39:07 193  	in_invoice_id	IN  NUMBER,
12:39:07 194  	out_result_set OUT SYS_REFCURSOR
12:39:07 195  );
12:39:07 196  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
12:39:07 197  /*
12:39:07 198  Throws exceptions:
12:39:07 199  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 200  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 201  */
12:39:07 202  	in_transaction_id IN  NUMBER,
12:39:07 203  	out_is_successfull  OUT NUMBER
12:39:07 204  );
12:39:07 205  
12:39:07 206  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
12:39:07 207  	in_transaction_id IN NUMBER
12:39:07 208  ) RETURN NUMBER;
12:39:07 209  
12:39:07 210  FUNCTION GET_TRANSACTION_INTRL_TAXES (
12:39:07 211  	in_transaction_id IN NUMBER
12:39:07 212  ) RETURN NUMBER;
12:39:07 213  
12:39:07 214  -- norlov: #38796
12:39:07 215  PROCEDURE GET_TRANSACTIONS (
12:39:07 216  /*
12:39:07 217  Throws exceptions:
12:39:07 218  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 219  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 220  */
12:39:07 221  	in_group_id	      IN  NUMBER,
12:39:07 222  	in_invoice_id	      IN NUMBER DEFAULT NULL,
12:39:07 223  	in_subscription_id    IN NUMBER DEFAULT NULL,
12:39:07 224  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
12:39:07 225  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
12:39:07 226  	in_transaction_status IN NUMBER DEFAULT NULL,
12:39:07 227  	out_result_set	      OUT SYS_REFCURSOR
12:39:07 228  );
12:39:07 229  
12:39:07 230  FUNCTION IS_TRANSACTION_COLLECTED (
12:39:07 231  /*
12:39:07 232  Throws:
12:39:07 233  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 234  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 235  Returns:
12:39:07 236  GLOBAL_CONST.TRUE if transaction collected,
12:39:07 237  GLOBAL_CONST.FALSE else
12:39:07 238  */
12:39:07 239  	in_transaction_id IN NUMBER
12:39:07 240  ) RETURN NUMBER;
12:39:07 241  
12:39:07 242  PROCEDURE GET_ATTEMPT_NUMBER (
12:39:07 243  /*
12:39:07 244  Throws exceptions:
12:39:07 245  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:07 246  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:07 247  */
12:39:07 248  	in_charge_id   in  number,
12:39:07 249  	out_attempt_count out number
12:39:07 250  );
12:39:07 251  
12:39:07 252  END PROCS_TRANSACTION_V16;
12:39:07 253  .
12:39:07 SQL> /

Package created.

Elapsed: 00:00:00.07
12:39:08 SQL> 
12:39:08 SQL> --------------------------------------------------------------------------------
12:39:08 SQL> -- DDL for package PUBLIC_PROCS_BILLING
12:39:08 SQL> --------------------------------------------------------------------------------
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
12:39:08   4  /*
12:39:08   5  Throws exceptions:
12:39:08   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08   8  */
12:39:08   9  	  in_offer_chain_id IN	 NUMBER,
12:39:08  10  	  out_result_set    OUT  SYS_REFCURSOR
12:39:08  11  );
12:39:08  12  
12:39:08  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
12:39:08  14  /*
12:39:08  15  Throws exceptions:
12:39:08  16  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  18  */
12:39:08  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:08  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
12:39:08  21  );
12:39:08  22  
12:39:08  23  PROCEDURE GET_PENDING_INVOICES (
12:39:08  24  /*
12:39:08  25  Throws exceptions:
12:39:08  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  27  */
12:39:08  28  	out_result_set1      OUT SYS_REFCURSOR,
12:39:08  29  	out_result_set2      OUT SYS_REFCURSOR,
12:39:08  30  	out_result_set3      OUT SYS_REFCURSOR,
12:39:08  31  	in_row_number	     IN NUMBER DEFAULT NULL
12:39:08  32  );
12:39:08  33  
12:39:08  34  PROCEDURE GET_PENDING_REFUND_CHARGES (
12:39:08  35  /*
12:39:08  36  Throws exceptions:
12:39:08  37  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  38  */
12:39:08  39  	out_result_set	    OUT SYS_REFCURSOR,
12:39:08  40  	in_row_number	    IN NUMBER DEFAULT NULL
12:39:08  41  );
12:39:08  42  
12:39:08  43  PROCEDURE GET_UNPROCESSED_CHARGES (
12:39:08  44  /*
12:39:08  45  Throws exceptions:
12:39:08  46  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  47  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  48  */
12:39:08  49  	in_invoice_id  IN NUMBER,
12:39:08  50  	out_result_set OUT SYS_REFCURSOR
12:39:08  51  );
12:39:08  52  
12:39:08  53  PROCEDURE GET_PROCESSED_CHARGES (
12:39:08  54  /*
12:39:08  55  Throws exceptions:
12:39:08  56  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  57  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  58  */
12:39:08  59  	in_invoice_id  IN NUMBER,
12:39:08  60  	out_result_set OUT SYS_REFCURSOR
12:39:08  61  );
12:39:08  62  
12:39:08  63  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
12:39:08  64  /*
12:39:08  65  Throws exceptions:
12:39:08  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  67  */
12:39:08  68  	in_transaction_id	      IN NUMBER,
12:39:08  69  	in_transaction_attempt_status IN NUMBER,
12:39:08  70  	out_result_set		      OUT SYS_REFCURSOR
12:39:08  71  );
12:39:08  72  
12:39:08  73  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
12:39:08  74  /*
12:39:08  75  Throws exceptions:
12:39:08  76  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  77  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  78  */
12:39:08  79  	in_transaction_attempt_id     IN NUMBER,
12:39:08  80  	in_transaction_attempt_status IN NUMBER
12:39:08  81  );
12:39:08  82  
12:39:08  83  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
12:39:08  84  /*
12:39:08  85  Throws exceptions:
12:39:08  86  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  87  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  88  */
12:39:08  89  	in_transaction_attempt_id IN NUMBER,
12:39:08  90  	in_updated_by		  IN VARCHAR2
12:39:08  91  );
12:39:08  92  
12:39:08  93  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
12:39:08  94  /*
12:39:08  95  Throws exceptions:
12:39:08  96  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  97  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  98  */
12:39:08  99  	in_transaction_id	   IN NUMBER,
12:39:08 100  	in_trans_attempt_status    IN NUMBER,
12:39:08 101  	in_external_status_code    IN VARCHAR2,
12:39:08 102  	in_external_status_message IN VARCHAR2,
12:39:08 103  	in_created_by		   IN VARCHAR2,
12:39:08 104  	in_ext_transaction_id	   IN VARCHAR2,
12:39:08 105  	out_transaction_attempt_id OUT NUMBER
12:39:08 106  );
12:39:08 107  
12:39:08 108  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
12:39:08 109  /*
12:39:08 110  Throws exceptions:
12:39:08 111  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 112  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 113  */
12:39:08 114  	in_transaction_attempt_id IN NUMBER,
12:39:08 115  	in_ext_status_code	  IN VARCHAR2,
12:39:08 116  	in_ext_status_message	  IN VARCHAR2,
12:39:08 117  	in_ext_transaction_id	  IN VARCHAR2
12:39:08 118  );
12:39:08 119  
12:39:08 120  PROCEDURE UPDATE_TRANSACTION_STATUS (
12:39:08 121  /*
12:39:08 122  Throws exceptions:
12:39:08 123  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 124  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 125  */
12:39:08 126  	in_transaction_id	 IN NUMBER,
12:39:08 127  	in_updated_by		 IN VARCHAR2,
12:39:08 128  	in_transaction_status_id IN NUMBER
12:39:08 129  );
12:39:08 130  
12:39:08 131  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
12:39:08 132  /*
12:39:08 133  Throws exceptions:
12:39:08 134  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 135  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 136  */
12:39:08 137  	in_transaction_id IN  NUMBER,
12:39:08 138  	out_attempts_num  OUT NUMBER
12:39:08 139  );
12:39:08 140  
12:39:08 141  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
12:39:08 142  /*
12:39:08 143  Throws exceptions:
12:39:08 144  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 145  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 146  */
12:39:08 147  	in_transaction_id IN  NUMBER,
12:39:08 148  	out_is_successfull  OUT NUMBER
12:39:08 149  );
12:39:08 150  
12:39:08 151  PROCEDURE UPDATE_INVOICE_STATUS (
12:39:08 152  /*
12:39:08 153  Throws exceptions:
12:39:08 154  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 155  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 156  */
12:39:08 157  	in_invoice_id		       IN NUMBER,
12:39:08 158  	in_invoice_status_id	       IN NUMBER,
12:39:08 159  	in_updated_by		       IN VARCHAR2
12:39:08 160  );
12:39:08 161  
12:39:08 162  PROCEDURE SUSPEND_SUBSCRIPTION(
12:39:08 163  /*
12:39:08 164  Throws exceptions:
12:39:08 165  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 166  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:08 167  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 168  */
12:39:08 169  	  in_subs_id	IN NUMBER ,
12:39:08 170  	  in_updated_by IN VARCHAR2
12:39:08 171  );
12:39:08 172  
12:39:08 173  PROCEDURE GET_CREDIT_CARD_BY_ID (
12:39:08 174  /*
12:39:08 175  Throws exceptions:
12:39:08 176  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 177  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 178  */
12:39:08 179  	in_credit_card_id IN  NUMBER,
12:39:08 180  	out_result_set	  OUT SYS_REFCURSOR
12:39:08 181  );
12:39:08 182  
12:39:08 183  PROCEDURE GET_TRANSACTION_AMOUNT (
12:39:08 184  /*
12:39:08 185  Throws exceptions:
12:39:08 186  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 188  */
12:39:08 189  	in_transaction_id      IN  NUMBER,
12:39:08 190  	out_transaction_amount OUT NUMBER
12:39:08 191  );
12:39:08 192  
12:39:08 193  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
12:39:08 194  /*
12:39:08 195  Throws exceptions:
12:39:08 196  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 198  */
12:39:08 199  	in_invoice_id  IN  NUMBER,
12:39:08 200  	out_account_id OUT NUMBER
12:39:08 201  );
12:39:08 202  
12:39:08 203  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
12:39:08 204  /*
12:39:08 205  Throws exceptions:
12:39:08 206  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:08 207  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 208  */
12:39:08 209  	in_gift_certificate_id IN NUMBER,
12:39:08 210  	out_result_set	       OUT SYS_REFCURSOR
12:39:08 211  );
12:39:08 212  
12:39:08 213  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
12:39:08 214  /*
12:39:08 215  Throws exceptions:
12:39:08 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 218  */
12:39:08 219  	in_charge_id	    IN NUMBER,
12:39:08 220  	out_subscription_id OUT NUMBER
12:39:08 221  );
12:39:08 222  
12:39:08 223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
12:39:08 224  /*
12:39:08 225  Throws exceptions:
12:39:08 226  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 227  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 228  */
12:39:08 229  	in_gift_certificate_id IN NUMBER,
12:39:08 230  	in_charge_id	       IN NUMBER,
12:39:08 231  	out_result	       OUT NUMBER
12:39:08 232  );
12:39:08 233  
12:39:08 234  PROCEDURE GET_SUBSCRIPTION_INFO (
12:39:08 235  /*
12:39:08 236  Throws exceptions:
12:39:08 237  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 238  */
12:39:08 239  	  in_subscription_id IN  NUMBER,
12:39:08 240  	  out_result_set      OUT SYS_REFCURSOR
12:39:08 241  );
12:39:08 242  
12:39:08 243  PROCEDURE CALCULATE_INVOICE_AMOUNT (
12:39:08 244  /*
12:39:08 245  Throws exceptions:
12:39:08 246  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 247  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 248  */
12:39:08 249  	in_invoice_id IN  NUMBER,
12:39:08 250  	out_amount    OUT NUMBER
12:39:08 251  );
12:39:08 252  
12:39:08 253  PROCEDURE GET_TRANSACTION_BY_ID (
12:39:08 254  /*
12:39:08 255  Throws exceptions:
12:39:08 256  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 257  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 258  */
12:39:08 259  	in_transaction_id IN NUMBER,
12:39:08 260  	out_result_set	  OUT SYS_REFCURSOR
12:39:08 261  );
12:39:08 262  
12:39:08 263  PROCEDURE UPDATE_CHARGE_STATUS (
12:39:08 264  /*
12:39:08 265  Throws exceptions:
12:39:08 266  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 267  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 268  */
12:39:08 269  	in_charge_id	    IN CHARGE.ID%TYPE,
12:39:08 270  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
12:39:08 271  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
12:39:08 272  );
12:39:08 273  
12:39:08 274  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
12:39:08 275  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:08 276  	out_result_set OUT SYS_REFCURSOR
12:39:08 277  );
12:39:08 278  
12:39:08 279  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
12:39:08 280  /*
12:39:08 281  Throws exceptions:
12:39:08 282  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 283  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
12:39:08 284  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 285  */
12:39:08 286  	in_transaction_id IN TRANSACTION.ID%TYPE,
12:39:08 287  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
12:39:08 288  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
12:39:08 289  );
12:39:08 290  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
12:39:08 291  /*
12:39:08 292  Throws exceptions:
12:39:08 293  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 294  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 295  */
12:39:08 296  	in_invoice_id	IN  NUMBER,
12:39:08 297  	out_result_set OUT SYS_REFCURSOR
12:39:08 298  );
12:39:08 299  PROCEDURE GET_ACTIVE_INVOICES_IDS (
12:39:08 300  /*
12:39:08 301  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 302  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 303  */
12:39:08 304  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
12:39:08 305  	in_subscription_id IN NUMBER,
12:39:08 306  	out_result_set	   OUT SYS_REFCURSOR
12:39:08 307  );
12:39:08 308  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
12:39:08 309  /*
12:39:08 310  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 312  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:08 313  */
12:39:08 314  --  in_invoice_id        IN INVOICE.ID%TYPE,
12:39:08 315  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
12:39:08 316  -- norlov: in_refundable	      IN refund enabled
12:39:08 317  	in_invoice_id	     IN NUMBER,
12:39:08 318  	in_updated_by	     IN VARCHAR2,
12:39:08 319  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:08 320  --  in_cancellation_date IN DATE DEFAULT current_timestamp
12:39:08 321  );
12:39:08 322  
12:39:08 323  PROCEDURE FINALIZE_CANCELATION (
12:39:08 324  /*
12:39:08 325  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 326  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 327  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:08 328  */
12:39:08 329  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
12:39:08 330  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
12:39:08 331  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
12:39:08 332  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
12:39:08 333  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
12:39:08 334  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
12:39:08 335  	in_subscription_id    IN NUMBER,
12:39:08 336  	in_cancelation_reason IN VARCHAR2,
12:39:08 337  	in_cancelation_date   IN DATE,
12:39:08 338  	in_note 	      IN VARCHAR2,
12:39:08 339  	in_agent_id	      IN NUMBER,
12:39:08 340  	in_updated_by	      IN VARCHAR2
12:39:08 341  );
12:39:08 342  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
12:39:08 343  /*
12:39:08 344  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 345  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 346  */
12:39:08 347  	in_subscription_id IN NUMBER,
12:39:08 348  	out_result_set	   OUT SYS_REFCURSOR
12:39:08 349  );
12:39:08 350  PROCEDURE GET_OFFER_CHAIN_META_DATA (
12:39:08 351  /*
12:39:08 352  Throws exceptions (codes):
12:39:08 353  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 354  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 355  */
12:39:08 356  	in_offer_chain_id IN NUMBER,
12:39:08 357  	in_meta_data_name IN VARCHAR2,
12:39:08 358  	out_result_set	  OUT SYS_REFCURSOR
12:39:08 359  );
12:39:08 360  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
12:39:08 361  /*
12:39:08 362  Throws exceptions (codes):
12:39:08 363  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 364  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 365  */
12:39:08 366  	in_product_offering_id IN NUMBER,
12:39:08 367  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
12:39:08 368  	out_result_set	       OUT SYS_REFCURSOR
12:39:08 369  );
12:39:08 370  PROCEDURE READ_ACCOUNT (
12:39:08 371  	in_account_id  IN ACCOUNT.ID%TYPE,
12:39:08 372  	out_result_set OUT SYS_REFCURSOR
12:39:08 373  );
12:39:08 374  
12:39:08 375  PROCEDURE GET_COLLECTED_CHARGES (
12:39:08 376  /*
12:39:08 377  Throws exceptions:
12:39:08 378  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 379  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 380  */
12:39:08 381  	in_invoice_id  IN NUMBER,
12:39:08 382  	out_result_set OUT SYS_REFCURSOR
12:39:08 383  );
12:39:08 384  
12:39:08 385  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
12:39:08 386  /*
12:39:08 387  Throws exceptions:
12:39:08 388  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:08 389  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 390  */
12:39:08 391  	in_invoice_id IN NUMBER,
12:39:08 392  	out_group_ids OUT SYS_REFCURSOR
12:39:08 393  );
12:39:08 394  
12:39:08 395  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
12:39:08 396  /*
12:39:08 397  Throws exceptions:
12:39:08 398  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:08 399  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 400  */
12:39:08 401  	in_group_id IN NUMBER,
12:39:08 402  	out_account_id	OUT NUMBER
12:39:08 403  );
12:39:08 404  
12:39:08 405  PROCEDURE LOCK_ACCOUNT (
12:39:08 406  	in_group_id    IN NUMBER,
12:39:08 407  	in_lock_key    IN VARCHAR2,
12:39:08 408  	in_seconds_num IN NUMBER,
12:39:08 409  	in_created_by  IN VARCHAR2,
12:39:08 410  	in_reason      IN VARCHAR2
12:39:08 411  );
12:39:08 412  
12:39:08 413  PROCEDURE RELEASE_LOCK (
12:39:08 414  	in_group_id IN NUMBER,
12:39:08 415  	in_lock_key IN VARCHAR2
12:39:08 416  );
12:39:08 417  
12:39:08 418  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
12:39:08 419  	in_invoice_id		    IN NUMBER,
12:39:08 420  	out_order_id		    OUT VARCHAR2,
12:39:08 421  	out_external_transaction_id OUT VARCHAR2
12:39:08 422  );
12:39:08 423  
12:39:08 424  PROCEDURE GET_PAYPAL_BY_ID (
12:39:08 425  	in_paypal_id   IN  NUMBER,
12:39:08 426  	out_result_set OUT SYS_REFCURSOR
12:39:08 427  );
12:39:08 428  
12:39:08 429  PROCEDURE GET_ATTEMPT_NUMBER (
12:39:08 430  /*
12:39:08 431  Throws exceptions:
12:39:08 432  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 433  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 434  */
12:39:08 435  	in_charge_id   in  number,
12:39:08 436  	out_attempt_count out number
12:39:08 437  );
12:39:08 438  
12:39:08 439  PROCEDURE GET_NOTIFICATION_TYPE_ID (
12:39:08 440  	in_offer_chain_id	 IN NUMBER,
12:39:08 441  	in_action_name		 IN VARCHAR2,
12:39:08 442  	out_notification_type_id out number
12:39:08 443  );
12:39:08 444  
12:39:08 445  END PUBLIC_PROCS_BILLING_V16;
12:39:08 446  .
12:39:08 SQL> /

Package created.

Elapsed: 00:00:00.05
12:39:08 SQL> 
12:39:08 SQL> --------------------------------------------------------------------------------
12:39:08 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
12:39:08 SQL> --------------------------------------------------------------------------------
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE LOCK_ACCOUNT (
12:39:08   4  	in_group_id    IN NUMBER,
12:39:08   5  	in_lock_key    IN VARCHAR2,
12:39:08   6  	in_seconds_num IN NUMBER,
12:39:08   7  	in_created_by  IN VARCHAR2,
12:39:08   8  	in_reason      IN VARCHAR2
12:39:08   9  );
12:39:08  10  
12:39:08  11  PROCEDURE RELEASE_LOCK (
12:39:08  12  	in_group_id IN NUMBER,
12:39:08  13  	in_lock_key IN VARCHAR2
12:39:08  14  );
12:39:08  15  
12:39:08  16  END PUBLIC_PROCS_NOTIFICATION_V16;
12:39:08  17  .
12:39:08 SQL> /

Package created.

Elapsed: 00:00:00.08
12:39:08 SQL> 
12:39:08 SQL> --------------------------------------------------------------------------------
12:39:08 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
12:39:08 SQL> --------------------------------------------------------------------------------
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
12:39:08   4  	out_result_set OUT SYS_REFCURSOR
12:39:08   5  );
12:39:08   6  
12:39:08   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
12:39:08   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
12:39:08   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
12:39:08  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:08  11  );
12:39:08  12  
12:39:08  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
12:39:08  14  /*
12:39:08  15  Throws exceptions:
12:39:08  16  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  18  */
12:39:08  19  	  in_offer_chain_id IN	 NUMBER,
12:39:08  20  	  out_result_set    OUT  SYS_REFCURSOR
12:39:08  21  );
12:39:08  22  
12:39:08  23  PROCEDURE GET_UNREDEEMED_GCS (
12:39:08  24  	out_result_set		OUT SYS_REFCURSOR,
12:39:08  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
12:39:08  26  	in_num_rows		IN NUMBER DEFAULT 10000,
12:39:08  27  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:08  28  );
12:39:08  29  
12:39:08  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
12:39:08  31  /*
12:39:08  32  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:08  33  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  34  */
12:39:08  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
12:39:08  36  	out_result_set	     OUT SYS_REFCURSOR
12:39:08  37  );
12:39:08  38  
12:39:08  39  PROCEDURE GET_ALL_OCH_META_DATA (
12:39:08  40  	in_offer_chain_id IN NUMBER,
12:39:08  41  	out_result_set	  OUT SYS_REFCURSOR
12:39:08  42  );
12:39:08  43  
12:39:08  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
12:39:08  45  /*
12:39:08  46  Throws exceptions (codes):
12:39:08  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  49  */
12:39:08  50  	in_offer_chain_id IN NUMBER,
12:39:08  51  	in_meta_data_name IN VARCHAR2,
12:39:08  52  	out_result_set	  OUT SYS_REFCURSOR
12:39:08  53  );
12:39:08  54  
12:39:08  55  PROCEDURE GET_ENDING_LICENSES (
12:39:08  56  /*
12:39:08  57  Throws exceptions:
12:39:08  58  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  59  */
12:39:08  60  	in_hours_number IN NUMBER,
12:39:08  61  	out_result_set OUT SYS_REFCURSOR
12:39:08  62  );
12:39:08  63  
12:39:08  64  PROCEDURE GET_ENDING_LICENSES_CC (
12:39:08  65  /*
12:39:08  66  Throws exceptions:
12:39:08  67  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  68  */
12:39:08  69  	in_hours_number IN NUMBER,
12:39:08  70  	out_result_set OUT SYS_REFCURSOR,
12:39:08  71  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:08  72  );
12:39:08  73  
12:39:08  74  /************************************************/
12:39:08  75  
12:39:08  76  PROCEDURE GET_RECURRING_OFFER (
12:39:08  77  /*
12:39:08  78  Throws exceptions:
12:39:08  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  80  */
12:39:08  81  	in_license_id  IN NUMBER,
12:39:08  82  	out_result_set OUT SYS_REFCURSOR
12:39:08  83  );
12:39:08  84  
12:39:08  85  /*************************************************/
12:39:08  86  
12:39:08  87  PROCEDURE GET_NEXT_OFFER (
12:39:08  88  /*
12:39:08  89  Throws exceptions:
12:39:08  90  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08  91  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:08  92  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  93  */
12:39:08  94  	in_license_id  IN NUMBER,
12:39:08  95  	out_result_set OUT SYS_REFCURSOR
12:39:08  96  );
12:39:08  97  
12:39:08  98  /**************************************************/
12:39:08  99  
12:39:08 100  PROCEDURE UPDATE_LICENSE_STATUS(
12:39:08 101  /*
12:39:08 102  Throws exceptions:
12:39:08 103  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 104  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 105  */
12:39:08 106  	  in_license_id     IN NUMBER,
12:39:08 107  	  in_license_status IN NUMBER,
12:39:08 108  	  in_updated_by     IN VARCHAR2
12:39:08 109  );
12:39:08 110  
12:39:08 111  /***************************************************/
12:39:08 112  
12:39:08 113  PROCEDURE UPDATE_INVOICE_STATUS (
12:39:08 114  /*
12:39:08 115  Throws exceptions:
12:39:08 116  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 117  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 118  */
12:39:08 119  	in_invoice_id		       IN NUMBER,
12:39:08 120  	in_invoice_status_id	       IN NUMBER,
12:39:08 121  	in_updated_by		       IN VARCHAR2
12:39:08 122  );
12:39:08 123  
12:39:08 124  /***************************************************/
12:39:08 125  
12:39:08 126  PROCEDURE CREATE_LICENSE(
12:39:08 127  /*
12:39:08 128  Throws exceptions:
12:39:08 129  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 130  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 131  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:08 132  */
12:39:08 133  	in_status_id		    IN NUMBER,
12:39:08 134  	in_needs_entitlements	    IN NUMBER,
12:39:08 135  	in_start_date		    IN DATE,
12:39:08 136  	in_end_date		    IN DATE,
12:39:08 137  	in_offer_id		    IN NUMBER,
12:39:08 138  	in_subscription_id	    IN NUMBER,
12:39:08 139  	in_invoice_id		    IN NUMBER,
12:39:08 140  	in_created_by		    IN VARCHAR2,
12:39:08 141  	in_is_extension 	    IN NUMBER,
12:39:08 142  	in_current_offer_index	    IN NUMBER,
12:39:08 143  	in_current_offer_recurr_num IN NUMBER,
12:39:08 144  	out_license_id		    OUT NUMBER
12:39:08 145  );
12:39:08 146  
12:39:08 147  /**************************************************/
12:39:08 148  
12:39:08 149  PROCEDURE CREATE_INVOICE(
12:39:08 150  /*
12:39:08 151  Throws exceptions:
12:39:08 152  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 153  */
12:39:08 154  	  in_invoice_status IN NUMBER,
12:39:08 155  	  in_created_by     IN VARCHAR2,
12:39:08 156  	  in_tax_exempt_id  IN VARCHAR2,
12:39:08 157  	  out_invoice_id    OUT NUMBER
12:39:08 158  );
12:39:08 159  
12:39:08 160  /*****************************************************/
12:39:08 161  
12:39:08 162  PROCEDURE CREATE_CHARGE(
12:39:08 163  /*
12:39:08 164  Throws exceptions:
12:39:08 165  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 166  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 167  */
12:39:08 168  	in_invoice_id	      IN NUMBER,
12:39:08 169  	in_transaction_id     IN NUMBER,
12:39:08 170  	in_instrument_type_id IN NUMBER,
12:39:08 171  	in_instrument_id      IN NUMBER,
12:39:08 172  	in_charge_amount      IN NUMBER,
12:39:08 173  	in_created_by	      IN VARCHAR2,
12:39:08 174  	in_charge_status_id   IN NUMBER,
12:39:08 175  	out_charge_id	      OUT NUMBER
12:39:08 176  );
12:39:08 177  
12:39:08 178  /*****************************************************/
12:39:08 179  
12:39:08 180  PROCEDURE HAS_FUTURE_LICENSE (
12:39:08 181  /*
12:39:08 182  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 183  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 184  --
12:39:08 185  RETURNS:
12:39:08 186  1 - if has,
12:39:08 187  0 - else
12:39:08 188  */
12:39:08 189  	in_license_id IN NUMBER,
12:39:08 190  	out_result	   OUT NUMBER
12:39:08 191  );
12:39:08 192  
12:39:08 193  /*****************************************************/
12:39:08 194  
12:39:08 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
12:39:08 196  /*
12:39:08 197  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 198  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 199  */
12:39:08 200  	in_license_id IN NUMBER,
12:39:08 201  	out_group_id  OUT NUMBER
12:39:08 202  );
12:39:08 203  
12:39:08 204  /*****************************************************/
12:39:08 205  
12:39:08 206  PROCEDURE GET_OFFER_PRODUCTS (
12:39:08 207  /*
12:39:08 208  Throws exceptions (codes):
12:39:08 209  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 210  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 211  */
12:39:08 212  	in_offer_id    IN NUMBER,
12:39:08 213  	out_result_set OUT SYS_REFCURSOR
12:39:08 214  );
12:39:08 215  
12:39:08 216  /*******************************************************/
12:39:08 217  
12:39:08 218  PROCEDURE CREATE_TRANSACTION (
12:39:08 219  /*
12:39:08 220  Throws exceptions:
12:39:08 221  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 222  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 223  */
12:39:08 224  	in_transaction_id  IN NUMBER,
12:39:08 225  	in_status_id	   IN NUMBER,
12:39:08 226  	in_amount	   IN NUMBER,
12:39:08 227  	in_created_by	   IN VARCHAR2,
12:39:08 228  	in_order_id	   IN VARCHAR2,
12:39:08 229  	out_transaction_id OUT NUMBER
12:39:08 230  );
12:39:08 231  
12:39:08 232  /*********************************************************/
12:39:08 233  
12:39:08 234  PROCEDURE ADD_LINE_ITEMS(
12:39:08 235  /*
12:39:08 236  Throws exceptions:
12:39:08 237  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 239  */
12:39:08 240  	in_invoice_id IN NUMBER,
12:39:08 241  	in_offer_id   IN NUMBER,
12:39:08 242  	in_created_by IN VARCHAR2
12:39:08 243  );
12:39:08 244  
12:39:08 245  /**********************************************************/
12:39:08 246  
12:39:08 247  PROCEDURE CALCULATE_INVOICE_AMOUNT (
12:39:08 248  /*
12:39:08 249  Throws exceptions:
12:39:08 250  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 251  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 252  */
12:39:08 253  	in_invoice_id IN  NUMBER,
12:39:08 254  	out_amount    OUT NUMBER
12:39:08 255  );
12:39:08 256  
12:39:08 257  /*********************************************************/
12:39:08 258  
12:39:08 259  PROCEDURE RESERVE_TRANSACTION_ID (
12:39:08 260  /*
12:39:08 261  Throws exceptions:
12:39:08 262  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 263  */
12:39:08 264  	out_transaction_id OUT NUMBER
12:39:08 265  );
12:39:08 266  
12:39:08 267  /**********************************************************/
12:39:08 268  
12:39:08 269  PROCEDURE P_GET_NEXT_OFFER_INDEX (
12:39:08 270  	in_offer_chain_id	     IN NUMBER,
12:39:08 271  	in_offer_chain_current_index IN NUMBER,
12:39:08 272  	out_next_offer_index	     OUT NUMBER
12:39:08 273  );
12:39:08 274  
12:39:08 275  /***********************************************************/
12:39:08 276  
12:39:08 277  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
12:39:08 278  	in_license_id		     IN NUMBER,
12:39:08 279  	in_offer_chain_current_index IN NUMBER,
12:39:08 280  	out_next_offer_index	     OUT NUMBER
12:39:08 281  );
12:39:08 282  
12:39:08 283  /**********************************************************/
12:39:08 284  
12:39:08 285  PROCEDURE GET_SUBSCRIPTION_INFO (
12:39:08 286  /*
12:39:08 287  Throws exceptions:
12:39:08 288  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 289  */
12:39:08 290  	  in_subscription_id IN  NUMBER,
12:39:08 291  	  out_result_set      OUT SYS_REFCURSOR
12:39:08 292  );
12:39:08 293  
12:39:08 294  /***********************************************************/
12:39:08 295  
12:39:08 296  PROCEDURE CLOSE_SUBSCRIPTION (
12:39:08 297  	in_subscription_id IN NUMBER,
12:39:08 298  	in_updated_by	   IN VARCHAR2
12:39:08 299  );
12:39:08 300  
12:39:08 301  /***********************************************************/
12:39:08 302  
12:39:08 303  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
12:39:08 304  	out_result_set OUT SYS_REFCURSOR
12:39:08 305  );
12:39:08 306  
12:39:08 307  /***********************************************************/
12:39:08 308  
12:39:08 309  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
12:39:08 310  	in_license_id	      IN NUMBER,
12:39:08 311  	in_needs_entitlements IN NUMBER,
12:39:08 312  	in_updated_by	      IN VARCHAR2
12:39:08 313  );
12:39:08 314  /***********************************************************/
12:39:08 315  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
12:39:08 316  	in_offer_id    IN NUMBER,
12:39:08 317  	out_result_set OUT SYS_REFCURSOR
12:39:08 318  );
12:39:08 319  /***********************************************************/
12:39:08 320  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
12:39:08 321  	in_product_offering_id IN NUMBER,
12:39:08 322  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
12:39:08 323  	out_result_set	       OUT SYS_REFCURSOR
12:39:08 324  );
12:39:08 325  
12:39:08 326  PROCEDURE LOCK_ACCOUNT (
12:39:08 327  	in_group_id    IN NUMBER,
12:39:08 328  	in_lock_key    IN VARCHAR2,
12:39:08 329  	in_seconds_num IN NUMBER,
12:39:08 330  	in_created_by  IN VARCHAR2,
12:39:08 331  	in_reason      IN VARCHAR2
12:39:08 332  );
12:39:08 333  
12:39:08 334  PROCEDURE RELEASE_LOCK (
12:39:08 335  	in_group_id IN NUMBER,
12:39:08 336  	in_lock_key IN VARCHAR2
12:39:08 337  );
12:39:08 338  
12:39:08 339  PROCEDURE GET_INVOICE_LINE_ITEMS (
12:39:08 340  	in_invoice_id  IN NUMBER,
12:39:08 341  	out_result_set OUT SYS_REFCURSOR
12:39:08 342  );
12:39:08 343  
12:39:08 344  PROCEDURE ADD_TAX (
12:39:08 345  	in_tax_type_id		 IN NUMBER,
12:39:08 346  	in_calculated_amount	 IN NUMBER,
12:39:08 347  	in_created_by		 IN VARCHAR2,
12:39:08 348  	in_line_item_id 	 IN NUMBER,
12:39:08 349  	in_effective_rate	 IN VARCHAR2,
12:39:08 350  	in_taxable_amount	 IN NUMBER,
12:39:08 351  	in_tax_rule_id		 IN NUMBER,
12:39:08 352  	in_jurisdiction_level_id IN NUMBER,
12:39:08 353  	in_jurisdiction_name	 IN VARCHAR2,
12:39:08 354  	in_jurisdiction_id	 IN VARCHAR2,
12:39:08 355  	in_ext_tax_type 	 IN VARCHAR2,
12:39:08 356  	in_ext_result		 IN VARCHAR2,
12:39:08 357  	in_imposition_type	 IN VARCHAR2,
12:39:08 358  	in_imposition		 IN VARCHAR2
12:39:08 359  );
12:39:08 360  
12:39:08 361  PROCEDURE GET_CREDIT_CARD_BY_ID (
12:39:08 362  	in_credit_card_id IN  NUMBER,
12:39:08 363  	out_result_set	  OUT SYS_REFCURSOR
12:39:08 364  );
12:39:08 365  
12:39:08 366  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
12:39:08 367  	in_line_item_id IN NUMBER,
12:39:08 368  	out_result_set	OUT SYS_REFCURSOR
12:39:08 369  );
12:39:08 370  
12:39:08 371  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
12:39:08 372  /*
12:39:08 373  Throws exceptions:
12:39:08 374  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:08 375  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 376  */
12:39:08 377  	in_group_id IN NUMBER,
12:39:08 378  	out_account_id	OUT NUMBER
12:39:08 379  );
12:39:08 380  
12:39:08 381  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
12:39:08 382  /*
12:39:08 383  Throws exceptions:
12:39:08 384  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 385  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 386  */
12:39:08 387  	in_line_item_id IN  NUMBER,
12:39:08 388  	out_result_set	OUT SYS_REFCURSOR
12:39:08 389  );
12:39:08 390  
12:39:08 391  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
12:39:08 392  	in_line_item_id    IN NUMBER,
12:39:08 393  	in_amount	   IN NUMBER,
12:39:08 394  	in_discount_amount IN NUMBER,
12:39:08 395  	in_taxes_amount    IN NUMBER
12:39:08 396  );
12:39:08 397  
12:39:08 398  PROCEDURE GET_PAYPAL_BY_ID (
12:39:08 399  	in_paypal_id   IN  NUMBER,
12:39:08 400  	out_result_set OUT SYS_REFCURSOR
12:39:08 401  );
12:39:08 402  
12:39:08 403  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
12:39:08 404  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:08 405  	out_result_set OUT SYS_REFCURSOR
12:39:08 406  );
12:39:08 407  
12:39:08 408  PROCEDURE GET_LICENSE_BY_ID (
12:39:08 409  	in_license_id  IN NUMBER,
12:39:08 410  	out_result_set OUT SYS_REFCURSOR
12:39:08 411  );
12:39:08 412  
12:39:08 413  PROCEDURE GET_NOTIFICATION_TYPE_ID (
12:39:08 414  	in_offer_chain_id	 IN NUMBER,
12:39:08 415  	in_action_name		 IN VARCHAR2,
12:39:08 416  	out_notification_type_id OUT NUMBER
12:39:08 417  );
12:39:08 418  
12:39:08 419  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
12:39:08 420  	in_offer_chain_id IN NUMBER,
12:39:08 421  	in_meta_data_name IN VARCHAR2,
12:39:08 422  	out_value	  OUT VARCHAR2
12:39:08 423  );
12:39:08 424  
12:39:08 425  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
12:39:08 426  	out_result_set	    OUT SYS_REFCURSOR
12:39:08 427  );
12:39:08 428  
12:39:08 429  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
12:39:08 430  	out_result_set	    OUT SYS_REFCURSOR
12:39:08 431  );
12:39:08 432  
12:39:08 433  END PUBLIC_PROCS_RENEWAL_V16;
12:39:08 434  .
12:39:08 SQL> /

Package created.

Elapsed: 00:00:00.06
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_ACCOUNT (
12:39:08   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
12:39:08   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
12:39:08   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
12:39:08   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
12:39:08   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
12:39:08   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
12:39:08  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
12:39:08  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
12:39:08  12  ) AS
12:39:08  13  -- VARIABLES
12:39:08  14  var_new_account_id ACCOUNT.ID%TYPE;
12:39:08  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08  16  var_date DATE := SYSDATE;
12:39:08  17  BEGIN
12:39:08  18  	SELECT
12:39:08  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
12:39:08  20  	FROM DUAL;
12:39:08  21  	INSERT INTO ACCOUNT (
12:39:08  22  	  ID,
12:39:08  23  	  ACCOUNT_STATUS_ID,
12:39:08  24  	  SUSPEND_DATE,
12:39:08  25  	  GROUP_ID,
12:39:08  26  	  CREATE_DATE,
12:39:08  27  	  CREATED_BY,
12:39:08  28  	  UPDATE_DATE,
12:39:08  29  	  UPDATED_BY,
12:39:08  30  	  SYSTEM_CATEGORY_ID,
12:39:08  31  	  INSTRUMENT_TYPE_ID,
12:39:08  32  	  INSTRUMENT_ID,
12:39:08  33  	  TAX_EXEMPT_ID
12:39:08  34  	) VALUES (
12:39:08  35  	  var_new_account_id,
12:39:08  36  	  in_account_status_id,
12:39:08  37  	  in_suspend_date,
12:39:08  38  	  in_group_id,
12:39:08  39  	  var_date,
12:39:08  40  	  in_created_by,
12:39:08  41  	  var_date,
12:39:08  42  	  in_created_by,
12:39:08  43  	  in_system_category_id,
12:39:08  44  	  in_instrument_type_id,
12:39:08  45  	  in_instrument_id,
12:39:08  46  	  NULL
12:39:08  47  	);
12:39:08  48  
12:39:08  49  	out_account_id := var_new_account_id;
12:39:08  50  END CREATE_ACCOUNT;
12:39:08  51  
12:39:08  52  /*************************************************************/
12:39:08  53  
12:39:08  54  PROCEDURE UPDATE_ACCOUNT (
12:39:08  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
12:39:08  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
12:39:08  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
12:39:08  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
12:39:08  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
12:39:08  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
12:39:08  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
12:39:08  62  ) AS
12:39:08  63  BEGIN
12:39:08  64  
12:39:08  65  	-- CREATE HISTORY
12:39:08  66  	PROCS_HISTORY_V16.CREATE_ACCOUNT_HISTORY(
12:39:08  67  	  in_account_id 	       => in_account_id,
12:39:08  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08  69  	);
12:39:08  70  
12:39:08  71  	UPDATE ACCOUNT SET
12:39:08  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
12:39:08  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
12:39:08  74  	  UPDATED_BY	     = in_updated_by,
12:39:08  75  	  UPDATE_DATE	     = SYSDATE,
12:39:08  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
12:39:08  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
12:39:08  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
12:39:08  79  	WHERE
12:39:08  80  	  ACCOUNT.ID = in_account_id;
12:39:08  81  
12:39:08  82  END UPDATE_ACCOUNT;
12:39:08  83  
12:39:08  84  /*************************************************************/
12:39:08  85  
12:39:08  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
12:39:08  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
12:39:08  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
12:39:08  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
12:39:08  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
12:39:08  91  ) AS
12:39:08  92  BEGIN
12:39:08  93  
12:39:08  94  	-- CREATE HISTORY
12:39:08  95  	PROCS_HISTORY_V16.CREATE_ACCOUNT_HISTORY(
12:39:08  96  	  in_account_id 	       => in_account_id,
12:39:08  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08  98  	);
12:39:08  99  
12:39:08 100  	UPDATE ACCOUNT SET
12:39:08 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
12:39:08 102  	  INSTRUMENT_ID      = in_instrument_id
12:39:08 103  	WHERE
12:39:08 104  	  ACCOUNT.ID = in_account_id;
12:39:08 105  
12:39:08 106  END;
12:39:08 107  
12:39:08 108  /*************************************************************/
12:39:08 109  
12:39:08 110  PROCEDURE READ_ACCOUNT (
12:39:08 111  	in_account_id  IN ACCOUNT.ID%TYPE,
12:39:08 112  	out_result_set OUT SYS_REFCURSOR
12:39:08 113  ) AS
12:39:08 114  BEGIN
12:39:08 115  	OPEN out_result_set FOR
12:39:08 116  	SELECT
12:39:08 117  	  ACCOUNT_STATUS_ID,
12:39:08 118  	  SUSPEND_DATE,
12:39:08 119  	  GROUP_ID
12:39:08 120  	FROM
12:39:08 121  	  ACCOUNT
12:39:08 122  	WHERE
12:39:08 123  	  ID = in_account_id;
12:39:08 124  END READ_ACCOUNT;
12:39:08 125  
12:39:08 126  /*************************************************************/
12:39:08 127  
12:39:08 128  PROCEDURE CREATE_ACCOUNT_NOTE (
12:39:08 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
12:39:08 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
12:39:08 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
12:39:08 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
12:39:08 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
12:39:08 134  ) AS
12:39:08 135  BEGIN
12:39:08 136  	IF inout_account_note_id IS NULL THEN
12:39:08 137  	  SELECT
12:39:08 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
12:39:08 139  	  FROM DUAL;
12:39:08 140  	END IF;
12:39:08 141  	INSERT INTO ACCOUNT_NOTE(
12:39:08 142  	  ID,
12:39:08 143  	  AGENT_ID,
12:39:08 144  	  ACCOUNT_ID,
12:39:08 145  	  NOTE,
12:39:08 146  	  CREATE_DATE,
12:39:08 147  	  CREATED_BY
12:39:08 148  	) VALUES (
12:39:08 149  	  inout_account_note_id,
12:39:08 150  	  in_agent_id,
12:39:08 151  	  in_account_id,
12:39:08 152  	  in_note,
12:39:08 153  	  SYSDATE,
12:39:08 154  	  in_created_by
12:39:08 155  	);
12:39:08 156  END CREATE_ACCOUNT_NOTE;
12:39:08 157  
12:39:08 158  END PROCS_ACCOUNT_CRU_V16;
12:39:08 159  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.05
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_ADDRESS(
12:39:08   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
12:39:08   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
12:39:08   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
12:39:08   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
12:39:08   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
12:39:08   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
12:39:08  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:08  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
12:39:08  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
12:39:08  13  ) AS
12:39:08  14  -- VARIABLES
12:39:08  15  var_address_id ADDRESS.ID%TYPE;
12:39:08  16  var_date DATE := SYSDATE;
12:39:08  17  BEGIN
12:39:08  18  	IF in_address_id IS NULL THEN
12:39:08  19  	  SELECT
12:39:08  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
12:39:08  21  	  FROM DUAL;
12:39:08  22  	ELSE
12:39:08  23  	  var_address_id := in_address_id;
12:39:08  24  	END IF;
12:39:08  25  	INSERT INTO
12:39:08  26  	  ADDRESS (
12:39:08  27  	    ID,
12:39:08  28  	    ADDRESS1,
12:39:08  29  	    ADDRESS2,
12:39:08  30  	    CITY,
12:39:08  31  	    STATE,
12:39:08  32  	    POSTAL_CODE,
12:39:08  33  	    COUNTRY,
12:39:08  34  	    CREATE_DATE,
12:39:08  35  	    CREATED_BY,
12:39:08  36  	    UPDATE_DATE,
12:39:08  37  	    UPDATED_BY
12:39:08  38  	  ) VALUES (
12:39:08  39  	    var_address_id,
12:39:08  40  	    in_address1,
12:39:08  41  	    in_address2,
12:39:08  42  	    in_city,
12:39:08  43  	    in_state,
12:39:08  44  	    in_postal_code,
12:39:08  45  	    in_country,
12:39:08  46  	    var_date,
12:39:08  47  	    in_created_by,
12:39:08  48  	    var_date,
12:39:08  49  	    in_created_by
12:39:08  50  	  );
12:39:08  51  
12:39:08  52  	out_address_id := var_address_id;
12:39:08  53  END CREATE_ADDRESS;
12:39:08  54  
12:39:08  55  PROCEDURE UPDATE_ADDRESS(
12:39:08  56  	in_address_id	      IN ADDRESS.ID%TYPE,
12:39:08  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
12:39:08  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
12:39:08  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
12:39:08  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
12:39:08  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:08  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
12:39:08  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
12:39:08  64  ) AS
12:39:08  65  BEGIN
12:39:08  66  
12:39:08  67  	-- Create history
12:39:08  68  	PROCS_HISTORY_V16.CREATE_ADDRESS_HISTORY(
12:39:08  69  	  in_address_id 		=> in_address_id,
12:39:08  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08  71  	);
12:39:08  72  
12:39:08  73  	UPDATE
12:39:08  74  	  ADDRESS
12:39:08  75  	SET
12:39:08  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
12:39:08  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
12:39:08  78  	  CITY = NVL(in_city, CITY),
12:39:08  79  	  STATE = NVL(in_state, STATE),
12:39:08  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
12:39:08  81  	  COUNTRY = NVL(in_country, COUNTRY),
12:39:08  82  	  UPDATE_DATE = SYSDATE,
12:39:08  83  	  UPDATED_BY = in_updated_by
12:39:08  84  	WHERE
12:39:08  85  	  ID = in_address_id;
12:39:08  86  
12:39:08  87  END UPDATE_ADDRESS;
12:39:08  88  
12:39:08  89  END PROCS_ADDRESS_CRU_V16;
12:39:08  90  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.03
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_AMAZON_SUB(
12:39:08   4  /*
12:39:08   5  Throws exceptions:
12:39:08   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08   7  */
12:39:08   8  	  out_id	      OUT NUMBER,
12:39:08   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
12:39:08  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
12:39:08  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
12:39:08  12  ) AS
12:39:08  13  -- VARIABLES
12:39:08  14  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
12:39:08  15  var_current_date	DATE;
12:39:08  16  var_count 	NUMBER;
12:39:08  17  AMAZON_SUB_USED	EXCEPTION;
12:39:08  18  BEGIN
12:39:08  19  
12:39:08  20  	SELECT COUNT(1) INTO var_count
12:39:08  21  	FROM SUBSCRIPTION s, AMAZON_SUB am
12:39:08  22  	WHERE
12:39:08  23  	  am.AMAZON_ID = in_amazon_id
12:39:08  24  	  and am.subscription_id = s.id
12:39:08  25  	  and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
12:39:08  26  
12:39:08  27  	if var_count > 0 then
12:39:08  28  	  raise AMAZON_SUB_USED;
12:39:08  29  	end if;
12:39:08  30  
12:39:08  31  	SELECT
12:39:08  32  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
12:39:08  33  	INTO
12:39:08  34  	  out_id
12:39:08  35  	FROM
12:39:08  36  	  dual
12:39:08  37  	;
12:39:08  38  
12:39:08  39  	SELECT
12:39:08  40  	  sysdate
12:39:08  41  	INTO
12:39:08  42  	  var_current_date
12:39:08  43  	FROM
12:39:08  44  	  dual
12:39:08  45  	;
12:39:08  46  
12:39:08  47  	INSERT INTO CORE_OWNER.AMAZON_SUB
12:39:08  48  	(
12:39:08  49  	  id,
12:39:08  50  	  subscription_id,
12:39:08  51  	  amazon_id,
12:39:08  52  	  create_date,
12:39:08  53  	  created_by,
12:39:08  54  	  update_date,
12:39:08  55  	  updated_by
12:39:08  56  	)
12:39:08  57  	VALUES
12:39:08  58  	(
12:39:08  59  	  out_id,
12:39:08  60  	  in_subscription_id,
12:39:08  61  	  in_amazon_id,
12:39:08  62  	  var_current_date,
12:39:08  63  	  in_created_by,
12:39:08  64  	  var_current_date,
12:39:08  65  	  in_created_by
12:39:08  66  	);
12:39:08  67  
12:39:08  68  EXCEPTION
12:39:08  69  WHEN AMAZON_SUB_USED THEN
12:39:08  70  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:08  71  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
12:39:08  72  WHEN DUP_VAL_ON_INDEX THEN
12:39:08  73  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:08  74  	  SPROC_NAME, 'Duplicate value', SQLERRM);
12:39:08  75  WHEN OTHERS THEN
12:39:08  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08  78  END CREATE_AMAZON_SUB;
12:39:08  79  
12:39:08  80  END PROCS_AMAZON_CRU_V16;
12:39:08  81  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.02
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_CHARGE(
12:39:08   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
12:39:08   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
12:39:08   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
12:39:08   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
12:39:08   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
12:39:08   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
12:39:08  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
12:39:08  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
12:39:08  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
12:39:08  13  ) AS
12:39:08  14  -- VARIABLES
12:39:08  15  var_charge_id CHARGE.ID%TYPE;
12:39:08  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08  17  var_date DATE := SYSDATE;
12:39:08  18  BEGIN
12:39:08  19  	IF in_charge_id IS NULL THEN
12:39:08  20  	  SELECT
12:39:08  21  	    CRG_ID_SEQ.nextVal into var_charge_id
12:39:08  22  	  FROM DUAL;
12:39:08  23  	ELSE
12:39:08  24  	  var_charge_id := in_charge_id;
12:39:08  25  	END IF;
12:39:08  26  	INSERT INTO
12:39:08  27  	  CHARGE (
12:39:08  28  	    ID,
12:39:08  29  	    INVOICE_ID,
12:39:08  30  	    TRANSACTION_ID,
12:39:08  31  	    INSTRUMENT_TYPE_ID,
12:39:08  32  	    INSTRUMENT_ID,
12:39:08  33  	    CHARGE_AMOUNT,
12:39:08  34  	    CHARGE_STATUS_ID,
12:39:08  35  	    CREATE_DATE,
12:39:08  36  	    CREATED_BY,
12:39:08  37  	    UPDATE_DATE,
12:39:08  38  	    UPDATED_BY
12:39:08  39  	  ) VALUES (
12:39:08  40  	    var_charge_id,
12:39:08  41  	    in_invoice_id,
12:39:08  42  	    in_transaction_id,
12:39:08  43  	    in_instrument_type_id,
12:39:08  44  	    in_instrument_id,
12:39:08  45  	    in_charge_amount,
12:39:08  46  	    in_charge_status_id,
12:39:08  47  	    var_date,
12:39:08  48  	    in_created_by,
12:39:08  49  	    var_date,
12:39:08  50  	    in_created_by
12:39:08  51  	  );
12:39:08  52  
12:39:08  53  	out_charge_id := var_charge_id;
12:39:08  54  END CREATE_CHARGE;
12:39:08  55  
12:39:08  56  PROCEDURE UPDATE_CHARGE(
12:39:08  57  	in_charge_id	      IN CHARGE.ID%TYPE,
12:39:08  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
12:39:08  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
12:39:08  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
12:39:08  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
12:39:08  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
12:39:08  63  ) AS
12:39:08  64  BEGIN
12:39:08  65  
12:39:08  66  	-- Create history
12:39:08  67  	PROCS_HISTORY_V16.CREATE_CHARGE_HISTORY(
12:39:08  68  	  in_charge_id		       => in_charge_id,
12:39:08  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08  70  	);
12:39:08  71  
12:39:08  72  	UPDATE
12:39:08  73  	  CHARGE
12:39:08  74  	SET
12:39:08  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
12:39:08  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
12:39:08  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
12:39:08  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
12:39:08  79  	  UPDATE_DATE	     = SYSDATE,
12:39:08  80  	  UPDATED_BY	     = in_updated_by
12:39:08  81  	WHERE
12:39:08  82  	  ID = in_charge_id;
12:39:08  83  
12:39:08  84  END UPDATE_CHARGE;
12:39:08  85  
12:39:08  86  END PROCS_CHARGE_CRU_V16;
12:39:08  87  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.03
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_CREDIT_CARD(
12:39:08   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
12:39:08   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
12:39:08   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
12:39:08   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
12:39:08   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
12:39:08   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
12:39:08  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
12:39:08  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
12:39:08  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
12:39:08  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
12:39:08  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
12:39:08  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
12:39:08  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
12:39:08  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
12:39:08  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
12:39:08  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
12:39:08  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
12:39:08  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
12:39:08  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
12:39:08  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
12:39:08  24  ) AS
12:39:08  25  -- VARIABLES
12:39:08  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
12:39:08  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08  28  var_date DATE := SYSDATE;
12:39:08  29  BEGIN
12:39:08  30  	IF in_credit_card_id IS NULL THEN
12:39:08  31  	  SELECT
12:39:08  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
12:39:08  33  	  FROM DUAL;
12:39:08  34  	ELSE
12:39:08  35  	  var_credit_card_id := in_credit_card_id;
12:39:08  36  	END IF;
12:39:08  37  	INSERT INTO CREDIT_CARD(
12:39:08  38  	    ID,
12:39:08  39  	    ACCOUNT_ID,
12:39:08  40  	    INSTRUMENT_NAME,
12:39:08  41  	    PRIVATE_CARD_HOLDER_NAME,
12:39:08  42  	    PRIVATE_STREET_ADDRESS,
12:39:08  43  	    PRIVATE_STREET_ADDRESS2,
12:39:08  44  	    STATE,
12:39:08  45  	    CITY,
12:39:08  46  	    POSTAL_CODE,
12:39:08  47  	    COUNTRY,
12:39:08  48  	    LAST_FOUR_CC,
12:39:08  49  	    EXPIRATION_DATE,
12:39:08  50  	    CREDIT_CARD_TYPE_ID,
12:39:08  51  	    SECRET_TOKEN,
12:39:08  52  	    CHASE_PROFILE_ID,
12:39:08  53  	    CREATE_DATE,
12:39:08  54  	    CREATED_BY,
12:39:08  55  	    UPDATE_DATE,
12:39:08  56  	    UPDATED_BY,
12:39:08  57  	    CREDIT_CARD_STATUS_ID,
12:39:08  58  	    PRIVATE_FIRST_NAME,
12:39:08  59  	    PRIVATE_LAST_NAME
12:39:08  60  	  ) VALUES (
12:39:08  61  	    var_credit_card_id,
12:39:08  62  	    in_account_id,
12:39:08  63  	    in_instrument_name,
12:39:08  64  	    in_private_card_holder_name,
12:39:08  65  	    in_private_street_address,
12:39:08  66  	    in_private_street_address2,
12:39:08  67  	    in_state,
12:39:08  68  	    in_city,
12:39:08  69  	    in_postal_code,
12:39:08  70  	    in_country,
12:39:08  71  	    in_last_four_cc,
12:39:08  72  	    in_expiration_date,
12:39:08  73  	    in_credit_card_type_id,
12:39:08  74  	    in_secret_token,
12:39:08  75  	    in_chase_profile_id,
12:39:08  76  	    var_date,
12:39:08  77  	    in_created_by,
12:39:08  78  	    var_date,
12:39:08  79  	    in_created_by,
12:39:08  80  	    in_credit_card_status_id,
12:39:08  81  	    in_private_first_name,
12:39:08  82  	    in_private_last_name
12:39:08  83  	  );
12:39:08  84  
12:39:08  85  	out_credit_card_id := var_credit_card_id;
12:39:08  86  END CREATE_CREDIT_CARD;
12:39:08  87  
12:39:08  88  /******************************************************************************/
12:39:08  89  
12:39:08  90  PROCEDURE UPDATE_CREDIT_CARD(
12:39:08  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
12:39:08  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
12:39:08  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
12:39:08  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
12:39:08  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
12:39:08  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
12:39:08  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
12:39:08  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:08  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
12:39:08 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
12:39:08 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
12:39:08 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
12:39:08 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
12:39:08 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
12:39:08 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
12:39:08 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
12:39:08 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
12:39:08 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
12:39:08 109  ) AS
12:39:08 110  BEGIN
12:39:08 111  
12:39:08 112  	-- Create history
12:39:08 113  	PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
12:39:08 114  	  in_credit_card_id	       => in_credit_card_id,
12:39:08 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08 116  	);
12:39:08 117  
12:39:08 118  	UPDATE CREDIT_CARD SET
12:39:08 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
12:39:08 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
12:39:08 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
12:39:08 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
12:39:08 123  	  STATE 		   = NVL(in_state, STATE),
12:39:08 124  	  CITY			   = NVL(in_city, CITY),
12:39:08 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
12:39:08 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
12:39:08 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
12:39:08 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
12:39:08 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
12:39:08 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
12:39:08 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
12:39:08 132  	  UPDATE_DATE		   = SYSDATE,
12:39:08 133  	  UPDATED_BY		   = in_updated_by,
12:39:08 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
12:39:08 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
12:39:08 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
12:39:08 137  	WHERE
12:39:08 138  	  ID = in_credit_card_id;
12:39:08 139  
12:39:08 140  END UPDATE_CREDIT_CARD;
12:39:08 141  
12:39:08 142  /******************************************************************************/
12:39:08 143  
12:39:08 144  PROCEDURE CREATE_PAYPAL(
12:39:08 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
12:39:08 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
12:39:08 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
12:39:08 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
12:39:08 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
12:39:08 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
12:39:08 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
12:39:08 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
12:39:08 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
12:39:08 154  	in_state			IN PAYPAL.STATE%TYPE,
12:39:08 155  	in_city 			IN PAYPAL.CITY%TYPE,
12:39:08 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
12:39:08 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
12:39:08 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
12:39:08 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
12:39:08 160  ) AS
12:39:08 161  -- VARIABLES
12:39:08 162  var_paypal_id PAYPAL.ID%TYPE;
12:39:08 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08 164  var_date DATE := SYSDATE;
12:39:08 165  BEGIN
12:39:08 166  	IF in_paypal_id IS NULL THEN
12:39:08 167  	  SELECT
12:39:08 168  	    PP_ID_SEQ.nextVal into var_paypal_id
12:39:08 169  	  FROM DUAL;
12:39:08 170  	ELSE
12:39:08 171  	  var_paypal_id := in_paypal_id;
12:39:08 172  	END IF;
12:39:08 173  	INSERT INTO PAYPAL(
12:39:08 174  	    ID,
12:39:08 175  	    ACCOUNT_ID,
12:39:08 176  	    INSTRUMENT_NAME,
12:39:08 177  	    PRIVATE_EMAIL_ADDRESS,
12:39:08 178  	    CREATE_DATE,
12:39:08 179  	    CREATED_BY,
12:39:08 180  	    UPDATE_DATE,
12:39:08 181  	    UPDATED_BY,
12:39:08 182  	    PAYPAL_STATUS_ID,
12:39:08 183  	    PRIVATE_STREET_ADDRESS,
12:39:08 184  	    PRIVATE_STREET_ADDRESS2,
12:39:08 185  	    STATE,
12:39:08 186  	    CITY,
12:39:08 187  	    POSTAL_CODE,
12:39:08 188  	    COUNTRY,
12:39:08 189  	    EXPIRATION_DATE,
12:39:08 190  	    SECRET_TOKEN
12:39:08 191  	  ) VALUES (
12:39:08 192  	    var_paypal_id,
12:39:08 193  	    in_account_id,
12:39:08 194  	    in_instrument_name,
12:39:08 195  	    in_private_email_address,
12:39:08 196  	    var_date,
12:39:08 197  	    in_created_by,
12:39:08 198  	    var_date,
12:39:08 199  	    in_created_by,
12:39:08 200  	    in_paypal_status_id,
12:39:08 201  	    in_paypal_prvt_street_address,
12:39:08 202  	    in_paypal_prvt_street_address2,
12:39:08 203  	    in_state,
12:39:08 204  	    in_city,
12:39:08 205  	    in_postal_code,
12:39:08 206  	    in_country,
12:39:08 207  	    in_expiration_date,
12:39:08 208  	    in_secret_token
12:39:08 209  	  );
12:39:08 210  	out_paypal_id := var_paypal_id;
12:39:08 211  END CREATE_PAYPAL;
12:39:08 212  
12:39:08 213  /******************************************************************************/
12:39:08 214  
12:39:08 215  PROCEDURE UPDATE_PAYPAL(
12:39:08 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
12:39:08 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
12:39:08 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
12:39:08 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
12:39:08 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
12:39:08 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
12:39:08 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
12:39:08 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
12:39:08 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
12:39:08 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:08 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
12:39:08 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
12:39:08 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
12:39:08 229  ) AS
12:39:08 230  BEGIN
12:39:08 231  	-- Create history
12:39:08 232  	PROCS_HISTORY_V16.CREATE_PAYPAL_HISTORY(
12:39:08 233  	  in_paypal_id		       => in_paypal_id,
12:39:08 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08 235  	);
12:39:08 236  
12:39:08 237  	UPDATE PAYPAL SET
12:39:08 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
12:39:08 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
12:39:08 240  	  UPDATE_DATE	   = SYSDATE,
12:39:08 241  	  UPDATED_BY	   = in_updated_by,
12:39:08 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
12:39:08 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
12:39:08 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
12:39:08 245  	  STATE 		  = NVL(in_state, STATE),
12:39:08 246  	  CITY			  = NVL(in_city, CITY),
12:39:08 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
12:39:08 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
12:39:08 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
12:39:08 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
12:39:08 251  	WHERE
12:39:08 252  	  ID = in_paypal_id;
12:39:08 253  END UPDATE_PAYPAL;
12:39:08 254  
12:39:08 255  /******************************************************************************/
12:39:08 256  
12:39:08 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
12:39:08 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
12:39:08 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
12:39:08 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
12:39:08 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:08 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
12:39:08 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
12:39:08 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
12:39:08 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
12:39:08 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
12:39:08 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
12:39:08 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
12:39:08 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
12:39:08 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
12:39:08 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
12:39:08 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
12:39:08 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
12:39:08 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
12:39:08 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
12:39:08 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
12:39:08 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
12:39:08 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
12:39:08 279  ) AS
12:39:08 280  -- VARIABLES
12:39:08 281  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
12:39:08 282  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08 283  var_date DATE := SYSDATE;
12:39:08 284  BEGIN
12:39:08 285  	IF in_gift_certificate_id IS NULL THEN
12:39:08 286  	  SELECT
12:39:08 287  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
12:39:08 288  	  FROM DUAL;
12:39:08 289  	ELSE
12:39:08 290  	  var_gift_certificate_id := in_gift_certificate_id;
12:39:08 291  	END IF;
12:39:08 292  	INSERT INTO GIFT_CERTIFICATE (
12:39:08 293  	    ID,
12:39:08 294  	    PURCHASER_GROUP_ID,
12:39:08 295  	    PURCHASE_INVOICE_ID,
12:39:08 296  	    OFFER_CHAIN_ID,
12:39:08 297  	    EXPIRATION_DATE,
12:39:08 298  	    PURCHASE_DATE,
12:39:08 299  	    GIFT_CERTIFICATE_STATUS_ID,
12:39:08 300  	    CODE,
12:39:08 301  	    CREATE_DATE,
12:39:08 302  	    CREATED_BY,
12:39:08 303  	    UPDATE_DATE,
12:39:08 304  	    UPDATED_BY,
12:39:08 305  	    RECIPIENT_NAME,
12:39:08 306  	    GIFT_MESSAGE,
12:39:08 307  	    RECIPIENT_EMAIL,
12:39:08 308  	    FINALIZED_INVOICE_ID,
12:39:08 309  	    SENDER_EMAIL,
12:39:08 310  	    SENDER_NAME,
12:39:08 311  	    REDEMPTION_DATE,
12:39:08 312  	    CANCELATION_DATE,
12:39:08 313  	    REDEEMER_GROUP_ID,
12:39:08 314  	    RECIPIENT_ADDRESS_ID,
12:39:08 315  	    RECIPIENT_NOTIFY_DATE
12:39:08 316  	  ) VALUES(
12:39:08 317  	    var_gift_certificate_id,
12:39:08 318  	    in_purchaser_group_id,
12:39:08 319  	    in_purchaser_invoice_id,
12:39:08 320  	    in_offer_chain_id,
12:39:08 321  	    in_expiration_date,
12:39:08 322  	    in_purchase_date,
12:39:08 323  	    in_gift_certificate_status_id,
12:39:08 324  	    in_code,
12:39:08 325  	    var_date,
12:39:08 326  	    in_created_by,
12:39:08 327  	    var_date,
12:39:08 328  	    in_created_by,
12:39:08 329  	    in_recipient_name,
12:39:08 330  	    in_gift_message,
12:39:08 331  	    in_recipient_email,
12:39:08 332  	    in_finalized_invoice_id,
12:39:08 333  	    in_sender_email,
12:39:08 334  	    in_sender_name,
12:39:08 335  	    in_redemption_date,
12:39:08 336  	    in_cancelation_date,
12:39:08 337  	    in_redeemer_group_id,
12:39:08 338  	    in_recipient_address_id,
12:39:08 339  	    in_recipient_notify_date
12:39:08 340  	  );
12:39:08 341  
12:39:08 342  	out_gift_certificate_id := var_gift_certificate_id;
12:39:08 343  END CREATE_GIFT_CERTIFICATE;
12:39:08 344  
12:39:08 345  /******************************************************************************/
12:39:08 346  
12:39:08 347  PROCEDURE UPDATE_GIFT_CERTIFICATE(
12:39:08 348  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
12:39:08 349  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
12:39:08 350  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
12:39:08 351  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
12:39:08 352  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
12:39:08 353  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
12:39:08 354  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
12:39:08 355  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
12:39:08 356  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
12:39:08 357  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
12:39:08 358  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
12:39:08 359  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
12:39:08 360  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
12:39:08 361  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
12:39:08 362  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
12:39:08 363  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
12:39:08 364  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
12:39:08 365  ) AS
12:39:08 366  BEGIN
12:39:08 367  
12:39:08 368  	-- Create history
12:39:08 369  	PROCS_HISTORY_V16.CREATE_GIFT_CERT_HISTORY(
12:39:08 370  	  in_gift_certificate_id       => in_gift_certificate_id,
12:39:08 371  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08 372  	);
12:39:08 373  
12:39:08 374  	UPDATE GIFT_CERTIFICATE SET
12:39:08 375  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
12:39:08 376  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
12:39:08 377  	  CODE			     = NVL(in_code, CODE),
12:39:08 378  	  UPDATE_DATE		     = SYSDATE,
12:39:08 379  	  UPDATED_BY		     = in_updated_by,
12:39:08 380  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
12:39:08 381  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
12:39:08 382  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
12:39:08 383  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
12:39:08 384  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
12:39:08 385  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
12:39:08 386  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
12:39:08 387  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
12:39:08 388  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
12:39:08 389  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
12:39:08 390  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
12:39:08 391  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
12:39:08 392  	WHERE
12:39:08 393  	  ID = in_gift_certificate_id;
12:39:08 394  
12:39:08 395  END UPDATE_GIFT_CERTIFICATE;
12:39:08 396  
12:39:08 397  END PROCS_FIN_INSTRUMENTS_CRU_V16;
12:39:08 398  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.05
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
12:39:08   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
12:39:08   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
12:39:08   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
12:39:08   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
12:39:08   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
12:39:08   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
12:39:08  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
12:39:08  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:08  12  ) AS
12:39:08  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
12:39:08  14  BEGIN
12:39:08  15  	UPDATE SUBSCRIPTION_SHARE SET
12:39:08  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
12:39:08  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
12:39:08  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
12:39:08  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
12:39:08  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
12:39:08  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
12:39:08  22  	  UPDATED_BY	       = in_updated_by,
12:39:08  23  	  UPDATE_DATE	       = SYSDATE
12:39:08  24  	WHERE
12:39:08  25  	  SUBSCRIPTION_SHARE.ID = in_id;
12:39:08  26  EXCEPTION
12:39:08  27  	WHEN OTHERS THEN
12:39:08  28  	  Procs_Common_V16.Throw_Exception(APP_EXCEPTION_CODES_V16.Internal_Error,
12:39:08  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
12:39:08  30  END UPDATE_SUBSCRIPTION_SHARE;
12:39:08  31  
12:39:08  32  PROCEDURE CREATE_GROUP_ACCOUNT (
12:39:08  33  	in_subscription_id	 IN NUMBER,
12:39:08  34  	in_group_name		 IN VARCHAR2,
12:39:08  35  	in_first_name		 IN VARCHAR2,
12:39:08  36  	in_last_name		 IN VARCHAR2,
12:39:08  37  	in_email		 IN VARCHAR2,
12:39:08  38  	in_phone		 IN VARCHAR2,
12:39:08  39  	in_organization_type	 IN VARCHAR2,
12:39:08  40  	in_seats		 IN NUMBER,
12:39:08  41  	in_seat_ttl_in_hours	 IN NUMBER,
12:39:08  42  	in_ip			 IN NUMBER,
12:39:08  43  	in_created_by		 IN VARCHAR2
12:39:08  44  ) AS
12:39:08  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
12:39:08  46  var_now DATE;
12:39:08  47  BEGIN
12:39:08  48  
12:39:08  49  	SELECT
12:39:08  50  	  SYSDATE INTO var_now
12:39:08  51  	FROM dual;
12:39:08  52  
12:39:08  53  	INSERT INTO GROUP_ACCOUNT (
12:39:08  54  	  id,
12:39:08  55  	  subscription_id,
12:39:08  56  	  group_name,
12:39:08  57  	  first_name,
12:39:08  58  	  last_name,
12:39:08  59  	  email,
12:39:08  60  	  phone,
12:39:08  61  	  organization_type,
12:39:08  62  	  seats,
12:39:08  63  	  seat_ttl_in_hours,
12:39:08  64  	  ip,
12:39:08  65  	  create_date,
12:39:08  66  	  created_by,
12:39:08  67  	  update_date,
12:39:08  68  	  updated_by
12:39:08  69  	) VALUES (
12:39:08  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
12:39:08  71  	  in_subscription_id,
12:39:08  72  	  in_group_name,
12:39:08  73  	  in_first_name,
12:39:08  74  	  in_last_name,
12:39:08  75  	  in_email,
12:39:08  76  	  in_phone,
12:39:08  77  	  in_organization_type,
12:39:08  78  	  in_seats,
12:39:08  79  	  in_seat_ttl_in_hours,
12:39:08  80  	  in_ip,
12:39:08  81  	  var_now,
12:39:08  82  	  in_created_by,
12:39:08  83  	  var_now,
12:39:08  84  	  in_created_by
12:39:08  85  	);
12:39:08  86  
12:39:08  87  EXCEPTION
12:39:08  88  	WHEN PROGRAM_ERROR THEN
12:39:08  89  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:08  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
12:39:08  91  	WHEN OTHERS THEN
12:39:08  92  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
12:39:08  94  END CREATE_GROUP_ACCOUNT;
12:39:08  95  
12:39:08  96  
12:39:08  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
12:39:08  98  	in_group_account_id    IN NUMBER,
12:39:08  99  	in_borrower_account_id IN NUMBER,
12:39:08 100  	in_ip_address	       IN VARCHAR2,
12:39:08 101  	in_email_domain        IN VARCHAR2,
12:39:08 102  	in_start_date	       IN DATE,
12:39:08 103  	in_end_date	       IN DATE,
12:39:08 104  	in_created_by	       IN VARCHAR2
12:39:08 105  ) AS
12:39:08 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
12:39:08 107  var_now DATE;
12:39:08 108  BEGIN
12:39:08 109  
12:39:08 110  	SELECT
12:39:08 111  	  SYSDATE INTO var_now
12:39:08 112  	FROM dual;
12:39:08 113  
12:39:08 114  	INSERT INTO SUBSCRIPTION_SHARE (
12:39:08 115  	  id,
12:39:08 116  	  group_account_id,
12:39:08 117  	  borrower_account_id,
12:39:08 118  	  ip_address,
12:39:08 119  	  email_domain,
12:39:08 120  	  start_date,
12:39:08 121  	  end_date,
12:39:08 122  	  create_date,
12:39:08 123  	  created_by,
12:39:08 124  	  update_date,
12:39:08 125  	  updated_by
12:39:08 126  	) VALUES (
12:39:08 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
12:39:08 128  	  in_group_account_id,
12:39:08 129  	  in_borrower_account_id,
12:39:08 130  	  in_ip_address,
12:39:08 131  	  in_email_domain,
12:39:08 132  	  in_start_date,
12:39:08 133  	  in_end_date,
12:39:08 134  	  var_now,
12:39:08 135  	  in_created_by,
12:39:08 136  	  var_now,
12:39:08 137  	  in_created_by
12:39:08 138  	);
12:39:08 139  
12:39:08 140  EXCEPTION
12:39:08 141  	WHEN PROGRAM_ERROR THEN
12:39:08 142  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:08 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
12:39:08 144  END CREATE_SUBSCRIPTION_SHARE;
12:39:08 145  
12:39:08 146  -- Eh, I don't like the cru packages at all
12:39:08 147  -- the idea of code reuse in PL/SQL is still lost on me
12:39:08 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
12:39:08 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:08 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
12:39:08 151  ) AS
12:39:08 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
12:39:08 153  BEGIN
12:39:08 154  	update
12:39:08 155  	  GROUP_ACCOUNT_IP_RANGE IR
12:39:08 156  	set
12:39:08 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_INACTIVE,
12:39:08 158  	  IR.UPDATED_BY = in_updated_by,
12:39:08 159  	  IR.UPDATE_DATE = sysdate
12:39:08 160  	where
12:39:08 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
12:39:08 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
12:39:08 163  	;
12:39:08 164  EXCEPTION
12:39:08 165  WHEN OTHERS THEN
12:39:08 166  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 168  END DISABLE_IP_RANGES_BY_GA_ID;
12:39:08 169  
12:39:08 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
12:39:08 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
12:39:08 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
12:39:08 173  ) AS
12:39:08 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
12:39:08 175  BEGIN
12:39:08 176  	update
12:39:08 177  	  GROUP_ACCOUNT_IP_RANGE IR
12:39:08 178  	set
12:39:08 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_INACTIVE,
12:39:08 180  	  IR.UPDATED_BY = in_updated_by,
12:39:08 181  	  IR.UPDATE_DATE = sysdate
12:39:08 182  	where
12:39:08 183  	  IR.ID = in_id and
12:39:08 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
12:39:08 185  	;
12:39:08 186  raise no_data_found;
12:39:08 187  EXCEPTION
12:39:08 188  WHEN OTHERS THEN
12:39:08 189  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 190  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
12:39:08 191  END DISABLE_IP_RANGE_BY_ID;
12:39:08 192  
12:39:08 193  PROCEDURE ADD_IP_RANGE (
12:39:08 194  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:08 195  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
12:39:08 196  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
12:39:08 197  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
12:39:08 198  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
12:39:08 199  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
12:39:08 200  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
12:39:08 201  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
12:39:08 202  ) AS
12:39:08 203  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
12:39:08 204  BEGIN
12:39:08 205  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
12:39:08 206  	    ID,
12:39:08 207  	    GROUP_ACCOUNT_ID,
12:39:08 208  	    MINIMUM_IP_STRING,
12:39:08 209  	    MINIMUM_IP_LOW,
12:39:08 210  	    MINIMUM_IP_HIGH,
12:39:08 211  	    MAXIMUM_IP_STRING,
12:39:08 212  	    MAXIMUM_IP_LOW,
12:39:08 213  	    MAXIMUM_IP_HIGH,
12:39:08 214  	    CREATED_BY,
12:39:08 215  	    CREATE_DATE,
12:39:08 216  	    UPDATED_BY,
12:39:08 217  	    UPDATE_DATE,
12:39:08 218  	    GROUP_ACC_IP_RNG_STATUS_ID
12:39:08 219  	  )
12:39:08 220  	  VALUES (
12:39:08 221  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
12:39:08 222  	    in_group_account_id,
12:39:08 223  	    in_minimum_ip_string,
12:39:08 224  	    in_minimum_ip_low,
12:39:08 225  	    in_minimum_ip_high,
12:39:08 226  	    in_maximum_ip_string,
12:39:08 227  	    in_maximum_ip_low,
12:39:08 228  	    in_maximum_ip_high,
12:39:08 229  	    in_created_by,
12:39:08 230  	    sysdate,
12:39:08 231  	    in_created_by,
12:39:08 232  	    sysdate,
12:39:08 233  	    GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
12:39:08 234  	  );
12:39:08 235  EXCEPTION
12:39:08 236  WHEN OTHERS THEN
12:39:08 237  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 239  END ADD_IP_RANGE;
12:39:08 240  
12:39:08 241  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
12:39:08 242  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:08 243  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:08 244  ) AS
12:39:08 245  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
12:39:08 246  BEGIN
12:39:08 247  	update
12:39:08 248  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
12:39:08 249  	set
12:39:08 250  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT,
12:39:08 251  	  ED.UPDATED_BY = in_updated_by,
12:39:08 252  	  ED.UPDATE_DATE = sysdate
12:39:08 253  	where
12:39:08 254  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
12:39:08 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT
12:39:08 256  	;
12:39:08 257  EXCEPTION
12:39:08 258  WHEN OTHERS THEN
12:39:08 259  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 260  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 261  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
12:39:08 262  
12:39:08 263  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
12:39:08 264  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
12:39:08 265  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:08 266  ) AS
12:39:08 267  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
12:39:08 268  BEGIN
12:39:08 269  	update
12:39:08 270  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
12:39:08 271  	set
12:39:08 272  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT,
12:39:08 273  	  ED.UPDATED_BY = in_updated_by,
12:39:08 274  	  ED.UPDATE_DATE = sysdate
12:39:08 275  	where
12:39:08 276  	  ED.ID = in_id and
12:39:08 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT
12:39:08 278  	;
12:39:08 279  EXCEPTION
12:39:08 280  WHEN OTHERS THEN
12:39:08 281  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 282  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
12:39:08 283  END DISABLE_EMAIL_DOMAIN_BY_ID;
12:39:08 284  
12:39:08 285  
12:39:08 286  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
12:39:08 287  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
12:39:08 288  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:08 289  ) AS
12:39:08 290  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
12:39:08 291  BEGIN
12:39:08 292  	update
12:39:08 293  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
12:39:08 294  	set
12:39:08 295  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT,
12:39:08 296  	  ED.UPDATED_BY = in_updated_by,
12:39:08 297  	  ED.UPDATE_DATE = sysdate
12:39:08 298  	where
12:39:08 299  	  ED.ID = in_id and
12:39:08 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT
12:39:08 301  	;
12:39:08 302  EXCEPTION
12:39:08 303  WHEN OTHERS THEN
12:39:08 304  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 305  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
12:39:08 306  END ENABLE_EMAIL_DOMAIN_BY_ID;
12:39:08 307  
12:39:08 308  
12:39:08 309  PROCEDURE ADD_EMAIL_DOMAIN (
12:39:08 310  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:08 311  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
12:39:08 312  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
12:39:08 313  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
12:39:08 314  ) AS
12:39:08 315  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
12:39:08 316  BEGIN
12:39:08 317  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
12:39:08 318  	    ID,
12:39:08 319  	    GROUP_ACCOUNT_ID,
12:39:08 320  	    EMAIL_DOMAIN,
12:39:08 321  		IS_ACTIVE,
12:39:08 322  	    CREATED_BY,
12:39:08 323  	    CREATE_DATE,
12:39:08 324  	    UPDATED_BY,
12:39:08 325  	    UPDATE_DATE
12:39:08 326  	  )
12:39:08 327  	  VALUES (
12:39:08 328  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
12:39:08 329  	    in_group_account_id,
12:39:08 330  		in_email_domain,
12:39:08 331  		in_is_active,
12:39:08 332  		in_created_by,
12:39:08 333  	    sysdate,
12:39:08 334  	    in_created_by,
12:39:08 335  	    sysdate
12:39:08 336  	  );
12:39:08 337  EXCEPTION
12:39:08 338  WHEN DUP_VAL_ON_INDEX THEN
12:39:08 339  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:08 340  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
12:39:08 341  WHEN OTHERS THEN
12:39:08 342  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 343  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
12:39:08 344  END ADD_EMAIL_DOMAIN;
12:39:08 345  
12:39:08 346  PROCEDURE UPDATE_GROUP_ACCOUNT (
12:39:08 347  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
12:39:08 348  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
12:39:08 349  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
12:39:08 350  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
12:39:08 351  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
12:39:08 352  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
12:39:08 353  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
12:39:08 354  ) AS
12:39:08 355  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
12:39:08 356  BEGIN
12:39:08 357  	update
12:39:08 358  	  group_account
12:39:08 359  	set
12:39:08 360  	  group_name = nvl(in_group_name, group_name),
12:39:08 361  	  first_name = nvl(in_first_name, first_name),
12:39:08 362  	  last_name = nvl(in_last_name, last_name),
12:39:08 363  	  email = nvl(in_email, email),
12:39:08 364  	  phone = nvl(in_phone, phone),
12:39:08 365  	  updated_by = in_updated_by,
12:39:08 366  	  update_date = sysdate
12:39:08 367  	where
12:39:08 368  	  id = in_group_account_id;
12:39:08 369  
12:39:08 370  	if(sql%rowcount = 0) then
12:39:08 371  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:08 372  	  SPROC_NAME, 'Group Account not found', SQLERRM);
12:39:08 373  	end if;
12:39:08 374  EXCEPTION
12:39:08 375  	WHEN OTHERS THEN
12:39:08 376  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:08 377  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
12:39:08 378  END UPDATE_GROUP_ACCOUNT;
12:39:08 379  
12:39:08 380  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
12:39:08 381  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
12:39:08 382  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
12:39:08 383  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
12:39:08 384  ) AS
12:39:08 385  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
12:39:08 386  var_subscription_id NUMBER;
12:39:08 387  var_seats NUMBER;
12:39:08 388  BEGIN
12:39:08 389  	select subscription_id, seats into var_subscription_id, var_seats
12:39:08 390  	from group_account
12:39:08 391  	where id = in_group_account_id;
12:39:08 392  
12:39:08 393  	update
12:39:08 394  	  group_account
12:39:08 395  	set
12:39:08 396  	  seats = in_seats,
12:39:08 397  	  updated_by = in_updated_by,
12:39:08 398  	  update_date = sysdate
12:39:08 399  	where
12:39:08 400  	  id = in_group_account_id;
12:39:08 401  
12:39:08 402  	if(sql%rowcount = 0) then
12:39:08 403  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:08 404  	  SPROC_NAME, 'Group Account not found', SQLERRM);
12:39:08 405  	end if;
12:39:08 406  
12:39:08 407  	PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
12:39:08 408  	  in_subscription_id => var_subscription_id,
12:39:08 409  	  in_agent_id	     => 0,
12:39:08 410  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
12:39:08 411  	  in_created_by      => in_updated_by
12:39:08 412  	);
12:39:08 413  EXCEPTION
12:39:08 414  	WHEN NO_DATA_FOUND THEN
12:39:08 415  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:08 416  	  SPROC_NAME, 'Group Account not found', SQLERRM);
12:39:08 417  	WHEN OTHERS THEN
12:39:08 418  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:08 419  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
12:39:08 420  END UPDATE_GROUP_ACCOUNT_SEATS;
12:39:08 421  
12:39:08 422  END PROCS_GROUP_ACCOUNT_CRU_V16;
12:39:08 423  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.06
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_INVOICE (
12:39:08   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
12:39:08   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
12:39:08   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
12:39:08   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
12:39:08   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
12:39:08   9  ) AS
12:39:08  10  -- VARIABLES
12:39:08  11  var_invoice_id INVOICE.ID%TYPE;
12:39:08  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08  13  var_date DATE := SYSDATE;
12:39:08  14  BEGIN
12:39:08  15  	IF in_invoice_id IS NULL THEN
12:39:08  16  	  SELECT
12:39:08  17  	    INV_ID_SEQ.nextVal into var_invoice_id
12:39:08  18  	  FROM DUAL;
12:39:08  19  	ELSE
12:39:08  20  	  var_invoice_id := in_invoice_id;
12:39:08  21  	END IF;
12:39:08  22  	INSERT INTO
12:39:08  23  	  INVOICE (
12:39:08  24  	    ID,
12:39:08  25  	    INVOICE_STATUS_ID,
12:39:08  26  	    CREATE_DATE,
12:39:08  27  	    CREATED_BY,
12:39:08  28  	    UPDATE_DATE,
12:39:08  29  	    UPDATED_BY,
12:39:08  30  	    TAX_EXEMPT_ID,
12:39:08  31  	    IS_TAX_CALCULATION_NEEDED
12:39:08  32  	  ) VALUES (
12:39:08  33  	    var_invoice_id,
12:39:08  34  	    in_invoice_status_id,
12:39:08  35  	    var_date,
12:39:08  36  	    in_created_by,
12:39:08  37  	    var_date,
12:39:08  38  	    in_created_by,
12:39:08  39  	    in_tax_exempt_id,
12:39:08  40  	    0 -- DEFAULT VALUE
12:39:08  41  	  );
12:39:08  42  
12:39:08  43  	out_invoice_id := var_invoice_id;
12:39:08  44  END;
12:39:08  45  
12:39:08  46  /*****************************************************************/
12:39:08  47  
12:39:08  48  PROCEDURE UPDATE_INVOICE (
12:39:08  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
12:39:08  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
12:39:08  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
12:39:08  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
12:39:08  53  ) AS
12:39:08  54  BEGIN
12:39:08  55  	-- Create history
12:39:08  56  	PROCS_HISTORY_V16.CREATE_INVOICE_HISTORY(
12:39:08  57  	  in_invoice_id 	       => in_invoice_id,
12:39:08  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08  59  	);
12:39:08  60  
12:39:08  61  	UPDATE
12:39:08  62  	  INVOICE
12:39:08  63  	SET
12:39:08  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
12:39:08  65  	  UPDATE_DATE		    = SYSDATE,
12:39:08  66  	  UPDATED_BY		    = in_updated_by,
12:39:08  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
12:39:08  68  	WHERE
12:39:08  69  	  ID = in_invoice_id;
12:39:08  70  END;
12:39:08  71  
12:39:08  72  END PROCS_INVOICE_CRU_V16;
12:39:08  73  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.06
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_RECEIPT(
12:39:08   4  /*
12:39:08   5  Throws exceptions:
12:39:08   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08   7  */
12:39:08   8  	  out_id	      OUT NUMBER,
12:39:08   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
12:39:08  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
12:39:08  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
12:39:08  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
12:39:08  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:08  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
12:39:08  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
12:39:08  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:08  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
12:39:08  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
12:39:08  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
12:39:08  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
12:39:08  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
12:39:08  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
12:39:08  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
12:39:08  24  ) AS
12:39:08  25  -- VARIABLES
12:39:08  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
12:39:08  27  var_current_date	    DATE;
12:39:08  28  var_count 	    NUMBER;
12:39:08  29  ITUNES_ORG_TNX_USED   EXCEPTION;
12:39:08  30  BEGIN
12:39:08  31  	SELECT COUNT(1) into var_count
12:39:08  32  	FROM
12:39:08  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
12:39:08  34  	WHERE
12:39:08  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
12:39:08  36  	  IR.SUBSCRIPTION_ID = S.ID AND
12:39:08  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
12:39:08  38  
12:39:08  39  	if var_count > 0 then
12:39:08  40  	  raise ITUNES_ORG_TNX_USED;
12:39:08  41  	end if;
12:39:08  42  
12:39:08  43  	SELECT
12:39:08  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
12:39:08  45  	INTO
12:39:08  46  	  out_id
12:39:08  47  	FROM
12:39:08  48  	  dual
12:39:08  49  	;
12:39:08  50  
12:39:08  51  	SELECT
12:39:08  52  	  sysdate
12:39:08  53  	INTO
12:39:08  54  	  var_current_date
12:39:08  55  	FROM
12:39:08  56  	  dual
12:39:08  57  	;
12:39:08  58  
12:39:08  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
12:39:08  60  	(
12:39:08  61  	  id,
12:39:08  62  	  subscription_id,
12:39:08  63  	  receipt,
12:39:08  64  	  status,
12:39:08  65  	  quantity,
12:39:08  66  	  product_id,
12:39:08  67  	  transaction_id,
12:39:08  68  	  purchase_date,
12:39:08  69  	  original_transaction_id,
12:39:08  70  	  original_purchase_date,
12:39:08  71  	  app_item_id,
12:39:08  72  	  version_external_id,
12:39:08  73  	  bid,
12:39:08  74  	  bvrs,
12:39:08  75  	  expires_date,
12:39:08  76  	  create_date,
12:39:08  77  	  created_by,
12:39:08  78  	  update_date,
12:39:08  79  	  updated_by,
12:39:08  80  	  last_check_date
12:39:08  81  	)
12:39:08  82  	VALUES
12:39:08  83  	(
12:39:08  84  	  out_id,
12:39:08  85  	  in_subscription_id,
12:39:08  86  	  in_receipt,
12:39:08  87  	  in_status,
12:39:08  88  	  in_quantity,
12:39:08  89  	  in_product_id,
12:39:08  90  	  in_transaction_id,
12:39:08  91  	  in_purchase_date,
12:39:08  92  	  in_original_transaction_id,
12:39:08  93  	  in_original_purchase_date,
12:39:08  94  	  in_app_item_id,
12:39:08  95  	  in_version_external_id,
12:39:08  96  	  in_bid,
12:39:08  97  	  in_bvrs,
12:39:08  98  	  in_expires_date,
12:39:08  99  	  var_current_date,
12:39:08 100  	  in_created_by,
12:39:08 101  	  var_current_date,
12:39:08 102  	  in_created_by,
12:39:08 103  	  var_current_date
12:39:08 104  	);
12:39:08 105  
12:39:08 106  EXCEPTION
12:39:08 107  WHEN ITUNES_ORG_TNX_USED THEN
12:39:08 108  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:08 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
12:39:08 110  WHEN DUP_VAL_ON_INDEX THEN
12:39:08 111  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:08 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
12:39:08 113  WHEN OTHERS THEN
12:39:08 114  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 116  END CREATE_RECEIPT;
12:39:08 117  
12:39:08 118  PROCEDURE UPDATE_RECEIPT(
12:39:08 119  /*
12:39:08 120  Throws exceptions:
12:39:08 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 122  */
12:39:08 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
12:39:08 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
12:39:08 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
12:39:08 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
12:39:08 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:08 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
12:39:08 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
12:39:08 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:08 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
12:39:08 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
12:39:08 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
12:39:08 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
12:39:08 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
12:39:08 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
12:39:08 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
12:39:08 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
12:39:08 139  ) AS
12:39:08 140  -- VARIABLES
12:39:08 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
12:39:08 142  var_current_date	    DATE;
12:39:08 143  BEGIN
12:39:08 144  
12:39:08 145  	SELECT
12:39:08 146  	  sysdate
12:39:08 147  	INTO
12:39:08 148  	  var_current_date
12:39:08 149  	FROM
12:39:08 150  	  dual
12:39:08 151  	;
12:39:08 152  
12:39:08 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
12:39:08 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ITUNES_RECEIPT_HISTORY
12:39:08 155  	  (
12:39:08 156  	      rec.id,
12:39:08 157  	      rec.subscription_id,
12:39:08 158  	      rec.receipt,
12:39:08 159  	      rec.status,
12:39:08 160  	      rec.quantity,
12:39:08 161  	      rec.product_id,
12:39:08 162  	      rec.transaction_id,
12:39:08 163  	      rec.purchase_date,
12:39:08 164  	      rec.original_transaction_id,
12:39:08 165  	      rec.original_purchase_date,
12:39:08 166  	      rec.app_item_id,
12:39:08 167  	      rec.version_external_id,
12:39:08 168  	      rec.bid,
12:39:08 169  	      rec.bvrs,
12:39:08 170  	      rec.expires_date,
12:39:08 171  	      rec.create_date,
12:39:08 172  	      rec.created_by,
12:39:08 173  	      rec.update_date,
12:39:08 174  	      rec.updated_by,
12:39:08 175  	      rec.last_check_date,
12:39:08 176  	      rec.cancel_date
12:39:08 177  	  );
12:39:08 178  	END LOOP;
12:39:08 179  
12:39:08 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
12:39:08 181  	SET
12:39:08 182  	  receipt = in_receipt,
12:39:08 183  	  status = in_status,
12:39:08 184  	  quantity = in_quantity,
12:39:08 185  	  product_id = in_product_id,
12:39:08 186  	  transaction_id = in_transaction_id,
12:39:08 187  	  purchase_date = in_purchase_date,
12:39:08 188  	  original_transaction_id = in_original_transaction_id,
12:39:08 189  	  original_purchase_date = in_original_purchase_date,
12:39:08 190  	  app_item_id = in_app_item_id,
12:39:08 191  	  version_external_id = in_version_external_id,
12:39:08 192  	  bid = in_bid,
12:39:08 193  	  bvrs = in_bvrs,
12:39:08 194  	  expires_date = in_expires_date,
12:39:08 195  	  update_date = var_current_date,
12:39:08 196  	  updated_by = in_updated_by,
12:39:08 197  	  last_check_date = var_current_date,
12:39:08 198  	  cancel_date = in_cancel_date
12:39:08 199  	WHERE
12:39:08 200  	  id = in_id
12:39:08 201  	;
12:39:08 202  
12:39:08 203  EXCEPTION
12:39:08 204  WHEN DUP_VAL_ON_INDEX THEN
12:39:08 205  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:08 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
12:39:08 207  WHEN OTHERS THEN
12:39:08 208  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 210  
12:39:08 211  END UPDATE_RECEIPT;
12:39:08 212  
12:39:08 213  PROCEDURE LINK_ITUNES_RECEIPT(
12:39:08 214  /*
12:39:08 215  Throws exceptions:
12:39:08 216  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 217  */
12:39:08 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
12:39:08 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
12:39:08 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
12:39:08 221  ) AS
12:39:08 222  -- VARIABLES
12:39:08 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
12:39:08 224  var_current_date	    DATE;
12:39:08 225  BEGIN
12:39:08 226  
12:39:08 227  	      SELECT
12:39:08 228  	  sysdate
12:39:08 229  	      INTO
12:39:08 230  	  var_current_date
12:39:08 231  	      FROM
12:39:08 232  	  dual
12:39:08 233  	      ;
12:39:08 234  
12:39:08 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
12:39:08 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ITUNES_RECEIPT_HISTORY
12:39:08 237  	      (
12:39:08 238  	    rec.id,
12:39:08 239  	    rec.subscription_id,
12:39:08 240  	    rec.receipt,
12:39:08 241  	    rec.status,
12:39:08 242  	    rec.quantity,
12:39:08 243  	    rec.product_id,
12:39:08 244  	    rec.transaction_id,
12:39:08 245  	    rec.purchase_date,
12:39:08 246  	    rec.original_transaction_id,
12:39:08 247  	    rec.original_purchase_date,
12:39:08 248  	    rec.app_item_id,
12:39:08 249  	    rec.version_external_id,
12:39:08 250  	    rec.bid,
12:39:08 251  	    rec.bvrs,
12:39:08 252  	    rec.expires_date,
12:39:08 253  	    rec.create_date,
12:39:08 254  	    rec.created_by,
12:39:08 255  	    rec.update_date,
12:39:08 256  	    rec.updated_by,
12:39:08 257  	    rec.last_check_date,
12:39:08 258  	    rec.cancel_date
12:39:08 259  	      );
12:39:08 260  	      END LOOP;
12:39:08 261  
12:39:08 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
12:39:08 263  		SET
12:39:08 264  		      subscription_id = in_subscription_id,
12:39:08 265  		      update_date = var_current_date,
12:39:08 266  	      updated_by = in_updated_by,
12:39:08 267  	      last_check_date = var_current_date
12:39:08 268  	      WHERE
12:39:08 269  		  id = in_id
12:39:08 270  	      ;
12:39:08 271  
12:39:08 272  	      EXCEPTION
12:39:08 273  	      WHEN DUP_VAL_ON_INDEX THEN
12:39:08 274  		PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:08 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
12:39:08 276  	      WHEN OTHERS THEN
12:39:08 277  		PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 279  END LINK_ITUNES_RECEIPT;
12:39:08 280  
12:39:08 281  
12:39:08 282  PROCEDURE MARK_RECEIPT_CHECKED(
12:39:08 283  /*
12:39:08 284  Throws exceptions:
12:39:08 285  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 286  */
12:39:08 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
12:39:08 288  ) AS
12:39:08 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
12:39:08 290  BEGIN
12:39:08 291  	UPDATE
12:39:08 292  	  CORE_OWNER.ITUNES_RECEIPT
12:39:08 293  	SET
12:39:08 294  	  last_check_date = sysdate
12:39:08 295  	WHERE
12:39:08 296  	  id = in_id
12:39:08 297  	;
12:39:08 298  EXCEPTION
12:39:08 299  WHEN OTHERS THEN
12:39:08 300  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 302  END MARK_RECEIPT_CHECKED;
12:39:08 303  
12:39:08 304  END PROCS_ITUNES_RECEIPT_CRU_V16;
12:39:08 305  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.09
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_LICENSE(
12:39:08   4  	out_license_id		    OUT LICENSE.ID%TYPE,
12:39:08   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
12:39:08   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
12:39:08   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
12:39:08   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
12:39:08   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
12:39:08  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
12:39:08  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
12:39:08  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
12:39:08  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
12:39:08  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
12:39:08  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
12:39:08  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
12:39:08  17  ) AS
12:39:08  18  -- VARIABLES
12:39:08  19  var_license_id LICENSE.ID%TYPE;
12:39:08  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08  21  var_date DATE := SYSDATE;
12:39:08  22  BEGIN
12:39:08  23  	IF in_license_id IS NULL THEN
12:39:08  24  	  SELECT
12:39:08  25  	    LCN_ID_SEQ.nextVal into var_license_id
12:39:08  26  	  FROM DUAL;
12:39:08  27  	ELSE
12:39:08  28  	  var_license_id := in_license_id;
12:39:08  29  	END IF;
12:39:08  30  	INSERT INTO
12:39:08  31  	  LICENSE (
12:39:08  32  	    ID,
12:39:08  33  	    LICENSE_STATUS_ID,
12:39:08  34  	    NEEDS_ENTITLEMENTS,
12:39:08  35  	    START_DATE,
12:39:08  36  	    OFFER_ID,
12:39:08  37  	    SUBSCRIPTION_ID,
12:39:08  38  	    INVOICE_ID,
12:39:08  39  	    END_DATE,
12:39:08  40  	    CREATE_DATE,
12:39:08  41  	    CREATED_BY,
12:39:08  42  	    UPDATE_DATE,
12:39:08  43  	    UPDATED_BY,
12:39:08  44  	    IS_EXTENSION,
12:39:08  45  	    CURRENT_OFFER_INDEX,
12:39:08  46  	    CURRENT_OFFER_RECURR_NUM,
12:39:08  47  	    ENTITLEMENT_END_DATE
12:39:08  48  	  ) VALUES (
12:39:08  49  	    var_license_id,
12:39:08  50  	    in_license_status_id,
12:39:08  51  	    in_needs_entitlements,
12:39:08  52  	    in_start_date,
12:39:08  53  	    in_offer_id,
12:39:08  54  	    in_subscription_id,
12:39:08  55  	    in_invoice_id,
12:39:08  56  	    in_end_date,
12:39:08  57  	    var_date,
12:39:08  58  	    in_created_by,
12:39:08  59  	    var_date,
12:39:08  60  	    in_created_by,
12:39:08  61  	    in_is_extension,
12:39:08  62  	    in_current_offer_index,
12:39:08  63  	    in_current_offer_recurr_num,
12:39:08  64  	    in_end_date
12:39:08  65  	  );
12:39:08  66  
12:39:08  67  	out_license_id := var_license_id;
12:39:08  68  END CREATE_LICENSE;
12:39:08  69  
12:39:08  70  /********************************************************************/
12:39:08  71  
12:39:08  72  PROCEDURE UPDATE_LICENSE (
12:39:08  73  	in_license_id		    IN LICENSE.ID%TYPE,
12:39:08  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
12:39:08  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
12:39:08  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
12:39:08  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
12:39:08  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
12:39:08  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
12:39:08  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
12:39:08  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
12:39:08  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
12:39:08  83  ) AS
12:39:08  84  BEGIN
12:39:08  85  	-- Create history
12:39:08  86  	PROCS_HISTORY_V16.CREATE_LICENSE_HISTORY(
12:39:08  87  	  in_license_id 	       => in_license_id,
12:39:08  88  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08  89  	);
12:39:08  90  
12:39:08  91  	UPDATE
12:39:08  92  	  LICENSE
12:39:08  93  	SET
12:39:08  94  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
12:39:08  95  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
12:39:08  96  	  START_DATE		   = NVL(in_start_date, START_DATE),
12:39:08  97  	  END_DATE		   = NVL(in_end_date, END_DATE),
12:39:08  98  	  UPDATE_DATE		   = SYSDATE,
12:39:08  99  	  UPDATED_BY		   = in_updated_by,
12:39:08 100  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
12:39:08 101  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
12:39:08 102  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
12:39:08 103  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE)
12:39:08 104  	WHERE
12:39:08 105  	  LICENSE.ID = in_license_id;
12:39:08 106  END UPDATE_LICENSE;
12:39:08 107  
12:39:08 108  END PROCS_LICENSE_CRU_V16;
12:39:08 109  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.02
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_LINE_ITEM (
12:39:08   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
12:39:08   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
12:39:08   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
12:39:08   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
12:39:08   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
12:39:08   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
12:39:08  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
12:39:08  11  ) AS
12:39:08  12  BEGIN
12:39:08  13  	IF inout_line_item_id IS NULL THEN
12:39:08  14  	  SELECT
12:39:08  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
12:39:08  16  	  FROM DUAL;
12:39:08  17  	END IF;
12:39:08  18  	INSERT INTO LINE_ITEM (
12:39:08  19  	  ID,
12:39:08  20  	  PRODUCT_OFFER_ID,
12:39:08  21  	  INVOICE_ID,
12:39:08  22  	  AMOUNT,
12:39:08  23  	  QUANTITY,
12:39:08  24  	  CREATE_DATE,
12:39:08  25  	  CREATED_BY,
12:39:08  26  	  DISCOUNT_AMOUNT,
12:39:08  27  	  TAXES_AMOUNT
12:39:08  28  	) VALUES (
12:39:08  29  	  inout_line_item_id,
12:39:08  30  	  in_product_offer_id,
12:39:08  31  	  in_invoice_id,
12:39:08  32  	  in_amount,
12:39:08  33  	  1, -- [REVU]: Deprecated. Ignore this field
12:39:08  34  	  SYSDATE,
12:39:08  35  	  in_created_by,
12:39:08  36  	  in_discount_amount,
12:39:08  37  	  in_taxes_amount
12:39:08  38  	);
12:39:08  39  END CREATE_LINE_ITEM;
12:39:08  40  
12:39:08  41  /******************************************************************************/
12:39:08  42  
12:39:08  43  PROCEDURE UPDATE_LINE_ITEM (
12:39:08  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
12:39:08  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
12:39:08  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
12:39:08  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
12:39:08  48  ) AS
12:39:08  49  BEGIN
12:39:08  50  	UPDATE
12:39:08  51  	  LINE_ITEM
12:39:08  52  	SET
12:39:08  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
12:39:08  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
12:39:08  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
12:39:08  56  	WHERE
12:39:08  57  	  LINE_ITEM.ID = in_line_item_id;
12:39:08  58  END UPDATE_LINE_ITEM;
12:39:08  59  
12:39:08  60  /******************************************************************************/
12:39:08  61  
12:39:08  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
12:39:08  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
12:39:08  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
12:39:08  65  ) AS
12:39:08  66  BEGIN
12:39:08  67  	INSERT INTO DISCOUNT_LINE_ITEM(
12:39:08  68  	  DISCOUNT_ID,
12:39:08  69  	  LINE_ITEM_ID
12:39:08  70  	) VALUES (
12:39:08  71  	  in_discount_id,
12:39:08  72  	  in_line_item_id
12:39:08  73  	);
12:39:08  74  END CREATE_DISCOUNT_LINE_ITEM;
12:39:08  75  
12:39:08  76  END PROCS_LINE_ITEMS_CRU_V16;
12:39:08  77  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.04
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
12:39:08   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
12:39:08   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
12:39:08   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:08   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
12:39:08   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
12:39:08   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
12:39:08  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
12:39:08  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
12:39:08  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
12:39:08  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
12:39:08  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
12:39:08  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
12:39:08  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
12:39:08  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
12:39:08  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
12:39:08  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
12:39:08  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
12:39:08  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
12:39:08  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
12:39:08  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
12:39:08  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
12:39:08  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
12:39:08  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
12:39:08  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
12:39:08  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
12:39:08  29  ) AS
12:39:08  30  -- VARIABLES
12:39:08  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
12:39:08  32  var_date DATE := SYSDATE;
12:39:08  33  BEGIN
12:39:08  34  	IF in_cpt_chargeback_act_id IS NULL THEN
12:39:08  35  	  SELECT
12:39:08  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
12:39:08  37  	  FROM DUAL;
12:39:08  38  	ELSE
12:39:08  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
12:39:08  40  	END IF;
12:39:08  41  	INSERT INTO
12:39:08  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
12:39:08  43  	    id,
12:39:08  44  	    rcn_ext_source_log_id,
12:39:08  45  	    record_type,
12:39:08  46  	    entity_type,
12:39:08  47  	    entity_number,
12:39:08  48  	    chargeback_amount_issuer,
12:39:08  49  	    prev_partial_representment,
12:39:08  50  	    presentment_currency,
12:39:08  51  	    chargeback_category,
12:39:08  52  	    status_flag,
12:39:08  53  	    sequence_number,
12:39:08  54  	    merchant_order_number,
12:39:08  55  	    account_number,
12:39:08  56  	    reason_code,
12:39:08  57  	    transaction_date,
12:39:08  58  	    chargeback_date,
12:39:08  59  	    activity_date,
12:39:08  60  	    chargeback_amount_action,
12:39:08  61  	    fee_amount,
12:39:08  62  	    usage_code,
12:39:08  63  	    mop_code,
12:39:08  64  	    authorization_date,
12:39:08  65  	    chargeback_due_date,
12:39:08  66  	    create_date,
12:39:08  67  	    created_by
12:39:08  68  	  ) VALUES (
12:39:08  69  	    var_cpt_chargeback_act_id,
12:39:08  70  	    in_ext_source_log_id,
12:39:08  71  	    in_record_type,
12:39:08  72  	    in_entity_type,
12:39:08  73  	    in_entity_number,
12:39:08  74  	    in_chargeback_amount_issuer,
12:39:08  75  	    in_prev_partial_repres,
12:39:08  76  	    in_presentment_currency,
12:39:08  77  	    in_chargeback_category,
12:39:08  78  	    in_status_flag,
12:39:08  79  	    in_sequence_number,
12:39:08  80  	    in_merchant_order_number,
12:39:08  81  	    in_account_number,
12:39:08  82  	    in_reason_code,
12:39:08  83  	    in_transaction_date,
12:39:08  84  	    in_chargeback_date,
12:39:08  85  	    in_activity_date,
12:39:08  86  	    in_chargeback_amount_action,
12:39:08  87  	    in_fee_amount,
12:39:08  88  	    in_usage_code,
12:39:08  89  	    in_mop_code,
12:39:08  90  	    in_authorization_date,
12:39:08  91  	    in_chargeback_due_date,
12:39:08  92  	    var_date,
12:39:08  93  	    in_created_by
12:39:08  94  	  );
12:39:08  95  
12:39:08  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
12:39:08  97  END CREATE_CPT_CHARGEBACK_ACT;
12:39:08  98  
12:39:08  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
12:39:08 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
12:39:08 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
12:39:08 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
12:39:08 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
12:39:08 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
12:39:08 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
12:39:08 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
12:39:08 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
12:39:08 108  ) AS
12:39:08 109  -- VARIABLES
12:39:08 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
12:39:08 111  var_date DATE := SYSDATE;
12:39:08 112  BEGIN
12:39:08 113  	IF in_ext_source_log_id IS NULL THEN
12:39:08 114  	  SELECT
12:39:08 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
12:39:08 116  	  FROM DUAL;
12:39:08 117  	ELSE
12:39:08 118  	  var_ext_source_log_id := in_ext_source_log_id;
12:39:08 119  	END IF;
12:39:08 120  	INSERT INTO
12:39:08 121  	  RCN_EXT_SOURCE_LOG (
12:39:08 122  	    id,
12:39:08 123  	    extraction_timestamp,
12:39:08 124  	    report_date,
12:39:08 125  	    report_generation_datetime,
12:39:08 126  	    record_type,
12:39:08 127  	    report_file_name,
12:39:08 128  	    create_date,
12:39:08 129  	    created_by
12:39:08 130  	  ) VALUES (
12:39:08 131  	    var_ext_source_log_id,
12:39:08 132  	    in_extraction_timestamp,
12:39:08 133  	    in_report_date,
12:39:08 134  	    in_report_gen_datetime,
12:39:08 135  	    in_record_type,
12:39:08 136  	    in_report_file_name,
12:39:08 137  	    var_date,
12:39:08 138  	    in_created_by
12:39:08 139  	  );
12:39:08 140  
12:39:08 141  	out_ext_source_log_id := var_ext_source_log_id;
12:39:08 142  END CREATE_EXT_SOURCE_LOG;
12:39:08 143  
12:39:08 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
12:39:08 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
12:39:08 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
12:39:08 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:08 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
12:39:08 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
12:39:08 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
12:39:08 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
12:39:08 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
12:39:08 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
12:39:08 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
12:39:08 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
12:39:08 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
12:39:08 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
12:39:08 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
12:39:08 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
12:39:08 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
12:39:08 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
12:39:08 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
12:39:08 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
12:39:08 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
12:39:08 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
12:39:08 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
12:39:08 167  ) AS
12:39:08 168  -- VARIABLES
12:39:08 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
12:39:08 170  var_date DATE := SYSDATE;
12:39:08 171  BEGIN
12:39:08 172  	IF in_cpt_service_charge_id IS NULL THEN
12:39:08 173  	  SELECT
12:39:08 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
12:39:08 175  	  FROM DUAL;
12:39:08 176  	ELSE
12:39:08 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
12:39:08 178  	END IF;
12:39:08 179  	INSERT INTO
12:39:08 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
12:39:08 181  	    id,
12:39:08 182  	    rcn_ext_source_log_id,
12:39:08 183  	    record_type,
12:39:08 184  	    category,
12:39:08 185  	    sub_category,
12:39:08 186  	    entity_type,
12:39:08 187  	    entity_number,
12:39:08 188  	    funds_transfer_inst_number,
12:39:08 189  	    secure_ba_number,
12:39:08 190  	    settlement_currency,
12:39:08 191  	    fee_schedule,
12:39:08 192  	    mop,
12:39:08 193  	    interchange_qualification,
12:39:08 194  	    fee_type_description,
12:39:08 195  	    action_type,
12:39:08 196  	    unit_quantity,
12:39:08 197  	    unit_fee,
12:39:08 198  	    amount,
12:39:08 199  	    percentage_rate,
12:39:08 200  	    total_charge,
12:39:08 201  	    create_date,
12:39:08 202  	    created_by
12:39:08 203  	  ) VALUES (
12:39:08 204  	    var_cpt_service_charge_id,
12:39:08 205  	    in_ext_source_log_id,
12:39:08 206  	    in_record_type,
12:39:08 207  	    in_category,
12:39:08 208  	    in_sub_category,
12:39:08 209  	    in_entity_type,
12:39:08 210  	    in_entity_number,
12:39:08 211  	    in_funds_trans_inst_number,
12:39:08 212  	    in_secure_ba_number,
12:39:08 213  	    in_settlement_currency,
12:39:08 214  	    in_fee_schedule,
12:39:08 215  	    in_mop,
12:39:08 216  	    in_interchange_qual,
12:39:08 217  	    in_fee_type_description,
12:39:08 218  	    in_action_type,
12:39:08 219  	    in_unit_quantity,
12:39:08 220  	    in_unit_fee,
12:39:08 221  	    in_amount,
12:39:08 222  	    in_percentage_rate,
12:39:08 223  	    in_total_charge,
12:39:08 224  	    var_date,
12:39:08 225  	    in_created_by
12:39:08 226  	  );
12:39:08 227  
12:39:08 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
12:39:08 229  END CREATE_CPT_SERVICE_CHARGE;
12:39:08 230  
12:39:08 231  PROCEDURE CREATE_CPT_EXCEPTION (
12:39:08 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
12:39:08 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
12:39:08 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:08 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
12:39:08 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
12:39:08 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
12:39:08 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
12:39:08 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
12:39:08 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
12:39:08 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
12:39:08 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
12:39:08 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
12:39:08 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
12:39:08 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
12:39:08 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
12:39:08 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
12:39:08 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
12:39:08 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
12:39:08 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
12:39:08 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
12:39:08 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
12:39:08 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
12:39:08 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
12:39:08 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
12:39:08 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
12:39:08 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
12:39:08 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
12:39:08 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
12:39:08 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
12:39:08 261  ) AS
12:39:08 262  -- VARIABLES
12:39:08 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
12:39:08 264  var_date DATE := SYSDATE;
12:39:08 265  BEGIN
12:39:08 266  	IF in_cpt_exception_id IS NULL THEN
12:39:08 267  	  SELECT
12:39:08 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
12:39:08 269  	  FROM DUAL;
12:39:08 270  	ELSE
12:39:08 271  	  var_cpt_exception_id := in_cpt_exception_id;
12:39:08 272  	END IF;
12:39:08 273  	INSERT INTO
12:39:08 274  	  RCN_CPT_EXCEPTION_DETAIL (
12:39:08 275  	    id,
12:39:08 276  	    rcn_ext_source_log_id,
12:39:08 277  	    record_type,
12:39:08 278  	    submission_date,
12:39:08 279  	    pid_number,
12:39:08 280  	    pid_short_name,
12:39:08 281  	    submission_number,
12:39:08 282  	    record_number,
12:39:08 283  	    entity_type,
12:39:08 284  	    entity_number,
12:39:08 285  	    presentment_currency,
12:39:08 286  	    merchant_order_number,
12:39:08 287  	    rdfi_number,
12:39:08 288  	    account_number,
12:39:08 289  	    expiration_date,
12:39:08 290  	    amount,
12:39:08 291  	    mop,
12:39:08 292  	    action_code,
12:39:08 293  	    auth_date,
12:39:08 294  	    auth_code,
12:39:08 295  	    auth_response_code,
12:39:08 296  	    trace_number,
12:39:08 297  	    consumer_country_code,
12:39:08 298  	    category,
12:39:08 299  	    mcc,
12:39:08 300  	    reject_code,
12:39:08 301  	    submission_status,
12:39:08 302  	    create_date,
12:39:08 303  	    created_by
12:39:08 304  	  ) VALUES (
12:39:08 305  	    var_cpt_exception_id,
12:39:08 306  	    in_ext_source_log_id,
12:39:08 307  	    in_record_type,
12:39:08 308  	    in_submission_date,
12:39:08 309  	    in_pid_number,
12:39:08 310  	    in_pid_short_name,
12:39:08 311  	    in_submission_number,
12:39:08 312  	    in_record_number,
12:39:08 313  	    in_entity_type,
12:39:08 314  	    in_entity_number,
12:39:08 315  	    in_presentment_currency,
12:39:08 316  	    in_merchant_order_number,
12:39:08 317  	    in_rdfi_number,
12:39:08 318  	    in_account_number,
12:39:08 319  	    in_expiration_date,
12:39:08 320  	    in_amount,
12:39:08 321  	    in_mop,
12:39:08 322  	    in_action_code,
12:39:08 323  	    in_auth_date,
12:39:08 324  	    in_auth_code,
12:39:08 325  	    in_auth_response_code,
12:39:08 326  	    in_trace_number,
12:39:08 327  	    in_consumer_country_code,
12:39:08 328  	    in_category,
12:39:08 329  	    in_mcc,
12:39:08 330  	    in_reject_code,
12:39:08 331  	    in_submission_status,
12:39:08 332  	    var_date,
12:39:08 333  	    in_created_by
12:39:08 334  	  );
12:39:08 335  
12:39:08 336  	out_cpt_exception_id := var_cpt_exception_id;
12:39:08 337  END CREATE_CPT_EXCEPTION;
12:39:08 338  
12:39:08 339  PROCEDURE CREATE_CPT_DEPOSIT (
12:39:08 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
12:39:08 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
12:39:08 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:08 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
12:39:08 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
12:39:08 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
12:39:08 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
12:39:08 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
12:39:08 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
12:39:08 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
12:39:08 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
12:39:08 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
12:39:08 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
12:39:08 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
12:39:08 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
12:39:08 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
12:39:08 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
12:39:08 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
12:39:08 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
12:39:08 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
12:39:08 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
12:39:08 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
12:39:08 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
12:39:08 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
12:39:08 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
12:39:08 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
12:39:08 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
12:39:08 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
12:39:08 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
12:39:08 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
12:39:08 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
12:39:08 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
12:39:08 372  ) AS
12:39:08 373  -- VARIABLES
12:39:08 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
12:39:08 375  var_date DATE := SYSDATE;
12:39:08 376  BEGIN
12:39:08 377  	IF in_cpt_deposit_id IS NULL THEN
12:39:08 378  	  SELECT
12:39:08 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
12:39:08 380  	  FROM DUAL;
12:39:08 381  	ELSE
12:39:08 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
12:39:08 383  	END IF;
12:39:08 384  	INSERT INTO
12:39:08 385  	  RCN_CPT_DEPOSIT_DETAIL (
12:39:08 386  	    id,
12:39:08 387  	    rcn_ext_source_log_id,
12:39:08 388  	    record_type,
12:39:08 389  	    submission_date,
12:39:08 390  	    pid_number,
12:39:08 391  	    pid_short_name,
12:39:08 392  	    submission_number,
12:39:08 393  	    record_number,
12:39:08 394  	    entity_type,
12:39:08 395  	    entity_number,
12:39:08 396  	    presentment_currency,
12:39:08 397  	    merchant_order_number,
12:39:08 398  	    rdfi_number,
12:39:08 399  	    account_number,
12:39:08 400  	    expiration_date,
12:39:08 401  	    amount,
12:39:08 402  	    mop,
12:39:08 403  	    action_code,
12:39:08 404  	    auth_date,
12:39:08 405  	    auth_code,
12:39:08 406  	    auth_response_code,
12:39:08 407  	    trace_number,
12:39:08 408  	    consumer_country_code,
12:39:08 409  	    mcc,
12:39:08 410  	    fee_code,
12:39:08 411  	    unit_fee,
12:39:08 412  	    percent_fee,
12:39:08 413  	    total_interchange_fee,
12:39:08 414  	    total_assessment_fee,
12:39:08 415  	    other_fee,
12:39:08 416  	    create_date,
12:39:08 417  	    created_by
12:39:08 418  	  ) VALUES (
12:39:08 419  	    var_cpt_deposit_id,
12:39:08 420  	    in_ext_source_log_id,
12:39:08 421  	    in_record_type,
12:39:08 422  	    in_submission_date,
12:39:08 423  	    in_pid_number,
12:39:08 424  	    in_pid_short_name,
12:39:08 425  	    in_submission_number,
12:39:08 426  	    in_record_number,
12:39:08 427  	    in_entity_type,
12:39:08 428  	    in_entity_number,
12:39:08 429  	    in_presentment_currency,
12:39:08 430  	    in_merchant_order_number,
12:39:08 431  	    in_rdfi_number,
12:39:08 432  	    in_account_number,
12:39:08 433  	    in_expiration_date,
12:39:08 434  	    in_amount,
12:39:08 435  	    in_mop,
12:39:08 436  	    in_action_code,
12:39:08 437  	    in_auth_date,
12:39:08 438  	    in_auth_code,
12:39:08 439  	    in_auth_response_code,
12:39:08 440  	    in_trace_number,
12:39:08 441  	    in_consumer_country_code,
12:39:08 442  	    in_mcc,
12:39:08 443  	    in_fee_code,
12:39:08 444  	    in_unit_fee,
12:39:08 445  	    in_percent_fee,
12:39:08 446  	    in_total_interchange_fee,
12:39:08 447  	    in_total_assessment_fee,
12:39:08 448  	    in_other_fee,
12:39:08 449  	    var_date,
12:39:08 450  	    in_created_by
12:39:08 451  	  );
12:39:08 452  
12:39:08 453  	out_cpt_deposit_id := var_cpt_deposit_id;
12:39:08 454  END CREATE_CPT_DEPOSIT;
12:39:08 455  
12:39:08 456  PROCEDURE CREATE_PP_SETTLEMENT (
12:39:08 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
12:39:08 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
12:39:08 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:08 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
12:39:08 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
12:39:08 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
12:39:08 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
12:39:08 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
12:39:08 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
12:39:08 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
12:39:08 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
12:39:08 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
12:39:08 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
12:39:08 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
12:39:08 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
12:39:08 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
12:39:08 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
12:39:08 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
12:39:08 475  ) AS
12:39:08 476  -- VARIABLES
12:39:08 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
12:39:08 478  var_date DATE := SYSDATE;
12:39:08 479  BEGIN
12:39:08 480  	IF in_pp_settlement_id IS NULL THEN
12:39:08 481  	  SELECT
12:39:08 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
12:39:08 483  	  FROM DUAL;
12:39:08 484  	ELSE
12:39:08 485  	  var_pp_settlement_id := in_pp_settlement_id;
12:39:08 486  	END IF;
12:39:08 487  	INSERT INTO
12:39:08 488  	  RCN_PP_SETTLEMENT (
12:39:08 489  	    id,
12:39:08 490  	    rcn_ext_source_log_id,
12:39:08 491  	    transaction_id,
12:39:08 492  	    invoice_id,
12:39:08 493  	    pp_ref_id,
12:39:08 494  	    pp_ref_id_type,
12:39:08 495  	    trans_event_code,
12:39:08 496  	    trans_init_date,
12:39:08 497  	    trans_comp_date,
12:39:08 498  	    trans_deb_or_cred,
12:39:08 499  	    gross_trans_amount,
12:39:08 500  	    gross_trans_currency,
12:39:08 501  	    fee_deb_or_cred,
12:39:08 502  	    fee_amount,
12:39:08 503  	    fee_currency,
12:39:08 504  	    custom_field,
12:39:08 505  	    create_date,
12:39:08 506  	    created_by
12:39:08 507  	  ) VALUES (
12:39:08 508  	    var_pp_settlement_id,
12:39:08 509  	    in_ext_source_log_id,
12:39:08 510  	    in_transaction_id,
12:39:08 511  	    in_invoice_id,
12:39:08 512  	    in_pp_ref_id,
12:39:08 513  	    in_pp_ref_id_type,
12:39:08 514  	    in_trans_event_code,
12:39:08 515  	    in_trans_init_date,
12:39:08 516  	    in_trans_comp_date,
12:39:08 517  	    in_trans_deb_or_cred,
12:39:08 518  	    in_gross_trans_amount,
12:39:08 519  	    in_gross_trans_currency,
12:39:08 520  	    in_fee_deb_or_cred,
12:39:08 521  	    in_fee_amount,
12:39:08 522  	    in_fee_currency,
12:39:08 523  	    in_custom_field,
12:39:08 524  	    var_date,
12:39:08 525  	    in_created_by
12:39:08 526  	  );
12:39:08 527  
12:39:08 528  	out_pp_settlement_id := var_pp_settlement_id;
12:39:08 529  END CREATE_PP_SETTLEMENT;
12:39:08 530  
12:39:08 531  PROCEDURE CREATE_PP_DISPUTE (
12:39:08 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
12:39:08 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
12:39:08 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:08 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
12:39:08 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
12:39:08 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
12:39:08 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
12:39:08 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
12:39:08 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
12:39:08 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
12:39:08 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
12:39:08 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
12:39:08 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
12:39:08 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
12:39:08 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
12:39:08 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
12:39:08 548  ) AS
12:39:08 549  -- VARIABLES
12:39:08 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
12:39:08 551  var_date DATE := SYSDATE;
12:39:08 552  BEGIN
12:39:08 553  	IF in_pp_dispute_id IS NULL THEN
12:39:08 554  	  SELECT
12:39:08 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
12:39:08 556  	  FROM DUAL;
12:39:08 557  	ELSE
12:39:08 558  	  var_pp_dispute_id := in_pp_dispute_id;
12:39:08 559  	END IF;
12:39:08 560  	INSERT INTO
12:39:08 561  	  RCN_PP_DISPUTE (
12:39:08 562  	    id,
12:39:08 563  	    rcn_ext_source_log_id,
12:39:08 564  	    dispute_type,
12:39:08 565  	    claimant_name,
12:39:08 566  	    claimant_email,
12:39:08 567  	    transaction_id,
12:39:08 568  	    trans_date,
12:39:08 569  	    disputed_amount,
12:39:08 570  	    disputed_amount_currency,
12:39:08 571  	    dispute_reason,
12:39:08 572  	    dispute_filing_date,
12:39:08 573  	    dispute_status,
12:39:08 574  	    dispute_case_id,
12:39:08 575  	    invoice_id,
12:39:08 576  	    create_date,
12:39:08 577  	    created_by
12:39:08 578  	  ) VALUES (
12:39:08 579  	    var_pp_dispute_id,
12:39:08 580  	    in_ext_source_log_id,
12:39:08 581  	    in_dispute_type,
12:39:08 582  	    in_claimant_name,
12:39:08 583  	    in_claimant_email,
12:39:08 584  	    in_transaction_id,
12:39:08 585  	    in_trans_date,
12:39:08 586  	    in_disputed_amount,
12:39:08 587  	    in_disputed_amount_currency,
12:39:08 588  	    in_dispute_reason,
12:39:08 589  	    in_dispute_filing_date,
12:39:08 590  	    in_dispute_status,
12:39:08 591  	    in_dispute_case_id,
12:39:08 592  	    in_invoice_id,
12:39:08 593  	    var_date,
12:39:08 594  	    in_created_by
12:39:08 595  	  );
12:39:08 596  
12:39:08 597  	out_pp_dispute_id := var_pp_dispute_id;
12:39:08 598  END CREATE_PP_DISPUTE;
12:39:08 599  
12:39:08 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
12:39:08 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
12:39:08 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
12:39:08 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
12:39:08 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
12:39:08 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
12:39:08 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
12:39:08 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
12:39:08 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
12:39:08 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
12:39:08 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
12:39:08 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
12:39:08 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
12:39:08 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
12:39:08 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
12:39:08 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
12:39:08 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
12:39:08 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
12:39:08 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
12:39:08 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
12:39:08 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
12:39:08 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
12:39:08 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
12:39:08 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
12:39:08 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
12:39:08 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
12:39:08 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
12:39:08 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
12:39:08 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
12:39:08 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
12:39:08 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
12:39:08 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
12:39:08 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
12:39:08 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
12:39:08 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
12:39:08 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
12:39:08 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
12:39:08 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
12:39:08 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
12:39:08 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
12:39:08 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
12:39:08 641  ) AS
12:39:08 642  -- VARIABLES
12:39:08 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
12:39:08 644  var_date DATE := SYSDATE;
12:39:08 645  BEGIN
12:39:08 646  	IF in_pp_trans_detail_id IS NULL THEN
12:39:08 647  	  SELECT
12:39:08 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
12:39:08 649  	  FROM DUAL;
12:39:08 650  	ELSE
12:39:08 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
12:39:08 652  	END IF;
12:39:08 653  	INSERT INTO
12:39:08 654  	  RCN_PP_TRANS_DETAIL (
12:39:08 655  	    id,
12:39:08 656  	    rcn_ext_source_log_id,
12:39:08 657  	    transaction_id,
12:39:08 658  	    invoice_id,
12:39:08 659  	    pp_ref_id,
12:39:08 660  	    trans_event_code,
12:39:08 661  	    trans_init_date,
12:39:08 662  	    trans_comp_date,
12:39:08 663  	    trans_deb_or_cred,
12:39:08 664  	    gross_trans_amount,
12:39:08 665  	    gross_trans_currency,
12:39:08 666  	    fee_deb_or_cred,
12:39:08 667  	    fee_amount,
12:39:08 668  	    fee_currency,
12:39:08 669  	    trans_status,
12:39:08 670  	    insurance_amount,
12:39:08 671  	    sales_tax_amount,
12:39:08 672  	    shipping_amount,
12:39:08 673  	    trans_subject,
12:39:08 674  	    trans_note,
12:39:08 675  	    payer_acct_id,
12:39:08 676  	    payer_addr_status,
12:39:08 677  	    item_name,
12:39:08 678  	    item_id,
12:39:08 679  	    option_1_name,
12:39:08 680  	    option_1_value,
12:39:08 681  	    option_2_name,
12:39:08 682  	    option_2_value,
12:39:08 683  	    auction_site,
12:39:08 684  	    auction_buyer_id,
12:39:08 685  	    auction_closing_date,
12:39:08 686  	    shipping_addr_line_1,
12:39:08 687  	    shipping_addr_line_2,
12:39:08 688  	    shipping_addr_city,
12:39:08 689  	    shipping_addr_state,
12:39:08 690  	    shipping_addr_zip,
12:39:08 691  	    shipping_addr_country,
12:39:08 692  	    custom_field,
12:39:08 693  	    create_date,
12:39:08 694  	    created_by
12:39:08 695  	  ) VALUES (
12:39:08 696  	    var_pp_trans_detail_id,
12:39:08 697  	    in_ext_source_log_id,
12:39:08 698  	    in_transaction_id,
12:39:08 699  	    in_invoice_id,
12:39:08 700  	    in_pp_ref_id,
12:39:08 701  	    in_trans_event_code,
12:39:08 702  	    in_trans_init_date,
12:39:08 703  	    in_trans_comp_date,
12:39:08 704  	    in_trans_deb_or_cred,
12:39:08 705  	    in_gross_trans_amount,
12:39:08 706  	    in_gross_trans_currency,
12:39:08 707  	    in_fee_deb_or_cred,
12:39:08 708  	    in_fee_amount,
12:39:08 709  	    in_fee_currency,
12:39:08 710  	    in_trans_status,
12:39:08 711  	    in_insurance_amount,
12:39:08 712  	    in_sales_tax_amount,
12:39:08 713  	    in_shipping_amount,
12:39:08 714  	    in_trans_subject,
12:39:08 715  	    in_trans_note,
12:39:08 716  	    in_payer_acct_id,
12:39:08 717  	    in_payer_addr_status,
12:39:08 718  	    in_item_name,
12:39:08 719  	    in_item_id,
12:39:08 720  	    in_option_1_name,
12:39:08 721  	    in_option_1_value,
12:39:08 722  	    in_option_2_name,
12:39:08 723  	    in_option_2_value,
12:39:08 724  	    in_auction_site,
12:39:08 725  	    in_auction_buyer_id,
12:39:08 726  	    in_auction_closing_date,
12:39:08 727  	    in_shipping_addr_line_1,
12:39:08 728  	    in_shipping_addr_line_2,
12:39:08 729  	    in_shipping_addr_city,
12:39:08 730  	    in_shipping_addr_state,
12:39:08 731  	    in_shipping_addr_zip,
12:39:08 732  	    in_shipping_addr_country,
12:39:08 733  	    in_custom_field,
12:39:08 734  	    var_date,
12:39:08 735  	    in_created_by
12:39:08 736  	  );
12:39:08 737  
12:39:08 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
12:39:08 739  END CREATE_PP_TRANS_DETAIL;
12:39:08 740  
12:39:08 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
12:39:08 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
12:39:08 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
12:39:08 744  ) AS
12:39:08 745  BEGIN
12:39:08 746  	DELETE FROM
12:39:08 747  	  RCN_EXT_SOURCE_LOG
12:39:08 748  	WHERE
12:39:08 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
12:39:08 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
12:39:08 751  END DELETE_EXT_SOURCE_LOG;
12:39:08 752  
12:39:08 753  PROCEDURE GET_EXT_SOURCE_LOG (
12:39:08 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
12:39:08 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
12:39:08 756  	out_result_set		 OUT SYS_REFCURSOR
12:39:08 757  ) AS
12:39:08 758  BEGIN
12:39:08 759  	OPEN out_result_set FOR
12:39:08 760  	SELECT * FROM
12:39:08 761  	  RCN_EXT_SOURCE_LOG
12:39:08 762  	WHERE
12:39:08 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
12:39:08 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
12:39:08 765  END GET_EXT_SOURCE_LOG;
12:39:08 766  
12:39:08 767  END PROCS_RECONCILIATION_CRU_V16;
12:39:08 768  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.06
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_SUBSCRIPTION(
12:39:08   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
12:39:08   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
12:39:08   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
12:39:08   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
12:39:08   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
12:39:08   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
12:39:08  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
12:39:08  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
12:39:08  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
12:39:08  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
12:39:08  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
12:39:08  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
12:39:08  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
12:39:08  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
12:39:08  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
12:39:08  19  ) AS
12:39:08  20  -- VARIABLES
12:39:08  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
12:39:08  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08  23  var_date DATE := SYSDATE;
12:39:08  24  BEGIN
12:39:08  25  	IF in_subscription_id IS NULL THEN
12:39:08  26  	  SELECT
12:39:08  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
12:39:08  28  	  FROM DUAL;
12:39:08  29  	ELSE
12:39:08  30  	  var_new_subscription_id := in_subscription_id;
12:39:08  31  	END IF;
12:39:08  32  	INSERT INTO SUBSCRIPTION (
12:39:08  33  	  ID,
12:39:08  34  	  SUSPEND_DATE,
12:39:08  35  	  ACCOUNT_ID,
12:39:08  36  	  PURCHASE_DATE,
12:39:08  37  	  OFFER_CHAIN_ID,
12:39:08  38  	  TERMINATION_DATE,
12:39:08  39  	  DAYS_REMAINING_ADJUSTMENT,
12:39:08  40  	  SCT_ID,
12:39:08  41  	  CREATE_DATE,
12:39:08  42  	  CREATED_BY,
12:39:08  43  	  UPDATE_DATE,
12:39:08  44  	  UPDATED_BY,
12:39:08  45  	  INSTRUMENT_TYPE_ID,
12:39:08  46  	  INSTRUMENT_ID,
12:39:08  47  	  SUBSCRIPTION_STATUS_ID,
12:39:08  48  	  CANCELLATION_DATE,
12:39:08  49  	  REACTIVATION_DATE
12:39:08  50  	) VALUES (
12:39:08  51  	  var_new_subscription_id,
12:39:08  52  	  in_suspend_date,
12:39:08  53  	  in_account_id,
12:39:08  54  	  in_purchase_date,
12:39:08  55  	  in_offer_chain_id,
12:39:08  56  	  in_termination_date,
12:39:08  57  	  in_days_remainning_ajustment,
12:39:08  58  	  in_sct_id,
12:39:08  59  	  var_date,
12:39:08  60  	  in_created_by,
12:39:08  61  	  var_date,
12:39:08  62  	  in_created_by,
12:39:08  63  	  in_instrument_type_id,
12:39:08  64  	  in_instrument_id,
12:39:08  65  	  in_subscription_status_id,
12:39:08  66  	  in_cancelation_date,
12:39:08  67  	  in_reactivation_date
12:39:08  68  	);
12:39:08  69  
12:39:08  70  	out_subscription_id := var_new_subscription_id;
12:39:08  71  END CREATE_SUBSCRIPTION;
12:39:08  72  
12:39:08  73  /******************************************************************************/
12:39:08  74  
12:39:08  75  PROCEDURE UPDATE_SUBSCRIPTION(
12:39:08  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
12:39:08  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
12:39:08  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
12:39:08  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
12:39:08  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
12:39:08  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
12:39:08  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
12:39:08  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
12:39:08  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
12:39:08  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
12:39:08  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
12:39:08  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
12:39:08  88  ) AS
12:39:08  89  BEGIN
12:39:08  90  	-- Create history
12:39:08  91  	PROCS_HISTORY_V16.CREATE_SUBSCRIPTION_HISTORY(
12:39:08  92  	  in_subscription_id	       => in_subscription_id,
12:39:08  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08  94  	);
12:39:08  95  
12:39:08  96  	UPDATE SUBSCRIPTION SET
12:39:08  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
12:39:08  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
12:39:08  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
12:39:08 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
12:39:08 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
12:39:08 102  	  UPDATE_DATE		    = SYSDATE,
12:39:08 103  	  UPDATED_BY		    = in_updated_by,
12:39:08 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
12:39:08 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
12:39:08 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
12:39:08 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
12:39:08 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
12:39:08 109  	WHERE
12:39:08 110  	  ID = in_subscription_id;
12:39:08 111  END UPDATE_SUBSCRIPTION;
12:39:08 112  
12:39:08 113  /******************************************************************************/
12:39:08 114  
12:39:08 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
12:39:08 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
12:39:08 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
12:39:08 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
12:39:08 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
12:39:08 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
12:39:08 121  ) AS
12:39:08 122  BEGIN
12:39:08 123  	IF inout_subscription_note_id IS NULL THEN
12:39:08 124  	  SELECT
12:39:08 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
12:39:08 126  	  FROM DUAL;
12:39:08 127  	END IF;
12:39:08 128  	INSERT INTO SUBSCRIPTION_NOTE (
12:39:08 129  	  ID,
12:39:08 130  	  AGENT_ID,
12:39:08 131  	  SUBSCRIPTION_ID,
12:39:08 132  	  NOTE,
12:39:08 133  	  CREATE_DATE,
12:39:08 134  	  CREATED_BY
12:39:08 135  	) VALUES (
12:39:08 136  	  inout_subscription_note_id,
12:39:08 137  	  in_agent_id,
12:39:08 138  	  in_subscription_id,
12:39:08 139  	  in_note,
12:39:08 140  	  SYSDATE,
12:39:08 141  	  in_created_by
12:39:08 142  	);
12:39:08 143  END CREATE_SUBSCRIPTION_NOTE;
12:39:08 144  
12:39:08 145  END PROCS_SUBSCRIPTION_CRU_V16;
12:39:08 146  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.03
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_TAX (
12:39:08   4  	inout_tax_id		 IN OUT NUMBER,
12:39:08   5  	in_tax_type_id		 IN NUMBER,
12:39:08   6  	in_calculated_amount	 IN NUMBER,
12:39:08   7  	in_created_by		 IN VARCHAR2,
12:39:08   8  	in_line_item_id 	 IN NUMBER,
12:39:08   9  	in_effective_rate	 IN VARCHAR2,
12:39:08  10  	in_taxable_amount	 IN NUMBER,
12:39:08  11  	in_tax_rule_id		 IN NUMBER,
12:39:08  12  	in_jurisdiction_level_id IN NUMBER,
12:39:08  13  	in_jurisdiction_name	 IN VARCHAR2,
12:39:08  14  	in_jurisdiction_id	 IN VARCHAR2,
12:39:08  15  	in_ext_tax_type 	 IN VARCHAR2,
12:39:08  16  	in_ext_result		 IN VARCHAR2,
12:39:08  17  	in_imposition_type	 IN VARCHAR2,
12:39:08  18  	in_imposition		 IN VARCHAR2
12:39:08  19  ) AS
12:39:08  20  var_date DATE := SYSDATE;
12:39:08  21  BEGIN
12:39:08  22  
12:39:08  23  	IF inout_tax_id IS NULL THEN
12:39:08  24  	  SELECT
12:39:08  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
12:39:08  26  	  FROM DUAL;
12:39:08  27  	END IF;
12:39:08  28  
12:39:08  29  	INSERT INTO TAX (
12:39:08  30  	  ID,
12:39:08  31  	  TAX_TYPE_ID,
12:39:08  32  	  CALCULATED_AMOUNT,
12:39:08  33  	  CREATE_DATE,
12:39:08  34  	  CREATED_BY,
12:39:08  35  	  LINE_ITEM_ID,
12:39:08  36  	  EFFECTIVE_RATE,
12:39:08  37  	  TAXABLE_AMOUNT,
12:39:08  38  	  TAX_RULE_ID,
12:39:08  39  	  JURISDICTION_LEVEL_ID,
12:39:08  40  	  JURISDICTION_NAME,
12:39:08  41  	  JURISDICTION_ID,
12:39:08  42  	  EXT_TAX_TYPE,
12:39:08  43  	  EXT_RESULT,
12:39:08  44  	  IMPOSITION_TYPE,
12:39:08  45  	  IMPOSITION
12:39:08  46  	) VALUES (
12:39:08  47  	  inout_tax_id,
12:39:08  48  	  in_tax_type_id,
12:39:08  49  	  in_calculated_amount,
12:39:08  50  	  var_date,
12:39:08  51  	  in_created_by,
12:39:08  52  	  in_line_item_id,
12:39:08  53  	  in_effective_rate,
12:39:08  54  	  in_taxable_amount,
12:39:08  55  	  in_tax_rule_id,
12:39:08  56  	  in_jurisdiction_level_id,
12:39:08  57  	  in_jurisdiction_name,
12:39:08  58  	  in_jurisdiction_id,
12:39:08  59  	  in_ext_tax_type,
12:39:08  60  	  in_ext_result,
12:39:08  61  	  in_imposition_type,
12:39:08  62  	  in_imposition
12:39:08  63  	);
12:39:08  64  
12:39:08  65  END CREATE_TAX;
12:39:08  66  
12:39:08  67  END PROCS_TAXES_CRU_V16;
12:39:08  68  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.03
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_TRANSACTION (
12:39:08   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
12:39:08   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
12:39:08   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
12:39:08   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
12:39:08   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
12:39:08   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
12:39:08  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:08  11  ) AS
12:39:08  12  -- VARIABLES
12:39:08  13  var_transaction_id TRANSACTION.ID%TYPE;
12:39:08  14  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:08  15  var_date DATE := SYSDATE;
12:39:08  16  BEGIN
12:39:08  17  	IF in_transaction_id IS NULL THEN
12:39:08  18  	  SELECT
12:39:08  19  	    TRN_ID_SEQ.nextVal into var_transaction_id
12:39:08  20  	  FROM DUAL;
12:39:08  21  	ELSE
12:39:08  22  	  var_transaction_id := in_transaction_id;
12:39:08  23  	END IF;
12:39:08  24  	INSERT INTO
12:39:08  25  	  TRANSACTION (
12:39:08  26  	    ID,
12:39:08  27  	    TRANSACTION_STATUS_ID,
12:39:08  28  	    TRANSACTION_AMOUNT,
12:39:08  29  	    CREATE_DATE,
12:39:08  30  	    CREATED_BY,
12:39:08  31  	    UPDATE_DATE,
12:39:08  32  	    UPDATED_BY,
12:39:08  33  	    ORDER_ID,
12:39:08  34  	    IS_REFUND
12:39:08  35  	  ) VALUES (
12:39:08  36  	    var_transaction_id,
12:39:08  37  	    in_transaction_status_id,
12:39:08  38  	    in_transaction_amount,
12:39:08  39  	    var_date,
12:39:08  40  	    in_created_by,
12:39:08  41  	    var_date,
12:39:08  42  	    in_created_by,
12:39:08  43  	    in_order_id,
12:39:08  44  	    in_is_refund
12:39:08  45  	  );
12:39:08  46  
12:39:08  47  	out_transaction_id := var_transaction_id;
12:39:08  48  END CREATE_TRANSACTION;
12:39:08  49  
12:39:08  50  /*******************************************************************/
12:39:08  51  
12:39:08  52  PROCEDURE UPDATE_TRANSACTION (
12:39:08  53  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
12:39:08  54  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
12:39:08  55  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
12:39:08  56  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
12:39:08  57  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
12:39:08  58  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
12:39:08  59  ) AS
12:39:08  60  BEGIN
12:39:08  61  	-- Create history
12:39:08  62  	PROCS_HISTORY_V16.CREATE_TRANSACTION_HISTORY(
12:39:08  63  	  in_transaction_id	       => in_transaction_id,
12:39:08  64  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08  65  	);
12:39:08  66  	UPDATE
12:39:08  67  	  TRANSACTION
12:39:08  68  	SET
12:39:08  69  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
12:39:08  70  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
12:39:08  71  	  UPDATE_DATE		= SYSDATE,
12:39:08  72  	  UPDATED_BY		= in_updated_by,
12:39:08  73  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
12:39:08  74  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
12:39:08  75  	WHERE
12:39:08  76  	  ID = in_transaction_id;
12:39:08  77  END UPDATE_TRANSACTION;
12:39:08  78  
12:39:08  79  /*******************************************************************/
12:39:08  80  
12:39:08  81  PROCEDURE READ_TRANSACTION (
12:39:08  82  	in_transaction_id IN TRANSACTION.ID%TYPE,
12:39:08  83  	out_result_set	  OUT SYS_REFCURSOR
12:39:08  84  ) AS
12:39:08  85  BEGIN
12:39:08  86  	OPEN out_result_set FOR
12:39:08  87  	SELECT
12:39:08  88  	  ID,
12:39:08  89  	  TRANSACTION_STATUS_ID,
12:39:08  90  	  TRANSACTION_AMOUNT,
12:39:08  91  	  CREATE_DATE,
12:39:08  92  	  CREATED_BY,
12:39:08  93  	  UPDATE_DATE,
12:39:08  94  	  UPDATED_BY,
12:39:08  95  	  ORDER_ID,
12:39:08  96  	  IS_REFUND,
12:39:08  97  	  IS_SETTLED
12:39:08  98  	FROM
12:39:08  99  	  TRANSACTION
12:39:08 100  	WHERE
12:39:08 101  	  ID = in_transaction_id;
12:39:08 102  END READ_TRANSACTION;
12:39:08 103  
12:39:08 104  /*******************************************************************/
12:39:08 105  
12:39:08 106  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
12:39:08 107  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
12:39:08 108  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
12:39:08 109  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
12:39:08 110  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
12:39:08 111  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
12:39:08 112  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
12:39:08 113  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
12:39:08 114  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
12:39:08 115  ) AS
12:39:08 116  BEGIN
12:39:08 117  	IF inout_transaction_attempt_id IS NULL THEN
12:39:08 118  	  SELECT
12:39:08 119  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
12:39:08 120  	  FROM DUAL;
12:39:08 121  	END IF;
12:39:08 122  	INSERT INTO TRANSACTION_ATTEMPT (
12:39:08 123  	  ID,
12:39:08 124  	  TRANSACTION_ID,
12:39:08 125  	  EXTERNAL_STATUS_CODE,
12:39:08 126  	  EXTERNAL_STATUS_MESSAGE,
12:39:08 127  	  CREATE_DATE,
12:39:08 128  	  CREATED_BY,
12:39:08 129  	  EXTERNAL_TRANSACTION_ID,
12:39:08 130  	  TRANSACTION_START_TIME,
12:39:08 131  	  TRANSACTION_ATTEMPT_STATUS_ID
12:39:08 132  	) VALUES (
12:39:08 133  	  inout_transaction_attempt_id,
12:39:08 134  	  in_transaction_id,
12:39:08 135  	  in_external_status_code,
12:39:08 136  	  in_external_status_message,
12:39:08 137  	  SYSDATE,
12:39:08 138  	  in_created_by,
12:39:08 139  	  in_external_transaction_id,
12:39:08 140  	  in_transaction_start_time,
12:39:08 141  	  in_status_id
12:39:08 142  	);
12:39:08 143  END;
12:39:08 144  
12:39:08 145  /*******************************************************************/
12:39:08 146  
12:39:08 147  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
12:39:08 148  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
12:39:08 149  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
12:39:08 150  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
12:39:08 151  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
12:39:08 152  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
12:39:08 153  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
12:39:08 154  ) AS
12:39:08 155  BEGIN
12:39:08 156  	UPDATE
12:39:08 157  	  TRANSACTION_ATTEMPT
12:39:08 158  	SET
12:39:08 159  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
12:39:08 160  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
12:39:08 161  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
12:39:08 162  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
12:39:08 163  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
12:39:08 164  	WHERE
12:39:08 165  	  ID = in_transaction_attempt_id;
12:39:08 166  END;
12:39:08 167  
12:39:08 168  /*******************************************************************/
12:39:08 169  
12:39:08 170  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
12:39:08 171  /*
12:39:08 172  Throws exceptions:
12:39:08 173  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:08 174  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
12:39:08 175  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08 176  */
12:39:08 177  	in_transaction_id IN TRANSACTION.ID%TYPE,
12:39:08 178  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
12:39:08 179  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
12:39:08 180  ) AS
12:39:08 181  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
12:39:08 182  -- EXCEPTIONS
12:39:08 183  BAD_TRANSACTION_ID EXCEPTION;
12:39:08 184  BEGIN
12:39:08 185  
12:39:08 186  	PROCS_HISTORY_V16.CREATE_TRANSACTION_HISTORY(
12:39:08 187  	  in_transaction_id	       => in_transaction_id,
12:39:08 188  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08 189  	);
12:39:08 190  
12:39:08 191  	UPDATE
12:39:08 192  	  TRANSACTION
12:39:08 193  	SET
12:39:08 194  	  TRANSACTION.ORDER_ID	 = in_order_id,
12:39:08 195  	  TRANSACTION.UPDATED_BY = in_updated_by,
12:39:08 196  	  TRANSACTION.UPDATE_DATE= SYSDATE
12:39:08 197  	WHERE
12:39:08 198  	  TRANSACTION.ID = in_transaction_id
12:39:08 199  	  AND TRANSACTION.ORDER_ID IS NULL;
12:39:08 200  
12:39:08 201  	IF SQL%ROWCOUNT = 0 THEN
12:39:08 202  	  RAISE BAD_TRANSACTION_ID;
12:39:08 203  	END IF;
12:39:08 204  EXCEPTION
12:39:08 205  WHEN BAD_TRANSACTION_ID THEN
12:39:08 206  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:08 207  	  SPROC_NAME, 'No such transaction');
12:39:08 208  END UPDATE_TRANSACTION_ORDER_ID;
12:39:08 209  
12:39:08 210  END PROCS_TRANSACTION_CRU_V16;
12:39:08 211  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.03
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_ADDRESS(
12:39:08   4  /*
12:39:08   5  Throws exceptions:
12:39:08   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08   7  */
12:39:08   8  	  out_address_id	OUT NUMBER,
12:39:08   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
12:39:08  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
12:39:08  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
12:39:08  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
12:39:08  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:08  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
12:39:08  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
12:39:08  16  ) AS
12:39:08  17  -- VARIABLES
12:39:08  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
12:39:08  19  -- EXCEPTIONS
12:39:08  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:08  21  BEGIN
12:39:08  22  
12:39:08  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V16.CREATE_ADDRESS(
12:39:08  24  	  out_address_id      => out_address_id,
12:39:08  25  	  in_address_id       => null,
12:39:08  26  	  in_address1	      => in_address1,
12:39:08  27  	  in_address2	      => in_address2,
12:39:08  28  	  in_city	      => in_city,
12:39:08  29  	  in_state	      => in_state,
12:39:08  30  	  in_postal_code      => in_postal_code,
12:39:08  31  	  in_country	      => in_country,
12:39:08  32  	  in_created_by       => in_created_by
12:39:08  33  	);
12:39:08  34  
12:39:08  35  END CREATE_ADDRESS;
12:39:08  36  
12:39:08  37  PROCEDURE UPDATE_ADDRESS(
12:39:08  38  /*
12:39:08  39  Throws exceptions:
12:39:08  40  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  41  */
12:39:08  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
12:39:08  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
12:39:08  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
12:39:08  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
12:39:08  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
12:39:08  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:08  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
12:39:08  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
12:39:08  50  ) AS
12:39:08  51  BEGIN
12:39:08  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V16.UPDATE_ADDRESS(
12:39:08  53  	  in_address_id 	=> in_address_id,
12:39:08  54  	  in_address1		=> in_address1,
12:39:08  55  	  in_address2		=> in_address2,
12:39:08  56  	  in_city		=> in_city,
12:39:08  57  	  in_state		=> in_state,
12:39:08  58  	  in_postal_code	=> in_postal_code,
12:39:08  59  	  in_country		=> in_country,
12:39:08  60  	  in_updated_by 	=> in_updated_by
12:39:08  61  	);
12:39:08  62  END UPDATE_ADDRESS;
12:39:08  63  
12:39:08  64  PROCEDURE GET_ADDRESS (
12:39:08  65  /*
12:39:08  66  Throws exceptions:
12:39:08  67  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08  68  */
12:39:08  69  	  in_id 		IN ADDRESS.ID%TYPE,
12:39:08  70  	  out_result_set	OUT SYS_REFCURSOR
12:39:08  71  ) AS
12:39:08  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
12:39:08  73  BEGIN
12:39:08  74  
12:39:08  75  OPEN out_result_set FOR
12:39:08  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
12:39:08  77  
12:39:08  78  END GET_ADDRESS;
12:39:08  79  
12:39:08  80  END PROCS_ADDRESS_V16;
12:39:08  81  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.02
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
12:39:08   4  	in_invoice_id		  IN NUMBER,
12:39:08   5  	in_adjustment_reason	  IN VARCHAR2,
12:39:08   6  	in_is_credit		  IN NUMBER,
12:39:08   7  	in_charge_id		  IN NUMBER,
12:39:08   8  	in_business_date	  IN DATE,
12:39:08   9  	in_created_by		  IN VARCHAR2,
12:39:08  10  	out_invoice_adjustment_id OUT NUMBER
12:39:08  11  ) AS
12:39:08  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
12:39:08  13  -- VARIABLES
12:39:08  14  var_current_date	    DATE := SYSDATE;
12:39:08  15  var_new_entity_id     NUMBER;
12:39:08  16  var_inv_adj_reason_id NUMBER;
12:39:08  17  -- EXCEPTIONS
12:39:08  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
12:39:08  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
12:39:08  20  BEGIN
12:39:08  21  
12:39:08  22  	IF in_is_credit != GLOBAL_CONSTANTS_V16.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:08  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
12:39:08  24  	END IF;
12:39:08  25  
12:39:08  26  	BEGIN
12:39:08  27  	  SELECT
12:39:08  28  	    ID into var_inv_adj_reason_id
12:39:08  29  	  FROM
12:39:08  30  	    INVOICE_ADJUSTMENT_REASON
12:39:08  31  	  WHERE
12:39:08  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
12:39:08  33  	  EXCEPTION
12:39:08  34  	    WHEN NO_DATA_FOUND THEN
12:39:08  35  	      RAISE DAB_ADJUSTMENT_REASON;
12:39:08  36  	END;
12:39:08  37  
12:39:08  38  	SELECT
12:39:08  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
12:39:08  40  	FROM
12:39:08  41  	  DUAL;
12:39:08  42  
12:39:08  43  	INSERT INTO INVOICE_ADJUSTMENT (
12:39:08  44  	  ID,
12:39:08  45  	  INVOICE_ID,
12:39:08  46  	  INVOICE_ADJUSTMENT_REASON_ID,
12:39:08  47  	  IS_CREDIT,
12:39:08  48  	  CHARGE_ID,
12:39:08  49  	  ADJUSTMENT_DATE,
12:39:08  50  	  CREATE_DATE,
12:39:08  51  	  CREATED_BY,
12:39:08  52  	  UPDATE_DATE,
12:39:08  53  	  UPDATED_BY
12:39:08  54  	)
12:39:08  55  	VALUES (
12:39:08  56  	  var_new_entity_id,
12:39:08  57  	  in_invoice_id,
12:39:08  58  	  var_inv_adj_reason_id,
12:39:08  59  	  in_is_credit,
12:39:08  60  	  in_charge_id,
12:39:08  61  	  in_business_date,
12:39:08  62  	  var_current_date,
12:39:08  63  	  in_created_by,
12:39:08  64  	  var_current_date,
12:39:08  65  	  in_created_by
12:39:08  66  	);
12:39:08  67  
12:39:08  68  	out_invoice_adjustment_id := var_new_entity_id;
12:39:08  69  
12:39:08  70  EXCEPTION
12:39:08  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
12:39:08  72  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:08  73  	  SPROC_NAME, 'Bad in_is_credit value');
12:39:08  74  WHEN DAB_ADJUSTMENT_REASON THEN
12:39:08  75  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:08  76  	  SPROC_NAME, 'Bad adjustment reason');
12:39:08  77  WHEN OTHERS THEN
12:39:08  78  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08  80  END CREATE_INVOICE_ADJUSTMENT;
12:39:08  81  
12:39:08  82  /******************************************************************************/
12:39:08  83  
12:39:08  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
12:39:08  85  	  in_invoice_id 	    IN NUMBER,
12:39:08  86  	  in_original_charge_id     IN NUMBER,
12:39:08  87  	  in_charge_id		    IN NUMBER,
12:39:08  88  	  in_updated_by 	    IN VARCHAR2
12:39:08  89  ) AS
12:39:08  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
12:39:08  91  -- VARIABLES
12:39:08  92  var_invoice_adjustment_id NUMBER;
12:39:08  93  -- EXCEPTIONS
12:39:08  94  BAD_CHARGE_ID  EXCEPTION;
12:39:08  95  BEGIN
12:39:08  96  
12:39:08  97  	BEGIN
12:39:08  98  	  SELECT
12:39:08  99  	    id into var_invoice_adjustment_id
12:39:08 100  	  FROM
12:39:08 101  	    INVOICE_ADJUSTMENT
12:39:08 102  	  WHERE INVOICE_ID = in_invoice_id
12:39:08 103  	  AND CHARGE_ID = in_original_charge_id;
12:39:08 104  	  EXCEPTION
12:39:08 105  	    WHEN NO_DATA_FOUND THEN
12:39:08 106  	      RAISE BAD_CHARGE_ID;
12:39:08 107  	END;
12:39:08 108  
12:39:08 109  	--create history
12:39:08 110  	PROCS_HISTORY_V16.CREATE_INVOICE_ADJ_HISTORY(
12:39:08 111  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
12:39:08 112  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:08 113  	);
12:39:08 114  
12:39:08 115  	UPDATE INVOICE_ADJUSTMENT
12:39:08 116  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
12:39:08 117  	WHERE ID = var_invoice_adjustment_id;
12:39:08 118  
12:39:08 119  EXCEPTION
12:39:08 120  WHEN BAD_CHARGE_ID THEN
12:39:08 121  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:08 122  	  SPROC_NAME, 'Bad charge id');
12:39:08 123  WHEN OTHERS THEN
12:39:08 124  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 125  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 126  END UPDATE_INVOICE_ADJUSTMENT;
12:39:08 127  
12:39:08 128  /******************************************************************************/
12:39:08 129  
12:39:08 130  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
12:39:08 131  	in_line_item_id 	    IN NUMBER,
12:39:08 132  	in_invoice_adjustment_id    IN NUMBER,
12:39:08 133  	in_amount		    IN NUMBER,
12:39:08 134  	in_tax			    IN NUMBER,
12:39:08 135  	in_discount		    IN NUMBER,
12:39:08 136  	in_created_by		    IN VARCHAR2,
12:39:08 137  	out_line_item_adjustment_id OUT NUMBER
12:39:08 138  ) AS
12:39:08 139  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
12:39:08 140  -- VARIABLES
12:39:08 141  var_current_date DATE := SYSDATE;
12:39:08 142  var_new_entity_id NUMBER;
12:39:08 143  BEGIN
12:39:08 144  
12:39:08 145  	SELECT
12:39:08 146  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
12:39:08 147  	FROM
12:39:08 148  	  DUAL;
12:39:08 149  
12:39:08 150  	INSERT INTO LINE_ITEM_ADJUSTMENT (
12:39:08 151  	  ID,
12:39:08 152  	  LINE_ITEM_ID,
12:39:08 153  	  INVOICE_ADJUSTMENT_ID,
12:39:08 154  	  AMOUNT,
12:39:08 155  	  TAX,
12:39:08 156  	  DISCOUNT,
12:39:08 157  	  CREATE_DATE,
12:39:08 158  	  CREATED_BY
12:39:08 159  	)
12:39:08 160  	VALUES (
12:39:08 161  	  var_new_entity_id,
12:39:08 162  	  in_line_item_id,
12:39:08 163  	  in_invoice_adjustment_id,
12:39:08 164  	  in_amount,
12:39:08 165  	  in_tax,
12:39:08 166  	  in_discount,
12:39:08 167  	  var_current_date,
12:39:08 168  	  in_created_by
12:39:08 169  	);
12:39:08 170  
12:39:08 171  	out_line_item_adjustment_id := var_new_entity_id;
12:39:08 172  
12:39:08 173  EXCEPTION
12:39:08 174  WHEN OTHERS THEN
12:39:08 175  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 176  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 177  END CREATE_LINE_ITEM_ADJUSTMENT;
12:39:08 178  
12:39:08 179  /******************************************************************************/
12:39:08 180  
12:39:08 181  PROCEDURE CREATE_TAX_ADJUSTMENT (
12:39:08 182  	in_tax_id		   IN NUMBER,
12:39:08 183  	in_line_item_adjustment_id IN NUMBER,
12:39:08 184  	in_amount		   IN NUMBER,
12:39:08 185  	in_created_by		   IN VARCHAR2,
12:39:08 186  	out_tax_adjustment_id	   OUT NUMBER
12:39:08 187  ) AS
12:39:08 188  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
12:39:08 189  -- VARIABLES
12:39:08 190  var_current_date DATE := SYSDATE;
12:39:08 191  var_new_entity_id NUMBER;
12:39:08 192  BEGIN
12:39:08 193  
12:39:08 194  	SELECT
12:39:08 195  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
12:39:08 196  	FROM
12:39:08 197  	  DUAL;
12:39:08 198  
12:39:08 199  	INSERT INTO TAX_ADJUSTMENT (
12:39:08 200  	  ID,
12:39:08 201  	  TAX_ID,
12:39:08 202  	  LINE_ITEM_ADJUSTMENT_ID,
12:39:08 203  	  AMOUNT,
12:39:08 204  	  CREATE_DATE,
12:39:08 205  	  CREATED_BY
12:39:08 206  	)
12:39:08 207  	VALUES (
12:39:08 208  	  var_new_entity_id,
12:39:08 209  	  in_tax_id,
12:39:08 210  	  in_line_item_adjustment_id,
12:39:08 211  	  in_amount,
12:39:08 212  	  var_current_date,
12:39:08 213  	  in_created_by
12:39:08 214  	);
12:39:08 215  
12:39:08 216  	out_tax_adjustment_id := var_new_entity_id;
12:39:08 217  
12:39:08 218  EXCEPTION
12:39:08 219  WHEN OTHERS THEN
12:39:08 220  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 222  END CREATE_TAX_ADJUSTMENT;
12:39:08 223  
12:39:08 224  /******************************************************************************/
12:39:08 225  
12:39:08 226  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
12:39:08 227  	in_discount_id		   NUMBER,
12:39:08 228  	in_line_item_id 	   NUMBER,
12:39:08 229  	in_line_item_adjustment_id IN NUMBER,
12:39:08 230  	in_amount		   IN NUMBER,
12:39:08 231  	in_created_by		   IN VARCHAR2,
12:39:08 232  	out_discount_li_id	   OUT NUMBER
12:39:08 233  ) AS
12:39:08 234  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
12:39:08 235  -- VARIABLES
12:39:08 236  var_current_date DATE := SYSDATE;
12:39:08 237  var_new_entity_id NUMBER;
12:39:08 238  BEGIN
12:39:08 239  
12:39:08 240  	SELECT
12:39:08 241  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
12:39:08 242  	FROM
12:39:08 243  	  DUAL;
12:39:08 244  
12:39:08 245  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
12:39:08 246  	  ID,
12:39:08 247  	  DISCOUNT_ID,
12:39:08 248  	  LINE_ITEM_ID,
12:39:08 249  	  LINE_ITEM_ADJUSTMENT_ID,
12:39:08 250  	  AMOUNT,
12:39:08 251  	  CREATE_DATE,
12:39:08 252  	  CREATED_BY
12:39:08 253  	)
12:39:08 254  	VALUES (
12:39:08 255  	  var_new_entity_id,
12:39:08 256  	  in_discount_id,
12:39:08 257  	  in_line_item_id,
12:39:08 258  	  in_line_item_adjustment_id,
12:39:08 259  	  in_amount,
12:39:08 260  	  var_current_date,
12:39:08 261  	  in_created_by
12:39:08 262  	);
12:39:08 263  
12:39:08 264  	out_discount_li_id := var_new_entity_id;
12:39:08 265  
12:39:08 266  EXCEPTION
12:39:08 267  WHEN OTHERS THEN
12:39:08 268  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:08 269  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:08 270  END CREATE_DISCOUNT_LI_ADJUSTMENT;
12:39:08 271  
12:39:08 272  END PROCS_ADJUSTMENTS_V16;
12:39:08 273  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.04
12:39:08 SQL> 
12:39:08 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V16" AS
12:39:08   2  
12:39:08   3  PROCEDURE GET_SUB_ADX_INFO (
12:39:08   4  /*
12:39:08   5  Throws exceptions:
12:39:08   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:08   7  */
12:39:08   8  	out_result_set	    OUT SYS_REFCURSOR,
12:39:08   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
12:39:08  10  ) AS
12:39:08  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
12:39:08  12  BEGIN
12:39:08  13  OPEN out_result_set FOR
12:39:08  14  SELECT /*+ FIRST_ROWS(5) */
12:39:08  15  	s.offer_chain_id,
12:39:08  16  	s.create_date,
12:39:08  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
12:39:08  18  	ocmd.value,
12:39:08  19  	a.group_id,
12:39:08  20  	s.id subscription_id
12:39:08  21  FROM
12:39:08  22  	account a,
12:39:08  23  	subscription s,
12:39:08  24  	offer_chain_meta_data ocmd,
12:39:08  25  	group_account g,
12:39:08  26  	subscription_share ss,
12:39:08  27  	account a2
12:39:08  28  WHERE
12:39:08  29  	s.account_id = a.id and
12:39:08  30  	s.offer_chain_id = ocmd.offer_chain_id and
12:39:08  31  	g.id = ss.group_account_id and
12:39:08  32  	ss.borrower_account_id = a2.id and
12:39:08  33  	s.id = g.subscription_id and
12:39:08  34  	ocmd.name = 'ADX_BUNDLE' and
12:39:08  35  	a2.group_id = in_group_id and
12:39:08  36  	rownum < 5
12:39:08  37  union all
12:39:08  38  SELECT /*+ FIRST_ROWS(5) */
12:39:08  39  	s.offer_chain_id,
12:39:08  40  	s.create_date,
12:39:08  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
12:39:08  42  	ocmd.value,
12:39:08  43  	a.group_id,
12:39:08  44  	s.id subscription_id
12:39:08  45  FROM
12:39:08  46  	account a,
12:39:08  47  	subscription s,
12:39:08  48  	offer_chain_meta_data ocmd
12:39:08  49  WHERE
12:39:08  50  	s.account_id = a.id and
12:39:08  51  	s.offer_chain_id = ocmd.offer_chain_id and
12:39:08  52  	ocmd.name = 'ADX_BUNDLE' and
12:39:08  53  	a.group_id = in_group_id and
12:39:08  54  	rownum < 5
12:39:08  55  ;
12:39:08  56  
12:39:08  57  END GET_SUB_ADX_INFO;
12:39:08  58  
12:39:08  59  END PROCS_ADX_V16;
12:39:08  60  .
12:39:08 SQL> /

Package body created.

Elapsed: 00:00:00.08
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V16" AS
12:39:09   2  
12:39:09   3  PROCEDURE CREATE_AMAZON_SUB(
12:39:09   4  /*
12:39:09   5  Throws exceptions:
12:39:09   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09   7  */
12:39:09   8  	  out_id	      OUT NUMBER,
12:39:09   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
12:39:09  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
12:39:09  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
12:39:09  12  ) AS
12:39:09  13  -- VARIABLES
12:39:09  14  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
12:39:09  15  -- EXCEPTIONS
12:39:09  16  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09  17  BEGIN
12:39:09  18  
12:39:09  19  	CORE_OWNER.PROCS_AMAZON_CRU_V16.CREATE_AMAZON_SUB(
12:39:09  20  	  out_id	      =>  out_id,
12:39:09  21  	  in_subscription_id  =>  in_subscription_id,
12:39:09  22  	  in_amazon_id	      =>  in_amazon_id,
12:39:09  23  	  in_created_by       =>  in_created_by
12:39:09  24  	);
12:39:09  25  
12:39:09  26  END CREATE_AMAZON_SUB;
12:39:09  27  
12:39:09  28  PROCEDURE GET_ACTIVE_SUB_IDS (
12:39:09  29  /*
12:39:09  30  Throws exceptions:
12:39:09  31  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09  32  */
12:39:09  33  	out_result_set	    OUT SYS_REFCURSOR,
12:39:09  34  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
12:39:09  35  ) AS
12:39:09  36  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
12:39:09  37  BEGIN
12:39:09  38  OPEN out_result_set FOR
12:39:09  39  SELECT s.id
12:39:09  40  FROM subscription s, amazon_sub am
12:39:09  41  WHERE
12:39:09  42  	s.id = am.subscription_id
12:39:09  43  	and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:09  44  	and am.amazon_id = in_amazon_id
12:39:09  45  ;
12:39:09  46  
12:39:09  47  END GET_ACTIVE_SUB_IDS;
12:39:09  48  
12:39:09  49  PROCEDURE GET_ACTIVE_GROUP_IDS (
12:39:09  50  /*
12:39:09  51  Throws exceptions:
12:39:09  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09  53  */
12:39:09  54  	out_result_set	    OUT SYS_REFCURSOR,
12:39:09  55  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
12:39:09  56  ) AS
12:39:09  57  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
12:39:09  58  BEGIN
12:39:09  59  OPEN out_result_set FOR
12:39:09  60  SELECT distinct a.group_id id
12:39:09  61  FROM subscription s, amazon_sub am, account a
12:39:09  62  WHERE
12:39:09  63  	s.id = am.subscription_id
12:39:09  64  	and a.id = s.account_id
12:39:09  65  	and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:09  66  	and am.amazon_id = in_amazon_id
12:39:09  67  ;
12:39:09  68  
12:39:09  69  END GET_ACTIVE_GROUP_IDS;
12:39:09  70  
12:39:09  71  END PROCS_AMAZON_V16;
12:39:09  72  .
12:39:09 SQL> /

Package body created.

Elapsed: 00:00:00.03
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
12:39:09   2  
12:39:09   3  	/****************************************************************************/
12:39:09   4  
12:39:09   5  	PROCEDURE POPULATE_REQUEST_INFO(
12:39:09   6  	  in_hours_prior    IN	NUMBER,
12:39:09   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
12:39:09   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
12:39:09   9  	) AS
12:39:09  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
12:39:09  11  	var_start_date	    DATE := SYSDATE;
12:39:09  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
12:39:09  13  	var_request_file_id NUMBER := 0;
12:39:09  14  	var_license_count   NUMBER := 0;
12:39:09  15  	var_cc_update_count NUMBER := 0;
12:39:09  16  	BEGIN
12:39:09  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
12:39:09  18  	    INSERT INTO CC_REQUEST_FILE (ID,
12:39:09  19  					 FILE_NAME,
12:39:09  20  					 CC_REQUEST_FILE_STATUS,
12:39:09  21  					 CREATE_DATE,
12:39:09  22  					 CREATED_BY,
12:39:09  23  					 UPDATE_DATE,
12:39:09  24  					 UPDATED_BY)
12:39:09  25  					 VALUES (
12:39:09  26  					 var_request_file_id,
12:39:09  27  					 in_filename,
12:39:09  28  					 'NOT_CREATED',
12:39:09  29  					 var_start_date,
12:39:09  30  					 in_creator,
12:39:09  31  					 var_start_date,
12:39:09  32  					 in_creator);
12:39:09  33  
12:39:09  34  	   FOR record IN (SELECT
12:39:09  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
12:39:09  36  			  FROM
12:39:09  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
12:39:09  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
12:39:09  39  			  WHERE
12:39:09  40  			    s.INSTRUMENT_TYPE_ID	 = 1
12:39:09  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
12:39:09  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
12:39:09  43  			    AND l.LICENSE_STATUS_ID	 = 2
12:39:09  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
12:39:09  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
12:39:09  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
12:39:09  47  	   LOOP
12:39:09  48  	     var_license_count := 0;
12:39:09  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
12:39:09  50  
12:39:09  51  	     IF var_license_count = 0 THEN
12:39:09  52  		INSERT INTO CC_UPDATE (ID,
12:39:09  53  				       CREDIT_CARD_ID,
12:39:09  54  				       LICENSE_ID,
12:39:09  55  				       CC_UPDATE_STATUS,
12:39:09  56  				       CC_REQUEST_FILE_ID,
12:39:09  57  				       CREATE_DATE,
12:39:09  58  				       UPDATE_DATE,
12:39:09  59  				       CREATED_BY,
12:39:09  60  				       UPDATED_BY
12:39:09  61  				       ) VALUES (
12:39:09  62  				       CC_UPDATE_SEQ.NEXTVAL,
12:39:09  63  				       record.CREDIT_CARD_ID,
12:39:09  64  				       record.LICENSE_ID,
12:39:09  65  				       'NOT_ADDED_TO_FILE',
12:39:09  66  				       var_request_file_id,
12:39:09  67  				       var_start_date,
12:39:09  68  				       var_start_date,
12:39:09  69  				       in_creator,
12:39:09  70  				       in_creator
12:39:09  71  				       );
12:39:09  72  	     END IF;
12:39:09  73  	   END LOOP;
12:39:09  74  
12:39:09  75  	   SELECT COUNT(1) INTO var_cc_update_count
12:39:09  76  	   FROM CC_UPDATE
12:39:09  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
12:39:09  78  	   IF var_cc_update_count <= 0 THEN
12:39:09  79  	     UPDATE CC_REQUEST_FILE
12:39:09  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
12:39:09  81  	     WHERE ID = var_request_file_id;
12:39:09  82  	   END IF;
12:39:09  83  
12:39:09  84  	END POPULATE_REQUEST_INFO;
12:39:09  85  
12:39:09  86  	/****************************************************************************/
12:39:09  87  
12:39:09  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
12:39:09  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
12:39:09  90  	  in_start	     IN NUMBER,
12:39:09  91  	  in_end	     IN NUMBER,
12:39:09  92  	  out_result_set     OUT SYS_REFCURSOR
12:39:09  93  	) AS
12:39:09  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
12:39:09  95  	var_range_diff	    NUMBER := 0;
12:39:09  96  	var_upper_bond_diff NUMBER := 0;
12:39:09  97  	var_l_start	    NUMBER := 0;
12:39:09  98  	var_l_end	    NUMBER := 0;
12:39:09  99  	BEGIN
12:39:09 100  	  --Normalize the end points [START]
12:39:09 101  	  IF (in_start IS NULL OR in_start < 0) Then
12:39:09 102  	    var_l_start := 0;
12:39:09 103  	  ELSE
12:39:09 104  	    var_l_start := in_start;
12:39:09 105  	  END IF;
12:39:09 106  
12:39:09 107  	  IF (in_end IS NULL) Then
12:39:09 108  	    var_l_end := 500;
12:39:09 109  	  ELSE
12:39:09 110  	    var_l_end := in_end;
12:39:09 111  	  END IF;
12:39:09 112  
12:39:09 113  	  var_l_start := var_l_start + 1;
12:39:09 114  	  var_l_end   := var_l_end   + 1;
12:39:09 115  
12:39:09 116  	  var_range_diff  := var_l_end - var_l_start;
12:39:09 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
12:39:09 118  
12:39:09 119  	  IF (var_upper_bond_diff > 0) Then
12:39:09 120  	    var_l_end := var_l_end - var_upper_bond_diff;
12:39:09 121  	  END IF;
12:39:09 122  	  --Normalize the end points [END]
12:39:09 123  
12:39:09 124  	  OPEN out_result_set FOR
12:39:09 125  	    SELECT CHASE_PROFILE_ID FROM
12:39:09 126  	      (SELECT rownum rnum, q.* FROM
12:39:09 127  		 (SELECT
12:39:09 128  		    cc.CHASE_PROFILE_ID
12:39:09 129  		  FROM
12:39:09 130  		    CREDIT_CARD cc,
12:39:09 131  		    CC_UPDATE ccu
12:39:09 132  		  WHERE
12:39:09 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
12:39:09 134  		    AND ccu.CREDIT_CARD_ID = cc.id
12:39:09 135  		) Q
12:39:09 136  	      WHERE rownum <= var_l_end)
12:39:09 137  	    WHERE rnum >= var_l_Start;
12:39:09 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
12:39:09 139  
12:39:09 140  	/****************************************************************************/
12:39:09 141  
12:39:09 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
12:39:09 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
12:39:09 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
12:39:09 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
12:39:09 146  	)AS
12:39:09 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
12:39:09 148  	BEGIN
12:39:09 149  	  UPDATE CC_REQUEST_FILE
12:39:09 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
12:39:09 151  	      UPDATE_DATE = SYSDATE,
12:39:09 152  	      UPDATED_BY  = in_updated_by
12:39:09 153  	  WHERE ID = in_request_file_id;
12:39:09 154  	END UPDATE_REQUEST_FILE_STATUS;
12:39:09 155  
12:39:09 156  	/****************************************************************************/
12:39:09 157  
12:39:09 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
12:39:09 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
12:39:09 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
12:39:09 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
12:39:09 162  	) AS
12:39:09 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
12:39:09 164  	BEGIN
12:39:09 165  	  UPDATE CC_UPDATE
12:39:09 166  	  SET CC_UPDATE_STATUS = in_status,
12:39:09 167  	      UPDATE_DATE      = SYSDATE,
12:39:09 168  	      UPDATED_BY       = in_updated_by
12:39:09 169  	  WHERE
12:39:09 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
12:39:09 171  	END UPDATE_CC_REQUEST_STATUS;
12:39:09 172  
12:39:09 173  	/****************************************************************************/
12:39:09 174  
12:39:09 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
12:39:09 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
12:39:09 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
12:39:09 178  	  out_request_files   OUT SYS_REFCURSOR
12:39:09 179  	) AS
12:39:09 180  	var_older_than_hours NUMBER := in_older_than_hours;
12:39:09 181  	BEGIN
12:39:09 182  	 IF (var_older_than_hours IS NULL) THEN
12:39:09 183  	   var_older_than_hours := -288;
12:39:09 184  	 END IF;
12:39:09 185  
12:39:09 186  	 OPEN out_request_files FOR
12:39:09 187  	 SELECT
12:39:09 188  	   ID,
12:39:09 189  	   FILE_NAME
12:39:09 190  	 FROM
12:39:09 191  	   CC_REQUEST_FILE
12:39:09 192  	 WHERE
12:39:09 193  	   CC_REQUEST_FILE_STATUS = in_status
12:39:09 194  	 AND
12:39:09 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
12:39:09 196  	END REQUEST_FILES_BY_STATUS;
12:39:09 197  
12:39:09 198  	/****************************************************************************/
12:39:09 199  
12:39:09 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
12:39:09 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
12:39:09 202  	  out_count OUT NUMBER
12:39:09 203  	) AS
12:39:09 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
12:39:09 205  	BEGIN
12:39:09 206  	  SELECT COUNT(1) INTO out_count
12:39:09 207  	  FROM CC_UPDATE
12:39:09 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
12:39:09 209  	END COUNT_BY_REQUEST_FILE_ID;
12:39:09 210  
12:39:09 211  	/****************************************************************************/
12:39:09 212  
12:39:09 213  	PROCEDURE GET_CREDIT_CARD_LICENSE (
12:39:09 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
12:39:09 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
12:39:09 216  	  out_card_license     OUT SYS_REFCURSOR
12:39:09 217  	) AS
12:39:09 218  	BEGIN
12:39:09 219  	  OPEN out_card_license FOR
12:39:09 220  	  SELECT
12:39:09 221  	    cc.ID CREDIT_CARD_ID,
12:39:09 222  	    cc.CHASE_PROFILE_ID,
12:39:09 223  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
12:39:09 224  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
12:39:09 225  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
12:39:09 226  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
12:39:09 227  	    a.GROUP_ID,
12:39:09 228  	    u.LICENSE_ID,
12:39:09 229  	    u.ID CC_UPDATE_ID,
12:39:09 230  	    l.END_DATE LICENSE_END_DATE,
12:39:09 231  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
12:39:09 232  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf, ACCOUNT a, LICENSE l
12:39:09 233  	  WHERE cc.ID = u.CREDIT_CARD_ID
12:39:09 234  	  AND u.CC_REQUEST_FILE_ID = rf.ID
12:39:09 235  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
12:39:09 236  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
12:39:09 237  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
12:39:09 238  	  AND cc.ACCOUNT_ID = a.ID
12:39:09 239  	  AND u.LICENSE_ID = l.ID
12:39:09 240  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
12:39:09 241  	  AND SYSDATE BETWEEN l.START_DATE and l.END_DATE
12:39:09 242  	  ORDER BY cc.UPDATE_DATE DESC;
12:39:09 243  	END GET_CREDIT_CARD_LICENSE;
12:39:09 244  
12:39:09 245  	/****************************************************************************/
12:39:09 246  
12:39:09 247  	PROCEDURE UPDATE_CC_UPDATE(
12:39:09 248  	  in_id 	     IN CC_UPDATE.ID%TYPE,
12:39:09 249  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
12:39:09 250  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
12:39:09 251  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
12:39:09 252  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
12:39:09 253  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
12:39:09 254  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
12:39:09 255  	) AS
12:39:09 256  	BEGIN
12:39:09 257  	  UPDATE CC_UPDATE
12:39:09 258  	  SET CC_UPDATE_STATUS = in_status,
12:39:09 259  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
12:39:09 260  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
12:39:09 261  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
12:39:09 262  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
12:39:09 263  	  UPDATE_DATE = SYSDATE,
12:39:09 264  	  UPDATED_BY = in_updated_by
12:39:09 265  	  WHERE ID = in_id;
12:39:09 266  	END UPDATE_CC_UPDATE;
12:39:09 267  
12:39:09 268  	/****************************************************************************/
12:39:09 269  
12:39:09 270  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
12:39:09 271  	  in_id 	IN CC_UPDATE.ID%TYPE,
12:39:09 272  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
12:39:09 273  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
12:39:09 274  	) AS
12:39:09 275  	BEGIN
12:39:09 276  	  UPDATE CC_UPDATE
12:39:09 277  	  SET CC_UPDATE_STATUS = in_status,
12:39:09 278  	  UPDATE_DATE = SYSDATE,
12:39:09 279  	  UPDATED_BY = in_updated_by
12:39:09 280  	  WHERE ID = in_id;
12:39:09 281  	END UPDATE_CC_UPDATE_STATUS;
12:39:09 282  
12:39:09 283  	/****************************************************************************/
12:39:09 284  
12:39:09 285  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
12:39:09 286  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
12:39:09 287  	  out_request_file     OUT SYS_REFCURSOR
12:39:09 288  	) AS
12:39:09 289  	BEGIN
12:39:09 290  	  OPEN out_request_file FOR
12:39:09 291  	  SELECT ID, FILE_NAME
12:39:09 292  	  FROM CC_REQUEST_FILE
12:39:09 293  	  WHERE FILE_NAME = in_request_filename;
12:39:09 294  	END GET_REQUEST_FILE_BY_FILENAME;
12:39:09 295  
12:39:09 296  	/****************************************************************************/
12:39:09 297  
12:39:09 298  	PROCEDURE SUSPEND_CREDIT_CARD (
12:39:09 299  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
12:39:09 300  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
12:39:09 301  	) AS
12:39:09 302  	BEGIN
12:39:09 303  	  -- Create history
12:39:09 304  	  PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
12:39:09 305  	      in_credit_card_id 	   => in_credit_card_id,
12:39:09 306  	      in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:09 307  	  );
12:39:09 308  
12:39:09 309  	  UPDATE CREDIT_CARD
12:39:09 310  	  SET UPDATE_DATE = SYSDATE,
12:39:09 311  	  UPDATED_BY = in_updated_by,
12:39:09 312  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
12:39:09 313  	  WHERE ID = in_credit_card_id;
12:39:09 314  	END SUSPEND_CREDIT_CARD;
12:39:09 315  
12:39:09 316  	/****************************************************************************/
12:39:09 317  
12:39:09 318  	PROCEDURE UPDATE_CREDIT_CARD (
12:39:09 319  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
12:39:09 320  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
12:39:09 321  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
12:39:09 322  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
12:39:09 323  	) AS
12:39:09 324  	BEGIN
12:39:09 325  	  -- Create history
12:39:09 326  	  PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
12:39:09 327  	      in_credit_card_id 	   => in_credit_card_id,
12:39:09 328  	      in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
12:39:09 329  	  );
12:39:09 330  
12:39:09 331  	  UPDATE CREDIT_CARD
12:39:09 332  	  SET UPDATE_DATE = SYSDATE,
12:39:09 333  	  UPDATED_BY = in_updated_by,
12:39:09 334  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
12:39:09 335  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
12:39:09 336  	  WHERE ID = in_credit_card_id;
12:39:09 337  	END UPDATE_CREDIT_CARD;
12:39:09 338  
12:39:09 339  	/****************************************************************************/
12:39:09 340  
12:39:09 341  	PROCEDURE COMPLETABLE_REQUESTS (
12:39:09 342  	  out_request_files OUT SYS_REFCURSOR
12:39:09 343  	) AS
12:39:09 344  	BEGIN
12:39:09 345  	  OPEN out_request_files FOR
12:39:09 346  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
12:39:09 347  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
12:39:09 348  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
12:39:09 349  	  AND rf.ID = u.CC_REQUEST_FILE_ID
12:39:09 350  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
12:39:09 351  	  MINUS
12:39:09 352  	  SELECT rf.ID, rf.FILE_NAME
12:39:09 353  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
12:39:09 354  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
12:39:09 355  	  AND rf.ID = u.CC_REQUEST_FILE_ID
12:39:09 356  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
12:39:09 357  	END COMPLETABLE_REQUESTS;
12:39:09 358  
12:39:09 359  	/****************************************************************************/
12:39:09 360  
12:39:09 361  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
12:39:09 362  	  in_max_hours_before_report IN  NUMBER,
12:39:09 363  	  out_request_files	     OUT SYS_REFCURSOR
12:39:09 364  	) AS
12:39:09 365  	BEGIN
12:39:09 366  	  OPEN out_request_files FOR
12:39:09 367  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
12:39:09 368  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
12:39:09 369  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
12:39:09 370  	  AND rf.ID = u.CC_REQUEST_FILE_ID
12:39:09 371  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
12:39:09 372  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
12:39:09 373  	  MINUS
12:39:09 374  	  SELECT rf.ID, rf.FILE_NAME
12:39:09 375  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
12:39:09 376  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
12:39:09 377  	  AND rf.ID = u.CC_REQUEST_FILE_ID
12:39:09 378  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
12:39:09 379  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
12:39:09 380  	END COMPLETABLE_REQUESTS_W_FAILS;
12:39:09 381  
12:39:09 382  END PROCS_CUPY;
12:39:09 383  .
12:39:09 SQL> /

Package body created.

Elapsed: 00:00:00.39
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE
12:39:09   2  PACKAGE BODY PROCS_ENTITLEMENT_V16 AS
12:39:09   3  
12:39:09   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
12:39:09   5  	  in_subscription_id IN NUMBER,
12:39:09   6  	  out_uri OUT VARCHAR2)
12:39:09   7  	AS
12:39:09   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
12:39:09   9  	  UNKNOWN_ERROR   EXCEPTION;
12:39:09  10  	BEGIN
12:39:09  11  	  SELECT
12:39:09  12  	    POMD.VALUE INTO out_uri
12:39:09  13  	  FROM
12:39:09  14  	     OFFER_PRODUCT_OFFERING OPO,
12:39:09  15  	     PRODUCT_OFFERING PO,
12:39:09  16  	     OFFER_OFFER_CHAIN OOC,
12:39:09  17  	     SUBSCRIPTION S,
12:39:09  18  	     LICENSE LL,
12:39:09  19  	     PRODUCT_OFFERING_META_DATA POMD
12:39:09  20  	  WHERE
12:39:09  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
12:39:09  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
12:39:09  23  	     S.ID = in_subscription_id AND
12:39:09  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
12:39:09  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
12:39:09  26  	     PO.CAPABILITY_ID = 1 AND
12:39:09  27  	     S.ID = LL.SUBSCRIPTION_ID AND
12:39:09  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
12:39:09  29  	     NAME = 'entitlement_uri' AND
12:39:09  30  	     rownum < 2;
12:39:09  31  	EXCEPTION
12:39:09  32  	  WHEN OTHERS THEN
12:39:09  33  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
12:39:09  36  
12:39:09  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
12:39:09  38  	  in_group_id	 IN  NUMBER,
12:39:09  39  	  out_result_set OUT SYS_REFCURSOR)
12:39:09  40  	AS
12:39:09  41  	  -- CONSTANTS
12:39:09  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
12:39:09  43  	  -- EXCEPTIONS
12:39:09  44  	  NOT_FOUND	  EXCEPTION;
12:39:09  45  	  UNKNOWN_ERROR   EXCEPTION;
12:39:09  46  	  -- VARIABLES
12:39:09  47  	  var_subs	  SYS_REFCURSOR;
12:39:09  48  	BEGIN
12:39:09  49  	  OPEN out_result_set FOR
12:39:09  50  
12:39:09  51  	SELECT
12:39:09  52  	  C.CODE NAME,
12:39:09  53  	  C.DESCRIPTION,
12:39:09  54  	  0 INHERITED,
12:39:09  55  	  C.SHAREABLE,
12:39:09  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
12:39:09  57  	FROM
12:39:09  58  	  SUBSCRIPTION SB
12:39:09  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
12:39:09  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
12:39:09  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
12:39:09  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
12:39:09  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
12:39:09  64  	WHERE
12:39:09  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
12:39:09  66  	  AND LIC.START_DATE <= SYSDATE
12:39:09  67  	  AND AC.GROUP_ID = in_group_id
12:39:09  68  	GROUP BY
12:39:09  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
12:39:09  70  UNION ALL
12:39:09  71  	SELECT
12:39:09  72  	  C.CODE NAME,
12:39:09  73  	  C.DESCRIPTION,
12:39:09  74  	  1 INHERITED,
12:39:09  75  	  C.SHAREABLE,
12:39:09  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
12:39:09  77  	FROM
12:39:09  78  	  ACCOUNT BORROWER,
12:39:09  79  	  SUBSCRIPTION S,
12:39:09  80  	  LICENSE LIC,
12:39:09  81  	  OFFER_PRODUCT_OFFERING OPO,
12:39:09  82  	  PRODUCT_OFFERING PO,
12:39:09  83  	  CAPABILITY C,
12:39:09  84  	  GROUP_ACCOUNT GA,
12:39:09  85  	  SUBSCRIPTION_SHARE SS
12:39:09  86  	WHERE
12:39:09  87  	  BORROWER.GROUP_ID = in_group_id
12:39:09  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
12:39:09  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
12:39:09  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
12:39:09  91  	  AND PO.CAPABILITY_ID = C.ID
12:39:09  92  	  AND GA.SUBSCRIPTION_ID = S.ID
12:39:09  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
12:39:09  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
12:39:09  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
12:39:09  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
12:39:09  97  	  AND C.SHAREABLE = 1
12:39:09  98  	GROUP BY
12:39:09  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
12:39:09 100  
12:39:09 101  	EXCEPTION
12:39:09 102  	  WHEN OTHERS THEN
12:39:09 103  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 105  	END GET_ALL_ENTITLEMENTS;
12:39:09 106  
12:39:09 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
12:39:09 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:09 109  	  out_result_set OUT SYS_REFCURSOR)
12:39:09 110  	AS
12:39:09 111  	  -- CONSTANTS
12:39:09 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
12:39:09 113  	  -- EXCEPTIONS
12:39:09 114  	  NOT_FOUND	  EXCEPTION;
12:39:09 115  	  UNKNOWN_ERROR   EXCEPTION;
12:39:09 116  	  -- VARIABLES
12:39:09 117  	  var_subs	  SYS_REFCURSOR;
12:39:09 118  	BEGIN
12:39:09 119  	  OPEN out_result_set FOR
12:39:09 120  
12:39:09 121  	      SELECT
12:39:09 122  		c.code NAME,
12:39:09 123  		C.DESCRIPTION,
12:39:09 124  		0 INHERITED,
12:39:09 125  		C.SHAREABLE,
12:39:09 126  		sysdate as EXPIRES
12:39:09 127  	      FROM
12:39:09 128  		offer_offer_chain ooc,
12:39:09 129  		offer o,
12:39:09 130  		offer_product_offering opo,
12:39:09 131  		product_offering po,
12:39:09 132  		capability c
12:39:09 133  	      WHERE
12:39:09 134  		o.id = ooc.offer_id AND
12:39:09 135  		opo.offer_id = o.id AND
12:39:09 136  		po.id = opo.product_offering_id AND
12:39:09 137  		c.id = po.capability_id AND
12:39:09 138  		c.id !=0 AND
12:39:09 139  		ooc.offer_chain_id =
12:39:09 140  		(SELECT
12:39:09 141  		    ocmd.offer_chain_id
12:39:09 142  		  FROM
12:39:09 143  		      offer_chain_meta_data ocmd
12:39:09 144  		  WHERE
12:39:09 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
12:39:09 146  		      ocmd.value = in_product_id AND
12:39:09 147  		      rownum < 2
12:39:09 148  		)
12:39:09 149  	      ;
12:39:09 150  
12:39:09 151  	EXCEPTION
12:39:09 152  	  WHEN OTHERS THEN
12:39:09 153  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 155  	END GET_ITUNES_ENTITLEMENTS;
12:39:09 156  
12:39:09 157  END PROCS_ENTITLEMENT_V16;
12:39:09 158  .
12:39:09 SQL> /

Package body created.

Elapsed: 00:00:00.04
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V16" AS
12:39:09   2  
12:39:09   3  PROCEDURE CREATE_ADDRESS_HISTORY(
12:39:09   4  	in_address_id		     IN NUMBER,
12:39:09   5  	in_system_activity_reason_id IN NUMBER
12:39:09   6  ) AS
12:39:09   7  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
12:39:09   8  -- VARIABLES
12:39:09   9  var_address1    ADDRESS.ADDRESS1%TYPE;
12:39:09  10  var_address2    ADDRESS.ADDRESS2%TYPE;
12:39:09  11  var_city	      ADDRESS.CITY%TYPE;
12:39:09  12  var_state       ADDRESS.STATE%TYPE;
12:39:09  13  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
12:39:09  14  var_country     ADDRESS.COUNTRY%TYPE;
12:39:09  15  var_created_by  ADDRESS.CREATED_BY%TYPE;
12:39:09  16  var_create_date ADDRESS.CREATE_DATE%TYPE;
12:39:09  17  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
12:39:09  18  var_update_date ADDRESS.UPDATE_DATE%TYPE;
12:39:09  19  -- EXCEPTIONS
12:39:09  20  BAD_ADDRESS_ID	     EXCEPTION;
12:39:09  21  CAN_NOT_CREATE_HISTORY EXCEPTION;
12:39:09  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09  23  BEGIN
12:39:09  24  
12:39:09  25  	BEGIN
12:39:09  26  	  SELECT
12:39:09  27  	    ADDRESS.ADDRESS1,
12:39:09  28  	    ADDRESS.ADDRESS2,
12:39:09  29  	    ADDRESS.CITY,
12:39:09  30  	    ADDRESS.STATE,
12:39:09  31  	    ADDRESS.POSTAL_CODE,
12:39:09  32  	    ADDRESS.COUNTRY,
12:39:09  33  	    ADDRESS.CREATED_BY,
12:39:09  34  	    ADDRESS.CREATE_DATE,
12:39:09  35  	    ADDRESS.UPDATED_BY,
12:39:09  36  	    ADDRESS.UPDATE_DATE
12:39:09  37  	    into
12:39:09  38  	    var_address1,
12:39:09  39  	    var_address2,
12:39:09  40  	    var_city,
12:39:09  41  	    var_state,
12:39:09  42  	    var_postal_code,
12:39:09  43  	    var_country,
12:39:09  44  	    var_created_by,
12:39:09  45  	    var_create_date,
12:39:09  46  	    var_updated_by,
12:39:09  47  	    var_update_date
12:39:09  48  	  FROM
12:39:09  49  	    ADDRESS
12:39:09  50  	  WHERE
12:39:09  51  	    ADDRESS.ID = in_address_id;
12:39:09  52  	  EXCEPTION
12:39:09  53  	    WHEN NO_DATA_FOUND THEN
12:39:09  54  	      RAISE BAD_ADDRESS_ID;
12:39:09  55  	END;
12:39:09  56  
12:39:09  57  	BEGIN
12:39:09  58  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ADDRESS_HISTORY(
12:39:09  59  	    in_address_id,
12:39:09  60  	    in_system_activity_reason_id,
12:39:09  61  	    var_address1,
12:39:09  62  	    var_address2,
12:39:09  63  	    var_city,
12:39:09  64  	    var_state,
12:39:09  65  	    var_postal_code,
12:39:09  66  	    var_country,
12:39:09  67  	    var_created_by,
12:39:09  68  	    var_create_date,
12:39:09  69  	    var_updated_by,
12:39:09  70  	    var_update_date
12:39:09  71  	  );
12:39:09  72  	  EXCEPTION
12:39:09  73  	    WHEN OTHERS THEN
12:39:09  74  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09  75  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09  76  	END;
12:39:09  77  
12:39:09  78  EXCEPTION
12:39:09  79  WHEN BAD_ADDRESS_ID THEN
12:39:09  80  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09  81  	  SPROC_NAME, 'Bad recipientAddress id');
12:39:09  82  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09  83  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09  84  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09  85  WHEN OTHERS THEN
12:39:09  86  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09  87  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09  88  END CREATE_ADDRESS_HISTORY;
12:39:09  89  
12:39:09  90  /********************************************************************/
12:39:09  91  
12:39:09  92  PROCEDURE CREATE_ACCOUNT_HISTORY(
12:39:09  93  	in_account_id		     IN NUMBER,
12:39:09  94  	in_system_activity_reason_id IN NUMBER
12:39:09  95  ) AS
12:39:09  96  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
12:39:09  97  -- VARIABLES
12:39:09  98  var_account_status_id  NUMBER;
12:39:09  99  var_suspend_date	     DATE;
12:39:09 100  var_group_id	     NUMBER;
12:39:09 101  var_instrument_type_id NUMBER;
12:39:09 102  var_instrument_id      NUMBER;
12:39:09 103  var_updated_by	     VARCHAR2(255);
12:39:09 104  var_update_date	     DATE;
12:39:09 105  -- EXCEPTIONS
12:39:09 106  BAD_ACCOUNT_ID	     EXCEPTION;
12:39:09 107  CAN_NOT_CREATE_HISTORY EXCEPTION;
12:39:09 108  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09 109  BEGIN
12:39:09 110  
12:39:09 111  	BEGIN
12:39:09 112  	  SELECT
12:39:09 113  	    ACCOUNT.ACCOUNT_STATUS_ID,
12:39:09 114  	    ACCOUNT.GROUP_ID,
12:39:09 115  	    ACCOUNT.INSTRUMENT_TYPE_ID,
12:39:09 116  	    ACCOUNT.INSTRUMENT_TYPE_ID,
12:39:09 117  	    ACCOUNT.UPDATED_BY,
12:39:09 118  	    ACCOUNT.UPDATE_DATE
12:39:09 119  	    into
12:39:09 120  	    var_account_status_id,
12:39:09 121  	    var_group_id,
12:39:09 122  	    var_instrument_type_id,
12:39:09 123  	    var_instrument_id,
12:39:09 124  	    var_updated_by,
12:39:09 125  	    var_update_date
12:39:09 126  	  FROM
12:39:09 127  	    ACCOUNT
12:39:09 128  	  WHERE
12:39:09 129  	    ACCOUNT.ID = in_account_id;
12:39:09 130  	  EXCEPTION
12:39:09 131  	    WHEN NO_DATA_FOUND THEN
12:39:09 132  	      RAISE BAD_ACCOUNT_ID;
12:39:09 133  	END;
12:39:09 134  
12:39:09 135  	BEGIN
12:39:09 136  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ACCOUNT_HISTORY(
12:39:09 137  	    in_account_id,
12:39:09 138  	    var_suspend_date,
12:39:09 139  	    var_group_id,
12:39:09 140  	    var_updated_by,
12:39:09 141  	    var_update_date,
12:39:09 142  	    in_system_activity_reason_id,
12:39:09 143  	    var_account_status_id,
12:39:09 144  	    var_instrument_type_id,
12:39:09 145  	    var_instrument_id
12:39:09 146  	  );
12:39:09 147  	  EXCEPTION
12:39:09 148  	    WHEN OTHERS THEN
12:39:09 149  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 150  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 151  	END;
12:39:09 152  
12:39:09 153  EXCEPTION
12:39:09 154  WHEN BAD_ACCOUNT_ID THEN
12:39:09 155  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 156  	  SPROC_NAME, 'Bad account id');
12:39:09 157  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 158  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 159  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 160  WHEN OTHERS THEN
12:39:09 161  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 163  END CREATE_ACCOUNT_HISTORY;
12:39:09 164  
12:39:09 165  /********************************************************************/
12:39:09 166  
12:39:09 167  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
12:39:09 168  /*
12:39:09 169  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 170  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 171  */
12:39:09 172  	in_subscription_id	     IN NUMBER,
12:39:09 173  	in_system_activity_reason_id IN NUMBER
12:39:09 174  ) AS
12:39:09 175  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
12:39:09 176  -- VARIABLES
12:39:09 177  var_account_id		    NUMBER;
12:39:09 178  var_purchase_date 	    DATE;
12:39:09 179  var_offer_chain_id	    NUMBER;
12:39:09 180  var_suspend_date		    DATE;
12:39:09 181  var_termination_date	    DATE;
12:39:09 182  var_days_ramaining_adjustment NUMBER;
12:39:09 183  var_sct_id		    NUMBER;
12:39:09 184  var_updated_by		    VARCHAR2(255);
12:39:09 185  var_update_date		    DATE;
12:39:09 186  -- EXCEPTIONS
12:39:09 187  BAD_SUBSCRIPTION_ID    EXCEPTION;
12:39:09 188  CAN_NOT_CREATE_HISTORY EXCEPTION;
12:39:09 189  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09 190  BEGIN
12:39:09 191  
12:39:09 192  	BEGIN
12:39:09 193  	  SELECT
12:39:09 194  	    SUBSCRIPTION.account_id,
12:39:09 195  	    SUBSCRIPTION.PURCHASE_DATE,
12:39:09 196  	    SUBSCRIPTION.OFFER_CHAIN_ID,
12:39:09 197  	    SUBSCRIPTION.SUSPEND_DATE,
12:39:09 198  	    SUBSCRIPTION.TERMINATION_DATE,
12:39:09 199  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
12:39:09 200  	    SUBSCRIPTION.SCT_ID,
12:39:09 201  	    SUBSCRIPTION.UPDATED_BY,
12:39:09 202  	    SUBSCRIPTION.UPDATE_DATE
12:39:09 203  	    into
12:39:09 204  	    var_account_id,
12:39:09 205  	    var_purchase_date,
12:39:09 206  	    var_offer_chain_id,
12:39:09 207  	    var_suspend_date,
12:39:09 208  	    var_termination_date,
12:39:09 209  	    var_days_ramaining_adjustment,
12:39:09 210  	    var_sct_id,
12:39:09 211  	    var_updated_by,
12:39:09 212  	    var_update_date
12:39:09 213  	  FROM
12:39:09 214  	    SUBSCRIPTION
12:39:09 215  	  WHERE
12:39:09 216  	    SUBSCRIPTION.ID = in_subscription_id;
12:39:09 217  	  EXCEPTION
12:39:09 218  	    WHEN NO_DATA_FOUND THEN
12:39:09 219  	      RAISE BAD_SUBSCRIPTION_ID;
12:39:09 220  	END;
12:39:09 221  
12:39:09 222  	BEGIN
12:39:09 223  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_SUBSCRIPTION_HISTORY(
12:39:09 224  	    in_subscription_id,
12:39:09 225  	    var_account_id,
12:39:09 226  	    var_purchase_date,
12:39:09 227  	    var_offer_chain_id,
12:39:09 228  	    var_suspend_date,
12:39:09 229  	    var_termination_date,
12:39:09 230  	    var_days_ramaining_adjustment,
12:39:09 231  	    var_sct_id,
12:39:09 232  	    var_updated_by,
12:39:09 233  	    var_update_date,
12:39:09 234  	    in_system_activity_reason_id
12:39:09 235  	  );
12:39:09 236  	  EXCEPTION
12:39:09 237  	    WHEN OTHERS THEN
12:39:09 238  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 239  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 240  	END;
12:39:09 241  
12:39:09 242  EXCEPTION
12:39:09 243  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:09 244  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 245  	  SPROC_NAME, 'No such subscription');
12:39:09 246  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 247  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 248  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 249  WHEN OTHERS THEN
12:39:09 250  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 251  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 252  END CREATE_SUBSCRIPTION_HISTORY;
12:39:09 253  
12:39:09 254  /********************************************************************/
12:39:09 255  
12:39:09 256  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
12:39:09 257  	in_credit_card_id	      IN NUMBER,
12:39:09 258  	in_system_activity_reason_id  IN NUMBER
12:39:09 259  ) AS
12:39:09 260  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
12:39:09 261  -- VARIABLES
12:39:09 262  var_account_id		     NUMBER;
12:39:09 263  var_instrument_name	     VARCHAR2(255);
12:39:09 264  var_private_card_holder_name   VARCHAR2(256);
12:39:09 265  var_private_street_address     VARCHAR2(256);
12:39:09 266  var_private_street_address2    VARCHAR2(256);
12:39:09 267  var_state 		     VARCHAR2(50);
12:39:09 268  var_city			     VARCHAR2(50);
12:39:09 269  var_postal_code		     VARCHAR2(20);
12:39:09 270  var_country		     CHAR(2);
12:39:09 271  var_last_four_cc		     VARCHAR2(4);
12:39:09 272  var_expiration_date	     DATE;
12:39:09 273  var_credit_card_type_id	     NUMBER;
12:39:09 274  var_secret_token		     VARCHAR2(255);
12:39:09 275  var_chase_profile_id	     VARCHAR2(255);
12:39:09 276  var_credit_card_status_id      NUMBER;
12:39:09 277  var_updated_by		     VARCHAR2(255);
12:39:09 278  var_update_date		     DATE;
12:39:09 279  -- EXCEPTIONS
12:39:09 280  BAD_CREDIT_CARD_ID     EXCEPTION;
12:39:09 281  CAN_NOT_CREATE_HISTORY EXCEPTION;
12:39:09 282  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09 283  BEGIN
12:39:09 284  
12:39:09 285  	BEGIN
12:39:09 286  	  SELECT
12:39:09 287  	    ACCOUNT_ID,
12:39:09 288  	    INSTRUMENT_NAME,
12:39:09 289  	    PRIVATE_CARD_HOLDER_NAME,
12:39:09 290  	    PRIVATE_STREET_ADDRESS,
12:39:09 291  	    PRIVATE_STREET_ADDRESS2,
12:39:09 292  	    STATE,
12:39:09 293  	    CITY,
12:39:09 294  	    POSTAL_CODE,
12:39:09 295  	    COUNTRY,
12:39:09 296  	    LAST_FOUR_CC,
12:39:09 297  	    EXPIRATION_DATE,
12:39:09 298  	    CREDIT_CARD_TYPE_ID,
12:39:09 299  	    SECRET_TOKEN,
12:39:09 300  	    CHASE_PROFILE_ID,
12:39:09 301  	    CREDIT_CARD_STATUS_ID,
12:39:09 302  	    UPDATED_BY,
12:39:09 303  	    UPDATE_DATE
12:39:09 304  	    into
12:39:09 305  	    var_account_id,
12:39:09 306  	    var_instrument_name,
12:39:09 307  	    var_private_card_holder_name,
12:39:09 308  	    var_private_street_address,
12:39:09 309  	    var_private_street_address2,
12:39:09 310  	    var_state,
12:39:09 311  	    var_city,
12:39:09 312  	    var_postal_code,
12:39:09 313  	    var_country,
12:39:09 314  	    var_last_four_cc,
12:39:09 315  	    var_expiration_date,
12:39:09 316  	    var_credit_card_type_id,
12:39:09 317  	    var_secret_token,
12:39:09 318  	    var_chase_profile_id,
12:39:09 319  	    var_credit_card_status_id,
12:39:09 320  	    var_updated_by,
12:39:09 321  	    var_update_date
12:39:09 322  	  FROM
12:39:09 323  	    CREDIT_CARD
12:39:09 324  	  WHERE
12:39:09 325  	    CREDIT_CARD.ID = in_credit_card_id;
12:39:09 326  	  EXCEPTION
12:39:09 327  	    WHEN NO_DATA_FOUND THEN
12:39:09 328  	      RAISE BAD_CREDIT_CARD_ID;
12:39:09 329  	END;
12:39:09 330  
12:39:09 331  	BEGIN
12:39:09 332  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_CREDIT_CARD_HISTORY(
12:39:09 333  	    in_credit_card_id,
12:39:09 334  	    var_account_id,
12:39:09 335  	    var_instrument_name,
12:39:09 336  	    var_private_card_holder_name,
12:39:09 337  	    var_private_street_address,
12:39:09 338  	    var_private_street_address2,
12:39:09 339  	    var_state,
12:39:09 340  	    var_city,
12:39:09 341  	    var_postal_code,
12:39:09 342  	    var_country,
12:39:09 343  	    var_last_four_cc,
12:39:09 344  	    var_expiration_date,
12:39:09 345  	    var_credit_card_type_id,
12:39:09 346  	    var_secret_token,
12:39:09 347  	    var_chase_profile_id,
12:39:09 348  	    var_credit_card_status_id,
12:39:09 349  	    var_updated_by,
12:39:09 350  	    var_update_date,
12:39:09 351  	    in_system_activity_reason_id
12:39:09 352  	  );
12:39:09 353  	  EXCEPTION
12:39:09 354  	    WHEN OTHERS THEN
12:39:09 355  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 356  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 357  	END;
12:39:09 358  
12:39:09 359  EXCEPTION
12:39:09 360  WHEN BAD_CREDIT_CARD_ID THEN
12:39:09 361  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 362  	  SPROC_NAME, 'No such credit card');
12:39:09 363  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 364  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 365  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 366  WHEN OTHERS THEN
12:39:09 367  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 368  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 369  END CREATE_CREDIT_CARD_HISTORY;
12:39:09 370  
12:39:09 371  /********************************************************************/
12:39:09 372  
12:39:09 373  PROCEDURE CREATE_PAYPAL_HISTORY(
12:39:09 374  /*
12:39:09 375  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 376  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 377  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:09 378  */
12:39:09 379  	in_paypal_id		      IN NUMBER,
12:39:09 380  	in_system_activity_reason_id  IN NUMBER
12:39:09 381  ) AS
12:39:09 382  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
12:39:09 383  -- VARIABLES
12:39:09 384  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
12:39:09 385  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
12:39:09 386  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
12:39:09 387  var_created_by		   PAYPAL.CREATED_BY%TYPE;
12:39:09 388  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
12:39:09 389  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
12:39:09 390  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
12:39:09 391  var_state 		   PAYPAL.STATE%TYPE;
12:39:09 392  var_city			   PAYPAL.CITY%TYPE;
12:39:09 393  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
12:39:09 394  var_country		   PAYPAL.COUNTRY%TYPE;
12:39:09 395  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
12:39:09 396  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
12:39:09 397  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
12:39:09 398  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
12:39:09 399  -- EXCEPTION
12:39:09 400  BAD_PAYPAL_ID	  EXCEPTION;
12:39:09 401  CAN_NOT_ADD_HISTORY EXCEPTION;
12:39:09 402  EXCEPTION_MESSAGE   VARCHAR2(1024);
12:39:09 403  BEGIN
12:39:09 404  
12:39:09 405  	BEGIN
12:39:09 406  	  SELECT
12:39:09 407  	    ACCOUNT_ID,
12:39:09 408  	    INSTRUMENT_NAME,
12:39:09 409  	    PRIVATE_EMAIL_ADDRESS,
12:39:09 410  	    UPDATE_DATE,
12:39:09 411  	    UPDATED_BY,
12:39:09 412  	    PAYPAL_STATUS_ID,
12:39:09 413  	    PRIVATE_STREET_ADDRESS,
12:39:09 414  	    PRIVATE_STREET_ADDRESS2,
12:39:09 415  	    STATE,
12:39:09 416  	    CITY,
12:39:09 417  	    POSTAL_CODE,
12:39:09 418  	    COUNTRY,
12:39:09 419  	    EXPIRATION_DATE,
12:39:09 420  	    SECRET_TOKEN
12:39:09 421  	  INTO
12:39:09 422  	    var_account_id,
12:39:09 423  	    var_instrument_name,
12:39:09 424  	    var_private_email_address,
12:39:09 425  	    var_update_date,
12:39:09 426  	    var_updated_by,
12:39:09 427  	    var_paypal_status_id,
12:39:09 428  	    var_paypal_prvt_street_addr,
12:39:09 429  	    var_paypal_prvt_street_addr2,
12:39:09 430  	    var_state,
12:39:09 431  	    var_city,
12:39:09 432  	    var_postal_code,
12:39:09 433  	    var_country,
12:39:09 434  	    var_expiration_date,
12:39:09 435  	    var_secret_token
12:39:09 436  	  FROM
12:39:09 437  	    PAYPAL
12:39:09 438  	  WHERE
12:39:09 439  	    ID = in_paypal_id;
12:39:09 440  	  EXCEPTION
12:39:09 441  	    WHEN NO_DATA_FOUND THEN
12:39:09 442  	      RAISE BAD_PAYPAL_ID;
12:39:09 443  	END;
12:39:09 444  
12:39:09 445  	BEGIN
12:39:09 446  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_PAYPAL_HISTORY(
12:39:09 447  	    in_paypal_id,
12:39:09 448  	    var_account_id,
12:39:09 449  	    var_instrument_name,
12:39:09 450  	    var_private_email_address,
12:39:09 451  	    var_updated_by,
12:39:09 452  	    var_update_date,
12:39:09 453  	    var_paypal_status_id,
12:39:09 454  	    var_paypal_prvt_street_addr,
12:39:09 455  	    var_paypal_prvt_street_addr2,
12:39:09 456  	    var_state,
12:39:09 457  	    var_city,
12:39:09 458  	    var_postal_code,
12:39:09 459  	    var_country,
12:39:09 460  	    var_expiration_date,
12:39:09 461  	    in_system_activity_reason_id,
12:39:09 462  	    var_secret_token
12:39:09 463  	  );
12:39:09 464  	  EXCEPTION
12:39:09 465  	    WHEN OTHERS THEN
12:39:09 466  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 467  	      RAISE CAN_NOT_ADD_HISTORY;
12:39:09 468  	END;
12:39:09 469  
12:39:09 470  EXCEPTION
12:39:09 471  WHEN BAD_PAYPAL_ID THEN
12:39:09 472  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 473  	  SPROC_NAME, 'No such paypal');
12:39:09 474  WHEN CAN_NOT_ADD_HISTORY THEN
12:39:09 475  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 476  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
12:39:09 477  WHEN OTHERS THEN
12:39:09 478  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 479  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 480  END CREATE_PAYPAL_HISTORY;
12:39:09 481  
12:39:09 482  /********************************************************************/
12:39:09 483  
12:39:09 484  PROCEDURE CREATE_GIFT_CERT_HISTORY(
12:39:09 485  	in_gift_certificate_id	      IN NUMBER,
12:39:09 486  	in_system_activity_reason_id  IN NUMBER
12:39:09 487  ) AS
12:39:09 488  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
12:39:09 489  -- VARIABLES
12:39:09 490  var_purchaser_group_id	     NUMBER;
12:39:09 491  var_purchase_invoice_id	     NUMBER;
12:39:09 492  var_offer_chain_id	     NUMBER;
12:39:09 493  var_expiration_date	     DATE;
12:39:09 494  var_purchase_date 	     DATE;
12:39:09 495  var_gift_certificate_status_id NUMBER;
12:39:09 496  var_code			     VARCHAR2(255);
12:39:09 497  var_recipient_name	     VARCHAR2(255);
12:39:09 498  var_gift_message		     VARCHAR2(500);
12:39:09 499  var_recipient_email	     VARCHAR2(255);
12:39:09 500  var_finalized_invoice_id	     NUMBER;
12:39:09 501  var_sender_email		     VARCHAR2(50);
12:39:09 502  var_sender_name		     VARCHAR2(50);
12:39:09 503  var_redemption_date	     DATE;
12:39:09 504  var_redeemer_group_id	     NUMBER;
12:39:09 505  var_cancelation_date	     DATE;
12:39:09 506  var_updated_by		     VARCHAR2(255);
12:39:09 507  var_update_date		     DATE;
12:39:09 508  var_recipient_address_id	     NUMBER;
12:39:09 509  var_redeemer_address_id	     NUMBER;
12:39:09 510  var_recipient_notify_date      DATE;
12:39:09 511  -- EXCEPTIONS
12:39:09 512  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
12:39:09 513  CAN_NOT_CREATE_HISTORY  EXCEPTION;
12:39:09 514  EXCEPTION_MESSAGE       VARCHAR2(1024);
12:39:09 515  BEGIN
12:39:09 516  
12:39:09 517  	BEGIN
12:39:09 518  	  SELECT
12:39:09 519  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
12:39:09 520  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
12:39:09 521  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
12:39:09 522  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
12:39:09 523  	    GIFT_CERTIFICATE.PURCHASE_DATE,
12:39:09 524  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
12:39:09 525  	    GIFT_CERTIFICATE.CODE,
12:39:09 526  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
12:39:09 527  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
12:39:09 528  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
12:39:09 529  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
12:39:09 530  	    GIFT_CERTIFICATE.SENDER_EMAIL,
12:39:09 531  	    GIFT_CERTIFICATE.SENDER_NAME,
12:39:09 532  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
12:39:09 533  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
12:39:09 534  	    GIFT_CERTIFICATE.CANCELATION_DATE,
12:39:09 535  	    GIFT_CERTIFICATE.UPDATED_BY,
12:39:09 536  	    GIFT_CERTIFICATE.UPDATE_DATE,
12:39:09 537  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
12:39:09 538  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
12:39:09 539  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
12:39:09 540  	    into
12:39:09 541  	    var_purchaser_group_id,
12:39:09 542  	    var_purchase_invoice_id,
12:39:09 543  	    var_offer_chain_id,
12:39:09 544  	    var_expiration_date,
12:39:09 545  	    var_purchase_date,
12:39:09 546  	    var_gift_certificate_status_id,
12:39:09 547  	    var_code,
12:39:09 548  	    var_recipient_name,
12:39:09 549  	    var_gift_message,
12:39:09 550  	    var_recipient_email,
12:39:09 551  	    var_finalized_invoice_id,
12:39:09 552  	    var_sender_email,
12:39:09 553  	    var_sender_name,
12:39:09 554  	    var_redemption_date,
12:39:09 555  	    var_redeemer_group_id,
12:39:09 556  	    var_cancelation_date,
12:39:09 557  	    var_updated_by,
12:39:09 558  	    var_update_date,
12:39:09 559  	    var_recipient_address_id,
12:39:09 560  	    var_redeemer_address_id,
12:39:09 561  	    var_recipient_notify_date
12:39:09 562  	  FROM
12:39:09 563  	    GIFT_CERTIFICATE
12:39:09 564  	  WHERE
12:39:09 565  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
12:39:09 566  	END;
12:39:09 567  
12:39:09 568  	BEGIN
12:39:09 569  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_GIFT_CERT_HISTORY(
12:39:09 570  	    in_gift_certificate_id,
12:39:09 571  	    var_purchaser_group_id,
12:39:09 572  	    var_purchase_invoice_id,
12:39:09 573  	    var_offer_chain_id,
12:39:09 574  	    var_expiration_date,
12:39:09 575  	    var_purchase_date,
12:39:09 576  	    var_gift_certificate_status_id,
12:39:09 577  	    var_code,
12:39:09 578  	    var_updated_by,
12:39:09 579  	    var_update_date,
12:39:09 580  	    in_system_activity_reason_id,
12:39:09 581  	    var_recipient_name,
12:39:09 582  	    var_gift_message,
12:39:09 583  	    var_recipient_email,
12:39:09 584  	    var_finalized_invoice_id,
12:39:09 585  	    var_sender_email,
12:39:09 586  	    var_sender_name,
12:39:09 587  	    var_redemption_date,
12:39:09 588  	    var_redeemer_group_id,
12:39:09 589  	    var_cancelation_date,
12:39:09 590  	    var_recipient_address_id,
12:39:09 591  	    var_redeemer_address_id,
12:39:09 592  	    var_recipient_notify_date
12:39:09 593  	  );
12:39:09 594  	  EXCEPTION
12:39:09 595  	    WHEN OTHERS THEN
12:39:09 596  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 597  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 598  	END;
12:39:09 599  
12:39:09 600  EXCEPTION
12:39:09 601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
12:39:09 602  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 603  	  SPROC_NAME, 'No such gift certificate');
12:39:09 604  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 605  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 606  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 607  WHEN OTHERS THEN
12:39:09 608  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 609  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 610  END CREATE_GIFT_CERT_HISTORY;
12:39:09 611  
12:39:09 612  /********************************************************************/
12:39:09 613  
12:39:09 614  PROCEDURE CREATE_TRANSACTION_HISTORY (
12:39:09 615  	in_transaction_id	     IN NUMBER,
12:39:09 616  	in_system_activity_reason_id IN NUMBER
12:39:09 617  ) AS
12:39:09 618  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
12:39:09 619  -- VARIABLES
12:39:09 620  var_transaction_status_id NUMBER;
12:39:09 621  var_transaction_amount	NUMBER(10,2);
12:39:09 622  var_updated_by		VARCHAR2(255);
12:39:09 623  var_update_date		DATE;
12:39:09 624  -- EXCEPTIONS
12:39:09 625  BAD_TRANSACTION_ID     EXCEPTION;
12:39:09 626  CAN_NOT_CREATE_HISTORY EXCEPTION;
12:39:09 627  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09 628  BEGIN
12:39:09 629  
12:39:09 630  	BEGIN
12:39:09 631  	  SELECT
12:39:09 632  	    TRANSACTION.TRANSACTION_STATUS_ID,
12:39:09 633  	    TRANSACTION.TRANSACTION_AMOUNT,
12:39:09 634  	    TRANSACTION.UPDATED_BY,
12:39:09 635  	    TRANSACTION.UPDATE_DATE
12:39:09 636  	    into
12:39:09 637  	    var_transaction_status_id,
12:39:09 638  	    var_transaction_amount,
12:39:09 639  	    var_updated_by,
12:39:09 640  	    var_update_date
12:39:09 641  	  FROM
12:39:09 642  	    TRANSACTION
12:39:09 643  	  WHERE
12:39:09 644  	    TRANSACTION.ID = in_transaction_id;
12:39:09 645  	  EXCEPTION
12:39:09 646  	    WHEN NO_DATA_FOUND THEN
12:39:09 647  	      RAISE BAD_TRANSACTION_ID;
12:39:09 648  	END;
12:39:09 649  
12:39:09 650  	BEGIN
12:39:09 651  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_TRANSACTION_HISTORY(
12:39:09 652  	    in_transaction_id,
12:39:09 653  	    var_transaction_status_id,
12:39:09 654  	    var_transaction_amount,
12:39:09 655  	    var_updated_by,
12:39:09 656  	    var_update_date,
12:39:09 657  	    in_system_activity_reason_id
12:39:09 658  	  );
12:39:09 659  	  EXCEPTION
12:39:09 660  	    WHEN OTHERS THEN
12:39:09 661  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 662  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 663  	END;
12:39:09 664  
12:39:09 665  EXCEPTION
12:39:09 666  WHEN BAD_TRANSACTION_ID THEN
12:39:09 667  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 668  	  SPROC_NAME, 'No such transaction');
12:39:09 669  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 670  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 671  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 672  WHEN OTHERS THEN
12:39:09 673  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 674  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 675  END CREATE_TRANSACTION_HISTORY;
12:39:09 676  
12:39:09 677  /********************************************************************/
12:39:09 678  
12:39:09 679  PROCEDURE CREATE_INVOICE_HISTORY (
12:39:09 680  /*
12:39:09 681  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 682  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 683  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:09 684  */
12:39:09 685  	in_invoice_id		     IN NUMBER,
12:39:09 686  	in_system_activity_reason_id IN NUMBER
12:39:09 687  ) AS
12:39:09 688  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
12:39:09 689  -- VARIABLES
12:39:09 690  var_invoice_status_id NUMBER;
12:39:09 691  var_updated_by	    VARCHAR2(255);
12:39:09 692  var_update_date	    DATE;
12:39:09 693  -- EXCEPTIONS
12:39:09 694  BAD_INVOICE_ID	     EXCEPTION;
12:39:09 695  CAN_NOT_CREATE_HISTORY EXCEPTION;
12:39:09 696  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09 697  BEGIN
12:39:09 698  
12:39:09 699  	BEGIN
12:39:09 700  	  SELECT
12:39:09 701  	    INVOICE.INVOICE_STATUS_ID,
12:39:09 702  	    INVOICE.UPDATED_BY,
12:39:09 703  	    INVOICE.UPDATE_DATE
12:39:09 704  	    into
12:39:09 705  	    var_invoice_status_id,
12:39:09 706  	    var_updated_by,
12:39:09 707  	    var_update_date
12:39:09 708  	  FROM
12:39:09 709  	    INVOICE
12:39:09 710  	  WHERE
12:39:09 711  	    INVOICE.ID = in_invoice_id;
12:39:09 712  	  EXCEPTION
12:39:09 713  	    WHEN NO_DATA_FOUND THEN
12:39:09 714  	      RAISE BAD_INVOICE_ID;
12:39:09 715  	END;
12:39:09 716  
12:39:09 717  	BEGIN
12:39:09 718  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_INVOICE_HISTORY(
12:39:09 719  	    in_invoice_id,
12:39:09 720  	    var_invoice_status_id,
12:39:09 721  	    var_updated_by,
12:39:09 722  	    var_update_date,
12:39:09 723  	    in_system_activity_reason_id
12:39:09 724  	  );
12:39:09 725  	  EXCEPTION
12:39:09 726  	    WHEN OTHERS THEN
12:39:09 727  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 728  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 729  	END;
12:39:09 730  
12:39:09 731  EXCEPTION
12:39:09 732  WHEN BAD_INVOICE_ID THEN
12:39:09 733  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 734  	  SPROC_NAME, 'No such invoice');
12:39:09 735  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 736  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 737  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 738  WHEN OTHERS THEN
12:39:09 739  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 740  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 741  END CREATE_INVOICE_HISTORY;
12:39:09 742  
12:39:09 743  /********************************************************************/
12:39:09 744  
12:39:09 745  PROCEDURE CREATE_LICENSE_HISTORY (
12:39:09 746  /*
12:39:09 747  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 748  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 749  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:09 750  */
12:39:09 751  	in_license_id		     IN NUMBER,
12:39:09 752  	in_system_activity_reason_id IN NUMBER
12:39:09 753  ) AS
12:39:09 754  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
12:39:09 755  -- VARIABLES
12:39:09 756  var_license_status_id	    NUMBER;
12:39:09 757  var_needs_entitlements	    NUMBER;
12:39:09 758  var_start_date		    DATE;
12:39:09 759  var_offer_id		    NUMBER;
12:39:09 760  var_subscription_id	    NUMBER;
12:39:09 761  var_invoice_id		    NUMBER;
12:39:09 762  var_end_date		    DATE;
12:39:09 763  var_is_extension		    NUMBER;
12:39:09 764  var_current_offer_index	    NUMBER;
12:39:09 765  var_current_offer_recurr_num  NUMBER;
12:39:09 766  var_updated_by		    VARCHAR2(255);
12:39:09 767  var_update_date		    DATE;
12:39:09 768  var_entitlement_end_date	    DATE;
12:39:09 769  -- EXCEPTIONS
12:39:09 770  BAD_LICENSE_ID	     EXCEPTION;
12:39:09 771  CAN_NOT_CREATE_HISTORY EXCEPTION;
12:39:09 772  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09 773  BEGIN
12:39:09 774  
12:39:09 775  	BEGIN
12:39:09 776  	  SELECT
12:39:09 777  	    LICENSE.LICENSE_STATUS_ID,
12:39:09 778  	    LICENSE.NEEDS_ENTITLEMENTS,
12:39:09 779  	    LICENSE.START_DATE,
12:39:09 780  	    LICENSE.OFFER_ID,
12:39:09 781  	    LICENSE.SUBSCRIPTION_ID,
12:39:09 782  	    LICENSE.INVOICE_ID,
12:39:09 783  	    LICENSE.END_DATE,
12:39:09 784  	    LICENSE.IS_EXTENSION,
12:39:09 785  	    LICENSE.CURRENT_OFFER_INDEX,
12:39:09 786  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
12:39:09 787  	    LICENSE.UPDATED_BY,
12:39:09 788  	    LICENSE.UPDATE_DATE,
12:39:09 789  	    LICENSE.ENTITLEMENT_END_DATE
12:39:09 790  	    into
12:39:09 791  	    var_license_status_id,
12:39:09 792  	    var_needs_entitlements,
12:39:09 793  	    var_start_date,
12:39:09 794  	    var_offer_id,
12:39:09 795  	    var_subscription_id,
12:39:09 796  	    var_invoice_id,
12:39:09 797  	    var_end_date,
12:39:09 798  	    var_is_extension,
12:39:09 799  	    var_current_offer_index,
12:39:09 800  	    var_current_offer_recurr_num,
12:39:09 801  	    var_updated_by,
12:39:09 802  	    var_update_date,
12:39:09 803  	    var_entitlement_end_date
12:39:09 804  	  FROM
12:39:09 805  	    LICENSE
12:39:09 806  	  WHERE
12:39:09 807  	    LICENSE.ID = in_license_id;
12:39:09 808  	  EXCEPTION
12:39:09 809  	    WHEN NO_DATA_FOUND THEN
12:39:09 810  	      RAISE BAD_LICENSE_ID;
12:39:09 811  	END;
12:39:09 812  
12:39:09 813  	BEGIN
12:39:09 814  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_LICENSE_HISTORY(
12:39:09 815  	    in_license_id,
12:39:09 816  	    var_license_status_id,
12:39:09 817  	    var_needs_entitlements,
12:39:09 818  	    var_start_date,
12:39:09 819  	    var_offer_id,
12:39:09 820  	    var_subscription_id,
12:39:09 821  	    var_invoice_id,
12:39:09 822  	    var_end_date,
12:39:09 823  	    var_updated_by,
12:39:09 824  	    var_update_date,
12:39:09 825  	    var_is_extension,
12:39:09 826  	    var_current_offer_index,
12:39:09 827  	    var_current_offer_recurr_num,
12:39:09 828  	    in_system_activity_reason_id,
12:39:09 829  	    var_entitlement_end_date
12:39:09 830  	  );
12:39:09 831  	  EXCEPTION
12:39:09 832  	    WHEN OTHERS THEN
12:39:09 833  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 834  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 835  	END;
12:39:09 836  
12:39:09 837  EXCEPTION
12:39:09 838  WHEN BAD_LICENSE_ID THEN
12:39:09 839  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 840  	  SPROC_NAME, 'No such license');
12:39:09 841  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 842  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 843  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 844  WHEN OTHERS THEN
12:39:09 845  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 846  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 847  END CREATE_LICENSE_HISTORY;
12:39:09 848  
12:39:09 849  /********************************************************************/
12:39:09 850  
12:39:09 851  PROCEDURE CREATE_CHARGE_HISTORY (
12:39:09 852  /*
12:39:09 853  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 854  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 855  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:09 856  */
12:39:09 857  	in_charge_id		    IN NUMBER,
12:39:09 858  	in_system_activity_reason_id IN NUMBER
12:39:09 859  ) AS
12:39:09 860  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
12:39:09 861  -- VARIABLES
12:39:09 862  var_invoice_id	     NUMBER;
12:39:09 863  var_transaction_id     NUMBER;
12:39:09 864  var_instrument_type_id NUMBER;
12:39:09 865  var_instrument_id      NUMBER;
12:39:09 866  var_charge_amount      NUMBER;
12:39:09 867  var_charge_status_id   NUMBER;
12:39:09 868  var_updated_by	     VARCHAR2(255);
12:39:09 869  var_update_date	     DATE;
12:39:09 870  -- EXCEPTIONS
12:39:09 871  BAD_CHARGE_ID	     EXCEPTION;
12:39:09 872  CAN_NOT_CREATE_HISTORY EXCEPTION;
12:39:09 873  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09 874  BEGIN
12:39:09 875  
12:39:09 876  	BEGIN
12:39:09 877  	  SELECT
12:39:09 878  	    CHARGE.INVOICE_ID,
12:39:09 879  	    CHARGE.TRANSACTION_ID,
12:39:09 880  	    CHARGE.INSTRUMENT_TYPE_ID,
12:39:09 881  	    CHARGE.INSTRUMENT_ID,
12:39:09 882  	    CHARGE.CHARGE_AMOUNT,
12:39:09 883  	    CHARGE.CHARGE_STATUS_ID,
12:39:09 884  	    CHARGE.UPDATED_BY,
12:39:09 885  	    CHARGE.UPDATE_DATE
12:39:09 886  	    into
12:39:09 887  	    var_invoice_id,
12:39:09 888  	    var_transaction_id,
12:39:09 889  	    var_instrument_type_id,
12:39:09 890  	    var_instrument_id,
12:39:09 891  	    var_charge_amount,
12:39:09 892  	    var_charge_status_id,
12:39:09 893  	    var_updated_by,
12:39:09 894  	    var_update_date
12:39:09 895  	  FROM
12:39:09 896  	    CHARGE
12:39:09 897  	  WHERE
12:39:09 898  	    CHARGE.ID = in_charge_id;
12:39:09 899  	  EXCEPTION
12:39:09 900  	    WHEN NO_DATA_FOUND THEN
12:39:09 901  	      RAISE BAD_CHARGE_ID;
12:39:09 902  	END;
12:39:09 903  
12:39:09 904  	BEGIN
12:39:09 905  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_CHARGE_HISTORY (
12:39:09 906  	    in_charge_id,
12:39:09 907  	    var_invoice_id,
12:39:09 908  	    var_transaction_id,
12:39:09 909  	    var_instrument_type_id,
12:39:09 910  	    var_instrument_id,
12:39:09 911  	    var_charge_amount,
12:39:09 912  	    var_updated_by,
12:39:09 913  	    var_update_date,
12:39:09 914  	    var_charge_status_id,
12:39:09 915  	    in_system_activity_reason_id
12:39:09 916  	  );
12:39:09 917  	  EXCEPTION
12:39:09 918  	    WHEN OTHERS THEN
12:39:09 919  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 920  	      RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 921  	END;
12:39:09 922  
12:39:09 923  EXCEPTION
12:39:09 924  WHEN BAD_CHARGE_ID THEN
12:39:09 925  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 926  	  SPROC_NAME, 'No such license');
12:39:09 927  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 928  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 929  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 930  WHEN OTHERS THEN
12:39:09 931  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 933  END CREATE_CHARGE_HISTORY;
12:39:09 934  
12:39:09 935  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
12:39:09 936  /*
12:39:09 937  APP_EXCEPTION_CODES_V14.NOT_FOUND
12:39:09 938  APP_EXCEPTION_CODES_V14.UNKNOWN_ERROR
12:39:09 939  APP_EXCEPTION_CODES_V14.INTERNAL_ERROR
12:39:09 940  */
12:39:09 941  	in_invoice_adjustment_id  IN NUMBER,
12:39:09 942  	in_system_activity_reason_id IN NUMBER
12:39:09 943  ) AS
12:39:09 944  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
12:39:09 945  --VARIABLED
12:39:09 946  var_invoice_adj_id	  INVOICE_ADJUSTMENT.ID%TYPE;
12:39:09 947  var_invoice_id		  INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
12:39:09 948  var_is_credit		  INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
12:39:09 949  var_charge_id		  INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
12:39:09 950  var_adjustment_date	  INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
12:39:09 951  var_create_date		  INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
12:39:09 952  var_created_by		  INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
12:39:09 953  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
12:39:09 954  var_update_date		  INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
12:39:09 955  var_updated_by		  INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
12:39:09 956  BAD_INVOICE_ADJ_ID	  EXCEPTION;
12:39:09 957  CAN_NOT_CREATE_HISTORY	  EXCEPTION;
12:39:09 958  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09 959  BEGIN
12:39:09 960  
12:39:09 961  	BEGIN
12:39:09 962  	  SELECT
12:39:09 963  	    INVOICE_ADJUSTMENT.ID,
12:39:09 964  	    INVOICE_ADJUSTMENT.INVOICE_ID,
12:39:09 965  	    INVOICE_ADJUSTMENT.IS_CREDIT,
12:39:09 966  	    INVOICE_ADJUSTMENT.CHARGE_ID,
12:39:09 967  	    INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
12:39:09 968  	    INVOICE_ADJUSTMENT.CREATE_DATE,
12:39:09 969  	    INVOICE_ADJUSTMENT.CREATED_BY,
12:39:09 970  	    INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
12:39:09 971  	    INVOICE_ADJUSTMENT.UPDATE_DATE,
12:39:09 972  	    INVOICE_ADJUSTMENT.UPDATED_BY
12:39:09 973  	    into
12:39:09 974  	    var_invoice_adj_id,
12:39:09 975  	    var_invoice_id,
12:39:09 976  	    var_is_credit,
12:39:09 977  	    var_charge_id,
12:39:09 978  	    var_adjustment_date,
12:39:09 979  	    var_create_date,
12:39:09 980  	    var_created_by,
12:39:09 981  	    var_invoice_adj_reason_id,
12:39:09 982  	    var_update_date,
12:39:09 983  	    var_updated_by
12:39:09 984  	  FROM
12:39:09 985  	    INVOICE_ADJUSTMENT
12:39:09 986  	  WHERE
12:39:09 987  	    INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
12:39:09 988  	  EXCEPTION
12:39:09 989  	    WHEN NO_DATA_FOUND THEN
12:39:09 990  	      RAISE BAD_INVOICE_ADJ_ID;
12:39:09 991  	END;
12:39:09 992  
12:39:09 993  	BEGIN
12:39:09 994  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V14.CREATE_INVOICE_ADJ_HISTORY (
12:39:09 995  	    var_invoice_adj_id,
12:39:09 996  	    var_invoice_id,
12:39:09 997  	    var_is_credit,
12:39:09 998  	    var_charge_id,
12:39:09 999  	    var_adjustment_date,
12:39:09 1000  	     var_create_date,
12:39:09 1001  	     var_created_by,
12:39:09 1002  	     var_invoice_adj_reason_id,
12:39:09 1003  	     var_update_date,
12:39:09 1004  	     var_updated_by
12:39:09 1005  	   );
12:39:09 1006  	   EXCEPTION
12:39:09 1007  	     WHEN OTHERS THEN
12:39:09 1008  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:09 1009  	       RAISE CAN_NOT_CREATE_HISTORY;
12:39:09 1010  	 END;
12:39:09 1011  
12:39:09 1012  EXCEPTION
12:39:09 1013  WHEN BAD_INVOICE_ADJ_ID THEN
12:39:09 1014  	 PROCS_COMMON_V14.THROW_EXCEPTION(APP_EXCEPTION_CODES_V14.NOT_FOUND,
12:39:09 1015  	   SPROC_NAME, 'No such invoice adjustment');
12:39:09 1016  WHEN CAN_NOT_CREATE_HISTORY THEN
12:39:09 1017  	 PROCS_COMMON_V14.THROW_EXCEPTION(APP_EXCEPTION_CODES_V14.INTERNAL_ERROR,
12:39:09 1018  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
12:39:09 1019  WHEN OTHERS THEN
12:39:09 1020  	 PROCS_COMMON_V14.THROW_EXCEPTION(APP_EXCEPTION_CODES_V14.UNKNOWN_ERROR,
12:39:09 1021  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1022  END CREATE_INVOICE_ADJ_HISTORY;
12:39:09 1023  
12:39:09 1024  END PROCS_HISTORY_V16;
12:39:09 1025  .
12:39:09 SQL> /

Warning: Package Body created with compilation errors.

Elapsed: 00:00:00.11
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V16" AS
12:39:09   2  
12:39:09   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
12:39:09   4  /*
12:39:09   5  Throws exceptions:
12:39:09   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09   7  */
12:39:09   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:09   9  	out_result_set	    OUT SYS_REFCURSOR
12:39:09  10  ) AS
12:39:09  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
12:39:09  12  BEGIN
12:39:09  13  OPEN out_result_set FOR
12:39:09  14  	      SELECT
12:39:09  15  	      i.id as ITUNES_RECEIPT_ID,
12:39:09  16  	      s.id as SUBSCRIPTION_ID,
12:39:09  17  	      s.SUBSCRIPTION_STATUS_ID,
12:39:09  18  	      i.STATUS,
12:39:09  19  	      a.GROUP_ID
12:39:09  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
12:39:09  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
12:39:09  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
12:39:09  23  	      AND a.ID(+) = s.ACCOUNT_ID;
12:39:09  24  END ITUNES_RECEIPT_SUBSCRIPTION;
12:39:09  25  
12:39:09  26  
12:39:09  27  PROCEDURE CREATE_RECEIPT(
12:39:09  28  /*
12:39:09  29  Throws exceptions:
12:39:09  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09  31  */
12:39:09  32  	  out_id      OUT NUMBER,
12:39:09  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
12:39:09  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
12:39:09  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
12:39:09  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
12:39:09  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:09  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
12:39:09  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
12:39:09  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:09  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
12:39:09  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
12:39:09  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
12:39:09  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
12:39:09  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
12:39:09  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
12:39:09  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
12:39:09  48  ) AS
12:39:09  49  -- VARIABLES
12:39:09  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
12:39:09  51  -- EXCEPTIONS
12:39:09  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:09  53  BEGIN
12:39:09  54  
12:39:09  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.CREATE_RECEIPT(
12:39:09  56  	  out_id	      =>  out_id,
12:39:09  57  	  in_subscription_id  =>  in_subscription_id,
12:39:09  58  	  in_receipt	      =>  in_receipt,
12:39:09  59  	  in_status	      =>  in_status,
12:39:09  60  	  in_quantity	      =>  in_quantity,
12:39:09  61  	  in_product_id       =>  in_product_id,
12:39:09  62  	  in_transaction_id   =>  in_transaction_id,
12:39:09  63  	  in_purchase_date    =>  in_purchase_date,
12:39:09  64  	  in_original_transaction_id  =>  in_original_transaction_id,
12:39:09  65  	  in_original_purchase_date => in_original_purchase_date,
12:39:09  66  	  in_app_item_id      =>  in_app_item_id,
12:39:09  67  	  in_version_external_id  =>  in_version_external_id,
12:39:09  68  	  in_bid	      =>  in_bid,
12:39:09  69  	  in_bvrs	      =>  in_bvrs,
12:39:09  70  	  in_expires_date     =>  in_expires_date,
12:39:09  71  	  in_created_by       =>  in_created_by
12:39:09  72  	);
12:39:09  73  
12:39:09  74  END CREATE_RECEIPT;
12:39:09  75  
12:39:09  76  PROCEDURE UPDATE_RECEIPT(
12:39:09  77  /*
12:39:09  78  Throws exceptions:
12:39:09  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09  80  */
12:39:09  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
12:39:09  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
12:39:09  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
12:39:09  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
12:39:09  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
12:39:09  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
12:39:09  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
12:39:09  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
12:39:09  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
12:39:09  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
12:39:09  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
12:39:09  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
12:39:09  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
12:39:09  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
12:39:09  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
12:39:09  96  	  in_is_expired       IN NUMBER
12:39:09  97  ) AS
12:39:09  98  CANCEL_DATE DATE;
12:39:09  99  BEGIN
12:39:09 100  	-- see if cancel date is already set
12:39:09 101  	BEGIN
12:39:09 102  	  SELECT
12:39:09 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
12:39:09 104  	  FROM
12:39:09 105  	    ITUNES_RECEIPT IR
12:39:09 106  	  WHERE
12:39:09 107  	    IR.ID = in_id;
12:39:09 108  	EXCEPTION
12:39:09 109  	  WHEN NO_DATA_FOUND THEN
12:39:09 110  	    CANCEL_DATE := NULL;
12:39:09 111  	END;
12:39:09 112  
12:39:09 113  	-- only update cancel date if it isn't already set and the receipt is expired
12:39:09 114  	IF in_is_expired = 1 THEN
12:39:09 115  	  IF CANCEL_DATE IS NULL THEN
12:39:09 116  	    CANCEL_DATE := SYSDATE;
12:39:09 117  	  END IF;
12:39:09 118  	ELSE
12:39:09 119  	  CANCEL_DATE := NULL;
12:39:09 120  	END IF;
12:39:09 121  
12:39:09 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.UPDATE_RECEIPT(
12:39:09 123  	  in_id => in_id,
12:39:09 124  	  in_receipt => in_receipt,
12:39:09 125  	  in_status => in_status,
12:39:09 126  	  in_quantity => in_quantity,
12:39:09 127  	  in_product_id => in_product_id,
12:39:09 128  	  in_transaction_id => in_transaction_id,
12:39:09 129  	  in_purchase_date => in_purchase_date,
12:39:09 130  	  in_original_transaction_id => in_original_transaction_id,
12:39:09 131  	  in_original_purchase_date => in_original_purchase_date,
12:39:09 132  	  in_app_item_id => in_app_item_id,
12:39:09 133  	  in_version_external_id => in_version_external_id,
12:39:09 134  	  in_bid => in_bid,
12:39:09 135  	  in_bvrs => in_bvrs,
12:39:09 136  	  in_expires_date => in_expires_date,
12:39:09 137  	  in_updated_by => in_updated_by,
12:39:09 138  	  in_cancel_date => CANCEL_DATE
12:39:09 139  	);
12:39:09 140  END UPDATE_RECEIPT;
12:39:09 141  
12:39:09 142  PROCEDURE LINK_ITUNES_RECEIPT(
12:39:09 143  /*
12:39:09 144  Throws exceptions:
12:39:09 145  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 146  */
12:39:09 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
12:39:09 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
12:39:09 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
12:39:09 150  ) AS
12:39:09 151  BEGIN
12:39:09 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.LINK_ITUNES_RECEIPT(
12:39:09 153  		      in_id => in_id,
12:39:09 154  		      in_subscription_id => in_subscription_id,
12:39:09 155  		      in_updated_by => in_updated_by
12:39:09 156  		      );
12:39:09 157  END LINK_ITUNES_RECEIPT;
12:39:09 158  
12:39:09 159  PROCEDURE MARK_RECEIPT_CHECKED(
12:39:09 160  /*
12:39:09 161  Throws exceptions:
12:39:09 162  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 163  */
12:39:09 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
12:39:09 165  ) AS
12:39:09 166  BEGIN
12:39:09 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.MARK_RECEIPT_CHECKED(
12:39:09 168  	  in_id => in_id
12:39:09 169  	);
12:39:09 170  END MARK_RECEIPT_CHECKED;
12:39:09 171  
12:39:09 172  PROCEDURE GET_ITUNES_RECEIPTS (
12:39:09 173  /*
12:39:09 174  Throws exceptions:
12:39:09 175  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 176  */
12:39:09 177  	out_result_set	    OUT SYS_REFCURSOR,
12:39:09 178  	in_row_number	    IN NUMBER DEFAULT 500
12:39:09 179  ) AS
12:39:09 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
12:39:09 181  BEGIN
12:39:09 182  OPEN out_result_set FOR
12:39:09 183  SELECT * FROM
12:39:09 184  (
12:39:09 185  	SELECT * FROM
12:39:09 186  	(
12:39:09 187  	  SELECT
12:39:09 188  	    IR.ID,
12:39:09 189  	    IR.SUBSCRIPTION_ID,
12:39:09 190  	    IR.RECEIPT,
12:39:09 191  	    IR.STATUS,
12:39:09 192  	    IR.QUANTITY,
12:39:09 193  	    IR.PRODUCT_ID,
12:39:09 194  	    IR.TRANSACTION_ID,
12:39:09 195  	    IR.PURCHASE_DATE,
12:39:09 196  	    IR.ORIGINAL_TRANSACTION_ID,
12:39:09 197  	    IR.ORIGINAL_PURCHASE_DATE,
12:39:09 198  	    IR.APP_ITEM_ID,
12:39:09 199  	    IR.VERSION_EXTERNAL_ID,
12:39:09 200  	    IR.BID,
12:39:09 201  	    IR.BVRS,
12:39:09 202  	    IR.EXPIRES_DATE,
12:39:09 203  	    IR.CREATE_DATe,
12:39:09 204  	    IR.CREATED_BY,
12:39:09 205  	    IR.UPDATE_DATE,
12:39:09 206  	    IR.UPDATED_BY,
12:39:09 207  	    IR.LAST_CHECK_DATE,
12:39:09 208  	    OC.VENDOR_SOURCE_ID
12:39:09 209  	  FROM
12:39:09 210  	    CORE_OWNER.ITUNES_RECEIPT IR
12:39:09 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
12:39:09 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
12:39:09 213  	  WHERE
12:39:09 214  	    NOT EXISTS
12:39:09 215  	    (
12:39:09 216  	      SELECT NULL
12:39:09 217  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:09 218  	      WHERE PROCESS_NAME = SPROC_NAME
12:39:09 219  		AND GENERIC_ID = IR.ID
12:39:09 220  	    ) AND
12:39:09 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
12:39:09 222  	    ROWNUM <= in_row_number*10
12:39:09 223  	)
12:39:09 224  	ORDER BY dbms_random.value
12:39:09 225  )
12:39:09 226  WHERE
12:39:09 227  	ROWNUM <= in_row_number;
12:39:09 228  
12:39:09 229  END GET_ITUNES_RECEIPTS;
12:39:09 230  
12:39:09 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
12:39:09 232  /*
12:39:09 233  Throws exceptions:
12:39:09 234  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 235  */
12:39:09 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
12:39:09 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
12:39:09 238  ) AS
12:39:09 239  BEGIN
12:39:09 240  
12:39:09 241  SELECT
12:39:09 242  	  oc.vendor_source_id
12:39:09 243  INTO
12:39:09 244  	  out_vendor_source_id
12:39:09 245  FROM
12:39:09 246  	  offer_chain_meta_data ocmd
12:39:09 247  JOIN
12:39:09 248  	  offer_chain oc
12:39:09 249  ON
12:39:09 250  	  ocmd.offer_chain_id = oc.id
12:39:09 251  WHERE
12:39:09 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
12:39:09 253  AND ocmd.value = in_itunes_pid
12:39:09 254  AND rownum <= 1;
12:39:09 255  
12:39:09 256  END GET_VENDOR_FROM_ITUNES_PID;
12:39:09 257  
12:39:09 258  END PROCS_ITUNES_RECEIPT_V16;
12:39:09 259  .
12:39:09 SQL> /

Package body created.

Elapsed: 00:00:00.06
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V16" AS
12:39:09   2  
12:39:09   3  PROCEDURE ADD_LINE_ITEMS(
12:39:09   4  /*
12:39:09   5  Throws exceptions:
12:39:09   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09   8  */
12:39:09   9  	in_invoice_id IN NUMBER,
12:39:09  10  	in_offer_id   IN NUMBER,
12:39:09  11  	in_created_by IN VARCHAR2
12:39:09  12  ) AS
12:39:09  13  -- VARIABLES
12:39:09  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
12:39:09  15  temp_invoice_id NUMBER;
12:39:09  16  temp_offer_id   NUMBER;
12:39:09  17  
12:39:09  18  var_line_item_data SYS_REFCURSOR;
12:39:09  19  var_new_line_item_id NUMBER;
12:39:09  20  var_product_unit_price NUMBER (10,6);
12:39:09  21  var_product_offering_price NUMBER(10,6);
12:39:09  22  var_product_offering_oprice NUMBER(10,6);
12:39:09  23  var_product_quantity NUMBER;
12:39:09  24  var_product_offering_id NUMBER;
12:39:09  25  
12:39:09  26  var_line_item_price	  NUMBER(10,2);
12:39:09  27  var_discount_fixed_amount   NUMBER(10,6);
12:39:09  28  var_discount_percent_amount NUMBER(10,2);
12:39:09  29  
12:39:09  30  
12:39:09  31  -- EXCEPTIONS
12:39:09  32  BAD_INVOICE_ID EXCEPTION;
12:39:09  33  BAD_OFFER_ID EXCEPTION;
12:39:09  34  BAD_DISCOUNT EXCEPTION;
12:39:09  35  BEGIN
12:39:09  36  
12:39:09  37  	-- Check that given invoice exists
12:39:09  38  	BEGIN
12:39:09  39  	  SELECT
12:39:09  40  	    INVOICE.ID into temp_invoice_id
12:39:09  41  	  FROM
12:39:09  42  	    INVOICE
12:39:09  43  	  WHERE
12:39:09  44  	    INVOICE.ID = in_invoice_id;
12:39:09  45  
12:39:09  46  	  EXCEPTION
12:39:09  47  	    WHEN NO_DATA_FOUND THEN
12:39:09  48  	      RAISE BAD_INVOICE_ID;
12:39:09  49  	END;
12:39:09  50  
12:39:09  51  	-- Check that given offer exists
12:39:09  52  	BEGIN
12:39:09  53  	  SELECT
12:39:09  54  	    OFFER.ID into temp_offer_id
12:39:09  55  	  FROM
12:39:09  56  	    OFFER
12:39:09  57  	  WHERE
12:39:09  58  	    OFFER.ID = in_offer_id;
12:39:09  59  
12:39:09  60  	  EXCEPTION
12:39:09  61  	    WHEN NO_DATA_FOUND THEN
12:39:09  62  	      RAISE BAD_OFFER_ID;
12:39:09  63  	END;
12:39:09  64  
12:39:09  65  	-- Get product_offering data
12:39:09  66  	OPEN var_line_item_data FOR
12:39:09  67  	SELECT
12:39:09  68  	  PRODUCT_OFFERING.ID,
12:39:09  69  	  PRODUCT_OFFERING.UNIT_PRICE,
12:39:09  70  	  PRODUCT_OFFERING.QUANTITY
12:39:09  71  	FROM
12:39:09  72  	  OFFER_PRODUCT_OFFERING
12:39:09  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
12:39:09  74  	WHERE
12:39:09  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
12:39:09  76  
12:39:09  77  	-- insert line items
12:39:09  78  	-- add discounts to line items
12:39:09  79  	LOOP
12:39:09  80  	  FETCH var_line_item_data INTO
12:39:09  81  	    var_product_offering_id,
12:39:09  82  	    var_product_unit_price,
12:39:09  83  	    var_product_quantity;
12:39:09  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
12:39:09  85  
12:39:09  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
12:39:09  87  	  var_product_offering_price := var_product_offering_oprice;
12:39:09  88  
12:39:09  89  	  -- Apply discounts to line_item
12:39:09  90  	  BEGIN
12:39:09  91  	    SELECT
12:39:09  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
12:39:09  93  	    FROM
12:39:09  94  	      DISCOUNT_PRODUCT_OFFERING
12:39:09  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
12:39:09  96  	    WHERE
12:39:09  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
12:39:09  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
12:39:09  99  	    EXCEPTION
12:39:09 100  	    WHEN NO_DATA_FOUND THEN
12:39:09 101  	      var_discount_fixed_amount := NULL;
12:39:09 102  	  END;
12:39:09 103  
12:39:09 104  	  BEGIN
12:39:09 105  	    SELECT
12:39:09 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
12:39:09 107  	    FROM
12:39:09 108  	      DISCOUNT_PRODUCT_OFFERING
12:39:09 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
12:39:09 110  	    WHERE
12:39:09 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
12:39:09 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
12:39:09 113  	    EXCEPTION
12:39:09 114  	    WHEN NO_DATA_FOUND THEN
12:39:09 115  	      var_discount_percent_amount := NULL;
12:39:09 116  	  END;
12:39:09 117  
12:39:09 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
12:39:09 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
12:39:09 120  	  END IF;
12:39:09 121  
12:39:09 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
12:39:09 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
12:39:09 124  	  END IF;
12:39:09 125  
12:39:09 126  	  var_line_item_price := PROCS_COMMON_V16.ROUND_10_6_TO_10_2(var_product_offering_price);
12:39:09 127  
12:39:09 128  	  IF (var_line_item_price < 0) THEN
12:39:09 129  	      RAISE BAD_DISCOUNT;
12:39:09 130  	  END IF;
12:39:09 131  
12:39:09 132  	  var_new_line_item_id := NULL;
12:39:09 133  	  PROCS_LINE_ITEMS_CRU_V16.CREATE_LINE_ITEM(
12:39:09 134  	    inout_line_item_id	=> var_new_line_item_id,
12:39:09 135  	    in_product_offer_id => var_product_offering_id,
12:39:09 136  	    in_invoice_id	=> in_invoice_id,
12:39:09 137  	    in_amount		=> var_line_item_price,
12:39:09 138  	    in_created_by	=> in_created_by,
12:39:09 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
12:39:09 140  	    in_taxes_amount	=> NULL
12:39:09 141  	  );
12:39:09 142  
12:39:09 143  	  FOR f_discount IN (
12:39:09 144  	    SELECT
12:39:09 145  	      DISCOUNT.ID
12:39:09 146  	    FROM
12:39:09 147  	      DISCOUNT_PRODUCT_OFFERING
12:39:09 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
12:39:09 149  	    WHERE
12:39:09 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
12:39:09 151  	  )
12:39:09 152  	  LOOP
12:39:09 153  	    PROCS_LINE_ITEMS_CRU_V16.CREATE_DISCOUNT_LINE_ITEM(
12:39:09 154  	      in_discount_id =>  f_discount.ID,
12:39:09 155  	      in_line_item_id => var_new_line_item_id
12:39:09 156  	    );
12:39:09 157  	  END LOOP;
12:39:09 158  	END LOOP;
12:39:09 159  
12:39:09 160  EXCEPTION
12:39:09 161  WHEN BAD_INVOICE_ID THEN
12:39:09 162  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 163  	  SPROC_NAME, 'No such license');
12:39:09 164  WHEN BAD_OFFER_ID THEN
12:39:09 165  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 166  	  SPROC_NAME, 'No such offer');
12:39:09 167  WHEN BAD_DISCOUNT THEN
12:39:09 168  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 169  	  SPROC_NAME, 'Bad Discount');
12:39:09 170  WHEN OTHERS THEN
12:39:09 171  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 173  END ADD_LINE_ITEMS;
12:39:09 174  
12:39:09 175  /******************************************************************************/
12:39:09 176  
12:39:09 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
12:39:09 178  	in_line_item_id    IN NUMBER,
12:39:09 179  	in_amount	   IN NUMBER,
12:39:09 180  	in_discount_amount IN NUMBER,
12:39:09 181  	in_taxes_amount    IN NUMBER
12:39:09 182  ) AS
12:39:09 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
12:39:09 184  -- VARIABLES
12:39:09 185  temp_line_item_id NUMBER;
12:39:09 186  -- EXCEPTIONS
12:39:09 187  BAD_LINE_ITEM_ID EXCEPTION;
12:39:09 188  BEGIN
12:39:09 189  
12:39:09 190  	-- Check that line item exists
12:39:09 191  	BEGIN
12:39:09 192  	  SELECT
12:39:09 193  	    LINE_ITEM.ID into temp_line_item_id
12:39:09 194  	  FROM
12:39:09 195  	    LINE_ITEM
12:39:09 196  	  WHERE
12:39:09 197  	    LINE_ITEM.ID = in_line_item_id;
12:39:09 198  	  EXCEPTION
12:39:09 199  	    WHEN NO_DATA_FOUND THEN
12:39:09 200  	      RAISE BAD_LINE_ITEM_ID;
12:39:09 201  	END;
12:39:09 202  
12:39:09 203  	-- Update line item
12:39:09 204  	PROCS_LINE_ITEMS_CRU_V16.UPDATE_LINE_ITEM(
12:39:09 205  	  in_line_item_id    => in_line_item_id,
12:39:09 206  	  in_amount	     => in_amount,
12:39:09 207  	  in_discount_amount => in_discount_amount,
12:39:09 208  	  in_taxes_amount    => in_taxes_amount
12:39:09 209  	);
12:39:09 210  
12:39:09 211  EXCEPTION
12:39:09 212  WHEN BAD_LINE_ITEM_ID THEN
12:39:09 213  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 214  	  SPROC_NAME, 'No such line item');
12:39:09 215  WHEN OTHERS THEN
12:39:09 216  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 218  END UPDATE_LINE_ITEM_AMOUNT;
12:39:09 219  
12:39:09 220  /******************************************************************************/
12:39:09 221  
12:39:09 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
12:39:09 223  /*
12:39:09 224  Throws exceptions:
12:39:09 225  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 226  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 227  */
12:39:09 228  	in_invoice_id  IN NUMBER,
12:39:09 229  	out_result_set OUT SYS_REFCURSOR
12:39:09 230  ) AS
12:39:09 231  -- VARIABLES
12:39:09 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
12:39:09 233  temp_invoice_id NUMBER;
12:39:09 234  
12:39:09 235  -- EXCEPTIONS
12:39:09 236  BAD_INVOICE_ID EXCEPTION;
12:39:09 237  BEGIN
12:39:09 238  
12:39:09 239  	-- Check that given invoice exists
12:39:09 240  	BEGIN
12:39:09 241  	  SELECT
12:39:09 242  	    INVOICE.ID into temp_invoice_id
12:39:09 243  	  FROM
12:39:09 244  	    INVOICE
12:39:09 245  	  WHERE
12:39:09 246  	    INVOICE.ID = in_invoice_id;
12:39:09 247  	  EXCEPTION
12:39:09 248  	    WHEN NO_DATA_FOUND THEN
12:39:09 249  	      RAISE BAD_INVOICE_ID;
12:39:09 250  	END;
12:39:09 251  
12:39:09 252  	-- Select line items
12:39:09 253  	OPEN out_result_set FOR
12:39:09 254  	SELECT
12:39:09 255  	  LINE_ITEM.ID,
12:39:09 256  	  LINE_ITEM.AMOUNT,
12:39:09 257  	  LINE_ITEM.CREATE_DATE,
12:39:09 258  	  LINE_ITEM.CREATED_BY,
12:39:09 259  	  LINE_ITEM.INVOICE_ID,
12:39:09 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
12:39:09 261  	  LINE_ITEM.TAXES_AMOUNT,
12:39:09 262  	  LINE_ITEM.PRODUCT_OFFER_ID
12:39:09 263  	FROM
12:39:09 264  	  LINE_ITEM
12:39:09 265  	WHERE
12:39:09 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
12:39:09 267  
12:39:09 268  EXCEPTION
12:39:09 269  WHEN BAD_INVOICE_ID THEN
12:39:09 270  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 271  	  SPROC_NAME, 'No such invoice');
12:39:09 272  WHEN OTHERS THEN
12:39:09 273  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 275  END GET_INVOICE_LINE_ITEMS;
12:39:09 276  
12:39:09 277  /******************************************************************************/
12:39:09 278  
12:39:09 279  PROCEDURE GET_LINE_ITEM_TAXES (
12:39:09 280  /*
12:39:09 281  Throws exceptions:
12:39:09 282  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 283  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 284  */
12:39:09 285  	in_line_item_id IN  NUMBER,
12:39:09 286  	out_result_set	OUT SYS_REFCURSOR
12:39:09 287  ) AS
12:39:09 288  -- VARIABLES
12:39:09 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
12:39:09 290  temp_line_item_id NUMBER;
12:39:09 291  -- EXCEPTIONS
12:39:09 292  BAD_LINE_ITEM_ID EXCEPTION;
12:39:09 293  BEGIN
12:39:09 294  
12:39:09 295  	-- Check that line item exists
12:39:09 296  	BEGIN
12:39:09 297  	  SELECT
12:39:09 298  	    LINE_ITEM.ID into temp_line_item_id
12:39:09 299  	  FROM
12:39:09 300  	    LINE_ITEM
12:39:09 301  	  WHERE
12:39:09 302  	    LINE_ITEM.ID = in_line_item_id;
12:39:09 303  	  EXCEPTION
12:39:09 304  	    WHEN NO_DATA_FOUND THEN
12:39:09 305  	      RAISE BAD_LINE_ITEM_ID;
12:39:09 306  	END;
12:39:09 307  
12:39:09 308  	-- Get all taxes for given line item
12:39:09 309  	OPEN out_result_set FOR
12:39:09 310  	SELECT
12:39:09 311  	  TAX.ID,
12:39:09 312  	  TAX.CALCULATED_AMOUNT,
12:39:09 313  	  TAX.CREATE_DATE,
12:39:09 314  	  TAX.CREATED_BY,
12:39:09 315  	  TAX.EFFECTIVE_RATE,
12:39:09 316  	  TAX.EXT_RESULT,
12:39:09 317  	  TAX.EXT_TAX_TYPE,
12:39:09 318  	  TAX.IMPOSITION,
12:39:09 319  	  TAX.IMPOSITION_TYPE,
12:39:09 320  	  TAX.JURISDICTION_ID,
12:39:09 321  	  TAX.JURISDICTION_LEVEL_ID,
12:39:09 322  	  TAX.JURISDICTION_NAME,
12:39:09 323  	  TAX.LINE_ITEM_ID,
12:39:09 324  	  TAX.TAX_RULE_ID,
12:39:09 325  	  TAX.TAX_TYPE_ID,
12:39:09 326  	  TAX.TAXABLE_AMOUNT
12:39:09 327  	FROM
12:39:09 328  	  TAX
12:39:09 329  	WHERE
12:39:09 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
12:39:09 331  
12:39:09 332  EXCEPTION
12:39:09 333  WHEN BAD_LINE_ITEM_ID THEN
12:39:09 334  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 335  	  SPROC_NAME, 'No such line item');
12:39:09 336  WHEN OTHERS THEN
12:39:09 337  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 339  END GET_LINE_ITEM_TAXES;
12:39:09 340  
12:39:09 341  -- norlov: #38770
12:39:09 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
12:39:09 343  /*
12:39:09 344  Throws exceptions:
12:39:09 345  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 346  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 347  */
12:39:09 348  	in_line_item_id IN  NUMBER,
12:39:09 349  	out_result_set	OUT SYS_REFCURSOR
12:39:09 350  ) AS
12:39:09 351  -- VARIABLES
12:39:09 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
12:39:09 353  temp_line_item_id NUMBER;
12:39:09 354  -- EXCEPTIONS
12:39:09 355  BAD_LINE_ITEM_ID EXCEPTION;
12:39:09 356  BEGIN
12:39:09 357  
12:39:09 358  	-- Check that line item exists
12:39:09 359  	BEGIN
12:39:09 360  	  SELECT
12:39:09 361  	    LINE_ITEM.ID into temp_line_item_id
12:39:09 362  	  FROM
12:39:09 363  	    LINE_ITEM
12:39:09 364  	  WHERE
12:39:09 365  	    LINE_ITEM.ID = in_line_item_id;
12:39:09 366  	  EXCEPTION
12:39:09 367  	    WHEN NO_DATA_FOUND THEN
12:39:09 368  	      RAISE BAD_LINE_ITEM_ID;
12:39:09 369  	END;
12:39:09 370  
12:39:09 371  	-- Get all discounts for given line item
12:39:09 372  	OPEN out_result_set FOR
12:39:09 373  	SELECT
12:39:09 374  	  DISCOUNT.FIXED_AMOUNT,
12:39:09 375  	  DISCOUNT.NAME,
12:39:09 376  	  DISCOUNT.ID,
12:39:09 377  	  DISCOUNT.PERCENT_AMOUNT
12:39:09 378  	FROM
12:39:09 379  	  DISCOUNT_LINE_ITEM
12:39:09 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
12:39:09 381  	WHERE
12:39:09 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
12:39:09 383  
12:39:09 384  EXCEPTION
12:39:09 385  WHEN BAD_LINE_ITEM_ID THEN
12:39:09 386  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 387  	  SPROC_NAME, 'No such line item');
12:39:09 388  WHEN OTHERS THEN
12:39:09 389  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 391  END GET_LINE_ITEM_DISCOUNTS;
12:39:09 392  /******************************************************************************/
12:39:09 393  
12:39:09 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
12:39:09 395  /*
12:39:09 396  Throws exceptions:
12:39:09 397  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 398  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 399  */
12:39:09 400  	in_line_item_id     IN	NUMBER,
12:39:09 401  	out_amount	    OUT NUMBER
12:39:09 402  ) AS
12:39:09 403  -- VARIABLES
12:39:09 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
12:39:09 405  -- EXCEPTIONS
12:39:09 406  BAD_LINE_ITEM_ID EXCEPTION;
12:39:09 407  BEGIN
12:39:09 408  
12:39:09 409  	BEGIN
12:39:09 410  	  SELECT
12:39:09 411  	    LINE_ITEM.AMOUNT into out_amount
12:39:09 412  	  FROM
12:39:09 413  	    LINE_ITEM
12:39:09 414  	  WHERE
12:39:09 415  	    LINE_ITEM.ID = in_line_item_id;
12:39:09 416  	  EXCEPTION
12:39:09 417  	    WHEN NO_DATA_FOUND THEN
12:39:09 418  	      RAISE BAD_LINE_ITEM_ID;
12:39:09 419  	END;
12:39:09 420  
12:39:09 421  EXCEPTION
12:39:09 422  WHEN BAD_LINE_ITEM_ID THEN
12:39:09 423  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 424  	  SPROC_NAME, 'No such line item');
12:39:09 425  WHEN OTHERS THEN
12:39:09 426  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 428  END CALCULATE_LINE_ITEM_AMOUNT;
12:39:09 429  
12:39:09 430  /******************************************************************************/
12:39:09 431  
12:39:09 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
12:39:09 433  /*
12:39:09 434  Throws exceptions:
12:39:09 435  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 436  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 437  */
12:39:09 438  	in_line_item_id     IN	NUMBER
12:39:09 439  ) RETURN NUMBER AS
12:39:09 440  var_invoice_amount NUMBER(10, 2);
12:39:09 441  BEGIN
12:39:09 442  	PROCS_LINE_ITEMS_V16.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
12:39:09 443  	RETURN var_invoice_amount;
12:39:09 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
12:39:09 445  
12:39:09 446  END PROCS_LINE_ITEMS_V16;
12:39:09 447  .
12:39:09 SQL> /

Package body created.

Elapsed: 00:00:00.11
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V16" AS
12:39:09   2  
12:39:09   3  /*
12:39:09   4  PROCEDURE INITIALIZE_SYSTEM AS
12:39:09   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
12:39:09   6  -- VARIABLES
12:39:09   7  var_account_ids SYS_REFCURSOR;
12:39:09   8  var_account_id  NUMBER;
12:39:09   9  BEGIN
12:39:09  10  
12:39:09  11  	OPEN var_account_ids FOR
12:39:09  12  	SELECT
12:39:09  13  	  ACCOUNT.ID
12:39:09  14  	FROM
12:39:09  15  	  ACCOUNT;
12:39:09  16  
12:39:09  17  	LOOP
12:39:09  18  	  FETCH var_account_ids into var_account_id;
12:39:09  19  	  EXIT WHEN var_account_ids%NOTFOUND;
12:39:09  20  	  BEGIN
12:39:09  21  	    INITIALIZE_ACCOUNT(var_account_id);
12:39:09  22  	    EXCEPTION
12:39:09  23  	      WHEN OTHERS THEN
12:39:09  24  		NULL;
12:39:09  25  	  END;
12:39:09  26  	END LOOP;
12:39:09  27  
12:39:09  28  END INITIALIZE_SYSTEM;
12:39:09  29  
12:39:09  30  PROCEDURE INITIALIZE_ACCOUNT (
12:39:09  31  	in_account_id IN NUMBER
12:39:09  32  ) AS
12:39:09  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
12:39:09  34  -- EXCEPTIONS
12:39:09  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
12:39:09  36  BEGIN
12:39:09  37  
12:39:09  38  	BEGIN
12:39:09  39  	  INSERT INTO ACCOUNT_LOCK(
12:39:09  40  	    ACCOUNT_ID,
12:39:09  41  	    LOCK_KEY,
12:39:09  42  	    END_DATE,
12:39:09  43  	    CREATED_BY,
12:39:09  44  	    REASON
12:39:09  45  	  ) VALUES (
12:39:09  46  	    in_account_id,
12:39:09  47  	    'initialization key',
12:39:09  48  	    SYSDATE,
12:39:09  49  	    'system',
12:39:09  50  	    'initialization'
12:39:09  51  	  );
12:39:09  52  	  EXCEPTION
12:39:09  53  	    WHEN DUP_VAL_ON_INDEX THEN
12:39:09  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
12:39:09  55  	END;
12:39:09  56  
12:39:09  57  EXCEPTION
12:39:09  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
12:39:09  59  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:09  60  	  SPROC_NAME, 'Account already initialized');
12:39:09  61  WHEN OTHERS THEN
12:39:09  62  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09  64  END;
12:39:09  65  
12:39:09  66  PROCEDURE INITIALIZE_GROUP (
12:39:09  67  	in_group_id IN NUMBER
12:39:09  68  ) AS
12:39:09  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
12:39:09  70  -- VARIABLES
12:39:09  71  var_account_id NUMBER;
12:39:09  72  -- EXCEPTIONS
12:39:09  73  BAD_GROUP_ID		EXCEPTION;
12:39:09  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
12:39:09  75  BEGIN
12:39:09  76  
12:39:09  77  	BEGIN
12:39:09  78  	  SELECT
12:39:09  79  	    ACCOUNT.ID into var_account_id
12:39:09  80  	  FROM
12:39:09  81  	    ACCOUNT
12:39:09  82  	  WHERE
12:39:09  83  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:09  84  	  EXCEPTION
12:39:09  85  	    WHEN NO_DATA_FOUND THEN
12:39:09  86  	     RAISE BAD_GROUP_ID;
12:39:09  87  	END;
12:39:09  88  
12:39:09  89  	BEGIN
12:39:09  90  	  INSERT INTO ACCOUNT_LOCK (
12:39:09  91  	    ACCOUNT_ID,
12:39:09  92  	    LOCK_KEY,
12:39:09  93  	    END_DATE,
12:39:09  94  	    CREATED_BY,
12:39:09  95  	    REASON
12:39:09  96  	  ) VALUES (
12:39:09  97  	    var_account_id,
12:39:09  98  	    'initialization key',
12:39:09  99  	    SYSDATE,
12:39:09 100  	    'system',
12:39:09 101  	    'initialization'
12:39:09 102  	  );
12:39:09 103  	  EXCEPTION
12:39:09 104  	    WHEN DUP_VAL_ON_INDEX THEN
12:39:09 105  	      RAISE GROUP_ALREADY_INITIALIZED;
12:39:09 106  	END;
12:39:09 107  
12:39:09 108  EXCEPTION
12:39:09 109  WHEN BAD_GROUP_ID THEN
12:39:09 110  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 111  	  SPROC_NAME, 'No such account with given group id');
12:39:09 112  WHEN GROUP_ALREADY_INITIALIZED THEN
12:39:09 113  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:09 114  	  SPROC_NAME, 'Group already initialized');
12:39:09 115  WHEN OTHERS THEN
12:39:09 116  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 118  END INITIALIZE_GROUP;
12:39:09 119  */
12:39:09 120  
12:39:09 121  PROCEDURE LOCK_ACCOUNT (
12:39:09 122  	in_group_id    IN NUMBER,
12:39:09 123  	in_lock_key    IN VARCHAR2,
12:39:09 124  	in_seconds_num IN NUMBER,
12:39:09 125  	in_created_by  IN VARCHAR2,
12:39:09 126  	in_reason      IN VARCHAR2
12:39:09 127  ) AS
12:39:09 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
12:39:09 129  -- CONSTANTS
12:39:09 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
12:39:09 131  -- VARIABLES
12:39:09 132  var_account_id NUMBER;
12:39:09 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:09 134  var_date		DATE := SYSDATE;
12:39:09 135  var_lock_end_date DATE;
12:39:09 136  -- EXCEPTIONS
12:39:09 137  BAD_GROUP_ID   EXCEPTION;
12:39:09 138  ALREADY_LOCKED EXCEPTION;
12:39:09 139  BEGIN
12:39:09 140  
12:39:09 141  	BEGIN
12:39:09 142  	  SELECT
12:39:09 143  	    ACCOUNT.ID into var_account_id
12:39:09 144  	  FROM
12:39:09 145  	    ACCOUNT
12:39:09 146  	  WHERE
12:39:09 147  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:09 148  	  EXCEPTION
12:39:09 149  	    WHEN NO_DATA_FOUND THEN
12:39:09 150  	      RAISE BAD_GROUP_ID;
12:39:09 151  	END;
12:39:09 152  
12:39:09 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
12:39:09 154  
12:39:09 155  	BEGIN
12:39:09 156  
12:39:09 157  	  INSERT INTO ACCOUNT_LOCK (
12:39:09 158  	    ACCOUNT_ID,
12:39:09 159  	    LOCK_KEY,
12:39:09 160  	    END_DATE,
12:39:09 161  	    CREATED_BY,
12:39:09 162  	    REASON
12:39:09 163  	  ) VALUES (
12:39:09 164  	    var_account_id,
12:39:09 165  	    in_lock_key,
12:39:09 166  	    var_lock_end_date,
12:39:09 167  	    in_created_by,
12:39:09 168  	    in_reason
12:39:09 169  	  );
12:39:09 170  
12:39:09 171  	  EXCEPTION
12:39:09 172  	    WHEN DUP_VAL_ON_INDEX THEN
12:39:09 173  	      -- This rows was created before... I will try to update it
12:39:09 174  	      BEGIN
12:39:09 175  
12:39:09 176  		UPDATE
12:39:09 177  		  ACCOUNT_LOCK
12:39:09 178  		SET
12:39:09 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
12:39:09 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
12:39:09 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
12:39:09 182  		  ACCOUNT_LOCK.REASON = in_reason
12:39:09 183  		WHERE
12:39:09 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
12:39:09 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
12:39:09 186  
12:39:09 187  		IF SQL%ROWCOUNT = 0 THEN
12:39:09 188  		  RAISE ALREADY_LOCKED;
12:39:09 189  		END IF;
12:39:09 190  
12:39:09 191  	      END;
12:39:09 192  	END;
12:39:09 193  
12:39:09 194  EXCEPTION
12:39:09 195  WHEN BAD_GROUP_ID THEN
12:39:09 196  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 197  	  SPROC_NAME, 'No such group id');
12:39:09 198  WHEN ALREADY_LOCKED THEN
12:39:09 199  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:09 200  	  SPROC_NAME, 'Account already locked');
12:39:09 201  WHEN OTHERS THEN
12:39:09 202  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 204  END LOCK_ACCOUNT;
12:39:09 205  
12:39:09 206  /******************************************************************************/
12:39:09 207  
12:39:09 208  PROCEDURE RELEASE_LOCK (
12:39:09 209  	in_group_id IN NUMBER,
12:39:09 210  	in_lock_key IN VARCHAR2
12:39:09 211  ) AS
12:39:09 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
12:39:09 213  -- VARIABLES
12:39:09 214  var_account_id NUMBER;
12:39:09 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
12:39:09 216  var_date DATE := SYSDATE;
12:39:09 217  -- EXCEPTIONS
12:39:09 218  BAD_GROUP_ID		EXCEPTION;
12:39:09 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
12:39:09 220  BEGIN
12:39:09 221  
12:39:09 222  	BEGIN
12:39:09 223  	  SELECT
12:39:09 224  	    ACCOUNT.ID into var_account_id
12:39:09 225  	  FROM
12:39:09 226  	    ACCOUNT
12:39:09 227  	  WHERE
12:39:09 228  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:09 229  	  EXCEPTION
12:39:09 230  	    WHEN NO_DATA_FOUND THEN
12:39:09 231  	      RAISE BAD_GROUP_ID;
12:39:09 232  	END;
12:39:09 233  
12:39:09 234  	UPDATE
12:39:09 235  	  ACCOUNT_LOCK
12:39:09 236  	SET
12:39:09 237  	  ACCOUNT_LOCK.END_DATE = var_date
12:39:09 238  	WHERE
12:39:09 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
12:39:09 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
12:39:09 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
12:39:09 242  
12:39:09 243  	IF SQL%ROWCOUNT = 0 THEN
12:39:09 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
12:39:09 245  	END IF;
12:39:09 246  
12:39:09 247  EXCEPTION
12:39:09 248  WHEN BAD_GROUP_ID THEN
12:39:09 249  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 250  	  SPROC_NAME, 'No such group id');
12:39:09 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
12:39:09 252  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:09 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
12:39:09 254  WHEN OTHERS THEN
12:39:09 255  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 256  	  SPROC_NAME, 'Unknown error');
12:39:09 257  END RELEASE_LOCK;
12:39:09 258  
12:39:09 259  END PROCS_LOCKING_V16;
12:39:09 260  .
12:39:09 SQL> /

Package body created.

Elapsed: 00:00:00.02
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V16" AS
12:39:09   2  
12:39:09   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
12:39:09   4  /*
12:39:09   5  Throws exceptions:
12:39:09   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09   8  */
12:39:09   9  	  in_offer_chain_id IN	 NUMBER,
12:39:09  10  	  out_result_set    OUT  SYS_REFCURSOR
12:39:09  11  ) AS
12:39:09  12  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_BY_ID';
12:39:09  13  BEGIN
12:39:09  14  
12:39:09  15  	-- Get offer chain informations
12:39:09  16  	OPEN out_result_set FOR
12:39:09  17  	  SELECT
12:39:09  18  	    OC.ID,
12:39:09  19  	    OC.NAME,
12:39:09  20  	    OC.ADOPTABILITY_WINDOW_START_DATE,
12:39:09  21  	    OC.ADOPTABILITY_WINDOW_END_DATE,
12:39:09  22  	    OC.DESCRIPTION,
12:39:09  23  	    OC.IS_GIFT_CERTIFICATE,
12:39:09  24  	    OC.OFFER_CHAIN_STATUS_ID,
12:39:09  25  	    OC.PRODUCT_URI,
12:39:09  26  	    OC.BILLING_SOURCE_ID,
12:39:09  27  	    OC.VENDOR_SOURCE_ID,
12:39:09  28  	    OC.GROUP_ACCOUNT_TYPE_ID,
12:39:09  29  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
12:39:09  30  	  FROM
12:39:09  31  	    OFFER_CHAIN OC
12:39:09  32  	  WHERE
12:39:09  33  	    OC.ID = in_offer_chain_id
12:39:09  34  	    AND ROWNUM <= 1;
12:39:09  35  
12:39:09  36  EXCEPTION
12:39:09  37  WHEN OTHERS THEN
12:39:09  38  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09  39  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09  40  END GET_OFFER_CHAIN_BY_ID;
12:39:09  41  
12:39:09  42  /******************************************************************************/
12:39:09  43  
12:39:09  44  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
12:39:09  45  /*
12:39:09  46  Throws exceptions:
12:39:09  47  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09  48  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:09  49  */
12:39:09  50  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
12:39:09  51  	out_result_set	   OUT SYS_REFCURSOR
12:39:09  52  ) AS
12:39:09  53  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
12:39:09  54  -- EXCEPTIONS
12:39:09  55  BAD_OFFER_CHAINS_IDS EXCEPTION;
12:39:09  56  BEGIN
12:39:09  57  
12:39:09  58  	IF (in_offer_chain_ids IS NULL) THEN
12:39:09  59  	  RAISE BAD_OFFER_CHAINS_IDS;
12:39:09  60  	END IF;
12:39:09  61  
12:39:09  62  	OPEN out_result_set FOR
12:39:09  63  	SELECT
12:39:09  64  	  OCH.ID,
12:39:09  65  	  OCH.NAME,
12:39:09  66  	  OCH.DESCRIPTION,
12:39:09  67  	  OCH.OFFER_CHAIN_STATUS_ID,
12:39:09  68  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
12:39:09  69  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
12:39:09  70  	  OCH.IS_GIFT_CERTIFICATE,
12:39:09  71  	  PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
12:39:09  72  	  PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
12:39:09  73  	  OCH.VENDOR_SOURCE_ID,
12:39:09  74  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
12:39:09  75  	FROM
12:39:09  76  	  OFFER_CHAIN OCH
12:39:09  77  	WHERE
12:39:09  78  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
12:39:09  79  
12:39:09  80  EXCEPTION
12:39:09  81  WHEN BAD_OFFER_CHAINS_IDS THEN
12:39:09  82  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:09  83  	  SPROC_NAME, 'Invalid offer chains ids');
12:39:09  84  WHEN OTHERS THEN
12:39:09  85  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09  86  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09  87  END GET_OFFER_CHAINS_BY_IDS;
12:39:09  88  
12:39:09  89  /******************************************************************************/
12:39:09  90  
12:39:09  91  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
12:39:09  92  /*
12:39:09  93  Throws exceptions:
12:39:09  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09  95  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:09  96  */
12:39:09  97  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
12:39:09  98  	out_result_set	   OUT SYS_REFCURSOR
12:39:09  99  ) AS
12:39:09 100  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
12:39:09 101  -- EXCEPTIONS
12:39:09 102  BAD_OFFER_CHAINS_IDS EXCEPTION;
12:39:09 103  BEGIN
12:39:09 104  
12:39:09 105  	IF (in_offer_chain_ids IS NULL) THEN
12:39:09 106  	  RAISE BAD_OFFER_CHAINS_IDS;
12:39:09 107  	END IF;
12:39:09 108  
12:39:09 109  	OPEN out_result_set FOR
12:39:09 110  	SELECT
12:39:09 111  	  OOCH.OFFER_CHAIN_ID,
12:39:09 112  	  PO.PRODUCT_ID
12:39:09 113  	FROM
12:39:09 114  	  PRODUCT_OFFERING PO
12:39:09 115  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
12:39:09 116  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
12:39:09 117  	WHERE
12:39:09 118  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
12:39:09 119  
12:39:09 120  EXCEPTION
12:39:09 121  WHEN BAD_OFFER_CHAINS_IDS THEN
12:39:09 122  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:09 123  	  SPROC_NAME, 'Invalid offer chains ids');
12:39:09 124  WHEN OTHERS THEN
12:39:09 125  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 127  END GET_OFFER_CHAINS_PRODUCTS;
12:39:09 128  
12:39:09 129  /******************************************************************************/
12:39:09 130  
12:39:09 131  PROCEDURE GET_OFFER_CHAINS_OFFERS (
12:39:09 132  /*
12:39:09 133  Throws exceptions:
12:39:09 134  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 135  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:09 136  */
12:39:09 137  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
12:39:09 138  	out_result_set	   OUT SYS_REFCURSOR
12:39:09 139  ) AS
12:39:09 140  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
12:39:09 141  -- EXCEPTIONS
12:39:09 142  BAD_OFFER_CHAINS_IDS EXCEPTION;
12:39:09 143  BEGIN
12:39:09 144  
12:39:09 145  	IF (in_offer_chain_ids IS NULL) THEN
12:39:09 146  	  RAISE BAD_OFFER_CHAINS_IDS;
12:39:09 147  	END IF;
12:39:09 148  
12:39:09 149  	OPEN out_result_set FOR
12:39:09 150  	SELECT
12:39:09 151  	  OOCH.OFFER_CHAIN_ID,
12:39:09 152  	  OOCH.OFFER_ID,
12:39:09 153  	  OOCH.INDEX_VALUE,
12:39:09 154  	  OOCH.NUM_RECURRENCES,
12:39:09 155  	  O.ENTITLEMENT_DURATION,
12:39:09 156  	  PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
12:39:09 157  	FROM
12:39:09 158  	  OFFER O
12:39:09 159  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
12:39:09 160  	WHERE
12:39:09 161  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
12:39:09 162  
12:39:09 163  EXCEPTION
12:39:09 164  WHEN BAD_OFFER_CHAINS_IDS THEN
12:39:09 165  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:09 166  	  SPROC_NAME, 'Invalid offer chains ids');
12:39:09 167  WHEN OTHERS THEN
12:39:09 168  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 169  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 170  END GET_OFFER_CHAINS_OFFERS;
12:39:09 171  
12:39:09 172  /******************************************************************************/
12:39:09 173  
12:39:09 174  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
12:39:09 175  /*
12:39:09 176  Throws exceptions (codes):
12:39:09 177  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 178  */
12:39:09 179  	in_product_id  IN  NUMBER,
12:39:09 180  	out_result_set OUT SYS_REFCURSOR
12:39:09 181  )AS
12:39:09 182  -- VARIBLES
12:39:09 183  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
12:39:09 184  temp_product_id NUMBER;
12:39:09 185  
12:39:09 186  -- EXCEPTIONS
12:39:09 187  BAD_PRODUCT_ID EXCEPTION;
12:39:09 188  BEGIN
12:39:09 189  
12:39:09 190  	-- Check that given product exists
12:39:09 191  	BEGIN
12:39:09 192  	  SELECT
12:39:09 193  	    PRODUCT.ID into temp_product_id
12:39:09 194  	  FROM
12:39:09 195  	    PRODUCT
12:39:09 196  	  WHERE
12:39:09 197  	    PRODUCT.ID = in_product_id;
12:39:09 198  	  EXCEPTION
12:39:09 199  	    WHEN NO_DATA_FOUND THEN
12:39:09 200  	      RAISE BAD_PRODUCT_ID;
12:39:09 201  	END;
12:39:09 202  
12:39:09 203  	-- Select all offer chains that contains given product
12:39:09 204  	OPEN out_result_set FOR
12:39:09 205  	SELECT
12:39:09 206  	  OFFER_CHAIN.ID,
12:39:09 207  	  OFFER_CHAIN.NAME,
12:39:09 208  	  OFFER_CHAIN.DESCRIPTION,
12:39:09 209  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
12:39:09 210  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
12:39:09 211  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
12:39:09 212  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
12:39:09 213  	FROM
12:39:09 214  	  OFFER_CHAIN
12:39:09 215  	WHERE
12:39:09 216  	  OFFER_CHAIN.ID IN (
12:39:09 217  	    SELECT DISTINCT
12:39:09 218  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
12:39:09 219  	    FROM
12:39:09 220  	      OFFER_OFFER_CHAIN
12:39:09 221  	    WHERE
12:39:09 222  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
12:39:09 223  		SELECT DISTINCT
12:39:09 224  		  OFFER_PRODUCT_OFFERING.OFFER_ID
12:39:09 225  		FROM
12:39:09 226  		  OFFER_PRODUCT_OFFERING
12:39:09 227  		WHERE
12:39:09 228  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
12:39:09 229  	      )
12:39:09 230  	  );
12:39:09 231  
12:39:09 232  EXCEPTION
12:39:09 233  WHEN BAD_PRODUCT_ID THEN
12:39:09 234  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 235  	  SPROC_NAME, 'No such product');
12:39:09 236  WHEN OTHERS THEN
12:39:09 237  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 239  END GET_OFFER_CHAINS_BY_PRODUCT;
12:39:09 240  
12:39:09 241  /******************************************************************************/
12:39:09 242  
12:39:09 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
12:39:09 244  /*
12:39:09 245  Throws exceptions (codes):
12:39:09 246  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 247  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 248  */
12:39:09 249  	in_offer_chain_id IN NUMBER,
12:39:09 250  	out_price	  OUT NUMBER
12:39:09 251  ) AS
12:39:09 252  -- VARIABLES
12:39:09 253  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
12:39:09 254  temp_offer_chain_id NUMBER;
12:39:09 255  
12:39:09 256  -- EXCEPTION
12:39:09 257  BAD_OFFER_CHAIN_ID       EXCEPTION;
12:39:09 258  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
12:39:09 259  EXCEPTION_MESSAGE        VARCHAR2(1024);
12:39:09 260  BEGIN
12:39:09 261  
12:39:09 262  	-- Check that given offer chain exists
12:39:09 263  	BEGIN
12:39:09 264  	  SELECT
12:39:09 265  	    OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 266  	  FROM
12:39:09 267  	    OFFER_CHAIN
12:39:09 268  	  WHERE
12:39:09 269  	    OFFER_CHAIN.ID = in_offer_chain_id;
12:39:09 270  
12:39:09 271  	  EXCEPTION
12:39:09 272  	  WHEN NO_DATA_FOUND THEN
12:39:09 273  	    RAISE BAD_OFFER_CHAIN_ID;
12:39:09 274  	END;
12:39:09 275  
12:39:09 276  	BEGIN
12:39:09 277  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
12:39:09 278  	  EXCEPTION
12:39:09 279  	    WHEN OTHERS THEN
12:39:09 280  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 281  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
12:39:09 282  	END;
12:39:09 283  
12:39:09 284  EXCEPTION
12:39:09 285  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:09 286  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 287  	  SPROC_NAME, 'Bad offer chain id');
12:39:09 288  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
12:39:09 289  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 290  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
12:39:09 291  WHEN OTHERS THEN
12:39:09 292  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 293  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 294  END GET_OFFER_CHAIN_PRICE;
12:39:09 295  
12:39:09 296  /******************************************************************************/
12:39:09 297  
12:39:09 298  PROCEDURE GET_FIRST_OFFER(
12:39:09 299  /*
12:39:09 300  Throws exceptions (codes):
12:39:09 301  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 302  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 303  */
12:39:09 304  	in_offer_chain_id IN  NUMBER,
12:39:09 305  	out_offer_id	  OUT NUMBER
12:39:09 306  ) AS
12:39:09 307  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
12:39:09 308  BEGIN
12:39:09 309  	-- Seect first offer in offer chain
12:39:09 310  	SELECT
12:39:09 311  	  OFFER_ID into out_offer_id
12:39:09 312  	FROM (
12:39:09 313  	  SELECT
12:39:09 314  	    OFFER_OFFER_CHAIN.OFFER_ID
12:39:09 315  	  FROM
12:39:09 316  	    OFFER_OFFER_CHAIN
12:39:09 317  	  WHERE
12:39:09 318  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 319  	  ORDER BY
12:39:09 320  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
12:39:09 321  	)
12:39:09 322  	WHERE
12:39:09 323  	  ROWNUM <= 1;
12:39:09 324  
12:39:09 325  EXCEPTION
12:39:09 326  WHEN NO_DATA_FOUND THEN
12:39:09 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 328  	  SPROC_NAME, 'No such offer chain');
12:39:09 329  WHEN OTHERS THEN
12:39:09 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 332  END GET_FIRST_OFFER;
12:39:09 333  
12:39:09 334  /******************************************************************************/
12:39:09 335  
12:39:09 336  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
12:39:09 337  /*
12:39:09 338  Throws exceptions (codes):
12:39:09 339  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 340  */
12:39:09 341  	out_result_set OUT SYS_REFCURSOR
12:39:09 342  ) AS
12:39:09 343  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
12:39:09 344  BEGIN
12:39:09 345  	OPEN out_result_set FOR
12:39:09 346  	SELECT
12:39:09 347  	  OFFER_CHAIN.ID,
12:39:09 348  	  OFFER_CHAIN.NAME,
12:39:09 349  	  OFFER_CHAIN.DESCRIPTION,
12:39:09 350  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
12:39:09 351  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
12:39:09 352  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
12:39:09 353  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
12:39:09 354  	  PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
12:39:09 355  	  PRODUCT_OFFERING.PRODUCT_ID
12:39:09 356  	FROM
12:39:09 357  	  OFFER_CHAIN,
12:39:09 358  	  OFFER_OFFER_CHAIN,
12:39:09 359  	  OFFER_PRODUCT_OFFERING,
12:39:09 360  	  PRODUCT_OFFERING
12:39:09 361  	WHERE
12:39:09 362  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
12:39:09 363  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
12:39:09 364  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
12:39:09 365  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE;
12:39:09 366  
12:39:09 367  EXCEPTION
12:39:09 368  WHEN OTHERS THEN
12:39:09 369  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 370  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 371  END GET_ACTIVE_OFFER_CHAINS;
12:39:09 372  
12:39:09 373  /******************************************************************************/
12:39:09 374  
12:39:09 375  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
12:39:09 376  /*
12:39:09 377  Throws exceptions (codes):
12:39:09 378  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 379  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 380  */
12:39:09 381  	in_offer_chain_id IN NUMBER,
12:39:09 382  	out_result_set	  OUT SYS_REFCURSOR
12:39:09 383  ) AS
12:39:09 384  -- VARIABLES
12:39:09 385  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
12:39:09 386  temp_offer_chain_id NUMBER;
12:39:09 387  
12:39:09 388  -- EXCEPTIONS
12:39:09 389  BAD_OFFER_CHAIN EXCEPTION;
12:39:09 390  BEGIN
12:39:09 391  
12:39:09 392  	-- Check that offer chain exists
12:39:09 393  	BEGIN
12:39:09 394  	  SELECT
12:39:09 395  	    OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 396  	  FROM
12:39:09 397  	    OFFER_CHAIN
12:39:09 398  	  WHERE
12:39:09 399  	    OFFER_CHAIN.ID = in_offer_chain_id
12:39:09 400  	    AND ROWNUM <= 1;
12:39:09 401  
12:39:09 402  	  EXCEPTION
12:39:09 403  	    WHEN OTHERS THEN
12:39:09 404  	      RAISE BAD_OFFER_CHAIN;
12:39:09 405  	END;
12:39:09 406  
12:39:09 407  	-- Select all products for given offer chain
12:39:09 408  	OPEN out_result_set FOR
12:39:09 409  	SELECT DISTINCT
12:39:09 410  	  PRODUCT_OFFERING.PRODUCT_ID
12:39:09 411  	FROM
12:39:09 412  	  PRODUCT_OFFERING
12:39:09 413  	WHERE
12:39:09 414  	  PRODUCT_OFFERING.ID IN (
12:39:09 415  	    SELECT DISTINCT
12:39:09 416  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
12:39:09 417  	    FROM
12:39:09 418  	      OFFER_PRODUCT_OFFERING
12:39:09 419  	    WHERE
12:39:09 420  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
12:39:09 421  		SELECT
12:39:09 422  		  OFFER_OFFER_CHAIN.OFFER_ID
12:39:09 423  		FROM
12:39:09 424  		  OFFER_OFFER_CHAIN
12:39:09 425  		WHERE
12:39:09 426  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 427  	      )
12:39:09 428  	  );
12:39:09 429  
12:39:09 430  EXCEPTION
12:39:09 431  WHEN BAD_OFFER_CHAIN THEN
12:39:09 432  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 433  	  SPROC_NAME, 'No such offer chain');
12:39:09 434  WHEN OTHERS THEN
12:39:09 435  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 437  END GET_OFFER_CHAIN_PRODUCTS;
12:39:09 438  
12:39:09 439  /******************************************************************************/
12:39:09 440  
12:39:09 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
12:39:09 442  /*
12:39:09 443  Throws exceptions (codes):
12:39:09 444  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 445  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 446  */
12:39:09 447  	in_offer_chain_id	  IN NUMBER,
12:39:09 448  	in_offer_chain_start_date IN DATE
12:39:09 449  ) RETURN DATE AS
12:39:09 450  -- VARIABLES
12:39:09 451  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
12:39:09 452  temp_offer_chain_id    NUMBER;
12:39:09 453  var_offer_chain_length NUMBER;
12:39:09 454  var_offer_duration     VARCHAR2(30);
12:39:09 455  var_offer_recurrences  NUMBER;
12:39:09 456  var_end_date	     DATE;
12:39:09 457  
12:39:09 458  var_offer_ym_interval INTERVAL YEAR TO MONTH;
12:39:09 459  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
12:39:09 460  var_offer_years	    NUMBER;
12:39:09 461  var_offer_months	    NUMBER;
12:39:09 462  var_offer_days	    NUMBER;
12:39:09 463  var_infinity_offers_count NUMBER;
12:39:09 464  
12:39:09 465  var_offers_set SYS_REFCURSOR;
12:39:09 466  
12:39:09 467  -- EXCEPTIONS
12:39:09 468  BAD_OFFER_CHAIN_ID EXCEPTION;
12:39:09 469  BEGIN
12:39:09 470  
12:39:09 471  	var_end_date := in_offer_chain_start_date;
12:39:09 472  
12:39:09 473  	-- Check that offer chain exists
12:39:09 474  	BEGIN
12:39:09 475  	  SELECT
12:39:09 476  	    OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 477  	  FROM
12:39:09 478  	    OFFER_CHAIN
12:39:09 479  	  WHERE
12:39:09 480  	    OFFER_CHAIN.ID = in_offer_chain_id;
12:39:09 481  	  EXCEPTION
12:39:09 482  	    WHEN NO_DATA_FOUND
12:39:09 483  	      THEN RAISE BAD_OFFER_CHAIN_ID;
12:39:09 484  	END;
12:39:09 485  
12:39:09 486  	SELECT
12:39:09 487  	  COUNT(*) into var_infinity_offers_count
12:39:09 488  	FROM
12:39:09 489  	  OFFER_OFFER_CHAIN
12:39:09 490  	WHERE
12:39:09 491  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 492  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V16.OFFER_REC_INFINITY;
12:39:09 493  
12:39:09 494  	IF var_infinity_offers_count > 0 THEN
12:39:09 495  	  -- Offer chain contains offers with infinity num of recurrences
12:39:09 496  	  RETURN NULL;
12:39:09 497  	END IF;
12:39:09 498  
12:39:09 499  	-- Select offers durations
12:39:09 500  	OPEN var_offers_set FOR
12:39:09 501  	SELECT
12:39:09 502  	  OFFER.ENTITLEMENT_DURATION,
12:39:09 503  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
12:39:09 504  	FROM
12:39:09 505  	  OFFER_OFFER_CHAIN
12:39:09 506  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
12:39:09 507  	WHERE
12:39:09 508  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
12:39:09 509  
12:39:09 510  	-- Calculate sum of offers durations
12:39:09 511  	LOOP
12:39:09 512  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
12:39:09 513  	  EXIT WHEN var_offers_set%NOTFOUND;
12:39:09 514  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
12:39:09 515  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
12:39:09 516  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
12:39:09 517  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
12:39:09 518  	END LOOP;
12:39:09 519  
12:39:09 520  	RETURN var_end_date;
12:39:09 521  
12:39:09 522  EXCEPTION
12:39:09 523  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:09 524  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 525  	  SPROC_NAME, 'No such offer chain');
12:39:09 526  WHEN OTHERS THEN
12:39:09 527  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 528  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 529  END CALCULATE_OFFER_CHAIN_END_DATE;
12:39:09 530  
12:39:09 531  /******************************************************************************/
12:39:09 532  
12:39:09 533  FUNCTION CALCULATE_OFFER_AMOUNT (
12:39:09 534  	in_offer_id IN NUMBER
12:39:09 535  ) RETURN NUMBER AS
12:39:09 536  -- VARIABLES
12:39:09 537  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
12:39:09 538  temp_offer_id NUMBER;
12:39:09 539  
12:39:09 540  var_product_offering_set	    SYS_REFCURSOR;
12:39:09 541  var_product_offering_id	    NUMBER;
12:39:09 542  var_product_offering_price    NUMBER(10,6);
12:39:09 543  var_product_offering_t_amount NUMBER(10,6);
12:39:09 544  var_product_offering_quantity NUMBER;
12:39:09 545  
12:39:09 546  var_total_amount NUMBER(10,6);
12:39:09 547  var_final_amount NUMBER(10,2);
12:39:09 548  
12:39:09 549  var_percent_discount NUMBER(10,2);
12:39:09 550  var_fixed_discount NUMBER(10,6);
12:39:09 551  
12:39:09 552  -- EXCEPTIONS
12:39:09 553  BAD_OFFER_ID EXCEPTION;
12:39:09 554  BEGIN
12:39:09 555  
12:39:09 556  	BEGIN
12:39:09 557  	  SELECT
12:39:09 558  	    OFFER.ID into temp_offer_id
12:39:09 559  	  FROM
12:39:09 560  	    OFFER
12:39:09 561  	  WHERE
12:39:09 562  	    OFFER.ID = in_offer_id;
12:39:09 563  	  EXCEPTION
12:39:09 564  	    WHEN NO_DATA_FOUND THEN
12:39:09 565  	      RAISE BAD_OFFER_ID;
12:39:09 566  	END;
12:39:09 567  
12:39:09 568  	OPEN var_product_offering_set FOR
12:39:09 569  	SELECT
12:39:09 570  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
12:39:09 571  	  PRODUCT_OFFERING.UNIT_PRICE,
12:39:09 572  	  PRODUCT_OFFERING.QUANTITY
12:39:09 573  	FROM
12:39:09 574  	  OFFER_PRODUCT_OFFERING
12:39:09 575  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
12:39:09 576  	WHERE
12:39:09 577  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
12:39:09 578  
12:39:09 579  	var_total_amount := 0;
12:39:09 580  
12:39:09 581  	LOOP
12:39:09 582  	  FETCH var_product_offering_set into
12:39:09 583  	    var_product_offering_id,
12:39:09 584  	    var_product_offering_price,
12:39:09 585  	    var_product_offering_quantity;
12:39:09 586  	  EXIT WHEN var_product_offering_set%NOTFOUND;
12:39:09 587  
12:39:09 588  	  SELECT
12:39:09 589  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
12:39:09 590  	  FROM
12:39:09 591  	    DISCOUNT_PRODUCT_OFFERING
12:39:09 592  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
12:39:09 593  	  WHERE
12:39:09 594  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
12:39:09 595  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
12:39:09 596  
12:39:09 597  	  SELECT
12:39:09 598  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
12:39:09 599  	  FROM
12:39:09 600  	    DISCOUNT_PRODUCT_OFFERING
12:39:09 601  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
12:39:09 602  	  WHERE
12:39:09 603  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
12:39:09 604  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
12:39:09 605  
12:39:09 606  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
12:39:09 607  
12:39:09 608  	  IF var_percent_discount IS NOT NULL THEN
12:39:09 609  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
12:39:09 610  	  END IF;
12:39:09 611  
12:39:09 612  	  IF var_fixed_discount IS NOT NULL THEN
12:39:09 613  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
12:39:09 614  	  END IF;
12:39:09 615  
12:39:09 616  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
12:39:09 617  	END LOOP;
12:39:09 618  	var_final_amount := var_total_amount;
12:39:09 619  	RETURN var_final_amount;
12:39:09 620  
12:39:09 621  EXCEPTION
12:39:09 622  WHEN BAD_OFFER_ID THEN
12:39:09 623  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 624  	  SPROC_NAME, 'No such offer');
12:39:09 625  WHEN OTHERS THEN
12:39:09 626  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 627  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 628  END CALCULATE_OFFER_AMOUNT;
12:39:09 629  
12:39:09 630  /******************************************************************************/
12:39:09 631  
12:39:09 632  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
12:39:09 633  	in_offer_chain_id IN NUMBER
12:39:09 634  ) RETURN NUMBER AS
12:39:09 635  -- VARIABLES
12:39:09 636  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
12:39:09 637  temp_offer_chain_id    NUMBER;
12:39:09 638  var_first_offer_id     NUMBER;
12:39:09 639  -- EXCEPTIONS
12:39:09 640  BAD_OFFER_CHAIN_ID      EXCEPTION;
12:39:09 641  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
12:39:09 642  EXCEPTION_MESSAGE       VARCHAR2(1024);
12:39:09 643  BEGIN
12:39:09 644  
12:39:09 645  	BEGIN
12:39:09 646  	  SELECT
12:39:09 647  	    OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 648  	  FROM
12:39:09 649  	    OFFER_CHAIN
12:39:09 650  	  WHERE
12:39:09 651  	    OFFER_CHAIN.ID = in_offer_chain_id;
12:39:09 652  	  EXCEPTION
12:39:09 653  	    WHEN NO_DATA_FOUND THEN
12:39:09 654  	      RAISE BAD_OFFER_CHAIN_ID;
12:39:09 655  	END;
12:39:09 656  
12:39:09 657  	BEGIN
12:39:09 658  	  PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(
12:39:09 659  	    in_offer_chain_id => in_offer_chain_id,
12:39:09 660  	    out_offer_id      => var_first_offer_id
12:39:09 661  	  );
12:39:09 662  	  EXCEPTION
12:39:09 663  	    WHEN OTHERS THEN
12:39:09 664  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 665  	      RAISE CAN_NOT_GET_FIRST_OFFER;
12:39:09 666  	END;
12:39:09 667  
12:39:09 668  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
12:39:09 669  
12:39:09 670  EXCEPTION
12:39:09 671  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:09 672  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 673  	  SPROC_NAME, 'No such offer chain');
12:39:09 674  WHEN CAN_NOT_GET_FIRST_OFFER THEN
12:39:09 675  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 676  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
12:39:09 677  WHEN OTHERS THEN
12:39:09 678  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 680  END CALCULATE_OFFER_CHAIN_AMOUNT;
12:39:09 681  
12:39:09 682  /******************************************************************************/
12:39:09 683  
12:39:09 684  FUNCTION GET_FIRST_OFFER_INDEX (
12:39:09 685  	in_offer_chain_id IN NUMBER
12:39:09 686  ) RETURN NUMBER AS
12:39:09 687  -- VARIABLES
12:39:09 688  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
12:39:09 689  var_first_offer_index NUMBER;
12:39:09 690  BEGIN
12:39:09 691  
12:39:09 692  	SELECT
12:39:09 693  	  INDEX_VALUE into var_first_offer_index
12:39:09 694  	FROM (
12:39:09 695  	  SELECT
12:39:09 696  	    OFFER_OFFER_CHAIN.INDEX_VALUE
12:39:09 697  	  FROM
12:39:09 698  	    OFFER_OFFER_CHAIN
12:39:09 699  	  WHERE
12:39:09 700  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 701  	  ORDER BY
12:39:09 702  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
12:39:09 703  	)
12:39:09 704  	WHERE
12:39:09 705  	  ROWNUM <= 1;
12:39:09 706  
12:39:09 707  	RETURN var_first_offer_index;
12:39:09 708  
12:39:09 709  EXCEPTION
12:39:09 710  WHEN NO_DATA_FOUND THEN
12:39:09 711  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 712  	  SPROC_NAME, 'No such offer chain');
12:39:09 713  WHEN OTHERS THEN
12:39:09 714  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 715  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 716  END GET_FIRST_OFFER_INDEX;
12:39:09 717  
12:39:09 718  /******************************************************************************/
12:39:09 719  
12:39:09 720  FUNCTION GET_NEXT_OFFER_INDEX (
12:39:09 721  /*
12:39:09 722  NULL, if not exists
12:39:09 723  */
12:39:09 724  	in_offer_chain_id	     IN NUMBER,
12:39:09 725  	in_offer_chain_current_index IN NUMBER
12:39:09 726  ) RETURN NUMBER AS
12:39:09 727  -- VARIABLES
12:39:09 728  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
12:39:09 729  temp_offer_chain_id	     NUMBER;
12:39:09 730  temp_offer_chain_current_index NUMBER;
12:39:09 731  var_result		     NUMBER;
12:39:09 732  -- EXCEPTIONS
12:39:09 733  BAD_OFFER_CHAIN_ID      EXCEPTION;
12:39:09 734  BAD_CURRENT_INDEX_VALUE EXCEPTION;
12:39:09 735  BEGIN
12:39:09 736  
12:39:09 737  	-- Check that offer chain exists
12:39:09 738  	BEGIN
12:39:09 739  	  SELECT
12:39:09 740  	    OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 741  	  FROM
12:39:09 742  	    OFFER_CHAIN
12:39:09 743  	  WHERE
12:39:09 744  	    OFFER_CHAIN.ID = in_offer_chain_id;
12:39:09 745  	  EXCEPTION
12:39:09 746  	    WHEN NO_DATA_FOUND THEN
12:39:09 747  	      RAISE BAD_OFFER_CHAIN_ID;
12:39:09 748  	END;
12:39:09 749  
12:39:09 750  	-- Check that current offer index exists
12:39:09 751  	BEGIN
12:39:09 752  	  SELECT
12:39:09 753  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
12:39:09 754  	  FROM
12:39:09 755  	    OFFER_OFFER_CHAIN
12:39:09 756  	  WHERE
12:39:09 757  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 758  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
12:39:09 759  	    -- TODO: delete next line
12:39:09 760  	    AND ROWNUM <= 1;
12:39:09 761  	  EXCEPTION
12:39:09 762  	    WHEN NO_DATA_FOUND THEN
12:39:09 763  	      RAISE BAD_CURRENT_INDEX_VALUE;
12:39:09 764  	END;
12:39:09 765  
12:39:09 766  	-- Get next offer index
12:39:09 767  	BEGIN
12:39:09 768  	  SELECT
12:39:09 769  	    INDEX_VALUE into var_result
12:39:09 770  	  FROM (
12:39:09 771  	    SELECT
12:39:09 772  	      OFFER_OFFER_CHAIN.INDEX_VALUE
12:39:09 773  	    FROM
12:39:09 774  	      OFFER_OFFER_CHAIN
12:39:09 775  	    WHERE
12:39:09 776  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 777  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
12:39:09 778  	    ORDER BY
12:39:09 779  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
12:39:09 780  	  )
12:39:09 781  	  WHERE
12:39:09 782  	    ROWNUM <= 1;
12:39:09 783  	  EXCEPTION
12:39:09 784  	    WHEN NO_DATA_FOUND THEN
12:39:09 785  	      var_result := NULL;
12:39:09 786  	END;
12:39:09 787  
12:39:09 788  	RETURN var_result;
12:39:09 789  
12:39:09 790  EXCEPTION
12:39:09 791  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:09 792  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 793  	  SPROC_NAME, 'No such offer chain');
12:39:09 794  WHEN BAD_CURRENT_INDEX_VALUE THEN
12:39:09 795  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 796  	  SPROC_NAME, 'Bad current index value');
12:39:09 797  WHEN OTHERS THEN
12:39:09 798  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 799  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 800  END GET_NEXT_OFFER_INDEX;
12:39:09 801  
12:39:09 802  /******************************************************************************/
12:39:09 803  
12:39:09 804  PROCEDURE P_GET_NEXT_OFFER_INDEX (
12:39:09 805  	in_offer_chain_id	     IN NUMBER,
12:39:09 806  	in_offer_chain_current_index IN NUMBER,
12:39:09 807  	out_next_offer_index	     OUT NUMBER
12:39:09 808  ) AS
12:39:09 809  BEGIN
12:39:09 810  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
12:39:09 811  	  in_offer_chain_id,
12:39:09 812  	  in_offer_chain_current_index
12:39:09 813  	);
12:39:09 814  END P_GET_NEXT_OFFER_INDEX;
12:39:09 815  
12:39:09 816  /******************************************************************************/
12:39:09 817  
12:39:09 818  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
12:39:09 819  	in_license_id		     IN NUMBER,
12:39:09 820  	in_offer_chain_current_index IN NUMBER,
12:39:09 821  	out_next_offer_index	     OUT NUMBER
12:39:09 822  ) AS
12:39:09 823  -- VARIABLES
12:39:09 824  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
12:39:09 825  var_offer_chain_id NUMBER;
12:39:09 826  -- EXCEPTIONS
12:39:09 827  BAD_LICENSE_ID		   EXCEPTION;
12:39:09 828  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
12:39:09 829  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
12:39:09 830  BEGIN
12:39:09 831  
12:39:09 832  	BEGIN
12:39:09 833  	  SELECT
12:39:09 834  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
12:39:09 835  	  FROM
12:39:09 836  	    SUBSCRIPTION
12:39:09 837  	  WHERE
12:39:09 838  	    SUBSCRIPTION.ID = (
12:39:09 839  	      SELECT
12:39:09 840  		LICENSE.SUBSCRIPTION_ID
12:39:09 841  	      FROM
12:39:09 842  		LICENSE
12:39:09 843  	      WHERE
12:39:09 844  		LICENSE.ID = in_license_id
12:39:09 845  	    );
12:39:09 846  	  EXCEPTION
12:39:09 847  	    WHEN NO_DATA_FOUND THEN
12:39:09 848  	      RAISE BAD_LICENSE_ID;
12:39:09 849  	END;
12:39:09 850  
12:39:09 851  	BEGIN
12:39:09 852  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
12:39:09 853  	    var_offer_chain_id,
12:39:09 854  	    in_offer_chain_current_index
12:39:09 855  	  );
12:39:09 856  	  EXCEPTION
12:39:09 857  	    WHEN OTHERS THEN
12:39:09 858  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 859  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
12:39:09 860  	END;
12:39:09 861  
12:39:09 862  EXCEPTION
12:39:09 863  WHEN BAD_LICENSE_ID THEN
12:39:09 864  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 865  	  SPROC_NAME, 'No such license');
12:39:09 866  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
12:39:09 867  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 868  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
12:39:09 869  WHEN OTHERS THEN
12:39:09 870  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 871  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 872  END GET_NEXT_OFFER_INDEX_BY_LCNS;
12:39:09 873  
12:39:09 874  /******************************************************************************/
12:39:09 875  
12:39:09 876  FUNCTION IS_OFFER_INDEX_EXISTS (
12:39:09 877  /*
12:39:09 878  GLOBAL_CONSTANTS_V16.TRUE - exists
12:39:09 879  GLOBAL_CONSTANTS_V16.FALSE - not exists
12:39:09 880  */
12:39:09 881  	in_offer_chain_id	   IN NUMBER,
12:39:09 882  	in_offer_chain_offer_index IN NUMBER
12:39:09 883  ) RETURN NUMBER AS
12:39:09 884  -- VARIABLES
12:39:09 885  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
12:39:09 886  temp_count NUMBER;
12:39:09 887  BEGIN
12:39:09 888  
12:39:09 889  	SELECT
12:39:09 890  	  COUNT(*) into temp_count
12:39:09 891  	FROM
12:39:09 892  	  OFFER_OFFER_CHAIN
12:39:09 893  	WHERE
12:39:09 894  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 895  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
12:39:09 896  
12:39:09 897  	IF temp_count > 0 THEN
12:39:09 898  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:09 899  	ELSE
12:39:09 900  	  RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:09 901  	END IF;
12:39:09 902  
12:39:09 903  EXCEPTION
12:39:09 904  WHEN OTHERS THEN
12:39:09 905  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 906  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 907  END IS_OFFER_INDEX_EXISTS;
12:39:09 908  
12:39:09 909  /******************************************************************************/
12:39:09 910  
12:39:09 911  PROCEDURE GET_OFFER_LENGTH (
12:39:09 912  	in_offer_id IN NUMBER,
12:39:09 913  	out_years   OUT NUMBER,
12:39:09 914  	out_months  OUT NUMBER,
12:39:09 915  	out_days    OUT NUMBER
12:39:09 916  ) AS
12:39:09 917  -- VARIABLES
12:39:09 918  var_offer_duration VARCHAR2(30);
12:39:09 919  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
12:39:09 920  -- EXCEPTIONS
12:39:09 921  BAD_OFFER_ID	     EXCEPTION;
12:39:09 922  CAN_NOT_PARSE_DURATION EXCEPTION;
12:39:09 923  EXCEPTION_MESSAGE       VARCHAR2(1024);
12:39:09 924  BEGIN
12:39:09 925  
12:39:09 926  	BEGIN
12:39:09 927  	  SELECT
12:39:09 928  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
12:39:09 929  	  FROM
12:39:09 930  	    OFFER
12:39:09 931  	  WHERE
12:39:09 932  	    OFFER.ID = in_offer_id;
12:39:09 933  	  EXCEPTION
12:39:09 934  	    WHEN NO_DATA_FOUND THEN
12:39:09 935  	      RAISE BAD_OFFER_ID;
12:39:09 936  	END;
12:39:09 937  
12:39:09 938  	BEGIN
12:39:09 939  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
12:39:09 940  	    var_offer_duration,
12:39:09 941  	    out_years,
12:39:09 942  	    out_months,
12:39:09 943  	    out_days
12:39:09 944  	  );
12:39:09 945  	  EXCEPTION
12:39:09 946  	    WHEN OTHERS THEN
12:39:09 947  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:09 948  	      RAISE CAN_NOT_PARSE_DURATION;
12:39:09 949  	END;
12:39:09 950  
12:39:09 951  EXCEPTION
12:39:09 952  WHEN BAD_OFFER_ID THEN
12:39:09 953  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 954  	  SPROC_NAME, 'No such offer');
12:39:09 955  WHEN CAN_NOT_PARSE_DURATION THEN
12:39:09 956  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 957  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
12:39:09 958  WHEN OTHERS THEN
12:39:09 959  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 960  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 961  END GET_OFFER_LENGTH;
12:39:09 962  
12:39:09 963  /******************************************************************************/
12:39:09 964  
12:39:09 965  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
12:39:09 966  	in_offer_id   IN NUMBER,
12:39:09 967  	in_start_date IN DATE DEFAULT SYSDATE,
12:39:09 968  	out_days      OUT NUMBER
12:39:09 969  ) AS
12:39:09 970  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
12:39:09 971  -- VARIABLES
12:39:09 972  var_offer_duration VARCHAR2(30);
12:39:09 973  var_offer_years	 NUMBER;
12:39:09 974  var_offer_months	 NUMBER;
12:39:09 975  var_offer_days	 NUMBER;
12:39:09 976  var_offer_end_date DATE;
12:39:09 977  -- EXCEPTIONS
12:39:09 978  BAD_OFFER_ID EXCEPTION;
12:39:09 979  BEGIN
12:39:09 980  
12:39:09 981  	BEGIN
12:39:09 982  	  SELECT
12:39:09 983  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
12:39:09 984  	  FROM
12:39:09 985  	    OFFER
12:39:09 986  	  WHERE
12:39:09 987  	    OFFER.ID = in_offer_id;
12:39:09 988  	  EXCEPTION
12:39:09 989  	    WHEN NO_DATA_FOUND THEN
12:39:09 990  	      RAISE BAD_OFFER_ID;
12:39:09 991  	END;
12:39:09 992  
12:39:09 993  	PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS (
12:39:09 994  	  var_offer_duration,
12:39:09 995  	  var_offer_years,
12:39:09 996  	  var_offer_months,
12:39:09 997  	  var_offer_days
12:39:09 998  	);
12:39:09 999  
12:39:09 1000  	 var_offer_end_date := ( ( in_start_date
12:39:09 1001  	   + GLOBAL_CONSTANTS_V16.ONE_DAY_INTERVAL * var_offer_days )
12:39:09 1002  	   + GLOBAL_CONSTANTS_V16.ONE_MONTH_INTERVAL * var_offer_months )
12:39:09 1003  	   + GLOBAL_CONSTANTS_V16.ONE_YEAR_INTERVAL * var_offer_years;
12:39:09 1004  
12:39:09 1005  	 out_days := var_offer_end_date - in_start_date;
12:39:09 1006  
12:39:09 1007  EXCEPTION
12:39:09 1008  WHEN BAD_OFFER_ID THEN
12:39:09 1009  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1010  	   SPROC_NAME, 'No such offer');
12:39:09 1011  WHEN OTHERS THEN
12:39:09 1012  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1013  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1014  END GET_OFFER_LENGTH_IN_DAYS;
12:39:09 1015  
12:39:09 1016  /******************************************************************************/
12:39:09 1017  
12:39:09 1018  PROCEDURE GET_OFFER_PRODUCTS (
12:39:09 1019  /*
12:39:09 1020  Throws exceptions (codes):
12:39:09 1021  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 1022  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1023  */
12:39:09 1024  	 in_offer_id	IN NUMBER,
12:39:09 1025  	 out_result_set OUT SYS_REFCURSOR
12:39:09 1026  ) AS
12:39:09 1027  -- VARIABLES
12:39:09 1028  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
12:39:09 1029  temp_offerr_id NUMBER;
12:39:09 1030  -- EXCEPTIONS
12:39:09 1031  BAD_OFFER_ID EXCEPTION;
12:39:09 1032  BEGIN
12:39:09 1033  
12:39:09 1034  	 BEGIN
12:39:09 1035  	   SELECT
12:39:09 1036  	     OFFER.ID into temp_offerr_id
12:39:09 1037  	   FROM
12:39:09 1038  	     OFFER
12:39:09 1039  	   WHERE
12:39:09 1040  	     OFFER.ID = in_offer_id;
12:39:09 1041  	   EXCEPTION
12:39:09 1042  	     WHEN NO_DATA_FOUND THEN
12:39:09 1043  	       RAISE BAD_OFFER_ID;
12:39:09 1044  	 END;
12:39:09 1045  
12:39:09 1046  	 OPEN out_result_set FOR
12:39:09 1047  	 SELECT DISTINCT
12:39:09 1048  	   PRODUCT.ID,
12:39:09 1049  	   PRODUCT.NAME
12:39:09 1050  	 FROM
12:39:09 1051  	   PRODUCT
12:39:09 1052  	 WHERE
12:39:09 1053  	   PRODUCT.ID IN (
12:39:09 1054  	       SELECT
12:39:09 1055  		 PRODUCT_OFFERING.PRODUCT_ID
12:39:09 1056  	       FROM
12:39:09 1057  		 OFFER_PRODUCT_OFFERING
12:39:09 1058  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
12:39:09 1059  	       WHERE
12:39:09 1060  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
12:39:09 1061  	     );
12:39:09 1062  
12:39:09 1063  EXCEPTION
12:39:09 1064  WHEN BAD_OFFER_ID THEN
12:39:09 1065  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1066  	   SPROC_NAME, 'No such offer');
12:39:09 1067  WHEN OTHERS THEN
12:39:09 1068  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1070  END GET_OFFER_PRODUCTS;
12:39:09 1071  
12:39:09 1072  /******************************************************************************/
12:39:09 1073  
12:39:09 1074  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
12:39:09 1075  /*
12:39:09 1076  Throws exceptions (codes):
12:39:09 1077  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 1078  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1079  */
12:39:09 1080  	 in_offer_chain_id IN NUMBER,
12:39:09 1081  	 out_result_set    OUT SYS_REFCURSOR
12:39:09 1082  ) AS
12:39:09 1083  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
12:39:09 1084  -- VARIABLES
12:39:09 1085  temp_offer_chain_id NUMBER;
12:39:09 1086  -- EXCEPTIONS
12:39:09 1087  BAD_OFFER_CHAIN_ID EXCEPTION;
12:39:09 1088  BEGIN
12:39:09 1089  
12:39:09 1090  	 BEGIN
12:39:09 1091  	   SELECT
12:39:09 1092  	     OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 1093  	   FROM
12:39:09 1094  	     OFFER_CHAIN
12:39:09 1095  	   WHERE
12:39:09 1096  	     OFFER_CHAIN.ID = in_offer_chain_id;
12:39:09 1097  	   EXCEPTION
12:39:09 1098  	     WHEN NO_DATA_FOUND THEN
12:39:09 1099  	       RAISE BAD_OFFER_CHAIN_ID;
12:39:09 1100  	 END;
12:39:09 1101  
12:39:09 1102  	 OPEN out_result_set FOR
12:39:09 1103  	 SELECT
12:39:09 1104  	   PRODUCT_OFFERING.ID,
12:39:09 1105  	   PRODUCT_OFFERING.PRODUCT_ID,
12:39:09 1106  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
12:39:09 1107  	   PRODUCT_OFFERING.UNIT_PRICE,
12:39:09 1108  	   PRODUCT_OFFERING.QUANTITY,
12:39:09 1109  	   PRODUCT_OFFERING.CREATE_DATE,
12:39:09 1110  	   PRODUCT_OFFERING.CREATED_BY,
12:39:09 1111  	   PRODUCT.NAME,
12:39:09 1112  	   PRODUCT.PRODUCT_URI,
12:39:09 1113  	   CAPABILITY.ID CAP_ID,
12:39:09 1114  	   CAPABILITY.CODE CAP_CODE,
12:39:09 1115  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
12:39:09 1116  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
12:39:09 1117  	 FROM
12:39:09 1118  	   PRODUCT_OFFERING
12:39:09 1119  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
12:39:09 1120  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
12:39:09 1121  	 WHERE
12:39:09 1122  	   PRODUCT_OFFERING.ID IN (
12:39:09 1123  	     SELECT DISTINCT
12:39:09 1124  	       PRODUCT_OFFERING_ID
12:39:09 1125  	     FROM
12:39:09 1126  	       OFFER_PRODUCT_OFFERING
12:39:09 1127  	     WHERE
12:39:09 1128  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
12:39:09 1129  		 SELECT DISTINCT
12:39:09 1130  		   OFFER_ID
12:39:09 1131  		 FROM
12:39:09 1132  		   OFFER_OFFER_CHAIN
12:39:09 1133  		 WHERE
12:39:09 1134  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 1135  	       )
12:39:09 1136  	   );
12:39:09 1137  
12:39:09 1138  EXCEPTION
12:39:09 1139  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:09 1140  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1141  	   SPROC_NAME, 'Bad offer chain id');
12:39:09 1142  WHEN OTHERS THEN
12:39:09 1143  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1144  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1145  END GET_OFFER_CHAIN_PROD_OFFERINGS;
12:39:09 1146  
12:39:09 1147  /******************************************************************************/
12:39:09 1148  
12:39:09 1149  FUNCTION CHECK_FOR_SAME_PRODUCTS (
12:39:09 1150  /*
12:39:09 1151  Throws exceptions (codes):
12:39:09 1152  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 1153  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1154  Returns:
12:39:09 1155  GLOBAL_CONSTANTS_V16.TRUE if there are at least one same product
12:39:09 1156  GLOBAL_CONSTANTS_V16.FALSE else
12:39:09 1157  */
12:39:09 1158  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
12:39:09 1159  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
12:39:09 1160  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:09 1161  ) RETURN NUMBER AS
12:39:09 1162  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
12:39:09 1163  -- CONSTANTS
12:39:09 1164  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
12:39:09 1165  -- VARIABLES
12:39:09 1166  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
12:39:09 1167  var_same_products	SYS_REFCURSOR;
12:39:09 1168  var_same_product_id	NUMBER;
12:39:09 1169  same_product_count	NUMBER;
12:39:09 1170  var_product_eligibility_limit NUMBER;
12:39:09 1171  s_product_eligibility_limit   VARCHAR2(100);
12:39:09 1172  -- EXCEPTIONS
12:39:09 1173  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
12:39:09 1174  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
12:39:09 1175  BEGIN
12:39:09 1176  
12:39:09 1177  	 -- Check that first offer chain exists
12:39:09 1178  	 BEGIN
12:39:09 1179  	   SELECT
12:39:09 1180  	     OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 1181  	   FROM
12:39:09 1182  	     OFFER_CHAIN
12:39:09 1183  	   WHERE
12:39:09 1184  	     OFFER_CHAIN.ID = in_offer_chain_1;
12:39:09 1185  	   EXCEPTION
12:39:09 1186  	     WHEN NO_DATA_FOUND THEN
12:39:09 1187  	       RAISE BAD_FIRST_OFFER_CHAIN;
12:39:09 1188  	 END;
12:39:09 1189  
12:39:09 1190  	 -- Check that second offer chain exists
12:39:09 1191  	 BEGIN
12:39:09 1192  	   SELECT
12:39:09 1193  	     OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 1194  	   FROM
12:39:09 1195  	     OFFER_CHAIN
12:39:09 1196  	   WHERE
12:39:09 1197  	     OFFER_CHAIN.ID = in_offer_chain_2;
12:39:09 1198  	   EXCEPTION
12:39:09 1199  	     WHEN NO_DATA_FOUND THEN
12:39:09 1200  	       RAISE BAD_SECOND_OFFER_CHAIN;
12:39:09 1201  	 END;
12:39:09 1202  
12:39:09 1203  	 PROCS_OFFER_CHAIN_V16.GET_OFF_CHAINS_SAME_PRODUCTS(
12:39:09 1204  	   in_offer_chain_1 => in_offer_chain_1,
12:39:09 1205  	   in_offer_chain_2 => in_offer_chain_2,
12:39:09 1206  	   out_result_set   => var_same_products
12:39:09 1207  	 );
12:39:09 1208  
12:39:09 1209  	 LOOP
12:39:09 1210  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
12:39:09 1211  	   EXIT WHEN var_same_products%NOTFOUND;
12:39:09 1212  
12:39:09 1213  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:09 1214  	     -- Return false because this offer chains having same products
12:39:09 1215  	     RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:09 1216  	   ELSE
12:39:09 1217  
12:39:09 1218  	     -- Get eligibility rule for given product
12:39:09 1219  	     BEGIN
12:39:09 1220  	       SELECT
12:39:09 1221  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
12:39:09 1222  	       FROM
12:39:09 1223  		 PRODUCT_ELIGIBILITY
12:39:09 1224  	       WHERE
12:39:09 1225  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
12:39:09 1226  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
12:39:09 1227  
12:39:09 1228  	       -- REVU: What should to be here? 1?
12:39:09 1229  	       EXCEPTION
12:39:09 1230  		 WHEN NO_DATA_FOUND THEN
12:39:09 1231  		   s_product_eligibility_limit := '1';
12:39:09 1232  	     END;
12:39:09 1233  
12:39:09 1234  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V16.MAX_CONSURRENT_PRD_UNLIM THEN
12:39:09 1235  	       RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:09 1236  	     END IF;
12:39:09 1237  
12:39:09 1238  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
12:39:09 1239  
12:39:09 1240  	     -- Check for limit
12:39:09 1241  	     IF var_product_eligibility_limit < same_product_count THEN
12:39:09 1242  	       RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:09 1243  	     END IF;
12:39:09 1244  
12:39:09 1245  	   END IF;
12:39:09 1246  	 END LOOP;
12:39:09 1247  
12:39:09 1248  	 RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:09 1249  
12:39:09 1250  EXCEPTION
12:39:09 1251  WHEN BAD_FIRST_OFFER_CHAIN THEN
12:39:09 1252  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1253  	   SPROC_NAME, 'First offer chain not found');
12:39:09 1254  WHEN BAD_SECOND_OFFER_CHAIN THEN
12:39:09 1255  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1256  	   SPROC_NAME, 'Second offer chain not found');
12:39:09 1257  WHEN OTHERS THEN
12:39:09 1258  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1259  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1260  END CHECK_FOR_SAME_PRODUCTS;
12:39:09 1261  
12:39:09 1262  /******************************************************************************/
12:39:09 1263  
12:39:09 1264  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
12:39:09 1265  /*
12:39:09 1266  Throws exceptions (codes):
12:39:09 1267  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1268  Returns:
12:39:09 1269  GLOBAL_CONSTANTS_V16.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
12:39:09 1270  GLOBAL_CONSTANTS_V16.FALSE else
12:39:09 1271  */
12:39:09 1272  	 in_offer_chain_id IN NUMBER
12:39:09 1273  ) RETURN NUMBER AS
12:39:09 1274  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
12:39:09 1275  -- VARIABLES
12:39:09 1276  var_is_cancelable_str VARCHAR2(1);
12:39:09 1277  var_is_cancelable     NUMBER;
12:39:09 1278  BEGIN
12:39:09 1279  
12:39:09 1280  	 BEGIN
12:39:09 1281  	   SELECT
12:39:09 1282  	     VALUE INTO var_is_cancelable_str
12:39:09 1283  	   FROM (
12:39:09 1284  	     SELECT
12:39:09 1285  	       VALUE, NAME
12:39:09 1286  	     FROM
12:39:09 1287  	       OFFER_CHAIN_META_DATA
12:39:09 1288  	     WHERE
12:39:09 1289  	       OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 1290  	     )
12:39:09 1291  	   WHERE
12:39:09 1292  	     UPPER(NAME) = 'CANCELABLE';
12:39:09 1293  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
12:39:09 1294  	   EXCEPTION
12:39:09 1295  	     WHEN NO_DATA_FOUND THEN
12:39:09 1296  	       var_is_cancelable := GLOBAL_CONSTANTS_V16.FALSE;
12:39:09 1297  	 END;
12:39:09 1298  
12:39:09 1299  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:09 1300  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:09 1301  	 END IF;
12:39:09 1302  
12:39:09 1303  	 RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:09 1304  
12:39:09 1305  EXCEPTION
12:39:09 1306  WHEN OTHERS THEN
12:39:09 1307  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1308  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1309  END IS_OFFER_CHAIN_CANCELABLE;
12:39:09 1310  
12:39:09 1311  /******************************************************************************/
12:39:09 1312  
12:39:09 1313  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
12:39:09 1314  /*
12:39:09 1315  Throws exceptions (codes):
12:39:09 1316  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1317  */
12:39:09 1318  	 in_offer_chain_id IN NUMBER
12:39:09 1319  ) RETURN NUMBER AS
12:39:09 1320  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
12:39:09 1321  -- VARIABLES
12:39:09 1322  var_max_concurrent_subs_str VARCHAR2(100);
12:39:09 1323  var_max_concurrent_subs	   NUMBER;
12:39:09 1324  BEGIN
12:39:09 1325  
12:39:09 1326  	 BEGIN
12:39:09 1327  	   SELECT
12:39:09 1328  	     VALUE into var_max_concurrent_subs_str
12:39:09 1329  	   FROM
12:39:09 1330  	     (
12:39:09 1331  	       SELECT
12:39:09 1332  		 NAME,
12:39:09 1333  		 VALUE
12:39:09 1334  	       FROM
12:39:09 1335  		 OFFER_CHAIN_ELIGIBILITY
12:39:09 1336  	       WHERE
12:39:09 1337  		 OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 1338  	     )
12:39:09 1339  	   WHERE
12:39:09 1340  	     NAME LIKE GLOBAL_CONSTANTS_V16.MAX_CONCURRENT_SUBS;
12:39:09 1341  
12:39:09 1342  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V16.MAX_CONCURRENT_SUBS_UNLIM THEN
12:39:09 1343  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V16.INFINITY;
12:39:09 1344  	   ELSE
12:39:09 1345  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
12:39:09 1346  	   END IF;
12:39:09 1347  
12:39:09 1348  	   EXCEPTION
12:39:09 1349  	     WHEN NO_DATA_FOUND THEN
12:39:09 1350  	       var_max_concurrent_subs := 1;
12:39:09 1351  	 END;
12:39:09 1352  
12:39:09 1353  	 RETURN var_max_concurrent_subs;
12:39:09 1354  
12:39:09 1355  EXCEPTION
12:39:09 1356  WHEN OTHERS THEN
12:39:09 1357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1358  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1359  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
12:39:09 1360  
12:39:09 1361  /******************************************************************************/
12:39:09 1362  
12:39:09 1363  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
12:39:09 1364  /*
12:39:09 1365  Throws exceptions (codes):
12:39:09 1366  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 1367  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1368  */
12:39:09 1369  	 in_offer_chain_id   IN NUMBER,
12:39:09 1370  	 in_eligibility_name IN VARCHAR2,
12:39:09 1371  	 out_result_set      OUT SYS_REFCURSOR
12:39:09 1372  ) AS
12:39:09 1373  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
12:39:09 1374  -- VARIABLES
12:39:09 1375  temp_offer_chain_id NUMBER;
12:39:09 1376  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
12:39:09 1377  -- EXCEPTIONS
12:39:09 1378  BAD_OFFER_CHAIN_ID EXCEPTION;
12:39:09 1379  BEGIN
12:39:09 1380  
12:39:09 1381  	 BEGIN
12:39:09 1382  	   SELECT
12:39:09 1383  	     OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 1384  	   FROM
12:39:09 1385  	     OFFER_CHAIN
12:39:09 1386  	   WHERE
12:39:09 1387  	     OFFER_CHAIN.ID = in_offer_chain_id;
12:39:09 1388  	   EXCEPTION
12:39:09 1389  	     WHEN NO_DATA_FOUND THEN
12:39:09 1390  	       RAISE BAD_OFFER_CHAIN_ID;
12:39:09 1391  	 END;
12:39:09 1392  
12:39:09 1393  	 var_eligibility_name := UPPER(in_eligibility_name);
12:39:09 1394  
12:39:09 1395  	 OPEN out_result_set FOR
12:39:09 1396  	 SELECT
12:39:09 1397  	   OFFER_CHAIN_ELIGIBILITY.ID,
12:39:09 1398  	   OFFER_CHAIN_ELIGIBILITY.NAME,
12:39:09 1399  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
12:39:09 1400  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
12:39:09 1401  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
12:39:09 1402  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
12:39:09 1403  	 FROM
12:39:09 1404  	   OFFER_CHAIN_ELIGIBILITY
12:39:09 1405  	 WHERE
12:39:09 1406  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 1407  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
12:39:09 1408  
12:39:09 1409  EXCEPTION
12:39:09 1410  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:09 1411  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1412  	   SPROC_NAME, 'No such offer chain');
12:39:09 1413  WHEN OTHERS THEN
12:39:09 1414  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1415  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1416  END GET_OFFER_CHAIN_ELIGIBILITY;
12:39:09 1417  
12:39:09 1418  /******************************************************************************/
12:39:09 1419  
12:39:09 1420  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
12:39:09 1421  /*
12:39:09 1422  Throws exceptions (codes):
12:39:09 1423  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1424  */
12:39:09 1425  	 in_offer_chain_ids  IN VARCHAR2,
12:39:09 1426  	 in_eligibility_name IN VARCHAR2,
12:39:09 1427  	 out_result_set      OUT SYS_REFCURSOR
12:39:09 1428  ) AS
12:39:09 1429  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
12:39:09 1430  -- VARIABLES
12:39:09 1431  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
12:39:09 1432  BEGIN
12:39:09 1433  
12:39:09 1434  	 var_eligibility_name := UPPER(in_eligibility_name);
12:39:09 1435  
12:39:09 1436  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
12:39:09 1437  
12:39:09 1438  	 open out_result_set for
12:39:09 1439  	 'SELECT
12:39:09 1440  	   ID,
12:39:09 1441  	   NAME,
12:39:09 1442  	   VALUE,
12:39:09 1443  	   OFFER_CHAIN_ID,
12:39:09 1444  	   CREATE_DATE,
12:39:09 1445  	   CREATED_BY
12:39:09 1446  	 FROM
12:39:09 1447  	   OFFER_CHAIN_ELIGIBILITY
12:39:09 1448  	 WHERE
12:39:09 1449  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
12:39:09 1450  	   AND UPPER(NAME) = :1'
12:39:09 1451  	 using var_eligibility_name;
12:39:09 1452  
12:39:09 1453  EXCEPTION
12:39:09 1454  WHEN OTHERS THEN
12:39:09 1455  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1456  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1457  END GET_OFFER_CHAINS_ELIGIBILITY;
12:39:09 1458  
12:39:09 1459  /******************************************************************************/
12:39:09 1460  
12:39:09 1461  PROCEDURE GET_OFFER_CHAINS_META_DATA (
12:39:09 1462  	 in_offer_chain_ids IN VARCHAR2,
12:39:09 1463  	 in_meta_data_name  IN VARCHAR2,
12:39:09 1464  	 out_result_set     OUT SYS_REFCURSOR
12:39:09 1465  ) AS
12:39:09 1466  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
12:39:09 1467  -- VARIABLES
12:39:09 1468  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
12:39:09 1469  BEGIN
12:39:09 1470  
12:39:09 1471  	 var_meta_data_name := UPPER(in_meta_data_name);
12:39:09 1472  
12:39:09 1473  	 open out_result_set for
12:39:09 1474  	 'select
12:39:09 1475  	   ID,
12:39:09 1476  	   NAME,
12:39:09 1477  	   VALUE,
12:39:09 1478  	   OFFER_CHAIN_ID,
12:39:09 1479  	   CREATED_BY,
12:39:09 1480  	   CREATE_DATE
12:39:09 1481  	 from
12:39:09 1482  	   OFFER_CHAIN_META_DATA
12:39:09 1483  	 where
12:39:09 1484  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
12:39:09 1485  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
12:39:09 1486  	 using var_meta_data_name;
12:39:09 1487  
12:39:09 1488  EXCEPTION
12:39:09 1489  WHEN OTHERS THEN
12:39:09 1490  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1491  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1492  END GET_OFFER_CHAINS_META_DATA;
12:39:09 1493  
12:39:09 1494  PROCEDURE GET_OFFER_CHAIN_META_DATA (
12:39:09 1495  /*
12:39:09 1496  Throws exceptions (codes):
12:39:09 1497  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 1498  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1499  */
12:39:09 1500  	 in_offer_chain_id IN NUMBER,
12:39:09 1501  	 in_meta_data_name IN VARCHAR2,
12:39:09 1502  	 out_result_set    OUT SYS_REFCURSOR
12:39:09 1503  ) AS
12:39:09 1504  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
12:39:09 1505  -- VARIABLES
12:39:09 1506  temp_offer_chain_id NUMBER;
12:39:09 1507  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
12:39:09 1508  -- EXCEPTIONS
12:39:09 1509  BAD_OFFER_CHAIN_ID EXCEPTION;
12:39:09 1510  BEGIN
12:39:09 1511  
12:39:09 1512  	 BEGIN
12:39:09 1513  	   SELECT
12:39:09 1514  	     OFFER_CHAIN.ID into temp_offer_chain_id
12:39:09 1515  	   FROM
12:39:09 1516  	     OFFER_CHAIN
12:39:09 1517  	   WHERE
12:39:09 1518  	     OFFER_CHAIN.ID = in_offer_chain_id;
12:39:09 1519  	   EXCEPTION
12:39:09 1520  	     WHEN NO_DATA_FOUND THEN
12:39:09 1521  	       RAISE BAD_OFFER_CHAIN_ID;
12:39:09 1522  	 END;
12:39:09 1523  
12:39:09 1524  	 var_meta_data_name := UPPER(in_meta_data_name);
12:39:09 1525  
12:39:09 1526  	 OPEN out_result_set FOR
12:39:09 1527  	 SELECT
12:39:09 1528  	   OFFER_CHAIN_META_DATA.ID,
12:39:09 1529  	   OFFER_CHAIN_META_DATA.NAME,
12:39:09 1530  	   OFFER_CHAIN_META_DATA.VALUE,
12:39:09 1531  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
12:39:09 1532  	   OFFER_CHAIN_META_DATA.CREATED_BY,
12:39:09 1533  	   OFFER_CHAIN_META_DATA.CREATE_DATE
12:39:09 1534  	 FROM
12:39:09 1535  	   OFFER_CHAIN_META_DATA
12:39:09 1536  	 WHERE
12:39:09 1537  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 1538  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
12:39:09 1539  
12:39:09 1540  EXCEPTION
12:39:09 1541  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:09 1542  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1543  	   SPROC_NAME, 'No such offer chain');
12:39:09 1544  WHEN OTHERS THEN
12:39:09 1545  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1546  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1547  END GET_OFFER_CHAIN_META_DATA;
12:39:09 1548  
12:39:09 1549  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
12:39:09 1550  /*
12:39:09 1551  Throws exceptions (codes):
12:39:09 1552  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 1553  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1554  */
12:39:09 1555  	 in_offer_id	IN NUMBER,
12:39:09 1556  	 out_result_set OUT SYS_REFCURSOR
12:39:09 1557  ) AS
12:39:09 1558  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
12:39:09 1559  -- VARIABLES
12:39:09 1560  temp_offer_id NUMBER;
12:39:09 1561  -- EXCEPTIONS
12:39:09 1562  BAD_OFFER_ID EXCEPTION;
12:39:09 1563  BEGIN
12:39:09 1564  
12:39:09 1565  	 BEGIN
12:39:09 1566  	   SELECT
12:39:09 1567  	     OFFER.ID into temp_offer_id
12:39:09 1568  	   FROM
12:39:09 1569  	     OFFER
12:39:09 1570  	   WHERE
12:39:09 1571  	     OFFER.ID = in_offer_id;
12:39:09 1572  	   EXCEPTION
12:39:09 1573  	     WHEN NO_DATA_FOUND THEN
12:39:09 1574  	       RAISE BAD_OFFER_ID;
12:39:09 1575  	 END;
12:39:09 1576  
12:39:09 1577  	 OPEN out_result_set FOR
12:39:09 1578  	 SELECT DISTINCT
12:39:09 1579  	   PRODUCT_OFFERING.ID,
12:39:09 1580  	   PRODUCT_OFFERING.PRODUCT_ID,
12:39:09 1581  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
12:39:09 1582  	   PRODUCT_OFFERING.UNIT_PRICE,
12:39:09 1583  	   PRODUCT_OFFERING.QUANTITY,
12:39:09 1584  	   PRODUCT_OFFERING.CREATE_DATE,
12:39:09 1585  	   PRODUCT_OFFERING.CREATED_BY,
12:39:09 1586  	   CAPABILITY.ID CAP_ID,
12:39:09 1587  	   CAPABILITY.CODE CAP_CODE,
12:39:09 1588  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
12:39:09 1589  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
12:39:09 1590  	 FROM
12:39:09 1591  	   OFFER_PRODUCT_OFFERING
12:39:09 1592  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
12:39:09 1593  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
12:39:09 1594  	 WHERE
12:39:09 1595  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
12:39:09 1596  
12:39:09 1597  EXCEPTION
12:39:09 1598  WHEN BAD_OFFER_ID THEN
12:39:09 1599  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1600  	   SPROC_NAME, 'No such offer');
12:39:09 1601  WHEN OTHERS THEN
12:39:09 1602  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1603  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1604  END GET_PROD_OFFERINGS_BY_OFFER_ID;
12:39:09 1605  
12:39:09 1606  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
12:39:09 1607  /*
12:39:09 1608  Throws exceptions (codes):
12:39:09 1609  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:09 1610  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1611  */
12:39:09 1612  	 in_product_offering_id IN NUMBER,
12:39:09 1613  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
12:39:09 1614  	 out_result_set 	OUT SYS_REFCURSOR
12:39:09 1615  ) AS
12:39:09 1616  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
12:39:09 1617  -- VARIABLES
12:39:09 1618  temp_product_offering_id NUMBER;
12:39:09 1619  -- EXCEPTIONS
12:39:09 1620  BAD_PRODUCT_OFFERING_ID EXCEPTION;
12:39:09 1621  BEGIN
12:39:09 1622  
12:39:09 1623  	 BEGIN
12:39:09 1624  	   SELECT
12:39:09 1625  	     PRODUCT_OFFERING.ID into temp_product_offering_id
12:39:09 1626  	   FROM
12:39:09 1627  	     PRODUCT_OFFERING
12:39:09 1628  	   WHERE
12:39:09 1629  	     PRODUCT_OFFERING.ID = in_product_offering_id;
12:39:09 1630  	   EXCEPTION
12:39:09 1631  	     WHEN NO_DATA_FOUND THEN
12:39:09 1632  	       RAISE BAD_PRODUCT_OFFERING_ID;
12:39:09 1633  	 END;
12:39:09 1634  
12:39:09 1635  	 OPEN out_result_set FOR
12:39:09 1636  	 SELECT
12:39:09 1637  	   PRODUCT_OFFERING_META_DATA.ID,
12:39:09 1638  	   PRODUCT_OFFERING_META_DATA.NAME,
12:39:09 1639  	   PRODUCT_OFFERING_META_DATA.VALUE,
12:39:09 1640  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
12:39:09 1641  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
12:39:09 1642  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
12:39:09 1643  	 FROM
12:39:09 1644  	   PRODUCT_OFFERING_META_DATA
12:39:09 1645  	 WHERE
12:39:09 1646  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
12:39:09 1647  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
12:39:09 1648  
12:39:09 1649  EXCEPTION
12:39:09 1650  WHEN BAD_PRODUCT_OFFERING_ID THEN
12:39:09 1651  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1652  	   SPROC_NAME, 'No such product offering');
12:39:09 1653  END GET_PRODUCT_OFFERING_META_DATA;
12:39:09 1654  
12:39:09 1655  /******************************************************************************/
12:39:09 1656  
12:39:09 1657  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
12:39:09 1658  /*
12:39:09 1659  Throws exceptions (codes):
12:39:09 1660  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:09 1661  */
12:39:09 1662  	 in_offer_chain_1 IN NUMBER,
12:39:09 1663  	 in_offer_chain_2 IN NUMBER,
12:39:09 1664  	 out_result_set   OUT SYS_REFCURSOR
12:39:09 1665  ) AS
12:39:09 1666  BEGIN
12:39:09 1667  
12:39:09 1668  	 OPEN out_result_set FOR
12:39:09 1669  	 SELECT
12:39:09 1670  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
12:39:09 1671  	   COUNT_1 + COUNT_2	    AS "COUNT"
12:39:09 1672  	 FROM
12:39:09 1673  	   (
12:39:09 1674  	     SELECT
12:39:09 1675  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
12:39:09 1676  	       COUNT(*) 		   as "COUNT_1"
12:39:09 1677  	     FROM
12:39:09 1678  	       (
12:39:09 1679  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
12:39:09 1680  	       )
12:39:09 1681  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
12:39:09 1682  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
12:39:09 1683  	     GROUP BY
12:39:09 1684  	       PRODUCT_OFFERING.PRODUCT_ID
12:39:09 1685  	   )
12:39:09 1686  	   INNER JOIN
12:39:09 1687  	   (
12:39:09 1688  	     SELECT
12:39:09 1689  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
12:39:09 1690  	       COUNT(*) 		   as "COUNT_2"
12:39:09 1691  	     FROM
12:39:09 1692  	       (
12:39:09 1693  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
12:39:09 1694  	       )
12:39:09 1695  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
12:39:09 1696  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
12:39:09 1697  	     GROUP BY
12:39:09 1698  	       PRODUCT_OFFERING.PRODUCT_ID
12:39:09 1699  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
12:39:09 1700  
12:39:09 1701  END GET_OFF_CHAINS_SAME_PRODUCTS;
12:39:09 1702  
12:39:09 1703  /******************************************************************************/
12:39:09 1704  
12:39:09 1705  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
12:39:09 1706  	 in_offer_chain_id IN NUMBER,
12:39:09 1707  	 in_meta_data_name IN VARCHAR2,
12:39:09 1708  	 out_value	   OUT VARCHAR2
12:39:09 1709  ) AS
12:39:09 1710  BEGIN
12:39:09 1711  	 BEGIN
12:39:09 1712  	   SELECT
12:39:09 1713  	     OFFER_CHAIN_META_DATA.VALUE into out_value
12:39:09 1714  	   FROM
12:39:09 1715  	     OFFER_CHAIN_META_DATA
12:39:09 1716  	   WHERE
12:39:09 1717  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 1718  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
12:39:09 1719  
12:39:09 1720  	   EXCEPTION
12:39:09 1721  	     WHEN NO_DATA_FOUND THEN
12:39:09 1722  	       out_value := NULL;
12:39:09 1723  	 END;
12:39:09 1724  END GET_OFFER_CHAIN_MD_VALUE;
12:39:09 1725  
12:39:09 1726  /******************************************************************************/
12:39:09 1727  
12:39:09 1728  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
12:39:09 1729  	 in_offer_chain_id   IN NUMBER,
12:39:09 1730  	 in_eligibility_name IN VARCHAR2,
12:39:09 1731  	 out_value	     OUT VARCHAR2
12:39:09 1732  ) AS
12:39:09 1733  BEGIN
12:39:09 1734  	 BEGIN
12:39:09 1735  	   SELECT
12:39:09 1736  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
12:39:09 1737  	   FROM
12:39:09 1738  	     OFFER_CHAIN_ELIGIBILITY
12:39:09 1739  	   WHERE
12:39:09 1740  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 1741  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
12:39:09 1742  
12:39:09 1743  	   EXCEPTION
12:39:09 1744  	     WHEN NO_DATA_FOUND THEN
12:39:09 1745  	       out_value := NULL;
12:39:09 1746  	 END;
12:39:09 1747  END GET_OFFER_CHAIN_EL_VALUE;
12:39:09 1748  
12:39:09 1749  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
12:39:09 1750  	 in_offer_id	IN NUMBER,
12:39:09 1751  	 out_result_set OUT SYS_REFCURSOR
12:39:09 1752  ) AS
12:39:09 1753  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
12:39:09 1754  -- VARIABLES
12:39:09 1755  temp_offer_id NUMBER;
12:39:09 1756  -- EXCEPTIONS
12:39:09 1757  BAD_OFFER_ID EXCEPTION;
12:39:09 1758  BEGIN
12:39:09 1759  
12:39:09 1760  	 BEGIN
12:39:09 1761  	   SELECT
12:39:09 1762  	     OFFER.ID into temp_offer_id
12:39:09 1763  	   FROM
12:39:09 1764  	     OFFER
12:39:09 1765  	   WHERE
12:39:09 1766  	     OFFER.ID = in_offer_id;
12:39:09 1767  	   EXCEPTION
12:39:09 1768  	     WHEN NO_DATA_FOUND THEN
12:39:09 1769  	       RAISE BAD_OFFER_ID;
12:39:09 1770  	 END;
12:39:09 1771  
12:39:09 1772  	 OPEN out_result_set FOR
12:39:09 1773  	 SELECT
12:39:09 1774  	   PRODUCT_OFFERING.ID,
12:39:09 1775  	   PRODUCT_OFFERING.PRODUCT_ID,
12:39:09 1776  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
12:39:09 1777  	   PRODUCT_OFFERING.UNIT_PRICE,
12:39:09 1778  	   PRODUCT_OFFERING.QUANTITY,
12:39:09 1779  	   PRODUCT_OFFERING.CREATE_DATE,
12:39:09 1780  	   PRODUCT_OFFERING.CREATED_BY,
12:39:09 1781  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
12:39:09 1782  	 FROM
12:39:09 1783  	   PRODUCT_OFFERING
12:39:09 1784  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
12:39:09 1785  	 WHERE
12:39:09 1786  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
12:39:09 1787  
12:39:09 1788  EXCEPTION
12:39:09 1789  WHEN BAD_OFFER_ID THEN
12:39:09 1790  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1791  	   SPROC_NAME, 'No such offer');
12:39:09 1792  WHEN OTHERS THEN
12:39:09 1793  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1794  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1795  END GET_OFFER_PRODUCT_OFFERINGS;
12:39:09 1796  
12:39:09 1797  /******************************************************************************/
12:39:09 1798  
12:39:09 1799  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
12:39:09 1800  	 in_meta_data_name  IN VARCHAR2,
12:39:09 1801  	 in_meta_data_value IN VARCHAR2,
12:39:09 1802  	 out_result_set     OUT SYS_REFCURSOR
12:39:09 1803  ) AS
12:39:09 1804  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
12:39:09 1805  -- VARIABLES
12:39:09 1806  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
12:39:09 1807  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
12:39:09 1808  BEGIN
12:39:09 1809  
12:39:09 1810  	 OPEN out_result_set FOR
12:39:09 1811  	 SELECT
12:39:09 1812  	   och.ID,
12:39:09 1813  	   och.NAME,
12:39:09 1814  	   och.DESCRIPTION,
12:39:09 1815  	   och.OFFER_CHAIN_STATUS_ID,
12:39:09 1816  	   PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
12:39:09 1817  	   och.ADOPTABILITY_WINDOW_START_DATE,
12:39:09 1818  	   och.ADOPTABILITY_WINDOW_END_DATE,
12:39:09 1819  	   PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
12:39:09 1820  	   och.IS_GIFT_CERTIFICATE,
12:39:09 1821  	   'false' as comf_offer_chain, -- TODO
12:39:09 1822  	   po.PRODUCT_ID,
12:39:09 1823  	   och.GROUP_ACCOUNT_TYPE_ID
12:39:09 1824  	 FROM
12:39:09 1825  	   OFFER_CHAIN och,
12:39:09 1826  	   OFFER_OFFER_CHAIN ooch,
12:39:09 1827  	   OFFER_PRODUCT_OFFERING opo,
12:39:09 1828  	   PRODUCT_OFFERING po
12:39:09 1829  	 WHERE
12:39:09 1830  	   och.ID = ooch.OFFER_CHAIN_ID
12:39:09 1831  	   and ooch.OFFER_ID = opo.OFFER_ID
12:39:09 1832  	   and opo.PRODUCT_OFFERING_ID = po.ID
12:39:09 1833  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE
12:39:09 1834  	   and och.id in (
12:39:09 1835  	     SELECT DISTINCT
12:39:09 1836  	       och2.id
12:39:09 1837  	     from
12:39:09 1838  	       offer_chain och2
12:39:09 1839  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
12:39:09 1840  	     where
12:39:09 1841  	       UPPER(ochmd.name) = v_meta_data_name
12:39:09 1842  	       AND UPPER(ochmd.value) = v_meta_data_value
12:39:09 1843  	   );
12:39:09 1844  
12:39:09 1845  EXCEPTION
12:39:09 1846  WHEN OTHERS THEN
12:39:09 1847  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1848  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1849  END GET_OFFER_CHAINS_BY_META_DATA;
12:39:09 1850  
12:39:09 1851  /******************************************************************************/
12:39:09 1852  
12:39:09 1853  PROCEDURE GET_ALL_META_DATA (
12:39:09 1854  	 in_offer_chain_id IN NUMBER,
12:39:09 1855  	 out_result_set    OUT SYS_REFCURSOR
12:39:09 1856  ) AS
12:39:09 1857  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
12:39:09 1858  -- Variables
12:39:09 1859  temp_offer_chain_id NUMBER;
12:39:09 1860  -- Exceptions
12:39:09 1861  BAD_OFFER_CHAIN_ID EXCEPTION;
12:39:09 1862  BEGIN
12:39:09 1863  
12:39:09 1864  	 BEGIN
12:39:09 1865  	   SELECT
12:39:09 1866  	     OCH.ID into temp_offer_chain_id
12:39:09 1867  	   FROM
12:39:09 1868  	     OFFER_CHAIN OCH
12:39:09 1869  	   WHERE
12:39:09 1870  	     OCH.ID = in_offer_chain_id;
12:39:09 1871  	   EXCEPTION
12:39:09 1872  	     WHEN NO_DATA_FOUND THEN
12:39:09 1873  	       RAISE BAD_OFFER_CHAIN_ID;
12:39:09 1874  	 END;
12:39:09 1875  
12:39:09 1876  	 OPEN out_result_set FOR
12:39:09 1877  	 SELECT
12:39:09 1878  	   OCHMD.ID,
12:39:09 1879  	   OCHMD.OFFER_CHAIN_ID,
12:39:09 1880  	   OCHMD.NAME,
12:39:09 1881  	   OCHMD.VALUE,
12:39:09 1882  	   OCHMD.CREATE_DATE,
12:39:09 1883  	   OCHMD.CREATED_BY
12:39:09 1884  	 FROM
12:39:09 1885  	   OFFER_CHAIN_META_DATA OCHMD
12:39:09 1886  	 WHERE
12:39:09 1887  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
12:39:09 1888  
12:39:09 1889  EXCEPTION
12:39:09 1890  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:09 1891  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1892  	   SPROC_NAME, 'No such offer chain', SQLERRM);
12:39:09 1893  WHEN OTHERS THEN
12:39:09 1894  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1895  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1896  END GET_ALL_META_DATA;
12:39:09 1897  
12:39:09 1898  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
12:39:09 1899  	 in_group_id	   IN NUMBER,
12:39:09 1900  	 in_offer_chain_id IN NUMBER,
12:39:09 1901  	 out_is_eligible   OUT NUMBER,
12:39:09 1902  	 out_concurrent_subscription_id OUT NUMBER
12:39:09 1903  ) AS
12:39:09 1904  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
12:39:09 1905  -- Variables
12:39:09 1906  var_account_id  NUMBER;
12:39:09 1907  var_is_eligible NUMBER;
12:39:09 1908  var_is_gc       NUMBER;
12:39:09 1909  -- Exceptions
12:39:09 1910  BAD_GROUP_ID		   EXCEPTION;
12:39:09 1911  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
12:39:09 1912  BAD_OC_ID		   EXCEPTION;
12:39:09 1913  EXCEPTION_MESSAGE	   VARCHAR(1024);
12:39:09 1914  BEGIN
12:39:09 1915  
12:39:09 1916  	 var_is_eligible := GLOBAL_CONSTANTS_V16.TRUE;
12:39:09 1917  
12:39:09 1918  	 out_concurrent_subscription_id := NULL;
12:39:09 1919  
12:39:09 1920  	 BEGIN
12:39:09 1921  	   SELECT
12:39:09 1922  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
12:39:09 1923  	   FROM
12:39:09 1924  	     OFFER_CHAIN OC
12:39:09 1925  	   WHERE
12:39:09 1926  	     OC.ID = in_offer_chain_id;
12:39:09 1927  	   EXCEPTION
12:39:09 1928  	     WHEN NO_DATA_FOUND THEN
12:39:09 1929  	       RAISE BAD_OC_ID;
12:39:09 1930  	 END;
12:39:09 1931  
12:39:09 1932  	 -- only check eligibility if this is not a gift certificate
12:39:09 1933  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
12:39:09 1934  	   BEGIN
12:39:09 1935  	     SELECT
12:39:09 1936  	       A.ID into var_account_id
12:39:09 1937  	     FROM
12:39:09 1938  	       ACCOUNT A
12:39:09 1939  	     WHERE
12:39:09 1940  	       A.GROUP_ID = in_group_id;
12:39:09 1941  	     EXCEPTION
12:39:09 1942  	       WHEN NO_DATA_FOUND THEN
12:39:09 1943  		 RAISE BAD_GROUP_ID;
12:39:09 1944  	   END;
12:39:09 1945  
12:39:09 1946  
12:39:09 1947  	   FOR f_offer_chain IN (
12:39:09 1948  	       SELECT
12:39:09 1949  		 S.ID as SUBSCRIPTION_ID,
12:39:09 1950  		 S.OFFER_CHAIN_ID
12:39:09 1951  	       FROM
12:39:09 1952  		 SUBSCRIPTION S
12:39:09 1953  	       WHERE
12:39:09 1954  		 S.ACCOUNT_ID = var_account_id
12:39:09 1955  		 AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:09 1956  	   )
12:39:09 1957  	   LOOP
12:39:09 1958  	     BEGIN
12:39:09 1959  	       IF (
12:39:09 1960  		 PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(
12:39:09 1961  		   in_offer_chain_id,
12:39:09 1962  		   f_offer_chain.offer_chain_id,
12:39:09 1963  		   GLOBAL_CONSTANTS_V16.TRUE
12:39:09 1964  		 ) = GLOBAL_CONSTANTS_V16.TRUE
12:39:09 1965  	       ) THEN
12:39:09 1966  		 var_is_eligible := GLOBAL_CONSTANTS_V16.FALSE;
12:39:09 1967  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
12:39:09 1968  	       END IF;
12:39:09 1969  	       EXCEPTION
12:39:09 1970  		 WHEN OTHERS THEN
12:39:09 1971  		   EXCEPTION_MESSAGE := SQLERRM;
12:39:09 1972  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
12:39:09 1973  	     END;
12:39:09 1974  	   END LOOP;
12:39:09 1975  	 END IF;
12:39:09 1976  	 out_is_eligible := var_is_eligible;
12:39:09 1977  
12:39:09 1978  EXCEPTION
12:39:09 1979  WHEN BAD_GROUP_ID THEN
12:39:09 1980  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1981  	   SPROC_NAME, 'No such offer chain', SQLERRM);
12:39:09 1982  WHEN BAD_OC_ID THEN
12:39:09 1983  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:09 1984  	   SPROC_NAME, 'No such offer chain', SQLERRM);
12:39:09 1985  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
12:39:09 1986  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 1987  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
12:39:09 1988  WHEN OTHERS THEN
12:39:09 1989  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 1990  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 1991  END CHECK_PRODUCT_ELIGIBILITY;
12:39:09 1992  
12:39:09 1993  PROCEDURE GET_NOTIFICATION_TYPE_ID (
12:39:09 1994  	 in_offer_chain_id	  IN NUMBER,
12:39:09 1995  	 in_action_name 	  IN VARCHAR2,
12:39:09 1996  	 out_notification_type_id OUT NUMBER
12:39:09 1997  ) AS
12:39:09 1998  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
12:39:09 1999  -- Variables
12:39:09 2000  var_action_id NUMBER;
12:39:09 2001  -- Exceptions
12:39:09 2002  BAD_ACTION_NAME	      EXCEPTION;
12:39:09 2003  MULTIPLY_ACTIONS_FOUND EXCEPTION;
12:39:09 2004  BEGIN
12:39:09 2005  
12:39:09 2006  	 BEGIN
12:39:09 2007  	   SELECT
12:39:09 2008  	     A.ID into var_action_id
12:39:09 2009  	   FROM
12:39:09 2010  	     ACTION A
12:39:09 2011  	   WHERE
12:39:09 2012  	     UPPER(A.NAME) = UPPER(in_action_name);
12:39:09 2013  	   EXCEPTION
12:39:09 2014  	     WHEN NO_DATA_FOUND THEN
12:39:09 2015  	       RAISE BAD_ACTION_NAME;
12:39:09 2016  	     WHEN TOO_MANY_ROWS THEN
12:39:09 2017  	       RAISE MULTIPLY_ACTIONS_FOUND;
12:39:09 2018  	 END;
12:39:09 2019  
12:39:09 2020  	 SELECT
12:39:09 2021  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
12:39:09 2022  	 FROM
12:39:09 2023  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
12:39:09 2024  	 WHERE
12:39:09 2025  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
12:39:09 2026  	   AND OCNT.ACTION_ID = var_action_id;
12:39:09 2027  
12:39:09 2028  EXCEPTION
12:39:09 2029  WHEN NO_DATA_FOUND THEN
12:39:09 2030  	 out_notification_type_id := NULL;
12:39:09 2031  WHEN BAD_ACTION_NAME THEN
12:39:09 2032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:09 2033  	   SPROC_NAME, 'Bad action name', SQLERRM);
12:39:09 2034  WHEN MULTIPLY_ACTIONS_FOUND THEN
12:39:09 2035  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:09 2036  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
12:39:09 2037  WHEN OTHERS THEN
12:39:09 2038  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:09 2039  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:09 2040  END GET_NOTIFICATION_TYPE_ID;
12:39:09 2041  
12:39:09 2042  END PROCS_OFFER_CHAIN_V16;
12:39:09 2043  .
12:39:09 SQL> /

Package body created.

Elapsed: 00:00:00.16
12:39:09 SQL> 
12:39:09 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
12:39:09   2  AS
12:39:09   3  	  --------------------------------------------------------------------------------
12:39:09   4  PROCEDURE GATHER_SYNC_EVENTS
12:39:09   5  	  (
12:39:09   6  	      in_last_timestamp TIMESTAMP,
12:39:09   7  	      out_new_timestamp OUT TIMESTAMP)
12:39:09   8  IS
12:39:09   9  BEGIN
12:39:09  10  	  out_new_timestamp := systimestamp;
12:39:09  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
12:39:09  12  END;
12:39:09  13  	  --------------------------------------------------------------------------------
12:39:09  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
12:39:09  15  IS
12:39:09  16  BEGIN
12:39:09  17  	  INSERT
12:39:09  18  	  INTO
12:39:09  19  	      core_owner.polling_sync
12:39:09  20  	      (
12:39:09  21  		  account_id,
12:39:09  22  		  group_id,
12:39:09  23  		  event_type,
12:39:09  24  		  event_date
12:39:09  25  	      )
12:39:09  26  	  select id, group_id, event_type, event_date from (
12:39:09  27  	      SELECT
12:39:09  28  		  a.id,
12:39:09  29  		  a.group_id,
12:39:09  30  		  'I' event_type,
12:39:09  31  		  in_end_ts event_date,
12:39:09  32  		  max(cl.change_time) last_change_time
12:39:09  33  	      FROM
12:39:09  34  		  core_hist_owner.change_log cl,
12:39:09  35  		  core_owner.credit_card cc,
12:39:09  36  		  core_owner.account a
12:39:09  37  	      WHERE
12:39:09  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
12:39:09  39  	      AND cl.item = 'CREDIT_CARD'
12:39:09  40  	      AND cl.id = cc.id
12:39:09  41  	      AND cc.account_id = a.id
12:39:09  42  	      GROUP BY a.id, a.group_id
12:39:09  43  	      UNION ALL
12:39:09  44  	      SELECT
12:39:09  45  		  a.id,
12:39:09  46  		  a.group_id,
12:39:09  47  		  'I',
12:39:09  48  		  in_end_ts,
12:39:09  49  		  max(cl.change_time) last_change_time
12:39:09  50  	      FROM
12:39:09  51  		  core_hist_owner.change_log cl,
12:39:09  52  		  core_owner.paypal p,
12:39:09  53  		  core_owner.account a
12:39:09  54  	      WHERE
12:39:09  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
12:39:09  56  	      AND cl.item = 'PAYPAL'
12:39:09  57  	      AND cl.id = p.id
12:39:09  58  	      AND p.account_id = a.id
12:39:09  59  	      GROUP BY a.id, a.group_id
12:39:09  60  	      UNION ALL
12:39:09  61  	      SELECT
12:39:09  62  		  a.id,
12:39:09  63  		  a.group_id,
12:39:09  64  		  'S',
12:39:09  65  		  in_end_ts,
12:39:09  66  		  max(cl.change_time) last_change_time
12:39:09  67  	      FROM
12:39:09  68  		  core_hist_owner.change_log cl,
12:39:09  69  		  core_owner.subscription s,
12:39:09  70  		  core_owner.account a
12:39:09  71  	      WHERE
12:39:09  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
12:39:09  73  	      AND cl.item = 'SUBSCRIPTION'
12:39:09  74  	      AND cl.id = s.id
12:39:09  75  	      AND s.account_id = a.id
12:39:09  76  	      GROUP BY a.id, a.group_id
12:39:09  77  	      UNION ALL
12:39:09  78  	      SELECT
12:39:09  79  		  a.id,
12:39:09  80  		  a.group_id,
12:39:09  81  		  'G',
12:39:09  82  		  in_end_ts,
12:39:09  83  		  max(cl.change_time) last_change_time
12:39:09  84  	      FROM
12:39:09  85  		  core_hist_owner.change_log cl,
12:39:09  86  		  core_owner.gift_certificate gc,
12:39:09  87  		  core_owner.account a
12:39:09  88  	      WHERE
12:39:09  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
12:39:09  90  	      AND cl.item = 'GIFT_CERTIFICATE'
12:39:09  91  	      AND cl.id = gc.id
12:39:09  92  	      AND gc.purchaser_group_id = a.group_id
12:39:09  93  	      GROUP BY a.id, a.group_id
12:39:09  94  	  ) t
12:39:09  95  	  where not exists (
12:39:09  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
12:39:09  97  	      from polling_sync ps
12:39:09  98  	      where ps.account_id = t.id
12:39:09  99  		and ps.group_id = t.group_id
12:39:09 100  		and ps.event_type = t.event_type
12:39:09 101  		and ps.event_date >= t.last_change_time
12:39:09 102  	  )
12:39:09 103  	  ;
12:39:09 104  END;
12:39:09 105  --------------------------------------------------------------------------------
12:39:09 106  FUNCTION CREATE_NEW_TRANSFER_SET
12:39:09 107  	  (
12:39:09 108  	      in_set_maximum NUMBER)
12:39:09 109  	  RETURN core_owner.polling_sync.set_id%type
12:39:09 110  IS
12:39:09 111  	  pragma autonomous_transaction;
12:39:09 112  	  v_set_id core_owner.polling_sync.set_id%type;
12:39:09 113  BEGIN
12:39:09 114  	  SELECT
12:39:09 115  	      pollsync_setid_seq.nextval
12:39:09 116  	  INTO
12:39:09 117  	      v_set_id
12:39:09 118  	  FROM
12:39:09 119  	      dual;
12:39:09 120  	  update
12:39:09 121  	    core_owner.polling_sync ps
12:39:09 122  	  set
12:39:09 123  	    ps.set_id = v_set_id
12:39:09 124  	  where
12:39:09 125  	    ps.set_id IS NULL and
12:39:09 126  	    rownum <= in_set_maximum
12:39:09 127  	  ;
12:39:09 128  	  COMMIT;
12:39:09 129  	  RETURN v_set_id;
12:39:09 130  END;
12:39:09 131  --------------------------------------------------------------------------------
12:39:09 132  FUNCTION RETREIVE_TRANSFER_SET
12:39:09 133  	  (
12:39:09 134  	      in_set_id core_owner.polling_sync.set_id%type)
12:39:09 135  	  RETURN sys_refcursor
12:39:09 136  IS
12:39:09 137  	  v_refcursor sys_refcursor;
12:39:09 138  BEGIN
12:39:09 139  	  UPDATE
12:39:09 140  	      core_owner.polling_sync ps
12:39:09 141  	  SET
12:39:09 142  	      ps.last_send_date = sysdate,
12:39:09 143  	      ps.num_calls = ps.num_calls + 1
12:39:09 144  	  WHERE
12:39:09 145  	      ps.set_id = in_set_id ;
12:39:09 146  	  OPEN v_refcursor FOR
12:39:09 147  	  SELECT
12:39:09 148  	      ps.set_id,
12:39:09 149  	      ps.group_id,
12:39:09 150  	      ps.event_type,
12:39:09 151  	      ps.event_date
12:39:09 152  	  FROM
12:39:09 153  	      core_owner.polling_sync ps
12:39:09 154  	  WHERE
12:39:09 155  	      ps.set_id = in_set_id
12:39:09 156  	  AND ps.group_id IS NOT NULL ;
12:39:09 157  	  RETURN v_refcursor;
12:39:09 158  END;
12:39:09 159  --------------------------------------------------------------------------------
12:39:09 160  PROCEDURE GET_TRANSFER_SET
12:39:09 161  	  (
12:39:09 162  	      in_set_maximum NUMBER,
12:39:09 163  	      in_max_retries NUMBER,
12:39:09 164  	      out_refcursor OUT sys_refcursor)
12:39:09 165  IS
12:39:09 166  	  v_set_id core_owner.polling_sync.set_id%type;
12:39:09 167  BEGIN
12:39:09 168  	  /* Look for previously sent but unconfirmed sets and
12:39:09 169  	  send again until max_retries calls */
12:39:09 170  	  FOR x IN
12:39:09 171  	  (
12:39:09 172  	      SELECT
12:39:09 173  		  ps.set_id,
12:39:09 174  		  COUNT( *) set_size
12:39:09 175  	      FROM
12:39:09 176  		  core_owner.polling_sync ps
12:39:09 177  	      WHERE
12:39:09 178  		  ps.event_date > sysdate - 14
12:39:09 179  	      AND ps.confirm_date IS NULL
12:39:09 180  	      AND ps.last_send_date IS NOT NULL
12:39:09 181  	      AND ps.num_calls < in_max_retries
12:39:09 182  	      GROUP BY
12:39:09 183  		  ps.set_id
12:39:09 184  	      ORDER BY
12:39:09 185  		  ps.set_id
12:39:09 186  	  )
12:39:09 187  	  LOOP
12:39:09 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
12:39:09 189  	      RETURN;
12:39:09 190  	  END LOOP;
12:39:09 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
12:39:09 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
12:39:09 193  	  RETURN;
12:39:09 194  END;
12:39:09 195  --------------------------------------------------------------------------------
12:39:09 196  PROCEDURE CONFIRM_TRANSFER_SET
12:39:09 197  	  (
12:39:09 198  	      in_set_id core_owner.polling_sync.set_id%type)
12:39:09 199  IS
12:39:09 200  	  v_unconfirmable EXCEPTION;
12:39:09 201  BEGIN
12:39:09 202  	  UPDATE
12:39:09 203  	      core_owner.polling_sync ps
12:39:09 204  	  SET
12:39:09 205  	      ps.confirm_date = systimestamp
12:39:09 206  	  WHERE
12:39:09 207  	      ps.set_id = in_set_id
12:39:09 208  	  AND ps.confirm_date IS NULL ;
12:39:09 209  	  IF(sql%rowcount < 1) THEN
12:39:09 210  	      raise v_unconfirmable;
12:39:09 211  	  END IF;
12:39:09 212  END;
12:39:09 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
12:39:09 214  IS
12:39:09 215  BEGIN
12:39:09 216  	  UPDATE POLLING_SYNC_LASTRUN
12:39:09 217  	  SET last_run = current_timestamp;
12:39:09 218  	  IF ( sql%rowcount = 0 )
12:39:09 219  	  THEN
12:39:09 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
12:39:09 221  	  END if;
12:39:09 222  	  COMMIT;
12:39:09 223  END;
12:39:09 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
12:39:09 225  IS
12:39:09 226  BEGIN
12:39:09 227  	  SELECT LAST_RUN INTO ts
12:39:09 228  	  FROM POLLING_SYNC_LASTRUN
12:39:09 229  	  WHERE ROWNUM < 2;
12:39:09 230  EXCEPTION
12:39:09 231  	WHEN NO_DATA_FOUND
12:39:09 232  	THEN
12:39:09 233  	  ts := current_timestamp;
12:39:09 234  END;
12:39:09 235  END PROCS_POLLING_SYNC;
12:39:09 236  .
12:39:09 SQL> /

Package body created.

Elapsed: 00:00:00.09
12:39:10 SQL> 
12:39:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V16" AS
12:39:10   2  
12:39:10   3  PROCEDURE GET_PRODUCTS (
12:39:10   4  /*
12:39:10   5  Throws exceptions:
12:39:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10   7  */
12:39:10   8  	in_status_id   IN  NUMBER,
12:39:10   9  	out_result_set OUT SYS_REFCURSOR
12:39:10  10  ) AS
12:39:10  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
12:39:10  12  BEGIN
12:39:10  13  	OPEN out_result_set FOR
12:39:10  14  	SELECT
12:39:10  15  	  PRODUCT.ID,
12:39:10  16  	  PRODUCT.NAME,
12:39:10  17  	  PRODUCT.UNIT_PRICE,
12:39:10  18  	  PRODUCT.PRODUCTION_COST,
12:39:10  19  	  PRODUCT.CREATE_DATE,
12:39:10  20  	  PRODUCT.CREATED_BY,
12:39:10  21  	  PRODUCT.PRODUCT_STATUS_ID,
12:39:10  22  	  PRODUCT.PRODUCT_URI
12:39:10  23  	FROM
12:39:10  24  	  PRODUCT
12:39:10  25   WHERE
12:39:10  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
12:39:10  27  EXCEPTION
12:39:10  28  WHEN OTHERS THEN
12:39:10  29  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10  31  END GET_PRODUCTS;
12:39:10  32  
12:39:10  33  /******************************************************************************/
12:39:10  34  
12:39:10  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
12:39:10  36  	in_product_offering_id	IN NUMBER,
12:39:10  37  	out_result_set OUT SYS_REFCURSOR
12:39:10  38  ) AS
12:39:10  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
12:39:10  40  -- VARIABLES
12:39:10  41  temp_product_offering_id NUMBER;
12:39:10  42  -- EXCEPTIONS
12:39:10  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
12:39:10  44  BEGIN
12:39:10  45  
12:39:10  46  	-- Check that product offering exists
12:39:10  47  	BEGIN
12:39:10  48  	  SELECT
12:39:10  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
12:39:10  50  	  FROM
12:39:10  51  	    PRODUCT_OFFERING
12:39:10  52  	  WHERE
12:39:10  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
12:39:10  54  	  EXCEPTION
12:39:10  55  	    WHEN NO_DATA_FOUND THEN
12:39:10  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
12:39:10  57  	END;
12:39:10  58  
12:39:10  59  	OPEN out_result_set FOR
12:39:10  60  	SELECT
12:39:10  61  	  PRODUCT_OFFERING_META_DATA.ID,
12:39:10  62  	  PRODUCT_OFFERING_META_DATA.NAME,
12:39:10  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
12:39:10  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
12:39:10  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
12:39:10  66  	FROM
12:39:10  67  	  PRODUCT_OFFERING_META_DATA
12:39:10  68  	WHERE
12:39:10  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
12:39:10  70  
12:39:10  71  EXCEPTION
12:39:10  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
12:39:10  73  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10  74  	  SPROC_NAME, 'No such product offering id');
12:39:10  75  WHEN OTHERS THEN
12:39:10  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10  78  END GET_PRODUCT_OFFERING_META_DATA;
12:39:10  79  
12:39:10  80  /******************************************************************************/
12:39:10  81  
12:39:10  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
12:39:10  83  /*
12:39:10  84  Throws exceptions:
12:39:10  85  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10  87  */
12:39:10  88  	in_product_id	    IN NUMBER,
12:39:10  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
12:39:10  90  	out_result_set	    OUT SYS_REFCURSOR
12:39:10  91  ) AS
12:39:10  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
12:39:10  93  -- VARIABLES
12:39:10  94  temp_product_id NUMBER;
12:39:10  95  -- EXCEPTIONS
12:39:10  96  BAD_PRODUCT_ID EXCEPTION;
12:39:10  97  BEGIN
12:39:10  98  
12:39:10  99  	BEGIN
12:39:10 100  	  SELECT
12:39:10 101  	    PRODUCT.ID into temp_product_id
12:39:10 102  	  FROM
12:39:10 103  	    PRODUCT
12:39:10 104  	  WHERE
12:39:10 105  	    PRODUCT.ID = in_product_id;
12:39:10 106  	  EXCEPTION
12:39:10 107  	    WHEN NO_DATA_FOUND THEN
12:39:10 108  	      RAISE BAD_PRODUCT_ID;
12:39:10 109  	END;
12:39:10 110  
12:39:10 111  	OPEN out_result_set FOR
12:39:10 112  	SELECT
12:39:10 113  	  PRODUCT_ELIGIBILITY.ID
12:39:10 114  	FROM
12:39:10 115  	  PRODUCT_ELIGIBILITY
12:39:10 116  	WHERE
12:39:10 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
12:39:10 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
12:39:10 119  
12:39:10 120  EXCEPTION
12:39:10 121  WHEN BAD_PRODUCT_ID THEN
12:39:10 122  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 123  	  SPROC_NAME, 'No such product');
12:39:10 124  WHEN OTHERS THEN
12:39:10 125  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
12:39:10 128  
12:39:10 129  /******************************************************************************/
12:39:10 130  
12:39:10 131  PROCEDURE GET_PRODUCT_BY_ID (
12:39:10 132  	in_product_id  IN NUMBER,
12:39:10 133  	out_result_set OUT SYS_REFCURSOR
12:39:10 134  ) AS
12:39:10 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
12:39:10 136  -- VARIABLES
12:39:10 137  temp_product_id NUMBER;
12:39:10 138  -- EXCEPTIONS
12:39:10 139  BAD_PRODUCT_ID EXCEPTION;
12:39:10 140  BEGIN
12:39:10 141  
12:39:10 142  	BEGIN
12:39:10 143  	  SELECT
12:39:10 144  	    PRODUCT.ID into temp_product_id
12:39:10 145  	  FROM
12:39:10 146  	    PRODUCT
12:39:10 147  	  WHERE
12:39:10 148  	    PRODUCT.ID = in_product_id;
12:39:10 149  	  EXCEPTION
12:39:10 150  	    WHEN NO_DATA_FOUND THEN
12:39:10 151  	      RAISE BAD_PRODUCT_ID;
12:39:10 152  	END;
12:39:10 153  
12:39:10 154  	OPEN out_result_set FOR
12:39:10 155  	SELECT
12:39:10 156  	  PRODUCT.ID,
12:39:10 157  	  PRODUCT.NAME,
12:39:10 158  	  PRODUCT.PRODUCT_STATUS_ID,
12:39:10 159  	  PRODUCT.PRODUCT_URI,
12:39:10 160  	  PRODUCT.PRODUCTION_COST,
12:39:10 161  	  PRODUCT.UNIT_PRICE,
12:39:10 162  	  PRODUCT.CREATE_DATE,
12:39:10 163  	  PRODUCT.CREATED_BY
12:39:10 164  	FROM
12:39:10 165  	  PRODUCT
12:39:10 166  	WHERE
12:39:10 167  	  PRODUCT.ID = in_product_id;
12:39:10 168  
12:39:10 169  EXCEPTION
12:39:10 170  WHEN BAD_PRODUCT_ID THEN
12:39:10 171  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 172  	  SPROC_NAME, 'No such product');
12:39:10 173  WHEN OTHERS THEN
12:39:10 174  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 176  END GET_PRODUCT_BY_ID;
12:39:10 177  
12:39:10 178  /******************************************************************************/
12:39:10 179  
12:39:10 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
12:39:10 181  	in_line_item_id IN NUMBER,
12:39:10 182  	out_result_set	OUT SYS_REFCURSOR
12:39:10 183  ) AS
12:39:10 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
12:39:10 185  -- VARIABLES
12:39:10 186  temp_line_item_id NUMBER;
12:39:10 187  -- EXCEPTIONS
12:39:10 188  BAD_LINE_ITEM_ID EXCEPTION;
12:39:10 189  BEGIN
12:39:10 190  
12:39:10 191  	BEGIN
12:39:10 192  	  SELECT
12:39:10 193  	    LINE_ITEM.ID into temp_line_item_id
12:39:10 194  	  FROM
12:39:10 195  	    LINE_ITEM
12:39:10 196  	  WHERE
12:39:10 197  	    LINE_ITEM.ID = in_line_item_id;
12:39:10 198  	  EXCEPTION
12:39:10 199  	    WHEN NO_DATA_FOUND THEN
12:39:10 200  	      RAISE BAD_LINE_ITEM_ID;
12:39:10 201  	END;
12:39:10 202  
12:39:10 203  	OPEN out_result_set FOR
12:39:10 204  	SELECT
12:39:10 205  	  PRODUCT_OFFERING.ID,
12:39:10 206  	  PRODUCT_OFFERING.PRODUCT_ID,
12:39:10 207  	  PRODUCT_OFFERING.QUANTITY,
12:39:10 208  	  PRODUCT_OFFERING.UNIT_PRICE,
12:39:10 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
12:39:10 210  	  PRODUCT_OFFERING.CREATE_DATE,
12:39:10 211  	  PRODUCT_OFFERING.CREATED_BY,
12:39:10 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
12:39:10 213  	  CAPABILITY.ID CAP_ID,
12:39:10 214  	  CAPABILITY.CODE CAP_CODE,
12:39:10 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
12:39:10 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
12:39:10 217  	FROM
12:39:10 218  	  PRODUCT_OFFERING
12:39:10 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
12:39:10 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
12:39:10 221  	WHERE
12:39:10 222  	  LINE_ITEM.ID = in_line_item_id;
12:39:10 223  
12:39:10 224  EXCEPTION
12:39:10 225  WHEN BAD_LINE_ITEM_ID THEN
12:39:10 226  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 227  	  SPROC_NAME, 'No such line item');
12:39:10 228  WHEN OTHERS THEN
12:39:10 229  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
12:39:10 232  
12:39:10 233  /******************************************************************************/
12:39:10 234  
12:39:10 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
12:39:10 236  	in_product_offering_id IN NUMBER,
12:39:10 237  	out_result_set	OUT SYS_REFCURSOR
12:39:10 238  ) AS
12:39:10 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
12:39:10 240  BEGIN
12:39:10 241  	OPEN out_result_set FOR
12:39:10 242  	SELECT
12:39:10 243  	  PRODUCT_OFFERING.ID,
12:39:10 244  	  PRODUCT_OFFERING.PRODUCT_ID,
12:39:10 245  	  PRODUCT_OFFERING.QUANTITY,
12:39:10 246  	  PRODUCT_OFFERING.UNIT_PRICE,
12:39:10 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
12:39:10 248  	  PRODUCT_OFFERING.CREATE_DATE,
12:39:10 249  	  PRODUCT_OFFERING.CREATED_BY,
12:39:10 250  	  CAPABILITY.ID CAP_ID,
12:39:10 251  	  CAPABILITY.CODE CAP_CODE,
12:39:10 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
12:39:10 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
12:39:10 254  	FROM
12:39:10 255  	  PRODUCT_OFFERING
12:39:10 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
12:39:10 257  	WHERE
12:39:10 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
12:39:10 259  
12:39:10 260  EXCEPTION
12:39:10 261  WHEN OTHERS THEN
12:39:10 262  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 264  END GET_PRD_OFFERING_BY_ID;
12:39:10 265  
12:39:10 266  /******************************************************************************/
12:39:10 267  
12:39:10 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
12:39:10 269  	in_product_offering_id IN NUMBER,
12:39:10 270  	out_result_set	       OUT SYS_REFCURSOR
12:39:10 271  ) AS
12:39:10 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
12:39:10 273  -- VARIABLES
12:39:10 274  temp_product_offering_id NUMBER;
12:39:10 275  -- EXCEPTIONS
12:39:10 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
12:39:10 277  BEGIN
12:39:10 278  
12:39:10 279  	BEGIN
12:39:10 280  	  SELECT
12:39:10 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
12:39:10 282  	  FROM
12:39:10 283  	    PRODUCT_OFFERING
12:39:10 284  	  WHERE
12:39:10 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
12:39:10 286  	  EXCEPTION
12:39:10 287  	    WHEN NO_DATA_FOUND THEN
12:39:10 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
12:39:10 289  	END;
12:39:10 290  
12:39:10 291  	OPEN out_result_set FOR
12:39:10 292  	SELECT
12:39:10 293  	  DISCOUNT.ID,
12:39:10 294  	  DISCOUNT.NAME,
12:39:10 295  	  DISCOUNT.FIXED_AMOUNT,
12:39:10 296  	  DISCOUNT.PERCENT_AMOUNT,
12:39:10 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
12:39:10 298  	  DISCOUNT.CREATE_DATE,
12:39:10 299  	  DISCOUNT.CREATED_BY,
12:39:10 300  	  DISCOUNT.DESCRIPTION
12:39:10 301  	FROM
12:39:10 302  	  DISCOUNT
12:39:10 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
12:39:10 304  	WHERE
12:39:10 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
12:39:10 306  
12:39:10 307  EXCEPTION
12:39:10 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
12:39:10 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 310  	  SPROC_NAME, 'No such product offering');
12:39:10 311  WHEN OTHERS THEN
12:39:10 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
12:39:10 315  
12:39:10 316  END PROCS_PRODUCT_V16;
12:39:10 317  .
12:39:10 SQL> /

Package body created.

Elapsed: 00:00:00.04
12:39:10 SQL> 
12:39:10 SQL> CREATE OR REPLACE
12:39:10   2  PACKAGE BODY PROCS_REPORTING AS
12:39:10   3  
12:39:10   4  ----
12:39:10   5  --------------------------------------------------------------------------------
12:39:10   6  ----
12:39:10   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10   8  	  is
12:39:10   9  	  begin
12:39:10  10  	      open out_cursor for
12:39:10  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
12:39:10  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
12:39:10  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
12:39:10  14  			,c.create_date, c.update_date
12:39:10  15  		  from charge c
12:39:10  16  		      ,charge_status cs
12:39:10  17  		      ,instrument_type it
12:39:10  18  		      ,ids
12:39:10  19  		  where c.id = ids.id
12:39:10  20  		    and c.charge_status_id = cs.id
12:39:10  21  		    and c.instrument_type_id = it.id
12:39:10  22  	      ;
12:39:10  23  	  end;
12:39:10  24  ----
12:39:10  25  --------------------------------------------------------------------------------
12:39:10  26  ----
12:39:10  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10  28  	  is
12:39:10  29  	  begin
12:39:10  30  	      open out_cursor for
12:39:10  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
12:39:10  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
12:39:10  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date
12:39:10  35  		  from license l
12:39:10  36  		      ,license_status ls
12:39:10  37  		      ,ids
12:39:10  38  		  where l.id = ids.id
12:39:10  39  		    and l.license_status_id = ls.id
12:39:10  40  	      ;
12:39:10  41  	  end;
12:39:10  42  ----
12:39:10  43  --------------------------------------------------------------------------------
12:39:10  44  ----
12:39:10  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10  46  	  is
12:39:10  47  	  begin
12:39:10  48  	      open out_cursor for
12:39:10  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
12:39:10  50  		  select
12:39:10  51  		    i.id invoice_id,
12:39:10  52  		    i.create_date,
12:39:10  53  		    i.update_date,
12:39:10  54  		    i.invoice_status_id,
12:39:10  55  		    istat.value invoice_status,
12:39:10  56  		    NVL(
12:39:10  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
12:39:10  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
12:39:10  59  		    ) offer_chain_id
12:39:10  60  		  from	   invoice i
12:39:10  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
12:39:10  62  		      join ids			on ids.id = i.id
12:39:10  63  		  where 1 = 1
12:39:10  64  	      ;
12:39:10  65  	  end;
12:39:10  66  ----
12:39:10  67  --------------------------------------------------------------------------------
12:39:10  68  ----
12:39:10  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10  70  	  is
12:39:10  71  	  begin
12:39:10  72  	      open out_cursor for
12:39:10  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
12:39:10  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
12:39:10  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
12:39:10  76  		  from line_item li
12:39:10  77  		    , ids
12:39:10  78  		  where li.id = ids.id
12:39:10  79  	      ;
12:39:10  80  	  end;
12:39:10  81  ----
12:39:10  82  --------------------------------------------------------------------------------
12:39:10  83  ----
12:39:10  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10  85  	  is
12:39:10  86  	  begin
12:39:10  87  	      open out_cursor for
12:39:10  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
12:39:10  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
12:39:10  91  			,a.instrument_id, a.tax_exempt_id
12:39:10  92  			-- need system category??
12:39:10  93  		  from account a
12:39:10  94  		      ,account_status astat
12:39:10  95  		      ,instrument_type it
12:39:10  96  		      , ids
12:39:10  97  		  where a.id = ids.id
12:39:10  98  		    and astat.id = a.account_status_id
12:39:10  99  		    and a.instrument_type_id = it.id(+)
12:39:10 100  	      ;
12:39:10 101  	  end;
12:39:10 102  ----
12:39:10 103  --------------------------------------------------------------------------------
12:39:10 104  ----
12:39:10 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 106  	  is
12:39:10 107  	  begin
12:39:10 108  	      open out_cursor for
12:39:10 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
12:39:10 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
12:39:10 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
12:39:10 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
12:39:10 114  		  from subscription s
12:39:10 115  		      ,subscription_status ss
12:39:10 116  		      ,subscription_cancel_reason sct
12:39:10 117  		      ,instrument_type it
12:39:10 118  		      , ids
12:39:10 119  		  where s.id = ids.id
12:39:10 120  		    and ss.id = s.subscription_status_id
12:39:10 121  		    and s.instrument_type_id = it.id
12:39:10 122  		    and sct.id(+) = s.sct_id
12:39:10 123  	      ;
12:39:10 124  	  end;
12:39:10 125  ----
12:39:10 126  --------------------------------------------------------------------------------
12:39:10 127  ----
12:39:10 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 129  	  is
12:39:10 130  	  begin
12:39:10 131  	      open out_cursor for
12:39:10 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 133  		  select t.id transaction_id, t.transaction_amount
12:39:10 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
12:39:10 135  			,t.create_date, t.update_date, t.is_settled
12:39:10 136  		  from transaction t
12:39:10 137  		      ,transaction_status ts
12:39:10 138  		      , ids
12:39:10 139  		  where t.id = ids.id
12:39:10 140  		    and t.transaction_status_id = ts.id
12:39:10 141  	      ;
12:39:10 142  	  end;
12:39:10 143  ----
12:39:10 144  --------------------------------------------------------------------------------
12:39:10 145  ----
12:39:10 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 147  	  is
12:39:10 148  	  begin
12:39:10 149  	      open out_cursor for
12:39:10 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
12:39:10 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
12:39:10 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
12:39:10 154  			,oc.billing_source_id, bs.name billing_source_name
12:39:10 155  			,oc.is_seat_license,oc.group_account_type_id
12:39:10 156  		  from offer_chain oc
12:39:10 157  		      , offer_chain_status ocs
12:39:10 158  		      , ids
12:39:10 159  		      , vendor_source vs
12:39:10 160  		      , billing_source bs
12:39:10 161  		  where oc.id = ids.id
12:39:10 162  		    and oc.offer_chain_status_id = ocs.id
12:39:10 163  		    and oc.vendor_source_id = vs.id
12:39:10 164  		    and oc.billing_source_id = bs.id
12:39:10 165  	      ;
12:39:10 166  	  end;
12:39:10 167  ----
12:39:10 168  --------------------------------------------------------------------------------
12:39:10 169  ----
12:39:10 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 171  	  is
12:39:10 172  	  begin
12:39:10 173  	      open out_cursor for
12:39:10 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
12:39:10 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
12:39:10 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
12:39:10 177  		  from offer_offer_chain ooc
12:39:10 178  		  , ids
12:39:10 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
12:39:10 180  	      ;
12:39:10 181  	  end;
12:39:10 182  ----
12:39:10 183  --------------------------------------------------------------------------------
12:39:10 184  ----
12:39:10 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 186  	  is
12:39:10 187  	  begin
12:39:10 188  	      open out_cursor for
12:39:10 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
12:39:10 191  		  from offer o
12:39:10 192  		      ,offer_status os
12:39:10 193  		      , ids
12:39:10 194  		  where o.id = ids.id
12:39:10 195  		    and o.offer_status_id = os.id
12:39:10 196  	      ;
12:39:10 197  	  end;
12:39:10 198  ----
12:39:10 199  --------------------------------------------------------------------------------
12:39:10 200  ----
12:39:10 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 202  	  is
12:39:10 203  	  begin
12:39:10 204  	      open out_cursor for
12:39:10 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
12:39:10 207  			 ,gc.expiration_date, gc.purchase_date
12:39:10 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
12:39:10 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
12:39:10 210  			 ,recipient_address_id
12:39:10 211  			 ,redeemer_address_id
12:39:10 212  			 ,recipient_notify_date
12:39:10 213  			 ,recipient_name
12:39:10 214  			 ,redemption_date
12:39:10 215  			 ,recipient_email
12:39:10 216  		  from gift_certificate gc
12:39:10 217  		      ,gift_certificate_status gcs
12:39:10 218  		      , ids
12:39:10 219  		  where gc.id = ids.id
12:39:10 220  		    and gc.gift_certificate_status_id = gcs.id
12:39:10 221  	      ;
12:39:10 222  	  end;
12:39:10 223  ----
12:39:10 224  --------------------------------------------------------------------------------
12:39:10 225  ----
12:39:10 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 227  	  is
12:39:10 228  	  begin
12:39:10 229  	      open out_cursor for
12:39:10 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
12:39:10 232  		  from product_offering po
12:39:10 233  		  , ids
12:39:10 234  		  where po.id = ids.id
12:39:10 235  	      ;
12:39:10 236  	  end;
12:39:10 237  ----
12:39:10 238  --------------------------------------------------------------------------------
12:39:10 239  ----
12:39:10 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 241  	  is
12:39:10 242  	  begin
12:39:10 243  	      open out_cursor for
12:39:10 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
12:39:10 246  			,product_uri, p.create_date
12:39:10 247  		  from product p
12:39:10 248  		      ,product_status ps
12:39:10 249  		      , ids
12:39:10 250  		  where p.id = ids.id
12:39:10 251  		    and p.product_status_id = ps.id
12:39:10 252  	      ;
12:39:10 253  	  end;
12:39:10 254  ----
12:39:10 255  --------------------------------------------------------------------------------
12:39:10 256  ----
12:39:10 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 258  	  is
12:39:10 259  	  begin
12:39:10 260  	      open out_cursor for
12:39:10 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
12:39:10 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
12:39:10 263  		  from offer_product_offering opo
12:39:10 264  		  , ids
12:39:10 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
12:39:10 266  	      ;
12:39:10 267  	  end;
12:39:10 268  ----
12:39:10 269  --------------------------------------------------------------------------------
12:39:10 270  ----
12:39:10 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 272  	  is
12:39:10 273  	  begin
12:39:10 274  	      open out_cursor for
12:39:10 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
12:39:10 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
12:39:10 277  		  from discount_product_offering dpo
12:39:10 278  		  , ids
12:39:10 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
12:39:10 280  	      ;
12:39:10 281  	  end;
12:39:10 282  ----
12:39:10 283  --------------------------------------------------------------------------------
12:39:10 284  ----
12:39:10 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 286  	  is
12:39:10 287  	  begin
12:39:10 288  	      open out_cursor for
12:39:10 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
12:39:10 291  			,d.discount_type_id, dt.value discount_type, d.create_date
12:39:10 292  		  from discount d
12:39:10 293  		      ,discount_type dt
12:39:10 294  		      , ids
12:39:10 295  		  where d.id = ids.id
12:39:10 296  		    and d.discount_type_id = dt.id
12:39:10 297  	      ;
12:39:10 298  	  end;
12:39:10 299  ----
12:39:10 300  --------------------------------------------------------------------------------
12:39:10 301  ----
12:39:10 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 303  	  is
12:39:10 304  	  begin
12:39:10 305  	      open out_cursor for
12:39:10 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
12:39:10 308  		  from product_eligibility pg
12:39:10 309  		  , ids
12:39:10 310  		  where pg.id = ids.id
12:39:10 311  	      ;
12:39:10 312  	  end;
12:39:10 313  ----
12:39:10 314  --------------------------------------------------------------------------------
12:39:10 315  ----
12:39:10 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 317  	  is
12:39:10 318  	  begin
12:39:10 319  	      open out_cursor for
12:39:10 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
12:39:10 322  		  from offer_chain_eligibility oce
12:39:10 323  		  , ids
12:39:10 324  		  where oce.id = ids.id
12:39:10 325  	      ;
12:39:10 326  	  end;
12:39:10 327  ----
12:39:10 328  --------------------------------------------------------------------------------
12:39:10 329  ----
12:39:10 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 331  	  is
12:39:10 332  	  begin
12:39:10 333  	      open out_cursor for
12:39:10 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
12:39:10 336  		  from offer_chain_meta_data ocm
12:39:10 337  		  , ids
12:39:10 338  		  where ocm.id = ids.id
12:39:10 339  	      ;
12:39:10 340  	  end;
12:39:10 341  ----
12:39:10 342  --------------------------------------------------------------------------------
12:39:10 343  ----
12:39:10 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 345  	  is
12:39:10 346  	  begin
12:39:10 347  	      open out_cursor for
12:39:10 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
12:39:10 350  		  from product_offering_meta_data pom
12:39:10 351  		  , ids
12:39:10 352  		  where pom.id = ids.id
12:39:10 353  	      ;
12:39:10 354  	  end;
12:39:10 355  ----
12:39:10 356  --------------------------------------------------------------------------------
12:39:10 357  ----
12:39:10 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 359  	  is
12:39:10 360  	  begin
12:39:10 361  	      open out_cursor for
12:39:10 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
12:39:10 364  		  from subscription_meta_data sm
12:39:10 365  		  , ids
12:39:10 366  		  where sm.id = ids.id
12:39:10 367  	      ;
12:39:10 368  	  end;
12:39:10 369  ----
12:39:10 370  --------------------------------------------------------------------------------
12:39:10 371  ----
12:39:10 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 373  	  is
12:39:10 374  	  begin
12:39:10 375  	      open out_cursor for
12:39:10 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
12:39:10 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
12:39:10 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
12:39:10 380  		  from credit_card cc
12:39:10 381  		      ,credit_card_type cct
12:39:10 382  		      ,credit_card_status ccs
12:39:10 383  		      , ids
12:39:10 384  		  where cc.id = ids.id
12:39:10 385  		    and cc.credit_card_type_id = cct.id(+)
12:39:10 386  		    and cc.credit_card_status_id = ccs.id
12:39:10 387  	      ;
12:39:10 388  	  end;
12:39:10 389  ----
12:39:10 390  --------------------------------------------------------------------------------
12:39:10 391  ----
12:39:10 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 393  	  is
12:39:10 394  	  begin
12:39:10 395  	      open out_cursor for
12:39:10 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
12:39:10 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
12:39:10 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
12:39:10 400  			,ta.create_date
12:39:10 401  		  from transaction_attempt ta
12:39:10 402  		      ,transaction_attempt_status tas
12:39:10 403  		      , ids
12:39:10 404  		  where ta.id = ids.id
12:39:10 405  		    and ta.transaction_attempt_status_id = tas.id
12:39:10 406  	      ;
12:39:10 407  	  end;
12:39:10 408  ----
12:39:10 409  --------------------------------------------------------------------------------
12:39:10 410  ----
12:39:10 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 412  	  is
12:39:10 413  	  begin
12:39:10 414  	      open out_cursor for
12:39:10 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
12:39:10 417  			,ia.adjustment_date, ia.create_date
12:39:10 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
12:39:10 419  		  , ids
12:39:10 420  		  where ia.id = ids.id
12:39:10 421  		  and ir.id = ia.invoice_adjustment_reason_id
12:39:10 422  	      ;
12:39:10 423  	  end;
12:39:10 424  ----
12:39:10 425  --------------------------------------------------------------------------------
12:39:10 426  ----
12:39:10 427  
12:39:10 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 429  	  is
12:39:10 430  	  begin
12:39:10 431  	      open out_cursor for
12:39:10 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
12:39:10 434  		  from line_item_adjustment lia
12:39:10 435  		  , ids
12:39:10 436  		  where lia.id = ids.id
12:39:10 437  	      ;
12:39:10 438  	  end;
12:39:10 439  ----
12:39:10 440  --------------------------------------------------------------------------------
12:39:10 441  ----
12:39:10 442  
12:39:10 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 444  	  is
12:39:10 445  	  begin
12:39:10 446  	      open out_cursor for
12:39:10 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 448  		  select
12:39:10 449  		    tax.id tax_id,
12:39:10 450  		    ttype.code tax_type,
12:39:10 451  		    tax.calculated_amount,
12:39:10 452  		    tax.create_date,
12:39:10 453  		    tax.line_item_id,
12:39:10 454  		    tax.effective_rate,
12:39:10 455  		    tax.taxable_amount,
12:39:10 456  		    tax.tax_rule_id,
12:39:10 457  		    j.name jurisdiction_level,
12:39:10 458  		    tax.jurisdiction_name,
12:39:10 459  		    tax.jurisdiction_id,
12:39:10 460  		    tax.ext_tax_type,
12:39:10 461  		    tax.ext_result,
12:39:10 462  		    tax.imposition_type,
12:39:10 463  		    tax.imposition
12:39:10 464  		  from tax
12:39:10 465  		  , tax_type ttype
12:39:10 466  		  , jurisdiction_level j
12:39:10 467  		  , ids
12:39:10 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
12:39:10 469  	      ;
12:39:10 470  	  end;
12:39:10 471  ----
12:39:10 472  --------------------------------------------------------------------------------
12:39:10 473  ----
12:39:10 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
12:39:10 475  	  is
12:39:10 476  	  begin
12:39:10 477  	      open out_cursor for
12:39:10 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
12:39:10 479  		  select
12:39:10 480  		    tax.id tad_adjustment_id,
12:39:10 481  		    tax.tax_id tax_id,
12:39:10 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
12:39:10 483  		    tax.amount tax_amount,
12:39:10 484  		    tax.create_date create_date
12:39:10 485  		  from tax_adjustment tax
12:39:10 486  		  , ids
12:39:10 487  		  where tax.id = ids.id
12:39:10 488  	      ;
12:39:10 489  	  end;
12:39:10 490  ----
12:39:10 491  --------------------------------------------------------------------------------
12:39:10 492  ----
12:39:10 493  /**/
12:39:10 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 495  	  BEGIN
12:39:10 496  	    OPEN OUT_CURSOR FOR
12:39:10 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 498  	    SELECT
12:39:10 499  		t.id rcn_ext_source_log_id
12:39:10 500  	      , t.extraction_timestamp
12:39:10 501  	      , t.report_date
12:39:10 502  	      , t.report_generation_datetime
12:39:10 503  	      , t.record_type
12:39:10 504  	      , t.report_file_name
12:39:10 505  	      , t.create_date
12:39:10 506  	      , t.created_by
12:39:10 507  	    FROM rcn_ext_source_log t, ids
12:39:10 508  	    WHERE ids.id = t.id;
12:39:10 509  	  END;
12:39:10 510  
12:39:10 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 512  	  BEGIN
12:39:10 513  	    OPEN OUT_CURSOR FOR
12:39:10 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 515  	    SELECT
12:39:10 516  		t.id rcn_cpt_svc_chg_dtl_id
12:39:10 517  	      , t.rcn_ext_source_log_id
12:39:10 518  	      , t.record_type
12:39:10 519  	      , t.category
12:39:10 520  	      , t.sub_category
12:39:10 521  	      , t.entity_type
12:39:10 522  	      , t.entity_number
12:39:10 523  	      , t.funds_transfer_inst_number
12:39:10 524  	      , t.secure_ba_number
12:39:10 525  	      , t.settlement_currency
12:39:10 526  	      , t.fee_schedule
12:39:10 527  	      , t.mop
12:39:10 528  	      , t.interchange_qualification
12:39:10 529  	      , t.fee_type_description
12:39:10 530  	      , t.action_type
12:39:10 531  	      , t.unit_quantity
12:39:10 532  	      , t.unit_fee
12:39:10 533  	      , t.amount
12:39:10 534  	      , t.percentage_rate
12:39:10 535  	      , t.total_charge
12:39:10 536  	      , t.create_date
12:39:10 537  	      , t.created_by
12:39:10 538  	    FROM rcn_cpt_service_charge_detail t, ids
12:39:10 539  	    WHERE ids.id = t.id;
12:39:10 540  	  END;
12:39:10 541  ----
12:39:10 542  --------------------------------------------------------------------------------
12:39:10 543  ----
12:39:10 544  
12:39:10 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 546  	  BEGIN
12:39:10 547  	    OPEN OUT_CURSOR FOR
12:39:10 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 549  	    SELECT
12:39:10 550  		t.id rcn_cpt_excp_dtl_id
12:39:10 551  	      , t.rcn_ext_source_log_id
12:39:10 552  	      , t.record_type
12:39:10 553  	      , t.submission_date
12:39:10 554  	      , t.pid_number
12:39:10 555  	      , t.pid_short_name
12:39:10 556  	      , t.submission_number
12:39:10 557  	      , t.record_number
12:39:10 558  	      , t.entity_type
12:39:10 559  	      , t.entity_number
12:39:10 560  	      , t.presentment_currency
12:39:10 561  	      , t.merchant_order_number
12:39:10 562  	      , t.rdfi_number
12:39:10 563  	      , t.account_number
12:39:10 564  	      , t.expiration_date
12:39:10 565  	      , t.amount
12:39:10 566  	      , t.mop
12:39:10 567  	      , t.action_code
12:39:10 568  	      , t.auth_date
12:39:10 569  	      , t.auth_code
12:39:10 570  	      , t.auth_response_code
12:39:10 571  	      , t.trace_number
12:39:10 572  	      , t.consumer_country_code
12:39:10 573  	      , t.category
12:39:10 574  	      , t.mcc
12:39:10 575  	      , t.reject_code
12:39:10 576  	      , t.submission_status
12:39:10 577  	      , t.create_date
12:39:10 578  	      , t.created_by
12:39:10 579  	    FROM rcn_cpt_exception_detail t, ids
12:39:10 580  	    WHERE ids.id = t.id;
12:39:10 581  	  END;
12:39:10 582  ----
12:39:10 583  --------------------------------------------------------------------------------
12:39:10 584  ----
12:39:10 585  
12:39:10 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 587  	  BEGIN
12:39:10 588  	    OPEN OUT_CURSOR FOR
12:39:10 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 590  	      SELECT
12:39:10 591  		t.id rcn_cpt_deposit_dtl_id
12:39:10 592  	      , t.rcn_ext_source_log_id
12:39:10 593  	      , t.record_type
12:39:10 594  	      , t.submission_date
12:39:10 595  	      , t.pid_number
12:39:10 596  	      , t.pid_short_name
12:39:10 597  	      , t.submission_number
12:39:10 598  	      , t.record_number
12:39:10 599  	      , t.entity_type
12:39:10 600  	      , t.entity_number
12:39:10 601  	      , t.presentment_currency
12:39:10 602  	      , t.merchant_order_number
12:39:10 603  	      , t.rdfi_number
12:39:10 604  	      , t.account_number
12:39:10 605  	      , t.expiration_date
12:39:10 606  	      , t.amount
12:39:10 607  	      , t.mop
12:39:10 608  	      , t.action_code
12:39:10 609  	      , t.auth_date
12:39:10 610  	      , t.auth_code
12:39:10 611  	      , t.auth_response_code
12:39:10 612  	      , t.trace_number
12:39:10 613  	      , t.consumer_country_code
12:39:10 614  	      , t.mcc
12:39:10 615  	      , t.create_date
12:39:10 616  	      , t.created_by
12:39:10 617  	      , t.fee_code
12:39:10 618  	      , t.unit_fee
12:39:10 619  	      , t.percent_fee
12:39:10 620  	      , t.total_interchange_fee
12:39:10 621  	      , t.total_assessment_fee
12:39:10 622  	      , t.other_fee
12:39:10 623  	    FROM rcn_cpt_deposit_detail t, ids
12:39:10 624  	    WHERE ids.id = t.id;
12:39:10 625  	  END;
12:39:10 626  ----
12:39:10 627  --------------------------------------------------------------------------------
12:39:10 628  ----
12:39:10 629  
12:39:10 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 631  	  BEGIN
12:39:10 632  	    OPEN OUT_CURSOR FOR
12:39:10 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 634  	    SELECT
12:39:10 635  		t.id rcn_cpt_chgbk_act_dtl_id
12:39:10 636  	      , t.rcn_ext_source_log_id
12:39:10 637  	      , t.record_type
12:39:10 638  	      , t.entity_type
12:39:10 639  	      , t.entity_number
12:39:10 640  	      , t.chargeback_amount_issuer
12:39:10 641  	      , t.prev_partial_representment
12:39:10 642  	      , t.presentment_currency
12:39:10 643  	      , t.chargeback_category
12:39:10 644  	      , t.status_flag
12:39:10 645  	      , t.sequence_number
12:39:10 646  	      , t.merchant_order_number
12:39:10 647  	      , t.account_number
12:39:10 648  	      , t.reason_code
12:39:10 649  	      , t.transaction_date
12:39:10 650  	      , t.chargeback_date
12:39:10 651  	      , t.activity_date
12:39:10 652  	      , t.chargeback_amount_action
12:39:10 653  	      , t.fee_amount
12:39:10 654  	      , t.usage_code
12:39:10 655  	      , t.mop_code
12:39:10 656  	      , t.authorization_date
12:39:10 657  	      , t.chargeback_due_date
12:39:10 658  	      , t.create_date
12:39:10 659  	      , t.created_by
12:39:10 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
12:39:10 661  	    WHERE ids.id = t.id;
12:39:10 662  	  END;
12:39:10 663  ----
12:39:10 664  --------------------------------------------------------------------------------
12:39:10 665  ----
12:39:10 666  
12:39:10 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 668  	  BEGIN
12:39:10 669  	    OPEN OUT_CURSOR FOR
12:39:10 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 671  	    SELECT
12:39:10 672  		t.id rcn_pp_settlement_id
12:39:10 673  	      , t.rcn_ext_source_log_id
12:39:10 674  	      , t.transaction_id
12:39:10 675  	      , t.invoice_id
12:39:10 676  	      , t.pp_ref_id
12:39:10 677  	      , t.pp_ref_id_type
12:39:10 678  	      , t.trans_event_code
12:39:10 679  	      , t.trans_init_date
12:39:10 680  	      , t.trans_comp_date
12:39:10 681  	      , t.trans_deb_or_cred
12:39:10 682  	      , t.gross_trans_amount
12:39:10 683  	      , t.gross_trans_currency
12:39:10 684  	      , t.fee_deb_or_cred
12:39:10 685  	      , t.fee_amount
12:39:10 686  	      , t.fee_currency
12:39:10 687  	      , t.custom_field
12:39:10 688  	      , t.create_date
12:39:10 689  	      , t.created_by
12:39:10 690  	    FROM rcn_pp_settlement t, ids
12:39:10 691  	    WHERE ids.id = t.id;
12:39:10 692  	  END;
12:39:10 693  ----
12:39:10 694  --------------------------------------------------------------------------------
12:39:10 695  ----
12:39:10 696  
12:39:10 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 698  	  BEGIN
12:39:10 699  	    OPEN OUT_CURSOR FOR
12:39:10 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 701  	    SELECT
12:39:10 702  		t.id rcn_pp_dispute_id
12:39:10 703  	      , t.rcn_ext_source_log_id
12:39:10 704  	      , t.dispute_type
12:39:10 705  	      , t.claimant_name
12:39:10 706  	      , t.claimant_email
12:39:10 707  	      , t.transaction_id
12:39:10 708  	      , t.trans_date
12:39:10 709  	      , t.disputed_amount
12:39:10 710  	      , t.disputed_amount_currency
12:39:10 711  	      , t.dispute_reason
12:39:10 712  	      , t.dispute_filing_date
12:39:10 713  	      , t.dispute_status
12:39:10 714  	      , t.dispute_case_id
12:39:10 715  	      , t.invoice_id
12:39:10 716  	      , t.create_date
12:39:10 717  	      , t.created_by
12:39:10 718  	    FROM
12:39:10 719  	    rcn_pp_dispute t, ids
12:39:10 720  	    WHERE ids.id = t.id;
12:39:10 721  	  END;
12:39:10 722  ----
12:39:10 723  --------------------------------------------------------------------------------
12:39:10 724  ----
12:39:10 725  
12:39:10 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 727  	  BEGIN
12:39:10 728  	    OPEN OUT_CURSOR FOR
12:39:10 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 730  	    SELECT
12:39:10 731  		t.id rcn_pp_trans_dtl_id
12:39:10 732  	      , t.rcn_ext_source_log_id
12:39:10 733  	      , t.transaction_id
12:39:10 734  	      , t.invoice_id
12:39:10 735  	      , t.pp_ref_id
12:39:10 736  	      , t.trans_event_code
12:39:10 737  	      , t.trans_init_date
12:39:10 738  	      , t.trans_comp_date
12:39:10 739  	      , t.trans_deb_or_cred
12:39:10 740  	      , t.gross_trans_amount
12:39:10 741  	      , t.gross_trans_currency
12:39:10 742  	      , t.fee_deb_or_cred
12:39:10 743  	      , t.fee_amount
12:39:10 744  	      , t.fee_currency
12:39:10 745  	      , t.trans_status
12:39:10 746  	      , t.insurance_amount
12:39:10 747  	      , t.sales_tax_amount
12:39:10 748  	      , t.shipping_amount
12:39:10 749  	      , t.trans_subject
12:39:10 750  	      , t.trans_note
12:39:10 751  	      , t.payer_acct_id
12:39:10 752  	      , t.payer_addr_status
12:39:10 753  	      , t.item_name
12:39:10 754  	      , t.item_id
12:39:10 755  	      , t.option_1_name
12:39:10 756  	      , t.option_1_value
12:39:10 757  	      , t.option_2_name
12:39:10 758  	      , t.option_2_value
12:39:10 759  	      , t.auction_site
12:39:10 760  	      , t.auction_buyer_id
12:39:10 761  	      , t.auction_closing_date
12:39:10 762  	      , t.shipping_addr_line_1
12:39:10 763  	      , t.shipping_addr_line_2
12:39:10 764  	      , t.shipping_addr_city
12:39:10 765  	      , t.shipping_addr_state
12:39:10 766  	      , t.shipping_addr_zip
12:39:10 767  	      , t.shipping_addr_country
12:39:10 768  	      , t.custom_field
12:39:10 769  	      , t.create_date
12:39:10 770  	      , t.created_by
12:39:10 771  	    FROM rcn_pp_trans_detail t, ids
12:39:10 772  	    WHERE ids.id = t.id;
12:39:10 773  	  END;
12:39:10 774  ----
12:39:10 775  --------------------------------------------------------------------------------
12:39:10 776  ----
12:39:10 777  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 778  	  BEGIN
12:39:10 779  	    OPEN OUT_CURSOR FOR
12:39:10 780  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 781  	    SELECT
12:39:10 782  		t.ID PAYPAL_ID
12:39:10 783  	      , ACCOUNT_ID
12:39:10 784  	      , INSTRUMENT_NAME
12:39:10 785  	      , CREATE_DATE
12:39:10 786  	      , CREATED_BY
12:39:10 787  	      , UPDATE_DATE
12:39:10 788  	      , UPDATED_BY
12:39:10 789  	      , s.value PAYPAL_STATUS
12:39:10 790  	      , STATE
12:39:10 791  	      , CITY
12:39:10 792  	      , POSTAL_CODE
12:39:10 793  	      , COUNTRY
12:39:10 794  	      , EXPIRATION_DATE
12:39:10 795  	    FROM paypal t, paypal_status s, ids
12:39:10 796  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
12:39:10 797  	  END;
12:39:10 798  ----
12:39:10 799  --------------------------------------------------------------------------------
12:39:10 800  ----
12:39:10 801  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
12:39:10 802  	  BEGIN
12:39:10 803  	    OPEN OUT_CURSOR FOR
12:39:10 804  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
12:39:10 805  	    SELECT
12:39:10 806  	      a.id ADDRESS_ID,
12:39:10 807  	      address1,
12:39:10 808  	      address2,
12:39:10 809  	      city,
12:39:10 810  	      state,
12:39:10 811  	      postal_code,
12:39:10 812  	      country,
12:39:10 813  	      create_date,
12:39:10 814  	      created_by,
12:39:10 815  	      update_date,
12:39:10 816  	      updated_by
12:39:10 817  	    FROM address a, ids
12:39:10 818  	    WHERE ids.id = a.id;
12:39:10 819  	  END;
12:39:10 820  ----
12:39:10 821  --------------------------------------------------------------------------------
12:39:10 822  ----
12:39:10 823  /**/
12:39:10 824  END PROCS_REPORTING;
12:39:10 825  .
12:39:10 SQL> /

Package body created.

Elapsed: 00:00:00.31
12:39:10 SQL> 
12:39:10 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
12:39:10   2  
12:39:10   3  ----
12:39:10   4  --------------------------------------------------------------------------------
12:39:10   5  ----
12:39:10   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
12:39:10   7  	      return line_item.amount%type
12:39:10   8  	  is
12:39:10   9  	      v_discount  line_item.amount%type := 0;
12:39:10  10  	  begin
12:39:10  11  	      for x in (
12:39:10  12  		  select d.id discount_id
12:39:10  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
12:39:10  14  		  from discount d
12:39:10  15  		      join discount_line_item dli	      on dli.discount_id = d.id
12:39:10  16  		      join discount_product_offering dop      on dop.discount_id = d.id
12:39:10  17  		      join product_offering po		      on po.id = dop.product_offering_id
12:39:10  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
12:39:10  19  		  where dli.line_item_id = in_line_item_id
12:39:10  20  	      )
12:39:10  21  	      loop
12:39:10  22  		  v_discount := v_discount + x.discount_amount;
12:39:10  23  	      end loop;
12:39:10  24  
12:39:10  25  	      return v_discount;
12:39:10  26  	  end;
12:39:10  27  ----
12:39:10  28  --------------------------------------------------------------------------------
12:39:10  29  ----
12:39:10  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
12:39:10  31  	      return line_item.amount%type
12:39:10  32  	  is
12:39:10  33  	      v_li_total  line_item.amount%type;
12:39:10  34  	      v_inv_total line_item.amount%type;
12:39:10  35  	      v_ref_total line_item.amount%type;
12:39:10  36  	  begin
12:39:10  37  
12:39:10  38  	      for li in (
12:39:10  39  		  select li.invoice_id, po.*
12:39:10  40  		  from line_item li
12:39:10  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
12:39:10  42  		  where li.id = in_line_item_id
12:39:10  43  	      )
12:39:10  44  	      loop
12:39:10  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
12:39:10  46  
12:39:10  47  		  v_inv_total := 0;
12:39:10  48  		  v_ref_total := 0;
12:39:10  49  		  for x in (
12:39:10  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
12:39:10  51  		      from charge c
12:39:10  52  		      where c.invoice_id = li.invoice_id
12:39:10  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
12:39:10  54  		  )
12:39:10  55  		  loop
12:39:10  56  		      if (x.type = 1) then
12:39:10  57  			  v_inv_total := x.total;
12:39:10  58  		      else
12:39:10  59  			  v_ref_total := x.total;
12:39:10  60  		      end if;
12:39:10  61  		  end loop;
12:39:10  62  
12:39:10  63  		  if (v_inv_total > 0) then
12:39:10  64  		      return (v_ref_total / v_inv_total) * v_li_total;
12:39:10  65  		  else
12:39:10  66  		      return 0;
12:39:10  67  		  end if;
12:39:10  68  
12:39:10  69  	      end loop;
12:39:10  70  
12:39:10  71  	      return 0;
12:39:10  72  	  end;
12:39:10  73  ----
12:39:10  74  --------------------------------------------------------------------------------
12:39:10  75  ----
12:39:10  76  	PROCEDURE EXTRACT_LINE_ITEMS(
12:39:10  77  	  in_lower_date_bound DATE,
12:39:10  78  	  in_upper_date_bound DATE,
12:39:10  79  	  out_lic_cur OUT sys_refcursor
12:39:10  80  	) AS
12:39:10  81  	BEGIN
12:39:10  82  	  OPEN out_lic_cur FOR
12:39:10  83  	  with liq as (
12:39:10  84  		SELECT li2.id
12:39:10  85  		      FROM
12:39:10  86  			   line_item li2
12:39:10  87  		      WHERE
12:39:10  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
12:39:10  89  		UNION
12:39:10  90  		SELECT li2.id
12:39:10  91  		      FROM
12:39:10  92  			   line_item li2
12:39:10  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
12:39:10  94  		      WHERE
12:39:10  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
12:39:10  96  		UNION
12:39:10  97  		SELECT li2.id
12:39:10  98  		      FROM
12:39:10  99  			   line_item li2
12:39:10 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
12:39:10 101  		      WHERE
12:39:10 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
12:39:10 103  		UNION
12:39:10 104  		SELECT li2.id
12:39:10 105  		      FROM
12:39:10 106  			   line_item li2
12:39:10 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
12:39:10 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
12:39:10 109  		      WHERE
12:39:10 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
12:39:10 111  		UNION
12:39:10 112  		SELECT li2.id
12:39:10 113  		      FROM
12:39:10 114  			   line_item li2
12:39:10 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
12:39:10 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
12:39:10 117  		      WHERE
12:39:10 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
12:39:10 119  		UNION
12:39:10 120  		SELECT li2.id
12:39:10 121  		      FROM
12:39:10 122  			   line_item li2
12:39:10 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
12:39:10 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
12:39:10 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
12:39:10 126  		      WHERE
12:39:10 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
12:39:10 128  	  )
12:39:10 129  	  SELECT distinct
12:39:10 130  	    line_item.id				 line_item_id
12:39:10 131  	  , product.name				 product_name
12:39:10 132  	  , product.unit_price				 product_unit_price
12:39:10 133  	  , product.production_cost			 product_production_cost
12:39:10 134  	  , offer_chain.name				 offer_chain_name
12:39:10 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
12:39:10 136  	  , gclicense.purchase_date			 subscription_start_date
12:39:10 137  	  , gclicense.start_date			 license_start_date
12:39:10 138  	  , gclicense.end_date				 license_end_date
12:39:10 139  	  , credit_card.city				 cc_city
12:39:10 140  	  , credit_card.state				 cc_state
12:39:10 141  	  , credit_card.postal_code			 cc_postal_code
12:39:10 142  	  , line_item.create_date			 line_item_purchase_date
12:39:10 143  	  , gclicense.account_regi_id
12:39:10 144  	  , product_offering.quantity			 purchase_quantity
12:39:10 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
12:39:10 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
12:39:10 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
12:39:10 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
12:39:10 149  	  , 0						 purchase_tax_amount
12:39:10 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
12:39:10 151  	  , invoice.id					 invoice_number
12:39:10 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
12:39:10 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
12:39:10 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
12:39:10 155  	  FROM
12:39:10 156  	       line_item
12:39:10 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
12:39:10 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
12:39:10 159  	  JOIN product				ON product.id	       = product_offering.product_id
12:39:10 160  	  join (
12:39:10 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
12:39:10 162  		      ,subscription.sct_id, license.start_date, license.end_date
12:39:10 163  		      ,account.group_id account_regi_id
12:39:10 164  		from	 license
12:39:10 165  		    join subscription ON subscription.id = license.subscription_id
12:39:10 166  		    join account      ON account.id	 = subscription.account_id
12:39:10 167  		union all
12:39:10 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
12:39:10 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
12:39:10 170  		      ,gc.purchaser_group_id account_regi_id
12:39:10 171  		from	 gift_certificate gc
12:39:10 172  		where
12:39:10 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
12:39:10 174  
12:39:10 175  	  ) gclicense
12:39:10 176  						on gclicense.invoice_id = invoice.id
12:39:10 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
12:39:10 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
12:39:10 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
12:39:10 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
12:39:10 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
12:39:10 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
12:39:10 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
12:39:10 184  	  join liq				on line_item.id 	= liq.id
12:39:10 185  	    ;
12:39:10 186  	END EXTRACT_LINE_ITEMS;
12:39:10 187  ----
12:39:10 188  --------------------------------------------------------------------------------
12:39:10 189  ----
12:39:10 190  END PROCS_REPORTING_1A;
12:39:10 191  .
12:39:10 SQL> /

Package body created.

Elapsed: 00:00:00.03
12:39:10 SQL> 
12:39:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V5" AS
12:39:10   2  
12:39:10   3  FUNCTION GET_PRODUCT_NAMES(
12:39:10   4  	in_offer_id IN NUMBER
12:39:10   5  ) RETURN VARCHAR2 AS
12:39:10   6  var_result_names VARCHAR2(1024);
12:39:10   7  BEGIN
12:39:10   8  
12:39:10   9  	var_result_names := NULL;
12:39:10  10  
12:39:10  11  	FOR f_product IN (
12:39:10  12  	  SELECT
12:39:10  13  	    PRODUCT.NAME
12:39:10  14  	  FROM
12:39:10  15  	    PRODUCT
12:39:10  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
12:39:10  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
12:39:10  18  	  WHERE
12:39:10  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
12:39:10  20  	)
12:39:10  21  	LOOP
12:39:10  22  
12:39:10  23  	  IF var_result_names IS NULL THEN
12:39:10  24  	    var_result_names := f_product.NAME;
12:39:10  25  	  ELSE
12:39:10  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
12:39:10  27  	  END IF;
12:39:10  28  
12:39:10  29  	END LOOP;
12:39:10  30  
12:39:10  31  	RETURN var_result_names;
12:39:10  32  
12:39:10  33  END GET_PRODUCT_NAMES;
12:39:10  34  
12:39:10  35  /******************************************************************************/
12:39:10  36  
12:39:10  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
12:39:10  38  	in_start_date  IN DATE,
12:39:10  39  	in_end_date    IN DATE,
12:39:10  40  	out_result_set OUT SYS_REFCURSOR
12:39:10  41  ) AS
12:39:10  42  -- CONSTANTS
12:39:10  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
12:39:10  44  BEGIN
12:39:10  45  
12:39:10  46  	OPEN out_result_set FOR
12:39:10  47  	SELECT
12:39:10  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
12:39:10  49  	  "Offer_Id",
12:39:10  50  	  "New_Purchases_Num",
12:39:10  51  	  "Number_Of_renewals",
12:39:10  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
12:39:10  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
12:39:10  54  	FROM (
12:39:10  55  	  SELECT
12:39:10  56  	    "Offer_Id",
12:39:10  57  	    "Number_Of_renewals",
12:39:10  58  	    "New_Purchases_Num"
12:39:10  59  	  FROM (
12:39:10  60  	    SELECT
12:39:10  61  	      OFFER.ID as "Offer_Id",
12:39:10  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
12:39:10  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
12:39:10  64  	    FROM
12:39:10  65  	      OFFER
12:39:10  66  	  )
12:39:10  67  	  WHERE
12:39:10  68  	    "New_Purchases_Num" > 0
12:39:10  69  	    OR "Number_Of_renewals" > 0
12:39:10  70  	);
12:39:10  71  
12:39:10  72  	/*
12:39:10  73  	OPEN out_result_set FOR
12:39:10  74  	SELECT
12:39:10  75  	  "Product_Names",
12:39:10  76  	  "Offer_Id",
12:39:10  77  	  "New_Purchases_Num",
12:39:10  78  	  "Number_Of_renewals",
12:39:10  79  	  "Total_Dollar_Value",
12:39:10  80  	  "Unique_Purchasers_num"
12:39:10  81  	FROM (
12:39:10  82  	  SELECT
12:39:10  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
12:39:10  84  	    offer.id as "Offer_Id",
12:39:10  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
12:39:10  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
12:39:10  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
12:39:10  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
12:39:10  89  	  FROM
12:39:10  90  	    OFFER
12:39:10  91  	)
12:39:10  92  	WHERE
12:39:10  93  	  "New_Purchases_Num" > 0
12:39:10  94  	  OR "Number_Of_renewals" > 0
12:39:10  95  	  OR "Total_Dollar_Value" > 0
12:39:10  96  	  OR "Unique_Purchasers_num" > 0;
12:39:10  97  	*/
12:39:10  98  
12:39:10  99  END GET_FULL_FLASH_REPORT_PURCH;
12:39:10 100  
12:39:10 101  /******************************************************************************/
12:39:10 102  
12:39:10 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
12:39:10 104  	in_offer_id	       IN NUMBER,
12:39:10 105  	in_start_date	       IN DATE,
12:39:10 106  	in_end_date	       IN DATE,
12:39:10 107  	out_new_purchasers_num OUT NUMBER,
12:39:10 108  	out_renewals_num       OUT NUMBER,
12:39:10 109  	out_product_names      OUT VARCHAR2,
12:39:10 110  	out_total_dollar_value OUT NUMBER,
12:39:10 111  	out_unique_purchasers  OUT NUMBER
12:39:10 112  ) AS
12:39:10 113  -- CONSTANTS
12:39:10 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
12:39:10 115  BEGIN
12:39:10 116  
12:39:10 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
12:39:10 118  
12:39:10 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
12:39:10 120  	  in_offer_id,
12:39:10 121  	  in_start_date,
12:39:10 122  	  in_end_date
12:39:10 123  	);
12:39:10 124  
12:39:10 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
12:39:10 126  	  in_offer_id,
12:39:10 127  	  in_start_date,
12:39:10 128  	  in_end_date
12:39:10 129  	);
12:39:10 130  
12:39:10 131  	out_renewals_num := FLR_RENEWALS_NUM(
12:39:10 132  	  in_offer_id,
12:39:10 133  	  in_start_date,
12:39:10 134  	  in_end_date
12:39:10 135  	);
12:39:10 136  
12:39:10 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
12:39:10 138  	  in_offer_id,
12:39:10 139  	  in_start_date,
12:39:10 140  	  in_end_date
12:39:10 141  	);
12:39:10 142  
12:39:10 143  END GET_FLASH_REPORT_PURCHASES;
12:39:10 144  
12:39:10 145  /******************************************************************************/
12:39:10 146  
12:39:10 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
12:39:10 148  	in_offer_id	       IN NUMBER,
12:39:10 149  	in_start_date	       IN DATE,
12:39:10 150  	in_end_date	       IN DATE
12:39:10 151  ) RETURN NUMBER AS
12:39:10 152  -- CONSTANTS
12:39:10 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
12:39:10 154  -- VARIABLES
12:39:10 155  var_new_purchases_num NUMBER;
12:39:10 156  BEGIN
12:39:10 157  	SELECT
12:39:10 158  	  COUNT(LICENSE.ID)
12:39:10 159  	  into
12:39:10 160  	  var_new_purchases_num
12:39:10 161  	FROM
12:39:10 162  	  LICENSE
12:39:10 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
12:39:10 164  	WHERE
12:39:10 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
12:39:10 166  	  AND LICENSE.OFFER_ID = in_offer_id
12:39:10 167  	  AND CHARGE.CHARGE_AMOUNT > 0
12:39:10 168  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
12:39:10 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
12:39:10 170  
12:39:10 171  	RETURN var_new_purchases_num;
12:39:10 172  END FLR_NEW_PURCHASERS_NUM;
12:39:10 173  
12:39:10 174  /******************************************************************************/
12:39:10 175  
12:39:10 176  FUNCTION FLR_RENEWALS_NUM (
12:39:10 177  	in_offer_id	       IN NUMBER,
12:39:10 178  	in_start_date	       IN DATE,
12:39:10 179  	in_end_date	       IN DATE
12:39:10 180  ) RETURN NUMBER AS
12:39:10 181  -- CONSTANTS
12:39:10 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
12:39:10 183  -- VARIABLES
12:39:10 184  var_renewals_num NUMBER;
12:39:10 185  BEGIN
12:39:10 186  	SELECT
12:39:10 187  	  COUNT(LICENSE.ID)
12:39:10 188  	  into
12:39:10 189  	  var_renewals_num
12:39:10 190  	FROM
12:39:10 191  	  LICENSE
12:39:10 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
12:39:10 193  	WHERE
12:39:10 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
12:39:10 195  	  AND LICENSE.OFFER_ID = in_offer_id
12:39:10 196  	  AND CHARGE.CHARGE_AMOUNT > 0
12:39:10 197  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
12:39:10 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
12:39:10 199  
12:39:10 200  	RETURN var_renewals_num;
12:39:10 201  END FLR_RENEWALS_NUM;
12:39:10 202  
12:39:10 203  /******************************************************************************/
12:39:10 204  
12:39:10 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
12:39:10 206  	in_offer_id	       IN NUMBER,
12:39:10 207  	in_start_date	       IN DATE,
12:39:10 208  	in_end_date	       IN DATE
12:39:10 209  ) RETURN NUMBER AS
12:39:10 210  var_dollar_value NUMBER(10,2);
12:39:10 211  BEGIN
12:39:10 212  	SELECT
12:39:10 213  	  SUM(CHARGE.CHARGE_AMOUNT)
12:39:10 214  	  into
12:39:10 215  	  var_dollar_value
12:39:10 216  	FROM
12:39:10 217  	  LICENSE
12:39:10 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
12:39:10 219  	WHERE
12:39:10 220  	  LICENSE.OFFER_ID = in_offer_id
12:39:10 221  	  AND CHARGE.CHARGE_AMOUNT > 0
12:39:10 222  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
12:39:10 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
12:39:10 224  
12:39:10 225  	RETURN var_dollar_value;
12:39:10 226  END FLR_TOTAL_DOLLAR_VALUE;
12:39:10 227  
12:39:10 228  /******************************************************************************/
12:39:10 229  
12:39:10 230  FUNCTION FLR_UNIQUE_PURCHASERS (
12:39:10 231  	in_offer_id	       IN NUMBER,
12:39:10 232  	in_start_date	       IN DATE,
12:39:10 233  	in_end_date	       IN DATE
12:39:10 234  ) RETURN NUMBER AS
12:39:10 235  -- CONSTANTS
12:39:10 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
12:39:10 237  -- VARIABLES
12:39:10 238  var_unique_purchasers NUMBER;
12:39:10 239  BEGIN
12:39:10 240  	SELECT
12:39:10 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
12:39:10 242  	FROM
12:39:10 243  	  LICENSE
12:39:10 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
12:39:10 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:10 246  	WHERE
12:39:10 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
12:39:10 248  	  AND LICENSE.OFFER_ID = in_offer_id
12:39:10 249  	  AND CHARGE.CHARGE_AMOUNT > 0
12:39:10 250  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
12:39:10 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
12:39:10 252  
12:39:10 253  	RETURN var_unique_purchasers;
12:39:10 254  END;
12:39:10 255  
12:39:10 256  END PROCS_REPORTS_V5;
12:39:10 257  .
12:39:10 SQL> /

Package body created.

Elapsed: 00:00:00.05
12:39:10 SQL> 
12:39:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V16" AS
12:39:10   2  
12:39:10   3  PROCEDURE INCREMENT_VERSION
12:39:10   4  /*
12:39:10   5  Throws exceptions:
12:39:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10   7  */
12:39:10   8  AS
12:39:10   9  BEGIN
12:39:10  10  
12:39:10  11  	UPDATE SYS_VERSION SET version=version+1;
12:39:10  12  
12:39:10  13  END INCREMENT_VERSION;
12:39:10  14  
12:39:10  15  /*************************************************************/
12:39:10  16  
12:39:10  17  PROCEDURE CHECK_VERSION(
12:39:10  18  	  in_vers    IN NUMBER,
12:39:10  19  	  out_result OUT NUMBER
12:39:10  20  ) AS
12:39:10  21  	current_version NUMBER;
12:39:10  22  BEGIN
12:39:10  23  	SELECT version INTO current_version FROM SYS_VERSION;
12:39:10  24  	IF(current_version != in_vers) THEN
12:39:10  25  	  out_result := 1;
12:39:10  26  	ELSE
12:39:10  27  	  out_result := 0;
12:39:10  28  	END IF;
12:39:10  29  END CHECK_VERSION;
12:39:10  30  
12:39:10  31  END PROCS_SYSTEM_V16;
12:39:10  32  .
12:39:10 SQL> /

Package body created.

Elapsed: 00:00:00.01
12:39:10 SQL> 
12:39:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V16" AS
12:39:10   2  
12:39:10   3  PROCEDURE ADD_TAX (
12:39:10   4  	in_tax_type_id		 IN NUMBER,
12:39:10   5  	in_calculated_amount	 IN NUMBER,
12:39:10   6  	in_created_by		 IN VARCHAR2,
12:39:10   7  	in_line_item_id 	 IN NUMBER,
12:39:10   8  	in_effective_rate	 IN VARCHAR2,
12:39:10   9  	in_taxable_amount	 IN NUMBER,
12:39:10  10  	in_tax_rule_id		 IN NUMBER,
12:39:10  11  	in_jurisdiction_level_id IN NUMBER,
12:39:10  12  	in_jurisdiction_name	 IN VARCHAR2,
12:39:10  13  	in_jurisdiction_id	 IN VARCHAR2,
12:39:10  14  	in_ext_tax_type 	 IN VARCHAR2,
12:39:10  15  	in_ext_result		 IN VARCHAR2,
12:39:10  16  	in_imposition_type	 IN VARCHAR2,
12:39:10  17  	in_imposition		 IN VARCHAR2
12:39:10  18  ) AS
12:39:10  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
12:39:10  20  -- VARIABLES
12:39:10  21  var_new_tax_id	NUMBER;
12:39:10  22  temp_line_item_id NUMBER;
12:39:10  23  -- EXCEPTIONS
12:39:10  24  BAD_LINE_ITEM_ID EXCEPTION;
12:39:10  25  BEGIN
12:39:10  26  
12:39:10  27  	BEGIN
12:39:10  28  	  SELECT
12:39:10  29  	    LINE_ITEM.ID into temp_line_item_id
12:39:10  30  	  FROM
12:39:10  31  	    LINE_ITEM
12:39:10  32  	  WHERE
12:39:10  33  	    LINE_ITEM.ID = in_line_item_id;
12:39:10  34  	  EXCEPTION
12:39:10  35  	    WHEN NO_DATA_FOUND THEN
12:39:10  36  	      RAISE BAD_LINE_ITEM_ID;
12:39:10  37  	END;
12:39:10  38  
12:39:10  39  	var_new_tax_id := NULL;
12:39:10  40  
12:39:10  41  	PROCS_TAXES_CRU_V16.CREATE_TAX(
12:39:10  42  	  var_new_tax_id,
12:39:10  43  	  in_tax_type_id,
12:39:10  44  	  in_calculated_amount,
12:39:10  45  	  in_created_by,
12:39:10  46  	  in_line_item_id,
12:39:10  47  	  in_effective_rate,
12:39:10  48  	  in_taxable_amount,
12:39:10  49  	  in_tax_rule_id,
12:39:10  50  	  in_jurisdiction_level_id,
12:39:10  51  	  in_jurisdiction_name,
12:39:10  52  	  in_jurisdiction_id,
12:39:10  53  	  in_ext_tax_type,
12:39:10  54  	  in_ext_result,
12:39:10  55  	  in_imposition_type,
12:39:10  56  	  in_imposition
12:39:10  57  	);
12:39:10  58  
12:39:10  59  EXCEPTION
12:39:10  60  WHEN BAD_LINE_ITEM_ID THEN
12:39:10  61  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10  62  	  SPROC_NAME, 'No such line item');
12:39:10  63  WHEN OTHERS THEN
12:39:10  64  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10  66  END ADD_TAX;
12:39:10  67  
12:39:10  68  /******************************************************************************/
12:39:10  69  
12:39:10  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
12:39:10  71  	in_country_code IN CHAR,
12:39:10  72  	in_check_date IN DATE,
12:39:10  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V16.FALSE
12:39:10  74  ) AS
12:39:10  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
12:39:10  76  -- VARIABLES
12:39:10  77  var_countries_count NUMBER;
12:39:10  78  var_result	  NUMBER;
12:39:10  79  BEGIN
12:39:10  80  
12:39:10  81  	SELECT
12:39:10  82  	  COUNT(1) into var_countries_count
12:39:10  83  	FROM
12:39:10  84  	  TAX_COUNTRY_EXCLUSION_LIST
12:39:10  85  	WHERE
12:39:10  86  	  country_code = in_country_code
12:39:10  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
12:39:10  88  	  AND (
12:39:10  89  	    end_date is null
12:39:10  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
12:39:10  91  	  );
12:39:10  92  
12:39:10  93  	IF var_countries_count > 1 THEN
12:39:10  94  	  -- [REVU] Should not happen. DB structure error
12:39:10  95  	  var_result := GLOBAL_CONSTANTS_V16.TRUE;
12:39:10  96  	ELSIF var_countries_count = 1 THEN
12:39:10  97  	  var_result := GLOBAL_CONSTANTS_V16.TRUE;
12:39:10  98  	ELSE
12:39:10  99  	  var_result := GLOBAL_CONSTANTS_V16.FALSE;
12:39:10 100  	END IF;
12:39:10 101  
12:39:10 102  	out_is_founded := var_result;
12:39:10 103  
12:39:10 104  EXCEPTION
12:39:10 105  WHEN OTHERS THEN
12:39:10 106  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 108  END CHECK_COUNTRY_FOR_EXCLUSION;
12:39:10 109  
12:39:10 110  /******************************************************************************/
12:39:10 111  
12:39:10 112  PROCEDURE GET_TAX_CATEGORY (
12:39:10 113  	in_tax_category_id IN NUMBER,
12:39:10 114  	out_result_set	   OUT SYS_REFCURSOR
12:39:10 115  ) AS
12:39:10 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
12:39:10 117  BEGIN
12:39:10 118  
12:39:10 119  	OPEN out_result_set FOR
12:39:10 120  	SELECT
12:39:10 121  	  ID,
12:39:10 122  	  CODE,
12:39:10 123  	  DESCRIPTION
12:39:10 124  	FROM
12:39:10 125  	  TAX_CATEGORY
12:39:10 126  	WHERE
12:39:10 127  	  ID = in_tax_category_id;
12:39:10 128  
12:39:10 129  EXCEPTION
12:39:10 130  WHEN OTHERS THEN
12:39:10 131  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 133  END GET_TAX_CATEGORY;
12:39:10 134  
12:39:10 135  END PROCS_TAXES_V16;
12:39:10 136  .
12:39:10 SQL> /

Package body created.

Elapsed: 00:00:00.02
12:39:10 SQL> 
12:39:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V16" AS
12:39:10   2  
12:39:10   3  PROCEDURE CREATE_TRANSACTION (
12:39:10   4  /*
12:39:10   5  Throws exceptions:
12:39:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10   8  */
12:39:10   9  	in_transaction_id  IN NUMBER,
12:39:10  10  	in_status_id	   IN NUMBER,
12:39:10  11  	in_amount	   IN NUMBER,
12:39:10  12  	in_created_by	   IN VARCHAR2,
12:39:10  13  	in_order_id	   IN VARCHAR2,
12:39:10  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE,
12:39:10  15  	out_transaction_id OUT NUMBER
12:39:10  16  ) AS
12:39:10  17  -- VARIABLES
12:39:10  18  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
12:39:10  19  var_transaction_count  NUMBER;
12:39:10  20  -- EXCEPTIONS
12:39:10  21  BAD_TRANSACTION_ID     EXCEPTION;
12:39:10  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:10  23  BEGIN
12:39:10  24  
12:39:10  25  	IF in_transaction_id IS NOT NULL THEN
12:39:10  26  	  SELECT
12:39:10  27  	    COUNT(*) into var_transaction_count
12:39:10  28  	  FROM
12:39:10  29  	    TRANSACTION
12:39:10  30  	  WHERE
12:39:10  31  	    TRANSACTION.ID = in_transaction_id;
12:39:10  32  	  IF var_transaction_count > 0 THEN
12:39:10  33  	    RAISE BAD_TRANSACTION_ID;
12:39:10  34  	  END IF;
12:39:10  35  	END IF;
12:39:10  36  
12:39:10  37  	PROCS_TRANSACTION_CRU_V16.CREATE_TRANSACTION(
12:39:10  38  	  out_transaction_id	   => out_transaction_id,
12:39:10  39  	  in_transaction_id	   => in_transaction_id,
12:39:10  40  	  in_transaction_status_id => in_status_id,
12:39:10  41  	  in_transaction_amount    => in_amount,
12:39:10  42  	  in_created_by 	   => in_created_by,
12:39:10  43  	  in_order_id		   => in_order_id,
12:39:10  44  	  in_is_refund		   => in_is_refund
12:39:10  45  	);
12:39:10  46  
12:39:10  47  EXCEPTION
12:39:10  48  WHEN BAD_TRANSACTION_ID THEN
12:39:10  49  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:10  50  	  SPROC_NAME, 'Transaction with given id already exists');
12:39:10  51  WHEN OTHERS THEN
12:39:10  52  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10  53  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10  54  END CREATE_TRANSACTION;
12:39:10  55  
12:39:10  56  /******************************************************************************/
12:39:10  57  
12:39:10  58  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
12:39:10  59  /*
12:39:10  60  Throws exceptions:
12:39:10  61  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10  63  */
12:39:10  64  	in_transaction_id	   IN NUMBER,
12:39:10  65  	in_trans_attempt_status    IN NUMBER,
12:39:10  66  	in_external_status_code    IN VARCHAR2,
12:39:10  67  	in_external_status_message IN VARCHAR2,
12:39:10  68  	in_created_by		   IN VARCHAR2,
12:39:10  69  	in_ext_transaction_id	   IN VARCHAR2,
12:39:10  70  	out_transaction_attempt_id OUT NUMBER
12:39:10  71  ) AS
12:39:10  72  -- VARIABLES
12:39:10  73  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
12:39:10  74  var_transaction_create_date DATE;
12:39:10  75  var_transaction_attempt_id  NUMBER;
12:39:10  76  
12:39:10  77  -- EXCEPTIONS
12:39:10  78  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
12:39:10  79  BAD_TRANSACTION_ID       EXCEPTION;
12:39:10  80  BEGIN
12:39:10  81  
12:39:10  82  	-- Check that transaction exists
12:39:10  83  	BEGIN
12:39:10  84  	  SELECT
12:39:10  85  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
12:39:10  86  	  FROM
12:39:10  87  	    TRANSACTION
12:39:10  88  	  WHERE
12:39:10  89  	    TRANSACTION.ID = in_transaction_id;
12:39:10  90  	  EXCEPTION
12:39:10  91  	    WHEN OTHERS THEN
12:39:10  92  	      RAISE BAD_TRANSACTION_ID;
12:39:10  93  	END;
12:39:10  94  
12:39:10  95  	-- Check that transaction status is correct
12:39:10  96  	IF in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
12:39:10  97  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
12:39:10  98  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
12:39:10  99  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
12:39:10 100  	END IF;
12:39:10 101  
12:39:10 102  	var_transaction_attempt_id := NULL;
12:39:10 103  	PROCS_TRANSACTION_CRU_V16.CREATE_TRANSACTION_ATTEMPT(
12:39:10 104  	  inout_transaction_attempt_id => var_transaction_attempt_id,
12:39:10 105  	  in_transaction_id	       => in_transaction_id,
12:39:10 106  	  in_external_status_code      => in_external_status_code,
12:39:10 107  	  in_external_status_message   => in_external_status_message,
12:39:10 108  	  in_created_by 	       => in_created_by,
12:39:10 109  	  in_external_transaction_id   => in_ext_transaction_id,
12:39:10 110  	  in_transaction_start_time    => var_transaction_create_date,
12:39:10 111  	  in_status_id		       => in_trans_attempt_status
12:39:10 112  	);
12:39:10 113  
12:39:10 114  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
12:39:10 115  	  in_transaction_id => in_transaction_id,
12:39:10 116  	  in_updated_by     => in_created_by
12:39:10 117  	);
12:39:10 118  
12:39:10 119  	out_transaction_attempt_id := var_transaction_attempt_id;
12:39:10 120  
12:39:10 121  EXCEPTION
12:39:10 122  WHEN BAD_TRANSACTION_ID THEN
12:39:10 123  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 124  	  SPROC_NAME, 'No such transaction');
12:39:10 125  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
12:39:10 126  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:10 127  	  SPROC_NAME, 'Bad transaction attempt status');
12:39:10 128  WHEN OTHERS THEN
12:39:10 129  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 130  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 131  END CREATE_TRANSACTION_ATTEMPT;
12:39:10 132  
12:39:10 133  /******************************************************************************/
12:39:10 134  
12:39:10 135  PROCEDURE UPDATE_TRANSACTION_STATUS (
12:39:10 136  /*
12:39:10 137  Throws exceptions:
12:39:10 138  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 139  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 140  */
12:39:10 141  	in_transaction_id	 IN NUMBER,
12:39:10 142  	in_updated_by		 IN VARCHAR2,
12:39:10 143  	in_transaction_status_id IN NUMBER
12:39:10 144  ) AS
12:39:10 145  -- VARIABLES
12:39:10 146  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
12:39:10 147  temp_transaction_id NUMBER;
12:39:10 148  
12:39:10 149  -- EXCEPTIONS
12:39:10 150  BAD_TRANSACTION_ID     EXCEPTION;
12:39:10 151  BAD_TRANSACTION_STATUS EXCEPTION;
12:39:10 152  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:10 153  BEGIN
12:39:10 154  
12:39:10 155  	-- Check that transaction exists
12:39:10 156  	BEGIN
12:39:10 157  	  SELECT
12:39:10 158  	    TRANSACTION.ID into temp_transaction_id
12:39:10 159  	  FROM
12:39:10 160  	    TRANSACTION
12:39:10 161  	  WHERE
12:39:10 162  	    TRANSACTION.ID = in_transaction_id;
12:39:10 163  	  EXCEPTION
12:39:10 164  	    WHEN OTHERS THEN
12:39:10 165  	      RAISE BAD_TRANSACTION_ID;
12:39:10 166  	END;
12:39:10 167  
12:39:10 168  	-- Check that transaction status is correct
12:39:10 169  	IF    in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_PENDING
12:39:10 170  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
12:39:10 171  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_CHARGEBACK
12:39:10 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_DECLINED THEN
12:39:10 173  	  RAISE BAD_TRANSACTION_STATUS;
12:39:10 174  	END IF;
12:39:10 175  
12:39:10 176  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
12:39:10 177  	  in_transaction_id	   => in_transaction_id,
12:39:10 178  	  in_updated_by 	   => in_updated_by,
12:39:10 179  	  in_transaction_status_id => in_transaction_status_id
12:39:10 180  	);
12:39:10 181  
12:39:10 182  EXCEPTION
12:39:10 183  WHEN BAD_TRANSACTION_ID THEN
12:39:10 184  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 185  	  SPROC_NAME, 'No such transaction');
12:39:10 186  WHEN BAD_TRANSACTION_STATUS THEN
12:39:10 187  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:10 188  	  SPROC_NAME, 'Bad transaction status');
12:39:10 189  WHEN OTHERS THEN
12:39:10 190  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 191  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 192  END UPDATE_TRANSACTION_STATUS;
12:39:10 193  
12:39:10 194  /******************************************************************************/
12:39:10 195  
12:39:10 196  PROCEDURE UPDATE_TRANSACTION_SETTLED (
12:39:10 197  /*
12:39:10 198  Throws exceptions:
12:39:10 199  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 200  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 201  */
12:39:10 202  	in_transaction_id	 IN NUMBER,
12:39:10 203  	in_updated_by		 IN VARCHAR2,
12:39:10 204  	in_is_settled		 IN NUMBER
12:39:10 205  ) AS
12:39:10 206  -- VARIABLES
12:39:10 207  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
12:39:10 208  temp_transaction_id NUMBER;
12:39:10 209  
12:39:10 210  -- EXCEPTIONS
12:39:10 211  BAD_TRANSACTION_ID     EXCEPTION;
12:39:10 212  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:10 213  BEGIN
12:39:10 214  
12:39:10 215  	-- Check that transaction exists
12:39:10 216  	BEGIN
12:39:10 217  	  SELECT
12:39:10 218  	    TRANSACTION.ID into temp_transaction_id
12:39:10 219  	  FROM
12:39:10 220  	    TRANSACTION
12:39:10 221  	  WHERE
12:39:10 222  	    TRANSACTION.ID = in_transaction_id;
12:39:10 223  	  EXCEPTION
12:39:10 224  	    WHEN OTHERS THEN
12:39:10 225  	      RAISE BAD_TRANSACTION_ID;
12:39:10 226  	END;
12:39:10 227  
12:39:10 228  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
12:39:10 229  	  in_transaction_id	   => in_transaction_id,
12:39:10 230  	  in_updated_by 	   => in_updated_by,
12:39:10 231  	  in_is_settled 	   => in_is_settled
12:39:10 232  	);
12:39:10 233  
12:39:10 234  EXCEPTION
12:39:10 235  WHEN BAD_TRANSACTION_ID THEN
12:39:10 236  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 237  	  SPROC_NAME, 'No such transaction');
12:39:10 238  WHEN OTHERS THEN
12:39:10 239  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 241  END UPDATE_TRANSACTION_SETTLED;
12:39:10 242  
12:39:10 243  /******************************************************************************/
12:39:10 244  
12:39:10 245  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
12:39:10 246  /*
12:39:10 247  Throws exceptions:
12:39:10 248  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 249  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 250  */
12:39:10 251  	in_transaction_attempt_id IN NUMBER,
12:39:10 252  	in_updated_by		  IN VARCHAR2
12:39:10 253  ) AS
12:39:10 254  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
12:39:10 255  -- VARIABLES
12:39:10 256  var_transaction_id NUMBER;
12:39:10 257  -- EXCEPTION
12:39:10 258  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
12:39:10 259  BEGIN
12:39:10 260  
12:39:10 261  	BEGIN
12:39:10 262  	  SELECT
12:39:10 263  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
12:39:10 264  	  FROM
12:39:10 265  	    TRANSACTION_ATTEMPT
12:39:10 266  	  WHERE
12:39:10 267  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
12:39:10 268  	  EXCEPTION
12:39:10 269  	    WHEN NO_DATA_FOUND THEN
12:39:10 270  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
12:39:10 271  	END;
12:39:10 272  
12:39:10 273  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
12:39:10 274  	  in_transaction_id => var_transaction_id,
12:39:10 275  	  in_updated_by     => in_updated_by
12:39:10 276  	);
12:39:10 277  
12:39:10 278  EXCEPTION
12:39:10 279  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
12:39:10 280  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 281  	  SPROC_NAME, 'No such transaction attempt');
12:39:10 282  WHEN OTHERS THEN
12:39:10 283  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 284  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 285  END UPDATE_TRNSCTN_ATTEMPT_TIME;
12:39:10 286  
12:39:10 287  /******************************************************************************/
12:39:10 288  
12:39:10 289  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
12:39:10 290  /*
12:39:10 291  Throws exceptions:
12:39:10 292  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 293  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 294  */
12:39:10 295  	in_transaction_attempt_id     IN NUMBER,
12:39:10 296  	in_transaction_attempt_status IN NUMBER
12:39:10 297  ) AS
12:39:10 298  -- VARIABLES
12:39:10 299  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
12:39:10 300  temp_transaction_attempt_id NUMBER;
12:39:10 301  
12:39:10 302  -- EXCEPTION
12:39:10 303  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
12:39:10 304  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
12:39:10 305  BEGIN
12:39:10 306  
12:39:10 307  	-- Check that transaction attempt exists
12:39:10 308  	BEGIN
12:39:10 309  	  SELECT
12:39:10 310  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
12:39:10 311  	  FROM
12:39:10 312  	    TRANSACTION_ATTEMPT
12:39:10 313  	  WHERE
12:39:10 314  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
12:39:10 315  	  EXCEPTION
12:39:10 316  	    WHEN NO_DATA_FOUND THEN
12:39:10 317  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
12:39:10 318  	END;
12:39:10 319  
12:39:10 320  	-- Check that transaction attempt is correct
12:39:10 321  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
12:39:10 322  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
12:39:10 323  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
12:39:10 324  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
12:39:10 325  	END IF;
12:39:10 326  
12:39:10 327  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ATTEMPT(
12:39:10 328  	  in_transaction_attempt_id => in_transaction_attempt_id,
12:39:10 329  	  in_status_id		    => in_transaction_attempt_status
12:39:10 330  	);
12:39:10 331  
12:39:10 332  EXCEPTION
12:39:10 333  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
12:39:10 334  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 335  	  SPROC_NAME, 'No such transaction attempt');
12:39:10 336  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
12:39:10 337  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:10 338  	  SPROC_NAME, 'Bad transaction attempt status');
12:39:10 339  WHEN OTHERS THEN
12:39:10 340  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 341  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 342  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
12:39:10 343  
12:39:10 344  /******************************************************************************/
12:39:10 345  
12:39:10 346  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
12:39:10 347  /*
12:39:10 348  Throws exceptions:
12:39:10 349  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 350  */
12:39:10 351  	in_transaction_id	      IN NUMBER,
12:39:10 352  	in_transaction_attempt_status IN NUMBER,
12:39:10 353  	out_result_set		      OUT SYS_REFCURSOR
12:39:10 354  ) AS
12:39:10 355  -- VARIABLES
12:39:10 356  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
12:39:10 357  temp_transaction_id NUMBER;
12:39:10 358  -- EXCEPTIONS
12:39:10 359  BAD_TRANSACTION_ID       EXCEPTION;
12:39:10 360  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
12:39:10 361  BEGIN
12:39:10 362  
12:39:10 363  	-- Check that transaction exists
12:39:10 364  	BEGIN
12:39:10 365  	  SELECT
12:39:10 366  	    TRANSACTION.ID into temp_transaction_id
12:39:10 367  	  FROM
12:39:10 368  	    TRANSACTION
12:39:10 369  	  WHERE
12:39:10 370  	    TRANSACTION.ID = in_transaction_id;
12:39:10 371  	  EXCEPTION
12:39:10 372  	    WHEN OTHERS THEN
12:39:10 373  	      RAISE BAD_TRANSACTION_ID;
12:39:10 374  	END;
12:39:10 375  
12:39:10 376  	-- Check that transaction attempt status is correct
12:39:10 377  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
12:39:10 378  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
12:39:10 379  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
12:39:10 380  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
12:39:10 381  	END IF;
12:39:10 382  
12:39:10 383  	OPEN out_result_set FOR
12:39:10 384  	SELECT
12:39:10 385  	  TRANSACTION_ATTEMPT.ID,
12:39:10 386  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
12:39:10 387  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
12:39:10 388  	  TRANSACTION_ATTEMPT.CREATE_DATE,
12:39:10 389  	  TRANSACTION_ATTEMPT.CREATED_BY,
12:39:10 390  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
12:39:10 391  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
12:39:10 392  	  TRANSACTION.TRANSACTION_AMOUNT,
12:39:10 393  	  TRANSACTION.ID as "TRANSACTION_ID",
12:39:10 394  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
12:39:10 395  	FROM
12:39:10 396  	  TRANSACTION_ATTEMPT
12:39:10 397  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
12:39:10 398  	WHERE
12:39:10 399  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
12:39:10 400  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
12:39:10 401  
12:39:10 402  EXCEPTION
12:39:10 403  WHEN BAD_TRANSACTION_ID THEN
12:39:10 404  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 405  	  SPROC_NAME, 'No such transaction');
12:39:10 406  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
12:39:10 407  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:10 408  	  SPROC_NAME, 'Bad transaction attempt status');
12:39:10 409  WHEN OTHERS THEN
12:39:10 410  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 412  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
12:39:10 413  
12:39:10 414  /******************************************************************************/
12:39:10 415  
12:39:10 416  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
12:39:10 417  /*
12:39:10 418  Throws exceptions:
12:39:10 419  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 420  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 421  */
12:39:10 422  	in_transaction_attempt_id IN NUMBER,
12:39:10 423  	in_ext_status_code	  IN VARCHAR2,
12:39:10 424  	in_ext_status_message	  IN VARCHAR2,
12:39:10 425  	in_ext_transaction_id	  IN VARCHAR2
12:39:10 426  ) AS
12:39:10 427  -- VARIABLES
12:39:10 428  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
12:39:10 429  temp_trans_attempt_count NUMBER;
12:39:10 430  -- EXCEPTIONS
12:39:10 431  BAD_ATTEMPT_ID EXCEPTION;
12:39:10 432  BEGIN
12:39:10 433  
12:39:10 434  	SELECT
12:39:10 435  	  COUNT(*) into temp_trans_attempt_count
12:39:10 436  	FROM
12:39:10 437  	  TRANSACTION_ATTEMPT
12:39:10 438  	WHERE
12:39:10 439  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
12:39:10 440  
12:39:10 441  	IF temp_trans_attempt_count = 0 THEN
12:39:10 442  	  RAISE BAD_ATTEMPT_ID;
12:39:10 443  	END IF;
12:39:10 444  
12:39:10 445  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ATTEMPT(
12:39:10 446  	  in_transaction_attempt_id  => in_transaction_attempt_id,
12:39:10 447  	  in_external_status_code    => in_ext_status_code,
12:39:10 448  	  in_external_status_message => in_ext_status_message,
12:39:10 449  	  in_external_transaction_id => in_ext_transaction_id
12:39:10 450  	);
12:39:10 451  
12:39:10 452  EXCEPTION
12:39:10 453  WHEN BAD_ATTEMPT_ID THEN
12:39:10 454  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 455  	  SPROC_NAME, 'No such attempt');
12:39:10 456  WHEN OTHERS THEN
12:39:10 457  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 458  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 459  END UPDATE_TRANSACTION_ATTEMPT_INF;
12:39:10 460  
12:39:10 461  /******************************************************************************/
12:39:10 462  
12:39:10 463  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
12:39:10 464  /*
12:39:10 465  Throws exceptions:
12:39:10 466  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 467  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 468  */
12:39:10 469  	in_transaction_id IN  NUMBER,
12:39:10 470  	out_attempts_num  OUT NUMBER
12:39:10 471  ) AS
12:39:10 472  -- VARIABLES
12:39:10 473  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
12:39:10 474  temp_transaction_count NUMBER;
12:39:10 475  
12:39:10 476  -- EXCEPTIONS
12:39:10 477  BAD_TRANSACTION_ID EXCEPTION;
12:39:10 478  BEGIN
12:39:10 479  
12:39:10 480  	SELECT
12:39:10 481  	  COUNT(*) into temp_transaction_count
12:39:10 482  	FROM
12:39:10 483  	  TRANSACTION
12:39:10 484  	WHERE
12:39:10 485  	  TRANSACTION.ID = in_transaction_id;
12:39:10 486  
12:39:10 487  	IF temp_transaction_count = 0 THEN
12:39:10 488  	  RAISE BAD_TRANSACTION_ID;
12:39:10 489  	END IF;
12:39:10 490  
12:39:10 491  	SELECT
12:39:10 492  	  COUNT(*) into out_attempts_num
12:39:10 493  	FROM
12:39:10 494  	  TRANSACTION_ATTEMPT
12:39:10 495  	WHERE
12:39:10 496  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
12:39:10 497  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED;
12:39:10 498  
12:39:10 499  EXCEPTION
12:39:10 500  WHEN BAD_TRANSACTION_ID THEN
12:39:10 501  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 502  	  SPROC_NAME, 'No such transaction');
12:39:10 503  WHEN OTHERS THEN
12:39:10 504  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 505  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 506  END GET_FAILED_ATTEMPTS_NUMBER;
12:39:10 507  /******************************************************************************/
12:39:10 508  
12:39:10 509  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
12:39:10 510  /*
12:39:10 511  Throws exceptions:
12:39:10 512  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 513  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 514  */
12:39:10 515  	in_transaction_id IN  NUMBER,
12:39:10 516  	out_is_successfull  OUT NUMBER
12:39:10 517  ) AS
12:39:10 518  -- VARIABLES
12:39:10 519  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
12:39:10 520  temp_transaction_count NUMBER;
12:39:10 521  
12:39:10 522  -- EXCEPTIONS
12:39:10 523  BAD_TRANSACTION_ID EXCEPTION;
12:39:10 524  BEGIN
12:39:10 525  
12:39:10 526  	SELECT
12:39:10 527  	  COUNT(*) into temp_transaction_count
12:39:10 528  	FROM
12:39:10 529  	  TRANSACTION
12:39:10 530  	WHERE
12:39:10 531  	  TRANSACTION.ID = in_transaction_id;
12:39:10 532  
12:39:10 533  	IF temp_transaction_count = 0 THEN
12:39:10 534  	  RAISE BAD_TRANSACTION_ID;
12:39:10 535  	END IF;
12:39:10 536  
12:39:10 537  	SELECT
12:39:10 538  	  COUNT(*) into out_is_successfull
12:39:10 539  	FROM
12:39:10 540  	  TRANSACTION_ATTEMPT
12:39:10 541  	WHERE
12:39:10 542  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
12:39:10 543  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS;
12:39:10 544  
12:39:10 545  EXCEPTION
12:39:10 546  WHEN BAD_TRANSACTION_ID THEN
12:39:10 547  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 548  	  SPROC_NAME, 'No such transaction');
12:39:10 549  WHEN OTHERS THEN
12:39:10 550  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 551  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 552  END IS_TRANSACTION_SUCCESSFULL;
12:39:10 553  /******************************************************************************/
12:39:10 554  
12:39:10 555  PROCEDURE GET_TRANSACTION_AMOUNT (
12:39:10 556  /*
12:39:10 557  Throws exceptions:
12:39:10 558  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 559  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 560  */
12:39:10 561  	in_transaction_id      IN  NUMBER,
12:39:10 562  	out_transaction_amount OUT NUMBER
12:39:10 563  ) AS
12:39:10 564  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
12:39:10 565  BEGIN
12:39:10 566  
12:39:10 567  	SELECT
12:39:10 568  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
12:39:10 569  	FROM
12:39:10 570  	  TRANSACTION
12:39:10 571  	WHERE
12:39:10 572  	  TRANSACTION.ID = in_transaction_id;
12:39:10 573  
12:39:10 574  EXCEPTION
12:39:10 575  WHEN NO_DATA_FOUND THEN
12:39:10 576  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 577  	  SPROC_NAME, 'No such transaction');
12:39:10 578  WHEN OTHERS THEN
12:39:10 579  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 580  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 581  END GET_TRANSACTION_AMOUNT;
12:39:10 582  
12:39:10 583  /******************************************************************************/
12:39:10 584  
12:39:10 585  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
12:39:10 586  /*
12:39:10 587  Throws exceptions:
12:39:10 588  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 589  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 590  */
12:39:10 591  	in_charge_id   IN  NUMBER,
12:39:10 592  	out_result_set OUT SYS_REFCURSOR
12:39:10 593  ) AS
12:39:10 594  -- VARIABLES
12:39:10 595  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
12:39:10 596  temp_charge_id NUMBER;
12:39:10 597  -- EXCEPTIONS
12:39:10 598  BAD_CHARGE_ID EXCEPTION;
12:39:10 599  BEGIN
12:39:10 600  
12:39:10 601  	BEGIN
12:39:10 602  	  SELECT
12:39:10 603  	    CHARGE.ID into temp_charge_id
12:39:10 604  	  FROM
12:39:10 605  	    CHARGE
12:39:10 606  	  WHERE
12:39:10 607  	    CHARGE.ID = in_charge_id;
12:39:10 608  	  EXCEPTION
12:39:10 609  	    WHEN NO_DATA_FOUND THEN
12:39:10 610  	      RAISE BAD_CHARGE_ID;
12:39:10 611  	END;
12:39:10 612  
12:39:10 613  	OPEN out_result_set FOR
12:39:10 614  	SELECT DISTINCT
12:39:10 615  	  TRANSACTION.ID,
12:39:10 616  	  TRANSACTION.TRANSACTION_STATUS_ID,
12:39:10 617  	  TRANSACTION.CREATE_DATE,
12:39:10 618  	  TRANSACTION.TRANSACTION_AMOUNT,
12:39:10 619  	  TRANSACTION.IS_REFUND,
12:39:10 620  	  TRANSACTION.ORDER_ID
12:39:10 621  	FROM
12:39:10 622  	  CHARGE INNER JOIN TRANSACTION ON
12:39:10 623  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
12:39:10 624  	WHERE
12:39:10 625  	  CHARGE.ID = in_charge_id;
12:39:10 626  
12:39:10 627  EXCEPTION
12:39:10 628  WHEN BAD_CHARGE_ID THEN
12:39:10 629  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 630  	  SPROC_NAME, 'No such charge');
12:39:10 631  WHEN OTHERS THEN
12:39:10 632  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 633  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 634  END GET_TRANSACTIONS_BY_CHARGE_ID;
12:39:10 635  /******************************************************************************/
12:39:10 636  
12:39:10 637  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
12:39:10 638  /*
12:39:10 639  Throws exceptions:
12:39:10 640  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 641  */
12:39:10 642  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
12:39:10 643  	out_result_set OUT SYS_REFCURSOR
12:39:10 644  ) AS
12:39:10 645  -- VARIABLES
12:39:10 646  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
12:39:10 647  BEGIN
12:39:10 648  	OPEN out_result_set FOR
12:39:10 649  	SELECT DISTINCT
12:39:10 650  	  TRANSACTION.ID
12:39:10 651  	FROM
12:39:10 652  	  TRANSACTION
12:39:10 653  	WHERE
12:39:10 654  	  TRANSACTION.ORDER_ID = in_order_id;
12:39:10 655  
12:39:10 656  EXCEPTION
12:39:10 657  WHEN OTHERS THEN
12:39:10 658  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 659  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 660  END GET_TRANSACTION_BY_ORDER_ID;
12:39:10 661  /******************************************************************************/
12:39:10 662  
12:39:10 663  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
12:39:10 664  /*
12:39:10 665  Throws exceptions:
12:39:10 666  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 667  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 668  */
12:39:10 669  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
12:39:10 670  	out_result_set OUT SYS_REFCURSOR
12:39:10 671  ) AS
12:39:10 672  -- VARIABLES
12:39:10 673  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
12:39:10 674  temp_order_id TRANSACTION.ORDER_ID%TYPE;
12:39:10 675  -- EXCEPTIONS
12:39:10 676  BAD_ORDER_ID EXCEPTION;
12:39:10 677  BEGIN
12:39:10 678  
12:39:10 679  	--TODO BOO, REMOVE ME
12:39:10 680  	BEGIN
12:39:10 681  	  SELECT
12:39:10 682  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
12:39:10 683  	  FROM
12:39:10 684  	    TRANSACTION
12:39:10 685  	  WHERE
12:39:10 686  	    TRANSACTION.ORDER_ID = in_order_id;
12:39:10 687  	  EXCEPTION
12:39:10 688  	    WHEN NO_DATA_FOUND THEN
12:39:10 689  	      RAISE BAD_ORDER_ID;
12:39:10 690  	END;
12:39:10 691  
12:39:10 692  	OPEN out_result_set FOR
12:39:10 693  	SELECT c.ID CHARGE_ID,
12:39:10 694  	  c.CHARGE_AMOUNT,
12:39:10 695  	  c.CHARGE_STATUS_ID,
12:39:10 696  	  c.INSTRUMENT_ID,
12:39:10 697  	  c.INSTRUMENT_TYPE_ID,
12:39:10 698  	  c.INVOICE_ID,
12:39:10 699  	  t.ID TRANSACTION_ID,
12:39:10 700  	  t.IS_REFUND,
12:39:10 701  	  t.IS_SETTLED,
12:39:10 702  	  t.ORDER_ID,
12:39:10 703  	  t.TRANSACTION_AMOUNT,
12:39:10 704  	  t.TRANSACTION_STATUS_ID,
12:39:10 705  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
12:39:10 706  	  t.CREATED_BY TRANSACTION_CREATED_BY,
12:39:10 707  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
12:39:10 708  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
12:39:10 709  	FROM CHARGE c
12:39:10 710  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
12:39:10 711  	WHERE TRANSACTION_ID IN (
12:39:10 712  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
12:39:10 713  	);
12:39:10 714  
12:39:10 715  EXCEPTION
12:39:10 716  WHEN BAD_ORDER_ID THEN
12:39:10 717  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 718  	  SPROC_NAME, 'No such order');
12:39:10 719  WHEN OTHERS THEN
12:39:10 720  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 721  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 722  END GET_TRANSACTIONS_BY_ORDER_ID;
12:39:10 723  /******************************************************************************/
12:39:10 724  
12:39:10 725  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
12:39:10 726  /*
12:39:10 727  Throws exceptions:
12:39:10 728  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 729  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 730  */
12:39:10 731  	in_invoice_id	IN  NUMBER,
12:39:10 732  	out_result_set OUT SYS_REFCURSOR
12:39:10 733  ) AS
12:39:10 734  -- VARIABLES
12:39:10 735  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
12:39:10 736  temp_invoice_id NUMBER;
12:39:10 737  -- EXCEPTIONS
12:39:10 738  BAD_INVOICE_ID EXCEPTION;
12:39:10 739  BEGIN
12:39:10 740  
12:39:10 741  	BEGIN
12:39:10 742  	  SELECT
12:39:10 743  	    INVOICE.ID into temp_invoice_id
12:39:10 744  	  FROM
12:39:10 745  	    INVOICE
12:39:10 746  	  WHERE
12:39:10 747  	    INVOICE.ID = in_invoice_id;
12:39:10 748  	  EXCEPTION
12:39:10 749  	    WHEN NO_DATA_FOUND THEN
12:39:10 750  	      RAISE BAD_INVOICE_ID;
12:39:10 751  	END;
12:39:10 752  
12:39:10 753  	OPEN out_result_set FOR
12:39:10 754  	SELECT DISTINCT
12:39:10 755  	  TRANSACTION.ID,
12:39:10 756  	  TRANSACTION.TRANSACTION_STATUS_ID,
12:39:10 757  	  TRANSACTION.CREATE_DATE,
12:39:10 758  	  TRANSACTION.UPDATE_DATE,
12:39:10 759  	  TRANSACTION.ORDER_ID,
12:39:10 760  	  TRANSACTION.TRANSACTION_AMOUNT
12:39:10 761  	FROM
12:39:10 762  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
12:39:10 763  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
12:39:10 764  	WHERE
12:39:10 765  	  INVOICE.ID = in_invoice_id
12:39:10 766  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V16.TRUE
12:39:10 767  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
12:39:10 768  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_CLOSED;
12:39:10 769  
12:39:10 770  EXCEPTION
12:39:10 771  WHEN BAD_INVOICE_ID THEN
12:39:10 772  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 773  	  SPROC_NAME, 'No such invoice');
12:39:10 774  WHEN OTHERS THEN
12:39:10 775  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 776  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 777  END GET_CLOSED_REFUNDS_BY_INVOICE;
12:39:10 778  
12:39:10 779  /******************************************************************************/
12:39:10 780  
12:39:10 781  PROCEDURE GET_TRANSACTION_ATTEMPTS (
12:39:10 782  /*
12:39:10 783  Throws exceptions:
12:39:10 784  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 785  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 786  */
12:39:10 787  	in_transaction_id IN  NUMBER,
12:39:10 788  	out_result_set	  OUT SYS_REFCURSOR
12:39:10 789  ) AS
12:39:10 790  -- VARIABLES
12:39:10 791  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
12:39:10 792  temp_transaction_id NUMBER;
12:39:10 793  -- EXCEPTIONS
12:39:10 794  BAD_TRANSACTION_ID EXCEPTION;
12:39:10 795  BEGIN
12:39:10 796  
12:39:10 797  	BEGIN
12:39:10 798  	  SELECT
12:39:10 799  	    TRANSACTION.ID into temp_transaction_id
12:39:10 800  	  FROM
12:39:10 801  	    TRANSACTION
12:39:10 802  	  WHERE
12:39:10 803  	    TRANSACTION.ID = in_transaction_id;
12:39:10 804  	  EXCEPTION
12:39:10 805  	    WHEN NO_DATA_FOUND THEN
12:39:10 806  	      RAISE BAD_TRANSACTION_ID;
12:39:10 807  	END;
12:39:10 808  
12:39:10 809  	OPEN out_result_set FOR
12:39:10 810  	SELECT
12:39:10 811  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
12:39:10 812  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
12:39:10 813  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
12:39:10 814  	  TRANSACTION_ATTEMPT.CREATE_DATE,
12:39:10 815  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
12:39:10 816  	FROM
12:39:10 817  	  TRANSACTION_ATTEMPT
12:39:10 818  	WHERE
12:39:10 819  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
12:39:10 820  
12:39:10 821  EXCEPTION
12:39:10 822  WHEN BAD_TRANSACTION_ID THEN
12:39:10 823  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 824  	  SPROC_NAME, 'No such transaction');
12:39:10 825  WHEN OTHERS THEN
12:39:10 826  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 827  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 828  END GET_TRANSACTION_ATTEMPTS;
12:39:10 829  
12:39:10 830  /******************************************************************************/
12:39:10 831  
12:39:10 832  PROCEDURE RESERVE_TRANSACTION_ID (
12:39:10 833  /*
12:39:10 834  Throws exceptions:
12:39:10 835  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 836  */
12:39:10 837  	out_transaction_id OUT NUMBER
12:39:10 838  ) AS
12:39:10 839  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
12:39:10 840  BEGIN
12:39:10 841  	SELECT
12:39:10 842  	  TRN_ID_SEQ.nextVal into out_transaction_id
12:39:10 843  	FROM DUAL;
12:39:10 844  EXCEPTION
12:39:10 845  WHEN OTHERS THEN
12:39:10 846  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 847  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 848  END RESERVE_TRANSACTION_ID;
12:39:10 849  
12:39:10 850  /******************************************************************************/
12:39:10 851  
12:39:10 852  PROCEDURE GET_TRANSACTION_BY_ID (
12:39:10 853  /*
12:39:10 854  Throws exceptions:
12:39:10 855  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 856  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 857  */
12:39:10 858  	in_transaction_id IN NUMBER,
12:39:10 859  	out_result_set	  OUT SYS_REFCURSOR
12:39:10 860  ) AS
12:39:10 861  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
12:39:10 862  -- VARIABLES
12:39:10 863  temp_transaction_id NUMBER;
12:39:10 864  -- EXCPTIONS
12:39:10 865  BAD_TRANSACTION_ID EXCEPTION;
12:39:10 866  BEGIN
12:39:10 867  	BEGIN
12:39:10 868  	  SELECT
12:39:10 869  	    TRANSACTION.ID into temp_transaction_id
12:39:10 870  	  FROM
12:39:10 871  	    TRANSACTION
12:39:10 872  	  WHERE
12:39:10 873  	    TRANSACTION.ID = in_transaction_id;
12:39:10 874  	  EXCEPTION
12:39:10 875  	    WHEN NO_DATA_FOUND THEN
12:39:10 876  	      RAISE BAD_TRANSACTION_ID;
12:39:10 877  	END;
12:39:10 878  
12:39:10 879  	PROCS_TRANSACTION_CRU_V16.READ_TRANSACTION(
12:39:10 880  	  in_transaction_id => in_transaction_id,
12:39:10 881  	  out_result_set    => out_result_set
12:39:10 882  	);
12:39:10 883  
12:39:10 884  EXCEPTION
12:39:10 885  WHEN NO_DATA_FOUND THEN
12:39:10 886  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 887  	  SPROC_NAME, 'No such transaction');
12:39:10 888  WHEN OTHERS THEN
12:39:10 889  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 890  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 891  END GET_TRANSACTION_BY_ID;
12:39:10 892  
12:39:10 893  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
12:39:10 894  /*
12:39:10 895  Throws exceptions:
12:39:10 896  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 897  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
12:39:10 898  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 899  */
12:39:10 900  	in_transaction_id IN TRANSACTION.ID%TYPE,
12:39:10 901  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
12:39:10 902  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
12:39:10 903  ) AS
12:39:10 904  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
12:39:10 905  -- VARIABLES
12:39:10 906  temp_transaction_id TRANSACTION.ID%TYPE;
12:39:10 907  -- EXCEPTIONS
12:39:10 908  BAD_TRANSACTION_ID   EXCEPTION;
12:39:10 909  ORDER_ID_IS_NOT_NULL EXCEPTION;
12:39:10 910  CRU_UNKNOWN_ERROR    EXCEPTION;
12:39:10 911  EXCEPTION_MESSAGE VARCHAR2(1024);
12:39:10 912  BEGIN
12:39:10 913  	BEGIN
12:39:10 914  	  SELECT
12:39:10 915  	    TRANSACTION.ID into temp_transaction_id
12:39:10 916  	  FROM
12:39:10 917  	    TRANSACTION
12:39:10 918  	  WHERE
12:39:10 919  	    TRANSACTION.ID = in_transaction_id;
12:39:10 920  	  EXCEPTION
12:39:10 921  	    WHEN NO_DATA_FOUND THEN
12:39:10 922  	      RAISE BAD_TRANSACTION_ID;
12:39:10 923  	END;
12:39:10 924  
12:39:10 925  	BEGIN
12:39:10 926  	  PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ORDER_ID(
12:39:10 927  	    in_transaction_id => in_transaction_id,
12:39:10 928  	    in_order_id       => in_order_id,
12:39:10 929  	    in_updated_by     => in_updated_by
12:39:10 930  	  );
12:39:10 931  	  EXCEPTION
12:39:10 932  	    WHEN OTHERS THEN
12:39:10 933  	      IF SQLCODE = APP_EXCEPTION_CODES_V16.NOT_FOUND THEN
12:39:10 934  		RAISE ORDER_ID_IS_NOT_NULL;
12:39:10 935  	      ELSE
12:39:10 936  		EXCEPTION_MESSAGE := SQLERRM;
12:39:10 937  		RAISE CRU_UNKNOWN_ERROR;
12:39:10 938  	      END IF;
12:39:10 939  	END;
12:39:10 940  
12:39:10 941  EXCEPTION
12:39:10 942  WHEN BAD_TRANSACTION_ID THEN
12:39:10 943  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 944  	  SPROC_NAME, 'No such transaction');
12:39:10 945  WHEN ORDER_ID_IS_NOT_NULL THEN
12:39:10 946  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:10 947  	  SPROC_NAME, 'Order id is not null');
12:39:10 948  WHEN CRU_UNKNOWN_ERROR THEN
12:39:10 949  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:10 950  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
12:39:10 951  WHEN OTHERS THEN
12:39:10 952  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 953  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 954  END UPDATE_TRANSACTION_ORDER_ID;
12:39:10 955  
12:39:10 956  /******************************************************************************/
12:39:10 957  
12:39:10 958  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
12:39:10 959  	in_transaction_id IN NUMBER
12:39:10 960  ) RETURN NUMBER AS
12:39:10 961  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
12:39:10 962  -- Variables
12:39:10 963  var_tax_amount NUMBER(10,2);
12:39:10 964  BEGIN
12:39:10 965  
12:39:10 966  	SELECT
12:39:10 967  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
12:39:10 968  	FROM
12:39:10 969  	  LINE_ITEM LI
12:39:10 970  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
12:39:10 971  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
12:39:10 972  	WHERE
12:39:10 973  	  CH.TRANSACTION_ID = in_transaction_id;
12:39:10 974  
12:39:10 975  	IF var_tax_amount IS NULL THEN
12:39:10 976  	  var_tax_amount := 0;
12:39:10 977  	END IF;
12:39:10 978  
12:39:10 979  	RETURN var_tax_amount;
12:39:10 980  
12:39:10 981  END GET_TRANSACTION_TAX_AMOUNT;
12:39:10 982  
12:39:10 983  /******************************************************************************/
12:39:10 984  
12:39:10 985  FUNCTION GET_TRANSACTION_INTRL_TAXES (
12:39:10 986  	in_transaction_id IN NUMBER
12:39:10 987  ) RETURN NUMBER AS
12:39:10 988  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
12:39:10 989  -- Variables
12:39:10 990  var_intrl_tax_amount NUMBER(10, 2);
12:39:10 991  BEGIN
12:39:10 992  
12:39:10 993  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
12:39:10 994  	FROM
12:39:10 995  	  LINE_ITEM LI
12:39:10 996  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
12:39:10 997  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
12:39:10 998  	  INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
12:39:10 999  	WHERE
12:39:10 1000  	   CH.TRANSACTION_ID = in_transaction_id
12:39:10 1001  	   AND T.TAX_TYPE_ID IN (
12:39:10 1002  	     SELECT GLOBAL_ENUMS_V16.TAX_TYPE_VAT FROM DUAL
12:39:10 1003  	   );
12:39:10 1004  
12:39:10 1005  	 IF var_intrl_tax_amount IS NULL THEN
12:39:10 1006  	   var_intrl_tax_amount := 0;
12:39:10 1007  	 END IF;
12:39:10 1008  
12:39:10 1009  	 RETURN var_intrl_tax_amount;
12:39:10 1010  
12:39:10 1011  END GET_TRANSACTION_INTRL_TAXES;
12:39:10 1012  
12:39:10 1013  /******************************************************************************/
12:39:10 1014  -- norlov: #38796
12:39:10 1015  PROCEDURE GET_TRANSACTIONS (
12:39:10 1016  /*
12:39:10 1017  Throws exceptions:
12:39:10 1018  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 1019  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 1020  */
12:39:10 1021  	 in_group_id	       IN  NUMBER,
12:39:10 1022  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
12:39:10 1023  	 in_subscription_id    IN NUMBER DEFAULT NULL,
12:39:10 1024  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
12:39:10 1025  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
12:39:10 1026  	 in_transaction_status IN NUMBER DEFAULT NULL,
12:39:10 1027  	 out_result_set        OUT SYS_REFCURSOR
12:39:10 1028  ) AS
12:39:10 1029  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
12:39:10 1030  -- VARIABLES
12:39:10 1031  var_account_id ACCOUNT.ID%TYPE;
12:39:10 1032  statement VARCHAR2(2000);
12:39:10 1033  -- EXCEPTIONS
12:39:10 1034  BAD_GROUP_ID   EXCEPTION;
12:39:10 1035  BEGIN
12:39:10 1036  	-- check group id
12:39:10 1037  	BEGIN
12:39:10 1038  	   SELECT
12:39:10 1039  	     ACCOUNT.ID into var_account_id
12:39:10 1040  	   FROM
12:39:10 1041  	     ACCOUNT
12:39:10 1042  	   WHERE
12:39:10 1043  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:10 1044  	   EXCEPTION
12:39:10 1045  	     WHEN NO_DATA_FOUND THEN
12:39:10 1046  	       RAISE BAD_GROUP_ID;
12:39:10 1047  	 END;
12:39:10 1048  
12:39:10 1049  	 OPEN out_result_set FOR
12:39:10 1050  	 SELECT
12:39:10 1051  	   TRANSACTION.ID,
12:39:10 1052  	   TRANSACTION.TRANSACTION_STATUS_ID,
12:39:10 1053  	   TRANSACTION.TRANSACTION_AMOUNT,
12:39:10 1054  	   TRANSACTION.CREATE_DATE,
12:39:10 1055  	   TRANSACTION.CREATED_BY,
12:39:10 1056  	   TRANSACTION.IS_REFUND,
12:39:10 1057  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
12:39:10 1058  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
12:39:10 1059  	 FROM
12:39:10 1060  	   TRANSACTION
12:39:10 1061  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
12:39:10 1062  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
12:39:10 1063  	 WHERE
12:39:10 1064  	   -- Filter by invoice ID
12:39:10 1065  	   (
12:39:10 1066  	     INVOICE.ID IN (
12:39:10 1067  	       -- Gift certificate invoices
12:39:10 1068  	       SELECT
12:39:10 1069  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
12:39:10 1070  	       FROM
12:39:10 1071  		 GIFT_CERTIFICATE
12:39:10 1072  	       WHERE
12:39:10 1073  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
12:39:10 1074  		 -- If subscription_id is set then return nothing
12:39:10 1075  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
12:39:10 1076  	     )
12:39:10 1077  	     OR
12:39:10 1078  	     INVOICE.ID IN (
12:39:10 1079  	       SELECT
12:39:10 1080  		 LICENSE.INVOICE_ID
12:39:10 1081  	       FROM
12:39:10 1082  		 LICENSE
12:39:10 1083  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:10 1084  	       WHERE
12:39:10 1085  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:10 1086  		 -- Filter by subscription id
12:39:10 1087  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
12:39:10 1088  	     )
12:39:10 1089  	   )
12:39:10 1090  	   -- Filter by invoice id
12:39:10 1091  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
12:39:10 1092  	   -- Filter by start date
12:39:10 1093  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
12:39:10 1094  	   -- Filter by end date
12:39:10 1095  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
12:39:10 1096  	   -- Filter by transaction status
12:39:10 1097  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
12:39:10 1098  
12:39:10 1099  /*
12:39:10 1100  
12:39:10 1101  statement :=  'select distinct '||CHR(10)
12:39:10 1102  || ' TRANSACTION.ID,'||CHR(10)
12:39:10 1103  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
12:39:10 1104  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
12:39:10 1105  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
12:39:10 1106  || ' TRANSACTION.CREATED_BY, '||CHR(10)
12:39:10 1107  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
12:39:10 1108  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
12:39:10 1109  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
12:39:10 1110  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
12:39:10 1111  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
12:39:10 1112  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
12:39:10 1113  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
12:39:10 1114  
12:39:10 1115  IF (in_transaction_status IS NOT NULL) THEN
12:39:10 1116  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
12:39:10 1117  END IF;
12:39:10 1118  
12:39:10 1119  IF (in_invoice_id IS NOT NULL) THEN
12:39:10 1120  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
12:39:10 1121  END IF;
12:39:10 1122  
12:39:10 1123  IF (in_subscription_id IS NOT NULL) THEN
12:39:10 1124  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
12:39:10 1125  END IF;
12:39:10 1126  
12:39:10 1127  IF (in_start_date IS NOT NULL) THEN
12:39:10 1128  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
12:39:10 1129  END IF;
12:39:10 1130  
12:39:10 1131  IF (in_end_date IS NOT NULL) THEN
12:39:10 1132  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
12:39:10 1133  END IF;
12:39:10 1134  dbms_output.put_line(statement);
12:39:10 1135  OPEN out_result_set FOR statement;
12:39:10 1136  
12:39:10 1137  */
12:39:10 1138  
12:39:10 1139  EXCEPTION
12:39:10 1140  WHEN BAD_GROUP_ID THEN
12:39:10 1141  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 1142  	   SPROC_NAME, 'No such group');
12:39:10 1143  WHEN OTHERS THEN
12:39:10 1144  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 1145  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 1146  END GET_TRANSACTIONS;
12:39:10 1147  
12:39:10 1148  FUNCTION IS_TRANSACTION_COLLECTED (
12:39:10 1149  /*
12:39:10 1150  Throws:
12:39:10 1151  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 1152  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 1153  Returns:
12:39:10 1154  GLOBAL_CONST.TRUE if transaction collected,
12:39:10 1155  GLOBAL_CONST.FALSE else
12:39:10 1156  */
12:39:10 1157  	 in_transaction_id IN NUMBER
12:39:10 1158  ) RETURN NUMBER AS
12:39:10 1159  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
12:39:10 1160  -- VARIABLES
12:39:10 1161  temp_transaction_id     NUMBER;
12:39:10 1162  var_success_attemps_num NUMBER;
12:39:10 1163  -- EXCEPTIONS
12:39:10 1164  BAD_TRANSACTION_ID EXCEPTION;
12:39:10 1165  BEGIN
12:39:10 1166  
12:39:10 1167  	 BEGIN
12:39:10 1168  	   SELECT
12:39:10 1169  	     TRANSACTION.ID into temp_transaction_id
12:39:10 1170  	   FROM
12:39:10 1171  	     TRANSACTION
12:39:10 1172  	   WHERE
12:39:10 1173  	     TRANSACTION.ID = in_transaction_id;
12:39:10 1174  	   EXCEPTION
12:39:10 1175  	     WHEN NO_DATA_FOUND THEN
12:39:10 1176  	       RAISE BAD_TRANSACTION_ID;
12:39:10 1177  	 END;
12:39:10 1178  
12:39:10 1179  	 SELECT
12:39:10 1180  	   COUNT(*) into var_success_attemps_num
12:39:10 1181  	 FROM
12:39:10 1182  	   TRANSACTION_ATTEMPT
12:39:10 1183  	 WHERE
12:39:10 1184  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
12:39:10 1185  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS FROM DUAL );
12:39:10 1186  
12:39:10 1187  	 IF var_success_attemps_num > 0 THEN
12:39:10 1188  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:10 1189  	 ELSE
12:39:10 1190  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:10 1191  	 END IF;
12:39:10 1192  
12:39:10 1193  EXCEPTION
12:39:10 1194  WHEN BAD_TRANSACTION_ID THEN
12:39:10 1195  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 1196  	   SPROC_NAME, 'No such transaction');
12:39:10 1197  WHEN OTHERS THEN
12:39:10 1198  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 1199  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 1200  END IS_TRANSACTION_COLLECTED;
12:39:10 1201  
12:39:10 1202  
12:39:10 1203  /******************************************************************************/
12:39:10 1204  PROCEDURE GET_ATTEMPT_NUMBER (
12:39:10 1205  /*
12:39:10 1206  Throws exceptions:
12:39:10 1207  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 1208  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 1209  */
12:39:10 1210  	 in_charge_id	in  number,
12:39:10 1211  	 out_attempt_count OUT NUMBER
12:39:10 1212  ) AS
12:39:10 1213  -- VARIABLES
12:39:10 1214  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ATTEMPT_NUMBER';
12:39:10 1215  temp_transaction_id NUMBER;
12:39:10 1216  -- EXCEPTIONS
12:39:10 1217  BAD_CHARGE_ID EXCEPTION;
12:39:10 1218  BEGIN
12:39:10 1219  
12:39:10 1220  	 BEGIN
12:39:10 1221  	   SELECT
12:39:10 1222  	     TRANSACTION_ID into temp_transaction_id
12:39:10 1223  	   FROM
12:39:10 1224  	     CHARGE
12:39:10 1225  	   WHERE
12:39:10 1226  	     CHARGE.ID = in_charge_id;
12:39:10 1227  	   EXCEPTION
12:39:10 1228  	     WHEN NO_DATA_FOUND THEN
12:39:10 1229  	       RAISE BAD_CHARGE_ID;
12:39:10 1230  	 END;
12:39:10 1231  
12:39:10 1232  	 select
12:39:10 1233  	   count(1)
12:39:10 1234  	 into
12:39:10 1235  	   out_attempt_count
12:39:10 1236  	 from
12:39:10 1237  	   transaction tr
12:39:10 1238  	 inner join
12:39:10 1239  	   transaction_attempt ta
12:39:10 1240  	 on (tr.id = ta.transaction_id)
12:39:10 1241  	 where
12:39:10 1242  	   tr.ID = temp_transaction_id;
12:39:10 1243  
12:39:10 1244  	 out_attempt_count := out_attempt_count + 1;
12:39:10 1245  
12:39:10 1246  EXCEPTION
12:39:10 1247  WHEN BAD_CHARGE_ID THEN
12:39:10 1248  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 1249  	   SPROC_NAME, 'No such charge');
12:39:10 1250  WHEN OTHERS THEN
12:39:10 1251  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 1252  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 1253  end GET_ATTEMPT_NUMBER;
12:39:10 1254  /******************************************************************************/
12:39:10 1255  
12:39:10 1256  END PROCS_TRANSACTION_V16;
12:39:10 1257  .
12:39:10 SQL> /

Package body created.

Elapsed: 00:00:00.37
12:39:10 SQL> 
12:39:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V16" AS
12:39:10   2  
12:39:10   3  PROCEDURE CREATE_LICENSE(
12:39:10   4  /*
12:39:10   5  Throws exceptions:
12:39:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10   8  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:10   9  */
12:39:10  10  	in_status_id		    IN NUMBER,
12:39:10  11  	in_needs_entitlements	    IN NUMBER,
12:39:10  12  	in_start_date		    IN DATE,
12:39:10  13  	in_end_date		    IN DATE,
12:39:10  14  	in_offer_id		    IN NUMBER,
12:39:10  15  	in_subscription_id	    IN NUMBER,
12:39:10  16  	in_invoice_id		    IN NUMBER,
12:39:10  17  	in_created_by		    IN VARCHAR2,
12:39:10  18  	in_is_extension 	    IN NUMBER,
12:39:10  19  	in_current_offer_index	    IN NUMBER,
12:39:10  20  	in_current_offer_recurr_num IN NUMBER,
12:39:10  21  	out_license_id		    OUT NUMBER
12:39:10  22  ) AS
12:39:10  23  -- VARIABLES
12:39:10  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
12:39:10  25  temp_offer_id	   NUMBER;
12:39:10  26  temp_subscription_id NUMBER;
12:39:10  27  temp_invoice_id	   NUMBER;
12:39:10  28  
12:39:10  29  var_new_license_id NUMBER;
12:39:10  30  var_offer_duration VARCHAR2(30);
12:39:10  31  
12:39:10  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
12:39:10  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
12:39:10  34  var_offer_years	    NUMBER;
12:39:10  35  var_offer_months	    NUMBER;
12:39:10  36  var_offer_days	    NUMBER;
12:39:10  37  
12:39:10  38  -- EXCEPTIONS
12:39:10  39  BAD_OFFER_ID	     EXCEPTION;
12:39:10  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
12:39:10  41  BAD_INVOICE_ID	     EXCEPTION;
12:39:10  42  BAD_OFFER_DURATION     EXCEPTION;
12:39:10  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:10  44  BEGIN
12:39:10  45  
12:39:10  46  	-- TODO:
12:39:10  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
12:39:10  48  
12:39:10  49  	out_license_id := NULL;
12:39:10  50  
12:39:10  51  	-- get offer id and offer entitlement duration
12:39:10  52  	BEGIN
12:39:10  53  	  SELECT
12:39:10  54  	    OFFER.ID,
12:39:10  55  	    OFFER.ENTITLEMENT_DURATION
12:39:10  56  	    into
12:39:10  57  	    temp_offer_id,
12:39:10  58  	    var_offer_duration
12:39:10  59  	  FROM
12:39:10  60  	    OFFER
12:39:10  61  	  WHERE
12:39:10  62  	    OFFER.ID = in_offer_id;
12:39:10  63  	  EXCEPTION
12:39:10  64  	  WHEN NO_DATA_FOUND THEN
12:39:10  65  	    RAISE BAD_OFFER_ID;
12:39:10  66  	END;
12:39:10  67  
12:39:10  68  	-- Check that subscription exists
12:39:10  69  	BEGIN
12:39:10  70  	  SELECT
12:39:10  71  	    SUBSCRIPTION.ID into temp_subscription_id
12:39:10  72  	  FROM
12:39:10  73  	    SUBSCRIPTION
12:39:10  74  	  WHERE
12:39:10  75  	    SUBSCRIPTION.ID = in_subscription_id;
12:39:10  76  	  EXCEPTION
12:39:10  77  	  WHEN NO_DATA_FOUND THEN
12:39:10  78  	    RAISE BAD_SUBSCRIPTION_ID;
12:39:10  79  	END;
12:39:10  80  
12:39:10  81  	-- Check that invoice exists
12:39:10  82  	BEGIN
12:39:10  83  	  SELECT
12:39:10  84  	    INVOICE.ID into temp_invoice_id
12:39:10  85  	  FROM
12:39:10  86  	    INVOICE
12:39:10  87  	  WHERE
12:39:10  88  	    INVOICE.ID = in_invoice_id;
12:39:10  89  	  EXCEPTION
12:39:10  90  	  WHEN NO_DATA_FOUND THEN
12:39:10  91  	    RAISE BAD_INVOICE_ID;
12:39:10  92  	END;
12:39:10  93  
12:39:10  94  	-- convert offer duration into intervals
12:39:10  95  	BEGIN
12:39:10  96  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
12:39:10  97  	    var_offer_duration,
12:39:10  98  	    var_offer_years,
12:39:10  99  	    var_offer_months,
12:39:10 100  	    var_offer_days);
12:39:10 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
12:39:10 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
12:39:10 103  	  EXCEPTION
12:39:10 104  	    WHEN OTHERS THEN
12:39:10 105  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:10 106  	      RAISE BAD_OFFER_DURATION;
12:39:10 107  	END;
12:39:10 108  
12:39:10 109  	-- insert new row into license table
12:39:10 110  	PROCS_LICENSE_CRU_V16.CREATE_LICENSE(
12:39:10 111  	  out_license_id	      => var_new_license_id,
12:39:10 112  	  in_license_status_id	      => in_status_id,
12:39:10 113  	  in_needs_entitlements       => in_needs_entitlements,
12:39:10 114  	  in_start_date 	      => in_start_date,
12:39:10 115  	  in_offer_id		      => in_offer_id,
12:39:10 116  	  in_subscription_id	      => in_subscription_id,
12:39:10 117  	  in_invoice_id 	      => in_invoice_id,
12:39:10 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
12:39:10 119  	  in_created_by 	      => in_created_by,
12:39:10 120  	  in_is_extension	      => in_is_extension,
12:39:10 121  	  in_current_offer_index      => in_current_offer_index,
12:39:10 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
12:39:10 123  	);
12:39:10 124  
12:39:10 125  	out_license_id := var_new_license_id;
12:39:10 126  
12:39:10 127  EXCEPTION
12:39:10 128  WHEN BAD_OFFER_DURATION THEN
12:39:10 129  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:10 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
12:39:10 131  WHEN BAD_OFFER_ID THEN
12:39:10 132  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 133  	  SPROC_NAME, 'No such offer');
12:39:10 134  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:10 135  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 136  	  SPROC_NAME, 'No such subscription');
12:39:10 137  WHEN BAD_INVOICE_ID THEN
12:39:10 138  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 139  	  SPROC_NAME, 'No such invoice');
12:39:10 140  WHEN OTHERS THEN
12:39:10 141  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 143  END;
12:39:10 144  
12:39:10 145  /******************************************************************************/
12:39:10 146  
12:39:10 147  PROCEDURE UPDATE_LICENSE_STATUS(
12:39:10 148  	  in_license_id     IN NUMBER,
12:39:10 149  	  in_license_status IN NUMBER,
12:39:10 150  	  in_updated_by     IN VARCHAR2,
12:39:10 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:10 152  ) AS
12:39:10 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
12:39:10 154  -- VARIABLES
12:39:10 155  temp_license_id NUMBER;
12:39:10 156  -- EXCEPTIONS
12:39:10 157  BAD_LICENSE_ID	     EXCEPTION;
12:39:10 158  BAD_LICENSE_STATUS     EXCEPTION;
12:39:10 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:10 160  BEGIN
12:39:10 161  
12:39:10 162  	BEGIN
12:39:10 163  	  SELECT
12:39:10 164  	    ID into temp_license_id
12:39:10 165  	  FROM
12:39:10 166  	    LICENSE
12:39:10 167  	  WHERE
12:39:10 168  	    LICENSE.ID = in_license_id;
12:39:10 169  	  EXCEPTION
12:39:10 170  	    WHEN NO_DATA_FOUND THEN
12:39:10 171  	      RAISE BAD_LICENSE_ID;
12:39:10 172  	END;
12:39:10 173  
12:39:10 174  	IF in_license_status != GLOBAL_STATUSES_V16.LICENSE_CLOSED
12:39:10 175  	   AND in_license_status != GLOBAL_STATUSES_V16.LICENSE_ACTIVE THEN
12:39:10 176  	  RAISE BAD_LICENSE_STATUS;
12:39:10 177  	END IF;
12:39:10 178  
12:39:10 179  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V16.TRUE) then
12:39:10 180  	  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:10 181  	    in_license_id	 => in_license_id,
12:39:10 182  	    in_updated_by	 => in_updated_by,
12:39:10 183  	    in_license_status_id => in_license_status,
12:39:10 184  	    in_entitlement_end_date	 => sysdate
12:39:10 185  	  );
12:39:10 186  	ELSE
12:39:10 187  	  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:10 188  	    in_license_id	 => in_license_id,
12:39:10 189  	    in_updated_by	 => in_updated_by,
12:39:10 190  	    in_license_status_id => in_license_status
12:39:10 191  	  );
12:39:10 192  	END IF;
12:39:10 193  
12:39:10 194  EXCEPTION
12:39:10 195  WHEN BAD_LICENSE_STATUS THEN
12:39:10 196  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:10 197  	  SPROC_NAME, 'Bad status id');
12:39:10 198  WHEN BAD_LICENSE_ID THEN
12:39:10 199  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 200  	  SPROC_NAME, 'No such license');
12:39:10 201  WHEN OTHERS THEN
12:39:10 202  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 204  END UPDATE_LICENSE_STATUS;
12:39:10 205  
12:39:10 206  /******************************************************************************/
12:39:10 207  
12:39:10 208  PROCEDURE GET_ENDING_LICENSES (
12:39:10 209  	in_hours_number IN NUMBER,
12:39:10 210  	out_result_set	OUT SYS_REFCURSOR
12:39:10 211  ) AS
12:39:10 212  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
12:39:10 213  -- VARIABLES
12:39:10 214  var_days		NUMBER;
12:39:10 215  var_hours 	NUMBER;
12:39:10 216  var_time_interval INTERVAL DAY (3) TO SECOND;
12:39:10 217  BEGIN
12:39:10 218  
12:39:10 219  	var_hours := mod(in_hours_number,24);
12:39:10 220  	var_days := (in_hours_number - var_hours) / 24;
12:39:10 221  	var_time_interval := var_days||' '||var_hours||':0:0';
12:39:10 222  
12:39:10 223  	OPEN out_result_set FOR
12:39:10 224  SELECT * FROM
12:39:10 225  (
12:39:10 226  	SELECT
12:39:10 227  	  LICENSE.ID,
12:39:10 228  	  LICENSE.CREATE_DATE,
12:39:10 229  	  LICENSE.CREATED_BY,
12:39:10 230  	  LICENSE.CURRENT_OFFER_INDEX,
12:39:10 231  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
12:39:10 232  	  LICENSE.END_DATE,
12:39:10 233  	  LICENSE.ENTITLEMENT_END_DATE,
12:39:10 234  	  LICENSE.INVOICE_ID,
12:39:10 235  	  LICENSE.IS_EXTENSION,
12:39:10 236  	  LICENSE.LICENSE_STATUS_ID,
12:39:10 237  	  LICENSE.OFFER_ID,
12:39:10 238  	  LICENSE.START_DATE,
12:39:10 239  	  LICENSE.SUBSCRIPTION_ID,
12:39:10 240  	  LICENSE.UPDATE_DATE,
12:39:10 241  	  LICENSE.UPDATED_BY
12:39:10 242  	FROM
12:39:10 243  	  LICENSE
12:39:10 244  	WHERE
12:39:10 245  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
12:39:10 246  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:10 247  	  AND NOT EXISTS
12:39:10 248  	  (
12:39:10 249  	    SELECT NULL
12:39:10 250  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:10 251  	    WHERE PROCESS_NAME = SPROC_NAME
12:39:10 252  	      AND GENERIC_ID = LICENSE.ID
12:39:10 253  	  )
12:39:10 254  	  AND ROWNUM <= 10000
12:39:10 255  	  ORDER BY dbms_random.value
12:39:10 256  ) WHERE
12:39:10 257  	  ROWNUM <= 1000
12:39:10 258  	  ;
12:39:10 259  EXCEPTION
12:39:10 260  WHEN OTHERS THEN
12:39:10 261  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 263  END GET_ENDING_LICENSES;
12:39:10 264  
12:39:10 265  
12:39:10 266  /******************************************************************************/
12:39:10 267  
12:39:10 268  PROCEDURE GET_ENDING_LICENSES_CC (
12:39:10 269  	in_hours_number IN NUMBER,
12:39:10 270  	out_result_set	OUT SYS_REFCURSOR,
12:39:10 271  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:10 272  ) AS
12:39:10 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
12:39:10 274  -- VARIABLES
12:39:10 275  var_days		NUMBER;
12:39:10 276  var_hours 	NUMBER;
12:39:10 277  var_time_interval INTERVAL DAY (3) TO SECOND;
12:39:10 278  BEGIN
12:39:10 279  
12:39:10 280  	var_hours := mod(in_hours_number,24);
12:39:10 281  	var_days := (in_hours_number - var_hours) / 24;
12:39:10 282  	var_time_interval := var_days||' '||var_hours||':0:0';
12:39:10 283  
12:39:10 284  	OPEN out_result_set FOR
12:39:10 285  SELECT * FROM
12:39:10 286  (
12:39:10 287  	SELECT
12:39:10 288  	  LICENSE.ID,
12:39:10 289  	  LICENSE.CREATE_DATE,
12:39:10 290  	  LICENSE.CREATED_BY,
12:39:10 291  	  LICENSE.CURRENT_OFFER_INDEX,
12:39:10 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
12:39:10 293  	  LICENSE.END_DATE,
12:39:10 294  	  LICENSE.ENTITLEMENT_END_DATE,
12:39:10 295  	  LICENSE.INVOICE_ID,
12:39:10 296  	  LICENSE.IS_EXTENSION,
12:39:10 297  	  LICENSE.LICENSE_STATUS_ID,
12:39:10 298  	  LICENSE.OFFER_ID,
12:39:10 299  	  LICENSE.START_DATE,
12:39:10 300  	  LICENSE.SUBSCRIPTION_ID,
12:39:10 301  	  LICENSE.UPDATE_DATE,
12:39:10 302  	  LICENSE.UPDATED_BY
12:39:10 303  	FROM
12:39:10 304  	  LICENSE
12:39:10 305  	WHERE
12:39:10 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
12:39:10 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:10 308  	  AND NOT EXISTS
12:39:10 309  	  (
12:39:10 310  	    SELECT NULL
12:39:10 311  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:10 312  	    WHERE PROCESS_NAME = in_process_name
12:39:10 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
12:39:10 314  	  )
12:39:10 315  	  AND ROWNUM <= 10000
12:39:10 316  	  ORDER BY dbms_random.value
12:39:10 317  ) WHERE
12:39:10 318  	  ROWNUM <= 1000
12:39:10 319  	  ;
12:39:10 320  EXCEPTION
12:39:10 321  WHEN OTHERS THEN
12:39:10 322  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 324  END GET_ENDING_LICENSES_CC;
12:39:10 325  
12:39:10 326  /******************************************************************************/
12:39:10 327  
12:39:10 328  PROCEDURE GET_RECURRING_OFFER (
12:39:10 329  	in_license_id  IN NUMBER,
12:39:10 330  	out_result_set OUT SYS_REFCURSOR
12:39:10 331  ) AS
12:39:10 332  -- VARIABLES
12:39:10 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
12:39:10 334  var_offer_chain_id	    NUMBER;
12:39:10 335  var_offer_id		    NUMBER;
12:39:10 336  var_offer_num_recurrences     NUMBER;
12:39:10 337  var_license_cur_offer_rec_num NUMBER;
12:39:10 338  var_offer_index		    NUMBER;
12:39:10 339  -- EXCEPTIONS
12:39:10 340  BAD_LICENSE_ID	     EXCEPTION;
12:39:10 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
12:39:10 342  BEGIN
12:39:10 343  
12:39:10 344  	BEGIN
12:39:10 345  	  SELECT
12:39:10 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
12:39:10 347  	    LICENSE.OFFER_ID,
12:39:10 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
12:39:10 349  	    into
12:39:10 350  	    var_offer_chain_id,
12:39:10 351  	    var_offer_id,
12:39:10 352  	    var_license_cur_offer_rec_num
12:39:10 353  	  FROM
12:39:10 354  	    LICENSE
12:39:10 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:10 356  	  WHERE
12:39:10 357  	    LICENSE.ID = in_license_id;
12:39:10 358  	  EXCEPTION
12:39:10 359  	    WHEN NO_DATA_FOUND THEN
12:39:10 360  	      RAISE BAD_LICENSE_ID;
12:39:10 361  	END;
12:39:10 362  
12:39:10 363  	BEGIN
12:39:10 364  	  SELECT
12:39:10 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
12:39:10 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
12:39:10 367  	    into
12:39:10 368  	    var_offer_num_recurrences,
12:39:10 369  	    var_offer_index
12:39:10 370  	  FROM
12:39:10 371  	    OFFER_OFFER_CHAIN
12:39:10 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
12:39:10 373  	  WHERE
12:39:10 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
12:39:10 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
12:39:10 376  	  EXCEPTION
12:39:10 377  	    WHEN NO_DATA_FOUND THEN
12:39:10 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
12:39:10 379  	END;
12:39:10 380  
12:39:10 381  	IF var_offer_num_recurrences = 0 THEN
12:39:10 382  	  --out_result_set := NULL;
12:39:10 383  	  -- TODO: Remove this hardcode
12:39:10 384  	  OPEN out_result_set FOR
12:39:10 385  	  SELECT
12:39:10 386  	    OFFER.ID,
12:39:10 387  	    OFFER.OFFER_STATUS_ID,
12:39:10 388  	    OFFER.ENTITLEMENT_DURATION,
12:39:10 389  	    OFFER.CREATED_BY,
12:39:10 390  	    OFFER.CREATE_DATE,
12:39:10 391  	    OFFER.UPDATED_BY,
12:39:10 392  	    OFFER.UPDATE_DATE,
12:39:10 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
12:39:10 394  	    var_offer_index as "OFFER_INDEX"
12:39:10 395  	  FROM
12:39:10 396  	    OFFER_OFFER_CHAIN
12:39:10 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
12:39:10 398  	  WHERE ROWNUM = 0;
12:39:10 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
12:39:10 400  	  --out_result_set := NULL;
12:39:10 401  	  -- TODO: Remove this hardcode
12:39:10 402  	  OPEN out_result_set FOR
12:39:10 403  	  SELECT
12:39:10 404  	    OFFER.ID,
12:39:10 405  	    OFFER.OFFER_STATUS_ID,
12:39:10 406  	    OFFER.ENTITLEMENT_DURATION,
12:39:10 407  	    OFFER.CREATED_BY,
12:39:10 408  	    OFFER.CREATE_DATE,
12:39:10 409  	    OFFER.UPDATED_BY,
12:39:10 410  	    OFFER.UPDATE_DATE,
12:39:10 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
12:39:10 412  	    var_offer_index as "OFFER_INDEX"
12:39:10 413  	  FROM
12:39:10 414  	    OFFER_OFFER_CHAIN
12:39:10 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
12:39:10 416  	  WHERE ROWNUM = 0;
12:39:10 417  	ELSE
12:39:10 418  	  OPEN out_result_set FOR
12:39:10 419  	  SELECT
12:39:10 420  	    OFFER.ID,
12:39:10 421  	    OFFER.OFFER_STATUS_ID,
12:39:10 422  	    OFFER.ENTITLEMENT_DURATION,
12:39:10 423  	    OFFER.CREATED_BY,
12:39:10 424  	    OFFER.CREATE_DATE,
12:39:10 425  	    OFFER.UPDATED_BY,
12:39:10 426  	    OFFER.UPDATE_DATE,
12:39:10 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
12:39:10 428  	    var_offer_index as "OFFER_INDEX"
12:39:10 429  	  FROM
12:39:10 430  	    OFFER
12:39:10 431  	  WHERE
12:39:10 432  	    OFFER.ID = var_offer_id;
12:39:10 433  	END IF;
12:39:10 434  
12:39:10 435  EXCEPTION
12:39:10 436  WHEN BAD_LICENSE_ID THEN
12:39:10 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 438  	  SPROC_NAME, 'No such license');
12:39:10 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
12:39:10 440  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
12:39:10 442  WHEN OTHERS THEN
12:39:10 443  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 445  END GET_RECURRING_OFFER;
12:39:10 446  
12:39:10 447  /******************************************************************************/
12:39:10 448  
12:39:10 449  PROCEDURE GET_NEXT_OFFER (
12:39:10 450  /*
12:39:10 451  Throws exceptions:
12:39:10 452  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:10 453  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:10 454  */
12:39:10 455  	in_license_id  IN NUMBER,
12:39:10 456  	out_result_set OUT SYS_REFCURSOR
12:39:10 457  ) AS
12:39:10 458  -- VARIABLES
12:39:10 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
12:39:10 460  var_offer_chain_id	NUMBER;
12:39:10 461  var_offer_id		NUMBER;
12:39:10 462  var_license_current_index NUMBER;
12:39:10 463  var_next_offer_index	NUMBER;
12:39:10 464  -- EXCEPTIONS
12:39:10 465  BAD_LICENSE_ID	      EXCEPTION;
12:39:10 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
12:39:10 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
12:39:10 468  BEGIN
12:39:10 469  
12:39:10 470  	BEGIN
12:39:10 471  	  SELECT
12:39:10 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
12:39:10 473  	    LICENSE.OFFER_ID,
12:39:10 474  	    LICENSE.CURRENT_OFFER_INDEX
12:39:10 475  	    into
12:39:10 476  	    var_offer_chain_id,
12:39:10 477  	    var_offer_id,
12:39:10 478  	    var_license_current_index
12:39:10 479  	  FROM
12:39:10 480  	    LICENSE
12:39:10 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:10 482  	  WHERE
12:39:10 483  	    LICENSE.ID = in_license_id;
12:39:10 484  	  EXCEPTION
12:39:10 485  	    WHEN NO_DATA_FOUND THEN
12:39:10 486  	      RAISE BAD_LICENSE_ID;
12:39:10 487  	END;
12:39:10 488  
12:39:10 489  	BEGIN
12:39:10 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX(
12:39:10 491  	    var_offer_chain_id,
12:39:10 492  	    var_license_current_index
12:39:10 493  	  );
12:39:10 494  	  EXCEPTION
12:39:10 495  	    WHEN OTHERS THEN
12:39:10 496  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:10 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
12:39:10 498  	END;
12:39:10 499  
12:39:10 500  	IF var_next_offer_index IS NULL THEN
12:39:10 501  	  -- RETURN NULL;
12:39:10 502  	  -- TODO: Remove this hardcode
12:39:10 503  	  OPEN out_result_set FOR
12:39:10 504  	  SELECT
12:39:10 505  	    OFFER.ID,
12:39:10 506  	    OFFER.OFFER_STATUS_ID,
12:39:10 507  	    OFFER.ENTITLEMENT_DURATION,
12:39:10 508  	    OFFER.CREATED_BY,
12:39:10 509  	    OFFER.CREATE_DATE,
12:39:10 510  	    OFFER.UPDATED_BY,
12:39:10 511  	    OFFER.UPDATE_DATE,
12:39:10 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
12:39:10 513  	  FROM
12:39:10 514  	    OFFER_OFFER_CHAIN
12:39:10 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
12:39:10 516  	  WHERE
12:39:10 517  	    1=2;
12:39:10 518  	ELSE
12:39:10 519  	  OPEN out_result_set FOR
12:39:10 520  	  SELECT
12:39:10 521  	    OFFER.ID,
12:39:10 522  	    OFFER.OFFER_STATUS_ID,
12:39:10 523  	    OFFER.ENTITLEMENT_DURATION,
12:39:10 524  	    OFFER.CREATED_BY,
12:39:10 525  	    OFFER.CREATE_DATE,
12:39:10 526  	    OFFER.UPDATED_BY,
12:39:10 527  	    OFFER.UPDATE_DATE,
12:39:10 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
12:39:10 529  	  FROM
12:39:10 530  	    OFFER_OFFER_CHAIN
12:39:10 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
12:39:10 532  	  WHERE
12:39:10 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
12:39:10 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
12:39:10 535  	END IF;
12:39:10 536  
12:39:10 537  EXCEPTION
12:39:10 538  WHEN BAD_LICENSE_ID THEN
12:39:10 539  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 540  	  SPROC_NAME, 'No such license');
12:39:10 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
12:39:10 542  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:10 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
12:39:10 544  WHEN OTHERS THEN
12:39:10 545  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 547  END GET_NEXT_OFFER;
12:39:10 548  
12:39:10 549  /******************************************************************************/
12:39:10 550  
12:39:10 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
12:39:10 552  	in_license_id IN NUMBER,
12:39:10 553  	out_group_id  OUT NUMBER
12:39:10 554  ) AS
12:39:10 555  -- VARIABLES
12:39:10 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
12:39:10 557  var_subscription_id NUMBER;
12:39:10 558  var_group_id	  NUMBER;
12:39:10 559  -- EXCEPTIONS
12:39:10 560  BAD_LICENSE_ID	   EXCEPTION;
12:39:10 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
12:39:10 562  BEGIN
12:39:10 563  
12:39:10 564  	-- Get subscription id
12:39:10 565  	BEGIN
12:39:10 566  	  SELECT
12:39:10 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
12:39:10 568  	  FROM
12:39:10 569  	    LICENSE
12:39:10 570  	  WHERE
12:39:10 571  	    LICENSE.ID = in_license_id;
12:39:10 572  	  EXCEPTION
12:39:10 573  	    WHEN NO_DATA_FOUND THEN
12:39:10 574  	      RAISE BAD_LICENSE_ID;
12:39:10 575  	END;
12:39:10 576  
12:39:10 577  	-- Get group id
12:39:10 578  	BEGIN
12:39:10 579  	  SELECT
12:39:10 580  	    ACCOUNT.GROUP_ID into var_group_id
12:39:10 581  	  FROM
12:39:10 582  	    SUBSCRIPTION
12:39:10 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
12:39:10 584  	  WHERE
12:39:10 585  	    SUBSCRIPTION.ID = var_subscription_id;
12:39:10 586  	  EXCEPTION
12:39:10 587  	    WHEN NO_DATA_FOUND THEN
12:39:10 588  	      RAISE CAN_NOT_GET_GROUP_ID;
12:39:10 589  	END;
12:39:10 590  
12:39:10 591  	out_group_id := var_group_id;
12:39:10 592  
12:39:10 593  EXCEPTION
12:39:10 594  WHEN BAD_LICENSE_ID THEN
12:39:10 595  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 596  	  SPROC_NAME, 'No such license');
12:39:10 597  WHEN CAN_NOT_GET_GROUP_ID THEN
12:39:10 598  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 599  	  SPROC_NAME, 'Could not get group id');
12:39:10 600  WHEN OTHERS THEN
12:39:10 601  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 603  END GET_GROUP_ID_BY_LICENSE_ID;
12:39:10 604  
12:39:10 605  /******************************************************************************/
12:39:10 606  
12:39:10 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
12:39:10 608  	out_result_set OUT SYS_REFCURSOR
12:39:10 609  ) AS
12:39:10 610  BEGIN
12:39:10 611  	OPEN out_result_set FOR
12:39:10 612  SELECT * FROM
12:39:10 613  (
12:39:10 614  	SELECT
12:39:10 615  	  LICENSE.ID,
12:39:10 616  	  LICENSE.INVOICE_ID,
12:39:10 617  	  LICENSE.IS_EXTENSION,
12:39:10 618  	  LICENSE.START_DATE,
12:39:10 619  	  LICENSE.END_DATE,
12:39:10 620  	  LICENSE.ENTITLEMENT_END_DATE,
12:39:10 621  	  LICENSE.CURRENT_OFFER_INDEX,
12:39:10 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
12:39:10 623  	  LICENSE.CREATE_DATE,
12:39:10 624  	  LICENSE.CREATED_BY,
12:39:10 625  	  LICENSE.LICENSE_STATUS_ID,
12:39:10 626  	  LICENSE.OFFER_ID,
12:39:10 627  	  LICENSE.SUBSCRIPTION_ID,
12:39:10 628  	  LICENSE.UPDATE_DATE,
12:39:10 629  	  LICENSE.UPDATED_BY,
12:39:10 630  	  LICENSE.NEEDS_ENTITLEMENTS
12:39:10 631  	FROM
12:39:10 632  	  LICENSE
12:39:10 633  	WHERE
12:39:10 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE
12:39:10 635  	AND ROWNUM <= 5000
12:39:10 636  	ORDER BY dbms_random.value
12:39:10 637  ) WHERE
12:39:10 638  	ROWNUM <= 500;
12:39:10 639  
12:39:10 640  END GET_NEED_ENTITLEMENTS_LICENSES;
12:39:10 641  
12:39:10 642  /******************************************************************************/
12:39:10 643  
12:39:10 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
12:39:10 645  	in_license_id	      IN NUMBER,
12:39:10 646  	in_needs_entitlements IN NUMBER,
12:39:10 647  	in_updated_by	      IN VARCHAR2
12:39:10 648  ) AS
12:39:10 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
12:39:10 650  -- VARIABLES
12:39:10 651  temp_license_id NUMBER;
12:39:10 652  -- EXCEPTIONS
12:39:10 653  BAD_LICENSE_ID	     EXCEPTION;
12:39:10 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
12:39:10 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:10 656  BEGIN
12:39:10 657  
12:39:10 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V16.TRUE
12:39:10 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:10 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
12:39:10 661  	END IF;
12:39:10 662  
12:39:10 663  	BEGIN
12:39:10 664  	  SELECT
12:39:10 665  	    LICENSE.ID into temp_license_id
12:39:10 666  	  FROM
12:39:10 667  	    LICENSE
12:39:10 668  	  WHERE
12:39:10 669  	    LICENSE.ID = in_license_id;
12:39:10 670  	  EXCEPTION
12:39:10 671  	    WHEN NO_DATA_FOUND THEN
12:39:10 672  	      RAISE BAD_LICENSE_ID;
12:39:10 673  	END;
12:39:10 674  
12:39:10 675  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:10 676  	  in_license_id 	=> in_license_id,
12:39:10 677  	  in_needs_entitlements => in_needs_entitlements,
12:39:10 678  	  in_updated_by 	=> in_updated_by
12:39:10 679  	);
12:39:10 680  
12:39:10 681  EXCEPTION
12:39:10 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
12:39:10 683  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:10 684  	  SPROC_NAME, 'Bad entitlements flag value');
12:39:10 685  WHEN BAD_LICENSE_ID THEN
12:39:10 686  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 687  	  SPROC_NAME, 'No such license');
12:39:10 688  WHEN OTHERS THEN
12:39:10 689  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
12:39:10 692  
12:39:10 693  
12:39:10 694  /******************************************************************************/
12:39:10 695  
12:39:10 696  PROCEDURE GET_ENDED_GC_LICENSES (
12:39:10 697  	out_result_set		OUT SYS_REFCURSOR,
12:39:10 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
12:39:10 699  	in_num_rows		IN NUMBER DEFAULT 10000,
12:39:10 700  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:10 701  ) AS
12:39:10 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
12:39:10 703  var_days		NUMBER;
12:39:10 704  var_hours 	NUMBER;
12:39:10 705  var_time_interval INTERVAL DAY (3) TO SECOND;
12:39:10 706  BEGIN
12:39:10 707  	var_hours := mod(in_hours_number,24);
12:39:10 708  	var_days := (in_hours_number - var_hours) / 24;
12:39:10 709  	var_time_interval := var_days||' '||var_hours||':0:0';
12:39:10 710  	OPEN out_result_set FOR
12:39:10 711  SELECT * FROM
12:39:10 712  (
12:39:10 713  	SELECT
12:39:10 714  	  l.ID,
12:39:10 715  	  l.CREATE_DATE,
12:39:10 716  	  l.CREATED_BY,
12:39:10 717  	  l.CURRENT_OFFER_INDEX,
12:39:10 718  	  l.CURRENT_OFFER_RECURR_NUM,
12:39:10 719  	  l.END_DATE,
12:39:10 720  	  l.ENTITLEMENT_END_DATE,
12:39:10 721  	  l.INVOICE_ID,
12:39:10 722  	  l.IS_EXTENSION,
12:39:10 723  	  l.LICENSE_STATUS_ID,
12:39:10 724  	  l.OFFER_ID,
12:39:10 725  	  l.START_DATE,
12:39:10 726  	  l.SUBSCRIPTION_ID,
12:39:10 727  	  l.UPDATE_DATE,
12:39:10 728  	  l.UPDATED_BY
12:39:10 729  	FROM
12:39:10 730  	  GIFT_CERTIFICATE gc
12:39:10 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
12:39:10 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
12:39:10 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
12:39:10 734  	WHERE
12:39:10 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:10 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
12:39:10 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
12:39:10 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
12:39:10 739  	  AND NOT EXISTS (
12:39:10 740  	    SELECT NULL
12:39:10 741  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:10 742  	    WHERE PROCESS_NAME = in_process_name
12:39:10 743  	      AND GENERIC_ID = l.ID
12:39:10 744  	  )
12:39:10 745  	  AND ROWNUM <= in_num_rows*10
12:39:10 746  	  ORDER BY dbms_random.value
12:39:10 747  ) WHERE
12:39:10 748  	  ROWNUM <= in_num_rows
12:39:10 749  	  GROUP BY SUBSCRIPTION_ID;
12:39:10 750  EXCEPTION
12:39:10 751  WHEN OTHERS THEN
12:39:10 752  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 754  END GET_ENDED_GC_LICENSES;
12:39:10 755  
12:39:10 756  PROCEDURE GET_LICENSE_BY_ID (
12:39:10 757  	in_license_id  IN NUMBER,
12:39:10 758  	out_result_set OUT SYS_REFCURSOR
12:39:10 759  ) AS
12:39:10 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
12:39:10 761  -- VARIABLES
12:39:10 762  temp_license_id NUMBER;
12:39:10 763  -- EXCEPTIONS
12:39:10 764  BAD_LICENSE_ID EXCEPTION;
12:39:10 765  BEGIN
12:39:10 766  
12:39:10 767  	BEGIN
12:39:10 768  	  SELECT
12:39:10 769  	    l.id into temp_license_id
12:39:10 770  	  FROM
12:39:10 771  	    license l
12:39:10 772  	  WHERE
12:39:10 773  	    l.id = in_license_id;
12:39:10 774  	  EXCEPTION
12:39:10 775  	    WHEN NO_DATA_FOUND THEN
12:39:10 776  	      RAISE BAD_LICENSE_ID;
12:39:10 777  	END;
12:39:10 778  
12:39:10 779  	OPEN out_result_set FOR
12:39:10 780  	SELECT
12:39:10 781  	  l.id,
12:39:10 782  	  l.license_status_id,
12:39:10 783  	  l.subscription_id,
12:39:10 784  	  l.invoice_id,
12:39:10 785  	  l.offer_id,
12:39:10 786  	  l.start_date,
12:39:10 787  	  l.end_date,
12:39:10 788  	  l.entitlement_end_date,
12:39:10 789  	  l.is_extension,
12:39:10 790  	  l.create_date,
12:39:10 791  	  l.created_by,
12:39:10 792  	  l.update_date,
12:39:10 793  	  l.updated_by,
12:39:10 794  	  l.current_offer_index,
12:39:10 795  	  l.current_offer_recurr_num,
12:39:10 796  	  l.needs_entitlements
12:39:10 797  	FROM
12:39:10 798  	  LICENSE l
12:39:10 799  	WHERE
12:39:10 800  	  l.id = in_license_id;
12:39:10 801  
12:39:10 802  EXCEPTION
12:39:10 803  WHEN BAD_LICENSE_ID THEN
12:39:10 804  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:10 805  	  SPROC_NAME, 'No such license');
12:39:10 806  WHEN OTHERS THEN
12:39:10 807  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 809  END GET_LICENSE_BY_ID;
12:39:10 810  
12:39:10 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
12:39:10 812  	in_subscription_id IN NUMBER,
12:39:10 813  	in_end_date IN DATE,
12:39:10 814  	in_updated_by IN VARCHAR2
12:39:10 815  ) AS
12:39:10 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
12:39:10 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:10 818  var_latest_lice NUMBER;
12:39:10 819  BEGIN
12:39:10 820  	SELECT max(id)
12:39:10 821  	INTO  var_latest_lice
12:39:10 822  	FROM LICENSE
12:39:10 823  	WHERE
12:39:10 824  	  subscription_id = in_subscription_id
12:39:10 825  	;
12:39:10 826  
12:39:10 827  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:10 828  	  in_license_id        => var_latest_lice,
12:39:10 829  	  in_updated_by        => in_updated_by,
12:39:10 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE,
12:39:10 831  	  in_end_date	       => in_end_date,
12:39:10 832  	  in_entitlement_end_date => in_end_date
12:39:10 833  	);
12:39:10 834  
12:39:10 835  EXCEPTION
12:39:10 836  WHEN NO_DATA_FOUND THEN
12:39:10 837  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
12:39:10 839  WHEN OTHERS THEN
12:39:10 840  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:10 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:10 842  END UP_LATEST_LICE_END_BY_SUBID;
12:39:10 843  
12:39:10 844  END PROCS_LICENSE_V16;
12:39:10 845  .
12:39:10 SQL> /

Package body created.

Elapsed: 00:00:00.06
12:39:11 SQL> 
12:39:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V16" AS
12:39:11   2  
12:39:11   3  PROCEDURE CREATE_CHARGE(
12:39:11   4  /*
12:39:11   5  Throws exceptions:
12:39:11   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11   8  */
12:39:11   9  	in_invoice_id	      IN NUMBER,
12:39:11  10  	in_transaction_id     IN NUMBER,
12:39:11  11  	in_instrument_type_id IN NUMBER,
12:39:11  12  	in_instrument_id      IN NUMBER,
12:39:11  13  	in_charge_amount      IN NUMBER,
12:39:11  14  	in_created_by	      IN VARCHAR2,
12:39:11  15  	in_charge_status_id   IN NUMBER,
12:39:11  16  	out_charge_id	      OUT NUMBER
12:39:11  17  ) AS
12:39:11  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
12:39:11  19  -- VARIABLES
12:39:11  20  temp_invoice_id	  NUMBER;
12:39:11  21  temp_transaction_id NUMBER;
12:39:11  22  var_new_charge_id   NUMBER;
12:39:11  23  -- EXCEPTIONS
12:39:11  24  BAD_INVOICE_ID	     EXCEPTION;
12:39:11  25  BAD_TRANSACTION_ID     EXCEPTION;
12:39:11  26  BAD_PAYPAL_ID	     EXCEPTION;
12:39:11  27  BAD_CREDIT_CARD_ID     EXCEPTION;
12:39:11  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
12:39:11  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
12:39:11  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11  31  BEGIN
12:39:11  32  	-- Check that incoming data is correct
12:39:11  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
12:39:11  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
12:39:11  35  	  RAISE BAD_INSTRUMENT_TYPE;
12:39:11  36  	END IF;
12:39:11  37  
12:39:11  38  	-- Check that status is correct
12:39:11  39  	IF in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_OPENED
12:39:11  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_PROCESSED
12:39:11  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
12:39:11  42  	  RAISE BAD_CHARGE_STATUS_ID;
12:39:11  43  	END IF;
12:39:11  44  
12:39:11  45  	-- Check that invoice exists
12:39:11  46  	BEGIN
12:39:11  47  	  SELECT
12:39:11  48  	    INVOICE.ID into temp_invoice_id
12:39:11  49  	  FROM
12:39:11  50  	    INVOICE
12:39:11  51  	  WHERE
12:39:11  52  	    INVOICE.ID = in_invoice_id;
12:39:11  53  	  EXCEPTION
12:39:11  54  	    WHEN NO_DATA_FOUND THEN
12:39:11  55  	      RAISE BAD_INVOICE_ID;
12:39:11  56  	END;
12:39:11  57  
12:39:11  58  	-- Check that transaction exists
12:39:11  59  	BEGIN
12:39:11  60  	  SELECT
12:39:11  61  	    TRANSACTION.ID into temp_transaction_id
12:39:11  62  	  FROM
12:39:11  63  	    TRANSACTION
12:39:11  64  	  WHERE
12:39:11  65  	    TRANSACTION.ID = in_transaction_id;
12:39:11  66  	  EXCEPTION
12:39:11  67  	    WHEN NO_DATA_FOUND THEN
12:39:11  68  	      RAISE BAD_TRANSACTION_ID;
12:39:11  69  	END;
12:39:11  70  
12:39:11  71  	-- Check that instrument exists
12:39:11  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
12:39:11  73  	  IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11  74  	    RAISE BAD_CREDIT_CARD_ID;
12:39:11  75  	  END IF;
12:39:11  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
12:39:11  77  	  IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11  78  	    RAISE BAD_PAYPAL_ID;
12:39:11  79  	  END IF;
12:39:11  80  	END IF;
12:39:11  81  
12:39:11  82  	-- Create new charge
12:39:11  83  	PROCS_CHARGE_CRU_V16.CREATE_CHARGE(
12:39:11  84  	  out_charge_id 	=> var_new_charge_id,
12:39:11  85  	  in_invoice_id 	=> in_invoice_id,
12:39:11  86  	  in_transaction_id	=> in_transaction_id,
12:39:11  87  	  in_instrument_type_id => in_instrument_type_id,
12:39:11  88  	  in_instrument_id	=> in_instrument_id,
12:39:11  89  	  in_charge_amount	=> in_charge_amount,
12:39:11  90  	  in_charge_status_id	=> in_charge_status_id,
12:39:11  91  	  in_created_by 	=> in_created_by
12:39:11  92  	);
12:39:11  93  
12:39:11  94  	out_charge_id := var_new_charge_id;
12:39:11  95  
12:39:11  96  EXCEPTION
12:39:11  97  WHEN BAD_CHARGE_STATUS_ID THEN
12:39:11  98  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
12:39:11 100  WHEN BAD_INSTRUMENT_TYPE THEN
12:39:11 101  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 102  	  PROCS_NAME, 'Bad instrument type id');
12:39:11 103  WHEN BAD_INVOICE_ID THEN
12:39:11 104  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 105  	  PROCS_NAME, 'No such invoice');
12:39:11 106  WHEN BAD_TRANSACTION_ID THEN
12:39:11 107  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 108  	  PROCS_NAME, 'No such transaction');
12:39:11 109  WHEN BAD_PAYPAL_ID THEN
12:39:11 110  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 111  	  PROCS_NAME, 'No such paypal');
12:39:11 112  WHEN BAD_CREDIT_CARD_ID THEN
12:39:11 113  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 114  	  PROCS_NAME, 'No such credit card');
12:39:11 115  WHEN OTHERS THEN
12:39:11 116  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
12:39:11 118  END CREATE_CHARGE;
12:39:11 119  
12:39:11 120  /********************************************************/
12:39:11 121  -- norlov #38562 :
12:39:11 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
12:39:11 123  /*
12:39:11 124  Throws exceptions:
12:39:11 125  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 126  */
12:39:11 127  	out_result_set	    OUT SYS_REFCURSOR,
12:39:11 128  	in_row_number	    IN NUMBER DEFAULT NULL
12:39:11 129  ) AS
12:39:11 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
12:39:11 131  -- COMSTANTS
12:39:11 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
12:39:11 133  -- VARIABLES
12:39:11 134  var_row_number NUMBER;
12:39:11 135  BEGIN
12:39:11 136  	IF in_row_number IS NULL THEN
12:39:11 137  	  var_row_number := DEFAULT_ROW_NUMBER;
12:39:11 138  	ELSE
12:39:11 139  	  var_row_number := in_row_number;
12:39:11 140  	END IF;
12:39:11 141  
12:39:11 142  	-- Select charges
12:39:11 143  	OPEN out_result_set FOR
12:39:11 144  SELECT * FROM
12:39:11 145  (
12:39:11 146  	SELECT
12:39:11 147  	  CHARGE.ID,
12:39:11 148  	  CHARGE.TRANSACTION_ID,
12:39:11 149  	  CHARGE.INSTRUMENT_ID,
12:39:11 150  	  CHARGE.INSTRUMENT_TYPE_ID,
12:39:11 151  	  CHARGE.CHARGE_AMOUNT,
12:39:11 152  	  CHARGE.CREATE_DATE,
12:39:11 153  	  CHARGE.CREATED_BY,
12:39:11 154  	  CHARGE.INVOICE_ID
12:39:11 155  	FROM
12:39:11 156  	  CHARGE
12:39:11 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
12:39:11 158  	WHERE
12:39:11 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
12:39:11 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V16.TRUE
12:39:11 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
12:39:11 162  	  AND NOT EXISTS
12:39:11 163  	  (
12:39:11 164  	    SELECT NULL
12:39:11 165  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:11 166  	    WHERE PROCESS_NAME = SPROC_NAME
12:39:11 167  	      AND GENERIC_ID = CHARGE.ID
12:39:11 168  	  )
12:39:11 169  	  AND ROWNUM <= var_row_number*10
12:39:11 170  	  ORDER BY dbms_random.value
12:39:11 171  ) WHERE
12:39:11 172  	  ROWNUM <= var_row_number;
12:39:11 173  
12:39:11 174  END GET_PENDING_REFUND_CHARGES;
12:39:11 175  /******************************************************************************/
12:39:11 176  
12:39:11 177  PROCEDURE GET_UNPROCESSED_CHARGES (
12:39:11 178  /*
12:39:11 179  Throws exceptions:
12:39:11 180  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 181  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 182  */
12:39:11 183  	in_invoice_id  IN NUMBER,
12:39:11 184  	out_result_set OUT SYS_REFCURSOR
12:39:11 185  ) AS
12:39:11 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
12:39:11 187  -- VARIABLES
12:39:11 188  temp_invoice_id NUMBER;
12:39:11 189  -- EXCEPTIONS
12:39:11 190  BAD_INVOICE_ID EXCEPTION;
12:39:11 191  BEGIN
12:39:11 192  
12:39:11 193  	-- Check that invoice exists
12:39:11 194  	BEGIN
12:39:11 195  	  SELECT
12:39:11 196  	    INVOICE.ID into temp_invoice_id
12:39:11 197  	  FROM
12:39:11 198  	    INVOICE
12:39:11 199  	  WHERE
12:39:11 200  	    INVOICE.ID = in_invoice_id;
12:39:11 201  	  EXCEPTION
12:39:11 202  	    WHEN NO_DATA_FOUND THEN
12:39:11 203  	      RAISE BAD_INVOICE_ID;
12:39:11 204  	END;
12:39:11 205  
12:39:11 206  	-- Select charges
12:39:11 207  	OPEN out_result_set FOR
12:39:11 208  	SELECT
12:39:11 209  	  CHARGE.ID,
12:39:11 210  	  CHARGE.TRANSACTION_ID,
12:39:11 211  	  CHARGE.INSTRUMENT_ID,
12:39:11 212  	  CHARGE.INSTRUMENT_TYPE_ID,
12:39:11 213  	  CHARGE.CHARGE_AMOUNT,
12:39:11 214  	  CHARGE.CREATE_DATE,
12:39:11 215  	  CHARGE.CREATED_BY,
12:39:11 216  	  CHARGE.INVOICE_ID
12:39:11 217  	FROM
12:39:11 218  	  CHARGE
12:39:11 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
12:39:11 220  	WHERE
12:39:11 221  	  CHARGE.INVOICE_ID = in_invoice_id
12:39:11 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
12:39:11 223  	  AND
12:39:11 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
12:39:11 225  
12:39:11 226  EXCEPTION
12:39:11 227  WHEN BAD_INVOICE_ID THEN
12:39:11 228  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 229  	  SPROC_NAME, 'No such invoice');
12:39:11 230  WHEN OTHERS THEN
12:39:11 231  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 233  END GET_UNPROCESSED_CHARGES;
12:39:11 234  
12:39:11 235  /******************************************************************************/
12:39:11 236  
12:39:11 237  PROCEDURE GET_PROCESSED_CHARGES (
12:39:11 238  /*
12:39:11 239  Throws exceptions:
12:39:11 240  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 241  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 242  */
12:39:11 243  	in_invoice_id  IN NUMBER,
12:39:11 244  	out_result_set OUT SYS_REFCURSOR
12:39:11 245  ) AS
12:39:11 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
12:39:11 247  -- VARIABLES
12:39:11 248  temp_invoice_id NUMBER;
12:39:11 249  -- EXCEPTIONS
12:39:11 250  BAD_INVOICE_ID  EXCEPTION;
12:39:11 251  BEGIN
12:39:11 252  
12:39:11 253  	-- Check that invoice exists
12:39:11 254  	BEGIN
12:39:11 255  	  SELECT
12:39:11 256  	    INVOICE.ID into temp_invoice_id
12:39:11 257  	  FROM
12:39:11 258  	    INVOICE
12:39:11 259  	  WHERE
12:39:11 260  	    INVOICE.ID = in_invoice_id;
12:39:11 261  	  EXCEPTION
12:39:11 262  	    WHEN NO_DATA_FOUND THEN
12:39:11 263  	      RAISE BAD_INVOICE_ID;
12:39:11 264  	END;
12:39:11 265  
12:39:11 266  	-- Select charges
12:39:11 267  	OPEN out_result_set FOR
12:39:11 268  	SELECT /*+ STAR_TRANSFORMATION */
12:39:11 269  	  CHARGE.ID,
12:39:11 270  	  CHARGE.TRANSACTION_ID,
12:39:11 271  	  CHARGE.INSTRUMENT_ID,
12:39:11 272  	  CHARGE.INSTRUMENT_TYPE_ID,
12:39:11 273  	  CHARGE.CHARGE_AMOUNT,
12:39:11 274  	  CHARGE.CREATE_DATE,
12:39:11 275  	  CHARGE.CREATED_BY,
12:39:11 276  	  CHARGE.INVOICE_ID
12:39:11 277  	FROM
12:39:11 278  	  CHARGE
12:39:11 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
12:39:11 280  	WHERE
12:39:11 281  	  CHARGE.INVOICE_ID = in_invoice_id
12:39:11 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
12:39:11 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_CLOSED;
12:39:11 284  
12:39:11 285  EXCEPTION
12:39:11 286  WHEN BAD_INVOICE_ID THEN
12:39:11 287  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 288  	  SPROC_NAME, 'No such invoice');
12:39:11 289  WHEN OTHERS THEN
12:39:11 290  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 292  END GET_PROCESSED_CHARGES;
12:39:11 293  
12:39:11 294  /******************************************************************************/
12:39:11 295  
12:39:11 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
12:39:11 297  /*
12:39:11 298  Throws exceptions:
12:39:11 299  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 300  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 301  */
12:39:11 302  	in_charge_id	    IN NUMBER,
12:39:11 303  	out_subscription_id OUT NUMBER
12:39:11 304  ) AS
12:39:11 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
12:39:11 306  -- VARIABLES
12:39:11 307  var_invoice_id	  NUMBER;
12:39:11 308  var_subscription_id NUMBER;
12:39:11 309  -- EXCEPTIONS
12:39:11 310  BAD_CHARGE_ID		EXCEPTION;
12:39:11 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
12:39:11 312  BEGIN
12:39:11 313  
12:39:11 314  	BEGIN
12:39:11 315  	  SELECT
12:39:11 316  	    CHARGE.INVOICE_ID into var_invoice_id
12:39:11 317  	  FROM
12:39:11 318  	    CHARGE
12:39:11 319  	  WHERE
12:39:11 320  	    CHARGE.ID = in_charge_id;
12:39:11 321  	  EXCEPTION
12:39:11 322  	    WHEN NO_DATA_FOUND THEN
12:39:11 323  	      RAISE BAD_CHARGE_ID;
12:39:11 324  	END;
12:39:11 325  
12:39:11 326  	BEGIN
12:39:11 327  	  SELECT
12:39:11 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
12:39:11 329  	  FROM
12:39:11 330  	    LICENSE
12:39:11 331  	  WHERE
12:39:11 332  	    LICENSE.INVOICE_ID = var_invoice_id
12:39:11 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
12:39:11 334  	  EXCEPTION
12:39:11 335  	    WHEN NO_DATA_FOUND THEN
12:39:11 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
12:39:11 337  	END;
12:39:11 338  
12:39:11 339  	out_subscription_id := var_subscription_id;
12:39:11 340  
12:39:11 341  EXCEPTION
12:39:11 342  WHEN BAD_CHARGE_ID THEN
12:39:11 343  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 344  	  SPROC_NAME, 'No such charge');
12:39:11 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
12:39:11 346  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 347  	  SPROC_NAME, 'Could not find subscription for given charge');
12:39:11 348  WHEN OTHERS THEN
12:39:11 349  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
12:39:11 352  
12:39:11 353  /******************************************************************************/
12:39:11 354  
12:39:11 355  PROCEDURE UPDATE_CHARGE_STATUS (
12:39:11 356  /*
12:39:11 357  Throws exceptions:
12:39:11 358  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 359  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 360  */
12:39:11 361  	in_charge_id	    IN CHARGE.ID%TYPE,
12:39:11 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
12:39:11 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
12:39:11 364  ) AS
12:39:11 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
12:39:11 366  -- EXCEPTIONS
12:39:11 367  BAD_CHARGE_ID	     EXCEPTION;
12:39:11 368  BAD_STATUS_ID	     EXCEPTION;
12:39:11 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 370  BEGIN
12:39:11 371  
12:39:11 372  	IF in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_OPENED
12:39:11 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_PROCESSED
12:39:11 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
12:39:11 375  	  RAISE BAD_STATUS_ID;
12:39:11 376  	END IF;
12:39:11 377  
12:39:11 378  	PROCS_CHARGE_CRU_V16.UPDATE_CHARGE(
12:39:11 379  	  in_charge_id	      => in_charge_id,
12:39:11 380  	  in_charge_status_id => in_charge_status_id,
12:39:11 381  	  in_updated_by       => in_updated_by
12:39:11 382  	);
12:39:11 383  
12:39:11 384  	IF SQL%ROWCOUNT = 0 THEN
12:39:11 385  	  RAISE BAD_CHARGE_ID;
12:39:11 386  	END IF;
12:39:11 387  
12:39:11 388  EXCEPTION
12:39:11 389  WHEN BAD_CHARGE_ID THEN
12:39:11 390  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 391  	  SPROC_NAME, 'No such charge');
12:39:11 392  WHEN BAD_STATUS_ID THEN
12:39:11 393  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 394  	  SPROC_NAME, 'Bad status id');
12:39:11 395  WHEN OTHERS THEN
12:39:11 396  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 398  END UPDATE_CHARGE_STATUS;
12:39:11 399  
12:39:11 400  FUNCTION IS_CHARGE_COLLECTED (
12:39:11 401  /*
12:39:11 402  Throws:
12:39:11 403  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 404  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 405  Returns:
12:39:11 406  GLOBAL_CONST.TRUE if transaction collected,
12:39:11 407  GLOBAL_CONST.FALSE else
12:39:11 408  */
12:39:11 409  	in_charge_id IN NUMBER
12:39:11 410  ) RETURN NUMBER AS
12:39:11 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
12:39:11 412  -- VARIABLES
12:39:11 413  var_transaction_id NUMBER;
12:39:11 414  is_transaction_collected NUMBER;
12:39:11 415  -- EXCEPTIONS
12:39:11 416  BAD_CHARGE_ID	       EXCEPTION;
12:39:11 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
12:39:11 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
12:39:11 419  BEGIN
12:39:11 420  
12:39:11 421  	BEGIN
12:39:11 422  	  SELECT
12:39:11 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
12:39:11 424  	  FROM
12:39:11 425  	    CHARGE
12:39:11 426  	  WHERE
12:39:11 427  	    CHARGE.ID = in_charge_id;
12:39:11 428  	  EXCEPTION
12:39:11 429  	    WHEN NO_DATA_FOUND THEN
12:39:11 430  	      RAISE BAD_CHARGE_ID;
12:39:11 431  	END;
12:39:11 432  
12:39:11 433  	BEGIN
12:39:11 434  	  is_transaction_collected := PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(var_transaction_id);
12:39:11 435  	  EXCEPTION
12:39:11 436  	    WHEN OTHERS THEN
12:39:11 437  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
12:39:11 439  	END;
12:39:11 440  
12:39:11 441  	RETURN is_transaction_collected;
12:39:11 442  
12:39:11 443  EXCEPTION
12:39:11 444  WHEN BAD_CHARGE_ID THEN
12:39:11 445  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 446  	  SPROC_NAME, 'No such charge');
12:39:11 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
12:39:11 448  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
12:39:11 450  WHEN OTHERS THEN
12:39:11 451  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 453  END;
12:39:11 454  
12:39:11 455  PROCEDURE GET_COLLECTED_CHARGES (
12:39:11 456  /*
12:39:11 457  Throws exceptions:
12:39:11 458  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 459  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 460  */
12:39:11 461  	in_invoice_id  IN NUMBER,
12:39:11 462  	out_result_set OUT SYS_REFCURSOR
12:39:11 463  ) AS
12:39:11 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
12:39:11 465  -- VARIABLES
12:39:11 466  temp_invoice_id NUMBER;
12:39:11 467  -- EXCEPTIONS
12:39:11 468  BAD_INVOICE_ID  EXCEPTION;
12:39:11 469  BEGIN
12:39:11 470  
12:39:11 471  	-- Check that invoice exists
12:39:11 472  	BEGIN
12:39:11 473  	  SELECT
12:39:11 474  	    INVOICE.ID into temp_invoice_id
12:39:11 475  	  FROM
12:39:11 476  	    INVOICE
12:39:11 477  	  WHERE
12:39:11 478  	    INVOICE.ID = in_invoice_id;
12:39:11 479  	  EXCEPTION
12:39:11 480  	    WHEN NO_DATA_FOUND THEN
12:39:11 481  	      RAISE BAD_INVOICE_ID;
12:39:11 482  	END;
12:39:11 483  
12:39:11 484  	-- Select charges
12:39:11 485  	OPEN out_result_set FOR
12:39:11 486  	SELECT
12:39:11 487  	  CHARGE.ID,
12:39:11 488  	  CHARGE.TRANSACTION_ID,
12:39:11 489  	  CHARGE.INSTRUMENT_ID,
12:39:11 490  	  CHARGE.INSTRUMENT_TYPE_ID,
12:39:11 491  	  CHARGE.CHARGE_AMOUNT,
12:39:11 492  	  CHARGE.CREATE_DATE,
12:39:11 493  	  CHARGE.CREATED_BY,
12:39:11 494  	  CHARGE.INVOICE_ID
12:39:11 495  	FROM
12:39:11 496  	  CHARGE
12:39:11 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
12:39:11 498  	WHERE
12:39:11 499  	  CHARGE.INVOICE_ID = in_invoice_id
12:39:11 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
12:39:11 501  	  AND PROCS_CHARGE_V16.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 502  
12:39:11 503  EXCEPTION
12:39:11 504  WHEN BAD_INVOICE_ID THEN
12:39:11 505  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 506  	  SPROC_NAME, 'No such invoice');
12:39:11 507  WHEN OTHERS THEN
12:39:11 508  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 510  END GET_COLLECTED_CHARGES;
12:39:11 511  
12:39:11 512  END PROCS_CHARGE_V16;
12:39:11 513  .
12:39:11 SQL> /

Package body created.

Elapsed: 00:00:00.19
12:39:11 SQL> 
12:39:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V16" AS
12:39:11   2  
12:39:11   3  PROCEDURE START_SUBSCRIPTION_CREATION (
12:39:11   4  	in_group_id	      IN NUMBER,
12:39:11   5  	in_created_by	      IN VARCHAR2,
12:39:11   6  	in_offer_chain_id     IN NUMBER,
12:39:11   7  	in_instrument_type_id IN NUMBER,
12:39:11   8  	in_instrument_id      IN NUMBER,
12:39:11   9  	in_agent_id	      IN NUMBER,
12:39:11  10  	in_note 	      IN VARCHAR2,
12:39:11  11  	out_subscription_id   OUT NUMBER,
12:39:11  12  	out_invoice_id	      OUT NUMBER,
12:39:11  13  	out_new_license_id    OUT NUMBER,
12:39:11  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
12:39:11  15  ) AS
12:39:11  16  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
12:39:11  17  -- VARIABLES
12:39:11  18  var_account_id		 NUMBER;
12:39:11  19  var_account_status	 NUMBER;
12:39:11  20  var_offer_chain_status_id  NUMBER;
12:39:11  21  var_is_gift_certificate	 NUMBER;
12:39:11  22  var_is_for_redemption	 NUMBER;
12:39:11  23  var_same_offer_chains_num  NUMBER;
12:39:11  24  var_max_concurrent_subscrs NUMBER;
12:39:11  25  var_first_offer_id	 NUMBER;
12:39:11  26  var_new_invoice_id	 NUMBER;
12:39:11  27  var_new_subscription_id	 NUMBER;
12:39:11  28  var_date			 DATE := SYSDATE;
12:39:11  29  var_account_tax_exempt_id  VARCHAR2(255);
12:39:11  30  var_concur_subscription_id NUMBER;
12:39:11  31  -- EXCEPTIONS
12:39:11  32  BAD_GROUP_ID		    EXCEPTION;
12:39:11  33  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
12:39:11  34  BAD_OFFER_CHAIN		    EXCEPTION;
12:39:11  35  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
12:39:11  36  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
12:39:11  37  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
12:39:11  38  LIMIT_REACHED		    EXCEPTION;
12:39:11  39  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
12:39:11  40  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
12:39:11  41  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
12:39:11  42  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
12:39:11  43  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
12:39:11  44  CAN_NOT_CREATE_NOTE	    EXCEPTION;
12:39:11  45  
12:39:11  46  EXCEPTION_MESSAGE VARCHAR2(1024);
12:39:11  47  BEGIN
12:39:11  48  
12:39:11  49  	-- Get account id and status
12:39:11  50  	BEGIN
12:39:11  51  	  SELECT
12:39:11  52  	    ACCOUNT.ID,
12:39:11  53  	    ACCOUNT.ACCOUNT_STATUS_ID,
12:39:11  54  	    ACCOUNT.TAX_EXEMPT_ID
12:39:11  55  	    into
12:39:11  56  	    var_account_id,
12:39:11  57  	    var_account_status,
12:39:11  58  	    var_account_tax_exempt_id
12:39:11  59  	  FROM
12:39:11  60  	    ACCOUNT
12:39:11  61  	  WHERE
12:39:11  62  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:11  63  	  EXCEPTION
12:39:11  64  	  WHEN NO_DATA_FOUND THEN
12:39:11  65  	    RAISE BAD_GROUP_ID;
12:39:11  66  	END;
12:39:11  67  
12:39:11  68  	-- Could not create subscription for disabled account
12:39:11  69  	IF var_account_status = GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
12:39:11  70  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
12:39:11  71  	END IF;
12:39:11  72  
12:39:11  73  	-- Get offer chain status
12:39:11  74  	BEGIN
12:39:11  75  	  SELECT
12:39:11  76  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
12:39:11  77  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
12:39:11  78  	    into
12:39:11  79  	    var_offer_chain_status_id,
12:39:11  80  	    var_is_gift_certificate
12:39:11  81  	  FROM
12:39:11  82  	    OFFER_CHAIN
12:39:11  83  	  WHERE
12:39:11  84  	    OFFER_CHAIN.ID = in_offer_chain_id;
12:39:11  85  
12:39:11  86  	  EXCEPTION
12:39:11  87  	    WHEN NO_DATA_FOUND THEN
12:39:11  88  	      RAISE BAD_OFFER_CHAIN;
12:39:11  89  	END;
12:39:11  90  
12:39:11  91  	-- Could not subscribe to inactive/disabled offer chain
12:39:11  92  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
12:39:11  93  	  RAISE BAD_OFFER_CHAIN_STATUS;
12:39:11  94  	END IF;
12:39:11  95  
12:39:11  96  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
12:39:11  97  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V16.TRUE THEN
12:39:11  98  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
12:39:11  99  	END IF;
12:39:11 100  
12:39:11 101  	-- check if the OC is for Redemption:
12:39:11 102  	SELECT
12:39:11 103  	  COUNT(*) into var_is_for_redemption
12:39:11 104  	FROM
12:39:11 105  	  OFFER_CHAIN_ELIGIBILITY
12:39:11 106  	WHERE
12:39:11 107  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 108  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
12:39:11 109  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
12:39:11 110  
12:39:11 111  	IF var_is_for_redemption > 0 THEN
12:39:11 112  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
12:39:11 113  	END IF;
12:39:11 114  
12:39:11 115  	SELECT
12:39:11 116  	  COUNT(*) into var_same_offer_chains_num
12:39:11 117  	FROM
12:39:11 118  	  SUBSCRIPTION
12:39:11 119  	WHERE
12:39:11 120  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:11 121  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 122  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
12:39:11 123  
12:39:11 124  	-- ELIGIBILITY LOGIC CHANGED TO:
12:39:11 125  	-- FOR EACH offer chain eligibility rule in OC:
12:39:11 126  	--   IF offer chain eligibility rule fails:
12:39:11 127  	--     deny purchase;
12:39:11 128  	--   END IF
12:39:11 129  	-- END FOR
12:39:11 130  	-- FOR EACH product eligibility rule in OC:
12:39:11 131  	--   IF product eligibilty rule fails:
12:39:11 132  	--     deny purchase;
12:39:11 133  	--   END IF
12:39:11 134  	-- END FOR
12:39:11 135  	-- allow purchase;
12:39:11 136  
12:39:11 137  	-- if user have any active existing subscriptions to the offer chain
12:39:11 138  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
12:39:11 139  	-- then deny purchase
12:39:11 140  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
12:39:11 141  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V16.INFINITY
12:39:11 142  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
12:39:11 143  	  -- Find first concurrent subscription id:
12:39:11 144  	  SELECT
12:39:11 145  	    ID into var_concur_subscription_id
12:39:11 146  	  FROM (
12:39:11 147  	    SELECT
12:39:11 148  	      ID
12:39:11 149  	    FROM
12:39:11 150  	      SUBSCRIPTION
12:39:11 151  	    WHERE
12:39:11 152  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:11 153  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 154  	      AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 155  	    ORDER BY
12:39:11 156  	      ID
12:39:11 157  	  )
12:39:11 158  	  WHERE
12:39:11 159  	    ROWNUM <= 1;
12:39:11 160  	  RAISE LIMIT_REACHED;
12:39:11 161  	END IF;
12:39:11 162  
12:39:11 163  	-- if user does not have any active existing subscriptions to the offer chain
12:39:11 164  	-- and if product from the offer chain is already owned from another offer chain
12:39:11 165  	-- then deny purchase
12:39:11 166  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V16.FALSE) THEN
12:39:11 167  	  FOR f_account_offer_chains IN (
12:39:11 168  	    SELECT DISTINCT
12:39:11 169  	      OFFER_CHAIN_ID
12:39:11 170  	    FROM
12:39:11 171  	      SUBSCRIPTION
12:39:11 172  	    WHERE
12:39:11 173  	      ACCOUNT_ID = var_account_id
12:39:11 174  	      AND (
12:39:11 175  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 176  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED)
12:39:11 177  	  )
12:39:11 178  	  LOOP
12:39:11 179  	    IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(
12:39:11 180  	      in_offer_chain_1	       => in_offer_chain_id,
12:39:11 181  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
12:39:11 182  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V16.TRUE
12:39:11 183  	    ) = GLOBAL_CONSTANTS_V16.TRUE THEN
12:39:11 184  
12:39:11 185  	      -- Find first concurrent subscription id:
12:39:11 186  	      SELECT
12:39:11 187  		ID into var_concur_subscription_id
12:39:11 188  	      FROM (
12:39:11 189  		SELECT
12:39:11 190  		  ID
12:39:11 191  		FROM
12:39:11 192  		  SUBSCRIPTION
12:39:11 193  		WHERE
12:39:11 194  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:11 195  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
12:39:11 196  		  AND (
12:39:11 197  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 198  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
12:39:11 199  		  )
12:39:11 200  		ORDER BY
12:39:11 201  		  ID
12:39:11 202  	      )
12:39:11 203  	      WHERE
12:39:11 204  		ROWNUM <= 1;
12:39:11 205  
12:39:11 206  	      RAISE PRODUCT_ALREADY_PURCHASED;
12:39:11 207  	    END IF;
12:39:11 208  	  END LOOP;
12:39:11 209  	END IF;
12:39:11 210  
12:39:11 211  	BEGIN
12:39:11 212  	  PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
12:39:11 213  	  EXCEPTION
12:39:11 214  	    WHEN OTHERS THEN
12:39:11 215  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 216  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
12:39:11 217  	END;
12:39:11 218  
12:39:11 219  	BEGIN
12:39:11 220  	  PROCS_INVOICE_V16.CREATE_INVOICE(
12:39:11 221  	    in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
12:39:11 222  	    in_created_by     => in_created_by,
12:39:11 223  	    in_tax_exempt_id  => var_account_tax_exempt_id,
12:39:11 224  	    out_invoice_id    => var_new_invoice_id
12:39:11 225  	  );
12:39:11 226  	  EXCEPTION
12:39:11 227  	    WHEN OTHERS THEN
12:39:11 228  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 229  	      RAISE CAN_NOT_CREATE_INVOICE;
12:39:11 230  	END;
12:39:11 231  
12:39:11 232  	BEGIN
12:39:11 233  	  PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
12:39:11 234  	    in_invoice_id => var_new_invoice_id,
12:39:11 235  	    in_offer_id   => var_first_offer_id,
12:39:11 236  	    in_created_by => in_created_by
12:39:11 237  	  );
12:39:11 238  	  EXCEPTION
12:39:11 239  	    WHEN OTHERS THEN
12:39:11 240  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 241  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
12:39:11 242  	END;
12:39:11 243  
12:39:11 244  	PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION(
12:39:11 245  	  out_subscription_id	    => var_new_subscription_id,
12:39:11 246  	  in_account_id 	    => var_account_id,
12:39:11 247  	  in_purchase_date	    => var_date,
12:39:11 248  	  in_offer_chain_id	    => in_offer_chain_id,
12:39:11 249  	  in_created_by 	    => in_created_by,
12:39:11 250  	  in_instrument_type_id     => in_instrument_type_id,
12:39:11 251  	  in_instrument_id	    => in_instrument_id,
12:39:11 252  	  in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 253  	);
12:39:11 254  
12:39:11 255  	BEGIN
12:39:11 256  	  PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
12:39:11 257  	    in_subscription_id => var_new_subscription_id,
12:39:11 258  	    in_agent_id        => in_agent_id,
12:39:11 259  	    in_note	       => in_note,
12:39:11 260  	    in_created_by      => in_created_by
12:39:11 261  	  );
12:39:11 262  	  EXCEPTION
12:39:11 263  	   WHEN OTHERS THEN
12:39:11 264  	     EXCEPTION_MESSAGE := SQLERRM;
12:39:11 265  	     RAISE CAN_NOT_CREATE_NOTE;
12:39:11 266  	END;
12:39:11 267  
12:39:11 268  	BEGIN
12:39:11 269  	  PROCS_LICENSE_V16.CREATE_LICENSE(
12:39:11 270  	    in_status_id		=> GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
12:39:11 271  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 272  	    in_start_date		=> var_date,
12:39:11 273  	    in_end_date 		=> NULL, -- Will be calculated automatically
12:39:11 274  	    in_offer_id 		=> var_first_offer_id,
12:39:11 275  	    in_subscription_id		=> var_new_subscription_id,
12:39:11 276  	    in_invoice_id		=> var_new_invoice_id,
12:39:11 277  	    in_created_by		=> in_created_by,
12:39:11 278  	    in_is_extension		=> GLOBAL_CONSTANTS_V16.FALSE,
12:39:11 279  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
12:39:11 280  	    in_current_offer_recurr_num => 1,
12:39:11 281  	    out_license_id		=> out_new_license_id
12:39:11 282  	  );
12:39:11 283  	  EXCEPTION
12:39:11 284  	    WHEN OTHERS THEN
12:39:11 285  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 286  	      RAISE CAN_NOT_CREATE_LICENSE;
12:39:11 287  	END;
12:39:11 288  
12:39:11 289  	out_subscription_id := var_new_subscription_id;
12:39:11 290  	out_invoice_id := var_new_invoice_id;
12:39:11 291  
12:39:11 292  EXCEPTION
12:39:11 293  WHEN BAD_OFFER_CHAIN_STATUS THEN
12:39:11 294  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 295  	  SPROC_NAME, 'Offer chain is not active');
12:39:11 296  WHEN LIMIT_REACHED THEN
12:39:11 297  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
12:39:11 298  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
12:39:11 299  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
12:39:11 300  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 301  	  SPROC_NAME, 'Can not create subsscription for disabled account');
12:39:11 302  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
12:39:11 303  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 304  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
12:39:11 305  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
12:39:11 306  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 307  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
12:39:11 308  WHEN BAD_OFFER_CHAIN THEN
12:39:11 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 310  	  SPROC_NAME, 'No such offer chain');
12:39:11 311  WHEN PRODUCT_ALREADY_PURCHASED THEN
12:39:11 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
12:39:11 313  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
12:39:11 314  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
12:39:11 315  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 316  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
12:39:11 317  WHEN CAN_NOT_CREATE_INVOICE THEN
12:39:11 318  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 319  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
12:39:11 320  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
12:39:11 321  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 322  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
12:39:11 323  WHEN CAN_NOT_CREATE_LICENSE THEN
12:39:11 324  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 325  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
12:39:11 326  WHEN BAD_GROUP_ID THEN
12:39:11 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 328  	  SPROC_NAME, 'Bad group id');
12:39:11 329  WHEN CAN_NOT_CREATE_NOTE THEN
12:39:11 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 331  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
12:39:11 332  WHEN OTHERS THEN
12:39:11 333  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 334  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 335  END START_SUBSCRIPTION_CREATION;
12:39:11 336  
12:39:11 337  /******************************************************************************/
12:39:11 338  
12:39:11 339  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
12:39:11 340  	in_subscription_id    IN NUMBER,
12:39:11 341  	in_invoice_id	      IN NUMBER,
12:39:11 342  	in_instrument_type_id IN NUMBER,
12:39:11 343  	in_instrument_id      IN NUMBER,
12:39:11 344  	in_created_by	      IN VARCHAR2
12:39:11 345  ) AS
12:39:11 346  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
12:39:11 347  -- VARIABLES
12:39:11 348  var_invoice_amount     NUMBER(10, 2);
12:39:11 349  var_new_transaction_id NUMBER;
12:39:11 350  var_new_charge_id      NUMBER;
12:39:11 351  -- EXCEPTIONS
12:39:11 352  CAN_NOT_USE_FCINSTR	  EXCEPTION;
12:39:11 353  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
12:39:11 354  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
12:39:11 355  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
12:39:11 356  
12:39:11 357  EXCEPTION_MESSAGE VARCHAR2(1024);
12:39:11 358  BEGIN
12:39:11 359  
12:39:11 360  	-- Calculate invoice amount ( + discounts, taxes)
12:39:11 361  	BEGIN
12:39:11 362  	  PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(
12:39:11 363  	    in_invoice_id => in_invoice_id,
12:39:11 364  	    out_amount	  => var_invoice_amount
12:39:11 365  	  );
12:39:11 366  	  EXCEPTION
12:39:11 367  	   WHEN OTHERS THEN
12:39:11 368  	     EXCEPTION_MESSAGE := SQLERRM;
12:39:11 369  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
12:39:11 370  	END;
12:39:11 371  
12:39:11 372  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT
12:39:11 373  	  AND var_invoice_amount > 0 THEN
12:39:11 374  	  RAISE CAN_NOT_USE_FCINSTR;
12:39:11 375  	END IF;
12:39:11 376  
12:39:11 377  	IF var_invoice_amount = 0 THEN
12:39:11 378  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
12:39:11 379  	  PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
12:39:11 380  	    in_invoice_id		   => in_invoice_id,
12:39:11 381  	    in_updated_by		   => in_created_by,
12:39:11 382  	    in_invoice_status_id	   => GLOBAL_STATUSES_V16.INVOICE_CLOSED
12:39:11 383  	  );
12:39:11 384  	ELSE
12:39:11 385  	  -- Create transaction and charge
12:39:11 386  	  BEGIN
12:39:11 387  	    PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
12:39:11 388  	      in_transaction_id  => NULL,
12:39:11 389  	      in_status_id	 => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
12:39:11 390  	      in_amount 	 => var_invoice_amount,
12:39:11 391  	      in_created_by	 => in_created_by,
12:39:11 392  	      in_order_id	 => NULL,
12:39:11 393  	      out_transaction_id => var_new_transaction_id
12:39:11 394  	    );
12:39:11 395  	    EXCEPTION
12:39:11 396  	      WHEN OTHERS THEN
12:39:11 397  		EXCEPTION_MESSAGE := SQLERRM;
12:39:11 398  		RAISE CAN_NOT_CREATE_TRANSACTION;
12:39:11 399  	  END;
12:39:11 400  
12:39:11 401  	  BEGIN
12:39:11 402  	    PROCS_CHARGE_V16.CREATE_CHARGE(
12:39:11 403  	      in_invoice_id	    => in_invoice_id,
12:39:11 404  	      in_transaction_id     => var_new_transaction_id,
12:39:11 405  	      in_instrument_type_id => in_instrument_type_id,
12:39:11 406  	      in_instrument_id	    => in_instrument_id,
12:39:11 407  	      in_charge_amount	    => var_invoice_amount,
12:39:11 408  	      in_created_by	    => in_created_by,
12:39:11 409  	      in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
12:39:11 410  	      out_charge_id	    => var_new_charge_id
12:39:11 411  	    );
12:39:11 412  	    EXCEPTION
12:39:11 413  	      WHEN OTHERS THEN
12:39:11 414  		EXCEPTION_MESSAGE := SQLERRM;
12:39:11 415  		RAISE CAN_NOT_CREATE_CHARGE;
12:39:11 416  	  END;
12:39:11 417  	END IF;
12:39:11 418  
12:39:11 419  EXCEPTION
12:39:11 420  WHEN CAN_NOT_USE_FCINSTR THEN
12:39:11 421  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 422  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
12:39:11 423  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
12:39:11 424  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 425  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
12:39:11 426  WHEN CAN_NOT_CREATE_TRANSACTION THEN
12:39:11 427  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 428  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
12:39:11 429  WHEN CAN_NOT_CREATE_CHARGE THEN
12:39:11 430  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 431  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
12:39:11 432  WHEN OTHERS THEN
12:39:11 433  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 434  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 435  END FINALIZE_SUBSCRIPTION_CREATION;
12:39:11 436  
12:39:11 437  /******************************************************************************/
12:39:11 438  
12:39:11 439  PROCEDURE SUSPEND_SUBSCRIPTION(
12:39:11 440  /*
12:39:11 441  Throws exceptions:
12:39:11 442  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 443  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 444  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 445  */
12:39:11 446  	  in_subs_id	IN NUMBER,
12:39:11 447  	  in_updated_by IN VARCHAR2
12:39:11 448  ) AS
12:39:11 449  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
12:39:11 450  var_subscription_status_id  NUMBER;
12:39:11 451  var_license_id		  NUMBER;
12:39:11 452  var_offer_id		  NUMBER;
12:39:11 453  var_license_start_date	  DATE;
12:39:11 454  var_license_end_date	  DATE;
12:39:11 455  
12:39:11 456  var_entitlement_dupration   VARCHAR2(30);
12:39:11 457  var_d_entitlement_dupration NUMBER;
12:39:11 458  
12:39:11 459  var_ym_interval INTERVAL YEAR TO MONTH;
12:39:11 460  var_ds_interval INTERVAL DAY(3) TO SECOND;
12:39:11 461  
12:39:11 462  -- EXCEPTIONS
12:39:11 463  BAD_SUBSCRIPTION_ID     EXCEPTION;
12:39:11 464  BAD_SUBSCRIPTION_STATUS EXCEPTION;
12:39:11 465  NO_LICENSE_FOUND	      EXCEPTION;
12:39:11 466  NO_OFFER_FOUND	      EXCEPTION;
12:39:11 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
12:39:11 468  BEGIN
12:39:11 469  	-- TODO: Finish this prcedure (in Phase II)
12:39:11 470  
12:39:11 471  	-- Get subscription by id. FAULT if no such subscription.
12:39:11 472  	-- begin TX
12:39:11 473  	--   Get for update associated license (subscription.license_id). FAULT if not found.
12:39:11 474  	--   Set status to PROCESSED.
12:39:11 475  	--   updated record.
12:39:11 476  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
12:39:11 477  	--   new subscription status is SUSPENDED.
12:39:11 478  	--   suspend_date is now.
12:39:11 479  	--   update subscription record.
12:39:11 480  	-- end TX
12:39:11 481  
12:39:11 482  	BEGIN
12:39:11 483  	  SELECT
12:39:11 484  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
12:39:11 485  	  FROM
12:39:11 486  	    SUBSCRIPTION
12:39:11 487  	  WHERE
12:39:11 488  	    SUBSCRIPTION.ID = in_subs_id;
12:39:11 489  	  EXCEPTION
12:39:11 490  	  WHEN NO_DATA_FOUND THEN
12:39:11 491  	    RAISE BAD_SUBSCRIPTION_ID;
12:39:11 492  	END;
12:39:11 493  
12:39:11 494  	IF var_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE THEN
12:39:11 495  	  RAISE BAD_SUBSCRIPTION_STATUS;
12:39:11 496  	END IF;
12:39:11 497  
12:39:11 498  	BEGIN
12:39:11 499  	  SELECT
12:39:11 500  	    LICENSE.ID,
12:39:11 501  	    LICENSE.OFFER_ID,
12:39:11 502  	    LICENSE.START_DATE
12:39:11 503  	    into
12:39:11 504  	    var_license_id,
12:39:11 505  	    var_offer_id,
12:39:11 506  	    var_license_start_date
12:39:11 507  	  FROM
12:39:11 508  	    LICENSE
12:39:11 509  	  WHERE
12:39:11 510  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
12:39:11 511  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE;
12:39:11 512  	  EXCEPTION
12:39:11 513  	  WHEN NO_DATA_FOUND THEN
12:39:11 514  	    RAISE NO_LICENSE_FOUND;
12:39:11 515  	END;
12:39:11 516  
12:39:11 517  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:11 518  	  in_license_id        => var_license_id,
12:39:11 519  	  in_updated_by        => in_updated_by,
12:39:11 520  	  in_license_status_id => GLOBAL_STATUSES_V16.LICENSE_CLOSED
12:39:11 521  	);
12:39:11 522  
12:39:11 523  	BEGIN
12:39:11 524  	  SELECT
12:39:11 525  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
12:39:11 526  	  FROM
12:39:11 527  	    OFFER
12:39:11 528  	  WHERE
12:39:11 529  	    OFFER.ID = var_offer_id;
12:39:11 530  	  EXCEPTION
12:39:11 531  	  WHEN NO_DATA_FOUND THEN
12:39:11 532  	    RAISE NO_OFFER_FOUND;
12:39:11 533  	END;
12:39:11 534  
12:39:11 535  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
12:39:11 536  	var_ds_interval := substr(var_entitlement_dupration, 4);
12:39:11 537  
12:39:11 538  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
12:39:11 539  
12:39:11 540  	var_d_entitlement_dupration := var_license_end_date - current_date;
12:39:11 541  
12:39:11 542  	PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
12:39:11 543  	  in_subscription_id	       => in_subs_id,
12:39:11 544  	  in_updated_by 	       => in_updated_by,
12:39:11 545  	  in_suspend_date	       => SYSDATE,
12:39:11 546  	  in_subscription_status_id    => GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED,
12:39:11 547  	  in_days_remainning_ajustment => var_d_entitlement_dupration
12:39:11 548  	);
12:39:11 549  
12:39:11 550  EXCEPTION
12:39:11 551  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 552  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 553  	  SPROC_NAME, 'No such subscription');
12:39:11 554  WHEN BAD_SUBSCRIPTION_STATUS THEN
12:39:11 555  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 556  	  SPROC_NAME, 'Subscription is not active');
12:39:11 557  WHEN NO_LICENSE_FOUND THEN
12:39:11 558  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 559  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
12:39:11 560  WHEN NO_OFFER_FOUND THEN
12:39:11 561  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 562  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
12:39:11 563  WHEN OTHERS THEN
12:39:11 564  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 565  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 566  END SUSPEND_SUBSCRIPTION;
12:39:11 567  
12:39:11 568  /******************************************************************************/
12:39:11 569  
12:39:11 570  PROCEDURE REACTIVATE_SUBSCRIPTION (
12:39:11 571  	in_subscription_id IN  NUMBER,
12:39:11 572  	in_updated_by	   IN  VARCHAR2
12:39:11 573  ) AS
12:39:11 574  BEGIN
12:39:11 575  	-- TODO: finish this function (in Phase II)
12:39:11 576  	NULL;
12:39:11 577  END REACTIVATE_SUBSCRIPTION;
12:39:11 578  
12:39:11 579  /******************************************************************************/
12:39:11 580  
12:39:11 581  PROCEDURE GET_SUBSCRIPTION_INFO (
12:39:11 582  /*
12:39:11 583  Throws exceptions:
12:39:11 584  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 585  */
12:39:11 586  	  in_subscription_id  IN  NUMBER,
12:39:11 587  	  out_result_set      OUT SYS_REFCURSOR
12:39:11 588  ) AS
12:39:11 589  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
12:39:11 590  -- VARIABLES
12:39:11 591  temp_subscription_id NUMBER;
12:39:11 592  -- EXCEPTIONS
12:39:11 593  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 594  BEGIN
12:39:11 595  	-- Find subscription by id
12:39:11 596  	-- Return its details
12:39:11 597  
12:39:11 598  	BEGIN
12:39:11 599  	  SELECT
12:39:11 600  	    SUBSCRIPTION.ID into temp_subscription_id
12:39:11 601  	  FROM
12:39:11 602  	    SUBSCRIPTION
12:39:11 603  	  WHERE
12:39:11 604  	    SUBSCRIPTION.ID = in_subscription_id;
12:39:11 605  	  EXCEPTION
12:39:11 606  	    WHEN NO_DATA_FOUND THEN
12:39:11 607  	      RAISE BAD_SUBSCRIPTION_ID;
12:39:11 608  	END;
12:39:11 609  
12:39:11 610  	OPEN out_result_set FOR
12:39:11 611  	SELECT
12:39:11 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
12:39:11 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
12:39:11 614  	  SUBSCRIPTION.PURCHASE_DATE,
12:39:11 615  	  SUBSCRIPTION.SUSPEND_DATE,
12:39:11 616  	  SUBSCRIPTION.REACTIVATION_DATE,
12:39:11 617  	  SUBSCRIPTION.CANCELLATION_DATE,
12:39:11 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
12:39:11 619  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
12:39:11 620  	  OFFER_CHAIN.NAME,
12:39:11 621  	  OFFER_CHAIN.DESCRIPTION,
12:39:11 622  	  OFFER_CHAIN.PRODUCT_URI,
12:39:11 623  	  SUBSCRIPTION.INSTRUMENT_ID,
12:39:11 624  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
12:39:11 625  	  --PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_END_DATE(OFFER_CHAIN.ID, SUBSCRIPTION.PURCHASE_DATE) as "END_DATE",
12:39:11 626  	  PROCS_SUBSCRIPTION_V16.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
12:39:11 627  	  PROCS_SUBSCRIPTION_V16.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
12:39:11 628  	  PROCS_SUBSCRIPTION_V16.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
12:39:11 629  	  PROCS_SUBSCRIPTION_V16.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
12:39:11 630  	  (
12:39:11 631  	    SELECT
12:39:11 632  	      ACCOUNT.GROUP_ID
12:39:11 633  	      FROM ACCOUNT
12:39:11 634  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
12:39:11 635  	  ) as "GROUP_ID",
12:39:11 636  	  (
12:39:11 637  	    SELECT
12:39:11 638  	      MAX(ENTITLEMENT_END_DATE)
12:39:11 639  	      FROM LICENSE
12:39:11 640  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 641  	  )
12:39:11 642  	  as "ENT_END_DATE",
12:39:11 643  	  (
12:39:11 644  	    SELECT
12:39:11 645  	      MIN(START_DATE)
12:39:11 646  	      FROM LICENSE
12:39:11 647  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 648  	  )
12:39:11 649  	  as "ENT_START_DATE",
12:39:11 650  	  PROCS_SUBSCRIPTION_V16.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
12:39:11 651  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
12:39:11 652  	  GROUP_ACCOUNT.ID GA_ID,
12:39:11 653  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
12:39:11 654  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
12:39:11 655  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
12:39:11 656  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
12:39:11 657  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
12:39:11 658  	  GROUP_ACCOUNT.PHONE GA_PHONE,
12:39:11 659  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
12:39:11 660  	  GROUP_ACCOUNT.SEATS GA_SEATS,
12:39:11 661  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
12:39:11 662  	  GROUP_ACCOUNT.IP GA_IP,
12:39:11 663  	  PROCS_SUBSCRIPTION_V16.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code
12:39:11 664  	FROM
12:39:11 665  	  SUBSCRIPTION
12:39:11 666  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:11 667  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
12:39:11 668  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
12:39:11 669  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
12:39:11 670  	WHERE
12:39:11 671  	  SUBSCRIPTION.ID = in_subscription_id;
12:39:11 672  
12:39:11 673  EXCEPTION
12:39:11 674  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 675  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 676  	  SPROC_NAME, 'No such subscription');
12:39:11 677  WHEN OTHERS THEN
12:39:11 678  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 680  END GET_SUBSCRIPTION_INFO;
12:39:11 681  
12:39:11 682  /******************************************************************************/
12:39:11 683  
12:39:11 684  PROCEDURE GET_SUBSCRIPTION_INVOICES (
12:39:11 685  /*
12:39:11 686  Throws exceptions:
12:39:11 687  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 688  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 689  */
12:39:11 690  	in_subscription_id  IN	NUMBER,
12:39:11 691  	out_result_set	    OUT SYS_REFCURSOR
12:39:11 692  ) AS
12:39:11 693  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
12:39:11 694  temp_subscription_id NUMBER;
12:39:11 695  BEGIN
12:39:11 696  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
12:39:11 697  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
12:39:11 698  	--   for each license
12:39:11 699  	--     get associated invoice
12:39:11 700  	--     add to results list
12:39:11 701  	--   end loop
12:39:11 702  	-- end
12:39:11 703  
12:39:11 704  	SELECT
12:39:11 705  	  SUBSCRIPTION.ID into temp_subscription_id
12:39:11 706  	FROM
12:39:11 707  	  SUBSCRIPTION
12:39:11 708  	WHERE
12:39:11 709  	  SUBSCRIPTION.ID = in_subscription_id;
12:39:11 710  
12:39:11 711  	OPEN out_result_set FOR
12:39:11 712  	SELECT
12:39:11 713  	  INVOICE.ID,
12:39:11 714  	  INVOICE.INVOICE_STATUS_ID,
12:39:11 715  	  INVOICE.CREATE_DATE,
12:39:11 716  	  INVOICE.CREATED_BY,
12:39:11 717  	  INVOICE.UPDATE_DATE,
12:39:11 718  	  INVOICE.UPDATED_BY,
12:39:11 719  	  INVOICE.TAX_EXEMPT_ID
12:39:11 720  	FROM
12:39:11 721  	  LICENSE
12:39:11 722  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
12:39:11 723  	WHERE
12:39:11 724  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
12:39:11 725  
12:39:11 726  EXCEPTION
12:39:11 727  WHEN NO_DATA_FOUND THEN
12:39:11 728  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 729  	  SPROC_NAME, 'Could not find subscription with given ID');
12:39:11 730  WHEN OTHERS THEN
12:39:11 731  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 732  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 733  END GET_SUBSCRIPTION_INVOICES;
12:39:11 734  
12:39:11 735  /******************************************************************************/
12:39:11 736  
12:39:11 737  PROCEDURE GET_SUBSCRIPTION_NOTES (
12:39:11 738  /*
12:39:11 739  Throws exceptions:
12:39:11 740  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 741  */
12:39:11 742  	in_subscription_id  IN	NUMBER,
12:39:11 743  	out_result_set	    OUT SYS_REFCURSOR
12:39:11 744  ) AS
12:39:11 745  -- VARIABLES
12:39:11 746  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
12:39:11 747  temp_subscription_id NUMBER;
12:39:11 748  -- EXCEPTIONS
12:39:11 749  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 750  BEGIN
12:39:11 751  
12:39:11 752  	-- Check that subscription exists
12:39:11 753  	BEGIN
12:39:11 754  	  SELECT
12:39:11 755  	    SUBSCRIPTION.ID into temp_subscription_id
12:39:11 756  	  FROM
12:39:11 757  	    SUBSCRIPTION
12:39:11 758  	  WHERE
12:39:11 759  	    SUBSCRIPTION.ID = in_subscription_id;
12:39:11 760  	  EXCEPTION
12:39:11 761  	    WHEN NO_DATA_FOUND THEN
12:39:11 762  	      RAISE BAD_SUBSCRIPTION_ID;
12:39:11 763  	END;
12:39:11 764  
12:39:11 765  	OPEN out_result_set FOR
12:39:11 766  	SELECT
12:39:11 767  	  SUBSCRIPTION_NOTE.NOTE,
12:39:11 768  	  SUBSCRIPTION_NOTE.CREATED_BY,
12:39:11 769  	  SUBSCRIPTION_NOTE.CREATE_DATE
12:39:11 770  	FROM
12:39:11 771  	  SUBSCRIPTION_NOTE
12:39:11 772  	WHERE
12:39:11 773  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
12:39:11 774  	ORDER BY
12:39:11 775  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
12:39:11 776  
12:39:11 777  EXCEPTION
12:39:11 778  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 779  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 780  	  SPROC_NAME, 'No such subscription');
12:39:11 781  WHEN OTHERS THEN
12:39:11 782  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 784  END GET_SUBSCRIPTION_NOTES;
12:39:11 785  
12:39:11 786  /******************************************************************************/
12:39:11 787  
12:39:11 788  PROCEDURE ANNOTATE_SUBSCRIPTION (
12:39:11 789  /*
12:39:11 790  Throws exceptions:
12:39:11 791  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 792  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 793  */
12:39:11 794  	in_subscription_id IN  NUMBER,
12:39:11 795  	in_agent_id	   IN  NUMBER,
12:39:11 796  	in_note 	   IN  VARCHAR2,
12:39:11 797  	in_created_by	   IN  VARCHAR2
12:39:11 798  ) AS
12:39:11 799  -- VARIABLES
12:39:11 800  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
12:39:11 801  temp_subscription_id     NUMBER;
12:39:11 802  var_subscription_note_id NUMBER;
12:39:11 803  -- EXCEPTIONS
12:39:11 804  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 805  BEGIN
12:39:11 806  
12:39:11 807  	-- Check that subscription exists
12:39:11 808  	BEGIN
12:39:11 809  	  SELECT
12:39:11 810  	    SUBSCRIPTION.ID into temp_subscription_id
12:39:11 811  	  FROM
12:39:11 812  	    SUBSCRIPTION
12:39:11 813  	  WHERE
12:39:11 814  	    SUBSCRIPTION.ID = in_subscription_id;
12:39:11 815  	  EXCEPTION
12:39:11 816  	    WHEN NO_DATA_FOUND THEN
12:39:11 817  	      RAISE BAD_SUBSCRIPTION_ID;
12:39:11 818  	END;
12:39:11 819  
12:39:11 820  	PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION_NOTE(
12:39:11 821  	  inout_subscription_note_id => var_subscription_note_id,
12:39:11 822  	  in_agent_id		     => in_agent_id,
12:39:11 823  	  in_subscription_id	     => in_subscription_id,
12:39:11 824  	  in_note		     => in_note,
12:39:11 825  	  in_created_by 	     => in_created_by
12:39:11 826  	);
12:39:11 827  
12:39:11 828  EXCEPTION
12:39:11 829  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 830  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 831  	  SPROC_NAME, 'No such subscription');
12:39:11 832  WHEN OTHERS THEN
12:39:11 833  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 834  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 835  END ANNOTATE_SUBSCRIPTION;
12:39:11 836  
12:39:11 837  /******************************************************************************/
12:39:11 838  
12:39:11 839  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
12:39:11 840  /*
12:39:11 841  Throws exceptions:
12:39:11 842  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 843  */
12:39:11 844  	out_result_set OUT SYS_REFCURSOR
12:39:11 845  ) AS
12:39:11 846  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCELLING_SSCRPTN_REASONS';
12:39:11 847  BEGIN
12:39:11 848  
12:39:11 849  	OPEN out_result_set FOR
12:39:11 850  	SELECT
12:39:11 851  	  SUBSCRIPTION_CANCEL_REASON.ID,
12:39:11 852  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
12:39:11 853  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION
12:39:11 854  	FROM
12:39:11 855  	  SUBSCRIPTION_CANCEL_REASON
12:39:11 856  	WHERE
12:39:11 857  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCR_CANC_REASON_ACTIVE;
12:39:11 858  
12:39:11 859  EXCEPTION
12:39:11 860  WHEN OTHERS THEN
12:39:11 861  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 862  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 863  END GET_CANCELLING_SSCRPTN_REASONS;
12:39:11 864  
12:39:11 865  /******************************************************************************/
12:39:11 866  
12:39:11 867  FUNCTION GET_RENEWAL_DATE (
12:39:11 868  /*
12:39:11 869  Throws exceptions:
12:39:11 870  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 871  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 872  */
12:39:11 873  	in_subscription_id in NUMBER
12:39:11 874  ) RETURN DATE AS
12:39:11 875  -- VARIABLES
12:39:11 876  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
12:39:11 877  var_subscription_status NUMBER;
12:39:11 878  var_licenses_count      NUMBER;
12:39:11 879  var_license_end_date    DATE;
12:39:11 880  var_last_offer_id       NUMBER;
12:39:11 881  var_offer_chain_id      NUMBER;
12:39:11 882  var_last_license_id     NUMBER;
12:39:11 883  var_current_offer_index NUMBER;
12:39:11 884  var_current_offer_recurr_num NUMBER;
12:39:11 885  var_offer_recurr_num    NUMBER;
12:39:11 886  -- EXCEPTIONS
12:39:11 887  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 888  NO_LICENSES_FOUND EXCEPTION;
12:39:11 889  BEGIN
12:39:11 890  
12:39:11 891  	-- Get subscription id and offer chain id
12:39:11 892  	BEGIN
12:39:11 893  	  SELECT
12:39:11 894  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
12:39:11 895  	    SUBSCRIPTION.OFFER_CHAIN_ID
12:39:11 896  	    into
12:39:11 897  	    var_subscription_status,
12:39:11 898  	    var_offer_chain_id
12:39:11 899  	  FROM
12:39:11 900  	    SUBSCRIPTION
12:39:11 901  	  WHERE
12:39:11 902  	    SUBSCRIPTION.ID = in_subscription_id;
12:39:11 903  	  EXCEPTION
12:39:11 904  	    WHEN NO_DATA_FOUND THEN
12:39:11 905  	      RAISE BAD_SUBSCRIPTION_ID;
12:39:11 906  	END;
12:39:11 907  
12:39:11 908  	IF var_subscription_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE THEN
12:39:11 909  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
12:39:11 910  	  -- AND var_subscription_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
12:39:11 911  	  RETURN NULL;
12:39:11 912  	END IF;
12:39:11 913  
12:39:11 914  	BEGIN
12:39:11 915  	  SELECT
12:39:11 916  	    LICENSE_ID,
12:39:11 917  	    END_DATE,
12:39:11 918  	    OFFER_ID,
12:39:11 919  	    CURRENT_OFFER_INDEX,
12:39:11 920  	    CURRENT_OFFER_RECURR_NUM
12:39:11 921  	    into
12:39:11 922  	    var_last_license_id,
12:39:11 923  	    var_license_end_date,
12:39:11 924  	    var_last_offer_id,
12:39:11 925  	    var_current_offer_index,
12:39:11 926  	    var_current_offer_recurr_num
12:39:11 927  	  FROM
12:39:11 928  	    (
12:39:11 929  	      SELECT
12:39:11 930  		LICENSE.ID as "LICENSE_ID",
12:39:11 931  		LICENSE.END_DATE,
12:39:11 932  		LICENSE.OFFER_ID,
12:39:11 933  		LICENSE.CURRENT_OFFER_INDEX,
12:39:11 934  		LICENSE.CURRENT_OFFER_RECURR_NUM
12:39:11 935  	      FROM
12:39:11 936  		LICENSE
12:39:11 937  	      WHERE
12:39:11 938  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:11 939  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
12:39:11 940  	      ORDER BY END_DATE DESC
12:39:11 941  	    )
12:39:11 942  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
12:39:11 943  	  WHERE
12:39:11 944  	    ROWNUM <= 1;
12:39:11 945  
12:39:11 946  	  EXCEPTION
12:39:11 947  	    WHEN NO_DATA_FOUND THEN
12:39:11 948  	      -- RAISE NO_LICENSES_FOUND;
12:39:11 949  	      RETURN NULL;
12:39:11 950  	END;
12:39:11 951  
12:39:11 952  	SELECT
12:39:11 953  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
12:39:11 954  	FROM
12:39:11 955  	  OFFER_OFFER_CHAIN
12:39:11 956  	WHERE
12:39:11 957  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
12:39:11 958  	  AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
12:39:11 959  
12:39:11 960  	IF PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
12:39:11 961  	  AND var_offer_recurr_num = var_current_offer_recurr_num THEN
12:39:11 962  	  -- There is no next offer for this subscription
12:39:11 963  	  RETURN NULL;
12:39:11 964  	END IF;
12:39:11 965  
12:39:11 966  	RETURN var_license_end_date;
12:39:11 967  
12:39:11 968  EXCEPTION
12:39:11 969  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 970  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 971  	  SPROC_NAME, 'No such subscription');
12:39:11 972  WHEN NO_LICENSES_FOUND THEN
12:39:11 973  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 974  	  SPROC_NAME, 'No licenses found');
12:39:11 975  WHEN OTHERS THEN
12:39:11 976  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 977  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 978  END GET_RENEWAL_DATE;
12:39:11 979  
12:39:11 980  /******************************************************************************/
12:39:11 981  
12:39:11 982  FUNCTION GET_RECENT_CHARGE (
12:39:11 983  /*
12:39:11 984  Throws exceptions:
12:39:11 985  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 986  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 987  */
12:39:11 988  	in_subscription_id IN NUMBER
12:39:11 989  ) RETURN NUMBER AS
12:39:11 990  -- VARIABLES
12:39:11 991  SPROC_NAME	   CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
12:39:11 992  temp_subscription_id NUMBER;
12:39:11 993  var_recent_charge    NUMBER(10,2);
12:39:11 994  
12:39:11 995  -- EXCEPTIONS
12:39:11 996  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 997  BEGIN
12:39:11 998  
12:39:11 999  	BEGIN
12:39:11 1000  	   SELECT
12:39:11 1001  	     SUBSCRIPTION.ID into temp_subscription_id
12:39:11 1002  	   FROM
12:39:11 1003  	     SUBSCRIPTION
12:39:11 1004  	   WHERE
12:39:11 1005  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1006  	   EXCEPTION
12:39:11 1007  	     WHEN NO_DATA_FOUND THEN
12:39:11 1008  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 1009  	 END;
12:39:11 1010  
12:39:11 1011  	 BEGIN
12:39:11 1012  	   SELECT
12:39:11 1013  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
12:39:11 1014  	   FROM
12:39:11 1015  	     LICENSE
12:39:11 1016  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 1017  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
12:39:11 1018  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
12:39:11 1019  	   WHERE
12:39:11 1020  	     -- TODO: Review
12:39:11 1021  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_PROCESSED
12:39:11 1022  	     -- AND
12:39:11 1023  	     SUBSCRIPTION.ID = in_subscription_id
12:39:11 1024  	     AND CHARGE.CHARGE_AMOUNT >= 0
12:39:11 1025  	     AND ROWNUM <= 1
12:39:11 1026  	   ORDER BY
12:39:11 1027  	     LICENSE.ID ASC, CHARGE.ID DESC;
12:39:11 1028  	   EXCEPTION
12:39:11 1029  	     WHEN NO_DATA_FOUND THEN
12:39:11 1030  	       var_recent_charge := 0;
12:39:11 1031  	 END;
12:39:11 1032  
12:39:11 1033  	 RETURN var_recent_charge;
12:39:11 1034  
12:39:11 1035  EXCEPTION
12:39:11 1036  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 1037  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1038  	   SPROC_NAME, 'No such subscription');
12:39:11 1039  WHEN OTHERS THEN
12:39:11 1040  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1041  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1042  END GET_RECENT_CHARGE;
12:39:11 1043  
12:39:11 1044  /******************************************************************************/
12:39:11 1045  
12:39:11 1046  FUNCTION GET_BILLING_CYCLE (
12:39:11 1047  	 in_subscription_id IN NUMBER
12:39:11 1048  ) RETURN VARCHAR2 AS
12:39:11 1049  -- VARIABLES
12:39:11 1050  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
12:39:11 1051  temp_subscription_id NUMBER;
12:39:11 1052  var_offer_duration   VARCHAR2(30);
12:39:11 1053  
12:39:11 1054  -- EXCEPTIONS
12:39:11 1055  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 1056  BEGIN
12:39:11 1057  
12:39:11 1058  	 BEGIN
12:39:11 1059  	   SELECT
12:39:11 1060  	     SUBSCRIPTION.ID into temp_subscription_id
12:39:11 1061  	   FROM
12:39:11 1062  	     SUBSCRIPTION
12:39:11 1063  	   WHERE
12:39:11 1064  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1065  	   EXCEPTION
12:39:11 1066  	     WHEN NO_DATA_FOUND THEN
12:39:11 1067  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 1068  	 END;
12:39:11 1069  
12:39:11 1070  	 SELECT
12:39:11 1071  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
12:39:11 1072  	 FROM
12:39:11 1073  	   LICENSE
12:39:11 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 1075  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
12:39:11 1076  	 WHERE
12:39:11 1077  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_PROCESSED
12:39:11 1078  	   --AND
12:39:11 1079  	   SUBSCRIPTION.ID = in_subscription_id
12:39:11 1080  	   AND ROWNUM <= 1
12:39:11 1081  	 ORDER BY
12:39:11 1082  	   LICENSE.ID ASC;
12:39:11 1083  
12:39:11 1084  	 RETURN var_offer_duration;
12:39:11 1085  
12:39:11 1086  EXCEPTION
12:39:11 1087  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 1088  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1089  	   SPROC_NAME, 'No such subscription');
12:39:11 1090  WHEN OTHERS THEN
12:39:11 1091  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1092  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1093  END GET_BILLING_CYCLE;
12:39:11 1094  
12:39:11 1095  /******************************************************************************/
12:39:11 1096  
12:39:11 1097  PROCEDURE REFUND_SUBSCRIPTION (
12:39:11 1098  /*
12:39:11 1099  Throws exceptions:
12:39:11 1100  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 1101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1102  */
12:39:11 1103  	 in_subscription_id IN NUMBER,
12:39:11 1104  	 in_invoice_id	    IN NUMBER,
12:39:11 1105  	 in_refund_amount   IN NUMBER,
12:39:11 1106  	 in_note	    IN VARCHAR2,
12:39:11 1107  	 in_created_by	    IN VARCHAR2,
12:39:11 1108  	 out_charge_id	    OUT NUMBER
12:39:11 1109  ) AS
12:39:11 1110  -- VARIABLES
12:39:11 1111  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
12:39:11 1112  var_invoice_status_id  NUMBER;
12:39:11 1113  var_account_id	      NUMBER;
12:39:11 1114  var_account_status_id  NUMBER;
12:39:11 1115  var_new_transaction_id NUMBER;
12:39:11 1116  var_instrument_type_id NUMBER;
12:39:11 1117  var_instrument_id      NUMBER;
12:39:11 1118  var_new_charge_id      NUMBER;
12:39:11 1119  var_invoice_amount     NUMBER(10,2);
12:39:11 1120  var_refunds_before     NUMBER(10,2);
12:39:11 1121  var_charges_amount     NUMBER(10,2);
12:39:11 1122  -- EXCEPTIONS
12:39:11 1123  BAD_SUBSCRIPTION_ID	     EXCEPTION;
12:39:11 1124  ACCOUNT_IS_FROZEN	     EXCEPTION;
12:39:11 1125  BAD_INVOICE_ID		     EXCEPTION;
12:39:11 1126  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
12:39:11 1127  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
12:39:11 1128  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
12:39:11 1129  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
12:39:11 1130  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
12:39:11 1131  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
12:39:11 1132  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
12:39:11 1133  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
12:39:11 1134  EXCEPTION_MESSAGE	      VARCHAR2(1024);
12:39:11 1135  BEGIN
12:39:11 1136  
12:39:11 1137  	 BEGIN
12:39:11 1138  	   SELECT
12:39:11 1139  	     SUBSCRIPTION.INSTRUMENT_ID,
12:39:11 1140  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
12:39:11 1141  	     SUBSCRIPTION.ACCOUNT_ID
12:39:11 1142  	     into
12:39:11 1143  	     var_instrument_id,
12:39:11 1144  	     var_instrument_type_id,
12:39:11 1145  	     var_account_id
12:39:11 1146  	   FROM
12:39:11 1147  	     SUBSCRIPTION
12:39:11 1148  	   WHERE
12:39:11 1149  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1150  	   EXCEPTION
12:39:11 1151  	     WHEN NO_DATA_FOUND THEN
12:39:11 1152  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 1153  	 END;
12:39:11 1154  
12:39:11 1155  	 -- Check account status. It should not to be frozen
12:39:11 1156  	 SELECT
12:39:11 1157  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
12:39:11 1158  	 FROM
12:39:11 1159  	   ACCOUNT
12:39:11 1160  	 WHERE
12:39:11 1161  	   ACCOUNT.ID = var_account_id;
12:39:11 1162  
12:39:11 1163  	 IF var_account_status_id = GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
12:39:11 1164  	   RAISE ACCOUNT_IS_FROZEN;
12:39:11 1165  	 END IF;
12:39:11 1166  
12:39:11 1167  	 BEGIN
12:39:11 1168  	   SELECT
12:39:11 1169  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
12:39:11 1170  	   FROM
12:39:11 1171  	     INVOICE
12:39:11 1172  	   WHERE
12:39:11 1173  	     INVOICE.ID = in_invoice_id;
12:39:11 1174  	   EXCEPTION
12:39:11 1175  	     WHEN NO_DATA_FOUND THEN
12:39:11 1176  	       RAISE BAD_INVOICE_ID;
12:39:11 1177  	 END;
12:39:11 1178  
12:39:11 1179  	 IF var_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
12:39:11 1180  	   RAISE INVOICE_IS_NOT_CLOSED;
12:39:11 1181  	 END IF;
12:39:11 1182  
12:39:11 1183  	 BEGIN
12:39:11 1184  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
12:39:11 1185  	     in_invoice_id => in_invoice_id,
12:39:11 1186  	     out_amount    => var_invoice_amount
12:39:11 1187  	   );
12:39:11 1188  	   EXCEPTION
12:39:11 1189  	     WHEN OTHERS THEN
12:39:11 1190  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1191  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
12:39:11 1192  	 END;
12:39:11 1193  
12:39:11 1194  	 IF ( in_refund_amount > var_invoice_amount ) THEN
12:39:11 1195  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
12:39:11 1196  	 END IF;
12:39:11 1197  
12:39:11 1198  	 SELECT /*+ STAR_TRANSFORMATION */
12:39:11 1199  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
12:39:11 1200  	 FROM
12:39:11 1201  	   CHARGE
12:39:11 1202  	 WHERE
12:39:11 1203  	   CHARGE.INVOICE_ID = in_invoice_id
12:39:11 1204  	   AND (
12:39:11 1205  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
12:39:11 1206  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
12:39:11 1207  	   )
12:39:11 1208  	   AND CHARGE.CHARGE_AMOUNT < 0;
12:39:11 1209  
12:39:11 1210  	 -- Refunds are negative
12:39:11 1211  	 var_refunds_before := -var_refunds_before;
12:39:11 1212  
12:39:11 1213  	 var_charges_amount := 0;
12:39:11 1214  
12:39:11 1215  	 FOR f_processed_charges IN (
12:39:11 1216  	   SELECT
12:39:11 1217  	     CHARGE.CHARGE_AMOUNT
12:39:11 1218  	   FROM
12:39:11 1219  	     CHARGE
12:39:11 1220  	   WHERE
12:39:11 1221  	     CHARGE.INVOICE_ID = in_invoice_id
12:39:11 1222  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
12:39:11 1223  	 )
12:39:11 1224  	 LOOP
12:39:11 1225  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
12:39:11 1226  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
12:39:11 1227  	   END IF;
12:39:11 1228  	 END LOOP;
12:39:11 1229  
12:39:11 1230  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
12:39:11 1231  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
12:39:11 1232  	 END IF;
12:39:11 1233  
12:39:11 1234  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
12:39:11 1235  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
12:39:11 1236  	 END IF;
12:39:11 1237  
12:39:11 1238  	 BEGIN
12:39:11 1239  	   PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
12:39:11 1240  	     in_transaction_id	=> NULL,
12:39:11 1241  	     in_status_id	=> GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
12:39:11 1242  	     in_amount		=> -in_refund_amount,
12:39:11 1243  	     in_created_by	=> in_created_by,
12:39:11 1244  	     in_order_id	=> NULL,
12:39:11 1245  	     in_is_refund	=> GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 1246  	     out_transaction_id => var_new_transaction_id
12:39:11 1247  	   );
12:39:11 1248  	   EXCEPTION
12:39:11 1249  	     WHEN OTHERS THEN
12:39:11 1250  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1251  	       RAISE CAN_NOT_CREATE_TRANSACTION;
12:39:11 1252  	 END;
12:39:11 1253  
12:39:11 1254  	 BEGIN
12:39:11 1255  	   PROCS_CHARGE_V16.CREATE_CHARGE(
12:39:11 1256  	     in_invoice_id	   => in_invoice_id,
12:39:11 1257  	     in_transaction_id	   => var_new_transaction_id,
12:39:11 1258  	     in_instrument_type_id => var_instrument_type_id,
12:39:11 1259  	     in_instrument_id	   => var_instrument_id,
12:39:11 1260  	     in_charge_amount	   => -in_refund_amount,
12:39:11 1261  	     in_created_by	   => in_created_by,
12:39:11 1262  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
12:39:11 1263  	     out_charge_id	   => var_new_charge_id
12:39:11 1264  	   );
12:39:11 1265  	   EXCEPTION
12:39:11 1266  	     WHEN OTHERS THEN
12:39:11 1267  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1268  	       RAISE CAN_NOT_CREATE_CHARGE;
12:39:11 1269  	 END;
12:39:11 1270  
12:39:11 1271  	 IF in_note IS NOT NULL THEN
12:39:11 1272  	   BEGIN
12:39:11 1273  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
12:39:11 1274  	       in_subscription_id => in_subscription_id,
12:39:11 1275  	       in_agent_id	  => 0, -- AGENT_ID??
12:39:11 1276  	       in_note		  => in_note,
12:39:11 1277  	       in_created_by	  => in_created_by
12:39:11 1278  	     );
12:39:11 1279  	     EXCEPTION
12:39:11 1280  	       WHEN OTHERS THEN
12:39:11 1281  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1282  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
12:39:11 1283  	   END;
12:39:11 1284  	 END IF;
12:39:11 1285  
12:39:11 1286  	 out_charge_id := var_new_charge_id;
12:39:11 1287  
12:39:11 1288  EXCEPTION
12:39:11 1289  WHEN INVOICE_IS_NOT_CLOSED THEN
12:39:11 1290  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1291  	   SPROC_NAME, 'Invoice is not closed');
12:39:11 1292  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 1293  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1294  	   SPROC_NAME, 'No such subscription');
12:39:11 1295  WHEN ACCOUNT_IS_FROZEN THEN
12:39:11 1296  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1297  	   SPROC_NAME, 'Could not refund subscription for frozen account');
12:39:11 1298  WHEN BAD_INVOICE_ID THEN
12:39:11 1299  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1300  	   SPROC_NAME, 'No such invoice');
12:39:11 1301  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
12:39:11 1302  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1303  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
12:39:11 1304  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
12:39:11 1305  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1306  	   SPROC_NAME, 'Refund is greater than amount');
12:39:11 1307  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
12:39:11 1308  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1309  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
12:39:11 1310  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
12:39:11 1311  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1312  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
12:39:11 1313  WHEN CAN_NOT_CREATE_TRANSACTION THEN
12:39:11 1314  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1315  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
12:39:11 1316  WHEN CAN_NOT_CREATE_CHARGE THEN
12:39:11 1317  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1318  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
12:39:11 1319  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
12:39:11 1320  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1321  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
12:39:11 1322  WHEN OTHERS THEN
12:39:11 1323  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1324  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1325  END REFUND_SUBSCRIPTION;
12:39:11 1326  
12:39:11 1327  /******************************************************************************/
12:39:11 1328  
12:39:11 1329  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
12:39:11 1330  /*
12:39:11 1331  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 1332  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 1333  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1334  */
12:39:11 1335  	 in_subscription_id	 IN NUMBER,
12:39:11 1336  	 in_effective_start_date IN DATE,
12:39:11 1337  	 in_effective_end_date	 IN DATE,
12:39:11 1338  	 in_note		 IN VARCHAR2,
12:39:11 1339  	 in_updated_by		 IN VARCHAR2
12:39:11 1340  ) AS
12:39:11 1341  -- VARIABLES
12:39:11 1342  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
12:39:11 1343  temp_subscription_id	    NUMBER;
12:39:11 1344  var_current_license_id	    NUMBER;
12:39:11 1345  var_current_license_start_date DATE;
12:39:11 1346  var_current_license_end_date DATE;
12:39:11 1347  var_current_offer_id	    NUMBER;
12:39:11 1348  var_current_invoice_id	    NUMBER;
12:39:11 1349  var_current_date 	    DATE;
12:39:11 1350  var_current_offer_index	    NUMBER;
12:39:11 1351  var_current_offer_recurr_num NUMBER;
12:39:11 1352  var_account_tax_exempt_id    VARCHAR2(255);
12:39:11 1353  
12:39:11 1354  var_free_invoice_id NUMBER;
12:39:11 1355  var_free_license_id NUMBER;
12:39:11 1356  var_new_license_id  NUMBER;
12:39:11 1357  var_ext_license_id  NUMBER;
12:39:11 1358  -- EXCEPTIONS
12:39:11 1359  BAD_SUBSCRIPTION_ID	     EXCEPTION;
12:39:11 1360  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
12:39:11 1361  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
12:39:11 1362  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
12:39:11 1363  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
12:39:11 1364  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
12:39:11 1365  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
12:39:11 1366  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
12:39:11 1367  EXT_START_DATE_LATER_THEN_END EXCEPTION;
12:39:11 1368  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
12:39:11 1369  EXCEPTION_MESSAGE	     VARCHAR2(1024);
12:39:11 1370  BEGIN
12:39:11 1371  
12:39:11 1372  	 var_current_date := PROCS_COMMON_V16.NORMALIZE_DATE(SYSDATE);
12:39:11 1373  
12:39:11 1374  	 -- Check that subscription exists
12:39:11 1375  	 BEGIN
12:39:11 1376  	   SELECT
12:39:11 1377  	     SUBSCRIPTION.ID into temp_subscription_id
12:39:11 1378  	   FROM
12:39:11 1379  	     SUBSCRIPTION
12:39:11 1380  	   WHERE
12:39:11 1381  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1382  	   EXCEPTION
12:39:11 1383  	     WHEN NO_DATA_FOUND THEN
12:39:11 1384  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 1385  	 END;
12:39:11 1386  
12:39:11 1387  	 -- Get account tax exempt id
12:39:11 1388  	 SELECT DISTINCT
12:39:11 1389  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
12:39:11 1390  	 FROM
12:39:11 1391  	   ACCOUNT
12:39:11 1392  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
12:39:11 1393  	 WHERE
12:39:11 1394  	   SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1395  
12:39:11 1396  	 -- Select current data
12:39:11 1397  	 BEGIN
12:39:11 1398  	   SELECT
12:39:11 1399  	     LICENSE.ID,
12:39:11 1400  	     LICENSE.START_DATE,
12:39:11 1401  	     LICENSE.END_DATE,
12:39:11 1402  	     LICENSE.CURRENT_OFFER_INDEX,
12:39:11 1403  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
12:39:11 1404  	     OFFER.ID,
12:39:11 1405  	     INVOICE.ID
12:39:11 1406  	   INTO
12:39:11 1407  	     var_current_license_id,
12:39:11 1408  	     var_current_license_start_date,
12:39:11 1409  	     var_current_license_end_date,
12:39:11 1410  	     var_current_offer_index,
12:39:11 1411  	     var_current_offer_recurr_num,
12:39:11 1412  	     var_current_offer_id,
12:39:11 1413  	     var_current_invoice_id
12:39:11 1414  	   FROM
12:39:11 1415  	     LICENSE
12:39:11 1416  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 1417  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
12:39:11 1418  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
12:39:11 1419  	   WHERE
12:39:11 1420  	     SUBSCRIPTION.ID = in_subscription_id
12:39:11 1421  	     AND PROCS_COMMON_V16.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
12:39:11 1422  	     AND PROCS_COMMON_V16.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
12:39:11 1423  	     AND ROWNUM <= 1
12:39:11 1424  	   ORDER BY
12:39:11 1425  	     LICENSE.ID DESC;
12:39:11 1426  	   EXCEPTION
12:39:11 1427  	     WHEN NO_DATA_FOUND THEN
12:39:11 1428  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
12:39:11 1429  	 END;
12:39:11 1430  
12:39:11 1431  	 IF var_current_license_end_date < in_effective_start_date THEN
12:39:11 1432  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
12:39:11 1433  	 END IF;
12:39:11 1434  
12:39:11 1435  	 IF var_current_license_start_date > in_effective_start_date THEN
12:39:11 1436  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
12:39:11 1437  	 END IF;
12:39:11 1438  
12:39:11 1439  	 IF in_effective_start_date > in_effective_end_date THEN
12:39:11 1440  	   RAISE EXT_START_DATE_LATER_THEN_END;
12:39:11 1441  	 END IF;
12:39:11 1442  
12:39:11 1443  	 -- Closing curent license
12:39:11 1444  	 BEGIN
12:39:11 1445  	   PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:11 1446  	     in_license_id	   => var_current_license_id,
12:39:11 1447  	     in_updated_by	   => in_updated_by,
12:39:11 1448  	     in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
12:39:11 1449  	     in_end_date	   => in_effective_start_date,
12:39:11 1450  	     in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE
12:39:11 1451  	   );
12:39:11 1452  	   EXCEPTION
12:39:11 1453  	     WHEN OTHERS THEN
12:39:11 1454  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1455  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
12:39:11 1456  	 END;
12:39:11 1457  
12:39:11 1458  	 -- Creating new "free" invoice
12:39:11 1459  	 BEGIN
12:39:11 1460  	   PROCS_INVOICE_V16.CREATE_INVOICE(
12:39:11 1461  	     in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_CLOSED,
12:39:11 1462  	     in_created_by     => in_updated_by,
12:39:11 1463  	     in_tax_exempt_id  => var_account_tax_exempt_id,
12:39:11 1464  	     out_invoice_id    => var_free_invoice_id
12:39:11 1465  	   );
12:39:11 1466  	   EXCEPTION
12:39:11 1467  	     WHEN OTHERS THEN
12:39:11 1468  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1469  	       RAISE CAN_NOT_CREATE_INVOICE;
12:39:11 1470  	 END;
12:39:11 1471  
12:39:11 1472  	 -- Creating new "free" license
12:39:11 1473  	 BEGIN
12:39:11 1474  	   PROCS_LICENSE_V16.CREATE_LICENSE (
12:39:11 1475  	     in_status_id		 => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
12:39:11 1476  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 1477  	     in_start_date		 => in_effective_start_date,
12:39:11 1478  	     in_end_date		 => in_effective_end_date,
12:39:11 1479  	     in_offer_id		 => var_current_offer_id,
12:39:11 1480  	     in_subscription_id 	 => in_subscription_id,
12:39:11 1481  	     in_invoice_id		 => var_free_invoice_id,
12:39:11 1482  	     in_created_by		 => in_updated_by,
12:39:11 1483  	     in_is_extension		 => GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 1484  	     in_current_offer_index	 => var_current_offer_index,
12:39:11 1485  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
12:39:11 1486  	     out_license_id		 => var_free_license_id
12:39:11 1487  	   );
12:39:11 1488  	   EXCEPTION
12:39:11 1489  	     WHEN OTHERS THEN
12:39:11 1490  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1491  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
12:39:11 1492  	 END;
12:39:11 1493  
12:39:11 1494  	 -- Creating new license
12:39:11 1495  	 IF PROCS_COMMON_V16.NORMALIZE_DATE(var_current_license_end_date) >
12:39:11 1496  	    PROCS_COMMON_V16.NORMALIZE_DATE(in_effective_start_date) THEN
12:39:11 1497  	   BEGIN
12:39:11 1498  	     PROCS_LICENSE_V16.CREATE_LICENSE (
12:39:11 1499  	       in_status_id		   => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
12:39:11 1500  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 1501  	       in_start_date		   => in_effective_end_date,
12:39:11 1502  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
12:39:11 1503  	       in_offer_id		   => var_current_offer_id,
12:39:11 1504  	       in_subscription_id	   => in_subscription_id,
12:39:11 1505  	       in_invoice_id		   => var_current_invoice_id,
12:39:11 1506  	       in_created_by		   => in_updated_by,
12:39:11 1507  	       in_is_extension		   => GLOBAL_CONSTANTS_V16.FALSE,
12:39:11 1508  	       in_current_offer_index	   => var_current_offer_index,
12:39:11 1509  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
12:39:11 1510  	       out_license_id		   => var_ext_license_id
12:39:11 1511  	     );
12:39:11 1512  	     EXCEPTION
12:39:11 1513  	       WHEN OTHERS THEN
12:39:11 1514  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1515  		 RAISE CAN_NOT_CREATE_END_LICENSE;
12:39:11 1516  	   END;
12:39:11 1517  	 END IF;
12:39:11 1518  
12:39:11 1519  	 -- Create new note for subscription
12:39:11 1520  	 BEGIN
12:39:11 1521  	   PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION (
12:39:11 1522  	     in_subscription_id => in_subscription_id,
12:39:11 1523  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
12:39:11 1524  	     in_note		=> in_note,
12:39:11 1525  	     in_created_by	=> in_updated_by
12:39:11 1526  	   );
12:39:11 1527  	   EXCEPTION
12:39:11 1528  	     WHEN OTHERS THEN
12:39:11 1529  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1530  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
12:39:11 1531  	 END;
12:39:11 1532  
12:39:11 1533  EXCEPTION
12:39:11 1534  WHEN EXT_START_DATE_LATER_THEN_END THEN
12:39:11 1535  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1536  	   SPROC_NAME, 'Extension start date is bigger then end date');
12:39:11 1537  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
12:39:11 1538  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1539  	   SPROC_NAME, 'Extension start date is too far');
12:39:11 1540  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
12:39:11 1541  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1542  	   SPROC_NAME, 'Extension start date is too small');
12:39:11 1543  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 1544  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1545  	   SPROC_NAME, 'No such subscription');
12:39:11 1546  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
12:39:11 1547  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1548  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
12:39:11 1549  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
12:39:11 1550  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1551  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
12:39:11 1552  WHEN CAN_NOT_CREATE_INVOICE THEN
12:39:11 1553  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1554  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
12:39:11 1555  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
12:39:11 1556  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1557  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
12:39:11 1558  WHEN CAN_NOT_CREATE_END_LICENSE THEN
12:39:11 1559  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1560  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
12:39:11 1561  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
12:39:11 1562  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1563  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
12:39:11 1564  WHEN OTHERS THEN
12:39:11 1565  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1566  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1567  END ADD_SUBSCRIPTION_EXTENSION;
12:39:11 1568  
12:39:11 1569  /******************************************************************************/
12:39:11 1570  
12:39:11 1571  FUNCTION CALC_SUBSCRIPTION_END_DATE (
12:39:11 1572  /*
12:39:11 1573  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 1574  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 1575  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1576  Returns:
12:39:11 1577  NULL if it is impossible to calculate end date (for example,
12:39:11 1578  	 offer chain includes offer with infinity recurrences number)
12:39:11 1579  DATE else
12:39:11 1580  */
12:39:11 1581  	 in_subscription_id IN NUMBER
12:39:11 1582  ) RETURN DATE AS
12:39:11 1583  -- VARIABLES
12:39:11 1584  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
12:39:11 1585  last_license_id		     NUMBER;
12:39:11 1586  last_license_end_date	     DATE;
12:39:11 1587  last_license_offer_id	     NUMBER;
12:39:11 1588  last_license_offer_index      NUMBER;
12:39:11 1589  last_license_offer_recurr_num NUMBER;
12:39:11 1590  var_last_license_id	     NUMBER;
12:39:11 1591  var_offer_chain_id	     NUMBER;
12:39:11 1592  var_current_offer_rec_number  NUMBER;
12:39:11 1593  var_next_offers_set	     SYS_REFCURSOR;
12:39:11 1594  var_next_offer_duration	     VARCHAR2(30);
12:39:11 1595  var_next_offer_recur	     NUMBER;
12:39:11 1596  var_infinity_offers_number    NUMBER;
12:39:11 1597  
12:39:11 1598  var_result_date DATE;
12:39:11 1599  
12:39:11 1600  var_ym_interval	INTERVAL YEAR TO MONTH;
12:39:11 1601  var_ds_interval	INTERVAL DAY(3) TO SECOND;
12:39:11 1602  var_offer_years	NUMBER;
12:39:11 1603  var_offer_months NUMBER;
12:39:11 1604  var_offer_days	NUMBER;
12:39:11 1605  
12:39:11 1606  -- EXCEPTIONS
12:39:11 1607  BAD_SUBSCRIPTION_ID	  EXCEPTION;
12:39:11 1608  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
12:39:11 1609  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
12:39:11 1610  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
12:39:11 1611  EXCEPTION_MESSAGE	  VARCHAR2(1024);
12:39:11 1612  BEGIN
12:39:11 1613  
12:39:11 1614  	 BEGIN
12:39:11 1615  	   SELECT
12:39:11 1616  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
12:39:11 1617  	   FROM
12:39:11 1618  	     SUBSCRIPTION
12:39:11 1619  	   WHERE
12:39:11 1620  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1621  	   EXCEPTION
12:39:11 1622  	     WHEN NO_DATA_FOUND THEN
12:39:11 1623  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 1624  	 END;
12:39:11 1625  
12:39:11 1626  	 BEGIN
12:39:11 1627  	   SELECT
12:39:11 1628  	     ID into var_last_license_id
12:39:11 1629  	   FROM
12:39:11 1630  	     (
12:39:11 1631  	       SELECT
12:39:11 1632  		 LICENSE.ID
12:39:11 1633  	       FROM
12:39:11 1634  		 LICENSE
12:39:11 1635  	       WHERE
12:39:11 1636  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
12:39:11 1637  	       ORDER BY
12:39:11 1638  		 LICENSE.END_DATE DESC
12:39:11 1639  	     )
12:39:11 1640  	   WHERE
12:39:11 1641  	     ROWNUM <= 1;
12:39:11 1642  	   EXCEPTION
12:39:11 1643  	     WHEN NO_DATA_FOUND THEN
12:39:11 1644  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
12:39:11 1645  	 END;
12:39:11 1646  
12:39:11 1647  	 SELECT
12:39:11 1648  	   COUNT(*) into var_infinity_offers_number
12:39:11 1649  	 FROM
12:39:11 1650  	   OFFER_OFFER_CHAIN
12:39:11 1651  	 WHERE
12:39:11 1652  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
12:39:11 1653  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V16.OFFER_REC_INFINITY;
12:39:11 1654  
12:39:11 1655  	 IF var_infinity_offers_number > 0 THEN
12:39:11 1656  	   RETURN NULL;
12:39:11 1657  	 END IF;
12:39:11 1658  
12:39:11 1659  	 BEGIN
12:39:11 1660  	   SELECT
12:39:11 1661  	     LICENSE.ID,
12:39:11 1662  	     LICENSE.END_DATE,
12:39:11 1663  	     LICENSE.CURRENT_OFFER_INDEX,
12:39:11 1664  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
12:39:11 1665  	     LICENSE.OFFER_ID
12:39:11 1666  	     into
12:39:11 1667  	     last_license_id,
12:39:11 1668  	     last_license_end_date,
12:39:11 1669  	     last_license_offer_index,
12:39:11 1670  	     last_license_offer_recurr_num,
12:39:11 1671  	     last_license_offer_id
12:39:11 1672  	   FROM
12:39:11 1673  	     LICENSE
12:39:11 1674  	   WHERE
12:39:11 1675  	     LICENSE.ID = var_last_license_id;
12:39:11 1676  	   EXCEPTION
12:39:11 1677  	     WHEN NO_DATA_FOUND THEN
12:39:11 1678  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
12:39:11 1679  	 END;
12:39:11 1680  
12:39:11 1681  	 var_result_date := last_license_end_date;
12:39:11 1682  
12:39:11 1683  	 -- Find current recurrence number
12:39:11 1684  	 SELECT
12:39:11 1685  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
12:39:11 1686  	 FROM
12:39:11 1687  	   OFFER_OFFER_CHAIN
12:39:11 1688  	 WHERE
12:39:11 1689  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
12:39:11 1690  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
12:39:11 1691  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
12:39:11 1692  
12:39:11 1693  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
12:39:11 1694  	   BEGIN
12:39:11 1695  	     PROCS_OFFER_CHAIN_V16.GET_OFFER_LENGTH(
12:39:11 1696  	       last_license_offer_id,
12:39:11 1697  	       var_offer_years,
12:39:11 1698  	       var_offer_months,
12:39:11 1699  	       var_offer_days
12:39:11 1700  	     );
12:39:11 1701  
12:39:11 1702  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
12:39:11 1703  	     var_ds_interval := var_offer_days||' 0:0:0';
12:39:11 1704  
12:39:11 1705  	     var_result_date := var_result_date
12:39:11 1706  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
12:39:11 1707  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
12:39:11 1708  	     EXCEPTION
12:39:11 1709  	       WHEN OTHERS THEN
12:39:11 1710  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1711  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
12:39:11 1712  	   END;
12:39:11 1713  	 END IF;
12:39:11 1714  
12:39:11 1715  	 OPEN var_next_offers_set FOR
12:39:11 1716  	 SELECT
12:39:11 1717  	   OFFER.ENTITLEMENT_DURATION,
12:39:11 1718  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
12:39:11 1719  	 FROM
12:39:11 1720  	   OFFER_OFFER_CHAIN
12:39:11 1721  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
12:39:11 1722  	 WHERE
12:39:11 1723  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
12:39:11 1724  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
12:39:11 1725  
12:39:11 1726  	 LOOP
12:39:11 1727  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
12:39:11 1728  	   EXIT WHEN var_next_offers_set%NOTFOUND;
12:39:11 1729  	   BEGIN
12:39:11 1730  	     PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
12:39:11 1731  	       var_next_offer_duration,
12:39:11 1732  	       var_offer_years,
12:39:11 1733  	       var_offer_months,
12:39:11 1734  	       var_offer_days
12:39:11 1735  	     );
12:39:11 1736  
12:39:11 1737  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
12:39:11 1738  	     var_ds_interval := var_offer_days||' 0:0:0';
12:39:11 1739  
12:39:11 1740  	     var_result_date := var_result_date
12:39:11 1741  	       + ( var_ym_interval * var_next_offer_recur )
12:39:11 1742  	       + ( var_ds_interval * var_next_offer_recur );
12:39:11 1743  	     EXCEPTION
12:39:11 1744  	       WHEN OTHERS THEN
12:39:11 1745  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1746  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
12:39:11 1747  	   END;
12:39:11 1748  	 END LOOP;
12:39:11 1749  
12:39:11 1750  	 RETURN var_result_date;
12:39:11 1751  
12:39:11 1752  EXCEPTION
12:39:11 1753  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 1754  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1755  	   SPROC_NAME, 'No such subscription');
12:39:11 1756  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
12:39:11 1757  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1758  	   SPROC_NAME, 'Could not find last license for given subscription');
12:39:11 1759  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
12:39:11 1760  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1761  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
12:39:11 1762  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
12:39:11 1763  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1764  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
12:39:11 1765  WHEN OTHERS THEN
12:39:11 1766  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1767  	   SPROC_NAME, 'Unkown error', SQLERRM);
12:39:11 1768  END CALC_SUBSCRIPTION_END_DATE;
12:39:11 1769  
12:39:11 1770  /******************************************************************************/
12:39:11 1771  
12:39:11 1772  PROCEDURE HAS_FUTURE_LICENSE (
12:39:11 1773  /*
12:39:11 1774  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 1775  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1776  --
12:39:11 1777  RETURNS:
12:39:11 1778  GLOBAL_CONSTANTS_V16.TRUE - if has,
12:39:11 1779  GLOBAL_CONSTANTS_V16.FALSE - else
12:39:11 1780  */
12:39:11 1781  	 in_license_id IN  NUMBER,
12:39:11 1782  	 out_result    OUT NUMBER
12:39:11 1783  ) AS
12:39:11 1784  -- VARIABLES
12:39:11 1785  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
12:39:11 1786  var_subscription_id	 NUMBER;
12:39:11 1787  var_future_licenses_count NUMBER;
12:39:11 1788  -- EXCEPTIONS
12:39:11 1789  BAD_LICENSE_ID	    EXCEPTION;
12:39:11 1790  BEGIN
12:39:11 1791  
12:39:11 1792  	 BEGIN
12:39:11 1793  	   SELECT
12:39:11 1794  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
12:39:11 1795  	   FROM
12:39:11 1796  	     LICENSE
12:39:11 1797  	   WHERE
12:39:11 1798  	     LICENSE.ID = in_license_id;
12:39:11 1799  	   EXCEPTION
12:39:11 1800  	     WHEN NO_DATA_FOUND THEN
12:39:11 1801  	       RAISE BAD_LICENSE_ID;
12:39:11 1802  	 END;
12:39:11 1803  
12:39:11 1804  	 SELECT
12:39:11 1805  	   COUNT(*) into var_future_licenses_count
12:39:11 1806  	 FROM
12:39:11 1807  	   LICENSE
12:39:11 1808  	 WHERE
12:39:11 1809  	   LICENSE.ID != in_license_id
12:39:11 1810  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
12:39:11 1811  	   AND LICENSE.END_DATE > sysdate;
12:39:11 1812  
12:39:11 1813  	 IF var_future_licenses_count > 0 THEN
12:39:11 1814  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 1815  	 ELSE
12:39:11 1816  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 1817  	 END IF;
12:39:11 1818  
12:39:11 1819  EXCEPTION
12:39:11 1820  WHEN BAD_LICENSE_ID THEN
12:39:11 1821  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1822  	   SPROC_NAME, 'No such license');
12:39:11 1823  WHEN OTHERS THEN
12:39:11 1824  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1825  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1826  END HAS_FUTURE_LICENSE;
12:39:11 1827  
12:39:11 1828  /******************************************************************************/
12:39:11 1829  
12:39:11 1830  PROCEDURE CLOSE_SUBSCRIPTION (
12:39:11 1831  	 in_subscription_id IN NUMBER,
12:39:11 1832  	 in_updated_by	    IN VARCHAR2
12:39:11 1833  ) AS
12:39:11 1834  -- VARIABLES
12:39:11 1835  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
12:39:11 1836  temp_subscription_id NUMBER;
12:39:11 1837  var_licenses_count   NUMBER;
12:39:11 1838  -- EXCEPTIONS
12:39:11 1839  BAD_SUBSCRIPTION_ID    EXCEPTION;
12:39:11 1840  ACTIVE_LICENSES_FOUND  EXCEPTION;
12:39:11 1841  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 1842  BEGIN
12:39:11 1843  
12:39:11 1844  	 BEGIN
12:39:11 1845  	   SELECT
12:39:11 1846  	     SUBSCRIPTION.ID into temp_subscription_id
12:39:11 1847  	   FROM
12:39:11 1848  	     SUBSCRIPTION
12:39:11 1849  	   WHERE
12:39:11 1850  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1851  	   EXCEPTION
12:39:11 1852  	     WHEN NO_DATA_FOUND THEN
12:39:11 1853  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 1854  	 END;
12:39:11 1855  
12:39:11 1856  	 SELECT
12:39:11 1857  	   COUNT(*) into var_licenses_count
12:39:11 1858  	 FROM
12:39:11 1859  	   LICENSE
12:39:11 1860  	 WHERE
12:39:11 1861  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
12:39:11 1862  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE;
12:39:11 1863  
12:39:11 1864  	 IF var_licenses_count > 0 THEN
12:39:11 1865  	   RAISE ACTIVE_LICENSES_FOUND;
12:39:11 1866  	 END IF;
12:39:11 1867  
12:39:11 1868  	 PROCS_SUBSCRIPTION_V16.UPDATE_SUBSCRIPTION_STATUS(
12:39:11 1869  	   in_subscription_id	     => in_subscription_id,
12:39:11 1870  	   in_updated_by	     => in_updated_by,
12:39:11 1871  	   in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
12:39:11 1872  	 );
12:39:11 1873  
12:39:11 1874  EXCEPTION
12:39:11 1875  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 1876  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1877  	   SPROC_NAME, 'No such subscription');
12:39:11 1878  WHEN ACTIVE_LICENSES_FOUND THEN
12:39:11 1879  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1880  	   SPROC_NAME, 'Active licenses found');
12:39:11 1881  WHEN OTHERS THEN
12:39:11 1882  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1883  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1884  END CLOSE_SUBSCRIPTION;
12:39:11 1885  
12:39:11 1886  /******************************************************************************/
12:39:11 1887  
12:39:11 1888  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
12:39:11 1889  	 in_subscription_id IN NUMBER,
12:39:11 1890  	 out_group_id	    OUT NUMBER
12:39:11 1891  ) AS
12:39:11 1892  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
12:39:11 1893  BEGIN
12:39:11 1894  	 SELECT
12:39:11 1895  	   ACCOUNT.GROUP_ID into out_group_id
12:39:11 1896  	 FROM
12:39:11 1897  	   SUBSCRIPTION
12:39:11 1898  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
12:39:11 1899  	 WHERE
12:39:11 1900  	   SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1901  EXCEPTION
12:39:11 1902  WHEN NO_DATA_FOUND THEN
12:39:11 1903  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1904  	   SPROC_NAME, 'No such subscription');
12:39:11 1905  WHEN OTHERS THEN
12:39:11 1906  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1907  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1908  END GET_GROUP_ID_BY_SBSCRPTN_ID;
12:39:11 1909  
12:39:11 1910  /******************************************************************************/
12:39:11 1911  
12:39:11 1912  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
12:39:11 1913  /*
12:39:11 1914  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 1915  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1916  */
12:39:11 1917  	 in_subscription_id IN NUMBER,
12:39:11 1918  	 out_result_set     OUT SYS_REFCURSOR
12:39:11 1919  ) AS
12:39:11 1920  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
12:39:11 1921  -- VARIABLES
12:39:11 1922  var_offer_chain NUMBER;
12:39:11 1923  -- EXCEPTIONS
12:39:11 1924  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 1925  BEGIN
12:39:11 1926  	 BEGIN
12:39:11 1927  	   SELECT
12:39:11 1928  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
12:39:11 1929  	   FROM
12:39:11 1930  	     SUBSCRIPTION
12:39:11 1931  	   WHERE
12:39:11 1932  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 1933  	   EXCEPTION
12:39:11 1934  	     WHEN NO_DATA_FOUND THEN
12:39:11 1935  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 1936  	 END;
12:39:11 1937  
12:39:11 1938  	 OPEN out_result_set FOR
12:39:11 1939  	 SELECT DISTINCT
12:39:11 1940  	   PRODUCT.ID,
12:39:11 1941  	   PRODUCT.NAME
12:39:11 1942  	 FROM
12:39:11 1943  	   PRODUCT
12:39:11 1944  	 WHERE
12:39:11 1945  	   PRODUCT.ID IN (
12:39:11 1946  	     SELECT DISTINCT
12:39:11 1947  	       PRODUCT_OFFERING.PRODUCT_ID
12:39:11 1948  	     FROM
12:39:11 1949  	       PRODUCT_OFFERING
12:39:11 1950  	     WHERE
12:39:11 1951  	       PRODUCT_OFFERING.ID IN (
12:39:11 1952  		 SELECT DISTINCT
12:39:11 1953  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
12:39:11 1954  		 FROM
12:39:11 1955  		   OFFER_PRODUCT_OFFERING
12:39:11 1956  		 WHERE
12:39:11 1957  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
12:39:11 1958  		     SELECT DISTINCT
12:39:11 1959  		       OFFER_OFFER_CHAIN.OFFER_ID
12:39:11 1960  		     FROM
12:39:11 1961  		       OFFER_OFFER_CHAIN
12:39:11 1962  		     WHERE
12:39:11 1963  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
12:39:11 1964  		   )
12:39:11 1965  	       )
12:39:11 1966  	   );
12:39:11 1967  
12:39:11 1968  EXCEPTION
12:39:11 1969  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 1970  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1971  	   SPROC_NAME, 'No such subscription');
12:39:11 1972  WHEN OTHERS THEN
12:39:11 1973  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1974  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1975  END GET_SUBSCRIPTION_PRODUCTS;
12:39:11 1976  
12:39:11 1977  /******************************************************************************/
12:39:11 1978  
12:39:11 1979  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
12:39:11 1980  /*
12:39:11 1981  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 1982  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1983  */
12:39:11 1984  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
12:39:11 1985  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
12:39:11 1986  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
12:39:11 1987  ) AS
12:39:11 1988  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
12:39:11 1989  -- VARIABLES
12:39:11 1990  temp_charge_id CHARGE.ID%TYPE;
12:39:11 1991  -- EXCEPTIONS
12:39:11 1992  BAD_SUBSCRIPTION_ID    EXCEPTION;
12:39:11 1993  BAD_STATUS_ID	      EXCEPTION;
12:39:11 1994  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 1995  BEGIN
12:39:11 1996  
12:39:11 1997  	 IF in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 1998  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
12:39:11 1999  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED
12:39:11 2000  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED THEN
12:39:11 2001  	   RAISE BAD_STATUS_ID;
12:39:11 2002  	 END IF;
12:39:11 2003  
12:39:11 2004  	 PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
12:39:11 2005  	   in_subscription_id	     => in_subscription_id,
12:39:11 2006  	   in_subscription_status_id => in_subscription_status_id,
12:39:11 2007  	   in_updated_by	     => in_updated_by
12:39:11 2008  	 );
12:39:11 2009  
12:39:11 2010  	 IF SQL%ROWCOUNT = 0 THEN
12:39:11 2011  	   RAISE BAD_SUBSCRIPTION_ID;
12:39:11 2012  	 END IF;
12:39:11 2013  
12:39:11 2014  EXCEPTION
12:39:11 2015  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2016  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2017  	   SPROC_NAME, 'No such subscription');
12:39:11 2018  WHEN BAD_STATUS_ID THEN
12:39:11 2019  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2020  	   SPROC_NAME, 'Bad status id');
12:39:11 2021  WHEN OTHERS THEN
12:39:11 2022  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2023  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2024  END UPDATE_SUBSCRIPTION_STATUS;
12:39:11 2025  
12:39:11 2026  /******************************************************************************/
12:39:11 2027  
12:39:11 2028  PROCEDURE GET_ACTIVE_INVOICES_IDS (
12:39:11 2029  /*
12:39:11 2030  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2031  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2032  */
12:39:11 2033  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
12:39:11 2034  	 in_subscription_id IN NUMBER,
12:39:11 2035  	 out_result_set     OUT SYS_REFCURSOR
12:39:11 2036  ) AS
12:39:11 2037  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
12:39:11 2038  -- VARIABLES
12:39:11 2039  temp_subscription_id SUBSCRIPTION.ID%TYPE;
12:39:11 2040  -- EXCEPTIONS
12:39:11 2041  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 2042  BEGIN
12:39:11 2043  
12:39:11 2044  	 BEGIN
12:39:11 2045  	   SELECT
12:39:11 2046  	     SUBSCRIPTION.ID into temp_subscription_id
12:39:11 2047  	   FROM
12:39:11 2048  	     SUBSCRIPTION
12:39:11 2049  	   WHERE
12:39:11 2050  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 2051  	   EXCEPTION
12:39:11 2052  	     WHEN NO_DATA_FOUND THEN
12:39:11 2053  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 2054  	 END;
12:39:11 2055  
12:39:11 2056  	 OPEN out_result_set FOR
12:39:11 2057  	 SELECT DISTINCT
12:39:11 2058  	   LICENSE.INVOICE_ID as "ID"
12:39:11 2059  	 FROM
12:39:11 2060  	   LICENSE
12:39:11 2061  	 WHERE
12:39:11 2062  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:11 2063  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
12:39:11 2064  
12:39:11 2065  EXCEPTION
12:39:11 2066  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2067  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2068  	   SPROC_NAME, 'No such subscription');
12:39:11 2069  WHEN OTHERS THEN
12:39:11 2070  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2071  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2072  END GET_ACTIVE_INVOICES_IDS;
12:39:11 2073  
12:39:11 2074  /******************************************************************************/
12:39:11 2075  
12:39:11 2076  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
12:39:11 2077  /*
12:39:11 2078  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2079  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2080  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 2081  */
12:39:11 2082  	 in_invoice_id	      IN NUMBER,
12:39:11 2083  	 in_updated_by	      IN VARCHAR2,
12:39:11 2084  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:11 2085  ) AS
12:39:11 2086  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
12:39:11 2087  -- VARIABLES
12:39:11 2088  temp_invoice_id	      INVOICE.ID%TYPE;
12:39:11 2089  var_chargeback_amount  NUMBER(10,2);
12:39:11 2090  ver_refund_charge_id   NUMBER;
12:39:11 2091  -- EXCEPTIONS
12:39:11 2092  BAD_INVOICE_ID		    EXCEPTION;
12:39:11 2093  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
12:39:11 2094  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
12:39:11 2095  EXCEPTION_MESSAGE	    VARCHAR2(1024);
12:39:11 2096  -- STUB
12:39:11 2097  var_now DATE;
12:39:11 2098  var_revoke NUMBER;
12:39:11 2099  var_refund NUMBER;
12:39:11 2100  var_billed NUMBER;
12:39:11 2101  BEGIN
12:39:11 2102  
12:39:11 2103  	 var_now := sysdate;
12:39:11 2104  
12:39:11 2105  	 -- Check that invoice exists
12:39:11 2106  	 BEGIN
12:39:11 2107  	   SELECT
12:39:11 2108  	     INVOICE.ID into temp_invoice_id
12:39:11 2109  	   FROM
12:39:11 2110  	     INVOICE
12:39:11 2111  	   WHERE
12:39:11 2112  	     INVOICE.ID = in_invoice_id;
12:39:11 2113  	   EXCEPTION
12:39:11 2114  	     WHEN NO_DATA_FOUND THEN
12:39:11 2115  	       RAISE BAD_INVOICE_ID;
12:39:11 2116  	 END;
12:39:11 2117  
12:39:11 2118  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V16.FALSE, GLOBAL_CONSTANTS_V16.TRUE) into var_revoke
12:39:11 2119  	 from license l, subscription s, offer_chain oc
12:39:11 2120  	 where
12:39:11 2121  	   l.subscription_id = s.id and
12:39:11 2122  	   s.offer_chain_id = oc.id and
12:39:11 2123  	   l.invoice_id = in_invoice_id and
12:39:11 2124  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V16.TRUE and
12:39:11 2125  	   rownum < 2;
12:39:11 2126  
12:39:11 2127  	 var_billed := PROCS_INVOICE_V16.IS_INVOICE_PAYING_STARTED(in_invoice_id);
12:39:11 2128  	 var_refund := GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 2129  
12:39:11 2130  	 -- Check that transaction for given invoice not started
12:39:11 2131  	 -- if refund enabled calculate and apply chargeback
12:39:11 2132  	 IF (
12:39:11 2133  	     var_billed = GLOBAL_CONSTANTS_V16.TRUE
12:39:11 2134  	   )THEN
12:39:11 2135  	   if (in_refundable = GLOBAL_CONSTANTS_V16.TRUE) then
12:39:11 2136  	     -- If started then we need to calculate refund
12:39:11 2137  	     BEGIN
12:39:11 2138  	       PROCS_INVOICE_V16.CALCULATE_INVOICE_CHARGEBACK(
12:39:11 2139  		 in_invoice_id,
12:39:11 2140  		 var_now,
12:39:11 2141  		 var_chargeback_amount
12:39:11 2142  	       );
12:39:11 2143  	       EXCEPTION
12:39:11 2144  		 WHEN OTHERS THEN
12:39:11 2145  		   EXCEPTION_MESSAGE := SQLERRM;
12:39:11 2146  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
12:39:11 2147  	     END;
12:39:11 2148  	     IF var_chargeback_amount > 0 THEN
12:39:11 2149  	       BEGIN
12:39:11 2150  		 PROCS_INVOICE_V16.APPLY_REFUND(
12:39:11 2151  		   in_invoice_id,
12:39:11 2152  		   var_chargeback_amount,
12:39:11 2153  		   in_updated_by,
12:39:11 2154  		   ver_refund_charge_id
12:39:11 2155  		 );
12:39:11 2156  		 EXCEPTION
12:39:11 2157  		   WHEN OTHERS THEN
12:39:11 2158  		     EXCEPTION_MESSAGE := SQLERRM;
12:39:11 2159  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
12:39:11 2160  	       END;
12:39:11 2161  	       var_refund := GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2162  	     END IF;
12:39:11 2163  	   end if;
12:39:11 2164  	 ELSE
12:39:11 2165  
12:39:11 2166  	   FOR f_transaction_to_close IN (
12:39:11 2167  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
12:39:11 2168  	   )
12:39:11 2169  	   LOOP
12:39:11 2170  	     PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
12:39:11 2171  	       in_transaction_id	=> f_transaction_to_close.ID,
12:39:11 2172  	       in_updated_by		=> in_updated_by,
12:39:11 2173  	       in_transaction_status_id => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
12:39:11 2174  	     );
12:39:11 2175  	   END LOOP;
12:39:11 2176  	   -- Needs to close charges. No refund.
12:39:11 2177  	   FOR f_charge_to_close IN (
12:39:11 2178  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
12:39:11 2179  	   )
12:39:11 2180  	   LOOP
12:39:11 2181  	     PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
12:39:11 2182  	       in_charge_id	   => f_charge_to_close.ID,
12:39:11 2183  	       in_updated_by	   => in_updated_by,
12:39:11 2184  	       in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
12:39:11 2185  	     );
12:39:11 2186  	   END LOOP;
12:39:11 2187  
12:39:11 2188  	   PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
12:39:11 2189  	     in_invoice_id		    => in_invoice_id,
12:39:11 2190  	     in_updated_by		    => in_updated_by,
12:39:11 2191  	     in_invoice_status_id	    => GLOBAL_STATUSES_V16.INVOICE_CLOSED
12:39:11 2192  	   );
12:39:11 2193  
12:39:11 2194  	 END IF;
12:39:11 2195  	 -- update licenses
12:39:11 2196  	 IF(var_revoke = GLOBAL_CONSTANTS_V16.TRUE OR var_chargeback_amount > 0 OR var_billed = GLOBAL_CONSTANTS_V16.FALSE) THEN
12:39:11 2197  	   FOR f_license_to_cancel IN (
12:39:11 2198  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:11 2199  	   )
12:39:11 2200  	   LOOP
12:39:11 2201  	     PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:11 2202  	       in_license_id	     => f_license_to_cancel.ID,
12:39:11 2203  	       in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
12:39:11 2204  	       in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 2205  	       in_updated_by	     => in_updated_by,
12:39:11 2206  	       in_entitlement_end_date => var_now
12:39:11 2207  	     );
12:39:11 2208  	   END LOOP;
12:39:11 2209  	 ELSE
12:39:11 2210  	   FOR f_license_to_cancel IN (
12:39:11 2211  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:11 2212  	   )
12:39:11 2213  	   LOOP
12:39:11 2214  	     PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:11 2215  	       in_license_id	     => f_license_to_cancel.ID,
12:39:11 2216  	       in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
12:39:11 2217  	       in_updated_by	     => in_updated_by
12:39:11 2218  	     );
12:39:11 2219  	   END LOOP;
12:39:11 2220  	 END IF;
12:39:11 2221  
12:39:11 2222  
12:39:11 2223  EXCEPTION
12:39:11 2224  WHEN BAD_INVOICE_ID THEN
12:39:11 2225  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2226  	   SPROC_NAME, 'No such invoice');
12:39:11 2227  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
12:39:11 2228  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 2229  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
12:39:11 2230  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
12:39:11 2231  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 2232  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
12:39:11 2233  WHEN OTHERS THEN
12:39:11 2234  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2235  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2236  END CANCEL_SUBSCRIPTION_INVOICE;
12:39:11 2237  
12:39:11 2238  /******************************************************************************/
12:39:11 2239  
12:39:11 2240  PROCEDURE FINALIZE_CANCELATION (
12:39:11 2241  /*
12:39:11 2242  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2243  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2244  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 2245  */
12:39:11 2246  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
12:39:11 2247  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
12:39:11 2248  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
12:39:11 2249  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
12:39:11 2250  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
12:39:11 2251  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
12:39:11 2252  	 in_subscription_id    IN NUMBER,
12:39:11 2253  	 in_cancelation_reason IN VARCHAR2,
12:39:11 2254  	 in_cancelation_date   IN DATE,
12:39:11 2255  	 in_note	       IN VARCHAR2,
12:39:11 2256  	 in_agent_id	       IN NUMBER,
12:39:11 2257  	 in_updated_by	       IN VARCHAR2
12:39:11 2258  ) AS
12:39:11 2259  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
12:39:11 2260  -- VARIABLES
12:39:11 2261  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
12:39:11 2262  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
12:39:11 2263  var_active_invoices_count NUMBER;
12:39:11 2264  -- EXCEPTIONS
12:39:11 2265  BAD_SUBSCRIPTION_ID	   EXCEPTION;
12:39:11 2266  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
12:39:11 2267  BAD_CANCELATION_REASON	   EXCEPTION;
12:39:11 2268  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
12:39:11 2269  ACTIVE_INVOICES_FOUND	   EXCEPTION;
12:39:11 2270  CAN_NOT_CREATE_NOTE	   EXCEPTION;
12:39:11 2271  EXCEPTION_MESSAGE	   VARCHAR2(1024);
12:39:11 2272  BEGIN
12:39:11 2273  
12:39:11 2274  	 -- Get current subscription status
12:39:11 2275  	 BEGIN
12:39:11 2276  	   SELECT
12:39:11 2277  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
12:39:11 2278  	   FROM
12:39:11 2279  	     SUBSCRIPTION
12:39:11 2280  	   WHERE
12:39:11 2281  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 2282  	   EXCEPTION
12:39:11 2283  	     WHEN NO_DATA_FOUND THEN
12:39:11 2284  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 2285  	 END;
12:39:11 2286  
12:39:11 2287  	 -- Check that subscription reason is correct
12:39:11 2288  	 BEGIN
12:39:11 2289  	   SELECT
12:39:11 2290  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
12:39:11 2291  	   FROM
12:39:11 2292  	     SUBSCRIPTION_CANCEL_REASON
12:39:11 2293  	   WHERE
12:39:11 2294  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
12:39:11 2295  	     AND ROWNUM <= 1;
12:39:11 2296  	   EXCEPTION
12:39:11 2297  	     WHEN NO_DATA_FOUND THEN
12:39:11 2298  	       RAISE BAD_CANCELATION_REASON;
12:39:11 2299  	 END;
12:39:11 2300  
12:39:11 2301  	 -- Check for invoices with active licenses
12:39:11 2302  	 SELECT
12:39:11 2303  	   COUNT(*) into var_active_invoices_count
12:39:11 2304  	 FROM
12:39:11 2305  	   LICENSE
12:39:11 2306  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
12:39:11 2307  	 WHERE
12:39:11 2308  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:11 2309  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
12:39:11 2310  
12:39:11 2311  	 IF var_active_invoices_count > 0 THEN
12:39:11 2312  	   RAISE ACTIVE_INVOICES_FOUND;
12:39:11 2313  	 END IF;
12:39:11 2314  
12:39:11 2315  	 -- Check that subscription is active
12:39:11 2316  	 IF var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 2317  	    AND var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
12:39:11 2318  	   RAISE BAD_SUBSCRIPTION_STATUS;
12:39:11 2319  	 END IF;
12:39:11 2320  
12:39:11 2321  	 -- Update subscription data
12:39:11 2322  	 BEGIN
12:39:11 2323  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
12:39:11 2324  	     in_subscription_id        => in_subscription_id,
12:39:11 2325  	     in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED,
12:39:11 2326  	     in_cancelation_date       => in_cancelation_date,
12:39:11 2327  	     in_updated_by	       => in_updated_by,
12:39:11 2328  	     in_sct_id		       => var_sct_id
12:39:11 2329  	   );
12:39:11 2330  	   EXCEPTION
12:39:11 2331  	     WHEN OTHERS THEN
12:39:11 2332  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 2333  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
12:39:11 2334  	 END;
12:39:11 2335  
12:39:11 2336  	 -- Annotate subscription
12:39:11 2337  	 IF in_note IS NOT NULL THEN
12:39:11 2338  	   BEGIN
12:39:11 2339  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
12:39:11 2340  	       in_subscription_id,
12:39:11 2341  	       in_agent_id,
12:39:11 2342  	       in_note,
12:39:11 2343  	       in_updated_by
12:39:11 2344  	     );
12:39:11 2345  	     EXCEPTION
12:39:11 2346  	      WHEN OTHERS THEN
12:39:11 2347  		EXCEPTION_MESSAGE := SQLERRM;
12:39:11 2348  		RAISE CAN_NOT_CREATE_NOTE;
12:39:11 2349  	   END;
12:39:11 2350  	 END IF;
12:39:11 2351  
12:39:11 2352  EXCEPTION
12:39:11 2353  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2354  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2355  	   SPROC_NAME, 'No such subscription');
12:39:11 2356  WHEN BAD_SUBSCRIPTION_STATUS THEN
12:39:11 2357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2358  	   SPROC_NAME, 'Bad current subscription status');
12:39:11 2359  WHEN BAD_CANCELATION_REASON THEN
12:39:11 2360  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2361  	   SPROC_NAME, 'Bad cancellation reason');
12:39:11 2362  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
12:39:11 2363  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 2364  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
12:39:11 2365  WHEN ACTIVE_INVOICES_FOUND THEN
12:39:11 2366  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 2367  	   SPROC_NAME, 'Invoices with active licenses found');
12:39:11 2368  WHEN CAN_NOT_CREATE_NOTE THEN
12:39:11 2369  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 2370  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
12:39:11 2371  WHEN OTHERS THEN
12:39:11 2372  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2373  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2374  END FINALIZE_CANCELATION;
12:39:11 2375  
12:39:11 2376  /******************************************************************************/
12:39:11 2377  
12:39:11 2378  PROCEDURE FINALIZE_FALSE_START (
12:39:11 2379  /*
12:39:11 2380  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2381  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2382  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 2383  */
12:39:11 2384  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
12:39:11 2385  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
12:39:11 2386  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
12:39:11 2387  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
12:39:11 2388  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
12:39:11 2389  	 in_subscription_id    IN NUMBER,
12:39:11 2390  	 in_cancelation_date   IN DATE,
12:39:11 2391  	 in_note	       IN VARCHAR2,
12:39:11 2392  	 in_agent_id	       IN NUMBER,
12:39:11 2393  	 in_updated_by	       IN VARCHAR2
12:39:11 2394  ) AS
12:39:11 2395  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
12:39:11 2396  FALSE_START_REASON CONSTANT NUMBER := 41;
12:39:11 2397  -- VARIABLES
12:39:11 2398  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
12:39:11 2399  var_active_invoices_count NUMBER;
12:39:11 2400  -- EXCEPTIONS
12:39:11 2401  BAD_SUBSCRIPTION_ID	   EXCEPTION;
12:39:11 2402  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
12:39:11 2403  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
12:39:11 2404  ACTIVE_INVOICES_FOUND	   EXCEPTION;
12:39:11 2405  CAN_NOT_CREATE_NOTE	   EXCEPTION;
12:39:11 2406  EXCEPTION_MESSAGE	   VARCHAR2(1024);
12:39:11 2407  BEGIN
12:39:11 2408  
12:39:11 2409  	 -- Get current subscription status
12:39:11 2410  	 BEGIN
12:39:11 2411  	   SELECT
12:39:11 2412  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
12:39:11 2413  	   FROM
12:39:11 2414  	     SUBSCRIPTION
12:39:11 2415  	   WHERE
12:39:11 2416  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 2417  	   EXCEPTION
12:39:11 2418  	     WHEN NO_DATA_FOUND THEN
12:39:11 2419  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 2420  	 END;
12:39:11 2421  
12:39:11 2422  	 -- Check for invoices with active licenses
12:39:11 2423  	 SELECT
12:39:11 2424  	   COUNT(*) into var_active_invoices_count
12:39:11 2425  	 FROM
12:39:11 2426  	   LICENSE
12:39:11 2427  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
12:39:11 2428  	 WHERE
12:39:11 2429  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:11 2430  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
12:39:11 2431  
12:39:11 2432  	 IF var_active_invoices_count > 0 THEN
12:39:11 2433  	   RAISE ACTIVE_INVOICES_FOUND;
12:39:11 2434  	 END IF;
12:39:11 2435  
12:39:11 2436  	 -- Check that subscription is active
12:39:11 2437  	 IF var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 2438  	    AND var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
12:39:11 2439  	   RAISE BAD_SUBSCRIPTION_STATUS;
12:39:11 2440  	 END IF;
12:39:11 2441  
12:39:11 2442  	 -- Update subscription data
12:39:11 2443  	 BEGIN
12:39:11 2444  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
12:39:11 2445  	     in_subscription_id        => in_subscription_id,
12:39:11 2446  	     in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_FALSE_START,
12:39:11 2447  	     in_cancelation_date       => in_cancelation_date,
12:39:11 2448  	     in_updated_by	       => in_updated_by,
12:39:11 2449  	     in_sct_id		       => FALSE_START_REASON
12:39:11 2450  	   );
12:39:11 2451  	   EXCEPTION
12:39:11 2452  	     WHEN OTHERS THEN
12:39:11 2453  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 2454  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
12:39:11 2455  	 END;
12:39:11 2456  
12:39:11 2457  	 -- Annotate subscription
12:39:11 2458  	 IF in_note IS NOT NULL THEN
12:39:11 2459  	   BEGIN
12:39:11 2460  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
12:39:11 2461  	       in_subscription_id,
12:39:11 2462  	       in_agent_id,
12:39:11 2463  	       in_note,
12:39:11 2464  	       in_updated_by
12:39:11 2465  	     );
12:39:11 2466  	     EXCEPTION
12:39:11 2467  	      WHEN OTHERS THEN
12:39:11 2468  		EXCEPTION_MESSAGE := SQLERRM;
12:39:11 2469  		RAISE CAN_NOT_CREATE_NOTE;
12:39:11 2470  	   END;
12:39:11 2471  	 END IF;
12:39:11 2472  
12:39:11 2473  EXCEPTION
12:39:11 2474  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2475  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2476  	   SPROC_NAME, 'No such subscription');
12:39:11 2477  WHEN BAD_SUBSCRIPTION_STATUS THEN
12:39:11 2478  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2479  	   SPROC_NAME, 'Bad current subscription status');
12:39:11 2480  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
12:39:11 2481  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 2482  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
12:39:11 2483  WHEN ACTIVE_INVOICES_FOUND THEN
12:39:11 2484  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 2485  	   SPROC_NAME, 'Invoices with active licenses found');
12:39:11 2486  WHEN CAN_NOT_CREATE_NOTE THEN
12:39:11 2487  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 2488  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
12:39:11 2489  WHEN OTHERS THEN
12:39:11 2490  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2491  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2492  END FINALIZE_FALSE_START;
12:39:11 2493  
12:39:11 2494  /******************************************************************************/
12:39:11 2495  
12:39:11 2496  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
12:39:11 2497  	 in_subscription_id IN NUMBER
12:39:11 2498  ) RETURN NUMBER AS
12:39:11 2499  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
12:39:11 2500  -- VARIABLES
12:39:11 2501  var_is_offer_chain_cancelable NUMBER;
12:39:11 2502  --64603
12:39:11 2503  var_end_date date;
12:39:11 2504  today_date date := current_date;
12:39:11 2505  offer_id number;
12:39:11 2506  -- EXCEPTIONS
12:39:11 2507  COULD_NOT_CHECK	   EXCEPTION;
12:39:11 2508  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 2509  EXCEPTION_MESSAGE   VARCHAR2(1024);
12:39:11 2510  BEGIN
12:39:11 2511  
12:39:11 2512  	 BEGIN
12:39:11 2513  	   -- find offer_chain_id for given in_subscription_id
12:39:11 2514  	   SELECT OFFER_CHAIN_ID into offer_id
12:39:11 2515  	   FROM SUBSCRIPTION
12:39:11 2516  	   WHERE ID = in_subscription_id;
12:39:11 2517  	   EXCEPTION
12:39:11 2518  	     WHEN NO_DATA_FOUND THEN
12:39:11 2519  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 2520  	     WHEN OTHERS THEN
12:39:11 2521  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 2522  	       RAISE COULD_NOT_CHECK;
12:39:11 2523  	 END;
12:39:11 2524  
12:39:11 2525  	 -- find if it was redeemed from a gift certificate
12:39:11 2526  	 BEGIN
12:39:11 2527  	   SELECT l.end_date INTO var_end_date
12:39:11 2528  	   FROM LICENSE l, GIFT_CERTIFICATE g
12:39:11 2529  	   WHERE l.invoice_id = g.finalized_invoice_id
12:39:11 2530  	   AND l.subscription_id = in_subscription_id;
12:39:11 2531  
12:39:11 2532  	   -- if the license end_date is bigger than today, we are in the
12:39:11 2533  	   -- first period, so we cannot cancel; otherwise can cancel
12:39:11 2534  	   IF var_end_date > today_date THEN
12:39:11 2535  	       RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 2536  	   ELSE
12:39:11 2537  	       RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2538  	   END IF;
12:39:11 2539  
12:39:11 2540  	   EXCEPTION
12:39:11 2541  	       -- not coming from a gift certificate,
12:39:11 2542  	       -- use old logic
12:39:11 2543  	       WHEN NO_DATA_FOUND THEN
12:39:11 2544  		   SELECT
12:39:11 2545  		       PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(offer_id)
12:39:11 2546  		       INTO var_is_offer_chain_cancelable
12:39:11 2547  		   FROM DUAL;
12:39:11 2548  		   RETURN var_is_offer_chain_cancelable;
12:39:11 2549  	 END;
12:39:11 2550  
12:39:11 2551  EXCEPTION
12:39:11 2552  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2553  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2554  	   SPROC_NAME, 'No such subscription');
12:39:11 2555  WHEN COULD_NOT_CHECK THEN
12:39:11 2556  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 2557  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
12:39:11 2558  WHEN OTHERS THEN
12:39:11 2559  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2560  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2561  
12:39:11 2562  END IS_SUBSCRIPTION_CANCELABLE;
12:39:11 2563  /******************************************************************************/
12:39:11 2564  
12:39:11 2565  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
12:39:11 2566  /*
12:39:11 2567  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2568  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2569  */
12:39:11 2570  	 in_subscription_id IN NUMBER,
12:39:11 2571  	 out_result_set     OUT SYS_REFCURSOR
12:39:11 2572  ) AS
12:39:11 2573  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
12:39:11 2574  -- VARIABLES
12:39:11 2575  var_offer NUMBER;
12:39:11 2576  -- EXCEPTIONS
12:39:11 2577  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 2578  BEGIN
12:39:11 2579  
12:39:11 2580  	 OPEN out_result_set FOR
12:39:11 2581  	 SELECT DISTINCT
12:39:11 2582  	   PRODUCT_OFFERING.ID,
12:39:11 2583  	   PRODUCT_OFFERING.PRODUCT_ID,
12:39:11 2584  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
12:39:11 2585  	   PRODUCT_OFFERING.UNIT_PRICE,
12:39:11 2586  	   PRODUCT_OFFERING.QUANTITY,
12:39:11 2587  	   PRODUCT_OFFERING.CREATE_DATE,
12:39:11 2588  	   PRODUCT_OFFERING.CREATED_BY,
12:39:11 2589  	   CAPABILITY.ID CAP_ID,
12:39:11 2590  	   CAPABILITY.CODE CAP_CODE,
12:39:11 2591  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
12:39:11 2592  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
12:39:11 2593  	 FROM
12:39:11 2594  	   OFFER_PRODUCT_OFFERING
12:39:11 2595  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
12:39:11 2596  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
12:39:11 2597  	 WHERE
12:39:11 2598  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
12:39:11 2599  	     SELECT
12:39:11 2600  	       LICENSE.OFFER_ID
12:39:11 2601  	     FROM
12:39:11 2602  	       SUBSCRIPTION
12:39:11 2603  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE
12:39:11 2604  	     WHERE
12:39:11 2605  	       SUBSCRIPTION.ID = in_subscription_id
12:39:11 2606  	   );
12:39:11 2607  
12:39:11 2608  EXCEPTION
12:39:11 2609  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2610  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2611  	   SPROC_NAME, 'No such subscription');
12:39:11 2612  WHEN OTHERS THEN
12:39:11 2613  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2614  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2615  END GET_SUBSCR_PROD_OFFERRINGS;
12:39:11 2616  
12:39:11 2617  
12:39:11 2618  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
12:39:11 2619  /*
12:39:11 2620  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2621  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2622  */
12:39:11 2623  	 in_subscription_id IN NUMBER,
12:39:11 2624  	 out_result_set     OUT SYS_REFCURSOR
12:39:11 2625  ) AS
12:39:11 2626  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
12:39:11 2627  -- VARIABLES
12:39:11 2628  var_offer NUMBER;
12:39:11 2629  -- EXCEPTIONS
12:39:11 2630  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 2631  BEGIN
12:39:11 2632  
12:39:11 2633  	 OPEN out_result_set FOR
12:39:11 2634  	 SELECT DISTINCT
12:39:11 2635  	   PRODUCT_OFFERING.ID,
12:39:11 2636  	   PRODUCT_OFFERING.PRODUCT_ID,
12:39:11 2637  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
12:39:11 2638  	   PRODUCT_OFFERING.UNIT_PRICE,
12:39:11 2639  	   PRODUCT_OFFERING.QUANTITY,
12:39:11 2640  	   PRODUCT_OFFERING.CREATE_DATE,
12:39:11 2641  	   PRODUCT_OFFERING.CREATED_BY,
12:39:11 2642  	   CAPABILITY.ID CAP_ID,
12:39:11 2643  	   CAPABILITY.CODE CAP_CODE,
12:39:11 2644  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
12:39:11 2645  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
12:39:11 2646  	 FROM
12:39:11 2647  	   OFFER_PRODUCT_OFFERING
12:39:11 2648  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
12:39:11 2649  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
12:39:11 2650  	 WHERE
12:39:11 2651  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
12:39:11 2652  	     SELECT
12:39:11 2653  	       LICENSE.OFFER_ID
12:39:11 2654  	     FROM
12:39:11 2655  	       SUBSCRIPTION
12:39:11 2656  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 2657  	     WHERE
12:39:11 2658  	       SUBSCRIPTION.ID = in_subscription_id
12:39:11 2659  	   );
12:39:11 2660  
12:39:11 2661  EXCEPTION
12:39:11 2662  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2663  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2664  	   SPROC_NAME, 'No such subscription');
12:39:11 2665  WHEN OTHERS THEN
12:39:11 2666  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2667  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2668  END RETRIEVE_SUB_PROD_OFFER;
12:39:11 2669  /******************************************************************************/
12:39:11 2670  
12:39:11 2671  
12:39:11 2672  
12:39:11 2673  
12:39:11 2674  PROCEDURE GET_SUBSCR_LIC_OFFER(
12:39:11 2675  /*
12:39:11 2676  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2677  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2678  */
12:39:11 2679  	 in_subscription_id IN NUMBER,
12:39:11 2680  	 out_result_set     OUT SYS_REFCURSOR
12:39:11 2681  ) AS
12:39:11 2682  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
12:39:11 2683  -- VARIABLES
12:39:11 2684  var_offer_chain NUMBER;
12:39:11 2685  -- EXCEPTIONS
12:39:11 2686  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 2687  BEGIN
12:39:11 2688  	 BEGIN
12:39:11 2689  	   SELECT
12:39:11 2690  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
12:39:11 2691  	   FROM
12:39:11 2692  	     SUBSCRIPTION
12:39:11 2693  	   WHERE
12:39:11 2694  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 2695  	   EXCEPTION
12:39:11 2696  	     WHEN NO_DATA_FOUND THEN
12:39:11 2697  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 2698  	 END;
12:39:11 2699  
12:39:11 2700  	 OPEN out_result_set FOR
12:39:11 2701  	 SELECT DISTINCT
12:39:11 2702  	   po.ID po_id,
12:39:11 2703  	   po.PRODUCT_ID po_product_id,
12:39:11 2704  	   po.TAX_CATEGORY_ID po_tax_category_id,
12:39:11 2705  	   po.UNIT_PRICE po_unit_price,
12:39:11 2706  	   po.QUANTITY po_quantity,
12:39:11 2707  	   po.CREATE_DATE po_create_date,
12:39:11 2708  	   po.CREATED_BY po_created_by,
12:39:11 2709  	   l.ID l_id,
12:39:11 2710  	   l.license_status_id l_license_status_id,
12:39:11 2711  	   l.start_date l_start_date,
12:39:11 2712  	   l.offer_id l_offer_id,
12:39:11 2713  	   l.subscription_id l_subscription_id,
12:39:11 2714  	   l.invoice_id l_invoice_id,
12:39:11 2715  	   l.end_date l_end_date,
12:39:11 2716  	   l.entitlement_end_date l_entitlement_end_date,
12:39:11 2717  	   l.create_date l_create_date,
12:39:11 2718  	   l.created_by l_created_by,
12:39:11 2719  	   l.is_extension l_is_extension,
12:39:11 2720  	   l.current_offer_index l_current_offer_index,
12:39:11 2721  	   l.current_offer_recurr_num l_current_offer_recurr_num,
12:39:11 2722  	   l.needs_entitlements l_needs_entitlements
12:39:11 2723  	 FROM
12:39:11 2724  	   OFFER_PRODUCT_OFFERING opo,
12:39:11 2725  	   PRODUCT_OFFERING po,
12:39:11 2726  	   SUBSCRIPTION s,
12:39:11 2727  	   LICENSE l
12:39:11 2728  	 WHERE
12:39:11 2729  	   opo.product_offering_id = po.id
12:39:11 2730  	   and po.id = l.offer_id
12:39:11 2731  	   and l.subscription_id = s.id
12:39:11 2732  	   and l.license_status_id = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:11 2733  	   and s.id = in_subscription_id
12:39:11 2734  	 ;
12:39:11 2735  EXCEPTION
12:39:11 2736  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2737  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2738  	   SPROC_NAME, 'No such subscription');
12:39:11 2739  WHEN OTHERS THEN
12:39:11 2740  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2741  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2742  END GET_SUBSCR_LIC_OFFER;
12:39:11 2743  
12:39:11 2744  /******************************************************************************/
12:39:11 2745  
12:39:11 2746  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
12:39:11 2747  /*
12:39:11 2748  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2749  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2750  */
12:39:11 2751  	 in_subscription_id IN NUMBER,
12:39:11 2752  	 out_result	    OUT NUMBER
12:39:11 2753  ) AS
12:39:11 2754  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
12:39:11 2755  -- VARIABLES
12:39:11 2756  temp_subscription_id NUMBER;
12:39:11 2757  var_local_result     NUMBER;
12:39:11 2758  -- EXCEPTIONS
12:39:11 2759  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:11 2760  BEGIN
12:39:11 2761  
12:39:11 2762  	 -- Check that subscription exists
12:39:11 2763  	 BEGIN
12:39:11 2764  	   SELECT
12:39:11 2765  	     SUBSCRIPTION.ID into temp_subscription_id
12:39:11 2766  	   FROM
12:39:11 2767  	     SUBSCRIPTION
12:39:11 2768  	   WHERE
12:39:11 2769  	     SUBSCRIPTION.ID = in_subscription_id;
12:39:11 2770  	   EXCEPTION
12:39:11 2771  	     WHEN NO_DATA_FOUND THEN
12:39:11 2772  	       RAISE BAD_SUBSCRIPTION_ID;
12:39:11 2773  	 END;
12:39:11 2774  
12:39:11 2775  	 var_local_result := NULL;
12:39:11 2776  
12:39:11 2777  	 -- Check charges for each invoice associated with gived subscription
12:39:11 2778  	 FOR f_invoice IN (
12:39:11 2779  	   SELECT DISTINCT
12:39:11 2780  	     LICENSE.INVOICE_ID as "ID"
12:39:11 2781  	   FROM
12:39:11 2782  	     LICENSE
12:39:11 2783  	   WHERE
12:39:11 2784  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
12:39:11 2785  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.LICENSE_ACTIVE FROM DUAL )
12:39:11 2786  	 )
12:39:11 2787  	 LOOP
12:39:11 2788  
12:39:11 2789  	   -- Check each charge in invoice
12:39:11 2790  	   FOR f_charge IN (
12:39:11 2791  	     SELECT
12:39:11 2792  	       CHARGE.ID,
12:39:11 2793  	       CHARGE.CHARGE_STATUS_ID,
12:39:11 2794  	       CHARGE.CHARGE_AMOUNT
12:39:11 2795  	     FROM
12:39:11 2796  	       CHARGE
12:39:11 2797  	     WHERE
12:39:11 2798  	       CHARGE.INVOICE_ID = f_invoice.ID
12:39:11 2799  	   )
12:39:11 2800  	   LOOP
12:39:11 2801  
12:39:11 2802  	     -- Charge amount < 0     => it is a refund
12:39:11 2803  	     -- Charge status is OPEN => means that it is not processed yet
12:39:11 2804  	     IF f_charge.CHARGE_AMOUNT < 0
12:39:11 2805  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED THEN
12:39:11 2806  	       var_local_result := GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2807  	     END IF;
12:39:11 2808  
12:39:11 2809  	   END LOOP;
12:39:11 2810  
12:39:11 2811  	 END LOOP;
12:39:11 2812  
12:39:11 2813  	 IF var_local_result IS NULL THEN
12:39:11 2814  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 2815  	 ELSE
12:39:11 2816  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2817  	 END IF;
12:39:11 2818  
12:39:11 2819  EXCEPTION
12:39:11 2820  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:11 2821  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2822  	   SPROC_NAME, 'No such transaction id');
12:39:11 2823  WHEN OTHERS THEN
12:39:11 2824  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2825  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2826  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
12:39:11 2827  
12:39:11 2828  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
12:39:11 2829  /*
12:39:11 2830  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2831  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2832  */
12:39:11 2833  	 in_group_id	    IN NUMBER,
12:39:11 2834  	 in_offer_chain_id  IN NUMBER,
12:39:11 2835  	 out_result	    OUT NUMBER
12:39:11 2836  ) AS
12:39:11 2837  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
12:39:11 2838  -- VARIABLES
12:39:11 2839  temp_acct_id	    NUMBER;
12:39:11 2840  temp_oc_id	    NUMBER;
12:39:11 2841  -- EXCEPTIONS
12:39:11 2842  BAD_GROUP_ID EXCEPTION;
12:39:11 2843  BAD_OFFER_CHAIN_ID EXCEPTION;
12:39:11 2844  BEGIN
12:39:11 2845  	 -- Check that group id exists
12:39:11 2846  	 BEGIN
12:39:11 2847  	   SELECT
12:39:11 2848  	     ACCOUNT.ID into temp_acct_id
12:39:11 2849  	   FROM
12:39:11 2850  	     ACCOUNT
12:39:11 2851  	   WHERE
12:39:11 2852  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:11 2853  	   EXCEPTION
12:39:11 2854  	     WHEN NO_DATA_FOUND THEN
12:39:11 2855  	       RAISE BAD_GROUP_ID;
12:39:11 2856  	 END;
12:39:11 2857  	 -- Check that offer chain id exists
12:39:11 2858  	 BEGIN
12:39:11 2859  	   SELECT
12:39:11 2860  	     OFFER_CHAIN.ID into temp_oc_id
12:39:11 2861  	   FROM
12:39:11 2862  	     OFFER_CHAIN
12:39:11 2863  	   WHERE
12:39:11 2864  	     OFFER_CHAIN.ID = in_offer_chain_id;
12:39:11 2865  	   EXCEPTION
12:39:11 2866  	     WHEN NO_DATA_FOUND THEN
12:39:11 2867  	       RAISE BAD_OFFER_CHAIN_ID;
12:39:11 2868  	 END;
12:39:11 2869  	 SELECT
12:39:11 2870  	   COUNT(*) into out_result
12:39:11 2871  	 FROM
12:39:11 2872  	   SUBSCRIPTION
12:39:11 2873  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
12:39:11 2874  	 WHERE
12:39:11 2875  	   ACCOUNT.GROUP_ID = in_group_id
12:39:11 2876  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 2877  	   AND (
12:39:11 2878  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 2879  	   );
12:39:11 2880  
12:39:11 2881  EXCEPTION
12:39:11 2882  WHEN BAD_GROUP_ID THEN
12:39:11 2883  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2884  	   SPROC_NAME, 'No such transaction id');
12:39:11 2885  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:11 2886  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2887  	   SPROC_NAME, 'No such offer chain id');
12:39:11 2888  WHEN OTHERS THEN
12:39:11 2889  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2890  	   sproc_name, 'Unknown error', sqlerrm);
12:39:11 2891  END GET_EXISTING_SUBSCR_NUMBER;
12:39:11 2892  
12:39:11 2893  PROCEDURE GET_EXISTING_SUBSCR_IDS (
12:39:11 2894  /*
12:39:11 2895  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2896  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2897  */
12:39:11 2898  	 in_group_id	    IN NUMBER,
12:39:11 2899  	 in_offer_chain_id  IN NUMBER,
12:39:11 2900  	 out_result_set     OUT SYS_REFCURSOR
12:39:11 2901  ) AS
12:39:11 2902  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
12:39:11 2903  -- VARIABLES
12:39:11 2904  temp_acct_id	    NUMBER;
12:39:11 2905  temp_oc_id	    NUMBER;
12:39:11 2906  -- EXCEPTIONS
12:39:11 2907  BAD_GROUP_ID EXCEPTION;
12:39:11 2908  BAD_OFFER_CHAIN_ID EXCEPTION;
12:39:11 2909  BEGIN
12:39:11 2910  
12:39:11 2911  	 -- Check that group id exists
12:39:11 2912  	 BEGIN
12:39:11 2913  	   SELECT
12:39:11 2914  	     ACCOUNT.ID into temp_acct_id
12:39:11 2915  	   FROM
12:39:11 2916  	     ACCOUNT
12:39:11 2917  	   WHERE
12:39:11 2918  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:11 2919  	   EXCEPTION
12:39:11 2920  	     WHEN NO_DATA_FOUND THEN
12:39:11 2921  	       RAISE BAD_GROUP_ID;
12:39:11 2922  	 END;
12:39:11 2923  	 -- Check that offer chain id exists
12:39:11 2924  	 BEGIN
12:39:11 2925  	   SELECT
12:39:11 2926  	     OFFER_CHAIN.ID into temp_oc_id
12:39:11 2927  	   FROM
12:39:11 2928  	     OFFER_CHAIN
12:39:11 2929  	   WHERE
12:39:11 2930  	     OFFER_CHAIN.ID = in_offer_chain_id;
12:39:11 2931  	   EXCEPTION
12:39:11 2932  	     WHEN NO_DATA_FOUND THEN
12:39:11 2933  	       RAISE BAD_OFFER_CHAIN_ID;
12:39:11 2934  	 END;
12:39:11 2935  
12:39:11 2936  	 OPEN out_result_set FOR
12:39:11 2937  	 SELECT
12:39:11 2938  	   SUBSCRIPTION.ID
12:39:11 2939  	 FROM
12:39:11 2940  	   SUBSCRIPTION
12:39:11 2941  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
12:39:11 2942  	 WHERE
12:39:11 2943  	   ACCOUNT.GROUP_ID = in_group_id
12:39:11 2944  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 2945  	   AND (
12:39:11 2946  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 2947  	   );
12:39:11 2948  
12:39:11 2949  EXCEPTION
12:39:11 2950  WHEN BAD_GROUP_ID THEN
12:39:11 2951  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2952  	   SPROC_NAME, 'No such transaction id');
12:39:11 2953  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:11 2954  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2955  	   SPROC_NAME, 'No such offer chain id');
12:39:11 2956  WHEN OTHERS THEN
12:39:11 2957  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2958  	   sproc_name, 'Unknown error', sqlerrm);
12:39:11 2959  END GET_EXISTING_SUBSCR_IDS;
12:39:11 2960  
12:39:11 2961  PROCEDURE ADD_META_DATA (
12:39:11 2962  /*
12:39:11 2963  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 2964  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 2965  */
12:39:11 2966  	 in_subscription_id IN NUMBER,
12:39:11 2967  	 in_name	    IN VARCHAR2,
12:39:11 2968  	 in_value	    IN VARCHAR2,
12:39:11 2969  	 in_created_by	    IN VARCHAR2
12:39:11 2970  ) AS
12:39:11 2971  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
12:39:11 2972  BEGIN
12:39:11 2973  
12:39:11 2974  	 INSERT INTO SUBSCRIPTION_META_DATA (
12:39:11 2975  	   ID,
12:39:11 2976  	   SUBSCRIPTION_ID,
12:39:11 2977  	   NAME,
12:39:11 2978  	   VALUE,
12:39:11 2979  	   CREATE_DATE,
12:39:11 2980  	   CREATED_BY
12:39:11 2981  	 ) VALUES (
12:39:11 2982  	   SUBMD_ID_SEQ.nextVal,
12:39:11 2983  	   in_subscription_id,
12:39:11 2984  	   in_name,
12:39:11 2985  	   in_value,
12:39:11 2986  	   sysdate,
12:39:11 2987  	   in_created_by
12:39:11 2988  	 );
12:39:11 2989  
12:39:11 2990  EXCEPTION
12:39:11 2991  WHEN OTHERS THEN
12:39:11 2992  	 IF SQLCODE = -2291 THEN
12:39:11 2993  	   PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2994  	     SPROC_NAME, 'No such subscription');
12:39:11 2995  	 ELSE
12:39:11 2996  	   PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2997  	     SPROC_NAME, 'Unknown error', sqlerrm);
12:39:11 2998  	 END IF;
12:39:11 2999  END ADD_META_DATA;
12:39:11 3000  
12:39:11 3001  /******************************************************************************/
12:39:11 3002  
12:39:11 3003  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
12:39:11 3004  /*
12:39:11 3005  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:11 3006  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 3007  */
12:39:11 3008  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
12:39:11 3009  	 out_result_set       OUT SYS_REFCURSOR
12:39:11 3010  ) AS
12:39:11 3011  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
12:39:11 3012  -- Exceptions
12:39:11 3013  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
12:39:11 3014  BEGIN
12:39:11 3015  
12:39:11 3016  	 IF in_subscriptions_ids IS NULL THEN
12:39:11 3017  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
12:39:11 3018  	 END IF;
12:39:11 3019  
12:39:11 3020  	 OPEN out_result_set FOR
12:39:11 3021  	 SELECT
12:39:11 3022  	   SMD.SUBSCRIPTION_ID,
12:39:11 3023  	   SMD.NAME,
12:39:11 3024  	   SMD.VALUE
12:39:11 3025  	 FROM
12:39:11 3026  	   SUBSCRIPTION_META_DATA SMD
12:39:11 3027  	 WHERE
12:39:11 3028  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
12:39:11 3029  
12:39:11 3030  EXCEPTION
12:39:11 3031  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
12:39:11 3032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 3033  	   SPROC_NAME, 'Bad subscription ids parameter');
12:39:11 3034  WHEN OTHERS THEN
12:39:11 3035  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 3036  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 3037  END GET_SUBSCRIPTIONS_META_DATA;
12:39:11 3038  
12:39:11 3039  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
12:39:11 3040  /*
12:39:11 3041  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 3042  */
12:39:11 3043  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
12:39:11 3044  	 out_result_set     OUT SYS_REFCURSOR
12:39:11 3045  ) AS
12:39:11 3046  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
12:39:11 3047  BEGIN
12:39:11 3048  	 OPEN out_result_set FOR
12:39:11 3049  	 SELECT subscription.id FROM
12:39:11 3050  	   subscription
12:39:11 3051  	 INNER JOIN license ON license.subscription_id = subscription.id
12:39:11 3052  	 INNER JOIN invoice ON invoice.id = license.invoice_id
12:39:11 3053  	 INNER JOIN charge ON invoice.id = charge.invoice_id
12:39:11 3054  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
12:39:11 3055  	 WHERE transaction.order_id = in_order_id;
12:39:11 3056  EXCEPTION
12:39:11 3057  WHEN OTHERS THEN
12:39:11 3058  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 3059  	   SPROC_NAME, 'Unknown error', sqlerrm);
12:39:11 3060  END GET_SUBS_BY_TRNS_ORDER_ID;
12:39:11 3061  
12:39:11 3062  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
12:39:11 3063  	(
12:39:11 3064  /*
12:39:11 3065  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 3066  */
12:39:11 3067  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
12:39:11 3068  	 out_result_set      OUT SYS_REFCURSOR
12:39:11 3069  )
12:39:11 3070  AS
12:39:11 3071  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
12:39:11 3072  BEGIN
12:39:11 3073  	 OPEN out_result_set FOR
12:39:11 3074  	 SELECT
12:39:11 3075  	   c.ID,
12:39:11 3076  	   c.TRANSACTION_ID,
12:39:11 3077  	   c.INSTRUMENT_ID,
12:39:11 3078  	   c.INSTRUMENT_TYPE_ID,
12:39:11 3079  	   c.CHARGE_AMOUNT,
12:39:11 3080  	   c.CREATE_DATE,
12:39:11 3081  	   c.CREATED_BY,
12:39:11 3082  	   c.INVOICE_ID
12:39:11 3083  	  FROM
12:39:11 3084  	   subscription s,
12:39:11 3085  	   license l,
12:39:11 3086  	   charge c
12:39:11 3087  	 WHERE
12:39:11 3088  	   s.id = l.subscription_id and
12:39:11 3089  	   l.invoice_id = c.invoice_id and
12:39:11 3090  	   c.charge_status_id = GLOBAL_STATUSES_V16.CHARGE_OPENED and
12:39:11 3091  	   exists (
12:39:11 3092  	     select null
12:39:11 3093  	     from transaction t
12:39:11 3094  	     where
12:39:11 3095  	       t.id = c.transaction_id
12:39:11 3096  	   ) and
12:39:11 3097  	   s.id = in_subscription_id;
12:39:11 3098  EXCEPTION
12:39:11 3099  WHEN OTHERS THEN
12:39:11 3100  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 3101  	   SPROC_NAME, 'Unknown error', sqlerrm);
12:39:11 3102  END GET_OPEN_CHARGES_BY_SUBID;
12:39:11 3103  
12:39:11 3104  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
12:39:11 3105  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
12:39:11 3106  ) RETURN NUMBER
12:39:11 3107  AS
12:39:11 3108  var_gift_certificate_id NUMBER;
12:39:11 3109  BEGIN
12:39:11 3110  	     SELECT id INTO var_gift_certificate_id
12:39:11 3111  	     FROM
12:39:11 3112  	       gift_certificate gc
12:39:11 3113  	     WHERE
12:39:11 3114  	       gc.finalized_invoice_id in (
12:39:11 3115  		 SELECT invoice_id
12:39:11 3116  		 FROM (
12:39:11 3117  		   SELECT l.invoice_id
12:39:11 3118  		   FROM
12:39:11 3119  		     license l
12:39:11 3120  		   WHERE
12:39:11 3121  		     l.subscription_id = in_subscription_id
12:39:11 3122  		   ORDER BY l.create_date asc
12:39:11 3123  		 )
12:39:11 3124  	       )
12:39:11 3125  	       and rownum <= 1;
12:39:11 3126  	     return var_gift_certificate_id;
12:39:11 3127  END GET_GIFT_CERT_ID_BY_SUB_ID;
12:39:11 3128  
12:39:11 3129  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
12:39:11 3130  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
12:39:11 3131  ) RETURN VARCHAR2
12:39:11 3132  AS
12:39:11 3133  var_gift_certificate_code VARCHAR2(255 BYTE);
12:39:11 3134  BEGIN
12:39:11 3135  	     SELECT code INTO var_gift_certificate_code
12:39:11 3136  	     FROM
12:39:11 3137  	       gift_certificate gc
12:39:11 3138  	     WHERE
12:39:11 3139  	       gc.finalized_invoice_id in (
12:39:11 3140  		 SELECT invoice_id
12:39:11 3141  		 FROM (
12:39:11 3142  		   SELECT l.invoice_id
12:39:11 3143  		   FROM
12:39:11 3144  		     license l
12:39:11 3145  		   WHERE
12:39:11 3146  		     l.subscription_id = in_subscription_id
12:39:11 3147  		 )
12:39:11 3148  	       )
12:39:11 3149  	       and rownum <= 1;
12:39:11 3150  	     return var_gift_certificate_code;
12:39:11 3151  END GET_GIFT_CERT_CODE_BY_SUB_ID;
12:39:11 3152  
12:39:11 3153  
12:39:11 3154  
12:39:11 3155  PROCEDURE GET_ACTIVE_MEU_SUBS (
12:39:11 3156  	 out_result_set      OUT SYS_REFCURSOR
12:39:11 3157  )
12:39:11 3158  AS
12:39:11 3159  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
12:39:11 3160  BEGIN
12:39:11 3161  	 OPEN out_result_set FOR
12:39:11 3162  	       SELECT
12:39:11 3163  		   s.id,
12:39:11 3164  		   s.instrument_type_id,
12:39:11 3165  		   s.instrument_id,
12:39:11 3166  		   a.group_id,
12:39:11 3167  		   s.offer_chain_id
12:39:11 3168  	       FROM
12:39:11 3169  		   core_owner.subscription s,
12:39:11 3170  		   core_owner.account a
12:39:11 3171  	       WHERE
12:39:11 3172  		   a.id = s.account_id AND(
12:39:11 3173  		       s.offer_chain_id = 1745992781 OR
12:39:11 3174  		       s.offer_chain_id = 3902149773 OR
12:39:11 3175  		       s.offer_chain_id = 2240201337) AND
12:39:11 3176  		   NOT EXISTS
12:39:11 3177  		   (
12:39:11 3178  		       SELECT
12:39:11 3179  			   1
12:39:11 3180  		       FROM
12:39:11 3181  			   core_owner.subscription ss
12:39:11 3182  		       WHERE
12:39:11 3183  			   ss.account_id = a.id AND(
12:39:11 3184  			       ss.offer_chain_id = 2794122734 OR
12:39:11 3185  			       ss.offer_chain_id = 3564368005 OR
12:39:11 3186  			       ss.offer_chain_id = 757934392)) AND
12:39:11 3187  		   rownum < 5000;
12:39:11 3188  END GET_ACTIVE_MEU_SUBS;
12:39:11 3189  
12:39:11 3190  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
12:39:11 3191  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
12:39:11 3192  	 out_offer_id	     OUT NUMBER
12:39:11 3193  )
12:39:11 3194  AS
12:39:11 3195  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
12:39:11 3196  BEGIN
12:39:11 3197  	 SELECT OFFER_ID INTO out_offer_id
12:39:11 3198  	 FROM LICENSE L,
12:39:11 3199  	 (
12:39:11 3200  	   SELECT MIN(ID) ID FROM LICENSE
12:39:11 3201  	   WHERE SUBSCRIPTION_ID = in_subscription_id
12:39:11 3202  	   AND LICENSE_STATUS_ID = 2
12:39:11 3203  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
12:39:11 3204  	 ) EARLIEST_ACTIVE_LICENSE
12:39:11 3205  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
12:39:11 3206  END GET_EARLIEST_ACTIVE_OFFER_ID;
12:39:11 3207  
12:39:11 3208  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
12:39:11 3209  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
12:39:11 3210  	 out_license_id        OUT NUMBER
12:39:11 3211  )
12:39:11 3212  AS
12:39:11 3213  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
12:39:11 3214  BEGIN
12:39:11 3215  	 SELECT MIN(ID) into out_license_id
12:39:11 3216  	 FROM LICENSE
12:39:11 3217  	 WHERE SUBSCRIPTION_ID = in_subscription_id
12:39:11 3218  	 AND LICENSE_STATUS_ID = 2
12:39:11 3219  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
12:39:11 3220  END GET_EARLIEST_ACTIVE_LICENSE_ID;
12:39:11 3221  
12:39:11 3222  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
12:39:11 3223  	 out_result_set      OUT SYS_REFCURSOR
12:39:11 3224  )
12:39:11 3225  AS
12:39:11 3226  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
12:39:11 3227  BEGIN
12:39:11 3228  	 OPEN out_result_set FOR
12:39:11 3229  	   SELECT
12:39:11 3230  	     s.id
12:39:11 3231  	   FROM
12:39:11 3232  	     core_owner.transaction t
12:39:11 3233  	   INNER JOIN
12:39:11 3234  	     core_owner.charge c
12:39:11 3235  	   ON
12:39:11 3236  	     c.transaction_id = t.id
12:39:11 3237  	   INNER JOIN
12:39:11 3238  	     core_owner.invoice i
12:39:11 3239  	   ON
12:39:11 3240  	     i.id = c.invoice_id
12:39:11 3241  	   INNER JOIN
12:39:11 3242  	     core_owner.license l
12:39:11 3243  	   ON
12:39:11 3244  	     i.id = l.invoice_id
12:39:11 3245  	   INNER JOIN
12:39:11 3246  	     core_owner.subscription s
12:39:11 3247  	   ON
12:39:11 3248  	     l.subscription_id = s.id
12:39:11 3249  	   INNER JOIN
12:39:11 3250  	     core_owner.account a
12:39:11 3251  	   ON
12:39:11 3252  	     s.account_id = a.id
12:39:11 3253  	   JOIN
12:39:11 3254  	     core_owner.rcn_cpt_chargeback_act_detail ccad
12:39:11 3255  	   ON
12:39:11 3256  	     t.order_id = ccad.merchant_order_number
12:39:11 3257  	   WHERE
12:39:11 3258  	     ccad.chargeback_category = 'RECD'
12:39:11 3259  	   AND s.subscription_status_id = 1;
12:39:11 3260  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
12:39:11 3261  
12:39:11 3262  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
12:39:11 3263  	 out_result_set      OUT SYS_REFCURSOR
12:39:11 3264  )
12:39:11 3265  AS
12:39:11 3266  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
12:39:11 3267  BEGIN
12:39:11 3268  	 OPEN out_result_set FOR
12:39:11 3269  	   SELECT
12:39:11 3270  	     s.id
12:39:11 3271  	   FROM
12:39:11 3272  	     core_owner.transaction t
12:39:11 3273  	   INNER JOIN
12:39:11 3274  	     core_owner.charge c
12:39:11 3275  	   ON
12:39:11 3276  	     c.transaction_id = t.id
12:39:11 3277  	   INNER JOIN
12:39:11 3278  	     core_owner.invoice i
12:39:11 3279  	   ON
12:39:11 3280  	     i.id = c.invoice_id
12:39:11 3281  	   INNER JOIN
12:39:11 3282  	     core_owner.license l
12:39:11 3283  	   ON
12:39:11 3284  	     i.id = l.invoice_id
12:39:11 3285  	   INNER JOIN
12:39:11 3286  	     core_owner.subscription s
12:39:11 3287  	   ON
12:39:11 3288  	     l.subscription_id = s.id
12:39:11 3289  	   INNER JOIN
12:39:11 3290  	     core_owner.account a
12:39:11 3291  	   ON
12:39:11 3292  	     s.account_id = a.id
12:39:11 3293  	   INNER JOIN
12:39:11 3294  	     core_owner.rcn_pp_trans_detail ptd
12:39:11 3295  	   ON
12:39:11 3296  	     t.order_id = ptd.invoice_id
12:39:11 3297  	   WHERE
12:39:11 3298  	     ptd.trans_status = 'D'
12:39:11 3299  	   AND s.subscription_status_id = 1;
12:39:11 3300  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
12:39:11 3301  
12:39:11 3302  END PROCS_SUBSCRIPTION_V16;
12:39:11 3303  .
12:39:11 SQL> /

Package body created.

Elapsed: 00:00:00.32
12:39:11 SQL> 
12:39:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V16" AS
12:39:11   2  
12:39:11   3  PROCEDURE IS_INVOICE_FOR_GC (
12:39:11   4  	in_invoice_id IN NUMBER,
12:39:11   5  	out_result    OUT NUMBER
12:39:11   6  ) AS
12:39:11   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
12:39:11   8  var_is_for_gc NUMBER;
12:39:11   9  BEGIN
12:39:11  10  	SELECT
12:39:11  11  	  count(1) into var_is_for_gc
12:39:11  12  	FROM GIFT_CERTIFICATE GC
12:39:11  13  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
12:39:11  14  
12:39:11  15  	IF var_is_for_gc > 0 THEN
12:39:11  16  	  out_result := 1;
12:39:11  17  	ELSE
12:39:11  18  	  out_result := 0;
12:39:11  19  	END IF;
12:39:11  20  END IS_INVOICE_FOR_GC;
12:39:11  21  
12:39:11  22  PROCEDURE CREATE_INVOICE(
12:39:11  23  /*
12:39:11  24  Throws exceptions:
12:39:11  25  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11  26  */
12:39:11  27  	  in_invoice_status IN NUMBER,
12:39:11  28  	  in_created_by     IN VARCHAR2,
12:39:11  29  	  in_tax_exempt_id  IN VARCHAR2,
12:39:11  30  	  out_invoice_id    OUT NUMBER
12:39:11  31  ) AS
12:39:11  32  -- VARIABLES
12:39:11  33  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
12:39:11  34  var_new_invoice_id NUMBER;
12:39:11  35  -- EXCEPTIONS
12:39:11  36  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11  37  BEGIN
12:39:11  38  
12:39:11  39  	PROCS_INVOICE_CRU_V16.CREATE_INVOICE(
12:39:11  40  	  out_invoice_id		 => var_new_invoice_id,
12:39:11  41  	  in_created_by 		 => in_created_by,
12:39:11  42  	  in_invoice_status_id		 => in_invoice_status,
12:39:11  43  	  in_tax_exempt_id		 => in_tax_exempt_id
12:39:11  44  	);
12:39:11  45  
12:39:11  46  	out_invoice_id := var_new_invoice_id;
12:39:11  47  
12:39:11  48  EXCEPTION
12:39:11  49  WHEN OTHERS THEN
12:39:11  50  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11  51  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11  52  END CREATE_INVOICE;
12:39:11  53  
12:39:11  54  /************************************************************/
12:39:11  55  
12:39:11  56  PROCEDURE GET_PENDING_INVOICES (
12:39:11  57  /*
12:39:11  58  Throws exceptions:
12:39:11  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11  60  */
12:39:11  61  	out_result_set1      OUT SYS_REFCURSOR,
12:39:11  62  	out_result_set2      OUT SYS_REFCURSOR,
12:39:11  63  	out_result_set3      OUT SYS_REFCURSOR,
12:39:11  64  	in_row_number	     IN NUMBER DEFAULT NULL
12:39:11  65  ) AS
12:39:11  66  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
12:39:11  67  -- COMSTANTS
12:39:11  68  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
12:39:11  69  -- VARIABLES
12:39:11  70  var_row_number NUMBER;
12:39:11  71  BEGIN
12:39:11  72  
12:39:11  73  	IF in_row_number IS NULL THEN
12:39:11  74  	  var_row_number := DEFAULT_ROW_NUMBER;
12:39:11  75  	ELSE
12:39:11  76  	  var_row_number := in_row_number;
12:39:11  77  	END IF;
12:39:11  78  
12:39:11  79  	-- Invoices with one or more payments(charges) with transaction status PENDING
12:39:11  80  	OPEN out_result_set1 FOR
12:39:11  81  SELECT * FROM
12:39:11  82  (
12:39:11  83  	SELECT
12:39:11  84  	  INVOICE.ID
12:39:11  85  	FROM
12:39:11  86  	  CHARGE
12:39:11  87  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
12:39:11  88  	WHERE
12:39:11  89  	  EXISTS(
12:39:11  90  	    SELECT NULL
12:39:11  91  	    FROM TRANSACTION
12:39:11  92  	    WHERE
12:39:11  93  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
12:39:11  94  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
12:39:11  95  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V16.TRUE
12:39:11  96  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
12:39:11  97  	  )
12:39:11  98  	  AND
12:39:11  99  	  NOT EXISTS(
12:39:11 100  	    SELECT NULL
12:39:11 101  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:11 102  	    WHERE PROCESS_NAME = SPROC_NAME
12:39:11 103  	      AND GENERIC_ID = INVOICE.ID
12:39:11 104  	  )
12:39:11 105  	  AND ROWNUM <= var_row_number*10
12:39:11 106  	  ORDER BY dbms_random.value
12:39:11 107  ) WHERE
12:39:11 108  	  ROWNUM <= var_row_number;
12:39:11 109  
12:39:11 110  	-- Invoices not marked as CLOSED but are fully paid (shouldn't happen).
12:39:11 111  	OPEN out_result_set2 FOR
12:39:11 112  	SELECT
12:39:11 113  	  INVOICE.ID
12:39:11 114  	FROM
12:39:11 115  	  INVOICE
12:39:11 116  	WHERE
12:39:11 117  	  1 = 2 AND
12:39:11 118  	  (
12:39:11 119  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V16.INVOICE_OPEN
12:39:11 120  	  )
12:39:11 121  	  AND NOT EXISTS(
12:39:11 122  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED AND ROWNUM <= 1
12:39:11 123  	  )
12:39:11 124  	  AND EXISTS (
12:39:11 125  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID != GLOBAL_STATUSES_V16.CHARGE_OPENED AND ROWNUM <= 1
12:39:11 126  	  )
12:39:11 127  	  AND INVOICE.ID NOT IN
12:39:11 128  	    (
12:39:11 129  	      SELECT GENERIC_ID
12:39:11 130  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:11 131  	      WHERE
12:39:11 132  		PROCESS_NAME = SPROC_NAME
12:39:11 133  	    )
12:39:11 134  	  AND ROWNUM <= var_row_number;
12:39:11 135  
12:39:11 136  	-- Invoices not marked as CLOSED with no payments(charges).
12:39:11 137  	OPEN out_result_set3 FOR
12:39:11 138  	SELECT
12:39:11 139  	  INVOICE.ID
12:39:11 140  	FROM
12:39:11 141  	  INVOICE
12:39:11 142  	WHERE
12:39:11 143  	  1 = 2 AND
12:39:11 144  	  (
12:39:11 145  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V16.INVOICE_OPEN
12:39:11 146  	  )
12:39:11 147  	  AND NOT EXISTS (
12:39:11 148  	    SELECT 1 FROM CHARGE WHERE CHARGE.INVOICE_ID = INVOICE.ID AND ROWNUM <= 1
12:39:11 149  	  )
12:39:11 150  	  AND INVOICE.ID NOT IN
12:39:11 151  	    (
12:39:11 152  	      SELECT GENERIC_ID
12:39:11 153  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:11 154  	      WHERE
12:39:11 155  		PROCESS_NAME = SPROC_NAME
12:39:11 156  	    )
12:39:11 157  	  AND ROWNUM <= var_row_number;
12:39:11 158  
12:39:11 159  EXCEPTION
12:39:11 160  WHEN OTHERS THEN
12:39:11 161  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 163  END GET_PENDING_INVOICES;
12:39:11 164  
12:39:11 165  /************************************************************/
12:39:11 166  
12:39:11 167  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
12:39:11 168  	in_invoice_id IN  NUMBER
12:39:11 169  ) RETURN NUMBER AS
12:39:11 170  var_amount NUMBER;
12:39:11 171  BEGIN
12:39:11 172  
12:39:11 173  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
12:39:11 174  	RETURN var_amount;
12:39:11 175  
12:39:11 176  END;
12:39:11 177  
12:39:11 178  PROCEDURE CALCULATE_INVOICE_AMOUNT (
12:39:11 179  /*
12:39:11 180  Throws exceptions:
12:39:11 181  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 182  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 183  */
12:39:11 184  	in_invoice_id IN  NUMBER,
12:39:11 185  	out_amount    OUT NUMBER
12:39:11 186  ) AS
12:39:11 187  -- VARIABLES
12:39:11 188  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
12:39:11 189  temp_invoice_id	     NUMBER;
12:39:11 190  var_total_amount	     NUMBER(10,6);
12:39:11 191  var_final_amount	     NUMBER(10,2);
12:39:11 192  var_line_item_amount   NUMBER(10,6);
12:39:11 193  
12:39:11 194  var_line_items_set     SYS_REFCURSOR;
12:39:11 195  var_line_item_id	     NUMBER;
12:39:11 196  var_line_item_quantity NUMBER;
12:39:11 197  var_line_item_price    NUMBER (10,2);
12:39:11 198  
12:39:11 199  var_discount_fixed_amount NUMBER (10,2);
12:39:11 200  var_discount_percent_amount NUMBER (10,2);
12:39:11 201  
12:39:11 202  -- EXCEPTIONS
12:39:11 203  BAD_INVOICE_ID		    EXCEPTION;
12:39:11 204  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
12:39:11 205  EXCEPTION_MESSAGE VARCHAR2(1024);
12:39:11 206  BEGIN
12:39:11 207  
12:39:11 208  	var_total_amount := 0;
12:39:11 209  
12:39:11 210  	-- Check that given invoice exists
12:39:11 211  	BEGIN
12:39:11 212  	  SELECT
12:39:11 213  	    INVOICE.ID into temp_invoice_id
12:39:11 214  	  FROM
12:39:11 215  	    INVOICE
12:39:11 216  	  WHERE
12:39:11 217  	    INVOICE.ID = in_invoice_id
12:39:11 218  	    AND ROWNUM <= 1;
12:39:11 219  	  EXCEPTION
12:39:11 220  	    WHEN NO_DATA_FOUND THEN
12:39:11 221  	      RAISE BAD_INVOICE_ID;
12:39:11 222  	END;
12:39:11 223  
12:39:11 224  	-- Calculate amount for each line item in invoice
12:39:11 225  	FOR f_line_item IN (
12:39:11 226  	  SELECT
12:39:11 227  	    LINE_ITEM.ID
12:39:11 228  	  FROM
12:39:11 229  	    LINE_ITEM
12:39:11 230  	  WHERE
12:39:11 231  	    LINE_ITEM.INVOICE_ID = in_invoice_id
12:39:11 232  	)
12:39:11 233  	LOOP
12:39:11 234  	  BEGIN
12:39:11 235  	    PROCS_LINE_ITEMS_V16.CALCULATE_LINE_ITEM_AMOUNT(
12:39:11 236  	      in_line_item_id => f_line_item.ID,
12:39:11 237  	      out_amount      => var_line_item_amount
12:39:11 238  	    );
12:39:11 239  	    var_total_amount := var_total_amount + var_line_item_amount;
12:39:11 240  	    EXCEPTION
12:39:11 241  	      WHEN OTHERS THEN
12:39:11 242  		EXCEPTION_MESSAGE := SQLERRM;
12:39:11 243  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
12:39:11 244  	  END;
12:39:11 245  	END LOOP;
12:39:11 246  	var_final_amount := var_total_amount;
12:39:11 247  	out_amount := var_final_amount;
12:39:11 248  
12:39:11 249  EXCEPTION
12:39:11 250  WHEN BAD_INVOICE_ID THEN
12:39:11 251  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 252  	  SPROC_NAME, 'No such invoice');
12:39:11 253  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
12:39:11 254  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 255  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
12:39:11 256  WHEN OTHERS THEN
12:39:11 257  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 258  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 259  END;
12:39:11 260  
12:39:11 261  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
12:39:11 262  /*
12:39:11 263  Throws exceptions:
12:39:11 264  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 265  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 266  */
12:39:11 267  	in_invoice_id  IN  NUMBER,
12:39:11 268  	out_account_id OUT NUMBER
12:39:11 269  ) AS
12:39:11 270  -- VARIABLES
12:39:11 271  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
12:39:11 272  temp_gc_account_id NUMBER;
12:39:11 273  temp_ss_account_id NUMBER;
12:39:11 274  temp_invoice_id	 NUMBER;
12:39:11 275  -- EXCEPTIONS
12:39:11 276  BAD_INVOICE_ID	   EXCEPTION;
12:39:11 277  CAN_NOT_FIND_ACCOUNT EXCEPTION;
12:39:11 278  BEGIN
12:39:11 279  
12:39:11 280  	-- Check that given invoice exists
12:39:11 281  	BEGIN
12:39:11 282  	  SELECT
12:39:11 283  	    INVOICE.ID into temp_invoice_id
12:39:11 284  	  FROM
12:39:11 285  	    INVOICE
12:39:11 286  	  WHERE
12:39:11 287  	    INVOICE.ID = in_invoice_id;
12:39:11 288  	  EXCEPTION
12:39:11 289  	    WHEN NO_DATA_FOUND THEN
12:39:11 290  	      RAISE BAD_INVOICE_ID;
12:39:11 291  	END;
12:39:11 292  
12:39:11 293  	-- Try to find gift certificate with given invoice
12:39:11 294  	BEGIN
12:39:11 295  	  SELECT
12:39:11 296  	    ACCOUNT.GROUP_ID into temp_gc_account_id
12:39:11 297  	  FROM
12:39:11 298  	    GIFT_CERTIFICATE
12:39:11 299  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
12:39:11 300  	  WHERE
12:39:11 301  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
12:39:11 302  	    AND ROWNUM <= 1;
12:39:11 303  	  EXCEPTION
12:39:11 304  	    WHEN NO_DATA_FOUND THEN
12:39:11 305  	      temp_gc_account_id := NULL;
12:39:11 306  	END;
12:39:11 307  
12:39:11 308  	-- check subscriptions for given invoice
12:39:11 309  	IF temp_gc_account_id IS NOT NULL THEN
12:39:11 310  	  out_account_id := temp_gc_account_id;
12:39:11 311  	ELSE
12:39:11 312  	  BEGIN
12:39:11 313  	    SELECT
12:39:11 314  	      ACCOUNT.GROUP_ID into temp_ss_account_id
12:39:11 315  	    FROM
12:39:11 316  	      LICENSE
12:39:11 317  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 318  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
12:39:11 319  	    WHERE
12:39:11 320  	      LICENSE.INVOICE_ID = in_invoice_id
12:39:11 321  	      AND ROWNUM <= 1;
12:39:11 322  	    EXCEPTION
12:39:11 323  	      WHEN NO_DATA_FOUND THEN
12:39:11 324  		temp_ss_account_id := NULL;
12:39:11 325  	  END;
12:39:11 326  	  IF temp_ss_account_id IS NULL THEN
12:39:11 327  	    RAISE CAN_NOT_FIND_ACCOUNT;
12:39:11 328  	  ELSE
12:39:11 329  	    out_account_id := temp_ss_account_id;
12:39:11 330  	  END IF;
12:39:11 331  	END IF;
12:39:11 332  
12:39:11 333  EXCEPTION
12:39:11 334  WHEN BAD_INVOICE_ID THEN
12:39:11 335  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 336  	  SPROC_NAME, 'No such invoice');
12:39:11 337  WHEN CAN_NOT_FIND_ACCOUNT THEN
12:39:11 338  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 339  	  SPROC_NAME, 'Could not find account by given invoice id');
12:39:11 340  WHEN OTHERS THEN
12:39:11 341  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 342  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 343  END GET_ACCOUNT_BY_INVOICE_ID;
12:39:11 344  
12:39:11 345  /*****************************************************************/
12:39:11 346  
12:39:11 347  PROCEDURE GET_INVOICE_DETAILS (
12:39:11 348  /*
12:39:11 349  Throws exceptions:
12:39:11 350  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 351  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 352  */
12:39:11 353  	in_invoice_id	   IN  NUMBER,
12:39:11 354  	out_group_id	   OUT NUMBER,
12:39:11 355  	out_status_id	   OUT NUMBER,
12:39:11 356  	out_line_items_set OUT SYS_REFCURSOR,
12:39:11 357  	out_pp_charges_set OUT SYS_REFCURSOR,
12:39:11 358  	out_cc_charges_set OUT SYS_REFCURSOR,
12:39:11 359  	out_gc_charges_set OUT SYS_REFCURSOR
12:39:11 360  ) AS
12:39:11 361  -- VARIABLES
12:39:11 362  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
12:39:11 363  
12:39:11 364  -- EXCEPTIONS
12:39:11 365  BAD_INVOICE_ID	     EXCEPTION;
12:39:11 366  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
12:39:11 367  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 368  BEGIN
12:39:11 369  
12:39:11 370  	-- get invoice status
12:39:11 371  	BEGIN
12:39:11 372  	  SELECT
12:39:11 373  	    INVOICE.INVOICE_STATUS_ID into out_status_id
12:39:11 374  	  FROM
12:39:11 375  	    INVOICE
12:39:11 376  	  WHERE
12:39:11 377  	    INVOICE.ID = in_invoice_id;
12:39:11 378  	  EXCEPTION
12:39:11 379  	    WHEN NO_DATA_FOUND THEN
12:39:11 380  	      RAISE BAD_INVOICE_ID;
12:39:11 381  	END;
12:39:11 382  
12:39:11 383  	-- get group id
12:39:11 384  	BEGIN
12:39:11 385  	  PROCS_INVOICE_V16.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
12:39:11 386  	  EXCEPTION
12:39:11 387  	    WHEN OTHERS THEN
12:39:11 388  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 389  	      RAISE CAN_NOT_FIND_ACCOUNT;
12:39:11 390  	END;
12:39:11 391  
12:39:11 392  	-- get all line items for given invoice
12:39:11 393  	OPEN out_line_items_set FOR
12:39:11 394  	SELECT
12:39:11 395  	  LINE_ITEM.AMOUNT,
12:39:11 396  	  LINE_ITEM.ID,
12:39:11 397  	  LINE_ITEM.CREATED_BY,
12:39:11 398  	  LINE_ITEM.CREATE_DATE,
12:39:11 399  	  LINE_ITEM.DISCOUNT_AMOUNT,
12:39:11 400  	  LINE_ITEM.TAXES_AMOUNT,
12:39:11 401  	  LINE_ITEM.PRODUCT_OFFER_ID,
12:39:11 402  	  LINE_ITEM.INVOICE_ID
12:39:11 403  	FROM
12:39:11 404  	  LINE_ITEM
12:39:11 405  	WHERE
12:39:11 406  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
12:39:11 407  
12:39:11 408  	-- get all pp charges for given invoice
12:39:11 409  	OPEN out_pp_charges_set FOR
12:39:11 410  	SELECT
12:39:11 411  	  CHARGE.ID as "CHARGE_ID",
12:39:11 412  	  CHARGE_AMOUNT,
12:39:11 413  	  CHARGE.INSTRUMENT_ID,
12:39:11 414  	  CHARGE.CHARGE_STATUS_ID
12:39:11 415  	FROM
12:39:11 416  	  CHARGE
12:39:11 417  	WHERE
12:39:11 418  	  CHARGE.INVOICE_ID = in_invoice_id
12:39:11 419  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL;
12:39:11 420  
12:39:11 421  	-- get all credir cards for given invoice
12:39:11 422  	OPEN out_cc_charges_set FOR
12:39:11 423  	SELECT
12:39:11 424  	  CHARGE.ID as "CHARGE_ID",
12:39:11 425  	  CHARGE.CHARGE_AMOUNT,
12:39:11 426  	  CHARGE.INSTRUMENT_ID,
12:39:11 427  	  CHARGE.CHARGE_STATUS_ID
12:39:11 428  	FROM
12:39:11 429  	  CHARGE
12:39:11 430  	WHERE
12:39:11 431  	  CHARGE.INVOICE_ID = in_invoice_id
12:39:11 432  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD;
12:39:11 433  
12:39:11 434  	OPEN out_gc_charges_set FOR
12:39:11 435  	SELECT
12:39:11 436  	  CHARGE.ID as "CHARGE_ID",
12:39:11 437  	  CHARGE.CHARGE_AMOUNT,
12:39:11 438  	  CHARGE.INSTRUMENT_ID,
12:39:11 439  	  CHARGE.CHARGE_STATUS_ID
12:39:11 440  	FROM
12:39:11 441  	  CHARGE
12:39:11 442  	WHERE
12:39:11 443  	  CHARGE.INVOICE_ID = in_invoice_id
12:39:11 444  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
12:39:11 445  
12:39:11 446  EXCEPTION
12:39:11 447  WHEN BAD_INVOICE_ID THEN
12:39:11 448  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 449  	  SPROC_NAME, 'No such invoice');
12:39:11 450  WHEN CAN_NOT_FIND_ACCOUNT THEN
12:39:11 451  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 452  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
12:39:11 453  WHEN OTHERS THEN
12:39:11 454  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 455  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 456  END GET_INVOICE_DETAILS;
12:39:11 457  
12:39:11 458  /******************************************************/
12:39:11 459  -- norlov: #38796
12:39:11 460  PROCEDURE GET_TRANSACTION_INVOICE (
12:39:11 461  /*
12:39:11 462  Throws exceptions:
12:39:11 463  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 464  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 465  */
12:39:11 466  	in_transaction_id  IN  NUMBER,
12:39:11 467  	out_result_set	      OUT SYS_REFCURSOR
12:39:11 468  ) AS
12:39:11 469  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
12:39:11 470  -- VARIABLES
12:39:11 471  temp_transaction_id  NUMBER;
12:39:11 472  var_invoice_id	   NUMBER;
12:39:11 473  var_subscription_id  NUMBER;
12:39:11 474  var_offer_chain_id   NUMBER;
12:39:11 475  var_offer_chain_name VARCHAR2(255);
12:39:11 476  -- EXCEPTIONS
12:39:11 477  BAD_TRANSACTION_ID     EXCEPTION;
12:39:11 478  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 479  BEGIN
12:39:11 480   -- check if there is the transaction
12:39:11 481  	BEGIN
12:39:11 482  	  SELECT
12:39:11 483  	    TRANSACTION.ID into temp_transaction_id
12:39:11 484  	  FROM
12:39:11 485  	    TRANSACTION
12:39:11 486  	  WHERE
12:39:11 487  	    TRANSACTION.ID = in_transaction_id;
12:39:11 488  	  EXCEPTION
12:39:11 489  	    WHEN NO_DATA_FOUND THEN
12:39:11 490  	      RAISE BAD_TRANSACTION_ID;
12:39:11 491  	END;
12:39:11 492  
12:39:11 493  	-- Get invoice id
12:39:11 494  	SELECT DISTINCT
12:39:11 495  	  CHARGE.INVOICE_ID into var_invoice_id
12:39:11 496  	FROM
12:39:11 497  	  CHARGE
12:39:11 498  	WHERE
12:39:11 499  	  CHARGE.TRANSACTION_ID = in_transaction_id;
12:39:11 500  
12:39:11 501  	-- Get subscription id if exists
12:39:11 502  	BEGIN
12:39:11 503  	  SELECT DISTINCT
12:39:11 504  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
12:39:11 505  	  FROM
12:39:11 506  	    LICENSE
12:39:11 507  	  WHERE
12:39:11 508  	    LICENSE.INVOICE_ID = var_invoice_id;
12:39:11 509  	  EXCEPTION
12:39:11 510  	    WHEN NO_DATA_FOUND THEN
12:39:11 511  	      var_subscription_id := NULL;
12:39:11 512  	END;
12:39:11 513  
12:39:11 514  	IF var_subscription_id IS NOT NULL THEN
12:39:11 515  	  -- Fetch offer chain from subscription
12:39:11 516  	  SELECT
12:39:11 517  	    OFFER_CHAIN.ID,
12:39:11 518  	    OFFER_CHAIN.NAME
12:39:11 519  	    into
12:39:11 520  	    var_offer_chain_id,
12:39:11 521  	    var_offer_chain_name
12:39:11 522  	  FROM
12:39:11 523  	    OFFER_CHAIN
12:39:11 524  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:11 525  	  WHERE
12:39:11 526  	    SUBSCRIPTION.ID = var_subscription_id;
12:39:11 527  	ELSE
12:39:11 528  	  -- Fetch offer chain from GC
12:39:11 529  	  SELECT
12:39:11 530  	    OFFER_CHAIN.ID,
12:39:11 531  	    OFFER_CHAIN.NAME
12:39:11 532  	    into
12:39:11 533  	    var_offer_chain_id,
12:39:11 534  	    var_offer_chain_name
12:39:11 535  	  FROM
12:39:11 536  	    OFFER_CHAIN
12:39:11 537  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:11 538  	  WHERE
12:39:11 539  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
12:39:11 540  	END IF;
12:39:11 541  
12:39:11 542  	OPEN out_result_set FOR
12:39:11 543  	SELECT DISTINCT
12:39:11 544  	  var_invoice_id       AS "INVOICE_ID",
12:39:11 545  	  var_subscription_id  AS "SUBSCRIPTION_ID",
12:39:11 546  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
12:39:11 547  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
12:39:11 548  	FROM
12:39:11 549  	  DUAL;
12:39:11 550  
12:39:11 551  EXCEPTION
12:39:11 552  WHEN BAD_TRANSACTION_ID THEN
12:39:11 553  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 554  	  SPROC_NAME, 'No such transaction');
12:39:11 555  WHEN OTHERS THEN
12:39:11 556  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 557  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 558  END GET_TRANSACTION_INVOICE;
12:39:11 559  
12:39:11 560  /******************************************************/
12:39:11 561  
12:39:11 562  PROCEDURE UPDATE_INVOICE_STATUS (
12:39:11 563  /*
12:39:11 564  Throws exceptions:
12:39:11 565  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 566  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 567  */
12:39:11 568  	in_invoice_id		       IN NUMBER,
12:39:11 569  	in_invoice_status_id	       IN NUMBER,
12:39:11 570  	in_updated_by		       IN VARCHAR2
12:39:11 571  ) AS
12:39:11 572  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
12:39:11 573  -- VARIABLES
12:39:11 574  temp_invoice_id NUMBER;
12:39:11 575  -- EXCEPTIONS
12:39:11 576  BAD_INVOICE_ID		      EXCEPTION;
12:39:11 577  BAD_INVOICE_STATUS_ID	      EXCEPTION;
12:39:11 578  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
12:39:11 579  BEGIN
12:39:11 580  
12:39:11 581  	-- Check if invoice exists
12:39:11 582  	BEGIN
12:39:11 583  	  SELECT
12:39:11 584  	    INVOICE.ID into temp_invoice_id
12:39:11 585  	  FROM
12:39:11 586  	    INVOICE
12:39:11 587  	  WHERE
12:39:11 588  	    INVOICE.ID = in_invoice_id;
12:39:11 589  	  EXCEPTION
12:39:11 590  	    WHEN NO_DATA_FOUND THEN
12:39:11 591  	      RAISE BAD_INVOICE_ID;
12:39:11 592  	END;
12:39:11 593  
12:39:11 594  	IF in_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_OPEN
12:39:11 595  	  AND in_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
12:39:11 596  	  RAISE BAD_INVOICE_STATUS_ID;
12:39:11 597  	END IF;
12:39:11 598  
12:39:11 599  	PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
12:39:11 600  	  in_invoice_id 		 => in_invoice_id,
12:39:11 601  	  in_invoice_status_id		 => in_invoice_status_id,
12:39:11 602  	  in_updated_by 		 => in_updated_by
12:39:11 603  	);
12:39:11 604  
12:39:11 605  EXCEPTION
12:39:11 606  WHEN BAD_INVOICE_STATUS_ID THEN
12:39:11 607  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 608  	  SPROC_NAME, 'Bad invoice status id');
12:39:11 609  WHEN BAD_INVOICE_ID THEN
12:39:11 610  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 611  	  SPROC_NAME, 'No such invoice');
12:39:11 612  WHEN OTHERS THEN
12:39:11 613  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 614  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 615  END UPDATE_INVOICE_STATUS;
12:39:11 616  
12:39:11 617  /****************************************************************/
12:39:11 618  
12:39:11 619  FUNCTION IS_INVOICE_PAYING_STARTED (
12:39:11 620  /*
12:39:11 621  Throws exceptions:
12:39:11 622  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 623  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 624  */
12:39:11 625  	in_invoice_id IN NUMBER
12:39:11 626  ) RETURN NUMBER AS
12:39:11 627  -- VARIABLES
12:39:11 628  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
12:39:11 629  temp_invoice_id		 NUMBER;
12:39:11 630  var_processed_charges_num  NUMBER;
12:39:11 631  var_processed_transac_num  NUMBER;
12:39:11 632  var_success_attempts_num	 NUMBER;
12:39:11 633  var_is_gc 		 NUMBER;
12:39:11 634  -- EXCEPTIONS
12:39:11 635  BAD_INVOICE_ID EXCEPTION;
12:39:11 636  BEGIN
12:39:11 637  
12:39:11 638  	-- Check that invoice exists
12:39:11 639  	BEGIN
12:39:11 640  	  SELECT
12:39:11 641  	    INVOICE.ID into temp_invoice_id
12:39:11 642  	  FROM
12:39:11 643  	    INVOICE
12:39:11 644  	  WHERE
12:39:11 645  	    INVOICE.ID = in_invoice_id;
12:39:11 646  	  EXCEPTION
12:39:11 647  	   WHEN NO_DATA_FOUND THEN
12:39:11 648  	     RAISE BAD_INVOICE_ID;
12:39:11 649  	END;
12:39:11 650  
12:39:11 651  	-- Check that there are tansaction attempts with status success
12:39:11 652  	SELECT
12:39:11 653  	  COUNT(1) into var_success_attempts_num
12:39:11 654  	FROM
12:39:11 655  	  TRANSACTION_ATTEMPT ta,
12:39:11 656  	  TRANSACTION t,
12:39:11 657  	  CHARGE c
12:39:11 658  	WHERE
12:39:11 659  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS and
12:39:11 660  	  ta.transaction_id = t.id and
12:39:11 661  	  c.transaction_id = t.id and
12:39:11 662  	  t.is_refund = GLOBAL_CONSTANTS_V16.FALSE and
12:39:11 663  	  c.invoice_id = in_invoice_id
12:39:11 664  	;
12:39:11 665  
12:39:11 666  	IF var_success_attempts_num > 0 THEN
12:39:11 667  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 668  	END IF;
12:39:11 669  
12:39:11 670  	SELECT
12:39:11 671  	  COUNT(1) into var_success_attempts_num
12:39:11 672  	FROM
12:39:11 673  	  TRANSACTION t,
12:39:11 674  	  CHARGE c
12:39:11 675  	WHERE
12:39:11 676  	  c.transaction_id = t.id and
12:39:11 677  	  t.is_refund = GLOBAL_CONSTANTS_V16.FALSE and
12:39:11 678  	  t.is_settled = GLOBAL_CONSTANTS_V16.TRUE and
12:39:11 679  	  c.invoice_id = in_invoice_id
12:39:11 680  	;
12:39:11 681  
12:39:11 682  	IF var_success_attempts_num > 0 THEN
12:39:11 683  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 684  	END IF;
12:39:11 685  
12:39:11 686  	SELECT
12:39:11 687  	  COUNT(1) into var_is_gc
12:39:11 688  	FROM
12:39:11 689  	  gift_certificate gc
12:39:11 690  	WHERE
12:39:11 691  	  gc.finalized_invoice_id = in_invoice_id
12:39:11 692  	;
12:39:11 693  
12:39:11 694  	IF var_is_gc > 0 THEN
12:39:11 695  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 696  	END IF;
12:39:11 697  
12:39:11 698  	RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 699  
12:39:11 700  EXCEPTION
12:39:11 701  WHEN BAD_INVOICE_ID THEN
12:39:11 702  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 703  	  SPROC_NAME, 'No such invoice');
12:39:11 704  WHEN OTHERS THEN
12:39:11 705  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 706  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 707  END IS_INVOICE_PAYING_STARTED;
12:39:11 708  
12:39:11 709  /******************************************************************************/
12:39:11 710  
12:39:11 711  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
12:39:11 712  	in_invoice_id  IN NUMBER,
12:39:11 713  	out_is_started OUT NUMBER
12:39:11 714  ) AS
12:39:11 715  BEGIN
12:39:11 716  	-- Just a wrapper
12:39:11 717  	out_is_started := PROCS_INVOICE_V16.IS_INVOICE_PAYING_STARTED(in_invoice_id);
12:39:11 718  END P_IS_INVOICE_PAYING_STARTED;
12:39:11 719  
12:39:11 720  /******************************************************************************/
12:39:11 721  
12:39:11 722  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
12:39:11 723  	in_invoice_id	      IN NUMBER,
12:39:11 724  	in_chargeback_date    IN DATE,
12:39:11 725  	out_chargeback_amount OUT NUMBER
12:39:11 726  ) AS
12:39:11 727  -- VARIABLES
12:39:11 728  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
12:39:11 729  var_chargeback_date    DATE;
12:39:11 730  temp_invoice_id	     NUMBER;
12:39:11 731  var_licenses_number    NUMBER;
12:39:11 732  var_invoice_start_date DATE;
12:39:11 733  var_invoice_end_date   DATE;
12:39:11 734  var_offer_id	     NUMBER;
12:39:11 735  var_offer_days_interval NUMBER;
12:39:11 736  var_license_days_used  NUMBER;
12:39:11 737  var_invoice_amount     NUMBER(10,2);
12:39:11 738  var_offer_chain_id     NUMBER;
12:39:11 739  var_offer_chain_meta_data_val VARCHAR2(1024);
12:39:11 740  var_offer_chain_full_refund   NUMBER;
12:39:11 741  var_offer_chain_prorated_ref  NUMBER;
12:39:11 742  var_chargeback_calculated NUMBER;
12:39:11 743  var_max_invoice_refund	NUMBER;
12:39:11 744  -- EXCEPTIONS
12:39:11 745  BAD_INVOICE_ID		  EXCEPTION;
12:39:11 746  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
12:39:11 747  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
12:39:11 748  BEGIN
12:39:11 749  
12:39:11 750  	IF in_chargeback_date IS NULL THEN
12:39:11 751  	  var_chargeback_date := PROCS_COMMON_V16.NORMALIZE_DATE(current_date);
12:39:11 752  	ELSE
12:39:11 753  	  var_chargeback_date := PROCS_COMMON_V16.NORMALIZE_DATE(in_chargeback_date);
12:39:11 754  	END IF;
12:39:11 755  
12:39:11 756  	-- Check that invoice exists
12:39:11 757  	BEGIN
12:39:11 758  	  SELECT
12:39:11 759  	    INVOICE.ID into temp_invoice_id
12:39:11 760  	  FROM
12:39:11 761  	    INVOICE
12:39:11 762  	  WHERE
12:39:11 763  	    INVOICE.ID = in_invoice_id;
12:39:11 764  	  EXCEPTION
12:39:11 765  	    WHEN NO_DATA_FOUND THEN
12:39:11 766  	      RAISE BAD_INVOICE_ID;
12:39:11 767  	END;
12:39:11 768  
12:39:11 769  	-- Check that invoice has at least one license
12:39:11 770  	SELECT
12:39:11 771  	  COUNT(*) into var_licenses_number
12:39:11 772  	FROM
12:39:11 773  	  LICENSE
12:39:11 774  	WHERE
12:39:11 775  	  LICENSE.INVOICE_ID = in_invoice_id;
12:39:11 776  
12:39:11 777  	IF var_licenses_number = 0 THEN
12:39:11 778  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
12:39:11 779  	END IF;
12:39:11 780  
12:39:11 781  	SELECT
12:39:11 782  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
12:39:11 783  	FROM
12:39:11 784  	  LICENSE
12:39:11 785  	WHERE
12:39:11 786  	  LICENSE.INVOICE_ID = in_invoice_id;
12:39:11 787  
12:39:11 788  	var_invoice_start_date := PROCS_COMMON_V16.NORMALIZE_DATE(var_invoice_start_date);
12:39:11 789  
12:39:11 790  	SELECT DISTINCT
12:39:11 791  	  LICENSE.OFFER_ID into var_offer_id
12:39:11 792  	FROM
12:39:11 793  	  LICENSE
12:39:11 794  	WHERE
12:39:11 795  	  LICENSE.INVOICE_ID = in_invoice_id;
12:39:11 796  
12:39:11 797  	SELECT
12:39:11 798  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
12:39:11 799  	FROM
12:39:11 800  	  LICENSE
12:39:11 801  	WHERE
12:39:11 802  	  LICENSE.INVOICE_ID = in_invoice_id;
12:39:11 803  
12:39:11 804  	-- All licenses for given invoice should point into the same offer
12:39:11 805  
12:39:11 806  	PROCS_OFFER_CHAIN_V16.GET_OFFER_LENGTH_IN_DAYS(
12:39:11 807  	  in_offer_id	=> var_offer_id,
12:39:11 808  	  in_start_date => var_invoice_start_date,
12:39:11 809  	  out_days	=> var_offer_days_interval
12:39:11 810  	);
12:39:11 811  
12:39:11 812  	IF var_offer_days_interval = 0 THEN
12:39:11 813  	  RAISE OFFER_LENGTH_IS_ZERO;
12:39:11 814  	END IF;
12:39:11 815  
12:39:11 816  	PROCS_INVOICE_V16.GET_INVOICE_DAYS_USED_NUMBER(
12:39:11 817  	  in_invoice_id      => in_invoice_id,
12:39:11 818  	  in_chargeback_date => var_chargeback_date,
12:39:11 819  	  out_days_num	     => var_license_days_used
12:39:11 820  	);
12:39:11 821  
12:39:11 822  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(
12:39:11 823  	  in_invoice_id => in_invoice_id,
12:39:11 824  	  out_amount	=> var_invoice_amount
12:39:11 825  	);
12:39:11 826  
12:39:11 827  	-- 39437
12:39:11 828  	-- Get offer chain id by invoice id
12:39:11 829  	SELECT DISTINCT
12:39:11 830  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
12:39:11 831  	FROM
12:39:11 832  	  SUBSCRIPTION
12:39:11 833  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 834  	WHERE
12:39:11 835  	  LICENSE.INVOICE_ID = in_invoice_id;
12:39:11 836  
12:39:11 837  	-- Get offer chain's meta data full amount value
12:39:11 838  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
12:39:11 839  	  in_offer_chain_id => var_offer_chain_id,
12:39:11 840  	  in_meta_data_name => GLOBAL_CONSTANTS_V16.OFFER_CHAIN_FULL_REFUND,
12:39:11 841  	  out_value	    => var_offer_chain_meta_data_val
12:39:11 842  	);
12:39:11 843  	IF var_offer_chain_meta_data_val IS NULL THEN
12:39:11 844  	  var_offer_chain_full_refund := NULL;
12:39:11 845  	ELSE
12:39:11 846  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
12:39:11 847  	END IF;
12:39:11 848  
12:39:11 849  	-- Get offer chain's meta data prorated amount value
12:39:11 850  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
12:39:11 851  	  in_offer_chain_id => var_offer_chain_id,
12:39:11 852  	  in_meta_data_name => GLOBAL_CONSTANTS_V16.OFFER_CHAIN_PRORATED_REFUND,
12:39:11 853  	  out_value	    => var_offer_chain_meta_data_val
12:39:11 854  	);
12:39:11 855  	IF var_offer_chain_meta_data_val IS NULL THEN
12:39:11 856  	  var_offer_chain_prorated_ref := NULL;
12:39:11 857  	ELSE
12:39:11 858  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
12:39:11 859  	END IF;
12:39:11 860  
12:39:11 861  	var_chargeback_calculated := GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 862  
12:39:11 863  	IF var_offer_chain_full_refund IS NOT NULL
12:39:11 864  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 865  	  IF var_license_days_used < var_offer_chain_full_refund THEN
12:39:11 866  	    out_chargeback_amount := var_invoice_amount;
12:39:11 867  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 868  	  END IF;
12:39:11 869  	END IF;
12:39:11 870  
12:39:11 871  	IF var_offer_chain_prorated_ref IS NOT NULL
12:39:11 872  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 873  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
12:39:11 874  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
12:39:11 875  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 876  	  END IF;
12:39:11 877  	END IF;
12:39:11 878  
12:39:11 879  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V16.TRUE THEN
12:39:11 880  	  PROCS_INVOICE_V16.GET_MAX_REFUND(
12:39:11 881  	    in_invoice_id => in_invoice_id,
12:39:11 882  	    out_amount	  => var_max_invoice_refund
12:39:11 883  	  );
12:39:11 884  	  IF var_max_invoice_refund < out_chargeback_amount THEN
12:39:11 885  	    out_chargeback_amount := var_max_invoice_refund;
12:39:11 886  	  END IF;
12:39:11 887  	END IF;
12:39:11 888  
12:39:11 889  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 890  	  out_chargeback_amount := 0;
12:39:11 891  	END IF;
12:39:11 892  
12:39:11 893  EXCEPTION
12:39:11 894  WHEN BAD_INVOICE_ID THEN
12:39:11 895  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 896  	  SPROC_NAME, 'No such invoice');
12:39:11 897  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
12:39:11 898  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 899  	  SPROC_NAME, 'No licenses found');
12:39:11 900  WHEN OFFER_LENGTH_IS_ZERO THEN
12:39:11 901  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 902  	  SPROC_NAME, 'Offer length is zero');
12:39:11 903  WHEN OTHERS THEN
12:39:11 904  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 906  END CALCULATE_INVOICE_CHARGEBACK;
12:39:11 907  
12:39:11 908  /********************************************************************/
12:39:11 909  
12:39:11 910  PROCEDURE APPLY_REFUND (
12:39:11 911  	in_invoice_id	     IN NUMBER,
12:39:11 912  	in_chargeback_amount IN NUMBER,
12:39:11 913  	in_created_by	     IN VARCHAR2,
12:39:11 914  	out_charge_id	     OUT NUMBER
12:39:11 915  ) AS
12:39:11 916  -- VARIABLES
12:39:11 917  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
12:39:11 918  temp_invoice_id		 NUMBER;
12:39:11 919  var_total_charges_amount	 NUMBER(10,2);
12:39:11 920  var_charge_amount_to_apply NUMBER(10,2);
12:39:11 921  var_transaction_id	 NUMBER;
12:39:11 922  var_instrument_type_id	 NUMBER;
12:39:11 923  var_instrument_id 	 NUMBER;
12:39:11 924  var_charge_id		 NUMBER;
12:39:11 925  -- EXCEPTIONS
12:39:11 926  BAD_INVOICE_ID		 EXCEPTION;
12:39:11 927  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
12:39:11 928  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
12:39:11 929  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
12:39:11 930  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
12:39:11 931  BEGIN
12:39:11 932  
12:39:11 933  	BEGIN
12:39:11 934  	  SELECT
12:39:11 935  	    INVOICE.ID into temp_invoice_id
12:39:11 936  	  FROM
12:39:11 937  	    INVOICE
12:39:11 938  	  WHERE
12:39:11 939  	    INVOICE.ID = in_invoice_id;
12:39:11 940  	  EXCEPTION
12:39:11 941  	    WHEN NO_DATA_FOUND THEN
12:39:11 942  	      RAISE BAD_INVOICE_ID;
12:39:11 943  	END;
12:39:11 944  
12:39:11 945  	SELECT
12:39:11 946  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
12:39:11 947  	FROM
12:39:11 948  	  CHARGE
12:39:11 949  	WHERE
12:39:11 950  	  CHARGE.INVOICE_ID = in_invoice_id
12:39:11 951  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
12:39:11 952  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
12:39:11 953  
12:39:11 954  	-- FIXME: Maybe whe should throw exception here?
12:39:11 955  	IF var_total_charges_amount < in_chargeback_amount THEN
12:39:11 956  	  var_charge_amount_to_apply := var_total_charges_amount;
12:39:11 957  	ELSE
12:39:11 958  	  var_charge_amount_to_apply := in_chargeback_amount;
12:39:11 959  	END IF;
12:39:11 960  
12:39:11 961  	BEGIN
12:39:11 962  	  PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
12:39:11 963  	    in_transaction_id  => NULL,
12:39:11 964  	    in_status_id       => GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
12:39:11 965  	    in_amount	       => -var_charge_amount_to_apply,
12:39:11 966  	    in_created_by      => in_created_by,
12:39:11 967  	    in_order_id        => NULL,
12:39:11 968  	    in_is_refund       => GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 969  	    out_transaction_id => var_transaction_id
12:39:11 970  	  );
12:39:11 971  	  EXCEPTION
12:39:11 972  	    WHEN OTHERS THEN
12:39:11 973  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 974  	      RAISE CAN_NOT_CREATE_TRANSACTION;
12:39:11 975  	END;
12:39:11 976  
12:39:11 977  	BEGIN
12:39:11 978  	  SELECT
12:39:11 979  	    C.INSTRUMENT_TYPE_ID,
12:39:11 980  	    C.INSTRUMENT_ID
12:39:11 981  	    into
12:39:11 982  	    var_instrument_type_id,
12:39:11 983  	    var_instrument_id
12:39:11 984  	  FROM
12:39:11 985  	    CHARGE C,
12:39:11 986  	    TRANSACTION_ATTEMPT TA,
12:39:11 987  	    TRANSACTION T
12:39:11 988  	  WHERE
12:39:11 989  	    C.INVOICE_ID = in_invoice_id and
12:39:11 990  	    C.TRANSACTION_ID = T.ID and
12:39:11 991  	    TA.TRANSACTION_ID = T.ID and
12:39:11 992  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS and
12:39:11 993  	    T.IS_REFUND = GLOBAL_CONSTANTS_V16.FALSE and
12:39:11 994  	    T.TRANSACTION_AMOUNT >= 0 and
12:39:11 995  	    rownum < 2;
12:39:11 996  	EXCEPTION
12:39:11 997  	    WHEN NO_DATA_FOUND THEN
12:39:11 998  	      RAISE CAN_NOT_FIND_INSTRUMENT;
12:39:11 999  	END;
12:39:11 1000  	 BEGIN
12:39:11 1001  	   PROCS_CHARGE_V16.CREATE_CHARGE(
12:39:11 1002  	     in_invoice_id	   => in_invoice_id,
12:39:11 1003  	     in_transaction_id	   => var_transaction_id,
12:39:11 1004  	     in_instrument_type_id => var_instrument_type_id,
12:39:11 1005  	     in_instrument_id	   => var_instrument_id,
12:39:11 1006  	     in_charge_amount	   => -var_charge_amount_to_apply,
12:39:11 1007  	     in_created_by	   => in_created_by,
12:39:11 1008  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
12:39:11 1009  	     out_charge_id	   => var_charge_id
12:39:11 1010  	   );
12:39:11 1011  	   EXCEPTION
12:39:11 1012  	     WHEN OTHERS THEN
12:39:11 1013  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1014  	       RAISE CAN_NOT_CREATE_CHARGE;
12:39:11 1015  	 END;
12:39:11 1016  
12:39:11 1017  	 out_charge_id := var_charge_id;
12:39:11 1018  
12:39:11 1019  EXCEPTION
12:39:11 1020  WHEN BAD_INVOICE_ID THEN
12:39:11 1021  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1022  	   SPROC_NAME, 'No such invoice');
12:39:11 1023  WHEN CAN_NOT_CREATE_TRANSACTION THEN
12:39:11 1024  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1025  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
12:39:11 1026  WHEN CAN_NOT_FIND_INSTRUMENT THEN
12:39:11 1027  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1028  	   SPROC_NAME, 'Could not find financial instrument');
12:39:11 1029  WHEN CAN_NOT_CREATE_CHARGE THEN
12:39:11 1030  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1031  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
12:39:11 1032  WHEN OTHERS THEN
12:39:11 1033  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1034  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1035  END APPLY_REFUND;
12:39:11 1036  
12:39:11 1037  /******************************************************************************/
12:39:11 1038  
12:39:11 1039  PROCEDURE GET_MAX_REFUND (
12:39:11 1040  	 in_invoice_id IN NUMBER,
12:39:11 1041  	 out_amount    OUT NUMBER
12:39:11 1042  ) AS
12:39:11 1043  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
12:39:11 1044  -- VARIABLES
12:39:11 1045  temp_invoice_id	       NUMBER;
12:39:11 1046  var_invoice_refunds_sum NUMBER(10,2);
12:39:11 1047  var_invoice_charges_sum NUMBER(10,2);
12:39:11 1048  -- EXCEPTIONS
12:39:11 1049  BAD_INVOICE_ID EXCEPTION;
12:39:11 1050  BEGIN
12:39:11 1051  
12:39:11 1052  	 BEGIN
12:39:11 1053  	   SELECT
12:39:11 1054  	     INVOICE.ID into temp_invoice_id
12:39:11 1055  	   FROM
12:39:11 1056  	     INVOICE
12:39:11 1057  	   WHERE
12:39:11 1058  	     INVOICE.ID = in_invoice_id;
12:39:11 1059  	   EXCEPTION
12:39:11 1060  	     WHEN NO_DATA_FOUND THEN
12:39:11 1061  	       RAISE BAD_INVOICE_ID;
12:39:11 1062  	 END;
12:39:11 1063  
12:39:11 1064  	 var_invoice_refunds_sum := 0;
12:39:11 1065  	 var_invoice_charges_sum := 0;
12:39:11 1066  
12:39:11 1067  	 FOR f_charge IN (
12:39:11 1068  	   SELECT
12:39:11 1069  	     CHARGE.ID,
12:39:11 1070  	     CHARGE.CHARGE_STATUS_ID,
12:39:11 1071  	     CHARGE.CHARGE_AMOUNT,
12:39:11 1072  	     CHARGE.TRANSACTION_ID
12:39:11 1073  	   FROM
12:39:11 1074  	     CHARGE
12:39:11 1075  	   WHERE
12:39:11 1076  	     CHARGE.INVOICE_ID = in_invoice_id
12:39:11 1077  	 )
12:39:11 1078  	 LOOP
12:39:11 1079  	   -- If charge.status = canceled then continue
12:39:11 1080  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
12:39:11 1081  
12:39:11 1082  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
12:39:11 1083  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
12:39:11 1084  		  AND PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V16.TRUE THEN
12:39:11 1085  		 -- Transaction collected
12:39:11 1086  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
12:39:11 1087  	       ELSE
12:39:11 1088  		 -- Transaction is not collected. Do nothing
12:39:11 1089  		 NULL;
12:39:11 1090  	       END IF;
12:39:11 1091  	     ELSE
12:39:11 1092  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
12:39:11 1093  		  AND PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 1094  		 -- If charge is processed transaction is not collected then do nothing
12:39:11 1095  		 NULL;
12:39:11 1096  	       ELSE
12:39:11 1097  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
12:39:11 1098  	       END IF;
12:39:11 1099  	     END IF;
12:39:11 1100  
12:39:11 1101  	   END IF;
12:39:11 1102  	 END LOOP;
12:39:11 1103  
12:39:11 1104  	 -- Refunds are negative
12:39:11 1105  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
12:39:11 1106  
12:39:11 1107  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
12:39:11 1108  
12:39:11 1109  EXCEPTION
12:39:11 1110  WHEN BAD_INVOICE_ID THEN
12:39:11 1111  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1112  	   SPROC_NAME, 'No such invoice');
12:39:11 1113  WHEN OTHERS THEN
12:39:11 1114  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1115  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1116  END GET_MAX_REFUND;
12:39:11 1117  
12:39:11 1118  /******************************************************************************/
12:39:11 1119  
12:39:11 1120  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
12:39:11 1121  	 in_invoice_id	     IN NUMBER,
12:39:11 1122  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
12:39:11 1123  	 out_days_num	     OUT NUMBER
12:39:11 1124  ) AS
12:39:11 1125  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
12:39:11 1126  -- VARIABLES
12:39:11 1127  temp_invoice_id	      NUMBER;
12:39:11 1128  var_license_start_date DATE;
12:39:11 1129  var_license_end_date   DATE;
12:39:11 1130  var_chargeback_date    DATE;
12:39:11 1131  var_invoice_days_used  NUMBER;
12:39:11 1132  -- EXCEPTIONS
12:39:11 1133  BAD_INVOICE_ID EXCEPTION;
12:39:11 1134  BEGIN
12:39:11 1135  
12:39:11 1136  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
12:39:11 1137  
12:39:11 1138  	 BEGIN
12:39:11 1139  	   SELECT
12:39:11 1140  	     INVOICE.ID into temp_invoice_id
12:39:11 1141  	   FROM
12:39:11 1142  	     INVOICE
12:39:11 1143  	   WHERE
12:39:11 1144  	     INVOICE.ID = in_invoice_id;
12:39:11 1145  	   EXCEPTION
12:39:11 1146  	     WHEN NO_DATA_FOUND THEN
12:39:11 1147  	       RAISE BAD_INVOICE_ID;
12:39:11 1148  	 END;
12:39:11 1149  
12:39:11 1150  	 var_invoice_days_used := 0;
12:39:11 1151  
12:39:11 1152  	 FOR f_license IN (
12:39:11 1153  	   SELECT
12:39:11 1154  	     LICENSE.START_DATE,
12:39:11 1155  	     LICENSE.END_DATE
12:39:11 1156  	   FROM
12:39:11 1157  	     LICENSE
12:39:11 1158  	   WHERE
12:39:11 1159  	     LICENSE.INVOICE_ID = in_invoice_id
12:39:11 1160  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V16.FALSE
12:39:11 1161  	 )
12:39:11 1162  	 LOOP
12:39:11 1163  	   var_license_start_date := PROCS_COMMON_V16.NORMALIZE_DATE(f_license.START_DATE);
12:39:11 1164  	   var_license_end_date := PROCS_COMMON_V16.NORMALIZE_DATE(f_license.END_DATE);
12:39:11 1165  
12:39:11 1166  	   IF var_license_start_date <= var_chargeback_date THEN
12:39:11 1167  	     IF var_license_end_date <= var_chargeback_date THEN
12:39:11 1168  	       -- License is passed
12:39:11 1169  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
12:39:11 1170  	     ELSE
12:39:11 1171  	       -- This is current license
12:39:11 1172  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
12:39:11 1173  	     END IF;
12:39:11 1174  	   ELSE
12:39:11 1175  	     -- if var_license_start_date > in_chargeback_date then do nothing
12:39:11 1176  	     NULL;
12:39:11 1177  	   END IF;
12:39:11 1178  	 END LOOP;
12:39:11 1179  
12:39:11 1180  	 out_days_num := var_invoice_days_used;
12:39:11 1181  
12:39:11 1182  EXCEPTION
12:39:11 1183  WHEN BAD_INVOICE_ID THEN
12:39:11 1184  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1185  	   SPROC_NAME, 'No such invoice');
12:39:11 1186  WHEN OTHERS THEN
12:39:11 1187  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1188  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1189  END GET_INVOICE_DAYS_USED_NUMBER;
12:39:11 1190  
12:39:11 1191  /******************************************************************************/
12:39:11 1192  
12:39:11 1193  PROCEDURE GET_INVOICE_LINE_ITEMS (
12:39:11 1194  	 in_invoice_id	IN NUMBER,
12:39:11 1195  	 out_result_set OUT SYS_REFCURSOR
12:39:11 1196  ) AS
12:39:11 1197  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
12:39:11 1198  -- VARIABLES
12:39:11 1199  temp_invoice_id NUMBER;
12:39:11 1200  -- EXCEPTIONS
12:39:11 1201  BAD_INVOICE_ID EXCEPTION;
12:39:11 1202  BEGIN
12:39:11 1203  
12:39:11 1204  	 BEGIN
12:39:11 1205  	   SELECT
12:39:11 1206  	     INVOICE.ID into temp_invoice_id
12:39:11 1207  	   FROM
12:39:11 1208  	     INVOICE
12:39:11 1209  	   WHERE
12:39:11 1210  	     INVOICE.ID = in_invoice_id;
12:39:11 1211  	   EXCEPTION
12:39:11 1212  	     WHEN NO_DATA_FOUND THEN
12:39:11 1213  	       RAISE BAD_INVOICE_ID;
12:39:11 1214  	 END;
12:39:11 1215  
12:39:11 1216  	 OPEN out_result_set FOR
12:39:11 1217  	 SELECT
12:39:11 1218  	   LINE_ITEM.ID,
12:39:11 1219  	   LINE_ITEM.PRODUCT_OFFER_ID,
12:39:11 1220  	   LINE_ITEM.INVOICE_ID,
12:39:11 1221  	   LINE_ITEM.AMOUNT,
12:39:11 1222  	   LINE_ITEM.DISCOUNT_AMOUNT,
12:39:11 1223  	   LINE_ITEM.TAXES_AMOUNT,
12:39:11 1224  	   LINE_ITEM.CREATE_DATE,
12:39:11 1225  	   LINE_ITEM.CREATED_BY
12:39:11 1226  	 FROM
12:39:11 1227  	   LINE_ITEM
12:39:11 1228  	 WHERE
12:39:11 1229  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
12:39:11 1230  
12:39:11 1231  EXCEPTION
12:39:11 1232  WHEN BAD_INVOICE_ID THEN
12:39:11 1233  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1234  	   SPROC_NAME, 'No such invoice');
12:39:11 1235  WHEN OTHERS THEN
12:39:11 1236  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1237  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1238  END GET_INVOICE_LINE_ITEMS;
12:39:11 1239  
12:39:11 1240  /******************************************************************************/
12:39:11 1241  
12:39:11 1242  PROCEDURE GET_INVOICE_LICENSES (
12:39:11 1243  	 in_invoice_id	IN NUMBER,
12:39:11 1244  	 out_result_set OUT SYS_REFCURSOR
12:39:11 1245  ) AS
12:39:11 1246  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
12:39:11 1247  -- VARIABLES
12:39:11 1248  temp_invoice_id NUMBER;
12:39:11 1249  -- EXCEPTIONS
12:39:11 1250  BAD_INVOICE_ID EXCEPTION;
12:39:11 1251  BEGIN
12:39:11 1252  
12:39:11 1253  	 BEGIN
12:39:11 1254  	   SELECT
12:39:11 1255  	     INVOICE.ID into temp_invoice_id
12:39:11 1256  	   FROM
12:39:11 1257  	     INVOICE
12:39:11 1258  	   WHERE
12:39:11 1259  	     INVOICE.ID = in_invoice_id;
12:39:11 1260  	   EXCEPTION
12:39:11 1261  	     WHEN NO_DATA_FOUND THEN
12:39:11 1262  	       RAISE BAD_INVOICE_ID;
12:39:11 1263  	 END;
12:39:11 1264  
12:39:11 1265  	 OPEN out_result_set FOR
12:39:11 1266  	 SELECT
12:39:11 1267  	   LICENSE.ID,
12:39:11 1268  	   LICENSE.INVOICE_ID,
12:39:11 1269  	   LICENSE.CREATE_DATE,
12:39:11 1270  	   LICENSE.CREATED_BY,
12:39:11 1271  	   LICENSE.CURRENT_OFFER_INDEX,
12:39:11 1272  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
12:39:11 1273  	   LICENSE.END_DATE,
12:39:11 1274  	   LICENSE.ENTITLEMENT_END_DATE,
12:39:11 1275  	   LICENSE.IS_EXTENSION,
12:39:11 1276  	   LICENSE.LICENSE_STATUS_ID,
12:39:11 1277  	   LICENSE.NEEDS_ENTITLEMENTS,
12:39:11 1278  	   LICENSE.OFFER_ID,
12:39:11 1279  	   LICENSE.START_DATE,
12:39:11 1280  	   LICENSE.SUBSCRIPTION_ID,
12:39:11 1281  	   LICENSE.UPDATE_DATE,
12:39:11 1282  	   LICENSE.UPDATED_BY
12:39:11 1283  	 FROM
12:39:11 1284  	   LICENSE
12:39:11 1285  	 WHERE
12:39:11 1286  	   LICENSE.INVOICE_ID = in_invoice_id;
12:39:11 1287  
12:39:11 1288  EXCEPTION
12:39:11 1289  WHEN BAD_INVOICE_ID THEN
12:39:11 1290  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1291  	   SPROC_NAME, 'No such invoice');
12:39:11 1292  WHEN OTHERS THEN
12:39:11 1293  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1294  	   SPROC_NAME, 'Unknown error');
12:39:11 1295  END GET_INVOICE_LICENSES;
12:39:11 1296  
12:39:11 1297  /******************************************************************************/
12:39:11 1298  
12:39:11 1299  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
12:39:11 1300  	 in_invoice_id	    IN NUMBER,
12:39:11 1301  	 out_offer_chain_id OUT NUMBER
12:39:11 1302  ) AS
12:39:11 1303  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
12:39:11 1304  -- VARIABLES
12:39:11 1305  temp_invoice_id NUMBER;
12:39:11 1306  -- EXCEPTIONS
12:39:11 1307  BAD_INVOICE_ID EXCEPTION;
12:39:11 1308  BEGIN
12:39:11 1309  
12:39:11 1310  	 BEGIN
12:39:11 1311  	   SELECT
12:39:11 1312  	     INVOICE.ID into temp_invoice_id
12:39:11 1313  	   FROM
12:39:11 1314  	     INVOICE
12:39:11 1315  	   WHERE
12:39:11 1316  	     INVOICE.ID = in_invoice_id;
12:39:11 1317  	   EXCEPTION
12:39:11 1318  	     WHEN NO_DATA_FOUND THEN
12:39:11 1319  	       RAISE BAD_INVOICE_ID;
12:39:11 1320  	 END;
12:39:11 1321  
12:39:11 1322  	 BEGIN
12:39:11 1323  	   SELECT DISTINCT
12:39:11 1324  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
12:39:11 1325  	   FROM
12:39:11 1326  	     LICENSE
12:39:11 1327  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:11 1328  	   WHERE
12:39:11 1329  	     LICENSE.INVOICE_ID = in_invoice_id;
12:39:11 1330  	   EXCEPTION
12:39:11 1331  	     WHEN NO_DATA_FOUND THEN
12:39:11 1332  	       out_offer_chain_id := NULL;
12:39:11 1333  	 END;
12:39:11 1334  
12:39:11 1335  EXCEPTION
12:39:11 1336  WHEN BAD_INVOICE_ID THEN
12:39:11 1337  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1338  	   SPROC_NAME, 'No such invoice');
12:39:11 1339  WHEN OTHERS THEN
12:39:11 1340  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1341  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1342  END GET_OFFER_CH_ID_BY_INVOICE_ID;
12:39:11 1343  
12:39:11 1344  /******************************************************************************/
12:39:11 1345  
12:39:11 1346  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
12:39:11 1347  -- Closing invoice without refund
12:39:11 1348  	 in_invoice_id IN NUMBER,
12:39:11 1349  	 in_updated_by IN VARCHAR2
12:39:11 1350  ) AS
12:39:11 1351  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
12:39:11 1352  -- VARIABLES
12:39:11 1353  temp_invoice_id NUMBER;
12:39:11 1354  -- EXCEPTIONS
12:39:11 1355  BAD_INVOICE_ID EXCEPTION;
12:39:11 1356  BEGIN
12:39:11 1357  
12:39:11 1358  	 BEGIN
12:39:11 1359  	   SELECT
12:39:11 1360  	     INVOICE.ID into temp_invoice_id
12:39:11 1361  	   FROM
12:39:11 1362  	     INVOICE
12:39:11 1363  	   WHERE
12:39:11 1364  	     INVOICE.ID = in_invoice_id;
12:39:11 1365  	   EXCEPTION
12:39:11 1366  	     WHEN NO_DATA_FOUND THEN
12:39:11 1367  	       RAISE BAD_INVOICE_ID;
12:39:11 1368  	 END;
12:39:11 1369  
12:39:11 1370  	 -- Needs to close charges. No refund.
12:39:11 1371  	 FOR f_charge_to_close IN (
12:39:11 1372  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
12:39:11 1373  	 )
12:39:11 1374  	 LOOP
12:39:11 1375  	   PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
12:39:11 1376  	     in_charge_id	 => f_charge_to_close.ID,
12:39:11 1377  	     in_updated_by	 => in_updated_by,
12:39:11 1378  	     in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
12:39:11 1379  	   );
12:39:11 1380  	 END LOOP;
12:39:11 1381  
12:39:11 1382  	 --FOR f_license_to_cancel IN (
12:39:11 1383  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
12:39:11 1384  	 --)
12:39:11 1385  	 --LOOP
12:39:11 1386  	 --  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
12:39:11 1387  	 --    in_license_id	     => f_license_to_cancel.ID,
12:39:11 1388  	 --    in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
12:39:11 1389  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V16.FALSE,
12:39:11 1390  	 --    in_updated_by	     => in_updated_by
12:39:11 1391  	 --  );
12:39:11 1392  	 --END LOOP;
12:39:11 1393  
12:39:11 1394  	 PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
12:39:11 1395  	   in_invoice_id		  => in_invoice_id,
12:39:11 1396  	   in_updated_by		  => in_updated_by,
12:39:11 1397  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V16.INVOICE_CLOSED
12:39:11 1398  	 );
12:39:11 1399  
12:39:11 1400  	 FOR f_transaction_to_close IN (
12:39:11 1401  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
12:39:11 1402  	 )
12:39:11 1403  	 LOOP
12:39:11 1404  	   PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
12:39:11 1405  	     in_transaction_id	      => f_transaction_to_close.ID,
12:39:11 1406  	     in_updated_by	      => in_updated_by,
12:39:11 1407  	     in_transaction_status_id => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
12:39:11 1408  	   );
12:39:11 1409  	 END LOOP;
12:39:11 1410  
12:39:11 1411  EXCEPTION
12:39:11 1412  WHEN BAD_INVOICE_ID THEN
12:39:11 1413  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1414  	   SPROC_NAME, 'No such invoice');
12:39:11 1415  WHEN OTHERS THEN
12:39:11 1416  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1417  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1418  END CLOSE_INVOICE_AS_NOT_COLLECTED;
12:39:11 1419  
12:39:11 1420  /******************************************************************************/
12:39:11 1421  
12:39:11 1422  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
12:39:11 1423  	 in_invoice_id	     IN NUMBER,
12:39:11 1424  	 out_subscription_id OUT NUMBER
12:39:11 1425  ) AS
12:39:11 1426  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
12:39:11 1427  -- VARIABLES
12:39:11 1428  temp_invoice_id NUMBER;
12:39:11 1429  -- EXCEPTIONS
12:39:11 1430  BAD_INVOICE_ID		 EXCEPTION;
12:39:11 1431  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
12:39:11 1432  BEGIN
12:39:11 1433  
12:39:11 1434  	 BEGIN
12:39:11 1435  	   SELECT
12:39:11 1436  	     INVOICE.ID into temp_invoice_id
12:39:11 1437  	   FROM
12:39:11 1438  	     INVOICE
12:39:11 1439  	   WHERE
12:39:11 1440  	     INVOICE.ID = in_invoice_id;
12:39:11 1441  	   EXCEPTION
12:39:11 1442  	     WHEN NO_DATA_FOUND THEN
12:39:11 1443  	       RAISE BAD_INVOICE_ID;
12:39:11 1444  	 END;
12:39:11 1445  
12:39:11 1446  	 BEGIN
12:39:11 1447  	   SELECT DISTINCT
12:39:11 1448  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
12:39:11 1449  	   FROM
12:39:11 1450  	     LICENSE
12:39:11 1451  	   WHERE
12:39:11 1452  	     LICENSE.INVOICE_ID = in_invoice_id;
12:39:11 1453  	   EXCEPTION
12:39:11 1454  	     WHEN NO_DATA_FOUND THEN
12:39:11 1455  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
12:39:11 1456  	 END;
12:39:11 1457  
12:39:11 1458  EXCEPTION
12:39:11 1459  WHEN BAD_INVOICE_ID THEN
12:39:11 1460  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1461  	   SPROC_NAME, 'No such invoice');
12:39:11 1462  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
12:39:11 1463  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1464  	   SPROC_NAME, 'Could not find subscription for given invoice');
12:39:11 1465  WHEN OTHERS THEN
12:39:11 1466  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1468  END GET_SUBSCR_ID_BY_INVOICE_ID;
12:39:11 1469  
12:39:11 1470  /******************************************************************************/
12:39:11 1471  
12:39:11 1472  PROCEDURE IS_INVOICE_TAX_EXEMPT (
12:39:11 1473  /*
12:39:11 1474  Throws exceptions:
12:39:11 1475  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1476  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1477  Return:
12:39:11 1478  	 GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
12:39:11 1479  	 GLOBAL_CONSTANTS_V16.FALSE else
12:39:11 1480  */
12:39:11 1481  	 in_invoice_id	   IN NUMBER,
12:39:11 1482  	 out_is_tax_exempt OUT NUMBER
12:39:11 1483  ) AS
12:39:11 1484  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
12:39:11 1485  -- VARIABLES
12:39:11 1486  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
12:39:11 1487  -- EXCEPTIONS
12:39:11 1488  BAD_INVOICE_ID EXCEPTION;
12:39:11 1489  BEGIN
12:39:11 1490  
12:39:11 1491  	 BEGIN
12:39:11 1492  	   SELECT
12:39:11 1493  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
12:39:11 1494  	   FROM
12:39:11 1495  	     INVOICE
12:39:11 1496  	   WHERE
12:39:11 1497  	     INVOICE.ID = in_invoice_id;
12:39:11 1498  	   EXCEPTION
12:39:11 1499  	     WHEN NO_DATA_FOUND THEN
12:39:11 1500  	       RAISE BAD_INVOICE_ID;
12:39:11 1501  	 END;
12:39:11 1502  
12:39:11 1503  	 IF var_is_tax_exempt IS NULL THEN
12:39:11 1504  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 1505  	 ELSE
12:39:11 1506  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 1507  	 END IF;
12:39:11 1508  
12:39:11 1509  EXCEPTION
12:39:11 1510  WHEN BAD_INVOICE_ID THEN
12:39:11 1511  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1512  	   SPROC_NAME, 'No such invoice');
12:39:11 1513  WHEN OTHERS THEN
12:39:11 1514  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1515  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1516  END IS_INVOICE_TAX_EXEMPT;
12:39:11 1517  
12:39:11 1518  /******************************************************************************/
12:39:11 1519  
12:39:11 1520  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
12:39:11 1521  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
12:39:11 1522  	 out_result_set OUT SYS_REFCURSOR
12:39:11 1523  ) AS
12:39:11 1524  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
12:39:11 1525  -- VARIABLE
12:39:11 1526  temp_order_id TRANSACTION.ORDER_ID%TYPE;
12:39:11 1527  -- EXCEPTIONS
12:39:11 1528  BAD_ORDER_ID EXCEPTION;
12:39:11 1529  CAN_NOT_FIND_INVOICE EXCEPTION;
12:39:11 1530  BEGIN
12:39:11 1531  
12:39:11 1532  	 OPEN out_result_set FOR
12:39:11 1533  	   SELECT DISTINCT
12:39:11 1534  	     CHARGE.INVOICE_ID
12:39:11 1535  	   FROM
12:39:11 1536  	     CHARGE
12:39:11 1537  	   INNER JOIN
12:39:11 1538  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
12:39:11 1539  	   WHERE
12:39:11 1540  	     TRANSACTION.ORDER_ID = in_order_id;
12:39:11 1541  
12:39:11 1542  EXCEPTION
12:39:11 1543  WHEN BAD_ORDER_ID THEN
12:39:11 1544  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1545  	   SPROC_NAME, 'No such transaction');
12:39:11 1546  WHEN CAN_NOT_FIND_INVOICE THEN
12:39:11 1547  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1548  	   SPROC_NAME, 'Could not find invoice for given order id');
12:39:11 1549  WHEN OTHERS THEN
12:39:11 1550  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1551  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1552  END GET_INVOICE_BY_TRNS_ORDER_ID;
12:39:11 1553  
12:39:11 1554  /******************************************************************************/
12:39:11 1555  
12:39:11 1556  PROCEDURE GET_INVOICE_BY_ID (
12:39:11 1557  	 in_invoice_id	IN NUMBER,
12:39:11 1558  	 out_result_set OUT SYS_REFCURSOR
12:39:11 1559  ) AS
12:39:11 1560  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
12:39:11 1561  -- VARIABLE
12:39:11 1562  temp_invoice_id NUMBER;
12:39:11 1563  -- EXCEPTIONS
12:39:11 1564  BAD_INVOCIE_ID EXCEPTION;
12:39:11 1565  BEGIN
12:39:11 1566  
12:39:11 1567  	 BEGIN
12:39:11 1568  	   SELECT
12:39:11 1569  	     INVOICE.ID into temp_invoice_id
12:39:11 1570  	   FROM
12:39:11 1571  	     INVOICE
12:39:11 1572  	   WHERE
12:39:11 1573  	     INVOICE.ID = in_invoice_id;
12:39:11 1574  	   EXCEPTION
12:39:11 1575  	     WHEN NO_DATA_FOUND THEN
12:39:11 1576  	       RAISE BAD_INVOCIE_ID;
12:39:11 1577  	 END;
12:39:11 1578  
12:39:11 1579  	 OPEN out_result_set FOR
12:39:11 1580  	 SELECT
12:39:11 1581  	   INVOICE.ID,
12:39:11 1582  	   INVOICE.INVOICE_STATUS_ID,
12:39:11 1583  	   INVOICE.TAX_EXEMPT_ID,
12:39:11 1584  	   INVOICE.UPDATE_DATE,
12:39:11 1585  	   INVOICE.UPDATED_BY,
12:39:11 1586  	   INVOICE.CREATE_DATE,
12:39:11 1587  	   INVOICE.CREATED_BY
12:39:11 1588  	 FROM
12:39:11 1589  	   INVOICE
12:39:11 1590  	 WHERE
12:39:11 1591  	   INVOICE.ID = in_invoice_id;
12:39:11 1592  
12:39:11 1593  EXCEPTION
12:39:11 1594  WHEN BAD_INVOCIE_ID THEN
12:39:11 1595  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1596  	   SPROC_NAME, 'No such invoice');
12:39:11 1597  WHEN OTHERS THEN
12:39:11 1598  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1599  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1600  END GET_INVOICE_BY_ID;
12:39:11 1601  
12:39:11 1602  /******************************************************************************/
12:39:11 1603  
12:39:11 1604  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
12:39:11 1605  	 in_invoice_id		       IN NUMBER,
12:39:11 1606  	 out_is_tax_calculation_needed OUT NUMBER
12:39:11 1607  ) AS
12:39:11 1608  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
12:39:11 1609  BEGIN
12:39:11 1610  
12:39:11 1611  	 SELECT
12:39:11 1612  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
12:39:11 1613  	 FROM
12:39:11 1614  	   INVOICE I
12:39:11 1615  	 WHERE
12:39:11 1616  	   I.ID = in_invoice_id;
12:39:11 1617  
12:39:11 1618  EXCEPTION
12:39:11 1619  WHEN NO_DATA_FOUND THEN
12:39:11 1620  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1621  	   SPROC_NAME, 'No such invoice');
12:39:11 1622  WHEN OTHERS THEN
12:39:11 1623  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1624  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1625  END GET_IS_TAX_CALCULATION_NEEDED;
12:39:11 1626  
12:39:11 1627  /******************************************************************************/
12:39:11 1628  
12:39:11 1629  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
12:39:11 1630  	 in_invoice_id		      IN NUMBER,
12:39:11 1631  	 in_updated_by		      IN VARCHAR2,
12:39:11 1632  	 in_is_tax_calculation_needed IN NUMBER
12:39:11 1633  ) AS
12:39:11 1634  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
12:39:11 1635  -- VARIABLES
12:39:11 1636  temp_invoice_id	      NUMBER;
12:39:11 1637  -- EXCEPTIONS
12:39:11 1638  BAD_INVOICE_ID	      EXCEPTION;
12:39:11 1639  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
12:39:11 1640  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 1641  BEGIN
12:39:11 1642  
12:39:11 1643  	 BEGIN
12:39:11 1644  	   SELECT
12:39:11 1645  	     i.id into temp_invoice_id
12:39:11 1646  	   FROM
12:39:11 1647  	     invoice i
12:39:11 1648  	   WHERE
12:39:11 1649  	     i.id = in_invoice_id;
12:39:11 1650  	   EXCEPTION
12:39:11 1651  	     WHEN NO_DATA_FOUND THEN
12:39:11 1652  	       RAISE BAD_INVOICE_ID;
12:39:11 1653  	 END;
12:39:11 1654  
12:39:11 1655  	 BEGIN
12:39:11 1656  	   PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
12:39:11 1657  	     in_invoice_id => in_invoice_id,
12:39:11 1658  	     in_updated_by => in_updated_by,
12:39:11 1659  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
12:39:11 1660  	   );
12:39:11 1661  	   EXCEPTION
12:39:11 1662  	     WHEN OTHERS THEN
12:39:11 1663  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1664  	       RAISE CAN_NOT_UPDATE_INVOCIE;
12:39:11 1665  	 END;
12:39:11 1666  
12:39:11 1667  EXCEPTION
12:39:11 1668  WHEN BAD_INVOICE_ID THEN
12:39:11 1669  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1670  	   SPROC_NAME, 'No such invoice');
12:39:11 1671  WHEN CAN_NOT_UPDATE_INVOCIE THEN
12:39:11 1672  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1673  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
12:39:11 1674  WHEN OTHERS THEN
12:39:11 1675  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1676  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1677  END SET_IS_TAX_CALCULATION_NEEDED;
12:39:11 1678  
12:39:11 1679  /******************************************************************************/
12:39:11 1680  
12:39:11 1681  PROCEDURE REFUND_INVOICE (
12:39:11 1682  	 in_invoice_id	    IN NUMBER,
12:39:11 1683  	 in_refund_amount   IN NUMBER,
12:39:11 1684  	 in_note	    IN VARCHAR2,
12:39:11 1685  	 in_created_by	    IN VARCHAR2,
12:39:11 1686  	 out_charge_id	    OUT NUMBER
12:39:11 1687  ) AS
12:39:11 1688  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
12:39:11 1689  -- VARIABLES
12:39:11 1690  var_invoice_status_id  NUMBER;
12:39:11 1691  var_subscription_id    NUMBER;
12:39:11 1692  var_account_id	      NUMBER;
12:39:11 1693  var_group_id	      NUMBER;
12:39:11 1694  var_account_status_id  NUMBER;
12:39:11 1695  var_new_transaction_id NUMBER;
12:39:11 1696  var_instrument_type_id NUMBER;
12:39:11 1697  var_instrument_id      NUMBER;
12:39:11 1698  var_new_charge_id      NUMBER;
12:39:11 1699  var_invoice_amount     NUMBER(10,2);
12:39:11 1700  var_refunds_before     NUMBER(10,2);
12:39:11 1701  var_charges_amount     NUMBER(10,2);
12:39:11 1702  -- EXCEPTIONS
12:39:11 1703  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
12:39:11 1704  ACCOUNT_IS_FROZEN	     EXCEPTION;
12:39:11 1705  BAD_INVOICE_ID		     EXCEPTION;
12:39:11 1706  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
12:39:11 1707  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
12:39:11 1708  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
12:39:11 1709  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
12:39:11 1710  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
12:39:11 1711  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
12:39:11 1712  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
12:39:11 1713  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
12:39:11 1714  EXCEPTION_MESSAGE	      VARCHAR2(1024);
12:39:11 1715  BEGIN
12:39:11 1716  
12:39:11 1717  	 BEGIN
12:39:11 1718  	   SELECT
12:39:11 1719  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
12:39:11 1720  	   FROM
12:39:11 1721  	     INVOICE
12:39:11 1722  	   WHERE
12:39:11 1723  	     INVOICE.ID = in_invoice_id;
12:39:11 1724  	   EXCEPTION
12:39:11 1725  	     WHEN NO_DATA_FOUND THEN
12:39:11 1726  	       RAISE BAD_INVOICE_ID;
12:39:11 1727  	 END;
12:39:11 1728  
12:39:11 1729  	 -- Get instrument and subscription id if exists
12:39:11 1730  	 BEGIN
12:39:11 1731  	   SELECT
12:39:11 1732  	     SUBSCRIPTION.INSTRUMENT_ID,
12:39:11 1733  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
12:39:11 1734  	     SUBSCRIPTION.ACCOUNT_ID,
12:39:11 1735  	     SUBSCRIPTION.ID
12:39:11 1736  	     into
12:39:11 1737  	     var_instrument_id,
12:39:11 1738  	     var_instrument_type_id,
12:39:11 1739  	     var_account_id,
12:39:11 1740  	     var_subscription_id
12:39:11 1741  	   FROM
12:39:11 1742  	     SUBSCRIPTION
12:39:11 1743  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
12:39:11 1744  	   WHERE
12:39:11 1745  	     LICENSE.INVOICE_ID = in_invoice_id
12:39:11 1746  	     AND ROWNUM <= 1;
12:39:11 1747  	   EXCEPTION
12:39:11 1748  	     WHEN NO_DATA_FOUND THEN
12:39:11 1749  	       BEGIN
12:39:11 1750  
12:39:11 1751  		 var_subscription_id := NULL;
12:39:11 1752  
12:39:11 1753  		 SELECT
12:39:11 1754  		   CHARGE.INSTRUMENT_ID,
12:39:11 1755  		   CHARGE.INSTRUMENT_TYPE_ID,
12:39:11 1756  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
12:39:11 1757  		   into
12:39:11 1758  		   var_instrument_id,
12:39:11 1759  		   var_instrument_type_id,
12:39:11 1760  		   var_group_id
12:39:11 1761  		 FROM
12:39:11 1762  		   INVOICE
12:39:11 1763  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
12:39:11 1764  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
12:39:11 1765  		 WHERE
12:39:11 1766  		   INVOICE.ID = in_invoice_id
12:39:11 1767  		   AND ROWNUM <= 1;
12:39:11 1768  
12:39:11 1769  		 SELECT
12:39:11 1770  		   ACCOUNT.ID into var_account_id
12:39:11 1771  		 FROM
12:39:11 1772  		   ACCOUNT
12:39:11 1773  		 WHERE
12:39:11 1774  		   ACCOUNT.GROUP_ID = var_group_id;
12:39:11 1775  
12:39:11 1776  		 EXCEPTION
12:39:11 1777  		   WHEN NO_DATA_FOUND THEN
12:39:11 1778  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
12:39:11 1779  	       END;
12:39:11 1780  	 END;
12:39:11 1781  
12:39:11 1782  	 -- Check account status. It should not to be frozen
12:39:11 1783  	 SELECT
12:39:11 1784  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
12:39:11 1785  	 FROM
12:39:11 1786  	   ACCOUNT
12:39:11 1787  	 WHERE
12:39:11 1788  	   ACCOUNT.ID = var_account_id;
12:39:11 1789  
12:39:11 1790  	 IF var_account_status_id = GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
12:39:11 1791  	   RAISE ACCOUNT_IS_FROZEN;
12:39:11 1792  	 END IF;
12:39:11 1793  
12:39:11 1794  	 IF var_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
12:39:11 1795  	   RAISE INVOICE_IS_NOT_CLOSED;
12:39:11 1796  	 END IF;
12:39:11 1797  
12:39:11 1798  	 BEGIN
12:39:11 1799  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
12:39:11 1800  	     in_invoice_id => in_invoice_id,
12:39:11 1801  	     out_amount    => var_invoice_amount
12:39:11 1802  	   );
12:39:11 1803  	   EXCEPTION
12:39:11 1804  	     WHEN OTHERS THEN
12:39:11 1805  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1806  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
12:39:11 1807  	 END;
12:39:11 1808  
12:39:11 1809  	 IF ( in_refund_amount > var_invoice_amount ) THEN
12:39:11 1810  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
12:39:11 1811  	 END IF;
12:39:11 1812  
12:39:11 1813  	 SELECT /*+ STAR_TRANSFORMATION */
12:39:11 1814  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
12:39:11 1815  	 FROM
12:39:11 1816  	   CHARGE
12:39:11 1817  	 WHERE
12:39:11 1818  	   CHARGE.INVOICE_ID = in_invoice_id
12:39:11 1819  	   AND (
12:39:11 1820  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
12:39:11 1821  	     OR (
12:39:11 1822  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
12:39:11 1823  	       AND EXISTS (
12:39:11 1824  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
12:39:11 1825  	       )
12:39:11 1826  	     )
12:39:11 1827  	   )
12:39:11 1828  	   AND CHARGE.CHARGE_AMOUNT < 0;
12:39:11 1829  
12:39:11 1830  	 -- Refunds are negative
12:39:11 1831  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
12:39:11 1832  	 var_refunds_before := 0 - var_refunds_before;
12:39:11 1833  
12:39:11 1834  	 var_charges_amount := 0;
12:39:11 1835  
12:39:11 1836  	 FOR f_processed_charges IN (
12:39:11 1837  	   SELECT
12:39:11 1838  	     CHARGE.CHARGE_AMOUNT
12:39:11 1839  	   FROM
12:39:11 1840  	     CHARGE
12:39:11 1841  	   WHERE
12:39:11 1842  	     CHARGE.INVOICE_ID = in_invoice_id
12:39:11 1843  	     AND CHARGE.CHARGE_AMOUNT > 0
12:39:11 1844  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
12:39:11 1845  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS)
12:39:11 1846  	 )
12:39:11 1847  	 LOOP
12:39:11 1848  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
12:39:11 1849  	 END LOOP;
12:39:11 1850  
12:39:11 1851  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
12:39:11 1852  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
12:39:11 1853  	 END IF;
12:39:11 1854  
12:39:11 1855  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
12:39:11 1856  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
12:39:11 1857  	 END IF;
12:39:11 1858  
12:39:11 1859  	 BEGIN
12:39:11 1860  	   PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
12:39:11 1861  	     in_transaction_id	=> NULL,
12:39:11 1862  	     in_status_id	=> GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
12:39:11 1863  	     in_amount		=> -in_refund_amount,
12:39:11 1864  	     in_created_by	=> in_created_by,
12:39:11 1865  	     in_order_id	=> NULL,
12:39:11 1866  	     in_is_refund	=> GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 1867  	     out_transaction_id => var_new_transaction_id
12:39:11 1868  	   );
12:39:11 1869  	   EXCEPTION
12:39:11 1870  	     WHEN OTHERS THEN
12:39:11 1871  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1872  	       RAISE CAN_NOT_CREATE_TRANSACTION;
12:39:11 1873  	 END;
12:39:11 1874  
12:39:11 1875  	 BEGIN
12:39:11 1876  	   PROCS_CHARGE_V16.CREATE_CHARGE(
12:39:11 1877  	     in_invoice_id	   => in_invoice_id,
12:39:11 1878  	     in_transaction_id	   => var_new_transaction_id,
12:39:11 1879  	     in_instrument_type_id => var_instrument_type_id,
12:39:11 1880  	     in_instrument_id	   => var_instrument_id,
12:39:11 1881  	     in_charge_amount	   => -in_refund_amount,
12:39:11 1882  	     in_created_by	   => in_created_by,
12:39:11 1883  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
12:39:11 1884  	     out_charge_id	   => var_new_charge_id
12:39:11 1885  	   );
12:39:11 1886  	   EXCEPTION
12:39:11 1887  	     WHEN OTHERS THEN
12:39:11 1888  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1889  	       RAISE CAN_NOT_CREATE_CHARGE;
12:39:11 1890  	 END;
12:39:11 1891  
12:39:11 1892  	 out_charge_id := var_new_charge_id;
12:39:11 1893  
12:39:11 1894  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
12:39:11 1895  	   BEGIN
12:39:11 1896  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
12:39:11 1897  	       in_subscription_id => var_subscription_id,
12:39:11 1898  	       in_agent_id	  => 0, -- AGENT_ID??
12:39:11 1899  	       in_note		  => in_note,
12:39:11 1900  	       in_created_by	  => in_created_by
12:39:11 1901  	     );
12:39:11 1902  	     EXCEPTION
12:39:11 1903  	       WHEN OTHERS THEN
12:39:11 1904  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1905  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
12:39:11 1906  	   END;
12:39:11 1907  	 END IF;
12:39:11 1908  
12:39:11 1909  EXCEPTION
12:39:11 1910  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
12:39:11 1911  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1912  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
12:39:11 1913  WHEN INVOICE_IS_NOT_CLOSED THEN
12:39:11 1914  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1915  	   SPROC_NAME, 'Invoice is not closed');
12:39:11 1916  WHEN ACCOUNT_IS_FROZEN THEN
12:39:11 1917  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1918  	   SPROC_NAME, 'Could not refund subscription for frozen account');
12:39:11 1919  WHEN BAD_INVOICE_ID THEN
12:39:11 1920  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1921  	   SPROC_NAME, 'No such invoice');
12:39:11 1922  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
12:39:11 1923  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1924  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
12:39:11 1925  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
12:39:11 1926  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1927  	   SPROC_NAME, 'Refund is greater than amount');
12:39:11 1928  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
12:39:11 1929  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1930  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
12:39:11 1931  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
12:39:11 1932  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1933  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
12:39:11 1934  WHEN CAN_NOT_CREATE_TRANSACTION THEN
12:39:11 1935  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1936  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
12:39:11 1937  WHEN CAN_NOT_CREATE_CHARGE THEN
12:39:11 1938  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1939  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
12:39:11 1940  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
12:39:11 1941  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1942  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
12:39:11 1943  WHEN OTHERS THEN
12:39:11 1944  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1945  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1946  END REFUND_INVOICE;
12:39:11 1947  
12:39:11 1948  /******************************************************************************/
12:39:11 1949  
12:39:11 1950  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
12:39:11 1951  	 in_invoice_id		     IN NUMBER,
12:39:11 1952  	 out_order_id		     OUT VARCHAR2,
12:39:11 1953  	 out_external_transaction_id OUT VARCHAR2
12:39:11 1954  ) AS
12:39:11 1955  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
12:39:11 1956  -- VARIABLES
12:39:11 1957  temp_invoice_id number;
12:39:11 1958  cnt_matched_instr number := 0;
12:39:11 1959  -- EXCEPTIONS
12:39:11 1960  BAD_INVOICE_ID EXCEPTION;
12:39:11 1961  BEGIN
12:39:11 1962  
12:39:11 1963  	 BEGIN
12:39:11 1964  	   SELECT
12:39:11 1965  	     i.id into temp_invoice_id
12:39:11 1966  	   from
12:39:11 1967  	     invoice i
12:39:11 1968  	   where
12:39:11 1969  	     i.id = in_invoice_id;
12:39:11 1970  	   EXCEPTION
12:39:11 1971  	     WHEN NO_DATA_FOUND THEN
12:39:11 1972  	       RAISE BAD_INVOICE_ID;
12:39:11 1973  	 END;
12:39:11 1974  
12:39:11 1975  	 select
12:39:11 1976  	   count(1) into cnt_matched_instr
12:39:11 1977  	 from
12:39:11 1978  	   charge ch
12:39:11 1979  	 inner join
12:39:11 1980  	   subscription s
12:39:11 1981  	 on
12:39:11 1982  	   s.instrument_id = ch.instrument_id
12:39:11 1983  	 where
12:39:11 1984  	   ch.invoice_id = in_invoice_id;
12:39:11 1985  
12:39:11 1986  	 if cnt_matched_instr = 0 then
12:39:11 1987  	   out_external_transaction_id := null;
12:39:11 1988  	   out_order_id := null;
12:39:11 1989  	   return;
12:39:11 1990  	 end if;
12:39:11 1991  
12:39:11 1992  	 SELECT
12:39:11 1993  	   t.order_id,
12:39:11 1994  	   ta.external_transaction_id
12:39:11 1995  	   into
12:39:11 1996  	   out_order_id,
12:39:11 1997  	   out_external_transaction_id
12:39:11 1998  	 from
12:39:11 1999  	   charge ch
12:39:11 2000  	   inner join transaction t on ch.transaction_id = t.id
12:39:11 2001  	   inner join transaction_attempt ta on ta.transaction_id = t.id
12:39:11 2002  	 where
12:39:11 2003  	   ch.invoice_id = in_invoice_id
12:39:11 2004  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
12:39:11 2005  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
12:39:11 2006  
12:39:11 2007  EXCEPTION
12:39:11 2008  WHEN BAD_INVOICE_ID THEN
12:39:11 2009  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2010  	   SPROC_NAME, 'No such invoice');
12:39:11 2011  WHEN NO_DATA_FOUND THEN
12:39:11 2012  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2013  	   SPROC_NAME, 'No payment data found');
12:39:11 2014  WHEN OTHERS THEN
12:39:11 2015  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2016  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2017  END GET_PAYMENT_INFO_BY_INVOICE_ID;
12:39:11 2018  
12:39:11 2019  PROCEDURE IS_REVOKE_ENTITLEMENTS(
12:39:11 2020  	 in_invoice_id IN NUMBER,
12:39:11 2021  	 out_is_revoke OUT NUMBER
12:39:11 2022  ) AS
12:39:11 2023  BEGIN
12:39:11 2024  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V16.FALSE, GLOBAL_CONSTANTS_V16.TRUE)
12:39:11 2025  	   into out_is_revoke
12:39:11 2026  	 FROM
12:39:11 2027  	   offer_chain oc,
12:39:11 2028  	   subscription s,
12:39:11 2029  	   license l,
12:39:11 2030  	   invoice i
12:39:11 2031  	 where
12:39:11 2032  	   oc.id = s.offer_chain_id and
12:39:11 2033  	   s.id = l.subscription_id and
12:39:11 2034  	   l.invoice_id = i.id and
12:39:11 2035  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V16.TRUE and
12:39:11 2036  	   i.id = in_invoice_id and
12:39:11 2037  	   rownum < 2
12:39:11 2038  	 ;
12:39:11 2039  END IS_REVOKE_ENTITLEMENTS;
12:39:11 2040  
12:39:11 2041  END PROCS_INVOICE_V16;
12:39:11 2042  .
12:39:11 SQL> /

Package body created.

Elapsed: 00:00:00.16
12:39:11 SQL> 
12:39:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V16" AS
12:39:11   2  
12:39:11   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
12:39:11   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:11   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
12:39:11   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
12:39:11   7  AS
12:39:11   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
12:39:11   9  BEGIN
12:39:11  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
12:39:11  11  	  PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE (
12:39:11  12  	    in_gift_certificate_id	  => rec.Id,
12:39:11  13  	    in_gift_certificate_status_id => in_status_id,
12:39:11  14  	    in_updated_by		  => in_updater
12:39:11  15  	  );
12:39:11  16  	END LOOP;
12:39:11  17  END UPDATE_GC_STATUS_BY_INVOICE;
12:39:11  18  
12:39:11  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
12:39:11  20  	in_invoice_id		     IN NUMBER,
12:39:11  21  	out_is_invoice_for_redeem_gc OUT NUMBER
12:39:11  22  ) AS
12:39:11  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
12:39:11  24  var_is_for_gc NUMBER;
12:39:11  25  BEGIN
12:39:11  26  	SELECT
12:39:11  27  	  count(1) into var_is_for_gc
12:39:11  28  	FROM GIFT_CERTIFICATE GC
12:39:11  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
12:39:11  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
12:39:11  31  
12:39:11  32  	IF var_is_for_gc > 0 THEN
12:39:11  33  	  out_is_invoice_for_redeem_gc := 1;
12:39:11  34  	ELSE
12:39:11  35  	  out_is_invoice_for_redeem_gc := 0;
12:39:11  36  	END IF;
12:39:11  37  END IS_INVOICE_FOR_REDEEMED_GC;
12:39:11  38  
12:39:11  39  PROCEDURE GET_UNREDEEMED_GCS (
12:39:11  40  	out_result_set		OUT SYS_REFCURSOR,
12:39:11  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
12:39:11  42  	in_num_rows		IN NUMBER DEFAULT 10000,
12:39:11  43  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:11  44  ) AS
12:39:11  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
12:39:11  46  BEGIN
12:39:11  47  	OPEN out_result_set FOR
12:39:11  48  SELECT * FROM
12:39:11  49  (
12:39:11  50  	SELECT
12:39:11  51  	  gc.EXPIRATION_DATE,
12:39:11  52  	  ch.name,
12:39:11  53  	  ch.id offer_chain_id,
12:39:11  54  	  gc.sender_email,
12:39:11  55  	  gc.sender_name,
12:39:11  56  	  gc.recipient_email,
12:39:11  57  	  gc.recipient_name,
12:39:11  58  	  gc.purchase_date,
12:39:11  59  	  gc.redemption_date,
12:39:11  60  	  gc.purchaser_group_id,
12:39:11  61  	  gc.redeemer_group_id,
12:39:11  62  	  gc.code,
12:39:11  63  	  gc.gift_message,
12:39:11  64  	  gc.recipient_notify_date,
12:39:11  65  	  gc.id
12:39:11  66  	FROM
12:39:11  67  	  GIFT_CERTIFICATE gc,
12:39:11  68  	  OFFER_CHAIN ch
12:39:11  69  	WHERE
12:39:11  70  	  ch.id = gc.offer_chain_id
12:39:11  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
12:39:11  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
12:39:11  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
12:39:11  74  	  AND gc.redeemer_group_id is null
12:39:11  75  	  AND NOT EXISTS(
12:39:11  76  	    SELECT NULL
12:39:11  77  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
12:39:11  78  	    WHERE PROCESS_NAME = in_process_name
12:39:11  79  	      AND GENERIC_ID = gc.id
12:39:11  80  	  ) AND EXISTS(
12:39:11  81  	    SELECT NULL
12:39:11  82  	    FROM
12:39:11  83  	      charge c,
12:39:11  84  	      transaction_attempt ta,
12:39:11  85  	      transaction t
12:39:11  86  	    WHERE
12:39:11  87  	      c.invoice_id = gc.purchase_invoice_id and
12:39:11  88  	      c.transaction_id = t.id and
12:39:11  89  	      t.id = ta.transaction_id and
12:39:11  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
12:39:11  91  	  ) AND NOT EXISTS (
12:39:11  92  	    SELECT NULL
12:39:11  93  	    FROM
12:39:11  94  	      charge c,
12:39:11  95  	      transaction t
12:39:11  96  	    WHERE
12:39:11  97  	      c.invoice_id = gc.purchase_invoice_id and
12:39:11  98  	      c.transaction_id = t.id and
12:39:11  99  	      t.is_refund = GLOBAL_CONSTANTS_V16.TRUE
12:39:11 100  	  )
12:39:11 101  	  AND ROWNUM <= in_num_rows*10
12:39:11 102  	  ORDER BY dbms_random.value
12:39:11 103  ) WHERE
12:39:11 104  	  ROWNUM <= in_num_rows;
12:39:11 105  EXCEPTION
12:39:11 106  WHEN OTHERS THEN
12:39:11 107  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 109  END GET_UNREDEEMED_GCS;
12:39:11 110  
12:39:11 111  PROCEDURE ADD_CREDIT_CARD (
12:39:11 112  /*
12:39:11 113  Throws exceptions:
12:39:11 114  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 115  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 116  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 117  */
12:39:11 118  	in_group_id		  IN NUMBER,
12:39:11 119  	in_updated_by		  IN VARCHAR2,
12:39:11 120  	in_instrument_name	  IN VARCHAR2,
12:39:11 121  	in_card_holder_name	  IN VARCHAR2,
12:39:11 122  	in_street_address	  IN VARCHAR2,
12:39:11 123  	in_street_address2	  IN VARCHAR2,
12:39:11 124  	in_state		  IN VARCHAR2,
12:39:11 125  	in_city 		  IN VARCHAR2,
12:39:11 126  	in_postal_code		  IN VARCHAR2,
12:39:11 127  	in_country		  IN CHAR,
12:39:11 128  	in_last_four_cc 	  IN VARCHAR2,
12:39:11 129  	in_expiration_date	  IN DATE,
12:39:11 130  	in_credit_card_type_id	  IN NUMBER,
12:39:11 131  	in_token		  IN VARCHAR2,
12:39:11 132  	in_chase_profile_id	  IN VARCHAR2,
12:39:11 133  	in_credit_card_status_id  IN NUMBER,
12:39:11 134  	in_private_first_name	  IN VARCHAR2,
12:39:11 135  	in_private_last_name	  IN VARCHAR2,
12:39:11 136  	out_credit_card_id	  OUT NUMBER
12:39:11 137  ) AS
12:39:11 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
12:39:11 139  -- VARIABLES
12:39:11 140  var_account_id	      NUMBER;
12:39:11 141  var_account_status      NUMBER;
12:39:11 142  var_credit_card_id      NUMBER;
12:39:11 143  temp_old_credit_card_id NUMBER;
12:39:11 144  -- EXCEPTIONS
12:39:11 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
12:39:11 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
12:39:11 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
12:39:11 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
12:39:11 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
12:39:11 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
12:39:11 151  var_charges_set		SYS_REFCURSOR;
12:39:11 152  var_charge_id		NUMBER;
12:39:11 153  var_charge_invoice_id	NUMBER;
12:39:11 154  var_charge_transaction_id NUMBER;
12:39:11 155  var_charge_amount 	NUMBER(10,2);
12:39:11 156  temp_out_charge_id	NUMBER;
12:39:11 157  temp_out_transaction_id	NUMBER;
12:39:11 158  var_order_id			VARCHAR2(1024);
12:39:11 159  BEGIN
12:39:11 160  
12:39:11 161  	-- Get account id
12:39:11 162  	-- Get account status
12:39:11 163  	SELECT
12:39:11 164  	  ACCOUNT.ID,
12:39:11 165  	  ACCOUNT.ACCOUNT_STATUS_ID
12:39:11 166  	  into
12:39:11 167  	  var_account_id,
12:39:11 168  	  var_account_status
12:39:11 169  	FROM
12:39:11 170  	  ACCOUNT
12:39:11 171  	WHERE
12:39:11 172  	  ACCOUNT.GROUP_ID = in_group_id;
12:39:11 173  
12:39:11 174  	SELECT
12:39:11 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
12:39:11 176  	FROM DUAL;
12:39:11 177  
12:39:11 178  	-- Insert new row in CREDIT_CARD table
12:39:11 179  	PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_CREDIT_CARD(
12:39:11 180  	  out_credit_card_id	      => var_credit_card_id,
12:39:11 181  	  in_account_id 	      => var_account_id,
12:39:11 182  	  in_instrument_name	      => in_instrument_name,
12:39:11 183  	  in_private_card_holder_name => in_card_holder_name,
12:39:11 184  	  in_private_street_address   => in_street_address,
12:39:11 185  	  in_private_street_address2  => in_street_address2,
12:39:11 186  	  in_state		      => in_state,
12:39:11 187  	  in_city		      => in_city,
12:39:11 188  	  in_postal_code	      => in_postal_code,
12:39:11 189  	  in_country		      => in_country,
12:39:11 190  	  in_last_four_cc	      => in_last_four_cc,
12:39:11 191  	  in_expiration_date	      => in_expiration_date,
12:39:11 192  	  in_credit_card_type_id      => in_credit_card_type_id,
12:39:11 193  	  in_secret_token	      => in_token,
12:39:11 194  	  in_chase_profile_id	      => in_chase_profile_id,
12:39:11 195  	  in_created_by 	      => in_updated_by,
12:39:11 196  	  in_credit_card_status_id    => in_credit_card_status_id,
12:39:11 197  	  in_private_first_name       => in_private_first_name,
12:39:11 198  	  in_private_last_name	      => in_private_last_name
12:39:11 199  	);
12:39:11 200  
12:39:11 201  	out_credit_card_id := var_credit_card_id;
12:39:11 202  
12:39:11 203  EXCEPTION
12:39:11 204  WHEN NO_DATA_FOUND THEN
12:39:11 205  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 206  	  SPROC_NAME, 'No such account');
12:39:11 207  WHEN BAD_OLD_CREDIT_CARD THEN
12:39:11 208  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 209  	  SPROC_NAME, 'Bad old credit card id');
12:39:11 210  WHEN BAD_IS_DEFAULT_VALUE THEN
12:39:11 211  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 212  	  SPROC_NAME, 'Bad is_default value');
12:39:11 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
12:39:11 214  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
12:39:11 216  WHEN BAD_ACCOUNT_STATUS THEN
12:39:11 217  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 218  	  SPROC_NAME, 'Account is not active');
12:39:11 219  WHEN OTHERS THEN
12:39:11 220  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 222  END ADD_CREDIT_CARD;
12:39:11 223  
12:39:11 224  /******************************************************************************/
12:39:11 225  
12:39:11 226  PROCEDURE ADD_PAYPAL (
12:39:11 227  /*
12:39:11 228  Throws exceptions:
12:39:11 229  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 230  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 231  */
12:39:11 232  	in_group_id			IN NUMBER,
12:39:11 233  	in_instrument_name		IN VARCHAR2,
12:39:11 234  	in_private_email_address	IN VARCHAR2,
12:39:11 235  	in_created_by			IN VARCHAR2,
12:39:11 236  	in_paypal_status_id		IN NUMBER,
12:39:11 237  	in_paypal_prvt_street_address	IN VARCHAR2,
12:39:11 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
12:39:11 239  	in_state			IN VARCHAR2,
12:39:11 240  	in_city 			IN VARCHAR2,
12:39:11 241  	in_postal_code			IN VARCHAR2,
12:39:11 242  	in_country			IN CHAR,
12:39:11 243  	in_expiration_date		IN DATE,
12:39:11 244  	in_secret_token 		IN VARCHAR2,
12:39:11 245  	out_paypal_id			OUT NUMBER
12:39:11 246  ) AS
12:39:11 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
12:39:11 248  var_paypal_id NUMBER;
12:39:11 249  var_account_id  NUMBER;
12:39:11 250  -- EXCEPTIONS
12:39:11 251  BAD_GROUP_ID	    EXCEPTION;
12:39:11 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
12:39:11 253  BAD_PAYPAL_STATUS     EXCEPTION;
12:39:11 254  EXCEPTION_MESSAGE VARCHAR2(1024);
12:39:11 255  BEGIN
12:39:11 256  
12:39:11 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
12:39:11 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
12:39:11 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
12:39:11 260  	  RAISE BAD_PAYPAL_STATUS;
12:39:11 261  	END IF;
12:39:11 262  
12:39:11 263  	BEGIN
12:39:11 264  	  SELECT
12:39:11 265  	    a.id into var_account_id
12:39:11 266  	  from
12:39:11 267  	    account a
12:39:11 268  	  where
12:39:11 269  	    a.group_id = in_group_id;
12:39:11 270  	  EXCEPTION
12:39:11 271  	    WHEN NO_DATA_FOUND THEN
12:39:11 272  	      RAISE BAD_GROUP_ID;
12:39:11 273  	END;
12:39:11 274  
12:39:11 275  	BEGIN
12:39:11 276  	  PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_PAYPAL(
12:39:11 277  	    out_paypal_id		   => var_paypal_id,
12:39:11 278  	    in_paypal_id		   => NULL,
12:39:11 279  	    in_account_id		   => var_account_id,
12:39:11 280  	    in_instrument_name		   => in_instrument_name,
12:39:11 281  	    in_private_email_address	   => in_private_email_address,
12:39:11 282  	    in_created_by		   => in_created_by,
12:39:11 283  	    in_paypal_status_id 	   => in_paypal_status_id,
12:39:11 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
12:39:11 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
12:39:11 286  	    in_state			   => in_state,
12:39:11 287  	    in_city			   => in_city,
12:39:11 288  	    in_postal_code		   => in_postal_code,
12:39:11 289  	    in_country			   => in_country,
12:39:11 290  	    in_expiration_date		   => in_expiration_date,
12:39:11 291  	    in_secret_token		   => in_secret_token
12:39:11 292  	  );
12:39:11 293  	  EXCEPTION
12:39:11 294  	    WHEN OTHERS THEN
12:39:11 295  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
12:39:11 297  	END;
12:39:11 298  
12:39:11 299  	out_paypal_id := var_paypal_id;
12:39:11 300  
12:39:11 301  EXCEPTION
12:39:11 302  WHEN BAD_GROUP_ID THEN
12:39:11 303  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 304  	  SPROC_NAME, 'No such group id');
12:39:11 305  WHEN BAD_PAYPAL_STATUS THEN
12:39:11 306  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 307  	  SPROC_NAME, 'Bad paypal status');
12:39:11 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
12:39:11 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
12:39:11 311  WHEN OTHERS THEN
12:39:11 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 314  END ADD_PAYPAL;
12:39:11 315  
12:39:11 316  /******************************************************************************/
12:39:11 317  
12:39:11 318  PROCEDURE DISABLE_CREDIT_CARD (
12:39:11 319  /*
12:39:11 320  Throws exceptions:
12:39:11 321  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 322  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 323  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 324  */
12:39:11 325  	in_credit_card_id IN NUMBER,
12:39:11 326  	in_updated_by	  IN VARCHAR2
12:39:11 327  ) AS
12:39:11 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
12:39:11 329  -- VARIBLES
12:39:11 330  var_account_id		     NUMBER;
12:39:11 331  var_group_id		     NUMBER;
12:39:11 332  var_credit_card_status	     NUMBER;
12:39:11 333  var_pending_transactions_num   NUMBER;
12:39:11 334  var_pending_invoices_num	     NUMBER;
12:39:11 335  current_def_instrument_type_id NUMBER;
12:39:11 336  current_def_instrument_id      NUMBER;
12:39:11 337  -- EXCEPTIONS
12:39:11 338  BAD_CC_STATUS		   EXCEPTION;
12:39:11 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
12:39:11 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
12:39:11 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
12:39:11 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
12:39:11 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
12:39:11 344  BEGIN
12:39:11 345  
12:39:11 346  	-- Get credit card status
12:39:11 347  	-- Get account id
12:39:11 348  	SELECT
12:39:11 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
12:39:11 350  	  CREDIT_CARD.ACCOUNT_ID
12:39:11 351  	  into
12:39:11 352  	  var_credit_card_status,
12:39:11 353  	  var_account_id
12:39:11 354  	FROM
12:39:11 355  	  CREDIT_CARD
12:39:11 356  	WHERE
12:39:11 357  	  CREDIT_CARD.ID = in_credit_card_id;
12:39:11 358  
12:39:11 359  	-- Check that we can disable this credit card (STUB)
12:39:11 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
12:39:11 362  	END IF;
12:39:11 363  
12:39:11 364  	-- Get account id
12:39:11 365  	SELECT
12:39:11 366  	  ACCOUNT.GROUP_ID into var_group_id
12:39:11 367  	FROM
12:39:11 368  	  ACCOUNT
12:39:11 369  	WHERE
12:39:11 370  	  ACCOUNT.ID = var_account_id;
12:39:11 371  
12:39:11 372  	-- Card should to be active
12:39:11 373  	IF var_credit_card_status != GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE THEN
12:39:11 374  	  RAISE BAD_CC_STATUS;
12:39:11 375  	END IF;
12:39:11 376  
12:39:11 377  	-- Looking for pending transactions associated with given credit card
12:39:11 378  	SELECT
12:39:11 379  	  COUNT(*) into var_pending_invoices_num
12:39:11 380  	FROM
12:39:11 381  	  CHARGE
12:39:11 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
12:39:11 383  	WHERE
12:39:11 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
12:39:11 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
12:39:11 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
12:39:11 387  
12:39:11 388  	IF var_pending_invoices_num > 0 THEN
12:39:11 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
12:39:11 390  	END IF;
12:39:11 391  
12:39:11 392  	-- Getting current default financial instrument
12:39:11 393  	BEGIN
12:39:11 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
12:39:11 395  	    in_group_id 	   => var_group_id,
12:39:11 396  	    out_instrument_type_id => current_def_instrument_type_id,
12:39:11 397  	    out_instrument_id	   => current_def_instrument_id
12:39:11 398  	  );
12:39:11 399  	  EXCEPTION
12:39:11 400  	    WHEN OTHERS THEN
12:39:11 401  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
12:39:11 403  	END;
12:39:11 404  
12:39:11 405  	-- Checking that credit card is not default
12:39:11 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
12:39:11 407  	  AND current_def_instrument_id = in_credit_card_id THEN
12:39:11 408  	  BEGIN
12:39:11 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
12:39:11 410  	      in_group_id => var_group_id
12:39:11 411  	    );
12:39:11 412  	  EXCEPTION
12:39:11 413  	    WHEN OTHERS THEN
12:39:11 414  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
12:39:11 416  	  END;
12:39:11 417  	END IF;
12:39:11 418  
12:39:11 419  	-- Update credit card status
12:39:11 420  	PROCS_FIN_INSTRUMENTS_V16.UPDATE_CREDIT_CARD_STATUS(
12:39:11 421  	  in_credit_card_id	   => in_credit_card_id,
12:39:11 422  	  in_updated_by 	   => in_updated_by,
12:39:11 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
12:39:11 424  	);
12:39:11 425  
12:39:11 426  EXCEPTION
12:39:11 427  WHEN NO_DATA_FOUND THEN
12:39:11 428  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 429  	  SPROC_NAME, 'No such credit card');
12:39:11 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
12:39:11 431  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
12:39:11 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
12:39:11 434  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
12:39:11 436  WHEN BAD_CC_STATUS THEN
12:39:11 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 438  	  SPROC_NAME, 'Credit card is not active');
12:39:11 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
12:39:11 440  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
12:39:11 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
12:39:11 443  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
12:39:11 445  WHEN OTHERS THEN
12:39:11 446  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 448  END DISABLE_CREDIT_CARD;
12:39:11 449  
12:39:11 450  /******************************************************************************/
12:39:11 451  
12:39:11 452  PROCEDURE DISABLE_PAYPAL (
12:39:11 453  /*
12:39:11 454  Throws exceptions:
12:39:11 455  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 456  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 457  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:11 458  */
12:39:11 459  	in_paypal_id  IN NUMBER,
12:39:11 460  	in_updated_by IN VARCHAR2
12:39:11 461  ) AS
12:39:11 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
12:39:11 463  -- VARIABLES
12:39:11 464  var_paypal_status_id NUMBER;
12:39:11 465  var_account_id	   NUMBER;
12:39:11 466  var_group_id	   NUMBER;
12:39:11 467  var_pending_invoices_num NUMBER;
12:39:11 468  current_def_instrument_type_id NUMBER;
12:39:11 469  current_def_instrument_id NUMBER;
12:39:11 470  -- EXCEPTIONS
12:39:11 471  BAD_PAYPAL_ID EXCEPTION;
12:39:11 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
12:39:11 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
12:39:11 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
12:39:11 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
12:39:11 476  EXCEPTION_MESSAGE VARCHAR2(1024);
12:39:11 477  BEGIN
12:39:11 478  
12:39:11 479  	-- Get Paypal status
12:39:11 480  	-- Get account
12:39:11 481  	BEGIN
12:39:11 482  	  SELECT
12:39:11 483  	    PAYPAL.PAYPAL_STATUS_ID,
12:39:11 484  	    PAYPAL.ACCOUNT_ID
12:39:11 485  	    into
12:39:11 486  	    var_paypal_status_id,
12:39:11 487  	    var_account_id
12:39:11 488  	  FROM
12:39:11 489  	    PAYPAL
12:39:11 490  	  WHERE
12:39:11 491  	    PAYPAL.ID = in_paypal_id;
12:39:11 492  	  EXCEPTION
12:39:11 493  	    WHEN NO_DATA_FOUND THEN
12:39:11 494  	      RAISE BAD_PAYPAL_ID;
12:39:11 495  	END;
12:39:11 496  
12:39:11 497  	-- Get group id
12:39:11 498  	SELECT
12:39:11 499  	  ACCOUNT.GROUP_ID into var_group_id
12:39:11 500  	FROM
12:39:11 501  	  ACCOUNT
12:39:11 502  	WHERE
12:39:11 503  	  ACCOUNT.ID = var_account_id;
12:39:11 504  
12:39:11 505  	-- Card should not be disabled
12:39:11 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V16.PAYPAL_INACTIVE THEN
12:39:11 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
12:39:11 508  	END IF;
12:39:11 509  
12:39:11 510  	-- Looking for pending transactions associated with given credit card
12:39:11 511  	SELECT
12:39:11 512  	  COUNT(*) into var_pending_invoices_num
12:39:11 513  	FROM
12:39:11 514  	  CHARGE
12:39:11 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
12:39:11 516  	WHERE
12:39:11 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
12:39:11 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
12:39:11 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
12:39:11 520  
12:39:11 521  	IF var_pending_invoices_num > 0 THEN
12:39:11 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
12:39:11 523  	END IF;
12:39:11 524  
12:39:11 525  	-- Getting current default financial instrument
12:39:11 526  	BEGIN
12:39:11 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
12:39:11 528  	    in_group_id 	   => var_group_id,
12:39:11 529  	    out_instrument_type_id => current_def_instrument_type_id,
12:39:11 530  	    out_instrument_id	   => current_def_instrument_id
12:39:11 531  	  );
12:39:11 532  	  EXCEPTION
12:39:11 533  	    WHEN OTHERS THEN
12:39:11 534  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
12:39:11 536  	END;
12:39:11 537  
12:39:11 538  	-- Checking that credit card is not default
12:39:11 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
12:39:11 540  	  AND current_def_instrument_id = in_paypal_id THEN
12:39:11 541  	  BEGIN
12:39:11 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
12:39:11 543  	      in_group_id => var_group_id
12:39:11 544  	    );
12:39:11 545  	  EXCEPTION
12:39:11 546  	    WHEN OTHERS THEN
12:39:11 547  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
12:39:11 549  	  END;
12:39:11 550  	END IF;
12:39:11 551  
12:39:11 552  	PROCS_FIN_INSTRUMENTS_V16.UPDATE_PAYPAL_STATUS(
12:39:11 553  	  in_paypal_id	      => in_paypal_id,
12:39:11 554  	  in_updated_by       => in_updated_by,
12:39:11 555  	  in_paypal_status_id => GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
12:39:11 556  	);
12:39:11 557  
12:39:11 558  EXCEPTION
12:39:11 559  WHEN BAD_PAYPAL_ID THEN
12:39:11 560  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 561  	  SPROC_NAME, 'No such paypal');
12:39:11 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
12:39:11 563  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 564  	  SPROC_NAME, 'Paypal already inactive');
12:39:11 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
12:39:11 566  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
12:39:11 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
12:39:11 569  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
12:39:11 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
12:39:11 572  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
12:39:11 574  WHEN OTHERS THEN
12:39:11 575  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 577  END DISABLE_PAYPAL;
12:39:11 578  
12:39:11 579  /******************************************************************************/
12:39:11 580  
12:39:11 581  PROCEDURE UPDATE_CREDIT_CARD (
12:39:11 582  /*
12:39:11 583  Throws exceptions:
12:39:11 584  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:11 585  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 586  */
12:39:11 587  	in_credit_card_id	  IN NUMBER,
12:39:11 588  	in_updated_by		  IN VARCHAR2,
12:39:11 589  	in_instrument_name	  IN VARCHAR2,
12:39:11 590  	in_is_default		  IN NUMBER
12:39:11 591  ) AS
12:39:11 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
12:39:11 593  -- VARIABLES
12:39:11 594  var_account_id NUMBER;
12:39:11 595  var_group_id   NUMBER;
12:39:11 596  temp_cc_rownum NUMBER;
12:39:11 597  current_def_instrument_type_id NUMBER;
12:39:11 598  current_def_instrument_id      NUMBER;
12:39:11 599  -- EXCEPTION
12:39:11 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
12:39:11 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
12:39:11 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
12:39:11 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
12:39:11 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
12:39:11 605  BEGIN
12:39:11 606  
12:39:11 607  	-- Get account id
12:39:11 608  	SELECT
12:39:11 609  	  CREDIT_CARD.ACCOUNT_ID
12:39:11 610  	  into
12:39:11 611  	  var_account_id
12:39:11 612  	FROM
12:39:11 613  	  CREDIT_CARD
12:39:11 614  	WHERE
12:39:11 615  	  CREDIT_CARD.ID = in_credit_card_id;
12:39:11 616  
12:39:11 617  	-- Get group id
12:39:11 618  	SELECT
12:39:11 619  	  ACCOUNT.GROUP_ID into var_group_id
12:39:11 620  	FROM
12:39:11 621  	  ACCOUNT
12:39:11 622  	WHERE
12:39:11 623  	  ACCOUNT.ID = var_account_id;
12:39:11 624  
12:39:11 625  	-- Check that passed data is correct
12:39:11 626  	IF in_is_default != GLOBAL_CONSTANTS_V16.TRUE
12:39:11 627  	  AND in_is_default != GLOBAL_CONSTANTS_V16.FALSE
12:39:11 628  	  AND in_is_default IS NOT NULL THEN
12:39:11 629  	  RAISE BAD_IS_DEFAULT_VALUE;
12:39:11 630  	END IF;
12:39:11 631  
12:39:11 632  	-- Update credit card
12:39:11 633  	IF in_instrument_name IS NOT NULL THEN
12:39:11 634  	  PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_CREDIT_CARD(
12:39:11 635  	    in_credit_card_id  => in_credit_card_id,
12:39:11 636  	    in_updated_by      => in_updated_by,
12:39:11 637  	    in_instrument_name => in_instrument_name
12:39:11 638  	  );
12:39:11 639  	END IF;
12:39:11 640  
12:39:11 641  	-- Set default financial instrument
12:39:11 642  	IF in_is_default = GLOBAL_CONSTANTS_V16.TRUE THEN
12:39:11 643  	  BEGIN
12:39:11 644  	    PROCS_FIN_INSTRUMENTS_V16.SET_DEF_FINANCIAL_INSTRUMENT(
12:39:11 645  	      in_group_id	    => var_group_id,
12:39:11 646  	      in_instrument_type_id => GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD,
12:39:11 647  	      in_instrument_id	    => in_credit_card_id,
12:39:11 648  	      in_updated_by	    => in_updated_by
12:39:11 649  	    );
12:39:11 650  	    EXCEPTION
12:39:11 651  	      WHEN OTHERS THEN
12:39:11 652  		EXCEPTION_MESSAGE := SQLERRM;
12:39:11 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
12:39:11 654  	  END;
12:39:11 655  	END IF;
12:39:11 656  
12:39:11 657  	-- Set default financial instrument
12:39:11 658  	IF in_is_default = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 659  	  BEGIN
12:39:11 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
12:39:11 661  	      in_group_id	     => var_group_id,
12:39:11 662  	      out_instrument_type_id => current_def_instrument_type_id,
12:39:11 663  	      out_instrument_id      => current_def_instrument_id
12:39:11 664  	    );
12:39:11 665  	  EXCEPTION
12:39:11 666  	    WHEN OTHERS THEN
12:39:11 667  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
12:39:11 669  	  END;
12:39:11 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
12:39:11 671  	    AND current_def_instrument_id = in_credit_card_id THEN
12:39:11 672  	    BEGIN
12:39:11 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
12:39:11 674  		in_group_id => var_group_id
12:39:11 675  	      );
12:39:11 676  	      EXCEPTION
12:39:11 677  		WHEN OTHERS THEN
12:39:11 678  		  EXCEPTION_MESSAGE := SQLERRM;
12:39:11 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
12:39:11 680  	    END;
12:39:11 681  	  END IF;
12:39:11 682  	END IF;
12:39:11 683  
12:39:11 684  EXCEPTION
12:39:11 685  WHEN NO_DATA_FOUND THEN
12:39:11 686  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 687  	  SPROC_NAME, 'No such credit card');
12:39:11 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
12:39:11 689  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
12:39:11 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
12:39:11 692  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
12:39:11 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
12:39:11 695  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
12:39:11 697  WHEN OTHERS THEN
12:39:11 698  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 700  END UPDATE_CREDIT_CARD;
12:39:11 701  
12:39:11 702  /******************************************************************************/
12:39:11 703  
12:39:11 704  PROCEDURE START_GC_PURCHASING (
12:39:11 705  	in_group_id		  IN NUMBER,
12:39:11 706  	in_offer_chain_id	  IN VARCHAR2,
12:39:11 707  	in_gift_certificate_code  IN  VARCHAR2,
12:39:11 708  	in_created_by		  IN  VARCHAR2,
12:39:11 709  	in_recipient_name	  IN  VARCHAR2,
12:39:11 710  	in_recipient_email	  IN  VARCHAR2,
12:39:11 711  	in_recipient_address_id   IN NUMBER,
12:39:11 712  	in_recipient_notify_date  IN DATE,
12:39:11 713  	in_sender_name		  IN VARCHAR2,
12:39:11 714  	in_sender_email 	  IN VARCHAR2,
12:39:11 715  	in_gift_message 	  IN  VARCHAR2,
12:39:11 716  	in_expiration_date	  IN DATE,
12:39:11 717  	out_gift_certificate_id   OUT NUMBER,
12:39:11 718  	out_invoice_id		  OUT NUMBER
12:39:11 719  ) AS
12:39:11 720  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
12:39:11 721  -- VARIABLES
12:39:11 722  var_account_id		NUMBER;
12:39:11 723  temp_gc_code		GIFT_CERTIFICATE.CODE%TYPE;
12:39:11 724  var_och_is_gc		NUMBER;
12:39:11 725  var_offer_chain_status_id NUMBER;
12:39:11 726  var_is_for_redemption	NUMBER;
12:39:11 727  var_new_invoice_id	NUMBER;
12:39:11 728  var_gift_cert_id		NUMBER;
12:39:11 729  var_account_tax_exempt_id VARCHAR2(255);
12:39:11 730  -- EXCEPTIONS
12:39:11 731  BAD_GROUP_ID		    EXCEPTION;
12:39:11 732  GC_CODE_ALREADY_EXISTS	    EXCEPTION;
12:39:11 733  BAD_OFFER_CHAIN_ID	    EXCEPTION;
12:39:11 734  OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
12:39:11 735  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
12:39:11 736  CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
12:39:11 737  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
12:39:11 738  OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
12:39:11 739  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
12:39:11 740  
12:39:11 741  EXCEPTION_MESSAGE VARCHAR2(1024);
12:39:11 742  BEGIN
12:39:11 743  	-- Get account id
12:39:11 744  	BEGIN
12:39:11 745  	  SELECT
12:39:11 746  	    ACCOUNT.ID,
12:39:11 747  	    ACCOUNT.TAX_EXEMPT_ID
12:39:11 748  	    into
12:39:11 749  	    var_account_id,
12:39:11 750  	    var_account_tax_exempt_id
12:39:11 751  	  FROM
12:39:11 752  	    ACCOUNT
12:39:11 753  	  WHERE
12:39:11 754  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:11 755  	  EXCEPTION
12:39:11 756  	  WHEN NO_DATA_FOUND THEN
12:39:11 757  	    RAISE BAD_GROUP_ID;
12:39:11 758  	END;
12:39:11 759  
12:39:11 760  	-- Check for the same code
12:39:11 761  	BEGIN
12:39:11 762  	  SELECT
12:39:11 763  	    GIFT_CERTIFICATE.CODE into temp_gc_code
12:39:11 764  	  FROM
12:39:11 765  	    GIFT_CERTIFICATE
12:39:11 766  	  WHERE
12:39:11 767  	    GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
12:39:11 768  
12:39:11 769  	  RAISE GC_CODE_ALREADY_EXISTS;
12:39:11 770  
12:39:11 771  	  EXCEPTION
12:39:11 772  	    WHEN NO_DATA_FOUND THEN
12:39:11 773  	      NULL;
12:39:11 774  	END;
12:39:11 775  
12:39:11 776  	-- Get offer chain flag "is_gift_certificate"
12:39:11 777  	BEGIN
12:39:11 778  	  SELECT
12:39:11 779  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE,
12:39:11 780  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
12:39:11 781  	    into
12:39:11 782  	    var_och_is_gc,
12:39:11 783  	    var_offer_chain_status_id
12:39:11 784  	  FROM
12:39:11 785  	    OFFER_CHAIN
12:39:11 786  	  WHERE
12:39:11 787  	    OFFER_CHAIN.ID = in_offer_chain_id;
12:39:11 788  	  EXCEPTION
12:39:11 789  	  WHEN NO_DATA_FOUND THEN
12:39:11 790  	    RAISE BAD_OFFER_CHAIN_ID;
12:39:11 791  	END;
12:39:11 792  
12:39:11 793  	IF var_och_is_gc != GLOBAL_CONSTANTS_V16.TRUE
12:39:11 794  	  OR var_och_is_gc IS NULL THEN
12:39:11 795  	  RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
12:39:11 796  	END IF;
12:39:11 797  
12:39:11 798  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
12:39:11 799  	  RAISE BAD_OFFER_CHAIN_STATUS;
12:39:11 800  	END IF;
12:39:11 801  
12:39:11 802  	-- norlov: #38151 check if the OC is for Redemption:
12:39:11 803  	SELECT
12:39:11 804  	  COUNT(*) into var_is_for_redemption
12:39:11 805  	FROM
12:39:11 806  	  OFFER_CHAIN_ELIGIBILITY
12:39:11 807  	WHERE
12:39:11 808  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 809  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
12:39:11 810  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
12:39:11 811  
12:39:11 812  	IF var_is_for_redemption > 0 THEN
12:39:11 813  	  RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
12:39:11 814  	END IF;
12:39:11 815  
12:39:11 816  	-- Create new invoice
12:39:11 817  	BEGIN
12:39:11 818  	  PROCS_INVOICE_V16.CREATE_INVOICE(
12:39:11 819  	    in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
12:39:11 820  	    in_created_by     => in_created_by,
12:39:11 821  	    in_tax_exempt_id  => var_account_tax_exempt_id,
12:39:11 822  	    out_invoice_id    => var_new_invoice_id
12:39:11 823  	  );
12:39:11 824  	  EXCEPTION
12:39:11 825  	    WHEN OTHERS THEN
12:39:11 826  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 827  	      RAISE CAN_NOT_CREATE_INVOICE;
12:39:11 828  	END;
12:39:11 829  
12:39:11 830  	-- Add line items for new invoice
12:39:11 831  	BEGIN
12:39:11 832  	  FOR f_offer_data IN (
12:39:11 833  	    SELECT
12:39:11 834  	      OFFER_ID,
12:39:11 835  	      NUM_RECURRENCES
12:39:11 836  	    FROM
12:39:11 837  	      OFFER_OFFER_CHAIN
12:39:11 838  	    WHERE
12:39:11 839  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 840  	  )
12:39:11 841  	  LOOP
12:39:11 842  	    IF f_offer_data.NUM_RECURRENCES < 1 THEN
12:39:11 843  	      RAISE OFFER_REC_NUM_LESS_THAN_ONE;
12:39:11 844  	    END IF;
12:39:11 845  	    FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
12:39:11 846  	    LOOP
12:39:11 847  	      PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
12:39:11 848  		in_invoice_id => var_new_invoice_id,
12:39:11 849  		in_offer_id   => f_offer_data.OFFER_ID,
12:39:11 850  		in_created_by => in_created_by
12:39:11 851  	      );
12:39:11 852  	    END LOOP;
12:39:11 853  	  END LOOP;
12:39:11 854  
12:39:11 855  	  EXCEPTION
12:39:11 856  	    WHEN OTHERS THEN
12:39:11 857  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 858  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
12:39:11 859  	END;
12:39:11 860  
12:39:11 861  	PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_GIFT_CERTIFICATE(
12:39:11 862  	  out_gift_certificate_id	=> var_gift_cert_id,
12:39:11 863  	  in_purchaser_group_id 	=> in_group_id,
12:39:11 864  	  in_purchaser_invoice_id	=> var_new_invoice_id,
12:39:11 865  	  in_offer_chain_id		=> in_offer_chain_id,
12:39:11 866  	  in_expiration_date		=> in_expiration_date,
12:39:11 867  	  in_purchase_date		=> SYSDATE,
12:39:11 868  	  in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE,
12:39:11 869  	  in_code			=> in_gift_certificate_code,
12:39:11 870  	  in_created_by 		=> in_created_by,
12:39:11 871  	  in_recipient_name		=> in_recipient_name,
12:39:11 872  	  in_gift_message		=> in_gift_message,
12:39:11 873  	  in_recipient_email		=> in_recipient_email,
12:39:11 874  	  in_sender_email		=> in_sender_email,
12:39:11 875  	  in_sender_name		=> in_sender_name,
12:39:11 876  	  in_recipient_address_id	=> in_recipient_address_id,
12:39:11 877  	  in_recipient_notify_date	=> in_recipient_notify_date
12:39:11 878  	);
12:39:11 879  
12:39:11 880  	out_gift_certificate_id := var_gift_cert_id;
12:39:11 881  	out_invoice_id := var_new_invoice_id;
12:39:11 882  
12:39:11 883  EXCEPTION
12:39:11 884  WHEN BAD_OFFER_CHAIN_STATUS THEN
12:39:11 885  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 886  	  SPROC_NAME, 'Offer chain is not active');
12:39:11 887  WHEN GC_CODE_ALREADY_EXISTS THEN
12:39:11 888  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:11 889  	  SPROC_NAME, 'Gift certificate with same code already exists');
12:39:11 890  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
12:39:11 891  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 892  	  SPROC_NAME, 'This offer chain can not be used for gift certificate');
12:39:11 893  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
12:39:11 894  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 895  	  SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
12:39:11 896  WHEN CAN_NOT_CREATE_INVOICE THEN
12:39:11 897  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 898  	  SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
12:39:11 899  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
12:39:11 900  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 901  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
12:39:11 902  WHEN BAD_GROUP_ID THEN
12:39:11 903  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 904  	  SPROC_NAME, 'No such group id');
12:39:11 905  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:11 906  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 907  	  SPROC_NAME, 'No such offer chain');
12:39:11 908  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
12:39:11 909  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 910  	  SPROC_NAME, 'Some offer has recurrences number less than 1');
12:39:11 911  WHEN OTHERS THEN
12:39:11 912  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 913  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 914  END START_GC_PURCHASING;
12:39:11 915  
12:39:11 916  /******************************************************************************/
12:39:11 917  
12:39:11 918  PROCEDURE FINALIZE_GC_PURCHASING (
12:39:11 919  	in_invoice_id	      IN NUMBER,
12:39:11 920  	in_created_by	      IN VARCHAR2,
12:39:11 921  	in_instrument_id      IN NUMBER,
12:39:11 922  	in_instrument_type_id IN NUMBER,
12:39:11 923  	in_order_id	      IN VARCHAR2,
12:39:11 924  	in_transaction_id     IN NUMBER,
12:39:11 925  	out_charge_amount     OUT NUMBER
12:39:11 926  ) AS
12:39:11 927  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
12:39:11 928  -- VARIABLES
12:39:11 929  temp_transaction_id_count NUMBER;
12:39:11 930  var_invoice_amount	NUMBER(10,2);
12:39:11 931  var_transaction_id	NUMBER;
12:39:11 932  var_new_charge_id 	NUMBER;
12:39:11 933  -- EXCEPTIONS
12:39:11 934  BAD_CREDIT_CARD_ID	  EXCEPTION;
12:39:11 935  BAD_PAYPAL_ID		  EXCEPTION;
12:39:11 936  BAD_INSTRUMENT_TYPE	  EXCEPTION;
12:39:11 937  TRANSACTION_EXISTS	  EXCEPTION;
12:39:11 938  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
12:39:11 939  CAN_NOT_USE_FCINSTR	  EXCEPTION;
12:39:11 940  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
12:39:11 941  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
12:39:11 942  EXCEPTION_MESSAGE   VARCHAR2(1024);
12:39:11 943  BEGIN
12:39:11 944  
12:39:11 945  	-- Check that instrument exists
12:39:11 946  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
12:39:11 947  	  IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 948  	    RAISE BAD_CREDIT_CARD_ID;
12:39:11 949  	  END IF;
12:39:11 950  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
12:39:11 951  	  IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 952  	    RAISE BAD_PAYPAL_ID;
12:39:11 953  	  END IF;
12:39:11 954  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
12:39:11 955  	  NULL;
12:39:11 956  	ELSE
12:39:11 957  	  RAISE BAD_INSTRUMENT_TYPE;
12:39:11 958  	END IF;
12:39:11 959  
12:39:11 960  	-- Check that transaction with given id do not exists
12:39:11 961  	SELECT
12:39:11 962  	  COUNT(*) into temp_transaction_id_count
12:39:11 963  	FROM
12:39:11 964  	  TRANSACTION
12:39:11 965  	WHERE
12:39:11 966  	  TRANSACTION.ID = in_transaction_id;
12:39:11 967  
12:39:11 968  	IF temp_transaction_id_count > 0 THEN
12:39:11 969  	  RAISE TRANSACTION_EXISTS;
12:39:11 970  	END IF;
12:39:11 971  
12:39:11 972  	-- Calculate new invoice amount
12:39:11 973  	BEGIN
12:39:11 974  	  PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
12:39:11 975  	  EXCEPTION
12:39:11 976  	    WHEN OTHERS THEN
12:39:11 977  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:11 978  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
12:39:11 979  	END;
12:39:11 980  
12:39:11 981  	IF var_invoice_amount > 0
12:39:11 982  	  AND in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
12:39:11 983  	  RAISE CAN_NOT_USE_FCINSTR;
12:39:11 984  	END IF;
12:39:11 985  
12:39:11 986  	-- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
12:39:11 987  	IF var_invoice_amount = 0 THEN
12:39:11 988  	  PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
12:39:11 989  	    in_invoice_id		   => in_invoice_id,
12:39:11 990  	    in_updated_by		   => in_created_by,
12:39:11 991  	    in_invoice_status_id	   => GLOBAL_STATUSES_V16.INVOICE_CLOSED
12:39:11 992  	  );
12:39:11 993  	END IF;
12:39:11 994  
12:39:11 995  	IF var_invoice_amount > 0 THEN
12:39:11 996  	  -- Create transaction
12:39:11 997  	  BEGIN
12:39:11 998  	    PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
12:39:11 999  	      in_transaction_id  => in_transaction_id,
12:39:11 1000  	       in_status_id	  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
12:39:11 1001  	       in_amount	  => var_invoice_amount,
12:39:11 1002  	       in_created_by	  => in_created_by,
12:39:11 1003  	       in_order_id	  => in_order_id,
12:39:11 1004  	       out_transaction_id => var_transaction_id
12:39:11 1005  	     );
12:39:11 1006  	     EXCEPTION
12:39:11 1007  	       WHEN OTHERS THEN
12:39:11 1008  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1009  		 RAISE CAN_NOT_CREATE_TRANSACTION;
12:39:11 1010  	   END;
12:39:11 1011  
12:39:11 1012  	   -- Create charge
12:39:11 1013  	   BEGIN
12:39:11 1014  	     PROCS_CHARGE_V16.CREATE_CHARGE(
12:39:11 1015  	       in_invoice_id	     => in_invoice_id,
12:39:11 1016  	       in_transaction_id     => var_transaction_id,
12:39:11 1017  	       in_instrument_type_id => in_instrument_type_id,
12:39:11 1018  	       in_instrument_id      => in_instrument_id,
12:39:11 1019  	       in_charge_amount      => var_invoice_amount,
12:39:11 1020  	       in_created_by	     => in_created_by,
12:39:11 1021  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
12:39:11 1022  	       out_charge_id	     => var_new_charge_id
12:39:11 1023  	     );
12:39:11 1024  	     out_charge_amount := var_invoice_amount;
12:39:11 1025  	     EXCEPTION
12:39:11 1026  	       WHEN OTHERS THEN
12:39:11 1027  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1028  		 RAISE CAN_NOT_CREATE_CHARGE;
12:39:11 1029  	   END;
12:39:11 1030  	 ELSE
12:39:11 1031  	   out_charge_amount := 0;
12:39:11 1032  	 END IF;
12:39:11 1033  
12:39:11 1034  EXCEPTION
12:39:11 1035  WHEN CAN_NOT_USE_FCINSTR THEN
12:39:11 1036  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1037  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
12:39:11 1038  WHEN BAD_CREDIT_CARD_ID THEN
12:39:11 1039  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1040  	   SPROC_NAME, 'Bad credit card id');
12:39:11 1041  WHEN BAD_PAYPAL_ID THEN
12:39:11 1042  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1043  	   SPROC_NAME, 'Bad paypal id');
12:39:11 1044  WHEN BAD_INSTRUMENT_TYPE THEN
12:39:11 1045  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1046  	   SPROC_NAME, 'Bad instrument type');
12:39:11 1047  WHEN TRANSACTION_EXISTS THEN
12:39:11 1048  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:11 1049  	   SPROC_NAME, 'Transaction with given id already exists');
12:39:11 1050  WHEN CAN_NOT_CREATE_TRANSACTION THEN
12:39:11 1051  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1052  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
12:39:11 1053  WHEN CAN_NOT_CREATE_CHARGE THEN
12:39:11 1054  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1055  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
12:39:11 1056  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
12:39:11 1057  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1058  	   SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
12:39:11 1059  WHEN OTHERS THEN
12:39:11 1060  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1061  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1062  END FINALIZE_GC_PURCHASING;
12:39:11 1063  
12:39:11 1064  /******************************************************************************/
12:39:11 1065  
12:39:11 1066  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
12:39:11 1067  	 in_group_id		   IN NUMBER,
12:39:11 1068  	 in_offer_chain_id	   IN VARCHAR2,
12:39:11 1069  	 in_gift_certificate_code  IN VARCHAR2,
12:39:11 1070  	 in_created_by		   IN VARCHAR2,
12:39:11 1071  	 in_recipient_name	   IN VARCHAR2,
12:39:11 1072  	 in_recipient_email	   IN VARCHAR2,
12:39:11 1073  	 in_sender_name 	   IN VARCHAR2,
12:39:11 1074  	 in_sender_email	   IN VARCHAR2,
12:39:11 1075  	 in_gift_message	   IN VARCHAR2,
12:39:11 1076  	 in_instrument_id	   IN NUMBER,
12:39:11 1077  	 in_instrument_type_id	   IN NUMBER,
12:39:11 1078  	 in_expiration_date	   IN DATE,
12:39:11 1079  	 in_order_id		   IN VARCHAR2,
12:39:11 1080  	 in_transaction_id	   IN NUMBER
12:39:11 1081  ) AS
12:39:11 1082  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
12:39:11 1083  -- VARIABLES
12:39:11 1084  var_gift_cert_id   NUMBER;
12:39:11 1085  var_account_id	  NUMBER;
12:39:11 1086  var_invoice_amount NUMBER (10,2);
12:39:11 1087  var_new_invoice_id NUMBER;
12:39:11 1088  var_new_charge_id  NUMBER;
12:39:11 1089  var_och_is_gc	  NUMBER;
12:39:11 1090  var_offer_chain_status_id NUMBER;
12:39:11 1091  var_is_for_redemption	 NUMBER;
12:39:11 1092  var_account_tax_exempt_id VARCHAR2(255);
12:39:11 1093  
12:39:11 1094  temp_transaction_id_count NUMBER;
12:39:11 1095  var_transaction_id	 NUMBER;
12:39:11 1096  temp_gc_code VARCHAR2(255);
12:39:11 1097  
12:39:11 1098  var_invoice_status_id NUMBER;
12:39:11 1099  -- EXCEPTIONS
12:39:11 1100  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
12:39:11 1101  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
12:39:11 1102  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
12:39:11 1103  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
12:39:11 1104  BAD_GROUP_ID			   EXCEPTION;
12:39:11 1105  BAD_OFFER_CHAIN_ID		   EXCEPTION;
12:39:11 1106  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
12:39:11 1107  TRANSACTION_EXISTS		   EXCEPTION;
12:39:11 1108  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
12:39:11 1109  BAD_INSTRUMENT_TYPE		   EXCEPTION;
12:39:11 1110  BAD_CREDIT_CARD_ID		   EXCEPTION;
12:39:11 1111  BAD_PAYPAL_ID			   EXCEPTION;
12:39:11 1112  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
12:39:11 1113  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
12:39:11 1114  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
12:39:11 1115  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
12:39:11 1116  CAN_NOT_USE_FCINSTR		   EXCEPTION;
12:39:11 1117  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
12:39:11 1118  EXCEPTION_MESSAGE		   VARCHAR2(1024);
12:39:11 1119  BEGIN
12:39:11 1120  
12:39:11 1121  	 -- Get account id
12:39:11 1122  	 BEGIN
12:39:11 1123  	   SELECT
12:39:11 1124  	     ACCOUNT.ID,
12:39:11 1125  	     ACCOUNT.TAX_EXEMPT_ID
12:39:11 1126  	     into
12:39:11 1127  	     var_account_id,
12:39:11 1128  	     var_account_tax_exempt_id
12:39:11 1129  	   FROM
12:39:11 1130  	     ACCOUNT
12:39:11 1131  	   WHERE
12:39:11 1132  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:11 1133  	   EXCEPTION
12:39:11 1134  	   WHEN NO_DATA_FOUND THEN
12:39:11 1135  	     RAISE BAD_GROUP_ID;
12:39:11 1136  	 END;
12:39:11 1137  
12:39:11 1138  	 -- Check that instrument exists
12:39:11 1139  	 IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
12:39:11 1140  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 1141  	     RAISE BAD_CREDIT_CARD_ID;
12:39:11 1142  	   END IF;
12:39:11 1143  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
12:39:11 1144  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 1145  	     RAISE BAD_PAYPAL_ID;
12:39:11 1146  	   END IF;
12:39:11 1147  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
12:39:11 1148  	   NULL;
12:39:11 1149  	 ELSE
12:39:11 1150  	   RAISE BAD_INSTRUMENT_TYPE;
12:39:11 1151  	 END IF;
12:39:11 1152  
12:39:11 1153  	 -- Check for the same code
12:39:11 1154  	 BEGIN
12:39:11 1155  	   SELECT
12:39:11 1156  	     GIFT_CERTIFICATE.CODE into temp_gc_code
12:39:11 1157  	   FROM
12:39:11 1158  	     GIFT_CERTIFICATE
12:39:11 1159  	   WHERE
12:39:11 1160  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
12:39:11 1161  
12:39:11 1162  	   RAISE GC_CODE_ALREADY_EXISTS;
12:39:11 1163  
12:39:11 1164  	   EXCEPTION
12:39:11 1165  	     WHEN NO_DATA_FOUND THEN
12:39:11 1166  	       NULL;
12:39:11 1167  	 END;
12:39:11 1168  
12:39:11 1169  	 -- Get offer chain flag "is_gift_certificate"
12:39:11 1170  	 BEGIN
12:39:11 1171  	   SELECT
12:39:11 1172  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
12:39:11 1173  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
12:39:11 1174  	     into
12:39:11 1175  	     var_och_is_gc,
12:39:11 1176  	     var_offer_chain_status_id
12:39:11 1177  	   FROM
12:39:11 1178  	     OFFER_CHAIN
12:39:11 1179  	   WHERE
12:39:11 1180  	     OFFER_CHAIN.ID = in_offer_chain_id;
12:39:11 1181  	   EXCEPTION
12:39:11 1182  	   WHEN NO_DATA_FOUND THEN
12:39:11 1183  	     RAISE BAD_OFFER_CHAIN_ID;
12:39:11 1184  	 END;
12:39:11 1185  
12:39:11 1186  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V16.TRUE
12:39:11 1187  	   OR var_och_is_gc IS NULL THEN
12:39:11 1188  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
12:39:11 1189  	 END IF;
12:39:11 1190  
12:39:11 1191  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
12:39:11 1192  	   RAISE BAD_OFFER_CHAIN_STATUS;
12:39:11 1193  	 END IF;
12:39:11 1194  
12:39:11 1195  	 -- norlov: #38151 check if the OC is for Redemption:
12:39:11 1196  	 SELECT
12:39:11 1197  	   COUNT(*) into var_is_for_redemption
12:39:11 1198  	 FROM
12:39:11 1199  	   OFFER_CHAIN_ELIGIBILITY
12:39:11 1200  	 WHERE
12:39:11 1201  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 1202  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
12:39:11 1203  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
12:39:11 1204  
12:39:11 1205  	 IF var_is_for_redemption > 0 THEN
12:39:11 1206  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
12:39:11 1207  	 END IF;
12:39:11 1208  
12:39:11 1209  	 -- Check that transaction with given id do not exists
12:39:11 1210  	 SELECT
12:39:11 1211  	   COUNT(*) into temp_transaction_id_count
12:39:11 1212  	 FROM
12:39:11 1213  	   TRANSACTION
12:39:11 1214  	 WHERE
12:39:11 1215  	   TRANSACTION.ID = in_transaction_id;
12:39:11 1216  
12:39:11 1217  	 IF temp_transaction_id_count > 0 THEN
12:39:11 1218  	   RAISE TRANSACTION_EXISTS;
12:39:11 1219  	 END IF;
12:39:11 1220  
12:39:11 1221  	 -- Create new invoice
12:39:11 1222  	 BEGIN
12:39:11 1223  	   PROCS_INVOICE_V16.CREATE_INVOICE(
12:39:11 1224  	     in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
12:39:11 1225  	     in_created_by     => in_created_by,
12:39:11 1226  	     in_tax_exempt_id  => var_account_tax_exempt_id,
12:39:11 1227  	     out_invoice_id    => var_new_invoice_id
12:39:11 1228  	   );
12:39:11 1229  	   EXCEPTION
12:39:11 1230  	     WHEN OTHERS THEN
12:39:11 1231  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1232  	       RAISE CAN_NOT_CREATE_INVOICE;
12:39:11 1233  	 END;
12:39:11 1234  
12:39:11 1235  	 -- Add line items for new invoice
12:39:11 1236  	 BEGIN
12:39:11 1237  	   FOR f_offer_data IN (
12:39:11 1238  	     SELECT
12:39:11 1239  	       OFFER_ID,
12:39:11 1240  	       NUM_RECURRENCES
12:39:11 1241  	     FROM
12:39:11 1242  	       OFFER_OFFER_CHAIN
12:39:11 1243  	     WHERE
12:39:11 1244  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
12:39:11 1245  	   )
12:39:11 1246  	   LOOP
12:39:11 1247  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
12:39:11 1248  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
12:39:11 1249  	     END IF;
12:39:11 1250  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
12:39:11 1251  	     LOOP
12:39:11 1252  	       PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
12:39:11 1253  		 in_invoice_id => var_new_invoice_id,
12:39:11 1254  		 in_offer_id   => f_offer_data.OFFER_ID,
12:39:11 1255  		 in_created_by => in_created_by
12:39:11 1256  	       );
12:39:11 1257  	     END LOOP;
12:39:11 1258  	   END LOOP;
12:39:11 1259  
12:39:11 1260  	   EXCEPTION
12:39:11 1261  	     WHEN OTHERS THEN
12:39:11 1262  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1263  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
12:39:11 1264  	 END;
12:39:11 1265  
12:39:11 1266  	 -- Calculate new invoice amount
12:39:11 1267  	 BEGIN
12:39:11 1268  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
12:39:11 1269  	   EXCEPTION
12:39:11 1270  	     WHEN OTHERS THEN
12:39:11 1271  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1272  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
12:39:11 1273  	 END;
12:39:11 1274  
12:39:11 1275  	 IF var_invoice_amount > 0
12:39:11 1276  	   AND in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
12:39:11 1277  	   RAISE CAN_NOT_USE_FCINSTR;
12:39:11 1278  	 END IF;
12:39:11 1279  
12:39:11 1280  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
12:39:11 1281  	 IF var_invoice_amount = 0 THEN
12:39:11 1282  	   PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
12:39:11 1283  	     in_invoice_id		    => var_new_invoice_id,
12:39:11 1284  	     in_updated_by		    => in_created_by,
12:39:11 1285  	     in_invoice_status_id	    => GLOBAL_STATUSES_V16.INVOICE_CLOSED
12:39:11 1286  	   );
12:39:11 1287  	 END IF;
12:39:11 1288  
12:39:11 1289  	 IF var_invoice_amount > 0 THEN
12:39:11 1290  	   -- Create transaction
12:39:11 1291  	   BEGIN
12:39:11 1292  	     PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
12:39:11 1293  	       in_transaction_id  => in_transaction_id,
12:39:11 1294  	       in_status_id	  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
12:39:11 1295  	       in_amount	  => var_invoice_amount,
12:39:11 1296  	       in_created_by	  => in_created_by,
12:39:11 1297  	       in_order_id	  => in_order_id,
12:39:11 1298  	       out_transaction_id => var_transaction_id
12:39:11 1299  	     );
12:39:11 1300  	     EXCEPTION
12:39:11 1301  	       WHEN OTHERS THEN
12:39:11 1302  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1303  		 RAISE CAN_NOT_CREATE_TRANSACTION;
12:39:11 1304  	   END;
12:39:11 1305  
12:39:11 1306  	   -- Create charge
12:39:11 1307  	   BEGIN
12:39:11 1308  	     PROCS_CHARGE_V16.CREATE_CHARGE(
12:39:11 1309  	       in_invoice_id	     => var_new_invoice_id,
12:39:11 1310  	       in_transaction_id     => var_transaction_id,
12:39:11 1311  	       in_instrument_type_id => in_instrument_type_id,
12:39:11 1312  	       in_instrument_id      => in_instrument_id,
12:39:11 1313  	       in_charge_amount      => var_invoice_amount,
12:39:11 1314  	       in_created_by	     => in_created_by,
12:39:11 1315  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
12:39:11 1316  	       out_charge_id	     => var_new_charge_id
12:39:11 1317  	     );
12:39:11 1318  	     EXCEPTION
12:39:11 1319  	       WHEN OTHERS THEN
12:39:11 1320  		 EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1321  		 RAISE CAN_NOT_CREATE_CHARGE;
12:39:11 1322  	   END;
12:39:11 1323  	 END IF;
12:39:11 1324  
12:39:11 1325  	 -- Create new row in GIFT_CERTIFICATE table
12:39:11 1326  	 PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_GIFT_CERTIFICATE(
12:39:11 1327  	   out_gift_certificate_id	 => var_gift_cert_id,
12:39:11 1328  	   in_purchaser_group_id	 => in_group_id,
12:39:11 1329  	   in_purchaser_invoice_id	 => var_new_invoice_id,
12:39:11 1330  	   in_offer_chain_id		 => in_offer_chain_id,
12:39:11 1331  	   in_expiration_date		 => in_expiration_date,
12:39:11 1332  	   in_purchase_date		 => SYSDATE,
12:39:11 1333  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE,
12:39:11 1334  	   in_code			 => in_gift_certificate_code,
12:39:11 1335  	   in_created_by		 => in_created_by,
12:39:11 1336  	   in_recipient_name		 => in_recipient_name,
12:39:11 1337  	   in_gift_message		 => in_gift_message,
12:39:11 1338  	   in_recipient_email		 => in_recipient_email,
12:39:11 1339  	   in_sender_email		 => in_sender_email,
12:39:11 1340  	   in_sender_name		 => in_sender_name
12:39:11 1341  	 );
12:39:11 1342  
12:39:11 1343  EXCEPTION
12:39:11 1344  WHEN CAN_NOT_USE_FCINSTR THEN
12:39:11 1345  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1346  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
12:39:11 1347  WHEN BAD_OFFER_CHAIN_STATUS THEN
12:39:11 1348  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1349  	   SPROC_NAME, 'Offer chain is not active');
12:39:11 1350  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
12:39:11 1351  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1352  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
12:39:11 1353  WHEN BAD_CREDIT_CARD_ID THEN
12:39:11 1354  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1355  	   SPROC_NAME, 'Bad credit card id');
12:39:11 1356  WHEN BAD_PAYPAL_ID THEN
12:39:11 1357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1358  	   SPROC_NAME, 'Bad paypal id');
12:39:11 1359  WHEN BAD_INSTRUMENT_TYPE THEN
12:39:11 1360  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1361  	   SPROC_NAME, 'Bad instrument type');
12:39:11 1362  WHEN GC_CODE_ALREADY_EXISTS THEN
12:39:11 1363  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:11 1364  	   SPROC_NAME, 'Gift certificate with same code already exists');
12:39:11 1365  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
12:39:11 1366  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1367  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
12:39:11 1368  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
12:39:11 1369  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1370  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
12:39:11 1371  WHEN TRANSACTION_EXISTS THEN
12:39:11 1372  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:11 1373  	   SPROC_NAME, 'Transaction with given id already exists');
12:39:11 1374  WHEN CAN_NOT_CREATE_INVOICE THEN
12:39:11 1375  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1376  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
12:39:11 1377  WHEN CAN_NOT_CREATE_TRANSACTION THEN
12:39:11 1378  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1379  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
12:39:11 1380  WHEN CAN_NOT_CREATE_CHARGE THEN
12:39:11 1381  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1382  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
12:39:11 1383  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
12:39:11 1384  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1385  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
12:39:11 1386  WHEN BAD_GROUP_ID THEN
12:39:11 1387  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1388  	   SPROC_NAME, 'No such group id');
12:39:11 1389  WHEN BAD_OFFER_CHAIN_ID THEN
12:39:11 1390  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1391  	   SPROC_NAME, 'No such offer chain');
12:39:11 1392  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
12:39:11 1393  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1394  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
12:39:11 1395  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
12:39:11 1396  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1397  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
12:39:11 1398  WHEN OTHERS THEN
12:39:11 1399  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1400  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1401  END PURCHASE_GIFT_CERTIFICATE;
12:39:11 1402  
12:39:11 1403  /******************************************************************************/
12:39:11 1404  
12:39:11 1405  PROCEDURE REDEEM_GIFT_CERTIFICATE (
12:39:11 1406  	 in_group_id			 IN NUMBER,
12:39:11 1407  	 in_gift_certificate_code	 IN VARCHAR2,
12:39:11 1408  	 in_created_by			 IN VARCHAR2,
12:39:11 1409  	 in_redeemer_address_id 	 IN NUMBER,
12:39:11 1410  	 in_fin_instrument_id		 IN NUMBER,
12:39:11 1411  	 in_fin_instrument_type_id	 IN NUMBER,
12:39:11 1412  	 in_redemption_offer_chain_id	 IN NUMBER,
12:39:11 1413  	 out_subscription_id		 OUT NUMBER,
12:39:11 1414  	 out_license_id 		 OUT NUMBER
12:39:11 1415  ) AS
12:39:11 1416  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
12:39:11 1417  -- VARIABLES
12:39:11 1418  var_gift_certificate_id NUMBER;
12:39:11 1419  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
12:39:11 1420  var_purchased_oc_id     NUMBER;
12:39:11 1421  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
12:39:11 1422  var_offer_duration      VARCHAR2(30);
12:39:11 1423  var_invoice_id	       NUMBER;
12:39:11 1424  var_succ_purch_attempts_num NUMBER;
12:39:11 1425  var_subscription_id     NUMBER;
12:39:11 1426  var_license_id	       NUMBER;
12:39:11 1427  var_account_id	       NUMBER;
12:39:11 1428  var_gc_status_id        NUMBER;
12:39:11 1429  var_gc_charges_amount   NUMBER;
12:39:11 1430  var_gc_expiration_date  DATE;
12:39:11 1431  var_gc_redeemer_group_id NUMBER;
12:39:11 1432  var_gc_purchase_invoice_id NUMBER;
12:39:11 1433  var_gc_purchase_inv_status_id NUMBER;
12:39:11 1434  var_offer_index		     NUMBER;
12:39:11 1435  var_purchaser_group_id	     NUMBER;
12:39:11 1436  temp_license_id		     NUMBER;
12:39:11 1437  var_same_offer_chains_num     NUMBER;
12:39:11 1438  var_max_concurrent_subscrs    NUMBER;
12:39:11 1439  var_account_tax_exempt_id     VARCHAR2(255);
12:39:11 1440  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
12:39:11 1441  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
12:39:11 1442  var_first_offer_id	  NUMBER;
12:39:11 1443  var_date 	     DATE := SYSDATE;
12:39:11 1444  
12:39:11 1445  var_offers SYS_REFCURSOR;
12:39:11 1446  
12:39:11 1447  -- EXCEPTIONS
12:39:11 1448  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
12:39:11 1449  BAD_GROUP_ID		      EXCEPTION;
12:39:11 1450  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
12:39:11 1451  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
12:39:11 1452  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
12:39:11 1453  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
12:39:11 1454  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
12:39:11 1455  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
12:39:11 1456  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
12:39:11 1457  LIMIT_REACHED		      EXCEPTION;
12:39:11 1458  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
12:39:11 1459  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
12:39:11 1460  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
12:39:11 1461  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
12:39:11 1462  EXCEPTION_MESSAGE	      VARCHAR2(1024);
12:39:11 1463  BEGIN
12:39:11 1464  
12:39:11 1465  	 -- Get account id
12:39:11 1466  	 BEGIN
12:39:11 1467  	   SELECT
12:39:11 1468  	     ACCOUNT.ID,
12:39:11 1469  	     ACCOUNT.TAX_EXEMPT_ID
12:39:11 1470  	     into
12:39:11 1471  	     var_account_id,
12:39:11 1472  	     var_account_tax_exempt_id
12:39:11 1473  	   FROM
12:39:11 1474  	     ACCOUNT
12:39:11 1475  	   WHERE
12:39:11 1476  	     ACCOUNT.GROUP_ID = in_group_id
12:39:11 1477  	     AND ROWNUM <= 1;
12:39:11 1478  
12:39:11 1479  	   EXCEPTION
12:39:11 1480  	   WHEN NO_DATA_FOUND THEN
12:39:11 1481  	     RAISE BAD_GROUP_ID;
12:39:11 1482  	 END;
12:39:11 1483  
12:39:11 1484  	 -- Get gift certificate data
12:39:11 1485  	 BEGIN
12:39:11 1486  	   SELECT
12:39:11 1487  	     GIFT_CERTIFICATE.ID,
12:39:11 1488  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
12:39:11 1489  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
12:39:11 1490  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
12:39:11 1491  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
12:39:11 1492  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
12:39:11 1493  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
12:39:11 1494  	     into
12:39:11 1495  	     var_gift_certificate_id,
12:39:11 1496  	     var_purchased_oc_id,
12:39:11 1497  	     var_gc_status_id,
12:39:11 1498  	     var_purchaser_group_id,
12:39:11 1499  	     var_gc_expiration_date,
12:39:11 1500  	     var_gc_redeemer_group_id,
12:39:11 1501  	     var_gc_purchase_invoice_id
12:39:11 1502  	   FROM
12:39:11 1503  	     GIFT_CERTIFICATE
12:39:11 1504  	   WHERE
12:39:11 1505  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
12:39:11 1506  	     AND ROWNUM <= 1;
12:39:11 1507  
12:39:11 1508  	   EXCEPTION
12:39:11 1509  	   WHEN NO_DATA_FOUND THEN
12:39:11 1510  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
12:39:11 1511  	 END;
12:39:11 1512  
12:39:11 1513  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
12:39:11 1514  	 -- but in that case a redemption offer chain id should always be passed in
12:39:11 1515  	 IF var_oc_id_to_redeem IS NULL THEN
12:39:11 1516  	   BEGIN
12:39:11 1517  	     SELECT
12:39:11 1518  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
12:39:11 1519  	       into
12:39:11 1520  	       var_oc_id_to_redeem
12:39:11 1521  	     FROM
12:39:11 1522  	       OFFER_CHAIN_META_DATA
12:39:11 1523  	     WHERE
12:39:11 1524  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
12:39:11 1525  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V16.REDEMPTION_OC_ID
12:39:11 1526  	       AND ROWNUM = 1;
12:39:11 1527  -- requested by ticket so (but above is correct for the actual migrated data):
12:39:11 1528  --  SELECT
12:39:11 1529  --      OFFER_CHAIN.ID
12:39:11 1530  --      into
12:39:11 1531  --      var_oc_id_to_redeem
12:39:11 1532  --    FROM
12:39:11 1533  --      OFFER_CHAIN
12:39:11 1534  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
12:39:11 1535  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
12:39:11 1536  --    WHERE
12:39:11 1537  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:11 1538  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
12:39:11 1539  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET
12:39:11 1540  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:11 1541  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V16.REDEMPTION_OC_ID
12:39:11 1542  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
12:39:11 1543  --      AND ROWNUM = 1;
12:39:11 1544  
12:39:11 1545  	     EXCEPTION
12:39:11 1546  	     WHEN NO_DATA_FOUND THEN
12:39:11 1547  	       RAISE OC_TO_REDEEM_NOT_FOUND;
12:39:11 1548  	   END;
12:39:11 1549  	 END IF;
12:39:11 1550  
12:39:11 1551  	 -- Check that purchase invoice for this GC was closed
12:39:11 1552  	 SELECT
12:39:11 1553  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
12:39:11 1554  	 FROM
12:39:11 1555  	   INVOICE
12:39:11 1556  	 WHERE
12:39:11 1557  	   INVOICE.ID = var_gc_purchase_invoice_id;
12:39:11 1558  
12:39:11 1559  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
12:39:11 1560  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
12:39:11 1561  	 END IF;
12:39:11 1562  
12:39:11 1563  	 -- Check that this invoice was successfully processed by billing
12:39:11 1564  	 SELECT
12:39:11 1565  	   COUNT(1) into var_succ_purch_attempts_num
12:39:11 1566  	 FROM
12:39:11 1567  	   TRANSACTION_ATTEMPT TA
12:39:11 1568  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
12:39:11 1569  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
12:39:11 1570  	 WHERE
12:39:11 1571  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
12:39:11 1572  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS;
12:39:11 1573  
12:39:11 1574  	 IF var_succ_purch_attempts_num = 0 THEN
12:39:11 1575  	   SELECT
12:39:11 1576  	     COUNT(1) into var_succ_purch_attempts_num
12:39:11 1577  	   FROM
12:39:11 1578  	     DUAL
12:39:11 1579  	   WHERE
12:39:11 1580  	     PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
12:39:11 1581  	 END IF;
12:39:11 1582  
12:39:11 1583  	 IF var_succ_purch_attempts_num = 0 THEN
12:39:11 1584  	   RAISE PURCHASE_INVOICES_NOT_PAID;
12:39:11 1585  	 END IF;
12:39:11 1586  
12:39:11 1587  	 -- Check limit for gc's offer chain
12:39:11 1588  	 SELECT
12:39:11 1589  	   COUNT(*) into var_same_offer_chains_num
12:39:11 1590  	 FROM
12:39:11 1591  	   SUBSCRIPTION
12:39:11 1592  	 WHERE
12:39:11 1593  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:11 1594  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
12:39:11 1595  	   AND (
12:39:11 1596  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 1597  	     -- TODO: Does we need next line?
12:39:11 1598  	     -- OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
12:39:11 1599  	   );
12:39:11 1600  -- norlov: #38414 the same checking as on OC purchase (just copypasted from CREATE_SUBSCRIPTION - TODO: refactor it not to keep the same code twice)
12:39:11 1601  --  IF PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem) = var_same_offer_chains_num THEN
12:39:11 1602  --    RAISE LIMIT_REACHED;
12:39:11 1603  --  END IF;
12:39:11 1604  IF var_same_offer_chains_num = 0 THEN
12:39:11 1605  	   -- if user does not have any active existing subscriptions to the offer chain
12:39:11 1606  	   -- and if product from the offer chain is already owned from another offer chain
12:39:11 1607  	   -- then deny purchase
12:39:11 1608  	   FOR f_account_offer_chains IN (
12:39:11 1609  	     SELECT DISTINCT
12:39:11 1610  	       OFFER_CHAIN_ID
12:39:11 1611  	     FROM
12:39:11 1612  	       SUBSCRIPTION
12:39:11 1613  	     WHERE
12:39:11 1614  	       ACCOUNT_ID = var_account_id
12:39:11 1615  	       AND (
12:39:11 1616  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 1617  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED)
12:39:11 1618  	   )
12:39:11 1619  	   LOOP
12:39:11 1620  	     IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V16.TRUE THEN
12:39:11 1621  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
12:39:11 1622  	     END IF;
12:39:11 1623  	   END LOOP;
12:39:11 1624  	 ELSE
12:39:11 1625  
12:39:11 1626  	   -- if user have any active existing subscriptions to the offer chain
12:39:11 1627  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
12:39:11 1628  	   -- then deny purchase
12:39:11 1629  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
12:39:11 1630  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V16.INFINITY
12:39:11 1631  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
12:39:11 1632  	     RAISE LIMIT_REACHED;
12:39:11 1633  	   END IF;
12:39:11 1634  	 END IF;
12:39:11 1635  -- norlov: END OF TODO
12:39:11 1636  
12:39:11 1637  
12:39:11 1638  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
12:39:11 1639  	   RAISE GIFT_CERTIFICATE_REDEEMED;
12:39:11 1640  	 END IF;
12:39:11 1641  
12:39:11 1642  	 IF var_gc_expiration_date < sysdate THEN
12:39:11 1643  	   RAISE GIFT_CERTIFICATE_EXPIRED;
12:39:11 1644  	 END IF;
12:39:11 1645  
12:39:11 1646  	  IF var_gc_status_id = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_REFUNDED THEN
12:39:11 1647  	   RAISE GIFT_CERT_IS_REFUNDED;
12:39:11 1648  	 END IF;
12:39:11 1649  
12:39:11 1650  	 IF var_gc_status_id = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED THEN
12:39:11 1651  	   RAISE GIFT_CERT_IS_FINALIZED;
12:39:11 1652  	 END IF;
12:39:11 1653  
12:39:11 1654  	 -- Check that user did not subscribed to same product already
12:39:11 1655  	 -- norlov: get rid of this since there is already the check?
12:39:11 1656  	 FOR f_user_offer_chain IN (
12:39:11 1657  	   SELECT DISTINCT
12:39:11 1658  	     OFFER_CHAIN_ID
12:39:11 1659  	   FROM
12:39:11 1660  	     SUBSCRIPTION
12:39:11 1661  	   WHERE
12:39:11 1662  	     ACCOUNT_ID=var_account_id
12:39:11 1663  	     AND (
12:39:11 1664  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 1665  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
12:39:11 1666  	     )
12:39:11 1667  	 )
12:39:11 1668  	 LOOP
12:39:11 1669  	   IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V16.TRUE THEN
12:39:11 1670  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
12:39:11 1671  	   END IF;
12:39:11 1672  	 END LOOP;
12:39:11 1673  
12:39:11 1674  	 -- Check for gift certificate amount
12:39:11 1675  	 SELECT
12:39:11 1676  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
12:39:11 1677  	 FROM
12:39:11 1678  	   CHARGE
12:39:11 1679  	 WHERE
12:39:11 1680  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
12:39:11 1681  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
12:39:11 1682  
12:39:11 1683  	 -- Create new invoice
12:39:11 1684  	 PROCS_INVOICE_V16.CREATE_INVOICE(
12:39:11 1685  	   out_invoice_id    => var_invoice_id,
12:39:11 1686  	   in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_CLOSED,
12:39:11 1687  	   in_tax_exempt_id  => var_account_tax_exempt_id,
12:39:11 1688  	   in_created_by     => in_created_by
12:39:11 1689  	 );
12:39:11 1690  
12:39:11 1691  	 -- If a financial instrument wasn't passed in, use the gift certificate id
12:39:11 1692  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
12:39:11 1693  	 IF var_fin_instrument_id is null THEN
12:39:11 1694  	   var_fin_instrument_id := var_gift_certificate_id;
12:39:11 1695  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
12:39:11 1696  	 END IF;
12:39:11 1697  
12:39:11 1698  	 -- Insert new row into subscription table
12:39:11 1699  	 PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION(
12:39:11 1700  	   out_subscription_id	     => var_subscription_id,
12:39:11 1701  	   in_account_id	     => var_account_id,
12:39:11 1702  	   in_purchase_date	     => var_date,
12:39:11 1703  	   in_offer_chain_id	     => var_oc_id_to_redeem,
12:39:11 1704  	   in_created_by	     => in_created_by,
12:39:11 1705  	   in_instrument_type_id     => var_fin_instrument_type_id,
12:39:11 1706  	   in_instrument_id	     => var_fin_instrument_id,
12:39:11 1707  	   in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:11 1708  	 );
12:39:11 1709  
12:39:11 1710  	 out_subscription_id := var_subscription_id;
12:39:11 1711  
12:39:11 1712  	 BEGIN
12:39:11 1713  	   PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
12:39:11 1714  	   EXCEPTION
12:39:11 1715  	     WHEN OTHERS THEN
12:39:11 1716  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1717  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
12:39:11 1718  	 END;
12:39:11 1719  
12:39:11 1720  	 BEGIN
12:39:11 1721  	   PROCS_LICENSE_V16.CREATE_LICENSE (
12:39:11 1722  	     out_license_id		 => out_license_id,
12:39:11 1723  	     in_status_id		 => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
12:39:11 1724  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V16.TRUE,
12:39:11 1725  	     in_start_date		 => var_date,
12:39:11 1726  	     in_offer_id		 => var_first_offer_id,
12:39:11 1727  	     in_subscription_id 	 => var_subscription_id,
12:39:11 1728  	     in_invoice_id		 => var_invoice_id,
12:39:11 1729  	     in_created_by		 => in_created_by,
12:39:11 1730  	     in_end_date		 => NULL, -- Will be calculated automatically
12:39:11 1731  	     in_is_extension		 => GLOBAL_CONSTANTS_V16.FALSE,
12:39:11 1732  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
12:39:11 1733  	     in_current_offer_recurr_num => 1
12:39:11 1734  	   );
12:39:11 1735  
12:39:11 1736  	   EXCEPTION
12:39:11 1737  	     WHEN OTHERS THEN
12:39:11 1738  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1739  	       RAISE CAN_NOT_CREATE_LICENSE;
12:39:11 1740  	 END;
12:39:11 1741  
12:39:11 1742  	 -- Update original gift certificate
12:39:11 1743  	 BEGIN
12:39:11 1744  	   PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE(
12:39:11 1745  	     in_gift_certificate_id	   => var_gift_certificate_id,
12:39:11 1746  	     in_updated_by		   => in_created_by,
12:39:11 1747  	     in_redeemer_group_id	   => in_group_id,
12:39:11 1748  	     in_finalized_invoice_id	   => var_invoice_id,
12:39:11 1749  	     in_redemption_date 	   => var_date,
12:39:11 1750  	     in_redeemer_address_id	   => in_redeemer_address_id,
12:39:11 1751  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED
12:39:11 1752  	   );
12:39:11 1753  	   EXCEPTION
12:39:11 1754  	     WHEN OTHERS THEN
12:39:11 1755  	       EXCEPTION_MESSAGE := SQLERRM;
12:39:11 1756  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
12:39:11 1757  	 END;
12:39:11 1758  
12:39:11 1759  EXCEPTION
12:39:11 1760  WHEN LIMIT_REACHED THEN
12:39:11 1761  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
12:39:11 1762  	   SPROC_NAME, 'Limit reached for given offer chain');
12:39:11 1763  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
12:39:11 1764  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
12:39:11 1765  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
12:39:11 1766  WHEN GIFT_CERTIFICATE_REDEEMED THEN
12:39:11 1767  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1768  	   SPROC_NAME, 'Gift certificate already redeemed');
12:39:11 1769  WHEN GIFT_CERTIFICATE_EXPIRED THEN
12:39:11 1770  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 1771  	   SPROC_NAME, 'Gift certificate expired');
12:39:11 1772  WHEN GIFT_CERT_IS_FINALIZED THEN
12:39:11 1773  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1774  	   SPROC_NAME, 'Gift certificate is finalized');
12:39:11 1775  WHEN GIFT_CERT_IS_REFUNDED THEN
12:39:11 1776  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1777  	   SPROC_NAME, 'Gift certificate has been refunded');
12:39:11 1778  WHEN BAD_GROUP_ID THEN
12:39:11 1779  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1780  	   SPROC_NAME, 'No such account with given group id');
12:39:11 1781  WHEN OC_TO_REDEEM_NOT_FOUND THEN
12:39:11 1782  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1783  	   SPROC_NAME, 'Offer chain to redeem not found');
12:39:11 1784  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
12:39:11 1785  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1786  	   SPROC_NAME, 'No such gift certificate code');
12:39:11 1787  WHEN CAN_NOT_CREATE_LICENSE THEN
12:39:11 1788  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1789  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
12:39:11 1790  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
12:39:11 1791  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:11 1792  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
12:39:11 1793  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
12:39:11 1794  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1795  	   SPROC_NAME, 'Purchase invoice is not closed');
12:39:11 1796  WHEN PURCHASE_INVOICES_NOT_PAID THEN
12:39:11 1797  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:11 1798  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
12:39:11 1799  WHEN OTHERS THEN
12:39:11 1800  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1801  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1802  END;
12:39:11 1803  
12:39:11 1804  /******************************************************************************/
12:39:11 1805  
12:39:11 1806  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
12:39:11 1807  /*
12:39:11 1808  Throws exceptions:
12:39:11 1809  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1810  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1811  */
12:39:11 1812  	 in_code	IN VARCHAR,
12:39:11 1813  	 out_result_set OUT SYS_REFCURSOR
12:39:11 1814  ) AS
12:39:11 1815  -- VARIABLES
12:39:11 1816  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
12:39:11 1817  temp_gift_certificate_id NUMBER;
12:39:11 1818  -- EXCEPTIONS
12:39:11 1819  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
12:39:11 1820  BEGIN
12:39:11 1821  
12:39:11 1822  	 BEGIN
12:39:11 1823  	   SELECT
12:39:11 1824  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
12:39:11 1825  	   FROM
12:39:11 1826  	     GIFT_CERTIFICATE
12:39:11 1827  	   WHERE
12:39:11 1828  	     GIFT_CERTIFICATE.CODE = in_code;
12:39:11 1829  	   EXCEPTION
12:39:11 1830  	     WHEN NO_DATA_FOUND THEN
12:39:11 1831  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
12:39:11 1832  	 END;
12:39:11 1833  
12:39:11 1834  	 -- Select all gift certificates with given code
12:39:11 1835  	 OPEN out_result_set FOR
12:39:11 1836  	 SELECT
12:39:11 1837  	   gc.EXPIRATION_DATE,
12:39:11 1838  	   ch.name,
12:39:11 1839  	   ch.id,
12:39:11 1840  	   gc.sender_email,
12:39:11 1841  	   gc.sender_name,
12:39:11 1842  	   gc.recipient_email,
12:39:11 1843  	   gc.recipient_name,
12:39:11 1844  	   gc.purchase_date,
12:39:11 1845  	   gc.redemption_date,
12:39:11 1846  	   gc.purchaser_group_id,
12:39:11 1847  	   gc.redeemer_group_id,
12:39:11 1848  	   gc.gift_message,
12:39:11 1849  	   ocmd.value redemption_offer_chain_ids,
12:39:11 1850  	   s.offer_chain_id redeemed_offer_chain_id,
12:39:11 1851  	   gc.recipient_notify_date,
12:39:11 1852  	   gc.gift_certificate_status_id,
12:39:11 1853  	   gc.purchase_invoice_id,
12:39:11 1854  	   gc.finalized_invoice_id
12:39:11 1855  	 FROM
12:39:11 1856  	   GIFT_CERTIFICATE gc
12:39:11 1857  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
12:39:11 1858  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
12:39:11 1859  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
12:39:11 1860  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
12:39:11 1861  	 WHERE
12:39:11 1862  	   gc.code = in_code;
12:39:11 1863  
12:39:11 1864  EXCEPTION
12:39:11 1865  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
12:39:11 1866  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1867  	   SPROC_NAME, 'No such gift certificate');
12:39:11 1868  WHEN OTHERS THEN
12:39:11 1869  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1870  	   SPROC_NAME, 'Unknown Error', SQLERRM);
12:39:11 1871  END;
12:39:11 1872  
12:39:11 1873  /******************************************************************************/
12:39:11 1874  
12:39:11 1875  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
12:39:11 1876  /*
12:39:11 1877  Throws exceptions:
12:39:11 1878  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1879  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:11 1880  */
12:39:11 1881  	 in_gift_certificate_id IN NUMBER,
12:39:11 1882  	 out_result_set 	OUT SYS_REFCURSOR
12:39:11 1883  ) AS
12:39:11 1884  -- VARIABLES
12:39:11 1885  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
12:39:11 1886  temp_gift_certificate_id NUMBER;
12:39:11 1887  -- EXCEPTIONS
12:39:11 1888  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
12:39:11 1889  BEGIN
12:39:11 1890  
12:39:11 1891  	 BEGIN
12:39:11 1892  	   SELECT
12:39:11 1893  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
12:39:11 1894  	   FROM
12:39:11 1895  	     GIFT_CERTIFICATE
12:39:11 1896  	   WHERE
12:39:11 1897  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
12:39:11 1898  	   EXCEPTION
12:39:11 1899  	     WHEN NO_DATA_FOUND THEN
12:39:11 1900  	       RAISE BAD_GIFT_CERTIFICATE_ID;
12:39:11 1901  	 END;
12:39:11 1902  
12:39:11 1903  	 -- Select all gift certificates with given code
12:39:11 1904  	 OPEN out_result_set FOR
12:39:11 1905  	 SELECT
12:39:11 1906  	   gc.EXPIRATION_DATE,
12:39:11 1907  	   ch.name,
12:39:11 1908  	   ch.id,
12:39:11 1909  	   gc.sender_email,
12:39:11 1910  	   gc.sender_name,
12:39:11 1911  	   gc.recipient_email,
12:39:11 1912  	   gc.recipient_name,
12:39:11 1913  	   gc.purchase_date,
12:39:11 1914  	   gc.redemption_date,
12:39:11 1915  	   gc.purchaser_group_id,
12:39:11 1916  	   gc.redeemer_group_id,
12:39:11 1917  	   gc.code,
12:39:11 1918  	   gc.gift_message,
12:39:11 1919  	   gc.recipient_notify_date
12:39:11 1920  	 FROM
12:39:11 1921  	   GIFT_CERTIFICATE gc
12:39:11 1922  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
12:39:11 1923  	 WHERE
12:39:11 1924  	   gc.id = in_gift_certificate_id;
12:39:11 1925  
12:39:11 1926  EXCEPTION
12:39:11 1927  WHEN BAD_GIFT_CERTIFICATE_ID THEN
12:39:11 1928  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1929  	   SPROC_NAME, 'No such gift certificate');
12:39:11 1930  WHEN OTHERS THEN
12:39:11 1931  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1932  	   SPROC_NAME, 'Unknown Error', SQLERRM);
12:39:11 1933  END GET_GIFT_CERTIFICATE_BY_ID;
12:39:11 1934  
12:39:11 1935  /******************************************************************************/
12:39:11 1936  
12:39:11 1937  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
12:39:11 1938  	 in_group_id		IN  NUMBER,
12:39:11 1939  	 out_instrument_type_id OUT NUMBER,
12:39:11 1940  	 out_instrument_id	OUT NUMBER
12:39:11 1941  ) AS
12:39:11 1942  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
12:39:11 1943  BEGIN
12:39:11 1944  
12:39:11 1945  	 SELECT
12:39:11 1946  	   ACCOUNT.INSTRUMENT_TYPE_ID,
12:39:11 1947  	   ACCOUNT.INSTRUMENT_ID
12:39:11 1948  	   into
12:39:11 1949  	   out_instrument_type_id,
12:39:11 1950  	   out_instrument_id
12:39:11 1951  	 FROM
12:39:11 1952  	   ACCOUNT
12:39:11 1953  	 WHERE
12:39:11 1954  	   ACCOUNT.GROUP_ID = in_group_id;
12:39:11 1955  
12:39:11 1956  EXCEPTION
12:39:11 1957  WHEN NO_DATA_FOUND THEN
12:39:11 1958  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 1959  	   SPROC_NAME, 'Bad group id');
12:39:11 1960  WHEN OTHERS THEN
12:39:11 1961  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 1962  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 1963  END GET_DEF_FINANCIAL_INSTRUMENT;
12:39:11 1964  
12:39:11 1965  /******************************************************************************/
12:39:11 1966  
12:39:11 1967  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
12:39:11 1968  	 in_group_id	       IN NUMBER,
12:39:11 1969  	 in_instrument_type_id IN NUMBER,
12:39:11 1970  	 in_instrument_id      IN NUMBER,
12:39:11 1971  	 in_updated_by	       IN VARCHAR2
12:39:11 1972  ) AS
12:39:11 1973  -- VARIABLES
12:39:11 1974  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
12:39:11 1975  var_account_id	      NUMBER;
12:39:11 1976  -- EXCEPTIONS
12:39:11 1977  BAD_GROUP_ID	      EXCEPTION;
12:39:11 1978  BAD_CREDIT_CARD	      EXCEPTION;
12:39:11 1979  BAD_PAYPAL	      EXCEPTION;
12:39:11 1980  BAD_INSTRUMENT_TYPE    EXCEPTION;
12:39:11 1981  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 1982  BEGIN
12:39:11 1983  
12:39:11 1984  	 -- get account id
12:39:11 1985  	 BEGIN
12:39:11 1986  	   SELECT
12:39:11 1987  	     ACCOUNT.ID into var_account_id
12:39:11 1988  	   FROM
12:39:11 1989  	     ACCOUNT
12:39:11 1990  	   WHERE
12:39:11 1991  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:11 1992  	   EXCEPTION
12:39:11 1993  	     WHEN NO_DATA_FOUND THEN
12:39:11 1994  	       RAISE BAD_GROUP_ID;
12:39:11 1995  	 END;
12:39:11 1996  
12:39:11 1997  	 -- Chech that given instrument exists
12:39:11 1998  	 IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
12:39:11 1999  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 2000  	     RAISE BAD_CREDIT_CARD;
12:39:11 2001  	   END IF;
12:39:11 2002  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
12:39:11 2003  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 2004  	     RAISE BAD_PAYPAL;
12:39:11 2005  	   END IF;
12:39:11 2006  	 ELSE
12:39:11 2007  	   RAISE BAD_INSTRUMENT_TYPE;
12:39:11 2008  	 END IF;
12:39:11 2009  
12:39:11 2010  	 -- update account information
12:39:11 2011  	 PROCS_ACCOUNT_CRU_V16.UPDATE_ACCOUNT(
12:39:11 2012  	   in_account_id	 => var_account_id,
12:39:11 2013  	   in_updated_by	 => in_updated_by,
12:39:11 2014  	   in_instrument_type_id => in_instrument_type_id,
12:39:11 2015  	   in_instrument_id	 => in_instrument_id
12:39:11 2016  	 );
12:39:11 2017  
12:39:11 2018  EXCEPTION
12:39:11 2019  WHEN BAD_GROUP_ID THEN
12:39:11 2020  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2021  	   SPROC_NAME, 'No such account');
12:39:11 2022  WHEN BAD_CREDIT_CARD THEN
12:39:11 2023  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2024  	   SPROC_NAME, 'Could not find credit card with given ID');
12:39:11 2025  WHEN BAD_PAYPAL THEN
12:39:11 2026  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2027  	   SPROC_NAME, 'Could not find paypal with given ID');
12:39:11 2028  WHEN BAD_INSTRUMENT_TYPE THEN
12:39:11 2029  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2030  	   SPROC_NAME, 'Bad instrument type id');
12:39:11 2031  WHEN OTHERS THEN
12:39:11 2032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2033  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2034  END SET_DEF_FINANCIAL_INSTRUMENT;
12:39:11 2035  
12:39:11 2036  /******************************************************************************/
12:39:11 2037  
12:39:11 2038  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
12:39:11 2039  	 in_group_id IN NUMBER
12:39:11 2040  ) AS
12:39:11 2041  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
12:39:11 2042  -- VARIABLES
12:39:11 2043  var_account_id NUMBER;
12:39:11 2044  -- EXCEPTIONS
12:39:11 2045  BAD_GROUP_ID	 EXCEPTION;
12:39:11 2046  EXCEPTION_MESSAGE VARCHAR2(1024);
12:39:11 2047  BEGIN
12:39:11 2048  
12:39:11 2049  	 BEGIN
12:39:11 2050  	   SELECT
12:39:11 2051  	     ACCOUNT.ID into var_account_id
12:39:11 2052  	   FROM
12:39:11 2053  	     ACCOUNT
12:39:11 2054  	   WHERE
12:39:11 2055  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:11 2056  	   EXCEPTION
12:39:11 2057  	     WHEN NO_DATA_FOUND THEN
12:39:11 2058  	       RAISE BAD_GROUP_ID;
12:39:11 2059  	 END;
12:39:11 2060  
12:39:11 2061  	 PROCS_ACCOUNT_CRU_V16.UPDATE_DEF_FIN_INSTRUMENT(
12:39:11 2062  	   in_account_id => var_account_id,
12:39:11 2063  	   in_instrument_type_id => NULL,
12:39:11 2064  	   in_instrument_id => NULL,
12:39:11 2065  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
12:39:11 2066  	 );
12:39:11 2067  
12:39:11 2068  EXCEPTION
12:39:11 2069  WHEN BAD_GROUP_ID THEN
12:39:11 2070  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2071  	   SPROC_NAME, 'No such group id');
12:39:11 2072  WHEN OTHERS THEN
12:39:11 2073  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2074  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2075  END DEL_DEF_FINANCIAL_INSTRUMENT;
12:39:11 2076  
12:39:11 2077  /******************************************************************************/
12:39:11 2078  
12:39:11 2079  PROCEDURE GET_CREDIT_CARD_BY_ID (
12:39:11 2080  	 in_credit_card_id IN  NUMBER,
12:39:11 2081  	 out_result_set    OUT SYS_REFCURSOR
12:39:11 2082  ) AS
12:39:11 2083  -- VARIABLES
12:39:11 2084  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
12:39:11 2085  temp_cc_count NUMBER;
12:39:11 2086  
12:39:11 2087  -- EXCEPTIONS
12:39:11 2088  BAD_CREDIT_CARD_ID EXCEPTION;
12:39:11 2089  BEGIN
12:39:11 2090  
12:39:11 2091  	 -- Check that credit card exists
12:39:11 2092  	 SELECT
12:39:11 2093  	   COUNT(*) into temp_cc_count
12:39:11 2094  	 FROM
12:39:11 2095  	   CREDIT_CARD
12:39:11 2096  	 WHERE
12:39:11 2097  	   CREDIT_CARD.ID = in_credit_card_id;
12:39:11 2098  	 IF temp_cc_count = 0 THEN
12:39:11 2099  	   RAISE BAD_CREDIT_CARD_ID;
12:39:11 2100  	 END IF;
12:39:11 2101  
12:39:11 2102  	 -- Get data
12:39:11 2103  	 OPEN out_result_set FOR
12:39:11 2104  	 SELECT
12:39:11 2105  	   CREDIT_CARD.ID,
12:39:11 2106  	   CREDIT_CARD.ACCOUNT_ID,
12:39:11 2107  	   CREDIT_CARD.INSTRUMENT_NAME,
12:39:11 2108  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
12:39:11 2109  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
12:39:11 2110  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
12:39:11 2111  	   CREDIT_CARD.STATE,
12:39:11 2112  	   CREDIT_CARD.CITY,
12:39:11 2113  	   CREDIT_CARD.POSTAL_CODE,
12:39:11 2114  	   CREDIT_CARD.COUNTRY,
12:39:11 2115  	   CREDIT_CARD.LAST_FOUR_CC,
12:39:11 2116  	   CREDIT_CARD.EXPIRATION_DATE,
12:39:11 2117  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
12:39:11 2118  	   CREDIT_CARD.SECRET_TOKEN,
12:39:11 2119  	   CREDIT_CARD.CREATE_DATE,
12:39:11 2120  	   CREDIT_CARD.CREATED_BY,
12:39:11 2121  	   CREDIT_CARD.UPDATE_DATE,
12:39:11 2122  	   CREDIT_CARD.UPDATED_BY,
12:39:11 2123  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
12:39:11 2124  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
12:39:11 2125  	   CREDIT_CARD.PRIVATE_LAST_NAME,
12:39:11 2126  	       CREDIT_CARD.CHASE_PROFILE_ID
12:39:11 2127  	 FROM
12:39:11 2128  	   CREDIT_CARD
12:39:11 2129  	 WHERE
12:39:11 2130  	   CREDIT_CARD.ID = in_credit_card_id;
12:39:11 2131  
12:39:11 2132  EXCEPTION
12:39:11 2133  WHEN BAD_CREDIT_CARD_ID THEN
12:39:11 2134  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2135  	   SPROC_NAME, 'No such credit card');
12:39:11 2136  WHEN OTHERS THEN
12:39:11 2137  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2138  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2139  END GET_CREDIT_CARD_BY_ID;
12:39:11 2140  
12:39:11 2141  /******************************************************************************/
12:39:11 2142  
12:39:11 2143  PROCEDURE GET_PAYPAL_BY_ID (
12:39:11 2144  	 in_paypal_id	IN  NUMBER,
12:39:11 2145  	 out_result_set OUT SYS_REFCURSOR
12:39:11 2146  ) AS
12:39:11 2147  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
12:39:11 2148  -- VARIABLES
12:39:11 2149  temp_pp_count NUMBER;
12:39:11 2150  -- EXCEPTIONS
12:39:11 2151  BAD_PAYPAL_ID EXCEPTION;
12:39:11 2152  BEGIN
12:39:11 2153  
12:39:11 2154  	 -- Check that credit card exists
12:39:11 2155  	 SELECT
12:39:11 2156  	   COUNT(*) into temp_pp_count
12:39:11 2157  	 FROM
12:39:11 2158  	   PAYPAL
12:39:11 2159  	 WHERE
12:39:11 2160  	   PAYPAL.ID = in_paypal_id;
12:39:11 2161  	 IF temp_pp_count = 0 THEN
12:39:11 2162  	   RAISE BAD_PAYPAL_ID;
12:39:11 2163  	 END IF;
12:39:11 2164  
12:39:11 2165  	 OPEN out_result_set FOR
12:39:11 2166  	 SELECT
12:39:11 2167  	   ID,
12:39:11 2168  	   ACCOUNT_ID,
12:39:11 2169  	   INSTRUMENT_NAME,
12:39:11 2170  	   PRIVATE_EMAIL_ADDRESS,
12:39:11 2171  	   CREATE_DATE,
12:39:11 2172  	   CREATED_BY,
12:39:11 2173  	   UPDATE_DATE,
12:39:11 2174  	   UPDATED_BY,
12:39:11 2175  	   PAYPAL_STATUS_ID,
12:39:11 2176  	   PRIVATE_STREET_ADDRESS,
12:39:11 2177  	   PRIVATE_STREET_ADDRESS2,
12:39:11 2178  	   STATE,
12:39:11 2179  	   CITY,
12:39:11 2180  	   POSTAL_CODE,
12:39:11 2181  	   COUNTRY,
12:39:11 2182  	   EXPIRATION_DATE,
12:39:11 2183  	   SECRET_TOKEN
12:39:11 2184  	 FROM
12:39:11 2185  	   PAYPAL
12:39:11 2186  	 WHERE
12:39:11 2187  	   ID = in_paypal_id;
12:39:11 2188  
12:39:11 2189  EXCEPTION
12:39:11 2190  WHEN BAD_PAYPAL_ID THEN
12:39:11 2191  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2192  	   SPROC_NAME, 'No such paypal');
12:39:11 2193  WHEN OTHERS THEN
12:39:11 2194  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2195  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2196  END GET_PAYPAL_BY_ID;
12:39:11 2197  
12:39:11 2198  /******************************************************************************/
12:39:11 2199  
12:39:11 2200  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
12:39:11 2201  /*
12:39:11 2202  	 Returns GLOBAL_CONSTANTS_V16.TRUE if system can disable credit card
12:39:11 2203  	 GLOBAL_CONSTANTS_V16.FALSE else
12:39:11 2204  */
12:39:11 2205  	 in_credit_card_id NUMBER
12:39:11 2206  ) RETURN NUMBER AS
12:39:11 2207  BEGIN
12:39:11 2208  	 -- STUB
12:39:11 2209  	 RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2210  END F_CAN_DISABLE_CREDIT_CARD;
12:39:11 2211  
12:39:11 2212  /******************************************************************************/
12:39:11 2213  
12:39:11 2214  PROCEDURE GET_PURCHASED_GCERTIFICATES (
12:39:11 2215  	 in_group_id	IN NUMBER,
12:39:11 2216  	 out_result_set OUT SYS_REFCURSOR
12:39:11 2217  ) AS
12:39:11 2218  -- VARIABLES
12:39:11 2219  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
12:39:11 2220  var_account_id NUMBER;
12:39:11 2221  -- EXCEPTIONS
12:39:11 2222  BAD_GROUP_ID EXCEPTION;
12:39:11 2223  BEGIN
12:39:11 2224  
12:39:11 2225  	 BEGIN
12:39:11 2226  	   SELECT
12:39:11 2227  	     ACCOUNT.ID into var_account_id
12:39:11 2228  	   FROM
12:39:11 2229  	     ACCOUNT
12:39:11 2230  	   WHERE
12:39:11 2231  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:11 2232  	   EXCEPTION
12:39:11 2233  	     WHEN NO_DATA_FOUND THEN
12:39:11 2234  	       RAISE BAD_GROUP_ID;
12:39:11 2235  	 END;
12:39:11 2236  
12:39:11 2237  	 OPEN out_result_set FOR
12:39:11 2238  	 SELECT
12:39:11 2239  	   GIFT_CERTIFICATE.CODE,
12:39:11 2240  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
12:39:11 2241  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
12:39:11 2242  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
12:39:11 2243  	   GIFT_CERTIFICATE.SENDER_EMAIL,
12:39:11 2244  	   GIFT_CERTIFICATE.SENDER_NAME,
12:39:11 2245  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
12:39:11 2246  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
12:39:11 2247  	   GIFT_CERTIFICATE.PURCHASE_DATE,
12:39:11 2248  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
12:39:11 2249  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
12:39:11 2250  	 FROM
12:39:11 2251  	   GIFT_CERTIFICATE
12:39:11 2252  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:11 2253  	 WHERE
12:39:11 2254  	   ROWNUM <= 100 AND
12:39:11 2255  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
12:39:11 2256  
12:39:11 2257  EXCEPTION
12:39:11 2258  WHEN BAD_GROUP_ID THEN
12:39:11 2259  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2260  	   SPROC_NAME, 'No such group id');
12:39:11 2261  WHEN OTHERS THEN
12:39:11 2262  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2263  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2264  END GET_PURCHASED_GCERTIFICATES;
12:39:11 2265  
12:39:11 2266  /******************************************************************************/
12:39:11 2267  
12:39:11 2268  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
12:39:11 2269  	 in_gift_certificate_id IN NUMBER,
12:39:11 2270  	 in_charge_id		IN NUMBER,
12:39:11 2271  	 out_result		OUT NUMBER
12:39:11 2272  ) AS
12:39:11 2273  -- VARIABLES
12:39:11 2274  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
12:39:11 2275  var_invoice_id	    NUMBER;
12:39:11 2276  var_offer_chain_id   NUMBER;
12:39:11 2277  var_offer_chain_s_id NUMBER;
12:39:11 2278  -- EXCEPTIONS
12:39:11 2279  BAD_CHARGE_ID		 EXCEPTION;
12:39:11 2280  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
12:39:11 2281  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
12:39:11 2282  BEGIN
12:39:11 2283  
12:39:11 2284  	 BEGIN
12:39:11 2285  	   SELECT
12:39:11 2286  	     CHARGE.INVOICE_ID into var_invoice_id
12:39:11 2287  	   FROM
12:39:11 2288  	     CHARGE
12:39:11 2289  	   WHERE
12:39:11 2290  	     CHARGE.ID = in_charge_id;
12:39:11 2291  	   EXCEPTION
12:39:11 2292  	     WHEN NO_DATA_FOUND THEN
12:39:11 2293  	       RAISE BAD_CHARGE_ID;
12:39:11 2294  	 END;
12:39:11 2295  
12:39:11 2296  	 BEGIN
12:39:11 2297  	   SELECT
12:39:11 2298  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
12:39:11 2299  	   FROM
12:39:11 2300  	     GIFT_CERTIFICATE
12:39:11 2301  	   WHERE
12:39:11 2302  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
12:39:11 2303  	   EXCEPTION
12:39:11 2304  	     WHEN NO_DATA_FOUND THEN
12:39:11 2305  	       RAISE BAD_GIFT_CERTIFICATE_ID;
12:39:11 2306  	 END;
12:39:11 2307  
12:39:11 2308  	 BEGIN
12:39:11 2309  	   SELECT
12:39:11 2310  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
12:39:11 2311  	   FROM
12:39:11 2312  	     SUBSCRIPTION
12:39:11 2313  	   WHERE
12:39:11 2314  	     SUBSCRIPTION.ID IN (
12:39:11 2315  	       SELECT DISTINCT
12:39:11 2316  		 LICENSE.SUBSCRIPTION_ID
12:39:11 2317  	       FROM
12:39:11 2318  		 LICENSE
12:39:11 2319  	       WHERE
12:39:11 2320  		 LICENSE.INVOICE_ID = var_invoice_id
12:39:11 2321  	     );
12:39:11 2322  	   EXCEPTION
12:39:11 2323  	     WHEN NO_DATA_FOUND THEN
12:39:11 2324  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
12:39:11 2325  	 END;
12:39:11 2326  
12:39:11 2327  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
12:39:11 2328  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2329  	 ELSE
12:39:11 2330  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 2331  	 END IF;
12:39:11 2332  
12:39:11 2333  EXCEPTION
12:39:11 2334  WHEN BAD_CHARGE_ID THEN
12:39:11 2335  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2336  	   SPROC_NAME, 'No such charge');
12:39:11 2337  WHEN BAD_GIFT_CERTIFICATE_ID THEN
12:39:11 2338  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2339  	   SPROC_NAME, 'No such gift certificate');
12:39:11 2340  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
12:39:11 2341  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2342  	   SPROC_NAME, 'Could not find subscription for given charge');
12:39:11 2343  WHEN OTHERS THEN
12:39:11 2344  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2345  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2346  END IS_GCERT_FOR_PROPER_OFFER;
12:39:11 2347  
12:39:11 2348  /******************************************************************************/
12:39:11 2349  
12:39:11 2350  FUNCTION IS_CREDIT_CARD_EXISTS (
12:39:11 2351  /*
12:39:11 2352  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
12:39:11 2353  GLOBAL_CONSTANTS_V16.FALSE - else
12:39:11 2354  */
12:39:11 2355  	 in_credit_card_id IN NUMBER
12:39:11 2356  ) RETURN NUMBER AS
12:39:11 2357  -- VARIABLES
12:39:11 2358  var_cc_count NUMBER;
12:39:11 2359  BEGIN
12:39:11 2360  	 SELECT
12:39:11 2361  	   COUNT(*) into var_cc_count
12:39:11 2362  	 FROM
12:39:11 2363  	   CREDIT_CARD
12:39:11 2364  	 WHERE
12:39:11 2365  	   CREDIT_CARD.ID = in_credit_card_id;
12:39:11 2366  
12:39:11 2367  	 IF var_cc_count = 0 THEN
12:39:11 2368  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 2369  	 ELSE
12:39:11 2370  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2371  	 END IF;
12:39:11 2372  
12:39:11 2373  END IS_CREDIT_CARD_EXISTS;
12:39:11 2374  
12:39:11 2375  /******************************************************************************/
12:39:11 2376  
12:39:11 2377  FUNCTION IS_PAYPAL_EXISTS (
12:39:11 2378  /*
12:39:11 2379  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
12:39:11 2380  GLOBAL_CONSTANTS_V16.FALSE - else
12:39:11 2381  */
12:39:11 2382  	 in_paypal_id IN NUMBER
12:39:11 2383  ) RETURN NUMBER AS
12:39:11 2384  -- VARIABLES
12:39:11 2385  var_pp_count NUMBER;
12:39:11 2386  BEGIN
12:39:11 2387  	 SELECT
12:39:11 2388  	   COUNT(*) into var_pp_count
12:39:11 2389  	 FROM
12:39:11 2390  	   PAYPAL
12:39:11 2391  	 WHERE
12:39:11 2392  	   PAYPAL.ID = in_paypal_id;
12:39:11 2393  
12:39:11 2394  	 IF var_pp_count = 0 THEN
12:39:11 2395  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 2396  	 ELSE
12:39:11 2397  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2398  	 END IF;
12:39:11 2399  
12:39:11 2400  END IS_PAYPAL_EXISTS;
12:39:11 2401  
12:39:11 2402  /******************************************************************************/
12:39:11 2403  
12:39:11 2404  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
12:39:11 2405  /*
12:39:11 2406  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
12:39:11 2407  GLOBAL_CONSTANTS_V16.FALSE - else
12:39:11 2408  */
12:39:11 2409  	 in_gift_certificate_id IN NUMBER
12:39:11 2410  ) RETURN NUMBER AS
12:39:11 2411  -- VARIABLES
12:39:11 2412  var_gc_count NUMBER;
12:39:11 2413  BEGIN
12:39:11 2414  	 SELECT
12:39:11 2415  	   COUNT(*) into var_gc_count
12:39:11 2416  	 FROM
12:39:11 2417  	   GIFT_CERTIFICATE
12:39:11 2418  	 WHERE
12:39:11 2419  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
12:39:11 2420  
12:39:11 2421  	 IF var_gc_count = 0 THEN
12:39:11 2422  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
12:39:11 2423  	 ELSE
12:39:11 2424  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
12:39:11 2425  	 END IF;
12:39:11 2426  
12:39:11 2427  END IS_GIFT_CERTIFICATE_EXISTS;
12:39:11 2428  
12:39:11 2429  /******************************************************************************/
12:39:11 2430  
12:39:11 2431  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
12:39:11 2432  	 in_credit_card_id IN NUMBER,
12:39:11 2433  	 out_group_id	   OUT NUMBER
12:39:11 2434  ) AS
12:39:11 2435  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
12:39:11 2436  BEGIN
12:39:11 2437  	 SELECT
12:39:11 2438  	   ACCOUNT.GROUP_ID into out_group_id
12:39:11 2439  	 FROM
12:39:11 2440  	   CREDIT_CARD
12:39:11 2441  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
12:39:11 2442  	 WHERE
12:39:11 2443  	   CREDIT_CARD.ID = in_credit_card_id;
12:39:11 2444  EXCEPTION
12:39:11 2445  WHEN NO_DATA_FOUND THEN
12:39:11 2446  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2447  	   SPROC_NAME, 'No such credit card');
12:39:11 2448  WHEN OTHERS THEN
12:39:11 2449  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2450  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2451  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
12:39:11 2452  
12:39:11 2453  /******************************************************************************/
12:39:11 2454  
12:39:11 2455  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
12:39:11 2456  	 in_paypal_id IN NUMBER,
12:39:11 2457  	 out_group_id OUT NUMBER
12:39:11 2458  ) AS
12:39:11 2459  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
12:39:11 2460  BEGIN
12:39:11 2461  	 SELECT
12:39:11 2462  	   ACCOUNT.GROUP_ID into out_group_id
12:39:11 2463  	 FROM
12:39:11 2464  	   PAYPAL
12:39:11 2465  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
12:39:11 2466  	 WHERE
12:39:11 2467  	   PAYPAL.ID = in_paypal_id;
12:39:11 2468  EXCEPTION
12:39:11 2469  WHEN NO_DATA_FOUND THEN
12:39:11 2470  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2471  	   SPROC_NAME, 'No such paypal');
12:39:11 2472  WHEN OTHERS THEN
12:39:11 2473  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2474  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2475  END GET_GROUP_ID_BY_PAYPAL_ID;
12:39:11 2476  
12:39:11 2477  /******************************************************************************/
12:39:11 2478  
12:39:11 2479  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
12:39:11 2480  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
12:39:11 2481  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
12:39:11 2482  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
12:39:11 2483  ) AS
12:39:11 2484  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
12:39:11 2485  -- EXCEPTIONS
12:39:11 2486  BAD_CREDIT_CARD_ID     EXCEPTION;
12:39:11 2487  BAD_STATUS_ID	      EXCEPTION;
12:39:11 2488  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 2489  BEGIN
12:39:11 2490  
12:39:11 2491  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
12:39:11 2492  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_INVALID
12:39:11 2493  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
12:39:11 2494  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_EXPIRED THEN
12:39:11 2495  	   RAISE BAD_STATUS_ID;
12:39:11 2496  	 END IF;
12:39:11 2497  
12:39:11 2498  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_CREDIT_CARD(
12:39:11 2499  	   in_credit_card_id	    => in_credit_card_id,
12:39:11 2500  	   in_updated_by	    => in_updated_by,
12:39:11 2501  	   in_credit_card_status_id => in_credit_card_status_id
12:39:11 2502  	 );
12:39:11 2503  
12:39:11 2504  	 IF SQL%ROWCOUNT = 0 THEN
12:39:11 2505  	   RAISE BAD_CREDIT_CARD_ID;
12:39:11 2506  	 END IF;
12:39:11 2507  
12:39:11 2508  EXCEPTION
12:39:11 2509  WHEN BAD_CREDIT_CARD_ID THEN
12:39:11 2510  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2511  	   SPROC_NAME, 'No such credit card');
12:39:11 2512  WHEN BAD_STATUS_ID THEN
12:39:11 2513  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2514  	   SPROC_NAME, 'Bad credit card status id');
12:39:11 2515  WHEN OTHERS THEN
12:39:11 2516  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2517  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2518  END UPDATE_CREDIT_CARD_STATUS;
12:39:11 2519  
12:39:11 2520  /******************************************************************************/
12:39:11 2521  
12:39:11 2522  PROCEDURE UPDATE_PAYPAL_STATUS (
12:39:11 2523  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
12:39:11 2524  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
12:39:11 2525  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
12:39:11 2526  ) AS
12:39:11 2527  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
12:39:11 2528  -- EXCEPTIONS
12:39:11 2529  BAD_PAYPAL_ID	      EXCEPTION;
12:39:11 2530  BAD_STATUS_ID	      EXCEPTION;
12:39:11 2531  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:11 2532  BEGIN
12:39:11 2533  
12:39:11 2534  	 IF in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
12:39:11 2535  	   AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
12:39:11 2536  	   AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
12:39:11 2537  	   RAISE BAD_STATUS_ID;
12:39:11 2538  	 END IF;
12:39:11 2539  
12:39:11 2540  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_PAYPAL(
12:39:11 2541  	   in_paypal_id        => in_paypal_id,
12:39:11 2542  	   in_paypal_status_id => in_paypal_status_id,
12:39:11 2543  	   in_updated_by       => in_updated_by
12:39:11 2544  	 );
12:39:11 2545  
12:39:11 2546  	 IF SQL%ROWCOUNT = 0 THEN
12:39:11 2547  	   RAISE BAD_PAYPAL_ID;
12:39:11 2548  	 END IF;
12:39:11 2549  
12:39:11 2550  EXCEPTION
12:39:11 2551  WHEN BAD_PAYPAL_ID THEN
12:39:11 2552  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2553  	   SPROC_NAME, 'No such paypal');
12:39:11 2554  WHEN BAD_STATUS_ID THEN
12:39:11 2555  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2556  	   SPROC_NAME, 'Bad paypal status id');
12:39:11 2557  WHEN OTHERS THEN
12:39:11 2558  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2559  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2560  END UPDATE_PAYPAL_STATUS;
12:39:11 2561  
12:39:11 2562  /******************************************************************************/
12:39:11 2563  
12:39:11 2564  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
12:39:11 2565  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
12:39:11 2566  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
12:39:11 2567  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
12:39:11 2568  ) AS
12:39:11 2569  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
12:39:11 2570  -- EXCEPTIONS
12:39:11 2571  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
12:39:11 2572  BAD_STATUS_ID	       EXCEPTION;
12:39:11 2573  EXCEPTION_MESSAGE       VARCHAR2(1024);
12:39:11 2574  BEGIN
12:39:11 2575  
12:39:11 2576  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
12:39:11 2577  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED THEN
12:39:11 2578  	   RAISE BAD_STATUS_ID;
12:39:11 2579  	 END IF;
12:39:11 2580  
12:39:11 2581  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE(
12:39:11 2582  	   in_gift_certificate_id	 => in_gift_certificate_id,
12:39:11 2583  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
12:39:11 2584  	   in_updated_by		 => in_updated_by
12:39:11 2585  	 );
12:39:11 2586  
12:39:11 2587  	 IF SQL%ROWCOUNT = 0 THEN
12:39:11 2588  	   RAISE BAD_GIFT_CERTIFICATE_ID;
12:39:11 2589  	 END IF;
12:39:11 2590  
12:39:11 2591  EXCEPTION
12:39:11 2592  WHEN BAD_GIFT_CERTIFICATE_ID THEN
12:39:11 2593  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2594  	   SPROC_NAME, 'No such gift certificate');
12:39:11 2595  WHEN BAD_STATUS_ID THEN
12:39:11 2596  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2597  	   SPROC_NAME, 'Bad paypal status id');
12:39:11 2598  WHEN OTHERS THEN
12:39:11 2599  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2600  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2601  END UPDATE_GIFT_CERTIFICATE_STATUS;
12:39:11 2602  
12:39:11 2603  /******************************************************************************/
12:39:11 2604  
12:39:11 2605  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
12:39:11 2606  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:11 2607  	 out_result_set OUT SYS_REFCURSOR
12:39:11 2608  ) AS
12:39:11 2609  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
12:39:11 2610  -- VARIABLES
12:39:11 2611  temp_invoice_id NUMBER;
12:39:11 2612  -- EXCEPTIONS
12:39:11 2613  BAD_INVOICE_ID EXCEPTION;
12:39:11 2614  BEGIN
12:39:11 2615  
12:39:11 2616  	 BEGIN
12:39:11 2617  	   SELECT
12:39:11 2618  	     I.ID into temp_invoice_id
12:39:11 2619  	   FROM
12:39:11 2620  	     INVOICE I
12:39:11 2621  	   WHERE
12:39:11 2622  	     I.ID = in_invoice_id;
12:39:11 2623  	   EXCEPTION
12:39:11 2624  	     WHEN NO_DATA_FOUND THEN
12:39:11 2625  	       RAISE BAD_INVOICE_ID;
12:39:11 2626  	 END;
12:39:11 2627  
12:39:11 2628  	 OPEN out_result_set FOR
12:39:11 2629  	   SELECT
12:39:11 2630  	     gc.EXPIRATION_DATE,
12:39:11 2631  	     ch.name,
12:39:11 2632  	     ch.id offer_chain_id,
12:39:11 2633  	     gc.sender_email,
12:39:11 2634  	     gc.sender_name,
12:39:11 2635  	     gc.recipient_email,
12:39:11 2636  	     gc.recipient_name,
12:39:11 2637  	     gc.purchase_date,
12:39:11 2638  	     gc.redemption_date,
12:39:11 2639  	     gc.purchaser_group_id,
12:39:11 2640  	     gc.redeemer_group_id,
12:39:11 2641  	     gc.code,
12:39:11 2642  	     gc.gift_message,
12:39:11 2643  	     gc.recipient_notify_date,
12:39:11 2644  	     gc.id
12:39:11 2645  	   FROM
12:39:11 2646  	     GIFT_CERTIFICATE gc
12:39:11 2647  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
12:39:11 2648  	   WHERE
12:39:11 2649  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
12:39:11 2650  
12:39:11 2651  EXCEPTION
12:39:11 2652  WHEN BAD_INVOICE_ID THEN
12:39:11 2653  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2654  	   SPROC_NAME, 'No such invoice');
12:39:11 2655  WHEN OTHERS THEN
12:39:11 2656  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2658  END GET_GC_BY_PURCH_INVOICE_ID;
12:39:11 2659  
12:39:11 2660  
12:39:11 2661  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
12:39:11 2662  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:11 2663  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
12:39:11 2664  ) AS
12:39:11 2665  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
12:39:11 2666  -- VARIABLES
12:39:11 2667  temp_invoice_id NUMBER;
12:39:11 2668  -- EXCEPTIONS
12:39:11 2669  BAD_INVOICE_ID EXCEPTION;
12:39:11 2670  BEGIN
12:39:11 2671  
12:39:11 2672  	 BEGIN
12:39:11 2673  	   SELECT
12:39:11 2674  	     I.ID into temp_invoice_id
12:39:11 2675  	   FROM
12:39:11 2676  	     INVOICE I
12:39:11 2677  	   WHERE
12:39:11 2678  	     I.ID = in_invoice_id;
12:39:11 2679  	   EXCEPTION
12:39:11 2680  	     WHEN NO_DATA_FOUND THEN
12:39:11 2681  	       RAISE BAD_INVOICE_ID;
12:39:11 2682  	 END;
12:39:11 2683  
12:39:11 2684  	 BEGIN
12:39:11 2685  	   SELECT
12:39:11 2686  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
12:39:11 2687  	   FROM
12:39:11 2688  	     GIFT_CERTIFICATE
12:39:11 2689  	   WHERE
12:39:11 2690  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
12:39:11 2691  	   EXCEPTION
12:39:11 2692  	     WHEN NO_DATA_FOUND THEN
12:39:11 2693  	       out_gift_certificate_id := NULL;
12:39:11 2694  	 END;
12:39:11 2695  
12:39:11 2696  EXCEPTION
12:39:11 2697  WHEN BAD_INVOICE_ID THEN
12:39:11 2698  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2699  	   SPROC_NAME, 'No such invoice');
12:39:11 2700  WHEN OTHERS THEN
12:39:11 2701  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2702  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2703  END GET_GC_ID_BY_PURCH_INVOICE_ID;
12:39:11 2704  
12:39:11 2705  /******************************************************************************/
12:39:11 2706  
12:39:11 2707  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
12:39:11 2708  	 /*in_group_id		      IN NUMBER  -- TODO: should we pass group_id here?*/
12:39:11 2709  	 in_old_fin_instrument_id   IN NUMBER,
12:39:11 2710  	 in_old_fin_instrument_type IN NUMBER,
12:39:11 2711  	 in_new_fin_instrument_id   IN NUMBER,
12:39:11 2712  	 in_new_fin_instrument_type IN NUMBER,
12:39:11 2713  	 in_updated_by		    IN VARCHAR2
12:39:11 2714  ) AS
12:39:11 2715  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
12:39:11 2716  -- variables
12:39:11 2717  temp_out_transaction_id NUMBER;
12:39:11 2718  temp_out_charge_id      NUMBER;
12:39:11 2719  var_accounts_count      NUMBER;
12:39:11 2720  -- EXCEPTIONS
12:39:11 2721  BAD_OLD_CC   EXCEPTION;
12:39:11 2722  BAD_OLD_PP   EXCEPTION;
12:39:11 2723  BAD_OLD_TYPE EXCEPTION;
12:39:11 2724  BAD_NEW_CC   EXCEPTION;
12:39:11 2725  BAD_NEW_PP   EXCEPTION;
12:39:11 2726  BAD_NEW_TYPE EXCEPTION;
12:39:11 2727  DIFFERENT_OWNERS EXCEPTION;
12:39:11 2728  BEGIN
12:39:11 2729  
12:39:11 2730  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
12:39:11 2731  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 2732  	     -- throw exception: bad old credit card
12:39:11 2733  	     RAISE BAD_OLD_CC;
12:39:11 2734  	   END IF;
12:39:11 2735  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
12:39:11 2736  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 2737  	     -- throw exception: bad old paypal
12:39:11 2738  	     RAISE BAD_OLD_PP;
12:39:11 2739  	   END IF;
12:39:11 2740  	 ELSE
12:39:11 2741  	   -- throw exception: bad instrument type
12:39:11 2742  	   RAISE BAD_OLD_TYPE;
12:39:11 2743  	 END IF;
12:39:11 2744  
12:39:11 2745  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
12:39:11 2746  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 2747  	     -- throw exception: bad new credit card
12:39:11 2748  	     RAISE BAD_NEW_CC;
12:39:11 2749  	   END IF;
12:39:11 2750  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
12:39:11 2751  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:11 2752  	     -- throw exception: bad new paypal
12:39:11 2753  	     RAISE BAD_NEW_PP;
12:39:11 2754  	   END IF;
12:39:11 2755  	 ELSE
12:39:11 2756  	   -- throw exception: bad new instrument type
12:39:11 2757  	   RAISE BAD_NEW_TYPE;
12:39:11 2758  	 END IF;
12:39:11 2759  
12:39:11 2760  	 -- Check that owner of both instruments - same man
12:39:11 2761  
12:39:11 2762  	 SELECT count(1) into var_accounts_count FROM (
12:39:11 2763  	   SELECT
12:39:11 2764  	     CC.ACCOUNT_ID
12:39:11 2765  	   FROM
12:39:11 2766  	     CREDIT_CARD CC
12:39:11 2767  	   WHERE
12:39:11 2768  	     (
12:39:11 2769  	       CC.ID = in_old_fin_instrument_id
12:39:11 2770  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
12:39:11 2771  	     )
12:39:11 2772  	     OR
12:39:11 2773  	     (
12:39:11 2774  	       CC.ID = in_new_fin_instrument_id
12:39:11 2775  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
12:39:11 2776  	     )
12:39:11 2777  	   UNION
12:39:11 2778  	   SELECT
12:39:11 2779  	     PP.ACCOUNT_ID
12:39:11 2780  	   FROM
12:39:11 2781  	     PAYPAL PP
12:39:11 2782  	   WHERE
12:39:11 2783  	     (
12:39:11 2784  	       PP.ID = in_old_fin_instrument_id
12:39:11 2785  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
12:39:11 2786  	     )
12:39:11 2787  	     OR
12:39:11 2788  	     (
12:39:11 2789  	       PP.ID = in_new_fin_instrument_id
12:39:11 2790  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
12:39:11 2791  	     )
12:39:11 2792  	 )
12:39:11 2793  	 WHERE
12:39:11 2794  	   account_id IS NOT NULL;
12:39:11 2795  
12:39:11 2796  	 IF (var_accounts_count > 1) THEN
12:39:11 2797  	   -- Throw exception: different owners of instruments
12:39:11 2798  	   RAISE DIFFERENT_OWNERS;
12:39:11 2799  	 END IF;
12:39:11 2800  
12:39:11 2801  	 FOR f_sub IN (
12:39:11 2802  	   select
12:39:11 2803  	     s.id
12:39:11 2804  	   FROM
12:39:11 2805  	     subscription s
12:39:11 2806  	   WHERE
12:39:11 2807  	     (
12:39:11 2808  	       s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE OR
12:39:11 2809  	       s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
12:39:11 2810  	     )
12:39:11 2811  	     AND
12:39:11 2812  	     s.instrument_type_id = in_old_fin_instrument_type AND
12:39:11 2813  	     s.instrument_id = in_old_fin_instrument_id
12:39:11 2814  	 ) LOOP
12:39:11 2815  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
12:39:11 2816  	     in_subscription_id => f_sub.id,
12:39:11 2817  	     in_instrument_type_id => in_new_fin_instrument_type,
12:39:11 2818  	     in_instrument_id => in_new_fin_instrument_id,
12:39:11 2819  	     in_updated_by => in_updated_by
12:39:11 2820  	   );
12:39:11 2821  	 END LOOP;
12:39:11 2822  
12:39:11 2823  	 FOR f_open_charge IN (
12:39:11 2824  	   select
12:39:11 2825  	     ch.id,
12:39:11 2826  	     ch.invoice_id,
12:39:11 2827  	     ch.transaction_id,
12:39:11 2828  	     ch.charge_amount
12:39:11 2829  	   FROM
12:39:11 2830  	     charge ch
12:39:11 2831  	   WHERE
12:39:11 2832  	     ch.instrument_type_id = in_old_fin_instrument_type
12:39:11 2833  	     AND ch.instrument_id = in_old_fin_instrument_id
12:39:11 2834  	     AND ch.charge_status_id = GLOBAL_STATUSES_V16.CHARGE_OPENED
12:39:11 2835  	 ) LOOP
12:39:11 2836  
12:39:11 2837  	   FOR f_pending_transaction IN (
12:39:11 2838  	     select
12:39:11 2839  	       id, transaction_amount, order_id, is_refund
12:39:11 2840  	     from
12:39:11 2841  	       transaction
12:39:11 2842  	     where
12:39:11 2843  	       id = f_open_charge.transaction_id
12:39:11 2844  	       and transaction_status_id = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
12:39:11 2845  	   ) LOOP
12:39:11 2846  	     PROCS_TRANSACTION_V16.CREATE_TRANSACTION (
12:39:11 2847  	       in_transaction_id => NULL,
12:39:11 2848  	       in_status_id  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
12:39:11 2849  	       in_amount     => f_pending_transaction.transaction_amount,
12:39:11 2850  	       in_created_by => in_updated_by,
12:39:11 2851  	       in_order_id   => null,
12:39:11 2852  	       in_is_refund  => f_pending_transaction.is_refund,
12:39:11 2853  	       out_transaction_id => temp_out_transaction_id
12:39:11 2854  	     );
12:39:11 2855  
12:39:11 2856  	     PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
12:39:11 2857  	       in_transaction_id => f_pending_transaction.id,
12:39:11 2858  	       in_updated_by	 => in_updated_by,
12:39:11 2859  	       in_transaction_status_id  => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
12:39:11 2860  	     );
12:39:11 2861  
12:39:11 2862  	     -- Create new charge
12:39:11 2863  	     PROCS_CHARGE_V16.CREATE_CHARGE (
12:39:11 2864  	       in_invoice_id	     => f_open_charge.invoice_id,
12:39:11 2865  	       in_transaction_id     => temp_out_transaction_id,
12:39:11 2866  	       in_instrument_type_id => in_new_fin_instrument_type,
12:39:11 2867  	       in_instrument_id      => in_new_fin_instrument_id,
12:39:11 2868  	       in_charge_amount      => f_open_charge.charge_amount,
12:39:11 2869  	       in_created_by	     => in_updated_by,
12:39:11 2870  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
12:39:11 2871  	       out_charge_id	     => temp_out_charge_id
12:39:11 2872  	     );
12:39:11 2873  	     -- Cancel old charge
12:39:11 2874  	     PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
12:39:11 2875  	       in_charge_id	   => f_open_charge.id,
12:39:11 2876  	       in_updated_by	   => in_updated_by,
12:39:11 2877  	       in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
12:39:11 2878  	     );
12:39:11 2879  
12:39:11 2880  	     PROCS_ADJUSTMENTS_V16.UPDATE_INVOICE_ADJUSTMENT(
12:39:11 2881  	       IN_INVOICE_ID => f_open_charge.invoice_id,
12:39:11 2882  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
12:39:11 2883  	       IN_CHARGE_ID => temp_out_charge_id,
12:39:11 2884  	       IN_UPDATED_BY => in_updated_by
12:39:11 2885  	     );
12:39:11 2886  
12:39:11 2887  	   END LOOP;
12:39:11 2888  	 END LOOP;
12:39:11 2889  
12:39:11 2890  EXCEPTION
12:39:11 2891  WHEN BAD_OLD_CC THEN
12:39:11 2892  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2893  	   SPROC_NAME, 'Trying to switch from non existing credit card');
12:39:11 2894  WHEN BAD_OLD_PP THEN
12:39:11 2895  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2896  	   SPROC_NAME, 'Trying to switch from non existing paypal');
12:39:11 2897  WHEN BAD_OLD_TYPE THEN
12:39:11 2898  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2899  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
12:39:11 2900  WHEN BAD_NEW_CC THEN
12:39:11 2901  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2902  	   SPROC_NAME, 'Trying to switch to non existing credit card');
12:39:11 2903  WHEN BAD_NEW_PP THEN
12:39:11 2904  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2905  	   SPROC_NAME, 'Trying to switch to non existing paypal');
12:39:11 2906  WHEN BAD_NEW_TYPE THEN
12:39:11 2907  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:11 2908  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
12:39:11 2909  WHEN DIFFERENT_OWNERS THEN
12:39:11 2910  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:11 2911  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
12:39:11 2912  WHEN OTHERS THEN
12:39:11 2913  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:11 2914  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:11 2915  END SWITCH_FINANCIAL_INSTRUMENT;
12:39:11 2916  
12:39:11 2917  END PROCS_FIN_INSTRUMENTS_V16;
12:39:11 2918  .
12:39:11 SQL> /

Package body created.

Elapsed: 00:00:00.27
12:39:12 SQL> 
12:39:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V16" AS
12:39:12   2  
12:39:12   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
12:39:12   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
12:39:12   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
12:39:12   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:12   7  ) AS
12:39:12   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
12:39:12   9  BEGIN
12:39:12  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_SUBSCRIPTION_SHARE (
12:39:12  11  	  in_id 		=> in_sub_share_id,
12:39:12  12  	  in_needs_entitlements => in_need_entitlements,
12:39:12  13  	  in_updated_by 	=> in_updater
12:39:12  14  	);
12:39:12  15  END UPDATE_SS_NEED_ENTITLEMENTS;
12:39:12  16  
12:39:12  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
12:39:12  18  	out_result_set OUT SYS_REFCURSOR
12:39:12  19  ) AS
12:39:12  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
12:39:12  21  BEGIN
12:39:12  22  	OPEN out_result_set FOR
12:39:12  23  	SELECT * FROM (
12:39:12  24  	  SELECT DISTINCT
12:39:12  25  	    ga.Subscription_Id,
12:39:12  26  	    A.Group_Id Borrower_Group_Id,
12:39:12  27  	    L.Offer_Id,
12:39:12  28  	    ss.id Subscription_Share_id
12:39:12  29  	  FROM
12:39:12  30  	    Subscription_Share Ss,
12:39:12  31  	    Group_Account Ga,
12:39:12  32  	    Account A,
12:39:12  33  	    License l
12:39:12  34  	  WHERE
12:39:12  35  	    Ss.Group_Account_Id        = ga.id
12:39:12  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V16.TRUE
12:39:12  37  	    AND Ss.Borrower_Account_Id = A.Id
12:39:12  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
12:39:12  39  	    AND ROWNUM <= 5000
12:39:12  40  	  ORDER BY dbms_random.value
12:39:12  41  ) WHERE
12:39:12  42  	ROWNUM <= 1000;
12:39:12  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
12:39:12  44  
12:39:12  45  PROCEDURE EXPIRE_SUB_SHARE(
12:39:12  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
12:39:12  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:12  48  ) AS
12:39:12  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
12:39:12  50  BEGIN
12:39:12  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_SUBSCRIPTION_SHARE (
12:39:12  52  	  in_id 	=> in_sub_share_id,
12:39:12  53  	  in_end_date	=> SYSDATE,
12:39:12  54  	  in_updated_by => in_updater,
12:39:12  55  	  in_needs_entitlements => 1
12:39:12  56  	);
12:39:12  57  END EXPIRE_SUB_SHARE;
12:39:12  58  
12:39:12  59  PROCEDURE EXPIRE_ALL_SHARES (
12:39:12  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
12:39:12  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:12  62  ) AS
12:39:12  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
12:39:12  64  BEGIN
12:39:12  65  	UPDATE SUBSCRIPTION_SHARE SET
12:39:12  66  	  END_DATE = SYSDATE,
12:39:12  67  	  UPDATED_BY = in_updated_by,
12:39:12  68  	  UPDATE_DATE = SYSDATE
12:39:12  69  	WHERE
12:39:12  70  	  GROUP_ACCOUNT_ID = in_group_account_id
12:39:12  71  	AND
12:39:12  72  	  SYSDATE < END_DATE;
12:39:12  73  EXCEPTION
12:39:12  74  	WHEN OTHERS THEN
12:39:12  75  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
12:39:12  77  END EXPIRE_ALL_SHARES;
12:39:12  78  
12:39:12  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
12:39:12  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
12:39:12  81  	in_start	 IN  NUMBER,
12:39:12  82  	in_end		 IN  NUMBER,
12:39:12  83  	in_expired	 IN  NUMBER,
12:39:12  84  	out_result_set	 OUT SYS_REFCURSOR,
12:39:12  85  	out_shares_count OUT NUMBER
12:39:12  86  ) AS
12:39:12  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
12:39:12  88  range_diff NUMBER := 0;
12:39:12  89  upper_bond_diff NUMBER := 0;
12:39:12  90  l_start NUMBER := 0;
12:39:12  91  l_end   NUMBER := 0;
12:39:12  92  BEGIN
12:39:12  93  	--Normalize the end points [START]
12:39:12  94  	IF (in_start IS NULL OR in_start < 0) Then
12:39:12  95  	  l_start := 0;
12:39:12  96  	ELSE
12:39:12  97  	  l_start := in_start;
12:39:12  98  	END IF;
12:39:12  99  
12:39:12 100  	IF (in_end IS NULL) Then
12:39:12 101  	  l_end := 11;
12:39:12 102  	ELSE
12:39:12 103  	  l_end := in_end;
12:39:12 104  	END IF;
12:39:12 105  
12:39:12 106  	l_start := l_start + 1;
12:39:12 107  	l_end	:= l_end   + 1;
12:39:12 108  
12:39:12 109  	range_diff := l_end - l_start;
12:39:12 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
12:39:12 111  
12:39:12 112  	IF (upper_bond_diff > 0) Then
12:39:12 113  	  l_end := l_end - upper_bond_diff;
12:39:12 114  	END IF;
12:39:12 115  	--Normalize the end points [END]
12:39:12 116  
12:39:12 117  	BEGIN
12:39:12 118  	  SELECT
12:39:12 119  	    COUNT(1) INTO out_shares_count
12:39:12 120  	  FROM
12:39:12 121  	    GROUP_ACCOUNT ga,
12:39:12 122  	    SUBSCRIPTION_SHARE ss,
12:39:12 123  	    ACCOUNT a
12:39:12 124  	  WHERE
12:39:12 125  	    a.GROUP_ID		= in_group_id AND
12:39:12 126  	    a.Id		= ss.borrower_account_id And
12:39:12 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
12:39:12 128  	END;
12:39:12 129  
12:39:12 130  	IF in_expired > 0 THEN
12:39:12 131  	BEGIN
12:39:12 132  	    OPEN out_result_set FOR
12:39:12 133  	    SELECT
12:39:12 134  	      *
12:39:12 135  	    FROM
12:39:12 136  	      (SELECT rownum rnum, q.*
12:39:12 137  	       FROM
12:39:12 138  		(SELECT
12:39:12 139  		   ga.SUBSCRIPTION_ID,
12:39:12 140  		   ss.START_DATE,
12:39:12 141  		   ss.END_DATE,
12:39:12 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
12:39:12 143  		 FROM
12:39:12 144  		   GROUP_ACCOUNT ga,
12:39:12 145  		   SUBSCRIPTION_SHARE ss,
12:39:12 146  		   ACCOUNT a,
12:39:12 147  		   SUBSCRIPTION s,
12:39:12 148  		   ACCOUNT a2
12:39:12 149  		 WHERE
12:39:12 150  		   a.GROUP_ID	       = in_group_id AND
12:39:12 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
12:39:12 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
12:39:12 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
12:39:12 154  		   s.ACCOUNT_ID        = a2.ID
12:39:12 155  		) Q
12:39:12 156  	      WHERE rownum <= l_end)
12:39:12 157  	    WHERE rnum >= l_Start;
12:39:12 158  	END;
12:39:12 159  	ELSE
12:39:12 160  	BEGIN
12:39:12 161  	    OPEN out_result_set FOR
12:39:12 162  	    SELECT
12:39:12 163  	      *
12:39:12 164  	    FROM
12:39:12 165  	      (SELECT rownum rnum, q.*
12:39:12 166  	       FROM
12:39:12 167  		(SELECT
12:39:12 168  		   ga.SUBSCRIPTION_ID,
12:39:12 169  		   ss.START_DATE,
12:39:12 170  		   ss.END_DATE,
12:39:12 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
12:39:12 172  		 FROM
12:39:12 173  		   GROUP_ACCOUNT ga,
12:39:12 174  		   SUBSCRIPTION_SHARE ss,
12:39:12 175  		   ACCOUNT a,
12:39:12 176  		   SUBSCRIPTION s,
12:39:12 177  		   ACCOUNT a2
12:39:12 178  		 WHERE
12:39:12 179  		   a.GROUP_ID	       = in_group_id AND
12:39:12 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
12:39:12 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
12:39:12 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
12:39:12 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
12:39:12 184  		   s.ACCOUNT_ID        = a2.ID
12:39:12 185  		) Q
12:39:12 186  	      WHERE rownum <= l_end)
12:39:12 187  	    WHERE rnum >= l_start;
12:39:12 188  	  END;
12:39:12 189  	END IF;
12:39:12 190  EXCEPTION
12:39:12 191  WHEN NO_DATA_FOUND THEN
12:39:12 192  	NULL;
12:39:12 193  WHEN OTHERS THEN
12:39:12 194  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
12:39:12 196  END SUB_SHARE_BY_GROUP_ID;
12:39:12 197  
12:39:12 198  PROCEDURE IS_VALID_IP_ADDRESS (
12:39:12 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:12 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
12:39:12 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
12:39:12 202  	out_is_valid	    OUT NUMBER
12:39:12 203  ) AS
12:39:12 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
12:39:12 205  BEGIN
12:39:12 206  	SELECT
12:39:12 207  	  COUNT(1) INTO out_is_valid
12:39:12 208  	FROM
12:39:12 209  	  GROUP_ACCOUNT_IP_RANGE,
12:39:12 210  	  GROUP_ACCOUNT,
12:39:12 211  	  SUBSCRIPTION,
12:39:12 212  	  OFFER_CHAIN
12:39:12 213  	WHERE
12:39:12 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
12:39:12 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
12:39:12 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
12:39:12 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
12:39:12 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
12:39:12 219  	 (
12:39:12 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
12:39:12 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
12:39:12 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
12:39:12 223  	 ) AND
12:39:12 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE;
12:39:12 225  EXCEPTION
12:39:12 226  WHEN OTHERS THEN
12:39:12 227  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
12:39:12 229  END IS_VALID_IP_ADDRESS;
12:39:12 230  
12:39:12 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
12:39:12 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:12 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
12:39:12 234  	out_is_valid	    OUT NUMBER
12:39:12 235  ) AS
12:39:12 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
12:39:12 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
12:39:12 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
12:39:12 239  BEGIN
12:39:12 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
12:39:12 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
12:39:12 242  
12:39:12 243  	SELECT
12:39:12 244  	  COUNT(1) INTO out_is_valid
12:39:12 245  	FROM
12:39:12 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
12:39:12 247  	  GROUP_ACCOUNT ga,
12:39:12 248  	  SUBSCRIPTION s,
12:39:12 249  	  OFFER_CHAIN oc
12:39:12 250  	WHERE
12:39:12 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
12:39:12 252  	  ga.SUBSCRIPTION_ID = s.ID AND
12:39:12 253  	  s.OFFER_CHAIN_ID = oc.ID AND
12:39:12 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
12:39:12 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
12:39:12 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
12:39:12 257  	  gaed.IS_ACTIVE = 1;
12:39:12 258  EXCEPTION
12:39:12 259  WHEN OTHERS THEN
12:39:12 260  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
12:39:12 262  END IS_VALID_EMAIL_DOMAIN;
12:39:12 263  
12:39:12 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
12:39:12 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
12:39:12 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
12:39:12 267  	out_Result_Set	       OUT Sys_Refcursor
12:39:12 268  ) AS
12:39:12 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
12:39:12 270  BEGIN
12:39:12 271  	BEGIN
12:39:12 272  	   OPEN out_result_set FOR
12:39:12 273  	   SELECT
12:39:12 274  	      ss.ID,
12:39:12 275  	      ss.GROUP_ACCOUNT_ID,
12:39:12 276  	      ss.BORROWER_ACCOUNT_ID,
12:39:12 277  	      ss.IP_ADDRESS,
12:39:12 278  	      ss.START_DATE,
12:39:12 279  	      ss.END_DATE,
12:39:12 280  	      ss.CREATED_BY,
12:39:12 281  	      ss.CREATE_DATE,
12:39:12 282  	      ss.UPDATED_BY,
12:39:12 283  	      ss.UPDATE_DATE,
12:39:12 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
12:39:12 285  	   FROM
12:39:12 286  	     SUBSCRIPTION_SHARE ss,
12:39:12 287  	     ACCOUNT a
12:39:12 288  	   WHERE
12:39:12 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
12:39:12 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
12:39:12 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
12:39:12 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
12:39:12 293  	END;
12:39:12 294  EXCEPTION
12:39:12 295  WHEN OTHERS THEN
12:39:12 296  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
12:39:12 298  END GET_SUBSCRIPTION_SHARE;
12:39:12 299  
12:39:12 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
12:39:12 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
12:39:12 302  	out_result_set	   OUT SYS_REFCURSOR
12:39:12 303  ) As
12:39:12 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
12:39:12 305  BEGIN
12:39:12 306  OPEN out_result_set FOR
12:39:12 307  	SELECT
12:39:12 308  	  ID,
12:39:12 309  	  SUBSCRIPTION_ID,
12:39:12 310  	  GROUP_NAME,
12:39:12 311  	  FIRST_NAME,
12:39:12 312  	  LAST_NAME,
12:39:12 313  	  EMAIL,
12:39:12 314  	  PHONE,
12:39:12 315  	  ORGANIZATION_TYPE,
12:39:12 316  	  SEATS,
12:39:12 317  	  SEAT_TTL_IN_HOURS,
12:39:12 318  	  CREATE_DATE,
12:39:12 319  	  CREATED_BY,
12:39:12 320  	  UPDATE_DATE,
12:39:12 321  	  UPDATED_BY
12:39:12 322  	FROM
12:39:12 323  	  GROUP_ACCOUNT
12:39:12 324  	Where
12:39:12 325  	  Subscription_Id = in_subscription_id;
12:39:12 326  EXCEPTION
12:39:12 327  WHEN OTHERS THEN
12:39:12 328  	Procs_Common_V16.Throw_Exception(APP_EXCEPTION_CODES_V16.Unknown_Error,
12:39:12 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 330  
12:39:12 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
12:39:12 332  
12:39:12 333  PROCEDURE CREATE_GROUP_ACCOUNT (
12:39:12 334  	in_subscription_id	 IN NUMBER,
12:39:12 335  	in_group_name		 IN VARCHAR2,
12:39:12 336  	in_first_name		 IN VARCHAR2,
12:39:12 337  	in_last_name		 IN VARCHAR2,
12:39:12 338  	in_email		 IN VARCHAR2,
12:39:12 339  	in_phone		 IN VARCHAR2,
12:39:12 340  	in_organization_type	 IN VARCHAR2,
12:39:12 341  	in_seats		 IN NUMBER,
12:39:12 342  	in_seat_ttl_in_hours	 IN NUMBER,
12:39:12 343  	in_ip			 IN NUMBER,
12:39:12 344  	in_created_by		 IN VARCHAR2
12:39:12 345  ) AS
12:39:12 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
12:39:12 347  BEGIN
12:39:12 348  
12:39:12 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.CREATE_GROUP_ACCOUNT(
12:39:12 350  	  in_subscription_id => in_subscription_id,
12:39:12 351  	  in_group_name => in_group_name,
12:39:12 352  	  in_first_name => in_first_name,
12:39:12 353  	  in_last_name => in_last_name,
12:39:12 354  	  in_email => in_email,
12:39:12 355  	  in_phone => in_phone,
12:39:12 356  	  in_organization_type => in_organization_type,
12:39:12 357  	  in_seats => in_seats,
12:39:12 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
12:39:12 359  	  in_ip => in_ip,
12:39:12 360  	  in_created_by => in_created_by
12:39:12 361  	);
12:39:12 362  
12:39:12 363  END CREATE_GROUP_ACCOUNT;
12:39:12 364  
12:39:12 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
12:39:12 366  	in_group_account_id IN NUMBER,
12:39:12 367  	in_start	    IN NUMBER,
12:39:12 368  	in_end		    IN NUMBER,
12:39:12 369  	out_Result_Set	    OUT Sys_Refcursor
12:39:12 370  ) AS
12:39:12 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
12:39:12 372  range_diff NUMBER := 0;
12:39:12 373  upper_bond_diff NUMBER := 0;
12:39:12 374  l_start NUMBER := 0;
12:39:12 375  l_end   NUMBER := 0;
12:39:12 376  BEGIN
12:39:12 377  	-- Normalize the end points [START]
12:39:12 378  	IF (in_start IS NULL OR in_start < 0) Then
12:39:12 379  	  l_start := 0;
12:39:12 380  	ELSE
12:39:12 381  	  l_start := in_start;
12:39:12 382  	END IF;
12:39:12 383  
12:39:12 384  	IF (in_end IS NULL) Then
12:39:12 385  	  l_end := 11;
12:39:12 386  	ELSE
12:39:12 387  	  l_end := in_end;
12:39:12 388  	END IF;
12:39:12 389  
12:39:12 390  	l_start := l_start + 1;
12:39:12 391  	l_end	:= l_end   + 1;
12:39:12 392  
12:39:12 393  	range_diff := l_end - l_start;
12:39:12 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
12:39:12 395  
12:39:12 396  	IF (upper_bond_diff > 0) Then
12:39:12 397  	  l_end := l_end - upper_bond_diff;
12:39:12 398  	END IF;
12:39:12 399  	-- Normalize the end points [END]
12:39:12 400  
12:39:12 401  	BEGIN
12:39:12 402  	   OPEN out_result_set FOR
12:39:12 403  	   SELECT *
12:39:12 404  	   FROM
12:39:12 405  	     (SELECT rownum rnum, Q.*
12:39:12 406  	      FROM
12:39:12 407  	       (SELECT
12:39:12 408  		  ss.ID,
12:39:12 409  		  ss.GROUP_ACCOUNT_ID,
12:39:12 410  		  ss.BORROWER_ACCOUNT_ID,
12:39:12 411  		  ss.IP_ADDRESS,
12:39:12 412  		  ss.START_DATE,
12:39:12 413  		  ss.END_DATE,
12:39:12 414  		  ss.CREATED_BY,
12:39:12 415  		  ss.CREATE_DATE,
12:39:12 416  		  ss.UPDATED_BY,
12:39:12 417  		  ss.UPDATE_DATE,
12:39:12 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
12:39:12 419  		FROM
12:39:12 420  		  SUBSCRIPTION_SHARE ss,
12:39:12 421  		  ACCOUNT a,
12:39:12 422  		  LICENSE l,
12:39:12 423  		  GROUP_ACCOUNT ga
12:39:12 424  		WHERE
12:39:12 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
12:39:12 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
12:39:12 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
12:39:12 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
12:39:12 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
12:39:12 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
12:39:12 431  	      ) Q
12:39:12 432  	    WHERE rownum <= l_end)
12:39:12 433  	  WHERE rnum >= l_start;
12:39:12 434  	END;
12:39:12 435  EXCEPTION
12:39:12 436  WHEN OTHERS THEN
12:39:12 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
12:39:12 439  END GET_SUBSCRIPTION_SHARES;
12:39:12 440  
12:39:12 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
12:39:12 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
12:39:12 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
12:39:12 444  	out_result_set	      OUT SYS_REFCURSOR
12:39:12 445  ) AS
12:39:12 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
12:39:12 447  BEGIN
12:39:12 448  	BEGIN
12:39:12 449  	  OPEN out_result_set FOR
12:39:12 450  	  SELECT
12:39:12 451  	    ID,
12:39:12 452  	    SUBSCRIPTION_ID,
12:39:12 453  	    GROUP_NAME,
12:39:12 454  	    FIRST_NAME,
12:39:12 455  	    LAST_NAME,
12:39:12 456  	    EMAIL,
12:39:12 457  	    PHONE,
12:39:12 458  	    ORGANIZATION_TYPE,
12:39:12 459  	    SEATS,
12:39:12 460  	    SEAT_TTL_IN_HOURS,
12:39:12 461  	    CREATE_DATE,
12:39:12 462  	    CREATED_BY,
12:39:12 463  	    UPDATE_DATE,
12:39:12 464  	    UPDATED_BY
12:39:12 465  	  FROM
12:39:12 466  	    GROUP_ACCOUNT
12:39:12 467  	  WHERE
12:39:12 468  	    ID IN (
12:39:12 469  	      SELECT
12:39:12 470  		GROUP_ACCOUNT_ID
12:39:12 471  	      FROM
12:39:12 472  		GROUP_ACCOUNT_IP_RANGE,
12:39:12 473  		GROUP_ACCOUNT,
12:39:12 474  		SUBSCRIPTION,
12:39:12 475  		OFFER_CHAIN
12:39:12 476  	      WHERE
12:39:12 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
12:39:12 478  	      AND
12:39:12 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
12:39:12 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
12:39:12 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
12:39:12 482  	      AND
12:39:12 483  		(
12:39:12 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
12:39:12 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
12:39:12 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
12:39:12 487  		)
12:39:12 488  	      AND
12:39:12 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
12:39:12 490  	    );
12:39:12 491  	  END;
12:39:12 492  EXCEPTION
12:39:12 493  WHEN OTHERS THEN
12:39:12 494  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 496  END GET_GROUP_ACCOUNT_BY_IP;
12:39:12 497  
12:39:12 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
12:39:12 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
12:39:12 500  	out_result_set	    OUT SYS_REFCURSOR
12:39:12 501  ) AS
12:39:12 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
12:39:12 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
12:39:12 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
12:39:12 505  BEGIN
12:39:12 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
12:39:12 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
12:39:12 508  	BEGIN
12:39:12 509  	  OPEN out_result_set FOR
12:39:12 510  	  SELECT
12:39:12 511  	    ID,
12:39:12 512  	    SUBSCRIPTION_ID,
12:39:12 513  	    GROUP_NAME,
12:39:12 514  	    FIRST_NAME,
12:39:12 515  	    LAST_NAME,
12:39:12 516  	    EMAIL,
12:39:12 517  	    PHONE,
12:39:12 518  	    ORGANIZATION_TYPE,
12:39:12 519  	    SEATS,
12:39:12 520  	    SEAT_TTL_IN_HOURS,
12:39:12 521  	    CREATE_DATE,
12:39:12 522  	    CREATED_BY,
12:39:12 523  	    UPDATE_DATE,
12:39:12 524  	    UPDATED_BY
12:39:12 525  	  FROM
12:39:12 526  	    GROUP_ACCOUNT
12:39:12 527  	  WHERE
12:39:12 528  	    ID IN (
12:39:12 529  	      SELECT
12:39:12 530  		GROUP_ACCOUNT_ID
12:39:12 531  	      FROM
12:39:12 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
12:39:12 533  		GROUP_ACCOUNT ga,
12:39:12 534  		SUBSCRIPTION s,
12:39:12 535  		OFFER_CHAIN oc
12:39:12 536  	      WHERE
12:39:12 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
12:39:12 538  		ga.SUBSCRIPTION_ID = s.ID AND
12:39:12 539  		s.OFFER_CHAIN_ID = oc.ID AND
12:39:12 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
12:39:12 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
12:39:12 542  		gaed.IS_ACTIVE = 1
12:39:12 543  	    );
12:39:12 544  	  END;
12:39:12 545  EXCEPTION
12:39:12 546  WHEN OTHERS THEN
12:39:12 547  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
12:39:12 550  
12:39:12 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
12:39:12 552  	in_group_account_id   IN NUMBER,
12:39:12 553  	in_start	      IN NUMBER,
12:39:12 554  	in_end		      IN NUMBER,
12:39:12 555  	in_status	      IN NUMBER,
12:39:12 556  	out_record_count      OUT NUMBER,
12:39:12 557  	out_result_set	      OUT SYS_REFCURSOR
12:39:12 558  ) AS
12:39:12 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
12:39:12 560  range_diff NUMBER := 0;
12:39:12 561  upper_bond_diff NUMBER := 0;
12:39:12 562  l_start NUMBER := 0;
12:39:12 563  l_end   NUMBER := 0;
12:39:12 564  BEGIN
12:39:12 565  	--Normalize the end points [START]
12:39:12 566  	IF (in_start IS NULL OR in_start < 0) Then
12:39:12 567  	  l_start := 0;
12:39:12 568  	ELSE
12:39:12 569  	  l_start := in_start;
12:39:12 570  	END IF;
12:39:12 571  
12:39:12 572  	IF (in_end IS NULL) Then
12:39:12 573  	  l_end := 11;
12:39:12 574  	ELSE
12:39:12 575  	  l_end := in_end;
12:39:12 576  	END IF;
12:39:12 577  
12:39:12 578  	l_start := l_start + 1;
12:39:12 579  	l_end	:= l_end   + 1;
12:39:12 580  
12:39:12 581  	range_diff := l_end - l_start;
12:39:12 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
12:39:12 583  
12:39:12 584  	IF (upper_bond_diff > 0) Then
12:39:12 585  	  l_end := l_end - upper_bond_diff;
12:39:12 586  	END IF;
12:39:12 587  	--Normalize the end points [END]
12:39:12 588  
12:39:12 589  	--Total count of records [START]
12:39:12 590  	SELECT
12:39:12 591  	  COUNT(1) INTO out_record_count
12:39:12 592  	FROM
12:39:12 593  	  GROUP_ACCOUNT_IP_RANGE
12:39:12 594  	WHERE
12:39:12 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
12:39:12 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
12:39:12 597  	--Total count of records [END]
12:39:12 598  
12:39:12 599  	OPEN out_result_set FOR
12:39:12 600  	SELECT
12:39:12 601  	  *
12:39:12 602  	FROM
12:39:12 603  	  (SELECT rownum rnum, q.*
12:39:12 604  	   FROM
12:39:12 605  	    (SELECT
12:39:12 606  	       ID,
12:39:12 607  	       GROUP_ACCOUNT_ID,
12:39:12 608  	       MINIMUM_IP_STRING,
12:39:12 609  	       MAXIMUM_IP_STRING,
12:39:12 610  	       GROUP_ACC_IP_RNG_STATUS_ID
12:39:12 611  	     FROM
12:39:12 612  	       GROUP_ACCOUNT_IP_RANGE
12:39:12 613  	     WHERE
12:39:12 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
12:39:12 615  	       (in_status IS NULL OR
12:39:12 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
12:39:12 617  	    ) Q
12:39:12 618  	  WHERE rownum <= l_end)
12:39:12 619  	WHERE rnum >= l_Start;
12:39:12 620  EXCEPTION
12:39:12 621  WHEN OTHERS THEN
12:39:12 622  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
12:39:12 624  END GET_GROUP_ACCOUNT_IP_RANGES;
12:39:12 625  
12:39:12 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
12:39:12 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:12 628  	in_start	      IN NUMBER,
12:39:12 629  	in_end		      IN NUMBER,
12:39:12 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
12:39:12 631  	out_record_count      OUT NUMBER,
12:39:12 632  	out_result_set	      OUT SYS_REFCURSOR
12:39:12 633  ) AS
12:39:12 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
12:39:12 635  range_diff NUMBER := 0;
12:39:12 636  upper_bond_diff NUMBER := 0;
12:39:12 637  l_start NUMBER := 0;
12:39:12 638  l_end   NUMBER := 0;
12:39:12 639  BEGIN
12:39:12 640  	--Normalize the end points [START]
12:39:12 641  	IF (in_start IS NULL OR in_start < 0) Then
12:39:12 642  	  l_start := 0;
12:39:12 643  	ELSE
12:39:12 644  	  l_start := in_start;
12:39:12 645  	END IF;
12:39:12 646  
12:39:12 647  	IF (in_end IS NULL) Then
12:39:12 648  	  l_end := 11;
12:39:12 649  	ELSE
12:39:12 650  	  l_end := in_end;
12:39:12 651  	END IF;
12:39:12 652  
12:39:12 653  	l_start := l_start + 1;
12:39:12 654  	l_end	:= l_end   + 1;
12:39:12 655  
12:39:12 656  	range_diff := l_end - l_start;
12:39:12 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
12:39:12 658  
12:39:12 659  	IF (upper_bond_diff > 0) Then
12:39:12 660  	  l_end := l_end - upper_bond_diff;
12:39:12 661  	END IF;
12:39:12 662  	--Normalize the end points [END]
12:39:12 663  
12:39:12 664  	--Total count of records [START]
12:39:12 665  	SELECT
12:39:12 666  	  COUNT(1) INTO out_record_count
12:39:12 667  	FROM
12:39:12 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
12:39:12 669  	WHERE
12:39:12 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
12:39:12 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
12:39:12 672  	--Total count of records [END]
12:39:12 673  
12:39:12 674  	OPEN out_result_set FOR
12:39:12 675  	SELECT
12:39:12 676  	  *
12:39:12 677  	FROM
12:39:12 678  	  (SELECT rownum rnum, q.*
12:39:12 679  	   FROM
12:39:12 680  	    (SELECT
12:39:12 681  	      ID,
12:39:12 682  	      GROUP_ACCOUNT_ID,
12:39:12 683  	      EMAIL_DOMAIN,
12:39:12 684  	      IS_ACTIVE
12:39:12 685  	     FROM
12:39:12 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
12:39:12 687  	     WHERE
12:39:12 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
12:39:12 689  	       (in_status IS NULL OR
12:39:12 690  		IS_ACTIVE = in_status)
12:39:12 691  	    ) Q
12:39:12 692  	  WHERE rownum <= l_end)
12:39:12 693  	WHERE rnum >= l_Start;
12:39:12 694  
12:39:12 695  EXCEPTION
12:39:12 696  WHEN OTHERS THEN
12:39:12 697  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
12:39:12 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
12:39:12 700  
12:39:12 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
12:39:12 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:12 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:12 704  ) AS
12:39:12 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
12:39:12 706  BEGIN
12:39:12 707  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
12:39:12 708  	    in_group_account_id => in_group_account_id,
12:39:12 709  	    in_updated_by => in_updated_by
12:39:12 710  	  );
12:39:12 711  EXCEPTION
12:39:12 712  WHEN OTHERS THEN
12:39:12 713  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
12:39:12 716  
12:39:12 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
12:39:12 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
12:39:12 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
12:39:12 720  ) AS
12:39:12 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
12:39:12 722  BEGIN
12:39:12 723  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_EMAIL_DOMAIN_BY_ID(
12:39:12 724  	    in_id => in_id,
12:39:12 725  	    in_updated_by => in_updated_by
12:39:12 726  	  );
12:39:12 727  EXCEPTION
12:39:12 728  WHEN OTHERS THEN
12:39:12 729  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
12:39:12 732  
12:39:12 733  PROCEDURE ADD_EMAIL_DOMAIN (
12:39:12 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
12:39:12 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
12:39:12 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
12:39:12 737  ) AS
12:39:12 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
12:39:12 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
12:39:12 740  var_is_dupe NUMBER(1);
12:39:12 741  var_group_account_count NUMBER := 0;
12:39:12 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
12:39:12 743  NOT_GL EXCEPTION;
12:39:12 744  DUPE EXCEPTION;
12:39:12 745  BEGIN
12:39:12 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
12:39:12 747  	  FROM
12:39:12 748  	    GROUP_ACCOUNT,
12:39:12 749  	    SUBSCRIPTION,
12:39:12 750  	    OFFER_CHAIN
12:39:12 751  	  WHERE
12:39:12 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
12:39:12 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
12:39:12 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:12 755  	  ;
12:39:12 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
12:39:12 757  	    RAISE NOT_GL;
12:39:12 758  	  END IF;
12:39:12 759  
12:39:12 760  	  --check if email domain already exists
12:39:12 761  	  SELECT count(1) into var_group_account_count
12:39:12 762  	  FROM
12:39:12 763  	      GROUP_ACCOUNT_EMAIL_DOMAIN
12:39:12 764  	  WHERE
12:39:12 765  	      GROUP_ACCOUNT_ID= in_group_account_id AND
12:39:12 766  	      EMAIL_DOMAIN = in_email_domain
12:39:12 767  	  ;
12:39:12 768  
12:39:12 769  	  IF(var_group_account_count > 0) THEN
12:39:12 770  	      SELECT ID into var_id
12:39:12 771  	      FROM
12:39:12 772  		  GROUP_ACCOUNT_EMAIL_DOMAIN
12:39:12 773  	      WHERE
12:39:12 774  		  GROUP_ACCOUNT_ID= in_group_account_id AND
12:39:12 775  		  EMAIL_DOMAIN = in_email_domain AND
12:39:12 776  		  rownum <= 1;
12:39:12 777  	      PROCS_GROUP_ACCOUNT_CRU_V16.ENABLE_EMAIL_DOMAIN_BY_ID(
12:39:12 778  		  in_id => var_id,
12:39:12 779  		  in_updated_by => in_created_by
12:39:12 780  		  );
12:39:12 781  	  ELSE
12:39:12 782  	      PROCS_GROUP_ACCOUNT_CRU_V16.ADD_EMAIL_DOMAIN(
12:39:12 783  		  in_group_account_id => in_group_account_id,
12:39:12 784  		  in_email_domain => in_email_domain,
12:39:12 785  		      in_is_active => GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT,
12:39:12 786  		  in_created_by => in_created_by
12:39:12 787  	      );
12:39:12 788  	  END IF;
12:39:12 789  
12:39:12 790  EXCEPTION
12:39:12 791  WHEN NOT_GL THEN
12:39:12 792  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:12 793  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
12:39:12 794  WHEN OTHERS THEN
12:39:12 795  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 796  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 797  END ADD_EMAIL_DOMAIN;
12:39:12 798  
12:39:12 799  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
12:39:12 800  	in_group_account_id    IN NUMBER,
12:39:12 801  	in_borrower_account_id IN NUMBER,
12:39:12 802  	in_ip_address	       IN VARCHAR2,
12:39:12 803  	in_email_domain        IN VARCHAR2,
12:39:12 804  	in_created_by	       IN VARCHAR2
12:39:12 805  ) AS
12:39:12 806  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
12:39:12 807  ga_ttl_in_hours NUMBER := NULL;
12:39:12 808  start_date DATE := NULL;
12:39:12 809  end_date DATE := NULL;
12:39:12 810  BEGIN
12:39:12 811  	start_date := sysdate;
12:39:12 812  	end_date   := GLOBAL_CONSTANTS_V16.MAX_DATE;
12:39:12 813  
12:39:12 814  	BEGIN
12:39:12 815  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
12:39:12 816  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
12:39:12 817  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
12:39:12 818  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
12:39:12 819  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
12:39:12 820  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
12:39:12 821  	EXCEPTION
12:39:12 822  	  WHEN no_data_found THEN
12:39:12 823  	    ga_ttl_in_hours := NULL;
12:39:12 824  	END;
12:39:12 825  
12:39:12 826  	IF (ga_ttl_in_hours IS NOT NULL) THEN
12:39:12 827  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
12:39:12 828  	END IF;
12:39:12 829  
12:39:12 830  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.CREATE_SUBSCRIPTION_SHARE(
12:39:12 831  	  in_group_account_id => in_group_account_id,
12:39:12 832  	  in_borrower_account_id => in_borrower_account_id,
12:39:12 833  	  in_ip_address => in_ip_address,
12:39:12 834  	  in_email_domain => in_email_domain,
12:39:12 835  	  in_start_date => start_date,
12:39:12 836  	  in_end_date => end_date,
12:39:12 837  	  in_created_by => in_created_by
12:39:12 838  	);
12:39:12 839  END CREATE_SUBSCRIPTION_SHARE;
12:39:12 840  
12:39:12 841  
12:39:12 842  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
12:39:12 843  	in_group_account_id   IN NUMBER,
12:39:12 844  	out_occupied_seats   OUT NUMBER
12:39:12 845  ) AS
12:39:12 846  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
12:39:12 847  BEGIN
12:39:12 848  	SELECT
12:39:12 849  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
12:39:12 850  	FROM dual;
12:39:12 851  EXCEPTION
12:39:12 852  WHEN OTHERS THEN
12:39:12 853  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 854  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 855  END GET_NUM_OCCUPIED_GROUP_SEATS;
12:39:12 856  
12:39:12 857  
12:39:12 858  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
12:39:12 859  	in_group_account_id   IN NUMBER
12:39:12 860  ) RETURN NUMBER IS
12:39:12 861  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
12:39:12 862  num_seats NUMBER;
12:39:12 863  BEGIN
12:39:12 864  	SELECT
12:39:12 865  	  COUNT(1) INTO num_seats
12:39:12 866  	FROM
12:39:12 867  	  SUBSCRIPTION_SHARE
12:39:12 868  	WHERE
12:39:12 869  	  GROUP_ACCOUNT_ID = in_group_account_id AND
12:39:12 870  	  SYSDATE BETWEEN START_DATE AND END_DATE;
12:39:12 871  	RETURN num_seats;
12:39:12 872  EXCEPTION
12:39:12 873  WHEN OTHERS THEN
12:39:12 874  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 875  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 876  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
12:39:12 877  
12:39:12 878  -- *********************************************************************
12:39:12 879  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
12:39:12 880  -- *********************************************************************
12:39:12 881  -- I'm debating if this should be in a different package, but right now
12:39:12 882  -- I'm too lazy to move this else where.
12:39:12 883  -- *********************************************************************
12:39:12 884  
12:39:12 885  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
12:39:12 886  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:12 887  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
12:39:12 888  ) AS
12:39:12 889  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
12:39:12 890  BEGIN
12:39:12 891  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_IP_RANGES_BY_GA_ID(
12:39:12 892  	    in_group_account_id => in_group_account_id,
12:39:12 893  	    in_updated_by => in_updated_by
12:39:12 894  	  );
12:39:12 895  EXCEPTION
12:39:12 896  WHEN OTHERS THEN
12:39:12 897  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 899  END DISABLE_IP_RANGES_BY_GA_ID;
12:39:12 900  
12:39:12 901  PROCEDURE DISABLE_IP_RANGE_BY_ID (
12:39:12 902  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
12:39:12 903  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
12:39:12 904  ) AS
12:39:12 905  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
12:39:12 906  BEGIN
12:39:12 907  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_IP_RANGE_BY_ID(
12:39:12 908  	    in_id => in_id,
12:39:12 909  	    in_updated_by => in_updated_by
12:39:12 910  	  );
12:39:12 911  EXCEPTION
12:39:12 912  WHEN OTHERS THEN
12:39:12 913  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 915  END DISABLE_IP_RANGE_BY_ID;
12:39:12 916  
12:39:12 917  PROCEDURE ADD_IP_RANGE (
12:39:12 918  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
12:39:12 919  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
12:39:12 920  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
12:39:12 921  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
12:39:12 922  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
12:39:12 923  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
12:39:12 924  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
12:39:12 925  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
12:39:12 926  ) AS
12:39:12 927  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
12:39:12 928  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
12:39:12 929  var_is_dupe NUMBER(1);
12:39:12 930  NOT_GL EXCEPTION;
12:39:12 931  DUPE EXCEPTION;
12:39:12 932  BEGIN
12:39:12 933  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
12:39:12 934  	  FROM
12:39:12 935  	    GROUP_ACCOUNT,
12:39:12 936  	    SUBSCRIPTION,
12:39:12 937  	    OFFER_CHAIN
12:39:12 938  	  WHERE
12:39:12 939  	    GROUP_ACCOUNT.ID = in_group_account_id AND
12:39:12 940  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
12:39:12 941  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:12 942  	  ;
12:39:12 943  	  IF(var_ga_type != 'GL') THEN
12:39:12 944  	    RAISE NOT_GL;
12:39:12 945  	  END IF;
12:39:12 946  
12:39:12 947  	  PROCS_GROUP_ACCOUNT_CRU_V16.ADD_IP_RANGE(
12:39:12 948  	    in_group_account_id => in_group_account_id,
12:39:12 949  	    in_minimum_ip_string => in_minimum_ip_string,
12:39:12 950  	    in_minimum_ip_low => in_minimum_ip_low,
12:39:12 951  	    in_minimum_ip_high => in_minimum_ip_high,
12:39:12 952  	    in_maximum_ip_string => in_maximum_ip_string,
12:39:12 953  	    in_maximum_ip_low => in_maximum_ip_low,
12:39:12 954  	    in_maximum_ip_high => in_maximum_ip_high,
12:39:12 955  	    in_created_by => in_created_by
12:39:12 956  	  );
12:39:12 957  
12:39:12 958  	  -- Check for overlapping ip address range after insert.  Note that if another
12:39:12 959  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
12:39:12 960  	  SELECT count(1) into var_is_dupe
12:39:12 961  	  FROM
12:39:12 962  	    GROUP_ACCOUNT_IP_RANGE
12:39:12 963  	  WHERE
12:39:12 964  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE AND
12:39:12 965  		((
12:39:12 966  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
12:39:12 967  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
12:39:12 968  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
12:39:12 969  		) OR
12:39:12 970  
12:39:12 971  		(
12:39:12 972  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
12:39:12 973  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
12:39:12 974  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
12:39:12 975  		)) AND
12:39:12 976  	    ROWNUM < 3;
12:39:12 977  
12:39:12 978  	  If(var_is_dupe > 1) THEN
12:39:12 979  	    RAISE DUPE;
12:39:12 980  	  END IF;
12:39:12 981  EXCEPTION
12:39:12 982  WHEN NOT_GL THEN
12:39:12 983  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:12 984  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
12:39:12 985  WHEN DUPE THEN
12:39:12 986  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:12 987  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
12:39:12 988  WHEN OTHERS THEN
12:39:12 989  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 990  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 991  END ADD_IP_RANGE;
12:39:12 992  
12:39:12 993  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
12:39:12 994  	in_group_account_id IN NUMBER,
12:39:12 995  	out_group_id OUT NUMBER
12:39:12 996  ) AS
12:39:12 997  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
12:39:12 998  BEGIN
12:39:12 999  	SELECT
12:39:12 1000  	   a.group_id into out_group_id
12:39:12 1001  	 FROM
12:39:12 1002  	   account a,
12:39:12 1003  	   subscription s,
12:39:12 1004  	   group_account ga
12:39:12 1005  	 WHERE
12:39:12 1006  	   a.id = s.account_id and
12:39:12 1007  	   s.id = ga.subscription_id and
12:39:12 1008  	   ga.id = in_group_account_id and
12:39:12 1009  	   rownum < 2
12:39:12 1010  	 ;
12:39:12 1011  EXCEPTION
12:39:12 1012  WHEN NO_DATA_FOUND THEN
12:39:12 1013  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1014  	   SPROC_NAME, 'Bad group_account_id');
12:39:12 1015  WHEN OTHERS THEN
12:39:12 1016  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1017  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1018  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
12:39:12 1019  
12:39:12 1020  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
12:39:12 1021  	 in_group_account_ip_range_id IN NUMBER,
12:39:12 1022  	 out_group_id OUT NUMBER
12:39:12 1023  ) AS
12:39:12 1024  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
12:39:12 1025  BEGIN
12:39:12 1026  	 SELECT
12:39:12 1027  	   a.group_id into out_group_id
12:39:12 1028  	 FROM
12:39:12 1029  	   account a,
12:39:12 1030  	   subscription s,
12:39:12 1031  	   group_account ga,
12:39:12 1032  	   group_account_ip_range ir
12:39:12 1033  	 WHERE
12:39:12 1034  	   a.id = s.account_id and
12:39:12 1035  	   s.id = ga.subscription_id and
12:39:12 1036  	   ga.id = ir.group_account_id and
12:39:12 1037  	   ir.id = in_group_account_ip_range_id and
12:39:12 1038  	   rownum < 2
12:39:12 1039  	 ;
12:39:12 1040  EXCEPTION
12:39:12 1041  WHEN NO_DATA_FOUND THEN
12:39:12 1042  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1043  	   SPROC_NAME, 'Bad group_account_ip_range_id');
12:39:12 1044  WHEN OTHERS THEN
12:39:12 1045  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1046  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1047  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
12:39:12 1048  
12:39:12 1049  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
12:39:12 1050  	 in_group_account_email_dom_id IN NUMBER,
12:39:12 1051  	 out_group_id OUT NUMBER
12:39:12 1052  ) AS
12:39:12 1053  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
12:39:12 1054  BEGIN
12:39:12 1055  	 SELECT
12:39:12 1056  	   a.group_id into out_group_id
12:39:12 1057  	 FROM
12:39:12 1058  	   account a,
12:39:12 1059  	   subscription s,
12:39:12 1060  	   group_account ga,
12:39:12 1061  	   group_account_email_domain ir
12:39:12 1062  	 WHERE
12:39:12 1063  	   a.id = s.account_id and
12:39:12 1064  	   s.id = ga.subscription_id and
12:39:12 1065  	   ga.id = ir.group_account_id and
12:39:12 1066  	   ir.id = in_group_account_email_dom_id and
12:39:12 1067  	   rownum < 2
12:39:12 1068  	 ;
12:39:12 1069  EXCEPTION
12:39:12 1070  WHEN NO_DATA_FOUND THEN
12:39:12 1071  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1072  	   SPROC_NAME, 'Bad group_account_ip_range_id');
12:39:12 1073  WHEN OTHERS THEN
12:39:12 1074  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1075  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1076  END GET_GRP_ID_BY_EMAIL_DOM_ID;
12:39:12 1077  
12:39:12 1078  PROCEDURE UPDATE_GROUP_ACCOUNT (
12:39:12 1079  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
12:39:12 1080  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
12:39:12 1081  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
12:39:12 1082  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
12:39:12 1083  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
12:39:12 1084  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
12:39:12 1085  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
12:39:12 1086  ) AS
12:39:12 1087  BEGIN
12:39:12 1088  	 PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_GROUP_ACCOUNT(
12:39:12 1089  	   in_group_account_id => in_group_account_id,
12:39:12 1090  	   in_group_name => in_group_name,
12:39:12 1091  	   in_first_name => in_first_name,
12:39:12 1092  	   in_last_name => in_last_name,
12:39:12 1093  	   in_email => in_email,
12:39:12 1094  	   in_phone => in_phone,
12:39:12 1095  	   in_updated_by => in_updated_by
12:39:12 1096  	 );
12:39:12 1097  END UPDATE_GROUP_ACCOUNT;
12:39:12 1098  
12:39:12 1099  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
12:39:12 1100  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
12:39:12 1101  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
12:39:12 1102  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
12:39:12 1103  ) AS
12:39:12 1104  BEGIN
12:39:12 1105  	 PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_GROUP_ACCOUNT_SEATS(
12:39:12 1106  	   in_group_account_id => in_group_account_id,
12:39:12 1107  	   in_seats => in_seats,
12:39:12 1108  	   in_updated_by => in_updated_by
12:39:12 1109  	 );
12:39:12 1110  END UPDATE_GROUP_ACCOUNT_SEATS;
12:39:12 1111  
12:39:12 1112  END PROCS_GROUP_ACCOUNT_V16;
12:39:12 1113  .
12:39:12 SQL> /

Package body created.

Elapsed: 00:00:00.09
12:39:12 SQL> 
12:39:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V16" AS
12:39:12   2  
12:39:12   3  PROCEDURE TEST_CLEAR_ALL IS
12:39:12   4  BEGIN
12:39:12   5  	DELETE FROM TAX_ADJUSTMENT;
12:39:12   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
12:39:12   7  	DELETE FROM INVOICE_ADJUSTMENT;
12:39:12   8  	DELETE FROM LICENSE;
12:39:12   9  	DELETE FROM OFFER_OFFER_CHAIN;
12:39:12  10  	delete from offer_product_offering;
12:39:12  11  	delete from tax;
12:39:12  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
12:39:12  13  	delete from discount_line_item; -- ?
12:39:12  14  	delete from discount; -- ?
12:39:12  15  	DELETE FROM LINE_ITEM;
12:39:12  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
12:39:12  17  	DELETE FROM PRODUCT_OFFERING;
12:39:12  18  	DELETE FROM PRODUCT;
12:39:12  19  	DELETE FROM INVOICE_NOTE;
12:39:12  20  	DELETE FROM GIFT_CERTIFICATE;
12:39:12  21  	DELETE FROM OFFER;
12:39:12  22  	DELETE FROM OFFER_CHAIN_META_DATA;
12:39:12  23  	DELETE FROM SUBSCRIPTION_NOTE;
12:39:12  24  	DELETE FROM SUBSCRIPTION_META_DATA;
12:39:12  25  	DELETE FROM SUBSCRIPTION;
12:39:12  26  	DELETE FROM CREDIT_CARD;
12:39:12  27  	DELETE FROM FLAGGED_ACCOUNTS;
12:39:12  28  	DELETE FROM ACCOUNT_NOTE;
12:39:12  29  	DELETE FROM ACCOUNT_LOCK;
12:39:12  30  	DELETE FROM ACCOUNT;
12:39:12  31  	DELETE FROM CHARGE;
12:39:12  32  	DELETE FROM TRANSACTION_ATTEMPT;
12:39:12  33  	DELETE FROM CHARGEBACK;
12:39:12  34  	DELETE FROM TRANSACTION;
12:39:12  35  	DELETE FROM INVOICE_NOTE;
12:39:12  36  	DELETE FROM INVOICE;
12:39:12  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
12:39:12  38  	DELETE FROM OFFER_CHAIN;
12:39:12  39  END TEST_CLEAR_ALL;
12:39:12  40  
12:39:12  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
12:39:12  42  BEGIN
12:39:12  43  	DELETE FROM OFFER_OFFER_CHAIN;
12:39:12  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
12:39:12  45  	DELETE FROM TAX;
12:39:12  46  	DELETE FROM PRODUCT_OFFERING;
12:39:12  47  	DELETE FROM PRODUCT;
12:39:12  48  	DELETE FROM OFFER;
12:39:12  49  	DELETE FROM OFFER_CHAIN_META_DATA;
12:39:12  50  	DELETE FROM OFFER_CHAIN;
12:39:12  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
12:39:12  52  END;
12:39:12  53  
12:39:12  54  /******************************************/
12:39:12  55  
12:39:12  56  PROCEDURE TEST_GET_ACCOUNT (
12:39:12  57  	in_group_id	IN NUMBER,
12:39:12  58  	out_result_set	OUT SYS_REFCURSOR
12:39:12  59  ) AS
12:39:12  60  BEGIN
12:39:12  61  
12:39:12  62  	OPEN out_result_set FOR
12:39:12  63  	SELECT *
12:39:12  64  	FROM
12:39:12  65  	  ACCOUNT
12:39:12  66  	WHERE
12:39:12  67  	  ACCOUNT.GROUP_ID = in_group_id;
12:39:12  68  
12:39:12  69  END TEST_GET_ACCOUNT;
12:39:12  70  
12:39:12  71  /*******************************************/
12:39:12  72  
12:39:12  73  PROCEDURE TEST_GET_SUBSCRIPTION (
12:39:12  74  	in_subscription_id IN NUMBER,
12:39:12  75  	out_result_set	   OUT SYS_REFCURSOR
12:39:12  76  ) AS
12:39:12  77  BEGIN
12:39:12  78  	OPEN out_result_set FOR
12:39:12  79  	SELECT *
12:39:12  80  	FROM
12:39:12  81  	  SUBSCRIPTION
12:39:12  82  	WHERE
12:39:12  83  	  SUBSCRIPTION.ID = in_subscription_id;
12:39:12  84  
12:39:12  85  END TEST_GET_SUBSCRIPTION;
12:39:12  86  
12:39:12  87  /***************************************************/
12:39:12  88  
12:39:12  89  PROCEDURE TEST_DELETE_INVOICE (
12:39:12  90  	in_invoice_id IN NUMBER
12:39:12  91  ) AS
12:39:12  92  var_line_item_id_set SYS_REFCURSOR;
12:39:12  93  var_line_item_id	   NUMBER;
12:39:12  94  
12:39:12  95  var_charge_id_set  SYS_REFCURSOR;
12:39:12  96  var_charge_id	 NUMBER;
12:39:12  97  var_transaction_id NUMBER;
12:39:12  98  BEGIN
12:39:12  99  	-- GET ACCOUNT'S LINE_ITEMS
12:39:12 100  	OPEN var_line_item_id_set FOR
12:39:12 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
12:39:12 102  	LOOP
12:39:12 103  	  FETCH var_line_item_id_set into var_line_item_id;
12:39:12 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
12:39:12 105  
12:39:12 106  	  -- DELETE ADJUSTMENTS
12:39:12 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
12:39:12 108  	  LOOP
12:39:12 109  
12:39:12 110  	    -- DELETE DISCOUNT ADJUSTMENTS
12:39:12 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
12:39:12 112  
12:39:12 113  	    -- DELETE TAX ADJUSTMENTS
12:39:12 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
12:39:12 115  	  END LOOP;
12:39:12 116  
12:39:12 117  	  -- DELETE LINE ITEM ADJUSTMENTS
12:39:12 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
12:39:12 119  
12:39:12 120  	  -- DELETE DISCOUNT_LINE_ITEM
12:39:12 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
12:39:12 122  
12:39:12 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
12:39:12 124  
12:39:12 125  	  -- DELETE LINE ITEM
12:39:12 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
12:39:12 127  
12:39:12 128  	END LOOP;
12:39:12 129  
12:39:12 130  	-- DELETE INVOICE ADJUSTMENTS
12:39:12 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
12:39:12 132  
12:39:12 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
12:39:12 134  	OPEN var_charge_id_set FOR
12:39:12 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
12:39:12 136  	LOOP
12:39:12 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
12:39:12 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
12:39:12 139  	  -- DELETE CHARGEBACK
12:39:12 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
12:39:12 141  
12:39:12 142  	  -- DELETE TRANSACTION ATTEMP
12:39:12 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
12:39:12 144  
12:39:12 145  	  -- DELETE CHARGE
12:39:12 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
12:39:12 147  
12:39:12 148  	  -- DELETE TRANSACTION
12:39:12 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
12:39:12 150  	END LOOP;
12:39:12 151  
12:39:12 152  	-- DELETE INVOICE NOTES
12:39:12 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
12:39:12 154  
12:39:12 155  	-- DELETE INVOICE
12:39:12 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
12:39:12 157  END;
12:39:12 158  
12:39:12 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
12:39:12 160  	in_group_id IN NUMBER
12:39:12 161  ) AS
12:39:12 162  -- VARIABLES
12:39:12 163  var_account_id NUMBER;
12:39:12 164  
12:39:12 165  -- CURSORS
12:39:12 166  var_subscription_id_set SYS_REFCURSOR;
12:39:12 167  var_subscription_id     NUMBER;
12:39:12 168  
12:39:12 169  var_license_id_set SYS_REFCURSOR;
12:39:12 170  var_license_id	 NUMBER;
12:39:12 171  var_invoice_id	 NUMBER;
12:39:12 172  
12:39:12 173  var_gift_certificate_id_set SYS_REFCURSOR;
12:39:12 174  var_gift_certificate_id	  NUMBER;
12:39:12 175  var_gc_purchase_invoice_id  NUMBER;
12:39:12 176  BEGIN
12:39:12 177  
12:39:12 178   /*FOR f_account in (
12:39:12 179  	  select id from account where group_id = in_group_id
12:39:12 180  	)
12:39:12 181  	loop
12:39:12 182  
12:39:12 183  	  -- delete account
12:39:12 184  	  delete from account where id = f_account.id;
12:39:12 185  
12:39:12 186  	end loop;*/
12:39:12 187  
12:39:12 188  	BEGIN
12:39:12 189  	  SELECT
12:39:12 190  	    ACCOUNT.ID into var_account_id
12:39:12 191  	  FROM
12:39:12 192  	    ACCOUNT
12:39:12 193  	  WHERE
12:39:12 194  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:12 195  	  EXCEPTION
12:39:12 196  	    WHEN NO_DATA_FOUND THEN
12:39:12 197  	      -- Nothing to do
12:39:12 198  	      RETURN;
12:39:12 199  	END;
12:39:12 200  
12:39:12 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
12:39:12 202  	OPEN var_subscription_id_set FOR
12:39:12 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
12:39:12 204  	LOOP
12:39:12 205  	  FETCH var_subscription_id_set into var_subscription_id;
12:39:12 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
12:39:12 207  
12:39:12 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
12:39:12 209  	  OPEN var_license_id_set FOR
12:39:12 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
12:39:12 211  	  LOOP
12:39:12 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
12:39:12 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
12:39:12 214  
12:39:12 215  
12:39:12 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
12:39:12 217  	    OPEN var_gift_certificate_id_set FOR
12:39:12 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
12:39:12 219  	    LOOP
12:39:12 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
12:39:12 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
12:39:12 222  
12:39:12 223  	      -- DELETE GIFT_CERTIFICATE
12:39:12 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
12:39:12 225  
12:39:12 226  	      -- DELETE LICENSE
12:39:12 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
12:39:12 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
12:39:12 229  	      END IF;
12:39:12 230  
12:39:12 231  	    END LOOP;
12:39:12 232  
12:39:12 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
12:39:12 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
12:39:12 235  
12:39:12 236  	    -- DELETE LICENSE
12:39:12 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
12:39:12 238  
12:39:12 239  	    -- DELETE INVOICE
12:39:12 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
12:39:12 241  	      TEST_DELETE_INVOICE(var_invoice_id);
12:39:12 242  	    END IF;
12:39:12 243  	  END LOOP;
12:39:12 244  
12:39:12 245  	  -- DELETE SUBSCRIPTION_NOTE
12:39:12 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
12:39:12 247  
12:39:12 248  	  -- DELETE SUBSCRIPTION META_DATA
12:39:12 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
12:39:12 250  
12:39:12 251  	  -- DELETE SUBSCRIPTION
12:39:12 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
12:39:12 253  	END LOOP;
12:39:12 254  
12:39:12 255  	-- DELETE CREDIT_CARDS
12:39:12 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
12:39:12 257  
12:39:12 258  	-- DELETE PAYPAL
12:39:12 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
12:39:12 260  
12:39:12 261  	-- DELETE FLAGS
12:39:12 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
12:39:12 263  
12:39:12 264  	-- DELETE ACCOUNT NOTES
12:39:12 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
12:39:12 266  
12:39:12 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
12:39:12 268  	OPEN var_gift_certificate_id_set FOR
12:39:12 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
12:39:12 270  	LOOP
12:39:12 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
12:39:12 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
12:39:12 273  
12:39:12 274  	  -- DELETE GIFT CERTIFICATE
12:39:12 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
12:39:12 276  
12:39:12 277  	  -- DELETE INVOICE
12:39:12 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
12:39:12 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
12:39:12 280  	  END IF;
12:39:12 281  	END LOOP;
12:39:12 282  
12:39:12 283  	-- DELETE LOCKS
12:39:12 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
12:39:12 285  
12:39:12 286  	-- DELETE ACCOUNT
12:39:12 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
12:39:12 288  
12:39:12 289  END TEST_DELETE_USER_ACCOUNT;
12:39:12 290  
12:39:12 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
12:39:12 292  	in_start_group_id IN NUMBER,
12:39:12 293  	in_end_group_id   IN NUMBER
12:39:12 294  ) IS
12:39:12 295   gid ACCOUNT.GROUP_ID%TYPE;
12:39:12 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
12:39:12 297  BEGIN
12:39:12 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
12:39:12 299  	/*
12:39:12 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
12:39:12 301  	LOOP
12:39:12 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
12:39:12 303  	END LOOP;*/
12:39:12 304  	OPEN c(in_start_group_id, in_end_group_id);
12:39:12 305  	WHILE c%ISOPEN LOOP
12:39:12 306  	  FETCH c INTO gid;
12:39:12 307  	  IF c%NOTFOUND THEN
12:39:12 308  	   CLOSE c;
12:39:12 309  	  END IF;
12:39:12 310  	  TEST_DELETE_USER_ACCOUNT(gid);
12:39:12 311  	END LOOP;
12:39:12 312  END;
12:39:12 313  
12:39:12 314  /**********************************************************/
12:39:12 315  
12:39:12 316  FUNCTION TEST_IS_INVOICE_EXISTS(
12:39:12 317  /*
12:39:12 318  1 - exists
12:39:12 319  0 - not exists
12:39:12 320  */
12:39:12 321  	in_invoice_id IN NUMBER
12:39:12 322  ) RETURN NUMBER AS
12:39:12 323  var_invoice_count NUMBER;
12:39:12 324  BEGIN
12:39:12 325  	SELECT
12:39:12 326  	  COUNT(*) into var_invoice_count
12:39:12 327  	FROM
12:39:12 328  	  INVOICE
12:39:12 329  	WHERE
12:39:12 330  	  INVOICE.ID = in_invoice_id;
12:39:12 331  	IF var_invoice_count = 0 THEN
12:39:12 332  	  RETURN 0;
12:39:12 333  	ELSE
12:39:12 334  	  RETURN 1;
12:39:12 335  	END IF;
12:39:12 336  END;
12:39:12 337  
12:39:12 338  PROCEDURE TEST_GET_INVOICE_INFO (
12:39:12 339  	in_invoice_id  IN NUMBER,
12:39:12 340  	out_result_set OUT SYS_REFCURSOR
12:39:12 341  ) AS
12:39:12 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
12:39:12 343  BEGIN
12:39:12 344  
12:39:12 345  	 OPEN out_result_set FOR SELECT
12:39:12 346  	    in_invoice_id AS "INVOICE_ID",
12:39:12 347  	    INVOICE.INVOICE_STATUS_ID,
12:39:12 348  	    PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
12:39:12 349  	    CHARGE.ID AS "CHARGE_ID",
12:39:12 350  	    CHARGE.CHARGE_AMOUNT,
12:39:12 351  	    CHARGE.TRANSACTION_ID,
12:39:12 352  	    TRANSACTION.TRANSACTION_STATUS_ID
12:39:12 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
12:39:12 354  
12:39:12 355  END TEST_GET_INVOICE_INFO;
12:39:12 356  
12:39:12 357  /******************************************************************************/
12:39:12 358  
12:39:12 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
12:39:12 360  	in_offer_chain_id in number
12:39:12 361  ) as
12:39:12 362  begin
12:39:12 363  
12:39:12 364  	for v_offer_chain in (
12:39:12 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
12:39:12 366  	)
12:39:12 367  	loop
12:39:12 368  
12:39:12 369  	  for v_offer in (
12:39:12 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
12:39:12 371  	  )
12:39:12 372  	  loop
12:39:12 373  
12:39:12 374  	    for v_product_offering in (
12:39:12 375  	      select
12:39:12 376  		product_offering.id,
12:39:12 377  		product_offering.product_id
12:39:12 378  	      from
12:39:12 379  		offer_product_offering
12:39:12 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
12:39:12 381  	      where offer_product_offering.offer_id = v_offer.id
12:39:12 382  	    )
12:39:12 383  	    loop
12:39:12 384  
12:39:12 385  	      -- delete product eligibility
12:39:12 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
12:39:12 387  
12:39:12 388  	      -- delete meta data
12:39:12 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
12:39:12 390  
12:39:12 391  	      -- delete product
12:39:12 392  	      delete from product where id = v_product_offering.product_id;
12:39:12 393  
12:39:12 394  	      -- delete product_offering
12:39:12 395  	      delete from product_offering where id = v_product_offering.id;
12:39:12 396  
12:39:12 397  	    end loop;
12:39:12 398  
12:39:12 399  	    -- delete data from offer_product_offering table
12:39:12 400  	    delete from offer_product_offering where offer_id = v_offer.id;
12:39:12 401  
12:39:12 402  	    -- delete data from offer_offer_chain table
12:39:12 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
12:39:12 404  
12:39:12 405  	    -- delete offer
12:39:12 406  	    delete from offer where id = v_offer.id;
12:39:12 407  
12:39:12 408  	  end loop;
12:39:12 409  
12:39:12 410  	  -- delete offer_chain_eligibility
12:39:12 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
12:39:12 412  
12:39:12 413  	  -- delete metadata
12:39:12 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
12:39:12 415  
12:39:12 416  	  -- delete offer chain
12:39:12 417  	  delete from offer_chain where id = v_offer_chain.id;
12:39:12 418  
12:39:12 419  	end loop;
12:39:12 420  
12:39:12 421  end;
12:39:12 422  
12:39:12 423  END PROCS_TEST_V16;
12:39:12 424  .
12:39:12 SQL> /

Package body created.

Elapsed: 00:00:00.05
12:39:12 SQL> 
12:39:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V16" AS
12:39:12   2  
12:39:12   3  REAL_TIME_CANCEL_REASON CONSTANT NUMBER := 41;
12:39:12   4  
12:39:12   5  PROCEDURE ANNOTATE_ACCOUNT (
12:39:12   6  /*
12:39:12   7  Throws exceptions:
12:39:12   8  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12   9  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  10  */
12:39:12  11  	in_group_id   IN  NUMBER,
12:39:12  12  	in_agent_id   IN  NUMBER,
12:39:12  13  	in_note       IN  VARCHAR2,
12:39:12  14  	in_created_by IN  VARCHAR2
12:39:12  15  ) AS
12:39:12  16  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
12:39:12  17  -- VARIABLES
12:39:12  18  var_account_id	  NUMBER;
12:39:12  19  var_account_note_id NUMBER;
12:39:12  20  -- EXCEPTIONS
12:39:12  21  BAD_ACCOUNT_ID EXCEPTION;
12:39:12  22  BEGIN
12:39:12  23  
12:39:12  24  	-- Get account id
12:39:12  25  	BEGIN
12:39:12  26  	  SELECT
12:39:12  27  	    ACCOUNT.ID into var_account_id
12:39:12  28  	  FROM
12:39:12  29  	    ACCOUNT
12:39:12  30  	  WHERE
12:39:12  31  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:12  32  	  EXCEPTION
12:39:12  33  	    WHEN NO_DATA_FOUND THEN
12:39:12  34  	      RAISE BAD_ACCOUNT_ID;
12:39:12  35  	END;
12:39:12  36  
12:39:12  37  	-- Insert new row into ACCOUNT_NOTE table
12:39:12  38  	PROCS_ACCOUNT_CRU_V16.CREATE_ACCOUNT_NOTE(
12:39:12  39  	  inout_account_note_id => var_account_note_id,
12:39:12  40  	  in_agent_id		=> in_agent_id,
12:39:12  41  	  in_account_id 	=> var_account_id,
12:39:12  42  	  in_note		=> in_note,
12:39:12  43  	  in_created_by 	=> in_created_by
12:39:12  44  	);
12:39:12  45  
12:39:12  46  EXCEPTION
12:39:12  47  WHEN BAD_ACCOUNT_ID THEN
12:39:12  48  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12  49  	  SPROC_NAME, 'No such group id');
12:39:12  50  WHEN OTHERS THEN
12:39:12  51  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12  52  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12  53  END ANNOTATE_ACCOUNT;
12:39:12  54  
12:39:12  55  /******************************************************************************/
12:39:12  56  
12:39:12  57  PROCEDURE ASSERT_ACCOUNT_EXISTS (
12:39:12  58  /*
12:39:12  59  Throws exceptions:
12:39:12  60  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12  61  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  62  */
12:39:12  63  	in_group_id IN	NUMBER,
12:39:12  64  	out_exists  OUT NUMBER
12:39:12  65  ) AS
12:39:12  66  -- VARIABLES
12:39:12  67  var_found_id  NUMBER;
12:39:12  68  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
12:39:12  69  BEGIN
12:39:12  70  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
12:39:12  71  	out_exists := GLOBAL_CONSTANTS_V16.TRUE;
12:39:12  72  EXCEPTION
12:39:12  73  WHEN NO_DATA_FOUND THEN
12:39:12  74  	out_exists := GLOBAL_CONSTANTS_V16.FALSE;
12:39:12  75  WHEN OTHERS THEN
12:39:12  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12  78  END ASSERT_ACCOUNT_EXISTS;
12:39:12  79  
12:39:12  80  /******************************************************************************/
12:39:12  81  
12:39:12  82  PROCEDURE DISABLE_ACCOUNT (
12:39:12  83  /*
12:39:12  84  Throws exceptions:
12:39:12  85  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12  87  */
12:39:12  88  	in_group_id   IN NUMBER,
12:39:12  89  	in_updated_by IN VARCHAR2,
12:39:12  90  	in_note       IN VARCHAR2,
12:39:12  91  	in_agent_id   IN NUMBER
12:39:12  92  ) AS
12:39:12  93  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
12:39:12  94  var_account_id	      NUMBER;
12:39:12  95  current_account_status  NUMBER;
12:39:12  96  
12:39:12  97  var_active_subscriptions_num NUMBER;
12:39:12  98  var_pending_invoices_num	   NUMBER;
12:39:12  99  
12:39:12 100  -- EXCEPTIONS
12:39:12 101  BAD_ACOUNT_ID		EXCEPTION;
12:39:12 102  BAD_CURRENT_ACC_STATUS	EXCEPTION;
12:39:12 103  PENDING_INVOICES_FOUND	EXCEPTION;
12:39:12 104  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
12:39:12 105  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
12:39:12 106  EXCEPTION_MESSAGE 	VARCHAR2(1024);
12:39:12 107  BEGIN
12:39:12 108  
12:39:12 109  	-- Get account's status and id
12:39:12 110  	BEGIN
12:39:12 111  	  SELECT
12:39:12 112  	    ACCOUNT.ACCOUNT_STATUS_ID,
12:39:12 113  	    ACCOUNT.ID
12:39:12 114  	  INTO
12:39:12 115  	    current_account_status,
12:39:12 116  	    var_account_id
12:39:12 117  	  FROM ACCOUNT
12:39:12 118  	  WHERE
12:39:12 119  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:12 120  	  EXCEPTION
12:39:12 121  	    WHEN NO_DATA_FOUND THEN
12:39:12 122  	      RAISE BAD_ACOUNT_ID;
12:39:12 123  	END;
12:39:12 124  
12:39:12 125  	-- For now, we can disable account whenever
12:39:12 126  	IF current_account_status = GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
12:39:12 127  	  RAISE BAD_CURRENT_ACC_STATUS;
12:39:12 128  	END IF;
12:39:12 129  
12:39:12 130  	-- Checks for out outstanding balances
12:39:12 131  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
12:39:12 132  	SELECT
12:39:12 133  	  COUNT(*) into var_pending_invoices_num
12:39:12 134  	FROM
12:39:12 135  	  LICENSE
12:39:12 136  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:12 137  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
12:39:12 138  	WHERE
12:39:12 139  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:12 140  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.INVOICE_OPEN FROM DUAL );
12:39:12 141  
12:39:12 142  	IF var_pending_invoices_num > 0 THEN
12:39:12 143  	  RAISE PENDING_INVOICES_FOUND;
12:39:12 144  	END IF;
12:39:12 145  
12:39:12 146  	SELECT
12:39:12 147  	  COUNT(*) into var_active_subscriptions_num
12:39:12 148  	FROM
12:39:12 149  	  SUBSCRIPTION
12:39:12 150  	WHERE
12:39:12 151  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:12 152  	  AND (
12:39:12 153  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:12 154  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
12:39:12 155  	  );
12:39:12 156  
12:39:12 157  	IF var_active_subscriptions_num > 0 THEN
12:39:12 158  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
12:39:12 159  	END IF;
12:39:12 160  
12:39:12 161  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
12:39:12 162  	  in_account_id        => var_account_id,
12:39:12 163  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_DISABLED,
12:39:12 164  	  in_updated_by        => in_updated_by
12:39:12 165  	);
12:39:12 166  
12:39:12 167  	-- Annotate account
12:39:12 168  	IF in_note IS NOT NULL THEN
12:39:12 169  	  BEGIN
12:39:12 170  	    PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
12:39:12 171  	      in_group_id   => in_group_id,
12:39:12 172  	      in_agent_id   => in_agent_id,
12:39:12 173  	      in_note	    => in_note,
12:39:12 174  	      in_created_by => in_updated_by
12:39:12 175  	    );
12:39:12 176  	    EXCEPTION
12:39:12 177  	      WHEN OTHERS THEN
12:39:12 178  		EXCEPTION_MESSAGE := SQLERRM;
12:39:12 179  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
12:39:12 180  	  END;
12:39:12 181  	END IF;
12:39:12 182  
12:39:12 183  EXCEPTION
12:39:12 184  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
12:39:12 185  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 186  	  SPROC_NAME, 'Account has active or suspended subsciptions');
12:39:12 187  WHEN BAD_CURRENT_ACC_STATUS THEN
12:39:12 188  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:12 189  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
12:39:12 190  WHEN PENDING_INVOICES_FOUND THEN
12:39:12 191  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 192  	  SPROC_NAME, 'Opened/Pending invoices founded');
12:39:12 193  WHEN BAD_ACOUNT_ID THEN
12:39:12 194  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 195  	  SPROC_NAME, 'No such account');
12:39:12 196  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
12:39:12 197  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 198  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
12:39:12 199  WHEN OTHERS THEN
12:39:12 200  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 201  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 202  END DISABLE_ACCOUNT;
12:39:12 203  
12:39:12 204  /******************************************************************************/
12:39:12 205  
12:39:12 206  PROCEDURE CREATE_ACTIVE_ACCOUNT(
12:39:12 207  /*
12:39:12 208  Throws exceptions:
12:39:12 209  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 210  APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR
12:39:12 211  */
12:39:12 212  	  in_created_by IN VARCHAR2,
12:39:12 213  	  in_group_id	IN NUMBER
12:39:12 214  ) AS
12:39:12 215  -- VARIABLES
12:39:12 216  SPROC_NAME      CONSTANT VARCHAR2(21) := 'CREATE_ACTIVE_ACCOUNT';
12:39:12 217  new_account_id  NUMBER;
12:39:12 218  temp_group_id   NUMBER;
12:39:12 219  -- EXCEPTIONS
12:39:12 220  GROUP_EXISTS_EXCEPTION EXCEPTION;
12:39:12 221  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:12 222  BEGIN
12:39:12 223  	-- Check if account already exists
12:39:12 224  	BEGIN
12:39:12 225  	  SELECT
12:39:12 226  	    ACCOUNT.GROUP_ID into temp_group_id
12:39:12 227  	  FROM
12:39:12 228  	    ACCOUNT
12:39:12 229  	  WHERE
12:39:12 230  	    ACCOUNT.GROUP_ID = in_group_id
12:39:12 231  	    AND ROWNUM <= 1;
12:39:12 232  
12:39:12 233  	  IF SQL%ROWCOUNT = 1 THEN
12:39:12 234  	    RAISE GROUP_EXISTS_EXCEPTION;
12:39:12 235  	  END IF;
12:39:12 236  
12:39:12 237  	  EXCEPTION
12:39:12 238  	    WHEN NO_DATA_FOUND THEN
12:39:12 239  	      NULL;
12:39:12 240  	END;
12:39:12 241  
12:39:12 242  	-- Insert new row into ACCOUNT table
12:39:12 243  	PROCS_ACCOUNT_CRU_V16.CREATE_ACCOUNT(
12:39:12 244  	  out_account_id	=> new_account_id,
12:39:12 245  	  in_account_status_id	=> GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE,
12:39:12 246  	  in_group_id		=> in_group_id,
12:39:12 247  	  in_created_by 	=> in_created_by,
12:39:12 248  	  in_system_category_id => GLOBAL_ENUMS_V16.SYSTEM_CATEGORY_LIVE
12:39:12 249  	);
12:39:12 250  
12:39:12 251  EXCEPTION
12:39:12 252  WHEN GROUP_EXISTS_EXCEPTION THEN
12:39:12 253  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
12:39:12 254  	  SPROC_NAME, 'Group already exists');
12:39:12 255  WHEN OTHERS THEN
12:39:12 256  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 257  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 258  END CREATE_ACTIVE_ACCOUNT;
12:39:12 259  
12:39:12 260  /******************************************************************************/
12:39:12 261  
12:39:12 262  PROCEDURE REACTIVATE_ACCOUNT (
12:39:12 263  /*
12:39:12 264  Throws exceptions:
12:39:12 265  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 266  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 267  */
12:39:12 268  	in_group_id   IN NUMBER,
12:39:12 269  	in_updated_by IN VARCHAR2,
12:39:12 270  	in_note       IN VARCHAR2,
12:39:12 271  	in_agent_id   IN NUMBER
12:39:12 272  ) AS
12:39:12 273  -- VARIABLES
12:39:12 274  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
12:39:12 275  var_account_id	      NUMBER;
12:39:12 276  current_account_status  NUMBER;
12:39:12 277  
12:39:12 278  -- EXCEPTIONS
12:39:12 279  BAD_CURRENT_ACC_STATUS EXCEPTION;
12:39:12 280  CAN_NOT_CREATE_NOTE    EXCEPTION;
12:39:12 281  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:12 282  BEGIN
12:39:12 283  	-- Get account id, status
12:39:12 284  	SELECT
12:39:12 285  	  ACCOUNT.ACCOUNT_STATUS_ID,
12:39:12 286  	  ACCOUNT.ID
12:39:12 287  	INTO
12:39:12 288  	  current_account_status,
12:39:12 289  	  var_account_id
12:39:12 290  	FROM ACCOUNT
12:39:12 291  	WHERE
12:39:12 292  	  ACCOUNT.GROUP_ID = in_group_id;
12:39:12 293  
12:39:12 294  	IF current_account_status != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
12:39:12 295  	  RAISE BAD_CURRENT_ACC_STATUS;
12:39:12 296  	END IF;
12:39:12 297  
12:39:12 298  	-- Change account status
12:39:12 299  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
12:39:12 300  	  in_account_id        => var_account_id,
12:39:12 301  	  in_updated_by        => in_updated_by,
12:39:12 302  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
12:39:12 303  	);
12:39:12 304  
12:39:12 305  	-- Add note
12:39:12 306  	BEGIN
12:39:12 307  	  PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
12:39:12 308  	    in_group_id   => in_group_id,
12:39:12 309  	    in_agent_id   => in_agent_id,
12:39:12 310  	    in_note	  => in_note,
12:39:12 311  	    in_created_by => in_updated_by
12:39:12 312  	  );
12:39:12 313  	  EXCEPTION
12:39:12 314  	    WHEN OTHERS THEN
12:39:12 315  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:12 316  	      RAISE CAN_NOT_CREATE_NOTE;
12:39:12 317  	END;
12:39:12 318  
12:39:12 319  EXCEPTION
12:39:12 320  WHEN BAD_CURRENT_ACC_STATUS THEN
12:39:12 321  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:12 322  	  SPROC_NAME, 'Current account status is not "frozen"');
12:39:12 323  WHEN NO_DATA_FOUND THEN
12:39:12 324  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 325  	  SPROC_NAME, 'Could not find account with given group ID');
12:39:12 326  WHEN CAN_NOT_CREATE_NOTE THEN
12:39:12 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 328  	  SPROC_NAME, 'Could not annotate account');
12:39:12 329  WHEN OTHERS THEN
12:39:12 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 332  END REACTIVATE_ACCOUNT;
12:39:12 333  
12:39:12 334  /******************************************************************************/
12:39:12 335  
12:39:12 336  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
12:39:12 337  /*
12:39:12 338  IN:
12:39:12 339  instr_status:
12:39:12 340  1 - get active instruments only (default)
12:39:12 341  0 - get inactive instruments only
12:39:12 342  
12:39:12 343  Throws exceptions:
12:39:12 344  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 345  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 346  */
12:39:12 347  	in_group_id	  IN NUMBER,
12:39:12 348  	out_result_cc_set OUT SYS_REFCURSOR,
12:39:12 349  	out_default_id	  OUT NUMBER,
12:39:12 350  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
12:39:12 351  ) AS
12:39:12 352  SPROC_NAME		 CONSTANT VARCHAR2(24) := 'GET_ACCOUNT_CREDIT_CARDS';
12:39:12 353  var_account_id		 NUMBER;
12:39:12 354  var_def_instrument_type_id NUMBER;
12:39:12 355  var_def_instrument_id	 NUMBER;
12:39:12 356  temp_cc_status_id 	 NUMBER;
12:39:12 357  
12:39:12 358  -- Exceptions
12:39:12 359  WRONG_INSTR_EXCEPTION	     EXCEPTION;
12:39:12 360  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
12:39:12 361  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
12:39:12 362  BEGIN
12:39:12 363  
12:39:12 364  	-- Get group id
12:39:12 365  	SELECT
12:39:12 366  	  ACCOUNT.ID INTO var_account_id
12:39:12 367  	FROM
12:39:12 368  	  ACCOUNT
12:39:12 369  	WHERE
12:39:12 370  	  ACCOUNT.GROUP_ID = in_group_id;
12:39:12 371  
12:39:12 372  	-- Check that incoming parameter is correct
12:39:12 373  	BEGIN
12:39:12 374  	  SELECT
12:39:12 375  	    CREDIT_CARD_STATUS.ID into temp_cc_status_id
12:39:12 376  	  FROM
12:39:12 377  	    CREDIT_CARD_STATUS
12:39:12 378  	  WHERE
12:39:12 379  	    CREDIT_CARD_STATUS.ID = in_instr_status;
12:39:12 380  	  EXCEPTION
12:39:12 381  	    WHEN NO_DATA_FOUND THEN
12:39:12 382  	      RAISE WRONG_INSTR_EXCEPTION;
12:39:12 383  	END;
12:39:12 384  
12:39:12 385  	-- Select all crdit cards for given account
12:39:12 386  	OPEN out_result_cc_set FOR
12:39:12 387  	SELECT
12:39:12 388  	  CREDIT_CARD.ID,
12:39:12 389  	  CREDIT_CARD.ACCOUNT_ID,
12:39:12 390  	  CREDIT_CARD.INSTRUMENT_NAME,
12:39:12 391  	  CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
12:39:12 392  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS,
12:39:12 393  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
12:39:12 394  	  CREDIT_CARD.STATE,
12:39:12 395  	  CREDIT_CARD.CITY,
12:39:12 396  	  CREDIT_CARD.POSTAL_CODE,
12:39:12 397  	  CREDIT_CARD.COUNTRY,
12:39:12 398  	  CREDIT_CARD.LAST_FOUR_CC,
12:39:12 399  	  CREDIT_CARD.EXPIRATION_DATE,
12:39:12 400  	  CREDIT_CARD.CREDIT_CARD_TYPE_ID,
12:39:12 401  	  CREDIT_CARD.SECRET_TOKEN,
12:39:12 402  	  CREDIT_CARD.CREATE_DATE,
12:39:12 403  	  CREDIT_CARD.CREATED_BY,
12:39:12 404  	  CREDIT_CARD.UPDATE_DATE,
12:39:12 405  	  CREDIT_CARD.UPDATED_BY,
12:39:12 406  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
12:39:12 407  	  CREDIT_CARD.PRIVATE_FIRST_NAME,
12:39:12 408  	  CREDIT_CARD.PRIVATE_LAST_NAME
12:39:12 409  	FROM
12:39:12 410  	  CREDIT_CARD
12:39:12 411  	WHERE
12:39:12 412  	  CREDIT_CARD.ACCOUNT_ID = var_account_id
12:39:12 413  	  AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_instr_status;
12:39:12 414  
12:39:12 415  	-- Get default credit card if exists
12:39:12 416  	BEGIN
12:39:12 417  	  PROCS_FIN_INSTRUMENTS_V16.GET_DEF_FINANCIAL_INSTRUMENT(
12:39:12 418  	    in_group_id 	   => in_group_id,
12:39:12 419  	    out_instrument_type_id => var_def_instrument_type_id,
12:39:12 420  	    out_instrument_id	   => var_def_instrument_id
12:39:12 421  	  );
12:39:12 422  	  EXCEPTION
12:39:12 423  	    WHEN OTHERS THEN
12:39:12 424  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:12 425  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
12:39:12 426  	END;
12:39:12 427  
12:39:12 428  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
12:39:12 429  	  out_default_id := var_def_instrument_id;
12:39:12 430  	ELSE
12:39:12 431  	  out_default_id := 0;
12:39:12 432  	END IF;
12:39:12 433  
12:39:12 434  EXCEPTION
12:39:12 435  WHEN NO_DATA_FOUND THEN
12:39:12 436  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 437  	  SPROC_NAME, 'No such account');
12:39:12 438  WHEN WRONG_INSTR_EXCEPTION THEN
12:39:12 439  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:12 440  	  SPROC_NAME, 'Wrong instrument status');
12:39:12 441  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
12:39:12 442  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 443  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
12:39:12 444  WHEN OTHERS THEN
12:39:12 445  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 446  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 447  END GET_ACCOUNT_CREDIT_CARDS;
12:39:12 448  
12:39:12 449  /******************************************************************************/
12:39:12 450  
12:39:12 451  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
12:39:12 452  /*
12:39:12 453  IN:
12:39:12 454  instr_status:
12:39:12 455  GLOBAL_CONSTANTS_V16.TRUE - get active instruments only (default)
12:39:12 456  GLOBAL_CONSTANTS_V16.FALSE - get inactive instruments only
12:39:12 457  
12:39:12 458  Throws exceptions:
12:39:12 459  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 460  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 461  */
12:39:12 462  	in_group_id	  IN NUMBER,
12:39:12 463  	out_result_gc_set OUT SYS_REFCURSOR,
12:39:12 464  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
12:39:12 465  ) AS
12:39:12 466  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
12:39:12 467  var_account_id NUMBER;
12:39:12 468  
12:39:12 469  -- Exceptions
12:39:12 470  WRONG_INSTR_EXCEPTION	 EXCEPTION;
12:39:12 471  BEGIN
12:39:12 472  
12:39:12 473  	-- Get account id
12:39:12 474  	SELECT
12:39:12 475  	  ACCOUNT.ID INTO var_account_id
12:39:12 476  	FROM
12:39:12 477  	  ACCOUNT
12:39:12 478  	WHERE
12:39:12 479  	  ACCOUNT.GROUP_ID = in_group_id;
12:39:12 480  
12:39:12 481  	-- Check that incoming data is correct
12:39:12 482  	IF in_instr_status != GLOBAL_CONSTANTS_V16.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V16.FALSE THEN
12:39:12 483  	  RAISE WRONG_INSTR_EXCEPTION;
12:39:12 484  	END IF;
12:39:12 485  
12:39:12 486  	OPEN out_result_gc_set FOR
12:39:12 487  	SELECT
12:39:12 488  	  GIFT_CERTIFICATE.ID,
12:39:12 489  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
12:39:12 490  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
12:39:12 491  	  GIFT_CERTIFICATE.PURCHASE_DATE,
12:39:12 492  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
12:39:12 493  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
12:39:12 494  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
12:39:12 495  	  GIFT_CERTIFICATE.CODE,
12:39:12 496  	  GIFT_CERTIFICATE.CREATE_DATE,
12:39:12 497  	  GIFT_CERTIFICATE.CREATED_BY,
12:39:12 498  	  GIFT_CERTIFICATE.UPDATE_DATE,
12:39:12 499  	  GIFT_CERTIFICATE.UPDATED_BY,
12:39:12 500  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
12:39:12 501  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
12:39:12 502  	  GIFT_CERTIFICATE.SENDER_NAME,
12:39:12 503  	  GIFT_CERTIFICATE.SENDER_EMAIL,
12:39:12 504  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
12:39:12 505  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
12:39:12 506  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
12:39:12 507  	  GIFT_CERTIFICATE.GIFT_MESSAGE
12:39:12 508  	FROM
12:39:12 509  	  GIFT_CERTIFICATE
12:39:12 510  	WHERE
12:39:12 511  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
12:39:12 512  	  AND (
12:39:12 513  		( in_instr_status = GLOBAL_CONSTANTS_V16.TRUE AND
12:39:12 514  		  (
12:39:12 515  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
12:39:12 516  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
12:39:12 517  		  )
12:39:12 518  		)
12:39:12 519  		OR
12:39:12 520  		(
12:39:12 521  		  in_instr_status = GLOBAL_CONSTANTS_V16.FALSE AND
12:39:12 522  		  (
12:39:12 523  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
12:39:12 524  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
12:39:12 525  		  )
12:39:12 526  		)
12:39:12 527  	      );
12:39:12 528  
12:39:12 529  EXCEPTION
12:39:12 530  WHEN NO_DATA_FOUND THEN
12:39:12 531  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 532  	  SPROC_NAME, 'Can not find account with given group id');
12:39:12 533  WHEN WRONG_INSTR_EXCEPTION THEN
12:39:12 534  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:12 535  	  SPROC_NAME, 'Wrong gift certificate type');
12:39:12 536  WHEN OTHERS THEN
12:39:12 537  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 538  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 539  END GET_ACCOUNT_GIFT_CERTIFICATES;
12:39:12 540  
12:39:12 541  /******************************************************************************/
12:39:12 542  
12:39:12 543  PROCEDURE GET_ACCOUNT_INFO  (
12:39:12 544  /*
12:39:12 545  Throws exceptions:
12:39:12 546  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 547  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 548  */
12:39:12 549  	  in_group_id	    IN	NUMBER,
12:39:12 550  	  out_account_info  OUT SYS_REFCURSOR
12:39:12 551  ) AS
12:39:12 552  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
12:39:12 553  var_account_id  NUMBER;
12:39:12 554  BEGIN
12:39:12 555  
12:39:12 556  	-- Get account id
12:39:12 557  	SELECT
12:39:12 558  	  ACCOUNT.ID INTO var_account_id
12:39:12 559  	FROM
12:39:12 560  	  ACCOUNT
12:39:12 561  	WHERE
12:39:12 562  	  ACCOUNT.GROUP_ID = in_group_id;
12:39:12 563  
12:39:12 564  	-- Get account info
12:39:12 565  	OPEN out_account_info FOR
12:39:12 566  	  SELECT
12:39:12 567  	    ACCOUNT.ACCOUNT_STATUS_ID
12:39:12 568  	  FROM ACCOUNT
12:39:12 569  	  WHERE
12:39:12 570  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:12 571  
12:39:12 572  EXCEPTION
12:39:12 573  WHEN NO_DATA_FOUND THEN
12:39:12 574  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 575  	  SPROC_NAME, 'No such account');
12:39:12 576  WHEN OTHERS THEN
12:39:12 577  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 578  	  SPROC_NAME, 'Unknown Error', SQLERRM);
12:39:12 579  END GET_ACCOUNT_INFO;
12:39:12 580  
12:39:12 581  /******************************************************************************/
12:39:12 582  
12:39:12 583  PROCEDURE GET_ACCOUNT_NOTES (
12:39:12 584  /*
12:39:12 585  Throws exceptions:
12:39:12 586  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 587  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 588  */
12:39:12 589  	  in_group_id	 IN  NUMBER,
12:39:12 590  	  out_result_set OUT SYS_REFCURSOR
12:39:12 591  ) AS
12:39:12 592  -- VARIABLES
12:39:12 593  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
12:39:12 594  var_account_id NUMBER;
12:39:12 595  -- EXCEPTIONS
12:39:12 596  BAD_ACCOUNT_ID EXCEPTION;
12:39:12 597  BEGIN
12:39:12 598  
12:39:12 599  	-- Check that account is exists
12:39:12 600  	BEGIN
12:39:12 601  	  SELECT
12:39:12 602  	    ACCOUNT.ID into var_account_id
12:39:12 603  	  FROM
12:39:12 604  	    ACCOUNT
12:39:12 605  	  WHERE
12:39:12 606  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:12 607  	  EXCEPTION
12:39:12 608  	    WHEN NO_DATA_FOUND THEN
12:39:12 609  	      RAISE BAD_ACCOUNT_ID;
12:39:12 610  	END;
12:39:12 611  
12:39:12 612  	-- Get account notes
12:39:12 613  	OPEN out_result_set FOR
12:39:12 614  	SELECT
12:39:12 615  	  ACCOUNT_NOTE.ACCOUNT_ID,
12:39:12 616  	  ACCOUNT_NOTE.AGENT_ID,
12:39:12 617  	  ACCOUNT_NOTE.CREATE_DATE,
12:39:12 618  	  ACCOUNT_NOTE.CREATED_BY,
12:39:12 619  	  ACCOUNT_NOTE.ID,
12:39:12 620  	  ACCOUNT_NOTE.NOTE
12:39:12 621  	FROM
12:39:12 622  	  ACCOUNT_NOTE
12:39:12 623  	WHERE
12:39:12 624  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
12:39:12 625  	ORDER BY
12:39:12 626  	  ACCOUNT_NOTE.CREATE_DATE ASC;
12:39:12 627  
12:39:12 628  EXCEPTION
12:39:12 629  WHEN BAD_ACCOUNT_ID THEN
12:39:12 630  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 631  	  SPROC_NAME, 'No such account');
12:39:12 632  WHEN OTHERS THEN
12:39:12 633  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 634  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 635  END GET_ACCOUNT_NOTES;
12:39:12 636  
12:39:12 637  /******************************************************************************/
12:39:12 638  
12:39:12 639  PROCEDURE GET_ACCOUNT_PAYPALS(
12:39:12 640  /*
12:39:12 641  IN:
12:39:12 642  instr_status:
12:39:12 643  1 - get active instruments only (default)
12:39:12 644  0 - get inactive instruments only
12:39:12 645  
12:39:12 646  Throws exceptions:
12:39:12 647  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 648  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 649  */
12:39:12 650  	in_group_id	  IN  NUMBER,
12:39:12 651  	out_result_pp_set OUT SYS_REFCURSOR,
12:39:12 652  	out_default_id	  OUT NUMBER,
12:39:12 653  	in_instr_status   IN  NUMBER DEFAULT GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
12:39:12 654  ) AS
12:39:12 655  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACCOUNT_PAYPALS';
12:39:12 656  -- VARIABLES
12:39:12 657  var_account_id NUMBER;
12:39:12 658  var_def_instrument_type_id NUMBER;
12:39:12 659  var_def_instrument_id	 NUMBER;
12:39:12 660  -- EXCEPTIONS
12:39:12 661  WRONG_INSTR_EXCEPTION	 EXCEPTION;
12:39:12 662  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
12:39:12 663  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
12:39:12 664  BEGIN
12:39:12 665  
12:39:12 666  	-- Get account id
12:39:12 667  	SELECT
12:39:12 668  	  ACCOUNT.ID INTO var_account_id
12:39:12 669  	FROM
12:39:12 670  	  ACCOUNT
12:39:12 671  	WHERE
12:39:12 672  	  ACCOUNT.GROUP_ID = in_group_id;
12:39:12 673  
12:39:12 674  	-- Check that all passed agruments are valid
12:39:12 675  	IF in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
12:39:12 676  	  AND in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
12:39:12 677  	  AND in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
12:39:12 678  	  RAISE WRONG_INSTR_EXCEPTION;
12:39:12 679  	END IF;
12:39:12 680  
12:39:12 681  	-- Retreiving information about paypals
12:39:12 682  	OPEN out_result_pp_set FOR
12:39:12 683  	SELECT
12:39:12 684  	  PAYPAL.ID,
12:39:12 685  	  PAYPAL.ACCOUNT_ID,
12:39:12 686  	  PAYPAL.INSTRUMENT_NAME,
12:39:12 687  	  PAYPAL.PRIVATE_EMAIL_ADDRESS,
12:39:12 688  	  PAYPAL.CREATE_DATE,
12:39:12 689  	  PAYPAL.CREATED_BY,
12:39:12 690  	  PAYPAL.UPDATE_DATE,
12:39:12 691  	  PAYPAL.UPDATED_BY,
12:39:12 692  	  PAYPAL.PAYPAL_STATUS_ID,
12:39:12 693  	  PAYPAL.PRIVATE_STREET_ADDRESS,
12:39:12 694  	  PAYPAL.PRIVATE_STREET_ADDRESS2,
12:39:12 695  	  PAYPAL.STATE,
12:39:12 696  	  PAYPAL.CITY,
12:39:12 697  	  PAYPAL.POSTAL_CODE,
12:39:12 698  	  PAYPAL.COUNTRY,
12:39:12 699  	  PAYPAL.EXPIRATION_DATE,
12:39:12 700  	  PAYPAL.SECRET_TOKEN
12:39:12 701  	FROM
12:39:12 702  	  PAYPAL
12:39:12 703  	WHERE
12:39:12 704  	  PAYPAL.ACCOUNT_ID = var_account_id
12:39:12 705  	  AND PAYPAL.PAYPAL_STATUS_ID = in_instr_status;
12:39:12 706  
12:39:12 707  	-- Get default credit card if exists
12:39:12 708  	BEGIN
12:39:12 709  	  PROCS_FIN_INSTRUMENTS_V16.GET_DEF_FINANCIAL_INSTRUMENT(
12:39:12 710  	    in_group_id 	   => in_group_id,
12:39:12 711  	    out_instrument_type_id => var_def_instrument_type_id,
12:39:12 712  	    out_instrument_id	   => var_def_instrument_id
12:39:12 713  	  );
12:39:12 714  	  EXCEPTION
12:39:12 715  	    WHEN OTHERS THEN
12:39:12 716  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:12 717  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
12:39:12 718  	END;
12:39:12 719  
12:39:12 720  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
12:39:12 721  	  out_default_id := var_def_instrument_id;
12:39:12 722  	ELSE
12:39:12 723  	  out_default_id := 0;
12:39:12 724  	END IF;
12:39:12 725  
12:39:12 726  EXCEPTION
12:39:12 727  WHEN NO_DATA_FOUND THEN
12:39:12 728  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 729  	  SPROC_NAME, 'Could not find account with given group id');
12:39:12 730  WHEN WRONG_INSTR_EXCEPTION THEN
12:39:12 731  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:12 732  	  SPROC_NAME, 'Bad paypal status id');
12:39:12 733  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
12:39:12 734  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 735  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
12:39:12 736  WHEN OTHERS THEN
12:39:12 737  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 738  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 739  END GET_ACCOUNT_PAYPALS;
12:39:12 740  
12:39:12 741  /******************************************************************************/
12:39:12 742  
12:39:12 743  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
12:39:12 744  /*
12:39:12 745  Throws exceptions:
12:39:12 746  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 747  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 748  */
12:39:12 749  	  in_group_id	 IN  NUMBER,
12:39:12 750  	  in_start_date  IN DATE,
12:39:12 751  	  in_end_date	 IN DATE,
12:39:12 752  	  in_status	 IN NUMBER,
12:39:12 753  	  in_group_account_type IN VARCHAR2,
12:39:12 754  	  out_result_set OUT SYS_REFCURSOR
12:39:12 755  ) AS
12:39:12 756  -- VARIABLES
12:39:12 757  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
12:39:12 758  var_account_id NUMBER;
12:39:12 759  -- EXCEPTIONS
12:39:12 760  BAD_GROUP_ID	      EXCEPTION;
12:39:12 761  BAD_SUBSCRIPTION_STATUS EXCEPTION;
12:39:12 762  BEGIN
12:39:12 763  	-- Check that all passed data is correct
12:39:12 764  	IF in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
12:39:12 765  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
12:39:12 766  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED
12:39:12 767  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
12:39:12 768  	THEN
12:39:12 769  	  RAISE BAD_SUBSCRIPTION_STATUS;
12:39:12 770  	END IF;
12:39:12 771  
12:39:12 772  	-- Get account id
12:39:12 773  	BEGIN
12:39:12 774  	  SELECT
12:39:12 775  	    ACCOUNT.ID INTO var_account_id
12:39:12 776  	  FROM
12:39:12 777  	    ACCOUNT
12:39:12 778  	  WHERE
12:39:12 779  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:12 780  	  EXCEPTION
12:39:12 781  	    WHEN NO_DATA_FOUND THEN
12:39:12 782  	      RAISE BAD_GROUP_ID;
12:39:12 783  	END;
12:39:12 784  
12:39:12 785  	-- Get information about account subscriptions
12:39:12 786  	OPEN out_result_set FOR
12:39:12 787  	SELECT
12:39:12 788  	  in_group_id AS "GROUP_ID",
12:39:12 789  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
12:39:12 790  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
12:39:12 791  	  SUBSCRIPTION.PURCHASE_DATE,
12:39:12 792  	  SUBSCRIPTION.SUSPEND_DATE,
12:39:12 793  	  SUBSCRIPTION.REACTIVATION_DATE,
12:39:12 794  	  SUBSCRIPTION.CANCELLATION_DATE,
12:39:12 795  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
12:39:12 796  	  SUBSCRIPTION.INSTRUMENT_ID,
12:39:12 797  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
12:39:12 798  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
12:39:12 799  	  OFFER_CHAIN.NAME,
12:39:12 800  	  OFFER_CHAIN.DESCRIPTION,
12:39:12 801  	  OFFER_CHAIN.PRODUCT_URI,
12:39:12 802  	  PROCS_SUBSCRIPTION_V16.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
12:39:12 803  	  PROCS_SUBSCRIPTION_V16.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
12:39:12 804  	  PROCS_SUBSCRIPTION_V16.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
12:39:12 805  	  PROCS_SUBSCRIPTION_V16.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
12:39:12 806  	  PROCS_SUBSCRIPTION_V16.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
12:39:12 807  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
12:39:12 808  	  (
12:39:12 809  	    SELECT
12:39:12 810  	      MAX(ENTITLEMENT_END_DATE)
12:39:12 811  	      FROM LICENSE
12:39:12 812  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:12 813  	  )
12:39:12 814  	  as "ENT_END_DATE",
12:39:12 815  	  (
12:39:12 816  	    SELECT
12:39:12 817  	      MIN(START_DATE)
12:39:12 818  	      FROM LICENSE
12:39:12 819  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:12 820  	  )
12:39:12 821  	  as "ENT_START_DATE",
12:39:12 822  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
12:39:12 823  	  GROUP_ACCOUNT.ID GA_ID,
12:39:12 824  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
12:39:12 825  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
12:39:12 826  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
12:39:12 827  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
12:39:12 828  	  GROUP_ACCOUNT.PHONE GA_PHONE,
12:39:12 829  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
12:39:12 830  	  GROUP_ACCOUNT.SEATS GA_SEATS,
12:39:12 831  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
12:39:12 832  	  GROUP_ACCOUNT.IP GA_IP,
12:39:12 833  	  PROCS_SUBSCRIPTION_V16.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE
12:39:12 834  	FROM
12:39:12 835  	  SUBSCRIPTION
12:39:12 836  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:12 837  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
12:39:12 838  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
12:39:12 839  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
12:39:12 840  	WHERE
12:39:12 841  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:12 842  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
12:39:12 843  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
12:39:12 844  	  AND PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
12:39:12 845  	  AND PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
12:39:12 846  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
12:39:12 847  
12:39:12 848  EXCEPTION
12:39:12 849  WHEN BAD_SUBSCRIPTION_STATUS THEN
12:39:12 850  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:12 851  	  SPROC_NAME, 'Bad subscription status');
12:39:12 852  WHEN BAD_GROUP_ID THEN
12:39:12 853  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 854  	  SPROC_NAME, 'Can not find account with given group id');
12:39:12 855  WHEN OTHERS THEN
12:39:12 856  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 857  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 858  END GET_ACCOUNT_SUBSCRIPTIONS;
12:39:12 859  
12:39:12 860  /******************************************************************************/
12:39:12 861  
12:39:12 862  PROCEDURE FREEZE_ACCOUNT (
12:39:12 863  /*
12:39:12 864  Throws exceptions:
12:39:12 865  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 866  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 867  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 868  */
12:39:12 869  	in_group_id   IN NUMBER,
12:39:12 870  	in_updated_by IN VARCHAR2,
12:39:12 871  	in_note       IN VARCHAR2,
12:39:12 872  	in_agent_id   IN NUMBER
12:39:12 873  ) AS
12:39:12 874  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
12:39:12 875  -- VARIABLES
12:39:12 876  var_account_id	    NUMBER;
12:39:12 877  var_account_status_id NUMBER;
12:39:12 878  -- EXCEPTIONS
12:39:12 879  BAD_GROUP_ID	    EXCEPTION;
12:39:12 880  BAD_ACCOUNT_STATUS_ID EXCEPTION;
12:39:12 881  CAN_NOT_CREATE_NOTE   EXCEPTION;
12:39:12 882  EXCEPTION_MESSAGE     VARCHAR2(1024);
12:39:12 883  BEGIN
12:39:12 884  
12:39:12 885  	-- Get account status, account id
12:39:12 886  	BEGIN
12:39:12 887  	  SELECT
12:39:12 888  	    ACCOUNT.ID,
12:39:12 889  	    ACCOUNT.ACCOUNT_STATUS_ID
12:39:12 890  	    into
12:39:12 891  	    var_account_id,
12:39:12 892  	    var_account_status_id
12:39:12 893  	  FROM
12:39:12 894  	    ACCOUNT
12:39:12 895  	  WHERE
12:39:12 896  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:12 897  	  EXCEPTION
12:39:12 898  	    WHEN NO_DATA_FOUND THEN
12:39:12 899  	      RAISE BAD_GROUP_ID;
12:39:12 900  	END;
12:39:12 901  
12:39:12 902  	-- We can freeze only ACTIVE accounts
12:39:12 903  	IF var_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
12:39:12 904  	  AND var_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
12:39:12 905  	  RAISE BAD_ACCOUNT_STATUS_ID;
12:39:12 906  	END IF;
12:39:12 907  
12:39:12 908  	-- Set account status
12:39:12 909  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
12:39:12 910  	  in_account_id        => var_account_id,
12:39:12 911  	  in_updated_by        => in_updated_by,
12:39:12 912  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_FROZEN
12:39:12 913  	);
12:39:12 914  
12:39:12 915  	-- Annotate account
12:39:12 916  	BEGIN
12:39:12 917  	  PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
12:39:12 918  	    in_group_id   => in_group_id,
12:39:12 919  	    in_agent_id   => in_agent_id,
12:39:12 920  	    in_note	  => in_note,
12:39:12 921  	    in_created_by => in_updated_by
12:39:12 922  	  );
12:39:12 923  	  EXCEPTION
12:39:12 924  	    WHEN OTHERS THEN
12:39:12 925  	      EXCEPTION_MESSAGE := SQLERRM;
12:39:12 926  	      RAISE CAN_NOT_CREATE_NOTE;
12:39:12 927  	END;
12:39:12 928  
12:39:12 929  EXCEPTION
12:39:12 930  WHEN BAD_GROUP_ID THEN
12:39:12 931  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 932  	  SPROC_NAME, 'No such group id');
12:39:12 933  WHEN BAD_ACCOUNT_STATUS_ID THEN
12:39:12 934  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
12:39:12 935  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
12:39:12 936  WHEN CAN_NOT_CREATE_NOTE THEN
12:39:12 937  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
12:39:12 938  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
12:39:12 939  WHEN OTHERS THEN
12:39:12 940  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 941  	  SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 942  END FREEZE_ACCOUNT;
12:39:12 943  
12:39:12 944  /******************************************************************************/
12:39:12 945  
12:39:12 946  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
12:39:12 947  /*
12:39:12 948  Throws exceptions:
12:39:12 949  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 950  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 951  */
12:39:12 952  	in_group_id	   IN  NUMBER,
12:39:12 953  	in_subscription_id IN NUMBER,
12:39:12 954  	out_result_set	   OUT SYS_REFCURSOR
12:39:12 955  ) AS
12:39:12 956  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
12:39:12 957  -- VARIABLES
12:39:12 958  var_account_id	   NUMBER;
12:39:12 959  temp_subscription_id NUMBER;
12:39:12 960  -- EXCEPTIONS
12:39:12 961  BAD_GROUP_ID	  EXCEPTION;
12:39:12 962  BAD_SUBSCRIPTION_ID EXCEPTION;
12:39:12 963  BEGIN
12:39:12 964  	-- Get account id
12:39:12 965  	BEGIN
12:39:12 966  	  SELECT
12:39:12 967  	    ACCOUNT.ID into var_account_id
12:39:12 968  	  FROM
12:39:12 969  	    ACCOUNT
12:39:12 970  	  WHERE
12:39:12 971  	    ACCOUNT.GROUP_ID = in_group_id;
12:39:12 972  	  EXCEPTION
12:39:12 973  	    WHEN NO_DATA_FOUND THEN
12:39:12 974  	      RAISE BAD_GROUP_ID;
12:39:12 975  	END;
12:39:12 976  
12:39:12 977  	-- Check that subscription exists
12:39:12 978  	BEGIN
12:39:12 979  	  IF in_subscription_id IS NOT NULL THEN
12:39:12 980  	    SELECT
12:39:12 981  	      SUBSCRIPTION.ID into temp_subscription_id
12:39:12 982  	    FROM
12:39:12 983  	      SUBSCRIPTION
12:39:12 984  	    WHERE
12:39:12 985  	      SUBSCRIPTION.ID = in_subscription_id;
12:39:12 986  	  END IF;
12:39:12 987  	  EXCEPTION
12:39:12 988  	    WHEN NO_DATA_FOUND THEN
12:39:12 989  	      RAISE BAD_SUBSCRIPTION_ID;
12:39:12 990  	END;
12:39:12 991  
12:39:12 992  	OPEN out_result_set FOR
12:39:12 993  	SELECT DISTINCT
12:39:12 994  	  INVOICE.ID as "INVOICE_ID",
12:39:12 995  	  INVOICE.CREATE_DATE,
12:39:12 996  	  INVOICE.INVOICE_STATUS_ID,
12:39:12 997  	  PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
12:39:12 998  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
12:39:12 999  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
12:39:12 1000  	   SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
12:39:12 1001  	   NULL as "GC_CODE",
12:39:12 1002  	   NULL as "GC_ID"
12:39:12 1003  	 FROM
12:39:12 1004  	   LICENSE
12:39:12 1005  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:12 1006  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
12:39:12 1007  	   INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:12 1008  	 WHERE
12:39:12 1009  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:12 1010  	   AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
12:39:12 1011  	   AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
12:39:12 1012  
12:39:12 1013  EXCEPTION
12:39:12 1014  WHEN BAD_GROUP_ID THEN
12:39:12 1015  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1016  	   SPROC_NAME, 'No such account');
12:39:12 1017  WHEN BAD_SUBSCRIPTION_ID THEN
12:39:12 1018  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1019  	   SPROC_NAME, 'No such subscription');
12:39:12 1020  WHEN OTHERS THEN
12:39:12 1021  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1022  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1023  END GET_ACCOUNT_SUBSCR_INVOICES;
12:39:12 1024  
12:39:12 1025  /******************************************************************************/
12:39:12 1026  
12:39:12 1027  PROCEDURE GET_ACCOUNT_GC_INVOICES (
12:39:12 1028  /*
12:39:12 1029  Throws exceptions:
12:39:12 1030  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1031  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1032  */
12:39:12 1033  	 in_group_id	IN  NUMBER,
12:39:12 1034  	 out_result_set OUT SYS_REFCURSOR
12:39:12 1035  ) AS
12:39:12 1036  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
12:39:12 1037  -- VARIABLES
12:39:12 1038  var_account_id NUMBER;
12:39:12 1039  -- EXCEPTIONS
12:39:12 1040  BAD_GROUP_ID EXCEPTION;
12:39:12 1041  BEGIN
12:39:12 1042  	 -- Get account id
12:39:12 1043  	 BEGIN
12:39:12 1044  	   SELECT
12:39:12 1045  	     ACCOUNT.ID into var_account_id
12:39:12 1046  	   FROM
12:39:12 1047  	     ACCOUNT
12:39:12 1048  	   WHERE
12:39:12 1049  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1050  	   EXCEPTION
12:39:12 1051  	     WHEN NO_DATA_FOUND THEN
12:39:12 1052  	       RAISE BAD_GROUP_ID;
12:39:12 1053  	 END;
12:39:12 1054  
12:39:12 1055  	 -- Get invoices
12:39:12 1056  	 OPEN out_result_set FOR
12:39:12 1057  	 SELECT DISTINCT
12:39:12 1058  	   INVOICE.ID as "INVOICE_ID",
12:39:12 1059  	   INVOICE.CREATE_DATE,
12:39:12 1060  	   INVOICE.INVOICE_STATUS_ID,
12:39:12 1061  	   PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
12:39:12 1062  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
12:39:12 1063  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
12:39:12 1064  	   NULL as "SUBSCRIPTION_ID",
12:39:12 1065  	   GIFT_CERTIFICATE.CODE as "GC_CODE",
12:39:12 1066  	   GIFT_CERTIFICATE.ID as "GC_ID"
12:39:12 1067  	 FROM
12:39:12 1068  	   GIFT_CERTIFICATE
12:39:12 1069  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
12:39:12 1070  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:12 1071  	 WHERE
12:39:12 1072  	   ROWNUM <= 100 AND
12:39:12 1073  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
12:39:12 1074  
12:39:12 1075  EXCEPTION
12:39:12 1076  WHEN BAD_GROUP_ID THEN
12:39:12 1077  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1078  	   SPROC_NAME, 'No such account');
12:39:12 1079  WHEN OTHERS THEN
12:39:12 1080  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1081  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1082  END GET_ACCOUNT_GC_INVOICES;
12:39:12 1083  
12:39:12 1084  /******************************************************************************/
12:39:12 1085  -- norlov: #38580
12:39:12 1086  PROCEDURE GET_GC_INVOICE (
12:39:12 1087  /*
12:39:12 1088  Throws exceptions:
12:39:12 1089  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1090  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1091  */
12:39:12 1092  	 in_group_id	IN  NUMBER,
12:39:12 1093  	 in_gc_code	IN  VARCHAR2,
12:39:12 1094  	 out_result_set OUT SYS_REFCURSOR
12:39:12 1095  ) AS
12:39:12 1096  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
12:39:12 1097  -- VARIABLES
12:39:12 1098  var_account_id NUMBER;
12:39:12 1099  -- EXCEPTIONS
12:39:12 1100  BAD_GROUP_ID EXCEPTION;
12:39:12 1101  BEGIN
12:39:12 1102  	 -- Get account id
12:39:12 1103  	 BEGIN
12:39:12 1104  	   SELECT
12:39:12 1105  	     ACCOUNT.ID into var_account_id
12:39:12 1106  	   FROM
12:39:12 1107  	     ACCOUNT
12:39:12 1108  	   WHERE
12:39:12 1109  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1110  	   EXCEPTION
12:39:12 1111  	     WHEN NO_DATA_FOUND THEN
12:39:12 1112  	       RAISE BAD_GROUP_ID;
12:39:12 1113  	 END;
12:39:12 1114  
12:39:12 1115  	 -- Get invoice for the GC
12:39:12 1116  	 OPEN out_result_set FOR
12:39:12 1117  	 SELECT DISTINCT
12:39:12 1118  	   INVOICE.ID as "INVOICE_ID",
12:39:12 1119  	   INVOICE.CREATE_DATE,
12:39:12 1120  	   INVOICE.INVOICE_STATUS_ID,
12:39:12 1121  	   PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
12:39:12 1122  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
12:39:12 1123  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
12:39:12 1124  	   NULL as "SUBSCRIPTION_ID",
12:39:12 1125  	   GIFT_CERTIFICATE.CODE as "GC_CODE"
12:39:12 1126  	 FROM
12:39:12 1127  	   GIFT_CERTIFICATE
12:39:12 1128  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
12:39:12 1129  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
12:39:12 1130  	 WHERE
12:39:12 1131  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
12:39:12 1132  	   AND GIFT_CERTIFICATE.CODE = in_gc_code;
12:39:12 1133  
12:39:12 1134  EXCEPTION
12:39:12 1135  WHEN BAD_GROUP_ID THEN
12:39:12 1136  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1137  	   SPROC_NAME, 'No such account');
12:39:12 1138  WHEN OTHERS THEN
12:39:12 1139  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1140  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1141  END GET_GC_INVOICE;
12:39:12 1142  /******************************************************************************/
12:39:12 1143  
12:39:12 1144  PROCEDURE GET_ACCOUNT_PRODUCTS (
12:39:12 1145  /*
12:39:12 1146  Throws exceptions:
12:39:12 1147  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1148  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1149  */
12:39:12 1150  	 in_group_id	IN  NUMBER,
12:39:12 1151  	 out_result_set OUT SYS_REFCURSOR
12:39:12 1152  ) AS
12:39:12 1153  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
12:39:12 1154  -- VARIABLES
12:39:12 1155  var_account_id NUMBER;
12:39:12 1156  -- EXCEPTIONS
12:39:12 1157  BAD_GROUP_ID EXCEPTION;
12:39:12 1158  BEGIN
12:39:12 1159  	 -- Get account id
12:39:12 1160  	 BEGIN
12:39:12 1161  	   SELECT
12:39:12 1162  	     ACCOUNT.ID into var_account_id
12:39:12 1163  	   FROM
12:39:12 1164  	     ACCOUNT
12:39:12 1165  	   WHERE
12:39:12 1166  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1167  	   EXCEPTION
12:39:12 1168  	     WHEN NO_DATA_FOUND THEN
12:39:12 1169  	       RAISE BAD_GROUP_ID;
12:39:12 1170  	 END;
12:39:12 1171  
12:39:12 1172  	 OPEN out_result_set FOR
12:39:12 1173  	 SELECT DISTINCT
12:39:12 1174  	   PRODUCT.ID,
12:39:12 1175  	   PRODUCT.NAME
12:39:12 1176  	 FROM
12:39:12 1177  	   PRODUCT
12:39:12 1178  	 WHERE
12:39:12 1179  	   PRODUCT.ID IN (
12:39:12 1180  	     SELECT DISTINCT
12:39:12 1181  	       PRODUCT_OFFERING.PRODUCT_ID
12:39:12 1182  	     FROM
12:39:12 1183  	       PRODUCT_OFFERING
12:39:12 1184  	     WHERE
12:39:12 1185  	       PRODUCT_OFFERING.ID IN (
12:39:12 1186  		 SELECT DISTINCT
12:39:12 1187  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
12:39:12 1188  		 FROM
12:39:12 1189  		   OFFER_PRODUCT_OFFERING
12:39:12 1190  		 WHERE
12:39:12 1191  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
12:39:12 1192  		     SELECT DISTINCT
12:39:12 1193  		       OFFER_OFFER_CHAIN.OFFER_ID
12:39:12 1194  		     FROM
12:39:12 1195  		       OFFER_OFFER_CHAIN
12:39:12 1196  		     WHERE
12:39:12 1197  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
12:39:12 1198  			 SELECT DISTINCT
12:39:12 1199  			   SUBSCRIPTION.OFFER_CHAIN_ID
12:39:12 1200  			 FROM
12:39:12 1201  			   SUBSCRIPTION
12:39:12 1202  			 WHERE
12:39:12 1203  			   SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:12 1204  		       )
12:39:12 1205  		   )
12:39:12 1206  	       )
12:39:12 1207  	   );
12:39:12 1208  
12:39:12 1209  EXCEPTION
12:39:12 1210  WHEN BAD_GROUP_ID THEN
12:39:12 1211  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1212  	   SPROC_NAME, 'No such account');
12:39:12 1213  WHEN OTHERS THEN
12:39:12 1214  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1216  END GET_ACCOUNT_PRODUCTS;
12:39:12 1217  
12:39:12 1218  /******************************************************************************/
12:39:12 1219  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
12:39:12 1220  /*
12:39:12 1221  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 1222  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1223  */
12:39:12 1224  	 in_group_id IN NUMBER,
12:39:12 1225  	 out_result_set     OUT SYS_REFCURSOR
12:39:12 1226  ) AS
12:39:12 1227  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
12:39:12 1228  -- VARIABLES
12:39:12 1229  var_account_id NUMBER;
12:39:12 1230  -- EXCEPTIONS
12:39:12 1231  BAD_GROUP_ID EXCEPTION;
12:39:12 1232  BEGIN
12:39:12 1233  	  -- Get account id
12:39:12 1234  	 BEGIN
12:39:12 1235  	   SELECT
12:39:12 1236  	     ACCOUNT.ID into var_account_id
12:39:12 1237  	   FROM
12:39:12 1238  	     ACCOUNT
12:39:12 1239  	   WHERE
12:39:12 1240  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1241  	   EXCEPTION
12:39:12 1242  	     WHEN NO_DATA_FOUND THEN
12:39:12 1243  	       RAISE BAD_GROUP_ID;
12:39:12 1244  	 END;
12:39:12 1245  
12:39:12 1246  	 OPEN out_result_set FOR
12:39:12 1247  	 SELECT DISTINCT
12:39:12 1248  	   PRODUCT_OFFERING.ID,
12:39:12 1249  	   PRODUCT_OFFERING.PRODUCT_ID,
12:39:12 1250  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
12:39:12 1251  	   PRODUCT_OFFERING.UNIT_PRICE,
12:39:12 1252  	   PRODUCT_OFFERING.QUANTITY,
12:39:12 1253  	   PRODUCT_OFFERING.CREATE_DATE,
12:39:12 1254  	   PRODUCT_OFFERING.CREATED_BY,
12:39:12 1255  	   CAPABILITY.ID CAP_ID,
12:39:12 1256  	   CAPABILITY.CODE CAP_CODE,
12:39:12 1257  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
12:39:12 1258  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
12:39:12 1259  	 FROM
12:39:12 1260  	   OFFER_PRODUCT_OFFERING
12:39:12 1261  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
12:39:12 1262  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
12:39:12 1263  	 WHERE
12:39:12 1264  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
12:39:12 1265  	     SELECT DISTINCT
12:39:12 1266  	       OFFER_OFFER_CHAIN.OFFER_ID
12:39:12 1267  	     FROM
12:39:12 1268  	       OFFER_OFFER_CHAIN
12:39:12 1269  	     WHERE
12:39:12 1270  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
12:39:12 1271  		 SELECT DISTINCT
12:39:12 1272  		   SUBSCRIPTION.OFFER_CHAIN_ID
12:39:12 1273  		 FROM
12:39:12 1274  		   SUBSCRIPTION
12:39:12 1275  		 WHERE
12:39:12 1276  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:12 1277  	       )
12:39:12 1278  	   );
12:39:12 1279  
12:39:12 1280  EXCEPTION
12:39:12 1281  WHEN BAD_GROUP_ID THEN
12:39:12 1282  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1283  	   SPROC_NAME, 'No such account');
12:39:12 1284  WHEN OTHERS THEN
12:39:12 1285  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1286  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1287  END GET_ACCOUNT_PROD_OFFERRINGS;
12:39:12 1288  
12:39:12 1289  /******************************************************************************/
12:39:12 1290  
12:39:12 1291  PROCEDURE UPDATE_ACCOUNT_STATUS (
12:39:12 1292  /*
12:39:12 1293  Throws exceptions:
12:39:12 1294  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1295  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1296  */
12:39:12 1297  	 in_account_id	      IN ACCOUNT.ID%TYPE,
12:39:12 1298  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
12:39:12 1299  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
12:39:12 1300  ) AS
12:39:12 1301  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
12:39:12 1302  -- EXCEPTIONS
12:39:12 1303  BAD_ACCOUNT_ID	      EXCEPTION;
12:39:12 1304  BAD_STATUS_ID	      EXCEPTION;
12:39:12 1305  EXCEPTION_MESSAGE      VARCHAR2(1024);
12:39:12 1306  BEGIN
12:39:12 1307  
12:39:12 1308  	 IF in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
12:39:12 1309  	   AND in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN
12:39:12 1310  	   AND in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
12:39:12 1311  	   RAISE BAD_STATUS_ID;
12:39:12 1312  	 END IF;
12:39:12 1313  
12:39:12 1314  	 PROCS_ACCOUNT_CRU_V16.UPDATE_ACCOUNT(
12:39:12 1315  	   in_account_id	=> in_account_id,
12:39:12 1316  	   in_account_status_id => in_account_status_id,
12:39:12 1317  	   in_updated_by	=> in_updated_by
12:39:12 1318  	 );
12:39:12 1319  
12:39:12 1320  	 IF SQL%ROWCOUNT = 0 THEN
12:39:12 1321  	   RAISE BAD_ACCOUNT_ID;
12:39:12 1322  	 END IF;
12:39:12 1323  
12:39:12 1324  EXCEPTION
12:39:12 1325  WHEN BAD_ACCOUNT_ID THEN
12:39:12 1326  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1327  	   SPROC_NAME, 'No such account');
12:39:12 1328  WHEN BAD_STATUS_ID THEN
12:39:12 1329  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:12 1330  	   SPROC_NAME, 'Bad status id');
12:39:12 1331  WHEN OTHERS THEN
12:39:12 1332  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1333  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1334  END UPDATE_ACCOUNT_STATUS;
12:39:12 1335  
12:39:12 1336  /******************************************************************************/
12:39:12 1337  
12:39:12 1338  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
12:39:12 1339  /*
12:39:12 1340  Throws exceptions:
12:39:12 1341  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1342  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1343  */
12:39:12 1344  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
12:39:12 1345  	 out_licenses_num OUT NUMBER
12:39:12 1346  ) AS
12:39:12 1347  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
12:39:12 1348  -- VARIABLES
12:39:12 1349  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
12:39:12 1350  -- EXCEPTIONS
12:39:12 1351  BAD_ACCOUNT_ID EXCEPTION;
12:39:12 1352  BEGIN
12:39:12 1353  
12:39:12 1354  	 BEGIN
12:39:12 1355  	   SELECT
12:39:12 1356  	     ACCOUNT.ID into var_account_id
12:39:12 1357  	   FROM
12:39:12 1358  	     ACCOUNT
12:39:12 1359  	   WHERE
12:39:12 1360  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1361  	   EXCEPTION
12:39:12 1362  	     WHEN NO_DATA_FOUND THEN
12:39:12 1363  	       RAISE BAD_ACCOUNT_ID;
12:39:12 1364  	 END;
12:39:12 1365  
12:39:12 1366  	 SELECT
12:39:12 1367  	   COUNT(LICENSE.ID) into out_licenses_num
12:39:12 1368  	 FROM
12:39:12 1369  	   LICENSE
12:39:12 1370  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:12 1371  	 WHERE
12:39:12 1372  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
12:39:12 1373  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE;
12:39:12 1374  
12:39:12 1375  EXCEPTION
12:39:12 1376  WHEN BAD_ACCOUNT_ID THEN
12:39:12 1377  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1378  	   SPROC_NAME, 'No such group id');
12:39:12 1379  WHEN OTHERS THEN
12:39:12 1380  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1381  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1382  END GET_NEEDS_ENTTL_LICENSES_NUM;
12:39:12 1383  
12:39:12 1384  /******************************************************************************/
12:39:12 1385  
12:39:12 1386  PROCEDURE SET_TAX_EXEMPT (
12:39:12 1387  /*
12:39:12 1388  Throws exceptions:
12:39:12 1389  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1390  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1391  */
12:39:12 1392  	 in_group_id  IN NUMBER,
12:39:12 1393  	 in_exempt_id IN VARCHAR2
12:39:12 1394  ) AS
12:39:12 1395  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
12:39:12 1396  -- VARIABLES
12:39:12 1397  var_account_id NUMBER;
12:39:12 1398  -- EXCEPTIONS
12:39:12 1399  BAD_GROUP_ID EXCEPTION;
12:39:12 1400  BEGIN
12:39:12 1401  
12:39:12 1402  	 BEGIN
12:39:12 1403  	   SELECT
12:39:12 1404  	     ACCOUNT.ID into var_account_id
12:39:12 1405  	   FROM
12:39:12 1406  	     ACCOUNT
12:39:12 1407  	   WHERE
12:39:12 1408  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1409  	   EXCEPTION
12:39:12 1410  	     WHEN NO_DATA_FOUND THEN
12:39:12 1411  	       RAISE BAD_GROUP_ID;
12:39:12 1412  	 END;
12:39:12 1413  
12:39:12 1414  	 UPDATE
12:39:12 1415  	   ACCOUNT
12:39:12 1416  	 SET
12:39:12 1417  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
12:39:12 1418  	 WHERE
12:39:12 1419  	   ACCOUNT.ID = var_account_id;
12:39:12 1420  
12:39:12 1421  EXCEPTION
12:39:12 1422  WHEN BAD_GROUP_ID THEN
12:39:12 1423  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1424  	   SPROC_NAME, 'No such group id');
12:39:12 1425  WHEN OTHERS THEN
12:39:12 1426  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1427  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1428  END SET_TAX_EXEMPT;
12:39:12 1429  
12:39:12 1430  /******************************************************************************/
12:39:12 1431  
12:39:12 1432  PROCEDURE IS_TAX_EXEMPT (
12:39:12 1433  /*
12:39:12 1434  Throws exceptions:
12:39:12 1435  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1436  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1437  Return:
12:39:12 1438  	 GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
12:39:12 1439  	 GLOBAL_CONSTANTS_V16.FALSE else
12:39:12 1440  */
12:39:12 1441  	 in_group_id	   IN NUMBER,
12:39:12 1442  	 out_is_tax_exempt OUT NUMBER
12:39:12 1443  ) AS
12:39:12 1444  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
12:39:12 1445  -- VARIABLES
12:39:12 1446  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
12:39:12 1447  -- EXCEPTIONS
12:39:12 1448  BAD_GROUP_ID EXCEPTION;
12:39:12 1449  BEGIN
12:39:12 1450  
12:39:12 1451  	 BEGIN
12:39:12 1452  	   SELECT
12:39:12 1453  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
12:39:12 1454  	   FROM
12:39:12 1455  	     ACCOUNT
12:39:12 1456  	   WHERE
12:39:12 1457  	     ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1458  	   EXCEPTION
12:39:12 1459  	     WHEN NO_DATA_FOUND THEN
12:39:12 1460  	       RAISE BAD_GROUP_ID;
12:39:12 1461  	 END;
12:39:12 1462  
12:39:12 1463  	 IF var_is_tax_exempt IS NULL THEN
12:39:12 1464  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.FALSE;
12:39:12 1465  	 ELSE
12:39:12 1466  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.TRUE;
12:39:12 1467  	 END IF;
12:39:12 1468  
12:39:12 1469  EXCEPTION
12:39:12 1470  WHEN BAD_GROUP_ID THEN
12:39:12 1471  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1472  	   SPROC_NAME, 'No such group id');
12:39:12 1473  WHEN OTHERS THEN
12:39:12 1474  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1475  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1476  END IS_TAX_EXEMPT;
12:39:12 1477  
12:39:12 1478  /******************************************************************************/
12:39:12 1479  
12:39:12 1480  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
12:39:12 1481  /*
12:39:12 1482  Throws exceptions:
12:39:12 1483  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1484  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1485  */
12:39:12 1486  	 in_account_id IN NUMBER,
12:39:12 1487  	 out_group_id  OUT NUMBER
12:39:12 1488  ) AS
12:39:12 1489  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
12:39:12 1490  BEGIN
12:39:12 1491  
12:39:12 1492  	 SELECT
12:39:12 1493  	   ACCOUNT.GROUP_ID into out_group_id
12:39:12 1494  	 FROM
12:39:12 1495  	   ACCOUNT
12:39:12 1496  	 WHERE
12:39:12 1497  	   ACCOUNT.ID = in_account_id;
12:39:12 1498  
12:39:12 1499  EXCEPTION
12:39:12 1500  WHEN NO_DATA_FOUND THEN
12:39:12 1501  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1502  	   SPROC_NAME, 'No such account');
12:39:12 1503  WHEN OTHERS THEN
12:39:12 1504  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1505  	   SPROC_NAME, 'Unknown error');
12:39:12 1506  END GET_GROUP_ID_BY_ACCOUNT_ID;
12:39:12 1507  
12:39:12 1508  /******************************************************************************/
12:39:12 1509  
12:39:12 1510  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
12:39:12 1511  /*
12:39:12 1512  Throws exceptions:
12:39:12 1513  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1514  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1515  */
12:39:12 1516  	 in_group_id IN NUMBER,
12:39:12 1517  	 out_account_id  OUT NUMBER
12:39:12 1518  ) AS
12:39:12 1519  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
12:39:12 1520  BEGIN
12:39:12 1521  
12:39:12 1522  	 SELECT
12:39:12 1523  	   ACCOUNT.ID into out_account_id
12:39:12 1524  	 FROM
12:39:12 1525  	   ACCOUNT
12:39:12 1526  	 WHERE
12:39:12 1527  	   ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1528  
12:39:12 1529  EXCEPTION
12:39:12 1530  WHEN NO_DATA_FOUND THEN
12:39:12 1531  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1532  	   SPROC_NAME, 'No such account');
12:39:12 1533  WHEN OTHERS THEN
12:39:12 1534  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1535  	   SPROC_NAME, 'Unknown error');
12:39:12 1536  END GET_ACCOUNT_ID_BY_GROUP_ID;
12:39:12 1537  
12:39:12 1538  /******************************************************************************/
12:39:12 1539  
12:39:12 1540  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
12:39:12 1541  /*
12:39:12 1542  This procedure is using for LOCKING only
12:39:12 1543  
12:39:12 1544  Throws exceptions:
12:39:12 1545  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1546  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1547  */
12:39:12 1548  	 in_invoice_id IN NUMBER,
12:39:12 1549  	 out_group_ids OUT SYS_REFCURSOR
12:39:12 1550  ) AS
12:39:12 1551  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
12:39:12 1552  -- VARIABLES
12:39:12 1553  temp_invoice_id		 NUMBER;
12:39:12 1554  var_subscrib_group_id	 NUMBER;
12:39:12 1555  var_gc_purchaser_group_id NUMBER;
12:39:12 1556  var_gc_redeemer_group_id  NUMBER;
12:39:12 1557  -- EXCEPTIONS
12:39:12 1558  BAD_INVOICE_ID	    EXCEPTION;
12:39:12 1559  CAN_NOT_FIND_ACCOUNT EXCEPTION;
12:39:12 1560  BEGIN
12:39:12 1561  
12:39:12 1562  	 BEGIN
12:39:12 1563  	   SELECT
12:39:12 1564  	     INVOICE.ID into temp_invoice_id
12:39:12 1565  	   FROM
12:39:12 1566  	     INVOICE
12:39:12 1567  	   WHERE
12:39:12 1568  	     INVOICE.ID = in_invoice_id;
12:39:12 1569  	   EXCEPTION
12:39:12 1570  	     WHEN NO_DATA_FOUND THEN
12:39:12 1571  	       RAISE BAD_INVOICE_ID;
12:39:12 1572  	 END;
12:39:12 1573  
12:39:12 1574  	 BEGIN
12:39:12 1575  	   SELECT DISTINCT
12:39:12 1576  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
12:39:12 1577  	   FROM
12:39:12 1578  	     ACCOUNT
12:39:12 1579  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
12:39:12 1580  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
12:39:12 1581  	   WHERE
12:39:12 1582  	     LICENSE.INVOICE_ID = in_invoice_id;
12:39:12 1583  	   EXCEPTION
12:39:12 1584  	     WHEN NO_DATA_FOUND THEN
12:39:12 1585  	       var_subscrib_group_id := NULL;
12:39:12 1586  	 END;
12:39:12 1587  
12:39:12 1588  	 IF var_subscrib_group_id IS NULL THEN
12:39:12 1589  	   BEGIN
12:39:12 1590  	     SELECT
12:39:12 1591  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
12:39:12 1592  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
12:39:12 1593  	       into
12:39:12 1594  	       var_gc_purchaser_group_id,
12:39:12 1595  	       var_gc_redeemer_group_id
12:39:12 1596  	     FROM
12:39:12 1597  	       GIFT_CERTIFICATE
12:39:12 1598  	     WHERE
12:39:12 1599  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
12:39:12 1600  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
12:39:12 1601  	     EXCEPTION
12:39:12 1602  	       WHEN NO_DATA_FOUND THEN
12:39:12 1603  		 var_gc_purchaser_group_id := NULL;
12:39:12 1604  		 var_gc_redeemer_group_id  := NULL;
12:39:12 1605  	   END;
12:39:12 1606  	 END IF;
12:39:12 1607  
12:39:12 1608  	 IF var_subscrib_group_id IS NULL
12:39:12 1609  	   AND var_gc_purchaser_group_id IS NULL
12:39:12 1610  	   AND var_gc_redeemer_group_id IS NULL THEN
12:39:12 1611  	     RAISE CAN_NOT_FIND_ACCOUNT;
12:39:12 1612  	 END IF;
12:39:12 1613  
12:39:12 1614  	 OPEN out_group_ids FOR
12:39:12 1615  	 SELECT GROUP_ID FROM (
12:39:12 1616  	   SELECT
12:39:12 1617  	     var_subscrib_group_id as "GROUP_ID"
12:39:12 1618  	   FROM
12:39:12 1619  	     DUAL
12:39:12 1620  	   UNION
12:39:12 1621  	   SELECT
12:39:12 1622  	     var_gc_purchaser_group_id as "GROUP_ID"
12:39:12 1623  	   FROM
12:39:12 1624  	     DUAL
12:39:12 1625  	   UNION
12:39:12 1626  	   SELECT
12:39:12 1627  	     var_gc_redeemer_group_id as "GROUP_ID"
12:39:12 1628  	   FROM
12:39:12 1629  	     DUAL
12:39:12 1630  	 )
12:39:12 1631  	 WHERE
12:39:12 1632  	   GROUP_ID IS NOT NULL;
12:39:12 1633  
12:39:12 1634  EXCEPTION
12:39:12 1635  WHEN BAD_INVOICE_ID THEN
12:39:12 1636  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1637  	   SPROC_NAME, 'No such invoice');
12:39:12 1638  WHEN CAN_NOT_FIND_ACCOUNT THEN
12:39:12 1639  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1640  	   SPROC_NAME, 'Could not find account for given invoice');
12:39:12 1641  WHEN OTHERS THEN
12:39:12 1642  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1643  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1644  END GET_GROUPS_ID_BY_INVOICE_ID;
12:39:12 1645  
12:39:12 1646  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
12:39:12 1647  /*
12:39:12 1648  Throws exceptions:
12:39:12 1649  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1650  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1651  */
12:39:12 1652  	 in_group_id	   IN NUMBER,
12:39:12 1653  	 out_tax_exempt_id OUT VARCHAR2
12:39:12 1654  ) AS
12:39:12 1655  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
12:39:12 1656  -- VARIABLES
12:39:12 1657  -- EXCEPTIONS
12:39:12 1658  BEGIN
12:39:12 1659  
12:39:12 1660  	 SELECT
12:39:12 1661  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
12:39:12 1662  	 FROM
12:39:12 1663  	   ACCOUNT
12:39:12 1664  	 WHERE
12:39:12 1665  	   ACCOUNT.GROUP_ID = in_group_id;
12:39:12 1666  
12:39:12 1667  EXCEPTION
12:39:12 1668  WHEN NO_DATA_FOUND THEN
12:39:12 1669  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1670  	   SPROC_NAME, 'No such account');
12:39:12 1671  WHEN OTHERS THEN
12:39:12 1672  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1673  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1674  END GET_ACCOUNT_TAX_EXEMPT_ID;
12:39:12 1675  
12:39:12 1676  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
12:39:12 1677  /*
12:39:12 1678  Throws exceptions:
12:39:12 1679  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1680  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1681  
12:39:12 1682  Result has two columns:
12:39:12 1683  subscription_id and offer_chain_id
12:39:12 1684  */
12:39:12 1685  	 in_group_id	IN NUMBER,
12:39:12 1686  	 out_result_set OUT SYS_REFCURSOR
12:39:12 1687  ) AS
12:39:12 1688  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
12:39:12 1689  -- Variables
12:39:12 1690  var_account_id NUMBER;
12:39:12 1691  -- Exceptions
12:39:12 1692  BAD_GROUP_ID   EXCEPTION;
12:39:12 1693  BEGIN
12:39:12 1694  
12:39:12 1695  	 BEGIN
12:39:12 1696  	   SELECT
12:39:12 1697  	     ID into var_account_id
12:39:12 1698  	   FROM
12:39:12 1699  	     ACCOUNT
12:39:12 1700  	   WHERE
12:39:12 1701  	     GROUP_ID = in_group_id;
12:39:12 1702  	   EXCEPTION
12:39:12 1703  	     WHEN NO_DATA_FOUND THEN
12:39:12 1704  	       RAISE BAD_GROUP_ID;
12:39:12 1705  	 END;
12:39:12 1706  
12:39:12 1707  	 OPEN out_result_set FOR
12:39:12 1708  	 SELECT
12:39:12 1709  	   S.ID as SUBSCRIPTION_ID,
12:39:12 1710  	   OCHMD.OFFER_CHAIN_ID
12:39:12 1711  	 FROM
12:39:12 1712  	   SUBSCRIPTION S
12:39:12 1713  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
12:39:12 1714  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V16.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
12:39:12 1715  	 WHERE
12:39:12 1716  	   S.ACCOUNT_ID = var_account_id;
12:39:12 1717  
12:39:12 1718  EXCEPTION
12:39:12 1719  WHEN BAD_GROUP_ID THEN
12:39:12 1720  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1721  	   SPROC_NAME, 'No such account');
12:39:12 1722  WHEN OTHERS THEN
12:39:12 1723  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1724  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1725  END GET_UPGRADABLE_SUBSCRIPTIONS;
12:39:12 1726  
12:39:12 1727  /******************************************************************************/
12:39:12 1728  
12:39:12 1729  PROCEDURE GET_USR_ALL_SBSCR_IDS (
12:39:12 1730  /*
12:39:12 1731  Throws exceptions:
12:39:12 1732  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1733  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 1734  
12:39:12 1735  Result has two columns:
12:39:12 1736  subscription_id and offer_chain_id
12:39:12 1737  */
12:39:12 1738  	 in_group_id	    IN NUMBER,
12:39:12 1739  	 out_result_set     OUT SYS_REFCURSOR
12:39:12 1740  ) AS
12:39:12 1741  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
12:39:12 1742  -- VARIABLES
12:39:12 1743  var_account_id NUMBER;
12:39:12 1744  -- EXCEPTIONS
12:39:12 1745  BAD_GROUP_ID EXCEPTION;
12:39:12 1746  BEGIN
12:39:12 1747  
12:39:12 1748  	 BEGIN
12:39:12 1749  	   SELECT
12:39:12 1750  	     A.ID INTO var_account_id
12:39:12 1751  	   FROM
12:39:12 1752  	     ACCOUNT A
12:39:12 1753  	   WHERE
12:39:12 1754  	     A.GROUP_ID = in_group_id;
12:39:12 1755  	   EXCEPTION
12:39:12 1756  	     WHEN NO_DATA_FOUND THEN
12:39:12 1757  	       RAISE BAD_GROUP_ID;
12:39:12 1758  	 END;
12:39:12 1759  
12:39:12 1760  	 OPEN out_result_set FOR
12:39:12 1761  	 SELECT
12:39:12 1762  	   S.ID
12:39:12 1763  	 FROM
12:39:12 1764  	   SUBSCRIPTION S
12:39:12 1765  	 WHERE
12:39:12 1766  	   S.ACCOUNT_ID = var_account_id
12:39:12 1767  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
12:39:12 1768  
12:39:12 1769  EXCEPTION
12:39:12 1770  WHEN BAD_GROUP_ID THEN
12:39:12 1771  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1772  	   SPROC_NAME, 'No such account');
12:39:12 1773  WHEN OTHERS THEN
12:39:12 1774  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1775  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1776  END GET_USR_ALL_SBSCR_IDS;
12:39:12 1777  
12:39:12 1778  /******************************************************************************/
12:39:12 1779  
12:39:12 1780  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
12:39:12 1781  /*
12:39:12 1782  Throws exceptions:
12:39:12 1783  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1784  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1785  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:12 1786  
12:39:12 1787  Result has two columns:
12:39:12 1788  subscription_id and offer_chain_id
12:39:12 1789  */
12:39:12 1790  	 in_group_id	    IN NUMBER,
12:39:12 1791  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
12:39:12 1792  	 out_result_set     OUT SYS_REFCURSOR
12:39:12 1793  ) AS
12:39:12 1794  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
12:39:12 1795  -- VARIABLES
12:39:12 1796  var_account_id NUMBER;
12:39:12 1797  -- EXCEPTIONS
12:39:12 1798  BAD_GROUP_ID	   EXCEPTION;
12:39:12 1799  BAD_OFFER_CHAIN_IDS EXCEPTION;
12:39:12 1800  BEGIN
12:39:12 1801  
12:39:12 1802  	 IF in_offer_chain_ids IS NULL THEN
12:39:12 1803  	   RAISE BAD_OFFER_CHAIN_IDS;
12:39:12 1804  	 END IF;
12:39:12 1805  
12:39:12 1806  	 BEGIN
12:39:12 1807  	   SELECT
12:39:12 1808  	     A.ID INTO var_account_id
12:39:12 1809  	   FROM
12:39:12 1810  	     ACCOUNT A
12:39:12 1811  	   WHERE
12:39:12 1812  	     A.GROUP_ID = in_group_id;
12:39:12 1813  	   EXCEPTION
12:39:12 1814  	     WHEN NO_DATA_FOUND THEN
12:39:12 1815  	       RAISE BAD_GROUP_ID;
12:39:12 1816  	 END;
12:39:12 1817  
12:39:12 1818  	 OPEN out_result_set FOR
12:39:12 1819  	 SELECT
12:39:12 1820  	   S.ID
12:39:12 1821  	 FROM
12:39:12 1822  	   SUBSCRIPTION S
12:39:12 1823  	 WHERE
12:39:12 1824  	   S.ACCOUNT_ID = var_account_id
12:39:12 1825  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
12:39:12 1826  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
12:39:12 1827  
12:39:12 1828  EXCEPTION
12:39:12 1829  WHEN BAD_OFFER_CHAIN_IDS THEN
12:39:12 1830  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
12:39:12 1831  	   SPROC_NAME, 'Offer chains ids parameter is null');
12:39:12 1832  WHEN BAD_GROUP_ID THEN
12:39:12 1833  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 1834  	   SPROC_NAME, 'No such account');
12:39:12 1835  WHEN OTHERS THEN
12:39:12 1836  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1837  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1838  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
12:39:12 1839  
12:39:12 1840  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
12:39:12 1841  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
12:39:12 1842  	 in_expiration_date IN DATE,
12:39:12 1843  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
12:39:12 1844  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
12:39:12 1845  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
12:39:12 1846  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
12:39:12 1847  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
12:39:12 1848  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
12:39:12 1849  	 in_lower_bound IN NUMBER DEFAULT 1,
12:39:12 1850  	 in_upper_bound IN NUMBER DEFAULT 11,
12:39:12 1851  	 out_result_set OUT SYS_REFCURSOR
12:39:12 1852  ) AS
12:39:12 1853  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
12:39:12 1854  BEGIN
12:39:12 1855  
12:39:12 1856  	 OPEN out_result_set FOR
12:39:12 1857  	     SELECT
12:39:12 1858  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
12:39:12 1859  	     FROM
12:39:12 1860  	       account a,
12:39:12 1861  	       credit_card cc
12:39:12 1862  	     WHERE
12:39:12 1863  	       cc.expiration_date = in_expiration_date and
12:39:12 1864  	       cc.last_four_cc = in_last_four_cc and
12:39:12 1865  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
12:39:12 1866  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
12:39:12 1867  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
12:39:12 1868  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
12:39:12 1869  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
12:39:12 1870  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
12:39:12 1871  	       a.id = cc.account_id and
12:39:12 1872  	       rownum >= in_lower_bound and
12:39:12 1873  	       rownum <= in_upper_bound
12:39:12 1874  	   ;
12:39:12 1875  
12:39:12 1876  EXCEPTION
12:39:12 1877  WHEN OTHERS THEN
12:39:12 1878  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
12:39:12 1879  	   SPROC_NAME, 'Unknown error', SQLERRM);
12:39:12 1880  END GET_GROUP_IDS_BY_CC_INFO;
12:39:12 1881  
12:39:12 1882  END PROCS_ACCOUNT_V16;
12:39:12 1883  .
12:39:12 SQL> /

Package body created.

Elapsed: 00:00:00.16
12:39:12 SQL> 
12:39:12 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V16" AS
12:39:12   2  
12:39:12   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
12:39:12   4  /*
12:39:12   5  Throws exceptions:
12:39:12   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12   8  */
12:39:12   9  	  in_offer_chain_id IN	 NUMBER,
12:39:12  10  	  out_result_set    OUT  SYS_REFCURSOR
12:39:12  11  ) AS
12:39:12  12  BEGIN
12:39:12  13  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_BY_ID (
12:39:12  14  	  in_offer_chain_id => in_offer_chain_id,
12:39:12  15  	  out_result_set => out_result_set
12:39:12  16  	);
12:39:12  17  END GET_OFFER_CHAIN_BY_ID;
12:39:12  18  
12:39:12  19  PROCEDURE GET_PENDING_INVOICES (
12:39:12  20  /*
12:39:12  21  Throws exceptions:
12:39:12  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  23  */
12:39:12  24  	out_result_set1      OUT SYS_REFCURSOR,
12:39:12  25  	out_result_set2      OUT SYS_REFCURSOR,
12:39:12  26  	out_result_set3      OUT SYS_REFCURSOR,
12:39:12  27  	in_row_number	     IN NUMBER DEFAULT NULL
12:39:12  28  ) AS
12:39:12  29  BEGIN
12:39:12  30  	PROCS_INVOICE_V16.GET_PENDING_INVOICES(
12:39:12  31  	  out_result_set1,
12:39:12  32  	  out_result_set2,
12:39:12  33  	  out_result_set3,
12:39:12  34  	  in_row_number
12:39:12  35  	);
12:39:12  36  END GET_PENDING_INVOICES;
12:39:12  37  
12:39:12  38  /********************************************************/
12:39:12  39  PROCEDURE GET_PENDING_REFUND_CHARGES (
12:39:12  40  /*
12:39:12  41  Throws exceptions:
12:39:12  42  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  43  */
12:39:12  44  	out_result_set	    OUT SYS_REFCURSOR,
12:39:12  45  	in_row_number	    IN NUMBER DEFAULT NULL
12:39:12  46  ) AS
12:39:12  47  BEGIN
12:39:12  48  	PROCS_CHARGE_V16.GET_PENDING_REFUND_CHARGES(
12:39:12  49  	  out_result_set,
12:39:12  50  	  in_row_number
12:39:12  51  	);
12:39:12  52  END GET_PENDING_REFUND_CHARGES;
12:39:12  53  /********************************************************/
12:39:12  54  
12:39:12  55  PROCEDURE GET_UNPROCESSED_CHARGES (
12:39:12  56  /*
12:39:12  57  Throws exceptions:
12:39:12  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  60  */
12:39:12  61  	in_invoice_id  IN NUMBER,
12:39:12  62  	out_result_set OUT SYS_REFCURSOR
12:39:12  63  ) AS
12:39:12  64  BEGIN
12:39:12  65  	PROCS_CHARGE_V16.GET_UNPROCESSED_CHARGES(
12:39:12  66  	  in_invoice_id,
12:39:12  67  	  out_result_set
12:39:12  68  	);
12:39:12  69  END GET_UNPROCESSED_CHARGES;
12:39:12  70  
12:39:12  71  /********************************************************/
12:39:12  72  
12:39:12  73  PROCEDURE GET_PROCESSED_CHARGES (
12:39:12  74  /*
12:39:12  75  Throws exceptions:
12:39:12  76  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12  77  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  78  */
12:39:12  79  	in_invoice_id  IN NUMBER,
12:39:12  80  	out_result_set OUT SYS_REFCURSOR
12:39:12  81  ) AS
12:39:12  82  BEGIN
12:39:12  83  	PROCS_CHARGE_V16.GET_PROCESSED_CHARGES(
12:39:12  84  	  in_invoice_id,
12:39:12  85  	  out_result_set
12:39:12  86  	);
12:39:12  87  END GET_PROCESSED_CHARGES;
12:39:12  88  
12:39:12  89  /********************************************************/
12:39:12  90  
12:39:12  91  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
12:39:12  92  /*
12:39:12  93  Throws exceptions:
12:39:12  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  95  */
12:39:12  96  	in_transaction_id	      IN NUMBER,
12:39:12  97  	in_transaction_attempt_status IN NUMBER,
12:39:12  98  	out_result_set		      OUT SYS_REFCURSOR
12:39:12  99  ) AS
12:39:12 100  BEGIN
12:39:12 101  	PROCS_TRANSACTION_V16.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
12:39:12 102  	  in_transaction_id,
12:39:12 103  	  in_transaction_attempt_status,
12:39:12 104  	  out_result_set
12:39:12 105  	);
12:39:12 106  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
12:39:12 107  
12:39:12 108  /********************************************************/
12:39:12 109  
12:39:12 110  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
12:39:12 111  /*
12:39:12 112  Throws exceptions:
12:39:12 113  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 114  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 115  */
12:39:12 116  	in_transaction_attempt_id     IN NUMBER,
12:39:12 117  	in_transaction_attempt_status IN NUMBER
12:39:12 118  ) AS
12:39:12 119  BEGIN
12:39:12 120  	PROCS_TRANSACTION_V16.UPDATE_TRNSCTN_ATTEMPT_STATUS(
12:39:12 121  	   in_transaction_attempt_id,
12:39:12 122  	   in_transaction_attempt_status
12:39:12 123  	);
12:39:12 124  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
12:39:12 125  
12:39:12 126  /********************************************************/
12:39:12 127  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
12:39:12 128  /*
12:39:12 129  Throws exceptions:
12:39:12 130  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 131  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 132  */
12:39:12 133  	in_invoice_id	IN  NUMBER,
12:39:12 134  	out_result_set OUT SYS_REFCURSOR
12:39:12 135  ) AS
12:39:12 136  BEGIN
12:39:12 137  	PROCS_TRANSACTION_V16.GET_CLOSED_REFUNDS_BY_INVOICE(
12:39:12 138  	   in_invoice_id,
12:39:12 139  	   out_result_set
12:39:12 140  	);
12:39:12 141  END GET_CLOSED_REFUNDS_BY_INVOICE;
12:39:12 142  
12:39:12 143  /********************************************************/
12:39:12 144  
12:39:12 145  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
12:39:12 146  /*
12:39:12 147  Throws exceptions:
12:39:12 148  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 149  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 150  */
12:39:12 151  	in_transaction_attempt_id IN NUMBER,
12:39:12 152  	in_updated_by		  IN VARCHAR2
12:39:12 153  ) AS
12:39:12 154  BEGIN
12:39:12 155  	PROCS_TRANSACTION_V16.UPDATE_TRNSCTN_ATTEMPT_TIME(
12:39:12 156  	  in_transaction_attempt_id,
12:39:12 157  	  in_updated_by
12:39:12 158  	);
12:39:12 159  END UPDATE_TRNSCTN_ATTEMPT_TIME;
12:39:12 160  
12:39:12 161  /********************************************************/
12:39:12 162  
12:39:12 163  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
12:39:12 164  /*
12:39:12 165  Throws exceptions:
12:39:12 166  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 167  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 168  */
12:39:12 169  	in_transaction_id	   IN NUMBER,
12:39:12 170  	in_trans_attempt_status    IN NUMBER,
12:39:12 171  	in_external_status_code    IN VARCHAR2,
12:39:12 172  	in_external_status_message IN VARCHAR2,
12:39:12 173  	in_created_by		   IN VARCHAR2,
12:39:12 174  	in_ext_transaction_id	   IN VARCHAR2,
12:39:12 175  	out_transaction_attempt_id OUT NUMBER
12:39:12 176  ) AS
12:39:12 177  BEGIN
12:39:12 178  	PROCS_TRANSACTION_V16.CREATE_TRANSACTION_ATTEMPT(
12:39:12 179  	  in_transaction_id,
12:39:12 180  	  in_trans_attempt_status,
12:39:12 181  	  in_external_status_code,
12:39:12 182  	  in_external_status_message,
12:39:12 183  	  in_created_by,
12:39:12 184  	  in_ext_transaction_id,
12:39:12 185  	  out_transaction_attempt_id
12:39:12 186  	);
12:39:12 187  END CREATE_TRANSACTION_ATTEMPT;
12:39:12 188  
12:39:12 189  /********************************************************/
12:39:12 190  
12:39:12 191  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
12:39:12 192  /*
12:39:12 193  Throws exceptions:
12:39:12 194  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 195  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 196  */
12:39:12 197  	in_transaction_attempt_id IN NUMBER,
12:39:12 198  	in_ext_status_code	  IN VARCHAR2,
12:39:12 199  	in_ext_status_message	  IN VARCHAR2,
12:39:12 200  	in_ext_transaction_id	  IN VARCHAR2
12:39:12 201  ) AS
12:39:12 202  BEGIN
12:39:12 203  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_ATTEMPT_INF(
12:39:12 204  	  in_transaction_attempt_id,
12:39:12 205  	  in_ext_status_code,
12:39:12 206  	  in_ext_status_message,
12:39:12 207  	  in_ext_transaction_id
12:39:12 208  	);
12:39:12 209  END UPDATE_TRANSACTION_ATTEMPT_INF;
12:39:12 210  
12:39:12 211  /********************************************************/
12:39:12 212  
12:39:12 213  PROCEDURE UPDATE_TRANSACTION_STATUS (
12:39:12 214  /*
12:39:12 215  Throws exceptions:
12:39:12 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 218  */
12:39:12 219  	in_transaction_id	 IN NUMBER,
12:39:12 220  	in_updated_by		 IN VARCHAR2,
12:39:12 221  	in_transaction_status_id IN NUMBER
12:39:12 222  ) AS
12:39:12 223  BEGIN
12:39:12 224  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
12:39:12 225  	  in_transaction_id,
12:39:12 226  	  in_updated_by,
12:39:12 227  	  in_transaction_status_id
12:39:12 228  	);
12:39:12 229  END UPDATE_TRANSACTION_STATUS;
12:39:12 230  
12:39:12 231  /********************************************************/
12:39:12 232  
12:39:12 233  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
12:39:12 234  /*
12:39:12 235  Throws exceptions:
12:39:12 236  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 237  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 238  */
12:39:12 239  	in_transaction_id IN  NUMBER,
12:39:12 240  	out_attempts_num  OUT NUMBER
12:39:12 241  ) AS
12:39:12 242  BEGIN
12:39:12 243  	PROCS_TRANSACTION_V16.GET_FAILED_ATTEMPTS_NUMBER(
12:39:12 244  	  in_transaction_id,
12:39:12 245  	  out_attempts_num
12:39:12 246  	);
12:39:12 247  END GET_FAILED_ATTEMPTS_NUMBER;
12:39:12 248  
12:39:12 249  /********************************************************/
12:39:12 250  
12:39:12 251  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
12:39:12 252  /*
12:39:12 253  Throws exceptions:
12:39:12 254  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 255  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 256  */
12:39:12 257  	in_transaction_id IN  NUMBER,
12:39:12 258  	out_is_successfull  OUT NUMBER
12:39:12 259  ) AS
12:39:12 260  BEGIN
12:39:12 261  	PROCS_TRANSACTION_V16.IS_TRANSACTION_SUCCESSFULL(
12:39:12 262  	  in_transaction_id,
12:39:12 263  	  out_is_successfull
12:39:12 264  	);
12:39:12 265  END IS_TRANSACTION_SUCCESSFULL;
12:39:12 266  /********************************************************/
12:39:12 267  
12:39:12 268  PROCEDURE UPDATE_INVOICE_STATUS (
12:39:12 269  /*
12:39:12 270  Throws exceptions:
12:39:12 271  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 272  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 273  */
12:39:12 274  	in_invoice_id		       IN NUMBER,
12:39:12 275  	in_invoice_status_id	       IN NUMBER,
12:39:12 276  	in_updated_by		       IN VARCHAR2
12:39:12 277  ) AS
12:39:12 278  BEGIN
12:39:12 279  	PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
12:39:12 280  	  in_invoice_id,
12:39:12 281  	  in_invoice_status_id,
12:39:12 282  	  in_updated_by
12:39:12 283  	);
12:39:12 284  END UPDATE_INVOICE_STATUS;
12:39:12 285  
12:39:12 286  /********************************************************/
12:39:12 287  
12:39:12 288  PROCEDURE SUSPEND_SUBSCRIPTION(
12:39:12 289  /*
12:39:12 290  Throws exceptions:
12:39:12 291  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 292  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:12 293  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 294  */
12:39:12 295  	  in_subs_id	IN NUMBER ,
12:39:12 296  	  in_updated_by IN VARCHAR2
12:39:12 297  ) AS
12:39:12 298  BEGIN
12:39:12 299  	PROCS_SUBSCRIPTION_V16.SUSPEND_SUBSCRIPTION(
12:39:12 300  	  in_subs_id,
12:39:12 301  	  in_updated_by
12:39:12 302  	);
12:39:12 303  END SUSPEND_SUBSCRIPTION;
12:39:12 304  
12:39:12 305  /********************************************************/
12:39:12 306  
12:39:12 307  PROCEDURE GET_CREDIT_CARD_BY_ID (
12:39:12 308  /*
12:39:12 309  Throws exceptions:
12:39:12 310  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 312  */
12:39:12 313  	in_credit_card_id IN  NUMBER,
12:39:12 314  	out_result_set	  OUT SYS_REFCURSOR
12:39:12 315  ) AS
12:39:12 316  BEGIN
12:39:12 317  	PROCS_FIN_INSTRUMENTS_V16.GET_CREDIT_CARD_BY_ID(
12:39:12 318  	  in_credit_card_id,
12:39:12 319  	  out_result_set
12:39:12 320  	);
12:39:12 321  END GET_CREDIT_CARD_BY_ID;
12:39:12 322  
12:39:12 323  /*********************************************************/
12:39:12 324  
12:39:12 325  PROCEDURE GET_TRANSACTION_AMOUNT (
12:39:12 326  /*
12:39:12 327  Throws exceptions:
12:39:12 328  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 329  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 330  */
12:39:12 331  	in_transaction_id      IN  NUMBER,
12:39:12 332  	out_transaction_amount OUT NUMBER
12:39:12 333  ) AS
12:39:12 334  BEGIN
12:39:12 335  	PROCS_TRANSACTION_V16.GET_TRANSACTION_AMOUNT(
12:39:12 336  	  in_transaction_id,
12:39:12 337  	  out_transaction_amount
12:39:12 338  	);
12:39:12 339  END GET_TRANSACTION_AMOUNT;
12:39:12 340  
12:39:12 341  /***********************************************************/
12:39:12 342  
12:39:12 343  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
12:39:12 344  /*
12:39:12 345  Throws exceptions:
12:39:12 346  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 347  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 348  */
12:39:12 349  	in_invoice_id  IN  NUMBER,
12:39:12 350  	out_account_id OUT NUMBER
12:39:12 351  ) AS
12:39:12 352  BEGIN
12:39:12 353  	PROCS_INVOICE_V16.GET_ACCOUNT_BY_INVOICE_ID(
12:39:12 354  	  in_invoice_id,
12:39:12 355  	  out_account_id
12:39:12 356  	);
12:39:12 357  END GET_ACCOUNT_BY_INVOICE_ID;
12:39:12 358  
12:39:12 359  /************************************************************/
12:39:12 360  
12:39:12 361  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
12:39:12 362  /*
12:39:12 363  Throws exceptions:
12:39:12 364  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 365  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 366  */
12:39:12 367  	in_gift_certificate_id IN NUMBER,
12:39:12 368  	out_result_set	       OUT SYS_REFCURSOR
12:39:12 369  ) AS
12:39:12 370  BEGIN
12:39:12 371  	PROCS_FIN_INSTRUMENTS_V16.GET_GIFT_CERTIFICATE_BY_ID (
12:39:12 372  	  in_gift_certificate_id,
12:39:12 373  	  out_result_set
12:39:12 374  	);
12:39:12 375  END GET_GIFT_CERTIFICATE_BY_ID;
12:39:12 376  
12:39:12 377  /**************************************************************/
12:39:12 378  
12:39:12 379  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
12:39:12 380  /*
12:39:12 381  Throws exceptions:
12:39:12 382  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 383  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 384  */
12:39:12 385  	in_charge_id	    IN NUMBER,
12:39:12 386  	out_subscription_id OUT NUMBER
12:39:12 387  ) AS
12:39:12 388  BEGIN
12:39:12 389  	PROCS_CHARGE_V16.GET_SUBSCR_ID_BY_CHARGE_ID(
12:39:12 390  	  in_charge_id,
12:39:12 391  	  out_subscription_id
12:39:12 392  	);
12:39:12 393  END GET_SUBSCR_ID_BY_CHARGE_ID;
12:39:12 394  
12:39:12 395  /**************************************************************/
12:39:12 396  
12:39:12 397  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
12:39:12 398  /*
12:39:12 399  Throws exceptions:
12:39:12 400  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 401  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 402  */
12:39:12 403  	in_gift_certificate_id IN NUMBER,
12:39:12 404  	in_charge_id	       IN NUMBER,
12:39:12 405  	out_result	       OUT NUMBER
12:39:12 406  ) AS
12:39:12 407  BEGIN
12:39:12 408  	PROCS_FIN_INSTRUMENTS_V16.IS_GCERT_FOR_PROPER_OFFER (
12:39:12 409  	  in_gift_certificate_id,
12:39:12 410  	  in_charge_id,
12:39:12 411  	  out_result
12:39:12 412  	);
12:39:12 413  END IS_GCERT_FOR_PROPER_OFFER;
12:39:12 414  
12:39:12 415  /**************************************************************/
12:39:12 416  
12:39:12 417  PROCEDURE GET_SUBSCRIPTION_INFO (
12:39:12 418  /*
12:39:12 419  Throws exceptions:
12:39:12 420  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 421  */
12:39:12 422  	  in_subscription_id IN  NUMBER,
12:39:12 423  	  out_result_set      OUT SYS_REFCURSOR
12:39:12 424  ) AS
12:39:12 425  BEGIN
12:39:12 426  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTION_INFO (
12:39:12 427  	  in_subscription_id,
12:39:12 428  	  out_result_set
12:39:12 429  	);
12:39:12 430  END GET_SUBSCRIPTION_INFO;
12:39:12 431  
12:39:12 432  /****************************************************************/
12:39:12 433  
12:39:12 434  PROCEDURE CALCULATE_INVOICE_AMOUNT (
12:39:12 435  /*
12:39:12 436  Throws exceptions:
12:39:12 437  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 438  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 439  */
12:39:12 440  	in_invoice_id IN  NUMBER,
12:39:12 441  	out_amount    OUT NUMBER
12:39:12 442  ) AS
12:39:12 443  BEGIN
12:39:12 444  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
12:39:12 445  	  in_invoice_id,
12:39:12 446  	  out_amount
12:39:12 447  	);
12:39:12 448  END CALCULATE_INVOICE_AMOUNT;
12:39:12 449  
12:39:12 450  /****************************************************************/
12:39:12 451  
12:39:12 452  PROCEDURE GET_TRANSACTION_BY_ID (
12:39:12 453  /*
12:39:12 454  Throws exceptions:
12:39:12 455  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 456  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 457  */
12:39:12 458  	in_transaction_id IN NUMBER,
12:39:12 459  	out_result_set	  OUT SYS_REFCURSOR
12:39:12 460  ) AS
12:39:12 461  BEGIN
12:39:12 462  	PROCS_TRANSACTION_V16.GET_TRANSACTION_BY_ID(
12:39:12 463  	  in_transaction_id,
12:39:12 464  	  out_result_set
12:39:12 465  	);
12:39:12 466  END GET_TRANSACTION_BY_ID;
12:39:12 467  
12:39:12 468  /****************************************************************/
12:39:12 469  
12:39:12 470  PROCEDURE UPDATE_CHARGE_STATUS (
12:39:12 471  /*
12:39:12 472  Throws exceptions:
12:39:12 473  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 474  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 475  */
12:39:12 476  	in_charge_id	    IN CHARGE.ID%TYPE,
12:39:12 477  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
12:39:12 478  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
12:39:12 479  ) AS
12:39:12 480  BEGIN
12:39:12 481  	PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
12:39:12 482  	  in_charge_id,
12:39:12 483  	  in_charge_status_id,
12:39:12 484  	  in_updated_by
12:39:12 485  	);
12:39:12 486  END UPDATE_CHARGE_STATUS;
12:39:12 487  
12:39:12 488  /****************************************************************/
12:39:12 489  
12:39:12 490  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
12:39:12 491  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:12 492  	out_result_set OUT SYS_REFCURSOR
12:39:12 493  ) AS
12:39:12 494  BEGIN
12:39:12 495  	PROCS_FIN_INSTRUMENTS_V16.GET_GC_BY_PURCH_INVOICE_ID(
12:39:12 496  	  in_invoice_id,
12:39:12 497  	  out_result_set
12:39:12 498  	);
12:39:12 499  END GET_GC_BY_PURCH_INVOICE_ID;
12:39:12 500  
12:39:12 501  /****************************************************************/
12:39:12 502  
12:39:12 503  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
12:39:12 504  /*
12:39:12 505  Throws exceptions:
12:39:12 506  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 507  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
12:39:12 508  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 509  */
12:39:12 510  	in_transaction_id IN TRANSACTION.ID%TYPE,
12:39:12 511  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
12:39:12 512  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
12:39:12 513  ) AS
12:39:12 514  BEGIN
12:39:12 515  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_ORDER_ID(
12:39:12 516  	  in_transaction_id,
12:39:12 517  	  in_order_id,
12:39:12 518  	  in_updated_by
12:39:12 519  	);
12:39:12 520  END UPDATE_TRANSACTION_ORDER_ID;
12:39:12 521  
12:39:12 522  /****************************************************************/
12:39:12 523  
12:39:12 524  PROCEDURE GET_ACTIVE_INVOICES_IDS (
12:39:12 525  /*
12:39:12 526  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 527  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 528  */
12:39:12 529  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
12:39:12 530  	in_subscription_id IN NUMBER,
12:39:12 531  	out_result_set	   OUT SYS_REFCURSOR
12:39:12 532  ) AS
12:39:12 533  BEGIN
12:39:12 534  	PROCS_SUBSCRIPTION_V16.GET_ACTIVE_INVOICES_IDS(
12:39:12 535  	  in_subscription_id,
12:39:12 536  	  out_result_set
12:39:12 537  	);
12:39:12 538  END GET_ACTIVE_INVOICES_IDS;
12:39:12 539  
12:39:12 540  /****************************************************************/
12:39:12 541  
12:39:12 542  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
12:39:12 543  /*
12:39:12 544  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 545  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 546  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:12 547  */
12:39:12 548  --  in_invoice_id        IN INVOICE.ID%TYPE,
12:39:12 549  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
12:39:12 550  -- norlov: in_refundable	      IN refund enabled
12:39:12 551  	in_invoice_id	     IN NUMBER,
12:39:12 552  	in_updated_by	     IN VARCHAR2,
12:39:12 553  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
12:39:12 554  --  in_cancellation_date IN DATE DEFAULT current_timestamp
12:39:12 555  ) AS
12:39:12 556  BEGIN
12:39:12 557  	PROCS_SUBSCRIPTION_V16.CANCEL_SUBSCRIPTION_INVOICE(
12:39:12 558  	  in_invoice_id,
12:39:12 559  	  in_updated_by,
12:39:12 560  	  in_refundable
12:39:12 561  	);
12:39:12 562  END CANCEL_SUBSCRIPTION_INVOICE;
12:39:12 563  
12:39:12 564  /****************************************************************/
12:39:12 565  
12:39:12 566  PROCEDURE FINALIZE_CANCELATION (
12:39:12 567  /*
12:39:12 568  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 569  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 570  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:12 571  */
12:39:12 572  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
12:39:12 573  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
12:39:12 574  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
12:39:12 575  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
12:39:12 576  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
12:39:12 577  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
12:39:12 578  	in_subscription_id    IN NUMBER,
12:39:12 579  	in_cancelation_reason IN VARCHAR2,
12:39:12 580  	in_cancelation_date   IN DATE,
12:39:12 581  	in_note 	      IN VARCHAR2,
12:39:12 582  	in_agent_id	      IN NUMBER,
12:39:12 583  	in_updated_by	      IN VARCHAR2
12:39:12 584  ) AS
12:39:12 585  BEGIN
12:39:12 586  	PROCS_SUBSCRIPTION_V16.FINALIZE_CANCELATION(
12:39:12 587  	  in_subscription_id,
12:39:12 588  	  in_cancelation_reason,
12:39:12 589  	  in_cancelation_date,
12:39:12 590  	  in_note,
12:39:12 591  	  in_agent_id,
12:39:12 592  	  in_updated_by
12:39:12 593  	);
12:39:12 594  END FINALIZE_CANCELATION;
12:39:12 595  
12:39:12 596  /****************************************************************/
12:39:12 597  
12:39:12 598  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
12:39:12 599  /*
12:39:12 600  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 601  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 602  */
12:39:12 603  	in_subscription_id IN NUMBER,
12:39:12 604  	out_result_set	   OUT SYS_REFCURSOR
12:39:12 605  ) AS
12:39:12 606  BEGIN
12:39:12 607  	PROCS_SUBSCRIPTION_V16.GET_SUBSCR_PROD_OFFERRINGS(
12:39:12 608  	  in_subscription_id,
12:39:12 609  	  out_result_set
12:39:12 610  	);
12:39:12 611  END GET_SUBSCR_PROD_OFFERRINGS;
12:39:12 612  
12:39:12 613  /****************************************************************/
12:39:12 614  
12:39:12 615  PROCEDURE GET_OFFER_CHAIN_META_DATA (
12:39:12 616  /*
12:39:12 617  Throws exceptions (codes):
12:39:12 618  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 619  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 620  */
12:39:12 621  	in_offer_chain_id IN NUMBER,
12:39:12 622  	in_meta_data_name IN VARCHAR2,
12:39:12 623  	out_result_set	  OUT SYS_REFCURSOR
12:39:12 624  )AS
12:39:12 625  BEGIN
12:39:12 626  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_META_DATA(
12:39:12 627  	  in_offer_chain_id,
12:39:12 628  	  in_meta_data_name,
12:39:12 629  	  out_result_set
12:39:12 630  	);
12:39:12 631  END GET_OFFER_CHAIN_META_DATA;
12:39:12 632  
12:39:12 633  /****************************************************************/
12:39:12 634  
12:39:12 635  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
12:39:12 636  /*
12:39:12 637  Throws exceptions (codes):
12:39:12 638  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 639  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 640  */
12:39:12 641  	in_product_offering_id IN NUMBER,
12:39:12 642  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
12:39:12 643  	out_result_set	       OUT SYS_REFCURSOR
12:39:12 644  )AS
12:39:12 645  BEGIN
12:39:12 646  	PROCS_OFFER_CHAIN_V16.GET_PRODUCT_OFFERING_META_DATA(
12:39:12 647  	  in_product_offering_id,
12:39:12 648  	  in_meta_data_name,
12:39:12 649  	  out_result_set
12:39:12 650  	);
12:39:12 651  END GET_PRODUCT_OFFERING_META_DATA;
12:39:12 652  
12:39:12 653  /****************************************************************/
12:39:12 654  
12:39:12 655  PROCEDURE READ_ACCOUNT (
12:39:12 656  	in_account_id  IN ACCOUNT.ID%TYPE,
12:39:12 657  	out_result_set OUT SYS_REFCURSOR
12:39:12 658  )AS
12:39:12 659  BEGIN
12:39:12 660  	PROCS_ACCOUNT_CRU_V16.READ_ACCOUNT(
12:39:12 661  	  in_account_id,
12:39:12 662  	  out_result_set
12:39:12 663  	);
12:39:12 664  END READ_ACCOUNT;
12:39:12 665  
12:39:12 666  /****************************************************************/
12:39:12 667  
12:39:12 668  PROCEDURE GET_COLLECTED_CHARGES (
12:39:12 669  /*
12:39:12 670  Throws exceptions:
12:39:12 671  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 672  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 673  */
12:39:12 674  	in_invoice_id  IN NUMBER,
12:39:12 675  	out_result_set OUT SYS_REFCURSOR
12:39:12 676  ) AS
12:39:12 677  BEGIN
12:39:12 678  	PROCS_CHARGE_V16.GET_COLLECTED_CHARGES(
12:39:12 679  	  in_invoice_id,
12:39:12 680  	  out_result_set
12:39:12 681  	);
12:39:12 682  END GET_COLLECTED_CHARGES;
12:39:12 683  
12:39:12 684  /****************************************************************/
12:39:12 685  
12:39:12 686  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
12:39:12 687  /*
12:39:12 688  Throws exceptions:
12:39:12 689  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 690  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 691  */
12:39:12 692  	in_invoice_id IN NUMBER,
12:39:12 693  	out_group_ids OUT SYS_REFCURSOR
12:39:12 694  ) AS
12:39:12 695  BEGIN
12:39:12 696  
12:39:12 697  	PROCS_ACCOUNT_V16.GET_GROUPS_ID_BY_INVOICE_ID(
12:39:12 698  	  in_invoice_id,
12:39:12 699  	  out_group_ids
12:39:12 700  	);
12:39:12 701  
12:39:12 702  END GET_GROUPS_ID_BY_INVOICE_ID;
12:39:12 703  
12:39:12 704  /****************************************************************/
12:39:12 705  
12:39:12 706  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
12:39:12 707  /*
12:39:12 708  Throws exceptions:
12:39:12 709  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 710  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 711  */
12:39:12 712  	in_group_id IN NUMBER,
12:39:12 713  	out_account_id	OUT NUMBER
12:39:12 714  ) AS
12:39:12 715  BEGIN
12:39:12 716  
12:39:12 717  	PROCS_ACCOUNT_V16.GET_ACCOUNT_ID_BY_GROUP_ID(
12:39:12 718  	  in_group_id,
12:39:12 719  	  out_account_id
12:39:12 720  	);
12:39:12 721  
12:39:12 722  END GET_ACCOUNT_ID_BY_GROUP_ID;
12:39:12 723  
12:39:12 724  /****************************************************************/
12:39:12 725  
12:39:12 726  PROCEDURE LOCK_ACCOUNT (
12:39:12 727  	in_group_id    IN NUMBER,
12:39:12 728  	in_lock_key    IN VARCHAR2,
12:39:12 729  	in_seconds_num IN NUMBER,
12:39:12 730  	in_created_by  IN VARCHAR2,
12:39:12 731  	in_reason      IN VARCHAR2
12:39:12 732  ) AS
12:39:12 733  BEGIN
12:39:12 734  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
12:39:12 735  	  in_group_id,
12:39:12 736  	  in_lock_key,
12:39:12 737  	  in_seconds_num,
12:39:12 738  	  in_created_by,
12:39:12 739  	  in_reason
12:39:12 740  	);
12:39:12 741  END LOCK_ACCOUNT;
12:39:12 742  
12:39:12 743  /****************************************************************/
12:39:12 744  
12:39:12 745  PROCEDURE RELEASE_LOCK (
12:39:12 746  	in_group_id IN NUMBER,
12:39:12 747  	in_lock_key IN VARCHAR2
12:39:12 748  ) AS
12:39:12 749  BEGIN
12:39:12 750  	PROCS_LOCKING_V16.RELEASE_LOCK(
12:39:12 751  	  in_group_id,
12:39:12 752  	  in_lock_key
12:39:12 753  	);
12:39:12 754  END RELEASE_LOCK;
12:39:12 755  
12:39:12 756  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
12:39:12 757  	in_invoice_id		    IN NUMBER,
12:39:12 758  	out_order_id		    OUT VARCHAR2,
12:39:12 759  	out_external_transaction_id OUT VARCHAR2
12:39:12 760  ) AS
12:39:12 761  BEGIN
12:39:12 762  	PROCS_INVOICE_V16.GET_PAYMENT_INFO_BY_INVOICE_ID(
12:39:12 763  	  in_invoice_id,
12:39:12 764  	  out_order_id,
12:39:12 765  	  out_external_transaction_id
12:39:12 766  	);
12:39:12 767  END GET_PAYMENT_INFO_BY_INVOICE_ID;
12:39:12 768  
12:39:12 769  /******************************************************************************/
12:39:12 770  
12:39:12 771  PROCEDURE GET_PAYPAL_BY_ID (
12:39:12 772  	in_paypal_id   IN  NUMBER,
12:39:12 773  	out_result_set OUT SYS_REFCURSOR
12:39:12 774  ) AS
12:39:12 775  BEGIN
12:39:12 776  	PROCS_FIN_INSTRUMENTS_V16.GET_PAYPAL_BY_ID(
12:39:12 777  	  in_paypal_id,
12:39:12 778  	  out_result_set
12:39:12 779  	);
12:39:12 780  END GET_PAYPAL_BY_ID;
12:39:12 781  
12:39:12 782  PROCEDURE GET_ATTEMPT_NUMBER (
12:39:12 783  /*
12:39:12 784  Throws exceptions:
12:39:12 785  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 786  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 787  */
12:39:12 788  	in_charge_id   in  number,
12:39:12 789  	out_attempt_count out number
12:39:12 790  ) as
12:39:12 791  begin
12:39:12 792  	PROCS_TRANSACTION_V16.GET_ATTEMPT_NUMBER(
12:39:12 793  	  in_charge_id,
12:39:12 794  	  out_attempt_count
12:39:12 795  	);
12:39:12 796  end get_attempt_number;
12:39:12 797  
12:39:12 798  PROCEDURE GET_NOTIFICATION_TYPE_ID (
12:39:12 799  	in_offer_chain_id	 IN NUMBER,
12:39:12 800  	in_action_name		 IN VARCHAR2,
12:39:12 801  	out_notification_type_id out number
12:39:12 802  ) as
12:39:12 803  begin
12:39:12 804  	PROCS_OFFER_CHAIN_V16.GET_NOTIFICATION_TYPE_ID(
12:39:12 805  	  in_offer_chain_id,
12:39:12 806  	  in_action_name,
12:39:12 807  	  out_notification_type_id
12:39:12 808  	);
12:39:12 809  end GET_NOTIFICATION_TYPE_ID;
12:39:12 810  
12:39:12 811  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
12:39:12 812  /*
12:39:12 813  Throws exceptions:
12:39:12 814  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 815  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 816  */
12:39:12 817  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:12 818  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
12:39:12 819  ) AS
12:39:12 820  BEGIN
12:39:12 821  PROCS_FIN_INSTRUMENTS_V16.GET_GC_ID_BY_PURCH_INVOICE_ID(
12:39:12 822  in_invoice_id,
12:39:12 823  out_gift_certificate_id
12:39:12 824  );
12:39:12 825  END GET_GC_ID_BY_PURCH_INVOICE_ID;
12:39:12 826  
12:39:12 827  END PUBLIC_PROCS_BILLING_V16;
12:39:12 828  .
12:39:12 SQL> /

Package body created.

Elapsed: 00:00:00.06
12:39:12 SQL> 
12:39:12 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V16" AS
12:39:12   2  
12:39:12   3  PROCEDURE LOCK_ACCOUNT (
12:39:12   4  	in_group_id    IN NUMBER,
12:39:12   5  	in_lock_key    IN VARCHAR2,
12:39:12   6  	in_seconds_num IN NUMBER,
12:39:12   7  	in_created_by  IN VARCHAR2,
12:39:12   8  	in_reason      IN VARCHAR2
12:39:12   9  ) AS
12:39:12  10  BEGIN
12:39:12  11  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
12:39:12  12  	  in_group_id,
12:39:12  13  	  in_lock_key,
12:39:12  14  	  in_seconds_num,
12:39:12  15  	  in_created_by,
12:39:12  16  	  in_reason
12:39:12  17  	);
12:39:12  18  END LOCK_ACCOUNT;
12:39:12  19  
12:39:12  20  /******************************************************************************/
12:39:12  21  
12:39:12  22  PROCEDURE RELEASE_LOCK (
12:39:12  23  	in_group_id IN NUMBER,
12:39:12  24  	in_lock_key IN VARCHAR2
12:39:12  25  ) AS
12:39:12  26  BEGIN
12:39:12  27  	PROCS_LOCKING_V16.RELEASE_LOCK(
12:39:12  28  	  in_group_id,
12:39:12  29  	  in_lock_key
12:39:12  30  	);
12:39:12  31  END RELEASE_LOCK;
12:39:12  32  
12:39:12  33  END PUBLIC_PROCS_NOTIFICATION_V16;
12:39:12  34  .
12:39:12 SQL> /

Package body created.

Elapsed: 00:00:00.01
12:39:12 SQL> 
12:39:12 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V16" AS
12:39:12   2  
12:39:12   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
12:39:12   4  	out_result_set OUT SYS_REFCURSOR
12:39:12   5  ) AS
12:39:12   6  BEGIN
12:39:12   7  	PROCS_GROUP_ACCOUNT_V16.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
12:39:12   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
12:39:12   9  
12:39:12  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
12:39:12  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
12:39:12  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
12:39:12  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
12:39:12  14  ) AS
12:39:12  15  BEGIN
12:39:12  16  	PROCS_GROUP_ACCOUNT_V16.UPDATE_SS_NEED_ENTITLEMENTS(
12:39:12  17  	  in_sub_share_id => in_sub_share_id,
12:39:12  18  	  in_need_entitlements => in_need_entitlements,
12:39:12  19  	  in_updater => in_updater
12:39:12  20  	);
12:39:12  21  END UPDATE_SS_NEED_ENTITLEMENTS;
12:39:12  22  
12:39:12  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
12:39:12  24  /*
12:39:12  25  Throws exceptions:
12:39:12  26  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12  27  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  28  */
12:39:12  29  	  in_offer_chain_id IN	 NUMBER,
12:39:12  30  	  out_result_set    OUT  SYS_REFCURSOR
12:39:12  31  ) AS
12:39:12  32  BEGIN
12:39:12  33  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_BY_ID (
12:39:12  34  	  in_offer_chain_id => in_offer_chain_id,
12:39:12  35  	  out_result_set => out_result_set
12:39:12  36  	);
12:39:12  37  END GET_OFFER_CHAIN_BY_ID;
12:39:12  38  
12:39:12  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
12:39:12  40  /*
12:39:12  41  Throws exceptions (codes):
12:39:12  42  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12  43  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  44  */
12:39:12  45  	in_offer_chain_id IN NUMBER,
12:39:12  46  	in_meta_data_name IN VARCHAR2,
12:39:12  47  	out_result_set	  OUT SYS_REFCURSOR
12:39:12  48  )AS
12:39:12  49  BEGIN
12:39:12  50  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_META_DATA(
12:39:12  51  	  in_offer_chain_id,
12:39:12  52  	  in_meta_data_name,
12:39:12  53  	  out_result_set
12:39:12  54  	);
12:39:12  55  END GET_OFFER_CHAIN_META_DATA;
12:39:12  56  
12:39:12  57  PROCEDURE GET_ENDING_LICENSES (
12:39:12  58  /*
12:39:12  59  Throws exceptions:
12:39:12  60  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  61  */
12:39:12  62  	in_hours_number IN NUMBER,
12:39:12  63  	out_result_set OUT SYS_REFCURSOR
12:39:12  64  ) AS
12:39:12  65  BEGIN
12:39:12  66  	PROCS_LICENSE_V16.GET_ENDING_LICENSES(in_hours_number,out_result_set);
12:39:12  67  END GET_ENDING_LICENSES;
12:39:12  68  
12:39:12  69  PROCEDURE GET_ENDING_LICENSES_CC (
12:39:12  70  /*
12:39:12  71  Throws exceptions:
12:39:12  72  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  73  */
12:39:12  74  	in_hours_number IN NUMBER,
12:39:12  75  	out_result_set OUT SYS_REFCURSOR,
12:39:12  76  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:12  77  ) AS
12:39:12  78  BEGIN
12:39:12  79  	PROCS_LICENSE_V16.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
12:39:12  80  END GET_ENDING_LICENSES_CC;
12:39:12  81  
12:39:12  82  /*******************************************************/
12:39:12  83  
12:39:12  84  PROCEDURE GET_RECURRING_OFFER (
12:39:12  85  /*
12:39:12  86  Throws exceptions:
12:39:12  87  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12  88  */
12:39:12  89  	in_license_id  IN NUMBER,
12:39:12  90  	out_result_set OUT SYS_REFCURSOR
12:39:12  91  ) AS
12:39:12  92  BEGIN
12:39:12  93  	PROCS_LICENSE_V16.GET_RECURRING_OFFER (
12:39:12  94  	  in_license_id,
12:39:12  95  	  out_result_set
12:39:12  96  	);
12:39:12  97  END GET_RECURRING_OFFER;
12:39:12  98  
12:39:12  99  /********************************************************/
12:39:12 100  
12:39:12 101  PROCEDURE GET_NEXT_OFFER (
12:39:12 102  /*
12:39:12 103  Throws exceptions:
12:39:12 104  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 105  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:12 106  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 107  */
12:39:12 108  	in_license_id  IN NUMBER,
12:39:12 109  	out_result_set OUT SYS_REFCURSOR
12:39:12 110  ) AS
12:39:12 111  BEGIN
12:39:12 112  	PROCS_LICENSE_V16.GET_NEXT_OFFER (
12:39:12 113  	  in_license_id,
12:39:12 114  	  out_result_set
12:39:12 115  	);
12:39:12 116  END GET_NEXT_OFFER;
12:39:12 117  
12:39:12 118  /*********************************************************/
12:39:12 119  
12:39:12 120  PROCEDURE UPDATE_LICENSE_STATUS(
12:39:12 121  /*
12:39:12 122  Throws exceptions:
12:39:12 123  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 124  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 125  */
12:39:12 126  	  in_license_id     IN NUMBER,
12:39:12 127  	  in_license_status IN NUMBER,
12:39:12 128  	  in_updated_by     IN VARCHAR2
12:39:12 129  ) AS
12:39:12 130  BEGIN
12:39:12 131  	PROCS_LICENSE_V16.UPDATE_LICENSE_STATUS (
12:39:12 132  	  in_license_id,
12:39:12 133  	  in_license_status,
12:39:12 134  	  in_updated_by
12:39:12 135  	);
12:39:12 136  END UPDATE_LICENSE_STATUS;
12:39:12 137  
12:39:12 138  /**********************************************************/
12:39:12 139  
12:39:12 140  PROCEDURE UPDATE_INVOICE_STATUS (
12:39:12 141  /*
12:39:12 142  Throws exceptions:
12:39:12 143  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 144  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 145  */
12:39:12 146  	in_invoice_id		       IN NUMBER,
12:39:12 147  	in_invoice_status_id	       IN NUMBER,
12:39:12 148  	in_updated_by		       IN VARCHAR2
12:39:12 149  ) AS
12:39:12 150  BEGIN
12:39:12 151  	PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
12:39:12 152  	  in_invoice_id,
12:39:12 153  	  in_invoice_status_id,
12:39:12 154  	  in_updated_by
12:39:12 155  	);
12:39:12 156  END UPDATE_INVOICE_STATUS;
12:39:12 157  
12:39:12 158  /***********************************************************/
12:39:12 159  
12:39:12 160  PROCEDURE CREATE_LICENSE(
12:39:12 161  /*
12:39:12 162  Throws exceptions:
12:39:12 163  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 164  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 165  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
12:39:12 166  */
12:39:12 167  	in_status_id		    IN NUMBER,
12:39:12 168  	in_needs_entitlements	    IN NUMBER,
12:39:12 169  	in_start_date		    IN DATE,
12:39:12 170  	in_end_date		    IN DATE,
12:39:12 171  	in_offer_id		    IN NUMBER,
12:39:12 172  	in_subscription_id	    IN NUMBER,
12:39:12 173  	in_invoice_id		    IN NUMBER,
12:39:12 174  	in_created_by		    IN VARCHAR2,
12:39:12 175  	in_is_extension 	    IN NUMBER,
12:39:12 176  	in_current_offer_index	    IN NUMBER,
12:39:12 177  	in_current_offer_recurr_num IN NUMBER,
12:39:12 178  	out_license_id		    OUT NUMBER
12:39:12 179  ) AS
12:39:12 180  BEGIN
12:39:12 181  	PROCS_LICENSE_V16.CREATE_LICENSE (
12:39:12 182  	  in_status_id,
12:39:12 183  	  in_needs_entitlements,
12:39:12 184  	  in_start_date,
12:39:12 185  	  in_end_date,
12:39:12 186  	  in_offer_id,
12:39:12 187  	  in_subscription_id,
12:39:12 188  	  in_invoice_id,
12:39:12 189  	  in_created_by,
12:39:12 190  	  in_is_extension,
12:39:12 191  	  in_current_offer_index,
12:39:12 192  	  in_current_offer_recurr_num,
12:39:12 193  	  out_license_id
12:39:12 194  	);
12:39:12 195  END CREATE_LICENSE;
12:39:12 196  
12:39:12 197  /******************************************************/
12:39:12 198  
12:39:12 199  PROCEDURE CREATE_INVOICE(
12:39:12 200  /*
12:39:12 201  Throws exceptions:
12:39:12 202  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 203  */
12:39:12 204  	  in_invoice_status IN NUMBER,
12:39:12 205  	  in_created_by     IN VARCHAR2,
12:39:12 206  	  in_tax_exempt_id  IN VARCHAR2,
12:39:12 207  	  out_invoice_id    OUT NUMBER
12:39:12 208  ) AS
12:39:12 209  BEGIN
12:39:12 210  	PROCS_INVOICE_V16.CREATE_INVOICE (
12:39:12 211  	  in_invoice_status,
12:39:12 212  	  in_created_by,
12:39:12 213  	  in_tax_exempt_id,
12:39:12 214  	  out_invoice_id
12:39:12 215  	);
12:39:12 216  END CREATE_INVOICE;
12:39:12 217  
12:39:12 218  /*******************************************************/
12:39:12 219  
12:39:12 220  PROCEDURE CREATE_CHARGE(
12:39:12 221  /*
12:39:12 222  Throws exceptions:
12:39:12 223  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 224  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 225  */
12:39:12 226  	in_invoice_id	      IN NUMBER,
12:39:12 227  	in_transaction_id     IN NUMBER,
12:39:12 228  	in_instrument_type_id IN NUMBER,
12:39:12 229  	in_instrument_id      IN NUMBER,
12:39:12 230  	in_charge_amount      IN NUMBER,
12:39:12 231  	in_created_by	      IN VARCHAR2,
12:39:12 232  	in_charge_status_id   IN NUMBER,
12:39:12 233  	out_charge_id	      OUT NUMBER
12:39:12 234  ) AS
12:39:12 235  BEGIN
12:39:12 236  	PROCS_CHARGE_V16.CREATE_CHARGE (
12:39:12 237  	  in_invoice_id,
12:39:12 238  	  in_transaction_id,
12:39:12 239  	  in_instrument_type_id,
12:39:12 240  	  in_instrument_id,
12:39:12 241  	  in_charge_amount,
12:39:12 242  	  in_created_by,
12:39:12 243  	  in_charge_status_id,
12:39:12 244  	  out_charge_id
12:39:12 245  	);
12:39:12 246  END CREATE_CHARGE;
12:39:12 247  
12:39:12 248  /**********************************************************/
12:39:12 249  
12:39:12 250  PROCEDURE HAS_FUTURE_LICENSE (
12:39:12 251  /*
12:39:12 252  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 253  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 254  --
12:39:12 255  RETURNS:
12:39:12 256  1 - if has,
12:39:12 257  0 - else
12:39:12 258  */
12:39:12 259  	in_license_id IN NUMBER,
12:39:12 260  	out_result	   OUT NUMBER
12:39:12 261  ) AS
12:39:12 262  BEGIN
12:39:12 263  	PROCS_SUBSCRIPTION_V16.HAS_FUTURE_LICENSE (
12:39:12 264  	  in_license_id,
12:39:12 265  	  out_result
12:39:12 266  	);
12:39:12 267  END HAS_FUTURE_LICENSE;
12:39:12 268  
12:39:12 269  /***********************************************************/
12:39:12 270  
12:39:12 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
12:39:12 272  /*
12:39:12 273  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 274  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 275  */
12:39:12 276  	in_license_id IN NUMBER,
12:39:12 277  	out_group_id  OUT NUMBER
12:39:12 278  ) AS
12:39:12 279  BEGIN
12:39:12 280  	PROCS_LICENSE_V16.GET_GROUP_ID_BY_LICENSE_ID (
12:39:12 281  	  in_license_id,
12:39:12 282  	  out_group_id
12:39:12 283  	);
12:39:12 284  END GET_GROUP_ID_BY_LICENSE_ID;
12:39:12 285  
12:39:12 286  /**********************************************************/
12:39:12 287  
12:39:12 288  PROCEDURE GET_OFFER_PRODUCTS (
12:39:12 289  /*
12:39:12 290  Throws exceptions (codes):
12:39:12 291  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 292  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 293  */
12:39:12 294  	in_offer_id    IN NUMBER,
12:39:12 295  	out_result_set OUT SYS_REFCURSOR
12:39:12 296  ) AS
12:39:12 297  BEGIN
12:39:12 298  	PROCS_OFFER_CHAIN_V16.GET_OFFER_PRODUCTS (
12:39:12 299  	  in_offer_id,
12:39:12 300  	  out_result_set
12:39:12 301  	);
12:39:12 302  END GET_OFFER_PRODUCTS;
12:39:12 303  
12:39:12 304  /***********************************************************/
12:39:12 305  
12:39:12 306  PROCEDURE CREATE_TRANSACTION (
12:39:12 307  /*
12:39:12 308  Throws exceptions:
12:39:12 309  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 310  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 311  */
12:39:12 312  	in_transaction_id  IN NUMBER,
12:39:12 313  	in_status_id	   IN NUMBER,
12:39:12 314  	in_amount	   IN NUMBER,
12:39:12 315  	in_created_by	   IN VARCHAR2,
12:39:12 316  	in_order_id	   IN VARCHAR2,
12:39:12 317  	out_transaction_id OUT NUMBER
12:39:12 318  ) AS
12:39:12 319  BEGIN
12:39:12 320  	PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
12:39:12 321  	  in_transaction_id,
12:39:12 322  	  in_status_id,
12:39:12 323  	  in_amount,
12:39:12 324  	  in_created_by,
12:39:12 325  	  in_order_id,
12:39:12 326  	  GLOBAL_CONSTANTS_V16.FALSE, -- is_refund should be false in renewal
12:39:12 327  	  out_transaction_id
12:39:12 328  	);
12:39:12 329  END CREATE_TRANSACTION;
12:39:12 330  
12:39:12 331  /************************************************************/
12:39:12 332  
12:39:12 333  PROCEDURE ADD_LINE_ITEMS(
12:39:12 334  /*
12:39:12 335  Throws exceptions:
12:39:12 336  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 337  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 338  */
12:39:12 339  	in_invoice_id IN NUMBER,
12:39:12 340  	in_offer_id   IN NUMBER,
12:39:12 341  	in_created_by IN VARCHAR2
12:39:12 342  ) AS
12:39:12 343  BEGIN
12:39:12 344  	PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
12:39:12 345  	  in_invoice_id,
12:39:12 346  	  in_offer_id,
12:39:12 347  	  in_created_by
12:39:12 348  	);
12:39:12 349  END ADD_LINE_ITEMS;
12:39:12 350  
12:39:12 351  /************************************************************/
12:39:12 352  
12:39:12 353  PROCEDURE CALCULATE_INVOICE_AMOUNT (
12:39:12 354  /*
12:39:12 355  Throws exceptions:
12:39:12 356  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 357  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 358  */
12:39:12 359  	in_invoice_id IN  NUMBER,
12:39:12 360  	out_amount    OUT NUMBER
12:39:12 361  ) AS
12:39:12 362  BEGIN
12:39:12 363  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
12:39:12 364  	  in_invoice_id,
12:39:12 365  	  out_amount
12:39:12 366  	);
12:39:12 367  END CALCULATE_INVOICE_AMOUNT;
12:39:12 368  
12:39:12 369  /*************************************************************/
12:39:12 370  
12:39:12 371  PROCEDURE RESERVE_TRANSACTION_ID (
12:39:12 372  /*
12:39:12 373  Throws exceptions:
12:39:12 374  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 375  */
12:39:12 376  	out_transaction_id OUT NUMBER
12:39:12 377  ) AS
12:39:12 378  BEGIN
12:39:12 379  	PROCS_TRANSACTION_V16.RESERVE_TRANSACTION_ID (
12:39:12 380  	  out_transaction_id
12:39:12 381  	);
12:39:12 382  END RESERVE_TRANSACTION_ID;
12:39:12 383  
12:39:12 384  /***************************************************************/
12:39:12 385  
12:39:12 386  PROCEDURE P_GET_NEXT_OFFER_INDEX (
12:39:12 387  	in_offer_chain_id	     IN NUMBER,
12:39:12 388  	in_offer_chain_current_index IN NUMBER,
12:39:12 389  	out_next_offer_index	     OUT NUMBER
12:39:12 390  ) AS
12:39:12 391  BEGIN
12:39:12 392  	PROCS_OFFER_CHAIN_V16.P_GET_NEXT_OFFER_INDEX(
12:39:12 393  	  in_offer_chain_id,
12:39:12 394  	  in_offer_chain_current_index,
12:39:12 395  	  out_next_offer_index
12:39:12 396  	);
12:39:12 397  END P_GET_NEXT_OFFER_INDEX;
12:39:12 398  
12:39:12 399  /***************************************************************/
12:39:12 400  
12:39:12 401  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
12:39:12 402  	in_license_id		     IN NUMBER,
12:39:12 403  	in_offer_chain_current_index IN NUMBER,
12:39:12 404  	out_next_offer_index	     OUT NUMBER
12:39:12 405  ) AS
12:39:12 406  BEGIN
12:39:12 407  	PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX_BY_LCNS(
12:39:12 408  	  in_license_id,
12:39:12 409  	  in_offer_chain_current_index,
12:39:12 410  	  out_next_offer_index
12:39:12 411  	);
12:39:12 412  END GET_NEXT_OFFER_INDEX_BY_LCNS;
12:39:12 413  
12:39:12 414  /******************************************************************/
12:39:12 415  
12:39:12 416  PROCEDURE GET_SUBSCRIPTION_INFO (
12:39:12 417  /*
12:39:12 418  Throws exceptions:
12:39:12 419  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 420  */
12:39:12 421  	  in_subscription_id IN  NUMBER,
12:39:12 422  	  out_result_set      OUT SYS_REFCURSOR
12:39:12 423  ) AS
12:39:12 424  BEGIN
12:39:12 425  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTION_INFO(
12:39:12 426  	  in_subscription_id,
12:39:12 427  	  out_result_set
12:39:12 428  	);
12:39:12 429  END GET_SUBSCRIPTION_INFO;
12:39:12 430  
12:39:12 431  /*******************************************************************/
12:39:12 432  
12:39:12 433  PROCEDURE CLOSE_SUBSCRIPTION (
12:39:12 434  	in_subscription_id IN NUMBER,
12:39:12 435  	in_updated_by	   IN VARCHAR2
12:39:12 436  ) AS
12:39:12 437  BEGIN
12:39:12 438  	PROCS_SUBSCRIPTION_V16.CLOSE_SUBSCRIPTION(
12:39:12 439  	  in_subscription_id,
12:39:12 440  	  in_updated_by
12:39:12 441  	);
12:39:12 442  END CLOSE_SUBSCRIPTION;
12:39:12 443  
12:39:12 444  /*******************************************************************/
12:39:12 445  
12:39:12 446  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
12:39:12 447  	out_result_set OUT SYS_REFCURSOR
12:39:12 448  ) AS
12:39:12 449  BEGIN
12:39:12 450  	PROCS_LICENSE_V16.GET_NEED_ENTITLEMENTS_LICENSES(
12:39:12 451  	  out_result_set
12:39:12 452  	);
12:39:12 453  END GET_NEED_ENTITLEMENTS_LICENSES;
12:39:12 454  
12:39:12 455  /*******************************************************************/
12:39:12 456  
12:39:12 457  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
12:39:12 458  	in_license_id	      IN NUMBER,
12:39:12 459  	in_needs_entitlements IN NUMBER,
12:39:12 460  	in_updated_by	      IN VARCHAR2
12:39:12 461  ) AS
12:39:12 462  BEGIN
12:39:12 463  	PROCS_LICENSE_V16.UPDATE_NEED_ENTITLEMENTS_FLAG(
12:39:12 464  	  in_license_id,
12:39:12 465  	  in_needs_entitlements,
12:39:12 466  	  in_updated_by
12:39:12 467  	);
12:39:12 468  END UPDATE_NEED_ENTITLEMENTS_FLAG;
12:39:12 469  
12:39:12 470  /*******************************************************/
12:39:12 471  
12:39:12 472  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
12:39:12 473  /*
12:39:12 474  Throws exceptions (codes):
12:39:12 475  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 476  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 477  */
12:39:12 478  	in_offer_id    IN NUMBER,
12:39:12 479  	out_result_set OUT SYS_REFCURSOR
12:39:12 480  ) AS
12:39:12 481  BEGIN
12:39:12 482  	PROCS_OFFER_CHAIN_V16.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
12:39:12 483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
12:39:12 484  
12:39:12 485  /*******************************************************/
12:39:12 486  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
12:39:12 487  /*
12:39:12 488  Throws exceptions (codes):
12:39:12 489  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 490  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 491  */
12:39:12 492  	in_product_offering_id IN NUMBER,
12:39:12 493  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
12:39:12 494  	out_result_set	       OUT SYS_REFCURSOR
12:39:12 495  ) AS
12:39:12 496  BEGIN
12:39:12 497  	PROCS_OFFER_CHAIN_V16.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
12:39:12 498  END GET_PRODUCT_OFFERING_META_DATA;
12:39:12 499  
12:39:12 500  /*******************************************************/
12:39:12 501  
12:39:12 502  PROCEDURE LOCK_ACCOUNT (
12:39:12 503  	in_group_id    IN NUMBER,
12:39:12 504  	in_lock_key    IN VARCHAR2,
12:39:12 505  	in_seconds_num IN NUMBER,
12:39:12 506  	in_created_by  IN VARCHAR2,
12:39:12 507  	in_reason      IN VARCHAR2
12:39:12 508  ) AS
12:39:12 509  BEGIN
12:39:12 510  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
12:39:12 511  	  in_group_id,
12:39:12 512  	  in_lock_key,
12:39:12 513  	  in_seconds_num,
12:39:12 514  	  in_created_by,
12:39:12 515  	  in_reason
12:39:12 516  	);
12:39:12 517  END LOCK_ACCOUNT;
12:39:12 518  
12:39:12 519  /****************************************************************/
12:39:12 520  
12:39:12 521  PROCEDURE RELEASE_LOCK (
12:39:12 522  	in_group_id IN NUMBER,
12:39:12 523  	in_lock_key IN VARCHAR2
12:39:12 524  ) AS
12:39:12 525  BEGIN
12:39:12 526  	PROCS_LOCKING_V16.RELEASE_LOCK(
12:39:12 527  	  in_group_id,
12:39:12 528  	  in_lock_key
12:39:12 529  	);
12:39:12 530  END RELEASE_LOCK;
12:39:12 531  
12:39:12 532  /******************************************************************************/
12:39:12 533  
12:39:12 534  PROCEDURE GET_INVOICE_LINE_ITEMS (
12:39:12 535  	in_invoice_id  IN NUMBER,
12:39:12 536  	out_result_set OUT SYS_REFCURSOR
12:39:12 537  ) AS
12:39:12 538  BEGIN
12:39:12 539  	PROCS_INVOICE_V16.GET_INVOICE_LINE_ITEMS(
12:39:12 540  	  in_invoice_id,
12:39:12 541  	  out_result_set
12:39:12 542  	);
12:39:12 543  END GET_INVOICE_LINE_ITEMS;
12:39:12 544  
12:39:12 545  /******************************************************************************/
12:39:12 546  
12:39:12 547  PROCEDURE ADD_TAX (
12:39:12 548  	in_tax_type_id		 IN NUMBER,
12:39:12 549  	in_calculated_amount	 IN NUMBER,
12:39:12 550  	in_created_by		 IN VARCHAR2,
12:39:12 551  	in_line_item_id 	 IN NUMBER,
12:39:12 552  	in_effective_rate	 IN VARCHAR2,
12:39:12 553  	in_taxable_amount	 IN NUMBER,
12:39:12 554  	in_tax_rule_id		 IN NUMBER,
12:39:12 555  	in_jurisdiction_level_id IN NUMBER,
12:39:12 556  	in_jurisdiction_name	 IN VARCHAR2,
12:39:12 557  	in_jurisdiction_id	 IN VARCHAR2,
12:39:12 558  	in_ext_tax_type 	 IN VARCHAR2,
12:39:12 559  	in_ext_result		 IN VARCHAR2,
12:39:12 560  	in_imposition_type	 IN VARCHAR2,
12:39:12 561  	in_imposition		 IN VARCHAR2
12:39:12 562  ) AS
12:39:12 563  BEGIN
12:39:12 564  	PROCS_TAXES_V16.ADD_TAX(
12:39:12 565  	  in_tax_type_id,
12:39:12 566  	  in_calculated_amount,
12:39:12 567  	  in_created_by,
12:39:12 568  	  in_line_item_id,
12:39:12 569  	  in_effective_rate,
12:39:12 570  	  in_taxable_amount,
12:39:12 571  	  in_tax_rule_id,
12:39:12 572  	  in_jurisdiction_level_id,
12:39:12 573  	  in_jurisdiction_name,
12:39:12 574  	  in_jurisdiction_id,
12:39:12 575  	  in_ext_tax_type,
12:39:12 576  	  in_ext_result,
12:39:12 577  	  in_imposition_type,
12:39:12 578  	  in_imposition
12:39:12 579  	);
12:39:12 580  END ADD_TAX;
12:39:12 581  
12:39:12 582  /******************************************************************************/
12:39:12 583  
12:39:12 584  PROCEDURE GET_CREDIT_CARD_BY_ID (
12:39:12 585  	in_credit_card_id IN  NUMBER,
12:39:12 586  	out_result_set	  OUT SYS_REFCURSOR
12:39:12 587  ) AS
12:39:12 588  BEGIN
12:39:12 589  	PROCS_FIN_INSTRUMENTS_V16.GET_CREDIT_CARD_BY_ID(
12:39:12 590  	  in_credit_card_id,
12:39:12 591  	  out_result_set
12:39:12 592  	);
12:39:12 593  END GET_CREDIT_CARD_BY_ID;
12:39:12 594  
12:39:12 595  /******************************************************************************/
12:39:12 596  
12:39:12 597  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
12:39:12 598  	in_line_item_id IN NUMBER,
12:39:12 599  	out_result_set	OUT SYS_REFCURSOR
12:39:12 600  ) AS
12:39:12 601  BEGIN
12:39:12 602  	PROCS_PRODUCT_V16.GET_PRD_OFFERING_BY_LINE_IT_ID(
12:39:12 603  	  in_line_item_id,
12:39:12 604  	  out_result_set
12:39:12 605  	);
12:39:12 606  END GET_PRD_OFFERING_BY_LINE_IT_ID;
12:39:12 607  
12:39:12 608  /******************************************************************************/
12:39:12 609  
12:39:12 610  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
12:39:12 611  /*
12:39:12 612  Throws exceptions:
12:39:12 613  APP_EXCEPTION_CODES_V16.NOT_FOUND,
12:39:12 614  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 615  */
12:39:12 616  	in_group_id IN NUMBER,
12:39:12 617  	out_account_id	OUT NUMBER
12:39:12 618  ) AS
12:39:12 619  BEGIN
12:39:12 620  	PROCS_ACCOUNT_V16.GET_ACCOUNT_ID_BY_GROUP_ID(
12:39:12 621  	  in_group_id,
12:39:12 622  	  out_account_id
12:39:12 623  	);
12:39:12 624  END GET_ACCOUNT_ID_BY_GROUP_ID;
12:39:12 625  
12:39:12 626  /******************************************************************************/
12:39:12 627  
12:39:12 628  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
12:39:12 629  /*
12:39:12 630  Throws exceptions:
12:39:12 631  APP_EXCEPTION_CODES_V16.NOT_FOUND
12:39:12 632  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 633  */
12:39:12 634  	in_line_item_id IN  NUMBER,
12:39:12 635  	out_result_set	OUT SYS_REFCURSOR
12:39:12 636  ) AS
12:39:12 637  BEGIN
12:39:12 638  	PROCS_LINE_ITEMS_V16.GET_LINE_ITEM_DISCOUNTS(
12:39:12 639  	  in_line_item_id,
12:39:12 640  	  out_result_set
12:39:12 641  	);
12:39:12 642  END GET_LINE_ITEM_DISCOUNTS;
12:39:12 643  
12:39:12 644  /******************************************************************************/
12:39:12 645  
12:39:12 646  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
12:39:12 647  	in_line_item_id    IN NUMBER,
12:39:12 648  	in_amount	   IN NUMBER,
12:39:12 649  	in_discount_amount IN NUMBER,
12:39:12 650  	in_taxes_amount    IN NUMBER
12:39:12 651  ) AS
12:39:12 652  BEGIN
12:39:12 653  	PROCS_LINE_ITEMS_V16.UPDATE_LINE_ITEM_AMOUNT(
12:39:12 654  	  in_line_item_id,
12:39:12 655  	  in_amount,
12:39:12 656  	  in_discount_amount,
12:39:12 657  	  in_taxes_amount
12:39:12 658  	);
12:39:12 659  END UPDATE_LINE_ITEM_AMOUNT;
12:39:12 660  
12:39:12 661  /******************************************************************************/
12:39:12 662  
12:39:12 663  PROCEDURE GET_PAYPAL_BY_ID (
12:39:12 664  	in_paypal_id   IN  NUMBER,
12:39:12 665  	out_result_set OUT SYS_REFCURSOR
12:39:12 666  ) AS
12:39:12 667  BEGIN
12:39:12 668  	PROCS_FIN_INSTRUMENTS_V16.GET_PAYPAL_BY_ID(
12:39:12 669  	  in_paypal_id,
12:39:12 670  	  out_result_set
12:39:12 671  	);
12:39:12 672  END GET_PAYPAL_BY_ID;
12:39:12 673  
12:39:12 674  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
12:39:12 675  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
12:39:12 676  	out_result_set OUT SYS_REFCURSOR
12:39:12 677  ) AS
12:39:12 678  BEGIN
12:39:12 679  	PROCS_FIN_INSTRUMENTS_V16.GET_GC_BY_PURCH_INVOICE_ID (
12:39:12 680  	  in_invoice_id,
12:39:12 681  	  out_result_set
12:39:12 682  	);
12:39:12 683  END GET_GC_BY_PURCH_INVOICE_ID;
12:39:12 684  
12:39:12 685  PROCEDURE GET_LICENSE_BY_ID (
12:39:12 686  	in_license_id  IN NUMBER,
12:39:12 687  	out_result_set OUT SYS_REFCURSOR
12:39:12 688  ) AS
12:39:12 689  BEGIN
12:39:12 690  	PROCS_LICENSE_V16.GET_LICENSE_BY_ID (
12:39:12 691  	  in_license_id,
12:39:12 692  	  out_result_set
12:39:12 693  	);
12:39:12 694  END GET_LICENSE_BY_ID;
12:39:12 695  
12:39:12 696  /******************************************************************************/
12:39:12 697  
12:39:12 698  PROCEDURE GET_NOTIFICATION_TYPE_ID (
12:39:12 699  	in_offer_chain_id	 IN NUMBER,
12:39:12 700  	in_action_name		 IN VARCHAR2,
12:39:12 701  	out_notification_type_id OUT NUMBER
12:39:12 702  ) AS
12:39:12 703  BEGIN
12:39:12 704  	PROCS_OFFER_CHAIN_V16.GET_NOTIFICATION_TYPE_ID(
12:39:12 705  	  in_offer_chain_id,
12:39:12 706  	  in_action_name,
12:39:12 707  	  out_notification_type_id
12:39:12 708  	);
12:39:12 709  END GET_NOTIFICATION_TYPE_ID;
12:39:12 710  
12:39:12 711  /******************************************************************************/
12:39:12 712  
12:39:12 713  PROCEDURE GET_ALL_OCH_META_DATA (
12:39:12 714  	in_offer_chain_id IN NUMBER,
12:39:12 715  	out_result_set	  OUT SYS_REFCURSOR
12:39:12 716  ) AS
12:39:12 717  BEGIN
12:39:12 718  	PROCS_OFFER_CHAIN_V16.GET_ALL_META_DATA (
12:39:12 719  	  in_offer_chain_id,
12:39:12 720  	  out_result_set
12:39:12 721  	);
12:39:12 722  END GET_ALL_OCH_META_DATA;
12:39:12 723  
12:39:12 724  /******************************************************************************/
12:39:12 725  
12:39:12 726  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
12:39:12 727  /*
12:39:12 728  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
12:39:12 729  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
12:39:12 730  */
12:39:12 731  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
12:39:12 732  	out_result_set	     OUT SYS_REFCURSOR
12:39:12 733  ) AS
12:39:12 734  BEGIN
12:39:12 735  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTIONS_META_DATA(
12:39:12 736  	  in_subscriptions_ids,
12:39:12 737  	  out_result_set
12:39:12 738  	);
12:39:12 739  END GET_SUBSCRIPTIONS_META_DATA;
12:39:12 740  
12:39:12 741  PROCEDURE GET_UNREDEEMED_GCS (
12:39:12 742  	out_result_set		OUT SYS_REFCURSOR,
12:39:12 743  	in_hours_number 	IN NUMBER DEFAULT 14*24,
12:39:12 744  	in_num_rows		IN NUMBER DEFAULT 10000,
12:39:12 745  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
12:39:12 746  ) AS
12:39:12 747  BEGIN
12:39:12 748  	PROCS_FIN_INSTRUMENTS_V16.GET_UNREDEEMED_GCS(
12:39:12 749  	  out_result_set => out_result_set,
12:39:12 750  	  in_hours_number => in_hours_number,
12:39:12 751  	  in_num_rows => in_num_rows,
12:39:12 752  	  in_process_name => in_process_name
12:39:12 753  	);
12:39:12 754  END GET_UNREDEEMED_GCS;
12:39:12 755  
12:39:12 756  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
12:39:12 757  	in_offer_chain_id IN NUMBER,
12:39:12 758  	in_meta_data_name IN VARCHAR2,
12:39:12 759  	out_value	  OUT VARCHAR2
12:39:12 760  ) AS
12:39:12 761  BEGIN
12:39:12 762  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
12:39:12 763  	  in_offer_chain_id => in_offer_chain_id,
12:39:12 764  	  in_meta_data_name => in_meta_data_name,
12:39:12 765  	  out_value => out_value
12:39:12 766  	);
12:39:12 767  END GET_OFFER_CHAIN_MD_VALUE;
12:39:12 768  
12:39:12 769  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
12:39:12 770  	out_result_set	    OUT SYS_REFCURSOR
12:39:12 771  )
12:39:12 772  AS
12:39:12 773  BEGIN
12:39:12 774  	PROCS_SUBSCRIPTION_V16.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
12:39:12 775  	  out_result_set => out_result_set
12:39:12 776  	);
12:39:12 777  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
12:39:12 778  
12:39:12 779  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
12:39:12 780  	out_result_set	    OUT SYS_REFCURSOR
12:39:12 781  )
12:39:12 782  AS
12:39:12 783  BEGIN
12:39:12 784  	PROCS_SUBSCRIPTION_V16.GET_ACT_SUBS_W_PP_CHARGEBACKS(
12:39:12 785  	  out_result_set => out_result_set
12:39:12 786  	);
12:39:12 787  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
12:39:12 788  
12:39:12 789  END PUBLIC_PROCS_RENEWAL_V16;
12:39:12 790  .
12:39:12 SQL> /

Package body created.

Elapsed: 00:00:00.04
12:39:12 SQL> 
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ADX_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_TEST_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.03
12:39:12 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> 
12:39:12 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V16 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V16 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.02
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V16 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> 
12:39:12 SQL> 
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> 
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.04
12:39:12 SQL> 
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.03
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> 
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> 
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> 
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
12:39:12 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
12:39:12 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
12:39:12 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECST2@rac01.stg.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: nytd_oracledba@nytimes.com
Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.stg.ewr1.nytimes.com
        SID: ECST2
        Schema: core_owner
        Migration: 19.2-release-1.11.0-all
        SVN Revision: 10148
        Duration: 7 sec.
        Service Request: https://jira.em.nytimes.com/browse/ORA-284