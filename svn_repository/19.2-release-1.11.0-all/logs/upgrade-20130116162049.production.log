16:21:01 SQL> @/dbbackups/ECPR/migrations/core_owner/19.2-release-1.11.0-all/upgrade.sql
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> -- DDL for package PROCS_ACCOUNT_CRU
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE CREATE_ACCOUNT (
16:21:01   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
16:21:01   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
16:21:01   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
16:21:01   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
16:21:01   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
16:21:01   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
16:21:01  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:21:01  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
16:21:01  12  );
16:21:01  13  
16:21:01  14  PROCEDURE UPDATE_ACCOUNT (
16:21:01  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
16:21:01  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
16:21:01  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
16:21:01  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
16:21:01  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
16:21:01  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:21:01  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
16:21:01  22  );
16:21:01  23  
16:21:01  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
16:21:01  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
16:21:01  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
16:21:01  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
16:21:01  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
16:21:01  29  );
16:21:01  30  
16:21:01  31  PROCEDURE READ_ACCOUNT (
16:21:01  32  	in_account_id  IN ACCOUNT.ID%TYPE,
16:21:01  33  	out_result_set OUT SYS_REFCURSOR
16:21:01  34  );
16:21:01  35  
16:21:01  36  PROCEDURE CREATE_ACCOUNT_NOTE (
16:21:01  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
16:21:01  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
16:21:01  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
16:21:01  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
16:21:01  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
16:21:01  42  );
16:21:01  43  
16:21:01  44  END PROCS_ACCOUNT_CRU_V16;
16:21:01  45  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.11
16:21:01 SQL> 
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> -- DDL for package PROCS_ACCOUNT
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE ANNOTATE_ACCOUNT (
16:21:01   4  /*
16:21:01   5  Throws exceptions:
16:21:01   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01   8  */
16:21:01   9  	in_group_id   IN  NUMBER,
16:21:01  10  	in_agent_id   IN  NUMBER,
16:21:01  11  	in_note       IN  VARCHAR2,
16:21:01  12  	in_created_by IN  VARCHAR2
16:21:01  13  );
16:21:01  14  
16:21:01  15  PROCEDURE ASSERT_ACCOUNT_EXISTS (
16:21:01  16  /*
16:21:01  17  Throws exceptions:
16:21:01  18  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01  19  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  20  */
16:21:01  21  	in_group_id IN	NUMBER,
16:21:01  22  	out_exists  OUT NUMBER
16:21:01  23  );
16:21:01  24  
16:21:01  25  PROCEDURE DISABLE_ACCOUNT (
16:21:01  26  /*
16:21:01  27  Throws exceptions:
16:21:01  28  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:01  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:01  30  */
16:21:01  31  	in_group_id   IN NUMBER,
16:21:01  32  	in_updated_by IN VARCHAR2,
16:21:01  33  	in_note       IN VARCHAR2,
16:21:01  34  	in_agent_id   IN NUMBER
16:21:01  35  );
16:21:01  36  
16:21:01  37  PROCEDURE CREATE_ACTIVE_ACCOUNT(
16:21:01  38  /*
16:21:01  39  Throws exceptions:
16:21:01  40  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:01  41  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  42  */
16:21:01  43  	in_created_by	       IN VARCHAR2,
16:21:01  44  	in_group_id	       IN NUMBER
16:21:01  45  );
16:21:01  46  
16:21:01  47  PROCEDURE REACTIVATE_ACCOUNT (
16:21:01  48  /*
16:21:01  49  Throws exceptions:
16:21:01  50  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:01  51  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:01  52  */
16:21:01  53  	in_group_id	  IN NUMBER,
16:21:01  54  	in_updated_by	  IN VARCHAR2,
16:21:01  55  	in_note 	  IN VARCHAR2,
16:21:01  56  	in_agent_id	  IN NUMBER
16:21:01  57  );
16:21:01  58  
16:21:01  59  /*
16:21:01  60  
16:21:01  61  THERE ARE NO ACCOUNT STATUS "SUSPENDED"
16:21:01  62  Waiting for new instructions.
16:21:01  63  
16:21:01  64  PROCEDURE SUSPEND_ACCOUNT (
16:21:01  65  /*
16:21:01  66  Throws exceptions:
16:21:01  67  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:01  68  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:01  69  
16:21:01  70  	  in_group_id	 IN  NUMBER,
16:21:01  71  	  in_updated_by  IN  VARCHAR2
16:21:01  72  )
16:21:01  73  */
16:21:01  74  
16:21:01  75  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
16:21:01  76  /*
16:21:01  77  IN:
16:21:01  78  instr_status:
16:21:01  79  1 - get active instruments only (default)
16:21:01  80  0 - get inactive instruments only
16:21:01  81  
16:21:01  82  Throws exceptions:
16:21:01  83  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  85  */
16:21:01  86  	in_group_id	  IN NUMBER,
16:21:01  87  	out_result_cc_set OUT SYS_REFCURSOR,
16:21:01  88  	out_default_id	  OUT NUMBER,
16:21:01  89  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
16:21:01  90  );
16:21:01  91  
16:21:01  92  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
16:21:01  93  /*
16:21:01  94  IN:
16:21:01  95  instr_status:
16:21:01  96  GLOBAL_CONSTANTS_V16.TRUE - get active instruments only (default)
16:21:01  97  GLOBAL_CONSTANTS_V16.FALSE - get inactive instruments only
16:21:01  98  
16:21:01  99  Throws exceptions:
16:21:01 100  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 102  */
16:21:01 103  	in_group_id	  IN NUMBER,
16:21:01 104  	out_result_gc_set OUT SYS_REFCURSOR,
16:21:01 105  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
16:21:01 106  );
16:21:01 107  
16:21:01 108  PROCEDURE GET_ACCOUNT_INFO  (
16:21:01 109  /*
16:21:01 110  Throws exceptions:
16:21:01 111  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 112  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 113  */
16:21:01 114  	  in_group_id	    IN	NUMBER,
16:21:01 115  	  out_account_info  OUT SYS_REFCURSOR
16:21:01 116  );
16:21:01 117  
16:21:01 118  PROCEDURE GET_ACCOUNT_NOTES (
16:21:01 119  /*
16:21:01 120  Throws exceptions:
16:21:01 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 122  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01 123  */
16:21:01 124  	  in_group_id	 IN  NUMBER,
16:21:01 125  	  out_result_set OUT SYS_REFCURSOR
16:21:01 126  );
16:21:01 127  
16:21:01 128  PROCEDURE GET_ACCOUNT_PAYPALS(
16:21:01 129  /*
16:21:01 130  IN:
16:21:01 131  instr_status:
16:21:01 132  1 - get active instruments only (default)
16:21:01 133  0 - get inactive instruments only
16:21:01 134  
16:21:01 135  Throws exceptions:
16:21:01 136  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 137  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 138  */
16:21:01 139  	in_group_id	  IN NUMBER,
16:21:01 140  	out_result_pp_set OUT SYS_REFCURSOR,
16:21:01 141  	out_default_id	  OUT NUMBER,
16:21:01 142  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
16:21:01 143  );
16:21:01 144  
16:21:01 145  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
16:21:01 146  /*
16:21:01 147  Throws exceptions:
16:21:01 148  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 149  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:01 150  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 151  */
16:21:01 152  	  in_group_id	 IN  NUMBER,
16:21:01 153  	  in_start_date  IN DATE,
16:21:01 154  	  in_end_date	 IN DATE,
16:21:01 155  	  in_status	 IN NUMBER,
16:21:01 156  	  in_group_account_type IN VARCHAR2,
16:21:01 157  	  out_result_set  OUT SYS_REFCURSOR
16:21:01 158  );
16:21:01 159  
16:21:01 160  PROCEDURE FREEZE_ACCOUNT (
16:21:01 161  /*
16:21:01 162  Throws exceptions:
16:21:01 163  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 164  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 165  */
16:21:01 166  	in_group_id   IN NUMBER,
16:21:01 167  	in_updated_by IN VARCHAR2,
16:21:01 168  	in_note       IN VARCHAR2,
16:21:01 169  	in_agent_id   IN NUMBER
16:21:01 170  );
16:21:01 171  
16:21:01 172  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
16:21:01 173  /*
16:21:01 174  Throws exceptions:
16:21:01 175  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 176  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 177  */
16:21:01 178  	in_group_id	   IN  NUMBER,
16:21:01 179  	in_subscription_id IN NUMBER,
16:21:01 180  	out_result_set	   OUT SYS_REFCURSOR
16:21:01 181  );
16:21:01 182  
16:21:01 183  PROCEDURE GET_ACCOUNT_GC_INVOICES (
16:21:01 184  /*
16:21:01 185  Throws exceptions:
16:21:01 186  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 188  */
16:21:01 189  	in_group_id    IN  NUMBER,
16:21:01 190  	out_result_set OUT SYS_REFCURSOR
16:21:01 191  );
16:21:01 192  
16:21:01 193  PROCEDURE GET_GC_INVOICE (
16:21:01 194  /*
16:21:01 195  Throws exceptions:
16:21:01 196  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 198  */
16:21:01 199  	in_group_id    IN  NUMBER,
16:21:01 200  	in_gc_code     IN  VARCHAR2,
16:21:01 201  	out_result_set OUT SYS_REFCURSOR
16:21:01 202  );
16:21:01 203  
16:21:01 204  PROCEDURE GET_ACCOUNT_PRODUCTS (
16:21:01 205  /*
16:21:01 206  Throws exceptions:
16:21:01 207  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 208  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 209  */
16:21:01 210  	in_group_id    IN  NUMBER,
16:21:01 211  	out_result_set OUT SYS_REFCURSOR
16:21:01 212  );
16:21:01 213  
16:21:01 214  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
16:21:01 215  /*
16:21:01 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 218  */
16:21:01 219  	in_group_id IN NUMBER,
16:21:01 220  	out_result_set	   OUT SYS_REFCURSOR
16:21:01 221  );
16:21:01 222  
16:21:01 223  PROCEDURE UPDATE_ACCOUNT_STATUS (
16:21:01 224  /*
16:21:01 225  Throws exceptions:
16:21:01 226  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 227  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 228  */
16:21:01 229  	in_account_id	     IN ACCOUNT.ID%TYPE,
16:21:01 230  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
16:21:01 231  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
16:21:01 232  );
16:21:01 233  
16:21:01 234  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
16:21:01 235  /*
16:21:01 236  Throws exceptions:
16:21:01 237  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 239  */
16:21:01 240  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
16:21:01 241  	out_licenses_num OUT NUMBER
16:21:01 242  );
16:21:01 243  
16:21:01 244  PROCEDURE SET_TAX_EXEMPT (
16:21:01 245  /*
16:21:01 246  Throws exceptions:
16:21:01 247  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 248  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 249  */
16:21:01 250  	in_group_id  IN NUMBER,
16:21:01 251  	in_exempt_id IN VARCHAR2
16:21:01 252  );
16:21:01 253  
16:21:01 254  PROCEDURE IS_TAX_EXEMPT (
16:21:01 255  /*
16:21:01 256  Throws exceptions:
16:21:01 257  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 258  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 259  Return:
16:21:01 260  	GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
16:21:01 261  	GLOBAL_CONSTANTS_V16.FALSE else
16:21:01 262  */
16:21:01 263  	in_group_id	  IN NUMBER,
16:21:01 264  	out_is_tax_exempt OUT NUMBER
16:21:01 265  );
16:21:01 266  
16:21:01 267  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
16:21:01 268  /*
16:21:01 269  Throws exceptions:
16:21:01 270  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 271  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 272  */
16:21:01 273  	in_account_id IN NUMBER,
16:21:01 274  	out_group_id  OUT NUMBER
16:21:01 275  );
16:21:01 276  
16:21:01 277  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:21:01 278  /*
16:21:01 279  Throws exceptions:
16:21:01 280  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 281  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 282  */
16:21:01 283  	in_group_id IN NUMBER,
16:21:01 284  	out_account_id	OUT NUMBER
16:21:01 285  );
16:21:01 286  
16:21:01 287  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
16:21:01 288  /*
16:21:01 289  Throws exceptions:
16:21:01 290  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 291  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 292  */
16:21:01 293  	in_invoice_id IN NUMBER,
16:21:01 294  	out_group_ids OUT SYS_REFCURSOR
16:21:01 295  );
16:21:01 296  
16:21:01 297  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
16:21:01 298  /*
16:21:01 299  Throws exceptions:
16:21:01 300  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 301  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 302  */
16:21:01 303  	in_group_id	  IN NUMBER,
16:21:01 304  	out_tax_exempt_id OUT VARCHAR2
16:21:01 305  );
16:21:01 306  
16:21:01 307  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
16:21:01 308  /*
16:21:01 309  Throws exceptions:
16:21:01 310  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 312  
16:21:01 313  Result has two columns:
16:21:01 314  subscription_id and offer_chain_id
16:21:01 315  */
16:21:01 316  	in_group_id    IN NUMBER,
16:21:01 317  	out_result_set OUT SYS_REFCURSOR
16:21:01 318  );
16:21:01 319  
16:21:01 320  PROCEDURE GET_USR_ALL_SBSCR_IDS (
16:21:01 321  /*
16:21:01 322  Throws exceptions:
16:21:01 323  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 324  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01 325  
16:21:01 326  Result has two columns:
16:21:01 327  subscription_id and offer_chain_id
16:21:01 328  */
16:21:01 329  	in_group_id	   IN NUMBER,
16:21:01 330  	out_result_set	   OUT SYS_REFCURSOR
16:21:01 331  );
16:21:01 332  
16:21:01 333  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
16:21:01 334  /*
16:21:01 335  Throws exceptions:
16:21:01 336  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:01 337  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:01 338  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:01 339  
16:21:01 340  Result has two columns:
16:21:01 341  subscription_id and offer_chain_id
16:21:01 342  */
16:21:01 343  	in_group_id	   IN NUMBER,
16:21:01 344  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:21:01 345  	out_result_set	   OUT SYS_REFCURSOR
16:21:01 346  );
16:21:01 347  
16:21:01 348  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
16:21:01 349  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:21:01 350  	in_expiration_date IN DATE,
16:21:01 351  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
16:21:01 352  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:01 353  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
16:21:01 354  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
16:21:01 355  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
16:21:01 356  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
16:21:01 357  	in_lower_bound IN NUMBER DEFAULT 1,
16:21:01 358  	in_upper_bound IN NUMBER DEFAULT 11,
16:21:01 359  	out_result_set OUT SYS_REFCURSOR
16:21:01 360  );
16:21:01 361  
16:21:01 362  END PROCS_ACCOUNT_V16;
16:21:01 363  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.23
16:21:01 SQL> 
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> -- DDL for package PROCS_ADDRESS_CRU
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE CREATE_ADDRESS(
16:21:01   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
16:21:01   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
16:21:01   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:21:01   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:21:01   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:21:01   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:21:01  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:01  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:21:01  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
16:21:01  13  );
16:21:01  14  
16:21:01  15  PROCEDURE UPDATE_ADDRESS(
16:21:01  16  	in_address_id	      IN ADDRESS.ID%TYPE,
16:21:01  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:21:01  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:21:01  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:21:01  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:21:01  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:01  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:21:01  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
16:21:01  24  );
16:21:01  25  
16:21:01  26  END PROCS_ADDRESS_CRU_V16;
16:21:01  27  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.03
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE CREATE_ADDRESS(
16:21:01   4  /*
16:21:01   5  Throws exceptions:
16:21:01   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01   7  */
16:21:01   8  	  out_address_id	OUT NUMBER,
16:21:01   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:21:01  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:21:01  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:21:01  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:21:01  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:01  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:21:01  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
16:21:01  16  );
16:21:01  17  
16:21:01  18  PROCEDURE UPDATE_ADDRESS(
16:21:01  19  /*
16:21:01  20  Throws exceptions:
16:21:01  21  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  22  */
16:21:01  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
16:21:01  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:21:01  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:21:01  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:21:01  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:21:01  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:01  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:21:01  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
16:21:01  31  );
16:21:01  32  
16:21:01  33  PROCEDURE GET_ADDRESS (
16:21:01  34  /*
16:21:01  35  Throws exceptions:
16:21:01  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  37  */
16:21:01  38  	  in_id 		IN ADDRESS.ID%TYPE,
16:21:01  39  	  out_result_set	OUT SYS_REFCURSOR
16:21:01  40  );
16:21:01  41  
16:21:01  42  END PROCS_ADDRESS_V16;
16:21:01  43  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:01 SQL> 
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> -- DDL for package PROCS_ADJUSTMENTS
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
16:21:01   4  	in_invoice_id		  IN NUMBER,
16:21:01   5  	in_adjustment_reason	  IN VARCHAR2,
16:21:01   6  	in_is_credit		  IN NUMBER,
16:21:01   7  	in_charge_id		  IN NUMBER,
16:21:01   8  	in_business_date	  IN DATE,
16:21:01   9  	in_created_by		  IN VARCHAR2,
16:21:01  10  	out_invoice_adjustment_id OUT NUMBER
16:21:01  11  );
16:21:01  12  
16:21:01  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
16:21:01  14  	in_invoice_id		  IN NUMBER,
16:21:01  15  	in_original_charge_id	  IN NUMBER,
16:21:01  16  	in_charge_id		  IN NUMBER,
16:21:01  17  	in_updated_by		  IN VARCHAR2
16:21:01  18  );
16:21:01  19  
16:21:01  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
16:21:01  21  	in_line_item_id 	    IN NUMBER,
16:21:01  22  	in_invoice_adjustment_id    IN NUMBER,
16:21:01  23  	in_amount		    IN NUMBER,
16:21:01  24  	in_tax			    IN NUMBER,
16:21:01  25  	in_discount		    IN NUMBER,
16:21:01  26  	in_created_by		    IN VARCHAR2,
16:21:01  27  	out_line_item_adjustment_id OUT NUMBER
16:21:01  28  );
16:21:01  29  
16:21:01  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
16:21:01  31  	in_tax_id		   IN NUMBER,
16:21:01  32  	in_line_item_adjustment_id IN NUMBER,
16:21:01  33  	in_amount		   IN NUMBER,
16:21:01  34  	in_created_by		   IN VARCHAR2,
16:21:01  35  	out_tax_adjustment_id	   OUT NUMBER
16:21:01  36  );
16:21:01  37  
16:21:01  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
16:21:01  39  	in_discount_id		   NUMBER,
16:21:01  40  	in_line_item_id 	   NUMBER,
16:21:01  41  	in_line_item_adjustment_id IN NUMBER,
16:21:01  42  	in_amount		   IN NUMBER,
16:21:01  43  	in_created_by		   IN VARCHAR2,
16:21:01  44  	out_discount_li_id	   OUT NUMBER
16:21:01  45  );
16:21:01  46  
16:21:01  47  END PROCS_ADJUSTMENTS_V16;
16:21:01  48  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.03
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE GET_SUB_ADX_INFO (
16:21:01   4  /*
16:21:01   5  Throws exceptions:
16:21:01   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01   7  */
16:21:01   8  	out_result_set	    OUT SYS_REFCURSOR,
16:21:01   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
16:21:01  10  );
16:21:01  11  
16:21:01  12  END PROCS_ADX_V16;
16:21:01  13  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE CREATE_AMAZON_SUB(
16:21:01   4  /*
16:21:01   5  Throws exceptions:
16:21:01   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01   7  */
16:21:01   8  	  out_id	      OUT NUMBER,
16:21:01   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
16:21:01  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
16:21:01  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
16:21:01  12  );
16:21:01  13  
16:21:01  14  END PROCS_AMAZON_CRU_V16;
16:21:01  15  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.03
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE CREATE_AMAZON_SUB(
16:21:01   4  /*
16:21:01   5  Throws exceptions:
16:21:01   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01   7  */
16:21:01   8  	  out_id	      OUT NUMBER,
16:21:01   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
16:21:01  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
16:21:01  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
16:21:01  12  );
16:21:01  13  
16:21:01  14  PROCEDURE GET_ACTIVE_SUB_IDS (
16:21:01  15  /*
16:21:01  16  Throws exceptions:
16:21:01  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  18  */
16:21:01  19  	out_result_set	    OUT SYS_REFCURSOR,
16:21:01  20  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
16:21:01  21  );
16:21:01  22  
16:21:01  23  PROCEDURE GET_ACTIVE_GROUP_IDS (
16:21:01  24  /*
16:21:01  25  Throws exceptions:
16:21:01  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  27  */
16:21:01  28  	out_result_set	    OUT SYS_REFCURSOR,
16:21:01  29  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
16:21:01  30  );
16:21:01  31  
16:21:01  32  END PROCS_AMAZON_V16;
16:21:01  33  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.03
16:21:01 SQL> 
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> -- DDL for package PROCS_CHARGE_CRU
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE CREATE_CHARGE(
16:21:01   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
16:21:01   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
16:21:01   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
16:21:01   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
16:21:01   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
16:21:01   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
16:21:01  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
16:21:01  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:21:01  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
16:21:01  13  );
16:21:01  14  
16:21:01  15  PROCEDURE UPDATE_CHARGE(
16:21:01  16  	in_charge_id	      IN CHARGE.ID%TYPE,
16:21:01  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:21:01  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
16:21:01  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
16:21:01  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
16:21:01  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
16:21:01  22  );
16:21:01  23  
16:21:01  24  END PROCS_CHARGE_CRU_V16;
16:21:01  25  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:01 SQL> 
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> -- DDL for package PROCS_CHARGE
16:21:01 SQL> --------------------------------------------------------------------------------
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V16" AS
16:21:01   2  
16:21:01   3  PROCEDURE CREATE_CHARGE(
16:21:01   4  /*
16:21:01   5  Throws exceptions:
16:21:01   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01   8  */
16:21:01   9  	in_invoice_id	      IN NUMBER,
16:21:01  10  	in_transaction_id     IN NUMBER,
16:21:01  11  	in_instrument_type_id IN NUMBER,
16:21:01  12  	in_instrument_id      IN NUMBER,
16:21:01  13  	in_charge_amount      IN NUMBER,
16:21:01  14  	in_created_by	      IN VARCHAR2,
16:21:01  15  	in_charge_status_id   IN NUMBER,
16:21:01  16  	out_charge_id	      OUT NUMBER
16:21:01  17  );
16:21:01  18  
16:21:01  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
16:21:01  20  /*
16:21:01  21  Throws exceptions:
16:21:01  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  23  */
16:21:01  24  	out_result_set	    OUT SYS_REFCURSOR,
16:21:01  25  	in_row_number	    IN NUMBER DEFAULT NULL
16:21:01  26  );
16:21:01  27  
16:21:01  28  PROCEDURE GET_UNPROCESSED_CHARGES (
16:21:01  29  /*
16:21:01  30  Throws exceptions:
16:21:01  31  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01  32  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  33  */
16:21:01  34  	in_invoice_id  IN NUMBER,
16:21:01  35  	out_result_set OUT SYS_REFCURSOR
16:21:01  36  );
16:21:01  37  
16:21:01  38  PROCEDURE GET_PROCESSED_CHARGES (
16:21:01  39  /*
16:21:01  40  Throws exceptions:
16:21:01  41  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01  42  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  43  */
16:21:01  44  	in_invoice_id  IN NUMBER,
16:21:01  45  	out_result_set OUT SYS_REFCURSOR
16:21:01  46  );
16:21:01  47  
16:21:01  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
16:21:01  49  /*
16:21:01  50  Throws exceptions:
16:21:01  51  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  53  */
16:21:01  54  	in_charge_id	    IN NUMBER,
16:21:01  55  	out_subscription_id OUT NUMBER
16:21:01  56  );
16:21:01  57  
16:21:01  58  PROCEDURE UPDATE_CHARGE_STATUS (
16:21:01  59  /*
16:21:01  60  Throws exceptions:
16:21:01  61  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  63  */
16:21:01  64  	in_charge_id	    IN CHARGE.ID%TYPE,
16:21:01  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:21:01  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
16:21:01  67  );
16:21:01  68  
16:21:01  69  FUNCTION IS_CHARGE_COLLECTED (
16:21:01  70  /*
16:21:01  71  Throws:
16:21:01  72  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  74  Returns:
16:21:01  75  GLOBAL_CONST.TRUE if transaction collected,
16:21:01  76  GLOBAL_CONST.FALSE else
16:21:01  77  */
16:21:01  78  	in_charge_id IN NUMBER
16:21:01  79  ) RETURN NUMBER;
16:21:01  80  
16:21:01  81  PROCEDURE GET_COLLECTED_CHARGES (
16:21:01  82  /*
16:21:01  83  Throws exceptions:
16:21:01  84  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:01  85  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:01  86  */
16:21:01  87  	in_invoice_id  IN NUMBER,
16:21:01  88  	out_result_set OUT SYS_REFCURSOR
16:21:01  89  );
16:21:01  90  
16:21:01  91  END PROCS_CHARGE_V16;
16:21:01  92  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.04
16:21:01 SQL> 
16:21:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
16:21:01   2  
16:21:01   3  	PROCEDURE POPULATE_REQUEST_INFO(
16:21:01   4  	  in_hours_prior    IN	NUMBER,
16:21:01   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
16:21:01   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
16:21:01   7  	);
16:21:01   8  
16:21:01   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
16:21:01  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:21:01  11  	  in_start	     IN NUMBER,
16:21:01  12  	  in_end	     IN NUMBER,
16:21:01  13  	  out_result_set     OUT SYS_REFCURSOR
16:21:01  14  	);
16:21:01  15  
16:21:01  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
16:21:01  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
16:21:01  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
16:21:01  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
16:21:01  20  	);
16:21:01  21  
16:21:01  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
16:21:01  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:21:01  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:21:01  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
16:21:01  26  	);
16:21:01  27  
16:21:01  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
16:21:01  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
16:21:01  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
16:21:01  31  	  out_request_files   OUT SYS_REFCURSOR
16:21:01  32  	);
16:21:01  33  
16:21:01  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
16:21:01  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:21:01  36  	  out_count OUT NUMBER
16:21:01  37  	);
16:21:01  38  
16:21:01  39  	PROCEDURE GET_CREDIT_CARD_LICENSE (
16:21:01  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
16:21:01  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
16:21:01  42  	  out_card_license     OUT SYS_REFCURSOR
16:21:01  43  	);
16:21:01  44  
16:21:01  45  	PROCEDURE UPDATE_CC_UPDATE(
16:21:01  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
16:21:01  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:21:01  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
16:21:01  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
16:21:01  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
16:21:01  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:21:01  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
16:21:01  53  	);
16:21:01  54  
16:21:01  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
16:21:01  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
16:21:01  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:21:01  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
16:21:01  59  	);
16:21:01  60  
16:21:01  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
16:21:01  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
16:21:01  63  	  out_request_file     OUT SYS_REFCURSOR
16:21:01  64  	);
16:21:01  65  
16:21:01  66  	PROCEDURE SUSPEND_CREDIT_CARD (
16:21:01  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
16:21:01  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
16:21:01  69  	);
16:21:01  70  
16:21:01  71  	PROCEDURE UPDATE_CREDIT_CARD (
16:21:01  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
16:21:01  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:21:01  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
16:21:01  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
16:21:01  76  	);
16:21:01  77  
16:21:01  78  	PROCEDURE COMPLETABLE_REQUESTS (
16:21:01  79  	  out_request_files OUT SYS_REFCURSOR
16:21:01  80  	);
16:21:01  81  
16:21:01  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
16:21:01  83  	  in_max_hours_before_report IN  NUMBER,
16:21:01  84  	  out_request_files	     OUT SYS_REFCURSOR
16:21:01  85  	);
16:21:01  86  
16:21:01  87  END PROCS_CUPY;
16:21:01  88  .
16:21:01 SQL> /

Package created.

Elapsed: 00:00:00.13
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE
16:21:02   2  PACKAGE PROCS_ENTITLEMENT_V16 AS
16:21:02   3  
16:21:02   4  PROCEDURE GET_ALL_ENTITLEMENTS(
16:21:02   5  	in_group_id IN NUMBER,
16:21:02   6  	out_result_set OUT SYS_REFCURSOR);
16:21:02   7  
16:21:02   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
16:21:02   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:02  10  	out_result_set OUT SYS_REFCURSOR);
16:21:02  11  
16:21:02  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
16:21:02  13  	in_subscription_id IN NUMBER,
16:21:02  14  	out_uri OUT VARCHAR2);
16:21:02  15  
16:21:02  16  END PROCS_ENTITLEMENT_V16;
16:21:02  17  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.01
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE CREATE_CREDIT_CARD(
16:21:02   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
16:21:02   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
16:21:02   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
16:21:02   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
16:21:02   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
16:21:02   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
16:21:02  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
16:21:02  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
16:21:02  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
16:21:02  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
16:21:02  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
16:21:02  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:21:02  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
16:21:02  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
16:21:02  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
16:21:02  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
16:21:02  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
16:21:02  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
16:21:02  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
16:21:02  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
16:21:02  24  );
16:21:02  25  
16:21:02  26  PROCEDURE UPDATE_CREDIT_CARD(
16:21:02  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
16:21:02  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:21:02  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
16:21:02  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:21:02  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
16:21:02  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
16:21:02  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
16:21:02  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:02  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
16:21:02  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
16:21:02  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:21:02  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
16:21:02  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
16:21:02  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
16:21:02  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
16:21:02  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
16:21:02  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
16:21:02  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
16:21:02  45  );
16:21:02  46  
16:21:02  47  PROCEDURE CREATE_PAYPAL(
16:21:02  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
16:21:02  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
16:21:02  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
16:21:02  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:21:02  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
16:21:02  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
16:21:02  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
16:21:02  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
16:21:02  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
16:21:02  57  	in_state			IN PAYPAL.STATE%TYPE,
16:21:02  58  	in_city 			IN PAYPAL.CITY%TYPE,
16:21:02  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
16:21:02  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
16:21:02  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
16:21:02  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
16:21:02  63  );
16:21:02  64  
16:21:02  65  PROCEDURE UPDATE_PAYPAL(
16:21:02  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
16:21:02  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:21:02  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
16:21:02  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
16:21:02  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
16:21:02  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:21:02  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:21:02  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
16:21:02  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
16:21:02  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:02  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
16:21:02  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:21:02  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
16:21:02  79  );
16:21:02  80  
16:21:02  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
16:21:02  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
16:21:02  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
16:21:02  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
16:21:02  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:02  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
16:21:02  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:21:02  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
16:21:02  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
16:21:02  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
16:21:02  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
16:21:02  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
16:21:02  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
16:21:02  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
16:21:02  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
16:21:02  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
16:21:02  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
16:21:02  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
16:21:02  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
16:21:02 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
16:21:02 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
16:21:02 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
16:21:02 103  );
16:21:02 104  
16:21:02 105  PROCEDURE UPDATE_GIFT_CERTIFICATE(
16:21:02 106  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
16:21:02 107  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:21:02 108  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
16:21:02 109  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
16:21:02 110  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
16:21:02 111  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
16:21:02 112  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
16:21:02 113  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
16:21:02 114  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
16:21:02 115  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
16:21:02 116  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
16:21:02 117  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
16:21:02 118  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
16:21:02 119  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
16:21:02 120  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
16:21:02 121  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
16:21:02 122  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
16:21:02 123  );
16:21:02 124  
16:21:02 125  END PROCS_FIN_INSTRUMENTS_CRU_V16;
16:21:02 126  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.04
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
16:21:02   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:02   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
16:21:02   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
16:21:02   7  );
16:21:02   8  
16:21:02   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
16:21:02  10  	in_invoice_id		     IN NUMBER,
16:21:02  11  	out_is_invoice_for_redeem_gc OUT NUMBER
16:21:02  12  );
16:21:02  13  
16:21:02  14  PROCEDURE GET_UNREDEEMED_GCS (
16:21:02  15  	out_result_set		OUT SYS_REFCURSOR,
16:21:02  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:21:02  17  	in_num_rows		IN NUMBER DEFAULT 10000,
16:21:02  18  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:02  19  );
16:21:02  20  
16:21:02  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
16:21:02  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:02  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
16:21:02  24  );
16:21:02  25  
16:21:02  26  PROCEDURE ADD_CREDIT_CARD (
16:21:02  27  /*
16:21:02  28  Throws exceptions:
16:21:02  29  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  31  */
16:21:02  32  	in_group_id		  IN NUMBER,
16:21:02  33  	in_updated_by		  IN VARCHAR2,
16:21:02  34  	in_instrument_name	  IN VARCHAR2,
16:21:02  35  	in_card_holder_name	  IN VARCHAR2,
16:21:02  36  	in_street_address	  IN VARCHAR2,
16:21:02  37  	in_street_address2	  IN VARCHAR2,
16:21:02  38  	in_state		  IN VARCHAR2,
16:21:02  39  	in_city 		  IN VARCHAR2,
16:21:02  40  	in_postal_code		  IN VARCHAR2,
16:21:02  41  	in_country		  IN CHAR,
16:21:02  42  	in_last_four_cc 	  IN VARCHAR2,
16:21:02  43  	in_expiration_date	  IN DATE,
16:21:02  44  	in_credit_card_type_id	  IN NUMBER,
16:21:02  45  	in_token		  IN VARCHAR2,
16:21:02  46  	in_chase_profile_id	  IN VARCHAR2,
16:21:02  47  	in_credit_card_status_id  IN NUMBER,
16:21:02  48  	in_private_first_name	  IN VARCHAR2,
16:21:02  49  	in_private_last_name	  IN VARCHAR2,
16:21:02  50  	out_credit_card_id	  OUT NUMBER
16:21:02  51  );
16:21:02  52  
16:21:02  53  /******************************************************************************/
16:21:02  54  
16:21:02  55  PROCEDURE ADD_PAYPAL (
16:21:02  56  /*
16:21:02  57  Throws exceptions:
16:21:02  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  60  */
16:21:02  61  	in_group_id			IN NUMBER,
16:21:02  62  	in_instrument_name		IN VARCHAR2,
16:21:02  63  	in_private_email_address	IN VARCHAR2,
16:21:02  64  	in_created_by			IN VARCHAR2,
16:21:02  65  	in_paypal_status_id		IN NUMBER,
16:21:02  66  	in_paypal_prvt_street_address	IN VARCHAR2,
16:21:02  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
16:21:02  68  	in_state			IN VARCHAR2,
16:21:02  69  	in_city 			IN VARCHAR2,
16:21:02  70  	in_postal_code			IN VARCHAR2,
16:21:02  71  	in_country			IN CHAR,
16:21:02  72  	in_expiration_date		IN DATE,
16:21:02  73  	in_secret_token 		IN VARCHAR2,
16:21:02  74  	out_paypal_id			OUT NUMBER
16:21:02  75  );
16:21:02  76  
16:21:02  77  /********************************************/
16:21:02  78  
16:21:02  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
16:21:02  80  /*
16:21:02  81  Throws exceptions:
16:21:02  82  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:02  83  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  84  */
16:21:02  85  	in_code       IN VARCHAR,
16:21:02  86  	out_result_set OUT SYS_REFCURSOR
16:21:02  87  );
16:21:02  88  
16:21:02  89  /********************************************/
16:21:02  90  
16:21:02  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
16:21:02  92  /*
16:21:02  93  Throws exceptions:
16:21:02  94  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:02  95  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  96  */
16:21:02  97  	in_gift_certificate_id IN NUMBER,
16:21:02  98  	out_result_set	       OUT SYS_REFCURSOR
16:21:02  99  );
16:21:02 100  
16:21:02 101  /********************************************/
16:21:02 102  
16:21:02 103  PROCEDURE DISABLE_CREDIT_CARD (
16:21:02 104  /*
16:21:02 105  Throws exceptions:
16:21:02 106  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 107  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 108  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02 109  */
16:21:02 110  	in_credit_card_id IN NUMBER,
16:21:02 111  	in_updated_by	  IN VARCHAR2
16:21:02 112  );
16:21:02 113  
16:21:02 114  /********************************************/
16:21:02 115  
16:21:02 116  PROCEDURE DISABLE_PAYPAL (
16:21:02 117  /*
16:21:02 118  Throws exceptions:
16:21:02 119  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 120  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 121  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02 122  */
16:21:02 123  	in_paypal_id  IN NUMBER,
16:21:02 124  	in_updated_by IN VARCHAR2
16:21:02 125  );
16:21:02 126  
16:21:02 127  /********************************************/
16:21:02 128  
16:21:02 129  PROCEDURE UPDATE_CREDIT_CARD (
16:21:02 130  /*
16:21:02 131  Throws exceptions:
16:21:02 132  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 133  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 134  */
16:21:02 135  	in_credit_card_id	  IN NUMBER,
16:21:02 136  	in_updated_by		  IN VARCHAR2,
16:21:02 137  	in_instrument_name	  IN VARCHAR2,
16:21:02 138  	in_is_default		  IN NUMBER
16:21:02 139  );
16:21:02 140  
16:21:02 141  /********************************************/
16:21:02 142  
16:21:02 143  PROCEDURE START_GC_PURCHASING (
16:21:02 144  	in_group_id		  IN NUMBER,
16:21:02 145  	in_offer_chain_id	  IN VARCHAR2,
16:21:02 146  	in_gift_certificate_code  IN  VARCHAR2,
16:21:02 147  	in_created_by		  IN  VARCHAR2,
16:21:02 148  	in_recipient_name	  IN  VARCHAR2,
16:21:02 149  	in_recipient_email	  IN  VARCHAR2,
16:21:02 150  	in_recipient_address_id   IN NUMBER,
16:21:02 151  	in_recipient_notify_date  IN DATE,
16:21:02 152  	in_sender_name		  IN VARCHAR2,
16:21:02 153  	in_sender_email 	  IN VARCHAR2,
16:21:02 154  	in_gift_message 	  IN  VARCHAR2,
16:21:02 155  	in_expiration_date	  IN DATE,
16:21:02 156  	out_gift_certificate_id   OUT NUMBER,
16:21:02 157  	out_invoice_id		  OUT NUMBER
16:21:02 158  );
16:21:02 159  
16:21:02 160  PROCEDURE FINALIZE_GC_PURCHASING (
16:21:02 161  	in_invoice_id	      IN NUMBER,
16:21:02 162  	in_created_by	      IN VARCHAR2,
16:21:02 163  	in_instrument_id      IN NUMBER,
16:21:02 164  	in_instrument_type_id IN NUMBER,
16:21:02 165  	in_order_id	      IN VARCHAR2,
16:21:02 166  	in_transaction_id     IN NUMBER,
16:21:02 167  	out_charge_amount     OUT NUMBER
16:21:02 168  );
16:21:02 169  
16:21:02 170  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
16:21:02 171  	in_group_id	  IN NUMBER,
16:21:02 172  	in_offer_chain_id IN VARCHAR2,
16:21:02 173  	in_gift_certificate_code  IN  VARCHAR2,
16:21:02 174  	in_created_by IN  VARCHAR2,
16:21:02 175  	in_recipient_name IN  VARCHAR2,
16:21:02 176  	in_recipient_email IN  VARCHAR2,
16:21:02 177  	in_sender_name IN VARCHAR2,
16:21:02 178  	in_sender_email IN VARCHAR2,
16:21:02 179  	in_gift_message IN  VARCHAR2,
16:21:02 180  	in_instrument_id  IN  NUMBER,
16:21:02 181  	in_instrument_type_id IN NUMBER,
16:21:02 182  	in_expiration_date IN DATE,
16:21:02 183  	in_order_id IN VARCHAR2,
16:21:02 184  	in_transaction_id IN NUMBER
16:21:02 185  );
16:21:02 186  
16:21:02 187  /*********************************************/
16:21:02 188  
16:21:02 189  PROCEDURE REDEEM_GIFT_CERTIFICATE (
16:21:02 190  	in_group_id			IN NUMBER,
16:21:02 191  	in_gift_certificate_code	IN VARCHAR2,
16:21:02 192  	in_created_by			IN VARCHAR2,
16:21:02 193  	in_redeemer_address_id		IN NUMBER,
16:21:02 194  	in_fin_instrument_id		IN NUMBER,
16:21:02 195  	in_fin_instrument_type_id	IN NUMBER,
16:21:02 196  	in_redemption_offer_chain_id	IN NUMBER,
16:21:02 197  	out_subscription_id		OUT NUMBER,
16:21:02 198  	out_license_id			OUT NUMBER
16:21:02 199  );
16:21:02 200  
16:21:02 201  /********************************************/
16:21:02 202  
16:21:02 203  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
16:21:02 204  	in_group_id	       IN  NUMBER,
16:21:02 205  	out_instrument_type_id OUT NUMBER,
16:21:02 206  	out_instrument_id      OUT NUMBER
16:21:02 207  );
16:21:02 208  
16:21:02 209  /************************************************/
16:21:02 210  
16:21:02 211  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
16:21:02 212  	in_group_id	      IN NUMBER,
16:21:02 213  	in_instrument_type_id IN NUMBER,
16:21:02 214  	in_instrument_id      IN NUMBER,
16:21:02 215  	in_updated_by	      IN VARCHAR2
16:21:02 216  );
16:21:02 217  
16:21:02 218  /***************************************************/
16:21:02 219  
16:21:02 220  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
16:21:02 221  	in_group_id	      IN NUMBER
16:21:02 222  );
16:21:02 223  
16:21:02 224  /****************************************************/
16:21:02 225  
16:21:02 226  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:21:02 227  	in_credit_card_id IN  NUMBER,
16:21:02 228  	out_result_set	  OUT SYS_REFCURSOR
16:21:02 229  );
16:21:02 230  
16:21:02 231  /****************************************************/
16:21:02 232  
16:21:02 233  PROCEDURE GET_PAYPAL_BY_ID (
16:21:02 234  	in_paypal_id   IN  NUMBER,
16:21:02 235  	out_result_set OUT SYS_REFCURSOR
16:21:02 236  );
16:21:02 237  
16:21:02 238  /***********************************************/
16:21:02 239  
16:21:02 240  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
16:21:02 241  	in_credit_card_id NUMBER
16:21:02 242  ) RETURN NUMBER;
16:21:02 243  
16:21:02 244  /*************************************************/
16:21:02 245  
16:21:02 246  PROCEDURE GET_PURCHASED_GCERTIFICATES (
16:21:02 247  	in_group_id    IN NUMBER,
16:21:02 248  	out_result_set OUT SYS_REFCURSOR
16:21:02 249  );
16:21:02 250  
16:21:02 251  /*************************************************/
16:21:02 252  
16:21:02 253  -- isGiftCertificateForProperOffer
16:21:02 254  
16:21:02 255  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
16:21:02 256  	in_gift_certificate_id IN NUMBER,
16:21:02 257  	in_charge_id	       IN NUMBER,
16:21:02 258  	out_result	       OUT NUMBER
16:21:02 259  );
16:21:02 260  
16:21:02 261  FUNCTION IS_CREDIT_CARD_EXISTS (
16:21:02 262  /*
16:21:02 263  1 - if instrument exists
16:21:02 264  0 - else
16:21:02 265  */
16:21:02 266  	in_credit_card_id IN NUMBER
16:21:02 267  ) RETURN NUMBER;
16:21:02 268  
16:21:02 269  FUNCTION IS_PAYPAL_EXISTS (
16:21:02 270  /*
16:21:02 271  1 - if instrument exists
16:21:02 272  0 - else
16:21:02 273  */
16:21:02 274  	in_paypal_id IN NUMBER
16:21:02 275  ) RETURN NUMBER;
16:21:02 276  
16:21:02 277  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
16:21:02 278  /*
16:21:02 279  1 - if instrument exists
16:21:02 280  0 - else
16:21:02 281  */
16:21:02 282  	in_gift_certificate_id IN NUMBER
16:21:02 283  ) RETURN NUMBER;
16:21:02 284  
16:21:02 285  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
16:21:02 286  	in_credit_card_id IN NUMBER,
16:21:02 287  	out_group_id	  OUT NUMBER
16:21:02 288  );
16:21:02 289  
16:21:02 290  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
16:21:02 291  	in_paypal_id IN NUMBER,
16:21:02 292  	out_group_id	  OUT NUMBER
16:21:02 293  );
16:21:02 294  
16:21:02 295  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
16:21:02 296  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
16:21:02 297  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
16:21:02 298  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
16:21:02 299  );
16:21:02 300  
16:21:02 301  PROCEDURE UPDATE_PAYPAL_STATUS (
16:21:02 302  	in_paypal_id	    IN PAYPAL.ID%TYPE,
16:21:02 303  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
16:21:02 304  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
16:21:02 305  );
16:21:02 306  
16:21:02 307  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
16:21:02 308  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
16:21:02 309  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
16:21:02 310  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
16:21:02 311  );
16:21:02 312  
16:21:02 313  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:21:02 314  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:02 315  	out_result_set OUT SYS_REFCURSOR
16:21:02 316  );
16:21:02 317  
16:21:02 318  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
16:21:02 319  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
16:21:02 320  	in_old_fin_instrument_id   IN NUMBER,
16:21:02 321  	in_old_fin_instrument_type IN NUMBER,
16:21:02 322  	in_new_fin_instrument_id   IN NUMBER,
16:21:02 323  	in_new_fin_instrument_type IN NUMBER,
16:21:02 324  	in_updated_by		   IN VARCHAR2
16:21:02 325  );
16:21:02 326  
16:21:02 327  END PROCS_FIN_INSTRUMENTS_V16;
16:21:02 328  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.06
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
16:21:02   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
16:21:02   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
16:21:02   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
16:21:02   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
16:21:02   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
16:21:02   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
16:21:02  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
16:21:02  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:02  12  );
16:21:02  13  
16:21:02  14  PROCEDURE CREATE_GROUP_ACCOUNT (
16:21:02  15  	in_subscription_id	 IN NUMBER,
16:21:02  16  	in_group_name		 IN VARCHAR2,
16:21:02  17  	in_first_name		 IN VARCHAR2,
16:21:02  18  	in_last_name		 IN VARCHAR2,
16:21:02  19  	in_email		 IN VARCHAR2,
16:21:02  20  	in_phone		 IN VARCHAR2,
16:21:02  21  	in_organization_type	 IN VARCHAR2,
16:21:02  22  	in_seats		 IN NUMBER,
16:21:02  23  	in_seat_ttl_in_hours	 IN NUMBER,
16:21:02  24  	in_ip			 IN NUMBER,
16:21:02  25  	in_created_by		 IN VARCHAR2
16:21:02  26  );
16:21:02  27  
16:21:02  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
16:21:02  29  	in_group_account_id    IN NUMBER,
16:21:02  30  	in_borrower_account_id IN NUMBER,
16:21:02  31  	in_ip_address	       IN VARCHAR2,
16:21:02  32  	in_email_domain        IN VARCHAR2,
16:21:02  33  	in_start_date	       IN DATE,
16:21:02  34  	in_end_date	       IN DATE,
16:21:02  35  	in_created_by	       IN VARCHAR2
16:21:02  36  );
16:21:02  37  
16:21:02  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
16:21:02  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:02  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:21:02  41  );
16:21:02  42  
16:21:02  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
16:21:02  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
16:21:02  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:21:02  46  );
16:21:02  47  
16:21:02  48  PROCEDURE ADD_IP_RANGE (
16:21:02  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:02  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
16:21:02  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:21:02  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:21:02  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
16:21:02  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
16:21:02  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
16:21:02  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
16:21:02  57  );
16:21:02  58  
16:21:02  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
16:21:02  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:02  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:02  62  );
16:21:02  63  
16:21:02  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
16:21:02  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:21:02  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:02  67  );
16:21:02  68  
16:21:02  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
16:21:02  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:21:02  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:02  72  );
16:21:02  73  
16:21:02  74  PROCEDURE ADD_EMAIL_DOMAIN (
16:21:02  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:02  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:21:02  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
16:21:02  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
16:21:02  79  );
16:21:02  80  
16:21:02  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
16:21:02  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:21:02  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
16:21:02  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
16:21:02  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
16:21:02  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
16:21:02  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
16:21:02  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:21:02  89  );
16:21:02  90  
16:21:02  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
16:21:02  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:21:02  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
16:21:02  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:21:02  95  );
16:21:02  96  END PROCS_GROUP_ACCOUNT_CRU_V16;
16:21:02  97  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.08
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V16" As
16:21:02   2  
16:21:02   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
16:21:02   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
16:21:02   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
16:21:02   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:02   7  );
16:21:02   8  
16:21:02   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
16:21:02  10  	out_result_set OUT SYS_REFCURSOR
16:21:02  11  );
16:21:02  12  
16:21:02  13  PROCEDURE EXPIRE_SUB_SHARE (
16:21:02  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
16:21:02  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:02  16  );
16:21:02  17  
16:21:02  18  PROCEDURE EXPIRE_ALL_SHARES (
16:21:02  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
16:21:02  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:02  21  );
16:21:02  22  
16:21:02  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
16:21:02  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
16:21:02  25  	in_start	 IN  NUMBER,
16:21:02  26  	in_end		 IN  NUMBER,
16:21:02  27  	in_expired	 IN  NUMBER,
16:21:02  28  	out_result_set	 OUT SYS_REFCURSOR,
16:21:02  29  	out_shares_count OUT NUMBER
16:21:02  30  );
16:21:02  31  
16:21:02  32  PROCEDURE IS_VALID_IP_ADDRESS (
16:21:02  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:02  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:21:02  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:21:02  36  	out_is_valid	    OUT NUMBER
16:21:02  37  );
16:21:02  38  
16:21:02  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
16:21:02  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:02  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:21:02  42  	out_is_valid	    OUT NUMBER
16:21:02  43  );
16:21:02  44  
16:21:02  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
16:21:02  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
16:21:02  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
16:21:02  48  	Out_Result_Set	       Out Sys_Refcursor
16:21:02  49  );
16:21:02  50  
16:21:02  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
16:21:02  52  	in_group_account_id IN NUMBER,
16:21:02  53  	in_start	    IN NUMBER,
16:21:02  54  	in_end		    IN NUMBER,
16:21:02  55  	Out_Result_Set	    OUT Sys_Refcursor
16:21:02  56  );
16:21:02  57  
16:21:02  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
16:21:02  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
16:21:02  60  	Out_Result_Set	   Out Sys_Refcursor
16:21:02  61  );
16:21:02  62  
16:21:02  63  PROCEDURE CREATE_GROUP_ACCOUNT (
16:21:02  64  	in_subscription_id	 IN NUMBER,
16:21:02  65  	in_group_name		 IN VARCHAR2,
16:21:02  66  	in_first_name		 IN VARCHAR2,
16:21:02  67  	in_last_name		 IN VARCHAR2,
16:21:02  68  	in_email		 IN VARCHAR2,
16:21:02  69  	in_phone		 IN VARCHAR2,
16:21:02  70  	in_organization_type	 IN VARCHAR2,
16:21:02  71  	in_seats		 IN NUMBER,
16:21:02  72  	in_seat_ttl_in_hours	 IN NUMBER,
16:21:02  73  	in_ip			 IN NUMBER,
16:21:02  74  	in_created_by		 IN VARCHAR2
16:21:02  75  );
16:21:02  76  
16:21:02  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
16:21:02  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:21:02  79  	out_result_set	    OUT SYS_REFCURSOR
16:21:02  80  );
16:21:02  81  
16:21:02  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
16:21:02  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:21:02  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:21:02  85  	out_result_set	    OUT SYS_REFCURSOR
16:21:02  86  );
16:21:02  87  
16:21:02  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
16:21:02  89  	in_group_account_id   IN NUMBER,
16:21:02  90  	in_start	      IN NUMBER,
16:21:02  91  	in_end		      IN NUMBER,
16:21:02  92  	in_status	      IN NUMBER,
16:21:02  93  	out_record_count      OUT NUMBER,
16:21:02  94  	out_result_set	      OUT SYS_REFCURSOR
16:21:02  95  );
16:21:02  96  
16:21:02  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
16:21:02  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:02  99  	in_start	      IN NUMBER,
16:21:02 100  	in_end		      IN NUMBER,
16:21:02 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
16:21:02 102  	out_record_count      OUT NUMBER,
16:21:02 103  	out_result_set	      OUT SYS_REFCURSOR
16:21:02 104  );
16:21:02 105  
16:21:02 106  PROCEDURE ADD_EMAIL_DOMAIN (
16:21:02 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:02 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:21:02 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
16:21:02 110  );
16:21:02 111  
16:21:02 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
16:21:02 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:02 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:02 115  );
16:21:02 116  
16:21:02 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
16:21:02 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:21:02 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:02 120  );
16:21:02 121  
16:21:02 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
16:21:02 123  	in_group_account_id    IN NUMBER,
16:21:02 124  	in_borrower_account_id IN NUMBER,
16:21:02 125  	in_ip_address	       IN VARCHAR2,
16:21:02 126  	in_email_domain        IN VARCHAR2,
16:21:02 127  	in_created_by	       IN VARCHAR2
16:21:02 128  );
16:21:02 129  
16:21:02 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
16:21:02 131  	in_group_account_id   IN NUMBER,
16:21:02 132  	out_occupied_seats   OUT NUMBER
16:21:02 133  );
16:21:02 134  
16:21:02 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
16:21:02 136  	in_group_account_id   IN NUMBER
16:21:02 137  ) RETURN NUMBER;
16:21:02 138  
16:21:02 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
16:21:02 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:02 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:21:02 142  );
16:21:02 143  
16:21:02 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
16:21:02 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
16:21:02 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:21:02 147  );
16:21:02 148  
16:21:02 149  PROCEDURE ADD_IP_RANGE (
16:21:02 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:02 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
16:21:02 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:21:02 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:21:02 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
16:21:02 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
16:21:02 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
16:21:02 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
16:21:02 158  );
16:21:02 159  
16:21:02 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
16:21:02 161  	in_group_account_id IN NUMBER,
16:21:02 162  	out_group_id OUT NUMBER
16:21:02 163  );
16:21:02 164  
16:21:02 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
16:21:02 166  	in_group_account_ip_range_id IN NUMBER,
16:21:02 167  	out_group_id OUT NUMBER
16:21:02 168  );
16:21:02 169  
16:21:02 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
16:21:02 171  	in_group_account_email_dom_id IN NUMBER,
16:21:02 172  	out_group_id OUT NUMBER
16:21:02 173  );
16:21:02 174  
16:21:02 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
16:21:02 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:21:02 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
16:21:02 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
16:21:02 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
16:21:02 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
16:21:02 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
16:21:02 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:21:02 183  );
16:21:02 184  
16:21:02 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
16:21:02 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:21:02 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
16:21:02 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:21:02 189  );
16:21:02 190  
16:21:02 191  END PROCS_GROUP_ACCOUNT_V16;
16:21:02 192  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.04
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_HISTORY
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE CREATE_ADDRESS_HISTORY(
16:21:02   4  /*
16:21:02   5  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02   7  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02   8  */
16:21:02   9  	in_address_id		     IN NUMBER,
16:21:02  10  	in_system_activity_reason_id IN NUMBER
16:21:02  11  );
16:21:02  12  
16:21:02  13  PROCEDURE CREATE_ACCOUNT_HISTORY(
16:21:02  14  /*
16:21:02  15  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  17  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  18  */
16:21:02  19  	in_account_id		     IN NUMBER,
16:21:02  20  	in_system_activity_reason_id IN NUMBER
16:21:02  21  );
16:21:02  22  
16:21:02  23  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
16:21:02  24  /*
16:21:02  25  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  27  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  28  */
16:21:02  29  	in_subscription_id	     IN NUMBER,
16:21:02  30  	in_system_activity_reason_id IN NUMBER
16:21:02  31  );
16:21:02  32  
16:21:02  33  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
16:21:02  34  /*
16:21:02  35  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  37  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  38  */
16:21:02  39  	in_credit_card_id	      IN NUMBER,
16:21:02  40  	in_system_activity_reason_id  IN  NUMBER
16:21:02  41  );
16:21:02  42  
16:21:02  43  PROCEDURE CREATE_PAYPAL_HISTORY(
16:21:02  44  /*
16:21:02  45  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  46  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  47  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  48  */
16:21:02  49  	in_paypal_id		      IN NUMBER,
16:21:02  50  	in_system_activity_reason_id  IN NUMBER
16:21:02  51  );
16:21:02  52  
16:21:02  53  PROCEDURE CREATE_GIFT_CERT_HISTORY(
16:21:02  54  /*
16:21:02  55  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  56  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  57  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  58  */
16:21:02  59  	in_gift_certificate_id	      IN NUMBER,
16:21:02  60  	in_system_activity_reason_id  IN  NUMBER
16:21:02  61  );
16:21:02  62  
16:21:02  63  PROCEDURE CREATE_TRANSACTION_HISTORY (
16:21:02  64  /*
16:21:02  65  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  67  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  68  */
16:21:02  69  	in_transaction_id	     IN NUMBER,
16:21:02  70  	in_system_activity_reason_id IN NUMBER
16:21:02  71  );
16:21:02  72  
16:21:02  73  PROCEDURE CREATE_INVOICE_HISTORY (
16:21:02  74  /*
16:21:02  75  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  76  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  77  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  78  */
16:21:02  79  	in_invoice_id		     IN NUMBER,
16:21:02  80  	in_system_activity_reason_id IN NUMBER
16:21:02  81  );
16:21:02  82  
16:21:02  83  PROCEDURE CREATE_LICENSE_HISTORY (
16:21:02  84  /*
16:21:02  85  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  87  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  88  */
16:21:02  89  	in_license_id		     IN NUMBER,
16:21:02  90  	in_system_activity_reason_id IN NUMBER
16:21:02  91  );
16:21:02  92  
16:21:02  93  PROCEDURE CREATE_CHARGE_HISTORY (
16:21:02  94  /*
16:21:02  95  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  96  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  97  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02  98  */
16:21:02  99  	in_charge_id		    IN NUMBER,
16:21:02 100  	in_system_activity_reason_id IN NUMBER
16:21:02 101  );
16:21:02 102  
16:21:02 103  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
16:21:02 104  /*
16:21:02 105  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 106  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 107  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02 108  */
16:21:02 109  	in_invoice_adjustment_id     IN NUMBER,
16:21:02 110  	in_system_activity_reason_id IN NUMBER
16:21:02 111  );
16:21:02 112  
16:21:02 113  
16:21:02 114  END PROCS_HISTORY_V16;
16:21:02 115  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.03
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_INVOICE_CRU
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE CREATE_INVOICE (
16:21:02   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
16:21:02   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
16:21:02   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
16:21:02   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
16:21:02   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
16:21:02   9  );
16:21:02  10  
16:21:02  11  PROCEDURE UPDATE_INVOICE (
16:21:02  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
16:21:02  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
16:21:02  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
16:21:02  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
16:21:02  16  );
16:21:02  17  
16:21:02  18  END PROCS_INVOICE_CRU_V16;
16:21:02  19  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.11
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_INVOICE
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE IS_INVOICE_FOR_GC (
16:21:02   4  	in_invoice_id  IN NUMBER,
16:21:02   5  	out_result     OUT NUMBER
16:21:02   6  );
16:21:02   7  
16:21:02   8  PROCEDURE CREATE_INVOICE(
16:21:02   9  /*
16:21:02  10  Throws exceptions:
16:21:02  11  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  12  */
16:21:02  13  	  in_invoice_status IN NUMBER,
16:21:02  14  	  in_created_by     IN VARCHAR2,
16:21:02  15  	  in_tax_exempt_id  IN VARCHAR2,
16:21:02  16  	  out_invoice_id    OUT NUMBER
16:21:02  17  );
16:21:02  18  
16:21:02  19  PROCEDURE GET_PENDING_INVOICES (
16:21:02  20  /*
16:21:02  21  Throws exceptions:
16:21:02  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  23  */
16:21:02  24  	out_result_set1      OUT SYS_REFCURSOR,
16:21:02  25  	out_result_set2      OUT SYS_REFCURSOR,
16:21:02  26  	out_result_set3      OUT SYS_REFCURSOR,
16:21:02  27  	in_row_number	     IN NUMBER DEFAULT NULL
16:21:02  28  );
16:21:02  29  
16:21:02  30  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:21:02  31  /*
16:21:02  32  Throws exceptions:
16:21:02  33  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  34  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  35  */
16:21:02  36  	in_invoice_id IN  NUMBER,
16:21:02  37  	out_amount    OUT NUMBER
16:21:02  38  );
16:21:02  39  
16:21:02  40  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
16:21:02  41  	in_invoice_id IN  NUMBER
16:21:02  42  ) RETURN NUMBER;
16:21:02  43  
16:21:02  44  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
16:21:02  45  /*
16:21:02  46  Throws exceptions:
16:21:02  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  49  */
16:21:02  50  	in_invoice_id  IN  NUMBER,
16:21:02  51  	out_account_id OUT NUMBER
16:21:02  52  );
16:21:02  53  
16:21:02  54  PROCEDURE GET_INVOICE_DETAILS (
16:21:02  55  /*
16:21:02  56  Throws exceptions:
16:21:02  57  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  58  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  59  */
16:21:02  60  	in_invoice_id	   IN  NUMBER,
16:21:02  61  	out_group_id	   OUT NUMBER,
16:21:02  62  	out_status_id	   OUT NUMBER,
16:21:02  63  	out_line_items_set OUT SYS_REFCURSOR,
16:21:02  64  	out_pp_charges_set OUT SYS_REFCURSOR,
16:21:02  65  	out_cc_charges_set OUT SYS_REFCURSOR,
16:21:02  66  	out_gc_charges_set OUT SYS_REFCURSOR
16:21:02  67  );
16:21:02  68  -- norlov: #38796
16:21:02  69  PROCEDURE GET_TRANSACTION_INVOICE (
16:21:02  70  /*
16:21:02  71  Throws exceptions:
16:21:02  72  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  74  */
16:21:02  75  	in_transaction_id  IN  NUMBER,
16:21:02  76  	out_result_set	      OUT SYS_REFCURSOR
16:21:02  77  );
16:21:02  78  
16:21:02  79  PROCEDURE UPDATE_INVOICE_STATUS (
16:21:02  80  /*
16:21:02  81  Throws exceptions:
16:21:02  82  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  83  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  84  */
16:21:02  85  	in_invoice_id		       IN NUMBER,
16:21:02  86  	in_invoice_status_id	       IN NUMBER,
16:21:02  87  	in_updated_by		       IN VARCHAR2
16:21:02  88  );
16:21:02  89  
16:21:02  90  FUNCTION IS_INVOICE_PAYING_STARTED (
16:21:02  91  /*
16:21:02  92  Throws exceptions:
16:21:02  93  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  95  */
16:21:02  96  	in_invoice_id IN NUMBER
16:21:02  97  ) RETURN NUMBER;
16:21:02  98  
16:21:02  99  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
16:21:02 100  	in_invoice_id  IN NUMBER,
16:21:02 101  	out_is_started OUT NUMBER
16:21:02 102  );
16:21:02 103  
16:21:02 104  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
16:21:02 105  	in_invoice_id	      IN NUMBER,
16:21:02 106  	in_chargeback_date    IN DATE,
16:21:02 107  	out_chargeback_amount OUT NUMBER
16:21:02 108  );
16:21:02 109  
16:21:02 110  PROCEDURE APPLY_REFUND (
16:21:02 111  	in_invoice_id	     IN NUMBER,
16:21:02 112  	in_chargeback_amount IN NUMBER,
16:21:02 113  	in_created_by	     IN VARCHAR2,
16:21:02 114  	out_charge_id	     OUT NUMBER
16:21:02 115  );
16:21:02 116  
16:21:02 117  PROCEDURE GET_MAX_REFUND (
16:21:02 118  	in_invoice_id IN NUMBER,
16:21:02 119  	out_amount    OUT NUMBER
16:21:02 120  );
16:21:02 121  
16:21:02 122  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
16:21:02 123  	in_invoice_id	    IN NUMBER,
16:21:02 124  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
16:21:02 125  	out_days_num	    OUT NUMBER
16:21:02 126  );
16:21:02 127  
16:21:02 128  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:21:02 129  	in_invoice_id  IN NUMBER,
16:21:02 130  	out_result_set OUT SYS_REFCURSOR
16:21:02 131  );
16:21:02 132  
16:21:02 133  PROCEDURE GET_INVOICE_LICENSES (
16:21:02 134  	in_invoice_id  IN NUMBER,
16:21:02 135  	out_result_set OUT SYS_REFCURSOR
16:21:02 136  );
16:21:02 137  
16:21:02 138  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
16:21:02 139  	in_invoice_id	   IN NUMBER,
16:21:02 140  	out_offer_chain_id OUT NUMBER
16:21:02 141  );
16:21:02 142  
16:21:02 143  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
16:21:02 144  -- Closing invoice without refund
16:21:02 145  	in_invoice_id IN NUMBER,
16:21:02 146  	in_updated_by IN VARCHAR2
16:21:02 147  );
16:21:02 148  
16:21:02 149  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
16:21:02 150  	in_invoice_id	    IN NUMBER,
16:21:02 151  	out_subscription_id OUT NUMBER
16:21:02 152  );
16:21:02 153  
16:21:02 154  PROCEDURE IS_INVOICE_TAX_EXEMPT (
16:21:02 155  /*
16:21:02 156  Throws exceptions:
16:21:02 157  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:02 158  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 159  Return:
16:21:02 160  	GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
16:21:02 161  	GLOBAL_CONSTANTS_V16.FALSE else
16:21:02 162  */
16:21:02 163  	in_invoice_id	  IN NUMBER,
16:21:02 164  	out_is_tax_exempt OUT NUMBER
16:21:02 165  );
16:21:02 166  
16:21:02 167  PROCEDURE GET_INVOICE_BY_ID (
16:21:02 168  	in_invoice_id  IN NUMBER,
16:21:02 169  	out_result_set OUT SYS_REFCURSOR
16:21:02 170  );
16:21:02 171  
16:21:02 172  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
16:21:02 173  	in_invoice_id		      IN NUMBER,
16:21:02 174  	out_is_tax_calculation_needed OUT NUMBER
16:21:02 175  );
16:21:02 176  
16:21:02 177  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
16:21:02 178  	in_invoice_id		     IN NUMBER,
16:21:02 179  	in_updated_by		     IN VARCHAR2,
16:21:02 180  	in_is_tax_calculation_needed IN NUMBER
16:21:02 181  );
16:21:02 182  
16:21:02 183  PROCEDURE REFUND_INVOICE (
16:21:02 184  	in_invoice_id	   IN NUMBER,
16:21:02 185  	in_refund_amount   IN NUMBER,
16:21:02 186  	in_note 	   IN VARCHAR2,
16:21:02 187  	in_created_by	   IN VARCHAR2,
16:21:02 188  	out_charge_id	   OUT NUMBER
16:21:02 189  );
16:21:02 190  
16:21:02 191  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
16:21:02 192  	in_invoice_id		    IN NUMBER,
16:21:02 193  	out_order_id		    OUT VARCHAR2,
16:21:02 194  	out_external_transaction_id OUT VARCHAR2
16:21:02 195  );
16:21:02 196  
16:21:02 197  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
16:21:02 198  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
16:21:02 199  	out_result_set OUT SYS_REFCURSOR
16:21:02 200  );
16:21:02 201  
16:21:02 202  PROCEDURE IS_REVOKE_ENTITLEMENTS(
16:21:02 203  	in_invoice_id IN NUMBER,
16:21:02 204  	out_is_revoke OUT NUMBER
16:21:02 205  );
16:21:02 206  
16:21:02 207  END PROCS_INVOICE_V16;
16:21:02 208  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.04
16:21:02 SQL> 
16:21:02 SQL> /*
16:21:02 SQL> CREATE TABLE ITUNES_RECEIPT (
16:21:02 SQL> 	id NUMBER NOT NULL ENABLE,
16:21:02 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
16:21:02 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
16:21:02 SQL> 	status NUMBER,
16:21:02 SQL> 	quantity NUMBER,
16:21:02 SQL> 	product_id VARCHAR(1024),
16:21:02 SQL> 	transaction_id VARCHAR(1024),
16:21:02 SQL> 	purchase_date TIMESTAMP,
16:21:02 SQL> 	original_transaction_id VARCHAR(1024),
16:21:02 SQL> 	original_purchase_date TIMESTAMP,
16:21:02 SQL> 	app_item_id VARCHAR(1024),
16:21:02 SQL> 	version_external_id NUMBER,
16:21:02 SQL> 	bid VARCHAR(1024),
16:21:02 SQL> 	bvrs VARCHAR(255),
16:21:02 SQL> 	expires_date TIMESTAMP,
16:21:02 SQL> 	create_date DATE NOT NULL,
16:21:02 SQL> 	created_by VARCHAR(255) NOT NULL,
16:21:02 SQL> 	update_date DATE NOT NULL,
16:21:02 SQL> 	updated_by VARCHAR(255) NOT NULL,
16:21:02 SQL> 	last_check_date DATE NOT NULL,
16:21:02 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:21:02 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:21:02 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:21:02 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
16:21:02 SQL> )
16:21:02 SQL> TABLESPACE CORE;
16:21:02 SQL> */
16:21:02 SQL> 
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE CREATE_RECEIPT(
16:21:02   4  /*
16:21:02   5  Throws exceptions:
16:21:02   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02   7  */
16:21:02   8  	  out_id	      OUT NUMBER,
16:21:02   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:21:02  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
16:21:02  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
16:21:02  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
16:21:02  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:02  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:21:02  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:21:02  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:02  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:21:02  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:21:02  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:21:02  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
16:21:02  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
16:21:02  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:21:02  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
16:21:02  24  );
16:21:02  25  
16:21:02  26  PROCEDURE UPDATE_RECEIPT(
16:21:02  27  /*
16:21:02  28  Throws exceptions:
16:21:02  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  30  */
16:21:02  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
16:21:02  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
16:21:02  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
16:21:02  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
16:21:02  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:02  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:21:02  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:21:02  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:02  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:21:02  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:21:02  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:21:02  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
16:21:02  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
16:21:02  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:21:02  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
16:21:02  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
16:21:02  47  );
16:21:02  48  
16:21:02  49  PROCEDURE LINK_ITUNES_RECEIPT(
16:21:02  50  /*
16:21:02  51  Throws exceptions:
16:21:02  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  53  */
16:21:02  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
16:21:02  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:21:02  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
16:21:02  57  );
16:21:02  58  
16:21:02  59  PROCEDURE MARK_RECEIPT_CHECKED(
16:21:02  60  /*
16:21:02  61  Throws exceptions:
16:21:02  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  63  */
16:21:02  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
16:21:02  65  );
16:21:02  66  
16:21:02  67  END PROCS_ITUNES_RECEIPT_CRU_V16;
16:21:02  68  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:02 SQL> 
16:21:02 SQL> /*
16:21:02 SQL> CREATE TABLE ITUNES_RECEIPT (
16:21:02 SQL> 	id NUMBER NOT NULL ENABLE,
16:21:02 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
16:21:02 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
16:21:02 SQL> 	status NUMBER,
16:21:02 SQL> 	quantity NUMBER,
16:21:02 SQL> 	product_id VARCHAR(1024),
16:21:02 SQL> 	transaction_id VARCHAR(1024),
16:21:02 SQL> 	purchase_date TIMESTAMP,
16:21:02 SQL> 	original_transaction_id VARCHAR(1024),
16:21:02 SQL> 	original_purchase_date TIMESTAMP,
16:21:02 SQL> 	app_item_id VARCHAR(1024),
16:21:02 SQL> 	version_external_id NUMBER,
16:21:02 SQL> 	bid VARCHAR(1024),
16:21:02 SQL> 	bvrs VARCHAR(255),
16:21:02 SQL> 	expires_date TIMESTAMP,
16:21:02 SQL> 	create_date DATE NOT NULL,
16:21:02 SQL> 	created_by VARCHAR(255) NOT NULL,
16:21:02 SQL> 	update_date DATE NOT NULL,
16:21:02 SQL> 	updated_by VARCHAR(255) NOT NULL,
16:21:02 SQL> 	last_check_date DATE NOT NULL,
16:21:02 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:21:02 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:21:02 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:21:02 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
16:21:02 SQL> )
16:21:02 SQL> TABLESPACE CORE;
16:21:02 SQL> */
16:21:02 SQL> 
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
16:21:02   4  	      /*
16:21:02   5  	      Throws exceptions:
16:21:02   6  	      APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02   7  	      */
16:21:02   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:02   9  	      out_result_set	  OUT SYS_REFCURSOR
16:21:02  10  );
16:21:02  11  
16:21:02  12  PROCEDURE CREATE_RECEIPT(
16:21:02  13  /*
16:21:02  14  Throws exceptions:
16:21:02  15  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  16  */
16:21:02  17  	  out_id	      OUT NUMBER,
16:21:02  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:21:02  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
16:21:02  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
16:21:02  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
16:21:02  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:02  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:21:02  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:21:02  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:02  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:21:02  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:21:02  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:21:02  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
16:21:02  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
16:21:02  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:21:02  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
16:21:02  33  );
16:21:02  34  
16:21:02  35  PROCEDURE UPDATE_RECEIPT(
16:21:02  36  /*
16:21:02  37  Throws exceptions:
16:21:02  38  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  39  */
16:21:02  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
16:21:02  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
16:21:02  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
16:21:02  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
16:21:02  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:02  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:21:02  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:21:02  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:02  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:21:02  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:21:02  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:21:02  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
16:21:02  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
16:21:02  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:21:02  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
16:21:02  55  	  in_is_expired       IN NUMBER
16:21:02  56  );
16:21:02  57  
16:21:02  58  PROCEDURE LINK_ITUNES_RECEIPT(
16:21:02  59  /*
16:21:02  60  Throws exceptions:
16:21:02  61  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  62  */
16:21:02  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
16:21:02  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:21:02  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
16:21:02  66  );
16:21:02  67  
16:21:02  68  PROCEDURE MARK_RECEIPT_CHECKED(
16:21:02  69  /*
16:21:02  70  Throws exceptions:
16:21:02  71  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  72  */
16:21:02  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
16:21:02  74  );
16:21:02  75  
16:21:02  76  PROCEDURE GET_ITUNES_RECEIPTS (
16:21:02  77  /*
16:21:02  78  Throws exceptions:
16:21:02  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  80  */
16:21:02  81  	out_result_set	    OUT SYS_REFCURSOR,
16:21:02  82  	in_row_number	    IN NUMBER DEFAULT 500
16:21:02  83  );
16:21:02  84  
16:21:02  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
16:21:02  86  /*
16:21:02  87  Throws exceptions:
16:21:02  88  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  89  */
16:21:02  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
16:21:02  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
16:21:02  92  );
16:21:02  93  
16:21:02  94  END PROCS_ITUNES_RECEIPT_V16;
16:21:02  95  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.04
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_LICENSE_CRU
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE CREATE_LICENSE(
16:21:02   4  	out_license_id		    OUT LICENSE.ID%TYPE,
16:21:02   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
16:21:02   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
16:21:02   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
16:21:02   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
16:21:02   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
16:21:02  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
16:21:02  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
16:21:02  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
16:21:02  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
16:21:02  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
16:21:02  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
16:21:02  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
16:21:02  17  );
16:21:02  18  
16:21:02  19  PROCEDURE UPDATE_LICENSE (
16:21:02  20  	in_license_id		    IN LICENSE.ID%TYPE,
16:21:02  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
16:21:02  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
16:21:02  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
16:21:02  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
16:21:02  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
16:21:02  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
16:21:02  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
16:21:02  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
16:21:02  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
16:21:02  30  );
16:21:02  31  
16:21:02  32  END PROCS_LICENSE_CRU_V16;
16:21:02  33  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_LICENSE
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE CREATE_LICENSE(
16:21:02   4  /*
16:21:02   5  Throws exceptions:
16:21:02   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02   8  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:02   9  */
16:21:02  10  	in_status_id		    IN NUMBER,
16:21:02  11  	in_needs_entitlements	    IN NUMBER,
16:21:02  12  	in_start_date		    IN DATE,
16:21:02  13  	in_end_date		    IN DATE,
16:21:02  14  	in_offer_id		    IN NUMBER,
16:21:02  15  	in_subscription_id	    IN NUMBER,
16:21:02  16  	in_invoice_id		    IN NUMBER,
16:21:02  17  	in_created_by		    IN VARCHAR2,
16:21:02  18  	in_is_extension 	    IN NUMBER,
16:21:02  19  	in_current_offer_index	    IN NUMBER,
16:21:02  20  	in_current_offer_recurr_num IN NUMBER,
16:21:02  21  	out_license_id		    OUT NUMBER
16:21:02  22  );
16:21:02  23  
16:21:02  24  /*********************************************/
16:21:02  25  
16:21:02  26  PROCEDURE UPDATE_LICENSE_STATUS(
16:21:02  27  /*
16:21:02  28  Throws exceptions:
16:21:02  29  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  31  */
16:21:02  32  	  in_license_id     IN NUMBER,
16:21:02  33  	  in_license_status IN NUMBER,
16:21:02  34  	  in_updated_by     IN VARCHAR2,
16:21:02  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:02  36  );
16:21:02  37  
16:21:02  38  /*********************************************/
16:21:02  39  
16:21:02  40  PROCEDURE GET_ENDING_LICENSES (
16:21:02  41  	in_hours_number IN NUMBER,
16:21:02  42  	out_result_set OUT SYS_REFCURSOR
16:21:02  43  );
16:21:02  44  
16:21:02  45  /*********************************************/
16:21:02  46  
16:21:02  47  PROCEDURE GET_ENDING_LICENSES_CC (
16:21:02  48  	in_hours_number IN NUMBER,
16:21:02  49  	out_result_set OUT SYS_REFCURSOR,
16:21:02  50  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:02  51  );
16:21:02  52  
16:21:02  53  /**********************************************/
16:21:02  54  
16:21:02  55  PROCEDURE GET_RECURRING_OFFER (
16:21:02  56  	in_license_id  IN NUMBER,
16:21:02  57  	out_result_set OUT SYS_REFCURSOR
16:21:02  58  );
16:21:02  59  
16:21:02  60  /**********************************************/
16:21:02  61  
16:21:02  62  PROCEDURE GET_NEXT_OFFER (
16:21:02  63  	in_license_id  IN NUMBER,
16:21:02  64  	out_result_set OUT SYS_REFCURSOR
16:21:02  65  );
16:21:02  66  
16:21:02  67  /**********************************************/
16:21:02  68  
16:21:02  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
16:21:02  70  	in_license_id IN NUMBER,
16:21:02  71  	out_group_id  OUT NUMBER
16:21:02  72  );
16:21:02  73  
16:21:02  74  /**************************************************/
16:21:02  75  
16:21:02  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
16:21:02  77  	out_result_set OUT SYS_REFCURSOR
16:21:02  78  );
16:21:02  79  
16:21:02  80  /**************************************************/
16:21:02  81  
16:21:02  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
16:21:02  83  	in_license_id	      IN NUMBER,
16:21:02  84  	in_needs_entitlements IN NUMBER,
16:21:02  85  	in_updated_by	      IN VARCHAR2
16:21:02  86  );
16:21:02  87  
16:21:02  88  PROCEDURE GET_ENDED_GC_LICENSES (
16:21:02  89  	out_result_set		OUT SYS_REFCURSOR,
16:21:02  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:21:02  91  	in_num_rows		IN NUMBER DEFAULT 10000,
16:21:02  92  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:02  93  );
16:21:02  94  
16:21:02  95  PROCEDURE GET_LICENSE_BY_ID (
16:21:02  96  
16:21:02  97  	in_license_id  IN NUMBER,
16:21:02  98  
16:21:02  99  	out_result_set OUT SYS_REFCURSOR
16:21:02 100  
16:21:02 101  );
16:21:02 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
16:21:02 103  	in_subscription_id IN NUMBER,
16:21:02 104  	in_end_date IN DATE,
16:21:02 105  	in_updated_by IN VARCHAR2
16:21:02 106  );
16:21:02 107  END PROCS_LICENSE_V16;
16:21:02 108  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.03
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE CREATE_LINE_ITEM (
16:21:02   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
16:21:02   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
16:21:02   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
16:21:02   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
16:21:02   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
16:21:02   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
16:21:02  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
16:21:02  11  );
16:21:02  12  
16:21:02  13  PROCEDURE UPDATE_LINE_ITEM (
16:21:02  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
16:21:02  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
16:21:02  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
16:21:02  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
16:21:02  18  );
16:21:02  19  
16:21:02  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
16:21:02  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
16:21:02  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
16:21:02  23  );
16:21:02  24  
16:21:02  25  END PROCS_LINE_ITEMS_CRU_V16;
16:21:02  26  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.04
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_LINE_ITEMS
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE ADD_LINE_ITEMS(
16:21:02   4  /*
16:21:02   5  Throws exceptions:
16:21:02   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02   8  */
16:21:02   9  	in_invoice_id IN NUMBER,
16:21:02  10  	in_offer_id   IN NUMBER,
16:21:02  11  	in_created_by IN VARCHAR2
16:21:02  12  );
16:21:02  13  
16:21:02  14  /****************************************************/
16:21:02  15  
16:21:02  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
16:21:02  17  	in_line_item_id    IN NUMBER,
16:21:02  18  	in_amount	   IN NUMBER,
16:21:02  19  	in_discount_amount IN NUMBER,
16:21:02  20  	in_taxes_amount    IN NUMBER
16:21:02  21  );
16:21:02  22  
16:21:02  23  /****************************************************/
16:21:02  24  
16:21:02  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:21:02  26  /*
16:21:02  27  Throws exceptions:
16:21:02  28  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  30  */
16:21:02  31  	in_invoice_id  IN NUMBER,
16:21:02  32  	out_result_set OUT SYS_REFCURSOR
16:21:02  33  );
16:21:02  34  
16:21:02  35  /****************************************************/
16:21:02  36  
16:21:02  37  PROCEDURE GET_LINE_ITEM_TAXES (
16:21:02  38  /*
16:21:02  39  Throws exceptions:
16:21:02  40  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  41  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  42  */
16:21:02  43  	in_line_item_id IN  NUMBER,
16:21:02  44  	out_result_set	OUT SYS_REFCURSOR
16:21:02  45  );
16:21:02  46  /****************************************************/
16:21:02  47  
16:21:02  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
16:21:02  49  /*
16:21:02  50  Throws exceptions:
16:21:02  51  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  53  */
16:21:02  54  	in_line_item_id IN  NUMBER,
16:21:02  55  	out_result_set	OUT SYS_REFCURSOR
16:21:02  56  );
16:21:02  57  
16:21:02  58  /****************************************************/
16:21:02  59  
16:21:02  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
16:21:02  61  /*
16:21:02  62  Throws exceptions:
16:21:02  63  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  64  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  65  */
16:21:02  66  	in_line_item_id     IN	NUMBER,
16:21:02  67  	out_amount	    OUT NUMBER
16:21:02  68  );
16:21:02  69  
16:21:02  70  /****************************************************/
16:21:02  71  
16:21:02  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
16:21:02  73  /*
16:21:02  74  Throws exceptions:
16:21:02  75  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  76  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  77  */
16:21:02  78  	in_line_item_id     IN	NUMBER
16:21:02  79  ) RETURN NUMBER;
16:21:02  80  
16:21:02  81  END PROCS_LINE_ITEMS_V16;
16:21:02  82  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_LOCKING
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V16" AS
16:21:02   2  
16:21:02   3  /*
16:21:02   4  Removed by Sergey
16:21:02   5  10.12.2010
16:21:02   6  PROCEDURE INITIALIZE_SYSTEM;
16:21:02   7  
16:21:02   8  PROCEDURE INITIALIZE_ACCOUNT (
16:21:02   9  	in_account_id IN NUMBER
16:21:02  10  );
16:21:02  11  
16:21:02  12  PROCEDURE INITIALIZE_GROUP (
16:21:02  13  	in_group_id IN NUMBER
16:21:02  14  );
16:21:02  15  */
16:21:02  16  
16:21:02  17  PROCEDURE LOCK_ACCOUNT (
16:21:02  18  	in_group_id    IN NUMBER,
16:21:02  19  	in_lock_key    IN VARCHAR2,
16:21:02  20  	in_seconds_num IN NUMBER,
16:21:02  21  	in_created_by  IN VARCHAR2,
16:21:02  22  	in_reason      IN VARCHAR2
16:21:02  23  );
16:21:02  24  
16:21:02  25  PROCEDURE RELEASE_LOCK (
16:21:02  26  	in_group_id IN NUMBER,
16:21:02  27  	in_lock_key IN VARCHAR2
16:21:02  28  );
16:21:02  29  
16:21:02  30  END PROCS_LOCKING_V16;
16:21:02  31  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_OFFER_CHAIN
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:21:02   4  /*
16:21:02   5  Throws exceptions:
16:21:02   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02   8  */
16:21:02   9  	  in_offer_chain_id IN	 NUMBER,
16:21:02  10  	  out_result_set    OUT  SYS_REFCURSOR
16:21:02  11  );
16:21:02  12  
16:21:02  13  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
16:21:02  14  /*
16:21:02  15  Throws exceptions:
16:21:02  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:02  17  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:02  18  */
16:21:02  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:21:02  20  	out_result_set	   OUT SYS_REFCURSOR
16:21:02  21  );
16:21:02  22  
16:21:02  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
16:21:02  24  /*
16:21:02  25  Throws exceptions:
16:21:02  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:02  27  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:02  28  */
16:21:02  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:21:02  30  	out_result_set	   OUT SYS_REFCURSOR
16:21:02  31  );
16:21:02  32  
16:21:02  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
16:21:02  34  /*
16:21:02  35  Throws exceptions:
16:21:02  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:02  37  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:02  38  */
16:21:02  39  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:21:02  40  	out_result_set	   OUT SYS_REFCURSOR
16:21:02  41  );
16:21:02  42  
16:21:02  43  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
16:21:02  44  /*
16:21:02  45  Throws exceptions (codes):
16:21:02  46  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  47  */
16:21:02  48  	in_product_id  IN  NUMBER,
16:21:02  49  	out_result_set OUT SYS_REFCURSOR
16:21:02  50  );
16:21:02  51  
16:21:02  52  PROCEDURE GET_OFFER_CHAIN_PRICE (
16:21:02  53  /*
16:21:02  54  Throws exceptions (codes):
16:21:02  55  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  56  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  57  */
16:21:02  58  	in_offer_chain_id IN NUMBER,
16:21:02  59  	out_price	  OUT NUMBER
16:21:02  60  );
16:21:02  61  
16:21:02  62  PROCEDURE GET_FIRST_OFFER(
16:21:02  63  /*
16:21:02  64  Throws exceptions (codes):
16:21:02  65  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  67  */
16:21:02  68  	in_offer_chain_id IN  NUMBER,
16:21:02  69  	out_offer_id	  OUT NUMBER
16:21:02  70  );
16:21:02  71  
16:21:02  72  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
16:21:02  73  /*
16:21:02  74  Throws exceptions (codes):
16:21:02  75  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  76  */
16:21:02  77  	out_result_set OUT SYS_REFCURSOR
16:21:02  78  );
16:21:02  79  
16:21:02  80  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
16:21:02  81  /*
16:21:02  82  Throws exceptions (codes):
16:21:02  83  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  85  */
16:21:02  86  	in_offer_chain_id IN NUMBER,
16:21:02  87  	out_result_set	  OUT SYS_REFCURSOR
16:21:02  88  );
16:21:02  89  
16:21:02  90  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
16:21:02  91  /*
16:21:02  92  Throws exceptions (codes):
16:21:02  93  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  95  */
16:21:02  96  	in_offer_chain_id	  IN NUMBER,
16:21:02  97  	in_offer_chain_start_date IN DATE
16:21:02  98  ) RETURN DATE;
16:21:02  99  
16:21:02 100  FUNCTION CALCULATE_OFFER_AMOUNT (
16:21:02 101  	in_offer_id IN NUMBER
16:21:02 102  ) RETURN NUMBER;
16:21:02 103  
16:21:02 104  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
16:21:02 105  	in_offer_chain_id IN NUMBER
16:21:02 106  ) RETURN NUMBER;
16:21:02 107  
16:21:02 108  FUNCTION GET_FIRST_OFFER_INDEX (
16:21:02 109  	in_offer_chain_id IN NUMBER
16:21:02 110  ) RETURN NUMBER;
16:21:02 111  
16:21:02 112  FUNCTION GET_NEXT_OFFER_INDEX (
16:21:02 113  /*
16:21:02 114  NULL, if not exists
16:21:02 115  */
16:21:02 116  	in_offer_chain_id	     IN NUMBER,
16:21:02 117  	in_offer_chain_current_index IN NUMBER
16:21:02 118  ) RETURN NUMBER;
16:21:02 119  
16:21:02 120  PROCEDURE P_GET_NEXT_OFFER_INDEX (
16:21:02 121  	in_offer_chain_id	     IN NUMBER,
16:21:02 122  	in_offer_chain_current_index IN NUMBER,
16:21:02 123  	out_next_offer_index	     OUT NUMBER
16:21:02 124  );
16:21:02 125  
16:21:02 126  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
16:21:02 127  	in_license_id		     IN NUMBER,
16:21:02 128  	in_offer_chain_current_index IN NUMBER,
16:21:02 129  	out_next_offer_index	     OUT NUMBER
16:21:02 130  );
16:21:02 131  
16:21:02 132  FUNCTION IS_OFFER_INDEX_EXISTS (
16:21:02 133  /*
16:21:02 134  1 - exists
16:21:02 135  0 - not exists
16:21:02 136  */
16:21:02 137  	in_offer_chain_id	   IN NUMBER,
16:21:02 138  	in_offer_chain_offer_index IN NUMBER
16:21:02 139  ) RETURN NUMBER;
16:21:02 140  
16:21:02 141  PROCEDURE GET_OFFER_LENGTH (
16:21:02 142  	in_offer_id IN NUMBER,
16:21:02 143  	out_years   OUT NUMBER,
16:21:02 144  	out_months  OUT NUMBER,
16:21:02 145  	out_days    OUT NUMBER
16:21:02 146  );
16:21:02 147  
16:21:02 148  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
16:21:02 149  	in_offer_id   IN NUMBER,
16:21:02 150  	in_start_date IN DATE DEFAULT SYSDATE,
16:21:02 151  	out_days      OUT NUMBER
16:21:02 152  );
16:21:02 153  
16:21:02 154  PROCEDURE GET_OFFER_PRODUCTS (
16:21:02 155  /*
16:21:02 156  Throws exceptions (codes):
16:21:02 157  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 158  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 159  */
16:21:02 160  	in_offer_id    IN NUMBER,
16:21:02 161  	out_result_set OUT SYS_REFCURSOR
16:21:02 162  );
16:21:02 163  
16:21:02 164  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
16:21:02 165  /*
16:21:02 166  Throws exceptions (codes):
16:21:02 167  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 168  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 169  */
16:21:02 170  	in_offer_chain_id IN NUMBER,
16:21:02 171  	out_result_set	  OUT SYS_REFCURSOR
16:21:02 172  );
16:21:02 173  
16:21:02 174  FUNCTION CHECK_FOR_SAME_PRODUCTS (
16:21:02 175  /*
16:21:02 176  Throws exceptions (codes):
16:21:02 177  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 178  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 179  Returns:
16:21:02 180  GLOBAL_CONSTANTS_V16.TRUE if there are at least one same product
16:21:02 181  GLOBAL_CONSTANTS_V16.FALSE else
16:21:02 182  */
16:21:02 183  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
16:21:02 184  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
16:21:02 185  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:02 186  ) RETURN NUMBER;
16:21:02 187  
16:21:02 188  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
16:21:02 189  /*
16:21:02 190  Throws exceptions (codes):
16:21:02 191  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 192  Returns:
16:21:02 193  GLOBAL_CONSTANTS_V16.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
16:21:02 194  GLOBAL_CONSTANTS_V16.FALSE else
16:21:02 195  */
16:21:02 196  	in_offer_chain_id IN NUMBER
16:21:02 197  ) RETURN NUMBER;
16:21:02 198  
16:21:02 199  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
16:21:02 200  /*
16:21:02 201  Throws exceptions (codes):
16:21:02 202  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 203  */
16:21:02 204  	in_offer_chain_id IN NUMBER
16:21:02 205  ) RETURN NUMBER;
16:21:02 206  
16:21:02 207  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
16:21:02 208  /*
16:21:02 209  Throws exceptions (codes):
16:21:02 210  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 211  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 212  */
16:21:02 213  	in_offer_chain_id   IN NUMBER,
16:21:02 214  	in_eligibility_name IN VARCHAR2,
16:21:02 215  	out_result_set	    OUT SYS_REFCURSOR
16:21:02 216  );
16:21:02 217  
16:21:02 218  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
16:21:02 219  /*
16:21:02 220  Throws exceptions (codes):
16:21:02 221  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 222  */
16:21:02 223  	in_offer_chain_ids  IN VARCHAR2,
16:21:02 224  	in_eligibility_name IN VARCHAR2,
16:21:02 225  	out_result_set	    OUT SYS_REFCURSOR
16:21:02 226  );
16:21:02 227  
16:21:02 228  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:21:02 229  /*
16:21:02 230  Throws exceptions (codes):
16:21:02 231  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 232  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 233  */
16:21:02 234  	in_offer_chain_id IN NUMBER,
16:21:02 235  	in_meta_data_name IN VARCHAR2,
16:21:02 236  	out_result_set	  OUT SYS_REFCURSOR
16:21:02 237  );
16:21:02 238  
16:21:02 239  PROCEDURE GET_OFFER_CHAINS_META_DATA (
16:21:02 240  /*
16:21:02 241  Throws exceptions (codes):
16:21:02 242  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 243  */
16:21:02 244  	in_offer_chain_ids IN VARCHAR2,
16:21:02 245  	in_meta_data_name  IN VARCHAR2,
16:21:02 246  	out_result_set	   OUT SYS_REFCURSOR
16:21:02 247  );
16:21:02 248  
16:21:02 249  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
16:21:02 250  /*
16:21:02 251  Throws exceptions (codes):
16:21:02 252  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 253  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 254  */
16:21:02 255  	in_offer_id    IN NUMBER,
16:21:02 256  	out_result_set OUT SYS_REFCURSOR
16:21:02 257  );
16:21:02 258  
16:21:02 259  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:21:02 260  /*
16:21:02 261  Throws exceptions (codes):
16:21:02 262  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02 263  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 264  */
16:21:02 265  	in_product_offering_id IN NUMBER,
16:21:02 266  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:21:02 267  	out_result_set	       OUT SYS_REFCURSOR
16:21:02 268  );
16:21:02 269  
16:21:02 270  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
16:21:02 271  /*
16:21:02 272  Throws exceptions (codes):
16:21:02 273  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02 274  */
16:21:02 275  	in_offer_chain_1 IN NUMBER,
16:21:02 276  	in_offer_chain_2 IN NUMBER,
16:21:02 277  	out_result_set	OUT SYS_REFCURSOR
16:21:02 278  );
16:21:02 279  
16:21:02 280  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
16:21:02 281  	in_offer_chain_id IN NUMBER,
16:21:02 282  	in_meta_data_name IN VARCHAR2,
16:21:02 283  	out_value	  OUT VARCHAR2
16:21:02 284  );
16:21:02 285  
16:21:02 286  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
16:21:02 287  	in_offer_chain_id   IN NUMBER,
16:21:02 288  	in_eligibility_name IN VARCHAR2,
16:21:02 289  	out_value	    OUT VARCHAR2
16:21:02 290  );
16:21:02 291  
16:21:02 292  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
16:21:02 293  	in_offer_id    IN NUMBER,
16:21:02 294  	out_result_set OUT SYS_REFCURSOR
16:21:02 295  );
16:21:02 296  
16:21:02 297  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
16:21:02 298  	in_meta_data_name  IN VARCHAR2,
16:21:02 299  	in_meta_data_value IN VARCHAR2,
16:21:02 300  	out_result_set	   OUT SYS_REFCURSOR
16:21:02 301  );
16:21:02 302  
16:21:02 303  PROCEDURE GET_ALL_META_DATA (
16:21:02 304  	in_offer_chain_id IN NUMBER,
16:21:02 305  	out_result_set	  OUT SYS_REFCURSOR
16:21:02 306  );
16:21:02 307  
16:21:02 308  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
16:21:02 309  	in_group_id	  IN NUMBER,
16:21:02 310  	in_offer_chain_id IN NUMBER,
16:21:02 311  	out_is_eligible   OUT NUMBER,
16:21:02 312  	out_concurrent_subscription_id OUT NUMBER
16:21:02 313  );
16:21:02 314  
16:21:02 315  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:21:02 316  	in_offer_chain_id	 IN NUMBER,
16:21:02 317  	in_action_name		 IN VARCHAR2,
16:21:02 318  	out_notification_type_id OUT NUMBER
16:21:02 319  );
16:21:02 320  
16:21:02 321  END PROCS_OFFER_CHAIN_V16;
16:21:02 322  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.05
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
16:21:02   2  AS
16:21:02   3  
16:21:02   4  ----
16:21:02   5  --------------------------------------------------------------------------------
16:21:02   6  ----
16:21:02   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
16:21:02   8  	      returned from the previous call and store the result for the
16:21:02   9  	      next call.
16:21:02  10  	     This method will identify and create new Sync Events from trigger activity data */
16:21:02  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
16:21:02  12  ----
16:21:02  13  --------------------------------------------------------------------------------
16:21:02  14  ----
16:21:02  15  	  /* Internal logic call may need to be used to fix poller data */
16:21:02  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
16:21:02  17  ----
16:21:02  18  --------------------------------------------------------------------------------
16:21:02  19  ----
16:21:02  20  	  /* User request for sync events. Params should be hard-coded in the application
16:21:02  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
16:21:02  22  	      skipped. Last read time is logged.
16:21:02  23  	     Params:
16:21:02  24  		  set_maximum: Size of each transfer set
16:21:02  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
16:21:02  26  	     Returns:
16:21:02  27  		  set_id: Transfer set id, duplicated for all entries
16:21:02  28  		  group_id: regi_id value
16:21:02  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
16:21:02  30  	  */
16:21:02  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
16:21:02  32  ----
16:21:02  33  --------------------------------------------------------------------------------
16:21:02  34  ----
16:21:02  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
16:21:02  36  	      single confirmation per transfer set.
16:21:02  37  	  */
16:21:02  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
16:21:02  39  ----
16:21:02  40  --------------------------------------------------------------------------------
16:21:02  41  ----
16:21:02  42  	  procedure SET_LAST_RUN(ts in timestamp);
16:21:02  43  	  procedure GET_LAST_RUN(ts out timestamp);
16:21:02  44  END PROCS_POLLING_SYNC;
16:21:02  45  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.06
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_PRODUCT
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE GET_PRODUCTS (
16:21:02   4  /*
16:21:02   5  Throws exceptions:
16:21:02   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02   7  */
16:21:02   8  	in_status_id   IN  NUMBER,
16:21:02   9  	out_result_set OUT SYS_REFCURSOR
16:21:02  10  );
16:21:02  11  
16:21:02  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:21:02  13  /*
16:21:02  14  Throws exceptions:
16:21:02  15  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  17  */
16:21:02  18  	in_product_offering_id	IN NUMBER,
16:21:02  19  	out_result_set OUT SYS_REFCURSOR
16:21:02  20  );
16:21:02  21  
16:21:02  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
16:21:02  23  /*
16:21:02  24  Throws exceptions:
16:21:02  25  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:02  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:02  27  */
16:21:02  28  	in_product_id	    IN NUMBER,
16:21:02  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
16:21:02  30  	out_result_set	    OUT SYS_REFCURSOR
16:21:02  31  );
16:21:02  32  
16:21:02  33  PROCEDURE GET_PRODUCT_BY_ID (
16:21:02  34  	in_product_id  IN NUMBER,
16:21:02  35  	out_result_set OUT SYS_REFCURSOR
16:21:02  36  );
16:21:02  37  
16:21:02  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
16:21:02  39  	in_line_item_id IN NUMBER,
16:21:02  40  	out_result_set	OUT SYS_REFCURSOR
16:21:02  41  );
16:21:02  42  
16:21:02  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
16:21:02  44  	in_product_offering_id IN NUMBER,
16:21:02  45  	out_result_set	OUT SYS_REFCURSOR
16:21:02  46  );
16:21:02  47  
16:21:02  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
16:21:02  49  	in_product_offering_id IN NUMBER,
16:21:02  50  	out_result_set	       OUT SYS_REFCURSOR
16:21:02  51  );
16:21:02  52  
16:21:02  53  END PROCS_PRODUCT_V16;
16:21:02  54  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.03
16:21:02 SQL> 
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
16:21:02 SQL> --------------------------------------------------------------------------------
16:21:02 SQL> 
16:21:02 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V16" AS
16:21:02   2  
16:21:02   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
16:21:02   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
16:21:02   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
16:21:02   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:02   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
16:21:02   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
16:21:02   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
16:21:02  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
16:21:02  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
16:21:02  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:21:02  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
16:21:02  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
16:21:02  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
16:21:02  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:21:02  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
16:21:02  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
16:21:02  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
16:21:02  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
16:21:02  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
16:21:02  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
16:21:02  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
16:21:02  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
16:21:02  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
16:21:02  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
16:21:02  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
16:21:02  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
16:21:02  29  );
16:21:02  30  
16:21:02  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
16:21:02  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
16:21:02  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
16:21:02  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
16:21:02  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
16:21:02  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
16:21:02  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:21:02  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
16:21:02  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
16:21:02  40  );
16:21:02  41  
16:21:02  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
16:21:02  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
16:21:02  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
16:21:02  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:02  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
16:21:02  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
16:21:02  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
16:21:02  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
16:21:02  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
16:21:02  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
16:21:02  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
16:21:02  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
16:21:02  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
16:21:02  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
16:21:02  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
16:21:02  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
16:21:02  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
16:21:02  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
16:21:02  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
16:21:02  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
16:21:02  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
16:21:02  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
16:21:02  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
16:21:02  65  );
16:21:02  66  
16:21:02  67  PROCEDURE CREATE_CPT_EXCEPTION (
16:21:02  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
16:21:02  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
16:21:02  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:02  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
16:21:02  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
16:21:02  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
16:21:02  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
16:21:02  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
16:21:02  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
16:21:02  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
16:21:02  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
16:21:02  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:21:02  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:21:02  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
16:21:02  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
16:21:02  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
16:21:02  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
16:21:02  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
16:21:02  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
16:21:02  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
16:21:02  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
16:21:02  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
16:21:02  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
16:21:02  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
16:21:02  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
16:21:02  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
16:21:02  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
16:21:02  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
16:21:02  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
16:21:02  97  );
16:21:02  98  
16:21:02  99  PROCEDURE CREATE_CPT_DEPOSIT (
16:21:02 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
16:21:02 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
16:21:02 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:02 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
16:21:02 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
16:21:02 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
16:21:02 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
16:21:02 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
16:21:02 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
16:21:02 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
16:21:02 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
16:21:02 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:21:02 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:21:02 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
16:21:02 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
16:21:02 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
16:21:02 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
16:21:02 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
16:21:02 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
16:21:02 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
16:21:02 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
16:21:02 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
16:21:02 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
16:21:02 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
16:21:02 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
16:21:02 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
16:21:02 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
16:21:02 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
16:21:02 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
16:21:02 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
16:21:02 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
16:21:02 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
16:21:02 132  );
16:21:02 133  
16:21:02 134  PROCEDURE CREATE_PP_SETTLEMENT (
16:21:02 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
16:21:02 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
16:21:02 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:02 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
16:21:02 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
16:21:02 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
16:21:02 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
16:21:02 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
16:21:02 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
16:21:02 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
16:21:02 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
16:21:02 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
16:21:02 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
16:21:02 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
16:21:02 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
16:21:02 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
16:21:02 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
16:21:02 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
16:21:02 153  );
16:21:02 154  
16:21:02 155  PROCEDURE CREATE_PP_DISPUTE (
16:21:02 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
16:21:02 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
16:21:02 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:02 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
16:21:02 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
16:21:02 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
16:21:02 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
16:21:02 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
16:21:02 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
16:21:02 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
16:21:02 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
16:21:02 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
16:21:02 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
16:21:02 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
16:21:02 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
16:21:02 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
16:21:02 172  );
16:21:02 173  
16:21:02 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
16:21:02 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
16:21:02 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
16:21:02 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:02 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
16:21:02 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
16:21:02 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
16:21:02 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
16:21:02 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
16:21:02 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
16:21:02 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
16:21:02 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
16:21:02 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
16:21:02 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
16:21:02 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
16:21:02 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
16:21:02 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
16:21:02 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
16:21:02 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
16:21:02 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
16:21:02 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
16:21:02 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
16:21:02 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
16:21:02 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
16:21:02 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
16:21:02 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
16:21:02 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
16:21:02 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
16:21:02 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
16:21:02 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
16:21:02 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
16:21:02 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
16:21:02 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
16:21:02 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
16:21:02 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
16:21:02 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
16:21:02 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
16:21:02 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
16:21:02 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
16:21:02 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
16:21:02 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
16:21:02 215  );
16:21:02 216  
16:21:02 217  PROCEDURE GET_EXT_SOURCE_LOG (
16:21:02 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:21:02 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
16:21:02 220  	out_result_set		 OUT SYS_REFCURSOR
16:21:02 221  );
16:21:02 222  
16:21:02 223  END PROCS_RECONCILIATION_CRU_V16;
16:21:02 224  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.09
16:21:02 SQL> 
16:21:02 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
16:21:02 SQL> 
16:21:02 SQL> whenever sqlerror exit failure
16:21:02 SQL> 
16:21:02 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
16:21:02   2  
16:21:02   3  ----
16:21:02   4  --------------------------------------------------------------------------------
16:21:02   5  ----
16:21:02   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
16:21:02   7  	      return line_item.amount%type;
16:21:02   8  ----
16:21:02   9  --------------------------------------------------------------------------------
16:21:02  10  ----
16:21:02  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
16:21:02  12  	      return line_item.amount%type;
16:21:02  13  ----
16:21:02  14  --------------------------------------------------------------------------------
16:21:02  15  ----
16:21:02  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
16:21:02  17  	      in_lower_date_bound DATE,
16:21:02  18  	      in_upper_date_bound DATE,
16:21:02  19  	      out_lic_cur OUT sys_refcursor
16:21:02  20  	  );
16:21:02  21  ----
16:21:02  22  --------------------------------------------------------------------------------
16:21:02  23  ----
16:21:02  24  END PROCS_REPORTING_1A;
16:21:02  25  .
16:21:02 SQL> /

Package created.

Elapsed: 00:00:00.09
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
16:21:03   2  
16:21:03   3  ----
16:21:03   4  --------------------------------------------------------------------------------
16:21:03   5  ----
16:21:03   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03   7  ----
16:21:03   8  --------------------------------------------------------------------------------
16:21:03   9  ----
16:21:03  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  11  ----
16:21:03  12  --------------------------------------------------------------------------------
16:21:03  13  ----
16:21:03  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  15  ----
16:21:03  16  --------------------------------------------------------------------------------
16:21:03  17  ----
16:21:03  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  19  ----
16:21:03  20  --------------------------------------------------------------------------------
16:21:03  21  ----
16:21:03  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  23  ----
16:21:03  24  --------------------------------------------------------------------------------
16:21:03  25  ----
16:21:03  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  27  ----
16:21:03  28  --------------------------------------------------------------------------------
16:21:03  29  ----
16:21:03  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  31  ----
16:21:03  32  --------------------------------------------------------------------------------
16:21:03  33  ----
16:21:03  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  35  ----
16:21:03  36  --------------------------------------------------------------------------------
16:21:03  37  ----
16:21:03  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  39  ----
16:21:03  40  --------------------------------------------------------------------------------
16:21:03  41  ----
16:21:03  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  43  ----
16:21:03  44  --------------------------------------------------------------------------------
16:21:03  45  ----
16:21:03  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  47  ----
16:21:03  48  --------------------------------------------------------------------------------
16:21:03  49  ----
16:21:03  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  51  ----
16:21:03  52  --------------------------------------------------------------------------------
16:21:03  53  ----
16:21:03  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  55  ----
16:21:03  56  --------------------------------------------------------------------------------
16:21:03  57  ----
16:21:03  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  59  ----
16:21:03  60  --------------------------------------------------------------------------------
16:21:03  61  ----
16:21:03  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  63  ----
16:21:03  64  --------------------------------------------------------------------------------
16:21:03  65  ----
16:21:03  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  67  ----
16:21:03  68  --------------------------------------------------------------------------------
16:21:03  69  ----
16:21:03  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  71  ----
16:21:03  72  --------------------------------------------------------------------------------
16:21:03  73  ----
16:21:03  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  75  ----
16:21:03  76  --------------------------------------------------------------------------------
16:21:03  77  ----
16:21:03  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  79  ----
16:21:03  80  --------------------------------------------------------------------------------
16:21:03  81  ----
16:21:03  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  83  ----
16:21:03  84  --------------------------------------------------------------------------------
16:21:03  85  ----
16:21:03  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  87  ----
16:21:03  88  --------------------------------------------------------------------------------
16:21:03  89  ----
16:21:03  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  91  ----
16:21:03  92  --------------------------------------------------------------------------------
16:21:03  93  ----
16:21:03  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  95  ----
16:21:03  96  --------------------------------------------------------------------------------
16:21:03  97  ----
16:21:03  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03  99  ----
16:21:03 100  --------------------------------------------------------------------------------
16:21:03 101  ----
16:21:03 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 103  ----
16:21:03 104  --------------------------------------------------------------------------------
16:21:03 105  ----
16:21:03 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 107  ----
16:21:03 108  --------------------------------------------------------------------------------
16:21:03 109  ----
16:21:03 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 111  ----
16:21:03 112  --------------------------------------------------------------------------------
16:21:03 113  ----
16:21:03 114  /**/
16:21:03 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 116  ----
16:21:03 117  --------------------------------------------------------------------------------
16:21:03 118  ----
16:21:03 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 120  ----
16:21:03 121  --------------------------------------------------------------------------------
16:21:03 122  ----
16:21:03 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 124  ----
16:21:03 125  --------------------------------------------------------------------------------
16:21:03 126  ----
16:21:03 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 128  ----
16:21:03 129  --------------------------------------------------------------------------------
16:21:03 130  ----
16:21:03 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 132  ----
16:21:03 133  --------------------------------------------------------------------------------
16:21:03 134  ----
16:21:03 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 136  ----
16:21:03 137  --------------------------------------------------------------------------------
16:21:03 138  ----
16:21:03 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 140  ----
16:21:03 141  --------------------------------------------------------------------------------
16:21:03 142  ----
16:21:03 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 144  ----
16:21:03 145  --------------------------------------------------------------------------------
16:21:03 146  ----
16:21:03 147  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 148  ----
16:21:03 149  --------------------------------------------------------------------------------
16:21:03 150  ----
16:21:03 151  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:21:03 152  ----
16:21:03 153  --------------------------------------------------------------------------------
16:21:03 154  ----
16:21:03 155  /**/
16:21:03 156  END PROCS_REPORTING;
16:21:03 157  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.09
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_REPORTS
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V5" AS
16:21:03   2  
16:21:03   3  FUNCTION GET_PRODUCT_NAMES(
16:21:03   4  	in_offer_id IN NUMBER
16:21:03   5  ) RETURN VARCHAR2;
16:21:03   6  
16:21:03   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
16:21:03   8  	in_start_date  IN DATE,
16:21:03   9  	in_end_date    IN DATE,
16:21:03  10  	out_result_set OUT SYS_REFCURSOR
16:21:03  11  );
16:21:03  12  
16:21:03  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
16:21:03  14  	in_offer_id	       IN NUMBER,
16:21:03  15  	in_start_date	       IN DATE,
16:21:03  16  	in_end_date	       IN DATE,
16:21:03  17  	out_new_purchasers_num OUT NUMBER,
16:21:03  18  	out_renewals_num       OUT NUMBER,
16:21:03  19  	out_product_names      OUT VARCHAR2,
16:21:03  20  	out_total_dollar_value OUT NUMBER,
16:21:03  21  	out_unique_purchasers  OUT NUMBER
16:21:03  22  );
16:21:03  23  
16:21:03  24  /*
16:21:03  25  FUNCTIONS FOR THE FLASH REPORT
16:21:03  26  */
16:21:03  27  
16:21:03  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
16:21:03  29  	in_offer_id	       IN NUMBER,
16:21:03  30  	in_start_date	       IN DATE,
16:21:03  31  	in_end_date	       IN DATE
16:21:03  32  ) RETURN NUMBER;
16:21:03  33  
16:21:03  34  FUNCTION FLR_RENEWALS_NUM (
16:21:03  35  	in_offer_id	       IN NUMBER,
16:21:03  36  	in_start_date	       IN DATE,
16:21:03  37  	in_end_date	       IN DATE
16:21:03  38  ) RETURN NUMBER;
16:21:03  39  
16:21:03  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
16:21:03  41  	in_offer_id	       IN NUMBER,
16:21:03  42  	in_start_date	       IN DATE,
16:21:03  43  	in_end_date	       IN DATE
16:21:03  44  ) RETURN NUMBER;
16:21:03  45  
16:21:03  46  FUNCTION FLR_UNIQUE_PURCHASERS (
16:21:03  47  	in_offer_id	       IN NUMBER,
16:21:03  48  	in_start_date	       IN DATE,
16:21:03  49  	in_end_date	       IN DATE
16:21:03  50  ) RETURN NUMBER;
16:21:03  51  
16:21:03  52  END PROCS_REPORTS_V5;
16:21:03  53  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.08
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_SUBSCRIPTION(
16:21:03   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
16:21:03   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
16:21:03   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
16:21:03   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
16:21:03   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
16:21:03   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
16:21:03  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
16:21:03  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
16:21:03  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
16:21:03  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
16:21:03  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
16:21:03  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
16:21:03  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
16:21:03  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
16:21:03  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
16:21:03  19  );
16:21:03  20  
16:21:03  21  PROCEDURE UPDATE_SUBSCRIPTION(
16:21:03  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
16:21:03  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
16:21:03  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
16:21:03  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
16:21:03  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
16:21:03  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
16:21:03  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
16:21:03  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:21:03  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
16:21:03  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
16:21:03  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
16:21:03  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
16:21:03  34  );
16:21:03  35  
16:21:03  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
16:21:03  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
16:21:03  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:21:03  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
16:21:03  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:21:03  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
16:21:03  42  );
16:21:03  43  
16:21:03  44  END PROCS_SUBSCRIPTION_CRU_V16;
16:21:03  45  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.04
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_SUBSCRIPTION
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE START_SUBSCRIPTION_CREATION (
16:21:03   4  	in_group_id	      IN NUMBER,
16:21:03   5  	in_created_by	      IN VARCHAR2,
16:21:03   6  	in_offer_chain_id     IN NUMBER,
16:21:03   7  	in_instrument_type_id IN NUMBER,
16:21:03   8  	in_instrument_id      IN NUMBER,
16:21:03   9  	in_agent_id	      IN NUMBER,
16:21:03  10  	in_note 	      IN VARCHAR2,
16:21:03  11  	out_subscription_id   OUT NUMBER,
16:21:03  12  	out_invoice_id	      OUT NUMBER,
16:21:03  13  	out_new_license_id    OUT NUMBER,
16:21:03  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
16:21:03  15  );
16:21:03  16  
16:21:03  17  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
16:21:03  18  	in_subscription_id    IN NUMBER,
16:21:03  19  	in_invoice_id	      IN NUMBER,
16:21:03  20  	in_instrument_type_id IN NUMBER,
16:21:03  21  	in_instrument_id      IN NUMBER,
16:21:03  22  	in_created_by	      IN VARCHAR2
16:21:03  23  );
16:21:03  24  
16:21:03  25  PROCEDURE SUSPEND_SUBSCRIPTION(
16:21:03  26  /*
16:21:03  27  Throws exceptions:
16:21:03  28  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  29  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  31  */
16:21:03  32  	  in_subs_id	IN NUMBER ,
16:21:03  33  	  in_updated_by IN VARCHAR2
16:21:03  34  );
16:21:03  35  
16:21:03  36  PROCEDURE REACTIVATE_SUBSCRIPTION (
16:21:03  37  	in_subscription_id IN  NUMBER,
16:21:03  38  	in_updated_by	   IN  VARCHAR2
16:21:03  39  );
16:21:03  40  
16:21:03  41  PROCEDURE GET_SUBSCRIPTION_INFO (
16:21:03  42  /*
16:21:03  43  Throws exceptions:
16:21:03  44  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  45  */
16:21:03  46  	  in_subscription_id IN  NUMBER,
16:21:03  47  	  out_result_set      OUT SYS_REFCURSOR
16:21:03  48  );
16:21:03  49  
16:21:03  50  PROCEDURE GET_SUBSCRIPTION_INVOICES (
16:21:03  51  /*
16:21:03  52  Throws exceptions:
16:21:03  53  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:03  54  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  55  */
16:21:03  56  	in_subscription_id  IN	NUMBER,
16:21:03  57  	out_result_set	    OUT SYS_REFCURSOR
16:21:03  58  );
16:21:03  59  
16:21:03  60  PROCEDURE GET_SUBSCRIPTION_NOTES (
16:21:03  61  /*
16:21:03  62  Throws exceptions:
16:21:03  63  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  64  */
16:21:03  65  	in_subscription_id  IN	NUMBER,
16:21:03  66  	out_result_set	    OUT SYS_REFCURSOR
16:21:03  67  );
16:21:03  68  
16:21:03  69  PROCEDURE ANNOTATE_SUBSCRIPTION (
16:21:03  70  /*
16:21:03  71  Throws exceptions:
16:21:03  72  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:03  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  74  */
16:21:03  75  	in_subscription_id IN  NUMBER,
16:21:03  76  	in_agent_id	   IN  NUMBER,
16:21:03  77  	in_note 	   IN  VARCHAR2,
16:21:03  78  	in_created_by	   IN  VARCHAR2
16:21:03  79  );
16:21:03  80  
16:21:03  81  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
16:21:03  82  /*
16:21:03  83  Throws exceptions:
16:21:03  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  85  */
16:21:03  86  	out_result_set OUT SYS_REFCURSOR
16:21:03  87  );
16:21:03  88  
16:21:03  89  FUNCTION GET_RENEWAL_DATE (
16:21:03  90  /*
16:21:03  91  Throws exceptions:
16:21:03  92  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  93  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  94  */
16:21:03  95  	in_subscription_id in NUMBER
16:21:03  96  ) RETURN DATE;
16:21:03  97  
16:21:03  98  FUNCTION GET_RECENT_CHARGE (
16:21:03  99  /*
16:21:03 100  Throws exceptions:
16:21:03 101  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 102  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 103  */
16:21:03 104  	in_subscription_id IN NUMBER
16:21:03 105  ) RETURN NUMBER;
16:21:03 106  
16:21:03 107  FUNCTION GET_BILLING_CYCLE (
16:21:03 108  /*
16:21:03 109  Throws exceptions:
16:21:03 110  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 111  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 112  */
16:21:03 113  	in_subscription_id IN NUMBER
16:21:03 114  ) RETURN VARCHAR2;
16:21:03 115  
16:21:03 116  PROCEDURE REFUND_SUBSCRIPTION (
16:21:03 117  /*
16:21:03 118  Throws exceptions:
16:21:03 119  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 120  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 121  */
16:21:03 122  	in_subscription_id IN NUMBER,
16:21:03 123  	in_invoice_id	   IN NUMBER,
16:21:03 124  	in_refund_amount   IN NUMBER,
16:21:03 125  	in_note 	   IN VARCHAR2,
16:21:03 126  	in_created_by	   IN VARCHAR2,
16:21:03 127  	out_charge_id	   OUT NUMBER
16:21:03 128  );
16:21:03 129  
16:21:03 130  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
16:21:03 131  /*
16:21:03 132  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 133  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 134  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 135  */
16:21:03 136  	in_subscription_id	IN NUMBER,
16:21:03 137  	in_effective_start_date IN DATE,
16:21:03 138  	in_effective_end_date	IN DATE,
16:21:03 139  	in_note 		IN VARCHAR2,
16:21:03 140  	in_updated_by		IN VARCHAR2
16:21:03 141  );
16:21:03 142  
16:21:03 143  FUNCTION CALC_SUBSCRIPTION_END_DATE (
16:21:03 144  /*
16:21:03 145  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 146  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 147  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 148  Returns:
16:21:03 149  NULL if it is impossible to calculate end date (for example,
16:21:03 150  	offer chain includes offer with infinity recurrences number)
16:21:03 151  DATE else
16:21:03 152  */
16:21:03 153  	in_subscription_id IN NUMBER
16:21:03 154  ) RETURN DATE;
16:21:03 155  
16:21:03 156  PROCEDURE HAS_FUTURE_LICENSE (
16:21:03 157  /*
16:21:03 158  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 159  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 160  */
16:21:03 161  	in_license_id IN  NUMBER,
16:21:03 162  	out_result    OUT NUMBER
16:21:03 163  );
16:21:03 164  
16:21:03 165  PROCEDURE CLOSE_SUBSCRIPTION (
16:21:03 166  	in_subscription_id IN NUMBER,
16:21:03 167  	in_updated_by	   IN VARCHAR2
16:21:03 168  );
16:21:03 169  
16:21:03 170  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
16:21:03 171  	in_subscription_id IN NUMBER,
16:21:03 172  	out_group_id	   OUT NUMBER
16:21:03 173  );
16:21:03 174  
16:21:03 175  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
16:21:03 176  /*
16:21:03 177  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 178  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 179  */
16:21:03 180  	in_subscription_id IN NUMBER,
16:21:03 181  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 182  );
16:21:03 183  
16:21:03 184  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
16:21:03 185  /*
16:21:03 186  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 188  */
16:21:03 189  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
16:21:03 190  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
16:21:03 191  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
16:21:03 192  );
16:21:03 193  
16:21:03 194  PROCEDURE GET_ACTIVE_INVOICES_IDS (
16:21:03 195  /*
16:21:03 196  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 198  */
16:21:03 199  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
16:21:03 200  	in_subscription_id IN NUMBER,
16:21:03 201  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 202  );
16:21:03 203  
16:21:03 204  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
16:21:03 205  /*
16:21:03 206  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 207  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 208  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 209  */
16:21:03 210  	in_invoice_id	     IN NUMBER,
16:21:03 211  	in_updated_by	     IN VARCHAR2,
16:21:03 212  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:03 213  );
16:21:03 214  
16:21:03 215  PROCEDURE FINALIZE_CANCELATION (
16:21:03 216  /*
16:21:03 217  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 218  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 219  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 220  */
16:21:03 221  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
16:21:03 222  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
16:21:03 223  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:21:03 224  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:21:03 225  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:21:03 226  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
16:21:03 227  	in_subscription_id    IN NUMBER,
16:21:03 228  	in_cancelation_reason IN VARCHAR2,
16:21:03 229  	in_cancelation_date   IN DATE,
16:21:03 230  	in_note 	      IN VARCHAR2,
16:21:03 231  	in_agent_id	      IN NUMBER,
16:21:03 232  	in_updated_by	      IN VARCHAR2
16:21:03 233  );
16:21:03 234  
16:21:03 235  PROCEDURE FINALIZE_FALSE_START (
16:21:03 236  /*
16:21:03 237  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 239  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 240  */
16:21:03 241  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
16:21:03 242  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:21:03 243  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:21:03 244  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:21:03 245  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
16:21:03 246  	in_subscription_id    IN NUMBER,
16:21:03 247  	in_cancelation_date   IN DATE,
16:21:03 248  	in_note 	      IN VARCHAR2,
16:21:03 249  	in_agent_id	      IN NUMBER,
16:21:03 250  	in_updated_by	      IN VARCHAR2
16:21:03 251  );
16:21:03 252  
16:21:03 253  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
16:21:03 254  	in_subscription_id IN NUMBER
16:21:03 255  ) RETURN NUMBER;
16:21:03 256  
16:21:03 257  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
16:21:03 258  /*
16:21:03 259  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 260  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 261  */
16:21:03 262  	in_subscription_id IN NUMBER,
16:21:03 263  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 264  );
16:21:03 265  
16:21:03 266  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
16:21:03 267  /*
16:21:03 268  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 269  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 270  */
16:21:03 271  	in_subscription_id IN NUMBER,
16:21:03 272  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 273  );
16:21:03 274  
16:21:03 275  PROCEDURE GET_SUBSCR_LIC_OFFER (
16:21:03 276  /*
16:21:03 277  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 278  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 279  */
16:21:03 280  	in_subscription_id IN NUMBER,
16:21:03 281  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 282  );
16:21:03 283  
16:21:03 284  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
16:21:03 285  /*
16:21:03 286  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 287  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 288  */
16:21:03 289  	in_subscription_id IN NUMBER,
16:21:03 290  	out_result	   OUT NUMBER
16:21:03 291  );
16:21:03 292  
16:21:03 293  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
16:21:03 294  /*
16:21:03 295  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 296  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 297  */
16:21:03 298  	in_group_id	   IN NUMBER,
16:21:03 299  	in_offer_chain_id  IN NUMBER,
16:21:03 300  	out_result	   out number
16:21:03 301  );
16:21:03 302  
16:21:03 303  PROCEDURE GET_EXISTING_SUBSCR_IDS (
16:21:03 304  /*
16:21:03 305  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 306  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 307  */
16:21:03 308  	in_group_id	   IN NUMBER,
16:21:03 309  	in_offer_chain_id  IN NUMBER,
16:21:03 310  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 311  );
16:21:03 312  
16:21:03 313  PROCEDURE ADD_META_DATA (
16:21:03 314  /*
16:21:03 315  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 316  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 317  */
16:21:03 318  	in_subscription_id IN NUMBER,
16:21:03 319  	in_name 	   IN VARCHAR2,
16:21:03 320  	in_value	   IN VARCHAR2,
16:21:03 321  	in_created_by	   IN VARCHAR2
16:21:03 322  );
16:21:03 323  
16:21:03 324  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
16:21:03 325  /*
16:21:03 326  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:03 327  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 328  */
16:21:03 329  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
16:21:03 330  	out_result_set	     OUT SYS_REFCURSOR
16:21:03 331  );
16:21:03 332  
16:21:03 333  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
16:21:03 334  /*
16:21:03 335  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 336  */
16:21:03 337  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
16:21:03 338  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 339  );
16:21:03 340  
16:21:03 341  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
16:21:03 342   (
16:21:03 343  /*
16:21:03 344  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 345  */
16:21:03 346  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:21:03 347  	out_result_set	    OUT SYS_REFCURSOR
16:21:03 348  );
16:21:03 349  
16:21:03 350  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
16:21:03 351  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
16:21:03 352  ) RETURN NUMBER;
16:21:03 353  
16:21:03 354  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
16:21:03 355  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
16:21:03 356  ) RETURN VARCHAR2;
16:21:03 357  
16:21:03 358  
16:21:03 359  
16:21:03 360  PROCEDURE GET_ACTIVE_MEU_SUBS (
16:21:03 361  	out_result_set	    OUT SYS_REFCURSOR
16:21:03 362  );
16:21:03 363  
16:21:03 364  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
16:21:03 365  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:21:03 366  	out_offer_id	    OUT NUMBER
16:21:03 367  );
16:21:03 368  
16:21:03 369  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
16:21:03 370  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:21:03 371  	out_license_id	    OUT NUMBER
16:21:03 372  );
16:21:03 373  
16:21:03 374  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
16:21:03 375  	out_result_set	    OUT SYS_REFCURSOR
16:21:03 376  );
16:21:03 377  
16:21:03 378  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
16:21:03 379  	out_result_set	    OUT SYS_REFCURSOR
16:21:03 380  );
16:21:03 381  
16:21:03 382  END PROCS_SUBSCRIPTION_V16;
16:21:03 383  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.05
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_SYSTEM
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE INCREMENT_VERSION;
16:21:03   4  
16:21:03   5  PROCEDURE CHECK_VERSION(
16:21:03   6  	  in_vers    IN NUMBER,
16:21:03   7  	  out_result OUT NUMBER
16:21:03   8  );
16:21:03   9  
16:21:03  10  END PROCS_SYSTEM_V16;
16:21:03  11  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.01
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_TAXES_CRU
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_TAX (
16:21:03   4  	inout_tax_id		 IN OUT NUMBER,
16:21:03   5  	in_tax_type_id		 IN NUMBER,
16:21:03   6  	in_calculated_amount	 IN NUMBER,
16:21:03   7  	in_created_by		 IN VARCHAR2,
16:21:03   8  	in_line_item_id 	 IN NUMBER,
16:21:03   9  	in_effective_rate	 IN VARCHAR2,
16:21:03  10  	in_taxable_amount	 IN NUMBER,
16:21:03  11  	in_tax_rule_id		 IN NUMBER,
16:21:03  12  	in_jurisdiction_level_id IN NUMBER,
16:21:03  13  	in_jurisdiction_name	 IN VARCHAR2,
16:21:03  14  	in_jurisdiction_id	 IN VARCHAR2,
16:21:03  15  	in_ext_tax_type 	 IN VARCHAR2,
16:21:03  16  	in_ext_result		 IN VARCHAR2,
16:21:03  17  	in_imposition_type	 IN VARCHAR2,
16:21:03  18  	in_imposition		 IN VARCHAR2
16:21:03  19  );
16:21:03  20  
16:21:03  21  END PROCS_TAXES_CRU_V16;
16:21:03  22  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_TAXES
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE ADD_TAX (
16:21:03   4  	in_tax_type_id		 IN NUMBER,
16:21:03   5  	in_calculated_amount	 IN NUMBER,
16:21:03   6  	in_created_by		 IN VARCHAR2,
16:21:03   7  	in_line_item_id 	 IN NUMBER,
16:21:03   8  	in_effective_rate	 IN VARCHAR2,
16:21:03   9  	in_taxable_amount	 IN NUMBER,
16:21:03  10  	in_tax_rule_id		 IN NUMBER,
16:21:03  11  	in_jurisdiction_level_id IN NUMBER,
16:21:03  12  	in_jurisdiction_name	 IN VARCHAR2,
16:21:03  13  	in_jurisdiction_id	 IN VARCHAR2,
16:21:03  14  	in_ext_tax_type 	 IN VARCHAR2,
16:21:03  15  	in_ext_result		 IN VARCHAR2,
16:21:03  16  	in_imposition_type	 IN VARCHAR2,
16:21:03  17  	in_imposition		 IN VARCHAR2
16:21:03  18  );
16:21:03  19  
16:21:03  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
16:21:03  21  	in_country_code IN CHAR,
16:21:03  22  	in_check_date IN DATE,
16:21:03  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V16.FALSE
16:21:03  24  );
16:21:03  25  
16:21:03  26  PROCEDURE GET_TAX_CATEGORY (
16:21:03  27  	in_tax_category_id IN NUMBER,
16:21:03  28  	out_result_set	   OUT SYS_REFCURSOR
16:21:03  29  );
16:21:03  30  
16:21:03  31  END PROCS_TAXES_V16;
16:21:03  32  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_TEST
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE TEST_CLEAR_ALL;
16:21:03   4  PROCEDURE TEST_CLEAR_PRODUCTS;
16:21:03   5  
16:21:03   6  /********************************************/
16:21:03   7  
16:21:03   8  PROCEDURE TEST_GET_ACCOUNT (
16:21:03   9  	in_group_id	IN NUMBER,
16:21:03  10  	out_result_set	OUT SYS_REFCURSOR
16:21:03  11  );
16:21:03  12  
16:21:03  13  /********************************************/
16:21:03  14  
16:21:03  15  PROCEDURE TEST_GET_SUBSCRIPTION (
16:21:03  16  	in_subscription_id IN NUMBER,
16:21:03  17  	out_result_set	   OUT SYS_REFCURSOR
16:21:03  18  );
16:21:03  19  
16:21:03  20  /*********************************************/
16:21:03  21  
16:21:03  22  PROCEDURE TEST_DELETE_INVOICE (
16:21:03  23  	in_invoice_id IN NUMBER
16:21:03  24  );
16:21:03  25  
16:21:03  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
16:21:03  27  	in_group_id IN NUMBER
16:21:03  28  );
16:21:03  29  
16:21:03  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
16:21:03  31  	in_start_group_id IN NUMBER,
16:21:03  32  	in_end_group_id   IN NUMBER
16:21:03  33  );
16:21:03  34  
16:21:03  35  /**********************************************/
16:21:03  36  
16:21:03  37  FUNCTION TEST_IS_INVOICE_EXISTS(
16:21:03  38  /*
16:21:03  39  1 - exists
16:21:03  40  0 - not exists
16:21:03  41  */
16:21:03  42  	in_invoice_id IN NUMBER
16:21:03  43  ) RETURN NUMBER;
16:21:03  44  
16:21:03  45  PROCEDURE TEST_GET_INVOICE_INFO (
16:21:03  46  	in_invoice_id  IN NUMBER,
16:21:03  47  	out_result_set OUT SYS_REFCURSOR
16:21:03  48  );
16:21:03  49  
16:21:03  50  /******************************************************************************/
16:21:03  51  
16:21:03  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
16:21:03  53  	in_offer_chain_id in number
16:21:03  54  );
16:21:03  55  
16:21:03  56  END PROCS_TEST_V16;
16:21:03  57  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.02
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_TRANSACTION_CRU
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_TRANSACTION (
16:21:03   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
16:21:03   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
16:21:03   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
16:21:03   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
16:21:03   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
16:21:03   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
16:21:03  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:03  11  );
16:21:03  12  
16:21:03  13  PROCEDURE UPDATE_TRANSACTION (
16:21:03  14  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
16:21:03  15  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
16:21:03  16  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
16:21:03  17  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
16:21:03  18  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
16:21:03  19  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
16:21:03  20  );
16:21:03  21  
16:21:03  22  PROCEDURE READ_TRANSACTION (
16:21:03  23  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:21:03  24  	out_result_set	  OUT SYS_REFCURSOR
16:21:03  25  );
16:21:03  26  
16:21:03  27  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
16:21:03  28  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
16:21:03  29  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
16:21:03  30  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
16:21:03  31  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:21:03  32  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
16:21:03  33  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
16:21:03  34  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
16:21:03  35  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
16:21:03  36  );
16:21:03  37  
16:21:03  38  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:21:03  39  /*
16:21:03  40  Throws exceptions:
16:21:03  41  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  42  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
16:21:03  43  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  44  */
16:21:03  45  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:21:03  46  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:21:03  47  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:21:03  48  );
16:21:03  49  
16:21:03  50  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
16:21:03  51  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
16:21:03  52  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
16:21:03  53  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:21:03  54  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
16:21:03  55  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
16:21:03  56  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
16:21:03  57  );
16:21:03  58  
16:21:03  59  END PROCS_TRANSACTION_CRU_V16;
16:21:03  60  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.03
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PROCS_TRANSACTION
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_TRANSACTION (
16:21:03   4  /*
16:21:03   5  Throws exceptions:
16:21:03   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03   8  */
16:21:03   9  	in_transaction_id  IN NUMBER,
16:21:03  10  	in_status_id	   IN NUMBER,
16:21:03  11  	in_amount	   IN NUMBER,
16:21:03  12  	in_created_by	   IN VARCHAR2,
16:21:03  13  	in_order_id	   IN VARCHAR2,
16:21:03  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE,
16:21:03  15  	out_transaction_id OUT NUMBER
16:21:03  16  );
16:21:03  17  
16:21:03  18  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
16:21:03  19  /*
16:21:03  20  Throws exceptions:
16:21:03  21  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  23  */
16:21:03  24  	in_transaction_id	   IN NUMBER,
16:21:03  25  	in_trans_attempt_status    IN NUMBER,
16:21:03  26  	in_external_status_code    IN VARCHAR2,
16:21:03  27  	in_external_status_message IN VARCHAR2,
16:21:03  28  	in_created_by		   IN VARCHAR2,
16:21:03  29  	in_ext_transaction_id	   IN VARCHAR2,
16:21:03  30  	out_transaction_attempt_id OUT NUMBER
16:21:03  31  );
16:21:03  32  
16:21:03  33  PROCEDURE UPDATE_TRANSACTION_STATUS (
16:21:03  34  /*
16:21:03  35  Throws exceptions:
16:21:03  36  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  37  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  38  */
16:21:03  39  	in_transaction_id	 IN NUMBER,
16:21:03  40  	in_updated_by		 IN VARCHAR2,
16:21:03  41  	in_transaction_status_id IN NUMBER
16:21:03  42  );
16:21:03  43  
16:21:03  44  PROCEDURE UPDATE_TRANSACTION_SETTLED (
16:21:03  45  /*
16:21:03  46  Throws exceptions:
16:21:03  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  49  */
16:21:03  50  	in_transaction_id	 IN NUMBER,
16:21:03  51  	in_updated_by		 IN VARCHAR2,
16:21:03  52  	in_is_settled		 IN NUMBER
16:21:03  53  );
16:21:03  54  
16:21:03  55  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
16:21:03  56  /*
16:21:03  57  Throws exceptions:
16:21:03  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  60  */
16:21:03  61  	in_transaction_attempt_id IN NUMBER,
16:21:03  62  	in_updated_by		  IN VARCHAR2
16:21:03  63  );
16:21:03  64  
16:21:03  65  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
16:21:03  66  /*
16:21:03  67  Throws exceptions:
16:21:03  68  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  69  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  70  */
16:21:03  71  	in_transaction_attempt_id     IN NUMBER,
16:21:03  72  	in_transaction_attempt_status IN NUMBER
16:21:03  73  );
16:21:03  74  
16:21:03  75  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
16:21:03  76  /*
16:21:03  77  Throws exceptions:
16:21:03  78  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  79  */
16:21:03  80  	in_transaction_id	      IN NUMBER,
16:21:03  81  	in_transaction_attempt_status IN NUMBER,
16:21:03  82  	out_result_set		      OUT SYS_REFCURSOR
16:21:03  83  );
16:21:03  84  
16:21:03  85  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
16:21:03  86  /*
16:21:03  87  Throws exceptions:
16:21:03  88  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  89  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  90  */
16:21:03  91  	in_transaction_attempt_id IN NUMBER,
16:21:03  92  	in_ext_status_code	  IN VARCHAR2,
16:21:03  93  	in_ext_status_message	  IN VARCHAR2,
16:21:03  94  	in_ext_transaction_id	  IN VARCHAR2
16:21:03  95  );
16:21:03  96  
16:21:03  97  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
16:21:03  98  /*
16:21:03  99  Throws exceptions:
16:21:03 100  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 102  */
16:21:03 103  	in_transaction_id IN  NUMBER,
16:21:03 104  	out_attempts_num  OUT NUMBER
16:21:03 105  );
16:21:03 106  
16:21:03 107  PROCEDURE GET_TRANSACTION_AMOUNT (
16:21:03 108  /*
16:21:03 109  Throws exceptions:
16:21:03 110  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 111  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 112  */
16:21:03 113  	in_transaction_id      IN  NUMBER,
16:21:03 114  	out_transaction_amount OUT NUMBER
16:21:03 115  );
16:21:03 116  
16:21:03 117  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
16:21:03 118  /*
16:21:03 119  Throws exceptions:
16:21:03 120  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 122  */
16:21:03 123  	in_charge_id   IN  NUMBER,
16:21:03 124  	out_result_set OUT SYS_REFCURSOR
16:21:03 125  );
16:21:03 126  
16:21:03 127  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
16:21:03 128  /*
16:21:03 129  Throws exceptions:
16:21:03 130  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 131  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 132  */
16:21:03 133  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
16:21:03 134  	out_result_set OUT SYS_REFCURSOR
16:21:03 135  );
16:21:03 136  
16:21:03 137  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
16:21:03 138  /*
16:21:03 139  Throws exceptions:
16:21:03 140  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 141  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 142  */
16:21:03 143  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
16:21:03 144  	out_result_set OUT SYS_REFCURSOR
16:21:03 145  );
16:21:03 146  
16:21:03 147  PROCEDURE GET_TRANSACTION_ATTEMPTS (
16:21:03 148  /*
16:21:03 149  Throws exceptions:
16:21:03 150  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 151  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 152  */
16:21:03 153  	in_transaction_id IN  NUMBER,
16:21:03 154  	out_result_set	  OUT SYS_REFCURSOR
16:21:03 155  );
16:21:03 156  
16:21:03 157  PROCEDURE RESERVE_TRANSACTION_ID (
16:21:03 158  /*
16:21:03 159  Throws exceptions:
16:21:03 160  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 161  */
16:21:03 162  	out_transaction_id OUT NUMBER
16:21:03 163  );
16:21:03 164  
16:21:03 165  PROCEDURE GET_TRANSACTION_BY_ID (
16:21:03 166  /*
16:21:03 167  Throws exceptions:
16:21:03 168  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 169  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 170  */
16:21:03 171  	in_transaction_id IN NUMBER,
16:21:03 172  	out_result_set	  OUT SYS_REFCURSOR
16:21:03 173  );
16:21:03 174  
16:21:03 175  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:21:03 176  /*
16:21:03 177  Throws exceptions:
16:21:03 178  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 179  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
16:21:03 180  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 181  */
16:21:03 182  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:21:03 183  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:21:03 184  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:21:03 185  );
16:21:03 186  
16:21:03 187  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
16:21:03 188  /*
16:21:03 189  Throws exceptions:
16:21:03 190  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 191  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 192  */
16:21:03 193  	in_invoice_id	IN  NUMBER,
16:21:03 194  	out_result_set OUT SYS_REFCURSOR
16:21:03 195  );
16:21:03 196  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
16:21:03 197  /*
16:21:03 198  Throws exceptions:
16:21:03 199  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 200  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 201  */
16:21:03 202  	in_transaction_id IN  NUMBER,
16:21:03 203  	out_is_successfull  OUT NUMBER
16:21:03 204  );
16:21:03 205  
16:21:03 206  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
16:21:03 207  	in_transaction_id IN NUMBER
16:21:03 208  ) RETURN NUMBER;
16:21:03 209  
16:21:03 210  FUNCTION GET_TRANSACTION_INTRL_TAXES (
16:21:03 211  	in_transaction_id IN NUMBER
16:21:03 212  ) RETURN NUMBER;
16:21:03 213  
16:21:03 214  -- norlov: #38796
16:21:03 215  PROCEDURE GET_TRANSACTIONS (
16:21:03 216  /*
16:21:03 217  Throws exceptions:
16:21:03 218  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 219  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 220  */
16:21:03 221  	in_group_id	      IN  NUMBER,
16:21:03 222  	in_invoice_id	      IN NUMBER DEFAULT NULL,
16:21:03 223  	in_subscription_id    IN NUMBER DEFAULT NULL,
16:21:03 224  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
16:21:03 225  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
16:21:03 226  	in_transaction_status IN NUMBER DEFAULT NULL,
16:21:03 227  	out_result_set	      OUT SYS_REFCURSOR
16:21:03 228  );
16:21:03 229  
16:21:03 230  FUNCTION IS_TRANSACTION_COLLECTED (
16:21:03 231  /*
16:21:03 232  Throws:
16:21:03 233  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 234  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 235  Returns:
16:21:03 236  GLOBAL_CONST.TRUE if transaction collected,
16:21:03 237  GLOBAL_CONST.FALSE else
16:21:03 238  */
16:21:03 239  	in_transaction_id IN NUMBER
16:21:03 240  ) RETURN NUMBER;
16:21:03 241  
16:21:03 242  PROCEDURE GET_ATTEMPT_NUMBER (
16:21:03 243  /*
16:21:03 244  Throws exceptions:
16:21:03 245  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 246  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 247  */
16:21:03 248  	in_charge_id   in  number,
16:21:03 249  	out_attempt_count out number
16:21:03 250  );
16:21:03 251  
16:21:03 252  END PROCS_TRANSACTION_V16;
16:21:03 253  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.04
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PUBLIC_PROCS_BILLING
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:21:03   4  /*
16:21:03   5  Throws exceptions:
16:21:03   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03   8  */
16:21:03   9  	  in_offer_chain_id IN	 NUMBER,
16:21:03  10  	  out_result_set    OUT  SYS_REFCURSOR
16:21:03  11  );
16:21:03  12  
16:21:03  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
16:21:03  14  /*
16:21:03  15  Throws exceptions:
16:21:03  16  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  18  */
16:21:03  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:03  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
16:21:03  21  );
16:21:03  22  
16:21:03  23  PROCEDURE GET_PENDING_INVOICES (
16:21:03  24  /*
16:21:03  25  Throws exceptions:
16:21:03  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  27  */
16:21:03  28  	out_result_set1      OUT SYS_REFCURSOR,
16:21:03  29  	out_result_set2      OUT SYS_REFCURSOR,
16:21:03  30  	out_result_set3      OUT SYS_REFCURSOR,
16:21:03  31  	in_row_number	     IN NUMBER DEFAULT NULL
16:21:03  32  );
16:21:03  33  
16:21:03  34  PROCEDURE GET_PENDING_REFUND_CHARGES (
16:21:03  35  /*
16:21:03  36  Throws exceptions:
16:21:03  37  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  38  */
16:21:03  39  	out_result_set	    OUT SYS_REFCURSOR,
16:21:03  40  	in_row_number	    IN NUMBER DEFAULT NULL
16:21:03  41  );
16:21:03  42  
16:21:03  43  PROCEDURE GET_UNPROCESSED_CHARGES (
16:21:03  44  /*
16:21:03  45  Throws exceptions:
16:21:03  46  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  47  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  48  */
16:21:03  49  	in_invoice_id  IN NUMBER,
16:21:03  50  	out_result_set OUT SYS_REFCURSOR
16:21:03  51  );
16:21:03  52  
16:21:03  53  PROCEDURE GET_PROCESSED_CHARGES (
16:21:03  54  /*
16:21:03  55  Throws exceptions:
16:21:03  56  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  57  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  58  */
16:21:03  59  	in_invoice_id  IN NUMBER,
16:21:03  60  	out_result_set OUT SYS_REFCURSOR
16:21:03  61  );
16:21:03  62  
16:21:03  63  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
16:21:03  64  /*
16:21:03  65  Throws exceptions:
16:21:03  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  67  */
16:21:03  68  	in_transaction_id	      IN NUMBER,
16:21:03  69  	in_transaction_attempt_status IN NUMBER,
16:21:03  70  	out_result_set		      OUT SYS_REFCURSOR
16:21:03  71  );
16:21:03  72  
16:21:03  73  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
16:21:03  74  /*
16:21:03  75  Throws exceptions:
16:21:03  76  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  77  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  78  */
16:21:03  79  	in_transaction_attempt_id     IN NUMBER,
16:21:03  80  	in_transaction_attempt_status IN NUMBER
16:21:03  81  );
16:21:03  82  
16:21:03  83  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
16:21:03  84  /*
16:21:03  85  Throws exceptions:
16:21:03  86  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  87  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  88  */
16:21:03  89  	in_transaction_attempt_id IN NUMBER,
16:21:03  90  	in_updated_by		  IN VARCHAR2
16:21:03  91  );
16:21:03  92  
16:21:03  93  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
16:21:03  94  /*
16:21:03  95  Throws exceptions:
16:21:03  96  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  97  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  98  */
16:21:03  99  	in_transaction_id	   IN NUMBER,
16:21:03 100  	in_trans_attempt_status    IN NUMBER,
16:21:03 101  	in_external_status_code    IN VARCHAR2,
16:21:03 102  	in_external_status_message IN VARCHAR2,
16:21:03 103  	in_created_by		   IN VARCHAR2,
16:21:03 104  	in_ext_transaction_id	   IN VARCHAR2,
16:21:03 105  	out_transaction_attempt_id OUT NUMBER
16:21:03 106  );
16:21:03 107  
16:21:03 108  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
16:21:03 109  /*
16:21:03 110  Throws exceptions:
16:21:03 111  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 112  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 113  */
16:21:03 114  	in_transaction_attempt_id IN NUMBER,
16:21:03 115  	in_ext_status_code	  IN VARCHAR2,
16:21:03 116  	in_ext_status_message	  IN VARCHAR2,
16:21:03 117  	in_ext_transaction_id	  IN VARCHAR2
16:21:03 118  );
16:21:03 119  
16:21:03 120  PROCEDURE UPDATE_TRANSACTION_STATUS (
16:21:03 121  /*
16:21:03 122  Throws exceptions:
16:21:03 123  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 124  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 125  */
16:21:03 126  	in_transaction_id	 IN NUMBER,
16:21:03 127  	in_updated_by		 IN VARCHAR2,
16:21:03 128  	in_transaction_status_id IN NUMBER
16:21:03 129  );
16:21:03 130  
16:21:03 131  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
16:21:03 132  /*
16:21:03 133  Throws exceptions:
16:21:03 134  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 135  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 136  */
16:21:03 137  	in_transaction_id IN  NUMBER,
16:21:03 138  	out_attempts_num  OUT NUMBER
16:21:03 139  );
16:21:03 140  
16:21:03 141  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
16:21:03 142  /*
16:21:03 143  Throws exceptions:
16:21:03 144  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 145  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 146  */
16:21:03 147  	in_transaction_id IN  NUMBER,
16:21:03 148  	out_is_successfull  OUT NUMBER
16:21:03 149  );
16:21:03 150  
16:21:03 151  PROCEDURE UPDATE_INVOICE_STATUS (
16:21:03 152  /*
16:21:03 153  Throws exceptions:
16:21:03 154  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 155  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 156  */
16:21:03 157  	in_invoice_id		       IN NUMBER,
16:21:03 158  	in_invoice_status_id	       IN NUMBER,
16:21:03 159  	in_updated_by		       IN VARCHAR2
16:21:03 160  );
16:21:03 161  
16:21:03 162  PROCEDURE SUSPEND_SUBSCRIPTION(
16:21:03 163  /*
16:21:03 164  Throws exceptions:
16:21:03 165  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 166  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 167  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 168  */
16:21:03 169  	  in_subs_id	IN NUMBER ,
16:21:03 170  	  in_updated_by IN VARCHAR2
16:21:03 171  );
16:21:03 172  
16:21:03 173  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:21:03 174  /*
16:21:03 175  Throws exceptions:
16:21:03 176  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 177  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 178  */
16:21:03 179  	in_credit_card_id IN  NUMBER,
16:21:03 180  	out_result_set	  OUT SYS_REFCURSOR
16:21:03 181  );
16:21:03 182  
16:21:03 183  PROCEDURE GET_TRANSACTION_AMOUNT (
16:21:03 184  /*
16:21:03 185  Throws exceptions:
16:21:03 186  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 188  */
16:21:03 189  	in_transaction_id      IN  NUMBER,
16:21:03 190  	out_transaction_amount OUT NUMBER
16:21:03 191  );
16:21:03 192  
16:21:03 193  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
16:21:03 194  /*
16:21:03 195  Throws exceptions:
16:21:03 196  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 198  */
16:21:03 199  	in_invoice_id  IN  NUMBER,
16:21:03 200  	out_account_id OUT NUMBER
16:21:03 201  );
16:21:03 202  
16:21:03 203  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
16:21:03 204  /*
16:21:03 205  Throws exceptions:
16:21:03 206  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:03 207  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 208  */
16:21:03 209  	in_gift_certificate_id IN NUMBER,
16:21:03 210  	out_result_set	       OUT SYS_REFCURSOR
16:21:03 211  );
16:21:03 212  
16:21:03 213  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
16:21:03 214  /*
16:21:03 215  Throws exceptions:
16:21:03 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 218  */
16:21:03 219  	in_charge_id	    IN NUMBER,
16:21:03 220  	out_subscription_id OUT NUMBER
16:21:03 221  );
16:21:03 222  
16:21:03 223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
16:21:03 224  /*
16:21:03 225  Throws exceptions:
16:21:03 226  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 227  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 228  */
16:21:03 229  	in_gift_certificate_id IN NUMBER,
16:21:03 230  	in_charge_id	       IN NUMBER,
16:21:03 231  	out_result	       OUT NUMBER
16:21:03 232  );
16:21:03 233  
16:21:03 234  PROCEDURE GET_SUBSCRIPTION_INFO (
16:21:03 235  /*
16:21:03 236  Throws exceptions:
16:21:03 237  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 238  */
16:21:03 239  	  in_subscription_id IN  NUMBER,
16:21:03 240  	  out_result_set      OUT SYS_REFCURSOR
16:21:03 241  );
16:21:03 242  
16:21:03 243  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:21:03 244  /*
16:21:03 245  Throws exceptions:
16:21:03 246  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 247  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 248  */
16:21:03 249  	in_invoice_id IN  NUMBER,
16:21:03 250  	out_amount    OUT NUMBER
16:21:03 251  );
16:21:03 252  
16:21:03 253  PROCEDURE GET_TRANSACTION_BY_ID (
16:21:03 254  /*
16:21:03 255  Throws exceptions:
16:21:03 256  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 257  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 258  */
16:21:03 259  	in_transaction_id IN NUMBER,
16:21:03 260  	out_result_set	  OUT SYS_REFCURSOR
16:21:03 261  );
16:21:03 262  
16:21:03 263  PROCEDURE UPDATE_CHARGE_STATUS (
16:21:03 264  /*
16:21:03 265  Throws exceptions:
16:21:03 266  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 267  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 268  */
16:21:03 269  	in_charge_id	    IN CHARGE.ID%TYPE,
16:21:03 270  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:21:03 271  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
16:21:03 272  );
16:21:03 273  
16:21:03 274  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:21:03 275  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:03 276  	out_result_set OUT SYS_REFCURSOR
16:21:03 277  );
16:21:03 278  
16:21:03 279  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:21:03 280  /*
16:21:03 281  Throws exceptions:
16:21:03 282  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 283  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
16:21:03 284  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 285  */
16:21:03 286  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:21:03 287  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:21:03 288  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:21:03 289  );
16:21:03 290  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
16:21:03 291  /*
16:21:03 292  Throws exceptions:
16:21:03 293  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 294  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 295  */
16:21:03 296  	in_invoice_id	IN  NUMBER,
16:21:03 297  	out_result_set OUT SYS_REFCURSOR
16:21:03 298  );
16:21:03 299  PROCEDURE GET_ACTIVE_INVOICES_IDS (
16:21:03 300  /*
16:21:03 301  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 302  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 303  */
16:21:03 304  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
16:21:03 305  	in_subscription_id IN NUMBER,
16:21:03 306  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 307  );
16:21:03 308  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
16:21:03 309  /*
16:21:03 310  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 312  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 313  */
16:21:03 314  --  in_invoice_id        IN INVOICE.ID%TYPE,
16:21:03 315  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
16:21:03 316  -- norlov: in_refundable	      IN refund enabled
16:21:03 317  	in_invoice_id	     IN NUMBER,
16:21:03 318  	in_updated_by	     IN VARCHAR2,
16:21:03 319  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:03 320  --  in_cancellation_date IN DATE DEFAULT current_timestamp
16:21:03 321  );
16:21:03 322  
16:21:03 323  PROCEDURE FINALIZE_CANCELATION (
16:21:03 324  /*
16:21:03 325  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 326  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 327  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 328  */
16:21:03 329  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
16:21:03 330  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
16:21:03 331  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:21:03 332  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:21:03 333  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:21:03 334  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
16:21:03 335  	in_subscription_id    IN NUMBER,
16:21:03 336  	in_cancelation_reason IN VARCHAR2,
16:21:03 337  	in_cancelation_date   IN DATE,
16:21:03 338  	in_note 	      IN VARCHAR2,
16:21:03 339  	in_agent_id	      IN NUMBER,
16:21:03 340  	in_updated_by	      IN VARCHAR2
16:21:03 341  );
16:21:03 342  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
16:21:03 343  /*
16:21:03 344  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 345  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 346  */
16:21:03 347  	in_subscription_id IN NUMBER,
16:21:03 348  	out_result_set	   OUT SYS_REFCURSOR
16:21:03 349  );
16:21:03 350  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:21:03 351  /*
16:21:03 352  Throws exceptions (codes):
16:21:03 353  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 354  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 355  */
16:21:03 356  	in_offer_chain_id IN NUMBER,
16:21:03 357  	in_meta_data_name IN VARCHAR2,
16:21:03 358  	out_result_set	  OUT SYS_REFCURSOR
16:21:03 359  );
16:21:03 360  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:21:03 361  /*
16:21:03 362  Throws exceptions (codes):
16:21:03 363  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 364  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 365  */
16:21:03 366  	in_product_offering_id IN NUMBER,
16:21:03 367  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:21:03 368  	out_result_set	       OUT SYS_REFCURSOR
16:21:03 369  );
16:21:03 370  PROCEDURE READ_ACCOUNT (
16:21:03 371  	in_account_id  IN ACCOUNT.ID%TYPE,
16:21:03 372  	out_result_set OUT SYS_REFCURSOR
16:21:03 373  );
16:21:03 374  
16:21:03 375  PROCEDURE GET_COLLECTED_CHARGES (
16:21:03 376  /*
16:21:03 377  Throws exceptions:
16:21:03 378  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 379  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 380  */
16:21:03 381  	in_invoice_id  IN NUMBER,
16:21:03 382  	out_result_set OUT SYS_REFCURSOR
16:21:03 383  );
16:21:03 384  
16:21:03 385  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
16:21:03 386  /*
16:21:03 387  Throws exceptions:
16:21:03 388  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:03 389  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 390  */
16:21:03 391  	in_invoice_id IN NUMBER,
16:21:03 392  	out_group_ids OUT SYS_REFCURSOR
16:21:03 393  );
16:21:03 394  
16:21:03 395  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:21:03 396  /*
16:21:03 397  Throws exceptions:
16:21:03 398  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:03 399  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 400  */
16:21:03 401  	in_group_id IN NUMBER,
16:21:03 402  	out_account_id	OUT NUMBER
16:21:03 403  );
16:21:03 404  
16:21:03 405  PROCEDURE LOCK_ACCOUNT (
16:21:03 406  	in_group_id    IN NUMBER,
16:21:03 407  	in_lock_key    IN VARCHAR2,
16:21:03 408  	in_seconds_num IN NUMBER,
16:21:03 409  	in_created_by  IN VARCHAR2,
16:21:03 410  	in_reason      IN VARCHAR2
16:21:03 411  );
16:21:03 412  
16:21:03 413  PROCEDURE RELEASE_LOCK (
16:21:03 414  	in_group_id IN NUMBER,
16:21:03 415  	in_lock_key IN VARCHAR2
16:21:03 416  );
16:21:03 417  
16:21:03 418  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
16:21:03 419  	in_invoice_id		    IN NUMBER,
16:21:03 420  	out_order_id		    OUT VARCHAR2,
16:21:03 421  	out_external_transaction_id OUT VARCHAR2
16:21:03 422  );
16:21:03 423  
16:21:03 424  PROCEDURE GET_PAYPAL_BY_ID (
16:21:03 425  	in_paypal_id   IN  NUMBER,
16:21:03 426  	out_result_set OUT SYS_REFCURSOR
16:21:03 427  );
16:21:03 428  
16:21:03 429  PROCEDURE GET_ATTEMPT_NUMBER (
16:21:03 430  /*
16:21:03 431  Throws exceptions:
16:21:03 432  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 433  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 434  */
16:21:03 435  	in_charge_id   in  number,
16:21:03 436  	out_attempt_count out number
16:21:03 437  );
16:21:03 438  
16:21:03 439  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:21:03 440  	in_offer_chain_id	 IN NUMBER,
16:21:03 441  	in_action_name		 IN VARCHAR2,
16:21:03 442  	out_notification_type_id out number
16:21:03 443  );
16:21:03 444  
16:21:03 445  END PUBLIC_PROCS_BILLING_V16;
16:21:03 446  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.08
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE LOCK_ACCOUNT (
16:21:03   4  	in_group_id    IN NUMBER,
16:21:03   5  	in_lock_key    IN VARCHAR2,
16:21:03   6  	in_seconds_num IN NUMBER,
16:21:03   7  	in_created_by  IN VARCHAR2,
16:21:03   8  	in_reason      IN VARCHAR2
16:21:03   9  );
16:21:03  10  
16:21:03  11  PROCEDURE RELEASE_LOCK (
16:21:03  12  	in_group_id IN NUMBER,
16:21:03  13  	in_lock_key IN VARCHAR2
16:21:03  14  );
16:21:03  15  
16:21:03  16  END PUBLIC_PROCS_NOTIFICATION_V16;
16:21:03  17  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.09
16:21:03 SQL> 
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
16:21:03 SQL> --------------------------------------------------------------------------------
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
16:21:03   4  	out_result_set OUT SYS_REFCURSOR
16:21:03   5  );
16:21:03   6  
16:21:03   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
16:21:03   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
16:21:03   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
16:21:03  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:03  11  );
16:21:03  12  
16:21:03  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:21:03  14  /*
16:21:03  15  Throws exceptions:
16:21:03  16  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  18  */
16:21:03  19  	  in_offer_chain_id IN	 NUMBER,
16:21:03  20  	  out_result_set    OUT  SYS_REFCURSOR
16:21:03  21  );
16:21:03  22  
16:21:03  23  PROCEDURE GET_UNREDEEMED_GCS (
16:21:03  24  	out_result_set		OUT SYS_REFCURSOR,
16:21:03  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:21:03  26  	in_num_rows		IN NUMBER DEFAULT 10000,
16:21:03  27  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:03  28  );
16:21:03  29  
16:21:03  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
16:21:03  31  /*
16:21:03  32  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:03  33  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  34  */
16:21:03  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
16:21:03  36  	out_result_set	     OUT SYS_REFCURSOR
16:21:03  37  );
16:21:03  38  
16:21:03  39  PROCEDURE GET_ALL_OCH_META_DATA (
16:21:03  40  	in_offer_chain_id IN NUMBER,
16:21:03  41  	out_result_set	  OUT SYS_REFCURSOR
16:21:03  42  );
16:21:03  43  
16:21:03  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:21:03  45  /*
16:21:03  46  Throws exceptions (codes):
16:21:03  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  49  */
16:21:03  50  	in_offer_chain_id IN NUMBER,
16:21:03  51  	in_meta_data_name IN VARCHAR2,
16:21:03  52  	out_result_set	  OUT SYS_REFCURSOR
16:21:03  53  );
16:21:03  54  
16:21:03  55  PROCEDURE GET_ENDING_LICENSES (
16:21:03  56  /*
16:21:03  57  Throws exceptions:
16:21:03  58  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  59  */
16:21:03  60  	in_hours_number IN NUMBER,
16:21:03  61  	out_result_set OUT SYS_REFCURSOR
16:21:03  62  );
16:21:03  63  
16:21:03  64  PROCEDURE GET_ENDING_LICENSES_CC (
16:21:03  65  /*
16:21:03  66  Throws exceptions:
16:21:03  67  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  68  */
16:21:03  69  	in_hours_number IN NUMBER,
16:21:03  70  	out_result_set OUT SYS_REFCURSOR,
16:21:03  71  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:03  72  );
16:21:03  73  
16:21:03  74  /************************************************/
16:21:03  75  
16:21:03  76  PROCEDURE GET_RECURRING_OFFER (
16:21:03  77  /*
16:21:03  78  Throws exceptions:
16:21:03  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  80  */
16:21:03  81  	in_license_id  IN NUMBER,
16:21:03  82  	out_result_set OUT SYS_REFCURSOR
16:21:03  83  );
16:21:03  84  
16:21:03  85  /*************************************************/
16:21:03  86  
16:21:03  87  PROCEDURE GET_NEXT_OFFER (
16:21:03  88  /*
16:21:03  89  Throws exceptions:
16:21:03  90  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03  91  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03  92  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03  93  */
16:21:03  94  	in_license_id  IN NUMBER,
16:21:03  95  	out_result_set OUT SYS_REFCURSOR
16:21:03  96  );
16:21:03  97  
16:21:03  98  /**************************************************/
16:21:03  99  
16:21:03 100  PROCEDURE UPDATE_LICENSE_STATUS(
16:21:03 101  /*
16:21:03 102  Throws exceptions:
16:21:03 103  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 104  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 105  */
16:21:03 106  	  in_license_id     IN NUMBER,
16:21:03 107  	  in_license_status IN NUMBER,
16:21:03 108  	  in_updated_by     IN VARCHAR2
16:21:03 109  );
16:21:03 110  
16:21:03 111  /***************************************************/
16:21:03 112  
16:21:03 113  PROCEDURE UPDATE_INVOICE_STATUS (
16:21:03 114  /*
16:21:03 115  Throws exceptions:
16:21:03 116  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 117  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 118  */
16:21:03 119  	in_invoice_id		       IN NUMBER,
16:21:03 120  	in_invoice_status_id	       IN NUMBER,
16:21:03 121  	in_updated_by		       IN VARCHAR2
16:21:03 122  );
16:21:03 123  
16:21:03 124  /***************************************************/
16:21:03 125  
16:21:03 126  PROCEDURE CREATE_LICENSE(
16:21:03 127  /*
16:21:03 128  Throws exceptions:
16:21:03 129  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 130  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 131  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:03 132  */
16:21:03 133  	in_status_id		    IN NUMBER,
16:21:03 134  	in_needs_entitlements	    IN NUMBER,
16:21:03 135  	in_start_date		    IN DATE,
16:21:03 136  	in_end_date		    IN DATE,
16:21:03 137  	in_offer_id		    IN NUMBER,
16:21:03 138  	in_subscription_id	    IN NUMBER,
16:21:03 139  	in_invoice_id		    IN NUMBER,
16:21:03 140  	in_created_by		    IN VARCHAR2,
16:21:03 141  	in_is_extension 	    IN NUMBER,
16:21:03 142  	in_current_offer_index	    IN NUMBER,
16:21:03 143  	in_current_offer_recurr_num IN NUMBER,
16:21:03 144  	out_license_id		    OUT NUMBER
16:21:03 145  );
16:21:03 146  
16:21:03 147  /**************************************************/
16:21:03 148  
16:21:03 149  PROCEDURE CREATE_INVOICE(
16:21:03 150  /*
16:21:03 151  Throws exceptions:
16:21:03 152  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 153  */
16:21:03 154  	  in_invoice_status IN NUMBER,
16:21:03 155  	  in_created_by     IN VARCHAR2,
16:21:03 156  	  in_tax_exempt_id  IN VARCHAR2,
16:21:03 157  	  out_invoice_id    OUT NUMBER
16:21:03 158  );
16:21:03 159  
16:21:03 160  /*****************************************************/
16:21:03 161  
16:21:03 162  PROCEDURE CREATE_CHARGE(
16:21:03 163  /*
16:21:03 164  Throws exceptions:
16:21:03 165  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 166  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 167  */
16:21:03 168  	in_invoice_id	      IN NUMBER,
16:21:03 169  	in_transaction_id     IN NUMBER,
16:21:03 170  	in_instrument_type_id IN NUMBER,
16:21:03 171  	in_instrument_id      IN NUMBER,
16:21:03 172  	in_charge_amount      IN NUMBER,
16:21:03 173  	in_created_by	      IN VARCHAR2,
16:21:03 174  	in_charge_status_id   IN NUMBER,
16:21:03 175  	out_charge_id	      OUT NUMBER
16:21:03 176  );
16:21:03 177  
16:21:03 178  /*****************************************************/
16:21:03 179  
16:21:03 180  PROCEDURE HAS_FUTURE_LICENSE (
16:21:03 181  /*
16:21:03 182  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 183  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 184  --
16:21:03 185  RETURNS:
16:21:03 186  1 - if has,
16:21:03 187  0 - else
16:21:03 188  */
16:21:03 189  	in_license_id IN NUMBER,
16:21:03 190  	out_result	   OUT NUMBER
16:21:03 191  );
16:21:03 192  
16:21:03 193  /*****************************************************/
16:21:03 194  
16:21:03 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
16:21:03 196  /*
16:21:03 197  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 198  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 199  */
16:21:03 200  	in_license_id IN NUMBER,
16:21:03 201  	out_group_id  OUT NUMBER
16:21:03 202  );
16:21:03 203  
16:21:03 204  /*****************************************************/
16:21:03 205  
16:21:03 206  PROCEDURE GET_OFFER_PRODUCTS (
16:21:03 207  /*
16:21:03 208  Throws exceptions (codes):
16:21:03 209  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 210  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 211  */
16:21:03 212  	in_offer_id    IN NUMBER,
16:21:03 213  	out_result_set OUT SYS_REFCURSOR
16:21:03 214  );
16:21:03 215  
16:21:03 216  /*******************************************************/
16:21:03 217  
16:21:03 218  PROCEDURE CREATE_TRANSACTION (
16:21:03 219  /*
16:21:03 220  Throws exceptions:
16:21:03 221  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 222  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 223  */
16:21:03 224  	in_transaction_id  IN NUMBER,
16:21:03 225  	in_status_id	   IN NUMBER,
16:21:03 226  	in_amount	   IN NUMBER,
16:21:03 227  	in_created_by	   IN VARCHAR2,
16:21:03 228  	in_order_id	   IN VARCHAR2,
16:21:03 229  	out_transaction_id OUT NUMBER
16:21:03 230  );
16:21:03 231  
16:21:03 232  /*********************************************************/
16:21:03 233  
16:21:03 234  PROCEDURE ADD_LINE_ITEMS(
16:21:03 235  /*
16:21:03 236  Throws exceptions:
16:21:03 237  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 239  */
16:21:03 240  	in_invoice_id IN NUMBER,
16:21:03 241  	in_offer_id   IN NUMBER,
16:21:03 242  	in_created_by IN VARCHAR2
16:21:03 243  );
16:21:03 244  
16:21:03 245  /**********************************************************/
16:21:03 246  
16:21:03 247  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:21:03 248  /*
16:21:03 249  Throws exceptions:
16:21:03 250  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 251  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 252  */
16:21:03 253  	in_invoice_id IN  NUMBER,
16:21:03 254  	out_amount    OUT NUMBER
16:21:03 255  );
16:21:03 256  
16:21:03 257  /*********************************************************/
16:21:03 258  
16:21:03 259  PROCEDURE RESERVE_TRANSACTION_ID (
16:21:03 260  /*
16:21:03 261  Throws exceptions:
16:21:03 262  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 263  */
16:21:03 264  	out_transaction_id OUT NUMBER
16:21:03 265  );
16:21:03 266  
16:21:03 267  /**********************************************************/
16:21:03 268  
16:21:03 269  PROCEDURE P_GET_NEXT_OFFER_INDEX (
16:21:03 270  	in_offer_chain_id	     IN NUMBER,
16:21:03 271  	in_offer_chain_current_index IN NUMBER,
16:21:03 272  	out_next_offer_index	     OUT NUMBER
16:21:03 273  );
16:21:03 274  
16:21:03 275  /***********************************************************/
16:21:03 276  
16:21:03 277  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
16:21:03 278  	in_license_id		     IN NUMBER,
16:21:03 279  	in_offer_chain_current_index IN NUMBER,
16:21:03 280  	out_next_offer_index	     OUT NUMBER
16:21:03 281  );
16:21:03 282  
16:21:03 283  /**********************************************************/
16:21:03 284  
16:21:03 285  PROCEDURE GET_SUBSCRIPTION_INFO (
16:21:03 286  /*
16:21:03 287  Throws exceptions:
16:21:03 288  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 289  */
16:21:03 290  	  in_subscription_id IN  NUMBER,
16:21:03 291  	  out_result_set      OUT SYS_REFCURSOR
16:21:03 292  );
16:21:03 293  
16:21:03 294  /***********************************************************/
16:21:03 295  
16:21:03 296  PROCEDURE CLOSE_SUBSCRIPTION (
16:21:03 297  	in_subscription_id IN NUMBER,
16:21:03 298  	in_updated_by	   IN VARCHAR2
16:21:03 299  );
16:21:03 300  
16:21:03 301  /***********************************************************/
16:21:03 302  
16:21:03 303  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
16:21:03 304  	out_result_set OUT SYS_REFCURSOR
16:21:03 305  );
16:21:03 306  
16:21:03 307  /***********************************************************/
16:21:03 308  
16:21:03 309  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
16:21:03 310  	in_license_id	      IN NUMBER,
16:21:03 311  	in_needs_entitlements IN NUMBER,
16:21:03 312  	in_updated_by	      IN VARCHAR2
16:21:03 313  );
16:21:03 314  /***********************************************************/
16:21:03 315  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
16:21:03 316  	in_offer_id    IN NUMBER,
16:21:03 317  	out_result_set OUT SYS_REFCURSOR
16:21:03 318  );
16:21:03 319  /***********************************************************/
16:21:03 320  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:21:03 321  	in_product_offering_id IN NUMBER,
16:21:03 322  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:21:03 323  	out_result_set	       OUT SYS_REFCURSOR
16:21:03 324  );
16:21:03 325  
16:21:03 326  PROCEDURE LOCK_ACCOUNT (
16:21:03 327  	in_group_id    IN NUMBER,
16:21:03 328  	in_lock_key    IN VARCHAR2,
16:21:03 329  	in_seconds_num IN NUMBER,
16:21:03 330  	in_created_by  IN VARCHAR2,
16:21:03 331  	in_reason      IN VARCHAR2
16:21:03 332  );
16:21:03 333  
16:21:03 334  PROCEDURE RELEASE_LOCK (
16:21:03 335  	in_group_id IN NUMBER,
16:21:03 336  	in_lock_key IN VARCHAR2
16:21:03 337  );
16:21:03 338  
16:21:03 339  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:21:03 340  	in_invoice_id  IN NUMBER,
16:21:03 341  	out_result_set OUT SYS_REFCURSOR
16:21:03 342  );
16:21:03 343  
16:21:03 344  PROCEDURE ADD_TAX (
16:21:03 345  	in_tax_type_id		 IN NUMBER,
16:21:03 346  	in_calculated_amount	 IN NUMBER,
16:21:03 347  	in_created_by		 IN VARCHAR2,
16:21:03 348  	in_line_item_id 	 IN NUMBER,
16:21:03 349  	in_effective_rate	 IN VARCHAR2,
16:21:03 350  	in_taxable_amount	 IN NUMBER,
16:21:03 351  	in_tax_rule_id		 IN NUMBER,
16:21:03 352  	in_jurisdiction_level_id IN NUMBER,
16:21:03 353  	in_jurisdiction_name	 IN VARCHAR2,
16:21:03 354  	in_jurisdiction_id	 IN VARCHAR2,
16:21:03 355  	in_ext_tax_type 	 IN VARCHAR2,
16:21:03 356  	in_ext_result		 IN VARCHAR2,
16:21:03 357  	in_imposition_type	 IN VARCHAR2,
16:21:03 358  	in_imposition		 IN VARCHAR2
16:21:03 359  );
16:21:03 360  
16:21:03 361  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:21:03 362  	in_credit_card_id IN  NUMBER,
16:21:03 363  	out_result_set	  OUT SYS_REFCURSOR
16:21:03 364  );
16:21:03 365  
16:21:03 366  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
16:21:03 367  	in_line_item_id IN NUMBER,
16:21:03 368  	out_result_set	OUT SYS_REFCURSOR
16:21:03 369  );
16:21:03 370  
16:21:03 371  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:21:03 372  /*
16:21:03 373  Throws exceptions:
16:21:03 374  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:03 375  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 376  */
16:21:03 377  	in_group_id IN NUMBER,
16:21:03 378  	out_account_id	OUT NUMBER
16:21:03 379  );
16:21:03 380  
16:21:03 381  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
16:21:03 382  /*
16:21:03 383  Throws exceptions:
16:21:03 384  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:03 385  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03 386  */
16:21:03 387  	in_line_item_id IN  NUMBER,
16:21:03 388  	out_result_set	OUT SYS_REFCURSOR
16:21:03 389  );
16:21:03 390  
16:21:03 391  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
16:21:03 392  	in_line_item_id    IN NUMBER,
16:21:03 393  	in_amount	   IN NUMBER,
16:21:03 394  	in_discount_amount IN NUMBER,
16:21:03 395  	in_taxes_amount    IN NUMBER
16:21:03 396  );
16:21:03 397  
16:21:03 398  PROCEDURE GET_PAYPAL_BY_ID (
16:21:03 399  	in_paypal_id   IN  NUMBER,
16:21:03 400  	out_result_set OUT SYS_REFCURSOR
16:21:03 401  );
16:21:03 402  
16:21:03 403  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:21:03 404  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:03 405  	out_result_set OUT SYS_REFCURSOR
16:21:03 406  );
16:21:03 407  
16:21:03 408  PROCEDURE GET_LICENSE_BY_ID (
16:21:03 409  	in_license_id  IN NUMBER,
16:21:03 410  	out_result_set OUT SYS_REFCURSOR
16:21:03 411  );
16:21:03 412  
16:21:03 413  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:21:03 414  	in_offer_chain_id	 IN NUMBER,
16:21:03 415  	in_action_name		 IN VARCHAR2,
16:21:03 416  	out_notification_type_id OUT NUMBER
16:21:03 417  );
16:21:03 418  
16:21:03 419  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
16:21:03 420  	in_offer_chain_id IN NUMBER,
16:21:03 421  	in_meta_data_name IN VARCHAR2,
16:21:03 422  	out_value	  OUT VARCHAR2
16:21:03 423  );
16:21:03 424  
16:21:03 425  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
16:21:03 426  	out_result_set	    OUT SYS_REFCURSOR
16:21:03 427  );
16:21:03 428  
16:21:03 429  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
16:21:03 430  	out_result_set	    OUT SYS_REFCURSOR
16:21:03 431  );
16:21:03 432  
16:21:03 433  END PUBLIC_PROCS_RENEWAL_V16;
16:21:03 434  .
16:21:03 SQL> /

Package created.

Elapsed: 00:00:00.07
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_ACCOUNT (
16:21:03   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
16:21:03   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
16:21:03   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
16:21:03   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
16:21:03   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
16:21:03   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
16:21:03  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:21:03  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
16:21:03  12  ) AS
16:21:03  13  -- VARIABLES
16:21:03  14  var_new_account_id ACCOUNT.ID%TYPE;
16:21:03  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:03  16  var_date DATE := SYSDATE;
16:21:03  17  BEGIN
16:21:03  18  	SELECT
16:21:03  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
16:21:03  20  	FROM DUAL;
16:21:03  21  	INSERT INTO ACCOUNT (
16:21:03  22  	  ID,
16:21:03  23  	  ACCOUNT_STATUS_ID,
16:21:03  24  	  SUSPEND_DATE,
16:21:03  25  	  GROUP_ID,
16:21:03  26  	  CREATE_DATE,
16:21:03  27  	  CREATED_BY,
16:21:03  28  	  UPDATE_DATE,
16:21:03  29  	  UPDATED_BY,
16:21:03  30  	  SYSTEM_CATEGORY_ID,
16:21:03  31  	  INSTRUMENT_TYPE_ID,
16:21:03  32  	  INSTRUMENT_ID,
16:21:03  33  	  TAX_EXEMPT_ID
16:21:03  34  	) VALUES (
16:21:03  35  	  var_new_account_id,
16:21:03  36  	  in_account_status_id,
16:21:03  37  	  in_suspend_date,
16:21:03  38  	  in_group_id,
16:21:03  39  	  var_date,
16:21:03  40  	  in_created_by,
16:21:03  41  	  var_date,
16:21:03  42  	  in_created_by,
16:21:03  43  	  in_system_category_id,
16:21:03  44  	  in_instrument_type_id,
16:21:03  45  	  in_instrument_id,
16:21:03  46  	  NULL
16:21:03  47  	);
16:21:03  48  
16:21:03  49  	out_account_id := var_new_account_id;
16:21:03  50  END CREATE_ACCOUNT;
16:21:03  51  
16:21:03  52  /*************************************************************/
16:21:03  53  
16:21:03  54  PROCEDURE UPDATE_ACCOUNT (
16:21:03  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
16:21:03  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
16:21:03  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
16:21:03  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
16:21:03  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
16:21:03  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:21:03  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
16:21:03  62  ) AS
16:21:03  63  BEGIN
16:21:03  64  
16:21:03  65  	-- CREATE HISTORY
16:21:03  66  	PROCS_HISTORY_V16.CREATE_ACCOUNT_HISTORY(
16:21:03  67  	  in_account_id 	       => in_account_id,
16:21:03  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:03  69  	);
16:21:03  70  
16:21:03  71  	UPDATE ACCOUNT SET
16:21:03  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
16:21:03  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
16:21:03  74  	  UPDATED_BY	     = in_updated_by,
16:21:03  75  	  UPDATE_DATE	     = SYSDATE,
16:21:03  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
16:21:03  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
16:21:03  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
16:21:03  79  	WHERE
16:21:03  80  	  ACCOUNT.ID = in_account_id;
16:21:03  81  
16:21:03  82  END UPDATE_ACCOUNT;
16:21:03  83  
16:21:03  84  /*************************************************************/
16:21:03  85  
16:21:03  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
16:21:03  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
16:21:03  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
16:21:03  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
16:21:03  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
16:21:03  91  ) AS
16:21:03  92  BEGIN
16:21:03  93  
16:21:03  94  	-- CREATE HISTORY
16:21:03  95  	PROCS_HISTORY_V16.CREATE_ACCOUNT_HISTORY(
16:21:03  96  	  in_account_id 	       => in_account_id,
16:21:03  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:03  98  	);
16:21:03  99  
16:21:03 100  	UPDATE ACCOUNT SET
16:21:03 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
16:21:03 102  	  INSTRUMENT_ID      = in_instrument_id
16:21:03 103  	WHERE
16:21:03 104  	  ACCOUNT.ID = in_account_id;
16:21:03 105  
16:21:03 106  END;
16:21:03 107  
16:21:03 108  /*************************************************************/
16:21:03 109  
16:21:03 110  PROCEDURE READ_ACCOUNT (
16:21:03 111  	in_account_id  IN ACCOUNT.ID%TYPE,
16:21:03 112  	out_result_set OUT SYS_REFCURSOR
16:21:03 113  ) AS
16:21:03 114  BEGIN
16:21:03 115  	OPEN out_result_set FOR
16:21:03 116  	SELECT
16:21:03 117  	  ACCOUNT_STATUS_ID,
16:21:03 118  	  SUSPEND_DATE,
16:21:03 119  	  GROUP_ID
16:21:03 120  	FROM
16:21:03 121  	  ACCOUNT
16:21:03 122  	WHERE
16:21:03 123  	  ID = in_account_id;
16:21:03 124  END READ_ACCOUNT;
16:21:03 125  
16:21:03 126  /*************************************************************/
16:21:03 127  
16:21:03 128  PROCEDURE CREATE_ACCOUNT_NOTE (
16:21:03 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
16:21:03 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
16:21:03 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
16:21:03 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
16:21:03 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
16:21:03 134  ) AS
16:21:03 135  BEGIN
16:21:03 136  	IF inout_account_note_id IS NULL THEN
16:21:03 137  	  SELECT
16:21:03 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
16:21:03 139  	  FROM DUAL;
16:21:03 140  	END IF;
16:21:03 141  	INSERT INTO ACCOUNT_NOTE(
16:21:03 142  	  ID,
16:21:03 143  	  AGENT_ID,
16:21:03 144  	  ACCOUNT_ID,
16:21:03 145  	  NOTE,
16:21:03 146  	  CREATE_DATE,
16:21:03 147  	  CREATED_BY
16:21:03 148  	) VALUES (
16:21:03 149  	  inout_account_note_id,
16:21:03 150  	  in_agent_id,
16:21:03 151  	  in_account_id,
16:21:03 152  	  in_note,
16:21:03 153  	  SYSDATE,
16:21:03 154  	  in_created_by
16:21:03 155  	);
16:21:03 156  END CREATE_ACCOUNT_NOTE;
16:21:03 157  
16:21:03 158  END PROCS_ACCOUNT_CRU_V16;
16:21:03 159  .
16:21:03 SQL> /

Package body created.

Elapsed: 00:00:00.11
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_ADDRESS(
16:21:03   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
16:21:03   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
16:21:03   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:21:03   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:21:03   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:21:03   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:21:03  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:03  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:21:03  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
16:21:03  13  ) AS
16:21:03  14  -- VARIABLES
16:21:03  15  var_address_id ADDRESS.ID%TYPE;
16:21:03  16  var_date DATE := SYSDATE;
16:21:03  17  BEGIN
16:21:03  18  	IF in_address_id IS NULL THEN
16:21:03  19  	  SELECT
16:21:03  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
16:21:03  21  	  FROM DUAL;
16:21:03  22  	ELSE
16:21:03  23  	  var_address_id := in_address_id;
16:21:03  24  	END IF;
16:21:03  25  	INSERT INTO
16:21:03  26  	  ADDRESS (
16:21:03  27  	    ID,
16:21:03  28  	    ADDRESS1,
16:21:03  29  	    ADDRESS2,
16:21:03  30  	    CITY,
16:21:03  31  	    STATE,
16:21:03  32  	    POSTAL_CODE,
16:21:03  33  	    COUNTRY,
16:21:03  34  	    CREATE_DATE,
16:21:03  35  	    CREATED_BY,
16:21:03  36  	    UPDATE_DATE,
16:21:03  37  	    UPDATED_BY
16:21:03  38  	  ) VALUES (
16:21:03  39  	    var_address_id,
16:21:03  40  	    in_address1,
16:21:03  41  	    in_address2,
16:21:03  42  	    in_city,
16:21:03  43  	    in_state,
16:21:03  44  	    in_postal_code,
16:21:03  45  	    in_country,
16:21:03  46  	    var_date,
16:21:03  47  	    in_created_by,
16:21:03  48  	    var_date,
16:21:03  49  	    in_created_by
16:21:03  50  	  );
16:21:03  51  
16:21:03  52  	out_address_id := var_address_id;
16:21:03  53  END CREATE_ADDRESS;
16:21:03  54  
16:21:03  55  PROCEDURE UPDATE_ADDRESS(
16:21:03  56  	in_address_id	      IN ADDRESS.ID%TYPE,
16:21:03  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:21:03  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:21:03  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:21:03  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:21:03  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:03  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:21:03  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
16:21:03  64  ) AS
16:21:03  65  BEGIN
16:21:03  66  
16:21:03  67  	-- Create history
16:21:03  68  	PROCS_HISTORY_V16.CREATE_ADDRESS_HISTORY(
16:21:03  69  	  in_address_id 		=> in_address_id,
16:21:03  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:03  71  	);
16:21:03  72  
16:21:03  73  	UPDATE
16:21:03  74  	  ADDRESS
16:21:03  75  	SET
16:21:03  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
16:21:03  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
16:21:03  78  	  CITY = NVL(in_city, CITY),
16:21:03  79  	  STATE = NVL(in_state, STATE),
16:21:03  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
16:21:03  81  	  COUNTRY = NVL(in_country, COUNTRY),
16:21:03  82  	  UPDATE_DATE = SYSDATE,
16:21:03  83  	  UPDATED_BY = in_updated_by
16:21:03  84  	WHERE
16:21:03  85  	  ID = in_address_id;
16:21:03  86  
16:21:03  87  END UPDATE_ADDRESS;
16:21:03  88  
16:21:03  89  END PROCS_ADDRESS_CRU_V16;
16:21:03  90  .
16:21:03 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_AMAZON_SUB(
16:21:03   4  /*
16:21:03   5  Throws exceptions:
16:21:03   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:03   7  */
16:21:03   8  	  out_id	      OUT NUMBER,
16:21:03   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
16:21:03  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
16:21:03  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
16:21:03  12  ) AS
16:21:03  13  -- VARIABLES
16:21:03  14  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
16:21:03  15  var_current_date	DATE;
16:21:03  16  var_count 	NUMBER;
16:21:03  17  AMAZON_SUB_USED	EXCEPTION;
16:21:03  18  BEGIN
16:21:03  19  
16:21:03  20  	SELECT COUNT(1) INTO var_count
16:21:03  21  	FROM SUBSCRIPTION s, AMAZON_SUB am
16:21:03  22  	WHERE
16:21:03  23  	  am.AMAZON_ID = in_amazon_id
16:21:03  24  	  and am.subscription_id = s.id
16:21:03  25  	  and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
16:21:03  26  
16:21:03  27  	if var_count > 0 then
16:21:03  28  	  raise AMAZON_SUB_USED;
16:21:03  29  	end if;
16:21:03  30  
16:21:03  31  	SELECT
16:21:03  32  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
16:21:03  33  	INTO
16:21:03  34  	  out_id
16:21:03  35  	FROM
16:21:03  36  	  dual
16:21:03  37  	;
16:21:03  38  
16:21:03  39  	SELECT
16:21:03  40  	  sysdate
16:21:03  41  	INTO
16:21:03  42  	  var_current_date
16:21:03  43  	FROM
16:21:03  44  	  dual
16:21:03  45  	;
16:21:03  46  
16:21:03  47  	INSERT INTO CORE_OWNER.AMAZON_SUB
16:21:03  48  	(
16:21:03  49  	  id,
16:21:03  50  	  subscription_id,
16:21:03  51  	  amazon_id,
16:21:03  52  	  create_date,
16:21:03  53  	  created_by,
16:21:03  54  	  update_date,
16:21:03  55  	  updated_by
16:21:03  56  	)
16:21:03  57  	VALUES
16:21:03  58  	(
16:21:03  59  	  out_id,
16:21:03  60  	  in_subscription_id,
16:21:03  61  	  in_amazon_id,
16:21:03  62  	  var_current_date,
16:21:03  63  	  in_created_by,
16:21:03  64  	  var_current_date,
16:21:03  65  	  in_created_by
16:21:03  66  	);
16:21:03  67  
16:21:03  68  EXCEPTION
16:21:03  69  WHEN AMAZON_SUB_USED THEN
16:21:03  70  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:03  71  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
16:21:03  72  WHEN DUP_VAL_ON_INDEX THEN
16:21:03  73  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:03  74  	  SPROC_NAME, 'Duplicate value', SQLERRM);
16:21:03  75  WHEN OTHERS THEN
16:21:03  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:03  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:03  78  END CREATE_AMAZON_SUB;
16:21:03  79  
16:21:03  80  END PROCS_AMAZON_CRU_V16;
16:21:03  81  .
16:21:03 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_CHARGE(
16:21:03   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
16:21:03   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
16:21:03   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
16:21:03   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
16:21:03   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
16:21:03   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
16:21:03  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
16:21:03  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:21:03  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
16:21:03  13  ) AS
16:21:03  14  -- VARIABLES
16:21:03  15  var_charge_id CHARGE.ID%TYPE;
16:21:03  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:03  17  var_date DATE := SYSDATE;
16:21:03  18  BEGIN
16:21:03  19  	IF in_charge_id IS NULL THEN
16:21:03  20  	  SELECT
16:21:03  21  	    CRG_ID_SEQ.nextVal into var_charge_id
16:21:03  22  	  FROM DUAL;
16:21:03  23  	ELSE
16:21:03  24  	  var_charge_id := in_charge_id;
16:21:03  25  	END IF;
16:21:03  26  	INSERT INTO
16:21:03  27  	  CHARGE (
16:21:03  28  	    ID,
16:21:03  29  	    INVOICE_ID,
16:21:03  30  	    TRANSACTION_ID,
16:21:03  31  	    INSTRUMENT_TYPE_ID,
16:21:03  32  	    INSTRUMENT_ID,
16:21:03  33  	    CHARGE_AMOUNT,
16:21:03  34  	    CHARGE_STATUS_ID,
16:21:03  35  	    CREATE_DATE,
16:21:03  36  	    CREATED_BY,
16:21:03  37  	    UPDATE_DATE,
16:21:03  38  	    UPDATED_BY
16:21:03  39  	  ) VALUES (
16:21:03  40  	    var_charge_id,
16:21:03  41  	    in_invoice_id,
16:21:03  42  	    in_transaction_id,
16:21:03  43  	    in_instrument_type_id,
16:21:03  44  	    in_instrument_id,
16:21:03  45  	    in_charge_amount,
16:21:03  46  	    in_charge_status_id,
16:21:03  47  	    var_date,
16:21:03  48  	    in_created_by,
16:21:03  49  	    var_date,
16:21:03  50  	    in_created_by
16:21:03  51  	  );
16:21:03  52  
16:21:03  53  	out_charge_id := var_charge_id;
16:21:03  54  END CREATE_CHARGE;
16:21:03  55  
16:21:03  56  PROCEDURE UPDATE_CHARGE(
16:21:03  57  	in_charge_id	      IN CHARGE.ID%TYPE,
16:21:03  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:21:03  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
16:21:03  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
16:21:03  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
16:21:03  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
16:21:03  63  ) AS
16:21:03  64  BEGIN
16:21:03  65  
16:21:03  66  	-- Create history
16:21:03  67  	PROCS_HISTORY_V16.CREATE_CHARGE_HISTORY(
16:21:03  68  	  in_charge_id		       => in_charge_id,
16:21:03  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:03  70  	);
16:21:03  71  
16:21:03  72  	UPDATE
16:21:03  73  	  CHARGE
16:21:03  74  	SET
16:21:03  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
16:21:03  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
16:21:03  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
16:21:03  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
16:21:03  79  	  UPDATE_DATE	     = SYSDATE,
16:21:03  80  	  UPDATED_BY	     = in_updated_by
16:21:03  81  	WHERE
16:21:03  82  	  ID = in_charge_id;
16:21:03  83  
16:21:03  84  END UPDATE_CHARGE;
16:21:03  85  
16:21:03  86  END PROCS_CHARGE_CRU_V16;
16:21:03  87  .
16:21:03 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:21:03 SQL> 
16:21:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V16" AS
16:21:03   2  
16:21:03   3  PROCEDURE CREATE_CREDIT_CARD(
16:21:03   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
16:21:03   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
16:21:03   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
16:21:03   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
16:21:03   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
16:21:03   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
16:21:03  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
16:21:03  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
16:21:03  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
16:21:03  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
16:21:03  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
16:21:03  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:21:03  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
16:21:03  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
16:21:03  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
16:21:03  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
16:21:03  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
16:21:03  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
16:21:03  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
16:21:03  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
16:21:03  24  ) AS
16:21:03  25  -- VARIABLES
16:21:03  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
16:21:03  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:03  28  var_date DATE := SYSDATE;
16:21:03  29  BEGIN
16:21:03  30  	IF in_credit_card_id IS NULL THEN
16:21:03  31  	  SELECT
16:21:03  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
16:21:03  33  	  FROM DUAL;
16:21:03  34  	ELSE
16:21:03  35  	  var_credit_card_id := in_credit_card_id;
16:21:03  36  	END IF;
16:21:03  37  	INSERT INTO CREDIT_CARD(
16:21:03  38  	    ID,
16:21:03  39  	    ACCOUNT_ID,
16:21:03  40  	    INSTRUMENT_NAME,
16:21:03  41  	    PRIVATE_CARD_HOLDER_NAME,
16:21:03  42  	    PRIVATE_STREET_ADDRESS,
16:21:03  43  	    PRIVATE_STREET_ADDRESS2,
16:21:03  44  	    STATE,
16:21:03  45  	    CITY,
16:21:03  46  	    POSTAL_CODE,
16:21:03  47  	    COUNTRY,
16:21:03  48  	    LAST_FOUR_CC,
16:21:03  49  	    EXPIRATION_DATE,
16:21:03  50  	    CREDIT_CARD_TYPE_ID,
16:21:03  51  	    SECRET_TOKEN,
16:21:03  52  	    CHASE_PROFILE_ID,
16:21:03  53  	    CREATE_DATE,
16:21:03  54  	    CREATED_BY,
16:21:03  55  	    UPDATE_DATE,
16:21:03  56  	    UPDATED_BY,
16:21:03  57  	    CREDIT_CARD_STATUS_ID,
16:21:03  58  	    PRIVATE_FIRST_NAME,
16:21:03  59  	    PRIVATE_LAST_NAME
16:21:03  60  	  ) VALUES (
16:21:03  61  	    var_credit_card_id,
16:21:03  62  	    in_account_id,
16:21:03  63  	    in_instrument_name,
16:21:03  64  	    in_private_card_holder_name,
16:21:03  65  	    in_private_street_address,
16:21:03  66  	    in_private_street_address2,
16:21:03  67  	    in_state,
16:21:03  68  	    in_city,
16:21:03  69  	    in_postal_code,
16:21:03  70  	    in_country,
16:21:03  71  	    in_last_four_cc,
16:21:03  72  	    in_expiration_date,
16:21:03  73  	    in_credit_card_type_id,
16:21:03  74  	    in_secret_token,
16:21:03  75  	    in_chase_profile_id,
16:21:03  76  	    var_date,
16:21:03  77  	    in_created_by,
16:21:03  78  	    var_date,
16:21:03  79  	    in_created_by,
16:21:03  80  	    in_credit_card_status_id,
16:21:03  81  	    in_private_first_name,
16:21:03  82  	    in_private_last_name
16:21:03  83  	  );
16:21:03  84  
16:21:03  85  	out_credit_card_id := var_credit_card_id;
16:21:03  86  END CREATE_CREDIT_CARD;
16:21:03  87  
16:21:03  88  /******************************************************************************/
16:21:03  89  
16:21:03  90  PROCEDURE UPDATE_CREDIT_CARD(
16:21:03  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
16:21:03  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:21:03  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
16:21:03  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:21:03  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
16:21:03  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
16:21:03  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
16:21:03  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:03  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
16:21:03 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
16:21:03 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:21:03 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
16:21:03 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
16:21:03 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
16:21:03 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
16:21:03 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
16:21:03 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
16:21:03 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
16:21:03 109  ) AS
16:21:03 110  BEGIN
16:21:03 111  
16:21:03 112  	-- Create history
16:21:03 113  	PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
16:21:03 114  	  in_credit_card_id	       => in_credit_card_id,
16:21:03 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:03 116  	);
16:21:03 117  
16:21:03 118  	UPDATE CREDIT_CARD SET
16:21:03 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
16:21:03 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
16:21:03 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
16:21:03 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
16:21:03 123  	  STATE 		   = NVL(in_state, STATE),
16:21:03 124  	  CITY			   = NVL(in_city, CITY),
16:21:03 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
16:21:03 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
16:21:03 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
16:21:03 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
16:21:03 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
16:21:03 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
16:21:03 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
16:21:03 132  	  UPDATE_DATE		   = SYSDATE,
16:21:03 133  	  UPDATED_BY		   = in_updated_by,
16:21:03 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
16:21:03 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
16:21:03 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
16:21:03 137  	WHERE
16:21:03 138  	  ID = in_credit_card_id;
16:21:03 139  
16:21:03 140  END UPDATE_CREDIT_CARD;
16:21:03 141  
16:21:03 142  /******************************************************************************/
16:21:03 143  
16:21:03 144  PROCEDURE CREATE_PAYPAL(
16:21:03 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
16:21:03 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
16:21:03 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
16:21:03 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:21:03 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
16:21:03 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
16:21:03 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
16:21:03 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
16:21:03 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
16:21:03 154  	in_state			IN PAYPAL.STATE%TYPE,
16:21:03 155  	in_city 			IN PAYPAL.CITY%TYPE,
16:21:03 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
16:21:03 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
16:21:03 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
16:21:03 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
16:21:03 160  ) AS
16:21:03 161  -- VARIABLES
16:21:03 162  var_paypal_id PAYPAL.ID%TYPE;
16:21:03 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:03 164  var_date DATE := SYSDATE;
16:21:03 165  BEGIN
16:21:03 166  	IF in_paypal_id IS NULL THEN
16:21:03 167  	  SELECT
16:21:03 168  	    PP_ID_SEQ.nextVal into var_paypal_id
16:21:03 169  	  FROM DUAL;
16:21:03 170  	ELSE
16:21:03 171  	  var_paypal_id := in_paypal_id;
16:21:03 172  	END IF;
16:21:03 173  	INSERT INTO PAYPAL(
16:21:03 174  	    ID,
16:21:03 175  	    ACCOUNT_ID,
16:21:03 176  	    INSTRUMENT_NAME,
16:21:03 177  	    PRIVATE_EMAIL_ADDRESS,
16:21:03 178  	    CREATE_DATE,
16:21:03 179  	    CREATED_BY,
16:21:03 180  	    UPDATE_DATE,
16:21:03 181  	    UPDATED_BY,
16:21:03 182  	    PAYPAL_STATUS_ID,
16:21:03 183  	    PRIVATE_STREET_ADDRESS,
16:21:03 184  	    PRIVATE_STREET_ADDRESS2,
16:21:03 185  	    STATE,
16:21:03 186  	    CITY,
16:21:03 187  	    POSTAL_CODE,
16:21:03 188  	    COUNTRY,
16:21:03 189  	    EXPIRATION_DATE,
16:21:03 190  	    SECRET_TOKEN
16:21:03 191  	  ) VALUES (
16:21:03 192  	    var_paypal_id,
16:21:03 193  	    in_account_id,
16:21:03 194  	    in_instrument_name,
16:21:03 195  	    in_private_email_address,
16:21:03 196  	    var_date,
16:21:03 197  	    in_created_by,
16:21:03 198  	    var_date,
16:21:03 199  	    in_created_by,
16:21:03 200  	    in_paypal_status_id,
16:21:03 201  	    in_paypal_prvt_street_address,
16:21:03 202  	    in_paypal_prvt_street_address2,
16:21:03 203  	    in_state,
16:21:03 204  	    in_city,
16:21:03 205  	    in_postal_code,
16:21:03 206  	    in_country,
16:21:03 207  	    in_expiration_date,
16:21:03 208  	    in_secret_token
16:21:03 209  	  );
16:21:03 210  	out_paypal_id := var_paypal_id;
16:21:03 211  END CREATE_PAYPAL;
16:21:03 212  
16:21:03 213  /******************************************************************************/
16:21:03 214  
16:21:03 215  PROCEDURE UPDATE_PAYPAL(
16:21:03 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
16:21:03 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:21:03 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
16:21:03 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
16:21:03 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
16:21:03 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:21:03 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:21:03 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
16:21:03 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
16:21:03 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:03 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
16:21:03 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:21:03 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
16:21:03 229  ) AS
16:21:03 230  BEGIN
16:21:03 231  	-- Create history
16:21:03 232  	PROCS_HISTORY_V16.CREATE_PAYPAL_HISTORY(
16:21:03 233  	  in_paypal_id		       => in_paypal_id,
16:21:03 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:03 235  	);
16:21:03 236  
16:21:03 237  	UPDATE PAYPAL SET
16:21:03 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
16:21:03 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
16:21:03 240  	  UPDATE_DATE	   = SYSDATE,
16:21:03 241  	  UPDATED_BY	   = in_updated_by,
16:21:03 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
16:21:03 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
16:21:03 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
16:21:03 245  	  STATE 		  = NVL(in_state, STATE),
16:21:03 246  	  CITY			  = NVL(in_city, CITY),
16:21:03 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
16:21:03 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
16:21:03 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
16:21:03 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
16:21:03 251  	WHERE
16:21:03 252  	  ID = in_paypal_id;
16:21:03 253  END UPDATE_PAYPAL;
16:21:03 254  
16:21:03 255  /******************************************************************************/
16:21:03 256  
16:21:03 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
16:21:03 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
16:21:03 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
16:21:03 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
16:21:03 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:03 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
16:21:03 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:21:03 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
16:21:03 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
16:21:03 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
16:21:03 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
16:21:03 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
16:21:03 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
16:21:03 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
16:21:03 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
16:21:03 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
16:21:03 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
16:21:03 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
16:21:03 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
16:21:03 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
16:21:03 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
16:21:03 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
16:21:03 279  ) AS
16:21:03 280  -- VARIABLES
16:21:03 281  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
16:21:03 282  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:03 283  var_date DATE := SYSDATE;
16:21:03 284  BEGIN
16:21:03 285  	IF in_gift_certificate_id IS NULL THEN
16:21:03 286  	  SELECT
16:21:03 287  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
16:21:03 288  	  FROM DUAL;
16:21:03 289  	ELSE
16:21:03 290  	  var_gift_certificate_id := in_gift_certificate_id;
16:21:03 291  	END IF;
16:21:03 292  	INSERT INTO GIFT_CERTIFICATE (
16:21:03 293  	    ID,
16:21:03 294  	    PURCHASER_GROUP_ID,
16:21:03 295  	    PURCHASE_INVOICE_ID,
16:21:03 296  	    OFFER_CHAIN_ID,
16:21:03 297  	    EXPIRATION_DATE,
16:21:03 298  	    PURCHASE_DATE,
16:21:03 299  	    GIFT_CERTIFICATE_STATUS_ID,
16:21:03 300  	    CODE,
16:21:03 301  	    CREATE_DATE,
16:21:03 302  	    CREATED_BY,
16:21:03 303  	    UPDATE_DATE,
16:21:03 304  	    UPDATED_BY,
16:21:03 305  	    RECIPIENT_NAME,
16:21:03 306  	    GIFT_MESSAGE,
16:21:03 307  	    RECIPIENT_EMAIL,
16:21:03 308  	    FINALIZED_INVOICE_ID,
16:21:03 309  	    SENDER_EMAIL,
16:21:03 310  	    SENDER_NAME,
16:21:03 311  	    REDEMPTION_DATE,
16:21:03 312  	    CANCELATION_DATE,
16:21:03 313  	    REDEEMER_GROUP_ID,
16:21:03 314  	    RECIPIENT_ADDRESS_ID,
16:21:03 315  	    RECIPIENT_NOTIFY_DATE
16:21:03 316  	  ) VALUES(
16:21:03 317  	    var_gift_certificate_id,
16:21:03 318  	    in_purchaser_group_id,
16:21:03 319  	    in_purchaser_invoice_id,
16:21:03 320  	    in_offer_chain_id,
16:21:03 321  	    in_expiration_date,
16:21:03 322  	    in_purchase_date,
16:21:03 323  	    in_gift_certificate_status_id,
16:21:03 324  	    in_code,
16:21:03 325  	    var_date,
16:21:03 326  	    in_created_by,
16:21:03 327  	    var_date,
16:21:03 328  	    in_created_by,
16:21:03 329  	    in_recipient_name,
16:21:03 330  	    in_gift_message,
16:21:03 331  	    in_recipient_email,
16:21:03 332  	    in_finalized_invoice_id,
16:21:03 333  	    in_sender_email,
16:21:03 334  	    in_sender_name,
16:21:03 335  	    in_redemption_date,
16:21:03 336  	    in_cancelation_date,
16:21:03 337  	    in_redeemer_group_id,
16:21:03 338  	    in_recipient_address_id,
16:21:03 339  	    in_recipient_notify_date
16:21:03 340  	  );
16:21:03 341  
16:21:03 342  	out_gift_certificate_id := var_gift_certificate_id;
16:21:03 343  END CREATE_GIFT_CERTIFICATE;
16:21:03 344  
16:21:03 345  /******************************************************************************/
16:21:03 346  
16:21:03 347  PROCEDURE UPDATE_GIFT_CERTIFICATE(
16:21:03 348  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
16:21:03 349  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:21:03 350  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
16:21:03 351  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
16:21:03 352  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
16:21:03 353  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
16:21:03 354  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
16:21:03 355  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
16:21:03 356  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
16:21:03 357  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
16:21:03 358  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
16:21:03 359  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
16:21:03 360  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
16:21:03 361  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
16:21:03 362  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
16:21:03 363  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
16:21:03 364  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
16:21:03 365  ) AS
16:21:03 366  BEGIN
16:21:03 367  
16:21:03 368  	-- Create history
16:21:03 369  	PROCS_HISTORY_V16.CREATE_GIFT_CERT_HISTORY(
16:21:03 370  	  in_gift_certificate_id       => in_gift_certificate_id,
16:21:03 371  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:03 372  	);
16:21:03 373  
16:21:03 374  	UPDATE GIFT_CERTIFICATE SET
16:21:03 375  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
16:21:03 376  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
16:21:03 377  	  CODE			     = NVL(in_code, CODE),
16:21:03 378  	  UPDATE_DATE		     = SYSDATE,
16:21:03 379  	  UPDATED_BY		     = in_updated_by,
16:21:03 380  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
16:21:03 381  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
16:21:03 382  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
16:21:03 383  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
16:21:03 384  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
16:21:03 385  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
16:21:03 386  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
16:21:03 387  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
16:21:03 388  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
16:21:03 389  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
16:21:03 390  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
16:21:03 391  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
16:21:03 392  	WHERE
16:21:03 393  	  ID = in_gift_certificate_id;
16:21:03 394  
16:21:03 395  END UPDATE_GIFT_CERTIFICATE;
16:21:03 396  
16:21:03 397  END PROCS_FIN_INSTRUMENTS_CRU_V16;
16:21:03 398  .
16:21:03 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
16:21:04   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
16:21:04   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
16:21:04   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
16:21:04   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
16:21:04   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
16:21:04   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
16:21:04  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
16:21:04  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:04  12  ) AS
16:21:04  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
16:21:04  14  BEGIN
16:21:04  15  	UPDATE SUBSCRIPTION_SHARE SET
16:21:04  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
16:21:04  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
16:21:04  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
16:21:04  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
16:21:04  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
16:21:04  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
16:21:04  22  	  UPDATED_BY	       = in_updated_by,
16:21:04  23  	  UPDATE_DATE	       = SYSDATE
16:21:04  24  	WHERE
16:21:04  25  	  SUBSCRIPTION_SHARE.ID = in_id;
16:21:04  26  EXCEPTION
16:21:04  27  	WHEN OTHERS THEN
16:21:04  28  	  Procs_Common_V16.Throw_Exception(APP_EXCEPTION_CODES_V16.Internal_Error,
16:21:04  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
16:21:04  30  END UPDATE_SUBSCRIPTION_SHARE;
16:21:04  31  
16:21:04  32  PROCEDURE CREATE_GROUP_ACCOUNT (
16:21:04  33  	in_subscription_id	 IN NUMBER,
16:21:04  34  	in_group_name		 IN VARCHAR2,
16:21:04  35  	in_first_name		 IN VARCHAR2,
16:21:04  36  	in_last_name		 IN VARCHAR2,
16:21:04  37  	in_email		 IN VARCHAR2,
16:21:04  38  	in_phone		 IN VARCHAR2,
16:21:04  39  	in_organization_type	 IN VARCHAR2,
16:21:04  40  	in_seats		 IN NUMBER,
16:21:04  41  	in_seat_ttl_in_hours	 IN NUMBER,
16:21:04  42  	in_ip			 IN NUMBER,
16:21:04  43  	in_created_by		 IN VARCHAR2
16:21:04  44  ) AS
16:21:04  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
16:21:04  46  var_now DATE;
16:21:04  47  BEGIN
16:21:04  48  
16:21:04  49  	SELECT
16:21:04  50  	  SYSDATE INTO var_now
16:21:04  51  	FROM dual;
16:21:04  52  
16:21:04  53  	INSERT INTO GROUP_ACCOUNT (
16:21:04  54  	  id,
16:21:04  55  	  subscription_id,
16:21:04  56  	  group_name,
16:21:04  57  	  first_name,
16:21:04  58  	  last_name,
16:21:04  59  	  email,
16:21:04  60  	  phone,
16:21:04  61  	  organization_type,
16:21:04  62  	  seats,
16:21:04  63  	  seat_ttl_in_hours,
16:21:04  64  	  ip,
16:21:04  65  	  create_date,
16:21:04  66  	  created_by,
16:21:04  67  	  update_date,
16:21:04  68  	  updated_by
16:21:04  69  	) VALUES (
16:21:04  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
16:21:04  71  	  in_subscription_id,
16:21:04  72  	  in_group_name,
16:21:04  73  	  in_first_name,
16:21:04  74  	  in_last_name,
16:21:04  75  	  in_email,
16:21:04  76  	  in_phone,
16:21:04  77  	  in_organization_type,
16:21:04  78  	  in_seats,
16:21:04  79  	  in_seat_ttl_in_hours,
16:21:04  80  	  in_ip,
16:21:04  81  	  var_now,
16:21:04  82  	  in_created_by,
16:21:04  83  	  var_now,
16:21:04  84  	  in_created_by
16:21:04  85  	);
16:21:04  86  
16:21:04  87  EXCEPTION
16:21:04  88  	WHEN PROGRAM_ERROR THEN
16:21:04  89  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:04  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
16:21:04  91  	WHEN OTHERS THEN
16:21:04  92  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
16:21:04  94  END CREATE_GROUP_ACCOUNT;
16:21:04  95  
16:21:04  96  
16:21:04  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
16:21:04  98  	in_group_account_id    IN NUMBER,
16:21:04  99  	in_borrower_account_id IN NUMBER,
16:21:04 100  	in_ip_address	       IN VARCHAR2,
16:21:04 101  	in_email_domain        IN VARCHAR2,
16:21:04 102  	in_start_date	       IN DATE,
16:21:04 103  	in_end_date	       IN DATE,
16:21:04 104  	in_created_by	       IN VARCHAR2
16:21:04 105  ) AS
16:21:04 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
16:21:04 107  var_now DATE;
16:21:04 108  BEGIN
16:21:04 109  
16:21:04 110  	SELECT
16:21:04 111  	  SYSDATE INTO var_now
16:21:04 112  	FROM dual;
16:21:04 113  
16:21:04 114  	INSERT INTO SUBSCRIPTION_SHARE (
16:21:04 115  	  id,
16:21:04 116  	  group_account_id,
16:21:04 117  	  borrower_account_id,
16:21:04 118  	  ip_address,
16:21:04 119  	  email_domain,
16:21:04 120  	  start_date,
16:21:04 121  	  end_date,
16:21:04 122  	  create_date,
16:21:04 123  	  created_by,
16:21:04 124  	  update_date,
16:21:04 125  	  updated_by
16:21:04 126  	) VALUES (
16:21:04 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
16:21:04 128  	  in_group_account_id,
16:21:04 129  	  in_borrower_account_id,
16:21:04 130  	  in_ip_address,
16:21:04 131  	  in_email_domain,
16:21:04 132  	  in_start_date,
16:21:04 133  	  in_end_date,
16:21:04 134  	  var_now,
16:21:04 135  	  in_created_by,
16:21:04 136  	  var_now,
16:21:04 137  	  in_created_by
16:21:04 138  	);
16:21:04 139  
16:21:04 140  EXCEPTION
16:21:04 141  	WHEN PROGRAM_ERROR THEN
16:21:04 142  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:04 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
16:21:04 144  END CREATE_SUBSCRIPTION_SHARE;
16:21:04 145  
16:21:04 146  -- Eh, I don't like the cru packages at all
16:21:04 147  -- the idea of code reuse in PL/SQL is still lost on me
16:21:04 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
16:21:04 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:04 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:21:04 151  ) AS
16:21:04 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
16:21:04 153  BEGIN
16:21:04 154  	update
16:21:04 155  	  GROUP_ACCOUNT_IP_RANGE IR
16:21:04 156  	set
16:21:04 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_INACTIVE,
16:21:04 158  	  IR.UPDATED_BY = in_updated_by,
16:21:04 159  	  IR.UPDATE_DATE = sysdate
16:21:04 160  	where
16:21:04 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
16:21:04 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
16:21:04 163  	;
16:21:04 164  EXCEPTION
16:21:04 165  WHEN OTHERS THEN
16:21:04 166  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 168  END DISABLE_IP_RANGES_BY_GA_ID;
16:21:04 169  
16:21:04 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
16:21:04 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
16:21:04 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:21:04 173  ) AS
16:21:04 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
16:21:04 175  BEGIN
16:21:04 176  	update
16:21:04 177  	  GROUP_ACCOUNT_IP_RANGE IR
16:21:04 178  	set
16:21:04 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_INACTIVE,
16:21:04 180  	  IR.UPDATED_BY = in_updated_by,
16:21:04 181  	  IR.UPDATE_DATE = sysdate
16:21:04 182  	where
16:21:04 183  	  IR.ID = in_id and
16:21:04 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
16:21:04 185  	;
16:21:04 186  raise no_data_found;
16:21:04 187  EXCEPTION
16:21:04 188  WHEN OTHERS THEN
16:21:04 189  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 190  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
16:21:04 191  END DISABLE_IP_RANGE_BY_ID;
16:21:04 192  
16:21:04 193  PROCEDURE ADD_IP_RANGE (
16:21:04 194  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:04 195  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
16:21:04 196  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:21:04 197  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:21:04 198  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
16:21:04 199  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
16:21:04 200  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
16:21:04 201  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
16:21:04 202  ) AS
16:21:04 203  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
16:21:04 204  BEGIN
16:21:04 205  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
16:21:04 206  	    ID,
16:21:04 207  	    GROUP_ACCOUNT_ID,
16:21:04 208  	    MINIMUM_IP_STRING,
16:21:04 209  	    MINIMUM_IP_LOW,
16:21:04 210  	    MINIMUM_IP_HIGH,
16:21:04 211  	    MAXIMUM_IP_STRING,
16:21:04 212  	    MAXIMUM_IP_LOW,
16:21:04 213  	    MAXIMUM_IP_HIGH,
16:21:04 214  	    CREATED_BY,
16:21:04 215  	    CREATE_DATE,
16:21:04 216  	    UPDATED_BY,
16:21:04 217  	    UPDATE_DATE,
16:21:04 218  	    GROUP_ACC_IP_RNG_STATUS_ID
16:21:04 219  	  )
16:21:04 220  	  VALUES (
16:21:04 221  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
16:21:04 222  	    in_group_account_id,
16:21:04 223  	    in_minimum_ip_string,
16:21:04 224  	    in_minimum_ip_low,
16:21:04 225  	    in_minimum_ip_high,
16:21:04 226  	    in_maximum_ip_string,
16:21:04 227  	    in_maximum_ip_low,
16:21:04 228  	    in_maximum_ip_high,
16:21:04 229  	    in_created_by,
16:21:04 230  	    sysdate,
16:21:04 231  	    in_created_by,
16:21:04 232  	    sysdate,
16:21:04 233  	    GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
16:21:04 234  	  );
16:21:04 235  EXCEPTION
16:21:04 236  WHEN OTHERS THEN
16:21:04 237  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 239  END ADD_IP_RANGE;
16:21:04 240  
16:21:04 241  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
16:21:04 242  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:04 243  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:04 244  ) AS
16:21:04 245  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
16:21:04 246  BEGIN
16:21:04 247  	update
16:21:04 248  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
16:21:04 249  	set
16:21:04 250  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT,
16:21:04 251  	  ED.UPDATED_BY = in_updated_by,
16:21:04 252  	  ED.UPDATE_DATE = sysdate
16:21:04 253  	where
16:21:04 254  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
16:21:04 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT
16:21:04 256  	;
16:21:04 257  EXCEPTION
16:21:04 258  WHEN OTHERS THEN
16:21:04 259  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 260  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 261  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
16:21:04 262  
16:21:04 263  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
16:21:04 264  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:21:04 265  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:04 266  ) AS
16:21:04 267  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
16:21:04 268  BEGIN
16:21:04 269  	update
16:21:04 270  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
16:21:04 271  	set
16:21:04 272  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT,
16:21:04 273  	  ED.UPDATED_BY = in_updated_by,
16:21:04 274  	  ED.UPDATE_DATE = sysdate
16:21:04 275  	where
16:21:04 276  	  ED.ID = in_id and
16:21:04 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT
16:21:04 278  	;
16:21:04 279  EXCEPTION
16:21:04 280  WHEN OTHERS THEN
16:21:04 281  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 282  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
16:21:04 283  END DISABLE_EMAIL_DOMAIN_BY_ID;
16:21:04 284  
16:21:04 285  
16:21:04 286  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
16:21:04 287  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:21:04 288  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:04 289  ) AS
16:21:04 290  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
16:21:04 291  BEGIN
16:21:04 292  	update
16:21:04 293  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
16:21:04 294  	set
16:21:04 295  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT,
16:21:04 296  	  ED.UPDATED_BY = in_updated_by,
16:21:04 297  	  ED.UPDATE_DATE = sysdate
16:21:04 298  	where
16:21:04 299  	  ED.ID = in_id and
16:21:04 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT
16:21:04 301  	;
16:21:04 302  EXCEPTION
16:21:04 303  WHEN OTHERS THEN
16:21:04 304  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 305  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
16:21:04 306  END ENABLE_EMAIL_DOMAIN_BY_ID;
16:21:04 307  
16:21:04 308  
16:21:04 309  PROCEDURE ADD_EMAIL_DOMAIN (
16:21:04 310  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:04 311  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:21:04 312  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
16:21:04 313  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
16:21:04 314  ) AS
16:21:04 315  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
16:21:04 316  BEGIN
16:21:04 317  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
16:21:04 318  	    ID,
16:21:04 319  	    GROUP_ACCOUNT_ID,
16:21:04 320  	    EMAIL_DOMAIN,
16:21:04 321  		IS_ACTIVE,
16:21:04 322  	    CREATED_BY,
16:21:04 323  	    CREATE_DATE,
16:21:04 324  	    UPDATED_BY,
16:21:04 325  	    UPDATE_DATE
16:21:04 326  	  )
16:21:04 327  	  VALUES (
16:21:04 328  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
16:21:04 329  	    in_group_account_id,
16:21:04 330  		in_email_domain,
16:21:04 331  		in_is_active,
16:21:04 332  		in_created_by,
16:21:04 333  	    sysdate,
16:21:04 334  	    in_created_by,
16:21:04 335  	    sysdate
16:21:04 336  	  );
16:21:04 337  EXCEPTION
16:21:04 338  WHEN DUP_VAL_ON_INDEX THEN
16:21:04 339  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:04 340  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
16:21:04 341  WHEN OTHERS THEN
16:21:04 342  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 343  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
16:21:04 344  END ADD_EMAIL_DOMAIN;
16:21:04 345  
16:21:04 346  PROCEDURE UPDATE_GROUP_ACCOUNT (
16:21:04 347  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:21:04 348  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
16:21:04 349  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
16:21:04 350  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
16:21:04 351  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
16:21:04 352  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
16:21:04 353  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:21:04 354  ) AS
16:21:04 355  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
16:21:04 356  BEGIN
16:21:04 357  	update
16:21:04 358  	  group_account
16:21:04 359  	set
16:21:04 360  	  group_name = nvl(in_group_name, group_name),
16:21:04 361  	  first_name = nvl(in_first_name, first_name),
16:21:04 362  	  last_name = nvl(in_last_name, last_name),
16:21:04 363  	  email = nvl(in_email, email),
16:21:04 364  	  phone = nvl(in_phone, phone),
16:21:04 365  	  updated_by = in_updated_by,
16:21:04 366  	  update_date = sysdate
16:21:04 367  	where
16:21:04 368  	  id = in_group_account_id;
16:21:04 369  
16:21:04 370  	if(sql%rowcount = 0) then
16:21:04 371  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:04 372  	  SPROC_NAME, 'Group Account not found', SQLERRM);
16:21:04 373  	end if;
16:21:04 374  EXCEPTION
16:21:04 375  	WHEN OTHERS THEN
16:21:04 376  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:04 377  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
16:21:04 378  END UPDATE_GROUP_ACCOUNT;
16:21:04 379  
16:21:04 380  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
16:21:04 381  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:21:04 382  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
16:21:04 383  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:21:04 384  ) AS
16:21:04 385  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
16:21:04 386  var_subscription_id NUMBER;
16:21:04 387  var_seats NUMBER;
16:21:04 388  BEGIN
16:21:04 389  	select subscription_id, seats into var_subscription_id, var_seats
16:21:04 390  	from group_account
16:21:04 391  	where id = in_group_account_id;
16:21:04 392  
16:21:04 393  	update
16:21:04 394  	  group_account
16:21:04 395  	set
16:21:04 396  	  seats = in_seats,
16:21:04 397  	  updated_by = in_updated_by,
16:21:04 398  	  update_date = sysdate
16:21:04 399  	where
16:21:04 400  	  id = in_group_account_id;
16:21:04 401  
16:21:04 402  	if(sql%rowcount = 0) then
16:21:04 403  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:04 404  	  SPROC_NAME, 'Group Account not found', SQLERRM);
16:21:04 405  	end if;
16:21:04 406  
16:21:04 407  	PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
16:21:04 408  	  in_subscription_id => var_subscription_id,
16:21:04 409  	  in_agent_id	     => 0,
16:21:04 410  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
16:21:04 411  	  in_created_by      => in_updated_by
16:21:04 412  	);
16:21:04 413  EXCEPTION
16:21:04 414  	WHEN NO_DATA_FOUND THEN
16:21:04 415  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:04 416  	  SPROC_NAME, 'Group Account not found', SQLERRM);
16:21:04 417  	WHEN OTHERS THEN
16:21:04 418  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:04 419  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
16:21:04 420  END UPDATE_GROUP_ACCOUNT_SEATS;
16:21:04 421  
16:21:04 422  END PROCS_GROUP_ACCOUNT_CRU_V16;
16:21:04 423  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.06
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_INVOICE (
16:21:04   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
16:21:04   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
16:21:04   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
16:21:04   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
16:21:04   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
16:21:04   9  ) AS
16:21:04  10  -- VARIABLES
16:21:04  11  var_invoice_id INVOICE.ID%TYPE;
16:21:04  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:04  13  var_date DATE := SYSDATE;
16:21:04  14  BEGIN
16:21:04  15  	IF in_invoice_id IS NULL THEN
16:21:04  16  	  SELECT
16:21:04  17  	    INV_ID_SEQ.nextVal into var_invoice_id
16:21:04  18  	  FROM DUAL;
16:21:04  19  	ELSE
16:21:04  20  	  var_invoice_id := in_invoice_id;
16:21:04  21  	END IF;
16:21:04  22  	INSERT INTO
16:21:04  23  	  INVOICE (
16:21:04  24  	    ID,
16:21:04  25  	    INVOICE_STATUS_ID,
16:21:04  26  	    CREATE_DATE,
16:21:04  27  	    CREATED_BY,
16:21:04  28  	    UPDATE_DATE,
16:21:04  29  	    UPDATED_BY,
16:21:04  30  	    TAX_EXEMPT_ID,
16:21:04  31  	    IS_TAX_CALCULATION_NEEDED
16:21:04  32  	  ) VALUES (
16:21:04  33  	    var_invoice_id,
16:21:04  34  	    in_invoice_status_id,
16:21:04  35  	    var_date,
16:21:04  36  	    in_created_by,
16:21:04  37  	    var_date,
16:21:04  38  	    in_created_by,
16:21:04  39  	    in_tax_exempt_id,
16:21:04  40  	    0 -- DEFAULT VALUE
16:21:04  41  	  );
16:21:04  42  
16:21:04  43  	out_invoice_id := var_invoice_id;
16:21:04  44  END;
16:21:04  45  
16:21:04  46  /*****************************************************************/
16:21:04  47  
16:21:04  48  PROCEDURE UPDATE_INVOICE (
16:21:04  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
16:21:04  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
16:21:04  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
16:21:04  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
16:21:04  53  ) AS
16:21:04  54  BEGIN
16:21:04  55  	-- Create history
16:21:04  56  	PROCS_HISTORY_V16.CREATE_INVOICE_HISTORY(
16:21:04  57  	  in_invoice_id 	       => in_invoice_id,
16:21:04  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:04  59  	);
16:21:04  60  
16:21:04  61  	UPDATE
16:21:04  62  	  INVOICE
16:21:04  63  	SET
16:21:04  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
16:21:04  65  	  UPDATE_DATE		    = SYSDATE,
16:21:04  66  	  UPDATED_BY		    = in_updated_by,
16:21:04  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
16:21:04  68  	WHERE
16:21:04  69  	  ID = in_invoice_id;
16:21:04  70  END;
16:21:04  71  
16:21:04  72  END PROCS_INVOICE_CRU_V16;
16:21:04  73  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_RECEIPT(
16:21:04   4  /*
16:21:04   5  Throws exceptions:
16:21:04   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04   7  */
16:21:04   8  	  out_id	      OUT NUMBER,
16:21:04   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:21:04  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
16:21:04  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
16:21:04  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
16:21:04  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:04  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:21:04  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:21:04  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:04  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:21:04  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:21:04  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:21:04  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
16:21:04  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
16:21:04  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:21:04  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
16:21:04  24  ) AS
16:21:04  25  -- VARIABLES
16:21:04  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
16:21:04  27  var_current_date	    DATE;
16:21:04  28  var_count 	    NUMBER;
16:21:04  29  ITUNES_ORG_TNX_USED   EXCEPTION;
16:21:04  30  BEGIN
16:21:04  31  	SELECT COUNT(1) into var_count
16:21:04  32  	FROM
16:21:04  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
16:21:04  34  	WHERE
16:21:04  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
16:21:04  36  	  IR.SUBSCRIPTION_ID = S.ID AND
16:21:04  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
16:21:04  38  
16:21:04  39  	if var_count > 0 then
16:21:04  40  	  raise ITUNES_ORG_TNX_USED;
16:21:04  41  	end if;
16:21:04  42  
16:21:04  43  	SELECT
16:21:04  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
16:21:04  45  	INTO
16:21:04  46  	  out_id
16:21:04  47  	FROM
16:21:04  48  	  dual
16:21:04  49  	;
16:21:04  50  
16:21:04  51  	SELECT
16:21:04  52  	  sysdate
16:21:04  53  	INTO
16:21:04  54  	  var_current_date
16:21:04  55  	FROM
16:21:04  56  	  dual
16:21:04  57  	;
16:21:04  58  
16:21:04  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
16:21:04  60  	(
16:21:04  61  	  id,
16:21:04  62  	  subscription_id,
16:21:04  63  	  receipt,
16:21:04  64  	  status,
16:21:04  65  	  quantity,
16:21:04  66  	  product_id,
16:21:04  67  	  transaction_id,
16:21:04  68  	  purchase_date,
16:21:04  69  	  original_transaction_id,
16:21:04  70  	  original_purchase_date,
16:21:04  71  	  app_item_id,
16:21:04  72  	  version_external_id,
16:21:04  73  	  bid,
16:21:04  74  	  bvrs,
16:21:04  75  	  expires_date,
16:21:04  76  	  create_date,
16:21:04  77  	  created_by,
16:21:04  78  	  update_date,
16:21:04  79  	  updated_by,
16:21:04  80  	  last_check_date
16:21:04  81  	)
16:21:04  82  	VALUES
16:21:04  83  	(
16:21:04  84  	  out_id,
16:21:04  85  	  in_subscription_id,
16:21:04  86  	  in_receipt,
16:21:04  87  	  in_status,
16:21:04  88  	  in_quantity,
16:21:04  89  	  in_product_id,
16:21:04  90  	  in_transaction_id,
16:21:04  91  	  in_purchase_date,
16:21:04  92  	  in_original_transaction_id,
16:21:04  93  	  in_original_purchase_date,
16:21:04  94  	  in_app_item_id,
16:21:04  95  	  in_version_external_id,
16:21:04  96  	  in_bid,
16:21:04  97  	  in_bvrs,
16:21:04  98  	  in_expires_date,
16:21:04  99  	  var_current_date,
16:21:04 100  	  in_created_by,
16:21:04 101  	  var_current_date,
16:21:04 102  	  in_created_by,
16:21:04 103  	  var_current_date
16:21:04 104  	);
16:21:04 105  
16:21:04 106  EXCEPTION
16:21:04 107  WHEN ITUNES_ORG_TNX_USED THEN
16:21:04 108  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:04 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
16:21:04 110  WHEN DUP_VAL_ON_INDEX THEN
16:21:04 111  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:04 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
16:21:04 113  WHEN OTHERS THEN
16:21:04 114  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 116  END CREATE_RECEIPT;
16:21:04 117  
16:21:04 118  PROCEDURE UPDATE_RECEIPT(
16:21:04 119  /*
16:21:04 120  Throws exceptions:
16:21:04 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04 122  */
16:21:04 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
16:21:04 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
16:21:04 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
16:21:04 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
16:21:04 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:04 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:21:04 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:21:04 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:04 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:21:04 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:21:04 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:21:04 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
16:21:04 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
16:21:04 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:21:04 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
16:21:04 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
16:21:04 139  ) AS
16:21:04 140  -- VARIABLES
16:21:04 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
16:21:04 142  var_current_date	    DATE;
16:21:04 143  BEGIN
16:21:04 144  
16:21:04 145  	SELECT
16:21:04 146  	  sysdate
16:21:04 147  	INTO
16:21:04 148  	  var_current_date
16:21:04 149  	FROM
16:21:04 150  	  dual
16:21:04 151  	;
16:21:04 152  
16:21:04 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
16:21:04 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ITUNES_RECEIPT_HISTORY
16:21:04 155  	  (
16:21:04 156  	      rec.id,
16:21:04 157  	      rec.subscription_id,
16:21:04 158  	      rec.receipt,
16:21:04 159  	      rec.status,
16:21:04 160  	      rec.quantity,
16:21:04 161  	      rec.product_id,
16:21:04 162  	      rec.transaction_id,
16:21:04 163  	      rec.purchase_date,
16:21:04 164  	      rec.original_transaction_id,
16:21:04 165  	      rec.original_purchase_date,
16:21:04 166  	      rec.app_item_id,
16:21:04 167  	      rec.version_external_id,
16:21:04 168  	      rec.bid,
16:21:04 169  	      rec.bvrs,
16:21:04 170  	      rec.expires_date,
16:21:04 171  	      rec.create_date,
16:21:04 172  	      rec.created_by,
16:21:04 173  	      rec.update_date,
16:21:04 174  	      rec.updated_by,
16:21:04 175  	      rec.last_check_date,
16:21:04 176  	      rec.cancel_date
16:21:04 177  	  );
16:21:04 178  	END LOOP;
16:21:04 179  
16:21:04 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
16:21:04 181  	SET
16:21:04 182  	  receipt = in_receipt,
16:21:04 183  	  status = in_status,
16:21:04 184  	  quantity = in_quantity,
16:21:04 185  	  product_id = in_product_id,
16:21:04 186  	  transaction_id = in_transaction_id,
16:21:04 187  	  purchase_date = in_purchase_date,
16:21:04 188  	  original_transaction_id = in_original_transaction_id,
16:21:04 189  	  original_purchase_date = in_original_purchase_date,
16:21:04 190  	  app_item_id = in_app_item_id,
16:21:04 191  	  version_external_id = in_version_external_id,
16:21:04 192  	  bid = in_bid,
16:21:04 193  	  bvrs = in_bvrs,
16:21:04 194  	  expires_date = in_expires_date,
16:21:04 195  	  update_date = var_current_date,
16:21:04 196  	  updated_by = in_updated_by,
16:21:04 197  	  last_check_date = var_current_date,
16:21:04 198  	  cancel_date = in_cancel_date
16:21:04 199  	WHERE
16:21:04 200  	  id = in_id
16:21:04 201  	;
16:21:04 202  
16:21:04 203  EXCEPTION
16:21:04 204  WHEN DUP_VAL_ON_INDEX THEN
16:21:04 205  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:04 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
16:21:04 207  WHEN OTHERS THEN
16:21:04 208  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 210  
16:21:04 211  END UPDATE_RECEIPT;
16:21:04 212  
16:21:04 213  PROCEDURE LINK_ITUNES_RECEIPT(
16:21:04 214  /*
16:21:04 215  Throws exceptions:
16:21:04 216  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04 217  */
16:21:04 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
16:21:04 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:21:04 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
16:21:04 221  ) AS
16:21:04 222  -- VARIABLES
16:21:04 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
16:21:04 224  var_current_date	    DATE;
16:21:04 225  BEGIN
16:21:04 226  
16:21:04 227  	      SELECT
16:21:04 228  	  sysdate
16:21:04 229  	      INTO
16:21:04 230  	  var_current_date
16:21:04 231  	      FROM
16:21:04 232  	  dual
16:21:04 233  	      ;
16:21:04 234  
16:21:04 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
16:21:04 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ITUNES_RECEIPT_HISTORY
16:21:04 237  	      (
16:21:04 238  	    rec.id,
16:21:04 239  	    rec.subscription_id,
16:21:04 240  	    rec.receipt,
16:21:04 241  	    rec.status,
16:21:04 242  	    rec.quantity,
16:21:04 243  	    rec.product_id,
16:21:04 244  	    rec.transaction_id,
16:21:04 245  	    rec.purchase_date,
16:21:04 246  	    rec.original_transaction_id,
16:21:04 247  	    rec.original_purchase_date,
16:21:04 248  	    rec.app_item_id,
16:21:04 249  	    rec.version_external_id,
16:21:04 250  	    rec.bid,
16:21:04 251  	    rec.bvrs,
16:21:04 252  	    rec.expires_date,
16:21:04 253  	    rec.create_date,
16:21:04 254  	    rec.created_by,
16:21:04 255  	    rec.update_date,
16:21:04 256  	    rec.updated_by,
16:21:04 257  	    rec.last_check_date,
16:21:04 258  	    rec.cancel_date
16:21:04 259  	      );
16:21:04 260  	      END LOOP;
16:21:04 261  
16:21:04 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
16:21:04 263  		SET
16:21:04 264  		      subscription_id = in_subscription_id,
16:21:04 265  		      update_date = var_current_date,
16:21:04 266  	      updated_by = in_updated_by,
16:21:04 267  	      last_check_date = var_current_date
16:21:04 268  	      WHERE
16:21:04 269  		  id = in_id
16:21:04 270  	      ;
16:21:04 271  
16:21:04 272  	      EXCEPTION
16:21:04 273  	      WHEN DUP_VAL_ON_INDEX THEN
16:21:04 274  		PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:04 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
16:21:04 276  	      WHEN OTHERS THEN
16:21:04 277  		PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 279  END LINK_ITUNES_RECEIPT;
16:21:04 280  
16:21:04 281  
16:21:04 282  PROCEDURE MARK_RECEIPT_CHECKED(
16:21:04 283  /*
16:21:04 284  Throws exceptions:
16:21:04 285  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04 286  */
16:21:04 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
16:21:04 288  ) AS
16:21:04 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
16:21:04 290  BEGIN
16:21:04 291  	UPDATE
16:21:04 292  	  CORE_OWNER.ITUNES_RECEIPT
16:21:04 293  	SET
16:21:04 294  	  last_check_date = sysdate
16:21:04 295  	WHERE
16:21:04 296  	  id = in_id
16:21:04 297  	;
16:21:04 298  EXCEPTION
16:21:04 299  WHEN OTHERS THEN
16:21:04 300  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 302  END MARK_RECEIPT_CHECKED;
16:21:04 303  
16:21:04 304  END PROCS_ITUNES_RECEIPT_CRU_V16;
16:21:04 305  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.06
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_LICENSE(
16:21:04   4  	out_license_id		    OUT LICENSE.ID%TYPE,
16:21:04   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
16:21:04   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
16:21:04   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
16:21:04   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
16:21:04   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
16:21:04  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
16:21:04  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
16:21:04  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
16:21:04  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
16:21:04  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
16:21:04  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
16:21:04  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
16:21:04  17  ) AS
16:21:04  18  -- VARIABLES
16:21:04  19  var_license_id LICENSE.ID%TYPE;
16:21:04  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:04  21  var_date DATE := SYSDATE;
16:21:04  22  BEGIN
16:21:04  23  	IF in_license_id IS NULL THEN
16:21:04  24  	  SELECT
16:21:04  25  	    LCN_ID_SEQ.nextVal into var_license_id
16:21:04  26  	  FROM DUAL;
16:21:04  27  	ELSE
16:21:04  28  	  var_license_id := in_license_id;
16:21:04  29  	END IF;
16:21:04  30  	INSERT INTO
16:21:04  31  	  LICENSE (
16:21:04  32  	    ID,
16:21:04  33  	    LICENSE_STATUS_ID,
16:21:04  34  	    NEEDS_ENTITLEMENTS,
16:21:04  35  	    START_DATE,
16:21:04  36  	    OFFER_ID,
16:21:04  37  	    SUBSCRIPTION_ID,
16:21:04  38  	    INVOICE_ID,
16:21:04  39  	    END_DATE,
16:21:04  40  	    CREATE_DATE,
16:21:04  41  	    CREATED_BY,
16:21:04  42  	    UPDATE_DATE,
16:21:04  43  	    UPDATED_BY,
16:21:04  44  	    IS_EXTENSION,
16:21:04  45  	    CURRENT_OFFER_INDEX,
16:21:04  46  	    CURRENT_OFFER_RECURR_NUM,
16:21:04  47  	    ENTITLEMENT_END_DATE
16:21:04  48  	  ) VALUES (
16:21:04  49  	    var_license_id,
16:21:04  50  	    in_license_status_id,
16:21:04  51  	    in_needs_entitlements,
16:21:04  52  	    in_start_date,
16:21:04  53  	    in_offer_id,
16:21:04  54  	    in_subscription_id,
16:21:04  55  	    in_invoice_id,
16:21:04  56  	    in_end_date,
16:21:04  57  	    var_date,
16:21:04  58  	    in_created_by,
16:21:04  59  	    var_date,
16:21:04  60  	    in_created_by,
16:21:04  61  	    in_is_extension,
16:21:04  62  	    in_current_offer_index,
16:21:04  63  	    in_current_offer_recurr_num,
16:21:04  64  	    in_end_date
16:21:04  65  	  );
16:21:04  66  
16:21:04  67  	out_license_id := var_license_id;
16:21:04  68  END CREATE_LICENSE;
16:21:04  69  
16:21:04  70  /********************************************************************/
16:21:04  71  
16:21:04  72  PROCEDURE UPDATE_LICENSE (
16:21:04  73  	in_license_id		    IN LICENSE.ID%TYPE,
16:21:04  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
16:21:04  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
16:21:04  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
16:21:04  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
16:21:04  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
16:21:04  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
16:21:04  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
16:21:04  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
16:21:04  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
16:21:04  83  ) AS
16:21:04  84  BEGIN
16:21:04  85  	-- Create history
16:21:04  86  	PROCS_HISTORY_V16.CREATE_LICENSE_HISTORY(
16:21:04  87  	  in_license_id 	       => in_license_id,
16:21:04  88  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:04  89  	);
16:21:04  90  
16:21:04  91  	UPDATE
16:21:04  92  	  LICENSE
16:21:04  93  	SET
16:21:04  94  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
16:21:04  95  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
16:21:04  96  	  START_DATE		   = NVL(in_start_date, START_DATE),
16:21:04  97  	  END_DATE		   = NVL(in_end_date, END_DATE),
16:21:04  98  	  UPDATE_DATE		   = SYSDATE,
16:21:04  99  	  UPDATED_BY		   = in_updated_by,
16:21:04 100  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
16:21:04 101  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
16:21:04 102  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
16:21:04 103  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE)
16:21:04 104  	WHERE
16:21:04 105  	  LICENSE.ID = in_license_id;
16:21:04 106  END UPDATE_LICENSE;
16:21:04 107  
16:21:04 108  END PROCS_LICENSE_CRU_V16;
16:21:04 109  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_LINE_ITEM (
16:21:04   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
16:21:04   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
16:21:04   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
16:21:04   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
16:21:04   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
16:21:04   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
16:21:04  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
16:21:04  11  ) AS
16:21:04  12  BEGIN
16:21:04  13  	IF inout_line_item_id IS NULL THEN
16:21:04  14  	  SELECT
16:21:04  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
16:21:04  16  	  FROM DUAL;
16:21:04  17  	END IF;
16:21:04  18  	INSERT INTO LINE_ITEM (
16:21:04  19  	  ID,
16:21:04  20  	  PRODUCT_OFFER_ID,
16:21:04  21  	  INVOICE_ID,
16:21:04  22  	  AMOUNT,
16:21:04  23  	  QUANTITY,
16:21:04  24  	  CREATE_DATE,
16:21:04  25  	  CREATED_BY,
16:21:04  26  	  DISCOUNT_AMOUNT,
16:21:04  27  	  TAXES_AMOUNT
16:21:04  28  	) VALUES (
16:21:04  29  	  inout_line_item_id,
16:21:04  30  	  in_product_offer_id,
16:21:04  31  	  in_invoice_id,
16:21:04  32  	  in_amount,
16:21:04  33  	  1, -- [REVU]: Deprecated. Ignore this field
16:21:04  34  	  SYSDATE,
16:21:04  35  	  in_created_by,
16:21:04  36  	  in_discount_amount,
16:21:04  37  	  in_taxes_amount
16:21:04  38  	);
16:21:04  39  END CREATE_LINE_ITEM;
16:21:04  40  
16:21:04  41  /******************************************************************************/
16:21:04  42  
16:21:04  43  PROCEDURE UPDATE_LINE_ITEM (
16:21:04  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
16:21:04  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
16:21:04  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
16:21:04  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
16:21:04  48  ) AS
16:21:04  49  BEGIN
16:21:04  50  	UPDATE
16:21:04  51  	  LINE_ITEM
16:21:04  52  	SET
16:21:04  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
16:21:04  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
16:21:04  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
16:21:04  56  	WHERE
16:21:04  57  	  LINE_ITEM.ID = in_line_item_id;
16:21:04  58  END UPDATE_LINE_ITEM;
16:21:04  59  
16:21:04  60  /******************************************************************************/
16:21:04  61  
16:21:04  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
16:21:04  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
16:21:04  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
16:21:04  65  ) AS
16:21:04  66  BEGIN
16:21:04  67  	INSERT INTO DISCOUNT_LINE_ITEM(
16:21:04  68  	  DISCOUNT_ID,
16:21:04  69  	  LINE_ITEM_ID
16:21:04  70  	) VALUES (
16:21:04  71  	  in_discount_id,
16:21:04  72  	  in_line_item_id
16:21:04  73  	);
16:21:04  74  END CREATE_DISCOUNT_LINE_ITEM;
16:21:04  75  
16:21:04  76  END PROCS_LINE_ITEMS_CRU_V16;
16:21:04  77  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.08
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
16:21:04   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
16:21:04   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
16:21:04   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:04   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
16:21:04   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
16:21:04   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
16:21:04  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
16:21:04  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
16:21:04  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:21:04  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
16:21:04  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
16:21:04  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
16:21:04  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:21:04  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
16:21:04  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
16:21:04  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
16:21:04  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
16:21:04  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
16:21:04  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
16:21:04  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
16:21:04  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
16:21:04  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
16:21:04  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
16:21:04  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
16:21:04  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
16:21:04  29  ) AS
16:21:04  30  -- VARIABLES
16:21:04  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
16:21:04  32  var_date DATE := SYSDATE;
16:21:04  33  BEGIN
16:21:04  34  	IF in_cpt_chargeback_act_id IS NULL THEN
16:21:04  35  	  SELECT
16:21:04  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
16:21:04  37  	  FROM DUAL;
16:21:04  38  	ELSE
16:21:04  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
16:21:04  40  	END IF;
16:21:04  41  	INSERT INTO
16:21:04  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
16:21:04  43  	    id,
16:21:04  44  	    rcn_ext_source_log_id,
16:21:04  45  	    record_type,
16:21:04  46  	    entity_type,
16:21:04  47  	    entity_number,
16:21:04  48  	    chargeback_amount_issuer,
16:21:04  49  	    prev_partial_representment,
16:21:04  50  	    presentment_currency,
16:21:04  51  	    chargeback_category,
16:21:04  52  	    status_flag,
16:21:04  53  	    sequence_number,
16:21:04  54  	    merchant_order_number,
16:21:04  55  	    account_number,
16:21:04  56  	    reason_code,
16:21:04  57  	    transaction_date,
16:21:04  58  	    chargeback_date,
16:21:04  59  	    activity_date,
16:21:04  60  	    chargeback_amount_action,
16:21:04  61  	    fee_amount,
16:21:04  62  	    usage_code,
16:21:04  63  	    mop_code,
16:21:04  64  	    authorization_date,
16:21:04  65  	    chargeback_due_date,
16:21:04  66  	    create_date,
16:21:04  67  	    created_by
16:21:04  68  	  ) VALUES (
16:21:04  69  	    var_cpt_chargeback_act_id,
16:21:04  70  	    in_ext_source_log_id,
16:21:04  71  	    in_record_type,
16:21:04  72  	    in_entity_type,
16:21:04  73  	    in_entity_number,
16:21:04  74  	    in_chargeback_amount_issuer,
16:21:04  75  	    in_prev_partial_repres,
16:21:04  76  	    in_presentment_currency,
16:21:04  77  	    in_chargeback_category,
16:21:04  78  	    in_status_flag,
16:21:04  79  	    in_sequence_number,
16:21:04  80  	    in_merchant_order_number,
16:21:04  81  	    in_account_number,
16:21:04  82  	    in_reason_code,
16:21:04  83  	    in_transaction_date,
16:21:04  84  	    in_chargeback_date,
16:21:04  85  	    in_activity_date,
16:21:04  86  	    in_chargeback_amount_action,
16:21:04  87  	    in_fee_amount,
16:21:04  88  	    in_usage_code,
16:21:04  89  	    in_mop_code,
16:21:04  90  	    in_authorization_date,
16:21:04  91  	    in_chargeback_due_date,
16:21:04  92  	    var_date,
16:21:04  93  	    in_created_by
16:21:04  94  	  );
16:21:04  95  
16:21:04  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
16:21:04  97  END CREATE_CPT_CHARGEBACK_ACT;
16:21:04  98  
16:21:04  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
16:21:04 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
16:21:04 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
16:21:04 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
16:21:04 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
16:21:04 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
16:21:04 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:21:04 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
16:21:04 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
16:21:04 108  ) AS
16:21:04 109  -- VARIABLES
16:21:04 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
16:21:04 111  var_date DATE := SYSDATE;
16:21:04 112  BEGIN
16:21:04 113  	IF in_ext_source_log_id IS NULL THEN
16:21:04 114  	  SELECT
16:21:04 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
16:21:04 116  	  FROM DUAL;
16:21:04 117  	ELSE
16:21:04 118  	  var_ext_source_log_id := in_ext_source_log_id;
16:21:04 119  	END IF;
16:21:04 120  	INSERT INTO
16:21:04 121  	  RCN_EXT_SOURCE_LOG (
16:21:04 122  	    id,
16:21:04 123  	    extraction_timestamp,
16:21:04 124  	    report_date,
16:21:04 125  	    report_generation_datetime,
16:21:04 126  	    record_type,
16:21:04 127  	    report_file_name,
16:21:04 128  	    create_date,
16:21:04 129  	    created_by
16:21:04 130  	  ) VALUES (
16:21:04 131  	    var_ext_source_log_id,
16:21:04 132  	    in_extraction_timestamp,
16:21:04 133  	    in_report_date,
16:21:04 134  	    in_report_gen_datetime,
16:21:04 135  	    in_record_type,
16:21:04 136  	    in_report_file_name,
16:21:04 137  	    var_date,
16:21:04 138  	    in_created_by
16:21:04 139  	  );
16:21:04 140  
16:21:04 141  	out_ext_source_log_id := var_ext_source_log_id;
16:21:04 142  END CREATE_EXT_SOURCE_LOG;
16:21:04 143  
16:21:04 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
16:21:04 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
16:21:04 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
16:21:04 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:04 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
16:21:04 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
16:21:04 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
16:21:04 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
16:21:04 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
16:21:04 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
16:21:04 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
16:21:04 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
16:21:04 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
16:21:04 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
16:21:04 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
16:21:04 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
16:21:04 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
16:21:04 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
16:21:04 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
16:21:04 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
16:21:04 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
16:21:04 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
16:21:04 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
16:21:04 167  ) AS
16:21:04 168  -- VARIABLES
16:21:04 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
16:21:04 170  var_date DATE := SYSDATE;
16:21:04 171  BEGIN
16:21:04 172  	IF in_cpt_service_charge_id IS NULL THEN
16:21:04 173  	  SELECT
16:21:04 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
16:21:04 175  	  FROM DUAL;
16:21:04 176  	ELSE
16:21:04 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
16:21:04 178  	END IF;
16:21:04 179  	INSERT INTO
16:21:04 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
16:21:04 181  	    id,
16:21:04 182  	    rcn_ext_source_log_id,
16:21:04 183  	    record_type,
16:21:04 184  	    category,
16:21:04 185  	    sub_category,
16:21:04 186  	    entity_type,
16:21:04 187  	    entity_number,
16:21:04 188  	    funds_transfer_inst_number,
16:21:04 189  	    secure_ba_number,
16:21:04 190  	    settlement_currency,
16:21:04 191  	    fee_schedule,
16:21:04 192  	    mop,
16:21:04 193  	    interchange_qualification,
16:21:04 194  	    fee_type_description,
16:21:04 195  	    action_type,
16:21:04 196  	    unit_quantity,
16:21:04 197  	    unit_fee,
16:21:04 198  	    amount,
16:21:04 199  	    percentage_rate,
16:21:04 200  	    total_charge,
16:21:04 201  	    create_date,
16:21:04 202  	    created_by
16:21:04 203  	  ) VALUES (
16:21:04 204  	    var_cpt_service_charge_id,
16:21:04 205  	    in_ext_source_log_id,
16:21:04 206  	    in_record_type,
16:21:04 207  	    in_category,
16:21:04 208  	    in_sub_category,
16:21:04 209  	    in_entity_type,
16:21:04 210  	    in_entity_number,
16:21:04 211  	    in_funds_trans_inst_number,
16:21:04 212  	    in_secure_ba_number,
16:21:04 213  	    in_settlement_currency,
16:21:04 214  	    in_fee_schedule,
16:21:04 215  	    in_mop,
16:21:04 216  	    in_interchange_qual,
16:21:04 217  	    in_fee_type_description,
16:21:04 218  	    in_action_type,
16:21:04 219  	    in_unit_quantity,
16:21:04 220  	    in_unit_fee,
16:21:04 221  	    in_amount,
16:21:04 222  	    in_percentage_rate,
16:21:04 223  	    in_total_charge,
16:21:04 224  	    var_date,
16:21:04 225  	    in_created_by
16:21:04 226  	  );
16:21:04 227  
16:21:04 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
16:21:04 229  END CREATE_CPT_SERVICE_CHARGE;
16:21:04 230  
16:21:04 231  PROCEDURE CREATE_CPT_EXCEPTION (
16:21:04 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
16:21:04 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
16:21:04 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:04 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
16:21:04 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
16:21:04 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
16:21:04 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
16:21:04 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
16:21:04 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
16:21:04 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
16:21:04 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
16:21:04 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:21:04 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:21:04 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
16:21:04 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
16:21:04 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
16:21:04 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
16:21:04 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
16:21:04 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
16:21:04 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
16:21:04 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
16:21:04 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
16:21:04 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
16:21:04 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
16:21:04 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
16:21:04 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
16:21:04 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
16:21:04 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
16:21:04 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
16:21:04 261  ) AS
16:21:04 262  -- VARIABLES
16:21:04 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
16:21:04 264  var_date DATE := SYSDATE;
16:21:04 265  BEGIN
16:21:04 266  	IF in_cpt_exception_id IS NULL THEN
16:21:04 267  	  SELECT
16:21:04 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
16:21:04 269  	  FROM DUAL;
16:21:04 270  	ELSE
16:21:04 271  	  var_cpt_exception_id := in_cpt_exception_id;
16:21:04 272  	END IF;
16:21:04 273  	INSERT INTO
16:21:04 274  	  RCN_CPT_EXCEPTION_DETAIL (
16:21:04 275  	    id,
16:21:04 276  	    rcn_ext_source_log_id,
16:21:04 277  	    record_type,
16:21:04 278  	    submission_date,
16:21:04 279  	    pid_number,
16:21:04 280  	    pid_short_name,
16:21:04 281  	    submission_number,
16:21:04 282  	    record_number,
16:21:04 283  	    entity_type,
16:21:04 284  	    entity_number,
16:21:04 285  	    presentment_currency,
16:21:04 286  	    merchant_order_number,
16:21:04 287  	    rdfi_number,
16:21:04 288  	    account_number,
16:21:04 289  	    expiration_date,
16:21:04 290  	    amount,
16:21:04 291  	    mop,
16:21:04 292  	    action_code,
16:21:04 293  	    auth_date,
16:21:04 294  	    auth_code,
16:21:04 295  	    auth_response_code,
16:21:04 296  	    trace_number,
16:21:04 297  	    consumer_country_code,
16:21:04 298  	    category,
16:21:04 299  	    mcc,
16:21:04 300  	    reject_code,
16:21:04 301  	    submission_status,
16:21:04 302  	    create_date,
16:21:04 303  	    created_by
16:21:04 304  	  ) VALUES (
16:21:04 305  	    var_cpt_exception_id,
16:21:04 306  	    in_ext_source_log_id,
16:21:04 307  	    in_record_type,
16:21:04 308  	    in_submission_date,
16:21:04 309  	    in_pid_number,
16:21:04 310  	    in_pid_short_name,
16:21:04 311  	    in_submission_number,
16:21:04 312  	    in_record_number,
16:21:04 313  	    in_entity_type,
16:21:04 314  	    in_entity_number,
16:21:04 315  	    in_presentment_currency,
16:21:04 316  	    in_merchant_order_number,
16:21:04 317  	    in_rdfi_number,
16:21:04 318  	    in_account_number,
16:21:04 319  	    in_expiration_date,
16:21:04 320  	    in_amount,
16:21:04 321  	    in_mop,
16:21:04 322  	    in_action_code,
16:21:04 323  	    in_auth_date,
16:21:04 324  	    in_auth_code,
16:21:04 325  	    in_auth_response_code,
16:21:04 326  	    in_trace_number,
16:21:04 327  	    in_consumer_country_code,
16:21:04 328  	    in_category,
16:21:04 329  	    in_mcc,
16:21:04 330  	    in_reject_code,
16:21:04 331  	    in_submission_status,
16:21:04 332  	    var_date,
16:21:04 333  	    in_created_by
16:21:04 334  	  );
16:21:04 335  
16:21:04 336  	out_cpt_exception_id := var_cpt_exception_id;
16:21:04 337  END CREATE_CPT_EXCEPTION;
16:21:04 338  
16:21:04 339  PROCEDURE CREATE_CPT_DEPOSIT (
16:21:04 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
16:21:04 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
16:21:04 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:04 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
16:21:04 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
16:21:04 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
16:21:04 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
16:21:04 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
16:21:04 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
16:21:04 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
16:21:04 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
16:21:04 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:21:04 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:21:04 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
16:21:04 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
16:21:04 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
16:21:04 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
16:21:04 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
16:21:04 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
16:21:04 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
16:21:04 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
16:21:04 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
16:21:04 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
16:21:04 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
16:21:04 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
16:21:04 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
16:21:04 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
16:21:04 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
16:21:04 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
16:21:04 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
16:21:04 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
16:21:04 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
16:21:04 372  ) AS
16:21:04 373  -- VARIABLES
16:21:04 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
16:21:04 375  var_date DATE := SYSDATE;
16:21:04 376  BEGIN
16:21:04 377  	IF in_cpt_deposit_id IS NULL THEN
16:21:04 378  	  SELECT
16:21:04 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
16:21:04 380  	  FROM DUAL;
16:21:04 381  	ELSE
16:21:04 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
16:21:04 383  	END IF;
16:21:04 384  	INSERT INTO
16:21:04 385  	  RCN_CPT_DEPOSIT_DETAIL (
16:21:04 386  	    id,
16:21:04 387  	    rcn_ext_source_log_id,
16:21:04 388  	    record_type,
16:21:04 389  	    submission_date,
16:21:04 390  	    pid_number,
16:21:04 391  	    pid_short_name,
16:21:04 392  	    submission_number,
16:21:04 393  	    record_number,
16:21:04 394  	    entity_type,
16:21:04 395  	    entity_number,
16:21:04 396  	    presentment_currency,
16:21:04 397  	    merchant_order_number,
16:21:04 398  	    rdfi_number,
16:21:04 399  	    account_number,
16:21:04 400  	    expiration_date,
16:21:04 401  	    amount,
16:21:04 402  	    mop,
16:21:04 403  	    action_code,
16:21:04 404  	    auth_date,
16:21:04 405  	    auth_code,
16:21:04 406  	    auth_response_code,
16:21:04 407  	    trace_number,
16:21:04 408  	    consumer_country_code,
16:21:04 409  	    mcc,
16:21:04 410  	    fee_code,
16:21:04 411  	    unit_fee,
16:21:04 412  	    percent_fee,
16:21:04 413  	    total_interchange_fee,
16:21:04 414  	    total_assessment_fee,
16:21:04 415  	    other_fee,
16:21:04 416  	    create_date,
16:21:04 417  	    created_by
16:21:04 418  	  ) VALUES (
16:21:04 419  	    var_cpt_deposit_id,
16:21:04 420  	    in_ext_source_log_id,
16:21:04 421  	    in_record_type,
16:21:04 422  	    in_submission_date,
16:21:04 423  	    in_pid_number,
16:21:04 424  	    in_pid_short_name,
16:21:04 425  	    in_submission_number,
16:21:04 426  	    in_record_number,
16:21:04 427  	    in_entity_type,
16:21:04 428  	    in_entity_number,
16:21:04 429  	    in_presentment_currency,
16:21:04 430  	    in_merchant_order_number,
16:21:04 431  	    in_rdfi_number,
16:21:04 432  	    in_account_number,
16:21:04 433  	    in_expiration_date,
16:21:04 434  	    in_amount,
16:21:04 435  	    in_mop,
16:21:04 436  	    in_action_code,
16:21:04 437  	    in_auth_date,
16:21:04 438  	    in_auth_code,
16:21:04 439  	    in_auth_response_code,
16:21:04 440  	    in_trace_number,
16:21:04 441  	    in_consumer_country_code,
16:21:04 442  	    in_mcc,
16:21:04 443  	    in_fee_code,
16:21:04 444  	    in_unit_fee,
16:21:04 445  	    in_percent_fee,
16:21:04 446  	    in_total_interchange_fee,
16:21:04 447  	    in_total_assessment_fee,
16:21:04 448  	    in_other_fee,
16:21:04 449  	    var_date,
16:21:04 450  	    in_created_by
16:21:04 451  	  );
16:21:04 452  
16:21:04 453  	out_cpt_deposit_id := var_cpt_deposit_id;
16:21:04 454  END CREATE_CPT_DEPOSIT;
16:21:04 455  
16:21:04 456  PROCEDURE CREATE_PP_SETTLEMENT (
16:21:04 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
16:21:04 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
16:21:04 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:04 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
16:21:04 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
16:21:04 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
16:21:04 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
16:21:04 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
16:21:04 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
16:21:04 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
16:21:04 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
16:21:04 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
16:21:04 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
16:21:04 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
16:21:04 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
16:21:04 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
16:21:04 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
16:21:04 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
16:21:04 475  ) AS
16:21:04 476  -- VARIABLES
16:21:04 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
16:21:04 478  var_date DATE := SYSDATE;
16:21:04 479  BEGIN
16:21:04 480  	IF in_pp_settlement_id IS NULL THEN
16:21:04 481  	  SELECT
16:21:04 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
16:21:04 483  	  FROM DUAL;
16:21:04 484  	ELSE
16:21:04 485  	  var_pp_settlement_id := in_pp_settlement_id;
16:21:04 486  	END IF;
16:21:04 487  	INSERT INTO
16:21:04 488  	  RCN_PP_SETTLEMENT (
16:21:04 489  	    id,
16:21:04 490  	    rcn_ext_source_log_id,
16:21:04 491  	    transaction_id,
16:21:04 492  	    invoice_id,
16:21:04 493  	    pp_ref_id,
16:21:04 494  	    pp_ref_id_type,
16:21:04 495  	    trans_event_code,
16:21:04 496  	    trans_init_date,
16:21:04 497  	    trans_comp_date,
16:21:04 498  	    trans_deb_or_cred,
16:21:04 499  	    gross_trans_amount,
16:21:04 500  	    gross_trans_currency,
16:21:04 501  	    fee_deb_or_cred,
16:21:04 502  	    fee_amount,
16:21:04 503  	    fee_currency,
16:21:04 504  	    custom_field,
16:21:04 505  	    create_date,
16:21:04 506  	    created_by
16:21:04 507  	  ) VALUES (
16:21:04 508  	    var_pp_settlement_id,
16:21:04 509  	    in_ext_source_log_id,
16:21:04 510  	    in_transaction_id,
16:21:04 511  	    in_invoice_id,
16:21:04 512  	    in_pp_ref_id,
16:21:04 513  	    in_pp_ref_id_type,
16:21:04 514  	    in_trans_event_code,
16:21:04 515  	    in_trans_init_date,
16:21:04 516  	    in_trans_comp_date,
16:21:04 517  	    in_trans_deb_or_cred,
16:21:04 518  	    in_gross_trans_amount,
16:21:04 519  	    in_gross_trans_currency,
16:21:04 520  	    in_fee_deb_or_cred,
16:21:04 521  	    in_fee_amount,
16:21:04 522  	    in_fee_currency,
16:21:04 523  	    in_custom_field,
16:21:04 524  	    var_date,
16:21:04 525  	    in_created_by
16:21:04 526  	  );
16:21:04 527  
16:21:04 528  	out_pp_settlement_id := var_pp_settlement_id;
16:21:04 529  END CREATE_PP_SETTLEMENT;
16:21:04 530  
16:21:04 531  PROCEDURE CREATE_PP_DISPUTE (
16:21:04 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
16:21:04 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
16:21:04 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:04 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
16:21:04 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
16:21:04 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
16:21:04 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
16:21:04 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
16:21:04 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
16:21:04 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
16:21:04 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
16:21:04 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
16:21:04 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
16:21:04 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
16:21:04 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
16:21:04 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
16:21:04 548  ) AS
16:21:04 549  -- VARIABLES
16:21:04 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
16:21:04 551  var_date DATE := SYSDATE;
16:21:04 552  BEGIN
16:21:04 553  	IF in_pp_dispute_id IS NULL THEN
16:21:04 554  	  SELECT
16:21:04 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
16:21:04 556  	  FROM DUAL;
16:21:04 557  	ELSE
16:21:04 558  	  var_pp_dispute_id := in_pp_dispute_id;
16:21:04 559  	END IF;
16:21:04 560  	INSERT INTO
16:21:04 561  	  RCN_PP_DISPUTE (
16:21:04 562  	    id,
16:21:04 563  	    rcn_ext_source_log_id,
16:21:04 564  	    dispute_type,
16:21:04 565  	    claimant_name,
16:21:04 566  	    claimant_email,
16:21:04 567  	    transaction_id,
16:21:04 568  	    trans_date,
16:21:04 569  	    disputed_amount,
16:21:04 570  	    disputed_amount_currency,
16:21:04 571  	    dispute_reason,
16:21:04 572  	    dispute_filing_date,
16:21:04 573  	    dispute_status,
16:21:04 574  	    dispute_case_id,
16:21:04 575  	    invoice_id,
16:21:04 576  	    create_date,
16:21:04 577  	    created_by
16:21:04 578  	  ) VALUES (
16:21:04 579  	    var_pp_dispute_id,
16:21:04 580  	    in_ext_source_log_id,
16:21:04 581  	    in_dispute_type,
16:21:04 582  	    in_claimant_name,
16:21:04 583  	    in_claimant_email,
16:21:04 584  	    in_transaction_id,
16:21:04 585  	    in_trans_date,
16:21:04 586  	    in_disputed_amount,
16:21:04 587  	    in_disputed_amount_currency,
16:21:04 588  	    in_dispute_reason,
16:21:04 589  	    in_dispute_filing_date,
16:21:04 590  	    in_dispute_status,
16:21:04 591  	    in_dispute_case_id,
16:21:04 592  	    in_invoice_id,
16:21:04 593  	    var_date,
16:21:04 594  	    in_created_by
16:21:04 595  	  );
16:21:04 596  
16:21:04 597  	out_pp_dispute_id := var_pp_dispute_id;
16:21:04 598  END CREATE_PP_DISPUTE;
16:21:04 599  
16:21:04 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
16:21:04 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
16:21:04 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
16:21:04 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:21:04 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
16:21:04 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
16:21:04 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
16:21:04 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
16:21:04 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
16:21:04 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
16:21:04 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
16:21:04 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
16:21:04 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
16:21:04 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
16:21:04 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
16:21:04 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
16:21:04 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
16:21:04 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
16:21:04 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
16:21:04 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
16:21:04 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
16:21:04 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
16:21:04 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
16:21:04 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
16:21:04 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
16:21:04 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
16:21:04 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
16:21:04 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
16:21:04 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
16:21:04 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
16:21:04 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
16:21:04 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
16:21:04 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
16:21:04 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
16:21:04 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
16:21:04 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
16:21:04 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
16:21:04 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
16:21:04 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
16:21:04 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
16:21:04 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
16:21:04 641  ) AS
16:21:04 642  -- VARIABLES
16:21:04 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
16:21:04 644  var_date DATE := SYSDATE;
16:21:04 645  BEGIN
16:21:04 646  	IF in_pp_trans_detail_id IS NULL THEN
16:21:04 647  	  SELECT
16:21:04 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
16:21:04 649  	  FROM DUAL;
16:21:04 650  	ELSE
16:21:04 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
16:21:04 652  	END IF;
16:21:04 653  	INSERT INTO
16:21:04 654  	  RCN_PP_TRANS_DETAIL (
16:21:04 655  	    id,
16:21:04 656  	    rcn_ext_source_log_id,
16:21:04 657  	    transaction_id,
16:21:04 658  	    invoice_id,
16:21:04 659  	    pp_ref_id,
16:21:04 660  	    trans_event_code,
16:21:04 661  	    trans_init_date,
16:21:04 662  	    trans_comp_date,
16:21:04 663  	    trans_deb_or_cred,
16:21:04 664  	    gross_trans_amount,
16:21:04 665  	    gross_trans_currency,
16:21:04 666  	    fee_deb_or_cred,
16:21:04 667  	    fee_amount,
16:21:04 668  	    fee_currency,
16:21:04 669  	    trans_status,
16:21:04 670  	    insurance_amount,
16:21:04 671  	    sales_tax_amount,
16:21:04 672  	    shipping_amount,
16:21:04 673  	    trans_subject,
16:21:04 674  	    trans_note,
16:21:04 675  	    payer_acct_id,
16:21:04 676  	    payer_addr_status,
16:21:04 677  	    item_name,
16:21:04 678  	    item_id,
16:21:04 679  	    option_1_name,
16:21:04 680  	    option_1_value,
16:21:04 681  	    option_2_name,
16:21:04 682  	    option_2_value,
16:21:04 683  	    auction_site,
16:21:04 684  	    auction_buyer_id,
16:21:04 685  	    auction_closing_date,
16:21:04 686  	    shipping_addr_line_1,
16:21:04 687  	    shipping_addr_line_2,
16:21:04 688  	    shipping_addr_city,
16:21:04 689  	    shipping_addr_state,
16:21:04 690  	    shipping_addr_zip,
16:21:04 691  	    shipping_addr_country,
16:21:04 692  	    custom_field,
16:21:04 693  	    create_date,
16:21:04 694  	    created_by
16:21:04 695  	  ) VALUES (
16:21:04 696  	    var_pp_trans_detail_id,
16:21:04 697  	    in_ext_source_log_id,
16:21:04 698  	    in_transaction_id,
16:21:04 699  	    in_invoice_id,
16:21:04 700  	    in_pp_ref_id,
16:21:04 701  	    in_trans_event_code,
16:21:04 702  	    in_trans_init_date,
16:21:04 703  	    in_trans_comp_date,
16:21:04 704  	    in_trans_deb_or_cred,
16:21:04 705  	    in_gross_trans_amount,
16:21:04 706  	    in_gross_trans_currency,
16:21:04 707  	    in_fee_deb_or_cred,
16:21:04 708  	    in_fee_amount,
16:21:04 709  	    in_fee_currency,
16:21:04 710  	    in_trans_status,
16:21:04 711  	    in_insurance_amount,
16:21:04 712  	    in_sales_tax_amount,
16:21:04 713  	    in_shipping_amount,
16:21:04 714  	    in_trans_subject,
16:21:04 715  	    in_trans_note,
16:21:04 716  	    in_payer_acct_id,
16:21:04 717  	    in_payer_addr_status,
16:21:04 718  	    in_item_name,
16:21:04 719  	    in_item_id,
16:21:04 720  	    in_option_1_name,
16:21:04 721  	    in_option_1_value,
16:21:04 722  	    in_option_2_name,
16:21:04 723  	    in_option_2_value,
16:21:04 724  	    in_auction_site,
16:21:04 725  	    in_auction_buyer_id,
16:21:04 726  	    in_auction_closing_date,
16:21:04 727  	    in_shipping_addr_line_1,
16:21:04 728  	    in_shipping_addr_line_2,
16:21:04 729  	    in_shipping_addr_city,
16:21:04 730  	    in_shipping_addr_state,
16:21:04 731  	    in_shipping_addr_zip,
16:21:04 732  	    in_shipping_addr_country,
16:21:04 733  	    in_custom_field,
16:21:04 734  	    var_date,
16:21:04 735  	    in_created_by
16:21:04 736  	  );
16:21:04 737  
16:21:04 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
16:21:04 739  END CREATE_PP_TRANS_DETAIL;
16:21:04 740  
16:21:04 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
16:21:04 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:21:04 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
16:21:04 744  ) AS
16:21:04 745  BEGIN
16:21:04 746  	DELETE FROM
16:21:04 747  	  RCN_EXT_SOURCE_LOG
16:21:04 748  	WHERE
16:21:04 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
16:21:04 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
16:21:04 751  END DELETE_EXT_SOURCE_LOG;
16:21:04 752  
16:21:04 753  PROCEDURE GET_EXT_SOURCE_LOG (
16:21:04 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:21:04 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
16:21:04 756  	out_result_set		 OUT SYS_REFCURSOR
16:21:04 757  ) AS
16:21:04 758  BEGIN
16:21:04 759  	OPEN out_result_set FOR
16:21:04 760  	SELECT * FROM
16:21:04 761  	  RCN_EXT_SOURCE_LOG
16:21:04 762  	WHERE
16:21:04 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
16:21:04 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
16:21:04 765  END GET_EXT_SOURCE_LOG;
16:21:04 766  
16:21:04 767  END PROCS_RECONCILIATION_CRU_V16;
16:21:04 768  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.09
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_SUBSCRIPTION(
16:21:04   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
16:21:04   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
16:21:04   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
16:21:04   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
16:21:04   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
16:21:04   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
16:21:04  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
16:21:04  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
16:21:04  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
16:21:04  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
16:21:04  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
16:21:04  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
16:21:04  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
16:21:04  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
16:21:04  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
16:21:04  19  ) AS
16:21:04  20  -- VARIABLES
16:21:04  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
16:21:04  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:04  23  var_date DATE := SYSDATE;
16:21:04  24  BEGIN
16:21:04  25  	IF in_subscription_id IS NULL THEN
16:21:04  26  	  SELECT
16:21:04  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
16:21:04  28  	  FROM DUAL;
16:21:04  29  	ELSE
16:21:04  30  	  var_new_subscription_id := in_subscription_id;
16:21:04  31  	END IF;
16:21:04  32  	INSERT INTO SUBSCRIPTION (
16:21:04  33  	  ID,
16:21:04  34  	  SUSPEND_DATE,
16:21:04  35  	  ACCOUNT_ID,
16:21:04  36  	  PURCHASE_DATE,
16:21:04  37  	  OFFER_CHAIN_ID,
16:21:04  38  	  TERMINATION_DATE,
16:21:04  39  	  DAYS_REMAINING_ADJUSTMENT,
16:21:04  40  	  SCT_ID,
16:21:04  41  	  CREATE_DATE,
16:21:04  42  	  CREATED_BY,
16:21:04  43  	  UPDATE_DATE,
16:21:04  44  	  UPDATED_BY,
16:21:04  45  	  INSTRUMENT_TYPE_ID,
16:21:04  46  	  INSTRUMENT_ID,
16:21:04  47  	  SUBSCRIPTION_STATUS_ID,
16:21:04  48  	  CANCELLATION_DATE,
16:21:04  49  	  REACTIVATION_DATE
16:21:04  50  	) VALUES (
16:21:04  51  	  var_new_subscription_id,
16:21:04  52  	  in_suspend_date,
16:21:04  53  	  in_account_id,
16:21:04  54  	  in_purchase_date,
16:21:04  55  	  in_offer_chain_id,
16:21:04  56  	  in_termination_date,
16:21:04  57  	  in_days_remainning_ajustment,
16:21:04  58  	  in_sct_id,
16:21:04  59  	  var_date,
16:21:04  60  	  in_created_by,
16:21:04  61  	  var_date,
16:21:04  62  	  in_created_by,
16:21:04  63  	  in_instrument_type_id,
16:21:04  64  	  in_instrument_id,
16:21:04  65  	  in_subscription_status_id,
16:21:04  66  	  in_cancelation_date,
16:21:04  67  	  in_reactivation_date
16:21:04  68  	);
16:21:04  69  
16:21:04  70  	out_subscription_id := var_new_subscription_id;
16:21:04  71  END CREATE_SUBSCRIPTION;
16:21:04  72  
16:21:04  73  /******************************************************************************/
16:21:04  74  
16:21:04  75  PROCEDURE UPDATE_SUBSCRIPTION(
16:21:04  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
16:21:04  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
16:21:04  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
16:21:04  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
16:21:04  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
16:21:04  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
16:21:04  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
16:21:04  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:21:04  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
16:21:04  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
16:21:04  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
16:21:04  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
16:21:04  88  ) AS
16:21:04  89  BEGIN
16:21:04  90  	-- Create history
16:21:04  91  	PROCS_HISTORY_V16.CREATE_SUBSCRIPTION_HISTORY(
16:21:04  92  	  in_subscription_id	       => in_subscription_id,
16:21:04  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:04  94  	);
16:21:04  95  
16:21:04  96  	UPDATE SUBSCRIPTION SET
16:21:04  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
16:21:04  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
16:21:04  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
16:21:04 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
16:21:04 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
16:21:04 102  	  UPDATE_DATE		    = SYSDATE,
16:21:04 103  	  UPDATED_BY		    = in_updated_by,
16:21:04 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
16:21:04 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
16:21:04 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
16:21:04 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
16:21:04 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
16:21:04 109  	WHERE
16:21:04 110  	  ID = in_subscription_id;
16:21:04 111  END UPDATE_SUBSCRIPTION;
16:21:04 112  
16:21:04 113  /******************************************************************************/
16:21:04 114  
16:21:04 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
16:21:04 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
16:21:04 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:21:04 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
16:21:04 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:21:04 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
16:21:04 121  ) AS
16:21:04 122  BEGIN
16:21:04 123  	IF inout_subscription_note_id IS NULL THEN
16:21:04 124  	  SELECT
16:21:04 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
16:21:04 126  	  FROM DUAL;
16:21:04 127  	END IF;
16:21:04 128  	INSERT INTO SUBSCRIPTION_NOTE (
16:21:04 129  	  ID,
16:21:04 130  	  AGENT_ID,
16:21:04 131  	  SUBSCRIPTION_ID,
16:21:04 132  	  NOTE,
16:21:04 133  	  CREATE_DATE,
16:21:04 134  	  CREATED_BY
16:21:04 135  	) VALUES (
16:21:04 136  	  inout_subscription_note_id,
16:21:04 137  	  in_agent_id,
16:21:04 138  	  in_subscription_id,
16:21:04 139  	  in_note,
16:21:04 140  	  SYSDATE,
16:21:04 141  	  in_created_by
16:21:04 142  	);
16:21:04 143  END CREATE_SUBSCRIPTION_NOTE;
16:21:04 144  
16:21:04 145  END PROCS_SUBSCRIPTION_CRU_V16;
16:21:04 146  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_TAX (
16:21:04   4  	inout_tax_id		 IN OUT NUMBER,
16:21:04   5  	in_tax_type_id		 IN NUMBER,
16:21:04   6  	in_calculated_amount	 IN NUMBER,
16:21:04   7  	in_created_by		 IN VARCHAR2,
16:21:04   8  	in_line_item_id 	 IN NUMBER,
16:21:04   9  	in_effective_rate	 IN VARCHAR2,
16:21:04  10  	in_taxable_amount	 IN NUMBER,
16:21:04  11  	in_tax_rule_id		 IN NUMBER,
16:21:04  12  	in_jurisdiction_level_id IN NUMBER,
16:21:04  13  	in_jurisdiction_name	 IN VARCHAR2,
16:21:04  14  	in_jurisdiction_id	 IN VARCHAR2,
16:21:04  15  	in_ext_tax_type 	 IN VARCHAR2,
16:21:04  16  	in_ext_result		 IN VARCHAR2,
16:21:04  17  	in_imposition_type	 IN VARCHAR2,
16:21:04  18  	in_imposition		 IN VARCHAR2
16:21:04  19  ) AS
16:21:04  20  var_date DATE := SYSDATE;
16:21:04  21  BEGIN
16:21:04  22  
16:21:04  23  	IF inout_tax_id IS NULL THEN
16:21:04  24  	  SELECT
16:21:04  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
16:21:04  26  	  FROM DUAL;
16:21:04  27  	END IF;
16:21:04  28  
16:21:04  29  	INSERT INTO TAX (
16:21:04  30  	  ID,
16:21:04  31  	  TAX_TYPE_ID,
16:21:04  32  	  CALCULATED_AMOUNT,
16:21:04  33  	  CREATE_DATE,
16:21:04  34  	  CREATED_BY,
16:21:04  35  	  LINE_ITEM_ID,
16:21:04  36  	  EFFECTIVE_RATE,
16:21:04  37  	  TAXABLE_AMOUNT,
16:21:04  38  	  TAX_RULE_ID,
16:21:04  39  	  JURISDICTION_LEVEL_ID,
16:21:04  40  	  JURISDICTION_NAME,
16:21:04  41  	  JURISDICTION_ID,
16:21:04  42  	  EXT_TAX_TYPE,
16:21:04  43  	  EXT_RESULT,
16:21:04  44  	  IMPOSITION_TYPE,
16:21:04  45  	  IMPOSITION
16:21:04  46  	) VALUES (
16:21:04  47  	  inout_tax_id,
16:21:04  48  	  in_tax_type_id,
16:21:04  49  	  in_calculated_amount,
16:21:04  50  	  var_date,
16:21:04  51  	  in_created_by,
16:21:04  52  	  in_line_item_id,
16:21:04  53  	  in_effective_rate,
16:21:04  54  	  in_taxable_amount,
16:21:04  55  	  in_tax_rule_id,
16:21:04  56  	  in_jurisdiction_level_id,
16:21:04  57  	  in_jurisdiction_name,
16:21:04  58  	  in_jurisdiction_id,
16:21:04  59  	  in_ext_tax_type,
16:21:04  60  	  in_ext_result,
16:21:04  61  	  in_imposition_type,
16:21:04  62  	  in_imposition
16:21:04  63  	);
16:21:04  64  
16:21:04  65  END CREATE_TAX;
16:21:04  66  
16:21:04  67  END PROCS_TAXES_CRU_V16;
16:21:04  68  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_TRANSACTION (
16:21:04   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
16:21:04   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
16:21:04   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
16:21:04   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
16:21:04   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
16:21:04   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
16:21:04  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:04  11  ) AS
16:21:04  12  -- VARIABLES
16:21:04  13  var_transaction_id TRANSACTION.ID%TYPE;
16:21:04  14  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:04  15  var_date DATE := SYSDATE;
16:21:04  16  BEGIN
16:21:04  17  	IF in_transaction_id IS NULL THEN
16:21:04  18  	  SELECT
16:21:04  19  	    TRN_ID_SEQ.nextVal into var_transaction_id
16:21:04  20  	  FROM DUAL;
16:21:04  21  	ELSE
16:21:04  22  	  var_transaction_id := in_transaction_id;
16:21:04  23  	END IF;
16:21:04  24  	INSERT INTO
16:21:04  25  	  TRANSACTION (
16:21:04  26  	    ID,
16:21:04  27  	    TRANSACTION_STATUS_ID,
16:21:04  28  	    TRANSACTION_AMOUNT,
16:21:04  29  	    CREATE_DATE,
16:21:04  30  	    CREATED_BY,
16:21:04  31  	    UPDATE_DATE,
16:21:04  32  	    UPDATED_BY,
16:21:04  33  	    ORDER_ID,
16:21:04  34  	    IS_REFUND
16:21:04  35  	  ) VALUES (
16:21:04  36  	    var_transaction_id,
16:21:04  37  	    in_transaction_status_id,
16:21:04  38  	    in_transaction_amount,
16:21:04  39  	    var_date,
16:21:04  40  	    in_created_by,
16:21:04  41  	    var_date,
16:21:04  42  	    in_created_by,
16:21:04  43  	    in_order_id,
16:21:04  44  	    in_is_refund
16:21:04  45  	  );
16:21:04  46  
16:21:04  47  	out_transaction_id := var_transaction_id;
16:21:04  48  END CREATE_TRANSACTION;
16:21:04  49  
16:21:04  50  /*******************************************************************/
16:21:04  51  
16:21:04  52  PROCEDURE UPDATE_TRANSACTION (
16:21:04  53  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
16:21:04  54  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
16:21:04  55  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
16:21:04  56  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
16:21:04  57  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
16:21:04  58  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
16:21:04  59  ) AS
16:21:04  60  BEGIN
16:21:04  61  	-- Create history
16:21:04  62  	PROCS_HISTORY_V16.CREATE_TRANSACTION_HISTORY(
16:21:04  63  	  in_transaction_id	       => in_transaction_id,
16:21:04  64  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:04  65  	);
16:21:04  66  	UPDATE
16:21:04  67  	  TRANSACTION
16:21:04  68  	SET
16:21:04  69  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
16:21:04  70  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
16:21:04  71  	  UPDATE_DATE		= SYSDATE,
16:21:04  72  	  UPDATED_BY		= in_updated_by,
16:21:04  73  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
16:21:04  74  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
16:21:04  75  	WHERE
16:21:04  76  	  ID = in_transaction_id;
16:21:04  77  END UPDATE_TRANSACTION;
16:21:04  78  
16:21:04  79  /*******************************************************************/
16:21:04  80  
16:21:04  81  PROCEDURE READ_TRANSACTION (
16:21:04  82  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:21:04  83  	out_result_set	  OUT SYS_REFCURSOR
16:21:04  84  ) AS
16:21:04  85  BEGIN
16:21:04  86  	OPEN out_result_set FOR
16:21:04  87  	SELECT
16:21:04  88  	  ID,
16:21:04  89  	  TRANSACTION_STATUS_ID,
16:21:04  90  	  TRANSACTION_AMOUNT,
16:21:04  91  	  CREATE_DATE,
16:21:04  92  	  CREATED_BY,
16:21:04  93  	  UPDATE_DATE,
16:21:04  94  	  UPDATED_BY,
16:21:04  95  	  ORDER_ID,
16:21:04  96  	  IS_REFUND,
16:21:04  97  	  IS_SETTLED
16:21:04  98  	FROM
16:21:04  99  	  TRANSACTION
16:21:04 100  	WHERE
16:21:04 101  	  ID = in_transaction_id;
16:21:04 102  END READ_TRANSACTION;
16:21:04 103  
16:21:04 104  /*******************************************************************/
16:21:04 105  
16:21:04 106  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
16:21:04 107  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
16:21:04 108  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
16:21:04 109  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
16:21:04 110  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:21:04 111  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
16:21:04 112  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
16:21:04 113  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
16:21:04 114  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
16:21:04 115  ) AS
16:21:04 116  BEGIN
16:21:04 117  	IF inout_transaction_attempt_id IS NULL THEN
16:21:04 118  	  SELECT
16:21:04 119  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
16:21:04 120  	  FROM DUAL;
16:21:04 121  	END IF;
16:21:04 122  	INSERT INTO TRANSACTION_ATTEMPT (
16:21:04 123  	  ID,
16:21:04 124  	  TRANSACTION_ID,
16:21:04 125  	  EXTERNAL_STATUS_CODE,
16:21:04 126  	  EXTERNAL_STATUS_MESSAGE,
16:21:04 127  	  CREATE_DATE,
16:21:04 128  	  CREATED_BY,
16:21:04 129  	  EXTERNAL_TRANSACTION_ID,
16:21:04 130  	  TRANSACTION_START_TIME,
16:21:04 131  	  TRANSACTION_ATTEMPT_STATUS_ID
16:21:04 132  	) VALUES (
16:21:04 133  	  inout_transaction_attempt_id,
16:21:04 134  	  in_transaction_id,
16:21:04 135  	  in_external_status_code,
16:21:04 136  	  in_external_status_message,
16:21:04 137  	  SYSDATE,
16:21:04 138  	  in_created_by,
16:21:04 139  	  in_external_transaction_id,
16:21:04 140  	  in_transaction_start_time,
16:21:04 141  	  in_status_id
16:21:04 142  	);
16:21:04 143  END;
16:21:04 144  
16:21:04 145  /*******************************************************************/
16:21:04 146  
16:21:04 147  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
16:21:04 148  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
16:21:04 149  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
16:21:04 150  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:21:04 151  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
16:21:04 152  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
16:21:04 153  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
16:21:04 154  ) AS
16:21:04 155  BEGIN
16:21:04 156  	UPDATE
16:21:04 157  	  TRANSACTION_ATTEMPT
16:21:04 158  	SET
16:21:04 159  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
16:21:04 160  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
16:21:04 161  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
16:21:04 162  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
16:21:04 163  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
16:21:04 164  	WHERE
16:21:04 165  	  ID = in_transaction_attempt_id;
16:21:04 166  END;
16:21:04 167  
16:21:04 168  /*******************************************************************/
16:21:04 169  
16:21:04 170  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:21:04 171  /*
16:21:04 172  Throws exceptions:
16:21:04 173  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:04 174  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
16:21:04 175  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04 176  */
16:21:04 177  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:21:04 178  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:21:04 179  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:21:04 180  ) AS
16:21:04 181  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
16:21:04 182  -- EXCEPTIONS
16:21:04 183  BAD_TRANSACTION_ID EXCEPTION;
16:21:04 184  BEGIN
16:21:04 185  
16:21:04 186  	PROCS_HISTORY_V16.CREATE_TRANSACTION_HISTORY(
16:21:04 187  	  in_transaction_id	       => in_transaction_id,
16:21:04 188  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:04 189  	);
16:21:04 190  
16:21:04 191  	UPDATE
16:21:04 192  	  TRANSACTION
16:21:04 193  	SET
16:21:04 194  	  TRANSACTION.ORDER_ID	 = in_order_id,
16:21:04 195  	  TRANSACTION.UPDATED_BY = in_updated_by,
16:21:04 196  	  TRANSACTION.UPDATE_DATE= SYSDATE
16:21:04 197  	WHERE
16:21:04 198  	  TRANSACTION.ID = in_transaction_id
16:21:04 199  	  AND TRANSACTION.ORDER_ID IS NULL;
16:21:04 200  
16:21:04 201  	IF SQL%ROWCOUNT = 0 THEN
16:21:04 202  	  RAISE BAD_TRANSACTION_ID;
16:21:04 203  	END IF;
16:21:04 204  EXCEPTION
16:21:04 205  WHEN BAD_TRANSACTION_ID THEN
16:21:04 206  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:04 207  	  SPROC_NAME, 'No such transaction');
16:21:04 208  END UPDATE_TRANSACTION_ORDER_ID;
16:21:04 209  
16:21:04 210  END PROCS_TRANSACTION_CRU_V16;
16:21:04 211  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_ADDRESS(
16:21:04   4  /*
16:21:04   5  Throws exceptions:
16:21:04   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04   7  */
16:21:04   8  	  out_address_id	OUT NUMBER,
16:21:04   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:21:04  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:21:04  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:21:04  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:21:04  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:04  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:21:04  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
16:21:04  16  ) AS
16:21:04  17  -- VARIABLES
16:21:04  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
16:21:04  19  -- EXCEPTIONS
16:21:04  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:04  21  BEGIN
16:21:04  22  
16:21:04  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V16.CREATE_ADDRESS(
16:21:04  24  	  out_address_id      => out_address_id,
16:21:04  25  	  in_address_id       => null,
16:21:04  26  	  in_address1	      => in_address1,
16:21:04  27  	  in_address2	      => in_address2,
16:21:04  28  	  in_city	      => in_city,
16:21:04  29  	  in_state	      => in_state,
16:21:04  30  	  in_postal_code      => in_postal_code,
16:21:04  31  	  in_country	      => in_country,
16:21:04  32  	  in_created_by       => in_created_by
16:21:04  33  	);
16:21:04  34  
16:21:04  35  END CREATE_ADDRESS;
16:21:04  36  
16:21:04  37  PROCEDURE UPDATE_ADDRESS(
16:21:04  38  /*
16:21:04  39  Throws exceptions:
16:21:04  40  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04  41  */
16:21:04  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
16:21:04  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:21:04  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:21:04  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:21:04  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:21:04  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:04  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:21:04  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
16:21:04  50  ) AS
16:21:04  51  BEGIN
16:21:04  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V16.UPDATE_ADDRESS(
16:21:04  53  	  in_address_id 	=> in_address_id,
16:21:04  54  	  in_address1		=> in_address1,
16:21:04  55  	  in_address2		=> in_address2,
16:21:04  56  	  in_city		=> in_city,
16:21:04  57  	  in_state		=> in_state,
16:21:04  58  	  in_postal_code	=> in_postal_code,
16:21:04  59  	  in_country		=> in_country,
16:21:04  60  	  in_updated_by 	=> in_updated_by
16:21:04  61  	);
16:21:04  62  END UPDATE_ADDRESS;
16:21:04  63  
16:21:04  64  PROCEDURE GET_ADDRESS (
16:21:04  65  /*
16:21:04  66  Throws exceptions:
16:21:04  67  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04  68  */
16:21:04  69  	  in_id 		IN ADDRESS.ID%TYPE,
16:21:04  70  	  out_result_set	OUT SYS_REFCURSOR
16:21:04  71  ) AS
16:21:04  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
16:21:04  73  BEGIN
16:21:04  74  
16:21:04  75  OPEN out_result_set FOR
16:21:04  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
16:21:04  77  
16:21:04  78  END GET_ADDRESS;
16:21:04  79  
16:21:04  80  END PROCS_ADDRESS_V16;
16:21:04  81  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
16:21:04   4  	in_invoice_id		  IN NUMBER,
16:21:04   5  	in_adjustment_reason	  IN VARCHAR2,
16:21:04   6  	in_is_credit		  IN NUMBER,
16:21:04   7  	in_charge_id		  IN NUMBER,
16:21:04   8  	in_business_date	  IN DATE,
16:21:04   9  	in_created_by		  IN VARCHAR2,
16:21:04  10  	out_invoice_adjustment_id OUT NUMBER
16:21:04  11  ) AS
16:21:04  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
16:21:04  13  -- VARIABLES
16:21:04  14  var_current_date	    DATE := SYSDATE;
16:21:04  15  var_new_entity_id     NUMBER;
16:21:04  16  var_inv_adj_reason_id NUMBER;
16:21:04  17  -- EXCEPTIONS
16:21:04  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
16:21:04  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
16:21:04  20  BEGIN
16:21:04  21  
16:21:04  22  	IF in_is_credit != GLOBAL_CONSTANTS_V16.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:04  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
16:21:04  24  	END IF;
16:21:04  25  
16:21:04  26  	BEGIN
16:21:04  27  	  SELECT
16:21:04  28  	    ID into var_inv_adj_reason_id
16:21:04  29  	  FROM
16:21:04  30  	    INVOICE_ADJUSTMENT_REASON
16:21:04  31  	  WHERE
16:21:04  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
16:21:04  33  	  EXCEPTION
16:21:04  34  	    WHEN NO_DATA_FOUND THEN
16:21:04  35  	      RAISE DAB_ADJUSTMENT_REASON;
16:21:04  36  	END;
16:21:04  37  
16:21:04  38  	SELECT
16:21:04  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
16:21:04  40  	FROM
16:21:04  41  	  DUAL;
16:21:04  42  
16:21:04  43  	INSERT INTO INVOICE_ADJUSTMENT (
16:21:04  44  	  ID,
16:21:04  45  	  INVOICE_ID,
16:21:04  46  	  INVOICE_ADJUSTMENT_REASON_ID,
16:21:04  47  	  IS_CREDIT,
16:21:04  48  	  CHARGE_ID,
16:21:04  49  	  ADJUSTMENT_DATE,
16:21:04  50  	  CREATE_DATE,
16:21:04  51  	  CREATED_BY,
16:21:04  52  	  UPDATE_DATE,
16:21:04  53  	  UPDATED_BY
16:21:04  54  	)
16:21:04  55  	VALUES (
16:21:04  56  	  var_new_entity_id,
16:21:04  57  	  in_invoice_id,
16:21:04  58  	  var_inv_adj_reason_id,
16:21:04  59  	  in_is_credit,
16:21:04  60  	  in_charge_id,
16:21:04  61  	  in_business_date,
16:21:04  62  	  var_current_date,
16:21:04  63  	  in_created_by,
16:21:04  64  	  var_current_date,
16:21:04  65  	  in_created_by
16:21:04  66  	);
16:21:04  67  
16:21:04  68  	out_invoice_adjustment_id := var_new_entity_id;
16:21:04  69  
16:21:04  70  EXCEPTION
16:21:04  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
16:21:04  72  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:04  73  	  SPROC_NAME, 'Bad in_is_credit value');
16:21:04  74  WHEN DAB_ADJUSTMENT_REASON THEN
16:21:04  75  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:04  76  	  SPROC_NAME, 'Bad adjustment reason');
16:21:04  77  WHEN OTHERS THEN
16:21:04  78  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04  80  END CREATE_INVOICE_ADJUSTMENT;
16:21:04  81  
16:21:04  82  /******************************************************************************/
16:21:04  83  
16:21:04  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
16:21:04  85  	  in_invoice_id 	    IN NUMBER,
16:21:04  86  	  in_original_charge_id     IN NUMBER,
16:21:04  87  	  in_charge_id		    IN NUMBER,
16:21:04  88  	  in_updated_by 	    IN VARCHAR2
16:21:04  89  ) AS
16:21:04  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
16:21:04  91  -- VARIABLES
16:21:04  92  var_invoice_adjustment_id NUMBER;
16:21:04  93  -- EXCEPTIONS
16:21:04  94  BAD_CHARGE_ID  EXCEPTION;
16:21:04  95  BEGIN
16:21:04  96  
16:21:04  97  	BEGIN
16:21:04  98  	  SELECT
16:21:04  99  	    id into var_invoice_adjustment_id
16:21:04 100  	  FROM
16:21:04 101  	    INVOICE_ADJUSTMENT
16:21:04 102  	  WHERE INVOICE_ID = in_invoice_id
16:21:04 103  	  AND CHARGE_ID = in_original_charge_id;
16:21:04 104  	  EXCEPTION
16:21:04 105  	    WHEN NO_DATA_FOUND THEN
16:21:04 106  	      RAISE BAD_CHARGE_ID;
16:21:04 107  	END;
16:21:04 108  
16:21:04 109  	--create history
16:21:04 110  	PROCS_HISTORY_V16.CREATE_INVOICE_ADJ_HISTORY(
16:21:04 111  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
16:21:04 112  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:04 113  	);
16:21:04 114  
16:21:04 115  	UPDATE INVOICE_ADJUSTMENT
16:21:04 116  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
16:21:04 117  	WHERE ID = var_invoice_adjustment_id;
16:21:04 118  
16:21:04 119  EXCEPTION
16:21:04 120  WHEN BAD_CHARGE_ID THEN
16:21:04 121  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:04 122  	  SPROC_NAME, 'Bad charge id');
16:21:04 123  WHEN OTHERS THEN
16:21:04 124  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 125  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 126  END UPDATE_INVOICE_ADJUSTMENT;
16:21:04 127  
16:21:04 128  /******************************************************************************/
16:21:04 129  
16:21:04 130  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
16:21:04 131  	in_line_item_id 	    IN NUMBER,
16:21:04 132  	in_invoice_adjustment_id    IN NUMBER,
16:21:04 133  	in_amount		    IN NUMBER,
16:21:04 134  	in_tax			    IN NUMBER,
16:21:04 135  	in_discount		    IN NUMBER,
16:21:04 136  	in_created_by		    IN VARCHAR2,
16:21:04 137  	out_line_item_adjustment_id OUT NUMBER
16:21:04 138  ) AS
16:21:04 139  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
16:21:04 140  -- VARIABLES
16:21:04 141  var_current_date DATE := SYSDATE;
16:21:04 142  var_new_entity_id NUMBER;
16:21:04 143  BEGIN
16:21:04 144  
16:21:04 145  	SELECT
16:21:04 146  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
16:21:04 147  	FROM
16:21:04 148  	  DUAL;
16:21:04 149  
16:21:04 150  	INSERT INTO LINE_ITEM_ADJUSTMENT (
16:21:04 151  	  ID,
16:21:04 152  	  LINE_ITEM_ID,
16:21:04 153  	  INVOICE_ADJUSTMENT_ID,
16:21:04 154  	  AMOUNT,
16:21:04 155  	  TAX,
16:21:04 156  	  DISCOUNT,
16:21:04 157  	  CREATE_DATE,
16:21:04 158  	  CREATED_BY
16:21:04 159  	)
16:21:04 160  	VALUES (
16:21:04 161  	  var_new_entity_id,
16:21:04 162  	  in_line_item_id,
16:21:04 163  	  in_invoice_adjustment_id,
16:21:04 164  	  in_amount,
16:21:04 165  	  in_tax,
16:21:04 166  	  in_discount,
16:21:04 167  	  var_current_date,
16:21:04 168  	  in_created_by
16:21:04 169  	);
16:21:04 170  
16:21:04 171  	out_line_item_adjustment_id := var_new_entity_id;
16:21:04 172  
16:21:04 173  EXCEPTION
16:21:04 174  WHEN OTHERS THEN
16:21:04 175  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 176  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 177  END CREATE_LINE_ITEM_ADJUSTMENT;
16:21:04 178  
16:21:04 179  /******************************************************************************/
16:21:04 180  
16:21:04 181  PROCEDURE CREATE_TAX_ADJUSTMENT (
16:21:04 182  	in_tax_id		   IN NUMBER,
16:21:04 183  	in_line_item_adjustment_id IN NUMBER,
16:21:04 184  	in_amount		   IN NUMBER,
16:21:04 185  	in_created_by		   IN VARCHAR2,
16:21:04 186  	out_tax_adjustment_id	   OUT NUMBER
16:21:04 187  ) AS
16:21:04 188  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
16:21:04 189  -- VARIABLES
16:21:04 190  var_current_date DATE := SYSDATE;
16:21:04 191  var_new_entity_id NUMBER;
16:21:04 192  BEGIN
16:21:04 193  
16:21:04 194  	SELECT
16:21:04 195  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
16:21:04 196  	FROM
16:21:04 197  	  DUAL;
16:21:04 198  
16:21:04 199  	INSERT INTO TAX_ADJUSTMENT (
16:21:04 200  	  ID,
16:21:04 201  	  TAX_ID,
16:21:04 202  	  LINE_ITEM_ADJUSTMENT_ID,
16:21:04 203  	  AMOUNT,
16:21:04 204  	  CREATE_DATE,
16:21:04 205  	  CREATED_BY
16:21:04 206  	)
16:21:04 207  	VALUES (
16:21:04 208  	  var_new_entity_id,
16:21:04 209  	  in_tax_id,
16:21:04 210  	  in_line_item_adjustment_id,
16:21:04 211  	  in_amount,
16:21:04 212  	  var_current_date,
16:21:04 213  	  in_created_by
16:21:04 214  	);
16:21:04 215  
16:21:04 216  	out_tax_adjustment_id := var_new_entity_id;
16:21:04 217  
16:21:04 218  EXCEPTION
16:21:04 219  WHEN OTHERS THEN
16:21:04 220  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 222  END CREATE_TAX_ADJUSTMENT;
16:21:04 223  
16:21:04 224  /******************************************************************************/
16:21:04 225  
16:21:04 226  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
16:21:04 227  	in_discount_id		   NUMBER,
16:21:04 228  	in_line_item_id 	   NUMBER,
16:21:04 229  	in_line_item_adjustment_id IN NUMBER,
16:21:04 230  	in_amount		   IN NUMBER,
16:21:04 231  	in_created_by		   IN VARCHAR2,
16:21:04 232  	out_discount_li_id	   OUT NUMBER
16:21:04 233  ) AS
16:21:04 234  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
16:21:04 235  -- VARIABLES
16:21:04 236  var_current_date DATE := SYSDATE;
16:21:04 237  var_new_entity_id NUMBER;
16:21:04 238  BEGIN
16:21:04 239  
16:21:04 240  	SELECT
16:21:04 241  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
16:21:04 242  	FROM
16:21:04 243  	  DUAL;
16:21:04 244  
16:21:04 245  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
16:21:04 246  	  ID,
16:21:04 247  	  DISCOUNT_ID,
16:21:04 248  	  LINE_ITEM_ID,
16:21:04 249  	  LINE_ITEM_ADJUSTMENT_ID,
16:21:04 250  	  AMOUNT,
16:21:04 251  	  CREATE_DATE,
16:21:04 252  	  CREATED_BY
16:21:04 253  	)
16:21:04 254  	VALUES (
16:21:04 255  	  var_new_entity_id,
16:21:04 256  	  in_discount_id,
16:21:04 257  	  in_line_item_id,
16:21:04 258  	  in_line_item_adjustment_id,
16:21:04 259  	  in_amount,
16:21:04 260  	  var_current_date,
16:21:04 261  	  in_created_by
16:21:04 262  	);
16:21:04 263  
16:21:04 264  	out_discount_li_id := var_new_entity_id;
16:21:04 265  
16:21:04 266  EXCEPTION
16:21:04 267  WHEN OTHERS THEN
16:21:04 268  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:04 269  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:04 270  END CREATE_DISCOUNT_LI_ADJUSTMENT;
16:21:04 271  
16:21:04 272  END PROCS_ADJUSTMENTS_V16;
16:21:04 273  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE GET_SUB_ADX_INFO (
16:21:04   4  /*
16:21:04   5  Throws exceptions:
16:21:04   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04   7  */
16:21:04   8  	out_result_set	    OUT SYS_REFCURSOR,
16:21:04   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
16:21:04  10  ) AS
16:21:04  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
16:21:04  12  BEGIN
16:21:04  13  OPEN out_result_set FOR
16:21:04  14  SELECT /*+ FIRST_ROWS(5) */
16:21:04  15  	s.offer_chain_id,
16:21:04  16  	s.create_date,
16:21:04  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
16:21:04  18  	ocmd.value,
16:21:04  19  	a.group_id,
16:21:04  20  	s.id subscription_id
16:21:04  21  FROM
16:21:04  22  	account a,
16:21:04  23  	subscription s,
16:21:04  24  	offer_chain_meta_data ocmd,
16:21:04  25  	group_account g,
16:21:04  26  	subscription_share ss,
16:21:04  27  	account a2
16:21:04  28  WHERE
16:21:04  29  	s.account_id = a.id and
16:21:04  30  	s.offer_chain_id = ocmd.offer_chain_id and
16:21:04  31  	g.id = ss.group_account_id and
16:21:04  32  	ss.borrower_account_id = a2.id and
16:21:04  33  	s.id = g.subscription_id and
16:21:04  34  	ocmd.name = 'ADX_BUNDLE' and
16:21:04  35  	a2.group_id = in_group_id and
16:21:04  36  	rownum < 5
16:21:04  37  union all
16:21:04  38  SELECT /*+ FIRST_ROWS(5) */
16:21:04  39  	s.offer_chain_id,
16:21:04  40  	s.create_date,
16:21:04  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
16:21:04  42  	ocmd.value,
16:21:04  43  	a.group_id,
16:21:04  44  	s.id subscription_id
16:21:04  45  FROM
16:21:04  46  	account a,
16:21:04  47  	subscription s,
16:21:04  48  	offer_chain_meta_data ocmd
16:21:04  49  WHERE
16:21:04  50  	s.account_id = a.id and
16:21:04  51  	s.offer_chain_id = ocmd.offer_chain_id and
16:21:04  52  	ocmd.name = 'ADX_BUNDLE' and
16:21:04  53  	a.group_id = in_group_id and
16:21:04  54  	rownum < 5
16:21:04  55  ;
16:21:04  56  
16:21:04  57  END GET_SUB_ADX_INFO;
16:21:04  58  
16:21:04  59  END PROCS_ADX_V16;
16:21:04  60  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.11
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V16" AS
16:21:04   2  
16:21:04   3  PROCEDURE CREATE_AMAZON_SUB(
16:21:04   4  /*
16:21:04   5  Throws exceptions:
16:21:04   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04   7  */
16:21:04   8  	  out_id	      OUT NUMBER,
16:21:04   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
16:21:04  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
16:21:04  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
16:21:04  12  ) AS
16:21:04  13  -- VARIABLES
16:21:04  14  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
16:21:04  15  -- EXCEPTIONS
16:21:04  16  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:04  17  BEGIN
16:21:04  18  
16:21:04  19  	CORE_OWNER.PROCS_AMAZON_CRU_V16.CREATE_AMAZON_SUB(
16:21:04  20  	  out_id	      =>  out_id,
16:21:04  21  	  in_subscription_id  =>  in_subscription_id,
16:21:04  22  	  in_amazon_id	      =>  in_amazon_id,
16:21:04  23  	  in_created_by       =>  in_created_by
16:21:04  24  	);
16:21:04  25  
16:21:04  26  END CREATE_AMAZON_SUB;
16:21:04  27  
16:21:04  28  PROCEDURE GET_ACTIVE_SUB_IDS (
16:21:04  29  /*
16:21:04  30  Throws exceptions:
16:21:04  31  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04  32  */
16:21:04  33  	out_result_set	    OUT SYS_REFCURSOR,
16:21:04  34  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
16:21:04  35  ) AS
16:21:04  36  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
16:21:04  37  BEGIN
16:21:04  38  OPEN out_result_set FOR
16:21:04  39  SELECT s.id
16:21:04  40  FROM subscription s, amazon_sub am
16:21:04  41  WHERE
16:21:04  42  	s.id = am.subscription_id
16:21:04  43  	and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:04  44  	and am.amazon_id = in_amazon_id
16:21:04  45  ;
16:21:04  46  
16:21:04  47  END GET_ACTIVE_SUB_IDS;
16:21:04  48  
16:21:04  49  PROCEDURE GET_ACTIVE_GROUP_IDS (
16:21:04  50  /*
16:21:04  51  Throws exceptions:
16:21:04  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:04  53  */
16:21:04  54  	out_result_set	    OUT SYS_REFCURSOR,
16:21:04  55  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
16:21:04  56  ) AS
16:21:04  57  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
16:21:04  58  BEGIN
16:21:04  59  OPEN out_result_set FOR
16:21:04  60  SELECT distinct a.group_id id
16:21:04  61  FROM subscription s, amazon_sub am, account a
16:21:04  62  WHERE
16:21:04  63  	s.id = am.subscription_id
16:21:04  64  	and a.id = s.account_id
16:21:04  65  	and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:04  66  	and am.amazon_id = in_amazon_id
16:21:04  67  ;
16:21:04  68  
16:21:04  69  END GET_ACTIVE_GROUP_IDS;
16:21:04  70  
16:21:04  71  END PROCS_AMAZON_V16;
16:21:04  72  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:21:04 SQL> 
16:21:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
16:21:04   2  
16:21:04   3  	/****************************************************************************/
16:21:04   4  
16:21:04   5  	PROCEDURE POPULATE_REQUEST_INFO(
16:21:04   6  	  in_hours_prior    IN	NUMBER,
16:21:04   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
16:21:04   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
16:21:04   9  	) AS
16:21:04  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
16:21:04  11  	var_start_date	    DATE := SYSDATE;
16:21:04  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
16:21:04  13  	var_request_file_id NUMBER := 0;
16:21:04  14  	var_license_count   NUMBER := 0;
16:21:04  15  	var_cc_update_count NUMBER := 0;
16:21:04  16  	BEGIN
16:21:04  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
16:21:04  18  	    INSERT INTO CC_REQUEST_FILE (ID,
16:21:04  19  					 FILE_NAME,
16:21:04  20  					 CC_REQUEST_FILE_STATUS,
16:21:04  21  					 CREATE_DATE,
16:21:04  22  					 CREATED_BY,
16:21:04  23  					 UPDATE_DATE,
16:21:04  24  					 UPDATED_BY)
16:21:04  25  					 VALUES (
16:21:04  26  					 var_request_file_id,
16:21:04  27  					 in_filename,
16:21:04  28  					 'NOT_CREATED',
16:21:04  29  					 var_start_date,
16:21:04  30  					 in_creator,
16:21:04  31  					 var_start_date,
16:21:04  32  					 in_creator);
16:21:04  33  
16:21:04  34  	   FOR record IN (SELECT
16:21:04  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
16:21:04  36  			  FROM
16:21:04  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
16:21:04  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
16:21:04  39  			  WHERE
16:21:04  40  			    s.INSTRUMENT_TYPE_ID	 = 1
16:21:04  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
16:21:04  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
16:21:04  43  			    AND l.LICENSE_STATUS_ID	 = 2
16:21:04  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
16:21:04  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
16:21:04  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
16:21:04  47  	   LOOP
16:21:04  48  	     var_license_count := 0;
16:21:04  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
16:21:04  50  
16:21:04  51  	     IF var_license_count = 0 THEN
16:21:04  52  		INSERT INTO CC_UPDATE (ID,
16:21:04  53  				       CREDIT_CARD_ID,
16:21:04  54  				       LICENSE_ID,
16:21:04  55  				       CC_UPDATE_STATUS,
16:21:04  56  				       CC_REQUEST_FILE_ID,
16:21:04  57  				       CREATE_DATE,
16:21:04  58  				       UPDATE_DATE,
16:21:04  59  				       CREATED_BY,
16:21:04  60  				       UPDATED_BY
16:21:04  61  				       ) VALUES (
16:21:04  62  				       CC_UPDATE_SEQ.NEXTVAL,
16:21:04  63  				       record.CREDIT_CARD_ID,
16:21:04  64  				       record.LICENSE_ID,
16:21:04  65  				       'NOT_ADDED_TO_FILE',
16:21:04  66  				       var_request_file_id,
16:21:04  67  				       var_start_date,
16:21:04  68  				       var_start_date,
16:21:04  69  				       in_creator,
16:21:04  70  				       in_creator
16:21:04  71  				       );
16:21:04  72  	     END IF;
16:21:04  73  	   END LOOP;
16:21:04  74  
16:21:04  75  	   SELECT COUNT(1) INTO var_cc_update_count
16:21:04  76  	   FROM CC_UPDATE
16:21:04  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
16:21:04  78  	   IF var_cc_update_count <= 0 THEN
16:21:04  79  	     UPDATE CC_REQUEST_FILE
16:21:04  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
16:21:04  81  	     WHERE ID = var_request_file_id;
16:21:04  82  	   END IF;
16:21:04  83  
16:21:04  84  	END POPULATE_REQUEST_INFO;
16:21:04  85  
16:21:04  86  	/****************************************************************************/
16:21:04  87  
16:21:04  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
16:21:04  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:21:04  90  	  in_start	     IN NUMBER,
16:21:04  91  	  in_end	     IN NUMBER,
16:21:04  92  	  out_result_set     OUT SYS_REFCURSOR
16:21:04  93  	) AS
16:21:04  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
16:21:04  95  	var_range_diff	    NUMBER := 0;
16:21:04  96  	var_upper_bond_diff NUMBER := 0;
16:21:04  97  	var_l_start	    NUMBER := 0;
16:21:04  98  	var_l_end	    NUMBER := 0;
16:21:04  99  	BEGIN
16:21:04 100  	  --Normalize the end points [START]
16:21:04 101  	  IF (in_start IS NULL OR in_start < 0) Then
16:21:04 102  	    var_l_start := 0;
16:21:04 103  	  ELSE
16:21:04 104  	    var_l_start := in_start;
16:21:04 105  	  END IF;
16:21:04 106  
16:21:04 107  	  IF (in_end IS NULL) Then
16:21:04 108  	    var_l_end := 500;
16:21:04 109  	  ELSE
16:21:04 110  	    var_l_end := in_end;
16:21:04 111  	  END IF;
16:21:04 112  
16:21:04 113  	  var_l_start := var_l_start + 1;
16:21:04 114  	  var_l_end   := var_l_end   + 1;
16:21:04 115  
16:21:04 116  	  var_range_diff  := var_l_end - var_l_start;
16:21:04 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
16:21:04 118  
16:21:04 119  	  IF (var_upper_bond_diff > 0) Then
16:21:04 120  	    var_l_end := var_l_end - var_upper_bond_diff;
16:21:04 121  	  END IF;
16:21:04 122  	  --Normalize the end points [END]
16:21:04 123  
16:21:04 124  	  OPEN out_result_set FOR
16:21:04 125  	    SELECT CHASE_PROFILE_ID FROM
16:21:04 126  	      (SELECT rownum rnum, q.* FROM
16:21:04 127  		 (SELECT
16:21:04 128  		    cc.CHASE_PROFILE_ID
16:21:04 129  		  FROM
16:21:04 130  		    CREDIT_CARD cc,
16:21:04 131  		    CC_UPDATE ccu
16:21:04 132  		  WHERE
16:21:04 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
16:21:04 134  		    AND ccu.CREDIT_CARD_ID = cc.id
16:21:04 135  		) Q
16:21:04 136  	      WHERE rownum <= var_l_end)
16:21:04 137  	    WHERE rnum >= var_l_Start;
16:21:04 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
16:21:04 139  
16:21:04 140  	/****************************************************************************/
16:21:04 141  
16:21:04 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
16:21:04 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
16:21:04 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
16:21:04 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
16:21:04 146  	)AS
16:21:04 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
16:21:04 148  	BEGIN
16:21:04 149  	  UPDATE CC_REQUEST_FILE
16:21:04 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
16:21:04 151  	      UPDATE_DATE = SYSDATE,
16:21:04 152  	      UPDATED_BY  = in_updated_by
16:21:04 153  	  WHERE ID = in_request_file_id;
16:21:04 154  	END UPDATE_REQUEST_FILE_STATUS;
16:21:04 155  
16:21:04 156  	/****************************************************************************/
16:21:04 157  
16:21:04 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
16:21:04 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:21:04 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:21:04 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
16:21:04 162  	) AS
16:21:04 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
16:21:04 164  	BEGIN
16:21:04 165  	  UPDATE CC_UPDATE
16:21:04 166  	  SET CC_UPDATE_STATUS = in_status,
16:21:04 167  	      UPDATE_DATE      = SYSDATE,
16:21:04 168  	      UPDATED_BY       = in_updated_by
16:21:04 169  	  WHERE
16:21:04 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
16:21:04 171  	END UPDATE_CC_REQUEST_STATUS;
16:21:04 172  
16:21:04 173  	/****************************************************************************/
16:21:04 174  
16:21:04 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
16:21:04 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
16:21:04 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
16:21:04 178  	  out_request_files   OUT SYS_REFCURSOR
16:21:04 179  	) AS
16:21:04 180  	var_older_than_hours NUMBER := in_older_than_hours;
16:21:04 181  	BEGIN
16:21:04 182  	 IF (var_older_than_hours IS NULL) THEN
16:21:04 183  	   var_older_than_hours := -288;
16:21:04 184  	 END IF;
16:21:04 185  
16:21:04 186  	 OPEN out_request_files FOR
16:21:04 187  	 SELECT
16:21:04 188  	   ID,
16:21:04 189  	   FILE_NAME
16:21:04 190  	 FROM
16:21:04 191  	   CC_REQUEST_FILE
16:21:04 192  	 WHERE
16:21:04 193  	   CC_REQUEST_FILE_STATUS = in_status
16:21:04 194  	 AND
16:21:04 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
16:21:04 196  	END REQUEST_FILES_BY_STATUS;
16:21:04 197  
16:21:04 198  	/****************************************************************************/
16:21:04 199  
16:21:04 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
16:21:04 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:21:04 202  	  out_count OUT NUMBER
16:21:04 203  	) AS
16:21:04 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
16:21:04 205  	BEGIN
16:21:04 206  	  SELECT COUNT(1) INTO out_count
16:21:04 207  	  FROM CC_UPDATE
16:21:04 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
16:21:04 209  	END COUNT_BY_REQUEST_FILE_ID;
16:21:04 210  
16:21:04 211  	/****************************************************************************/
16:21:04 212  
16:21:04 213  	PROCEDURE GET_CREDIT_CARD_LICENSE (
16:21:04 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
16:21:04 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
16:21:04 216  	  out_card_license     OUT SYS_REFCURSOR
16:21:04 217  	) AS
16:21:04 218  	BEGIN
16:21:04 219  	  OPEN out_card_license FOR
16:21:04 220  	  SELECT
16:21:04 221  	    cc.ID CREDIT_CARD_ID,
16:21:04 222  	    cc.CHASE_PROFILE_ID,
16:21:04 223  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
16:21:04 224  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
16:21:04 225  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
16:21:04 226  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
16:21:04 227  	    a.GROUP_ID,
16:21:04 228  	    u.LICENSE_ID,
16:21:04 229  	    u.ID CC_UPDATE_ID,
16:21:04 230  	    l.END_DATE LICENSE_END_DATE,
16:21:04 231  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
16:21:04 232  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf, ACCOUNT a, LICENSE l
16:21:04 233  	  WHERE cc.ID = u.CREDIT_CARD_ID
16:21:04 234  	  AND u.CC_REQUEST_FILE_ID = rf.ID
16:21:04 235  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
16:21:04 236  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
16:21:04 237  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
16:21:04 238  	  AND cc.ACCOUNT_ID = a.ID
16:21:04 239  	  AND u.LICENSE_ID = l.ID
16:21:04 240  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
16:21:04 241  	  AND SYSDATE BETWEEN l.START_DATE and l.END_DATE
16:21:04 242  	  ORDER BY cc.UPDATE_DATE DESC;
16:21:04 243  	END GET_CREDIT_CARD_LICENSE;
16:21:04 244  
16:21:04 245  	/****************************************************************************/
16:21:04 246  
16:21:04 247  	PROCEDURE UPDATE_CC_UPDATE(
16:21:04 248  	  in_id 	     IN CC_UPDATE.ID%TYPE,
16:21:04 249  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:21:04 250  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
16:21:04 251  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
16:21:04 252  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
16:21:04 253  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:21:04 254  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
16:21:04 255  	) AS
16:21:04 256  	BEGIN
16:21:04 257  	  UPDATE CC_UPDATE
16:21:04 258  	  SET CC_UPDATE_STATUS = in_status,
16:21:04 259  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
16:21:04 260  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
16:21:04 261  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
16:21:04 262  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
16:21:04 263  	  UPDATE_DATE = SYSDATE,
16:21:04 264  	  UPDATED_BY = in_updated_by
16:21:04 265  	  WHERE ID = in_id;
16:21:04 266  	END UPDATE_CC_UPDATE;
16:21:04 267  
16:21:04 268  	/****************************************************************************/
16:21:04 269  
16:21:04 270  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
16:21:04 271  	  in_id 	IN CC_UPDATE.ID%TYPE,
16:21:04 272  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:21:04 273  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
16:21:04 274  	) AS
16:21:04 275  	BEGIN
16:21:04 276  	  UPDATE CC_UPDATE
16:21:04 277  	  SET CC_UPDATE_STATUS = in_status,
16:21:04 278  	  UPDATE_DATE = SYSDATE,
16:21:04 279  	  UPDATED_BY = in_updated_by
16:21:04 280  	  WHERE ID = in_id;
16:21:04 281  	END UPDATE_CC_UPDATE_STATUS;
16:21:04 282  
16:21:04 283  	/****************************************************************************/
16:21:04 284  
16:21:04 285  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
16:21:04 286  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
16:21:04 287  	  out_request_file     OUT SYS_REFCURSOR
16:21:04 288  	) AS
16:21:04 289  	BEGIN
16:21:04 290  	  OPEN out_request_file FOR
16:21:04 291  	  SELECT ID, FILE_NAME
16:21:04 292  	  FROM CC_REQUEST_FILE
16:21:04 293  	  WHERE FILE_NAME = in_request_filename;
16:21:04 294  	END GET_REQUEST_FILE_BY_FILENAME;
16:21:04 295  
16:21:04 296  	/****************************************************************************/
16:21:04 297  
16:21:04 298  	PROCEDURE SUSPEND_CREDIT_CARD (
16:21:04 299  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
16:21:04 300  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
16:21:04 301  	) AS
16:21:04 302  	BEGIN
16:21:04 303  	  -- Create history
16:21:04 304  	  PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
16:21:04 305  	      in_credit_card_id 	   => in_credit_card_id,
16:21:04 306  	      in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:04 307  	  );
16:21:04 308  
16:21:04 309  	  UPDATE CREDIT_CARD
16:21:04 310  	  SET UPDATE_DATE = SYSDATE,
16:21:04 311  	  UPDATED_BY = in_updated_by,
16:21:04 312  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
16:21:04 313  	  WHERE ID = in_credit_card_id;
16:21:04 314  	END SUSPEND_CREDIT_CARD;
16:21:04 315  
16:21:04 316  	/****************************************************************************/
16:21:04 317  
16:21:04 318  	PROCEDURE UPDATE_CREDIT_CARD (
16:21:04 319  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
16:21:04 320  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:21:04 321  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
16:21:04 322  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
16:21:04 323  	) AS
16:21:04 324  	BEGIN
16:21:04 325  	  -- Create history
16:21:04 326  	  PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
16:21:04 327  	      in_credit_card_id 	   => in_credit_card_id,
16:21:04 328  	      in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
16:21:04 329  	  );
16:21:04 330  
16:21:04 331  	  UPDATE CREDIT_CARD
16:21:04 332  	  SET UPDATE_DATE = SYSDATE,
16:21:04 333  	  UPDATED_BY = in_updated_by,
16:21:04 334  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
16:21:04 335  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
16:21:04 336  	  WHERE ID = in_credit_card_id;
16:21:04 337  	END UPDATE_CREDIT_CARD;
16:21:04 338  
16:21:04 339  	/****************************************************************************/
16:21:04 340  
16:21:04 341  	PROCEDURE COMPLETABLE_REQUESTS (
16:21:04 342  	  out_request_files OUT SYS_REFCURSOR
16:21:04 343  	) AS
16:21:04 344  	BEGIN
16:21:04 345  	  OPEN out_request_files FOR
16:21:04 346  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
16:21:04 347  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
16:21:04 348  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
16:21:04 349  	  AND rf.ID = u.CC_REQUEST_FILE_ID
16:21:04 350  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
16:21:04 351  	  MINUS
16:21:04 352  	  SELECT rf.ID, rf.FILE_NAME
16:21:04 353  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
16:21:04 354  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
16:21:04 355  	  AND rf.ID = u.CC_REQUEST_FILE_ID
16:21:04 356  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
16:21:04 357  	END COMPLETABLE_REQUESTS;
16:21:04 358  
16:21:04 359  	/****************************************************************************/
16:21:04 360  
16:21:04 361  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
16:21:04 362  	  in_max_hours_before_report IN  NUMBER,
16:21:04 363  	  out_request_files	     OUT SYS_REFCURSOR
16:21:04 364  	) AS
16:21:04 365  	BEGIN
16:21:04 366  	  OPEN out_request_files FOR
16:21:04 367  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
16:21:04 368  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
16:21:04 369  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
16:21:04 370  	  AND rf.ID = u.CC_REQUEST_FILE_ID
16:21:04 371  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
16:21:04 372  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
16:21:04 373  	  MINUS
16:21:04 374  	  SELECT rf.ID, rf.FILE_NAME
16:21:04 375  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
16:21:04 376  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
16:21:04 377  	  AND rf.ID = u.CC_REQUEST_FILE_ID
16:21:04 378  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
16:21:04 379  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
16:21:04 380  	END COMPLETABLE_REQUESTS_W_FAILS;
16:21:04 381  
16:21:04 382  END PROCS_CUPY;
16:21:04 383  .
16:21:04 SQL> /

Package body created.

Elapsed: 00:00:00.82
16:21:05 SQL> 
16:21:05 SQL> CREATE OR REPLACE
16:21:05   2  PACKAGE BODY PROCS_ENTITLEMENT_V16 AS
16:21:05   3  
16:21:05   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
16:21:05   5  	  in_subscription_id IN NUMBER,
16:21:05   6  	  out_uri OUT VARCHAR2)
16:21:05   7  	AS
16:21:05   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
16:21:05   9  	  UNKNOWN_ERROR   EXCEPTION;
16:21:05  10  	BEGIN
16:21:05  11  	  SELECT
16:21:05  12  	    POMD.VALUE INTO out_uri
16:21:05  13  	  FROM
16:21:05  14  	     OFFER_PRODUCT_OFFERING OPO,
16:21:05  15  	     PRODUCT_OFFERING PO,
16:21:05  16  	     OFFER_OFFER_CHAIN OOC,
16:21:05  17  	     SUBSCRIPTION S,
16:21:05  18  	     LICENSE LL,
16:21:05  19  	     PRODUCT_OFFERING_META_DATA POMD
16:21:05  20  	  WHERE
16:21:05  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
16:21:05  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
16:21:05  23  	     S.ID = in_subscription_id AND
16:21:05  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
16:21:05  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
16:21:05  26  	     PO.CAPABILITY_ID = 1 AND
16:21:05  27  	     S.ID = LL.SUBSCRIPTION_ID AND
16:21:05  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
16:21:05  29  	     NAME = 'entitlement_uri' AND
16:21:05  30  	     rownum < 2;
16:21:05  31  	EXCEPTION
16:21:05  32  	  WHEN OTHERS THEN
16:21:05  33  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
16:21:05  36  
16:21:05  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
16:21:05  38  	  in_group_id	 IN  NUMBER,
16:21:05  39  	  out_result_set OUT SYS_REFCURSOR)
16:21:05  40  	AS
16:21:05  41  	  -- CONSTANTS
16:21:05  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
16:21:05  43  	  -- EXCEPTIONS
16:21:05  44  	  NOT_FOUND	  EXCEPTION;
16:21:05  45  	  UNKNOWN_ERROR   EXCEPTION;
16:21:05  46  	  -- VARIABLES
16:21:05  47  	  var_subs	  SYS_REFCURSOR;
16:21:05  48  	BEGIN
16:21:05  49  	  OPEN out_result_set FOR
16:21:05  50  
16:21:05  51  	SELECT
16:21:05  52  	  C.CODE NAME,
16:21:05  53  	  C.DESCRIPTION,
16:21:05  54  	  0 INHERITED,
16:21:05  55  	  C.SHAREABLE,
16:21:05  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
16:21:05  57  	FROM
16:21:05  58  	  SUBSCRIPTION SB
16:21:05  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
16:21:05  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
16:21:05  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
16:21:05  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
16:21:05  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
16:21:05  64  	WHERE
16:21:05  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
16:21:05  66  	  AND LIC.START_DATE <= SYSDATE
16:21:05  67  	  AND AC.GROUP_ID = in_group_id
16:21:05  68  	GROUP BY
16:21:05  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
16:21:05  70  UNION ALL
16:21:05  71  	SELECT
16:21:05  72  	  C.CODE NAME,
16:21:05  73  	  C.DESCRIPTION,
16:21:05  74  	  1 INHERITED,
16:21:05  75  	  C.SHAREABLE,
16:21:05  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
16:21:05  77  	FROM
16:21:05  78  	  ACCOUNT BORROWER,
16:21:05  79  	  SUBSCRIPTION S,
16:21:05  80  	  LICENSE LIC,
16:21:05  81  	  OFFER_PRODUCT_OFFERING OPO,
16:21:05  82  	  PRODUCT_OFFERING PO,
16:21:05  83  	  CAPABILITY C,
16:21:05  84  	  GROUP_ACCOUNT GA,
16:21:05  85  	  SUBSCRIPTION_SHARE SS
16:21:05  86  	WHERE
16:21:05  87  	  BORROWER.GROUP_ID = in_group_id
16:21:05  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
16:21:05  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
16:21:05  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
16:21:05  91  	  AND PO.CAPABILITY_ID = C.ID
16:21:05  92  	  AND GA.SUBSCRIPTION_ID = S.ID
16:21:05  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
16:21:05  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
16:21:05  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
16:21:05  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
16:21:05  97  	  AND C.SHAREABLE = 1
16:21:05  98  	GROUP BY
16:21:05  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
16:21:05 100  
16:21:05 101  	EXCEPTION
16:21:05 102  	  WHEN OTHERS THEN
16:21:05 103  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 105  	END GET_ALL_ENTITLEMENTS;
16:21:05 106  
16:21:05 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
16:21:05 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:05 109  	  out_result_set OUT SYS_REFCURSOR)
16:21:05 110  	AS
16:21:05 111  	  -- CONSTANTS
16:21:05 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
16:21:05 113  	  -- EXCEPTIONS
16:21:05 114  	  NOT_FOUND	  EXCEPTION;
16:21:05 115  	  UNKNOWN_ERROR   EXCEPTION;
16:21:05 116  	  -- VARIABLES
16:21:05 117  	  var_subs	  SYS_REFCURSOR;
16:21:05 118  	BEGIN
16:21:05 119  	  OPEN out_result_set FOR
16:21:05 120  
16:21:05 121  	      SELECT
16:21:05 122  		c.code NAME,
16:21:05 123  		C.DESCRIPTION,
16:21:05 124  		0 INHERITED,
16:21:05 125  		C.SHAREABLE,
16:21:05 126  		sysdate as EXPIRES
16:21:05 127  	      FROM
16:21:05 128  		offer_offer_chain ooc,
16:21:05 129  		offer o,
16:21:05 130  		offer_product_offering opo,
16:21:05 131  		product_offering po,
16:21:05 132  		capability c
16:21:05 133  	      WHERE
16:21:05 134  		o.id = ooc.offer_id AND
16:21:05 135  		opo.offer_id = o.id AND
16:21:05 136  		po.id = opo.product_offering_id AND
16:21:05 137  		c.id = po.capability_id AND
16:21:05 138  		c.id !=0 AND
16:21:05 139  		ooc.offer_chain_id =
16:21:05 140  		(SELECT
16:21:05 141  		    ocmd.offer_chain_id
16:21:05 142  		  FROM
16:21:05 143  		      offer_chain_meta_data ocmd
16:21:05 144  		  WHERE
16:21:05 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
16:21:05 146  		      ocmd.value = in_product_id AND
16:21:05 147  		      rownum < 2
16:21:05 148  		)
16:21:05 149  	      ;
16:21:05 150  
16:21:05 151  	EXCEPTION
16:21:05 152  	  WHEN OTHERS THEN
16:21:05 153  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 155  	END GET_ITUNES_ENTITLEMENTS;
16:21:05 156  
16:21:05 157  END PROCS_ENTITLEMENT_V16;
16:21:05 158  .
16:21:05 SQL> /

Package body created.

Elapsed: 00:00:00.06
16:21:05 SQL> 
16:21:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V16" AS
16:21:05   2  
16:21:05   3  PROCEDURE CREATE_ADDRESS_HISTORY(
16:21:05   4  	in_address_id		     IN NUMBER,
16:21:05   5  	in_system_activity_reason_id IN NUMBER
16:21:05   6  ) AS
16:21:05   7  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
16:21:05   8  -- VARIABLES
16:21:05   9  var_address1    ADDRESS.ADDRESS1%TYPE;
16:21:05  10  var_address2    ADDRESS.ADDRESS2%TYPE;
16:21:05  11  var_city	      ADDRESS.CITY%TYPE;
16:21:05  12  var_state       ADDRESS.STATE%TYPE;
16:21:05  13  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
16:21:05  14  var_country     ADDRESS.COUNTRY%TYPE;
16:21:05  15  var_created_by  ADDRESS.CREATED_BY%TYPE;
16:21:05  16  var_create_date ADDRESS.CREATE_DATE%TYPE;
16:21:05  17  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
16:21:05  18  var_update_date ADDRESS.UPDATE_DATE%TYPE;
16:21:05  19  -- EXCEPTIONS
16:21:05  20  BAD_ADDRESS_ID	     EXCEPTION;
16:21:05  21  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:21:05  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05  23  BEGIN
16:21:05  24  
16:21:05  25  	BEGIN
16:21:05  26  	  SELECT
16:21:05  27  	    ADDRESS.ADDRESS1,
16:21:05  28  	    ADDRESS.ADDRESS2,
16:21:05  29  	    ADDRESS.CITY,
16:21:05  30  	    ADDRESS.STATE,
16:21:05  31  	    ADDRESS.POSTAL_CODE,
16:21:05  32  	    ADDRESS.COUNTRY,
16:21:05  33  	    ADDRESS.CREATED_BY,
16:21:05  34  	    ADDRESS.CREATE_DATE,
16:21:05  35  	    ADDRESS.UPDATED_BY,
16:21:05  36  	    ADDRESS.UPDATE_DATE
16:21:05  37  	    into
16:21:05  38  	    var_address1,
16:21:05  39  	    var_address2,
16:21:05  40  	    var_city,
16:21:05  41  	    var_state,
16:21:05  42  	    var_postal_code,
16:21:05  43  	    var_country,
16:21:05  44  	    var_created_by,
16:21:05  45  	    var_create_date,
16:21:05  46  	    var_updated_by,
16:21:05  47  	    var_update_date
16:21:05  48  	  FROM
16:21:05  49  	    ADDRESS
16:21:05  50  	  WHERE
16:21:05  51  	    ADDRESS.ID = in_address_id;
16:21:05  52  	  EXCEPTION
16:21:05  53  	    WHEN NO_DATA_FOUND THEN
16:21:05  54  	      RAISE BAD_ADDRESS_ID;
16:21:05  55  	END;
16:21:05  56  
16:21:05  57  	BEGIN
16:21:05  58  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ADDRESS_HISTORY(
16:21:05  59  	    in_address_id,
16:21:05  60  	    in_system_activity_reason_id,
16:21:05  61  	    var_address1,
16:21:05  62  	    var_address2,
16:21:05  63  	    var_city,
16:21:05  64  	    var_state,
16:21:05  65  	    var_postal_code,
16:21:05  66  	    var_country,
16:21:05  67  	    var_created_by,
16:21:05  68  	    var_create_date,
16:21:05  69  	    var_updated_by,
16:21:05  70  	    var_update_date
16:21:05  71  	  );
16:21:05  72  	  EXCEPTION
16:21:05  73  	    WHEN OTHERS THEN
16:21:05  74  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05  75  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05  76  	END;
16:21:05  77  
16:21:05  78  EXCEPTION
16:21:05  79  WHEN BAD_ADDRESS_ID THEN
16:21:05  80  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05  81  	  SPROC_NAME, 'Bad recipientAddress id');
16:21:05  82  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05  83  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05  84  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05  85  WHEN OTHERS THEN
16:21:05  86  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05  87  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05  88  END CREATE_ADDRESS_HISTORY;
16:21:05  89  
16:21:05  90  /********************************************************************/
16:21:05  91  
16:21:05  92  PROCEDURE CREATE_ACCOUNT_HISTORY(
16:21:05  93  	in_account_id		     IN NUMBER,
16:21:05  94  	in_system_activity_reason_id IN NUMBER
16:21:05  95  ) AS
16:21:05  96  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
16:21:05  97  -- VARIABLES
16:21:05  98  var_account_status_id  NUMBER;
16:21:05  99  var_suspend_date	     DATE;
16:21:05 100  var_group_id	     NUMBER;
16:21:05 101  var_instrument_type_id NUMBER;
16:21:05 102  var_instrument_id      NUMBER;
16:21:05 103  var_updated_by	     VARCHAR2(255);
16:21:05 104  var_update_date	     DATE;
16:21:05 105  -- EXCEPTIONS
16:21:05 106  BAD_ACCOUNT_ID	     EXCEPTION;
16:21:05 107  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:21:05 108  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05 109  BEGIN
16:21:05 110  
16:21:05 111  	BEGIN
16:21:05 112  	  SELECT
16:21:05 113  	    ACCOUNT.ACCOUNT_STATUS_ID,
16:21:05 114  	    ACCOUNT.GROUP_ID,
16:21:05 115  	    ACCOUNT.INSTRUMENT_TYPE_ID,
16:21:05 116  	    ACCOUNT.INSTRUMENT_TYPE_ID,
16:21:05 117  	    ACCOUNT.UPDATED_BY,
16:21:05 118  	    ACCOUNT.UPDATE_DATE
16:21:05 119  	    into
16:21:05 120  	    var_account_status_id,
16:21:05 121  	    var_group_id,
16:21:05 122  	    var_instrument_type_id,
16:21:05 123  	    var_instrument_id,
16:21:05 124  	    var_updated_by,
16:21:05 125  	    var_update_date
16:21:05 126  	  FROM
16:21:05 127  	    ACCOUNT
16:21:05 128  	  WHERE
16:21:05 129  	    ACCOUNT.ID = in_account_id;
16:21:05 130  	  EXCEPTION
16:21:05 131  	    WHEN NO_DATA_FOUND THEN
16:21:05 132  	      RAISE BAD_ACCOUNT_ID;
16:21:05 133  	END;
16:21:05 134  
16:21:05 135  	BEGIN
16:21:05 136  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ACCOUNT_HISTORY(
16:21:05 137  	    in_account_id,
16:21:05 138  	    var_suspend_date,
16:21:05 139  	    var_group_id,
16:21:05 140  	    var_updated_by,
16:21:05 141  	    var_update_date,
16:21:05 142  	    in_system_activity_reason_id,
16:21:05 143  	    var_account_status_id,
16:21:05 144  	    var_instrument_type_id,
16:21:05 145  	    var_instrument_id
16:21:05 146  	  );
16:21:05 147  	  EXCEPTION
16:21:05 148  	    WHEN OTHERS THEN
16:21:05 149  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 150  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 151  	END;
16:21:05 152  
16:21:05 153  EXCEPTION
16:21:05 154  WHEN BAD_ACCOUNT_ID THEN
16:21:05 155  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 156  	  SPROC_NAME, 'Bad account id');
16:21:05 157  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 158  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 159  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 160  WHEN OTHERS THEN
16:21:05 161  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 163  END CREATE_ACCOUNT_HISTORY;
16:21:05 164  
16:21:05 165  /********************************************************************/
16:21:05 166  
16:21:05 167  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
16:21:05 168  /*
16:21:05 169  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 170  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 171  */
16:21:05 172  	in_subscription_id	     IN NUMBER,
16:21:05 173  	in_system_activity_reason_id IN NUMBER
16:21:05 174  ) AS
16:21:05 175  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
16:21:05 176  -- VARIABLES
16:21:05 177  var_account_id		    NUMBER;
16:21:05 178  var_purchase_date 	    DATE;
16:21:05 179  var_offer_chain_id	    NUMBER;
16:21:05 180  var_suspend_date		    DATE;
16:21:05 181  var_termination_date	    DATE;
16:21:05 182  var_days_ramaining_adjustment NUMBER;
16:21:05 183  var_sct_id		    NUMBER;
16:21:05 184  var_updated_by		    VARCHAR2(255);
16:21:05 185  var_update_date		    DATE;
16:21:05 186  -- EXCEPTIONS
16:21:05 187  BAD_SUBSCRIPTION_ID    EXCEPTION;
16:21:05 188  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:21:05 189  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05 190  BEGIN
16:21:05 191  
16:21:05 192  	BEGIN
16:21:05 193  	  SELECT
16:21:05 194  	    SUBSCRIPTION.account_id,
16:21:05 195  	    SUBSCRIPTION.PURCHASE_DATE,
16:21:05 196  	    SUBSCRIPTION.OFFER_CHAIN_ID,
16:21:05 197  	    SUBSCRIPTION.SUSPEND_DATE,
16:21:05 198  	    SUBSCRIPTION.TERMINATION_DATE,
16:21:05 199  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
16:21:05 200  	    SUBSCRIPTION.SCT_ID,
16:21:05 201  	    SUBSCRIPTION.UPDATED_BY,
16:21:05 202  	    SUBSCRIPTION.UPDATE_DATE
16:21:05 203  	    into
16:21:05 204  	    var_account_id,
16:21:05 205  	    var_purchase_date,
16:21:05 206  	    var_offer_chain_id,
16:21:05 207  	    var_suspend_date,
16:21:05 208  	    var_termination_date,
16:21:05 209  	    var_days_ramaining_adjustment,
16:21:05 210  	    var_sct_id,
16:21:05 211  	    var_updated_by,
16:21:05 212  	    var_update_date
16:21:05 213  	  FROM
16:21:05 214  	    SUBSCRIPTION
16:21:05 215  	  WHERE
16:21:05 216  	    SUBSCRIPTION.ID = in_subscription_id;
16:21:05 217  	  EXCEPTION
16:21:05 218  	    WHEN NO_DATA_FOUND THEN
16:21:05 219  	      RAISE BAD_SUBSCRIPTION_ID;
16:21:05 220  	END;
16:21:05 221  
16:21:05 222  	BEGIN
16:21:05 223  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_SUBSCRIPTION_HISTORY(
16:21:05 224  	    in_subscription_id,
16:21:05 225  	    var_account_id,
16:21:05 226  	    var_purchase_date,
16:21:05 227  	    var_offer_chain_id,
16:21:05 228  	    var_suspend_date,
16:21:05 229  	    var_termination_date,
16:21:05 230  	    var_days_ramaining_adjustment,
16:21:05 231  	    var_sct_id,
16:21:05 232  	    var_updated_by,
16:21:05 233  	    var_update_date,
16:21:05 234  	    in_system_activity_reason_id
16:21:05 235  	  );
16:21:05 236  	  EXCEPTION
16:21:05 237  	    WHEN OTHERS THEN
16:21:05 238  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 239  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 240  	END;
16:21:05 241  
16:21:05 242  EXCEPTION
16:21:05 243  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:05 244  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 245  	  SPROC_NAME, 'No such subscription');
16:21:05 246  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 247  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 248  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 249  WHEN OTHERS THEN
16:21:05 250  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 251  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 252  END CREATE_SUBSCRIPTION_HISTORY;
16:21:05 253  
16:21:05 254  /********************************************************************/
16:21:05 255  
16:21:05 256  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
16:21:05 257  	in_credit_card_id	      IN NUMBER,
16:21:05 258  	in_system_activity_reason_id  IN NUMBER
16:21:05 259  ) AS
16:21:05 260  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
16:21:05 261  -- VARIABLES
16:21:05 262  var_account_id		     NUMBER;
16:21:05 263  var_instrument_name	     VARCHAR2(255);
16:21:05 264  var_private_card_holder_name   VARCHAR2(256);
16:21:05 265  var_private_street_address     VARCHAR2(256);
16:21:05 266  var_private_street_address2    VARCHAR2(256);
16:21:05 267  var_state 		     VARCHAR2(50);
16:21:05 268  var_city			     VARCHAR2(50);
16:21:05 269  var_postal_code		     VARCHAR2(20);
16:21:05 270  var_country		     CHAR(2);
16:21:05 271  var_last_four_cc		     VARCHAR2(4);
16:21:05 272  var_expiration_date	     DATE;
16:21:05 273  var_credit_card_type_id	     NUMBER;
16:21:05 274  var_secret_token		     VARCHAR2(255);
16:21:05 275  var_chase_profile_id	     VARCHAR2(255);
16:21:05 276  var_credit_card_status_id      NUMBER;
16:21:05 277  var_updated_by		     VARCHAR2(255);
16:21:05 278  var_update_date		     DATE;
16:21:05 279  -- EXCEPTIONS
16:21:05 280  BAD_CREDIT_CARD_ID     EXCEPTION;
16:21:05 281  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:21:05 282  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05 283  BEGIN
16:21:05 284  
16:21:05 285  	BEGIN
16:21:05 286  	  SELECT
16:21:05 287  	    ACCOUNT_ID,
16:21:05 288  	    INSTRUMENT_NAME,
16:21:05 289  	    PRIVATE_CARD_HOLDER_NAME,
16:21:05 290  	    PRIVATE_STREET_ADDRESS,
16:21:05 291  	    PRIVATE_STREET_ADDRESS2,
16:21:05 292  	    STATE,
16:21:05 293  	    CITY,
16:21:05 294  	    POSTAL_CODE,
16:21:05 295  	    COUNTRY,
16:21:05 296  	    LAST_FOUR_CC,
16:21:05 297  	    EXPIRATION_DATE,
16:21:05 298  	    CREDIT_CARD_TYPE_ID,
16:21:05 299  	    SECRET_TOKEN,
16:21:05 300  	    CHASE_PROFILE_ID,
16:21:05 301  	    CREDIT_CARD_STATUS_ID,
16:21:05 302  	    UPDATED_BY,
16:21:05 303  	    UPDATE_DATE
16:21:05 304  	    into
16:21:05 305  	    var_account_id,
16:21:05 306  	    var_instrument_name,
16:21:05 307  	    var_private_card_holder_name,
16:21:05 308  	    var_private_street_address,
16:21:05 309  	    var_private_street_address2,
16:21:05 310  	    var_state,
16:21:05 311  	    var_city,
16:21:05 312  	    var_postal_code,
16:21:05 313  	    var_country,
16:21:05 314  	    var_last_four_cc,
16:21:05 315  	    var_expiration_date,
16:21:05 316  	    var_credit_card_type_id,
16:21:05 317  	    var_secret_token,
16:21:05 318  	    var_chase_profile_id,
16:21:05 319  	    var_credit_card_status_id,
16:21:05 320  	    var_updated_by,
16:21:05 321  	    var_update_date
16:21:05 322  	  FROM
16:21:05 323  	    CREDIT_CARD
16:21:05 324  	  WHERE
16:21:05 325  	    CREDIT_CARD.ID = in_credit_card_id;
16:21:05 326  	  EXCEPTION
16:21:05 327  	    WHEN NO_DATA_FOUND THEN
16:21:05 328  	      RAISE BAD_CREDIT_CARD_ID;
16:21:05 329  	END;
16:21:05 330  
16:21:05 331  	BEGIN
16:21:05 332  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_CREDIT_CARD_HISTORY(
16:21:05 333  	    in_credit_card_id,
16:21:05 334  	    var_account_id,
16:21:05 335  	    var_instrument_name,
16:21:05 336  	    var_private_card_holder_name,
16:21:05 337  	    var_private_street_address,
16:21:05 338  	    var_private_street_address2,
16:21:05 339  	    var_state,
16:21:05 340  	    var_city,
16:21:05 341  	    var_postal_code,
16:21:05 342  	    var_country,
16:21:05 343  	    var_last_four_cc,
16:21:05 344  	    var_expiration_date,
16:21:05 345  	    var_credit_card_type_id,
16:21:05 346  	    var_secret_token,
16:21:05 347  	    var_chase_profile_id,
16:21:05 348  	    var_credit_card_status_id,
16:21:05 349  	    var_updated_by,
16:21:05 350  	    var_update_date,
16:21:05 351  	    in_system_activity_reason_id
16:21:05 352  	  );
16:21:05 353  	  EXCEPTION
16:21:05 354  	    WHEN OTHERS THEN
16:21:05 355  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 356  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 357  	END;
16:21:05 358  
16:21:05 359  EXCEPTION
16:21:05 360  WHEN BAD_CREDIT_CARD_ID THEN
16:21:05 361  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 362  	  SPROC_NAME, 'No such credit card');
16:21:05 363  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 364  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 365  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 366  WHEN OTHERS THEN
16:21:05 367  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 368  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 369  END CREATE_CREDIT_CARD_HISTORY;
16:21:05 370  
16:21:05 371  /********************************************************************/
16:21:05 372  
16:21:05 373  PROCEDURE CREATE_PAYPAL_HISTORY(
16:21:05 374  /*
16:21:05 375  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 376  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 377  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:05 378  */
16:21:05 379  	in_paypal_id		      IN NUMBER,
16:21:05 380  	in_system_activity_reason_id  IN NUMBER
16:21:05 381  ) AS
16:21:05 382  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
16:21:05 383  -- VARIABLES
16:21:05 384  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
16:21:05 385  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
16:21:05 386  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
16:21:05 387  var_created_by		   PAYPAL.CREATED_BY%TYPE;
16:21:05 388  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
16:21:05 389  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
16:21:05 390  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
16:21:05 391  var_state 		   PAYPAL.STATE%TYPE;
16:21:05 392  var_city			   PAYPAL.CITY%TYPE;
16:21:05 393  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
16:21:05 394  var_country		   PAYPAL.COUNTRY%TYPE;
16:21:05 395  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
16:21:05 396  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
16:21:05 397  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
16:21:05 398  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
16:21:05 399  -- EXCEPTION
16:21:05 400  BAD_PAYPAL_ID	  EXCEPTION;
16:21:05 401  CAN_NOT_ADD_HISTORY EXCEPTION;
16:21:05 402  EXCEPTION_MESSAGE   VARCHAR2(1024);
16:21:05 403  BEGIN
16:21:05 404  
16:21:05 405  	BEGIN
16:21:05 406  	  SELECT
16:21:05 407  	    ACCOUNT_ID,
16:21:05 408  	    INSTRUMENT_NAME,
16:21:05 409  	    PRIVATE_EMAIL_ADDRESS,
16:21:05 410  	    UPDATE_DATE,
16:21:05 411  	    UPDATED_BY,
16:21:05 412  	    PAYPAL_STATUS_ID,
16:21:05 413  	    PRIVATE_STREET_ADDRESS,
16:21:05 414  	    PRIVATE_STREET_ADDRESS2,
16:21:05 415  	    STATE,
16:21:05 416  	    CITY,
16:21:05 417  	    POSTAL_CODE,
16:21:05 418  	    COUNTRY,
16:21:05 419  	    EXPIRATION_DATE,
16:21:05 420  	    SECRET_TOKEN
16:21:05 421  	  INTO
16:21:05 422  	    var_account_id,
16:21:05 423  	    var_instrument_name,
16:21:05 424  	    var_private_email_address,
16:21:05 425  	    var_update_date,
16:21:05 426  	    var_updated_by,
16:21:05 427  	    var_paypal_status_id,
16:21:05 428  	    var_paypal_prvt_street_addr,
16:21:05 429  	    var_paypal_prvt_street_addr2,
16:21:05 430  	    var_state,
16:21:05 431  	    var_city,
16:21:05 432  	    var_postal_code,
16:21:05 433  	    var_country,
16:21:05 434  	    var_expiration_date,
16:21:05 435  	    var_secret_token
16:21:05 436  	  FROM
16:21:05 437  	    PAYPAL
16:21:05 438  	  WHERE
16:21:05 439  	    ID = in_paypal_id;
16:21:05 440  	  EXCEPTION
16:21:05 441  	    WHEN NO_DATA_FOUND THEN
16:21:05 442  	      RAISE BAD_PAYPAL_ID;
16:21:05 443  	END;
16:21:05 444  
16:21:05 445  	BEGIN
16:21:05 446  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_PAYPAL_HISTORY(
16:21:05 447  	    in_paypal_id,
16:21:05 448  	    var_account_id,
16:21:05 449  	    var_instrument_name,
16:21:05 450  	    var_private_email_address,
16:21:05 451  	    var_updated_by,
16:21:05 452  	    var_update_date,
16:21:05 453  	    var_paypal_status_id,
16:21:05 454  	    var_paypal_prvt_street_addr,
16:21:05 455  	    var_paypal_prvt_street_addr2,
16:21:05 456  	    var_state,
16:21:05 457  	    var_city,
16:21:05 458  	    var_postal_code,
16:21:05 459  	    var_country,
16:21:05 460  	    var_expiration_date,
16:21:05 461  	    in_system_activity_reason_id,
16:21:05 462  	    var_secret_token
16:21:05 463  	  );
16:21:05 464  	  EXCEPTION
16:21:05 465  	    WHEN OTHERS THEN
16:21:05 466  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 467  	      RAISE CAN_NOT_ADD_HISTORY;
16:21:05 468  	END;
16:21:05 469  
16:21:05 470  EXCEPTION
16:21:05 471  WHEN BAD_PAYPAL_ID THEN
16:21:05 472  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 473  	  SPROC_NAME, 'No such paypal');
16:21:05 474  WHEN CAN_NOT_ADD_HISTORY THEN
16:21:05 475  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 476  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
16:21:05 477  WHEN OTHERS THEN
16:21:05 478  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 479  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 480  END CREATE_PAYPAL_HISTORY;
16:21:05 481  
16:21:05 482  /********************************************************************/
16:21:05 483  
16:21:05 484  PROCEDURE CREATE_GIFT_CERT_HISTORY(
16:21:05 485  	in_gift_certificate_id	      IN NUMBER,
16:21:05 486  	in_system_activity_reason_id  IN NUMBER
16:21:05 487  ) AS
16:21:05 488  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
16:21:05 489  -- VARIABLES
16:21:05 490  var_purchaser_group_id	     NUMBER;
16:21:05 491  var_purchase_invoice_id	     NUMBER;
16:21:05 492  var_offer_chain_id	     NUMBER;
16:21:05 493  var_expiration_date	     DATE;
16:21:05 494  var_purchase_date 	     DATE;
16:21:05 495  var_gift_certificate_status_id NUMBER;
16:21:05 496  var_code			     VARCHAR2(255);
16:21:05 497  var_recipient_name	     VARCHAR2(255);
16:21:05 498  var_gift_message		     VARCHAR2(500);
16:21:05 499  var_recipient_email	     VARCHAR2(255);
16:21:05 500  var_finalized_invoice_id	     NUMBER;
16:21:05 501  var_sender_email		     VARCHAR2(50);
16:21:05 502  var_sender_name		     VARCHAR2(50);
16:21:05 503  var_redemption_date	     DATE;
16:21:05 504  var_redeemer_group_id	     NUMBER;
16:21:05 505  var_cancelation_date	     DATE;
16:21:05 506  var_updated_by		     VARCHAR2(255);
16:21:05 507  var_update_date		     DATE;
16:21:05 508  var_recipient_address_id	     NUMBER;
16:21:05 509  var_redeemer_address_id	     NUMBER;
16:21:05 510  var_recipient_notify_date      DATE;
16:21:05 511  -- EXCEPTIONS
16:21:05 512  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
16:21:05 513  CAN_NOT_CREATE_HISTORY  EXCEPTION;
16:21:05 514  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:21:05 515  BEGIN
16:21:05 516  
16:21:05 517  	BEGIN
16:21:05 518  	  SELECT
16:21:05 519  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
16:21:05 520  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
16:21:05 521  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
16:21:05 522  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
16:21:05 523  	    GIFT_CERTIFICATE.PURCHASE_DATE,
16:21:05 524  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
16:21:05 525  	    GIFT_CERTIFICATE.CODE,
16:21:05 526  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
16:21:05 527  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
16:21:05 528  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
16:21:05 529  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
16:21:05 530  	    GIFT_CERTIFICATE.SENDER_EMAIL,
16:21:05 531  	    GIFT_CERTIFICATE.SENDER_NAME,
16:21:05 532  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
16:21:05 533  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
16:21:05 534  	    GIFT_CERTIFICATE.CANCELATION_DATE,
16:21:05 535  	    GIFT_CERTIFICATE.UPDATED_BY,
16:21:05 536  	    GIFT_CERTIFICATE.UPDATE_DATE,
16:21:05 537  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
16:21:05 538  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
16:21:05 539  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
16:21:05 540  	    into
16:21:05 541  	    var_purchaser_group_id,
16:21:05 542  	    var_purchase_invoice_id,
16:21:05 543  	    var_offer_chain_id,
16:21:05 544  	    var_expiration_date,
16:21:05 545  	    var_purchase_date,
16:21:05 546  	    var_gift_certificate_status_id,
16:21:05 547  	    var_code,
16:21:05 548  	    var_recipient_name,
16:21:05 549  	    var_gift_message,
16:21:05 550  	    var_recipient_email,
16:21:05 551  	    var_finalized_invoice_id,
16:21:05 552  	    var_sender_email,
16:21:05 553  	    var_sender_name,
16:21:05 554  	    var_redemption_date,
16:21:05 555  	    var_redeemer_group_id,
16:21:05 556  	    var_cancelation_date,
16:21:05 557  	    var_updated_by,
16:21:05 558  	    var_update_date,
16:21:05 559  	    var_recipient_address_id,
16:21:05 560  	    var_redeemer_address_id,
16:21:05 561  	    var_recipient_notify_date
16:21:05 562  	  FROM
16:21:05 563  	    GIFT_CERTIFICATE
16:21:05 564  	  WHERE
16:21:05 565  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
16:21:05 566  	END;
16:21:05 567  
16:21:05 568  	BEGIN
16:21:05 569  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_GIFT_CERT_HISTORY(
16:21:05 570  	    in_gift_certificate_id,
16:21:05 571  	    var_purchaser_group_id,
16:21:05 572  	    var_purchase_invoice_id,
16:21:05 573  	    var_offer_chain_id,
16:21:05 574  	    var_expiration_date,
16:21:05 575  	    var_purchase_date,
16:21:05 576  	    var_gift_certificate_status_id,
16:21:05 577  	    var_code,
16:21:05 578  	    var_updated_by,
16:21:05 579  	    var_update_date,
16:21:05 580  	    in_system_activity_reason_id,
16:21:05 581  	    var_recipient_name,
16:21:05 582  	    var_gift_message,
16:21:05 583  	    var_recipient_email,
16:21:05 584  	    var_finalized_invoice_id,
16:21:05 585  	    var_sender_email,
16:21:05 586  	    var_sender_name,
16:21:05 587  	    var_redemption_date,
16:21:05 588  	    var_redeemer_group_id,
16:21:05 589  	    var_cancelation_date,
16:21:05 590  	    var_recipient_address_id,
16:21:05 591  	    var_redeemer_address_id,
16:21:05 592  	    var_recipient_notify_date
16:21:05 593  	  );
16:21:05 594  	  EXCEPTION
16:21:05 595  	    WHEN OTHERS THEN
16:21:05 596  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 597  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 598  	END;
16:21:05 599  
16:21:05 600  EXCEPTION
16:21:05 601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
16:21:05 602  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 603  	  SPROC_NAME, 'No such gift certificate');
16:21:05 604  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 605  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 606  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 607  WHEN OTHERS THEN
16:21:05 608  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 609  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 610  END CREATE_GIFT_CERT_HISTORY;
16:21:05 611  
16:21:05 612  /********************************************************************/
16:21:05 613  
16:21:05 614  PROCEDURE CREATE_TRANSACTION_HISTORY (
16:21:05 615  	in_transaction_id	     IN NUMBER,
16:21:05 616  	in_system_activity_reason_id IN NUMBER
16:21:05 617  ) AS
16:21:05 618  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
16:21:05 619  -- VARIABLES
16:21:05 620  var_transaction_status_id NUMBER;
16:21:05 621  var_transaction_amount	NUMBER(10,2);
16:21:05 622  var_updated_by		VARCHAR2(255);
16:21:05 623  var_update_date		DATE;
16:21:05 624  -- EXCEPTIONS
16:21:05 625  BAD_TRANSACTION_ID     EXCEPTION;
16:21:05 626  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:21:05 627  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05 628  BEGIN
16:21:05 629  
16:21:05 630  	BEGIN
16:21:05 631  	  SELECT
16:21:05 632  	    TRANSACTION.TRANSACTION_STATUS_ID,
16:21:05 633  	    TRANSACTION.TRANSACTION_AMOUNT,
16:21:05 634  	    TRANSACTION.UPDATED_BY,
16:21:05 635  	    TRANSACTION.UPDATE_DATE
16:21:05 636  	    into
16:21:05 637  	    var_transaction_status_id,
16:21:05 638  	    var_transaction_amount,
16:21:05 639  	    var_updated_by,
16:21:05 640  	    var_update_date
16:21:05 641  	  FROM
16:21:05 642  	    TRANSACTION
16:21:05 643  	  WHERE
16:21:05 644  	    TRANSACTION.ID = in_transaction_id;
16:21:05 645  	  EXCEPTION
16:21:05 646  	    WHEN NO_DATA_FOUND THEN
16:21:05 647  	      RAISE BAD_TRANSACTION_ID;
16:21:05 648  	END;
16:21:05 649  
16:21:05 650  	BEGIN
16:21:05 651  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_TRANSACTION_HISTORY(
16:21:05 652  	    in_transaction_id,
16:21:05 653  	    var_transaction_status_id,
16:21:05 654  	    var_transaction_amount,
16:21:05 655  	    var_updated_by,
16:21:05 656  	    var_update_date,
16:21:05 657  	    in_system_activity_reason_id
16:21:05 658  	  );
16:21:05 659  	  EXCEPTION
16:21:05 660  	    WHEN OTHERS THEN
16:21:05 661  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 662  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 663  	END;
16:21:05 664  
16:21:05 665  EXCEPTION
16:21:05 666  WHEN BAD_TRANSACTION_ID THEN
16:21:05 667  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 668  	  SPROC_NAME, 'No such transaction');
16:21:05 669  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 670  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 671  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 672  WHEN OTHERS THEN
16:21:05 673  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 674  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 675  END CREATE_TRANSACTION_HISTORY;
16:21:05 676  
16:21:05 677  /********************************************************************/
16:21:05 678  
16:21:05 679  PROCEDURE CREATE_INVOICE_HISTORY (
16:21:05 680  /*
16:21:05 681  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 682  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 683  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:05 684  */
16:21:05 685  	in_invoice_id		     IN NUMBER,
16:21:05 686  	in_system_activity_reason_id IN NUMBER
16:21:05 687  ) AS
16:21:05 688  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
16:21:05 689  -- VARIABLES
16:21:05 690  var_invoice_status_id NUMBER;
16:21:05 691  var_updated_by	    VARCHAR2(255);
16:21:05 692  var_update_date	    DATE;
16:21:05 693  -- EXCEPTIONS
16:21:05 694  BAD_INVOICE_ID	     EXCEPTION;
16:21:05 695  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:21:05 696  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05 697  BEGIN
16:21:05 698  
16:21:05 699  	BEGIN
16:21:05 700  	  SELECT
16:21:05 701  	    INVOICE.INVOICE_STATUS_ID,
16:21:05 702  	    INVOICE.UPDATED_BY,
16:21:05 703  	    INVOICE.UPDATE_DATE
16:21:05 704  	    into
16:21:05 705  	    var_invoice_status_id,
16:21:05 706  	    var_updated_by,
16:21:05 707  	    var_update_date
16:21:05 708  	  FROM
16:21:05 709  	    INVOICE
16:21:05 710  	  WHERE
16:21:05 711  	    INVOICE.ID = in_invoice_id;
16:21:05 712  	  EXCEPTION
16:21:05 713  	    WHEN NO_DATA_FOUND THEN
16:21:05 714  	      RAISE BAD_INVOICE_ID;
16:21:05 715  	END;
16:21:05 716  
16:21:05 717  	BEGIN
16:21:05 718  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_INVOICE_HISTORY(
16:21:05 719  	    in_invoice_id,
16:21:05 720  	    var_invoice_status_id,
16:21:05 721  	    var_updated_by,
16:21:05 722  	    var_update_date,
16:21:05 723  	    in_system_activity_reason_id
16:21:05 724  	  );
16:21:05 725  	  EXCEPTION
16:21:05 726  	    WHEN OTHERS THEN
16:21:05 727  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 728  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 729  	END;
16:21:05 730  
16:21:05 731  EXCEPTION
16:21:05 732  WHEN BAD_INVOICE_ID THEN
16:21:05 733  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 734  	  SPROC_NAME, 'No such invoice');
16:21:05 735  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 736  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 737  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 738  WHEN OTHERS THEN
16:21:05 739  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 740  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 741  END CREATE_INVOICE_HISTORY;
16:21:05 742  
16:21:05 743  /********************************************************************/
16:21:05 744  
16:21:05 745  PROCEDURE CREATE_LICENSE_HISTORY (
16:21:05 746  /*
16:21:05 747  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 748  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 749  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:05 750  */
16:21:05 751  	in_license_id		     IN NUMBER,
16:21:05 752  	in_system_activity_reason_id IN NUMBER
16:21:05 753  ) AS
16:21:05 754  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
16:21:05 755  -- VARIABLES
16:21:05 756  var_license_status_id	    NUMBER;
16:21:05 757  var_needs_entitlements	    NUMBER;
16:21:05 758  var_start_date		    DATE;
16:21:05 759  var_offer_id		    NUMBER;
16:21:05 760  var_subscription_id	    NUMBER;
16:21:05 761  var_invoice_id		    NUMBER;
16:21:05 762  var_end_date		    DATE;
16:21:05 763  var_is_extension		    NUMBER;
16:21:05 764  var_current_offer_index	    NUMBER;
16:21:05 765  var_current_offer_recurr_num  NUMBER;
16:21:05 766  var_updated_by		    VARCHAR2(255);
16:21:05 767  var_update_date		    DATE;
16:21:05 768  var_entitlement_end_date	    DATE;
16:21:05 769  -- EXCEPTIONS
16:21:05 770  BAD_LICENSE_ID	     EXCEPTION;
16:21:05 771  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:21:05 772  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05 773  BEGIN
16:21:05 774  
16:21:05 775  	BEGIN
16:21:05 776  	  SELECT
16:21:05 777  	    LICENSE.LICENSE_STATUS_ID,
16:21:05 778  	    LICENSE.NEEDS_ENTITLEMENTS,
16:21:05 779  	    LICENSE.START_DATE,
16:21:05 780  	    LICENSE.OFFER_ID,
16:21:05 781  	    LICENSE.SUBSCRIPTION_ID,
16:21:05 782  	    LICENSE.INVOICE_ID,
16:21:05 783  	    LICENSE.END_DATE,
16:21:05 784  	    LICENSE.IS_EXTENSION,
16:21:05 785  	    LICENSE.CURRENT_OFFER_INDEX,
16:21:05 786  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
16:21:05 787  	    LICENSE.UPDATED_BY,
16:21:05 788  	    LICENSE.UPDATE_DATE,
16:21:05 789  	    LICENSE.ENTITLEMENT_END_DATE
16:21:05 790  	    into
16:21:05 791  	    var_license_status_id,
16:21:05 792  	    var_needs_entitlements,
16:21:05 793  	    var_start_date,
16:21:05 794  	    var_offer_id,
16:21:05 795  	    var_subscription_id,
16:21:05 796  	    var_invoice_id,
16:21:05 797  	    var_end_date,
16:21:05 798  	    var_is_extension,
16:21:05 799  	    var_current_offer_index,
16:21:05 800  	    var_current_offer_recurr_num,
16:21:05 801  	    var_updated_by,
16:21:05 802  	    var_update_date,
16:21:05 803  	    var_entitlement_end_date
16:21:05 804  	  FROM
16:21:05 805  	    LICENSE
16:21:05 806  	  WHERE
16:21:05 807  	    LICENSE.ID = in_license_id;
16:21:05 808  	  EXCEPTION
16:21:05 809  	    WHEN NO_DATA_FOUND THEN
16:21:05 810  	      RAISE BAD_LICENSE_ID;
16:21:05 811  	END;
16:21:05 812  
16:21:05 813  	BEGIN
16:21:05 814  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_LICENSE_HISTORY(
16:21:05 815  	    in_license_id,
16:21:05 816  	    var_license_status_id,
16:21:05 817  	    var_needs_entitlements,
16:21:05 818  	    var_start_date,
16:21:05 819  	    var_offer_id,
16:21:05 820  	    var_subscription_id,
16:21:05 821  	    var_invoice_id,
16:21:05 822  	    var_end_date,
16:21:05 823  	    var_updated_by,
16:21:05 824  	    var_update_date,
16:21:05 825  	    var_is_extension,
16:21:05 826  	    var_current_offer_index,
16:21:05 827  	    var_current_offer_recurr_num,
16:21:05 828  	    in_system_activity_reason_id,
16:21:05 829  	    var_entitlement_end_date
16:21:05 830  	  );
16:21:05 831  	  EXCEPTION
16:21:05 832  	    WHEN OTHERS THEN
16:21:05 833  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 834  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 835  	END;
16:21:05 836  
16:21:05 837  EXCEPTION
16:21:05 838  WHEN BAD_LICENSE_ID THEN
16:21:05 839  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 840  	  SPROC_NAME, 'No such license');
16:21:05 841  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 842  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 843  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 844  WHEN OTHERS THEN
16:21:05 845  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 846  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 847  END CREATE_LICENSE_HISTORY;
16:21:05 848  
16:21:05 849  /********************************************************************/
16:21:05 850  
16:21:05 851  PROCEDURE CREATE_CHARGE_HISTORY (
16:21:05 852  /*
16:21:05 853  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 854  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 855  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:05 856  */
16:21:05 857  	in_charge_id		    IN NUMBER,
16:21:05 858  	in_system_activity_reason_id IN NUMBER
16:21:05 859  ) AS
16:21:05 860  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
16:21:05 861  -- VARIABLES
16:21:05 862  var_invoice_id	     NUMBER;
16:21:05 863  var_transaction_id     NUMBER;
16:21:05 864  var_instrument_type_id NUMBER;
16:21:05 865  var_instrument_id      NUMBER;
16:21:05 866  var_charge_amount      NUMBER;
16:21:05 867  var_charge_status_id   NUMBER;
16:21:05 868  var_updated_by	     VARCHAR2(255);
16:21:05 869  var_update_date	     DATE;
16:21:05 870  -- EXCEPTIONS
16:21:05 871  BAD_CHARGE_ID	     EXCEPTION;
16:21:05 872  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:21:05 873  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05 874  BEGIN
16:21:05 875  
16:21:05 876  	BEGIN
16:21:05 877  	  SELECT
16:21:05 878  	    CHARGE.INVOICE_ID,
16:21:05 879  	    CHARGE.TRANSACTION_ID,
16:21:05 880  	    CHARGE.INSTRUMENT_TYPE_ID,
16:21:05 881  	    CHARGE.INSTRUMENT_ID,
16:21:05 882  	    CHARGE.CHARGE_AMOUNT,
16:21:05 883  	    CHARGE.CHARGE_STATUS_ID,
16:21:05 884  	    CHARGE.UPDATED_BY,
16:21:05 885  	    CHARGE.UPDATE_DATE
16:21:05 886  	    into
16:21:05 887  	    var_invoice_id,
16:21:05 888  	    var_transaction_id,
16:21:05 889  	    var_instrument_type_id,
16:21:05 890  	    var_instrument_id,
16:21:05 891  	    var_charge_amount,
16:21:05 892  	    var_charge_status_id,
16:21:05 893  	    var_updated_by,
16:21:05 894  	    var_update_date
16:21:05 895  	  FROM
16:21:05 896  	    CHARGE
16:21:05 897  	  WHERE
16:21:05 898  	    CHARGE.ID = in_charge_id;
16:21:05 899  	  EXCEPTION
16:21:05 900  	    WHEN NO_DATA_FOUND THEN
16:21:05 901  	      RAISE BAD_CHARGE_ID;
16:21:05 902  	END;
16:21:05 903  
16:21:05 904  	BEGIN
16:21:05 905  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_CHARGE_HISTORY (
16:21:05 906  	    in_charge_id,
16:21:05 907  	    var_invoice_id,
16:21:05 908  	    var_transaction_id,
16:21:05 909  	    var_instrument_type_id,
16:21:05 910  	    var_instrument_id,
16:21:05 911  	    var_charge_amount,
16:21:05 912  	    var_updated_by,
16:21:05 913  	    var_update_date,
16:21:05 914  	    var_charge_status_id,
16:21:05 915  	    in_system_activity_reason_id
16:21:05 916  	  );
16:21:05 917  	  EXCEPTION
16:21:05 918  	    WHEN OTHERS THEN
16:21:05 919  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 920  	      RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 921  	END;
16:21:05 922  
16:21:05 923  EXCEPTION
16:21:05 924  WHEN BAD_CHARGE_ID THEN
16:21:05 925  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 926  	  SPROC_NAME, 'No such license');
16:21:05 927  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 928  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 929  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 930  WHEN OTHERS THEN
16:21:05 931  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 933  END CREATE_CHARGE_HISTORY;
16:21:05 934  
16:21:05 935  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
16:21:05 936  /*
16:21:05 937  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 938  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 939  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:05 940  */
16:21:05 941  	in_invoice_adjustment_id  IN NUMBER,
16:21:05 942  	in_system_activity_reason_id IN NUMBER
16:21:05 943  ) AS
16:21:05 944  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
16:21:05 945  --VARIABLED
16:21:05 946  var_invoice_adj_id	  INVOICE_ADJUSTMENT.ID%TYPE;
16:21:05 947  var_invoice_id		  INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
16:21:05 948  var_is_credit		  INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
16:21:05 949  var_charge_id		  INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
16:21:05 950  var_adjustment_date	  INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
16:21:05 951  var_create_date		  INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
16:21:05 952  var_created_by		  INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
16:21:05 953  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
16:21:05 954  var_update_date		  INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
16:21:05 955  var_updated_by		  INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
16:21:05 956  BAD_INVOICE_ADJ_ID	  EXCEPTION;
16:21:05 957  CAN_NOT_CREATE_HISTORY	  EXCEPTION;
16:21:05 958  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05 959  BEGIN
16:21:05 960  
16:21:05 961  	BEGIN
16:21:05 962  	  SELECT
16:21:05 963  	    INVOICE_ADJUSTMENT.ID,
16:21:05 964  	    INVOICE_ADJUSTMENT.INVOICE_ID,
16:21:05 965  	    INVOICE_ADJUSTMENT.IS_CREDIT,
16:21:05 966  	    INVOICE_ADJUSTMENT.CHARGE_ID,
16:21:05 967  	    INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
16:21:05 968  	    INVOICE_ADJUSTMENT.CREATE_DATE,
16:21:05 969  	    INVOICE_ADJUSTMENT.CREATED_BY,
16:21:05 970  	    INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
16:21:05 971  	    INVOICE_ADJUSTMENT.UPDATE_DATE,
16:21:05 972  	    INVOICE_ADJUSTMENT.UPDATED_BY
16:21:05 973  	    into
16:21:05 974  	    var_invoice_adj_id,
16:21:05 975  	    var_invoice_id,
16:21:05 976  	    var_is_credit,
16:21:05 977  	    var_charge_id,
16:21:05 978  	    var_adjustment_date,
16:21:05 979  	    var_create_date,
16:21:05 980  	    var_created_by,
16:21:05 981  	    var_invoice_adj_reason_id,
16:21:05 982  	    var_update_date,
16:21:05 983  	    var_updated_by
16:21:05 984  	  FROM
16:21:05 985  	    INVOICE_ADJUSTMENT
16:21:05 986  	  WHERE
16:21:05 987  	    INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
16:21:05 988  	  EXCEPTION
16:21:05 989  	    WHEN NO_DATA_FOUND THEN
16:21:05 990  	      RAISE BAD_INVOICE_ADJ_ID;
16:21:05 991  	END;
16:21:05 992  
16:21:05 993  	BEGIN
16:21:05 994  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_INVOICE_ADJ_HISTORY (
16:21:05 995  	    var_invoice_adj_id,
16:21:05 996  	    var_invoice_id,
16:21:05 997  	    var_is_credit,
16:21:05 998  	    var_charge_id,
16:21:05 999  	    var_adjustment_date,
16:21:05 1000  	     var_create_date,
16:21:05 1001  	     var_created_by,
16:21:05 1002  	     var_invoice_adj_reason_id,
16:21:05 1003  	     var_update_date,
16:21:05 1004  	     var_updated_by
16:21:05 1005  	   );
16:21:05 1006  	   EXCEPTION
16:21:05 1007  	     WHEN OTHERS THEN
16:21:05 1008  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:05 1009  	       RAISE CAN_NOT_CREATE_HISTORY;
16:21:05 1010  	 END;
16:21:05 1011  
16:21:05 1012  EXCEPTION
16:21:05 1013  WHEN BAD_INVOICE_ADJ_ID THEN
16:21:05 1014  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1015  	   SPROC_NAME, 'No such invoice adjustment');
16:21:05 1016  WHEN CAN_NOT_CREATE_HISTORY THEN
16:21:05 1017  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 1018  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:21:05 1019  WHEN OTHERS THEN
16:21:05 1020  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1021  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1022  END CREATE_INVOICE_ADJ_HISTORY;
16:21:05 1023  
16:21:05 1024  END PROCS_HISTORY_V16;
16:21:05 1025  .
16:21:05 SQL> /

Package body created.

Elapsed: 00:00:00.08
16:21:05 SQL> 
16:21:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V16" AS
16:21:05   2  
16:21:05   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
16:21:05   4  /*
16:21:05   5  Throws exceptions:
16:21:05   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05   7  */
16:21:05   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:05   9  	out_result_set	    OUT SYS_REFCURSOR
16:21:05  10  ) AS
16:21:05  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
16:21:05  12  BEGIN
16:21:05  13  OPEN out_result_set FOR
16:21:05  14  	      SELECT
16:21:05  15  	      i.id as ITUNES_RECEIPT_ID,
16:21:05  16  	      s.id as SUBSCRIPTION_ID,
16:21:05  17  	      s.SUBSCRIPTION_STATUS_ID,
16:21:05  18  	      i.STATUS,
16:21:05  19  	      a.GROUP_ID
16:21:05  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
16:21:05  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
16:21:05  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
16:21:05  23  	      AND a.ID(+) = s.ACCOUNT_ID;
16:21:05  24  END ITUNES_RECEIPT_SUBSCRIPTION;
16:21:05  25  
16:21:05  26  
16:21:05  27  PROCEDURE CREATE_RECEIPT(
16:21:05  28  /*
16:21:05  29  Throws exceptions:
16:21:05  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05  31  */
16:21:05  32  	  out_id      OUT NUMBER,
16:21:05  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:21:05  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
16:21:05  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
16:21:05  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
16:21:05  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:05  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:21:05  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:21:05  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:05  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:21:05  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:21:05  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:21:05  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
16:21:05  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
16:21:05  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:21:05  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
16:21:05  48  ) AS
16:21:05  49  -- VARIABLES
16:21:05  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
16:21:05  51  -- EXCEPTIONS
16:21:05  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:05  53  BEGIN
16:21:05  54  
16:21:05  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.CREATE_RECEIPT(
16:21:05  56  	  out_id	      =>  out_id,
16:21:05  57  	  in_subscription_id  =>  in_subscription_id,
16:21:05  58  	  in_receipt	      =>  in_receipt,
16:21:05  59  	  in_status	      =>  in_status,
16:21:05  60  	  in_quantity	      =>  in_quantity,
16:21:05  61  	  in_product_id       =>  in_product_id,
16:21:05  62  	  in_transaction_id   =>  in_transaction_id,
16:21:05  63  	  in_purchase_date    =>  in_purchase_date,
16:21:05  64  	  in_original_transaction_id  =>  in_original_transaction_id,
16:21:05  65  	  in_original_purchase_date => in_original_purchase_date,
16:21:05  66  	  in_app_item_id      =>  in_app_item_id,
16:21:05  67  	  in_version_external_id  =>  in_version_external_id,
16:21:05  68  	  in_bid	      =>  in_bid,
16:21:05  69  	  in_bvrs	      =>  in_bvrs,
16:21:05  70  	  in_expires_date     =>  in_expires_date,
16:21:05  71  	  in_created_by       =>  in_created_by
16:21:05  72  	);
16:21:05  73  
16:21:05  74  END CREATE_RECEIPT;
16:21:05  75  
16:21:05  76  PROCEDURE UPDATE_RECEIPT(
16:21:05  77  /*
16:21:05  78  Throws exceptions:
16:21:05  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05  80  */
16:21:05  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
16:21:05  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
16:21:05  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
16:21:05  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
16:21:05  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:21:05  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:21:05  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:21:05  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:21:05  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:21:05  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:21:05  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:21:05  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
16:21:05  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
16:21:05  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:21:05  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
16:21:05  96  	  in_is_expired       IN NUMBER
16:21:05  97  ) AS
16:21:05  98  CANCEL_DATE DATE;
16:21:05  99  BEGIN
16:21:05 100  	-- see if cancel date is already set
16:21:05 101  	BEGIN
16:21:05 102  	  SELECT
16:21:05 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
16:21:05 104  	  FROM
16:21:05 105  	    ITUNES_RECEIPT IR
16:21:05 106  	  WHERE
16:21:05 107  	    IR.ID = in_id;
16:21:05 108  	EXCEPTION
16:21:05 109  	  WHEN NO_DATA_FOUND THEN
16:21:05 110  	    CANCEL_DATE := NULL;
16:21:05 111  	END;
16:21:05 112  
16:21:05 113  	-- only update cancel date if it isn't already set and the receipt is expired
16:21:05 114  	IF in_is_expired = 1 THEN
16:21:05 115  	  IF CANCEL_DATE IS NULL THEN
16:21:05 116  	    CANCEL_DATE := SYSDATE;
16:21:05 117  	  END IF;
16:21:05 118  	ELSE
16:21:05 119  	  CANCEL_DATE := NULL;
16:21:05 120  	END IF;
16:21:05 121  
16:21:05 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.UPDATE_RECEIPT(
16:21:05 123  	  in_id => in_id,
16:21:05 124  	  in_receipt => in_receipt,
16:21:05 125  	  in_status => in_status,
16:21:05 126  	  in_quantity => in_quantity,
16:21:05 127  	  in_product_id => in_product_id,
16:21:05 128  	  in_transaction_id => in_transaction_id,
16:21:05 129  	  in_purchase_date => in_purchase_date,
16:21:05 130  	  in_original_transaction_id => in_original_transaction_id,
16:21:05 131  	  in_original_purchase_date => in_original_purchase_date,
16:21:05 132  	  in_app_item_id => in_app_item_id,
16:21:05 133  	  in_version_external_id => in_version_external_id,
16:21:05 134  	  in_bid => in_bid,
16:21:05 135  	  in_bvrs => in_bvrs,
16:21:05 136  	  in_expires_date => in_expires_date,
16:21:05 137  	  in_updated_by => in_updated_by,
16:21:05 138  	  in_cancel_date => CANCEL_DATE
16:21:05 139  	);
16:21:05 140  END UPDATE_RECEIPT;
16:21:05 141  
16:21:05 142  PROCEDURE LINK_ITUNES_RECEIPT(
16:21:05 143  /*
16:21:05 144  Throws exceptions:
16:21:05 145  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 146  */
16:21:05 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
16:21:05 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:21:05 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
16:21:05 150  ) AS
16:21:05 151  BEGIN
16:21:05 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.LINK_ITUNES_RECEIPT(
16:21:05 153  		      in_id => in_id,
16:21:05 154  		      in_subscription_id => in_subscription_id,
16:21:05 155  		      in_updated_by => in_updated_by
16:21:05 156  		      );
16:21:05 157  END LINK_ITUNES_RECEIPT;
16:21:05 158  
16:21:05 159  PROCEDURE MARK_RECEIPT_CHECKED(
16:21:05 160  /*
16:21:05 161  Throws exceptions:
16:21:05 162  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 163  */
16:21:05 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
16:21:05 165  ) AS
16:21:05 166  BEGIN
16:21:05 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.MARK_RECEIPT_CHECKED(
16:21:05 168  	  in_id => in_id
16:21:05 169  	);
16:21:05 170  END MARK_RECEIPT_CHECKED;
16:21:05 171  
16:21:05 172  PROCEDURE GET_ITUNES_RECEIPTS (
16:21:05 173  /*
16:21:05 174  Throws exceptions:
16:21:05 175  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 176  */
16:21:05 177  	out_result_set	    OUT SYS_REFCURSOR,
16:21:05 178  	in_row_number	    IN NUMBER DEFAULT 500
16:21:05 179  ) AS
16:21:05 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
16:21:05 181  BEGIN
16:21:05 182  OPEN out_result_set FOR
16:21:05 183  SELECT * FROM
16:21:05 184  (
16:21:05 185  	SELECT * FROM
16:21:05 186  	(
16:21:05 187  	  SELECT
16:21:05 188  	    IR.ID,
16:21:05 189  	    IR.SUBSCRIPTION_ID,
16:21:05 190  	    IR.RECEIPT,
16:21:05 191  	    IR.STATUS,
16:21:05 192  	    IR.QUANTITY,
16:21:05 193  	    IR.PRODUCT_ID,
16:21:05 194  	    IR.TRANSACTION_ID,
16:21:05 195  	    IR.PURCHASE_DATE,
16:21:05 196  	    IR.ORIGINAL_TRANSACTION_ID,
16:21:05 197  	    IR.ORIGINAL_PURCHASE_DATE,
16:21:05 198  	    IR.APP_ITEM_ID,
16:21:05 199  	    IR.VERSION_EXTERNAL_ID,
16:21:05 200  	    IR.BID,
16:21:05 201  	    IR.BVRS,
16:21:05 202  	    IR.EXPIRES_DATE,
16:21:05 203  	    IR.CREATE_DATe,
16:21:05 204  	    IR.CREATED_BY,
16:21:05 205  	    IR.UPDATE_DATE,
16:21:05 206  	    IR.UPDATED_BY,
16:21:05 207  	    IR.LAST_CHECK_DATE,
16:21:05 208  	    OC.VENDOR_SOURCE_ID
16:21:05 209  	  FROM
16:21:05 210  	    CORE_OWNER.ITUNES_RECEIPT IR
16:21:05 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
16:21:05 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
16:21:05 213  	  WHERE
16:21:05 214  	    NOT EXISTS
16:21:05 215  	    (
16:21:05 216  	      SELECT NULL
16:21:05 217  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:05 218  	      WHERE PROCESS_NAME = SPROC_NAME
16:21:05 219  		AND GENERIC_ID = IR.ID
16:21:05 220  	    ) AND
16:21:05 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
16:21:05 222  	    ROWNUM <= in_row_number*10
16:21:05 223  	)
16:21:05 224  	ORDER BY dbms_random.value
16:21:05 225  )
16:21:05 226  WHERE
16:21:05 227  	ROWNUM <= in_row_number;
16:21:05 228  
16:21:05 229  END GET_ITUNES_RECEIPTS;
16:21:05 230  
16:21:05 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
16:21:05 232  /*
16:21:05 233  Throws exceptions:
16:21:05 234  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 235  */
16:21:05 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
16:21:05 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
16:21:05 238  ) AS
16:21:05 239  BEGIN
16:21:05 240  
16:21:05 241  SELECT
16:21:05 242  	  oc.vendor_source_id
16:21:05 243  INTO
16:21:05 244  	  out_vendor_source_id
16:21:05 245  FROM
16:21:05 246  	  offer_chain_meta_data ocmd
16:21:05 247  JOIN
16:21:05 248  	  offer_chain oc
16:21:05 249  ON
16:21:05 250  	  ocmd.offer_chain_id = oc.id
16:21:05 251  WHERE
16:21:05 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
16:21:05 253  AND ocmd.value = in_itunes_pid
16:21:05 254  AND rownum <= 1;
16:21:05 255  
16:21:05 256  END GET_VENDOR_FROM_ITUNES_PID;
16:21:05 257  
16:21:05 258  END PROCS_ITUNES_RECEIPT_V16;
16:21:05 259  .
16:21:05 SQL> /

Package body created.

Elapsed: 00:00:00.11
16:21:05 SQL> 
16:21:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V16" AS
16:21:05   2  
16:21:05   3  PROCEDURE ADD_LINE_ITEMS(
16:21:05   4  /*
16:21:05   5  Throws exceptions:
16:21:05   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05   8  */
16:21:05   9  	in_invoice_id IN NUMBER,
16:21:05  10  	in_offer_id   IN NUMBER,
16:21:05  11  	in_created_by IN VARCHAR2
16:21:05  12  ) AS
16:21:05  13  -- VARIABLES
16:21:05  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
16:21:05  15  temp_invoice_id NUMBER;
16:21:05  16  temp_offer_id   NUMBER;
16:21:05  17  
16:21:05  18  var_line_item_data SYS_REFCURSOR;
16:21:05  19  var_new_line_item_id NUMBER;
16:21:05  20  var_product_unit_price NUMBER (10,6);
16:21:05  21  var_product_offering_price NUMBER(10,6);
16:21:05  22  var_product_offering_oprice NUMBER(10,6);
16:21:05  23  var_product_quantity NUMBER;
16:21:05  24  var_product_offering_id NUMBER;
16:21:05  25  
16:21:05  26  var_line_item_price	  NUMBER(10,2);
16:21:05  27  var_discount_fixed_amount   NUMBER(10,6);
16:21:05  28  var_discount_percent_amount NUMBER(10,2);
16:21:05  29  
16:21:05  30  
16:21:05  31  -- EXCEPTIONS
16:21:05  32  BAD_INVOICE_ID EXCEPTION;
16:21:05  33  BAD_OFFER_ID EXCEPTION;
16:21:05  34  BAD_DISCOUNT EXCEPTION;
16:21:05  35  BEGIN
16:21:05  36  
16:21:05  37  	-- Check that given invoice exists
16:21:05  38  	BEGIN
16:21:05  39  	  SELECT
16:21:05  40  	    INVOICE.ID into temp_invoice_id
16:21:05  41  	  FROM
16:21:05  42  	    INVOICE
16:21:05  43  	  WHERE
16:21:05  44  	    INVOICE.ID = in_invoice_id;
16:21:05  45  
16:21:05  46  	  EXCEPTION
16:21:05  47  	    WHEN NO_DATA_FOUND THEN
16:21:05  48  	      RAISE BAD_INVOICE_ID;
16:21:05  49  	END;
16:21:05  50  
16:21:05  51  	-- Check that given offer exists
16:21:05  52  	BEGIN
16:21:05  53  	  SELECT
16:21:05  54  	    OFFER.ID into temp_offer_id
16:21:05  55  	  FROM
16:21:05  56  	    OFFER
16:21:05  57  	  WHERE
16:21:05  58  	    OFFER.ID = in_offer_id;
16:21:05  59  
16:21:05  60  	  EXCEPTION
16:21:05  61  	    WHEN NO_DATA_FOUND THEN
16:21:05  62  	      RAISE BAD_OFFER_ID;
16:21:05  63  	END;
16:21:05  64  
16:21:05  65  	-- Get product_offering data
16:21:05  66  	OPEN var_line_item_data FOR
16:21:05  67  	SELECT
16:21:05  68  	  PRODUCT_OFFERING.ID,
16:21:05  69  	  PRODUCT_OFFERING.UNIT_PRICE,
16:21:05  70  	  PRODUCT_OFFERING.QUANTITY
16:21:05  71  	FROM
16:21:05  72  	  OFFER_PRODUCT_OFFERING
16:21:05  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:21:05  74  	WHERE
16:21:05  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
16:21:05  76  
16:21:05  77  	-- insert line items
16:21:05  78  	-- add discounts to line items
16:21:05  79  	LOOP
16:21:05  80  	  FETCH var_line_item_data INTO
16:21:05  81  	    var_product_offering_id,
16:21:05  82  	    var_product_unit_price,
16:21:05  83  	    var_product_quantity;
16:21:05  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
16:21:05  85  
16:21:05  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
16:21:05  87  	  var_product_offering_price := var_product_offering_oprice;
16:21:05  88  
16:21:05  89  	  -- Apply discounts to line_item
16:21:05  90  	  BEGIN
16:21:05  91  	    SELECT
16:21:05  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
16:21:05  93  	    FROM
16:21:05  94  	      DISCOUNT_PRODUCT_OFFERING
16:21:05  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:21:05  96  	    WHERE
16:21:05  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:21:05  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
16:21:05  99  	    EXCEPTION
16:21:05 100  	    WHEN NO_DATA_FOUND THEN
16:21:05 101  	      var_discount_fixed_amount := NULL;
16:21:05 102  	  END;
16:21:05 103  
16:21:05 104  	  BEGIN
16:21:05 105  	    SELECT
16:21:05 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
16:21:05 107  	    FROM
16:21:05 108  	      DISCOUNT_PRODUCT_OFFERING
16:21:05 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:21:05 110  	    WHERE
16:21:05 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:21:05 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
16:21:05 113  	    EXCEPTION
16:21:05 114  	    WHEN NO_DATA_FOUND THEN
16:21:05 115  	      var_discount_percent_amount := NULL;
16:21:05 116  	  END;
16:21:05 117  
16:21:05 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
16:21:05 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
16:21:05 120  	  END IF;
16:21:05 121  
16:21:05 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
16:21:05 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
16:21:05 124  	  END IF;
16:21:05 125  
16:21:05 126  	  var_line_item_price := PROCS_COMMON_V16.ROUND_10_6_TO_10_2(var_product_offering_price);
16:21:05 127  
16:21:05 128  	  IF (var_line_item_price < 0) THEN
16:21:05 129  	      RAISE BAD_DISCOUNT;
16:21:05 130  	  END IF;
16:21:05 131  
16:21:05 132  	  var_new_line_item_id := NULL;
16:21:05 133  	  PROCS_LINE_ITEMS_CRU_V16.CREATE_LINE_ITEM(
16:21:05 134  	    inout_line_item_id	=> var_new_line_item_id,
16:21:05 135  	    in_product_offer_id => var_product_offering_id,
16:21:05 136  	    in_invoice_id	=> in_invoice_id,
16:21:05 137  	    in_amount		=> var_line_item_price,
16:21:05 138  	    in_created_by	=> in_created_by,
16:21:05 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
16:21:05 140  	    in_taxes_amount	=> NULL
16:21:05 141  	  );
16:21:05 142  
16:21:05 143  	  FOR f_discount IN (
16:21:05 144  	    SELECT
16:21:05 145  	      DISCOUNT.ID
16:21:05 146  	    FROM
16:21:05 147  	      DISCOUNT_PRODUCT_OFFERING
16:21:05 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:21:05 149  	    WHERE
16:21:05 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:21:05 151  	  )
16:21:05 152  	  LOOP
16:21:05 153  	    PROCS_LINE_ITEMS_CRU_V16.CREATE_DISCOUNT_LINE_ITEM(
16:21:05 154  	      in_discount_id =>  f_discount.ID,
16:21:05 155  	      in_line_item_id => var_new_line_item_id
16:21:05 156  	    );
16:21:05 157  	  END LOOP;
16:21:05 158  	END LOOP;
16:21:05 159  
16:21:05 160  EXCEPTION
16:21:05 161  WHEN BAD_INVOICE_ID THEN
16:21:05 162  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 163  	  SPROC_NAME, 'No such license');
16:21:05 164  WHEN BAD_OFFER_ID THEN
16:21:05 165  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 166  	  SPROC_NAME, 'No such offer');
16:21:05 167  WHEN BAD_DISCOUNT THEN
16:21:05 168  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 169  	  SPROC_NAME, 'Bad Discount');
16:21:05 170  WHEN OTHERS THEN
16:21:05 171  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 173  END ADD_LINE_ITEMS;
16:21:05 174  
16:21:05 175  /******************************************************************************/
16:21:05 176  
16:21:05 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
16:21:05 178  	in_line_item_id    IN NUMBER,
16:21:05 179  	in_amount	   IN NUMBER,
16:21:05 180  	in_discount_amount IN NUMBER,
16:21:05 181  	in_taxes_amount    IN NUMBER
16:21:05 182  ) AS
16:21:05 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
16:21:05 184  -- VARIABLES
16:21:05 185  temp_line_item_id NUMBER;
16:21:05 186  -- EXCEPTIONS
16:21:05 187  BAD_LINE_ITEM_ID EXCEPTION;
16:21:05 188  BEGIN
16:21:05 189  
16:21:05 190  	-- Check that line item exists
16:21:05 191  	BEGIN
16:21:05 192  	  SELECT
16:21:05 193  	    LINE_ITEM.ID into temp_line_item_id
16:21:05 194  	  FROM
16:21:05 195  	    LINE_ITEM
16:21:05 196  	  WHERE
16:21:05 197  	    LINE_ITEM.ID = in_line_item_id;
16:21:05 198  	  EXCEPTION
16:21:05 199  	    WHEN NO_DATA_FOUND THEN
16:21:05 200  	      RAISE BAD_LINE_ITEM_ID;
16:21:05 201  	END;
16:21:05 202  
16:21:05 203  	-- Update line item
16:21:05 204  	PROCS_LINE_ITEMS_CRU_V16.UPDATE_LINE_ITEM(
16:21:05 205  	  in_line_item_id    => in_line_item_id,
16:21:05 206  	  in_amount	     => in_amount,
16:21:05 207  	  in_discount_amount => in_discount_amount,
16:21:05 208  	  in_taxes_amount    => in_taxes_amount
16:21:05 209  	);
16:21:05 210  
16:21:05 211  EXCEPTION
16:21:05 212  WHEN BAD_LINE_ITEM_ID THEN
16:21:05 213  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 214  	  SPROC_NAME, 'No such line item');
16:21:05 215  WHEN OTHERS THEN
16:21:05 216  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 218  END UPDATE_LINE_ITEM_AMOUNT;
16:21:05 219  
16:21:05 220  /******************************************************************************/
16:21:05 221  
16:21:05 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:21:05 223  /*
16:21:05 224  Throws exceptions:
16:21:05 225  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 226  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 227  */
16:21:05 228  	in_invoice_id  IN NUMBER,
16:21:05 229  	out_result_set OUT SYS_REFCURSOR
16:21:05 230  ) AS
16:21:05 231  -- VARIABLES
16:21:05 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
16:21:05 233  temp_invoice_id NUMBER;
16:21:05 234  
16:21:05 235  -- EXCEPTIONS
16:21:05 236  BAD_INVOICE_ID EXCEPTION;
16:21:05 237  BEGIN
16:21:05 238  
16:21:05 239  	-- Check that given invoice exists
16:21:05 240  	BEGIN
16:21:05 241  	  SELECT
16:21:05 242  	    INVOICE.ID into temp_invoice_id
16:21:05 243  	  FROM
16:21:05 244  	    INVOICE
16:21:05 245  	  WHERE
16:21:05 246  	    INVOICE.ID = in_invoice_id;
16:21:05 247  	  EXCEPTION
16:21:05 248  	    WHEN NO_DATA_FOUND THEN
16:21:05 249  	      RAISE BAD_INVOICE_ID;
16:21:05 250  	END;
16:21:05 251  
16:21:05 252  	-- Select line items
16:21:05 253  	OPEN out_result_set FOR
16:21:05 254  	SELECT
16:21:05 255  	  LINE_ITEM.ID,
16:21:05 256  	  LINE_ITEM.AMOUNT,
16:21:05 257  	  LINE_ITEM.CREATE_DATE,
16:21:05 258  	  LINE_ITEM.CREATED_BY,
16:21:05 259  	  LINE_ITEM.INVOICE_ID,
16:21:05 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
16:21:05 261  	  LINE_ITEM.TAXES_AMOUNT,
16:21:05 262  	  LINE_ITEM.PRODUCT_OFFER_ID
16:21:05 263  	FROM
16:21:05 264  	  LINE_ITEM
16:21:05 265  	WHERE
16:21:05 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
16:21:05 267  
16:21:05 268  EXCEPTION
16:21:05 269  WHEN BAD_INVOICE_ID THEN
16:21:05 270  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 271  	  SPROC_NAME, 'No such invoice');
16:21:05 272  WHEN OTHERS THEN
16:21:05 273  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 275  END GET_INVOICE_LINE_ITEMS;
16:21:05 276  
16:21:05 277  /******************************************************************************/
16:21:05 278  
16:21:05 279  PROCEDURE GET_LINE_ITEM_TAXES (
16:21:05 280  /*
16:21:05 281  Throws exceptions:
16:21:05 282  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 283  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 284  */
16:21:05 285  	in_line_item_id IN  NUMBER,
16:21:05 286  	out_result_set	OUT SYS_REFCURSOR
16:21:05 287  ) AS
16:21:05 288  -- VARIABLES
16:21:05 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
16:21:05 290  temp_line_item_id NUMBER;
16:21:05 291  -- EXCEPTIONS
16:21:05 292  BAD_LINE_ITEM_ID EXCEPTION;
16:21:05 293  BEGIN
16:21:05 294  
16:21:05 295  	-- Check that line item exists
16:21:05 296  	BEGIN
16:21:05 297  	  SELECT
16:21:05 298  	    LINE_ITEM.ID into temp_line_item_id
16:21:05 299  	  FROM
16:21:05 300  	    LINE_ITEM
16:21:05 301  	  WHERE
16:21:05 302  	    LINE_ITEM.ID = in_line_item_id;
16:21:05 303  	  EXCEPTION
16:21:05 304  	    WHEN NO_DATA_FOUND THEN
16:21:05 305  	      RAISE BAD_LINE_ITEM_ID;
16:21:05 306  	END;
16:21:05 307  
16:21:05 308  	-- Get all taxes for given line item
16:21:05 309  	OPEN out_result_set FOR
16:21:05 310  	SELECT
16:21:05 311  	  TAX.ID,
16:21:05 312  	  TAX.CALCULATED_AMOUNT,
16:21:05 313  	  TAX.CREATE_DATE,
16:21:05 314  	  TAX.CREATED_BY,
16:21:05 315  	  TAX.EFFECTIVE_RATE,
16:21:05 316  	  TAX.EXT_RESULT,
16:21:05 317  	  TAX.EXT_TAX_TYPE,
16:21:05 318  	  TAX.IMPOSITION,
16:21:05 319  	  TAX.IMPOSITION_TYPE,
16:21:05 320  	  TAX.JURISDICTION_ID,
16:21:05 321  	  TAX.JURISDICTION_LEVEL_ID,
16:21:05 322  	  TAX.JURISDICTION_NAME,
16:21:05 323  	  TAX.LINE_ITEM_ID,
16:21:05 324  	  TAX.TAX_RULE_ID,
16:21:05 325  	  TAX.TAX_TYPE_ID,
16:21:05 326  	  TAX.TAXABLE_AMOUNT
16:21:05 327  	FROM
16:21:05 328  	  TAX
16:21:05 329  	WHERE
16:21:05 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
16:21:05 331  
16:21:05 332  EXCEPTION
16:21:05 333  WHEN BAD_LINE_ITEM_ID THEN
16:21:05 334  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 335  	  SPROC_NAME, 'No such line item');
16:21:05 336  WHEN OTHERS THEN
16:21:05 337  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 339  END GET_LINE_ITEM_TAXES;
16:21:05 340  
16:21:05 341  -- norlov: #38770
16:21:05 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
16:21:05 343  /*
16:21:05 344  Throws exceptions:
16:21:05 345  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 346  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 347  */
16:21:05 348  	in_line_item_id IN  NUMBER,
16:21:05 349  	out_result_set	OUT SYS_REFCURSOR
16:21:05 350  ) AS
16:21:05 351  -- VARIABLES
16:21:05 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
16:21:05 353  temp_line_item_id NUMBER;
16:21:05 354  -- EXCEPTIONS
16:21:05 355  BAD_LINE_ITEM_ID EXCEPTION;
16:21:05 356  BEGIN
16:21:05 357  
16:21:05 358  	-- Check that line item exists
16:21:05 359  	BEGIN
16:21:05 360  	  SELECT
16:21:05 361  	    LINE_ITEM.ID into temp_line_item_id
16:21:05 362  	  FROM
16:21:05 363  	    LINE_ITEM
16:21:05 364  	  WHERE
16:21:05 365  	    LINE_ITEM.ID = in_line_item_id;
16:21:05 366  	  EXCEPTION
16:21:05 367  	    WHEN NO_DATA_FOUND THEN
16:21:05 368  	      RAISE BAD_LINE_ITEM_ID;
16:21:05 369  	END;
16:21:05 370  
16:21:05 371  	-- Get all discounts for given line item
16:21:05 372  	OPEN out_result_set FOR
16:21:05 373  	SELECT
16:21:05 374  	  DISCOUNT.FIXED_AMOUNT,
16:21:05 375  	  DISCOUNT.NAME,
16:21:05 376  	  DISCOUNT.ID,
16:21:05 377  	  DISCOUNT.PERCENT_AMOUNT
16:21:05 378  	FROM
16:21:05 379  	  DISCOUNT_LINE_ITEM
16:21:05 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
16:21:05 381  	WHERE
16:21:05 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
16:21:05 383  
16:21:05 384  EXCEPTION
16:21:05 385  WHEN BAD_LINE_ITEM_ID THEN
16:21:05 386  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 387  	  SPROC_NAME, 'No such line item');
16:21:05 388  WHEN OTHERS THEN
16:21:05 389  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 391  END GET_LINE_ITEM_DISCOUNTS;
16:21:05 392  /******************************************************************************/
16:21:05 393  
16:21:05 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
16:21:05 395  /*
16:21:05 396  Throws exceptions:
16:21:05 397  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 398  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 399  */
16:21:05 400  	in_line_item_id     IN	NUMBER,
16:21:05 401  	out_amount	    OUT NUMBER
16:21:05 402  ) AS
16:21:05 403  -- VARIABLES
16:21:05 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
16:21:05 405  -- EXCEPTIONS
16:21:05 406  BAD_LINE_ITEM_ID EXCEPTION;
16:21:05 407  BEGIN
16:21:05 408  
16:21:05 409  	BEGIN
16:21:05 410  	  SELECT
16:21:05 411  	    LINE_ITEM.AMOUNT into out_amount
16:21:05 412  	  FROM
16:21:05 413  	    LINE_ITEM
16:21:05 414  	  WHERE
16:21:05 415  	    LINE_ITEM.ID = in_line_item_id;
16:21:05 416  	  EXCEPTION
16:21:05 417  	    WHEN NO_DATA_FOUND THEN
16:21:05 418  	      RAISE BAD_LINE_ITEM_ID;
16:21:05 419  	END;
16:21:05 420  
16:21:05 421  EXCEPTION
16:21:05 422  WHEN BAD_LINE_ITEM_ID THEN
16:21:05 423  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 424  	  SPROC_NAME, 'No such line item');
16:21:05 425  WHEN OTHERS THEN
16:21:05 426  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 428  END CALCULATE_LINE_ITEM_AMOUNT;
16:21:05 429  
16:21:05 430  /******************************************************************************/
16:21:05 431  
16:21:05 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
16:21:05 433  /*
16:21:05 434  Throws exceptions:
16:21:05 435  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 436  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 437  */
16:21:05 438  	in_line_item_id     IN	NUMBER
16:21:05 439  ) RETURN NUMBER AS
16:21:05 440  var_invoice_amount NUMBER(10, 2);
16:21:05 441  BEGIN
16:21:05 442  	PROCS_LINE_ITEMS_V16.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
16:21:05 443  	RETURN var_invoice_amount;
16:21:05 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
16:21:05 445  
16:21:05 446  END PROCS_LINE_ITEMS_V16;
16:21:05 447  .
16:21:05 SQL> /

Package body created.

Elapsed: 00:00:00.07
16:21:05 SQL> 
16:21:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V16" AS
16:21:05   2  
16:21:05   3  /*
16:21:05   4  PROCEDURE INITIALIZE_SYSTEM AS
16:21:05   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
16:21:05   6  -- VARIABLES
16:21:05   7  var_account_ids SYS_REFCURSOR;
16:21:05   8  var_account_id  NUMBER;
16:21:05   9  BEGIN
16:21:05  10  
16:21:05  11  	OPEN var_account_ids FOR
16:21:05  12  	SELECT
16:21:05  13  	  ACCOUNT.ID
16:21:05  14  	FROM
16:21:05  15  	  ACCOUNT;
16:21:05  16  
16:21:05  17  	LOOP
16:21:05  18  	  FETCH var_account_ids into var_account_id;
16:21:05  19  	  EXIT WHEN var_account_ids%NOTFOUND;
16:21:05  20  	  BEGIN
16:21:05  21  	    INITIALIZE_ACCOUNT(var_account_id);
16:21:05  22  	    EXCEPTION
16:21:05  23  	      WHEN OTHERS THEN
16:21:05  24  		NULL;
16:21:05  25  	  END;
16:21:05  26  	END LOOP;
16:21:05  27  
16:21:05  28  END INITIALIZE_SYSTEM;
16:21:05  29  
16:21:05  30  PROCEDURE INITIALIZE_ACCOUNT (
16:21:05  31  	in_account_id IN NUMBER
16:21:05  32  ) AS
16:21:05  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
16:21:05  34  -- EXCEPTIONS
16:21:05  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
16:21:05  36  BEGIN
16:21:05  37  
16:21:05  38  	BEGIN
16:21:05  39  	  INSERT INTO ACCOUNT_LOCK(
16:21:05  40  	    ACCOUNT_ID,
16:21:05  41  	    LOCK_KEY,
16:21:05  42  	    END_DATE,
16:21:05  43  	    CREATED_BY,
16:21:05  44  	    REASON
16:21:05  45  	  ) VALUES (
16:21:05  46  	    in_account_id,
16:21:05  47  	    'initialization key',
16:21:05  48  	    SYSDATE,
16:21:05  49  	    'system',
16:21:05  50  	    'initialization'
16:21:05  51  	  );
16:21:05  52  	  EXCEPTION
16:21:05  53  	    WHEN DUP_VAL_ON_INDEX THEN
16:21:05  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
16:21:05  55  	END;
16:21:05  56  
16:21:05  57  EXCEPTION
16:21:05  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
16:21:05  59  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:05  60  	  SPROC_NAME, 'Account already initialized');
16:21:05  61  WHEN OTHERS THEN
16:21:05  62  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05  64  END;
16:21:05  65  
16:21:05  66  PROCEDURE INITIALIZE_GROUP (
16:21:05  67  	in_group_id IN NUMBER
16:21:05  68  ) AS
16:21:05  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
16:21:05  70  -- VARIABLES
16:21:05  71  var_account_id NUMBER;
16:21:05  72  -- EXCEPTIONS
16:21:05  73  BAD_GROUP_ID		EXCEPTION;
16:21:05  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
16:21:05  75  BEGIN
16:21:05  76  
16:21:05  77  	BEGIN
16:21:05  78  	  SELECT
16:21:05  79  	    ACCOUNT.ID into var_account_id
16:21:05  80  	  FROM
16:21:05  81  	    ACCOUNT
16:21:05  82  	  WHERE
16:21:05  83  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:05  84  	  EXCEPTION
16:21:05  85  	    WHEN NO_DATA_FOUND THEN
16:21:05  86  	     RAISE BAD_GROUP_ID;
16:21:05  87  	END;
16:21:05  88  
16:21:05  89  	BEGIN
16:21:05  90  	  INSERT INTO ACCOUNT_LOCK (
16:21:05  91  	    ACCOUNT_ID,
16:21:05  92  	    LOCK_KEY,
16:21:05  93  	    END_DATE,
16:21:05  94  	    CREATED_BY,
16:21:05  95  	    REASON
16:21:05  96  	  ) VALUES (
16:21:05  97  	    var_account_id,
16:21:05  98  	    'initialization key',
16:21:05  99  	    SYSDATE,
16:21:05 100  	    'system',
16:21:05 101  	    'initialization'
16:21:05 102  	  );
16:21:05 103  	  EXCEPTION
16:21:05 104  	    WHEN DUP_VAL_ON_INDEX THEN
16:21:05 105  	      RAISE GROUP_ALREADY_INITIALIZED;
16:21:05 106  	END;
16:21:05 107  
16:21:05 108  EXCEPTION
16:21:05 109  WHEN BAD_GROUP_ID THEN
16:21:05 110  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 111  	  SPROC_NAME, 'No such account with given group id');
16:21:05 112  WHEN GROUP_ALREADY_INITIALIZED THEN
16:21:05 113  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:05 114  	  SPROC_NAME, 'Group already initialized');
16:21:05 115  WHEN OTHERS THEN
16:21:05 116  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 118  END INITIALIZE_GROUP;
16:21:05 119  */
16:21:05 120  
16:21:05 121  PROCEDURE LOCK_ACCOUNT (
16:21:05 122  	in_group_id    IN NUMBER,
16:21:05 123  	in_lock_key    IN VARCHAR2,
16:21:05 124  	in_seconds_num IN NUMBER,
16:21:05 125  	in_created_by  IN VARCHAR2,
16:21:05 126  	in_reason      IN VARCHAR2
16:21:05 127  ) AS
16:21:05 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
16:21:05 129  -- CONSTANTS
16:21:05 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
16:21:05 131  -- VARIABLES
16:21:05 132  var_account_id NUMBER;
16:21:05 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:05 134  var_date		DATE := SYSDATE;
16:21:05 135  var_lock_end_date DATE;
16:21:05 136  -- EXCEPTIONS
16:21:05 137  BAD_GROUP_ID   EXCEPTION;
16:21:05 138  ALREADY_LOCKED EXCEPTION;
16:21:05 139  BEGIN
16:21:05 140  
16:21:05 141  	BEGIN
16:21:05 142  	  SELECT
16:21:05 143  	    ACCOUNT.ID into var_account_id
16:21:05 144  	  FROM
16:21:05 145  	    ACCOUNT
16:21:05 146  	  WHERE
16:21:05 147  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:05 148  	  EXCEPTION
16:21:05 149  	    WHEN NO_DATA_FOUND THEN
16:21:05 150  	      RAISE BAD_GROUP_ID;
16:21:05 151  	END;
16:21:05 152  
16:21:05 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
16:21:05 154  
16:21:05 155  	BEGIN
16:21:05 156  
16:21:05 157  	  INSERT INTO ACCOUNT_LOCK (
16:21:05 158  	    ACCOUNT_ID,
16:21:05 159  	    LOCK_KEY,
16:21:05 160  	    END_DATE,
16:21:05 161  	    CREATED_BY,
16:21:05 162  	    REASON
16:21:05 163  	  ) VALUES (
16:21:05 164  	    var_account_id,
16:21:05 165  	    in_lock_key,
16:21:05 166  	    var_lock_end_date,
16:21:05 167  	    in_created_by,
16:21:05 168  	    in_reason
16:21:05 169  	  );
16:21:05 170  
16:21:05 171  	  EXCEPTION
16:21:05 172  	    WHEN DUP_VAL_ON_INDEX THEN
16:21:05 173  	      -- This rows was created before... I will try to update it
16:21:05 174  	      BEGIN
16:21:05 175  
16:21:05 176  		UPDATE
16:21:05 177  		  ACCOUNT_LOCK
16:21:05 178  		SET
16:21:05 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
16:21:05 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
16:21:05 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
16:21:05 182  		  ACCOUNT_LOCK.REASON = in_reason
16:21:05 183  		WHERE
16:21:05 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
16:21:05 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
16:21:05 186  
16:21:05 187  		IF SQL%ROWCOUNT = 0 THEN
16:21:05 188  		  RAISE ALREADY_LOCKED;
16:21:05 189  		END IF;
16:21:05 190  
16:21:05 191  	      END;
16:21:05 192  	END;
16:21:05 193  
16:21:05 194  EXCEPTION
16:21:05 195  WHEN BAD_GROUP_ID THEN
16:21:05 196  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 197  	  SPROC_NAME, 'No such group id');
16:21:05 198  WHEN ALREADY_LOCKED THEN
16:21:05 199  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:05 200  	  SPROC_NAME, 'Account already locked');
16:21:05 201  WHEN OTHERS THEN
16:21:05 202  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 204  END LOCK_ACCOUNT;
16:21:05 205  
16:21:05 206  /******************************************************************************/
16:21:05 207  
16:21:05 208  PROCEDURE RELEASE_LOCK (
16:21:05 209  	in_group_id IN NUMBER,
16:21:05 210  	in_lock_key IN VARCHAR2
16:21:05 211  ) AS
16:21:05 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
16:21:05 213  -- VARIABLES
16:21:05 214  var_account_id NUMBER;
16:21:05 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:21:05 216  var_date DATE := SYSDATE;
16:21:05 217  -- EXCEPTIONS
16:21:05 218  BAD_GROUP_ID		EXCEPTION;
16:21:05 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
16:21:05 220  BEGIN
16:21:05 221  
16:21:05 222  	BEGIN
16:21:05 223  	  SELECT
16:21:05 224  	    ACCOUNT.ID into var_account_id
16:21:05 225  	  FROM
16:21:05 226  	    ACCOUNT
16:21:05 227  	  WHERE
16:21:05 228  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:05 229  	  EXCEPTION
16:21:05 230  	    WHEN NO_DATA_FOUND THEN
16:21:05 231  	      RAISE BAD_GROUP_ID;
16:21:05 232  	END;
16:21:05 233  
16:21:05 234  	UPDATE
16:21:05 235  	  ACCOUNT_LOCK
16:21:05 236  	SET
16:21:05 237  	  ACCOUNT_LOCK.END_DATE = var_date
16:21:05 238  	WHERE
16:21:05 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
16:21:05 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
16:21:05 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
16:21:05 242  
16:21:05 243  	IF SQL%ROWCOUNT = 0 THEN
16:21:05 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
16:21:05 245  	END IF;
16:21:05 246  
16:21:05 247  EXCEPTION
16:21:05 248  WHEN BAD_GROUP_ID THEN
16:21:05 249  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 250  	  SPROC_NAME, 'No such group id');
16:21:05 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
16:21:05 252  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:05 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
16:21:05 254  WHEN OTHERS THEN
16:21:05 255  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 256  	  SPROC_NAME, 'Unknown error');
16:21:05 257  END RELEASE_LOCK;
16:21:05 258  
16:21:05 259  END PROCS_LOCKING_V16;
16:21:05 260  .
16:21:05 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:21:05 SQL> 
16:21:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V16" AS
16:21:05   2  
16:21:05   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:21:05   4  /*
16:21:05   5  Throws exceptions:
16:21:05   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05   8  */
16:21:05   9  	  in_offer_chain_id IN	 NUMBER,
16:21:05  10  	  out_result_set    OUT  SYS_REFCURSOR
16:21:05  11  ) AS
16:21:05  12  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_BY_ID';
16:21:05  13  BEGIN
16:21:05  14  
16:21:05  15  	-- Get offer chain informations
16:21:05  16  	OPEN out_result_set FOR
16:21:05  17  	  SELECT
16:21:05  18  	    OC.ID,
16:21:05  19  	    OC.NAME,
16:21:05  20  	    OC.ADOPTABILITY_WINDOW_START_DATE,
16:21:05  21  	    OC.ADOPTABILITY_WINDOW_END_DATE,
16:21:05  22  	    OC.DESCRIPTION,
16:21:05  23  	    OC.IS_GIFT_CERTIFICATE,
16:21:05  24  	    OC.OFFER_CHAIN_STATUS_ID,
16:21:05  25  	    OC.PRODUCT_URI,
16:21:05  26  	    OC.BILLING_SOURCE_ID,
16:21:05  27  	    OC.VENDOR_SOURCE_ID,
16:21:05  28  	    OC.GROUP_ACCOUNT_TYPE_ID,
16:21:05  29  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
16:21:05  30  	  FROM
16:21:05  31  	    OFFER_CHAIN OC
16:21:05  32  	  WHERE
16:21:05  33  	    OC.ID = in_offer_chain_id
16:21:05  34  	    AND ROWNUM <= 1;
16:21:05  35  
16:21:05  36  EXCEPTION
16:21:05  37  WHEN OTHERS THEN
16:21:05  38  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05  39  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05  40  END GET_OFFER_CHAIN_BY_ID;
16:21:05  41  
16:21:05  42  /******************************************************************************/
16:21:05  43  
16:21:05  44  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
16:21:05  45  /*
16:21:05  46  Throws exceptions:
16:21:05  47  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05  48  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:05  49  */
16:21:05  50  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:21:05  51  	out_result_set	   OUT SYS_REFCURSOR
16:21:05  52  ) AS
16:21:05  53  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
16:21:05  54  -- EXCEPTIONS
16:21:05  55  BAD_OFFER_CHAINS_IDS EXCEPTION;
16:21:05  56  BEGIN
16:21:05  57  
16:21:05  58  	IF (in_offer_chain_ids IS NULL) THEN
16:21:05  59  	  RAISE BAD_OFFER_CHAINS_IDS;
16:21:05  60  	END IF;
16:21:05  61  
16:21:05  62  	OPEN out_result_set FOR
16:21:05  63  	SELECT
16:21:05  64  	  OCH.ID,
16:21:05  65  	  OCH.NAME,
16:21:05  66  	  OCH.DESCRIPTION,
16:21:05  67  	  OCH.OFFER_CHAIN_STATUS_ID,
16:21:05  68  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
16:21:05  69  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
16:21:05  70  	  OCH.IS_GIFT_CERTIFICATE,
16:21:05  71  	  PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
16:21:05  72  	  PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
16:21:05  73  	  OCH.VENDOR_SOURCE_ID,
16:21:05  74  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
16:21:05  75  	FROM
16:21:05  76  	  OFFER_CHAIN OCH
16:21:05  77  	WHERE
16:21:05  78  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
16:21:05  79  
16:21:05  80  EXCEPTION
16:21:05  81  WHEN BAD_OFFER_CHAINS_IDS THEN
16:21:05  82  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:05  83  	  SPROC_NAME, 'Invalid offer chains ids');
16:21:05  84  WHEN OTHERS THEN
16:21:05  85  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05  86  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05  87  END GET_OFFER_CHAINS_BY_IDS;
16:21:05  88  
16:21:05  89  /******************************************************************************/
16:21:05  90  
16:21:05  91  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
16:21:05  92  /*
16:21:05  93  Throws exceptions:
16:21:05  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05  95  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:05  96  */
16:21:05  97  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:21:05  98  	out_result_set	   OUT SYS_REFCURSOR
16:21:05  99  ) AS
16:21:05 100  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
16:21:05 101  -- EXCEPTIONS
16:21:05 102  BAD_OFFER_CHAINS_IDS EXCEPTION;
16:21:05 103  BEGIN
16:21:05 104  
16:21:05 105  	IF (in_offer_chain_ids IS NULL) THEN
16:21:05 106  	  RAISE BAD_OFFER_CHAINS_IDS;
16:21:05 107  	END IF;
16:21:05 108  
16:21:05 109  	OPEN out_result_set FOR
16:21:05 110  	SELECT
16:21:05 111  	  OOCH.OFFER_CHAIN_ID,
16:21:05 112  	  PO.PRODUCT_ID
16:21:05 113  	FROM
16:21:05 114  	  PRODUCT_OFFERING PO
16:21:05 115  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
16:21:05 116  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
16:21:05 117  	WHERE
16:21:05 118  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
16:21:05 119  
16:21:05 120  EXCEPTION
16:21:05 121  WHEN BAD_OFFER_CHAINS_IDS THEN
16:21:05 122  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:05 123  	  SPROC_NAME, 'Invalid offer chains ids');
16:21:05 124  WHEN OTHERS THEN
16:21:05 125  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 127  END GET_OFFER_CHAINS_PRODUCTS;
16:21:05 128  
16:21:05 129  /******************************************************************************/
16:21:05 130  
16:21:05 131  PROCEDURE GET_OFFER_CHAINS_OFFERS (
16:21:05 132  /*
16:21:05 133  Throws exceptions:
16:21:05 134  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 135  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:05 136  */
16:21:05 137  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:21:05 138  	out_result_set	   OUT SYS_REFCURSOR
16:21:05 139  ) AS
16:21:05 140  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
16:21:05 141  -- EXCEPTIONS
16:21:05 142  BAD_OFFER_CHAINS_IDS EXCEPTION;
16:21:05 143  BEGIN
16:21:05 144  
16:21:05 145  	IF (in_offer_chain_ids IS NULL) THEN
16:21:05 146  	  RAISE BAD_OFFER_CHAINS_IDS;
16:21:05 147  	END IF;
16:21:05 148  
16:21:05 149  	OPEN out_result_set FOR
16:21:05 150  	SELECT
16:21:05 151  	  OOCH.OFFER_CHAIN_ID,
16:21:05 152  	  OOCH.OFFER_ID,
16:21:05 153  	  OOCH.INDEX_VALUE,
16:21:05 154  	  OOCH.NUM_RECURRENCES,
16:21:05 155  	  O.ENTITLEMENT_DURATION,
16:21:05 156  	  PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
16:21:05 157  	FROM
16:21:05 158  	  OFFER O
16:21:05 159  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
16:21:05 160  	WHERE
16:21:05 161  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
16:21:05 162  
16:21:05 163  EXCEPTION
16:21:05 164  WHEN BAD_OFFER_CHAINS_IDS THEN
16:21:05 165  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:05 166  	  SPROC_NAME, 'Invalid offer chains ids');
16:21:05 167  WHEN OTHERS THEN
16:21:05 168  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 169  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 170  END GET_OFFER_CHAINS_OFFERS;
16:21:05 171  
16:21:05 172  /******************************************************************************/
16:21:05 173  
16:21:05 174  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
16:21:05 175  /*
16:21:05 176  Throws exceptions (codes):
16:21:05 177  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 178  */
16:21:05 179  	in_product_id  IN  NUMBER,
16:21:05 180  	out_result_set OUT SYS_REFCURSOR
16:21:05 181  )AS
16:21:05 182  -- VARIBLES
16:21:05 183  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
16:21:05 184  temp_product_id NUMBER;
16:21:05 185  
16:21:05 186  -- EXCEPTIONS
16:21:05 187  BAD_PRODUCT_ID EXCEPTION;
16:21:05 188  BEGIN
16:21:05 189  
16:21:05 190  	-- Check that given product exists
16:21:05 191  	BEGIN
16:21:05 192  	  SELECT
16:21:05 193  	    PRODUCT.ID into temp_product_id
16:21:05 194  	  FROM
16:21:05 195  	    PRODUCT
16:21:05 196  	  WHERE
16:21:05 197  	    PRODUCT.ID = in_product_id;
16:21:05 198  	  EXCEPTION
16:21:05 199  	    WHEN NO_DATA_FOUND THEN
16:21:05 200  	      RAISE BAD_PRODUCT_ID;
16:21:05 201  	END;
16:21:05 202  
16:21:05 203  	-- Select all offer chains that contains given product
16:21:05 204  	OPEN out_result_set FOR
16:21:05 205  	SELECT
16:21:05 206  	  OFFER_CHAIN.ID,
16:21:05 207  	  OFFER_CHAIN.NAME,
16:21:05 208  	  OFFER_CHAIN.DESCRIPTION,
16:21:05 209  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
16:21:05 210  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
16:21:05 211  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
16:21:05 212  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
16:21:05 213  	FROM
16:21:05 214  	  OFFER_CHAIN
16:21:05 215  	WHERE
16:21:05 216  	  OFFER_CHAIN.ID IN (
16:21:05 217  	    SELECT DISTINCT
16:21:05 218  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
16:21:05 219  	    FROM
16:21:05 220  	      OFFER_OFFER_CHAIN
16:21:05 221  	    WHERE
16:21:05 222  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
16:21:05 223  		SELECT DISTINCT
16:21:05 224  		  OFFER_PRODUCT_OFFERING.OFFER_ID
16:21:05 225  		FROM
16:21:05 226  		  OFFER_PRODUCT_OFFERING
16:21:05 227  		WHERE
16:21:05 228  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
16:21:05 229  	      )
16:21:05 230  	  );
16:21:05 231  
16:21:05 232  EXCEPTION
16:21:05 233  WHEN BAD_PRODUCT_ID THEN
16:21:05 234  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 235  	  SPROC_NAME, 'No such product');
16:21:05 236  WHEN OTHERS THEN
16:21:05 237  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 239  END GET_OFFER_CHAINS_BY_PRODUCT;
16:21:05 240  
16:21:05 241  /******************************************************************************/
16:21:05 242  
16:21:05 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
16:21:05 244  /*
16:21:05 245  Throws exceptions (codes):
16:21:05 246  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 247  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 248  */
16:21:05 249  	in_offer_chain_id IN NUMBER,
16:21:05 250  	out_price	  OUT NUMBER
16:21:05 251  ) AS
16:21:05 252  -- VARIABLES
16:21:05 253  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
16:21:05 254  temp_offer_chain_id NUMBER;
16:21:05 255  
16:21:05 256  -- EXCEPTION
16:21:05 257  BAD_OFFER_CHAIN_ID       EXCEPTION;
16:21:05 258  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
16:21:05 259  EXCEPTION_MESSAGE        VARCHAR2(1024);
16:21:05 260  BEGIN
16:21:05 261  
16:21:05 262  	-- Check that given offer chain exists
16:21:05 263  	BEGIN
16:21:05 264  	  SELECT
16:21:05 265  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 266  	  FROM
16:21:05 267  	    OFFER_CHAIN
16:21:05 268  	  WHERE
16:21:05 269  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:21:05 270  
16:21:05 271  	  EXCEPTION
16:21:05 272  	  WHEN NO_DATA_FOUND THEN
16:21:05 273  	    RAISE BAD_OFFER_CHAIN_ID;
16:21:05 274  	END;
16:21:05 275  
16:21:05 276  	BEGIN
16:21:05 277  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
16:21:05 278  	  EXCEPTION
16:21:05 279  	    WHEN OTHERS THEN
16:21:05 280  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 281  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
16:21:05 282  	END;
16:21:05 283  
16:21:05 284  EXCEPTION
16:21:05 285  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:05 286  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 287  	  SPROC_NAME, 'Bad offer chain id');
16:21:05 288  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
16:21:05 289  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 290  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
16:21:05 291  WHEN OTHERS THEN
16:21:05 292  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 293  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 294  END GET_OFFER_CHAIN_PRICE;
16:21:05 295  
16:21:05 296  /******************************************************************************/
16:21:05 297  
16:21:05 298  PROCEDURE GET_FIRST_OFFER(
16:21:05 299  /*
16:21:05 300  Throws exceptions (codes):
16:21:05 301  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 302  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 303  */
16:21:05 304  	in_offer_chain_id IN  NUMBER,
16:21:05 305  	out_offer_id	  OUT NUMBER
16:21:05 306  ) AS
16:21:05 307  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
16:21:05 308  BEGIN
16:21:05 309  	-- Seect first offer in offer chain
16:21:05 310  	SELECT
16:21:05 311  	  OFFER_ID into out_offer_id
16:21:05 312  	FROM (
16:21:05 313  	  SELECT
16:21:05 314  	    OFFER_OFFER_CHAIN.OFFER_ID
16:21:05 315  	  FROM
16:21:05 316  	    OFFER_OFFER_CHAIN
16:21:05 317  	  WHERE
16:21:05 318  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 319  	  ORDER BY
16:21:05 320  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
16:21:05 321  	)
16:21:05 322  	WHERE
16:21:05 323  	  ROWNUM <= 1;
16:21:05 324  
16:21:05 325  EXCEPTION
16:21:05 326  WHEN NO_DATA_FOUND THEN
16:21:05 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 328  	  SPROC_NAME, 'No such offer chain');
16:21:05 329  WHEN OTHERS THEN
16:21:05 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 332  END GET_FIRST_OFFER;
16:21:05 333  
16:21:05 334  /******************************************************************************/
16:21:05 335  
16:21:05 336  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
16:21:05 337  /*
16:21:05 338  Throws exceptions (codes):
16:21:05 339  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 340  */
16:21:05 341  	out_result_set OUT SYS_REFCURSOR
16:21:05 342  ) AS
16:21:05 343  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
16:21:05 344  BEGIN
16:21:05 345  	OPEN out_result_set FOR
16:21:05 346  	SELECT
16:21:05 347  	  OFFER_CHAIN.ID,
16:21:05 348  	  OFFER_CHAIN.NAME,
16:21:05 349  	  OFFER_CHAIN.DESCRIPTION,
16:21:05 350  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
16:21:05 351  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
16:21:05 352  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
16:21:05 353  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
16:21:05 354  	  PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
16:21:05 355  	  PRODUCT_OFFERING.PRODUCT_ID
16:21:05 356  	FROM
16:21:05 357  	  OFFER_CHAIN,
16:21:05 358  	  OFFER_OFFER_CHAIN,
16:21:05 359  	  OFFER_PRODUCT_OFFERING,
16:21:05 360  	  PRODUCT_OFFERING
16:21:05 361  	WHERE
16:21:05 362  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
16:21:05 363  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
16:21:05 364  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:21:05 365  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE;
16:21:05 366  
16:21:05 367  EXCEPTION
16:21:05 368  WHEN OTHERS THEN
16:21:05 369  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 370  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 371  END GET_ACTIVE_OFFER_CHAINS;
16:21:05 372  
16:21:05 373  /******************************************************************************/
16:21:05 374  
16:21:05 375  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
16:21:05 376  /*
16:21:05 377  Throws exceptions (codes):
16:21:05 378  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 379  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 380  */
16:21:05 381  	in_offer_chain_id IN NUMBER,
16:21:05 382  	out_result_set	  OUT SYS_REFCURSOR
16:21:05 383  ) AS
16:21:05 384  -- VARIABLES
16:21:05 385  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
16:21:05 386  temp_offer_chain_id NUMBER;
16:21:05 387  
16:21:05 388  -- EXCEPTIONS
16:21:05 389  BAD_OFFER_CHAIN EXCEPTION;
16:21:05 390  BEGIN
16:21:05 391  
16:21:05 392  	-- Check that offer chain exists
16:21:05 393  	BEGIN
16:21:05 394  	  SELECT
16:21:05 395  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 396  	  FROM
16:21:05 397  	    OFFER_CHAIN
16:21:05 398  	  WHERE
16:21:05 399  	    OFFER_CHAIN.ID = in_offer_chain_id
16:21:05 400  	    AND ROWNUM <= 1;
16:21:05 401  
16:21:05 402  	  EXCEPTION
16:21:05 403  	    WHEN OTHERS THEN
16:21:05 404  	      RAISE BAD_OFFER_CHAIN;
16:21:05 405  	END;
16:21:05 406  
16:21:05 407  	-- Select all products for given offer chain
16:21:05 408  	OPEN out_result_set FOR
16:21:05 409  	SELECT DISTINCT
16:21:05 410  	  PRODUCT_OFFERING.PRODUCT_ID
16:21:05 411  	FROM
16:21:05 412  	  PRODUCT_OFFERING
16:21:05 413  	WHERE
16:21:05 414  	  PRODUCT_OFFERING.ID IN (
16:21:05 415  	    SELECT DISTINCT
16:21:05 416  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:21:05 417  	    FROM
16:21:05 418  	      OFFER_PRODUCT_OFFERING
16:21:05 419  	    WHERE
16:21:05 420  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:21:05 421  		SELECT
16:21:05 422  		  OFFER_OFFER_CHAIN.OFFER_ID
16:21:05 423  		FROM
16:21:05 424  		  OFFER_OFFER_CHAIN
16:21:05 425  		WHERE
16:21:05 426  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 427  	      )
16:21:05 428  	  );
16:21:05 429  
16:21:05 430  EXCEPTION
16:21:05 431  WHEN BAD_OFFER_CHAIN THEN
16:21:05 432  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 433  	  SPROC_NAME, 'No such offer chain');
16:21:05 434  WHEN OTHERS THEN
16:21:05 435  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 437  END GET_OFFER_CHAIN_PRODUCTS;
16:21:05 438  
16:21:05 439  /******************************************************************************/
16:21:05 440  
16:21:05 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
16:21:05 442  /*
16:21:05 443  Throws exceptions (codes):
16:21:05 444  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 445  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 446  */
16:21:05 447  	in_offer_chain_id	  IN NUMBER,
16:21:05 448  	in_offer_chain_start_date IN DATE
16:21:05 449  ) RETURN DATE AS
16:21:05 450  -- VARIABLES
16:21:05 451  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
16:21:05 452  temp_offer_chain_id    NUMBER;
16:21:05 453  var_offer_chain_length NUMBER;
16:21:05 454  var_offer_duration     VARCHAR2(30);
16:21:05 455  var_offer_recurrences  NUMBER;
16:21:05 456  var_end_date	     DATE;
16:21:05 457  
16:21:05 458  var_offer_ym_interval INTERVAL YEAR TO MONTH;
16:21:05 459  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
16:21:05 460  var_offer_years	    NUMBER;
16:21:05 461  var_offer_months	    NUMBER;
16:21:05 462  var_offer_days	    NUMBER;
16:21:05 463  var_infinity_offers_count NUMBER;
16:21:05 464  
16:21:05 465  var_offers_set SYS_REFCURSOR;
16:21:05 466  
16:21:05 467  -- EXCEPTIONS
16:21:05 468  BAD_OFFER_CHAIN_ID EXCEPTION;
16:21:05 469  BEGIN
16:21:05 470  
16:21:05 471  	var_end_date := in_offer_chain_start_date;
16:21:05 472  
16:21:05 473  	-- Check that offer chain exists
16:21:05 474  	BEGIN
16:21:05 475  	  SELECT
16:21:05 476  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 477  	  FROM
16:21:05 478  	    OFFER_CHAIN
16:21:05 479  	  WHERE
16:21:05 480  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:21:05 481  	  EXCEPTION
16:21:05 482  	    WHEN NO_DATA_FOUND
16:21:05 483  	      THEN RAISE BAD_OFFER_CHAIN_ID;
16:21:05 484  	END;
16:21:05 485  
16:21:05 486  	SELECT
16:21:05 487  	  COUNT(*) into var_infinity_offers_count
16:21:05 488  	FROM
16:21:05 489  	  OFFER_OFFER_CHAIN
16:21:05 490  	WHERE
16:21:05 491  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 492  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V16.OFFER_REC_INFINITY;
16:21:05 493  
16:21:05 494  	IF var_infinity_offers_count > 0 THEN
16:21:05 495  	  -- Offer chain contains offers with infinity num of recurrences
16:21:05 496  	  RETURN NULL;
16:21:05 497  	END IF;
16:21:05 498  
16:21:05 499  	-- Select offers durations
16:21:05 500  	OPEN var_offers_set FOR
16:21:05 501  	SELECT
16:21:05 502  	  OFFER.ENTITLEMENT_DURATION,
16:21:05 503  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
16:21:05 504  	FROM
16:21:05 505  	  OFFER_OFFER_CHAIN
16:21:05 506  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:21:05 507  	WHERE
16:21:05 508  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
16:21:05 509  
16:21:05 510  	-- Calculate sum of offers durations
16:21:05 511  	LOOP
16:21:05 512  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
16:21:05 513  	  EXIT WHEN var_offers_set%NOTFOUND;
16:21:05 514  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
16:21:05 515  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
16:21:05 516  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
16:21:05 517  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
16:21:05 518  	END LOOP;
16:21:05 519  
16:21:05 520  	RETURN var_end_date;
16:21:05 521  
16:21:05 522  EXCEPTION
16:21:05 523  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:05 524  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 525  	  SPROC_NAME, 'No such offer chain');
16:21:05 526  WHEN OTHERS THEN
16:21:05 527  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 528  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 529  END CALCULATE_OFFER_CHAIN_END_DATE;
16:21:05 530  
16:21:05 531  /******************************************************************************/
16:21:05 532  
16:21:05 533  FUNCTION CALCULATE_OFFER_AMOUNT (
16:21:05 534  	in_offer_id IN NUMBER
16:21:05 535  ) RETURN NUMBER AS
16:21:05 536  -- VARIABLES
16:21:05 537  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
16:21:05 538  temp_offer_id NUMBER;
16:21:05 539  
16:21:05 540  var_product_offering_set	    SYS_REFCURSOR;
16:21:05 541  var_product_offering_id	    NUMBER;
16:21:05 542  var_product_offering_price    NUMBER(10,6);
16:21:05 543  var_product_offering_t_amount NUMBER(10,6);
16:21:05 544  var_product_offering_quantity NUMBER;
16:21:05 545  
16:21:05 546  var_total_amount NUMBER(10,6);
16:21:05 547  var_final_amount NUMBER(10,2);
16:21:05 548  
16:21:05 549  var_percent_discount NUMBER(10,2);
16:21:05 550  var_fixed_discount NUMBER(10,6);
16:21:05 551  
16:21:05 552  -- EXCEPTIONS
16:21:05 553  BAD_OFFER_ID EXCEPTION;
16:21:05 554  BEGIN
16:21:05 555  
16:21:05 556  	BEGIN
16:21:05 557  	  SELECT
16:21:05 558  	    OFFER.ID into temp_offer_id
16:21:05 559  	  FROM
16:21:05 560  	    OFFER
16:21:05 561  	  WHERE
16:21:05 562  	    OFFER.ID = in_offer_id;
16:21:05 563  	  EXCEPTION
16:21:05 564  	    WHEN NO_DATA_FOUND THEN
16:21:05 565  	      RAISE BAD_OFFER_ID;
16:21:05 566  	END;
16:21:05 567  
16:21:05 568  	OPEN var_product_offering_set FOR
16:21:05 569  	SELECT
16:21:05 570  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
16:21:05 571  	  PRODUCT_OFFERING.UNIT_PRICE,
16:21:05 572  	  PRODUCT_OFFERING.QUANTITY
16:21:05 573  	FROM
16:21:05 574  	  OFFER_PRODUCT_OFFERING
16:21:05 575  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:21:05 576  	WHERE
16:21:05 577  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
16:21:05 578  
16:21:05 579  	var_total_amount := 0;
16:21:05 580  
16:21:05 581  	LOOP
16:21:05 582  	  FETCH var_product_offering_set into
16:21:05 583  	    var_product_offering_id,
16:21:05 584  	    var_product_offering_price,
16:21:05 585  	    var_product_offering_quantity;
16:21:05 586  	  EXIT WHEN var_product_offering_set%NOTFOUND;
16:21:05 587  
16:21:05 588  	  SELECT
16:21:05 589  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
16:21:05 590  	  FROM
16:21:05 591  	    DISCOUNT_PRODUCT_OFFERING
16:21:05 592  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:21:05 593  	  WHERE
16:21:05 594  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:21:05 595  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
16:21:05 596  
16:21:05 597  	  SELECT
16:21:05 598  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
16:21:05 599  	  FROM
16:21:05 600  	    DISCOUNT_PRODUCT_OFFERING
16:21:05 601  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:21:05 602  	  WHERE
16:21:05 603  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:21:05 604  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
16:21:05 605  
16:21:05 606  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
16:21:05 607  
16:21:05 608  	  IF var_percent_discount IS NOT NULL THEN
16:21:05 609  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
16:21:05 610  	  END IF;
16:21:05 611  
16:21:05 612  	  IF var_fixed_discount IS NOT NULL THEN
16:21:05 613  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
16:21:05 614  	  END IF;
16:21:05 615  
16:21:05 616  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
16:21:05 617  	END LOOP;
16:21:05 618  	var_final_amount := var_total_amount;
16:21:05 619  	RETURN var_final_amount;
16:21:05 620  
16:21:05 621  EXCEPTION
16:21:05 622  WHEN BAD_OFFER_ID THEN
16:21:05 623  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 624  	  SPROC_NAME, 'No such offer');
16:21:05 625  WHEN OTHERS THEN
16:21:05 626  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 627  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 628  END CALCULATE_OFFER_AMOUNT;
16:21:05 629  
16:21:05 630  /******************************************************************************/
16:21:05 631  
16:21:05 632  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
16:21:05 633  	in_offer_chain_id IN NUMBER
16:21:05 634  ) RETURN NUMBER AS
16:21:05 635  -- VARIABLES
16:21:05 636  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
16:21:05 637  temp_offer_chain_id    NUMBER;
16:21:05 638  var_first_offer_id     NUMBER;
16:21:05 639  -- EXCEPTIONS
16:21:05 640  BAD_OFFER_CHAIN_ID      EXCEPTION;
16:21:05 641  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
16:21:05 642  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:21:05 643  BEGIN
16:21:05 644  
16:21:05 645  	BEGIN
16:21:05 646  	  SELECT
16:21:05 647  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 648  	  FROM
16:21:05 649  	    OFFER_CHAIN
16:21:05 650  	  WHERE
16:21:05 651  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:21:05 652  	  EXCEPTION
16:21:05 653  	    WHEN NO_DATA_FOUND THEN
16:21:05 654  	      RAISE BAD_OFFER_CHAIN_ID;
16:21:05 655  	END;
16:21:05 656  
16:21:05 657  	BEGIN
16:21:05 658  	  PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(
16:21:05 659  	    in_offer_chain_id => in_offer_chain_id,
16:21:05 660  	    out_offer_id      => var_first_offer_id
16:21:05 661  	  );
16:21:05 662  	  EXCEPTION
16:21:05 663  	    WHEN OTHERS THEN
16:21:05 664  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 665  	      RAISE CAN_NOT_GET_FIRST_OFFER;
16:21:05 666  	END;
16:21:05 667  
16:21:05 668  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
16:21:05 669  
16:21:05 670  EXCEPTION
16:21:05 671  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:05 672  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 673  	  SPROC_NAME, 'No such offer chain');
16:21:05 674  WHEN CAN_NOT_GET_FIRST_OFFER THEN
16:21:05 675  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 676  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
16:21:05 677  WHEN OTHERS THEN
16:21:05 678  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 680  END CALCULATE_OFFER_CHAIN_AMOUNT;
16:21:05 681  
16:21:05 682  /******************************************************************************/
16:21:05 683  
16:21:05 684  FUNCTION GET_FIRST_OFFER_INDEX (
16:21:05 685  	in_offer_chain_id IN NUMBER
16:21:05 686  ) RETURN NUMBER AS
16:21:05 687  -- VARIABLES
16:21:05 688  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
16:21:05 689  var_first_offer_index NUMBER;
16:21:05 690  BEGIN
16:21:05 691  
16:21:05 692  	SELECT
16:21:05 693  	  INDEX_VALUE into var_first_offer_index
16:21:05 694  	FROM (
16:21:05 695  	  SELECT
16:21:05 696  	    OFFER_OFFER_CHAIN.INDEX_VALUE
16:21:05 697  	  FROM
16:21:05 698  	    OFFER_OFFER_CHAIN
16:21:05 699  	  WHERE
16:21:05 700  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 701  	  ORDER BY
16:21:05 702  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
16:21:05 703  	)
16:21:05 704  	WHERE
16:21:05 705  	  ROWNUM <= 1;
16:21:05 706  
16:21:05 707  	RETURN var_first_offer_index;
16:21:05 708  
16:21:05 709  EXCEPTION
16:21:05 710  WHEN NO_DATA_FOUND THEN
16:21:05 711  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 712  	  SPROC_NAME, 'No such offer chain');
16:21:05 713  WHEN OTHERS THEN
16:21:05 714  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 715  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 716  END GET_FIRST_OFFER_INDEX;
16:21:05 717  
16:21:05 718  /******************************************************************************/
16:21:05 719  
16:21:05 720  FUNCTION GET_NEXT_OFFER_INDEX (
16:21:05 721  /*
16:21:05 722  NULL, if not exists
16:21:05 723  */
16:21:05 724  	in_offer_chain_id	     IN NUMBER,
16:21:05 725  	in_offer_chain_current_index IN NUMBER
16:21:05 726  ) RETURN NUMBER AS
16:21:05 727  -- VARIABLES
16:21:05 728  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
16:21:05 729  temp_offer_chain_id	     NUMBER;
16:21:05 730  temp_offer_chain_current_index NUMBER;
16:21:05 731  var_result		     NUMBER;
16:21:05 732  -- EXCEPTIONS
16:21:05 733  BAD_OFFER_CHAIN_ID      EXCEPTION;
16:21:05 734  BAD_CURRENT_INDEX_VALUE EXCEPTION;
16:21:05 735  BEGIN
16:21:05 736  
16:21:05 737  	-- Check that offer chain exists
16:21:05 738  	BEGIN
16:21:05 739  	  SELECT
16:21:05 740  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 741  	  FROM
16:21:05 742  	    OFFER_CHAIN
16:21:05 743  	  WHERE
16:21:05 744  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:21:05 745  	  EXCEPTION
16:21:05 746  	    WHEN NO_DATA_FOUND THEN
16:21:05 747  	      RAISE BAD_OFFER_CHAIN_ID;
16:21:05 748  	END;
16:21:05 749  
16:21:05 750  	-- Check that current offer index exists
16:21:05 751  	BEGIN
16:21:05 752  	  SELECT
16:21:05 753  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
16:21:05 754  	  FROM
16:21:05 755  	    OFFER_OFFER_CHAIN
16:21:05 756  	  WHERE
16:21:05 757  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 758  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
16:21:05 759  	    -- TODO: delete next line
16:21:05 760  	    AND ROWNUM <= 1;
16:21:05 761  	  EXCEPTION
16:21:05 762  	    WHEN NO_DATA_FOUND THEN
16:21:05 763  	      RAISE BAD_CURRENT_INDEX_VALUE;
16:21:05 764  	END;
16:21:05 765  
16:21:05 766  	-- Get next offer index
16:21:05 767  	BEGIN
16:21:05 768  	  SELECT
16:21:05 769  	    INDEX_VALUE into var_result
16:21:05 770  	  FROM (
16:21:05 771  	    SELECT
16:21:05 772  	      OFFER_OFFER_CHAIN.INDEX_VALUE
16:21:05 773  	    FROM
16:21:05 774  	      OFFER_OFFER_CHAIN
16:21:05 775  	    WHERE
16:21:05 776  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 777  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
16:21:05 778  	    ORDER BY
16:21:05 779  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
16:21:05 780  	  )
16:21:05 781  	  WHERE
16:21:05 782  	    ROWNUM <= 1;
16:21:05 783  	  EXCEPTION
16:21:05 784  	    WHEN NO_DATA_FOUND THEN
16:21:05 785  	      var_result := NULL;
16:21:05 786  	END;
16:21:05 787  
16:21:05 788  	RETURN var_result;
16:21:05 789  
16:21:05 790  EXCEPTION
16:21:05 791  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:05 792  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 793  	  SPROC_NAME, 'No such offer chain');
16:21:05 794  WHEN BAD_CURRENT_INDEX_VALUE THEN
16:21:05 795  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 796  	  SPROC_NAME, 'Bad current index value');
16:21:05 797  WHEN OTHERS THEN
16:21:05 798  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 799  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 800  END GET_NEXT_OFFER_INDEX;
16:21:05 801  
16:21:05 802  /******************************************************************************/
16:21:05 803  
16:21:05 804  PROCEDURE P_GET_NEXT_OFFER_INDEX (
16:21:05 805  	in_offer_chain_id	     IN NUMBER,
16:21:05 806  	in_offer_chain_current_index IN NUMBER,
16:21:05 807  	out_next_offer_index	     OUT NUMBER
16:21:05 808  ) AS
16:21:05 809  BEGIN
16:21:05 810  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
16:21:05 811  	  in_offer_chain_id,
16:21:05 812  	  in_offer_chain_current_index
16:21:05 813  	);
16:21:05 814  END P_GET_NEXT_OFFER_INDEX;
16:21:05 815  
16:21:05 816  /******************************************************************************/
16:21:05 817  
16:21:05 818  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
16:21:05 819  	in_license_id		     IN NUMBER,
16:21:05 820  	in_offer_chain_current_index IN NUMBER,
16:21:05 821  	out_next_offer_index	     OUT NUMBER
16:21:05 822  ) AS
16:21:05 823  -- VARIABLES
16:21:05 824  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
16:21:05 825  var_offer_chain_id NUMBER;
16:21:05 826  -- EXCEPTIONS
16:21:05 827  BAD_LICENSE_ID		   EXCEPTION;
16:21:05 828  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
16:21:05 829  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
16:21:05 830  BEGIN
16:21:05 831  
16:21:05 832  	BEGIN
16:21:05 833  	  SELECT
16:21:05 834  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
16:21:05 835  	  FROM
16:21:05 836  	    SUBSCRIPTION
16:21:05 837  	  WHERE
16:21:05 838  	    SUBSCRIPTION.ID = (
16:21:05 839  	      SELECT
16:21:05 840  		LICENSE.SUBSCRIPTION_ID
16:21:05 841  	      FROM
16:21:05 842  		LICENSE
16:21:05 843  	      WHERE
16:21:05 844  		LICENSE.ID = in_license_id
16:21:05 845  	    );
16:21:05 846  	  EXCEPTION
16:21:05 847  	    WHEN NO_DATA_FOUND THEN
16:21:05 848  	      RAISE BAD_LICENSE_ID;
16:21:05 849  	END;
16:21:05 850  
16:21:05 851  	BEGIN
16:21:05 852  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
16:21:05 853  	    var_offer_chain_id,
16:21:05 854  	    in_offer_chain_current_index
16:21:05 855  	  );
16:21:05 856  	  EXCEPTION
16:21:05 857  	    WHEN OTHERS THEN
16:21:05 858  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 859  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
16:21:05 860  	END;
16:21:05 861  
16:21:05 862  EXCEPTION
16:21:05 863  WHEN BAD_LICENSE_ID THEN
16:21:05 864  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 865  	  SPROC_NAME, 'No such license');
16:21:05 866  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
16:21:05 867  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 868  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
16:21:05 869  WHEN OTHERS THEN
16:21:05 870  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 871  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 872  END GET_NEXT_OFFER_INDEX_BY_LCNS;
16:21:05 873  
16:21:05 874  /******************************************************************************/
16:21:05 875  
16:21:05 876  FUNCTION IS_OFFER_INDEX_EXISTS (
16:21:05 877  /*
16:21:05 878  GLOBAL_CONSTANTS_V16.TRUE - exists
16:21:05 879  GLOBAL_CONSTANTS_V16.FALSE - not exists
16:21:05 880  */
16:21:05 881  	in_offer_chain_id	   IN NUMBER,
16:21:05 882  	in_offer_chain_offer_index IN NUMBER
16:21:05 883  ) RETURN NUMBER AS
16:21:05 884  -- VARIABLES
16:21:05 885  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
16:21:05 886  temp_count NUMBER;
16:21:05 887  BEGIN
16:21:05 888  
16:21:05 889  	SELECT
16:21:05 890  	  COUNT(*) into temp_count
16:21:05 891  	FROM
16:21:05 892  	  OFFER_OFFER_CHAIN
16:21:05 893  	WHERE
16:21:05 894  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 895  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
16:21:05 896  
16:21:05 897  	IF temp_count > 0 THEN
16:21:05 898  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:05 899  	ELSE
16:21:05 900  	  RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:05 901  	END IF;
16:21:05 902  
16:21:05 903  EXCEPTION
16:21:05 904  WHEN OTHERS THEN
16:21:05 905  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 906  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 907  END IS_OFFER_INDEX_EXISTS;
16:21:05 908  
16:21:05 909  /******************************************************************************/
16:21:05 910  
16:21:05 911  PROCEDURE GET_OFFER_LENGTH (
16:21:05 912  	in_offer_id IN NUMBER,
16:21:05 913  	out_years   OUT NUMBER,
16:21:05 914  	out_months  OUT NUMBER,
16:21:05 915  	out_days    OUT NUMBER
16:21:05 916  ) AS
16:21:05 917  -- VARIABLES
16:21:05 918  var_offer_duration VARCHAR2(30);
16:21:05 919  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
16:21:05 920  -- EXCEPTIONS
16:21:05 921  BAD_OFFER_ID	     EXCEPTION;
16:21:05 922  CAN_NOT_PARSE_DURATION EXCEPTION;
16:21:05 923  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:21:05 924  BEGIN
16:21:05 925  
16:21:05 926  	BEGIN
16:21:05 927  	  SELECT
16:21:05 928  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
16:21:05 929  	  FROM
16:21:05 930  	    OFFER
16:21:05 931  	  WHERE
16:21:05 932  	    OFFER.ID = in_offer_id;
16:21:05 933  	  EXCEPTION
16:21:05 934  	    WHEN NO_DATA_FOUND THEN
16:21:05 935  	      RAISE BAD_OFFER_ID;
16:21:05 936  	END;
16:21:05 937  
16:21:05 938  	BEGIN
16:21:05 939  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
16:21:05 940  	    var_offer_duration,
16:21:05 941  	    out_years,
16:21:05 942  	    out_months,
16:21:05 943  	    out_days
16:21:05 944  	  );
16:21:05 945  	  EXCEPTION
16:21:05 946  	    WHEN OTHERS THEN
16:21:05 947  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:05 948  	      RAISE CAN_NOT_PARSE_DURATION;
16:21:05 949  	END;
16:21:05 950  
16:21:05 951  EXCEPTION
16:21:05 952  WHEN BAD_OFFER_ID THEN
16:21:05 953  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 954  	  SPROC_NAME, 'No such offer');
16:21:05 955  WHEN CAN_NOT_PARSE_DURATION THEN
16:21:05 956  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 957  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
16:21:05 958  WHEN OTHERS THEN
16:21:05 959  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 960  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 961  END GET_OFFER_LENGTH;
16:21:05 962  
16:21:05 963  /******************************************************************************/
16:21:05 964  
16:21:05 965  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
16:21:05 966  	in_offer_id   IN NUMBER,
16:21:05 967  	in_start_date IN DATE DEFAULT SYSDATE,
16:21:05 968  	out_days      OUT NUMBER
16:21:05 969  ) AS
16:21:05 970  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
16:21:05 971  -- VARIABLES
16:21:05 972  var_offer_duration VARCHAR2(30);
16:21:05 973  var_offer_years	 NUMBER;
16:21:05 974  var_offer_months	 NUMBER;
16:21:05 975  var_offer_days	 NUMBER;
16:21:05 976  var_offer_end_date DATE;
16:21:05 977  -- EXCEPTIONS
16:21:05 978  BAD_OFFER_ID EXCEPTION;
16:21:05 979  BEGIN
16:21:05 980  
16:21:05 981  	BEGIN
16:21:05 982  	  SELECT
16:21:05 983  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
16:21:05 984  	  FROM
16:21:05 985  	    OFFER
16:21:05 986  	  WHERE
16:21:05 987  	    OFFER.ID = in_offer_id;
16:21:05 988  	  EXCEPTION
16:21:05 989  	    WHEN NO_DATA_FOUND THEN
16:21:05 990  	      RAISE BAD_OFFER_ID;
16:21:05 991  	END;
16:21:05 992  
16:21:05 993  	PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS (
16:21:05 994  	  var_offer_duration,
16:21:05 995  	  var_offer_years,
16:21:05 996  	  var_offer_months,
16:21:05 997  	  var_offer_days
16:21:05 998  	);
16:21:05 999  
16:21:05 1000  	 var_offer_end_date := ( ( in_start_date
16:21:05 1001  	   + GLOBAL_CONSTANTS_V16.ONE_DAY_INTERVAL * var_offer_days )
16:21:05 1002  	   + GLOBAL_CONSTANTS_V16.ONE_MONTH_INTERVAL * var_offer_months )
16:21:05 1003  	   + GLOBAL_CONSTANTS_V16.ONE_YEAR_INTERVAL * var_offer_years;
16:21:05 1004  
16:21:05 1005  	 out_days := var_offer_end_date - in_start_date;
16:21:05 1006  
16:21:05 1007  EXCEPTION
16:21:05 1008  WHEN BAD_OFFER_ID THEN
16:21:05 1009  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1010  	   SPROC_NAME, 'No such offer');
16:21:05 1011  WHEN OTHERS THEN
16:21:05 1012  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1013  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1014  END GET_OFFER_LENGTH_IN_DAYS;
16:21:05 1015  
16:21:05 1016  /******************************************************************************/
16:21:05 1017  
16:21:05 1018  PROCEDURE GET_OFFER_PRODUCTS (
16:21:05 1019  /*
16:21:05 1020  Throws exceptions (codes):
16:21:05 1021  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 1022  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1023  */
16:21:05 1024  	 in_offer_id	IN NUMBER,
16:21:05 1025  	 out_result_set OUT SYS_REFCURSOR
16:21:05 1026  ) AS
16:21:05 1027  -- VARIABLES
16:21:05 1028  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
16:21:05 1029  temp_offerr_id NUMBER;
16:21:05 1030  -- EXCEPTIONS
16:21:05 1031  BAD_OFFER_ID EXCEPTION;
16:21:05 1032  BEGIN
16:21:05 1033  
16:21:05 1034  	 BEGIN
16:21:05 1035  	   SELECT
16:21:05 1036  	     OFFER.ID into temp_offerr_id
16:21:05 1037  	   FROM
16:21:05 1038  	     OFFER
16:21:05 1039  	   WHERE
16:21:05 1040  	     OFFER.ID = in_offer_id;
16:21:05 1041  	   EXCEPTION
16:21:05 1042  	     WHEN NO_DATA_FOUND THEN
16:21:05 1043  	       RAISE BAD_OFFER_ID;
16:21:05 1044  	 END;
16:21:05 1045  
16:21:05 1046  	 OPEN out_result_set FOR
16:21:05 1047  	 SELECT DISTINCT
16:21:05 1048  	   PRODUCT.ID,
16:21:05 1049  	   PRODUCT.NAME
16:21:05 1050  	 FROM
16:21:05 1051  	   PRODUCT
16:21:05 1052  	 WHERE
16:21:05 1053  	   PRODUCT.ID IN (
16:21:05 1054  	       SELECT
16:21:05 1055  		 PRODUCT_OFFERING.PRODUCT_ID
16:21:05 1056  	       FROM
16:21:05 1057  		 OFFER_PRODUCT_OFFERING
16:21:05 1058  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:21:05 1059  	       WHERE
16:21:05 1060  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
16:21:05 1061  	     );
16:21:05 1062  
16:21:05 1063  EXCEPTION
16:21:05 1064  WHEN BAD_OFFER_ID THEN
16:21:05 1065  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1066  	   SPROC_NAME, 'No such offer');
16:21:05 1067  WHEN OTHERS THEN
16:21:05 1068  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1070  END GET_OFFER_PRODUCTS;
16:21:05 1071  
16:21:05 1072  /******************************************************************************/
16:21:05 1073  
16:21:05 1074  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
16:21:05 1075  /*
16:21:05 1076  Throws exceptions (codes):
16:21:05 1077  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 1078  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1079  */
16:21:05 1080  	 in_offer_chain_id IN NUMBER,
16:21:05 1081  	 out_result_set    OUT SYS_REFCURSOR
16:21:05 1082  ) AS
16:21:05 1083  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
16:21:05 1084  -- VARIABLES
16:21:05 1085  temp_offer_chain_id NUMBER;
16:21:05 1086  -- EXCEPTIONS
16:21:05 1087  BAD_OFFER_CHAIN_ID EXCEPTION;
16:21:05 1088  BEGIN
16:21:05 1089  
16:21:05 1090  	 BEGIN
16:21:05 1091  	   SELECT
16:21:05 1092  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 1093  	   FROM
16:21:05 1094  	     OFFER_CHAIN
16:21:05 1095  	   WHERE
16:21:05 1096  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:21:05 1097  	   EXCEPTION
16:21:05 1098  	     WHEN NO_DATA_FOUND THEN
16:21:05 1099  	       RAISE BAD_OFFER_CHAIN_ID;
16:21:05 1100  	 END;
16:21:05 1101  
16:21:05 1102  	 OPEN out_result_set FOR
16:21:05 1103  	 SELECT
16:21:05 1104  	   PRODUCT_OFFERING.ID,
16:21:05 1105  	   PRODUCT_OFFERING.PRODUCT_ID,
16:21:05 1106  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:21:05 1107  	   PRODUCT_OFFERING.UNIT_PRICE,
16:21:05 1108  	   PRODUCT_OFFERING.QUANTITY,
16:21:05 1109  	   PRODUCT_OFFERING.CREATE_DATE,
16:21:05 1110  	   PRODUCT_OFFERING.CREATED_BY,
16:21:05 1111  	   PRODUCT.NAME,
16:21:05 1112  	   PRODUCT.PRODUCT_URI,
16:21:05 1113  	   CAPABILITY.ID CAP_ID,
16:21:05 1114  	   CAPABILITY.CODE CAP_CODE,
16:21:05 1115  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:21:05 1116  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:21:05 1117  	 FROM
16:21:05 1118  	   PRODUCT_OFFERING
16:21:05 1119  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
16:21:05 1120  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:21:05 1121  	 WHERE
16:21:05 1122  	   PRODUCT_OFFERING.ID IN (
16:21:05 1123  	     SELECT DISTINCT
16:21:05 1124  	       PRODUCT_OFFERING_ID
16:21:05 1125  	     FROM
16:21:05 1126  	       OFFER_PRODUCT_OFFERING
16:21:05 1127  	     WHERE
16:21:05 1128  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:21:05 1129  		 SELECT DISTINCT
16:21:05 1130  		   OFFER_ID
16:21:05 1131  		 FROM
16:21:05 1132  		   OFFER_OFFER_CHAIN
16:21:05 1133  		 WHERE
16:21:05 1134  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 1135  	       )
16:21:05 1136  	   );
16:21:05 1137  
16:21:05 1138  EXCEPTION
16:21:05 1139  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:05 1140  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1141  	   SPROC_NAME, 'Bad offer chain id');
16:21:05 1142  WHEN OTHERS THEN
16:21:05 1143  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1144  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1145  END GET_OFFER_CHAIN_PROD_OFFERINGS;
16:21:05 1146  
16:21:05 1147  /******************************************************************************/
16:21:05 1148  
16:21:05 1149  FUNCTION CHECK_FOR_SAME_PRODUCTS (
16:21:05 1150  /*
16:21:05 1151  Throws exceptions (codes):
16:21:05 1152  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 1153  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1154  Returns:
16:21:05 1155  GLOBAL_CONSTANTS_V16.TRUE if there are at least one same product
16:21:05 1156  GLOBAL_CONSTANTS_V16.FALSE else
16:21:05 1157  */
16:21:05 1158  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
16:21:05 1159  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
16:21:05 1160  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:05 1161  ) RETURN NUMBER AS
16:21:05 1162  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
16:21:05 1163  -- CONSTANTS
16:21:05 1164  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
16:21:05 1165  -- VARIABLES
16:21:05 1166  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
16:21:05 1167  var_same_products	SYS_REFCURSOR;
16:21:05 1168  var_same_product_id	NUMBER;
16:21:05 1169  same_product_count	NUMBER;
16:21:05 1170  var_product_eligibility_limit NUMBER;
16:21:05 1171  s_product_eligibility_limit   VARCHAR2(100);
16:21:05 1172  -- EXCEPTIONS
16:21:05 1173  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
16:21:05 1174  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
16:21:05 1175  BEGIN
16:21:05 1176  
16:21:05 1177  	 -- Check that first offer chain exists
16:21:05 1178  	 BEGIN
16:21:05 1179  	   SELECT
16:21:05 1180  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 1181  	   FROM
16:21:05 1182  	     OFFER_CHAIN
16:21:05 1183  	   WHERE
16:21:05 1184  	     OFFER_CHAIN.ID = in_offer_chain_1;
16:21:05 1185  	   EXCEPTION
16:21:05 1186  	     WHEN NO_DATA_FOUND THEN
16:21:05 1187  	       RAISE BAD_FIRST_OFFER_CHAIN;
16:21:05 1188  	 END;
16:21:05 1189  
16:21:05 1190  	 -- Check that second offer chain exists
16:21:05 1191  	 BEGIN
16:21:05 1192  	   SELECT
16:21:05 1193  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 1194  	   FROM
16:21:05 1195  	     OFFER_CHAIN
16:21:05 1196  	   WHERE
16:21:05 1197  	     OFFER_CHAIN.ID = in_offer_chain_2;
16:21:05 1198  	   EXCEPTION
16:21:05 1199  	     WHEN NO_DATA_FOUND THEN
16:21:05 1200  	       RAISE BAD_SECOND_OFFER_CHAIN;
16:21:05 1201  	 END;
16:21:05 1202  
16:21:05 1203  	 PROCS_OFFER_CHAIN_V16.GET_OFF_CHAINS_SAME_PRODUCTS(
16:21:05 1204  	   in_offer_chain_1 => in_offer_chain_1,
16:21:05 1205  	   in_offer_chain_2 => in_offer_chain_2,
16:21:05 1206  	   out_result_set   => var_same_products
16:21:05 1207  	 );
16:21:05 1208  
16:21:05 1209  	 LOOP
16:21:05 1210  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
16:21:05 1211  	   EXIT WHEN var_same_products%NOTFOUND;
16:21:05 1212  
16:21:05 1213  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:05 1214  	     -- Return false because this offer chains having same products
16:21:05 1215  	     RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:05 1216  	   ELSE
16:21:05 1217  
16:21:05 1218  	     -- Get eligibility rule for given product
16:21:05 1219  	     BEGIN
16:21:05 1220  	       SELECT
16:21:05 1221  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
16:21:05 1222  	       FROM
16:21:05 1223  		 PRODUCT_ELIGIBILITY
16:21:05 1224  	       WHERE
16:21:05 1225  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
16:21:05 1226  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
16:21:05 1227  
16:21:05 1228  	       -- REVU: What should to be here? 1?
16:21:05 1229  	       EXCEPTION
16:21:05 1230  		 WHEN NO_DATA_FOUND THEN
16:21:05 1231  		   s_product_eligibility_limit := '1';
16:21:05 1232  	     END;
16:21:05 1233  
16:21:05 1234  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V16.MAX_CONSURRENT_PRD_UNLIM THEN
16:21:05 1235  	       RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:05 1236  	     END IF;
16:21:05 1237  
16:21:05 1238  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
16:21:05 1239  
16:21:05 1240  	     -- Check for limit
16:21:05 1241  	     IF var_product_eligibility_limit < same_product_count THEN
16:21:05 1242  	       RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:05 1243  	     END IF;
16:21:05 1244  
16:21:05 1245  	   END IF;
16:21:05 1246  	 END LOOP;
16:21:05 1247  
16:21:05 1248  	 RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:05 1249  
16:21:05 1250  EXCEPTION
16:21:05 1251  WHEN BAD_FIRST_OFFER_CHAIN THEN
16:21:05 1252  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1253  	   SPROC_NAME, 'First offer chain not found');
16:21:05 1254  WHEN BAD_SECOND_OFFER_CHAIN THEN
16:21:05 1255  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1256  	   SPROC_NAME, 'Second offer chain not found');
16:21:05 1257  WHEN OTHERS THEN
16:21:05 1258  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1259  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1260  END CHECK_FOR_SAME_PRODUCTS;
16:21:05 1261  
16:21:05 1262  /******************************************************************************/
16:21:05 1263  
16:21:05 1264  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
16:21:05 1265  /*
16:21:05 1266  Throws exceptions (codes):
16:21:05 1267  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1268  Returns:
16:21:05 1269  GLOBAL_CONSTANTS_V16.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
16:21:05 1270  GLOBAL_CONSTANTS_V16.FALSE else
16:21:05 1271  */
16:21:05 1272  	 in_offer_chain_id IN NUMBER
16:21:05 1273  ) RETURN NUMBER AS
16:21:05 1274  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
16:21:05 1275  -- VARIABLES
16:21:05 1276  var_is_cancelable_str VARCHAR2(1);
16:21:05 1277  var_is_cancelable     NUMBER;
16:21:05 1278  BEGIN
16:21:05 1279  
16:21:05 1280  	 BEGIN
16:21:05 1281  	   SELECT
16:21:05 1282  	     VALUE INTO var_is_cancelable_str
16:21:05 1283  	   FROM (
16:21:05 1284  	     SELECT
16:21:05 1285  	       VALUE, NAME
16:21:05 1286  	     FROM
16:21:05 1287  	       OFFER_CHAIN_META_DATA
16:21:05 1288  	     WHERE
16:21:05 1289  	       OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 1290  	     )
16:21:05 1291  	   WHERE
16:21:05 1292  	     UPPER(NAME) = 'CANCELABLE';
16:21:05 1293  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
16:21:05 1294  	   EXCEPTION
16:21:05 1295  	     WHEN NO_DATA_FOUND THEN
16:21:05 1296  	       var_is_cancelable := GLOBAL_CONSTANTS_V16.FALSE;
16:21:05 1297  	 END;
16:21:05 1298  
16:21:05 1299  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:05 1300  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:05 1301  	 END IF;
16:21:05 1302  
16:21:05 1303  	 RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:05 1304  
16:21:05 1305  EXCEPTION
16:21:05 1306  WHEN OTHERS THEN
16:21:05 1307  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1308  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1309  END IS_OFFER_CHAIN_CANCELABLE;
16:21:05 1310  
16:21:05 1311  /******************************************************************************/
16:21:05 1312  
16:21:05 1313  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
16:21:05 1314  /*
16:21:05 1315  Throws exceptions (codes):
16:21:05 1316  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1317  */
16:21:05 1318  	 in_offer_chain_id IN NUMBER
16:21:05 1319  ) RETURN NUMBER AS
16:21:05 1320  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
16:21:05 1321  -- VARIABLES
16:21:05 1322  var_max_concurrent_subs_str VARCHAR2(100);
16:21:05 1323  var_max_concurrent_subs	   NUMBER;
16:21:05 1324  BEGIN
16:21:05 1325  
16:21:05 1326  	 BEGIN
16:21:05 1327  	   SELECT
16:21:05 1328  	     VALUE into var_max_concurrent_subs_str
16:21:05 1329  	   FROM
16:21:05 1330  	     (
16:21:05 1331  	       SELECT
16:21:05 1332  		 NAME,
16:21:05 1333  		 VALUE
16:21:05 1334  	       FROM
16:21:05 1335  		 OFFER_CHAIN_ELIGIBILITY
16:21:05 1336  	       WHERE
16:21:05 1337  		 OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 1338  	     )
16:21:05 1339  	   WHERE
16:21:05 1340  	     NAME LIKE GLOBAL_CONSTANTS_V16.MAX_CONCURRENT_SUBS;
16:21:05 1341  
16:21:05 1342  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V16.MAX_CONCURRENT_SUBS_UNLIM THEN
16:21:05 1343  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V16.INFINITY;
16:21:05 1344  	   ELSE
16:21:05 1345  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
16:21:05 1346  	   END IF;
16:21:05 1347  
16:21:05 1348  	   EXCEPTION
16:21:05 1349  	     WHEN NO_DATA_FOUND THEN
16:21:05 1350  	       var_max_concurrent_subs := 1;
16:21:05 1351  	 END;
16:21:05 1352  
16:21:05 1353  	 RETURN var_max_concurrent_subs;
16:21:05 1354  
16:21:05 1355  EXCEPTION
16:21:05 1356  WHEN OTHERS THEN
16:21:05 1357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1358  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1359  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
16:21:05 1360  
16:21:05 1361  /******************************************************************************/
16:21:05 1362  
16:21:05 1363  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
16:21:05 1364  /*
16:21:05 1365  Throws exceptions (codes):
16:21:05 1366  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 1367  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1368  */
16:21:05 1369  	 in_offer_chain_id   IN NUMBER,
16:21:05 1370  	 in_eligibility_name IN VARCHAR2,
16:21:05 1371  	 out_result_set      OUT SYS_REFCURSOR
16:21:05 1372  ) AS
16:21:05 1373  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
16:21:05 1374  -- VARIABLES
16:21:05 1375  temp_offer_chain_id NUMBER;
16:21:05 1376  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
16:21:05 1377  -- EXCEPTIONS
16:21:05 1378  BAD_OFFER_CHAIN_ID EXCEPTION;
16:21:05 1379  BEGIN
16:21:05 1380  
16:21:05 1381  	 BEGIN
16:21:05 1382  	   SELECT
16:21:05 1383  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 1384  	   FROM
16:21:05 1385  	     OFFER_CHAIN
16:21:05 1386  	   WHERE
16:21:05 1387  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:21:05 1388  	   EXCEPTION
16:21:05 1389  	     WHEN NO_DATA_FOUND THEN
16:21:05 1390  	       RAISE BAD_OFFER_CHAIN_ID;
16:21:05 1391  	 END;
16:21:05 1392  
16:21:05 1393  	 var_eligibility_name := UPPER(in_eligibility_name);
16:21:05 1394  
16:21:05 1395  	 OPEN out_result_set FOR
16:21:05 1396  	 SELECT
16:21:05 1397  	   OFFER_CHAIN_ELIGIBILITY.ID,
16:21:05 1398  	   OFFER_CHAIN_ELIGIBILITY.NAME,
16:21:05 1399  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
16:21:05 1400  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
16:21:05 1401  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
16:21:05 1402  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
16:21:05 1403  	 FROM
16:21:05 1404  	   OFFER_CHAIN_ELIGIBILITY
16:21:05 1405  	 WHERE
16:21:05 1406  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 1407  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
16:21:05 1408  
16:21:05 1409  EXCEPTION
16:21:05 1410  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:05 1411  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1412  	   SPROC_NAME, 'No such offer chain');
16:21:05 1413  WHEN OTHERS THEN
16:21:05 1414  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1415  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1416  END GET_OFFER_CHAIN_ELIGIBILITY;
16:21:05 1417  
16:21:05 1418  /******************************************************************************/
16:21:05 1419  
16:21:05 1420  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
16:21:05 1421  /*
16:21:05 1422  Throws exceptions (codes):
16:21:05 1423  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1424  */
16:21:05 1425  	 in_offer_chain_ids  IN VARCHAR2,
16:21:05 1426  	 in_eligibility_name IN VARCHAR2,
16:21:05 1427  	 out_result_set      OUT SYS_REFCURSOR
16:21:05 1428  ) AS
16:21:05 1429  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
16:21:05 1430  -- VARIABLES
16:21:05 1431  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
16:21:05 1432  BEGIN
16:21:05 1433  
16:21:05 1434  	 var_eligibility_name := UPPER(in_eligibility_name);
16:21:05 1435  
16:21:05 1436  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
16:21:05 1437  
16:21:05 1438  	 open out_result_set for
16:21:05 1439  	 'SELECT
16:21:05 1440  	   ID,
16:21:05 1441  	   NAME,
16:21:05 1442  	   VALUE,
16:21:05 1443  	   OFFER_CHAIN_ID,
16:21:05 1444  	   CREATE_DATE,
16:21:05 1445  	   CREATED_BY
16:21:05 1446  	 FROM
16:21:05 1447  	   OFFER_CHAIN_ELIGIBILITY
16:21:05 1448  	 WHERE
16:21:05 1449  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
16:21:05 1450  	   AND UPPER(NAME) = :1'
16:21:05 1451  	 using var_eligibility_name;
16:21:05 1452  
16:21:05 1453  EXCEPTION
16:21:05 1454  WHEN OTHERS THEN
16:21:05 1455  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1456  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1457  END GET_OFFER_CHAINS_ELIGIBILITY;
16:21:05 1458  
16:21:05 1459  /******************************************************************************/
16:21:05 1460  
16:21:05 1461  PROCEDURE GET_OFFER_CHAINS_META_DATA (
16:21:05 1462  	 in_offer_chain_ids IN VARCHAR2,
16:21:05 1463  	 in_meta_data_name  IN VARCHAR2,
16:21:05 1464  	 out_result_set     OUT SYS_REFCURSOR
16:21:05 1465  ) AS
16:21:05 1466  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
16:21:05 1467  -- VARIABLES
16:21:05 1468  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
16:21:05 1469  BEGIN
16:21:05 1470  
16:21:05 1471  	 var_meta_data_name := UPPER(in_meta_data_name);
16:21:05 1472  
16:21:05 1473  	 open out_result_set for
16:21:05 1474  	 'select
16:21:05 1475  	   ID,
16:21:05 1476  	   NAME,
16:21:05 1477  	   VALUE,
16:21:05 1478  	   OFFER_CHAIN_ID,
16:21:05 1479  	   CREATED_BY,
16:21:05 1480  	   CREATE_DATE
16:21:05 1481  	 from
16:21:05 1482  	   OFFER_CHAIN_META_DATA
16:21:05 1483  	 where
16:21:05 1484  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
16:21:05 1485  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
16:21:05 1486  	 using var_meta_data_name;
16:21:05 1487  
16:21:05 1488  EXCEPTION
16:21:05 1489  WHEN OTHERS THEN
16:21:05 1490  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1491  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1492  END GET_OFFER_CHAINS_META_DATA;
16:21:05 1493  
16:21:05 1494  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:21:05 1495  /*
16:21:05 1496  Throws exceptions (codes):
16:21:05 1497  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 1498  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1499  */
16:21:05 1500  	 in_offer_chain_id IN NUMBER,
16:21:05 1501  	 in_meta_data_name IN VARCHAR2,
16:21:05 1502  	 out_result_set    OUT SYS_REFCURSOR
16:21:05 1503  ) AS
16:21:05 1504  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
16:21:05 1505  -- VARIABLES
16:21:05 1506  temp_offer_chain_id NUMBER;
16:21:05 1507  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
16:21:05 1508  -- EXCEPTIONS
16:21:05 1509  BAD_OFFER_CHAIN_ID EXCEPTION;
16:21:05 1510  BEGIN
16:21:05 1511  
16:21:05 1512  	 BEGIN
16:21:05 1513  	   SELECT
16:21:05 1514  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:21:05 1515  	   FROM
16:21:05 1516  	     OFFER_CHAIN
16:21:05 1517  	   WHERE
16:21:05 1518  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:21:05 1519  	   EXCEPTION
16:21:05 1520  	     WHEN NO_DATA_FOUND THEN
16:21:05 1521  	       RAISE BAD_OFFER_CHAIN_ID;
16:21:05 1522  	 END;
16:21:05 1523  
16:21:05 1524  	 var_meta_data_name := UPPER(in_meta_data_name);
16:21:05 1525  
16:21:05 1526  	 OPEN out_result_set FOR
16:21:05 1527  	 SELECT
16:21:05 1528  	   OFFER_CHAIN_META_DATA.ID,
16:21:05 1529  	   OFFER_CHAIN_META_DATA.NAME,
16:21:05 1530  	   OFFER_CHAIN_META_DATA.VALUE,
16:21:05 1531  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
16:21:05 1532  	   OFFER_CHAIN_META_DATA.CREATED_BY,
16:21:05 1533  	   OFFER_CHAIN_META_DATA.CREATE_DATE
16:21:05 1534  	 FROM
16:21:05 1535  	   OFFER_CHAIN_META_DATA
16:21:05 1536  	 WHERE
16:21:05 1537  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 1538  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
16:21:05 1539  
16:21:05 1540  EXCEPTION
16:21:05 1541  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:05 1542  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1543  	   SPROC_NAME, 'No such offer chain');
16:21:05 1544  WHEN OTHERS THEN
16:21:05 1545  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1546  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1547  END GET_OFFER_CHAIN_META_DATA;
16:21:05 1548  
16:21:05 1549  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
16:21:05 1550  /*
16:21:05 1551  Throws exceptions (codes):
16:21:05 1552  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 1553  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1554  */
16:21:05 1555  	 in_offer_id	IN NUMBER,
16:21:05 1556  	 out_result_set OUT SYS_REFCURSOR
16:21:05 1557  ) AS
16:21:05 1558  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
16:21:05 1559  -- VARIABLES
16:21:05 1560  temp_offer_id NUMBER;
16:21:05 1561  -- EXCEPTIONS
16:21:05 1562  BAD_OFFER_ID EXCEPTION;
16:21:05 1563  BEGIN
16:21:05 1564  
16:21:05 1565  	 BEGIN
16:21:05 1566  	   SELECT
16:21:05 1567  	     OFFER.ID into temp_offer_id
16:21:05 1568  	   FROM
16:21:05 1569  	     OFFER
16:21:05 1570  	   WHERE
16:21:05 1571  	     OFFER.ID = in_offer_id;
16:21:05 1572  	   EXCEPTION
16:21:05 1573  	     WHEN NO_DATA_FOUND THEN
16:21:05 1574  	       RAISE BAD_OFFER_ID;
16:21:05 1575  	 END;
16:21:05 1576  
16:21:05 1577  	 OPEN out_result_set FOR
16:21:05 1578  	 SELECT DISTINCT
16:21:05 1579  	   PRODUCT_OFFERING.ID,
16:21:05 1580  	   PRODUCT_OFFERING.PRODUCT_ID,
16:21:05 1581  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:21:05 1582  	   PRODUCT_OFFERING.UNIT_PRICE,
16:21:05 1583  	   PRODUCT_OFFERING.QUANTITY,
16:21:05 1584  	   PRODUCT_OFFERING.CREATE_DATE,
16:21:05 1585  	   PRODUCT_OFFERING.CREATED_BY,
16:21:05 1586  	   CAPABILITY.ID CAP_ID,
16:21:05 1587  	   CAPABILITY.CODE CAP_CODE,
16:21:05 1588  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:21:05 1589  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:21:05 1590  	 FROM
16:21:05 1591  	   OFFER_PRODUCT_OFFERING
16:21:05 1592  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:21:05 1593  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:21:05 1594  	 WHERE
16:21:05 1595  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
16:21:05 1596  
16:21:05 1597  EXCEPTION
16:21:05 1598  WHEN BAD_OFFER_ID THEN
16:21:05 1599  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1600  	   SPROC_NAME, 'No such offer');
16:21:05 1601  WHEN OTHERS THEN
16:21:05 1602  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1603  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1604  END GET_PROD_OFFERINGS_BY_OFFER_ID;
16:21:05 1605  
16:21:05 1606  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:21:05 1607  /*
16:21:05 1608  Throws exceptions (codes):
16:21:05 1609  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:05 1610  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1611  */
16:21:05 1612  	 in_product_offering_id IN NUMBER,
16:21:05 1613  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
16:21:05 1614  	 out_result_set 	OUT SYS_REFCURSOR
16:21:05 1615  ) AS
16:21:05 1616  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
16:21:05 1617  -- VARIABLES
16:21:05 1618  temp_product_offering_id NUMBER;
16:21:05 1619  -- EXCEPTIONS
16:21:05 1620  BAD_PRODUCT_OFFERING_ID EXCEPTION;
16:21:05 1621  BEGIN
16:21:05 1622  
16:21:05 1623  	 BEGIN
16:21:05 1624  	   SELECT
16:21:05 1625  	     PRODUCT_OFFERING.ID into temp_product_offering_id
16:21:05 1626  	   FROM
16:21:05 1627  	     PRODUCT_OFFERING
16:21:05 1628  	   WHERE
16:21:05 1629  	     PRODUCT_OFFERING.ID = in_product_offering_id;
16:21:05 1630  	   EXCEPTION
16:21:05 1631  	     WHEN NO_DATA_FOUND THEN
16:21:05 1632  	       RAISE BAD_PRODUCT_OFFERING_ID;
16:21:05 1633  	 END;
16:21:05 1634  
16:21:05 1635  	 OPEN out_result_set FOR
16:21:05 1636  	 SELECT
16:21:05 1637  	   PRODUCT_OFFERING_META_DATA.ID,
16:21:05 1638  	   PRODUCT_OFFERING_META_DATA.NAME,
16:21:05 1639  	   PRODUCT_OFFERING_META_DATA.VALUE,
16:21:05 1640  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
16:21:05 1641  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
16:21:05 1642  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
16:21:05 1643  	 FROM
16:21:05 1644  	   PRODUCT_OFFERING_META_DATA
16:21:05 1645  	 WHERE
16:21:05 1646  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
16:21:05 1647  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
16:21:05 1648  
16:21:05 1649  EXCEPTION
16:21:05 1650  WHEN BAD_PRODUCT_OFFERING_ID THEN
16:21:05 1651  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1652  	   SPROC_NAME, 'No such product offering');
16:21:05 1653  END GET_PRODUCT_OFFERING_META_DATA;
16:21:05 1654  
16:21:05 1655  /******************************************************************************/
16:21:05 1656  
16:21:05 1657  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
16:21:05 1658  /*
16:21:05 1659  Throws exceptions (codes):
16:21:05 1660  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:05 1661  */
16:21:05 1662  	 in_offer_chain_1 IN NUMBER,
16:21:05 1663  	 in_offer_chain_2 IN NUMBER,
16:21:05 1664  	 out_result_set   OUT SYS_REFCURSOR
16:21:05 1665  ) AS
16:21:05 1666  BEGIN
16:21:05 1667  
16:21:05 1668  	 OPEN out_result_set FOR
16:21:05 1669  	 SELECT
16:21:05 1670  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
16:21:05 1671  	   COUNT_1 + COUNT_2	    AS "COUNT"
16:21:05 1672  	 FROM
16:21:05 1673  	   (
16:21:05 1674  	     SELECT
16:21:05 1675  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
16:21:05 1676  	       COUNT(*) 		   as "COUNT_1"
16:21:05 1677  	     FROM
16:21:05 1678  	       (
16:21:05 1679  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
16:21:05 1680  	       )
16:21:05 1681  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
16:21:05 1682  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:21:05 1683  	     GROUP BY
16:21:05 1684  	       PRODUCT_OFFERING.PRODUCT_ID
16:21:05 1685  	   )
16:21:05 1686  	   INNER JOIN
16:21:05 1687  	   (
16:21:05 1688  	     SELECT
16:21:05 1689  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
16:21:05 1690  	       COUNT(*) 		   as "COUNT_2"
16:21:05 1691  	     FROM
16:21:05 1692  	       (
16:21:05 1693  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
16:21:05 1694  	       )
16:21:05 1695  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
16:21:05 1696  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:21:05 1697  	     GROUP BY
16:21:05 1698  	       PRODUCT_OFFERING.PRODUCT_ID
16:21:05 1699  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
16:21:05 1700  
16:21:05 1701  END GET_OFF_CHAINS_SAME_PRODUCTS;
16:21:05 1702  
16:21:05 1703  /******************************************************************************/
16:21:05 1704  
16:21:05 1705  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
16:21:05 1706  	 in_offer_chain_id IN NUMBER,
16:21:05 1707  	 in_meta_data_name IN VARCHAR2,
16:21:05 1708  	 out_value	   OUT VARCHAR2
16:21:05 1709  ) AS
16:21:05 1710  BEGIN
16:21:05 1711  	 BEGIN
16:21:05 1712  	   SELECT
16:21:05 1713  	     OFFER_CHAIN_META_DATA.VALUE into out_value
16:21:05 1714  	   FROM
16:21:05 1715  	     OFFER_CHAIN_META_DATA
16:21:05 1716  	   WHERE
16:21:05 1717  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 1718  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
16:21:05 1719  
16:21:05 1720  	   EXCEPTION
16:21:05 1721  	     WHEN NO_DATA_FOUND THEN
16:21:05 1722  	       out_value := NULL;
16:21:05 1723  	 END;
16:21:05 1724  END GET_OFFER_CHAIN_MD_VALUE;
16:21:05 1725  
16:21:05 1726  /******************************************************************************/
16:21:05 1727  
16:21:05 1728  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
16:21:05 1729  	 in_offer_chain_id   IN NUMBER,
16:21:05 1730  	 in_eligibility_name IN VARCHAR2,
16:21:05 1731  	 out_value	     OUT VARCHAR2
16:21:05 1732  ) AS
16:21:05 1733  BEGIN
16:21:05 1734  	 BEGIN
16:21:05 1735  	   SELECT
16:21:05 1736  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
16:21:05 1737  	   FROM
16:21:05 1738  	     OFFER_CHAIN_ELIGIBILITY
16:21:05 1739  	   WHERE
16:21:05 1740  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 1741  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
16:21:05 1742  
16:21:05 1743  	   EXCEPTION
16:21:05 1744  	     WHEN NO_DATA_FOUND THEN
16:21:05 1745  	       out_value := NULL;
16:21:05 1746  	 END;
16:21:05 1747  END GET_OFFER_CHAIN_EL_VALUE;
16:21:05 1748  
16:21:05 1749  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
16:21:05 1750  	 in_offer_id	IN NUMBER,
16:21:05 1751  	 out_result_set OUT SYS_REFCURSOR
16:21:05 1752  ) AS
16:21:05 1753  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
16:21:05 1754  -- VARIABLES
16:21:05 1755  temp_offer_id NUMBER;
16:21:05 1756  -- EXCEPTIONS
16:21:05 1757  BAD_OFFER_ID EXCEPTION;
16:21:05 1758  BEGIN
16:21:05 1759  
16:21:05 1760  	 BEGIN
16:21:05 1761  	   SELECT
16:21:05 1762  	     OFFER.ID into temp_offer_id
16:21:05 1763  	   FROM
16:21:05 1764  	     OFFER
16:21:05 1765  	   WHERE
16:21:05 1766  	     OFFER.ID = in_offer_id;
16:21:05 1767  	   EXCEPTION
16:21:05 1768  	     WHEN NO_DATA_FOUND THEN
16:21:05 1769  	       RAISE BAD_OFFER_ID;
16:21:05 1770  	 END;
16:21:05 1771  
16:21:05 1772  	 OPEN out_result_set FOR
16:21:05 1773  	 SELECT
16:21:05 1774  	   PRODUCT_OFFERING.ID,
16:21:05 1775  	   PRODUCT_OFFERING.PRODUCT_ID,
16:21:05 1776  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:21:05 1777  	   PRODUCT_OFFERING.UNIT_PRICE,
16:21:05 1778  	   PRODUCT_OFFERING.QUANTITY,
16:21:05 1779  	   PRODUCT_OFFERING.CREATE_DATE,
16:21:05 1780  	   PRODUCT_OFFERING.CREATED_BY,
16:21:05 1781  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
16:21:05 1782  	 FROM
16:21:05 1783  	   PRODUCT_OFFERING
16:21:05 1784  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:21:05 1785  	 WHERE
16:21:05 1786  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
16:21:05 1787  
16:21:05 1788  EXCEPTION
16:21:05 1789  WHEN BAD_OFFER_ID THEN
16:21:05 1790  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1791  	   SPROC_NAME, 'No such offer');
16:21:05 1792  WHEN OTHERS THEN
16:21:05 1793  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1794  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1795  END GET_OFFER_PRODUCT_OFFERINGS;
16:21:05 1796  
16:21:05 1797  /******************************************************************************/
16:21:05 1798  
16:21:05 1799  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
16:21:05 1800  	 in_meta_data_name  IN VARCHAR2,
16:21:05 1801  	 in_meta_data_value IN VARCHAR2,
16:21:05 1802  	 out_result_set     OUT SYS_REFCURSOR
16:21:05 1803  ) AS
16:21:05 1804  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
16:21:05 1805  -- VARIABLES
16:21:05 1806  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
16:21:05 1807  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
16:21:05 1808  BEGIN
16:21:05 1809  
16:21:05 1810  	 OPEN out_result_set FOR
16:21:05 1811  	 SELECT
16:21:05 1812  	   och.ID,
16:21:05 1813  	   och.NAME,
16:21:05 1814  	   och.DESCRIPTION,
16:21:05 1815  	   och.OFFER_CHAIN_STATUS_ID,
16:21:05 1816  	   PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
16:21:05 1817  	   och.ADOPTABILITY_WINDOW_START_DATE,
16:21:05 1818  	   och.ADOPTABILITY_WINDOW_END_DATE,
16:21:05 1819  	   PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
16:21:05 1820  	   och.IS_GIFT_CERTIFICATE,
16:21:05 1821  	   'false' as comf_offer_chain, -- TODO
16:21:05 1822  	   po.PRODUCT_ID,
16:21:05 1823  	   och.GROUP_ACCOUNT_TYPE_ID
16:21:05 1824  	 FROM
16:21:05 1825  	   OFFER_CHAIN och,
16:21:05 1826  	   OFFER_OFFER_CHAIN ooch,
16:21:05 1827  	   OFFER_PRODUCT_OFFERING opo,
16:21:05 1828  	   PRODUCT_OFFERING po
16:21:05 1829  	 WHERE
16:21:05 1830  	   och.ID = ooch.OFFER_CHAIN_ID
16:21:05 1831  	   and ooch.OFFER_ID = opo.OFFER_ID
16:21:05 1832  	   and opo.PRODUCT_OFFERING_ID = po.ID
16:21:05 1833  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE
16:21:05 1834  	   and och.id in (
16:21:05 1835  	     SELECT DISTINCT
16:21:05 1836  	       och2.id
16:21:05 1837  	     from
16:21:05 1838  	       offer_chain och2
16:21:05 1839  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
16:21:05 1840  	     where
16:21:05 1841  	       UPPER(ochmd.name) = v_meta_data_name
16:21:05 1842  	       AND UPPER(ochmd.value) = v_meta_data_value
16:21:05 1843  	   );
16:21:05 1844  
16:21:05 1845  EXCEPTION
16:21:05 1846  WHEN OTHERS THEN
16:21:05 1847  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1848  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1849  END GET_OFFER_CHAINS_BY_META_DATA;
16:21:05 1850  
16:21:05 1851  /******************************************************************************/
16:21:05 1852  
16:21:05 1853  PROCEDURE GET_ALL_META_DATA (
16:21:05 1854  	 in_offer_chain_id IN NUMBER,
16:21:05 1855  	 out_result_set    OUT SYS_REFCURSOR
16:21:05 1856  ) AS
16:21:05 1857  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
16:21:05 1858  -- Variables
16:21:05 1859  temp_offer_chain_id NUMBER;
16:21:05 1860  -- Exceptions
16:21:05 1861  BAD_OFFER_CHAIN_ID EXCEPTION;
16:21:05 1862  BEGIN
16:21:05 1863  
16:21:05 1864  	 BEGIN
16:21:05 1865  	   SELECT
16:21:05 1866  	     OCH.ID into temp_offer_chain_id
16:21:05 1867  	   FROM
16:21:05 1868  	     OFFER_CHAIN OCH
16:21:05 1869  	   WHERE
16:21:05 1870  	     OCH.ID = in_offer_chain_id;
16:21:05 1871  	   EXCEPTION
16:21:05 1872  	     WHEN NO_DATA_FOUND THEN
16:21:05 1873  	       RAISE BAD_OFFER_CHAIN_ID;
16:21:05 1874  	 END;
16:21:05 1875  
16:21:05 1876  	 OPEN out_result_set FOR
16:21:05 1877  	 SELECT
16:21:05 1878  	   OCHMD.ID,
16:21:05 1879  	   OCHMD.OFFER_CHAIN_ID,
16:21:05 1880  	   OCHMD.NAME,
16:21:05 1881  	   OCHMD.VALUE,
16:21:05 1882  	   OCHMD.CREATE_DATE,
16:21:05 1883  	   OCHMD.CREATED_BY
16:21:05 1884  	 FROM
16:21:05 1885  	   OFFER_CHAIN_META_DATA OCHMD
16:21:05 1886  	 WHERE
16:21:05 1887  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
16:21:05 1888  
16:21:05 1889  EXCEPTION
16:21:05 1890  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:05 1891  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1892  	   SPROC_NAME, 'No such offer chain', SQLERRM);
16:21:05 1893  WHEN OTHERS THEN
16:21:05 1894  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1895  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1896  END GET_ALL_META_DATA;
16:21:05 1897  
16:21:05 1898  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
16:21:05 1899  	 in_group_id	   IN NUMBER,
16:21:05 1900  	 in_offer_chain_id IN NUMBER,
16:21:05 1901  	 out_is_eligible   OUT NUMBER,
16:21:05 1902  	 out_concurrent_subscription_id OUT NUMBER
16:21:05 1903  ) AS
16:21:05 1904  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
16:21:05 1905  -- Variables
16:21:05 1906  var_account_id  NUMBER;
16:21:05 1907  var_is_eligible NUMBER;
16:21:05 1908  var_is_gc       NUMBER;
16:21:05 1909  -- Exceptions
16:21:05 1910  BAD_GROUP_ID		   EXCEPTION;
16:21:05 1911  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
16:21:05 1912  BAD_OC_ID		   EXCEPTION;
16:21:05 1913  EXCEPTION_MESSAGE	   VARCHAR(1024);
16:21:05 1914  BEGIN
16:21:05 1915  
16:21:05 1916  	 var_is_eligible := GLOBAL_CONSTANTS_V16.TRUE;
16:21:05 1917  
16:21:05 1918  	 out_concurrent_subscription_id := NULL;
16:21:05 1919  
16:21:05 1920  	 BEGIN
16:21:05 1921  	   SELECT
16:21:05 1922  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
16:21:05 1923  	   FROM
16:21:05 1924  	     OFFER_CHAIN OC
16:21:05 1925  	   WHERE
16:21:05 1926  	     OC.ID = in_offer_chain_id;
16:21:05 1927  	   EXCEPTION
16:21:05 1928  	     WHEN NO_DATA_FOUND THEN
16:21:05 1929  	       RAISE BAD_OC_ID;
16:21:05 1930  	 END;
16:21:05 1931  
16:21:05 1932  	 -- only check eligibility if this is not a gift certificate
16:21:05 1933  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
16:21:05 1934  	   BEGIN
16:21:05 1935  	     SELECT
16:21:05 1936  	       A.ID into var_account_id
16:21:05 1937  	     FROM
16:21:05 1938  	       ACCOUNT A
16:21:05 1939  	     WHERE
16:21:05 1940  	       A.GROUP_ID = in_group_id;
16:21:05 1941  	     EXCEPTION
16:21:05 1942  	       WHEN NO_DATA_FOUND THEN
16:21:05 1943  		 RAISE BAD_GROUP_ID;
16:21:05 1944  	   END;
16:21:05 1945  
16:21:05 1946  
16:21:05 1947  	   FOR f_offer_chain IN (
16:21:05 1948  	       SELECT
16:21:05 1949  		 S.ID as SUBSCRIPTION_ID,
16:21:05 1950  		 S.OFFER_CHAIN_ID
16:21:05 1951  	       FROM
16:21:05 1952  		 SUBSCRIPTION S
16:21:05 1953  	       WHERE
16:21:05 1954  		 S.ACCOUNT_ID = var_account_id
16:21:05 1955  		 AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:05 1956  	   )
16:21:05 1957  	   LOOP
16:21:05 1958  	     BEGIN
16:21:05 1959  	       IF (
16:21:05 1960  		 PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(
16:21:05 1961  		   in_offer_chain_id,
16:21:05 1962  		   f_offer_chain.offer_chain_id,
16:21:05 1963  		   GLOBAL_CONSTANTS_V16.TRUE
16:21:05 1964  		 ) = GLOBAL_CONSTANTS_V16.TRUE
16:21:05 1965  	       ) THEN
16:21:05 1966  		 var_is_eligible := GLOBAL_CONSTANTS_V16.FALSE;
16:21:05 1967  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
16:21:05 1968  	       END IF;
16:21:05 1969  	       EXCEPTION
16:21:05 1970  		 WHEN OTHERS THEN
16:21:05 1971  		   EXCEPTION_MESSAGE := SQLERRM;
16:21:05 1972  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
16:21:05 1973  	     END;
16:21:05 1974  	   END LOOP;
16:21:05 1975  	 END IF;
16:21:05 1976  	 out_is_eligible := var_is_eligible;
16:21:05 1977  
16:21:05 1978  EXCEPTION
16:21:05 1979  WHEN BAD_GROUP_ID THEN
16:21:05 1980  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1981  	   SPROC_NAME, 'No such offer chain', SQLERRM);
16:21:05 1982  WHEN BAD_OC_ID THEN
16:21:05 1983  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:05 1984  	   SPROC_NAME, 'No such offer chain', SQLERRM);
16:21:05 1985  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
16:21:05 1986  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 1987  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
16:21:05 1988  WHEN OTHERS THEN
16:21:05 1989  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 1990  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 1991  END CHECK_PRODUCT_ELIGIBILITY;
16:21:05 1992  
16:21:05 1993  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:21:05 1994  	 in_offer_chain_id	  IN NUMBER,
16:21:05 1995  	 in_action_name 	  IN VARCHAR2,
16:21:05 1996  	 out_notification_type_id OUT NUMBER
16:21:05 1997  ) AS
16:21:05 1998  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
16:21:05 1999  -- Variables
16:21:05 2000  var_action_id NUMBER;
16:21:05 2001  -- Exceptions
16:21:05 2002  BAD_ACTION_NAME	      EXCEPTION;
16:21:05 2003  MULTIPLY_ACTIONS_FOUND EXCEPTION;
16:21:05 2004  BEGIN
16:21:05 2005  
16:21:05 2006  	 BEGIN
16:21:05 2007  	   SELECT
16:21:05 2008  	     A.ID into var_action_id
16:21:05 2009  	   FROM
16:21:05 2010  	     ACTION A
16:21:05 2011  	   WHERE
16:21:05 2012  	     UPPER(A.NAME) = UPPER(in_action_name);
16:21:05 2013  	   EXCEPTION
16:21:05 2014  	     WHEN NO_DATA_FOUND THEN
16:21:05 2015  	       RAISE BAD_ACTION_NAME;
16:21:05 2016  	     WHEN TOO_MANY_ROWS THEN
16:21:05 2017  	       RAISE MULTIPLY_ACTIONS_FOUND;
16:21:05 2018  	 END;
16:21:05 2019  
16:21:05 2020  	 SELECT
16:21:05 2021  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
16:21:05 2022  	 FROM
16:21:05 2023  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
16:21:05 2024  	 WHERE
16:21:05 2025  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
16:21:05 2026  	   AND OCNT.ACTION_ID = var_action_id;
16:21:05 2027  
16:21:05 2028  EXCEPTION
16:21:05 2029  WHEN NO_DATA_FOUND THEN
16:21:05 2030  	 out_notification_type_id := NULL;
16:21:05 2031  WHEN BAD_ACTION_NAME THEN
16:21:05 2032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:05 2033  	   SPROC_NAME, 'Bad action name', SQLERRM);
16:21:05 2034  WHEN MULTIPLY_ACTIONS_FOUND THEN
16:21:05 2035  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:05 2036  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
16:21:05 2037  WHEN OTHERS THEN
16:21:05 2038  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:05 2039  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:05 2040  END GET_NOTIFICATION_TYPE_ID;
16:21:05 2041  
16:21:05 2042  END PROCS_OFFER_CHAIN_V16;
16:21:05 2043  .
16:21:05 SQL> /

Package body created.

Elapsed: 00:00:00.24
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
16:21:06   2  AS
16:21:06   3  	  --------------------------------------------------------------------------------
16:21:06   4  PROCEDURE GATHER_SYNC_EVENTS
16:21:06   5  	  (
16:21:06   6  	      in_last_timestamp TIMESTAMP,
16:21:06   7  	      out_new_timestamp OUT TIMESTAMP)
16:21:06   8  IS
16:21:06   9  BEGIN
16:21:06  10  	  out_new_timestamp := systimestamp;
16:21:06  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
16:21:06  12  END;
16:21:06  13  	  --------------------------------------------------------------------------------
16:21:06  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
16:21:06  15  IS
16:21:06  16  BEGIN
16:21:06  17  	  INSERT
16:21:06  18  	  INTO
16:21:06  19  	      core_owner.polling_sync
16:21:06  20  	      (
16:21:06  21  		  account_id,
16:21:06  22  		  group_id,
16:21:06  23  		  event_type,
16:21:06  24  		  event_date
16:21:06  25  	      )
16:21:06  26  	  select id, group_id, event_type, event_date from (
16:21:06  27  	      SELECT
16:21:06  28  		  a.id,
16:21:06  29  		  a.group_id,
16:21:06  30  		  'I' event_type,
16:21:06  31  		  in_end_ts event_date,
16:21:06  32  		  max(cl.change_time) last_change_time
16:21:06  33  	      FROM
16:21:06  34  		  core_hist_owner.change_log cl,
16:21:06  35  		  core_owner.credit_card cc,
16:21:06  36  		  core_owner.account a
16:21:06  37  	      WHERE
16:21:06  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
16:21:06  39  	      AND cl.item = 'CREDIT_CARD'
16:21:06  40  	      AND cl.id = cc.id
16:21:06  41  	      AND cc.account_id = a.id
16:21:06  42  	      GROUP BY a.id, a.group_id
16:21:06  43  	      UNION ALL
16:21:06  44  	      SELECT
16:21:06  45  		  a.id,
16:21:06  46  		  a.group_id,
16:21:06  47  		  'I',
16:21:06  48  		  in_end_ts,
16:21:06  49  		  max(cl.change_time) last_change_time
16:21:06  50  	      FROM
16:21:06  51  		  core_hist_owner.change_log cl,
16:21:06  52  		  core_owner.paypal p,
16:21:06  53  		  core_owner.account a
16:21:06  54  	      WHERE
16:21:06  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
16:21:06  56  	      AND cl.item = 'PAYPAL'
16:21:06  57  	      AND cl.id = p.id
16:21:06  58  	      AND p.account_id = a.id
16:21:06  59  	      GROUP BY a.id, a.group_id
16:21:06  60  	      UNION ALL
16:21:06  61  	      SELECT
16:21:06  62  		  a.id,
16:21:06  63  		  a.group_id,
16:21:06  64  		  'S',
16:21:06  65  		  in_end_ts,
16:21:06  66  		  max(cl.change_time) last_change_time
16:21:06  67  	      FROM
16:21:06  68  		  core_hist_owner.change_log cl,
16:21:06  69  		  core_owner.subscription s,
16:21:06  70  		  core_owner.account a
16:21:06  71  	      WHERE
16:21:06  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
16:21:06  73  	      AND cl.item = 'SUBSCRIPTION'
16:21:06  74  	      AND cl.id = s.id
16:21:06  75  	      AND s.account_id = a.id
16:21:06  76  	      GROUP BY a.id, a.group_id
16:21:06  77  	      UNION ALL
16:21:06  78  	      SELECT
16:21:06  79  		  a.id,
16:21:06  80  		  a.group_id,
16:21:06  81  		  'G',
16:21:06  82  		  in_end_ts,
16:21:06  83  		  max(cl.change_time) last_change_time
16:21:06  84  	      FROM
16:21:06  85  		  core_hist_owner.change_log cl,
16:21:06  86  		  core_owner.gift_certificate gc,
16:21:06  87  		  core_owner.account a
16:21:06  88  	      WHERE
16:21:06  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
16:21:06  90  	      AND cl.item = 'GIFT_CERTIFICATE'
16:21:06  91  	      AND cl.id = gc.id
16:21:06  92  	      AND gc.purchaser_group_id = a.group_id
16:21:06  93  	      GROUP BY a.id, a.group_id
16:21:06  94  	  ) t
16:21:06  95  	  where not exists (
16:21:06  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
16:21:06  97  	      from polling_sync ps
16:21:06  98  	      where ps.account_id = t.id
16:21:06  99  		and ps.group_id = t.group_id
16:21:06 100  		and ps.event_type = t.event_type
16:21:06 101  		and ps.event_date >= t.last_change_time
16:21:06 102  	  )
16:21:06 103  	  ;
16:21:06 104  END;
16:21:06 105  --------------------------------------------------------------------------------
16:21:06 106  FUNCTION CREATE_NEW_TRANSFER_SET
16:21:06 107  	  (
16:21:06 108  	      in_set_maximum NUMBER)
16:21:06 109  	  RETURN core_owner.polling_sync.set_id%type
16:21:06 110  IS
16:21:06 111  	  pragma autonomous_transaction;
16:21:06 112  	  v_set_id core_owner.polling_sync.set_id%type;
16:21:06 113  BEGIN
16:21:06 114  	  SELECT
16:21:06 115  	      pollsync_setid_seq.nextval
16:21:06 116  	  INTO
16:21:06 117  	      v_set_id
16:21:06 118  	  FROM
16:21:06 119  	      dual;
16:21:06 120  	  update
16:21:06 121  	    core_owner.polling_sync ps
16:21:06 122  	  set
16:21:06 123  	    ps.set_id = v_set_id
16:21:06 124  	  where
16:21:06 125  	    ps.set_id IS NULL and
16:21:06 126  	    rownum <= in_set_maximum
16:21:06 127  	  ;
16:21:06 128  	  COMMIT;
16:21:06 129  	  RETURN v_set_id;
16:21:06 130  END;
16:21:06 131  --------------------------------------------------------------------------------
16:21:06 132  FUNCTION RETREIVE_TRANSFER_SET
16:21:06 133  	  (
16:21:06 134  	      in_set_id core_owner.polling_sync.set_id%type)
16:21:06 135  	  RETURN sys_refcursor
16:21:06 136  IS
16:21:06 137  	  v_refcursor sys_refcursor;
16:21:06 138  BEGIN
16:21:06 139  	  UPDATE
16:21:06 140  	      core_owner.polling_sync ps
16:21:06 141  	  SET
16:21:06 142  	      ps.last_send_date = sysdate,
16:21:06 143  	      ps.num_calls = ps.num_calls + 1
16:21:06 144  	  WHERE
16:21:06 145  	      ps.set_id = in_set_id ;
16:21:06 146  	  OPEN v_refcursor FOR
16:21:06 147  	  SELECT
16:21:06 148  	      ps.set_id,
16:21:06 149  	      ps.group_id,
16:21:06 150  	      ps.event_type,
16:21:06 151  	      ps.event_date
16:21:06 152  	  FROM
16:21:06 153  	      core_owner.polling_sync ps
16:21:06 154  	  WHERE
16:21:06 155  	      ps.set_id = in_set_id
16:21:06 156  	  AND ps.group_id IS NOT NULL ;
16:21:06 157  	  RETURN v_refcursor;
16:21:06 158  END;
16:21:06 159  --------------------------------------------------------------------------------
16:21:06 160  PROCEDURE GET_TRANSFER_SET
16:21:06 161  	  (
16:21:06 162  	      in_set_maximum NUMBER,
16:21:06 163  	      in_max_retries NUMBER,
16:21:06 164  	      out_refcursor OUT sys_refcursor)
16:21:06 165  IS
16:21:06 166  	  v_set_id core_owner.polling_sync.set_id%type;
16:21:06 167  BEGIN
16:21:06 168  	  /* Look for previously sent but unconfirmed sets and
16:21:06 169  	  send again until max_retries calls */
16:21:06 170  	  FOR x IN
16:21:06 171  	  (
16:21:06 172  	      SELECT
16:21:06 173  		  ps.set_id,
16:21:06 174  		  COUNT( *) set_size
16:21:06 175  	      FROM
16:21:06 176  		  core_owner.polling_sync ps
16:21:06 177  	      WHERE
16:21:06 178  		  ps.event_date > sysdate - 14
16:21:06 179  	      AND ps.confirm_date IS NULL
16:21:06 180  	      AND ps.last_send_date IS NOT NULL
16:21:06 181  	      AND ps.num_calls < in_max_retries
16:21:06 182  	      GROUP BY
16:21:06 183  		  ps.set_id
16:21:06 184  	      ORDER BY
16:21:06 185  		  ps.set_id
16:21:06 186  	  )
16:21:06 187  	  LOOP
16:21:06 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
16:21:06 189  	      RETURN;
16:21:06 190  	  END LOOP;
16:21:06 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
16:21:06 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
16:21:06 193  	  RETURN;
16:21:06 194  END;
16:21:06 195  --------------------------------------------------------------------------------
16:21:06 196  PROCEDURE CONFIRM_TRANSFER_SET
16:21:06 197  	  (
16:21:06 198  	      in_set_id core_owner.polling_sync.set_id%type)
16:21:06 199  IS
16:21:06 200  	  v_unconfirmable EXCEPTION;
16:21:06 201  BEGIN
16:21:06 202  	  UPDATE
16:21:06 203  	      core_owner.polling_sync ps
16:21:06 204  	  SET
16:21:06 205  	      ps.confirm_date = systimestamp
16:21:06 206  	  WHERE
16:21:06 207  	      ps.set_id = in_set_id
16:21:06 208  	  AND ps.confirm_date IS NULL ;
16:21:06 209  	  IF(sql%rowcount < 1) THEN
16:21:06 210  	      raise v_unconfirmable;
16:21:06 211  	  END IF;
16:21:06 212  END;
16:21:06 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
16:21:06 214  IS
16:21:06 215  BEGIN
16:21:06 216  	  UPDATE POLLING_SYNC_LASTRUN
16:21:06 217  	  SET last_run = current_timestamp;
16:21:06 218  	  IF ( sql%rowcount = 0 )
16:21:06 219  	  THEN
16:21:06 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
16:21:06 221  	  END if;
16:21:06 222  	  COMMIT;
16:21:06 223  END;
16:21:06 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
16:21:06 225  IS
16:21:06 226  BEGIN
16:21:06 227  	  SELECT LAST_RUN INTO ts
16:21:06 228  	  FROM POLLING_SYNC_LASTRUN
16:21:06 229  	  WHERE ROWNUM < 2;
16:21:06 230  EXCEPTION
16:21:06 231  	WHEN NO_DATA_FOUND
16:21:06 232  	THEN
16:21:06 233  	  ts := current_timestamp;
16:21:06 234  END;
16:21:06 235  END PROCS_POLLING_SYNC;
16:21:06 236  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V16" AS
16:21:06   2  
16:21:06   3  PROCEDURE GET_PRODUCTS (
16:21:06   4  /*
16:21:06   5  Throws exceptions:
16:21:06   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06   7  */
16:21:06   8  	in_status_id   IN  NUMBER,
16:21:06   9  	out_result_set OUT SYS_REFCURSOR
16:21:06  10  ) AS
16:21:06  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
16:21:06  12  BEGIN
16:21:06  13  	OPEN out_result_set FOR
16:21:06  14  	SELECT
16:21:06  15  	  PRODUCT.ID,
16:21:06  16  	  PRODUCT.NAME,
16:21:06  17  	  PRODUCT.UNIT_PRICE,
16:21:06  18  	  PRODUCT.PRODUCTION_COST,
16:21:06  19  	  PRODUCT.CREATE_DATE,
16:21:06  20  	  PRODUCT.CREATED_BY,
16:21:06  21  	  PRODUCT.PRODUCT_STATUS_ID,
16:21:06  22  	  PRODUCT.PRODUCT_URI
16:21:06  23  	FROM
16:21:06  24  	  PRODUCT
16:21:06  25   WHERE
16:21:06  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
16:21:06  27  EXCEPTION
16:21:06  28  WHEN OTHERS THEN
16:21:06  29  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06  31  END GET_PRODUCTS;
16:21:06  32  
16:21:06  33  /******************************************************************************/
16:21:06  34  
16:21:06  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:21:06  36  	in_product_offering_id	IN NUMBER,
16:21:06  37  	out_result_set OUT SYS_REFCURSOR
16:21:06  38  ) AS
16:21:06  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
16:21:06  40  -- VARIABLES
16:21:06  41  temp_product_offering_id NUMBER;
16:21:06  42  -- EXCEPTIONS
16:21:06  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
16:21:06  44  BEGIN
16:21:06  45  
16:21:06  46  	-- Check that product offering exists
16:21:06  47  	BEGIN
16:21:06  48  	  SELECT
16:21:06  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
16:21:06  50  	  FROM
16:21:06  51  	    PRODUCT_OFFERING
16:21:06  52  	  WHERE
16:21:06  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
16:21:06  54  	  EXCEPTION
16:21:06  55  	    WHEN NO_DATA_FOUND THEN
16:21:06  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
16:21:06  57  	END;
16:21:06  58  
16:21:06  59  	OPEN out_result_set FOR
16:21:06  60  	SELECT
16:21:06  61  	  PRODUCT_OFFERING_META_DATA.ID,
16:21:06  62  	  PRODUCT_OFFERING_META_DATA.NAME,
16:21:06  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
16:21:06  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
16:21:06  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
16:21:06  66  	FROM
16:21:06  67  	  PRODUCT_OFFERING_META_DATA
16:21:06  68  	WHERE
16:21:06  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
16:21:06  70  
16:21:06  71  EXCEPTION
16:21:06  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
16:21:06  73  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06  74  	  SPROC_NAME, 'No such product offering id');
16:21:06  75  WHEN OTHERS THEN
16:21:06  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06  78  END GET_PRODUCT_OFFERING_META_DATA;
16:21:06  79  
16:21:06  80  /******************************************************************************/
16:21:06  81  
16:21:06  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
16:21:06  83  /*
16:21:06  84  Throws exceptions:
16:21:06  85  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06  87  */
16:21:06  88  	in_product_id	    IN NUMBER,
16:21:06  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
16:21:06  90  	out_result_set	    OUT SYS_REFCURSOR
16:21:06  91  ) AS
16:21:06  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
16:21:06  93  -- VARIABLES
16:21:06  94  temp_product_id NUMBER;
16:21:06  95  -- EXCEPTIONS
16:21:06  96  BAD_PRODUCT_ID EXCEPTION;
16:21:06  97  BEGIN
16:21:06  98  
16:21:06  99  	BEGIN
16:21:06 100  	  SELECT
16:21:06 101  	    PRODUCT.ID into temp_product_id
16:21:06 102  	  FROM
16:21:06 103  	    PRODUCT
16:21:06 104  	  WHERE
16:21:06 105  	    PRODUCT.ID = in_product_id;
16:21:06 106  	  EXCEPTION
16:21:06 107  	    WHEN NO_DATA_FOUND THEN
16:21:06 108  	      RAISE BAD_PRODUCT_ID;
16:21:06 109  	END;
16:21:06 110  
16:21:06 111  	OPEN out_result_set FOR
16:21:06 112  	SELECT
16:21:06 113  	  PRODUCT_ELIGIBILITY.ID
16:21:06 114  	FROM
16:21:06 115  	  PRODUCT_ELIGIBILITY
16:21:06 116  	WHERE
16:21:06 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
16:21:06 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
16:21:06 119  
16:21:06 120  EXCEPTION
16:21:06 121  WHEN BAD_PRODUCT_ID THEN
16:21:06 122  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 123  	  SPROC_NAME, 'No such product');
16:21:06 124  WHEN OTHERS THEN
16:21:06 125  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
16:21:06 128  
16:21:06 129  /******************************************************************************/
16:21:06 130  
16:21:06 131  PROCEDURE GET_PRODUCT_BY_ID (
16:21:06 132  	in_product_id  IN NUMBER,
16:21:06 133  	out_result_set OUT SYS_REFCURSOR
16:21:06 134  ) AS
16:21:06 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
16:21:06 136  -- VARIABLES
16:21:06 137  temp_product_id NUMBER;
16:21:06 138  -- EXCEPTIONS
16:21:06 139  BAD_PRODUCT_ID EXCEPTION;
16:21:06 140  BEGIN
16:21:06 141  
16:21:06 142  	BEGIN
16:21:06 143  	  SELECT
16:21:06 144  	    PRODUCT.ID into temp_product_id
16:21:06 145  	  FROM
16:21:06 146  	    PRODUCT
16:21:06 147  	  WHERE
16:21:06 148  	    PRODUCT.ID = in_product_id;
16:21:06 149  	  EXCEPTION
16:21:06 150  	    WHEN NO_DATA_FOUND THEN
16:21:06 151  	      RAISE BAD_PRODUCT_ID;
16:21:06 152  	END;
16:21:06 153  
16:21:06 154  	OPEN out_result_set FOR
16:21:06 155  	SELECT
16:21:06 156  	  PRODUCT.ID,
16:21:06 157  	  PRODUCT.NAME,
16:21:06 158  	  PRODUCT.PRODUCT_STATUS_ID,
16:21:06 159  	  PRODUCT.PRODUCT_URI,
16:21:06 160  	  PRODUCT.PRODUCTION_COST,
16:21:06 161  	  PRODUCT.UNIT_PRICE,
16:21:06 162  	  PRODUCT.CREATE_DATE,
16:21:06 163  	  PRODUCT.CREATED_BY
16:21:06 164  	FROM
16:21:06 165  	  PRODUCT
16:21:06 166  	WHERE
16:21:06 167  	  PRODUCT.ID = in_product_id;
16:21:06 168  
16:21:06 169  EXCEPTION
16:21:06 170  WHEN BAD_PRODUCT_ID THEN
16:21:06 171  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 172  	  SPROC_NAME, 'No such product');
16:21:06 173  WHEN OTHERS THEN
16:21:06 174  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 176  END GET_PRODUCT_BY_ID;
16:21:06 177  
16:21:06 178  /******************************************************************************/
16:21:06 179  
16:21:06 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
16:21:06 181  	in_line_item_id IN NUMBER,
16:21:06 182  	out_result_set	OUT SYS_REFCURSOR
16:21:06 183  ) AS
16:21:06 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
16:21:06 185  -- VARIABLES
16:21:06 186  temp_line_item_id NUMBER;
16:21:06 187  -- EXCEPTIONS
16:21:06 188  BAD_LINE_ITEM_ID EXCEPTION;
16:21:06 189  BEGIN
16:21:06 190  
16:21:06 191  	BEGIN
16:21:06 192  	  SELECT
16:21:06 193  	    LINE_ITEM.ID into temp_line_item_id
16:21:06 194  	  FROM
16:21:06 195  	    LINE_ITEM
16:21:06 196  	  WHERE
16:21:06 197  	    LINE_ITEM.ID = in_line_item_id;
16:21:06 198  	  EXCEPTION
16:21:06 199  	    WHEN NO_DATA_FOUND THEN
16:21:06 200  	      RAISE BAD_LINE_ITEM_ID;
16:21:06 201  	END;
16:21:06 202  
16:21:06 203  	OPEN out_result_set FOR
16:21:06 204  	SELECT
16:21:06 205  	  PRODUCT_OFFERING.ID,
16:21:06 206  	  PRODUCT_OFFERING.PRODUCT_ID,
16:21:06 207  	  PRODUCT_OFFERING.QUANTITY,
16:21:06 208  	  PRODUCT_OFFERING.UNIT_PRICE,
16:21:06 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:21:06 210  	  PRODUCT_OFFERING.CREATE_DATE,
16:21:06 211  	  PRODUCT_OFFERING.CREATED_BY,
16:21:06 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
16:21:06 213  	  CAPABILITY.ID CAP_ID,
16:21:06 214  	  CAPABILITY.CODE CAP_CODE,
16:21:06 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:21:06 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
16:21:06 217  	FROM
16:21:06 218  	  PRODUCT_OFFERING
16:21:06 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
16:21:06 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:21:06 221  	WHERE
16:21:06 222  	  LINE_ITEM.ID = in_line_item_id;
16:21:06 223  
16:21:06 224  EXCEPTION
16:21:06 225  WHEN BAD_LINE_ITEM_ID THEN
16:21:06 226  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 227  	  SPROC_NAME, 'No such line item');
16:21:06 228  WHEN OTHERS THEN
16:21:06 229  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
16:21:06 232  
16:21:06 233  /******************************************************************************/
16:21:06 234  
16:21:06 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
16:21:06 236  	in_product_offering_id IN NUMBER,
16:21:06 237  	out_result_set	OUT SYS_REFCURSOR
16:21:06 238  ) AS
16:21:06 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
16:21:06 240  BEGIN
16:21:06 241  	OPEN out_result_set FOR
16:21:06 242  	SELECT
16:21:06 243  	  PRODUCT_OFFERING.ID,
16:21:06 244  	  PRODUCT_OFFERING.PRODUCT_ID,
16:21:06 245  	  PRODUCT_OFFERING.QUANTITY,
16:21:06 246  	  PRODUCT_OFFERING.UNIT_PRICE,
16:21:06 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:21:06 248  	  PRODUCT_OFFERING.CREATE_DATE,
16:21:06 249  	  PRODUCT_OFFERING.CREATED_BY,
16:21:06 250  	  CAPABILITY.ID CAP_ID,
16:21:06 251  	  CAPABILITY.CODE CAP_CODE,
16:21:06 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:21:06 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
16:21:06 254  	FROM
16:21:06 255  	  PRODUCT_OFFERING
16:21:06 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:21:06 257  	WHERE
16:21:06 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
16:21:06 259  
16:21:06 260  EXCEPTION
16:21:06 261  WHEN OTHERS THEN
16:21:06 262  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 264  END GET_PRD_OFFERING_BY_ID;
16:21:06 265  
16:21:06 266  /******************************************************************************/
16:21:06 267  
16:21:06 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
16:21:06 269  	in_product_offering_id IN NUMBER,
16:21:06 270  	out_result_set	       OUT SYS_REFCURSOR
16:21:06 271  ) AS
16:21:06 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
16:21:06 273  -- VARIABLES
16:21:06 274  temp_product_offering_id NUMBER;
16:21:06 275  -- EXCEPTIONS
16:21:06 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
16:21:06 277  BEGIN
16:21:06 278  
16:21:06 279  	BEGIN
16:21:06 280  	  SELECT
16:21:06 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
16:21:06 282  	  FROM
16:21:06 283  	    PRODUCT_OFFERING
16:21:06 284  	  WHERE
16:21:06 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
16:21:06 286  	  EXCEPTION
16:21:06 287  	    WHEN NO_DATA_FOUND THEN
16:21:06 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
16:21:06 289  	END;
16:21:06 290  
16:21:06 291  	OPEN out_result_set FOR
16:21:06 292  	SELECT
16:21:06 293  	  DISCOUNT.ID,
16:21:06 294  	  DISCOUNT.NAME,
16:21:06 295  	  DISCOUNT.FIXED_AMOUNT,
16:21:06 296  	  DISCOUNT.PERCENT_AMOUNT,
16:21:06 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
16:21:06 298  	  DISCOUNT.CREATE_DATE,
16:21:06 299  	  DISCOUNT.CREATED_BY,
16:21:06 300  	  DISCOUNT.DESCRIPTION
16:21:06 301  	FROM
16:21:06 302  	  DISCOUNT
16:21:06 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
16:21:06 304  	WHERE
16:21:06 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
16:21:06 306  
16:21:06 307  EXCEPTION
16:21:06 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
16:21:06 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 310  	  SPROC_NAME, 'No such product offering');
16:21:06 311  WHEN OTHERS THEN
16:21:06 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
16:21:06 315  
16:21:06 316  END PROCS_PRODUCT_V16;
16:21:06 317  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE
16:21:06   2  PACKAGE BODY PROCS_REPORTING AS
16:21:06   3  
16:21:06   4  ----
16:21:06   5  --------------------------------------------------------------------------------
16:21:06   6  ----
16:21:06   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06   8  	  is
16:21:06   9  	  begin
16:21:06  10  	      open out_cursor for
16:21:06  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
16:21:06  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
16:21:06  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
16:21:06  14  			,c.create_date, c.update_date
16:21:06  15  		  from charge c
16:21:06  16  		      ,charge_status cs
16:21:06  17  		      ,instrument_type it
16:21:06  18  		      ,ids
16:21:06  19  		  where c.id = ids.id
16:21:06  20  		    and c.charge_status_id = cs.id
16:21:06  21  		    and c.instrument_type_id = it.id
16:21:06  22  	      ;
16:21:06  23  	  end;
16:21:06  24  ----
16:21:06  25  --------------------------------------------------------------------------------
16:21:06  26  ----
16:21:06  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06  28  	  is
16:21:06  29  	  begin
16:21:06  30  	      open out_cursor for
16:21:06  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
16:21:06  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
16:21:06  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date
16:21:06  35  		  from license l
16:21:06  36  		      ,license_status ls
16:21:06  37  		      ,ids
16:21:06  38  		  where l.id = ids.id
16:21:06  39  		    and l.license_status_id = ls.id
16:21:06  40  	      ;
16:21:06  41  	  end;
16:21:06  42  ----
16:21:06  43  --------------------------------------------------------------------------------
16:21:06  44  ----
16:21:06  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06  46  	  is
16:21:06  47  	  begin
16:21:06  48  	      open out_cursor for
16:21:06  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
16:21:06  50  		  select
16:21:06  51  		    i.id invoice_id,
16:21:06  52  		    i.create_date,
16:21:06  53  		    i.update_date,
16:21:06  54  		    i.invoice_status_id,
16:21:06  55  		    istat.value invoice_status,
16:21:06  56  		    NVL(
16:21:06  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
16:21:06  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
16:21:06  59  		    ) offer_chain_id
16:21:06  60  		  from	   invoice i
16:21:06  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
16:21:06  62  		      join ids			on ids.id = i.id
16:21:06  63  		  where 1 = 1
16:21:06  64  	      ;
16:21:06  65  	  end;
16:21:06  66  ----
16:21:06  67  --------------------------------------------------------------------------------
16:21:06  68  ----
16:21:06  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06  70  	  is
16:21:06  71  	  begin
16:21:06  72  	      open out_cursor for
16:21:06  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
16:21:06  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
16:21:06  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
16:21:06  76  		  from line_item li
16:21:06  77  		    , ids
16:21:06  78  		  where li.id = ids.id
16:21:06  79  	      ;
16:21:06  80  	  end;
16:21:06  81  ----
16:21:06  82  --------------------------------------------------------------------------------
16:21:06  83  ----
16:21:06  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06  85  	  is
16:21:06  86  	  begin
16:21:06  87  	      open out_cursor for
16:21:06  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
16:21:06  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
16:21:06  91  			,a.instrument_id, a.tax_exempt_id
16:21:06  92  			-- need system category??
16:21:06  93  		  from account a
16:21:06  94  		      ,account_status astat
16:21:06  95  		      ,instrument_type it
16:21:06  96  		      , ids
16:21:06  97  		  where a.id = ids.id
16:21:06  98  		    and astat.id = a.account_status_id
16:21:06  99  		    and a.instrument_type_id = it.id(+)
16:21:06 100  	      ;
16:21:06 101  	  end;
16:21:06 102  ----
16:21:06 103  --------------------------------------------------------------------------------
16:21:06 104  ----
16:21:06 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 106  	  is
16:21:06 107  	  begin
16:21:06 108  	      open out_cursor for
16:21:06 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
16:21:06 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
16:21:06 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
16:21:06 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
16:21:06 114  		  from subscription s
16:21:06 115  		      ,subscription_status ss
16:21:06 116  		      ,subscription_cancel_reason sct
16:21:06 117  		      ,instrument_type it
16:21:06 118  		      , ids
16:21:06 119  		  where s.id = ids.id
16:21:06 120  		    and ss.id = s.subscription_status_id
16:21:06 121  		    and s.instrument_type_id = it.id
16:21:06 122  		    and sct.id(+) = s.sct_id
16:21:06 123  	      ;
16:21:06 124  	  end;
16:21:06 125  ----
16:21:06 126  --------------------------------------------------------------------------------
16:21:06 127  ----
16:21:06 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 129  	  is
16:21:06 130  	  begin
16:21:06 131  	      open out_cursor for
16:21:06 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 133  		  select t.id transaction_id, t.transaction_amount
16:21:06 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
16:21:06 135  			,t.create_date, t.update_date, t.is_settled
16:21:06 136  		  from transaction t
16:21:06 137  		      ,transaction_status ts
16:21:06 138  		      , ids
16:21:06 139  		  where t.id = ids.id
16:21:06 140  		    and t.transaction_status_id = ts.id
16:21:06 141  	      ;
16:21:06 142  	  end;
16:21:06 143  ----
16:21:06 144  --------------------------------------------------------------------------------
16:21:06 145  ----
16:21:06 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 147  	  is
16:21:06 148  	  begin
16:21:06 149  	      open out_cursor for
16:21:06 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
16:21:06 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
16:21:06 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
16:21:06 154  			,oc.billing_source_id, bs.name billing_source_name
16:21:06 155  			,oc.is_seat_license,oc.group_account_type_id
16:21:06 156  		  from offer_chain oc
16:21:06 157  		      , offer_chain_status ocs
16:21:06 158  		      , ids
16:21:06 159  		      , vendor_source vs
16:21:06 160  		      , billing_source bs
16:21:06 161  		  where oc.id = ids.id
16:21:06 162  		    and oc.offer_chain_status_id = ocs.id
16:21:06 163  		    and oc.vendor_source_id = vs.id
16:21:06 164  		    and oc.billing_source_id = bs.id
16:21:06 165  	      ;
16:21:06 166  	  end;
16:21:06 167  ----
16:21:06 168  --------------------------------------------------------------------------------
16:21:06 169  ----
16:21:06 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 171  	  is
16:21:06 172  	  begin
16:21:06 173  	      open out_cursor for
16:21:06 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
16:21:06 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
16:21:06 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
16:21:06 177  		  from offer_offer_chain ooc
16:21:06 178  		  , ids
16:21:06 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
16:21:06 180  	      ;
16:21:06 181  	  end;
16:21:06 182  ----
16:21:06 183  --------------------------------------------------------------------------------
16:21:06 184  ----
16:21:06 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 186  	  is
16:21:06 187  	  begin
16:21:06 188  	      open out_cursor for
16:21:06 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
16:21:06 191  		  from offer o
16:21:06 192  		      ,offer_status os
16:21:06 193  		      , ids
16:21:06 194  		  where o.id = ids.id
16:21:06 195  		    and o.offer_status_id = os.id
16:21:06 196  	      ;
16:21:06 197  	  end;
16:21:06 198  ----
16:21:06 199  --------------------------------------------------------------------------------
16:21:06 200  ----
16:21:06 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 202  	  is
16:21:06 203  	  begin
16:21:06 204  	      open out_cursor for
16:21:06 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
16:21:06 207  			 ,gc.expiration_date, gc.purchase_date
16:21:06 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
16:21:06 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
16:21:06 210  			 ,recipient_address_id
16:21:06 211  			 ,redeemer_address_id
16:21:06 212  			 ,recipient_notify_date
16:21:06 213  			 ,recipient_name
16:21:06 214  			 ,redemption_date
16:21:06 215  			 ,recipient_email
16:21:06 216  		  from gift_certificate gc
16:21:06 217  		      ,gift_certificate_status gcs
16:21:06 218  		      , ids
16:21:06 219  		  where gc.id = ids.id
16:21:06 220  		    and gc.gift_certificate_status_id = gcs.id
16:21:06 221  	      ;
16:21:06 222  	  end;
16:21:06 223  ----
16:21:06 224  --------------------------------------------------------------------------------
16:21:06 225  ----
16:21:06 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 227  	  is
16:21:06 228  	  begin
16:21:06 229  	      open out_cursor for
16:21:06 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
16:21:06 232  		  from product_offering po
16:21:06 233  		  , ids
16:21:06 234  		  where po.id = ids.id
16:21:06 235  	      ;
16:21:06 236  	  end;
16:21:06 237  ----
16:21:06 238  --------------------------------------------------------------------------------
16:21:06 239  ----
16:21:06 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 241  	  is
16:21:06 242  	  begin
16:21:06 243  	      open out_cursor for
16:21:06 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
16:21:06 246  			,product_uri, p.create_date
16:21:06 247  		  from product p
16:21:06 248  		      ,product_status ps
16:21:06 249  		      , ids
16:21:06 250  		  where p.id = ids.id
16:21:06 251  		    and p.product_status_id = ps.id
16:21:06 252  	      ;
16:21:06 253  	  end;
16:21:06 254  ----
16:21:06 255  --------------------------------------------------------------------------------
16:21:06 256  ----
16:21:06 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 258  	  is
16:21:06 259  	  begin
16:21:06 260  	      open out_cursor for
16:21:06 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
16:21:06 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
16:21:06 263  		  from offer_product_offering opo
16:21:06 264  		  , ids
16:21:06 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
16:21:06 266  	      ;
16:21:06 267  	  end;
16:21:06 268  ----
16:21:06 269  --------------------------------------------------------------------------------
16:21:06 270  ----
16:21:06 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 272  	  is
16:21:06 273  	  begin
16:21:06 274  	      open out_cursor for
16:21:06 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
16:21:06 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
16:21:06 277  		  from discount_product_offering dpo
16:21:06 278  		  , ids
16:21:06 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
16:21:06 280  	      ;
16:21:06 281  	  end;
16:21:06 282  ----
16:21:06 283  --------------------------------------------------------------------------------
16:21:06 284  ----
16:21:06 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 286  	  is
16:21:06 287  	  begin
16:21:06 288  	      open out_cursor for
16:21:06 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
16:21:06 291  			,d.discount_type_id, dt.value discount_type, d.create_date
16:21:06 292  		  from discount d
16:21:06 293  		      ,discount_type dt
16:21:06 294  		      , ids
16:21:06 295  		  where d.id = ids.id
16:21:06 296  		    and d.discount_type_id = dt.id
16:21:06 297  	      ;
16:21:06 298  	  end;
16:21:06 299  ----
16:21:06 300  --------------------------------------------------------------------------------
16:21:06 301  ----
16:21:06 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 303  	  is
16:21:06 304  	  begin
16:21:06 305  	      open out_cursor for
16:21:06 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
16:21:06 308  		  from product_eligibility pg
16:21:06 309  		  , ids
16:21:06 310  		  where pg.id = ids.id
16:21:06 311  	      ;
16:21:06 312  	  end;
16:21:06 313  ----
16:21:06 314  --------------------------------------------------------------------------------
16:21:06 315  ----
16:21:06 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 317  	  is
16:21:06 318  	  begin
16:21:06 319  	      open out_cursor for
16:21:06 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
16:21:06 322  		  from offer_chain_eligibility oce
16:21:06 323  		  , ids
16:21:06 324  		  where oce.id = ids.id
16:21:06 325  	      ;
16:21:06 326  	  end;
16:21:06 327  ----
16:21:06 328  --------------------------------------------------------------------------------
16:21:06 329  ----
16:21:06 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 331  	  is
16:21:06 332  	  begin
16:21:06 333  	      open out_cursor for
16:21:06 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
16:21:06 336  		  from offer_chain_meta_data ocm
16:21:06 337  		  , ids
16:21:06 338  		  where ocm.id = ids.id
16:21:06 339  	      ;
16:21:06 340  	  end;
16:21:06 341  ----
16:21:06 342  --------------------------------------------------------------------------------
16:21:06 343  ----
16:21:06 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 345  	  is
16:21:06 346  	  begin
16:21:06 347  	      open out_cursor for
16:21:06 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
16:21:06 350  		  from product_offering_meta_data pom
16:21:06 351  		  , ids
16:21:06 352  		  where pom.id = ids.id
16:21:06 353  	      ;
16:21:06 354  	  end;
16:21:06 355  ----
16:21:06 356  --------------------------------------------------------------------------------
16:21:06 357  ----
16:21:06 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 359  	  is
16:21:06 360  	  begin
16:21:06 361  	      open out_cursor for
16:21:06 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
16:21:06 364  		  from subscription_meta_data sm
16:21:06 365  		  , ids
16:21:06 366  		  where sm.id = ids.id
16:21:06 367  	      ;
16:21:06 368  	  end;
16:21:06 369  ----
16:21:06 370  --------------------------------------------------------------------------------
16:21:06 371  ----
16:21:06 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 373  	  is
16:21:06 374  	  begin
16:21:06 375  	      open out_cursor for
16:21:06 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
16:21:06 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
16:21:06 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
16:21:06 380  		  from credit_card cc
16:21:06 381  		      ,credit_card_type cct
16:21:06 382  		      ,credit_card_status ccs
16:21:06 383  		      , ids
16:21:06 384  		  where cc.id = ids.id
16:21:06 385  		    and cc.credit_card_type_id = cct.id(+)
16:21:06 386  		    and cc.credit_card_status_id = ccs.id
16:21:06 387  	      ;
16:21:06 388  	  end;
16:21:06 389  ----
16:21:06 390  --------------------------------------------------------------------------------
16:21:06 391  ----
16:21:06 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 393  	  is
16:21:06 394  	  begin
16:21:06 395  	      open out_cursor for
16:21:06 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
16:21:06 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
16:21:06 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
16:21:06 400  			,ta.create_date
16:21:06 401  		  from transaction_attempt ta
16:21:06 402  		      ,transaction_attempt_status tas
16:21:06 403  		      , ids
16:21:06 404  		  where ta.id = ids.id
16:21:06 405  		    and ta.transaction_attempt_status_id = tas.id
16:21:06 406  	      ;
16:21:06 407  	  end;
16:21:06 408  ----
16:21:06 409  --------------------------------------------------------------------------------
16:21:06 410  ----
16:21:06 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 412  	  is
16:21:06 413  	  begin
16:21:06 414  	      open out_cursor for
16:21:06 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
16:21:06 417  			,ia.adjustment_date, ia.create_date
16:21:06 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
16:21:06 419  		  , ids
16:21:06 420  		  where ia.id = ids.id
16:21:06 421  		  and ir.id = ia.invoice_adjustment_reason_id
16:21:06 422  	      ;
16:21:06 423  	  end;
16:21:06 424  ----
16:21:06 425  --------------------------------------------------------------------------------
16:21:06 426  ----
16:21:06 427  
16:21:06 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 429  	  is
16:21:06 430  	  begin
16:21:06 431  	      open out_cursor for
16:21:06 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
16:21:06 434  		  from line_item_adjustment lia
16:21:06 435  		  , ids
16:21:06 436  		  where lia.id = ids.id
16:21:06 437  	      ;
16:21:06 438  	  end;
16:21:06 439  ----
16:21:06 440  --------------------------------------------------------------------------------
16:21:06 441  ----
16:21:06 442  
16:21:06 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 444  	  is
16:21:06 445  	  begin
16:21:06 446  	      open out_cursor for
16:21:06 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 448  		  select
16:21:06 449  		    tax.id tax_id,
16:21:06 450  		    ttype.code tax_type,
16:21:06 451  		    tax.calculated_amount,
16:21:06 452  		    tax.create_date,
16:21:06 453  		    tax.line_item_id,
16:21:06 454  		    tax.effective_rate,
16:21:06 455  		    tax.taxable_amount,
16:21:06 456  		    tax.tax_rule_id,
16:21:06 457  		    j.name jurisdiction_level,
16:21:06 458  		    tax.jurisdiction_name,
16:21:06 459  		    tax.jurisdiction_id,
16:21:06 460  		    tax.ext_tax_type,
16:21:06 461  		    tax.ext_result,
16:21:06 462  		    tax.imposition_type,
16:21:06 463  		    tax.imposition
16:21:06 464  		  from tax
16:21:06 465  		  , tax_type ttype
16:21:06 466  		  , jurisdiction_level j
16:21:06 467  		  , ids
16:21:06 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
16:21:06 469  	      ;
16:21:06 470  	  end;
16:21:06 471  ----
16:21:06 472  --------------------------------------------------------------------------------
16:21:06 473  ----
16:21:06 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:21:06 475  	  is
16:21:06 476  	  begin
16:21:06 477  	      open out_cursor for
16:21:06 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
16:21:06 479  		  select
16:21:06 480  		    tax.id tad_adjustment_id,
16:21:06 481  		    tax.tax_id tax_id,
16:21:06 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
16:21:06 483  		    tax.amount tax_amount,
16:21:06 484  		    tax.create_date create_date
16:21:06 485  		  from tax_adjustment tax
16:21:06 486  		  , ids
16:21:06 487  		  where tax.id = ids.id
16:21:06 488  	      ;
16:21:06 489  	  end;
16:21:06 490  ----
16:21:06 491  --------------------------------------------------------------------------------
16:21:06 492  ----
16:21:06 493  /**/
16:21:06 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 495  	  BEGIN
16:21:06 496  	    OPEN OUT_CURSOR FOR
16:21:06 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 498  	    SELECT
16:21:06 499  		t.id rcn_ext_source_log_id
16:21:06 500  	      , t.extraction_timestamp
16:21:06 501  	      , t.report_date
16:21:06 502  	      , t.report_generation_datetime
16:21:06 503  	      , t.record_type
16:21:06 504  	      , t.report_file_name
16:21:06 505  	      , t.create_date
16:21:06 506  	      , t.created_by
16:21:06 507  	    FROM rcn_ext_source_log t, ids
16:21:06 508  	    WHERE ids.id = t.id;
16:21:06 509  	  END;
16:21:06 510  
16:21:06 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 512  	  BEGIN
16:21:06 513  	    OPEN OUT_CURSOR FOR
16:21:06 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 515  	    SELECT
16:21:06 516  		t.id rcn_cpt_svc_chg_dtl_id
16:21:06 517  	      , t.rcn_ext_source_log_id
16:21:06 518  	      , t.record_type
16:21:06 519  	      , t.category
16:21:06 520  	      , t.sub_category
16:21:06 521  	      , t.entity_type
16:21:06 522  	      , t.entity_number
16:21:06 523  	      , t.funds_transfer_inst_number
16:21:06 524  	      , t.secure_ba_number
16:21:06 525  	      , t.settlement_currency
16:21:06 526  	      , t.fee_schedule
16:21:06 527  	      , t.mop
16:21:06 528  	      , t.interchange_qualification
16:21:06 529  	      , t.fee_type_description
16:21:06 530  	      , t.action_type
16:21:06 531  	      , t.unit_quantity
16:21:06 532  	      , t.unit_fee
16:21:06 533  	      , t.amount
16:21:06 534  	      , t.percentage_rate
16:21:06 535  	      , t.total_charge
16:21:06 536  	      , t.create_date
16:21:06 537  	      , t.created_by
16:21:06 538  	    FROM rcn_cpt_service_charge_detail t, ids
16:21:06 539  	    WHERE ids.id = t.id;
16:21:06 540  	  END;
16:21:06 541  ----
16:21:06 542  --------------------------------------------------------------------------------
16:21:06 543  ----
16:21:06 544  
16:21:06 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 546  	  BEGIN
16:21:06 547  	    OPEN OUT_CURSOR FOR
16:21:06 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 549  	    SELECT
16:21:06 550  		t.id rcn_cpt_excp_dtl_id
16:21:06 551  	      , t.rcn_ext_source_log_id
16:21:06 552  	      , t.record_type
16:21:06 553  	      , t.submission_date
16:21:06 554  	      , t.pid_number
16:21:06 555  	      , t.pid_short_name
16:21:06 556  	      , t.submission_number
16:21:06 557  	      , t.record_number
16:21:06 558  	      , t.entity_type
16:21:06 559  	      , t.entity_number
16:21:06 560  	      , t.presentment_currency
16:21:06 561  	      , t.merchant_order_number
16:21:06 562  	      , t.rdfi_number
16:21:06 563  	      , t.account_number
16:21:06 564  	      , t.expiration_date
16:21:06 565  	      , t.amount
16:21:06 566  	      , t.mop
16:21:06 567  	      , t.action_code
16:21:06 568  	      , t.auth_date
16:21:06 569  	      , t.auth_code
16:21:06 570  	      , t.auth_response_code
16:21:06 571  	      , t.trace_number
16:21:06 572  	      , t.consumer_country_code
16:21:06 573  	      , t.category
16:21:06 574  	      , t.mcc
16:21:06 575  	      , t.reject_code
16:21:06 576  	      , t.submission_status
16:21:06 577  	      , t.create_date
16:21:06 578  	      , t.created_by
16:21:06 579  	    FROM rcn_cpt_exception_detail t, ids
16:21:06 580  	    WHERE ids.id = t.id;
16:21:06 581  	  END;
16:21:06 582  ----
16:21:06 583  --------------------------------------------------------------------------------
16:21:06 584  ----
16:21:06 585  
16:21:06 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 587  	  BEGIN
16:21:06 588  	    OPEN OUT_CURSOR FOR
16:21:06 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 590  	      SELECT
16:21:06 591  		t.id rcn_cpt_deposit_dtl_id
16:21:06 592  	      , t.rcn_ext_source_log_id
16:21:06 593  	      , t.record_type
16:21:06 594  	      , t.submission_date
16:21:06 595  	      , t.pid_number
16:21:06 596  	      , t.pid_short_name
16:21:06 597  	      , t.submission_number
16:21:06 598  	      , t.record_number
16:21:06 599  	      , t.entity_type
16:21:06 600  	      , t.entity_number
16:21:06 601  	      , t.presentment_currency
16:21:06 602  	      , t.merchant_order_number
16:21:06 603  	      , t.rdfi_number
16:21:06 604  	      , t.account_number
16:21:06 605  	      , t.expiration_date
16:21:06 606  	      , t.amount
16:21:06 607  	      , t.mop
16:21:06 608  	      , t.action_code
16:21:06 609  	      , t.auth_date
16:21:06 610  	      , t.auth_code
16:21:06 611  	      , t.auth_response_code
16:21:06 612  	      , t.trace_number
16:21:06 613  	      , t.consumer_country_code
16:21:06 614  	      , t.mcc
16:21:06 615  	      , t.create_date
16:21:06 616  	      , t.created_by
16:21:06 617  	      , t.fee_code
16:21:06 618  	      , t.unit_fee
16:21:06 619  	      , t.percent_fee
16:21:06 620  	      , t.total_interchange_fee
16:21:06 621  	      , t.total_assessment_fee
16:21:06 622  	      , t.other_fee
16:21:06 623  	    FROM rcn_cpt_deposit_detail t, ids
16:21:06 624  	    WHERE ids.id = t.id;
16:21:06 625  	  END;
16:21:06 626  ----
16:21:06 627  --------------------------------------------------------------------------------
16:21:06 628  ----
16:21:06 629  
16:21:06 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 631  	  BEGIN
16:21:06 632  	    OPEN OUT_CURSOR FOR
16:21:06 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 634  	    SELECT
16:21:06 635  		t.id rcn_cpt_chgbk_act_dtl_id
16:21:06 636  	      , t.rcn_ext_source_log_id
16:21:06 637  	      , t.record_type
16:21:06 638  	      , t.entity_type
16:21:06 639  	      , t.entity_number
16:21:06 640  	      , t.chargeback_amount_issuer
16:21:06 641  	      , t.prev_partial_representment
16:21:06 642  	      , t.presentment_currency
16:21:06 643  	      , t.chargeback_category
16:21:06 644  	      , t.status_flag
16:21:06 645  	      , t.sequence_number
16:21:06 646  	      , t.merchant_order_number
16:21:06 647  	      , t.account_number
16:21:06 648  	      , t.reason_code
16:21:06 649  	      , t.transaction_date
16:21:06 650  	      , t.chargeback_date
16:21:06 651  	      , t.activity_date
16:21:06 652  	      , t.chargeback_amount_action
16:21:06 653  	      , t.fee_amount
16:21:06 654  	      , t.usage_code
16:21:06 655  	      , t.mop_code
16:21:06 656  	      , t.authorization_date
16:21:06 657  	      , t.chargeback_due_date
16:21:06 658  	      , t.create_date
16:21:06 659  	      , t.created_by
16:21:06 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
16:21:06 661  	    WHERE ids.id = t.id;
16:21:06 662  	  END;
16:21:06 663  ----
16:21:06 664  --------------------------------------------------------------------------------
16:21:06 665  ----
16:21:06 666  
16:21:06 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 668  	  BEGIN
16:21:06 669  	    OPEN OUT_CURSOR FOR
16:21:06 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 671  	    SELECT
16:21:06 672  		t.id rcn_pp_settlement_id
16:21:06 673  	      , t.rcn_ext_source_log_id
16:21:06 674  	      , t.transaction_id
16:21:06 675  	      , t.invoice_id
16:21:06 676  	      , t.pp_ref_id
16:21:06 677  	      , t.pp_ref_id_type
16:21:06 678  	      , t.trans_event_code
16:21:06 679  	      , t.trans_init_date
16:21:06 680  	      , t.trans_comp_date
16:21:06 681  	      , t.trans_deb_or_cred
16:21:06 682  	      , t.gross_trans_amount
16:21:06 683  	      , t.gross_trans_currency
16:21:06 684  	      , t.fee_deb_or_cred
16:21:06 685  	      , t.fee_amount
16:21:06 686  	      , t.fee_currency
16:21:06 687  	      , t.custom_field
16:21:06 688  	      , t.create_date
16:21:06 689  	      , t.created_by
16:21:06 690  	    FROM rcn_pp_settlement t, ids
16:21:06 691  	    WHERE ids.id = t.id;
16:21:06 692  	  END;
16:21:06 693  ----
16:21:06 694  --------------------------------------------------------------------------------
16:21:06 695  ----
16:21:06 696  
16:21:06 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 698  	  BEGIN
16:21:06 699  	    OPEN OUT_CURSOR FOR
16:21:06 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 701  	    SELECT
16:21:06 702  		t.id rcn_pp_dispute_id
16:21:06 703  	      , t.rcn_ext_source_log_id
16:21:06 704  	      , t.dispute_type
16:21:06 705  	      , t.claimant_name
16:21:06 706  	      , t.claimant_email
16:21:06 707  	      , t.transaction_id
16:21:06 708  	      , t.trans_date
16:21:06 709  	      , t.disputed_amount
16:21:06 710  	      , t.disputed_amount_currency
16:21:06 711  	      , t.dispute_reason
16:21:06 712  	      , t.dispute_filing_date
16:21:06 713  	      , t.dispute_status
16:21:06 714  	      , t.dispute_case_id
16:21:06 715  	      , t.invoice_id
16:21:06 716  	      , t.create_date
16:21:06 717  	      , t.created_by
16:21:06 718  	    FROM
16:21:06 719  	    rcn_pp_dispute t, ids
16:21:06 720  	    WHERE ids.id = t.id;
16:21:06 721  	  END;
16:21:06 722  ----
16:21:06 723  --------------------------------------------------------------------------------
16:21:06 724  ----
16:21:06 725  
16:21:06 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 727  	  BEGIN
16:21:06 728  	    OPEN OUT_CURSOR FOR
16:21:06 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 730  	    SELECT
16:21:06 731  		t.id rcn_pp_trans_dtl_id
16:21:06 732  	      , t.rcn_ext_source_log_id
16:21:06 733  	      , t.transaction_id
16:21:06 734  	      , t.invoice_id
16:21:06 735  	      , t.pp_ref_id
16:21:06 736  	      , t.trans_event_code
16:21:06 737  	      , t.trans_init_date
16:21:06 738  	      , t.trans_comp_date
16:21:06 739  	      , t.trans_deb_or_cred
16:21:06 740  	      , t.gross_trans_amount
16:21:06 741  	      , t.gross_trans_currency
16:21:06 742  	      , t.fee_deb_or_cred
16:21:06 743  	      , t.fee_amount
16:21:06 744  	      , t.fee_currency
16:21:06 745  	      , t.trans_status
16:21:06 746  	      , t.insurance_amount
16:21:06 747  	      , t.sales_tax_amount
16:21:06 748  	      , t.shipping_amount
16:21:06 749  	      , t.trans_subject
16:21:06 750  	      , t.trans_note
16:21:06 751  	      , t.payer_acct_id
16:21:06 752  	      , t.payer_addr_status
16:21:06 753  	      , t.item_name
16:21:06 754  	      , t.item_id
16:21:06 755  	      , t.option_1_name
16:21:06 756  	      , t.option_1_value
16:21:06 757  	      , t.option_2_name
16:21:06 758  	      , t.option_2_value
16:21:06 759  	      , t.auction_site
16:21:06 760  	      , t.auction_buyer_id
16:21:06 761  	      , t.auction_closing_date
16:21:06 762  	      , t.shipping_addr_line_1
16:21:06 763  	      , t.shipping_addr_line_2
16:21:06 764  	      , t.shipping_addr_city
16:21:06 765  	      , t.shipping_addr_state
16:21:06 766  	      , t.shipping_addr_zip
16:21:06 767  	      , t.shipping_addr_country
16:21:06 768  	      , t.custom_field
16:21:06 769  	      , t.create_date
16:21:06 770  	      , t.created_by
16:21:06 771  	    FROM rcn_pp_trans_detail t, ids
16:21:06 772  	    WHERE ids.id = t.id;
16:21:06 773  	  END;
16:21:06 774  ----
16:21:06 775  --------------------------------------------------------------------------------
16:21:06 776  ----
16:21:06 777  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 778  	  BEGIN
16:21:06 779  	    OPEN OUT_CURSOR FOR
16:21:06 780  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 781  	    SELECT
16:21:06 782  		t.ID PAYPAL_ID
16:21:06 783  	      , ACCOUNT_ID
16:21:06 784  	      , INSTRUMENT_NAME
16:21:06 785  	      , CREATE_DATE
16:21:06 786  	      , CREATED_BY
16:21:06 787  	      , UPDATE_DATE
16:21:06 788  	      , UPDATED_BY
16:21:06 789  	      , s.value PAYPAL_STATUS
16:21:06 790  	      , STATE
16:21:06 791  	      , CITY
16:21:06 792  	      , POSTAL_CODE
16:21:06 793  	      , COUNTRY
16:21:06 794  	      , EXPIRATION_DATE
16:21:06 795  	    FROM paypal t, paypal_status s, ids
16:21:06 796  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
16:21:06 797  	  END;
16:21:06 798  ----
16:21:06 799  --------------------------------------------------------------------------------
16:21:06 800  ----
16:21:06 801  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:21:06 802  	  BEGIN
16:21:06 803  	    OPEN OUT_CURSOR FOR
16:21:06 804  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
16:21:06 805  	    SELECT
16:21:06 806  	      a.id ADDRESS_ID,
16:21:06 807  	      address1,
16:21:06 808  	      address2,
16:21:06 809  	      city,
16:21:06 810  	      state,
16:21:06 811  	      postal_code,
16:21:06 812  	      country,
16:21:06 813  	      create_date,
16:21:06 814  	      created_by,
16:21:06 815  	      update_date,
16:21:06 816  	      updated_by
16:21:06 817  	    FROM address a, ids
16:21:06 818  	    WHERE ids.id = a.id;
16:21:06 819  	  END;
16:21:06 820  ----
16:21:06 821  --------------------------------------------------------------------------------
16:21:06 822  ----
16:21:06 823  /**/
16:21:06 824  END PROCS_REPORTING;
16:21:06 825  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.14
16:21:06 SQL> 
16:21:06 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
16:21:06   2  
16:21:06   3  ----
16:21:06   4  --------------------------------------------------------------------------------
16:21:06   5  ----
16:21:06   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
16:21:06   7  	      return line_item.amount%type
16:21:06   8  	  is
16:21:06   9  	      v_discount  line_item.amount%type := 0;
16:21:06  10  	  begin
16:21:06  11  	      for x in (
16:21:06  12  		  select d.id discount_id
16:21:06  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
16:21:06  14  		  from discount d
16:21:06  15  		      join discount_line_item dli	      on dli.discount_id = d.id
16:21:06  16  		      join discount_product_offering dop      on dop.discount_id = d.id
16:21:06  17  		      join product_offering po		      on po.id = dop.product_offering_id
16:21:06  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
16:21:06  19  		  where dli.line_item_id = in_line_item_id
16:21:06  20  	      )
16:21:06  21  	      loop
16:21:06  22  		  v_discount := v_discount + x.discount_amount;
16:21:06  23  	      end loop;
16:21:06  24  
16:21:06  25  	      return v_discount;
16:21:06  26  	  end;
16:21:06  27  ----
16:21:06  28  --------------------------------------------------------------------------------
16:21:06  29  ----
16:21:06  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
16:21:06  31  	      return line_item.amount%type
16:21:06  32  	  is
16:21:06  33  	      v_li_total  line_item.amount%type;
16:21:06  34  	      v_inv_total line_item.amount%type;
16:21:06  35  	      v_ref_total line_item.amount%type;
16:21:06  36  	  begin
16:21:06  37  
16:21:06  38  	      for li in (
16:21:06  39  		  select li.invoice_id, po.*
16:21:06  40  		  from line_item li
16:21:06  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
16:21:06  42  		  where li.id = in_line_item_id
16:21:06  43  	      )
16:21:06  44  	      loop
16:21:06  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
16:21:06  46  
16:21:06  47  		  v_inv_total := 0;
16:21:06  48  		  v_ref_total := 0;
16:21:06  49  		  for x in (
16:21:06  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
16:21:06  51  		      from charge c
16:21:06  52  		      where c.invoice_id = li.invoice_id
16:21:06  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
16:21:06  54  		  )
16:21:06  55  		  loop
16:21:06  56  		      if (x.type = 1) then
16:21:06  57  			  v_inv_total := x.total;
16:21:06  58  		      else
16:21:06  59  			  v_ref_total := x.total;
16:21:06  60  		      end if;
16:21:06  61  		  end loop;
16:21:06  62  
16:21:06  63  		  if (v_inv_total > 0) then
16:21:06  64  		      return (v_ref_total / v_inv_total) * v_li_total;
16:21:06  65  		  else
16:21:06  66  		      return 0;
16:21:06  67  		  end if;
16:21:06  68  
16:21:06  69  	      end loop;
16:21:06  70  
16:21:06  71  	      return 0;
16:21:06  72  	  end;
16:21:06  73  ----
16:21:06  74  --------------------------------------------------------------------------------
16:21:06  75  ----
16:21:06  76  	PROCEDURE EXTRACT_LINE_ITEMS(
16:21:06  77  	  in_lower_date_bound DATE,
16:21:06  78  	  in_upper_date_bound DATE,
16:21:06  79  	  out_lic_cur OUT sys_refcursor
16:21:06  80  	) AS
16:21:06  81  	BEGIN
16:21:06  82  	  OPEN out_lic_cur FOR
16:21:06  83  	  with liq as (
16:21:06  84  		SELECT li2.id
16:21:06  85  		      FROM
16:21:06  86  			   line_item li2
16:21:06  87  		      WHERE
16:21:06  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:21:06  89  		UNION
16:21:06  90  		SELECT li2.id
16:21:06  91  		      FROM
16:21:06  92  			   line_item li2
16:21:06  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
16:21:06  94  		      WHERE
16:21:06  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:21:06  96  		UNION
16:21:06  97  		SELECT li2.id
16:21:06  98  		      FROM
16:21:06  99  			   line_item li2
16:21:06 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
16:21:06 101  		      WHERE
16:21:06 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:21:06 103  		UNION
16:21:06 104  		SELECT li2.id
16:21:06 105  		      FROM
16:21:06 106  			   line_item li2
16:21:06 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
16:21:06 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
16:21:06 109  		      WHERE
16:21:06 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:21:06 111  		UNION
16:21:06 112  		SELECT li2.id
16:21:06 113  		      FROM
16:21:06 114  			   line_item li2
16:21:06 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
16:21:06 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
16:21:06 117  		      WHERE
16:21:06 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:21:06 119  		UNION
16:21:06 120  		SELECT li2.id
16:21:06 121  		      FROM
16:21:06 122  			   line_item li2
16:21:06 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
16:21:06 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
16:21:06 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
16:21:06 126  		      WHERE
16:21:06 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:21:06 128  	  )
16:21:06 129  	  SELECT distinct
16:21:06 130  	    line_item.id				 line_item_id
16:21:06 131  	  , product.name				 product_name
16:21:06 132  	  , product.unit_price				 product_unit_price
16:21:06 133  	  , product.production_cost			 product_production_cost
16:21:06 134  	  , offer_chain.name				 offer_chain_name
16:21:06 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
16:21:06 136  	  , gclicense.purchase_date			 subscription_start_date
16:21:06 137  	  , gclicense.start_date			 license_start_date
16:21:06 138  	  , gclicense.end_date				 license_end_date
16:21:06 139  	  , credit_card.city				 cc_city
16:21:06 140  	  , credit_card.state				 cc_state
16:21:06 141  	  , credit_card.postal_code			 cc_postal_code
16:21:06 142  	  , line_item.create_date			 line_item_purchase_date
16:21:06 143  	  , gclicense.account_regi_id
16:21:06 144  	  , product_offering.quantity			 purchase_quantity
16:21:06 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
16:21:06 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
16:21:06 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
16:21:06 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
16:21:06 149  	  , 0						 purchase_tax_amount
16:21:06 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
16:21:06 151  	  , invoice.id					 invoice_number
16:21:06 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
16:21:06 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
16:21:06 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
16:21:06 155  	  FROM
16:21:06 156  	       line_item
16:21:06 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
16:21:06 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
16:21:06 159  	  JOIN product				ON product.id	       = product_offering.product_id
16:21:06 160  	  join (
16:21:06 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
16:21:06 162  		      ,subscription.sct_id, license.start_date, license.end_date
16:21:06 163  		      ,account.group_id account_regi_id
16:21:06 164  		from	 license
16:21:06 165  		    join subscription ON subscription.id = license.subscription_id
16:21:06 166  		    join account      ON account.id	 = subscription.account_id
16:21:06 167  		union all
16:21:06 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
16:21:06 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
16:21:06 170  		      ,gc.purchaser_group_id account_regi_id
16:21:06 171  		from	 gift_certificate gc
16:21:06 172  		where
16:21:06 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:21:06 174  
16:21:06 175  	  ) gclicense
16:21:06 176  						on gclicense.invoice_id = invoice.id
16:21:06 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
16:21:06 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
16:21:06 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
16:21:06 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
16:21:06 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
16:21:06 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
16:21:06 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
16:21:06 184  	  join liq				on line_item.id 	= liq.id
16:21:06 185  	    ;
16:21:06 186  	END EXTRACT_LINE_ITEMS;
16:21:06 187  ----
16:21:06 188  --------------------------------------------------------------------------------
16:21:06 189  ----
16:21:06 190  END PROCS_REPORTING_1A;
16:21:06 191  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.06
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V5" AS
16:21:06   2  
16:21:06   3  FUNCTION GET_PRODUCT_NAMES(
16:21:06   4  	in_offer_id IN NUMBER
16:21:06   5  ) RETURN VARCHAR2 AS
16:21:06   6  var_result_names VARCHAR2(1024);
16:21:06   7  BEGIN
16:21:06   8  
16:21:06   9  	var_result_names := NULL;
16:21:06  10  
16:21:06  11  	FOR f_product IN (
16:21:06  12  	  SELECT
16:21:06  13  	    PRODUCT.NAME
16:21:06  14  	  FROM
16:21:06  15  	    PRODUCT
16:21:06  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
16:21:06  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:21:06  18  	  WHERE
16:21:06  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
16:21:06  20  	)
16:21:06  21  	LOOP
16:21:06  22  
16:21:06  23  	  IF var_result_names IS NULL THEN
16:21:06  24  	    var_result_names := f_product.NAME;
16:21:06  25  	  ELSE
16:21:06  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
16:21:06  27  	  END IF;
16:21:06  28  
16:21:06  29  	END LOOP;
16:21:06  30  
16:21:06  31  	RETURN var_result_names;
16:21:06  32  
16:21:06  33  END GET_PRODUCT_NAMES;
16:21:06  34  
16:21:06  35  /******************************************************************************/
16:21:06  36  
16:21:06  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
16:21:06  38  	in_start_date  IN DATE,
16:21:06  39  	in_end_date    IN DATE,
16:21:06  40  	out_result_set OUT SYS_REFCURSOR
16:21:06  41  ) AS
16:21:06  42  -- CONSTANTS
16:21:06  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:21:06  44  BEGIN
16:21:06  45  
16:21:06  46  	OPEN out_result_set FOR
16:21:06  47  	SELECT
16:21:06  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
16:21:06  49  	  "Offer_Id",
16:21:06  50  	  "New_Purchases_Num",
16:21:06  51  	  "Number_Of_renewals",
16:21:06  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
16:21:06  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
16:21:06  54  	FROM (
16:21:06  55  	  SELECT
16:21:06  56  	    "Offer_Id",
16:21:06  57  	    "Number_Of_renewals",
16:21:06  58  	    "New_Purchases_Num"
16:21:06  59  	  FROM (
16:21:06  60  	    SELECT
16:21:06  61  	      OFFER.ID as "Offer_Id",
16:21:06  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
16:21:06  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
16:21:06  64  	    FROM
16:21:06  65  	      OFFER
16:21:06  66  	  )
16:21:06  67  	  WHERE
16:21:06  68  	    "New_Purchases_Num" > 0
16:21:06  69  	    OR "Number_Of_renewals" > 0
16:21:06  70  	);
16:21:06  71  
16:21:06  72  	/*
16:21:06  73  	OPEN out_result_set FOR
16:21:06  74  	SELECT
16:21:06  75  	  "Product_Names",
16:21:06  76  	  "Offer_Id",
16:21:06  77  	  "New_Purchases_Num",
16:21:06  78  	  "Number_Of_renewals",
16:21:06  79  	  "Total_Dollar_Value",
16:21:06  80  	  "Unique_Purchasers_num"
16:21:06  81  	FROM (
16:21:06  82  	  SELECT
16:21:06  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
16:21:06  84  	    offer.id as "Offer_Id",
16:21:06  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
16:21:06  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
16:21:06  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
16:21:06  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
16:21:06  89  	  FROM
16:21:06  90  	    OFFER
16:21:06  91  	)
16:21:06  92  	WHERE
16:21:06  93  	  "New_Purchases_Num" > 0
16:21:06  94  	  OR "Number_Of_renewals" > 0
16:21:06  95  	  OR "Total_Dollar_Value" > 0
16:21:06  96  	  OR "Unique_Purchasers_num" > 0;
16:21:06  97  	*/
16:21:06  98  
16:21:06  99  END GET_FULL_FLASH_REPORT_PURCH;
16:21:06 100  
16:21:06 101  /******************************************************************************/
16:21:06 102  
16:21:06 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
16:21:06 104  	in_offer_id	       IN NUMBER,
16:21:06 105  	in_start_date	       IN DATE,
16:21:06 106  	in_end_date	       IN DATE,
16:21:06 107  	out_new_purchasers_num OUT NUMBER,
16:21:06 108  	out_renewals_num       OUT NUMBER,
16:21:06 109  	out_product_names      OUT VARCHAR2,
16:21:06 110  	out_total_dollar_value OUT NUMBER,
16:21:06 111  	out_unique_purchasers  OUT NUMBER
16:21:06 112  ) AS
16:21:06 113  -- CONSTANTS
16:21:06 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:21:06 115  BEGIN
16:21:06 116  
16:21:06 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
16:21:06 118  
16:21:06 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
16:21:06 120  	  in_offer_id,
16:21:06 121  	  in_start_date,
16:21:06 122  	  in_end_date
16:21:06 123  	);
16:21:06 124  
16:21:06 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
16:21:06 126  	  in_offer_id,
16:21:06 127  	  in_start_date,
16:21:06 128  	  in_end_date
16:21:06 129  	);
16:21:06 130  
16:21:06 131  	out_renewals_num := FLR_RENEWALS_NUM(
16:21:06 132  	  in_offer_id,
16:21:06 133  	  in_start_date,
16:21:06 134  	  in_end_date
16:21:06 135  	);
16:21:06 136  
16:21:06 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
16:21:06 138  	  in_offer_id,
16:21:06 139  	  in_start_date,
16:21:06 140  	  in_end_date
16:21:06 141  	);
16:21:06 142  
16:21:06 143  END GET_FLASH_REPORT_PURCHASES;
16:21:06 144  
16:21:06 145  /******************************************************************************/
16:21:06 146  
16:21:06 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
16:21:06 148  	in_offer_id	       IN NUMBER,
16:21:06 149  	in_start_date	       IN DATE,
16:21:06 150  	in_end_date	       IN DATE
16:21:06 151  ) RETURN NUMBER AS
16:21:06 152  -- CONSTANTS
16:21:06 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:21:06 154  -- VARIABLES
16:21:06 155  var_new_purchases_num NUMBER;
16:21:06 156  BEGIN
16:21:06 157  	SELECT
16:21:06 158  	  COUNT(LICENSE.ID)
16:21:06 159  	  into
16:21:06 160  	  var_new_purchases_num
16:21:06 161  	FROM
16:21:06 162  	  LICENSE
16:21:06 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
16:21:06 164  	WHERE
16:21:06 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
16:21:06 166  	  AND LICENSE.OFFER_ID = in_offer_id
16:21:06 167  	  AND CHARGE.CHARGE_AMOUNT > 0
16:21:06 168  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
16:21:06 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
16:21:06 170  
16:21:06 171  	RETURN var_new_purchases_num;
16:21:06 172  END FLR_NEW_PURCHASERS_NUM;
16:21:06 173  
16:21:06 174  /******************************************************************************/
16:21:06 175  
16:21:06 176  FUNCTION FLR_RENEWALS_NUM (
16:21:06 177  	in_offer_id	       IN NUMBER,
16:21:06 178  	in_start_date	       IN DATE,
16:21:06 179  	in_end_date	       IN DATE
16:21:06 180  ) RETURN NUMBER AS
16:21:06 181  -- CONSTANTS
16:21:06 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:21:06 183  -- VARIABLES
16:21:06 184  var_renewals_num NUMBER;
16:21:06 185  BEGIN
16:21:06 186  	SELECT
16:21:06 187  	  COUNT(LICENSE.ID)
16:21:06 188  	  into
16:21:06 189  	  var_renewals_num
16:21:06 190  	FROM
16:21:06 191  	  LICENSE
16:21:06 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
16:21:06 193  	WHERE
16:21:06 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
16:21:06 195  	  AND LICENSE.OFFER_ID = in_offer_id
16:21:06 196  	  AND CHARGE.CHARGE_AMOUNT > 0
16:21:06 197  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
16:21:06 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
16:21:06 199  
16:21:06 200  	RETURN var_renewals_num;
16:21:06 201  END FLR_RENEWALS_NUM;
16:21:06 202  
16:21:06 203  /******************************************************************************/
16:21:06 204  
16:21:06 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
16:21:06 206  	in_offer_id	       IN NUMBER,
16:21:06 207  	in_start_date	       IN DATE,
16:21:06 208  	in_end_date	       IN DATE
16:21:06 209  ) RETURN NUMBER AS
16:21:06 210  var_dollar_value NUMBER(10,2);
16:21:06 211  BEGIN
16:21:06 212  	SELECT
16:21:06 213  	  SUM(CHARGE.CHARGE_AMOUNT)
16:21:06 214  	  into
16:21:06 215  	  var_dollar_value
16:21:06 216  	FROM
16:21:06 217  	  LICENSE
16:21:06 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
16:21:06 219  	WHERE
16:21:06 220  	  LICENSE.OFFER_ID = in_offer_id
16:21:06 221  	  AND CHARGE.CHARGE_AMOUNT > 0
16:21:06 222  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
16:21:06 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
16:21:06 224  
16:21:06 225  	RETURN var_dollar_value;
16:21:06 226  END FLR_TOTAL_DOLLAR_VALUE;
16:21:06 227  
16:21:06 228  /******************************************************************************/
16:21:06 229  
16:21:06 230  FUNCTION FLR_UNIQUE_PURCHASERS (
16:21:06 231  	in_offer_id	       IN NUMBER,
16:21:06 232  	in_start_date	       IN DATE,
16:21:06 233  	in_end_date	       IN DATE
16:21:06 234  ) RETURN NUMBER AS
16:21:06 235  -- CONSTANTS
16:21:06 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:21:06 237  -- VARIABLES
16:21:06 238  var_unique_purchasers NUMBER;
16:21:06 239  BEGIN
16:21:06 240  	SELECT
16:21:06 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
16:21:06 242  	FROM
16:21:06 243  	  LICENSE
16:21:06 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
16:21:06 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 246  	WHERE
16:21:06 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
16:21:06 248  	  AND LICENSE.OFFER_ID = in_offer_id
16:21:06 249  	  AND CHARGE.CHARGE_AMOUNT > 0
16:21:06 250  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
16:21:06 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
16:21:06 252  
16:21:06 253  	RETURN var_unique_purchasers;
16:21:06 254  END;
16:21:06 255  
16:21:06 256  END PROCS_REPORTS_V5;
16:21:06 257  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V16" AS
16:21:06   2  
16:21:06   3  PROCEDURE INCREMENT_VERSION
16:21:06   4  /*
16:21:06   5  Throws exceptions:
16:21:06   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06   7  */
16:21:06   8  AS
16:21:06   9  BEGIN
16:21:06  10  
16:21:06  11  	UPDATE SYS_VERSION SET version=version+1;
16:21:06  12  
16:21:06  13  END INCREMENT_VERSION;
16:21:06  14  
16:21:06  15  /*************************************************************/
16:21:06  16  
16:21:06  17  PROCEDURE CHECK_VERSION(
16:21:06  18  	  in_vers    IN NUMBER,
16:21:06  19  	  out_result OUT NUMBER
16:21:06  20  ) AS
16:21:06  21  	current_version NUMBER;
16:21:06  22  BEGIN
16:21:06  23  	SELECT version INTO current_version FROM SYS_VERSION;
16:21:06  24  	IF(current_version != in_vers) THEN
16:21:06  25  	  out_result := 1;
16:21:06  26  	ELSE
16:21:06  27  	  out_result := 0;
16:21:06  28  	END IF;
16:21:06  29  END CHECK_VERSION;
16:21:06  30  
16:21:06  31  END PROCS_SYSTEM_V16;
16:21:06  32  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V16" AS
16:21:06   2  
16:21:06   3  PROCEDURE ADD_TAX (
16:21:06   4  	in_tax_type_id		 IN NUMBER,
16:21:06   5  	in_calculated_amount	 IN NUMBER,
16:21:06   6  	in_created_by		 IN VARCHAR2,
16:21:06   7  	in_line_item_id 	 IN NUMBER,
16:21:06   8  	in_effective_rate	 IN VARCHAR2,
16:21:06   9  	in_taxable_amount	 IN NUMBER,
16:21:06  10  	in_tax_rule_id		 IN NUMBER,
16:21:06  11  	in_jurisdiction_level_id IN NUMBER,
16:21:06  12  	in_jurisdiction_name	 IN VARCHAR2,
16:21:06  13  	in_jurisdiction_id	 IN VARCHAR2,
16:21:06  14  	in_ext_tax_type 	 IN VARCHAR2,
16:21:06  15  	in_ext_result		 IN VARCHAR2,
16:21:06  16  	in_imposition_type	 IN VARCHAR2,
16:21:06  17  	in_imposition		 IN VARCHAR2
16:21:06  18  ) AS
16:21:06  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
16:21:06  20  -- VARIABLES
16:21:06  21  var_new_tax_id	NUMBER;
16:21:06  22  temp_line_item_id NUMBER;
16:21:06  23  -- EXCEPTIONS
16:21:06  24  BAD_LINE_ITEM_ID EXCEPTION;
16:21:06  25  BEGIN
16:21:06  26  
16:21:06  27  	BEGIN
16:21:06  28  	  SELECT
16:21:06  29  	    LINE_ITEM.ID into temp_line_item_id
16:21:06  30  	  FROM
16:21:06  31  	    LINE_ITEM
16:21:06  32  	  WHERE
16:21:06  33  	    LINE_ITEM.ID = in_line_item_id;
16:21:06  34  	  EXCEPTION
16:21:06  35  	    WHEN NO_DATA_FOUND THEN
16:21:06  36  	      RAISE BAD_LINE_ITEM_ID;
16:21:06  37  	END;
16:21:06  38  
16:21:06  39  	var_new_tax_id := NULL;
16:21:06  40  
16:21:06  41  	PROCS_TAXES_CRU_V16.CREATE_TAX(
16:21:06  42  	  var_new_tax_id,
16:21:06  43  	  in_tax_type_id,
16:21:06  44  	  in_calculated_amount,
16:21:06  45  	  in_created_by,
16:21:06  46  	  in_line_item_id,
16:21:06  47  	  in_effective_rate,
16:21:06  48  	  in_taxable_amount,
16:21:06  49  	  in_tax_rule_id,
16:21:06  50  	  in_jurisdiction_level_id,
16:21:06  51  	  in_jurisdiction_name,
16:21:06  52  	  in_jurisdiction_id,
16:21:06  53  	  in_ext_tax_type,
16:21:06  54  	  in_ext_result,
16:21:06  55  	  in_imposition_type,
16:21:06  56  	  in_imposition
16:21:06  57  	);
16:21:06  58  
16:21:06  59  EXCEPTION
16:21:06  60  WHEN BAD_LINE_ITEM_ID THEN
16:21:06  61  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06  62  	  SPROC_NAME, 'No such line item');
16:21:06  63  WHEN OTHERS THEN
16:21:06  64  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06  66  END ADD_TAX;
16:21:06  67  
16:21:06  68  /******************************************************************************/
16:21:06  69  
16:21:06  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
16:21:06  71  	in_country_code IN CHAR,
16:21:06  72  	in_check_date IN DATE,
16:21:06  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V16.FALSE
16:21:06  74  ) AS
16:21:06  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
16:21:06  76  -- VARIABLES
16:21:06  77  var_countries_count NUMBER;
16:21:06  78  var_result	  NUMBER;
16:21:06  79  BEGIN
16:21:06  80  
16:21:06  81  	SELECT
16:21:06  82  	  COUNT(1) into var_countries_count
16:21:06  83  	FROM
16:21:06  84  	  TAX_COUNTRY_EXCLUSION_LIST
16:21:06  85  	WHERE
16:21:06  86  	  country_code = in_country_code
16:21:06  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
16:21:06  88  	  AND (
16:21:06  89  	    end_date is null
16:21:06  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
16:21:06  91  	  );
16:21:06  92  
16:21:06  93  	IF var_countries_count > 1 THEN
16:21:06  94  	  -- [REVU] Should not happen. DB structure error
16:21:06  95  	  var_result := GLOBAL_CONSTANTS_V16.TRUE;
16:21:06  96  	ELSIF var_countries_count = 1 THEN
16:21:06  97  	  var_result := GLOBAL_CONSTANTS_V16.TRUE;
16:21:06  98  	ELSE
16:21:06  99  	  var_result := GLOBAL_CONSTANTS_V16.FALSE;
16:21:06 100  	END IF;
16:21:06 101  
16:21:06 102  	out_is_founded := var_result;
16:21:06 103  
16:21:06 104  EXCEPTION
16:21:06 105  WHEN OTHERS THEN
16:21:06 106  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 108  END CHECK_COUNTRY_FOR_EXCLUSION;
16:21:06 109  
16:21:06 110  /******************************************************************************/
16:21:06 111  
16:21:06 112  PROCEDURE GET_TAX_CATEGORY (
16:21:06 113  	in_tax_category_id IN NUMBER,
16:21:06 114  	out_result_set	   OUT SYS_REFCURSOR
16:21:06 115  ) AS
16:21:06 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
16:21:06 117  BEGIN
16:21:06 118  
16:21:06 119  	OPEN out_result_set FOR
16:21:06 120  	SELECT
16:21:06 121  	  ID,
16:21:06 122  	  CODE,
16:21:06 123  	  DESCRIPTION
16:21:06 124  	FROM
16:21:06 125  	  TAX_CATEGORY
16:21:06 126  	WHERE
16:21:06 127  	  ID = in_tax_category_id;
16:21:06 128  
16:21:06 129  EXCEPTION
16:21:06 130  WHEN OTHERS THEN
16:21:06 131  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 133  END GET_TAX_CATEGORY;
16:21:06 134  
16:21:06 135  END PROCS_TAXES_V16;
16:21:06 136  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.07
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V16" AS
16:21:06   2  
16:21:06   3  PROCEDURE CREATE_TRANSACTION (
16:21:06   4  /*
16:21:06   5  Throws exceptions:
16:21:06   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06   8  */
16:21:06   9  	in_transaction_id  IN NUMBER,
16:21:06  10  	in_status_id	   IN NUMBER,
16:21:06  11  	in_amount	   IN NUMBER,
16:21:06  12  	in_created_by	   IN VARCHAR2,
16:21:06  13  	in_order_id	   IN VARCHAR2,
16:21:06  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE,
16:21:06  15  	out_transaction_id OUT NUMBER
16:21:06  16  ) AS
16:21:06  17  -- VARIABLES
16:21:06  18  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
16:21:06  19  var_transaction_count  NUMBER;
16:21:06  20  -- EXCEPTIONS
16:21:06  21  BAD_TRANSACTION_ID     EXCEPTION;
16:21:06  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06  23  BEGIN
16:21:06  24  
16:21:06  25  	IF in_transaction_id IS NOT NULL THEN
16:21:06  26  	  SELECT
16:21:06  27  	    COUNT(*) into var_transaction_count
16:21:06  28  	  FROM
16:21:06  29  	    TRANSACTION
16:21:06  30  	  WHERE
16:21:06  31  	    TRANSACTION.ID = in_transaction_id;
16:21:06  32  	  IF var_transaction_count > 0 THEN
16:21:06  33  	    RAISE BAD_TRANSACTION_ID;
16:21:06  34  	  END IF;
16:21:06  35  	END IF;
16:21:06  36  
16:21:06  37  	PROCS_TRANSACTION_CRU_V16.CREATE_TRANSACTION(
16:21:06  38  	  out_transaction_id	   => out_transaction_id,
16:21:06  39  	  in_transaction_id	   => in_transaction_id,
16:21:06  40  	  in_transaction_status_id => in_status_id,
16:21:06  41  	  in_transaction_amount    => in_amount,
16:21:06  42  	  in_created_by 	   => in_created_by,
16:21:06  43  	  in_order_id		   => in_order_id,
16:21:06  44  	  in_is_refund		   => in_is_refund
16:21:06  45  	);
16:21:06  46  
16:21:06  47  EXCEPTION
16:21:06  48  WHEN BAD_TRANSACTION_ID THEN
16:21:06  49  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:06  50  	  SPROC_NAME, 'Transaction with given id already exists');
16:21:06  51  WHEN OTHERS THEN
16:21:06  52  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06  53  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06  54  END CREATE_TRANSACTION;
16:21:06  55  
16:21:06  56  /******************************************************************************/
16:21:06  57  
16:21:06  58  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
16:21:06  59  /*
16:21:06  60  Throws exceptions:
16:21:06  61  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06  63  */
16:21:06  64  	in_transaction_id	   IN NUMBER,
16:21:06  65  	in_trans_attempt_status    IN NUMBER,
16:21:06  66  	in_external_status_code    IN VARCHAR2,
16:21:06  67  	in_external_status_message IN VARCHAR2,
16:21:06  68  	in_created_by		   IN VARCHAR2,
16:21:06  69  	in_ext_transaction_id	   IN VARCHAR2,
16:21:06  70  	out_transaction_attempt_id OUT NUMBER
16:21:06  71  ) AS
16:21:06  72  -- VARIABLES
16:21:06  73  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
16:21:06  74  var_transaction_create_date DATE;
16:21:06  75  var_transaction_attempt_id  NUMBER;
16:21:06  76  
16:21:06  77  -- EXCEPTIONS
16:21:06  78  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
16:21:06  79  BAD_TRANSACTION_ID       EXCEPTION;
16:21:06  80  BEGIN
16:21:06  81  
16:21:06  82  	-- Check that transaction exists
16:21:06  83  	BEGIN
16:21:06  84  	  SELECT
16:21:06  85  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
16:21:06  86  	  FROM
16:21:06  87  	    TRANSACTION
16:21:06  88  	  WHERE
16:21:06  89  	    TRANSACTION.ID = in_transaction_id;
16:21:06  90  	  EXCEPTION
16:21:06  91  	    WHEN OTHERS THEN
16:21:06  92  	      RAISE BAD_TRANSACTION_ID;
16:21:06  93  	END;
16:21:06  94  
16:21:06  95  	-- Check that transaction status is correct
16:21:06  96  	IF in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
16:21:06  97  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
16:21:06  98  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
16:21:06  99  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
16:21:06 100  	END IF;
16:21:06 101  
16:21:06 102  	var_transaction_attempt_id := NULL;
16:21:06 103  	PROCS_TRANSACTION_CRU_V16.CREATE_TRANSACTION_ATTEMPT(
16:21:06 104  	  inout_transaction_attempt_id => var_transaction_attempt_id,
16:21:06 105  	  in_transaction_id	       => in_transaction_id,
16:21:06 106  	  in_external_status_code      => in_external_status_code,
16:21:06 107  	  in_external_status_message   => in_external_status_message,
16:21:06 108  	  in_created_by 	       => in_created_by,
16:21:06 109  	  in_external_transaction_id   => in_ext_transaction_id,
16:21:06 110  	  in_transaction_start_time    => var_transaction_create_date,
16:21:06 111  	  in_status_id		       => in_trans_attempt_status
16:21:06 112  	);
16:21:06 113  
16:21:06 114  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
16:21:06 115  	  in_transaction_id => in_transaction_id,
16:21:06 116  	  in_updated_by     => in_created_by
16:21:06 117  	);
16:21:06 118  
16:21:06 119  	out_transaction_attempt_id := var_transaction_attempt_id;
16:21:06 120  
16:21:06 121  EXCEPTION
16:21:06 122  WHEN BAD_TRANSACTION_ID THEN
16:21:06 123  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 124  	  SPROC_NAME, 'No such transaction');
16:21:06 125  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
16:21:06 126  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 127  	  SPROC_NAME, 'Bad transaction attempt status');
16:21:06 128  WHEN OTHERS THEN
16:21:06 129  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 130  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 131  END CREATE_TRANSACTION_ATTEMPT;
16:21:06 132  
16:21:06 133  /******************************************************************************/
16:21:06 134  
16:21:06 135  PROCEDURE UPDATE_TRANSACTION_STATUS (
16:21:06 136  /*
16:21:06 137  Throws exceptions:
16:21:06 138  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 139  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 140  */
16:21:06 141  	in_transaction_id	 IN NUMBER,
16:21:06 142  	in_updated_by		 IN VARCHAR2,
16:21:06 143  	in_transaction_status_id IN NUMBER
16:21:06 144  ) AS
16:21:06 145  -- VARIABLES
16:21:06 146  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
16:21:06 147  temp_transaction_id NUMBER;
16:21:06 148  
16:21:06 149  -- EXCEPTIONS
16:21:06 150  BAD_TRANSACTION_ID     EXCEPTION;
16:21:06 151  BAD_TRANSACTION_STATUS EXCEPTION;
16:21:06 152  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06 153  BEGIN
16:21:06 154  
16:21:06 155  	-- Check that transaction exists
16:21:06 156  	BEGIN
16:21:06 157  	  SELECT
16:21:06 158  	    TRANSACTION.ID into temp_transaction_id
16:21:06 159  	  FROM
16:21:06 160  	    TRANSACTION
16:21:06 161  	  WHERE
16:21:06 162  	    TRANSACTION.ID = in_transaction_id;
16:21:06 163  	  EXCEPTION
16:21:06 164  	    WHEN OTHERS THEN
16:21:06 165  	      RAISE BAD_TRANSACTION_ID;
16:21:06 166  	END;
16:21:06 167  
16:21:06 168  	-- Check that transaction status is correct
16:21:06 169  	IF    in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_PENDING
16:21:06 170  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
16:21:06 171  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_CHARGEBACK
16:21:06 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_DECLINED THEN
16:21:06 173  	  RAISE BAD_TRANSACTION_STATUS;
16:21:06 174  	END IF;
16:21:06 175  
16:21:06 176  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
16:21:06 177  	  in_transaction_id	   => in_transaction_id,
16:21:06 178  	  in_updated_by 	   => in_updated_by,
16:21:06 179  	  in_transaction_status_id => in_transaction_status_id
16:21:06 180  	);
16:21:06 181  
16:21:06 182  EXCEPTION
16:21:06 183  WHEN BAD_TRANSACTION_ID THEN
16:21:06 184  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 185  	  SPROC_NAME, 'No such transaction');
16:21:06 186  WHEN BAD_TRANSACTION_STATUS THEN
16:21:06 187  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 188  	  SPROC_NAME, 'Bad transaction status');
16:21:06 189  WHEN OTHERS THEN
16:21:06 190  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 191  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 192  END UPDATE_TRANSACTION_STATUS;
16:21:06 193  
16:21:06 194  /******************************************************************************/
16:21:06 195  
16:21:06 196  PROCEDURE UPDATE_TRANSACTION_SETTLED (
16:21:06 197  /*
16:21:06 198  Throws exceptions:
16:21:06 199  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 200  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 201  */
16:21:06 202  	in_transaction_id	 IN NUMBER,
16:21:06 203  	in_updated_by		 IN VARCHAR2,
16:21:06 204  	in_is_settled		 IN NUMBER
16:21:06 205  ) AS
16:21:06 206  -- VARIABLES
16:21:06 207  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
16:21:06 208  temp_transaction_id NUMBER;
16:21:06 209  
16:21:06 210  -- EXCEPTIONS
16:21:06 211  BAD_TRANSACTION_ID     EXCEPTION;
16:21:06 212  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06 213  BEGIN
16:21:06 214  
16:21:06 215  	-- Check that transaction exists
16:21:06 216  	BEGIN
16:21:06 217  	  SELECT
16:21:06 218  	    TRANSACTION.ID into temp_transaction_id
16:21:06 219  	  FROM
16:21:06 220  	    TRANSACTION
16:21:06 221  	  WHERE
16:21:06 222  	    TRANSACTION.ID = in_transaction_id;
16:21:06 223  	  EXCEPTION
16:21:06 224  	    WHEN OTHERS THEN
16:21:06 225  	      RAISE BAD_TRANSACTION_ID;
16:21:06 226  	END;
16:21:06 227  
16:21:06 228  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
16:21:06 229  	  in_transaction_id	   => in_transaction_id,
16:21:06 230  	  in_updated_by 	   => in_updated_by,
16:21:06 231  	  in_is_settled 	   => in_is_settled
16:21:06 232  	);
16:21:06 233  
16:21:06 234  EXCEPTION
16:21:06 235  WHEN BAD_TRANSACTION_ID THEN
16:21:06 236  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 237  	  SPROC_NAME, 'No such transaction');
16:21:06 238  WHEN OTHERS THEN
16:21:06 239  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 241  END UPDATE_TRANSACTION_SETTLED;
16:21:06 242  
16:21:06 243  /******************************************************************************/
16:21:06 244  
16:21:06 245  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
16:21:06 246  /*
16:21:06 247  Throws exceptions:
16:21:06 248  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 249  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 250  */
16:21:06 251  	in_transaction_attempt_id IN NUMBER,
16:21:06 252  	in_updated_by		  IN VARCHAR2
16:21:06 253  ) AS
16:21:06 254  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
16:21:06 255  -- VARIABLES
16:21:06 256  var_transaction_id NUMBER;
16:21:06 257  -- EXCEPTION
16:21:06 258  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
16:21:06 259  BEGIN
16:21:06 260  
16:21:06 261  	BEGIN
16:21:06 262  	  SELECT
16:21:06 263  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
16:21:06 264  	  FROM
16:21:06 265  	    TRANSACTION_ATTEMPT
16:21:06 266  	  WHERE
16:21:06 267  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
16:21:06 268  	  EXCEPTION
16:21:06 269  	    WHEN NO_DATA_FOUND THEN
16:21:06 270  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
16:21:06 271  	END;
16:21:06 272  
16:21:06 273  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
16:21:06 274  	  in_transaction_id => var_transaction_id,
16:21:06 275  	  in_updated_by     => in_updated_by
16:21:06 276  	);
16:21:06 277  
16:21:06 278  EXCEPTION
16:21:06 279  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
16:21:06 280  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 281  	  SPROC_NAME, 'No such transaction attempt');
16:21:06 282  WHEN OTHERS THEN
16:21:06 283  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 284  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 285  END UPDATE_TRNSCTN_ATTEMPT_TIME;
16:21:06 286  
16:21:06 287  /******************************************************************************/
16:21:06 288  
16:21:06 289  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
16:21:06 290  /*
16:21:06 291  Throws exceptions:
16:21:06 292  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 293  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 294  */
16:21:06 295  	in_transaction_attempt_id     IN NUMBER,
16:21:06 296  	in_transaction_attempt_status IN NUMBER
16:21:06 297  ) AS
16:21:06 298  -- VARIABLES
16:21:06 299  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
16:21:06 300  temp_transaction_attempt_id NUMBER;
16:21:06 301  
16:21:06 302  -- EXCEPTION
16:21:06 303  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
16:21:06 304  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
16:21:06 305  BEGIN
16:21:06 306  
16:21:06 307  	-- Check that transaction attempt exists
16:21:06 308  	BEGIN
16:21:06 309  	  SELECT
16:21:06 310  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
16:21:06 311  	  FROM
16:21:06 312  	    TRANSACTION_ATTEMPT
16:21:06 313  	  WHERE
16:21:06 314  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
16:21:06 315  	  EXCEPTION
16:21:06 316  	    WHEN NO_DATA_FOUND THEN
16:21:06 317  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
16:21:06 318  	END;
16:21:06 319  
16:21:06 320  	-- Check that transaction attempt is correct
16:21:06 321  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
16:21:06 322  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
16:21:06 323  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
16:21:06 324  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
16:21:06 325  	END IF;
16:21:06 326  
16:21:06 327  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ATTEMPT(
16:21:06 328  	  in_transaction_attempt_id => in_transaction_attempt_id,
16:21:06 329  	  in_status_id		    => in_transaction_attempt_status
16:21:06 330  	);
16:21:06 331  
16:21:06 332  EXCEPTION
16:21:06 333  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
16:21:06 334  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 335  	  SPROC_NAME, 'No such transaction attempt');
16:21:06 336  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
16:21:06 337  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 338  	  SPROC_NAME, 'Bad transaction attempt status');
16:21:06 339  WHEN OTHERS THEN
16:21:06 340  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 341  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 342  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
16:21:06 343  
16:21:06 344  /******************************************************************************/
16:21:06 345  
16:21:06 346  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
16:21:06 347  /*
16:21:06 348  Throws exceptions:
16:21:06 349  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 350  */
16:21:06 351  	in_transaction_id	      IN NUMBER,
16:21:06 352  	in_transaction_attempt_status IN NUMBER,
16:21:06 353  	out_result_set		      OUT SYS_REFCURSOR
16:21:06 354  ) AS
16:21:06 355  -- VARIABLES
16:21:06 356  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
16:21:06 357  temp_transaction_id NUMBER;
16:21:06 358  -- EXCEPTIONS
16:21:06 359  BAD_TRANSACTION_ID       EXCEPTION;
16:21:06 360  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
16:21:06 361  BEGIN
16:21:06 362  
16:21:06 363  	-- Check that transaction exists
16:21:06 364  	BEGIN
16:21:06 365  	  SELECT
16:21:06 366  	    TRANSACTION.ID into temp_transaction_id
16:21:06 367  	  FROM
16:21:06 368  	    TRANSACTION
16:21:06 369  	  WHERE
16:21:06 370  	    TRANSACTION.ID = in_transaction_id;
16:21:06 371  	  EXCEPTION
16:21:06 372  	    WHEN OTHERS THEN
16:21:06 373  	      RAISE BAD_TRANSACTION_ID;
16:21:06 374  	END;
16:21:06 375  
16:21:06 376  	-- Check that transaction attempt status is correct
16:21:06 377  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
16:21:06 378  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
16:21:06 379  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
16:21:06 380  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
16:21:06 381  	END IF;
16:21:06 382  
16:21:06 383  	OPEN out_result_set FOR
16:21:06 384  	SELECT
16:21:06 385  	  TRANSACTION_ATTEMPT.ID,
16:21:06 386  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
16:21:06 387  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
16:21:06 388  	  TRANSACTION_ATTEMPT.CREATE_DATE,
16:21:06 389  	  TRANSACTION_ATTEMPT.CREATED_BY,
16:21:06 390  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
16:21:06 391  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
16:21:06 392  	  TRANSACTION.TRANSACTION_AMOUNT,
16:21:06 393  	  TRANSACTION.ID as "TRANSACTION_ID",
16:21:06 394  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
16:21:06 395  	FROM
16:21:06 396  	  TRANSACTION_ATTEMPT
16:21:06 397  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
16:21:06 398  	WHERE
16:21:06 399  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
16:21:06 400  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
16:21:06 401  
16:21:06 402  EXCEPTION
16:21:06 403  WHEN BAD_TRANSACTION_ID THEN
16:21:06 404  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 405  	  SPROC_NAME, 'No such transaction');
16:21:06 406  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
16:21:06 407  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 408  	  SPROC_NAME, 'Bad transaction attempt status');
16:21:06 409  WHEN OTHERS THEN
16:21:06 410  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 412  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
16:21:06 413  
16:21:06 414  /******************************************************************************/
16:21:06 415  
16:21:06 416  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
16:21:06 417  /*
16:21:06 418  Throws exceptions:
16:21:06 419  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 420  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 421  */
16:21:06 422  	in_transaction_attempt_id IN NUMBER,
16:21:06 423  	in_ext_status_code	  IN VARCHAR2,
16:21:06 424  	in_ext_status_message	  IN VARCHAR2,
16:21:06 425  	in_ext_transaction_id	  IN VARCHAR2
16:21:06 426  ) AS
16:21:06 427  -- VARIABLES
16:21:06 428  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
16:21:06 429  temp_trans_attempt_count NUMBER;
16:21:06 430  -- EXCEPTIONS
16:21:06 431  BAD_ATTEMPT_ID EXCEPTION;
16:21:06 432  BEGIN
16:21:06 433  
16:21:06 434  	SELECT
16:21:06 435  	  COUNT(*) into temp_trans_attempt_count
16:21:06 436  	FROM
16:21:06 437  	  TRANSACTION_ATTEMPT
16:21:06 438  	WHERE
16:21:06 439  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
16:21:06 440  
16:21:06 441  	IF temp_trans_attempt_count = 0 THEN
16:21:06 442  	  RAISE BAD_ATTEMPT_ID;
16:21:06 443  	END IF;
16:21:06 444  
16:21:06 445  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ATTEMPT(
16:21:06 446  	  in_transaction_attempt_id  => in_transaction_attempt_id,
16:21:06 447  	  in_external_status_code    => in_ext_status_code,
16:21:06 448  	  in_external_status_message => in_ext_status_message,
16:21:06 449  	  in_external_transaction_id => in_ext_transaction_id
16:21:06 450  	);
16:21:06 451  
16:21:06 452  EXCEPTION
16:21:06 453  WHEN BAD_ATTEMPT_ID THEN
16:21:06 454  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 455  	  SPROC_NAME, 'No such attempt');
16:21:06 456  WHEN OTHERS THEN
16:21:06 457  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 458  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 459  END UPDATE_TRANSACTION_ATTEMPT_INF;
16:21:06 460  
16:21:06 461  /******************************************************************************/
16:21:06 462  
16:21:06 463  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
16:21:06 464  /*
16:21:06 465  Throws exceptions:
16:21:06 466  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 467  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 468  */
16:21:06 469  	in_transaction_id IN  NUMBER,
16:21:06 470  	out_attempts_num  OUT NUMBER
16:21:06 471  ) AS
16:21:06 472  -- VARIABLES
16:21:06 473  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
16:21:06 474  temp_transaction_count NUMBER;
16:21:06 475  
16:21:06 476  -- EXCEPTIONS
16:21:06 477  BAD_TRANSACTION_ID EXCEPTION;
16:21:06 478  BEGIN
16:21:06 479  
16:21:06 480  	SELECT
16:21:06 481  	  COUNT(*) into temp_transaction_count
16:21:06 482  	FROM
16:21:06 483  	  TRANSACTION
16:21:06 484  	WHERE
16:21:06 485  	  TRANSACTION.ID = in_transaction_id;
16:21:06 486  
16:21:06 487  	IF temp_transaction_count = 0 THEN
16:21:06 488  	  RAISE BAD_TRANSACTION_ID;
16:21:06 489  	END IF;
16:21:06 490  
16:21:06 491  	SELECT
16:21:06 492  	  COUNT(*) into out_attempts_num
16:21:06 493  	FROM
16:21:06 494  	  TRANSACTION_ATTEMPT
16:21:06 495  	WHERE
16:21:06 496  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
16:21:06 497  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED;
16:21:06 498  
16:21:06 499  EXCEPTION
16:21:06 500  WHEN BAD_TRANSACTION_ID THEN
16:21:06 501  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 502  	  SPROC_NAME, 'No such transaction');
16:21:06 503  WHEN OTHERS THEN
16:21:06 504  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 505  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 506  END GET_FAILED_ATTEMPTS_NUMBER;
16:21:06 507  /******************************************************************************/
16:21:06 508  
16:21:06 509  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
16:21:06 510  /*
16:21:06 511  Throws exceptions:
16:21:06 512  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 513  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 514  */
16:21:06 515  	in_transaction_id IN  NUMBER,
16:21:06 516  	out_is_successfull  OUT NUMBER
16:21:06 517  ) AS
16:21:06 518  -- VARIABLES
16:21:06 519  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
16:21:06 520  temp_transaction_count NUMBER;
16:21:06 521  
16:21:06 522  -- EXCEPTIONS
16:21:06 523  BAD_TRANSACTION_ID EXCEPTION;
16:21:06 524  BEGIN
16:21:06 525  
16:21:06 526  	SELECT
16:21:06 527  	  COUNT(*) into temp_transaction_count
16:21:06 528  	FROM
16:21:06 529  	  TRANSACTION
16:21:06 530  	WHERE
16:21:06 531  	  TRANSACTION.ID = in_transaction_id;
16:21:06 532  
16:21:06 533  	IF temp_transaction_count = 0 THEN
16:21:06 534  	  RAISE BAD_TRANSACTION_ID;
16:21:06 535  	END IF;
16:21:06 536  
16:21:06 537  	SELECT
16:21:06 538  	  COUNT(*) into out_is_successfull
16:21:06 539  	FROM
16:21:06 540  	  TRANSACTION_ATTEMPT
16:21:06 541  	WHERE
16:21:06 542  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
16:21:06 543  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS;
16:21:06 544  
16:21:06 545  EXCEPTION
16:21:06 546  WHEN BAD_TRANSACTION_ID THEN
16:21:06 547  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 548  	  SPROC_NAME, 'No such transaction');
16:21:06 549  WHEN OTHERS THEN
16:21:06 550  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 551  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 552  END IS_TRANSACTION_SUCCESSFULL;
16:21:06 553  /******************************************************************************/
16:21:06 554  
16:21:06 555  PROCEDURE GET_TRANSACTION_AMOUNT (
16:21:06 556  /*
16:21:06 557  Throws exceptions:
16:21:06 558  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 559  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 560  */
16:21:06 561  	in_transaction_id      IN  NUMBER,
16:21:06 562  	out_transaction_amount OUT NUMBER
16:21:06 563  ) AS
16:21:06 564  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
16:21:06 565  BEGIN
16:21:06 566  
16:21:06 567  	SELECT
16:21:06 568  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
16:21:06 569  	FROM
16:21:06 570  	  TRANSACTION
16:21:06 571  	WHERE
16:21:06 572  	  TRANSACTION.ID = in_transaction_id;
16:21:06 573  
16:21:06 574  EXCEPTION
16:21:06 575  WHEN NO_DATA_FOUND THEN
16:21:06 576  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 577  	  SPROC_NAME, 'No such transaction');
16:21:06 578  WHEN OTHERS THEN
16:21:06 579  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 580  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 581  END GET_TRANSACTION_AMOUNT;
16:21:06 582  
16:21:06 583  /******************************************************************************/
16:21:06 584  
16:21:06 585  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
16:21:06 586  /*
16:21:06 587  Throws exceptions:
16:21:06 588  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 589  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 590  */
16:21:06 591  	in_charge_id   IN  NUMBER,
16:21:06 592  	out_result_set OUT SYS_REFCURSOR
16:21:06 593  ) AS
16:21:06 594  -- VARIABLES
16:21:06 595  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
16:21:06 596  temp_charge_id NUMBER;
16:21:06 597  -- EXCEPTIONS
16:21:06 598  BAD_CHARGE_ID EXCEPTION;
16:21:06 599  BEGIN
16:21:06 600  
16:21:06 601  	BEGIN
16:21:06 602  	  SELECT
16:21:06 603  	    CHARGE.ID into temp_charge_id
16:21:06 604  	  FROM
16:21:06 605  	    CHARGE
16:21:06 606  	  WHERE
16:21:06 607  	    CHARGE.ID = in_charge_id;
16:21:06 608  	  EXCEPTION
16:21:06 609  	    WHEN NO_DATA_FOUND THEN
16:21:06 610  	      RAISE BAD_CHARGE_ID;
16:21:06 611  	END;
16:21:06 612  
16:21:06 613  	OPEN out_result_set FOR
16:21:06 614  	SELECT DISTINCT
16:21:06 615  	  TRANSACTION.ID,
16:21:06 616  	  TRANSACTION.TRANSACTION_STATUS_ID,
16:21:06 617  	  TRANSACTION.CREATE_DATE,
16:21:06 618  	  TRANSACTION.TRANSACTION_AMOUNT,
16:21:06 619  	  TRANSACTION.IS_REFUND,
16:21:06 620  	  TRANSACTION.ORDER_ID
16:21:06 621  	FROM
16:21:06 622  	  CHARGE INNER JOIN TRANSACTION ON
16:21:06 623  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:21:06 624  	WHERE
16:21:06 625  	  CHARGE.ID = in_charge_id;
16:21:06 626  
16:21:06 627  EXCEPTION
16:21:06 628  WHEN BAD_CHARGE_ID THEN
16:21:06 629  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 630  	  SPROC_NAME, 'No such charge');
16:21:06 631  WHEN OTHERS THEN
16:21:06 632  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 633  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 634  END GET_TRANSACTIONS_BY_CHARGE_ID;
16:21:06 635  /******************************************************************************/
16:21:06 636  
16:21:06 637  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
16:21:06 638  /*
16:21:06 639  Throws exceptions:
16:21:06 640  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 641  */
16:21:06 642  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
16:21:06 643  	out_result_set OUT SYS_REFCURSOR
16:21:06 644  ) AS
16:21:06 645  -- VARIABLES
16:21:06 646  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
16:21:06 647  BEGIN
16:21:06 648  	OPEN out_result_set FOR
16:21:06 649  	SELECT DISTINCT
16:21:06 650  	  TRANSACTION.ID
16:21:06 651  	FROM
16:21:06 652  	  TRANSACTION
16:21:06 653  	WHERE
16:21:06 654  	  TRANSACTION.ORDER_ID = in_order_id;
16:21:06 655  
16:21:06 656  EXCEPTION
16:21:06 657  WHEN OTHERS THEN
16:21:06 658  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 659  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 660  END GET_TRANSACTION_BY_ORDER_ID;
16:21:06 661  /******************************************************************************/
16:21:06 662  
16:21:06 663  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
16:21:06 664  /*
16:21:06 665  Throws exceptions:
16:21:06 666  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 667  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 668  */
16:21:06 669  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
16:21:06 670  	out_result_set OUT SYS_REFCURSOR
16:21:06 671  ) AS
16:21:06 672  -- VARIABLES
16:21:06 673  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
16:21:06 674  temp_order_id TRANSACTION.ORDER_ID%TYPE;
16:21:06 675  -- EXCEPTIONS
16:21:06 676  BAD_ORDER_ID EXCEPTION;
16:21:06 677  BEGIN
16:21:06 678  
16:21:06 679  	--TODO BOO, REMOVE ME
16:21:06 680  	BEGIN
16:21:06 681  	  SELECT
16:21:06 682  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
16:21:06 683  	  FROM
16:21:06 684  	    TRANSACTION
16:21:06 685  	  WHERE
16:21:06 686  	    TRANSACTION.ORDER_ID = in_order_id;
16:21:06 687  	  EXCEPTION
16:21:06 688  	    WHEN NO_DATA_FOUND THEN
16:21:06 689  	      RAISE BAD_ORDER_ID;
16:21:06 690  	END;
16:21:06 691  
16:21:06 692  	OPEN out_result_set FOR
16:21:06 693  	SELECT c.ID CHARGE_ID,
16:21:06 694  	  c.CHARGE_AMOUNT,
16:21:06 695  	  c.CHARGE_STATUS_ID,
16:21:06 696  	  c.INSTRUMENT_ID,
16:21:06 697  	  c.INSTRUMENT_TYPE_ID,
16:21:06 698  	  c.INVOICE_ID,
16:21:06 699  	  t.ID TRANSACTION_ID,
16:21:06 700  	  t.IS_REFUND,
16:21:06 701  	  t.IS_SETTLED,
16:21:06 702  	  t.ORDER_ID,
16:21:06 703  	  t.TRANSACTION_AMOUNT,
16:21:06 704  	  t.TRANSACTION_STATUS_ID,
16:21:06 705  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
16:21:06 706  	  t.CREATED_BY TRANSACTION_CREATED_BY,
16:21:06 707  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
16:21:06 708  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
16:21:06 709  	FROM CHARGE c
16:21:06 710  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
16:21:06 711  	WHERE TRANSACTION_ID IN (
16:21:06 712  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
16:21:06 713  	);
16:21:06 714  
16:21:06 715  EXCEPTION
16:21:06 716  WHEN BAD_ORDER_ID THEN
16:21:06 717  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 718  	  SPROC_NAME, 'No such order');
16:21:06 719  WHEN OTHERS THEN
16:21:06 720  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 721  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 722  END GET_TRANSACTIONS_BY_ORDER_ID;
16:21:06 723  /******************************************************************************/
16:21:06 724  
16:21:06 725  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
16:21:06 726  /*
16:21:06 727  Throws exceptions:
16:21:06 728  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 729  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 730  */
16:21:06 731  	in_invoice_id	IN  NUMBER,
16:21:06 732  	out_result_set OUT SYS_REFCURSOR
16:21:06 733  ) AS
16:21:06 734  -- VARIABLES
16:21:06 735  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
16:21:06 736  temp_invoice_id NUMBER;
16:21:06 737  -- EXCEPTIONS
16:21:06 738  BAD_INVOICE_ID EXCEPTION;
16:21:06 739  BEGIN
16:21:06 740  
16:21:06 741  	BEGIN
16:21:06 742  	  SELECT
16:21:06 743  	    INVOICE.ID into temp_invoice_id
16:21:06 744  	  FROM
16:21:06 745  	    INVOICE
16:21:06 746  	  WHERE
16:21:06 747  	    INVOICE.ID = in_invoice_id;
16:21:06 748  	  EXCEPTION
16:21:06 749  	    WHEN NO_DATA_FOUND THEN
16:21:06 750  	      RAISE BAD_INVOICE_ID;
16:21:06 751  	END;
16:21:06 752  
16:21:06 753  	OPEN out_result_set FOR
16:21:06 754  	SELECT DISTINCT
16:21:06 755  	  TRANSACTION.ID,
16:21:06 756  	  TRANSACTION.TRANSACTION_STATUS_ID,
16:21:06 757  	  TRANSACTION.CREATE_DATE,
16:21:06 758  	  TRANSACTION.UPDATE_DATE,
16:21:06 759  	  TRANSACTION.ORDER_ID,
16:21:06 760  	  TRANSACTION.TRANSACTION_AMOUNT
16:21:06 761  	FROM
16:21:06 762  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
16:21:06 763  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
16:21:06 764  	WHERE
16:21:06 765  	  INVOICE.ID = in_invoice_id
16:21:06 766  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V16.TRUE
16:21:06 767  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
16:21:06 768  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_CLOSED;
16:21:06 769  
16:21:06 770  EXCEPTION
16:21:06 771  WHEN BAD_INVOICE_ID THEN
16:21:06 772  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 773  	  SPROC_NAME, 'No such invoice');
16:21:06 774  WHEN OTHERS THEN
16:21:06 775  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 776  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 777  END GET_CLOSED_REFUNDS_BY_INVOICE;
16:21:06 778  
16:21:06 779  /******************************************************************************/
16:21:06 780  
16:21:06 781  PROCEDURE GET_TRANSACTION_ATTEMPTS (
16:21:06 782  /*
16:21:06 783  Throws exceptions:
16:21:06 784  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 785  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 786  */
16:21:06 787  	in_transaction_id IN  NUMBER,
16:21:06 788  	out_result_set	  OUT SYS_REFCURSOR
16:21:06 789  ) AS
16:21:06 790  -- VARIABLES
16:21:06 791  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
16:21:06 792  temp_transaction_id NUMBER;
16:21:06 793  -- EXCEPTIONS
16:21:06 794  BAD_TRANSACTION_ID EXCEPTION;
16:21:06 795  BEGIN
16:21:06 796  
16:21:06 797  	BEGIN
16:21:06 798  	  SELECT
16:21:06 799  	    TRANSACTION.ID into temp_transaction_id
16:21:06 800  	  FROM
16:21:06 801  	    TRANSACTION
16:21:06 802  	  WHERE
16:21:06 803  	    TRANSACTION.ID = in_transaction_id;
16:21:06 804  	  EXCEPTION
16:21:06 805  	    WHEN NO_DATA_FOUND THEN
16:21:06 806  	      RAISE BAD_TRANSACTION_ID;
16:21:06 807  	END;
16:21:06 808  
16:21:06 809  	OPEN out_result_set FOR
16:21:06 810  	SELECT
16:21:06 811  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
16:21:06 812  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
16:21:06 813  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
16:21:06 814  	  TRANSACTION_ATTEMPT.CREATE_DATE,
16:21:06 815  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
16:21:06 816  	FROM
16:21:06 817  	  TRANSACTION_ATTEMPT
16:21:06 818  	WHERE
16:21:06 819  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
16:21:06 820  
16:21:06 821  EXCEPTION
16:21:06 822  WHEN BAD_TRANSACTION_ID THEN
16:21:06 823  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 824  	  SPROC_NAME, 'No such transaction');
16:21:06 825  WHEN OTHERS THEN
16:21:06 826  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 827  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 828  END GET_TRANSACTION_ATTEMPTS;
16:21:06 829  
16:21:06 830  /******************************************************************************/
16:21:06 831  
16:21:06 832  PROCEDURE RESERVE_TRANSACTION_ID (
16:21:06 833  /*
16:21:06 834  Throws exceptions:
16:21:06 835  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 836  */
16:21:06 837  	out_transaction_id OUT NUMBER
16:21:06 838  ) AS
16:21:06 839  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
16:21:06 840  BEGIN
16:21:06 841  	SELECT
16:21:06 842  	  TRN_ID_SEQ.nextVal into out_transaction_id
16:21:06 843  	FROM DUAL;
16:21:06 844  EXCEPTION
16:21:06 845  WHEN OTHERS THEN
16:21:06 846  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 847  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 848  END RESERVE_TRANSACTION_ID;
16:21:06 849  
16:21:06 850  /******************************************************************************/
16:21:06 851  
16:21:06 852  PROCEDURE GET_TRANSACTION_BY_ID (
16:21:06 853  /*
16:21:06 854  Throws exceptions:
16:21:06 855  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 856  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 857  */
16:21:06 858  	in_transaction_id IN NUMBER,
16:21:06 859  	out_result_set	  OUT SYS_REFCURSOR
16:21:06 860  ) AS
16:21:06 861  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
16:21:06 862  -- VARIABLES
16:21:06 863  temp_transaction_id NUMBER;
16:21:06 864  -- EXCPTIONS
16:21:06 865  BAD_TRANSACTION_ID EXCEPTION;
16:21:06 866  BEGIN
16:21:06 867  	BEGIN
16:21:06 868  	  SELECT
16:21:06 869  	    TRANSACTION.ID into temp_transaction_id
16:21:06 870  	  FROM
16:21:06 871  	    TRANSACTION
16:21:06 872  	  WHERE
16:21:06 873  	    TRANSACTION.ID = in_transaction_id;
16:21:06 874  	  EXCEPTION
16:21:06 875  	    WHEN NO_DATA_FOUND THEN
16:21:06 876  	      RAISE BAD_TRANSACTION_ID;
16:21:06 877  	END;
16:21:06 878  
16:21:06 879  	PROCS_TRANSACTION_CRU_V16.READ_TRANSACTION(
16:21:06 880  	  in_transaction_id => in_transaction_id,
16:21:06 881  	  out_result_set    => out_result_set
16:21:06 882  	);
16:21:06 883  
16:21:06 884  EXCEPTION
16:21:06 885  WHEN NO_DATA_FOUND THEN
16:21:06 886  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 887  	  SPROC_NAME, 'No such transaction');
16:21:06 888  WHEN OTHERS THEN
16:21:06 889  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 890  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 891  END GET_TRANSACTION_BY_ID;
16:21:06 892  
16:21:06 893  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:21:06 894  /*
16:21:06 895  Throws exceptions:
16:21:06 896  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 897  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
16:21:06 898  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 899  */
16:21:06 900  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:21:06 901  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:21:06 902  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:21:06 903  ) AS
16:21:06 904  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
16:21:06 905  -- VARIABLES
16:21:06 906  temp_transaction_id TRANSACTION.ID%TYPE;
16:21:06 907  -- EXCEPTIONS
16:21:06 908  BAD_TRANSACTION_ID   EXCEPTION;
16:21:06 909  ORDER_ID_IS_NOT_NULL EXCEPTION;
16:21:06 910  CRU_UNKNOWN_ERROR    EXCEPTION;
16:21:06 911  EXCEPTION_MESSAGE VARCHAR2(1024);
16:21:06 912  BEGIN
16:21:06 913  	BEGIN
16:21:06 914  	  SELECT
16:21:06 915  	    TRANSACTION.ID into temp_transaction_id
16:21:06 916  	  FROM
16:21:06 917  	    TRANSACTION
16:21:06 918  	  WHERE
16:21:06 919  	    TRANSACTION.ID = in_transaction_id;
16:21:06 920  	  EXCEPTION
16:21:06 921  	    WHEN NO_DATA_FOUND THEN
16:21:06 922  	      RAISE BAD_TRANSACTION_ID;
16:21:06 923  	END;
16:21:06 924  
16:21:06 925  	BEGIN
16:21:06 926  	  PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ORDER_ID(
16:21:06 927  	    in_transaction_id => in_transaction_id,
16:21:06 928  	    in_order_id       => in_order_id,
16:21:06 929  	    in_updated_by     => in_updated_by
16:21:06 930  	  );
16:21:06 931  	  EXCEPTION
16:21:06 932  	    WHEN OTHERS THEN
16:21:06 933  	      IF SQLCODE = APP_EXCEPTION_CODES_V16.NOT_FOUND THEN
16:21:06 934  		RAISE ORDER_ID_IS_NOT_NULL;
16:21:06 935  	      ELSE
16:21:06 936  		EXCEPTION_MESSAGE := SQLERRM;
16:21:06 937  		RAISE CRU_UNKNOWN_ERROR;
16:21:06 938  	      END IF;
16:21:06 939  	END;
16:21:06 940  
16:21:06 941  EXCEPTION
16:21:06 942  WHEN BAD_TRANSACTION_ID THEN
16:21:06 943  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 944  	  SPROC_NAME, 'No such transaction');
16:21:06 945  WHEN ORDER_ID_IS_NOT_NULL THEN
16:21:06 946  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 947  	  SPROC_NAME, 'Order id is not null');
16:21:06 948  WHEN CRU_UNKNOWN_ERROR THEN
16:21:06 949  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 950  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
16:21:06 951  WHEN OTHERS THEN
16:21:06 952  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 953  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 954  END UPDATE_TRANSACTION_ORDER_ID;
16:21:06 955  
16:21:06 956  /******************************************************************************/
16:21:06 957  
16:21:06 958  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
16:21:06 959  	in_transaction_id IN NUMBER
16:21:06 960  ) RETURN NUMBER AS
16:21:06 961  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
16:21:06 962  -- Variables
16:21:06 963  var_tax_amount NUMBER(10,2);
16:21:06 964  BEGIN
16:21:06 965  
16:21:06 966  	SELECT
16:21:06 967  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
16:21:06 968  	FROM
16:21:06 969  	  LINE_ITEM LI
16:21:06 970  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
16:21:06 971  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
16:21:06 972  	WHERE
16:21:06 973  	  CH.TRANSACTION_ID = in_transaction_id;
16:21:06 974  
16:21:06 975  	IF var_tax_amount IS NULL THEN
16:21:06 976  	  var_tax_amount := 0;
16:21:06 977  	END IF;
16:21:06 978  
16:21:06 979  	RETURN var_tax_amount;
16:21:06 980  
16:21:06 981  END GET_TRANSACTION_TAX_AMOUNT;
16:21:06 982  
16:21:06 983  /******************************************************************************/
16:21:06 984  
16:21:06 985  FUNCTION GET_TRANSACTION_INTRL_TAXES (
16:21:06 986  	in_transaction_id IN NUMBER
16:21:06 987  ) RETURN NUMBER AS
16:21:06 988  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
16:21:06 989  -- Variables
16:21:06 990  var_intrl_tax_amount NUMBER(10, 2);
16:21:06 991  BEGIN
16:21:06 992  
16:21:06 993  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
16:21:06 994  	FROM
16:21:06 995  	  LINE_ITEM LI
16:21:06 996  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
16:21:06 997  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
16:21:06 998  	  INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
16:21:06 999  	WHERE
16:21:06 1000  	   CH.TRANSACTION_ID = in_transaction_id
16:21:06 1001  	   AND T.TAX_TYPE_ID IN (
16:21:06 1002  	     SELECT GLOBAL_ENUMS_V16.TAX_TYPE_VAT FROM DUAL
16:21:06 1003  	   );
16:21:06 1004  
16:21:06 1005  	 IF var_intrl_tax_amount IS NULL THEN
16:21:06 1006  	   var_intrl_tax_amount := 0;
16:21:06 1007  	 END IF;
16:21:06 1008  
16:21:06 1009  	 RETURN var_intrl_tax_amount;
16:21:06 1010  
16:21:06 1011  END GET_TRANSACTION_INTRL_TAXES;
16:21:06 1012  
16:21:06 1013  /******************************************************************************/
16:21:06 1014  -- norlov: #38796
16:21:06 1015  PROCEDURE GET_TRANSACTIONS (
16:21:06 1016  /*
16:21:06 1017  Throws exceptions:
16:21:06 1018  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1019  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1020  */
16:21:06 1021  	 in_group_id	       IN  NUMBER,
16:21:06 1022  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
16:21:06 1023  	 in_subscription_id    IN NUMBER DEFAULT NULL,
16:21:06 1024  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
16:21:06 1025  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
16:21:06 1026  	 in_transaction_status IN NUMBER DEFAULT NULL,
16:21:06 1027  	 out_result_set        OUT SYS_REFCURSOR
16:21:06 1028  ) AS
16:21:06 1029  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
16:21:06 1030  -- VARIABLES
16:21:06 1031  var_account_id ACCOUNT.ID%TYPE;
16:21:06 1032  statement VARCHAR2(2000);
16:21:06 1033  -- EXCEPTIONS
16:21:06 1034  BAD_GROUP_ID   EXCEPTION;
16:21:06 1035  BEGIN
16:21:06 1036  	-- check group id
16:21:06 1037  	BEGIN
16:21:06 1038  	   SELECT
16:21:06 1039  	     ACCOUNT.ID into var_account_id
16:21:06 1040  	   FROM
16:21:06 1041  	     ACCOUNT
16:21:06 1042  	   WHERE
16:21:06 1043  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:06 1044  	   EXCEPTION
16:21:06 1045  	     WHEN NO_DATA_FOUND THEN
16:21:06 1046  	       RAISE BAD_GROUP_ID;
16:21:06 1047  	 END;
16:21:06 1048  
16:21:06 1049  	 OPEN out_result_set FOR
16:21:06 1050  	 SELECT
16:21:06 1051  	   TRANSACTION.ID,
16:21:06 1052  	   TRANSACTION.TRANSACTION_STATUS_ID,
16:21:06 1053  	   TRANSACTION.TRANSACTION_AMOUNT,
16:21:06 1054  	   TRANSACTION.CREATE_DATE,
16:21:06 1055  	   TRANSACTION.CREATED_BY,
16:21:06 1056  	   TRANSACTION.IS_REFUND,
16:21:06 1057  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
16:21:06 1058  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
16:21:06 1059  	 FROM
16:21:06 1060  	   TRANSACTION
16:21:06 1061  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
16:21:06 1062  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
16:21:06 1063  	 WHERE
16:21:06 1064  	   -- Filter by invoice ID
16:21:06 1065  	   (
16:21:06 1066  	     INVOICE.ID IN (
16:21:06 1067  	       -- Gift certificate invoices
16:21:06 1068  	       SELECT
16:21:06 1069  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
16:21:06 1070  	       FROM
16:21:06 1071  		 GIFT_CERTIFICATE
16:21:06 1072  	       WHERE
16:21:06 1073  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
16:21:06 1074  		 -- If subscription_id is set then return nothing
16:21:06 1075  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
16:21:06 1076  	     )
16:21:06 1077  	     OR
16:21:06 1078  	     INVOICE.ID IN (
16:21:06 1079  	       SELECT
16:21:06 1080  		 LICENSE.INVOICE_ID
16:21:06 1081  	       FROM
16:21:06 1082  		 LICENSE
16:21:06 1083  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 1084  	       WHERE
16:21:06 1085  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:06 1086  		 -- Filter by subscription id
16:21:06 1087  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
16:21:06 1088  	     )
16:21:06 1089  	   )
16:21:06 1090  	   -- Filter by invoice id
16:21:06 1091  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
16:21:06 1092  	   -- Filter by start date
16:21:06 1093  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
16:21:06 1094  	   -- Filter by end date
16:21:06 1095  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
16:21:06 1096  	   -- Filter by transaction status
16:21:06 1097  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
16:21:06 1098  
16:21:06 1099  /*
16:21:06 1100  
16:21:06 1101  statement :=  'select distinct '||CHR(10)
16:21:06 1102  || ' TRANSACTION.ID,'||CHR(10)
16:21:06 1103  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
16:21:06 1104  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
16:21:06 1105  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
16:21:06 1106  || ' TRANSACTION.CREATED_BY, '||CHR(10)
16:21:06 1107  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
16:21:06 1108  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
16:21:06 1109  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
16:21:06 1110  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
16:21:06 1111  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
16:21:06 1112  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
16:21:06 1113  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
16:21:06 1114  
16:21:06 1115  IF (in_transaction_status IS NOT NULL) THEN
16:21:06 1116  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
16:21:06 1117  END IF;
16:21:06 1118  
16:21:06 1119  IF (in_invoice_id IS NOT NULL) THEN
16:21:06 1120  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
16:21:06 1121  END IF;
16:21:06 1122  
16:21:06 1123  IF (in_subscription_id IS NOT NULL) THEN
16:21:06 1124  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
16:21:06 1125  END IF;
16:21:06 1126  
16:21:06 1127  IF (in_start_date IS NOT NULL) THEN
16:21:06 1128  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
16:21:06 1129  END IF;
16:21:06 1130  
16:21:06 1131  IF (in_end_date IS NOT NULL) THEN
16:21:06 1132  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
16:21:06 1133  END IF;
16:21:06 1134  dbms_output.put_line(statement);
16:21:06 1135  OPEN out_result_set FOR statement;
16:21:06 1136  
16:21:06 1137  */
16:21:06 1138  
16:21:06 1139  EXCEPTION
16:21:06 1140  WHEN BAD_GROUP_ID THEN
16:21:06 1141  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1142  	   SPROC_NAME, 'No such group');
16:21:06 1143  WHEN OTHERS THEN
16:21:06 1144  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1145  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1146  END GET_TRANSACTIONS;
16:21:06 1147  
16:21:06 1148  FUNCTION IS_TRANSACTION_COLLECTED (
16:21:06 1149  /*
16:21:06 1150  Throws:
16:21:06 1151  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1152  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1153  Returns:
16:21:06 1154  GLOBAL_CONST.TRUE if transaction collected,
16:21:06 1155  GLOBAL_CONST.FALSE else
16:21:06 1156  */
16:21:06 1157  	 in_transaction_id IN NUMBER
16:21:06 1158  ) RETURN NUMBER AS
16:21:06 1159  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
16:21:06 1160  -- VARIABLES
16:21:06 1161  temp_transaction_id     NUMBER;
16:21:06 1162  var_success_attemps_num NUMBER;
16:21:06 1163  -- EXCEPTIONS
16:21:06 1164  BAD_TRANSACTION_ID EXCEPTION;
16:21:06 1165  BEGIN
16:21:06 1166  
16:21:06 1167  	 BEGIN
16:21:06 1168  	   SELECT
16:21:06 1169  	     TRANSACTION.ID into temp_transaction_id
16:21:06 1170  	   FROM
16:21:06 1171  	     TRANSACTION
16:21:06 1172  	   WHERE
16:21:06 1173  	     TRANSACTION.ID = in_transaction_id;
16:21:06 1174  	   EXCEPTION
16:21:06 1175  	     WHEN NO_DATA_FOUND THEN
16:21:06 1176  	       RAISE BAD_TRANSACTION_ID;
16:21:06 1177  	 END;
16:21:06 1178  
16:21:06 1179  	 SELECT
16:21:06 1180  	   COUNT(*) into var_success_attemps_num
16:21:06 1181  	 FROM
16:21:06 1182  	   TRANSACTION_ATTEMPT
16:21:06 1183  	 WHERE
16:21:06 1184  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
16:21:06 1185  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS FROM DUAL );
16:21:06 1186  
16:21:06 1187  	 IF var_success_attemps_num > 0 THEN
16:21:06 1188  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:06 1189  	 ELSE
16:21:06 1190  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:06 1191  	 END IF;
16:21:06 1192  
16:21:06 1193  EXCEPTION
16:21:06 1194  WHEN BAD_TRANSACTION_ID THEN
16:21:06 1195  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1196  	   SPROC_NAME, 'No such transaction');
16:21:06 1197  WHEN OTHERS THEN
16:21:06 1198  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1199  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1200  END IS_TRANSACTION_COLLECTED;
16:21:06 1201  
16:21:06 1202  
16:21:06 1203  /******************************************************************************/
16:21:06 1204  PROCEDURE GET_ATTEMPT_NUMBER (
16:21:06 1205  /*
16:21:06 1206  Throws exceptions:
16:21:06 1207  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1208  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1209  */
16:21:06 1210  	 in_charge_id	in  number,
16:21:06 1211  	 out_attempt_count OUT NUMBER
16:21:06 1212  ) AS
16:21:06 1213  -- VARIABLES
16:21:06 1214  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ATTEMPT_NUMBER';
16:21:06 1215  temp_transaction_id NUMBER;
16:21:06 1216  -- EXCEPTIONS
16:21:06 1217  BAD_CHARGE_ID EXCEPTION;
16:21:06 1218  BEGIN
16:21:06 1219  
16:21:06 1220  	 BEGIN
16:21:06 1221  	   SELECT
16:21:06 1222  	     TRANSACTION_ID into temp_transaction_id
16:21:06 1223  	   FROM
16:21:06 1224  	     CHARGE
16:21:06 1225  	   WHERE
16:21:06 1226  	     CHARGE.ID = in_charge_id;
16:21:06 1227  	   EXCEPTION
16:21:06 1228  	     WHEN NO_DATA_FOUND THEN
16:21:06 1229  	       RAISE BAD_CHARGE_ID;
16:21:06 1230  	 END;
16:21:06 1231  
16:21:06 1232  	 select
16:21:06 1233  	   count(1)
16:21:06 1234  	 into
16:21:06 1235  	   out_attempt_count
16:21:06 1236  	 from
16:21:06 1237  	   transaction tr
16:21:06 1238  	 inner join
16:21:06 1239  	   transaction_attempt ta
16:21:06 1240  	 on (tr.id = ta.transaction_id)
16:21:06 1241  	 where
16:21:06 1242  	   tr.ID = temp_transaction_id;
16:21:06 1243  
16:21:06 1244  	 out_attempt_count := out_attempt_count + 1;
16:21:06 1245  
16:21:06 1246  EXCEPTION
16:21:06 1247  WHEN BAD_CHARGE_ID THEN
16:21:06 1248  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1249  	   SPROC_NAME, 'No such charge');
16:21:06 1250  WHEN OTHERS THEN
16:21:06 1251  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1252  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1253  end GET_ATTEMPT_NUMBER;
16:21:06 1254  /******************************************************************************/
16:21:06 1255  
16:21:06 1256  END PROCS_TRANSACTION_V16;
16:21:06 1257  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.13
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V16" AS
16:21:06   2  
16:21:06   3  PROCEDURE CREATE_LICENSE(
16:21:06   4  /*
16:21:06   5  Throws exceptions:
16:21:06   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06   8  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:06   9  */
16:21:06  10  	in_status_id		    IN NUMBER,
16:21:06  11  	in_needs_entitlements	    IN NUMBER,
16:21:06  12  	in_start_date		    IN DATE,
16:21:06  13  	in_end_date		    IN DATE,
16:21:06  14  	in_offer_id		    IN NUMBER,
16:21:06  15  	in_subscription_id	    IN NUMBER,
16:21:06  16  	in_invoice_id		    IN NUMBER,
16:21:06  17  	in_created_by		    IN VARCHAR2,
16:21:06  18  	in_is_extension 	    IN NUMBER,
16:21:06  19  	in_current_offer_index	    IN NUMBER,
16:21:06  20  	in_current_offer_recurr_num IN NUMBER,
16:21:06  21  	out_license_id		    OUT NUMBER
16:21:06  22  ) AS
16:21:06  23  -- VARIABLES
16:21:06  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
16:21:06  25  temp_offer_id	   NUMBER;
16:21:06  26  temp_subscription_id NUMBER;
16:21:06  27  temp_invoice_id	   NUMBER;
16:21:06  28  
16:21:06  29  var_new_license_id NUMBER;
16:21:06  30  var_offer_duration VARCHAR2(30);
16:21:06  31  
16:21:06  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
16:21:06  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
16:21:06  34  var_offer_years	    NUMBER;
16:21:06  35  var_offer_months	    NUMBER;
16:21:06  36  var_offer_days	    NUMBER;
16:21:06  37  
16:21:06  38  -- EXCEPTIONS
16:21:06  39  BAD_OFFER_ID	     EXCEPTION;
16:21:06  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
16:21:06  41  BAD_INVOICE_ID	     EXCEPTION;
16:21:06  42  BAD_OFFER_DURATION     EXCEPTION;
16:21:06  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06  44  BEGIN
16:21:06  45  
16:21:06  46  	-- TODO:
16:21:06  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
16:21:06  48  
16:21:06  49  	out_license_id := NULL;
16:21:06  50  
16:21:06  51  	-- get offer id and offer entitlement duration
16:21:06  52  	BEGIN
16:21:06  53  	  SELECT
16:21:06  54  	    OFFER.ID,
16:21:06  55  	    OFFER.ENTITLEMENT_DURATION
16:21:06  56  	    into
16:21:06  57  	    temp_offer_id,
16:21:06  58  	    var_offer_duration
16:21:06  59  	  FROM
16:21:06  60  	    OFFER
16:21:06  61  	  WHERE
16:21:06  62  	    OFFER.ID = in_offer_id;
16:21:06  63  	  EXCEPTION
16:21:06  64  	  WHEN NO_DATA_FOUND THEN
16:21:06  65  	    RAISE BAD_OFFER_ID;
16:21:06  66  	END;
16:21:06  67  
16:21:06  68  	-- Check that subscription exists
16:21:06  69  	BEGIN
16:21:06  70  	  SELECT
16:21:06  71  	    SUBSCRIPTION.ID into temp_subscription_id
16:21:06  72  	  FROM
16:21:06  73  	    SUBSCRIPTION
16:21:06  74  	  WHERE
16:21:06  75  	    SUBSCRIPTION.ID = in_subscription_id;
16:21:06  76  	  EXCEPTION
16:21:06  77  	  WHEN NO_DATA_FOUND THEN
16:21:06  78  	    RAISE BAD_SUBSCRIPTION_ID;
16:21:06  79  	END;
16:21:06  80  
16:21:06  81  	-- Check that invoice exists
16:21:06  82  	BEGIN
16:21:06  83  	  SELECT
16:21:06  84  	    INVOICE.ID into temp_invoice_id
16:21:06  85  	  FROM
16:21:06  86  	    INVOICE
16:21:06  87  	  WHERE
16:21:06  88  	    INVOICE.ID = in_invoice_id;
16:21:06  89  	  EXCEPTION
16:21:06  90  	  WHEN NO_DATA_FOUND THEN
16:21:06  91  	    RAISE BAD_INVOICE_ID;
16:21:06  92  	END;
16:21:06  93  
16:21:06  94  	-- convert offer duration into intervals
16:21:06  95  	BEGIN
16:21:06  96  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
16:21:06  97  	    var_offer_duration,
16:21:06  98  	    var_offer_years,
16:21:06  99  	    var_offer_months,
16:21:06 100  	    var_offer_days);
16:21:06 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
16:21:06 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
16:21:06 103  	  EXCEPTION
16:21:06 104  	    WHEN OTHERS THEN
16:21:06 105  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:06 106  	      RAISE BAD_OFFER_DURATION;
16:21:06 107  	END;
16:21:06 108  
16:21:06 109  	-- insert new row into license table
16:21:06 110  	PROCS_LICENSE_CRU_V16.CREATE_LICENSE(
16:21:06 111  	  out_license_id	      => var_new_license_id,
16:21:06 112  	  in_license_status_id	      => in_status_id,
16:21:06 113  	  in_needs_entitlements       => in_needs_entitlements,
16:21:06 114  	  in_start_date 	      => in_start_date,
16:21:06 115  	  in_offer_id		      => in_offer_id,
16:21:06 116  	  in_subscription_id	      => in_subscription_id,
16:21:06 117  	  in_invoice_id 	      => in_invoice_id,
16:21:06 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
16:21:06 119  	  in_created_by 	      => in_created_by,
16:21:06 120  	  in_is_extension	      => in_is_extension,
16:21:06 121  	  in_current_offer_index      => in_current_offer_index,
16:21:06 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
16:21:06 123  	);
16:21:06 124  
16:21:06 125  	out_license_id := var_new_license_id;
16:21:06 126  
16:21:06 127  EXCEPTION
16:21:06 128  WHEN BAD_OFFER_DURATION THEN
16:21:06 129  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
16:21:06 131  WHEN BAD_OFFER_ID THEN
16:21:06 132  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 133  	  SPROC_NAME, 'No such offer');
16:21:06 134  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 135  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 136  	  SPROC_NAME, 'No such subscription');
16:21:06 137  WHEN BAD_INVOICE_ID THEN
16:21:06 138  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 139  	  SPROC_NAME, 'No such invoice');
16:21:06 140  WHEN OTHERS THEN
16:21:06 141  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 143  END;
16:21:06 144  
16:21:06 145  /******************************************************************************/
16:21:06 146  
16:21:06 147  PROCEDURE UPDATE_LICENSE_STATUS(
16:21:06 148  	  in_license_id     IN NUMBER,
16:21:06 149  	  in_license_status IN NUMBER,
16:21:06 150  	  in_updated_by     IN VARCHAR2,
16:21:06 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:06 152  ) AS
16:21:06 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
16:21:06 154  -- VARIABLES
16:21:06 155  temp_license_id NUMBER;
16:21:06 156  -- EXCEPTIONS
16:21:06 157  BAD_LICENSE_ID	     EXCEPTION;
16:21:06 158  BAD_LICENSE_STATUS     EXCEPTION;
16:21:06 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06 160  BEGIN
16:21:06 161  
16:21:06 162  	BEGIN
16:21:06 163  	  SELECT
16:21:06 164  	    ID into temp_license_id
16:21:06 165  	  FROM
16:21:06 166  	    LICENSE
16:21:06 167  	  WHERE
16:21:06 168  	    LICENSE.ID = in_license_id;
16:21:06 169  	  EXCEPTION
16:21:06 170  	    WHEN NO_DATA_FOUND THEN
16:21:06 171  	      RAISE BAD_LICENSE_ID;
16:21:06 172  	END;
16:21:06 173  
16:21:06 174  	IF in_license_status != GLOBAL_STATUSES_V16.LICENSE_CLOSED
16:21:06 175  	   AND in_license_status != GLOBAL_STATUSES_V16.LICENSE_ACTIVE THEN
16:21:06 176  	  RAISE BAD_LICENSE_STATUS;
16:21:06 177  	END IF;
16:21:06 178  
16:21:06 179  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V16.TRUE) then
16:21:06 180  	  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:06 181  	    in_license_id	 => in_license_id,
16:21:06 182  	    in_updated_by	 => in_updated_by,
16:21:06 183  	    in_license_status_id => in_license_status,
16:21:06 184  	    in_entitlement_end_date	 => sysdate
16:21:06 185  	  );
16:21:06 186  	ELSE
16:21:06 187  	  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:06 188  	    in_license_id	 => in_license_id,
16:21:06 189  	    in_updated_by	 => in_updated_by,
16:21:06 190  	    in_license_status_id => in_license_status
16:21:06 191  	  );
16:21:06 192  	END IF;
16:21:06 193  
16:21:06 194  EXCEPTION
16:21:06 195  WHEN BAD_LICENSE_STATUS THEN
16:21:06 196  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 197  	  SPROC_NAME, 'Bad status id');
16:21:06 198  WHEN BAD_LICENSE_ID THEN
16:21:06 199  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 200  	  SPROC_NAME, 'No such license');
16:21:06 201  WHEN OTHERS THEN
16:21:06 202  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 204  END UPDATE_LICENSE_STATUS;
16:21:06 205  
16:21:06 206  /******************************************************************************/
16:21:06 207  
16:21:06 208  PROCEDURE GET_ENDING_LICENSES (
16:21:06 209  	in_hours_number IN NUMBER,
16:21:06 210  	out_result_set	OUT SYS_REFCURSOR
16:21:06 211  ) AS
16:21:06 212  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
16:21:06 213  -- VARIABLES
16:21:06 214  var_days		NUMBER;
16:21:06 215  var_hours 	NUMBER;
16:21:06 216  var_time_interval INTERVAL DAY (3) TO SECOND;
16:21:06 217  BEGIN
16:21:06 218  
16:21:06 219  	var_hours := mod(in_hours_number,24);
16:21:06 220  	var_days := (in_hours_number - var_hours) / 24;
16:21:06 221  	var_time_interval := var_days||' '||var_hours||':0:0';
16:21:06 222  
16:21:06 223  	OPEN out_result_set FOR
16:21:06 224  SELECT * FROM
16:21:06 225  (
16:21:06 226  	SELECT
16:21:06 227  	  LICENSE.ID,
16:21:06 228  	  LICENSE.CREATE_DATE,
16:21:06 229  	  LICENSE.CREATED_BY,
16:21:06 230  	  LICENSE.CURRENT_OFFER_INDEX,
16:21:06 231  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
16:21:06 232  	  LICENSE.END_DATE,
16:21:06 233  	  LICENSE.ENTITLEMENT_END_DATE,
16:21:06 234  	  LICENSE.INVOICE_ID,
16:21:06 235  	  LICENSE.IS_EXTENSION,
16:21:06 236  	  LICENSE.LICENSE_STATUS_ID,
16:21:06 237  	  LICENSE.OFFER_ID,
16:21:06 238  	  LICENSE.START_DATE,
16:21:06 239  	  LICENSE.SUBSCRIPTION_ID,
16:21:06 240  	  LICENSE.UPDATE_DATE,
16:21:06 241  	  LICENSE.UPDATED_BY
16:21:06 242  	FROM
16:21:06 243  	  LICENSE
16:21:06 244  	WHERE
16:21:06 245  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
16:21:06 246  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 247  	  AND NOT EXISTS
16:21:06 248  	  (
16:21:06 249  	    SELECT NULL
16:21:06 250  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:06 251  	    WHERE PROCESS_NAME = SPROC_NAME
16:21:06 252  	      AND GENERIC_ID = LICENSE.ID
16:21:06 253  	  )
16:21:06 254  	  AND ROWNUM <= 10000
16:21:06 255  	  ORDER BY dbms_random.value
16:21:06 256  ) WHERE
16:21:06 257  	  ROWNUM <= 1000
16:21:06 258  	  ;
16:21:06 259  EXCEPTION
16:21:06 260  WHEN OTHERS THEN
16:21:06 261  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 263  END GET_ENDING_LICENSES;
16:21:06 264  
16:21:06 265  
16:21:06 266  /******************************************************************************/
16:21:06 267  
16:21:06 268  PROCEDURE GET_ENDING_LICENSES_CC (
16:21:06 269  	in_hours_number IN NUMBER,
16:21:06 270  	out_result_set	OUT SYS_REFCURSOR,
16:21:06 271  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:06 272  ) AS
16:21:06 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
16:21:06 274  -- VARIABLES
16:21:06 275  var_days		NUMBER;
16:21:06 276  var_hours 	NUMBER;
16:21:06 277  var_time_interval INTERVAL DAY (3) TO SECOND;
16:21:06 278  BEGIN
16:21:06 279  
16:21:06 280  	var_hours := mod(in_hours_number,24);
16:21:06 281  	var_days := (in_hours_number - var_hours) / 24;
16:21:06 282  	var_time_interval := var_days||' '||var_hours||':0:0';
16:21:06 283  
16:21:06 284  	OPEN out_result_set FOR
16:21:06 285  SELECT * FROM
16:21:06 286  (
16:21:06 287  	SELECT
16:21:06 288  	  LICENSE.ID,
16:21:06 289  	  LICENSE.CREATE_DATE,
16:21:06 290  	  LICENSE.CREATED_BY,
16:21:06 291  	  LICENSE.CURRENT_OFFER_INDEX,
16:21:06 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
16:21:06 293  	  LICENSE.END_DATE,
16:21:06 294  	  LICENSE.ENTITLEMENT_END_DATE,
16:21:06 295  	  LICENSE.INVOICE_ID,
16:21:06 296  	  LICENSE.IS_EXTENSION,
16:21:06 297  	  LICENSE.LICENSE_STATUS_ID,
16:21:06 298  	  LICENSE.OFFER_ID,
16:21:06 299  	  LICENSE.START_DATE,
16:21:06 300  	  LICENSE.SUBSCRIPTION_ID,
16:21:06 301  	  LICENSE.UPDATE_DATE,
16:21:06 302  	  LICENSE.UPDATED_BY
16:21:06 303  	FROM
16:21:06 304  	  LICENSE
16:21:06 305  	WHERE
16:21:06 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
16:21:06 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 308  	  AND NOT EXISTS
16:21:06 309  	  (
16:21:06 310  	    SELECT NULL
16:21:06 311  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:06 312  	    WHERE PROCESS_NAME = in_process_name
16:21:06 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
16:21:06 314  	  )
16:21:06 315  	  AND ROWNUM <= 10000
16:21:06 316  	  ORDER BY dbms_random.value
16:21:06 317  ) WHERE
16:21:06 318  	  ROWNUM <= 1000
16:21:06 319  	  ;
16:21:06 320  EXCEPTION
16:21:06 321  WHEN OTHERS THEN
16:21:06 322  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 324  END GET_ENDING_LICENSES_CC;
16:21:06 325  
16:21:06 326  /******************************************************************************/
16:21:06 327  
16:21:06 328  PROCEDURE GET_RECURRING_OFFER (
16:21:06 329  	in_license_id  IN NUMBER,
16:21:06 330  	out_result_set OUT SYS_REFCURSOR
16:21:06 331  ) AS
16:21:06 332  -- VARIABLES
16:21:06 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
16:21:06 334  var_offer_chain_id	    NUMBER;
16:21:06 335  var_offer_id		    NUMBER;
16:21:06 336  var_offer_num_recurrences     NUMBER;
16:21:06 337  var_license_cur_offer_rec_num NUMBER;
16:21:06 338  var_offer_index		    NUMBER;
16:21:06 339  -- EXCEPTIONS
16:21:06 340  BAD_LICENSE_ID	     EXCEPTION;
16:21:06 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
16:21:06 342  BEGIN
16:21:06 343  
16:21:06 344  	BEGIN
16:21:06 345  	  SELECT
16:21:06 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
16:21:06 347  	    LICENSE.OFFER_ID,
16:21:06 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
16:21:06 349  	    into
16:21:06 350  	    var_offer_chain_id,
16:21:06 351  	    var_offer_id,
16:21:06 352  	    var_license_cur_offer_rec_num
16:21:06 353  	  FROM
16:21:06 354  	    LICENSE
16:21:06 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 356  	  WHERE
16:21:06 357  	    LICENSE.ID = in_license_id;
16:21:06 358  	  EXCEPTION
16:21:06 359  	    WHEN NO_DATA_FOUND THEN
16:21:06 360  	      RAISE BAD_LICENSE_ID;
16:21:06 361  	END;
16:21:06 362  
16:21:06 363  	BEGIN
16:21:06 364  	  SELECT
16:21:06 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
16:21:06 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
16:21:06 367  	    into
16:21:06 368  	    var_offer_num_recurrences,
16:21:06 369  	    var_offer_index
16:21:06 370  	  FROM
16:21:06 371  	    OFFER_OFFER_CHAIN
16:21:06 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:21:06 373  	  WHERE
16:21:06 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:21:06 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
16:21:06 376  	  EXCEPTION
16:21:06 377  	    WHEN NO_DATA_FOUND THEN
16:21:06 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
16:21:06 379  	END;
16:21:06 380  
16:21:06 381  	IF var_offer_num_recurrences = 0 THEN
16:21:06 382  	  --out_result_set := NULL;
16:21:06 383  	  -- TODO: Remove this hardcode
16:21:06 384  	  OPEN out_result_set FOR
16:21:06 385  	  SELECT
16:21:06 386  	    OFFER.ID,
16:21:06 387  	    OFFER.OFFER_STATUS_ID,
16:21:06 388  	    OFFER.ENTITLEMENT_DURATION,
16:21:06 389  	    OFFER.CREATED_BY,
16:21:06 390  	    OFFER.CREATE_DATE,
16:21:06 391  	    OFFER.UPDATED_BY,
16:21:06 392  	    OFFER.UPDATE_DATE,
16:21:06 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
16:21:06 394  	    var_offer_index as "OFFER_INDEX"
16:21:06 395  	  FROM
16:21:06 396  	    OFFER_OFFER_CHAIN
16:21:06 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:21:06 398  	  WHERE ROWNUM = 0;
16:21:06 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
16:21:06 400  	  --out_result_set := NULL;
16:21:06 401  	  -- TODO: Remove this hardcode
16:21:06 402  	  OPEN out_result_set FOR
16:21:06 403  	  SELECT
16:21:06 404  	    OFFER.ID,
16:21:06 405  	    OFFER.OFFER_STATUS_ID,
16:21:06 406  	    OFFER.ENTITLEMENT_DURATION,
16:21:06 407  	    OFFER.CREATED_BY,
16:21:06 408  	    OFFER.CREATE_DATE,
16:21:06 409  	    OFFER.UPDATED_BY,
16:21:06 410  	    OFFER.UPDATE_DATE,
16:21:06 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
16:21:06 412  	    var_offer_index as "OFFER_INDEX"
16:21:06 413  	  FROM
16:21:06 414  	    OFFER_OFFER_CHAIN
16:21:06 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:21:06 416  	  WHERE ROWNUM = 0;
16:21:06 417  	ELSE
16:21:06 418  	  OPEN out_result_set FOR
16:21:06 419  	  SELECT
16:21:06 420  	    OFFER.ID,
16:21:06 421  	    OFFER.OFFER_STATUS_ID,
16:21:06 422  	    OFFER.ENTITLEMENT_DURATION,
16:21:06 423  	    OFFER.CREATED_BY,
16:21:06 424  	    OFFER.CREATE_DATE,
16:21:06 425  	    OFFER.UPDATED_BY,
16:21:06 426  	    OFFER.UPDATE_DATE,
16:21:06 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
16:21:06 428  	    var_offer_index as "OFFER_INDEX"
16:21:06 429  	  FROM
16:21:06 430  	    OFFER
16:21:06 431  	  WHERE
16:21:06 432  	    OFFER.ID = var_offer_id;
16:21:06 433  	END IF;
16:21:06 434  
16:21:06 435  EXCEPTION
16:21:06 436  WHEN BAD_LICENSE_ID THEN
16:21:06 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 438  	  SPROC_NAME, 'No such license');
16:21:06 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
16:21:06 440  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
16:21:06 442  WHEN OTHERS THEN
16:21:06 443  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 445  END GET_RECURRING_OFFER;
16:21:06 446  
16:21:06 447  /******************************************************************************/
16:21:06 448  
16:21:06 449  PROCEDURE GET_NEXT_OFFER (
16:21:06 450  /*
16:21:06 451  Throws exceptions:
16:21:06 452  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 453  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 454  */
16:21:06 455  	in_license_id  IN NUMBER,
16:21:06 456  	out_result_set OUT SYS_REFCURSOR
16:21:06 457  ) AS
16:21:06 458  -- VARIABLES
16:21:06 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
16:21:06 460  var_offer_chain_id	NUMBER;
16:21:06 461  var_offer_id		NUMBER;
16:21:06 462  var_license_current_index NUMBER;
16:21:06 463  var_next_offer_index	NUMBER;
16:21:06 464  -- EXCEPTIONS
16:21:06 465  BAD_LICENSE_ID	      EXCEPTION;
16:21:06 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
16:21:06 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:21:06 468  BEGIN
16:21:06 469  
16:21:06 470  	BEGIN
16:21:06 471  	  SELECT
16:21:06 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
16:21:06 473  	    LICENSE.OFFER_ID,
16:21:06 474  	    LICENSE.CURRENT_OFFER_INDEX
16:21:06 475  	    into
16:21:06 476  	    var_offer_chain_id,
16:21:06 477  	    var_offer_id,
16:21:06 478  	    var_license_current_index
16:21:06 479  	  FROM
16:21:06 480  	    LICENSE
16:21:06 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 482  	  WHERE
16:21:06 483  	    LICENSE.ID = in_license_id;
16:21:06 484  	  EXCEPTION
16:21:06 485  	    WHEN NO_DATA_FOUND THEN
16:21:06 486  	      RAISE BAD_LICENSE_ID;
16:21:06 487  	END;
16:21:06 488  
16:21:06 489  	BEGIN
16:21:06 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX(
16:21:06 491  	    var_offer_chain_id,
16:21:06 492  	    var_license_current_index
16:21:06 493  	  );
16:21:06 494  	  EXCEPTION
16:21:06 495  	    WHEN OTHERS THEN
16:21:06 496  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:06 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
16:21:06 498  	END;
16:21:06 499  
16:21:06 500  	IF var_next_offer_index IS NULL THEN
16:21:06 501  	  -- RETURN NULL;
16:21:06 502  	  -- TODO: Remove this hardcode
16:21:06 503  	  OPEN out_result_set FOR
16:21:06 504  	  SELECT
16:21:06 505  	    OFFER.ID,
16:21:06 506  	    OFFER.OFFER_STATUS_ID,
16:21:06 507  	    OFFER.ENTITLEMENT_DURATION,
16:21:06 508  	    OFFER.CREATED_BY,
16:21:06 509  	    OFFER.CREATE_DATE,
16:21:06 510  	    OFFER.UPDATED_BY,
16:21:06 511  	    OFFER.UPDATE_DATE,
16:21:06 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
16:21:06 513  	  FROM
16:21:06 514  	    OFFER_OFFER_CHAIN
16:21:06 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:21:06 516  	  WHERE
16:21:06 517  	    1=2;
16:21:06 518  	ELSE
16:21:06 519  	  OPEN out_result_set FOR
16:21:06 520  	  SELECT
16:21:06 521  	    OFFER.ID,
16:21:06 522  	    OFFER.OFFER_STATUS_ID,
16:21:06 523  	    OFFER.ENTITLEMENT_DURATION,
16:21:06 524  	    OFFER.CREATED_BY,
16:21:06 525  	    OFFER.CREATE_DATE,
16:21:06 526  	    OFFER.UPDATED_BY,
16:21:06 527  	    OFFER.UPDATE_DATE,
16:21:06 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
16:21:06 529  	  FROM
16:21:06 530  	    OFFER_OFFER_CHAIN
16:21:06 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:21:06 532  	  WHERE
16:21:06 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:21:06 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
16:21:06 535  	END IF;
16:21:06 536  
16:21:06 537  EXCEPTION
16:21:06 538  WHEN BAD_LICENSE_ID THEN
16:21:06 539  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 540  	  SPROC_NAME, 'No such license');
16:21:06 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
16:21:06 542  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
16:21:06 544  WHEN OTHERS THEN
16:21:06 545  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 547  END GET_NEXT_OFFER;
16:21:06 548  
16:21:06 549  /******************************************************************************/
16:21:06 550  
16:21:06 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
16:21:06 552  	in_license_id IN NUMBER,
16:21:06 553  	out_group_id  OUT NUMBER
16:21:06 554  ) AS
16:21:06 555  -- VARIABLES
16:21:06 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
16:21:06 557  var_subscription_id NUMBER;
16:21:06 558  var_group_id	  NUMBER;
16:21:06 559  -- EXCEPTIONS
16:21:06 560  BAD_LICENSE_ID	   EXCEPTION;
16:21:06 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
16:21:06 562  BEGIN
16:21:06 563  
16:21:06 564  	-- Get subscription id
16:21:06 565  	BEGIN
16:21:06 566  	  SELECT
16:21:06 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
16:21:06 568  	  FROM
16:21:06 569  	    LICENSE
16:21:06 570  	  WHERE
16:21:06 571  	    LICENSE.ID = in_license_id;
16:21:06 572  	  EXCEPTION
16:21:06 573  	    WHEN NO_DATA_FOUND THEN
16:21:06 574  	      RAISE BAD_LICENSE_ID;
16:21:06 575  	END;
16:21:06 576  
16:21:06 577  	-- Get group id
16:21:06 578  	BEGIN
16:21:06 579  	  SELECT
16:21:06 580  	    ACCOUNT.GROUP_ID into var_group_id
16:21:06 581  	  FROM
16:21:06 582  	    SUBSCRIPTION
16:21:06 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:21:06 584  	  WHERE
16:21:06 585  	    SUBSCRIPTION.ID = var_subscription_id;
16:21:06 586  	  EXCEPTION
16:21:06 587  	    WHEN NO_DATA_FOUND THEN
16:21:06 588  	      RAISE CAN_NOT_GET_GROUP_ID;
16:21:06 589  	END;
16:21:06 590  
16:21:06 591  	out_group_id := var_group_id;
16:21:06 592  
16:21:06 593  EXCEPTION
16:21:06 594  WHEN BAD_LICENSE_ID THEN
16:21:06 595  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 596  	  SPROC_NAME, 'No such license');
16:21:06 597  WHEN CAN_NOT_GET_GROUP_ID THEN
16:21:06 598  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 599  	  SPROC_NAME, 'Could not get group id');
16:21:06 600  WHEN OTHERS THEN
16:21:06 601  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 603  END GET_GROUP_ID_BY_LICENSE_ID;
16:21:06 604  
16:21:06 605  /******************************************************************************/
16:21:06 606  
16:21:06 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
16:21:06 608  	out_result_set OUT SYS_REFCURSOR
16:21:06 609  ) AS
16:21:06 610  BEGIN
16:21:06 611  	OPEN out_result_set FOR
16:21:06 612  SELECT * FROM
16:21:06 613  (
16:21:06 614  	SELECT
16:21:06 615  	  LICENSE.ID,
16:21:06 616  	  LICENSE.INVOICE_ID,
16:21:06 617  	  LICENSE.IS_EXTENSION,
16:21:06 618  	  LICENSE.START_DATE,
16:21:06 619  	  LICENSE.END_DATE,
16:21:06 620  	  LICENSE.ENTITLEMENT_END_DATE,
16:21:06 621  	  LICENSE.CURRENT_OFFER_INDEX,
16:21:06 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
16:21:06 623  	  LICENSE.CREATE_DATE,
16:21:06 624  	  LICENSE.CREATED_BY,
16:21:06 625  	  LICENSE.LICENSE_STATUS_ID,
16:21:06 626  	  LICENSE.OFFER_ID,
16:21:06 627  	  LICENSE.SUBSCRIPTION_ID,
16:21:06 628  	  LICENSE.UPDATE_DATE,
16:21:06 629  	  LICENSE.UPDATED_BY,
16:21:06 630  	  LICENSE.NEEDS_ENTITLEMENTS
16:21:06 631  	FROM
16:21:06 632  	  LICENSE
16:21:06 633  	WHERE
16:21:06 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE
16:21:06 635  	AND ROWNUM <= 5000
16:21:06 636  	ORDER BY dbms_random.value
16:21:06 637  ) WHERE
16:21:06 638  	ROWNUM <= 500;
16:21:06 639  
16:21:06 640  END GET_NEED_ENTITLEMENTS_LICENSES;
16:21:06 641  
16:21:06 642  /******************************************************************************/
16:21:06 643  
16:21:06 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
16:21:06 645  	in_license_id	      IN NUMBER,
16:21:06 646  	in_needs_entitlements IN NUMBER,
16:21:06 647  	in_updated_by	      IN VARCHAR2
16:21:06 648  ) AS
16:21:06 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
16:21:06 650  -- VARIABLES
16:21:06 651  temp_license_id NUMBER;
16:21:06 652  -- EXCEPTIONS
16:21:06 653  BAD_LICENSE_ID	     EXCEPTION;
16:21:06 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
16:21:06 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06 656  BEGIN
16:21:06 657  
16:21:06 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V16.TRUE
16:21:06 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:06 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
16:21:06 661  	END IF;
16:21:06 662  
16:21:06 663  	BEGIN
16:21:06 664  	  SELECT
16:21:06 665  	    LICENSE.ID into temp_license_id
16:21:06 666  	  FROM
16:21:06 667  	    LICENSE
16:21:06 668  	  WHERE
16:21:06 669  	    LICENSE.ID = in_license_id;
16:21:06 670  	  EXCEPTION
16:21:06 671  	    WHEN NO_DATA_FOUND THEN
16:21:06 672  	      RAISE BAD_LICENSE_ID;
16:21:06 673  	END;
16:21:06 674  
16:21:06 675  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:06 676  	  in_license_id 	=> in_license_id,
16:21:06 677  	  in_needs_entitlements => in_needs_entitlements,
16:21:06 678  	  in_updated_by 	=> in_updated_by
16:21:06 679  	);
16:21:06 680  
16:21:06 681  EXCEPTION
16:21:06 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
16:21:06 683  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 684  	  SPROC_NAME, 'Bad entitlements flag value');
16:21:06 685  WHEN BAD_LICENSE_ID THEN
16:21:06 686  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 687  	  SPROC_NAME, 'No such license');
16:21:06 688  WHEN OTHERS THEN
16:21:06 689  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
16:21:06 692  
16:21:06 693  
16:21:06 694  /******************************************************************************/
16:21:06 695  
16:21:06 696  PROCEDURE GET_ENDED_GC_LICENSES (
16:21:06 697  	out_result_set		OUT SYS_REFCURSOR,
16:21:06 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:21:06 699  	in_num_rows		IN NUMBER DEFAULT 10000,
16:21:06 700  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:06 701  ) AS
16:21:06 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
16:21:06 703  var_days		NUMBER;
16:21:06 704  var_hours 	NUMBER;
16:21:06 705  var_time_interval INTERVAL DAY (3) TO SECOND;
16:21:06 706  BEGIN
16:21:06 707  	var_hours := mod(in_hours_number,24);
16:21:06 708  	var_days := (in_hours_number - var_hours) / 24;
16:21:06 709  	var_time_interval := var_days||' '||var_hours||':0:0';
16:21:06 710  	OPEN out_result_set FOR
16:21:06 711  SELECT * FROM
16:21:06 712  (
16:21:06 713  	SELECT
16:21:06 714  	  l.ID,
16:21:06 715  	  l.CREATE_DATE,
16:21:06 716  	  l.CREATED_BY,
16:21:06 717  	  l.CURRENT_OFFER_INDEX,
16:21:06 718  	  l.CURRENT_OFFER_RECURR_NUM,
16:21:06 719  	  l.END_DATE,
16:21:06 720  	  l.ENTITLEMENT_END_DATE,
16:21:06 721  	  l.INVOICE_ID,
16:21:06 722  	  l.IS_EXTENSION,
16:21:06 723  	  l.LICENSE_STATUS_ID,
16:21:06 724  	  l.OFFER_ID,
16:21:06 725  	  l.START_DATE,
16:21:06 726  	  l.SUBSCRIPTION_ID,
16:21:06 727  	  l.UPDATE_DATE,
16:21:06 728  	  l.UPDATED_BY
16:21:06 729  	FROM
16:21:06 730  	  GIFT_CERTIFICATE gc
16:21:06 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
16:21:06 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
16:21:06 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
16:21:06 734  	WHERE
16:21:06 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
16:21:06 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
16:21:06 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
16:21:06 739  	  AND NOT EXISTS (
16:21:06 740  	    SELECT NULL
16:21:06 741  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:06 742  	    WHERE PROCESS_NAME = in_process_name
16:21:06 743  	      AND GENERIC_ID = l.ID
16:21:06 744  	  )
16:21:06 745  	  AND ROWNUM <= in_num_rows*10
16:21:06 746  	  ORDER BY dbms_random.value
16:21:06 747  ) WHERE
16:21:06 748  	  ROWNUM <= in_num_rows
16:21:06 749  	  GROUP BY SUBSCRIPTION_ID;
16:21:06 750  EXCEPTION
16:21:06 751  WHEN OTHERS THEN
16:21:06 752  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 754  END GET_ENDED_GC_LICENSES;
16:21:06 755  
16:21:06 756  PROCEDURE GET_LICENSE_BY_ID (
16:21:06 757  	in_license_id  IN NUMBER,
16:21:06 758  	out_result_set OUT SYS_REFCURSOR
16:21:06 759  ) AS
16:21:06 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
16:21:06 761  -- VARIABLES
16:21:06 762  temp_license_id NUMBER;
16:21:06 763  -- EXCEPTIONS
16:21:06 764  BAD_LICENSE_ID EXCEPTION;
16:21:06 765  BEGIN
16:21:06 766  
16:21:06 767  	BEGIN
16:21:06 768  	  SELECT
16:21:06 769  	    l.id into temp_license_id
16:21:06 770  	  FROM
16:21:06 771  	    license l
16:21:06 772  	  WHERE
16:21:06 773  	    l.id = in_license_id;
16:21:06 774  	  EXCEPTION
16:21:06 775  	    WHEN NO_DATA_FOUND THEN
16:21:06 776  	      RAISE BAD_LICENSE_ID;
16:21:06 777  	END;
16:21:06 778  
16:21:06 779  	OPEN out_result_set FOR
16:21:06 780  	SELECT
16:21:06 781  	  l.id,
16:21:06 782  	  l.license_status_id,
16:21:06 783  	  l.subscription_id,
16:21:06 784  	  l.invoice_id,
16:21:06 785  	  l.offer_id,
16:21:06 786  	  l.start_date,
16:21:06 787  	  l.end_date,
16:21:06 788  	  l.entitlement_end_date,
16:21:06 789  	  l.is_extension,
16:21:06 790  	  l.create_date,
16:21:06 791  	  l.created_by,
16:21:06 792  	  l.update_date,
16:21:06 793  	  l.updated_by,
16:21:06 794  	  l.current_offer_index,
16:21:06 795  	  l.current_offer_recurr_num,
16:21:06 796  	  l.needs_entitlements
16:21:06 797  	FROM
16:21:06 798  	  LICENSE l
16:21:06 799  	WHERE
16:21:06 800  	  l.id = in_license_id;
16:21:06 801  
16:21:06 802  EXCEPTION
16:21:06 803  WHEN BAD_LICENSE_ID THEN
16:21:06 804  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 805  	  SPROC_NAME, 'No such license');
16:21:06 806  WHEN OTHERS THEN
16:21:06 807  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 809  END GET_LICENSE_BY_ID;
16:21:06 810  
16:21:06 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
16:21:06 812  	in_subscription_id IN NUMBER,
16:21:06 813  	in_end_date IN DATE,
16:21:06 814  	in_updated_by IN VARCHAR2
16:21:06 815  ) AS
16:21:06 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
16:21:06 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06 818  var_latest_lice NUMBER;
16:21:06 819  BEGIN
16:21:06 820  	SELECT max(id)
16:21:06 821  	INTO  var_latest_lice
16:21:06 822  	FROM LICENSE
16:21:06 823  	WHERE
16:21:06 824  	  subscription_id = in_subscription_id
16:21:06 825  	;
16:21:06 826  
16:21:06 827  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:06 828  	  in_license_id        => var_latest_lice,
16:21:06 829  	  in_updated_by        => in_updated_by,
16:21:06 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE,
16:21:06 831  	  in_end_date	       => in_end_date,
16:21:06 832  	  in_entitlement_end_date => in_end_date
16:21:06 833  	);
16:21:06 834  
16:21:06 835  EXCEPTION
16:21:06 836  WHEN NO_DATA_FOUND THEN
16:21:06 837  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
16:21:06 839  WHEN OTHERS THEN
16:21:06 840  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 842  END UP_LATEST_LICE_END_BY_SUBID;
16:21:06 843  
16:21:06 844  END PROCS_LICENSE_V16;
16:21:06 845  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.10
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V16" AS
16:21:06   2  
16:21:06   3  PROCEDURE CREATE_CHARGE(
16:21:06   4  /*
16:21:06   5  Throws exceptions:
16:21:06   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06   8  */
16:21:06   9  	in_invoice_id	      IN NUMBER,
16:21:06  10  	in_transaction_id     IN NUMBER,
16:21:06  11  	in_instrument_type_id IN NUMBER,
16:21:06  12  	in_instrument_id      IN NUMBER,
16:21:06  13  	in_charge_amount      IN NUMBER,
16:21:06  14  	in_created_by	      IN VARCHAR2,
16:21:06  15  	in_charge_status_id   IN NUMBER,
16:21:06  16  	out_charge_id	      OUT NUMBER
16:21:06  17  ) AS
16:21:06  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
16:21:06  19  -- VARIABLES
16:21:06  20  temp_invoice_id	  NUMBER;
16:21:06  21  temp_transaction_id NUMBER;
16:21:06  22  var_new_charge_id   NUMBER;
16:21:06  23  -- EXCEPTIONS
16:21:06  24  BAD_INVOICE_ID	     EXCEPTION;
16:21:06  25  BAD_TRANSACTION_ID     EXCEPTION;
16:21:06  26  BAD_PAYPAL_ID	     EXCEPTION;
16:21:06  27  BAD_CREDIT_CARD_ID     EXCEPTION;
16:21:06  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
16:21:06  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
16:21:06  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06  31  BEGIN
16:21:06  32  	-- Check that incoming data is correct
16:21:06  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
16:21:06  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
16:21:06  35  	  RAISE BAD_INSTRUMENT_TYPE;
16:21:06  36  	END IF;
16:21:06  37  
16:21:06  38  	-- Check that status is correct
16:21:06  39  	IF in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_OPENED
16:21:06  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_PROCESSED
16:21:06  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
16:21:06  42  	  RAISE BAD_CHARGE_STATUS_ID;
16:21:06  43  	END IF;
16:21:06  44  
16:21:06  45  	-- Check that invoice exists
16:21:06  46  	BEGIN
16:21:06  47  	  SELECT
16:21:06  48  	    INVOICE.ID into temp_invoice_id
16:21:06  49  	  FROM
16:21:06  50  	    INVOICE
16:21:06  51  	  WHERE
16:21:06  52  	    INVOICE.ID = in_invoice_id;
16:21:06  53  	  EXCEPTION
16:21:06  54  	    WHEN NO_DATA_FOUND THEN
16:21:06  55  	      RAISE BAD_INVOICE_ID;
16:21:06  56  	END;
16:21:06  57  
16:21:06  58  	-- Check that transaction exists
16:21:06  59  	BEGIN
16:21:06  60  	  SELECT
16:21:06  61  	    TRANSACTION.ID into temp_transaction_id
16:21:06  62  	  FROM
16:21:06  63  	    TRANSACTION
16:21:06  64  	  WHERE
16:21:06  65  	    TRANSACTION.ID = in_transaction_id;
16:21:06  66  	  EXCEPTION
16:21:06  67  	    WHEN NO_DATA_FOUND THEN
16:21:06  68  	      RAISE BAD_TRANSACTION_ID;
16:21:06  69  	END;
16:21:06  70  
16:21:06  71  	-- Check that instrument exists
16:21:06  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
16:21:06  73  	  IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:06  74  	    RAISE BAD_CREDIT_CARD_ID;
16:21:06  75  	  END IF;
16:21:06  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
16:21:06  77  	  IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:06  78  	    RAISE BAD_PAYPAL_ID;
16:21:06  79  	  END IF;
16:21:06  80  	END IF;
16:21:06  81  
16:21:06  82  	-- Create new charge
16:21:06  83  	PROCS_CHARGE_CRU_V16.CREATE_CHARGE(
16:21:06  84  	  out_charge_id 	=> var_new_charge_id,
16:21:06  85  	  in_invoice_id 	=> in_invoice_id,
16:21:06  86  	  in_transaction_id	=> in_transaction_id,
16:21:06  87  	  in_instrument_type_id => in_instrument_type_id,
16:21:06  88  	  in_instrument_id	=> in_instrument_id,
16:21:06  89  	  in_charge_amount	=> in_charge_amount,
16:21:06  90  	  in_charge_status_id	=> in_charge_status_id,
16:21:06  91  	  in_created_by 	=> in_created_by
16:21:06  92  	);
16:21:06  93  
16:21:06  94  	out_charge_id := var_new_charge_id;
16:21:06  95  
16:21:06  96  EXCEPTION
16:21:06  97  WHEN BAD_CHARGE_STATUS_ID THEN
16:21:06  98  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
16:21:06 100  WHEN BAD_INSTRUMENT_TYPE THEN
16:21:06 101  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 102  	  PROCS_NAME, 'Bad instrument type id');
16:21:06 103  WHEN BAD_INVOICE_ID THEN
16:21:06 104  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 105  	  PROCS_NAME, 'No such invoice');
16:21:06 106  WHEN BAD_TRANSACTION_ID THEN
16:21:06 107  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 108  	  PROCS_NAME, 'No such transaction');
16:21:06 109  WHEN BAD_PAYPAL_ID THEN
16:21:06 110  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 111  	  PROCS_NAME, 'No such paypal');
16:21:06 112  WHEN BAD_CREDIT_CARD_ID THEN
16:21:06 113  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 114  	  PROCS_NAME, 'No such credit card');
16:21:06 115  WHEN OTHERS THEN
16:21:06 116  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
16:21:06 118  END CREATE_CHARGE;
16:21:06 119  
16:21:06 120  /********************************************************/
16:21:06 121  -- norlov #38562 :
16:21:06 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
16:21:06 123  /*
16:21:06 124  Throws exceptions:
16:21:06 125  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 126  */
16:21:06 127  	out_result_set	    OUT SYS_REFCURSOR,
16:21:06 128  	in_row_number	    IN NUMBER DEFAULT NULL
16:21:06 129  ) AS
16:21:06 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
16:21:06 131  -- COMSTANTS
16:21:06 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
16:21:06 133  -- VARIABLES
16:21:06 134  var_row_number NUMBER;
16:21:06 135  BEGIN
16:21:06 136  	IF in_row_number IS NULL THEN
16:21:06 137  	  var_row_number := DEFAULT_ROW_NUMBER;
16:21:06 138  	ELSE
16:21:06 139  	  var_row_number := in_row_number;
16:21:06 140  	END IF;
16:21:06 141  
16:21:06 142  	-- Select charges
16:21:06 143  	OPEN out_result_set FOR
16:21:06 144  SELECT * FROM
16:21:06 145  (
16:21:06 146  	SELECT
16:21:06 147  	  CHARGE.ID,
16:21:06 148  	  CHARGE.TRANSACTION_ID,
16:21:06 149  	  CHARGE.INSTRUMENT_ID,
16:21:06 150  	  CHARGE.INSTRUMENT_TYPE_ID,
16:21:06 151  	  CHARGE.CHARGE_AMOUNT,
16:21:06 152  	  CHARGE.CREATE_DATE,
16:21:06 153  	  CHARGE.CREATED_BY,
16:21:06 154  	  CHARGE.INVOICE_ID
16:21:06 155  	FROM
16:21:06 156  	  CHARGE
16:21:06 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:21:06 158  	WHERE
16:21:06 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
16:21:06 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V16.TRUE
16:21:06 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
16:21:06 162  	  AND NOT EXISTS
16:21:06 163  	  (
16:21:06 164  	    SELECT NULL
16:21:06 165  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:06 166  	    WHERE PROCESS_NAME = SPROC_NAME
16:21:06 167  	      AND GENERIC_ID = CHARGE.ID
16:21:06 168  	  )
16:21:06 169  	  AND ROWNUM <= var_row_number*10
16:21:06 170  	  ORDER BY dbms_random.value
16:21:06 171  ) WHERE
16:21:06 172  	  ROWNUM <= var_row_number;
16:21:06 173  
16:21:06 174  END GET_PENDING_REFUND_CHARGES;
16:21:06 175  /******************************************************************************/
16:21:06 176  
16:21:06 177  PROCEDURE GET_UNPROCESSED_CHARGES (
16:21:06 178  /*
16:21:06 179  Throws exceptions:
16:21:06 180  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 181  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 182  */
16:21:06 183  	in_invoice_id  IN NUMBER,
16:21:06 184  	out_result_set OUT SYS_REFCURSOR
16:21:06 185  ) AS
16:21:06 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
16:21:06 187  -- VARIABLES
16:21:06 188  temp_invoice_id NUMBER;
16:21:06 189  -- EXCEPTIONS
16:21:06 190  BAD_INVOICE_ID EXCEPTION;
16:21:06 191  BEGIN
16:21:06 192  
16:21:06 193  	-- Check that invoice exists
16:21:06 194  	BEGIN
16:21:06 195  	  SELECT
16:21:06 196  	    INVOICE.ID into temp_invoice_id
16:21:06 197  	  FROM
16:21:06 198  	    INVOICE
16:21:06 199  	  WHERE
16:21:06 200  	    INVOICE.ID = in_invoice_id;
16:21:06 201  	  EXCEPTION
16:21:06 202  	    WHEN NO_DATA_FOUND THEN
16:21:06 203  	      RAISE BAD_INVOICE_ID;
16:21:06 204  	END;
16:21:06 205  
16:21:06 206  	-- Select charges
16:21:06 207  	OPEN out_result_set FOR
16:21:06 208  	SELECT
16:21:06 209  	  CHARGE.ID,
16:21:06 210  	  CHARGE.TRANSACTION_ID,
16:21:06 211  	  CHARGE.INSTRUMENT_ID,
16:21:06 212  	  CHARGE.INSTRUMENT_TYPE_ID,
16:21:06 213  	  CHARGE.CHARGE_AMOUNT,
16:21:06 214  	  CHARGE.CREATE_DATE,
16:21:06 215  	  CHARGE.CREATED_BY,
16:21:06 216  	  CHARGE.INVOICE_ID
16:21:06 217  	FROM
16:21:06 218  	  CHARGE
16:21:06 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:21:06 220  	WHERE
16:21:06 221  	  CHARGE.INVOICE_ID = in_invoice_id
16:21:06 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
16:21:06 223  	  AND
16:21:06 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
16:21:06 225  
16:21:06 226  EXCEPTION
16:21:06 227  WHEN BAD_INVOICE_ID THEN
16:21:06 228  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 229  	  SPROC_NAME, 'No such invoice');
16:21:06 230  WHEN OTHERS THEN
16:21:06 231  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 233  END GET_UNPROCESSED_CHARGES;
16:21:06 234  
16:21:06 235  /******************************************************************************/
16:21:06 236  
16:21:06 237  PROCEDURE GET_PROCESSED_CHARGES (
16:21:06 238  /*
16:21:06 239  Throws exceptions:
16:21:06 240  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 241  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 242  */
16:21:06 243  	in_invoice_id  IN NUMBER,
16:21:06 244  	out_result_set OUT SYS_REFCURSOR
16:21:06 245  ) AS
16:21:06 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
16:21:06 247  -- VARIABLES
16:21:06 248  temp_invoice_id NUMBER;
16:21:06 249  -- EXCEPTIONS
16:21:06 250  BAD_INVOICE_ID  EXCEPTION;
16:21:06 251  BEGIN
16:21:06 252  
16:21:06 253  	-- Check that invoice exists
16:21:06 254  	BEGIN
16:21:06 255  	  SELECT
16:21:06 256  	    INVOICE.ID into temp_invoice_id
16:21:06 257  	  FROM
16:21:06 258  	    INVOICE
16:21:06 259  	  WHERE
16:21:06 260  	    INVOICE.ID = in_invoice_id;
16:21:06 261  	  EXCEPTION
16:21:06 262  	    WHEN NO_DATA_FOUND THEN
16:21:06 263  	      RAISE BAD_INVOICE_ID;
16:21:06 264  	END;
16:21:06 265  
16:21:06 266  	-- Select charges
16:21:06 267  	OPEN out_result_set FOR
16:21:06 268  	SELECT /*+ STAR_TRANSFORMATION */
16:21:06 269  	  CHARGE.ID,
16:21:06 270  	  CHARGE.TRANSACTION_ID,
16:21:06 271  	  CHARGE.INSTRUMENT_ID,
16:21:06 272  	  CHARGE.INSTRUMENT_TYPE_ID,
16:21:06 273  	  CHARGE.CHARGE_AMOUNT,
16:21:06 274  	  CHARGE.CREATE_DATE,
16:21:06 275  	  CHARGE.CREATED_BY,
16:21:06 276  	  CHARGE.INVOICE_ID
16:21:06 277  	FROM
16:21:06 278  	  CHARGE
16:21:06 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:21:06 280  	WHERE
16:21:06 281  	  CHARGE.INVOICE_ID = in_invoice_id
16:21:06 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
16:21:06 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_CLOSED;
16:21:06 284  
16:21:06 285  EXCEPTION
16:21:06 286  WHEN BAD_INVOICE_ID THEN
16:21:06 287  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 288  	  SPROC_NAME, 'No such invoice');
16:21:06 289  WHEN OTHERS THEN
16:21:06 290  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 292  END GET_PROCESSED_CHARGES;
16:21:06 293  
16:21:06 294  /******************************************************************************/
16:21:06 295  
16:21:06 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
16:21:06 297  /*
16:21:06 298  Throws exceptions:
16:21:06 299  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 300  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 301  */
16:21:06 302  	in_charge_id	    IN NUMBER,
16:21:06 303  	out_subscription_id OUT NUMBER
16:21:06 304  ) AS
16:21:06 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
16:21:06 306  -- VARIABLES
16:21:06 307  var_invoice_id	  NUMBER;
16:21:06 308  var_subscription_id NUMBER;
16:21:06 309  -- EXCEPTIONS
16:21:06 310  BAD_CHARGE_ID		EXCEPTION;
16:21:06 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
16:21:06 312  BEGIN
16:21:06 313  
16:21:06 314  	BEGIN
16:21:06 315  	  SELECT
16:21:06 316  	    CHARGE.INVOICE_ID into var_invoice_id
16:21:06 317  	  FROM
16:21:06 318  	    CHARGE
16:21:06 319  	  WHERE
16:21:06 320  	    CHARGE.ID = in_charge_id;
16:21:06 321  	  EXCEPTION
16:21:06 322  	    WHEN NO_DATA_FOUND THEN
16:21:06 323  	      RAISE BAD_CHARGE_ID;
16:21:06 324  	END;
16:21:06 325  
16:21:06 326  	BEGIN
16:21:06 327  	  SELECT
16:21:06 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
16:21:06 329  	  FROM
16:21:06 330  	    LICENSE
16:21:06 331  	  WHERE
16:21:06 332  	    LICENSE.INVOICE_ID = var_invoice_id
16:21:06 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
16:21:06 334  	  EXCEPTION
16:21:06 335  	    WHEN NO_DATA_FOUND THEN
16:21:06 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
16:21:06 337  	END;
16:21:06 338  
16:21:06 339  	out_subscription_id := var_subscription_id;
16:21:06 340  
16:21:06 341  EXCEPTION
16:21:06 342  WHEN BAD_CHARGE_ID THEN
16:21:06 343  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 344  	  SPROC_NAME, 'No such charge');
16:21:06 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
16:21:06 346  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 347  	  SPROC_NAME, 'Could not find subscription for given charge');
16:21:06 348  WHEN OTHERS THEN
16:21:06 349  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
16:21:06 352  
16:21:06 353  /******************************************************************************/
16:21:06 354  
16:21:06 355  PROCEDURE UPDATE_CHARGE_STATUS (
16:21:06 356  /*
16:21:06 357  Throws exceptions:
16:21:06 358  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 359  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 360  */
16:21:06 361  	in_charge_id	    IN CHARGE.ID%TYPE,
16:21:06 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:21:06 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
16:21:06 364  ) AS
16:21:06 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
16:21:06 366  -- EXCEPTIONS
16:21:06 367  BAD_CHARGE_ID	     EXCEPTION;
16:21:06 368  BAD_STATUS_ID	     EXCEPTION;
16:21:06 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06 370  BEGIN
16:21:06 371  
16:21:06 372  	IF in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_OPENED
16:21:06 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_PROCESSED
16:21:06 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
16:21:06 375  	  RAISE BAD_STATUS_ID;
16:21:06 376  	END IF;
16:21:06 377  
16:21:06 378  	PROCS_CHARGE_CRU_V16.UPDATE_CHARGE(
16:21:06 379  	  in_charge_id	      => in_charge_id,
16:21:06 380  	  in_charge_status_id => in_charge_status_id,
16:21:06 381  	  in_updated_by       => in_updated_by
16:21:06 382  	);
16:21:06 383  
16:21:06 384  	IF SQL%ROWCOUNT = 0 THEN
16:21:06 385  	  RAISE BAD_CHARGE_ID;
16:21:06 386  	END IF;
16:21:06 387  
16:21:06 388  EXCEPTION
16:21:06 389  WHEN BAD_CHARGE_ID THEN
16:21:06 390  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 391  	  SPROC_NAME, 'No such charge');
16:21:06 392  WHEN BAD_STATUS_ID THEN
16:21:06 393  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 394  	  SPROC_NAME, 'Bad status id');
16:21:06 395  WHEN OTHERS THEN
16:21:06 396  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 398  END UPDATE_CHARGE_STATUS;
16:21:06 399  
16:21:06 400  FUNCTION IS_CHARGE_COLLECTED (
16:21:06 401  /*
16:21:06 402  Throws:
16:21:06 403  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 404  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 405  Returns:
16:21:06 406  GLOBAL_CONST.TRUE if transaction collected,
16:21:06 407  GLOBAL_CONST.FALSE else
16:21:06 408  */
16:21:06 409  	in_charge_id IN NUMBER
16:21:06 410  ) RETURN NUMBER AS
16:21:06 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
16:21:06 412  -- VARIABLES
16:21:06 413  var_transaction_id NUMBER;
16:21:06 414  is_transaction_collected NUMBER;
16:21:06 415  -- EXCEPTIONS
16:21:06 416  BAD_CHARGE_ID	       EXCEPTION;
16:21:06 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
16:21:06 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
16:21:06 419  BEGIN
16:21:06 420  
16:21:06 421  	BEGIN
16:21:06 422  	  SELECT
16:21:06 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
16:21:06 424  	  FROM
16:21:06 425  	    CHARGE
16:21:06 426  	  WHERE
16:21:06 427  	    CHARGE.ID = in_charge_id;
16:21:06 428  	  EXCEPTION
16:21:06 429  	    WHEN NO_DATA_FOUND THEN
16:21:06 430  	      RAISE BAD_CHARGE_ID;
16:21:06 431  	END;
16:21:06 432  
16:21:06 433  	BEGIN
16:21:06 434  	  is_transaction_collected := PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(var_transaction_id);
16:21:06 435  	  EXCEPTION
16:21:06 436  	    WHEN OTHERS THEN
16:21:06 437  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:06 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
16:21:06 439  	END;
16:21:06 440  
16:21:06 441  	RETURN is_transaction_collected;
16:21:06 442  
16:21:06 443  EXCEPTION
16:21:06 444  WHEN BAD_CHARGE_ID THEN
16:21:06 445  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 446  	  SPROC_NAME, 'No such charge');
16:21:06 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
16:21:06 448  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
16:21:06 450  WHEN OTHERS THEN
16:21:06 451  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 453  END;
16:21:06 454  
16:21:06 455  PROCEDURE GET_COLLECTED_CHARGES (
16:21:06 456  /*
16:21:06 457  Throws exceptions:
16:21:06 458  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 459  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 460  */
16:21:06 461  	in_invoice_id  IN NUMBER,
16:21:06 462  	out_result_set OUT SYS_REFCURSOR
16:21:06 463  ) AS
16:21:06 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
16:21:06 465  -- VARIABLES
16:21:06 466  temp_invoice_id NUMBER;
16:21:06 467  -- EXCEPTIONS
16:21:06 468  BAD_INVOICE_ID  EXCEPTION;
16:21:06 469  BEGIN
16:21:06 470  
16:21:06 471  	-- Check that invoice exists
16:21:06 472  	BEGIN
16:21:06 473  	  SELECT
16:21:06 474  	    INVOICE.ID into temp_invoice_id
16:21:06 475  	  FROM
16:21:06 476  	    INVOICE
16:21:06 477  	  WHERE
16:21:06 478  	    INVOICE.ID = in_invoice_id;
16:21:06 479  	  EXCEPTION
16:21:06 480  	    WHEN NO_DATA_FOUND THEN
16:21:06 481  	      RAISE BAD_INVOICE_ID;
16:21:06 482  	END;
16:21:06 483  
16:21:06 484  	-- Select charges
16:21:06 485  	OPEN out_result_set FOR
16:21:06 486  	SELECT
16:21:06 487  	  CHARGE.ID,
16:21:06 488  	  CHARGE.TRANSACTION_ID,
16:21:06 489  	  CHARGE.INSTRUMENT_ID,
16:21:06 490  	  CHARGE.INSTRUMENT_TYPE_ID,
16:21:06 491  	  CHARGE.CHARGE_AMOUNT,
16:21:06 492  	  CHARGE.CREATE_DATE,
16:21:06 493  	  CHARGE.CREATED_BY,
16:21:06 494  	  CHARGE.INVOICE_ID
16:21:06 495  	FROM
16:21:06 496  	  CHARGE
16:21:06 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:21:06 498  	WHERE
16:21:06 499  	  CHARGE.INVOICE_ID = in_invoice_id
16:21:06 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
16:21:06 501  	  AND PROCS_CHARGE_V16.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V16.TRUE;
16:21:06 502  
16:21:06 503  EXCEPTION
16:21:06 504  WHEN BAD_INVOICE_ID THEN
16:21:06 505  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 506  	  SPROC_NAME, 'No such invoice');
16:21:06 507  WHEN OTHERS THEN
16:21:06 508  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 510  END GET_COLLECTED_CHARGES;
16:21:06 511  
16:21:06 512  END PROCS_CHARGE_V16;
16:21:06 513  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:21:06 SQL> 
16:21:06 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V16" AS
16:21:06   2  
16:21:06   3  PROCEDURE START_SUBSCRIPTION_CREATION (
16:21:06   4  	in_group_id	      IN NUMBER,
16:21:06   5  	in_created_by	      IN VARCHAR2,
16:21:06   6  	in_offer_chain_id     IN NUMBER,
16:21:06   7  	in_instrument_type_id IN NUMBER,
16:21:06   8  	in_instrument_id      IN NUMBER,
16:21:06   9  	in_agent_id	      IN NUMBER,
16:21:06  10  	in_note 	      IN VARCHAR2,
16:21:06  11  	out_subscription_id   OUT NUMBER,
16:21:06  12  	out_invoice_id	      OUT NUMBER,
16:21:06  13  	out_new_license_id    OUT NUMBER,
16:21:06  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
16:21:06  15  ) AS
16:21:06  16  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
16:21:06  17  -- VARIABLES
16:21:06  18  var_account_id		 NUMBER;
16:21:06  19  var_account_status	 NUMBER;
16:21:06  20  var_offer_chain_status_id  NUMBER;
16:21:06  21  var_is_gift_certificate	 NUMBER;
16:21:06  22  var_is_for_redemption	 NUMBER;
16:21:06  23  var_same_offer_chains_num  NUMBER;
16:21:06  24  var_max_concurrent_subscrs NUMBER;
16:21:06  25  var_first_offer_id	 NUMBER;
16:21:06  26  var_new_invoice_id	 NUMBER;
16:21:06  27  var_new_subscription_id	 NUMBER;
16:21:06  28  var_date			 DATE := SYSDATE;
16:21:06  29  var_account_tax_exempt_id  VARCHAR2(255);
16:21:06  30  var_concur_subscription_id NUMBER;
16:21:06  31  -- EXCEPTIONS
16:21:06  32  BAD_GROUP_ID		    EXCEPTION;
16:21:06  33  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
16:21:06  34  BAD_OFFER_CHAIN		    EXCEPTION;
16:21:06  35  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
16:21:06  36  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
16:21:06  37  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
16:21:06  38  LIMIT_REACHED		    EXCEPTION;
16:21:06  39  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
16:21:06  40  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
16:21:06  41  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
16:21:06  42  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
16:21:06  43  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
16:21:06  44  CAN_NOT_CREATE_NOTE	    EXCEPTION;
16:21:06  45  
16:21:06  46  EXCEPTION_MESSAGE VARCHAR2(1024);
16:21:06  47  BEGIN
16:21:06  48  
16:21:06  49  	-- Get account id and status
16:21:06  50  	BEGIN
16:21:06  51  	  SELECT
16:21:06  52  	    ACCOUNT.ID,
16:21:06  53  	    ACCOUNT.ACCOUNT_STATUS_ID,
16:21:06  54  	    ACCOUNT.TAX_EXEMPT_ID
16:21:06  55  	    into
16:21:06  56  	    var_account_id,
16:21:06  57  	    var_account_status,
16:21:06  58  	    var_account_tax_exempt_id
16:21:06  59  	  FROM
16:21:06  60  	    ACCOUNT
16:21:06  61  	  WHERE
16:21:06  62  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:06  63  	  EXCEPTION
16:21:06  64  	  WHEN NO_DATA_FOUND THEN
16:21:06  65  	    RAISE BAD_GROUP_ID;
16:21:06  66  	END;
16:21:06  67  
16:21:06  68  	-- Could not create subscription for disabled account
16:21:06  69  	IF var_account_status = GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
16:21:06  70  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
16:21:06  71  	END IF;
16:21:06  72  
16:21:06  73  	-- Get offer chain status
16:21:06  74  	BEGIN
16:21:06  75  	  SELECT
16:21:06  76  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
16:21:06  77  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
16:21:06  78  	    into
16:21:06  79  	    var_offer_chain_status_id,
16:21:06  80  	    var_is_gift_certificate
16:21:06  81  	  FROM
16:21:06  82  	    OFFER_CHAIN
16:21:06  83  	  WHERE
16:21:06  84  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:21:06  85  
16:21:06  86  	  EXCEPTION
16:21:06  87  	    WHEN NO_DATA_FOUND THEN
16:21:06  88  	      RAISE BAD_OFFER_CHAIN;
16:21:06  89  	END;
16:21:06  90  
16:21:06  91  	-- Could not subscribe to inactive/disabled offer chain
16:21:06  92  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
16:21:06  93  	  RAISE BAD_OFFER_CHAIN_STATUS;
16:21:06  94  	END IF;
16:21:06  95  
16:21:06  96  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
16:21:06  97  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V16.TRUE THEN
16:21:06  98  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
16:21:06  99  	END IF;
16:21:06 100  
16:21:06 101  	-- check if the OC is for Redemption:
16:21:06 102  	SELECT
16:21:06 103  	  COUNT(*) into var_is_for_redemption
16:21:06 104  	FROM
16:21:06 105  	  OFFER_CHAIN_ELIGIBILITY
16:21:06 106  	WHERE
16:21:06 107  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:21:06 108  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
16:21:06 109  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
16:21:06 110  
16:21:06 111  	IF var_is_for_redemption > 0 THEN
16:21:06 112  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
16:21:06 113  	END IF;
16:21:06 114  
16:21:06 115  	SELECT
16:21:06 116  	  COUNT(*) into var_same_offer_chains_num
16:21:06 117  	FROM
16:21:06 118  	  SUBSCRIPTION
16:21:06 119  	WHERE
16:21:06 120  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:06 121  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
16:21:06 122  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
16:21:06 123  
16:21:06 124  	-- ELIGIBILITY LOGIC CHANGED TO:
16:21:06 125  	-- FOR EACH offer chain eligibility rule in OC:
16:21:06 126  	--   IF offer chain eligibility rule fails:
16:21:06 127  	--     deny purchase;
16:21:06 128  	--   END IF
16:21:06 129  	-- END FOR
16:21:06 130  	-- FOR EACH product eligibility rule in OC:
16:21:06 131  	--   IF product eligibilty rule fails:
16:21:06 132  	--     deny purchase;
16:21:06 133  	--   END IF
16:21:06 134  	-- END FOR
16:21:06 135  	-- allow purchase;
16:21:06 136  
16:21:06 137  	-- if user have any active existing subscriptions to the offer chain
16:21:06 138  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
16:21:06 139  	-- then deny purchase
16:21:06 140  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
16:21:06 141  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V16.INFINITY
16:21:06 142  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
16:21:06 143  	  -- Find first concurrent subscription id:
16:21:06 144  	  SELECT
16:21:06 145  	    ID into var_concur_subscription_id
16:21:06 146  	  FROM (
16:21:06 147  	    SELECT
16:21:06 148  	      ID
16:21:06 149  	    FROM
16:21:06 150  	      SUBSCRIPTION
16:21:06 151  	    WHERE
16:21:06 152  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:06 153  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
16:21:06 154  	      AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 155  	    ORDER BY
16:21:06 156  	      ID
16:21:06 157  	  )
16:21:06 158  	  WHERE
16:21:06 159  	    ROWNUM <= 1;
16:21:06 160  	  RAISE LIMIT_REACHED;
16:21:06 161  	END IF;
16:21:06 162  
16:21:06 163  	-- if user does not have any active existing subscriptions to the offer chain
16:21:06 164  	-- and if product from the offer chain is already owned from another offer chain
16:21:06 165  	-- then deny purchase
16:21:06 166  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V16.FALSE) THEN
16:21:06 167  	  FOR f_account_offer_chains IN (
16:21:06 168  	    SELECT DISTINCT
16:21:06 169  	      OFFER_CHAIN_ID
16:21:06 170  	    FROM
16:21:06 171  	      SUBSCRIPTION
16:21:06 172  	    WHERE
16:21:06 173  	      ACCOUNT_ID = var_account_id
16:21:06 174  	      AND (
16:21:06 175  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 176  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED)
16:21:06 177  	  )
16:21:06 178  	  LOOP
16:21:06 179  	    IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(
16:21:06 180  	      in_offer_chain_1	       => in_offer_chain_id,
16:21:06 181  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
16:21:06 182  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V16.TRUE
16:21:06 183  	    ) = GLOBAL_CONSTANTS_V16.TRUE THEN
16:21:06 184  
16:21:06 185  	      -- Find first concurrent subscription id:
16:21:06 186  	      SELECT
16:21:06 187  		ID into var_concur_subscription_id
16:21:06 188  	      FROM (
16:21:06 189  		SELECT
16:21:06 190  		  ID
16:21:06 191  		FROM
16:21:06 192  		  SUBSCRIPTION
16:21:06 193  		WHERE
16:21:06 194  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:06 195  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
16:21:06 196  		  AND (
16:21:06 197  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 198  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
16:21:06 199  		  )
16:21:06 200  		ORDER BY
16:21:06 201  		  ID
16:21:06 202  	      )
16:21:06 203  	      WHERE
16:21:06 204  		ROWNUM <= 1;
16:21:06 205  
16:21:06 206  	      RAISE PRODUCT_ALREADY_PURCHASED;
16:21:06 207  	    END IF;
16:21:06 208  	  END LOOP;
16:21:06 209  	END IF;
16:21:06 210  
16:21:06 211  	BEGIN
16:21:06 212  	  PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
16:21:06 213  	  EXCEPTION
16:21:06 214  	    WHEN OTHERS THEN
16:21:06 215  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:06 216  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
16:21:06 217  	END;
16:21:06 218  
16:21:06 219  	BEGIN
16:21:06 220  	  PROCS_INVOICE_V16.CREATE_INVOICE(
16:21:06 221  	    in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
16:21:06 222  	    in_created_by     => in_created_by,
16:21:06 223  	    in_tax_exempt_id  => var_account_tax_exempt_id,
16:21:06 224  	    out_invoice_id    => var_new_invoice_id
16:21:06 225  	  );
16:21:06 226  	  EXCEPTION
16:21:06 227  	    WHEN OTHERS THEN
16:21:06 228  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:06 229  	      RAISE CAN_NOT_CREATE_INVOICE;
16:21:06 230  	END;
16:21:06 231  
16:21:06 232  	BEGIN
16:21:06 233  	  PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
16:21:06 234  	    in_invoice_id => var_new_invoice_id,
16:21:06 235  	    in_offer_id   => var_first_offer_id,
16:21:06 236  	    in_created_by => in_created_by
16:21:06 237  	  );
16:21:06 238  	  EXCEPTION
16:21:06 239  	    WHEN OTHERS THEN
16:21:06 240  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:06 241  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
16:21:06 242  	END;
16:21:06 243  
16:21:06 244  	PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION(
16:21:06 245  	  out_subscription_id	    => var_new_subscription_id,
16:21:06 246  	  in_account_id 	    => var_account_id,
16:21:06 247  	  in_purchase_date	    => var_date,
16:21:06 248  	  in_offer_chain_id	    => in_offer_chain_id,
16:21:06 249  	  in_created_by 	    => in_created_by,
16:21:06 250  	  in_instrument_type_id     => in_instrument_type_id,
16:21:06 251  	  in_instrument_id	    => in_instrument_id,
16:21:06 252  	  in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 253  	);
16:21:06 254  
16:21:06 255  	BEGIN
16:21:06 256  	  PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
16:21:06 257  	    in_subscription_id => var_new_subscription_id,
16:21:06 258  	    in_agent_id        => in_agent_id,
16:21:06 259  	    in_note	       => in_note,
16:21:06 260  	    in_created_by      => in_created_by
16:21:06 261  	  );
16:21:06 262  	  EXCEPTION
16:21:06 263  	   WHEN OTHERS THEN
16:21:06 264  	     EXCEPTION_MESSAGE := SQLERRM;
16:21:06 265  	     RAISE CAN_NOT_CREATE_NOTE;
16:21:06 266  	END;
16:21:06 267  
16:21:06 268  	BEGIN
16:21:06 269  	  PROCS_LICENSE_V16.CREATE_LICENSE(
16:21:06 270  	    in_status_id		=> GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
16:21:06 271  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V16.TRUE,
16:21:06 272  	    in_start_date		=> var_date,
16:21:06 273  	    in_end_date 		=> NULL, -- Will be calculated automatically
16:21:06 274  	    in_offer_id 		=> var_first_offer_id,
16:21:06 275  	    in_subscription_id		=> var_new_subscription_id,
16:21:06 276  	    in_invoice_id		=> var_new_invoice_id,
16:21:06 277  	    in_created_by		=> in_created_by,
16:21:06 278  	    in_is_extension		=> GLOBAL_CONSTANTS_V16.FALSE,
16:21:06 279  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
16:21:06 280  	    in_current_offer_recurr_num => 1,
16:21:06 281  	    out_license_id		=> out_new_license_id
16:21:06 282  	  );
16:21:06 283  	  EXCEPTION
16:21:06 284  	    WHEN OTHERS THEN
16:21:06 285  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:06 286  	      RAISE CAN_NOT_CREATE_LICENSE;
16:21:06 287  	END;
16:21:06 288  
16:21:06 289  	out_subscription_id := var_new_subscription_id;
16:21:06 290  	out_invoice_id := var_new_invoice_id;
16:21:06 291  
16:21:06 292  EXCEPTION
16:21:06 293  WHEN BAD_OFFER_CHAIN_STATUS THEN
16:21:06 294  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 295  	  SPROC_NAME, 'Offer chain is not active');
16:21:06 296  WHEN LIMIT_REACHED THEN
16:21:06 297  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
16:21:06 298  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
16:21:06 299  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
16:21:06 300  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 301  	  SPROC_NAME, 'Can not create subsscription for disabled account');
16:21:06 302  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
16:21:06 303  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 304  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
16:21:06 305  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
16:21:06 306  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 307  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
16:21:06 308  WHEN BAD_OFFER_CHAIN THEN
16:21:06 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 310  	  SPROC_NAME, 'No such offer chain');
16:21:06 311  WHEN PRODUCT_ALREADY_PURCHASED THEN
16:21:06 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
16:21:06 313  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
16:21:06 314  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
16:21:06 315  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 316  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
16:21:06 317  WHEN CAN_NOT_CREATE_INVOICE THEN
16:21:06 318  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 319  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
16:21:06 320  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
16:21:06 321  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 322  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
16:21:06 323  WHEN CAN_NOT_CREATE_LICENSE THEN
16:21:06 324  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 325  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
16:21:06 326  WHEN BAD_GROUP_ID THEN
16:21:06 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 328  	  SPROC_NAME, 'Bad group id');
16:21:06 329  WHEN CAN_NOT_CREATE_NOTE THEN
16:21:06 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 331  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:21:06 332  WHEN OTHERS THEN
16:21:06 333  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 334  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 335  END START_SUBSCRIPTION_CREATION;
16:21:06 336  
16:21:06 337  /******************************************************************************/
16:21:06 338  
16:21:06 339  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
16:21:06 340  	in_subscription_id    IN NUMBER,
16:21:06 341  	in_invoice_id	      IN NUMBER,
16:21:06 342  	in_instrument_type_id IN NUMBER,
16:21:06 343  	in_instrument_id      IN NUMBER,
16:21:06 344  	in_created_by	      IN VARCHAR2
16:21:06 345  ) AS
16:21:06 346  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
16:21:06 347  -- VARIABLES
16:21:06 348  var_invoice_amount     NUMBER(10, 2);
16:21:06 349  var_new_transaction_id NUMBER;
16:21:06 350  var_new_charge_id      NUMBER;
16:21:06 351  -- EXCEPTIONS
16:21:06 352  CAN_NOT_USE_FCINSTR	  EXCEPTION;
16:21:06 353  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
16:21:06 354  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
16:21:06 355  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
16:21:06 356  
16:21:06 357  EXCEPTION_MESSAGE VARCHAR2(1024);
16:21:06 358  BEGIN
16:21:06 359  
16:21:06 360  	-- Calculate invoice amount ( + discounts, taxes)
16:21:06 361  	BEGIN
16:21:06 362  	  PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(
16:21:06 363  	    in_invoice_id => in_invoice_id,
16:21:06 364  	    out_amount	  => var_invoice_amount
16:21:06 365  	  );
16:21:06 366  	  EXCEPTION
16:21:06 367  	   WHEN OTHERS THEN
16:21:06 368  	     EXCEPTION_MESSAGE := SQLERRM;
16:21:06 369  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:21:06 370  	END;
16:21:06 371  
16:21:06 372  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT
16:21:06 373  	  AND var_invoice_amount > 0 THEN
16:21:06 374  	  RAISE CAN_NOT_USE_FCINSTR;
16:21:06 375  	END IF;
16:21:06 376  
16:21:06 377  	IF var_invoice_amount = 0 THEN
16:21:06 378  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
16:21:06 379  	  PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
16:21:06 380  	    in_invoice_id		   => in_invoice_id,
16:21:06 381  	    in_updated_by		   => in_created_by,
16:21:06 382  	    in_invoice_status_id	   => GLOBAL_STATUSES_V16.INVOICE_CLOSED
16:21:06 383  	  );
16:21:06 384  	ELSE
16:21:06 385  	  -- Create transaction and charge
16:21:06 386  	  BEGIN
16:21:06 387  	    PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
16:21:06 388  	      in_transaction_id  => NULL,
16:21:06 389  	      in_status_id	 => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
16:21:06 390  	      in_amount 	 => var_invoice_amount,
16:21:06 391  	      in_created_by	 => in_created_by,
16:21:06 392  	      in_order_id	 => NULL,
16:21:06 393  	      out_transaction_id => var_new_transaction_id
16:21:06 394  	    );
16:21:06 395  	    EXCEPTION
16:21:06 396  	      WHEN OTHERS THEN
16:21:06 397  		EXCEPTION_MESSAGE := SQLERRM;
16:21:06 398  		RAISE CAN_NOT_CREATE_TRANSACTION;
16:21:06 399  	  END;
16:21:06 400  
16:21:06 401  	  BEGIN
16:21:06 402  	    PROCS_CHARGE_V16.CREATE_CHARGE(
16:21:06 403  	      in_invoice_id	    => in_invoice_id,
16:21:06 404  	      in_transaction_id     => var_new_transaction_id,
16:21:06 405  	      in_instrument_type_id => in_instrument_type_id,
16:21:06 406  	      in_instrument_id	    => in_instrument_id,
16:21:06 407  	      in_charge_amount	    => var_invoice_amount,
16:21:06 408  	      in_created_by	    => in_created_by,
16:21:06 409  	      in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
16:21:06 410  	      out_charge_id	    => var_new_charge_id
16:21:06 411  	    );
16:21:06 412  	    EXCEPTION
16:21:06 413  	      WHEN OTHERS THEN
16:21:06 414  		EXCEPTION_MESSAGE := SQLERRM;
16:21:06 415  		RAISE CAN_NOT_CREATE_CHARGE;
16:21:06 416  	  END;
16:21:06 417  	END IF;
16:21:06 418  
16:21:06 419  EXCEPTION
16:21:06 420  WHEN CAN_NOT_USE_FCINSTR THEN
16:21:06 421  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 422  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
16:21:06 423  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:21:06 424  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 425  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
16:21:06 426  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:21:06 427  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 428  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:21:06 429  WHEN CAN_NOT_CREATE_CHARGE THEN
16:21:06 430  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 431  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:21:06 432  WHEN OTHERS THEN
16:21:06 433  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 434  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 435  END FINALIZE_SUBSCRIPTION_CREATION;
16:21:06 436  
16:21:06 437  /******************************************************************************/
16:21:06 438  
16:21:06 439  PROCEDURE SUSPEND_SUBSCRIPTION(
16:21:06 440  /*
16:21:06 441  Throws exceptions:
16:21:06 442  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 443  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:06 444  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 445  */
16:21:06 446  	  in_subs_id	IN NUMBER,
16:21:06 447  	  in_updated_by IN VARCHAR2
16:21:06 448  ) AS
16:21:06 449  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
16:21:06 450  var_subscription_status_id  NUMBER;
16:21:06 451  var_license_id		  NUMBER;
16:21:06 452  var_offer_id		  NUMBER;
16:21:06 453  var_license_start_date	  DATE;
16:21:06 454  var_license_end_date	  DATE;
16:21:06 455  
16:21:06 456  var_entitlement_dupration   VARCHAR2(30);
16:21:06 457  var_d_entitlement_dupration NUMBER;
16:21:06 458  
16:21:06 459  var_ym_interval INTERVAL YEAR TO MONTH;
16:21:06 460  var_ds_interval INTERVAL DAY(3) TO SECOND;
16:21:06 461  
16:21:06 462  -- EXCEPTIONS
16:21:06 463  BAD_SUBSCRIPTION_ID     EXCEPTION;
16:21:06 464  BAD_SUBSCRIPTION_STATUS EXCEPTION;
16:21:06 465  NO_LICENSE_FOUND	      EXCEPTION;
16:21:06 466  NO_OFFER_FOUND	      EXCEPTION;
16:21:06 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:21:06 468  BEGIN
16:21:06 469  	-- TODO: Finish this prcedure (in Phase II)
16:21:06 470  
16:21:06 471  	-- Get subscription by id. FAULT if no such subscription.
16:21:06 472  	-- begin TX
16:21:06 473  	--   Get for update associated license (subscription.license_id). FAULT if not found.
16:21:06 474  	--   Set status to PROCESSED.
16:21:06 475  	--   updated record.
16:21:06 476  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
16:21:06 477  	--   new subscription status is SUSPENDED.
16:21:06 478  	--   suspend_date is now.
16:21:06 479  	--   update subscription record.
16:21:06 480  	-- end TX
16:21:06 481  
16:21:06 482  	BEGIN
16:21:06 483  	  SELECT
16:21:06 484  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
16:21:06 485  	  FROM
16:21:06 486  	    SUBSCRIPTION
16:21:06 487  	  WHERE
16:21:06 488  	    SUBSCRIPTION.ID = in_subs_id;
16:21:06 489  	  EXCEPTION
16:21:06 490  	  WHEN NO_DATA_FOUND THEN
16:21:06 491  	    RAISE BAD_SUBSCRIPTION_ID;
16:21:06 492  	END;
16:21:06 493  
16:21:06 494  	IF var_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE THEN
16:21:06 495  	  RAISE BAD_SUBSCRIPTION_STATUS;
16:21:06 496  	END IF;
16:21:06 497  
16:21:06 498  	BEGIN
16:21:06 499  	  SELECT
16:21:06 500  	    LICENSE.ID,
16:21:06 501  	    LICENSE.OFFER_ID,
16:21:06 502  	    LICENSE.START_DATE
16:21:06 503  	    into
16:21:06 504  	    var_license_id,
16:21:06 505  	    var_offer_id,
16:21:06 506  	    var_license_start_date
16:21:06 507  	  FROM
16:21:06 508  	    LICENSE
16:21:06 509  	  WHERE
16:21:06 510  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
16:21:06 511  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE;
16:21:06 512  	  EXCEPTION
16:21:06 513  	  WHEN NO_DATA_FOUND THEN
16:21:06 514  	    RAISE NO_LICENSE_FOUND;
16:21:06 515  	END;
16:21:06 516  
16:21:06 517  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:06 518  	  in_license_id        => var_license_id,
16:21:06 519  	  in_updated_by        => in_updated_by,
16:21:06 520  	  in_license_status_id => GLOBAL_STATUSES_V16.LICENSE_CLOSED
16:21:06 521  	);
16:21:06 522  
16:21:06 523  	BEGIN
16:21:06 524  	  SELECT
16:21:06 525  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
16:21:06 526  	  FROM
16:21:06 527  	    OFFER
16:21:06 528  	  WHERE
16:21:06 529  	    OFFER.ID = var_offer_id;
16:21:06 530  	  EXCEPTION
16:21:06 531  	  WHEN NO_DATA_FOUND THEN
16:21:06 532  	    RAISE NO_OFFER_FOUND;
16:21:06 533  	END;
16:21:06 534  
16:21:06 535  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
16:21:06 536  	var_ds_interval := substr(var_entitlement_dupration, 4);
16:21:06 537  
16:21:06 538  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
16:21:06 539  
16:21:06 540  	var_d_entitlement_dupration := var_license_end_date - current_date;
16:21:06 541  
16:21:06 542  	PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
16:21:06 543  	  in_subscription_id	       => in_subs_id,
16:21:06 544  	  in_updated_by 	       => in_updated_by,
16:21:06 545  	  in_suspend_date	       => SYSDATE,
16:21:06 546  	  in_subscription_status_id    => GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED,
16:21:06 547  	  in_days_remainning_ajustment => var_d_entitlement_dupration
16:21:06 548  	);
16:21:06 549  
16:21:06 550  EXCEPTION
16:21:06 551  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 552  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 553  	  SPROC_NAME, 'No such subscription');
16:21:06 554  WHEN BAD_SUBSCRIPTION_STATUS THEN
16:21:06 555  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 556  	  SPROC_NAME, 'Subscription is not active');
16:21:06 557  WHEN NO_LICENSE_FOUND THEN
16:21:06 558  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 559  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
16:21:06 560  WHEN NO_OFFER_FOUND THEN
16:21:06 561  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 562  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
16:21:06 563  WHEN OTHERS THEN
16:21:06 564  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 565  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 566  END SUSPEND_SUBSCRIPTION;
16:21:06 567  
16:21:06 568  /******************************************************************************/
16:21:06 569  
16:21:06 570  PROCEDURE REACTIVATE_SUBSCRIPTION (
16:21:06 571  	in_subscription_id IN  NUMBER,
16:21:06 572  	in_updated_by	   IN  VARCHAR2
16:21:06 573  ) AS
16:21:06 574  BEGIN
16:21:06 575  	-- TODO: finish this function (in Phase II)
16:21:06 576  	NULL;
16:21:06 577  END REACTIVATE_SUBSCRIPTION;
16:21:06 578  
16:21:06 579  /******************************************************************************/
16:21:06 580  
16:21:06 581  PROCEDURE GET_SUBSCRIPTION_INFO (
16:21:06 582  /*
16:21:06 583  Throws exceptions:
16:21:06 584  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 585  */
16:21:06 586  	  in_subscription_id  IN  NUMBER,
16:21:06 587  	  out_result_set      OUT SYS_REFCURSOR
16:21:06 588  ) AS
16:21:06 589  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
16:21:06 590  -- VARIABLES
16:21:06 591  temp_subscription_id NUMBER;
16:21:06 592  -- EXCEPTIONS
16:21:06 593  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 594  BEGIN
16:21:06 595  	-- Find subscription by id
16:21:06 596  	-- Return its details
16:21:06 597  
16:21:06 598  	BEGIN
16:21:06 599  	  SELECT
16:21:06 600  	    SUBSCRIPTION.ID into temp_subscription_id
16:21:06 601  	  FROM
16:21:06 602  	    SUBSCRIPTION
16:21:06 603  	  WHERE
16:21:06 604  	    SUBSCRIPTION.ID = in_subscription_id;
16:21:06 605  	  EXCEPTION
16:21:06 606  	    WHEN NO_DATA_FOUND THEN
16:21:06 607  	      RAISE BAD_SUBSCRIPTION_ID;
16:21:06 608  	END;
16:21:06 609  
16:21:06 610  	OPEN out_result_set FOR
16:21:06 611  	SELECT
16:21:06 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
16:21:06 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
16:21:06 614  	  SUBSCRIPTION.PURCHASE_DATE,
16:21:06 615  	  SUBSCRIPTION.SUSPEND_DATE,
16:21:06 616  	  SUBSCRIPTION.REACTIVATION_DATE,
16:21:06 617  	  SUBSCRIPTION.CANCELLATION_DATE,
16:21:06 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
16:21:06 619  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
16:21:06 620  	  OFFER_CHAIN.NAME,
16:21:06 621  	  OFFER_CHAIN.DESCRIPTION,
16:21:06 622  	  OFFER_CHAIN.PRODUCT_URI,
16:21:06 623  	  SUBSCRIPTION.INSTRUMENT_ID,
16:21:06 624  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
16:21:06 625  	  --PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_END_DATE(OFFER_CHAIN.ID, SUBSCRIPTION.PURCHASE_DATE) as "END_DATE",
16:21:06 626  	  PROCS_SUBSCRIPTION_V16.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
16:21:06 627  	  PROCS_SUBSCRIPTION_V16.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
16:21:06 628  	  PROCS_SUBSCRIPTION_V16.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
16:21:06 629  	  PROCS_SUBSCRIPTION_V16.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
16:21:06 630  	  (
16:21:06 631  	    SELECT
16:21:06 632  	      ACCOUNT.GROUP_ID
16:21:06 633  	      FROM ACCOUNT
16:21:06 634  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
16:21:06 635  	  ) as "GROUP_ID",
16:21:06 636  	  (
16:21:06 637  	    SELECT
16:21:06 638  	      MAX(ENTITLEMENT_END_DATE)
16:21:06 639  	      FROM LICENSE
16:21:06 640  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 641  	  )
16:21:06 642  	  as "ENT_END_DATE",
16:21:06 643  	  (
16:21:06 644  	    SELECT
16:21:06 645  	      MIN(START_DATE)
16:21:06 646  	      FROM LICENSE
16:21:06 647  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 648  	  )
16:21:06 649  	  as "ENT_START_DATE",
16:21:06 650  	  PROCS_SUBSCRIPTION_V16.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
16:21:06 651  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
16:21:06 652  	  GROUP_ACCOUNT.ID GA_ID,
16:21:06 653  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
16:21:06 654  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
16:21:06 655  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
16:21:06 656  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
16:21:06 657  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
16:21:06 658  	  GROUP_ACCOUNT.PHONE GA_PHONE,
16:21:06 659  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
16:21:06 660  	  GROUP_ACCOUNT.SEATS GA_SEATS,
16:21:06 661  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
16:21:06 662  	  GROUP_ACCOUNT.IP GA_IP,
16:21:06 663  	  PROCS_SUBSCRIPTION_V16.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code
16:21:06 664  	FROM
16:21:06 665  	  SUBSCRIPTION
16:21:06 666  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:06 667  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
16:21:06 668  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
16:21:06 669  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
16:21:06 670  	WHERE
16:21:06 671  	  SUBSCRIPTION.ID = in_subscription_id;
16:21:06 672  
16:21:06 673  EXCEPTION
16:21:06 674  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 675  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 676  	  SPROC_NAME, 'No such subscription');
16:21:06 677  WHEN OTHERS THEN
16:21:06 678  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 680  END GET_SUBSCRIPTION_INFO;
16:21:06 681  
16:21:06 682  /******************************************************************************/
16:21:06 683  
16:21:06 684  PROCEDURE GET_SUBSCRIPTION_INVOICES (
16:21:06 685  /*
16:21:06 686  Throws exceptions:
16:21:06 687  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 688  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 689  */
16:21:06 690  	in_subscription_id  IN	NUMBER,
16:21:06 691  	out_result_set	    OUT SYS_REFCURSOR
16:21:06 692  ) AS
16:21:06 693  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
16:21:06 694  temp_subscription_id NUMBER;
16:21:06 695  BEGIN
16:21:06 696  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
16:21:06 697  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
16:21:06 698  	--   for each license
16:21:06 699  	--     get associated invoice
16:21:06 700  	--     add to results list
16:21:06 701  	--   end loop
16:21:06 702  	-- end
16:21:06 703  
16:21:06 704  	SELECT
16:21:06 705  	  SUBSCRIPTION.ID into temp_subscription_id
16:21:06 706  	FROM
16:21:06 707  	  SUBSCRIPTION
16:21:06 708  	WHERE
16:21:06 709  	  SUBSCRIPTION.ID = in_subscription_id;
16:21:06 710  
16:21:06 711  	OPEN out_result_set FOR
16:21:06 712  	SELECT
16:21:06 713  	  INVOICE.ID,
16:21:06 714  	  INVOICE.INVOICE_STATUS_ID,
16:21:06 715  	  INVOICE.CREATE_DATE,
16:21:06 716  	  INVOICE.CREATED_BY,
16:21:06 717  	  INVOICE.UPDATE_DATE,
16:21:06 718  	  INVOICE.UPDATED_BY,
16:21:06 719  	  INVOICE.TAX_EXEMPT_ID
16:21:06 720  	FROM
16:21:06 721  	  LICENSE
16:21:06 722  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:21:06 723  	WHERE
16:21:06 724  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
16:21:06 725  
16:21:06 726  EXCEPTION
16:21:06 727  WHEN NO_DATA_FOUND THEN
16:21:06 728  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 729  	  SPROC_NAME, 'Could not find subscription with given ID');
16:21:06 730  WHEN OTHERS THEN
16:21:06 731  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 732  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 733  END GET_SUBSCRIPTION_INVOICES;
16:21:06 734  
16:21:06 735  /******************************************************************************/
16:21:06 736  
16:21:06 737  PROCEDURE GET_SUBSCRIPTION_NOTES (
16:21:06 738  /*
16:21:06 739  Throws exceptions:
16:21:06 740  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 741  */
16:21:06 742  	in_subscription_id  IN	NUMBER,
16:21:06 743  	out_result_set	    OUT SYS_REFCURSOR
16:21:06 744  ) AS
16:21:06 745  -- VARIABLES
16:21:06 746  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
16:21:06 747  temp_subscription_id NUMBER;
16:21:06 748  -- EXCEPTIONS
16:21:06 749  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 750  BEGIN
16:21:06 751  
16:21:06 752  	-- Check that subscription exists
16:21:06 753  	BEGIN
16:21:06 754  	  SELECT
16:21:06 755  	    SUBSCRIPTION.ID into temp_subscription_id
16:21:06 756  	  FROM
16:21:06 757  	    SUBSCRIPTION
16:21:06 758  	  WHERE
16:21:06 759  	    SUBSCRIPTION.ID = in_subscription_id;
16:21:06 760  	  EXCEPTION
16:21:06 761  	    WHEN NO_DATA_FOUND THEN
16:21:06 762  	      RAISE BAD_SUBSCRIPTION_ID;
16:21:06 763  	END;
16:21:06 764  
16:21:06 765  	OPEN out_result_set FOR
16:21:06 766  	SELECT
16:21:06 767  	  SUBSCRIPTION_NOTE.NOTE,
16:21:06 768  	  SUBSCRIPTION_NOTE.CREATED_BY,
16:21:06 769  	  SUBSCRIPTION_NOTE.CREATE_DATE
16:21:06 770  	FROM
16:21:06 771  	  SUBSCRIPTION_NOTE
16:21:06 772  	WHERE
16:21:06 773  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
16:21:06 774  	ORDER BY
16:21:06 775  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
16:21:06 776  
16:21:06 777  EXCEPTION
16:21:06 778  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 779  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 780  	  SPROC_NAME, 'No such subscription');
16:21:06 781  WHEN OTHERS THEN
16:21:06 782  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 784  END GET_SUBSCRIPTION_NOTES;
16:21:06 785  
16:21:06 786  /******************************************************************************/
16:21:06 787  
16:21:06 788  PROCEDURE ANNOTATE_SUBSCRIPTION (
16:21:06 789  /*
16:21:06 790  Throws exceptions:
16:21:06 791  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 792  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 793  */
16:21:06 794  	in_subscription_id IN  NUMBER,
16:21:06 795  	in_agent_id	   IN  NUMBER,
16:21:06 796  	in_note 	   IN  VARCHAR2,
16:21:06 797  	in_created_by	   IN  VARCHAR2
16:21:06 798  ) AS
16:21:06 799  -- VARIABLES
16:21:06 800  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
16:21:06 801  temp_subscription_id     NUMBER;
16:21:06 802  var_subscription_note_id NUMBER;
16:21:06 803  -- EXCEPTIONS
16:21:06 804  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 805  BEGIN
16:21:06 806  
16:21:06 807  	-- Check that subscription exists
16:21:06 808  	BEGIN
16:21:06 809  	  SELECT
16:21:06 810  	    SUBSCRIPTION.ID into temp_subscription_id
16:21:06 811  	  FROM
16:21:06 812  	    SUBSCRIPTION
16:21:06 813  	  WHERE
16:21:06 814  	    SUBSCRIPTION.ID = in_subscription_id;
16:21:06 815  	  EXCEPTION
16:21:06 816  	    WHEN NO_DATA_FOUND THEN
16:21:06 817  	      RAISE BAD_SUBSCRIPTION_ID;
16:21:06 818  	END;
16:21:06 819  
16:21:06 820  	PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION_NOTE(
16:21:06 821  	  inout_subscription_note_id => var_subscription_note_id,
16:21:06 822  	  in_agent_id		     => in_agent_id,
16:21:06 823  	  in_subscription_id	     => in_subscription_id,
16:21:06 824  	  in_note		     => in_note,
16:21:06 825  	  in_created_by 	     => in_created_by
16:21:06 826  	);
16:21:06 827  
16:21:06 828  EXCEPTION
16:21:06 829  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 830  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 831  	  SPROC_NAME, 'No such subscription');
16:21:06 832  WHEN OTHERS THEN
16:21:06 833  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 834  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 835  END ANNOTATE_SUBSCRIPTION;
16:21:06 836  
16:21:06 837  /******************************************************************************/
16:21:06 838  
16:21:06 839  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
16:21:06 840  /*
16:21:06 841  Throws exceptions:
16:21:06 842  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 843  */
16:21:06 844  	out_result_set OUT SYS_REFCURSOR
16:21:06 845  ) AS
16:21:06 846  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCELLING_SSCRPTN_REASONS';
16:21:06 847  BEGIN
16:21:06 848  
16:21:06 849  	OPEN out_result_set FOR
16:21:06 850  	SELECT
16:21:06 851  	  SUBSCRIPTION_CANCEL_REASON.ID,
16:21:06 852  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
16:21:06 853  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION
16:21:06 854  	FROM
16:21:06 855  	  SUBSCRIPTION_CANCEL_REASON
16:21:06 856  	WHERE
16:21:06 857  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCR_CANC_REASON_ACTIVE;
16:21:06 858  
16:21:06 859  EXCEPTION
16:21:06 860  WHEN OTHERS THEN
16:21:06 861  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 862  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 863  END GET_CANCELLING_SSCRPTN_REASONS;
16:21:06 864  
16:21:06 865  /******************************************************************************/
16:21:06 866  
16:21:06 867  FUNCTION GET_RENEWAL_DATE (
16:21:06 868  /*
16:21:06 869  Throws exceptions:
16:21:06 870  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 871  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 872  */
16:21:06 873  	in_subscription_id in NUMBER
16:21:06 874  ) RETURN DATE AS
16:21:06 875  -- VARIABLES
16:21:06 876  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
16:21:06 877  var_subscription_status NUMBER;
16:21:06 878  var_licenses_count      NUMBER;
16:21:06 879  var_license_end_date    DATE;
16:21:06 880  var_last_offer_id       NUMBER;
16:21:06 881  var_offer_chain_id      NUMBER;
16:21:06 882  var_last_license_id     NUMBER;
16:21:06 883  var_current_offer_index NUMBER;
16:21:06 884  var_current_offer_recurr_num NUMBER;
16:21:06 885  var_offer_recurr_num    NUMBER;
16:21:06 886  -- EXCEPTIONS
16:21:06 887  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 888  NO_LICENSES_FOUND EXCEPTION;
16:21:06 889  BEGIN
16:21:06 890  
16:21:06 891  	-- Get subscription id and offer chain id
16:21:06 892  	BEGIN
16:21:06 893  	  SELECT
16:21:06 894  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
16:21:06 895  	    SUBSCRIPTION.OFFER_CHAIN_ID
16:21:06 896  	    into
16:21:06 897  	    var_subscription_status,
16:21:06 898  	    var_offer_chain_id
16:21:06 899  	  FROM
16:21:06 900  	    SUBSCRIPTION
16:21:06 901  	  WHERE
16:21:06 902  	    SUBSCRIPTION.ID = in_subscription_id;
16:21:06 903  	  EXCEPTION
16:21:06 904  	    WHEN NO_DATA_FOUND THEN
16:21:06 905  	      RAISE BAD_SUBSCRIPTION_ID;
16:21:06 906  	END;
16:21:06 907  
16:21:06 908  	IF var_subscription_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE THEN
16:21:06 909  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
16:21:06 910  	  -- AND var_subscription_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
16:21:06 911  	  RETURN NULL;
16:21:06 912  	END IF;
16:21:06 913  
16:21:06 914  	BEGIN
16:21:06 915  	  SELECT
16:21:06 916  	    LICENSE_ID,
16:21:06 917  	    END_DATE,
16:21:06 918  	    OFFER_ID,
16:21:06 919  	    CURRENT_OFFER_INDEX,
16:21:06 920  	    CURRENT_OFFER_RECURR_NUM
16:21:06 921  	    into
16:21:06 922  	    var_last_license_id,
16:21:06 923  	    var_license_end_date,
16:21:06 924  	    var_last_offer_id,
16:21:06 925  	    var_current_offer_index,
16:21:06 926  	    var_current_offer_recurr_num
16:21:06 927  	  FROM
16:21:06 928  	    (
16:21:06 929  	      SELECT
16:21:06 930  		LICENSE.ID as "LICENSE_ID",
16:21:06 931  		LICENSE.END_DATE,
16:21:06 932  		LICENSE.OFFER_ID,
16:21:06 933  		LICENSE.CURRENT_OFFER_INDEX,
16:21:06 934  		LICENSE.CURRENT_OFFER_RECURR_NUM
16:21:06 935  	      FROM
16:21:06 936  		LICENSE
16:21:06 937  	      WHERE
16:21:06 938  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 939  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:21:06 940  	      ORDER BY END_DATE DESC
16:21:06 941  	    )
16:21:06 942  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
16:21:06 943  	  WHERE
16:21:06 944  	    ROWNUM <= 1;
16:21:06 945  
16:21:06 946  	  EXCEPTION
16:21:06 947  	    WHEN NO_DATA_FOUND THEN
16:21:06 948  	      -- RAISE NO_LICENSES_FOUND;
16:21:06 949  	      RETURN NULL;
16:21:06 950  	END;
16:21:06 951  
16:21:06 952  	SELECT
16:21:06 953  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
16:21:06 954  	FROM
16:21:06 955  	  OFFER_OFFER_CHAIN
16:21:06 956  	WHERE
16:21:06 957  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:21:06 958  	  AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
16:21:06 959  
16:21:06 960  	IF PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
16:21:06 961  	  AND var_offer_recurr_num = var_current_offer_recurr_num THEN
16:21:06 962  	  -- There is no next offer for this subscription
16:21:06 963  	  RETURN NULL;
16:21:06 964  	END IF;
16:21:06 965  
16:21:06 966  	RETURN var_license_end_date;
16:21:06 967  
16:21:06 968  EXCEPTION
16:21:06 969  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 970  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 971  	  SPROC_NAME, 'No such subscription');
16:21:06 972  WHEN NO_LICENSES_FOUND THEN
16:21:06 973  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 974  	  SPROC_NAME, 'No licenses found');
16:21:06 975  WHEN OTHERS THEN
16:21:06 976  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 977  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 978  END GET_RENEWAL_DATE;
16:21:06 979  
16:21:06 980  /******************************************************************************/
16:21:06 981  
16:21:06 982  FUNCTION GET_RECENT_CHARGE (
16:21:06 983  /*
16:21:06 984  Throws exceptions:
16:21:06 985  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 986  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 987  */
16:21:06 988  	in_subscription_id IN NUMBER
16:21:06 989  ) RETURN NUMBER AS
16:21:06 990  -- VARIABLES
16:21:06 991  SPROC_NAME	   CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
16:21:06 992  temp_subscription_id NUMBER;
16:21:06 993  var_recent_charge    NUMBER(10,2);
16:21:06 994  
16:21:06 995  -- EXCEPTIONS
16:21:06 996  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 997  BEGIN
16:21:06 998  
16:21:06 999  	BEGIN
16:21:06 1000  	   SELECT
16:21:06 1001  	     SUBSCRIPTION.ID into temp_subscription_id
16:21:06 1002  	   FROM
16:21:06 1003  	     SUBSCRIPTION
16:21:06 1004  	   WHERE
16:21:06 1005  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1006  	   EXCEPTION
16:21:06 1007  	     WHEN NO_DATA_FOUND THEN
16:21:06 1008  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 1009  	 END;
16:21:06 1010  
16:21:06 1011  	 BEGIN
16:21:06 1012  	   SELECT
16:21:06 1013  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
16:21:06 1014  	   FROM
16:21:06 1015  	     LICENSE
16:21:06 1016  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 1017  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:21:06 1018  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
16:21:06 1019  	   WHERE
16:21:06 1020  	     -- TODO: Review
16:21:06 1021  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_PROCESSED
16:21:06 1022  	     -- AND
16:21:06 1023  	     SUBSCRIPTION.ID = in_subscription_id
16:21:06 1024  	     AND CHARGE.CHARGE_AMOUNT >= 0
16:21:06 1025  	     AND ROWNUM <= 1
16:21:06 1026  	   ORDER BY
16:21:06 1027  	     LICENSE.ID ASC, CHARGE.ID DESC;
16:21:06 1028  	   EXCEPTION
16:21:06 1029  	     WHEN NO_DATA_FOUND THEN
16:21:06 1030  	       var_recent_charge := 0;
16:21:06 1031  	 END;
16:21:06 1032  
16:21:06 1033  	 RETURN var_recent_charge;
16:21:06 1034  
16:21:06 1035  EXCEPTION
16:21:06 1036  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 1037  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1038  	   SPROC_NAME, 'No such subscription');
16:21:06 1039  WHEN OTHERS THEN
16:21:06 1040  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1041  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1042  END GET_RECENT_CHARGE;
16:21:06 1043  
16:21:06 1044  /******************************************************************************/
16:21:06 1045  
16:21:06 1046  FUNCTION GET_BILLING_CYCLE (
16:21:06 1047  	 in_subscription_id IN NUMBER
16:21:06 1048  ) RETURN VARCHAR2 AS
16:21:06 1049  -- VARIABLES
16:21:06 1050  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
16:21:06 1051  temp_subscription_id NUMBER;
16:21:06 1052  var_offer_duration   VARCHAR2(30);
16:21:06 1053  
16:21:06 1054  -- EXCEPTIONS
16:21:06 1055  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 1056  BEGIN
16:21:06 1057  
16:21:06 1058  	 BEGIN
16:21:06 1059  	   SELECT
16:21:06 1060  	     SUBSCRIPTION.ID into temp_subscription_id
16:21:06 1061  	   FROM
16:21:06 1062  	     SUBSCRIPTION
16:21:06 1063  	   WHERE
16:21:06 1064  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1065  	   EXCEPTION
16:21:06 1066  	     WHEN NO_DATA_FOUND THEN
16:21:06 1067  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 1068  	 END;
16:21:06 1069  
16:21:06 1070  	 SELECT
16:21:06 1071  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
16:21:06 1072  	 FROM
16:21:06 1073  	   LICENSE
16:21:06 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 1075  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
16:21:06 1076  	 WHERE
16:21:06 1077  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_PROCESSED
16:21:06 1078  	   --AND
16:21:06 1079  	   SUBSCRIPTION.ID = in_subscription_id
16:21:06 1080  	   AND ROWNUM <= 1
16:21:06 1081  	 ORDER BY
16:21:06 1082  	   LICENSE.ID ASC;
16:21:06 1083  
16:21:06 1084  	 RETURN var_offer_duration;
16:21:06 1085  
16:21:06 1086  EXCEPTION
16:21:06 1087  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 1088  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1089  	   SPROC_NAME, 'No such subscription');
16:21:06 1090  WHEN OTHERS THEN
16:21:06 1091  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1092  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1093  END GET_BILLING_CYCLE;
16:21:06 1094  
16:21:06 1095  /******************************************************************************/
16:21:06 1096  
16:21:06 1097  PROCEDURE REFUND_SUBSCRIPTION (
16:21:06 1098  /*
16:21:06 1099  Throws exceptions:
16:21:06 1100  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1102  */
16:21:06 1103  	 in_subscription_id IN NUMBER,
16:21:06 1104  	 in_invoice_id	    IN NUMBER,
16:21:06 1105  	 in_refund_amount   IN NUMBER,
16:21:06 1106  	 in_note	    IN VARCHAR2,
16:21:06 1107  	 in_created_by	    IN VARCHAR2,
16:21:06 1108  	 out_charge_id	    OUT NUMBER
16:21:06 1109  ) AS
16:21:06 1110  -- VARIABLES
16:21:06 1111  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
16:21:06 1112  var_invoice_status_id  NUMBER;
16:21:06 1113  var_account_id	      NUMBER;
16:21:06 1114  var_account_status_id  NUMBER;
16:21:06 1115  var_new_transaction_id NUMBER;
16:21:06 1116  var_instrument_type_id NUMBER;
16:21:06 1117  var_instrument_id      NUMBER;
16:21:06 1118  var_new_charge_id      NUMBER;
16:21:06 1119  var_invoice_amount     NUMBER(10,2);
16:21:06 1120  var_refunds_before     NUMBER(10,2);
16:21:06 1121  var_charges_amount     NUMBER(10,2);
16:21:06 1122  -- EXCEPTIONS
16:21:06 1123  BAD_SUBSCRIPTION_ID	     EXCEPTION;
16:21:06 1124  ACCOUNT_IS_FROZEN	     EXCEPTION;
16:21:06 1125  BAD_INVOICE_ID		     EXCEPTION;
16:21:06 1126  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
16:21:06 1127  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
16:21:06 1128  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
16:21:06 1129  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
16:21:06 1130  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
16:21:06 1131  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
16:21:06 1132  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
16:21:06 1133  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
16:21:06 1134  EXCEPTION_MESSAGE	      VARCHAR2(1024);
16:21:06 1135  BEGIN
16:21:06 1136  
16:21:06 1137  	 BEGIN
16:21:06 1138  	   SELECT
16:21:06 1139  	     SUBSCRIPTION.INSTRUMENT_ID,
16:21:06 1140  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
16:21:06 1141  	     SUBSCRIPTION.ACCOUNT_ID
16:21:06 1142  	     into
16:21:06 1143  	     var_instrument_id,
16:21:06 1144  	     var_instrument_type_id,
16:21:06 1145  	     var_account_id
16:21:06 1146  	   FROM
16:21:06 1147  	     SUBSCRIPTION
16:21:06 1148  	   WHERE
16:21:06 1149  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1150  	   EXCEPTION
16:21:06 1151  	     WHEN NO_DATA_FOUND THEN
16:21:06 1152  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 1153  	 END;
16:21:06 1154  
16:21:06 1155  	 -- Check account status. It should not to be frozen
16:21:06 1156  	 SELECT
16:21:06 1157  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
16:21:06 1158  	 FROM
16:21:06 1159  	   ACCOUNT
16:21:06 1160  	 WHERE
16:21:06 1161  	   ACCOUNT.ID = var_account_id;
16:21:06 1162  
16:21:06 1163  	 IF var_account_status_id = GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
16:21:06 1164  	   RAISE ACCOUNT_IS_FROZEN;
16:21:06 1165  	 END IF;
16:21:06 1166  
16:21:06 1167  	 BEGIN
16:21:06 1168  	   SELECT
16:21:06 1169  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
16:21:06 1170  	   FROM
16:21:06 1171  	     INVOICE
16:21:06 1172  	   WHERE
16:21:06 1173  	     INVOICE.ID = in_invoice_id;
16:21:06 1174  	   EXCEPTION
16:21:06 1175  	     WHEN NO_DATA_FOUND THEN
16:21:06 1176  	       RAISE BAD_INVOICE_ID;
16:21:06 1177  	 END;
16:21:06 1178  
16:21:06 1179  	 IF var_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
16:21:06 1180  	   RAISE INVOICE_IS_NOT_CLOSED;
16:21:06 1181  	 END IF;
16:21:06 1182  
16:21:06 1183  	 BEGIN
16:21:06 1184  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
16:21:06 1185  	     in_invoice_id => in_invoice_id,
16:21:06 1186  	     out_amount    => var_invoice_amount
16:21:06 1187  	   );
16:21:06 1188  	   EXCEPTION
16:21:06 1189  	     WHEN OTHERS THEN
16:21:06 1190  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1191  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:21:06 1192  	 END;
16:21:06 1193  
16:21:06 1194  	 IF ( in_refund_amount > var_invoice_amount ) THEN
16:21:06 1195  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
16:21:06 1196  	 END IF;
16:21:06 1197  
16:21:06 1198  	 SELECT /*+ STAR_TRANSFORMATION */
16:21:06 1199  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
16:21:06 1200  	 FROM
16:21:06 1201  	   CHARGE
16:21:06 1202  	 WHERE
16:21:06 1203  	   CHARGE.INVOICE_ID = in_invoice_id
16:21:06 1204  	   AND (
16:21:06 1205  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
16:21:06 1206  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
16:21:06 1207  	   )
16:21:06 1208  	   AND CHARGE.CHARGE_AMOUNT < 0;
16:21:06 1209  
16:21:06 1210  	 -- Refunds are negative
16:21:06 1211  	 var_refunds_before := -var_refunds_before;
16:21:06 1212  
16:21:06 1213  	 var_charges_amount := 0;
16:21:06 1214  
16:21:06 1215  	 FOR f_processed_charges IN (
16:21:06 1216  	   SELECT
16:21:06 1217  	     CHARGE.CHARGE_AMOUNT
16:21:06 1218  	   FROM
16:21:06 1219  	     CHARGE
16:21:06 1220  	   WHERE
16:21:06 1221  	     CHARGE.INVOICE_ID = in_invoice_id
16:21:06 1222  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
16:21:06 1223  	 )
16:21:06 1224  	 LOOP
16:21:06 1225  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
16:21:06 1226  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
16:21:06 1227  	   END IF;
16:21:06 1228  	 END LOOP;
16:21:06 1229  
16:21:06 1230  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
16:21:06 1231  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
16:21:06 1232  	 END IF;
16:21:06 1233  
16:21:06 1234  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
16:21:06 1235  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
16:21:06 1236  	 END IF;
16:21:06 1237  
16:21:06 1238  	 BEGIN
16:21:06 1239  	   PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
16:21:06 1240  	     in_transaction_id	=> NULL,
16:21:06 1241  	     in_status_id	=> GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
16:21:06 1242  	     in_amount		=> -in_refund_amount,
16:21:06 1243  	     in_created_by	=> in_created_by,
16:21:06 1244  	     in_order_id	=> NULL,
16:21:06 1245  	     in_is_refund	=> GLOBAL_CONSTANTS_V16.TRUE,
16:21:06 1246  	     out_transaction_id => var_new_transaction_id
16:21:06 1247  	   );
16:21:06 1248  	   EXCEPTION
16:21:06 1249  	     WHEN OTHERS THEN
16:21:06 1250  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1251  	       RAISE CAN_NOT_CREATE_TRANSACTION;
16:21:06 1252  	 END;
16:21:06 1253  
16:21:06 1254  	 BEGIN
16:21:06 1255  	   PROCS_CHARGE_V16.CREATE_CHARGE(
16:21:06 1256  	     in_invoice_id	   => in_invoice_id,
16:21:06 1257  	     in_transaction_id	   => var_new_transaction_id,
16:21:06 1258  	     in_instrument_type_id => var_instrument_type_id,
16:21:06 1259  	     in_instrument_id	   => var_instrument_id,
16:21:06 1260  	     in_charge_amount	   => -in_refund_amount,
16:21:06 1261  	     in_created_by	   => in_created_by,
16:21:06 1262  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
16:21:06 1263  	     out_charge_id	   => var_new_charge_id
16:21:06 1264  	   );
16:21:06 1265  	   EXCEPTION
16:21:06 1266  	     WHEN OTHERS THEN
16:21:06 1267  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1268  	       RAISE CAN_NOT_CREATE_CHARGE;
16:21:06 1269  	 END;
16:21:06 1270  
16:21:06 1271  	 IF in_note IS NOT NULL THEN
16:21:06 1272  	   BEGIN
16:21:06 1273  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
16:21:06 1274  	       in_subscription_id => in_subscription_id,
16:21:06 1275  	       in_agent_id	  => 0, -- AGENT_ID??
16:21:06 1276  	       in_note		  => in_note,
16:21:06 1277  	       in_created_by	  => in_created_by
16:21:06 1278  	     );
16:21:06 1279  	     EXCEPTION
16:21:06 1280  	       WHEN OTHERS THEN
16:21:06 1281  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1282  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
16:21:06 1283  	   END;
16:21:06 1284  	 END IF;
16:21:06 1285  
16:21:06 1286  	 out_charge_id := var_new_charge_id;
16:21:06 1287  
16:21:06 1288  EXCEPTION
16:21:06 1289  WHEN INVOICE_IS_NOT_CLOSED THEN
16:21:06 1290  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 1291  	   SPROC_NAME, 'Invoice is not closed');
16:21:06 1292  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 1293  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1294  	   SPROC_NAME, 'No such subscription');
16:21:06 1295  WHEN ACCOUNT_IS_FROZEN THEN
16:21:06 1296  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 1297  	   SPROC_NAME, 'Could not refund subscription for frozen account');
16:21:06 1298  WHEN BAD_INVOICE_ID THEN
16:21:06 1299  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1300  	   SPROC_NAME, 'No such invoice');
16:21:06 1301  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:21:06 1302  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1303  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
16:21:06 1304  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
16:21:06 1305  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 1306  	   SPROC_NAME, 'Refund is greater than amount');
16:21:06 1307  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
16:21:06 1308  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 1309  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
16:21:06 1310  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
16:21:06 1311  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 1312  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
16:21:06 1313  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:21:06 1314  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1315  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:21:06 1316  WHEN CAN_NOT_CREATE_CHARGE THEN
16:21:06 1317  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1318  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:21:06 1319  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
16:21:06 1320  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1321  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:21:06 1322  WHEN OTHERS THEN
16:21:06 1323  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1324  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1325  END REFUND_SUBSCRIPTION;
16:21:06 1326  
16:21:06 1327  /******************************************************************************/
16:21:06 1328  
16:21:06 1329  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
16:21:06 1330  /*
16:21:06 1331  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1332  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:06 1333  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1334  */
16:21:06 1335  	 in_subscription_id	 IN NUMBER,
16:21:06 1336  	 in_effective_start_date IN DATE,
16:21:06 1337  	 in_effective_end_date	 IN DATE,
16:21:06 1338  	 in_note		 IN VARCHAR2,
16:21:06 1339  	 in_updated_by		 IN VARCHAR2
16:21:06 1340  ) AS
16:21:06 1341  -- VARIABLES
16:21:06 1342  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
16:21:06 1343  temp_subscription_id	    NUMBER;
16:21:06 1344  var_current_license_id	    NUMBER;
16:21:06 1345  var_current_license_start_date DATE;
16:21:06 1346  var_current_license_end_date DATE;
16:21:06 1347  var_current_offer_id	    NUMBER;
16:21:06 1348  var_current_invoice_id	    NUMBER;
16:21:06 1349  var_current_date 	    DATE;
16:21:06 1350  var_current_offer_index	    NUMBER;
16:21:06 1351  var_current_offer_recurr_num NUMBER;
16:21:06 1352  var_account_tax_exempt_id    VARCHAR2(255);
16:21:06 1353  
16:21:06 1354  var_free_invoice_id NUMBER;
16:21:06 1355  var_free_license_id NUMBER;
16:21:06 1356  var_new_license_id  NUMBER;
16:21:06 1357  var_ext_license_id  NUMBER;
16:21:06 1358  -- EXCEPTIONS
16:21:06 1359  BAD_SUBSCRIPTION_ID	     EXCEPTION;
16:21:06 1360  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
16:21:06 1361  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
16:21:06 1362  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
16:21:06 1363  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
16:21:06 1364  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
16:21:06 1365  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
16:21:06 1366  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
16:21:06 1367  EXT_START_DATE_LATER_THEN_END EXCEPTION;
16:21:06 1368  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
16:21:06 1369  EXCEPTION_MESSAGE	     VARCHAR2(1024);
16:21:06 1370  BEGIN
16:21:06 1371  
16:21:06 1372  	 var_current_date := PROCS_COMMON_V16.NORMALIZE_DATE(SYSDATE);
16:21:06 1373  
16:21:06 1374  	 -- Check that subscription exists
16:21:06 1375  	 BEGIN
16:21:06 1376  	   SELECT
16:21:06 1377  	     SUBSCRIPTION.ID into temp_subscription_id
16:21:06 1378  	   FROM
16:21:06 1379  	     SUBSCRIPTION
16:21:06 1380  	   WHERE
16:21:06 1381  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1382  	   EXCEPTION
16:21:06 1383  	     WHEN NO_DATA_FOUND THEN
16:21:06 1384  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 1385  	 END;
16:21:06 1386  
16:21:06 1387  	 -- Get account tax exempt id
16:21:06 1388  	 SELECT DISTINCT
16:21:06 1389  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
16:21:06 1390  	 FROM
16:21:06 1391  	   ACCOUNT
16:21:06 1392  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:21:06 1393  	 WHERE
16:21:06 1394  	   SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1395  
16:21:06 1396  	 -- Select current data
16:21:06 1397  	 BEGIN
16:21:06 1398  	   SELECT
16:21:06 1399  	     LICENSE.ID,
16:21:06 1400  	     LICENSE.START_DATE,
16:21:06 1401  	     LICENSE.END_DATE,
16:21:06 1402  	     LICENSE.CURRENT_OFFER_INDEX,
16:21:06 1403  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
16:21:06 1404  	     OFFER.ID,
16:21:06 1405  	     INVOICE.ID
16:21:06 1406  	   INTO
16:21:06 1407  	     var_current_license_id,
16:21:06 1408  	     var_current_license_start_date,
16:21:06 1409  	     var_current_license_end_date,
16:21:06 1410  	     var_current_offer_index,
16:21:06 1411  	     var_current_offer_recurr_num,
16:21:06 1412  	     var_current_offer_id,
16:21:06 1413  	     var_current_invoice_id
16:21:06 1414  	   FROM
16:21:06 1415  	     LICENSE
16:21:06 1416  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 1417  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
16:21:06 1418  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:21:06 1419  	   WHERE
16:21:06 1420  	     SUBSCRIPTION.ID = in_subscription_id
16:21:06 1421  	     AND PROCS_COMMON_V16.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
16:21:06 1422  	     AND PROCS_COMMON_V16.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
16:21:06 1423  	     AND ROWNUM <= 1
16:21:06 1424  	   ORDER BY
16:21:06 1425  	     LICENSE.ID DESC;
16:21:06 1426  	   EXCEPTION
16:21:06 1427  	     WHEN NO_DATA_FOUND THEN
16:21:06 1428  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
16:21:06 1429  	 END;
16:21:06 1430  
16:21:06 1431  	 IF var_current_license_end_date < in_effective_start_date THEN
16:21:06 1432  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
16:21:06 1433  	 END IF;
16:21:06 1434  
16:21:06 1435  	 IF var_current_license_start_date > in_effective_start_date THEN
16:21:06 1436  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
16:21:06 1437  	 END IF;
16:21:06 1438  
16:21:06 1439  	 IF in_effective_start_date > in_effective_end_date THEN
16:21:06 1440  	   RAISE EXT_START_DATE_LATER_THEN_END;
16:21:06 1441  	 END IF;
16:21:06 1442  
16:21:06 1443  	 -- Closing curent license
16:21:06 1444  	 BEGIN
16:21:06 1445  	   PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:06 1446  	     in_license_id	   => var_current_license_id,
16:21:06 1447  	     in_updated_by	   => in_updated_by,
16:21:06 1448  	     in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
16:21:06 1449  	     in_end_date	   => in_effective_start_date,
16:21:06 1450  	     in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE
16:21:06 1451  	   );
16:21:06 1452  	   EXCEPTION
16:21:06 1453  	     WHEN OTHERS THEN
16:21:06 1454  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1455  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
16:21:06 1456  	 END;
16:21:06 1457  
16:21:06 1458  	 -- Creating new "free" invoice
16:21:06 1459  	 BEGIN
16:21:06 1460  	   PROCS_INVOICE_V16.CREATE_INVOICE(
16:21:06 1461  	     in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_CLOSED,
16:21:06 1462  	     in_created_by     => in_updated_by,
16:21:06 1463  	     in_tax_exempt_id  => var_account_tax_exempt_id,
16:21:06 1464  	     out_invoice_id    => var_free_invoice_id
16:21:06 1465  	   );
16:21:06 1466  	   EXCEPTION
16:21:06 1467  	     WHEN OTHERS THEN
16:21:06 1468  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1469  	       RAISE CAN_NOT_CREATE_INVOICE;
16:21:06 1470  	 END;
16:21:06 1471  
16:21:06 1472  	 -- Creating new "free" license
16:21:06 1473  	 BEGIN
16:21:06 1474  	   PROCS_LICENSE_V16.CREATE_LICENSE (
16:21:06 1475  	     in_status_id		 => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
16:21:06 1476  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V16.TRUE,
16:21:06 1477  	     in_start_date		 => in_effective_start_date,
16:21:06 1478  	     in_end_date		 => in_effective_end_date,
16:21:06 1479  	     in_offer_id		 => var_current_offer_id,
16:21:06 1480  	     in_subscription_id 	 => in_subscription_id,
16:21:06 1481  	     in_invoice_id		 => var_free_invoice_id,
16:21:06 1482  	     in_created_by		 => in_updated_by,
16:21:06 1483  	     in_is_extension		 => GLOBAL_CONSTANTS_V16.TRUE,
16:21:06 1484  	     in_current_offer_index	 => var_current_offer_index,
16:21:06 1485  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
16:21:06 1486  	     out_license_id		 => var_free_license_id
16:21:06 1487  	   );
16:21:06 1488  	   EXCEPTION
16:21:06 1489  	     WHEN OTHERS THEN
16:21:06 1490  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1491  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
16:21:06 1492  	 END;
16:21:06 1493  
16:21:06 1494  	 -- Creating new license
16:21:06 1495  	 IF PROCS_COMMON_V16.NORMALIZE_DATE(var_current_license_end_date) >
16:21:06 1496  	    PROCS_COMMON_V16.NORMALIZE_DATE(in_effective_start_date) THEN
16:21:06 1497  	   BEGIN
16:21:06 1498  	     PROCS_LICENSE_V16.CREATE_LICENSE (
16:21:06 1499  	       in_status_id		   => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
16:21:06 1500  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V16.TRUE,
16:21:06 1501  	       in_start_date		   => in_effective_end_date,
16:21:06 1502  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
16:21:06 1503  	       in_offer_id		   => var_current_offer_id,
16:21:06 1504  	       in_subscription_id	   => in_subscription_id,
16:21:06 1505  	       in_invoice_id		   => var_current_invoice_id,
16:21:06 1506  	       in_created_by		   => in_updated_by,
16:21:06 1507  	       in_is_extension		   => GLOBAL_CONSTANTS_V16.FALSE,
16:21:06 1508  	       in_current_offer_index	   => var_current_offer_index,
16:21:06 1509  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
16:21:06 1510  	       out_license_id		   => var_ext_license_id
16:21:06 1511  	     );
16:21:06 1512  	     EXCEPTION
16:21:06 1513  	       WHEN OTHERS THEN
16:21:06 1514  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1515  		 RAISE CAN_NOT_CREATE_END_LICENSE;
16:21:06 1516  	   END;
16:21:06 1517  	 END IF;
16:21:06 1518  
16:21:06 1519  	 -- Create new note for subscription
16:21:06 1520  	 BEGIN
16:21:06 1521  	   PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION (
16:21:06 1522  	     in_subscription_id => in_subscription_id,
16:21:06 1523  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
16:21:06 1524  	     in_note		=> in_note,
16:21:06 1525  	     in_created_by	=> in_updated_by
16:21:06 1526  	   );
16:21:06 1527  	   EXCEPTION
16:21:06 1528  	     WHEN OTHERS THEN
16:21:06 1529  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1530  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
16:21:06 1531  	 END;
16:21:06 1532  
16:21:06 1533  EXCEPTION
16:21:06 1534  WHEN EXT_START_DATE_LATER_THEN_END THEN
16:21:06 1535  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 1536  	   SPROC_NAME, 'Extension start date is bigger then end date');
16:21:06 1537  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
16:21:06 1538  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 1539  	   SPROC_NAME, 'Extension start date is too far');
16:21:06 1540  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
16:21:06 1541  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 1542  	   SPROC_NAME, 'Extension start date is too small');
16:21:06 1543  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 1544  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1545  	   SPROC_NAME, 'No such subscription');
16:21:06 1546  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
16:21:06 1547  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1548  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
16:21:06 1549  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
16:21:06 1550  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1551  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
16:21:06 1552  WHEN CAN_NOT_CREATE_INVOICE THEN
16:21:06 1553  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1554  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
16:21:06 1555  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
16:21:06 1556  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1557  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
16:21:06 1558  WHEN CAN_NOT_CREATE_END_LICENSE THEN
16:21:06 1559  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1560  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
16:21:06 1561  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
16:21:06 1562  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1563  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
16:21:06 1564  WHEN OTHERS THEN
16:21:06 1565  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1566  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1567  END ADD_SUBSCRIPTION_EXTENSION;
16:21:06 1568  
16:21:06 1569  /******************************************************************************/
16:21:06 1570  
16:21:06 1571  FUNCTION CALC_SUBSCRIPTION_END_DATE (
16:21:06 1572  /*
16:21:06 1573  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1574  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:06 1575  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1576  Returns:
16:21:06 1577  NULL if it is impossible to calculate end date (for example,
16:21:06 1578  	 offer chain includes offer with infinity recurrences number)
16:21:06 1579  DATE else
16:21:06 1580  */
16:21:06 1581  	 in_subscription_id IN NUMBER
16:21:06 1582  ) RETURN DATE AS
16:21:06 1583  -- VARIABLES
16:21:06 1584  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
16:21:06 1585  last_license_id		     NUMBER;
16:21:06 1586  last_license_end_date	     DATE;
16:21:06 1587  last_license_offer_id	     NUMBER;
16:21:06 1588  last_license_offer_index      NUMBER;
16:21:06 1589  last_license_offer_recurr_num NUMBER;
16:21:06 1590  var_last_license_id	     NUMBER;
16:21:06 1591  var_offer_chain_id	     NUMBER;
16:21:06 1592  var_current_offer_rec_number  NUMBER;
16:21:06 1593  var_next_offers_set	     SYS_REFCURSOR;
16:21:06 1594  var_next_offer_duration	     VARCHAR2(30);
16:21:06 1595  var_next_offer_recur	     NUMBER;
16:21:06 1596  var_infinity_offers_number    NUMBER;
16:21:06 1597  
16:21:06 1598  var_result_date DATE;
16:21:06 1599  
16:21:06 1600  var_ym_interval	INTERVAL YEAR TO MONTH;
16:21:06 1601  var_ds_interval	INTERVAL DAY(3) TO SECOND;
16:21:06 1602  var_offer_years	NUMBER;
16:21:06 1603  var_offer_months NUMBER;
16:21:06 1604  var_offer_days	NUMBER;
16:21:06 1605  
16:21:06 1606  -- EXCEPTIONS
16:21:06 1607  BAD_SUBSCRIPTION_ID	  EXCEPTION;
16:21:06 1608  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
16:21:06 1609  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
16:21:06 1610  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
16:21:06 1611  EXCEPTION_MESSAGE	  VARCHAR2(1024);
16:21:06 1612  BEGIN
16:21:06 1613  
16:21:06 1614  	 BEGIN
16:21:06 1615  	   SELECT
16:21:06 1616  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
16:21:06 1617  	   FROM
16:21:06 1618  	     SUBSCRIPTION
16:21:06 1619  	   WHERE
16:21:06 1620  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1621  	   EXCEPTION
16:21:06 1622  	     WHEN NO_DATA_FOUND THEN
16:21:06 1623  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 1624  	 END;
16:21:06 1625  
16:21:06 1626  	 BEGIN
16:21:06 1627  	   SELECT
16:21:06 1628  	     ID into var_last_license_id
16:21:06 1629  	   FROM
16:21:06 1630  	     (
16:21:06 1631  	       SELECT
16:21:06 1632  		 LICENSE.ID
16:21:06 1633  	       FROM
16:21:06 1634  		 LICENSE
16:21:06 1635  	       WHERE
16:21:06 1636  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:21:06 1637  	       ORDER BY
16:21:06 1638  		 LICENSE.END_DATE DESC
16:21:06 1639  	     )
16:21:06 1640  	   WHERE
16:21:06 1641  	     ROWNUM <= 1;
16:21:06 1642  	   EXCEPTION
16:21:06 1643  	     WHEN NO_DATA_FOUND THEN
16:21:06 1644  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
16:21:06 1645  	 END;
16:21:06 1646  
16:21:06 1647  	 SELECT
16:21:06 1648  	   COUNT(*) into var_infinity_offers_number
16:21:06 1649  	 FROM
16:21:06 1650  	   OFFER_OFFER_CHAIN
16:21:06 1651  	 WHERE
16:21:06 1652  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:21:06 1653  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V16.OFFER_REC_INFINITY;
16:21:06 1654  
16:21:06 1655  	 IF var_infinity_offers_number > 0 THEN
16:21:06 1656  	   RETURN NULL;
16:21:06 1657  	 END IF;
16:21:06 1658  
16:21:06 1659  	 BEGIN
16:21:06 1660  	   SELECT
16:21:06 1661  	     LICENSE.ID,
16:21:06 1662  	     LICENSE.END_DATE,
16:21:06 1663  	     LICENSE.CURRENT_OFFER_INDEX,
16:21:06 1664  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
16:21:06 1665  	     LICENSE.OFFER_ID
16:21:06 1666  	     into
16:21:06 1667  	     last_license_id,
16:21:06 1668  	     last_license_end_date,
16:21:06 1669  	     last_license_offer_index,
16:21:06 1670  	     last_license_offer_recurr_num,
16:21:06 1671  	     last_license_offer_id
16:21:06 1672  	   FROM
16:21:06 1673  	     LICENSE
16:21:06 1674  	   WHERE
16:21:06 1675  	     LICENSE.ID = var_last_license_id;
16:21:06 1676  	   EXCEPTION
16:21:06 1677  	     WHEN NO_DATA_FOUND THEN
16:21:06 1678  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
16:21:06 1679  	 END;
16:21:06 1680  
16:21:06 1681  	 var_result_date := last_license_end_date;
16:21:06 1682  
16:21:06 1683  	 -- Find current recurrence number
16:21:06 1684  	 SELECT
16:21:06 1685  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
16:21:06 1686  	 FROM
16:21:06 1687  	   OFFER_OFFER_CHAIN
16:21:06 1688  	 WHERE
16:21:06 1689  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:21:06 1690  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
16:21:06 1691  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
16:21:06 1692  
16:21:06 1693  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
16:21:06 1694  	   BEGIN
16:21:06 1695  	     PROCS_OFFER_CHAIN_V16.GET_OFFER_LENGTH(
16:21:06 1696  	       last_license_offer_id,
16:21:06 1697  	       var_offer_years,
16:21:06 1698  	       var_offer_months,
16:21:06 1699  	       var_offer_days
16:21:06 1700  	     );
16:21:06 1701  
16:21:06 1702  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
16:21:06 1703  	     var_ds_interval := var_offer_days||' 0:0:0';
16:21:06 1704  
16:21:06 1705  	     var_result_date := var_result_date
16:21:06 1706  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
16:21:06 1707  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
16:21:06 1708  	     EXCEPTION
16:21:06 1709  	       WHEN OTHERS THEN
16:21:06 1710  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1711  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
16:21:06 1712  	   END;
16:21:06 1713  	 END IF;
16:21:06 1714  
16:21:06 1715  	 OPEN var_next_offers_set FOR
16:21:06 1716  	 SELECT
16:21:06 1717  	   OFFER.ENTITLEMENT_DURATION,
16:21:06 1718  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
16:21:06 1719  	 FROM
16:21:06 1720  	   OFFER_OFFER_CHAIN
16:21:06 1721  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:21:06 1722  	 WHERE
16:21:06 1723  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
16:21:06 1724  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
16:21:06 1725  
16:21:06 1726  	 LOOP
16:21:06 1727  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
16:21:06 1728  	   EXIT WHEN var_next_offers_set%NOTFOUND;
16:21:06 1729  	   BEGIN
16:21:06 1730  	     PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
16:21:06 1731  	       var_next_offer_duration,
16:21:06 1732  	       var_offer_years,
16:21:06 1733  	       var_offer_months,
16:21:06 1734  	       var_offer_days
16:21:06 1735  	     );
16:21:06 1736  
16:21:06 1737  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
16:21:06 1738  	     var_ds_interval := var_offer_days||' 0:0:0';
16:21:06 1739  
16:21:06 1740  	     var_result_date := var_result_date
16:21:06 1741  	       + ( var_ym_interval * var_next_offer_recur )
16:21:06 1742  	       + ( var_ds_interval * var_next_offer_recur );
16:21:06 1743  	     EXCEPTION
16:21:06 1744  	       WHEN OTHERS THEN
16:21:06 1745  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:06 1746  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
16:21:06 1747  	   END;
16:21:06 1748  	 END LOOP;
16:21:06 1749  
16:21:06 1750  	 RETURN var_result_date;
16:21:06 1751  
16:21:06 1752  EXCEPTION
16:21:06 1753  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 1754  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1755  	   SPROC_NAME, 'No such subscription');
16:21:06 1756  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
16:21:06 1757  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1758  	   SPROC_NAME, 'Could not find last license for given subscription');
16:21:06 1759  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
16:21:06 1760  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1761  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
16:21:06 1762  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
16:21:06 1763  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 1764  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
16:21:06 1765  WHEN OTHERS THEN
16:21:06 1766  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1767  	   SPROC_NAME, 'Unkown error', SQLERRM);
16:21:06 1768  END CALC_SUBSCRIPTION_END_DATE;
16:21:06 1769  
16:21:06 1770  /******************************************************************************/
16:21:06 1771  
16:21:06 1772  PROCEDURE HAS_FUTURE_LICENSE (
16:21:06 1773  /*
16:21:06 1774  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1775  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1776  --
16:21:06 1777  RETURNS:
16:21:06 1778  GLOBAL_CONSTANTS_V16.TRUE - if has,
16:21:06 1779  GLOBAL_CONSTANTS_V16.FALSE - else
16:21:06 1780  */
16:21:06 1781  	 in_license_id IN  NUMBER,
16:21:06 1782  	 out_result    OUT NUMBER
16:21:06 1783  ) AS
16:21:06 1784  -- VARIABLES
16:21:06 1785  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
16:21:06 1786  var_subscription_id	 NUMBER;
16:21:06 1787  var_future_licenses_count NUMBER;
16:21:06 1788  -- EXCEPTIONS
16:21:06 1789  BAD_LICENSE_ID	    EXCEPTION;
16:21:06 1790  BEGIN
16:21:06 1791  
16:21:06 1792  	 BEGIN
16:21:06 1793  	   SELECT
16:21:06 1794  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
16:21:06 1795  	   FROM
16:21:06 1796  	     LICENSE
16:21:06 1797  	   WHERE
16:21:06 1798  	     LICENSE.ID = in_license_id;
16:21:06 1799  	   EXCEPTION
16:21:06 1800  	     WHEN NO_DATA_FOUND THEN
16:21:06 1801  	       RAISE BAD_LICENSE_ID;
16:21:06 1802  	 END;
16:21:06 1803  
16:21:06 1804  	 SELECT
16:21:06 1805  	   COUNT(*) into var_future_licenses_count
16:21:06 1806  	 FROM
16:21:06 1807  	   LICENSE
16:21:06 1808  	 WHERE
16:21:06 1809  	   LICENSE.ID != in_license_id
16:21:06 1810  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
16:21:06 1811  	   AND LICENSE.END_DATE > sysdate;
16:21:06 1812  
16:21:06 1813  	 IF var_future_licenses_count > 0 THEN
16:21:06 1814  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
16:21:06 1815  	 ELSE
16:21:06 1816  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
16:21:06 1817  	 END IF;
16:21:06 1818  
16:21:06 1819  EXCEPTION
16:21:06 1820  WHEN BAD_LICENSE_ID THEN
16:21:06 1821  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1822  	   SPROC_NAME, 'No such license');
16:21:06 1823  WHEN OTHERS THEN
16:21:06 1824  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1825  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1826  END HAS_FUTURE_LICENSE;
16:21:06 1827  
16:21:06 1828  /******************************************************************************/
16:21:06 1829  
16:21:06 1830  PROCEDURE CLOSE_SUBSCRIPTION (
16:21:06 1831  	 in_subscription_id IN NUMBER,
16:21:06 1832  	 in_updated_by	    IN VARCHAR2
16:21:06 1833  ) AS
16:21:06 1834  -- VARIABLES
16:21:06 1835  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
16:21:06 1836  temp_subscription_id NUMBER;
16:21:06 1837  var_licenses_count   NUMBER;
16:21:06 1838  -- EXCEPTIONS
16:21:06 1839  BAD_SUBSCRIPTION_ID    EXCEPTION;
16:21:06 1840  ACTIVE_LICENSES_FOUND  EXCEPTION;
16:21:06 1841  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06 1842  BEGIN
16:21:06 1843  
16:21:06 1844  	 BEGIN
16:21:06 1845  	   SELECT
16:21:06 1846  	     SUBSCRIPTION.ID into temp_subscription_id
16:21:06 1847  	   FROM
16:21:06 1848  	     SUBSCRIPTION
16:21:06 1849  	   WHERE
16:21:06 1850  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1851  	   EXCEPTION
16:21:06 1852  	     WHEN NO_DATA_FOUND THEN
16:21:06 1853  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 1854  	 END;
16:21:06 1855  
16:21:06 1856  	 SELECT
16:21:06 1857  	   COUNT(*) into var_licenses_count
16:21:06 1858  	 FROM
16:21:06 1859  	   LICENSE
16:21:06 1860  	 WHERE
16:21:06 1861  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:21:06 1862  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE;
16:21:06 1863  
16:21:06 1864  	 IF var_licenses_count > 0 THEN
16:21:06 1865  	   RAISE ACTIVE_LICENSES_FOUND;
16:21:06 1866  	 END IF;
16:21:06 1867  
16:21:06 1868  	 PROCS_SUBSCRIPTION_V16.UPDATE_SUBSCRIPTION_STATUS(
16:21:06 1869  	   in_subscription_id	     => in_subscription_id,
16:21:06 1870  	   in_updated_by	     => in_updated_by,
16:21:06 1871  	   in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
16:21:06 1872  	 );
16:21:06 1873  
16:21:06 1874  EXCEPTION
16:21:06 1875  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 1876  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1877  	   SPROC_NAME, 'No such subscription');
16:21:06 1878  WHEN ACTIVE_LICENSES_FOUND THEN
16:21:06 1879  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 1880  	   SPROC_NAME, 'Active licenses found');
16:21:06 1881  WHEN OTHERS THEN
16:21:06 1882  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1883  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1884  END CLOSE_SUBSCRIPTION;
16:21:06 1885  
16:21:06 1886  /******************************************************************************/
16:21:06 1887  
16:21:06 1888  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
16:21:06 1889  	 in_subscription_id IN NUMBER,
16:21:06 1890  	 out_group_id	    OUT NUMBER
16:21:06 1891  ) AS
16:21:06 1892  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
16:21:06 1893  BEGIN
16:21:06 1894  	 SELECT
16:21:06 1895  	   ACCOUNT.GROUP_ID into out_group_id
16:21:06 1896  	 FROM
16:21:06 1897  	   SUBSCRIPTION
16:21:06 1898  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:21:06 1899  	 WHERE
16:21:06 1900  	   SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1901  EXCEPTION
16:21:06 1902  WHEN NO_DATA_FOUND THEN
16:21:06 1903  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1904  	   SPROC_NAME, 'No such subscription');
16:21:06 1905  WHEN OTHERS THEN
16:21:06 1906  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1907  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1908  END GET_GROUP_ID_BY_SBSCRPTN_ID;
16:21:06 1909  
16:21:06 1910  /******************************************************************************/
16:21:06 1911  
16:21:06 1912  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
16:21:06 1913  /*
16:21:06 1914  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1915  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1916  */
16:21:06 1917  	 in_subscription_id IN NUMBER,
16:21:06 1918  	 out_result_set     OUT SYS_REFCURSOR
16:21:06 1919  ) AS
16:21:06 1920  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
16:21:06 1921  -- VARIABLES
16:21:06 1922  var_offer_chain NUMBER;
16:21:06 1923  -- EXCEPTIONS
16:21:06 1924  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 1925  BEGIN
16:21:06 1926  	 BEGIN
16:21:06 1927  	   SELECT
16:21:06 1928  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
16:21:06 1929  	   FROM
16:21:06 1930  	     SUBSCRIPTION
16:21:06 1931  	   WHERE
16:21:06 1932  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 1933  	   EXCEPTION
16:21:06 1934  	     WHEN NO_DATA_FOUND THEN
16:21:06 1935  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 1936  	 END;
16:21:06 1937  
16:21:06 1938  	 OPEN out_result_set FOR
16:21:06 1939  	 SELECT DISTINCT
16:21:06 1940  	   PRODUCT.ID,
16:21:06 1941  	   PRODUCT.NAME
16:21:06 1942  	 FROM
16:21:06 1943  	   PRODUCT
16:21:06 1944  	 WHERE
16:21:06 1945  	   PRODUCT.ID IN (
16:21:06 1946  	     SELECT DISTINCT
16:21:06 1947  	       PRODUCT_OFFERING.PRODUCT_ID
16:21:06 1948  	     FROM
16:21:06 1949  	       PRODUCT_OFFERING
16:21:06 1950  	     WHERE
16:21:06 1951  	       PRODUCT_OFFERING.ID IN (
16:21:06 1952  		 SELECT DISTINCT
16:21:06 1953  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:21:06 1954  		 FROM
16:21:06 1955  		   OFFER_PRODUCT_OFFERING
16:21:06 1956  		 WHERE
16:21:06 1957  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:21:06 1958  		     SELECT DISTINCT
16:21:06 1959  		       OFFER_OFFER_CHAIN.OFFER_ID
16:21:06 1960  		     FROM
16:21:06 1961  		       OFFER_OFFER_CHAIN
16:21:06 1962  		     WHERE
16:21:06 1963  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
16:21:06 1964  		   )
16:21:06 1965  	       )
16:21:06 1966  	   );
16:21:06 1967  
16:21:06 1968  EXCEPTION
16:21:06 1969  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 1970  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 1971  	   SPROC_NAME, 'No such subscription');
16:21:06 1972  WHEN OTHERS THEN
16:21:06 1973  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 1974  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 1975  END GET_SUBSCRIPTION_PRODUCTS;
16:21:06 1976  
16:21:06 1977  /******************************************************************************/
16:21:06 1978  
16:21:06 1979  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
16:21:06 1980  /*
16:21:06 1981  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 1982  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 1983  */
16:21:06 1984  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
16:21:06 1985  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
16:21:06 1986  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
16:21:06 1987  ) AS
16:21:06 1988  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
16:21:06 1989  -- VARIABLES
16:21:06 1990  temp_charge_id CHARGE.ID%TYPE;
16:21:06 1991  -- EXCEPTIONS
16:21:06 1992  BAD_SUBSCRIPTION_ID    EXCEPTION;
16:21:06 1993  BAD_STATUS_ID	      EXCEPTION;
16:21:06 1994  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:06 1995  BEGIN
16:21:06 1996  
16:21:06 1997  	 IF in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 1998  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
16:21:06 1999  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED
16:21:06 2000  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED THEN
16:21:06 2001  	   RAISE BAD_STATUS_ID;
16:21:06 2002  	 END IF;
16:21:06 2003  
16:21:06 2004  	 PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
16:21:06 2005  	   in_subscription_id	     => in_subscription_id,
16:21:06 2006  	   in_subscription_status_id => in_subscription_status_id,
16:21:06 2007  	   in_updated_by	     => in_updated_by
16:21:06 2008  	 );
16:21:06 2009  
16:21:06 2010  	 IF SQL%ROWCOUNT = 0 THEN
16:21:06 2011  	   RAISE BAD_SUBSCRIPTION_ID;
16:21:06 2012  	 END IF;
16:21:06 2013  
16:21:06 2014  EXCEPTION
16:21:06 2015  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2016  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2017  	   SPROC_NAME, 'No such subscription');
16:21:06 2018  WHEN BAD_STATUS_ID THEN
16:21:06 2019  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 2020  	   SPROC_NAME, 'Bad status id');
16:21:06 2021  WHEN OTHERS THEN
16:21:06 2022  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2023  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2024  END UPDATE_SUBSCRIPTION_STATUS;
16:21:06 2025  
16:21:06 2026  /******************************************************************************/
16:21:06 2027  
16:21:06 2028  PROCEDURE GET_ACTIVE_INVOICES_IDS (
16:21:06 2029  /*
16:21:06 2030  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2031  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2032  */
16:21:06 2033  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
16:21:06 2034  	 in_subscription_id IN NUMBER,
16:21:06 2035  	 out_result_set     OUT SYS_REFCURSOR
16:21:06 2036  ) AS
16:21:06 2037  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
16:21:06 2038  -- VARIABLES
16:21:06 2039  temp_subscription_id SUBSCRIPTION.ID%TYPE;
16:21:06 2040  -- EXCEPTIONS
16:21:06 2041  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 2042  BEGIN
16:21:06 2043  
16:21:06 2044  	 BEGIN
16:21:06 2045  	   SELECT
16:21:06 2046  	     SUBSCRIPTION.ID into temp_subscription_id
16:21:06 2047  	   FROM
16:21:06 2048  	     SUBSCRIPTION
16:21:06 2049  	   WHERE
16:21:06 2050  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 2051  	   EXCEPTION
16:21:06 2052  	     WHEN NO_DATA_FOUND THEN
16:21:06 2053  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 2054  	 END;
16:21:06 2055  
16:21:06 2056  	 OPEN out_result_set FOR
16:21:06 2057  	 SELECT DISTINCT
16:21:06 2058  	   LICENSE.INVOICE_ID as "ID"
16:21:06 2059  	 FROM
16:21:06 2060  	   LICENSE
16:21:06 2061  	 WHERE
16:21:06 2062  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 2063  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
16:21:06 2064  
16:21:06 2065  EXCEPTION
16:21:06 2066  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2067  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2068  	   SPROC_NAME, 'No such subscription');
16:21:06 2069  WHEN OTHERS THEN
16:21:06 2070  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2071  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2072  END GET_ACTIVE_INVOICES_IDS;
16:21:06 2073  
16:21:06 2074  /******************************************************************************/
16:21:06 2075  
16:21:06 2076  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
16:21:06 2077  /*
16:21:06 2078  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2079  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2080  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:06 2081  */
16:21:06 2082  	 in_invoice_id	      IN NUMBER,
16:21:06 2083  	 in_updated_by	      IN VARCHAR2,
16:21:06 2084  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:06 2085  ) AS
16:21:06 2086  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
16:21:06 2087  -- VARIABLES
16:21:06 2088  temp_invoice_id	      INVOICE.ID%TYPE;
16:21:06 2089  var_chargeback_amount  NUMBER(10,2);
16:21:06 2090  ver_refund_charge_id   NUMBER;
16:21:06 2091  -- EXCEPTIONS
16:21:06 2092  BAD_INVOICE_ID		    EXCEPTION;
16:21:06 2093  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
16:21:06 2094  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
16:21:06 2095  EXCEPTION_MESSAGE	    VARCHAR2(1024);
16:21:06 2096  -- STUB
16:21:06 2097  var_now DATE;
16:21:06 2098  var_revoke NUMBER;
16:21:06 2099  var_refund NUMBER;
16:21:06 2100  var_billed NUMBER;
16:21:06 2101  BEGIN
16:21:06 2102  
16:21:06 2103  	 var_now := sysdate;
16:21:06 2104  
16:21:06 2105  	 -- Check that invoice exists
16:21:06 2106  	 BEGIN
16:21:06 2107  	   SELECT
16:21:06 2108  	     INVOICE.ID into temp_invoice_id
16:21:06 2109  	   FROM
16:21:06 2110  	     INVOICE
16:21:06 2111  	   WHERE
16:21:06 2112  	     INVOICE.ID = in_invoice_id;
16:21:06 2113  	   EXCEPTION
16:21:06 2114  	     WHEN NO_DATA_FOUND THEN
16:21:06 2115  	       RAISE BAD_INVOICE_ID;
16:21:06 2116  	 END;
16:21:06 2117  
16:21:06 2118  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V16.FALSE, GLOBAL_CONSTANTS_V16.TRUE) into var_revoke
16:21:06 2119  	 from license l, subscription s, offer_chain oc
16:21:06 2120  	 where
16:21:06 2121  	   l.subscription_id = s.id and
16:21:06 2122  	   s.offer_chain_id = oc.id and
16:21:06 2123  	   l.invoice_id = in_invoice_id and
16:21:06 2124  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V16.TRUE and
16:21:06 2125  	   rownum < 2;
16:21:06 2126  
16:21:06 2127  	 var_billed := PROCS_INVOICE_V16.IS_INVOICE_PAYING_STARTED(in_invoice_id);
16:21:06 2128  	 var_refund := GLOBAL_CONSTANTS_V16.FALSE;
16:21:06 2129  
16:21:06 2130  	 -- Check that transaction for given invoice not started
16:21:06 2131  	 -- if refund enabled calculate and apply chargeback
16:21:06 2132  	 IF (
16:21:06 2133  	     var_billed = GLOBAL_CONSTANTS_V16.TRUE
16:21:06 2134  	   )THEN
16:21:06 2135  	   if (in_refundable = GLOBAL_CONSTANTS_V16.TRUE) then
16:21:06 2136  	     -- If started then we need to calculate refund
16:21:06 2137  	     BEGIN
16:21:06 2138  	       PROCS_INVOICE_V16.CALCULATE_INVOICE_CHARGEBACK(
16:21:06 2139  		 in_invoice_id,
16:21:06 2140  		 var_now,
16:21:06 2141  		 var_chargeback_amount
16:21:06 2142  	       );
16:21:06 2143  	       EXCEPTION
16:21:06 2144  		 WHEN OTHERS THEN
16:21:06 2145  		   EXCEPTION_MESSAGE := SQLERRM;
16:21:06 2146  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
16:21:06 2147  	     END;
16:21:06 2148  	     IF var_chargeback_amount > 0 THEN
16:21:06 2149  	       BEGIN
16:21:06 2150  		 PROCS_INVOICE_V16.APPLY_REFUND(
16:21:06 2151  		   in_invoice_id,
16:21:06 2152  		   var_chargeback_amount,
16:21:06 2153  		   in_updated_by,
16:21:06 2154  		   ver_refund_charge_id
16:21:06 2155  		 );
16:21:06 2156  		 EXCEPTION
16:21:06 2157  		   WHEN OTHERS THEN
16:21:06 2158  		     EXCEPTION_MESSAGE := SQLERRM;
16:21:06 2159  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
16:21:06 2160  	       END;
16:21:06 2161  	       var_refund := GLOBAL_CONSTANTS_V16.TRUE;
16:21:06 2162  	     END IF;
16:21:06 2163  	   end if;
16:21:06 2164  	 ELSE
16:21:06 2165  
16:21:06 2166  	   FOR f_transaction_to_close IN (
16:21:06 2167  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
16:21:06 2168  	   )
16:21:06 2169  	   LOOP
16:21:06 2170  	     PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
16:21:06 2171  	       in_transaction_id	=> f_transaction_to_close.ID,
16:21:06 2172  	       in_updated_by		=> in_updated_by,
16:21:06 2173  	       in_transaction_status_id => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
16:21:06 2174  	     );
16:21:06 2175  	   END LOOP;
16:21:06 2176  	   -- Needs to close charges. No refund.
16:21:06 2177  	   FOR f_charge_to_close IN (
16:21:06 2178  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
16:21:06 2179  	   )
16:21:06 2180  	   LOOP
16:21:06 2181  	     PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
16:21:06 2182  	       in_charge_id	   => f_charge_to_close.ID,
16:21:06 2183  	       in_updated_by	   => in_updated_by,
16:21:06 2184  	       in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
16:21:06 2185  	     );
16:21:06 2186  	   END LOOP;
16:21:06 2187  
16:21:06 2188  	   PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
16:21:06 2189  	     in_invoice_id		    => in_invoice_id,
16:21:06 2190  	     in_updated_by		    => in_updated_by,
16:21:06 2191  	     in_invoice_status_id	    => GLOBAL_STATUSES_V16.INVOICE_CLOSED
16:21:06 2192  	   );
16:21:06 2193  
16:21:06 2194  	 END IF;
16:21:06 2195  	 -- update licenses
16:21:06 2196  	 IF(var_revoke = GLOBAL_CONSTANTS_V16.TRUE OR var_chargeback_amount > 0 OR var_billed = GLOBAL_CONSTANTS_V16.FALSE) THEN
16:21:06 2197  	   FOR f_license_to_cancel IN (
16:21:06 2198  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 2199  	   )
16:21:06 2200  	   LOOP
16:21:06 2201  	     PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:06 2202  	       in_license_id	     => f_license_to_cancel.ID,
16:21:06 2203  	       in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
16:21:06 2204  	       in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE,
16:21:06 2205  	       in_updated_by	     => in_updated_by,
16:21:06 2206  	       in_entitlement_end_date => var_now
16:21:06 2207  	     );
16:21:06 2208  	   END LOOP;
16:21:06 2209  	 ELSE
16:21:06 2210  	   FOR f_license_to_cancel IN (
16:21:06 2211  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 2212  	   )
16:21:06 2213  	   LOOP
16:21:06 2214  	     PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:06 2215  	       in_license_id	     => f_license_to_cancel.ID,
16:21:06 2216  	       in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
16:21:06 2217  	       in_updated_by	     => in_updated_by
16:21:06 2218  	     );
16:21:06 2219  	   END LOOP;
16:21:06 2220  	 END IF;
16:21:06 2221  
16:21:06 2222  
16:21:06 2223  EXCEPTION
16:21:06 2224  WHEN BAD_INVOICE_ID THEN
16:21:06 2225  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2226  	   SPROC_NAME, 'No such invoice');
16:21:06 2227  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
16:21:06 2228  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 2229  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
16:21:06 2230  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
16:21:06 2231  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 2232  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
16:21:06 2233  WHEN OTHERS THEN
16:21:06 2234  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2235  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2236  END CANCEL_SUBSCRIPTION_INVOICE;
16:21:06 2237  
16:21:06 2238  /******************************************************************************/
16:21:06 2239  
16:21:06 2240  PROCEDURE FINALIZE_CANCELATION (
16:21:06 2241  /*
16:21:06 2242  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2243  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2244  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:06 2245  */
16:21:06 2246  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
16:21:06 2247  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
16:21:06 2248  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:21:06 2249  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:21:06 2250  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:21:06 2251  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
16:21:06 2252  	 in_subscription_id    IN NUMBER,
16:21:06 2253  	 in_cancelation_reason IN VARCHAR2,
16:21:06 2254  	 in_cancelation_date   IN DATE,
16:21:06 2255  	 in_note	       IN VARCHAR2,
16:21:06 2256  	 in_agent_id	       IN NUMBER,
16:21:06 2257  	 in_updated_by	       IN VARCHAR2
16:21:06 2258  ) AS
16:21:06 2259  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
16:21:06 2260  -- VARIABLES
16:21:06 2261  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
16:21:06 2262  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
16:21:06 2263  var_active_invoices_count NUMBER;
16:21:06 2264  -- EXCEPTIONS
16:21:06 2265  BAD_SUBSCRIPTION_ID	   EXCEPTION;
16:21:06 2266  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
16:21:06 2267  BAD_CANCELATION_REASON	   EXCEPTION;
16:21:06 2268  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
16:21:06 2269  ACTIVE_INVOICES_FOUND	   EXCEPTION;
16:21:06 2270  CAN_NOT_CREATE_NOTE	   EXCEPTION;
16:21:06 2271  EXCEPTION_MESSAGE	   VARCHAR2(1024);
16:21:06 2272  BEGIN
16:21:06 2273  
16:21:06 2274  	 -- Get current subscription status
16:21:06 2275  	 BEGIN
16:21:06 2276  	   SELECT
16:21:06 2277  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
16:21:06 2278  	   FROM
16:21:06 2279  	     SUBSCRIPTION
16:21:06 2280  	   WHERE
16:21:06 2281  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 2282  	   EXCEPTION
16:21:06 2283  	     WHEN NO_DATA_FOUND THEN
16:21:06 2284  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 2285  	 END;
16:21:06 2286  
16:21:06 2287  	 -- Check that subscription reason is correct
16:21:06 2288  	 BEGIN
16:21:06 2289  	   SELECT
16:21:06 2290  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
16:21:06 2291  	   FROM
16:21:06 2292  	     SUBSCRIPTION_CANCEL_REASON
16:21:06 2293  	   WHERE
16:21:06 2294  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
16:21:06 2295  	     AND ROWNUM <= 1;
16:21:06 2296  	   EXCEPTION
16:21:06 2297  	     WHEN NO_DATA_FOUND THEN
16:21:06 2298  	       RAISE BAD_CANCELATION_REASON;
16:21:06 2299  	 END;
16:21:06 2300  
16:21:06 2301  	 -- Check for invoices with active licenses
16:21:06 2302  	 SELECT
16:21:06 2303  	   COUNT(*) into var_active_invoices_count
16:21:06 2304  	 FROM
16:21:06 2305  	   LICENSE
16:21:06 2306  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:21:06 2307  	 WHERE
16:21:06 2308  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 2309  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
16:21:06 2310  
16:21:06 2311  	 IF var_active_invoices_count > 0 THEN
16:21:06 2312  	   RAISE ACTIVE_INVOICES_FOUND;
16:21:06 2313  	 END IF;
16:21:06 2314  
16:21:06 2315  	 -- Check that subscription is active
16:21:06 2316  	 IF var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 2317  	    AND var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
16:21:06 2318  	   RAISE BAD_SUBSCRIPTION_STATUS;
16:21:06 2319  	 END IF;
16:21:06 2320  
16:21:06 2321  	 -- Update subscription data
16:21:06 2322  	 BEGIN
16:21:06 2323  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
16:21:06 2324  	     in_subscription_id        => in_subscription_id,
16:21:06 2325  	     in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED,
16:21:06 2326  	     in_cancelation_date       => in_cancelation_date,
16:21:06 2327  	     in_updated_by	       => in_updated_by,
16:21:06 2328  	     in_sct_id		       => var_sct_id
16:21:06 2329  	   );
16:21:06 2330  	   EXCEPTION
16:21:06 2331  	     WHEN OTHERS THEN
16:21:06 2332  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 2333  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
16:21:06 2334  	 END;
16:21:06 2335  
16:21:06 2336  	 -- Annotate subscription
16:21:06 2337  	 IF in_note IS NOT NULL THEN
16:21:06 2338  	   BEGIN
16:21:06 2339  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
16:21:06 2340  	       in_subscription_id,
16:21:06 2341  	       in_agent_id,
16:21:06 2342  	       in_note,
16:21:06 2343  	       in_updated_by
16:21:06 2344  	     );
16:21:06 2345  	     EXCEPTION
16:21:06 2346  	      WHEN OTHERS THEN
16:21:06 2347  		EXCEPTION_MESSAGE := SQLERRM;
16:21:06 2348  		RAISE CAN_NOT_CREATE_NOTE;
16:21:06 2349  	   END;
16:21:06 2350  	 END IF;
16:21:06 2351  
16:21:06 2352  EXCEPTION
16:21:06 2353  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2354  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2355  	   SPROC_NAME, 'No such subscription');
16:21:06 2356  WHEN BAD_SUBSCRIPTION_STATUS THEN
16:21:06 2357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 2358  	   SPROC_NAME, 'Bad current subscription status');
16:21:06 2359  WHEN BAD_CANCELATION_REASON THEN
16:21:06 2360  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 2361  	   SPROC_NAME, 'Bad cancellation reason');
16:21:06 2362  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
16:21:06 2363  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 2364  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
16:21:06 2365  WHEN ACTIVE_INVOICES_FOUND THEN
16:21:06 2366  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 2367  	   SPROC_NAME, 'Invoices with active licenses found');
16:21:06 2368  WHEN CAN_NOT_CREATE_NOTE THEN
16:21:06 2369  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 2370  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:21:06 2371  WHEN OTHERS THEN
16:21:06 2372  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2373  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2374  END FINALIZE_CANCELATION;
16:21:06 2375  
16:21:06 2376  /******************************************************************************/
16:21:06 2377  
16:21:06 2378  PROCEDURE FINALIZE_FALSE_START (
16:21:06 2379  /*
16:21:06 2380  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2381  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2382  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:06 2383  */
16:21:06 2384  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
16:21:06 2385  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:21:06 2386  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:21:06 2387  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:21:06 2388  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
16:21:06 2389  	 in_subscription_id    IN NUMBER,
16:21:06 2390  	 in_cancelation_date   IN DATE,
16:21:06 2391  	 in_note	       IN VARCHAR2,
16:21:06 2392  	 in_agent_id	       IN NUMBER,
16:21:06 2393  	 in_updated_by	       IN VARCHAR2
16:21:06 2394  ) AS
16:21:06 2395  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
16:21:06 2396  FALSE_START_REASON CONSTANT NUMBER := 41;
16:21:06 2397  -- VARIABLES
16:21:06 2398  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
16:21:06 2399  var_active_invoices_count NUMBER;
16:21:06 2400  -- EXCEPTIONS
16:21:06 2401  BAD_SUBSCRIPTION_ID	   EXCEPTION;
16:21:06 2402  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
16:21:06 2403  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
16:21:06 2404  ACTIVE_INVOICES_FOUND	   EXCEPTION;
16:21:06 2405  CAN_NOT_CREATE_NOTE	   EXCEPTION;
16:21:06 2406  EXCEPTION_MESSAGE	   VARCHAR2(1024);
16:21:06 2407  BEGIN
16:21:06 2408  
16:21:06 2409  	 -- Get current subscription status
16:21:06 2410  	 BEGIN
16:21:06 2411  	   SELECT
16:21:06 2412  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
16:21:06 2413  	   FROM
16:21:06 2414  	     SUBSCRIPTION
16:21:06 2415  	   WHERE
16:21:06 2416  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 2417  	   EXCEPTION
16:21:06 2418  	     WHEN NO_DATA_FOUND THEN
16:21:06 2419  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 2420  	 END;
16:21:06 2421  
16:21:06 2422  	 -- Check for invoices with active licenses
16:21:06 2423  	 SELECT
16:21:06 2424  	   COUNT(*) into var_active_invoices_count
16:21:06 2425  	 FROM
16:21:06 2426  	   LICENSE
16:21:06 2427  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:21:06 2428  	 WHERE
16:21:06 2429  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 2430  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
16:21:06 2431  
16:21:06 2432  	 IF var_active_invoices_count > 0 THEN
16:21:06 2433  	   RAISE ACTIVE_INVOICES_FOUND;
16:21:06 2434  	 END IF;
16:21:06 2435  
16:21:06 2436  	 -- Check that subscription is active
16:21:06 2437  	 IF var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 2438  	    AND var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
16:21:06 2439  	   RAISE BAD_SUBSCRIPTION_STATUS;
16:21:06 2440  	 END IF;
16:21:06 2441  
16:21:06 2442  	 -- Update subscription data
16:21:06 2443  	 BEGIN
16:21:06 2444  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
16:21:06 2445  	     in_subscription_id        => in_subscription_id,
16:21:06 2446  	     in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_FALSE_START,
16:21:06 2447  	     in_cancelation_date       => in_cancelation_date,
16:21:06 2448  	     in_updated_by	       => in_updated_by,
16:21:06 2449  	     in_sct_id		       => FALSE_START_REASON
16:21:06 2450  	   );
16:21:06 2451  	   EXCEPTION
16:21:06 2452  	     WHEN OTHERS THEN
16:21:06 2453  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 2454  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
16:21:06 2455  	 END;
16:21:06 2456  
16:21:06 2457  	 -- Annotate subscription
16:21:06 2458  	 IF in_note IS NOT NULL THEN
16:21:06 2459  	   BEGIN
16:21:06 2460  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
16:21:06 2461  	       in_subscription_id,
16:21:06 2462  	       in_agent_id,
16:21:06 2463  	       in_note,
16:21:06 2464  	       in_updated_by
16:21:06 2465  	     );
16:21:06 2466  	     EXCEPTION
16:21:06 2467  	      WHEN OTHERS THEN
16:21:06 2468  		EXCEPTION_MESSAGE := SQLERRM;
16:21:06 2469  		RAISE CAN_NOT_CREATE_NOTE;
16:21:06 2470  	   END;
16:21:06 2471  	 END IF;
16:21:06 2472  
16:21:06 2473  EXCEPTION
16:21:06 2474  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2475  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2476  	   SPROC_NAME, 'No such subscription');
16:21:06 2477  WHEN BAD_SUBSCRIPTION_STATUS THEN
16:21:06 2478  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 2479  	   SPROC_NAME, 'Bad current subscription status');
16:21:06 2480  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
16:21:06 2481  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 2482  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
16:21:06 2483  WHEN ACTIVE_INVOICES_FOUND THEN
16:21:06 2484  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:06 2485  	   SPROC_NAME, 'Invoices with active licenses found');
16:21:06 2486  WHEN CAN_NOT_CREATE_NOTE THEN
16:21:06 2487  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 2488  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:21:06 2489  WHEN OTHERS THEN
16:21:06 2490  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2491  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2492  END FINALIZE_FALSE_START;
16:21:06 2493  
16:21:06 2494  /******************************************************************************/
16:21:06 2495  
16:21:06 2496  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
16:21:06 2497  	 in_subscription_id IN NUMBER
16:21:06 2498  ) RETURN NUMBER AS
16:21:06 2499  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
16:21:06 2500  -- VARIABLES
16:21:06 2501  var_is_offer_chain_cancelable NUMBER;
16:21:06 2502  --64603
16:21:06 2503  var_end_date date;
16:21:06 2504  today_date date := current_date;
16:21:06 2505  offer_id number;
16:21:06 2506  -- EXCEPTIONS
16:21:06 2507  COULD_NOT_CHECK	   EXCEPTION;
16:21:06 2508  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 2509  EXCEPTION_MESSAGE   VARCHAR2(1024);
16:21:06 2510  BEGIN
16:21:06 2511  
16:21:06 2512  	 BEGIN
16:21:06 2513  	   -- find offer_chain_id for given in_subscription_id
16:21:06 2514  	   SELECT OFFER_CHAIN_ID into offer_id
16:21:06 2515  	   FROM SUBSCRIPTION
16:21:06 2516  	   WHERE ID = in_subscription_id;
16:21:06 2517  	   EXCEPTION
16:21:06 2518  	     WHEN NO_DATA_FOUND THEN
16:21:06 2519  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 2520  	     WHEN OTHERS THEN
16:21:06 2521  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:06 2522  	       RAISE COULD_NOT_CHECK;
16:21:06 2523  	 END;
16:21:06 2524  
16:21:06 2525  	 -- find if it was redeemed from a gift certificate
16:21:06 2526  	 BEGIN
16:21:06 2527  	   SELECT l.end_date INTO var_end_date
16:21:06 2528  	   FROM LICENSE l, GIFT_CERTIFICATE g
16:21:06 2529  	   WHERE l.invoice_id = g.finalized_invoice_id
16:21:06 2530  	   AND l.subscription_id = in_subscription_id;
16:21:06 2531  
16:21:06 2532  	   -- if the license end_date is bigger than today, we are in the
16:21:06 2533  	   -- first period, so we cannot cancel; otherwise can cancel
16:21:06 2534  	   IF var_end_date > today_date THEN
16:21:06 2535  	       RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:06 2536  	   ELSE
16:21:06 2537  	       RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:06 2538  	   END IF;
16:21:06 2539  
16:21:06 2540  	   EXCEPTION
16:21:06 2541  	       -- not coming from a gift certificate,
16:21:06 2542  	       -- use old logic
16:21:06 2543  	       WHEN NO_DATA_FOUND THEN
16:21:06 2544  		   SELECT
16:21:06 2545  		       PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(offer_id)
16:21:06 2546  		       INTO var_is_offer_chain_cancelable
16:21:06 2547  		   FROM DUAL;
16:21:06 2548  		   RETURN var_is_offer_chain_cancelable;
16:21:06 2549  	 END;
16:21:06 2550  
16:21:06 2551  EXCEPTION
16:21:06 2552  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2553  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2554  	   SPROC_NAME, 'No such subscription');
16:21:06 2555  WHEN COULD_NOT_CHECK THEN
16:21:06 2556  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:06 2557  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
16:21:06 2558  WHEN OTHERS THEN
16:21:06 2559  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2560  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2561  
16:21:06 2562  END IS_SUBSCRIPTION_CANCELABLE;
16:21:06 2563  /******************************************************************************/
16:21:06 2564  
16:21:06 2565  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
16:21:06 2566  /*
16:21:06 2567  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2568  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2569  */
16:21:06 2570  	 in_subscription_id IN NUMBER,
16:21:06 2571  	 out_result_set     OUT SYS_REFCURSOR
16:21:06 2572  ) AS
16:21:06 2573  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
16:21:06 2574  -- VARIABLES
16:21:06 2575  var_offer NUMBER;
16:21:06 2576  -- EXCEPTIONS
16:21:06 2577  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 2578  BEGIN
16:21:06 2579  
16:21:06 2580  	 OPEN out_result_set FOR
16:21:06 2581  	 SELECT DISTINCT
16:21:06 2582  	   PRODUCT_OFFERING.ID,
16:21:06 2583  	   PRODUCT_OFFERING.PRODUCT_ID,
16:21:06 2584  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:21:06 2585  	   PRODUCT_OFFERING.UNIT_PRICE,
16:21:06 2586  	   PRODUCT_OFFERING.QUANTITY,
16:21:06 2587  	   PRODUCT_OFFERING.CREATE_DATE,
16:21:06 2588  	   PRODUCT_OFFERING.CREATED_BY,
16:21:06 2589  	   CAPABILITY.ID CAP_ID,
16:21:06 2590  	   CAPABILITY.CODE CAP_CODE,
16:21:06 2591  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:21:06 2592  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:21:06 2593  	 FROM
16:21:06 2594  	   OFFER_PRODUCT_OFFERING
16:21:06 2595  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:21:06 2596  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:21:06 2597  	 WHERE
16:21:06 2598  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:21:06 2599  	     SELECT
16:21:06 2600  	       LICENSE.OFFER_ID
16:21:06 2601  	     FROM
16:21:06 2602  	       SUBSCRIPTION
16:21:06 2603  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE
16:21:06 2604  	     WHERE
16:21:06 2605  	       SUBSCRIPTION.ID = in_subscription_id
16:21:06 2606  	   );
16:21:06 2607  
16:21:06 2608  EXCEPTION
16:21:06 2609  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2610  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2611  	   SPROC_NAME, 'No such subscription');
16:21:06 2612  WHEN OTHERS THEN
16:21:06 2613  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2614  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2615  END GET_SUBSCR_PROD_OFFERRINGS;
16:21:06 2616  
16:21:06 2617  
16:21:06 2618  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
16:21:06 2619  /*
16:21:06 2620  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2621  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2622  */
16:21:06 2623  	 in_subscription_id IN NUMBER,
16:21:06 2624  	 out_result_set     OUT SYS_REFCURSOR
16:21:06 2625  ) AS
16:21:06 2626  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
16:21:06 2627  -- VARIABLES
16:21:06 2628  var_offer NUMBER;
16:21:06 2629  -- EXCEPTIONS
16:21:06 2630  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 2631  BEGIN
16:21:06 2632  
16:21:06 2633  	 OPEN out_result_set FOR
16:21:06 2634  	 SELECT DISTINCT
16:21:06 2635  	   PRODUCT_OFFERING.ID,
16:21:06 2636  	   PRODUCT_OFFERING.PRODUCT_ID,
16:21:06 2637  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:21:06 2638  	   PRODUCT_OFFERING.UNIT_PRICE,
16:21:06 2639  	   PRODUCT_OFFERING.QUANTITY,
16:21:06 2640  	   PRODUCT_OFFERING.CREATE_DATE,
16:21:06 2641  	   PRODUCT_OFFERING.CREATED_BY,
16:21:06 2642  	   CAPABILITY.ID CAP_ID,
16:21:06 2643  	   CAPABILITY.CODE CAP_CODE,
16:21:06 2644  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:21:06 2645  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:21:06 2646  	 FROM
16:21:06 2647  	   OFFER_PRODUCT_OFFERING
16:21:06 2648  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:21:06 2649  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:21:06 2650  	 WHERE
16:21:06 2651  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:21:06 2652  	     SELECT
16:21:06 2653  	       LICENSE.OFFER_ID
16:21:06 2654  	     FROM
16:21:06 2655  	       SUBSCRIPTION
16:21:06 2656  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:06 2657  	     WHERE
16:21:06 2658  	       SUBSCRIPTION.ID = in_subscription_id
16:21:06 2659  	   );
16:21:06 2660  
16:21:06 2661  EXCEPTION
16:21:06 2662  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2663  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2664  	   SPROC_NAME, 'No such subscription');
16:21:06 2665  WHEN OTHERS THEN
16:21:06 2666  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2667  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2668  END RETRIEVE_SUB_PROD_OFFER;
16:21:06 2669  /******************************************************************************/
16:21:06 2670  
16:21:06 2671  
16:21:06 2672  
16:21:06 2673  
16:21:06 2674  PROCEDURE GET_SUBSCR_LIC_OFFER(
16:21:06 2675  /*
16:21:06 2676  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2677  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2678  */
16:21:06 2679  	 in_subscription_id IN NUMBER,
16:21:06 2680  	 out_result_set     OUT SYS_REFCURSOR
16:21:06 2681  ) AS
16:21:06 2682  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
16:21:06 2683  -- VARIABLES
16:21:06 2684  var_offer_chain NUMBER;
16:21:06 2685  -- EXCEPTIONS
16:21:06 2686  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 2687  BEGIN
16:21:06 2688  	 BEGIN
16:21:06 2689  	   SELECT
16:21:06 2690  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
16:21:06 2691  	   FROM
16:21:06 2692  	     SUBSCRIPTION
16:21:06 2693  	   WHERE
16:21:06 2694  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 2695  	   EXCEPTION
16:21:06 2696  	     WHEN NO_DATA_FOUND THEN
16:21:06 2697  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 2698  	 END;
16:21:06 2699  
16:21:06 2700  	 OPEN out_result_set FOR
16:21:06 2701  	 SELECT DISTINCT
16:21:06 2702  	   po.ID po_id,
16:21:06 2703  	   po.PRODUCT_ID po_product_id,
16:21:06 2704  	   po.TAX_CATEGORY_ID po_tax_category_id,
16:21:06 2705  	   po.UNIT_PRICE po_unit_price,
16:21:06 2706  	   po.QUANTITY po_quantity,
16:21:06 2707  	   po.CREATE_DATE po_create_date,
16:21:06 2708  	   po.CREATED_BY po_created_by,
16:21:06 2709  	   l.ID l_id,
16:21:06 2710  	   l.license_status_id l_license_status_id,
16:21:06 2711  	   l.start_date l_start_date,
16:21:06 2712  	   l.offer_id l_offer_id,
16:21:06 2713  	   l.subscription_id l_subscription_id,
16:21:06 2714  	   l.invoice_id l_invoice_id,
16:21:06 2715  	   l.end_date l_end_date,
16:21:06 2716  	   l.entitlement_end_date l_entitlement_end_date,
16:21:06 2717  	   l.create_date l_create_date,
16:21:06 2718  	   l.created_by l_created_by,
16:21:06 2719  	   l.is_extension l_is_extension,
16:21:06 2720  	   l.current_offer_index l_current_offer_index,
16:21:06 2721  	   l.current_offer_recurr_num l_current_offer_recurr_num,
16:21:06 2722  	   l.needs_entitlements l_needs_entitlements
16:21:06 2723  	 FROM
16:21:06 2724  	   OFFER_PRODUCT_OFFERING opo,
16:21:06 2725  	   PRODUCT_OFFERING po,
16:21:06 2726  	   SUBSCRIPTION s,
16:21:06 2727  	   LICENSE l
16:21:06 2728  	 WHERE
16:21:06 2729  	   opo.product_offering_id = po.id
16:21:06 2730  	   and po.id = l.offer_id
16:21:06 2731  	   and l.subscription_id = s.id
16:21:06 2732  	   and l.license_status_id = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:06 2733  	   and s.id = in_subscription_id
16:21:06 2734  	 ;
16:21:06 2735  EXCEPTION
16:21:06 2736  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2737  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2738  	   SPROC_NAME, 'No such subscription');
16:21:06 2739  WHEN OTHERS THEN
16:21:06 2740  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2741  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2742  END GET_SUBSCR_LIC_OFFER;
16:21:06 2743  
16:21:06 2744  /******************************************************************************/
16:21:06 2745  
16:21:06 2746  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
16:21:06 2747  /*
16:21:06 2748  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2749  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2750  */
16:21:06 2751  	 in_subscription_id IN NUMBER,
16:21:06 2752  	 out_result	    OUT NUMBER
16:21:06 2753  ) AS
16:21:06 2754  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
16:21:06 2755  -- VARIABLES
16:21:06 2756  temp_subscription_id NUMBER;
16:21:06 2757  var_local_result     NUMBER;
16:21:06 2758  -- EXCEPTIONS
16:21:06 2759  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:06 2760  BEGIN
16:21:06 2761  
16:21:06 2762  	 -- Check that subscription exists
16:21:06 2763  	 BEGIN
16:21:06 2764  	   SELECT
16:21:06 2765  	     SUBSCRIPTION.ID into temp_subscription_id
16:21:06 2766  	   FROM
16:21:06 2767  	     SUBSCRIPTION
16:21:06 2768  	   WHERE
16:21:06 2769  	     SUBSCRIPTION.ID = in_subscription_id;
16:21:06 2770  	   EXCEPTION
16:21:06 2771  	     WHEN NO_DATA_FOUND THEN
16:21:06 2772  	       RAISE BAD_SUBSCRIPTION_ID;
16:21:06 2773  	 END;
16:21:06 2774  
16:21:06 2775  	 var_local_result := NULL;
16:21:06 2776  
16:21:06 2777  	 -- Check charges for each invoice associated with gived subscription
16:21:06 2778  	 FOR f_invoice IN (
16:21:06 2779  	   SELECT DISTINCT
16:21:06 2780  	     LICENSE.INVOICE_ID as "ID"
16:21:06 2781  	   FROM
16:21:06 2782  	     LICENSE
16:21:06 2783  	   WHERE
16:21:06 2784  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:21:06 2785  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.LICENSE_ACTIVE FROM DUAL )
16:21:06 2786  	 )
16:21:06 2787  	 LOOP
16:21:06 2788  
16:21:06 2789  	   -- Check each charge in invoice
16:21:06 2790  	   FOR f_charge IN (
16:21:06 2791  	     SELECT
16:21:06 2792  	       CHARGE.ID,
16:21:06 2793  	       CHARGE.CHARGE_STATUS_ID,
16:21:06 2794  	       CHARGE.CHARGE_AMOUNT
16:21:06 2795  	     FROM
16:21:06 2796  	       CHARGE
16:21:06 2797  	     WHERE
16:21:06 2798  	       CHARGE.INVOICE_ID = f_invoice.ID
16:21:06 2799  	   )
16:21:06 2800  	   LOOP
16:21:06 2801  
16:21:06 2802  	     -- Charge amount < 0     => it is a refund
16:21:06 2803  	     -- Charge status is OPEN => means that it is not processed yet
16:21:06 2804  	     IF f_charge.CHARGE_AMOUNT < 0
16:21:06 2805  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED THEN
16:21:06 2806  	       var_local_result := GLOBAL_CONSTANTS_V16.TRUE;
16:21:06 2807  	     END IF;
16:21:06 2808  
16:21:06 2809  	   END LOOP;
16:21:06 2810  
16:21:06 2811  	 END LOOP;
16:21:06 2812  
16:21:06 2813  	 IF var_local_result IS NULL THEN
16:21:06 2814  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
16:21:06 2815  	 ELSE
16:21:06 2816  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
16:21:06 2817  	 END IF;
16:21:06 2818  
16:21:06 2819  EXCEPTION
16:21:06 2820  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:06 2821  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2822  	   SPROC_NAME, 'No such transaction id');
16:21:06 2823  WHEN OTHERS THEN
16:21:06 2824  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2825  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 2826  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
16:21:06 2827  
16:21:06 2828  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
16:21:06 2829  /*
16:21:06 2830  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2831  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2832  */
16:21:06 2833  	 in_group_id	    IN NUMBER,
16:21:06 2834  	 in_offer_chain_id  IN NUMBER,
16:21:06 2835  	 out_result	    OUT NUMBER
16:21:06 2836  ) AS
16:21:06 2837  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
16:21:06 2838  -- VARIABLES
16:21:06 2839  temp_acct_id	    NUMBER;
16:21:06 2840  temp_oc_id	    NUMBER;
16:21:06 2841  -- EXCEPTIONS
16:21:06 2842  BAD_GROUP_ID EXCEPTION;
16:21:06 2843  BAD_OFFER_CHAIN_ID EXCEPTION;
16:21:06 2844  BEGIN
16:21:06 2845  	 -- Check that group id exists
16:21:06 2846  	 BEGIN
16:21:06 2847  	   SELECT
16:21:06 2848  	     ACCOUNT.ID into temp_acct_id
16:21:06 2849  	   FROM
16:21:06 2850  	     ACCOUNT
16:21:06 2851  	   WHERE
16:21:06 2852  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:06 2853  	   EXCEPTION
16:21:06 2854  	     WHEN NO_DATA_FOUND THEN
16:21:06 2855  	       RAISE BAD_GROUP_ID;
16:21:06 2856  	 END;
16:21:06 2857  	 -- Check that offer chain id exists
16:21:06 2858  	 BEGIN
16:21:06 2859  	   SELECT
16:21:06 2860  	     OFFER_CHAIN.ID into temp_oc_id
16:21:06 2861  	   FROM
16:21:06 2862  	     OFFER_CHAIN
16:21:06 2863  	   WHERE
16:21:06 2864  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:21:06 2865  	   EXCEPTION
16:21:06 2866  	     WHEN NO_DATA_FOUND THEN
16:21:06 2867  	       RAISE BAD_OFFER_CHAIN_ID;
16:21:06 2868  	 END;
16:21:06 2869  	 SELECT
16:21:06 2870  	   COUNT(*) into out_result
16:21:06 2871  	 FROM
16:21:06 2872  	   SUBSCRIPTION
16:21:06 2873  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:21:06 2874  	 WHERE
16:21:06 2875  	   ACCOUNT.GROUP_ID = in_group_id
16:21:06 2876  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
16:21:06 2877  	   AND (
16:21:06 2878  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 2879  	   );
16:21:06 2880  
16:21:06 2881  EXCEPTION
16:21:06 2882  WHEN BAD_GROUP_ID THEN
16:21:06 2883  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2884  	   SPROC_NAME, 'No such transaction id');
16:21:06 2885  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:06 2886  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2887  	   SPROC_NAME, 'No such offer chain id');
16:21:06 2888  WHEN OTHERS THEN
16:21:06 2889  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2890  	   sproc_name, 'Unknown error', sqlerrm);
16:21:06 2891  END GET_EXISTING_SUBSCR_NUMBER;
16:21:06 2892  
16:21:06 2893  PROCEDURE GET_EXISTING_SUBSCR_IDS (
16:21:06 2894  /*
16:21:06 2895  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2896  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2897  */
16:21:06 2898  	 in_group_id	    IN NUMBER,
16:21:06 2899  	 in_offer_chain_id  IN NUMBER,
16:21:06 2900  	 out_result_set     OUT SYS_REFCURSOR
16:21:06 2901  ) AS
16:21:06 2902  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
16:21:06 2903  -- VARIABLES
16:21:06 2904  temp_acct_id	    NUMBER;
16:21:06 2905  temp_oc_id	    NUMBER;
16:21:06 2906  -- EXCEPTIONS
16:21:06 2907  BAD_GROUP_ID EXCEPTION;
16:21:06 2908  BAD_OFFER_CHAIN_ID EXCEPTION;
16:21:06 2909  BEGIN
16:21:06 2910  
16:21:06 2911  	 -- Check that group id exists
16:21:06 2912  	 BEGIN
16:21:06 2913  	   SELECT
16:21:06 2914  	     ACCOUNT.ID into temp_acct_id
16:21:06 2915  	   FROM
16:21:06 2916  	     ACCOUNT
16:21:06 2917  	   WHERE
16:21:06 2918  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:06 2919  	   EXCEPTION
16:21:06 2920  	     WHEN NO_DATA_FOUND THEN
16:21:06 2921  	       RAISE BAD_GROUP_ID;
16:21:06 2922  	 END;
16:21:06 2923  	 -- Check that offer chain id exists
16:21:06 2924  	 BEGIN
16:21:06 2925  	   SELECT
16:21:06 2926  	     OFFER_CHAIN.ID into temp_oc_id
16:21:06 2927  	   FROM
16:21:06 2928  	     OFFER_CHAIN
16:21:06 2929  	   WHERE
16:21:06 2930  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:21:06 2931  	   EXCEPTION
16:21:06 2932  	     WHEN NO_DATA_FOUND THEN
16:21:06 2933  	       RAISE BAD_OFFER_CHAIN_ID;
16:21:06 2934  	 END;
16:21:06 2935  
16:21:06 2936  	 OPEN out_result_set FOR
16:21:06 2937  	 SELECT
16:21:06 2938  	   SUBSCRIPTION.ID
16:21:06 2939  	 FROM
16:21:06 2940  	   SUBSCRIPTION
16:21:06 2941  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:21:06 2942  	 WHERE
16:21:06 2943  	   ACCOUNT.GROUP_ID = in_group_id
16:21:06 2944  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
16:21:06 2945  	   AND (
16:21:06 2946  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:06 2947  	   );
16:21:06 2948  
16:21:06 2949  EXCEPTION
16:21:06 2950  WHEN BAD_GROUP_ID THEN
16:21:06 2951  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2952  	   SPROC_NAME, 'No such transaction id');
16:21:06 2953  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:06 2954  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2955  	   SPROC_NAME, 'No such offer chain id');
16:21:06 2956  WHEN OTHERS THEN
16:21:06 2957  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2958  	   sproc_name, 'Unknown error', sqlerrm);
16:21:06 2959  END GET_EXISTING_SUBSCR_IDS;
16:21:06 2960  
16:21:06 2961  PROCEDURE ADD_META_DATA (
16:21:06 2962  /*
16:21:06 2963  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:06 2964  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 2965  */
16:21:06 2966  	 in_subscription_id IN NUMBER,
16:21:06 2967  	 in_name	    IN VARCHAR2,
16:21:06 2968  	 in_value	    IN VARCHAR2,
16:21:06 2969  	 in_created_by	    IN VARCHAR2
16:21:06 2970  ) AS
16:21:06 2971  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
16:21:06 2972  BEGIN
16:21:06 2973  
16:21:06 2974  	 INSERT INTO SUBSCRIPTION_META_DATA (
16:21:06 2975  	   ID,
16:21:06 2976  	   SUBSCRIPTION_ID,
16:21:06 2977  	   NAME,
16:21:06 2978  	   VALUE,
16:21:06 2979  	   CREATE_DATE,
16:21:06 2980  	   CREATED_BY
16:21:06 2981  	 ) VALUES (
16:21:06 2982  	   SUBMD_ID_SEQ.nextVal,
16:21:06 2983  	   in_subscription_id,
16:21:06 2984  	   in_name,
16:21:06 2985  	   in_value,
16:21:06 2986  	   sysdate,
16:21:06 2987  	   in_created_by
16:21:06 2988  	 );
16:21:06 2989  
16:21:06 2990  EXCEPTION
16:21:06 2991  WHEN OTHERS THEN
16:21:06 2992  	 IF SQLCODE = -2291 THEN
16:21:06 2993  	   PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:06 2994  	     SPROC_NAME, 'No such subscription');
16:21:06 2995  	 ELSE
16:21:06 2996  	   PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 2997  	     SPROC_NAME, 'Unknown error', sqlerrm);
16:21:06 2998  	 END IF;
16:21:06 2999  END ADD_META_DATA;
16:21:06 3000  
16:21:06 3001  /******************************************************************************/
16:21:06 3002  
16:21:06 3003  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
16:21:06 3004  /*
16:21:06 3005  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:06 3006  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 3007  */
16:21:06 3008  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
16:21:06 3009  	 out_result_set       OUT SYS_REFCURSOR
16:21:06 3010  ) AS
16:21:06 3011  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
16:21:06 3012  -- Exceptions
16:21:06 3013  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
16:21:06 3014  BEGIN
16:21:06 3015  
16:21:06 3016  	 IF in_subscriptions_ids IS NULL THEN
16:21:06 3017  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
16:21:06 3018  	 END IF;
16:21:06 3019  
16:21:06 3020  	 OPEN out_result_set FOR
16:21:06 3021  	 SELECT
16:21:06 3022  	   SMD.SUBSCRIPTION_ID,
16:21:06 3023  	   SMD.NAME,
16:21:06 3024  	   SMD.VALUE
16:21:06 3025  	 FROM
16:21:06 3026  	   SUBSCRIPTION_META_DATA SMD
16:21:06 3027  	 WHERE
16:21:06 3028  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
16:21:06 3029  
16:21:06 3030  EXCEPTION
16:21:06 3031  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
16:21:06 3032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:06 3033  	   SPROC_NAME, 'Bad subscription ids parameter');
16:21:06 3034  WHEN OTHERS THEN
16:21:06 3035  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 3036  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:06 3037  END GET_SUBSCRIPTIONS_META_DATA;
16:21:06 3038  
16:21:06 3039  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
16:21:06 3040  /*
16:21:06 3041  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 3042  */
16:21:06 3043  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
16:21:06 3044  	 out_result_set     OUT SYS_REFCURSOR
16:21:06 3045  ) AS
16:21:06 3046  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
16:21:06 3047  BEGIN
16:21:06 3048  	 OPEN out_result_set FOR
16:21:06 3049  	 SELECT subscription.id FROM
16:21:06 3050  	   subscription
16:21:06 3051  	 INNER JOIN license ON license.subscription_id = subscription.id
16:21:06 3052  	 INNER JOIN invoice ON invoice.id = license.invoice_id
16:21:06 3053  	 INNER JOIN charge ON invoice.id = charge.invoice_id
16:21:06 3054  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
16:21:06 3055  	 WHERE transaction.order_id = in_order_id;
16:21:06 3056  EXCEPTION
16:21:06 3057  WHEN OTHERS THEN
16:21:06 3058  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 3059  	   SPROC_NAME, 'Unknown error', sqlerrm);
16:21:06 3060  END GET_SUBS_BY_TRNS_ORDER_ID;
16:21:06 3061  
16:21:06 3062  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
16:21:06 3063  	(
16:21:06 3064  /*
16:21:06 3065  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:06 3066  */
16:21:06 3067  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:21:06 3068  	 out_result_set      OUT SYS_REFCURSOR
16:21:06 3069  )
16:21:06 3070  AS
16:21:06 3071  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
16:21:06 3072  BEGIN
16:21:06 3073  	 OPEN out_result_set FOR
16:21:06 3074  	 SELECT
16:21:06 3075  	   c.ID,
16:21:06 3076  	   c.TRANSACTION_ID,
16:21:06 3077  	   c.INSTRUMENT_ID,
16:21:06 3078  	   c.INSTRUMENT_TYPE_ID,
16:21:06 3079  	   c.CHARGE_AMOUNT,
16:21:06 3080  	   c.CREATE_DATE,
16:21:06 3081  	   c.CREATED_BY,
16:21:06 3082  	   c.INVOICE_ID
16:21:06 3083  	  FROM
16:21:06 3084  	   subscription s,
16:21:06 3085  	   license l,
16:21:06 3086  	   charge c
16:21:06 3087  	 WHERE
16:21:06 3088  	   s.id = l.subscription_id and
16:21:06 3089  	   l.invoice_id = c.invoice_id and
16:21:06 3090  	   c.charge_status_id = GLOBAL_STATUSES_V16.CHARGE_OPENED and
16:21:06 3091  	   exists (
16:21:06 3092  	     select null
16:21:06 3093  	     from transaction t
16:21:06 3094  	     where
16:21:06 3095  	       t.id = c.transaction_id
16:21:06 3096  	   ) and
16:21:06 3097  	   s.id = in_subscription_id;
16:21:06 3098  EXCEPTION
16:21:06 3099  WHEN OTHERS THEN
16:21:06 3100  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:06 3101  	   SPROC_NAME, 'Unknown error', sqlerrm);
16:21:06 3102  END GET_OPEN_CHARGES_BY_SUBID;
16:21:06 3103  
16:21:06 3104  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
16:21:06 3105  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
16:21:06 3106  ) RETURN NUMBER
16:21:06 3107  AS
16:21:06 3108  var_gift_certificate_id NUMBER;
16:21:06 3109  BEGIN
16:21:06 3110  	     SELECT id INTO var_gift_certificate_id
16:21:06 3111  	     FROM
16:21:06 3112  	       gift_certificate gc
16:21:06 3113  	     WHERE
16:21:06 3114  	       gc.finalized_invoice_id in (
16:21:06 3115  		 SELECT invoice_id
16:21:06 3116  		 FROM (
16:21:06 3117  		   SELECT l.invoice_id
16:21:06 3118  		   FROM
16:21:06 3119  		     license l
16:21:06 3120  		   WHERE
16:21:06 3121  		     l.subscription_id = in_subscription_id
16:21:06 3122  		   ORDER BY l.create_date asc
16:21:06 3123  		 )
16:21:06 3124  	       )
16:21:06 3125  	       and rownum <= 1;
16:21:06 3126  	     return var_gift_certificate_id;
16:21:06 3127  END GET_GIFT_CERT_ID_BY_SUB_ID;
16:21:06 3128  
16:21:06 3129  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
16:21:06 3130  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
16:21:06 3131  ) RETURN VARCHAR2
16:21:06 3132  AS
16:21:06 3133  var_gift_certificate_code VARCHAR2(255 BYTE);
16:21:06 3134  BEGIN
16:21:06 3135  	     SELECT code INTO var_gift_certificate_code
16:21:06 3136  	     FROM
16:21:06 3137  	       gift_certificate gc
16:21:06 3138  	     WHERE
16:21:06 3139  	       gc.finalized_invoice_id in (
16:21:06 3140  		 SELECT invoice_id
16:21:06 3141  		 FROM (
16:21:06 3142  		   SELECT l.invoice_id
16:21:06 3143  		   FROM
16:21:06 3144  		     license l
16:21:06 3145  		   WHERE
16:21:06 3146  		     l.subscription_id = in_subscription_id
16:21:06 3147  		 )
16:21:06 3148  	       )
16:21:06 3149  	       and rownum <= 1;
16:21:06 3150  	     return var_gift_certificate_code;
16:21:06 3151  END GET_GIFT_CERT_CODE_BY_SUB_ID;
16:21:06 3152  
16:21:06 3153  
16:21:06 3154  
16:21:06 3155  PROCEDURE GET_ACTIVE_MEU_SUBS (
16:21:06 3156  	 out_result_set      OUT SYS_REFCURSOR
16:21:06 3157  )
16:21:06 3158  AS
16:21:06 3159  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
16:21:06 3160  BEGIN
16:21:06 3161  	 OPEN out_result_set FOR
16:21:06 3162  	       SELECT
16:21:06 3163  		   s.id,
16:21:06 3164  		   s.instrument_type_id,
16:21:06 3165  		   s.instrument_id,
16:21:06 3166  		   a.group_id,
16:21:06 3167  		   s.offer_chain_id
16:21:06 3168  	       FROM
16:21:06 3169  		   core_owner.subscription s,
16:21:06 3170  		   core_owner.account a
16:21:06 3171  	       WHERE
16:21:06 3172  		   a.id = s.account_id AND(
16:21:06 3173  		       s.offer_chain_id = 1745992781 OR
16:21:06 3174  		       s.offer_chain_id = 3902149773 OR
16:21:06 3175  		       s.offer_chain_id = 2240201337) AND
16:21:06 3176  		   NOT EXISTS
16:21:06 3177  		   (
16:21:06 3178  		       SELECT
16:21:06 3179  			   1
16:21:06 3180  		       FROM
16:21:06 3181  			   core_owner.subscription ss
16:21:06 3182  		       WHERE
16:21:06 3183  			   ss.account_id = a.id AND(
16:21:06 3184  			       ss.offer_chain_id = 2794122734 OR
16:21:06 3185  			       ss.offer_chain_id = 3564368005 OR
16:21:06 3186  			       ss.offer_chain_id = 757934392)) AND
16:21:06 3187  		   rownum < 5000;
16:21:06 3188  END GET_ACTIVE_MEU_SUBS;
16:21:06 3189  
16:21:06 3190  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
16:21:06 3191  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:21:06 3192  	 out_offer_id	     OUT NUMBER
16:21:06 3193  )
16:21:06 3194  AS
16:21:06 3195  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
16:21:06 3196  BEGIN
16:21:06 3197  	 SELECT OFFER_ID INTO out_offer_id
16:21:06 3198  	 FROM LICENSE L,
16:21:06 3199  	 (
16:21:06 3200  	   SELECT MIN(ID) ID FROM LICENSE
16:21:06 3201  	   WHERE SUBSCRIPTION_ID = in_subscription_id
16:21:06 3202  	   AND LICENSE_STATUS_ID = 2
16:21:06 3203  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
16:21:06 3204  	 ) EARLIEST_ACTIVE_LICENSE
16:21:06 3205  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
16:21:06 3206  END GET_EARLIEST_ACTIVE_OFFER_ID;
16:21:06 3207  
16:21:06 3208  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
16:21:06 3209  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:21:06 3210  	 out_license_id        OUT NUMBER
16:21:06 3211  )
16:21:06 3212  AS
16:21:06 3213  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
16:21:06 3214  BEGIN
16:21:06 3215  	 SELECT MIN(ID) into out_license_id
16:21:06 3216  	 FROM LICENSE
16:21:06 3217  	 WHERE SUBSCRIPTION_ID = in_subscription_id
16:21:06 3218  	 AND LICENSE_STATUS_ID = 2
16:21:06 3219  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
16:21:06 3220  END GET_EARLIEST_ACTIVE_LICENSE_ID;
16:21:06 3221  
16:21:06 3222  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
16:21:06 3223  	 out_result_set      OUT SYS_REFCURSOR
16:21:06 3224  )
16:21:06 3225  AS
16:21:06 3226  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
16:21:06 3227  BEGIN
16:21:06 3228  	 OPEN out_result_set FOR
16:21:06 3229  	   SELECT
16:21:06 3230  	     s.id
16:21:06 3231  	   FROM
16:21:06 3232  	     core_owner.transaction t
16:21:06 3233  	   INNER JOIN
16:21:06 3234  	     core_owner.charge c
16:21:06 3235  	   ON
16:21:06 3236  	     c.transaction_id = t.id
16:21:06 3237  	   INNER JOIN
16:21:06 3238  	     core_owner.invoice i
16:21:06 3239  	   ON
16:21:06 3240  	     i.id = c.invoice_id
16:21:06 3241  	   INNER JOIN
16:21:06 3242  	     core_owner.license l
16:21:06 3243  	   ON
16:21:06 3244  	     i.id = l.invoice_id
16:21:06 3245  	   INNER JOIN
16:21:06 3246  	     core_owner.subscription s
16:21:06 3247  	   ON
16:21:06 3248  	     l.subscription_id = s.id
16:21:06 3249  	   INNER JOIN
16:21:06 3250  	     core_owner.account a
16:21:06 3251  	   ON
16:21:06 3252  	     s.account_id = a.id
16:21:06 3253  	   JOIN
16:21:06 3254  	     core_owner.rcn_cpt_chargeback_act_detail ccad
16:21:06 3255  	   ON
16:21:06 3256  	     t.order_id = ccad.merchant_order_number
16:21:06 3257  	   WHERE
16:21:06 3258  	     ccad.chargeback_category = 'RECD'
16:21:06 3259  	   AND s.subscription_status_id = 1;
16:21:06 3260  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
16:21:06 3261  
16:21:06 3262  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
16:21:06 3263  	 out_result_set      OUT SYS_REFCURSOR
16:21:06 3264  )
16:21:06 3265  AS
16:21:06 3266  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
16:21:06 3267  BEGIN
16:21:06 3268  	 OPEN out_result_set FOR
16:21:06 3269  	   SELECT
16:21:06 3270  	     s.id
16:21:06 3271  	   FROM
16:21:06 3272  	     core_owner.transaction t
16:21:06 3273  	   INNER JOIN
16:21:06 3274  	     core_owner.charge c
16:21:06 3275  	   ON
16:21:06 3276  	     c.transaction_id = t.id
16:21:06 3277  	   INNER JOIN
16:21:06 3278  	     core_owner.invoice i
16:21:06 3279  	   ON
16:21:06 3280  	     i.id = c.invoice_id
16:21:06 3281  	   INNER JOIN
16:21:06 3282  	     core_owner.license l
16:21:06 3283  	   ON
16:21:06 3284  	     i.id = l.invoice_id
16:21:06 3285  	   INNER JOIN
16:21:06 3286  	     core_owner.subscription s
16:21:06 3287  	   ON
16:21:06 3288  	     l.subscription_id = s.id
16:21:06 3289  	   INNER JOIN
16:21:06 3290  	     core_owner.account a
16:21:06 3291  	   ON
16:21:06 3292  	     s.account_id = a.id
16:21:06 3293  	   INNER JOIN
16:21:06 3294  	     core_owner.rcn_pp_trans_detail ptd
16:21:06 3295  	   ON
16:21:06 3296  	     t.order_id = ptd.invoice_id
16:21:06 3297  	   WHERE
16:21:06 3298  	     ptd.trans_status = 'D'
16:21:06 3299  	   AND s.subscription_status_id = 1;
16:21:06 3300  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
16:21:06 3301  
16:21:06 3302  END PROCS_SUBSCRIPTION_V16;
16:21:06 3303  .
16:21:06 SQL> /

Package body created.

Elapsed: 00:00:00.26
16:21:07 SQL> 
16:21:07 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V16" AS
16:21:07   2  
16:21:07   3  PROCEDURE IS_INVOICE_FOR_GC (
16:21:07   4  	in_invoice_id IN NUMBER,
16:21:07   5  	out_result    OUT NUMBER
16:21:07   6  ) AS
16:21:07   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
16:21:07   8  var_is_for_gc NUMBER;
16:21:07   9  BEGIN
16:21:07  10  	SELECT
16:21:07  11  	  count(1) into var_is_for_gc
16:21:07  12  	FROM GIFT_CERTIFICATE GC
16:21:07  13  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
16:21:07  14  
16:21:07  15  	IF var_is_for_gc > 0 THEN
16:21:07  16  	  out_result := 1;
16:21:07  17  	ELSE
16:21:07  18  	  out_result := 0;
16:21:07  19  	END IF;
16:21:07  20  END IS_INVOICE_FOR_GC;
16:21:07  21  
16:21:07  22  PROCEDURE CREATE_INVOICE(
16:21:07  23  /*
16:21:07  24  Throws exceptions:
16:21:07  25  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07  26  */
16:21:07  27  	  in_invoice_status IN NUMBER,
16:21:07  28  	  in_created_by     IN VARCHAR2,
16:21:07  29  	  in_tax_exempt_id  IN VARCHAR2,
16:21:07  30  	  out_invoice_id    OUT NUMBER
16:21:07  31  ) AS
16:21:07  32  -- VARIABLES
16:21:07  33  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
16:21:07  34  var_new_invoice_id NUMBER;
16:21:07  35  -- EXCEPTIONS
16:21:07  36  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07  37  BEGIN
16:21:07  38  
16:21:07  39  	PROCS_INVOICE_CRU_V16.CREATE_INVOICE(
16:21:07  40  	  out_invoice_id		 => var_new_invoice_id,
16:21:07  41  	  in_created_by 		 => in_created_by,
16:21:07  42  	  in_invoice_status_id		 => in_invoice_status,
16:21:07  43  	  in_tax_exempt_id		 => in_tax_exempt_id
16:21:07  44  	);
16:21:07  45  
16:21:07  46  	out_invoice_id := var_new_invoice_id;
16:21:07  47  
16:21:07  48  EXCEPTION
16:21:07  49  WHEN OTHERS THEN
16:21:07  50  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07  51  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07  52  END CREATE_INVOICE;
16:21:07  53  
16:21:07  54  /************************************************************/
16:21:07  55  
16:21:07  56  PROCEDURE GET_PENDING_INVOICES (
16:21:07  57  /*
16:21:07  58  Throws exceptions:
16:21:07  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07  60  */
16:21:07  61  	out_result_set1      OUT SYS_REFCURSOR,
16:21:07  62  	out_result_set2      OUT SYS_REFCURSOR,
16:21:07  63  	out_result_set3      OUT SYS_REFCURSOR,
16:21:07  64  	in_row_number	     IN NUMBER DEFAULT NULL
16:21:07  65  ) AS
16:21:07  66  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
16:21:07  67  -- COMSTANTS
16:21:07  68  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
16:21:07  69  -- VARIABLES
16:21:07  70  var_row_number NUMBER;
16:21:07  71  BEGIN
16:21:07  72  
16:21:07  73  	IF in_row_number IS NULL THEN
16:21:07  74  	  var_row_number := DEFAULT_ROW_NUMBER;
16:21:07  75  	ELSE
16:21:07  76  	  var_row_number := in_row_number;
16:21:07  77  	END IF;
16:21:07  78  
16:21:07  79  	-- Invoices with one or more payments(charges) with transaction status PENDING
16:21:07  80  	OPEN out_result_set1 FOR
16:21:07  81  SELECT * FROM
16:21:07  82  (
16:21:07  83  	SELECT
16:21:07  84  	  INVOICE.ID
16:21:07  85  	FROM
16:21:07  86  	  CHARGE
16:21:07  87  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
16:21:07  88  	WHERE
16:21:07  89  	  EXISTS(
16:21:07  90  	    SELECT NULL
16:21:07  91  	    FROM TRANSACTION
16:21:07  92  	    WHERE
16:21:07  93  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
16:21:07  94  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
16:21:07  95  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V16.TRUE
16:21:07  96  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
16:21:07  97  	  )
16:21:07  98  	  AND
16:21:07  99  	  NOT EXISTS(
16:21:07 100  	    SELECT NULL
16:21:07 101  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:07 102  	    WHERE PROCESS_NAME = SPROC_NAME
16:21:07 103  	      AND GENERIC_ID = INVOICE.ID
16:21:07 104  	  )
16:21:07 105  	  AND ROWNUM <= var_row_number*10
16:21:07 106  	  ORDER BY dbms_random.value
16:21:07 107  ) WHERE
16:21:07 108  	  ROWNUM <= var_row_number;
16:21:07 109  
16:21:07 110  	-- Invoices not marked as CLOSED but are fully paid (shouldn't happen).
16:21:07 111  	OPEN out_result_set2 FOR
16:21:07 112  	SELECT
16:21:07 113  	  INVOICE.ID
16:21:07 114  	FROM
16:21:07 115  	  INVOICE
16:21:07 116  	WHERE
16:21:07 117  	  1 = 2 AND
16:21:07 118  	  (
16:21:07 119  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V16.INVOICE_OPEN
16:21:07 120  	  )
16:21:07 121  	  AND NOT EXISTS(
16:21:07 122  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED AND ROWNUM <= 1
16:21:07 123  	  )
16:21:07 124  	  AND EXISTS (
16:21:07 125  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID != GLOBAL_STATUSES_V16.CHARGE_OPENED AND ROWNUM <= 1
16:21:07 126  	  )
16:21:07 127  	  AND INVOICE.ID NOT IN
16:21:07 128  	    (
16:21:07 129  	      SELECT GENERIC_ID
16:21:07 130  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:07 131  	      WHERE
16:21:07 132  		PROCESS_NAME = SPROC_NAME
16:21:07 133  	    )
16:21:07 134  	  AND ROWNUM <= var_row_number;
16:21:07 135  
16:21:07 136  	-- Invoices not marked as CLOSED with no payments(charges).
16:21:07 137  	OPEN out_result_set3 FOR
16:21:07 138  	SELECT
16:21:07 139  	  INVOICE.ID
16:21:07 140  	FROM
16:21:07 141  	  INVOICE
16:21:07 142  	WHERE
16:21:07 143  	  1 = 2 AND
16:21:07 144  	  (
16:21:07 145  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V16.INVOICE_OPEN
16:21:07 146  	  )
16:21:07 147  	  AND NOT EXISTS (
16:21:07 148  	    SELECT 1 FROM CHARGE WHERE CHARGE.INVOICE_ID = INVOICE.ID AND ROWNUM <= 1
16:21:07 149  	  )
16:21:07 150  	  AND INVOICE.ID NOT IN
16:21:07 151  	    (
16:21:07 152  	      SELECT GENERIC_ID
16:21:07 153  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:07 154  	      WHERE
16:21:07 155  		PROCESS_NAME = SPROC_NAME
16:21:07 156  	    )
16:21:07 157  	  AND ROWNUM <= var_row_number;
16:21:07 158  
16:21:07 159  EXCEPTION
16:21:07 160  WHEN OTHERS THEN
16:21:07 161  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 163  END GET_PENDING_INVOICES;
16:21:07 164  
16:21:07 165  /************************************************************/
16:21:07 166  
16:21:07 167  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
16:21:07 168  	in_invoice_id IN  NUMBER
16:21:07 169  ) RETURN NUMBER AS
16:21:07 170  var_amount NUMBER;
16:21:07 171  BEGIN
16:21:07 172  
16:21:07 173  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
16:21:07 174  	RETURN var_amount;
16:21:07 175  
16:21:07 176  END;
16:21:07 177  
16:21:07 178  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:21:07 179  /*
16:21:07 180  Throws exceptions:
16:21:07 181  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 182  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 183  */
16:21:07 184  	in_invoice_id IN  NUMBER,
16:21:07 185  	out_amount    OUT NUMBER
16:21:07 186  ) AS
16:21:07 187  -- VARIABLES
16:21:07 188  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
16:21:07 189  temp_invoice_id	     NUMBER;
16:21:07 190  var_total_amount	     NUMBER(10,6);
16:21:07 191  var_final_amount	     NUMBER(10,2);
16:21:07 192  var_line_item_amount   NUMBER(10,6);
16:21:07 193  
16:21:07 194  var_line_items_set     SYS_REFCURSOR;
16:21:07 195  var_line_item_id	     NUMBER;
16:21:07 196  var_line_item_quantity NUMBER;
16:21:07 197  var_line_item_price    NUMBER (10,2);
16:21:07 198  
16:21:07 199  var_discount_fixed_amount NUMBER (10,2);
16:21:07 200  var_discount_percent_amount NUMBER (10,2);
16:21:07 201  
16:21:07 202  -- EXCEPTIONS
16:21:07 203  BAD_INVOICE_ID		    EXCEPTION;
16:21:07 204  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
16:21:07 205  EXCEPTION_MESSAGE VARCHAR2(1024);
16:21:07 206  BEGIN
16:21:07 207  
16:21:07 208  	var_total_amount := 0;
16:21:07 209  
16:21:07 210  	-- Check that given invoice exists
16:21:07 211  	BEGIN
16:21:07 212  	  SELECT
16:21:07 213  	    INVOICE.ID into temp_invoice_id
16:21:07 214  	  FROM
16:21:07 215  	    INVOICE
16:21:07 216  	  WHERE
16:21:07 217  	    INVOICE.ID = in_invoice_id
16:21:07 218  	    AND ROWNUM <= 1;
16:21:07 219  	  EXCEPTION
16:21:07 220  	    WHEN NO_DATA_FOUND THEN
16:21:07 221  	      RAISE BAD_INVOICE_ID;
16:21:07 222  	END;
16:21:07 223  
16:21:07 224  	-- Calculate amount for each line item in invoice
16:21:07 225  	FOR f_line_item IN (
16:21:07 226  	  SELECT
16:21:07 227  	    LINE_ITEM.ID
16:21:07 228  	  FROM
16:21:07 229  	    LINE_ITEM
16:21:07 230  	  WHERE
16:21:07 231  	    LINE_ITEM.INVOICE_ID = in_invoice_id
16:21:07 232  	)
16:21:07 233  	LOOP
16:21:07 234  	  BEGIN
16:21:07 235  	    PROCS_LINE_ITEMS_V16.CALCULATE_LINE_ITEM_AMOUNT(
16:21:07 236  	      in_line_item_id => f_line_item.ID,
16:21:07 237  	      out_amount      => var_line_item_amount
16:21:07 238  	    );
16:21:07 239  	    var_total_amount := var_total_amount + var_line_item_amount;
16:21:07 240  	    EXCEPTION
16:21:07 241  	      WHEN OTHERS THEN
16:21:07 242  		EXCEPTION_MESSAGE := SQLERRM;
16:21:07 243  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
16:21:07 244  	  END;
16:21:07 245  	END LOOP;
16:21:07 246  	var_final_amount := var_total_amount;
16:21:07 247  	out_amount := var_final_amount;
16:21:07 248  
16:21:07 249  EXCEPTION
16:21:07 250  WHEN BAD_INVOICE_ID THEN
16:21:07 251  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 252  	  SPROC_NAME, 'No such invoice');
16:21:07 253  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
16:21:07 254  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 255  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
16:21:07 256  WHEN OTHERS THEN
16:21:07 257  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 258  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 259  END;
16:21:07 260  
16:21:07 261  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
16:21:07 262  /*
16:21:07 263  Throws exceptions:
16:21:07 264  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 265  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 266  */
16:21:07 267  	in_invoice_id  IN  NUMBER,
16:21:07 268  	out_account_id OUT NUMBER
16:21:07 269  ) AS
16:21:07 270  -- VARIABLES
16:21:07 271  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
16:21:07 272  temp_gc_account_id NUMBER;
16:21:07 273  temp_ss_account_id NUMBER;
16:21:07 274  temp_invoice_id	 NUMBER;
16:21:07 275  -- EXCEPTIONS
16:21:07 276  BAD_INVOICE_ID	   EXCEPTION;
16:21:07 277  CAN_NOT_FIND_ACCOUNT EXCEPTION;
16:21:07 278  BEGIN
16:21:07 279  
16:21:07 280  	-- Check that given invoice exists
16:21:07 281  	BEGIN
16:21:07 282  	  SELECT
16:21:07 283  	    INVOICE.ID into temp_invoice_id
16:21:07 284  	  FROM
16:21:07 285  	    INVOICE
16:21:07 286  	  WHERE
16:21:07 287  	    INVOICE.ID = in_invoice_id;
16:21:07 288  	  EXCEPTION
16:21:07 289  	    WHEN NO_DATA_FOUND THEN
16:21:07 290  	      RAISE BAD_INVOICE_ID;
16:21:07 291  	END;
16:21:07 292  
16:21:07 293  	-- Try to find gift certificate with given invoice
16:21:07 294  	BEGIN
16:21:07 295  	  SELECT
16:21:07 296  	    ACCOUNT.GROUP_ID into temp_gc_account_id
16:21:07 297  	  FROM
16:21:07 298  	    GIFT_CERTIFICATE
16:21:07 299  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
16:21:07 300  	  WHERE
16:21:07 301  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
16:21:07 302  	    AND ROWNUM <= 1;
16:21:07 303  	  EXCEPTION
16:21:07 304  	    WHEN NO_DATA_FOUND THEN
16:21:07 305  	      temp_gc_account_id := NULL;
16:21:07 306  	END;
16:21:07 307  
16:21:07 308  	-- check subscriptions for given invoice
16:21:07 309  	IF temp_gc_account_id IS NOT NULL THEN
16:21:07 310  	  out_account_id := temp_gc_account_id;
16:21:07 311  	ELSE
16:21:07 312  	  BEGIN
16:21:07 313  	    SELECT
16:21:07 314  	      ACCOUNT.GROUP_ID into temp_ss_account_id
16:21:07 315  	    FROM
16:21:07 316  	      LICENSE
16:21:07 317  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 318  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:21:07 319  	    WHERE
16:21:07 320  	      LICENSE.INVOICE_ID = in_invoice_id
16:21:07 321  	      AND ROWNUM <= 1;
16:21:07 322  	    EXCEPTION
16:21:07 323  	      WHEN NO_DATA_FOUND THEN
16:21:07 324  		temp_ss_account_id := NULL;
16:21:07 325  	  END;
16:21:07 326  	  IF temp_ss_account_id IS NULL THEN
16:21:07 327  	    RAISE CAN_NOT_FIND_ACCOUNT;
16:21:07 328  	  ELSE
16:21:07 329  	    out_account_id := temp_ss_account_id;
16:21:07 330  	  END IF;
16:21:07 331  	END IF;
16:21:07 332  
16:21:07 333  EXCEPTION
16:21:07 334  WHEN BAD_INVOICE_ID THEN
16:21:07 335  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 336  	  SPROC_NAME, 'No such invoice');
16:21:07 337  WHEN CAN_NOT_FIND_ACCOUNT THEN
16:21:07 338  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 339  	  SPROC_NAME, 'Could not find account by given invoice id');
16:21:07 340  WHEN OTHERS THEN
16:21:07 341  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 342  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 343  END GET_ACCOUNT_BY_INVOICE_ID;
16:21:07 344  
16:21:07 345  /*****************************************************************/
16:21:07 346  
16:21:07 347  PROCEDURE GET_INVOICE_DETAILS (
16:21:07 348  /*
16:21:07 349  Throws exceptions:
16:21:07 350  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 351  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 352  */
16:21:07 353  	in_invoice_id	   IN  NUMBER,
16:21:07 354  	out_group_id	   OUT NUMBER,
16:21:07 355  	out_status_id	   OUT NUMBER,
16:21:07 356  	out_line_items_set OUT SYS_REFCURSOR,
16:21:07 357  	out_pp_charges_set OUT SYS_REFCURSOR,
16:21:07 358  	out_cc_charges_set OUT SYS_REFCURSOR,
16:21:07 359  	out_gc_charges_set OUT SYS_REFCURSOR
16:21:07 360  ) AS
16:21:07 361  -- VARIABLES
16:21:07 362  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
16:21:07 363  
16:21:07 364  -- EXCEPTIONS
16:21:07 365  BAD_INVOICE_ID	     EXCEPTION;
16:21:07 366  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
16:21:07 367  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 368  BEGIN
16:21:07 369  
16:21:07 370  	-- get invoice status
16:21:07 371  	BEGIN
16:21:07 372  	  SELECT
16:21:07 373  	    INVOICE.INVOICE_STATUS_ID into out_status_id
16:21:07 374  	  FROM
16:21:07 375  	    INVOICE
16:21:07 376  	  WHERE
16:21:07 377  	    INVOICE.ID = in_invoice_id;
16:21:07 378  	  EXCEPTION
16:21:07 379  	    WHEN NO_DATA_FOUND THEN
16:21:07 380  	      RAISE BAD_INVOICE_ID;
16:21:07 381  	END;
16:21:07 382  
16:21:07 383  	-- get group id
16:21:07 384  	BEGIN
16:21:07 385  	  PROCS_INVOICE_V16.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
16:21:07 386  	  EXCEPTION
16:21:07 387  	    WHEN OTHERS THEN
16:21:07 388  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 389  	      RAISE CAN_NOT_FIND_ACCOUNT;
16:21:07 390  	END;
16:21:07 391  
16:21:07 392  	-- get all line items for given invoice
16:21:07 393  	OPEN out_line_items_set FOR
16:21:07 394  	SELECT
16:21:07 395  	  LINE_ITEM.AMOUNT,
16:21:07 396  	  LINE_ITEM.ID,
16:21:07 397  	  LINE_ITEM.CREATED_BY,
16:21:07 398  	  LINE_ITEM.CREATE_DATE,
16:21:07 399  	  LINE_ITEM.DISCOUNT_AMOUNT,
16:21:07 400  	  LINE_ITEM.TAXES_AMOUNT,
16:21:07 401  	  LINE_ITEM.PRODUCT_OFFER_ID,
16:21:07 402  	  LINE_ITEM.INVOICE_ID
16:21:07 403  	FROM
16:21:07 404  	  LINE_ITEM
16:21:07 405  	WHERE
16:21:07 406  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
16:21:07 407  
16:21:07 408  	-- get all pp charges for given invoice
16:21:07 409  	OPEN out_pp_charges_set FOR
16:21:07 410  	SELECT
16:21:07 411  	  CHARGE.ID as "CHARGE_ID",
16:21:07 412  	  CHARGE_AMOUNT,
16:21:07 413  	  CHARGE.INSTRUMENT_ID,
16:21:07 414  	  CHARGE.CHARGE_STATUS_ID
16:21:07 415  	FROM
16:21:07 416  	  CHARGE
16:21:07 417  	WHERE
16:21:07 418  	  CHARGE.INVOICE_ID = in_invoice_id
16:21:07 419  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL;
16:21:07 420  
16:21:07 421  	-- get all credir cards for given invoice
16:21:07 422  	OPEN out_cc_charges_set FOR
16:21:07 423  	SELECT
16:21:07 424  	  CHARGE.ID as "CHARGE_ID",
16:21:07 425  	  CHARGE.CHARGE_AMOUNT,
16:21:07 426  	  CHARGE.INSTRUMENT_ID,
16:21:07 427  	  CHARGE.CHARGE_STATUS_ID
16:21:07 428  	FROM
16:21:07 429  	  CHARGE
16:21:07 430  	WHERE
16:21:07 431  	  CHARGE.INVOICE_ID = in_invoice_id
16:21:07 432  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD;
16:21:07 433  
16:21:07 434  	OPEN out_gc_charges_set FOR
16:21:07 435  	SELECT
16:21:07 436  	  CHARGE.ID as "CHARGE_ID",
16:21:07 437  	  CHARGE.CHARGE_AMOUNT,
16:21:07 438  	  CHARGE.INSTRUMENT_ID,
16:21:07 439  	  CHARGE.CHARGE_STATUS_ID
16:21:07 440  	FROM
16:21:07 441  	  CHARGE
16:21:07 442  	WHERE
16:21:07 443  	  CHARGE.INVOICE_ID = in_invoice_id
16:21:07 444  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
16:21:07 445  
16:21:07 446  EXCEPTION
16:21:07 447  WHEN BAD_INVOICE_ID THEN
16:21:07 448  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 449  	  SPROC_NAME, 'No such invoice');
16:21:07 450  WHEN CAN_NOT_FIND_ACCOUNT THEN
16:21:07 451  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 452  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
16:21:07 453  WHEN OTHERS THEN
16:21:07 454  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 455  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 456  END GET_INVOICE_DETAILS;
16:21:07 457  
16:21:07 458  /******************************************************/
16:21:07 459  -- norlov: #38796
16:21:07 460  PROCEDURE GET_TRANSACTION_INVOICE (
16:21:07 461  /*
16:21:07 462  Throws exceptions:
16:21:07 463  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 464  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 465  */
16:21:07 466  	in_transaction_id  IN  NUMBER,
16:21:07 467  	out_result_set	      OUT SYS_REFCURSOR
16:21:07 468  ) AS
16:21:07 469  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
16:21:07 470  -- VARIABLES
16:21:07 471  temp_transaction_id  NUMBER;
16:21:07 472  var_invoice_id	   NUMBER;
16:21:07 473  var_subscription_id  NUMBER;
16:21:07 474  var_offer_chain_id   NUMBER;
16:21:07 475  var_offer_chain_name VARCHAR2(255);
16:21:07 476  -- EXCEPTIONS
16:21:07 477  BAD_TRANSACTION_ID     EXCEPTION;
16:21:07 478  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 479  BEGIN
16:21:07 480   -- check if there is the transaction
16:21:07 481  	BEGIN
16:21:07 482  	  SELECT
16:21:07 483  	    TRANSACTION.ID into temp_transaction_id
16:21:07 484  	  FROM
16:21:07 485  	    TRANSACTION
16:21:07 486  	  WHERE
16:21:07 487  	    TRANSACTION.ID = in_transaction_id;
16:21:07 488  	  EXCEPTION
16:21:07 489  	    WHEN NO_DATA_FOUND THEN
16:21:07 490  	      RAISE BAD_TRANSACTION_ID;
16:21:07 491  	END;
16:21:07 492  
16:21:07 493  	-- Get invoice id
16:21:07 494  	SELECT DISTINCT
16:21:07 495  	  CHARGE.INVOICE_ID into var_invoice_id
16:21:07 496  	FROM
16:21:07 497  	  CHARGE
16:21:07 498  	WHERE
16:21:07 499  	  CHARGE.TRANSACTION_ID = in_transaction_id;
16:21:07 500  
16:21:07 501  	-- Get subscription id if exists
16:21:07 502  	BEGIN
16:21:07 503  	  SELECT DISTINCT
16:21:07 504  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
16:21:07 505  	  FROM
16:21:07 506  	    LICENSE
16:21:07 507  	  WHERE
16:21:07 508  	    LICENSE.INVOICE_ID = var_invoice_id;
16:21:07 509  	  EXCEPTION
16:21:07 510  	    WHEN NO_DATA_FOUND THEN
16:21:07 511  	      var_subscription_id := NULL;
16:21:07 512  	END;
16:21:07 513  
16:21:07 514  	IF var_subscription_id IS NOT NULL THEN
16:21:07 515  	  -- Fetch offer chain from subscription
16:21:07 516  	  SELECT
16:21:07 517  	    OFFER_CHAIN.ID,
16:21:07 518  	    OFFER_CHAIN.NAME
16:21:07 519  	    into
16:21:07 520  	    var_offer_chain_id,
16:21:07 521  	    var_offer_chain_name
16:21:07 522  	  FROM
16:21:07 523  	    OFFER_CHAIN
16:21:07 524  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 525  	  WHERE
16:21:07 526  	    SUBSCRIPTION.ID = var_subscription_id;
16:21:07 527  	ELSE
16:21:07 528  	  -- Fetch offer chain from GC
16:21:07 529  	  SELECT
16:21:07 530  	    OFFER_CHAIN.ID,
16:21:07 531  	    OFFER_CHAIN.NAME
16:21:07 532  	    into
16:21:07 533  	    var_offer_chain_id,
16:21:07 534  	    var_offer_chain_name
16:21:07 535  	  FROM
16:21:07 536  	    OFFER_CHAIN
16:21:07 537  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 538  	  WHERE
16:21:07 539  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
16:21:07 540  	END IF;
16:21:07 541  
16:21:07 542  	OPEN out_result_set FOR
16:21:07 543  	SELECT DISTINCT
16:21:07 544  	  var_invoice_id       AS "INVOICE_ID",
16:21:07 545  	  var_subscription_id  AS "SUBSCRIPTION_ID",
16:21:07 546  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
16:21:07 547  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
16:21:07 548  	FROM
16:21:07 549  	  DUAL;
16:21:07 550  
16:21:07 551  EXCEPTION
16:21:07 552  WHEN BAD_TRANSACTION_ID THEN
16:21:07 553  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 554  	  SPROC_NAME, 'No such transaction');
16:21:07 555  WHEN OTHERS THEN
16:21:07 556  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 557  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 558  END GET_TRANSACTION_INVOICE;
16:21:07 559  
16:21:07 560  /******************************************************/
16:21:07 561  
16:21:07 562  PROCEDURE UPDATE_INVOICE_STATUS (
16:21:07 563  /*
16:21:07 564  Throws exceptions:
16:21:07 565  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 566  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 567  */
16:21:07 568  	in_invoice_id		       IN NUMBER,
16:21:07 569  	in_invoice_status_id	       IN NUMBER,
16:21:07 570  	in_updated_by		       IN VARCHAR2
16:21:07 571  ) AS
16:21:07 572  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
16:21:07 573  -- VARIABLES
16:21:07 574  temp_invoice_id NUMBER;
16:21:07 575  -- EXCEPTIONS
16:21:07 576  BAD_INVOICE_ID		      EXCEPTION;
16:21:07 577  BAD_INVOICE_STATUS_ID	      EXCEPTION;
16:21:07 578  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
16:21:07 579  BEGIN
16:21:07 580  
16:21:07 581  	-- Check if invoice exists
16:21:07 582  	BEGIN
16:21:07 583  	  SELECT
16:21:07 584  	    INVOICE.ID into temp_invoice_id
16:21:07 585  	  FROM
16:21:07 586  	    INVOICE
16:21:07 587  	  WHERE
16:21:07 588  	    INVOICE.ID = in_invoice_id;
16:21:07 589  	  EXCEPTION
16:21:07 590  	    WHEN NO_DATA_FOUND THEN
16:21:07 591  	      RAISE BAD_INVOICE_ID;
16:21:07 592  	END;
16:21:07 593  
16:21:07 594  	IF in_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_OPEN
16:21:07 595  	  AND in_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
16:21:07 596  	  RAISE BAD_INVOICE_STATUS_ID;
16:21:07 597  	END IF;
16:21:07 598  
16:21:07 599  	PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
16:21:07 600  	  in_invoice_id 		 => in_invoice_id,
16:21:07 601  	  in_invoice_status_id		 => in_invoice_status_id,
16:21:07 602  	  in_updated_by 		 => in_updated_by
16:21:07 603  	);
16:21:07 604  
16:21:07 605  EXCEPTION
16:21:07 606  WHEN BAD_INVOICE_STATUS_ID THEN
16:21:07 607  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 608  	  SPROC_NAME, 'Bad invoice status id');
16:21:07 609  WHEN BAD_INVOICE_ID THEN
16:21:07 610  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 611  	  SPROC_NAME, 'No such invoice');
16:21:07 612  WHEN OTHERS THEN
16:21:07 613  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 614  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 615  END UPDATE_INVOICE_STATUS;
16:21:07 616  
16:21:07 617  /****************************************************************/
16:21:07 618  
16:21:07 619  FUNCTION IS_INVOICE_PAYING_STARTED (
16:21:07 620  /*
16:21:07 621  Throws exceptions:
16:21:07 622  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 623  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 624  */
16:21:07 625  	in_invoice_id IN NUMBER
16:21:07 626  ) RETURN NUMBER AS
16:21:07 627  -- VARIABLES
16:21:07 628  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
16:21:07 629  temp_invoice_id		 NUMBER;
16:21:07 630  var_processed_charges_num  NUMBER;
16:21:07 631  var_processed_transac_num  NUMBER;
16:21:07 632  var_success_attempts_num	 NUMBER;
16:21:07 633  var_is_gc 		 NUMBER;
16:21:07 634  -- EXCEPTIONS
16:21:07 635  BAD_INVOICE_ID EXCEPTION;
16:21:07 636  BEGIN
16:21:07 637  
16:21:07 638  	-- Check that invoice exists
16:21:07 639  	BEGIN
16:21:07 640  	  SELECT
16:21:07 641  	    INVOICE.ID into temp_invoice_id
16:21:07 642  	  FROM
16:21:07 643  	    INVOICE
16:21:07 644  	  WHERE
16:21:07 645  	    INVOICE.ID = in_invoice_id;
16:21:07 646  	  EXCEPTION
16:21:07 647  	   WHEN NO_DATA_FOUND THEN
16:21:07 648  	     RAISE BAD_INVOICE_ID;
16:21:07 649  	END;
16:21:07 650  
16:21:07 651  	-- Check that there are tansaction attempts with status success
16:21:07 652  	SELECT
16:21:07 653  	  COUNT(1) into var_success_attempts_num
16:21:07 654  	FROM
16:21:07 655  	  TRANSACTION_ATTEMPT ta,
16:21:07 656  	  TRANSACTION t,
16:21:07 657  	  CHARGE c
16:21:07 658  	WHERE
16:21:07 659  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS and
16:21:07 660  	  ta.transaction_id = t.id and
16:21:07 661  	  c.transaction_id = t.id and
16:21:07 662  	  t.is_refund = GLOBAL_CONSTANTS_V16.FALSE and
16:21:07 663  	  c.invoice_id = in_invoice_id
16:21:07 664  	;
16:21:07 665  
16:21:07 666  	IF var_success_attempts_num > 0 THEN
16:21:07 667  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 668  	END IF;
16:21:07 669  
16:21:07 670  	SELECT
16:21:07 671  	  COUNT(1) into var_success_attempts_num
16:21:07 672  	FROM
16:21:07 673  	  TRANSACTION t,
16:21:07 674  	  CHARGE c
16:21:07 675  	WHERE
16:21:07 676  	  c.transaction_id = t.id and
16:21:07 677  	  t.is_refund = GLOBAL_CONSTANTS_V16.FALSE and
16:21:07 678  	  t.is_settled = GLOBAL_CONSTANTS_V16.TRUE and
16:21:07 679  	  c.invoice_id = in_invoice_id
16:21:07 680  	;
16:21:07 681  
16:21:07 682  	IF var_success_attempts_num > 0 THEN
16:21:07 683  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 684  	END IF;
16:21:07 685  
16:21:07 686  	SELECT
16:21:07 687  	  COUNT(1) into var_is_gc
16:21:07 688  	FROM
16:21:07 689  	  gift_certificate gc
16:21:07 690  	WHERE
16:21:07 691  	  gc.finalized_invoice_id = in_invoice_id
16:21:07 692  	;
16:21:07 693  
16:21:07 694  	IF var_is_gc > 0 THEN
16:21:07 695  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 696  	END IF;
16:21:07 697  
16:21:07 698  	RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:07 699  
16:21:07 700  EXCEPTION
16:21:07 701  WHEN BAD_INVOICE_ID THEN
16:21:07 702  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 703  	  SPROC_NAME, 'No such invoice');
16:21:07 704  WHEN OTHERS THEN
16:21:07 705  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 706  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 707  END IS_INVOICE_PAYING_STARTED;
16:21:07 708  
16:21:07 709  /******************************************************************************/
16:21:07 710  
16:21:07 711  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
16:21:07 712  	in_invoice_id  IN NUMBER,
16:21:07 713  	out_is_started OUT NUMBER
16:21:07 714  ) AS
16:21:07 715  BEGIN
16:21:07 716  	-- Just a wrapper
16:21:07 717  	out_is_started := PROCS_INVOICE_V16.IS_INVOICE_PAYING_STARTED(in_invoice_id);
16:21:07 718  END P_IS_INVOICE_PAYING_STARTED;
16:21:07 719  
16:21:07 720  /******************************************************************************/
16:21:07 721  
16:21:07 722  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
16:21:07 723  	in_invoice_id	      IN NUMBER,
16:21:07 724  	in_chargeback_date    IN DATE,
16:21:07 725  	out_chargeback_amount OUT NUMBER
16:21:07 726  ) AS
16:21:07 727  -- VARIABLES
16:21:07 728  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
16:21:07 729  var_chargeback_date    DATE;
16:21:07 730  temp_invoice_id	     NUMBER;
16:21:07 731  var_licenses_number    NUMBER;
16:21:07 732  var_invoice_start_date DATE;
16:21:07 733  var_invoice_end_date   DATE;
16:21:07 734  var_offer_id	     NUMBER;
16:21:07 735  var_offer_days_interval NUMBER;
16:21:07 736  var_license_days_used  NUMBER;
16:21:07 737  var_invoice_amount     NUMBER(10,2);
16:21:07 738  var_offer_chain_id     NUMBER;
16:21:07 739  var_offer_chain_meta_data_val VARCHAR2(1024);
16:21:07 740  var_offer_chain_full_refund   NUMBER;
16:21:07 741  var_offer_chain_prorated_ref  NUMBER;
16:21:07 742  var_chargeback_calculated NUMBER;
16:21:07 743  var_max_invoice_refund	NUMBER;
16:21:07 744  -- EXCEPTIONS
16:21:07 745  BAD_INVOICE_ID		  EXCEPTION;
16:21:07 746  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
16:21:07 747  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
16:21:07 748  BEGIN
16:21:07 749  
16:21:07 750  	IF in_chargeback_date IS NULL THEN
16:21:07 751  	  var_chargeback_date := PROCS_COMMON_V16.NORMALIZE_DATE(current_date);
16:21:07 752  	ELSE
16:21:07 753  	  var_chargeback_date := PROCS_COMMON_V16.NORMALIZE_DATE(in_chargeback_date);
16:21:07 754  	END IF;
16:21:07 755  
16:21:07 756  	-- Check that invoice exists
16:21:07 757  	BEGIN
16:21:07 758  	  SELECT
16:21:07 759  	    INVOICE.ID into temp_invoice_id
16:21:07 760  	  FROM
16:21:07 761  	    INVOICE
16:21:07 762  	  WHERE
16:21:07 763  	    INVOICE.ID = in_invoice_id;
16:21:07 764  	  EXCEPTION
16:21:07 765  	    WHEN NO_DATA_FOUND THEN
16:21:07 766  	      RAISE BAD_INVOICE_ID;
16:21:07 767  	END;
16:21:07 768  
16:21:07 769  	-- Check that invoice has at least one license
16:21:07 770  	SELECT
16:21:07 771  	  COUNT(*) into var_licenses_number
16:21:07 772  	FROM
16:21:07 773  	  LICENSE
16:21:07 774  	WHERE
16:21:07 775  	  LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 776  
16:21:07 777  	IF var_licenses_number = 0 THEN
16:21:07 778  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
16:21:07 779  	END IF;
16:21:07 780  
16:21:07 781  	SELECT
16:21:07 782  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
16:21:07 783  	FROM
16:21:07 784  	  LICENSE
16:21:07 785  	WHERE
16:21:07 786  	  LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 787  
16:21:07 788  	var_invoice_start_date := PROCS_COMMON_V16.NORMALIZE_DATE(var_invoice_start_date);
16:21:07 789  
16:21:07 790  	SELECT DISTINCT
16:21:07 791  	  LICENSE.OFFER_ID into var_offer_id
16:21:07 792  	FROM
16:21:07 793  	  LICENSE
16:21:07 794  	WHERE
16:21:07 795  	  LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 796  
16:21:07 797  	SELECT
16:21:07 798  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
16:21:07 799  	FROM
16:21:07 800  	  LICENSE
16:21:07 801  	WHERE
16:21:07 802  	  LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 803  
16:21:07 804  	-- All licenses for given invoice should point into the same offer
16:21:07 805  
16:21:07 806  	PROCS_OFFER_CHAIN_V16.GET_OFFER_LENGTH_IN_DAYS(
16:21:07 807  	  in_offer_id	=> var_offer_id,
16:21:07 808  	  in_start_date => var_invoice_start_date,
16:21:07 809  	  out_days	=> var_offer_days_interval
16:21:07 810  	);
16:21:07 811  
16:21:07 812  	IF var_offer_days_interval = 0 THEN
16:21:07 813  	  RAISE OFFER_LENGTH_IS_ZERO;
16:21:07 814  	END IF;
16:21:07 815  
16:21:07 816  	PROCS_INVOICE_V16.GET_INVOICE_DAYS_USED_NUMBER(
16:21:07 817  	  in_invoice_id      => in_invoice_id,
16:21:07 818  	  in_chargeback_date => var_chargeback_date,
16:21:07 819  	  out_days_num	     => var_license_days_used
16:21:07 820  	);
16:21:07 821  
16:21:07 822  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(
16:21:07 823  	  in_invoice_id => in_invoice_id,
16:21:07 824  	  out_amount	=> var_invoice_amount
16:21:07 825  	);
16:21:07 826  
16:21:07 827  	-- 39437
16:21:07 828  	-- Get offer chain id by invoice id
16:21:07 829  	SELECT DISTINCT
16:21:07 830  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
16:21:07 831  	FROM
16:21:07 832  	  SUBSCRIPTION
16:21:07 833  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 834  	WHERE
16:21:07 835  	  LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 836  
16:21:07 837  	-- Get offer chain's meta data full amount value
16:21:07 838  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
16:21:07 839  	  in_offer_chain_id => var_offer_chain_id,
16:21:07 840  	  in_meta_data_name => GLOBAL_CONSTANTS_V16.OFFER_CHAIN_FULL_REFUND,
16:21:07 841  	  out_value	    => var_offer_chain_meta_data_val
16:21:07 842  	);
16:21:07 843  	IF var_offer_chain_meta_data_val IS NULL THEN
16:21:07 844  	  var_offer_chain_full_refund := NULL;
16:21:07 845  	ELSE
16:21:07 846  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
16:21:07 847  	END IF;
16:21:07 848  
16:21:07 849  	-- Get offer chain's meta data prorated amount value
16:21:07 850  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
16:21:07 851  	  in_offer_chain_id => var_offer_chain_id,
16:21:07 852  	  in_meta_data_name => GLOBAL_CONSTANTS_V16.OFFER_CHAIN_PRORATED_REFUND,
16:21:07 853  	  out_value	    => var_offer_chain_meta_data_val
16:21:07 854  	);
16:21:07 855  	IF var_offer_chain_meta_data_val IS NULL THEN
16:21:07 856  	  var_offer_chain_prorated_ref := NULL;
16:21:07 857  	ELSE
16:21:07 858  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
16:21:07 859  	END IF;
16:21:07 860  
16:21:07 861  	var_chargeback_calculated := GLOBAL_CONSTANTS_V16.FALSE;
16:21:07 862  
16:21:07 863  	IF var_offer_chain_full_refund IS NOT NULL
16:21:07 864  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 865  	  IF var_license_days_used < var_offer_chain_full_refund THEN
16:21:07 866  	    out_chargeback_amount := var_invoice_amount;
16:21:07 867  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 868  	  END IF;
16:21:07 869  	END IF;
16:21:07 870  
16:21:07 871  	IF var_offer_chain_prorated_ref IS NOT NULL
16:21:07 872  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 873  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
16:21:07 874  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
16:21:07 875  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 876  	  END IF;
16:21:07 877  	END IF;
16:21:07 878  
16:21:07 879  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V16.TRUE THEN
16:21:07 880  	  PROCS_INVOICE_V16.GET_MAX_REFUND(
16:21:07 881  	    in_invoice_id => in_invoice_id,
16:21:07 882  	    out_amount	  => var_max_invoice_refund
16:21:07 883  	  );
16:21:07 884  	  IF var_max_invoice_refund < out_chargeback_amount THEN
16:21:07 885  	    out_chargeback_amount := var_max_invoice_refund;
16:21:07 886  	  END IF;
16:21:07 887  	END IF;
16:21:07 888  
16:21:07 889  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 890  	  out_chargeback_amount := 0;
16:21:07 891  	END IF;
16:21:07 892  
16:21:07 893  EXCEPTION
16:21:07 894  WHEN BAD_INVOICE_ID THEN
16:21:07 895  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 896  	  SPROC_NAME, 'No such invoice');
16:21:07 897  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
16:21:07 898  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 899  	  SPROC_NAME, 'No licenses found');
16:21:07 900  WHEN OFFER_LENGTH_IS_ZERO THEN
16:21:07 901  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 902  	  SPROC_NAME, 'Offer length is zero');
16:21:07 903  WHEN OTHERS THEN
16:21:07 904  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 906  END CALCULATE_INVOICE_CHARGEBACK;
16:21:07 907  
16:21:07 908  /********************************************************************/
16:21:07 909  
16:21:07 910  PROCEDURE APPLY_REFUND (
16:21:07 911  	in_invoice_id	     IN NUMBER,
16:21:07 912  	in_chargeback_amount IN NUMBER,
16:21:07 913  	in_created_by	     IN VARCHAR2,
16:21:07 914  	out_charge_id	     OUT NUMBER
16:21:07 915  ) AS
16:21:07 916  -- VARIABLES
16:21:07 917  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
16:21:07 918  temp_invoice_id		 NUMBER;
16:21:07 919  var_total_charges_amount	 NUMBER(10,2);
16:21:07 920  var_charge_amount_to_apply NUMBER(10,2);
16:21:07 921  var_transaction_id	 NUMBER;
16:21:07 922  var_instrument_type_id	 NUMBER;
16:21:07 923  var_instrument_id 	 NUMBER;
16:21:07 924  var_charge_id		 NUMBER;
16:21:07 925  -- EXCEPTIONS
16:21:07 926  BAD_INVOICE_ID		 EXCEPTION;
16:21:07 927  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
16:21:07 928  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
16:21:07 929  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
16:21:07 930  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
16:21:07 931  BEGIN
16:21:07 932  
16:21:07 933  	BEGIN
16:21:07 934  	  SELECT
16:21:07 935  	    INVOICE.ID into temp_invoice_id
16:21:07 936  	  FROM
16:21:07 937  	    INVOICE
16:21:07 938  	  WHERE
16:21:07 939  	    INVOICE.ID = in_invoice_id;
16:21:07 940  	  EXCEPTION
16:21:07 941  	    WHEN NO_DATA_FOUND THEN
16:21:07 942  	      RAISE BAD_INVOICE_ID;
16:21:07 943  	END;
16:21:07 944  
16:21:07 945  	SELECT
16:21:07 946  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
16:21:07 947  	FROM
16:21:07 948  	  CHARGE
16:21:07 949  	WHERE
16:21:07 950  	  CHARGE.INVOICE_ID = in_invoice_id
16:21:07 951  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
16:21:07 952  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
16:21:07 953  
16:21:07 954  	-- FIXME: Maybe whe should throw exception here?
16:21:07 955  	IF var_total_charges_amount < in_chargeback_amount THEN
16:21:07 956  	  var_charge_amount_to_apply := var_total_charges_amount;
16:21:07 957  	ELSE
16:21:07 958  	  var_charge_amount_to_apply := in_chargeback_amount;
16:21:07 959  	END IF;
16:21:07 960  
16:21:07 961  	BEGIN
16:21:07 962  	  PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
16:21:07 963  	    in_transaction_id  => NULL,
16:21:07 964  	    in_status_id       => GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
16:21:07 965  	    in_amount	       => -var_charge_amount_to_apply,
16:21:07 966  	    in_created_by      => in_created_by,
16:21:07 967  	    in_order_id        => NULL,
16:21:07 968  	    in_is_refund       => GLOBAL_CONSTANTS_V16.TRUE,
16:21:07 969  	    out_transaction_id => var_transaction_id
16:21:07 970  	  );
16:21:07 971  	  EXCEPTION
16:21:07 972  	    WHEN OTHERS THEN
16:21:07 973  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 974  	      RAISE CAN_NOT_CREATE_TRANSACTION;
16:21:07 975  	END;
16:21:07 976  
16:21:07 977  	BEGIN
16:21:07 978  	  SELECT
16:21:07 979  	    C.INSTRUMENT_TYPE_ID,
16:21:07 980  	    C.INSTRUMENT_ID
16:21:07 981  	    into
16:21:07 982  	    var_instrument_type_id,
16:21:07 983  	    var_instrument_id
16:21:07 984  	  FROM
16:21:07 985  	    CHARGE C,
16:21:07 986  	    TRANSACTION_ATTEMPT TA,
16:21:07 987  	    TRANSACTION T
16:21:07 988  	  WHERE
16:21:07 989  	    C.INVOICE_ID = in_invoice_id and
16:21:07 990  	    C.TRANSACTION_ID = T.ID and
16:21:07 991  	    TA.TRANSACTION_ID = T.ID and
16:21:07 992  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS and
16:21:07 993  	    T.IS_REFUND = GLOBAL_CONSTANTS_V16.FALSE and
16:21:07 994  	    T.TRANSACTION_AMOUNT >= 0 and
16:21:07 995  	    rownum < 2;
16:21:07 996  	EXCEPTION
16:21:07 997  	    WHEN NO_DATA_FOUND THEN
16:21:07 998  	      RAISE CAN_NOT_FIND_INSTRUMENT;
16:21:07 999  	END;
16:21:07 1000  	 BEGIN
16:21:07 1001  	   PROCS_CHARGE_V16.CREATE_CHARGE(
16:21:07 1002  	     in_invoice_id	   => in_invoice_id,
16:21:07 1003  	     in_transaction_id	   => var_transaction_id,
16:21:07 1004  	     in_instrument_type_id => var_instrument_type_id,
16:21:07 1005  	     in_instrument_id	   => var_instrument_id,
16:21:07 1006  	     in_charge_amount	   => -var_charge_amount_to_apply,
16:21:07 1007  	     in_created_by	   => in_created_by,
16:21:07 1008  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
16:21:07 1009  	     out_charge_id	   => var_charge_id
16:21:07 1010  	   );
16:21:07 1011  	   EXCEPTION
16:21:07 1012  	     WHEN OTHERS THEN
16:21:07 1013  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1014  	       RAISE CAN_NOT_CREATE_CHARGE;
16:21:07 1015  	 END;
16:21:07 1016  
16:21:07 1017  	 out_charge_id := var_charge_id;
16:21:07 1018  
16:21:07 1019  EXCEPTION
16:21:07 1020  WHEN BAD_INVOICE_ID THEN
16:21:07 1021  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1022  	   SPROC_NAME, 'No such invoice');
16:21:07 1023  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:21:07 1024  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1025  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:21:07 1026  WHEN CAN_NOT_FIND_INSTRUMENT THEN
16:21:07 1027  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1028  	   SPROC_NAME, 'Could not find financial instrument');
16:21:07 1029  WHEN CAN_NOT_CREATE_CHARGE THEN
16:21:07 1030  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1031  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:21:07 1032  WHEN OTHERS THEN
16:21:07 1033  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1034  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1035  END APPLY_REFUND;
16:21:07 1036  
16:21:07 1037  /******************************************************************************/
16:21:07 1038  
16:21:07 1039  PROCEDURE GET_MAX_REFUND (
16:21:07 1040  	 in_invoice_id IN NUMBER,
16:21:07 1041  	 out_amount    OUT NUMBER
16:21:07 1042  ) AS
16:21:07 1043  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
16:21:07 1044  -- VARIABLES
16:21:07 1045  temp_invoice_id	       NUMBER;
16:21:07 1046  var_invoice_refunds_sum NUMBER(10,2);
16:21:07 1047  var_invoice_charges_sum NUMBER(10,2);
16:21:07 1048  -- EXCEPTIONS
16:21:07 1049  BAD_INVOICE_ID EXCEPTION;
16:21:07 1050  BEGIN
16:21:07 1051  
16:21:07 1052  	 BEGIN
16:21:07 1053  	   SELECT
16:21:07 1054  	     INVOICE.ID into temp_invoice_id
16:21:07 1055  	   FROM
16:21:07 1056  	     INVOICE
16:21:07 1057  	   WHERE
16:21:07 1058  	     INVOICE.ID = in_invoice_id;
16:21:07 1059  	   EXCEPTION
16:21:07 1060  	     WHEN NO_DATA_FOUND THEN
16:21:07 1061  	       RAISE BAD_INVOICE_ID;
16:21:07 1062  	 END;
16:21:07 1063  
16:21:07 1064  	 var_invoice_refunds_sum := 0;
16:21:07 1065  	 var_invoice_charges_sum := 0;
16:21:07 1066  
16:21:07 1067  	 FOR f_charge IN (
16:21:07 1068  	   SELECT
16:21:07 1069  	     CHARGE.ID,
16:21:07 1070  	     CHARGE.CHARGE_STATUS_ID,
16:21:07 1071  	     CHARGE.CHARGE_AMOUNT,
16:21:07 1072  	     CHARGE.TRANSACTION_ID
16:21:07 1073  	   FROM
16:21:07 1074  	     CHARGE
16:21:07 1075  	   WHERE
16:21:07 1076  	     CHARGE.INVOICE_ID = in_invoice_id
16:21:07 1077  	 )
16:21:07 1078  	 LOOP
16:21:07 1079  	   -- If charge.status = canceled then continue
16:21:07 1080  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
16:21:07 1081  
16:21:07 1082  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
16:21:07 1083  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
16:21:07 1084  		  AND PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V16.TRUE THEN
16:21:07 1085  		 -- Transaction collected
16:21:07 1086  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
16:21:07 1087  	       ELSE
16:21:07 1088  		 -- Transaction is not collected. Do nothing
16:21:07 1089  		 NULL;
16:21:07 1090  	       END IF;
16:21:07 1091  	     ELSE
16:21:07 1092  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
16:21:07 1093  		  AND PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 1094  		 -- If charge is processed transaction is not collected then do nothing
16:21:07 1095  		 NULL;
16:21:07 1096  	       ELSE
16:21:07 1097  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
16:21:07 1098  	       END IF;
16:21:07 1099  	     END IF;
16:21:07 1100  
16:21:07 1101  	   END IF;
16:21:07 1102  	 END LOOP;
16:21:07 1103  
16:21:07 1104  	 -- Refunds are negative
16:21:07 1105  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
16:21:07 1106  
16:21:07 1107  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
16:21:07 1108  
16:21:07 1109  EXCEPTION
16:21:07 1110  WHEN BAD_INVOICE_ID THEN
16:21:07 1111  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1112  	   SPROC_NAME, 'No such invoice');
16:21:07 1113  WHEN OTHERS THEN
16:21:07 1114  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1115  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1116  END GET_MAX_REFUND;
16:21:07 1117  
16:21:07 1118  /******************************************************************************/
16:21:07 1119  
16:21:07 1120  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
16:21:07 1121  	 in_invoice_id	     IN NUMBER,
16:21:07 1122  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
16:21:07 1123  	 out_days_num	     OUT NUMBER
16:21:07 1124  ) AS
16:21:07 1125  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
16:21:07 1126  -- VARIABLES
16:21:07 1127  temp_invoice_id	      NUMBER;
16:21:07 1128  var_license_start_date DATE;
16:21:07 1129  var_license_end_date   DATE;
16:21:07 1130  var_chargeback_date    DATE;
16:21:07 1131  var_invoice_days_used  NUMBER;
16:21:07 1132  -- EXCEPTIONS
16:21:07 1133  BAD_INVOICE_ID EXCEPTION;
16:21:07 1134  BEGIN
16:21:07 1135  
16:21:07 1136  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
16:21:07 1137  
16:21:07 1138  	 BEGIN
16:21:07 1139  	   SELECT
16:21:07 1140  	     INVOICE.ID into temp_invoice_id
16:21:07 1141  	   FROM
16:21:07 1142  	     INVOICE
16:21:07 1143  	   WHERE
16:21:07 1144  	     INVOICE.ID = in_invoice_id;
16:21:07 1145  	   EXCEPTION
16:21:07 1146  	     WHEN NO_DATA_FOUND THEN
16:21:07 1147  	       RAISE BAD_INVOICE_ID;
16:21:07 1148  	 END;
16:21:07 1149  
16:21:07 1150  	 var_invoice_days_used := 0;
16:21:07 1151  
16:21:07 1152  	 FOR f_license IN (
16:21:07 1153  	   SELECT
16:21:07 1154  	     LICENSE.START_DATE,
16:21:07 1155  	     LICENSE.END_DATE
16:21:07 1156  	   FROM
16:21:07 1157  	     LICENSE
16:21:07 1158  	   WHERE
16:21:07 1159  	     LICENSE.INVOICE_ID = in_invoice_id
16:21:07 1160  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V16.FALSE
16:21:07 1161  	 )
16:21:07 1162  	 LOOP
16:21:07 1163  	   var_license_start_date := PROCS_COMMON_V16.NORMALIZE_DATE(f_license.START_DATE);
16:21:07 1164  	   var_license_end_date := PROCS_COMMON_V16.NORMALIZE_DATE(f_license.END_DATE);
16:21:07 1165  
16:21:07 1166  	   IF var_license_start_date <= var_chargeback_date THEN
16:21:07 1167  	     IF var_license_end_date <= var_chargeback_date THEN
16:21:07 1168  	       -- License is passed
16:21:07 1169  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
16:21:07 1170  	     ELSE
16:21:07 1171  	       -- This is current license
16:21:07 1172  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
16:21:07 1173  	     END IF;
16:21:07 1174  	   ELSE
16:21:07 1175  	     -- if var_license_start_date > in_chargeback_date then do nothing
16:21:07 1176  	     NULL;
16:21:07 1177  	   END IF;
16:21:07 1178  	 END LOOP;
16:21:07 1179  
16:21:07 1180  	 out_days_num := var_invoice_days_used;
16:21:07 1181  
16:21:07 1182  EXCEPTION
16:21:07 1183  WHEN BAD_INVOICE_ID THEN
16:21:07 1184  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1185  	   SPROC_NAME, 'No such invoice');
16:21:07 1186  WHEN OTHERS THEN
16:21:07 1187  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1188  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1189  END GET_INVOICE_DAYS_USED_NUMBER;
16:21:07 1190  
16:21:07 1191  /******************************************************************************/
16:21:07 1192  
16:21:07 1193  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:21:07 1194  	 in_invoice_id	IN NUMBER,
16:21:07 1195  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1196  ) AS
16:21:07 1197  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
16:21:07 1198  -- VARIABLES
16:21:07 1199  temp_invoice_id NUMBER;
16:21:07 1200  -- EXCEPTIONS
16:21:07 1201  BAD_INVOICE_ID EXCEPTION;
16:21:07 1202  BEGIN
16:21:07 1203  
16:21:07 1204  	 BEGIN
16:21:07 1205  	   SELECT
16:21:07 1206  	     INVOICE.ID into temp_invoice_id
16:21:07 1207  	   FROM
16:21:07 1208  	     INVOICE
16:21:07 1209  	   WHERE
16:21:07 1210  	     INVOICE.ID = in_invoice_id;
16:21:07 1211  	   EXCEPTION
16:21:07 1212  	     WHEN NO_DATA_FOUND THEN
16:21:07 1213  	       RAISE BAD_INVOICE_ID;
16:21:07 1214  	 END;
16:21:07 1215  
16:21:07 1216  	 OPEN out_result_set FOR
16:21:07 1217  	 SELECT
16:21:07 1218  	   LINE_ITEM.ID,
16:21:07 1219  	   LINE_ITEM.PRODUCT_OFFER_ID,
16:21:07 1220  	   LINE_ITEM.INVOICE_ID,
16:21:07 1221  	   LINE_ITEM.AMOUNT,
16:21:07 1222  	   LINE_ITEM.DISCOUNT_AMOUNT,
16:21:07 1223  	   LINE_ITEM.TAXES_AMOUNT,
16:21:07 1224  	   LINE_ITEM.CREATE_DATE,
16:21:07 1225  	   LINE_ITEM.CREATED_BY
16:21:07 1226  	 FROM
16:21:07 1227  	   LINE_ITEM
16:21:07 1228  	 WHERE
16:21:07 1229  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
16:21:07 1230  
16:21:07 1231  EXCEPTION
16:21:07 1232  WHEN BAD_INVOICE_ID THEN
16:21:07 1233  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1234  	   SPROC_NAME, 'No such invoice');
16:21:07 1235  WHEN OTHERS THEN
16:21:07 1236  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1237  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1238  END GET_INVOICE_LINE_ITEMS;
16:21:07 1239  
16:21:07 1240  /******************************************************************************/
16:21:07 1241  
16:21:07 1242  PROCEDURE GET_INVOICE_LICENSES (
16:21:07 1243  	 in_invoice_id	IN NUMBER,
16:21:07 1244  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1245  ) AS
16:21:07 1246  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
16:21:07 1247  -- VARIABLES
16:21:07 1248  temp_invoice_id NUMBER;
16:21:07 1249  -- EXCEPTIONS
16:21:07 1250  BAD_INVOICE_ID EXCEPTION;
16:21:07 1251  BEGIN
16:21:07 1252  
16:21:07 1253  	 BEGIN
16:21:07 1254  	   SELECT
16:21:07 1255  	     INVOICE.ID into temp_invoice_id
16:21:07 1256  	   FROM
16:21:07 1257  	     INVOICE
16:21:07 1258  	   WHERE
16:21:07 1259  	     INVOICE.ID = in_invoice_id;
16:21:07 1260  	   EXCEPTION
16:21:07 1261  	     WHEN NO_DATA_FOUND THEN
16:21:07 1262  	       RAISE BAD_INVOICE_ID;
16:21:07 1263  	 END;
16:21:07 1264  
16:21:07 1265  	 OPEN out_result_set FOR
16:21:07 1266  	 SELECT
16:21:07 1267  	   LICENSE.ID,
16:21:07 1268  	   LICENSE.INVOICE_ID,
16:21:07 1269  	   LICENSE.CREATE_DATE,
16:21:07 1270  	   LICENSE.CREATED_BY,
16:21:07 1271  	   LICENSE.CURRENT_OFFER_INDEX,
16:21:07 1272  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
16:21:07 1273  	   LICENSE.END_DATE,
16:21:07 1274  	   LICENSE.ENTITLEMENT_END_DATE,
16:21:07 1275  	   LICENSE.IS_EXTENSION,
16:21:07 1276  	   LICENSE.LICENSE_STATUS_ID,
16:21:07 1277  	   LICENSE.NEEDS_ENTITLEMENTS,
16:21:07 1278  	   LICENSE.OFFER_ID,
16:21:07 1279  	   LICENSE.START_DATE,
16:21:07 1280  	   LICENSE.SUBSCRIPTION_ID,
16:21:07 1281  	   LICENSE.UPDATE_DATE,
16:21:07 1282  	   LICENSE.UPDATED_BY
16:21:07 1283  	 FROM
16:21:07 1284  	   LICENSE
16:21:07 1285  	 WHERE
16:21:07 1286  	   LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 1287  
16:21:07 1288  EXCEPTION
16:21:07 1289  WHEN BAD_INVOICE_ID THEN
16:21:07 1290  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1291  	   SPROC_NAME, 'No such invoice');
16:21:07 1292  WHEN OTHERS THEN
16:21:07 1293  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1294  	   SPROC_NAME, 'Unknown error');
16:21:07 1295  END GET_INVOICE_LICENSES;
16:21:07 1296  
16:21:07 1297  /******************************************************************************/
16:21:07 1298  
16:21:07 1299  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
16:21:07 1300  	 in_invoice_id	    IN NUMBER,
16:21:07 1301  	 out_offer_chain_id OUT NUMBER
16:21:07 1302  ) AS
16:21:07 1303  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
16:21:07 1304  -- VARIABLES
16:21:07 1305  temp_invoice_id NUMBER;
16:21:07 1306  -- EXCEPTIONS
16:21:07 1307  BAD_INVOICE_ID EXCEPTION;
16:21:07 1308  BEGIN
16:21:07 1309  
16:21:07 1310  	 BEGIN
16:21:07 1311  	   SELECT
16:21:07 1312  	     INVOICE.ID into temp_invoice_id
16:21:07 1313  	   FROM
16:21:07 1314  	     INVOICE
16:21:07 1315  	   WHERE
16:21:07 1316  	     INVOICE.ID = in_invoice_id;
16:21:07 1317  	   EXCEPTION
16:21:07 1318  	     WHEN NO_DATA_FOUND THEN
16:21:07 1319  	       RAISE BAD_INVOICE_ID;
16:21:07 1320  	 END;
16:21:07 1321  
16:21:07 1322  	 BEGIN
16:21:07 1323  	   SELECT DISTINCT
16:21:07 1324  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
16:21:07 1325  	   FROM
16:21:07 1326  	     LICENSE
16:21:07 1327  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 1328  	   WHERE
16:21:07 1329  	     LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 1330  	   EXCEPTION
16:21:07 1331  	     WHEN NO_DATA_FOUND THEN
16:21:07 1332  	       out_offer_chain_id := NULL;
16:21:07 1333  	 END;
16:21:07 1334  
16:21:07 1335  EXCEPTION
16:21:07 1336  WHEN BAD_INVOICE_ID THEN
16:21:07 1337  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1338  	   SPROC_NAME, 'No such invoice');
16:21:07 1339  WHEN OTHERS THEN
16:21:07 1340  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1341  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1342  END GET_OFFER_CH_ID_BY_INVOICE_ID;
16:21:07 1343  
16:21:07 1344  /******************************************************************************/
16:21:07 1345  
16:21:07 1346  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
16:21:07 1347  -- Closing invoice without refund
16:21:07 1348  	 in_invoice_id IN NUMBER,
16:21:07 1349  	 in_updated_by IN VARCHAR2
16:21:07 1350  ) AS
16:21:07 1351  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
16:21:07 1352  -- VARIABLES
16:21:07 1353  temp_invoice_id NUMBER;
16:21:07 1354  -- EXCEPTIONS
16:21:07 1355  BAD_INVOICE_ID EXCEPTION;
16:21:07 1356  BEGIN
16:21:07 1357  
16:21:07 1358  	 BEGIN
16:21:07 1359  	   SELECT
16:21:07 1360  	     INVOICE.ID into temp_invoice_id
16:21:07 1361  	   FROM
16:21:07 1362  	     INVOICE
16:21:07 1363  	   WHERE
16:21:07 1364  	     INVOICE.ID = in_invoice_id;
16:21:07 1365  	   EXCEPTION
16:21:07 1366  	     WHEN NO_DATA_FOUND THEN
16:21:07 1367  	       RAISE BAD_INVOICE_ID;
16:21:07 1368  	 END;
16:21:07 1369  
16:21:07 1370  	 -- Needs to close charges. No refund.
16:21:07 1371  	 FOR f_charge_to_close IN (
16:21:07 1372  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
16:21:07 1373  	 )
16:21:07 1374  	 LOOP
16:21:07 1375  	   PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
16:21:07 1376  	     in_charge_id	 => f_charge_to_close.ID,
16:21:07 1377  	     in_updated_by	 => in_updated_by,
16:21:07 1378  	     in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
16:21:07 1379  	   );
16:21:07 1380  	 END LOOP;
16:21:07 1381  
16:21:07 1382  	 --FOR f_license_to_cancel IN (
16:21:07 1383  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
16:21:07 1384  	 --)
16:21:07 1385  	 --LOOP
16:21:07 1386  	 --  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
16:21:07 1387  	 --    in_license_id	     => f_license_to_cancel.ID,
16:21:07 1388  	 --    in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
16:21:07 1389  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V16.FALSE,
16:21:07 1390  	 --    in_updated_by	     => in_updated_by
16:21:07 1391  	 --  );
16:21:07 1392  	 --END LOOP;
16:21:07 1393  
16:21:07 1394  	 PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
16:21:07 1395  	   in_invoice_id		  => in_invoice_id,
16:21:07 1396  	   in_updated_by		  => in_updated_by,
16:21:07 1397  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V16.INVOICE_CLOSED
16:21:07 1398  	 );
16:21:07 1399  
16:21:07 1400  	 FOR f_transaction_to_close IN (
16:21:07 1401  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
16:21:07 1402  	 )
16:21:07 1403  	 LOOP
16:21:07 1404  	   PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
16:21:07 1405  	     in_transaction_id	      => f_transaction_to_close.ID,
16:21:07 1406  	     in_updated_by	      => in_updated_by,
16:21:07 1407  	     in_transaction_status_id => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
16:21:07 1408  	   );
16:21:07 1409  	 END LOOP;
16:21:07 1410  
16:21:07 1411  EXCEPTION
16:21:07 1412  WHEN BAD_INVOICE_ID THEN
16:21:07 1413  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1414  	   SPROC_NAME, 'No such invoice');
16:21:07 1415  WHEN OTHERS THEN
16:21:07 1416  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1417  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1418  END CLOSE_INVOICE_AS_NOT_COLLECTED;
16:21:07 1419  
16:21:07 1420  /******************************************************************************/
16:21:07 1421  
16:21:07 1422  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
16:21:07 1423  	 in_invoice_id	     IN NUMBER,
16:21:07 1424  	 out_subscription_id OUT NUMBER
16:21:07 1425  ) AS
16:21:07 1426  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
16:21:07 1427  -- VARIABLES
16:21:07 1428  temp_invoice_id NUMBER;
16:21:07 1429  -- EXCEPTIONS
16:21:07 1430  BAD_INVOICE_ID		 EXCEPTION;
16:21:07 1431  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
16:21:07 1432  BEGIN
16:21:07 1433  
16:21:07 1434  	 BEGIN
16:21:07 1435  	   SELECT
16:21:07 1436  	     INVOICE.ID into temp_invoice_id
16:21:07 1437  	   FROM
16:21:07 1438  	     INVOICE
16:21:07 1439  	   WHERE
16:21:07 1440  	     INVOICE.ID = in_invoice_id;
16:21:07 1441  	   EXCEPTION
16:21:07 1442  	     WHEN NO_DATA_FOUND THEN
16:21:07 1443  	       RAISE BAD_INVOICE_ID;
16:21:07 1444  	 END;
16:21:07 1445  
16:21:07 1446  	 BEGIN
16:21:07 1447  	   SELECT DISTINCT
16:21:07 1448  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
16:21:07 1449  	   FROM
16:21:07 1450  	     LICENSE
16:21:07 1451  	   WHERE
16:21:07 1452  	     LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 1453  	   EXCEPTION
16:21:07 1454  	     WHEN NO_DATA_FOUND THEN
16:21:07 1455  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
16:21:07 1456  	 END;
16:21:07 1457  
16:21:07 1458  EXCEPTION
16:21:07 1459  WHEN BAD_INVOICE_ID THEN
16:21:07 1460  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1461  	   SPROC_NAME, 'No such invoice');
16:21:07 1462  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
16:21:07 1463  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1464  	   SPROC_NAME, 'Could not find subscription for given invoice');
16:21:07 1465  WHEN OTHERS THEN
16:21:07 1466  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1468  END GET_SUBSCR_ID_BY_INVOICE_ID;
16:21:07 1469  
16:21:07 1470  /******************************************************************************/
16:21:07 1471  
16:21:07 1472  PROCEDURE IS_INVOICE_TAX_EXEMPT (
16:21:07 1473  /*
16:21:07 1474  Throws exceptions:
16:21:07 1475  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1476  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1477  Return:
16:21:07 1478  	 GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
16:21:07 1479  	 GLOBAL_CONSTANTS_V16.FALSE else
16:21:07 1480  */
16:21:07 1481  	 in_invoice_id	   IN NUMBER,
16:21:07 1482  	 out_is_tax_exempt OUT NUMBER
16:21:07 1483  ) AS
16:21:07 1484  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
16:21:07 1485  -- VARIABLES
16:21:07 1486  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
16:21:07 1487  -- EXCEPTIONS
16:21:07 1488  BAD_INVOICE_ID EXCEPTION;
16:21:07 1489  BEGIN
16:21:07 1490  
16:21:07 1491  	 BEGIN
16:21:07 1492  	   SELECT
16:21:07 1493  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
16:21:07 1494  	   FROM
16:21:07 1495  	     INVOICE
16:21:07 1496  	   WHERE
16:21:07 1497  	     INVOICE.ID = in_invoice_id;
16:21:07 1498  	   EXCEPTION
16:21:07 1499  	     WHEN NO_DATA_FOUND THEN
16:21:07 1500  	       RAISE BAD_INVOICE_ID;
16:21:07 1501  	 END;
16:21:07 1502  
16:21:07 1503  	 IF var_is_tax_exempt IS NULL THEN
16:21:07 1504  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.FALSE;
16:21:07 1505  	 ELSE
16:21:07 1506  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 1507  	 END IF;
16:21:07 1508  
16:21:07 1509  EXCEPTION
16:21:07 1510  WHEN BAD_INVOICE_ID THEN
16:21:07 1511  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1512  	   SPROC_NAME, 'No such invoice');
16:21:07 1513  WHEN OTHERS THEN
16:21:07 1514  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1515  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1516  END IS_INVOICE_TAX_EXEMPT;
16:21:07 1517  
16:21:07 1518  /******************************************************************************/
16:21:07 1519  
16:21:07 1520  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
16:21:07 1521  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
16:21:07 1522  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1523  ) AS
16:21:07 1524  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
16:21:07 1525  -- VARIABLE
16:21:07 1526  temp_order_id TRANSACTION.ORDER_ID%TYPE;
16:21:07 1527  -- EXCEPTIONS
16:21:07 1528  BAD_ORDER_ID EXCEPTION;
16:21:07 1529  CAN_NOT_FIND_INVOICE EXCEPTION;
16:21:07 1530  BEGIN
16:21:07 1531  
16:21:07 1532  	 OPEN out_result_set FOR
16:21:07 1533  	   SELECT DISTINCT
16:21:07 1534  	     CHARGE.INVOICE_ID
16:21:07 1535  	   FROM
16:21:07 1536  	     CHARGE
16:21:07 1537  	   INNER JOIN
16:21:07 1538  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
16:21:07 1539  	   WHERE
16:21:07 1540  	     TRANSACTION.ORDER_ID = in_order_id;
16:21:07 1541  
16:21:07 1542  EXCEPTION
16:21:07 1543  WHEN BAD_ORDER_ID THEN
16:21:07 1544  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1545  	   SPROC_NAME, 'No such transaction');
16:21:07 1546  WHEN CAN_NOT_FIND_INVOICE THEN
16:21:07 1547  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1548  	   SPROC_NAME, 'Could not find invoice for given order id');
16:21:07 1549  WHEN OTHERS THEN
16:21:07 1550  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1551  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1552  END GET_INVOICE_BY_TRNS_ORDER_ID;
16:21:07 1553  
16:21:07 1554  /******************************************************************************/
16:21:07 1555  
16:21:07 1556  PROCEDURE GET_INVOICE_BY_ID (
16:21:07 1557  	 in_invoice_id	IN NUMBER,
16:21:07 1558  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1559  ) AS
16:21:07 1560  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
16:21:07 1561  -- VARIABLE
16:21:07 1562  temp_invoice_id NUMBER;
16:21:07 1563  -- EXCEPTIONS
16:21:07 1564  BAD_INVOCIE_ID EXCEPTION;
16:21:07 1565  BEGIN
16:21:07 1566  
16:21:07 1567  	 BEGIN
16:21:07 1568  	   SELECT
16:21:07 1569  	     INVOICE.ID into temp_invoice_id
16:21:07 1570  	   FROM
16:21:07 1571  	     INVOICE
16:21:07 1572  	   WHERE
16:21:07 1573  	     INVOICE.ID = in_invoice_id;
16:21:07 1574  	   EXCEPTION
16:21:07 1575  	     WHEN NO_DATA_FOUND THEN
16:21:07 1576  	       RAISE BAD_INVOCIE_ID;
16:21:07 1577  	 END;
16:21:07 1578  
16:21:07 1579  	 OPEN out_result_set FOR
16:21:07 1580  	 SELECT
16:21:07 1581  	   INVOICE.ID,
16:21:07 1582  	   INVOICE.INVOICE_STATUS_ID,
16:21:07 1583  	   INVOICE.TAX_EXEMPT_ID,
16:21:07 1584  	   INVOICE.UPDATE_DATE,
16:21:07 1585  	   INVOICE.UPDATED_BY,
16:21:07 1586  	   INVOICE.CREATE_DATE,
16:21:07 1587  	   INVOICE.CREATED_BY
16:21:07 1588  	 FROM
16:21:07 1589  	   INVOICE
16:21:07 1590  	 WHERE
16:21:07 1591  	   INVOICE.ID = in_invoice_id;
16:21:07 1592  
16:21:07 1593  EXCEPTION
16:21:07 1594  WHEN BAD_INVOCIE_ID THEN
16:21:07 1595  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1596  	   SPROC_NAME, 'No such invoice');
16:21:07 1597  WHEN OTHERS THEN
16:21:07 1598  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1599  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1600  END GET_INVOICE_BY_ID;
16:21:07 1601  
16:21:07 1602  /******************************************************************************/
16:21:07 1603  
16:21:07 1604  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
16:21:07 1605  	 in_invoice_id		       IN NUMBER,
16:21:07 1606  	 out_is_tax_calculation_needed OUT NUMBER
16:21:07 1607  ) AS
16:21:07 1608  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
16:21:07 1609  BEGIN
16:21:07 1610  
16:21:07 1611  	 SELECT
16:21:07 1612  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
16:21:07 1613  	 FROM
16:21:07 1614  	   INVOICE I
16:21:07 1615  	 WHERE
16:21:07 1616  	   I.ID = in_invoice_id;
16:21:07 1617  
16:21:07 1618  EXCEPTION
16:21:07 1619  WHEN NO_DATA_FOUND THEN
16:21:07 1620  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1621  	   SPROC_NAME, 'No such invoice');
16:21:07 1622  WHEN OTHERS THEN
16:21:07 1623  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1624  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1625  END GET_IS_TAX_CALCULATION_NEEDED;
16:21:07 1626  
16:21:07 1627  /******************************************************************************/
16:21:07 1628  
16:21:07 1629  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
16:21:07 1630  	 in_invoice_id		      IN NUMBER,
16:21:07 1631  	 in_updated_by		      IN VARCHAR2,
16:21:07 1632  	 in_is_tax_calculation_needed IN NUMBER
16:21:07 1633  ) AS
16:21:07 1634  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
16:21:07 1635  -- VARIABLES
16:21:07 1636  temp_invoice_id	      NUMBER;
16:21:07 1637  -- EXCEPTIONS
16:21:07 1638  BAD_INVOICE_ID	      EXCEPTION;
16:21:07 1639  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
16:21:07 1640  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 1641  BEGIN
16:21:07 1642  
16:21:07 1643  	 BEGIN
16:21:07 1644  	   SELECT
16:21:07 1645  	     i.id into temp_invoice_id
16:21:07 1646  	   FROM
16:21:07 1647  	     invoice i
16:21:07 1648  	   WHERE
16:21:07 1649  	     i.id = in_invoice_id;
16:21:07 1650  	   EXCEPTION
16:21:07 1651  	     WHEN NO_DATA_FOUND THEN
16:21:07 1652  	       RAISE BAD_INVOICE_ID;
16:21:07 1653  	 END;
16:21:07 1654  
16:21:07 1655  	 BEGIN
16:21:07 1656  	   PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
16:21:07 1657  	     in_invoice_id => in_invoice_id,
16:21:07 1658  	     in_updated_by => in_updated_by,
16:21:07 1659  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
16:21:07 1660  	   );
16:21:07 1661  	   EXCEPTION
16:21:07 1662  	     WHEN OTHERS THEN
16:21:07 1663  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1664  	       RAISE CAN_NOT_UPDATE_INVOCIE;
16:21:07 1665  	 END;
16:21:07 1666  
16:21:07 1667  EXCEPTION
16:21:07 1668  WHEN BAD_INVOICE_ID THEN
16:21:07 1669  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1670  	   SPROC_NAME, 'No such invoice');
16:21:07 1671  WHEN CAN_NOT_UPDATE_INVOCIE THEN
16:21:07 1672  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1673  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
16:21:07 1674  WHEN OTHERS THEN
16:21:07 1675  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1676  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1677  END SET_IS_TAX_CALCULATION_NEEDED;
16:21:07 1678  
16:21:07 1679  /******************************************************************************/
16:21:07 1680  
16:21:07 1681  PROCEDURE REFUND_INVOICE (
16:21:07 1682  	 in_invoice_id	    IN NUMBER,
16:21:07 1683  	 in_refund_amount   IN NUMBER,
16:21:07 1684  	 in_note	    IN VARCHAR2,
16:21:07 1685  	 in_created_by	    IN VARCHAR2,
16:21:07 1686  	 out_charge_id	    OUT NUMBER
16:21:07 1687  ) AS
16:21:07 1688  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
16:21:07 1689  -- VARIABLES
16:21:07 1690  var_invoice_status_id  NUMBER;
16:21:07 1691  var_subscription_id    NUMBER;
16:21:07 1692  var_account_id	      NUMBER;
16:21:07 1693  var_group_id	      NUMBER;
16:21:07 1694  var_account_status_id  NUMBER;
16:21:07 1695  var_new_transaction_id NUMBER;
16:21:07 1696  var_instrument_type_id NUMBER;
16:21:07 1697  var_instrument_id      NUMBER;
16:21:07 1698  var_new_charge_id      NUMBER;
16:21:07 1699  var_invoice_amount     NUMBER(10,2);
16:21:07 1700  var_refunds_before     NUMBER(10,2);
16:21:07 1701  var_charges_amount     NUMBER(10,2);
16:21:07 1702  -- EXCEPTIONS
16:21:07 1703  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
16:21:07 1704  ACCOUNT_IS_FROZEN	     EXCEPTION;
16:21:07 1705  BAD_INVOICE_ID		     EXCEPTION;
16:21:07 1706  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
16:21:07 1707  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
16:21:07 1708  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
16:21:07 1709  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
16:21:07 1710  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
16:21:07 1711  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
16:21:07 1712  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
16:21:07 1713  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
16:21:07 1714  EXCEPTION_MESSAGE	      VARCHAR2(1024);
16:21:07 1715  BEGIN
16:21:07 1716  
16:21:07 1717  	 BEGIN
16:21:07 1718  	   SELECT
16:21:07 1719  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
16:21:07 1720  	   FROM
16:21:07 1721  	     INVOICE
16:21:07 1722  	   WHERE
16:21:07 1723  	     INVOICE.ID = in_invoice_id;
16:21:07 1724  	   EXCEPTION
16:21:07 1725  	     WHEN NO_DATA_FOUND THEN
16:21:07 1726  	       RAISE BAD_INVOICE_ID;
16:21:07 1727  	 END;
16:21:07 1728  
16:21:07 1729  	 -- Get instrument and subscription id if exists
16:21:07 1730  	 BEGIN
16:21:07 1731  	   SELECT
16:21:07 1732  	     SUBSCRIPTION.INSTRUMENT_ID,
16:21:07 1733  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
16:21:07 1734  	     SUBSCRIPTION.ACCOUNT_ID,
16:21:07 1735  	     SUBSCRIPTION.ID
16:21:07 1736  	     into
16:21:07 1737  	     var_instrument_id,
16:21:07 1738  	     var_instrument_type_id,
16:21:07 1739  	     var_account_id,
16:21:07 1740  	     var_subscription_id
16:21:07 1741  	   FROM
16:21:07 1742  	     SUBSCRIPTION
16:21:07 1743  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
16:21:07 1744  	   WHERE
16:21:07 1745  	     LICENSE.INVOICE_ID = in_invoice_id
16:21:07 1746  	     AND ROWNUM <= 1;
16:21:07 1747  	   EXCEPTION
16:21:07 1748  	     WHEN NO_DATA_FOUND THEN
16:21:07 1749  	       BEGIN
16:21:07 1750  
16:21:07 1751  		 var_subscription_id := NULL;
16:21:07 1752  
16:21:07 1753  		 SELECT
16:21:07 1754  		   CHARGE.INSTRUMENT_ID,
16:21:07 1755  		   CHARGE.INSTRUMENT_TYPE_ID,
16:21:07 1756  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
16:21:07 1757  		   into
16:21:07 1758  		   var_instrument_id,
16:21:07 1759  		   var_instrument_type_id,
16:21:07 1760  		   var_group_id
16:21:07 1761  		 FROM
16:21:07 1762  		   INVOICE
16:21:07 1763  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
16:21:07 1764  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
16:21:07 1765  		 WHERE
16:21:07 1766  		   INVOICE.ID = in_invoice_id
16:21:07 1767  		   AND ROWNUM <= 1;
16:21:07 1768  
16:21:07 1769  		 SELECT
16:21:07 1770  		   ACCOUNT.ID into var_account_id
16:21:07 1771  		 FROM
16:21:07 1772  		   ACCOUNT
16:21:07 1773  		 WHERE
16:21:07 1774  		   ACCOUNT.GROUP_ID = var_group_id;
16:21:07 1775  
16:21:07 1776  		 EXCEPTION
16:21:07 1777  		   WHEN NO_DATA_FOUND THEN
16:21:07 1778  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
16:21:07 1779  	       END;
16:21:07 1780  	 END;
16:21:07 1781  
16:21:07 1782  	 -- Check account status. It should not to be frozen
16:21:07 1783  	 SELECT
16:21:07 1784  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
16:21:07 1785  	 FROM
16:21:07 1786  	   ACCOUNT
16:21:07 1787  	 WHERE
16:21:07 1788  	   ACCOUNT.ID = var_account_id;
16:21:07 1789  
16:21:07 1790  	 IF var_account_status_id = GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
16:21:07 1791  	   RAISE ACCOUNT_IS_FROZEN;
16:21:07 1792  	 END IF;
16:21:07 1793  
16:21:07 1794  	 IF var_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
16:21:07 1795  	   RAISE INVOICE_IS_NOT_CLOSED;
16:21:07 1796  	 END IF;
16:21:07 1797  
16:21:07 1798  	 BEGIN
16:21:07 1799  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
16:21:07 1800  	     in_invoice_id => in_invoice_id,
16:21:07 1801  	     out_amount    => var_invoice_amount
16:21:07 1802  	   );
16:21:07 1803  	   EXCEPTION
16:21:07 1804  	     WHEN OTHERS THEN
16:21:07 1805  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1806  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:21:07 1807  	 END;
16:21:07 1808  
16:21:07 1809  	 IF ( in_refund_amount > var_invoice_amount ) THEN
16:21:07 1810  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
16:21:07 1811  	 END IF;
16:21:07 1812  
16:21:07 1813  	 SELECT /*+ STAR_TRANSFORMATION */
16:21:07 1814  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
16:21:07 1815  	 FROM
16:21:07 1816  	   CHARGE
16:21:07 1817  	 WHERE
16:21:07 1818  	   CHARGE.INVOICE_ID = in_invoice_id
16:21:07 1819  	   AND (
16:21:07 1820  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
16:21:07 1821  	     OR (
16:21:07 1822  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
16:21:07 1823  	       AND EXISTS (
16:21:07 1824  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
16:21:07 1825  	       )
16:21:07 1826  	     )
16:21:07 1827  	   )
16:21:07 1828  	   AND CHARGE.CHARGE_AMOUNT < 0;
16:21:07 1829  
16:21:07 1830  	 -- Refunds are negative
16:21:07 1831  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
16:21:07 1832  	 var_refunds_before := 0 - var_refunds_before;
16:21:07 1833  
16:21:07 1834  	 var_charges_amount := 0;
16:21:07 1835  
16:21:07 1836  	 FOR f_processed_charges IN (
16:21:07 1837  	   SELECT
16:21:07 1838  	     CHARGE.CHARGE_AMOUNT
16:21:07 1839  	   FROM
16:21:07 1840  	     CHARGE
16:21:07 1841  	   WHERE
16:21:07 1842  	     CHARGE.INVOICE_ID = in_invoice_id
16:21:07 1843  	     AND CHARGE.CHARGE_AMOUNT > 0
16:21:07 1844  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
16:21:07 1845  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS)
16:21:07 1846  	 )
16:21:07 1847  	 LOOP
16:21:07 1848  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
16:21:07 1849  	 END LOOP;
16:21:07 1850  
16:21:07 1851  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
16:21:07 1852  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
16:21:07 1853  	 END IF;
16:21:07 1854  
16:21:07 1855  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
16:21:07 1856  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
16:21:07 1857  	 END IF;
16:21:07 1858  
16:21:07 1859  	 BEGIN
16:21:07 1860  	   PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
16:21:07 1861  	     in_transaction_id	=> NULL,
16:21:07 1862  	     in_status_id	=> GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
16:21:07 1863  	     in_amount		=> -in_refund_amount,
16:21:07 1864  	     in_created_by	=> in_created_by,
16:21:07 1865  	     in_order_id	=> NULL,
16:21:07 1866  	     in_is_refund	=> GLOBAL_CONSTANTS_V16.TRUE,
16:21:07 1867  	     out_transaction_id => var_new_transaction_id
16:21:07 1868  	   );
16:21:07 1869  	   EXCEPTION
16:21:07 1870  	     WHEN OTHERS THEN
16:21:07 1871  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1872  	       RAISE CAN_NOT_CREATE_TRANSACTION;
16:21:07 1873  	 END;
16:21:07 1874  
16:21:07 1875  	 BEGIN
16:21:07 1876  	   PROCS_CHARGE_V16.CREATE_CHARGE(
16:21:07 1877  	     in_invoice_id	   => in_invoice_id,
16:21:07 1878  	     in_transaction_id	   => var_new_transaction_id,
16:21:07 1879  	     in_instrument_type_id => var_instrument_type_id,
16:21:07 1880  	     in_instrument_id	   => var_instrument_id,
16:21:07 1881  	     in_charge_amount	   => -in_refund_amount,
16:21:07 1882  	     in_created_by	   => in_created_by,
16:21:07 1883  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
16:21:07 1884  	     out_charge_id	   => var_new_charge_id
16:21:07 1885  	   );
16:21:07 1886  	   EXCEPTION
16:21:07 1887  	     WHEN OTHERS THEN
16:21:07 1888  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1889  	       RAISE CAN_NOT_CREATE_CHARGE;
16:21:07 1890  	 END;
16:21:07 1891  
16:21:07 1892  	 out_charge_id := var_new_charge_id;
16:21:07 1893  
16:21:07 1894  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
16:21:07 1895  	   BEGIN
16:21:07 1896  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
16:21:07 1897  	       in_subscription_id => var_subscription_id,
16:21:07 1898  	       in_agent_id	  => 0, -- AGENT_ID??
16:21:07 1899  	       in_note		  => in_note,
16:21:07 1900  	       in_created_by	  => in_created_by
16:21:07 1901  	     );
16:21:07 1902  	     EXCEPTION
16:21:07 1903  	       WHEN OTHERS THEN
16:21:07 1904  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1905  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
16:21:07 1906  	   END;
16:21:07 1907  	 END IF;
16:21:07 1908  
16:21:07 1909  EXCEPTION
16:21:07 1910  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
16:21:07 1911  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1912  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
16:21:07 1913  WHEN INVOICE_IS_NOT_CLOSED THEN
16:21:07 1914  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1915  	   SPROC_NAME, 'Invoice is not closed');
16:21:07 1916  WHEN ACCOUNT_IS_FROZEN THEN
16:21:07 1917  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1918  	   SPROC_NAME, 'Could not refund subscription for frozen account');
16:21:07 1919  WHEN BAD_INVOICE_ID THEN
16:21:07 1920  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1921  	   SPROC_NAME, 'No such invoice');
16:21:07 1922  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:21:07 1923  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1924  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
16:21:07 1925  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
16:21:07 1926  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1927  	   SPROC_NAME, 'Refund is greater than amount');
16:21:07 1928  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
16:21:07 1929  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1930  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
16:21:07 1931  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
16:21:07 1932  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1933  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
16:21:07 1934  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:21:07 1935  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1936  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:21:07 1937  WHEN CAN_NOT_CREATE_CHARGE THEN
16:21:07 1938  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1939  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:21:07 1940  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
16:21:07 1941  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1942  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:21:07 1943  WHEN OTHERS THEN
16:21:07 1944  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1945  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1946  END REFUND_INVOICE;
16:21:07 1947  
16:21:07 1948  /******************************************************************************/
16:21:07 1949  
16:21:07 1950  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
16:21:07 1951  	 in_invoice_id		     IN NUMBER,
16:21:07 1952  	 out_order_id		     OUT VARCHAR2,
16:21:07 1953  	 out_external_transaction_id OUT VARCHAR2
16:21:07 1954  ) AS
16:21:07 1955  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
16:21:07 1956  -- VARIABLES
16:21:07 1957  temp_invoice_id number;
16:21:07 1958  cnt_matched_instr number := 0;
16:21:07 1959  -- EXCEPTIONS
16:21:07 1960  BAD_INVOICE_ID EXCEPTION;
16:21:07 1961  BEGIN
16:21:07 1962  
16:21:07 1963  	 BEGIN
16:21:07 1964  	   SELECT
16:21:07 1965  	     i.id into temp_invoice_id
16:21:07 1966  	   from
16:21:07 1967  	     invoice i
16:21:07 1968  	   where
16:21:07 1969  	     i.id = in_invoice_id;
16:21:07 1970  	   EXCEPTION
16:21:07 1971  	     WHEN NO_DATA_FOUND THEN
16:21:07 1972  	       RAISE BAD_INVOICE_ID;
16:21:07 1973  	 END;
16:21:07 1974  
16:21:07 1975  	 select
16:21:07 1976  	   count(1) into cnt_matched_instr
16:21:07 1977  	 from
16:21:07 1978  	   charge ch
16:21:07 1979  	 inner join
16:21:07 1980  	   subscription s
16:21:07 1981  	 on
16:21:07 1982  	   s.instrument_id = ch.instrument_id
16:21:07 1983  	 where
16:21:07 1984  	   ch.invoice_id = in_invoice_id;
16:21:07 1985  
16:21:07 1986  	 if cnt_matched_instr = 0 then
16:21:07 1987  	   out_external_transaction_id := null;
16:21:07 1988  	   out_order_id := null;
16:21:07 1989  	   return;
16:21:07 1990  	 end if;
16:21:07 1991  
16:21:07 1992  	 SELECT
16:21:07 1993  	   t.order_id,
16:21:07 1994  	   ta.external_transaction_id
16:21:07 1995  	   into
16:21:07 1996  	   out_order_id,
16:21:07 1997  	   out_external_transaction_id
16:21:07 1998  	 from
16:21:07 1999  	   charge ch
16:21:07 2000  	   inner join transaction t on ch.transaction_id = t.id
16:21:07 2001  	   inner join transaction_attempt ta on ta.transaction_id = t.id
16:21:07 2002  	 where
16:21:07 2003  	   ch.invoice_id = in_invoice_id
16:21:07 2004  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
16:21:07 2005  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
16:21:07 2006  
16:21:07 2007  EXCEPTION
16:21:07 2008  WHEN BAD_INVOICE_ID THEN
16:21:07 2009  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2010  	   SPROC_NAME, 'No such invoice');
16:21:07 2011  WHEN NO_DATA_FOUND THEN
16:21:07 2012  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2013  	   SPROC_NAME, 'No payment data found');
16:21:07 2014  WHEN OTHERS THEN
16:21:07 2015  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2016  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2017  END GET_PAYMENT_INFO_BY_INVOICE_ID;
16:21:07 2018  
16:21:07 2019  PROCEDURE IS_REVOKE_ENTITLEMENTS(
16:21:07 2020  	 in_invoice_id IN NUMBER,
16:21:07 2021  	 out_is_revoke OUT NUMBER
16:21:07 2022  ) AS
16:21:07 2023  BEGIN
16:21:07 2024  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V16.FALSE, GLOBAL_CONSTANTS_V16.TRUE)
16:21:07 2025  	   into out_is_revoke
16:21:07 2026  	 FROM
16:21:07 2027  	   offer_chain oc,
16:21:07 2028  	   subscription s,
16:21:07 2029  	   license l,
16:21:07 2030  	   invoice i
16:21:07 2031  	 where
16:21:07 2032  	   oc.id = s.offer_chain_id and
16:21:07 2033  	   s.id = l.subscription_id and
16:21:07 2034  	   l.invoice_id = i.id and
16:21:07 2035  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V16.TRUE and
16:21:07 2036  	   i.id = in_invoice_id and
16:21:07 2037  	   rownum < 2
16:21:07 2038  	 ;
16:21:07 2039  END IS_REVOKE_ENTITLEMENTS;
16:21:07 2040  
16:21:07 2041  END PROCS_INVOICE_V16;
16:21:07 2042  .
16:21:07 SQL> /

Package body created.

Elapsed: 00:00:00.19
16:21:07 SQL> 
16:21:07 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V16" AS
16:21:07   2  
16:21:07   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
16:21:07   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:07   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
16:21:07   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
16:21:07   7  AS
16:21:07   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
16:21:07   9  BEGIN
16:21:07  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
16:21:07  11  	  PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE (
16:21:07  12  	    in_gift_certificate_id	  => rec.Id,
16:21:07  13  	    in_gift_certificate_status_id => in_status_id,
16:21:07  14  	    in_updated_by		  => in_updater
16:21:07  15  	  );
16:21:07  16  	END LOOP;
16:21:07  17  END UPDATE_GC_STATUS_BY_INVOICE;
16:21:07  18  
16:21:07  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
16:21:07  20  	in_invoice_id		     IN NUMBER,
16:21:07  21  	out_is_invoice_for_redeem_gc OUT NUMBER
16:21:07  22  ) AS
16:21:07  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
16:21:07  24  var_is_for_gc NUMBER;
16:21:07  25  BEGIN
16:21:07  26  	SELECT
16:21:07  27  	  count(1) into var_is_for_gc
16:21:07  28  	FROM GIFT_CERTIFICATE GC
16:21:07  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
16:21:07  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
16:21:07  31  
16:21:07  32  	IF var_is_for_gc > 0 THEN
16:21:07  33  	  out_is_invoice_for_redeem_gc := 1;
16:21:07  34  	ELSE
16:21:07  35  	  out_is_invoice_for_redeem_gc := 0;
16:21:07  36  	END IF;
16:21:07  37  END IS_INVOICE_FOR_REDEEMED_GC;
16:21:07  38  
16:21:07  39  PROCEDURE GET_UNREDEEMED_GCS (
16:21:07  40  	out_result_set		OUT SYS_REFCURSOR,
16:21:07  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:21:07  42  	in_num_rows		IN NUMBER DEFAULT 10000,
16:21:07  43  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:07  44  ) AS
16:21:07  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
16:21:07  46  BEGIN
16:21:07  47  	OPEN out_result_set FOR
16:21:07  48  SELECT * FROM
16:21:07  49  (
16:21:07  50  	SELECT
16:21:07  51  	  gc.EXPIRATION_DATE,
16:21:07  52  	  ch.name,
16:21:07  53  	  ch.id offer_chain_id,
16:21:07  54  	  gc.sender_email,
16:21:07  55  	  gc.sender_name,
16:21:07  56  	  gc.recipient_email,
16:21:07  57  	  gc.recipient_name,
16:21:07  58  	  gc.purchase_date,
16:21:07  59  	  gc.redemption_date,
16:21:07  60  	  gc.purchaser_group_id,
16:21:07  61  	  gc.redeemer_group_id,
16:21:07  62  	  gc.code,
16:21:07  63  	  gc.gift_message,
16:21:07  64  	  gc.recipient_notify_date,
16:21:07  65  	  gc.id
16:21:07  66  	FROM
16:21:07  67  	  GIFT_CERTIFICATE gc,
16:21:07  68  	  OFFER_CHAIN ch
16:21:07  69  	WHERE
16:21:07  70  	  ch.id = gc.offer_chain_id
16:21:07  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
16:21:07  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
16:21:07  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
16:21:07  74  	  AND gc.redeemer_group_id is null
16:21:07  75  	  AND NOT EXISTS(
16:21:07  76  	    SELECT NULL
16:21:07  77  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
16:21:07  78  	    WHERE PROCESS_NAME = in_process_name
16:21:07  79  	      AND GENERIC_ID = gc.id
16:21:07  80  	  ) AND EXISTS(
16:21:07  81  	    SELECT NULL
16:21:07  82  	    FROM
16:21:07  83  	      charge c,
16:21:07  84  	      transaction_attempt ta,
16:21:07  85  	      transaction t
16:21:07  86  	    WHERE
16:21:07  87  	      c.invoice_id = gc.purchase_invoice_id and
16:21:07  88  	      c.transaction_id = t.id and
16:21:07  89  	      t.id = ta.transaction_id and
16:21:07  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
16:21:07  91  	  ) AND NOT EXISTS (
16:21:07  92  	    SELECT NULL
16:21:07  93  	    FROM
16:21:07  94  	      charge c,
16:21:07  95  	      transaction t
16:21:07  96  	    WHERE
16:21:07  97  	      c.invoice_id = gc.purchase_invoice_id and
16:21:07  98  	      c.transaction_id = t.id and
16:21:07  99  	      t.is_refund = GLOBAL_CONSTANTS_V16.TRUE
16:21:07 100  	  )
16:21:07 101  	  AND ROWNUM <= in_num_rows*10
16:21:07 102  	  ORDER BY dbms_random.value
16:21:07 103  ) WHERE
16:21:07 104  	  ROWNUM <= in_num_rows;
16:21:07 105  EXCEPTION
16:21:07 106  WHEN OTHERS THEN
16:21:07 107  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 109  END GET_UNREDEEMED_GCS;
16:21:07 110  
16:21:07 111  PROCEDURE ADD_CREDIT_CARD (
16:21:07 112  /*
16:21:07 113  Throws exceptions:
16:21:07 114  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 115  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 116  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:07 117  */
16:21:07 118  	in_group_id		  IN NUMBER,
16:21:07 119  	in_updated_by		  IN VARCHAR2,
16:21:07 120  	in_instrument_name	  IN VARCHAR2,
16:21:07 121  	in_card_holder_name	  IN VARCHAR2,
16:21:07 122  	in_street_address	  IN VARCHAR2,
16:21:07 123  	in_street_address2	  IN VARCHAR2,
16:21:07 124  	in_state		  IN VARCHAR2,
16:21:07 125  	in_city 		  IN VARCHAR2,
16:21:07 126  	in_postal_code		  IN VARCHAR2,
16:21:07 127  	in_country		  IN CHAR,
16:21:07 128  	in_last_four_cc 	  IN VARCHAR2,
16:21:07 129  	in_expiration_date	  IN DATE,
16:21:07 130  	in_credit_card_type_id	  IN NUMBER,
16:21:07 131  	in_token		  IN VARCHAR2,
16:21:07 132  	in_chase_profile_id	  IN VARCHAR2,
16:21:07 133  	in_credit_card_status_id  IN NUMBER,
16:21:07 134  	in_private_first_name	  IN VARCHAR2,
16:21:07 135  	in_private_last_name	  IN VARCHAR2,
16:21:07 136  	out_credit_card_id	  OUT NUMBER
16:21:07 137  ) AS
16:21:07 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
16:21:07 139  -- VARIABLES
16:21:07 140  var_account_id	      NUMBER;
16:21:07 141  var_account_status      NUMBER;
16:21:07 142  var_credit_card_id      NUMBER;
16:21:07 143  temp_old_credit_card_id NUMBER;
16:21:07 144  -- EXCEPTIONS
16:21:07 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
16:21:07 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
16:21:07 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
16:21:07 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
16:21:07 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
16:21:07 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
16:21:07 151  var_charges_set		SYS_REFCURSOR;
16:21:07 152  var_charge_id		NUMBER;
16:21:07 153  var_charge_invoice_id	NUMBER;
16:21:07 154  var_charge_transaction_id NUMBER;
16:21:07 155  var_charge_amount 	NUMBER(10,2);
16:21:07 156  temp_out_charge_id	NUMBER;
16:21:07 157  temp_out_transaction_id	NUMBER;
16:21:07 158  var_order_id			VARCHAR2(1024);
16:21:07 159  BEGIN
16:21:07 160  
16:21:07 161  	-- Get account id
16:21:07 162  	-- Get account status
16:21:07 163  	SELECT
16:21:07 164  	  ACCOUNT.ID,
16:21:07 165  	  ACCOUNT.ACCOUNT_STATUS_ID
16:21:07 166  	  into
16:21:07 167  	  var_account_id,
16:21:07 168  	  var_account_status
16:21:07 169  	FROM
16:21:07 170  	  ACCOUNT
16:21:07 171  	WHERE
16:21:07 172  	  ACCOUNT.GROUP_ID = in_group_id;
16:21:07 173  
16:21:07 174  	SELECT
16:21:07 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
16:21:07 176  	FROM DUAL;
16:21:07 177  
16:21:07 178  	-- Insert new row in CREDIT_CARD table
16:21:07 179  	PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_CREDIT_CARD(
16:21:07 180  	  out_credit_card_id	      => var_credit_card_id,
16:21:07 181  	  in_account_id 	      => var_account_id,
16:21:07 182  	  in_instrument_name	      => in_instrument_name,
16:21:07 183  	  in_private_card_holder_name => in_card_holder_name,
16:21:07 184  	  in_private_street_address   => in_street_address,
16:21:07 185  	  in_private_street_address2  => in_street_address2,
16:21:07 186  	  in_state		      => in_state,
16:21:07 187  	  in_city		      => in_city,
16:21:07 188  	  in_postal_code	      => in_postal_code,
16:21:07 189  	  in_country		      => in_country,
16:21:07 190  	  in_last_four_cc	      => in_last_four_cc,
16:21:07 191  	  in_expiration_date	      => in_expiration_date,
16:21:07 192  	  in_credit_card_type_id      => in_credit_card_type_id,
16:21:07 193  	  in_secret_token	      => in_token,
16:21:07 194  	  in_chase_profile_id	      => in_chase_profile_id,
16:21:07 195  	  in_created_by 	      => in_updated_by,
16:21:07 196  	  in_credit_card_status_id    => in_credit_card_status_id,
16:21:07 197  	  in_private_first_name       => in_private_first_name,
16:21:07 198  	  in_private_last_name	      => in_private_last_name
16:21:07 199  	);
16:21:07 200  
16:21:07 201  	out_credit_card_id := var_credit_card_id;
16:21:07 202  
16:21:07 203  EXCEPTION
16:21:07 204  WHEN NO_DATA_FOUND THEN
16:21:07 205  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 206  	  SPROC_NAME, 'No such account');
16:21:07 207  WHEN BAD_OLD_CREDIT_CARD THEN
16:21:07 208  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 209  	  SPROC_NAME, 'Bad old credit card id');
16:21:07 210  WHEN BAD_IS_DEFAULT_VALUE THEN
16:21:07 211  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 212  	  SPROC_NAME, 'Bad is_default value');
16:21:07 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
16:21:07 214  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
16:21:07 216  WHEN BAD_ACCOUNT_STATUS THEN
16:21:07 217  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 218  	  SPROC_NAME, 'Account is not active');
16:21:07 219  WHEN OTHERS THEN
16:21:07 220  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 222  END ADD_CREDIT_CARD;
16:21:07 223  
16:21:07 224  /******************************************************************************/
16:21:07 225  
16:21:07 226  PROCEDURE ADD_PAYPAL (
16:21:07 227  /*
16:21:07 228  Throws exceptions:
16:21:07 229  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 230  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 231  */
16:21:07 232  	in_group_id			IN NUMBER,
16:21:07 233  	in_instrument_name		IN VARCHAR2,
16:21:07 234  	in_private_email_address	IN VARCHAR2,
16:21:07 235  	in_created_by			IN VARCHAR2,
16:21:07 236  	in_paypal_status_id		IN NUMBER,
16:21:07 237  	in_paypal_prvt_street_address	IN VARCHAR2,
16:21:07 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
16:21:07 239  	in_state			IN VARCHAR2,
16:21:07 240  	in_city 			IN VARCHAR2,
16:21:07 241  	in_postal_code			IN VARCHAR2,
16:21:07 242  	in_country			IN CHAR,
16:21:07 243  	in_expiration_date		IN DATE,
16:21:07 244  	in_secret_token 		IN VARCHAR2,
16:21:07 245  	out_paypal_id			OUT NUMBER
16:21:07 246  ) AS
16:21:07 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
16:21:07 248  var_paypal_id NUMBER;
16:21:07 249  var_account_id  NUMBER;
16:21:07 250  -- EXCEPTIONS
16:21:07 251  BAD_GROUP_ID	    EXCEPTION;
16:21:07 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
16:21:07 253  BAD_PAYPAL_STATUS     EXCEPTION;
16:21:07 254  EXCEPTION_MESSAGE VARCHAR2(1024);
16:21:07 255  BEGIN
16:21:07 256  
16:21:07 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
16:21:07 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
16:21:07 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
16:21:07 260  	  RAISE BAD_PAYPAL_STATUS;
16:21:07 261  	END IF;
16:21:07 262  
16:21:07 263  	BEGIN
16:21:07 264  	  SELECT
16:21:07 265  	    a.id into var_account_id
16:21:07 266  	  from
16:21:07 267  	    account a
16:21:07 268  	  where
16:21:07 269  	    a.group_id = in_group_id;
16:21:07 270  	  EXCEPTION
16:21:07 271  	    WHEN NO_DATA_FOUND THEN
16:21:07 272  	      RAISE BAD_GROUP_ID;
16:21:07 273  	END;
16:21:07 274  
16:21:07 275  	BEGIN
16:21:07 276  	  PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_PAYPAL(
16:21:07 277  	    out_paypal_id		   => var_paypal_id,
16:21:07 278  	    in_paypal_id		   => NULL,
16:21:07 279  	    in_account_id		   => var_account_id,
16:21:07 280  	    in_instrument_name		   => in_instrument_name,
16:21:07 281  	    in_private_email_address	   => in_private_email_address,
16:21:07 282  	    in_created_by		   => in_created_by,
16:21:07 283  	    in_paypal_status_id 	   => in_paypal_status_id,
16:21:07 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
16:21:07 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
16:21:07 286  	    in_state			   => in_state,
16:21:07 287  	    in_city			   => in_city,
16:21:07 288  	    in_postal_code		   => in_postal_code,
16:21:07 289  	    in_country			   => in_country,
16:21:07 290  	    in_expiration_date		   => in_expiration_date,
16:21:07 291  	    in_secret_token		   => in_secret_token
16:21:07 292  	  );
16:21:07 293  	  EXCEPTION
16:21:07 294  	    WHEN OTHERS THEN
16:21:07 295  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
16:21:07 297  	END;
16:21:07 298  
16:21:07 299  	out_paypal_id := var_paypal_id;
16:21:07 300  
16:21:07 301  EXCEPTION
16:21:07 302  WHEN BAD_GROUP_ID THEN
16:21:07 303  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 304  	  SPROC_NAME, 'No such group id');
16:21:07 305  WHEN BAD_PAYPAL_STATUS THEN
16:21:07 306  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 307  	  SPROC_NAME, 'Bad paypal status');
16:21:07 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
16:21:07 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
16:21:07 311  WHEN OTHERS THEN
16:21:07 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 314  END ADD_PAYPAL;
16:21:07 315  
16:21:07 316  /******************************************************************************/
16:21:07 317  
16:21:07 318  PROCEDURE DISABLE_CREDIT_CARD (
16:21:07 319  /*
16:21:07 320  Throws exceptions:
16:21:07 321  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 322  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 323  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:07 324  */
16:21:07 325  	in_credit_card_id IN NUMBER,
16:21:07 326  	in_updated_by	  IN VARCHAR2
16:21:07 327  ) AS
16:21:07 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
16:21:07 329  -- VARIBLES
16:21:07 330  var_account_id		     NUMBER;
16:21:07 331  var_group_id		     NUMBER;
16:21:07 332  var_credit_card_status	     NUMBER;
16:21:07 333  var_pending_transactions_num   NUMBER;
16:21:07 334  var_pending_invoices_num	     NUMBER;
16:21:07 335  current_def_instrument_type_id NUMBER;
16:21:07 336  current_def_instrument_id      NUMBER;
16:21:07 337  -- EXCEPTIONS
16:21:07 338  BAD_CC_STATUS		   EXCEPTION;
16:21:07 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
16:21:07 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
16:21:07 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
16:21:07 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
16:21:07 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
16:21:07 344  BEGIN
16:21:07 345  
16:21:07 346  	-- Get credit card status
16:21:07 347  	-- Get account id
16:21:07 348  	SELECT
16:21:07 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
16:21:07 350  	  CREDIT_CARD.ACCOUNT_ID
16:21:07 351  	  into
16:21:07 352  	  var_credit_card_status,
16:21:07 353  	  var_account_id
16:21:07 354  	FROM
16:21:07 355  	  CREDIT_CARD
16:21:07 356  	WHERE
16:21:07 357  	  CREDIT_CARD.ID = in_credit_card_id;
16:21:07 358  
16:21:07 359  	-- Check that we can disable this credit card (STUB)
16:21:07 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
16:21:07 362  	END IF;
16:21:07 363  
16:21:07 364  	-- Get account id
16:21:07 365  	SELECT
16:21:07 366  	  ACCOUNT.GROUP_ID into var_group_id
16:21:07 367  	FROM
16:21:07 368  	  ACCOUNT
16:21:07 369  	WHERE
16:21:07 370  	  ACCOUNT.ID = var_account_id;
16:21:07 371  
16:21:07 372  	-- Card should to be active
16:21:07 373  	IF var_credit_card_status != GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE THEN
16:21:07 374  	  RAISE BAD_CC_STATUS;
16:21:07 375  	END IF;
16:21:07 376  
16:21:07 377  	-- Looking for pending transactions associated with given credit card
16:21:07 378  	SELECT
16:21:07 379  	  COUNT(*) into var_pending_invoices_num
16:21:07 380  	FROM
16:21:07 381  	  CHARGE
16:21:07 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:21:07 383  	WHERE
16:21:07 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
16:21:07 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
16:21:07 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
16:21:07 387  
16:21:07 388  	IF var_pending_invoices_num > 0 THEN
16:21:07 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
16:21:07 390  	END IF;
16:21:07 391  
16:21:07 392  	-- Getting current default financial instrument
16:21:07 393  	BEGIN
16:21:07 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
16:21:07 395  	    in_group_id 	   => var_group_id,
16:21:07 396  	    out_instrument_type_id => current_def_instrument_type_id,
16:21:07 397  	    out_instrument_id	   => current_def_instrument_id
16:21:07 398  	  );
16:21:07 399  	  EXCEPTION
16:21:07 400  	    WHEN OTHERS THEN
16:21:07 401  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
16:21:07 403  	END;
16:21:07 404  
16:21:07 405  	-- Checking that credit card is not default
16:21:07 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
16:21:07 407  	  AND current_def_instrument_id = in_credit_card_id THEN
16:21:07 408  	  BEGIN
16:21:07 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
16:21:07 410  	      in_group_id => var_group_id
16:21:07 411  	    );
16:21:07 412  	  EXCEPTION
16:21:07 413  	    WHEN OTHERS THEN
16:21:07 414  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
16:21:07 416  	  END;
16:21:07 417  	END IF;
16:21:07 418  
16:21:07 419  	-- Update credit card status
16:21:07 420  	PROCS_FIN_INSTRUMENTS_V16.UPDATE_CREDIT_CARD_STATUS(
16:21:07 421  	  in_credit_card_id	   => in_credit_card_id,
16:21:07 422  	  in_updated_by 	   => in_updated_by,
16:21:07 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
16:21:07 424  	);
16:21:07 425  
16:21:07 426  EXCEPTION
16:21:07 427  WHEN NO_DATA_FOUND THEN
16:21:07 428  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 429  	  SPROC_NAME, 'No such credit card');
16:21:07 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
16:21:07 431  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
16:21:07 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
16:21:07 434  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
16:21:07 436  WHEN BAD_CC_STATUS THEN
16:21:07 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 438  	  SPROC_NAME, 'Credit card is not active');
16:21:07 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
16:21:07 440  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
16:21:07 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
16:21:07 443  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
16:21:07 445  WHEN OTHERS THEN
16:21:07 446  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 448  END DISABLE_CREDIT_CARD;
16:21:07 449  
16:21:07 450  /******************************************************************************/
16:21:07 451  
16:21:07 452  PROCEDURE DISABLE_PAYPAL (
16:21:07 453  /*
16:21:07 454  Throws exceptions:
16:21:07 455  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 456  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 457  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:07 458  */
16:21:07 459  	in_paypal_id  IN NUMBER,
16:21:07 460  	in_updated_by IN VARCHAR2
16:21:07 461  ) AS
16:21:07 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
16:21:07 463  -- VARIABLES
16:21:07 464  var_paypal_status_id NUMBER;
16:21:07 465  var_account_id	   NUMBER;
16:21:07 466  var_group_id	   NUMBER;
16:21:07 467  var_pending_invoices_num NUMBER;
16:21:07 468  current_def_instrument_type_id NUMBER;
16:21:07 469  current_def_instrument_id NUMBER;
16:21:07 470  -- EXCEPTIONS
16:21:07 471  BAD_PAYPAL_ID EXCEPTION;
16:21:07 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
16:21:07 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
16:21:07 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
16:21:07 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
16:21:07 476  EXCEPTION_MESSAGE VARCHAR2(1024);
16:21:07 477  BEGIN
16:21:07 478  
16:21:07 479  	-- Get Paypal status
16:21:07 480  	-- Get account
16:21:07 481  	BEGIN
16:21:07 482  	  SELECT
16:21:07 483  	    PAYPAL.PAYPAL_STATUS_ID,
16:21:07 484  	    PAYPAL.ACCOUNT_ID
16:21:07 485  	    into
16:21:07 486  	    var_paypal_status_id,
16:21:07 487  	    var_account_id
16:21:07 488  	  FROM
16:21:07 489  	    PAYPAL
16:21:07 490  	  WHERE
16:21:07 491  	    PAYPAL.ID = in_paypal_id;
16:21:07 492  	  EXCEPTION
16:21:07 493  	    WHEN NO_DATA_FOUND THEN
16:21:07 494  	      RAISE BAD_PAYPAL_ID;
16:21:07 495  	END;
16:21:07 496  
16:21:07 497  	-- Get group id
16:21:07 498  	SELECT
16:21:07 499  	  ACCOUNT.GROUP_ID into var_group_id
16:21:07 500  	FROM
16:21:07 501  	  ACCOUNT
16:21:07 502  	WHERE
16:21:07 503  	  ACCOUNT.ID = var_account_id;
16:21:07 504  
16:21:07 505  	-- Card should not be disabled
16:21:07 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V16.PAYPAL_INACTIVE THEN
16:21:07 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
16:21:07 508  	END IF;
16:21:07 509  
16:21:07 510  	-- Looking for pending transactions associated with given credit card
16:21:07 511  	SELECT
16:21:07 512  	  COUNT(*) into var_pending_invoices_num
16:21:07 513  	FROM
16:21:07 514  	  CHARGE
16:21:07 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:21:07 516  	WHERE
16:21:07 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
16:21:07 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
16:21:07 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
16:21:07 520  
16:21:07 521  	IF var_pending_invoices_num > 0 THEN
16:21:07 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
16:21:07 523  	END IF;
16:21:07 524  
16:21:07 525  	-- Getting current default financial instrument
16:21:07 526  	BEGIN
16:21:07 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
16:21:07 528  	    in_group_id 	   => var_group_id,
16:21:07 529  	    out_instrument_type_id => current_def_instrument_type_id,
16:21:07 530  	    out_instrument_id	   => current_def_instrument_id
16:21:07 531  	  );
16:21:07 532  	  EXCEPTION
16:21:07 533  	    WHEN OTHERS THEN
16:21:07 534  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
16:21:07 536  	END;
16:21:07 537  
16:21:07 538  	-- Checking that credit card is not default
16:21:07 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
16:21:07 540  	  AND current_def_instrument_id = in_paypal_id THEN
16:21:07 541  	  BEGIN
16:21:07 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
16:21:07 543  	      in_group_id => var_group_id
16:21:07 544  	    );
16:21:07 545  	  EXCEPTION
16:21:07 546  	    WHEN OTHERS THEN
16:21:07 547  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
16:21:07 549  	  END;
16:21:07 550  	END IF;
16:21:07 551  
16:21:07 552  	PROCS_FIN_INSTRUMENTS_V16.UPDATE_PAYPAL_STATUS(
16:21:07 553  	  in_paypal_id	      => in_paypal_id,
16:21:07 554  	  in_updated_by       => in_updated_by,
16:21:07 555  	  in_paypal_status_id => GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
16:21:07 556  	);
16:21:07 557  
16:21:07 558  EXCEPTION
16:21:07 559  WHEN BAD_PAYPAL_ID THEN
16:21:07 560  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 561  	  SPROC_NAME, 'No such paypal');
16:21:07 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
16:21:07 563  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 564  	  SPROC_NAME, 'Paypal already inactive');
16:21:07 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
16:21:07 566  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
16:21:07 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
16:21:07 569  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
16:21:07 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
16:21:07 572  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
16:21:07 574  WHEN OTHERS THEN
16:21:07 575  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 577  END DISABLE_PAYPAL;
16:21:07 578  
16:21:07 579  /******************************************************************************/
16:21:07 580  
16:21:07 581  PROCEDURE UPDATE_CREDIT_CARD (
16:21:07 582  /*
16:21:07 583  Throws exceptions:
16:21:07 584  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 585  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 586  */
16:21:07 587  	in_credit_card_id	  IN NUMBER,
16:21:07 588  	in_updated_by		  IN VARCHAR2,
16:21:07 589  	in_instrument_name	  IN VARCHAR2,
16:21:07 590  	in_is_default		  IN NUMBER
16:21:07 591  ) AS
16:21:07 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
16:21:07 593  -- VARIABLES
16:21:07 594  var_account_id NUMBER;
16:21:07 595  var_group_id   NUMBER;
16:21:07 596  temp_cc_rownum NUMBER;
16:21:07 597  current_def_instrument_type_id NUMBER;
16:21:07 598  current_def_instrument_id      NUMBER;
16:21:07 599  -- EXCEPTION
16:21:07 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
16:21:07 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
16:21:07 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
16:21:07 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
16:21:07 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
16:21:07 605  BEGIN
16:21:07 606  
16:21:07 607  	-- Get account id
16:21:07 608  	SELECT
16:21:07 609  	  CREDIT_CARD.ACCOUNT_ID
16:21:07 610  	  into
16:21:07 611  	  var_account_id
16:21:07 612  	FROM
16:21:07 613  	  CREDIT_CARD
16:21:07 614  	WHERE
16:21:07 615  	  CREDIT_CARD.ID = in_credit_card_id;
16:21:07 616  
16:21:07 617  	-- Get group id
16:21:07 618  	SELECT
16:21:07 619  	  ACCOUNT.GROUP_ID into var_group_id
16:21:07 620  	FROM
16:21:07 621  	  ACCOUNT
16:21:07 622  	WHERE
16:21:07 623  	  ACCOUNT.ID = var_account_id;
16:21:07 624  
16:21:07 625  	-- Check that passed data is correct
16:21:07 626  	IF in_is_default != GLOBAL_CONSTANTS_V16.TRUE
16:21:07 627  	  AND in_is_default != GLOBAL_CONSTANTS_V16.FALSE
16:21:07 628  	  AND in_is_default IS NOT NULL THEN
16:21:07 629  	  RAISE BAD_IS_DEFAULT_VALUE;
16:21:07 630  	END IF;
16:21:07 631  
16:21:07 632  	-- Update credit card
16:21:07 633  	IF in_instrument_name IS NOT NULL THEN
16:21:07 634  	  PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_CREDIT_CARD(
16:21:07 635  	    in_credit_card_id  => in_credit_card_id,
16:21:07 636  	    in_updated_by      => in_updated_by,
16:21:07 637  	    in_instrument_name => in_instrument_name
16:21:07 638  	  );
16:21:07 639  	END IF;
16:21:07 640  
16:21:07 641  	-- Set default financial instrument
16:21:07 642  	IF in_is_default = GLOBAL_CONSTANTS_V16.TRUE THEN
16:21:07 643  	  BEGIN
16:21:07 644  	    PROCS_FIN_INSTRUMENTS_V16.SET_DEF_FINANCIAL_INSTRUMENT(
16:21:07 645  	      in_group_id	    => var_group_id,
16:21:07 646  	      in_instrument_type_id => GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD,
16:21:07 647  	      in_instrument_id	    => in_credit_card_id,
16:21:07 648  	      in_updated_by	    => in_updated_by
16:21:07 649  	    );
16:21:07 650  	    EXCEPTION
16:21:07 651  	      WHEN OTHERS THEN
16:21:07 652  		EXCEPTION_MESSAGE := SQLERRM;
16:21:07 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
16:21:07 654  	  END;
16:21:07 655  	END IF;
16:21:07 656  
16:21:07 657  	-- Set default financial instrument
16:21:07 658  	IF in_is_default = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 659  	  BEGIN
16:21:07 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
16:21:07 661  	      in_group_id	     => var_group_id,
16:21:07 662  	      out_instrument_type_id => current_def_instrument_type_id,
16:21:07 663  	      out_instrument_id      => current_def_instrument_id
16:21:07 664  	    );
16:21:07 665  	  EXCEPTION
16:21:07 666  	    WHEN OTHERS THEN
16:21:07 667  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
16:21:07 669  	  END;
16:21:07 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
16:21:07 671  	    AND current_def_instrument_id = in_credit_card_id THEN
16:21:07 672  	    BEGIN
16:21:07 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
16:21:07 674  		in_group_id => var_group_id
16:21:07 675  	      );
16:21:07 676  	      EXCEPTION
16:21:07 677  		WHEN OTHERS THEN
16:21:07 678  		  EXCEPTION_MESSAGE := SQLERRM;
16:21:07 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
16:21:07 680  	    END;
16:21:07 681  	  END IF;
16:21:07 682  	END IF;
16:21:07 683  
16:21:07 684  EXCEPTION
16:21:07 685  WHEN NO_DATA_FOUND THEN
16:21:07 686  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 687  	  SPROC_NAME, 'No such credit card');
16:21:07 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
16:21:07 689  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
16:21:07 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
16:21:07 692  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
16:21:07 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
16:21:07 695  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
16:21:07 697  WHEN OTHERS THEN
16:21:07 698  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 700  END UPDATE_CREDIT_CARD;
16:21:07 701  
16:21:07 702  /******************************************************************************/
16:21:07 703  
16:21:07 704  PROCEDURE START_GC_PURCHASING (
16:21:07 705  	in_group_id		  IN NUMBER,
16:21:07 706  	in_offer_chain_id	  IN VARCHAR2,
16:21:07 707  	in_gift_certificate_code  IN  VARCHAR2,
16:21:07 708  	in_created_by		  IN  VARCHAR2,
16:21:07 709  	in_recipient_name	  IN  VARCHAR2,
16:21:07 710  	in_recipient_email	  IN  VARCHAR2,
16:21:07 711  	in_recipient_address_id   IN NUMBER,
16:21:07 712  	in_recipient_notify_date  IN DATE,
16:21:07 713  	in_sender_name		  IN VARCHAR2,
16:21:07 714  	in_sender_email 	  IN VARCHAR2,
16:21:07 715  	in_gift_message 	  IN  VARCHAR2,
16:21:07 716  	in_expiration_date	  IN DATE,
16:21:07 717  	out_gift_certificate_id   OUT NUMBER,
16:21:07 718  	out_invoice_id		  OUT NUMBER
16:21:07 719  ) AS
16:21:07 720  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
16:21:07 721  -- VARIABLES
16:21:07 722  var_account_id		NUMBER;
16:21:07 723  temp_gc_code		GIFT_CERTIFICATE.CODE%TYPE;
16:21:07 724  var_och_is_gc		NUMBER;
16:21:07 725  var_offer_chain_status_id NUMBER;
16:21:07 726  var_is_for_redemption	NUMBER;
16:21:07 727  var_new_invoice_id	NUMBER;
16:21:07 728  var_gift_cert_id		NUMBER;
16:21:07 729  var_account_tax_exempt_id VARCHAR2(255);
16:21:07 730  -- EXCEPTIONS
16:21:07 731  BAD_GROUP_ID		    EXCEPTION;
16:21:07 732  GC_CODE_ALREADY_EXISTS	    EXCEPTION;
16:21:07 733  BAD_OFFER_CHAIN_ID	    EXCEPTION;
16:21:07 734  OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
16:21:07 735  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
16:21:07 736  CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
16:21:07 737  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
16:21:07 738  OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
16:21:07 739  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
16:21:07 740  
16:21:07 741  EXCEPTION_MESSAGE VARCHAR2(1024);
16:21:07 742  BEGIN
16:21:07 743  	-- Get account id
16:21:07 744  	BEGIN
16:21:07 745  	  SELECT
16:21:07 746  	    ACCOUNT.ID,
16:21:07 747  	    ACCOUNT.TAX_EXEMPT_ID
16:21:07 748  	    into
16:21:07 749  	    var_account_id,
16:21:07 750  	    var_account_tax_exempt_id
16:21:07 751  	  FROM
16:21:07 752  	    ACCOUNT
16:21:07 753  	  WHERE
16:21:07 754  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07 755  	  EXCEPTION
16:21:07 756  	  WHEN NO_DATA_FOUND THEN
16:21:07 757  	    RAISE BAD_GROUP_ID;
16:21:07 758  	END;
16:21:07 759  
16:21:07 760  	-- Check for the same code
16:21:07 761  	BEGIN
16:21:07 762  	  SELECT
16:21:07 763  	    GIFT_CERTIFICATE.CODE into temp_gc_code
16:21:07 764  	  FROM
16:21:07 765  	    GIFT_CERTIFICATE
16:21:07 766  	  WHERE
16:21:07 767  	    GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
16:21:07 768  
16:21:07 769  	  RAISE GC_CODE_ALREADY_EXISTS;
16:21:07 770  
16:21:07 771  	  EXCEPTION
16:21:07 772  	    WHEN NO_DATA_FOUND THEN
16:21:07 773  	      NULL;
16:21:07 774  	END;
16:21:07 775  
16:21:07 776  	-- Get offer chain flag "is_gift_certificate"
16:21:07 777  	BEGIN
16:21:07 778  	  SELECT
16:21:07 779  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE,
16:21:07 780  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
16:21:07 781  	    into
16:21:07 782  	    var_och_is_gc,
16:21:07 783  	    var_offer_chain_status_id
16:21:07 784  	  FROM
16:21:07 785  	    OFFER_CHAIN
16:21:07 786  	  WHERE
16:21:07 787  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:21:07 788  	  EXCEPTION
16:21:07 789  	  WHEN NO_DATA_FOUND THEN
16:21:07 790  	    RAISE BAD_OFFER_CHAIN_ID;
16:21:07 791  	END;
16:21:07 792  
16:21:07 793  	IF var_och_is_gc != GLOBAL_CONSTANTS_V16.TRUE
16:21:07 794  	  OR var_och_is_gc IS NULL THEN
16:21:07 795  	  RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
16:21:07 796  	END IF;
16:21:07 797  
16:21:07 798  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
16:21:07 799  	  RAISE BAD_OFFER_CHAIN_STATUS;
16:21:07 800  	END IF;
16:21:07 801  
16:21:07 802  	-- norlov: #38151 check if the OC is for Redemption:
16:21:07 803  	SELECT
16:21:07 804  	  COUNT(*) into var_is_for_redemption
16:21:07 805  	FROM
16:21:07 806  	  OFFER_CHAIN_ELIGIBILITY
16:21:07 807  	WHERE
16:21:07 808  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:21:07 809  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
16:21:07 810  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
16:21:07 811  
16:21:07 812  	IF var_is_for_redemption > 0 THEN
16:21:07 813  	  RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
16:21:07 814  	END IF;
16:21:07 815  
16:21:07 816  	-- Create new invoice
16:21:07 817  	BEGIN
16:21:07 818  	  PROCS_INVOICE_V16.CREATE_INVOICE(
16:21:07 819  	    in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
16:21:07 820  	    in_created_by     => in_created_by,
16:21:07 821  	    in_tax_exempt_id  => var_account_tax_exempt_id,
16:21:07 822  	    out_invoice_id    => var_new_invoice_id
16:21:07 823  	  );
16:21:07 824  	  EXCEPTION
16:21:07 825  	    WHEN OTHERS THEN
16:21:07 826  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 827  	      RAISE CAN_NOT_CREATE_INVOICE;
16:21:07 828  	END;
16:21:07 829  
16:21:07 830  	-- Add line items for new invoice
16:21:07 831  	BEGIN
16:21:07 832  	  FOR f_offer_data IN (
16:21:07 833  	    SELECT
16:21:07 834  	      OFFER_ID,
16:21:07 835  	      NUM_RECURRENCES
16:21:07 836  	    FROM
16:21:07 837  	      OFFER_OFFER_CHAIN
16:21:07 838  	    WHERE
16:21:07 839  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:07 840  	  )
16:21:07 841  	  LOOP
16:21:07 842  	    IF f_offer_data.NUM_RECURRENCES < 1 THEN
16:21:07 843  	      RAISE OFFER_REC_NUM_LESS_THAN_ONE;
16:21:07 844  	    END IF;
16:21:07 845  	    FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
16:21:07 846  	    LOOP
16:21:07 847  	      PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
16:21:07 848  		in_invoice_id => var_new_invoice_id,
16:21:07 849  		in_offer_id   => f_offer_data.OFFER_ID,
16:21:07 850  		in_created_by => in_created_by
16:21:07 851  	      );
16:21:07 852  	    END LOOP;
16:21:07 853  	  END LOOP;
16:21:07 854  
16:21:07 855  	  EXCEPTION
16:21:07 856  	    WHEN OTHERS THEN
16:21:07 857  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 858  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
16:21:07 859  	END;
16:21:07 860  
16:21:07 861  	PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_GIFT_CERTIFICATE(
16:21:07 862  	  out_gift_certificate_id	=> var_gift_cert_id,
16:21:07 863  	  in_purchaser_group_id 	=> in_group_id,
16:21:07 864  	  in_purchaser_invoice_id	=> var_new_invoice_id,
16:21:07 865  	  in_offer_chain_id		=> in_offer_chain_id,
16:21:07 866  	  in_expiration_date		=> in_expiration_date,
16:21:07 867  	  in_purchase_date		=> SYSDATE,
16:21:07 868  	  in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE,
16:21:07 869  	  in_code			=> in_gift_certificate_code,
16:21:07 870  	  in_created_by 		=> in_created_by,
16:21:07 871  	  in_recipient_name		=> in_recipient_name,
16:21:07 872  	  in_gift_message		=> in_gift_message,
16:21:07 873  	  in_recipient_email		=> in_recipient_email,
16:21:07 874  	  in_sender_email		=> in_sender_email,
16:21:07 875  	  in_sender_name		=> in_sender_name,
16:21:07 876  	  in_recipient_address_id	=> in_recipient_address_id,
16:21:07 877  	  in_recipient_notify_date	=> in_recipient_notify_date
16:21:07 878  	);
16:21:07 879  
16:21:07 880  	out_gift_certificate_id := var_gift_cert_id;
16:21:07 881  	out_invoice_id := var_new_invoice_id;
16:21:07 882  
16:21:07 883  EXCEPTION
16:21:07 884  WHEN BAD_OFFER_CHAIN_STATUS THEN
16:21:07 885  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 886  	  SPROC_NAME, 'Offer chain is not active');
16:21:07 887  WHEN GC_CODE_ALREADY_EXISTS THEN
16:21:07 888  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:07 889  	  SPROC_NAME, 'Gift certificate with same code already exists');
16:21:07 890  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
16:21:07 891  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 892  	  SPROC_NAME, 'This offer chain can not be used for gift certificate');
16:21:07 893  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
16:21:07 894  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 895  	  SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
16:21:07 896  WHEN CAN_NOT_CREATE_INVOICE THEN
16:21:07 897  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 898  	  SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
16:21:07 899  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
16:21:07 900  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 901  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
16:21:07 902  WHEN BAD_GROUP_ID THEN
16:21:07 903  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 904  	  SPROC_NAME, 'No such group id');
16:21:07 905  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:07 906  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 907  	  SPROC_NAME, 'No such offer chain');
16:21:07 908  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
16:21:07 909  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 910  	  SPROC_NAME, 'Some offer has recurrences number less than 1');
16:21:07 911  WHEN OTHERS THEN
16:21:07 912  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 913  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 914  END START_GC_PURCHASING;
16:21:07 915  
16:21:07 916  /******************************************************************************/
16:21:07 917  
16:21:07 918  PROCEDURE FINALIZE_GC_PURCHASING (
16:21:07 919  	in_invoice_id	      IN NUMBER,
16:21:07 920  	in_created_by	      IN VARCHAR2,
16:21:07 921  	in_instrument_id      IN NUMBER,
16:21:07 922  	in_instrument_type_id IN NUMBER,
16:21:07 923  	in_order_id	      IN VARCHAR2,
16:21:07 924  	in_transaction_id     IN NUMBER,
16:21:07 925  	out_charge_amount     OUT NUMBER
16:21:07 926  ) AS
16:21:07 927  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
16:21:07 928  -- VARIABLES
16:21:07 929  temp_transaction_id_count NUMBER;
16:21:07 930  var_invoice_amount	NUMBER(10,2);
16:21:07 931  var_transaction_id	NUMBER;
16:21:07 932  var_new_charge_id 	NUMBER;
16:21:07 933  -- EXCEPTIONS
16:21:07 934  BAD_CREDIT_CARD_ID	  EXCEPTION;
16:21:07 935  BAD_PAYPAL_ID		  EXCEPTION;
16:21:07 936  BAD_INSTRUMENT_TYPE	  EXCEPTION;
16:21:07 937  TRANSACTION_EXISTS	  EXCEPTION;
16:21:07 938  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
16:21:07 939  CAN_NOT_USE_FCINSTR	  EXCEPTION;
16:21:07 940  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
16:21:07 941  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
16:21:07 942  EXCEPTION_MESSAGE   VARCHAR2(1024);
16:21:07 943  BEGIN
16:21:07 944  
16:21:07 945  	-- Check that instrument exists
16:21:07 946  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
16:21:07 947  	  IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 948  	    RAISE BAD_CREDIT_CARD_ID;
16:21:07 949  	  END IF;
16:21:07 950  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
16:21:07 951  	  IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 952  	    RAISE BAD_PAYPAL_ID;
16:21:07 953  	  END IF;
16:21:07 954  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
16:21:07 955  	  NULL;
16:21:07 956  	ELSE
16:21:07 957  	  RAISE BAD_INSTRUMENT_TYPE;
16:21:07 958  	END IF;
16:21:07 959  
16:21:07 960  	-- Check that transaction with given id do not exists
16:21:07 961  	SELECT
16:21:07 962  	  COUNT(*) into temp_transaction_id_count
16:21:07 963  	FROM
16:21:07 964  	  TRANSACTION
16:21:07 965  	WHERE
16:21:07 966  	  TRANSACTION.ID = in_transaction_id;
16:21:07 967  
16:21:07 968  	IF temp_transaction_id_count > 0 THEN
16:21:07 969  	  RAISE TRANSACTION_EXISTS;
16:21:07 970  	END IF;
16:21:07 971  
16:21:07 972  	-- Calculate new invoice amount
16:21:07 973  	BEGIN
16:21:07 974  	  PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
16:21:07 975  	  EXCEPTION
16:21:07 976  	    WHEN OTHERS THEN
16:21:07 977  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 978  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:21:07 979  	END;
16:21:07 980  
16:21:07 981  	IF var_invoice_amount > 0
16:21:07 982  	  AND in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
16:21:07 983  	  RAISE CAN_NOT_USE_FCINSTR;
16:21:07 984  	END IF;
16:21:07 985  
16:21:07 986  	-- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
16:21:07 987  	IF var_invoice_amount = 0 THEN
16:21:07 988  	  PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
16:21:07 989  	    in_invoice_id		   => in_invoice_id,
16:21:07 990  	    in_updated_by		   => in_created_by,
16:21:07 991  	    in_invoice_status_id	   => GLOBAL_STATUSES_V16.INVOICE_CLOSED
16:21:07 992  	  );
16:21:07 993  	END IF;
16:21:07 994  
16:21:07 995  	IF var_invoice_amount > 0 THEN
16:21:07 996  	  -- Create transaction
16:21:07 997  	  BEGIN
16:21:07 998  	    PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
16:21:07 999  	      in_transaction_id  => in_transaction_id,
16:21:07 1000  	       in_status_id	  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
16:21:07 1001  	       in_amount	  => var_invoice_amount,
16:21:07 1002  	       in_created_by	  => in_created_by,
16:21:07 1003  	       in_order_id	  => in_order_id,
16:21:07 1004  	       out_transaction_id => var_transaction_id
16:21:07 1005  	     );
16:21:07 1006  	     EXCEPTION
16:21:07 1007  	       WHEN OTHERS THEN
16:21:07 1008  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1009  		 RAISE CAN_NOT_CREATE_TRANSACTION;
16:21:07 1010  	   END;
16:21:07 1011  
16:21:07 1012  	   -- Create charge
16:21:07 1013  	   BEGIN
16:21:07 1014  	     PROCS_CHARGE_V16.CREATE_CHARGE(
16:21:07 1015  	       in_invoice_id	     => in_invoice_id,
16:21:07 1016  	       in_transaction_id     => var_transaction_id,
16:21:07 1017  	       in_instrument_type_id => in_instrument_type_id,
16:21:07 1018  	       in_instrument_id      => in_instrument_id,
16:21:07 1019  	       in_charge_amount      => var_invoice_amount,
16:21:07 1020  	       in_created_by	     => in_created_by,
16:21:07 1021  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
16:21:07 1022  	       out_charge_id	     => var_new_charge_id
16:21:07 1023  	     );
16:21:07 1024  	     out_charge_amount := var_invoice_amount;
16:21:07 1025  	     EXCEPTION
16:21:07 1026  	       WHEN OTHERS THEN
16:21:07 1027  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1028  		 RAISE CAN_NOT_CREATE_CHARGE;
16:21:07 1029  	   END;
16:21:07 1030  	 ELSE
16:21:07 1031  	   out_charge_amount := 0;
16:21:07 1032  	 END IF;
16:21:07 1033  
16:21:07 1034  EXCEPTION
16:21:07 1035  WHEN CAN_NOT_USE_FCINSTR THEN
16:21:07 1036  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1037  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
16:21:07 1038  WHEN BAD_CREDIT_CARD_ID THEN
16:21:07 1039  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1040  	   SPROC_NAME, 'Bad credit card id');
16:21:07 1041  WHEN BAD_PAYPAL_ID THEN
16:21:07 1042  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1043  	   SPROC_NAME, 'Bad paypal id');
16:21:07 1044  WHEN BAD_INSTRUMENT_TYPE THEN
16:21:07 1045  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1046  	   SPROC_NAME, 'Bad instrument type');
16:21:07 1047  WHEN TRANSACTION_EXISTS THEN
16:21:07 1048  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:07 1049  	   SPROC_NAME, 'Transaction with given id already exists');
16:21:07 1050  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:21:07 1051  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1052  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:21:07 1053  WHEN CAN_NOT_CREATE_CHARGE THEN
16:21:07 1054  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1055  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:21:07 1056  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:21:07 1057  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1058  	   SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
16:21:07 1059  WHEN OTHERS THEN
16:21:07 1060  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1061  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1062  END FINALIZE_GC_PURCHASING;
16:21:07 1063  
16:21:07 1064  /******************************************************************************/
16:21:07 1065  
16:21:07 1066  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
16:21:07 1067  	 in_group_id		   IN NUMBER,
16:21:07 1068  	 in_offer_chain_id	   IN VARCHAR2,
16:21:07 1069  	 in_gift_certificate_code  IN VARCHAR2,
16:21:07 1070  	 in_created_by		   IN VARCHAR2,
16:21:07 1071  	 in_recipient_name	   IN VARCHAR2,
16:21:07 1072  	 in_recipient_email	   IN VARCHAR2,
16:21:07 1073  	 in_sender_name 	   IN VARCHAR2,
16:21:07 1074  	 in_sender_email	   IN VARCHAR2,
16:21:07 1075  	 in_gift_message	   IN VARCHAR2,
16:21:07 1076  	 in_instrument_id	   IN NUMBER,
16:21:07 1077  	 in_instrument_type_id	   IN NUMBER,
16:21:07 1078  	 in_expiration_date	   IN DATE,
16:21:07 1079  	 in_order_id		   IN VARCHAR2,
16:21:07 1080  	 in_transaction_id	   IN NUMBER
16:21:07 1081  ) AS
16:21:07 1082  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
16:21:07 1083  -- VARIABLES
16:21:07 1084  var_gift_cert_id   NUMBER;
16:21:07 1085  var_account_id	  NUMBER;
16:21:07 1086  var_invoice_amount NUMBER (10,2);
16:21:07 1087  var_new_invoice_id NUMBER;
16:21:07 1088  var_new_charge_id  NUMBER;
16:21:07 1089  var_och_is_gc	  NUMBER;
16:21:07 1090  var_offer_chain_status_id NUMBER;
16:21:07 1091  var_is_for_redemption	 NUMBER;
16:21:07 1092  var_account_tax_exempt_id VARCHAR2(255);
16:21:07 1093  
16:21:07 1094  temp_transaction_id_count NUMBER;
16:21:07 1095  var_transaction_id	 NUMBER;
16:21:07 1096  temp_gc_code VARCHAR2(255);
16:21:07 1097  
16:21:07 1098  var_invoice_status_id NUMBER;
16:21:07 1099  -- EXCEPTIONS
16:21:07 1100  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
16:21:07 1101  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
16:21:07 1102  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
16:21:07 1103  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
16:21:07 1104  BAD_GROUP_ID			   EXCEPTION;
16:21:07 1105  BAD_OFFER_CHAIN_ID		   EXCEPTION;
16:21:07 1106  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
16:21:07 1107  TRANSACTION_EXISTS		   EXCEPTION;
16:21:07 1108  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
16:21:07 1109  BAD_INSTRUMENT_TYPE		   EXCEPTION;
16:21:07 1110  BAD_CREDIT_CARD_ID		   EXCEPTION;
16:21:07 1111  BAD_PAYPAL_ID			   EXCEPTION;
16:21:07 1112  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
16:21:07 1113  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
16:21:07 1114  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
16:21:07 1115  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
16:21:07 1116  CAN_NOT_USE_FCINSTR		   EXCEPTION;
16:21:07 1117  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
16:21:07 1118  EXCEPTION_MESSAGE		   VARCHAR2(1024);
16:21:07 1119  BEGIN
16:21:07 1120  
16:21:07 1121  	 -- Get account id
16:21:07 1122  	 BEGIN
16:21:07 1123  	   SELECT
16:21:07 1124  	     ACCOUNT.ID,
16:21:07 1125  	     ACCOUNT.TAX_EXEMPT_ID
16:21:07 1126  	     into
16:21:07 1127  	     var_account_id,
16:21:07 1128  	     var_account_tax_exempt_id
16:21:07 1129  	   FROM
16:21:07 1130  	     ACCOUNT
16:21:07 1131  	   WHERE
16:21:07 1132  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1133  	   EXCEPTION
16:21:07 1134  	   WHEN NO_DATA_FOUND THEN
16:21:07 1135  	     RAISE BAD_GROUP_ID;
16:21:07 1136  	 END;
16:21:07 1137  
16:21:07 1138  	 -- Check that instrument exists
16:21:07 1139  	 IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
16:21:07 1140  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 1141  	     RAISE BAD_CREDIT_CARD_ID;
16:21:07 1142  	   END IF;
16:21:07 1143  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
16:21:07 1144  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 1145  	     RAISE BAD_PAYPAL_ID;
16:21:07 1146  	   END IF;
16:21:07 1147  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
16:21:07 1148  	   NULL;
16:21:07 1149  	 ELSE
16:21:07 1150  	   RAISE BAD_INSTRUMENT_TYPE;
16:21:07 1151  	 END IF;
16:21:07 1152  
16:21:07 1153  	 -- Check for the same code
16:21:07 1154  	 BEGIN
16:21:07 1155  	   SELECT
16:21:07 1156  	     GIFT_CERTIFICATE.CODE into temp_gc_code
16:21:07 1157  	   FROM
16:21:07 1158  	     GIFT_CERTIFICATE
16:21:07 1159  	   WHERE
16:21:07 1160  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
16:21:07 1161  
16:21:07 1162  	   RAISE GC_CODE_ALREADY_EXISTS;
16:21:07 1163  
16:21:07 1164  	   EXCEPTION
16:21:07 1165  	     WHEN NO_DATA_FOUND THEN
16:21:07 1166  	       NULL;
16:21:07 1167  	 END;
16:21:07 1168  
16:21:07 1169  	 -- Get offer chain flag "is_gift_certificate"
16:21:07 1170  	 BEGIN
16:21:07 1171  	   SELECT
16:21:07 1172  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
16:21:07 1173  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
16:21:07 1174  	     into
16:21:07 1175  	     var_och_is_gc,
16:21:07 1176  	     var_offer_chain_status_id
16:21:07 1177  	   FROM
16:21:07 1178  	     OFFER_CHAIN
16:21:07 1179  	   WHERE
16:21:07 1180  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:21:07 1181  	   EXCEPTION
16:21:07 1182  	   WHEN NO_DATA_FOUND THEN
16:21:07 1183  	     RAISE BAD_OFFER_CHAIN_ID;
16:21:07 1184  	 END;
16:21:07 1185  
16:21:07 1186  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V16.TRUE
16:21:07 1187  	   OR var_och_is_gc IS NULL THEN
16:21:07 1188  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
16:21:07 1189  	 END IF;
16:21:07 1190  
16:21:07 1191  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
16:21:07 1192  	   RAISE BAD_OFFER_CHAIN_STATUS;
16:21:07 1193  	 END IF;
16:21:07 1194  
16:21:07 1195  	 -- norlov: #38151 check if the OC is for Redemption:
16:21:07 1196  	 SELECT
16:21:07 1197  	   COUNT(*) into var_is_for_redemption
16:21:07 1198  	 FROM
16:21:07 1199  	   OFFER_CHAIN_ELIGIBILITY
16:21:07 1200  	 WHERE
16:21:07 1201  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:21:07 1202  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
16:21:07 1203  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
16:21:07 1204  
16:21:07 1205  	 IF var_is_for_redemption > 0 THEN
16:21:07 1206  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
16:21:07 1207  	 END IF;
16:21:07 1208  
16:21:07 1209  	 -- Check that transaction with given id do not exists
16:21:07 1210  	 SELECT
16:21:07 1211  	   COUNT(*) into temp_transaction_id_count
16:21:07 1212  	 FROM
16:21:07 1213  	   TRANSACTION
16:21:07 1214  	 WHERE
16:21:07 1215  	   TRANSACTION.ID = in_transaction_id;
16:21:07 1216  
16:21:07 1217  	 IF temp_transaction_id_count > 0 THEN
16:21:07 1218  	   RAISE TRANSACTION_EXISTS;
16:21:07 1219  	 END IF;
16:21:07 1220  
16:21:07 1221  	 -- Create new invoice
16:21:07 1222  	 BEGIN
16:21:07 1223  	   PROCS_INVOICE_V16.CREATE_INVOICE(
16:21:07 1224  	     in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
16:21:07 1225  	     in_created_by     => in_created_by,
16:21:07 1226  	     in_tax_exempt_id  => var_account_tax_exempt_id,
16:21:07 1227  	     out_invoice_id    => var_new_invoice_id
16:21:07 1228  	   );
16:21:07 1229  	   EXCEPTION
16:21:07 1230  	     WHEN OTHERS THEN
16:21:07 1231  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1232  	       RAISE CAN_NOT_CREATE_INVOICE;
16:21:07 1233  	 END;
16:21:07 1234  
16:21:07 1235  	 -- Add line items for new invoice
16:21:07 1236  	 BEGIN
16:21:07 1237  	   FOR f_offer_data IN (
16:21:07 1238  	     SELECT
16:21:07 1239  	       OFFER_ID,
16:21:07 1240  	       NUM_RECURRENCES
16:21:07 1241  	     FROM
16:21:07 1242  	       OFFER_OFFER_CHAIN
16:21:07 1243  	     WHERE
16:21:07 1244  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:21:07 1245  	   )
16:21:07 1246  	   LOOP
16:21:07 1247  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
16:21:07 1248  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
16:21:07 1249  	     END IF;
16:21:07 1250  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
16:21:07 1251  	     LOOP
16:21:07 1252  	       PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
16:21:07 1253  		 in_invoice_id => var_new_invoice_id,
16:21:07 1254  		 in_offer_id   => f_offer_data.OFFER_ID,
16:21:07 1255  		 in_created_by => in_created_by
16:21:07 1256  	       );
16:21:07 1257  	     END LOOP;
16:21:07 1258  	   END LOOP;
16:21:07 1259  
16:21:07 1260  	   EXCEPTION
16:21:07 1261  	     WHEN OTHERS THEN
16:21:07 1262  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1263  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
16:21:07 1264  	 END;
16:21:07 1265  
16:21:07 1266  	 -- Calculate new invoice amount
16:21:07 1267  	 BEGIN
16:21:07 1268  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
16:21:07 1269  	   EXCEPTION
16:21:07 1270  	     WHEN OTHERS THEN
16:21:07 1271  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1272  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:21:07 1273  	 END;
16:21:07 1274  
16:21:07 1275  	 IF var_invoice_amount > 0
16:21:07 1276  	   AND in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
16:21:07 1277  	   RAISE CAN_NOT_USE_FCINSTR;
16:21:07 1278  	 END IF;
16:21:07 1279  
16:21:07 1280  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
16:21:07 1281  	 IF var_invoice_amount = 0 THEN
16:21:07 1282  	   PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
16:21:07 1283  	     in_invoice_id		    => var_new_invoice_id,
16:21:07 1284  	     in_updated_by		    => in_created_by,
16:21:07 1285  	     in_invoice_status_id	    => GLOBAL_STATUSES_V16.INVOICE_CLOSED
16:21:07 1286  	   );
16:21:07 1287  	 END IF;
16:21:07 1288  
16:21:07 1289  	 IF var_invoice_amount > 0 THEN
16:21:07 1290  	   -- Create transaction
16:21:07 1291  	   BEGIN
16:21:07 1292  	     PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
16:21:07 1293  	       in_transaction_id  => in_transaction_id,
16:21:07 1294  	       in_status_id	  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
16:21:07 1295  	       in_amount	  => var_invoice_amount,
16:21:07 1296  	       in_created_by	  => in_created_by,
16:21:07 1297  	       in_order_id	  => in_order_id,
16:21:07 1298  	       out_transaction_id => var_transaction_id
16:21:07 1299  	     );
16:21:07 1300  	     EXCEPTION
16:21:07 1301  	       WHEN OTHERS THEN
16:21:07 1302  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1303  		 RAISE CAN_NOT_CREATE_TRANSACTION;
16:21:07 1304  	   END;
16:21:07 1305  
16:21:07 1306  	   -- Create charge
16:21:07 1307  	   BEGIN
16:21:07 1308  	     PROCS_CHARGE_V16.CREATE_CHARGE(
16:21:07 1309  	       in_invoice_id	     => var_new_invoice_id,
16:21:07 1310  	       in_transaction_id     => var_transaction_id,
16:21:07 1311  	       in_instrument_type_id => in_instrument_type_id,
16:21:07 1312  	       in_instrument_id      => in_instrument_id,
16:21:07 1313  	       in_charge_amount      => var_invoice_amount,
16:21:07 1314  	       in_created_by	     => in_created_by,
16:21:07 1315  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
16:21:07 1316  	       out_charge_id	     => var_new_charge_id
16:21:07 1317  	     );
16:21:07 1318  	     EXCEPTION
16:21:07 1319  	       WHEN OTHERS THEN
16:21:07 1320  		 EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1321  		 RAISE CAN_NOT_CREATE_CHARGE;
16:21:07 1322  	   END;
16:21:07 1323  	 END IF;
16:21:07 1324  
16:21:07 1325  	 -- Create new row in GIFT_CERTIFICATE table
16:21:07 1326  	 PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_GIFT_CERTIFICATE(
16:21:07 1327  	   out_gift_certificate_id	 => var_gift_cert_id,
16:21:07 1328  	   in_purchaser_group_id	 => in_group_id,
16:21:07 1329  	   in_purchaser_invoice_id	 => var_new_invoice_id,
16:21:07 1330  	   in_offer_chain_id		 => in_offer_chain_id,
16:21:07 1331  	   in_expiration_date		 => in_expiration_date,
16:21:07 1332  	   in_purchase_date		 => SYSDATE,
16:21:07 1333  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE,
16:21:07 1334  	   in_code			 => in_gift_certificate_code,
16:21:07 1335  	   in_created_by		 => in_created_by,
16:21:07 1336  	   in_recipient_name		 => in_recipient_name,
16:21:07 1337  	   in_gift_message		 => in_gift_message,
16:21:07 1338  	   in_recipient_email		 => in_recipient_email,
16:21:07 1339  	   in_sender_email		 => in_sender_email,
16:21:07 1340  	   in_sender_name		 => in_sender_name
16:21:07 1341  	 );
16:21:07 1342  
16:21:07 1343  EXCEPTION
16:21:07 1344  WHEN CAN_NOT_USE_FCINSTR THEN
16:21:07 1345  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1346  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
16:21:07 1347  WHEN BAD_OFFER_CHAIN_STATUS THEN
16:21:07 1348  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1349  	   SPROC_NAME, 'Offer chain is not active');
16:21:07 1350  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
16:21:07 1351  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1352  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
16:21:07 1353  WHEN BAD_CREDIT_CARD_ID THEN
16:21:07 1354  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1355  	   SPROC_NAME, 'Bad credit card id');
16:21:07 1356  WHEN BAD_PAYPAL_ID THEN
16:21:07 1357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1358  	   SPROC_NAME, 'Bad paypal id');
16:21:07 1359  WHEN BAD_INSTRUMENT_TYPE THEN
16:21:07 1360  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1361  	   SPROC_NAME, 'Bad instrument type');
16:21:07 1362  WHEN GC_CODE_ALREADY_EXISTS THEN
16:21:07 1363  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:07 1364  	   SPROC_NAME, 'Gift certificate with same code already exists');
16:21:07 1365  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
16:21:07 1366  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1367  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
16:21:07 1368  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
16:21:07 1369  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1370  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
16:21:07 1371  WHEN TRANSACTION_EXISTS THEN
16:21:07 1372  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:07 1373  	   SPROC_NAME, 'Transaction with given id already exists');
16:21:07 1374  WHEN CAN_NOT_CREATE_INVOICE THEN
16:21:07 1375  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1376  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
16:21:07 1377  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:21:07 1378  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1379  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:21:07 1380  WHEN CAN_NOT_CREATE_CHARGE THEN
16:21:07 1381  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1382  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:21:07 1383  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
16:21:07 1384  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1385  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
16:21:07 1386  WHEN BAD_GROUP_ID THEN
16:21:07 1387  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1388  	   SPROC_NAME, 'No such group id');
16:21:07 1389  WHEN BAD_OFFER_CHAIN_ID THEN
16:21:07 1390  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1391  	   SPROC_NAME, 'No such offer chain');
16:21:07 1392  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
16:21:07 1393  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1394  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
16:21:07 1395  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:21:07 1396  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1397  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
16:21:07 1398  WHEN OTHERS THEN
16:21:07 1399  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1400  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1401  END PURCHASE_GIFT_CERTIFICATE;
16:21:07 1402  
16:21:07 1403  /******************************************************************************/
16:21:07 1404  
16:21:07 1405  PROCEDURE REDEEM_GIFT_CERTIFICATE (
16:21:07 1406  	 in_group_id			 IN NUMBER,
16:21:07 1407  	 in_gift_certificate_code	 IN VARCHAR2,
16:21:07 1408  	 in_created_by			 IN VARCHAR2,
16:21:07 1409  	 in_redeemer_address_id 	 IN NUMBER,
16:21:07 1410  	 in_fin_instrument_id		 IN NUMBER,
16:21:07 1411  	 in_fin_instrument_type_id	 IN NUMBER,
16:21:07 1412  	 in_redemption_offer_chain_id	 IN NUMBER,
16:21:07 1413  	 out_subscription_id		 OUT NUMBER,
16:21:07 1414  	 out_license_id 		 OUT NUMBER
16:21:07 1415  ) AS
16:21:07 1416  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
16:21:07 1417  -- VARIABLES
16:21:07 1418  var_gift_certificate_id NUMBER;
16:21:07 1419  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
16:21:07 1420  var_purchased_oc_id     NUMBER;
16:21:07 1421  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
16:21:07 1422  var_offer_duration      VARCHAR2(30);
16:21:07 1423  var_invoice_id	       NUMBER;
16:21:07 1424  var_succ_purch_attempts_num NUMBER;
16:21:07 1425  var_subscription_id     NUMBER;
16:21:07 1426  var_license_id	       NUMBER;
16:21:07 1427  var_account_id	       NUMBER;
16:21:07 1428  var_gc_status_id        NUMBER;
16:21:07 1429  var_gc_charges_amount   NUMBER;
16:21:07 1430  var_gc_expiration_date  DATE;
16:21:07 1431  var_gc_redeemer_group_id NUMBER;
16:21:07 1432  var_gc_purchase_invoice_id NUMBER;
16:21:07 1433  var_gc_purchase_inv_status_id NUMBER;
16:21:07 1434  var_offer_index		     NUMBER;
16:21:07 1435  var_purchaser_group_id	     NUMBER;
16:21:07 1436  temp_license_id		     NUMBER;
16:21:07 1437  var_same_offer_chains_num     NUMBER;
16:21:07 1438  var_max_concurrent_subscrs    NUMBER;
16:21:07 1439  var_account_tax_exempt_id     VARCHAR2(255);
16:21:07 1440  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
16:21:07 1441  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
16:21:07 1442  var_first_offer_id	  NUMBER;
16:21:07 1443  var_date 	     DATE := SYSDATE;
16:21:07 1444  
16:21:07 1445  var_offers SYS_REFCURSOR;
16:21:07 1446  
16:21:07 1447  -- EXCEPTIONS
16:21:07 1448  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
16:21:07 1449  BAD_GROUP_ID		      EXCEPTION;
16:21:07 1450  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
16:21:07 1451  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
16:21:07 1452  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
16:21:07 1453  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
16:21:07 1454  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
16:21:07 1455  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
16:21:07 1456  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
16:21:07 1457  LIMIT_REACHED		      EXCEPTION;
16:21:07 1458  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
16:21:07 1459  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
16:21:07 1460  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
16:21:07 1461  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
16:21:07 1462  EXCEPTION_MESSAGE	      VARCHAR2(1024);
16:21:07 1463  BEGIN
16:21:07 1464  
16:21:07 1465  	 -- Get account id
16:21:07 1466  	 BEGIN
16:21:07 1467  	   SELECT
16:21:07 1468  	     ACCOUNT.ID,
16:21:07 1469  	     ACCOUNT.TAX_EXEMPT_ID
16:21:07 1470  	     into
16:21:07 1471  	     var_account_id,
16:21:07 1472  	     var_account_tax_exempt_id
16:21:07 1473  	   FROM
16:21:07 1474  	     ACCOUNT
16:21:07 1475  	   WHERE
16:21:07 1476  	     ACCOUNT.GROUP_ID = in_group_id
16:21:07 1477  	     AND ROWNUM <= 1;
16:21:07 1478  
16:21:07 1479  	   EXCEPTION
16:21:07 1480  	   WHEN NO_DATA_FOUND THEN
16:21:07 1481  	     RAISE BAD_GROUP_ID;
16:21:07 1482  	 END;
16:21:07 1483  
16:21:07 1484  	 -- Get gift certificate data
16:21:07 1485  	 BEGIN
16:21:07 1486  	   SELECT
16:21:07 1487  	     GIFT_CERTIFICATE.ID,
16:21:07 1488  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
16:21:07 1489  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
16:21:07 1490  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
16:21:07 1491  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
16:21:07 1492  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
16:21:07 1493  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
16:21:07 1494  	     into
16:21:07 1495  	     var_gift_certificate_id,
16:21:07 1496  	     var_purchased_oc_id,
16:21:07 1497  	     var_gc_status_id,
16:21:07 1498  	     var_purchaser_group_id,
16:21:07 1499  	     var_gc_expiration_date,
16:21:07 1500  	     var_gc_redeemer_group_id,
16:21:07 1501  	     var_gc_purchase_invoice_id
16:21:07 1502  	   FROM
16:21:07 1503  	     GIFT_CERTIFICATE
16:21:07 1504  	   WHERE
16:21:07 1505  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
16:21:07 1506  	     AND ROWNUM <= 1;
16:21:07 1507  
16:21:07 1508  	   EXCEPTION
16:21:07 1509  	   WHEN NO_DATA_FOUND THEN
16:21:07 1510  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
16:21:07 1511  	 END;
16:21:07 1512  
16:21:07 1513  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
16:21:07 1514  	 -- but in that case a redemption offer chain id should always be passed in
16:21:07 1515  	 IF var_oc_id_to_redeem IS NULL THEN
16:21:07 1516  	   BEGIN
16:21:07 1517  	     SELECT
16:21:07 1518  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
16:21:07 1519  	       into
16:21:07 1520  	       var_oc_id_to_redeem
16:21:07 1521  	     FROM
16:21:07 1522  	       OFFER_CHAIN_META_DATA
16:21:07 1523  	     WHERE
16:21:07 1524  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
16:21:07 1525  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V16.REDEMPTION_OC_ID
16:21:07 1526  	       AND ROWNUM = 1;
16:21:07 1527  -- requested by ticket so (but above is correct for the actual migrated data):
16:21:07 1528  --  SELECT
16:21:07 1529  --      OFFER_CHAIN.ID
16:21:07 1530  --      into
16:21:07 1531  --      var_oc_id_to_redeem
16:21:07 1532  --    FROM
16:21:07 1533  --      OFFER_CHAIN
16:21:07 1534  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
16:21:07 1535  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
16:21:07 1536  --    WHERE
16:21:07 1537  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 1538  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
16:21:07 1539  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET
16:21:07 1540  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 1541  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V16.REDEMPTION_OC_ID
16:21:07 1542  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
16:21:07 1543  --      AND ROWNUM = 1;
16:21:07 1544  
16:21:07 1545  	     EXCEPTION
16:21:07 1546  	     WHEN NO_DATA_FOUND THEN
16:21:07 1547  	       RAISE OC_TO_REDEEM_NOT_FOUND;
16:21:07 1548  	   END;
16:21:07 1549  	 END IF;
16:21:07 1550  
16:21:07 1551  	 -- Check that purchase invoice for this GC was closed
16:21:07 1552  	 SELECT
16:21:07 1553  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
16:21:07 1554  	 FROM
16:21:07 1555  	   INVOICE
16:21:07 1556  	 WHERE
16:21:07 1557  	   INVOICE.ID = var_gc_purchase_invoice_id;
16:21:07 1558  
16:21:07 1559  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
16:21:07 1560  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
16:21:07 1561  	 END IF;
16:21:07 1562  
16:21:07 1563  	 -- Check that this invoice was successfully processed by billing
16:21:07 1564  	 SELECT
16:21:07 1565  	   COUNT(1) into var_succ_purch_attempts_num
16:21:07 1566  	 FROM
16:21:07 1567  	   TRANSACTION_ATTEMPT TA
16:21:07 1568  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
16:21:07 1569  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
16:21:07 1570  	 WHERE
16:21:07 1571  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
16:21:07 1572  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS;
16:21:07 1573  
16:21:07 1574  	 IF var_succ_purch_attempts_num = 0 THEN
16:21:07 1575  	   SELECT
16:21:07 1576  	     COUNT(1) into var_succ_purch_attempts_num
16:21:07 1577  	   FROM
16:21:07 1578  	     DUAL
16:21:07 1579  	   WHERE
16:21:07 1580  	     PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
16:21:07 1581  	 END IF;
16:21:07 1582  
16:21:07 1583  	 IF var_succ_purch_attempts_num = 0 THEN
16:21:07 1584  	   RAISE PURCHASE_INVOICES_NOT_PAID;
16:21:07 1585  	 END IF;
16:21:07 1586  
16:21:07 1587  	 -- Check limit for gc's offer chain
16:21:07 1588  	 SELECT
16:21:07 1589  	   COUNT(*) into var_same_offer_chains_num
16:21:07 1590  	 FROM
16:21:07 1591  	   SUBSCRIPTION
16:21:07 1592  	 WHERE
16:21:07 1593  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:07 1594  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
16:21:07 1595  	   AND (
16:21:07 1596  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:07 1597  	     -- TODO: Does we need next line?
16:21:07 1598  	     -- OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
16:21:07 1599  	   );
16:21:07 1600  -- norlov: #38414 the same checking as on OC purchase (just copypasted from CREATE_SUBSCRIPTION - TODO: refactor it not to keep the same code twice)
16:21:07 1601  --  IF PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem) = var_same_offer_chains_num THEN
16:21:07 1602  --    RAISE LIMIT_REACHED;
16:21:07 1603  --  END IF;
16:21:07 1604  IF var_same_offer_chains_num = 0 THEN
16:21:07 1605  	   -- if user does not have any active existing subscriptions to the offer chain
16:21:07 1606  	   -- and if product from the offer chain is already owned from another offer chain
16:21:07 1607  	   -- then deny purchase
16:21:07 1608  	   FOR f_account_offer_chains IN (
16:21:07 1609  	     SELECT DISTINCT
16:21:07 1610  	       OFFER_CHAIN_ID
16:21:07 1611  	     FROM
16:21:07 1612  	       SUBSCRIPTION
16:21:07 1613  	     WHERE
16:21:07 1614  	       ACCOUNT_ID = var_account_id
16:21:07 1615  	       AND (
16:21:07 1616  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:07 1617  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED)
16:21:07 1618  	   )
16:21:07 1619  	   LOOP
16:21:07 1620  	     IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V16.TRUE THEN
16:21:07 1621  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
16:21:07 1622  	     END IF;
16:21:07 1623  	   END LOOP;
16:21:07 1624  	 ELSE
16:21:07 1625  
16:21:07 1626  	   -- if user have any active existing subscriptions to the offer chain
16:21:07 1627  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
16:21:07 1628  	   -- then deny purchase
16:21:07 1629  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
16:21:07 1630  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V16.INFINITY
16:21:07 1631  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
16:21:07 1632  	     RAISE LIMIT_REACHED;
16:21:07 1633  	   END IF;
16:21:07 1634  	 END IF;
16:21:07 1635  -- norlov: END OF TODO
16:21:07 1636  
16:21:07 1637  
16:21:07 1638  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
16:21:07 1639  	   RAISE GIFT_CERTIFICATE_REDEEMED;
16:21:07 1640  	 END IF;
16:21:07 1641  
16:21:07 1642  	 IF var_gc_expiration_date < sysdate THEN
16:21:07 1643  	   RAISE GIFT_CERTIFICATE_EXPIRED;
16:21:07 1644  	 END IF;
16:21:07 1645  
16:21:07 1646  	  IF var_gc_status_id = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_REFUNDED THEN
16:21:07 1647  	   RAISE GIFT_CERT_IS_REFUNDED;
16:21:07 1648  	 END IF;
16:21:07 1649  
16:21:07 1650  	 IF var_gc_status_id = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED THEN
16:21:07 1651  	   RAISE GIFT_CERT_IS_FINALIZED;
16:21:07 1652  	 END IF;
16:21:07 1653  
16:21:07 1654  	 -- Check that user did not subscribed to same product already
16:21:07 1655  	 -- norlov: get rid of this since there is already the check?
16:21:07 1656  	 FOR f_user_offer_chain IN (
16:21:07 1657  	   SELECT DISTINCT
16:21:07 1658  	     OFFER_CHAIN_ID
16:21:07 1659  	   FROM
16:21:07 1660  	     SUBSCRIPTION
16:21:07 1661  	   WHERE
16:21:07 1662  	     ACCOUNT_ID=var_account_id
16:21:07 1663  	     AND (
16:21:07 1664  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:07 1665  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
16:21:07 1666  	     )
16:21:07 1667  	 )
16:21:07 1668  	 LOOP
16:21:07 1669  	   IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V16.TRUE THEN
16:21:07 1670  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
16:21:07 1671  	   END IF;
16:21:07 1672  	 END LOOP;
16:21:07 1673  
16:21:07 1674  	 -- Check for gift certificate amount
16:21:07 1675  	 SELECT
16:21:07 1676  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
16:21:07 1677  	 FROM
16:21:07 1678  	   CHARGE
16:21:07 1679  	 WHERE
16:21:07 1680  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
16:21:07 1681  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
16:21:07 1682  
16:21:07 1683  	 -- Create new invoice
16:21:07 1684  	 PROCS_INVOICE_V16.CREATE_INVOICE(
16:21:07 1685  	   out_invoice_id    => var_invoice_id,
16:21:07 1686  	   in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_CLOSED,
16:21:07 1687  	   in_tax_exempt_id  => var_account_tax_exempt_id,
16:21:07 1688  	   in_created_by     => in_created_by
16:21:07 1689  	 );
16:21:07 1690  
16:21:07 1691  	 -- If a financial instrument wasn't passed in, use the gift certificate id
16:21:07 1692  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
16:21:07 1693  	 IF var_fin_instrument_id is null THEN
16:21:07 1694  	   var_fin_instrument_id := var_gift_certificate_id;
16:21:07 1695  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
16:21:07 1696  	 END IF;
16:21:07 1697  
16:21:07 1698  	 -- Insert new row into subscription table
16:21:07 1699  	 PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION(
16:21:07 1700  	   out_subscription_id	     => var_subscription_id,
16:21:07 1701  	   in_account_id	     => var_account_id,
16:21:07 1702  	   in_purchase_date	     => var_date,
16:21:07 1703  	   in_offer_chain_id	     => var_oc_id_to_redeem,
16:21:07 1704  	   in_created_by	     => in_created_by,
16:21:07 1705  	   in_instrument_type_id     => var_fin_instrument_type_id,
16:21:07 1706  	   in_instrument_id	     => var_fin_instrument_id,
16:21:07 1707  	   in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:07 1708  	 );
16:21:07 1709  
16:21:07 1710  	 out_subscription_id := var_subscription_id;
16:21:07 1711  
16:21:07 1712  	 BEGIN
16:21:07 1713  	   PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
16:21:07 1714  	   EXCEPTION
16:21:07 1715  	     WHEN OTHERS THEN
16:21:07 1716  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1717  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
16:21:07 1718  	 END;
16:21:07 1719  
16:21:07 1720  	 BEGIN
16:21:07 1721  	   PROCS_LICENSE_V16.CREATE_LICENSE (
16:21:07 1722  	     out_license_id		 => out_license_id,
16:21:07 1723  	     in_status_id		 => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
16:21:07 1724  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V16.TRUE,
16:21:07 1725  	     in_start_date		 => var_date,
16:21:07 1726  	     in_offer_id		 => var_first_offer_id,
16:21:07 1727  	     in_subscription_id 	 => var_subscription_id,
16:21:07 1728  	     in_invoice_id		 => var_invoice_id,
16:21:07 1729  	     in_created_by		 => in_created_by,
16:21:07 1730  	     in_end_date		 => NULL, -- Will be calculated automatically
16:21:07 1731  	     in_is_extension		 => GLOBAL_CONSTANTS_V16.FALSE,
16:21:07 1732  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
16:21:07 1733  	     in_current_offer_recurr_num => 1
16:21:07 1734  	   );
16:21:07 1735  
16:21:07 1736  	   EXCEPTION
16:21:07 1737  	     WHEN OTHERS THEN
16:21:07 1738  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1739  	       RAISE CAN_NOT_CREATE_LICENSE;
16:21:07 1740  	 END;
16:21:07 1741  
16:21:07 1742  	 -- Update original gift certificate
16:21:07 1743  	 BEGIN
16:21:07 1744  	   PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE(
16:21:07 1745  	     in_gift_certificate_id	   => var_gift_certificate_id,
16:21:07 1746  	     in_updated_by		   => in_created_by,
16:21:07 1747  	     in_redeemer_group_id	   => in_group_id,
16:21:07 1748  	     in_finalized_invoice_id	   => var_invoice_id,
16:21:07 1749  	     in_redemption_date 	   => var_date,
16:21:07 1750  	     in_redeemer_address_id	   => in_redeemer_address_id,
16:21:07 1751  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED
16:21:07 1752  	   );
16:21:07 1753  	   EXCEPTION
16:21:07 1754  	     WHEN OTHERS THEN
16:21:07 1755  	       EXCEPTION_MESSAGE := SQLERRM;
16:21:07 1756  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
16:21:07 1757  	 END;
16:21:07 1758  
16:21:07 1759  EXCEPTION
16:21:07 1760  WHEN LIMIT_REACHED THEN
16:21:07 1761  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
16:21:07 1762  	   SPROC_NAME, 'Limit reached for given offer chain');
16:21:07 1763  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
16:21:07 1764  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
16:21:07 1765  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
16:21:07 1766  WHEN GIFT_CERTIFICATE_REDEEMED THEN
16:21:07 1767  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1768  	   SPROC_NAME, 'Gift certificate already redeemed');
16:21:07 1769  WHEN GIFT_CERTIFICATE_EXPIRED THEN
16:21:07 1770  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1771  	   SPROC_NAME, 'Gift certificate expired');
16:21:07 1772  WHEN GIFT_CERT_IS_FINALIZED THEN
16:21:07 1773  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1774  	   SPROC_NAME, 'Gift certificate is finalized');
16:21:07 1775  WHEN GIFT_CERT_IS_REFUNDED THEN
16:21:07 1776  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1777  	   SPROC_NAME, 'Gift certificate has been refunded');
16:21:07 1778  WHEN BAD_GROUP_ID THEN
16:21:07 1779  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1780  	   SPROC_NAME, 'No such account with given group id');
16:21:07 1781  WHEN OC_TO_REDEEM_NOT_FOUND THEN
16:21:07 1782  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1783  	   SPROC_NAME, 'Offer chain to redeem not found');
16:21:07 1784  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
16:21:07 1785  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1786  	   SPROC_NAME, 'No such gift certificate code');
16:21:07 1787  WHEN CAN_NOT_CREATE_LICENSE THEN
16:21:07 1788  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1789  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
16:21:07 1790  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
16:21:07 1791  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 1792  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
16:21:07 1793  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
16:21:07 1794  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1795  	   SPROC_NAME, 'Purchase invoice is not closed');
16:21:07 1796  WHEN PURCHASE_INVOICES_NOT_PAID THEN
16:21:07 1797  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 1798  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
16:21:07 1799  WHEN OTHERS THEN
16:21:07 1800  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1801  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1802  END;
16:21:07 1803  
16:21:07 1804  /******************************************************************************/
16:21:07 1805  
16:21:07 1806  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
16:21:07 1807  /*
16:21:07 1808  Throws exceptions:
16:21:07 1809  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1810  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1811  */
16:21:07 1812  	 in_code	IN VARCHAR,
16:21:07 1813  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1814  ) AS
16:21:07 1815  -- VARIABLES
16:21:07 1816  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
16:21:07 1817  temp_gift_certificate_id NUMBER;
16:21:07 1818  -- EXCEPTIONS
16:21:07 1819  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
16:21:07 1820  BEGIN
16:21:07 1821  
16:21:07 1822  	 BEGIN
16:21:07 1823  	   SELECT
16:21:07 1824  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
16:21:07 1825  	   FROM
16:21:07 1826  	     GIFT_CERTIFICATE
16:21:07 1827  	   WHERE
16:21:07 1828  	     GIFT_CERTIFICATE.CODE = in_code;
16:21:07 1829  	   EXCEPTION
16:21:07 1830  	     WHEN NO_DATA_FOUND THEN
16:21:07 1831  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
16:21:07 1832  	 END;
16:21:07 1833  
16:21:07 1834  	 -- Select all gift certificates with given code
16:21:07 1835  	 OPEN out_result_set FOR
16:21:07 1836  	 SELECT
16:21:07 1837  	   gc.EXPIRATION_DATE,
16:21:07 1838  	   ch.name,
16:21:07 1839  	   ch.id,
16:21:07 1840  	   gc.sender_email,
16:21:07 1841  	   gc.sender_name,
16:21:07 1842  	   gc.recipient_email,
16:21:07 1843  	   gc.recipient_name,
16:21:07 1844  	   gc.purchase_date,
16:21:07 1845  	   gc.redemption_date,
16:21:07 1846  	   gc.purchaser_group_id,
16:21:07 1847  	   gc.redeemer_group_id,
16:21:07 1848  	   gc.gift_message,
16:21:07 1849  	   ocmd.value redemption_offer_chain_ids,
16:21:07 1850  	   s.offer_chain_id redeemed_offer_chain_id,
16:21:07 1851  	   gc.recipient_notify_date,
16:21:07 1852  	   gc.gift_certificate_status_id,
16:21:07 1853  	   gc.purchase_invoice_id,
16:21:07 1854  	   gc.finalized_invoice_id
16:21:07 1855  	 FROM
16:21:07 1856  	   GIFT_CERTIFICATE gc
16:21:07 1857  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
16:21:07 1858  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
16:21:07 1859  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
16:21:07 1860  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
16:21:07 1861  	 WHERE
16:21:07 1862  	   gc.code = in_code;
16:21:07 1863  
16:21:07 1864  EXCEPTION
16:21:07 1865  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
16:21:07 1866  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1867  	   SPROC_NAME, 'No such gift certificate');
16:21:07 1868  WHEN OTHERS THEN
16:21:07 1869  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1870  	   SPROC_NAME, 'Unknown Error', SQLERRM);
16:21:07 1871  END;
16:21:07 1872  
16:21:07 1873  /******************************************************************************/
16:21:07 1874  
16:21:07 1875  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
16:21:07 1876  /*
16:21:07 1877  Throws exceptions:
16:21:07 1878  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1879  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1880  */
16:21:07 1881  	 in_gift_certificate_id IN NUMBER,
16:21:07 1882  	 out_result_set 	OUT SYS_REFCURSOR
16:21:07 1883  ) AS
16:21:07 1884  -- VARIABLES
16:21:07 1885  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
16:21:07 1886  temp_gift_certificate_id NUMBER;
16:21:07 1887  -- EXCEPTIONS
16:21:07 1888  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
16:21:07 1889  BEGIN
16:21:07 1890  
16:21:07 1891  	 BEGIN
16:21:07 1892  	   SELECT
16:21:07 1893  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
16:21:07 1894  	   FROM
16:21:07 1895  	     GIFT_CERTIFICATE
16:21:07 1896  	   WHERE
16:21:07 1897  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
16:21:07 1898  	   EXCEPTION
16:21:07 1899  	     WHEN NO_DATA_FOUND THEN
16:21:07 1900  	       RAISE BAD_GIFT_CERTIFICATE_ID;
16:21:07 1901  	 END;
16:21:07 1902  
16:21:07 1903  	 -- Select all gift certificates with given code
16:21:07 1904  	 OPEN out_result_set FOR
16:21:07 1905  	 SELECT
16:21:07 1906  	   gc.EXPIRATION_DATE,
16:21:07 1907  	   ch.name,
16:21:07 1908  	   ch.id,
16:21:07 1909  	   gc.sender_email,
16:21:07 1910  	   gc.sender_name,
16:21:07 1911  	   gc.recipient_email,
16:21:07 1912  	   gc.recipient_name,
16:21:07 1913  	   gc.purchase_date,
16:21:07 1914  	   gc.redemption_date,
16:21:07 1915  	   gc.purchaser_group_id,
16:21:07 1916  	   gc.redeemer_group_id,
16:21:07 1917  	   gc.code,
16:21:07 1918  	   gc.gift_message,
16:21:07 1919  	   gc.recipient_notify_date
16:21:07 1920  	 FROM
16:21:07 1921  	   GIFT_CERTIFICATE gc
16:21:07 1922  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
16:21:07 1923  	 WHERE
16:21:07 1924  	   gc.id = in_gift_certificate_id;
16:21:07 1925  
16:21:07 1926  EXCEPTION
16:21:07 1927  WHEN BAD_GIFT_CERTIFICATE_ID THEN
16:21:07 1928  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1929  	   SPROC_NAME, 'No such gift certificate');
16:21:07 1930  WHEN OTHERS THEN
16:21:07 1931  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1932  	   SPROC_NAME, 'Unknown Error', SQLERRM);
16:21:07 1933  END GET_GIFT_CERTIFICATE_BY_ID;
16:21:07 1934  
16:21:07 1935  /******************************************************************************/
16:21:07 1936  
16:21:07 1937  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
16:21:07 1938  	 in_group_id		IN  NUMBER,
16:21:07 1939  	 out_instrument_type_id OUT NUMBER,
16:21:07 1940  	 out_instrument_id	OUT NUMBER
16:21:07 1941  ) AS
16:21:07 1942  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
16:21:07 1943  BEGIN
16:21:07 1944  
16:21:07 1945  	 SELECT
16:21:07 1946  	   ACCOUNT.INSTRUMENT_TYPE_ID,
16:21:07 1947  	   ACCOUNT.INSTRUMENT_ID
16:21:07 1948  	   into
16:21:07 1949  	   out_instrument_type_id,
16:21:07 1950  	   out_instrument_id
16:21:07 1951  	 FROM
16:21:07 1952  	   ACCOUNT
16:21:07 1953  	 WHERE
16:21:07 1954  	   ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1955  
16:21:07 1956  EXCEPTION
16:21:07 1957  WHEN NO_DATA_FOUND THEN
16:21:07 1958  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1959  	   SPROC_NAME, 'Bad group id');
16:21:07 1960  WHEN OTHERS THEN
16:21:07 1961  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1962  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1963  END GET_DEF_FINANCIAL_INSTRUMENT;
16:21:07 1964  
16:21:07 1965  /******************************************************************************/
16:21:07 1966  
16:21:07 1967  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
16:21:07 1968  	 in_group_id	       IN NUMBER,
16:21:07 1969  	 in_instrument_type_id IN NUMBER,
16:21:07 1970  	 in_instrument_id      IN NUMBER,
16:21:07 1971  	 in_updated_by	       IN VARCHAR2
16:21:07 1972  ) AS
16:21:07 1973  -- VARIABLES
16:21:07 1974  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
16:21:07 1975  var_account_id	      NUMBER;
16:21:07 1976  -- EXCEPTIONS
16:21:07 1977  BAD_GROUP_ID	      EXCEPTION;
16:21:07 1978  BAD_CREDIT_CARD	      EXCEPTION;
16:21:07 1979  BAD_PAYPAL	      EXCEPTION;
16:21:07 1980  BAD_INSTRUMENT_TYPE    EXCEPTION;
16:21:07 1981  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 1982  BEGIN
16:21:07 1983  
16:21:07 1984  	 -- get account id
16:21:07 1985  	 BEGIN
16:21:07 1986  	   SELECT
16:21:07 1987  	     ACCOUNT.ID into var_account_id
16:21:07 1988  	   FROM
16:21:07 1989  	     ACCOUNT
16:21:07 1990  	   WHERE
16:21:07 1991  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1992  	   EXCEPTION
16:21:07 1993  	     WHEN NO_DATA_FOUND THEN
16:21:07 1994  	       RAISE BAD_GROUP_ID;
16:21:07 1995  	 END;
16:21:07 1996  
16:21:07 1997  	 -- Chech that given instrument exists
16:21:07 1998  	 IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
16:21:07 1999  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 2000  	     RAISE BAD_CREDIT_CARD;
16:21:07 2001  	   END IF;
16:21:07 2002  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
16:21:07 2003  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 2004  	     RAISE BAD_PAYPAL;
16:21:07 2005  	   END IF;
16:21:07 2006  	 ELSE
16:21:07 2007  	   RAISE BAD_INSTRUMENT_TYPE;
16:21:07 2008  	 END IF;
16:21:07 2009  
16:21:07 2010  	 -- update account information
16:21:07 2011  	 PROCS_ACCOUNT_CRU_V16.UPDATE_ACCOUNT(
16:21:07 2012  	   in_account_id	 => var_account_id,
16:21:07 2013  	   in_updated_by	 => in_updated_by,
16:21:07 2014  	   in_instrument_type_id => in_instrument_type_id,
16:21:07 2015  	   in_instrument_id	 => in_instrument_id
16:21:07 2016  	 );
16:21:07 2017  
16:21:07 2018  EXCEPTION
16:21:07 2019  WHEN BAD_GROUP_ID THEN
16:21:07 2020  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2021  	   SPROC_NAME, 'No such account');
16:21:07 2022  WHEN BAD_CREDIT_CARD THEN
16:21:07 2023  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2024  	   SPROC_NAME, 'Could not find credit card with given ID');
16:21:07 2025  WHEN BAD_PAYPAL THEN
16:21:07 2026  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2027  	   SPROC_NAME, 'Could not find paypal with given ID');
16:21:07 2028  WHEN BAD_INSTRUMENT_TYPE THEN
16:21:07 2029  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 2030  	   SPROC_NAME, 'Bad instrument type id');
16:21:07 2031  WHEN OTHERS THEN
16:21:07 2032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2033  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2034  END SET_DEF_FINANCIAL_INSTRUMENT;
16:21:07 2035  
16:21:07 2036  /******************************************************************************/
16:21:07 2037  
16:21:07 2038  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
16:21:07 2039  	 in_group_id IN NUMBER
16:21:07 2040  ) AS
16:21:07 2041  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
16:21:07 2042  -- VARIABLES
16:21:07 2043  var_account_id NUMBER;
16:21:07 2044  -- EXCEPTIONS
16:21:07 2045  BAD_GROUP_ID	 EXCEPTION;
16:21:07 2046  EXCEPTION_MESSAGE VARCHAR2(1024);
16:21:07 2047  BEGIN
16:21:07 2048  
16:21:07 2049  	 BEGIN
16:21:07 2050  	   SELECT
16:21:07 2051  	     ACCOUNT.ID into var_account_id
16:21:07 2052  	   FROM
16:21:07 2053  	     ACCOUNT
16:21:07 2054  	   WHERE
16:21:07 2055  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 2056  	   EXCEPTION
16:21:07 2057  	     WHEN NO_DATA_FOUND THEN
16:21:07 2058  	       RAISE BAD_GROUP_ID;
16:21:07 2059  	 END;
16:21:07 2060  
16:21:07 2061  	 PROCS_ACCOUNT_CRU_V16.UPDATE_DEF_FIN_INSTRUMENT(
16:21:07 2062  	   in_account_id => var_account_id,
16:21:07 2063  	   in_instrument_type_id => NULL,
16:21:07 2064  	   in_instrument_id => NULL,
16:21:07 2065  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
16:21:07 2066  	 );
16:21:07 2067  
16:21:07 2068  EXCEPTION
16:21:07 2069  WHEN BAD_GROUP_ID THEN
16:21:07 2070  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2071  	   SPROC_NAME, 'No such group id');
16:21:07 2072  WHEN OTHERS THEN
16:21:07 2073  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2074  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2075  END DEL_DEF_FINANCIAL_INSTRUMENT;
16:21:07 2076  
16:21:07 2077  /******************************************************************************/
16:21:07 2078  
16:21:07 2079  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:21:07 2080  	 in_credit_card_id IN  NUMBER,
16:21:07 2081  	 out_result_set    OUT SYS_REFCURSOR
16:21:07 2082  ) AS
16:21:07 2083  -- VARIABLES
16:21:07 2084  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
16:21:07 2085  temp_cc_count NUMBER;
16:21:07 2086  
16:21:07 2087  -- EXCEPTIONS
16:21:07 2088  BAD_CREDIT_CARD_ID EXCEPTION;
16:21:07 2089  BEGIN
16:21:07 2090  
16:21:07 2091  	 -- Check that credit card exists
16:21:07 2092  	 SELECT
16:21:07 2093  	   COUNT(*) into temp_cc_count
16:21:07 2094  	 FROM
16:21:07 2095  	   CREDIT_CARD
16:21:07 2096  	 WHERE
16:21:07 2097  	   CREDIT_CARD.ID = in_credit_card_id;
16:21:07 2098  	 IF temp_cc_count = 0 THEN
16:21:07 2099  	   RAISE BAD_CREDIT_CARD_ID;
16:21:07 2100  	 END IF;
16:21:07 2101  
16:21:07 2102  	 -- Get data
16:21:07 2103  	 OPEN out_result_set FOR
16:21:07 2104  	 SELECT
16:21:07 2105  	   CREDIT_CARD.ID,
16:21:07 2106  	   CREDIT_CARD.ACCOUNT_ID,
16:21:07 2107  	   CREDIT_CARD.INSTRUMENT_NAME,
16:21:07 2108  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
16:21:07 2109  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
16:21:07 2110  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
16:21:07 2111  	   CREDIT_CARD.STATE,
16:21:07 2112  	   CREDIT_CARD.CITY,
16:21:07 2113  	   CREDIT_CARD.POSTAL_CODE,
16:21:07 2114  	   CREDIT_CARD.COUNTRY,
16:21:07 2115  	   CREDIT_CARD.LAST_FOUR_CC,
16:21:07 2116  	   CREDIT_CARD.EXPIRATION_DATE,
16:21:07 2117  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
16:21:07 2118  	   CREDIT_CARD.SECRET_TOKEN,
16:21:07 2119  	   CREDIT_CARD.CREATE_DATE,
16:21:07 2120  	   CREDIT_CARD.CREATED_BY,
16:21:07 2121  	   CREDIT_CARD.UPDATE_DATE,
16:21:07 2122  	   CREDIT_CARD.UPDATED_BY,
16:21:07 2123  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
16:21:07 2124  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
16:21:07 2125  	   CREDIT_CARD.PRIVATE_LAST_NAME,
16:21:07 2126  	       CREDIT_CARD.CHASE_PROFILE_ID
16:21:07 2127  	 FROM
16:21:07 2128  	   CREDIT_CARD
16:21:07 2129  	 WHERE
16:21:07 2130  	   CREDIT_CARD.ID = in_credit_card_id;
16:21:07 2131  
16:21:07 2132  EXCEPTION
16:21:07 2133  WHEN BAD_CREDIT_CARD_ID THEN
16:21:07 2134  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2135  	   SPROC_NAME, 'No such credit card');
16:21:07 2136  WHEN OTHERS THEN
16:21:07 2137  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2138  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2139  END GET_CREDIT_CARD_BY_ID;
16:21:07 2140  
16:21:07 2141  /******************************************************************************/
16:21:07 2142  
16:21:07 2143  PROCEDURE GET_PAYPAL_BY_ID (
16:21:07 2144  	 in_paypal_id	IN  NUMBER,
16:21:07 2145  	 out_result_set OUT SYS_REFCURSOR
16:21:07 2146  ) AS
16:21:07 2147  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
16:21:07 2148  -- VARIABLES
16:21:07 2149  temp_pp_count NUMBER;
16:21:07 2150  -- EXCEPTIONS
16:21:07 2151  BAD_PAYPAL_ID EXCEPTION;
16:21:07 2152  BEGIN
16:21:07 2153  
16:21:07 2154  	 -- Check that credit card exists
16:21:07 2155  	 SELECT
16:21:07 2156  	   COUNT(*) into temp_pp_count
16:21:07 2157  	 FROM
16:21:07 2158  	   PAYPAL
16:21:07 2159  	 WHERE
16:21:07 2160  	   PAYPAL.ID = in_paypal_id;
16:21:07 2161  	 IF temp_pp_count = 0 THEN
16:21:07 2162  	   RAISE BAD_PAYPAL_ID;
16:21:07 2163  	 END IF;
16:21:07 2164  
16:21:07 2165  	 OPEN out_result_set FOR
16:21:07 2166  	 SELECT
16:21:07 2167  	   ID,
16:21:07 2168  	   ACCOUNT_ID,
16:21:07 2169  	   INSTRUMENT_NAME,
16:21:07 2170  	   PRIVATE_EMAIL_ADDRESS,
16:21:07 2171  	   CREATE_DATE,
16:21:07 2172  	   CREATED_BY,
16:21:07 2173  	   UPDATE_DATE,
16:21:07 2174  	   UPDATED_BY,
16:21:07 2175  	   PAYPAL_STATUS_ID,
16:21:07 2176  	   PRIVATE_STREET_ADDRESS,
16:21:07 2177  	   PRIVATE_STREET_ADDRESS2,
16:21:07 2178  	   STATE,
16:21:07 2179  	   CITY,
16:21:07 2180  	   POSTAL_CODE,
16:21:07 2181  	   COUNTRY,
16:21:07 2182  	   EXPIRATION_DATE,
16:21:07 2183  	   SECRET_TOKEN
16:21:07 2184  	 FROM
16:21:07 2185  	   PAYPAL
16:21:07 2186  	 WHERE
16:21:07 2187  	   ID = in_paypal_id;
16:21:07 2188  
16:21:07 2189  EXCEPTION
16:21:07 2190  WHEN BAD_PAYPAL_ID THEN
16:21:07 2191  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2192  	   SPROC_NAME, 'No such paypal');
16:21:07 2193  WHEN OTHERS THEN
16:21:07 2194  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2195  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2196  END GET_PAYPAL_BY_ID;
16:21:07 2197  
16:21:07 2198  /******************************************************************************/
16:21:07 2199  
16:21:07 2200  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
16:21:07 2201  /*
16:21:07 2202  	 Returns GLOBAL_CONSTANTS_V16.TRUE if system can disable credit card
16:21:07 2203  	 GLOBAL_CONSTANTS_V16.FALSE else
16:21:07 2204  */
16:21:07 2205  	 in_credit_card_id NUMBER
16:21:07 2206  ) RETURN NUMBER AS
16:21:07 2207  BEGIN
16:21:07 2208  	 -- STUB
16:21:07 2209  	 RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 2210  END F_CAN_DISABLE_CREDIT_CARD;
16:21:07 2211  
16:21:07 2212  /******************************************************************************/
16:21:07 2213  
16:21:07 2214  PROCEDURE GET_PURCHASED_GCERTIFICATES (
16:21:07 2215  	 in_group_id	IN NUMBER,
16:21:07 2216  	 out_result_set OUT SYS_REFCURSOR
16:21:07 2217  ) AS
16:21:07 2218  -- VARIABLES
16:21:07 2219  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
16:21:07 2220  var_account_id NUMBER;
16:21:07 2221  -- EXCEPTIONS
16:21:07 2222  BAD_GROUP_ID EXCEPTION;
16:21:07 2223  BEGIN
16:21:07 2224  
16:21:07 2225  	 BEGIN
16:21:07 2226  	   SELECT
16:21:07 2227  	     ACCOUNT.ID into var_account_id
16:21:07 2228  	   FROM
16:21:07 2229  	     ACCOUNT
16:21:07 2230  	   WHERE
16:21:07 2231  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 2232  	   EXCEPTION
16:21:07 2233  	     WHEN NO_DATA_FOUND THEN
16:21:07 2234  	       RAISE BAD_GROUP_ID;
16:21:07 2235  	 END;
16:21:07 2236  
16:21:07 2237  	 OPEN out_result_set FOR
16:21:07 2238  	 SELECT
16:21:07 2239  	   GIFT_CERTIFICATE.CODE,
16:21:07 2240  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
16:21:07 2241  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
16:21:07 2242  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
16:21:07 2243  	   GIFT_CERTIFICATE.SENDER_EMAIL,
16:21:07 2244  	   GIFT_CERTIFICATE.SENDER_NAME,
16:21:07 2245  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
16:21:07 2246  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
16:21:07 2247  	   GIFT_CERTIFICATE.PURCHASE_DATE,
16:21:07 2248  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
16:21:07 2249  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
16:21:07 2250  	 FROM
16:21:07 2251  	   GIFT_CERTIFICATE
16:21:07 2252  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 2253  	 WHERE
16:21:07 2254  	   ROWNUM <= 100 AND
16:21:07 2255  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
16:21:07 2256  
16:21:07 2257  EXCEPTION
16:21:07 2258  WHEN BAD_GROUP_ID THEN
16:21:07 2259  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2260  	   SPROC_NAME, 'No such group id');
16:21:07 2261  WHEN OTHERS THEN
16:21:07 2262  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2263  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2264  END GET_PURCHASED_GCERTIFICATES;
16:21:07 2265  
16:21:07 2266  /******************************************************************************/
16:21:07 2267  
16:21:07 2268  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
16:21:07 2269  	 in_gift_certificate_id IN NUMBER,
16:21:07 2270  	 in_charge_id		IN NUMBER,
16:21:07 2271  	 out_result		OUT NUMBER
16:21:07 2272  ) AS
16:21:07 2273  -- VARIABLES
16:21:07 2274  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
16:21:07 2275  var_invoice_id	    NUMBER;
16:21:07 2276  var_offer_chain_id   NUMBER;
16:21:07 2277  var_offer_chain_s_id NUMBER;
16:21:07 2278  -- EXCEPTIONS
16:21:07 2279  BAD_CHARGE_ID		 EXCEPTION;
16:21:07 2280  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
16:21:07 2281  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
16:21:07 2282  BEGIN
16:21:07 2283  
16:21:07 2284  	 BEGIN
16:21:07 2285  	   SELECT
16:21:07 2286  	     CHARGE.INVOICE_ID into var_invoice_id
16:21:07 2287  	   FROM
16:21:07 2288  	     CHARGE
16:21:07 2289  	   WHERE
16:21:07 2290  	     CHARGE.ID = in_charge_id;
16:21:07 2291  	   EXCEPTION
16:21:07 2292  	     WHEN NO_DATA_FOUND THEN
16:21:07 2293  	       RAISE BAD_CHARGE_ID;
16:21:07 2294  	 END;
16:21:07 2295  
16:21:07 2296  	 BEGIN
16:21:07 2297  	   SELECT
16:21:07 2298  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
16:21:07 2299  	   FROM
16:21:07 2300  	     GIFT_CERTIFICATE
16:21:07 2301  	   WHERE
16:21:07 2302  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
16:21:07 2303  	   EXCEPTION
16:21:07 2304  	     WHEN NO_DATA_FOUND THEN
16:21:07 2305  	       RAISE BAD_GIFT_CERTIFICATE_ID;
16:21:07 2306  	 END;
16:21:07 2307  
16:21:07 2308  	 BEGIN
16:21:07 2309  	   SELECT
16:21:07 2310  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
16:21:07 2311  	   FROM
16:21:07 2312  	     SUBSCRIPTION
16:21:07 2313  	   WHERE
16:21:07 2314  	     SUBSCRIPTION.ID IN (
16:21:07 2315  	       SELECT DISTINCT
16:21:07 2316  		 LICENSE.SUBSCRIPTION_ID
16:21:07 2317  	       FROM
16:21:07 2318  		 LICENSE
16:21:07 2319  	       WHERE
16:21:07 2320  		 LICENSE.INVOICE_ID = var_invoice_id
16:21:07 2321  	     );
16:21:07 2322  	   EXCEPTION
16:21:07 2323  	     WHEN NO_DATA_FOUND THEN
16:21:07 2324  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
16:21:07 2325  	 END;
16:21:07 2326  
16:21:07 2327  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
16:21:07 2328  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 2329  	 ELSE
16:21:07 2330  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
16:21:07 2331  	 END IF;
16:21:07 2332  
16:21:07 2333  EXCEPTION
16:21:07 2334  WHEN BAD_CHARGE_ID THEN
16:21:07 2335  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2336  	   SPROC_NAME, 'No such charge');
16:21:07 2337  WHEN BAD_GIFT_CERTIFICATE_ID THEN
16:21:07 2338  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2339  	   SPROC_NAME, 'No such gift certificate');
16:21:07 2340  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
16:21:07 2341  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2342  	   SPROC_NAME, 'Could not find subscription for given charge');
16:21:07 2343  WHEN OTHERS THEN
16:21:07 2344  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2345  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2346  END IS_GCERT_FOR_PROPER_OFFER;
16:21:07 2347  
16:21:07 2348  /******************************************************************************/
16:21:07 2349  
16:21:07 2350  FUNCTION IS_CREDIT_CARD_EXISTS (
16:21:07 2351  /*
16:21:07 2352  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
16:21:07 2353  GLOBAL_CONSTANTS_V16.FALSE - else
16:21:07 2354  */
16:21:07 2355  	 in_credit_card_id IN NUMBER
16:21:07 2356  ) RETURN NUMBER AS
16:21:07 2357  -- VARIABLES
16:21:07 2358  var_cc_count NUMBER;
16:21:07 2359  BEGIN
16:21:07 2360  	 SELECT
16:21:07 2361  	   COUNT(*) into var_cc_count
16:21:07 2362  	 FROM
16:21:07 2363  	   CREDIT_CARD
16:21:07 2364  	 WHERE
16:21:07 2365  	   CREDIT_CARD.ID = in_credit_card_id;
16:21:07 2366  
16:21:07 2367  	 IF var_cc_count = 0 THEN
16:21:07 2368  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:07 2369  	 ELSE
16:21:07 2370  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 2371  	 END IF;
16:21:07 2372  
16:21:07 2373  END IS_CREDIT_CARD_EXISTS;
16:21:07 2374  
16:21:07 2375  /******************************************************************************/
16:21:07 2376  
16:21:07 2377  FUNCTION IS_PAYPAL_EXISTS (
16:21:07 2378  /*
16:21:07 2379  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
16:21:07 2380  GLOBAL_CONSTANTS_V16.FALSE - else
16:21:07 2381  */
16:21:07 2382  	 in_paypal_id IN NUMBER
16:21:07 2383  ) RETURN NUMBER AS
16:21:07 2384  -- VARIABLES
16:21:07 2385  var_pp_count NUMBER;
16:21:07 2386  BEGIN
16:21:07 2387  	 SELECT
16:21:07 2388  	   COUNT(*) into var_pp_count
16:21:07 2389  	 FROM
16:21:07 2390  	   PAYPAL
16:21:07 2391  	 WHERE
16:21:07 2392  	   PAYPAL.ID = in_paypal_id;
16:21:07 2393  
16:21:07 2394  	 IF var_pp_count = 0 THEN
16:21:07 2395  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:07 2396  	 ELSE
16:21:07 2397  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 2398  	 END IF;
16:21:07 2399  
16:21:07 2400  END IS_PAYPAL_EXISTS;
16:21:07 2401  
16:21:07 2402  /******************************************************************************/
16:21:07 2403  
16:21:07 2404  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
16:21:07 2405  /*
16:21:07 2406  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
16:21:07 2407  GLOBAL_CONSTANTS_V16.FALSE - else
16:21:07 2408  */
16:21:07 2409  	 in_gift_certificate_id IN NUMBER
16:21:07 2410  ) RETURN NUMBER AS
16:21:07 2411  -- VARIABLES
16:21:07 2412  var_gc_count NUMBER;
16:21:07 2413  BEGIN
16:21:07 2414  	 SELECT
16:21:07 2415  	   COUNT(*) into var_gc_count
16:21:07 2416  	 FROM
16:21:07 2417  	   GIFT_CERTIFICATE
16:21:07 2418  	 WHERE
16:21:07 2419  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
16:21:07 2420  
16:21:07 2421  	 IF var_gc_count = 0 THEN
16:21:07 2422  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
16:21:07 2423  	 ELSE
16:21:07 2424  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 2425  	 END IF;
16:21:07 2426  
16:21:07 2427  END IS_GIFT_CERTIFICATE_EXISTS;
16:21:07 2428  
16:21:07 2429  /******************************************************************************/
16:21:07 2430  
16:21:07 2431  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
16:21:07 2432  	 in_credit_card_id IN NUMBER,
16:21:07 2433  	 out_group_id	   OUT NUMBER
16:21:07 2434  ) AS
16:21:07 2435  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
16:21:07 2436  BEGIN
16:21:07 2437  	 SELECT
16:21:07 2438  	   ACCOUNT.GROUP_ID into out_group_id
16:21:07 2439  	 FROM
16:21:07 2440  	   CREDIT_CARD
16:21:07 2441  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
16:21:07 2442  	 WHERE
16:21:07 2443  	   CREDIT_CARD.ID = in_credit_card_id;
16:21:07 2444  EXCEPTION
16:21:07 2445  WHEN NO_DATA_FOUND THEN
16:21:07 2446  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2447  	   SPROC_NAME, 'No such credit card');
16:21:07 2448  WHEN OTHERS THEN
16:21:07 2449  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2450  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2451  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
16:21:07 2452  
16:21:07 2453  /******************************************************************************/
16:21:07 2454  
16:21:07 2455  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
16:21:07 2456  	 in_paypal_id IN NUMBER,
16:21:07 2457  	 out_group_id OUT NUMBER
16:21:07 2458  ) AS
16:21:07 2459  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
16:21:07 2460  BEGIN
16:21:07 2461  	 SELECT
16:21:07 2462  	   ACCOUNT.GROUP_ID into out_group_id
16:21:07 2463  	 FROM
16:21:07 2464  	   PAYPAL
16:21:07 2465  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
16:21:07 2466  	 WHERE
16:21:07 2467  	   PAYPAL.ID = in_paypal_id;
16:21:07 2468  EXCEPTION
16:21:07 2469  WHEN NO_DATA_FOUND THEN
16:21:07 2470  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2471  	   SPROC_NAME, 'No such paypal');
16:21:07 2472  WHEN OTHERS THEN
16:21:07 2473  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2474  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2475  END GET_GROUP_ID_BY_PAYPAL_ID;
16:21:07 2476  
16:21:07 2477  /******************************************************************************/
16:21:07 2478  
16:21:07 2479  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
16:21:07 2480  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
16:21:07 2481  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
16:21:07 2482  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
16:21:07 2483  ) AS
16:21:07 2484  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
16:21:07 2485  -- EXCEPTIONS
16:21:07 2486  BAD_CREDIT_CARD_ID     EXCEPTION;
16:21:07 2487  BAD_STATUS_ID	      EXCEPTION;
16:21:07 2488  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 2489  BEGIN
16:21:07 2490  
16:21:07 2491  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
16:21:07 2492  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_INVALID
16:21:07 2493  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
16:21:07 2494  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_EXPIRED THEN
16:21:07 2495  	   RAISE BAD_STATUS_ID;
16:21:07 2496  	 END IF;
16:21:07 2497  
16:21:07 2498  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_CREDIT_CARD(
16:21:07 2499  	   in_credit_card_id	    => in_credit_card_id,
16:21:07 2500  	   in_updated_by	    => in_updated_by,
16:21:07 2501  	   in_credit_card_status_id => in_credit_card_status_id
16:21:07 2502  	 );
16:21:07 2503  
16:21:07 2504  	 IF SQL%ROWCOUNT = 0 THEN
16:21:07 2505  	   RAISE BAD_CREDIT_CARD_ID;
16:21:07 2506  	 END IF;
16:21:07 2507  
16:21:07 2508  EXCEPTION
16:21:07 2509  WHEN BAD_CREDIT_CARD_ID THEN
16:21:07 2510  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2511  	   SPROC_NAME, 'No such credit card');
16:21:07 2512  WHEN BAD_STATUS_ID THEN
16:21:07 2513  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 2514  	   SPROC_NAME, 'Bad credit card status id');
16:21:07 2515  WHEN OTHERS THEN
16:21:07 2516  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2517  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2518  END UPDATE_CREDIT_CARD_STATUS;
16:21:07 2519  
16:21:07 2520  /******************************************************************************/
16:21:07 2521  
16:21:07 2522  PROCEDURE UPDATE_PAYPAL_STATUS (
16:21:07 2523  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
16:21:07 2524  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
16:21:07 2525  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
16:21:07 2526  ) AS
16:21:07 2527  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
16:21:07 2528  -- EXCEPTIONS
16:21:07 2529  BAD_PAYPAL_ID	      EXCEPTION;
16:21:07 2530  BAD_STATUS_ID	      EXCEPTION;
16:21:07 2531  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 2532  BEGIN
16:21:07 2533  
16:21:07 2534  	 IF in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
16:21:07 2535  	   AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
16:21:07 2536  	   AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
16:21:07 2537  	   RAISE BAD_STATUS_ID;
16:21:07 2538  	 END IF;
16:21:07 2539  
16:21:07 2540  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_PAYPAL(
16:21:07 2541  	   in_paypal_id        => in_paypal_id,
16:21:07 2542  	   in_paypal_status_id => in_paypal_status_id,
16:21:07 2543  	   in_updated_by       => in_updated_by
16:21:07 2544  	 );
16:21:07 2545  
16:21:07 2546  	 IF SQL%ROWCOUNT = 0 THEN
16:21:07 2547  	   RAISE BAD_PAYPAL_ID;
16:21:07 2548  	 END IF;
16:21:07 2549  
16:21:07 2550  EXCEPTION
16:21:07 2551  WHEN BAD_PAYPAL_ID THEN
16:21:07 2552  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2553  	   SPROC_NAME, 'No such paypal');
16:21:07 2554  WHEN BAD_STATUS_ID THEN
16:21:07 2555  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 2556  	   SPROC_NAME, 'Bad paypal status id');
16:21:07 2557  WHEN OTHERS THEN
16:21:07 2558  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2559  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2560  END UPDATE_PAYPAL_STATUS;
16:21:07 2561  
16:21:07 2562  /******************************************************************************/
16:21:07 2563  
16:21:07 2564  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
16:21:07 2565  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
16:21:07 2566  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
16:21:07 2567  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
16:21:07 2568  ) AS
16:21:07 2569  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
16:21:07 2570  -- EXCEPTIONS
16:21:07 2571  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
16:21:07 2572  BAD_STATUS_ID	       EXCEPTION;
16:21:07 2573  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:21:07 2574  BEGIN
16:21:07 2575  
16:21:07 2576  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
16:21:07 2577  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED THEN
16:21:07 2578  	   RAISE BAD_STATUS_ID;
16:21:07 2579  	 END IF;
16:21:07 2580  
16:21:07 2581  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE(
16:21:07 2582  	   in_gift_certificate_id	 => in_gift_certificate_id,
16:21:07 2583  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
16:21:07 2584  	   in_updated_by		 => in_updated_by
16:21:07 2585  	 );
16:21:07 2586  
16:21:07 2587  	 IF SQL%ROWCOUNT = 0 THEN
16:21:07 2588  	   RAISE BAD_GIFT_CERTIFICATE_ID;
16:21:07 2589  	 END IF;
16:21:07 2590  
16:21:07 2591  EXCEPTION
16:21:07 2592  WHEN BAD_GIFT_CERTIFICATE_ID THEN
16:21:07 2593  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2594  	   SPROC_NAME, 'No such gift certificate');
16:21:07 2595  WHEN BAD_STATUS_ID THEN
16:21:07 2596  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 2597  	   SPROC_NAME, 'Bad paypal status id');
16:21:07 2598  WHEN OTHERS THEN
16:21:07 2599  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2600  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2601  END UPDATE_GIFT_CERTIFICATE_STATUS;
16:21:07 2602  
16:21:07 2603  /******************************************************************************/
16:21:07 2604  
16:21:07 2605  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:21:07 2606  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:07 2607  	 out_result_set OUT SYS_REFCURSOR
16:21:07 2608  ) AS
16:21:07 2609  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
16:21:07 2610  -- VARIABLES
16:21:07 2611  temp_invoice_id NUMBER;
16:21:07 2612  -- EXCEPTIONS
16:21:07 2613  BAD_INVOICE_ID EXCEPTION;
16:21:07 2614  BEGIN
16:21:07 2615  
16:21:07 2616  	 BEGIN
16:21:07 2617  	   SELECT
16:21:07 2618  	     I.ID into temp_invoice_id
16:21:07 2619  	   FROM
16:21:07 2620  	     INVOICE I
16:21:07 2621  	   WHERE
16:21:07 2622  	     I.ID = in_invoice_id;
16:21:07 2623  	   EXCEPTION
16:21:07 2624  	     WHEN NO_DATA_FOUND THEN
16:21:07 2625  	       RAISE BAD_INVOICE_ID;
16:21:07 2626  	 END;
16:21:07 2627  
16:21:07 2628  	 OPEN out_result_set FOR
16:21:07 2629  	   SELECT
16:21:07 2630  	     gc.EXPIRATION_DATE,
16:21:07 2631  	     ch.name,
16:21:07 2632  	     ch.id offer_chain_id,
16:21:07 2633  	     gc.sender_email,
16:21:07 2634  	     gc.sender_name,
16:21:07 2635  	     gc.recipient_email,
16:21:07 2636  	     gc.recipient_name,
16:21:07 2637  	     gc.purchase_date,
16:21:07 2638  	     gc.redemption_date,
16:21:07 2639  	     gc.purchaser_group_id,
16:21:07 2640  	     gc.redeemer_group_id,
16:21:07 2641  	     gc.code,
16:21:07 2642  	     gc.gift_message,
16:21:07 2643  	     gc.recipient_notify_date,
16:21:07 2644  	     gc.id
16:21:07 2645  	   FROM
16:21:07 2646  	     GIFT_CERTIFICATE gc
16:21:07 2647  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
16:21:07 2648  	   WHERE
16:21:07 2649  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
16:21:07 2650  
16:21:07 2651  EXCEPTION
16:21:07 2652  WHEN BAD_INVOICE_ID THEN
16:21:07 2653  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2654  	   SPROC_NAME, 'No such invoice');
16:21:07 2655  WHEN OTHERS THEN
16:21:07 2656  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2658  END GET_GC_BY_PURCH_INVOICE_ID;
16:21:07 2659  
16:21:07 2660  
16:21:07 2661  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
16:21:07 2662  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:07 2663  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
16:21:07 2664  ) AS
16:21:07 2665  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
16:21:07 2666  -- VARIABLES
16:21:07 2667  temp_invoice_id NUMBER;
16:21:07 2668  -- EXCEPTIONS
16:21:07 2669  BAD_INVOICE_ID EXCEPTION;
16:21:07 2670  BEGIN
16:21:07 2671  
16:21:07 2672  	 BEGIN
16:21:07 2673  	   SELECT
16:21:07 2674  	     I.ID into temp_invoice_id
16:21:07 2675  	   FROM
16:21:07 2676  	     INVOICE I
16:21:07 2677  	   WHERE
16:21:07 2678  	     I.ID = in_invoice_id;
16:21:07 2679  	   EXCEPTION
16:21:07 2680  	     WHEN NO_DATA_FOUND THEN
16:21:07 2681  	       RAISE BAD_INVOICE_ID;
16:21:07 2682  	 END;
16:21:07 2683  
16:21:07 2684  	 BEGIN
16:21:07 2685  	   SELECT
16:21:07 2686  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
16:21:07 2687  	   FROM
16:21:07 2688  	     GIFT_CERTIFICATE
16:21:07 2689  	   WHERE
16:21:07 2690  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
16:21:07 2691  	   EXCEPTION
16:21:07 2692  	     WHEN NO_DATA_FOUND THEN
16:21:07 2693  	       out_gift_certificate_id := NULL;
16:21:07 2694  	 END;
16:21:07 2695  
16:21:07 2696  EXCEPTION
16:21:07 2697  WHEN BAD_INVOICE_ID THEN
16:21:07 2698  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2699  	   SPROC_NAME, 'No such invoice');
16:21:07 2700  WHEN OTHERS THEN
16:21:07 2701  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2702  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2703  END GET_GC_ID_BY_PURCH_INVOICE_ID;
16:21:07 2704  
16:21:07 2705  /******************************************************************************/
16:21:07 2706  
16:21:07 2707  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
16:21:07 2708  	 /*in_group_id		      IN NUMBER  -- TODO: should we pass group_id here?*/
16:21:07 2709  	 in_old_fin_instrument_id   IN NUMBER,
16:21:07 2710  	 in_old_fin_instrument_type IN NUMBER,
16:21:07 2711  	 in_new_fin_instrument_id   IN NUMBER,
16:21:07 2712  	 in_new_fin_instrument_type IN NUMBER,
16:21:07 2713  	 in_updated_by		    IN VARCHAR2
16:21:07 2714  ) AS
16:21:07 2715  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
16:21:07 2716  -- variables
16:21:07 2717  temp_out_transaction_id NUMBER;
16:21:07 2718  temp_out_charge_id      NUMBER;
16:21:07 2719  var_accounts_count      NUMBER;
16:21:07 2720  -- EXCEPTIONS
16:21:07 2721  BAD_OLD_CC   EXCEPTION;
16:21:07 2722  BAD_OLD_PP   EXCEPTION;
16:21:07 2723  BAD_OLD_TYPE EXCEPTION;
16:21:07 2724  BAD_NEW_CC   EXCEPTION;
16:21:07 2725  BAD_NEW_PP   EXCEPTION;
16:21:07 2726  BAD_NEW_TYPE EXCEPTION;
16:21:07 2727  DIFFERENT_OWNERS EXCEPTION;
16:21:07 2728  BEGIN
16:21:07 2729  
16:21:07 2730  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
16:21:07 2731  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 2732  	     -- throw exception: bad old credit card
16:21:07 2733  	     RAISE BAD_OLD_CC;
16:21:07 2734  	   END IF;
16:21:07 2735  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
16:21:07 2736  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 2737  	     -- throw exception: bad old paypal
16:21:07 2738  	     RAISE BAD_OLD_PP;
16:21:07 2739  	   END IF;
16:21:07 2740  	 ELSE
16:21:07 2741  	   -- throw exception: bad instrument type
16:21:07 2742  	   RAISE BAD_OLD_TYPE;
16:21:07 2743  	 END IF;
16:21:07 2744  
16:21:07 2745  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
16:21:07 2746  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 2747  	     -- throw exception: bad new credit card
16:21:07 2748  	     RAISE BAD_NEW_CC;
16:21:07 2749  	   END IF;
16:21:07 2750  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
16:21:07 2751  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 2752  	     -- throw exception: bad new paypal
16:21:07 2753  	     RAISE BAD_NEW_PP;
16:21:07 2754  	   END IF;
16:21:07 2755  	 ELSE
16:21:07 2756  	   -- throw exception: bad new instrument type
16:21:07 2757  	   RAISE BAD_NEW_TYPE;
16:21:07 2758  	 END IF;
16:21:07 2759  
16:21:07 2760  	 -- Check that owner of both instruments - same man
16:21:07 2761  
16:21:07 2762  	 SELECT count(1) into var_accounts_count FROM (
16:21:07 2763  	   SELECT
16:21:07 2764  	     CC.ACCOUNT_ID
16:21:07 2765  	   FROM
16:21:07 2766  	     CREDIT_CARD CC
16:21:07 2767  	   WHERE
16:21:07 2768  	     (
16:21:07 2769  	       CC.ID = in_old_fin_instrument_id
16:21:07 2770  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
16:21:07 2771  	     )
16:21:07 2772  	     OR
16:21:07 2773  	     (
16:21:07 2774  	       CC.ID = in_new_fin_instrument_id
16:21:07 2775  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
16:21:07 2776  	     )
16:21:07 2777  	   UNION
16:21:07 2778  	   SELECT
16:21:07 2779  	     PP.ACCOUNT_ID
16:21:07 2780  	   FROM
16:21:07 2781  	     PAYPAL PP
16:21:07 2782  	   WHERE
16:21:07 2783  	     (
16:21:07 2784  	       PP.ID = in_old_fin_instrument_id
16:21:07 2785  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
16:21:07 2786  	     )
16:21:07 2787  	     OR
16:21:07 2788  	     (
16:21:07 2789  	       PP.ID = in_new_fin_instrument_id
16:21:07 2790  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
16:21:07 2791  	     )
16:21:07 2792  	 )
16:21:07 2793  	 WHERE
16:21:07 2794  	   account_id IS NOT NULL;
16:21:07 2795  
16:21:07 2796  	 IF (var_accounts_count > 1) THEN
16:21:07 2797  	   -- Throw exception: different owners of instruments
16:21:07 2798  	   RAISE DIFFERENT_OWNERS;
16:21:07 2799  	 END IF;
16:21:07 2800  
16:21:07 2801  	 FOR f_sub IN (
16:21:07 2802  	   select
16:21:07 2803  	     s.id
16:21:07 2804  	   FROM
16:21:07 2805  	     subscription s
16:21:07 2806  	   WHERE
16:21:07 2807  	     (
16:21:07 2808  	       s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE OR
16:21:07 2809  	       s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
16:21:07 2810  	     )
16:21:07 2811  	     AND
16:21:07 2812  	     s.instrument_type_id = in_old_fin_instrument_type AND
16:21:07 2813  	     s.instrument_id = in_old_fin_instrument_id
16:21:07 2814  	 ) LOOP
16:21:07 2815  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
16:21:07 2816  	     in_subscription_id => f_sub.id,
16:21:07 2817  	     in_instrument_type_id => in_new_fin_instrument_type,
16:21:07 2818  	     in_instrument_id => in_new_fin_instrument_id,
16:21:07 2819  	     in_updated_by => in_updated_by
16:21:07 2820  	   );
16:21:07 2821  	 END LOOP;
16:21:07 2822  
16:21:07 2823  	 FOR f_open_charge IN (
16:21:07 2824  	   select
16:21:07 2825  	     ch.id,
16:21:07 2826  	     ch.invoice_id,
16:21:07 2827  	     ch.transaction_id,
16:21:07 2828  	     ch.charge_amount
16:21:07 2829  	   FROM
16:21:07 2830  	     charge ch
16:21:07 2831  	   WHERE
16:21:07 2832  	     ch.instrument_type_id = in_old_fin_instrument_type
16:21:07 2833  	     AND ch.instrument_id = in_old_fin_instrument_id
16:21:07 2834  	     AND ch.charge_status_id = GLOBAL_STATUSES_V16.CHARGE_OPENED
16:21:07 2835  	 ) LOOP
16:21:07 2836  
16:21:07 2837  	   FOR f_pending_transaction IN (
16:21:07 2838  	     select
16:21:07 2839  	       id, transaction_amount, order_id, is_refund
16:21:07 2840  	     from
16:21:07 2841  	       transaction
16:21:07 2842  	     where
16:21:07 2843  	       id = f_open_charge.transaction_id
16:21:07 2844  	       and transaction_status_id = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
16:21:07 2845  	   ) LOOP
16:21:07 2846  	     PROCS_TRANSACTION_V16.CREATE_TRANSACTION (
16:21:07 2847  	       in_transaction_id => NULL,
16:21:07 2848  	       in_status_id  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
16:21:07 2849  	       in_amount     => f_pending_transaction.transaction_amount,
16:21:07 2850  	       in_created_by => in_updated_by,
16:21:07 2851  	       in_order_id   => null,
16:21:07 2852  	       in_is_refund  => f_pending_transaction.is_refund,
16:21:07 2853  	       out_transaction_id => temp_out_transaction_id
16:21:07 2854  	     );
16:21:07 2855  
16:21:07 2856  	     PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
16:21:07 2857  	       in_transaction_id => f_pending_transaction.id,
16:21:07 2858  	       in_updated_by	 => in_updated_by,
16:21:07 2859  	       in_transaction_status_id  => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
16:21:07 2860  	     );
16:21:07 2861  
16:21:07 2862  	     -- Create new charge
16:21:07 2863  	     PROCS_CHARGE_V16.CREATE_CHARGE (
16:21:07 2864  	       in_invoice_id	     => f_open_charge.invoice_id,
16:21:07 2865  	       in_transaction_id     => temp_out_transaction_id,
16:21:07 2866  	       in_instrument_type_id => in_new_fin_instrument_type,
16:21:07 2867  	       in_instrument_id      => in_new_fin_instrument_id,
16:21:07 2868  	       in_charge_amount      => f_open_charge.charge_amount,
16:21:07 2869  	       in_created_by	     => in_updated_by,
16:21:07 2870  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
16:21:07 2871  	       out_charge_id	     => temp_out_charge_id
16:21:07 2872  	     );
16:21:07 2873  	     -- Cancel old charge
16:21:07 2874  	     PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
16:21:07 2875  	       in_charge_id	   => f_open_charge.id,
16:21:07 2876  	       in_updated_by	   => in_updated_by,
16:21:07 2877  	       in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
16:21:07 2878  	     );
16:21:07 2879  
16:21:07 2880  	     PROCS_ADJUSTMENTS_V16.UPDATE_INVOICE_ADJUSTMENT(
16:21:07 2881  	       IN_INVOICE_ID => f_open_charge.invoice_id,
16:21:07 2882  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
16:21:07 2883  	       IN_CHARGE_ID => temp_out_charge_id,
16:21:07 2884  	       IN_UPDATED_BY => in_updated_by
16:21:07 2885  	     );
16:21:07 2886  
16:21:07 2887  	   END LOOP;
16:21:07 2888  	 END LOOP;
16:21:07 2889  
16:21:07 2890  EXCEPTION
16:21:07 2891  WHEN BAD_OLD_CC THEN
16:21:07 2892  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2893  	   SPROC_NAME, 'Trying to switch from non existing credit card');
16:21:07 2894  WHEN BAD_OLD_PP THEN
16:21:07 2895  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2896  	   SPROC_NAME, 'Trying to switch from non existing paypal');
16:21:07 2897  WHEN BAD_OLD_TYPE THEN
16:21:07 2898  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2899  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
16:21:07 2900  WHEN BAD_NEW_CC THEN
16:21:07 2901  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2902  	   SPROC_NAME, 'Trying to switch to non existing credit card');
16:21:07 2903  WHEN BAD_NEW_PP THEN
16:21:07 2904  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2905  	   SPROC_NAME, 'Trying to switch to non existing paypal');
16:21:07 2906  WHEN BAD_NEW_TYPE THEN
16:21:07 2907  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 2908  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
16:21:07 2909  WHEN DIFFERENT_OWNERS THEN
16:21:07 2910  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 2911  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
16:21:07 2912  WHEN OTHERS THEN
16:21:07 2913  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 2914  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 2915  END SWITCH_FINANCIAL_INSTRUMENT;
16:21:07 2916  
16:21:07 2917  END PROCS_FIN_INSTRUMENTS_V16;
16:21:07 2918  .
16:21:07 SQL> /

Package body created.

Elapsed: 00:00:00.26
16:21:07 SQL> 
16:21:07 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V16" AS
16:21:07   2  
16:21:07   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
16:21:07   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
16:21:07   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
16:21:07   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:07   7  ) AS
16:21:07   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
16:21:07   9  BEGIN
16:21:07  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_SUBSCRIPTION_SHARE (
16:21:07  11  	  in_id 		=> in_sub_share_id,
16:21:07  12  	  in_needs_entitlements => in_need_entitlements,
16:21:07  13  	  in_updated_by 	=> in_updater
16:21:07  14  	);
16:21:07  15  END UPDATE_SS_NEED_ENTITLEMENTS;
16:21:07  16  
16:21:07  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
16:21:07  18  	out_result_set OUT SYS_REFCURSOR
16:21:07  19  ) AS
16:21:07  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
16:21:07  21  BEGIN
16:21:07  22  	OPEN out_result_set FOR
16:21:07  23  	SELECT * FROM (
16:21:07  24  	  SELECT DISTINCT
16:21:07  25  	    ga.Subscription_Id,
16:21:07  26  	    A.Group_Id Borrower_Group_Id,
16:21:07  27  	    L.Offer_Id,
16:21:07  28  	    ss.id Subscription_Share_id
16:21:07  29  	  FROM
16:21:07  30  	    Subscription_Share Ss,
16:21:07  31  	    Group_Account Ga,
16:21:07  32  	    Account A,
16:21:07  33  	    License l
16:21:07  34  	  WHERE
16:21:07  35  	    Ss.Group_Account_Id        = ga.id
16:21:07  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V16.TRUE
16:21:07  37  	    AND Ss.Borrower_Account_Id = A.Id
16:21:07  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
16:21:07  39  	    AND ROWNUM <= 5000
16:21:07  40  	  ORDER BY dbms_random.value
16:21:07  41  ) WHERE
16:21:07  42  	ROWNUM <= 1000;
16:21:07  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
16:21:07  44  
16:21:07  45  PROCEDURE EXPIRE_SUB_SHARE(
16:21:07  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
16:21:07  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:07  48  ) AS
16:21:07  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
16:21:07  50  BEGIN
16:21:07  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_SUBSCRIPTION_SHARE (
16:21:07  52  	  in_id 	=> in_sub_share_id,
16:21:07  53  	  in_end_date	=> SYSDATE,
16:21:07  54  	  in_updated_by => in_updater,
16:21:07  55  	  in_needs_entitlements => 1
16:21:07  56  	);
16:21:07  57  END EXPIRE_SUB_SHARE;
16:21:07  58  
16:21:07  59  PROCEDURE EXPIRE_ALL_SHARES (
16:21:07  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
16:21:07  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:07  62  ) AS
16:21:07  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
16:21:07  64  BEGIN
16:21:07  65  	UPDATE SUBSCRIPTION_SHARE SET
16:21:07  66  	  END_DATE = SYSDATE,
16:21:07  67  	  UPDATED_BY = in_updated_by,
16:21:07  68  	  UPDATE_DATE = SYSDATE
16:21:07  69  	WHERE
16:21:07  70  	  GROUP_ACCOUNT_ID = in_group_account_id
16:21:07  71  	AND
16:21:07  72  	  SYSDATE < END_DATE;
16:21:07  73  EXCEPTION
16:21:07  74  	WHEN OTHERS THEN
16:21:07  75  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
16:21:07  77  END EXPIRE_ALL_SHARES;
16:21:07  78  
16:21:07  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
16:21:07  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
16:21:07  81  	in_start	 IN  NUMBER,
16:21:07  82  	in_end		 IN  NUMBER,
16:21:07  83  	in_expired	 IN  NUMBER,
16:21:07  84  	out_result_set	 OUT SYS_REFCURSOR,
16:21:07  85  	out_shares_count OUT NUMBER
16:21:07  86  ) AS
16:21:07  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
16:21:07  88  range_diff NUMBER := 0;
16:21:07  89  upper_bond_diff NUMBER := 0;
16:21:07  90  l_start NUMBER := 0;
16:21:07  91  l_end   NUMBER := 0;
16:21:07  92  BEGIN
16:21:07  93  	--Normalize the end points [START]
16:21:07  94  	IF (in_start IS NULL OR in_start < 0) Then
16:21:07  95  	  l_start := 0;
16:21:07  96  	ELSE
16:21:07  97  	  l_start := in_start;
16:21:07  98  	END IF;
16:21:07  99  
16:21:07 100  	IF (in_end IS NULL) Then
16:21:07 101  	  l_end := 11;
16:21:07 102  	ELSE
16:21:07 103  	  l_end := in_end;
16:21:07 104  	END IF;
16:21:07 105  
16:21:07 106  	l_start := l_start + 1;
16:21:07 107  	l_end	:= l_end   + 1;
16:21:07 108  
16:21:07 109  	range_diff := l_end - l_start;
16:21:07 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
16:21:07 111  
16:21:07 112  	IF (upper_bond_diff > 0) Then
16:21:07 113  	  l_end := l_end - upper_bond_diff;
16:21:07 114  	END IF;
16:21:07 115  	--Normalize the end points [END]
16:21:07 116  
16:21:07 117  	BEGIN
16:21:07 118  	  SELECT
16:21:07 119  	    COUNT(1) INTO out_shares_count
16:21:07 120  	  FROM
16:21:07 121  	    GROUP_ACCOUNT ga,
16:21:07 122  	    SUBSCRIPTION_SHARE ss,
16:21:07 123  	    ACCOUNT a
16:21:07 124  	  WHERE
16:21:07 125  	    a.GROUP_ID		= in_group_id AND
16:21:07 126  	    a.Id		= ss.borrower_account_id And
16:21:07 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
16:21:07 128  	END;
16:21:07 129  
16:21:07 130  	IF in_expired > 0 THEN
16:21:07 131  	BEGIN
16:21:07 132  	    OPEN out_result_set FOR
16:21:07 133  	    SELECT
16:21:07 134  	      *
16:21:07 135  	    FROM
16:21:07 136  	      (SELECT rownum rnum, q.*
16:21:07 137  	       FROM
16:21:07 138  		(SELECT
16:21:07 139  		   ga.SUBSCRIPTION_ID,
16:21:07 140  		   ss.START_DATE,
16:21:07 141  		   ss.END_DATE,
16:21:07 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
16:21:07 143  		 FROM
16:21:07 144  		   GROUP_ACCOUNT ga,
16:21:07 145  		   SUBSCRIPTION_SHARE ss,
16:21:07 146  		   ACCOUNT a,
16:21:07 147  		   SUBSCRIPTION s,
16:21:07 148  		   ACCOUNT a2
16:21:07 149  		 WHERE
16:21:07 150  		   a.GROUP_ID	       = in_group_id AND
16:21:07 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
16:21:07 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
16:21:07 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
16:21:07 154  		   s.ACCOUNT_ID        = a2.ID
16:21:07 155  		) Q
16:21:07 156  	      WHERE rownum <= l_end)
16:21:07 157  	    WHERE rnum >= l_Start;
16:21:07 158  	END;
16:21:07 159  	ELSE
16:21:07 160  	BEGIN
16:21:07 161  	    OPEN out_result_set FOR
16:21:07 162  	    SELECT
16:21:07 163  	      *
16:21:07 164  	    FROM
16:21:07 165  	      (SELECT rownum rnum, q.*
16:21:07 166  	       FROM
16:21:07 167  		(SELECT
16:21:07 168  		   ga.SUBSCRIPTION_ID,
16:21:07 169  		   ss.START_DATE,
16:21:07 170  		   ss.END_DATE,
16:21:07 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
16:21:07 172  		 FROM
16:21:07 173  		   GROUP_ACCOUNT ga,
16:21:07 174  		   SUBSCRIPTION_SHARE ss,
16:21:07 175  		   ACCOUNT a,
16:21:07 176  		   SUBSCRIPTION s,
16:21:07 177  		   ACCOUNT a2
16:21:07 178  		 WHERE
16:21:07 179  		   a.GROUP_ID	       = in_group_id AND
16:21:07 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
16:21:07 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
16:21:07 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
16:21:07 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
16:21:07 184  		   s.ACCOUNT_ID        = a2.ID
16:21:07 185  		) Q
16:21:07 186  	      WHERE rownum <= l_end)
16:21:07 187  	    WHERE rnum >= l_start;
16:21:07 188  	  END;
16:21:07 189  	END IF;
16:21:07 190  EXCEPTION
16:21:07 191  WHEN NO_DATA_FOUND THEN
16:21:07 192  	NULL;
16:21:07 193  WHEN OTHERS THEN
16:21:07 194  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
16:21:07 196  END SUB_SHARE_BY_GROUP_ID;
16:21:07 197  
16:21:07 198  PROCEDURE IS_VALID_IP_ADDRESS (
16:21:07 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:07 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:21:07 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:21:07 202  	out_is_valid	    OUT NUMBER
16:21:07 203  ) AS
16:21:07 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
16:21:07 205  BEGIN
16:21:07 206  	SELECT
16:21:07 207  	  COUNT(1) INTO out_is_valid
16:21:07 208  	FROM
16:21:07 209  	  GROUP_ACCOUNT_IP_RANGE,
16:21:07 210  	  GROUP_ACCOUNT,
16:21:07 211  	  SUBSCRIPTION,
16:21:07 212  	  OFFER_CHAIN
16:21:07 213  	WHERE
16:21:07 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
16:21:07 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:21:07 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
16:21:07 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
16:21:07 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
16:21:07 219  	 (
16:21:07 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
16:21:07 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
16:21:07 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
16:21:07 223  	 ) AND
16:21:07 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE;
16:21:07 225  EXCEPTION
16:21:07 226  WHEN OTHERS THEN
16:21:07 227  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
16:21:07 229  END IS_VALID_IP_ADDRESS;
16:21:07 230  
16:21:07 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
16:21:07 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:07 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:21:07 234  	out_is_valid	    OUT NUMBER
16:21:07 235  ) AS
16:21:07 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
16:21:07 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
16:21:07 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
16:21:07 239  BEGIN
16:21:07 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
16:21:07 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
16:21:07 242  
16:21:07 243  	SELECT
16:21:07 244  	  COUNT(1) INTO out_is_valid
16:21:07 245  	FROM
16:21:07 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
16:21:07 247  	  GROUP_ACCOUNT ga,
16:21:07 248  	  SUBSCRIPTION s,
16:21:07 249  	  OFFER_CHAIN oc
16:21:07 250  	WHERE
16:21:07 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
16:21:07 252  	  ga.SUBSCRIPTION_ID = s.ID AND
16:21:07 253  	  s.OFFER_CHAIN_ID = oc.ID AND
16:21:07 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
16:21:07 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
16:21:07 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
16:21:07 257  	  gaed.IS_ACTIVE = 1;
16:21:07 258  EXCEPTION
16:21:07 259  WHEN OTHERS THEN
16:21:07 260  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
16:21:07 262  END IS_VALID_EMAIL_DOMAIN;
16:21:07 263  
16:21:07 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
16:21:07 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
16:21:07 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
16:21:07 267  	out_Result_Set	       OUT Sys_Refcursor
16:21:07 268  ) AS
16:21:07 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
16:21:07 270  BEGIN
16:21:07 271  	BEGIN
16:21:07 272  	   OPEN out_result_set FOR
16:21:07 273  	   SELECT
16:21:07 274  	      ss.ID,
16:21:07 275  	      ss.GROUP_ACCOUNT_ID,
16:21:07 276  	      ss.BORROWER_ACCOUNT_ID,
16:21:07 277  	      ss.IP_ADDRESS,
16:21:07 278  	      ss.START_DATE,
16:21:07 279  	      ss.END_DATE,
16:21:07 280  	      ss.CREATED_BY,
16:21:07 281  	      ss.CREATE_DATE,
16:21:07 282  	      ss.UPDATED_BY,
16:21:07 283  	      ss.UPDATE_DATE,
16:21:07 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
16:21:07 285  	   FROM
16:21:07 286  	     SUBSCRIPTION_SHARE ss,
16:21:07 287  	     ACCOUNT a
16:21:07 288  	   WHERE
16:21:07 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
16:21:07 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
16:21:07 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
16:21:07 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
16:21:07 293  	END;
16:21:07 294  EXCEPTION
16:21:07 295  WHEN OTHERS THEN
16:21:07 296  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
16:21:07 298  END GET_SUBSCRIPTION_SHARE;
16:21:07 299  
16:21:07 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
16:21:07 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
16:21:07 302  	out_result_set	   OUT SYS_REFCURSOR
16:21:07 303  ) As
16:21:07 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
16:21:07 305  BEGIN
16:21:07 306  OPEN out_result_set FOR
16:21:07 307  	SELECT
16:21:07 308  	  ID,
16:21:07 309  	  SUBSCRIPTION_ID,
16:21:07 310  	  GROUP_NAME,
16:21:07 311  	  FIRST_NAME,
16:21:07 312  	  LAST_NAME,
16:21:07 313  	  EMAIL,
16:21:07 314  	  PHONE,
16:21:07 315  	  ORGANIZATION_TYPE,
16:21:07 316  	  SEATS,
16:21:07 317  	  SEAT_TTL_IN_HOURS,
16:21:07 318  	  CREATE_DATE,
16:21:07 319  	  CREATED_BY,
16:21:07 320  	  UPDATE_DATE,
16:21:07 321  	  UPDATED_BY
16:21:07 322  	FROM
16:21:07 323  	  GROUP_ACCOUNT
16:21:07 324  	Where
16:21:07 325  	  Subscription_Id = in_subscription_id;
16:21:07 326  EXCEPTION
16:21:07 327  WHEN OTHERS THEN
16:21:07 328  	Procs_Common_V16.Throw_Exception(APP_EXCEPTION_CODES_V16.Unknown_Error,
16:21:07 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 330  
16:21:07 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
16:21:07 332  
16:21:07 333  PROCEDURE CREATE_GROUP_ACCOUNT (
16:21:07 334  	in_subscription_id	 IN NUMBER,
16:21:07 335  	in_group_name		 IN VARCHAR2,
16:21:07 336  	in_first_name		 IN VARCHAR2,
16:21:07 337  	in_last_name		 IN VARCHAR2,
16:21:07 338  	in_email		 IN VARCHAR2,
16:21:07 339  	in_phone		 IN VARCHAR2,
16:21:07 340  	in_organization_type	 IN VARCHAR2,
16:21:07 341  	in_seats		 IN NUMBER,
16:21:07 342  	in_seat_ttl_in_hours	 IN NUMBER,
16:21:07 343  	in_ip			 IN NUMBER,
16:21:07 344  	in_created_by		 IN VARCHAR2
16:21:07 345  ) AS
16:21:07 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
16:21:07 347  BEGIN
16:21:07 348  
16:21:07 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.CREATE_GROUP_ACCOUNT(
16:21:07 350  	  in_subscription_id => in_subscription_id,
16:21:07 351  	  in_group_name => in_group_name,
16:21:07 352  	  in_first_name => in_first_name,
16:21:07 353  	  in_last_name => in_last_name,
16:21:07 354  	  in_email => in_email,
16:21:07 355  	  in_phone => in_phone,
16:21:07 356  	  in_organization_type => in_organization_type,
16:21:07 357  	  in_seats => in_seats,
16:21:07 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
16:21:07 359  	  in_ip => in_ip,
16:21:07 360  	  in_created_by => in_created_by
16:21:07 361  	);
16:21:07 362  
16:21:07 363  END CREATE_GROUP_ACCOUNT;
16:21:07 364  
16:21:07 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
16:21:07 366  	in_group_account_id IN NUMBER,
16:21:07 367  	in_start	    IN NUMBER,
16:21:07 368  	in_end		    IN NUMBER,
16:21:07 369  	out_Result_Set	    OUT Sys_Refcursor
16:21:07 370  ) AS
16:21:07 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
16:21:07 372  range_diff NUMBER := 0;
16:21:07 373  upper_bond_diff NUMBER := 0;
16:21:07 374  l_start NUMBER := 0;
16:21:07 375  l_end   NUMBER := 0;
16:21:07 376  BEGIN
16:21:07 377  	-- Normalize the end points [START]
16:21:07 378  	IF (in_start IS NULL OR in_start < 0) Then
16:21:07 379  	  l_start := 0;
16:21:07 380  	ELSE
16:21:07 381  	  l_start := in_start;
16:21:07 382  	END IF;
16:21:07 383  
16:21:07 384  	IF (in_end IS NULL) Then
16:21:07 385  	  l_end := 11;
16:21:07 386  	ELSE
16:21:07 387  	  l_end := in_end;
16:21:07 388  	END IF;
16:21:07 389  
16:21:07 390  	l_start := l_start + 1;
16:21:07 391  	l_end	:= l_end   + 1;
16:21:07 392  
16:21:07 393  	range_diff := l_end - l_start;
16:21:07 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
16:21:07 395  
16:21:07 396  	IF (upper_bond_diff > 0) Then
16:21:07 397  	  l_end := l_end - upper_bond_diff;
16:21:07 398  	END IF;
16:21:07 399  	-- Normalize the end points [END]
16:21:07 400  
16:21:07 401  	BEGIN
16:21:07 402  	   OPEN out_result_set FOR
16:21:07 403  	   SELECT *
16:21:07 404  	   FROM
16:21:07 405  	     (SELECT rownum rnum, Q.*
16:21:07 406  	      FROM
16:21:07 407  	       (SELECT
16:21:07 408  		  ss.ID,
16:21:07 409  		  ss.GROUP_ACCOUNT_ID,
16:21:07 410  		  ss.BORROWER_ACCOUNT_ID,
16:21:07 411  		  ss.IP_ADDRESS,
16:21:07 412  		  ss.START_DATE,
16:21:07 413  		  ss.END_DATE,
16:21:07 414  		  ss.CREATED_BY,
16:21:07 415  		  ss.CREATE_DATE,
16:21:07 416  		  ss.UPDATED_BY,
16:21:07 417  		  ss.UPDATE_DATE,
16:21:07 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
16:21:07 419  		FROM
16:21:07 420  		  SUBSCRIPTION_SHARE ss,
16:21:07 421  		  ACCOUNT a,
16:21:07 422  		  LICENSE l,
16:21:07 423  		  GROUP_ACCOUNT ga
16:21:07 424  		WHERE
16:21:07 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
16:21:07 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
16:21:07 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
16:21:07 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
16:21:07 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
16:21:07 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
16:21:07 431  	      ) Q
16:21:07 432  	    WHERE rownum <= l_end)
16:21:07 433  	  WHERE rnum >= l_start;
16:21:07 434  	END;
16:21:07 435  EXCEPTION
16:21:07 436  WHEN OTHERS THEN
16:21:07 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
16:21:07 439  END GET_SUBSCRIPTION_SHARES;
16:21:07 440  
16:21:07 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
16:21:07 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:21:07 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:21:07 444  	out_result_set	      OUT SYS_REFCURSOR
16:21:07 445  ) AS
16:21:07 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
16:21:07 447  BEGIN
16:21:07 448  	BEGIN
16:21:07 449  	  OPEN out_result_set FOR
16:21:07 450  	  SELECT
16:21:07 451  	    ID,
16:21:07 452  	    SUBSCRIPTION_ID,
16:21:07 453  	    GROUP_NAME,
16:21:07 454  	    FIRST_NAME,
16:21:07 455  	    LAST_NAME,
16:21:07 456  	    EMAIL,
16:21:07 457  	    PHONE,
16:21:07 458  	    ORGANIZATION_TYPE,
16:21:07 459  	    SEATS,
16:21:07 460  	    SEAT_TTL_IN_HOURS,
16:21:07 461  	    CREATE_DATE,
16:21:07 462  	    CREATED_BY,
16:21:07 463  	    UPDATE_DATE,
16:21:07 464  	    UPDATED_BY
16:21:07 465  	  FROM
16:21:07 466  	    GROUP_ACCOUNT
16:21:07 467  	  WHERE
16:21:07 468  	    ID IN (
16:21:07 469  	      SELECT
16:21:07 470  		GROUP_ACCOUNT_ID
16:21:07 471  	      FROM
16:21:07 472  		GROUP_ACCOUNT_IP_RANGE,
16:21:07 473  		GROUP_ACCOUNT,
16:21:07 474  		SUBSCRIPTION,
16:21:07 475  		OFFER_CHAIN
16:21:07 476  	      WHERE
16:21:07 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
16:21:07 478  	      AND
16:21:07 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:21:07 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
16:21:07 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
16:21:07 482  	      AND
16:21:07 483  		(
16:21:07 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
16:21:07 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
16:21:07 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
16:21:07 487  		)
16:21:07 488  	      AND
16:21:07 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
16:21:07 490  	    );
16:21:07 491  	  END;
16:21:07 492  EXCEPTION
16:21:07 493  WHEN OTHERS THEN
16:21:07 494  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 496  END GET_GROUP_ACCOUNT_BY_IP;
16:21:07 497  
16:21:07 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
16:21:07 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:21:07 500  	out_result_set	    OUT SYS_REFCURSOR
16:21:07 501  ) AS
16:21:07 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
16:21:07 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
16:21:07 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
16:21:07 505  BEGIN
16:21:07 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
16:21:07 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
16:21:07 508  	BEGIN
16:21:07 509  	  OPEN out_result_set FOR
16:21:07 510  	  SELECT
16:21:07 511  	    ID,
16:21:07 512  	    SUBSCRIPTION_ID,
16:21:07 513  	    GROUP_NAME,
16:21:07 514  	    FIRST_NAME,
16:21:07 515  	    LAST_NAME,
16:21:07 516  	    EMAIL,
16:21:07 517  	    PHONE,
16:21:07 518  	    ORGANIZATION_TYPE,
16:21:07 519  	    SEATS,
16:21:07 520  	    SEAT_TTL_IN_HOURS,
16:21:07 521  	    CREATE_DATE,
16:21:07 522  	    CREATED_BY,
16:21:07 523  	    UPDATE_DATE,
16:21:07 524  	    UPDATED_BY
16:21:07 525  	  FROM
16:21:07 526  	    GROUP_ACCOUNT
16:21:07 527  	  WHERE
16:21:07 528  	    ID IN (
16:21:07 529  	      SELECT
16:21:07 530  		GROUP_ACCOUNT_ID
16:21:07 531  	      FROM
16:21:07 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
16:21:07 533  		GROUP_ACCOUNT ga,
16:21:07 534  		SUBSCRIPTION s,
16:21:07 535  		OFFER_CHAIN oc
16:21:07 536  	      WHERE
16:21:07 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
16:21:07 538  		ga.SUBSCRIPTION_ID = s.ID AND
16:21:07 539  		s.OFFER_CHAIN_ID = oc.ID AND
16:21:07 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
16:21:07 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
16:21:07 542  		gaed.IS_ACTIVE = 1
16:21:07 543  	    );
16:21:07 544  	  END;
16:21:07 545  EXCEPTION
16:21:07 546  WHEN OTHERS THEN
16:21:07 547  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
16:21:07 550  
16:21:07 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
16:21:07 552  	in_group_account_id   IN NUMBER,
16:21:07 553  	in_start	      IN NUMBER,
16:21:07 554  	in_end		      IN NUMBER,
16:21:07 555  	in_status	      IN NUMBER,
16:21:07 556  	out_record_count      OUT NUMBER,
16:21:07 557  	out_result_set	      OUT SYS_REFCURSOR
16:21:07 558  ) AS
16:21:07 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
16:21:07 560  range_diff NUMBER := 0;
16:21:07 561  upper_bond_diff NUMBER := 0;
16:21:07 562  l_start NUMBER := 0;
16:21:07 563  l_end   NUMBER := 0;
16:21:07 564  BEGIN
16:21:07 565  	--Normalize the end points [START]
16:21:07 566  	IF (in_start IS NULL OR in_start < 0) Then
16:21:07 567  	  l_start := 0;
16:21:07 568  	ELSE
16:21:07 569  	  l_start := in_start;
16:21:07 570  	END IF;
16:21:07 571  
16:21:07 572  	IF (in_end IS NULL) Then
16:21:07 573  	  l_end := 11;
16:21:07 574  	ELSE
16:21:07 575  	  l_end := in_end;
16:21:07 576  	END IF;
16:21:07 577  
16:21:07 578  	l_start := l_start + 1;
16:21:07 579  	l_end	:= l_end   + 1;
16:21:07 580  
16:21:07 581  	range_diff := l_end - l_start;
16:21:07 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
16:21:07 583  
16:21:07 584  	IF (upper_bond_diff > 0) Then
16:21:07 585  	  l_end := l_end - upper_bond_diff;
16:21:07 586  	END IF;
16:21:07 587  	--Normalize the end points [END]
16:21:07 588  
16:21:07 589  	--Total count of records [START]
16:21:07 590  	SELECT
16:21:07 591  	  COUNT(1) INTO out_record_count
16:21:07 592  	FROM
16:21:07 593  	  GROUP_ACCOUNT_IP_RANGE
16:21:07 594  	WHERE
16:21:07 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
16:21:07 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
16:21:07 597  	--Total count of records [END]
16:21:07 598  
16:21:07 599  	OPEN out_result_set FOR
16:21:07 600  	SELECT
16:21:07 601  	  *
16:21:07 602  	FROM
16:21:07 603  	  (SELECT rownum rnum, q.*
16:21:07 604  	   FROM
16:21:07 605  	    (SELECT
16:21:07 606  	       ID,
16:21:07 607  	       GROUP_ACCOUNT_ID,
16:21:07 608  	       MINIMUM_IP_STRING,
16:21:07 609  	       MAXIMUM_IP_STRING,
16:21:07 610  	       GROUP_ACC_IP_RNG_STATUS_ID
16:21:07 611  	     FROM
16:21:07 612  	       GROUP_ACCOUNT_IP_RANGE
16:21:07 613  	     WHERE
16:21:07 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
16:21:07 615  	       (in_status IS NULL OR
16:21:07 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
16:21:07 617  	    ) Q
16:21:07 618  	  WHERE rownum <= l_end)
16:21:07 619  	WHERE rnum >= l_Start;
16:21:07 620  EXCEPTION
16:21:07 621  WHEN OTHERS THEN
16:21:07 622  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
16:21:07 624  END GET_GROUP_ACCOUNT_IP_RANGES;
16:21:07 625  
16:21:07 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
16:21:07 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:07 628  	in_start	      IN NUMBER,
16:21:07 629  	in_end		      IN NUMBER,
16:21:07 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
16:21:07 631  	out_record_count      OUT NUMBER,
16:21:07 632  	out_result_set	      OUT SYS_REFCURSOR
16:21:07 633  ) AS
16:21:07 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
16:21:07 635  range_diff NUMBER := 0;
16:21:07 636  upper_bond_diff NUMBER := 0;
16:21:07 637  l_start NUMBER := 0;
16:21:07 638  l_end   NUMBER := 0;
16:21:07 639  BEGIN
16:21:07 640  	--Normalize the end points [START]
16:21:07 641  	IF (in_start IS NULL OR in_start < 0) Then
16:21:07 642  	  l_start := 0;
16:21:07 643  	ELSE
16:21:07 644  	  l_start := in_start;
16:21:07 645  	END IF;
16:21:07 646  
16:21:07 647  	IF (in_end IS NULL) Then
16:21:07 648  	  l_end := 11;
16:21:07 649  	ELSE
16:21:07 650  	  l_end := in_end;
16:21:07 651  	END IF;
16:21:07 652  
16:21:07 653  	l_start := l_start + 1;
16:21:07 654  	l_end	:= l_end   + 1;
16:21:07 655  
16:21:07 656  	range_diff := l_end - l_start;
16:21:07 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
16:21:07 658  
16:21:07 659  	IF (upper_bond_diff > 0) Then
16:21:07 660  	  l_end := l_end - upper_bond_diff;
16:21:07 661  	END IF;
16:21:07 662  	--Normalize the end points [END]
16:21:07 663  
16:21:07 664  	--Total count of records [START]
16:21:07 665  	SELECT
16:21:07 666  	  COUNT(1) INTO out_record_count
16:21:07 667  	FROM
16:21:07 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
16:21:07 669  	WHERE
16:21:07 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
16:21:07 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
16:21:07 672  	--Total count of records [END]
16:21:07 673  
16:21:07 674  	OPEN out_result_set FOR
16:21:07 675  	SELECT
16:21:07 676  	  *
16:21:07 677  	FROM
16:21:07 678  	  (SELECT rownum rnum, q.*
16:21:07 679  	   FROM
16:21:07 680  	    (SELECT
16:21:07 681  	      ID,
16:21:07 682  	      GROUP_ACCOUNT_ID,
16:21:07 683  	      EMAIL_DOMAIN,
16:21:07 684  	      IS_ACTIVE
16:21:07 685  	     FROM
16:21:07 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
16:21:07 687  	     WHERE
16:21:07 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
16:21:07 689  	       (in_status IS NULL OR
16:21:07 690  		IS_ACTIVE = in_status)
16:21:07 691  	    ) Q
16:21:07 692  	  WHERE rownum <= l_end)
16:21:07 693  	WHERE rnum >= l_Start;
16:21:07 694  
16:21:07 695  EXCEPTION
16:21:07 696  WHEN OTHERS THEN
16:21:07 697  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
16:21:07 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
16:21:07 700  
16:21:07 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
16:21:07 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:07 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:07 704  ) AS
16:21:07 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
16:21:07 706  BEGIN
16:21:07 707  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
16:21:07 708  	    in_group_account_id => in_group_account_id,
16:21:07 709  	    in_updated_by => in_updated_by
16:21:07 710  	  );
16:21:07 711  EXCEPTION
16:21:07 712  WHEN OTHERS THEN
16:21:07 713  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
16:21:07 716  
16:21:07 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
16:21:07 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:21:07 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:21:07 720  ) AS
16:21:07 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
16:21:07 722  BEGIN
16:21:07 723  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_EMAIL_DOMAIN_BY_ID(
16:21:07 724  	    in_id => in_id,
16:21:07 725  	    in_updated_by => in_updated_by
16:21:07 726  	  );
16:21:07 727  EXCEPTION
16:21:07 728  WHEN OTHERS THEN
16:21:07 729  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
16:21:07 732  
16:21:07 733  PROCEDURE ADD_EMAIL_DOMAIN (
16:21:07 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:21:07 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:21:07 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
16:21:07 737  ) AS
16:21:07 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
16:21:07 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
16:21:07 740  var_is_dupe NUMBER(1);
16:21:07 741  var_group_account_count NUMBER := 0;
16:21:07 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
16:21:07 743  NOT_GL EXCEPTION;
16:21:07 744  DUPE EXCEPTION;
16:21:07 745  BEGIN
16:21:07 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
16:21:07 747  	  FROM
16:21:07 748  	    GROUP_ACCOUNT,
16:21:07 749  	    SUBSCRIPTION,
16:21:07 750  	    OFFER_CHAIN
16:21:07 751  	  WHERE
16:21:07 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
16:21:07 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:21:07 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 755  	  ;
16:21:07 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
16:21:07 757  	    RAISE NOT_GL;
16:21:07 758  	  END IF;
16:21:07 759  
16:21:07 760  	  --check if email domain already exists
16:21:07 761  	  SELECT count(1) into var_group_account_count
16:21:07 762  	  FROM
16:21:07 763  	      GROUP_ACCOUNT_EMAIL_DOMAIN
16:21:07 764  	  WHERE
16:21:07 765  	      GROUP_ACCOUNT_ID= in_group_account_id AND
16:21:07 766  	      EMAIL_DOMAIN = in_email_domain
16:21:07 767  	  ;
16:21:07 768  
16:21:07 769  	  IF(var_group_account_count > 0) THEN
16:21:07 770  	      SELECT ID into var_id
16:21:07 771  	      FROM
16:21:07 772  		  GROUP_ACCOUNT_EMAIL_DOMAIN
16:21:07 773  	      WHERE
16:21:07 774  		  GROUP_ACCOUNT_ID= in_group_account_id AND
16:21:07 775  		  EMAIL_DOMAIN = in_email_domain AND
16:21:07 776  		  rownum <= 1;
16:21:07 777  	      PROCS_GROUP_ACCOUNT_CRU_V16.ENABLE_EMAIL_DOMAIN_BY_ID(
16:21:07 778  		  in_id => var_id,
16:21:07 779  		  in_updated_by => in_created_by
16:21:07 780  		  );
16:21:07 781  	  ELSE
16:21:07 782  	      PROCS_GROUP_ACCOUNT_CRU_V16.ADD_EMAIL_DOMAIN(
16:21:07 783  		  in_group_account_id => in_group_account_id,
16:21:07 784  		  in_email_domain => in_email_domain,
16:21:07 785  		      in_is_active => GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT,
16:21:07 786  		  in_created_by => in_created_by
16:21:07 787  	      );
16:21:07 788  	  END IF;
16:21:07 789  
16:21:07 790  EXCEPTION
16:21:07 791  WHEN NOT_GL THEN
16:21:07 792  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 793  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
16:21:07 794  WHEN OTHERS THEN
16:21:07 795  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 796  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 797  END ADD_EMAIL_DOMAIN;
16:21:07 798  
16:21:07 799  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
16:21:07 800  	in_group_account_id    IN NUMBER,
16:21:07 801  	in_borrower_account_id IN NUMBER,
16:21:07 802  	in_ip_address	       IN VARCHAR2,
16:21:07 803  	in_email_domain        IN VARCHAR2,
16:21:07 804  	in_created_by	       IN VARCHAR2
16:21:07 805  ) AS
16:21:07 806  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
16:21:07 807  ga_ttl_in_hours NUMBER := NULL;
16:21:07 808  start_date DATE := NULL;
16:21:07 809  end_date DATE := NULL;
16:21:07 810  BEGIN
16:21:07 811  	start_date := sysdate;
16:21:07 812  	end_date   := GLOBAL_CONSTANTS_V16.MAX_DATE;
16:21:07 813  
16:21:07 814  	BEGIN
16:21:07 815  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
16:21:07 816  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
16:21:07 817  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
16:21:07 818  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:21:07 819  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
16:21:07 820  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
16:21:07 821  	EXCEPTION
16:21:07 822  	  WHEN no_data_found THEN
16:21:07 823  	    ga_ttl_in_hours := NULL;
16:21:07 824  	END;
16:21:07 825  
16:21:07 826  	IF (ga_ttl_in_hours IS NOT NULL) THEN
16:21:07 827  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
16:21:07 828  	END IF;
16:21:07 829  
16:21:07 830  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.CREATE_SUBSCRIPTION_SHARE(
16:21:07 831  	  in_group_account_id => in_group_account_id,
16:21:07 832  	  in_borrower_account_id => in_borrower_account_id,
16:21:07 833  	  in_ip_address => in_ip_address,
16:21:07 834  	  in_email_domain => in_email_domain,
16:21:07 835  	  in_start_date => start_date,
16:21:07 836  	  in_end_date => end_date,
16:21:07 837  	  in_created_by => in_created_by
16:21:07 838  	);
16:21:07 839  END CREATE_SUBSCRIPTION_SHARE;
16:21:07 840  
16:21:07 841  
16:21:07 842  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
16:21:07 843  	in_group_account_id   IN NUMBER,
16:21:07 844  	out_occupied_seats   OUT NUMBER
16:21:07 845  ) AS
16:21:07 846  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
16:21:07 847  BEGIN
16:21:07 848  	SELECT
16:21:07 849  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
16:21:07 850  	FROM dual;
16:21:07 851  EXCEPTION
16:21:07 852  WHEN OTHERS THEN
16:21:07 853  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 854  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 855  END GET_NUM_OCCUPIED_GROUP_SEATS;
16:21:07 856  
16:21:07 857  
16:21:07 858  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
16:21:07 859  	in_group_account_id   IN NUMBER
16:21:07 860  ) RETURN NUMBER IS
16:21:07 861  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
16:21:07 862  num_seats NUMBER;
16:21:07 863  BEGIN
16:21:07 864  	SELECT
16:21:07 865  	  COUNT(1) INTO num_seats
16:21:07 866  	FROM
16:21:07 867  	  SUBSCRIPTION_SHARE
16:21:07 868  	WHERE
16:21:07 869  	  GROUP_ACCOUNT_ID = in_group_account_id AND
16:21:07 870  	  SYSDATE BETWEEN START_DATE AND END_DATE;
16:21:07 871  	RETURN num_seats;
16:21:07 872  EXCEPTION
16:21:07 873  WHEN OTHERS THEN
16:21:07 874  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 875  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 876  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
16:21:07 877  
16:21:07 878  -- *********************************************************************
16:21:07 879  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
16:21:07 880  -- *********************************************************************
16:21:07 881  -- I'm debating if this should be in a different package, but right now
16:21:07 882  -- I'm too lazy to move this else where.
16:21:07 883  -- *********************************************************************
16:21:07 884  
16:21:07 885  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
16:21:07 886  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:07 887  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:21:07 888  ) AS
16:21:07 889  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
16:21:07 890  BEGIN
16:21:07 891  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_IP_RANGES_BY_GA_ID(
16:21:07 892  	    in_group_account_id => in_group_account_id,
16:21:07 893  	    in_updated_by => in_updated_by
16:21:07 894  	  );
16:21:07 895  EXCEPTION
16:21:07 896  WHEN OTHERS THEN
16:21:07 897  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 899  END DISABLE_IP_RANGES_BY_GA_ID;
16:21:07 900  
16:21:07 901  PROCEDURE DISABLE_IP_RANGE_BY_ID (
16:21:07 902  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
16:21:07 903  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:21:07 904  ) AS
16:21:07 905  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
16:21:07 906  BEGIN
16:21:07 907  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_IP_RANGE_BY_ID(
16:21:07 908  	    in_id => in_id,
16:21:07 909  	    in_updated_by => in_updated_by
16:21:07 910  	  );
16:21:07 911  EXCEPTION
16:21:07 912  WHEN OTHERS THEN
16:21:07 913  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 915  END DISABLE_IP_RANGE_BY_ID;
16:21:07 916  
16:21:07 917  PROCEDURE ADD_IP_RANGE (
16:21:07 918  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:21:07 919  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
16:21:07 920  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:21:07 921  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:21:07 922  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
16:21:07 923  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
16:21:07 924  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
16:21:07 925  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
16:21:07 926  ) AS
16:21:07 927  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
16:21:07 928  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
16:21:07 929  var_is_dupe NUMBER(1);
16:21:07 930  NOT_GL EXCEPTION;
16:21:07 931  DUPE EXCEPTION;
16:21:07 932  BEGIN
16:21:07 933  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
16:21:07 934  	  FROM
16:21:07 935  	    GROUP_ACCOUNT,
16:21:07 936  	    SUBSCRIPTION,
16:21:07 937  	    OFFER_CHAIN
16:21:07 938  	  WHERE
16:21:07 939  	    GROUP_ACCOUNT.ID = in_group_account_id AND
16:21:07 940  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:21:07 941  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 942  	  ;
16:21:07 943  	  IF(var_ga_type != 'GL') THEN
16:21:07 944  	    RAISE NOT_GL;
16:21:07 945  	  END IF;
16:21:07 946  
16:21:07 947  	  PROCS_GROUP_ACCOUNT_CRU_V16.ADD_IP_RANGE(
16:21:07 948  	    in_group_account_id => in_group_account_id,
16:21:07 949  	    in_minimum_ip_string => in_minimum_ip_string,
16:21:07 950  	    in_minimum_ip_low => in_minimum_ip_low,
16:21:07 951  	    in_minimum_ip_high => in_minimum_ip_high,
16:21:07 952  	    in_maximum_ip_string => in_maximum_ip_string,
16:21:07 953  	    in_maximum_ip_low => in_maximum_ip_low,
16:21:07 954  	    in_maximum_ip_high => in_maximum_ip_high,
16:21:07 955  	    in_created_by => in_created_by
16:21:07 956  	  );
16:21:07 957  
16:21:07 958  	  -- Check for overlapping ip address range after insert.  Note that if another
16:21:07 959  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
16:21:07 960  	  SELECT count(1) into var_is_dupe
16:21:07 961  	  FROM
16:21:07 962  	    GROUP_ACCOUNT_IP_RANGE
16:21:07 963  	  WHERE
16:21:07 964  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE AND
16:21:07 965  		((
16:21:07 966  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
16:21:07 967  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
16:21:07 968  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
16:21:07 969  		) OR
16:21:07 970  
16:21:07 971  		(
16:21:07 972  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
16:21:07 973  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
16:21:07 974  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
16:21:07 975  		)) AND
16:21:07 976  	    ROWNUM < 3;
16:21:07 977  
16:21:07 978  	  If(var_is_dupe > 1) THEN
16:21:07 979  	    RAISE DUPE;
16:21:07 980  	  END IF;
16:21:07 981  EXCEPTION
16:21:07 982  WHEN NOT_GL THEN
16:21:07 983  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 984  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
16:21:07 985  WHEN DUPE THEN
16:21:07 986  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 987  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
16:21:07 988  WHEN OTHERS THEN
16:21:07 989  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 990  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 991  END ADD_IP_RANGE;
16:21:07 992  
16:21:07 993  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
16:21:07 994  	in_group_account_id IN NUMBER,
16:21:07 995  	out_group_id OUT NUMBER
16:21:07 996  ) AS
16:21:07 997  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
16:21:07 998  BEGIN
16:21:07 999  	SELECT
16:21:07 1000  	   a.group_id into out_group_id
16:21:07 1001  	 FROM
16:21:07 1002  	   account a,
16:21:07 1003  	   subscription s,
16:21:07 1004  	   group_account ga
16:21:07 1005  	 WHERE
16:21:07 1006  	   a.id = s.account_id and
16:21:07 1007  	   s.id = ga.subscription_id and
16:21:07 1008  	   ga.id = in_group_account_id and
16:21:07 1009  	   rownum < 2
16:21:07 1010  	 ;
16:21:07 1011  EXCEPTION
16:21:07 1012  WHEN NO_DATA_FOUND THEN
16:21:07 1013  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1014  	   SPROC_NAME, 'Bad group_account_id');
16:21:07 1015  WHEN OTHERS THEN
16:21:07 1016  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1017  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1018  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
16:21:07 1019  
16:21:07 1020  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
16:21:07 1021  	 in_group_account_ip_range_id IN NUMBER,
16:21:07 1022  	 out_group_id OUT NUMBER
16:21:07 1023  ) AS
16:21:07 1024  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
16:21:07 1025  BEGIN
16:21:07 1026  	 SELECT
16:21:07 1027  	   a.group_id into out_group_id
16:21:07 1028  	 FROM
16:21:07 1029  	   account a,
16:21:07 1030  	   subscription s,
16:21:07 1031  	   group_account ga,
16:21:07 1032  	   group_account_ip_range ir
16:21:07 1033  	 WHERE
16:21:07 1034  	   a.id = s.account_id and
16:21:07 1035  	   s.id = ga.subscription_id and
16:21:07 1036  	   ga.id = ir.group_account_id and
16:21:07 1037  	   ir.id = in_group_account_ip_range_id and
16:21:07 1038  	   rownum < 2
16:21:07 1039  	 ;
16:21:07 1040  EXCEPTION
16:21:07 1041  WHEN NO_DATA_FOUND THEN
16:21:07 1042  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1043  	   SPROC_NAME, 'Bad group_account_ip_range_id');
16:21:07 1044  WHEN OTHERS THEN
16:21:07 1045  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1046  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1047  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
16:21:07 1048  
16:21:07 1049  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
16:21:07 1050  	 in_group_account_email_dom_id IN NUMBER,
16:21:07 1051  	 out_group_id OUT NUMBER
16:21:07 1052  ) AS
16:21:07 1053  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
16:21:07 1054  BEGIN
16:21:07 1055  	 SELECT
16:21:07 1056  	   a.group_id into out_group_id
16:21:07 1057  	 FROM
16:21:07 1058  	   account a,
16:21:07 1059  	   subscription s,
16:21:07 1060  	   group_account ga,
16:21:07 1061  	   group_account_email_domain ir
16:21:07 1062  	 WHERE
16:21:07 1063  	   a.id = s.account_id and
16:21:07 1064  	   s.id = ga.subscription_id and
16:21:07 1065  	   ga.id = ir.group_account_id and
16:21:07 1066  	   ir.id = in_group_account_email_dom_id and
16:21:07 1067  	   rownum < 2
16:21:07 1068  	 ;
16:21:07 1069  EXCEPTION
16:21:07 1070  WHEN NO_DATA_FOUND THEN
16:21:07 1071  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1072  	   SPROC_NAME, 'Bad group_account_ip_range_id');
16:21:07 1073  WHEN OTHERS THEN
16:21:07 1074  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1075  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1076  END GET_GRP_ID_BY_EMAIL_DOM_ID;
16:21:07 1077  
16:21:07 1078  PROCEDURE UPDATE_GROUP_ACCOUNT (
16:21:07 1079  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
16:21:07 1080  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
16:21:07 1081  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
16:21:07 1082  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
16:21:07 1083  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
16:21:07 1084  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
16:21:07 1085  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:21:07 1086  ) AS
16:21:07 1087  BEGIN
16:21:07 1088  	 PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_GROUP_ACCOUNT(
16:21:07 1089  	   in_group_account_id => in_group_account_id,
16:21:07 1090  	   in_group_name => in_group_name,
16:21:07 1091  	   in_first_name => in_first_name,
16:21:07 1092  	   in_last_name => in_last_name,
16:21:07 1093  	   in_email => in_email,
16:21:07 1094  	   in_phone => in_phone,
16:21:07 1095  	   in_updated_by => in_updated_by
16:21:07 1096  	 );
16:21:07 1097  END UPDATE_GROUP_ACCOUNT;
16:21:07 1098  
16:21:07 1099  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
16:21:07 1100  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
16:21:07 1101  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
16:21:07 1102  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:21:07 1103  ) AS
16:21:07 1104  BEGIN
16:21:07 1105  	 PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_GROUP_ACCOUNT_SEATS(
16:21:07 1106  	   in_group_account_id => in_group_account_id,
16:21:07 1107  	   in_seats => in_seats,
16:21:07 1108  	   in_updated_by => in_updated_by
16:21:07 1109  	 );
16:21:07 1110  END UPDATE_GROUP_ACCOUNT_SEATS;
16:21:07 1111  
16:21:07 1112  END PROCS_GROUP_ACCOUNT_V16;
16:21:07 1113  .
16:21:07 SQL> /

Package body created.

Elapsed: 00:00:00.13
16:21:07 SQL> 
16:21:07 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V16" AS
16:21:07   2  
16:21:07   3  PROCEDURE TEST_CLEAR_ALL IS
16:21:07   4  BEGIN
16:21:07   5  	DELETE FROM TAX_ADJUSTMENT;
16:21:07   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
16:21:07   7  	DELETE FROM INVOICE_ADJUSTMENT;
16:21:07   8  	DELETE FROM LICENSE;
16:21:07   9  	DELETE FROM OFFER_OFFER_CHAIN;
16:21:07  10  	delete from offer_product_offering;
16:21:07  11  	delete from tax;
16:21:07  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
16:21:07  13  	delete from discount_line_item; -- ?
16:21:07  14  	delete from discount; -- ?
16:21:07  15  	DELETE FROM LINE_ITEM;
16:21:07  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
16:21:07  17  	DELETE FROM PRODUCT_OFFERING;
16:21:07  18  	DELETE FROM PRODUCT;
16:21:07  19  	DELETE FROM INVOICE_NOTE;
16:21:07  20  	DELETE FROM GIFT_CERTIFICATE;
16:21:07  21  	DELETE FROM OFFER;
16:21:07  22  	DELETE FROM OFFER_CHAIN_META_DATA;
16:21:07  23  	DELETE FROM SUBSCRIPTION_NOTE;
16:21:07  24  	DELETE FROM SUBSCRIPTION_META_DATA;
16:21:07  25  	DELETE FROM SUBSCRIPTION;
16:21:07  26  	DELETE FROM CREDIT_CARD;
16:21:07  27  	DELETE FROM FLAGGED_ACCOUNTS;
16:21:07  28  	DELETE FROM ACCOUNT_NOTE;
16:21:07  29  	DELETE FROM ACCOUNT_LOCK;
16:21:07  30  	DELETE FROM ACCOUNT;
16:21:07  31  	DELETE FROM CHARGE;
16:21:07  32  	DELETE FROM TRANSACTION_ATTEMPT;
16:21:07  33  	DELETE FROM CHARGEBACK;
16:21:07  34  	DELETE FROM TRANSACTION;
16:21:07  35  	DELETE FROM INVOICE_NOTE;
16:21:07  36  	DELETE FROM INVOICE;
16:21:07  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
16:21:07  38  	DELETE FROM OFFER_CHAIN;
16:21:07  39  END TEST_CLEAR_ALL;
16:21:07  40  
16:21:07  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
16:21:07  42  BEGIN
16:21:07  43  	DELETE FROM OFFER_OFFER_CHAIN;
16:21:07  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
16:21:07  45  	DELETE FROM TAX;
16:21:07  46  	DELETE FROM PRODUCT_OFFERING;
16:21:07  47  	DELETE FROM PRODUCT;
16:21:07  48  	DELETE FROM OFFER;
16:21:07  49  	DELETE FROM OFFER_CHAIN_META_DATA;
16:21:07  50  	DELETE FROM OFFER_CHAIN;
16:21:07  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
16:21:07  52  END;
16:21:07  53  
16:21:07  54  /******************************************/
16:21:07  55  
16:21:07  56  PROCEDURE TEST_GET_ACCOUNT (
16:21:07  57  	in_group_id	IN NUMBER,
16:21:07  58  	out_result_set	OUT SYS_REFCURSOR
16:21:07  59  ) AS
16:21:07  60  BEGIN
16:21:07  61  
16:21:07  62  	OPEN out_result_set FOR
16:21:07  63  	SELECT *
16:21:07  64  	FROM
16:21:07  65  	  ACCOUNT
16:21:07  66  	WHERE
16:21:07  67  	  ACCOUNT.GROUP_ID = in_group_id;
16:21:07  68  
16:21:07  69  END TEST_GET_ACCOUNT;
16:21:07  70  
16:21:07  71  /*******************************************/
16:21:07  72  
16:21:07  73  PROCEDURE TEST_GET_SUBSCRIPTION (
16:21:07  74  	in_subscription_id IN NUMBER,
16:21:07  75  	out_result_set	   OUT SYS_REFCURSOR
16:21:07  76  ) AS
16:21:07  77  BEGIN
16:21:07  78  	OPEN out_result_set FOR
16:21:07  79  	SELECT *
16:21:07  80  	FROM
16:21:07  81  	  SUBSCRIPTION
16:21:07  82  	WHERE
16:21:07  83  	  SUBSCRIPTION.ID = in_subscription_id;
16:21:07  84  
16:21:07  85  END TEST_GET_SUBSCRIPTION;
16:21:07  86  
16:21:07  87  /***************************************************/
16:21:07  88  
16:21:07  89  PROCEDURE TEST_DELETE_INVOICE (
16:21:07  90  	in_invoice_id IN NUMBER
16:21:07  91  ) AS
16:21:07  92  var_line_item_id_set SYS_REFCURSOR;
16:21:07  93  var_line_item_id	   NUMBER;
16:21:07  94  
16:21:07  95  var_charge_id_set  SYS_REFCURSOR;
16:21:07  96  var_charge_id	 NUMBER;
16:21:07  97  var_transaction_id NUMBER;
16:21:07  98  BEGIN
16:21:07  99  	-- GET ACCOUNT'S LINE_ITEMS
16:21:07 100  	OPEN var_line_item_id_set FOR
16:21:07 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
16:21:07 102  	LOOP
16:21:07 103  	  FETCH var_line_item_id_set into var_line_item_id;
16:21:07 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
16:21:07 105  
16:21:07 106  	  -- DELETE ADJUSTMENTS
16:21:07 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
16:21:07 108  	  LOOP
16:21:07 109  
16:21:07 110  	    -- DELETE DISCOUNT ADJUSTMENTS
16:21:07 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
16:21:07 112  
16:21:07 113  	    -- DELETE TAX ADJUSTMENTS
16:21:07 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
16:21:07 115  	  END LOOP;
16:21:07 116  
16:21:07 117  	  -- DELETE LINE ITEM ADJUSTMENTS
16:21:07 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
16:21:07 119  
16:21:07 120  	  -- DELETE DISCOUNT_LINE_ITEM
16:21:07 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
16:21:07 122  
16:21:07 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
16:21:07 124  
16:21:07 125  	  -- DELETE LINE ITEM
16:21:07 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
16:21:07 127  
16:21:07 128  	END LOOP;
16:21:07 129  
16:21:07 130  	-- DELETE INVOICE ADJUSTMENTS
16:21:07 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
16:21:07 132  
16:21:07 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
16:21:07 134  	OPEN var_charge_id_set FOR
16:21:07 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
16:21:07 136  	LOOP
16:21:07 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
16:21:07 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
16:21:07 139  	  -- DELETE CHARGEBACK
16:21:07 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
16:21:07 141  
16:21:07 142  	  -- DELETE TRANSACTION ATTEMP
16:21:07 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
16:21:07 144  
16:21:07 145  	  -- DELETE CHARGE
16:21:07 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
16:21:07 147  
16:21:07 148  	  -- DELETE TRANSACTION
16:21:07 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
16:21:07 150  	END LOOP;
16:21:07 151  
16:21:07 152  	-- DELETE INVOICE NOTES
16:21:07 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
16:21:07 154  
16:21:07 155  	-- DELETE INVOICE
16:21:07 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
16:21:07 157  END;
16:21:07 158  
16:21:07 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
16:21:07 160  	in_group_id IN NUMBER
16:21:07 161  ) AS
16:21:07 162  -- VARIABLES
16:21:07 163  var_account_id NUMBER;
16:21:07 164  
16:21:07 165  -- CURSORS
16:21:07 166  var_subscription_id_set SYS_REFCURSOR;
16:21:07 167  var_subscription_id     NUMBER;
16:21:07 168  
16:21:07 169  var_license_id_set SYS_REFCURSOR;
16:21:07 170  var_license_id	 NUMBER;
16:21:07 171  var_invoice_id	 NUMBER;
16:21:07 172  
16:21:07 173  var_gift_certificate_id_set SYS_REFCURSOR;
16:21:07 174  var_gift_certificate_id	  NUMBER;
16:21:07 175  var_gc_purchase_invoice_id  NUMBER;
16:21:07 176  BEGIN
16:21:07 177  
16:21:07 178   /*FOR f_account in (
16:21:07 179  	  select id from account where group_id = in_group_id
16:21:07 180  	)
16:21:07 181  	loop
16:21:07 182  
16:21:07 183  	  -- delete account
16:21:07 184  	  delete from account where id = f_account.id;
16:21:07 185  
16:21:07 186  	end loop;*/
16:21:07 187  
16:21:07 188  	BEGIN
16:21:07 189  	  SELECT
16:21:07 190  	    ACCOUNT.ID into var_account_id
16:21:07 191  	  FROM
16:21:07 192  	    ACCOUNT
16:21:07 193  	  WHERE
16:21:07 194  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07 195  	  EXCEPTION
16:21:07 196  	    WHEN NO_DATA_FOUND THEN
16:21:07 197  	      -- Nothing to do
16:21:07 198  	      RETURN;
16:21:07 199  	END;
16:21:07 200  
16:21:07 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
16:21:07 202  	OPEN var_subscription_id_set FOR
16:21:07 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
16:21:07 204  	LOOP
16:21:07 205  	  FETCH var_subscription_id_set into var_subscription_id;
16:21:07 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
16:21:07 207  
16:21:07 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
16:21:07 209  	  OPEN var_license_id_set FOR
16:21:07 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
16:21:07 211  	  LOOP
16:21:07 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
16:21:07 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
16:21:07 214  
16:21:07 215  
16:21:07 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
16:21:07 217  	    OPEN var_gift_certificate_id_set FOR
16:21:07 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
16:21:07 219  	    LOOP
16:21:07 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
16:21:07 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
16:21:07 222  
16:21:07 223  	      -- DELETE GIFT_CERTIFICATE
16:21:07 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
16:21:07 225  
16:21:07 226  	      -- DELETE LICENSE
16:21:07 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
16:21:07 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
16:21:07 229  	      END IF;
16:21:07 230  
16:21:07 231  	    END LOOP;
16:21:07 232  
16:21:07 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
16:21:07 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
16:21:07 235  
16:21:07 236  	    -- DELETE LICENSE
16:21:07 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
16:21:07 238  
16:21:07 239  	    -- DELETE INVOICE
16:21:07 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
16:21:07 241  	      TEST_DELETE_INVOICE(var_invoice_id);
16:21:07 242  	    END IF;
16:21:07 243  	  END LOOP;
16:21:07 244  
16:21:07 245  	  -- DELETE SUBSCRIPTION_NOTE
16:21:07 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
16:21:07 247  
16:21:07 248  	  -- DELETE SUBSCRIPTION META_DATA
16:21:07 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
16:21:07 250  
16:21:07 251  	  -- DELETE SUBSCRIPTION
16:21:07 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
16:21:07 253  	END LOOP;
16:21:07 254  
16:21:07 255  	-- DELETE CREDIT_CARDS
16:21:07 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
16:21:07 257  
16:21:07 258  	-- DELETE PAYPAL
16:21:07 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
16:21:07 260  
16:21:07 261  	-- DELETE FLAGS
16:21:07 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
16:21:07 263  
16:21:07 264  	-- DELETE ACCOUNT NOTES
16:21:07 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
16:21:07 266  
16:21:07 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
16:21:07 268  	OPEN var_gift_certificate_id_set FOR
16:21:07 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
16:21:07 270  	LOOP
16:21:07 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
16:21:07 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
16:21:07 273  
16:21:07 274  	  -- DELETE GIFT CERTIFICATE
16:21:07 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
16:21:07 276  
16:21:07 277  	  -- DELETE INVOICE
16:21:07 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
16:21:07 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
16:21:07 280  	  END IF;
16:21:07 281  	END LOOP;
16:21:07 282  
16:21:07 283  	-- DELETE LOCKS
16:21:07 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
16:21:07 285  
16:21:07 286  	-- DELETE ACCOUNT
16:21:07 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
16:21:07 288  
16:21:07 289  END TEST_DELETE_USER_ACCOUNT;
16:21:07 290  
16:21:07 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
16:21:07 292  	in_start_group_id IN NUMBER,
16:21:07 293  	in_end_group_id   IN NUMBER
16:21:07 294  ) IS
16:21:07 295   gid ACCOUNT.GROUP_ID%TYPE;
16:21:07 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
16:21:07 297  BEGIN
16:21:07 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
16:21:07 299  	/*
16:21:07 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
16:21:07 301  	LOOP
16:21:07 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
16:21:07 303  	END LOOP;*/
16:21:07 304  	OPEN c(in_start_group_id, in_end_group_id);
16:21:07 305  	WHILE c%ISOPEN LOOP
16:21:07 306  	  FETCH c INTO gid;
16:21:07 307  	  IF c%NOTFOUND THEN
16:21:07 308  	   CLOSE c;
16:21:07 309  	  END IF;
16:21:07 310  	  TEST_DELETE_USER_ACCOUNT(gid);
16:21:07 311  	END LOOP;
16:21:07 312  END;
16:21:07 313  
16:21:07 314  /**********************************************************/
16:21:07 315  
16:21:07 316  FUNCTION TEST_IS_INVOICE_EXISTS(
16:21:07 317  /*
16:21:07 318  1 - exists
16:21:07 319  0 - not exists
16:21:07 320  */
16:21:07 321  	in_invoice_id IN NUMBER
16:21:07 322  ) RETURN NUMBER AS
16:21:07 323  var_invoice_count NUMBER;
16:21:07 324  BEGIN
16:21:07 325  	SELECT
16:21:07 326  	  COUNT(*) into var_invoice_count
16:21:07 327  	FROM
16:21:07 328  	  INVOICE
16:21:07 329  	WHERE
16:21:07 330  	  INVOICE.ID = in_invoice_id;
16:21:07 331  	IF var_invoice_count = 0 THEN
16:21:07 332  	  RETURN 0;
16:21:07 333  	ELSE
16:21:07 334  	  RETURN 1;
16:21:07 335  	END IF;
16:21:07 336  END;
16:21:07 337  
16:21:07 338  PROCEDURE TEST_GET_INVOICE_INFO (
16:21:07 339  	in_invoice_id  IN NUMBER,
16:21:07 340  	out_result_set OUT SYS_REFCURSOR
16:21:07 341  ) AS
16:21:07 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
16:21:07 343  BEGIN
16:21:07 344  
16:21:07 345  	 OPEN out_result_set FOR SELECT
16:21:07 346  	    in_invoice_id AS "INVOICE_ID",
16:21:07 347  	    INVOICE.INVOICE_STATUS_ID,
16:21:07 348  	    PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
16:21:07 349  	    CHARGE.ID AS "CHARGE_ID",
16:21:07 350  	    CHARGE.CHARGE_AMOUNT,
16:21:07 351  	    CHARGE.TRANSACTION_ID,
16:21:07 352  	    TRANSACTION.TRANSACTION_STATUS_ID
16:21:07 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
16:21:07 354  
16:21:07 355  END TEST_GET_INVOICE_INFO;
16:21:07 356  
16:21:07 357  /******************************************************************************/
16:21:07 358  
16:21:07 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
16:21:07 360  	in_offer_chain_id in number
16:21:07 361  ) as
16:21:07 362  begin
16:21:07 363  
16:21:07 364  	for v_offer_chain in (
16:21:07 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
16:21:07 366  	)
16:21:07 367  	loop
16:21:07 368  
16:21:07 369  	  for v_offer in (
16:21:07 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
16:21:07 371  	  )
16:21:07 372  	  loop
16:21:07 373  
16:21:07 374  	    for v_product_offering in (
16:21:07 375  	      select
16:21:07 376  		product_offering.id,
16:21:07 377  		product_offering.product_id
16:21:07 378  	      from
16:21:07 379  		offer_product_offering
16:21:07 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
16:21:07 381  	      where offer_product_offering.offer_id = v_offer.id
16:21:07 382  	    )
16:21:07 383  	    loop
16:21:07 384  
16:21:07 385  	      -- delete product eligibility
16:21:07 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
16:21:07 387  
16:21:07 388  	      -- delete meta data
16:21:07 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
16:21:07 390  
16:21:07 391  	      -- delete product
16:21:07 392  	      delete from product where id = v_product_offering.product_id;
16:21:07 393  
16:21:07 394  	      -- delete product_offering
16:21:07 395  	      delete from product_offering where id = v_product_offering.id;
16:21:07 396  
16:21:07 397  	    end loop;
16:21:07 398  
16:21:07 399  	    -- delete data from offer_product_offering table
16:21:07 400  	    delete from offer_product_offering where offer_id = v_offer.id;
16:21:07 401  
16:21:07 402  	    -- delete data from offer_offer_chain table
16:21:07 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
16:21:07 404  
16:21:07 405  	    -- delete offer
16:21:07 406  	    delete from offer where id = v_offer.id;
16:21:07 407  
16:21:07 408  	  end loop;
16:21:07 409  
16:21:07 410  	  -- delete offer_chain_eligibility
16:21:07 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
16:21:07 412  
16:21:07 413  	  -- delete metadata
16:21:07 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
16:21:07 415  
16:21:07 416  	  -- delete offer chain
16:21:07 417  	  delete from offer_chain where id = v_offer_chain.id;
16:21:07 418  
16:21:07 419  	end loop;
16:21:07 420  
16:21:07 421  end;
16:21:07 422  
16:21:07 423  END PROCS_TEST_V16;
16:21:07 424  .
16:21:07 SQL> /

Package body created.

Elapsed: 00:00:00.08
16:21:07 SQL> 
16:21:07 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V16" AS
16:21:07   2  
16:21:07   3  REAL_TIME_CANCEL_REASON CONSTANT NUMBER := 41;
16:21:07   4  
16:21:07   5  PROCEDURE ANNOTATE_ACCOUNT (
16:21:07   6  /*
16:21:07   7  Throws exceptions:
16:21:07   8  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07   9  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07  10  */
16:21:07  11  	in_group_id   IN  NUMBER,
16:21:07  12  	in_agent_id   IN  NUMBER,
16:21:07  13  	in_note       IN  VARCHAR2,
16:21:07  14  	in_created_by IN  VARCHAR2
16:21:07  15  ) AS
16:21:07  16  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
16:21:07  17  -- VARIABLES
16:21:07  18  var_account_id	  NUMBER;
16:21:07  19  var_account_note_id NUMBER;
16:21:07  20  -- EXCEPTIONS
16:21:07  21  BAD_ACCOUNT_ID EXCEPTION;
16:21:07  22  BEGIN
16:21:07  23  
16:21:07  24  	-- Get account id
16:21:07  25  	BEGIN
16:21:07  26  	  SELECT
16:21:07  27  	    ACCOUNT.ID into var_account_id
16:21:07  28  	  FROM
16:21:07  29  	    ACCOUNT
16:21:07  30  	  WHERE
16:21:07  31  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07  32  	  EXCEPTION
16:21:07  33  	    WHEN NO_DATA_FOUND THEN
16:21:07  34  	      RAISE BAD_ACCOUNT_ID;
16:21:07  35  	END;
16:21:07  36  
16:21:07  37  	-- Insert new row into ACCOUNT_NOTE table
16:21:07  38  	PROCS_ACCOUNT_CRU_V16.CREATE_ACCOUNT_NOTE(
16:21:07  39  	  inout_account_note_id => var_account_note_id,
16:21:07  40  	  in_agent_id		=> in_agent_id,
16:21:07  41  	  in_account_id 	=> var_account_id,
16:21:07  42  	  in_note		=> in_note,
16:21:07  43  	  in_created_by 	=> in_created_by
16:21:07  44  	);
16:21:07  45  
16:21:07  46  EXCEPTION
16:21:07  47  WHEN BAD_ACCOUNT_ID THEN
16:21:07  48  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07  49  	  SPROC_NAME, 'No such group id');
16:21:07  50  WHEN OTHERS THEN
16:21:07  51  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07  52  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07  53  END ANNOTATE_ACCOUNT;
16:21:07  54  
16:21:07  55  /******************************************************************************/
16:21:07  56  
16:21:07  57  PROCEDURE ASSERT_ACCOUNT_EXISTS (
16:21:07  58  /*
16:21:07  59  Throws exceptions:
16:21:07  60  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07  61  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07  62  */
16:21:07  63  	in_group_id IN	NUMBER,
16:21:07  64  	out_exists  OUT NUMBER
16:21:07  65  ) AS
16:21:07  66  -- VARIABLES
16:21:07  67  var_found_id  NUMBER;
16:21:07  68  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
16:21:07  69  BEGIN
16:21:07  70  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
16:21:07  71  	out_exists := GLOBAL_CONSTANTS_V16.TRUE;
16:21:07  72  EXCEPTION
16:21:07  73  WHEN NO_DATA_FOUND THEN
16:21:07  74  	out_exists := GLOBAL_CONSTANTS_V16.FALSE;
16:21:07  75  WHEN OTHERS THEN
16:21:07  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07  78  END ASSERT_ACCOUNT_EXISTS;
16:21:07  79  
16:21:07  80  /******************************************************************************/
16:21:07  81  
16:21:07  82  PROCEDURE DISABLE_ACCOUNT (
16:21:07  83  /*
16:21:07  84  Throws exceptions:
16:21:07  85  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07  87  */
16:21:07  88  	in_group_id   IN NUMBER,
16:21:07  89  	in_updated_by IN VARCHAR2,
16:21:07  90  	in_note       IN VARCHAR2,
16:21:07  91  	in_agent_id   IN NUMBER
16:21:07  92  ) AS
16:21:07  93  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
16:21:07  94  var_account_id	      NUMBER;
16:21:07  95  current_account_status  NUMBER;
16:21:07  96  
16:21:07  97  var_active_subscriptions_num NUMBER;
16:21:07  98  var_pending_invoices_num	   NUMBER;
16:21:07  99  
16:21:07 100  -- EXCEPTIONS
16:21:07 101  BAD_ACOUNT_ID		EXCEPTION;
16:21:07 102  BAD_CURRENT_ACC_STATUS	EXCEPTION;
16:21:07 103  PENDING_INVOICES_FOUND	EXCEPTION;
16:21:07 104  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
16:21:07 105  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
16:21:07 106  EXCEPTION_MESSAGE 	VARCHAR2(1024);
16:21:07 107  BEGIN
16:21:07 108  
16:21:07 109  	-- Get account's status and id
16:21:07 110  	BEGIN
16:21:07 111  	  SELECT
16:21:07 112  	    ACCOUNT.ACCOUNT_STATUS_ID,
16:21:07 113  	    ACCOUNT.ID
16:21:07 114  	  INTO
16:21:07 115  	    current_account_status,
16:21:07 116  	    var_account_id
16:21:07 117  	  FROM ACCOUNT
16:21:07 118  	  WHERE
16:21:07 119  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07 120  	  EXCEPTION
16:21:07 121  	    WHEN NO_DATA_FOUND THEN
16:21:07 122  	      RAISE BAD_ACOUNT_ID;
16:21:07 123  	END;
16:21:07 124  
16:21:07 125  	-- For now, we can disable account whenever
16:21:07 126  	IF current_account_status = GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
16:21:07 127  	  RAISE BAD_CURRENT_ACC_STATUS;
16:21:07 128  	END IF;
16:21:07 129  
16:21:07 130  	-- Checks for out outstanding balances
16:21:07 131  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
16:21:07 132  	SELECT
16:21:07 133  	  COUNT(*) into var_pending_invoices_num
16:21:07 134  	FROM
16:21:07 135  	  LICENSE
16:21:07 136  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 137  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:21:07 138  	WHERE
16:21:07 139  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:07 140  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.INVOICE_OPEN FROM DUAL );
16:21:07 141  
16:21:07 142  	IF var_pending_invoices_num > 0 THEN
16:21:07 143  	  RAISE PENDING_INVOICES_FOUND;
16:21:07 144  	END IF;
16:21:07 145  
16:21:07 146  	SELECT
16:21:07 147  	  COUNT(*) into var_active_subscriptions_num
16:21:07 148  	FROM
16:21:07 149  	  SUBSCRIPTION
16:21:07 150  	WHERE
16:21:07 151  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:07 152  	  AND (
16:21:07 153  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:07 154  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
16:21:07 155  	  );
16:21:07 156  
16:21:07 157  	IF var_active_subscriptions_num > 0 THEN
16:21:07 158  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
16:21:07 159  	END IF;
16:21:07 160  
16:21:07 161  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
16:21:07 162  	  in_account_id        => var_account_id,
16:21:07 163  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_DISABLED,
16:21:07 164  	  in_updated_by        => in_updated_by
16:21:07 165  	);
16:21:07 166  
16:21:07 167  	-- Annotate account
16:21:07 168  	IF in_note IS NOT NULL THEN
16:21:07 169  	  BEGIN
16:21:07 170  	    PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
16:21:07 171  	      in_group_id   => in_group_id,
16:21:07 172  	      in_agent_id   => in_agent_id,
16:21:07 173  	      in_note	    => in_note,
16:21:07 174  	      in_created_by => in_updated_by
16:21:07 175  	    );
16:21:07 176  	    EXCEPTION
16:21:07 177  	      WHEN OTHERS THEN
16:21:07 178  		EXCEPTION_MESSAGE := SQLERRM;
16:21:07 179  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
16:21:07 180  	  END;
16:21:07 181  	END IF;
16:21:07 182  
16:21:07 183  EXCEPTION
16:21:07 184  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
16:21:07 185  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 186  	  SPROC_NAME, 'Account has active or suspended subsciptions');
16:21:07 187  WHEN BAD_CURRENT_ACC_STATUS THEN
16:21:07 188  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 189  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
16:21:07 190  WHEN PENDING_INVOICES_FOUND THEN
16:21:07 191  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 192  	  SPROC_NAME, 'Opened/Pending invoices founded');
16:21:07 193  WHEN BAD_ACOUNT_ID THEN
16:21:07 194  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 195  	  SPROC_NAME, 'No such account');
16:21:07 196  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
16:21:07 197  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 198  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
16:21:07 199  WHEN OTHERS THEN
16:21:07 200  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 201  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 202  END DISABLE_ACCOUNT;
16:21:07 203  
16:21:07 204  /******************************************************************************/
16:21:07 205  
16:21:07 206  PROCEDURE CREATE_ACTIVE_ACCOUNT(
16:21:07 207  /*
16:21:07 208  Throws exceptions:
16:21:07 209  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 210  APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR
16:21:07 211  */
16:21:07 212  	  in_created_by IN VARCHAR2,
16:21:07 213  	  in_group_id	IN NUMBER
16:21:07 214  ) AS
16:21:07 215  -- VARIABLES
16:21:07 216  SPROC_NAME      CONSTANT VARCHAR2(21) := 'CREATE_ACTIVE_ACCOUNT';
16:21:07 217  new_account_id  NUMBER;
16:21:07 218  temp_group_id   NUMBER;
16:21:07 219  -- EXCEPTIONS
16:21:07 220  GROUP_EXISTS_EXCEPTION EXCEPTION;
16:21:07 221  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 222  BEGIN
16:21:07 223  	-- Check if account already exists
16:21:07 224  	BEGIN
16:21:07 225  	  SELECT
16:21:07 226  	    ACCOUNT.GROUP_ID into temp_group_id
16:21:07 227  	  FROM
16:21:07 228  	    ACCOUNT
16:21:07 229  	  WHERE
16:21:07 230  	    ACCOUNT.GROUP_ID = in_group_id
16:21:07 231  	    AND ROWNUM <= 1;
16:21:07 232  
16:21:07 233  	  IF SQL%ROWCOUNT = 1 THEN
16:21:07 234  	    RAISE GROUP_EXISTS_EXCEPTION;
16:21:07 235  	  END IF;
16:21:07 236  
16:21:07 237  	  EXCEPTION
16:21:07 238  	    WHEN NO_DATA_FOUND THEN
16:21:07 239  	      NULL;
16:21:07 240  	END;
16:21:07 241  
16:21:07 242  	-- Insert new row into ACCOUNT table
16:21:07 243  	PROCS_ACCOUNT_CRU_V16.CREATE_ACCOUNT(
16:21:07 244  	  out_account_id	=> new_account_id,
16:21:07 245  	  in_account_status_id	=> GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE,
16:21:07 246  	  in_group_id		=> in_group_id,
16:21:07 247  	  in_created_by 	=> in_created_by,
16:21:07 248  	  in_system_category_id => GLOBAL_ENUMS_V16.SYSTEM_CATEGORY_LIVE
16:21:07 249  	);
16:21:07 250  
16:21:07 251  EXCEPTION
16:21:07 252  WHEN GROUP_EXISTS_EXCEPTION THEN
16:21:07 253  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
16:21:07 254  	  SPROC_NAME, 'Group already exists');
16:21:07 255  WHEN OTHERS THEN
16:21:07 256  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 257  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 258  END CREATE_ACTIVE_ACCOUNT;
16:21:07 259  
16:21:07 260  /******************************************************************************/
16:21:07 261  
16:21:07 262  PROCEDURE REACTIVATE_ACCOUNT (
16:21:07 263  /*
16:21:07 264  Throws exceptions:
16:21:07 265  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 266  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 267  */
16:21:07 268  	in_group_id   IN NUMBER,
16:21:07 269  	in_updated_by IN VARCHAR2,
16:21:07 270  	in_note       IN VARCHAR2,
16:21:07 271  	in_agent_id   IN NUMBER
16:21:07 272  ) AS
16:21:07 273  -- VARIABLES
16:21:07 274  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
16:21:07 275  var_account_id	      NUMBER;
16:21:07 276  current_account_status  NUMBER;
16:21:07 277  
16:21:07 278  -- EXCEPTIONS
16:21:07 279  BAD_CURRENT_ACC_STATUS EXCEPTION;
16:21:07 280  CAN_NOT_CREATE_NOTE    EXCEPTION;
16:21:07 281  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 282  BEGIN
16:21:07 283  	-- Get account id, status
16:21:07 284  	SELECT
16:21:07 285  	  ACCOUNT.ACCOUNT_STATUS_ID,
16:21:07 286  	  ACCOUNT.ID
16:21:07 287  	INTO
16:21:07 288  	  current_account_status,
16:21:07 289  	  var_account_id
16:21:07 290  	FROM ACCOUNT
16:21:07 291  	WHERE
16:21:07 292  	  ACCOUNT.GROUP_ID = in_group_id;
16:21:07 293  
16:21:07 294  	IF current_account_status != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
16:21:07 295  	  RAISE BAD_CURRENT_ACC_STATUS;
16:21:07 296  	END IF;
16:21:07 297  
16:21:07 298  	-- Change account status
16:21:07 299  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
16:21:07 300  	  in_account_id        => var_account_id,
16:21:07 301  	  in_updated_by        => in_updated_by,
16:21:07 302  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
16:21:07 303  	);
16:21:07 304  
16:21:07 305  	-- Add note
16:21:07 306  	BEGIN
16:21:07 307  	  PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
16:21:07 308  	    in_group_id   => in_group_id,
16:21:07 309  	    in_agent_id   => in_agent_id,
16:21:07 310  	    in_note	  => in_note,
16:21:07 311  	    in_created_by => in_updated_by
16:21:07 312  	  );
16:21:07 313  	  EXCEPTION
16:21:07 314  	    WHEN OTHERS THEN
16:21:07 315  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 316  	      RAISE CAN_NOT_CREATE_NOTE;
16:21:07 317  	END;
16:21:07 318  
16:21:07 319  EXCEPTION
16:21:07 320  WHEN BAD_CURRENT_ACC_STATUS THEN
16:21:07 321  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 322  	  SPROC_NAME, 'Current account status is not "frozen"');
16:21:07 323  WHEN NO_DATA_FOUND THEN
16:21:07 324  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 325  	  SPROC_NAME, 'Could not find account with given group ID');
16:21:07 326  WHEN CAN_NOT_CREATE_NOTE THEN
16:21:07 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 328  	  SPROC_NAME, 'Could not annotate account');
16:21:07 329  WHEN OTHERS THEN
16:21:07 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 332  END REACTIVATE_ACCOUNT;
16:21:07 333  
16:21:07 334  /******************************************************************************/
16:21:07 335  
16:21:07 336  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
16:21:07 337  /*
16:21:07 338  IN:
16:21:07 339  instr_status:
16:21:07 340  1 - get active instruments only (default)
16:21:07 341  0 - get inactive instruments only
16:21:07 342  
16:21:07 343  Throws exceptions:
16:21:07 344  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 345  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 346  */
16:21:07 347  	in_group_id	  IN NUMBER,
16:21:07 348  	out_result_cc_set OUT SYS_REFCURSOR,
16:21:07 349  	out_default_id	  OUT NUMBER,
16:21:07 350  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
16:21:07 351  ) AS
16:21:07 352  SPROC_NAME		 CONSTANT VARCHAR2(24) := 'GET_ACCOUNT_CREDIT_CARDS';
16:21:07 353  var_account_id		 NUMBER;
16:21:07 354  var_def_instrument_type_id NUMBER;
16:21:07 355  var_def_instrument_id	 NUMBER;
16:21:07 356  temp_cc_status_id 	 NUMBER;
16:21:07 357  
16:21:07 358  -- Exceptions
16:21:07 359  WRONG_INSTR_EXCEPTION	     EXCEPTION;
16:21:07 360  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
16:21:07 361  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
16:21:07 362  BEGIN
16:21:07 363  
16:21:07 364  	-- Get group id
16:21:07 365  	SELECT
16:21:07 366  	  ACCOUNT.ID INTO var_account_id
16:21:07 367  	FROM
16:21:07 368  	  ACCOUNT
16:21:07 369  	WHERE
16:21:07 370  	  ACCOUNT.GROUP_ID = in_group_id;
16:21:07 371  
16:21:07 372  	-- Check that incoming parameter is correct
16:21:07 373  	BEGIN
16:21:07 374  	  SELECT
16:21:07 375  	    CREDIT_CARD_STATUS.ID into temp_cc_status_id
16:21:07 376  	  FROM
16:21:07 377  	    CREDIT_CARD_STATUS
16:21:07 378  	  WHERE
16:21:07 379  	    CREDIT_CARD_STATUS.ID = in_instr_status;
16:21:07 380  	  EXCEPTION
16:21:07 381  	    WHEN NO_DATA_FOUND THEN
16:21:07 382  	      RAISE WRONG_INSTR_EXCEPTION;
16:21:07 383  	END;
16:21:07 384  
16:21:07 385  	-- Select all crdit cards for given account
16:21:07 386  	OPEN out_result_cc_set FOR
16:21:07 387  	SELECT
16:21:07 388  	  CREDIT_CARD.ID,
16:21:07 389  	  CREDIT_CARD.ACCOUNT_ID,
16:21:07 390  	  CREDIT_CARD.INSTRUMENT_NAME,
16:21:07 391  	  CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
16:21:07 392  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS,
16:21:07 393  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
16:21:07 394  	  CREDIT_CARD.STATE,
16:21:07 395  	  CREDIT_CARD.CITY,
16:21:07 396  	  CREDIT_CARD.POSTAL_CODE,
16:21:07 397  	  CREDIT_CARD.COUNTRY,
16:21:07 398  	  CREDIT_CARD.LAST_FOUR_CC,
16:21:07 399  	  CREDIT_CARD.EXPIRATION_DATE,
16:21:07 400  	  CREDIT_CARD.CREDIT_CARD_TYPE_ID,
16:21:07 401  	  CREDIT_CARD.SECRET_TOKEN,
16:21:07 402  	  CREDIT_CARD.CREATE_DATE,
16:21:07 403  	  CREDIT_CARD.CREATED_BY,
16:21:07 404  	  CREDIT_CARD.UPDATE_DATE,
16:21:07 405  	  CREDIT_CARD.UPDATED_BY,
16:21:07 406  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
16:21:07 407  	  CREDIT_CARD.PRIVATE_FIRST_NAME,
16:21:07 408  	  CREDIT_CARD.PRIVATE_LAST_NAME
16:21:07 409  	FROM
16:21:07 410  	  CREDIT_CARD
16:21:07 411  	WHERE
16:21:07 412  	  CREDIT_CARD.ACCOUNT_ID = var_account_id
16:21:07 413  	  AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_instr_status;
16:21:07 414  
16:21:07 415  	-- Get default credit card if exists
16:21:07 416  	BEGIN
16:21:07 417  	  PROCS_FIN_INSTRUMENTS_V16.GET_DEF_FINANCIAL_INSTRUMENT(
16:21:07 418  	    in_group_id 	   => in_group_id,
16:21:07 419  	    out_instrument_type_id => var_def_instrument_type_id,
16:21:07 420  	    out_instrument_id	   => var_def_instrument_id
16:21:07 421  	  );
16:21:07 422  	  EXCEPTION
16:21:07 423  	    WHEN OTHERS THEN
16:21:07 424  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 425  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
16:21:07 426  	END;
16:21:07 427  
16:21:07 428  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
16:21:07 429  	  out_default_id := var_def_instrument_id;
16:21:07 430  	ELSE
16:21:07 431  	  out_default_id := 0;
16:21:07 432  	END IF;
16:21:07 433  
16:21:07 434  EXCEPTION
16:21:07 435  WHEN NO_DATA_FOUND THEN
16:21:07 436  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 437  	  SPROC_NAME, 'No such account');
16:21:07 438  WHEN WRONG_INSTR_EXCEPTION THEN
16:21:07 439  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 440  	  SPROC_NAME, 'Wrong instrument status');
16:21:07 441  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
16:21:07 442  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 443  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
16:21:07 444  WHEN OTHERS THEN
16:21:07 445  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 446  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 447  END GET_ACCOUNT_CREDIT_CARDS;
16:21:07 448  
16:21:07 449  /******************************************************************************/
16:21:07 450  
16:21:07 451  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
16:21:07 452  /*
16:21:07 453  IN:
16:21:07 454  instr_status:
16:21:07 455  GLOBAL_CONSTANTS_V16.TRUE - get active instruments only (default)
16:21:07 456  GLOBAL_CONSTANTS_V16.FALSE - get inactive instruments only
16:21:07 457  
16:21:07 458  Throws exceptions:
16:21:07 459  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 460  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 461  */
16:21:07 462  	in_group_id	  IN NUMBER,
16:21:07 463  	out_result_gc_set OUT SYS_REFCURSOR,
16:21:07 464  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
16:21:07 465  ) AS
16:21:07 466  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
16:21:07 467  var_account_id NUMBER;
16:21:07 468  
16:21:07 469  -- Exceptions
16:21:07 470  WRONG_INSTR_EXCEPTION	 EXCEPTION;
16:21:07 471  BEGIN
16:21:07 472  
16:21:07 473  	-- Get account id
16:21:07 474  	SELECT
16:21:07 475  	  ACCOUNT.ID INTO var_account_id
16:21:07 476  	FROM
16:21:07 477  	  ACCOUNT
16:21:07 478  	WHERE
16:21:07 479  	  ACCOUNT.GROUP_ID = in_group_id;
16:21:07 480  
16:21:07 481  	-- Check that incoming data is correct
16:21:07 482  	IF in_instr_status != GLOBAL_CONSTANTS_V16.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V16.FALSE THEN
16:21:07 483  	  RAISE WRONG_INSTR_EXCEPTION;
16:21:07 484  	END IF;
16:21:07 485  
16:21:07 486  	OPEN out_result_gc_set FOR
16:21:07 487  	SELECT
16:21:07 488  	  GIFT_CERTIFICATE.ID,
16:21:07 489  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
16:21:07 490  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
16:21:07 491  	  GIFT_CERTIFICATE.PURCHASE_DATE,
16:21:07 492  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
16:21:07 493  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
16:21:07 494  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
16:21:07 495  	  GIFT_CERTIFICATE.CODE,
16:21:07 496  	  GIFT_CERTIFICATE.CREATE_DATE,
16:21:07 497  	  GIFT_CERTIFICATE.CREATED_BY,
16:21:07 498  	  GIFT_CERTIFICATE.UPDATE_DATE,
16:21:07 499  	  GIFT_CERTIFICATE.UPDATED_BY,
16:21:07 500  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
16:21:07 501  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
16:21:07 502  	  GIFT_CERTIFICATE.SENDER_NAME,
16:21:07 503  	  GIFT_CERTIFICATE.SENDER_EMAIL,
16:21:07 504  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
16:21:07 505  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
16:21:07 506  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
16:21:07 507  	  GIFT_CERTIFICATE.GIFT_MESSAGE
16:21:07 508  	FROM
16:21:07 509  	  GIFT_CERTIFICATE
16:21:07 510  	WHERE
16:21:07 511  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
16:21:07 512  	  AND (
16:21:07 513  		( in_instr_status = GLOBAL_CONSTANTS_V16.TRUE AND
16:21:07 514  		  (
16:21:07 515  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
16:21:07 516  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
16:21:07 517  		  )
16:21:07 518  		)
16:21:07 519  		OR
16:21:07 520  		(
16:21:07 521  		  in_instr_status = GLOBAL_CONSTANTS_V16.FALSE AND
16:21:07 522  		  (
16:21:07 523  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
16:21:07 524  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
16:21:07 525  		  )
16:21:07 526  		)
16:21:07 527  	      );
16:21:07 528  
16:21:07 529  EXCEPTION
16:21:07 530  WHEN NO_DATA_FOUND THEN
16:21:07 531  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 532  	  SPROC_NAME, 'Can not find account with given group id');
16:21:07 533  WHEN WRONG_INSTR_EXCEPTION THEN
16:21:07 534  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 535  	  SPROC_NAME, 'Wrong gift certificate type');
16:21:07 536  WHEN OTHERS THEN
16:21:07 537  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 538  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 539  END GET_ACCOUNT_GIFT_CERTIFICATES;
16:21:07 540  
16:21:07 541  /******************************************************************************/
16:21:07 542  
16:21:07 543  PROCEDURE GET_ACCOUNT_INFO  (
16:21:07 544  /*
16:21:07 545  Throws exceptions:
16:21:07 546  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 547  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 548  */
16:21:07 549  	  in_group_id	    IN	NUMBER,
16:21:07 550  	  out_account_info  OUT SYS_REFCURSOR
16:21:07 551  ) AS
16:21:07 552  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
16:21:07 553  var_account_id  NUMBER;
16:21:07 554  BEGIN
16:21:07 555  
16:21:07 556  	-- Get account id
16:21:07 557  	SELECT
16:21:07 558  	  ACCOUNT.ID INTO var_account_id
16:21:07 559  	FROM
16:21:07 560  	  ACCOUNT
16:21:07 561  	WHERE
16:21:07 562  	  ACCOUNT.GROUP_ID = in_group_id;
16:21:07 563  
16:21:07 564  	-- Get account info
16:21:07 565  	OPEN out_account_info FOR
16:21:07 566  	  SELECT
16:21:07 567  	    ACCOUNT.ACCOUNT_STATUS_ID
16:21:07 568  	  FROM ACCOUNT
16:21:07 569  	  WHERE
16:21:07 570  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07 571  
16:21:07 572  EXCEPTION
16:21:07 573  WHEN NO_DATA_FOUND THEN
16:21:07 574  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 575  	  SPROC_NAME, 'No such account');
16:21:07 576  WHEN OTHERS THEN
16:21:07 577  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 578  	  SPROC_NAME, 'Unknown Error', SQLERRM);
16:21:07 579  END GET_ACCOUNT_INFO;
16:21:07 580  
16:21:07 581  /******************************************************************************/
16:21:07 582  
16:21:07 583  PROCEDURE GET_ACCOUNT_NOTES (
16:21:07 584  /*
16:21:07 585  Throws exceptions:
16:21:07 586  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 587  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 588  */
16:21:07 589  	  in_group_id	 IN  NUMBER,
16:21:07 590  	  out_result_set OUT SYS_REFCURSOR
16:21:07 591  ) AS
16:21:07 592  -- VARIABLES
16:21:07 593  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
16:21:07 594  var_account_id NUMBER;
16:21:07 595  -- EXCEPTIONS
16:21:07 596  BAD_ACCOUNT_ID EXCEPTION;
16:21:07 597  BEGIN
16:21:07 598  
16:21:07 599  	-- Check that account is exists
16:21:07 600  	BEGIN
16:21:07 601  	  SELECT
16:21:07 602  	    ACCOUNT.ID into var_account_id
16:21:07 603  	  FROM
16:21:07 604  	    ACCOUNT
16:21:07 605  	  WHERE
16:21:07 606  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07 607  	  EXCEPTION
16:21:07 608  	    WHEN NO_DATA_FOUND THEN
16:21:07 609  	      RAISE BAD_ACCOUNT_ID;
16:21:07 610  	END;
16:21:07 611  
16:21:07 612  	-- Get account notes
16:21:07 613  	OPEN out_result_set FOR
16:21:07 614  	SELECT
16:21:07 615  	  ACCOUNT_NOTE.ACCOUNT_ID,
16:21:07 616  	  ACCOUNT_NOTE.AGENT_ID,
16:21:07 617  	  ACCOUNT_NOTE.CREATE_DATE,
16:21:07 618  	  ACCOUNT_NOTE.CREATED_BY,
16:21:07 619  	  ACCOUNT_NOTE.ID,
16:21:07 620  	  ACCOUNT_NOTE.NOTE
16:21:07 621  	FROM
16:21:07 622  	  ACCOUNT_NOTE
16:21:07 623  	WHERE
16:21:07 624  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
16:21:07 625  	ORDER BY
16:21:07 626  	  ACCOUNT_NOTE.CREATE_DATE ASC;
16:21:07 627  
16:21:07 628  EXCEPTION
16:21:07 629  WHEN BAD_ACCOUNT_ID THEN
16:21:07 630  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 631  	  SPROC_NAME, 'No such account');
16:21:07 632  WHEN OTHERS THEN
16:21:07 633  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 634  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 635  END GET_ACCOUNT_NOTES;
16:21:07 636  
16:21:07 637  /******************************************************************************/
16:21:07 638  
16:21:07 639  PROCEDURE GET_ACCOUNT_PAYPALS(
16:21:07 640  /*
16:21:07 641  IN:
16:21:07 642  instr_status:
16:21:07 643  1 - get active instruments only (default)
16:21:07 644  0 - get inactive instruments only
16:21:07 645  
16:21:07 646  Throws exceptions:
16:21:07 647  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 648  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 649  */
16:21:07 650  	in_group_id	  IN  NUMBER,
16:21:07 651  	out_result_pp_set OUT SYS_REFCURSOR,
16:21:07 652  	out_default_id	  OUT NUMBER,
16:21:07 653  	in_instr_status   IN  NUMBER DEFAULT GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
16:21:07 654  ) AS
16:21:07 655  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACCOUNT_PAYPALS';
16:21:07 656  -- VARIABLES
16:21:07 657  var_account_id NUMBER;
16:21:07 658  var_def_instrument_type_id NUMBER;
16:21:07 659  var_def_instrument_id	 NUMBER;
16:21:07 660  -- EXCEPTIONS
16:21:07 661  WRONG_INSTR_EXCEPTION	 EXCEPTION;
16:21:07 662  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
16:21:07 663  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
16:21:07 664  BEGIN
16:21:07 665  
16:21:07 666  	-- Get account id
16:21:07 667  	SELECT
16:21:07 668  	  ACCOUNT.ID INTO var_account_id
16:21:07 669  	FROM
16:21:07 670  	  ACCOUNT
16:21:07 671  	WHERE
16:21:07 672  	  ACCOUNT.GROUP_ID = in_group_id;
16:21:07 673  
16:21:07 674  	-- Check that all passed agruments are valid
16:21:07 675  	IF in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
16:21:07 676  	  AND in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
16:21:07 677  	  AND in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
16:21:07 678  	  RAISE WRONG_INSTR_EXCEPTION;
16:21:07 679  	END IF;
16:21:07 680  
16:21:07 681  	-- Retreiving information about paypals
16:21:07 682  	OPEN out_result_pp_set FOR
16:21:07 683  	SELECT
16:21:07 684  	  PAYPAL.ID,
16:21:07 685  	  PAYPAL.ACCOUNT_ID,
16:21:07 686  	  PAYPAL.INSTRUMENT_NAME,
16:21:07 687  	  PAYPAL.PRIVATE_EMAIL_ADDRESS,
16:21:07 688  	  PAYPAL.CREATE_DATE,
16:21:07 689  	  PAYPAL.CREATED_BY,
16:21:07 690  	  PAYPAL.UPDATE_DATE,
16:21:07 691  	  PAYPAL.UPDATED_BY,
16:21:07 692  	  PAYPAL.PAYPAL_STATUS_ID,
16:21:07 693  	  PAYPAL.PRIVATE_STREET_ADDRESS,
16:21:07 694  	  PAYPAL.PRIVATE_STREET_ADDRESS2,
16:21:07 695  	  PAYPAL.STATE,
16:21:07 696  	  PAYPAL.CITY,
16:21:07 697  	  PAYPAL.POSTAL_CODE,
16:21:07 698  	  PAYPAL.COUNTRY,
16:21:07 699  	  PAYPAL.EXPIRATION_DATE,
16:21:07 700  	  PAYPAL.SECRET_TOKEN
16:21:07 701  	FROM
16:21:07 702  	  PAYPAL
16:21:07 703  	WHERE
16:21:07 704  	  PAYPAL.ACCOUNT_ID = var_account_id
16:21:07 705  	  AND PAYPAL.PAYPAL_STATUS_ID = in_instr_status;
16:21:07 706  
16:21:07 707  	-- Get default credit card if exists
16:21:07 708  	BEGIN
16:21:07 709  	  PROCS_FIN_INSTRUMENTS_V16.GET_DEF_FINANCIAL_INSTRUMENT(
16:21:07 710  	    in_group_id 	   => in_group_id,
16:21:07 711  	    out_instrument_type_id => var_def_instrument_type_id,
16:21:07 712  	    out_instrument_id	   => var_def_instrument_id
16:21:07 713  	  );
16:21:07 714  	  EXCEPTION
16:21:07 715  	    WHEN OTHERS THEN
16:21:07 716  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 717  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
16:21:07 718  	END;
16:21:07 719  
16:21:07 720  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
16:21:07 721  	  out_default_id := var_def_instrument_id;
16:21:07 722  	ELSE
16:21:07 723  	  out_default_id := 0;
16:21:07 724  	END IF;
16:21:07 725  
16:21:07 726  EXCEPTION
16:21:07 727  WHEN NO_DATA_FOUND THEN
16:21:07 728  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 729  	  SPROC_NAME, 'Could not find account with given group id');
16:21:07 730  WHEN WRONG_INSTR_EXCEPTION THEN
16:21:07 731  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 732  	  SPROC_NAME, 'Bad paypal status id');
16:21:07 733  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
16:21:07 734  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 735  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
16:21:07 736  WHEN OTHERS THEN
16:21:07 737  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 738  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 739  END GET_ACCOUNT_PAYPALS;
16:21:07 740  
16:21:07 741  /******************************************************************************/
16:21:07 742  
16:21:07 743  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
16:21:07 744  /*
16:21:07 745  Throws exceptions:
16:21:07 746  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 747  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 748  */
16:21:07 749  	  in_group_id	 IN  NUMBER,
16:21:07 750  	  in_start_date  IN DATE,
16:21:07 751  	  in_end_date	 IN DATE,
16:21:07 752  	  in_status	 IN NUMBER,
16:21:07 753  	  in_group_account_type IN VARCHAR2,
16:21:07 754  	  out_result_set OUT SYS_REFCURSOR
16:21:07 755  ) AS
16:21:07 756  -- VARIABLES
16:21:07 757  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
16:21:07 758  var_account_id NUMBER;
16:21:07 759  -- EXCEPTIONS
16:21:07 760  BAD_GROUP_ID	      EXCEPTION;
16:21:07 761  BAD_SUBSCRIPTION_STATUS EXCEPTION;
16:21:07 762  BEGIN
16:21:07 763  	-- Check that all passed data is correct
16:21:07 764  	IF in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
16:21:07 765  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
16:21:07 766  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED
16:21:07 767  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
16:21:07 768  	THEN
16:21:07 769  	  RAISE BAD_SUBSCRIPTION_STATUS;
16:21:07 770  	END IF;
16:21:07 771  
16:21:07 772  	-- Get account id
16:21:07 773  	BEGIN
16:21:07 774  	  SELECT
16:21:07 775  	    ACCOUNT.ID INTO var_account_id
16:21:07 776  	  FROM
16:21:07 777  	    ACCOUNT
16:21:07 778  	  WHERE
16:21:07 779  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07 780  	  EXCEPTION
16:21:07 781  	    WHEN NO_DATA_FOUND THEN
16:21:07 782  	      RAISE BAD_GROUP_ID;
16:21:07 783  	END;
16:21:07 784  
16:21:07 785  	-- Get information about account subscriptions
16:21:07 786  	OPEN out_result_set FOR
16:21:07 787  	SELECT
16:21:07 788  	  in_group_id AS "GROUP_ID",
16:21:07 789  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
16:21:07 790  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
16:21:07 791  	  SUBSCRIPTION.PURCHASE_DATE,
16:21:07 792  	  SUBSCRIPTION.SUSPEND_DATE,
16:21:07 793  	  SUBSCRIPTION.REACTIVATION_DATE,
16:21:07 794  	  SUBSCRIPTION.CANCELLATION_DATE,
16:21:07 795  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
16:21:07 796  	  SUBSCRIPTION.INSTRUMENT_ID,
16:21:07 797  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
16:21:07 798  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
16:21:07 799  	  OFFER_CHAIN.NAME,
16:21:07 800  	  OFFER_CHAIN.DESCRIPTION,
16:21:07 801  	  OFFER_CHAIN.PRODUCT_URI,
16:21:07 802  	  PROCS_SUBSCRIPTION_V16.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
16:21:07 803  	  PROCS_SUBSCRIPTION_V16.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
16:21:07 804  	  PROCS_SUBSCRIPTION_V16.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
16:21:07 805  	  PROCS_SUBSCRIPTION_V16.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
16:21:07 806  	  PROCS_SUBSCRIPTION_V16.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
16:21:07 807  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
16:21:07 808  	  (
16:21:07 809  	    SELECT
16:21:07 810  	      MAX(ENTITLEMENT_END_DATE)
16:21:07 811  	      FROM LICENSE
16:21:07 812  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 813  	  )
16:21:07 814  	  as "ENT_END_DATE",
16:21:07 815  	  (
16:21:07 816  	    SELECT
16:21:07 817  	      MIN(START_DATE)
16:21:07 818  	      FROM LICENSE
16:21:07 819  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 820  	  )
16:21:07 821  	  as "ENT_START_DATE",
16:21:07 822  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
16:21:07 823  	  GROUP_ACCOUNT.ID GA_ID,
16:21:07 824  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
16:21:07 825  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
16:21:07 826  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
16:21:07 827  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
16:21:07 828  	  GROUP_ACCOUNT.PHONE GA_PHONE,
16:21:07 829  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
16:21:07 830  	  GROUP_ACCOUNT.SEATS GA_SEATS,
16:21:07 831  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
16:21:07 832  	  GROUP_ACCOUNT.IP GA_IP,
16:21:07 833  	  PROCS_SUBSCRIPTION_V16.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE
16:21:07 834  	FROM
16:21:07 835  	  SUBSCRIPTION
16:21:07 836  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 837  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
16:21:07 838  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
16:21:07 839  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
16:21:07 840  	WHERE
16:21:07 841  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:07 842  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
16:21:07 843  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
16:21:07 844  	  AND PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
16:21:07 845  	  AND PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
16:21:07 846  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
16:21:07 847  
16:21:07 848  EXCEPTION
16:21:07 849  WHEN BAD_SUBSCRIPTION_STATUS THEN
16:21:07 850  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 851  	  SPROC_NAME, 'Bad subscription status');
16:21:07 852  WHEN BAD_GROUP_ID THEN
16:21:07 853  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 854  	  SPROC_NAME, 'Can not find account with given group id');
16:21:07 855  WHEN OTHERS THEN
16:21:07 856  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 857  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 858  END GET_ACCOUNT_SUBSCRIPTIONS;
16:21:07 859  
16:21:07 860  /******************************************************************************/
16:21:07 861  
16:21:07 862  PROCEDURE FREEZE_ACCOUNT (
16:21:07 863  /*
16:21:07 864  Throws exceptions:
16:21:07 865  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 866  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 867  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 868  */
16:21:07 869  	in_group_id   IN NUMBER,
16:21:07 870  	in_updated_by IN VARCHAR2,
16:21:07 871  	in_note       IN VARCHAR2,
16:21:07 872  	in_agent_id   IN NUMBER
16:21:07 873  ) AS
16:21:07 874  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
16:21:07 875  -- VARIABLES
16:21:07 876  var_account_id	    NUMBER;
16:21:07 877  var_account_status_id NUMBER;
16:21:07 878  -- EXCEPTIONS
16:21:07 879  BAD_GROUP_ID	    EXCEPTION;
16:21:07 880  BAD_ACCOUNT_STATUS_ID EXCEPTION;
16:21:07 881  CAN_NOT_CREATE_NOTE   EXCEPTION;
16:21:07 882  EXCEPTION_MESSAGE     VARCHAR2(1024);
16:21:07 883  BEGIN
16:21:07 884  
16:21:07 885  	-- Get account status, account id
16:21:07 886  	BEGIN
16:21:07 887  	  SELECT
16:21:07 888  	    ACCOUNT.ID,
16:21:07 889  	    ACCOUNT.ACCOUNT_STATUS_ID
16:21:07 890  	    into
16:21:07 891  	    var_account_id,
16:21:07 892  	    var_account_status_id
16:21:07 893  	  FROM
16:21:07 894  	    ACCOUNT
16:21:07 895  	  WHERE
16:21:07 896  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07 897  	  EXCEPTION
16:21:07 898  	    WHEN NO_DATA_FOUND THEN
16:21:07 899  	      RAISE BAD_GROUP_ID;
16:21:07 900  	END;
16:21:07 901  
16:21:07 902  	-- We can freeze only ACTIVE accounts
16:21:07 903  	IF var_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
16:21:07 904  	  AND var_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
16:21:07 905  	  RAISE BAD_ACCOUNT_STATUS_ID;
16:21:07 906  	END IF;
16:21:07 907  
16:21:07 908  	-- Set account status
16:21:07 909  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
16:21:07 910  	  in_account_id        => var_account_id,
16:21:07 911  	  in_updated_by        => in_updated_by,
16:21:07 912  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_FROZEN
16:21:07 913  	);
16:21:07 914  
16:21:07 915  	-- Annotate account
16:21:07 916  	BEGIN
16:21:07 917  	  PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
16:21:07 918  	    in_group_id   => in_group_id,
16:21:07 919  	    in_agent_id   => in_agent_id,
16:21:07 920  	    in_note	  => in_note,
16:21:07 921  	    in_created_by => in_updated_by
16:21:07 922  	  );
16:21:07 923  	  EXCEPTION
16:21:07 924  	    WHEN OTHERS THEN
16:21:07 925  	      EXCEPTION_MESSAGE := SQLERRM;
16:21:07 926  	      RAISE CAN_NOT_CREATE_NOTE;
16:21:07 927  	END;
16:21:07 928  
16:21:07 929  EXCEPTION
16:21:07 930  WHEN BAD_GROUP_ID THEN
16:21:07 931  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 932  	  SPROC_NAME, 'No such group id');
16:21:07 933  WHEN BAD_ACCOUNT_STATUS_ID THEN
16:21:07 934  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
16:21:07 935  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
16:21:07 936  WHEN CAN_NOT_CREATE_NOTE THEN
16:21:07 937  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
16:21:07 938  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
16:21:07 939  WHEN OTHERS THEN
16:21:07 940  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 941  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 942  END FREEZE_ACCOUNT;
16:21:07 943  
16:21:07 944  /******************************************************************************/
16:21:07 945  
16:21:07 946  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
16:21:07 947  /*
16:21:07 948  Throws exceptions:
16:21:07 949  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 950  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 951  */
16:21:07 952  	in_group_id	   IN  NUMBER,
16:21:07 953  	in_subscription_id IN NUMBER,
16:21:07 954  	out_result_set	   OUT SYS_REFCURSOR
16:21:07 955  ) AS
16:21:07 956  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
16:21:07 957  -- VARIABLES
16:21:07 958  var_account_id	   NUMBER;
16:21:07 959  temp_subscription_id NUMBER;
16:21:07 960  -- EXCEPTIONS
16:21:07 961  BAD_GROUP_ID	  EXCEPTION;
16:21:07 962  BAD_SUBSCRIPTION_ID EXCEPTION;
16:21:07 963  BEGIN
16:21:07 964  	-- Get account id
16:21:07 965  	BEGIN
16:21:07 966  	  SELECT
16:21:07 967  	    ACCOUNT.ID into var_account_id
16:21:07 968  	  FROM
16:21:07 969  	    ACCOUNT
16:21:07 970  	  WHERE
16:21:07 971  	    ACCOUNT.GROUP_ID = in_group_id;
16:21:07 972  	  EXCEPTION
16:21:07 973  	    WHEN NO_DATA_FOUND THEN
16:21:07 974  	      RAISE BAD_GROUP_ID;
16:21:07 975  	END;
16:21:07 976  
16:21:07 977  	-- Check that subscription exists
16:21:07 978  	BEGIN
16:21:07 979  	  IF in_subscription_id IS NOT NULL THEN
16:21:07 980  	    SELECT
16:21:07 981  	      SUBSCRIPTION.ID into temp_subscription_id
16:21:07 982  	    FROM
16:21:07 983  	      SUBSCRIPTION
16:21:07 984  	    WHERE
16:21:07 985  	      SUBSCRIPTION.ID = in_subscription_id;
16:21:07 986  	  END IF;
16:21:07 987  	  EXCEPTION
16:21:07 988  	    WHEN NO_DATA_FOUND THEN
16:21:07 989  	      RAISE BAD_SUBSCRIPTION_ID;
16:21:07 990  	END;
16:21:07 991  
16:21:07 992  	OPEN out_result_set FOR
16:21:07 993  	SELECT DISTINCT
16:21:07 994  	  INVOICE.ID as "INVOICE_ID",
16:21:07 995  	  INVOICE.CREATE_DATE,
16:21:07 996  	  INVOICE.INVOICE_STATUS_ID,
16:21:07 997  	  PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
16:21:07 998  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
16:21:07 999  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
16:21:07 1000  	   SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
16:21:07 1001  	   NULL as "GC_CODE",
16:21:07 1002  	   NULL as "GC_ID"
16:21:07 1003  	 FROM
16:21:07 1004  	   LICENSE
16:21:07 1005  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 1006  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:21:07 1007  	   INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 1008  	 WHERE
16:21:07 1009  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:07 1010  	   AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
16:21:07 1011  	   AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
16:21:07 1012  
16:21:07 1013  EXCEPTION
16:21:07 1014  WHEN BAD_GROUP_ID THEN
16:21:07 1015  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1016  	   SPROC_NAME, 'No such account');
16:21:07 1017  WHEN BAD_SUBSCRIPTION_ID THEN
16:21:07 1018  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1019  	   SPROC_NAME, 'No such subscription');
16:21:07 1020  WHEN OTHERS THEN
16:21:07 1021  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1022  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1023  END GET_ACCOUNT_SUBSCR_INVOICES;
16:21:07 1024  
16:21:07 1025  /******************************************************************************/
16:21:07 1026  
16:21:07 1027  PROCEDURE GET_ACCOUNT_GC_INVOICES (
16:21:07 1028  /*
16:21:07 1029  Throws exceptions:
16:21:07 1030  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1031  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1032  */
16:21:07 1033  	 in_group_id	IN  NUMBER,
16:21:07 1034  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1035  ) AS
16:21:07 1036  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
16:21:07 1037  -- VARIABLES
16:21:07 1038  var_account_id NUMBER;
16:21:07 1039  -- EXCEPTIONS
16:21:07 1040  BAD_GROUP_ID EXCEPTION;
16:21:07 1041  BEGIN
16:21:07 1042  	 -- Get account id
16:21:07 1043  	 BEGIN
16:21:07 1044  	   SELECT
16:21:07 1045  	     ACCOUNT.ID into var_account_id
16:21:07 1046  	   FROM
16:21:07 1047  	     ACCOUNT
16:21:07 1048  	   WHERE
16:21:07 1049  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1050  	   EXCEPTION
16:21:07 1051  	     WHEN NO_DATA_FOUND THEN
16:21:07 1052  	       RAISE BAD_GROUP_ID;
16:21:07 1053  	 END;
16:21:07 1054  
16:21:07 1055  	 -- Get invoices
16:21:07 1056  	 OPEN out_result_set FOR
16:21:07 1057  	 SELECT DISTINCT
16:21:07 1058  	   INVOICE.ID as "INVOICE_ID",
16:21:07 1059  	   INVOICE.CREATE_DATE,
16:21:07 1060  	   INVOICE.INVOICE_STATUS_ID,
16:21:07 1061  	   PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
16:21:07 1062  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
16:21:07 1063  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
16:21:07 1064  	   NULL as "SUBSCRIPTION_ID",
16:21:07 1065  	   GIFT_CERTIFICATE.CODE as "GC_CODE",
16:21:07 1066  	   GIFT_CERTIFICATE.ID as "GC_ID"
16:21:07 1067  	 FROM
16:21:07 1068  	   GIFT_CERTIFICATE
16:21:07 1069  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
16:21:07 1070  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 1071  	 WHERE
16:21:07 1072  	   ROWNUM <= 100 AND
16:21:07 1073  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
16:21:07 1074  
16:21:07 1075  EXCEPTION
16:21:07 1076  WHEN BAD_GROUP_ID THEN
16:21:07 1077  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1078  	   SPROC_NAME, 'No such account');
16:21:07 1079  WHEN OTHERS THEN
16:21:07 1080  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1081  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1082  END GET_ACCOUNT_GC_INVOICES;
16:21:07 1083  
16:21:07 1084  /******************************************************************************/
16:21:07 1085  -- norlov: #38580
16:21:07 1086  PROCEDURE GET_GC_INVOICE (
16:21:07 1087  /*
16:21:07 1088  Throws exceptions:
16:21:07 1089  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1090  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1091  */
16:21:07 1092  	 in_group_id	IN  NUMBER,
16:21:07 1093  	 in_gc_code	IN  VARCHAR2,
16:21:07 1094  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1095  ) AS
16:21:07 1096  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
16:21:07 1097  -- VARIABLES
16:21:07 1098  var_account_id NUMBER;
16:21:07 1099  -- EXCEPTIONS
16:21:07 1100  BAD_GROUP_ID EXCEPTION;
16:21:07 1101  BEGIN
16:21:07 1102  	 -- Get account id
16:21:07 1103  	 BEGIN
16:21:07 1104  	   SELECT
16:21:07 1105  	     ACCOUNT.ID into var_account_id
16:21:07 1106  	   FROM
16:21:07 1107  	     ACCOUNT
16:21:07 1108  	   WHERE
16:21:07 1109  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1110  	   EXCEPTION
16:21:07 1111  	     WHEN NO_DATA_FOUND THEN
16:21:07 1112  	       RAISE BAD_GROUP_ID;
16:21:07 1113  	 END;
16:21:07 1114  
16:21:07 1115  	 -- Get invoice for the GC
16:21:07 1116  	 OPEN out_result_set FOR
16:21:07 1117  	 SELECT DISTINCT
16:21:07 1118  	   INVOICE.ID as "INVOICE_ID",
16:21:07 1119  	   INVOICE.CREATE_DATE,
16:21:07 1120  	   INVOICE.INVOICE_STATUS_ID,
16:21:07 1121  	   PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
16:21:07 1122  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
16:21:07 1123  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
16:21:07 1124  	   NULL as "SUBSCRIPTION_ID",
16:21:07 1125  	   GIFT_CERTIFICATE.CODE as "GC_CODE"
16:21:07 1126  	 FROM
16:21:07 1127  	   GIFT_CERTIFICATE
16:21:07 1128  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
16:21:07 1129  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:21:07 1130  	 WHERE
16:21:07 1131  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
16:21:07 1132  	   AND GIFT_CERTIFICATE.CODE = in_gc_code;
16:21:07 1133  
16:21:07 1134  EXCEPTION
16:21:07 1135  WHEN BAD_GROUP_ID THEN
16:21:07 1136  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1137  	   SPROC_NAME, 'No such account');
16:21:07 1138  WHEN OTHERS THEN
16:21:07 1139  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1140  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1141  END GET_GC_INVOICE;
16:21:07 1142  /******************************************************************************/
16:21:07 1143  
16:21:07 1144  PROCEDURE GET_ACCOUNT_PRODUCTS (
16:21:07 1145  /*
16:21:07 1146  Throws exceptions:
16:21:07 1147  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1148  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1149  */
16:21:07 1150  	 in_group_id	IN  NUMBER,
16:21:07 1151  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1152  ) AS
16:21:07 1153  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
16:21:07 1154  -- VARIABLES
16:21:07 1155  var_account_id NUMBER;
16:21:07 1156  -- EXCEPTIONS
16:21:07 1157  BAD_GROUP_ID EXCEPTION;
16:21:07 1158  BEGIN
16:21:07 1159  	 -- Get account id
16:21:07 1160  	 BEGIN
16:21:07 1161  	   SELECT
16:21:07 1162  	     ACCOUNT.ID into var_account_id
16:21:07 1163  	   FROM
16:21:07 1164  	     ACCOUNT
16:21:07 1165  	   WHERE
16:21:07 1166  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1167  	   EXCEPTION
16:21:07 1168  	     WHEN NO_DATA_FOUND THEN
16:21:07 1169  	       RAISE BAD_GROUP_ID;
16:21:07 1170  	 END;
16:21:07 1171  
16:21:07 1172  	 OPEN out_result_set FOR
16:21:07 1173  	 SELECT DISTINCT
16:21:07 1174  	   PRODUCT.ID,
16:21:07 1175  	   PRODUCT.NAME
16:21:07 1176  	 FROM
16:21:07 1177  	   PRODUCT
16:21:07 1178  	 WHERE
16:21:07 1179  	   PRODUCT.ID IN (
16:21:07 1180  	     SELECT DISTINCT
16:21:07 1181  	       PRODUCT_OFFERING.PRODUCT_ID
16:21:07 1182  	     FROM
16:21:07 1183  	       PRODUCT_OFFERING
16:21:07 1184  	     WHERE
16:21:07 1185  	       PRODUCT_OFFERING.ID IN (
16:21:07 1186  		 SELECT DISTINCT
16:21:07 1187  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:21:07 1188  		 FROM
16:21:07 1189  		   OFFER_PRODUCT_OFFERING
16:21:07 1190  		 WHERE
16:21:07 1191  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:21:07 1192  		     SELECT DISTINCT
16:21:07 1193  		       OFFER_OFFER_CHAIN.OFFER_ID
16:21:07 1194  		     FROM
16:21:07 1195  		       OFFER_OFFER_CHAIN
16:21:07 1196  		     WHERE
16:21:07 1197  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
16:21:07 1198  			 SELECT DISTINCT
16:21:07 1199  			   SUBSCRIPTION.OFFER_CHAIN_ID
16:21:07 1200  			 FROM
16:21:07 1201  			   SUBSCRIPTION
16:21:07 1202  			 WHERE
16:21:07 1203  			   SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:07 1204  		       )
16:21:07 1205  		   )
16:21:07 1206  	       )
16:21:07 1207  	   );
16:21:07 1208  
16:21:07 1209  EXCEPTION
16:21:07 1210  WHEN BAD_GROUP_ID THEN
16:21:07 1211  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1212  	   SPROC_NAME, 'No such account');
16:21:07 1213  WHEN OTHERS THEN
16:21:07 1214  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1216  END GET_ACCOUNT_PRODUCTS;
16:21:07 1217  
16:21:07 1218  /******************************************************************************/
16:21:07 1219  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
16:21:07 1220  /*
16:21:07 1221  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:07 1222  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1223  */
16:21:07 1224  	 in_group_id IN NUMBER,
16:21:07 1225  	 out_result_set     OUT SYS_REFCURSOR
16:21:07 1226  ) AS
16:21:07 1227  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
16:21:07 1228  -- VARIABLES
16:21:07 1229  var_account_id NUMBER;
16:21:07 1230  -- EXCEPTIONS
16:21:07 1231  BAD_GROUP_ID EXCEPTION;
16:21:07 1232  BEGIN
16:21:07 1233  	  -- Get account id
16:21:07 1234  	 BEGIN
16:21:07 1235  	   SELECT
16:21:07 1236  	     ACCOUNT.ID into var_account_id
16:21:07 1237  	   FROM
16:21:07 1238  	     ACCOUNT
16:21:07 1239  	   WHERE
16:21:07 1240  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1241  	   EXCEPTION
16:21:07 1242  	     WHEN NO_DATA_FOUND THEN
16:21:07 1243  	       RAISE BAD_GROUP_ID;
16:21:07 1244  	 END;
16:21:07 1245  
16:21:07 1246  	 OPEN out_result_set FOR
16:21:07 1247  	 SELECT DISTINCT
16:21:07 1248  	   PRODUCT_OFFERING.ID,
16:21:07 1249  	   PRODUCT_OFFERING.PRODUCT_ID,
16:21:07 1250  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:21:07 1251  	   PRODUCT_OFFERING.UNIT_PRICE,
16:21:07 1252  	   PRODUCT_OFFERING.QUANTITY,
16:21:07 1253  	   PRODUCT_OFFERING.CREATE_DATE,
16:21:07 1254  	   PRODUCT_OFFERING.CREATED_BY,
16:21:07 1255  	   CAPABILITY.ID CAP_ID,
16:21:07 1256  	   CAPABILITY.CODE CAP_CODE,
16:21:07 1257  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:21:07 1258  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:21:07 1259  	 FROM
16:21:07 1260  	   OFFER_PRODUCT_OFFERING
16:21:07 1261  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:21:07 1262  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:21:07 1263  	 WHERE
16:21:07 1264  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:21:07 1265  	     SELECT DISTINCT
16:21:07 1266  	       OFFER_OFFER_CHAIN.OFFER_ID
16:21:07 1267  	     FROM
16:21:07 1268  	       OFFER_OFFER_CHAIN
16:21:07 1269  	     WHERE
16:21:07 1270  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
16:21:07 1271  		 SELECT DISTINCT
16:21:07 1272  		   SUBSCRIPTION.OFFER_CHAIN_ID
16:21:07 1273  		 FROM
16:21:07 1274  		   SUBSCRIPTION
16:21:07 1275  		 WHERE
16:21:07 1276  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:07 1277  	       )
16:21:07 1278  	   );
16:21:07 1279  
16:21:07 1280  EXCEPTION
16:21:07 1281  WHEN BAD_GROUP_ID THEN
16:21:07 1282  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1283  	   SPROC_NAME, 'No such account');
16:21:07 1284  WHEN OTHERS THEN
16:21:07 1285  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1286  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1287  END GET_ACCOUNT_PROD_OFFERRINGS;
16:21:07 1288  
16:21:07 1289  /******************************************************************************/
16:21:07 1290  
16:21:07 1291  PROCEDURE UPDATE_ACCOUNT_STATUS (
16:21:07 1292  /*
16:21:07 1293  Throws exceptions:
16:21:07 1294  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1295  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1296  */
16:21:07 1297  	 in_account_id	      IN ACCOUNT.ID%TYPE,
16:21:07 1298  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
16:21:07 1299  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
16:21:07 1300  ) AS
16:21:07 1301  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
16:21:07 1302  -- EXCEPTIONS
16:21:07 1303  BAD_ACCOUNT_ID	      EXCEPTION;
16:21:07 1304  BAD_STATUS_ID	      EXCEPTION;
16:21:07 1305  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:21:07 1306  BEGIN
16:21:07 1307  
16:21:07 1308  	 IF in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
16:21:07 1309  	   AND in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN
16:21:07 1310  	   AND in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
16:21:07 1311  	   RAISE BAD_STATUS_ID;
16:21:07 1312  	 END IF;
16:21:07 1313  
16:21:07 1314  	 PROCS_ACCOUNT_CRU_V16.UPDATE_ACCOUNT(
16:21:07 1315  	   in_account_id	=> in_account_id,
16:21:07 1316  	   in_account_status_id => in_account_status_id,
16:21:07 1317  	   in_updated_by	=> in_updated_by
16:21:07 1318  	 );
16:21:07 1319  
16:21:07 1320  	 IF SQL%ROWCOUNT = 0 THEN
16:21:07 1321  	   RAISE BAD_ACCOUNT_ID;
16:21:07 1322  	 END IF;
16:21:07 1323  
16:21:07 1324  EXCEPTION
16:21:07 1325  WHEN BAD_ACCOUNT_ID THEN
16:21:07 1326  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1327  	   SPROC_NAME, 'No such account');
16:21:07 1328  WHEN BAD_STATUS_ID THEN
16:21:07 1329  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1330  	   SPROC_NAME, 'Bad status id');
16:21:07 1331  WHEN OTHERS THEN
16:21:07 1332  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1333  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1334  END UPDATE_ACCOUNT_STATUS;
16:21:07 1335  
16:21:07 1336  /******************************************************************************/
16:21:07 1337  
16:21:07 1338  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
16:21:07 1339  /*
16:21:07 1340  Throws exceptions:
16:21:07 1341  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1342  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1343  */
16:21:07 1344  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
16:21:07 1345  	 out_licenses_num OUT NUMBER
16:21:07 1346  ) AS
16:21:07 1347  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
16:21:07 1348  -- VARIABLES
16:21:07 1349  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
16:21:07 1350  -- EXCEPTIONS
16:21:07 1351  BAD_ACCOUNT_ID EXCEPTION;
16:21:07 1352  BEGIN
16:21:07 1353  
16:21:07 1354  	 BEGIN
16:21:07 1355  	   SELECT
16:21:07 1356  	     ACCOUNT.ID into var_account_id
16:21:07 1357  	   FROM
16:21:07 1358  	     ACCOUNT
16:21:07 1359  	   WHERE
16:21:07 1360  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1361  	   EXCEPTION
16:21:07 1362  	     WHEN NO_DATA_FOUND THEN
16:21:07 1363  	       RAISE BAD_ACCOUNT_ID;
16:21:07 1364  	 END;
16:21:07 1365  
16:21:07 1366  	 SELECT
16:21:07 1367  	   COUNT(LICENSE.ID) into out_licenses_num
16:21:07 1368  	 FROM
16:21:07 1369  	   LICENSE
16:21:07 1370  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 1371  	 WHERE
16:21:07 1372  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:21:07 1373  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 1374  
16:21:07 1375  EXCEPTION
16:21:07 1376  WHEN BAD_ACCOUNT_ID THEN
16:21:07 1377  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1378  	   SPROC_NAME, 'No such group id');
16:21:07 1379  WHEN OTHERS THEN
16:21:07 1380  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1381  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1382  END GET_NEEDS_ENTTL_LICENSES_NUM;
16:21:07 1383  
16:21:07 1384  /******************************************************************************/
16:21:07 1385  
16:21:07 1386  PROCEDURE SET_TAX_EXEMPT (
16:21:07 1387  /*
16:21:07 1388  Throws exceptions:
16:21:07 1389  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1390  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1391  */
16:21:07 1392  	 in_group_id  IN NUMBER,
16:21:07 1393  	 in_exempt_id IN VARCHAR2
16:21:07 1394  ) AS
16:21:07 1395  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
16:21:07 1396  -- VARIABLES
16:21:07 1397  var_account_id NUMBER;
16:21:07 1398  -- EXCEPTIONS
16:21:07 1399  BAD_GROUP_ID EXCEPTION;
16:21:07 1400  BEGIN
16:21:07 1401  
16:21:07 1402  	 BEGIN
16:21:07 1403  	   SELECT
16:21:07 1404  	     ACCOUNT.ID into var_account_id
16:21:07 1405  	   FROM
16:21:07 1406  	     ACCOUNT
16:21:07 1407  	   WHERE
16:21:07 1408  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1409  	   EXCEPTION
16:21:07 1410  	     WHEN NO_DATA_FOUND THEN
16:21:07 1411  	       RAISE BAD_GROUP_ID;
16:21:07 1412  	 END;
16:21:07 1413  
16:21:07 1414  	 UPDATE
16:21:07 1415  	   ACCOUNT
16:21:07 1416  	 SET
16:21:07 1417  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
16:21:07 1418  	 WHERE
16:21:07 1419  	   ACCOUNT.ID = var_account_id;
16:21:07 1420  
16:21:07 1421  EXCEPTION
16:21:07 1422  WHEN BAD_GROUP_ID THEN
16:21:07 1423  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1424  	   SPROC_NAME, 'No such group id');
16:21:07 1425  WHEN OTHERS THEN
16:21:07 1426  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1427  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1428  END SET_TAX_EXEMPT;
16:21:07 1429  
16:21:07 1430  /******************************************************************************/
16:21:07 1431  
16:21:07 1432  PROCEDURE IS_TAX_EXEMPT (
16:21:07 1433  /*
16:21:07 1434  Throws exceptions:
16:21:07 1435  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1436  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1437  Return:
16:21:07 1438  	 GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
16:21:07 1439  	 GLOBAL_CONSTANTS_V16.FALSE else
16:21:07 1440  */
16:21:07 1441  	 in_group_id	   IN NUMBER,
16:21:07 1442  	 out_is_tax_exempt OUT NUMBER
16:21:07 1443  ) AS
16:21:07 1444  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
16:21:07 1445  -- VARIABLES
16:21:07 1446  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
16:21:07 1447  -- EXCEPTIONS
16:21:07 1448  BAD_GROUP_ID EXCEPTION;
16:21:07 1449  BEGIN
16:21:07 1450  
16:21:07 1451  	 BEGIN
16:21:07 1452  	   SELECT
16:21:07 1453  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
16:21:07 1454  	   FROM
16:21:07 1455  	     ACCOUNT
16:21:07 1456  	   WHERE
16:21:07 1457  	     ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1458  	   EXCEPTION
16:21:07 1459  	     WHEN NO_DATA_FOUND THEN
16:21:07 1460  	       RAISE BAD_GROUP_ID;
16:21:07 1461  	 END;
16:21:07 1462  
16:21:07 1463  	 IF var_is_tax_exempt IS NULL THEN
16:21:07 1464  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.FALSE;
16:21:07 1465  	 ELSE
16:21:07 1466  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.TRUE;
16:21:07 1467  	 END IF;
16:21:07 1468  
16:21:07 1469  EXCEPTION
16:21:07 1470  WHEN BAD_GROUP_ID THEN
16:21:07 1471  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1472  	   SPROC_NAME, 'No such group id');
16:21:07 1473  WHEN OTHERS THEN
16:21:07 1474  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1475  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1476  END IS_TAX_EXEMPT;
16:21:07 1477  
16:21:07 1478  /******************************************************************************/
16:21:07 1479  
16:21:07 1480  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
16:21:07 1481  /*
16:21:07 1482  Throws exceptions:
16:21:07 1483  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1484  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1485  */
16:21:07 1486  	 in_account_id IN NUMBER,
16:21:07 1487  	 out_group_id  OUT NUMBER
16:21:07 1488  ) AS
16:21:07 1489  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
16:21:07 1490  BEGIN
16:21:07 1491  
16:21:07 1492  	 SELECT
16:21:07 1493  	   ACCOUNT.GROUP_ID into out_group_id
16:21:07 1494  	 FROM
16:21:07 1495  	   ACCOUNT
16:21:07 1496  	 WHERE
16:21:07 1497  	   ACCOUNT.ID = in_account_id;
16:21:07 1498  
16:21:07 1499  EXCEPTION
16:21:07 1500  WHEN NO_DATA_FOUND THEN
16:21:07 1501  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1502  	   SPROC_NAME, 'No such account');
16:21:07 1503  WHEN OTHERS THEN
16:21:07 1504  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1505  	   SPROC_NAME, 'Unknown error');
16:21:07 1506  END GET_GROUP_ID_BY_ACCOUNT_ID;
16:21:07 1507  
16:21:07 1508  /******************************************************************************/
16:21:07 1509  
16:21:07 1510  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:21:07 1511  /*
16:21:07 1512  Throws exceptions:
16:21:07 1513  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1514  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1515  */
16:21:07 1516  	 in_group_id IN NUMBER,
16:21:07 1517  	 out_account_id  OUT NUMBER
16:21:07 1518  ) AS
16:21:07 1519  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
16:21:07 1520  BEGIN
16:21:07 1521  
16:21:07 1522  	 SELECT
16:21:07 1523  	   ACCOUNT.ID into out_account_id
16:21:07 1524  	 FROM
16:21:07 1525  	   ACCOUNT
16:21:07 1526  	 WHERE
16:21:07 1527  	   ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1528  
16:21:07 1529  EXCEPTION
16:21:07 1530  WHEN NO_DATA_FOUND THEN
16:21:07 1531  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1532  	   SPROC_NAME, 'No such account');
16:21:07 1533  WHEN OTHERS THEN
16:21:07 1534  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1535  	   SPROC_NAME, 'Unknown error');
16:21:07 1536  END GET_ACCOUNT_ID_BY_GROUP_ID;
16:21:07 1537  
16:21:07 1538  /******************************************************************************/
16:21:07 1539  
16:21:07 1540  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
16:21:07 1541  /*
16:21:07 1542  This procedure is using for LOCKING only
16:21:07 1543  
16:21:07 1544  Throws exceptions:
16:21:07 1545  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1546  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1547  */
16:21:07 1548  	 in_invoice_id IN NUMBER,
16:21:07 1549  	 out_group_ids OUT SYS_REFCURSOR
16:21:07 1550  ) AS
16:21:07 1551  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
16:21:07 1552  -- VARIABLES
16:21:07 1553  temp_invoice_id		 NUMBER;
16:21:07 1554  var_subscrib_group_id	 NUMBER;
16:21:07 1555  var_gc_purchaser_group_id NUMBER;
16:21:07 1556  var_gc_redeemer_group_id  NUMBER;
16:21:07 1557  -- EXCEPTIONS
16:21:07 1558  BAD_INVOICE_ID	    EXCEPTION;
16:21:07 1559  CAN_NOT_FIND_ACCOUNT EXCEPTION;
16:21:07 1560  BEGIN
16:21:07 1561  
16:21:07 1562  	 BEGIN
16:21:07 1563  	   SELECT
16:21:07 1564  	     INVOICE.ID into temp_invoice_id
16:21:07 1565  	   FROM
16:21:07 1566  	     INVOICE
16:21:07 1567  	   WHERE
16:21:07 1568  	     INVOICE.ID = in_invoice_id;
16:21:07 1569  	   EXCEPTION
16:21:07 1570  	     WHEN NO_DATA_FOUND THEN
16:21:07 1571  	       RAISE BAD_INVOICE_ID;
16:21:07 1572  	 END;
16:21:07 1573  
16:21:07 1574  	 BEGIN
16:21:07 1575  	   SELECT DISTINCT
16:21:07 1576  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
16:21:07 1577  	   FROM
16:21:07 1578  	     ACCOUNT
16:21:07 1579  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:21:07 1580  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:21:07 1581  	   WHERE
16:21:07 1582  	     LICENSE.INVOICE_ID = in_invoice_id;
16:21:07 1583  	   EXCEPTION
16:21:07 1584  	     WHEN NO_DATA_FOUND THEN
16:21:07 1585  	       var_subscrib_group_id := NULL;
16:21:07 1586  	 END;
16:21:07 1587  
16:21:07 1588  	 IF var_subscrib_group_id IS NULL THEN
16:21:07 1589  	   BEGIN
16:21:07 1590  	     SELECT
16:21:07 1591  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
16:21:07 1592  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
16:21:07 1593  	       into
16:21:07 1594  	       var_gc_purchaser_group_id,
16:21:07 1595  	       var_gc_redeemer_group_id
16:21:07 1596  	     FROM
16:21:07 1597  	       GIFT_CERTIFICATE
16:21:07 1598  	     WHERE
16:21:07 1599  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
16:21:07 1600  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
16:21:07 1601  	     EXCEPTION
16:21:07 1602  	       WHEN NO_DATA_FOUND THEN
16:21:07 1603  		 var_gc_purchaser_group_id := NULL;
16:21:07 1604  		 var_gc_redeemer_group_id  := NULL;
16:21:07 1605  	   END;
16:21:07 1606  	 END IF;
16:21:07 1607  
16:21:07 1608  	 IF var_subscrib_group_id IS NULL
16:21:07 1609  	   AND var_gc_purchaser_group_id IS NULL
16:21:07 1610  	   AND var_gc_redeemer_group_id IS NULL THEN
16:21:07 1611  	     RAISE CAN_NOT_FIND_ACCOUNT;
16:21:07 1612  	 END IF;
16:21:07 1613  
16:21:07 1614  	 OPEN out_group_ids FOR
16:21:07 1615  	 SELECT GROUP_ID FROM (
16:21:07 1616  	   SELECT
16:21:07 1617  	     var_subscrib_group_id as "GROUP_ID"
16:21:07 1618  	   FROM
16:21:07 1619  	     DUAL
16:21:07 1620  	   UNION
16:21:07 1621  	   SELECT
16:21:07 1622  	     var_gc_purchaser_group_id as "GROUP_ID"
16:21:07 1623  	   FROM
16:21:07 1624  	     DUAL
16:21:07 1625  	   UNION
16:21:07 1626  	   SELECT
16:21:07 1627  	     var_gc_redeemer_group_id as "GROUP_ID"
16:21:07 1628  	   FROM
16:21:07 1629  	     DUAL
16:21:07 1630  	 )
16:21:07 1631  	 WHERE
16:21:07 1632  	   GROUP_ID IS NOT NULL;
16:21:07 1633  
16:21:07 1634  EXCEPTION
16:21:07 1635  WHEN BAD_INVOICE_ID THEN
16:21:07 1636  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1637  	   SPROC_NAME, 'No such invoice');
16:21:07 1638  WHEN CAN_NOT_FIND_ACCOUNT THEN
16:21:07 1639  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1640  	   SPROC_NAME, 'Could not find account for given invoice');
16:21:07 1641  WHEN OTHERS THEN
16:21:07 1642  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1643  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1644  END GET_GROUPS_ID_BY_INVOICE_ID;
16:21:07 1645  
16:21:07 1646  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
16:21:07 1647  /*
16:21:07 1648  Throws exceptions:
16:21:07 1649  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1650  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1651  */
16:21:07 1652  	 in_group_id	   IN NUMBER,
16:21:07 1653  	 out_tax_exempt_id OUT VARCHAR2
16:21:07 1654  ) AS
16:21:07 1655  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
16:21:07 1656  -- VARIABLES
16:21:07 1657  -- EXCEPTIONS
16:21:07 1658  BEGIN
16:21:07 1659  
16:21:07 1660  	 SELECT
16:21:07 1661  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
16:21:07 1662  	 FROM
16:21:07 1663  	   ACCOUNT
16:21:07 1664  	 WHERE
16:21:07 1665  	   ACCOUNT.GROUP_ID = in_group_id;
16:21:07 1666  
16:21:07 1667  EXCEPTION
16:21:07 1668  WHEN NO_DATA_FOUND THEN
16:21:07 1669  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1670  	   SPROC_NAME, 'No such account');
16:21:07 1671  WHEN OTHERS THEN
16:21:07 1672  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1673  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1674  END GET_ACCOUNT_TAX_EXEMPT_ID;
16:21:07 1675  
16:21:07 1676  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
16:21:07 1677  /*
16:21:07 1678  Throws exceptions:
16:21:07 1679  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1680  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1681  
16:21:07 1682  Result has two columns:
16:21:07 1683  subscription_id and offer_chain_id
16:21:07 1684  */
16:21:07 1685  	 in_group_id	IN NUMBER,
16:21:07 1686  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1687  ) AS
16:21:07 1688  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
16:21:07 1689  -- Variables
16:21:07 1690  var_account_id NUMBER;
16:21:07 1691  -- Exceptions
16:21:07 1692  BAD_GROUP_ID   EXCEPTION;
16:21:07 1693  BEGIN
16:21:07 1694  
16:21:07 1695  	 BEGIN
16:21:07 1696  	   SELECT
16:21:07 1697  	     ID into var_account_id
16:21:07 1698  	   FROM
16:21:07 1699  	     ACCOUNT
16:21:07 1700  	   WHERE
16:21:07 1701  	     GROUP_ID = in_group_id;
16:21:07 1702  	   EXCEPTION
16:21:07 1703  	     WHEN NO_DATA_FOUND THEN
16:21:07 1704  	       RAISE BAD_GROUP_ID;
16:21:07 1705  	 END;
16:21:07 1706  
16:21:07 1707  	 OPEN out_result_set FOR
16:21:07 1708  	 SELECT
16:21:07 1709  	   S.ID as SUBSCRIPTION_ID,
16:21:07 1710  	   OCHMD.OFFER_CHAIN_ID
16:21:07 1711  	 FROM
16:21:07 1712  	   SUBSCRIPTION S
16:21:07 1713  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
16:21:07 1714  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V16.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
16:21:07 1715  	 WHERE
16:21:07 1716  	   S.ACCOUNT_ID = var_account_id;
16:21:07 1717  
16:21:07 1718  EXCEPTION
16:21:07 1719  WHEN BAD_GROUP_ID THEN
16:21:07 1720  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1721  	   SPROC_NAME, 'No such account');
16:21:07 1722  WHEN OTHERS THEN
16:21:07 1723  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1724  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1725  END GET_UPGRADABLE_SUBSCRIPTIONS;
16:21:07 1726  
16:21:07 1727  /******************************************************************************/
16:21:07 1728  
16:21:07 1729  PROCEDURE GET_USR_ALL_SBSCR_IDS (
16:21:07 1730  /*
16:21:07 1731  Throws exceptions:
16:21:07 1732  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1733  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:07 1734  
16:21:07 1735  Result has two columns:
16:21:07 1736  subscription_id and offer_chain_id
16:21:07 1737  */
16:21:07 1738  	 in_group_id	    IN NUMBER,
16:21:07 1739  	 out_result_set     OUT SYS_REFCURSOR
16:21:07 1740  ) AS
16:21:07 1741  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
16:21:07 1742  -- VARIABLES
16:21:07 1743  var_account_id NUMBER;
16:21:07 1744  -- EXCEPTIONS
16:21:07 1745  BAD_GROUP_ID EXCEPTION;
16:21:07 1746  BEGIN
16:21:07 1747  
16:21:07 1748  	 BEGIN
16:21:07 1749  	   SELECT
16:21:07 1750  	     A.ID INTO var_account_id
16:21:07 1751  	   FROM
16:21:07 1752  	     ACCOUNT A
16:21:07 1753  	   WHERE
16:21:07 1754  	     A.GROUP_ID = in_group_id;
16:21:07 1755  	   EXCEPTION
16:21:07 1756  	     WHEN NO_DATA_FOUND THEN
16:21:07 1757  	       RAISE BAD_GROUP_ID;
16:21:07 1758  	 END;
16:21:07 1759  
16:21:07 1760  	 OPEN out_result_set FOR
16:21:07 1761  	 SELECT
16:21:07 1762  	   S.ID
16:21:07 1763  	 FROM
16:21:07 1764  	   SUBSCRIPTION S
16:21:07 1765  	 WHERE
16:21:07 1766  	   S.ACCOUNT_ID = var_account_id
16:21:07 1767  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
16:21:07 1768  
16:21:07 1769  EXCEPTION
16:21:07 1770  WHEN BAD_GROUP_ID THEN
16:21:07 1771  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1772  	   SPROC_NAME, 'No such account');
16:21:07 1773  WHEN OTHERS THEN
16:21:07 1774  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1775  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1776  END GET_USR_ALL_SBSCR_IDS;
16:21:07 1777  
16:21:07 1778  /******************************************************************************/
16:21:07 1779  
16:21:07 1780  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
16:21:07 1781  /*
16:21:07 1782  Throws exceptions:
16:21:07 1783  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1784  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1785  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:07 1786  
16:21:07 1787  Result has two columns:
16:21:07 1788  subscription_id and offer_chain_id
16:21:07 1789  */
16:21:07 1790  	 in_group_id	    IN NUMBER,
16:21:07 1791  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:21:07 1792  	 out_result_set     OUT SYS_REFCURSOR
16:21:07 1793  ) AS
16:21:07 1794  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
16:21:07 1795  -- VARIABLES
16:21:07 1796  var_account_id NUMBER;
16:21:07 1797  -- EXCEPTIONS
16:21:07 1798  BAD_GROUP_ID	   EXCEPTION;
16:21:07 1799  BAD_OFFER_CHAIN_IDS EXCEPTION;
16:21:07 1800  BEGIN
16:21:07 1801  
16:21:07 1802  	 IF in_offer_chain_ids IS NULL THEN
16:21:07 1803  	   RAISE BAD_OFFER_CHAIN_IDS;
16:21:07 1804  	 END IF;
16:21:07 1805  
16:21:07 1806  	 BEGIN
16:21:07 1807  	   SELECT
16:21:07 1808  	     A.ID INTO var_account_id
16:21:07 1809  	   FROM
16:21:07 1810  	     ACCOUNT A
16:21:07 1811  	   WHERE
16:21:07 1812  	     A.GROUP_ID = in_group_id;
16:21:07 1813  	   EXCEPTION
16:21:07 1814  	     WHEN NO_DATA_FOUND THEN
16:21:07 1815  	       RAISE BAD_GROUP_ID;
16:21:07 1816  	 END;
16:21:07 1817  
16:21:07 1818  	 OPEN out_result_set FOR
16:21:07 1819  	 SELECT
16:21:07 1820  	   S.ID
16:21:07 1821  	 FROM
16:21:07 1822  	   SUBSCRIPTION S
16:21:07 1823  	 WHERE
16:21:07 1824  	   S.ACCOUNT_ID = var_account_id
16:21:07 1825  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
16:21:07 1826  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
16:21:07 1827  
16:21:07 1828  EXCEPTION
16:21:07 1829  WHEN BAD_OFFER_CHAIN_IDS THEN
16:21:07 1830  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
16:21:07 1831  	   SPROC_NAME, 'Offer chains ids parameter is null');
16:21:07 1832  WHEN BAD_GROUP_ID THEN
16:21:07 1833  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:07 1834  	   SPROC_NAME, 'No such account');
16:21:07 1835  WHEN OTHERS THEN
16:21:07 1836  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1837  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1838  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
16:21:07 1839  
16:21:07 1840  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
16:21:07 1841  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:21:07 1842  	 in_expiration_date IN DATE,
16:21:07 1843  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
16:21:07 1844  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
16:21:07 1845  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
16:21:07 1846  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
16:21:07 1847  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
16:21:07 1848  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
16:21:07 1849  	 in_lower_bound IN NUMBER DEFAULT 1,
16:21:07 1850  	 in_upper_bound IN NUMBER DEFAULT 11,
16:21:07 1851  	 out_result_set OUT SYS_REFCURSOR
16:21:07 1852  ) AS
16:21:07 1853  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
16:21:07 1854  BEGIN
16:21:07 1855  
16:21:07 1856  	 OPEN out_result_set FOR
16:21:07 1857  	     SELECT
16:21:07 1858  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
16:21:07 1859  	     FROM
16:21:07 1860  	       account a,
16:21:07 1861  	       credit_card cc
16:21:07 1862  	     WHERE
16:21:07 1863  	       cc.expiration_date = in_expiration_date and
16:21:07 1864  	       cc.last_four_cc = in_last_four_cc and
16:21:07 1865  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
16:21:07 1866  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
16:21:07 1867  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
16:21:07 1868  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
16:21:07 1869  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
16:21:07 1870  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
16:21:07 1871  	       a.id = cc.account_id and
16:21:07 1872  	       rownum >= in_lower_bound and
16:21:07 1873  	       rownum <= in_upper_bound
16:21:07 1874  	   ;
16:21:07 1875  
16:21:07 1876  EXCEPTION
16:21:07 1877  WHEN OTHERS THEN
16:21:07 1878  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
16:21:07 1879  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:21:07 1880  END GET_GROUP_IDS_BY_CC_INFO;
16:21:07 1881  
16:21:07 1882  END PROCS_ACCOUNT_V16;
16:21:07 1883  .
16:21:07 SQL> /

Package body created.

Elapsed: 00:00:00.18
16:21:08 SQL> 
16:21:08 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V16" AS
16:21:08   2  
16:21:08   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:21:08   4  /*
16:21:08   5  Throws exceptions:
16:21:08   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08   8  */
16:21:08   9  	  in_offer_chain_id IN	 NUMBER,
16:21:08  10  	  out_result_set    OUT  SYS_REFCURSOR
16:21:08  11  ) AS
16:21:08  12  BEGIN
16:21:08  13  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_BY_ID (
16:21:08  14  	  in_offer_chain_id => in_offer_chain_id,
16:21:08  15  	  out_result_set => out_result_set
16:21:08  16  	);
16:21:08  17  END GET_OFFER_CHAIN_BY_ID;
16:21:08  18  
16:21:08  19  PROCEDURE GET_PENDING_INVOICES (
16:21:08  20  /*
16:21:08  21  Throws exceptions:
16:21:08  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  23  */
16:21:08  24  	out_result_set1      OUT SYS_REFCURSOR,
16:21:08  25  	out_result_set2      OUT SYS_REFCURSOR,
16:21:08  26  	out_result_set3      OUT SYS_REFCURSOR,
16:21:08  27  	in_row_number	     IN NUMBER DEFAULT NULL
16:21:08  28  ) AS
16:21:08  29  BEGIN
16:21:08  30  	PROCS_INVOICE_V16.GET_PENDING_INVOICES(
16:21:08  31  	  out_result_set1,
16:21:08  32  	  out_result_set2,
16:21:08  33  	  out_result_set3,
16:21:08  34  	  in_row_number
16:21:08  35  	);
16:21:08  36  END GET_PENDING_INVOICES;
16:21:08  37  
16:21:08  38  /********************************************************/
16:21:08  39  PROCEDURE GET_PENDING_REFUND_CHARGES (
16:21:08  40  /*
16:21:08  41  Throws exceptions:
16:21:08  42  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  43  */
16:21:08  44  	out_result_set	    OUT SYS_REFCURSOR,
16:21:08  45  	in_row_number	    IN NUMBER DEFAULT NULL
16:21:08  46  ) AS
16:21:08  47  BEGIN
16:21:08  48  	PROCS_CHARGE_V16.GET_PENDING_REFUND_CHARGES(
16:21:08  49  	  out_result_set,
16:21:08  50  	  in_row_number
16:21:08  51  	);
16:21:08  52  END GET_PENDING_REFUND_CHARGES;
16:21:08  53  /********************************************************/
16:21:08  54  
16:21:08  55  PROCEDURE GET_UNPROCESSED_CHARGES (
16:21:08  56  /*
16:21:08  57  Throws exceptions:
16:21:08  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  60  */
16:21:08  61  	in_invoice_id  IN NUMBER,
16:21:08  62  	out_result_set OUT SYS_REFCURSOR
16:21:08  63  ) AS
16:21:08  64  BEGIN
16:21:08  65  	PROCS_CHARGE_V16.GET_UNPROCESSED_CHARGES(
16:21:08  66  	  in_invoice_id,
16:21:08  67  	  out_result_set
16:21:08  68  	);
16:21:08  69  END GET_UNPROCESSED_CHARGES;
16:21:08  70  
16:21:08  71  /********************************************************/
16:21:08  72  
16:21:08  73  PROCEDURE GET_PROCESSED_CHARGES (
16:21:08  74  /*
16:21:08  75  Throws exceptions:
16:21:08  76  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08  77  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  78  */
16:21:08  79  	in_invoice_id  IN NUMBER,
16:21:08  80  	out_result_set OUT SYS_REFCURSOR
16:21:08  81  ) AS
16:21:08  82  BEGIN
16:21:08  83  	PROCS_CHARGE_V16.GET_PROCESSED_CHARGES(
16:21:08  84  	  in_invoice_id,
16:21:08  85  	  out_result_set
16:21:08  86  	);
16:21:08  87  END GET_PROCESSED_CHARGES;
16:21:08  88  
16:21:08  89  /********************************************************/
16:21:08  90  
16:21:08  91  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
16:21:08  92  /*
16:21:08  93  Throws exceptions:
16:21:08  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  95  */
16:21:08  96  	in_transaction_id	      IN NUMBER,
16:21:08  97  	in_transaction_attempt_status IN NUMBER,
16:21:08  98  	out_result_set		      OUT SYS_REFCURSOR
16:21:08  99  ) AS
16:21:08 100  BEGIN
16:21:08 101  	PROCS_TRANSACTION_V16.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
16:21:08 102  	  in_transaction_id,
16:21:08 103  	  in_transaction_attempt_status,
16:21:08 104  	  out_result_set
16:21:08 105  	);
16:21:08 106  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
16:21:08 107  
16:21:08 108  /********************************************************/
16:21:08 109  
16:21:08 110  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
16:21:08 111  /*
16:21:08 112  Throws exceptions:
16:21:08 113  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 114  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 115  */
16:21:08 116  	in_transaction_attempt_id     IN NUMBER,
16:21:08 117  	in_transaction_attempt_status IN NUMBER
16:21:08 118  ) AS
16:21:08 119  BEGIN
16:21:08 120  	PROCS_TRANSACTION_V16.UPDATE_TRNSCTN_ATTEMPT_STATUS(
16:21:08 121  	   in_transaction_attempt_id,
16:21:08 122  	   in_transaction_attempt_status
16:21:08 123  	);
16:21:08 124  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
16:21:08 125  
16:21:08 126  /********************************************************/
16:21:08 127  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
16:21:08 128  /*
16:21:08 129  Throws exceptions:
16:21:08 130  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 131  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 132  */
16:21:08 133  	in_invoice_id	IN  NUMBER,
16:21:08 134  	out_result_set OUT SYS_REFCURSOR
16:21:08 135  ) AS
16:21:08 136  BEGIN
16:21:08 137  	PROCS_TRANSACTION_V16.GET_CLOSED_REFUNDS_BY_INVOICE(
16:21:08 138  	   in_invoice_id,
16:21:08 139  	   out_result_set
16:21:08 140  	);
16:21:08 141  END GET_CLOSED_REFUNDS_BY_INVOICE;
16:21:08 142  
16:21:08 143  /********************************************************/
16:21:08 144  
16:21:08 145  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
16:21:08 146  /*
16:21:08 147  Throws exceptions:
16:21:08 148  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 149  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 150  */
16:21:08 151  	in_transaction_attempt_id IN NUMBER,
16:21:08 152  	in_updated_by		  IN VARCHAR2
16:21:08 153  ) AS
16:21:08 154  BEGIN
16:21:08 155  	PROCS_TRANSACTION_V16.UPDATE_TRNSCTN_ATTEMPT_TIME(
16:21:08 156  	  in_transaction_attempt_id,
16:21:08 157  	  in_updated_by
16:21:08 158  	);
16:21:08 159  END UPDATE_TRNSCTN_ATTEMPT_TIME;
16:21:08 160  
16:21:08 161  /********************************************************/
16:21:08 162  
16:21:08 163  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
16:21:08 164  /*
16:21:08 165  Throws exceptions:
16:21:08 166  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 167  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 168  */
16:21:08 169  	in_transaction_id	   IN NUMBER,
16:21:08 170  	in_trans_attempt_status    IN NUMBER,
16:21:08 171  	in_external_status_code    IN VARCHAR2,
16:21:08 172  	in_external_status_message IN VARCHAR2,
16:21:08 173  	in_created_by		   IN VARCHAR2,
16:21:08 174  	in_ext_transaction_id	   IN VARCHAR2,
16:21:08 175  	out_transaction_attempt_id OUT NUMBER
16:21:08 176  ) AS
16:21:08 177  BEGIN
16:21:08 178  	PROCS_TRANSACTION_V16.CREATE_TRANSACTION_ATTEMPT(
16:21:08 179  	  in_transaction_id,
16:21:08 180  	  in_trans_attempt_status,
16:21:08 181  	  in_external_status_code,
16:21:08 182  	  in_external_status_message,
16:21:08 183  	  in_created_by,
16:21:08 184  	  in_ext_transaction_id,
16:21:08 185  	  out_transaction_attempt_id
16:21:08 186  	);
16:21:08 187  END CREATE_TRANSACTION_ATTEMPT;
16:21:08 188  
16:21:08 189  /********************************************************/
16:21:08 190  
16:21:08 191  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
16:21:08 192  /*
16:21:08 193  Throws exceptions:
16:21:08 194  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 195  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 196  */
16:21:08 197  	in_transaction_attempt_id IN NUMBER,
16:21:08 198  	in_ext_status_code	  IN VARCHAR2,
16:21:08 199  	in_ext_status_message	  IN VARCHAR2,
16:21:08 200  	in_ext_transaction_id	  IN VARCHAR2
16:21:08 201  ) AS
16:21:08 202  BEGIN
16:21:08 203  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_ATTEMPT_INF(
16:21:08 204  	  in_transaction_attempt_id,
16:21:08 205  	  in_ext_status_code,
16:21:08 206  	  in_ext_status_message,
16:21:08 207  	  in_ext_transaction_id
16:21:08 208  	);
16:21:08 209  END UPDATE_TRANSACTION_ATTEMPT_INF;
16:21:08 210  
16:21:08 211  /********************************************************/
16:21:08 212  
16:21:08 213  PROCEDURE UPDATE_TRANSACTION_STATUS (
16:21:08 214  /*
16:21:08 215  Throws exceptions:
16:21:08 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 218  */
16:21:08 219  	in_transaction_id	 IN NUMBER,
16:21:08 220  	in_updated_by		 IN VARCHAR2,
16:21:08 221  	in_transaction_status_id IN NUMBER
16:21:08 222  ) AS
16:21:08 223  BEGIN
16:21:08 224  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
16:21:08 225  	  in_transaction_id,
16:21:08 226  	  in_updated_by,
16:21:08 227  	  in_transaction_status_id
16:21:08 228  	);
16:21:08 229  END UPDATE_TRANSACTION_STATUS;
16:21:08 230  
16:21:08 231  /********************************************************/
16:21:08 232  
16:21:08 233  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
16:21:08 234  /*
16:21:08 235  Throws exceptions:
16:21:08 236  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 237  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 238  */
16:21:08 239  	in_transaction_id IN  NUMBER,
16:21:08 240  	out_attempts_num  OUT NUMBER
16:21:08 241  ) AS
16:21:08 242  BEGIN
16:21:08 243  	PROCS_TRANSACTION_V16.GET_FAILED_ATTEMPTS_NUMBER(
16:21:08 244  	  in_transaction_id,
16:21:08 245  	  out_attempts_num
16:21:08 246  	);
16:21:08 247  END GET_FAILED_ATTEMPTS_NUMBER;
16:21:08 248  
16:21:08 249  /********************************************************/
16:21:08 250  
16:21:08 251  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
16:21:08 252  /*
16:21:08 253  Throws exceptions:
16:21:08 254  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 255  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 256  */
16:21:08 257  	in_transaction_id IN  NUMBER,
16:21:08 258  	out_is_successfull  OUT NUMBER
16:21:08 259  ) AS
16:21:08 260  BEGIN
16:21:08 261  	PROCS_TRANSACTION_V16.IS_TRANSACTION_SUCCESSFULL(
16:21:08 262  	  in_transaction_id,
16:21:08 263  	  out_is_successfull
16:21:08 264  	);
16:21:08 265  END IS_TRANSACTION_SUCCESSFULL;
16:21:08 266  /********************************************************/
16:21:08 267  
16:21:08 268  PROCEDURE UPDATE_INVOICE_STATUS (
16:21:08 269  /*
16:21:08 270  Throws exceptions:
16:21:08 271  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 272  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 273  */
16:21:08 274  	in_invoice_id		       IN NUMBER,
16:21:08 275  	in_invoice_status_id	       IN NUMBER,
16:21:08 276  	in_updated_by		       IN VARCHAR2
16:21:08 277  ) AS
16:21:08 278  BEGIN
16:21:08 279  	PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
16:21:08 280  	  in_invoice_id,
16:21:08 281  	  in_invoice_status_id,
16:21:08 282  	  in_updated_by
16:21:08 283  	);
16:21:08 284  END UPDATE_INVOICE_STATUS;
16:21:08 285  
16:21:08 286  /********************************************************/
16:21:08 287  
16:21:08 288  PROCEDURE SUSPEND_SUBSCRIPTION(
16:21:08 289  /*
16:21:08 290  Throws exceptions:
16:21:08 291  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 292  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:08 293  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 294  */
16:21:08 295  	  in_subs_id	IN NUMBER ,
16:21:08 296  	  in_updated_by IN VARCHAR2
16:21:08 297  ) AS
16:21:08 298  BEGIN
16:21:08 299  	PROCS_SUBSCRIPTION_V16.SUSPEND_SUBSCRIPTION(
16:21:08 300  	  in_subs_id,
16:21:08 301  	  in_updated_by
16:21:08 302  	);
16:21:08 303  END SUSPEND_SUBSCRIPTION;
16:21:08 304  
16:21:08 305  /********************************************************/
16:21:08 306  
16:21:08 307  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:21:08 308  /*
16:21:08 309  Throws exceptions:
16:21:08 310  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 312  */
16:21:08 313  	in_credit_card_id IN  NUMBER,
16:21:08 314  	out_result_set	  OUT SYS_REFCURSOR
16:21:08 315  ) AS
16:21:08 316  BEGIN
16:21:08 317  	PROCS_FIN_INSTRUMENTS_V16.GET_CREDIT_CARD_BY_ID(
16:21:08 318  	  in_credit_card_id,
16:21:08 319  	  out_result_set
16:21:08 320  	);
16:21:08 321  END GET_CREDIT_CARD_BY_ID;
16:21:08 322  
16:21:08 323  /*********************************************************/
16:21:08 324  
16:21:08 325  PROCEDURE GET_TRANSACTION_AMOUNT (
16:21:08 326  /*
16:21:08 327  Throws exceptions:
16:21:08 328  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 329  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 330  */
16:21:08 331  	in_transaction_id      IN  NUMBER,
16:21:08 332  	out_transaction_amount OUT NUMBER
16:21:08 333  ) AS
16:21:08 334  BEGIN
16:21:08 335  	PROCS_TRANSACTION_V16.GET_TRANSACTION_AMOUNT(
16:21:08 336  	  in_transaction_id,
16:21:08 337  	  out_transaction_amount
16:21:08 338  	);
16:21:08 339  END GET_TRANSACTION_AMOUNT;
16:21:08 340  
16:21:08 341  /***********************************************************/
16:21:08 342  
16:21:08 343  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
16:21:08 344  /*
16:21:08 345  Throws exceptions:
16:21:08 346  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 347  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 348  */
16:21:08 349  	in_invoice_id  IN  NUMBER,
16:21:08 350  	out_account_id OUT NUMBER
16:21:08 351  ) AS
16:21:08 352  BEGIN
16:21:08 353  	PROCS_INVOICE_V16.GET_ACCOUNT_BY_INVOICE_ID(
16:21:08 354  	  in_invoice_id,
16:21:08 355  	  out_account_id
16:21:08 356  	);
16:21:08 357  END GET_ACCOUNT_BY_INVOICE_ID;
16:21:08 358  
16:21:08 359  /************************************************************/
16:21:08 360  
16:21:08 361  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
16:21:08 362  /*
16:21:08 363  Throws exceptions:
16:21:08 364  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:08 365  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 366  */
16:21:08 367  	in_gift_certificate_id IN NUMBER,
16:21:08 368  	out_result_set	       OUT SYS_REFCURSOR
16:21:08 369  ) AS
16:21:08 370  BEGIN
16:21:08 371  	PROCS_FIN_INSTRUMENTS_V16.GET_GIFT_CERTIFICATE_BY_ID (
16:21:08 372  	  in_gift_certificate_id,
16:21:08 373  	  out_result_set
16:21:08 374  	);
16:21:08 375  END GET_GIFT_CERTIFICATE_BY_ID;
16:21:08 376  
16:21:08 377  /**************************************************************/
16:21:08 378  
16:21:08 379  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
16:21:08 380  /*
16:21:08 381  Throws exceptions:
16:21:08 382  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 383  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 384  */
16:21:08 385  	in_charge_id	    IN NUMBER,
16:21:08 386  	out_subscription_id OUT NUMBER
16:21:08 387  ) AS
16:21:08 388  BEGIN
16:21:08 389  	PROCS_CHARGE_V16.GET_SUBSCR_ID_BY_CHARGE_ID(
16:21:08 390  	  in_charge_id,
16:21:08 391  	  out_subscription_id
16:21:08 392  	);
16:21:08 393  END GET_SUBSCR_ID_BY_CHARGE_ID;
16:21:08 394  
16:21:08 395  /**************************************************************/
16:21:08 396  
16:21:08 397  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
16:21:08 398  /*
16:21:08 399  Throws exceptions:
16:21:08 400  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 401  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 402  */
16:21:08 403  	in_gift_certificate_id IN NUMBER,
16:21:08 404  	in_charge_id	       IN NUMBER,
16:21:08 405  	out_result	       OUT NUMBER
16:21:08 406  ) AS
16:21:08 407  BEGIN
16:21:08 408  	PROCS_FIN_INSTRUMENTS_V16.IS_GCERT_FOR_PROPER_OFFER (
16:21:08 409  	  in_gift_certificate_id,
16:21:08 410  	  in_charge_id,
16:21:08 411  	  out_result
16:21:08 412  	);
16:21:08 413  END IS_GCERT_FOR_PROPER_OFFER;
16:21:08 414  
16:21:08 415  /**************************************************************/
16:21:08 416  
16:21:08 417  PROCEDURE GET_SUBSCRIPTION_INFO (
16:21:08 418  /*
16:21:08 419  Throws exceptions:
16:21:08 420  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 421  */
16:21:08 422  	  in_subscription_id IN  NUMBER,
16:21:08 423  	  out_result_set      OUT SYS_REFCURSOR
16:21:08 424  ) AS
16:21:08 425  BEGIN
16:21:08 426  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTION_INFO (
16:21:08 427  	  in_subscription_id,
16:21:08 428  	  out_result_set
16:21:08 429  	);
16:21:08 430  END GET_SUBSCRIPTION_INFO;
16:21:08 431  
16:21:08 432  /****************************************************************/
16:21:08 433  
16:21:08 434  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:21:08 435  /*
16:21:08 436  Throws exceptions:
16:21:08 437  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 438  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 439  */
16:21:08 440  	in_invoice_id IN  NUMBER,
16:21:08 441  	out_amount    OUT NUMBER
16:21:08 442  ) AS
16:21:08 443  BEGIN
16:21:08 444  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
16:21:08 445  	  in_invoice_id,
16:21:08 446  	  out_amount
16:21:08 447  	);
16:21:08 448  END CALCULATE_INVOICE_AMOUNT;
16:21:08 449  
16:21:08 450  /****************************************************************/
16:21:08 451  
16:21:08 452  PROCEDURE GET_TRANSACTION_BY_ID (
16:21:08 453  /*
16:21:08 454  Throws exceptions:
16:21:08 455  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 456  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 457  */
16:21:08 458  	in_transaction_id IN NUMBER,
16:21:08 459  	out_result_set	  OUT SYS_REFCURSOR
16:21:08 460  ) AS
16:21:08 461  BEGIN
16:21:08 462  	PROCS_TRANSACTION_V16.GET_TRANSACTION_BY_ID(
16:21:08 463  	  in_transaction_id,
16:21:08 464  	  out_result_set
16:21:08 465  	);
16:21:08 466  END GET_TRANSACTION_BY_ID;
16:21:08 467  
16:21:08 468  /****************************************************************/
16:21:08 469  
16:21:08 470  PROCEDURE UPDATE_CHARGE_STATUS (
16:21:08 471  /*
16:21:08 472  Throws exceptions:
16:21:08 473  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 474  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 475  */
16:21:08 476  	in_charge_id	    IN CHARGE.ID%TYPE,
16:21:08 477  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:21:08 478  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
16:21:08 479  ) AS
16:21:08 480  BEGIN
16:21:08 481  	PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
16:21:08 482  	  in_charge_id,
16:21:08 483  	  in_charge_status_id,
16:21:08 484  	  in_updated_by
16:21:08 485  	);
16:21:08 486  END UPDATE_CHARGE_STATUS;
16:21:08 487  
16:21:08 488  /****************************************************************/
16:21:08 489  
16:21:08 490  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:21:08 491  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:08 492  	out_result_set OUT SYS_REFCURSOR
16:21:08 493  ) AS
16:21:08 494  BEGIN
16:21:08 495  	PROCS_FIN_INSTRUMENTS_V16.GET_GC_BY_PURCH_INVOICE_ID(
16:21:08 496  	  in_invoice_id,
16:21:08 497  	  out_result_set
16:21:08 498  	);
16:21:08 499  END GET_GC_BY_PURCH_INVOICE_ID;
16:21:08 500  
16:21:08 501  /****************************************************************/
16:21:08 502  
16:21:08 503  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:21:08 504  /*
16:21:08 505  Throws exceptions:
16:21:08 506  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 507  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
16:21:08 508  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 509  */
16:21:08 510  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:21:08 511  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:21:08 512  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:21:08 513  ) AS
16:21:08 514  BEGIN
16:21:08 515  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_ORDER_ID(
16:21:08 516  	  in_transaction_id,
16:21:08 517  	  in_order_id,
16:21:08 518  	  in_updated_by
16:21:08 519  	);
16:21:08 520  END UPDATE_TRANSACTION_ORDER_ID;
16:21:08 521  
16:21:08 522  /****************************************************************/
16:21:08 523  
16:21:08 524  PROCEDURE GET_ACTIVE_INVOICES_IDS (
16:21:08 525  /*
16:21:08 526  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 527  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 528  */
16:21:08 529  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
16:21:08 530  	in_subscription_id IN NUMBER,
16:21:08 531  	out_result_set	   OUT SYS_REFCURSOR
16:21:08 532  ) AS
16:21:08 533  BEGIN
16:21:08 534  	PROCS_SUBSCRIPTION_V16.GET_ACTIVE_INVOICES_IDS(
16:21:08 535  	  in_subscription_id,
16:21:08 536  	  out_result_set
16:21:08 537  	);
16:21:08 538  END GET_ACTIVE_INVOICES_IDS;
16:21:08 539  
16:21:08 540  /****************************************************************/
16:21:08 541  
16:21:08 542  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
16:21:08 543  /*
16:21:08 544  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 545  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 546  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:08 547  */
16:21:08 548  --  in_invoice_id        IN INVOICE.ID%TYPE,
16:21:08 549  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
16:21:08 550  -- norlov: in_refundable	      IN refund enabled
16:21:08 551  	in_invoice_id	     IN NUMBER,
16:21:08 552  	in_updated_by	     IN VARCHAR2,
16:21:08 553  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
16:21:08 554  --  in_cancellation_date IN DATE DEFAULT current_timestamp
16:21:08 555  ) AS
16:21:08 556  BEGIN
16:21:08 557  	PROCS_SUBSCRIPTION_V16.CANCEL_SUBSCRIPTION_INVOICE(
16:21:08 558  	  in_invoice_id,
16:21:08 559  	  in_updated_by,
16:21:08 560  	  in_refundable
16:21:08 561  	);
16:21:08 562  END CANCEL_SUBSCRIPTION_INVOICE;
16:21:08 563  
16:21:08 564  /****************************************************************/
16:21:08 565  
16:21:08 566  PROCEDURE FINALIZE_CANCELATION (
16:21:08 567  /*
16:21:08 568  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 569  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 570  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:08 571  */
16:21:08 572  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
16:21:08 573  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
16:21:08 574  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:21:08 575  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:21:08 576  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:21:08 577  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
16:21:08 578  	in_subscription_id    IN NUMBER,
16:21:08 579  	in_cancelation_reason IN VARCHAR2,
16:21:08 580  	in_cancelation_date   IN DATE,
16:21:08 581  	in_note 	      IN VARCHAR2,
16:21:08 582  	in_agent_id	      IN NUMBER,
16:21:08 583  	in_updated_by	      IN VARCHAR2
16:21:08 584  ) AS
16:21:08 585  BEGIN
16:21:08 586  	PROCS_SUBSCRIPTION_V16.FINALIZE_CANCELATION(
16:21:08 587  	  in_subscription_id,
16:21:08 588  	  in_cancelation_reason,
16:21:08 589  	  in_cancelation_date,
16:21:08 590  	  in_note,
16:21:08 591  	  in_agent_id,
16:21:08 592  	  in_updated_by
16:21:08 593  	);
16:21:08 594  END FINALIZE_CANCELATION;
16:21:08 595  
16:21:08 596  /****************************************************************/
16:21:08 597  
16:21:08 598  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
16:21:08 599  /*
16:21:08 600  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 601  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 602  */
16:21:08 603  	in_subscription_id IN NUMBER,
16:21:08 604  	out_result_set	   OUT SYS_REFCURSOR
16:21:08 605  ) AS
16:21:08 606  BEGIN
16:21:08 607  	PROCS_SUBSCRIPTION_V16.GET_SUBSCR_PROD_OFFERRINGS(
16:21:08 608  	  in_subscription_id,
16:21:08 609  	  out_result_set
16:21:08 610  	);
16:21:08 611  END GET_SUBSCR_PROD_OFFERRINGS;
16:21:08 612  
16:21:08 613  /****************************************************************/
16:21:08 614  
16:21:08 615  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:21:08 616  /*
16:21:08 617  Throws exceptions (codes):
16:21:08 618  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 619  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 620  */
16:21:08 621  	in_offer_chain_id IN NUMBER,
16:21:08 622  	in_meta_data_name IN VARCHAR2,
16:21:08 623  	out_result_set	  OUT SYS_REFCURSOR
16:21:08 624  )AS
16:21:08 625  BEGIN
16:21:08 626  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_META_DATA(
16:21:08 627  	  in_offer_chain_id,
16:21:08 628  	  in_meta_data_name,
16:21:08 629  	  out_result_set
16:21:08 630  	);
16:21:08 631  END GET_OFFER_CHAIN_META_DATA;
16:21:08 632  
16:21:08 633  /****************************************************************/
16:21:08 634  
16:21:08 635  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:21:08 636  /*
16:21:08 637  Throws exceptions (codes):
16:21:08 638  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 639  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 640  */
16:21:08 641  	in_product_offering_id IN NUMBER,
16:21:08 642  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:21:08 643  	out_result_set	       OUT SYS_REFCURSOR
16:21:08 644  )AS
16:21:08 645  BEGIN
16:21:08 646  	PROCS_OFFER_CHAIN_V16.GET_PRODUCT_OFFERING_META_DATA(
16:21:08 647  	  in_product_offering_id,
16:21:08 648  	  in_meta_data_name,
16:21:08 649  	  out_result_set
16:21:08 650  	);
16:21:08 651  END GET_PRODUCT_OFFERING_META_DATA;
16:21:08 652  
16:21:08 653  /****************************************************************/
16:21:08 654  
16:21:08 655  PROCEDURE READ_ACCOUNT (
16:21:08 656  	in_account_id  IN ACCOUNT.ID%TYPE,
16:21:08 657  	out_result_set OUT SYS_REFCURSOR
16:21:08 658  )AS
16:21:08 659  BEGIN
16:21:08 660  	PROCS_ACCOUNT_CRU_V16.READ_ACCOUNT(
16:21:08 661  	  in_account_id,
16:21:08 662  	  out_result_set
16:21:08 663  	);
16:21:08 664  END READ_ACCOUNT;
16:21:08 665  
16:21:08 666  /****************************************************************/
16:21:08 667  
16:21:08 668  PROCEDURE GET_COLLECTED_CHARGES (
16:21:08 669  /*
16:21:08 670  Throws exceptions:
16:21:08 671  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 672  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 673  */
16:21:08 674  	in_invoice_id  IN NUMBER,
16:21:08 675  	out_result_set OUT SYS_REFCURSOR
16:21:08 676  ) AS
16:21:08 677  BEGIN
16:21:08 678  	PROCS_CHARGE_V16.GET_COLLECTED_CHARGES(
16:21:08 679  	  in_invoice_id,
16:21:08 680  	  out_result_set
16:21:08 681  	);
16:21:08 682  END GET_COLLECTED_CHARGES;
16:21:08 683  
16:21:08 684  /****************************************************************/
16:21:08 685  
16:21:08 686  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
16:21:08 687  /*
16:21:08 688  Throws exceptions:
16:21:08 689  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:08 690  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 691  */
16:21:08 692  	in_invoice_id IN NUMBER,
16:21:08 693  	out_group_ids OUT SYS_REFCURSOR
16:21:08 694  ) AS
16:21:08 695  BEGIN
16:21:08 696  
16:21:08 697  	PROCS_ACCOUNT_V16.GET_GROUPS_ID_BY_INVOICE_ID(
16:21:08 698  	  in_invoice_id,
16:21:08 699  	  out_group_ids
16:21:08 700  	);
16:21:08 701  
16:21:08 702  END GET_GROUPS_ID_BY_INVOICE_ID;
16:21:08 703  
16:21:08 704  /****************************************************************/
16:21:08 705  
16:21:08 706  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:21:08 707  /*
16:21:08 708  Throws exceptions:
16:21:08 709  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:08 710  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 711  */
16:21:08 712  	in_group_id IN NUMBER,
16:21:08 713  	out_account_id	OUT NUMBER
16:21:08 714  ) AS
16:21:08 715  BEGIN
16:21:08 716  
16:21:08 717  	PROCS_ACCOUNT_V16.GET_ACCOUNT_ID_BY_GROUP_ID(
16:21:08 718  	  in_group_id,
16:21:08 719  	  out_account_id
16:21:08 720  	);
16:21:08 721  
16:21:08 722  END GET_ACCOUNT_ID_BY_GROUP_ID;
16:21:08 723  
16:21:08 724  /****************************************************************/
16:21:08 725  
16:21:08 726  PROCEDURE LOCK_ACCOUNT (
16:21:08 727  	in_group_id    IN NUMBER,
16:21:08 728  	in_lock_key    IN VARCHAR2,
16:21:08 729  	in_seconds_num IN NUMBER,
16:21:08 730  	in_created_by  IN VARCHAR2,
16:21:08 731  	in_reason      IN VARCHAR2
16:21:08 732  ) AS
16:21:08 733  BEGIN
16:21:08 734  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
16:21:08 735  	  in_group_id,
16:21:08 736  	  in_lock_key,
16:21:08 737  	  in_seconds_num,
16:21:08 738  	  in_created_by,
16:21:08 739  	  in_reason
16:21:08 740  	);
16:21:08 741  END LOCK_ACCOUNT;
16:21:08 742  
16:21:08 743  /****************************************************************/
16:21:08 744  
16:21:08 745  PROCEDURE RELEASE_LOCK (
16:21:08 746  	in_group_id IN NUMBER,
16:21:08 747  	in_lock_key IN VARCHAR2
16:21:08 748  ) AS
16:21:08 749  BEGIN
16:21:08 750  	PROCS_LOCKING_V16.RELEASE_LOCK(
16:21:08 751  	  in_group_id,
16:21:08 752  	  in_lock_key
16:21:08 753  	);
16:21:08 754  END RELEASE_LOCK;
16:21:08 755  
16:21:08 756  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
16:21:08 757  	in_invoice_id		    IN NUMBER,
16:21:08 758  	out_order_id		    OUT VARCHAR2,
16:21:08 759  	out_external_transaction_id OUT VARCHAR2
16:21:08 760  ) AS
16:21:08 761  BEGIN
16:21:08 762  	PROCS_INVOICE_V16.GET_PAYMENT_INFO_BY_INVOICE_ID(
16:21:08 763  	  in_invoice_id,
16:21:08 764  	  out_order_id,
16:21:08 765  	  out_external_transaction_id
16:21:08 766  	);
16:21:08 767  END GET_PAYMENT_INFO_BY_INVOICE_ID;
16:21:08 768  
16:21:08 769  /******************************************************************************/
16:21:08 770  
16:21:08 771  PROCEDURE GET_PAYPAL_BY_ID (
16:21:08 772  	in_paypal_id   IN  NUMBER,
16:21:08 773  	out_result_set OUT SYS_REFCURSOR
16:21:08 774  ) AS
16:21:08 775  BEGIN
16:21:08 776  	PROCS_FIN_INSTRUMENTS_V16.GET_PAYPAL_BY_ID(
16:21:08 777  	  in_paypal_id,
16:21:08 778  	  out_result_set
16:21:08 779  	);
16:21:08 780  END GET_PAYPAL_BY_ID;
16:21:08 781  
16:21:08 782  PROCEDURE GET_ATTEMPT_NUMBER (
16:21:08 783  /*
16:21:08 784  Throws exceptions:
16:21:08 785  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 786  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 787  */
16:21:08 788  	in_charge_id   in  number,
16:21:08 789  	out_attempt_count out number
16:21:08 790  ) as
16:21:08 791  begin
16:21:08 792  	PROCS_TRANSACTION_V16.GET_ATTEMPT_NUMBER(
16:21:08 793  	  in_charge_id,
16:21:08 794  	  out_attempt_count
16:21:08 795  	);
16:21:08 796  end get_attempt_number;
16:21:08 797  
16:21:08 798  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:21:08 799  	in_offer_chain_id	 IN NUMBER,
16:21:08 800  	in_action_name		 IN VARCHAR2,
16:21:08 801  	out_notification_type_id out number
16:21:08 802  ) as
16:21:08 803  begin
16:21:08 804  	PROCS_OFFER_CHAIN_V16.GET_NOTIFICATION_TYPE_ID(
16:21:08 805  	  in_offer_chain_id,
16:21:08 806  	  in_action_name,
16:21:08 807  	  out_notification_type_id
16:21:08 808  	);
16:21:08 809  end GET_NOTIFICATION_TYPE_ID;
16:21:08 810  
16:21:08 811  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
16:21:08 812  /*
16:21:08 813  Throws exceptions:
16:21:08 814  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 815  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 816  */
16:21:08 817  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:08 818  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
16:21:08 819  ) AS
16:21:08 820  BEGIN
16:21:08 821  PROCS_FIN_INSTRUMENTS_V16.GET_GC_ID_BY_PURCH_INVOICE_ID(
16:21:08 822  in_invoice_id,
16:21:08 823  out_gift_certificate_id
16:21:08 824  );
16:21:08 825  END GET_GC_ID_BY_PURCH_INVOICE_ID;
16:21:08 826  
16:21:08 827  END PUBLIC_PROCS_BILLING_V16;
16:21:08 828  .
16:21:08 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:21:08 SQL> 
16:21:08 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V16" AS
16:21:08   2  
16:21:08   3  PROCEDURE LOCK_ACCOUNT (
16:21:08   4  	in_group_id    IN NUMBER,
16:21:08   5  	in_lock_key    IN VARCHAR2,
16:21:08   6  	in_seconds_num IN NUMBER,
16:21:08   7  	in_created_by  IN VARCHAR2,
16:21:08   8  	in_reason      IN VARCHAR2
16:21:08   9  ) AS
16:21:08  10  BEGIN
16:21:08  11  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
16:21:08  12  	  in_group_id,
16:21:08  13  	  in_lock_key,
16:21:08  14  	  in_seconds_num,
16:21:08  15  	  in_created_by,
16:21:08  16  	  in_reason
16:21:08  17  	);
16:21:08  18  END LOCK_ACCOUNT;
16:21:08  19  
16:21:08  20  /******************************************************************************/
16:21:08  21  
16:21:08  22  PROCEDURE RELEASE_LOCK (
16:21:08  23  	in_group_id IN NUMBER,
16:21:08  24  	in_lock_key IN VARCHAR2
16:21:08  25  ) AS
16:21:08  26  BEGIN
16:21:08  27  	PROCS_LOCKING_V16.RELEASE_LOCK(
16:21:08  28  	  in_group_id,
16:21:08  29  	  in_lock_key
16:21:08  30  	);
16:21:08  31  END RELEASE_LOCK;
16:21:08  32  
16:21:08  33  END PUBLIC_PROCS_NOTIFICATION_V16;
16:21:08  34  .
16:21:08 SQL> /

Package body created.

Elapsed: 00:00:00.01
16:21:08 SQL> 
16:21:08 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V16" AS
16:21:08   2  
16:21:08   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
16:21:08   4  	out_result_set OUT SYS_REFCURSOR
16:21:08   5  ) AS
16:21:08   6  BEGIN
16:21:08   7  	PROCS_GROUP_ACCOUNT_V16.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
16:21:08   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
16:21:08   9  
16:21:08  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
16:21:08  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
16:21:08  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
16:21:08  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:21:08  14  ) AS
16:21:08  15  BEGIN
16:21:08  16  	PROCS_GROUP_ACCOUNT_V16.UPDATE_SS_NEED_ENTITLEMENTS(
16:21:08  17  	  in_sub_share_id => in_sub_share_id,
16:21:08  18  	  in_need_entitlements => in_need_entitlements,
16:21:08  19  	  in_updater => in_updater
16:21:08  20  	);
16:21:08  21  END UPDATE_SS_NEED_ENTITLEMENTS;
16:21:08  22  
16:21:08  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:21:08  24  /*
16:21:08  25  Throws exceptions:
16:21:08  26  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08  27  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  28  */
16:21:08  29  	  in_offer_chain_id IN	 NUMBER,
16:21:08  30  	  out_result_set    OUT  SYS_REFCURSOR
16:21:08  31  ) AS
16:21:08  32  BEGIN
16:21:08  33  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_BY_ID (
16:21:08  34  	  in_offer_chain_id => in_offer_chain_id,
16:21:08  35  	  out_result_set => out_result_set
16:21:08  36  	);
16:21:08  37  END GET_OFFER_CHAIN_BY_ID;
16:21:08  38  
16:21:08  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:21:08  40  /*
16:21:08  41  Throws exceptions (codes):
16:21:08  42  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08  43  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  44  */
16:21:08  45  	in_offer_chain_id IN NUMBER,
16:21:08  46  	in_meta_data_name IN VARCHAR2,
16:21:08  47  	out_result_set	  OUT SYS_REFCURSOR
16:21:08  48  )AS
16:21:08  49  BEGIN
16:21:08  50  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_META_DATA(
16:21:08  51  	  in_offer_chain_id,
16:21:08  52  	  in_meta_data_name,
16:21:08  53  	  out_result_set
16:21:08  54  	);
16:21:08  55  END GET_OFFER_CHAIN_META_DATA;
16:21:08  56  
16:21:08  57  PROCEDURE GET_ENDING_LICENSES (
16:21:08  58  /*
16:21:08  59  Throws exceptions:
16:21:08  60  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  61  */
16:21:08  62  	in_hours_number IN NUMBER,
16:21:08  63  	out_result_set OUT SYS_REFCURSOR
16:21:08  64  ) AS
16:21:08  65  BEGIN
16:21:08  66  	PROCS_LICENSE_V16.GET_ENDING_LICENSES(in_hours_number,out_result_set);
16:21:08  67  END GET_ENDING_LICENSES;
16:21:08  68  
16:21:08  69  PROCEDURE GET_ENDING_LICENSES_CC (
16:21:08  70  /*
16:21:08  71  Throws exceptions:
16:21:08  72  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  73  */
16:21:08  74  	in_hours_number IN NUMBER,
16:21:08  75  	out_result_set OUT SYS_REFCURSOR,
16:21:08  76  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:08  77  ) AS
16:21:08  78  BEGIN
16:21:08  79  	PROCS_LICENSE_V16.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
16:21:08  80  END GET_ENDING_LICENSES_CC;
16:21:08  81  
16:21:08  82  /*******************************************************/
16:21:08  83  
16:21:08  84  PROCEDURE GET_RECURRING_OFFER (
16:21:08  85  /*
16:21:08  86  Throws exceptions:
16:21:08  87  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08  88  */
16:21:08  89  	in_license_id  IN NUMBER,
16:21:08  90  	out_result_set OUT SYS_REFCURSOR
16:21:08  91  ) AS
16:21:08  92  BEGIN
16:21:08  93  	PROCS_LICENSE_V16.GET_RECURRING_OFFER (
16:21:08  94  	  in_license_id,
16:21:08  95  	  out_result_set
16:21:08  96  	);
16:21:08  97  END GET_RECURRING_OFFER;
16:21:08  98  
16:21:08  99  /********************************************************/
16:21:08 100  
16:21:08 101  PROCEDURE GET_NEXT_OFFER (
16:21:08 102  /*
16:21:08 103  Throws exceptions:
16:21:08 104  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 105  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:08 106  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 107  */
16:21:08 108  	in_license_id  IN NUMBER,
16:21:08 109  	out_result_set OUT SYS_REFCURSOR
16:21:08 110  ) AS
16:21:08 111  BEGIN
16:21:08 112  	PROCS_LICENSE_V16.GET_NEXT_OFFER (
16:21:08 113  	  in_license_id,
16:21:08 114  	  out_result_set
16:21:08 115  	);
16:21:08 116  END GET_NEXT_OFFER;
16:21:08 117  
16:21:08 118  /*********************************************************/
16:21:08 119  
16:21:08 120  PROCEDURE UPDATE_LICENSE_STATUS(
16:21:08 121  /*
16:21:08 122  Throws exceptions:
16:21:08 123  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 124  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 125  */
16:21:08 126  	  in_license_id     IN NUMBER,
16:21:08 127  	  in_license_status IN NUMBER,
16:21:08 128  	  in_updated_by     IN VARCHAR2
16:21:08 129  ) AS
16:21:08 130  BEGIN
16:21:08 131  	PROCS_LICENSE_V16.UPDATE_LICENSE_STATUS (
16:21:08 132  	  in_license_id,
16:21:08 133  	  in_license_status,
16:21:08 134  	  in_updated_by
16:21:08 135  	);
16:21:08 136  END UPDATE_LICENSE_STATUS;
16:21:08 137  
16:21:08 138  /**********************************************************/
16:21:08 139  
16:21:08 140  PROCEDURE UPDATE_INVOICE_STATUS (
16:21:08 141  /*
16:21:08 142  Throws exceptions:
16:21:08 143  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 144  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 145  */
16:21:08 146  	in_invoice_id		       IN NUMBER,
16:21:08 147  	in_invoice_status_id	       IN NUMBER,
16:21:08 148  	in_updated_by		       IN VARCHAR2
16:21:08 149  ) AS
16:21:08 150  BEGIN
16:21:08 151  	PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
16:21:08 152  	  in_invoice_id,
16:21:08 153  	  in_invoice_status_id,
16:21:08 154  	  in_updated_by
16:21:08 155  	);
16:21:08 156  END UPDATE_INVOICE_STATUS;
16:21:08 157  
16:21:08 158  /***********************************************************/
16:21:08 159  
16:21:08 160  PROCEDURE CREATE_LICENSE(
16:21:08 161  /*
16:21:08 162  Throws exceptions:
16:21:08 163  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 164  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 165  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
16:21:08 166  */
16:21:08 167  	in_status_id		    IN NUMBER,
16:21:08 168  	in_needs_entitlements	    IN NUMBER,
16:21:08 169  	in_start_date		    IN DATE,
16:21:08 170  	in_end_date		    IN DATE,
16:21:08 171  	in_offer_id		    IN NUMBER,
16:21:08 172  	in_subscription_id	    IN NUMBER,
16:21:08 173  	in_invoice_id		    IN NUMBER,
16:21:08 174  	in_created_by		    IN VARCHAR2,
16:21:08 175  	in_is_extension 	    IN NUMBER,
16:21:08 176  	in_current_offer_index	    IN NUMBER,
16:21:08 177  	in_current_offer_recurr_num IN NUMBER,
16:21:08 178  	out_license_id		    OUT NUMBER
16:21:08 179  ) AS
16:21:08 180  BEGIN
16:21:08 181  	PROCS_LICENSE_V16.CREATE_LICENSE (
16:21:08 182  	  in_status_id,
16:21:08 183  	  in_needs_entitlements,
16:21:08 184  	  in_start_date,
16:21:08 185  	  in_end_date,
16:21:08 186  	  in_offer_id,
16:21:08 187  	  in_subscription_id,
16:21:08 188  	  in_invoice_id,
16:21:08 189  	  in_created_by,
16:21:08 190  	  in_is_extension,
16:21:08 191  	  in_current_offer_index,
16:21:08 192  	  in_current_offer_recurr_num,
16:21:08 193  	  out_license_id
16:21:08 194  	);
16:21:08 195  END CREATE_LICENSE;
16:21:08 196  
16:21:08 197  /******************************************************/
16:21:08 198  
16:21:08 199  PROCEDURE CREATE_INVOICE(
16:21:08 200  /*
16:21:08 201  Throws exceptions:
16:21:08 202  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 203  */
16:21:08 204  	  in_invoice_status IN NUMBER,
16:21:08 205  	  in_created_by     IN VARCHAR2,
16:21:08 206  	  in_tax_exempt_id  IN VARCHAR2,
16:21:08 207  	  out_invoice_id    OUT NUMBER
16:21:08 208  ) AS
16:21:08 209  BEGIN
16:21:08 210  	PROCS_INVOICE_V16.CREATE_INVOICE (
16:21:08 211  	  in_invoice_status,
16:21:08 212  	  in_created_by,
16:21:08 213  	  in_tax_exempt_id,
16:21:08 214  	  out_invoice_id
16:21:08 215  	);
16:21:08 216  END CREATE_INVOICE;
16:21:08 217  
16:21:08 218  /*******************************************************/
16:21:08 219  
16:21:08 220  PROCEDURE CREATE_CHARGE(
16:21:08 221  /*
16:21:08 222  Throws exceptions:
16:21:08 223  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 224  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 225  */
16:21:08 226  	in_invoice_id	      IN NUMBER,
16:21:08 227  	in_transaction_id     IN NUMBER,
16:21:08 228  	in_instrument_type_id IN NUMBER,
16:21:08 229  	in_instrument_id      IN NUMBER,
16:21:08 230  	in_charge_amount      IN NUMBER,
16:21:08 231  	in_created_by	      IN VARCHAR2,
16:21:08 232  	in_charge_status_id   IN NUMBER,
16:21:08 233  	out_charge_id	      OUT NUMBER
16:21:08 234  ) AS
16:21:08 235  BEGIN
16:21:08 236  	PROCS_CHARGE_V16.CREATE_CHARGE (
16:21:08 237  	  in_invoice_id,
16:21:08 238  	  in_transaction_id,
16:21:08 239  	  in_instrument_type_id,
16:21:08 240  	  in_instrument_id,
16:21:08 241  	  in_charge_amount,
16:21:08 242  	  in_created_by,
16:21:08 243  	  in_charge_status_id,
16:21:08 244  	  out_charge_id
16:21:08 245  	);
16:21:08 246  END CREATE_CHARGE;
16:21:08 247  
16:21:08 248  /**********************************************************/
16:21:08 249  
16:21:08 250  PROCEDURE HAS_FUTURE_LICENSE (
16:21:08 251  /*
16:21:08 252  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 253  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 254  --
16:21:08 255  RETURNS:
16:21:08 256  1 - if has,
16:21:08 257  0 - else
16:21:08 258  */
16:21:08 259  	in_license_id IN NUMBER,
16:21:08 260  	out_result	   OUT NUMBER
16:21:08 261  ) AS
16:21:08 262  BEGIN
16:21:08 263  	PROCS_SUBSCRIPTION_V16.HAS_FUTURE_LICENSE (
16:21:08 264  	  in_license_id,
16:21:08 265  	  out_result
16:21:08 266  	);
16:21:08 267  END HAS_FUTURE_LICENSE;
16:21:08 268  
16:21:08 269  /***********************************************************/
16:21:08 270  
16:21:08 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
16:21:08 272  /*
16:21:08 273  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 274  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 275  */
16:21:08 276  	in_license_id IN NUMBER,
16:21:08 277  	out_group_id  OUT NUMBER
16:21:08 278  ) AS
16:21:08 279  BEGIN
16:21:08 280  	PROCS_LICENSE_V16.GET_GROUP_ID_BY_LICENSE_ID (
16:21:08 281  	  in_license_id,
16:21:08 282  	  out_group_id
16:21:08 283  	);
16:21:08 284  END GET_GROUP_ID_BY_LICENSE_ID;
16:21:08 285  
16:21:08 286  /**********************************************************/
16:21:08 287  
16:21:08 288  PROCEDURE GET_OFFER_PRODUCTS (
16:21:08 289  /*
16:21:08 290  Throws exceptions (codes):
16:21:08 291  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 292  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 293  */
16:21:08 294  	in_offer_id    IN NUMBER,
16:21:08 295  	out_result_set OUT SYS_REFCURSOR
16:21:08 296  ) AS
16:21:08 297  BEGIN
16:21:08 298  	PROCS_OFFER_CHAIN_V16.GET_OFFER_PRODUCTS (
16:21:08 299  	  in_offer_id,
16:21:08 300  	  out_result_set
16:21:08 301  	);
16:21:08 302  END GET_OFFER_PRODUCTS;
16:21:08 303  
16:21:08 304  /***********************************************************/
16:21:08 305  
16:21:08 306  PROCEDURE CREATE_TRANSACTION (
16:21:08 307  /*
16:21:08 308  Throws exceptions:
16:21:08 309  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 310  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 311  */
16:21:08 312  	in_transaction_id  IN NUMBER,
16:21:08 313  	in_status_id	   IN NUMBER,
16:21:08 314  	in_amount	   IN NUMBER,
16:21:08 315  	in_created_by	   IN VARCHAR2,
16:21:08 316  	in_order_id	   IN VARCHAR2,
16:21:08 317  	out_transaction_id OUT NUMBER
16:21:08 318  ) AS
16:21:08 319  BEGIN
16:21:08 320  	PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
16:21:08 321  	  in_transaction_id,
16:21:08 322  	  in_status_id,
16:21:08 323  	  in_amount,
16:21:08 324  	  in_created_by,
16:21:08 325  	  in_order_id,
16:21:08 326  	  GLOBAL_CONSTANTS_V16.FALSE, -- is_refund should be false in renewal
16:21:08 327  	  out_transaction_id
16:21:08 328  	);
16:21:08 329  END CREATE_TRANSACTION;
16:21:08 330  
16:21:08 331  /************************************************************/
16:21:08 332  
16:21:08 333  PROCEDURE ADD_LINE_ITEMS(
16:21:08 334  /*
16:21:08 335  Throws exceptions:
16:21:08 336  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 337  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 338  */
16:21:08 339  	in_invoice_id IN NUMBER,
16:21:08 340  	in_offer_id   IN NUMBER,
16:21:08 341  	in_created_by IN VARCHAR2
16:21:08 342  ) AS
16:21:08 343  BEGIN
16:21:08 344  	PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
16:21:08 345  	  in_invoice_id,
16:21:08 346  	  in_offer_id,
16:21:08 347  	  in_created_by
16:21:08 348  	);
16:21:08 349  END ADD_LINE_ITEMS;
16:21:08 350  
16:21:08 351  /************************************************************/
16:21:08 352  
16:21:08 353  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:21:08 354  /*
16:21:08 355  Throws exceptions:
16:21:08 356  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 357  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 358  */
16:21:08 359  	in_invoice_id IN  NUMBER,
16:21:08 360  	out_amount    OUT NUMBER
16:21:08 361  ) AS
16:21:08 362  BEGIN
16:21:08 363  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
16:21:08 364  	  in_invoice_id,
16:21:08 365  	  out_amount
16:21:08 366  	);
16:21:08 367  END CALCULATE_INVOICE_AMOUNT;
16:21:08 368  
16:21:08 369  /*************************************************************/
16:21:08 370  
16:21:08 371  PROCEDURE RESERVE_TRANSACTION_ID (
16:21:08 372  /*
16:21:08 373  Throws exceptions:
16:21:08 374  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 375  */
16:21:08 376  	out_transaction_id OUT NUMBER
16:21:08 377  ) AS
16:21:08 378  BEGIN
16:21:08 379  	PROCS_TRANSACTION_V16.RESERVE_TRANSACTION_ID (
16:21:08 380  	  out_transaction_id
16:21:08 381  	);
16:21:08 382  END RESERVE_TRANSACTION_ID;
16:21:08 383  
16:21:08 384  /***************************************************************/
16:21:08 385  
16:21:08 386  PROCEDURE P_GET_NEXT_OFFER_INDEX (
16:21:08 387  	in_offer_chain_id	     IN NUMBER,
16:21:08 388  	in_offer_chain_current_index IN NUMBER,
16:21:08 389  	out_next_offer_index	     OUT NUMBER
16:21:08 390  ) AS
16:21:08 391  BEGIN
16:21:08 392  	PROCS_OFFER_CHAIN_V16.P_GET_NEXT_OFFER_INDEX(
16:21:08 393  	  in_offer_chain_id,
16:21:08 394  	  in_offer_chain_current_index,
16:21:08 395  	  out_next_offer_index
16:21:08 396  	);
16:21:08 397  END P_GET_NEXT_OFFER_INDEX;
16:21:08 398  
16:21:08 399  /***************************************************************/
16:21:08 400  
16:21:08 401  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
16:21:08 402  	in_license_id		     IN NUMBER,
16:21:08 403  	in_offer_chain_current_index IN NUMBER,
16:21:08 404  	out_next_offer_index	     OUT NUMBER
16:21:08 405  ) AS
16:21:08 406  BEGIN
16:21:08 407  	PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX_BY_LCNS(
16:21:08 408  	  in_license_id,
16:21:08 409  	  in_offer_chain_current_index,
16:21:08 410  	  out_next_offer_index
16:21:08 411  	);
16:21:08 412  END GET_NEXT_OFFER_INDEX_BY_LCNS;
16:21:08 413  
16:21:08 414  /******************************************************************/
16:21:08 415  
16:21:08 416  PROCEDURE GET_SUBSCRIPTION_INFO (
16:21:08 417  /*
16:21:08 418  Throws exceptions:
16:21:08 419  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 420  */
16:21:08 421  	  in_subscription_id IN  NUMBER,
16:21:08 422  	  out_result_set      OUT SYS_REFCURSOR
16:21:08 423  ) AS
16:21:08 424  BEGIN
16:21:08 425  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTION_INFO(
16:21:08 426  	  in_subscription_id,
16:21:08 427  	  out_result_set
16:21:08 428  	);
16:21:08 429  END GET_SUBSCRIPTION_INFO;
16:21:08 430  
16:21:08 431  /*******************************************************************/
16:21:08 432  
16:21:08 433  PROCEDURE CLOSE_SUBSCRIPTION (
16:21:08 434  	in_subscription_id IN NUMBER,
16:21:08 435  	in_updated_by	   IN VARCHAR2
16:21:08 436  ) AS
16:21:08 437  BEGIN
16:21:08 438  	PROCS_SUBSCRIPTION_V16.CLOSE_SUBSCRIPTION(
16:21:08 439  	  in_subscription_id,
16:21:08 440  	  in_updated_by
16:21:08 441  	);
16:21:08 442  END CLOSE_SUBSCRIPTION;
16:21:08 443  
16:21:08 444  /*******************************************************************/
16:21:08 445  
16:21:08 446  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
16:21:08 447  	out_result_set OUT SYS_REFCURSOR
16:21:08 448  ) AS
16:21:08 449  BEGIN
16:21:08 450  	PROCS_LICENSE_V16.GET_NEED_ENTITLEMENTS_LICENSES(
16:21:08 451  	  out_result_set
16:21:08 452  	);
16:21:08 453  END GET_NEED_ENTITLEMENTS_LICENSES;
16:21:08 454  
16:21:08 455  /*******************************************************************/
16:21:08 456  
16:21:08 457  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
16:21:08 458  	in_license_id	      IN NUMBER,
16:21:08 459  	in_needs_entitlements IN NUMBER,
16:21:08 460  	in_updated_by	      IN VARCHAR2
16:21:08 461  ) AS
16:21:08 462  BEGIN
16:21:08 463  	PROCS_LICENSE_V16.UPDATE_NEED_ENTITLEMENTS_FLAG(
16:21:08 464  	  in_license_id,
16:21:08 465  	  in_needs_entitlements,
16:21:08 466  	  in_updated_by
16:21:08 467  	);
16:21:08 468  END UPDATE_NEED_ENTITLEMENTS_FLAG;
16:21:08 469  
16:21:08 470  /*******************************************************/
16:21:08 471  
16:21:08 472  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
16:21:08 473  /*
16:21:08 474  Throws exceptions (codes):
16:21:08 475  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 476  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 477  */
16:21:08 478  	in_offer_id    IN NUMBER,
16:21:08 479  	out_result_set OUT SYS_REFCURSOR
16:21:08 480  ) AS
16:21:08 481  BEGIN
16:21:08 482  	PROCS_OFFER_CHAIN_V16.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
16:21:08 483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
16:21:08 484  
16:21:08 485  /*******************************************************/
16:21:08 486  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:21:08 487  /*
16:21:08 488  Throws exceptions (codes):
16:21:08 489  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 490  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 491  */
16:21:08 492  	in_product_offering_id IN NUMBER,
16:21:08 493  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:21:08 494  	out_result_set	       OUT SYS_REFCURSOR
16:21:08 495  ) AS
16:21:08 496  BEGIN
16:21:08 497  	PROCS_OFFER_CHAIN_V16.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
16:21:08 498  END GET_PRODUCT_OFFERING_META_DATA;
16:21:08 499  
16:21:08 500  /*******************************************************/
16:21:08 501  
16:21:08 502  PROCEDURE LOCK_ACCOUNT (
16:21:08 503  	in_group_id    IN NUMBER,
16:21:08 504  	in_lock_key    IN VARCHAR2,
16:21:08 505  	in_seconds_num IN NUMBER,
16:21:08 506  	in_created_by  IN VARCHAR2,
16:21:08 507  	in_reason      IN VARCHAR2
16:21:08 508  ) AS
16:21:08 509  BEGIN
16:21:08 510  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
16:21:08 511  	  in_group_id,
16:21:08 512  	  in_lock_key,
16:21:08 513  	  in_seconds_num,
16:21:08 514  	  in_created_by,
16:21:08 515  	  in_reason
16:21:08 516  	);
16:21:08 517  END LOCK_ACCOUNT;
16:21:08 518  
16:21:08 519  /****************************************************************/
16:21:08 520  
16:21:08 521  PROCEDURE RELEASE_LOCK (
16:21:08 522  	in_group_id IN NUMBER,
16:21:08 523  	in_lock_key IN VARCHAR2
16:21:08 524  ) AS
16:21:08 525  BEGIN
16:21:08 526  	PROCS_LOCKING_V16.RELEASE_LOCK(
16:21:08 527  	  in_group_id,
16:21:08 528  	  in_lock_key
16:21:08 529  	);
16:21:08 530  END RELEASE_LOCK;
16:21:08 531  
16:21:08 532  /******************************************************************************/
16:21:08 533  
16:21:08 534  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:21:08 535  	in_invoice_id  IN NUMBER,
16:21:08 536  	out_result_set OUT SYS_REFCURSOR
16:21:08 537  ) AS
16:21:08 538  BEGIN
16:21:08 539  	PROCS_INVOICE_V16.GET_INVOICE_LINE_ITEMS(
16:21:08 540  	  in_invoice_id,
16:21:08 541  	  out_result_set
16:21:08 542  	);
16:21:08 543  END GET_INVOICE_LINE_ITEMS;
16:21:08 544  
16:21:08 545  /******************************************************************************/
16:21:08 546  
16:21:08 547  PROCEDURE ADD_TAX (
16:21:08 548  	in_tax_type_id		 IN NUMBER,
16:21:08 549  	in_calculated_amount	 IN NUMBER,
16:21:08 550  	in_created_by		 IN VARCHAR2,
16:21:08 551  	in_line_item_id 	 IN NUMBER,
16:21:08 552  	in_effective_rate	 IN VARCHAR2,
16:21:08 553  	in_taxable_amount	 IN NUMBER,
16:21:08 554  	in_tax_rule_id		 IN NUMBER,
16:21:08 555  	in_jurisdiction_level_id IN NUMBER,
16:21:08 556  	in_jurisdiction_name	 IN VARCHAR2,
16:21:08 557  	in_jurisdiction_id	 IN VARCHAR2,
16:21:08 558  	in_ext_tax_type 	 IN VARCHAR2,
16:21:08 559  	in_ext_result		 IN VARCHAR2,
16:21:08 560  	in_imposition_type	 IN VARCHAR2,
16:21:08 561  	in_imposition		 IN VARCHAR2
16:21:08 562  ) AS
16:21:08 563  BEGIN
16:21:08 564  	PROCS_TAXES_V16.ADD_TAX(
16:21:08 565  	  in_tax_type_id,
16:21:08 566  	  in_calculated_amount,
16:21:08 567  	  in_created_by,
16:21:08 568  	  in_line_item_id,
16:21:08 569  	  in_effective_rate,
16:21:08 570  	  in_taxable_amount,
16:21:08 571  	  in_tax_rule_id,
16:21:08 572  	  in_jurisdiction_level_id,
16:21:08 573  	  in_jurisdiction_name,
16:21:08 574  	  in_jurisdiction_id,
16:21:08 575  	  in_ext_tax_type,
16:21:08 576  	  in_ext_result,
16:21:08 577  	  in_imposition_type,
16:21:08 578  	  in_imposition
16:21:08 579  	);
16:21:08 580  END ADD_TAX;
16:21:08 581  
16:21:08 582  /******************************************************************************/
16:21:08 583  
16:21:08 584  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:21:08 585  	in_credit_card_id IN  NUMBER,
16:21:08 586  	out_result_set	  OUT SYS_REFCURSOR
16:21:08 587  ) AS
16:21:08 588  BEGIN
16:21:08 589  	PROCS_FIN_INSTRUMENTS_V16.GET_CREDIT_CARD_BY_ID(
16:21:08 590  	  in_credit_card_id,
16:21:08 591  	  out_result_set
16:21:08 592  	);
16:21:08 593  END GET_CREDIT_CARD_BY_ID;
16:21:08 594  
16:21:08 595  /******************************************************************************/
16:21:08 596  
16:21:08 597  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
16:21:08 598  	in_line_item_id IN NUMBER,
16:21:08 599  	out_result_set	OUT SYS_REFCURSOR
16:21:08 600  ) AS
16:21:08 601  BEGIN
16:21:08 602  	PROCS_PRODUCT_V16.GET_PRD_OFFERING_BY_LINE_IT_ID(
16:21:08 603  	  in_line_item_id,
16:21:08 604  	  out_result_set
16:21:08 605  	);
16:21:08 606  END GET_PRD_OFFERING_BY_LINE_IT_ID;
16:21:08 607  
16:21:08 608  /******************************************************************************/
16:21:08 609  
16:21:08 610  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:21:08 611  /*
16:21:08 612  Throws exceptions:
16:21:08 613  APP_EXCEPTION_CODES_V16.NOT_FOUND,
16:21:08 614  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 615  */
16:21:08 616  	in_group_id IN NUMBER,
16:21:08 617  	out_account_id	OUT NUMBER
16:21:08 618  ) AS
16:21:08 619  BEGIN
16:21:08 620  	PROCS_ACCOUNT_V16.GET_ACCOUNT_ID_BY_GROUP_ID(
16:21:08 621  	  in_group_id,
16:21:08 622  	  out_account_id
16:21:08 623  	);
16:21:08 624  END GET_ACCOUNT_ID_BY_GROUP_ID;
16:21:08 625  
16:21:08 626  /******************************************************************************/
16:21:08 627  
16:21:08 628  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
16:21:08 629  /*
16:21:08 630  Throws exceptions:
16:21:08 631  APP_EXCEPTION_CODES_V16.NOT_FOUND
16:21:08 632  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 633  */
16:21:08 634  	in_line_item_id IN  NUMBER,
16:21:08 635  	out_result_set	OUT SYS_REFCURSOR
16:21:08 636  ) AS
16:21:08 637  BEGIN
16:21:08 638  	PROCS_LINE_ITEMS_V16.GET_LINE_ITEM_DISCOUNTS(
16:21:08 639  	  in_line_item_id,
16:21:08 640  	  out_result_set
16:21:08 641  	);
16:21:08 642  END GET_LINE_ITEM_DISCOUNTS;
16:21:08 643  
16:21:08 644  /******************************************************************************/
16:21:08 645  
16:21:08 646  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
16:21:08 647  	in_line_item_id    IN NUMBER,
16:21:08 648  	in_amount	   IN NUMBER,
16:21:08 649  	in_discount_amount IN NUMBER,
16:21:08 650  	in_taxes_amount    IN NUMBER
16:21:08 651  ) AS
16:21:08 652  BEGIN
16:21:08 653  	PROCS_LINE_ITEMS_V16.UPDATE_LINE_ITEM_AMOUNT(
16:21:08 654  	  in_line_item_id,
16:21:08 655  	  in_amount,
16:21:08 656  	  in_discount_amount,
16:21:08 657  	  in_taxes_amount
16:21:08 658  	);
16:21:08 659  END UPDATE_LINE_ITEM_AMOUNT;
16:21:08 660  
16:21:08 661  /******************************************************************************/
16:21:08 662  
16:21:08 663  PROCEDURE GET_PAYPAL_BY_ID (
16:21:08 664  	in_paypal_id   IN  NUMBER,
16:21:08 665  	out_result_set OUT SYS_REFCURSOR
16:21:08 666  ) AS
16:21:08 667  BEGIN
16:21:08 668  	PROCS_FIN_INSTRUMENTS_V16.GET_PAYPAL_BY_ID(
16:21:08 669  	  in_paypal_id,
16:21:08 670  	  out_result_set
16:21:08 671  	);
16:21:08 672  END GET_PAYPAL_BY_ID;
16:21:08 673  
16:21:08 674  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:21:08 675  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:21:08 676  	out_result_set OUT SYS_REFCURSOR
16:21:08 677  ) AS
16:21:08 678  BEGIN
16:21:08 679  	PROCS_FIN_INSTRUMENTS_V16.GET_GC_BY_PURCH_INVOICE_ID (
16:21:08 680  	  in_invoice_id,
16:21:08 681  	  out_result_set
16:21:08 682  	);
16:21:08 683  END GET_GC_BY_PURCH_INVOICE_ID;
16:21:08 684  
16:21:08 685  PROCEDURE GET_LICENSE_BY_ID (
16:21:08 686  	in_license_id  IN NUMBER,
16:21:08 687  	out_result_set OUT SYS_REFCURSOR
16:21:08 688  ) AS
16:21:08 689  BEGIN
16:21:08 690  	PROCS_LICENSE_V16.GET_LICENSE_BY_ID (
16:21:08 691  	  in_license_id,
16:21:08 692  	  out_result_set
16:21:08 693  	);
16:21:08 694  END GET_LICENSE_BY_ID;
16:21:08 695  
16:21:08 696  /******************************************************************************/
16:21:08 697  
16:21:08 698  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:21:08 699  	in_offer_chain_id	 IN NUMBER,
16:21:08 700  	in_action_name		 IN VARCHAR2,
16:21:08 701  	out_notification_type_id OUT NUMBER
16:21:08 702  ) AS
16:21:08 703  BEGIN
16:21:08 704  	PROCS_OFFER_CHAIN_V16.GET_NOTIFICATION_TYPE_ID(
16:21:08 705  	  in_offer_chain_id,
16:21:08 706  	  in_action_name,
16:21:08 707  	  out_notification_type_id
16:21:08 708  	);
16:21:08 709  END GET_NOTIFICATION_TYPE_ID;
16:21:08 710  
16:21:08 711  /******************************************************************************/
16:21:08 712  
16:21:08 713  PROCEDURE GET_ALL_OCH_META_DATA (
16:21:08 714  	in_offer_chain_id IN NUMBER,
16:21:08 715  	out_result_set	  OUT SYS_REFCURSOR
16:21:08 716  ) AS
16:21:08 717  BEGIN
16:21:08 718  	PROCS_OFFER_CHAIN_V16.GET_ALL_META_DATA (
16:21:08 719  	  in_offer_chain_id,
16:21:08 720  	  out_result_set
16:21:08 721  	);
16:21:08 722  END GET_ALL_OCH_META_DATA;
16:21:08 723  
16:21:08 724  /******************************************************************************/
16:21:08 725  
16:21:08 726  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
16:21:08 727  /*
16:21:08 728  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
16:21:08 729  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
16:21:08 730  */
16:21:08 731  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
16:21:08 732  	out_result_set	     OUT SYS_REFCURSOR
16:21:08 733  ) AS
16:21:08 734  BEGIN
16:21:08 735  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTIONS_META_DATA(
16:21:08 736  	  in_subscriptions_ids,
16:21:08 737  	  out_result_set
16:21:08 738  	);
16:21:08 739  END GET_SUBSCRIPTIONS_META_DATA;
16:21:08 740  
16:21:08 741  PROCEDURE GET_UNREDEEMED_GCS (
16:21:08 742  	out_result_set		OUT SYS_REFCURSOR,
16:21:08 743  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:21:08 744  	in_num_rows		IN NUMBER DEFAULT 10000,
16:21:08 745  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:21:08 746  ) AS
16:21:08 747  BEGIN
16:21:08 748  	PROCS_FIN_INSTRUMENTS_V16.GET_UNREDEEMED_GCS(
16:21:08 749  	  out_result_set => out_result_set,
16:21:08 750  	  in_hours_number => in_hours_number,
16:21:08 751  	  in_num_rows => in_num_rows,
16:21:08 752  	  in_process_name => in_process_name
16:21:08 753  	);
16:21:08 754  END GET_UNREDEEMED_GCS;
16:21:08 755  
16:21:08 756  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
16:21:08 757  	in_offer_chain_id IN NUMBER,
16:21:08 758  	in_meta_data_name IN VARCHAR2,
16:21:08 759  	out_value	  OUT VARCHAR2
16:21:08 760  ) AS
16:21:08 761  BEGIN
16:21:08 762  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
16:21:08 763  	  in_offer_chain_id => in_offer_chain_id,
16:21:08 764  	  in_meta_data_name => in_meta_data_name,
16:21:08 765  	  out_value => out_value
16:21:08 766  	);
16:21:08 767  END GET_OFFER_CHAIN_MD_VALUE;
16:21:08 768  
16:21:08 769  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
16:21:08 770  	out_result_set	    OUT SYS_REFCURSOR
16:21:08 771  )
16:21:08 772  AS
16:21:08 773  BEGIN
16:21:08 774  	PROCS_SUBSCRIPTION_V16.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
16:21:08 775  	  out_result_set => out_result_set
16:21:08 776  	);
16:21:08 777  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
16:21:08 778  
16:21:08 779  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
16:21:08 780  	out_result_set	    OUT SYS_REFCURSOR
16:21:08 781  )
16:21:08 782  AS
16:21:08 783  BEGIN
16:21:08 784  	PROCS_SUBSCRIPTION_V16.GET_ACT_SUBS_W_PP_CHARGEBACKS(
16:21:08 785  	  out_result_set => out_result_set
16:21:08 786  	);
16:21:08 787  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
16:21:08 788  
16:21:08 789  END PUBLIC_PROCS_RENEWAL_V16;
16:21:08 790  .
16:21:08 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:21:08 SQL> 
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ADX_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_TEST_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> 
16:21:08 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V16 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V16 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V16 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> 
16:21:08 SQL> 
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.02
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> 
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> 
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> 
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.05
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> 
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> 
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:21:08 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
16:21:08 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECPR@rac01.prd.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: nytd_oracledba@nytimes.com
Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.prd.ewr1.nytimes.com
        SID: ECPR
        Schema: core_owner
        Migration: 19.2-release-1.11.0-all
        SVN Revision: 10171
        Duration: 7 sec.
        Service Request: https://jira.em.nytimes.com/browse/ORA-315