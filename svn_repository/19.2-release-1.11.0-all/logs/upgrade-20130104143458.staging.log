14:35:10 SQL> @/dbbackups/ECST2/migrations/core_owner/19.2-release-1.11.0-all/upgrade.sql
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_ACCOUNT_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_ACCOUNT (
14:35:10   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
14:35:10   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
14:35:10   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
14:35:10   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
14:35:10   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
14:35:10   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
14:35:10  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:35:10  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
14:35:10  12  );
14:35:10  13  
14:35:10  14  PROCEDURE UPDATE_ACCOUNT (
14:35:10  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
14:35:10  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
14:35:10  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
14:35:10  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
14:35:10  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:35:10  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
14:35:10  22  );
14:35:10  23  
14:35:10  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
14:35:10  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
14:35:10  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
14:35:10  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
14:35:10  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
14:35:10  29  );
14:35:10  30  
14:35:10  31  PROCEDURE READ_ACCOUNT (
14:35:10  32  	in_account_id  IN ACCOUNT.ID%TYPE,
14:35:10  33  	out_result_set OUT SYS_REFCURSOR
14:35:10  34  );
14:35:10  35  
14:35:10  36  PROCEDURE CREATE_ACCOUNT_NOTE (
14:35:10  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
14:35:10  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
14:35:10  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
14:35:10  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
14:35:10  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
14:35:10  42  );
14:35:10  43  
14:35:10  44  END PROCS_ACCOUNT_CRU_V16;
14:35:10  45  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.00
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_ACCOUNT
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE ANNOTATE_ACCOUNT (
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   8  */
14:35:10   9  	in_group_id   IN  NUMBER,
14:35:10  10  	in_agent_id   IN  NUMBER,
14:35:10  11  	in_note       IN  VARCHAR2,
14:35:10  12  	in_created_by IN  VARCHAR2
14:35:10  13  );
14:35:10  14  
14:35:10  15  PROCEDURE ASSERT_ACCOUNT_EXISTS (
14:35:10  16  /*
14:35:10  17  Throws exceptions:
14:35:10  18  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  19  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  20  */
14:35:10  21  	in_group_id IN	NUMBER,
14:35:10  22  	out_exists  OUT NUMBER
14:35:10  23  );
14:35:10  24  
14:35:10  25  PROCEDURE DISABLE_ACCOUNT (
14:35:10  26  /*
14:35:10  27  Throws exceptions:
14:35:10  28  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:10  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:10  30  */
14:35:10  31  	in_group_id   IN NUMBER,
14:35:10  32  	in_updated_by IN VARCHAR2,
14:35:10  33  	in_note       IN VARCHAR2,
14:35:10  34  	in_agent_id   IN NUMBER
14:35:10  35  );
14:35:10  36  
14:35:10  37  PROCEDURE CREATE_ACTIVE_ACCOUNT(
14:35:10  38  /*
14:35:10  39  Throws exceptions:
14:35:10  40  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:10  41  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  42  */
14:35:10  43  	in_created_by	       IN VARCHAR2,
14:35:10  44  	in_group_id	       IN NUMBER
14:35:10  45  );
14:35:10  46  
14:35:10  47  PROCEDURE REACTIVATE_ACCOUNT (
14:35:10  48  /*
14:35:10  49  Throws exceptions:
14:35:10  50  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:10  51  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:10  52  */
14:35:10  53  	in_group_id	  IN NUMBER,
14:35:10  54  	in_updated_by	  IN VARCHAR2,
14:35:10  55  	in_note 	  IN VARCHAR2,
14:35:10  56  	in_agent_id	  IN NUMBER
14:35:10  57  );
14:35:10  58  
14:35:10  59  /*
14:35:10  60  
14:35:10  61  THERE ARE NO ACCOUNT STATUS "SUSPENDED"
14:35:10  62  Waiting for new instructions.
14:35:10  63  
14:35:10  64  PROCEDURE SUSPEND_ACCOUNT (
14:35:10  65  /*
14:35:10  66  Throws exceptions:
14:35:10  67  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:10  68  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:10  69  
14:35:10  70  	  in_group_id	 IN  NUMBER,
14:35:10  71  	  in_updated_by  IN  VARCHAR2
14:35:10  72  )
14:35:10  73  */
14:35:10  74  
14:35:10  75  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
14:35:10  76  /*
14:35:10  77  IN:
14:35:10  78  instr_status:
14:35:10  79  1 - get active instruments only (default)
14:35:10  80  0 - get inactive instruments only
14:35:10  81  
14:35:10  82  Throws exceptions:
14:35:10  83  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  85  */
14:35:10  86  	in_group_id	  IN NUMBER,
14:35:10  87  	out_result_cc_set OUT SYS_REFCURSOR,
14:35:10  88  	out_default_id	  OUT NUMBER,
14:35:10  89  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
14:35:10  90  );
14:35:10  91  
14:35:10  92  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
14:35:10  93  /*
14:35:10  94  IN:
14:35:10  95  instr_status:
14:35:10  96  GLOBAL_CONSTANTS_V16.TRUE - get active instruments only (default)
14:35:10  97  GLOBAL_CONSTANTS_V16.FALSE - get inactive instruments only
14:35:10  98  
14:35:10  99  Throws exceptions:
14:35:10 100  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 102  */
14:35:10 103  	in_group_id	  IN NUMBER,
14:35:10 104  	out_result_gc_set OUT SYS_REFCURSOR,
14:35:10 105  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
14:35:10 106  );
14:35:10 107  
14:35:10 108  PROCEDURE GET_ACCOUNT_INFO  (
14:35:10 109  /*
14:35:10 110  Throws exceptions:
14:35:10 111  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 112  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 113  */
14:35:10 114  	  in_group_id	    IN	NUMBER,
14:35:10 115  	  out_account_info  OUT SYS_REFCURSOR
14:35:10 116  );
14:35:10 117  
14:35:10 118  PROCEDURE GET_ACCOUNT_NOTES (
14:35:10 119  /*
14:35:10 120  Throws exceptions:
14:35:10 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 122  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 123  */
14:35:10 124  	  in_group_id	 IN  NUMBER,
14:35:10 125  	  out_result_set OUT SYS_REFCURSOR
14:35:10 126  );
14:35:10 127  
14:35:10 128  PROCEDURE GET_ACCOUNT_PAYPALS(
14:35:10 129  /*
14:35:10 130  IN:
14:35:10 131  instr_status:
14:35:10 132  1 - get active instruments only (default)
14:35:10 133  0 - get inactive instruments only
14:35:10 134  
14:35:10 135  Throws exceptions:
14:35:10 136  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 137  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 138  */
14:35:10 139  	in_group_id	  IN NUMBER,
14:35:10 140  	out_result_pp_set OUT SYS_REFCURSOR,
14:35:10 141  	out_default_id	  OUT NUMBER,
14:35:10 142  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
14:35:10 143  );
14:35:10 144  
14:35:10 145  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
14:35:10 146  /*
14:35:10 147  Throws exceptions:
14:35:10 148  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 149  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:10 150  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 151  */
14:35:10 152  	  in_group_id	 IN  NUMBER,
14:35:10 153  	  in_start_date  IN DATE,
14:35:10 154  	  in_end_date	 IN DATE,
14:35:10 155  	  in_status	 IN NUMBER,
14:35:10 156  	  in_group_account_type IN VARCHAR2,
14:35:10 157  	  out_result_set  OUT SYS_REFCURSOR
14:35:10 158  );
14:35:10 159  
14:35:10 160  PROCEDURE FREEZE_ACCOUNT (
14:35:10 161  /*
14:35:10 162  Throws exceptions:
14:35:10 163  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 164  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 165  */
14:35:10 166  	in_group_id   IN NUMBER,
14:35:10 167  	in_updated_by IN VARCHAR2,
14:35:10 168  	in_note       IN VARCHAR2,
14:35:10 169  	in_agent_id   IN NUMBER
14:35:10 170  );
14:35:10 171  
14:35:10 172  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
14:35:10 173  /*
14:35:10 174  Throws exceptions:
14:35:10 175  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 176  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 177  */
14:35:10 178  	in_group_id	   IN  NUMBER,
14:35:10 179  	in_subscription_id IN NUMBER,
14:35:10 180  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 181  );
14:35:10 182  
14:35:10 183  PROCEDURE GET_ACCOUNT_GC_INVOICES (
14:35:10 184  /*
14:35:10 185  Throws exceptions:
14:35:10 186  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 188  */
14:35:10 189  	in_group_id    IN  NUMBER,
14:35:10 190  	out_result_set OUT SYS_REFCURSOR
14:35:10 191  );
14:35:10 192  
14:35:10 193  PROCEDURE GET_GC_INVOICE (
14:35:10 194  /*
14:35:10 195  Throws exceptions:
14:35:10 196  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 198  */
14:35:10 199  	in_group_id    IN  NUMBER,
14:35:10 200  	in_gc_code     IN  VARCHAR2,
14:35:10 201  	out_result_set OUT SYS_REFCURSOR
14:35:10 202  );
14:35:10 203  
14:35:10 204  PROCEDURE GET_ACCOUNT_PRODUCTS (
14:35:10 205  /*
14:35:10 206  Throws exceptions:
14:35:10 207  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 208  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 209  */
14:35:10 210  	in_group_id    IN  NUMBER,
14:35:10 211  	out_result_set OUT SYS_REFCURSOR
14:35:10 212  );
14:35:10 213  
14:35:10 214  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
14:35:10 215  /*
14:35:10 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 218  */
14:35:10 219  	in_group_id IN NUMBER,
14:35:10 220  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 221  );
14:35:10 222  
14:35:10 223  PROCEDURE UPDATE_ACCOUNT_STATUS (
14:35:10 224  /*
14:35:10 225  Throws exceptions:
14:35:10 226  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 227  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 228  */
14:35:10 229  	in_account_id	     IN ACCOUNT.ID%TYPE,
14:35:10 230  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
14:35:10 231  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
14:35:10 232  );
14:35:10 233  
14:35:10 234  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
14:35:10 235  /*
14:35:10 236  Throws exceptions:
14:35:10 237  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 239  */
14:35:10 240  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
14:35:10 241  	out_licenses_num OUT NUMBER
14:35:10 242  );
14:35:10 243  
14:35:10 244  PROCEDURE SET_TAX_EXEMPT (
14:35:10 245  /*
14:35:10 246  Throws exceptions:
14:35:10 247  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 248  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 249  */
14:35:10 250  	in_group_id  IN NUMBER,
14:35:10 251  	in_exempt_id IN VARCHAR2
14:35:10 252  );
14:35:10 253  
14:35:10 254  PROCEDURE IS_TAX_EXEMPT (
14:35:10 255  /*
14:35:10 256  Throws exceptions:
14:35:10 257  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 258  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 259  Return:
14:35:10 260  	GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
14:35:10 261  	GLOBAL_CONSTANTS_V16.FALSE else
14:35:10 262  */
14:35:10 263  	in_group_id	  IN NUMBER,
14:35:10 264  	out_is_tax_exempt OUT NUMBER
14:35:10 265  );
14:35:10 266  
14:35:10 267  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
14:35:10 268  /*
14:35:10 269  Throws exceptions:
14:35:10 270  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 271  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 272  */
14:35:10 273  	in_account_id IN NUMBER,
14:35:10 274  	out_group_id  OUT NUMBER
14:35:10 275  );
14:35:10 276  
14:35:10 277  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:35:10 278  /*
14:35:10 279  Throws exceptions:
14:35:10 280  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 281  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 282  */
14:35:10 283  	in_group_id IN NUMBER,
14:35:10 284  	out_account_id	OUT NUMBER
14:35:10 285  );
14:35:10 286  
14:35:10 287  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
14:35:10 288  /*
14:35:10 289  Throws exceptions:
14:35:10 290  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 291  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 292  */
14:35:10 293  	in_invoice_id IN NUMBER,
14:35:10 294  	out_group_ids OUT SYS_REFCURSOR
14:35:10 295  );
14:35:10 296  
14:35:10 297  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
14:35:10 298  /*
14:35:10 299  Throws exceptions:
14:35:10 300  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 301  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 302  */
14:35:10 303  	in_group_id	  IN NUMBER,
14:35:10 304  	out_tax_exempt_id OUT VARCHAR2
14:35:10 305  );
14:35:10 306  
14:35:10 307  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
14:35:10 308  /*
14:35:10 309  Throws exceptions:
14:35:10 310  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 312  
14:35:10 313  Result has two columns:
14:35:10 314  subscription_id and offer_chain_id
14:35:10 315  */
14:35:10 316  	in_group_id    IN NUMBER,
14:35:10 317  	out_result_set OUT SYS_REFCURSOR
14:35:10 318  );
14:35:10 319  
14:35:10 320  PROCEDURE GET_USR_ALL_SBSCR_IDS (
14:35:10 321  /*
14:35:10 322  Throws exceptions:
14:35:10 323  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 324  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 325  
14:35:10 326  Result has two columns:
14:35:10 327  subscription_id and offer_chain_id
14:35:10 328  */
14:35:10 329  	in_group_id	   IN NUMBER,
14:35:10 330  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 331  );
14:35:10 332  
14:35:10 333  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
14:35:10 334  /*
14:35:10 335  Throws exceptions:
14:35:10 336  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 337  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:10 338  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:10 339  
14:35:10 340  Result has two columns:
14:35:10 341  subscription_id and offer_chain_id
14:35:10 342  */
14:35:10 343  	in_group_id	   IN NUMBER,
14:35:10 344  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:35:10 345  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 346  );
14:35:10 347  
14:35:10 348  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
14:35:10 349  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:35:10 350  	in_expiration_date IN DATE,
14:35:10 351  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
14:35:10 352  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10 353  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
14:35:10 354  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
14:35:10 355  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
14:35:10 356  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
14:35:10 357  	in_lower_bound IN NUMBER DEFAULT 1,
14:35:10 358  	in_upper_bound IN NUMBER DEFAULT 11,
14:35:10 359  	out_result_set OUT SYS_REFCURSOR
14:35:10 360  );
14:35:10 361  
14:35:10 362  END PROCS_ACCOUNT_V16;
14:35:10 363  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_ADDRESS_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_ADDRESS(
14:35:10   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
14:35:10   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:35:10   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:35:10   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:35:10   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:35:10  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:35:10  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
14:35:10  13  );
14:35:10  14  
14:35:10  15  PROCEDURE UPDATE_ADDRESS(
14:35:10  16  	in_address_id	      IN ADDRESS.ID%TYPE,
14:35:10  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:35:10  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:35:10  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:35:10  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:35:10  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:35:10  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
14:35:10  24  );
14:35:10  25  
14:35:10  26  END PROCS_ADDRESS_CRU_V16;
14:35:10  27  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_ADDRESS(
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  */
14:35:10   8  	  out_address_id	OUT NUMBER,
14:35:10   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:35:10  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:35:10  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:35:10  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:35:10  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:35:10  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
14:35:10  16  );
14:35:10  17  
14:35:10  18  PROCEDURE UPDATE_ADDRESS(
14:35:10  19  /*
14:35:10  20  Throws exceptions:
14:35:10  21  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  22  */
14:35:10  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
14:35:10  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:35:10  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:35:10  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:35:10  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:35:10  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:35:10  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
14:35:10  31  );
14:35:10  32  
14:35:10  33  PROCEDURE GET_ADDRESS (
14:35:10  34  /*
14:35:10  35  Throws exceptions:
14:35:10  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  37  */
14:35:10  38  	  in_id 		IN ADDRESS.ID%TYPE,
14:35:10  39  	  out_result_set	OUT SYS_REFCURSOR
14:35:10  40  );
14:35:10  41  
14:35:10  42  END PROCS_ADDRESS_V16;
14:35:10  43  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_ADJUSTMENTS
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
14:35:10   4  	in_invoice_id		  IN NUMBER,
14:35:10   5  	in_adjustment_reason	  IN VARCHAR2,
14:35:10   6  	in_is_credit		  IN NUMBER,
14:35:10   7  	in_charge_id		  IN NUMBER,
14:35:10   8  	in_business_date	  IN DATE,
14:35:10   9  	in_created_by		  IN VARCHAR2,
14:35:10  10  	out_invoice_adjustment_id OUT NUMBER
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
14:35:10  14  	in_invoice_id		  IN NUMBER,
14:35:10  15  	in_original_charge_id	  IN NUMBER,
14:35:10  16  	in_charge_id		  IN NUMBER,
14:35:10  17  	in_updated_by		  IN VARCHAR2
14:35:10  18  );
14:35:10  19  
14:35:10  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
14:35:10  21  	in_line_item_id 	    IN NUMBER,
14:35:10  22  	in_invoice_adjustment_id    IN NUMBER,
14:35:10  23  	in_amount		    IN NUMBER,
14:35:10  24  	in_tax			    IN NUMBER,
14:35:10  25  	in_discount		    IN NUMBER,
14:35:10  26  	in_created_by		    IN VARCHAR2,
14:35:10  27  	out_line_item_adjustment_id OUT NUMBER
14:35:10  28  );
14:35:10  29  
14:35:10  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
14:35:10  31  	in_tax_id		   IN NUMBER,
14:35:10  32  	in_line_item_adjustment_id IN NUMBER,
14:35:10  33  	in_amount		   IN NUMBER,
14:35:10  34  	in_created_by		   IN VARCHAR2,
14:35:10  35  	out_tax_adjustment_id	   OUT NUMBER
14:35:10  36  );
14:35:10  37  
14:35:10  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
14:35:10  39  	in_discount_id		   NUMBER,
14:35:10  40  	in_line_item_id 	   NUMBER,
14:35:10  41  	in_line_item_adjustment_id IN NUMBER,
14:35:10  42  	in_amount		   IN NUMBER,
14:35:10  43  	in_created_by		   IN VARCHAR2,
14:35:10  44  	out_discount_li_id	   OUT NUMBER
14:35:10  45  );
14:35:10  46  
14:35:10  47  END PROCS_ADJUSTMENTS_V16;
14:35:10  48  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.03
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE GET_SUB_ADX_INFO (
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  */
14:35:10   8  	out_result_set	    OUT SYS_REFCURSOR,
14:35:10   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
14:35:10  10  );
14:35:10  11  
14:35:10  12  END PROCS_ADX_V16;
14:35:10  13  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.00
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_AMAZON_SUB(
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  */
14:35:10   8  	  out_id	      OUT NUMBER,
14:35:10   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
14:35:10  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
14:35:10  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
14:35:10  12  );
14:35:10  13  
14:35:10  14  END PROCS_AMAZON_CRU_V16;
14:35:10  15  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_AMAZON_SUB(
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  */
14:35:10   8  	  out_id	      OUT NUMBER,
14:35:10   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
14:35:10  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
14:35:10  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
14:35:10  12  );
14:35:10  13  
14:35:10  14  PROCEDURE GET_ACTIVE_SUB_IDS (
14:35:10  15  /*
14:35:10  16  Throws exceptions:
14:35:10  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  18  */
14:35:10  19  	out_result_set	    OUT SYS_REFCURSOR,
14:35:10  20  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
14:35:10  21  );
14:35:10  22  
14:35:10  23  PROCEDURE GET_ACTIVE_GROUP_IDS (
14:35:10  24  /*
14:35:10  25  Throws exceptions:
14:35:10  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  27  */
14:35:10  28  	out_result_set	    OUT SYS_REFCURSOR,
14:35:10  29  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
14:35:10  30  );
14:35:10  31  
14:35:10  32  END PROCS_AMAZON_V16;
14:35:10  33  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_CHARGE_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_CHARGE(
14:35:10   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
14:35:10   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
14:35:10   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
14:35:10   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
14:35:10   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
14:35:10  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
14:35:10  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:35:10  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
14:35:10  13  );
14:35:10  14  
14:35:10  15  PROCEDURE UPDATE_CHARGE(
14:35:10  16  	in_charge_id	      IN CHARGE.ID%TYPE,
14:35:10  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:35:10  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
14:35:10  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
14:35:10  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
14:35:10  22  );
14:35:10  23  
14:35:10  24  END PROCS_CHARGE_CRU_V16;
14:35:10  25  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_CHARGE
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_CHARGE(
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   8  */
14:35:10   9  	in_invoice_id	      IN NUMBER,
14:35:10  10  	in_transaction_id     IN NUMBER,
14:35:10  11  	in_instrument_type_id IN NUMBER,
14:35:10  12  	in_instrument_id      IN NUMBER,
14:35:10  13  	in_charge_amount      IN NUMBER,
14:35:10  14  	in_created_by	      IN VARCHAR2,
14:35:10  15  	in_charge_status_id   IN NUMBER,
14:35:10  16  	out_charge_id	      OUT NUMBER
14:35:10  17  );
14:35:10  18  
14:35:10  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
14:35:10  20  /*
14:35:10  21  Throws exceptions:
14:35:10  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  23  */
14:35:10  24  	out_result_set	    OUT SYS_REFCURSOR,
14:35:10  25  	in_row_number	    IN NUMBER DEFAULT NULL
14:35:10  26  );
14:35:10  27  
14:35:10  28  PROCEDURE GET_UNPROCESSED_CHARGES (
14:35:10  29  /*
14:35:10  30  Throws exceptions:
14:35:10  31  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  32  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  33  */
14:35:10  34  	in_invoice_id  IN NUMBER,
14:35:10  35  	out_result_set OUT SYS_REFCURSOR
14:35:10  36  );
14:35:10  37  
14:35:10  38  PROCEDURE GET_PROCESSED_CHARGES (
14:35:10  39  /*
14:35:10  40  Throws exceptions:
14:35:10  41  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  42  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  43  */
14:35:10  44  	in_invoice_id  IN NUMBER,
14:35:10  45  	out_result_set OUT SYS_REFCURSOR
14:35:10  46  );
14:35:10  47  
14:35:10  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
14:35:10  49  /*
14:35:10  50  Throws exceptions:
14:35:10  51  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  53  */
14:35:10  54  	in_charge_id	    IN NUMBER,
14:35:10  55  	out_subscription_id OUT NUMBER
14:35:10  56  );
14:35:10  57  
14:35:10  58  PROCEDURE UPDATE_CHARGE_STATUS (
14:35:10  59  /*
14:35:10  60  Throws exceptions:
14:35:10  61  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  63  */
14:35:10  64  	in_charge_id	    IN CHARGE.ID%TYPE,
14:35:10  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:35:10  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
14:35:10  67  );
14:35:10  68  
14:35:10  69  FUNCTION IS_CHARGE_COLLECTED (
14:35:10  70  /*
14:35:10  71  Throws:
14:35:10  72  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  74  Returns:
14:35:10  75  GLOBAL_CONST.TRUE if transaction collected,
14:35:10  76  GLOBAL_CONST.FALSE else
14:35:10  77  */
14:35:10  78  	in_charge_id IN NUMBER
14:35:10  79  ) RETURN NUMBER;
14:35:10  80  
14:35:10  81  PROCEDURE GET_COLLECTED_CHARGES (
14:35:10  82  /*
14:35:10  83  Throws exceptions:
14:35:10  84  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  85  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  86  */
14:35:10  87  	in_invoice_id  IN NUMBER,
14:35:10  88  	out_result_set OUT SYS_REFCURSOR
14:35:10  89  );
14:35:10  90  
14:35:10  91  END PROCS_CHARGE_V16;
14:35:10  92  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
14:35:10   2  
14:35:10   3  	PROCEDURE POPULATE_REQUEST_INFO(
14:35:10   4  	  in_hours_prior    IN	NUMBER,
14:35:10   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
14:35:10   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
14:35:10   7  	);
14:35:10   8  
14:35:10   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
14:35:10  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:35:10  11  	  in_start	     IN NUMBER,
14:35:10  12  	  in_end	     IN NUMBER,
14:35:10  13  	  out_result_set     OUT SYS_REFCURSOR
14:35:10  14  	);
14:35:10  15  
14:35:10  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
14:35:10  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
14:35:10  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
14:35:10  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
14:35:10  20  	);
14:35:10  21  
14:35:10  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
14:35:10  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:35:10  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:35:10  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
14:35:10  26  	);
14:35:10  27  
14:35:10  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
14:35:10  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
14:35:10  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
14:35:10  31  	  out_request_files   OUT SYS_REFCURSOR
14:35:10  32  	);
14:35:10  33  
14:35:10  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
14:35:10  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:35:10  36  	  out_count OUT NUMBER
14:35:10  37  	);
14:35:10  38  
14:35:10  39  	PROCEDURE GET_CREDIT_CARD_LICENSE (
14:35:10  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
14:35:10  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
14:35:10  42  	  out_card_license     OUT SYS_REFCURSOR
14:35:10  43  	);
14:35:10  44  
14:35:10  45  	PROCEDURE UPDATE_CC_UPDATE(
14:35:10  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
14:35:10  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:35:10  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
14:35:10  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
14:35:10  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
14:35:10  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:35:10  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
14:35:10  53  	);
14:35:10  54  
14:35:10  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
14:35:10  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
14:35:10  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:35:10  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
14:35:10  59  	);
14:35:10  60  
14:35:10  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
14:35:10  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
14:35:10  63  	  out_request_file     OUT SYS_REFCURSOR
14:35:10  64  	);
14:35:10  65  
14:35:10  66  	PROCEDURE SUSPEND_CREDIT_CARD (
14:35:10  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
14:35:10  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
14:35:10  69  	);
14:35:10  70  
14:35:10  71  	PROCEDURE UPDATE_CREDIT_CARD (
14:35:10  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
14:35:10  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:35:10  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
14:35:10  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
14:35:10  76  	);
14:35:10  77  
14:35:10  78  	PROCEDURE COMPLETABLE_REQUESTS (
14:35:10  79  	  out_request_files OUT SYS_REFCURSOR
14:35:10  80  	);
14:35:10  81  
14:35:10  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
14:35:10  83  	  in_max_hours_before_report IN  NUMBER,
14:35:10  84  	  out_request_files	     OUT SYS_REFCURSOR
14:35:10  85  	);
14:35:10  86  
14:35:10  87  END PROCS_CUPY;
14:35:10  88  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.06
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE
14:35:10   2  PACKAGE PROCS_ENTITLEMENT_V16 AS
14:35:10   3  
14:35:10   4  PROCEDURE GET_ALL_ENTITLEMENTS(
14:35:10   5  	in_group_id IN NUMBER,
14:35:10   6  	out_result_set OUT SYS_REFCURSOR);
14:35:10   7  
14:35:10   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
14:35:10   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:10  10  	out_result_set OUT SYS_REFCURSOR);
14:35:10  11  
14:35:10  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
14:35:10  13  	in_subscription_id IN NUMBER,
14:35:10  14  	out_uri OUT VARCHAR2);
14:35:10  15  
14:35:10  16  END PROCS_ENTITLEMENT_V16;
14:35:10  17  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.00
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_CREDIT_CARD(
14:35:10   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
14:35:10   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
14:35:10   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
14:35:10   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
14:35:10   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
14:35:10  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
14:35:10  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
14:35:10  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
14:35:10  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
14:35:10  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
14:35:10  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:35:10  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
14:35:10  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
14:35:10  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
14:35:10  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
14:35:10  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
14:35:10  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
14:35:10  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
14:35:10  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
14:35:10  24  );
14:35:10  25  
14:35:10  26  PROCEDURE UPDATE_CREDIT_CARD(
14:35:10  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
14:35:10  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:35:10  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
14:35:10  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:35:10  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
14:35:10  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
14:35:10  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
14:35:10  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
14:35:10  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
14:35:10  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:35:10  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
14:35:10  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
14:35:10  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
14:35:10  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
14:35:10  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
14:35:10  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
14:35:10  45  );
14:35:10  46  
14:35:10  47  PROCEDURE CREATE_PAYPAL(
14:35:10  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
14:35:10  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
14:35:10  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
14:35:10  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:35:10  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
14:35:10  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
14:35:10  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
14:35:10  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
14:35:10  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
14:35:10  57  	in_state			IN PAYPAL.STATE%TYPE,
14:35:10  58  	in_city 			IN PAYPAL.CITY%TYPE,
14:35:10  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
14:35:10  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
14:35:10  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
14:35:10  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
14:35:10  63  );
14:35:10  64  
14:35:10  65  PROCEDURE UPDATE_PAYPAL(
14:35:10  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
14:35:10  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:35:10  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
14:35:10  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
14:35:10  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:35:10  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:35:10  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
14:35:10  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
14:35:10  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
14:35:10  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:35:10  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
14:35:10  79  );
14:35:10  80  
14:35:10  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
14:35:10  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
14:35:10  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
14:35:10  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
14:35:10  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:10  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
14:35:10  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:35:10  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
14:35:10  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
14:35:10  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
14:35:10  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
14:35:10  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
14:35:10  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
14:35:10  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
14:35:10  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
14:35:10  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
14:35:10  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
14:35:10  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
14:35:10  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
14:35:10 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
14:35:10 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
14:35:10 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
14:35:10 103  );
14:35:10 104  
14:35:10 105  PROCEDURE UPDATE_GIFT_CERTIFICATE(
14:35:10 106  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
14:35:10 107  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:35:10 108  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
14:35:10 109  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
14:35:10 110  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
14:35:10 111  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
14:35:10 112  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
14:35:10 113  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
14:35:10 114  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
14:35:10 115  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
14:35:10 116  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
14:35:10 117  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
14:35:10 118  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
14:35:10 119  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
14:35:10 120  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
14:35:10 121  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
14:35:10 122  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
14:35:10 123  );
14:35:10 124  
14:35:10 125  END PROCS_FIN_INSTRUMENTS_CRU_V16;
14:35:10 126  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
14:35:10   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:10   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
14:35:10   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
14:35:10   7  );
14:35:10   8  
14:35:10   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
14:35:10  10  	in_invoice_id		     IN NUMBER,
14:35:10  11  	out_is_invoice_for_redeem_gc OUT NUMBER
14:35:10  12  );
14:35:10  13  
14:35:10  14  PROCEDURE GET_UNREDEEMED_GCS (
14:35:10  15  	out_result_set		OUT SYS_REFCURSOR,
14:35:10  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:35:10  17  	in_num_rows		IN NUMBER DEFAULT 10000,
14:35:10  18  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:10  19  );
14:35:10  20  
14:35:10  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
14:35:10  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:10  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
14:35:10  24  );
14:35:10  25  
14:35:10  26  PROCEDURE ADD_CREDIT_CARD (
14:35:10  27  /*
14:35:10  28  Throws exceptions:
14:35:10  29  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  31  */
14:35:10  32  	in_group_id		  IN NUMBER,
14:35:10  33  	in_updated_by		  IN VARCHAR2,
14:35:10  34  	in_instrument_name	  IN VARCHAR2,
14:35:10  35  	in_card_holder_name	  IN VARCHAR2,
14:35:10  36  	in_street_address	  IN VARCHAR2,
14:35:10  37  	in_street_address2	  IN VARCHAR2,
14:35:10  38  	in_state		  IN VARCHAR2,
14:35:10  39  	in_city 		  IN VARCHAR2,
14:35:10  40  	in_postal_code		  IN VARCHAR2,
14:35:10  41  	in_country		  IN CHAR,
14:35:10  42  	in_last_four_cc 	  IN VARCHAR2,
14:35:10  43  	in_expiration_date	  IN DATE,
14:35:10  44  	in_credit_card_type_id	  IN NUMBER,
14:35:10  45  	in_token		  IN VARCHAR2,
14:35:10  46  	in_chase_profile_id	  IN VARCHAR2,
14:35:10  47  	in_credit_card_status_id  IN NUMBER,
14:35:10  48  	in_private_first_name	  IN VARCHAR2,
14:35:10  49  	in_private_last_name	  IN VARCHAR2,
14:35:10  50  	out_credit_card_id	  OUT NUMBER
14:35:10  51  );
14:35:10  52  
14:35:10  53  /******************************************************************************/
14:35:10  54  
14:35:10  55  PROCEDURE ADD_PAYPAL (
14:35:10  56  /*
14:35:10  57  Throws exceptions:
14:35:10  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  60  */
14:35:10  61  	in_group_id			IN NUMBER,
14:35:10  62  	in_instrument_name		IN VARCHAR2,
14:35:10  63  	in_private_email_address	IN VARCHAR2,
14:35:10  64  	in_created_by			IN VARCHAR2,
14:35:10  65  	in_paypal_status_id		IN NUMBER,
14:35:10  66  	in_paypal_prvt_street_address	IN VARCHAR2,
14:35:10  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
14:35:10  68  	in_state			IN VARCHAR2,
14:35:10  69  	in_city 			IN VARCHAR2,
14:35:10  70  	in_postal_code			IN VARCHAR2,
14:35:10  71  	in_country			IN CHAR,
14:35:10  72  	in_expiration_date		IN DATE,
14:35:10  73  	in_secret_token 		IN VARCHAR2,
14:35:10  74  	out_paypal_id			OUT NUMBER
14:35:10  75  );
14:35:10  76  
14:35:10  77  /********************************************/
14:35:10  78  
14:35:10  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
14:35:10  80  /*
14:35:10  81  Throws exceptions:
14:35:10  82  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10  83  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  84  */
14:35:10  85  	in_code       IN VARCHAR,
14:35:10  86  	out_result_set OUT SYS_REFCURSOR
14:35:10  87  );
14:35:10  88  
14:35:10  89  /********************************************/
14:35:10  90  
14:35:10  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
14:35:10  92  /*
14:35:10  93  Throws exceptions:
14:35:10  94  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10  95  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  96  */
14:35:10  97  	in_gift_certificate_id IN NUMBER,
14:35:10  98  	out_result_set	       OUT SYS_REFCURSOR
14:35:10  99  );
14:35:10 100  
14:35:10 101  /********************************************/
14:35:10 102  
14:35:10 103  PROCEDURE DISABLE_CREDIT_CARD (
14:35:10 104  /*
14:35:10 105  Throws exceptions:
14:35:10 106  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 107  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 108  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 109  */
14:35:10 110  	in_credit_card_id IN NUMBER,
14:35:10 111  	in_updated_by	  IN VARCHAR2
14:35:10 112  );
14:35:10 113  
14:35:10 114  /********************************************/
14:35:10 115  
14:35:10 116  PROCEDURE DISABLE_PAYPAL (
14:35:10 117  /*
14:35:10 118  Throws exceptions:
14:35:10 119  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 120  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 121  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 122  */
14:35:10 123  	in_paypal_id  IN NUMBER,
14:35:10 124  	in_updated_by IN VARCHAR2
14:35:10 125  );
14:35:10 126  
14:35:10 127  /********************************************/
14:35:10 128  
14:35:10 129  PROCEDURE UPDATE_CREDIT_CARD (
14:35:10 130  /*
14:35:10 131  Throws exceptions:
14:35:10 132  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 133  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 134  */
14:35:10 135  	in_credit_card_id	  IN NUMBER,
14:35:10 136  	in_updated_by		  IN VARCHAR2,
14:35:10 137  	in_instrument_name	  IN VARCHAR2,
14:35:10 138  	in_is_default		  IN NUMBER
14:35:10 139  );
14:35:10 140  
14:35:10 141  /********************************************/
14:35:10 142  
14:35:10 143  PROCEDURE START_GC_PURCHASING (
14:35:10 144  	in_group_id		  IN NUMBER,
14:35:10 145  	in_offer_chain_id	  IN VARCHAR2,
14:35:10 146  	in_gift_certificate_code  IN  VARCHAR2,
14:35:10 147  	in_created_by		  IN  VARCHAR2,
14:35:10 148  	in_recipient_name	  IN  VARCHAR2,
14:35:10 149  	in_recipient_email	  IN  VARCHAR2,
14:35:10 150  	in_recipient_address_id   IN NUMBER,
14:35:10 151  	in_recipient_notify_date  IN DATE,
14:35:10 152  	in_sender_name		  IN VARCHAR2,
14:35:10 153  	in_sender_email 	  IN VARCHAR2,
14:35:10 154  	in_gift_message 	  IN  VARCHAR2,
14:35:10 155  	in_expiration_date	  IN DATE,
14:35:10 156  	out_gift_certificate_id   OUT NUMBER,
14:35:10 157  	out_invoice_id		  OUT NUMBER
14:35:10 158  );
14:35:10 159  
14:35:10 160  PROCEDURE FINALIZE_GC_PURCHASING (
14:35:10 161  	in_invoice_id	      IN NUMBER,
14:35:10 162  	in_created_by	      IN VARCHAR2,
14:35:10 163  	in_instrument_id      IN NUMBER,
14:35:10 164  	in_instrument_type_id IN NUMBER,
14:35:10 165  	in_order_id	      IN VARCHAR2,
14:35:10 166  	in_transaction_id     IN NUMBER,
14:35:10 167  	out_charge_amount     OUT NUMBER
14:35:10 168  );
14:35:10 169  
14:35:10 170  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
14:35:10 171  	in_group_id	  IN NUMBER,
14:35:10 172  	in_offer_chain_id IN VARCHAR2,
14:35:10 173  	in_gift_certificate_code  IN  VARCHAR2,
14:35:10 174  	in_created_by IN  VARCHAR2,
14:35:10 175  	in_recipient_name IN  VARCHAR2,
14:35:10 176  	in_recipient_email IN  VARCHAR2,
14:35:10 177  	in_sender_name IN VARCHAR2,
14:35:10 178  	in_sender_email IN VARCHAR2,
14:35:10 179  	in_gift_message IN  VARCHAR2,
14:35:10 180  	in_instrument_id  IN  NUMBER,
14:35:10 181  	in_instrument_type_id IN NUMBER,
14:35:10 182  	in_expiration_date IN DATE,
14:35:10 183  	in_order_id IN VARCHAR2,
14:35:10 184  	in_transaction_id IN NUMBER
14:35:10 185  );
14:35:10 186  
14:35:10 187  /*********************************************/
14:35:10 188  
14:35:10 189  PROCEDURE REDEEM_GIFT_CERTIFICATE (
14:35:10 190  	in_group_id			IN NUMBER,
14:35:10 191  	in_gift_certificate_code	IN VARCHAR2,
14:35:10 192  	in_created_by			IN VARCHAR2,
14:35:10 193  	in_redeemer_address_id		IN NUMBER,
14:35:10 194  	in_fin_instrument_id		IN NUMBER,
14:35:10 195  	in_fin_instrument_type_id	IN NUMBER,
14:35:10 196  	in_redemption_offer_chain_id	IN NUMBER,
14:35:10 197  	out_subscription_id		OUT NUMBER,
14:35:10 198  	out_license_id			OUT NUMBER
14:35:10 199  );
14:35:10 200  
14:35:10 201  /********************************************/
14:35:10 202  
14:35:10 203  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
14:35:10 204  	in_group_id	       IN  NUMBER,
14:35:10 205  	out_instrument_type_id OUT NUMBER,
14:35:10 206  	out_instrument_id      OUT NUMBER
14:35:10 207  );
14:35:10 208  
14:35:10 209  /************************************************/
14:35:10 210  
14:35:10 211  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
14:35:10 212  	in_group_id	      IN NUMBER,
14:35:10 213  	in_instrument_type_id IN NUMBER,
14:35:10 214  	in_instrument_id      IN NUMBER,
14:35:10 215  	in_updated_by	      IN VARCHAR2
14:35:10 216  );
14:35:10 217  
14:35:10 218  /***************************************************/
14:35:10 219  
14:35:10 220  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
14:35:10 221  	in_group_id	      IN NUMBER
14:35:10 222  );
14:35:10 223  
14:35:10 224  /****************************************************/
14:35:10 225  
14:35:10 226  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:35:10 227  	in_credit_card_id IN  NUMBER,
14:35:10 228  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 229  );
14:35:10 230  
14:35:10 231  /****************************************************/
14:35:10 232  
14:35:10 233  PROCEDURE GET_PAYPAL_BY_ID (
14:35:10 234  	in_paypal_id   IN  NUMBER,
14:35:10 235  	out_result_set OUT SYS_REFCURSOR
14:35:10 236  );
14:35:10 237  
14:35:10 238  /***********************************************/
14:35:10 239  
14:35:10 240  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
14:35:10 241  	in_credit_card_id NUMBER
14:35:10 242  ) RETURN NUMBER;
14:35:10 243  
14:35:10 244  /*************************************************/
14:35:10 245  
14:35:10 246  PROCEDURE GET_PURCHASED_GCERTIFICATES (
14:35:10 247  	in_group_id    IN NUMBER,
14:35:10 248  	out_result_set OUT SYS_REFCURSOR
14:35:10 249  );
14:35:10 250  
14:35:10 251  /*************************************************/
14:35:10 252  
14:35:10 253  -- isGiftCertificateForProperOffer
14:35:10 254  
14:35:10 255  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
14:35:10 256  	in_gift_certificate_id IN NUMBER,
14:35:10 257  	in_charge_id	       IN NUMBER,
14:35:10 258  	out_result	       OUT NUMBER
14:35:10 259  );
14:35:10 260  
14:35:10 261  FUNCTION IS_CREDIT_CARD_EXISTS (
14:35:10 262  /*
14:35:10 263  1 - if instrument exists
14:35:10 264  0 - else
14:35:10 265  */
14:35:10 266  	in_credit_card_id IN NUMBER
14:35:10 267  ) RETURN NUMBER;
14:35:10 268  
14:35:10 269  FUNCTION IS_PAYPAL_EXISTS (
14:35:10 270  /*
14:35:10 271  1 - if instrument exists
14:35:10 272  0 - else
14:35:10 273  */
14:35:10 274  	in_paypal_id IN NUMBER
14:35:10 275  ) RETURN NUMBER;
14:35:10 276  
14:35:10 277  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
14:35:10 278  /*
14:35:10 279  1 - if instrument exists
14:35:10 280  0 - else
14:35:10 281  */
14:35:10 282  	in_gift_certificate_id IN NUMBER
14:35:10 283  ) RETURN NUMBER;
14:35:10 284  
14:35:10 285  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
14:35:10 286  	in_credit_card_id IN NUMBER,
14:35:10 287  	out_group_id	  OUT NUMBER
14:35:10 288  );
14:35:10 289  
14:35:10 290  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
14:35:10 291  	in_paypal_id IN NUMBER,
14:35:10 292  	out_group_id	  OUT NUMBER
14:35:10 293  );
14:35:10 294  
14:35:10 295  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
14:35:10 296  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
14:35:10 297  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
14:35:10 298  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
14:35:10 299  );
14:35:10 300  
14:35:10 301  PROCEDURE UPDATE_PAYPAL_STATUS (
14:35:10 302  	in_paypal_id	    IN PAYPAL.ID%TYPE,
14:35:10 303  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
14:35:10 304  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
14:35:10 305  );
14:35:10 306  
14:35:10 307  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
14:35:10 308  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
14:35:10 309  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
14:35:10 310  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
14:35:10 311  );
14:35:10 312  
14:35:10 313  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:35:10 314  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:10 315  	out_result_set OUT SYS_REFCURSOR
14:35:10 316  );
14:35:10 317  
14:35:10 318  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
14:35:10 319  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
14:35:10 320  	in_old_fin_instrument_id   IN NUMBER,
14:35:10 321  	in_old_fin_instrument_type IN NUMBER,
14:35:10 322  	in_new_fin_instrument_id   IN NUMBER,
14:35:10 323  	in_new_fin_instrument_type IN NUMBER,
14:35:10 324  	in_updated_by		   IN VARCHAR2
14:35:10 325  );
14:35:10 326  
14:35:10 327  END PROCS_FIN_INSTRUMENTS_V16;
14:35:10 328  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
14:35:10   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
14:35:10   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
14:35:10   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
14:35:10   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
14:35:10   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
14:35:10   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
14:35:10  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
14:35:10  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:10  12  );
14:35:10  13  
14:35:10  14  PROCEDURE CREATE_GROUP_ACCOUNT (
14:35:10  15  	in_subscription_id	 IN NUMBER,
14:35:10  16  	in_group_name		 IN VARCHAR2,
14:35:10  17  	in_first_name		 IN VARCHAR2,
14:35:10  18  	in_last_name		 IN VARCHAR2,
14:35:10  19  	in_email		 IN VARCHAR2,
14:35:10  20  	in_phone		 IN VARCHAR2,
14:35:10  21  	in_organization_type	 IN VARCHAR2,
14:35:10  22  	in_seats		 IN NUMBER,
14:35:10  23  	in_seat_ttl_in_hours	 IN NUMBER,
14:35:10  24  	in_ip			 IN NUMBER,
14:35:10  25  	in_created_by		 IN VARCHAR2
14:35:10  26  );
14:35:10  27  
14:35:10  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
14:35:10  29  	in_group_account_id    IN NUMBER,
14:35:10  30  	in_borrower_account_id IN NUMBER,
14:35:10  31  	in_ip_address	       IN VARCHAR2,
14:35:10  32  	in_email_domain        IN VARCHAR2,
14:35:10  33  	in_start_date	       IN DATE,
14:35:10  34  	in_end_date	       IN DATE,
14:35:10  35  	in_created_by	       IN VARCHAR2
14:35:10  36  );
14:35:10  37  
14:35:10  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
14:35:10  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:10  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:35:10  41  );
14:35:10  42  
14:35:10  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
14:35:10  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
14:35:10  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:35:10  46  );
14:35:10  47  
14:35:10  48  PROCEDURE ADD_IP_RANGE (
14:35:10  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:10  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
14:35:10  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:35:10  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:35:10  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
14:35:10  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
14:35:10  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
14:35:10  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
14:35:10  57  );
14:35:10  58  
14:35:10  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
14:35:10  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:10  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:10  62  );
14:35:10  63  
14:35:10  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
14:35:10  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:35:10  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:10  67  );
14:35:10  68  
14:35:10  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
14:35:10  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:35:10  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:10  72  );
14:35:10  73  
14:35:10  74  PROCEDURE ADD_EMAIL_DOMAIN (
14:35:10  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:10  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:35:10  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
14:35:10  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
14:35:10  79  );
14:35:10  80  
14:35:10  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
14:35:10  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:35:10  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
14:35:10  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
14:35:10  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
14:35:10  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
14:35:10  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
14:35:10  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:35:10  89  );
14:35:10  90  
14:35:10  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
14:35:10  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:35:10  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
14:35:10  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:35:10  95  );
14:35:10  96  END PROCS_GROUP_ACCOUNT_CRU_V16;
14:35:10  97  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V16" As
14:35:10   2  
14:35:10   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
14:35:10   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
14:35:10   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
14:35:10   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:10   7  );
14:35:10   8  
14:35:10   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
14:35:10  10  	out_result_set OUT SYS_REFCURSOR
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE EXPIRE_SUB_SHARE (
14:35:10  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
14:35:10  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:10  16  );
14:35:10  17  
14:35:10  18  PROCEDURE EXPIRE_ALL_SHARES (
14:35:10  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
14:35:10  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:10  21  );
14:35:10  22  
14:35:10  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
14:35:10  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
14:35:10  25  	in_start	 IN  NUMBER,
14:35:10  26  	in_end		 IN  NUMBER,
14:35:10  27  	in_expired	 IN  NUMBER,
14:35:10  28  	out_result_set	 OUT SYS_REFCURSOR,
14:35:10  29  	out_shares_count OUT NUMBER
14:35:10  30  );
14:35:10  31  
14:35:10  32  PROCEDURE IS_VALID_IP_ADDRESS (
14:35:10  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:10  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:35:10  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:35:10  36  	out_is_valid	    OUT NUMBER
14:35:10  37  );
14:35:10  38  
14:35:10  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
14:35:10  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:10  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:35:10  42  	out_is_valid	    OUT NUMBER
14:35:10  43  );
14:35:10  44  
14:35:10  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
14:35:10  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
14:35:10  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
14:35:10  48  	Out_Result_Set	       Out Sys_Refcursor
14:35:10  49  );
14:35:10  50  
14:35:10  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
14:35:10  52  	in_group_account_id IN NUMBER,
14:35:10  53  	in_start	    IN NUMBER,
14:35:10  54  	in_end		    IN NUMBER,
14:35:10  55  	Out_Result_Set	    OUT Sys_Refcursor
14:35:10  56  );
14:35:10  57  
14:35:10  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
14:35:10  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
14:35:10  60  	Out_Result_Set	   Out Sys_Refcursor
14:35:10  61  );
14:35:10  62  
14:35:10  63  PROCEDURE CREATE_GROUP_ACCOUNT (
14:35:10  64  	in_subscription_id	 IN NUMBER,
14:35:10  65  	in_group_name		 IN VARCHAR2,
14:35:10  66  	in_first_name		 IN VARCHAR2,
14:35:10  67  	in_last_name		 IN VARCHAR2,
14:35:10  68  	in_email		 IN VARCHAR2,
14:35:10  69  	in_phone		 IN VARCHAR2,
14:35:10  70  	in_organization_type	 IN VARCHAR2,
14:35:10  71  	in_seats		 IN NUMBER,
14:35:10  72  	in_seat_ttl_in_hours	 IN NUMBER,
14:35:10  73  	in_ip			 IN NUMBER,
14:35:10  74  	in_created_by		 IN VARCHAR2
14:35:10  75  );
14:35:10  76  
14:35:10  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
14:35:10  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:35:10  79  	out_result_set	    OUT SYS_REFCURSOR
14:35:10  80  );
14:35:10  81  
14:35:10  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
14:35:10  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:35:10  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:35:10  85  	out_result_set	    OUT SYS_REFCURSOR
14:35:10  86  );
14:35:10  87  
14:35:10  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
14:35:10  89  	in_group_account_id   IN NUMBER,
14:35:10  90  	in_start	      IN NUMBER,
14:35:10  91  	in_end		      IN NUMBER,
14:35:10  92  	in_status	      IN NUMBER,
14:35:10  93  	out_record_count      OUT NUMBER,
14:35:10  94  	out_result_set	      OUT SYS_REFCURSOR
14:35:10  95  );
14:35:10  96  
14:35:10  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
14:35:10  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:10  99  	in_start	      IN NUMBER,
14:35:10 100  	in_end		      IN NUMBER,
14:35:10 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
14:35:10 102  	out_record_count      OUT NUMBER,
14:35:10 103  	out_result_set	      OUT SYS_REFCURSOR
14:35:10 104  );
14:35:10 105  
14:35:10 106  PROCEDURE ADD_EMAIL_DOMAIN (
14:35:10 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:10 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:35:10 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
14:35:10 110  );
14:35:10 111  
14:35:10 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
14:35:10 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:10 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:10 115  );
14:35:10 116  
14:35:10 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
14:35:10 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:35:10 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:10 120  );
14:35:10 121  
14:35:10 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
14:35:10 123  	in_group_account_id    IN NUMBER,
14:35:10 124  	in_borrower_account_id IN NUMBER,
14:35:10 125  	in_ip_address	       IN VARCHAR2,
14:35:10 126  	in_email_domain        IN VARCHAR2,
14:35:10 127  	in_created_by	       IN VARCHAR2
14:35:10 128  );
14:35:10 129  
14:35:10 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
14:35:10 131  	in_group_account_id   IN NUMBER,
14:35:10 132  	out_occupied_seats   OUT NUMBER
14:35:10 133  );
14:35:10 134  
14:35:10 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
14:35:10 136  	in_group_account_id   IN NUMBER
14:35:10 137  ) RETURN NUMBER;
14:35:10 138  
14:35:10 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
14:35:10 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:10 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:35:10 142  );
14:35:10 143  
14:35:10 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
14:35:10 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
14:35:10 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:35:10 147  );
14:35:10 148  
14:35:10 149  PROCEDURE ADD_IP_RANGE (
14:35:10 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:10 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
14:35:10 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:35:10 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:35:10 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
14:35:10 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
14:35:10 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
14:35:10 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
14:35:10 158  );
14:35:10 159  
14:35:10 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
14:35:10 161  	in_group_account_id IN NUMBER,
14:35:10 162  	out_group_id OUT NUMBER
14:35:10 163  );
14:35:10 164  
14:35:10 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
14:35:10 166  	in_group_account_ip_range_id IN NUMBER,
14:35:10 167  	out_group_id OUT NUMBER
14:35:10 168  );
14:35:10 169  
14:35:10 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
14:35:10 171  	in_group_account_email_dom_id IN NUMBER,
14:35:10 172  	out_group_id OUT NUMBER
14:35:10 173  );
14:35:10 174  
14:35:10 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
14:35:10 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:35:10 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
14:35:10 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
14:35:10 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
14:35:10 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
14:35:10 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
14:35:10 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:35:10 183  );
14:35:10 184  
14:35:10 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
14:35:10 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:35:10 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
14:35:10 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:35:10 189  );
14:35:10 190  
14:35:10 191  END PROCS_GROUP_ACCOUNT_V16;
14:35:10 192  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.03
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_HISTORY
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_ADDRESS_HISTORY(
14:35:10   4  /*
14:35:10   5  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10   8  */
14:35:10   9  	in_address_id		     IN NUMBER,
14:35:10  10  	in_system_activity_reason_id IN NUMBER
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE CREATE_ACCOUNT_HISTORY(
14:35:10  14  /*
14:35:10  15  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  17  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  18  */
14:35:10  19  	in_account_id		     IN NUMBER,
14:35:10  20  	in_system_activity_reason_id IN NUMBER
14:35:10  21  );
14:35:10  22  
14:35:10  23  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
14:35:10  24  /*
14:35:10  25  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  27  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  28  */
14:35:10  29  	in_subscription_id	     IN NUMBER,
14:35:10  30  	in_system_activity_reason_id IN NUMBER
14:35:10  31  );
14:35:10  32  
14:35:10  33  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
14:35:10  34  /*
14:35:10  35  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  37  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  38  */
14:35:10  39  	in_credit_card_id	      IN NUMBER,
14:35:10  40  	in_system_activity_reason_id  IN  NUMBER
14:35:10  41  );
14:35:10  42  
14:35:10  43  PROCEDURE CREATE_PAYPAL_HISTORY(
14:35:10  44  /*
14:35:10  45  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  46  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  47  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  48  */
14:35:10  49  	in_paypal_id		      IN NUMBER,
14:35:10  50  	in_system_activity_reason_id  IN NUMBER
14:35:10  51  );
14:35:10  52  
14:35:10  53  PROCEDURE CREATE_GIFT_CERT_HISTORY(
14:35:10  54  /*
14:35:10  55  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  56  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  57  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  58  */
14:35:10  59  	in_gift_certificate_id	      IN NUMBER,
14:35:10  60  	in_system_activity_reason_id  IN  NUMBER
14:35:10  61  );
14:35:10  62  
14:35:10  63  PROCEDURE CREATE_TRANSACTION_HISTORY (
14:35:10  64  /*
14:35:10  65  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  67  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  68  */
14:35:10  69  	in_transaction_id	     IN NUMBER,
14:35:10  70  	in_system_activity_reason_id IN NUMBER
14:35:10  71  );
14:35:10  72  
14:35:10  73  PROCEDURE CREATE_INVOICE_HISTORY (
14:35:10  74  /*
14:35:10  75  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  76  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  77  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  78  */
14:35:10  79  	in_invoice_id		     IN NUMBER,
14:35:10  80  	in_system_activity_reason_id IN NUMBER
14:35:10  81  );
14:35:10  82  
14:35:10  83  PROCEDURE CREATE_LICENSE_HISTORY (
14:35:10  84  /*
14:35:10  85  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  87  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  88  */
14:35:10  89  	in_license_id		     IN NUMBER,
14:35:10  90  	in_system_activity_reason_id IN NUMBER
14:35:10  91  );
14:35:10  92  
14:35:10  93  PROCEDURE CREATE_CHARGE_HISTORY (
14:35:10  94  /*
14:35:10  95  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  96  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  97  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  98  */
14:35:10  99  	in_charge_id		    IN NUMBER,
14:35:10 100  	in_system_activity_reason_id IN NUMBER
14:35:10 101  );
14:35:10 102  
14:35:10 103  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
14:35:10 104  /*
14:35:10 105  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 106  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 107  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 108  */
14:35:10 109  	in_invoice_adjustment_id     IN NUMBER,
14:35:10 110  	in_system_activity_reason_id IN NUMBER
14:35:10 111  );
14:35:10 112  
14:35:10 113  
14:35:10 114  END PROCS_HISTORY_V16;
14:35:10 115  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.11
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_INVOICE_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_INVOICE (
14:35:10   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
14:35:10   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
14:35:10   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
14:35:10   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
14:35:10   9  );
14:35:10  10  
14:35:10  11  PROCEDURE UPDATE_INVOICE (
14:35:10  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
14:35:10  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
14:35:10  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
14:35:10  16  );
14:35:10  17  
14:35:10  18  END PROCS_INVOICE_CRU_V16;
14:35:10  19  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_INVOICE
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE IS_INVOICE_FOR_GC (
14:35:10   4  	in_invoice_id  IN NUMBER,
14:35:10   5  	out_result     OUT NUMBER
14:35:10   6  );
14:35:10   7  
14:35:10   8  PROCEDURE CREATE_INVOICE(
14:35:10   9  /*
14:35:10  10  Throws exceptions:
14:35:10  11  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  12  */
14:35:10  13  	  in_invoice_status IN NUMBER,
14:35:10  14  	  in_created_by     IN VARCHAR2,
14:35:10  15  	  in_tax_exempt_id  IN VARCHAR2,
14:35:10  16  	  out_invoice_id    OUT NUMBER
14:35:10  17  );
14:35:10  18  
14:35:10  19  PROCEDURE GET_PENDING_INVOICES (
14:35:10  20  /*
14:35:10  21  Throws exceptions:
14:35:10  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  23  */
14:35:10  24  	out_result_set1      OUT SYS_REFCURSOR,
14:35:10  25  	out_result_set2      OUT SYS_REFCURSOR,
14:35:10  26  	out_result_set3      OUT SYS_REFCURSOR,
14:35:10  27  	in_row_number	     IN NUMBER DEFAULT NULL
14:35:10  28  );
14:35:10  29  
14:35:10  30  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:35:10  31  /*
14:35:10  32  Throws exceptions:
14:35:10  33  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  34  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  35  */
14:35:10  36  	in_invoice_id IN  NUMBER,
14:35:10  37  	out_amount    OUT NUMBER
14:35:10  38  );
14:35:10  39  
14:35:10  40  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
14:35:10  41  	in_invoice_id IN  NUMBER
14:35:10  42  ) RETURN NUMBER;
14:35:10  43  
14:35:10  44  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
14:35:10  45  /*
14:35:10  46  Throws exceptions:
14:35:10  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  49  */
14:35:10  50  	in_invoice_id  IN  NUMBER,
14:35:10  51  	out_account_id OUT NUMBER
14:35:10  52  );
14:35:10  53  
14:35:10  54  PROCEDURE GET_INVOICE_DETAILS (
14:35:10  55  /*
14:35:10  56  Throws exceptions:
14:35:10  57  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  58  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  59  */
14:35:10  60  	in_invoice_id	   IN  NUMBER,
14:35:10  61  	out_group_id	   OUT NUMBER,
14:35:10  62  	out_status_id	   OUT NUMBER,
14:35:10  63  	out_line_items_set OUT SYS_REFCURSOR,
14:35:10  64  	out_pp_charges_set OUT SYS_REFCURSOR,
14:35:10  65  	out_cc_charges_set OUT SYS_REFCURSOR,
14:35:10  66  	out_gc_charges_set OUT SYS_REFCURSOR
14:35:10  67  );
14:35:10  68  -- norlov: #38796
14:35:10  69  PROCEDURE GET_TRANSACTION_INVOICE (
14:35:10  70  /*
14:35:10  71  Throws exceptions:
14:35:10  72  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  74  */
14:35:10  75  	in_transaction_id  IN  NUMBER,
14:35:10  76  	out_result_set	      OUT SYS_REFCURSOR
14:35:10  77  );
14:35:10  78  
14:35:10  79  PROCEDURE UPDATE_INVOICE_STATUS (
14:35:10  80  /*
14:35:10  81  Throws exceptions:
14:35:10  82  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  83  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  84  */
14:35:10  85  	in_invoice_id		       IN NUMBER,
14:35:10  86  	in_invoice_status_id	       IN NUMBER,
14:35:10  87  	in_updated_by		       IN VARCHAR2
14:35:10  88  );
14:35:10  89  
14:35:10  90  FUNCTION IS_INVOICE_PAYING_STARTED (
14:35:10  91  /*
14:35:10  92  Throws exceptions:
14:35:10  93  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  95  */
14:35:10  96  	in_invoice_id IN NUMBER
14:35:10  97  ) RETURN NUMBER;
14:35:10  98  
14:35:10  99  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
14:35:10 100  	in_invoice_id  IN NUMBER,
14:35:10 101  	out_is_started OUT NUMBER
14:35:10 102  );
14:35:10 103  
14:35:10 104  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
14:35:10 105  	in_invoice_id	      IN NUMBER,
14:35:10 106  	in_chargeback_date    IN DATE,
14:35:10 107  	out_chargeback_amount OUT NUMBER
14:35:10 108  );
14:35:10 109  
14:35:10 110  PROCEDURE APPLY_REFUND (
14:35:10 111  	in_invoice_id	     IN NUMBER,
14:35:10 112  	in_chargeback_amount IN NUMBER,
14:35:10 113  	in_created_by	     IN VARCHAR2,
14:35:10 114  	out_charge_id	     OUT NUMBER
14:35:10 115  );
14:35:10 116  
14:35:10 117  PROCEDURE GET_MAX_REFUND (
14:35:10 118  	in_invoice_id IN NUMBER,
14:35:10 119  	out_amount    OUT NUMBER
14:35:10 120  );
14:35:10 121  
14:35:10 122  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
14:35:10 123  	in_invoice_id	    IN NUMBER,
14:35:10 124  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
14:35:10 125  	out_days_num	    OUT NUMBER
14:35:10 126  );
14:35:10 127  
14:35:10 128  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:35:10 129  	in_invoice_id  IN NUMBER,
14:35:10 130  	out_result_set OUT SYS_REFCURSOR
14:35:10 131  );
14:35:10 132  
14:35:10 133  PROCEDURE GET_INVOICE_LICENSES (
14:35:10 134  	in_invoice_id  IN NUMBER,
14:35:10 135  	out_result_set OUT SYS_REFCURSOR
14:35:10 136  );
14:35:10 137  
14:35:10 138  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
14:35:10 139  	in_invoice_id	   IN NUMBER,
14:35:10 140  	out_offer_chain_id OUT NUMBER
14:35:10 141  );
14:35:10 142  
14:35:10 143  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
14:35:10 144  -- Closing invoice without refund
14:35:10 145  	in_invoice_id IN NUMBER,
14:35:10 146  	in_updated_by IN VARCHAR2
14:35:10 147  );
14:35:10 148  
14:35:10 149  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
14:35:10 150  	in_invoice_id	    IN NUMBER,
14:35:10 151  	out_subscription_id OUT NUMBER
14:35:10 152  );
14:35:10 153  
14:35:10 154  PROCEDURE IS_INVOICE_TAX_EXEMPT (
14:35:10 155  /*
14:35:10 156  Throws exceptions:
14:35:10 157  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 158  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 159  Return:
14:35:10 160  	GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
14:35:10 161  	GLOBAL_CONSTANTS_V16.FALSE else
14:35:10 162  */
14:35:10 163  	in_invoice_id	  IN NUMBER,
14:35:10 164  	out_is_tax_exempt OUT NUMBER
14:35:10 165  );
14:35:10 166  
14:35:10 167  PROCEDURE GET_INVOICE_BY_ID (
14:35:10 168  	in_invoice_id  IN NUMBER,
14:35:10 169  	out_result_set OUT SYS_REFCURSOR
14:35:10 170  );
14:35:10 171  
14:35:10 172  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
14:35:10 173  	in_invoice_id		      IN NUMBER,
14:35:10 174  	out_is_tax_calculation_needed OUT NUMBER
14:35:10 175  );
14:35:10 176  
14:35:10 177  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
14:35:10 178  	in_invoice_id		     IN NUMBER,
14:35:10 179  	in_updated_by		     IN VARCHAR2,
14:35:10 180  	in_is_tax_calculation_needed IN NUMBER
14:35:10 181  );
14:35:10 182  
14:35:10 183  PROCEDURE REFUND_INVOICE (
14:35:10 184  	in_invoice_id	   IN NUMBER,
14:35:10 185  	in_refund_amount   IN NUMBER,
14:35:10 186  	in_note 	   IN VARCHAR2,
14:35:10 187  	in_created_by	   IN VARCHAR2,
14:35:10 188  	out_charge_id	   OUT NUMBER
14:35:10 189  );
14:35:10 190  
14:35:10 191  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
14:35:10 192  	in_invoice_id		    IN NUMBER,
14:35:10 193  	out_order_id		    OUT VARCHAR2,
14:35:10 194  	out_external_transaction_id OUT VARCHAR2
14:35:10 195  );
14:35:10 196  
14:35:10 197  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
14:35:10 198  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
14:35:10 199  	out_result_set OUT SYS_REFCURSOR
14:35:10 200  );
14:35:10 201  
14:35:10 202  PROCEDURE IS_REVOKE_ENTITLEMENTS(
14:35:10 203  	in_invoice_id IN NUMBER,
14:35:10 204  	out_is_revoke OUT NUMBER
14:35:10 205  );
14:35:10 206  
14:35:10 207  END PROCS_INVOICE_V16;
14:35:10 208  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> /*
14:35:10 SQL> CREATE TABLE ITUNES_RECEIPT (
14:35:10 SQL> 	id NUMBER NOT NULL ENABLE,
14:35:10 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
14:35:10 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
14:35:10 SQL> 	status NUMBER,
14:35:10 SQL> 	quantity NUMBER,
14:35:10 SQL> 	product_id VARCHAR(1024),
14:35:10 SQL> 	transaction_id VARCHAR(1024),
14:35:10 SQL> 	purchase_date TIMESTAMP,
14:35:10 SQL> 	original_transaction_id VARCHAR(1024),
14:35:10 SQL> 	original_purchase_date TIMESTAMP,
14:35:10 SQL> 	app_item_id VARCHAR(1024),
14:35:10 SQL> 	version_external_id NUMBER,
14:35:10 SQL> 	bid VARCHAR(1024),
14:35:10 SQL> 	bvrs VARCHAR(255),
14:35:10 SQL> 	expires_date TIMESTAMP,
14:35:10 SQL> 	create_date DATE NOT NULL,
14:35:10 SQL> 	created_by VARCHAR(255) NOT NULL,
14:35:10 SQL> 	update_date DATE NOT NULL,
14:35:10 SQL> 	updated_by VARCHAR(255) NOT NULL,
14:35:10 SQL> 	last_check_date DATE NOT NULL,
14:35:10 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:35:10 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:35:10 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:35:10 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
14:35:10 SQL> )
14:35:10 SQL> TABLESPACE CORE;
14:35:10 SQL> */
14:35:10 SQL> 
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_RECEIPT(
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  */
14:35:10   8  	  out_id	      OUT NUMBER,
14:35:10   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:35:10  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
14:35:10  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
14:35:10  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
14:35:10  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:10  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:35:10  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:35:10  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:10  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:35:10  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:35:10  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:35:10  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
14:35:10  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
14:35:10  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:35:10  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
14:35:10  24  );
14:35:10  25  
14:35:10  26  PROCEDURE UPDATE_RECEIPT(
14:35:10  27  /*
14:35:10  28  Throws exceptions:
14:35:10  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  30  */
14:35:10  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
14:35:10  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
14:35:10  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
14:35:10  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
14:35:10  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:10  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:35:10  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:35:10  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:10  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:35:10  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:35:10  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:35:10  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
14:35:10  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
14:35:10  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:35:10  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
14:35:10  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
14:35:10  47  );
14:35:10  48  
14:35:10  49  PROCEDURE LINK_ITUNES_RECEIPT(
14:35:10  50  /*
14:35:10  51  Throws exceptions:
14:35:10  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  53  */
14:35:10  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
14:35:10  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:35:10  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
14:35:10  57  );
14:35:10  58  
14:35:10  59  PROCEDURE MARK_RECEIPT_CHECKED(
14:35:10  60  /*
14:35:10  61  Throws exceptions:
14:35:10  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  63  */
14:35:10  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
14:35:10  65  );
14:35:10  66  
14:35:10  67  END PROCS_ITUNES_RECEIPT_CRU_V16;
14:35:10  68  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> /*
14:35:10 SQL> CREATE TABLE ITUNES_RECEIPT (
14:35:10 SQL> 	id NUMBER NOT NULL ENABLE,
14:35:10 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
14:35:10 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
14:35:10 SQL> 	status NUMBER,
14:35:10 SQL> 	quantity NUMBER,
14:35:10 SQL> 	product_id VARCHAR(1024),
14:35:10 SQL> 	transaction_id VARCHAR(1024),
14:35:10 SQL> 	purchase_date TIMESTAMP,
14:35:10 SQL> 	original_transaction_id VARCHAR(1024),
14:35:10 SQL> 	original_purchase_date TIMESTAMP,
14:35:10 SQL> 	app_item_id VARCHAR(1024),
14:35:10 SQL> 	version_external_id NUMBER,
14:35:10 SQL> 	bid VARCHAR(1024),
14:35:10 SQL> 	bvrs VARCHAR(255),
14:35:10 SQL> 	expires_date TIMESTAMP,
14:35:10 SQL> 	create_date DATE NOT NULL,
14:35:10 SQL> 	created_by VARCHAR(255) NOT NULL,
14:35:10 SQL> 	update_date DATE NOT NULL,
14:35:10 SQL> 	updated_by VARCHAR(255) NOT NULL,
14:35:10 SQL> 	last_check_date DATE NOT NULL,
14:35:10 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:35:10 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:35:10 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:35:10 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
14:35:10 SQL> )
14:35:10 SQL> TABLESPACE CORE;
14:35:10 SQL> */
14:35:10 SQL> 
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
14:35:10   4  	      /*
14:35:10   5  	      Throws exceptions:
14:35:10   6  	      APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  	      */
14:35:10   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:10   9  	      out_result_set	  OUT SYS_REFCURSOR
14:35:10  10  );
14:35:10  11  
14:35:10  12  PROCEDURE CREATE_RECEIPT(
14:35:10  13  /*
14:35:10  14  Throws exceptions:
14:35:10  15  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  16  */
14:35:10  17  	  out_id	      OUT NUMBER,
14:35:10  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:35:10  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
14:35:10  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
14:35:10  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
14:35:10  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:10  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:35:10  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:35:10  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:10  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:35:10  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:35:10  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:35:10  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
14:35:10  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
14:35:10  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:35:10  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
14:35:10  33  );
14:35:10  34  
14:35:10  35  PROCEDURE UPDATE_RECEIPT(
14:35:10  36  /*
14:35:10  37  Throws exceptions:
14:35:10  38  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  39  */
14:35:10  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
14:35:10  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
14:35:10  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
14:35:10  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
14:35:10  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:10  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:35:10  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:35:10  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:10  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:35:10  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:35:10  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:35:10  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
14:35:10  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
14:35:10  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:35:10  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
14:35:10  55  	  in_is_expired       IN NUMBER
14:35:10  56  );
14:35:10  57  
14:35:10  58  PROCEDURE LINK_ITUNES_RECEIPT(
14:35:10  59  /*
14:35:10  60  Throws exceptions:
14:35:10  61  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  62  */
14:35:10  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
14:35:10  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:35:10  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
14:35:10  66  );
14:35:10  67  
14:35:10  68  PROCEDURE MARK_RECEIPT_CHECKED(
14:35:10  69  /*
14:35:10  70  Throws exceptions:
14:35:10  71  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  72  */
14:35:10  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
14:35:10  74  );
14:35:10  75  
14:35:10  76  PROCEDURE GET_ITUNES_RECEIPTS (
14:35:10  77  /*
14:35:10  78  Throws exceptions:
14:35:10  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  80  */
14:35:10  81  	out_result_set	    OUT SYS_REFCURSOR,
14:35:10  82  	in_row_number	    IN NUMBER DEFAULT 500
14:35:10  83  );
14:35:10  84  
14:35:10  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
14:35:10  86  /*
14:35:10  87  Throws exceptions:
14:35:10  88  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  89  */
14:35:10  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
14:35:10  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
14:35:10  92  );
14:35:10  93  
14:35:10  94  END PROCS_ITUNES_RECEIPT_V16;
14:35:10  95  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_LICENSE_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_LICENSE(
14:35:10   4  	out_license_id		    OUT LICENSE.ID%TYPE,
14:35:10   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
14:35:10   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
14:35:10   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
14:35:10   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
14:35:10  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
14:35:10  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
14:35:10  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
14:35:10  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
14:35:10  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
14:35:10  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
14:35:10  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
14:35:10  17  );
14:35:10  18  
14:35:10  19  PROCEDURE UPDATE_LICENSE (
14:35:10  20  	in_license_id		    IN LICENSE.ID%TYPE,
14:35:10  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
14:35:10  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
14:35:10  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
14:35:10  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
14:35:10  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
14:35:10  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
14:35:10  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
14:35:10  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
14:35:10  30  );
14:35:10  31  
14:35:10  32  END PROCS_LICENSE_CRU_V16;
14:35:10  33  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_LICENSE
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_LICENSE(
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   8  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10   9  */
14:35:10  10  	in_status_id		    IN NUMBER,
14:35:10  11  	in_needs_entitlements	    IN NUMBER,
14:35:10  12  	in_start_date		    IN DATE,
14:35:10  13  	in_end_date		    IN DATE,
14:35:10  14  	in_offer_id		    IN NUMBER,
14:35:10  15  	in_subscription_id	    IN NUMBER,
14:35:10  16  	in_invoice_id		    IN NUMBER,
14:35:10  17  	in_created_by		    IN VARCHAR2,
14:35:10  18  	in_is_extension 	    IN NUMBER,
14:35:10  19  	in_current_offer_index	    IN NUMBER,
14:35:10  20  	in_current_offer_recurr_num IN NUMBER,
14:35:10  21  	out_license_id		    OUT NUMBER
14:35:10  22  );
14:35:10  23  
14:35:10  24  /*********************************************/
14:35:10  25  
14:35:10  26  PROCEDURE UPDATE_LICENSE_STATUS(
14:35:10  27  /*
14:35:10  28  Throws exceptions:
14:35:10  29  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  31  */
14:35:10  32  	  in_license_id     IN NUMBER,
14:35:10  33  	  in_license_status IN NUMBER,
14:35:10  34  	  in_updated_by     IN VARCHAR2,
14:35:10  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:10  36  );
14:35:10  37  
14:35:10  38  /*********************************************/
14:35:10  39  
14:35:10  40  PROCEDURE GET_ENDING_LICENSES (
14:35:10  41  	in_hours_number IN NUMBER,
14:35:10  42  	out_result_set OUT SYS_REFCURSOR
14:35:10  43  );
14:35:10  44  
14:35:10  45  /*********************************************/
14:35:10  46  
14:35:10  47  PROCEDURE GET_ENDING_LICENSES_CC (
14:35:10  48  	in_hours_number IN NUMBER,
14:35:10  49  	out_result_set OUT SYS_REFCURSOR,
14:35:10  50  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:10  51  );
14:35:10  52  
14:35:10  53  /**********************************************/
14:35:10  54  
14:35:10  55  PROCEDURE GET_RECURRING_OFFER (
14:35:10  56  	in_license_id  IN NUMBER,
14:35:10  57  	out_result_set OUT SYS_REFCURSOR
14:35:10  58  );
14:35:10  59  
14:35:10  60  /**********************************************/
14:35:10  61  
14:35:10  62  PROCEDURE GET_NEXT_OFFER (
14:35:10  63  	in_license_id  IN NUMBER,
14:35:10  64  	out_result_set OUT SYS_REFCURSOR
14:35:10  65  );
14:35:10  66  
14:35:10  67  /**********************************************/
14:35:10  68  
14:35:10  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
14:35:10  70  	in_license_id IN NUMBER,
14:35:10  71  	out_group_id  OUT NUMBER
14:35:10  72  );
14:35:10  73  
14:35:10  74  /**************************************************/
14:35:10  75  
14:35:10  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
14:35:10  77  	out_result_set OUT SYS_REFCURSOR
14:35:10  78  );
14:35:10  79  
14:35:10  80  /**************************************************/
14:35:10  81  
14:35:10  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
14:35:10  83  	in_license_id	      IN NUMBER,
14:35:10  84  	in_needs_entitlements IN NUMBER,
14:35:10  85  	in_updated_by	      IN VARCHAR2
14:35:10  86  );
14:35:10  87  
14:35:10  88  PROCEDURE GET_ENDED_GC_LICENSES (
14:35:10  89  	out_result_set		OUT SYS_REFCURSOR,
14:35:10  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:35:10  91  	in_num_rows		IN NUMBER DEFAULT 10000,
14:35:10  92  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:10  93  );
14:35:10  94  
14:35:10  95  PROCEDURE GET_LICENSE_BY_ID (
14:35:10  96  
14:35:10  97  	in_license_id  IN NUMBER,
14:35:10  98  
14:35:10  99  	out_result_set OUT SYS_REFCURSOR
14:35:10 100  
14:35:10 101  );
14:35:10 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
14:35:10 103  	in_subscription_id IN NUMBER,
14:35:10 104  	in_end_date IN DATE,
14:35:10 105  	in_updated_by IN VARCHAR2
14:35:10 106  );
14:35:10 107  END PROCS_LICENSE_V16;
14:35:10 108  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_LINE_ITEM (
14:35:10   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
14:35:10   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
14:35:10   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
14:35:10   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
14:35:10   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
14:35:10   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
14:35:10  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE UPDATE_LINE_ITEM (
14:35:10  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
14:35:10  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
14:35:10  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
14:35:10  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
14:35:10  18  );
14:35:10  19  
14:35:10  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
14:35:10  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
14:35:10  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
14:35:10  23  );
14:35:10  24  
14:35:10  25  END PROCS_LINE_ITEMS_CRU_V16;
14:35:10  26  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.03
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_LINE_ITEMS
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE ADD_LINE_ITEMS(
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   8  */
14:35:10   9  	in_invoice_id IN NUMBER,
14:35:10  10  	in_offer_id   IN NUMBER,
14:35:10  11  	in_created_by IN VARCHAR2
14:35:10  12  );
14:35:10  13  
14:35:10  14  /****************************************************/
14:35:10  15  
14:35:10  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
14:35:10  17  	in_line_item_id    IN NUMBER,
14:35:10  18  	in_amount	   IN NUMBER,
14:35:10  19  	in_discount_amount IN NUMBER,
14:35:10  20  	in_taxes_amount    IN NUMBER
14:35:10  21  );
14:35:10  22  
14:35:10  23  /****************************************************/
14:35:10  24  
14:35:10  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:35:10  26  /*
14:35:10  27  Throws exceptions:
14:35:10  28  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  29  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  30  */
14:35:10  31  	in_invoice_id  IN NUMBER,
14:35:10  32  	out_result_set OUT SYS_REFCURSOR
14:35:10  33  );
14:35:10  34  
14:35:10  35  /****************************************************/
14:35:10  36  
14:35:10  37  PROCEDURE GET_LINE_ITEM_TAXES (
14:35:10  38  /*
14:35:10  39  Throws exceptions:
14:35:10  40  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  41  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  42  */
14:35:10  43  	in_line_item_id IN  NUMBER,
14:35:10  44  	out_result_set	OUT SYS_REFCURSOR
14:35:10  45  );
14:35:10  46  /****************************************************/
14:35:10  47  
14:35:10  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
14:35:10  49  /*
14:35:10  50  Throws exceptions:
14:35:10  51  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  53  */
14:35:10  54  	in_line_item_id IN  NUMBER,
14:35:10  55  	out_result_set	OUT SYS_REFCURSOR
14:35:10  56  );
14:35:10  57  
14:35:10  58  /****************************************************/
14:35:10  59  
14:35:10  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
14:35:10  61  /*
14:35:10  62  Throws exceptions:
14:35:10  63  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  64  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  65  */
14:35:10  66  	in_line_item_id     IN	NUMBER,
14:35:10  67  	out_amount	    OUT NUMBER
14:35:10  68  );
14:35:10  69  
14:35:10  70  /****************************************************/
14:35:10  71  
14:35:10  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
14:35:10  73  /*
14:35:10  74  Throws exceptions:
14:35:10  75  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  76  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  77  */
14:35:10  78  	in_line_item_id     IN	NUMBER
14:35:10  79  ) RETURN NUMBER;
14:35:10  80  
14:35:10  81  END PROCS_LINE_ITEMS_V16;
14:35:10  82  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_LOCKING
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V16" AS
14:35:10   2  
14:35:10   3  /*
14:35:10   4  Removed by Sergey
14:35:10   5  10.12.2010
14:35:10   6  PROCEDURE INITIALIZE_SYSTEM;
14:35:10   7  
14:35:10   8  PROCEDURE INITIALIZE_ACCOUNT (
14:35:10   9  	in_account_id IN NUMBER
14:35:10  10  );
14:35:10  11  
14:35:10  12  PROCEDURE INITIALIZE_GROUP (
14:35:10  13  	in_group_id IN NUMBER
14:35:10  14  );
14:35:10  15  */
14:35:10  16  
14:35:10  17  PROCEDURE LOCK_ACCOUNT (
14:35:10  18  	in_group_id    IN NUMBER,
14:35:10  19  	in_lock_key    IN VARCHAR2,
14:35:10  20  	in_seconds_num IN NUMBER,
14:35:10  21  	in_created_by  IN VARCHAR2,
14:35:10  22  	in_reason      IN VARCHAR2
14:35:10  23  );
14:35:10  24  
14:35:10  25  PROCEDURE RELEASE_LOCK (
14:35:10  26  	in_group_id IN NUMBER,
14:35:10  27  	in_lock_key IN VARCHAR2
14:35:10  28  );
14:35:10  29  
14:35:10  30  END PROCS_LOCKING_V16;
14:35:10  31  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.00
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_OFFER_CHAIN
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   8  */
14:35:10   9  	  in_offer_chain_id IN	 NUMBER,
14:35:10  10  	  out_result_set    OUT  SYS_REFCURSOR
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
14:35:10  14  /*
14:35:10  15  Throws exceptions:
14:35:10  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:10  17  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:10  18  */
14:35:10  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:35:10  20  	out_result_set	   OUT SYS_REFCURSOR
14:35:10  21  );
14:35:10  22  
14:35:10  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
14:35:10  24  /*
14:35:10  25  Throws exceptions:
14:35:10  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:10  27  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:10  28  */
14:35:10  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:35:10  30  	out_result_set	   OUT SYS_REFCURSOR
14:35:10  31  );
14:35:10  32  
14:35:10  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
14:35:10  34  /*
14:35:10  35  Throws exceptions:
14:35:10  36  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:10  37  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:10  38  */
14:35:10  39  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:35:10  40  	out_result_set	   OUT SYS_REFCURSOR
14:35:10  41  );
14:35:10  42  
14:35:10  43  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
14:35:10  44  /*
14:35:10  45  Throws exceptions (codes):
14:35:10  46  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  47  */
14:35:10  48  	in_product_id  IN  NUMBER,
14:35:10  49  	out_result_set OUT SYS_REFCURSOR
14:35:10  50  );
14:35:10  51  
14:35:10  52  PROCEDURE GET_OFFER_CHAIN_PRICE (
14:35:10  53  /*
14:35:10  54  Throws exceptions (codes):
14:35:10  55  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  56  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  57  */
14:35:10  58  	in_offer_chain_id IN NUMBER,
14:35:10  59  	out_price	  OUT NUMBER
14:35:10  60  );
14:35:10  61  
14:35:10  62  PROCEDURE GET_FIRST_OFFER(
14:35:10  63  /*
14:35:10  64  Throws exceptions (codes):
14:35:10  65  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  67  */
14:35:10  68  	in_offer_chain_id IN  NUMBER,
14:35:10  69  	out_offer_id	  OUT NUMBER
14:35:10  70  );
14:35:10  71  
14:35:10  72  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
14:35:10  73  /*
14:35:10  74  Throws exceptions (codes):
14:35:10  75  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  76  */
14:35:10  77  	out_result_set OUT SYS_REFCURSOR
14:35:10  78  );
14:35:10  79  
14:35:10  80  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
14:35:10  81  /*
14:35:10  82  Throws exceptions (codes):
14:35:10  83  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  85  */
14:35:10  86  	in_offer_chain_id IN NUMBER,
14:35:10  87  	out_result_set	  OUT SYS_REFCURSOR
14:35:10  88  );
14:35:10  89  
14:35:10  90  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
14:35:10  91  /*
14:35:10  92  Throws exceptions (codes):
14:35:10  93  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  95  */
14:35:10  96  	in_offer_chain_id	  IN NUMBER,
14:35:10  97  	in_offer_chain_start_date IN DATE
14:35:10  98  ) RETURN DATE;
14:35:10  99  
14:35:10 100  FUNCTION CALCULATE_OFFER_AMOUNT (
14:35:10 101  	in_offer_id IN NUMBER
14:35:10 102  ) RETURN NUMBER;
14:35:10 103  
14:35:10 104  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
14:35:10 105  	in_offer_chain_id IN NUMBER
14:35:10 106  ) RETURN NUMBER;
14:35:10 107  
14:35:10 108  FUNCTION GET_FIRST_OFFER_INDEX (
14:35:10 109  	in_offer_chain_id IN NUMBER
14:35:10 110  ) RETURN NUMBER;
14:35:10 111  
14:35:10 112  FUNCTION GET_NEXT_OFFER_INDEX (
14:35:10 113  /*
14:35:10 114  NULL, if not exists
14:35:10 115  */
14:35:10 116  	in_offer_chain_id	     IN NUMBER,
14:35:10 117  	in_offer_chain_current_index IN NUMBER
14:35:10 118  ) RETURN NUMBER;
14:35:10 119  
14:35:10 120  PROCEDURE P_GET_NEXT_OFFER_INDEX (
14:35:10 121  	in_offer_chain_id	     IN NUMBER,
14:35:10 122  	in_offer_chain_current_index IN NUMBER,
14:35:10 123  	out_next_offer_index	     OUT NUMBER
14:35:10 124  );
14:35:10 125  
14:35:10 126  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
14:35:10 127  	in_license_id		     IN NUMBER,
14:35:10 128  	in_offer_chain_current_index IN NUMBER,
14:35:10 129  	out_next_offer_index	     OUT NUMBER
14:35:10 130  );
14:35:10 131  
14:35:10 132  FUNCTION IS_OFFER_INDEX_EXISTS (
14:35:10 133  /*
14:35:10 134  1 - exists
14:35:10 135  0 - not exists
14:35:10 136  */
14:35:10 137  	in_offer_chain_id	   IN NUMBER,
14:35:10 138  	in_offer_chain_offer_index IN NUMBER
14:35:10 139  ) RETURN NUMBER;
14:35:10 140  
14:35:10 141  PROCEDURE GET_OFFER_LENGTH (
14:35:10 142  	in_offer_id IN NUMBER,
14:35:10 143  	out_years   OUT NUMBER,
14:35:10 144  	out_months  OUT NUMBER,
14:35:10 145  	out_days    OUT NUMBER
14:35:10 146  );
14:35:10 147  
14:35:10 148  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
14:35:10 149  	in_offer_id   IN NUMBER,
14:35:10 150  	in_start_date IN DATE DEFAULT SYSDATE,
14:35:10 151  	out_days      OUT NUMBER
14:35:10 152  );
14:35:10 153  
14:35:10 154  PROCEDURE GET_OFFER_PRODUCTS (
14:35:10 155  /*
14:35:10 156  Throws exceptions (codes):
14:35:10 157  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 158  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 159  */
14:35:10 160  	in_offer_id    IN NUMBER,
14:35:10 161  	out_result_set OUT SYS_REFCURSOR
14:35:10 162  );
14:35:10 163  
14:35:10 164  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
14:35:10 165  /*
14:35:10 166  Throws exceptions (codes):
14:35:10 167  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 168  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 169  */
14:35:10 170  	in_offer_chain_id IN NUMBER,
14:35:10 171  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 172  );
14:35:10 173  
14:35:10 174  FUNCTION CHECK_FOR_SAME_PRODUCTS (
14:35:10 175  /*
14:35:10 176  Throws exceptions (codes):
14:35:10 177  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 178  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 179  Returns:
14:35:10 180  GLOBAL_CONSTANTS_V16.TRUE if there are at least one same product
14:35:10 181  GLOBAL_CONSTANTS_V16.FALSE else
14:35:10 182  */
14:35:10 183  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
14:35:10 184  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
14:35:10 185  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:10 186  ) RETURN NUMBER;
14:35:10 187  
14:35:10 188  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
14:35:10 189  /*
14:35:10 190  Throws exceptions (codes):
14:35:10 191  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 192  Returns:
14:35:10 193  GLOBAL_CONSTANTS_V16.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
14:35:10 194  GLOBAL_CONSTANTS_V16.FALSE else
14:35:10 195  */
14:35:10 196  	in_offer_chain_id IN NUMBER
14:35:10 197  ) RETURN NUMBER;
14:35:10 198  
14:35:10 199  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
14:35:10 200  /*
14:35:10 201  Throws exceptions (codes):
14:35:10 202  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 203  */
14:35:10 204  	in_offer_chain_id IN NUMBER
14:35:10 205  ) RETURN NUMBER;
14:35:10 206  
14:35:10 207  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
14:35:10 208  /*
14:35:10 209  Throws exceptions (codes):
14:35:10 210  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 211  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 212  */
14:35:10 213  	in_offer_chain_id   IN NUMBER,
14:35:10 214  	in_eligibility_name IN VARCHAR2,
14:35:10 215  	out_result_set	    OUT SYS_REFCURSOR
14:35:10 216  );
14:35:10 217  
14:35:10 218  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
14:35:10 219  /*
14:35:10 220  Throws exceptions (codes):
14:35:10 221  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 222  */
14:35:10 223  	in_offer_chain_ids  IN VARCHAR2,
14:35:10 224  	in_eligibility_name IN VARCHAR2,
14:35:10 225  	out_result_set	    OUT SYS_REFCURSOR
14:35:10 226  );
14:35:10 227  
14:35:10 228  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:35:10 229  /*
14:35:10 230  Throws exceptions (codes):
14:35:10 231  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 232  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 233  */
14:35:10 234  	in_offer_chain_id IN NUMBER,
14:35:10 235  	in_meta_data_name IN VARCHAR2,
14:35:10 236  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 237  );
14:35:10 238  
14:35:10 239  PROCEDURE GET_OFFER_CHAINS_META_DATA (
14:35:10 240  /*
14:35:10 241  Throws exceptions (codes):
14:35:10 242  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 243  */
14:35:10 244  	in_offer_chain_ids IN VARCHAR2,
14:35:10 245  	in_meta_data_name  IN VARCHAR2,
14:35:10 246  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 247  );
14:35:10 248  
14:35:10 249  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
14:35:10 250  /*
14:35:10 251  Throws exceptions (codes):
14:35:10 252  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 253  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 254  */
14:35:10 255  	in_offer_id    IN NUMBER,
14:35:10 256  	out_result_set OUT SYS_REFCURSOR
14:35:10 257  );
14:35:10 258  
14:35:10 259  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
14:35:10 260  /*
14:35:10 261  Throws exceptions (codes):
14:35:10 262  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 263  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 264  */
14:35:10 265  	in_product_offering_id IN NUMBER,
14:35:10 266  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
14:35:10 267  	out_result_set	       OUT SYS_REFCURSOR
14:35:10 268  );
14:35:10 269  
14:35:10 270  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
14:35:10 271  /*
14:35:10 272  Throws exceptions (codes):
14:35:10 273  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 274  */
14:35:10 275  	in_offer_chain_1 IN NUMBER,
14:35:10 276  	in_offer_chain_2 IN NUMBER,
14:35:10 277  	out_result_set	OUT SYS_REFCURSOR
14:35:10 278  );
14:35:10 279  
14:35:10 280  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
14:35:10 281  	in_offer_chain_id IN NUMBER,
14:35:10 282  	in_meta_data_name IN VARCHAR2,
14:35:10 283  	out_value	  OUT VARCHAR2
14:35:10 284  );
14:35:10 285  
14:35:10 286  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
14:35:10 287  	in_offer_chain_id   IN NUMBER,
14:35:10 288  	in_eligibility_name IN VARCHAR2,
14:35:10 289  	out_value	    OUT VARCHAR2
14:35:10 290  );
14:35:10 291  
14:35:10 292  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
14:35:10 293  	in_offer_id    IN NUMBER,
14:35:10 294  	out_result_set OUT SYS_REFCURSOR
14:35:10 295  );
14:35:10 296  
14:35:10 297  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
14:35:10 298  	in_meta_data_name  IN VARCHAR2,
14:35:10 299  	in_meta_data_value IN VARCHAR2,
14:35:10 300  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 301  );
14:35:10 302  
14:35:10 303  PROCEDURE GET_ALL_META_DATA (
14:35:10 304  	in_offer_chain_id IN NUMBER,
14:35:10 305  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 306  );
14:35:10 307  
14:35:10 308  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
14:35:10 309  	in_group_id	  IN NUMBER,
14:35:10 310  	in_offer_chain_id IN NUMBER,
14:35:10 311  	out_is_eligible   OUT NUMBER,
14:35:10 312  	out_concurrent_subscription_id OUT NUMBER
14:35:10 313  );
14:35:10 314  
14:35:10 315  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:35:10 316  	in_offer_chain_id	 IN NUMBER,
14:35:10 317  	in_action_name		 IN VARCHAR2,
14:35:10 318  	out_notification_type_id OUT NUMBER
14:35:10 319  );
14:35:10 320  
14:35:10 321  END PROCS_OFFER_CHAIN_V16;
14:35:10 322  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
14:35:10   2  AS
14:35:10   3  
14:35:10   4  ----
14:35:10   5  --------------------------------------------------------------------------------
14:35:10   6  ----
14:35:10   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
14:35:10   8  	      returned from the previous call and store the result for the
14:35:10   9  	      next call.
14:35:10  10  	     This method will identify and create new Sync Events from trigger activity data */
14:35:10  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
14:35:10  12  ----
14:35:10  13  --------------------------------------------------------------------------------
14:35:10  14  ----
14:35:10  15  	  /* Internal logic call may need to be used to fix poller data */
14:35:10  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
14:35:10  17  ----
14:35:10  18  --------------------------------------------------------------------------------
14:35:10  19  ----
14:35:10  20  	  /* User request for sync events. Params should be hard-coded in the application
14:35:10  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
14:35:10  22  	      skipped. Last read time is logged.
14:35:10  23  	     Params:
14:35:10  24  		  set_maximum: Size of each transfer set
14:35:10  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
14:35:10  26  	     Returns:
14:35:10  27  		  set_id: Transfer set id, duplicated for all entries
14:35:10  28  		  group_id: regi_id value
14:35:10  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
14:35:10  30  	  */
14:35:10  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
14:35:10  32  ----
14:35:10  33  --------------------------------------------------------------------------------
14:35:10  34  ----
14:35:10  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
14:35:10  36  	      single confirmation per transfer set.
14:35:10  37  	  */
14:35:10  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
14:35:10  39  ----
14:35:10  40  --------------------------------------------------------------------------------
14:35:10  41  ----
14:35:10  42  	  procedure SET_LAST_RUN(ts in timestamp);
14:35:10  43  	  procedure GET_LAST_RUN(ts out timestamp);
14:35:10  44  END PROCS_POLLING_SYNC;
14:35:10  45  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_PRODUCT
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE GET_PRODUCTS (
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  */
14:35:10   8  	in_status_id   IN  NUMBER,
14:35:10   9  	out_result_set OUT SYS_REFCURSOR
14:35:10  10  );
14:35:10  11  
14:35:10  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
14:35:10  13  /*
14:35:10  14  Throws exceptions:
14:35:10  15  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  16  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  17  */
14:35:10  18  	in_product_offering_id	IN NUMBER,
14:35:10  19  	out_result_set OUT SYS_REFCURSOR
14:35:10  20  );
14:35:10  21  
14:35:10  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
14:35:10  23  /*
14:35:10  24  Throws exceptions:
14:35:10  25  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  27  */
14:35:10  28  	in_product_id	    IN NUMBER,
14:35:10  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
14:35:10  30  	out_result_set	    OUT SYS_REFCURSOR
14:35:10  31  );
14:35:10  32  
14:35:10  33  PROCEDURE GET_PRODUCT_BY_ID (
14:35:10  34  	in_product_id  IN NUMBER,
14:35:10  35  	out_result_set OUT SYS_REFCURSOR
14:35:10  36  );
14:35:10  37  
14:35:10  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
14:35:10  39  	in_line_item_id IN NUMBER,
14:35:10  40  	out_result_set	OUT SYS_REFCURSOR
14:35:10  41  );
14:35:10  42  
14:35:10  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
14:35:10  44  	in_product_offering_id IN NUMBER,
14:35:10  45  	out_result_set	OUT SYS_REFCURSOR
14:35:10  46  );
14:35:10  47  
14:35:10  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
14:35:10  49  	in_product_offering_id IN NUMBER,
14:35:10  50  	out_result_set	       OUT SYS_REFCURSOR
14:35:10  51  );
14:35:10  52  
14:35:10  53  END PROCS_PRODUCT_V16;
14:35:10  54  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
14:35:10   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
14:35:10   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:10   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
14:35:10   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
14:35:10   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
14:35:10  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
14:35:10  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
14:35:10  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:35:10  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
14:35:10  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
14:35:10  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
14:35:10  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:35:10  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
14:35:10  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
14:35:10  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
14:35:10  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
14:35:10  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
14:35:10  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
14:35:10  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
14:35:10  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
14:35:10  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
14:35:10  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
14:35:10  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
14:35:10  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
14:35:10  29  );
14:35:10  30  
14:35:10  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
14:35:10  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
14:35:10  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
14:35:10  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
14:35:10  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
14:35:10  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
14:35:10  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:35:10  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
14:35:10  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
14:35:10  40  );
14:35:10  41  
14:35:10  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
14:35:10  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
14:35:10  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
14:35:10  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:10  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
14:35:10  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
14:35:10  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
14:35:10  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
14:35:10  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
14:35:10  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
14:35:10  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
14:35:10  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
14:35:10  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
14:35:10  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
14:35:10  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
14:35:10  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
14:35:10  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
14:35:10  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
14:35:10  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
14:35:10  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
14:35:10  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
14:35:10  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
14:35:10  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
14:35:10  65  );
14:35:10  66  
14:35:10  67  PROCEDURE CREATE_CPT_EXCEPTION (
14:35:10  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
14:35:10  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
14:35:10  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:10  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
14:35:10  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
14:35:10  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
14:35:10  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
14:35:10  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
14:35:10  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
14:35:10  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
14:35:10  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
14:35:10  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:35:10  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:35:10  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
14:35:10  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
14:35:10  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
14:35:10  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
14:35:10  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
14:35:10  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
14:35:10  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
14:35:10  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
14:35:10  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
14:35:10  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
14:35:10  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
14:35:10  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
14:35:10  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
14:35:10  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
14:35:10  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
14:35:10  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
14:35:10  97  );
14:35:10  98  
14:35:10  99  PROCEDURE CREATE_CPT_DEPOSIT (
14:35:10 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
14:35:10 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
14:35:10 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:10 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
14:35:10 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
14:35:10 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
14:35:10 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
14:35:10 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
14:35:10 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
14:35:10 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
14:35:10 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
14:35:10 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:35:10 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:35:10 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
14:35:10 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
14:35:10 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
14:35:10 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
14:35:10 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
14:35:10 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
14:35:10 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
14:35:10 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
14:35:10 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
14:35:10 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
14:35:10 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
14:35:10 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
14:35:10 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
14:35:10 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
14:35:10 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
14:35:10 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
14:35:10 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
14:35:10 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
14:35:10 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
14:35:10 132  );
14:35:10 133  
14:35:10 134  PROCEDURE CREATE_PP_SETTLEMENT (
14:35:10 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
14:35:10 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
14:35:10 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:10 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
14:35:10 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
14:35:10 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
14:35:10 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
14:35:10 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
14:35:10 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
14:35:10 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
14:35:10 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
14:35:10 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
14:35:10 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
14:35:10 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
14:35:10 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
14:35:10 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
14:35:10 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
14:35:10 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
14:35:10 153  );
14:35:10 154  
14:35:10 155  PROCEDURE CREATE_PP_DISPUTE (
14:35:10 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
14:35:10 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
14:35:10 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:10 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
14:35:10 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
14:35:10 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
14:35:10 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
14:35:10 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
14:35:10 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
14:35:10 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
14:35:10 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
14:35:10 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
14:35:10 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
14:35:10 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
14:35:10 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
14:35:10 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
14:35:10 172  );
14:35:10 173  
14:35:10 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
14:35:10 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
14:35:10 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
14:35:10 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:10 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
14:35:10 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
14:35:10 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
14:35:10 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
14:35:10 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
14:35:10 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
14:35:10 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
14:35:10 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
14:35:10 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
14:35:10 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
14:35:10 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
14:35:10 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
14:35:10 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
14:35:10 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
14:35:10 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
14:35:10 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
14:35:10 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
14:35:10 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
14:35:10 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
14:35:10 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
14:35:10 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
14:35:10 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
14:35:10 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
14:35:10 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
14:35:10 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
14:35:10 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
14:35:10 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
14:35:10 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
14:35:10 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
14:35:10 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
14:35:10 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
14:35:10 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
14:35:10 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
14:35:10 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
14:35:10 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
14:35:10 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
14:35:10 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
14:35:10 215  );
14:35:10 216  
14:35:10 217  PROCEDURE GET_EXT_SOURCE_LOG (
14:35:10 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:35:10 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
14:35:10 220  	out_result_set		 OUT SYS_REFCURSOR
14:35:10 221  );
14:35:10 222  
14:35:10 223  END PROCS_RECONCILIATION_CRU_V16;
14:35:10 224  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.03
14:35:10 SQL> 
14:35:10 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
14:35:10 SQL> 
14:35:10 SQL> whenever sqlerror exit failure
14:35:10 SQL> 
14:35:10 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
14:35:10   2  
14:35:10   3  ----
14:35:10   4  --------------------------------------------------------------------------------
14:35:10   5  ----
14:35:10   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
14:35:10   7  	      return line_item.amount%type;
14:35:10   8  ----
14:35:10   9  --------------------------------------------------------------------------------
14:35:10  10  ----
14:35:10  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
14:35:10  12  	      return line_item.amount%type;
14:35:10  13  ----
14:35:10  14  --------------------------------------------------------------------------------
14:35:10  15  ----
14:35:10  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
14:35:10  17  	      in_lower_date_bound DATE,
14:35:10  18  	      in_upper_date_bound DATE,
14:35:10  19  	      out_lic_cur OUT sys_refcursor
14:35:10  20  	  );
14:35:10  21  ----
14:35:10  22  --------------------------------------------------------------------------------
14:35:10  23  ----
14:35:10  24  END PROCS_REPORTING_1A;
14:35:10  25  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.04
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
14:35:10   2  
14:35:10   3  ----
14:35:10   4  --------------------------------------------------------------------------------
14:35:10   5  ----
14:35:10   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10   7  ----
14:35:10   8  --------------------------------------------------------------------------------
14:35:10   9  ----
14:35:10  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  11  ----
14:35:10  12  --------------------------------------------------------------------------------
14:35:10  13  ----
14:35:10  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  15  ----
14:35:10  16  --------------------------------------------------------------------------------
14:35:10  17  ----
14:35:10  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  19  ----
14:35:10  20  --------------------------------------------------------------------------------
14:35:10  21  ----
14:35:10  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  23  ----
14:35:10  24  --------------------------------------------------------------------------------
14:35:10  25  ----
14:35:10  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  27  ----
14:35:10  28  --------------------------------------------------------------------------------
14:35:10  29  ----
14:35:10  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  31  ----
14:35:10  32  --------------------------------------------------------------------------------
14:35:10  33  ----
14:35:10  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  35  ----
14:35:10  36  --------------------------------------------------------------------------------
14:35:10  37  ----
14:35:10  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  39  ----
14:35:10  40  --------------------------------------------------------------------------------
14:35:10  41  ----
14:35:10  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  43  ----
14:35:10  44  --------------------------------------------------------------------------------
14:35:10  45  ----
14:35:10  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  47  ----
14:35:10  48  --------------------------------------------------------------------------------
14:35:10  49  ----
14:35:10  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  51  ----
14:35:10  52  --------------------------------------------------------------------------------
14:35:10  53  ----
14:35:10  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  55  ----
14:35:10  56  --------------------------------------------------------------------------------
14:35:10  57  ----
14:35:10  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  59  ----
14:35:10  60  --------------------------------------------------------------------------------
14:35:10  61  ----
14:35:10  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  63  ----
14:35:10  64  --------------------------------------------------------------------------------
14:35:10  65  ----
14:35:10  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  67  ----
14:35:10  68  --------------------------------------------------------------------------------
14:35:10  69  ----
14:35:10  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  71  ----
14:35:10  72  --------------------------------------------------------------------------------
14:35:10  73  ----
14:35:10  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  75  ----
14:35:10  76  --------------------------------------------------------------------------------
14:35:10  77  ----
14:35:10  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  79  ----
14:35:10  80  --------------------------------------------------------------------------------
14:35:10  81  ----
14:35:10  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  83  ----
14:35:10  84  --------------------------------------------------------------------------------
14:35:10  85  ----
14:35:10  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  87  ----
14:35:10  88  --------------------------------------------------------------------------------
14:35:10  89  ----
14:35:10  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  91  ----
14:35:10  92  --------------------------------------------------------------------------------
14:35:10  93  ----
14:35:10  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  95  ----
14:35:10  96  --------------------------------------------------------------------------------
14:35:10  97  ----
14:35:10  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10  99  ----
14:35:10 100  --------------------------------------------------------------------------------
14:35:10 101  ----
14:35:10 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 103  ----
14:35:10 104  --------------------------------------------------------------------------------
14:35:10 105  ----
14:35:10 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 107  ----
14:35:10 108  --------------------------------------------------------------------------------
14:35:10 109  ----
14:35:10 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 111  ----
14:35:10 112  --------------------------------------------------------------------------------
14:35:10 113  ----
14:35:10 114  /**/
14:35:10 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 116  ----
14:35:10 117  --------------------------------------------------------------------------------
14:35:10 118  ----
14:35:10 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 120  ----
14:35:10 121  --------------------------------------------------------------------------------
14:35:10 122  ----
14:35:10 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 124  ----
14:35:10 125  --------------------------------------------------------------------------------
14:35:10 126  ----
14:35:10 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 128  ----
14:35:10 129  --------------------------------------------------------------------------------
14:35:10 130  ----
14:35:10 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 132  ----
14:35:10 133  --------------------------------------------------------------------------------
14:35:10 134  ----
14:35:10 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 136  ----
14:35:10 137  --------------------------------------------------------------------------------
14:35:10 138  ----
14:35:10 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 140  ----
14:35:10 141  --------------------------------------------------------------------------------
14:35:10 142  ----
14:35:10 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 144  ----
14:35:10 145  --------------------------------------------------------------------------------
14:35:10 146  ----
14:35:10 147  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 148  ----
14:35:10 149  --------------------------------------------------------------------------------
14:35:10 150  ----
14:35:10 151  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:35:10 152  ----
14:35:10 153  --------------------------------------------------------------------------------
14:35:10 154  ----
14:35:10 155  /**/
14:35:10 156  END PROCS_REPORTING;
14:35:10 157  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.03
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_REPORTS
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V5" AS
14:35:10   2  
14:35:10   3  FUNCTION GET_PRODUCT_NAMES(
14:35:10   4  	in_offer_id IN NUMBER
14:35:10   5  ) RETURN VARCHAR2;
14:35:10   6  
14:35:10   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
14:35:10   8  	in_start_date  IN DATE,
14:35:10   9  	in_end_date    IN DATE,
14:35:10  10  	out_result_set OUT SYS_REFCURSOR
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
14:35:10  14  	in_offer_id	       IN NUMBER,
14:35:10  15  	in_start_date	       IN DATE,
14:35:10  16  	in_end_date	       IN DATE,
14:35:10  17  	out_new_purchasers_num OUT NUMBER,
14:35:10  18  	out_renewals_num       OUT NUMBER,
14:35:10  19  	out_product_names      OUT VARCHAR2,
14:35:10  20  	out_total_dollar_value OUT NUMBER,
14:35:10  21  	out_unique_purchasers  OUT NUMBER
14:35:10  22  );
14:35:10  23  
14:35:10  24  /*
14:35:10  25  FUNCTIONS FOR THE FLASH REPORT
14:35:10  26  */
14:35:10  27  
14:35:10  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
14:35:10  29  	in_offer_id	       IN NUMBER,
14:35:10  30  	in_start_date	       IN DATE,
14:35:10  31  	in_end_date	       IN DATE
14:35:10  32  ) RETURN NUMBER;
14:35:10  33  
14:35:10  34  FUNCTION FLR_RENEWALS_NUM (
14:35:10  35  	in_offer_id	       IN NUMBER,
14:35:10  36  	in_start_date	       IN DATE,
14:35:10  37  	in_end_date	       IN DATE
14:35:10  38  ) RETURN NUMBER;
14:35:10  39  
14:35:10  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
14:35:10  41  	in_offer_id	       IN NUMBER,
14:35:10  42  	in_start_date	       IN DATE,
14:35:10  43  	in_end_date	       IN DATE
14:35:10  44  ) RETURN NUMBER;
14:35:10  45  
14:35:10  46  FUNCTION FLR_UNIQUE_PURCHASERS (
14:35:10  47  	in_offer_id	       IN NUMBER,
14:35:10  48  	in_start_date	       IN DATE,
14:35:10  49  	in_end_date	       IN DATE
14:35:10  50  ) RETURN NUMBER;
14:35:10  51  
14:35:10  52  END PROCS_REPORTS_V5;
14:35:10  53  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_SUBSCRIPTION(
14:35:10   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
14:35:10   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
14:35:10   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
14:35:10   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
14:35:10   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
14:35:10  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
14:35:10  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
14:35:10  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
14:35:10  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
14:35:10  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
14:35:10  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
14:35:10  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
14:35:10  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
14:35:10  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
14:35:10  19  );
14:35:10  20  
14:35:10  21  PROCEDURE UPDATE_SUBSCRIPTION(
14:35:10  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
14:35:10  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
14:35:10  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
14:35:10  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
14:35:10  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
14:35:10  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
14:35:10  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
14:35:10  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:35:10  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
14:35:10  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
14:35:10  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
14:35:10  34  );
14:35:10  35  
14:35:10  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
14:35:10  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
14:35:10  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:35:10  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
14:35:10  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:35:10  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
14:35:10  42  );
14:35:10  43  
14:35:10  44  END PROCS_SUBSCRIPTION_CRU_V16;
14:35:10  45  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.00
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_SUBSCRIPTION
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE START_SUBSCRIPTION_CREATION (
14:35:10   4  	in_group_id	      IN NUMBER,
14:35:10   5  	in_created_by	      IN VARCHAR2,
14:35:10   6  	in_offer_chain_id     IN NUMBER,
14:35:10   7  	in_instrument_type_id IN NUMBER,
14:35:10   8  	in_instrument_id      IN NUMBER,
14:35:10   9  	in_agent_id	      IN NUMBER,
14:35:10  10  	in_note 	      IN VARCHAR2,
14:35:10  11  	out_subscription_id   OUT NUMBER,
14:35:10  12  	out_invoice_id	      OUT NUMBER,
14:35:10  13  	out_new_license_id    OUT NUMBER,
14:35:10  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
14:35:10  15  );
14:35:10  16  
14:35:10  17  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
14:35:10  18  	in_subscription_id    IN NUMBER,
14:35:10  19  	in_invoice_id	      IN NUMBER,
14:35:10  20  	in_instrument_type_id IN NUMBER,
14:35:10  21  	in_instrument_id      IN NUMBER,
14:35:10  22  	in_created_by	      IN VARCHAR2
14:35:10  23  );
14:35:10  24  
14:35:10  25  PROCEDURE SUSPEND_SUBSCRIPTION(
14:35:10  26  /*
14:35:10  27  Throws exceptions:
14:35:10  28  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  29  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  31  */
14:35:10  32  	  in_subs_id	IN NUMBER ,
14:35:10  33  	  in_updated_by IN VARCHAR2
14:35:10  34  );
14:35:10  35  
14:35:10  36  PROCEDURE REACTIVATE_SUBSCRIPTION (
14:35:10  37  	in_subscription_id IN  NUMBER,
14:35:10  38  	in_updated_by	   IN  VARCHAR2
14:35:10  39  );
14:35:10  40  
14:35:10  41  PROCEDURE GET_SUBSCRIPTION_INFO (
14:35:10  42  /*
14:35:10  43  Throws exceptions:
14:35:10  44  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  45  */
14:35:10  46  	  in_subscription_id IN  NUMBER,
14:35:10  47  	  out_result_set      OUT SYS_REFCURSOR
14:35:10  48  );
14:35:10  49  
14:35:10  50  PROCEDURE GET_SUBSCRIPTION_INVOICES (
14:35:10  51  /*
14:35:10  52  Throws exceptions:
14:35:10  53  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10  54  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  55  */
14:35:10  56  	in_subscription_id  IN	NUMBER,
14:35:10  57  	out_result_set	    OUT SYS_REFCURSOR
14:35:10  58  );
14:35:10  59  
14:35:10  60  PROCEDURE GET_SUBSCRIPTION_NOTES (
14:35:10  61  /*
14:35:10  62  Throws exceptions:
14:35:10  63  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  64  */
14:35:10  65  	in_subscription_id  IN	NUMBER,
14:35:10  66  	out_result_set	    OUT SYS_REFCURSOR
14:35:10  67  );
14:35:10  68  
14:35:10  69  PROCEDURE ANNOTATE_SUBSCRIPTION (
14:35:10  70  /*
14:35:10  71  Throws exceptions:
14:35:10  72  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10  73  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  74  */
14:35:10  75  	in_subscription_id IN  NUMBER,
14:35:10  76  	in_agent_id	   IN  NUMBER,
14:35:10  77  	in_note 	   IN  VARCHAR2,
14:35:10  78  	in_created_by	   IN  VARCHAR2
14:35:10  79  );
14:35:10  80  
14:35:10  81  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
14:35:10  82  /*
14:35:10  83  Throws exceptions:
14:35:10  84  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  85  */
14:35:10  86  	out_result_set OUT SYS_REFCURSOR
14:35:10  87  );
14:35:10  88  
14:35:10  89  FUNCTION GET_RENEWAL_DATE (
14:35:10  90  /*
14:35:10  91  Throws exceptions:
14:35:10  92  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  93  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  94  */
14:35:10  95  	in_subscription_id in NUMBER
14:35:10  96  ) RETURN DATE;
14:35:10  97  
14:35:10  98  FUNCTION GET_RECENT_CHARGE (
14:35:10  99  /*
14:35:10 100  Throws exceptions:
14:35:10 101  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 102  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 103  */
14:35:10 104  	in_subscription_id IN NUMBER
14:35:10 105  ) RETURN NUMBER;
14:35:10 106  
14:35:10 107  FUNCTION GET_BILLING_CYCLE (
14:35:10 108  /*
14:35:10 109  Throws exceptions:
14:35:10 110  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 111  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 112  */
14:35:10 113  	in_subscription_id IN NUMBER
14:35:10 114  ) RETURN VARCHAR2;
14:35:10 115  
14:35:10 116  PROCEDURE REFUND_SUBSCRIPTION (
14:35:10 117  /*
14:35:10 118  Throws exceptions:
14:35:10 119  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 120  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 121  */
14:35:10 122  	in_subscription_id IN NUMBER,
14:35:10 123  	in_invoice_id	   IN NUMBER,
14:35:10 124  	in_refund_amount   IN NUMBER,
14:35:10 125  	in_note 	   IN VARCHAR2,
14:35:10 126  	in_created_by	   IN VARCHAR2,
14:35:10 127  	out_charge_id	   OUT NUMBER
14:35:10 128  );
14:35:10 129  
14:35:10 130  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
14:35:10 131  /*
14:35:10 132  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 133  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 134  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 135  */
14:35:10 136  	in_subscription_id	IN NUMBER,
14:35:10 137  	in_effective_start_date IN DATE,
14:35:10 138  	in_effective_end_date	IN DATE,
14:35:10 139  	in_note 		IN VARCHAR2,
14:35:10 140  	in_updated_by		IN VARCHAR2
14:35:10 141  );
14:35:10 142  
14:35:10 143  FUNCTION CALC_SUBSCRIPTION_END_DATE (
14:35:10 144  /*
14:35:10 145  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 146  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 147  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 148  Returns:
14:35:10 149  NULL if it is impossible to calculate end date (for example,
14:35:10 150  	offer chain includes offer with infinity recurrences number)
14:35:10 151  DATE else
14:35:10 152  */
14:35:10 153  	in_subscription_id IN NUMBER
14:35:10 154  ) RETURN DATE;
14:35:10 155  
14:35:10 156  PROCEDURE HAS_FUTURE_LICENSE (
14:35:10 157  /*
14:35:10 158  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 159  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 160  */
14:35:10 161  	in_license_id IN  NUMBER,
14:35:10 162  	out_result    OUT NUMBER
14:35:10 163  );
14:35:10 164  
14:35:10 165  PROCEDURE CLOSE_SUBSCRIPTION (
14:35:10 166  	in_subscription_id IN NUMBER,
14:35:10 167  	in_updated_by	   IN VARCHAR2
14:35:10 168  );
14:35:10 169  
14:35:10 170  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
14:35:10 171  	in_subscription_id IN NUMBER,
14:35:10 172  	out_group_id	   OUT NUMBER
14:35:10 173  );
14:35:10 174  
14:35:10 175  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
14:35:10 176  /*
14:35:10 177  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 178  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 179  */
14:35:10 180  	in_subscription_id IN NUMBER,
14:35:10 181  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 182  );
14:35:10 183  
14:35:10 184  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
14:35:10 185  /*
14:35:10 186  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 188  */
14:35:10 189  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
14:35:10 190  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
14:35:10 191  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
14:35:10 192  );
14:35:10 193  
14:35:10 194  PROCEDURE GET_ACTIVE_INVOICES_IDS (
14:35:10 195  /*
14:35:10 196  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 198  */
14:35:10 199  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
14:35:10 200  	in_subscription_id IN NUMBER,
14:35:10 201  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 202  );
14:35:10 203  
14:35:10 204  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
14:35:10 205  /*
14:35:10 206  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 207  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 208  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 209  */
14:35:10 210  	in_invoice_id	     IN NUMBER,
14:35:10 211  	in_updated_by	     IN VARCHAR2,
14:35:10 212  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:10 213  );
14:35:10 214  
14:35:10 215  PROCEDURE FINALIZE_CANCELATION (
14:35:10 216  /*
14:35:10 217  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 218  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 219  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 220  */
14:35:10 221  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
14:35:10 222  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
14:35:10 223  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
14:35:10 224  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:35:10 225  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:35:10 226  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
14:35:10 227  	in_subscription_id    IN NUMBER,
14:35:10 228  	in_cancelation_reason IN VARCHAR2,
14:35:10 229  	in_cancelation_date   IN DATE,
14:35:10 230  	in_note 	      IN VARCHAR2,
14:35:10 231  	in_agent_id	      IN NUMBER,
14:35:10 232  	in_updated_by	      IN VARCHAR2
14:35:10 233  );
14:35:10 234  
14:35:10 235  PROCEDURE FINALIZE_FALSE_START (
14:35:10 236  /*
14:35:10 237  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 239  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 240  */
14:35:10 241  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
14:35:10 242  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
14:35:10 243  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:35:10 244  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:35:10 245  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
14:35:10 246  	in_subscription_id    IN NUMBER,
14:35:10 247  	in_cancelation_date   IN DATE,
14:35:10 248  	in_note 	      IN VARCHAR2,
14:35:10 249  	in_agent_id	      IN NUMBER,
14:35:10 250  	in_updated_by	      IN VARCHAR2
14:35:10 251  );
14:35:10 252  
14:35:10 253  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
14:35:10 254  	in_subscription_id IN NUMBER
14:35:10 255  ) RETURN NUMBER;
14:35:10 256  
14:35:10 257  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
14:35:10 258  /*
14:35:10 259  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 260  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 261  */
14:35:10 262  	in_subscription_id IN NUMBER,
14:35:10 263  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 264  );
14:35:10 265  
14:35:10 266  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
14:35:10 267  /*
14:35:10 268  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 269  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 270  */
14:35:10 271  	in_subscription_id IN NUMBER,
14:35:10 272  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 273  );
14:35:10 274  
14:35:10 275  PROCEDURE GET_SUBSCR_LIC_OFFER (
14:35:10 276  /*
14:35:10 277  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 278  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 279  */
14:35:10 280  	in_subscription_id IN NUMBER,
14:35:10 281  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 282  );
14:35:10 283  
14:35:10 284  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
14:35:10 285  /*
14:35:10 286  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 287  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 288  */
14:35:10 289  	in_subscription_id IN NUMBER,
14:35:10 290  	out_result	   OUT NUMBER
14:35:10 291  );
14:35:10 292  
14:35:10 293  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
14:35:10 294  /*
14:35:10 295  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 296  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 297  */
14:35:10 298  	in_group_id	   IN NUMBER,
14:35:10 299  	in_offer_chain_id  IN NUMBER,
14:35:10 300  	out_result	   out number
14:35:10 301  );
14:35:10 302  
14:35:10 303  PROCEDURE GET_EXISTING_SUBSCR_IDS (
14:35:10 304  /*
14:35:10 305  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 306  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 307  */
14:35:10 308  	in_group_id	   IN NUMBER,
14:35:10 309  	in_offer_chain_id  IN NUMBER,
14:35:10 310  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 311  );
14:35:10 312  
14:35:10 313  PROCEDURE ADD_META_DATA (
14:35:10 314  /*
14:35:10 315  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 316  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 317  */
14:35:10 318  	in_subscription_id IN NUMBER,
14:35:10 319  	in_name 	   IN VARCHAR2,
14:35:10 320  	in_value	   IN VARCHAR2,
14:35:10 321  	in_created_by	   IN VARCHAR2
14:35:10 322  );
14:35:10 323  
14:35:10 324  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
14:35:10 325  /*
14:35:10 326  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:10 327  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 328  */
14:35:10 329  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
14:35:10 330  	out_result_set	     OUT SYS_REFCURSOR
14:35:10 331  );
14:35:10 332  
14:35:10 333  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
14:35:10 334  /*
14:35:10 335  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 336  */
14:35:10 337  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
14:35:10 338  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 339  );
14:35:10 340  
14:35:10 341  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
14:35:10 342   (
14:35:10 343  /*
14:35:10 344  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 345  */
14:35:10 346  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:35:10 347  	out_result_set	    OUT SYS_REFCURSOR
14:35:10 348  );
14:35:10 349  
14:35:10 350  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
14:35:10 351  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
14:35:10 352  ) RETURN NUMBER;
14:35:10 353  
14:35:10 354  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
14:35:10 355  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
14:35:10 356  ) RETURN VARCHAR2;
14:35:10 357  
14:35:10 358  
14:35:10 359  
14:35:10 360  PROCEDURE GET_ACTIVE_MEU_SUBS (
14:35:10 361  	out_result_set	    OUT SYS_REFCURSOR
14:35:10 362  );
14:35:10 363  
14:35:10 364  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
14:35:10 365  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:35:10 366  	out_offer_id	    OUT NUMBER
14:35:10 367  );
14:35:10 368  
14:35:10 369  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
14:35:10 370  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:35:10 371  	out_license_id	    OUT NUMBER
14:35:10 372  );
14:35:10 373  
14:35:10 374  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
14:35:10 375  	out_result_set	    OUT SYS_REFCURSOR
14:35:10 376  );
14:35:10 377  
14:35:10 378  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
14:35:10 379  	out_result_set	    OUT SYS_REFCURSOR
14:35:10 380  );
14:35:10 381  
14:35:10 382  END PROCS_SUBSCRIPTION_V16;
14:35:10 383  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_SYSTEM
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE INCREMENT_VERSION;
14:35:10   4  
14:35:10   5  PROCEDURE CHECK_VERSION(
14:35:10   6  	  in_vers    IN NUMBER,
14:35:10   7  	  out_result OUT NUMBER
14:35:10   8  );
14:35:10   9  
14:35:10  10  END PROCS_SYSTEM_V16;
14:35:10  11  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_TAXES_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_TAX (
14:35:10   4  	inout_tax_id		 IN OUT NUMBER,
14:35:10   5  	in_tax_type_id		 IN NUMBER,
14:35:10   6  	in_calculated_amount	 IN NUMBER,
14:35:10   7  	in_created_by		 IN VARCHAR2,
14:35:10   8  	in_line_item_id 	 IN NUMBER,
14:35:10   9  	in_effective_rate	 IN VARCHAR2,
14:35:10  10  	in_taxable_amount	 IN NUMBER,
14:35:10  11  	in_tax_rule_id		 IN NUMBER,
14:35:10  12  	in_jurisdiction_level_id IN NUMBER,
14:35:10  13  	in_jurisdiction_name	 IN VARCHAR2,
14:35:10  14  	in_jurisdiction_id	 IN VARCHAR2,
14:35:10  15  	in_ext_tax_type 	 IN VARCHAR2,
14:35:10  16  	in_ext_result		 IN VARCHAR2,
14:35:10  17  	in_imposition_type	 IN VARCHAR2,
14:35:10  18  	in_imposition		 IN VARCHAR2
14:35:10  19  );
14:35:10  20  
14:35:10  21  END PROCS_TAXES_CRU_V16;
14:35:10  22  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.00
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_TAXES
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE ADD_TAX (
14:35:10   4  	in_tax_type_id		 IN NUMBER,
14:35:10   5  	in_calculated_amount	 IN NUMBER,
14:35:10   6  	in_created_by		 IN VARCHAR2,
14:35:10   7  	in_line_item_id 	 IN NUMBER,
14:35:10   8  	in_effective_rate	 IN VARCHAR2,
14:35:10   9  	in_taxable_amount	 IN NUMBER,
14:35:10  10  	in_tax_rule_id		 IN NUMBER,
14:35:10  11  	in_jurisdiction_level_id IN NUMBER,
14:35:10  12  	in_jurisdiction_name	 IN VARCHAR2,
14:35:10  13  	in_jurisdiction_id	 IN VARCHAR2,
14:35:10  14  	in_ext_tax_type 	 IN VARCHAR2,
14:35:10  15  	in_ext_result		 IN VARCHAR2,
14:35:10  16  	in_imposition_type	 IN VARCHAR2,
14:35:10  17  	in_imposition		 IN VARCHAR2
14:35:10  18  );
14:35:10  19  
14:35:10  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
14:35:10  21  	in_country_code IN CHAR,
14:35:10  22  	in_check_date IN DATE,
14:35:10  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V16.FALSE
14:35:10  24  );
14:35:10  25  
14:35:10  26  PROCEDURE GET_TAX_CATEGORY (
14:35:10  27  	in_tax_category_id IN NUMBER,
14:35:10  28  	out_result_set	   OUT SYS_REFCURSOR
14:35:10  29  );
14:35:10  30  
14:35:10  31  END PROCS_TAXES_V16;
14:35:10  32  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_TEST
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE TEST_CLEAR_ALL;
14:35:10   4  PROCEDURE TEST_CLEAR_PRODUCTS;
14:35:10   5  
14:35:10   6  /********************************************/
14:35:10   7  
14:35:10   8  PROCEDURE TEST_GET_ACCOUNT (
14:35:10   9  	in_group_id	IN NUMBER,
14:35:10  10  	out_result_set	OUT SYS_REFCURSOR
14:35:10  11  );
14:35:10  12  
14:35:10  13  /********************************************/
14:35:10  14  
14:35:10  15  PROCEDURE TEST_GET_SUBSCRIPTION (
14:35:10  16  	in_subscription_id IN NUMBER,
14:35:10  17  	out_result_set	   OUT SYS_REFCURSOR
14:35:10  18  );
14:35:10  19  
14:35:10  20  /*********************************************/
14:35:10  21  
14:35:10  22  PROCEDURE TEST_DELETE_INVOICE (
14:35:10  23  	in_invoice_id IN NUMBER
14:35:10  24  );
14:35:10  25  
14:35:10  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
14:35:10  27  	in_group_id IN NUMBER
14:35:10  28  );
14:35:10  29  
14:35:10  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
14:35:10  31  	in_start_group_id IN NUMBER,
14:35:10  32  	in_end_group_id   IN NUMBER
14:35:10  33  );
14:35:10  34  
14:35:10  35  /**********************************************/
14:35:10  36  
14:35:10  37  FUNCTION TEST_IS_INVOICE_EXISTS(
14:35:10  38  /*
14:35:10  39  1 - exists
14:35:10  40  0 - not exists
14:35:10  41  */
14:35:10  42  	in_invoice_id IN NUMBER
14:35:10  43  ) RETURN NUMBER;
14:35:10  44  
14:35:10  45  PROCEDURE TEST_GET_INVOICE_INFO (
14:35:10  46  	in_invoice_id  IN NUMBER,
14:35:10  47  	out_result_set OUT SYS_REFCURSOR
14:35:10  48  );
14:35:10  49  
14:35:10  50  /******************************************************************************/
14:35:10  51  
14:35:10  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
14:35:10  53  	in_offer_chain_id in number
14:35:10  54  );
14:35:10  55  
14:35:10  56  END PROCS_TEST_V16;
14:35:10  57  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.00
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_TRANSACTION_CRU
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_TRANSACTION (
14:35:10   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
14:35:10   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
14:35:10   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
14:35:10   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
14:35:10   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
14:35:10  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE UPDATE_TRANSACTION (
14:35:10  14  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
14:35:10  15  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  16  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
14:35:10  17  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
14:35:10  18  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
14:35:10  19  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
14:35:10  20  );
14:35:10  21  
14:35:10  22  PROCEDURE READ_TRANSACTION (
14:35:10  23  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:35:10  24  	out_result_set	  OUT SYS_REFCURSOR
14:35:10  25  );
14:35:10  26  
14:35:10  27  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
14:35:10  28  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
14:35:10  29  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
14:35:10  30  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
14:35:10  31  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:35:10  32  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
14:35:10  33  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
14:35:10  34  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
14:35:10  35  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
14:35:10  36  );
14:35:10  37  
14:35:10  38  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:35:10  39  /*
14:35:10  40  Throws exceptions:
14:35:10  41  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  42  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
14:35:10  43  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  44  */
14:35:10  45  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:35:10  46  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:35:10  47  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:35:10  48  );
14:35:10  49  
14:35:10  50  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
14:35:10  51  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
14:35:10  52  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
14:35:10  53  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:35:10  54  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
14:35:10  55  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
14:35:10  56  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
14:35:10  57  );
14:35:10  58  
14:35:10  59  END PROCS_TRANSACTION_CRU_V16;
14:35:10  60  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PROCS_TRANSACTION
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_TRANSACTION (
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   8  */
14:35:10   9  	in_transaction_id  IN NUMBER,
14:35:10  10  	in_status_id	   IN NUMBER,
14:35:10  11  	in_amount	   IN NUMBER,
14:35:10  12  	in_created_by	   IN VARCHAR2,
14:35:10  13  	in_order_id	   IN VARCHAR2,
14:35:10  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE,
14:35:10  15  	out_transaction_id OUT NUMBER
14:35:10  16  );
14:35:10  17  
14:35:10  18  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
14:35:10  19  /*
14:35:10  20  Throws exceptions:
14:35:10  21  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  23  */
14:35:10  24  	in_transaction_id	   IN NUMBER,
14:35:10  25  	in_trans_attempt_status    IN NUMBER,
14:35:10  26  	in_external_status_code    IN VARCHAR2,
14:35:10  27  	in_external_status_message IN VARCHAR2,
14:35:10  28  	in_created_by		   IN VARCHAR2,
14:35:10  29  	in_ext_transaction_id	   IN VARCHAR2,
14:35:10  30  	out_transaction_attempt_id OUT NUMBER
14:35:10  31  );
14:35:10  32  
14:35:10  33  PROCEDURE UPDATE_TRANSACTION_STATUS (
14:35:10  34  /*
14:35:10  35  Throws exceptions:
14:35:10  36  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  37  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  38  */
14:35:10  39  	in_transaction_id	 IN NUMBER,
14:35:10  40  	in_updated_by		 IN VARCHAR2,
14:35:10  41  	in_transaction_status_id IN NUMBER
14:35:10  42  );
14:35:10  43  
14:35:10  44  PROCEDURE UPDATE_TRANSACTION_SETTLED (
14:35:10  45  /*
14:35:10  46  Throws exceptions:
14:35:10  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  49  */
14:35:10  50  	in_transaction_id	 IN NUMBER,
14:35:10  51  	in_updated_by		 IN VARCHAR2,
14:35:10  52  	in_is_settled		 IN NUMBER
14:35:10  53  );
14:35:10  54  
14:35:10  55  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
14:35:10  56  /*
14:35:10  57  Throws exceptions:
14:35:10  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  60  */
14:35:10  61  	in_transaction_attempt_id IN NUMBER,
14:35:10  62  	in_updated_by		  IN VARCHAR2
14:35:10  63  );
14:35:10  64  
14:35:10  65  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
14:35:10  66  /*
14:35:10  67  Throws exceptions:
14:35:10  68  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  69  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  70  */
14:35:10  71  	in_transaction_attempt_id     IN NUMBER,
14:35:10  72  	in_transaction_attempt_status IN NUMBER
14:35:10  73  );
14:35:10  74  
14:35:10  75  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
14:35:10  76  /*
14:35:10  77  Throws exceptions:
14:35:10  78  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  79  */
14:35:10  80  	in_transaction_id	      IN NUMBER,
14:35:10  81  	in_transaction_attempt_status IN NUMBER,
14:35:10  82  	out_result_set		      OUT SYS_REFCURSOR
14:35:10  83  );
14:35:10  84  
14:35:10  85  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
14:35:10  86  /*
14:35:10  87  Throws exceptions:
14:35:10  88  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  89  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  90  */
14:35:10  91  	in_transaction_attempt_id IN NUMBER,
14:35:10  92  	in_ext_status_code	  IN VARCHAR2,
14:35:10  93  	in_ext_status_message	  IN VARCHAR2,
14:35:10  94  	in_ext_transaction_id	  IN VARCHAR2
14:35:10  95  );
14:35:10  96  
14:35:10  97  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
14:35:10  98  /*
14:35:10  99  Throws exceptions:
14:35:10 100  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 102  */
14:35:10 103  	in_transaction_id IN  NUMBER,
14:35:10 104  	out_attempts_num  OUT NUMBER
14:35:10 105  );
14:35:10 106  
14:35:10 107  PROCEDURE GET_TRANSACTION_AMOUNT (
14:35:10 108  /*
14:35:10 109  Throws exceptions:
14:35:10 110  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 111  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 112  */
14:35:10 113  	in_transaction_id      IN  NUMBER,
14:35:10 114  	out_transaction_amount OUT NUMBER
14:35:10 115  );
14:35:10 116  
14:35:10 117  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
14:35:10 118  /*
14:35:10 119  Throws exceptions:
14:35:10 120  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 122  */
14:35:10 123  	in_charge_id   IN  NUMBER,
14:35:10 124  	out_result_set OUT SYS_REFCURSOR
14:35:10 125  );
14:35:10 126  
14:35:10 127  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
14:35:10 128  /*
14:35:10 129  Throws exceptions:
14:35:10 130  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 131  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 132  */
14:35:10 133  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
14:35:10 134  	out_result_set OUT SYS_REFCURSOR
14:35:10 135  );
14:35:10 136  
14:35:10 137  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
14:35:10 138  /*
14:35:10 139  Throws exceptions:
14:35:10 140  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 141  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 142  */
14:35:10 143  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
14:35:10 144  	out_result_set OUT SYS_REFCURSOR
14:35:10 145  );
14:35:10 146  
14:35:10 147  PROCEDURE GET_TRANSACTION_ATTEMPTS (
14:35:10 148  /*
14:35:10 149  Throws exceptions:
14:35:10 150  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 151  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 152  */
14:35:10 153  	in_transaction_id IN  NUMBER,
14:35:10 154  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 155  );
14:35:10 156  
14:35:10 157  PROCEDURE RESERVE_TRANSACTION_ID (
14:35:10 158  /*
14:35:10 159  Throws exceptions:
14:35:10 160  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 161  */
14:35:10 162  	out_transaction_id OUT NUMBER
14:35:10 163  );
14:35:10 164  
14:35:10 165  PROCEDURE GET_TRANSACTION_BY_ID (
14:35:10 166  /*
14:35:10 167  Throws exceptions:
14:35:10 168  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 169  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 170  */
14:35:10 171  	in_transaction_id IN NUMBER,
14:35:10 172  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 173  );
14:35:10 174  
14:35:10 175  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:35:10 176  /*
14:35:10 177  Throws exceptions:
14:35:10 178  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 179  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
14:35:10 180  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 181  */
14:35:10 182  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:35:10 183  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:35:10 184  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:35:10 185  );
14:35:10 186  
14:35:10 187  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
14:35:10 188  /*
14:35:10 189  Throws exceptions:
14:35:10 190  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 191  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 192  */
14:35:10 193  	in_invoice_id	IN  NUMBER,
14:35:10 194  	out_result_set OUT SYS_REFCURSOR
14:35:10 195  );
14:35:10 196  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
14:35:10 197  /*
14:35:10 198  Throws exceptions:
14:35:10 199  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 200  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 201  */
14:35:10 202  	in_transaction_id IN  NUMBER,
14:35:10 203  	out_is_successfull  OUT NUMBER
14:35:10 204  );
14:35:10 205  
14:35:10 206  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
14:35:10 207  	in_transaction_id IN NUMBER
14:35:10 208  ) RETURN NUMBER;
14:35:10 209  
14:35:10 210  FUNCTION GET_TRANSACTION_INTRL_TAXES (
14:35:10 211  	in_transaction_id IN NUMBER
14:35:10 212  ) RETURN NUMBER;
14:35:10 213  
14:35:10 214  -- norlov: #38796
14:35:10 215  PROCEDURE GET_TRANSACTIONS (
14:35:10 216  /*
14:35:10 217  Throws exceptions:
14:35:10 218  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 219  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 220  */
14:35:10 221  	in_group_id	      IN  NUMBER,
14:35:10 222  	in_invoice_id	      IN NUMBER DEFAULT NULL,
14:35:10 223  	in_subscription_id    IN NUMBER DEFAULT NULL,
14:35:10 224  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
14:35:10 225  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
14:35:10 226  	in_transaction_status IN NUMBER DEFAULT NULL,
14:35:10 227  	out_result_set	      OUT SYS_REFCURSOR
14:35:10 228  );
14:35:10 229  
14:35:10 230  FUNCTION IS_TRANSACTION_COLLECTED (
14:35:10 231  /*
14:35:10 232  Throws:
14:35:10 233  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 234  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 235  Returns:
14:35:10 236  GLOBAL_CONST.TRUE if transaction collected,
14:35:10 237  GLOBAL_CONST.FALSE else
14:35:10 238  */
14:35:10 239  	in_transaction_id IN NUMBER
14:35:10 240  ) RETURN NUMBER;
14:35:10 241  
14:35:10 242  PROCEDURE GET_ATTEMPT_NUMBER (
14:35:10 243  /*
14:35:10 244  Throws exceptions:
14:35:10 245  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 246  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 247  */
14:35:10 248  	in_charge_id   in  number,
14:35:10 249  	out_attempt_count out number
14:35:10 250  );
14:35:10 251  
14:35:10 252  END PROCS_TRANSACTION_V16;
14:35:10 253  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PUBLIC_PROCS_BILLING
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   8  */
14:35:10   9  	  in_offer_chain_id IN	 NUMBER,
14:35:10  10  	  out_result_set    OUT  SYS_REFCURSOR
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
14:35:10  14  /*
14:35:10  15  Throws exceptions:
14:35:10  16  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  18  */
14:35:10  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:10  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
14:35:10  21  );
14:35:10  22  
14:35:10  23  PROCEDURE GET_PENDING_INVOICES (
14:35:10  24  /*
14:35:10  25  Throws exceptions:
14:35:10  26  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  27  */
14:35:10  28  	out_result_set1      OUT SYS_REFCURSOR,
14:35:10  29  	out_result_set2      OUT SYS_REFCURSOR,
14:35:10  30  	out_result_set3      OUT SYS_REFCURSOR,
14:35:10  31  	in_row_number	     IN NUMBER DEFAULT NULL
14:35:10  32  );
14:35:10  33  
14:35:10  34  PROCEDURE GET_PENDING_REFUND_CHARGES (
14:35:10  35  /*
14:35:10  36  Throws exceptions:
14:35:10  37  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  38  */
14:35:10  39  	out_result_set	    OUT SYS_REFCURSOR,
14:35:10  40  	in_row_number	    IN NUMBER DEFAULT NULL
14:35:10  41  );
14:35:10  42  
14:35:10  43  PROCEDURE GET_UNPROCESSED_CHARGES (
14:35:10  44  /*
14:35:10  45  Throws exceptions:
14:35:10  46  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  47  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  48  */
14:35:10  49  	in_invoice_id  IN NUMBER,
14:35:10  50  	out_result_set OUT SYS_REFCURSOR
14:35:10  51  );
14:35:10  52  
14:35:10  53  PROCEDURE GET_PROCESSED_CHARGES (
14:35:10  54  /*
14:35:10  55  Throws exceptions:
14:35:10  56  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  57  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  58  */
14:35:10  59  	in_invoice_id  IN NUMBER,
14:35:10  60  	out_result_set OUT SYS_REFCURSOR
14:35:10  61  );
14:35:10  62  
14:35:10  63  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
14:35:10  64  /*
14:35:10  65  Throws exceptions:
14:35:10  66  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  67  */
14:35:10  68  	in_transaction_id	      IN NUMBER,
14:35:10  69  	in_transaction_attempt_status IN NUMBER,
14:35:10  70  	out_result_set		      OUT SYS_REFCURSOR
14:35:10  71  );
14:35:10  72  
14:35:10  73  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
14:35:10  74  /*
14:35:10  75  Throws exceptions:
14:35:10  76  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  77  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  78  */
14:35:10  79  	in_transaction_attempt_id     IN NUMBER,
14:35:10  80  	in_transaction_attempt_status IN NUMBER
14:35:10  81  );
14:35:10  82  
14:35:10  83  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
14:35:10  84  /*
14:35:10  85  Throws exceptions:
14:35:10  86  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  87  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  88  */
14:35:10  89  	in_transaction_attempt_id IN NUMBER,
14:35:10  90  	in_updated_by		  IN VARCHAR2
14:35:10  91  );
14:35:10  92  
14:35:10  93  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
14:35:10  94  /*
14:35:10  95  Throws exceptions:
14:35:10  96  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  97  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  98  */
14:35:10  99  	in_transaction_id	   IN NUMBER,
14:35:10 100  	in_trans_attempt_status    IN NUMBER,
14:35:10 101  	in_external_status_code    IN VARCHAR2,
14:35:10 102  	in_external_status_message IN VARCHAR2,
14:35:10 103  	in_created_by		   IN VARCHAR2,
14:35:10 104  	in_ext_transaction_id	   IN VARCHAR2,
14:35:10 105  	out_transaction_attempt_id OUT NUMBER
14:35:10 106  );
14:35:10 107  
14:35:10 108  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
14:35:10 109  /*
14:35:10 110  Throws exceptions:
14:35:10 111  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 112  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 113  */
14:35:10 114  	in_transaction_attempt_id IN NUMBER,
14:35:10 115  	in_ext_status_code	  IN VARCHAR2,
14:35:10 116  	in_ext_status_message	  IN VARCHAR2,
14:35:10 117  	in_ext_transaction_id	  IN VARCHAR2
14:35:10 118  );
14:35:10 119  
14:35:10 120  PROCEDURE UPDATE_TRANSACTION_STATUS (
14:35:10 121  /*
14:35:10 122  Throws exceptions:
14:35:10 123  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 124  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 125  */
14:35:10 126  	in_transaction_id	 IN NUMBER,
14:35:10 127  	in_updated_by		 IN VARCHAR2,
14:35:10 128  	in_transaction_status_id IN NUMBER
14:35:10 129  );
14:35:10 130  
14:35:10 131  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
14:35:10 132  /*
14:35:10 133  Throws exceptions:
14:35:10 134  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 135  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 136  */
14:35:10 137  	in_transaction_id IN  NUMBER,
14:35:10 138  	out_attempts_num  OUT NUMBER
14:35:10 139  );
14:35:10 140  
14:35:10 141  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
14:35:10 142  /*
14:35:10 143  Throws exceptions:
14:35:10 144  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 145  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 146  */
14:35:10 147  	in_transaction_id IN  NUMBER,
14:35:10 148  	out_is_successfull  OUT NUMBER
14:35:10 149  );
14:35:10 150  
14:35:10 151  PROCEDURE UPDATE_INVOICE_STATUS (
14:35:10 152  /*
14:35:10 153  Throws exceptions:
14:35:10 154  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 155  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 156  */
14:35:10 157  	in_invoice_id		       IN NUMBER,
14:35:10 158  	in_invoice_status_id	       IN NUMBER,
14:35:10 159  	in_updated_by		       IN VARCHAR2
14:35:10 160  );
14:35:10 161  
14:35:10 162  PROCEDURE SUSPEND_SUBSCRIPTION(
14:35:10 163  /*
14:35:10 164  Throws exceptions:
14:35:10 165  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 166  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 167  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 168  */
14:35:10 169  	  in_subs_id	IN NUMBER ,
14:35:10 170  	  in_updated_by IN VARCHAR2
14:35:10 171  );
14:35:10 172  
14:35:10 173  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:35:10 174  /*
14:35:10 175  Throws exceptions:
14:35:10 176  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 177  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 178  */
14:35:10 179  	in_credit_card_id IN  NUMBER,
14:35:10 180  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 181  );
14:35:10 182  
14:35:10 183  PROCEDURE GET_TRANSACTION_AMOUNT (
14:35:10 184  /*
14:35:10 185  Throws exceptions:
14:35:10 186  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 187  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 188  */
14:35:10 189  	in_transaction_id      IN  NUMBER,
14:35:10 190  	out_transaction_amount OUT NUMBER
14:35:10 191  );
14:35:10 192  
14:35:10 193  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
14:35:10 194  /*
14:35:10 195  Throws exceptions:
14:35:10 196  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 197  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 198  */
14:35:10 199  	in_invoice_id  IN  NUMBER,
14:35:10 200  	out_account_id OUT NUMBER
14:35:10 201  );
14:35:10 202  
14:35:10 203  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
14:35:10 204  /*
14:35:10 205  Throws exceptions:
14:35:10 206  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 207  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 208  */
14:35:10 209  	in_gift_certificate_id IN NUMBER,
14:35:10 210  	out_result_set	       OUT SYS_REFCURSOR
14:35:10 211  );
14:35:10 212  
14:35:10 213  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
14:35:10 214  /*
14:35:10 215  Throws exceptions:
14:35:10 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 218  */
14:35:10 219  	in_charge_id	    IN NUMBER,
14:35:10 220  	out_subscription_id OUT NUMBER
14:35:10 221  );
14:35:10 222  
14:35:10 223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
14:35:10 224  /*
14:35:10 225  Throws exceptions:
14:35:10 226  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 227  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 228  */
14:35:10 229  	in_gift_certificate_id IN NUMBER,
14:35:10 230  	in_charge_id	       IN NUMBER,
14:35:10 231  	out_result	       OUT NUMBER
14:35:10 232  );
14:35:10 233  
14:35:10 234  PROCEDURE GET_SUBSCRIPTION_INFO (
14:35:10 235  /*
14:35:10 236  Throws exceptions:
14:35:10 237  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 238  */
14:35:10 239  	  in_subscription_id IN  NUMBER,
14:35:10 240  	  out_result_set      OUT SYS_REFCURSOR
14:35:10 241  );
14:35:10 242  
14:35:10 243  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:35:10 244  /*
14:35:10 245  Throws exceptions:
14:35:10 246  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 247  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 248  */
14:35:10 249  	in_invoice_id IN  NUMBER,
14:35:10 250  	out_amount    OUT NUMBER
14:35:10 251  );
14:35:10 252  
14:35:10 253  PROCEDURE GET_TRANSACTION_BY_ID (
14:35:10 254  /*
14:35:10 255  Throws exceptions:
14:35:10 256  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 257  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 258  */
14:35:10 259  	in_transaction_id IN NUMBER,
14:35:10 260  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 261  );
14:35:10 262  
14:35:10 263  PROCEDURE UPDATE_CHARGE_STATUS (
14:35:10 264  /*
14:35:10 265  Throws exceptions:
14:35:10 266  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 267  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 268  */
14:35:10 269  	in_charge_id	    IN CHARGE.ID%TYPE,
14:35:10 270  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:35:10 271  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
14:35:10 272  );
14:35:10 273  
14:35:10 274  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:35:10 275  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:10 276  	out_result_set OUT SYS_REFCURSOR
14:35:10 277  );
14:35:10 278  
14:35:10 279  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:35:10 280  /*
14:35:10 281  Throws exceptions:
14:35:10 282  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 283  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
14:35:10 284  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 285  */
14:35:10 286  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:35:10 287  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:35:10 288  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:35:10 289  );
14:35:10 290  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
14:35:10 291  /*
14:35:10 292  Throws exceptions:
14:35:10 293  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 294  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 295  */
14:35:10 296  	in_invoice_id	IN  NUMBER,
14:35:10 297  	out_result_set OUT SYS_REFCURSOR
14:35:10 298  );
14:35:10 299  PROCEDURE GET_ACTIVE_INVOICES_IDS (
14:35:10 300  /*
14:35:10 301  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 302  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 303  */
14:35:10 304  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
14:35:10 305  	in_subscription_id IN NUMBER,
14:35:10 306  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 307  );
14:35:10 308  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
14:35:10 309  /*
14:35:10 310  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 312  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 313  */
14:35:10 314  --  in_invoice_id        IN INVOICE.ID%TYPE,
14:35:10 315  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
14:35:10 316  -- norlov: in_refundable	      IN refund enabled
14:35:10 317  	in_invoice_id	     IN NUMBER,
14:35:10 318  	in_updated_by	     IN VARCHAR2,
14:35:10 319  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:10 320  --  in_cancellation_date IN DATE DEFAULT current_timestamp
14:35:10 321  );
14:35:10 322  
14:35:10 323  PROCEDURE FINALIZE_CANCELATION (
14:35:10 324  /*
14:35:10 325  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 326  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 327  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 328  */
14:35:10 329  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
14:35:10 330  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
14:35:10 331  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
14:35:10 332  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:35:10 333  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:35:10 334  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
14:35:10 335  	in_subscription_id    IN NUMBER,
14:35:10 336  	in_cancelation_reason IN VARCHAR2,
14:35:10 337  	in_cancelation_date   IN DATE,
14:35:10 338  	in_note 	      IN VARCHAR2,
14:35:10 339  	in_agent_id	      IN NUMBER,
14:35:10 340  	in_updated_by	      IN VARCHAR2
14:35:10 341  );
14:35:10 342  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
14:35:10 343  /*
14:35:10 344  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 345  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 346  */
14:35:10 347  	in_subscription_id IN NUMBER,
14:35:10 348  	out_result_set	   OUT SYS_REFCURSOR
14:35:10 349  );
14:35:10 350  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:35:10 351  /*
14:35:10 352  Throws exceptions (codes):
14:35:10 353  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 354  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 355  */
14:35:10 356  	in_offer_chain_id IN NUMBER,
14:35:10 357  	in_meta_data_name IN VARCHAR2,
14:35:10 358  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 359  );
14:35:10 360  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
14:35:10 361  /*
14:35:10 362  Throws exceptions (codes):
14:35:10 363  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 364  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 365  */
14:35:10 366  	in_product_offering_id IN NUMBER,
14:35:10 367  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
14:35:10 368  	out_result_set	       OUT SYS_REFCURSOR
14:35:10 369  );
14:35:10 370  PROCEDURE READ_ACCOUNT (
14:35:10 371  	in_account_id  IN ACCOUNT.ID%TYPE,
14:35:10 372  	out_result_set OUT SYS_REFCURSOR
14:35:10 373  );
14:35:10 374  
14:35:10 375  PROCEDURE GET_COLLECTED_CHARGES (
14:35:10 376  /*
14:35:10 377  Throws exceptions:
14:35:10 378  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 379  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 380  */
14:35:10 381  	in_invoice_id  IN NUMBER,
14:35:10 382  	out_result_set OUT SYS_REFCURSOR
14:35:10 383  );
14:35:10 384  
14:35:10 385  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
14:35:10 386  /*
14:35:10 387  Throws exceptions:
14:35:10 388  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 389  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 390  */
14:35:10 391  	in_invoice_id IN NUMBER,
14:35:10 392  	out_group_ids OUT SYS_REFCURSOR
14:35:10 393  );
14:35:10 394  
14:35:10 395  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:35:10 396  /*
14:35:10 397  Throws exceptions:
14:35:10 398  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 399  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 400  */
14:35:10 401  	in_group_id IN NUMBER,
14:35:10 402  	out_account_id	OUT NUMBER
14:35:10 403  );
14:35:10 404  
14:35:10 405  PROCEDURE LOCK_ACCOUNT (
14:35:10 406  	in_group_id    IN NUMBER,
14:35:10 407  	in_lock_key    IN VARCHAR2,
14:35:10 408  	in_seconds_num IN NUMBER,
14:35:10 409  	in_created_by  IN VARCHAR2,
14:35:10 410  	in_reason      IN VARCHAR2
14:35:10 411  );
14:35:10 412  
14:35:10 413  PROCEDURE RELEASE_LOCK (
14:35:10 414  	in_group_id IN NUMBER,
14:35:10 415  	in_lock_key IN VARCHAR2
14:35:10 416  );
14:35:10 417  
14:35:10 418  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
14:35:10 419  	in_invoice_id		    IN NUMBER,
14:35:10 420  	out_order_id		    OUT VARCHAR2,
14:35:10 421  	out_external_transaction_id OUT VARCHAR2
14:35:10 422  );
14:35:10 423  
14:35:10 424  PROCEDURE GET_PAYPAL_BY_ID (
14:35:10 425  	in_paypal_id   IN  NUMBER,
14:35:10 426  	out_result_set OUT SYS_REFCURSOR
14:35:10 427  );
14:35:10 428  
14:35:10 429  PROCEDURE GET_ATTEMPT_NUMBER (
14:35:10 430  /*
14:35:10 431  Throws exceptions:
14:35:10 432  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 433  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 434  */
14:35:10 435  	in_charge_id   in  number,
14:35:10 436  	out_attempt_count out number
14:35:10 437  );
14:35:10 438  
14:35:10 439  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:35:10 440  	in_offer_chain_id	 IN NUMBER,
14:35:10 441  	in_action_name		 IN VARCHAR2,
14:35:10 442  	out_notification_type_id out number
14:35:10 443  );
14:35:10 444  
14:35:10 445  END PUBLIC_PROCS_BILLING_V16;
14:35:10 446  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE LOCK_ACCOUNT (
14:35:10   4  	in_group_id    IN NUMBER,
14:35:10   5  	in_lock_key    IN VARCHAR2,
14:35:10   6  	in_seconds_num IN NUMBER,
14:35:10   7  	in_created_by  IN VARCHAR2,
14:35:10   8  	in_reason      IN VARCHAR2
14:35:10   9  );
14:35:10  10  
14:35:10  11  PROCEDURE RELEASE_LOCK (
14:35:10  12  	in_group_id IN NUMBER,
14:35:10  13  	in_lock_key IN VARCHAR2
14:35:10  14  );
14:35:10  15  
14:35:10  16  END PUBLIC_PROCS_NOTIFICATION_V16;
14:35:10  17  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.01
14:35:10 SQL> 
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
14:35:10 SQL> --------------------------------------------------------------------------------
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
14:35:10   4  	out_result_set OUT SYS_REFCURSOR
14:35:10   5  );
14:35:10   6  
14:35:10   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
14:35:10   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
14:35:10   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
14:35:10  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:10  11  );
14:35:10  12  
14:35:10  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:35:10  14  /*
14:35:10  15  Throws exceptions:
14:35:10  16  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  17  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  18  */
14:35:10  19  	  in_offer_chain_id IN	 NUMBER,
14:35:10  20  	  out_result_set    OUT  SYS_REFCURSOR
14:35:10  21  );
14:35:10  22  
14:35:10  23  PROCEDURE GET_UNREDEEMED_GCS (
14:35:10  24  	out_result_set		OUT SYS_REFCURSOR,
14:35:10  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:35:10  26  	in_num_rows		IN NUMBER DEFAULT 10000,
14:35:10  27  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:10  28  );
14:35:10  29  
14:35:10  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
14:35:10  31  /*
14:35:10  32  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:10  33  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  34  */
14:35:10  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
14:35:10  36  	out_result_set	     OUT SYS_REFCURSOR
14:35:10  37  );
14:35:10  38  
14:35:10  39  PROCEDURE GET_ALL_OCH_META_DATA (
14:35:10  40  	in_offer_chain_id IN NUMBER,
14:35:10  41  	out_result_set	  OUT SYS_REFCURSOR
14:35:10  42  );
14:35:10  43  
14:35:10  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:35:10  45  /*
14:35:10  46  Throws exceptions (codes):
14:35:10  47  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  48  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  49  */
14:35:10  50  	in_offer_chain_id IN NUMBER,
14:35:10  51  	in_meta_data_name IN VARCHAR2,
14:35:10  52  	out_result_set	  OUT SYS_REFCURSOR
14:35:10  53  );
14:35:10  54  
14:35:10  55  PROCEDURE GET_ENDING_LICENSES (
14:35:10  56  /*
14:35:10  57  Throws exceptions:
14:35:10  58  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  59  */
14:35:10  60  	in_hours_number IN NUMBER,
14:35:10  61  	out_result_set OUT SYS_REFCURSOR
14:35:10  62  );
14:35:10  63  
14:35:10  64  PROCEDURE GET_ENDING_LICENSES_CC (
14:35:10  65  /*
14:35:10  66  Throws exceptions:
14:35:10  67  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  68  */
14:35:10  69  	in_hours_number IN NUMBER,
14:35:10  70  	out_result_set OUT SYS_REFCURSOR,
14:35:10  71  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:10  72  );
14:35:10  73  
14:35:10  74  /************************************************/
14:35:10  75  
14:35:10  76  PROCEDURE GET_RECURRING_OFFER (
14:35:10  77  /*
14:35:10  78  Throws exceptions:
14:35:10  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  80  */
14:35:10  81  	in_license_id  IN NUMBER,
14:35:10  82  	out_result_set OUT SYS_REFCURSOR
14:35:10  83  );
14:35:10  84  
14:35:10  85  /*************************************************/
14:35:10  86  
14:35:10  87  PROCEDURE GET_NEXT_OFFER (
14:35:10  88  /*
14:35:10  89  Throws exceptions:
14:35:10  90  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10  91  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10  92  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10  93  */
14:35:10  94  	in_license_id  IN NUMBER,
14:35:10  95  	out_result_set OUT SYS_REFCURSOR
14:35:10  96  );
14:35:10  97  
14:35:10  98  /**************************************************/
14:35:10  99  
14:35:10 100  PROCEDURE UPDATE_LICENSE_STATUS(
14:35:10 101  /*
14:35:10 102  Throws exceptions:
14:35:10 103  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 104  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 105  */
14:35:10 106  	  in_license_id     IN NUMBER,
14:35:10 107  	  in_license_status IN NUMBER,
14:35:10 108  	  in_updated_by     IN VARCHAR2
14:35:10 109  );
14:35:10 110  
14:35:10 111  /***************************************************/
14:35:10 112  
14:35:10 113  PROCEDURE UPDATE_INVOICE_STATUS (
14:35:10 114  /*
14:35:10 115  Throws exceptions:
14:35:10 116  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 117  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 118  */
14:35:10 119  	in_invoice_id		       IN NUMBER,
14:35:10 120  	in_invoice_status_id	       IN NUMBER,
14:35:10 121  	in_updated_by		       IN VARCHAR2
14:35:10 122  );
14:35:10 123  
14:35:10 124  /***************************************************/
14:35:10 125  
14:35:10 126  PROCEDURE CREATE_LICENSE(
14:35:10 127  /*
14:35:10 128  Throws exceptions:
14:35:10 129  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 130  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 131  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:10 132  */
14:35:10 133  	in_status_id		    IN NUMBER,
14:35:10 134  	in_needs_entitlements	    IN NUMBER,
14:35:10 135  	in_start_date		    IN DATE,
14:35:10 136  	in_end_date		    IN DATE,
14:35:10 137  	in_offer_id		    IN NUMBER,
14:35:10 138  	in_subscription_id	    IN NUMBER,
14:35:10 139  	in_invoice_id		    IN NUMBER,
14:35:10 140  	in_created_by		    IN VARCHAR2,
14:35:10 141  	in_is_extension 	    IN NUMBER,
14:35:10 142  	in_current_offer_index	    IN NUMBER,
14:35:10 143  	in_current_offer_recurr_num IN NUMBER,
14:35:10 144  	out_license_id		    OUT NUMBER
14:35:10 145  );
14:35:10 146  
14:35:10 147  /**************************************************/
14:35:10 148  
14:35:10 149  PROCEDURE CREATE_INVOICE(
14:35:10 150  /*
14:35:10 151  Throws exceptions:
14:35:10 152  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 153  */
14:35:10 154  	  in_invoice_status IN NUMBER,
14:35:10 155  	  in_created_by     IN VARCHAR2,
14:35:10 156  	  in_tax_exempt_id  IN VARCHAR2,
14:35:10 157  	  out_invoice_id    OUT NUMBER
14:35:10 158  );
14:35:10 159  
14:35:10 160  /*****************************************************/
14:35:10 161  
14:35:10 162  PROCEDURE CREATE_CHARGE(
14:35:10 163  /*
14:35:10 164  Throws exceptions:
14:35:10 165  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 166  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 167  */
14:35:10 168  	in_invoice_id	      IN NUMBER,
14:35:10 169  	in_transaction_id     IN NUMBER,
14:35:10 170  	in_instrument_type_id IN NUMBER,
14:35:10 171  	in_instrument_id      IN NUMBER,
14:35:10 172  	in_charge_amount      IN NUMBER,
14:35:10 173  	in_created_by	      IN VARCHAR2,
14:35:10 174  	in_charge_status_id   IN NUMBER,
14:35:10 175  	out_charge_id	      OUT NUMBER
14:35:10 176  );
14:35:10 177  
14:35:10 178  /*****************************************************/
14:35:10 179  
14:35:10 180  PROCEDURE HAS_FUTURE_LICENSE (
14:35:10 181  /*
14:35:10 182  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 183  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 184  --
14:35:10 185  RETURNS:
14:35:10 186  1 - if has,
14:35:10 187  0 - else
14:35:10 188  */
14:35:10 189  	in_license_id IN NUMBER,
14:35:10 190  	out_result	   OUT NUMBER
14:35:10 191  );
14:35:10 192  
14:35:10 193  /*****************************************************/
14:35:10 194  
14:35:10 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
14:35:10 196  /*
14:35:10 197  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 198  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 199  */
14:35:10 200  	in_license_id IN NUMBER,
14:35:10 201  	out_group_id  OUT NUMBER
14:35:10 202  );
14:35:10 203  
14:35:10 204  /*****************************************************/
14:35:10 205  
14:35:10 206  PROCEDURE GET_OFFER_PRODUCTS (
14:35:10 207  /*
14:35:10 208  Throws exceptions (codes):
14:35:10 209  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 210  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 211  */
14:35:10 212  	in_offer_id    IN NUMBER,
14:35:10 213  	out_result_set OUT SYS_REFCURSOR
14:35:10 214  );
14:35:10 215  
14:35:10 216  /*******************************************************/
14:35:10 217  
14:35:10 218  PROCEDURE CREATE_TRANSACTION (
14:35:10 219  /*
14:35:10 220  Throws exceptions:
14:35:10 221  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 222  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 223  */
14:35:10 224  	in_transaction_id  IN NUMBER,
14:35:10 225  	in_status_id	   IN NUMBER,
14:35:10 226  	in_amount	   IN NUMBER,
14:35:10 227  	in_created_by	   IN VARCHAR2,
14:35:10 228  	in_order_id	   IN VARCHAR2,
14:35:10 229  	out_transaction_id OUT NUMBER
14:35:10 230  );
14:35:10 231  
14:35:10 232  /*********************************************************/
14:35:10 233  
14:35:10 234  PROCEDURE ADD_LINE_ITEMS(
14:35:10 235  /*
14:35:10 236  Throws exceptions:
14:35:10 237  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 238  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 239  */
14:35:10 240  	in_invoice_id IN NUMBER,
14:35:10 241  	in_offer_id   IN NUMBER,
14:35:10 242  	in_created_by IN VARCHAR2
14:35:10 243  );
14:35:10 244  
14:35:10 245  /**********************************************************/
14:35:10 246  
14:35:10 247  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:35:10 248  /*
14:35:10 249  Throws exceptions:
14:35:10 250  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 251  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 252  */
14:35:10 253  	in_invoice_id IN  NUMBER,
14:35:10 254  	out_amount    OUT NUMBER
14:35:10 255  );
14:35:10 256  
14:35:10 257  /*********************************************************/
14:35:10 258  
14:35:10 259  PROCEDURE RESERVE_TRANSACTION_ID (
14:35:10 260  /*
14:35:10 261  Throws exceptions:
14:35:10 262  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 263  */
14:35:10 264  	out_transaction_id OUT NUMBER
14:35:10 265  );
14:35:10 266  
14:35:10 267  /**********************************************************/
14:35:10 268  
14:35:10 269  PROCEDURE P_GET_NEXT_OFFER_INDEX (
14:35:10 270  	in_offer_chain_id	     IN NUMBER,
14:35:10 271  	in_offer_chain_current_index IN NUMBER,
14:35:10 272  	out_next_offer_index	     OUT NUMBER
14:35:10 273  );
14:35:10 274  
14:35:10 275  /***********************************************************/
14:35:10 276  
14:35:10 277  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
14:35:10 278  	in_license_id		     IN NUMBER,
14:35:10 279  	in_offer_chain_current_index IN NUMBER,
14:35:10 280  	out_next_offer_index	     OUT NUMBER
14:35:10 281  );
14:35:10 282  
14:35:10 283  /**********************************************************/
14:35:10 284  
14:35:10 285  PROCEDURE GET_SUBSCRIPTION_INFO (
14:35:10 286  /*
14:35:10 287  Throws exceptions:
14:35:10 288  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 289  */
14:35:10 290  	  in_subscription_id IN  NUMBER,
14:35:10 291  	  out_result_set      OUT SYS_REFCURSOR
14:35:10 292  );
14:35:10 293  
14:35:10 294  /***********************************************************/
14:35:10 295  
14:35:10 296  PROCEDURE CLOSE_SUBSCRIPTION (
14:35:10 297  	in_subscription_id IN NUMBER,
14:35:10 298  	in_updated_by	   IN VARCHAR2
14:35:10 299  );
14:35:10 300  
14:35:10 301  /***********************************************************/
14:35:10 302  
14:35:10 303  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
14:35:10 304  	out_result_set OUT SYS_REFCURSOR
14:35:10 305  );
14:35:10 306  
14:35:10 307  /***********************************************************/
14:35:10 308  
14:35:10 309  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
14:35:10 310  	in_license_id	      IN NUMBER,
14:35:10 311  	in_needs_entitlements IN NUMBER,
14:35:10 312  	in_updated_by	      IN VARCHAR2
14:35:10 313  );
14:35:10 314  /***********************************************************/
14:35:10 315  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
14:35:10 316  	in_offer_id    IN NUMBER,
14:35:10 317  	out_result_set OUT SYS_REFCURSOR
14:35:10 318  );
14:35:10 319  /***********************************************************/
14:35:10 320  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
14:35:10 321  	in_product_offering_id IN NUMBER,
14:35:10 322  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
14:35:10 323  	out_result_set	       OUT SYS_REFCURSOR
14:35:10 324  );
14:35:10 325  
14:35:10 326  PROCEDURE LOCK_ACCOUNT (
14:35:10 327  	in_group_id    IN NUMBER,
14:35:10 328  	in_lock_key    IN VARCHAR2,
14:35:10 329  	in_seconds_num IN NUMBER,
14:35:10 330  	in_created_by  IN VARCHAR2,
14:35:10 331  	in_reason      IN VARCHAR2
14:35:10 332  );
14:35:10 333  
14:35:10 334  PROCEDURE RELEASE_LOCK (
14:35:10 335  	in_group_id IN NUMBER,
14:35:10 336  	in_lock_key IN VARCHAR2
14:35:10 337  );
14:35:10 338  
14:35:10 339  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:35:10 340  	in_invoice_id  IN NUMBER,
14:35:10 341  	out_result_set OUT SYS_REFCURSOR
14:35:10 342  );
14:35:10 343  
14:35:10 344  PROCEDURE ADD_TAX (
14:35:10 345  	in_tax_type_id		 IN NUMBER,
14:35:10 346  	in_calculated_amount	 IN NUMBER,
14:35:10 347  	in_created_by		 IN VARCHAR2,
14:35:10 348  	in_line_item_id 	 IN NUMBER,
14:35:10 349  	in_effective_rate	 IN VARCHAR2,
14:35:10 350  	in_taxable_amount	 IN NUMBER,
14:35:10 351  	in_tax_rule_id		 IN NUMBER,
14:35:10 352  	in_jurisdiction_level_id IN NUMBER,
14:35:10 353  	in_jurisdiction_name	 IN VARCHAR2,
14:35:10 354  	in_jurisdiction_id	 IN VARCHAR2,
14:35:10 355  	in_ext_tax_type 	 IN VARCHAR2,
14:35:10 356  	in_ext_result		 IN VARCHAR2,
14:35:10 357  	in_imposition_type	 IN VARCHAR2,
14:35:10 358  	in_imposition		 IN VARCHAR2
14:35:10 359  );
14:35:10 360  
14:35:10 361  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:35:10 362  	in_credit_card_id IN  NUMBER,
14:35:10 363  	out_result_set	  OUT SYS_REFCURSOR
14:35:10 364  );
14:35:10 365  
14:35:10 366  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
14:35:10 367  	in_line_item_id IN NUMBER,
14:35:10 368  	out_result_set	OUT SYS_REFCURSOR
14:35:10 369  );
14:35:10 370  
14:35:10 371  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:35:10 372  /*
14:35:10 373  Throws exceptions:
14:35:10 374  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:10 375  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 376  */
14:35:10 377  	in_group_id IN NUMBER,
14:35:10 378  	out_account_id	OUT NUMBER
14:35:10 379  );
14:35:10 380  
14:35:10 381  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
14:35:10 382  /*
14:35:10 383  Throws exceptions:
14:35:10 384  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:10 385  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10 386  */
14:35:10 387  	in_line_item_id IN  NUMBER,
14:35:10 388  	out_result_set	OUT SYS_REFCURSOR
14:35:10 389  );
14:35:10 390  
14:35:10 391  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
14:35:10 392  	in_line_item_id    IN NUMBER,
14:35:10 393  	in_amount	   IN NUMBER,
14:35:10 394  	in_discount_amount IN NUMBER,
14:35:10 395  	in_taxes_amount    IN NUMBER
14:35:10 396  );
14:35:10 397  
14:35:10 398  PROCEDURE GET_PAYPAL_BY_ID (
14:35:10 399  	in_paypal_id   IN  NUMBER,
14:35:10 400  	out_result_set OUT SYS_REFCURSOR
14:35:10 401  );
14:35:10 402  
14:35:10 403  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:35:10 404  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:10 405  	out_result_set OUT SYS_REFCURSOR
14:35:10 406  );
14:35:10 407  
14:35:10 408  PROCEDURE GET_LICENSE_BY_ID (
14:35:10 409  	in_license_id  IN NUMBER,
14:35:10 410  	out_result_set OUT SYS_REFCURSOR
14:35:10 411  );
14:35:10 412  
14:35:10 413  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:35:10 414  	in_offer_chain_id	 IN NUMBER,
14:35:10 415  	in_action_name		 IN VARCHAR2,
14:35:10 416  	out_notification_type_id OUT NUMBER
14:35:10 417  );
14:35:10 418  
14:35:10 419  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
14:35:10 420  	in_offer_chain_id IN NUMBER,
14:35:10 421  	in_meta_data_name IN VARCHAR2,
14:35:10 422  	out_value	  OUT VARCHAR2
14:35:10 423  );
14:35:10 424  
14:35:10 425  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
14:35:10 426  	out_result_set	    OUT SYS_REFCURSOR
14:35:10 427  );
14:35:10 428  
14:35:10 429  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
14:35:10 430  	out_result_set	    OUT SYS_REFCURSOR
14:35:10 431  );
14:35:10 432  
14:35:10 433  END PUBLIC_PROCS_RENEWAL_V16;
14:35:10 434  .
14:35:10 SQL> /

Package created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_ACCOUNT (
14:35:10   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
14:35:10   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
14:35:10   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
14:35:10   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
14:35:10   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
14:35:10   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
14:35:10  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:35:10  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
14:35:10  12  ) AS
14:35:10  13  -- VARIABLES
14:35:10  14  var_new_account_id ACCOUNT.ID%TYPE;
14:35:10  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:10  16  var_date DATE := SYSDATE;
14:35:10  17  BEGIN
14:35:10  18  	SELECT
14:35:10  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
14:35:10  20  	FROM DUAL;
14:35:10  21  	INSERT INTO ACCOUNT (
14:35:10  22  	  ID,
14:35:10  23  	  ACCOUNT_STATUS_ID,
14:35:10  24  	  SUSPEND_DATE,
14:35:10  25  	  GROUP_ID,
14:35:10  26  	  CREATE_DATE,
14:35:10  27  	  CREATED_BY,
14:35:10  28  	  UPDATE_DATE,
14:35:10  29  	  UPDATED_BY,
14:35:10  30  	  SYSTEM_CATEGORY_ID,
14:35:10  31  	  INSTRUMENT_TYPE_ID,
14:35:10  32  	  INSTRUMENT_ID,
14:35:10  33  	  TAX_EXEMPT_ID
14:35:10  34  	) VALUES (
14:35:10  35  	  var_new_account_id,
14:35:10  36  	  in_account_status_id,
14:35:10  37  	  in_suspend_date,
14:35:10  38  	  in_group_id,
14:35:10  39  	  var_date,
14:35:10  40  	  in_created_by,
14:35:10  41  	  var_date,
14:35:10  42  	  in_created_by,
14:35:10  43  	  in_system_category_id,
14:35:10  44  	  in_instrument_type_id,
14:35:10  45  	  in_instrument_id,
14:35:10  46  	  NULL
14:35:10  47  	);
14:35:10  48  
14:35:10  49  	out_account_id := var_new_account_id;
14:35:10  50  END CREATE_ACCOUNT;
14:35:10  51  
14:35:10  52  /*************************************************************/
14:35:10  53  
14:35:10  54  PROCEDURE UPDATE_ACCOUNT (
14:35:10  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
14:35:10  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
14:35:10  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
14:35:10  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
14:35:10  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:35:10  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
14:35:10  62  ) AS
14:35:10  63  BEGIN
14:35:10  64  
14:35:10  65  	-- CREATE HISTORY
14:35:10  66  	PROCS_HISTORY_V16.CREATE_ACCOUNT_HISTORY(
14:35:10  67  	  in_account_id 	       => in_account_id,
14:35:10  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:10  69  	);
14:35:10  70  
14:35:10  71  	UPDATE ACCOUNT SET
14:35:10  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
14:35:10  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
14:35:10  74  	  UPDATED_BY	     = in_updated_by,
14:35:10  75  	  UPDATE_DATE	     = SYSDATE,
14:35:10  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
14:35:10  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
14:35:10  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
14:35:10  79  	WHERE
14:35:10  80  	  ACCOUNT.ID = in_account_id;
14:35:10  81  
14:35:10  82  END UPDATE_ACCOUNT;
14:35:10  83  
14:35:10  84  /*************************************************************/
14:35:10  85  
14:35:10  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
14:35:10  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
14:35:10  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
14:35:10  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
14:35:10  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
14:35:10  91  ) AS
14:35:10  92  BEGIN
14:35:10  93  
14:35:10  94  	-- CREATE HISTORY
14:35:10  95  	PROCS_HISTORY_V16.CREATE_ACCOUNT_HISTORY(
14:35:10  96  	  in_account_id 	       => in_account_id,
14:35:10  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:10  98  	);
14:35:10  99  
14:35:10 100  	UPDATE ACCOUNT SET
14:35:10 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
14:35:10 102  	  INSTRUMENT_ID      = in_instrument_id
14:35:10 103  	WHERE
14:35:10 104  	  ACCOUNT.ID = in_account_id;
14:35:10 105  
14:35:10 106  END;
14:35:10 107  
14:35:10 108  /*************************************************************/
14:35:10 109  
14:35:10 110  PROCEDURE READ_ACCOUNT (
14:35:10 111  	in_account_id  IN ACCOUNT.ID%TYPE,
14:35:10 112  	out_result_set OUT SYS_REFCURSOR
14:35:10 113  ) AS
14:35:10 114  BEGIN
14:35:10 115  	OPEN out_result_set FOR
14:35:10 116  	SELECT
14:35:10 117  	  ACCOUNT_STATUS_ID,
14:35:10 118  	  SUSPEND_DATE,
14:35:10 119  	  GROUP_ID
14:35:10 120  	FROM
14:35:10 121  	  ACCOUNT
14:35:10 122  	WHERE
14:35:10 123  	  ID = in_account_id;
14:35:10 124  END READ_ACCOUNT;
14:35:10 125  
14:35:10 126  /*************************************************************/
14:35:10 127  
14:35:10 128  PROCEDURE CREATE_ACCOUNT_NOTE (
14:35:10 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
14:35:10 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
14:35:10 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
14:35:10 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
14:35:10 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
14:35:10 134  ) AS
14:35:10 135  BEGIN
14:35:10 136  	IF inout_account_note_id IS NULL THEN
14:35:10 137  	  SELECT
14:35:10 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
14:35:10 139  	  FROM DUAL;
14:35:10 140  	END IF;
14:35:10 141  	INSERT INTO ACCOUNT_NOTE(
14:35:10 142  	  ID,
14:35:10 143  	  AGENT_ID,
14:35:10 144  	  ACCOUNT_ID,
14:35:10 145  	  NOTE,
14:35:10 146  	  CREATE_DATE,
14:35:10 147  	  CREATED_BY
14:35:10 148  	) VALUES (
14:35:10 149  	  inout_account_note_id,
14:35:10 150  	  in_agent_id,
14:35:10 151  	  in_account_id,
14:35:10 152  	  in_note,
14:35:10 153  	  SYSDATE,
14:35:10 154  	  in_created_by
14:35:10 155  	);
14:35:10 156  END CREATE_ACCOUNT_NOTE;
14:35:10 157  
14:35:10 158  END PROCS_ACCOUNT_CRU_V16;
14:35:10 159  .
14:35:10 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_ADDRESS(
14:35:10   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
14:35:10   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:35:10   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:35:10   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:35:10   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:35:10  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:35:10  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
14:35:10  13  ) AS
14:35:10  14  -- VARIABLES
14:35:10  15  var_address_id ADDRESS.ID%TYPE;
14:35:10  16  var_date DATE := SYSDATE;
14:35:10  17  BEGIN
14:35:10  18  	IF in_address_id IS NULL THEN
14:35:10  19  	  SELECT
14:35:10  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
14:35:10  21  	  FROM DUAL;
14:35:10  22  	ELSE
14:35:10  23  	  var_address_id := in_address_id;
14:35:10  24  	END IF;
14:35:10  25  	INSERT INTO
14:35:10  26  	  ADDRESS (
14:35:10  27  	    ID,
14:35:10  28  	    ADDRESS1,
14:35:10  29  	    ADDRESS2,
14:35:10  30  	    CITY,
14:35:10  31  	    STATE,
14:35:10  32  	    POSTAL_CODE,
14:35:10  33  	    COUNTRY,
14:35:10  34  	    CREATE_DATE,
14:35:10  35  	    CREATED_BY,
14:35:10  36  	    UPDATE_DATE,
14:35:10  37  	    UPDATED_BY
14:35:10  38  	  ) VALUES (
14:35:10  39  	    var_address_id,
14:35:10  40  	    in_address1,
14:35:10  41  	    in_address2,
14:35:10  42  	    in_city,
14:35:10  43  	    in_state,
14:35:10  44  	    in_postal_code,
14:35:10  45  	    in_country,
14:35:10  46  	    var_date,
14:35:10  47  	    in_created_by,
14:35:10  48  	    var_date,
14:35:10  49  	    in_created_by
14:35:10  50  	  );
14:35:10  51  
14:35:10  52  	out_address_id := var_address_id;
14:35:10  53  END CREATE_ADDRESS;
14:35:10  54  
14:35:10  55  PROCEDURE UPDATE_ADDRESS(
14:35:10  56  	in_address_id	      IN ADDRESS.ID%TYPE,
14:35:10  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:35:10  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:35:10  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:35:10  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:35:10  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:10  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:35:10  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
14:35:10  64  ) AS
14:35:10  65  BEGIN
14:35:10  66  
14:35:10  67  	-- Create history
14:35:10  68  	PROCS_HISTORY_V16.CREATE_ADDRESS_HISTORY(
14:35:10  69  	  in_address_id 		=> in_address_id,
14:35:10  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:10  71  	);
14:35:10  72  
14:35:10  73  	UPDATE
14:35:10  74  	  ADDRESS
14:35:10  75  	SET
14:35:10  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
14:35:10  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
14:35:10  78  	  CITY = NVL(in_city, CITY),
14:35:10  79  	  STATE = NVL(in_state, STATE),
14:35:10  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
14:35:10  81  	  COUNTRY = NVL(in_country, COUNTRY),
14:35:10  82  	  UPDATE_DATE = SYSDATE,
14:35:10  83  	  UPDATED_BY = in_updated_by
14:35:10  84  	WHERE
14:35:10  85  	  ID = in_address_id;
14:35:10  86  
14:35:10  87  END UPDATE_ADDRESS;
14:35:10  88  
14:35:10  89  END PROCS_ADDRESS_CRU_V16;
14:35:10  90  .
14:35:10 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_AMAZON_SUB(
14:35:10   4  /*
14:35:10   5  Throws exceptions:
14:35:10   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:10   7  */
14:35:10   8  	  out_id	      OUT NUMBER,
14:35:10   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
14:35:10  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
14:35:10  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
14:35:10  12  ) AS
14:35:10  13  -- VARIABLES
14:35:10  14  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
14:35:10  15  var_current_date	DATE;
14:35:10  16  var_count 	NUMBER;
14:35:10  17  AMAZON_SUB_USED	EXCEPTION;
14:35:10  18  BEGIN
14:35:10  19  
14:35:10  20  	SELECT COUNT(1) INTO var_count
14:35:10  21  	FROM SUBSCRIPTION s, AMAZON_SUB am
14:35:10  22  	WHERE
14:35:10  23  	  am.AMAZON_ID = in_amazon_id
14:35:10  24  	  and am.subscription_id = s.id
14:35:10  25  	  and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
14:35:10  26  
14:35:10  27  	if var_count > 0 then
14:35:10  28  	  raise AMAZON_SUB_USED;
14:35:10  29  	end if;
14:35:10  30  
14:35:10  31  	SELECT
14:35:10  32  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
14:35:10  33  	INTO
14:35:10  34  	  out_id
14:35:10  35  	FROM
14:35:10  36  	  dual
14:35:10  37  	;
14:35:10  38  
14:35:10  39  	SELECT
14:35:10  40  	  sysdate
14:35:10  41  	INTO
14:35:10  42  	  var_current_date
14:35:10  43  	FROM
14:35:10  44  	  dual
14:35:10  45  	;
14:35:10  46  
14:35:10  47  	INSERT INTO CORE_OWNER.AMAZON_SUB
14:35:10  48  	(
14:35:10  49  	  id,
14:35:10  50  	  subscription_id,
14:35:10  51  	  amazon_id,
14:35:10  52  	  create_date,
14:35:10  53  	  created_by,
14:35:10  54  	  update_date,
14:35:10  55  	  updated_by
14:35:10  56  	)
14:35:10  57  	VALUES
14:35:10  58  	(
14:35:10  59  	  out_id,
14:35:10  60  	  in_subscription_id,
14:35:10  61  	  in_amazon_id,
14:35:10  62  	  var_current_date,
14:35:10  63  	  in_created_by,
14:35:10  64  	  var_current_date,
14:35:10  65  	  in_created_by
14:35:10  66  	);
14:35:10  67  
14:35:10  68  EXCEPTION
14:35:10  69  WHEN AMAZON_SUB_USED THEN
14:35:10  70  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:10  71  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
14:35:10  72  WHEN DUP_VAL_ON_INDEX THEN
14:35:10  73  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:10  74  	  SPROC_NAME, 'Duplicate value', SQLERRM);
14:35:10  75  WHEN OTHERS THEN
14:35:10  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:10  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:10  78  END CREATE_AMAZON_SUB;
14:35:10  79  
14:35:10  80  END PROCS_AMAZON_CRU_V16;
14:35:10  81  .
14:35:10 SQL> /

Package body created.

Elapsed: 00:00:00.00
14:35:10 SQL> 
14:35:10 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V16" AS
14:35:10   2  
14:35:10   3  PROCEDURE CREATE_CHARGE(
14:35:10   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
14:35:10   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
14:35:10   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
14:35:10   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
14:35:10   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
14:35:10   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
14:35:10  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
14:35:10  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:35:10  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
14:35:10  13  ) AS
14:35:10  14  -- VARIABLES
14:35:10  15  var_charge_id CHARGE.ID%TYPE;
14:35:10  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:10  17  var_date DATE := SYSDATE;
14:35:10  18  BEGIN
14:35:10  19  	IF in_charge_id IS NULL THEN
14:35:10  20  	  SELECT
14:35:10  21  	    CRG_ID_SEQ.nextVal into var_charge_id
14:35:10  22  	  FROM DUAL;
14:35:10  23  	ELSE
14:35:10  24  	  var_charge_id := in_charge_id;
14:35:10  25  	END IF;
14:35:10  26  	INSERT INTO
14:35:10  27  	  CHARGE (
14:35:10  28  	    ID,
14:35:10  29  	    INVOICE_ID,
14:35:10  30  	    TRANSACTION_ID,
14:35:10  31  	    INSTRUMENT_TYPE_ID,
14:35:10  32  	    INSTRUMENT_ID,
14:35:10  33  	    CHARGE_AMOUNT,
14:35:10  34  	    CHARGE_STATUS_ID,
14:35:10  35  	    CREATE_DATE,
14:35:10  36  	    CREATED_BY,
14:35:10  37  	    UPDATE_DATE,
14:35:10  38  	    UPDATED_BY
14:35:10  39  	  ) VALUES (
14:35:10  40  	    var_charge_id,
14:35:10  41  	    in_invoice_id,
14:35:10  42  	    in_transaction_id,
14:35:10  43  	    in_instrument_type_id,
14:35:10  44  	    in_instrument_id,
14:35:10  45  	    in_charge_amount,
14:35:10  46  	    in_charge_status_id,
14:35:10  47  	    var_date,
14:35:10  48  	    in_created_by,
14:35:10  49  	    var_date,
14:35:10  50  	    in_created_by
14:35:10  51  	  );
14:35:10  52  
14:35:10  53  	out_charge_id := var_charge_id;
14:35:10  54  END CREATE_CHARGE;
14:35:10  55  
14:35:10  56  PROCEDURE UPDATE_CHARGE(
14:35:10  57  	in_charge_id	      IN CHARGE.ID%TYPE,
14:35:10  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:35:10  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
14:35:10  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
14:35:10  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
14:35:10  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
14:35:10  63  ) AS
14:35:10  64  BEGIN
14:35:10  65  
14:35:10  66  	-- Create history
14:35:10  67  	PROCS_HISTORY_V16.CREATE_CHARGE_HISTORY(
14:35:10  68  	  in_charge_id		       => in_charge_id,
14:35:10  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:10  70  	);
14:35:10  71  
14:35:10  72  	UPDATE
14:35:10  73  	  CHARGE
14:35:10  74  	SET
14:35:10  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
14:35:10  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
14:35:10  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
14:35:10  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
14:35:10  79  	  UPDATE_DATE	     = SYSDATE,
14:35:10  80  	  UPDATED_BY	     = in_updated_by
14:35:10  81  	WHERE
14:35:10  82  	  ID = in_charge_id;
14:35:10  83  
14:35:10  84  END UPDATE_CHARGE;
14:35:10  85  
14:35:10  86  END PROCS_CHARGE_CRU_V16;
14:35:10  87  .
14:35:10 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_CREDIT_CARD(
14:35:11   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
14:35:11   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
14:35:11   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
14:35:11   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
14:35:11   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
14:35:11   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
14:35:11  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
14:35:11  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
14:35:11  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
14:35:11  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
14:35:11  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
14:35:11  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:35:11  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
14:35:11  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
14:35:11  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
14:35:11  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
14:35:11  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
14:35:11  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
14:35:11  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
14:35:11  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
14:35:11  24  ) AS
14:35:11  25  -- VARIABLES
14:35:11  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
14:35:11  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11  28  var_date DATE := SYSDATE;
14:35:11  29  BEGIN
14:35:11  30  	IF in_credit_card_id IS NULL THEN
14:35:11  31  	  SELECT
14:35:11  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
14:35:11  33  	  FROM DUAL;
14:35:11  34  	ELSE
14:35:11  35  	  var_credit_card_id := in_credit_card_id;
14:35:11  36  	END IF;
14:35:11  37  	INSERT INTO CREDIT_CARD(
14:35:11  38  	    ID,
14:35:11  39  	    ACCOUNT_ID,
14:35:11  40  	    INSTRUMENT_NAME,
14:35:11  41  	    PRIVATE_CARD_HOLDER_NAME,
14:35:11  42  	    PRIVATE_STREET_ADDRESS,
14:35:11  43  	    PRIVATE_STREET_ADDRESS2,
14:35:11  44  	    STATE,
14:35:11  45  	    CITY,
14:35:11  46  	    POSTAL_CODE,
14:35:11  47  	    COUNTRY,
14:35:11  48  	    LAST_FOUR_CC,
14:35:11  49  	    EXPIRATION_DATE,
14:35:11  50  	    CREDIT_CARD_TYPE_ID,
14:35:11  51  	    SECRET_TOKEN,
14:35:11  52  	    CHASE_PROFILE_ID,
14:35:11  53  	    CREATE_DATE,
14:35:11  54  	    CREATED_BY,
14:35:11  55  	    UPDATE_DATE,
14:35:11  56  	    UPDATED_BY,
14:35:11  57  	    CREDIT_CARD_STATUS_ID,
14:35:11  58  	    PRIVATE_FIRST_NAME,
14:35:11  59  	    PRIVATE_LAST_NAME
14:35:11  60  	  ) VALUES (
14:35:11  61  	    var_credit_card_id,
14:35:11  62  	    in_account_id,
14:35:11  63  	    in_instrument_name,
14:35:11  64  	    in_private_card_holder_name,
14:35:11  65  	    in_private_street_address,
14:35:11  66  	    in_private_street_address2,
14:35:11  67  	    in_state,
14:35:11  68  	    in_city,
14:35:11  69  	    in_postal_code,
14:35:11  70  	    in_country,
14:35:11  71  	    in_last_four_cc,
14:35:11  72  	    in_expiration_date,
14:35:11  73  	    in_credit_card_type_id,
14:35:11  74  	    in_secret_token,
14:35:11  75  	    in_chase_profile_id,
14:35:11  76  	    var_date,
14:35:11  77  	    in_created_by,
14:35:11  78  	    var_date,
14:35:11  79  	    in_created_by,
14:35:11  80  	    in_credit_card_status_id,
14:35:11  81  	    in_private_first_name,
14:35:11  82  	    in_private_last_name
14:35:11  83  	  );
14:35:11  84  
14:35:11  85  	out_credit_card_id := var_credit_card_id;
14:35:11  86  END CREATE_CREDIT_CARD;
14:35:11  87  
14:35:11  88  /******************************************************************************/
14:35:11  89  
14:35:11  90  PROCEDURE UPDATE_CREDIT_CARD(
14:35:11  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
14:35:11  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:35:11  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
14:35:11  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:35:11  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
14:35:11  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
14:35:11  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
14:35:11  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:11  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
14:35:11 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
14:35:11 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:35:11 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
14:35:11 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
14:35:11 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
14:35:11 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
14:35:11 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
14:35:11 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
14:35:11 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
14:35:11 109  ) AS
14:35:11 110  BEGIN
14:35:11 111  
14:35:11 112  	-- Create history
14:35:11 113  	PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
14:35:11 114  	  in_credit_card_id	       => in_credit_card_id,
14:35:11 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11 116  	);
14:35:11 117  
14:35:11 118  	UPDATE CREDIT_CARD SET
14:35:11 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
14:35:11 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
14:35:11 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
14:35:11 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
14:35:11 123  	  STATE 		   = NVL(in_state, STATE),
14:35:11 124  	  CITY			   = NVL(in_city, CITY),
14:35:11 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
14:35:11 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
14:35:11 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
14:35:11 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
14:35:11 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
14:35:11 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
14:35:11 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
14:35:11 132  	  UPDATE_DATE		   = SYSDATE,
14:35:11 133  	  UPDATED_BY		   = in_updated_by,
14:35:11 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
14:35:11 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
14:35:11 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
14:35:11 137  	WHERE
14:35:11 138  	  ID = in_credit_card_id;
14:35:11 139  
14:35:11 140  END UPDATE_CREDIT_CARD;
14:35:11 141  
14:35:11 142  /******************************************************************************/
14:35:11 143  
14:35:11 144  PROCEDURE CREATE_PAYPAL(
14:35:11 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
14:35:11 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
14:35:11 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
14:35:11 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:35:11 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
14:35:11 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
14:35:11 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
14:35:11 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
14:35:11 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
14:35:11 154  	in_state			IN PAYPAL.STATE%TYPE,
14:35:11 155  	in_city 			IN PAYPAL.CITY%TYPE,
14:35:11 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
14:35:11 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
14:35:11 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
14:35:11 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
14:35:11 160  ) AS
14:35:11 161  -- VARIABLES
14:35:11 162  var_paypal_id PAYPAL.ID%TYPE;
14:35:11 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11 164  var_date DATE := SYSDATE;
14:35:11 165  BEGIN
14:35:11 166  	IF in_paypal_id IS NULL THEN
14:35:11 167  	  SELECT
14:35:11 168  	    PP_ID_SEQ.nextVal into var_paypal_id
14:35:11 169  	  FROM DUAL;
14:35:11 170  	ELSE
14:35:11 171  	  var_paypal_id := in_paypal_id;
14:35:11 172  	END IF;
14:35:11 173  	INSERT INTO PAYPAL(
14:35:11 174  	    ID,
14:35:11 175  	    ACCOUNT_ID,
14:35:11 176  	    INSTRUMENT_NAME,
14:35:11 177  	    PRIVATE_EMAIL_ADDRESS,
14:35:11 178  	    CREATE_DATE,
14:35:11 179  	    CREATED_BY,
14:35:11 180  	    UPDATE_DATE,
14:35:11 181  	    UPDATED_BY,
14:35:11 182  	    PAYPAL_STATUS_ID,
14:35:11 183  	    PRIVATE_STREET_ADDRESS,
14:35:11 184  	    PRIVATE_STREET_ADDRESS2,
14:35:11 185  	    STATE,
14:35:11 186  	    CITY,
14:35:11 187  	    POSTAL_CODE,
14:35:11 188  	    COUNTRY,
14:35:11 189  	    EXPIRATION_DATE,
14:35:11 190  	    SECRET_TOKEN
14:35:11 191  	  ) VALUES (
14:35:11 192  	    var_paypal_id,
14:35:11 193  	    in_account_id,
14:35:11 194  	    in_instrument_name,
14:35:11 195  	    in_private_email_address,
14:35:11 196  	    var_date,
14:35:11 197  	    in_created_by,
14:35:11 198  	    var_date,
14:35:11 199  	    in_created_by,
14:35:11 200  	    in_paypal_status_id,
14:35:11 201  	    in_paypal_prvt_street_address,
14:35:11 202  	    in_paypal_prvt_street_address2,
14:35:11 203  	    in_state,
14:35:11 204  	    in_city,
14:35:11 205  	    in_postal_code,
14:35:11 206  	    in_country,
14:35:11 207  	    in_expiration_date,
14:35:11 208  	    in_secret_token
14:35:11 209  	  );
14:35:11 210  	out_paypal_id := var_paypal_id;
14:35:11 211  END CREATE_PAYPAL;
14:35:11 212  
14:35:11 213  /******************************************************************************/
14:35:11 214  
14:35:11 215  PROCEDURE UPDATE_PAYPAL(
14:35:11 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
14:35:11 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:35:11 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
14:35:11 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
14:35:11 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
14:35:11 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:35:11 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:35:11 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
14:35:11 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
14:35:11 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:11 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
14:35:11 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:35:11 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
14:35:11 229  ) AS
14:35:11 230  BEGIN
14:35:11 231  	-- Create history
14:35:11 232  	PROCS_HISTORY_V16.CREATE_PAYPAL_HISTORY(
14:35:11 233  	  in_paypal_id		       => in_paypal_id,
14:35:11 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11 235  	);
14:35:11 236  
14:35:11 237  	UPDATE PAYPAL SET
14:35:11 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
14:35:11 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
14:35:11 240  	  UPDATE_DATE	   = SYSDATE,
14:35:11 241  	  UPDATED_BY	   = in_updated_by,
14:35:11 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
14:35:11 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
14:35:11 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
14:35:11 245  	  STATE 		  = NVL(in_state, STATE),
14:35:11 246  	  CITY			  = NVL(in_city, CITY),
14:35:11 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
14:35:11 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
14:35:11 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
14:35:11 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
14:35:11 251  	WHERE
14:35:11 252  	  ID = in_paypal_id;
14:35:11 253  END UPDATE_PAYPAL;
14:35:11 254  
14:35:11 255  /******************************************************************************/
14:35:11 256  
14:35:11 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
14:35:11 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
14:35:11 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
14:35:11 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
14:35:11 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:11 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
14:35:11 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:35:11 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
14:35:11 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
14:35:11 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
14:35:11 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
14:35:11 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
14:35:11 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
14:35:11 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
14:35:11 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
14:35:11 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
14:35:11 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
14:35:11 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
14:35:11 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
14:35:11 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
14:35:11 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
14:35:11 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
14:35:11 279  ) AS
14:35:11 280  -- VARIABLES
14:35:11 281  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
14:35:11 282  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11 283  var_date DATE := SYSDATE;
14:35:11 284  BEGIN
14:35:11 285  	IF in_gift_certificate_id IS NULL THEN
14:35:11 286  	  SELECT
14:35:11 287  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
14:35:11 288  	  FROM DUAL;
14:35:11 289  	ELSE
14:35:11 290  	  var_gift_certificate_id := in_gift_certificate_id;
14:35:11 291  	END IF;
14:35:11 292  	INSERT INTO GIFT_CERTIFICATE (
14:35:11 293  	    ID,
14:35:11 294  	    PURCHASER_GROUP_ID,
14:35:11 295  	    PURCHASE_INVOICE_ID,
14:35:11 296  	    OFFER_CHAIN_ID,
14:35:11 297  	    EXPIRATION_DATE,
14:35:11 298  	    PURCHASE_DATE,
14:35:11 299  	    GIFT_CERTIFICATE_STATUS_ID,
14:35:11 300  	    CODE,
14:35:11 301  	    CREATE_DATE,
14:35:11 302  	    CREATED_BY,
14:35:11 303  	    UPDATE_DATE,
14:35:11 304  	    UPDATED_BY,
14:35:11 305  	    RECIPIENT_NAME,
14:35:11 306  	    GIFT_MESSAGE,
14:35:11 307  	    RECIPIENT_EMAIL,
14:35:11 308  	    FINALIZED_INVOICE_ID,
14:35:11 309  	    SENDER_EMAIL,
14:35:11 310  	    SENDER_NAME,
14:35:11 311  	    REDEMPTION_DATE,
14:35:11 312  	    CANCELATION_DATE,
14:35:11 313  	    REDEEMER_GROUP_ID,
14:35:11 314  	    RECIPIENT_ADDRESS_ID,
14:35:11 315  	    RECIPIENT_NOTIFY_DATE
14:35:11 316  	  ) VALUES(
14:35:11 317  	    var_gift_certificate_id,
14:35:11 318  	    in_purchaser_group_id,
14:35:11 319  	    in_purchaser_invoice_id,
14:35:11 320  	    in_offer_chain_id,
14:35:11 321  	    in_expiration_date,
14:35:11 322  	    in_purchase_date,
14:35:11 323  	    in_gift_certificate_status_id,
14:35:11 324  	    in_code,
14:35:11 325  	    var_date,
14:35:11 326  	    in_created_by,
14:35:11 327  	    var_date,
14:35:11 328  	    in_created_by,
14:35:11 329  	    in_recipient_name,
14:35:11 330  	    in_gift_message,
14:35:11 331  	    in_recipient_email,
14:35:11 332  	    in_finalized_invoice_id,
14:35:11 333  	    in_sender_email,
14:35:11 334  	    in_sender_name,
14:35:11 335  	    in_redemption_date,
14:35:11 336  	    in_cancelation_date,
14:35:11 337  	    in_redeemer_group_id,
14:35:11 338  	    in_recipient_address_id,
14:35:11 339  	    in_recipient_notify_date
14:35:11 340  	  );
14:35:11 341  
14:35:11 342  	out_gift_certificate_id := var_gift_certificate_id;
14:35:11 343  END CREATE_GIFT_CERTIFICATE;
14:35:11 344  
14:35:11 345  /******************************************************************************/
14:35:11 346  
14:35:11 347  PROCEDURE UPDATE_GIFT_CERTIFICATE(
14:35:11 348  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
14:35:11 349  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:35:11 350  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
14:35:11 351  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
14:35:11 352  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
14:35:11 353  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
14:35:11 354  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
14:35:11 355  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
14:35:11 356  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
14:35:11 357  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
14:35:11 358  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
14:35:11 359  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
14:35:11 360  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
14:35:11 361  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
14:35:11 362  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
14:35:11 363  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
14:35:11 364  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
14:35:11 365  ) AS
14:35:11 366  BEGIN
14:35:11 367  
14:35:11 368  	-- Create history
14:35:11 369  	PROCS_HISTORY_V16.CREATE_GIFT_CERT_HISTORY(
14:35:11 370  	  in_gift_certificate_id       => in_gift_certificate_id,
14:35:11 371  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11 372  	);
14:35:11 373  
14:35:11 374  	UPDATE GIFT_CERTIFICATE SET
14:35:11 375  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
14:35:11 376  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
14:35:11 377  	  CODE			     = NVL(in_code, CODE),
14:35:11 378  	  UPDATE_DATE		     = SYSDATE,
14:35:11 379  	  UPDATED_BY		     = in_updated_by,
14:35:11 380  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
14:35:11 381  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
14:35:11 382  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
14:35:11 383  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
14:35:11 384  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
14:35:11 385  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
14:35:11 386  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
14:35:11 387  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
14:35:11 388  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
14:35:11 389  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
14:35:11 390  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
14:35:11 391  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
14:35:11 392  	WHERE
14:35:11 393  	  ID = in_gift_certificate_id;
14:35:11 394  
14:35:11 395  END UPDATE_GIFT_CERTIFICATE;
14:35:11 396  
14:35:11 397  END PROCS_FIN_INSTRUMENTS_CRU_V16;
14:35:11 398  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
14:35:11   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
14:35:11   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
14:35:11   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
14:35:11   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
14:35:11   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
14:35:11   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
14:35:11  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
14:35:11  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:11  12  ) AS
14:35:11  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
14:35:11  14  BEGIN
14:35:11  15  	UPDATE SUBSCRIPTION_SHARE SET
14:35:11  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
14:35:11  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
14:35:11  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
14:35:11  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
14:35:11  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
14:35:11  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
14:35:11  22  	  UPDATED_BY	       = in_updated_by,
14:35:11  23  	  UPDATE_DATE	       = SYSDATE
14:35:11  24  	WHERE
14:35:11  25  	  SUBSCRIPTION_SHARE.ID = in_id;
14:35:11  26  EXCEPTION
14:35:11  27  	WHEN OTHERS THEN
14:35:11  28  	  Procs_Common_V16.Throw_Exception(APP_EXCEPTION_CODES_V16.Internal_Error,
14:35:11  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
14:35:11  30  END UPDATE_SUBSCRIPTION_SHARE;
14:35:11  31  
14:35:11  32  PROCEDURE CREATE_GROUP_ACCOUNT (
14:35:11  33  	in_subscription_id	 IN NUMBER,
14:35:11  34  	in_group_name		 IN VARCHAR2,
14:35:11  35  	in_first_name		 IN VARCHAR2,
14:35:11  36  	in_last_name		 IN VARCHAR2,
14:35:11  37  	in_email		 IN VARCHAR2,
14:35:11  38  	in_phone		 IN VARCHAR2,
14:35:11  39  	in_organization_type	 IN VARCHAR2,
14:35:11  40  	in_seats		 IN NUMBER,
14:35:11  41  	in_seat_ttl_in_hours	 IN NUMBER,
14:35:11  42  	in_ip			 IN NUMBER,
14:35:11  43  	in_created_by		 IN VARCHAR2
14:35:11  44  ) AS
14:35:11  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
14:35:11  46  var_now DATE;
14:35:11  47  BEGIN
14:35:11  48  
14:35:11  49  	SELECT
14:35:11  50  	  SYSDATE INTO var_now
14:35:11  51  	FROM dual;
14:35:11  52  
14:35:11  53  	INSERT INTO GROUP_ACCOUNT (
14:35:11  54  	  id,
14:35:11  55  	  subscription_id,
14:35:11  56  	  group_name,
14:35:11  57  	  first_name,
14:35:11  58  	  last_name,
14:35:11  59  	  email,
14:35:11  60  	  phone,
14:35:11  61  	  organization_type,
14:35:11  62  	  seats,
14:35:11  63  	  seat_ttl_in_hours,
14:35:11  64  	  ip,
14:35:11  65  	  create_date,
14:35:11  66  	  created_by,
14:35:11  67  	  update_date,
14:35:11  68  	  updated_by
14:35:11  69  	) VALUES (
14:35:11  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
14:35:11  71  	  in_subscription_id,
14:35:11  72  	  in_group_name,
14:35:11  73  	  in_first_name,
14:35:11  74  	  in_last_name,
14:35:11  75  	  in_email,
14:35:11  76  	  in_phone,
14:35:11  77  	  in_organization_type,
14:35:11  78  	  in_seats,
14:35:11  79  	  in_seat_ttl_in_hours,
14:35:11  80  	  in_ip,
14:35:11  81  	  var_now,
14:35:11  82  	  in_created_by,
14:35:11  83  	  var_now,
14:35:11  84  	  in_created_by
14:35:11  85  	);
14:35:11  86  
14:35:11  87  EXCEPTION
14:35:11  88  	WHEN PROGRAM_ERROR THEN
14:35:11  89  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
14:35:11  91  	WHEN OTHERS THEN
14:35:11  92  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
14:35:11  94  END CREATE_GROUP_ACCOUNT;
14:35:11  95  
14:35:11  96  
14:35:11  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
14:35:11  98  	in_group_account_id    IN NUMBER,
14:35:11  99  	in_borrower_account_id IN NUMBER,
14:35:11 100  	in_ip_address	       IN VARCHAR2,
14:35:11 101  	in_email_domain        IN VARCHAR2,
14:35:11 102  	in_start_date	       IN DATE,
14:35:11 103  	in_end_date	       IN DATE,
14:35:11 104  	in_created_by	       IN VARCHAR2
14:35:11 105  ) AS
14:35:11 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
14:35:11 107  var_now DATE;
14:35:11 108  BEGIN
14:35:11 109  
14:35:11 110  	SELECT
14:35:11 111  	  SYSDATE INTO var_now
14:35:11 112  	FROM dual;
14:35:11 113  
14:35:11 114  	INSERT INTO SUBSCRIPTION_SHARE (
14:35:11 115  	  id,
14:35:11 116  	  group_account_id,
14:35:11 117  	  borrower_account_id,
14:35:11 118  	  ip_address,
14:35:11 119  	  email_domain,
14:35:11 120  	  start_date,
14:35:11 121  	  end_date,
14:35:11 122  	  create_date,
14:35:11 123  	  created_by,
14:35:11 124  	  update_date,
14:35:11 125  	  updated_by
14:35:11 126  	) VALUES (
14:35:11 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
14:35:11 128  	  in_group_account_id,
14:35:11 129  	  in_borrower_account_id,
14:35:11 130  	  in_ip_address,
14:35:11 131  	  in_email_domain,
14:35:11 132  	  in_start_date,
14:35:11 133  	  in_end_date,
14:35:11 134  	  var_now,
14:35:11 135  	  in_created_by,
14:35:11 136  	  var_now,
14:35:11 137  	  in_created_by
14:35:11 138  	);
14:35:11 139  
14:35:11 140  EXCEPTION
14:35:11 141  	WHEN PROGRAM_ERROR THEN
14:35:11 142  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
14:35:11 144  END CREATE_SUBSCRIPTION_SHARE;
14:35:11 145  
14:35:11 146  -- Eh, I don't like the cru packages at all
14:35:11 147  -- the idea of code reuse in PL/SQL is still lost on me
14:35:11 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
14:35:11 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:11 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:35:11 151  ) AS
14:35:11 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
14:35:11 153  BEGIN
14:35:11 154  	update
14:35:11 155  	  GROUP_ACCOUNT_IP_RANGE IR
14:35:11 156  	set
14:35:11 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_INACTIVE,
14:35:11 158  	  IR.UPDATED_BY = in_updated_by,
14:35:11 159  	  IR.UPDATE_DATE = sysdate
14:35:11 160  	where
14:35:11 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
14:35:11 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
14:35:11 163  	;
14:35:11 164  EXCEPTION
14:35:11 165  WHEN OTHERS THEN
14:35:11 166  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 168  END DISABLE_IP_RANGES_BY_GA_ID;
14:35:11 169  
14:35:11 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
14:35:11 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
14:35:11 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:35:11 173  ) AS
14:35:11 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
14:35:11 175  BEGIN
14:35:11 176  	update
14:35:11 177  	  GROUP_ACCOUNT_IP_RANGE IR
14:35:11 178  	set
14:35:11 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_INACTIVE,
14:35:11 180  	  IR.UPDATED_BY = in_updated_by,
14:35:11 181  	  IR.UPDATE_DATE = sysdate
14:35:11 182  	where
14:35:11 183  	  IR.ID = in_id and
14:35:11 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
14:35:11 185  	;
14:35:11 186  raise no_data_found;
14:35:11 187  EXCEPTION
14:35:11 188  WHEN OTHERS THEN
14:35:11 189  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 190  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
14:35:11 191  END DISABLE_IP_RANGE_BY_ID;
14:35:11 192  
14:35:11 193  PROCEDURE ADD_IP_RANGE (
14:35:11 194  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:11 195  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
14:35:11 196  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:35:11 197  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:35:11 198  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
14:35:11 199  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
14:35:11 200  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
14:35:11 201  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
14:35:11 202  ) AS
14:35:11 203  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
14:35:11 204  BEGIN
14:35:11 205  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
14:35:11 206  	    ID,
14:35:11 207  	    GROUP_ACCOUNT_ID,
14:35:11 208  	    MINIMUM_IP_STRING,
14:35:11 209  	    MINIMUM_IP_LOW,
14:35:11 210  	    MINIMUM_IP_HIGH,
14:35:11 211  	    MAXIMUM_IP_STRING,
14:35:11 212  	    MAXIMUM_IP_LOW,
14:35:11 213  	    MAXIMUM_IP_HIGH,
14:35:11 214  	    CREATED_BY,
14:35:11 215  	    CREATE_DATE,
14:35:11 216  	    UPDATED_BY,
14:35:11 217  	    UPDATE_DATE,
14:35:11 218  	    GROUP_ACC_IP_RNG_STATUS_ID
14:35:11 219  	  )
14:35:11 220  	  VALUES (
14:35:11 221  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
14:35:11 222  	    in_group_account_id,
14:35:11 223  	    in_minimum_ip_string,
14:35:11 224  	    in_minimum_ip_low,
14:35:11 225  	    in_minimum_ip_high,
14:35:11 226  	    in_maximum_ip_string,
14:35:11 227  	    in_maximum_ip_low,
14:35:11 228  	    in_maximum_ip_high,
14:35:11 229  	    in_created_by,
14:35:11 230  	    sysdate,
14:35:11 231  	    in_created_by,
14:35:11 232  	    sysdate,
14:35:11 233  	    GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
14:35:11 234  	  );
14:35:11 235  EXCEPTION
14:35:11 236  WHEN OTHERS THEN
14:35:11 237  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 239  END ADD_IP_RANGE;
14:35:11 240  
14:35:11 241  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
14:35:11 242  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:11 243  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:11 244  ) AS
14:35:11 245  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
14:35:11 246  BEGIN
14:35:11 247  	update
14:35:11 248  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
14:35:11 249  	set
14:35:11 250  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT,
14:35:11 251  	  ED.UPDATED_BY = in_updated_by,
14:35:11 252  	  ED.UPDATE_DATE = sysdate
14:35:11 253  	where
14:35:11 254  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
14:35:11 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT
14:35:11 256  	;
14:35:11 257  EXCEPTION
14:35:11 258  WHEN OTHERS THEN
14:35:11 259  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 260  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 261  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
14:35:11 262  
14:35:11 263  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
14:35:11 264  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:35:11 265  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:11 266  ) AS
14:35:11 267  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
14:35:11 268  BEGIN
14:35:11 269  	update
14:35:11 270  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
14:35:11 271  	set
14:35:11 272  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT,
14:35:11 273  	  ED.UPDATED_BY = in_updated_by,
14:35:11 274  	  ED.UPDATE_DATE = sysdate
14:35:11 275  	where
14:35:11 276  	  ED.ID = in_id and
14:35:11 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT
14:35:11 278  	;
14:35:11 279  EXCEPTION
14:35:11 280  WHEN OTHERS THEN
14:35:11 281  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 282  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
14:35:11 283  END DISABLE_EMAIL_DOMAIN_BY_ID;
14:35:11 284  
14:35:11 285  
14:35:11 286  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
14:35:11 287  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:35:11 288  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:11 289  ) AS
14:35:11 290  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
14:35:11 291  BEGIN
14:35:11 292  	update
14:35:11 293  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
14:35:11 294  	set
14:35:11 295  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT,
14:35:11 296  	  ED.UPDATED_BY = in_updated_by,
14:35:11 297  	  ED.UPDATE_DATE = sysdate
14:35:11 298  	where
14:35:11 299  	  ED.ID = in_id and
14:35:11 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_INACT
14:35:11 301  	;
14:35:11 302  EXCEPTION
14:35:11 303  WHEN OTHERS THEN
14:35:11 304  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 305  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
14:35:11 306  END ENABLE_EMAIL_DOMAIN_BY_ID;
14:35:11 307  
14:35:11 308  
14:35:11 309  PROCEDURE ADD_EMAIL_DOMAIN (
14:35:11 310  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:11 311  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:35:11 312  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
14:35:11 313  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
14:35:11 314  ) AS
14:35:11 315  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
14:35:11 316  BEGIN
14:35:11 317  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
14:35:11 318  	    ID,
14:35:11 319  	    GROUP_ACCOUNT_ID,
14:35:11 320  	    EMAIL_DOMAIN,
14:35:11 321  		IS_ACTIVE,
14:35:11 322  	    CREATED_BY,
14:35:11 323  	    CREATE_DATE,
14:35:11 324  	    UPDATED_BY,
14:35:11 325  	    UPDATE_DATE
14:35:11 326  	  )
14:35:11 327  	  VALUES (
14:35:11 328  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
14:35:11 329  	    in_group_account_id,
14:35:11 330  		in_email_domain,
14:35:11 331  		in_is_active,
14:35:11 332  		in_created_by,
14:35:11 333  	    sysdate,
14:35:11 334  	    in_created_by,
14:35:11 335  	    sysdate
14:35:11 336  	  );
14:35:11 337  EXCEPTION
14:35:11 338  WHEN DUP_VAL_ON_INDEX THEN
14:35:11 339  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:11 340  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
14:35:11 341  WHEN OTHERS THEN
14:35:11 342  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 343  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
14:35:11 344  END ADD_EMAIL_DOMAIN;
14:35:11 345  
14:35:11 346  PROCEDURE UPDATE_GROUP_ACCOUNT (
14:35:11 347  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:35:11 348  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
14:35:11 349  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
14:35:11 350  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
14:35:11 351  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
14:35:11 352  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
14:35:11 353  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:35:11 354  ) AS
14:35:11 355  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
14:35:11 356  BEGIN
14:35:11 357  	update
14:35:11 358  	  group_account
14:35:11 359  	set
14:35:11 360  	  group_name = nvl(in_group_name, group_name),
14:35:11 361  	  first_name = nvl(in_first_name, first_name),
14:35:11 362  	  last_name = nvl(in_last_name, last_name),
14:35:11 363  	  email = nvl(in_email, email),
14:35:11 364  	  phone = nvl(in_phone, phone),
14:35:11 365  	  updated_by = in_updated_by,
14:35:11 366  	  update_date = sysdate
14:35:11 367  	where
14:35:11 368  	  id = in_group_account_id;
14:35:11 369  
14:35:11 370  	if(sql%rowcount = 0) then
14:35:11 371  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 372  	  SPROC_NAME, 'Group Account not found', SQLERRM);
14:35:11 373  	end if;
14:35:11 374  EXCEPTION
14:35:11 375  	WHEN OTHERS THEN
14:35:11 376  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 377  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
14:35:11 378  END UPDATE_GROUP_ACCOUNT;
14:35:11 379  
14:35:11 380  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
14:35:11 381  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:35:11 382  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
14:35:11 383  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:35:11 384  ) AS
14:35:11 385  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
14:35:11 386  var_subscription_id NUMBER;
14:35:11 387  var_seats NUMBER;
14:35:11 388  BEGIN
14:35:11 389  	select subscription_id, seats into var_subscription_id, var_seats
14:35:11 390  	from group_account
14:35:11 391  	where id = in_group_account_id;
14:35:11 392  
14:35:11 393  	update
14:35:11 394  	  group_account
14:35:11 395  	set
14:35:11 396  	  seats = in_seats,
14:35:11 397  	  updated_by = in_updated_by,
14:35:11 398  	  update_date = sysdate
14:35:11 399  	where
14:35:11 400  	  id = in_group_account_id;
14:35:11 401  
14:35:11 402  	if(sql%rowcount = 0) then
14:35:11 403  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 404  	  SPROC_NAME, 'Group Account not found', SQLERRM);
14:35:11 405  	end if;
14:35:11 406  
14:35:11 407  	PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
14:35:11 408  	  in_subscription_id => var_subscription_id,
14:35:11 409  	  in_agent_id	     => 0,
14:35:11 410  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
14:35:11 411  	  in_created_by      => in_updated_by
14:35:11 412  	);
14:35:11 413  EXCEPTION
14:35:11 414  	WHEN NO_DATA_FOUND THEN
14:35:11 415  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 416  	  SPROC_NAME, 'Group Account not found', SQLERRM);
14:35:11 417  	WHEN OTHERS THEN
14:35:11 418  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 419  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
14:35:11 420  END UPDATE_GROUP_ACCOUNT_SEATS;
14:35:11 421  
14:35:11 422  END PROCS_GROUP_ACCOUNT_CRU_V16;
14:35:11 423  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_INVOICE (
14:35:11   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
14:35:11   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
14:35:11   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
14:35:11   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
14:35:11   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
14:35:11   9  ) AS
14:35:11  10  -- VARIABLES
14:35:11  11  var_invoice_id INVOICE.ID%TYPE;
14:35:11  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11  13  var_date DATE := SYSDATE;
14:35:11  14  BEGIN
14:35:11  15  	IF in_invoice_id IS NULL THEN
14:35:11  16  	  SELECT
14:35:11  17  	    INV_ID_SEQ.nextVal into var_invoice_id
14:35:11  18  	  FROM DUAL;
14:35:11  19  	ELSE
14:35:11  20  	  var_invoice_id := in_invoice_id;
14:35:11  21  	END IF;
14:35:11  22  	INSERT INTO
14:35:11  23  	  INVOICE (
14:35:11  24  	    ID,
14:35:11  25  	    INVOICE_STATUS_ID,
14:35:11  26  	    CREATE_DATE,
14:35:11  27  	    CREATED_BY,
14:35:11  28  	    UPDATE_DATE,
14:35:11  29  	    UPDATED_BY,
14:35:11  30  	    TAX_EXEMPT_ID,
14:35:11  31  	    IS_TAX_CALCULATION_NEEDED
14:35:11  32  	  ) VALUES (
14:35:11  33  	    var_invoice_id,
14:35:11  34  	    in_invoice_status_id,
14:35:11  35  	    var_date,
14:35:11  36  	    in_created_by,
14:35:11  37  	    var_date,
14:35:11  38  	    in_created_by,
14:35:11  39  	    in_tax_exempt_id,
14:35:11  40  	    0 -- DEFAULT VALUE
14:35:11  41  	  );
14:35:11  42  
14:35:11  43  	out_invoice_id := var_invoice_id;
14:35:11  44  END;
14:35:11  45  
14:35:11  46  /*****************************************************************/
14:35:11  47  
14:35:11  48  PROCEDURE UPDATE_INVOICE (
14:35:11  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
14:35:11  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
14:35:11  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
14:35:11  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
14:35:11  53  ) AS
14:35:11  54  BEGIN
14:35:11  55  	-- Create history
14:35:11  56  	PROCS_HISTORY_V16.CREATE_INVOICE_HISTORY(
14:35:11  57  	  in_invoice_id 	       => in_invoice_id,
14:35:11  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11  59  	);
14:35:11  60  
14:35:11  61  	UPDATE
14:35:11  62  	  INVOICE
14:35:11  63  	SET
14:35:11  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
14:35:11  65  	  UPDATE_DATE		    = SYSDATE,
14:35:11  66  	  UPDATED_BY		    = in_updated_by,
14:35:11  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
14:35:11  68  	WHERE
14:35:11  69  	  ID = in_invoice_id;
14:35:11  70  END;
14:35:11  71  
14:35:11  72  END PROCS_INVOICE_CRU_V16;
14:35:11  73  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_RECEIPT(
14:35:11   4  /*
14:35:11   5  Throws exceptions:
14:35:11   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11   7  */
14:35:11   8  	  out_id	      OUT NUMBER,
14:35:11   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:35:11  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
14:35:11  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
14:35:11  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
14:35:11  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:11  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:35:11  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:35:11  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:11  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:35:11  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:35:11  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:35:11  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
14:35:11  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
14:35:11  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:35:11  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
14:35:11  24  ) AS
14:35:11  25  -- VARIABLES
14:35:11  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
14:35:11  27  var_current_date	    DATE;
14:35:11  28  var_count 	    NUMBER;
14:35:11  29  ITUNES_ORG_TNX_USED   EXCEPTION;
14:35:11  30  BEGIN
14:35:11  31  	SELECT COUNT(1) into var_count
14:35:11  32  	FROM
14:35:11  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
14:35:11  34  	WHERE
14:35:11  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
14:35:11  36  	  IR.SUBSCRIPTION_ID = S.ID AND
14:35:11  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
14:35:11  38  
14:35:11  39  	if var_count > 0 then
14:35:11  40  	  raise ITUNES_ORG_TNX_USED;
14:35:11  41  	end if;
14:35:11  42  
14:35:11  43  	SELECT
14:35:11  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
14:35:11  45  	INTO
14:35:11  46  	  out_id
14:35:11  47  	FROM
14:35:11  48  	  dual
14:35:11  49  	;
14:35:11  50  
14:35:11  51  	SELECT
14:35:11  52  	  sysdate
14:35:11  53  	INTO
14:35:11  54  	  var_current_date
14:35:11  55  	FROM
14:35:11  56  	  dual
14:35:11  57  	;
14:35:11  58  
14:35:11  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
14:35:11  60  	(
14:35:11  61  	  id,
14:35:11  62  	  subscription_id,
14:35:11  63  	  receipt,
14:35:11  64  	  status,
14:35:11  65  	  quantity,
14:35:11  66  	  product_id,
14:35:11  67  	  transaction_id,
14:35:11  68  	  purchase_date,
14:35:11  69  	  original_transaction_id,
14:35:11  70  	  original_purchase_date,
14:35:11  71  	  app_item_id,
14:35:11  72  	  version_external_id,
14:35:11  73  	  bid,
14:35:11  74  	  bvrs,
14:35:11  75  	  expires_date,
14:35:11  76  	  create_date,
14:35:11  77  	  created_by,
14:35:11  78  	  update_date,
14:35:11  79  	  updated_by,
14:35:11  80  	  last_check_date
14:35:11  81  	)
14:35:11  82  	VALUES
14:35:11  83  	(
14:35:11  84  	  out_id,
14:35:11  85  	  in_subscription_id,
14:35:11  86  	  in_receipt,
14:35:11  87  	  in_status,
14:35:11  88  	  in_quantity,
14:35:11  89  	  in_product_id,
14:35:11  90  	  in_transaction_id,
14:35:11  91  	  in_purchase_date,
14:35:11  92  	  in_original_transaction_id,
14:35:11  93  	  in_original_purchase_date,
14:35:11  94  	  in_app_item_id,
14:35:11  95  	  in_version_external_id,
14:35:11  96  	  in_bid,
14:35:11  97  	  in_bvrs,
14:35:11  98  	  in_expires_date,
14:35:11  99  	  var_current_date,
14:35:11 100  	  in_created_by,
14:35:11 101  	  var_current_date,
14:35:11 102  	  in_created_by,
14:35:11 103  	  var_current_date
14:35:11 104  	);
14:35:11 105  
14:35:11 106  EXCEPTION
14:35:11 107  WHEN ITUNES_ORG_TNX_USED THEN
14:35:11 108  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:11 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
14:35:11 110  WHEN DUP_VAL_ON_INDEX THEN
14:35:11 111  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:11 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
14:35:11 113  WHEN OTHERS THEN
14:35:11 114  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 116  END CREATE_RECEIPT;
14:35:11 117  
14:35:11 118  PROCEDURE UPDATE_RECEIPT(
14:35:11 119  /*
14:35:11 120  Throws exceptions:
14:35:11 121  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 122  */
14:35:11 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
14:35:11 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
14:35:11 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
14:35:11 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
14:35:11 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:11 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:35:11 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:35:11 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:11 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:35:11 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:35:11 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:35:11 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
14:35:11 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
14:35:11 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:35:11 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
14:35:11 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
14:35:11 139  ) AS
14:35:11 140  -- VARIABLES
14:35:11 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
14:35:11 142  var_current_date	    DATE;
14:35:11 143  BEGIN
14:35:11 144  
14:35:11 145  	SELECT
14:35:11 146  	  sysdate
14:35:11 147  	INTO
14:35:11 148  	  var_current_date
14:35:11 149  	FROM
14:35:11 150  	  dual
14:35:11 151  	;
14:35:11 152  
14:35:11 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
14:35:11 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ITUNES_RECEIPT_HISTORY
14:35:11 155  	  (
14:35:11 156  	      rec.id,
14:35:11 157  	      rec.subscription_id,
14:35:11 158  	      rec.receipt,
14:35:11 159  	      rec.status,
14:35:11 160  	      rec.quantity,
14:35:11 161  	      rec.product_id,
14:35:11 162  	      rec.transaction_id,
14:35:11 163  	      rec.purchase_date,
14:35:11 164  	      rec.original_transaction_id,
14:35:11 165  	      rec.original_purchase_date,
14:35:11 166  	      rec.app_item_id,
14:35:11 167  	      rec.version_external_id,
14:35:11 168  	      rec.bid,
14:35:11 169  	      rec.bvrs,
14:35:11 170  	      rec.expires_date,
14:35:11 171  	      rec.create_date,
14:35:11 172  	      rec.created_by,
14:35:11 173  	      rec.update_date,
14:35:11 174  	      rec.updated_by,
14:35:11 175  	      rec.last_check_date,
14:35:11 176  	      rec.cancel_date
14:35:11 177  	  );
14:35:11 178  	END LOOP;
14:35:11 179  
14:35:11 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
14:35:11 181  	SET
14:35:11 182  	  receipt = in_receipt,
14:35:11 183  	  status = in_status,
14:35:11 184  	  quantity = in_quantity,
14:35:11 185  	  product_id = in_product_id,
14:35:11 186  	  transaction_id = in_transaction_id,
14:35:11 187  	  purchase_date = in_purchase_date,
14:35:11 188  	  original_transaction_id = in_original_transaction_id,
14:35:11 189  	  original_purchase_date = in_original_purchase_date,
14:35:11 190  	  app_item_id = in_app_item_id,
14:35:11 191  	  version_external_id = in_version_external_id,
14:35:11 192  	  bid = in_bid,
14:35:11 193  	  bvrs = in_bvrs,
14:35:11 194  	  expires_date = in_expires_date,
14:35:11 195  	  update_date = var_current_date,
14:35:11 196  	  updated_by = in_updated_by,
14:35:11 197  	  last_check_date = var_current_date,
14:35:11 198  	  cancel_date = in_cancel_date
14:35:11 199  	WHERE
14:35:11 200  	  id = in_id
14:35:11 201  	;
14:35:11 202  
14:35:11 203  EXCEPTION
14:35:11 204  WHEN DUP_VAL_ON_INDEX THEN
14:35:11 205  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:11 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
14:35:11 207  WHEN OTHERS THEN
14:35:11 208  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 210  
14:35:11 211  END UPDATE_RECEIPT;
14:35:11 212  
14:35:11 213  PROCEDURE LINK_ITUNES_RECEIPT(
14:35:11 214  /*
14:35:11 215  Throws exceptions:
14:35:11 216  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 217  */
14:35:11 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
14:35:11 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:35:11 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
14:35:11 221  ) AS
14:35:11 222  -- VARIABLES
14:35:11 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
14:35:11 224  var_current_date	    DATE;
14:35:11 225  BEGIN
14:35:11 226  
14:35:11 227  	      SELECT
14:35:11 228  	  sysdate
14:35:11 229  	      INTO
14:35:11 230  	  var_current_date
14:35:11 231  	      FROM
14:35:11 232  	  dual
14:35:11 233  	      ;
14:35:11 234  
14:35:11 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
14:35:11 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ITUNES_RECEIPT_HISTORY
14:35:11 237  	      (
14:35:11 238  	    rec.id,
14:35:11 239  	    rec.subscription_id,
14:35:11 240  	    rec.receipt,
14:35:11 241  	    rec.status,
14:35:11 242  	    rec.quantity,
14:35:11 243  	    rec.product_id,
14:35:11 244  	    rec.transaction_id,
14:35:11 245  	    rec.purchase_date,
14:35:11 246  	    rec.original_transaction_id,
14:35:11 247  	    rec.original_purchase_date,
14:35:11 248  	    rec.app_item_id,
14:35:11 249  	    rec.version_external_id,
14:35:11 250  	    rec.bid,
14:35:11 251  	    rec.bvrs,
14:35:11 252  	    rec.expires_date,
14:35:11 253  	    rec.create_date,
14:35:11 254  	    rec.created_by,
14:35:11 255  	    rec.update_date,
14:35:11 256  	    rec.updated_by,
14:35:11 257  	    rec.last_check_date,
14:35:11 258  	    rec.cancel_date
14:35:11 259  	      );
14:35:11 260  	      END LOOP;
14:35:11 261  
14:35:11 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
14:35:11 263  		SET
14:35:11 264  		      subscription_id = in_subscription_id,
14:35:11 265  		      update_date = var_current_date,
14:35:11 266  	      updated_by = in_updated_by,
14:35:11 267  	      last_check_date = var_current_date
14:35:11 268  	      WHERE
14:35:11 269  		  id = in_id
14:35:11 270  	      ;
14:35:11 271  
14:35:11 272  	      EXCEPTION
14:35:11 273  	      WHEN DUP_VAL_ON_INDEX THEN
14:35:11 274  		PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:11 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
14:35:11 276  	      WHEN OTHERS THEN
14:35:11 277  		PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 279  END LINK_ITUNES_RECEIPT;
14:35:11 280  
14:35:11 281  
14:35:11 282  PROCEDURE MARK_RECEIPT_CHECKED(
14:35:11 283  /*
14:35:11 284  Throws exceptions:
14:35:11 285  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 286  */
14:35:11 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
14:35:11 288  ) AS
14:35:11 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
14:35:11 290  BEGIN
14:35:11 291  	UPDATE
14:35:11 292  	  CORE_OWNER.ITUNES_RECEIPT
14:35:11 293  	SET
14:35:11 294  	  last_check_date = sysdate
14:35:11 295  	WHERE
14:35:11 296  	  id = in_id
14:35:11 297  	;
14:35:11 298  EXCEPTION
14:35:11 299  WHEN OTHERS THEN
14:35:11 300  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 302  END MARK_RECEIPT_CHECKED;
14:35:11 303  
14:35:11 304  END PROCS_ITUNES_RECEIPT_CRU_V16;
14:35:11 305  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_LICENSE(
14:35:11   4  	out_license_id		    OUT LICENSE.ID%TYPE,
14:35:11   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
14:35:11   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
14:35:11   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
14:35:11   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
14:35:11   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
14:35:11  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
14:35:11  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
14:35:11  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
14:35:11  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
14:35:11  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
14:35:11  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
14:35:11  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
14:35:11  17  ) AS
14:35:11  18  -- VARIABLES
14:35:11  19  var_license_id LICENSE.ID%TYPE;
14:35:11  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11  21  var_date DATE := SYSDATE;
14:35:11  22  BEGIN
14:35:11  23  	IF in_license_id IS NULL THEN
14:35:11  24  	  SELECT
14:35:11  25  	    LCN_ID_SEQ.nextVal into var_license_id
14:35:11  26  	  FROM DUAL;
14:35:11  27  	ELSE
14:35:11  28  	  var_license_id := in_license_id;
14:35:11  29  	END IF;
14:35:11  30  	INSERT INTO
14:35:11  31  	  LICENSE (
14:35:11  32  	    ID,
14:35:11  33  	    LICENSE_STATUS_ID,
14:35:11  34  	    NEEDS_ENTITLEMENTS,
14:35:11  35  	    START_DATE,
14:35:11  36  	    OFFER_ID,
14:35:11  37  	    SUBSCRIPTION_ID,
14:35:11  38  	    INVOICE_ID,
14:35:11  39  	    END_DATE,
14:35:11  40  	    CREATE_DATE,
14:35:11  41  	    CREATED_BY,
14:35:11  42  	    UPDATE_DATE,
14:35:11  43  	    UPDATED_BY,
14:35:11  44  	    IS_EXTENSION,
14:35:11  45  	    CURRENT_OFFER_INDEX,
14:35:11  46  	    CURRENT_OFFER_RECURR_NUM,
14:35:11  47  	    ENTITLEMENT_END_DATE
14:35:11  48  	  ) VALUES (
14:35:11  49  	    var_license_id,
14:35:11  50  	    in_license_status_id,
14:35:11  51  	    in_needs_entitlements,
14:35:11  52  	    in_start_date,
14:35:11  53  	    in_offer_id,
14:35:11  54  	    in_subscription_id,
14:35:11  55  	    in_invoice_id,
14:35:11  56  	    in_end_date,
14:35:11  57  	    var_date,
14:35:11  58  	    in_created_by,
14:35:11  59  	    var_date,
14:35:11  60  	    in_created_by,
14:35:11  61  	    in_is_extension,
14:35:11  62  	    in_current_offer_index,
14:35:11  63  	    in_current_offer_recurr_num,
14:35:11  64  	    in_end_date
14:35:11  65  	  );
14:35:11  66  
14:35:11  67  	out_license_id := var_license_id;
14:35:11  68  END CREATE_LICENSE;
14:35:11  69  
14:35:11  70  /********************************************************************/
14:35:11  71  
14:35:11  72  PROCEDURE UPDATE_LICENSE (
14:35:11  73  	in_license_id		    IN LICENSE.ID%TYPE,
14:35:11  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
14:35:11  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
14:35:11  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
14:35:11  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
14:35:11  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
14:35:11  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
14:35:11  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
14:35:11  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
14:35:11  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
14:35:11  83  ) AS
14:35:11  84  BEGIN
14:35:11  85  	-- Create history
14:35:11  86  	PROCS_HISTORY_V16.CREATE_LICENSE_HISTORY(
14:35:11  87  	  in_license_id 	       => in_license_id,
14:35:11  88  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11  89  	);
14:35:11  90  
14:35:11  91  	UPDATE
14:35:11  92  	  LICENSE
14:35:11  93  	SET
14:35:11  94  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
14:35:11  95  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
14:35:11  96  	  START_DATE		   = NVL(in_start_date, START_DATE),
14:35:11  97  	  END_DATE		   = NVL(in_end_date, END_DATE),
14:35:11  98  	  UPDATE_DATE		   = SYSDATE,
14:35:11  99  	  UPDATED_BY		   = in_updated_by,
14:35:11 100  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
14:35:11 101  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
14:35:11 102  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
14:35:11 103  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE)
14:35:11 104  	WHERE
14:35:11 105  	  LICENSE.ID = in_license_id;
14:35:11 106  END UPDATE_LICENSE;
14:35:11 107  
14:35:11 108  END PROCS_LICENSE_CRU_V16;
14:35:11 109  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_LINE_ITEM (
14:35:11   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
14:35:11   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
14:35:11   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
14:35:11   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
14:35:11   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
14:35:11   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
14:35:11  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
14:35:11  11  ) AS
14:35:11  12  BEGIN
14:35:11  13  	IF inout_line_item_id IS NULL THEN
14:35:11  14  	  SELECT
14:35:11  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
14:35:11  16  	  FROM DUAL;
14:35:11  17  	END IF;
14:35:11  18  	INSERT INTO LINE_ITEM (
14:35:11  19  	  ID,
14:35:11  20  	  PRODUCT_OFFER_ID,
14:35:11  21  	  INVOICE_ID,
14:35:11  22  	  AMOUNT,
14:35:11  23  	  QUANTITY,
14:35:11  24  	  CREATE_DATE,
14:35:11  25  	  CREATED_BY,
14:35:11  26  	  DISCOUNT_AMOUNT,
14:35:11  27  	  TAXES_AMOUNT
14:35:11  28  	) VALUES (
14:35:11  29  	  inout_line_item_id,
14:35:11  30  	  in_product_offer_id,
14:35:11  31  	  in_invoice_id,
14:35:11  32  	  in_amount,
14:35:11  33  	  1, -- [REVU]: Deprecated. Ignore this field
14:35:11  34  	  SYSDATE,
14:35:11  35  	  in_created_by,
14:35:11  36  	  in_discount_amount,
14:35:11  37  	  in_taxes_amount
14:35:11  38  	);
14:35:11  39  END CREATE_LINE_ITEM;
14:35:11  40  
14:35:11  41  /******************************************************************************/
14:35:11  42  
14:35:11  43  PROCEDURE UPDATE_LINE_ITEM (
14:35:11  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
14:35:11  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
14:35:11  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
14:35:11  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
14:35:11  48  ) AS
14:35:11  49  BEGIN
14:35:11  50  	UPDATE
14:35:11  51  	  LINE_ITEM
14:35:11  52  	SET
14:35:11  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
14:35:11  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
14:35:11  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
14:35:11  56  	WHERE
14:35:11  57  	  LINE_ITEM.ID = in_line_item_id;
14:35:11  58  END UPDATE_LINE_ITEM;
14:35:11  59  
14:35:11  60  /******************************************************************************/
14:35:11  61  
14:35:11  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
14:35:11  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
14:35:11  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
14:35:11  65  ) AS
14:35:11  66  BEGIN
14:35:11  67  	INSERT INTO DISCOUNT_LINE_ITEM(
14:35:11  68  	  DISCOUNT_ID,
14:35:11  69  	  LINE_ITEM_ID
14:35:11  70  	) VALUES (
14:35:11  71  	  in_discount_id,
14:35:11  72  	  in_line_item_id
14:35:11  73  	);
14:35:11  74  END CREATE_DISCOUNT_LINE_ITEM;
14:35:11  75  
14:35:11  76  END PROCS_LINE_ITEMS_CRU_V16;
14:35:11  77  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
14:35:11   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
14:35:11   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
14:35:11   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:11   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
14:35:11   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
14:35:11   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
14:35:11  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
14:35:11  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
14:35:11  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:35:11  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
14:35:11  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
14:35:11  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
14:35:11  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:35:11  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
14:35:11  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
14:35:11  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
14:35:11  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
14:35:11  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
14:35:11  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
14:35:11  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
14:35:11  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
14:35:11  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
14:35:11  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
14:35:11  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
14:35:11  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
14:35:11  29  ) AS
14:35:11  30  -- VARIABLES
14:35:11  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
14:35:11  32  var_date DATE := SYSDATE;
14:35:11  33  BEGIN
14:35:11  34  	IF in_cpt_chargeback_act_id IS NULL THEN
14:35:11  35  	  SELECT
14:35:11  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
14:35:11  37  	  FROM DUAL;
14:35:11  38  	ELSE
14:35:11  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
14:35:11  40  	END IF;
14:35:11  41  	INSERT INTO
14:35:11  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
14:35:11  43  	    id,
14:35:11  44  	    rcn_ext_source_log_id,
14:35:11  45  	    record_type,
14:35:11  46  	    entity_type,
14:35:11  47  	    entity_number,
14:35:11  48  	    chargeback_amount_issuer,
14:35:11  49  	    prev_partial_representment,
14:35:11  50  	    presentment_currency,
14:35:11  51  	    chargeback_category,
14:35:11  52  	    status_flag,
14:35:11  53  	    sequence_number,
14:35:11  54  	    merchant_order_number,
14:35:11  55  	    account_number,
14:35:11  56  	    reason_code,
14:35:11  57  	    transaction_date,
14:35:11  58  	    chargeback_date,
14:35:11  59  	    activity_date,
14:35:11  60  	    chargeback_amount_action,
14:35:11  61  	    fee_amount,
14:35:11  62  	    usage_code,
14:35:11  63  	    mop_code,
14:35:11  64  	    authorization_date,
14:35:11  65  	    chargeback_due_date,
14:35:11  66  	    create_date,
14:35:11  67  	    created_by
14:35:11  68  	  ) VALUES (
14:35:11  69  	    var_cpt_chargeback_act_id,
14:35:11  70  	    in_ext_source_log_id,
14:35:11  71  	    in_record_type,
14:35:11  72  	    in_entity_type,
14:35:11  73  	    in_entity_number,
14:35:11  74  	    in_chargeback_amount_issuer,
14:35:11  75  	    in_prev_partial_repres,
14:35:11  76  	    in_presentment_currency,
14:35:11  77  	    in_chargeback_category,
14:35:11  78  	    in_status_flag,
14:35:11  79  	    in_sequence_number,
14:35:11  80  	    in_merchant_order_number,
14:35:11  81  	    in_account_number,
14:35:11  82  	    in_reason_code,
14:35:11  83  	    in_transaction_date,
14:35:11  84  	    in_chargeback_date,
14:35:11  85  	    in_activity_date,
14:35:11  86  	    in_chargeback_amount_action,
14:35:11  87  	    in_fee_amount,
14:35:11  88  	    in_usage_code,
14:35:11  89  	    in_mop_code,
14:35:11  90  	    in_authorization_date,
14:35:11  91  	    in_chargeback_due_date,
14:35:11  92  	    var_date,
14:35:11  93  	    in_created_by
14:35:11  94  	  );
14:35:11  95  
14:35:11  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
14:35:11  97  END CREATE_CPT_CHARGEBACK_ACT;
14:35:11  98  
14:35:11  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
14:35:11 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
14:35:11 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
14:35:11 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
14:35:11 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
14:35:11 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
14:35:11 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:35:11 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
14:35:11 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
14:35:11 108  ) AS
14:35:11 109  -- VARIABLES
14:35:11 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
14:35:11 111  var_date DATE := SYSDATE;
14:35:11 112  BEGIN
14:35:11 113  	IF in_ext_source_log_id IS NULL THEN
14:35:11 114  	  SELECT
14:35:11 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
14:35:11 116  	  FROM DUAL;
14:35:11 117  	ELSE
14:35:11 118  	  var_ext_source_log_id := in_ext_source_log_id;
14:35:11 119  	END IF;
14:35:11 120  	INSERT INTO
14:35:11 121  	  RCN_EXT_SOURCE_LOG (
14:35:11 122  	    id,
14:35:11 123  	    extraction_timestamp,
14:35:11 124  	    report_date,
14:35:11 125  	    report_generation_datetime,
14:35:11 126  	    record_type,
14:35:11 127  	    report_file_name,
14:35:11 128  	    create_date,
14:35:11 129  	    created_by
14:35:11 130  	  ) VALUES (
14:35:11 131  	    var_ext_source_log_id,
14:35:11 132  	    in_extraction_timestamp,
14:35:11 133  	    in_report_date,
14:35:11 134  	    in_report_gen_datetime,
14:35:11 135  	    in_record_type,
14:35:11 136  	    in_report_file_name,
14:35:11 137  	    var_date,
14:35:11 138  	    in_created_by
14:35:11 139  	  );
14:35:11 140  
14:35:11 141  	out_ext_source_log_id := var_ext_source_log_id;
14:35:11 142  END CREATE_EXT_SOURCE_LOG;
14:35:11 143  
14:35:11 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
14:35:11 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
14:35:11 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
14:35:11 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:11 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
14:35:11 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
14:35:11 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
14:35:11 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
14:35:11 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
14:35:11 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
14:35:11 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
14:35:11 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
14:35:11 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
14:35:11 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
14:35:11 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
14:35:11 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
14:35:11 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
14:35:11 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
14:35:11 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
14:35:11 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
14:35:11 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
14:35:11 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
14:35:11 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
14:35:11 167  ) AS
14:35:11 168  -- VARIABLES
14:35:11 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
14:35:11 170  var_date DATE := SYSDATE;
14:35:11 171  BEGIN
14:35:11 172  	IF in_cpt_service_charge_id IS NULL THEN
14:35:11 173  	  SELECT
14:35:11 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
14:35:11 175  	  FROM DUAL;
14:35:11 176  	ELSE
14:35:11 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
14:35:11 178  	END IF;
14:35:11 179  	INSERT INTO
14:35:11 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
14:35:11 181  	    id,
14:35:11 182  	    rcn_ext_source_log_id,
14:35:11 183  	    record_type,
14:35:11 184  	    category,
14:35:11 185  	    sub_category,
14:35:11 186  	    entity_type,
14:35:11 187  	    entity_number,
14:35:11 188  	    funds_transfer_inst_number,
14:35:11 189  	    secure_ba_number,
14:35:11 190  	    settlement_currency,
14:35:11 191  	    fee_schedule,
14:35:11 192  	    mop,
14:35:11 193  	    interchange_qualification,
14:35:11 194  	    fee_type_description,
14:35:11 195  	    action_type,
14:35:11 196  	    unit_quantity,
14:35:11 197  	    unit_fee,
14:35:11 198  	    amount,
14:35:11 199  	    percentage_rate,
14:35:11 200  	    total_charge,
14:35:11 201  	    create_date,
14:35:11 202  	    created_by
14:35:11 203  	  ) VALUES (
14:35:11 204  	    var_cpt_service_charge_id,
14:35:11 205  	    in_ext_source_log_id,
14:35:11 206  	    in_record_type,
14:35:11 207  	    in_category,
14:35:11 208  	    in_sub_category,
14:35:11 209  	    in_entity_type,
14:35:11 210  	    in_entity_number,
14:35:11 211  	    in_funds_trans_inst_number,
14:35:11 212  	    in_secure_ba_number,
14:35:11 213  	    in_settlement_currency,
14:35:11 214  	    in_fee_schedule,
14:35:11 215  	    in_mop,
14:35:11 216  	    in_interchange_qual,
14:35:11 217  	    in_fee_type_description,
14:35:11 218  	    in_action_type,
14:35:11 219  	    in_unit_quantity,
14:35:11 220  	    in_unit_fee,
14:35:11 221  	    in_amount,
14:35:11 222  	    in_percentage_rate,
14:35:11 223  	    in_total_charge,
14:35:11 224  	    var_date,
14:35:11 225  	    in_created_by
14:35:11 226  	  );
14:35:11 227  
14:35:11 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
14:35:11 229  END CREATE_CPT_SERVICE_CHARGE;
14:35:11 230  
14:35:11 231  PROCEDURE CREATE_CPT_EXCEPTION (
14:35:11 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
14:35:11 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
14:35:11 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:11 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
14:35:11 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
14:35:11 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
14:35:11 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
14:35:11 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
14:35:11 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
14:35:11 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
14:35:11 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
14:35:11 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:35:11 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:35:11 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
14:35:11 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
14:35:11 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
14:35:11 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
14:35:11 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
14:35:11 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
14:35:11 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
14:35:11 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
14:35:11 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
14:35:11 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
14:35:11 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
14:35:11 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
14:35:11 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
14:35:11 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
14:35:11 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
14:35:11 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
14:35:11 261  ) AS
14:35:11 262  -- VARIABLES
14:35:11 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
14:35:11 264  var_date DATE := SYSDATE;
14:35:11 265  BEGIN
14:35:11 266  	IF in_cpt_exception_id IS NULL THEN
14:35:11 267  	  SELECT
14:35:11 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
14:35:11 269  	  FROM DUAL;
14:35:11 270  	ELSE
14:35:11 271  	  var_cpt_exception_id := in_cpt_exception_id;
14:35:11 272  	END IF;
14:35:11 273  	INSERT INTO
14:35:11 274  	  RCN_CPT_EXCEPTION_DETAIL (
14:35:11 275  	    id,
14:35:11 276  	    rcn_ext_source_log_id,
14:35:11 277  	    record_type,
14:35:11 278  	    submission_date,
14:35:11 279  	    pid_number,
14:35:11 280  	    pid_short_name,
14:35:11 281  	    submission_number,
14:35:11 282  	    record_number,
14:35:11 283  	    entity_type,
14:35:11 284  	    entity_number,
14:35:11 285  	    presentment_currency,
14:35:11 286  	    merchant_order_number,
14:35:11 287  	    rdfi_number,
14:35:11 288  	    account_number,
14:35:11 289  	    expiration_date,
14:35:11 290  	    amount,
14:35:11 291  	    mop,
14:35:11 292  	    action_code,
14:35:11 293  	    auth_date,
14:35:11 294  	    auth_code,
14:35:11 295  	    auth_response_code,
14:35:11 296  	    trace_number,
14:35:11 297  	    consumer_country_code,
14:35:11 298  	    category,
14:35:11 299  	    mcc,
14:35:11 300  	    reject_code,
14:35:11 301  	    submission_status,
14:35:11 302  	    create_date,
14:35:11 303  	    created_by
14:35:11 304  	  ) VALUES (
14:35:11 305  	    var_cpt_exception_id,
14:35:11 306  	    in_ext_source_log_id,
14:35:11 307  	    in_record_type,
14:35:11 308  	    in_submission_date,
14:35:11 309  	    in_pid_number,
14:35:11 310  	    in_pid_short_name,
14:35:11 311  	    in_submission_number,
14:35:11 312  	    in_record_number,
14:35:11 313  	    in_entity_type,
14:35:11 314  	    in_entity_number,
14:35:11 315  	    in_presentment_currency,
14:35:11 316  	    in_merchant_order_number,
14:35:11 317  	    in_rdfi_number,
14:35:11 318  	    in_account_number,
14:35:11 319  	    in_expiration_date,
14:35:11 320  	    in_amount,
14:35:11 321  	    in_mop,
14:35:11 322  	    in_action_code,
14:35:11 323  	    in_auth_date,
14:35:11 324  	    in_auth_code,
14:35:11 325  	    in_auth_response_code,
14:35:11 326  	    in_trace_number,
14:35:11 327  	    in_consumer_country_code,
14:35:11 328  	    in_category,
14:35:11 329  	    in_mcc,
14:35:11 330  	    in_reject_code,
14:35:11 331  	    in_submission_status,
14:35:11 332  	    var_date,
14:35:11 333  	    in_created_by
14:35:11 334  	  );
14:35:11 335  
14:35:11 336  	out_cpt_exception_id := var_cpt_exception_id;
14:35:11 337  END CREATE_CPT_EXCEPTION;
14:35:11 338  
14:35:11 339  PROCEDURE CREATE_CPT_DEPOSIT (
14:35:11 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
14:35:11 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
14:35:11 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:11 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
14:35:11 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
14:35:11 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
14:35:11 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
14:35:11 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
14:35:11 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
14:35:11 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
14:35:11 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
14:35:11 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:35:11 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:35:11 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
14:35:11 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
14:35:11 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
14:35:11 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
14:35:11 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
14:35:11 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
14:35:11 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
14:35:11 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
14:35:11 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
14:35:11 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
14:35:11 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
14:35:11 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
14:35:11 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
14:35:11 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
14:35:11 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
14:35:11 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
14:35:11 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
14:35:11 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
14:35:11 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
14:35:11 372  ) AS
14:35:11 373  -- VARIABLES
14:35:11 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
14:35:11 375  var_date DATE := SYSDATE;
14:35:11 376  BEGIN
14:35:11 377  	IF in_cpt_deposit_id IS NULL THEN
14:35:11 378  	  SELECT
14:35:11 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
14:35:11 380  	  FROM DUAL;
14:35:11 381  	ELSE
14:35:11 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
14:35:11 383  	END IF;
14:35:11 384  	INSERT INTO
14:35:11 385  	  RCN_CPT_DEPOSIT_DETAIL (
14:35:11 386  	    id,
14:35:11 387  	    rcn_ext_source_log_id,
14:35:11 388  	    record_type,
14:35:11 389  	    submission_date,
14:35:11 390  	    pid_number,
14:35:11 391  	    pid_short_name,
14:35:11 392  	    submission_number,
14:35:11 393  	    record_number,
14:35:11 394  	    entity_type,
14:35:11 395  	    entity_number,
14:35:11 396  	    presentment_currency,
14:35:11 397  	    merchant_order_number,
14:35:11 398  	    rdfi_number,
14:35:11 399  	    account_number,
14:35:11 400  	    expiration_date,
14:35:11 401  	    amount,
14:35:11 402  	    mop,
14:35:11 403  	    action_code,
14:35:11 404  	    auth_date,
14:35:11 405  	    auth_code,
14:35:11 406  	    auth_response_code,
14:35:11 407  	    trace_number,
14:35:11 408  	    consumer_country_code,
14:35:11 409  	    mcc,
14:35:11 410  	    fee_code,
14:35:11 411  	    unit_fee,
14:35:11 412  	    percent_fee,
14:35:11 413  	    total_interchange_fee,
14:35:11 414  	    total_assessment_fee,
14:35:11 415  	    other_fee,
14:35:11 416  	    create_date,
14:35:11 417  	    created_by
14:35:11 418  	  ) VALUES (
14:35:11 419  	    var_cpt_deposit_id,
14:35:11 420  	    in_ext_source_log_id,
14:35:11 421  	    in_record_type,
14:35:11 422  	    in_submission_date,
14:35:11 423  	    in_pid_number,
14:35:11 424  	    in_pid_short_name,
14:35:11 425  	    in_submission_number,
14:35:11 426  	    in_record_number,
14:35:11 427  	    in_entity_type,
14:35:11 428  	    in_entity_number,
14:35:11 429  	    in_presentment_currency,
14:35:11 430  	    in_merchant_order_number,
14:35:11 431  	    in_rdfi_number,
14:35:11 432  	    in_account_number,
14:35:11 433  	    in_expiration_date,
14:35:11 434  	    in_amount,
14:35:11 435  	    in_mop,
14:35:11 436  	    in_action_code,
14:35:11 437  	    in_auth_date,
14:35:11 438  	    in_auth_code,
14:35:11 439  	    in_auth_response_code,
14:35:11 440  	    in_trace_number,
14:35:11 441  	    in_consumer_country_code,
14:35:11 442  	    in_mcc,
14:35:11 443  	    in_fee_code,
14:35:11 444  	    in_unit_fee,
14:35:11 445  	    in_percent_fee,
14:35:11 446  	    in_total_interchange_fee,
14:35:11 447  	    in_total_assessment_fee,
14:35:11 448  	    in_other_fee,
14:35:11 449  	    var_date,
14:35:11 450  	    in_created_by
14:35:11 451  	  );
14:35:11 452  
14:35:11 453  	out_cpt_deposit_id := var_cpt_deposit_id;
14:35:11 454  END CREATE_CPT_DEPOSIT;
14:35:11 455  
14:35:11 456  PROCEDURE CREATE_PP_SETTLEMENT (
14:35:11 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
14:35:11 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
14:35:11 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:11 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
14:35:11 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
14:35:11 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
14:35:11 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
14:35:11 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
14:35:11 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
14:35:11 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
14:35:11 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
14:35:11 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
14:35:11 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
14:35:11 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
14:35:11 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
14:35:11 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
14:35:11 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
14:35:11 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
14:35:11 475  ) AS
14:35:11 476  -- VARIABLES
14:35:11 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
14:35:11 478  var_date DATE := SYSDATE;
14:35:11 479  BEGIN
14:35:11 480  	IF in_pp_settlement_id IS NULL THEN
14:35:11 481  	  SELECT
14:35:11 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
14:35:11 483  	  FROM DUAL;
14:35:11 484  	ELSE
14:35:11 485  	  var_pp_settlement_id := in_pp_settlement_id;
14:35:11 486  	END IF;
14:35:11 487  	INSERT INTO
14:35:11 488  	  RCN_PP_SETTLEMENT (
14:35:11 489  	    id,
14:35:11 490  	    rcn_ext_source_log_id,
14:35:11 491  	    transaction_id,
14:35:11 492  	    invoice_id,
14:35:11 493  	    pp_ref_id,
14:35:11 494  	    pp_ref_id_type,
14:35:11 495  	    trans_event_code,
14:35:11 496  	    trans_init_date,
14:35:11 497  	    trans_comp_date,
14:35:11 498  	    trans_deb_or_cred,
14:35:11 499  	    gross_trans_amount,
14:35:11 500  	    gross_trans_currency,
14:35:11 501  	    fee_deb_or_cred,
14:35:11 502  	    fee_amount,
14:35:11 503  	    fee_currency,
14:35:11 504  	    custom_field,
14:35:11 505  	    create_date,
14:35:11 506  	    created_by
14:35:11 507  	  ) VALUES (
14:35:11 508  	    var_pp_settlement_id,
14:35:11 509  	    in_ext_source_log_id,
14:35:11 510  	    in_transaction_id,
14:35:11 511  	    in_invoice_id,
14:35:11 512  	    in_pp_ref_id,
14:35:11 513  	    in_pp_ref_id_type,
14:35:11 514  	    in_trans_event_code,
14:35:11 515  	    in_trans_init_date,
14:35:11 516  	    in_trans_comp_date,
14:35:11 517  	    in_trans_deb_or_cred,
14:35:11 518  	    in_gross_trans_amount,
14:35:11 519  	    in_gross_trans_currency,
14:35:11 520  	    in_fee_deb_or_cred,
14:35:11 521  	    in_fee_amount,
14:35:11 522  	    in_fee_currency,
14:35:11 523  	    in_custom_field,
14:35:11 524  	    var_date,
14:35:11 525  	    in_created_by
14:35:11 526  	  );
14:35:11 527  
14:35:11 528  	out_pp_settlement_id := var_pp_settlement_id;
14:35:11 529  END CREATE_PP_SETTLEMENT;
14:35:11 530  
14:35:11 531  PROCEDURE CREATE_PP_DISPUTE (
14:35:11 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
14:35:11 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
14:35:11 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:11 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
14:35:11 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
14:35:11 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
14:35:11 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
14:35:11 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
14:35:11 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
14:35:11 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
14:35:11 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
14:35:11 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
14:35:11 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
14:35:11 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
14:35:11 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
14:35:11 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
14:35:11 548  ) AS
14:35:11 549  -- VARIABLES
14:35:11 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
14:35:11 551  var_date DATE := SYSDATE;
14:35:11 552  BEGIN
14:35:11 553  	IF in_pp_dispute_id IS NULL THEN
14:35:11 554  	  SELECT
14:35:11 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
14:35:11 556  	  FROM DUAL;
14:35:11 557  	ELSE
14:35:11 558  	  var_pp_dispute_id := in_pp_dispute_id;
14:35:11 559  	END IF;
14:35:11 560  	INSERT INTO
14:35:11 561  	  RCN_PP_DISPUTE (
14:35:11 562  	    id,
14:35:11 563  	    rcn_ext_source_log_id,
14:35:11 564  	    dispute_type,
14:35:11 565  	    claimant_name,
14:35:11 566  	    claimant_email,
14:35:11 567  	    transaction_id,
14:35:11 568  	    trans_date,
14:35:11 569  	    disputed_amount,
14:35:11 570  	    disputed_amount_currency,
14:35:11 571  	    dispute_reason,
14:35:11 572  	    dispute_filing_date,
14:35:11 573  	    dispute_status,
14:35:11 574  	    dispute_case_id,
14:35:11 575  	    invoice_id,
14:35:11 576  	    create_date,
14:35:11 577  	    created_by
14:35:11 578  	  ) VALUES (
14:35:11 579  	    var_pp_dispute_id,
14:35:11 580  	    in_ext_source_log_id,
14:35:11 581  	    in_dispute_type,
14:35:11 582  	    in_claimant_name,
14:35:11 583  	    in_claimant_email,
14:35:11 584  	    in_transaction_id,
14:35:11 585  	    in_trans_date,
14:35:11 586  	    in_disputed_amount,
14:35:11 587  	    in_disputed_amount_currency,
14:35:11 588  	    in_dispute_reason,
14:35:11 589  	    in_dispute_filing_date,
14:35:11 590  	    in_dispute_status,
14:35:11 591  	    in_dispute_case_id,
14:35:11 592  	    in_invoice_id,
14:35:11 593  	    var_date,
14:35:11 594  	    in_created_by
14:35:11 595  	  );
14:35:11 596  
14:35:11 597  	out_pp_dispute_id := var_pp_dispute_id;
14:35:11 598  END CREATE_PP_DISPUTE;
14:35:11 599  
14:35:11 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
14:35:11 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
14:35:11 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
14:35:11 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:35:11 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
14:35:11 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
14:35:11 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
14:35:11 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
14:35:11 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
14:35:11 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
14:35:11 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
14:35:11 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
14:35:11 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
14:35:11 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
14:35:11 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
14:35:11 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
14:35:11 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
14:35:11 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
14:35:11 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
14:35:11 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
14:35:11 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
14:35:11 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
14:35:11 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
14:35:11 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
14:35:11 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
14:35:11 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
14:35:11 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
14:35:11 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
14:35:11 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
14:35:11 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
14:35:11 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
14:35:11 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
14:35:11 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
14:35:11 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
14:35:11 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
14:35:11 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
14:35:11 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
14:35:11 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
14:35:11 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
14:35:11 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
14:35:11 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
14:35:11 641  ) AS
14:35:11 642  -- VARIABLES
14:35:11 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
14:35:11 644  var_date DATE := SYSDATE;
14:35:11 645  BEGIN
14:35:11 646  	IF in_pp_trans_detail_id IS NULL THEN
14:35:11 647  	  SELECT
14:35:11 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
14:35:11 649  	  FROM DUAL;
14:35:11 650  	ELSE
14:35:11 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
14:35:11 652  	END IF;
14:35:11 653  	INSERT INTO
14:35:11 654  	  RCN_PP_TRANS_DETAIL (
14:35:11 655  	    id,
14:35:11 656  	    rcn_ext_source_log_id,
14:35:11 657  	    transaction_id,
14:35:11 658  	    invoice_id,
14:35:11 659  	    pp_ref_id,
14:35:11 660  	    trans_event_code,
14:35:11 661  	    trans_init_date,
14:35:11 662  	    trans_comp_date,
14:35:11 663  	    trans_deb_or_cred,
14:35:11 664  	    gross_trans_amount,
14:35:11 665  	    gross_trans_currency,
14:35:11 666  	    fee_deb_or_cred,
14:35:11 667  	    fee_amount,
14:35:11 668  	    fee_currency,
14:35:11 669  	    trans_status,
14:35:11 670  	    insurance_amount,
14:35:11 671  	    sales_tax_amount,
14:35:11 672  	    shipping_amount,
14:35:11 673  	    trans_subject,
14:35:11 674  	    trans_note,
14:35:11 675  	    payer_acct_id,
14:35:11 676  	    payer_addr_status,
14:35:11 677  	    item_name,
14:35:11 678  	    item_id,
14:35:11 679  	    option_1_name,
14:35:11 680  	    option_1_value,
14:35:11 681  	    option_2_name,
14:35:11 682  	    option_2_value,
14:35:11 683  	    auction_site,
14:35:11 684  	    auction_buyer_id,
14:35:11 685  	    auction_closing_date,
14:35:11 686  	    shipping_addr_line_1,
14:35:11 687  	    shipping_addr_line_2,
14:35:11 688  	    shipping_addr_city,
14:35:11 689  	    shipping_addr_state,
14:35:11 690  	    shipping_addr_zip,
14:35:11 691  	    shipping_addr_country,
14:35:11 692  	    custom_field,
14:35:11 693  	    create_date,
14:35:11 694  	    created_by
14:35:11 695  	  ) VALUES (
14:35:11 696  	    var_pp_trans_detail_id,
14:35:11 697  	    in_ext_source_log_id,
14:35:11 698  	    in_transaction_id,
14:35:11 699  	    in_invoice_id,
14:35:11 700  	    in_pp_ref_id,
14:35:11 701  	    in_trans_event_code,
14:35:11 702  	    in_trans_init_date,
14:35:11 703  	    in_trans_comp_date,
14:35:11 704  	    in_trans_deb_or_cred,
14:35:11 705  	    in_gross_trans_amount,
14:35:11 706  	    in_gross_trans_currency,
14:35:11 707  	    in_fee_deb_or_cred,
14:35:11 708  	    in_fee_amount,
14:35:11 709  	    in_fee_currency,
14:35:11 710  	    in_trans_status,
14:35:11 711  	    in_insurance_amount,
14:35:11 712  	    in_sales_tax_amount,
14:35:11 713  	    in_shipping_amount,
14:35:11 714  	    in_trans_subject,
14:35:11 715  	    in_trans_note,
14:35:11 716  	    in_payer_acct_id,
14:35:11 717  	    in_payer_addr_status,
14:35:11 718  	    in_item_name,
14:35:11 719  	    in_item_id,
14:35:11 720  	    in_option_1_name,
14:35:11 721  	    in_option_1_value,
14:35:11 722  	    in_option_2_name,
14:35:11 723  	    in_option_2_value,
14:35:11 724  	    in_auction_site,
14:35:11 725  	    in_auction_buyer_id,
14:35:11 726  	    in_auction_closing_date,
14:35:11 727  	    in_shipping_addr_line_1,
14:35:11 728  	    in_shipping_addr_line_2,
14:35:11 729  	    in_shipping_addr_city,
14:35:11 730  	    in_shipping_addr_state,
14:35:11 731  	    in_shipping_addr_zip,
14:35:11 732  	    in_shipping_addr_country,
14:35:11 733  	    in_custom_field,
14:35:11 734  	    var_date,
14:35:11 735  	    in_created_by
14:35:11 736  	  );
14:35:11 737  
14:35:11 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
14:35:11 739  END CREATE_PP_TRANS_DETAIL;
14:35:11 740  
14:35:11 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
14:35:11 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:35:11 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
14:35:11 744  ) AS
14:35:11 745  BEGIN
14:35:11 746  	DELETE FROM
14:35:11 747  	  RCN_EXT_SOURCE_LOG
14:35:11 748  	WHERE
14:35:11 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
14:35:11 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
14:35:11 751  END DELETE_EXT_SOURCE_LOG;
14:35:11 752  
14:35:11 753  PROCEDURE GET_EXT_SOURCE_LOG (
14:35:11 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:35:11 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
14:35:11 756  	out_result_set		 OUT SYS_REFCURSOR
14:35:11 757  ) AS
14:35:11 758  BEGIN
14:35:11 759  	OPEN out_result_set FOR
14:35:11 760  	SELECT * FROM
14:35:11 761  	  RCN_EXT_SOURCE_LOG
14:35:11 762  	WHERE
14:35:11 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
14:35:11 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
14:35:11 765  END GET_EXT_SOURCE_LOG;
14:35:11 766  
14:35:11 767  END PROCS_RECONCILIATION_CRU_V16;
14:35:11 768  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_SUBSCRIPTION(
14:35:11   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
14:35:11   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
14:35:11   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
14:35:11   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
14:35:11   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
14:35:11   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
14:35:11  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
14:35:11  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
14:35:11  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
14:35:11  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
14:35:11  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
14:35:11  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
14:35:11  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
14:35:11  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
14:35:11  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
14:35:11  19  ) AS
14:35:11  20  -- VARIABLES
14:35:11  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
14:35:11  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11  23  var_date DATE := SYSDATE;
14:35:11  24  BEGIN
14:35:11  25  	IF in_subscription_id IS NULL THEN
14:35:11  26  	  SELECT
14:35:11  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
14:35:11  28  	  FROM DUAL;
14:35:11  29  	ELSE
14:35:11  30  	  var_new_subscription_id := in_subscription_id;
14:35:11  31  	END IF;
14:35:11  32  	INSERT INTO SUBSCRIPTION (
14:35:11  33  	  ID,
14:35:11  34  	  SUSPEND_DATE,
14:35:11  35  	  ACCOUNT_ID,
14:35:11  36  	  PURCHASE_DATE,
14:35:11  37  	  OFFER_CHAIN_ID,
14:35:11  38  	  TERMINATION_DATE,
14:35:11  39  	  DAYS_REMAINING_ADJUSTMENT,
14:35:11  40  	  SCT_ID,
14:35:11  41  	  CREATE_DATE,
14:35:11  42  	  CREATED_BY,
14:35:11  43  	  UPDATE_DATE,
14:35:11  44  	  UPDATED_BY,
14:35:11  45  	  INSTRUMENT_TYPE_ID,
14:35:11  46  	  INSTRUMENT_ID,
14:35:11  47  	  SUBSCRIPTION_STATUS_ID,
14:35:11  48  	  CANCELLATION_DATE,
14:35:11  49  	  REACTIVATION_DATE
14:35:11  50  	) VALUES (
14:35:11  51  	  var_new_subscription_id,
14:35:11  52  	  in_suspend_date,
14:35:11  53  	  in_account_id,
14:35:11  54  	  in_purchase_date,
14:35:11  55  	  in_offer_chain_id,
14:35:11  56  	  in_termination_date,
14:35:11  57  	  in_days_remainning_ajustment,
14:35:11  58  	  in_sct_id,
14:35:11  59  	  var_date,
14:35:11  60  	  in_created_by,
14:35:11  61  	  var_date,
14:35:11  62  	  in_created_by,
14:35:11  63  	  in_instrument_type_id,
14:35:11  64  	  in_instrument_id,
14:35:11  65  	  in_subscription_status_id,
14:35:11  66  	  in_cancelation_date,
14:35:11  67  	  in_reactivation_date
14:35:11  68  	);
14:35:11  69  
14:35:11  70  	out_subscription_id := var_new_subscription_id;
14:35:11  71  END CREATE_SUBSCRIPTION;
14:35:11  72  
14:35:11  73  /******************************************************************************/
14:35:11  74  
14:35:11  75  PROCEDURE UPDATE_SUBSCRIPTION(
14:35:11  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
14:35:11  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
14:35:11  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
14:35:11  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
14:35:11  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
14:35:11  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
14:35:11  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
14:35:11  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:35:11  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
14:35:11  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
14:35:11  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
14:35:11  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
14:35:11  88  ) AS
14:35:11  89  BEGIN
14:35:11  90  	-- Create history
14:35:11  91  	PROCS_HISTORY_V16.CREATE_SUBSCRIPTION_HISTORY(
14:35:11  92  	  in_subscription_id	       => in_subscription_id,
14:35:11  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11  94  	);
14:35:11  95  
14:35:11  96  	UPDATE SUBSCRIPTION SET
14:35:11  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
14:35:11  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
14:35:11  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
14:35:11 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
14:35:11 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
14:35:11 102  	  UPDATE_DATE		    = SYSDATE,
14:35:11 103  	  UPDATED_BY		    = in_updated_by,
14:35:11 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
14:35:11 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
14:35:11 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
14:35:11 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
14:35:11 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
14:35:11 109  	WHERE
14:35:11 110  	  ID = in_subscription_id;
14:35:11 111  END UPDATE_SUBSCRIPTION;
14:35:11 112  
14:35:11 113  /******************************************************************************/
14:35:11 114  
14:35:11 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
14:35:11 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
14:35:11 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:35:11 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
14:35:11 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:35:11 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
14:35:11 121  ) AS
14:35:11 122  BEGIN
14:35:11 123  	IF inout_subscription_note_id IS NULL THEN
14:35:11 124  	  SELECT
14:35:11 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
14:35:11 126  	  FROM DUAL;
14:35:11 127  	END IF;
14:35:11 128  	INSERT INTO SUBSCRIPTION_NOTE (
14:35:11 129  	  ID,
14:35:11 130  	  AGENT_ID,
14:35:11 131  	  SUBSCRIPTION_ID,
14:35:11 132  	  NOTE,
14:35:11 133  	  CREATE_DATE,
14:35:11 134  	  CREATED_BY
14:35:11 135  	) VALUES (
14:35:11 136  	  inout_subscription_note_id,
14:35:11 137  	  in_agent_id,
14:35:11 138  	  in_subscription_id,
14:35:11 139  	  in_note,
14:35:11 140  	  SYSDATE,
14:35:11 141  	  in_created_by
14:35:11 142  	);
14:35:11 143  END CREATE_SUBSCRIPTION_NOTE;
14:35:11 144  
14:35:11 145  END PROCS_SUBSCRIPTION_CRU_V16;
14:35:11 146  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_TAX (
14:35:11   4  	inout_tax_id		 IN OUT NUMBER,
14:35:11   5  	in_tax_type_id		 IN NUMBER,
14:35:11   6  	in_calculated_amount	 IN NUMBER,
14:35:11   7  	in_created_by		 IN VARCHAR2,
14:35:11   8  	in_line_item_id 	 IN NUMBER,
14:35:11   9  	in_effective_rate	 IN VARCHAR2,
14:35:11  10  	in_taxable_amount	 IN NUMBER,
14:35:11  11  	in_tax_rule_id		 IN NUMBER,
14:35:11  12  	in_jurisdiction_level_id IN NUMBER,
14:35:11  13  	in_jurisdiction_name	 IN VARCHAR2,
14:35:11  14  	in_jurisdiction_id	 IN VARCHAR2,
14:35:11  15  	in_ext_tax_type 	 IN VARCHAR2,
14:35:11  16  	in_ext_result		 IN VARCHAR2,
14:35:11  17  	in_imposition_type	 IN VARCHAR2,
14:35:11  18  	in_imposition		 IN VARCHAR2
14:35:11  19  ) AS
14:35:11  20  var_date DATE := SYSDATE;
14:35:11  21  BEGIN
14:35:11  22  
14:35:11  23  	IF inout_tax_id IS NULL THEN
14:35:11  24  	  SELECT
14:35:11  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
14:35:11  26  	  FROM DUAL;
14:35:11  27  	END IF;
14:35:11  28  
14:35:11  29  	INSERT INTO TAX (
14:35:11  30  	  ID,
14:35:11  31  	  TAX_TYPE_ID,
14:35:11  32  	  CALCULATED_AMOUNT,
14:35:11  33  	  CREATE_DATE,
14:35:11  34  	  CREATED_BY,
14:35:11  35  	  LINE_ITEM_ID,
14:35:11  36  	  EFFECTIVE_RATE,
14:35:11  37  	  TAXABLE_AMOUNT,
14:35:11  38  	  TAX_RULE_ID,
14:35:11  39  	  JURISDICTION_LEVEL_ID,
14:35:11  40  	  JURISDICTION_NAME,
14:35:11  41  	  JURISDICTION_ID,
14:35:11  42  	  EXT_TAX_TYPE,
14:35:11  43  	  EXT_RESULT,
14:35:11  44  	  IMPOSITION_TYPE,
14:35:11  45  	  IMPOSITION
14:35:11  46  	) VALUES (
14:35:11  47  	  inout_tax_id,
14:35:11  48  	  in_tax_type_id,
14:35:11  49  	  in_calculated_amount,
14:35:11  50  	  var_date,
14:35:11  51  	  in_created_by,
14:35:11  52  	  in_line_item_id,
14:35:11  53  	  in_effective_rate,
14:35:11  54  	  in_taxable_amount,
14:35:11  55  	  in_tax_rule_id,
14:35:11  56  	  in_jurisdiction_level_id,
14:35:11  57  	  in_jurisdiction_name,
14:35:11  58  	  in_jurisdiction_id,
14:35:11  59  	  in_ext_tax_type,
14:35:11  60  	  in_ext_result,
14:35:11  61  	  in_imposition_type,
14:35:11  62  	  in_imposition
14:35:11  63  	);
14:35:11  64  
14:35:11  65  END CREATE_TAX;
14:35:11  66  
14:35:11  67  END PROCS_TAXES_CRU_V16;
14:35:11  68  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_TRANSACTION (
14:35:11   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
14:35:11   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
14:35:11   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
14:35:11   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
14:35:11   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
14:35:11   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
14:35:11  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:11  11  ) AS
14:35:11  12  -- VARIABLES
14:35:11  13  var_transaction_id TRANSACTION.ID%TYPE;
14:35:11  14  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11  15  var_date DATE := SYSDATE;
14:35:11  16  BEGIN
14:35:11  17  	IF in_transaction_id IS NULL THEN
14:35:11  18  	  SELECT
14:35:11  19  	    TRN_ID_SEQ.nextVal into var_transaction_id
14:35:11  20  	  FROM DUAL;
14:35:11  21  	ELSE
14:35:11  22  	  var_transaction_id := in_transaction_id;
14:35:11  23  	END IF;
14:35:11  24  	INSERT INTO
14:35:11  25  	  TRANSACTION (
14:35:11  26  	    ID,
14:35:11  27  	    TRANSACTION_STATUS_ID,
14:35:11  28  	    TRANSACTION_AMOUNT,
14:35:11  29  	    CREATE_DATE,
14:35:11  30  	    CREATED_BY,
14:35:11  31  	    UPDATE_DATE,
14:35:11  32  	    UPDATED_BY,
14:35:11  33  	    ORDER_ID,
14:35:11  34  	    IS_REFUND
14:35:11  35  	  ) VALUES (
14:35:11  36  	    var_transaction_id,
14:35:11  37  	    in_transaction_status_id,
14:35:11  38  	    in_transaction_amount,
14:35:11  39  	    var_date,
14:35:11  40  	    in_created_by,
14:35:11  41  	    var_date,
14:35:11  42  	    in_created_by,
14:35:11  43  	    in_order_id,
14:35:11  44  	    in_is_refund
14:35:11  45  	  );
14:35:11  46  
14:35:11  47  	out_transaction_id := var_transaction_id;
14:35:11  48  END CREATE_TRANSACTION;
14:35:11  49  
14:35:11  50  /*******************************************************************/
14:35:11  51  
14:35:11  52  PROCEDURE UPDATE_TRANSACTION (
14:35:11  53  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
14:35:11  54  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
14:35:11  55  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
14:35:11  56  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
14:35:11  57  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
14:35:11  58  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
14:35:11  59  ) AS
14:35:11  60  BEGIN
14:35:11  61  	-- Create history
14:35:11  62  	PROCS_HISTORY_V16.CREATE_TRANSACTION_HISTORY(
14:35:11  63  	  in_transaction_id	       => in_transaction_id,
14:35:11  64  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11  65  	);
14:35:11  66  	UPDATE
14:35:11  67  	  TRANSACTION
14:35:11  68  	SET
14:35:11  69  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
14:35:11  70  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
14:35:11  71  	  UPDATE_DATE		= SYSDATE,
14:35:11  72  	  UPDATED_BY		= in_updated_by,
14:35:11  73  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
14:35:11  74  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
14:35:11  75  	WHERE
14:35:11  76  	  ID = in_transaction_id;
14:35:11  77  END UPDATE_TRANSACTION;
14:35:11  78  
14:35:11  79  /*******************************************************************/
14:35:11  80  
14:35:11  81  PROCEDURE READ_TRANSACTION (
14:35:11  82  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:35:11  83  	out_result_set	  OUT SYS_REFCURSOR
14:35:11  84  ) AS
14:35:11  85  BEGIN
14:35:11  86  	OPEN out_result_set FOR
14:35:11  87  	SELECT
14:35:11  88  	  ID,
14:35:11  89  	  TRANSACTION_STATUS_ID,
14:35:11  90  	  TRANSACTION_AMOUNT,
14:35:11  91  	  CREATE_DATE,
14:35:11  92  	  CREATED_BY,
14:35:11  93  	  UPDATE_DATE,
14:35:11  94  	  UPDATED_BY,
14:35:11  95  	  ORDER_ID,
14:35:11  96  	  IS_REFUND,
14:35:11  97  	  IS_SETTLED
14:35:11  98  	FROM
14:35:11  99  	  TRANSACTION
14:35:11 100  	WHERE
14:35:11 101  	  ID = in_transaction_id;
14:35:11 102  END READ_TRANSACTION;
14:35:11 103  
14:35:11 104  /*******************************************************************/
14:35:11 105  
14:35:11 106  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
14:35:11 107  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
14:35:11 108  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
14:35:11 109  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
14:35:11 110  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:35:11 111  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
14:35:11 112  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
14:35:11 113  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
14:35:11 114  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
14:35:11 115  ) AS
14:35:11 116  BEGIN
14:35:11 117  	IF inout_transaction_attempt_id IS NULL THEN
14:35:11 118  	  SELECT
14:35:11 119  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
14:35:11 120  	  FROM DUAL;
14:35:11 121  	END IF;
14:35:11 122  	INSERT INTO TRANSACTION_ATTEMPT (
14:35:11 123  	  ID,
14:35:11 124  	  TRANSACTION_ID,
14:35:11 125  	  EXTERNAL_STATUS_CODE,
14:35:11 126  	  EXTERNAL_STATUS_MESSAGE,
14:35:11 127  	  CREATE_DATE,
14:35:11 128  	  CREATED_BY,
14:35:11 129  	  EXTERNAL_TRANSACTION_ID,
14:35:11 130  	  TRANSACTION_START_TIME,
14:35:11 131  	  TRANSACTION_ATTEMPT_STATUS_ID
14:35:11 132  	) VALUES (
14:35:11 133  	  inout_transaction_attempt_id,
14:35:11 134  	  in_transaction_id,
14:35:11 135  	  in_external_status_code,
14:35:11 136  	  in_external_status_message,
14:35:11 137  	  SYSDATE,
14:35:11 138  	  in_created_by,
14:35:11 139  	  in_external_transaction_id,
14:35:11 140  	  in_transaction_start_time,
14:35:11 141  	  in_status_id
14:35:11 142  	);
14:35:11 143  END;
14:35:11 144  
14:35:11 145  /*******************************************************************/
14:35:11 146  
14:35:11 147  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
14:35:11 148  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
14:35:11 149  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
14:35:11 150  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:35:11 151  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
14:35:11 152  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
14:35:11 153  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
14:35:11 154  ) AS
14:35:11 155  BEGIN
14:35:11 156  	UPDATE
14:35:11 157  	  TRANSACTION_ATTEMPT
14:35:11 158  	SET
14:35:11 159  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
14:35:11 160  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
14:35:11 161  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
14:35:11 162  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
14:35:11 163  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
14:35:11 164  	WHERE
14:35:11 165  	  ID = in_transaction_attempt_id;
14:35:11 166  END;
14:35:11 167  
14:35:11 168  /*******************************************************************/
14:35:11 169  
14:35:11 170  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:35:11 171  /*
14:35:11 172  Throws exceptions:
14:35:11 173  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 174  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
14:35:11 175  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 176  */
14:35:11 177  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:35:11 178  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:35:11 179  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:35:11 180  ) AS
14:35:11 181  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
14:35:11 182  -- EXCEPTIONS
14:35:11 183  BAD_TRANSACTION_ID EXCEPTION;
14:35:11 184  BEGIN
14:35:11 185  
14:35:11 186  	PROCS_HISTORY_V16.CREATE_TRANSACTION_HISTORY(
14:35:11 187  	  in_transaction_id	       => in_transaction_id,
14:35:11 188  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11 189  	);
14:35:11 190  
14:35:11 191  	UPDATE
14:35:11 192  	  TRANSACTION
14:35:11 193  	SET
14:35:11 194  	  TRANSACTION.ORDER_ID	 = in_order_id,
14:35:11 195  	  TRANSACTION.UPDATED_BY = in_updated_by,
14:35:11 196  	  TRANSACTION.UPDATE_DATE= SYSDATE
14:35:11 197  	WHERE
14:35:11 198  	  TRANSACTION.ID = in_transaction_id
14:35:11 199  	  AND TRANSACTION.ORDER_ID IS NULL;
14:35:11 200  
14:35:11 201  	IF SQL%ROWCOUNT = 0 THEN
14:35:11 202  	  RAISE BAD_TRANSACTION_ID;
14:35:11 203  	END IF;
14:35:11 204  EXCEPTION
14:35:11 205  WHEN BAD_TRANSACTION_ID THEN
14:35:11 206  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 207  	  SPROC_NAME, 'No such transaction');
14:35:11 208  END UPDATE_TRANSACTION_ORDER_ID;
14:35:11 209  
14:35:11 210  END PROCS_TRANSACTION_CRU_V16;
14:35:11 211  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_ADDRESS(
14:35:11   4  /*
14:35:11   5  Throws exceptions:
14:35:11   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11   7  */
14:35:11   8  	  out_address_id	OUT NUMBER,
14:35:11   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:35:11  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:35:11  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:35:11  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:35:11  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:11  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:35:11  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
14:35:11  16  ) AS
14:35:11  17  -- VARIABLES
14:35:11  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
14:35:11  19  -- EXCEPTIONS
14:35:11  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11  21  BEGIN
14:35:11  22  
14:35:11  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V16.CREATE_ADDRESS(
14:35:11  24  	  out_address_id      => out_address_id,
14:35:11  25  	  in_address_id       => null,
14:35:11  26  	  in_address1	      => in_address1,
14:35:11  27  	  in_address2	      => in_address2,
14:35:11  28  	  in_city	      => in_city,
14:35:11  29  	  in_state	      => in_state,
14:35:11  30  	  in_postal_code      => in_postal_code,
14:35:11  31  	  in_country	      => in_country,
14:35:11  32  	  in_created_by       => in_created_by
14:35:11  33  	);
14:35:11  34  
14:35:11  35  END CREATE_ADDRESS;
14:35:11  36  
14:35:11  37  PROCEDURE UPDATE_ADDRESS(
14:35:11  38  /*
14:35:11  39  Throws exceptions:
14:35:11  40  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11  41  */
14:35:11  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
14:35:11  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:35:11  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:35:11  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:35:11  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:35:11  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:11  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:35:11  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
14:35:11  50  ) AS
14:35:11  51  BEGIN
14:35:11  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V16.UPDATE_ADDRESS(
14:35:11  53  	  in_address_id 	=> in_address_id,
14:35:11  54  	  in_address1		=> in_address1,
14:35:11  55  	  in_address2		=> in_address2,
14:35:11  56  	  in_city		=> in_city,
14:35:11  57  	  in_state		=> in_state,
14:35:11  58  	  in_postal_code	=> in_postal_code,
14:35:11  59  	  in_country		=> in_country,
14:35:11  60  	  in_updated_by 	=> in_updated_by
14:35:11  61  	);
14:35:11  62  END UPDATE_ADDRESS;
14:35:11  63  
14:35:11  64  PROCEDURE GET_ADDRESS (
14:35:11  65  /*
14:35:11  66  Throws exceptions:
14:35:11  67  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11  68  */
14:35:11  69  	  in_id 		IN ADDRESS.ID%TYPE,
14:35:11  70  	  out_result_set	OUT SYS_REFCURSOR
14:35:11  71  ) AS
14:35:11  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
14:35:11  73  BEGIN
14:35:11  74  
14:35:11  75  OPEN out_result_set FOR
14:35:11  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
14:35:11  77  
14:35:11  78  END GET_ADDRESS;
14:35:11  79  
14:35:11  80  END PROCS_ADDRESS_V16;
14:35:11  81  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
14:35:11   4  	in_invoice_id		  IN NUMBER,
14:35:11   5  	in_adjustment_reason	  IN VARCHAR2,
14:35:11   6  	in_is_credit		  IN NUMBER,
14:35:11   7  	in_charge_id		  IN NUMBER,
14:35:11   8  	in_business_date	  IN DATE,
14:35:11   9  	in_created_by		  IN VARCHAR2,
14:35:11  10  	out_invoice_adjustment_id OUT NUMBER
14:35:11  11  ) AS
14:35:11  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
14:35:11  13  -- VARIABLES
14:35:11  14  var_current_date	    DATE := SYSDATE;
14:35:11  15  var_new_entity_id     NUMBER;
14:35:11  16  var_inv_adj_reason_id NUMBER;
14:35:11  17  -- EXCEPTIONS
14:35:11  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
14:35:11  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
14:35:11  20  BEGIN
14:35:11  21  
14:35:11  22  	IF in_is_credit != GLOBAL_CONSTANTS_V16.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:11  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
14:35:11  24  	END IF;
14:35:11  25  
14:35:11  26  	BEGIN
14:35:11  27  	  SELECT
14:35:11  28  	    ID into var_inv_adj_reason_id
14:35:11  29  	  FROM
14:35:11  30  	    INVOICE_ADJUSTMENT_REASON
14:35:11  31  	  WHERE
14:35:11  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
14:35:11  33  	  EXCEPTION
14:35:11  34  	    WHEN NO_DATA_FOUND THEN
14:35:11  35  	      RAISE DAB_ADJUSTMENT_REASON;
14:35:11  36  	END;
14:35:11  37  
14:35:11  38  	SELECT
14:35:11  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
14:35:11  40  	FROM
14:35:11  41  	  DUAL;
14:35:11  42  
14:35:11  43  	INSERT INTO INVOICE_ADJUSTMENT (
14:35:11  44  	  ID,
14:35:11  45  	  INVOICE_ID,
14:35:11  46  	  INVOICE_ADJUSTMENT_REASON_ID,
14:35:11  47  	  IS_CREDIT,
14:35:11  48  	  CHARGE_ID,
14:35:11  49  	  ADJUSTMENT_DATE,
14:35:11  50  	  CREATE_DATE,
14:35:11  51  	  CREATED_BY,
14:35:11  52  	  UPDATE_DATE,
14:35:11  53  	  UPDATED_BY
14:35:11  54  	)
14:35:11  55  	VALUES (
14:35:11  56  	  var_new_entity_id,
14:35:11  57  	  in_invoice_id,
14:35:11  58  	  var_inv_adj_reason_id,
14:35:11  59  	  in_is_credit,
14:35:11  60  	  in_charge_id,
14:35:11  61  	  in_business_date,
14:35:11  62  	  var_current_date,
14:35:11  63  	  in_created_by,
14:35:11  64  	  var_current_date,
14:35:11  65  	  in_created_by
14:35:11  66  	);
14:35:11  67  
14:35:11  68  	out_invoice_adjustment_id := var_new_entity_id;
14:35:11  69  
14:35:11  70  EXCEPTION
14:35:11  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
14:35:11  72  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:11  73  	  SPROC_NAME, 'Bad in_is_credit value');
14:35:11  74  WHEN DAB_ADJUSTMENT_REASON THEN
14:35:11  75  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:11  76  	  SPROC_NAME, 'Bad adjustment reason');
14:35:11  77  WHEN OTHERS THEN
14:35:11  78  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11  80  END CREATE_INVOICE_ADJUSTMENT;
14:35:11  81  
14:35:11  82  /******************************************************************************/
14:35:11  83  
14:35:11  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
14:35:11  85  	  in_invoice_id 	    IN NUMBER,
14:35:11  86  	  in_original_charge_id     IN NUMBER,
14:35:11  87  	  in_charge_id		    IN NUMBER,
14:35:11  88  	  in_updated_by 	    IN VARCHAR2
14:35:11  89  ) AS
14:35:11  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
14:35:11  91  -- VARIABLES
14:35:11  92  var_invoice_adjustment_id NUMBER;
14:35:11  93  -- EXCEPTIONS
14:35:11  94  BAD_CHARGE_ID  EXCEPTION;
14:35:11  95  BEGIN
14:35:11  96  
14:35:11  97  	BEGIN
14:35:11  98  	  SELECT
14:35:11  99  	    id into var_invoice_adjustment_id
14:35:11 100  	  FROM
14:35:11 101  	    INVOICE_ADJUSTMENT
14:35:11 102  	  WHERE INVOICE_ID = in_invoice_id
14:35:11 103  	  AND CHARGE_ID = in_original_charge_id;
14:35:11 104  	  EXCEPTION
14:35:11 105  	    WHEN NO_DATA_FOUND THEN
14:35:11 106  	      RAISE BAD_CHARGE_ID;
14:35:11 107  	END;
14:35:11 108  
14:35:11 109  	--create history
14:35:11 110  	PROCS_HISTORY_V16.CREATE_INVOICE_ADJ_HISTORY(
14:35:11 111  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
14:35:11 112  	  in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11 113  	);
14:35:11 114  
14:35:11 115  	UPDATE INVOICE_ADJUSTMENT
14:35:11 116  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
14:35:11 117  	WHERE ID = var_invoice_adjustment_id;
14:35:11 118  
14:35:11 119  EXCEPTION
14:35:11 120  WHEN BAD_CHARGE_ID THEN
14:35:11 121  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:11 122  	  SPROC_NAME, 'Bad charge id');
14:35:11 123  WHEN OTHERS THEN
14:35:11 124  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 125  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 126  END UPDATE_INVOICE_ADJUSTMENT;
14:35:11 127  
14:35:11 128  /******************************************************************************/
14:35:11 129  
14:35:11 130  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
14:35:11 131  	in_line_item_id 	    IN NUMBER,
14:35:11 132  	in_invoice_adjustment_id    IN NUMBER,
14:35:11 133  	in_amount		    IN NUMBER,
14:35:11 134  	in_tax			    IN NUMBER,
14:35:11 135  	in_discount		    IN NUMBER,
14:35:11 136  	in_created_by		    IN VARCHAR2,
14:35:11 137  	out_line_item_adjustment_id OUT NUMBER
14:35:11 138  ) AS
14:35:11 139  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
14:35:11 140  -- VARIABLES
14:35:11 141  var_current_date DATE := SYSDATE;
14:35:11 142  var_new_entity_id NUMBER;
14:35:11 143  BEGIN
14:35:11 144  
14:35:11 145  	SELECT
14:35:11 146  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
14:35:11 147  	FROM
14:35:11 148  	  DUAL;
14:35:11 149  
14:35:11 150  	INSERT INTO LINE_ITEM_ADJUSTMENT (
14:35:11 151  	  ID,
14:35:11 152  	  LINE_ITEM_ID,
14:35:11 153  	  INVOICE_ADJUSTMENT_ID,
14:35:11 154  	  AMOUNT,
14:35:11 155  	  TAX,
14:35:11 156  	  DISCOUNT,
14:35:11 157  	  CREATE_DATE,
14:35:11 158  	  CREATED_BY
14:35:11 159  	)
14:35:11 160  	VALUES (
14:35:11 161  	  var_new_entity_id,
14:35:11 162  	  in_line_item_id,
14:35:11 163  	  in_invoice_adjustment_id,
14:35:11 164  	  in_amount,
14:35:11 165  	  in_tax,
14:35:11 166  	  in_discount,
14:35:11 167  	  var_current_date,
14:35:11 168  	  in_created_by
14:35:11 169  	);
14:35:11 170  
14:35:11 171  	out_line_item_adjustment_id := var_new_entity_id;
14:35:11 172  
14:35:11 173  EXCEPTION
14:35:11 174  WHEN OTHERS THEN
14:35:11 175  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 176  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 177  END CREATE_LINE_ITEM_ADJUSTMENT;
14:35:11 178  
14:35:11 179  /******************************************************************************/
14:35:11 180  
14:35:11 181  PROCEDURE CREATE_TAX_ADJUSTMENT (
14:35:11 182  	in_tax_id		   IN NUMBER,
14:35:11 183  	in_line_item_adjustment_id IN NUMBER,
14:35:11 184  	in_amount		   IN NUMBER,
14:35:11 185  	in_created_by		   IN VARCHAR2,
14:35:11 186  	out_tax_adjustment_id	   OUT NUMBER
14:35:11 187  ) AS
14:35:11 188  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
14:35:11 189  -- VARIABLES
14:35:11 190  var_current_date DATE := SYSDATE;
14:35:11 191  var_new_entity_id NUMBER;
14:35:11 192  BEGIN
14:35:11 193  
14:35:11 194  	SELECT
14:35:11 195  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
14:35:11 196  	FROM
14:35:11 197  	  DUAL;
14:35:11 198  
14:35:11 199  	INSERT INTO TAX_ADJUSTMENT (
14:35:11 200  	  ID,
14:35:11 201  	  TAX_ID,
14:35:11 202  	  LINE_ITEM_ADJUSTMENT_ID,
14:35:11 203  	  AMOUNT,
14:35:11 204  	  CREATE_DATE,
14:35:11 205  	  CREATED_BY
14:35:11 206  	)
14:35:11 207  	VALUES (
14:35:11 208  	  var_new_entity_id,
14:35:11 209  	  in_tax_id,
14:35:11 210  	  in_line_item_adjustment_id,
14:35:11 211  	  in_amount,
14:35:11 212  	  var_current_date,
14:35:11 213  	  in_created_by
14:35:11 214  	);
14:35:11 215  
14:35:11 216  	out_tax_adjustment_id := var_new_entity_id;
14:35:11 217  
14:35:11 218  EXCEPTION
14:35:11 219  WHEN OTHERS THEN
14:35:11 220  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 222  END CREATE_TAX_ADJUSTMENT;
14:35:11 223  
14:35:11 224  /******************************************************************************/
14:35:11 225  
14:35:11 226  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
14:35:11 227  	in_discount_id		   NUMBER,
14:35:11 228  	in_line_item_id 	   NUMBER,
14:35:11 229  	in_line_item_adjustment_id IN NUMBER,
14:35:11 230  	in_amount		   IN NUMBER,
14:35:11 231  	in_created_by		   IN VARCHAR2,
14:35:11 232  	out_discount_li_id	   OUT NUMBER
14:35:11 233  ) AS
14:35:11 234  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
14:35:11 235  -- VARIABLES
14:35:11 236  var_current_date DATE := SYSDATE;
14:35:11 237  var_new_entity_id NUMBER;
14:35:11 238  BEGIN
14:35:11 239  
14:35:11 240  	SELECT
14:35:11 241  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
14:35:11 242  	FROM
14:35:11 243  	  DUAL;
14:35:11 244  
14:35:11 245  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
14:35:11 246  	  ID,
14:35:11 247  	  DISCOUNT_ID,
14:35:11 248  	  LINE_ITEM_ID,
14:35:11 249  	  LINE_ITEM_ADJUSTMENT_ID,
14:35:11 250  	  AMOUNT,
14:35:11 251  	  CREATE_DATE,
14:35:11 252  	  CREATED_BY
14:35:11 253  	)
14:35:11 254  	VALUES (
14:35:11 255  	  var_new_entity_id,
14:35:11 256  	  in_discount_id,
14:35:11 257  	  in_line_item_id,
14:35:11 258  	  in_line_item_adjustment_id,
14:35:11 259  	  in_amount,
14:35:11 260  	  var_current_date,
14:35:11 261  	  in_created_by
14:35:11 262  	);
14:35:11 263  
14:35:11 264  	out_discount_li_id := var_new_entity_id;
14:35:11 265  
14:35:11 266  EXCEPTION
14:35:11 267  WHEN OTHERS THEN
14:35:11 268  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 269  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 270  END CREATE_DISCOUNT_LI_ADJUSTMENT;
14:35:11 271  
14:35:11 272  END PROCS_ADJUSTMENTS_V16;
14:35:11 273  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE GET_SUB_ADX_INFO (
14:35:11   4  /*
14:35:11   5  Throws exceptions:
14:35:11   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11   7  */
14:35:11   8  	out_result_set	    OUT SYS_REFCURSOR,
14:35:11   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
14:35:11  10  ) AS
14:35:11  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
14:35:11  12  BEGIN
14:35:11  13  OPEN out_result_set FOR
14:35:11  14  SELECT /*+ FIRST_ROWS(5) */
14:35:11  15  	s.offer_chain_id,
14:35:11  16  	s.create_date,
14:35:11  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
14:35:11  18  	ocmd.value,
14:35:11  19  	a.group_id,
14:35:11  20  	s.id subscription_id
14:35:11  21  FROM
14:35:11  22  	account a,
14:35:11  23  	subscription s,
14:35:11  24  	offer_chain_meta_data ocmd,
14:35:11  25  	group_account g,
14:35:11  26  	subscription_share ss,
14:35:11  27  	account a2
14:35:11  28  WHERE
14:35:11  29  	s.account_id = a.id and
14:35:11  30  	s.offer_chain_id = ocmd.offer_chain_id and
14:35:11  31  	g.id = ss.group_account_id and
14:35:11  32  	ss.borrower_account_id = a2.id and
14:35:11  33  	s.id = g.subscription_id and
14:35:11  34  	ocmd.name = 'ADX_BUNDLE' and
14:35:11  35  	a2.group_id = in_group_id and
14:35:11  36  	rownum < 5
14:35:11  37  union all
14:35:11  38  SELECT /*+ FIRST_ROWS(5) */
14:35:11  39  	s.offer_chain_id,
14:35:11  40  	s.create_date,
14:35:11  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
14:35:11  42  	ocmd.value,
14:35:11  43  	a.group_id,
14:35:11  44  	s.id subscription_id
14:35:11  45  FROM
14:35:11  46  	account a,
14:35:11  47  	subscription s,
14:35:11  48  	offer_chain_meta_data ocmd
14:35:11  49  WHERE
14:35:11  50  	s.account_id = a.id and
14:35:11  51  	s.offer_chain_id = ocmd.offer_chain_id and
14:35:11  52  	ocmd.name = 'ADX_BUNDLE' and
14:35:11  53  	a.group_id = in_group_id and
14:35:11  54  	rownum < 5
14:35:11  55  ;
14:35:11  56  
14:35:11  57  END GET_SUB_ADX_INFO;
14:35:11  58  
14:35:11  59  END PROCS_ADX_V16;
14:35:11  60  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_AMAZON_SUB(
14:35:11   4  /*
14:35:11   5  Throws exceptions:
14:35:11   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11   7  */
14:35:11   8  	  out_id	      OUT NUMBER,
14:35:11   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
14:35:11  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
14:35:11  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
14:35:11  12  ) AS
14:35:11  13  -- VARIABLES
14:35:11  14  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
14:35:11  15  -- EXCEPTIONS
14:35:11  16  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11  17  BEGIN
14:35:11  18  
14:35:11  19  	CORE_OWNER.PROCS_AMAZON_CRU_V16.CREATE_AMAZON_SUB(
14:35:11  20  	  out_id	      =>  out_id,
14:35:11  21  	  in_subscription_id  =>  in_subscription_id,
14:35:11  22  	  in_amazon_id	      =>  in_amazon_id,
14:35:11  23  	  in_created_by       =>  in_created_by
14:35:11  24  	);
14:35:11  25  
14:35:11  26  END CREATE_AMAZON_SUB;
14:35:11  27  
14:35:11  28  PROCEDURE GET_ACTIVE_SUB_IDS (
14:35:11  29  /*
14:35:11  30  Throws exceptions:
14:35:11  31  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11  32  */
14:35:11  33  	out_result_set	    OUT SYS_REFCURSOR,
14:35:11  34  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
14:35:11  35  ) AS
14:35:11  36  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
14:35:11  37  BEGIN
14:35:11  38  OPEN out_result_set FOR
14:35:11  39  SELECT s.id
14:35:11  40  FROM subscription s, amazon_sub am
14:35:11  41  WHERE
14:35:11  42  	s.id = am.subscription_id
14:35:11  43  	and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:11  44  	and am.amazon_id = in_amazon_id
14:35:11  45  ;
14:35:11  46  
14:35:11  47  END GET_ACTIVE_SUB_IDS;
14:35:11  48  
14:35:11  49  PROCEDURE GET_ACTIVE_GROUP_IDS (
14:35:11  50  /*
14:35:11  51  Throws exceptions:
14:35:11  52  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11  53  */
14:35:11  54  	out_result_set	    OUT SYS_REFCURSOR,
14:35:11  55  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
14:35:11  56  ) AS
14:35:11  57  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
14:35:11  58  BEGIN
14:35:11  59  OPEN out_result_set FOR
14:35:11  60  SELECT distinct a.group_id id
14:35:11  61  FROM subscription s, amazon_sub am, account a
14:35:11  62  WHERE
14:35:11  63  	s.id = am.subscription_id
14:35:11  64  	and a.id = s.account_id
14:35:11  65  	and s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:11  66  	and am.amazon_id = in_amazon_id
14:35:11  67  ;
14:35:11  68  
14:35:11  69  END GET_ACTIVE_GROUP_IDS;
14:35:11  70  
14:35:11  71  END PROCS_AMAZON_V16;
14:35:11  72  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
14:35:11   2  
14:35:11   3  	/****************************************************************************/
14:35:11   4  
14:35:11   5  	PROCEDURE POPULATE_REQUEST_INFO(
14:35:11   6  	  in_hours_prior    IN	NUMBER,
14:35:11   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
14:35:11   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
14:35:11   9  	) AS
14:35:11  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
14:35:11  11  	var_start_date	    DATE := SYSDATE;
14:35:11  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
14:35:11  13  	var_request_file_id NUMBER := 0;
14:35:11  14  	var_license_count   NUMBER := 0;
14:35:11  15  	var_cc_update_count NUMBER := 0;
14:35:11  16  	BEGIN
14:35:11  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
14:35:11  18  	    INSERT INTO CC_REQUEST_FILE (ID,
14:35:11  19  					 FILE_NAME,
14:35:11  20  					 CC_REQUEST_FILE_STATUS,
14:35:11  21  					 CREATE_DATE,
14:35:11  22  					 CREATED_BY,
14:35:11  23  					 UPDATE_DATE,
14:35:11  24  					 UPDATED_BY)
14:35:11  25  					 VALUES (
14:35:11  26  					 var_request_file_id,
14:35:11  27  					 in_filename,
14:35:11  28  					 'NOT_CREATED',
14:35:11  29  					 var_start_date,
14:35:11  30  					 in_creator,
14:35:11  31  					 var_start_date,
14:35:11  32  					 in_creator);
14:35:11  33  
14:35:11  34  	   FOR record IN (SELECT
14:35:11  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
14:35:11  36  			  FROM
14:35:11  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
14:35:11  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
14:35:11  39  			  WHERE
14:35:11  40  			    s.INSTRUMENT_TYPE_ID	 = 1
14:35:11  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
14:35:11  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
14:35:11  43  			    AND l.LICENSE_STATUS_ID	 = 2
14:35:11  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
14:35:11  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
14:35:11  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
14:35:11  47  	   LOOP
14:35:11  48  	     var_license_count := 0;
14:35:11  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
14:35:11  50  
14:35:11  51  	     IF var_license_count = 0 THEN
14:35:11  52  		INSERT INTO CC_UPDATE (ID,
14:35:11  53  				       CREDIT_CARD_ID,
14:35:11  54  				       LICENSE_ID,
14:35:11  55  				       CC_UPDATE_STATUS,
14:35:11  56  				       CC_REQUEST_FILE_ID,
14:35:11  57  				       CREATE_DATE,
14:35:11  58  				       UPDATE_DATE,
14:35:11  59  				       CREATED_BY,
14:35:11  60  				       UPDATED_BY
14:35:11  61  				       ) VALUES (
14:35:11  62  				       CC_UPDATE_SEQ.NEXTVAL,
14:35:11  63  				       record.CREDIT_CARD_ID,
14:35:11  64  				       record.LICENSE_ID,
14:35:11  65  				       'NOT_ADDED_TO_FILE',
14:35:11  66  				       var_request_file_id,
14:35:11  67  				       var_start_date,
14:35:11  68  				       var_start_date,
14:35:11  69  				       in_creator,
14:35:11  70  				       in_creator
14:35:11  71  				       );
14:35:11  72  	     END IF;
14:35:11  73  	   END LOOP;
14:35:11  74  
14:35:11  75  	   SELECT COUNT(1) INTO var_cc_update_count
14:35:11  76  	   FROM CC_UPDATE
14:35:11  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
14:35:11  78  	   IF var_cc_update_count <= 0 THEN
14:35:11  79  	     UPDATE CC_REQUEST_FILE
14:35:11  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
14:35:11  81  	     WHERE ID = var_request_file_id;
14:35:11  82  	   END IF;
14:35:11  83  
14:35:11  84  	END POPULATE_REQUEST_INFO;
14:35:11  85  
14:35:11  86  	/****************************************************************************/
14:35:11  87  
14:35:11  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
14:35:11  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:35:11  90  	  in_start	     IN NUMBER,
14:35:11  91  	  in_end	     IN NUMBER,
14:35:11  92  	  out_result_set     OUT SYS_REFCURSOR
14:35:11  93  	) AS
14:35:11  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
14:35:11  95  	var_range_diff	    NUMBER := 0;
14:35:11  96  	var_upper_bond_diff NUMBER := 0;
14:35:11  97  	var_l_start	    NUMBER := 0;
14:35:11  98  	var_l_end	    NUMBER := 0;
14:35:11  99  	BEGIN
14:35:11 100  	  --Normalize the end points [START]
14:35:11 101  	  IF (in_start IS NULL OR in_start < 0) Then
14:35:11 102  	    var_l_start := 0;
14:35:11 103  	  ELSE
14:35:11 104  	    var_l_start := in_start;
14:35:11 105  	  END IF;
14:35:11 106  
14:35:11 107  	  IF (in_end IS NULL) Then
14:35:11 108  	    var_l_end := 500;
14:35:11 109  	  ELSE
14:35:11 110  	    var_l_end := in_end;
14:35:11 111  	  END IF;
14:35:11 112  
14:35:11 113  	  var_l_start := var_l_start + 1;
14:35:11 114  	  var_l_end   := var_l_end   + 1;
14:35:11 115  
14:35:11 116  	  var_range_diff  := var_l_end - var_l_start;
14:35:11 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
14:35:11 118  
14:35:11 119  	  IF (var_upper_bond_diff > 0) Then
14:35:11 120  	    var_l_end := var_l_end - var_upper_bond_diff;
14:35:11 121  	  END IF;
14:35:11 122  	  --Normalize the end points [END]
14:35:11 123  
14:35:11 124  	  OPEN out_result_set FOR
14:35:11 125  	    SELECT CHASE_PROFILE_ID FROM
14:35:11 126  	      (SELECT rownum rnum, q.* FROM
14:35:11 127  		 (SELECT
14:35:11 128  		    cc.CHASE_PROFILE_ID
14:35:11 129  		  FROM
14:35:11 130  		    CREDIT_CARD cc,
14:35:11 131  		    CC_UPDATE ccu
14:35:11 132  		  WHERE
14:35:11 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
14:35:11 134  		    AND ccu.CREDIT_CARD_ID = cc.id
14:35:11 135  		) Q
14:35:11 136  	      WHERE rownum <= var_l_end)
14:35:11 137  	    WHERE rnum >= var_l_Start;
14:35:11 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
14:35:11 139  
14:35:11 140  	/****************************************************************************/
14:35:11 141  
14:35:11 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
14:35:11 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
14:35:11 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
14:35:11 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
14:35:11 146  	)AS
14:35:11 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
14:35:11 148  	BEGIN
14:35:11 149  	  UPDATE CC_REQUEST_FILE
14:35:11 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
14:35:11 151  	      UPDATE_DATE = SYSDATE,
14:35:11 152  	      UPDATED_BY  = in_updated_by
14:35:11 153  	  WHERE ID = in_request_file_id;
14:35:11 154  	END UPDATE_REQUEST_FILE_STATUS;
14:35:11 155  
14:35:11 156  	/****************************************************************************/
14:35:11 157  
14:35:11 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
14:35:11 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:35:11 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:35:11 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
14:35:11 162  	) AS
14:35:11 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
14:35:11 164  	BEGIN
14:35:11 165  	  UPDATE CC_UPDATE
14:35:11 166  	  SET CC_UPDATE_STATUS = in_status,
14:35:11 167  	      UPDATE_DATE      = SYSDATE,
14:35:11 168  	      UPDATED_BY       = in_updated_by
14:35:11 169  	  WHERE
14:35:11 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
14:35:11 171  	END UPDATE_CC_REQUEST_STATUS;
14:35:11 172  
14:35:11 173  	/****************************************************************************/
14:35:11 174  
14:35:11 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
14:35:11 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
14:35:11 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
14:35:11 178  	  out_request_files   OUT SYS_REFCURSOR
14:35:11 179  	) AS
14:35:11 180  	var_older_than_hours NUMBER := in_older_than_hours;
14:35:11 181  	BEGIN
14:35:11 182  	 IF (var_older_than_hours IS NULL) THEN
14:35:11 183  	   var_older_than_hours := -288;
14:35:11 184  	 END IF;
14:35:11 185  
14:35:11 186  	 OPEN out_request_files FOR
14:35:11 187  	 SELECT
14:35:11 188  	   ID,
14:35:11 189  	   FILE_NAME
14:35:11 190  	 FROM
14:35:11 191  	   CC_REQUEST_FILE
14:35:11 192  	 WHERE
14:35:11 193  	   CC_REQUEST_FILE_STATUS = in_status
14:35:11 194  	 AND
14:35:11 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
14:35:11 196  	END REQUEST_FILES_BY_STATUS;
14:35:11 197  
14:35:11 198  	/****************************************************************************/
14:35:11 199  
14:35:11 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
14:35:11 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:35:11 202  	  out_count OUT NUMBER
14:35:11 203  	) AS
14:35:11 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
14:35:11 205  	BEGIN
14:35:11 206  	  SELECT COUNT(1) INTO out_count
14:35:11 207  	  FROM CC_UPDATE
14:35:11 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
14:35:11 209  	END COUNT_BY_REQUEST_FILE_ID;
14:35:11 210  
14:35:11 211  	/****************************************************************************/
14:35:11 212  
14:35:11 213  	PROCEDURE GET_CREDIT_CARD_LICENSE (
14:35:11 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
14:35:11 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
14:35:11 216  	  out_card_license     OUT SYS_REFCURSOR
14:35:11 217  	) AS
14:35:11 218  	BEGIN
14:35:11 219  	  OPEN out_card_license FOR
14:35:11 220  	  SELECT
14:35:11 221  	    cc.ID CREDIT_CARD_ID,
14:35:11 222  	    cc.CHASE_PROFILE_ID,
14:35:11 223  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
14:35:11 224  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
14:35:11 225  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
14:35:11 226  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
14:35:11 227  	    a.GROUP_ID,
14:35:11 228  	    u.LICENSE_ID,
14:35:11 229  	    u.ID CC_UPDATE_ID,
14:35:11 230  	    l.END_DATE LICENSE_END_DATE,
14:35:11 231  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
14:35:11 232  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf, ACCOUNT a, LICENSE l
14:35:11 233  	  WHERE cc.ID = u.CREDIT_CARD_ID
14:35:11 234  	  AND u.CC_REQUEST_FILE_ID = rf.ID
14:35:11 235  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
14:35:11 236  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
14:35:11 237  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
14:35:11 238  	  AND cc.ACCOUNT_ID = a.ID
14:35:11 239  	  AND u.LICENSE_ID = l.ID
14:35:11 240  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
14:35:11 241  	  AND SYSDATE BETWEEN l.START_DATE and l.END_DATE
14:35:11 242  	  ORDER BY cc.UPDATE_DATE DESC;
14:35:11 243  	END GET_CREDIT_CARD_LICENSE;
14:35:11 244  
14:35:11 245  	/****************************************************************************/
14:35:11 246  
14:35:11 247  	PROCEDURE UPDATE_CC_UPDATE(
14:35:11 248  	  in_id 	     IN CC_UPDATE.ID%TYPE,
14:35:11 249  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:35:11 250  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
14:35:11 251  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
14:35:11 252  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
14:35:11 253  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:35:11 254  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
14:35:11 255  	) AS
14:35:11 256  	BEGIN
14:35:11 257  	  UPDATE CC_UPDATE
14:35:11 258  	  SET CC_UPDATE_STATUS = in_status,
14:35:11 259  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
14:35:11 260  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
14:35:11 261  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
14:35:11 262  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
14:35:11 263  	  UPDATE_DATE = SYSDATE,
14:35:11 264  	  UPDATED_BY = in_updated_by
14:35:11 265  	  WHERE ID = in_id;
14:35:11 266  	END UPDATE_CC_UPDATE;
14:35:11 267  
14:35:11 268  	/****************************************************************************/
14:35:11 269  
14:35:11 270  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
14:35:11 271  	  in_id 	IN CC_UPDATE.ID%TYPE,
14:35:11 272  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:35:11 273  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
14:35:11 274  	) AS
14:35:11 275  	BEGIN
14:35:11 276  	  UPDATE CC_UPDATE
14:35:11 277  	  SET CC_UPDATE_STATUS = in_status,
14:35:11 278  	  UPDATE_DATE = SYSDATE,
14:35:11 279  	  UPDATED_BY = in_updated_by
14:35:11 280  	  WHERE ID = in_id;
14:35:11 281  	END UPDATE_CC_UPDATE_STATUS;
14:35:11 282  
14:35:11 283  	/****************************************************************************/
14:35:11 284  
14:35:11 285  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
14:35:11 286  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
14:35:11 287  	  out_request_file     OUT SYS_REFCURSOR
14:35:11 288  	) AS
14:35:11 289  	BEGIN
14:35:11 290  	  OPEN out_request_file FOR
14:35:11 291  	  SELECT ID, FILE_NAME
14:35:11 292  	  FROM CC_REQUEST_FILE
14:35:11 293  	  WHERE FILE_NAME = in_request_filename;
14:35:11 294  	END GET_REQUEST_FILE_BY_FILENAME;
14:35:11 295  
14:35:11 296  	/****************************************************************************/
14:35:11 297  
14:35:11 298  	PROCEDURE SUSPEND_CREDIT_CARD (
14:35:11 299  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
14:35:11 300  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
14:35:11 301  	) AS
14:35:11 302  	BEGIN
14:35:11 303  	  -- Create history
14:35:11 304  	  PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
14:35:11 305  	      in_credit_card_id 	   => in_credit_card_id,
14:35:11 306  	      in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11 307  	  );
14:35:11 308  
14:35:11 309  	  UPDATE CREDIT_CARD
14:35:11 310  	  SET UPDATE_DATE = SYSDATE,
14:35:11 311  	  UPDATED_BY = in_updated_by,
14:35:11 312  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
14:35:11 313  	  WHERE ID = in_credit_card_id;
14:35:11 314  	END SUSPEND_CREDIT_CARD;
14:35:11 315  
14:35:11 316  	/****************************************************************************/
14:35:11 317  
14:35:11 318  	PROCEDURE UPDATE_CREDIT_CARD (
14:35:11 319  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
14:35:11 320  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:35:11 321  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
14:35:11 322  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
14:35:11 323  	) AS
14:35:11 324  	BEGIN
14:35:11 325  	  -- Create history
14:35:11 326  	  PROCS_HISTORY_V16.CREATE_CREDIT_CARD_HISTORY(
14:35:11 327  	      in_credit_card_id 	   => in_credit_card_id,
14:35:11 328  	      in_system_activity_reason_id => GLOBAL_ENUMS_V16.SAC_SYSTEM_APPLIED_RULE
14:35:11 329  	  );
14:35:11 330  
14:35:11 331  	  UPDATE CREDIT_CARD
14:35:11 332  	  SET UPDATE_DATE = SYSDATE,
14:35:11 333  	  UPDATED_BY = in_updated_by,
14:35:11 334  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
14:35:11 335  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
14:35:11 336  	  WHERE ID = in_credit_card_id;
14:35:11 337  	END UPDATE_CREDIT_CARD;
14:35:11 338  
14:35:11 339  	/****************************************************************************/
14:35:11 340  
14:35:11 341  	PROCEDURE COMPLETABLE_REQUESTS (
14:35:11 342  	  out_request_files OUT SYS_REFCURSOR
14:35:11 343  	) AS
14:35:11 344  	BEGIN
14:35:11 345  	  OPEN out_request_files FOR
14:35:11 346  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
14:35:11 347  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
14:35:11 348  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
14:35:11 349  	  AND rf.ID = u.CC_REQUEST_FILE_ID
14:35:11 350  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
14:35:11 351  	  MINUS
14:35:11 352  	  SELECT rf.ID, rf.FILE_NAME
14:35:11 353  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
14:35:11 354  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
14:35:11 355  	  AND rf.ID = u.CC_REQUEST_FILE_ID
14:35:11 356  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
14:35:11 357  	END COMPLETABLE_REQUESTS;
14:35:11 358  
14:35:11 359  	/****************************************************************************/
14:35:11 360  
14:35:11 361  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
14:35:11 362  	  in_max_hours_before_report IN  NUMBER,
14:35:11 363  	  out_request_files	     OUT SYS_REFCURSOR
14:35:11 364  	) AS
14:35:11 365  	BEGIN
14:35:11 366  	  OPEN out_request_files FOR
14:35:11 367  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
14:35:11 368  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
14:35:11 369  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
14:35:11 370  	  AND rf.ID = u.CC_REQUEST_FILE_ID
14:35:11 371  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
14:35:11 372  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
14:35:11 373  	  MINUS
14:35:11 374  	  SELECT rf.ID, rf.FILE_NAME
14:35:11 375  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
14:35:11 376  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
14:35:11 377  	  AND rf.ID = u.CC_REQUEST_FILE_ID
14:35:11 378  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
14:35:11 379  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
14:35:11 380  	END COMPLETABLE_REQUESTS_W_FAILS;
14:35:11 381  
14:35:11 382  END PROCS_CUPY;
14:35:11 383  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.08
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE
14:35:11   2  PACKAGE BODY PROCS_ENTITLEMENT_V16 AS
14:35:11   3  
14:35:11   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
14:35:11   5  	  in_subscription_id IN NUMBER,
14:35:11   6  	  out_uri OUT VARCHAR2)
14:35:11   7  	AS
14:35:11   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
14:35:11   9  	  UNKNOWN_ERROR   EXCEPTION;
14:35:11  10  	BEGIN
14:35:11  11  	  SELECT
14:35:11  12  	    POMD.VALUE INTO out_uri
14:35:11  13  	  FROM
14:35:11  14  	     OFFER_PRODUCT_OFFERING OPO,
14:35:11  15  	     PRODUCT_OFFERING PO,
14:35:11  16  	     OFFER_OFFER_CHAIN OOC,
14:35:11  17  	     SUBSCRIPTION S,
14:35:11  18  	     LICENSE LL,
14:35:11  19  	     PRODUCT_OFFERING_META_DATA POMD
14:35:11  20  	  WHERE
14:35:11  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
14:35:11  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
14:35:11  23  	     S.ID = in_subscription_id AND
14:35:11  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
14:35:11  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
14:35:11  26  	     PO.CAPABILITY_ID = 1 AND
14:35:11  27  	     S.ID = LL.SUBSCRIPTION_ID AND
14:35:11  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
14:35:11  29  	     NAME = 'entitlement_uri' AND
14:35:11  30  	     rownum < 2;
14:35:11  31  	EXCEPTION
14:35:11  32  	  WHEN OTHERS THEN
14:35:11  33  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
14:35:11  36  
14:35:11  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
14:35:11  38  	  in_group_id	 IN  NUMBER,
14:35:11  39  	  out_result_set OUT SYS_REFCURSOR)
14:35:11  40  	AS
14:35:11  41  	  -- CONSTANTS
14:35:11  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
14:35:11  43  	  -- EXCEPTIONS
14:35:11  44  	  NOT_FOUND	  EXCEPTION;
14:35:11  45  	  UNKNOWN_ERROR   EXCEPTION;
14:35:11  46  	  -- VARIABLES
14:35:11  47  	  var_subs	  SYS_REFCURSOR;
14:35:11  48  	BEGIN
14:35:11  49  	  OPEN out_result_set FOR
14:35:11  50  
14:35:11  51  	SELECT
14:35:11  52  	  C.CODE NAME,
14:35:11  53  	  C.DESCRIPTION,
14:35:11  54  	  0 INHERITED,
14:35:11  55  	  C.SHAREABLE,
14:35:11  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
14:35:11  57  	FROM
14:35:11  58  	  SUBSCRIPTION SB
14:35:11  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
14:35:11  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
14:35:11  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
14:35:11  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
14:35:11  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
14:35:11  64  	WHERE
14:35:11  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
14:35:11  66  	  AND LIC.START_DATE <= SYSDATE
14:35:11  67  	  AND AC.GROUP_ID = in_group_id
14:35:11  68  	GROUP BY
14:35:11  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
14:35:11  70  UNION ALL
14:35:11  71  	SELECT
14:35:11  72  	  C.CODE NAME,
14:35:11  73  	  C.DESCRIPTION,
14:35:11  74  	  1 INHERITED,
14:35:11  75  	  C.SHAREABLE,
14:35:11  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
14:35:11  77  	FROM
14:35:11  78  	  ACCOUNT BORROWER,
14:35:11  79  	  SUBSCRIPTION S,
14:35:11  80  	  LICENSE LIC,
14:35:11  81  	  OFFER_PRODUCT_OFFERING OPO,
14:35:11  82  	  PRODUCT_OFFERING PO,
14:35:11  83  	  CAPABILITY C,
14:35:11  84  	  GROUP_ACCOUNT GA,
14:35:11  85  	  SUBSCRIPTION_SHARE SS
14:35:11  86  	WHERE
14:35:11  87  	  BORROWER.GROUP_ID = in_group_id
14:35:11  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
14:35:11  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
14:35:11  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
14:35:11  91  	  AND PO.CAPABILITY_ID = C.ID
14:35:11  92  	  AND GA.SUBSCRIPTION_ID = S.ID
14:35:11  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
14:35:11  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
14:35:11  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
14:35:11  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
14:35:11  97  	  AND C.SHAREABLE = 1
14:35:11  98  	GROUP BY
14:35:11  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
14:35:11 100  
14:35:11 101  	EXCEPTION
14:35:11 102  	  WHEN OTHERS THEN
14:35:11 103  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 105  	END GET_ALL_ENTITLEMENTS;
14:35:11 106  
14:35:11 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
14:35:11 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:11 109  	  out_result_set OUT SYS_REFCURSOR)
14:35:11 110  	AS
14:35:11 111  	  -- CONSTANTS
14:35:11 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
14:35:11 113  	  -- EXCEPTIONS
14:35:11 114  	  NOT_FOUND	  EXCEPTION;
14:35:11 115  	  UNKNOWN_ERROR   EXCEPTION;
14:35:11 116  	  -- VARIABLES
14:35:11 117  	  var_subs	  SYS_REFCURSOR;
14:35:11 118  	BEGIN
14:35:11 119  	  OPEN out_result_set FOR
14:35:11 120  
14:35:11 121  	      SELECT
14:35:11 122  		c.code NAME,
14:35:11 123  		C.DESCRIPTION,
14:35:11 124  		0 INHERITED,
14:35:11 125  		C.SHAREABLE,
14:35:11 126  		sysdate as EXPIRES
14:35:11 127  	      FROM
14:35:11 128  		offer_offer_chain ooc,
14:35:11 129  		offer o,
14:35:11 130  		offer_product_offering opo,
14:35:11 131  		product_offering po,
14:35:11 132  		capability c
14:35:11 133  	      WHERE
14:35:11 134  		o.id = ooc.offer_id AND
14:35:11 135  		opo.offer_id = o.id AND
14:35:11 136  		po.id = opo.product_offering_id AND
14:35:11 137  		c.id = po.capability_id AND
14:35:11 138  		c.id !=0 AND
14:35:11 139  		ooc.offer_chain_id =
14:35:11 140  		(SELECT
14:35:11 141  		    ocmd.offer_chain_id
14:35:11 142  		  FROM
14:35:11 143  		      offer_chain_meta_data ocmd
14:35:11 144  		  WHERE
14:35:11 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
14:35:11 146  		      ocmd.value = in_product_id AND
14:35:11 147  		      rownum < 2
14:35:11 148  		)
14:35:11 149  	      ;
14:35:11 150  
14:35:11 151  	EXCEPTION
14:35:11 152  	  WHEN OTHERS THEN
14:35:11 153  	    PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 155  	END GET_ITUNES_ENTITLEMENTS;
14:35:11 156  
14:35:11 157  END PROCS_ENTITLEMENT_V16;
14:35:11 158  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE CREATE_ADDRESS_HISTORY(
14:35:11   4  	in_address_id		     IN NUMBER,
14:35:11   5  	in_system_activity_reason_id IN NUMBER
14:35:11   6  ) AS
14:35:11   7  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
14:35:11   8  -- VARIABLES
14:35:11   9  var_address1    ADDRESS.ADDRESS1%TYPE;
14:35:11  10  var_address2    ADDRESS.ADDRESS2%TYPE;
14:35:11  11  var_city	      ADDRESS.CITY%TYPE;
14:35:11  12  var_state       ADDRESS.STATE%TYPE;
14:35:11  13  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
14:35:11  14  var_country     ADDRESS.COUNTRY%TYPE;
14:35:11  15  var_created_by  ADDRESS.CREATED_BY%TYPE;
14:35:11  16  var_create_date ADDRESS.CREATE_DATE%TYPE;
14:35:11  17  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
14:35:11  18  var_update_date ADDRESS.UPDATE_DATE%TYPE;
14:35:11  19  -- EXCEPTIONS
14:35:11  20  BAD_ADDRESS_ID	     EXCEPTION;
14:35:11  21  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:35:11  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11  23  BEGIN
14:35:11  24  
14:35:11  25  	BEGIN
14:35:11  26  	  SELECT
14:35:11  27  	    ADDRESS.ADDRESS1,
14:35:11  28  	    ADDRESS.ADDRESS2,
14:35:11  29  	    ADDRESS.CITY,
14:35:11  30  	    ADDRESS.STATE,
14:35:11  31  	    ADDRESS.POSTAL_CODE,
14:35:11  32  	    ADDRESS.COUNTRY,
14:35:11  33  	    ADDRESS.CREATED_BY,
14:35:11  34  	    ADDRESS.CREATE_DATE,
14:35:11  35  	    ADDRESS.UPDATED_BY,
14:35:11  36  	    ADDRESS.UPDATE_DATE
14:35:11  37  	    into
14:35:11  38  	    var_address1,
14:35:11  39  	    var_address2,
14:35:11  40  	    var_city,
14:35:11  41  	    var_state,
14:35:11  42  	    var_postal_code,
14:35:11  43  	    var_country,
14:35:11  44  	    var_created_by,
14:35:11  45  	    var_create_date,
14:35:11  46  	    var_updated_by,
14:35:11  47  	    var_update_date
14:35:11  48  	  FROM
14:35:11  49  	    ADDRESS
14:35:11  50  	  WHERE
14:35:11  51  	    ADDRESS.ID = in_address_id;
14:35:11  52  	  EXCEPTION
14:35:11  53  	    WHEN NO_DATA_FOUND THEN
14:35:11  54  	      RAISE BAD_ADDRESS_ID;
14:35:11  55  	END;
14:35:11  56  
14:35:11  57  	BEGIN
14:35:11  58  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ADDRESS_HISTORY(
14:35:11  59  	    in_address_id,
14:35:11  60  	    in_system_activity_reason_id,
14:35:11  61  	    var_address1,
14:35:11  62  	    var_address2,
14:35:11  63  	    var_city,
14:35:11  64  	    var_state,
14:35:11  65  	    var_postal_code,
14:35:11  66  	    var_country,
14:35:11  67  	    var_created_by,
14:35:11  68  	    var_create_date,
14:35:11  69  	    var_updated_by,
14:35:11  70  	    var_update_date
14:35:11  71  	  );
14:35:11  72  	  EXCEPTION
14:35:11  73  	    WHEN OTHERS THEN
14:35:11  74  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11  75  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11  76  	END;
14:35:11  77  
14:35:11  78  EXCEPTION
14:35:11  79  WHEN BAD_ADDRESS_ID THEN
14:35:11  80  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11  81  	  SPROC_NAME, 'Bad recipientAddress id');
14:35:11  82  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11  83  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11  84  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11  85  WHEN OTHERS THEN
14:35:11  86  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  87  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11  88  END CREATE_ADDRESS_HISTORY;
14:35:11  89  
14:35:11  90  /********************************************************************/
14:35:11  91  
14:35:11  92  PROCEDURE CREATE_ACCOUNT_HISTORY(
14:35:11  93  	in_account_id		     IN NUMBER,
14:35:11  94  	in_system_activity_reason_id IN NUMBER
14:35:11  95  ) AS
14:35:11  96  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
14:35:11  97  -- VARIABLES
14:35:11  98  var_account_status_id  NUMBER;
14:35:11  99  var_suspend_date	     DATE;
14:35:11 100  var_group_id	     NUMBER;
14:35:11 101  var_instrument_type_id NUMBER;
14:35:11 102  var_instrument_id      NUMBER;
14:35:11 103  var_updated_by	     VARCHAR2(255);
14:35:11 104  var_update_date	     DATE;
14:35:11 105  -- EXCEPTIONS
14:35:11 106  BAD_ACCOUNT_ID	     EXCEPTION;
14:35:11 107  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:35:11 108  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11 109  BEGIN
14:35:11 110  
14:35:11 111  	BEGIN
14:35:11 112  	  SELECT
14:35:11 113  	    ACCOUNT.ACCOUNT_STATUS_ID,
14:35:11 114  	    ACCOUNT.GROUP_ID,
14:35:11 115  	    ACCOUNT.INSTRUMENT_TYPE_ID,
14:35:11 116  	    ACCOUNT.INSTRUMENT_TYPE_ID,
14:35:11 117  	    ACCOUNT.UPDATED_BY,
14:35:11 118  	    ACCOUNT.UPDATE_DATE
14:35:11 119  	    into
14:35:11 120  	    var_account_status_id,
14:35:11 121  	    var_group_id,
14:35:11 122  	    var_instrument_type_id,
14:35:11 123  	    var_instrument_id,
14:35:11 124  	    var_updated_by,
14:35:11 125  	    var_update_date
14:35:11 126  	  FROM
14:35:11 127  	    ACCOUNT
14:35:11 128  	  WHERE
14:35:11 129  	    ACCOUNT.ID = in_account_id;
14:35:11 130  	  EXCEPTION
14:35:11 131  	    WHEN NO_DATA_FOUND THEN
14:35:11 132  	      RAISE BAD_ACCOUNT_ID;
14:35:11 133  	END;
14:35:11 134  
14:35:11 135  	BEGIN
14:35:11 136  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_ACCOUNT_HISTORY(
14:35:11 137  	    in_account_id,
14:35:11 138  	    var_suspend_date,
14:35:11 139  	    var_group_id,
14:35:11 140  	    var_updated_by,
14:35:11 141  	    var_update_date,
14:35:11 142  	    in_system_activity_reason_id,
14:35:11 143  	    var_account_status_id,
14:35:11 144  	    var_instrument_type_id,
14:35:11 145  	    var_instrument_id
14:35:11 146  	  );
14:35:11 147  	  EXCEPTION
14:35:11 148  	    WHEN OTHERS THEN
14:35:11 149  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 150  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 151  	END;
14:35:11 152  
14:35:11 153  EXCEPTION
14:35:11 154  WHEN BAD_ACCOUNT_ID THEN
14:35:11 155  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 156  	  SPROC_NAME, 'Bad account id');
14:35:11 157  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 158  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 159  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 160  WHEN OTHERS THEN
14:35:11 161  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 163  END CREATE_ACCOUNT_HISTORY;
14:35:11 164  
14:35:11 165  /********************************************************************/
14:35:11 166  
14:35:11 167  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
14:35:11 168  /*
14:35:11 169  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 170  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 171  */
14:35:11 172  	in_subscription_id	     IN NUMBER,
14:35:11 173  	in_system_activity_reason_id IN NUMBER
14:35:11 174  ) AS
14:35:11 175  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
14:35:11 176  -- VARIABLES
14:35:11 177  var_account_id		    NUMBER;
14:35:11 178  var_purchase_date 	    DATE;
14:35:11 179  var_offer_chain_id	    NUMBER;
14:35:11 180  var_suspend_date		    DATE;
14:35:11 181  var_termination_date	    DATE;
14:35:11 182  var_days_ramaining_adjustment NUMBER;
14:35:11 183  var_sct_id		    NUMBER;
14:35:11 184  var_updated_by		    VARCHAR2(255);
14:35:11 185  var_update_date		    DATE;
14:35:11 186  -- EXCEPTIONS
14:35:11 187  BAD_SUBSCRIPTION_ID    EXCEPTION;
14:35:11 188  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:35:11 189  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11 190  BEGIN
14:35:11 191  
14:35:11 192  	BEGIN
14:35:11 193  	  SELECT
14:35:11 194  	    SUBSCRIPTION.account_id,
14:35:11 195  	    SUBSCRIPTION.PURCHASE_DATE,
14:35:11 196  	    SUBSCRIPTION.OFFER_CHAIN_ID,
14:35:11 197  	    SUBSCRIPTION.SUSPEND_DATE,
14:35:11 198  	    SUBSCRIPTION.TERMINATION_DATE,
14:35:11 199  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
14:35:11 200  	    SUBSCRIPTION.SCT_ID,
14:35:11 201  	    SUBSCRIPTION.UPDATED_BY,
14:35:11 202  	    SUBSCRIPTION.UPDATE_DATE
14:35:11 203  	    into
14:35:11 204  	    var_account_id,
14:35:11 205  	    var_purchase_date,
14:35:11 206  	    var_offer_chain_id,
14:35:11 207  	    var_suspend_date,
14:35:11 208  	    var_termination_date,
14:35:11 209  	    var_days_ramaining_adjustment,
14:35:11 210  	    var_sct_id,
14:35:11 211  	    var_updated_by,
14:35:11 212  	    var_update_date
14:35:11 213  	  FROM
14:35:11 214  	    SUBSCRIPTION
14:35:11 215  	  WHERE
14:35:11 216  	    SUBSCRIPTION.ID = in_subscription_id;
14:35:11 217  	  EXCEPTION
14:35:11 218  	    WHEN NO_DATA_FOUND THEN
14:35:11 219  	      RAISE BAD_SUBSCRIPTION_ID;
14:35:11 220  	END;
14:35:11 221  
14:35:11 222  	BEGIN
14:35:11 223  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_SUBSCRIPTION_HISTORY(
14:35:11 224  	    in_subscription_id,
14:35:11 225  	    var_account_id,
14:35:11 226  	    var_purchase_date,
14:35:11 227  	    var_offer_chain_id,
14:35:11 228  	    var_suspend_date,
14:35:11 229  	    var_termination_date,
14:35:11 230  	    var_days_ramaining_adjustment,
14:35:11 231  	    var_sct_id,
14:35:11 232  	    var_updated_by,
14:35:11 233  	    var_update_date,
14:35:11 234  	    in_system_activity_reason_id
14:35:11 235  	  );
14:35:11 236  	  EXCEPTION
14:35:11 237  	    WHEN OTHERS THEN
14:35:11 238  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 239  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 240  	END;
14:35:11 241  
14:35:11 242  EXCEPTION
14:35:11 243  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:11 244  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 245  	  SPROC_NAME, 'No such subscription');
14:35:11 246  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 247  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 248  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 249  WHEN OTHERS THEN
14:35:11 250  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 251  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 252  END CREATE_SUBSCRIPTION_HISTORY;
14:35:11 253  
14:35:11 254  /********************************************************************/
14:35:11 255  
14:35:11 256  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
14:35:11 257  	in_credit_card_id	      IN NUMBER,
14:35:11 258  	in_system_activity_reason_id  IN NUMBER
14:35:11 259  ) AS
14:35:11 260  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
14:35:11 261  -- VARIABLES
14:35:11 262  var_account_id		     NUMBER;
14:35:11 263  var_instrument_name	     VARCHAR2(255);
14:35:11 264  var_private_card_holder_name   VARCHAR2(256);
14:35:11 265  var_private_street_address     VARCHAR2(256);
14:35:11 266  var_private_street_address2    VARCHAR2(256);
14:35:11 267  var_state 		     VARCHAR2(50);
14:35:11 268  var_city			     VARCHAR2(50);
14:35:11 269  var_postal_code		     VARCHAR2(20);
14:35:11 270  var_country		     CHAR(2);
14:35:11 271  var_last_four_cc		     VARCHAR2(4);
14:35:11 272  var_expiration_date	     DATE;
14:35:11 273  var_credit_card_type_id	     NUMBER;
14:35:11 274  var_secret_token		     VARCHAR2(255);
14:35:11 275  var_chase_profile_id	     VARCHAR2(255);
14:35:11 276  var_credit_card_status_id      NUMBER;
14:35:11 277  var_updated_by		     VARCHAR2(255);
14:35:11 278  var_update_date		     DATE;
14:35:11 279  -- EXCEPTIONS
14:35:11 280  BAD_CREDIT_CARD_ID     EXCEPTION;
14:35:11 281  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:35:11 282  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11 283  BEGIN
14:35:11 284  
14:35:11 285  	BEGIN
14:35:11 286  	  SELECT
14:35:11 287  	    ACCOUNT_ID,
14:35:11 288  	    INSTRUMENT_NAME,
14:35:11 289  	    PRIVATE_CARD_HOLDER_NAME,
14:35:11 290  	    PRIVATE_STREET_ADDRESS,
14:35:11 291  	    PRIVATE_STREET_ADDRESS2,
14:35:11 292  	    STATE,
14:35:11 293  	    CITY,
14:35:11 294  	    POSTAL_CODE,
14:35:11 295  	    COUNTRY,
14:35:11 296  	    LAST_FOUR_CC,
14:35:11 297  	    EXPIRATION_DATE,
14:35:11 298  	    CREDIT_CARD_TYPE_ID,
14:35:11 299  	    SECRET_TOKEN,
14:35:11 300  	    CHASE_PROFILE_ID,
14:35:11 301  	    CREDIT_CARD_STATUS_ID,
14:35:11 302  	    UPDATED_BY,
14:35:11 303  	    UPDATE_DATE
14:35:11 304  	    into
14:35:11 305  	    var_account_id,
14:35:11 306  	    var_instrument_name,
14:35:11 307  	    var_private_card_holder_name,
14:35:11 308  	    var_private_street_address,
14:35:11 309  	    var_private_street_address2,
14:35:11 310  	    var_state,
14:35:11 311  	    var_city,
14:35:11 312  	    var_postal_code,
14:35:11 313  	    var_country,
14:35:11 314  	    var_last_four_cc,
14:35:11 315  	    var_expiration_date,
14:35:11 316  	    var_credit_card_type_id,
14:35:11 317  	    var_secret_token,
14:35:11 318  	    var_chase_profile_id,
14:35:11 319  	    var_credit_card_status_id,
14:35:11 320  	    var_updated_by,
14:35:11 321  	    var_update_date
14:35:11 322  	  FROM
14:35:11 323  	    CREDIT_CARD
14:35:11 324  	  WHERE
14:35:11 325  	    CREDIT_CARD.ID = in_credit_card_id;
14:35:11 326  	  EXCEPTION
14:35:11 327  	    WHEN NO_DATA_FOUND THEN
14:35:11 328  	      RAISE BAD_CREDIT_CARD_ID;
14:35:11 329  	END;
14:35:11 330  
14:35:11 331  	BEGIN
14:35:11 332  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_CREDIT_CARD_HISTORY(
14:35:11 333  	    in_credit_card_id,
14:35:11 334  	    var_account_id,
14:35:11 335  	    var_instrument_name,
14:35:11 336  	    var_private_card_holder_name,
14:35:11 337  	    var_private_street_address,
14:35:11 338  	    var_private_street_address2,
14:35:11 339  	    var_state,
14:35:11 340  	    var_city,
14:35:11 341  	    var_postal_code,
14:35:11 342  	    var_country,
14:35:11 343  	    var_last_four_cc,
14:35:11 344  	    var_expiration_date,
14:35:11 345  	    var_credit_card_type_id,
14:35:11 346  	    var_secret_token,
14:35:11 347  	    var_chase_profile_id,
14:35:11 348  	    var_credit_card_status_id,
14:35:11 349  	    var_updated_by,
14:35:11 350  	    var_update_date,
14:35:11 351  	    in_system_activity_reason_id
14:35:11 352  	  );
14:35:11 353  	  EXCEPTION
14:35:11 354  	    WHEN OTHERS THEN
14:35:11 355  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 356  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 357  	END;
14:35:11 358  
14:35:11 359  EXCEPTION
14:35:11 360  WHEN BAD_CREDIT_CARD_ID THEN
14:35:11 361  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 362  	  SPROC_NAME, 'No such credit card');
14:35:11 363  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 364  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 365  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 366  WHEN OTHERS THEN
14:35:11 367  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 368  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 369  END CREATE_CREDIT_CARD_HISTORY;
14:35:11 370  
14:35:11 371  /********************************************************************/
14:35:11 372  
14:35:11 373  PROCEDURE CREATE_PAYPAL_HISTORY(
14:35:11 374  /*
14:35:11 375  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 376  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 377  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:11 378  */
14:35:11 379  	in_paypal_id		      IN NUMBER,
14:35:11 380  	in_system_activity_reason_id  IN NUMBER
14:35:11 381  ) AS
14:35:11 382  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
14:35:11 383  -- VARIABLES
14:35:11 384  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
14:35:11 385  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
14:35:11 386  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
14:35:11 387  var_created_by		   PAYPAL.CREATED_BY%TYPE;
14:35:11 388  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
14:35:11 389  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
14:35:11 390  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
14:35:11 391  var_state 		   PAYPAL.STATE%TYPE;
14:35:11 392  var_city			   PAYPAL.CITY%TYPE;
14:35:11 393  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
14:35:11 394  var_country		   PAYPAL.COUNTRY%TYPE;
14:35:11 395  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
14:35:11 396  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
14:35:11 397  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
14:35:11 398  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
14:35:11 399  -- EXCEPTION
14:35:11 400  BAD_PAYPAL_ID	  EXCEPTION;
14:35:11 401  CAN_NOT_ADD_HISTORY EXCEPTION;
14:35:11 402  EXCEPTION_MESSAGE   VARCHAR2(1024);
14:35:11 403  BEGIN
14:35:11 404  
14:35:11 405  	BEGIN
14:35:11 406  	  SELECT
14:35:11 407  	    ACCOUNT_ID,
14:35:11 408  	    INSTRUMENT_NAME,
14:35:11 409  	    PRIVATE_EMAIL_ADDRESS,
14:35:11 410  	    UPDATE_DATE,
14:35:11 411  	    UPDATED_BY,
14:35:11 412  	    PAYPAL_STATUS_ID,
14:35:11 413  	    PRIVATE_STREET_ADDRESS,
14:35:11 414  	    PRIVATE_STREET_ADDRESS2,
14:35:11 415  	    STATE,
14:35:11 416  	    CITY,
14:35:11 417  	    POSTAL_CODE,
14:35:11 418  	    COUNTRY,
14:35:11 419  	    EXPIRATION_DATE,
14:35:11 420  	    SECRET_TOKEN
14:35:11 421  	  INTO
14:35:11 422  	    var_account_id,
14:35:11 423  	    var_instrument_name,
14:35:11 424  	    var_private_email_address,
14:35:11 425  	    var_update_date,
14:35:11 426  	    var_updated_by,
14:35:11 427  	    var_paypal_status_id,
14:35:11 428  	    var_paypal_prvt_street_addr,
14:35:11 429  	    var_paypal_prvt_street_addr2,
14:35:11 430  	    var_state,
14:35:11 431  	    var_city,
14:35:11 432  	    var_postal_code,
14:35:11 433  	    var_country,
14:35:11 434  	    var_expiration_date,
14:35:11 435  	    var_secret_token
14:35:11 436  	  FROM
14:35:11 437  	    PAYPAL
14:35:11 438  	  WHERE
14:35:11 439  	    ID = in_paypal_id;
14:35:11 440  	  EXCEPTION
14:35:11 441  	    WHEN NO_DATA_FOUND THEN
14:35:11 442  	      RAISE BAD_PAYPAL_ID;
14:35:11 443  	END;
14:35:11 444  
14:35:11 445  	BEGIN
14:35:11 446  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_PAYPAL_HISTORY(
14:35:11 447  	    in_paypal_id,
14:35:11 448  	    var_account_id,
14:35:11 449  	    var_instrument_name,
14:35:11 450  	    var_private_email_address,
14:35:11 451  	    var_updated_by,
14:35:11 452  	    var_update_date,
14:35:11 453  	    var_paypal_status_id,
14:35:11 454  	    var_paypal_prvt_street_addr,
14:35:11 455  	    var_paypal_prvt_street_addr2,
14:35:11 456  	    var_state,
14:35:11 457  	    var_city,
14:35:11 458  	    var_postal_code,
14:35:11 459  	    var_country,
14:35:11 460  	    var_expiration_date,
14:35:11 461  	    in_system_activity_reason_id,
14:35:11 462  	    var_secret_token
14:35:11 463  	  );
14:35:11 464  	  EXCEPTION
14:35:11 465  	    WHEN OTHERS THEN
14:35:11 466  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 467  	      RAISE CAN_NOT_ADD_HISTORY;
14:35:11 468  	END;
14:35:11 469  
14:35:11 470  EXCEPTION
14:35:11 471  WHEN BAD_PAYPAL_ID THEN
14:35:11 472  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 473  	  SPROC_NAME, 'No such paypal');
14:35:11 474  WHEN CAN_NOT_ADD_HISTORY THEN
14:35:11 475  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 476  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
14:35:11 477  WHEN OTHERS THEN
14:35:11 478  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 479  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 480  END CREATE_PAYPAL_HISTORY;
14:35:11 481  
14:35:11 482  /********************************************************************/
14:35:11 483  
14:35:11 484  PROCEDURE CREATE_GIFT_CERT_HISTORY(
14:35:11 485  	in_gift_certificate_id	      IN NUMBER,
14:35:11 486  	in_system_activity_reason_id  IN NUMBER
14:35:11 487  ) AS
14:35:11 488  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
14:35:11 489  -- VARIABLES
14:35:11 490  var_purchaser_group_id	     NUMBER;
14:35:11 491  var_purchase_invoice_id	     NUMBER;
14:35:11 492  var_offer_chain_id	     NUMBER;
14:35:11 493  var_expiration_date	     DATE;
14:35:11 494  var_purchase_date 	     DATE;
14:35:11 495  var_gift_certificate_status_id NUMBER;
14:35:11 496  var_code			     VARCHAR2(255);
14:35:11 497  var_recipient_name	     VARCHAR2(255);
14:35:11 498  var_gift_message		     VARCHAR2(500);
14:35:11 499  var_recipient_email	     VARCHAR2(255);
14:35:11 500  var_finalized_invoice_id	     NUMBER;
14:35:11 501  var_sender_email		     VARCHAR2(50);
14:35:11 502  var_sender_name		     VARCHAR2(50);
14:35:11 503  var_redemption_date	     DATE;
14:35:11 504  var_redeemer_group_id	     NUMBER;
14:35:11 505  var_cancelation_date	     DATE;
14:35:11 506  var_updated_by		     VARCHAR2(255);
14:35:11 507  var_update_date		     DATE;
14:35:11 508  var_recipient_address_id	     NUMBER;
14:35:11 509  var_redeemer_address_id	     NUMBER;
14:35:11 510  var_recipient_notify_date      DATE;
14:35:11 511  -- EXCEPTIONS
14:35:11 512  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
14:35:11 513  CAN_NOT_CREATE_HISTORY  EXCEPTION;
14:35:11 514  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:35:11 515  BEGIN
14:35:11 516  
14:35:11 517  	BEGIN
14:35:11 518  	  SELECT
14:35:11 519  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
14:35:11 520  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
14:35:11 521  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
14:35:11 522  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
14:35:11 523  	    GIFT_CERTIFICATE.PURCHASE_DATE,
14:35:11 524  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
14:35:11 525  	    GIFT_CERTIFICATE.CODE,
14:35:11 526  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
14:35:11 527  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
14:35:11 528  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
14:35:11 529  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
14:35:11 530  	    GIFT_CERTIFICATE.SENDER_EMAIL,
14:35:11 531  	    GIFT_CERTIFICATE.SENDER_NAME,
14:35:11 532  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
14:35:11 533  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
14:35:11 534  	    GIFT_CERTIFICATE.CANCELATION_DATE,
14:35:11 535  	    GIFT_CERTIFICATE.UPDATED_BY,
14:35:11 536  	    GIFT_CERTIFICATE.UPDATE_DATE,
14:35:11 537  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
14:35:11 538  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
14:35:11 539  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
14:35:11 540  	    into
14:35:11 541  	    var_purchaser_group_id,
14:35:11 542  	    var_purchase_invoice_id,
14:35:11 543  	    var_offer_chain_id,
14:35:11 544  	    var_expiration_date,
14:35:11 545  	    var_purchase_date,
14:35:11 546  	    var_gift_certificate_status_id,
14:35:11 547  	    var_code,
14:35:11 548  	    var_recipient_name,
14:35:11 549  	    var_gift_message,
14:35:11 550  	    var_recipient_email,
14:35:11 551  	    var_finalized_invoice_id,
14:35:11 552  	    var_sender_email,
14:35:11 553  	    var_sender_name,
14:35:11 554  	    var_redemption_date,
14:35:11 555  	    var_redeemer_group_id,
14:35:11 556  	    var_cancelation_date,
14:35:11 557  	    var_updated_by,
14:35:11 558  	    var_update_date,
14:35:11 559  	    var_recipient_address_id,
14:35:11 560  	    var_redeemer_address_id,
14:35:11 561  	    var_recipient_notify_date
14:35:11 562  	  FROM
14:35:11 563  	    GIFT_CERTIFICATE
14:35:11 564  	  WHERE
14:35:11 565  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
14:35:11 566  	END;
14:35:11 567  
14:35:11 568  	BEGIN
14:35:11 569  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_GIFT_CERT_HISTORY(
14:35:11 570  	    in_gift_certificate_id,
14:35:11 571  	    var_purchaser_group_id,
14:35:11 572  	    var_purchase_invoice_id,
14:35:11 573  	    var_offer_chain_id,
14:35:11 574  	    var_expiration_date,
14:35:11 575  	    var_purchase_date,
14:35:11 576  	    var_gift_certificate_status_id,
14:35:11 577  	    var_code,
14:35:11 578  	    var_updated_by,
14:35:11 579  	    var_update_date,
14:35:11 580  	    in_system_activity_reason_id,
14:35:11 581  	    var_recipient_name,
14:35:11 582  	    var_gift_message,
14:35:11 583  	    var_recipient_email,
14:35:11 584  	    var_finalized_invoice_id,
14:35:11 585  	    var_sender_email,
14:35:11 586  	    var_sender_name,
14:35:11 587  	    var_redemption_date,
14:35:11 588  	    var_redeemer_group_id,
14:35:11 589  	    var_cancelation_date,
14:35:11 590  	    var_recipient_address_id,
14:35:11 591  	    var_redeemer_address_id,
14:35:11 592  	    var_recipient_notify_date
14:35:11 593  	  );
14:35:11 594  	  EXCEPTION
14:35:11 595  	    WHEN OTHERS THEN
14:35:11 596  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 597  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 598  	END;
14:35:11 599  
14:35:11 600  EXCEPTION
14:35:11 601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
14:35:11 602  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 603  	  SPROC_NAME, 'No such gift certificate');
14:35:11 604  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 605  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 606  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 607  WHEN OTHERS THEN
14:35:11 608  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 609  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 610  END CREATE_GIFT_CERT_HISTORY;
14:35:11 611  
14:35:11 612  /********************************************************************/
14:35:11 613  
14:35:11 614  PROCEDURE CREATE_TRANSACTION_HISTORY (
14:35:11 615  	in_transaction_id	     IN NUMBER,
14:35:11 616  	in_system_activity_reason_id IN NUMBER
14:35:11 617  ) AS
14:35:11 618  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
14:35:11 619  -- VARIABLES
14:35:11 620  var_transaction_status_id NUMBER;
14:35:11 621  var_transaction_amount	NUMBER(10,2);
14:35:11 622  var_updated_by		VARCHAR2(255);
14:35:11 623  var_update_date		DATE;
14:35:11 624  -- EXCEPTIONS
14:35:11 625  BAD_TRANSACTION_ID     EXCEPTION;
14:35:11 626  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:35:11 627  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11 628  BEGIN
14:35:11 629  
14:35:11 630  	BEGIN
14:35:11 631  	  SELECT
14:35:11 632  	    TRANSACTION.TRANSACTION_STATUS_ID,
14:35:11 633  	    TRANSACTION.TRANSACTION_AMOUNT,
14:35:11 634  	    TRANSACTION.UPDATED_BY,
14:35:11 635  	    TRANSACTION.UPDATE_DATE
14:35:11 636  	    into
14:35:11 637  	    var_transaction_status_id,
14:35:11 638  	    var_transaction_amount,
14:35:11 639  	    var_updated_by,
14:35:11 640  	    var_update_date
14:35:11 641  	  FROM
14:35:11 642  	    TRANSACTION
14:35:11 643  	  WHERE
14:35:11 644  	    TRANSACTION.ID = in_transaction_id;
14:35:11 645  	  EXCEPTION
14:35:11 646  	    WHEN NO_DATA_FOUND THEN
14:35:11 647  	      RAISE BAD_TRANSACTION_ID;
14:35:11 648  	END;
14:35:11 649  
14:35:11 650  	BEGIN
14:35:11 651  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_TRANSACTION_HISTORY(
14:35:11 652  	    in_transaction_id,
14:35:11 653  	    var_transaction_status_id,
14:35:11 654  	    var_transaction_amount,
14:35:11 655  	    var_updated_by,
14:35:11 656  	    var_update_date,
14:35:11 657  	    in_system_activity_reason_id
14:35:11 658  	  );
14:35:11 659  	  EXCEPTION
14:35:11 660  	    WHEN OTHERS THEN
14:35:11 661  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 662  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 663  	END;
14:35:11 664  
14:35:11 665  EXCEPTION
14:35:11 666  WHEN BAD_TRANSACTION_ID THEN
14:35:11 667  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 668  	  SPROC_NAME, 'No such transaction');
14:35:11 669  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 670  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 671  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 672  WHEN OTHERS THEN
14:35:11 673  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 674  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 675  END CREATE_TRANSACTION_HISTORY;
14:35:11 676  
14:35:11 677  /********************************************************************/
14:35:11 678  
14:35:11 679  PROCEDURE CREATE_INVOICE_HISTORY (
14:35:11 680  /*
14:35:11 681  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 682  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 683  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:11 684  */
14:35:11 685  	in_invoice_id		     IN NUMBER,
14:35:11 686  	in_system_activity_reason_id IN NUMBER
14:35:11 687  ) AS
14:35:11 688  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
14:35:11 689  -- VARIABLES
14:35:11 690  var_invoice_status_id NUMBER;
14:35:11 691  var_updated_by	    VARCHAR2(255);
14:35:11 692  var_update_date	    DATE;
14:35:11 693  -- EXCEPTIONS
14:35:11 694  BAD_INVOICE_ID	     EXCEPTION;
14:35:11 695  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:35:11 696  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11 697  BEGIN
14:35:11 698  
14:35:11 699  	BEGIN
14:35:11 700  	  SELECT
14:35:11 701  	    INVOICE.INVOICE_STATUS_ID,
14:35:11 702  	    INVOICE.UPDATED_BY,
14:35:11 703  	    INVOICE.UPDATE_DATE
14:35:11 704  	    into
14:35:11 705  	    var_invoice_status_id,
14:35:11 706  	    var_updated_by,
14:35:11 707  	    var_update_date
14:35:11 708  	  FROM
14:35:11 709  	    INVOICE
14:35:11 710  	  WHERE
14:35:11 711  	    INVOICE.ID = in_invoice_id;
14:35:11 712  	  EXCEPTION
14:35:11 713  	    WHEN NO_DATA_FOUND THEN
14:35:11 714  	      RAISE BAD_INVOICE_ID;
14:35:11 715  	END;
14:35:11 716  
14:35:11 717  	BEGIN
14:35:11 718  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_INVOICE_HISTORY(
14:35:11 719  	    in_invoice_id,
14:35:11 720  	    var_invoice_status_id,
14:35:11 721  	    var_updated_by,
14:35:11 722  	    var_update_date,
14:35:11 723  	    in_system_activity_reason_id
14:35:11 724  	  );
14:35:11 725  	  EXCEPTION
14:35:11 726  	    WHEN OTHERS THEN
14:35:11 727  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 728  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 729  	END;
14:35:11 730  
14:35:11 731  EXCEPTION
14:35:11 732  WHEN BAD_INVOICE_ID THEN
14:35:11 733  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 734  	  SPROC_NAME, 'No such invoice');
14:35:11 735  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 736  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 737  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 738  WHEN OTHERS THEN
14:35:11 739  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 740  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 741  END CREATE_INVOICE_HISTORY;
14:35:11 742  
14:35:11 743  /********************************************************************/
14:35:11 744  
14:35:11 745  PROCEDURE CREATE_LICENSE_HISTORY (
14:35:11 746  /*
14:35:11 747  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 748  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 749  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:11 750  */
14:35:11 751  	in_license_id		     IN NUMBER,
14:35:11 752  	in_system_activity_reason_id IN NUMBER
14:35:11 753  ) AS
14:35:11 754  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
14:35:11 755  -- VARIABLES
14:35:11 756  var_license_status_id	    NUMBER;
14:35:11 757  var_needs_entitlements	    NUMBER;
14:35:11 758  var_start_date		    DATE;
14:35:11 759  var_offer_id		    NUMBER;
14:35:11 760  var_subscription_id	    NUMBER;
14:35:11 761  var_invoice_id		    NUMBER;
14:35:11 762  var_end_date		    DATE;
14:35:11 763  var_is_extension		    NUMBER;
14:35:11 764  var_current_offer_index	    NUMBER;
14:35:11 765  var_current_offer_recurr_num  NUMBER;
14:35:11 766  var_updated_by		    VARCHAR2(255);
14:35:11 767  var_update_date		    DATE;
14:35:11 768  var_entitlement_end_date	    DATE;
14:35:11 769  -- EXCEPTIONS
14:35:11 770  BAD_LICENSE_ID	     EXCEPTION;
14:35:11 771  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:35:11 772  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11 773  BEGIN
14:35:11 774  
14:35:11 775  	BEGIN
14:35:11 776  	  SELECT
14:35:11 777  	    LICENSE.LICENSE_STATUS_ID,
14:35:11 778  	    LICENSE.NEEDS_ENTITLEMENTS,
14:35:11 779  	    LICENSE.START_DATE,
14:35:11 780  	    LICENSE.OFFER_ID,
14:35:11 781  	    LICENSE.SUBSCRIPTION_ID,
14:35:11 782  	    LICENSE.INVOICE_ID,
14:35:11 783  	    LICENSE.END_DATE,
14:35:11 784  	    LICENSE.IS_EXTENSION,
14:35:11 785  	    LICENSE.CURRENT_OFFER_INDEX,
14:35:11 786  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
14:35:11 787  	    LICENSE.UPDATED_BY,
14:35:11 788  	    LICENSE.UPDATE_DATE,
14:35:11 789  	    LICENSE.ENTITLEMENT_END_DATE
14:35:11 790  	    into
14:35:11 791  	    var_license_status_id,
14:35:11 792  	    var_needs_entitlements,
14:35:11 793  	    var_start_date,
14:35:11 794  	    var_offer_id,
14:35:11 795  	    var_subscription_id,
14:35:11 796  	    var_invoice_id,
14:35:11 797  	    var_end_date,
14:35:11 798  	    var_is_extension,
14:35:11 799  	    var_current_offer_index,
14:35:11 800  	    var_current_offer_recurr_num,
14:35:11 801  	    var_updated_by,
14:35:11 802  	    var_update_date,
14:35:11 803  	    var_entitlement_end_date
14:35:11 804  	  FROM
14:35:11 805  	    LICENSE
14:35:11 806  	  WHERE
14:35:11 807  	    LICENSE.ID = in_license_id;
14:35:11 808  	  EXCEPTION
14:35:11 809  	    WHEN NO_DATA_FOUND THEN
14:35:11 810  	      RAISE BAD_LICENSE_ID;
14:35:11 811  	END;
14:35:11 812  
14:35:11 813  	BEGIN
14:35:11 814  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_LICENSE_HISTORY(
14:35:11 815  	    in_license_id,
14:35:11 816  	    var_license_status_id,
14:35:11 817  	    var_needs_entitlements,
14:35:11 818  	    var_start_date,
14:35:11 819  	    var_offer_id,
14:35:11 820  	    var_subscription_id,
14:35:11 821  	    var_invoice_id,
14:35:11 822  	    var_end_date,
14:35:11 823  	    var_updated_by,
14:35:11 824  	    var_update_date,
14:35:11 825  	    var_is_extension,
14:35:11 826  	    var_current_offer_index,
14:35:11 827  	    var_current_offer_recurr_num,
14:35:11 828  	    in_system_activity_reason_id,
14:35:11 829  	    var_entitlement_end_date
14:35:11 830  	  );
14:35:11 831  	  EXCEPTION
14:35:11 832  	    WHEN OTHERS THEN
14:35:11 833  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 834  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 835  	END;
14:35:11 836  
14:35:11 837  EXCEPTION
14:35:11 838  WHEN BAD_LICENSE_ID THEN
14:35:11 839  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 840  	  SPROC_NAME, 'No such license');
14:35:11 841  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 842  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 843  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 844  WHEN OTHERS THEN
14:35:11 845  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 846  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 847  END CREATE_LICENSE_HISTORY;
14:35:11 848  
14:35:11 849  /********************************************************************/
14:35:11 850  
14:35:11 851  PROCEDURE CREATE_CHARGE_HISTORY (
14:35:11 852  /*
14:35:11 853  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 854  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 855  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:11 856  */
14:35:11 857  	in_charge_id		    IN NUMBER,
14:35:11 858  	in_system_activity_reason_id IN NUMBER
14:35:11 859  ) AS
14:35:11 860  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
14:35:11 861  -- VARIABLES
14:35:11 862  var_invoice_id	     NUMBER;
14:35:11 863  var_transaction_id     NUMBER;
14:35:11 864  var_instrument_type_id NUMBER;
14:35:11 865  var_instrument_id      NUMBER;
14:35:11 866  var_charge_amount      NUMBER;
14:35:11 867  var_charge_status_id   NUMBER;
14:35:11 868  var_updated_by	     VARCHAR2(255);
14:35:11 869  var_update_date	     DATE;
14:35:11 870  -- EXCEPTIONS
14:35:11 871  BAD_CHARGE_ID	     EXCEPTION;
14:35:11 872  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:35:11 873  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11 874  BEGIN
14:35:11 875  
14:35:11 876  	BEGIN
14:35:11 877  	  SELECT
14:35:11 878  	    CHARGE.INVOICE_ID,
14:35:11 879  	    CHARGE.TRANSACTION_ID,
14:35:11 880  	    CHARGE.INSTRUMENT_TYPE_ID,
14:35:11 881  	    CHARGE.INSTRUMENT_ID,
14:35:11 882  	    CHARGE.CHARGE_AMOUNT,
14:35:11 883  	    CHARGE.CHARGE_STATUS_ID,
14:35:11 884  	    CHARGE.UPDATED_BY,
14:35:11 885  	    CHARGE.UPDATE_DATE
14:35:11 886  	    into
14:35:11 887  	    var_invoice_id,
14:35:11 888  	    var_transaction_id,
14:35:11 889  	    var_instrument_type_id,
14:35:11 890  	    var_instrument_id,
14:35:11 891  	    var_charge_amount,
14:35:11 892  	    var_charge_status_id,
14:35:11 893  	    var_updated_by,
14:35:11 894  	    var_update_date
14:35:11 895  	  FROM
14:35:11 896  	    CHARGE
14:35:11 897  	  WHERE
14:35:11 898  	    CHARGE.ID = in_charge_id;
14:35:11 899  	  EXCEPTION
14:35:11 900  	    WHEN NO_DATA_FOUND THEN
14:35:11 901  	      RAISE BAD_CHARGE_ID;
14:35:11 902  	END;
14:35:11 903  
14:35:11 904  	BEGIN
14:35:11 905  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_CHARGE_HISTORY (
14:35:11 906  	    in_charge_id,
14:35:11 907  	    var_invoice_id,
14:35:11 908  	    var_transaction_id,
14:35:11 909  	    var_instrument_type_id,
14:35:11 910  	    var_instrument_id,
14:35:11 911  	    var_charge_amount,
14:35:11 912  	    var_updated_by,
14:35:11 913  	    var_update_date,
14:35:11 914  	    var_charge_status_id,
14:35:11 915  	    in_system_activity_reason_id
14:35:11 916  	  );
14:35:11 917  	  EXCEPTION
14:35:11 918  	    WHEN OTHERS THEN
14:35:11 919  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 920  	      RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 921  	END;
14:35:11 922  
14:35:11 923  EXCEPTION
14:35:11 924  WHEN BAD_CHARGE_ID THEN
14:35:11 925  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 926  	  SPROC_NAME, 'No such license');
14:35:11 927  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 928  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 929  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 930  WHEN OTHERS THEN
14:35:11 931  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 933  END CREATE_CHARGE_HISTORY;
14:35:11 934  
14:35:11 935  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
14:35:11 936  /*
14:35:11 937  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 938  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 939  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:11 940  */
14:35:11 941  	in_invoice_adjustment_id  IN NUMBER,
14:35:11 942  	in_system_activity_reason_id IN NUMBER
14:35:11 943  ) AS
14:35:11 944  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
14:35:11 945  --VARIABLED
14:35:11 946  var_invoice_adj_id	  INVOICE_ADJUSTMENT.ID%TYPE;
14:35:11 947  var_invoice_id		  INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
14:35:11 948  var_is_credit		  INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
14:35:11 949  var_charge_id		  INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
14:35:11 950  var_adjustment_date	  INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
14:35:11 951  var_create_date		  INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
14:35:11 952  var_created_by		  INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
14:35:11 953  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
14:35:11 954  var_update_date		  INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
14:35:11 955  var_updated_by		  INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
14:35:11 956  BAD_INVOICE_ADJ_ID	  EXCEPTION;
14:35:11 957  CAN_NOT_CREATE_HISTORY	  EXCEPTION;
14:35:11 958  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11 959  BEGIN
14:35:11 960  
14:35:11 961  	BEGIN
14:35:11 962  	  SELECT
14:35:11 963  	    INVOICE_ADJUSTMENT.ID,
14:35:11 964  	    INVOICE_ADJUSTMENT.INVOICE_ID,
14:35:11 965  	    INVOICE_ADJUSTMENT.IS_CREDIT,
14:35:11 966  	    INVOICE_ADJUSTMENT.CHARGE_ID,
14:35:11 967  	    INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
14:35:11 968  	    INVOICE_ADJUSTMENT.CREATE_DATE,
14:35:11 969  	    INVOICE_ADJUSTMENT.CREATED_BY,
14:35:11 970  	    INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
14:35:11 971  	    INVOICE_ADJUSTMENT.UPDATE_DATE,
14:35:11 972  	    INVOICE_ADJUSTMENT.UPDATED_BY
14:35:11 973  	    into
14:35:11 974  	    var_invoice_adj_id,
14:35:11 975  	    var_invoice_id,
14:35:11 976  	    var_is_credit,
14:35:11 977  	    var_charge_id,
14:35:11 978  	    var_adjustment_date,
14:35:11 979  	    var_create_date,
14:35:11 980  	    var_created_by,
14:35:11 981  	    var_invoice_adj_reason_id,
14:35:11 982  	    var_update_date,
14:35:11 983  	    var_updated_by
14:35:11 984  	  FROM
14:35:11 985  	    INVOICE_ADJUSTMENT
14:35:11 986  	  WHERE
14:35:11 987  	    INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
14:35:11 988  	  EXCEPTION
14:35:11 989  	    WHEN NO_DATA_FOUND THEN
14:35:11 990  	      RAISE BAD_INVOICE_ADJ_ID;
14:35:11 991  	END;
14:35:11 992  
14:35:11 993  	BEGIN
14:35:11 994  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V16.CREATE_INVOICE_ADJ_HISTORY (
14:35:11 995  	    var_invoice_adj_id,
14:35:11 996  	    var_invoice_id,
14:35:11 997  	    var_is_credit,
14:35:11 998  	    var_charge_id,
14:35:11 999  	    var_adjustment_date,
14:35:11 1000  	     var_create_date,
14:35:11 1001  	     var_created_by,
14:35:11 1002  	     var_invoice_adj_reason_id,
14:35:11 1003  	     var_update_date,
14:35:11 1004  	     var_updated_by
14:35:11 1005  	   );
14:35:11 1006  	   EXCEPTION
14:35:11 1007  	     WHEN OTHERS THEN
14:35:11 1008  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:11 1009  	       RAISE CAN_NOT_CREATE_HISTORY;
14:35:11 1010  	 END;
14:35:11 1011  
14:35:11 1012  EXCEPTION
14:35:11 1013  WHEN BAD_INVOICE_ADJ_ID THEN
14:35:11 1014  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1015  	   SPROC_NAME, 'No such invoice adjustment');
14:35:11 1016  WHEN CAN_NOT_CREATE_HISTORY THEN
14:35:11 1017  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 1018  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:35:11 1019  WHEN OTHERS THEN
14:35:11 1020  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1021  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1022  END CREATE_INVOICE_ADJ_HISTORY;
14:35:11 1023  
14:35:11 1024  END PROCS_HISTORY_V16;
14:35:11 1025  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.21
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
14:35:11   4  /*
14:35:11   5  Throws exceptions:
14:35:11   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11   7  */
14:35:11   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:11   9  	out_result_set	    OUT SYS_REFCURSOR
14:35:11  10  ) AS
14:35:11  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
14:35:11  12  BEGIN
14:35:11  13  OPEN out_result_set FOR
14:35:11  14  	      SELECT
14:35:11  15  	      i.id as ITUNES_RECEIPT_ID,
14:35:11  16  	      s.id as SUBSCRIPTION_ID,
14:35:11  17  	      s.SUBSCRIPTION_STATUS_ID,
14:35:11  18  	      i.STATUS,
14:35:11  19  	      a.GROUP_ID
14:35:11  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
14:35:11  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
14:35:11  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
14:35:11  23  	      AND a.ID(+) = s.ACCOUNT_ID;
14:35:11  24  END ITUNES_RECEIPT_SUBSCRIPTION;
14:35:11  25  
14:35:11  26  
14:35:11  27  PROCEDURE CREATE_RECEIPT(
14:35:11  28  /*
14:35:11  29  Throws exceptions:
14:35:11  30  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11  31  */
14:35:11  32  	  out_id      OUT NUMBER,
14:35:11  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:35:11  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
14:35:11  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
14:35:11  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
14:35:11  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:11  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:35:11  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:35:11  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:11  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:35:11  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:35:11  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:35:11  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
14:35:11  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
14:35:11  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:35:11  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
14:35:11  48  ) AS
14:35:11  49  -- VARIABLES
14:35:11  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
14:35:11  51  -- EXCEPTIONS
14:35:11  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:11  53  BEGIN
14:35:11  54  
14:35:11  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.CREATE_RECEIPT(
14:35:11  56  	  out_id	      =>  out_id,
14:35:11  57  	  in_subscription_id  =>  in_subscription_id,
14:35:11  58  	  in_receipt	      =>  in_receipt,
14:35:11  59  	  in_status	      =>  in_status,
14:35:11  60  	  in_quantity	      =>  in_quantity,
14:35:11  61  	  in_product_id       =>  in_product_id,
14:35:11  62  	  in_transaction_id   =>  in_transaction_id,
14:35:11  63  	  in_purchase_date    =>  in_purchase_date,
14:35:11  64  	  in_original_transaction_id  =>  in_original_transaction_id,
14:35:11  65  	  in_original_purchase_date => in_original_purchase_date,
14:35:11  66  	  in_app_item_id      =>  in_app_item_id,
14:35:11  67  	  in_version_external_id  =>  in_version_external_id,
14:35:11  68  	  in_bid	      =>  in_bid,
14:35:11  69  	  in_bvrs	      =>  in_bvrs,
14:35:11  70  	  in_expires_date     =>  in_expires_date,
14:35:11  71  	  in_created_by       =>  in_created_by
14:35:11  72  	);
14:35:11  73  
14:35:11  74  END CREATE_RECEIPT;
14:35:11  75  
14:35:11  76  PROCEDURE UPDATE_RECEIPT(
14:35:11  77  /*
14:35:11  78  Throws exceptions:
14:35:11  79  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11  80  */
14:35:11  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
14:35:11  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
14:35:11  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
14:35:11  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
14:35:11  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:35:11  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:35:11  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:35:11  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:35:11  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:35:11  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:35:11  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:35:11  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
14:35:11  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
14:35:11  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:35:11  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
14:35:11  96  	  in_is_expired       IN NUMBER
14:35:11  97  ) AS
14:35:11  98  CANCEL_DATE DATE;
14:35:11  99  BEGIN
14:35:11 100  	-- see if cancel date is already set
14:35:11 101  	BEGIN
14:35:11 102  	  SELECT
14:35:11 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
14:35:11 104  	  FROM
14:35:11 105  	    ITUNES_RECEIPT IR
14:35:11 106  	  WHERE
14:35:11 107  	    IR.ID = in_id;
14:35:11 108  	EXCEPTION
14:35:11 109  	  WHEN NO_DATA_FOUND THEN
14:35:11 110  	    CANCEL_DATE := NULL;
14:35:11 111  	END;
14:35:11 112  
14:35:11 113  	-- only update cancel date if it isn't already set and the receipt is expired
14:35:11 114  	IF in_is_expired = 1 THEN
14:35:11 115  	  IF CANCEL_DATE IS NULL THEN
14:35:11 116  	    CANCEL_DATE := SYSDATE;
14:35:11 117  	  END IF;
14:35:11 118  	ELSE
14:35:11 119  	  CANCEL_DATE := NULL;
14:35:11 120  	END IF;
14:35:11 121  
14:35:11 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.UPDATE_RECEIPT(
14:35:11 123  	  in_id => in_id,
14:35:11 124  	  in_receipt => in_receipt,
14:35:11 125  	  in_status => in_status,
14:35:11 126  	  in_quantity => in_quantity,
14:35:11 127  	  in_product_id => in_product_id,
14:35:11 128  	  in_transaction_id => in_transaction_id,
14:35:11 129  	  in_purchase_date => in_purchase_date,
14:35:11 130  	  in_original_transaction_id => in_original_transaction_id,
14:35:11 131  	  in_original_purchase_date => in_original_purchase_date,
14:35:11 132  	  in_app_item_id => in_app_item_id,
14:35:11 133  	  in_version_external_id => in_version_external_id,
14:35:11 134  	  in_bid => in_bid,
14:35:11 135  	  in_bvrs => in_bvrs,
14:35:11 136  	  in_expires_date => in_expires_date,
14:35:11 137  	  in_updated_by => in_updated_by,
14:35:11 138  	  in_cancel_date => CANCEL_DATE
14:35:11 139  	);
14:35:11 140  END UPDATE_RECEIPT;
14:35:11 141  
14:35:11 142  PROCEDURE LINK_ITUNES_RECEIPT(
14:35:11 143  /*
14:35:11 144  Throws exceptions:
14:35:11 145  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 146  */
14:35:11 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
14:35:11 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:35:11 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
14:35:11 150  ) AS
14:35:11 151  BEGIN
14:35:11 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.LINK_ITUNES_RECEIPT(
14:35:11 153  		      in_id => in_id,
14:35:11 154  		      in_subscription_id => in_subscription_id,
14:35:11 155  		      in_updated_by => in_updated_by
14:35:11 156  		      );
14:35:11 157  END LINK_ITUNES_RECEIPT;
14:35:11 158  
14:35:11 159  PROCEDURE MARK_RECEIPT_CHECKED(
14:35:11 160  /*
14:35:11 161  Throws exceptions:
14:35:11 162  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 163  */
14:35:11 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
14:35:11 165  ) AS
14:35:11 166  BEGIN
14:35:11 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V16.MARK_RECEIPT_CHECKED(
14:35:11 168  	  in_id => in_id
14:35:11 169  	);
14:35:11 170  END MARK_RECEIPT_CHECKED;
14:35:11 171  
14:35:11 172  PROCEDURE GET_ITUNES_RECEIPTS (
14:35:11 173  /*
14:35:11 174  Throws exceptions:
14:35:11 175  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 176  */
14:35:11 177  	out_result_set	    OUT SYS_REFCURSOR,
14:35:11 178  	in_row_number	    IN NUMBER DEFAULT 500
14:35:11 179  ) AS
14:35:11 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
14:35:11 181  BEGIN
14:35:11 182  OPEN out_result_set FOR
14:35:11 183  SELECT * FROM
14:35:11 184  (
14:35:11 185  	SELECT * FROM
14:35:11 186  	(
14:35:11 187  	  SELECT
14:35:11 188  	    IR.ID,
14:35:11 189  	    IR.SUBSCRIPTION_ID,
14:35:11 190  	    IR.RECEIPT,
14:35:11 191  	    IR.STATUS,
14:35:11 192  	    IR.QUANTITY,
14:35:11 193  	    IR.PRODUCT_ID,
14:35:11 194  	    IR.TRANSACTION_ID,
14:35:11 195  	    IR.PURCHASE_DATE,
14:35:11 196  	    IR.ORIGINAL_TRANSACTION_ID,
14:35:11 197  	    IR.ORIGINAL_PURCHASE_DATE,
14:35:11 198  	    IR.APP_ITEM_ID,
14:35:11 199  	    IR.VERSION_EXTERNAL_ID,
14:35:11 200  	    IR.BID,
14:35:11 201  	    IR.BVRS,
14:35:11 202  	    IR.EXPIRES_DATE,
14:35:11 203  	    IR.CREATE_DATe,
14:35:11 204  	    IR.CREATED_BY,
14:35:11 205  	    IR.UPDATE_DATE,
14:35:11 206  	    IR.UPDATED_BY,
14:35:11 207  	    IR.LAST_CHECK_DATE,
14:35:11 208  	    OC.VENDOR_SOURCE_ID
14:35:11 209  	  FROM
14:35:11 210  	    CORE_OWNER.ITUNES_RECEIPT IR
14:35:11 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
14:35:11 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
14:35:11 213  	  WHERE
14:35:11 214  	    NOT EXISTS
14:35:11 215  	    (
14:35:11 216  	      SELECT NULL
14:35:11 217  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:11 218  	      WHERE PROCESS_NAME = SPROC_NAME
14:35:11 219  		AND GENERIC_ID = IR.ID
14:35:11 220  	    ) AND
14:35:11 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
14:35:11 222  	    ROWNUM <= in_row_number*10
14:35:11 223  	)
14:35:11 224  	ORDER BY dbms_random.value
14:35:11 225  )
14:35:11 226  WHERE
14:35:11 227  	ROWNUM <= in_row_number;
14:35:11 228  
14:35:11 229  END GET_ITUNES_RECEIPTS;
14:35:11 230  
14:35:11 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
14:35:11 232  /*
14:35:11 233  Throws exceptions:
14:35:11 234  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 235  */
14:35:11 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
14:35:11 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
14:35:11 238  ) AS
14:35:11 239  BEGIN
14:35:11 240  
14:35:11 241  SELECT
14:35:11 242  	  oc.vendor_source_id
14:35:11 243  INTO
14:35:11 244  	  out_vendor_source_id
14:35:11 245  FROM
14:35:11 246  	  offer_chain_meta_data ocmd
14:35:11 247  JOIN
14:35:11 248  	  offer_chain oc
14:35:11 249  ON
14:35:11 250  	  ocmd.offer_chain_id = oc.id
14:35:11 251  WHERE
14:35:11 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
14:35:11 253  AND ocmd.value = in_itunes_pid
14:35:11 254  AND rownum <= 1;
14:35:11 255  
14:35:11 256  END GET_VENDOR_FROM_ITUNES_PID;
14:35:11 257  
14:35:11 258  END PROCS_ITUNES_RECEIPT_V16;
14:35:11 259  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE ADD_LINE_ITEMS(
14:35:11   4  /*
14:35:11   5  Throws exceptions:
14:35:11   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11   8  */
14:35:11   9  	in_invoice_id IN NUMBER,
14:35:11  10  	in_offer_id   IN NUMBER,
14:35:11  11  	in_created_by IN VARCHAR2
14:35:11  12  ) AS
14:35:11  13  -- VARIABLES
14:35:11  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
14:35:11  15  temp_invoice_id NUMBER;
14:35:11  16  temp_offer_id   NUMBER;
14:35:11  17  
14:35:11  18  var_line_item_data SYS_REFCURSOR;
14:35:11  19  var_new_line_item_id NUMBER;
14:35:11  20  var_product_unit_price NUMBER (10,6);
14:35:11  21  var_product_offering_price NUMBER(10,6);
14:35:11  22  var_product_offering_oprice NUMBER(10,6);
14:35:11  23  var_product_quantity NUMBER;
14:35:11  24  var_product_offering_id NUMBER;
14:35:11  25  
14:35:11  26  var_line_item_price	  NUMBER(10,2);
14:35:11  27  var_discount_fixed_amount   NUMBER(10,6);
14:35:11  28  var_discount_percent_amount NUMBER(10,2);
14:35:11  29  
14:35:11  30  
14:35:11  31  -- EXCEPTIONS
14:35:11  32  BAD_INVOICE_ID EXCEPTION;
14:35:11  33  BAD_OFFER_ID EXCEPTION;
14:35:11  34  BAD_DISCOUNT EXCEPTION;
14:35:11  35  BEGIN
14:35:11  36  
14:35:11  37  	-- Check that given invoice exists
14:35:11  38  	BEGIN
14:35:11  39  	  SELECT
14:35:11  40  	    INVOICE.ID into temp_invoice_id
14:35:11  41  	  FROM
14:35:11  42  	    INVOICE
14:35:11  43  	  WHERE
14:35:11  44  	    INVOICE.ID = in_invoice_id;
14:35:11  45  
14:35:11  46  	  EXCEPTION
14:35:11  47  	    WHEN NO_DATA_FOUND THEN
14:35:11  48  	      RAISE BAD_INVOICE_ID;
14:35:11  49  	END;
14:35:11  50  
14:35:11  51  	-- Check that given offer exists
14:35:11  52  	BEGIN
14:35:11  53  	  SELECT
14:35:11  54  	    OFFER.ID into temp_offer_id
14:35:11  55  	  FROM
14:35:11  56  	    OFFER
14:35:11  57  	  WHERE
14:35:11  58  	    OFFER.ID = in_offer_id;
14:35:11  59  
14:35:11  60  	  EXCEPTION
14:35:11  61  	    WHEN NO_DATA_FOUND THEN
14:35:11  62  	      RAISE BAD_OFFER_ID;
14:35:11  63  	END;
14:35:11  64  
14:35:11  65  	-- Get product_offering data
14:35:11  66  	OPEN var_line_item_data FOR
14:35:11  67  	SELECT
14:35:11  68  	  PRODUCT_OFFERING.ID,
14:35:11  69  	  PRODUCT_OFFERING.UNIT_PRICE,
14:35:11  70  	  PRODUCT_OFFERING.QUANTITY
14:35:11  71  	FROM
14:35:11  72  	  OFFER_PRODUCT_OFFERING
14:35:11  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:35:11  74  	WHERE
14:35:11  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
14:35:11  76  
14:35:11  77  	-- insert line items
14:35:11  78  	-- add discounts to line items
14:35:11  79  	LOOP
14:35:11  80  	  FETCH var_line_item_data INTO
14:35:11  81  	    var_product_offering_id,
14:35:11  82  	    var_product_unit_price,
14:35:11  83  	    var_product_quantity;
14:35:11  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
14:35:11  85  
14:35:11  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
14:35:11  87  	  var_product_offering_price := var_product_offering_oprice;
14:35:11  88  
14:35:11  89  	  -- Apply discounts to line_item
14:35:11  90  	  BEGIN
14:35:11  91  	    SELECT
14:35:11  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
14:35:11  93  	    FROM
14:35:11  94  	      DISCOUNT_PRODUCT_OFFERING
14:35:11  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:35:11  96  	    WHERE
14:35:11  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:35:11  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
14:35:11  99  	    EXCEPTION
14:35:11 100  	    WHEN NO_DATA_FOUND THEN
14:35:11 101  	      var_discount_fixed_amount := NULL;
14:35:11 102  	  END;
14:35:11 103  
14:35:11 104  	  BEGIN
14:35:11 105  	    SELECT
14:35:11 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
14:35:11 107  	    FROM
14:35:11 108  	      DISCOUNT_PRODUCT_OFFERING
14:35:11 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:35:11 110  	    WHERE
14:35:11 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:35:11 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
14:35:11 113  	    EXCEPTION
14:35:11 114  	    WHEN NO_DATA_FOUND THEN
14:35:11 115  	      var_discount_percent_amount := NULL;
14:35:11 116  	  END;
14:35:11 117  
14:35:11 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
14:35:11 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
14:35:11 120  	  END IF;
14:35:11 121  
14:35:11 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
14:35:11 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
14:35:11 124  	  END IF;
14:35:11 125  
14:35:11 126  	  var_line_item_price := PROCS_COMMON_V16.ROUND_10_6_TO_10_2(var_product_offering_price);
14:35:11 127  
14:35:11 128  	  IF (var_line_item_price < 0) THEN
14:35:11 129  	      RAISE BAD_DISCOUNT;
14:35:11 130  	  END IF;
14:35:11 131  
14:35:11 132  	  var_new_line_item_id := NULL;
14:35:11 133  	  PROCS_LINE_ITEMS_CRU_V16.CREATE_LINE_ITEM(
14:35:11 134  	    inout_line_item_id	=> var_new_line_item_id,
14:35:11 135  	    in_product_offer_id => var_product_offering_id,
14:35:11 136  	    in_invoice_id	=> in_invoice_id,
14:35:11 137  	    in_amount		=> var_line_item_price,
14:35:11 138  	    in_created_by	=> in_created_by,
14:35:11 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
14:35:11 140  	    in_taxes_amount	=> NULL
14:35:11 141  	  );
14:35:11 142  
14:35:11 143  	  FOR f_discount IN (
14:35:11 144  	    SELECT
14:35:11 145  	      DISCOUNT.ID
14:35:11 146  	    FROM
14:35:11 147  	      DISCOUNT_PRODUCT_OFFERING
14:35:11 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:35:11 149  	    WHERE
14:35:11 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:35:11 151  	  )
14:35:11 152  	  LOOP
14:35:11 153  	    PROCS_LINE_ITEMS_CRU_V16.CREATE_DISCOUNT_LINE_ITEM(
14:35:11 154  	      in_discount_id =>  f_discount.ID,
14:35:11 155  	      in_line_item_id => var_new_line_item_id
14:35:11 156  	    );
14:35:11 157  	  END LOOP;
14:35:11 158  	END LOOP;
14:35:11 159  
14:35:11 160  EXCEPTION
14:35:11 161  WHEN BAD_INVOICE_ID THEN
14:35:11 162  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 163  	  SPROC_NAME, 'No such license');
14:35:11 164  WHEN BAD_OFFER_ID THEN
14:35:11 165  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 166  	  SPROC_NAME, 'No such offer');
14:35:11 167  WHEN BAD_DISCOUNT THEN
14:35:11 168  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 169  	  SPROC_NAME, 'Bad Discount');
14:35:11 170  WHEN OTHERS THEN
14:35:11 171  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 173  END ADD_LINE_ITEMS;
14:35:11 174  
14:35:11 175  /******************************************************************************/
14:35:11 176  
14:35:11 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
14:35:11 178  	in_line_item_id    IN NUMBER,
14:35:11 179  	in_amount	   IN NUMBER,
14:35:11 180  	in_discount_amount IN NUMBER,
14:35:11 181  	in_taxes_amount    IN NUMBER
14:35:11 182  ) AS
14:35:11 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
14:35:11 184  -- VARIABLES
14:35:11 185  temp_line_item_id NUMBER;
14:35:11 186  -- EXCEPTIONS
14:35:11 187  BAD_LINE_ITEM_ID EXCEPTION;
14:35:11 188  BEGIN
14:35:11 189  
14:35:11 190  	-- Check that line item exists
14:35:11 191  	BEGIN
14:35:11 192  	  SELECT
14:35:11 193  	    LINE_ITEM.ID into temp_line_item_id
14:35:11 194  	  FROM
14:35:11 195  	    LINE_ITEM
14:35:11 196  	  WHERE
14:35:11 197  	    LINE_ITEM.ID = in_line_item_id;
14:35:11 198  	  EXCEPTION
14:35:11 199  	    WHEN NO_DATA_FOUND THEN
14:35:11 200  	      RAISE BAD_LINE_ITEM_ID;
14:35:11 201  	END;
14:35:11 202  
14:35:11 203  	-- Update line item
14:35:11 204  	PROCS_LINE_ITEMS_CRU_V16.UPDATE_LINE_ITEM(
14:35:11 205  	  in_line_item_id    => in_line_item_id,
14:35:11 206  	  in_amount	     => in_amount,
14:35:11 207  	  in_discount_amount => in_discount_amount,
14:35:11 208  	  in_taxes_amount    => in_taxes_amount
14:35:11 209  	);
14:35:11 210  
14:35:11 211  EXCEPTION
14:35:11 212  WHEN BAD_LINE_ITEM_ID THEN
14:35:11 213  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 214  	  SPROC_NAME, 'No such line item');
14:35:11 215  WHEN OTHERS THEN
14:35:11 216  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 218  END UPDATE_LINE_ITEM_AMOUNT;
14:35:11 219  
14:35:11 220  /******************************************************************************/
14:35:11 221  
14:35:11 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:35:11 223  /*
14:35:11 224  Throws exceptions:
14:35:11 225  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 226  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 227  */
14:35:11 228  	in_invoice_id  IN NUMBER,
14:35:11 229  	out_result_set OUT SYS_REFCURSOR
14:35:11 230  ) AS
14:35:11 231  -- VARIABLES
14:35:11 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
14:35:11 233  temp_invoice_id NUMBER;
14:35:11 234  
14:35:11 235  -- EXCEPTIONS
14:35:11 236  BAD_INVOICE_ID EXCEPTION;
14:35:11 237  BEGIN
14:35:11 238  
14:35:11 239  	-- Check that given invoice exists
14:35:11 240  	BEGIN
14:35:11 241  	  SELECT
14:35:11 242  	    INVOICE.ID into temp_invoice_id
14:35:11 243  	  FROM
14:35:11 244  	    INVOICE
14:35:11 245  	  WHERE
14:35:11 246  	    INVOICE.ID = in_invoice_id;
14:35:11 247  	  EXCEPTION
14:35:11 248  	    WHEN NO_DATA_FOUND THEN
14:35:11 249  	      RAISE BAD_INVOICE_ID;
14:35:11 250  	END;
14:35:11 251  
14:35:11 252  	-- Select line items
14:35:11 253  	OPEN out_result_set FOR
14:35:11 254  	SELECT
14:35:11 255  	  LINE_ITEM.ID,
14:35:11 256  	  LINE_ITEM.AMOUNT,
14:35:11 257  	  LINE_ITEM.CREATE_DATE,
14:35:11 258  	  LINE_ITEM.CREATED_BY,
14:35:11 259  	  LINE_ITEM.INVOICE_ID,
14:35:11 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
14:35:11 261  	  LINE_ITEM.TAXES_AMOUNT,
14:35:11 262  	  LINE_ITEM.PRODUCT_OFFER_ID
14:35:11 263  	FROM
14:35:11 264  	  LINE_ITEM
14:35:11 265  	WHERE
14:35:11 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
14:35:11 267  
14:35:11 268  EXCEPTION
14:35:11 269  WHEN BAD_INVOICE_ID THEN
14:35:11 270  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 271  	  SPROC_NAME, 'No such invoice');
14:35:11 272  WHEN OTHERS THEN
14:35:11 273  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 275  END GET_INVOICE_LINE_ITEMS;
14:35:11 276  
14:35:11 277  /******************************************************************************/
14:35:11 278  
14:35:11 279  PROCEDURE GET_LINE_ITEM_TAXES (
14:35:11 280  /*
14:35:11 281  Throws exceptions:
14:35:11 282  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 283  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 284  */
14:35:11 285  	in_line_item_id IN  NUMBER,
14:35:11 286  	out_result_set	OUT SYS_REFCURSOR
14:35:11 287  ) AS
14:35:11 288  -- VARIABLES
14:35:11 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
14:35:11 290  temp_line_item_id NUMBER;
14:35:11 291  -- EXCEPTIONS
14:35:11 292  BAD_LINE_ITEM_ID EXCEPTION;
14:35:11 293  BEGIN
14:35:11 294  
14:35:11 295  	-- Check that line item exists
14:35:11 296  	BEGIN
14:35:11 297  	  SELECT
14:35:11 298  	    LINE_ITEM.ID into temp_line_item_id
14:35:11 299  	  FROM
14:35:11 300  	    LINE_ITEM
14:35:11 301  	  WHERE
14:35:11 302  	    LINE_ITEM.ID = in_line_item_id;
14:35:11 303  	  EXCEPTION
14:35:11 304  	    WHEN NO_DATA_FOUND THEN
14:35:11 305  	      RAISE BAD_LINE_ITEM_ID;
14:35:11 306  	END;
14:35:11 307  
14:35:11 308  	-- Get all taxes for given line item
14:35:11 309  	OPEN out_result_set FOR
14:35:11 310  	SELECT
14:35:11 311  	  TAX.ID,
14:35:11 312  	  TAX.CALCULATED_AMOUNT,
14:35:11 313  	  TAX.CREATE_DATE,
14:35:11 314  	  TAX.CREATED_BY,
14:35:11 315  	  TAX.EFFECTIVE_RATE,
14:35:11 316  	  TAX.EXT_RESULT,
14:35:11 317  	  TAX.EXT_TAX_TYPE,
14:35:11 318  	  TAX.IMPOSITION,
14:35:11 319  	  TAX.IMPOSITION_TYPE,
14:35:11 320  	  TAX.JURISDICTION_ID,
14:35:11 321  	  TAX.JURISDICTION_LEVEL_ID,
14:35:11 322  	  TAX.JURISDICTION_NAME,
14:35:11 323  	  TAX.LINE_ITEM_ID,
14:35:11 324  	  TAX.TAX_RULE_ID,
14:35:11 325  	  TAX.TAX_TYPE_ID,
14:35:11 326  	  TAX.TAXABLE_AMOUNT
14:35:11 327  	FROM
14:35:11 328  	  TAX
14:35:11 329  	WHERE
14:35:11 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
14:35:11 331  
14:35:11 332  EXCEPTION
14:35:11 333  WHEN BAD_LINE_ITEM_ID THEN
14:35:11 334  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 335  	  SPROC_NAME, 'No such line item');
14:35:11 336  WHEN OTHERS THEN
14:35:11 337  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 339  END GET_LINE_ITEM_TAXES;
14:35:11 340  
14:35:11 341  -- norlov: #38770
14:35:11 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
14:35:11 343  /*
14:35:11 344  Throws exceptions:
14:35:11 345  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 346  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 347  */
14:35:11 348  	in_line_item_id IN  NUMBER,
14:35:11 349  	out_result_set	OUT SYS_REFCURSOR
14:35:11 350  ) AS
14:35:11 351  -- VARIABLES
14:35:11 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
14:35:11 353  temp_line_item_id NUMBER;
14:35:11 354  -- EXCEPTIONS
14:35:11 355  BAD_LINE_ITEM_ID EXCEPTION;
14:35:11 356  BEGIN
14:35:11 357  
14:35:11 358  	-- Check that line item exists
14:35:11 359  	BEGIN
14:35:11 360  	  SELECT
14:35:11 361  	    LINE_ITEM.ID into temp_line_item_id
14:35:11 362  	  FROM
14:35:11 363  	    LINE_ITEM
14:35:11 364  	  WHERE
14:35:11 365  	    LINE_ITEM.ID = in_line_item_id;
14:35:11 366  	  EXCEPTION
14:35:11 367  	    WHEN NO_DATA_FOUND THEN
14:35:11 368  	      RAISE BAD_LINE_ITEM_ID;
14:35:11 369  	END;
14:35:11 370  
14:35:11 371  	-- Get all discounts for given line item
14:35:11 372  	OPEN out_result_set FOR
14:35:11 373  	SELECT
14:35:11 374  	  DISCOUNT.FIXED_AMOUNT,
14:35:11 375  	  DISCOUNT.NAME,
14:35:11 376  	  DISCOUNT.ID,
14:35:11 377  	  DISCOUNT.PERCENT_AMOUNT
14:35:11 378  	FROM
14:35:11 379  	  DISCOUNT_LINE_ITEM
14:35:11 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
14:35:11 381  	WHERE
14:35:11 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
14:35:11 383  
14:35:11 384  EXCEPTION
14:35:11 385  WHEN BAD_LINE_ITEM_ID THEN
14:35:11 386  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 387  	  SPROC_NAME, 'No such line item');
14:35:11 388  WHEN OTHERS THEN
14:35:11 389  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 391  END GET_LINE_ITEM_DISCOUNTS;
14:35:11 392  /******************************************************************************/
14:35:11 393  
14:35:11 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
14:35:11 395  /*
14:35:11 396  Throws exceptions:
14:35:11 397  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 398  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 399  */
14:35:11 400  	in_line_item_id     IN	NUMBER,
14:35:11 401  	out_amount	    OUT NUMBER
14:35:11 402  ) AS
14:35:11 403  -- VARIABLES
14:35:11 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
14:35:11 405  -- EXCEPTIONS
14:35:11 406  BAD_LINE_ITEM_ID EXCEPTION;
14:35:11 407  BEGIN
14:35:11 408  
14:35:11 409  	BEGIN
14:35:11 410  	  SELECT
14:35:11 411  	    LINE_ITEM.AMOUNT into out_amount
14:35:11 412  	  FROM
14:35:11 413  	    LINE_ITEM
14:35:11 414  	  WHERE
14:35:11 415  	    LINE_ITEM.ID = in_line_item_id;
14:35:11 416  	  EXCEPTION
14:35:11 417  	    WHEN NO_DATA_FOUND THEN
14:35:11 418  	      RAISE BAD_LINE_ITEM_ID;
14:35:11 419  	END;
14:35:11 420  
14:35:11 421  EXCEPTION
14:35:11 422  WHEN BAD_LINE_ITEM_ID THEN
14:35:11 423  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 424  	  SPROC_NAME, 'No such line item');
14:35:11 425  WHEN OTHERS THEN
14:35:11 426  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 428  END CALCULATE_LINE_ITEM_AMOUNT;
14:35:11 429  
14:35:11 430  /******************************************************************************/
14:35:11 431  
14:35:11 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
14:35:11 433  /*
14:35:11 434  Throws exceptions:
14:35:11 435  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 436  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 437  */
14:35:11 438  	in_line_item_id     IN	NUMBER
14:35:11 439  ) RETURN NUMBER AS
14:35:11 440  var_invoice_amount NUMBER(10, 2);
14:35:11 441  BEGIN
14:35:11 442  	PROCS_LINE_ITEMS_V16.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
14:35:11 443  	RETURN var_invoice_amount;
14:35:11 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
14:35:11 445  
14:35:11 446  END PROCS_LINE_ITEMS_V16;
14:35:11 447  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V16" AS
14:35:11   2  
14:35:11   3  /*
14:35:11   4  PROCEDURE INITIALIZE_SYSTEM AS
14:35:11   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
14:35:11   6  -- VARIABLES
14:35:11   7  var_account_ids SYS_REFCURSOR;
14:35:11   8  var_account_id  NUMBER;
14:35:11   9  BEGIN
14:35:11  10  
14:35:11  11  	OPEN var_account_ids FOR
14:35:11  12  	SELECT
14:35:11  13  	  ACCOUNT.ID
14:35:11  14  	FROM
14:35:11  15  	  ACCOUNT;
14:35:11  16  
14:35:11  17  	LOOP
14:35:11  18  	  FETCH var_account_ids into var_account_id;
14:35:11  19  	  EXIT WHEN var_account_ids%NOTFOUND;
14:35:11  20  	  BEGIN
14:35:11  21  	    INITIALIZE_ACCOUNT(var_account_id);
14:35:11  22  	    EXCEPTION
14:35:11  23  	      WHEN OTHERS THEN
14:35:11  24  		NULL;
14:35:11  25  	  END;
14:35:11  26  	END LOOP;
14:35:11  27  
14:35:11  28  END INITIALIZE_SYSTEM;
14:35:11  29  
14:35:11  30  PROCEDURE INITIALIZE_ACCOUNT (
14:35:11  31  	in_account_id IN NUMBER
14:35:11  32  ) AS
14:35:11  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
14:35:11  34  -- EXCEPTIONS
14:35:11  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
14:35:11  36  BEGIN
14:35:11  37  
14:35:11  38  	BEGIN
14:35:11  39  	  INSERT INTO ACCOUNT_LOCK(
14:35:11  40  	    ACCOUNT_ID,
14:35:11  41  	    LOCK_KEY,
14:35:11  42  	    END_DATE,
14:35:11  43  	    CREATED_BY,
14:35:11  44  	    REASON
14:35:11  45  	  ) VALUES (
14:35:11  46  	    in_account_id,
14:35:11  47  	    'initialization key',
14:35:11  48  	    SYSDATE,
14:35:11  49  	    'system',
14:35:11  50  	    'initialization'
14:35:11  51  	  );
14:35:11  52  	  EXCEPTION
14:35:11  53  	    WHEN DUP_VAL_ON_INDEX THEN
14:35:11  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
14:35:11  55  	END;
14:35:11  56  
14:35:11  57  EXCEPTION
14:35:11  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
14:35:11  59  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:11  60  	  SPROC_NAME, 'Account already initialized');
14:35:11  61  WHEN OTHERS THEN
14:35:11  62  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11  64  END;
14:35:11  65  
14:35:11  66  PROCEDURE INITIALIZE_GROUP (
14:35:11  67  	in_group_id IN NUMBER
14:35:11  68  ) AS
14:35:11  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
14:35:11  70  -- VARIABLES
14:35:11  71  var_account_id NUMBER;
14:35:11  72  -- EXCEPTIONS
14:35:11  73  BAD_GROUP_ID		EXCEPTION;
14:35:11  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
14:35:11  75  BEGIN
14:35:11  76  
14:35:11  77  	BEGIN
14:35:11  78  	  SELECT
14:35:11  79  	    ACCOUNT.ID into var_account_id
14:35:11  80  	  FROM
14:35:11  81  	    ACCOUNT
14:35:11  82  	  WHERE
14:35:11  83  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:11  84  	  EXCEPTION
14:35:11  85  	    WHEN NO_DATA_FOUND THEN
14:35:11  86  	     RAISE BAD_GROUP_ID;
14:35:11  87  	END;
14:35:11  88  
14:35:11  89  	BEGIN
14:35:11  90  	  INSERT INTO ACCOUNT_LOCK (
14:35:11  91  	    ACCOUNT_ID,
14:35:11  92  	    LOCK_KEY,
14:35:11  93  	    END_DATE,
14:35:11  94  	    CREATED_BY,
14:35:11  95  	    REASON
14:35:11  96  	  ) VALUES (
14:35:11  97  	    var_account_id,
14:35:11  98  	    'initialization key',
14:35:11  99  	    SYSDATE,
14:35:11 100  	    'system',
14:35:11 101  	    'initialization'
14:35:11 102  	  );
14:35:11 103  	  EXCEPTION
14:35:11 104  	    WHEN DUP_VAL_ON_INDEX THEN
14:35:11 105  	      RAISE GROUP_ALREADY_INITIALIZED;
14:35:11 106  	END;
14:35:11 107  
14:35:11 108  EXCEPTION
14:35:11 109  WHEN BAD_GROUP_ID THEN
14:35:11 110  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 111  	  SPROC_NAME, 'No such account with given group id');
14:35:11 112  WHEN GROUP_ALREADY_INITIALIZED THEN
14:35:11 113  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:11 114  	  SPROC_NAME, 'Group already initialized');
14:35:11 115  WHEN OTHERS THEN
14:35:11 116  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 118  END INITIALIZE_GROUP;
14:35:11 119  */
14:35:11 120  
14:35:11 121  PROCEDURE LOCK_ACCOUNT (
14:35:11 122  	in_group_id    IN NUMBER,
14:35:11 123  	in_lock_key    IN VARCHAR2,
14:35:11 124  	in_seconds_num IN NUMBER,
14:35:11 125  	in_created_by  IN VARCHAR2,
14:35:11 126  	in_reason      IN VARCHAR2
14:35:11 127  ) AS
14:35:11 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
14:35:11 129  -- CONSTANTS
14:35:11 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
14:35:11 131  -- VARIABLES
14:35:11 132  var_account_id NUMBER;
14:35:11 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11 134  var_date		DATE := SYSDATE;
14:35:11 135  var_lock_end_date DATE;
14:35:11 136  -- EXCEPTIONS
14:35:11 137  BAD_GROUP_ID   EXCEPTION;
14:35:11 138  ALREADY_LOCKED EXCEPTION;
14:35:11 139  BEGIN
14:35:11 140  
14:35:11 141  	BEGIN
14:35:11 142  	  SELECT
14:35:11 143  	    ACCOUNT.ID into var_account_id
14:35:11 144  	  FROM
14:35:11 145  	    ACCOUNT
14:35:11 146  	  WHERE
14:35:11 147  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:11 148  	  EXCEPTION
14:35:11 149  	    WHEN NO_DATA_FOUND THEN
14:35:11 150  	      RAISE BAD_GROUP_ID;
14:35:11 151  	END;
14:35:11 152  
14:35:11 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
14:35:11 154  
14:35:11 155  	BEGIN
14:35:11 156  
14:35:11 157  	  INSERT INTO ACCOUNT_LOCK (
14:35:11 158  	    ACCOUNT_ID,
14:35:11 159  	    LOCK_KEY,
14:35:11 160  	    END_DATE,
14:35:11 161  	    CREATED_BY,
14:35:11 162  	    REASON
14:35:11 163  	  ) VALUES (
14:35:11 164  	    var_account_id,
14:35:11 165  	    in_lock_key,
14:35:11 166  	    var_lock_end_date,
14:35:11 167  	    in_created_by,
14:35:11 168  	    in_reason
14:35:11 169  	  );
14:35:11 170  
14:35:11 171  	  EXCEPTION
14:35:11 172  	    WHEN DUP_VAL_ON_INDEX THEN
14:35:11 173  	      -- This rows was created before... I will try to update it
14:35:11 174  	      BEGIN
14:35:11 175  
14:35:11 176  		UPDATE
14:35:11 177  		  ACCOUNT_LOCK
14:35:11 178  		SET
14:35:11 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
14:35:11 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
14:35:11 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
14:35:11 182  		  ACCOUNT_LOCK.REASON = in_reason
14:35:11 183  		WHERE
14:35:11 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
14:35:11 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
14:35:11 186  
14:35:11 187  		IF SQL%ROWCOUNT = 0 THEN
14:35:11 188  		  RAISE ALREADY_LOCKED;
14:35:11 189  		END IF;
14:35:11 190  
14:35:11 191  	      END;
14:35:11 192  	END;
14:35:11 193  
14:35:11 194  EXCEPTION
14:35:11 195  WHEN BAD_GROUP_ID THEN
14:35:11 196  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 197  	  SPROC_NAME, 'No such group id');
14:35:11 198  WHEN ALREADY_LOCKED THEN
14:35:11 199  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:11 200  	  SPROC_NAME, 'Account already locked');
14:35:11 201  WHEN OTHERS THEN
14:35:11 202  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 204  END LOCK_ACCOUNT;
14:35:11 205  
14:35:11 206  /******************************************************************************/
14:35:11 207  
14:35:11 208  PROCEDURE RELEASE_LOCK (
14:35:11 209  	in_group_id IN NUMBER,
14:35:11 210  	in_lock_key IN VARCHAR2
14:35:11 211  ) AS
14:35:11 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
14:35:11 213  -- VARIABLES
14:35:11 214  var_account_id NUMBER;
14:35:11 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:35:11 216  var_date DATE := SYSDATE;
14:35:11 217  -- EXCEPTIONS
14:35:11 218  BAD_GROUP_ID		EXCEPTION;
14:35:11 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
14:35:11 220  BEGIN
14:35:11 221  
14:35:11 222  	BEGIN
14:35:11 223  	  SELECT
14:35:11 224  	    ACCOUNT.ID into var_account_id
14:35:11 225  	  FROM
14:35:11 226  	    ACCOUNT
14:35:11 227  	  WHERE
14:35:11 228  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:11 229  	  EXCEPTION
14:35:11 230  	    WHEN NO_DATA_FOUND THEN
14:35:11 231  	      RAISE BAD_GROUP_ID;
14:35:11 232  	END;
14:35:11 233  
14:35:11 234  	UPDATE
14:35:11 235  	  ACCOUNT_LOCK
14:35:11 236  	SET
14:35:11 237  	  ACCOUNT_LOCK.END_DATE = var_date
14:35:11 238  	WHERE
14:35:11 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
14:35:11 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
14:35:11 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
14:35:11 242  
14:35:11 243  	IF SQL%ROWCOUNT = 0 THEN
14:35:11 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
14:35:11 245  	END IF;
14:35:11 246  
14:35:11 247  EXCEPTION
14:35:11 248  WHEN BAD_GROUP_ID THEN
14:35:11 249  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 250  	  SPROC_NAME, 'No such group id');
14:35:11 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
14:35:11 252  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:11 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
14:35:11 254  WHEN OTHERS THEN
14:35:11 255  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 256  	  SPROC_NAME, 'Unknown error');
14:35:11 257  END RELEASE_LOCK;
14:35:11 258  
14:35:11 259  END PROCS_LOCKING_V16;
14:35:11 260  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.00
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:35:11   4  /*
14:35:11   5  Throws exceptions:
14:35:11   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11   8  */
14:35:11   9  	  in_offer_chain_id IN	 NUMBER,
14:35:11  10  	  out_result_set    OUT  SYS_REFCURSOR
14:35:11  11  ) AS
14:35:11  12  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_BY_ID';
14:35:11  13  BEGIN
14:35:11  14  
14:35:11  15  	-- Get offer chain informations
14:35:11  16  	OPEN out_result_set FOR
14:35:11  17  	  SELECT
14:35:11  18  	    OC.ID,
14:35:11  19  	    OC.NAME,
14:35:11  20  	    OC.ADOPTABILITY_WINDOW_START_DATE,
14:35:11  21  	    OC.ADOPTABILITY_WINDOW_END_DATE,
14:35:11  22  	    OC.DESCRIPTION,
14:35:11  23  	    OC.IS_GIFT_CERTIFICATE,
14:35:11  24  	    OC.OFFER_CHAIN_STATUS_ID,
14:35:11  25  	    OC.PRODUCT_URI,
14:35:11  26  	    OC.BILLING_SOURCE_ID,
14:35:11  27  	    OC.VENDOR_SOURCE_ID,
14:35:11  28  	    OC.GROUP_ACCOUNT_TYPE_ID,
14:35:11  29  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
14:35:11  30  	  FROM
14:35:11  31  	    OFFER_CHAIN OC
14:35:11  32  	  WHERE
14:35:11  33  	    OC.ID = in_offer_chain_id
14:35:11  34  	    AND ROWNUM <= 1;
14:35:11  35  
14:35:11  36  EXCEPTION
14:35:11  37  WHEN OTHERS THEN
14:35:11  38  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  39  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11  40  END GET_OFFER_CHAIN_BY_ID;
14:35:11  41  
14:35:11  42  /******************************************************************************/
14:35:11  43  
14:35:11  44  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
14:35:11  45  /*
14:35:11  46  Throws exceptions:
14:35:11  47  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  48  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:11  49  */
14:35:11  50  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:35:11  51  	out_result_set	   OUT SYS_REFCURSOR
14:35:11  52  ) AS
14:35:11  53  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
14:35:11  54  -- EXCEPTIONS
14:35:11  55  BAD_OFFER_CHAINS_IDS EXCEPTION;
14:35:11  56  BEGIN
14:35:11  57  
14:35:11  58  	IF (in_offer_chain_ids IS NULL) THEN
14:35:11  59  	  RAISE BAD_OFFER_CHAINS_IDS;
14:35:11  60  	END IF;
14:35:11  61  
14:35:11  62  	OPEN out_result_set FOR
14:35:11  63  	SELECT
14:35:11  64  	  OCH.ID,
14:35:11  65  	  OCH.NAME,
14:35:11  66  	  OCH.DESCRIPTION,
14:35:11  67  	  OCH.OFFER_CHAIN_STATUS_ID,
14:35:11  68  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
14:35:11  69  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
14:35:11  70  	  OCH.IS_GIFT_CERTIFICATE,
14:35:11  71  	  PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
14:35:11  72  	  PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
14:35:11  73  	  OCH.VENDOR_SOURCE_ID,
14:35:11  74  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
14:35:11  75  	FROM
14:35:11  76  	  OFFER_CHAIN OCH
14:35:11  77  	WHERE
14:35:11  78  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
14:35:11  79  
14:35:11  80  EXCEPTION
14:35:11  81  WHEN BAD_OFFER_CHAINS_IDS THEN
14:35:11  82  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:11  83  	  SPROC_NAME, 'Invalid offer chains ids');
14:35:11  84  WHEN OTHERS THEN
14:35:11  85  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  86  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11  87  END GET_OFFER_CHAINS_BY_IDS;
14:35:11  88  
14:35:11  89  /******************************************************************************/
14:35:11  90  
14:35:11  91  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
14:35:11  92  /*
14:35:11  93  Throws exceptions:
14:35:11  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  95  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:11  96  */
14:35:11  97  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:35:11  98  	out_result_set	   OUT SYS_REFCURSOR
14:35:11  99  ) AS
14:35:11 100  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
14:35:11 101  -- EXCEPTIONS
14:35:11 102  BAD_OFFER_CHAINS_IDS EXCEPTION;
14:35:11 103  BEGIN
14:35:11 104  
14:35:11 105  	IF (in_offer_chain_ids IS NULL) THEN
14:35:11 106  	  RAISE BAD_OFFER_CHAINS_IDS;
14:35:11 107  	END IF;
14:35:11 108  
14:35:11 109  	OPEN out_result_set FOR
14:35:11 110  	SELECT
14:35:11 111  	  OOCH.OFFER_CHAIN_ID,
14:35:11 112  	  PO.PRODUCT_ID
14:35:11 113  	FROM
14:35:11 114  	  PRODUCT_OFFERING PO
14:35:11 115  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
14:35:11 116  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
14:35:11 117  	WHERE
14:35:11 118  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
14:35:11 119  
14:35:11 120  EXCEPTION
14:35:11 121  WHEN BAD_OFFER_CHAINS_IDS THEN
14:35:11 122  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:11 123  	  SPROC_NAME, 'Invalid offer chains ids');
14:35:11 124  WHEN OTHERS THEN
14:35:11 125  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 127  END GET_OFFER_CHAINS_PRODUCTS;
14:35:11 128  
14:35:11 129  /******************************************************************************/
14:35:11 130  
14:35:11 131  PROCEDURE GET_OFFER_CHAINS_OFFERS (
14:35:11 132  /*
14:35:11 133  Throws exceptions:
14:35:11 134  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 135  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:11 136  */
14:35:11 137  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:35:11 138  	out_result_set	   OUT SYS_REFCURSOR
14:35:11 139  ) AS
14:35:11 140  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
14:35:11 141  -- EXCEPTIONS
14:35:11 142  BAD_OFFER_CHAINS_IDS EXCEPTION;
14:35:11 143  BEGIN
14:35:11 144  
14:35:11 145  	IF (in_offer_chain_ids IS NULL) THEN
14:35:11 146  	  RAISE BAD_OFFER_CHAINS_IDS;
14:35:11 147  	END IF;
14:35:11 148  
14:35:11 149  	OPEN out_result_set FOR
14:35:11 150  	SELECT
14:35:11 151  	  OOCH.OFFER_CHAIN_ID,
14:35:11 152  	  OOCH.OFFER_ID,
14:35:11 153  	  OOCH.INDEX_VALUE,
14:35:11 154  	  OOCH.NUM_RECURRENCES,
14:35:11 155  	  O.ENTITLEMENT_DURATION,
14:35:11 156  	  PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
14:35:11 157  	FROM
14:35:11 158  	  OFFER O
14:35:11 159  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
14:35:11 160  	WHERE
14:35:11 161  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
14:35:11 162  
14:35:11 163  EXCEPTION
14:35:11 164  WHEN BAD_OFFER_CHAINS_IDS THEN
14:35:11 165  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:11 166  	  SPROC_NAME, 'Invalid offer chains ids');
14:35:11 167  WHEN OTHERS THEN
14:35:11 168  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 169  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 170  END GET_OFFER_CHAINS_OFFERS;
14:35:11 171  
14:35:11 172  /******************************************************************************/
14:35:11 173  
14:35:11 174  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
14:35:11 175  /*
14:35:11 176  Throws exceptions (codes):
14:35:11 177  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 178  */
14:35:11 179  	in_product_id  IN  NUMBER,
14:35:11 180  	out_result_set OUT SYS_REFCURSOR
14:35:11 181  )AS
14:35:11 182  -- VARIBLES
14:35:11 183  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
14:35:11 184  temp_product_id NUMBER;
14:35:11 185  
14:35:11 186  -- EXCEPTIONS
14:35:11 187  BAD_PRODUCT_ID EXCEPTION;
14:35:11 188  BEGIN
14:35:11 189  
14:35:11 190  	-- Check that given product exists
14:35:11 191  	BEGIN
14:35:11 192  	  SELECT
14:35:11 193  	    PRODUCT.ID into temp_product_id
14:35:11 194  	  FROM
14:35:11 195  	    PRODUCT
14:35:11 196  	  WHERE
14:35:11 197  	    PRODUCT.ID = in_product_id;
14:35:11 198  	  EXCEPTION
14:35:11 199  	    WHEN NO_DATA_FOUND THEN
14:35:11 200  	      RAISE BAD_PRODUCT_ID;
14:35:11 201  	END;
14:35:11 202  
14:35:11 203  	-- Select all offer chains that contains given product
14:35:11 204  	OPEN out_result_set FOR
14:35:11 205  	SELECT
14:35:11 206  	  OFFER_CHAIN.ID,
14:35:11 207  	  OFFER_CHAIN.NAME,
14:35:11 208  	  OFFER_CHAIN.DESCRIPTION,
14:35:11 209  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
14:35:11 210  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
14:35:11 211  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
14:35:11 212  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
14:35:11 213  	FROM
14:35:11 214  	  OFFER_CHAIN
14:35:11 215  	WHERE
14:35:11 216  	  OFFER_CHAIN.ID IN (
14:35:11 217  	    SELECT DISTINCT
14:35:11 218  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
14:35:11 219  	    FROM
14:35:11 220  	      OFFER_OFFER_CHAIN
14:35:11 221  	    WHERE
14:35:11 222  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
14:35:11 223  		SELECT DISTINCT
14:35:11 224  		  OFFER_PRODUCT_OFFERING.OFFER_ID
14:35:11 225  		FROM
14:35:11 226  		  OFFER_PRODUCT_OFFERING
14:35:11 227  		WHERE
14:35:11 228  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
14:35:11 229  	      )
14:35:11 230  	  );
14:35:11 231  
14:35:11 232  EXCEPTION
14:35:11 233  WHEN BAD_PRODUCT_ID THEN
14:35:11 234  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 235  	  SPROC_NAME, 'No such product');
14:35:11 236  WHEN OTHERS THEN
14:35:11 237  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 239  END GET_OFFER_CHAINS_BY_PRODUCT;
14:35:11 240  
14:35:11 241  /******************************************************************************/
14:35:11 242  
14:35:11 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
14:35:11 244  /*
14:35:11 245  Throws exceptions (codes):
14:35:11 246  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 247  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 248  */
14:35:11 249  	in_offer_chain_id IN NUMBER,
14:35:11 250  	out_price	  OUT NUMBER
14:35:11 251  ) AS
14:35:11 252  -- VARIABLES
14:35:11 253  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
14:35:11 254  temp_offer_chain_id NUMBER;
14:35:11 255  
14:35:11 256  -- EXCEPTION
14:35:11 257  BAD_OFFER_CHAIN_ID       EXCEPTION;
14:35:11 258  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
14:35:11 259  EXCEPTION_MESSAGE        VARCHAR2(1024);
14:35:11 260  BEGIN
14:35:11 261  
14:35:11 262  	-- Check that given offer chain exists
14:35:11 263  	BEGIN
14:35:11 264  	  SELECT
14:35:11 265  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 266  	  FROM
14:35:11 267  	    OFFER_CHAIN
14:35:11 268  	  WHERE
14:35:11 269  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:35:11 270  
14:35:11 271  	  EXCEPTION
14:35:11 272  	  WHEN NO_DATA_FOUND THEN
14:35:11 273  	    RAISE BAD_OFFER_CHAIN_ID;
14:35:11 274  	END;
14:35:11 275  
14:35:11 276  	BEGIN
14:35:11 277  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
14:35:11 278  	  EXCEPTION
14:35:11 279  	    WHEN OTHERS THEN
14:35:11 280  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 281  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
14:35:11 282  	END;
14:35:11 283  
14:35:11 284  EXCEPTION
14:35:11 285  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:11 286  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 287  	  SPROC_NAME, 'Bad offer chain id');
14:35:11 288  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
14:35:11 289  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 290  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
14:35:11 291  WHEN OTHERS THEN
14:35:11 292  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 293  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 294  END GET_OFFER_CHAIN_PRICE;
14:35:11 295  
14:35:11 296  /******************************************************************************/
14:35:11 297  
14:35:11 298  PROCEDURE GET_FIRST_OFFER(
14:35:11 299  /*
14:35:11 300  Throws exceptions (codes):
14:35:11 301  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 302  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 303  */
14:35:11 304  	in_offer_chain_id IN  NUMBER,
14:35:11 305  	out_offer_id	  OUT NUMBER
14:35:11 306  ) AS
14:35:11 307  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
14:35:11 308  BEGIN
14:35:11 309  	-- Seect first offer in offer chain
14:35:11 310  	SELECT
14:35:11 311  	  OFFER_ID into out_offer_id
14:35:11 312  	FROM (
14:35:11 313  	  SELECT
14:35:11 314  	    OFFER_OFFER_CHAIN.OFFER_ID
14:35:11 315  	  FROM
14:35:11 316  	    OFFER_OFFER_CHAIN
14:35:11 317  	  WHERE
14:35:11 318  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 319  	  ORDER BY
14:35:11 320  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
14:35:11 321  	)
14:35:11 322  	WHERE
14:35:11 323  	  ROWNUM <= 1;
14:35:11 324  
14:35:11 325  EXCEPTION
14:35:11 326  WHEN NO_DATA_FOUND THEN
14:35:11 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 328  	  SPROC_NAME, 'No such offer chain');
14:35:11 329  WHEN OTHERS THEN
14:35:11 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 332  END GET_FIRST_OFFER;
14:35:11 333  
14:35:11 334  /******************************************************************************/
14:35:11 335  
14:35:11 336  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
14:35:11 337  /*
14:35:11 338  Throws exceptions (codes):
14:35:11 339  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 340  */
14:35:11 341  	out_result_set OUT SYS_REFCURSOR
14:35:11 342  ) AS
14:35:11 343  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
14:35:11 344  BEGIN
14:35:11 345  	OPEN out_result_set FOR
14:35:11 346  	SELECT
14:35:11 347  	  OFFER_CHAIN.ID,
14:35:11 348  	  OFFER_CHAIN.NAME,
14:35:11 349  	  OFFER_CHAIN.DESCRIPTION,
14:35:11 350  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
14:35:11 351  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
14:35:11 352  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
14:35:11 353  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
14:35:11 354  	  PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
14:35:11 355  	  PRODUCT_OFFERING.PRODUCT_ID
14:35:11 356  	FROM
14:35:11 357  	  OFFER_CHAIN,
14:35:11 358  	  OFFER_OFFER_CHAIN,
14:35:11 359  	  OFFER_PRODUCT_OFFERING,
14:35:11 360  	  PRODUCT_OFFERING
14:35:11 361  	WHERE
14:35:11 362  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
14:35:11 363  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
14:35:11 364  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:35:11 365  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE;
14:35:11 366  
14:35:11 367  EXCEPTION
14:35:11 368  WHEN OTHERS THEN
14:35:11 369  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 370  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 371  END GET_ACTIVE_OFFER_CHAINS;
14:35:11 372  
14:35:11 373  /******************************************************************************/
14:35:11 374  
14:35:11 375  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
14:35:11 376  /*
14:35:11 377  Throws exceptions (codes):
14:35:11 378  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 379  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 380  */
14:35:11 381  	in_offer_chain_id IN NUMBER,
14:35:11 382  	out_result_set	  OUT SYS_REFCURSOR
14:35:11 383  ) AS
14:35:11 384  -- VARIABLES
14:35:11 385  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
14:35:11 386  temp_offer_chain_id NUMBER;
14:35:11 387  
14:35:11 388  -- EXCEPTIONS
14:35:11 389  BAD_OFFER_CHAIN EXCEPTION;
14:35:11 390  BEGIN
14:35:11 391  
14:35:11 392  	-- Check that offer chain exists
14:35:11 393  	BEGIN
14:35:11 394  	  SELECT
14:35:11 395  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 396  	  FROM
14:35:11 397  	    OFFER_CHAIN
14:35:11 398  	  WHERE
14:35:11 399  	    OFFER_CHAIN.ID = in_offer_chain_id
14:35:11 400  	    AND ROWNUM <= 1;
14:35:11 401  
14:35:11 402  	  EXCEPTION
14:35:11 403  	    WHEN OTHERS THEN
14:35:11 404  	      RAISE BAD_OFFER_CHAIN;
14:35:11 405  	END;
14:35:11 406  
14:35:11 407  	-- Select all products for given offer chain
14:35:11 408  	OPEN out_result_set FOR
14:35:11 409  	SELECT DISTINCT
14:35:11 410  	  PRODUCT_OFFERING.PRODUCT_ID
14:35:11 411  	FROM
14:35:11 412  	  PRODUCT_OFFERING
14:35:11 413  	WHERE
14:35:11 414  	  PRODUCT_OFFERING.ID IN (
14:35:11 415  	    SELECT DISTINCT
14:35:11 416  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:35:11 417  	    FROM
14:35:11 418  	      OFFER_PRODUCT_OFFERING
14:35:11 419  	    WHERE
14:35:11 420  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:35:11 421  		SELECT
14:35:11 422  		  OFFER_OFFER_CHAIN.OFFER_ID
14:35:11 423  		FROM
14:35:11 424  		  OFFER_OFFER_CHAIN
14:35:11 425  		WHERE
14:35:11 426  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 427  	      )
14:35:11 428  	  );
14:35:11 429  
14:35:11 430  EXCEPTION
14:35:11 431  WHEN BAD_OFFER_CHAIN THEN
14:35:11 432  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 433  	  SPROC_NAME, 'No such offer chain');
14:35:11 434  WHEN OTHERS THEN
14:35:11 435  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 437  END GET_OFFER_CHAIN_PRODUCTS;
14:35:11 438  
14:35:11 439  /******************************************************************************/
14:35:11 440  
14:35:11 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
14:35:11 442  /*
14:35:11 443  Throws exceptions (codes):
14:35:11 444  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 445  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 446  */
14:35:11 447  	in_offer_chain_id	  IN NUMBER,
14:35:11 448  	in_offer_chain_start_date IN DATE
14:35:11 449  ) RETURN DATE AS
14:35:11 450  -- VARIABLES
14:35:11 451  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
14:35:11 452  temp_offer_chain_id    NUMBER;
14:35:11 453  var_offer_chain_length NUMBER;
14:35:11 454  var_offer_duration     VARCHAR2(30);
14:35:11 455  var_offer_recurrences  NUMBER;
14:35:11 456  var_end_date	     DATE;
14:35:11 457  
14:35:11 458  var_offer_ym_interval INTERVAL YEAR TO MONTH;
14:35:11 459  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
14:35:11 460  var_offer_years	    NUMBER;
14:35:11 461  var_offer_months	    NUMBER;
14:35:11 462  var_offer_days	    NUMBER;
14:35:11 463  var_infinity_offers_count NUMBER;
14:35:11 464  
14:35:11 465  var_offers_set SYS_REFCURSOR;
14:35:11 466  
14:35:11 467  -- EXCEPTIONS
14:35:11 468  BAD_OFFER_CHAIN_ID EXCEPTION;
14:35:11 469  BEGIN
14:35:11 470  
14:35:11 471  	var_end_date := in_offer_chain_start_date;
14:35:11 472  
14:35:11 473  	-- Check that offer chain exists
14:35:11 474  	BEGIN
14:35:11 475  	  SELECT
14:35:11 476  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 477  	  FROM
14:35:11 478  	    OFFER_CHAIN
14:35:11 479  	  WHERE
14:35:11 480  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:35:11 481  	  EXCEPTION
14:35:11 482  	    WHEN NO_DATA_FOUND
14:35:11 483  	      THEN RAISE BAD_OFFER_CHAIN_ID;
14:35:11 484  	END;
14:35:11 485  
14:35:11 486  	SELECT
14:35:11 487  	  COUNT(*) into var_infinity_offers_count
14:35:11 488  	FROM
14:35:11 489  	  OFFER_OFFER_CHAIN
14:35:11 490  	WHERE
14:35:11 491  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 492  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V16.OFFER_REC_INFINITY;
14:35:11 493  
14:35:11 494  	IF var_infinity_offers_count > 0 THEN
14:35:11 495  	  -- Offer chain contains offers with infinity num of recurrences
14:35:11 496  	  RETURN NULL;
14:35:11 497  	END IF;
14:35:11 498  
14:35:11 499  	-- Select offers durations
14:35:11 500  	OPEN var_offers_set FOR
14:35:11 501  	SELECT
14:35:11 502  	  OFFER.ENTITLEMENT_DURATION,
14:35:11 503  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
14:35:11 504  	FROM
14:35:11 505  	  OFFER_OFFER_CHAIN
14:35:11 506  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:35:11 507  	WHERE
14:35:11 508  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
14:35:11 509  
14:35:11 510  	-- Calculate sum of offers durations
14:35:11 511  	LOOP
14:35:11 512  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
14:35:11 513  	  EXIT WHEN var_offers_set%NOTFOUND;
14:35:11 514  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
14:35:11 515  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
14:35:11 516  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
14:35:11 517  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
14:35:11 518  	END LOOP;
14:35:11 519  
14:35:11 520  	RETURN var_end_date;
14:35:11 521  
14:35:11 522  EXCEPTION
14:35:11 523  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:11 524  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 525  	  SPROC_NAME, 'No such offer chain');
14:35:11 526  WHEN OTHERS THEN
14:35:11 527  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 528  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 529  END CALCULATE_OFFER_CHAIN_END_DATE;
14:35:11 530  
14:35:11 531  /******************************************************************************/
14:35:11 532  
14:35:11 533  FUNCTION CALCULATE_OFFER_AMOUNT (
14:35:11 534  	in_offer_id IN NUMBER
14:35:11 535  ) RETURN NUMBER AS
14:35:11 536  -- VARIABLES
14:35:11 537  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
14:35:11 538  temp_offer_id NUMBER;
14:35:11 539  
14:35:11 540  var_product_offering_set	    SYS_REFCURSOR;
14:35:11 541  var_product_offering_id	    NUMBER;
14:35:11 542  var_product_offering_price    NUMBER(10,6);
14:35:11 543  var_product_offering_t_amount NUMBER(10,6);
14:35:11 544  var_product_offering_quantity NUMBER;
14:35:11 545  
14:35:11 546  var_total_amount NUMBER(10,6);
14:35:11 547  var_final_amount NUMBER(10,2);
14:35:11 548  
14:35:11 549  var_percent_discount NUMBER(10,2);
14:35:11 550  var_fixed_discount NUMBER(10,6);
14:35:11 551  
14:35:11 552  -- EXCEPTIONS
14:35:11 553  BAD_OFFER_ID EXCEPTION;
14:35:11 554  BEGIN
14:35:11 555  
14:35:11 556  	BEGIN
14:35:11 557  	  SELECT
14:35:11 558  	    OFFER.ID into temp_offer_id
14:35:11 559  	  FROM
14:35:11 560  	    OFFER
14:35:11 561  	  WHERE
14:35:11 562  	    OFFER.ID = in_offer_id;
14:35:11 563  	  EXCEPTION
14:35:11 564  	    WHEN NO_DATA_FOUND THEN
14:35:11 565  	      RAISE BAD_OFFER_ID;
14:35:11 566  	END;
14:35:11 567  
14:35:11 568  	OPEN var_product_offering_set FOR
14:35:11 569  	SELECT
14:35:11 570  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
14:35:11 571  	  PRODUCT_OFFERING.UNIT_PRICE,
14:35:11 572  	  PRODUCT_OFFERING.QUANTITY
14:35:11 573  	FROM
14:35:11 574  	  OFFER_PRODUCT_OFFERING
14:35:11 575  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:35:11 576  	WHERE
14:35:11 577  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
14:35:11 578  
14:35:11 579  	var_total_amount := 0;
14:35:11 580  
14:35:11 581  	LOOP
14:35:11 582  	  FETCH var_product_offering_set into
14:35:11 583  	    var_product_offering_id,
14:35:11 584  	    var_product_offering_price,
14:35:11 585  	    var_product_offering_quantity;
14:35:11 586  	  EXIT WHEN var_product_offering_set%NOTFOUND;
14:35:11 587  
14:35:11 588  	  SELECT
14:35:11 589  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
14:35:11 590  	  FROM
14:35:11 591  	    DISCOUNT_PRODUCT_OFFERING
14:35:11 592  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:35:11 593  	  WHERE
14:35:11 594  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:35:11 595  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
14:35:11 596  
14:35:11 597  	  SELECT
14:35:11 598  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
14:35:11 599  	  FROM
14:35:11 600  	    DISCOUNT_PRODUCT_OFFERING
14:35:11 601  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:35:11 602  	  WHERE
14:35:11 603  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:35:11 604  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
14:35:11 605  
14:35:11 606  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
14:35:11 607  
14:35:11 608  	  IF var_percent_discount IS NOT NULL THEN
14:35:11 609  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
14:35:11 610  	  END IF;
14:35:11 611  
14:35:11 612  	  IF var_fixed_discount IS NOT NULL THEN
14:35:11 613  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
14:35:11 614  	  END IF;
14:35:11 615  
14:35:11 616  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
14:35:11 617  	END LOOP;
14:35:11 618  	var_final_amount := var_total_amount;
14:35:11 619  	RETURN var_final_amount;
14:35:11 620  
14:35:11 621  EXCEPTION
14:35:11 622  WHEN BAD_OFFER_ID THEN
14:35:11 623  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 624  	  SPROC_NAME, 'No such offer');
14:35:11 625  WHEN OTHERS THEN
14:35:11 626  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 627  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 628  END CALCULATE_OFFER_AMOUNT;
14:35:11 629  
14:35:11 630  /******************************************************************************/
14:35:11 631  
14:35:11 632  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
14:35:11 633  	in_offer_chain_id IN NUMBER
14:35:11 634  ) RETURN NUMBER AS
14:35:11 635  -- VARIABLES
14:35:11 636  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
14:35:11 637  temp_offer_chain_id    NUMBER;
14:35:11 638  var_first_offer_id     NUMBER;
14:35:11 639  -- EXCEPTIONS
14:35:11 640  BAD_OFFER_CHAIN_ID      EXCEPTION;
14:35:11 641  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
14:35:11 642  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:35:11 643  BEGIN
14:35:11 644  
14:35:11 645  	BEGIN
14:35:11 646  	  SELECT
14:35:11 647  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 648  	  FROM
14:35:11 649  	    OFFER_CHAIN
14:35:11 650  	  WHERE
14:35:11 651  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:35:11 652  	  EXCEPTION
14:35:11 653  	    WHEN NO_DATA_FOUND THEN
14:35:11 654  	      RAISE BAD_OFFER_CHAIN_ID;
14:35:11 655  	END;
14:35:11 656  
14:35:11 657  	BEGIN
14:35:11 658  	  PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(
14:35:11 659  	    in_offer_chain_id => in_offer_chain_id,
14:35:11 660  	    out_offer_id      => var_first_offer_id
14:35:11 661  	  );
14:35:11 662  	  EXCEPTION
14:35:11 663  	    WHEN OTHERS THEN
14:35:11 664  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 665  	      RAISE CAN_NOT_GET_FIRST_OFFER;
14:35:11 666  	END;
14:35:11 667  
14:35:11 668  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
14:35:11 669  
14:35:11 670  EXCEPTION
14:35:11 671  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:11 672  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 673  	  SPROC_NAME, 'No such offer chain');
14:35:11 674  WHEN CAN_NOT_GET_FIRST_OFFER THEN
14:35:11 675  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 676  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
14:35:11 677  WHEN OTHERS THEN
14:35:11 678  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 680  END CALCULATE_OFFER_CHAIN_AMOUNT;
14:35:11 681  
14:35:11 682  /******************************************************************************/
14:35:11 683  
14:35:11 684  FUNCTION GET_FIRST_OFFER_INDEX (
14:35:11 685  	in_offer_chain_id IN NUMBER
14:35:11 686  ) RETURN NUMBER AS
14:35:11 687  -- VARIABLES
14:35:11 688  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
14:35:11 689  var_first_offer_index NUMBER;
14:35:11 690  BEGIN
14:35:11 691  
14:35:11 692  	SELECT
14:35:11 693  	  INDEX_VALUE into var_first_offer_index
14:35:11 694  	FROM (
14:35:11 695  	  SELECT
14:35:11 696  	    OFFER_OFFER_CHAIN.INDEX_VALUE
14:35:11 697  	  FROM
14:35:11 698  	    OFFER_OFFER_CHAIN
14:35:11 699  	  WHERE
14:35:11 700  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 701  	  ORDER BY
14:35:11 702  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
14:35:11 703  	)
14:35:11 704  	WHERE
14:35:11 705  	  ROWNUM <= 1;
14:35:11 706  
14:35:11 707  	RETURN var_first_offer_index;
14:35:11 708  
14:35:11 709  EXCEPTION
14:35:11 710  WHEN NO_DATA_FOUND THEN
14:35:11 711  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 712  	  SPROC_NAME, 'No such offer chain');
14:35:11 713  WHEN OTHERS THEN
14:35:11 714  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 715  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 716  END GET_FIRST_OFFER_INDEX;
14:35:11 717  
14:35:11 718  /******************************************************************************/
14:35:11 719  
14:35:11 720  FUNCTION GET_NEXT_OFFER_INDEX (
14:35:11 721  /*
14:35:11 722  NULL, if not exists
14:35:11 723  */
14:35:11 724  	in_offer_chain_id	     IN NUMBER,
14:35:11 725  	in_offer_chain_current_index IN NUMBER
14:35:11 726  ) RETURN NUMBER AS
14:35:11 727  -- VARIABLES
14:35:11 728  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
14:35:11 729  temp_offer_chain_id	     NUMBER;
14:35:11 730  temp_offer_chain_current_index NUMBER;
14:35:11 731  var_result		     NUMBER;
14:35:11 732  -- EXCEPTIONS
14:35:11 733  BAD_OFFER_CHAIN_ID      EXCEPTION;
14:35:11 734  BAD_CURRENT_INDEX_VALUE EXCEPTION;
14:35:11 735  BEGIN
14:35:11 736  
14:35:11 737  	-- Check that offer chain exists
14:35:11 738  	BEGIN
14:35:11 739  	  SELECT
14:35:11 740  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 741  	  FROM
14:35:11 742  	    OFFER_CHAIN
14:35:11 743  	  WHERE
14:35:11 744  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:35:11 745  	  EXCEPTION
14:35:11 746  	    WHEN NO_DATA_FOUND THEN
14:35:11 747  	      RAISE BAD_OFFER_CHAIN_ID;
14:35:11 748  	END;
14:35:11 749  
14:35:11 750  	-- Check that current offer index exists
14:35:11 751  	BEGIN
14:35:11 752  	  SELECT
14:35:11 753  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
14:35:11 754  	  FROM
14:35:11 755  	    OFFER_OFFER_CHAIN
14:35:11 756  	  WHERE
14:35:11 757  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 758  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
14:35:11 759  	    -- TODO: delete next line
14:35:11 760  	    AND ROWNUM <= 1;
14:35:11 761  	  EXCEPTION
14:35:11 762  	    WHEN NO_DATA_FOUND THEN
14:35:11 763  	      RAISE BAD_CURRENT_INDEX_VALUE;
14:35:11 764  	END;
14:35:11 765  
14:35:11 766  	-- Get next offer index
14:35:11 767  	BEGIN
14:35:11 768  	  SELECT
14:35:11 769  	    INDEX_VALUE into var_result
14:35:11 770  	  FROM (
14:35:11 771  	    SELECT
14:35:11 772  	      OFFER_OFFER_CHAIN.INDEX_VALUE
14:35:11 773  	    FROM
14:35:11 774  	      OFFER_OFFER_CHAIN
14:35:11 775  	    WHERE
14:35:11 776  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 777  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
14:35:11 778  	    ORDER BY
14:35:11 779  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
14:35:11 780  	  )
14:35:11 781  	  WHERE
14:35:11 782  	    ROWNUM <= 1;
14:35:11 783  	  EXCEPTION
14:35:11 784  	    WHEN NO_DATA_FOUND THEN
14:35:11 785  	      var_result := NULL;
14:35:11 786  	END;
14:35:11 787  
14:35:11 788  	RETURN var_result;
14:35:11 789  
14:35:11 790  EXCEPTION
14:35:11 791  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:11 792  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 793  	  SPROC_NAME, 'No such offer chain');
14:35:11 794  WHEN BAD_CURRENT_INDEX_VALUE THEN
14:35:11 795  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 796  	  SPROC_NAME, 'Bad current index value');
14:35:11 797  WHEN OTHERS THEN
14:35:11 798  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 799  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 800  END GET_NEXT_OFFER_INDEX;
14:35:11 801  
14:35:11 802  /******************************************************************************/
14:35:11 803  
14:35:11 804  PROCEDURE P_GET_NEXT_OFFER_INDEX (
14:35:11 805  	in_offer_chain_id	     IN NUMBER,
14:35:11 806  	in_offer_chain_current_index IN NUMBER,
14:35:11 807  	out_next_offer_index	     OUT NUMBER
14:35:11 808  ) AS
14:35:11 809  BEGIN
14:35:11 810  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
14:35:11 811  	  in_offer_chain_id,
14:35:11 812  	  in_offer_chain_current_index
14:35:11 813  	);
14:35:11 814  END P_GET_NEXT_OFFER_INDEX;
14:35:11 815  
14:35:11 816  /******************************************************************************/
14:35:11 817  
14:35:11 818  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
14:35:11 819  	in_license_id		     IN NUMBER,
14:35:11 820  	in_offer_chain_current_index IN NUMBER,
14:35:11 821  	out_next_offer_index	     OUT NUMBER
14:35:11 822  ) AS
14:35:11 823  -- VARIABLES
14:35:11 824  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
14:35:11 825  var_offer_chain_id NUMBER;
14:35:11 826  -- EXCEPTIONS
14:35:11 827  BAD_LICENSE_ID		   EXCEPTION;
14:35:11 828  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
14:35:11 829  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
14:35:11 830  BEGIN
14:35:11 831  
14:35:11 832  	BEGIN
14:35:11 833  	  SELECT
14:35:11 834  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
14:35:11 835  	  FROM
14:35:11 836  	    SUBSCRIPTION
14:35:11 837  	  WHERE
14:35:11 838  	    SUBSCRIPTION.ID = (
14:35:11 839  	      SELECT
14:35:11 840  		LICENSE.SUBSCRIPTION_ID
14:35:11 841  	      FROM
14:35:11 842  		LICENSE
14:35:11 843  	      WHERE
14:35:11 844  		LICENSE.ID = in_license_id
14:35:11 845  	    );
14:35:11 846  	  EXCEPTION
14:35:11 847  	    WHEN NO_DATA_FOUND THEN
14:35:11 848  	      RAISE BAD_LICENSE_ID;
14:35:11 849  	END;
14:35:11 850  
14:35:11 851  	BEGIN
14:35:11 852  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
14:35:11 853  	    var_offer_chain_id,
14:35:11 854  	    in_offer_chain_current_index
14:35:11 855  	  );
14:35:11 856  	  EXCEPTION
14:35:11 857  	    WHEN OTHERS THEN
14:35:11 858  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 859  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
14:35:11 860  	END;
14:35:11 861  
14:35:11 862  EXCEPTION
14:35:11 863  WHEN BAD_LICENSE_ID THEN
14:35:11 864  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 865  	  SPROC_NAME, 'No such license');
14:35:11 866  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
14:35:11 867  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 868  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
14:35:11 869  WHEN OTHERS THEN
14:35:11 870  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 871  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 872  END GET_NEXT_OFFER_INDEX_BY_LCNS;
14:35:11 873  
14:35:11 874  /******************************************************************************/
14:35:11 875  
14:35:11 876  FUNCTION IS_OFFER_INDEX_EXISTS (
14:35:11 877  /*
14:35:11 878  GLOBAL_CONSTANTS_V16.TRUE - exists
14:35:11 879  GLOBAL_CONSTANTS_V16.FALSE - not exists
14:35:11 880  */
14:35:11 881  	in_offer_chain_id	   IN NUMBER,
14:35:11 882  	in_offer_chain_offer_index IN NUMBER
14:35:11 883  ) RETURN NUMBER AS
14:35:11 884  -- VARIABLES
14:35:11 885  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
14:35:11 886  temp_count NUMBER;
14:35:11 887  BEGIN
14:35:11 888  
14:35:11 889  	SELECT
14:35:11 890  	  COUNT(*) into temp_count
14:35:11 891  	FROM
14:35:11 892  	  OFFER_OFFER_CHAIN
14:35:11 893  	WHERE
14:35:11 894  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 895  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
14:35:11 896  
14:35:11 897  	IF temp_count > 0 THEN
14:35:11 898  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:11 899  	ELSE
14:35:11 900  	  RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:11 901  	END IF;
14:35:11 902  
14:35:11 903  EXCEPTION
14:35:11 904  WHEN OTHERS THEN
14:35:11 905  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 906  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 907  END IS_OFFER_INDEX_EXISTS;
14:35:11 908  
14:35:11 909  /******************************************************************************/
14:35:11 910  
14:35:11 911  PROCEDURE GET_OFFER_LENGTH (
14:35:11 912  	in_offer_id IN NUMBER,
14:35:11 913  	out_years   OUT NUMBER,
14:35:11 914  	out_months  OUT NUMBER,
14:35:11 915  	out_days    OUT NUMBER
14:35:11 916  ) AS
14:35:11 917  -- VARIABLES
14:35:11 918  var_offer_duration VARCHAR2(30);
14:35:11 919  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
14:35:11 920  -- EXCEPTIONS
14:35:11 921  BAD_OFFER_ID	     EXCEPTION;
14:35:11 922  CAN_NOT_PARSE_DURATION EXCEPTION;
14:35:11 923  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:35:11 924  BEGIN
14:35:11 925  
14:35:11 926  	BEGIN
14:35:11 927  	  SELECT
14:35:11 928  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
14:35:11 929  	  FROM
14:35:11 930  	    OFFER
14:35:11 931  	  WHERE
14:35:11 932  	    OFFER.ID = in_offer_id;
14:35:11 933  	  EXCEPTION
14:35:11 934  	    WHEN NO_DATA_FOUND THEN
14:35:11 935  	      RAISE BAD_OFFER_ID;
14:35:11 936  	END;
14:35:11 937  
14:35:11 938  	BEGIN
14:35:11 939  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
14:35:11 940  	    var_offer_duration,
14:35:11 941  	    out_years,
14:35:11 942  	    out_months,
14:35:11 943  	    out_days
14:35:11 944  	  );
14:35:11 945  	  EXCEPTION
14:35:11 946  	    WHEN OTHERS THEN
14:35:11 947  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:11 948  	      RAISE CAN_NOT_PARSE_DURATION;
14:35:11 949  	END;
14:35:11 950  
14:35:11 951  EXCEPTION
14:35:11 952  WHEN BAD_OFFER_ID THEN
14:35:11 953  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 954  	  SPROC_NAME, 'No such offer');
14:35:11 955  WHEN CAN_NOT_PARSE_DURATION THEN
14:35:11 956  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 957  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
14:35:11 958  WHEN OTHERS THEN
14:35:11 959  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 960  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 961  END GET_OFFER_LENGTH;
14:35:11 962  
14:35:11 963  /******************************************************************************/
14:35:11 964  
14:35:11 965  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
14:35:11 966  	in_offer_id   IN NUMBER,
14:35:11 967  	in_start_date IN DATE DEFAULT SYSDATE,
14:35:11 968  	out_days      OUT NUMBER
14:35:11 969  ) AS
14:35:11 970  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
14:35:11 971  -- VARIABLES
14:35:11 972  var_offer_duration VARCHAR2(30);
14:35:11 973  var_offer_years	 NUMBER;
14:35:11 974  var_offer_months	 NUMBER;
14:35:11 975  var_offer_days	 NUMBER;
14:35:11 976  var_offer_end_date DATE;
14:35:11 977  -- EXCEPTIONS
14:35:11 978  BAD_OFFER_ID EXCEPTION;
14:35:11 979  BEGIN
14:35:11 980  
14:35:11 981  	BEGIN
14:35:11 982  	  SELECT
14:35:11 983  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
14:35:11 984  	  FROM
14:35:11 985  	    OFFER
14:35:11 986  	  WHERE
14:35:11 987  	    OFFER.ID = in_offer_id;
14:35:11 988  	  EXCEPTION
14:35:11 989  	    WHEN NO_DATA_FOUND THEN
14:35:11 990  	      RAISE BAD_OFFER_ID;
14:35:11 991  	END;
14:35:11 992  
14:35:11 993  	PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS (
14:35:11 994  	  var_offer_duration,
14:35:11 995  	  var_offer_years,
14:35:11 996  	  var_offer_months,
14:35:11 997  	  var_offer_days
14:35:11 998  	);
14:35:11 999  
14:35:11 1000  	 var_offer_end_date := ( ( in_start_date
14:35:11 1001  	   + GLOBAL_CONSTANTS_V16.ONE_DAY_INTERVAL * var_offer_days )
14:35:11 1002  	   + GLOBAL_CONSTANTS_V16.ONE_MONTH_INTERVAL * var_offer_months )
14:35:11 1003  	   + GLOBAL_CONSTANTS_V16.ONE_YEAR_INTERVAL * var_offer_years;
14:35:11 1004  
14:35:11 1005  	 out_days := var_offer_end_date - in_start_date;
14:35:11 1006  
14:35:11 1007  EXCEPTION
14:35:11 1008  WHEN BAD_OFFER_ID THEN
14:35:11 1009  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1010  	   SPROC_NAME, 'No such offer');
14:35:11 1011  WHEN OTHERS THEN
14:35:11 1012  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1013  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1014  END GET_OFFER_LENGTH_IN_DAYS;
14:35:11 1015  
14:35:11 1016  /******************************************************************************/
14:35:11 1017  
14:35:11 1018  PROCEDURE GET_OFFER_PRODUCTS (
14:35:11 1019  /*
14:35:11 1020  Throws exceptions (codes):
14:35:11 1021  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 1022  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1023  */
14:35:11 1024  	 in_offer_id	IN NUMBER,
14:35:11 1025  	 out_result_set OUT SYS_REFCURSOR
14:35:11 1026  ) AS
14:35:11 1027  -- VARIABLES
14:35:11 1028  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
14:35:11 1029  temp_offerr_id NUMBER;
14:35:11 1030  -- EXCEPTIONS
14:35:11 1031  BAD_OFFER_ID EXCEPTION;
14:35:11 1032  BEGIN
14:35:11 1033  
14:35:11 1034  	 BEGIN
14:35:11 1035  	   SELECT
14:35:11 1036  	     OFFER.ID into temp_offerr_id
14:35:11 1037  	   FROM
14:35:11 1038  	     OFFER
14:35:11 1039  	   WHERE
14:35:11 1040  	     OFFER.ID = in_offer_id;
14:35:11 1041  	   EXCEPTION
14:35:11 1042  	     WHEN NO_DATA_FOUND THEN
14:35:11 1043  	       RAISE BAD_OFFER_ID;
14:35:11 1044  	 END;
14:35:11 1045  
14:35:11 1046  	 OPEN out_result_set FOR
14:35:11 1047  	 SELECT DISTINCT
14:35:11 1048  	   PRODUCT.ID,
14:35:11 1049  	   PRODUCT.NAME
14:35:11 1050  	 FROM
14:35:11 1051  	   PRODUCT
14:35:11 1052  	 WHERE
14:35:11 1053  	   PRODUCT.ID IN (
14:35:11 1054  	       SELECT
14:35:11 1055  		 PRODUCT_OFFERING.PRODUCT_ID
14:35:11 1056  	       FROM
14:35:11 1057  		 OFFER_PRODUCT_OFFERING
14:35:11 1058  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:35:11 1059  	       WHERE
14:35:11 1060  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
14:35:11 1061  	     );
14:35:11 1062  
14:35:11 1063  EXCEPTION
14:35:11 1064  WHEN BAD_OFFER_ID THEN
14:35:11 1065  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1066  	   SPROC_NAME, 'No such offer');
14:35:11 1067  WHEN OTHERS THEN
14:35:11 1068  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1070  END GET_OFFER_PRODUCTS;
14:35:11 1071  
14:35:11 1072  /******************************************************************************/
14:35:11 1073  
14:35:11 1074  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
14:35:11 1075  /*
14:35:11 1076  Throws exceptions (codes):
14:35:11 1077  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 1078  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1079  */
14:35:11 1080  	 in_offer_chain_id IN NUMBER,
14:35:11 1081  	 out_result_set    OUT SYS_REFCURSOR
14:35:11 1082  ) AS
14:35:11 1083  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
14:35:11 1084  -- VARIABLES
14:35:11 1085  temp_offer_chain_id NUMBER;
14:35:11 1086  -- EXCEPTIONS
14:35:11 1087  BAD_OFFER_CHAIN_ID EXCEPTION;
14:35:11 1088  BEGIN
14:35:11 1089  
14:35:11 1090  	 BEGIN
14:35:11 1091  	   SELECT
14:35:11 1092  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 1093  	   FROM
14:35:11 1094  	     OFFER_CHAIN
14:35:11 1095  	   WHERE
14:35:11 1096  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:35:11 1097  	   EXCEPTION
14:35:11 1098  	     WHEN NO_DATA_FOUND THEN
14:35:11 1099  	       RAISE BAD_OFFER_CHAIN_ID;
14:35:11 1100  	 END;
14:35:11 1101  
14:35:11 1102  	 OPEN out_result_set FOR
14:35:11 1103  	 SELECT
14:35:11 1104  	   PRODUCT_OFFERING.ID,
14:35:11 1105  	   PRODUCT_OFFERING.PRODUCT_ID,
14:35:11 1106  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
14:35:11 1107  	   PRODUCT_OFFERING.UNIT_PRICE,
14:35:11 1108  	   PRODUCT_OFFERING.QUANTITY,
14:35:11 1109  	   PRODUCT_OFFERING.CREATE_DATE,
14:35:11 1110  	   PRODUCT_OFFERING.CREATED_BY,
14:35:11 1111  	   PRODUCT.NAME,
14:35:11 1112  	   PRODUCT.PRODUCT_URI,
14:35:11 1113  	   CAPABILITY.ID CAP_ID,
14:35:11 1114  	   CAPABILITY.CODE CAP_CODE,
14:35:11 1115  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
14:35:11 1116  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
14:35:11 1117  	 FROM
14:35:11 1118  	   PRODUCT_OFFERING
14:35:11 1119  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:35:11 1120  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
14:35:11 1121  	 WHERE
14:35:11 1122  	   PRODUCT_OFFERING.ID IN (
14:35:11 1123  	     SELECT DISTINCT
14:35:11 1124  	       PRODUCT_OFFERING_ID
14:35:11 1125  	     FROM
14:35:11 1126  	       OFFER_PRODUCT_OFFERING
14:35:11 1127  	     WHERE
14:35:11 1128  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:35:11 1129  		 SELECT DISTINCT
14:35:11 1130  		   OFFER_ID
14:35:11 1131  		 FROM
14:35:11 1132  		   OFFER_OFFER_CHAIN
14:35:11 1133  		 WHERE
14:35:11 1134  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 1135  	       )
14:35:11 1136  	   );
14:35:11 1137  
14:35:11 1138  EXCEPTION
14:35:11 1139  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:11 1140  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1141  	   SPROC_NAME, 'Bad offer chain id');
14:35:11 1142  WHEN OTHERS THEN
14:35:11 1143  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1144  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1145  END GET_OFFER_CHAIN_PROD_OFFERINGS;
14:35:11 1146  
14:35:11 1147  /******************************************************************************/
14:35:11 1148  
14:35:11 1149  FUNCTION CHECK_FOR_SAME_PRODUCTS (
14:35:11 1150  /*
14:35:11 1151  Throws exceptions (codes):
14:35:11 1152  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 1153  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1154  Returns:
14:35:11 1155  GLOBAL_CONSTANTS_V16.TRUE if there are at least one same product
14:35:11 1156  GLOBAL_CONSTANTS_V16.FALSE else
14:35:11 1157  */
14:35:11 1158  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
14:35:11 1159  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
14:35:11 1160  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:11 1161  ) RETURN NUMBER AS
14:35:11 1162  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
14:35:11 1163  -- CONSTANTS
14:35:11 1164  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
14:35:11 1165  -- VARIABLES
14:35:11 1166  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
14:35:11 1167  var_same_products	SYS_REFCURSOR;
14:35:11 1168  var_same_product_id	NUMBER;
14:35:11 1169  same_product_count	NUMBER;
14:35:11 1170  var_product_eligibility_limit NUMBER;
14:35:11 1171  s_product_eligibility_limit   VARCHAR2(100);
14:35:11 1172  -- EXCEPTIONS
14:35:11 1173  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
14:35:11 1174  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
14:35:11 1175  BEGIN
14:35:11 1176  
14:35:11 1177  	 -- Check that first offer chain exists
14:35:11 1178  	 BEGIN
14:35:11 1179  	   SELECT
14:35:11 1180  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 1181  	   FROM
14:35:11 1182  	     OFFER_CHAIN
14:35:11 1183  	   WHERE
14:35:11 1184  	     OFFER_CHAIN.ID = in_offer_chain_1;
14:35:11 1185  	   EXCEPTION
14:35:11 1186  	     WHEN NO_DATA_FOUND THEN
14:35:11 1187  	       RAISE BAD_FIRST_OFFER_CHAIN;
14:35:11 1188  	 END;
14:35:11 1189  
14:35:11 1190  	 -- Check that second offer chain exists
14:35:11 1191  	 BEGIN
14:35:11 1192  	   SELECT
14:35:11 1193  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 1194  	   FROM
14:35:11 1195  	     OFFER_CHAIN
14:35:11 1196  	   WHERE
14:35:11 1197  	     OFFER_CHAIN.ID = in_offer_chain_2;
14:35:11 1198  	   EXCEPTION
14:35:11 1199  	     WHEN NO_DATA_FOUND THEN
14:35:11 1200  	       RAISE BAD_SECOND_OFFER_CHAIN;
14:35:11 1201  	 END;
14:35:11 1202  
14:35:11 1203  	 PROCS_OFFER_CHAIN_V16.GET_OFF_CHAINS_SAME_PRODUCTS(
14:35:11 1204  	   in_offer_chain_1 => in_offer_chain_1,
14:35:11 1205  	   in_offer_chain_2 => in_offer_chain_2,
14:35:11 1206  	   out_result_set   => var_same_products
14:35:11 1207  	 );
14:35:11 1208  
14:35:11 1209  	 LOOP
14:35:11 1210  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
14:35:11 1211  	   EXIT WHEN var_same_products%NOTFOUND;
14:35:11 1212  
14:35:11 1213  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:11 1214  	     -- Return false because this offer chains having same products
14:35:11 1215  	     RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:11 1216  	   ELSE
14:35:11 1217  
14:35:11 1218  	     -- Get eligibility rule for given product
14:35:11 1219  	     BEGIN
14:35:11 1220  	       SELECT
14:35:11 1221  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
14:35:11 1222  	       FROM
14:35:11 1223  		 PRODUCT_ELIGIBILITY
14:35:11 1224  	       WHERE
14:35:11 1225  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
14:35:11 1226  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
14:35:11 1227  
14:35:11 1228  	       -- REVU: What should to be here? 1?
14:35:11 1229  	       EXCEPTION
14:35:11 1230  		 WHEN NO_DATA_FOUND THEN
14:35:11 1231  		   s_product_eligibility_limit := '1';
14:35:11 1232  	     END;
14:35:11 1233  
14:35:11 1234  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V16.MAX_CONSURRENT_PRD_UNLIM THEN
14:35:11 1235  	       RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:11 1236  	     END IF;
14:35:11 1237  
14:35:11 1238  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
14:35:11 1239  
14:35:11 1240  	     -- Check for limit
14:35:11 1241  	     IF var_product_eligibility_limit < same_product_count THEN
14:35:11 1242  	       RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:11 1243  	     END IF;
14:35:11 1244  
14:35:11 1245  	   END IF;
14:35:11 1246  	 END LOOP;
14:35:11 1247  
14:35:11 1248  	 RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:11 1249  
14:35:11 1250  EXCEPTION
14:35:11 1251  WHEN BAD_FIRST_OFFER_CHAIN THEN
14:35:11 1252  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1253  	   SPROC_NAME, 'First offer chain not found');
14:35:11 1254  WHEN BAD_SECOND_OFFER_CHAIN THEN
14:35:11 1255  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1256  	   SPROC_NAME, 'Second offer chain not found');
14:35:11 1257  WHEN OTHERS THEN
14:35:11 1258  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1259  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1260  END CHECK_FOR_SAME_PRODUCTS;
14:35:11 1261  
14:35:11 1262  /******************************************************************************/
14:35:11 1263  
14:35:11 1264  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
14:35:11 1265  /*
14:35:11 1266  Throws exceptions (codes):
14:35:11 1267  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1268  Returns:
14:35:11 1269  GLOBAL_CONSTANTS_V16.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
14:35:11 1270  GLOBAL_CONSTANTS_V16.FALSE else
14:35:11 1271  */
14:35:11 1272  	 in_offer_chain_id IN NUMBER
14:35:11 1273  ) RETURN NUMBER AS
14:35:11 1274  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
14:35:11 1275  -- VARIABLES
14:35:11 1276  var_is_cancelable_str VARCHAR2(1);
14:35:11 1277  var_is_cancelable     NUMBER;
14:35:11 1278  BEGIN
14:35:11 1279  
14:35:11 1280  	 BEGIN
14:35:11 1281  	   SELECT
14:35:11 1282  	     VALUE INTO var_is_cancelable_str
14:35:11 1283  	   FROM (
14:35:11 1284  	     SELECT
14:35:11 1285  	       VALUE, NAME
14:35:11 1286  	     FROM
14:35:11 1287  	       OFFER_CHAIN_META_DATA
14:35:11 1288  	     WHERE
14:35:11 1289  	       OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 1290  	     )
14:35:11 1291  	   WHERE
14:35:11 1292  	     UPPER(NAME) = 'CANCELABLE';
14:35:11 1293  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
14:35:11 1294  	   EXCEPTION
14:35:11 1295  	     WHEN NO_DATA_FOUND THEN
14:35:11 1296  	       var_is_cancelable := GLOBAL_CONSTANTS_V16.FALSE;
14:35:11 1297  	 END;
14:35:11 1298  
14:35:11 1299  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:11 1300  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:11 1301  	 END IF;
14:35:11 1302  
14:35:11 1303  	 RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:11 1304  
14:35:11 1305  EXCEPTION
14:35:11 1306  WHEN OTHERS THEN
14:35:11 1307  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1308  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1309  END IS_OFFER_CHAIN_CANCELABLE;
14:35:11 1310  
14:35:11 1311  /******************************************************************************/
14:35:11 1312  
14:35:11 1313  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
14:35:11 1314  /*
14:35:11 1315  Throws exceptions (codes):
14:35:11 1316  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1317  */
14:35:11 1318  	 in_offer_chain_id IN NUMBER
14:35:11 1319  ) RETURN NUMBER AS
14:35:11 1320  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
14:35:11 1321  -- VARIABLES
14:35:11 1322  var_max_concurrent_subs_str VARCHAR2(100);
14:35:11 1323  var_max_concurrent_subs	   NUMBER;
14:35:11 1324  BEGIN
14:35:11 1325  
14:35:11 1326  	 BEGIN
14:35:11 1327  	   SELECT
14:35:11 1328  	     VALUE into var_max_concurrent_subs_str
14:35:11 1329  	   FROM
14:35:11 1330  	     (
14:35:11 1331  	       SELECT
14:35:11 1332  		 NAME,
14:35:11 1333  		 VALUE
14:35:11 1334  	       FROM
14:35:11 1335  		 OFFER_CHAIN_ELIGIBILITY
14:35:11 1336  	       WHERE
14:35:11 1337  		 OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 1338  	     )
14:35:11 1339  	   WHERE
14:35:11 1340  	     NAME LIKE GLOBAL_CONSTANTS_V16.MAX_CONCURRENT_SUBS;
14:35:11 1341  
14:35:11 1342  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V16.MAX_CONCURRENT_SUBS_UNLIM THEN
14:35:11 1343  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V16.INFINITY;
14:35:11 1344  	   ELSE
14:35:11 1345  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
14:35:11 1346  	   END IF;
14:35:11 1347  
14:35:11 1348  	   EXCEPTION
14:35:11 1349  	     WHEN NO_DATA_FOUND THEN
14:35:11 1350  	       var_max_concurrent_subs := 1;
14:35:11 1351  	 END;
14:35:11 1352  
14:35:11 1353  	 RETURN var_max_concurrent_subs;
14:35:11 1354  
14:35:11 1355  EXCEPTION
14:35:11 1356  WHEN OTHERS THEN
14:35:11 1357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1358  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1359  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
14:35:11 1360  
14:35:11 1361  /******************************************************************************/
14:35:11 1362  
14:35:11 1363  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
14:35:11 1364  /*
14:35:11 1365  Throws exceptions (codes):
14:35:11 1366  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 1367  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1368  */
14:35:11 1369  	 in_offer_chain_id   IN NUMBER,
14:35:11 1370  	 in_eligibility_name IN VARCHAR2,
14:35:11 1371  	 out_result_set      OUT SYS_REFCURSOR
14:35:11 1372  ) AS
14:35:11 1373  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
14:35:11 1374  -- VARIABLES
14:35:11 1375  temp_offer_chain_id NUMBER;
14:35:11 1376  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
14:35:11 1377  -- EXCEPTIONS
14:35:11 1378  BAD_OFFER_CHAIN_ID EXCEPTION;
14:35:11 1379  BEGIN
14:35:11 1380  
14:35:11 1381  	 BEGIN
14:35:11 1382  	   SELECT
14:35:11 1383  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 1384  	   FROM
14:35:11 1385  	     OFFER_CHAIN
14:35:11 1386  	   WHERE
14:35:11 1387  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:35:11 1388  	   EXCEPTION
14:35:11 1389  	     WHEN NO_DATA_FOUND THEN
14:35:11 1390  	       RAISE BAD_OFFER_CHAIN_ID;
14:35:11 1391  	 END;
14:35:11 1392  
14:35:11 1393  	 var_eligibility_name := UPPER(in_eligibility_name);
14:35:11 1394  
14:35:11 1395  	 OPEN out_result_set FOR
14:35:11 1396  	 SELECT
14:35:11 1397  	   OFFER_CHAIN_ELIGIBILITY.ID,
14:35:11 1398  	   OFFER_CHAIN_ELIGIBILITY.NAME,
14:35:11 1399  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
14:35:11 1400  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
14:35:11 1401  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
14:35:11 1402  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
14:35:11 1403  	 FROM
14:35:11 1404  	   OFFER_CHAIN_ELIGIBILITY
14:35:11 1405  	 WHERE
14:35:11 1406  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 1407  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
14:35:11 1408  
14:35:11 1409  EXCEPTION
14:35:11 1410  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:11 1411  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1412  	   SPROC_NAME, 'No such offer chain');
14:35:11 1413  WHEN OTHERS THEN
14:35:11 1414  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1415  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1416  END GET_OFFER_CHAIN_ELIGIBILITY;
14:35:11 1417  
14:35:11 1418  /******************************************************************************/
14:35:11 1419  
14:35:11 1420  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
14:35:11 1421  /*
14:35:11 1422  Throws exceptions (codes):
14:35:11 1423  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1424  */
14:35:11 1425  	 in_offer_chain_ids  IN VARCHAR2,
14:35:11 1426  	 in_eligibility_name IN VARCHAR2,
14:35:11 1427  	 out_result_set      OUT SYS_REFCURSOR
14:35:11 1428  ) AS
14:35:11 1429  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
14:35:11 1430  -- VARIABLES
14:35:11 1431  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
14:35:11 1432  BEGIN
14:35:11 1433  
14:35:11 1434  	 var_eligibility_name := UPPER(in_eligibility_name);
14:35:11 1435  
14:35:11 1436  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
14:35:11 1437  
14:35:11 1438  	 open out_result_set for
14:35:11 1439  	 'SELECT
14:35:11 1440  	   ID,
14:35:11 1441  	   NAME,
14:35:11 1442  	   VALUE,
14:35:11 1443  	   OFFER_CHAIN_ID,
14:35:11 1444  	   CREATE_DATE,
14:35:11 1445  	   CREATED_BY
14:35:11 1446  	 FROM
14:35:11 1447  	   OFFER_CHAIN_ELIGIBILITY
14:35:11 1448  	 WHERE
14:35:11 1449  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
14:35:11 1450  	   AND UPPER(NAME) = :1'
14:35:11 1451  	 using var_eligibility_name;
14:35:11 1452  
14:35:11 1453  EXCEPTION
14:35:11 1454  WHEN OTHERS THEN
14:35:11 1455  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1456  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1457  END GET_OFFER_CHAINS_ELIGIBILITY;
14:35:11 1458  
14:35:11 1459  /******************************************************************************/
14:35:11 1460  
14:35:11 1461  PROCEDURE GET_OFFER_CHAINS_META_DATA (
14:35:11 1462  	 in_offer_chain_ids IN VARCHAR2,
14:35:11 1463  	 in_meta_data_name  IN VARCHAR2,
14:35:11 1464  	 out_result_set     OUT SYS_REFCURSOR
14:35:11 1465  ) AS
14:35:11 1466  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
14:35:11 1467  -- VARIABLES
14:35:11 1468  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
14:35:11 1469  BEGIN
14:35:11 1470  
14:35:11 1471  	 var_meta_data_name := UPPER(in_meta_data_name);
14:35:11 1472  
14:35:11 1473  	 open out_result_set for
14:35:11 1474  	 'select
14:35:11 1475  	   ID,
14:35:11 1476  	   NAME,
14:35:11 1477  	   VALUE,
14:35:11 1478  	   OFFER_CHAIN_ID,
14:35:11 1479  	   CREATED_BY,
14:35:11 1480  	   CREATE_DATE
14:35:11 1481  	 from
14:35:11 1482  	   OFFER_CHAIN_META_DATA
14:35:11 1483  	 where
14:35:11 1484  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
14:35:11 1485  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
14:35:11 1486  	 using var_meta_data_name;
14:35:11 1487  
14:35:11 1488  EXCEPTION
14:35:11 1489  WHEN OTHERS THEN
14:35:11 1490  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1491  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1492  END GET_OFFER_CHAINS_META_DATA;
14:35:11 1493  
14:35:11 1494  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:35:11 1495  /*
14:35:11 1496  Throws exceptions (codes):
14:35:11 1497  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 1498  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1499  */
14:35:11 1500  	 in_offer_chain_id IN NUMBER,
14:35:11 1501  	 in_meta_data_name IN VARCHAR2,
14:35:11 1502  	 out_result_set    OUT SYS_REFCURSOR
14:35:11 1503  ) AS
14:35:11 1504  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
14:35:11 1505  -- VARIABLES
14:35:11 1506  temp_offer_chain_id NUMBER;
14:35:11 1507  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
14:35:11 1508  -- EXCEPTIONS
14:35:11 1509  BAD_OFFER_CHAIN_ID EXCEPTION;
14:35:11 1510  BEGIN
14:35:11 1511  
14:35:11 1512  	 BEGIN
14:35:11 1513  	   SELECT
14:35:11 1514  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:35:11 1515  	   FROM
14:35:11 1516  	     OFFER_CHAIN
14:35:11 1517  	   WHERE
14:35:11 1518  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:35:11 1519  	   EXCEPTION
14:35:11 1520  	     WHEN NO_DATA_FOUND THEN
14:35:11 1521  	       RAISE BAD_OFFER_CHAIN_ID;
14:35:11 1522  	 END;
14:35:11 1523  
14:35:11 1524  	 var_meta_data_name := UPPER(in_meta_data_name);
14:35:11 1525  
14:35:11 1526  	 OPEN out_result_set FOR
14:35:11 1527  	 SELECT
14:35:11 1528  	   OFFER_CHAIN_META_DATA.ID,
14:35:11 1529  	   OFFER_CHAIN_META_DATA.NAME,
14:35:11 1530  	   OFFER_CHAIN_META_DATA.VALUE,
14:35:11 1531  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
14:35:11 1532  	   OFFER_CHAIN_META_DATA.CREATED_BY,
14:35:11 1533  	   OFFER_CHAIN_META_DATA.CREATE_DATE
14:35:11 1534  	 FROM
14:35:11 1535  	   OFFER_CHAIN_META_DATA
14:35:11 1536  	 WHERE
14:35:11 1537  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 1538  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
14:35:11 1539  
14:35:11 1540  EXCEPTION
14:35:11 1541  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:11 1542  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1543  	   SPROC_NAME, 'No such offer chain');
14:35:11 1544  WHEN OTHERS THEN
14:35:11 1545  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1546  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1547  END GET_OFFER_CHAIN_META_DATA;
14:35:11 1548  
14:35:11 1549  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
14:35:11 1550  /*
14:35:11 1551  Throws exceptions (codes):
14:35:11 1552  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 1553  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1554  */
14:35:11 1555  	 in_offer_id	IN NUMBER,
14:35:11 1556  	 out_result_set OUT SYS_REFCURSOR
14:35:11 1557  ) AS
14:35:11 1558  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
14:35:11 1559  -- VARIABLES
14:35:11 1560  temp_offer_id NUMBER;
14:35:11 1561  -- EXCEPTIONS
14:35:11 1562  BAD_OFFER_ID EXCEPTION;
14:35:11 1563  BEGIN
14:35:11 1564  
14:35:11 1565  	 BEGIN
14:35:11 1566  	   SELECT
14:35:11 1567  	     OFFER.ID into temp_offer_id
14:35:11 1568  	   FROM
14:35:11 1569  	     OFFER
14:35:11 1570  	   WHERE
14:35:11 1571  	     OFFER.ID = in_offer_id;
14:35:11 1572  	   EXCEPTION
14:35:11 1573  	     WHEN NO_DATA_FOUND THEN
14:35:11 1574  	       RAISE BAD_OFFER_ID;
14:35:11 1575  	 END;
14:35:11 1576  
14:35:11 1577  	 OPEN out_result_set FOR
14:35:11 1578  	 SELECT DISTINCT
14:35:11 1579  	   PRODUCT_OFFERING.ID,
14:35:11 1580  	   PRODUCT_OFFERING.PRODUCT_ID,
14:35:11 1581  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
14:35:11 1582  	   PRODUCT_OFFERING.UNIT_PRICE,
14:35:11 1583  	   PRODUCT_OFFERING.QUANTITY,
14:35:11 1584  	   PRODUCT_OFFERING.CREATE_DATE,
14:35:11 1585  	   PRODUCT_OFFERING.CREATED_BY,
14:35:11 1586  	   CAPABILITY.ID CAP_ID,
14:35:11 1587  	   CAPABILITY.CODE CAP_CODE,
14:35:11 1588  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
14:35:11 1589  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
14:35:11 1590  	 FROM
14:35:11 1591  	   OFFER_PRODUCT_OFFERING
14:35:11 1592  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:35:11 1593  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
14:35:11 1594  	 WHERE
14:35:11 1595  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
14:35:11 1596  
14:35:11 1597  EXCEPTION
14:35:11 1598  WHEN BAD_OFFER_ID THEN
14:35:11 1599  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1600  	   SPROC_NAME, 'No such offer');
14:35:11 1601  WHEN OTHERS THEN
14:35:11 1602  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1603  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1604  END GET_PROD_OFFERINGS_BY_OFFER_ID;
14:35:11 1605  
14:35:11 1606  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
14:35:11 1607  /*
14:35:11 1608  Throws exceptions (codes):
14:35:11 1609  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11 1610  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1611  */
14:35:11 1612  	 in_product_offering_id IN NUMBER,
14:35:11 1613  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
14:35:11 1614  	 out_result_set 	OUT SYS_REFCURSOR
14:35:11 1615  ) AS
14:35:11 1616  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
14:35:11 1617  -- VARIABLES
14:35:11 1618  temp_product_offering_id NUMBER;
14:35:11 1619  -- EXCEPTIONS
14:35:11 1620  BAD_PRODUCT_OFFERING_ID EXCEPTION;
14:35:11 1621  BEGIN
14:35:11 1622  
14:35:11 1623  	 BEGIN
14:35:11 1624  	   SELECT
14:35:11 1625  	     PRODUCT_OFFERING.ID into temp_product_offering_id
14:35:11 1626  	   FROM
14:35:11 1627  	     PRODUCT_OFFERING
14:35:11 1628  	   WHERE
14:35:11 1629  	     PRODUCT_OFFERING.ID = in_product_offering_id;
14:35:11 1630  	   EXCEPTION
14:35:11 1631  	     WHEN NO_DATA_FOUND THEN
14:35:11 1632  	       RAISE BAD_PRODUCT_OFFERING_ID;
14:35:11 1633  	 END;
14:35:11 1634  
14:35:11 1635  	 OPEN out_result_set FOR
14:35:11 1636  	 SELECT
14:35:11 1637  	   PRODUCT_OFFERING_META_DATA.ID,
14:35:11 1638  	   PRODUCT_OFFERING_META_DATA.NAME,
14:35:11 1639  	   PRODUCT_OFFERING_META_DATA.VALUE,
14:35:11 1640  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
14:35:11 1641  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
14:35:11 1642  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
14:35:11 1643  	 FROM
14:35:11 1644  	   PRODUCT_OFFERING_META_DATA
14:35:11 1645  	 WHERE
14:35:11 1646  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
14:35:11 1647  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
14:35:11 1648  
14:35:11 1649  EXCEPTION
14:35:11 1650  WHEN BAD_PRODUCT_OFFERING_ID THEN
14:35:11 1651  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1652  	   SPROC_NAME, 'No such product offering');
14:35:11 1653  END GET_PRODUCT_OFFERING_META_DATA;
14:35:11 1654  
14:35:11 1655  /******************************************************************************/
14:35:11 1656  
14:35:11 1657  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
14:35:11 1658  /*
14:35:11 1659  Throws exceptions (codes):
14:35:11 1660  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11 1661  */
14:35:11 1662  	 in_offer_chain_1 IN NUMBER,
14:35:11 1663  	 in_offer_chain_2 IN NUMBER,
14:35:11 1664  	 out_result_set   OUT SYS_REFCURSOR
14:35:11 1665  ) AS
14:35:11 1666  BEGIN
14:35:11 1667  
14:35:11 1668  	 OPEN out_result_set FOR
14:35:11 1669  	 SELECT
14:35:11 1670  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
14:35:11 1671  	   COUNT_1 + COUNT_2	    AS "COUNT"
14:35:11 1672  	 FROM
14:35:11 1673  	   (
14:35:11 1674  	     SELECT
14:35:11 1675  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
14:35:11 1676  	       COUNT(*) 		   as "COUNT_1"
14:35:11 1677  	     FROM
14:35:11 1678  	       (
14:35:11 1679  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
14:35:11 1680  	       )
14:35:11 1681  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
14:35:11 1682  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:35:11 1683  	     GROUP BY
14:35:11 1684  	       PRODUCT_OFFERING.PRODUCT_ID
14:35:11 1685  	   )
14:35:11 1686  	   INNER JOIN
14:35:11 1687  	   (
14:35:11 1688  	     SELECT
14:35:11 1689  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
14:35:11 1690  	       COUNT(*) 		   as "COUNT_2"
14:35:11 1691  	     FROM
14:35:11 1692  	       (
14:35:11 1693  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
14:35:11 1694  	       )
14:35:11 1695  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
14:35:11 1696  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:35:11 1697  	     GROUP BY
14:35:11 1698  	       PRODUCT_OFFERING.PRODUCT_ID
14:35:11 1699  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
14:35:11 1700  
14:35:11 1701  END GET_OFF_CHAINS_SAME_PRODUCTS;
14:35:11 1702  
14:35:11 1703  /******************************************************************************/
14:35:11 1704  
14:35:11 1705  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
14:35:11 1706  	 in_offer_chain_id IN NUMBER,
14:35:11 1707  	 in_meta_data_name IN VARCHAR2,
14:35:11 1708  	 out_value	   OUT VARCHAR2
14:35:11 1709  ) AS
14:35:11 1710  BEGIN
14:35:11 1711  	 BEGIN
14:35:11 1712  	   SELECT
14:35:11 1713  	     OFFER_CHAIN_META_DATA.VALUE into out_value
14:35:11 1714  	   FROM
14:35:11 1715  	     OFFER_CHAIN_META_DATA
14:35:11 1716  	   WHERE
14:35:11 1717  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 1718  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
14:35:11 1719  
14:35:11 1720  	   EXCEPTION
14:35:11 1721  	     WHEN NO_DATA_FOUND THEN
14:35:11 1722  	       out_value := NULL;
14:35:11 1723  	 END;
14:35:11 1724  END GET_OFFER_CHAIN_MD_VALUE;
14:35:11 1725  
14:35:11 1726  /******************************************************************************/
14:35:11 1727  
14:35:11 1728  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
14:35:11 1729  	 in_offer_chain_id   IN NUMBER,
14:35:11 1730  	 in_eligibility_name IN VARCHAR2,
14:35:11 1731  	 out_value	     OUT VARCHAR2
14:35:11 1732  ) AS
14:35:11 1733  BEGIN
14:35:11 1734  	 BEGIN
14:35:11 1735  	   SELECT
14:35:11 1736  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
14:35:11 1737  	   FROM
14:35:11 1738  	     OFFER_CHAIN_ELIGIBILITY
14:35:11 1739  	   WHERE
14:35:11 1740  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 1741  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
14:35:11 1742  
14:35:11 1743  	   EXCEPTION
14:35:11 1744  	     WHEN NO_DATA_FOUND THEN
14:35:11 1745  	       out_value := NULL;
14:35:11 1746  	 END;
14:35:11 1747  END GET_OFFER_CHAIN_EL_VALUE;
14:35:11 1748  
14:35:11 1749  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
14:35:11 1750  	 in_offer_id	IN NUMBER,
14:35:11 1751  	 out_result_set OUT SYS_REFCURSOR
14:35:11 1752  ) AS
14:35:11 1753  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
14:35:11 1754  -- VARIABLES
14:35:11 1755  temp_offer_id NUMBER;
14:35:11 1756  -- EXCEPTIONS
14:35:11 1757  BAD_OFFER_ID EXCEPTION;
14:35:11 1758  BEGIN
14:35:11 1759  
14:35:11 1760  	 BEGIN
14:35:11 1761  	   SELECT
14:35:11 1762  	     OFFER.ID into temp_offer_id
14:35:11 1763  	   FROM
14:35:11 1764  	     OFFER
14:35:11 1765  	   WHERE
14:35:11 1766  	     OFFER.ID = in_offer_id;
14:35:11 1767  	   EXCEPTION
14:35:11 1768  	     WHEN NO_DATA_FOUND THEN
14:35:11 1769  	       RAISE BAD_OFFER_ID;
14:35:11 1770  	 END;
14:35:11 1771  
14:35:11 1772  	 OPEN out_result_set FOR
14:35:11 1773  	 SELECT
14:35:11 1774  	   PRODUCT_OFFERING.ID,
14:35:11 1775  	   PRODUCT_OFFERING.PRODUCT_ID,
14:35:11 1776  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
14:35:11 1777  	   PRODUCT_OFFERING.UNIT_PRICE,
14:35:11 1778  	   PRODUCT_OFFERING.QUANTITY,
14:35:11 1779  	   PRODUCT_OFFERING.CREATE_DATE,
14:35:11 1780  	   PRODUCT_OFFERING.CREATED_BY,
14:35:11 1781  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
14:35:11 1782  	 FROM
14:35:11 1783  	   PRODUCT_OFFERING
14:35:11 1784  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:35:11 1785  	 WHERE
14:35:11 1786  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
14:35:11 1787  
14:35:11 1788  EXCEPTION
14:35:11 1789  WHEN BAD_OFFER_ID THEN
14:35:11 1790  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1791  	   SPROC_NAME, 'No such offer');
14:35:11 1792  WHEN OTHERS THEN
14:35:11 1793  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1794  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1795  END GET_OFFER_PRODUCT_OFFERINGS;
14:35:11 1796  
14:35:11 1797  /******************************************************************************/
14:35:11 1798  
14:35:11 1799  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
14:35:11 1800  	 in_meta_data_name  IN VARCHAR2,
14:35:11 1801  	 in_meta_data_value IN VARCHAR2,
14:35:11 1802  	 out_result_set     OUT SYS_REFCURSOR
14:35:11 1803  ) AS
14:35:11 1804  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
14:35:11 1805  -- VARIABLES
14:35:11 1806  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
14:35:11 1807  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
14:35:11 1808  BEGIN
14:35:11 1809  
14:35:11 1810  	 OPEN out_result_set FOR
14:35:11 1811  	 SELECT
14:35:11 1812  	   och.ID,
14:35:11 1813  	   och.NAME,
14:35:11 1814  	   och.DESCRIPTION,
14:35:11 1815  	   och.OFFER_CHAIN_STATUS_ID,
14:35:11 1816  	   PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
14:35:11 1817  	   och.ADOPTABILITY_WINDOW_START_DATE,
14:35:11 1818  	   och.ADOPTABILITY_WINDOW_END_DATE,
14:35:11 1819  	   PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
14:35:11 1820  	   och.IS_GIFT_CERTIFICATE,
14:35:11 1821  	   'false' as comf_offer_chain, -- TODO
14:35:11 1822  	   po.PRODUCT_ID,
14:35:11 1823  	   och.GROUP_ACCOUNT_TYPE_ID
14:35:11 1824  	 FROM
14:35:11 1825  	   OFFER_CHAIN och,
14:35:11 1826  	   OFFER_OFFER_CHAIN ooch,
14:35:11 1827  	   OFFER_PRODUCT_OFFERING opo,
14:35:11 1828  	   PRODUCT_OFFERING po
14:35:11 1829  	 WHERE
14:35:11 1830  	   och.ID = ooch.OFFER_CHAIN_ID
14:35:11 1831  	   and ooch.OFFER_ID = opo.OFFER_ID
14:35:11 1832  	   and opo.PRODUCT_OFFERING_ID = po.ID
14:35:11 1833  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE
14:35:11 1834  	   and och.id in (
14:35:11 1835  	     SELECT DISTINCT
14:35:11 1836  	       och2.id
14:35:11 1837  	     from
14:35:11 1838  	       offer_chain och2
14:35:11 1839  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
14:35:11 1840  	     where
14:35:11 1841  	       UPPER(ochmd.name) = v_meta_data_name
14:35:11 1842  	       AND UPPER(ochmd.value) = v_meta_data_value
14:35:11 1843  	   );
14:35:11 1844  
14:35:11 1845  EXCEPTION
14:35:11 1846  WHEN OTHERS THEN
14:35:11 1847  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1848  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1849  END GET_OFFER_CHAINS_BY_META_DATA;
14:35:11 1850  
14:35:11 1851  /******************************************************************************/
14:35:11 1852  
14:35:11 1853  PROCEDURE GET_ALL_META_DATA (
14:35:11 1854  	 in_offer_chain_id IN NUMBER,
14:35:11 1855  	 out_result_set    OUT SYS_REFCURSOR
14:35:11 1856  ) AS
14:35:11 1857  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
14:35:11 1858  -- Variables
14:35:11 1859  temp_offer_chain_id NUMBER;
14:35:11 1860  -- Exceptions
14:35:11 1861  BAD_OFFER_CHAIN_ID EXCEPTION;
14:35:11 1862  BEGIN
14:35:11 1863  
14:35:11 1864  	 BEGIN
14:35:11 1865  	   SELECT
14:35:11 1866  	     OCH.ID into temp_offer_chain_id
14:35:11 1867  	   FROM
14:35:11 1868  	     OFFER_CHAIN OCH
14:35:11 1869  	   WHERE
14:35:11 1870  	     OCH.ID = in_offer_chain_id;
14:35:11 1871  	   EXCEPTION
14:35:11 1872  	     WHEN NO_DATA_FOUND THEN
14:35:11 1873  	       RAISE BAD_OFFER_CHAIN_ID;
14:35:11 1874  	 END;
14:35:11 1875  
14:35:11 1876  	 OPEN out_result_set FOR
14:35:11 1877  	 SELECT
14:35:11 1878  	   OCHMD.ID,
14:35:11 1879  	   OCHMD.OFFER_CHAIN_ID,
14:35:11 1880  	   OCHMD.NAME,
14:35:11 1881  	   OCHMD.VALUE,
14:35:11 1882  	   OCHMD.CREATE_DATE,
14:35:11 1883  	   OCHMD.CREATED_BY
14:35:11 1884  	 FROM
14:35:11 1885  	   OFFER_CHAIN_META_DATA OCHMD
14:35:11 1886  	 WHERE
14:35:11 1887  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
14:35:11 1888  
14:35:11 1889  EXCEPTION
14:35:11 1890  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:11 1891  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1892  	   SPROC_NAME, 'No such offer chain', SQLERRM);
14:35:11 1893  WHEN OTHERS THEN
14:35:11 1894  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1895  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1896  END GET_ALL_META_DATA;
14:35:11 1897  
14:35:11 1898  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
14:35:11 1899  	 in_group_id	   IN NUMBER,
14:35:11 1900  	 in_offer_chain_id IN NUMBER,
14:35:11 1901  	 out_is_eligible   OUT NUMBER,
14:35:11 1902  	 out_concurrent_subscription_id OUT NUMBER
14:35:11 1903  ) AS
14:35:11 1904  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
14:35:11 1905  -- Variables
14:35:11 1906  var_account_id  NUMBER;
14:35:11 1907  var_is_eligible NUMBER;
14:35:11 1908  var_is_gc       NUMBER;
14:35:11 1909  -- Exceptions
14:35:11 1910  BAD_GROUP_ID		   EXCEPTION;
14:35:11 1911  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
14:35:11 1912  BAD_OC_ID		   EXCEPTION;
14:35:11 1913  EXCEPTION_MESSAGE	   VARCHAR(1024);
14:35:11 1914  BEGIN
14:35:11 1915  
14:35:11 1916  	 var_is_eligible := GLOBAL_CONSTANTS_V16.TRUE;
14:35:11 1917  
14:35:11 1918  	 out_concurrent_subscription_id := NULL;
14:35:11 1919  
14:35:11 1920  	 BEGIN
14:35:11 1921  	   SELECT
14:35:11 1922  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
14:35:11 1923  	   FROM
14:35:11 1924  	     OFFER_CHAIN OC
14:35:11 1925  	   WHERE
14:35:11 1926  	     OC.ID = in_offer_chain_id;
14:35:11 1927  	   EXCEPTION
14:35:11 1928  	     WHEN NO_DATA_FOUND THEN
14:35:11 1929  	       RAISE BAD_OC_ID;
14:35:11 1930  	 END;
14:35:11 1931  
14:35:11 1932  	 -- only check eligibility if this is not a gift certificate
14:35:11 1933  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
14:35:11 1934  	   BEGIN
14:35:11 1935  	     SELECT
14:35:11 1936  	       A.ID into var_account_id
14:35:11 1937  	     FROM
14:35:11 1938  	       ACCOUNT A
14:35:11 1939  	     WHERE
14:35:11 1940  	       A.GROUP_ID = in_group_id;
14:35:11 1941  	     EXCEPTION
14:35:11 1942  	       WHEN NO_DATA_FOUND THEN
14:35:11 1943  		 RAISE BAD_GROUP_ID;
14:35:11 1944  	   END;
14:35:11 1945  
14:35:11 1946  
14:35:11 1947  	   FOR f_offer_chain IN (
14:35:11 1948  	       SELECT
14:35:11 1949  		 S.ID as SUBSCRIPTION_ID,
14:35:11 1950  		 S.OFFER_CHAIN_ID
14:35:11 1951  	       FROM
14:35:11 1952  		 SUBSCRIPTION S
14:35:11 1953  	       WHERE
14:35:11 1954  		 S.ACCOUNT_ID = var_account_id
14:35:11 1955  		 AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:11 1956  	   )
14:35:11 1957  	   LOOP
14:35:11 1958  	     BEGIN
14:35:11 1959  	       IF (
14:35:11 1960  		 PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(
14:35:11 1961  		   in_offer_chain_id,
14:35:11 1962  		   f_offer_chain.offer_chain_id,
14:35:11 1963  		   GLOBAL_CONSTANTS_V16.TRUE
14:35:11 1964  		 ) = GLOBAL_CONSTANTS_V16.TRUE
14:35:11 1965  	       ) THEN
14:35:11 1966  		 var_is_eligible := GLOBAL_CONSTANTS_V16.FALSE;
14:35:11 1967  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
14:35:11 1968  	       END IF;
14:35:11 1969  	       EXCEPTION
14:35:11 1970  		 WHEN OTHERS THEN
14:35:11 1971  		   EXCEPTION_MESSAGE := SQLERRM;
14:35:11 1972  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
14:35:11 1973  	     END;
14:35:11 1974  	   END LOOP;
14:35:11 1975  	 END IF;
14:35:11 1976  	 out_is_eligible := var_is_eligible;
14:35:11 1977  
14:35:11 1978  EXCEPTION
14:35:11 1979  WHEN BAD_GROUP_ID THEN
14:35:11 1980  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1981  	   SPROC_NAME, 'No such offer chain', SQLERRM);
14:35:11 1982  WHEN BAD_OC_ID THEN
14:35:11 1983  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 1984  	   SPROC_NAME, 'No such offer chain', SQLERRM);
14:35:11 1985  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
14:35:11 1986  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 1987  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
14:35:11 1988  WHEN OTHERS THEN
14:35:11 1989  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 1990  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 1991  END CHECK_PRODUCT_ELIGIBILITY;
14:35:11 1992  
14:35:11 1993  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:35:11 1994  	 in_offer_chain_id	  IN NUMBER,
14:35:11 1995  	 in_action_name 	  IN VARCHAR2,
14:35:11 1996  	 out_notification_type_id OUT NUMBER
14:35:11 1997  ) AS
14:35:11 1998  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
14:35:11 1999  -- Variables
14:35:11 2000  var_action_id NUMBER;
14:35:11 2001  -- Exceptions
14:35:11 2002  BAD_ACTION_NAME	      EXCEPTION;
14:35:11 2003  MULTIPLY_ACTIONS_FOUND EXCEPTION;
14:35:11 2004  BEGIN
14:35:11 2005  
14:35:11 2006  	 BEGIN
14:35:11 2007  	   SELECT
14:35:11 2008  	     A.ID into var_action_id
14:35:11 2009  	   FROM
14:35:11 2010  	     ACTION A
14:35:11 2011  	   WHERE
14:35:11 2012  	     UPPER(A.NAME) = UPPER(in_action_name);
14:35:11 2013  	   EXCEPTION
14:35:11 2014  	     WHEN NO_DATA_FOUND THEN
14:35:11 2015  	       RAISE BAD_ACTION_NAME;
14:35:11 2016  	     WHEN TOO_MANY_ROWS THEN
14:35:11 2017  	       RAISE MULTIPLY_ACTIONS_FOUND;
14:35:11 2018  	 END;
14:35:11 2019  
14:35:11 2020  	 SELECT
14:35:11 2021  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
14:35:11 2022  	 FROM
14:35:11 2023  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
14:35:11 2024  	 WHERE
14:35:11 2025  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
14:35:11 2026  	   AND OCNT.ACTION_ID = var_action_id;
14:35:11 2027  
14:35:11 2028  EXCEPTION
14:35:11 2029  WHEN NO_DATA_FOUND THEN
14:35:11 2030  	 out_notification_type_id := NULL;
14:35:11 2031  WHEN BAD_ACTION_NAME THEN
14:35:11 2032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:11 2033  	   SPROC_NAME, 'Bad action name', SQLERRM);
14:35:11 2034  WHEN MULTIPLY_ACTIONS_FOUND THEN
14:35:11 2035  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:11 2036  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
14:35:11 2037  WHEN OTHERS THEN
14:35:11 2038  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 2039  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 2040  END GET_NOTIFICATION_TYPE_ID;
14:35:11 2041  
14:35:11 2042  END PROCS_OFFER_CHAIN_V16;
14:35:11 2043  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.08
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
14:35:11   2  AS
14:35:11   3  	  --------------------------------------------------------------------------------
14:35:11   4  PROCEDURE GATHER_SYNC_EVENTS
14:35:11   5  	  (
14:35:11   6  	      in_last_timestamp TIMESTAMP,
14:35:11   7  	      out_new_timestamp OUT TIMESTAMP)
14:35:11   8  IS
14:35:11   9  BEGIN
14:35:11  10  	  out_new_timestamp := systimestamp;
14:35:11  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
14:35:11  12  END;
14:35:11  13  	  --------------------------------------------------------------------------------
14:35:11  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
14:35:11  15  IS
14:35:11  16  BEGIN
14:35:11  17  	  INSERT
14:35:11  18  	  INTO
14:35:11  19  	      core_owner.polling_sync
14:35:11  20  	      (
14:35:11  21  		  account_id,
14:35:11  22  		  group_id,
14:35:11  23  		  event_type,
14:35:11  24  		  event_date
14:35:11  25  	      )
14:35:11  26  	  select id, group_id, event_type, event_date from (
14:35:11  27  	      SELECT
14:35:11  28  		  a.id,
14:35:11  29  		  a.group_id,
14:35:11  30  		  'I' event_type,
14:35:11  31  		  in_end_ts event_date,
14:35:11  32  		  max(cl.change_time) last_change_time
14:35:11  33  	      FROM
14:35:11  34  		  core_hist_owner.change_log cl,
14:35:11  35  		  core_owner.credit_card cc,
14:35:11  36  		  core_owner.account a
14:35:11  37  	      WHERE
14:35:11  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
14:35:11  39  	      AND cl.item = 'CREDIT_CARD'
14:35:11  40  	      AND cl.id = cc.id
14:35:11  41  	      AND cc.account_id = a.id
14:35:11  42  	      GROUP BY a.id, a.group_id
14:35:11  43  	      UNION ALL
14:35:11  44  	      SELECT
14:35:11  45  		  a.id,
14:35:11  46  		  a.group_id,
14:35:11  47  		  'I',
14:35:11  48  		  in_end_ts,
14:35:11  49  		  max(cl.change_time) last_change_time
14:35:11  50  	      FROM
14:35:11  51  		  core_hist_owner.change_log cl,
14:35:11  52  		  core_owner.paypal p,
14:35:11  53  		  core_owner.account a
14:35:11  54  	      WHERE
14:35:11  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
14:35:11  56  	      AND cl.item = 'PAYPAL'
14:35:11  57  	      AND cl.id = p.id
14:35:11  58  	      AND p.account_id = a.id
14:35:11  59  	      GROUP BY a.id, a.group_id
14:35:11  60  	      UNION ALL
14:35:11  61  	      SELECT
14:35:11  62  		  a.id,
14:35:11  63  		  a.group_id,
14:35:11  64  		  'S',
14:35:11  65  		  in_end_ts,
14:35:11  66  		  max(cl.change_time) last_change_time
14:35:11  67  	      FROM
14:35:11  68  		  core_hist_owner.change_log cl,
14:35:11  69  		  core_owner.subscription s,
14:35:11  70  		  core_owner.account a
14:35:11  71  	      WHERE
14:35:11  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
14:35:11  73  	      AND cl.item = 'SUBSCRIPTION'
14:35:11  74  	      AND cl.id = s.id
14:35:11  75  	      AND s.account_id = a.id
14:35:11  76  	      GROUP BY a.id, a.group_id
14:35:11  77  	      UNION ALL
14:35:11  78  	      SELECT
14:35:11  79  		  a.id,
14:35:11  80  		  a.group_id,
14:35:11  81  		  'G',
14:35:11  82  		  in_end_ts,
14:35:11  83  		  max(cl.change_time) last_change_time
14:35:11  84  	      FROM
14:35:11  85  		  core_hist_owner.change_log cl,
14:35:11  86  		  core_owner.gift_certificate gc,
14:35:11  87  		  core_owner.account a
14:35:11  88  	      WHERE
14:35:11  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
14:35:11  90  	      AND cl.item = 'GIFT_CERTIFICATE'
14:35:11  91  	      AND cl.id = gc.id
14:35:11  92  	      AND gc.purchaser_group_id = a.group_id
14:35:11  93  	      GROUP BY a.id, a.group_id
14:35:11  94  	  ) t
14:35:11  95  	  where not exists (
14:35:11  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
14:35:11  97  	      from polling_sync ps
14:35:11  98  	      where ps.account_id = t.id
14:35:11  99  		and ps.group_id = t.group_id
14:35:11 100  		and ps.event_type = t.event_type
14:35:11 101  		and ps.event_date >= t.last_change_time
14:35:11 102  	  )
14:35:11 103  	  ;
14:35:11 104  END;
14:35:11 105  --------------------------------------------------------------------------------
14:35:11 106  FUNCTION CREATE_NEW_TRANSFER_SET
14:35:11 107  	  (
14:35:11 108  	      in_set_maximum NUMBER)
14:35:11 109  	  RETURN core_owner.polling_sync.set_id%type
14:35:11 110  IS
14:35:11 111  	  pragma autonomous_transaction;
14:35:11 112  	  v_set_id core_owner.polling_sync.set_id%type;
14:35:11 113  BEGIN
14:35:11 114  	  SELECT
14:35:11 115  	      pollsync_setid_seq.nextval
14:35:11 116  	  INTO
14:35:11 117  	      v_set_id
14:35:11 118  	  FROM
14:35:11 119  	      dual;
14:35:11 120  	  update
14:35:11 121  	    core_owner.polling_sync ps
14:35:11 122  	  set
14:35:11 123  	    ps.set_id = v_set_id
14:35:11 124  	  where
14:35:11 125  	    ps.set_id IS NULL and
14:35:11 126  	    rownum <= in_set_maximum
14:35:11 127  	  ;
14:35:11 128  	  COMMIT;
14:35:11 129  	  RETURN v_set_id;
14:35:11 130  END;
14:35:11 131  --------------------------------------------------------------------------------
14:35:11 132  FUNCTION RETREIVE_TRANSFER_SET
14:35:11 133  	  (
14:35:11 134  	      in_set_id core_owner.polling_sync.set_id%type)
14:35:11 135  	  RETURN sys_refcursor
14:35:11 136  IS
14:35:11 137  	  v_refcursor sys_refcursor;
14:35:11 138  BEGIN
14:35:11 139  	  UPDATE
14:35:11 140  	      core_owner.polling_sync ps
14:35:11 141  	  SET
14:35:11 142  	      ps.last_send_date = sysdate,
14:35:11 143  	      ps.num_calls = ps.num_calls + 1
14:35:11 144  	  WHERE
14:35:11 145  	      ps.set_id = in_set_id ;
14:35:11 146  	  OPEN v_refcursor FOR
14:35:11 147  	  SELECT
14:35:11 148  	      ps.set_id,
14:35:11 149  	      ps.group_id,
14:35:11 150  	      ps.event_type,
14:35:11 151  	      ps.event_date
14:35:11 152  	  FROM
14:35:11 153  	      core_owner.polling_sync ps
14:35:11 154  	  WHERE
14:35:11 155  	      ps.set_id = in_set_id
14:35:11 156  	  AND ps.group_id IS NOT NULL ;
14:35:11 157  	  RETURN v_refcursor;
14:35:11 158  END;
14:35:11 159  --------------------------------------------------------------------------------
14:35:11 160  PROCEDURE GET_TRANSFER_SET
14:35:11 161  	  (
14:35:11 162  	      in_set_maximum NUMBER,
14:35:11 163  	      in_max_retries NUMBER,
14:35:11 164  	      out_refcursor OUT sys_refcursor)
14:35:11 165  IS
14:35:11 166  	  v_set_id core_owner.polling_sync.set_id%type;
14:35:11 167  BEGIN
14:35:11 168  	  /* Look for previously sent but unconfirmed sets and
14:35:11 169  	  send again until max_retries calls */
14:35:11 170  	  FOR x IN
14:35:11 171  	  (
14:35:11 172  	      SELECT
14:35:11 173  		  ps.set_id,
14:35:11 174  		  COUNT( *) set_size
14:35:11 175  	      FROM
14:35:11 176  		  core_owner.polling_sync ps
14:35:11 177  	      WHERE
14:35:11 178  		  ps.event_date > sysdate - 14
14:35:11 179  	      AND ps.confirm_date IS NULL
14:35:11 180  	      AND ps.last_send_date IS NOT NULL
14:35:11 181  	      AND ps.num_calls < in_max_retries
14:35:11 182  	      GROUP BY
14:35:11 183  		  ps.set_id
14:35:11 184  	      ORDER BY
14:35:11 185  		  ps.set_id
14:35:11 186  	  )
14:35:11 187  	  LOOP
14:35:11 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
14:35:11 189  	      RETURN;
14:35:11 190  	  END LOOP;
14:35:11 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
14:35:11 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
14:35:11 193  	  RETURN;
14:35:11 194  END;
14:35:11 195  --------------------------------------------------------------------------------
14:35:11 196  PROCEDURE CONFIRM_TRANSFER_SET
14:35:11 197  	  (
14:35:11 198  	      in_set_id core_owner.polling_sync.set_id%type)
14:35:11 199  IS
14:35:11 200  	  v_unconfirmable EXCEPTION;
14:35:11 201  BEGIN
14:35:11 202  	  UPDATE
14:35:11 203  	      core_owner.polling_sync ps
14:35:11 204  	  SET
14:35:11 205  	      ps.confirm_date = systimestamp
14:35:11 206  	  WHERE
14:35:11 207  	      ps.set_id = in_set_id
14:35:11 208  	  AND ps.confirm_date IS NULL ;
14:35:11 209  	  IF(sql%rowcount < 1) THEN
14:35:11 210  	      raise v_unconfirmable;
14:35:11 211  	  END IF;
14:35:11 212  END;
14:35:11 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
14:35:11 214  IS
14:35:11 215  BEGIN
14:35:11 216  	  UPDATE POLLING_SYNC_LASTRUN
14:35:11 217  	  SET last_run = current_timestamp;
14:35:11 218  	  IF ( sql%rowcount = 0 )
14:35:11 219  	  THEN
14:35:11 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
14:35:11 221  	  END if;
14:35:11 222  	  COMMIT;
14:35:11 223  END;
14:35:11 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
14:35:11 225  IS
14:35:11 226  BEGIN
14:35:11 227  	  SELECT LAST_RUN INTO ts
14:35:11 228  	  FROM POLLING_SYNC_LASTRUN
14:35:11 229  	  WHERE ROWNUM < 2;
14:35:11 230  EXCEPTION
14:35:11 231  	WHEN NO_DATA_FOUND
14:35:11 232  	THEN
14:35:11 233  	  ts := current_timestamp;
14:35:11 234  END;
14:35:11 235  END PROCS_POLLING_SYNC;
14:35:11 236  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.04
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V16" AS
14:35:11   2  
14:35:11   3  PROCEDURE GET_PRODUCTS (
14:35:11   4  /*
14:35:11   5  Throws exceptions:
14:35:11   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11   7  */
14:35:11   8  	in_status_id   IN  NUMBER,
14:35:11   9  	out_result_set OUT SYS_REFCURSOR
14:35:11  10  ) AS
14:35:11  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
14:35:11  12  BEGIN
14:35:11  13  	OPEN out_result_set FOR
14:35:11  14  	SELECT
14:35:11  15  	  PRODUCT.ID,
14:35:11  16  	  PRODUCT.NAME,
14:35:11  17  	  PRODUCT.UNIT_PRICE,
14:35:11  18  	  PRODUCT.PRODUCTION_COST,
14:35:11  19  	  PRODUCT.CREATE_DATE,
14:35:11  20  	  PRODUCT.CREATED_BY,
14:35:11  21  	  PRODUCT.PRODUCT_STATUS_ID,
14:35:11  22  	  PRODUCT.PRODUCT_URI
14:35:11  23  	FROM
14:35:11  24  	  PRODUCT
14:35:11  25   WHERE
14:35:11  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
14:35:11  27  EXCEPTION
14:35:11  28  WHEN OTHERS THEN
14:35:11  29  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11  31  END GET_PRODUCTS;
14:35:11  32  
14:35:11  33  /******************************************************************************/
14:35:11  34  
14:35:11  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
14:35:11  36  	in_product_offering_id	IN NUMBER,
14:35:11  37  	out_result_set OUT SYS_REFCURSOR
14:35:11  38  ) AS
14:35:11  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
14:35:11  40  -- VARIABLES
14:35:11  41  temp_product_offering_id NUMBER;
14:35:11  42  -- EXCEPTIONS
14:35:11  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
14:35:11  44  BEGIN
14:35:11  45  
14:35:11  46  	-- Check that product offering exists
14:35:11  47  	BEGIN
14:35:11  48  	  SELECT
14:35:11  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
14:35:11  50  	  FROM
14:35:11  51  	    PRODUCT_OFFERING
14:35:11  52  	  WHERE
14:35:11  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
14:35:11  54  	  EXCEPTION
14:35:11  55  	    WHEN NO_DATA_FOUND THEN
14:35:11  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
14:35:11  57  	END;
14:35:11  58  
14:35:11  59  	OPEN out_result_set FOR
14:35:11  60  	SELECT
14:35:11  61  	  PRODUCT_OFFERING_META_DATA.ID,
14:35:11  62  	  PRODUCT_OFFERING_META_DATA.NAME,
14:35:11  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
14:35:11  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
14:35:11  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
14:35:11  66  	FROM
14:35:11  67  	  PRODUCT_OFFERING_META_DATA
14:35:11  68  	WHERE
14:35:11  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
14:35:11  70  
14:35:11  71  EXCEPTION
14:35:11  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
14:35:11  73  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11  74  	  SPROC_NAME, 'No such product offering id');
14:35:11  75  WHEN OTHERS THEN
14:35:11  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11  78  END GET_PRODUCT_OFFERING_META_DATA;
14:35:11  79  
14:35:11  80  /******************************************************************************/
14:35:11  81  
14:35:11  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
14:35:11  83  /*
14:35:11  84  Throws exceptions:
14:35:11  85  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:11  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:11  87  */
14:35:11  88  	in_product_id	    IN NUMBER,
14:35:11  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
14:35:11  90  	out_result_set	    OUT SYS_REFCURSOR
14:35:11  91  ) AS
14:35:11  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
14:35:11  93  -- VARIABLES
14:35:11  94  temp_product_id NUMBER;
14:35:11  95  -- EXCEPTIONS
14:35:11  96  BAD_PRODUCT_ID EXCEPTION;
14:35:11  97  BEGIN
14:35:11  98  
14:35:11  99  	BEGIN
14:35:11 100  	  SELECT
14:35:11 101  	    PRODUCT.ID into temp_product_id
14:35:11 102  	  FROM
14:35:11 103  	    PRODUCT
14:35:11 104  	  WHERE
14:35:11 105  	    PRODUCT.ID = in_product_id;
14:35:11 106  	  EXCEPTION
14:35:11 107  	    WHEN NO_DATA_FOUND THEN
14:35:11 108  	      RAISE BAD_PRODUCT_ID;
14:35:11 109  	END;
14:35:11 110  
14:35:11 111  	OPEN out_result_set FOR
14:35:11 112  	SELECT
14:35:11 113  	  PRODUCT_ELIGIBILITY.ID
14:35:11 114  	FROM
14:35:11 115  	  PRODUCT_ELIGIBILITY
14:35:11 116  	WHERE
14:35:11 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
14:35:11 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
14:35:11 119  
14:35:11 120  EXCEPTION
14:35:11 121  WHEN BAD_PRODUCT_ID THEN
14:35:11 122  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 123  	  SPROC_NAME, 'No such product');
14:35:11 124  WHEN OTHERS THEN
14:35:11 125  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
14:35:11 128  
14:35:11 129  /******************************************************************************/
14:35:11 130  
14:35:11 131  PROCEDURE GET_PRODUCT_BY_ID (
14:35:11 132  	in_product_id  IN NUMBER,
14:35:11 133  	out_result_set OUT SYS_REFCURSOR
14:35:11 134  ) AS
14:35:11 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
14:35:11 136  -- VARIABLES
14:35:11 137  temp_product_id NUMBER;
14:35:11 138  -- EXCEPTIONS
14:35:11 139  BAD_PRODUCT_ID EXCEPTION;
14:35:11 140  BEGIN
14:35:11 141  
14:35:11 142  	BEGIN
14:35:11 143  	  SELECT
14:35:11 144  	    PRODUCT.ID into temp_product_id
14:35:11 145  	  FROM
14:35:11 146  	    PRODUCT
14:35:11 147  	  WHERE
14:35:11 148  	    PRODUCT.ID = in_product_id;
14:35:11 149  	  EXCEPTION
14:35:11 150  	    WHEN NO_DATA_FOUND THEN
14:35:11 151  	      RAISE BAD_PRODUCT_ID;
14:35:11 152  	END;
14:35:11 153  
14:35:11 154  	OPEN out_result_set FOR
14:35:11 155  	SELECT
14:35:11 156  	  PRODUCT.ID,
14:35:11 157  	  PRODUCT.NAME,
14:35:11 158  	  PRODUCT.PRODUCT_STATUS_ID,
14:35:11 159  	  PRODUCT.PRODUCT_URI,
14:35:11 160  	  PRODUCT.PRODUCTION_COST,
14:35:11 161  	  PRODUCT.UNIT_PRICE,
14:35:11 162  	  PRODUCT.CREATE_DATE,
14:35:11 163  	  PRODUCT.CREATED_BY
14:35:11 164  	FROM
14:35:11 165  	  PRODUCT
14:35:11 166  	WHERE
14:35:11 167  	  PRODUCT.ID = in_product_id;
14:35:11 168  
14:35:11 169  EXCEPTION
14:35:11 170  WHEN BAD_PRODUCT_ID THEN
14:35:11 171  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 172  	  SPROC_NAME, 'No such product');
14:35:11 173  WHEN OTHERS THEN
14:35:11 174  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 176  END GET_PRODUCT_BY_ID;
14:35:11 177  
14:35:11 178  /******************************************************************************/
14:35:11 179  
14:35:11 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
14:35:11 181  	in_line_item_id IN NUMBER,
14:35:11 182  	out_result_set	OUT SYS_REFCURSOR
14:35:11 183  ) AS
14:35:11 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
14:35:11 185  -- VARIABLES
14:35:11 186  temp_line_item_id NUMBER;
14:35:11 187  -- EXCEPTIONS
14:35:11 188  BAD_LINE_ITEM_ID EXCEPTION;
14:35:11 189  BEGIN
14:35:11 190  
14:35:11 191  	BEGIN
14:35:11 192  	  SELECT
14:35:11 193  	    LINE_ITEM.ID into temp_line_item_id
14:35:11 194  	  FROM
14:35:11 195  	    LINE_ITEM
14:35:11 196  	  WHERE
14:35:11 197  	    LINE_ITEM.ID = in_line_item_id;
14:35:11 198  	  EXCEPTION
14:35:11 199  	    WHEN NO_DATA_FOUND THEN
14:35:11 200  	      RAISE BAD_LINE_ITEM_ID;
14:35:11 201  	END;
14:35:11 202  
14:35:11 203  	OPEN out_result_set FOR
14:35:11 204  	SELECT
14:35:11 205  	  PRODUCT_OFFERING.ID,
14:35:11 206  	  PRODUCT_OFFERING.PRODUCT_ID,
14:35:11 207  	  PRODUCT_OFFERING.QUANTITY,
14:35:11 208  	  PRODUCT_OFFERING.UNIT_PRICE,
14:35:11 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
14:35:11 210  	  PRODUCT_OFFERING.CREATE_DATE,
14:35:11 211  	  PRODUCT_OFFERING.CREATED_BY,
14:35:11 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
14:35:11 213  	  CAPABILITY.ID CAP_ID,
14:35:11 214  	  CAPABILITY.CODE CAP_CODE,
14:35:11 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
14:35:11 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
14:35:11 217  	FROM
14:35:11 218  	  PRODUCT_OFFERING
14:35:11 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
14:35:11 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
14:35:11 221  	WHERE
14:35:11 222  	  LINE_ITEM.ID = in_line_item_id;
14:35:11 223  
14:35:11 224  EXCEPTION
14:35:11 225  WHEN BAD_LINE_ITEM_ID THEN
14:35:11 226  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 227  	  SPROC_NAME, 'No such line item');
14:35:11 228  WHEN OTHERS THEN
14:35:11 229  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
14:35:11 232  
14:35:11 233  /******************************************************************************/
14:35:11 234  
14:35:11 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
14:35:11 236  	in_product_offering_id IN NUMBER,
14:35:11 237  	out_result_set	OUT SYS_REFCURSOR
14:35:11 238  ) AS
14:35:11 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
14:35:11 240  BEGIN
14:35:11 241  	OPEN out_result_set FOR
14:35:11 242  	SELECT
14:35:11 243  	  PRODUCT_OFFERING.ID,
14:35:11 244  	  PRODUCT_OFFERING.PRODUCT_ID,
14:35:11 245  	  PRODUCT_OFFERING.QUANTITY,
14:35:11 246  	  PRODUCT_OFFERING.UNIT_PRICE,
14:35:11 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
14:35:11 248  	  PRODUCT_OFFERING.CREATE_DATE,
14:35:11 249  	  PRODUCT_OFFERING.CREATED_BY,
14:35:11 250  	  CAPABILITY.ID CAP_ID,
14:35:11 251  	  CAPABILITY.CODE CAP_CODE,
14:35:11 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
14:35:11 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
14:35:11 254  	FROM
14:35:11 255  	  PRODUCT_OFFERING
14:35:11 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
14:35:11 257  	WHERE
14:35:11 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
14:35:11 259  
14:35:11 260  EXCEPTION
14:35:11 261  WHEN OTHERS THEN
14:35:11 262  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 264  END GET_PRD_OFFERING_BY_ID;
14:35:11 265  
14:35:11 266  /******************************************************************************/
14:35:11 267  
14:35:11 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
14:35:11 269  	in_product_offering_id IN NUMBER,
14:35:11 270  	out_result_set	       OUT SYS_REFCURSOR
14:35:11 271  ) AS
14:35:11 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
14:35:11 273  -- VARIABLES
14:35:11 274  temp_product_offering_id NUMBER;
14:35:11 275  -- EXCEPTIONS
14:35:11 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
14:35:11 277  BEGIN
14:35:11 278  
14:35:11 279  	BEGIN
14:35:11 280  	  SELECT
14:35:11 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
14:35:11 282  	  FROM
14:35:11 283  	    PRODUCT_OFFERING
14:35:11 284  	  WHERE
14:35:11 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
14:35:11 286  	  EXCEPTION
14:35:11 287  	    WHEN NO_DATA_FOUND THEN
14:35:11 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
14:35:11 289  	END;
14:35:11 290  
14:35:11 291  	OPEN out_result_set FOR
14:35:11 292  	SELECT
14:35:11 293  	  DISCOUNT.ID,
14:35:11 294  	  DISCOUNT.NAME,
14:35:11 295  	  DISCOUNT.FIXED_AMOUNT,
14:35:11 296  	  DISCOUNT.PERCENT_AMOUNT,
14:35:11 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
14:35:11 298  	  DISCOUNT.CREATE_DATE,
14:35:11 299  	  DISCOUNT.CREATED_BY,
14:35:11 300  	  DISCOUNT.DESCRIPTION
14:35:11 301  	FROM
14:35:11 302  	  DISCOUNT
14:35:11 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
14:35:11 304  	WHERE
14:35:11 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
14:35:11 306  
14:35:11 307  EXCEPTION
14:35:11 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
14:35:11 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:11 310  	  SPROC_NAME, 'No such product offering');
14:35:11 311  WHEN OTHERS THEN
14:35:11 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:11 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:11 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
14:35:11 315  
14:35:11 316  END PROCS_PRODUCT_V16;
14:35:11 317  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE
14:35:11   2  PACKAGE BODY PROCS_REPORTING AS
14:35:11   3  
14:35:11   4  ----
14:35:11   5  --------------------------------------------------------------------------------
14:35:11   6  ----
14:35:11   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11   8  	  is
14:35:11   9  	  begin
14:35:11  10  	      open out_cursor for
14:35:11  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
14:35:11  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
14:35:11  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
14:35:11  14  			,c.create_date, c.update_date
14:35:11  15  		  from charge c
14:35:11  16  		      ,charge_status cs
14:35:11  17  		      ,instrument_type it
14:35:11  18  		      ,ids
14:35:11  19  		  where c.id = ids.id
14:35:11  20  		    and c.charge_status_id = cs.id
14:35:11  21  		    and c.instrument_type_id = it.id
14:35:11  22  	      ;
14:35:11  23  	  end;
14:35:11  24  ----
14:35:11  25  --------------------------------------------------------------------------------
14:35:11  26  ----
14:35:11  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11  28  	  is
14:35:11  29  	  begin
14:35:11  30  	      open out_cursor for
14:35:11  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
14:35:11  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
14:35:11  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date
14:35:11  35  		  from license l
14:35:11  36  		      ,license_status ls
14:35:11  37  		      ,ids
14:35:11  38  		  where l.id = ids.id
14:35:11  39  		    and l.license_status_id = ls.id
14:35:11  40  	      ;
14:35:11  41  	  end;
14:35:11  42  ----
14:35:11  43  --------------------------------------------------------------------------------
14:35:11  44  ----
14:35:11  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11  46  	  is
14:35:11  47  	  begin
14:35:11  48  	      open out_cursor for
14:35:11  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
14:35:11  50  		  select
14:35:11  51  		    i.id invoice_id,
14:35:11  52  		    i.create_date,
14:35:11  53  		    i.update_date,
14:35:11  54  		    i.invoice_status_id,
14:35:11  55  		    istat.value invoice_status,
14:35:11  56  		    NVL(
14:35:11  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
14:35:11  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
14:35:11  59  		    ) offer_chain_id
14:35:11  60  		  from	   invoice i
14:35:11  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
14:35:11  62  		      join ids			on ids.id = i.id
14:35:11  63  		  where 1 = 1
14:35:11  64  	      ;
14:35:11  65  	  end;
14:35:11  66  ----
14:35:11  67  --------------------------------------------------------------------------------
14:35:11  68  ----
14:35:11  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11  70  	  is
14:35:11  71  	  begin
14:35:11  72  	      open out_cursor for
14:35:11  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
14:35:11  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
14:35:11  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
14:35:11  76  		  from line_item li
14:35:11  77  		    , ids
14:35:11  78  		  where li.id = ids.id
14:35:11  79  	      ;
14:35:11  80  	  end;
14:35:11  81  ----
14:35:11  82  --------------------------------------------------------------------------------
14:35:11  83  ----
14:35:11  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11  85  	  is
14:35:11  86  	  begin
14:35:11  87  	      open out_cursor for
14:35:11  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
14:35:11  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
14:35:11  91  			,a.instrument_id, a.tax_exempt_id
14:35:11  92  			-- need system category??
14:35:11  93  		  from account a
14:35:11  94  		      ,account_status astat
14:35:11  95  		      ,instrument_type it
14:35:11  96  		      , ids
14:35:11  97  		  where a.id = ids.id
14:35:11  98  		    and astat.id = a.account_status_id
14:35:11  99  		    and a.instrument_type_id = it.id(+)
14:35:11 100  	      ;
14:35:11 101  	  end;
14:35:11 102  ----
14:35:11 103  --------------------------------------------------------------------------------
14:35:11 104  ----
14:35:11 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 106  	  is
14:35:11 107  	  begin
14:35:11 108  	      open out_cursor for
14:35:11 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
14:35:11 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
14:35:11 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
14:35:11 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
14:35:11 114  		  from subscription s
14:35:11 115  		      ,subscription_status ss
14:35:11 116  		      ,subscription_cancel_reason sct
14:35:11 117  		      ,instrument_type it
14:35:11 118  		      , ids
14:35:11 119  		  where s.id = ids.id
14:35:11 120  		    and ss.id = s.subscription_status_id
14:35:11 121  		    and s.instrument_type_id = it.id
14:35:11 122  		    and sct.id(+) = s.sct_id
14:35:11 123  	      ;
14:35:11 124  	  end;
14:35:11 125  ----
14:35:11 126  --------------------------------------------------------------------------------
14:35:11 127  ----
14:35:11 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 129  	  is
14:35:11 130  	  begin
14:35:11 131  	      open out_cursor for
14:35:11 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 133  		  select t.id transaction_id, t.transaction_amount
14:35:11 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
14:35:11 135  			,t.create_date, t.update_date, t.is_settled
14:35:11 136  		  from transaction t
14:35:11 137  		      ,transaction_status ts
14:35:11 138  		      , ids
14:35:11 139  		  where t.id = ids.id
14:35:11 140  		    and t.transaction_status_id = ts.id
14:35:11 141  	      ;
14:35:11 142  	  end;
14:35:11 143  ----
14:35:11 144  --------------------------------------------------------------------------------
14:35:11 145  ----
14:35:11 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 147  	  is
14:35:11 148  	  begin
14:35:11 149  	      open out_cursor for
14:35:11 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
14:35:11 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
14:35:11 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
14:35:11 154  			,oc.billing_source_id, bs.name billing_source_name
14:35:11 155  			,oc.is_seat_license,oc.group_account_type_id
14:35:11 156  		  from offer_chain oc
14:35:11 157  		      , offer_chain_status ocs
14:35:11 158  		      , ids
14:35:11 159  		      , vendor_source vs
14:35:11 160  		      , billing_source bs
14:35:11 161  		  where oc.id = ids.id
14:35:11 162  		    and oc.offer_chain_status_id = ocs.id
14:35:11 163  		    and oc.vendor_source_id = vs.id
14:35:11 164  		    and oc.billing_source_id = bs.id
14:35:11 165  	      ;
14:35:11 166  	  end;
14:35:11 167  ----
14:35:11 168  --------------------------------------------------------------------------------
14:35:11 169  ----
14:35:11 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 171  	  is
14:35:11 172  	  begin
14:35:11 173  	      open out_cursor for
14:35:11 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
14:35:11 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
14:35:11 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
14:35:11 177  		  from offer_offer_chain ooc
14:35:11 178  		  , ids
14:35:11 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
14:35:11 180  	      ;
14:35:11 181  	  end;
14:35:11 182  ----
14:35:11 183  --------------------------------------------------------------------------------
14:35:11 184  ----
14:35:11 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 186  	  is
14:35:11 187  	  begin
14:35:11 188  	      open out_cursor for
14:35:11 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
14:35:11 191  		  from offer o
14:35:11 192  		      ,offer_status os
14:35:11 193  		      , ids
14:35:11 194  		  where o.id = ids.id
14:35:11 195  		    and o.offer_status_id = os.id
14:35:11 196  	      ;
14:35:11 197  	  end;
14:35:11 198  ----
14:35:11 199  --------------------------------------------------------------------------------
14:35:11 200  ----
14:35:11 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 202  	  is
14:35:11 203  	  begin
14:35:11 204  	      open out_cursor for
14:35:11 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
14:35:11 207  			 ,gc.expiration_date, gc.purchase_date
14:35:11 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
14:35:11 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
14:35:11 210  			 ,recipient_address_id
14:35:11 211  			 ,redeemer_address_id
14:35:11 212  			 ,recipient_notify_date
14:35:11 213  			 ,recipient_name
14:35:11 214  			 ,redemption_date
14:35:11 215  			 ,recipient_email
14:35:11 216  		  from gift_certificate gc
14:35:11 217  		      ,gift_certificate_status gcs
14:35:11 218  		      , ids
14:35:11 219  		  where gc.id = ids.id
14:35:11 220  		    and gc.gift_certificate_status_id = gcs.id
14:35:11 221  	      ;
14:35:11 222  	  end;
14:35:11 223  ----
14:35:11 224  --------------------------------------------------------------------------------
14:35:11 225  ----
14:35:11 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 227  	  is
14:35:11 228  	  begin
14:35:11 229  	      open out_cursor for
14:35:11 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
14:35:11 232  		  from product_offering po
14:35:11 233  		  , ids
14:35:11 234  		  where po.id = ids.id
14:35:11 235  	      ;
14:35:11 236  	  end;
14:35:11 237  ----
14:35:11 238  --------------------------------------------------------------------------------
14:35:11 239  ----
14:35:11 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 241  	  is
14:35:11 242  	  begin
14:35:11 243  	      open out_cursor for
14:35:11 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
14:35:11 246  			,product_uri, p.create_date
14:35:11 247  		  from product p
14:35:11 248  		      ,product_status ps
14:35:11 249  		      , ids
14:35:11 250  		  where p.id = ids.id
14:35:11 251  		    and p.product_status_id = ps.id
14:35:11 252  	      ;
14:35:11 253  	  end;
14:35:11 254  ----
14:35:11 255  --------------------------------------------------------------------------------
14:35:11 256  ----
14:35:11 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 258  	  is
14:35:11 259  	  begin
14:35:11 260  	      open out_cursor for
14:35:11 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
14:35:11 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
14:35:11 263  		  from offer_product_offering opo
14:35:11 264  		  , ids
14:35:11 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
14:35:11 266  	      ;
14:35:11 267  	  end;
14:35:11 268  ----
14:35:11 269  --------------------------------------------------------------------------------
14:35:11 270  ----
14:35:11 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 272  	  is
14:35:11 273  	  begin
14:35:11 274  	      open out_cursor for
14:35:11 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
14:35:11 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
14:35:11 277  		  from discount_product_offering dpo
14:35:11 278  		  , ids
14:35:11 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
14:35:11 280  	      ;
14:35:11 281  	  end;
14:35:11 282  ----
14:35:11 283  --------------------------------------------------------------------------------
14:35:11 284  ----
14:35:11 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 286  	  is
14:35:11 287  	  begin
14:35:11 288  	      open out_cursor for
14:35:11 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
14:35:11 291  			,d.discount_type_id, dt.value discount_type, d.create_date
14:35:11 292  		  from discount d
14:35:11 293  		      ,discount_type dt
14:35:11 294  		      , ids
14:35:11 295  		  where d.id = ids.id
14:35:11 296  		    and d.discount_type_id = dt.id
14:35:11 297  	      ;
14:35:11 298  	  end;
14:35:11 299  ----
14:35:11 300  --------------------------------------------------------------------------------
14:35:11 301  ----
14:35:11 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 303  	  is
14:35:11 304  	  begin
14:35:11 305  	      open out_cursor for
14:35:11 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
14:35:11 308  		  from product_eligibility pg
14:35:11 309  		  , ids
14:35:11 310  		  where pg.id = ids.id
14:35:11 311  	      ;
14:35:11 312  	  end;
14:35:11 313  ----
14:35:11 314  --------------------------------------------------------------------------------
14:35:11 315  ----
14:35:11 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 317  	  is
14:35:11 318  	  begin
14:35:11 319  	      open out_cursor for
14:35:11 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
14:35:11 322  		  from offer_chain_eligibility oce
14:35:11 323  		  , ids
14:35:11 324  		  where oce.id = ids.id
14:35:11 325  	      ;
14:35:11 326  	  end;
14:35:11 327  ----
14:35:11 328  --------------------------------------------------------------------------------
14:35:11 329  ----
14:35:11 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 331  	  is
14:35:11 332  	  begin
14:35:11 333  	      open out_cursor for
14:35:11 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
14:35:11 336  		  from offer_chain_meta_data ocm
14:35:11 337  		  , ids
14:35:11 338  		  where ocm.id = ids.id
14:35:11 339  	      ;
14:35:11 340  	  end;
14:35:11 341  ----
14:35:11 342  --------------------------------------------------------------------------------
14:35:11 343  ----
14:35:11 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 345  	  is
14:35:11 346  	  begin
14:35:11 347  	      open out_cursor for
14:35:11 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
14:35:11 350  		  from product_offering_meta_data pom
14:35:11 351  		  , ids
14:35:11 352  		  where pom.id = ids.id
14:35:11 353  	      ;
14:35:11 354  	  end;
14:35:11 355  ----
14:35:11 356  --------------------------------------------------------------------------------
14:35:11 357  ----
14:35:11 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 359  	  is
14:35:11 360  	  begin
14:35:11 361  	      open out_cursor for
14:35:11 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
14:35:11 364  		  from subscription_meta_data sm
14:35:11 365  		  , ids
14:35:11 366  		  where sm.id = ids.id
14:35:11 367  	      ;
14:35:11 368  	  end;
14:35:11 369  ----
14:35:11 370  --------------------------------------------------------------------------------
14:35:11 371  ----
14:35:11 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 373  	  is
14:35:11 374  	  begin
14:35:11 375  	      open out_cursor for
14:35:11 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
14:35:11 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
14:35:11 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
14:35:11 380  		  from credit_card cc
14:35:11 381  		      ,credit_card_type cct
14:35:11 382  		      ,credit_card_status ccs
14:35:11 383  		      , ids
14:35:11 384  		  where cc.id = ids.id
14:35:11 385  		    and cc.credit_card_type_id = cct.id(+)
14:35:11 386  		    and cc.credit_card_status_id = ccs.id
14:35:11 387  	      ;
14:35:11 388  	  end;
14:35:11 389  ----
14:35:11 390  --------------------------------------------------------------------------------
14:35:11 391  ----
14:35:11 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 393  	  is
14:35:11 394  	  begin
14:35:11 395  	      open out_cursor for
14:35:11 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
14:35:11 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
14:35:11 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
14:35:11 400  			,ta.create_date
14:35:11 401  		  from transaction_attempt ta
14:35:11 402  		      ,transaction_attempt_status tas
14:35:11 403  		      , ids
14:35:11 404  		  where ta.id = ids.id
14:35:11 405  		    and ta.transaction_attempt_status_id = tas.id
14:35:11 406  	      ;
14:35:11 407  	  end;
14:35:11 408  ----
14:35:11 409  --------------------------------------------------------------------------------
14:35:11 410  ----
14:35:11 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 412  	  is
14:35:11 413  	  begin
14:35:11 414  	      open out_cursor for
14:35:11 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
14:35:11 417  			,ia.adjustment_date, ia.create_date
14:35:11 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
14:35:11 419  		  , ids
14:35:11 420  		  where ia.id = ids.id
14:35:11 421  		  and ir.id = ia.invoice_adjustment_reason_id
14:35:11 422  	      ;
14:35:11 423  	  end;
14:35:11 424  ----
14:35:11 425  --------------------------------------------------------------------------------
14:35:11 426  ----
14:35:11 427  
14:35:11 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 429  	  is
14:35:11 430  	  begin
14:35:11 431  	      open out_cursor for
14:35:11 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
14:35:11 434  		  from line_item_adjustment lia
14:35:11 435  		  , ids
14:35:11 436  		  where lia.id = ids.id
14:35:11 437  	      ;
14:35:11 438  	  end;
14:35:11 439  ----
14:35:11 440  --------------------------------------------------------------------------------
14:35:11 441  ----
14:35:11 442  
14:35:11 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 444  	  is
14:35:11 445  	  begin
14:35:11 446  	      open out_cursor for
14:35:11 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 448  		  select
14:35:11 449  		    tax.id tax_id,
14:35:11 450  		    ttype.code tax_type,
14:35:11 451  		    tax.calculated_amount,
14:35:11 452  		    tax.create_date,
14:35:11 453  		    tax.line_item_id,
14:35:11 454  		    tax.effective_rate,
14:35:11 455  		    tax.taxable_amount,
14:35:11 456  		    tax.tax_rule_id,
14:35:11 457  		    j.name jurisdiction_level,
14:35:11 458  		    tax.jurisdiction_name,
14:35:11 459  		    tax.jurisdiction_id,
14:35:11 460  		    tax.ext_tax_type,
14:35:11 461  		    tax.ext_result,
14:35:11 462  		    tax.imposition_type,
14:35:11 463  		    tax.imposition
14:35:11 464  		  from tax
14:35:11 465  		  , tax_type ttype
14:35:11 466  		  , jurisdiction_level j
14:35:11 467  		  , ids
14:35:11 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
14:35:11 469  	      ;
14:35:11 470  	  end;
14:35:11 471  ----
14:35:11 472  --------------------------------------------------------------------------------
14:35:11 473  ----
14:35:11 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:35:11 475  	  is
14:35:11 476  	  begin
14:35:11 477  	      open out_cursor for
14:35:11 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
14:35:11 479  		  select
14:35:11 480  		    tax.id tad_adjustment_id,
14:35:11 481  		    tax.tax_id tax_id,
14:35:11 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
14:35:11 483  		    tax.amount tax_amount,
14:35:11 484  		    tax.create_date create_date
14:35:11 485  		  from tax_adjustment tax
14:35:11 486  		  , ids
14:35:11 487  		  where tax.id = ids.id
14:35:11 488  	      ;
14:35:11 489  	  end;
14:35:11 490  ----
14:35:11 491  --------------------------------------------------------------------------------
14:35:11 492  ----
14:35:11 493  /**/
14:35:11 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 495  	  BEGIN
14:35:11 496  	    OPEN OUT_CURSOR FOR
14:35:11 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 498  	    SELECT
14:35:11 499  		t.id rcn_ext_source_log_id
14:35:11 500  	      , t.extraction_timestamp
14:35:11 501  	      , t.report_date
14:35:11 502  	      , t.report_generation_datetime
14:35:11 503  	      , t.record_type
14:35:11 504  	      , t.report_file_name
14:35:11 505  	      , t.create_date
14:35:11 506  	      , t.created_by
14:35:11 507  	    FROM rcn_ext_source_log t, ids
14:35:11 508  	    WHERE ids.id = t.id;
14:35:11 509  	  END;
14:35:11 510  
14:35:11 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 512  	  BEGIN
14:35:11 513  	    OPEN OUT_CURSOR FOR
14:35:11 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 515  	    SELECT
14:35:11 516  		t.id rcn_cpt_svc_chg_dtl_id
14:35:11 517  	      , t.rcn_ext_source_log_id
14:35:11 518  	      , t.record_type
14:35:11 519  	      , t.category
14:35:11 520  	      , t.sub_category
14:35:11 521  	      , t.entity_type
14:35:11 522  	      , t.entity_number
14:35:11 523  	      , t.funds_transfer_inst_number
14:35:11 524  	      , t.secure_ba_number
14:35:11 525  	      , t.settlement_currency
14:35:11 526  	      , t.fee_schedule
14:35:11 527  	      , t.mop
14:35:11 528  	      , t.interchange_qualification
14:35:11 529  	      , t.fee_type_description
14:35:11 530  	      , t.action_type
14:35:11 531  	      , t.unit_quantity
14:35:11 532  	      , t.unit_fee
14:35:11 533  	      , t.amount
14:35:11 534  	      , t.percentage_rate
14:35:11 535  	      , t.total_charge
14:35:11 536  	      , t.create_date
14:35:11 537  	      , t.created_by
14:35:11 538  	    FROM rcn_cpt_service_charge_detail t, ids
14:35:11 539  	    WHERE ids.id = t.id;
14:35:11 540  	  END;
14:35:11 541  ----
14:35:11 542  --------------------------------------------------------------------------------
14:35:11 543  ----
14:35:11 544  
14:35:11 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 546  	  BEGIN
14:35:11 547  	    OPEN OUT_CURSOR FOR
14:35:11 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 549  	    SELECT
14:35:11 550  		t.id rcn_cpt_excp_dtl_id
14:35:11 551  	      , t.rcn_ext_source_log_id
14:35:11 552  	      , t.record_type
14:35:11 553  	      , t.submission_date
14:35:11 554  	      , t.pid_number
14:35:11 555  	      , t.pid_short_name
14:35:11 556  	      , t.submission_number
14:35:11 557  	      , t.record_number
14:35:11 558  	      , t.entity_type
14:35:11 559  	      , t.entity_number
14:35:11 560  	      , t.presentment_currency
14:35:11 561  	      , t.merchant_order_number
14:35:11 562  	      , t.rdfi_number
14:35:11 563  	      , t.account_number
14:35:11 564  	      , t.expiration_date
14:35:11 565  	      , t.amount
14:35:11 566  	      , t.mop
14:35:11 567  	      , t.action_code
14:35:11 568  	      , t.auth_date
14:35:11 569  	      , t.auth_code
14:35:11 570  	      , t.auth_response_code
14:35:11 571  	      , t.trace_number
14:35:11 572  	      , t.consumer_country_code
14:35:11 573  	      , t.category
14:35:11 574  	      , t.mcc
14:35:11 575  	      , t.reject_code
14:35:11 576  	      , t.submission_status
14:35:11 577  	      , t.create_date
14:35:11 578  	      , t.created_by
14:35:11 579  	    FROM rcn_cpt_exception_detail t, ids
14:35:11 580  	    WHERE ids.id = t.id;
14:35:11 581  	  END;
14:35:11 582  ----
14:35:11 583  --------------------------------------------------------------------------------
14:35:11 584  ----
14:35:11 585  
14:35:11 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 587  	  BEGIN
14:35:11 588  	    OPEN OUT_CURSOR FOR
14:35:11 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 590  	      SELECT
14:35:11 591  		t.id rcn_cpt_deposit_dtl_id
14:35:11 592  	      , t.rcn_ext_source_log_id
14:35:11 593  	      , t.record_type
14:35:11 594  	      , t.submission_date
14:35:11 595  	      , t.pid_number
14:35:11 596  	      , t.pid_short_name
14:35:11 597  	      , t.submission_number
14:35:11 598  	      , t.record_number
14:35:11 599  	      , t.entity_type
14:35:11 600  	      , t.entity_number
14:35:11 601  	      , t.presentment_currency
14:35:11 602  	      , t.merchant_order_number
14:35:11 603  	      , t.rdfi_number
14:35:11 604  	      , t.account_number
14:35:11 605  	      , t.expiration_date
14:35:11 606  	      , t.amount
14:35:11 607  	      , t.mop
14:35:11 608  	      , t.action_code
14:35:11 609  	      , t.auth_date
14:35:11 610  	      , t.auth_code
14:35:11 611  	      , t.auth_response_code
14:35:11 612  	      , t.trace_number
14:35:11 613  	      , t.consumer_country_code
14:35:11 614  	      , t.mcc
14:35:11 615  	      , t.create_date
14:35:11 616  	      , t.created_by
14:35:11 617  	      , t.fee_code
14:35:11 618  	      , t.unit_fee
14:35:11 619  	      , t.percent_fee
14:35:11 620  	      , t.total_interchange_fee
14:35:11 621  	      , t.total_assessment_fee
14:35:11 622  	      , t.other_fee
14:35:11 623  	    FROM rcn_cpt_deposit_detail t, ids
14:35:11 624  	    WHERE ids.id = t.id;
14:35:11 625  	  END;
14:35:11 626  ----
14:35:11 627  --------------------------------------------------------------------------------
14:35:11 628  ----
14:35:11 629  
14:35:11 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 631  	  BEGIN
14:35:11 632  	    OPEN OUT_CURSOR FOR
14:35:11 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 634  	    SELECT
14:35:11 635  		t.id rcn_cpt_chgbk_act_dtl_id
14:35:11 636  	      , t.rcn_ext_source_log_id
14:35:11 637  	      , t.record_type
14:35:11 638  	      , t.entity_type
14:35:11 639  	      , t.entity_number
14:35:11 640  	      , t.chargeback_amount_issuer
14:35:11 641  	      , t.prev_partial_representment
14:35:11 642  	      , t.presentment_currency
14:35:11 643  	      , t.chargeback_category
14:35:11 644  	      , t.status_flag
14:35:11 645  	      , t.sequence_number
14:35:11 646  	      , t.merchant_order_number
14:35:11 647  	      , t.account_number
14:35:11 648  	      , t.reason_code
14:35:11 649  	      , t.transaction_date
14:35:11 650  	      , t.chargeback_date
14:35:11 651  	      , t.activity_date
14:35:11 652  	      , t.chargeback_amount_action
14:35:11 653  	      , t.fee_amount
14:35:11 654  	      , t.usage_code
14:35:11 655  	      , t.mop_code
14:35:11 656  	      , t.authorization_date
14:35:11 657  	      , t.chargeback_due_date
14:35:11 658  	      , t.create_date
14:35:11 659  	      , t.created_by
14:35:11 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
14:35:11 661  	    WHERE ids.id = t.id;
14:35:11 662  	  END;
14:35:11 663  ----
14:35:11 664  --------------------------------------------------------------------------------
14:35:11 665  ----
14:35:11 666  
14:35:11 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 668  	  BEGIN
14:35:11 669  	    OPEN OUT_CURSOR FOR
14:35:11 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 671  	    SELECT
14:35:11 672  		t.id rcn_pp_settlement_id
14:35:11 673  	      , t.rcn_ext_source_log_id
14:35:11 674  	      , t.transaction_id
14:35:11 675  	      , t.invoice_id
14:35:11 676  	      , t.pp_ref_id
14:35:11 677  	      , t.pp_ref_id_type
14:35:11 678  	      , t.trans_event_code
14:35:11 679  	      , t.trans_init_date
14:35:11 680  	      , t.trans_comp_date
14:35:11 681  	      , t.trans_deb_or_cred
14:35:11 682  	      , t.gross_trans_amount
14:35:11 683  	      , t.gross_trans_currency
14:35:11 684  	      , t.fee_deb_or_cred
14:35:11 685  	      , t.fee_amount
14:35:11 686  	      , t.fee_currency
14:35:11 687  	      , t.custom_field
14:35:11 688  	      , t.create_date
14:35:11 689  	      , t.created_by
14:35:11 690  	    FROM rcn_pp_settlement t, ids
14:35:11 691  	    WHERE ids.id = t.id;
14:35:11 692  	  END;
14:35:11 693  ----
14:35:11 694  --------------------------------------------------------------------------------
14:35:11 695  ----
14:35:11 696  
14:35:11 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 698  	  BEGIN
14:35:11 699  	    OPEN OUT_CURSOR FOR
14:35:11 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 701  	    SELECT
14:35:11 702  		t.id rcn_pp_dispute_id
14:35:11 703  	      , t.rcn_ext_source_log_id
14:35:11 704  	      , t.dispute_type
14:35:11 705  	      , t.claimant_name
14:35:11 706  	      , t.claimant_email
14:35:11 707  	      , t.transaction_id
14:35:11 708  	      , t.trans_date
14:35:11 709  	      , t.disputed_amount
14:35:11 710  	      , t.disputed_amount_currency
14:35:11 711  	      , t.dispute_reason
14:35:11 712  	      , t.dispute_filing_date
14:35:11 713  	      , t.dispute_status
14:35:11 714  	      , t.dispute_case_id
14:35:11 715  	      , t.invoice_id
14:35:11 716  	      , t.create_date
14:35:11 717  	      , t.created_by
14:35:11 718  	    FROM
14:35:11 719  	    rcn_pp_dispute t, ids
14:35:11 720  	    WHERE ids.id = t.id;
14:35:11 721  	  END;
14:35:11 722  ----
14:35:11 723  --------------------------------------------------------------------------------
14:35:11 724  ----
14:35:11 725  
14:35:11 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 727  	  BEGIN
14:35:11 728  	    OPEN OUT_CURSOR FOR
14:35:11 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 730  	    SELECT
14:35:11 731  		t.id rcn_pp_trans_dtl_id
14:35:11 732  	      , t.rcn_ext_source_log_id
14:35:11 733  	      , t.transaction_id
14:35:11 734  	      , t.invoice_id
14:35:11 735  	      , t.pp_ref_id
14:35:11 736  	      , t.trans_event_code
14:35:11 737  	      , t.trans_init_date
14:35:11 738  	      , t.trans_comp_date
14:35:11 739  	      , t.trans_deb_or_cred
14:35:11 740  	      , t.gross_trans_amount
14:35:11 741  	      , t.gross_trans_currency
14:35:11 742  	      , t.fee_deb_or_cred
14:35:11 743  	      , t.fee_amount
14:35:11 744  	      , t.fee_currency
14:35:11 745  	      , t.trans_status
14:35:11 746  	      , t.insurance_amount
14:35:11 747  	      , t.sales_tax_amount
14:35:11 748  	      , t.shipping_amount
14:35:11 749  	      , t.trans_subject
14:35:11 750  	      , t.trans_note
14:35:11 751  	      , t.payer_acct_id
14:35:11 752  	      , t.payer_addr_status
14:35:11 753  	      , t.item_name
14:35:11 754  	      , t.item_id
14:35:11 755  	      , t.option_1_name
14:35:11 756  	      , t.option_1_value
14:35:11 757  	      , t.option_2_name
14:35:11 758  	      , t.option_2_value
14:35:11 759  	      , t.auction_site
14:35:11 760  	      , t.auction_buyer_id
14:35:11 761  	      , t.auction_closing_date
14:35:11 762  	      , t.shipping_addr_line_1
14:35:11 763  	      , t.shipping_addr_line_2
14:35:11 764  	      , t.shipping_addr_city
14:35:11 765  	      , t.shipping_addr_state
14:35:11 766  	      , t.shipping_addr_zip
14:35:11 767  	      , t.shipping_addr_country
14:35:11 768  	      , t.custom_field
14:35:11 769  	      , t.create_date
14:35:11 770  	      , t.created_by
14:35:11 771  	    FROM rcn_pp_trans_detail t, ids
14:35:11 772  	    WHERE ids.id = t.id;
14:35:11 773  	  END;
14:35:11 774  ----
14:35:11 775  --------------------------------------------------------------------------------
14:35:11 776  ----
14:35:11 777  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 778  	  BEGIN
14:35:11 779  	    OPEN OUT_CURSOR FOR
14:35:11 780  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 781  	    SELECT
14:35:11 782  		t.ID PAYPAL_ID
14:35:11 783  	      , ACCOUNT_ID
14:35:11 784  	      , INSTRUMENT_NAME
14:35:11 785  	      , CREATE_DATE
14:35:11 786  	      , CREATED_BY
14:35:11 787  	      , UPDATE_DATE
14:35:11 788  	      , UPDATED_BY
14:35:11 789  	      , s.value PAYPAL_STATUS
14:35:11 790  	      , STATE
14:35:11 791  	      , CITY
14:35:11 792  	      , POSTAL_CODE
14:35:11 793  	      , COUNTRY
14:35:11 794  	      , EXPIRATION_DATE
14:35:11 795  	    FROM paypal t, paypal_status s, ids
14:35:11 796  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
14:35:11 797  	  END;
14:35:11 798  ----
14:35:11 799  --------------------------------------------------------------------------------
14:35:11 800  ----
14:35:11 801  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:35:11 802  	  BEGIN
14:35:11 803  	    OPEN OUT_CURSOR FOR
14:35:11 804  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
14:35:11 805  	    SELECT
14:35:11 806  	      a.id ADDRESS_ID,
14:35:11 807  	      address1,
14:35:11 808  	      address2,
14:35:11 809  	      city,
14:35:11 810  	      state,
14:35:11 811  	      postal_code,
14:35:11 812  	      country,
14:35:11 813  	      create_date,
14:35:11 814  	      created_by,
14:35:11 815  	      update_date,
14:35:11 816  	      updated_by
14:35:11 817  	    FROM address a, ids
14:35:11 818  	    WHERE ids.id = a.id;
14:35:11 819  	  END;
14:35:11 820  ----
14:35:11 821  --------------------------------------------------------------------------------
14:35:11 822  ----
14:35:11 823  /**/
14:35:11 824  END PROCS_REPORTING;
14:35:11 825  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.08
14:35:11 SQL> 
14:35:11 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
14:35:11   2  
14:35:11   3  ----
14:35:11   4  --------------------------------------------------------------------------------
14:35:11   5  ----
14:35:11   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
14:35:11   7  	      return line_item.amount%type
14:35:11   8  	  is
14:35:11   9  	      v_discount  line_item.amount%type := 0;
14:35:11  10  	  begin
14:35:11  11  	      for x in (
14:35:11  12  		  select d.id discount_id
14:35:11  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
14:35:11  14  		  from discount d
14:35:11  15  		      join discount_line_item dli	      on dli.discount_id = d.id
14:35:11  16  		      join discount_product_offering dop      on dop.discount_id = d.id
14:35:11  17  		      join product_offering po		      on po.id = dop.product_offering_id
14:35:11  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
14:35:11  19  		  where dli.line_item_id = in_line_item_id
14:35:11  20  	      )
14:35:11  21  	      loop
14:35:11  22  		  v_discount := v_discount + x.discount_amount;
14:35:11  23  	      end loop;
14:35:11  24  
14:35:11  25  	      return v_discount;
14:35:11  26  	  end;
14:35:11  27  ----
14:35:11  28  --------------------------------------------------------------------------------
14:35:11  29  ----
14:35:11  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
14:35:11  31  	      return line_item.amount%type
14:35:11  32  	  is
14:35:11  33  	      v_li_total  line_item.amount%type;
14:35:11  34  	      v_inv_total line_item.amount%type;
14:35:11  35  	      v_ref_total line_item.amount%type;
14:35:11  36  	  begin
14:35:11  37  
14:35:11  38  	      for li in (
14:35:11  39  		  select li.invoice_id, po.*
14:35:11  40  		  from line_item li
14:35:11  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
14:35:11  42  		  where li.id = in_line_item_id
14:35:11  43  	      )
14:35:11  44  	      loop
14:35:11  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
14:35:11  46  
14:35:11  47  		  v_inv_total := 0;
14:35:11  48  		  v_ref_total := 0;
14:35:11  49  		  for x in (
14:35:11  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
14:35:11  51  		      from charge c
14:35:11  52  		      where c.invoice_id = li.invoice_id
14:35:11  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
14:35:11  54  		  )
14:35:11  55  		  loop
14:35:11  56  		      if (x.type = 1) then
14:35:11  57  			  v_inv_total := x.total;
14:35:11  58  		      else
14:35:11  59  			  v_ref_total := x.total;
14:35:11  60  		      end if;
14:35:11  61  		  end loop;
14:35:11  62  
14:35:11  63  		  if (v_inv_total > 0) then
14:35:11  64  		      return (v_ref_total / v_inv_total) * v_li_total;
14:35:11  65  		  else
14:35:11  66  		      return 0;
14:35:11  67  		  end if;
14:35:11  68  
14:35:11  69  	      end loop;
14:35:11  70  
14:35:11  71  	      return 0;
14:35:11  72  	  end;
14:35:11  73  ----
14:35:11  74  --------------------------------------------------------------------------------
14:35:11  75  ----
14:35:11  76  	PROCEDURE EXTRACT_LINE_ITEMS(
14:35:11  77  	  in_lower_date_bound DATE,
14:35:11  78  	  in_upper_date_bound DATE,
14:35:11  79  	  out_lic_cur OUT sys_refcursor
14:35:11  80  	) AS
14:35:11  81  	BEGIN
14:35:11  82  	  OPEN out_lic_cur FOR
14:35:11  83  	  with liq as (
14:35:11  84  		SELECT li2.id
14:35:11  85  		      FROM
14:35:11  86  			   line_item li2
14:35:11  87  		      WHERE
14:35:11  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
14:35:11  89  		UNION
14:35:11  90  		SELECT li2.id
14:35:11  91  		      FROM
14:35:11  92  			   line_item li2
14:35:11  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
14:35:11  94  		      WHERE
14:35:11  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
14:35:11  96  		UNION
14:35:11  97  		SELECT li2.id
14:35:11  98  		      FROM
14:35:11  99  			   line_item li2
14:35:11 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
14:35:11 101  		      WHERE
14:35:11 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
14:35:11 103  		UNION
14:35:11 104  		SELECT li2.id
14:35:11 105  		      FROM
14:35:11 106  			   line_item li2
14:35:11 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
14:35:11 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
14:35:11 109  		      WHERE
14:35:11 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
14:35:11 111  		UNION
14:35:11 112  		SELECT li2.id
14:35:11 113  		      FROM
14:35:11 114  			   line_item li2
14:35:11 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
14:35:11 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
14:35:11 117  		      WHERE
14:35:11 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
14:35:11 119  		UNION
14:35:11 120  		SELECT li2.id
14:35:11 121  		      FROM
14:35:11 122  			   line_item li2
14:35:11 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
14:35:11 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
14:35:11 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
14:35:11 126  		      WHERE
14:35:11 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
14:35:11 128  	  )
14:35:11 129  	  SELECT distinct
14:35:11 130  	    line_item.id				 line_item_id
14:35:11 131  	  , product.name				 product_name
14:35:11 132  	  , product.unit_price				 product_unit_price
14:35:11 133  	  , product.production_cost			 product_production_cost
14:35:11 134  	  , offer_chain.name				 offer_chain_name
14:35:11 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
14:35:11 136  	  , gclicense.purchase_date			 subscription_start_date
14:35:11 137  	  , gclicense.start_date			 license_start_date
14:35:11 138  	  , gclicense.end_date				 license_end_date
14:35:11 139  	  , credit_card.city				 cc_city
14:35:11 140  	  , credit_card.state				 cc_state
14:35:11 141  	  , credit_card.postal_code			 cc_postal_code
14:35:11 142  	  , line_item.create_date			 line_item_purchase_date
14:35:11 143  	  , gclicense.account_regi_id
14:35:11 144  	  , product_offering.quantity			 purchase_quantity
14:35:11 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
14:35:11 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
14:35:11 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
14:35:11 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
14:35:11 149  	  , 0						 purchase_tax_amount
14:35:11 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
14:35:11 151  	  , invoice.id					 invoice_number
14:35:11 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
14:35:11 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
14:35:11 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
14:35:11 155  	  FROM
14:35:11 156  	       line_item
14:35:11 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
14:35:11 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
14:35:11 159  	  JOIN product				ON product.id	       = product_offering.product_id
14:35:11 160  	  join (
14:35:11 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
14:35:11 162  		      ,subscription.sct_id, license.start_date, license.end_date
14:35:11 163  		      ,account.group_id account_regi_id
14:35:11 164  		from	 license
14:35:11 165  		    join subscription ON subscription.id = license.subscription_id
14:35:11 166  		    join account      ON account.id	 = subscription.account_id
14:35:11 167  		union all
14:35:11 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
14:35:11 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
14:35:11 170  		      ,gc.purchaser_group_id account_regi_id
14:35:11 171  		from	 gift_certificate gc
14:35:11 172  		where
14:35:11 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
14:35:11 174  
14:35:11 175  	  ) gclicense
14:35:11 176  						on gclicense.invoice_id = invoice.id
14:35:11 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
14:35:11 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
14:35:11 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
14:35:11 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
14:35:11 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
14:35:11 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
14:35:11 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
14:35:11 184  	  join liq				on line_item.id 	= liq.id
14:35:11 185  	    ;
14:35:11 186  	END EXTRACT_LINE_ITEMS;
14:35:11 187  ----
14:35:11 188  --------------------------------------------------------------------------------
14:35:11 189  ----
14:35:11 190  END PROCS_REPORTING_1A;
14:35:11 191  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:11 SQL> 
14:35:11 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V5" AS
14:35:11   2  
14:35:11   3  FUNCTION GET_PRODUCT_NAMES(
14:35:11   4  	in_offer_id IN NUMBER
14:35:11   5  ) RETURN VARCHAR2 AS
14:35:11   6  var_result_names VARCHAR2(1024);
14:35:11   7  BEGIN
14:35:11   8  
14:35:11   9  	var_result_names := NULL;
14:35:11  10  
14:35:11  11  	FOR f_product IN (
14:35:11  12  	  SELECT
14:35:11  13  	    PRODUCT.NAME
14:35:11  14  	  FROM
14:35:11  15  	    PRODUCT
14:35:11  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:35:11  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:35:11  18  	  WHERE
14:35:11  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
14:35:11  20  	)
14:35:11  21  	LOOP
14:35:11  22  
14:35:11  23  	  IF var_result_names IS NULL THEN
14:35:11  24  	    var_result_names := f_product.NAME;
14:35:11  25  	  ELSE
14:35:11  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
14:35:11  27  	  END IF;
14:35:11  28  
14:35:11  29  	END LOOP;
14:35:11  30  
14:35:11  31  	RETURN var_result_names;
14:35:11  32  
14:35:11  33  END GET_PRODUCT_NAMES;
14:35:11  34  
14:35:11  35  /******************************************************************************/
14:35:11  36  
14:35:11  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
14:35:11  38  	in_start_date  IN DATE,
14:35:11  39  	in_end_date    IN DATE,
14:35:11  40  	out_result_set OUT SYS_REFCURSOR
14:35:11  41  ) AS
14:35:11  42  -- CONSTANTS
14:35:11  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:35:11  44  BEGIN
14:35:11  45  
14:35:11  46  	OPEN out_result_set FOR
14:35:11  47  	SELECT
14:35:11  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
14:35:11  49  	  "Offer_Id",
14:35:11  50  	  "New_Purchases_Num",
14:35:11  51  	  "Number_Of_renewals",
14:35:11  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
14:35:11  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
14:35:11  54  	FROM (
14:35:11  55  	  SELECT
14:35:11  56  	    "Offer_Id",
14:35:11  57  	    "Number_Of_renewals",
14:35:11  58  	    "New_Purchases_Num"
14:35:11  59  	  FROM (
14:35:11  60  	    SELECT
14:35:11  61  	      OFFER.ID as "Offer_Id",
14:35:11  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
14:35:11  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
14:35:11  64  	    FROM
14:35:11  65  	      OFFER
14:35:11  66  	  )
14:35:11  67  	  WHERE
14:35:11  68  	    "New_Purchases_Num" > 0
14:35:11  69  	    OR "Number_Of_renewals" > 0
14:35:11  70  	);
14:35:11  71  
14:35:11  72  	/*
14:35:11  73  	OPEN out_result_set FOR
14:35:11  74  	SELECT
14:35:11  75  	  "Product_Names",
14:35:11  76  	  "Offer_Id",
14:35:11  77  	  "New_Purchases_Num",
14:35:11  78  	  "Number_Of_renewals",
14:35:11  79  	  "Total_Dollar_Value",
14:35:11  80  	  "Unique_Purchasers_num"
14:35:11  81  	FROM (
14:35:11  82  	  SELECT
14:35:11  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
14:35:11  84  	    offer.id as "Offer_Id",
14:35:11  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
14:35:11  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
14:35:11  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
14:35:11  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
14:35:11  89  	  FROM
14:35:11  90  	    OFFER
14:35:11  91  	)
14:35:11  92  	WHERE
14:35:11  93  	  "New_Purchases_Num" > 0
14:35:11  94  	  OR "Number_Of_renewals" > 0
14:35:11  95  	  OR "Total_Dollar_Value" > 0
14:35:11  96  	  OR "Unique_Purchasers_num" > 0;
14:35:11  97  	*/
14:35:11  98  
14:35:11  99  END GET_FULL_FLASH_REPORT_PURCH;
14:35:11 100  
14:35:11 101  /******************************************************************************/
14:35:11 102  
14:35:11 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
14:35:11 104  	in_offer_id	       IN NUMBER,
14:35:11 105  	in_start_date	       IN DATE,
14:35:11 106  	in_end_date	       IN DATE,
14:35:11 107  	out_new_purchasers_num OUT NUMBER,
14:35:11 108  	out_renewals_num       OUT NUMBER,
14:35:11 109  	out_product_names      OUT VARCHAR2,
14:35:11 110  	out_total_dollar_value OUT NUMBER,
14:35:11 111  	out_unique_purchasers  OUT NUMBER
14:35:11 112  ) AS
14:35:11 113  -- CONSTANTS
14:35:11 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:35:11 115  BEGIN
14:35:11 116  
14:35:11 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
14:35:11 118  
14:35:11 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
14:35:11 120  	  in_offer_id,
14:35:11 121  	  in_start_date,
14:35:11 122  	  in_end_date
14:35:11 123  	);
14:35:11 124  
14:35:11 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
14:35:11 126  	  in_offer_id,
14:35:11 127  	  in_start_date,
14:35:11 128  	  in_end_date
14:35:11 129  	);
14:35:11 130  
14:35:11 131  	out_renewals_num := FLR_RENEWALS_NUM(
14:35:11 132  	  in_offer_id,
14:35:11 133  	  in_start_date,
14:35:11 134  	  in_end_date
14:35:11 135  	);
14:35:11 136  
14:35:11 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
14:35:11 138  	  in_offer_id,
14:35:11 139  	  in_start_date,
14:35:11 140  	  in_end_date
14:35:11 141  	);
14:35:11 142  
14:35:11 143  END GET_FLASH_REPORT_PURCHASES;
14:35:11 144  
14:35:11 145  /******************************************************************************/
14:35:11 146  
14:35:11 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
14:35:11 148  	in_offer_id	       IN NUMBER,
14:35:11 149  	in_start_date	       IN DATE,
14:35:11 150  	in_end_date	       IN DATE
14:35:11 151  ) RETURN NUMBER AS
14:35:11 152  -- CONSTANTS
14:35:11 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:35:11 154  -- VARIABLES
14:35:11 155  var_new_purchases_num NUMBER;
14:35:11 156  BEGIN
14:35:11 157  	SELECT
14:35:11 158  	  COUNT(LICENSE.ID)
14:35:11 159  	  into
14:35:11 160  	  var_new_purchases_num
14:35:11 161  	FROM
14:35:11 162  	  LICENSE
14:35:11 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
14:35:11 164  	WHERE
14:35:11 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
14:35:11 166  	  AND LICENSE.OFFER_ID = in_offer_id
14:35:11 167  	  AND CHARGE.CHARGE_AMOUNT > 0
14:35:11 168  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
14:35:11 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
14:35:11 170  
14:35:11 171  	RETURN var_new_purchases_num;
14:35:11 172  END FLR_NEW_PURCHASERS_NUM;
14:35:11 173  
14:35:11 174  /******************************************************************************/
14:35:11 175  
14:35:11 176  FUNCTION FLR_RENEWALS_NUM (
14:35:11 177  	in_offer_id	       IN NUMBER,
14:35:11 178  	in_start_date	       IN DATE,
14:35:11 179  	in_end_date	       IN DATE
14:35:11 180  ) RETURN NUMBER AS
14:35:11 181  -- CONSTANTS
14:35:11 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:35:11 183  -- VARIABLES
14:35:11 184  var_renewals_num NUMBER;
14:35:11 185  BEGIN
14:35:11 186  	SELECT
14:35:11 187  	  COUNT(LICENSE.ID)
14:35:11 188  	  into
14:35:11 189  	  var_renewals_num
14:35:11 190  	FROM
14:35:11 191  	  LICENSE
14:35:11 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
14:35:11 193  	WHERE
14:35:11 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
14:35:11 195  	  AND LICENSE.OFFER_ID = in_offer_id
14:35:11 196  	  AND CHARGE.CHARGE_AMOUNT > 0
14:35:11 197  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
14:35:11 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
14:35:11 199  
14:35:11 200  	RETURN var_renewals_num;
14:35:11 201  END FLR_RENEWALS_NUM;
14:35:11 202  
14:35:11 203  /******************************************************************************/
14:35:11 204  
14:35:11 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
14:35:11 206  	in_offer_id	       IN NUMBER,
14:35:11 207  	in_start_date	       IN DATE,
14:35:11 208  	in_end_date	       IN DATE
14:35:11 209  ) RETURN NUMBER AS
14:35:11 210  var_dollar_value NUMBER(10,2);
14:35:11 211  BEGIN
14:35:11 212  	SELECT
14:35:11 213  	  SUM(CHARGE.CHARGE_AMOUNT)
14:35:11 214  	  into
14:35:11 215  	  var_dollar_value
14:35:11 216  	FROM
14:35:11 217  	  LICENSE
14:35:11 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
14:35:11 219  	WHERE
14:35:11 220  	  LICENSE.OFFER_ID = in_offer_id
14:35:11 221  	  AND CHARGE.CHARGE_AMOUNT > 0
14:35:11 222  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
14:35:11 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
14:35:11 224  
14:35:11 225  	RETURN var_dollar_value;
14:35:11 226  END FLR_TOTAL_DOLLAR_VALUE;
14:35:11 227  
14:35:11 228  /******************************************************************************/
14:35:11 229  
14:35:11 230  FUNCTION FLR_UNIQUE_PURCHASERS (
14:35:11 231  	in_offer_id	       IN NUMBER,
14:35:11 232  	in_start_date	       IN DATE,
14:35:11 233  	in_end_date	       IN DATE
14:35:11 234  ) RETURN NUMBER AS
14:35:11 235  -- CONSTANTS
14:35:11 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:35:11 237  -- VARIABLES
14:35:11 238  var_unique_purchasers NUMBER;
14:35:11 239  BEGIN
14:35:11 240  	SELECT
14:35:11 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
14:35:11 242  	FROM
14:35:11 243  	  LICENSE
14:35:11 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
14:35:11 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:11 246  	WHERE
14:35:11 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
14:35:11 248  	  AND LICENSE.OFFER_ID = in_offer_id
14:35:11 249  	  AND CHARGE.CHARGE_AMOUNT > 0
14:35:11 250  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
14:35:11 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
14:35:11 252  
14:35:11 253  	RETURN var_unique_purchasers;
14:35:11 254  END;
14:35:11 255  
14:35:11 256  END PROCS_REPORTS_V5;
14:35:11 257  .
14:35:11 SQL> /

Package body created.

Elapsed: 00:00:00.08
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE INCREMENT_VERSION
14:35:12   4  /*
14:35:12   5  Throws exceptions:
14:35:12   6  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12   7  */
14:35:12   8  AS
14:35:12   9  BEGIN
14:35:12  10  
14:35:12  11  	UPDATE SYS_VERSION SET version=version+1;
14:35:12  12  
14:35:12  13  END INCREMENT_VERSION;
14:35:12  14  
14:35:12  15  /*************************************************************/
14:35:12  16  
14:35:12  17  PROCEDURE CHECK_VERSION(
14:35:12  18  	  in_vers    IN NUMBER,
14:35:12  19  	  out_result OUT NUMBER
14:35:12  20  ) AS
14:35:12  21  	current_version NUMBER;
14:35:12  22  BEGIN
14:35:12  23  	SELECT version INTO current_version FROM SYS_VERSION;
14:35:12  24  	IF(current_version != in_vers) THEN
14:35:12  25  	  out_result := 1;
14:35:12  26  	ELSE
14:35:12  27  	  out_result := 0;
14:35:12  28  	END IF;
14:35:12  29  END CHECK_VERSION;
14:35:12  30  
14:35:12  31  END PROCS_SYSTEM_V16;
14:35:12  32  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE ADD_TAX (
14:35:12   4  	in_tax_type_id		 IN NUMBER,
14:35:12   5  	in_calculated_amount	 IN NUMBER,
14:35:12   6  	in_created_by		 IN VARCHAR2,
14:35:12   7  	in_line_item_id 	 IN NUMBER,
14:35:12   8  	in_effective_rate	 IN VARCHAR2,
14:35:12   9  	in_taxable_amount	 IN NUMBER,
14:35:12  10  	in_tax_rule_id		 IN NUMBER,
14:35:12  11  	in_jurisdiction_level_id IN NUMBER,
14:35:12  12  	in_jurisdiction_name	 IN VARCHAR2,
14:35:12  13  	in_jurisdiction_id	 IN VARCHAR2,
14:35:12  14  	in_ext_tax_type 	 IN VARCHAR2,
14:35:12  15  	in_ext_result		 IN VARCHAR2,
14:35:12  16  	in_imposition_type	 IN VARCHAR2,
14:35:12  17  	in_imposition		 IN VARCHAR2
14:35:12  18  ) AS
14:35:12  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
14:35:12  20  -- VARIABLES
14:35:12  21  var_new_tax_id	NUMBER;
14:35:12  22  temp_line_item_id NUMBER;
14:35:12  23  -- EXCEPTIONS
14:35:12  24  BAD_LINE_ITEM_ID EXCEPTION;
14:35:12  25  BEGIN
14:35:12  26  
14:35:12  27  	BEGIN
14:35:12  28  	  SELECT
14:35:12  29  	    LINE_ITEM.ID into temp_line_item_id
14:35:12  30  	  FROM
14:35:12  31  	    LINE_ITEM
14:35:12  32  	  WHERE
14:35:12  33  	    LINE_ITEM.ID = in_line_item_id;
14:35:12  34  	  EXCEPTION
14:35:12  35  	    WHEN NO_DATA_FOUND THEN
14:35:12  36  	      RAISE BAD_LINE_ITEM_ID;
14:35:12  37  	END;
14:35:12  38  
14:35:12  39  	var_new_tax_id := NULL;
14:35:12  40  
14:35:12  41  	PROCS_TAXES_CRU_V16.CREATE_TAX(
14:35:12  42  	  var_new_tax_id,
14:35:12  43  	  in_tax_type_id,
14:35:12  44  	  in_calculated_amount,
14:35:12  45  	  in_created_by,
14:35:12  46  	  in_line_item_id,
14:35:12  47  	  in_effective_rate,
14:35:12  48  	  in_taxable_amount,
14:35:12  49  	  in_tax_rule_id,
14:35:12  50  	  in_jurisdiction_level_id,
14:35:12  51  	  in_jurisdiction_name,
14:35:12  52  	  in_jurisdiction_id,
14:35:12  53  	  in_ext_tax_type,
14:35:12  54  	  in_ext_result,
14:35:12  55  	  in_imposition_type,
14:35:12  56  	  in_imposition
14:35:12  57  	);
14:35:12  58  
14:35:12  59  EXCEPTION
14:35:12  60  WHEN BAD_LINE_ITEM_ID THEN
14:35:12  61  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12  62  	  SPROC_NAME, 'No such line item');
14:35:12  63  WHEN OTHERS THEN
14:35:12  64  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12  66  END ADD_TAX;
14:35:12  67  
14:35:12  68  /******************************************************************************/
14:35:12  69  
14:35:12  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
14:35:12  71  	in_country_code IN CHAR,
14:35:12  72  	in_check_date IN DATE,
14:35:12  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V16.FALSE
14:35:12  74  ) AS
14:35:12  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
14:35:12  76  -- VARIABLES
14:35:12  77  var_countries_count NUMBER;
14:35:12  78  var_result	  NUMBER;
14:35:12  79  BEGIN
14:35:12  80  
14:35:12  81  	SELECT
14:35:12  82  	  COUNT(1) into var_countries_count
14:35:12  83  	FROM
14:35:12  84  	  TAX_COUNTRY_EXCLUSION_LIST
14:35:12  85  	WHERE
14:35:12  86  	  country_code = in_country_code
14:35:12  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
14:35:12  88  	  AND (
14:35:12  89  	    end_date is null
14:35:12  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
14:35:12  91  	  );
14:35:12  92  
14:35:12  93  	IF var_countries_count > 1 THEN
14:35:12  94  	  -- [REVU] Should not happen. DB structure error
14:35:12  95  	  var_result := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12  96  	ELSIF var_countries_count = 1 THEN
14:35:12  97  	  var_result := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12  98  	ELSE
14:35:12  99  	  var_result := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 100  	END IF;
14:35:12 101  
14:35:12 102  	out_is_founded := var_result;
14:35:12 103  
14:35:12 104  EXCEPTION
14:35:12 105  WHEN OTHERS THEN
14:35:12 106  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 108  END CHECK_COUNTRY_FOR_EXCLUSION;
14:35:12 109  
14:35:12 110  /******************************************************************************/
14:35:12 111  
14:35:12 112  PROCEDURE GET_TAX_CATEGORY (
14:35:12 113  	in_tax_category_id IN NUMBER,
14:35:12 114  	out_result_set	   OUT SYS_REFCURSOR
14:35:12 115  ) AS
14:35:12 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
14:35:12 117  BEGIN
14:35:12 118  
14:35:12 119  	OPEN out_result_set FOR
14:35:12 120  	SELECT
14:35:12 121  	  ID,
14:35:12 122  	  CODE,
14:35:12 123  	  DESCRIPTION
14:35:12 124  	FROM
14:35:12 125  	  TAX_CATEGORY
14:35:12 126  	WHERE
14:35:12 127  	  ID = in_tax_category_id;
14:35:12 128  
14:35:12 129  EXCEPTION
14:35:12 130  WHEN OTHERS THEN
14:35:12 131  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 133  END GET_TAX_CATEGORY;
14:35:12 134  
14:35:12 135  END PROCS_TAXES_V16;
14:35:12 136  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.00
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE CREATE_TRANSACTION (
14:35:12   4  /*
14:35:12   5  Throws exceptions:
14:35:12   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12   8  */
14:35:12   9  	in_transaction_id  IN NUMBER,
14:35:12  10  	in_status_id	   IN NUMBER,
14:35:12  11  	in_amount	   IN NUMBER,
14:35:12  12  	in_created_by	   IN VARCHAR2,
14:35:12  13  	in_order_id	   IN VARCHAR2,
14:35:12  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE,
14:35:12  15  	out_transaction_id OUT NUMBER
14:35:12  16  ) AS
14:35:12  17  -- VARIABLES
14:35:12  18  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
14:35:12  19  var_transaction_count  NUMBER;
14:35:12  20  -- EXCEPTIONS
14:35:12  21  BAD_TRANSACTION_ID     EXCEPTION;
14:35:12  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12  23  BEGIN
14:35:12  24  
14:35:12  25  	IF in_transaction_id IS NOT NULL THEN
14:35:12  26  	  SELECT
14:35:12  27  	    COUNT(*) into var_transaction_count
14:35:12  28  	  FROM
14:35:12  29  	    TRANSACTION
14:35:12  30  	  WHERE
14:35:12  31  	    TRANSACTION.ID = in_transaction_id;
14:35:12  32  	  IF var_transaction_count > 0 THEN
14:35:12  33  	    RAISE BAD_TRANSACTION_ID;
14:35:12  34  	  END IF;
14:35:12  35  	END IF;
14:35:12  36  
14:35:12  37  	PROCS_TRANSACTION_CRU_V16.CREATE_TRANSACTION(
14:35:12  38  	  out_transaction_id	   => out_transaction_id,
14:35:12  39  	  in_transaction_id	   => in_transaction_id,
14:35:12  40  	  in_transaction_status_id => in_status_id,
14:35:12  41  	  in_transaction_amount    => in_amount,
14:35:12  42  	  in_created_by 	   => in_created_by,
14:35:12  43  	  in_order_id		   => in_order_id,
14:35:12  44  	  in_is_refund		   => in_is_refund
14:35:12  45  	);
14:35:12  46  
14:35:12  47  EXCEPTION
14:35:12  48  WHEN BAD_TRANSACTION_ID THEN
14:35:12  49  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:12  50  	  SPROC_NAME, 'Transaction with given id already exists');
14:35:12  51  WHEN OTHERS THEN
14:35:12  52  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12  53  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12  54  END CREATE_TRANSACTION;
14:35:12  55  
14:35:12  56  /******************************************************************************/
14:35:12  57  
14:35:12  58  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
14:35:12  59  /*
14:35:12  60  Throws exceptions:
14:35:12  61  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12  62  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  63  */
14:35:12  64  	in_transaction_id	   IN NUMBER,
14:35:12  65  	in_trans_attempt_status    IN NUMBER,
14:35:12  66  	in_external_status_code    IN VARCHAR2,
14:35:12  67  	in_external_status_message IN VARCHAR2,
14:35:12  68  	in_created_by		   IN VARCHAR2,
14:35:12  69  	in_ext_transaction_id	   IN VARCHAR2,
14:35:12  70  	out_transaction_attempt_id OUT NUMBER
14:35:12  71  ) AS
14:35:12  72  -- VARIABLES
14:35:12  73  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
14:35:12  74  var_transaction_create_date DATE;
14:35:12  75  var_transaction_attempt_id  NUMBER;
14:35:12  76  
14:35:12  77  -- EXCEPTIONS
14:35:12  78  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
14:35:12  79  BAD_TRANSACTION_ID       EXCEPTION;
14:35:12  80  BEGIN
14:35:12  81  
14:35:12  82  	-- Check that transaction exists
14:35:12  83  	BEGIN
14:35:12  84  	  SELECT
14:35:12  85  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
14:35:12  86  	  FROM
14:35:12  87  	    TRANSACTION
14:35:12  88  	  WHERE
14:35:12  89  	    TRANSACTION.ID = in_transaction_id;
14:35:12  90  	  EXCEPTION
14:35:12  91  	    WHEN OTHERS THEN
14:35:12  92  	      RAISE BAD_TRANSACTION_ID;
14:35:12  93  	END;
14:35:12  94  
14:35:12  95  	-- Check that transaction status is correct
14:35:12  96  	IF in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
14:35:12  97  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
14:35:12  98  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
14:35:12  99  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
14:35:12 100  	END IF;
14:35:12 101  
14:35:12 102  	var_transaction_attempt_id := NULL;
14:35:12 103  	PROCS_TRANSACTION_CRU_V16.CREATE_TRANSACTION_ATTEMPT(
14:35:12 104  	  inout_transaction_attempt_id => var_transaction_attempt_id,
14:35:12 105  	  in_transaction_id	       => in_transaction_id,
14:35:12 106  	  in_external_status_code      => in_external_status_code,
14:35:12 107  	  in_external_status_message   => in_external_status_message,
14:35:12 108  	  in_created_by 	       => in_created_by,
14:35:12 109  	  in_external_transaction_id   => in_ext_transaction_id,
14:35:12 110  	  in_transaction_start_time    => var_transaction_create_date,
14:35:12 111  	  in_status_id		       => in_trans_attempt_status
14:35:12 112  	);
14:35:12 113  
14:35:12 114  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
14:35:12 115  	  in_transaction_id => in_transaction_id,
14:35:12 116  	  in_updated_by     => in_created_by
14:35:12 117  	);
14:35:12 118  
14:35:12 119  	out_transaction_attempt_id := var_transaction_attempt_id;
14:35:12 120  
14:35:12 121  EXCEPTION
14:35:12 122  WHEN BAD_TRANSACTION_ID THEN
14:35:12 123  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 124  	  SPROC_NAME, 'No such transaction');
14:35:12 125  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
14:35:12 126  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 127  	  SPROC_NAME, 'Bad transaction attempt status');
14:35:12 128  WHEN OTHERS THEN
14:35:12 129  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 130  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 131  END CREATE_TRANSACTION_ATTEMPT;
14:35:12 132  
14:35:12 133  /******************************************************************************/
14:35:12 134  
14:35:12 135  PROCEDURE UPDATE_TRANSACTION_STATUS (
14:35:12 136  /*
14:35:12 137  Throws exceptions:
14:35:12 138  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 139  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 140  */
14:35:12 141  	in_transaction_id	 IN NUMBER,
14:35:12 142  	in_updated_by		 IN VARCHAR2,
14:35:12 143  	in_transaction_status_id IN NUMBER
14:35:12 144  ) AS
14:35:12 145  -- VARIABLES
14:35:12 146  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
14:35:12 147  temp_transaction_id NUMBER;
14:35:12 148  
14:35:12 149  -- EXCEPTIONS
14:35:12 150  BAD_TRANSACTION_ID     EXCEPTION;
14:35:12 151  BAD_TRANSACTION_STATUS EXCEPTION;
14:35:12 152  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 153  BEGIN
14:35:12 154  
14:35:12 155  	-- Check that transaction exists
14:35:12 156  	BEGIN
14:35:12 157  	  SELECT
14:35:12 158  	    TRANSACTION.ID into temp_transaction_id
14:35:12 159  	  FROM
14:35:12 160  	    TRANSACTION
14:35:12 161  	  WHERE
14:35:12 162  	    TRANSACTION.ID = in_transaction_id;
14:35:12 163  	  EXCEPTION
14:35:12 164  	    WHEN OTHERS THEN
14:35:12 165  	      RAISE BAD_TRANSACTION_ID;
14:35:12 166  	END;
14:35:12 167  
14:35:12 168  	-- Check that transaction status is correct
14:35:12 169  	IF    in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_PENDING
14:35:12 170  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
14:35:12 171  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_CHARGEBACK
14:35:12 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V16.TRANSACTION_DECLINED THEN
14:35:12 173  	  RAISE BAD_TRANSACTION_STATUS;
14:35:12 174  	END IF;
14:35:12 175  
14:35:12 176  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
14:35:12 177  	  in_transaction_id	   => in_transaction_id,
14:35:12 178  	  in_updated_by 	   => in_updated_by,
14:35:12 179  	  in_transaction_status_id => in_transaction_status_id
14:35:12 180  	);
14:35:12 181  
14:35:12 182  EXCEPTION
14:35:12 183  WHEN BAD_TRANSACTION_ID THEN
14:35:12 184  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 185  	  SPROC_NAME, 'No such transaction');
14:35:12 186  WHEN BAD_TRANSACTION_STATUS THEN
14:35:12 187  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 188  	  SPROC_NAME, 'Bad transaction status');
14:35:12 189  WHEN OTHERS THEN
14:35:12 190  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 191  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 192  END UPDATE_TRANSACTION_STATUS;
14:35:12 193  
14:35:12 194  /******************************************************************************/
14:35:12 195  
14:35:12 196  PROCEDURE UPDATE_TRANSACTION_SETTLED (
14:35:12 197  /*
14:35:12 198  Throws exceptions:
14:35:12 199  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 200  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 201  */
14:35:12 202  	in_transaction_id	 IN NUMBER,
14:35:12 203  	in_updated_by		 IN VARCHAR2,
14:35:12 204  	in_is_settled		 IN NUMBER
14:35:12 205  ) AS
14:35:12 206  -- VARIABLES
14:35:12 207  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
14:35:12 208  temp_transaction_id NUMBER;
14:35:12 209  
14:35:12 210  -- EXCEPTIONS
14:35:12 211  BAD_TRANSACTION_ID     EXCEPTION;
14:35:12 212  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 213  BEGIN
14:35:12 214  
14:35:12 215  	-- Check that transaction exists
14:35:12 216  	BEGIN
14:35:12 217  	  SELECT
14:35:12 218  	    TRANSACTION.ID into temp_transaction_id
14:35:12 219  	  FROM
14:35:12 220  	    TRANSACTION
14:35:12 221  	  WHERE
14:35:12 222  	    TRANSACTION.ID = in_transaction_id;
14:35:12 223  	  EXCEPTION
14:35:12 224  	    WHEN OTHERS THEN
14:35:12 225  	      RAISE BAD_TRANSACTION_ID;
14:35:12 226  	END;
14:35:12 227  
14:35:12 228  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
14:35:12 229  	  in_transaction_id	   => in_transaction_id,
14:35:12 230  	  in_updated_by 	   => in_updated_by,
14:35:12 231  	  in_is_settled 	   => in_is_settled
14:35:12 232  	);
14:35:12 233  
14:35:12 234  EXCEPTION
14:35:12 235  WHEN BAD_TRANSACTION_ID THEN
14:35:12 236  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 237  	  SPROC_NAME, 'No such transaction');
14:35:12 238  WHEN OTHERS THEN
14:35:12 239  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 241  END UPDATE_TRANSACTION_SETTLED;
14:35:12 242  
14:35:12 243  /******************************************************************************/
14:35:12 244  
14:35:12 245  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
14:35:12 246  /*
14:35:12 247  Throws exceptions:
14:35:12 248  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 249  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 250  */
14:35:12 251  	in_transaction_attempt_id IN NUMBER,
14:35:12 252  	in_updated_by		  IN VARCHAR2
14:35:12 253  ) AS
14:35:12 254  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
14:35:12 255  -- VARIABLES
14:35:12 256  var_transaction_id NUMBER;
14:35:12 257  -- EXCEPTION
14:35:12 258  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
14:35:12 259  BEGIN
14:35:12 260  
14:35:12 261  	BEGIN
14:35:12 262  	  SELECT
14:35:12 263  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
14:35:12 264  	  FROM
14:35:12 265  	    TRANSACTION_ATTEMPT
14:35:12 266  	  WHERE
14:35:12 267  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
14:35:12 268  	  EXCEPTION
14:35:12 269  	    WHEN NO_DATA_FOUND THEN
14:35:12 270  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
14:35:12 271  	END;
14:35:12 272  
14:35:12 273  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION(
14:35:12 274  	  in_transaction_id => var_transaction_id,
14:35:12 275  	  in_updated_by     => in_updated_by
14:35:12 276  	);
14:35:12 277  
14:35:12 278  EXCEPTION
14:35:12 279  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
14:35:12 280  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 281  	  SPROC_NAME, 'No such transaction attempt');
14:35:12 282  WHEN OTHERS THEN
14:35:12 283  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 284  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 285  END UPDATE_TRNSCTN_ATTEMPT_TIME;
14:35:12 286  
14:35:12 287  /******************************************************************************/
14:35:12 288  
14:35:12 289  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
14:35:12 290  /*
14:35:12 291  Throws exceptions:
14:35:12 292  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 293  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 294  */
14:35:12 295  	in_transaction_attempt_id     IN NUMBER,
14:35:12 296  	in_transaction_attempt_status IN NUMBER
14:35:12 297  ) AS
14:35:12 298  -- VARIABLES
14:35:12 299  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
14:35:12 300  temp_transaction_attempt_id NUMBER;
14:35:12 301  
14:35:12 302  -- EXCEPTION
14:35:12 303  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
14:35:12 304  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
14:35:12 305  BEGIN
14:35:12 306  
14:35:12 307  	-- Check that transaction attempt exists
14:35:12 308  	BEGIN
14:35:12 309  	  SELECT
14:35:12 310  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
14:35:12 311  	  FROM
14:35:12 312  	    TRANSACTION_ATTEMPT
14:35:12 313  	  WHERE
14:35:12 314  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
14:35:12 315  	  EXCEPTION
14:35:12 316  	    WHEN NO_DATA_FOUND THEN
14:35:12 317  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
14:35:12 318  	END;
14:35:12 319  
14:35:12 320  	-- Check that transaction attempt is correct
14:35:12 321  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
14:35:12 322  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
14:35:12 323  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
14:35:12 324  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
14:35:12 325  	END IF;
14:35:12 326  
14:35:12 327  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ATTEMPT(
14:35:12 328  	  in_transaction_attempt_id => in_transaction_attempt_id,
14:35:12 329  	  in_status_id		    => in_transaction_attempt_status
14:35:12 330  	);
14:35:12 331  
14:35:12 332  EXCEPTION
14:35:12 333  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
14:35:12 334  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 335  	  SPROC_NAME, 'No such transaction attempt');
14:35:12 336  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
14:35:12 337  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 338  	  SPROC_NAME, 'Bad transaction attempt status');
14:35:12 339  WHEN OTHERS THEN
14:35:12 340  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 341  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 342  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
14:35:12 343  
14:35:12 344  /******************************************************************************/
14:35:12 345  
14:35:12 346  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
14:35:12 347  /*
14:35:12 348  Throws exceptions:
14:35:12 349  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 350  */
14:35:12 351  	in_transaction_id	      IN NUMBER,
14:35:12 352  	in_transaction_attempt_status IN NUMBER,
14:35:12 353  	out_result_set		      OUT SYS_REFCURSOR
14:35:12 354  ) AS
14:35:12 355  -- VARIABLES
14:35:12 356  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
14:35:12 357  temp_transaction_id NUMBER;
14:35:12 358  -- EXCEPTIONS
14:35:12 359  BAD_TRANSACTION_ID       EXCEPTION;
14:35:12 360  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
14:35:12 361  BEGIN
14:35:12 362  
14:35:12 363  	-- Check that transaction exists
14:35:12 364  	BEGIN
14:35:12 365  	  SELECT
14:35:12 366  	    TRANSACTION.ID into temp_transaction_id
14:35:12 367  	  FROM
14:35:12 368  	    TRANSACTION
14:35:12 369  	  WHERE
14:35:12 370  	    TRANSACTION.ID = in_transaction_id;
14:35:12 371  	  EXCEPTION
14:35:12 372  	    WHEN OTHERS THEN
14:35:12 373  	      RAISE BAD_TRANSACTION_ID;
14:35:12 374  	END;
14:35:12 375  
14:35:12 376  	-- Check that transaction attempt status is correct
14:35:12 377  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_IN_PROGRESS
14:35:12 378  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
14:35:12 379  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED THEN
14:35:12 380  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
14:35:12 381  	END IF;
14:35:12 382  
14:35:12 383  	OPEN out_result_set FOR
14:35:12 384  	SELECT
14:35:12 385  	  TRANSACTION_ATTEMPT.ID,
14:35:12 386  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
14:35:12 387  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
14:35:12 388  	  TRANSACTION_ATTEMPT.CREATE_DATE,
14:35:12 389  	  TRANSACTION_ATTEMPT.CREATED_BY,
14:35:12 390  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
14:35:12 391  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
14:35:12 392  	  TRANSACTION.TRANSACTION_AMOUNT,
14:35:12 393  	  TRANSACTION.ID as "TRANSACTION_ID",
14:35:12 394  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
14:35:12 395  	FROM
14:35:12 396  	  TRANSACTION_ATTEMPT
14:35:12 397  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
14:35:12 398  	WHERE
14:35:12 399  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
14:35:12 400  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
14:35:12 401  
14:35:12 402  EXCEPTION
14:35:12 403  WHEN BAD_TRANSACTION_ID THEN
14:35:12 404  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 405  	  SPROC_NAME, 'No such transaction');
14:35:12 406  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
14:35:12 407  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 408  	  SPROC_NAME, 'Bad transaction attempt status');
14:35:12 409  WHEN OTHERS THEN
14:35:12 410  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 412  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
14:35:12 413  
14:35:12 414  /******************************************************************************/
14:35:12 415  
14:35:12 416  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
14:35:12 417  /*
14:35:12 418  Throws exceptions:
14:35:12 419  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 420  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 421  */
14:35:12 422  	in_transaction_attempt_id IN NUMBER,
14:35:12 423  	in_ext_status_code	  IN VARCHAR2,
14:35:12 424  	in_ext_status_message	  IN VARCHAR2,
14:35:12 425  	in_ext_transaction_id	  IN VARCHAR2
14:35:12 426  ) AS
14:35:12 427  -- VARIABLES
14:35:12 428  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
14:35:12 429  temp_trans_attempt_count NUMBER;
14:35:12 430  -- EXCEPTIONS
14:35:12 431  BAD_ATTEMPT_ID EXCEPTION;
14:35:12 432  BEGIN
14:35:12 433  
14:35:12 434  	SELECT
14:35:12 435  	  COUNT(*) into temp_trans_attempt_count
14:35:12 436  	FROM
14:35:12 437  	  TRANSACTION_ATTEMPT
14:35:12 438  	WHERE
14:35:12 439  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
14:35:12 440  
14:35:12 441  	IF temp_trans_attempt_count = 0 THEN
14:35:12 442  	  RAISE BAD_ATTEMPT_ID;
14:35:12 443  	END IF;
14:35:12 444  
14:35:12 445  	PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ATTEMPT(
14:35:12 446  	  in_transaction_attempt_id  => in_transaction_attempt_id,
14:35:12 447  	  in_external_status_code    => in_ext_status_code,
14:35:12 448  	  in_external_status_message => in_ext_status_message,
14:35:12 449  	  in_external_transaction_id => in_ext_transaction_id
14:35:12 450  	);
14:35:12 451  
14:35:12 452  EXCEPTION
14:35:12 453  WHEN BAD_ATTEMPT_ID THEN
14:35:12 454  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 455  	  SPROC_NAME, 'No such attempt');
14:35:12 456  WHEN OTHERS THEN
14:35:12 457  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 458  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 459  END UPDATE_TRANSACTION_ATTEMPT_INF;
14:35:12 460  
14:35:12 461  /******************************************************************************/
14:35:12 462  
14:35:12 463  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
14:35:12 464  /*
14:35:12 465  Throws exceptions:
14:35:12 466  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 467  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 468  */
14:35:12 469  	in_transaction_id IN  NUMBER,
14:35:12 470  	out_attempts_num  OUT NUMBER
14:35:12 471  ) AS
14:35:12 472  -- VARIABLES
14:35:12 473  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
14:35:12 474  temp_transaction_count NUMBER;
14:35:12 475  
14:35:12 476  -- EXCEPTIONS
14:35:12 477  BAD_TRANSACTION_ID EXCEPTION;
14:35:12 478  BEGIN
14:35:12 479  
14:35:12 480  	SELECT
14:35:12 481  	  COUNT(*) into temp_transaction_count
14:35:12 482  	FROM
14:35:12 483  	  TRANSACTION
14:35:12 484  	WHERE
14:35:12 485  	  TRANSACTION.ID = in_transaction_id;
14:35:12 486  
14:35:12 487  	IF temp_transaction_count = 0 THEN
14:35:12 488  	  RAISE BAD_TRANSACTION_ID;
14:35:12 489  	END IF;
14:35:12 490  
14:35:12 491  	SELECT
14:35:12 492  	  COUNT(*) into out_attempts_num
14:35:12 493  	FROM
14:35:12 494  	  TRANSACTION_ATTEMPT
14:35:12 495  	WHERE
14:35:12 496  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
14:35:12 497  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_FAILED;
14:35:12 498  
14:35:12 499  EXCEPTION
14:35:12 500  WHEN BAD_TRANSACTION_ID THEN
14:35:12 501  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 502  	  SPROC_NAME, 'No such transaction');
14:35:12 503  WHEN OTHERS THEN
14:35:12 504  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 505  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 506  END GET_FAILED_ATTEMPTS_NUMBER;
14:35:12 507  /******************************************************************************/
14:35:12 508  
14:35:12 509  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
14:35:12 510  /*
14:35:12 511  Throws exceptions:
14:35:12 512  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 513  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 514  */
14:35:12 515  	in_transaction_id IN  NUMBER,
14:35:12 516  	out_is_successfull  OUT NUMBER
14:35:12 517  ) AS
14:35:12 518  -- VARIABLES
14:35:12 519  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
14:35:12 520  temp_transaction_count NUMBER;
14:35:12 521  
14:35:12 522  -- EXCEPTIONS
14:35:12 523  BAD_TRANSACTION_ID EXCEPTION;
14:35:12 524  BEGIN
14:35:12 525  
14:35:12 526  	SELECT
14:35:12 527  	  COUNT(*) into temp_transaction_count
14:35:12 528  	FROM
14:35:12 529  	  TRANSACTION
14:35:12 530  	WHERE
14:35:12 531  	  TRANSACTION.ID = in_transaction_id;
14:35:12 532  
14:35:12 533  	IF temp_transaction_count = 0 THEN
14:35:12 534  	  RAISE BAD_TRANSACTION_ID;
14:35:12 535  	END IF;
14:35:12 536  
14:35:12 537  	SELECT
14:35:12 538  	  COUNT(*) into out_is_successfull
14:35:12 539  	FROM
14:35:12 540  	  TRANSACTION_ATTEMPT
14:35:12 541  	WHERE
14:35:12 542  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
14:35:12 543  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS;
14:35:12 544  
14:35:12 545  EXCEPTION
14:35:12 546  WHEN BAD_TRANSACTION_ID THEN
14:35:12 547  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 548  	  SPROC_NAME, 'No such transaction');
14:35:12 549  WHEN OTHERS THEN
14:35:12 550  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 551  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 552  END IS_TRANSACTION_SUCCESSFULL;
14:35:12 553  /******************************************************************************/
14:35:12 554  
14:35:12 555  PROCEDURE GET_TRANSACTION_AMOUNT (
14:35:12 556  /*
14:35:12 557  Throws exceptions:
14:35:12 558  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 559  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 560  */
14:35:12 561  	in_transaction_id      IN  NUMBER,
14:35:12 562  	out_transaction_amount OUT NUMBER
14:35:12 563  ) AS
14:35:12 564  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
14:35:12 565  BEGIN
14:35:12 566  
14:35:12 567  	SELECT
14:35:12 568  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
14:35:12 569  	FROM
14:35:12 570  	  TRANSACTION
14:35:12 571  	WHERE
14:35:12 572  	  TRANSACTION.ID = in_transaction_id;
14:35:12 573  
14:35:12 574  EXCEPTION
14:35:12 575  WHEN NO_DATA_FOUND THEN
14:35:12 576  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 577  	  SPROC_NAME, 'No such transaction');
14:35:12 578  WHEN OTHERS THEN
14:35:12 579  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 580  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 581  END GET_TRANSACTION_AMOUNT;
14:35:12 582  
14:35:12 583  /******************************************************************************/
14:35:12 584  
14:35:12 585  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
14:35:12 586  /*
14:35:12 587  Throws exceptions:
14:35:12 588  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 589  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 590  */
14:35:12 591  	in_charge_id   IN  NUMBER,
14:35:12 592  	out_result_set OUT SYS_REFCURSOR
14:35:12 593  ) AS
14:35:12 594  -- VARIABLES
14:35:12 595  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
14:35:12 596  temp_charge_id NUMBER;
14:35:12 597  -- EXCEPTIONS
14:35:12 598  BAD_CHARGE_ID EXCEPTION;
14:35:12 599  BEGIN
14:35:12 600  
14:35:12 601  	BEGIN
14:35:12 602  	  SELECT
14:35:12 603  	    CHARGE.ID into temp_charge_id
14:35:12 604  	  FROM
14:35:12 605  	    CHARGE
14:35:12 606  	  WHERE
14:35:12 607  	    CHARGE.ID = in_charge_id;
14:35:12 608  	  EXCEPTION
14:35:12 609  	    WHEN NO_DATA_FOUND THEN
14:35:12 610  	      RAISE BAD_CHARGE_ID;
14:35:12 611  	END;
14:35:12 612  
14:35:12 613  	OPEN out_result_set FOR
14:35:12 614  	SELECT DISTINCT
14:35:12 615  	  TRANSACTION.ID,
14:35:12 616  	  TRANSACTION.TRANSACTION_STATUS_ID,
14:35:12 617  	  TRANSACTION.CREATE_DATE,
14:35:12 618  	  TRANSACTION.TRANSACTION_AMOUNT,
14:35:12 619  	  TRANSACTION.IS_REFUND,
14:35:12 620  	  TRANSACTION.ORDER_ID
14:35:12 621  	FROM
14:35:12 622  	  CHARGE INNER JOIN TRANSACTION ON
14:35:12 623  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:35:12 624  	WHERE
14:35:12 625  	  CHARGE.ID = in_charge_id;
14:35:12 626  
14:35:12 627  EXCEPTION
14:35:12 628  WHEN BAD_CHARGE_ID THEN
14:35:12 629  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 630  	  SPROC_NAME, 'No such charge');
14:35:12 631  WHEN OTHERS THEN
14:35:12 632  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 633  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 634  END GET_TRANSACTIONS_BY_CHARGE_ID;
14:35:12 635  /******************************************************************************/
14:35:12 636  
14:35:12 637  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
14:35:12 638  /*
14:35:12 639  Throws exceptions:
14:35:12 640  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 641  */
14:35:12 642  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
14:35:12 643  	out_result_set OUT SYS_REFCURSOR
14:35:12 644  ) AS
14:35:12 645  -- VARIABLES
14:35:12 646  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
14:35:12 647  BEGIN
14:35:12 648  	OPEN out_result_set FOR
14:35:12 649  	SELECT DISTINCT
14:35:12 650  	  TRANSACTION.ID
14:35:12 651  	FROM
14:35:12 652  	  TRANSACTION
14:35:12 653  	WHERE
14:35:12 654  	  TRANSACTION.ORDER_ID = in_order_id;
14:35:12 655  
14:35:12 656  EXCEPTION
14:35:12 657  WHEN OTHERS THEN
14:35:12 658  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 659  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 660  END GET_TRANSACTION_BY_ORDER_ID;
14:35:12 661  /******************************************************************************/
14:35:12 662  
14:35:12 663  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
14:35:12 664  /*
14:35:12 665  Throws exceptions:
14:35:12 666  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 667  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 668  */
14:35:12 669  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
14:35:12 670  	out_result_set OUT SYS_REFCURSOR
14:35:12 671  ) AS
14:35:12 672  -- VARIABLES
14:35:12 673  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
14:35:12 674  temp_order_id TRANSACTION.ORDER_ID%TYPE;
14:35:12 675  -- EXCEPTIONS
14:35:12 676  BAD_ORDER_ID EXCEPTION;
14:35:12 677  BEGIN
14:35:12 678  
14:35:12 679  	--TODO BOO, REMOVE ME
14:35:12 680  	BEGIN
14:35:12 681  	  SELECT
14:35:12 682  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
14:35:12 683  	  FROM
14:35:12 684  	    TRANSACTION
14:35:12 685  	  WHERE
14:35:12 686  	    TRANSACTION.ORDER_ID = in_order_id;
14:35:12 687  	  EXCEPTION
14:35:12 688  	    WHEN NO_DATA_FOUND THEN
14:35:12 689  	      RAISE BAD_ORDER_ID;
14:35:12 690  	END;
14:35:12 691  
14:35:12 692  	OPEN out_result_set FOR
14:35:12 693  	SELECT c.ID CHARGE_ID,
14:35:12 694  	  c.CHARGE_AMOUNT,
14:35:12 695  	  c.CHARGE_STATUS_ID,
14:35:12 696  	  c.INSTRUMENT_ID,
14:35:12 697  	  c.INSTRUMENT_TYPE_ID,
14:35:12 698  	  c.INVOICE_ID,
14:35:12 699  	  t.ID TRANSACTION_ID,
14:35:12 700  	  t.IS_REFUND,
14:35:12 701  	  t.IS_SETTLED,
14:35:12 702  	  t.ORDER_ID,
14:35:12 703  	  t.TRANSACTION_AMOUNT,
14:35:12 704  	  t.TRANSACTION_STATUS_ID,
14:35:12 705  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
14:35:12 706  	  t.CREATED_BY TRANSACTION_CREATED_BY,
14:35:12 707  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
14:35:12 708  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
14:35:12 709  	FROM CHARGE c
14:35:12 710  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
14:35:12 711  	WHERE TRANSACTION_ID IN (
14:35:12 712  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
14:35:12 713  	);
14:35:12 714  
14:35:12 715  EXCEPTION
14:35:12 716  WHEN BAD_ORDER_ID THEN
14:35:12 717  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 718  	  SPROC_NAME, 'No such order');
14:35:12 719  WHEN OTHERS THEN
14:35:12 720  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 721  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 722  END GET_TRANSACTIONS_BY_ORDER_ID;
14:35:12 723  /******************************************************************************/
14:35:12 724  
14:35:12 725  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
14:35:12 726  /*
14:35:12 727  Throws exceptions:
14:35:12 728  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 729  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 730  */
14:35:12 731  	in_invoice_id	IN  NUMBER,
14:35:12 732  	out_result_set OUT SYS_REFCURSOR
14:35:12 733  ) AS
14:35:12 734  -- VARIABLES
14:35:12 735  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
14:35:12 736  temp_invoice_id NUMBER;
14:35:12 737  -- EXCEPTIONS
14:35:12 738  BAD_INVOICE_ID EXCEPTION;
14:35:12 739  BEGIN
14:35:12 740  
14:35:12 741  	BEGIN
14:35:12 742  	  SELECT
14:35:12 743  	    INVOICE.ID into temp_invoice_id
14:35:12 744  	  FROM
14:35:12 745  	    INVOICE
14:35:12 746  	  WHERE
14:35:12 747  	    INVOICE.ID = in_invoice_id;
14:35:12 748  	  EXCEPTION
14:35:12 749  	    WHEN NO_DATA_FOUND THEN
14:35:12 750  	      RAISE BAD_INVOICE_ID;
14:35:12 751  	END;
14:35:12 752  
14:35:12 753  	OPEN out_result_set FOR
14:35:12 754  	SELECT DISTINCT
14:35:12 755  	  TRANSACTION.ID,
14:35:12 756  	  TRANSACTION.TRANSACTION_STATUS_ID,
14:35:12 757  	  TRANSACTION.CREATE_DATE,
14:35:12 758  	  TRANSACTION.UPDATE_DATE,
14:35:12 759  	  TRANSACTION.ORDER_ID,
14:35:12 760  	  TRANSACTION.TRANSACTION_AMOUNT
14:35:12 761  	FROM
14:35:12 762  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
14:35:12 763  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
14:35:12 764  	WHERE
14:35:12 765  	  INVOICE.ID = in_invoice_id
14:35:12 766  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V16.TRUE
14:35:12 767  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
14:35:12 768  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_CLOSED;
14:35:12 769  
14:35:12 770  EXCEPTION
14:35:12 771  WHEN BAD_INVOICE_ID THEN
14:35:12 772  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 773  	  SPROC_NAME, 'No such invoice');
14:35:12 774  WHEN OTHERS THEN
14:35:12 775  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 776  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 777  END GET_CLOSED_REFUNDS_BY_INVOICE;
14:35:12 778  
14:35:12 779  /******************************************************************************/
14:35:12 780  
14:35:12 781  PROCEDURE GET_TRANSACTION_ATTEMPTS (
14:35:12 782  /*
14:35:12 783  Throws exceptions:
14:35:12 784  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 785  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 786  */
14:35:12 787  	in_transaction_id IN  NUMBER,
14:35:12 788  	out_result_set	  OUT SYS_REFCURSOR
14:35:12 789  ) AS
14:35:12 790  -- VARIABLES
14:35:12 791  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
14:35:12 792  temp_transaction_id NUMBER;
14:35:12 793  -- EXCEPTIONS
14:35:12 794  BAD_TRANSACTION_ID EXCEPTION;
14:35:12 795  BEGIN
14:35:12 796  
14:35:12 797  	BEGIN
14:35:12 798  	  SELECT
14:35:12 799  	    TRANSACTION.ID into temp_transaction_id
14:35:12 800  	  FROM
14:35:12 801  	    TRANSACTION
14:35:12 802  	  WHERE
14:35:12 803  	    TRANSACTION.ID = in_transaction_id;
14:35:12 804  	  EXCEPTION
14:35:12 805  	    WHEN NO_DATA_FOUND THEN
14:35:12 806  	      RAISE BAD_TRANSACTION_ID;
14:35:12 807  	END;
14:35:12 808  
14:35:12 809  	OPEN out_result_set FOR
14:35:12 810  	SELECT
14:35:12 811  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
14:35:12 812  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
14:35:12 813  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
14:35:12 814  	  TRANSACTION_ATTEMPT.CREATE_DATE,
14:35:12 815  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
14:35:12 816  	FROM
14:35:12 817  	  TRANSACTION_ATTEMPT
14:35:12 818  	WHERE
14:35:12 819  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
14:35:12 820  
14:35:12 821  EXCEPTION
14:35:12 822  WHEN BAD_TRANSACTION_ID THEN
14:35:12 823  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 824  	  SPROC_NAME, 'No such transaction');
14:35:12 825  WHEN OTHERS THEN
14:35:12 826  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 827  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 828  END GET_TRANSACTION_ATTEMPTS;
14:35:12 829  
14:35:12 830  /******************************************************************************/
14:35:12 831  
14:35:12 832  PROCEDURE RESERVE_TRANSACTION_ID (
14:35:12 833  /*
14:35:12 834  Throws exceptions:
14:35:12 835  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 836  */
14:35:12 837  	out_transaction_id OUT NUMBER
14:35:12 838  ) AS
14:35:12 839  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
14:35:12 840  BEGIN
14:35:12 841  	SELECT
14:35:12 842  	  TRN_ID_SEQ.nextVal into out_transaction_id
14:35:12 843  	FROM DUAL;
14:35:12 844  EXCEPTION
14:35:12 845  WHEN OTHERS THEN
14:35:12 846  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 847  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 848  END RESERVE_TRANSACTION_ID;
14:35:12 849  
14:35:12 850  /******************************************************************************/
14:35:12 851  
14:35:12 852  PROCEDURE GET_TRANSACTION_BY_ID (
14:35:12 853  /*
14:35:12 854  Throws exceptions:
14:35:12 855  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 856  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 857  */
14:35:12 858  	in_transaction_id IN NUMBER,
14:35:12 859  	out_result_set	  OUT SYS_REFCURSOR
14:35:12 860  ) AS
14:35:12 861  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
14:35:12 862  -- VARIABLES
14:35:12 863  temp_transaction_id NUMBER;
14:35:12 864  -- EXCPTIONS
14:35:12 865  BAD_TRANSACTION_ID EXCEPTION;
14:35:12 866  BEGIN
14:35:12 867  	BEGIN
14:35:12 868  	  SELECT
14:35:12 869  	    TRANSACTION.ID into temp_transaction_id
14:35:12 870  	  FROM
14:35:12 871  	    TRANSACTION
14:35:12 872  	  WHERE
14:35:12 873  	    TRANSACTION.ID = in_transaction_id;
14:35:12 874  	  EXCEPTION
14:35:12 875  	    WHEN NO_DATA_FOUND THEN
14:35:12 876  	      RAISE BAD_TRANSACTION_ID;
14:35:12 877  	END;
14:35:12 878  
14:35:12 879  	PROCS_TRANSACTION_CRU_V16.READ_TRANSACTION(
14:35:12 880  	  in_transaction_id => in_transaction_id,
14:35:12 881  	  out_result_set    => out_result_set
14:35:12 882  	);
14:35:12 883  
14:35:12 884  EXCEPTION
14:35:12 885  WHEN NO_DATA_FOUND THEN
14:35:12 886  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 887  	  SPROC_NAME, 'No such transaction');
14:35:12 888  WHEN OTHERS THEN
14:35:12 889  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 890  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 891  END GET_TRANSACTION_BY_ID;
14:35:12 892  
14:35:12 893  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:35:12 894  /*
14:35:12 895  Throws exceptions:
14:35:12 896  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 897  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
14:35:12 898  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 899  */
14:35:12 900  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:35:12 901  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:35:12 902  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:35:12 903  ) AS
14:35:12 904  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
14:35:12 905  -- VARIABLES
14:35:12 906  temp_transaction_id TRANSACTION.ID%TYPE;
14:35:12 907  -- EXCEPTIONS
14:35:12 908  BAD_TRANSACTION_ID   EXCEPTION;
14:35:12 909  ORDER_ID_IS_NOT_NULL EXCEPTION;
14:35:12 910  CRU_UNKNOWN_ERROR    EXCEPTION;
14:35:12 911  EXCEPTION_MESSAGE VARCHAR2(1024);
14:35:12 912  BEGIN
14:35:12 913  	BEGIN
14:35:12 914  	  SELECT
14:35:12 915  	    TRANSACTION.ID into temp_transaction_id
14:35:12 916  	  FROM
14:35:12 917  	    TRANSACTION
14:35:12 918  	  WHERE
14:35:12 919  	    TRANSACTION.ID = in_transaction_id;
14:35:12 920  	  EXCEPTION
14:35:12 921  	    WHEN NO_DATA_FOUND THEN
14:35:12 922  	      RAISE BAD_TRANSACTION_ID;
14:35:12 923  	END;
14:35:12 924  
14:35:12 925  	BEGIN
14:35:12 926  	  PROCS_TRANSACTION_CRU_V16.UPDATE_TRANSACTION_ORDER_ID(
14:35:12 927  	    in_transaction_id => in_transaction_id,
14:35:12 928  	    in_order_id       => in_order_id,
14:35:12 929  	    in_updated_by     => in_updated_by
14:35:12 930  	  );
14:35:12 931  	  EXCEPTION
14:35:12 932  	    WHEN OTHERS THEN
14:35:12 933  	      IF SQLCODE = APP_EXCEPTION_CODES_V16.NOT_FOUND THEN
14:35:12 934  		RAISE ORDER_ID_IS_NOT_NULL;
14:35:12 935  	      ELSE
14:35:12 936  		EXCEPTION_MESSAGE := SQLERRM;
14:35:12 937  		RAISE CRU_UNKNOWN_ERROR;
14:35:12 938  	      END IF;
14:35:12 939  	END;
14:35:12 940  
14:35:12 941  EXCEPTION
14:35:12 942  WHEN BAD_TRANSACTION_ID THEN
14:35:12 943  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 944  	  SPROC_NAME, 'No such transaction');
14:35:12 945  WHEN ORDER_ID_IS_NOT_NULL THEN
14:35:12 946  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 947  	  SPROC_NAME, 'Order id is not null');
14:35:12 948  WHEN CRU_UNKNOWN_ERROR THEN
14:35:12 949  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 950  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
14:35:12 951  WHEN OTHERS THEN
14:35:12 952  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 953  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 954  END UPDATE_TRANSACTION_ORDER_ID;
14:35:12 955  
14:35:12 956  /******************************************************************************/
14:35:12 957  
14:35:12 958  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
14:35:12 959  	in_transaction_id IN NUMBER
14:35:12 960  ) RETURN NUMBER AS
14:35:12 961  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
14:35:12 962  -- Variables
14:35:12 963  var_tax_amount NUMBER(10,2);
14:35:12 964  BEGIN
14:35:12 965  
14:35:12 966  	SELECT
14:35:12 967  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
14:35:12 968  	FROM
14:35:12 969  	  LINE_ITEM LI
14:35:12 970  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
14:35:12 971  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
14:35:12 972  	WHERE
14:35:12 973  	  CH.TRANSACTION_ID = in_transaction_id;
14:35:12 974  
14:35:12 975  	IF var_tax_amount IS NULL THEN
14:35:12 976  	  var_tax_amount := 0;
14:35:12 977  	END IF;
14:35:12 978  
14:35:12 979  	RETURN var_tax_amount;
14:35:12 980  
14:35:12 981  END GET_TRANSACTION_TAX_AMOUNT;
14:35:12 982  
14:35:12 983  /******************************************************************************/
14:35:12 984  
14:35:12 985  FUNCTION GET_TRANSACTION_INTRL_TAXES (
14:35:12 986  	in_transaction_id IN NUMBER
14:35:12 987  ) RETURN NUMBER AS
14:35:12 988  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
14:35:12 989  -- Variables
14:35:12 990  var_intrl_tax_amount NUMBER(10, 2);
14:35:12 991  BEGIN
14:35:12 992  
14:35:12 993  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
14:35:12 994  	FROM
14:35:12 995  	  LINE_ITEM LI
14:35:12 996  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
14:35:12 997  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
14:35:12 998  	  INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
14:35:12 999  	WHERE
14:35:12 1000  	   CH.TRANSACTION_ID = in_transaction_id
14:35:12 1001  	   AND T.TAX_TYPE_ID IN (
14:35:12 1002  	     SELECT GLOBAL_ENUMS_V16.TAX_TYPE_VAT FROM DUAL
14:35:12 1003  	   );
14:35:12 1004  
14:35:12 1005  	 IF var_intrl_tax_amount IS NULL THEN
14:35:12 1006  	   var_intrl_tax_amount := 0;
14:35:12 1007  	 END IF;
14:35:12 1008  
14:35:12 1009  	 RETURN var_intrl_tax_amount;
14:35:12 1010  
14:35:12 1011  END GET_TRANSACTION_INTRL_TAXES;
14:35:12 1012  
14:35:12 1013  /******************************************************************************/
14:35:12 1014  -- norlov: #38796
14:35:12 1015  PROCEDURE GET_TRANSACTIONS (
14:35:12 1016  /*
14:35:12 1017  Throws exceptions:
14:35:12 1018  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1019  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1020  */
14:35:12 1021  	 in_group_id	       IN  NUMBER,
14:35:12 1022  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
14:35:12 1023  	 in_subscription_id    IN NUMBER DEFAULT NULL,
14:35:12 1024  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
14:35:12 1025  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
14:35:12 1026  	 in_transaction_status IN NUMBER DEFAULT NULL,
14:35:12 1027  	 out_result_set        OUT SYS_REFCURSOR
14:35:12 1028  ) AS
14:35:12 1029  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
14:35:12 1030  -- VARIABLES
14:35:12 1031  var_account_id ACCOUNT.ID%TYPE;
14:35:12 1032  statement VARCHAR2(2000);
14:35:12 1033  -- EXCEPTIONS
14:35:12 1034  BAD_GROUP_ID   EXCEPTION;
14:35:12 1035  BEGIN
14:35:12 1036  	-- check group id
14:35:12 1037  	BEGIN
14:35:12 1038  	   SELECT
14:35:12 1039  	     ACCOUNT.ID into var_account_id
14:35:12 1040  	   FROM
14:35:12 1041  	     ACCOUNT
14:35:12 1042  	   WHERE
14:35:12 1043  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1044  	   EXCEPTION
14:35:12 1045  	     WHEN NO_DATA_FOUND THEN
14:35:12 1046  	       RAISE BAD_GROUP_ID;
14:35:12 1047  	 END;
14:35:12 1048  
14:35:12 1049  	 OPEN out_result_set FOR
14:35:12 1050  	 SELECT
14:35:12 1051  	   TRANSACTION.ID,
14:35:12 1052  	   TRANSACTION.TRANSACTION_STATUS_ID,
14:35:12 1053  	   TRANSACTION.TRANSACTION_AMOUNT,
14:35:12 1054  	   TRANSACTION.CREATE_DATE,
14:35:12 1055  	   TRANSACTION.CREATED_BY,
14:35:12 1056  	   TRANSACTION.IS_REFUND,
14:35:12 1057  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
14:35:12 1058  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
14:35:12 1059  	 FROM
14:35:12 1060  	   TRANSACTION
14:35:12 1061  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
14:35:12 1062  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
14:35:12 1063  	 WHERE
14:35:12 1064  	   -- Filter by invoice ID
14:35:12 1065  	   (
14:35:12 1066  	     INVOICE.ID IN (
14:35:12 1067  	       -- Gift certificate invoices
14:35:12 1068  	       SELECT
14:35:12 1069  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
14:35:12 1070  	       FROM
14:35:12 1071  		 GIFT_CERTIFICATE
14:35:12 1072  	       WHERE
14:35:12 1073  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
14:35:12 1074  		 -- If subscription_id is set then return nothing
14:35:12 1075  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
14:35:12 1076  	     )
14:35:12 1077  	     OR
14:35:12 1078  	     INVOICE.ID IN (
14:35:12 1079  	       SELECT
14:35:12 1080  		 LICENSE.INVOICE_ID
14:35:12 1081  	       FROM
14:35:12 1082  		 LICENSE
14:35:12 1083  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 1084  	       WHERE
14:35:12 1085  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 1086  		 -- Filter by subscription id
14:35:12 1087  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
14:35:12 1088  	     )
14:35:12 1089  	   )
14:35:12 1090  	   -- Filter by invoice id
14:35:12 1091  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
14:35:12 1092  	   -- Filter by start date
14:35:12 1093  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
14:35:12 1094  	   -- Filter by end date
14:35:12 1095  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
14:35:12 1096  	   -- Filter by transaction status
14:35:12 1097  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
14:35:12 1098  
14:35:12 1099  /*
14:35:12 1100  
14:35:12 1101  statement :=  'select distinct '||CHR(10)
14:35:12 1102  || ' TRANSACTION.ID,'||CHR(10)
14:35:12 1103  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
14:35:12 1104  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
14:35:12 1105  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
14:35:12 1106  || ' TRANSACTION.CREATED_BY, '||CHR(10)
14:35:12 1107  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
14:35:12 1108  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
14:35:12 1109  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
14:35:12 1110  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
14:35:12 1111  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
14:35:12 1112  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
14:35:12 1113  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
14:35:12 1114  
14:35:12 1115  IF (in_transaction_status IS NOT NULL) THEN
14:35:12 1116  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
14:35:12 1117  END IF;
14:35:12 1118  
14:35:12 1119  IF (in_invoice_id IS NOT NULL) THEN
14:35:12 1120  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
14:35:12 1121  END IF;
14:35:12 1122  
14:35:12 1123  IF (in_subscription_id IS NOT NULL) THEN
14:35:12 1124  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
14:35:12 1125  END IF;
14:35:12 1126  
14:35:12 1127  IF (in_start_date IS NOT NULL) THEN
14:35:12 1128  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
14:35:12 1129  END IF;
14:35:12 1130  
14:35:12 1131  IF (in_end_date IS NOT NULL) THEN
14:35:12 1132  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
14:35:12 1133  END IF;
14:35:12 1134  dbms_output.put_line(statement);
14:35:12 1135  OPEN out_result_set FOR statement;
14:35:12 1136  
14:35:12 1137  */
14:35:12 1138  
14:35:12 1139  EXCEPTION
14:35:12 1140  WHEN BAD_GROUP_ID THEN
14:35:12 1141  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1142  	   SPROC_NAME, 'No such group');
14:35:12 1143  WHEN OTHERS THEN
14:35:12 1144  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1145  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1146  END GET_TRANSACTIONS;
14:35:12 1147  
14:35:12 1148  FUNCTION IS_TRANSACTION_COLLECTED (
14:35:12 1149  /*
14:35:12 1150  Throws:
14:35:12 1151  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1152  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1153  Returns:
14:35:12 1154  GLOBAL_CONST.TRUE if transaction collected,
14:35:12 1155  GLOBAL_CONST.FALSE else
14:35:12 1156  */
14:35:12 1157  	 in_transaction_id IN NUMBER
14:35:12 1158  ) RETURN NUMBER AS
14:35:12 1159  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
14:35:12 1160  -- VARIABLES
14:35:12 1161  temp_transaction_id     NUMBER;
14:35:12 1162  var_success_attemps_num NUMBER;
14:35:12 1163  -- EXCEPTIONS
14:35:12 1164  BAD_TRANSACTION_ID EXCEPTION;
14:35:12 1165  BEGIN
14:35:12 1166  
14:35:12 1167  	 BEGIN
14:35:12 1168  	   SELECT
14:35:12 1169  	     TRANSACTION.ID into temp_transaction_id
14:35:12 1170  	   FROM
14:35:12 1171  	     TRANSACTION
14:35:12 1172  	   WHERE
14:35:12 1173  	     TRANSACTION.ID = in_transaction_id;
14:35:12 1174  	   EXCEPTION
14:35:12 1175  	     WHEN NO_DATA_FOUND THEN
14:35:12 1176  	       RAISE BAD_TRANSACTION_ID;
14:35:12 1177  	 END;
14:35:12 1178  
14:35:12 1179  	 SELECT
14:35:12 1180  	   COUNT(*) into var_success_attemps_num
14:35:12 1181  	 FROM
14:35:12 1182  	   TRANSACTION_ATTEMPT
14:35:12 1183  	 WHERE
14:35:12 1184  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
14:35:12 1185  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS FROM DUAL );
14:35:12 1186  
14:35:12 1187  	 IF var_success_attemps_num > 0 THEN
14:35:12 1188  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 1189  	 ELSE
14:35:12 1190  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 1191  	 END IF;
14:35:12 1192  
14:35:12 1193  EXCEPTION
14:35:12 1194  WHEN BAD_TRANSACTION_ID THEN
14:35:12 1195  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1196  	   SPROC_NAME, 'No such transaction');
14:35:12 1197  WHEN OTHERS THEN
14:35:12 1198  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1199  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1200  END IS_TRANSACTION_COLLECTED;
14:35:12 1201  
14:35:12 1202  
14:35:12 1203  /******************************************************************************/
14:35:12 1204  PROCEDURE GET_ATTEMPT_NUMBER (
14:35:12 1205  /*
14:35:12 1206  Throws exceptions:
14:35:12 1207  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1208  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1209  */
14:35:12 1210  	 in_charge_id	in  number,
14:35:12 1211  	 out_attempt_count OUT NUMBER
14:35:12 1212  ) AS
14:35:12 1213  -- VARIABLES
14:35:12 1214  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ATTEMPT_NUMBER';
14:35:12 1215  temp_transaction_id NUMBER;
14:35:12 1216  -- EXCEPTIONS
14:35:12 1217  BAD_CHARGE_ID EXCEPTION;
14:35:12 1218  BEGIN
14:35:12 1219  
14:35:12 1220  	 BEGIN
14:35:12 1221  	   SELECT
14:35:12 1222  	     TRANSACTION_ID into temp_transaction_id
14:35:12 1223  	   FROM
14:35:12 1224  	     CHARGE
14:35:12 1225  	   WHERE
14:35:12 1226  	     CHARGE.ID = in_charge_id;
14:35:12 1227  	   EXCEPTION
14:35:12 1228  	     WHEN NO_DATA_FOUND THEN
14:35:12 1229  	       RAISE BAD_CHARGE_ID;
14:35:12 1230  	 END;
14:35:12 1231  
14:35:12 1232  	 select
14:35:12 1233  	   count(1)
14:35:12 1234  	 into
14:35:12 1235  	   out_attempt_count
14:35:12 1236  	 from
14:35:12 1237  	   transaction tr
14:35:12 1238  	 inner join
14:35:12 1239  	   transaction_attempt ta
14:35:12 1240  	 on (tr.id = ta.transaction_id)
14:35:12 1241  	 where
14:35:12 1242  	   tr.ID = temp_transaction_id;
14:35:12 1243  
14:35:12 1244  	 out_attempt_count := out_attempt_count + 1;
14:35:12 1245  
14:35:12 1246  EXCEPTION
14:35:12 1247  WHEN BAD_CHARGE_ID THEN
14:35:12 1248  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1249  	   SPROC_NAME, 'No such charge');
14:35:12 1250  WHEN OTHERS THEN
14:35:12 1251  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1252  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1253  end GET_ATTEMPT_NUMBER;
14:35:12 1254  /******************************************************************************/
14:35:12 1255  
14:35:12 1256  END PROCS_TRANSACTION_V16;
14:35:12 1257  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE CREATE_LICENSE(
14:35:12   4  /*
14:35:12   5  Throws exceptions:
14:35:12   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12   8  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12   9  */
14:35:12  10  	in_status_id		    IN NUMBER,
14:35:12  11  	in_needs_entitlements	    IN NUMBER,
14:35:12  12  	in_start_date		    IN DATE,
14:35:12  13  	in_end_date		    IN DATE,
14:35:12  14  	in_offer_id		    IN NUMBER,
14:35:12  15  	in_subscription_id	    IN NUMBER,
14:35:12  16  	in_invoice_id		    IN NUMBER,
14:35:12  17  	in_created_by		    IN VARCHAR2,
14:35:12  18  	in_is_extension 	    IN NUMBER,
14:35:12  19  	in_current_offer_index	    IN NUMBER,
14:35:12  20  	in_current_offer_recurr_num IN NUMBER,
14:35:12  21  	out_license_id		    OUT NUMBER
14:35:12  22  ) AS
14:35:12  23  -- VARIABLES
14:35:12  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
14:35:12  25  temp_offer_id	   NUMBER;
14:35:12  26  temp_subscription_id NUMBER;
14:35:12  27  temp_invoice_id	   NUMBER;
14:35:12  28  
14:35:12  29  var_new_license_id NUMBER;
14:35:12  30  var_offer_duration VARCHAR2(30);
14:35:12  31  
14:35:12  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
14:35:12  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
14:35:12  34  var_offer_years	    NUMBER;
14:35:12  35  var_offer_months	    NUMBER;
14:35:12  36  var_offer_days	    NUMBER;
14:35:12  37  
14:35:12  38  -- EXCEPTIONS
14:35:12  39  BAD_OFFER_ID	     EXCEPTION;
14:35:12  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
14:35:12  41  BAD_INVOICE_ID	     EXCEPTION;
14:35:12  42  BAD_OFFER_DURATION     EXCEPTION;
14:35:12  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12  44  BEGIN
14:35:12  45  
14:35:12  46  	-- TODO:
14:35:12  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
14:35:12  48  
14:35:12  49  	out_license_id := NULL;
14:35:12  50  
14:35:12  51  	-- get offer id and offer entitlement duration
14:35:12  52  	BEGIN
14:35:12  53  	  SELECT
14:35:12  54  	    OFFER.ID,
14:35:12  55  	    OFFER.ENTITLEMENT_DURATION
14:35:12  56  	    into
14:35:12  57  	    temp_offer_id,
14:35:12  58  	    var_offer_duration
14:35:12  59  	  FROM
14:35:12  60  	    OFFER
14:35:12  61  	  WHERE
14:35:12  62  	    OFFER.ID = in_offer_id;
14:35:12  63  	  EXCEPTION
14:35:12  64  	  WHEN NO_DATA_FOUND THEN
14:35:12  65  	    RAISE BAD_OFFER_ID;
14:35:12  66  	END;
14:35:12  67  
14:35:12  68  	-- Check that subscription exists
14:35:12  69  	BEGIN
14:35:12  70  	  SELECT
14:35:12  71  	    SUBSCRIPTION.ID into temp_subscription_id
14:35:12  72  	  FROM
14:35:12  73  	    SUBSCRIPTION
14:35:12  74  	  WHERE
14:35:12  75  	    SUBSCRIPTION.ID = in_subscription_id;
14:35:12  76  	  EXCEPTION
14:35:12  77  	  WHEN NO_DATA_FOUND THEN
14:35:12  78  	    RAISE BAD_SUBSCRIPTION_ID;
14:35:12  79  	END;
14:35:12  80  
14:35:12  81  	-- Check that invoice exists
14:35:12  82  	BEGIN
14:35:12  83  	  SELECT
14:35:12  84  	    INVOICE.ID into temp_invoice_id
14:35:12  85  	  FROM
14:35:12  86  	    INVOICE
14:35:12  87  	  WHERE
14:35:12  88  	    INVOICE.ID = in_invoice_id;
14:35:12  89  	  EXCEPTION
14:35:12  90  	  WHEN NO_DATA_FOUND THEN
14:35:12  91  	    RAISE BAD_INVOICE_ID;
14:35:12  92  	END;
14:35:12  93  
14:35:12  94  	-- convert offer duration into intervals
14:35:12  95  	BEGIN
14:35:12  96  	  PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
14:35:12  97  	    var_offer_duration,
14:35:12  98  	    var_offer_years,
14:35:12  99  	    var_offer_months,
14:35:12 100  	    var_offer_days);
14:35:12 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
14:35:12 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
14:35:12 103  	  EXCEPTION
14:35:12 104  	    WHEN OTHERS THEN
14:35:12 105  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 106  	      RAISE BAD_OFFER_DURATION;
14:35:12 107  	END;
14:35:12 108  
14:35:12 109  	-- insert new row into license table
14:35:12 110  	PROCS_LICENSE_CRU_V16.CREATE_LICENSE(
14:35:12 111  	  out_license_id	      => var_new_license_id,
14:35:12 112  	  in_license_status_id	      => in_status_id,
14:35:12 113  	  in_needs_entitlements       => in_needs_entitlements,
14:35:12 114  	  in_start_date 	      => in_start_date,
14:35:12 115  	  in_offer_id		      => in_offer_id,
14:35:12 116  	  in_subscription_id	      => in_subscription_id,
14:35:12 117  	  in_invoice_id 	      => in_invoice_id,
14:35:12 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
14:35:12 119  	  in_created_by 	      => in_created_by,
14:35:12 120  	  in_is_extension	      => in_is_extension,
14:35:12 121  	  in_current_offer_index      => in_current_offer_index,
14:35:12 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
14:35:12 123  	);
14:35:12 124  
14:35:12 125  	out_license_id := var_new_license_id;
14:35:12 126  
14:35:12 127  EXCEPTION
14:35:12 128  WHEN BAD_OFFER_DURATION THEN
14:35:12 129  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
14:35:12 131  WHEN BAD_OFFER_ID THEN
14:35:12 132  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 133  	  SPROC_NAME, 'No such offer');
14:35:12 134  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 135  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 136  	  SPROC_NAME, 'No such subscription');
14:35:12 137  WHEN BAD_INVOICE_ID THEN
14:35:12 138  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 139  	  SPROC_NAME, 'No such invoice');
14:35:12 140  WHEN OTHERS THEN
14:35:12 141  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 143  END;
14:35:12 144  
14:35:12 145  /******************************************************************************/
14:35:12 146  
14:35:12 147  PROCEDURE UPDATE_LICENSE_STATUS(
14:35:12 148  	  in_license_id     IN NUMBER,
14:35:12 149  	  in_license_status IN NUMBER,
14:35:12 150  	  in_updated_by     IN VARCHAR2,
14:35:12 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:12 152  ) AS
14:35:12 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
14:35:12 154  -- VARIABLES
14:35:12 155  temp_license_id NUMBER;
14:35:12 156  -- EXCEPTIONS
14:35:12 157  BAD_LICENSE_ID	     EXCEPTION;
14:35:12 158  BAD_LICENSE_STATUS     EXCEPTION;
14:35:12 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 160  BEGIN
14:35:12 161  
14:35:12 162  	BEGIN
14:35:12 163  	  SELECT
14:35:12 164  	    ID into temp_license_id
14:35:12 165  	  FROM
14:35:12 166  	    LICENSE
14:35:12 167  	  WHERE
14:35:12 168  	    LICENSE.ID = in_license_id;
14:35:12 169  	  EXCEPTION
14:35:12 170  	    WHEN NO_DATA_FOUND THEN
14:35:12 171  	      RAISE BAD_LICENSE_ID;
14:35:12 172  	END;
14:35:12 173  
14:35:12 174  	IF in_license_status != GLOBAL_STATUSES_V16.LICENSE_CLOSED
14:35:12 175  	   AND in_license_status != GLOBAL_STATUSES_V16.LICENSE_ACTIVE THEN
14:35:12 176  	  RAISE BAD_LICENSE_STATUS;
14:35:12 177  	END IF;
14:35:12 178  
14:35:12 179  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V16.TRUE) then
14:35:12 180  	  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 181  	    in_license_id	 => in_license_id,
14:35:12 182  	    in_updated_by	 => in_updated_by,
14:35:12 183  	    in_license_status_id => in_license_status,
14:35:12 184  	    in_entitlement_end_date	 => sysdate
14:35:12 185  	  );
14:35:12 186  	ELSE
14:35:12 187  	  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 188  	    in_license_id	 => in_license_id,
14:35:12 189  	    in_updated_by	 => in_updated_by,
14:35:12 190  	    in_license_status_id => in_license_status
14:35:12 191  	  );
14:35:12 192  	END IF;
14:35:12 193  
14:35:12 194  EXCEPTION
14:35:12 195  WHEN BAD_LICENSE_STATUS THEN
14:35:12 196  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 197  	  SPROC_NAME, 'Bad status id');
14:35:12 198  WHEN BAD_LICENSE_ID THEN
14:35:12 199  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 200  	  SPROC_NAME, 'No such license');
14:35:12 201  WHEN OTHERS THEN
14:35:12 202  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 204  END UPDATE_LICENSE_STATUS;
14:35:12 205  
14:35:12 206  /******************************************************************************/
14:35:12 207  
14:35:12 208  PROCEDURE GET_ENDING_LICENSES (
14:35:12 209  	in_hours_number IN NUMBER,
14:35:12 210  	out_result_set	OUT SYS_REFCURSOR
14:35:12 211  ) AS
14:35:12 212  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
14:35:12 213  -- VARIABLES
14:35:12 214  var_days		NUMBER;
14:35:12 215  var_hours 	NUMBER;
14:35:12 216  var_time_interval INTERVAL DAY (3) TO SECOND;
14:35:12 217  BEGIN
14:35:12 218  
14:35:12 219  	var_hours := mod(in_hours_number,24);
14:35:12 220  	var_days := (in_hours_number - var_hours) / 24;
14:35:12 221  	var_time_interval := var_days||' '||var_hours||':0:0';
14:35:12 222  
14:35:12 223  	OPEN out_result_set FOR
14:35:12 224  SELECT * FROM
14:35:12 225  (
14:35:12 226  	SELECT
14:35:12 227  	  LICENSE.ID,
14:35:12 228  	  LICENSE.CREATE_DATE,
14:35:12 229  	  LICENSE.CREATED_BY,
14:35:12 230  	  LICENSE.CURRENT_OFFER_INDEX,
14:35:12 231  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
14:35:12 232  	  LICENSE.END_DATE,
14:35:12 233  	  LICENSE.ENTITLEMENT_END_DATE,
14:35:12 234  	  LICENSE.INVOICE_ID,
14:35:12 235  	  LICENSE.IS_EXTENSION,
14:35:12 236  	  LICENSE.LICENSE_STATUS_ID,
14:35:12 237  	  LICENSE.OFFER_ID,
14:35:12 238  	  LICENSE.START_DATE,
14:35:12 239  	  LICENSE.SUBSCRIPTION_ID,
14:35:12 240  	  LICENSE.UPDATE_DATE,
14:35:12 241  	  LICENSE.UPDATED_BY
14:35:12 242  	FROM
14:35:12 243  	  LICENSE
14:35:12 244  	WHERE
14:35:12 245  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
14:35:12 246  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 247  	  AND NOT EXISTS
14:35:12 248  	  (
14:35:12 249  	    SELECT NULL
14:35:12 250  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:12 251  	    WHERE PROCESS_NAME = SPROC_NAME
14:35:12 252  	      AND GENERIC_ID = LICENSE.ID
14:35:12 253  	  )
14:35:12 254  	  AND ROWNUM <= 10000
14:35:12 255  	  ORDER BY dbms_random.value
14:35:12 256  ) WHERE
14:35:12 257  	  ROWNUM <= 1000
14:35:12 258  	  ;
14:35:12 259  EXCEPTION
14:35:12 260  WHEN OTHERS THEN
14:35:12 261  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 263  END GET_ENDING_LICENSES;
14:35:12 264  
14:35:12 265  
14:35:12 266  /******************************************************************************/
14:35:12 267  
14:35:12 268  PROCEDURE GET_ENDING_LICENSES_CC (
14:35:12 269  	in_hours_number IN NUMBER,
14:35:12 270  	out_result_set	OUT SYS_REFCURSOR,
14:35:12 271  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:12 272  ) AS
14:35:12 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
14:35:12 274  -- VARIABLES
14:35:12 275  var_days		NUMBER;
14:35:12 276  var_hours 	NUMBER;
14:35:12 277  var_time_interval INTERVAL DAY (3) TO SECOND;
14:35:12 278  BEGIN
14:35:12 279  
14:35:12 280  	var_hours := mod(in_hours_number,24);
14:35:12 281  	var_days := (in_hours_number - var_hours) / 24;
14:35:12 282  	var_time_interval := var_days||' '||var_hours||':0:0';
14:35:12 283  
14:35:12 284  	OPEN out_result_set FOR
14:35:12 285  SELECT * FROM
14:35:12 286  (
14:35:12 287  	SELECT
14:35:12 288  	  LICENSE.ID,
14:35:12 289  	  LICENSE.CREATE_DATE,
14:35:12 290  	  LICENSE.CREATED_BY,
14:35:12 291  	  LICENSE.CURRENT_OFFER_INDEX,
14:35:12 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
14:35:12 293  	  LICENSE.END_DATE,
14:35:12 294  	  LICENSE.ENTITLEMENT_END_DATE,
14:35:12 295  	  LICENSE.INVOICE_ID,
14:35:12 296  	  LICENSE.IS_EXTENSION,
14:35:12 297  	  LICENSE.LICENSE_STATUS_ID,
14:35:12 298  	  LICENSE.OFFER_ID,
14:35:12 299  	  LICENSE.START_DATE,
14:35:12 300  	  LICENSE.SUBSCRIPTION_ID,
14:35:12 301  	  LICENSE.UPDATE_DATE,
14:35:12 302  	  LICENSE.UPDATED_BY
14:35:12 303  	FROM
14:35:12 304  	  LICENSE
14:35:12 305  	WHERE
14:35:12 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
14:35:12 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 308  	  AND NOT EXISTS
14:35:12 309  	  (
14:35:12 310  	    SELECT NULL
14:35:12 311  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:12 312  	    WHERE PROCESS_NAME = in_process_name
14:35:12 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
14:35:12 314  	  )
14:35:12 315  	  AND ROWNUM <= 10000
14:35:12 316  	  ORDER BY dbms_random.value
14:35:12 317  ) WHERE
14:35:12 318  	  ROWNUM <= 1000
14:35:12 319  	  ;
14:35:12 320  EXCEPTION
14:35:12 321  WHEN OTHERS THEN
14:35:12 322  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 324  END GET_ENDING_LICENSES_CC;
14:35:12 325  
14:35:12 326  /******************************************************************************/
14:35:12 327  
14:35:12 328  PROCEDURE GET_RECURRING_OFFER (
14:35:12 329  	in_license_id  IN NUMBER,
14:35:12 330  	out_result_set OUT SYS_REFCURSOR
14:35:12 331  ) AS
14:35:12 332  -- VARIABLES
14:35:12 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
14:35:12 334  var_offer_chain_id	    NUMBER;
14:35:12 335  var_offer_id		    NUMBER;
14:35:12 336  var_offer_num_recurrences     NUMBER;
14:35:12 337  var_license_cur_offer_rec_num NUMBER;
14:35:12 338  var_offer_index		    NUMBER;
14:35:12 339  -- EXCEPTIONS
14:35:12 340  BAD_LICENSE_ID	     EXCEPTION;
14:35:12 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
14:35:12 342  BEGIN
14:35:12 343  
14:35:12 344  	BEGIN
14:35:12 345  	  SELECT
14:35:12 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
14:35:12 347  	    LICENSE.OFFER_ID,
14:35:12 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
14:35:12 349  	    into
14:35:12 350  	    var_offer_chain_id,
14:35:12 351  	    var_offer_id,
14:35:12 352  	    var_license_cur_offer_rec_num
14:35:12 353  	  FROM
14:35:12 354  	    LICENSE
14:35:12 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 356  	  WHERE
14:35:12 357  	    LICENSE.ID = in_license_id;
14:35:12 358  	  EXCEPTION
14:35:12 359  	    WHEN NO_DATA_FOUND THEN
14:35:12 360  	      RAISE BAD_LICENSE_ID;
14:35:12 361  	END;
14:35:12 362  
14:35:12 363  	BEGIN
14:35:12 364  	  SELECT
14:35:12 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
14:35:12 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
14:35:12 367  	    into
14:35:12 368  	    var_offer_num_recurrences,
14:35:12 369  	    var_offer_index
14:35:12 370  	  FROM
14:35:12 371  	    OFFER_OFFER_CHAIN
14:35:12 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:35:12 373  	  WHERE
14:35:12 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:35:12 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
14:35:12 376  	  EXCEPTION
14:35:12 377  	    WHEN NO_DATA_FOUND THEN
14:35:12 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
14:35:12 379  	END;
14:35:12 380  
14:35:12 381  	IF var_offer_num_recurrences = 0 THEN
14:35:12 382  	  --out_result_set := NULL;
14:35:12 383  	  -- TODO: Remove this hardcode
14:35:12 384  	  OPEN out_result_set FOR
14:35:12 385  	  SELECT
14:35:12 386  	    OFFER.ID,
14:35:12 387  	    OFFER.OFFER_STATUS_ID,
14:35:12 388  	    OFFER.ENTITLEMENT_DURATION,
14:35:12 389  	    OFFER.CREATED_BY,
14:35:12 390  	    OFFER.CREATE_DATE,
14:35:12 391  	    OFFER.UPDATED_BY,
14:35:12 392  	    OFFER.UPDATE_DATE,
14:35:12 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
14:35:12 394  	    var_offer_index as "OFFER_INDEX"
14:35:12 395  	  FROM
14:35:12 396  	    OFFER_OFFER_CHAIN
14:35:12 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:35:12 398  	  WHERE ROWNUM = 0;
14:35:12 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
14:35:12 400  	  --out_result_set := NULL;
14:35:12 401  	  -- TODO: Remove this hardcode
14:35:12 402  	  OPEN out_result_set FOR
14:35:12 403  	  SELECT
14:35:12 404  	    OFFER.ID,
14:35:12 405  	    OFFER.OFFER_STATUS_ID,
14:35:12 406  	    OFFER.ENTITLEMENT_DURATION,
14:35:12 407  	    OFFER.CREATED_BY,
14:35:12 408  	    OFFER.CREATE_DATE,
14:35:12 409  	    OFFER.UPDATED_BY,
14:35:12 410  	    OFFER.UPDATE_DATE,
14:35:12 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
14:35:12 412  	    var_offer_index as "OFFER_INDEX"
14:35:12 413  	  FROM
14:35:12 414  	    OFFER_OFFER_CHAIN
14:35:12 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:35:12 416  	  WHERE ROWNUM = 0;
14:35:12 417  	ELSE
14:35:12 418  	  OPEN out_result_set FOR
14:35:12 419  	  SELECT
14:35:12 420  	    OFFER.ID,
14:35:12 421  	    OFFER.OFFER_STATUS_ID,
14:35:12 422  	    OFFER.ENTITLEMENT_DURATION,
14:35:12 423  	    OFFER.CREATED_BY,
14:35:12 424  	    OFFER.CREATE_DATE,
14:35:12 425  	    OFFER.UPDATED_BY,
14:35:12 426  	    OFFER.UPDATE_DATE,
14:35:12 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
14:35:12 428  	    var_offer_index as "OFFER_INDEX"
14:35:12 429  	  FROM
14:35:12 430  	    OFFER
14:35:12 431  	  WHERE
14:35:12 432  	    OFFER.ID = var_offer_id;
14:35:12 433  	END IF;
14:35:12 434  
14:35:12 435  EXCEPTION
14:35:12 436  WHEN BAD_LICENSE_ID THEN
14:35:12 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 438  	  SPROC_NAME, 'No such license');
14:35:12 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
14:35:12 440  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
14:35:12 442  WHEN OTHERS THEN
14:35:12 443  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 445  END GET_RECURRING_OFFER;
14:35:12 446  
14:35:12 447  /******************************************************************************/
14:35:12 448  
14:35:12 449  PROCEDURE GET_NEXT_OFFER (
14:35:12 450  /*
14:35:12 451  Throws exceptions:
14:35:12 452  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 453  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 454  */
14:35:12 455  	in_license_id  IN NUMBER,
14:35:12 456  	out_result_set OUT SYS_REFCURSOR
14:35:12 457  ) AS
14:35:12 458  -- VARIABLES
14:35:12 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
14:35:12 460  var_offer_chain_id	NUMBER;
14:35:12 461  var_offer_id		NUMBER;
14:35:12 462  var_license_current_index NUMBER;
14:35:12 463  var_next_offer_index	NUMBER;
14:35:12 464  -- EXCEPTIONS
14:35:12 465  BAD_LICENSE_ID	      EXCEPTION;
14:35:12 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
14:35:12 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:35:12 468  BEGIN
14:35:12 469  
14:35:12 470  	BEGIN
14:35:12 471  	  SELECT
14:35:12 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
14:35:12 473  	    LICENSE.OFFER_ID,
14:35:12 474  	    LICENSE.CURRENT_OFFER_INDEX
14:35:12 475  	    into
14:35:12 476  	    var_offer_chain_id,
14:35:12 477  	    var_offer_id,
14:35:12 478  	    var_license_current_index
14:35:12 479  	  FROM
14:35:12 480  	    LICENSE
14:35:12 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 482  	  WHERE
14:35:12 483  	    LICENSE.ID = in_license_id;
14:35:12 484  	  EXCEPTION
14:35:12 485  	    WHEN NO_DATA_FOUND THEN
14:35:12 486  	      RAISE BAD_LICENSE_ID;
14:35:12 487  	END;
14:35:12 488  
14:35:12 489  	BEGIN
14:35:12 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX(
14:35:12 491  	    var_offer_chain_id,
14:35:12 492  	    var_license_current_index
14:35:12 493  	  );
14:35:12 494  	  EXCEPTION
14:35:12 495  	    WHEN OTHERS THEN
14:35:12 496  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
14:35:12 498  	END;
14:35:12 499  
14:35:12 500  	IF var_next_offer_index IS NULL THEN
14:35:12 501  	  -- RETURN NULL;
14:35:12 502  	  -- TODO: Remove this hardcode
14:35:12 503  	  OPEN out_result_set FOR
14:35:12 504  	  SELECT
14:35:12 505  	    OFFER.ID,
14:35:12 506  	    OFFER.OFFER_STATUS_ID,
14:35:12 507  	    OFFER.ENTITLEMENT_DURATION,
14:35:12 508  	    OFFER.CREATED_BY,
14:35:12 509  	    OFFER.CREATE_DATE,
14:35:12 510  	    OFFER.UPDATED_BY,
14:35:12 511  	    OFFER.UPDATE_DATE,
14:35:12 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
14:35:12 513  	  FROM
14:35:12 514  	    OFFER_OFFER_CHAIN
14:35:12 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:35:12 516  	  WHERE
14:35:12 517  	    1=2;
14:35:12 518  	ELSE
14:35:12 519  	  OPEN out_result_set FOR
14:35:12 520  	  SELECT
14:35:12 521  	    OFFER.ID,
14:35:12 522  	    OFFER.OFFER_STATUS_ID,
14:35:12 523  	    OFFER.ENTITLEMENT_DURATION,
14:35:12 524  	    OFFER.CREATED_BY,
14:35:12 525  	    OFFER.CREATE_DATE,
14:35:12 526  	    OFFER.UPDATED_BY,
14:35:12 527  	    OFFER.UPDATE_DATE,
14:35:12 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
14:35:12 529  	  FROM
14:35:12 530  	    OFFER_OFFER_CHAIN
14:35:12 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:35:12 532  	  WHERE
14:35:12 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:35:12 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
14:35:12 535  	END IF;
14:35:12 536  
14:35:12 537  EXCEPTION
14:35:12 538  WHEN BAD_LICENSE_ID THEN
14:35:12 539  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 540  	  SPROC_NAME, 'No such license');
14:35:12 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
14:35:12 542  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
14:35:12 544  WHEN OTHERS THEN
14:35:12 545  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 547  END GET_NEXT_OFFER;
14:35:12 548  
14:35:12 549  /******************************************************************************/
14:35:12 550  
14:35:12 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
14:35:12 552  	in_license_id IN NUMBER,
14:35:12 553  	out_group_id  OUT NUMBER
14:35:12 554  ) AS
14:35:12 555  -- VARIABLES
14:35:12 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
14:35:12 557  var_subscription_id NUMBER;
14:35:12 558  var_group_id	  NUMBER;
14:35:12 559  -- EXCEPTIONS
14:35:12 560  BAD_LICENSE_ID	   EXCEPTION;
14:35:12 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
14:35:12 562  BEGIN
14:35:12 563  
14:35:12 564  	-- Get subscription id
14:35:12 565  	BEGIN
14:35:12 566  	  SELECT
14:35:12 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
14:35:12 568  	  FROM
14:35:12 569  	    LICENSE
14:35:12 570  	  WHERE
14:35:12 571  	    LICENSE.ID = in_license_id;
14:35:12 572  	  EXCEPTION
14:35:12 573  	    WHEN NO_DATA_FOUND THEN
14:35:12 574  	      RAISE BAD_LICENSE_ID;
14:35:12 575  	END;
14:35:12 576  
14:35:12 577  	-- Get group id
14:35:12 578  	BEGIN
14:35:12 579  	  SELECT
14:35:12 580  	    ACCOUNT.GROUP_ID into var_group_id
14:35:12 581  	  FROM
14:35:12 582  	    SUBSCRIPTION
14:35:12 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:35:12 584  	  WHERE
14:35:12 585  	    SUBSCRIPTION.ID = var_subscription_id;
14:35:12 586  	  EXCEPTION
14:35:12 587  	    WHEN NO_DATA_FOUND THEN
14:35:12 588  	      RAISE CAN_NOT_GET_GROUP_ID;
14:35:12 589  	END;
14:35:12 590  
14:35:12 591  	out_group_id := var_group_id;
14:35:12 592  
14:35:12 593  EXCEPTION
14:35:12 594  WHEN BAD_LICENSE_ID THEN
14:35:12 595  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 596  	  SPROC_NAME, 'No such license');
14:35:12 597  WHEN CAN_NOT_GET_GROUP_ID THEN
14:35:12 598  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 599  	  SPROC_NAME, 'Could not get group id');
14:35:12 600  WHEN OTHERS THEN
14:35:12 601  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 603  END GET_GROUP_ID_BY_LICENSE_ID;
14:35:12 604  
14:35:12 605  /******************************************************************************/
14:35:12 606  
14:35:12 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
14:35:12 608  	out_result_set OUT SYS_REFCURSOR
14:35:12 609  ) AS
14:35:12 610  BEGIN
14:35:12 611  	OPEN out_result_set FOR
14:35:12 612  SELECT * FROM
14:35:12 613  (
14:35:12 614  	SELECT
14:35:12 615  	  LICENSE.ID,
14:35:12 616  	  LICENSE.INVOICE_ID,
14:35:12 617  	  LICENSE.IS_EXTENSION,
14:35:12 618  	  LICENSE.START_DATE,
14:35:12 619  	  LICENSE.END_DATE,
14:35:12 620  	  LICENSE.ENTITLEMENT_END_DATE,
14:35:12 621  	  LICENSE.CURRENT_OFFER_INDEX,
14:35:12 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
14:35:12 623  	  LICENSE.CREATE_DATE,
14:35:12 624  	  LICENSE.CREATED_BY,
14:35:12 625  	  LICENSE.LICENSE_STATUS_ID,
14:35:12 626  	  LICENSE.OFFER_ID,
14:35:12 627  	  LICENSE.SUBSCRIPTION_ID,
14:35:12 628  	  LICENSE.UPDATE_DATE,
14:35:12 629  	  LICENSE.UPDATED_BY,
14:35:12 630  	  LICENSE.NEEDS_ENTITLEMENTS
14:35:12 631  	FROM
14:35:12 632  	  LICENSE
14:35:12 633  	WHERE
14:35:12 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE
14:35:12 635  	AND ROWNUM <= 5000
14:35:12 636  	ORDER BY dbms_random.value
14:35:12 637  ) WHERE
14:35:12 638  	ROWNUM <= 500;
14:35:12 639  
14:35:12 640  END GET_NEED_ENTITLEMENTS_LICENSES;
14:35:12 641  
14:35:12 642  /******************************************************************************/
14:35:12 643  
14:35:12 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
14:35:12 645  	in_license_id	      IN NUMBER,
14:35:12 646  	in_needs_entitlements IN NUMBER,
14:35:12 647  	in_updated_by	      IN VARCHAR2
14:35:12 648  ) AS
14:35:12 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
14:35:12 650  -- VARIABLES
14:35:12 651  temp_license_id NUMBER;
14:35:12 652  -- EXCEPTIONS
14:35:12 653  BAD_LICENSE_ID	     EXCEPTION;
14:35:12 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
14:35:12 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 656  BEGIN
14:35:12 657  
14:35:12 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V16.TRUE
14:35:12 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
14:35:12 661  	END IF;
14:35:12 662  
14:35:12 663  	BEGIN
14:35:12 664  	  SELECT
14:35:12 665  	    LICENSE.ID into temp_license_id
14:35:12 666  	  FROM
14:35:12 667  	    LICENSE
14:35:12 668  	  WHERE
14:35:12 669  	    LICENSE.ID = in_license_id;
14:35:12 670  	  EXCEPTION
14:35:12 671  	    WHEN NO_DATA_FOUND THEN
14:35:12 672  	      RAISE BAD_LICENSE_ID;
14:35:12 673  	END;
14:35:12 674  
14:35:12 675  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 676  	  in_license_id 	=> in_license_id,
14:35:12 677  	  in_needs_entitlements => in_needs_entitlements,
14:35:12 678  	  in_updated_by 	=> in_updated_by
14:35:12 679  	);
14:35:12 680  
14:35:12 681  EXCEPTION
14:35:12 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
14:35:12 683  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 684  	  SPROC_NAME, 'Bad entitlements flag value');
14:35:12 685  WHEN BAD_LICENSE_ID THEN
14:35:12 686  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 687  	  SPROC_NAME, 'No such license');
14:35:12 688  WHEN OTHERS THEN
14:35:12 689  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
14:35:12 692  
14:35:12 693  
14:35:12 694  /******************************************************************************/
14:35:12 695  
14:35:12 696  PROCEDURE GET_ENDED_GC_LICENSES (
14:35:12 697  	out_result_set		OUT SYS_REFCURSOR,
14:35:12 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:35:12 699  	in_num_rows		IN NUMBER DEFAULT 10000,
14:35:12 700  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:12 701  ) AS
14:35:12 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
14:35:12 703  var_days		NUMBER;
14:35:12 704  var_hours 	NUMBER;
14:35:12 705  var_time_interval INTERVAL DAY (3) TO SECOND;
14:35:12 706  BEGIN
14:35:12 707  	var_hours := mod(in_hours_number,24);
14:35:12 708  	var_days := (in_hours_number - var_hours) / 24;
14:35:12 709  	var_time_interval := var_days||' '||var_hours||':0:0';
14:35:12 710  	OPEN out_result_set FOR
14:35:12 711  SELECT * FROM
14:35:12 712  (
14:35:12 713  	SELECT
14:35:12 714  	  l.ID,
14:35:12 715  	  l.CREATE_DATE,
14:35:12 716  	  l.CREATED_BY,
14:35:12 717  	  l.CURRENT_OFFER_INDEX,
14:35:12 718  	  l.CURRENT_OFFER_RECURR_NUM,
14:35:12 719  	  l.END_DATE,
14:35:12 720  	  l.ENTITLEMENT_END_DATE,
14:35:12 721  	  l.INVOICE_ID,
14:35:12 722  	  l.IS_EXTENSION,
14:35:12 723  	  l.LICENSE_STATUS_ID,
14:35:12 724  	  l.OFFER_ID,
14:35:12 725  	  l.START_DATE,
14:35:12 726  	  l.SUBSCRIPTION_ID,
14:35:12 727  	  l.UPDATE_DATE,
14:35:12 728  	  l.UPDATED_BY
14:35:12 729  	FROM
14:35:12 730  	  GIFT_CERTIFICATE gc
14:35:12 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
14:35:12 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
14:35:12 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
14:35:12 734  	WHERE
14:35:12 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
14:35:12 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
14:35:12 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
14:35:12 739  	  AND NOT EXISTS (
14:35:12 740  	    SELECT NULL
14:35:12 741  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:12 742  	    WHERE PROCESS_NAME = in_process_name
14:35:12 743  	      AND GENERIC_ID = l.ID
14:35:12 744  	  )
14:35:12 745  	  AND ROWNUM <= in_num_rows*10
14:35:12 746  	  ORDER BY dbms_random.value
14:35:12 747  ) WHERE
14:35:12 748  	  ROWNUM <= in_num_rows
14:35:12 749  	  GROUP BY SUBSCRIPTION_ID;
14:35:12 750  EXCEPTION
14:35:12 751  WHEN OTHERS THEN
14:35:12 752  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 754  END GET_ENDED_GC_LICENSES;
14:35:12 755  
14:35:12 756  PROCEDURE GET_LICENSE_BY_ID (
14:35:12 757  	in_license_id  IN NUMBER,
14:35:12 758  	out_result_set OUT SYS_REFCURSOR
14:35:12 759  ) AS
14:35:12 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
14:35:12 761  -- VARIABLES
14:35:12 762  temp_license_id NUMBER;
14:35:12 763  -- EXCEPTIONS
14:35:12 764  BAD_LICENSE_ID EXCEPTION;
14:35:12 765  BEGIN
14:35:12 766  
14:35:12 767  	BEGIN
14:35:12 768  	  SELECT
14:35:12 769  	    l.id into temp_license_id
14:35:12 770  	  FROM
14:35:12 771  	    license l
14:35:12 772  	  WHERE
14:35:12 773  	    l.id = in_license_id;
14:35:12 774  	  EXCEPTION
14:35:12 775  	    WHEN NO_DATA_FOUND THEN
14:35:12 776  	      RAISE BAD_LICENSE_ID;
14:35:12 777  	END;
14:35:12 778  
14:35:12 779  	OPEN out_result_set FOR
14:35:12 780  	SELECT
14:35:12 781  	  l.id,
14:35:12 782  	  l.license_status_id,
14:35:12 783  	  l.subscription_id,
14:35:12 784  	  l.invoice_id,
14:35:12 785  	  l.offer_id,
14:35:12 786  	  l.start_date,
14:35:12 787  	  l.end_date,
14:35:12 788  	  l.entitlement_end_date,
14:35:12 789  	  l.is_extension,
14:35:12 790  	  l.create_date,
14:35:12 791  	  l.created_by,
14:35:12 792  	  l.update_date,
14:35:12 793  	  l.updated_by,
14:35:12 794  	  l.current_offer_index,
14:35:12 795  	  l.current_offer_recurr_num,
14:35:12 796  	  l.needs_entitlements
14:35:12 797  	FROM
14:35:12 798  	  LICENSE l
14:35:12 799  	WHERE
14:35:12 800  	  l.id = in_license_id;
14:35:12 801  
14:35:12 802  EXCEPTION
14:35:12 803  WHEN BAD_LICENSE_ID THEN
14:35:12 804  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 805  	  SPROC_NAME, 'No such license');
14:35:12 806  WHEN OTHERS THEN
14:35:12 807  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 809  END GET_LICENSE_BY_ID;
14:35:12 810  
14:35:12 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
14:35:12 812  	in_subscription_id IN NUMBER,
14:35:12 813  	in_end_date IN DATE,
14:35:12 814  	in_updated_by IN VARCHAR2
14:35:12 815  ) AS
14:35:12 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
14:35:12 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 818  var_latest_lice NUMBER;
14:35:12 819  BEGIN
14:35:12 820  	SELECT max(id)
14:35:12 821  	INTO  var_latest_lice
14:35:12 822  	FROM LICENSE
14:35:12 823  	WHERE
14:35:12 824  	  subscription_id = in_subscription_id
14:35:12 825  	;
14:35:12 826  
14:35:12 827  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 828  	  in_license_id        => var_latest_lice,
14:35:12 829  	  in_updated_by        => in_updated_by,
14:35:12 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 831  	  in_end_date	       => in_end_date,
14:35:12 832  	  in_entitlement_end_date => in_end_date
14:35:12 833  	);
14:35:12 834  
14:35:12 835  EXCEPTION
14:35:12 836  WHEN NO_DATA_FOUND THEN
14:35:12 837  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
14:35:12 839  WHEN OTHERS THEN
14:35:12 840  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 842  END UP_LATEST_LICE_END_BY_SUBID;
14:35:12 843  
14:35:12 844  END PROCS_LICENSE_V16;
14:35:12 845  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE CREATE_CHARGE(
14:35:12   4  /*
14:35:12   5  Throws exceptions:
14:35:12   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12   8  */
14:35:12   9  	in_invoice_id	      IN NUMBER,
14:35:12  10  	in_transaction_id     IN NUMBER,
14:35:12  11  	in_instrument_type_id IN NUMBER,
14:35:12  12  	in_instrument_id      IN NUMBER,
14:35:12  13  	in_charge_amount      IN NUMBER,
14:35:12  14  	in_created_by	      IN VARCHAR2,
14:35:12  15  	in_charge_status_id   IN NUMBER,
14:35:12  16  	out_charge_id	      OUT NUMBER
14:35:12  17  ) AS
14:35:12  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
14:35:12  19  -- VARIABLES
14:35:12  20  temp_invoice_id	  NUMBER;
14:35:12  21  temp_transaction_id NUMBER;
14:35:12  22  var_new_charge_id   NUMBER;
14:35:12  23  -- EXCEPTIONS
14:35:12  24  BAD_INVOICE_ID	     EXCEPTION;
14:35:12  25  BAD_TRANSACTION_ID     EXCEPTION;
14:35:12  26  BAD_PAYPAL_ID	     EXCEPTION;
14:35:12  27  BAD_CREDIT_CARD_ID     EXCEPTION;
14:35:12  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
14:35:12  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
14:35:12  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12  31  BEGIN
14:35:12  32  	-- Check that incoming data is correct
14:35:12  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
14:35:12  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
14:35:12  35  	  RAISE BAD_INSTRUMENT_TYPE;
14:35:12  36  	END IF;
14:35:12  37  
14:35:12  38  	-- Check that status is correct
14:35:12  39  	IF in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_OPENED
14:35:12  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_PROCESSED
14:35:12  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
14:35:12  42  	  RAISE BAD_CHARGE_STATUS_ID;
14:35:12  43  	END IF;
14:35:12  44  
14:35:12  45  	-- Check that invoice exists
14:35:12  46  	BEGIN
14:35:12  47  	  SELECT
14:35:12  48  	    INVOICE.ID into temp_invoice_id
14:35:12  49  	  FROM
14:35:12  50  	    INVOICE
14:35:12  51  	  WHERE
14:35:12  52  	    INVOICE.ID = in_invoice_id;
14:35:12  53  	  EXCEPTION
14:35:12  54  	    WHEN NO_DATA_FOUND THEN
14:35:12  55  	      RAISE BAD_INVOICE_ID;
14:35:12  56  	END;
14:35:12  57  
14:35:12  58  	-- Check that transaction exists
14:35:12  59  	BEGIN
14:35:12  60  	  SELECT
14:35:12  61  	    TRANSACTION.ID into temp_transaction_id
14:35:12  62  	  FROM
14:35:12  63  	    TRANSACTION
14:35:12  64  	  WHERE
14:35:12  65  	    TRANSACTION.ID = in_transaction_id;
14:35:12  66  	  EXCEPTION
14:35:12  67  	    WHEN NO_DATA_FOUND THEN
14:35:12  68  	      RAISE BAD_TRANSACTION_ID;
14:35:12  69  	END;
14:35:12  70  
14:35:12  71  	-- Check that instrument exists
14:35:12  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
14:35:12  73  	  IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12  74  	    RAISE BAD_CREDIT_CARD_ID;
14:35:12  75  	  END IF;
14:35:12  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
14:35:12  77  	  IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12  78  	    RAISE BAD_PAYPAL_ID;
14:35:12  79  	  END IF;
14:35:12  80  	END IF;
14:35:12  81  
14:35:12  82  	-- Create new charge
14:35:12  83  	PROCS_CHARGE_CRU_V16.CREATE_CHARGE(
14:35:12  84  	  out_charge_id 	=> var_new_charge_id,
14:35:12  85  	  in_invoice_id 	=> in_invoice_id,
14:35:12  86  	  in_transaction_id	=> in_transaction_id,
14:35:12  87  	  in_instrument_type_id => in_instrument_type_id,
14:35:12  88  	  in_instrument_id	=> in_instrument_id,
14:35:12  89  	  in_charge_amount	=> in_charge_amount,
14:35:12  90  	  in_charge_status_id	=> in_charge_status_id,
14:35:12  91  	  in_created_by 	=> in_created_by
14:35:12  92  	);
14:35:12  93  
14:35:12  94  	out_charge_id := var_new_charge_id;
14:35:12  95  
14:35:12  96  EXCEPTION
14:35:12  97  WHEN BAD_CHARGE_STATUS_ID THEN
14:35:12  98  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
14:35:12 100  WHEN BAD_INSTRUMENT_TYPE THEN
14:35:12 101  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 102  	  PROCS_NAME, 'Bad instrument type id');
14:35:12 103  WHEN BAD_INVOICE_ID THEN
14:35:12 104  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 105  	  PROCS_NAME, 'No such invoice');
14:35:12 106  WHEN BAD_TRANSACTION_ID THEN
14:35:12 107  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 108  	  PROCS_NAME, 'No such transaction');
14:35:12 109  WHEN BAD_PAYPAL_ID THEN
14:35:12 110  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 111  	  PROCS_NAME, 'No such paypal');
14:35:12 112  WHEN BAD_CREDIT_CARD_ID THEN
14:35:12 113  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 114  	  PROCS_NAME, 'No such credit card');
14:35:12 115  WHEN OTHERS THEN
14:35:12 116  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
14:35:12 118  END CREATE_CHARGE;
14:35:12 119  
14:35:12 120  /********************************************************/
14:35:12 121  -- norlov #38562 :
14:35:12 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
14:35:12 123  /*
14:35:12 124  Throws exceptions:
14:35:12 125  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 126  */
14:35:12 127  	out_result_set	    OUT SYS_REFCURSOR,
14:35:12 128  	in_row_number	    IN NUMBER DEFAULT NULL
14:35:12 129  ) AS
14:35:12 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
14:35:12 131  -- COMSTANTS
14:35:12 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
14:35:12 133  -- VARIABLES
14:35:12 134  var_row_number NUMBER;
14:35:12 135  BEGIN
14:35:12 136  	IF in_row_number IS NULL THEN
14:35:12 137  	  var_row_number := DEFAULT_ROW_NUMBER;
14:35:12 138  	ELSE
14:35:12 139  	  var_row_number := in_row_number;
14:35:12 140  	END IF;
14:35:12 141  
14:35:12 142  	-- Select charges
14:35:12 143  	OPEN out_result_set FOR
14:35:12 144  SELECT * FROM
14:35:12 145  (
14:35:12 146  	SELECT
14:35:12 147  	  CHARGE.ID,
14:35:12 148  	  CHARGE.TRANSACTION_ID,
14:35:12 149  	  CHARGE.INSTRUMENT_ID,
14:35:12 150  	  CHARGE.INSTRUMENT_TYPE_ID,
14:35:12 151  	  CHARGE.CHARGE_AMOUNT,
14:35:12 152  	  CHARGE.CREATE_DATE,
14:35:12 153  	  CHARGE.CREATED_BY,
14:35:12 154  	  CHARGE.INVOICE_ID
14:35:12 155  	FROM
14:35:12 156  	  CHARGE
14:35:12 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:35:12 158  	WHERE
14:35:12 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
14:35:12 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V16.TRUE
14:35:12 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
14:35:12 162  	  AND NOT EXISTS
14:35:12 163  	  (
14:35:12 164  	    SELECT NULL
14:35:12 165  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:12 166  	    WHERE PROCESS_NAME = SPROC_NAME
14:35:12 167  	      AND GENERIC_ID = CHARGE.ID
14:35:12 168  	  )
14:35:12 169  	  AND ROWNUM <= var_row_number*10
14:35:12 170  	  ORDER BY dbms_random.value
14:35:12 171  ) WHERE
14:35:12 172  	  ROWNUM <= var_row_number;
14:35:12 173  
14:35:12 174  END GET_PENDING_REFUND_CHARGES;
14:35:12 175  /******************************************************************************/
14:35:12 176  
14:35:12 177  PROCEDURE GET_UNPROCESSED_CHARGES (
14:35:12 178  /*
14:35:12 179  Throws exceptions:
14:35:12 180  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 181  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 182  */
14:35:12 183  	in_invoice_id  IN NUMBER,
14:35:12 184  	out_result_set OUT SYS_REFCURSOR
14:35:12 185  ) AS
14:35:12 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
14:35:12 187  -- VARIABLES
14:35:12 188  temp_invoice_id NUMBER;
14:35:12 189  -- EXCEPTIONS
14:35:12 190  BAD_INVOICE_ID EXCEPTION;
14:35:12 191  BEGIN
14:35:12 192  
14:35:12 193  	-- Check that invoice exists
14:35:12 194  	BEGIN
14:35:12 195  	  SELECT
14:35:12 196  	    INVOICE.ID into temp_invoice_id
14:35:12 197  	  FROM
14:35:12 198  	    INVOICE
14:35:12 199  	  WHERE
14:35:12 200  	    INVOICE.ID = in_invoice_id;
14:35:12 201  	  EXCEPTION
14:35:12 202  	    WHEN NO_DATA_FOUND THEN
14:35:12 203  	      RAISE BAD_INVOICE_ID;
14:35:12 204  	END;
14:35:12 205  
14:35:12 206  	-- Select charges
14:35:12 207  	OPEN out_result_set FOR
14:35:12 208  	SELECT
14:35:12 209  	  CHARGE.ID,
14:35:12 210  	  CHARGE.TRANSACTION_ID,
14:35:12 211  	  CHARGE.INSTRUMENT_ID,
14:35:12 212  	  CHARGE.INSTRUMENT_TYPE_ID,
14:35:12 213  	  CHARGE.CHARGE_AMOUNT,
14:35:12 214  	  CHARGE.CREATE_DATE,
14:35:12 215  	  CHARGE.CREATED_BY,
14:35:12 216  	  CHARGE.INVOICE_ID
14:35:12 217  	FROM
14:35:12 218  	  CHARGE
14:35:12 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:35:12 220  	WHERE
14:35:12 221  	  CHARGE.INVOICE_ID = in_invoice_id
14:35:12 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
14:35:12 223  	  AND
14:35:12 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
14:35:12 225  
14:35:12 226  EXCEPTION
14:35:12 227  WHEN BAD_INVOICE_ID THEN
14:35:12 228  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 229  	  SPROC_NAME, 'No such invoice');
14:35:12 230  WHEN OTHERS THEN
14:35:12 231  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 233  END GET_UNPROCESSED_CHARGES;
14:35:12 234  
14:35:12 235  /******************************************************************************/
14:35:12 236  
14:35:12 237  PROCEDURE GET_PROCESSED_CHARGES (
14:35:12 238  /*
14:35:12 239  Throws exceptions:
14:35:12 240  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 241  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 242  */
14:35:12 243  	in_invoice_id  IN NUMBER,
14:35:12 244  	out_result_set OUT SYS_REFCURSOR
14:35:12 245  ) AS
14:35:12 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
14:35:12 247  -- VARIABLES
14:35:12 248  temp_invoice_id NUMBER;
14:35:12 249  -- EXCEPTIONS
14:35:12 250  BAD_INVOICE_ID  EXCEPTION;
14:35:12 251  BEGIN
14:35:12 252  
14:35:12 253  	-- Check that invoice exists
14:35:12 254  	BEGIN
14:35:12 255  	  SELECT
14:35:12 256  	    INVOICE.ID into temp_invoice_id
14:35:12 257  	  FROM
14:35:12 258  	    INVOICE
14:35:12 259  	  WHERE
14:35:12 260  	    INVOICE.ID = in_invoice_id;
14:35:12 261  	  EXCEPTION
14:35:12 262  	    WHEN NO_DATA_FOUND THEN
14:35:12 263  	      RAISE BAD_INVOICE_ID;
14:35:12 264  	END;
14:35:12 265  
14:35:12 266  	-- Select charges
14:35:12 267  	OPEN out_result_set FOR
14:35:12 268  	SELECT /*+ STAR_TRANSFORMATION */
14:35:12 269  	  CHARGE.ID,
14:35:12 270  	  CHARGE.TRANSACTION_ID,
14:35:12 271  	  CHARGE.INSTRUMENT_ID,
14:35:12 272  	  CHARGE.INSTRUMENT_TYPE_ID,
14:35:12 273  	  CHARGE.CHARGE_AMOUNT,
14:35:12 274  	  CHARGE.CREATE_DATE,
14:35:12 275  	  CHARGE.CREATED_BY,
14:35:12 276  	  CHARGE.INVOICE_ID
14:35:12 277  	FROM
14:35:12 278  	  CHARGE
14:35:12 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:35:12 280  	WHERE
14:35:12 281  	  CHARGE.INVOICE_ID = in_invoice_id
14:35:12 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
14:35:12 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_CLOSED;
14:35:12 284  
14:35:12 285  EXCEPTION
14:35:12 286  WHEN BAD_INVOICE_ID THEN
14:35:12 287  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 288  	  SPROC_NAME, 'No such invoice');
14:35:12 289  WHEN OTHERS THEN
14:35:12 290  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 292  END GET_PROCESSED_CHARGES;
14:35:12 293  
14:35:12 294  /******************************************************************************/
14:35:12 295  
14:35:12 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
14:35:12 297  /*
14:35:12 298  Throws exceptions:
14:35:12 299  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 300  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 301  */
14:35:12 302  	in_charge_id	    IN NUMBER,
14:35:12 303  	out_subscription_id OUT NUMBER
14:35:12 304  ) AS
14:35:12 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
14:35:12 306  -- VARIABLES
14:35:12 307  var_invoice_id	  NUMBER;
14:35:12 308  var_subscription_id NUMBER;
14:35:12 309  -- EXCEPTIONS
14:35:12 310  BAD_CHARGE_ID		EXCEPTION;
14:35:12 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
14:35:12 312  BEGIN
14:35:12 313  
14:35:12 314  	BEGIN
14:35:12 315  	  SELECT
14:35:12 316  	    CHARGE.INVOICE_ID into var_invoice_id
14:35:12 317  	  FROM
14:35:12 318  	    CHARGE
14:35:12 319  	  WHERE
14:35:12 320  	    CHARGE.ID = in_charge_id;
14:35:12 321  	  EXCEPTION
14:35:12 322  	    WHEN NO_DATA_FOUND THEN
14:35:12 323  	      RAISE BAD_CHARGE_ID;
14:35:12 324  	END;
14:35:12 325  
14:35:12 326  	BEGIN
14:35:12 327  	  SELECT
14:35:12 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
14:35:12 329  	  FROM
14:35:12 330  	    LICENSE
14:35:12 331  	  WHERE
14:35:12 332  	    LICENSE.INVOICE_ID = var_invoice_id
14:35:12 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
14:35:12 334  	  EXCEPTION
14:35:12 335  	    WHEN NO_DATA_FOUND THEN
14:35:12 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
14:35:12 337  	END;
14:35:12 338  
14:35:12 339  	out_subscription_id := var_subscription_id;
14:35:12 340  
14:35:12 341  EXCEPTION
14:35:12 342  WHEN BAD_CHARGE_ID THEN
14:35:12 343  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 344  	  SPROC_NAME, 'No such charge');
14:35:12 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
14:35:12 346  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 347  	  SPROC_NAME, 'Could not find subscription for given charge');
14:35:12 348  WHEN OTHERS THEN
14:35:12 349  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
14:35:12 352  
14:35:12 353  /******************************************************************************/
14:35:12 354  
14:35:12 355  PROCEDURE UPDATE_CHARGE_STATUS (
14:35:12 356  /*
14:35:12 357  Throws exceptions:
14:35:12 358  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 359  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 360  */
14:35:12 361  	in_charge_id	    IN CHARGE.ID%TYPE,
14:35:12 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:35:12 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
14:35:12 364  ) AS
14:35:12 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
14:35:12 366  -- EXCEPTIONS
14:35:12 367  BAD_CHARGE_ID	     EXCEPTION;
14:35:12 368  BAD_STATUS_ID	     EXCEPTION;
14:35:12 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 370  BEGIN
14:35:12 371  
14:35:12 372  	IF in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_OPENED
14:35:12 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_PROCESSED
14:35:12 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
14:35:12 375  	  RAISE BAD_STATUS_ID;
14:35:12 376  	END IF;
14:35:12 377  
14:35:12 378  	PROCS_CHARGE_CRU_V16.UPDATE_CHARGE(
14:35:12 379  	  in_charge_id	      => in_charge_id,
14:35:12 380  	  in_charge_status_id => in_charge_status_id,
14:35:12 381  	  in_updated_by       => in_updated_by
14:35:12 382  	);
14:35:12 383  
14:35:12 384  	IF SQL%ROWCOUNT = 0 THEN
14:35:12 385  	  RAISE BAD_CHARGE_ID;
14:35:12 386  	END IF;
14:35:12 387  
14:35:12 388  EXCEPTION
14:35:12 389  WHEN BAD_CHARGE_ID THEN
14:35:12 390  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 391  	  SPROC_NAME, 'No such charge');
14:35:12 392  WHEN BAD_STATUS_ID THEN
14:35:12 393  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 394  	  SPROC_NAME, 'Bad status id');
14:35:12 395  WHEN OTHERS THEN
14:35:12 396  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 398  END UPDATE_CHARGE_STATUS;
14:35:12 399  
14:35:12 400  FUNCTION IS_CHARGE_COLLECTED (
14:35:12 401  /*
14:35:12 402  Throws:
14:35:12 403  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 404  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 405  Returns:
14:35:12 406  GLOBAL_CONST.TRUE if transaction collected,
14:35:12 407  GLOBAL_CONST.FALSE else
14:35:12 408  */
14:35:12 409  	in_charge_id IN NUMBER
14:35:12 410  ) RETURN NUMBER AS
14:35:12 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
14:35:12 412  -- VARIABLES
14:35:12 413  var_transaction_id NUMBER;
14:35:12 414  is_transaction_collected NUMBER;
14:35:12 415  -- EXCEPTIONS
14:35:12 416  BAD_CHARGE_ID	       EXCEPTION;
14:35:12 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
14:35:12 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
14:35:12 419  BEGIN
14:35:12 420  
14:35:12 421  	BEGIN
14:35:12 422  	  SELECT
14:35:12 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
14:35:12 424  	  FROM
14:35:12 425  	    CHARGE
14:35:12 426  	  WHERE
14:35:12 427  	    CHARGE.ID = in_charge_id;
14:35:12 428  	  EXCEPTION
14:35:12 429  	    WHEN NO_DATA_FOUND THEN
14:35:12 430  	      RAISE BAD_CHARGE_ID;
14:35:12 431  	END;
14:35:12 432  
14:35:12 433  	BEGIN
14:35:12 434  	  is_transaction_collected := PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(var_transaction_id);
14:35:12 435  	  EXCEPTION
14:35:12 436  	    WHEN OTHERS THEN
14:35:12 437  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
14:35:12 439  	END;
14:35:12 440  
14:35:12 441  	RETURN is_transaction_collected;
14:35:12 442  
14:35:12 443  EXCEPTION
14:35:12 444  WHEN BAD_CHARGE_ID THEN
14:35:12 445  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 446  	  SPROC_NAME, 'No such charge');
14:35:12 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
14:35:12 448  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
14:35:12 450  WHEN OTHERS THEN
14:35:12 451  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 453  END;
14:35:12 454  
14:35:12 455  PROCEDURE GET_COLLECTED_CHARGES (
14:35:12 456  /*
14:35:12 457  Throws exceptions:
14:35:12 458  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 459  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 460  */
14:35:12 461  	in_invoice_id  IN NUMBER,
14:35:12 462  	out_result_set OUT SYS_REFCURSOR
14:35:12 463  ) AS
14:35:12 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
14:35:12 465  -- VARIABLES
14:35:12 466  temp_invoice_id NUMBER;
14:35:12 467  -- EXCEPTIONS
14:35:12 468  BAD_INVOICE_ID  EXCEPTION;
14:35:12 469  BEGIN
14:35:12 470  
14:35:12 471  	-- Check that invoice exists
14:35:12 472  	BEGIN
14:35:12 473  	  SELECT
14:35:12 474  	    INVOICE.ID into temp_invoice_id
14:35:12 475  	  FROM
14:35:12 476  	    INVOICE
14:35:12 477  	  WHERE
14:35:12 478  	    INVOICE.ID = in_invoice_id;
14:35:12 479  	  EXCEPTION
14:35:12 480  	    WHEN NO_DATA_FOUND THEN
14:35:12 481  	      RAISE BAD_INVOICE_ID;
14:35:12 482  	END;
14:35:12 483  
14:35:12 484  	-- Select charges
14:35:12 485  	OPEN out_result_set FOR
14:35:12 486  	SELECT
14:35:12 487  	  CHARGE.ID,
14:35:12 488  	  CHARGE.TRANSACTION_ID,
14:35:12 489  	  CHARGE.INSTRUMENT_ID,
14:35:12 490  	  CHARGE.INSTRUMENT_TYPE_ID,
14:35:12 491  	  CHARGE.CHARGE_AMOUNT,
14:35:12 492  	  CHARGE.CREATE_DATE,
14:35:12 493  	  CHARGE.CREATED_BY,
14:35:12 494  	  CHARGE.INVOICE_ID
14:35:12 495  	FROM
14:35:12 496  	  CHARGE
14:35:12 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:35:12 498  	WHERE
14:35:12 499  	  CHARGE.INVOICE_ID = in_invoice_id
14:35:12 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
14:35:12 501  	  AND PROCS_CHARGE_V16.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 502  
14:35:12 503  EXCEPTION
14:35:12 504  WHEN BAD_INVOICE_ID THEN
14:35:12 505  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 506  	  SPROC_NAME, 'No such invoice');
14:35:12 507  WHEN OTHERS THEN
14:35:12 508  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 510  END GET_COLLECTED_CHARGES;
14:35:12 511  
14:35:12 512  END PROCS_CHARGE_V16;
14:35:12 513  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE START_SUBSCRIPTION_CREATION (
14:35:12   4  	in_group_id	      IN NUMBER,
14:35:12   5  	in_created_by	      IN VARCHAR2,
14:35:12   6  	in_offer_chain_id     IN NUMBER,
14:35:12   7  	in_instrument_type_id IN NUMBER,
14:35:12   8  	in_instrument_id      IN NUMBER,
14:35:12   9  	in_agent_id	      IN NUMBER,
14:35:12  10  	in_note 	      IN VARCHAR2,
14:35:12  11  	out_subscription_id   OUT NUMBER,
14:35:12  12  	out_invoice_id	      OUT NUMBER,
14:35:12  13  	out_new_license_id    OUT NUMBER,
14:35:12  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
14:35:12  15  ) AS
14:35:12  16  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
14:35:12  17  -- VARIABLES
14:35:12  18  var_account_id		 NUMBER;
14:35:12  19  var_account_status	 NUMBER;
14:35:12  20  var_offer_chain_status_id  NUMBER;
14:35:12  21  var_is_gift_certificate	 NUMBER;
14:35:12  22  var_is_for_redemption	 NUMBER;
14:35:12  23  var_same_offer_chains_num  NUMBER;
14:35:12  24  var_max_concurrent_subscrs NUMBER;
14:35:12  25  var_first_offer_id	 NUMBER;
14:35:12  26  var_new_invoice_id	 NUMBER;
14:35:12  27  var_new_subscription_id	 NUMBER;
14:35:12  28  var_date			 DATE := SYSDATE;
14:35:12  29  var_account_tax_exempt_id  VARCHAR2(255);
14:35:12  30  var_concur_subscription_id NUMBER;
14:35:12  31  -- EXCEPTIONS
14:35:12  32  BAD_GROUP_ID		    EXCEPTION;
14:35:12  33  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
14:35:12  34  BAD_OFFER_CHAIN		    EXCEPTION;
14:35:12  35  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
14:35:12  36  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
14:35:12  37  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
14:35:12  38  LIMIT_REACHED		    EXCEPTION;
14:35:12  39  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
14:35:12  40  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
14:35:12  41  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
14:35:12  42  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
14:35:12  43  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
14:35:12  44  CAN_NOT_CREATE_NOTE	    EXCEPTION;
14:35:12  45  
14:35:12  46  EXCEPTION_MESSAGE VARCHAR2(1024);
14:35:12  47  BEGIN
14:35:12  48  
14:35:12  49  	-- Get account id and status
14:35:12  50  	BEGIN
14:35:12  51  	  SELECT
14:35:12  52  	    ACCOUNT.ID,
14:35:12  53  	    ACCOUNT.ACCOUNT_STATUS_ID,
14:35:12  54  	    ACCOUNT.TAX_EXEMPT_ID
14:35:12  55  	    into
14:35:12  56  	    var_account_id,
14:35:12  57  	    var_account_status,
14:35:12  58  	    var_account_tax_exempt_id
14:35:12  59  	  FROM
14:35:12  60  	    ACCOUNT
14:35:12  61  	  WHERE
14:35:12  62  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12  63  	  EXCEPTION
14:35:12  64  	  WHEN NO_DATA_FOUND THEN
14:35:12  65  	    RAISE BAD_GROUP_ID;
14:35:12  66  	END;
14:35:12  67  
14:35:12  68  	-- Could not create subscription for disabled account
14:35:12  69  	IF var_account_status = GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
14:35:12  70  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
14:35:12  71  	END IF;
14:35:12  72  
14:35:12  73  	-- Get offer chain status
14:35:12  74  	BEGIN
14:35:12  75  	  SELECT
14:35:12  76  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
14:35:12  77  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
14:35:12  78  	    into
14:35:12  79  	    var_offer_chain_status_id,
14:35:12  80  	    var_is_gift_certificate
14:35:12  81  	  FROM
14:35:12  82  	    OFFER_CHAIN
14:35:12  83  	  WHERE
14:35:12  84  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:35:12  85  
14:35:12  86  	  EXCEPTION
14:35:12  87  	    WHEN NO_DATA_FOUND THEN
14:35:12  88  	      RAISE BAD_OFFER_CHAIN;
14:35:12  89  	END;
14:35:12  90  
14:35:12  91  	-- Could not subscribe to inactive/disabled offer chain
14:35:12  92  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
14:35:12  93  	  RAISE BAD_OFFER_CHAIN_STATUS;
14:35:12  94  	END IF;
14:35:12  95  
14:35:12  96  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
14:35:12  97  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V16.TRUE THEN
14:35:12  98  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
14:35:12  99  	END IF;
14:35:12 100  
14:35:12 101  	-- check if the OC is for Redemption:
14:35:12 102  	SELECT
14:35:12 103  	  COUNT(*) into var_is_for_redemption
14:35:12 104  	FROM
14:35:12 105  	  OFFER_CHAIN_ELIGIBILITY
14:35:12 106  	WHERE
14:35:12 107  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 108  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
14:35:12 109  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
14:35:12 110  
14:35:12 111  	IF var_is_for_redemption > 0 THEN
14:35:12 112  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
14:35:12 113  	END IF;
14:35:12 114  
14:35:12 115  	SELECT
14:35:12 116  	  COUNT(*) into var_same_offer_chains_num
14:35:12 117  	FROM
14:35:12 118  	  SUBSCRIPTION
14:35:12 119  	WHERE
14:35:12 120  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 121  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 122  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
14:35:12 123  
14:35:12 124  	-- ELIGIBILITY LOGIC CHANGED TO:
14:35:12 125  	-- FOR EACH offer chain eligibility rule in OC:
14:35:12 126  	--   IF offer chain eligibility rule fails:
14:35:12 127  	--     deny purchase;
14:35:12 128  	--   END IF
14:35:12 129  	-- END FOR
14:35:12 130  	-- FOR EACH product eligibility rule in OC:
14:35:12 131  	--   IF product eligibilty rule fails:
14:35:12 132  	--     deny purchase;
14:35:12 133  	--   END IF
14:35:12 134  	-- END FOR
14:35:12 135  	-- allow purchase;
14:35:12 136  
14:35:12 137  	-- if user have any active existing subscriptions to the offer chain
14:35:12 138  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
14:35:12 139  	-- then deny purchase
14:35:12 140  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
14:35:12 141  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V16.INFINITY
14:35:12 142  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
14:35:12 143  	  -- Find first concurrent subscription id:
14:35:12 144  	  SELECT
14:35:12 145  	    ID into var_concur_subscription_id
14:35:12 146  	  FROM (
14:35:12 147  	    SELECT
14:35:12 148  	      ID
14:35:12 149  	    FROM
14:35:12 150  	      SUBSCRIPTION
14:35:12 151  	    WHERE
14:35:12 152  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 153  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 154  	      AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 155  	    ORDER BY
14:35:12 156  	      ID
14:35:12 157  	  )
14:35:12 158  	  WHERE
14:35:12 159  	    ROWNUM <= 1;
14:35:12 160  	  RAISE LIMIT_REACHED;
14:35:12 161  	END IF;
14:35:12 162  
14:35:12 163  	-- if user does not have any active existing subscriptions to the offer chain
14:35:12 164  	-- and if product from the offer chain is already owned from another offer chain
14:35:12 165  	-- then deny purchase
14:35:12 166  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V16.FALSE) THEN
14:35:12 167  	  FOR f_account_offer_chains IN (
14:35:12 168  	    SELECT DISTINCT
14:35:12 169  	      OFFER_CHAIN_ID
14:35:12 170  	    FROM
14:35:12 171  	      SUBSCRIPTION
14:35:12 172  	    WHERE
14:35:12 173  	      ACCOUNT_ID = var_account_id
14:35:12 174  	      AND (
14:35:12 175  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 176  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED)
14:35:12 177  	  )
14:35:12 178  	  LOOP
14:35:12 179  	    IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(
14:35:12 180  	      in_offer_chain_1	       => in_offer_chain_id,
14:35:12 181  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
14:35:12 182  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V16.TRUE
14:35:12 183  	    ) = GLOBAL_CONSTANTS_V16.TRUE THEN
14:35:12 184  
14:35:12 185  	      -- Find first concurrent subscription id:
14:35:12 186  	      SELECT
14:35:12 187  		ID into var_concur_subscription_id
14:35:12 188  	      FROM (
14:35:12 189  		SELECT
14:35:12 190  		  ID
14:35:12 191  		FROM
14:35:12 192  		  SUBSCRIPTION
14:35:12 193  		WHERE
14:35:12 194  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 195  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
14:35:12 196  		  AND (
14:35:12 197  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 198  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
14:35:12 199  		  )
14:35:12 200  		ORDER BY
14:35:12 201  		  ID
14:35:12 202  	      )
14:35:12 203  	      WHERE
14:35:12 204  		ROWNUM <= 1;
14:35:12 205  
14:35:12 206  	      RAISE PRODUCT_ALREADY_PURCHASED;
14:35:12 207  	    END IF;
14:35:12 208  	  END LOOP;
14:35:12 209  	END IF;
14:35:12 210  
14:35:12 211  	BEGIN
14:35:12 212  	  PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
14:35:12 213  	  EXCEPTION
14:35:12 214  	    WHEN OTHERS THEN
14:35:12 215  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 216  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
14:35:12 217  	END;
14:35:12 218  
14:35:12 219  	BEGIN
14:35:12 220  	  PROCS_INVOICE_V16.CREATE_INVOICE(
14:35:12 221  	    in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
14:35:12 222  	    in_created_by     => in_created_by,
14:35:12 223  	    in_tax_exempt_id  => var_account_tax_exempt_id,
14:35:12 224  	    out_invoice_id    => var_new_invoice_id
14:35:12 225  	  );
14:35:12 226  	  EXCEPTION
14:35:12 227  	    WHEN OTHERS THEN
14:35:12 228  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 229  	      RAISE CAN_NOT_CREATE_INVOICE;
14:35:12 230  	END;
14:35:12 231  
14:35:12 232  	BEGIN
14:35:12 233  	  PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
14:35:12 234  	    in_invoice_id => var_new_invoice_id,
14:35:12 235  	    in_offer_id   => var_first_offer_id,
14:35:12 236  	    in_created_by => in_created_by
14:35:12 237  	  );
14:35:12 238  	  EXCEPTION
14:35:12 239  	    WHEN OTHERS THEN
14:35:12 240  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 241  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
14:35:12 242  	END;
14:35:12 243  
14:35:12 244  	PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION(
14:35:12 245  	  out_subscription_id	    => var_new_subscription_id,
14:35:12 246  	  in_account_id 	    => var_account_id,
14:35:12 247  	  in_purchase_date	    => var_date,
14:35:12 248  	  in_offer_chain_id	    => in_offer_chain_id,
14:35:12 249  	  in_created_by 	    => in_created_by,
14:35:12 250  	  in_instrument_type_id     => in_instrument_type_id,
14:35:12 251  	  in_instrument_id	    => in_instrument_id,
14:35:12 252  	  in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 253  	);
14:35:12 254  
14:35:12 255  	BEGIN
14:35:12 256  	  PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
14:35:12 257  	    in_subscription_id => var_new_subscription_id,
14:35:12 258  	    in_agent_id        => in_agent_id,
14:35:12 259  	    in_note	       => in_note,
14:35:12 260  	    in_created_by      => in_created_by
14:35:12 261  	  );
14:35:12 262  	  EXCEPTION
14:35:12 263  	   WHEN OTHERS THEN
14:35:12 264  	     EXCEPTION_MESSAGE := SQLERRM;
14:35:12 265  	     RAISE CAN_NOT_CREATE_NOTE;
14:35:12 266  	END;
14:35:12 267  
14:35:12 268  	BEGIN
14:35:12 269  	  PROCS_LICENSE_V16.CREATE_LICENSE(
14:35:12 270  	    in_status_id		=> GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
14:35:12 271  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 272  	    in_start_date		=> var_date,
14:35:12 273  	    in_end_date 		=> NULL, -- Will be calculated automatically
14:35:12 274  	    in_offer_id 		=> var_first_offer_id,
14:35:12 275  	    in_subscription_id		=> var_new_subscription_id,
14:35:12 276  	    in_invoice_id		=> var_new_invoice_id,
14:35:12 277  	    in_created_by		=> in_created_by,
14:35:12 278  	    in_is_extension		=> GLOBAL_CONSTANTS_V16.FALSE,
14:35:12 279  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
14:35:12 280  	    in_current_offer_recurr_num => 1,
14:35:12 281  	    out_license_id		=> out_new_license_id
14:35:12 282  	  );
14:35:12 283  	  EXCEPTION
14:35:12 284  	    WHEN OTHERS THEN
14:35:12 285  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 286  	      RAISE CAN_NOT_CREATE_LICENSE;
14:35:12 287  	END;
14:35:12 288  
14:35:12 289  	out_subscription_id := var_new_subscription_id;
14:35:12 290  	out_invoice_id := var_new_invoice_id;
14:35:12 291  
14:35:12 292  EXCEPTION
14:35:12 293  WHEN BAD_OFFER_CHAIN_STATUS THEN
14:35:12 294  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 295  	  SPROC_NAME, 'Offer chain is not active');
14:35:12 296  WHEN LIMIT_REACHED THEN
14:35:12 297  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
14:35:12 298  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
14:35:12 299  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
14:35:12 300  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 301  	  SPROC_NAME, 'Can not create subsscription for disabled account');
14:35:12 302  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
14:35:12 303  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 304  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
14:35:12 305  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
14:35:12 306  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 307  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
14:35:12 308  WHEN BAD_OFFER_CHAIN THEN
14:35:12 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 310  	  SPROC_NAME, 'No such offer chain');
14:35:12 311  WHEN PRODUCT_ALREADY_PURCHASED THEN
14:35:12 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
14:35:12 313  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
14:35:12 314  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
14:35:12 315  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 316  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
14:35:12 317  WHEN CAN_NOT_CREATE_INVOICE THEN
14:35:12 318  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 319  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
14:35:12 320  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
14:35:12 321  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 322  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
14:35:12 323  WHEN CAN_NOT_CREATE_LICENSE THEN
14:35:12 324  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 325  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
14:35:12 326  WHEN BAD_GROUP_ID THEN
14:35:12 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 328  	  SPROC_NAME, 'Bad group id');
14:35:12 329  WHEN CAN_NOT_CREATE_NOTE THEN
14:35:12 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 331  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:35:12 332  WHEN OTHERS THEN
14:35:12 333  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 334  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 335  END START_SUBSCRIPTION_CREATION;
14:35:12 336  
14:35:12 337  /******************************************************************************/
14:35:12 338  
14:35:12 339  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
14:35:12 340  	in_subscription_id    IN NUMBER,
14:35:12 341  	in_invoice_id	      IN NUMBER,
14:35:12 342  	in_instrument_type_id IN NUMBER,
14:35:12 343  	in_instrument_id      IN NUMBER,
14:35:12 344  	in_created_by	      IN VARCHAR2
14:35:12 345  ) AS
14:35:12 346  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
14:35:12 347  -- VARIABLES
14:35:12 348  var_invoice_amount     NUMBER(10, 2);
14:35:12 349  var_new_transaction_id NUMBER;
14:35:12 350  var_new_charge_id      NUMBER;
14:35:12 351  -- EXCEPTIONS
14:35:12 352  CAN_NOT_USE_FCINSTR	  EXCEPTION;
14:35:12 353  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
14:35:12 354  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
14:35:12 355  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
14:35:12 356  
14:35:12 357  EXCEPTION_MESSAGE VARCHAR2(1024);
14:35:12 358  BEGIN
14:35:12 359  
14:35:12 360  	-- Calculate invoice amount ( + discounts, taxes)
14:35:12 361  	BEGIN
14:35:12 362  	  PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(
14:35:12 363  	    in_invoice_id => in_invoice_id,
14:35:12 364  	    out_amount	  => var_invoice_amount
14:35:12 365  	  );
14:35:12 366  	  EXCEPTION
14:35:12 367  	   WHEN OTHERS THEN
14:35:12 368  	     EXCEPTION_MESSAGE := SQLERRM;
14:35:12 369  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:35:12 370  	END;
14:35:12 371  
14:35:12 372  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT
14:35:12 373  	  AND var_invoice_amount > 0 THEN
14:35:12 374  	  RAISE CAN_NOT_USE_FCINSTR;
14:35:12 375  	END IF;
14:35:12 376  
14:35:12 377  	IF var_invoice_amount = 0 THEN
14:35:12 378  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
14:35:12 379  	  PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
14:35:12 380  	    in_invoice_id		   => in_invoice_id,
14:35:12 381  	    in_updated_by		   => in_created_by,
14:35:12 382  	    in_invoice_status_id	   => GLOBAL_STATUSES_V16.INVOICE_CLOSED
14:35:12 383  	  );
14:35:12 384  	ELSE
14:35:12 385  	  -- Create transaction and charge
14:35:12 386  	  BEGIN
14:35:12 387  	    PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
14:35:12 388  	      in_transaction_id  => NULL,
14:35:12 389  	      in_status_id	 => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
14:35:12 390  	      in_amount 	 => var_invoice_amount,
14:35:12 391  	      in_created_by	 => in_created_by,
14:35:12 392  	      in_order_id	 => NULL,
14:35:12 393  	      out_transaction_id => var_new_transaction_id
14:35:12 394  	    );
14:35:12 395  	    EXCEPTION
14:35:12 396  	      WHEN OTHERS THEN
14:35:12 397  		EXCEPTION_MESSAGE := SQLERRM;
14:35:12 398  		RAISE CAN_NOT_CREATE_TRANSACTION;
14:35:12 399  	  END;
14:35:12 400  
14:35:12 401  	  BEGIN
14:35:12 402  	    PROCS_CHARGE_V16.CREATE_CHARGE(
14:35:12 403  	      in_invoice_id	    => in_invoice_id,
14:35:12 404  	      in_transaction_id     => var_new_transaction_id,
14:35:12 405  	      in_instrument_type_id => in_instrument_type_id,
14:35:12 406  	      in_instrument_id	    => in_instrument_id,
14:35:12 407  	      in_charge_amount	    => var_invoice_amount,
14:35:12 408  	      in_created_by	    => in_created_by,
14:35:12 409  	      in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
14:35:12 410  	      out_charge_id	    => var_new_charge_id
14:35:12 411  	    );
14:35:12 412  	    EXCEPTION
14:35:12 413  	      WHEN OTHERS THEN
14:35:12 414  		EXCEPTION_MESSAGE := SQLERRM;
14:35:12 415  		RAISE CAN_NOT_CREATE_CHARGE;
14:35:12 416  	  END;
14:35:12 417  	END IF;
14:35:12 418  
14:35:12 419  EXCEPTION
14:35:12 420  WHEN CAN_NOT_USE_FCINSTR THEN
14:35:12 421  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 422  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
14:35:12 423  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:35:12 424  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 425  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
14:35:12 426  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:35:12 427  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 428  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:35:12 429  WHEN CAN_NOT_CREATE_CHARGE THEN
14:35:12 430  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 431  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:35:12 432  WHEN OTHERS THEN
14:35:12 433  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 434  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 435  END FINALIZE_SUBSCRIPTION_CREATION;
14:35:12 436  
14:35:12 437  /******************************************************************************/
14:35:12 438  
14:35:12 439  PROCEDURE SUSPEND_SUBSCRIPTION(
14:35:12 440  /*
14:35:12 441  Throws exceptions:
14:35:12 442  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 443  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 444  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 445  */
14:35:12 446  	  in_subs_id	IN NUMBER,
14:35:12 447  	  in_updated_by IN VARCHAR2
14:35:12 448  ) AS
14:35:12 449  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
14:35:12 450  var_subscription_status_id  NUMBER;
14:35:12 451  var_license_id		  NUMBER;
14:35:12 452  var_offer_id		  NUMBER;
14:35:12 453  var_license_start_date	  DATE;
14:35:12 454  var_license_end_date	  DATE;
14:35:12 455  
14:35:12 456  var_entitlement_dupration   VARCHAR2(30);
14:35:12 457  var_d_entitlement_dupration NUMBER;
14:35:12 458  
14:35:12 459  var_ym_interval INTERVAL YEAR TO MONTH;
14:35:12 460  var_ds_interval INTERVAL DAY(3) TO SECOND;
14:35:12 461  
14:35:12 462  -- EXCEPTIONS
14:35:12 463  BAD_SUBSCRIPTION_ID     EXCEPTION;
14:35:12 464  BAD_SUBSCRIPTION_STATUS EXCEPTION;
14:35:12 465  NO_LICENSE_FOUND	      EXCEPTION;
14:35:12 466  NO_OFFER_FOUND	      EXCEPTION;
14:35:12 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:35:12 468  BEGIN
14:35:12 469  	-- TODO: Finish this prcedure (in Phase II)
14:35:12 470  
14:35:12 471  	-- Get subscription by id. FAULT if no such subscription.
14:35:12 472  	-- begin TX
14:35:12 473  	--   Get for update associated license (subscription.license_id). FAULT if not found.
14:35:12 474  	--   Set status to PROCESSED.
14:35:12 475  	--   updated record.
14:35:12 476  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
14:35:12 477  	--   new subscription status is SUSPENDED.
14:35:12 478  	--   suspend_date is now.
14:35:12 479  	--   update subscription record.
14:35:12 480  	-- end TX
14:35:12 481  
14:35:12 482  	BEGIN
14:35:12 483  	  SELECT
14:35:12 484  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
14:35:12 485  	  FROM
14:35:12 486  	    SUBSCRIPTION
14:35:12 487  	  WHERE
14:35:12 488  	    SUBSCRIPTION.ID = in_subs_id;
14:35:12 489  	  EXCEPTION
14:35:12 490  	  WHEN NO_DATA_FOUND THEN
14:35:12 491  	    RAISE BAD_SUBSCRIPTION_ID;
14:35:12 492  	END;
14:35:12 493  
14:35:12 494  	IF var_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE THEN
14:35:12 495  	  RAISE BAD_SUBSCRIPTION_STATUS;
14:35:12 496  	END IF;
14:35:12 497  
14:35:12 498  	BEGIN
14:35:12 499  	  SELECT
14:35:12 500  	    LICENSE.ID,
14:35:12 501  	    LICENSE.OFFER_ID,
14:35:12 502  	    LICENSE.START_DATE
14:35:12 503  	    into
14:35:12 504  	    var_license_id,
14:35:12 505  	    var_offer_id,
14:35:12 506  	    var_license_start_date
14:35:12 507  	  FROM
14:35:12 508  	    LICENSE
14:35:12 509  	  WHERE
14:35:12 510  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
14:35:12 511  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE;
14:35:12 512  	  EXCEPTION
14:35:12 513  	  WHEN NO_DATA_FOUND THEN
14:35:12 514  	    RAISE NO_LICENSE_FOUND;
14:35:12 515  	END;
14:35:12 516  
14:35:12 517  	PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 518  	  in_license_id        => var_license_id,
14:35:12 519  	  in_updated_by        => in_updated_by,
14:35:12 520  	  in_license_status_id => GLOBAL_STATUSES_V16.LICENSE_CLOSED
14:35:12 521  	);
14:35:12 522  
14:35:12 523  	BEGIN
14:35:12 524  	  SELECT
14:35:12 525  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
14:35:12 526  	  FROM
14:35:12 527  	    OFFER
14:35:12 528  	  WHERE
14:35:12 529  	    OFFER.ID = var_offer_id;
14:35:12 530  	  EXCEPTION
14:35:12 531  	  WHEN NO_DATA_FOUND THEN
14:35:12 532  	    RAISE NO_OFFER_FOUND;
14:35:12 533  	END;
14:35:12 534  
14:35:12 535  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
14:35:12 536  	var_ds_interval := substr(var_entitlement_dupration, 4);
14:35:12 537  
14:35:12 538  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
14:35:12 539  
14:35:12 540  	var_d_entitlement_dupration := var_license_end_date - current_date;
14:35:12 541  
14:35:12 542  	PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
14:35:12 543  	  in_subscription_id	       => in_subs_id,
14:35:12 544  	  in_updated_by 	       => in_updated_by,
14:35:12 545  	  in_suspend_date	       => SYSDATE,
14:35:12 546  	  in_subscription_status_id    => GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED,
14:35:12 547  	  in_days_remainning_ajustment => var_d_entitlement_dupration
14:35:12 548  	);
14:35:12 549  
14:35:12 550  EXCEPTION
14:35:12 551  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 552  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 553  	  SPROC_NAME, 'No such subscription');
14:35:12 554  WHEN BAD_SUBSCRIPTION_STATUS THEN
14:35:12 555  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 556  	  SPROC_NAME, 'Subscription is not active');
14:35:12 557  WHEN NO_LICENSE_FOUND THEN
14:35:12 558  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 559  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
14:35:12 560  WHEN NO_OFFER_FOUND THEN
14:35:12 561  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 562  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
14:35:12 563  WHEN OTHERS THEN
14:35:12 564  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 565  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 566  END SUSPEND_SUBSCRIPTION;
14:35:12 567  
14:35:12 568  /******************************************************************************/
14:35:12 569  
14:35:12 570  PROCEDURE REACTIVATE_SUBSCRIPTION (
14:35:12 571  	in_subscription_id IN  NUMBER,
14:35:12 572  	in_updated_by	   IN  VARCHAR2
14:35:12 573  ) AS
14:35:12 574  BEGIN
14:35:12 575  	-- TODO: finish this function (in Phase II)
14:35:12 576  	NULL;
14:35:12 577  END REACTIVATE_SUBSCRIPTION;
14:35:12 578  
14:35:12 579  /******************************************************************************/
14:35:12 580  
14:35:12 581  PROCEDURE GET_SUBSCRIPTION_INFO (
14:35:12 582  /*
14:35:12 583  Throws exceptions:
14:35:12 584  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 585  */
14:35:12 586  	  in_subscription_id  IN  NUMBER,
14:35:12 587  	  out_result_set      OUT SYS_REFCURSOR
14:35:12 588  ) AS
14:35:12 589  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
14:35:12 590  -- VARIABLES
14:35:12 591  temp_subscription_id NUMBER;
14:35:12 592  -- EXCEPTIONS
14:35:12 593  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 594  BEGIN
14:35:12 595  	-- Find subscription by id
14:35:12 596  	-- Return its details
14:35:12 597  
14:35:12 598  	BEGIN
14:35:12 599  	  SELECT
14:35:12 600  	    SUBSCRIPTION.ID into temp_subscription_id
14:35:12 601  	  FROM
14:35:12 602  	    SUBSCRIPTION
14:35:12 603  	  WHERE
14:35:12 604  	    SUBSCRIPTION.ID = in_subscription_id;
14:35:12 605  	  EXCEPTION
14:35:12 606  	    WHEN NO_DATA_FOUND THEN
14:35:12 607  	      RAISE BAD_SUBSCRIPTION_ID;
14:35:12 608  	END;
14:35:12 609  
14:35:12 610  	OPEN out_result_set FOR
14:35:12 611  	SELECT
14:35:12 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
14:35:12 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
14:35:12 614  	  SUBSCRIPTION.PURCHASE_DATE,
14:35:12 615  	  SUBSCRIPTION.SUSPEND_DATE,
14:35:12 616  	  SUBSCRIPTION.REACTIVATION_DATE,
14:35:12 617  	  SUBSCRIPTION.CANCELLATION_DATE,
14:35:12 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
14:35:12 619  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
14:35:12 620  	  OFFER_CHAIN.NAME,
14:35:12 621  	  OFFER_CHAIN.DESCRIPTION,
14:35:12 622  	  OFFER_CHAIN.PRODUCT_URI,
14:35:12 623  	  SUBSCRIPTION.INSTRUMENT_ID,
14:35:12 624  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
14:35:12 625  	  --PROCS_OFFER_CHAIN_V16.CALCULATE_OFFER_CHAIN_END_DATE(OFFER_CHAIN.ID, SUBSCRIPTION.PURCHASE_DATE) as "END_DATE",
14:35:12 626  	  PROCS_SUBSCRIPTION_V16.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
14:35:12 627  	  PROCS_SUBSCRIPTION_V16.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
14:35:12 628  	  PROCS_SUBSCRIPTION_V16.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
14:35:12 629  	  PROCS_SUBSCRIPTION_V16.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
14:35:12 630  	  (
14:35:12 631  	    SELECT
14:35:12 632  	      ACCOUNT.GROUP_ID
14:35:12 633  	      FROM ACCOUNT
14:35:12 634  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
14:35:12 635  	  ) as "GROUP_ID",
14:35:12 636  	  (
14:35:12 637  	    SELECT
14:35:12 638  	      MAX(ENTITLEMENT_END_DATE)
14:35:12 639  	      FROM LICENSE
14:35:12 640  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 641  	  )
14:35:12 642  	  as "ENT_END_DATE",
14:35:12 643  	  (
14:35:12 644  	    SELECT
14:35:12 645  	      MIN(START_DATE)
14:35:12 646  	      FROM LICENSE
14:35:12 647  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 648  	  )
14:35:12 649  	  as "ENT_START_DATE",
14:35:12 650  	  PROCS_SUBSCRIPTION_V16.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
14:35:12 651  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
14:35:12 652  	  GROUP_ACCOUNT.ID GA_ID,
14:35:12 653  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
14:35:12 654  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
14:35:12 655  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
14:35:12 656  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
14:35:12 657  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
14:35:12 658  	  GROUP_ACCOUNT.PHONE GA_PHONE,
14:35:12 659  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
14:35:12 660  	  GROUP_ACCOUNT.SEATS GA_SEATS,
14:35:12 661  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
14:35:12 662  	  GROUP_ACCOUNT.IP GA_IP,
14:35:12 663  	  PROCS_SUBSCRIPTION_V16.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code
14:35:12 664  	FROM
14:35:12 665  	  SUBSCRIPTION
14:35:12 666  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 667  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
14:35:12 668  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
14:35:12 669  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
14:35:12 670  	WHERE
14:35:12 671  	  SUBSCRIPTION.ID = in_subscription_id;
14:35:12 672  
14:35:12 673  EXCEPTION
14:35:12 674  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 675  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 676  	  SPROC_NAME, 'No such subscription');
14:35:12 677  WHEN OTHERS THEN
14:35:12 678  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 680  END GET_SUBSCRIPTION_INFO;
14:35:12 681  
14:35:12 682  /******************************************************************************/
14:35:12 683  
14:35:12 684  PROCEDURE GET_SUBSCRIPTION_INVOICES (
14:35:12 685  /*
14:35:12 686  Throws exceptions:
14:35:12 687  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 688  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 689  */
14:35:12 690  	in_subscription_id  IN	NUMBER,
14:35:12 691  	out_result_set	    OUT SYS_REFCURSOR
14:35:12 692  ) AS
14:35:12 693  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
14:35:12 694  temp_subscription_id NUMBER;
14:35:12 695  BEGIN
14:35:12 696  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
14:35:12 697  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
14:35:12 698  	--   for each license
14:35:12 699  	--     get associated invoice
14:35:12 700  	--     add to results list
14:35:12 701  	--   end loop
14:35:12 702  	-- end
14:35:12 703  
14:35:12 704  	SELECT
14:35:12 705  	  SUBSCRIPTION.ID into temp_subscription_id
14:35:12 706  	FROM
14:35:12 707  	  SUBSCRIPTION
14:35:12 708  	WHERE
14:35:12 709  	  SUBSCRIPTION.ID = in_subscription_id;
14:35:12 710  
14:35:12 711  	OPEN out_result_set FOR
14:35:12 712  	SELECT
14:35:12 713  	  INVOICE.ID,
14:35:12 714  	  INVOICE.INVOICE_STATUS_ID,
14:35:12 715  	  INVOICE.CREATE_DATE,
14:35:12 716  	  INVOICE.CREATED_BY,
14:35:12 717  	  INVOICE.UPDATE_DATE,
14:35:12 718  	  INVOICE.UPDATED_BY,
14:35:12 719  	  INVOICE.TAX_EXEMPT_ID
14:35:12 720  	FROM
14:35:12 721  	  LICENSE
14:35:12 722  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:35:12 723  	WHERE
14:35:12 724  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
14:35:12 725  
14:35:12 726  EXCEPTION
14:35:12 727  WHEN NO_DATA_FOUND THEN
14:35:12 728  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 729  	  SPROC_NAME, 'Could not find subscription with given ID');
14:35:12 730  WHEN OTHERS THEN
14:35:12 731  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 732  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 733  END GET_SUBSCRIPTION_INVOICES;
14:35:12 734  
14:35:12 735  /******************************************************************************/
14:35:12 736  
14:35:12 737  PROCEDURE GET_SUBSCRIPTION_NOTES (
14:35:12 738  /*
14:35:12 739  Throws exceptions:
14:35:12 740  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 741  */
14:35:12 742  	in_subscription_id  IN	NUMBER,
14:35:12 743  	out_result_set	    OUT SYS_REFCURSOR
14:35:12 744  ) AS
14:35:12 745  -- VARIABLES
14:35:12 746  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
14:35:12 747  temp_subscription_id NUMBER;
14:35:12 748  -- EXCEPTIONS
14:35:12 749  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 750  BEGIN
14:35:12 751  
14:35:12 752  	-- Check that subscription exists
14:35:12 753  	BEGIN
14:35:12 754  	  SELECT
14:35:12 755  	    SUBSCRIPTION.ID into temp_subscription_id
14:35:12 756  	  FROM
14:35:12 757  	    SUBSCRIPTION
14:35:12 758  	  WHERE
14:35:12 759  	    SUBSCRIPTION.ID = in_subscription_id;
14:35:12 760  	  EXCEPTION
14:35:12 761  	    WHEN NO_DATA_FOUND THEN
14:35:12 762  	      RAISE BAD_SUBSCRIPTION_ID;
14:35:12 763  	END;
14:35:12 764  
14:35:12 765  	OPEN out_result_set FOR
14:35:12 766  	SELECT
14:35:12 767  	  SUBSCRIPTION_NOTE.NOTE,
14:35:12 768  	  SUBSCRIPTION_NOTE.CREATED_BY,
14:35:12 769  	  SUBSCRIPTION_NOTE.CREATE_DATE
14:35:12 770  	FROM
14:35:12 771  	  SUBSCRIPTION_NOTE
14:35:12 772  	WHERE
14:35:12 773  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
14:35:12 774  	ORDER BY
14:35:12 775  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
14:35:12 776  
14:35:12 777  EXCEPTION
14:35:12 778  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 779  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 780  	  SPROC_NAME, 'No such subscription');
14:35:12 781  WHEN OTHERS THEN
14:35:12 782  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 784  END GET_SUBSCRIPTION_NOTES;
14:35:12 785  
14:35:12 786  /******************************************************************************/
14:35:12 787  
14:35:12 788  PROCEDURE ANNOTATE_SUBSCRIPTION (
14:35:12 789  /*
14:35:12 790  Throws exceptions:
14:35:12 791  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 792  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 793  */
14:35:12 794  	in_subscription_id IN  NUMBER,
14:35:12 795  	in_agent_id	   IN  NUMBER,
14:35:12 796  	in_note 	   IN  VARCHAR2,
14:35:12 797  	in_created_by	   IN  VARCHAR2
14:35:12 798  ) AS
14:35:12 799  -- VARIABLES
14:35:12 800  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
14:35:12 801  temp_subscription_id     NUMBER;
14:35:12 802  var_subscription_note_id NUMBER;
14:35:12 803  -- EXCEPTIONS
14:35:12 804  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 805  BEGIN
14:35:12 806  
14:35:12 807  	-- Check that subscription exists
14:35:12 808  	BEGIN
14:35:12 809  	  SELECT
14:35:12 810  	    SUBSCRIPTION.ID into temp_subscription_id
14:35:12 811  	  FROM
14:35:12 812  	    SUBSCRIPTION
14:35:12 813  	  WHERE
14:35:12 814  	    SUBSCRIPTION.ID = in_subscription_id;
14:35:12 815  	  EXCEPTION
14:35:12 816  	    WHEN NO_DATA_FOUND THEN
14:35:12 817  	      RAISE BAD_SUBSCRIPTION_ID;
14:35:12 818  	END;
14:35:12 819  
14:35:12 820  	PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION_NOTE(
14:35:12 821  	  inout_subscription_note_id => var_subscription_note_id,
14:35:12 822  	  in_agent_id		     => in_agent_id,
14:35:12 823  	  in_subscription_id	     => in_subscription_id,
14:35:12 824  	  in_note		     => in_note,
14:35:12 825  	  in_created_by 	     => in_created_by
14:35:12 826  	);
14:35:12 827  
14:35:12 828  EXCEPTION
14:35:12 829  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 830  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 831  	  SPROC_NAME, 'No such subscription');
14:35:12 832  WHEN OTHERS THEN
14:35:12 833  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 834  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 835  END ANNOTATE_SUBSCRIPTION;
14:35:12 836  
14:35:12 837  /******************************************************************************/
14:35:12 838  
14:35:12 839  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
14:35:12 840  /*
14:35:12 841  Throws exceptions:
14:35:12 842  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 843  */
14:35:12 844  	out_result_set OUT SYS_REFCURSOR
14:35:12 845  ) AS
14:35:12 846  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCELLING_SSCRPTN_REASONS';
14:35:12 847  BEGIN
14:35:12 848  
14:35:12 849  	OPEN out_result_set FOR
14:35:12 850  	SELECT
14:35:12 851  	  SUBSCRIPTION_CANCEL_REASON.ID,
14:35:12 852  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
14:35:12 853  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION
14:35:12 854  	FROM
14:35:12 855  	  SUBSCRIPTION_CANCEL_REASON
14:35:12 856  	WHERE
14:35:12 857  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCR_CANC_REASON_ACTIVE;
14:35:12 858  
14:35:12 859  EXCEPTION
14:35:12 860  WHEN OTHERS THEN
14:35:12 861  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 862  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 863  END GET_CANCELLING_SSCRPTN_REASONS;
14:35:12 864  
14:35:12 865  /******************************************************************************/
14:35:12 866  
14:35:12 867  FUNCTION GET_RENEWAL_DATE (
14:35:12 868  /*
14:35:12 869  Throws exceptions:
14:35:12 870  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 871  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 872  */
14:35:12 873  	in_subscription_id in NUMBER
14:35:12 874  ) RETURN DATE AS
14:35:12 875  -- VARIABLES
14:35:12 876  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
14:35:12 877  var_subscription_status NUMBER;
14:35:12 878  var_licenses_count      NUMBER;
14:35:12 879  var_license_end_date    DATE;
14:35:12 880  var_last_offer_id       NUMBER;
14:35:12 881  var_offer_chain_id      NUMBER;
14:35:12 882  var_last_license_id     NUMBER;
14:35:12 883  var_current_offer_index NUMBER;
14:35:12 884  var_current_offer_recurr_num NUMBER;
14:35:12 885  var_offer_recurr_num    NUMBER;
14:35:12 886  -- EXCEPTIONS
14:35:12 887  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 888  NO_LICENSES_FOUND EXCEPTION;
14:35:12 889  BEGIN
14:35:12 890  
14:35:12 891  	-- Get subscription id and offer chain id
14:35:12 892  	BEGIN
14:35:12 893  	  SELECT
14:35:12 894  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
14:35:12 895  	    SUBSCRIPTION.OFFER_CHAIN_ID
14:35:12 896  	    into
14:35:12 897  	    var_subscription_status,
14:35:12 898  	    var_offer_chain_id
14:35:12 899  	  FROM
14:35:12 900  	    SUBSCRIPTION
14:35:12 901  	  WHERE
14:35:12 902  	    SUBSCRIPTION.ID = in_subscription_id;
14:35:12 903  	  EXCEPTION
14:35:12 904  	    WHEN NO_DATA_FOUND THEN
14:35:12 905  	      RAISE BAD_SUBSCRIPTION_ID;
14:35:12 906  	END;
14:35:12 907  
14:35:12 908  	IF var_subscription_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE THEN
14:35:12 909  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
14:35:12 910  	  -- AND var_subscription_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
14:35:12 911  	  RETURN NULL;
14:35:12 912  	END IF;
14:35:12 913  
14:35:12 914  	BEGIN
14:35:12 915  	  SELECT
14:35:12 916  	    LICENSE_ID,
14:35:12 917  	    END_DATE,
14:35:12 918  	    OFFER_ID,
14:35:12 919  	    CURRENT_OFFER_INDEX,
14:35:12 920  	    CURRENT_OFFER_RECURR_NUM
14:35:12 921  	    into
14:35:12 922  	    var_last_license_id,
14:35:12 923  	    var_license_end_date,
14:35:12 924  	    var_last_offer_id,
14:35:12 925  	    var_current_offer_index,
14:35:12 926  	    var_current_offer_recurr_num
14:35:12 927  	  FROM
14:35:12 928  	    (
14:35:12 929  	      SELECT
14:35:12 930  		LICENSE.ID as "LICENSE_ID",
14:35:12 931  		LICENSE.END_DATE,
14:35:12 932  		LICENSE.OFFER_ID,
14:35:12 933  		LICENSE.CURRENT_OFFER_INDEX,
14:35:12 934  		LICENSE.CURRENT_OFFER_RECURR_NUM
14:35:12 935  	      FROM
14:35:12 936  		LICENSE
14:35:12 937  	      WHERE
14:35:12 938  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 939  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:35:12 940  	      ORDER BY END_DATE DESC
14:35:12 941  	    )
14:35:12 942  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
14:35:12 943  	  WHERE
14:35:12 944  	    ROWNUM <= 1;
14:35:12 945  
14:35:12 946  	  EXCEPTION
14:35:12 947  	    WHEN NO_DATA_FOUND THEN
14:35:12 948  	      -- RAISE NO_LICENSES_FOUND;
14:35:12 949  	      RETURN NULL;
14:35:12 950  	END;
14:35:12 951  
14:35:12 952  	SELECT
14:35:12 953  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
14:35:12 954  	FROM
14:35:12 955  	  OFFER_OFFER_CHAIN
14:35:12 956  	WHERE
14:35:12 957  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:35:12 958  	  AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
14:35:12 959  
14:35:12 960  	IF PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
14:35:12 961  	  AND var_offer_recurr_num = var_current_offer_recurr_num THEN
14:35:12 962  	  -- There is no next offer for this subscription
14:35:12 963  	  RETURN NULL;
14:35:12 964  	END IF;
14:35:12 965  
14:35:12 966  	RETURN var_license_end_date;
14:35:12 967  
14:35:12 968  EXCEPTION
14:35:12 969  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 970  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 971  	  SPROC_NAME, 'No such subscription');
14:35:12 972  WHEN NO_LICENSES_FOUND THEN
14:35:12 973  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 974  	  SPROC_NAME, 'No licenses found');
14:35:12 975  WHEN OTHERS THEN
14:35:12 976  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 977  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 978  END GET_RENEWAL_DATE;
14:35:12 979  
14:35:12 980  /******************************************************************************/
14:35:12 981  
14:35:12 982  FUNCTION GET_RECENT_CHARGE (
14:35:12 983  /*
14:35:12 984  Throws exceptions:
14:35:12 985  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 986  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 987  */
14:35:12 988  	in_subscription_id IN NUMBER
14:35:12 989  ) RETURN NUMBER AS
14:35:12 990  -- VARIABLES
14:35:12 991  SPROC_NAME	   CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
14:35:12 992  temp_subscription_id NUMBER;
14:35:12 993  var_recent_charge    NUMBER(10,2);
14:35:12 994  
14:35:12 995  -- EXCEPTIONS
14:35:12 996  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 997  BEGIN
14:35:12 998  
14:35:12 999  	BEGIN
14:35:12 1000  	   SELECT
14:35:12 1001  	     SUBSCRIPTION.ID into temp_subscription_id
14:35:12 1002  	   FROM
14:35:12 1003  	     SUBSCRIPTION
14:35:12 1004  	   WHERE
14:35:12 1005  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1006  	   EXCEPTION
14:35:12 1007  	     WHEN NO_DATA_FOUND THEN
14:35:12 1008  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 1009  	 END;
14:35:12 1010  
14:35:12 1011  	 BEGIN
14:35:12 1012  	   SELECT
14:35:12 1013  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
14:35:12 1014  	   FROM
14:35:12 1015  	     LICENSE
14:35:12 1016  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 1017  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:35:12 1018  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
14:35:12 1019  	   WHERE
14:35:12 1020  	     -- TODO: Review
14:35:12 1021  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_PROCESSED
14:35:12 1022  	     -- AND
14:35:12 1023  	     SUBSCRIPTION.ID = in_subscription_id
14:35:12 1024  	     AND CHARGE.CHARGE_AMOUNT >= 0
14:35:12 1025  	     AND ROWNUM <= 1
14:35:12 1026  	   ORDER BY
14:35:12 1027  	     LICENSE.ID ASC, CHARGE.ID DESC;
14:35:12 1028  	   EXCEPTION
14:35:12 1029  	     WHEN NO_DATA_FOUND THEN
14:35:12 1030  	       var_recent_charge := 0;
14:35:12 1031  	 END;
14:35:12 1032  
14:35:12 1033  	 RETURN var_recent_charge;
14:35:12 1034  
14:35:12 1035  EXCEPTION
14:35:12 1036  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 1037  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1038  	   SPROC_NAME, 'No such subscription');
14:35:12 1039  WHEN OTHERS THEN
14:35:12 1040  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1041  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1042  END GET_RECENT_CHARGE;
14:35:12 1043  
14:35:12 1044  /******************************************************************************/
14:35:12 1045  
14:35:12 1046  FUNCTION GET_BILLING_CYCLE (
14:35:12 1047  	 in_subscription_id IN NUMBER
14:35:12 1048  ) RETURN VARCHAR2 AS
14:35:12 1049  -- VARIABLES
14:35:12 1050  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
14:35:12 1051  temp_subscription_id NUMBER;
14:35:12 1052  var_offer_duration   VARCHAR2(30);
14:35:12 1053  
14:35:12 1054  -- EXCEPTIONS
14:35:12 1055  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 1056  BEGIN
14:35:12 1057  
14:35:12 1058  	 BEGIN
14:35:12 1059  	   SELECT
14:35:12 1060  	     SUBSCRIPTION.ID into temp_subscription_id
14:35:12 1061  	   FROM
14:35:12 1062  	     SUBSCRIPTION
14:35:12 1063  	   WHERE
14:35:12 1064  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1065  	   EXCEPTION
14:35:12 1066  	     WHEN NO_DATA_FOUND THEN
14:35:12 1067  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 1068  	 END;
14:35:12 1069  
14:35:12 1070  	 SELECT
14:35:12 1071  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
14:35:12 1072  	 FROM
14:35:12 1073  	   LICENSE
14:35:12 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 1075  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
14:35:12 1076  	 WHERE
14:35:12 1077  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_PROCESSED
14:35:12 1078  	   --AND
14:35:12 1079  	   SUBSCRIPTION.ID = in_subscription_id
14:35:12 1080  	   AND ROWNUM <= 1
14:35:12 1081  	 ORDER BY
14:35:12 1082  	   LICENSE.ID ASC;
14:35:12 1083  
14:35:12 1084  	 RETURN var_offer_duration;
14:35:12 1085  
14:35:12 1086  EXCEPTION
14:35:12 1087  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 1088  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1089  	   SPROC_NAME, 'No such subscription');
14:35:12 1090  WHEN OTHERS THEN
14:35:12 1091  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1092  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1093  END GET_BILLING_CYCLE;
14:35:12 1094  
14:35:12 1095  /******************************************************************************/
14:35:12 1096  
14:35:12 1097  PROCEDURE REFUND_SUBSCRIPTION (
14:35:12 1098  /*
14:35:12 1099  Throws exceptions:
14:35:12 1100  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1101  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1102  */
14:35:12 1103  	 in_subscription_id IN NUMBER,
14:35:12 1104  	 in_invoice_id	    IN NUMBER,
14:35:12 1105  	 in_refund_amount   IN NUMBER,
14:35:12 1106  	 in_note	    IN VARCHAR2,
14:35:12 1107  	 in_created_by	    IN VARCHAR2,
14:35:12 1108  	 out_charge_id	    OUT NUMBER
14:35:12 1109  ) AS
14:35:12 1110  -- VARIABLES
14:35:12 1111  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
14:35:12 1112  var_invoice_status_id  NUMBER;
14:35:12 1113  var_account_id	      NUMBER;
14:35:12 1114  var_account_status_id  NUMBER;
14:35:12 1115  var_new_transaction_id NUMBER;
14:35:12 1116  var_instrument_type_id NUMBER;
14:35:12 1117  var_instrument_id      NUMBER;
14:35:12 1118  var_new_charge_id      NUMBER;
14:35:12 1119  var_invoice_amount     NUMBER(10,2);
14:35:12 1120  var_refunds_before     NUMBER(10,2);
14:35:12 1121  var_charges_amount     NUMBER(10,2);
14:35:12 1122  -- EXCEPTIONS
14:35:12 1123  BAD_SUBSCRIPTION_ID	     EXCEPTION;
14:35:12 1124  ACCOUNT_IS_FROZEN	     EXCEPTION;
14:35:12 1125  BAD_INVOICE_ID		     EXCEPTION;
14:35:12 1126  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
14:35:12 1127  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
14:35:12 1128  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
14:35:12 1129  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
14:35:12 1130  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
14:35:12 1131  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
14:35:12 1132  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
14:35:12 1133  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
14:35:12 1134  EXCEPTION_MESSAGE	      VARCHAR2(1024);
14:35:12 1135  BEGIN
14:35:12 1136  
14:35:12 1137  	 BEGIN
14:35:12 1138  	   SELECT
14:35:12 1139  	     SUBSCRIPTION.INSTRUMENT_ID,
14:35:12 1140  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
14:35:12 1141  	     SUBSCRIPTION.ACCOUNT_ID
14:35:12 1142  	     into
14:35:12 1143  	     var_instrument_id,
14:35:12 1144  	     var_instrument_type_id,
14:35:12 1145  	     var_account_id
14:35:12 1146  	   FROM
14:35:12 1147  	     SUBSCRIPTION
14:35:12 1148  	   WHERE
14:35:12 1149  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1150  	   EXCEPTION
14:35:12 1151  	     WHEN NO_DATA_FOUND THEN
14:35:12 1152  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 1153  	 END;
14:35:12 1154  
14:35:12 1155  	 -- Check account status. It should not to be frozen
14:35:12 1156  	 SELECT
14:35:12 1157  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
14:35:12 1158  	 FROM
14:35:12 1159  	   ACCOUNT
14:35:12 1160  	 WHERE
14:35:12 1161  	   ACCOUNT.ID = var_account_id;
14:35:12 1162  
14:35:12 1163  	 IF var_account_status_id = GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
14:35:12 1164  	   RAISE ACCOUNT_IS_FROZEN;
14:35:12 1165  	 END IF;
14:35:12 1166  
14:35:12 1167  	 BEGIN
14:35:12 1168  	   SELECT
14:35:12 1169  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
14:35:12 1170  	   FROM
14:35:12 1171  	     INVOICE
14:35:12 1172  	   WHERE
14:35:12 1173  	     INVOICE.ID = in_invoice_id;
14:35:12 1174  	   EXCEPTION
14:35:12 1175  	     WHEN NO_DATA_FOUND THEN
14:35:12 1176  	       RAISE BAD_INVOICE_ID;
14:35:12 1177  	 END;
14:35:12 1178  
14:35:12 1179  	 IF var_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
14:35:12 1180  	   RAISE INVOICE_IS_NOT_CLOSED;
14:35:12 1181  	 END IF;
14:35:12 1182  
14:35:12 1183  	 BEGIN
14:35:12 1184  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
14:35:12 1185  	     in_invoice_id => in_invoice_id,
14:35:12 1186  	     out_amount    => var_invoice_amount
14:35:12 1187  	   );
14:35:12 1188  	   EXCEPTION
14:35:12 1189  	     WHEN OTHERS THEN
14:35:12 1190  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1191  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:35:12 1192  	 END;
14:35:12 1193  
14:35:12 1194  	 IF ( in_refund_amount > var_invoice_amount ) THEN
14:35:12 1195  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
14:35:12 1196  	 END IF;
14:35:12 1197  
14:35:12 1198  	 SELECT /*+ STAR_TRANSFORMATION */
14:35:12 1199  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
14:35:12 1200  	 FROM
14:35:12 1201  	   CHARGE
14:35:12 1202  	 WHERE
14:35:12 1203  	   CHARGE.INVOICE_ID = in_invoice_id
14:35:12 1204  	   AND (
14:35:12 1205  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
14:35:12 1206  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
14:35:12 1207  	   )
14:35:12 1208  	   AND CHARGE.CHARGE_AMOUNT < 0;
14:35:12 1209  
14:35:12 1210  	 -- Refunds are negative
14:35:12 1211  	 var_refunds_before := -var_refunds_before;
14:35:12 1212  
14:35:12 1213  	 var_charges_amount := 0;
14:35:12 1214  
14:35:12 1215  	 FOR f_processed_charges IN (
14:35:12 1216  	   SELECT
14:35:12 1217  	     CHARGE.CHARGE_AMOUNT
14:35:12 1218  	   FROM
14:35:12 1219  	     CHARGE
14:35:12 1220  	   WHERE
14:35:12 1221  	     CHARGE.INVOICE_ID = in_invoice_id
14:35:12 1222  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
14:35:12 1223  	 )
14:35:12 1224  	 LOOP
14:35:12 1225  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
14:35:12 1226  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
14:35:12 1227  	   END IF;
14:35:12 1228  	 END LOOP;
14:35:12 1229  
14:35:12 1230  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
14:35:12 1231  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
14:35:12 1232  	 END IF;
14:35:12 1233  
14:35:12 1234  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
14:35:12 1235  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
14:35:12 1236  	 END IF;
14:35:12 1237  
14:35:12 1238  	 BEGIN
14:35:12 1239  	   PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
14:35:12 1240  	     in_transaction_id	=> NULL,
14:35:12 1241  	     in_status_id	=> GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
14:35:12 1242  	     in_amount		=> -in_refund_amount,
14:35:12 1243  	     in_created_by	=> in_created_by,
14:35:12 1244  	     in_order_id	=> NULL,
14:35:12 1245  	     in_is_refund	=> GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 1246  	     out_transaction_id => var_new_transaction_id
14:35:12 1247  	   );
14:35:12 1248  	   EXCEPTION
14:35:12 1249  	     WHEN OTHERS THEN
14:35:12 1250  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1251  	       RAISE CAN_NOT_CREATE_TRANSACTION;
14:35:12 1252  	 END;
14:35:12 1253  
14:35:12 1254  	 BEGIN
14:35:12 1255  	   PROCS_CHARGE_V16.CREATE_CHARGE(
14:35:12 1256  	     in_invoice_id	   => in_invoice_id,
14:35:12 1257  	     in_transaction_id	   => var_new_transaction_id,
14:35:12 1258  	     in_instrument_type_id => var_instrument_type_id,
14:35:12 1259  	     in_instrument_id	   => var_instrument_id,
14:35:12 1260  	     in_charge_amount	   => -in_refund_amount,
14:35:12 1261  	     in_created_by	   => in_created_by,
14:35:12 1262  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
14:35:12 1263  	     out_charge_id	   => var_new_charge_id
14:35:12 1264  	   );
14:35:12 1265  	   EXCEPTION
14:35:12 1266  	     WHEN OTHERS THEN
14:35:12 1267  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1268  	       RAISE CAN_NOT_CREATE_CHARGE;
14:35:12 1269  	 END;
14:35:12 1270  
14:35:12 1271  	 IF in_note IS NOT NULL THEN
14:35:12 1272  	   BEGIN
14:35:12 1273  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
14:35:12 1274  	       in_subscription_id => in_subscription_id,
14:35:12 1275  	       in_agent_id	  => 0, -- AGENT_ID??
14:35:12 1276  	       in_note		  => in_note,
14:35:12 1277  	       in_created_by	  => in_created_by
14:35:12 1278  	     );
14:35:12 1279  	     EXCEPTION
14:35:12 1280  	       WHEN OTHERS THEN
14:35:12 1281  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1282  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
14:35:12 1283  	   END;
14:35:12 1284  	 END IF;
14:35:12 1285  
14:35:12 1286  	 out_charge_id := var_new_charge_id;
14:35:12 1287  
14:35:12 1288  EXCEPTION
14:35:12 1289  WHEN INVOICE_IS_NOT_CLOSED THEN
14:35:12 1290  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1291  	   SPROC_NAME, 'Invoice is not closed');
14:35:12 1292  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 1293  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1294  	   SPROC_NAME, 'No such subscription');
14:35:12 1295  WHEN ACCOUNT_IS_FROZEN THEN
14:35:12 1296  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1297  	   SPROC_NAME, 'Could not refund subscription for frozen account');
14:35:12 1298  WHEN BAD_INVOICE_ID THEN
14:35:12 1299  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1300  	   SPROC_NAME, 'No such invoice');
14:35:12 1301  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:35:12 1302  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1303  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
14:35:12 1304  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
14:35:12 1305  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1306  	   SPROC_NAME, 'Refund is greater than amount');
14:35:12 1307  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
14:35:12 1308  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1309  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
14:35:12 1310  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
14:35:12 1311  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1312  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
14:35:12 1313  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:35:12 1314  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1315  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:35:12 1316  WHEN CAN_NOT_CREATE_CHARGE THEN
14:35:12 1317  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1318  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:35:12 1319  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
14:35:12 1320  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1321  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:35:12 1322  WHEN OTHERS THEN
14:35:12 1323  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1324  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1325  END REFUND_SUBSCRIPTION;
14:35:12 1326  
14:35:12 1327  /******************************************************************************/
14:35:12 1328  
14:35:12 1329  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
14:35:12 1330  /*
14:35:12 1331  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1332  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 1333  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1334  */
14:35:12 1335  	 in_subscription_id	 IN NUMBER,
14:35:12 1336  	 in_effective_start_date IN DATE,
14:35:12 1337  	 in_effective_end_date	 IN DATE,
14:35:12 1338  	 in_note		 IN VARCHAR2,
14:35:12 1339  	 in_updated_by		 IN VARCHAR2
14:35:12 1340  ) AS
14:35:12 1341  -- VARIABLES
14:35:12 1342  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
14:35:12 1343  temp_subscription_id	    NUMBER;
14:35:12 1344  var_current_license_id	    NUMBER;
14:35:12 1345  var_current_license_start_date DATE;
14:35:12 1346  var_current_license_end_date DATE;
14:35:12 1347  var_current_offer_id	    NUMBER;
14:35:12 1348  var_current_invoice_id	    NUMBER;
14:35:12 1349  var_current_date 	    DATE;
14:35:12 1350  var_current_offer_index	    NUMBER;
14:35:12 1351  var_current_offer_recurr_num NUMBER;
14:35:12 1352  var_account_tax_exempt_id    VARCHAR2(255);
14:35:12 1353  
14:35:12 1354  var_free_invoice_id NUMBER;
14:35:12 1355  var_free_license_id NUMBER;
14:35:12 1356  var_new_license_id  NUMBER;
14:35:12 1357  var_ext_license_id  NUMBER;
14:35:12 1358  -- EXCEPTIONS
14:35:12 1359  BAD_SUBSCRIPTION_ID	     EXCEPTION;
14:35:12 1360  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
14:35:12 1361  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
14:35:12 1362  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
14:35:12 1363  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
14:35:12 1364  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
14:35:12 1365  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
14:35:12 1366  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
14:35:12 1367  EXT_START_DATE_LATER_THEN_END EXCEPTION;
14:35:12 1368  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
14:35:12 1369  EXCEPTION_MESSAGE	     VARCHAR2(1024);
14:35:12 1370  BEGIN
14:35:12 1371  
14:35:12 1372  	 var_current_date := PROCS_COMMON_V16.NORMALIZE_DATE(SYSDATE);
14:35:12 1373  
14:35:12 1374  	 -- Check that subscription exists
14:35:12 1375  	 BEGIN
14:35:12 1376  	   SELECT
14:35:12 1377  	     SUBSCRIPTION.ID into temp_subscription_id
14:35:12 1378  	   FROM
14:35:12 1379  	     SUBSCRIPTION
14:35:12 1380  	   WHERE
14:35:12 1381  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1382  	   EXCEPTION
14:35:12 1383  	     WHEN NO_DATA_FOUND THEN
14:35:12 1384  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 1385  	 END;
14:35:12 1386  
14:35:12 1387  	 -- Get account tax exempt id
14:35:12 1388  	 SELECT DISTINCT
14:35:12 1389  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
14:35:12 1390  	 FROM
14:35:12 1391  	   ACCOUNT
14:35:12 1392  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:35:12 1393  	 WHERE
14:35:12 1394  	   SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1395  
14:35:12 1396  	 -- Select current data
14:35:12 1397  	 BEGIN
14:35:12 1398  	   SELECT
14:35:12 1399  	     LICENSE.ID,
14:35:12 1400  	     LICENSE.START_DATE,
14:35:12 1401  	     LICENSE.END_DATE,
14:35:12 1402  	     LICENSE.CURRENT_OFFER_INDEX,
14:35:12 1403  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
14:35:12 1404  	     OFFER.ID,
14:35:12 1405  	     INVOICE.ID
14:35:12 1406  	   INTO
14:35:12 1407  	     var_current_license_id,
14:35:12 1408  	     var_current_license_start_date,
14:35:12 1409  	     var_current_license_end_date,
14:35:12 1410  	     var_current_offer_index,
14:35:12 1411  	     var_current_offer_recurr_num,
14:35:12 1412  	     var_current_offer_id,
14:35:12 1413  	     var_current_invoice_id
14:35:12 1414  	   FROM
14:35:12 1415  	     LICENSE
14:35:12 1416  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 1417  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
14:35:12 1418  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:35:12 1419  	   WHERE
14:35:12 1420  	     SUBSCRIPTION.ID = in_subscription_id
14:35:12 1421  	     AND PROCS_COMMON_V16.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
14:35:12 1422  	     AND PROCS_COMMON_V16.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
14:35:12 1423  	     AND ROWNUM <= 1
14:35:12 1424  	   ORDER BY
14:35:12 1425  	     LICENSE.ID DESC;
14:35:12 1426  	   EXCEPTION
14:35:12 1427  	     WHEN NO_DATA_FOUND THEN
14:35:12 1428  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
14:35:12 1429  	 END;
14:35:12 1430  
14:35:12 1431  	 IF var_current_license_end_date < in_effective_start_date THEN
14:35:12 1432  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
14:35:12 1433  	 END IF;
14:35:12 1434  
14:35:12 1435  	 IF var_current_license_start_date > in_effective_start_date THEN
14:35:12 1436  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
14:35:12 1437  	 END IF;
14:35:12 1438  
14:35:12 1439  	 IF in_effective_start_date > in_effective_end_date THEN
14:35:12 1440  	   RAISE EXT_START_DATE_LATER_THEN_END;
14:35:12 1441  	 END IF;
14:35:12 1442  
14:35:12 1443  	 -- Closing curent license
14:35:12 1444  	 BEGIN
14:35:12 1445  	   PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 1446  	     in_license_id	   => var_current_license_id,
14:35:12 1447  	     in_updated_by	   => in_updated_by,
14:35:12 1448  	     in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
14:35:12 1449  	     in_end_date	   => in_effective_start_date,
14:35:12 1450  	     in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE
14:35:12 1451  	   );
14:35:12 1452  	   EXCEPTION
14:35:12 1453  	     WHEN OTHERS THEN
14:35:12 1454  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1455  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
14:35:12 1456  	 END;
14:35:12 1457  
14:35:12 1458  	 -- Creating new "free" invoice
14:35:12 1459  	 BEGIN
14:35:12 1460  	   PROCS_INVOICE_V16.CREATE_INVOICE(
14:35:12 1461  	     in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_CLOSED,
14:35:12 1462  	     in_created_by     => in_updated_by,
14:35:12 1463  	     in_tax_exempt_id  => var_account_tax_exempt_id,
14:35:12 1464  	     out_invoice_id    => var_free_invoice_id
14:35:12 1465  	   );
14:35:12 1466  	   EXCEPTION
14:35:12 1467  	     WHEN OTHERS THEN
14:35:12 1468  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1469  	       RAISE CAN_NOT_CREATE_INVOICE;
14:35:12 1470  	 END;
14:35:12 1471  
14:35:12 1472  	 -- Creating new "free" license
14:35:12 1473  	 BEGIN
14:35:12 1474  	   PROCS_LICENSE_V16.CREATE_LICENSE (
14:35:12 1475  	     in_status_id		 => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
14:35:12 1476  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 1477  	     in_start_date		 => in_effective_start_date,
14:35:12 1478  	     in_end_date		 => in_effective_end_date,
14:35:12 1479  	     in_offer_id		 => var_current_offer_id,
14:35:12 1480  	     in_subscription_id 	 => in_subscription_id,
14:35:12 1481  	     in_invoice_id		 => var_free_invoice_id,
14:35:12 1482  	     in_created_by		 => in_updated_by,
14:35:12 1483  	     in_is_extension		 => GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 1484  	     in_current_offer_index	 => var_current_offer_index,
14:35:12 1485  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
14:35:12 1486  	     out_license_id		 => var_free_license_id
14:35:12 1487  	   );
14:35:12 1488  	   EXCEPTION
14:35:12 1489  	     WHEN OTHERS THEN
14:35:12 1490  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1491  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
14:35:12 1492  	 END;
14:35:12 1493  
14:35:12 1494  	 -- Creating new license
14:35:12 1495  	 IF PROCS_COMMON_V16.NORMALIZE_DATE(var_current_license_end_date) >
14:35:12 1496  	    PROCS_COMMON_V16.NORMALIZE_DATE(in_effective_start_date) THEN
14:35:12 1497  	   BEGIN
14:35:12 1498  	     PROCS_LICENSE_V16.CREATE_LICENSE (
14:35:12 1499  	       in_status_id		   => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
14:35:12 1500  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 1501  	       in_start_date		   => in_effective_end_date,
14:35:12 1502  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
14:35:12 1503  	       in_offer_id		   => var_current_offer_id,
14:35:12 1504  	       in_subscription_id	   => in_subscription_id,
14:35:12 1505  	       in_invoice_id		   => var_current_invoice_id,
14:35:12 1506  	       in_created_by		   => in_updated_by,
14:35:12 1507  	       in_is_extension		   => GLOBAL_CONSTANTS_V16.FALSE,
14:35:12 1508  	       in_current_offer_index	   => var_current_offer_index,
14:35:12 1509  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
14:35:12 1510  	       out_license_id		   => var_ext_license_id
14:35:12 1511  	     );
14:35:12 1512  	     EXCEPTION
14:35:12 1513  	       WHEN OTHERS THEN
14:35:12 1514  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1515  		 RAISE CAN_NOT_CREATE_END_LICENSE;
14:35:12 1516  	   END;
14:35:12 1517  	 END IF;
14:35:12 1518  
14:35:12 1519  	 -- Create new note for subscription
14:35:12 1520  	 BEGIN
14:35:12 1521  	   PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION (
14:35:12 1522  	     in_subscription_id => in_subscription_id,
14:35:12 1523  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
14:35:12 1524  	     in_note		=> in_note,
14:35:12 1525  	     in_created_by	=> in_updated_by
14:35:12 1526  	   );
14:35:12 1527  	   EXCEPTION
14:35:12 1528  	     WHEN OTHERS THEN
14:35:12 1529  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1530  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
14:35:12 1531  	 END;
14:35:12 1532  
14:35:12 1533  EXCEPTION
14:35:12 1534  WHEN EXT_START_DATE_LATER_THEN_END THEN
14:35:12 1535  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1536  	   SPROC_NAME, 'Extension start date is bigger then end date');
14:35:12 1537  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
14:35:12 1538  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1539  	   SPROC_NAME, 'Extension start date is too far');
14:35:12 1540  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
14:35:12 1541  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1542  	   SPROC_NAME, 'Extension start date is too small');
14:35:12 1543  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 1544  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1545  	   SPROC_NAME, 'No such subscription');
14:35:12 1546  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
14:35:12 1547  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1548  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
14:35:12 1549  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
14:35:12 1550  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1551  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
14:35:12 1552  WHEN CAN_NOT_CREATE_INVOICE THEN
14:35:12 1553  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1554  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
14:35:12 1555  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
14:35:12 1556  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1557  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
14:35:12 1558  WHEN CAN_NOT_CREATE_END_LICENSE THEN
14:35:12 1559  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1560  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
14:35:12 1561  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
14:35:12 1562  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1563  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
14:35:12 1564  WHEN OTHERS THEN
14:35:12 1565  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1566  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1567  END ADD_SUBSCRIPTION_EXTENSION;
14:35:12 1568  
14:35:12 1569  /******************************************************************************/
14:35:12 1570  
14:35:12 1571  FUNCTION CALC_SUBSCRIPTION_END_DATE (
14:35:12 1572  /*
14:35:12 1573  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1574  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 1575  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1576  Returns:
14:35:12 1577  NULL if it is impossible to calculate end date (for example,
14:35:12 1578  	 offer chain includes offer with infinity recurrences number)
14:35:12 1579  DATE else
14:35:12 1580  */
14:35:12 1581  	 in_subscription_id IN NUMBER
14:35:12 1582  ) RETURN DATE AS
14:35:12 1583  -- VARIABLES
14:35:12 1584  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
14:35:12 1585  last_license_id		     NUMBER;
14:35:12 1586  last_license_end_date	     DATE;
14:35:12 1587  last_license_offer_id	     NUMBER;
14:35:12 1588  last_license_offer_index      NUMBER;
14:35:12 1589  last_license_offer_recurr_num NUMBER;
14:35:12 1590  var_last_license_id	     NUMBER;
14:35:12 1591  var_offer_chain_id	     NUMBER;
14:35:12 1592  var_current_offer_rec_number  NUMBER;
14:35:12 1593  var_next_offers_set	     SYS_REFCURSOR;
14:35:12 1594  var_next_offer_duration	     VARCHAR2(30);
14:35:12 1595  var_next_offer_recur	     NUMBER;
14:35:12 1596  var_infinity_offers_number    NUMBER;
14:35:12 1597  
14:35:12 1598  var_result_date DATE;
14:35:12 1599  
14:35:12 1600  var_ym_interval	INTERVAL YEAR TO MONTH;
14:35:12 1601  var_ds_interval	INTERVAL DAY(3) TO SECOND;
14:35:12 1602  var_offer_years	NUMBER;
14:35:12 1603  var_offer_months NUMBER;
14:35:12 1604  var_offer_days	NUMBER;
14:35:12 1605  
14:35:12 1606  -- EXCEPTIONS
14:35:12 1607  BAD_SUBSCRIPTION_ID	  EXCEPTION;
14:35:12 1608  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
14:35:12 1609  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
14:35:12 1610  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
14:35:12 1611  EXCEPTION_MESSAGE	  VARCHAR2(1024);
14:35:12 1612  BEGIN
14:35:12 1613  
14:35:12 1614  	 BEGIN
14:35:12 1615  	   SELECT
14:35:12 1616  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
14:35:12 1617  	   FROM
14:35:12 1618  	     SUBSCRIPTION
14:35:12 1619  	   WHERE
14:35:12 1620  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1621  	   EXCEPTION
14:35:12 1622  	     WHEN NO_DATA_FOUND THEN
14:35:12 1623  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 1624  	 END;
14:35:12 1625  
14:35:12 1626  	 BEGIN
14:35:12 1627  	   SELECT
14:35:12 1628  	     ID into var_last_license_id
14:35:12 1629  	   FROM
14:35:12 1630  	     (
14:35:12 1631  	       SELECT
14:35:12 1632  		 LICENSE.ID
14:35:12 1633  	       FROM
14:35:12 1634  		 LICENSE
14:35:12 1635  	       WHERE
14:35:12 1636  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:35:12 1637  	       ORDER BY
14:35:12 1638  		 LICENSE.END_DATE DESC
14:35:12 1639  	     )
14:35:12 1640  	   WHERE
14:35:12 1641  	     ROWNUM <= 1;
14:35:12 1642  	   EXCEPTION
14:35:12 1643  	     WHEN NO_DATA_FOUND THEN
14:35:12 1644  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
14:35:12 1645  	 END;
14:35:12 1646  
14:35:12 1647  	 SELECT
14:35:12 1648  	   COUNT(*) into var_infinity_offers_number
14:35:12 1649  	 FROM
14:35:12 1650  	   OFFER_OFFER_CHAIN
14:35:12 1651  	 WHERE
14:35:12 1652  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:35:12 1653  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V16.OFFER_REC_INFINITY;
14:35:12 1654  
14:35:12 1655  	 IF var_infinity_offers_number > 0 THEN
14:35:12 1656  	   RETURN NULL;
14:35:12 1657  	 END IF;
14:35:12 1658  
14:35:12 1659  	 BEGIN
14:35:12 1660  	   SELECT
14:35:12 1661  	     LICENSE.ID,
14:35:12 1662  	     LICENSE.END_DATE,
14:35:12 1663  	     LICENSE.CURRENT_OFFER_INDEX,
14:35:12 1664  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
14:35:12 1665  	     LICENSE.OFFER_ID
14:35:12 1666  	     into
14:35:12 1667  	     last_license_id,
14:35:12 1668  	     last_license_end_date,
14:35:12 1669  	     last_license_offer_index,
14:35:12 1670  	     last_license_offer_recurr_num,
14:35:12 1671  	     last_license_offer_id
14:35:12 1672  	   FROM
14:35:12 1673  	     LICENSE
14:35:12 1674  	   WHERE
14:35:12 1675  	     LICENSE.ID = var_last_license_id;
14:35:12 1676  	   EXCEPTION
14:35:12 1677  	     WHEN NO_DATA_FOUND THEN
14:35:12 1678  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
14:35:12 1679  	 END;
14:35:12 1680  
14:35:12 1681  	 var_result_date := last_license_end_date;
14:35:12 1682  
14:35:12 1683  	 -- Find current recurrence number
14:35:12 1684  	 SELECT
14:35:12 1685  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
14:35:12 1686  	 FROM
14:35:12 1687  	   OFFER_OFFER_CHAIN
14:35:12 1688  	 WHERE
14:35:12 1689  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:35:12 1690  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
14:35:12 1691  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
14:35:12 1692  
14:35:12 1693  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
14:35:12 1694  	   BEGIN
14:35:12 1695  	     PROCS_OFFER_CHAIN_V16.GET_OFFER_LENGTH(
14:35:12 1696  	       last_license_offer_id,
14:35:12 1697  	       var_offer_years,
14:35:12 1698  	       var_offer_months,
14:35:12 1699  	       var_offer_days
14:35:12 1700  	     );
14:35:12 1701  
14:35:12 1702  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
14:35:12 1703  	     var_ds_interval := var_offer_days||' 0:0:0';
14:35:12 1704  
14:35:12 1705  	     var_result_date := var_result_date
14:35:12 1706  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
14:35:12 1707  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
14:35:12 1708  	     EXCEPTION
14:35:12 1709  	       WHEN OTHERS THEN
14:35:12 1710  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1711  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
14:35:12 1712  	   END;
14:35:12 1713  	 END IF;
14:35:12 1714  
14:35:12 1715  	 OPEN var_next_offers_set FOR
14:35:12 1716  	 SELECT
14:35:12 1717  	   OFFER.ENTITLEMENT_DURATION,
14:35:12 1718  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
14:35:12 1719  	 FROM
14:35:12 1720  	   OFFER_OFFER_CHAIN
14:35:12 1721  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:35:12 1722  	 WHERE
14:35:12 1723  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
14:35:12 1724  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
14:35:12 1725  
14:35:12 1726  	 LOOP
14:35:12 1727  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
14:35:12 1728  	   EXIT WHEN var_next_offers_set%NOTFOUND;
14:35:12 1729  	   BEGIN
14:35:12 1730  	     PROCS_COMMON_V16.ISO8601DURATION_TO_INTERVALS(
14:35:12 1731  	       var_next_offer_duration,
14:35:12 1732  	       var_offer_years,
14:35:12 1733  	       var_offer_months,
14:35:12 1734  	       var_offer_days
14:35:12 1735  	     );
14:35:12 1736  
14:35:12 1737  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
14:35:12 1738  	     var_ds_interval := var_offer_days||' 0:0:0';
14:35:12 1739  
14:35:12 1740  	     var_result_date := var_result_date
14:35:12 1741  	       + ( var_ym_interval * var_next_offer_recur )
14:35:12 1742  	       + ( var_ds_interval * var_next_offer_recur );
14:35:12 1743  	     EXCEPTION
14:35:12 1744  	       WHEN OTHERS THEN
14:35:12 1745  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1746  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
14:35:12 1747  	   END;
14:35:12 1748  	 END LOOP;
14:35:12 1749  
14:35:12 1750  	 RETURN var_result_date;
14:35:12 1751  
14:35:12 1752  EXCEPTION
14:35:12 1753  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 1754  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1755  	   SPROC_NAME, 'No such subscription');
14:35:12 1756  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
14:35:12 1757  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1758  	   SPROC_NAME, 'Could not find last license for given subscription');
14:35:12 1759  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
14:35:12 1760  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1761  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
14:35:12 1762  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
14:35:12 1763  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1764  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
14:35:12 1765  WHEN OTHERS THEN
14:35:12 1766  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1767  	   SPROC_NAME, 'Unkown error', SQLERRM);
14:35:12 1768  END CALC_SUBSCRIPTION_END_DATE;
14:35:12 1769  
14:35:12 1770  /******************************************************************************/
14:35:12 1771  
14:35:12 1772  PROCEDURE HAS_FUTURE_LICENSE (
14:35:12 1773  /*
14:35:12 1774  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1775  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1776  --
14:35:12 1777  RETURNS:
14:35:12 1778  GLOBAL_CONSTANTS_V16.TRUE - if has,
14:35:12 1779  GLOBAL_CONSTANTS_V16.FALSE - else
14:35:12 1780  */
14:35:12 1781  	 in_license_id IN  NUMBER,
14:35:12 1782  	 out_result    OUT NUMBER
14:35:12 1783  ) AS
14:35:12 1784  -- VARIABLES
14:35:12 1785  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
14:35:12 1786  var_subscription_id	 NUMBER;
14:35:12 1787  var_future_licenses_count NUMBER;
14:35:12 1788  -- EXCEPTIONS
14:35:12 1789  BAD_LICENSE_ID	    EXCEPTION;
14:35:12 1790  BEGIN
14:35:12 1791  
14:35:12 1792  	 BEGIN
14:35:12 1793  	   SELECT
14:35:12 1794  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
14:35:12 1795  	   FROM
14:35:12 1796  	     LICENSE
14:35:12 1797  	   WHERE
14:35:12 1798  	     LICENSE.ID = in_license_id;
14:35:12 1799  	   EXCEPTION
14:35:12 1800  	     WHEN NO_DATA_FOUND THEN
14:35:12 1801  	       RAISE BAD_LICENSE_ID;
14:35:12 1802  	 END;
14:35:12 1803  
14:35:12 1804  	 SELECT
14:35:12 1805  	   COUNT(*) into var_future_licenses_count
14:35:12 1806  	 FROM
14:35:12 1807  	   LICENSE
14:35:12 1808  	 WHERE
14:35:12 1809  	   LICENSE.ID != in_license_id
14:35:12 1810  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
14:35:12 1811  	   AND LICENSE.END_DATE > sysdate;
14:35:12 1812  
14:35:12 1813  	 IF var_future_licenses_count > 0 THEN
14:35:12 1814  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 1815  	 ELSE
14:35:12 1816  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 1817  	 END IF;
14:35:12 1818  
14:35:12 1819  EXCEPTION
14:35:12 1820  WHEN BAD_LICENSE_ID THEN
14:35:12 1821  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1822  	   SPROC_NAME, 'No such license');
14:35:12 1823  WHEN OTHERS THEN
14:35:12 1824  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1825  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1826  END HAS_FUTURE_LICENSE;
14:35:12 1827  
14:35:12 1828  /******************************************************************************/
14:35:12 1829  
14:35:12 1830  PROCEDURE CLOSE_SUBSCRIPTION (
14:35:12 1831  	 in_subscription_id IN NUMBER,
14:35:12 1832  	 in_updated_by	    IN VARCHAR2
14:35:12 1833  ) AS
14:35:12 1834  -- VARIABLES
14:35:12 1835  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
14:35:12 1836  temp_subscription_id NUMBER;
14:35:12 1837  var_licenses_count   NUMBER;
14:35:12 1838  -- EXCEPTIONS
14:35:12 1839  BAD_SUBSCRIPTION_ID    EXCEPTION;
14:35:12 1840  ACTIVE_LICENSES_FOUND  EXCEPTION;
14:35:12 1841  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 1842  BEGIN
14:35:12 1843  
14:35:12 1844  	 BEGIN
14:35:12 1845  	   SELECT
14:35:12 1846  	     SUBSCRIPTION.ID into temp_subscription_id
14:35:12 1847  	   FROM
14:35:12 1848  	     SUBSCRIPTION
14:35:12 1849  	   WHERE
14:35:12 1850  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1851  	   EXCEPTION
14:35:12 1852  	     WHEN NO_DATA_FOUND THEN
14:35:12 1853  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 1854  	 END;
14:35:12 1855  
14:35:12 1856  	 SELECT
14:35:12 1857  	   COUNT(*) into var_licenses_count
14:35:12 1858  	 FROM
14:35:12 1859  	   LICENSE
14:35:12 1860  	 WHERE
14:35:12 1861  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:35:12 1862  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE;
14:35:12 1863  
14:35:12 1864  	 IF var_licenses_count > 0 THEN
14:35:12 1865  	   RAISE ACTIVE_LICENSES_FOUND;
14:35:12 1866  	 END IF;
14:35:12 1867  
14:35:12 1868  	 PROCS_SUBSCRIPTION_V16.UPDATE_SUBSCRIPTION_STATUS(
14:35:12 1869  	   in_subscription_id	     => in_subscription_id,
14:35:12 1870  	   in_updated_by	     => in_updated_by,
14:35:12 1871  	   in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
14:35:12 1872  	 );
14:35:12 1873  
14:35:12 1874  EXCEPTION
14:35:12 1875  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 1876  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1877  	   SPROC_NAME, 'No such subscription');
14:35:12 1878  WHEN ACTIVE_LICENSES_FOUND THEN
14:35:12 1879  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1880  	   SPROC_NAME, 'Active licenses found');
14:35:12 1881  WHEN OTHERS THEN
14:35:12 1882  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1883  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1884  END CLOSE_SUBSCRIPTION;
14:35:12 1885  
14:35:12 1886  /******************************************************************************/
14:35:12 1887  
14:35:12 1888  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
14:35:12 1889  	 in_subscription_id IN NUMBER,
14:35:12 1890  	 out_group_id	    OUT NUMBER
14:35:12 1891  ) AS
14:35:12 1892  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
14:35:12 1893  BEGIN
14:35:12 1894  	 SELECT
14:35:12 1895  	   ACCOUNT.GROUP_ID into out_group_id
14:35:12 1896  	 FROM
14:35:12 1897  	   SUBSCRIPTION
14:35:12 1898  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:35:12 1899  	 WHERE
14:35:12 1900  	   SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1901  EXCEPTION
14:35:12 1902  WHEN NO_DATA_FOUND THEN
14:35:12 1903  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1904  	   SPROC_NAME, 'No such subscription');
14:35:12 1905  WHEN OTHERS THEN
14:35:12 1906  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1907  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1908  END GET_GROUP_ID_BY_SBSCRPTN_ID;
14:35:12 1909  
14:35:12 1910  /******************************************************************************/
14:35:12 1911  
14:35:12 1912  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
14:35:12 1913  /*
14:35:12 1914  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1915  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1916  */
14:35:12 1917  	 in_subscription_id IN NUMBER,
14:35:12 1918  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 1919  ) AS
14:35:12 1920  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
14:35:12 1921  -- VARIABLES
14:35:12 1922  var_offer_chain NUMBER;
14:35:12 1923  -- EXCEPTIONS
14:35:12 1924  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 1925  BEGIN
14:35:12 1926  	 BEGIN
14:35:12 1927  	   SELECT
14:35:12 1928  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
14:35:12 1929  	   FROM
14:35:12 1930  	     SUBSCRIPTION
14:35:12 1931  	   WHERE
14:35:12 1932  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 1933  	   EXCEPTION
14:35:12 1934  	     WHEN NO_DATA_FOUND THEN
14:35:12 1935  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 1936  	 END;
14:35:12 1937  
14:35:12 1938  	 OPEN out_result_set FOR
14:35:12 1939  	 SELECT DISTINCT
14:35:12 1940  	   PRODUCT.ID,
14:35:12 1941  	   PRODUCT.NAME
14:35:12 1942  	 FROM
14:35:12 1943  	   PRODUCT
14:35:12 1944  	 WHERE
14:35:12 1945  	   PRODUCT.ID IN (
14:35:12 1946  	     SELECT DISTINCT
14:35:12 1947  	       PRODUCT_OFFERING.PRODUCT_ID
14:35:12 1948  	     FROM
14:35:12 1949  	       PRODUCT_OFFERING
14:35:12 1950  	     WHERE
14:35:12 1951  	       PRODUCT_OFFERING.ID IN (
14:35:12 1952  		 SELECT DISTINCT
14:35:12 1953  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:35:12 1954  		 FROM
14:35:12 1955  		   OFFER_PRODUCT_OFFERING
14:35:12 1956  		 WHERE
14:35:12 1957  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:35:12 1958  		     SELECT DISTINCT
14:35:12 1959  		       OFFER_OFFER_CHAIN.OFFER_ID
14:35:12 1960  		     FROM
14:35:12 1961  		       OFFER_OFFER_CHAIN
14:35:12 1962  		     WHERE
14:35:12 1963  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
14:35:12 1964  		   )
14:35:12 1965  	       )
14:35:12 1966  	   );
14:35:12 1967  
14:35:12 1968  EXCEPTION
14:35:12 1969  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 1970  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1971  	   SPROC_NAME, 'No such subscription');
14:35:12 1972  WHEN OTHERS THEN
14:35:12 1973  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1974  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1975  END GET_SUBSCRIPTION_PRODUCTS;
14:35:12 1976  
14:35:12 1977  /******************************************************************************/
14:35:12 1978  
14:35:12 1979  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
14:35:12 1980  /*
14:35:12 1981  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1982  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1983  */
14:35:12 1984  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
14:35:12 1985  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
14:35:12 1986  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
14:35:12 1987  ) AS
14:35:12 1988  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
14:35:12 1989  -- VARIABLES
14:35:12 1990  temp_charge_id CHARGE.ID%TYPE;
14:35:12 1991  -- EXCEPTIONS
14:35:12 1992  BAD_SUBSCRIPTION_ID    EXCEPTION;
14:35:12 1993  BAD_STATUS_ID	      EXCEPTION;
14:35:12 1994  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 1995  BEGIN
14:35:12 1996  
14:35:12 1997  	 IF in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 1998  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
14:35:12 1999  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED
14:35:12 2000  	   AND in_subscription_status_id != GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED THEN
14:35:12 2001  	   RAISE BAD_STATUS_ID;
14:35:12 2002  	 END IF;
14:35:12 2003  
14:35:12 2004  	 PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
14:35:12 2005  	   in_subscription_id	     => in_subscription_id,
14:35:12 2006  	   in_subscription_status_id => in_subscription_status_id,
14:35:12 2007  	   in_updated_by	     => in_updated_by
14:35:12 2008  	 );
14:35:12 2009  
14:35:12 2010  	 IF SQL%ROWCOUNT = 0 THEN
14:35:12 2011  	   RAISE BAD_SUBSCRIPTION_ID;
14:35:12 2012  	 END IF;
14:35:12 2013  
14:35:12 2014  EXCEPTION
14:35:12 2015  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2016  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2017  	   SPROC_NAME, 'No such subscription');
14:35:12 2018  WHEN BAD_STATUS_ID THEN
14:35:12 2019  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2020  	   SPROC_NAME, 'Bad status id');
14:35:12 2021  WHEN OTHERS THEN
14:35:12 2022  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2023  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2024  END UPDATE_SUBSCRIPTION_STATUS;
14:35:12 2025  
14:35:12 2026  /******************************************************************************/
14:35:12 2027  
14:35:12 2028  PROCEDURE GET_ACTIVE_INVOICES_IDS (
14:35:12 2029  /*
14:35:12 2030  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2031  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2032  */
14:35:12 2033  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
14:35:12 2034  	 in_subscription_id IN NUMBER,
14:35:12 2035  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 2036  ) AS
14:35:12 2037  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
14:35:12 2038  -- VARIABLES
14:35:12 2039  temp_subscription_id SUBSCRIPTION.ID%TYPE;
14:35:12 2040  -- EXCEPTIONS
14:35:12 2041  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 2042  BEGIN
14:35:12 2043  
14:35:12 2044  	 BEGIN
14:35:12 2045  	   SELECT
14:35:12 2046  	     SUBSCRIPTION.ID into temp_subscription_id
14:35:12 2047  	   FROM
14:35:12 2048  	     SUBSCRIPTION
14:35:12 2049  	   WHERE
14:35:12 2050  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 2051  	   EXCEPTION
14:35:12 2052  	     WHEN NO_DATA_FOUND THEN
14:35:12 2053  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 2054  	 END;
14:35:12 2055  
14:35:12 2056  	 OPEN out_result_set FOR
14:35:12 2057  	 SELECT DISTINCT
14:35:12 2058  	   LICENSE.INVOICE_ID as "ID"
14:35:12 2059  	 FROM
14:35:12 2060  	   LICENSE
14:35:12 2061  	 WHERE
14:35:12 2062  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 2063  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
14:35:12 2064  
14:35:12 2065  EXCEPTION
14:35:12 2066  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2067  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2068  	   SPROC_NAME, 'No such subscription');
14:35:12 2069  WHEN OTHERS THEN
14:35:12 2070  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2071  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2072  END GET_ACTIVE_INVOICES_IDS;
14:35:12 2073  
14:35:12 2074  /******************************************************************************/
14:35:12 2075  
14:35:12 2076  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
14:35:12 2077  /*
14:35:12 2078  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2079  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2080  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 2081  */
14:35:12 2082  	 in_invoice_id	      IN NUMBER,
14:35:12 2083  	 in_updated_by	      IN VARCHAR2,
14:35:12 2084  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:12 2085  ) AS
14:35:12 2086  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
14:35:12 2087  -- VARIABLES
14:35:12 2088  temp_invoice_id	      INVOICE.ID%TYPE;
14:35:12 2089  var_chargeback_amount  NUMBER(10,2);
14:35:12 2090  ver_refund_charge_id   NUMBER;
14:35:12 2091  -- EXCEPTIONS
14:35:12 2092  BAD_INVOICE_ID		    EXCEPTION;
14:35:12 2093  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
14:35:12 2094  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
14:35:12 2095  EXCEPTION_MESSAGE	    VARCHAR2(1024);
14:35:12 2096  -- STUB
14:35:12 2097  var_now DATE;
14:35:12 2098  var_revoke NUMBER;
14:35:12 2099  var_refund NUMBER;
14:35:12 2100  var_billed NUMBER;
14:35:12 2101  BEGIN
14:35:12 2102  
14:35:12 2103  	 var_now := sysdate;
14:35:12 2104  
14:35:12 2105  	 -- Check that invoice exists
14:35:12 2106  	 BEGIN
14:35:12 2107  	   SELECT
14:35:12 2108  	     INVOICE.ID into temp_invoice_id
14:35:12 2109  	   FROM
14:35:12 2110  	     INVOICE
14:35:12 2111  	   WHERE
14:35:12 2112  	     INVOICE.ID = in_invoice_id;
14:35:12 2113  	   EXCEPTION
14:35:12 2114  	     WHEN NO_DATA_FOUND THEN
14:35:12 2115  	       RAISE BAD_INVOICE_ID;
14:35:12 2116  	 END;
14:35:12 2117  
14:35:12 2118  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V16.FALSE, GLOBAL_CONSTANTS_V16.TRUE) into var_revoke
14:35:12 2119  	 from license l, subscription s, offer_chain oc
14:35:12 2120  	 where
14:35:12 2121  	   l.subscription_id = s.id and
14:35:12 2122  	   s.offer_chain_id = oc.id and
14:35:12 2123  	   l.invoice_id = in_invoice_id and
14:35:12 2124  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V16.TRUE and
14:35:12 2125  	   rownum < 2;
14:35:12 2126  
14:35:12 2127  	 var_billed := PROCS_INVOICE_V16.IS_INVOICE_PAYING_STARTED(in_invoice_id);
14:35:12 2128  	 var_refund := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 2129  
14:35:12 2130  	 -- Check that transaction for given invoice not started
14:35:12 2131  	 -- if refund enabled calculate and apply chargeback
14:35:12 2132  	 IF (
14:35:12 2133  	     var_billed = GLOBAL_CONSTANTS_V16.TRUE
14:35:12 2134  	   )THEN
14:35:12 2135  	   if (in_refundable = GLOBAL_CONSTANTS_V16.TRUE) then
14:35:12 2136  	     -- If started then we need to calculate refund
14:35:12 2137  	     BEGIN
14:35:12 2138  	       PROCS_INVOICE_V16.CALCULATE_INVOICE_CHARGEBACK(
14:35:12 2139  		 in_invoice_id,
14:35:12 2140  		 var_now,
14:35:12 2141  		 var_chargeback_amount
14:35:12 2142  	       );
14:35:12 2143  	       EXCEPTION
14:35:12 2144  		 WHEN OTHERS THEN
14:35:12 2145  		   EXCEPTION_MESSAGE := SQLERRM;
14:35:12 2146  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
14:35:12 2147  	     END;
14:35:12 2148  	     IF var_chargeback_amount > 0 THEN
14:35:12 2149  	       BEGIN
14:35:12 2150  		 PROCS_INVOICE_V16.APPLY_REFUND(
14:35:12 2151  		   in_invoice_id,
14:35:12 2152  		   var_chargeback_amount,
14:35:12 2153  		   in_updated_by,
14:35:12 2154  		   ver_refund_charge_id
14:35:12 2155  		 );
14:35:12 2156  		 EXCEPTION
14:35:12 2157  		   WHEN OTHERS THEN
14:35:12 2158  		     EXCEPTION_MESSAGE := SQLERRM;
14:35:12 2159  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
14:35:12 2160  	       END;
14:35:12 2161  	       var_refund := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2162  	     END IF;
14:35:12 2163  	   end if;
14:35:12 2164  	 ELSE
14:35:12 2165  
14:35:12 2166  	   FOR f_transaction_to_close IN (
14:35:12 2167  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
14:35:12 2168  	   )
14:35:12 2169  	   LOOP
14:35:12 2170  	     PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
14:35:12 2171  	       in_transaction_id	=> f_transaction_to_close.ID,
14:35:12 2172  	       in_updated_by		=> in_updated_by,
14:35:12 2173  	       in_transaction_status_id => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
14:35:12 2174  	     );
14:35:12 2175  	   END LOOP;
14:35:12 2176  	   -- Needs to close charges. No refund.
14:35:12 2177  	   FOR f_charge_to_close IN (
14:35:12 2178  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
14:35:12 2179  	   )
14:35:12 2180  	   LOOP
14:35:12 2181  	     PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
14:35:12 2182  	       in_charge_id	   => f_charge_to_close.ID,
14:35:12 2183  	       in_updated_by	   => in_updated_by,
14:35:12 2184  	       in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
14:35:12 2185  	     );
14:35:12 2186  	   END LOOP;
14:35:12 2187  
14:35:12 2188  	   PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
14:35:12 2189  	     in_invoice_id		    => in_invoice_id,
14:35:12 2190  	     in_updated_by		    => in_updated_by,
14:35:12 2191  	     in_invoice_status_id	    => GLOBAL_STATUSES_V16.INVOICE_CLOSED
14:35:12 2192  	   );
14:35:12 2193  
14:35:12 2194  	 END IF;
14:35:12 2195  	 -- update licenses
14:35:12 2196  	 IF(var_revoke = GLOBAL_CONSTANTS_V16.TRUE OR var_chargeback_amount > 0 OR var_billed = GLOBAL_CONSTANTS_V16.FALSE) THEN
14:35:12 2197  	   FOR f_license_to_cancel IN (
14:35:12 2198  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 2199  	   )
14:35:12 2200  	   LOOP
14:35:12 2201  	     PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 2202  	       in_license_id	     => f_license_to_cancel.ID,
14:35:12 2203  	       in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
14:35:12 2204  	       in_needs_entitlements => GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 2205  	       in_updated_by	     => in_updated_by,
14:35:12 2206  	       in_entitlement_end_date => var_now
14:35:12 2207  	     );
14:35:12 2208  	   END LOOP;
14:35:12 2209  	 ELSE
14:35:12 2210  	   FOR f_license_to_cancel IN (
14:35:12 2211  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 2212  	   )
14:35:12 2213  	   LOOP
14:35:12 2214  	     PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 2215  	       in_license_id	     => f_license_to_cancel.ID,
14:35:12 2216  	       in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
14:35:12 2217  	       in_updated_by	     => in_updated_by
14:35:12 2218  	     );
14:35:12 2219  	   END LOOP;
14:35:12 2220  	 END IF;
14:35:12 2221  
14:35:12 2222  
14:35:12 2223  EXCEPTION
14:35:12 2224  WHEN BAD_INVOICE_ID THEN
14:35:12 2225  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2226  	   SPROC_NAME, 'No such invoice');
14:35:12 2227  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
14:35:12 2228  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 2229  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
14:35:12 2230  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
14:35:12 2231  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 2232  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
14:35:12 2233  WHEN OTHERS THEN
14:35:12 2234  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2235  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2236  END CANCEL_SUBSCRIPTION_INVOICE;
14:35:12 2237  
14:35:12 2238  /******************************************************************************/
14:35:12 2239  
14:35:12 2240  PROCEDURE FINALIZE_CANCELATION (
14:35:12 2241  /*
14:35:12 2242  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2243  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2244  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 2245  */
14:35:12 2246  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
14:35:12 2247  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
14:35:12 2248  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
14:35:12 2249  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:35:12 2250  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:35:12 2251  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
14:35:12 2252  	 in_subscription_id    IN NUMBER,
14:35:12 2253  	 in_cancelation_reason IN VARCHAR2,
14:35:12 2254  	 in_cancelation_date   IN DATE,
14:35:12 2255  	 in_note	       IN VARCHAR2,
14:35:12 2256  	 in_agent_id	       IN NUMBER,
14:35:12 2257  	 in_updated_by	       IN VARCHAR2
14:35:12 2258  ) AS
14:35:12 2259  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
14:35:12 2260  -- VARIABLES
14:35:12 2261  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
14:35:12 2262  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
14:35:12 2263  var_active_invoices_count NUMBER;
14:35:12 2264  -- EXCEPTIONS
14:35:12 2265  BAD_SUBSCRIPTION_ID	   EXCEPTION;
14:35:12 2266  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
14:35:12 2267  BAD_CANCELATION_REASON	   EXCEPTION;
14:35:12 2268  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
14:35:12 2269  ACTIVE_INVOICES_FOUND	   EXCEPTION;
14:35:12 2270  CAN_NOT_CREATE_NOTE	   EXCEPTION;
14:35:12 2271  EXCEPTION_MESSAGE	   VARCHAR2(1024);
14:35:12 2272  BEGIN
14:35:12 2273  
14:35:12 2274  	 -- Get current subscription status
14:35:12 2275  	 BEGIN
14:35:12 2276  	   SELECT
14:35:12 2277  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
14:35:12 2278  	   FROM
14:35:12 2279  	     SUBSCRIPTION
14:35:12 2280  	   WHERE
14:35:12 2281  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 2282  	   EXCEPTION
14:35:12 2283  	     WHEN NO_DATA_FOUND THEN
14:35:12 2284  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 2285  	 END;
14:35:12 2286  
14:35:12 2287  	 -- Check that subscription reason is correct
14:35:12 2288  	 BEGIN
14:35:12 2289  	   SELECT
14:35:12 2290  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
14:35:12 2291  	   FROM
14:35:12 2292  	     SUBSCRIPTION_CANCEL_REASON
14:35:12 2293  	   WHERE
14:35:12 2294  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
14:35:12 2295  	     AND ROWNUM <= 1;
14:35:12 2296  	   EXCEPTION
14:35:12 2297  	     WHEN NO_DATA_FOUND THEN
14:35:12 2298  	       RAISE BAD_CANCELATION_REASON;
14:35:12 2299  	 END;
14:35:12 2300  
14:35:12 2301  	 -- Check for invoices with active licenses
14:35:12 2302  	 SELECT
14:35:12 2303  	   COUNT(*) into var_active_invoices_count
14:35:12 2304  	 FROM
14:35:12 2305  	   LICENSE
14:35:12 2306  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:35:12 2307  	 WHERE
14:35:12 2308  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 2309  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
14:35:12 2310  
14:35:12 2311  	 IF var_active_invoices_count > 0 THEN
14:35:12 2312  	   RAISE ACTIVE_INVOICES_FOUND;
14:35:12 2313  	 END IF;
14:35:12 2314  
14:35:12 2315  	 -- Check that subscription is active
14:35:12 2316  	 IF var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 2317  	    AND var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
14:35:12 2318  	   RAISE BAD_SUBSCRIPTION_STATUS;
14:35:12 2319  	 END IF;
14:35:12 2320  
14:35:12 2321  	 -- Update subscription data
14:35:12 2322  	 BEGIN
14:35:12 2323  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
14:35:12 2324  	     in_subscription_id        => in_subscription_id,
14:35:12 2325  	     in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED,
14:35:12 2326  	     in_cancelation_date       => in_cancelation_date,
14:35:12 2327  	     in_updated_by	       => in_updated_by,
14:35:12 2328  	     in_sct_id		       => var_sct_id
14:35:12 2329  	   );
14:35:12 2330  	   EXCEPTION
14:35:12 2331  	     WHEN OTHERS THEN
14:35:12 2332  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 2333  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
14:35:12 2334  	 END;
14:35:12 2335  
14:35:12 2336  	 -- Annotate subscription
14:35:12 2337  	 IF in_note IS NOT NULL THEN
14:35:12 2338  	   BEGIN
14:35:12 2339  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
14:35:12 2340  	       in_subscription_id,
14:35:12 2341  	       in_agent_id,
14:35:12 2342  	       in_note,
14:35:12 2343  	       in_updated_by
14:35:12 2344  	     );
14:35:12 2345  	     EXCEPTION
14:35:12 2346  	      WHEN OTHERS THEN
14:35:12 2347  		EXCEPTION_MESSAGE := SQLERRM;
14:35:12 2348  		RAISE CAN_NOT_CREATE_NOTE;
14:35:12 2349  	   END;
14:35:12 2350  	 END IF;
14:35:12 2351  
14:35:12 2352  EXCEPTION
14:35:12 2353  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2354  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2355  	   SPROC_NAME, 'No such subscription');
14:35:12 2356  WHEN BAD_SUBSCRIPTION_STATUS THEN
14:35:12 2357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2358  	   SPROC_NAME, 'Bad current subscription status');
14:35:12 2359  WHEN BAD_CANCELATION_REASON THEN
14:35:12 2360  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2361  	   SPROC_NAME, 'Bad cancellation reason');
14:35:12 2362  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
14:35:12 2363  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 2364  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
14:35:12 2365  WHEN ACTIVE_INVOICES_FOUND THEN
14:35:12 2366  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 2367  	   SPROC_NAME, 'Invoices with active licenses found');
14:35:12 2368  WHEN CAN_NOT_CREATE_NOTE THEN
14:35:12 2369  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 2370  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:35:12 2371  WHEN OTHERS THEN
14:35:12 2372  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2373  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2374  END FINALIZE_CANCELATION;
14:35:12 2375  
14:35:12 2376  /******************************************************************************/
14:35:12 2377  
14:35:12 2378  PROCEDURE FINALIZE_FALSE_START (
14:35:12 2379  /*
14:35:12 2380  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2381  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2382  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 2383  */
14:35:12 2384  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
14:35:12 2385  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
14:35:12 2386  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:35:12 2387  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:35:12 2388  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
14:35:12 2389  	 in_subscription_id    IN NUMBER,
14:35:12 2390  	 in_cancelation_date   IN DATE,
14:35:12 2391  	 in_note	       IN VARCHAR2,
14:35:12 2392  	 in_agent_id	       IN NUMBER,
14:35:12 2393  	 in_updated_by	       IN VARCHAR2
14:35:12 2394  ) AS
14:35:12 2395  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
14:35:12 2396  FALSE_START_REASON CONSTANT NUMBER := 41;
14:35:12 2397  -- VARIABLES
14:35:12 2398  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
14:35:12 2399  var_active_invoices_count NUMBER;
14:35:12 2400  -- EXCEPTIONS
14:35:12 2401  BAD_SUBSCRIPTION_ID	   EXCEPTION;
14:35:12 2402  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
14:35:12 2403  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
14:35:12 2404  ACTIVE_INVOICES_FOUND	   EXCEPTION;
14:35:12 2405  CAN_NOT_CREATE_NOTE	   EXCEPTION;
14:35:12 2406  EXCEPTION_MESSAGE	   VARCHAR2(1024);
14:35:12 2407  BEGIN
14:35:12 2408  
14:35:12 2409  	 -- Get current subscription status
14:35:12 2410  	 BEGIN
14:35:12 2411  	   SELECT
14:35:12 2412  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
14:35:12 2413  	   FROM
14:35:12 2414  	     SUBSCRIPTION
14:35:12 2415  	   WHERE
14:35:12 2416  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 2417  	   EXCEPTION
14:35:12 2418  	     WHEN NO_DATA_FOUND THEN
14:35:12 2419  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 2420  	 END;
14:35:12 2421  
14:35:12 2422  	 -- Check for invoices with active licenses
14:35:12 2423  	 SELECT
14:35:12 2424  	   COUNT(*) into var_active_invoices_count
14:35:12 2425  	 FROM
14:35:12 2426  	   LICENSE
14:35:12 2427  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:35:12 2428  	 WHERE
14:35:12 2429  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 2430  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
14:35:12 2431  
14:35:12 2432  	 IF var_active_invoices_count > 0 THEN
14:35:12 2433  	   RAISE ACTIVE_INVOICES_FOUND;
14:35:12 2434  	 END IF;
14:35:12 2435  
14:35:12 2436  	 -- Check that subscription is active
14:35:12 2437  	 IF var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 2438  	    AND var_current_subscr_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED THEN
14:35:12 2439  	   RAISE BAD_SUBSCRIPTION_STATUS;
14:35:12 2440  	 END IF;
14:35:12 2441  
14:35:12 2442  	 -- Update subscription data
14:35:12 2443  	 BEGIN
14:35:12 2444  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
14:35:12 2445  	     in_subscription_id        => in_subscription_id,
14:35:12 2446  	     in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_FALSE_START,
14:35:12 2447  	     in_cancelation_date       => in_cancelation_date,
14:35:12 2448  	     in_updated_by	       => in_updated_by,
14:35:12 2449  	     in_sct_id		       => FALSE_START_REASON
14:35:12 2450  	   );
14:35:12 2451  	   EXCEPTION
14:35:12 2452  	     WHEN OTHERS THEN
14:35:12 2453  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 2454  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
14:35:12 2455  	 END;
14:35:12 2456  
14:35:12 2457  	 -- Annotate subscription
14:35:12 2458  	 IF in_note IS NOT NULL THEN
14:35:12 2459  	   BEGIN
14:35:12 2460  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
14:35:12 2461  	       in_subscription_id,
14:35:12 2462  	       in_agent_id,
14:35:12 2463  	       in_note,
14:35:12 2464  	       in_updated_by
14:35:12 2465  	     );
14:35:12 2466  	     EXCEPTION
14:35:12 2467  	      WHEN OTHERS THEN
14:35:12 2468  		EXCEPTION_MESSAGE := SQLERRM;
14:35:12 2469  		RAISE CAN_NOT_CREATE_NOTE;
14:35:12 2470  	   END;
14:35:12 2471  	 END IF;
14:35:12 2472  
14:35:12 2473  EXCEPTION
14:35:12 2474  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2475  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2476  	   SPROC_NAME, 'No such subscription');
14:35:12 2477  WHEN BAD_SUBSCRIPTION_STATUS THEN
14:35:12 2478  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2479  	   SPROC_NAME, 'Bad current subscription status');
14:35:12 2480  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
14:35:12 2481  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 2482  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
14:35:12 2483  WHEN ACTIVE_INVOICES_FOUND THEN
14:35:12 2484  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 2485  	   SPROC_NAME, 'Invoices with active licenses found');
14:35:12 2486  WHEN CAN_NOT_CREATE_NOTE THEN
14:35:12 2487  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 2488  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:35:12 2489  WHEN OTHERS THEN
14:35:12 2490  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2491  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2492  END FINALIZE_FALSE_START;
14:35:12 2493  
14:35:12 2494  /******************************************************************************/
14:35:12 2495  
14:35:12 2496  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
14:35:12 2497  	 in_subscription_id IN NUMBER
14:35:12 2498  ) RETURN NUMBER AS
14:35:12 2499  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
14:35:12 2500  -- VARIABLES
14:35:12 2501  var_is_offer_chain_cancelable NUMBER;
14:35:12 2502  --64603
14:35:12 2503  var_end_date date;
14:35:12 2504  today_date date := current_date;
14:35:12 2505  offer_id number;
14:35:12 2506  -- EXCEPTIONS
14:35:12 2507  COULD_NOT_CHECK	   EXCEPTION;
14:35:12 2508  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 2509  EXCEPTION_MESSAGE   VARCHAR2(1024);
14:35:12 2510  BEGIN
14:35:12 2511  
14:35:12 2512  	 BEGIN
14:35:12 2513  	   -- find offer_chain_id for given in_subscription_id
14:35:12 2514  	   SELECT OFFER_CHAIN_ID into offer_id
14:35:12 2515  	   FROM SUBSCRIPTION
14:35:12 2516  	   WHERE ID = in_subscription_id;
14:35:12 2517  	   EXCEPTION
14:35:12 2518  	     WHEN NO_DATA_FOUND THEN
14:35:12 2519  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 2520  	     WHEN OTHERS THEN
14:35:12 2521  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 2522  	       RAISE COULD_NOT_CHECK;
14:35:12 2523  	 END;
14:35:12 2524  
14:35:12 2525  	 -- find if it was redeemed from a gift certificate
14:35:12 2526  	 BEGIN
14:35:12 2527  	   SELECT l.end_date INTO var_end_date
14:35:12 2528  	   FROM LICENSE l, GIFT_CERTIFICATE g
14:35:12 2529  	   WHERE l.invoice_id = g.finalized_invoice_id
14:35:12 2530  	   AND l.subscription_id = in_subscription_id;
14:35:12 2531  
14:35:12 2532  	   -- if the license end_date is bigger than today, we are in the
14:35:12 2533  	   -- first period, so we cannot cancel; otherwise can cancel
14:35:12 2534  	   IF var_end_date > today_date THEN
14:35:12 2535  	       RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 2536  	   ELSE
14:35:12 2537  	       RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2538  	   END IF;
14:35:12 2539  
14:35:12 2540  	   EXCEPTION
14:35:12 2541  	       -- not coming from a gift certificate,
14:35:12 2542  	       -- use old logic
14:35:12 2543  	       WHEN NO_DATA_FOUND THEN
14:35:12 2544  		   SELECT
14:35:12 2545  		       PROCS_OFFER_CHAIN_V16.IS_OFFER_CHAIN_CANCELABLE(offer_id)
14:35:12 2546  		       INTO var_is_offer_chain_cancelable
14:35:12 2547  		   FROM DUAL;
14:35:12 2548  		   RETURN var_is_offer_chain_cancelable;
14:35:12 2549  	 END;
14:35:12 2550  
14:35:12 2551  EXCEPTION
14:35:12 2552  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2553  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2554  	   SPROC_NAME, 'No such subscription');
14:35:12 2555  WHEN COULD_NOT_CHECK THEN
14:35:12 2556  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 2557  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
14:35:12 2558  WHEN OTHERS THEN
14:35:12 2559  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2560  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2561  
14:35:12 2562  END IS_SUBSCRIPTION_CANCELABLE;
14:35:12 2563  /******************************************************************************/
14:35:12 2564  
14:35:12 2565  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
14:35:12 2566  /*
14:35:12 2567  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2568  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2569  */
14:35:12 2570  	 in_subscription_id IN NUMBER,
14:35:12 2571  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 2572  ) AS
14:35:12 2573  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
14:35:12 2574  -- VARIABLES
14:35:12 2575  var_offer NUMBER;
14:35:12 2576  -- EXCEPTIONS
14:35:12 2577  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 2578  BEGIN
14:35:12 2579  
14:35:12 2580  	 OPEN out_result_set FOR
14:35:12 2581  	 SELECT DISTINCT
14:35:12 2582  	   PRODUCT_OFFERING.ID,
14:35:12 2583  	   PRODUCT_OFFERING.PRODUCT_ID,
14:35:12 2584  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
14:35:12 2585  	   PRODUCT_OFFERING.UNIT_PRICE,
14:35:12 2586  	   PRODUCT_OFFERING.QUANTITY,
14:35:12 2587  	   PRODUCT_OFFERING.CREATE_DATE,
14:35:12 2588  	   PRODUCT_OFFERING.CREATED_BY,
14:35:12 2589  	   CAPABILITY.ID CAP_ID,
14:35:12 2590  	   CAPABILITY.CODE CAP_CODE,
14:35:12 2591  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
14:35:12 2592  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
14:35:12 2593  	 FROM
14:35:12 2594  	   OFFER_PRODUCT_OFFERING
14:35:12 2595  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:35:12 2596  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
14:35:12 2597  	 WHERE
14:35:12 2598  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:35:12 2599  	     SELECT
14:35:12 2600  	       LICENSE.OFFER_ID
14:35:12 2601  	     FROM
14:35:12 2602  	       SUBSCRIPTION
14:35:12 2603  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE
14:35:12 2604  	     WHERE
14:35:12 2605  	       SUBSCRIPTION.ID = in_subscription_id
14:35:12 2606  	   );
14:35:12 2607  
14:35:12 2608  EXCEPTION
14:35:12 2609  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2610  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2611  	   SPROC_NAME, 'No such subscription');
14:35:12 2612  WHEN OTHERS THEN
14:35:12 2613  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2614  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2615  END GET_SUBSCR_PROD_OFFERRINGS;
14:35:12 2616  
14:35:12 2617  
14:35:12 2618  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
14:35:12 2619  /*
14:35:12 2620  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2621  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2622  */
14:35:12 2623  	 in_subscription_id IN NUMBER,
14:35:12 2624  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 2625  ) AS
14:35:12 2626  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
14:35:12 2627  -- VARIABLES
14:35:12 2628  var_offer NUMBER;
14:35:12 2629  -- EXCEPTIONS
14:35:12 2630  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 2631  BEGIN
14:35:12 2632  
14:35:12 2633  	 OPEN out_result_set FOR
14:35:12 2634  	 SELECT DISTINCT
14:35:12 2635  	   PRODUCT_OFFERING.ID,
14:35:12 2636  	   PRODUCT_OFFERING.PRODUCT_ID,
14:35:12 2637  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
14:35:12 2638  	   PRODUCT_OFFERING.UNIT_PRICE,
14:35:12 2639  	   PRODUCT_OFFERING.QUANTITY,
14:35:12 2640  	   PRODUCT_OFFERING.CREATE_DATE,
14:35:12 2641  	   PRODUCT_OFFERING.CREATED_BY,
14:35:12 2642  	   CAPABILITY.ID CAP_ID,
14:35:12 2643  	   CAPABILITY.CODE CAP_CODE,
14:35:12 2644  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
14:35:12 2645  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
14:35:12 2646  	 FROM
14:35:12 2647  	   OFFER_PRODUCT_OFFERING
14:35:12 2648  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:35:12 2649  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
14:35:12 2650  	 WHERE
14:35:12 2651  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:35:12 2652  	     SELECT
14:35:12 2653  	       LICENSE.OFFER_ID
14:35:12 2654  	     FROM
14:35:12 2655  	       SUBSCRIPTION
14:35:12 2656  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 2657  	     WHERE
14:35:12 2658  	       SUBSCRIPTION.ID = in_subscription_id
14:35:12 2659  	   );
14:35:12 2660  
14:35:12 2661  EXCEPTION
14:35:12 2662  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2663  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2664  	   SPROC_NAME, 'No such subscription');
14:35:12 2665  WHEN OTHERS THEN
14:35:12 2666  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2667  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2668  END RETRIEVE_SUB_PROD_OFFER;
14:35:12 2669  /******************************************************************************/
14:35:12 2670  
14:35:12 2671  
14:35:12 2672  
14:35:12 2673  
14:35:12 2674  PROCEDURE GET_SUBSCR_LIC_OFFER(
14:35:12 2675  /*
14:35:12 2676  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2677  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2678  */
14:35:12 2679  	 in_subscription_id IN NUMBER,
14:35:12 2680  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 2681  ) AS
14:35:12 2682  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
14:35:12 2683  -- VARIABLES
14:35:12 2684  var_offer_chain NUMBER;
14:35:12 2685  -- EXCEPTIONS
14:35:12 2686  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 2687  BEGIN
14:35:12 2688  	 BEGIN
14:35:12 2689  	   SELECT
14:35:12 2690  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
14:35:12 2691  	   FROM
14:35:12 2692  	     SUBSCRIPTION
14:35:12 2693  	   WHERE
14:35:12 2694  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 2695  	   EXCEPTION
14:35:12 2696  	     WHEN NO_DATA_FOUND THEN
14:35:12 2697  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 2698  	 END;
14:35:12 2699  
14:35:12 2700  	 OPEN out_result_set FOR
14:35:12 2701  	 SELECT DISTINCT
14:35:12 2702  	   po.ID po_id,
14:35:12 2703  	   po.PRODUCT_ID po_product_id,
14:35:12 2704  	   po.TAX_CATEGORY_ID po_tax_category_id,
14:35:12 2705  	   po.UNIT_PRICE po_unit_price,
14:35:12 2706  	   po.QUANTITY po_quantity,
14:35:12 2707  	   po.CREATE_DATE po_create_date,
14:35:12 2708  	   po.CREATED_BY po_created_by,
14:35:12 2709  	   l.ID l_id,
14:35:12 2710  	   l.license_status_id l_license_status_id,
14:35:12 2711  	   l.start_date l_start_date,
14:35:12 2712  	   l.offer_id l_offer_id,
14:35:12 2713  	   l.subscription_id l_subscription_id,
14:35:12 2714  	   l.invoice_id l_invoice_id,
14:35:12 2715  	   l.end_date l_end_date,
14:35:12 2716  	   l.entitlement_end_date l_entitlement_end_date,
14:35:12 2717  	   l.create_date l_create_date,
14:35:12 2718  	   l.created_by l_created_by,
14:35:12 2719  	   l.is_extension l_is_extension,
14:35:12 2720  	   l.current_offer_index l_current_offer_index,
14:35:12 2721  	   l.current_offer_recurr_num l_current_offer_recurr_num,
14:35:12 2722  	   l.needs_entitlements l_needs_entitlements
14:35:12 2723  	 FROM
14:35:12 2724  	   OFFER_PRODUCT_OFFERING opo,
14:35:12 2725  	   PRODUCT_OFFERING po,
14:35:12 2726  	   SUBSCRIPTION s,
14:35:12 2727  	   LICENSE l
14:35:12 2728  	 WHERE
14:35:12 2729  	   opo.product_offering_id = po.id
14:35:12 2730  	   and po.id = l.offer_id
14:35:12 2731  	   and l.subscription_id = s.id
14:35:12 2732  	   and l.license_status_id = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 2733  	   and s.id = in_subscription_id
14:35:12 2734  	 ;
14:35:12 2735  EXCEPTION
14:35:12 2736  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2737  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2738  	   SPROC_NAME, 'No such subscription');
14:35:12 2739  WHEN OTHERS THEN
14:35:12 2740  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2741  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2742  END GET_SUBSCR_LIC_OFFER;
14:35:12 2743  
14:35:12 2744  /******************************************************************************/
14:35:12 2745  
14:35:12 2746  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
14:35:12 2747  /*
14:35:12 2748  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2749  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2750  */
14:35:12 2751  	 in_subscription_id IN NUMBER,
14:35:12 2752  	 out_result	    OUT NUMBER
14:35:12 2753  ) AS
14:35:12 2754  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
14:35:12 2755  -- VARIABLES
14:35:12 2756  temp_subscription_id NUMBER;
14:35:12 2757  var_local_result     NUMBER;
14:35:12 2758  -- EXCEPTIONS
14:35:12 2759  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 2760  BEGIN
14:35:12 2761  
14:35:12 2762  	 -- Check that subscription exists
14:35:12 2763  	 BEGIN
14:35:12 2764  	   SELECT
14:35:12 2765  	     SUBSCRIPTION.ID into temp_subscription_id
14:35:12 2766  	   FROM
14:35:12 2767  	     SUBSCRIPTION
14:35:12 2768  	   WHERE
14:35:12 2769  	     SUBSCRIPTION.ID = in_subscription_id;
14:35:12 2770  	   EXCEPTION
14:35:12 2771  	     WHEN NO_DATA_FOUND THEN
14:35:12 2772  	       RAISE BAD_SUBSCRIPTION_ID;
14:35:12 2773  	 END;
14:35:12 2774  
14:35:12 2775  	 var_local_result := NULL;
14:35:12 2776  
14:35:12 2777  	 -- Check charges for each invoice associated with gived subscription
14:35:12 2778  	 FOR f_invoice IN (
14:35:12 2779  	   SELECT DISTINCT
14:35:12 2780  	     LICENSE.INVOICE_ID as "ID"
14:35:12 2781  	   FROM
14:35:12 2782  	     LICENSE
14:35:12 2783  	   WHERE
14:35:12 2784  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:35:12 2785  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.LICENSE_ACTIVE FROM DUAL )
14:35:12 2786  	 )
14:35:12 2787  	 LOOP
14:35:12 2788  
14:35:12 2789  	   -- Check each charge in invoice
14:35:12 2790  	   FOR f_charge IN (
14:35:12 2791  	     SELECT
14:35:12 2792  	       CHARGE.ID,
14:35:12 2793  	       CHARGE.CHARGE_STATUS_ID,
14:35:12 2794  	       CHARGE.CHARGE_AMOUNT
14:35:12 2795  	     FROM
14:35:12 2796  	       CHARGE
14:35:12 2797  	     WHERE
14:35:12 2798  	       CHARGE.INVOICE_ID = f_invoice.ID
14:35:12 2799  	   )
14:35:12 2800  	   LOOP
14:35:12 2801  
14:35:12 2802  	     -- Charge amount < 0     => it is a refund
14:35:12 2803  	     -- Charge status is OPEN => means that it is not processed yet
14:35:12 2804  	     IF f_charge.CHARGE_AMOUNT < 0
14:35:12 2805  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED THEN
14:35:12 2806  	       var_local_result := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2807  	     END IF;
14:35:12 2808  
14:35:12 2809  	   END LOOP;
14:35:12 2810  
14:35:12 2811  	 END LOOP;
14:35:12 2812  
14:35:12 2813  	 IF var_local_result IS NULL THEN
14:35:12 2814  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 2815  	 ELSE
14:35:12 2816  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2817  	 END IF;
14:35:12 2818  
14:35:12 2819  EXCEPTION
14:35:12 2820  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 2821  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2822  	   SPROC_NAME, 'No such transaction id');
14:35:12 2823  WHEN OTHERS THEN
14:35:12 2824  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2825  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2826  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
14:35:12 2827  
14:35:12 2828  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
14:35:12 2829  /*
14:35:12 2830  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2831  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2832  */
14:35:12 2833  	 in_group_id	    IN NUMBER,
14:35:12 2834  	 in_offer_chain_id  IN NUMBER,
14:35:12 2835  	 out_result	    OUT NUMBER
14:35:12 2836  ) AS
14:35:12 2837  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
14:35:12 2838  -- VARIABLES
14:35:12 2839  temp_acct_id	    NUMBER;
14:35:12 2840  temp_oc_id	    NUMBER;
14:35:12 2841  -- EXCEPTIONS
14:35:12 2842  BAD_GROUP_ID EXCEPTION;
14:35:12 2843  BAD_OFFER_CHAIN_ID EXCEPTION;
14:35:12 2844  BEGIN
14:35:12 2845  	 -- Check that group id exists
14:35:12 2846  	 BEGIN
14:35:12 2847  	   SELECT
14:35:12 2848  	     ACCOUNT.ID into temp_acct_id
14:35:12 2849  	   FROM
14:35:12 2850  	     ACCOUNT
14:35:12 2851  	   WHERE
14:35:12 2852  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 2853  	   EXCEPTION
14:35:12 2854  	     WHEN NO_DATA_FOUND THEN
14:35:12 2855  	       RAISE BAD_GROUP_ID;
14:35:12 2856  	 END;
14:35:12 2857  	 -- Check that offer chain id exists
14:35:12 2858  	 BEGIN
14:35:12 2859  	   SELECT
14:35:12 2860  	     OFFER_CHAIN.ID into temp_oc_id
14:35:12 2861  	   FROM
14:35:12 2862  	     OFFER_CHAIN
14:35:12 2863  	   WHERE
14:35:12 2864  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:35:12 2865  	   EXCEPTION
14:35:12 2866  	     WHEN NO_DATA_FOUND THEN
14:35:12 2867  	       RAISE BAD_OFFER_CHAIN_ID;
14:35:12 2868  	 END;
14:35:12 2869  	 SELECT
14:35:12 2870  	   COUNT(*) into out_result
14:35:12 2871  	 FROM
14:35:12 2872  	   SUBSCRIPTION
14:35:12 2873  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:35:12 2874  	 WHERE
14:35:12 2875  	   ACCOUNT.GROUP_ID = in_group_id
14:35:12 2876  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 2877  	   AND (
14:35:12 2878  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 2879  	   );
14:35:12 2880  
14:35:12 2881  EXCEPTION
14:35:12 2882  WHEN BAD_GROUP_ID THEN
14:35:12 2883  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2884  	   SPROC_NAME, 'No such transaction id');
14:35:12 2885  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:12 2886  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2887  	   SPROC_NAME, 'No such offer chain id');
14:35:12 2888  WHEN OTHERS THEN
14:35:12 2889  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2890  	   sproc_name, 'Unknown error', sqlerrm);
14:35:12 2891  END GET_EXISTING_SUBSCR_NUMBER;
14:35:12 2892  
14:35:12 2893  PROCEDURE GET_EXISTING_SUBSCR_IDS (
14:35:12 2894  /*
14:35:12 2895  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2896  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2897  */
14:35:12 2898  	 in_group_id	    IN NUMBER,
14:35:12 2899  	 in_offer_chain_id  IN NUMBER,
14:35:12 2900  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 2901  ) AS
14:35:12 2902  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
14:35:12 2903  -- VARIABLES
14:35:12 2904  temp_acct_id	    NUMBER;
14:35:12 2905  temp_oc_id	    NUMBER;
14:35:12 2906  -- EXCEPTIONS
14:35:12 2907  BAD_GROUP_ID EXCEPTION;
14:35:12 2908  BAD_OFFER_CHAIN_ID EXCEPTION;
14:35:12 2909  BEGIN
14:35:12 2910  
14:35:12 2911  	 -- Check that group id exists
14:35:12 2912  	 BEGIN
14:35:12 2913  	   SELECT
14:35:12 2914  	     ACCOUNT.ID into temp_acct_id
14:35:12 2915  	   FROM
14:35:12 2916  	     ACCOUNT
14:35:12 2917  	   WHERE
14:35:12 2918  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 2919  	   EXCEPTION
14:35:12 2920  	     WHEN NO_DATA_FOUND THEN
14:35:12 2921  	       RAISE BAD_GROUP_ID;
14:35:12 2922  	 END;
14:35:12 2923  	 -- Check that offer chain id exists
14:35:12 2924  	 BEGIN
14:35:12 2925  	   SELECT
14:35:12 2926  	     OFFER_CHAIN.ID into temp_oc_id
14:35:12 2927  	   FROM
14:35:12 2928  	     OFFER_CHAIN
14:35:12 2929  	   WHERE
14:35:12 2930  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:35:12 2931  	   EXCEPTION
14:35:12 2932  	     WHEN NO_DATA_FOUND THEN
14:35:12 2933  	       RAISE BAD_OFFER_CHAIN_ID;
14:35:12 2934  	 END;
14:35:12 2935  
14:35:12 2936  	 OPEN out_result_set FOR
14:35:12 2937  	 SELECT
14:35:12 2938  	   SUBSCRIPTION.ID
14:35:12 2939  	 FROM
14:35:12 2940  	   SUBSCRIPTION
14:35:12 2941  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:35:12 2942  	 WHERE
14:35:12 2943  	   ACCOUNT.GROUP_ID = in_group_id
14:35:12 2944  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 2945  	   AND (
14:35:12 2946  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 2947  	   );
14:35:12 2948  
14:35:12 2949  EXCEPTION
14:35:12 2950  WHEN BAD_GROUP_ID THEN
14:35:12 2951  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2952  	   SPROC_NAME, 'No such transaction id');
14:35:12 2953  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:12 2954  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2955  	   SPROC_NAME, 'No such offer chain id');
14:35:12 2956  WHEN OTHERS THEN
14:35:12 2957  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2958  	   sproc_name, 'Unknown error', sqlerrm);
14:35:12 2959  END GET_EXISTING_SUBSCR_IDS;
14:35:12 2960  
14:35:12 2961  PROCEDURE ADD_META_DATA (
14:35:12 2962  /*
14:35:12 2963  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 2964  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 2965  */
14:35:12 2966  	 in_subscription_id IN NUMBER,
14:35:12 2967  	 in_name	    IN VARCHAR2,
14:35:12 2968  	 in_value	    IN VARCHAR2,
14:35:12 2969  	 in_created_by	    IN VARCHAR2
14:35:12 2970  ) AS
14:35:12 2971  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
14:35:12 2972  BEGIN
14:35:12 2973  
14:35:12 2974  	 INSERT INTO SUBSCRIPTION_META_DATA (
14:35:12 2975  	   ID,
14:35:12 2976  	   SUBSCRIPTION_ID,
14:35:12 2977  	   NAME,
14:35:12 2978  	   VALUE,
14:35:12 2979  	   CREATE_DATE,
14:35:12 2980  	   CREATED_BY
14:35:12 2981  	 ) VALUES (
14:35:12 2982  	   SUBMD_ID_SEQ.nextVal,
14:35:12 2983  	   in_subscription_id,
14:35:12 2984  	   in_name,
14:35:12 2985  	   in_value,
14:35:12 2986  	   sysdate,
14:35:12 2987  	   in_created_by
14:35:12 2988  	 );
14:35:12 2989  
14:35:12 2990  EXCEPTION
14:35:12 2991  WHEN OTHERS THEN
14:35:12 2992  	 IF SQLCODE = -2291 THEN
14:35:12 2993  	   PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2994  	     SPROC_NAME, 'No such subscription');
14:35:12 2995  	 ELSE
14:35:12 2996  	   PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2997  	     SPROC_NAME, 'Unknown error', sqlerrm);
14:35:12 2998  	 END IF;
14:35:12 2999  END ADD_META_DATA;
14:35:12 3000  
14:35:12 3001  /******************************************************************************/
14:35:12 3002  
14:35:12 3003  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
14:35:12 3004  /*
14:35:12 3005  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:12 3006  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 3007  */
14:35:12 3008  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
14:35:12 3009  	 out_result_set       OUT SYS_REFCURSOR
14:35:12 3010  ) AS
14:35:12 3011  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
14:35:12 3012  -- Exceptions
14:35:12 3013  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
14:35:12 3014  BEGIN
14:35:12 3015  
14:35:12 3016  	 IF in_subscriptions_ids IS NULL THEN
14:35:12 3017  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
14:35:12 3018  	 END IF;
14:35:12 3019  
14:35:12 3020  	 OPEN out_result_set FOR
14:35:12 3021  	 SELECT
14:35:12 3022  	   SMD.SUBSCRIPTION_ID,
14:35:12 3023  	   SMD.NAME,
14:35:12 3024  	   SMD.VALUE
14:35:12 3025  	 FROM
14:35:12 3026  	   SUBSCRIPTION_META_DATA SMD
14:35:12 3027  	 WHERE
14:35:12 3028  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
14:35:12 3029  
14:35:12 3030  EXCEPTION
14:35:12 3031  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
14:35:12 3032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 3033  	   SPROC_NAME, 'Bad subscription ids parameter');
14:35:12 3034  WHEN OTHERS THEN
14:35:12 3035  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 3036  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 3037  END GET_SUBSCRIPTIONS_META_DATA;
14:35:12 3038  
14:35:12 3039  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
14:35:12 3040  /*
14:35:12 3041  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 3042  */
14:35:12 3043  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
14:35:12 3044  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 3045  ) AS
14:35:12 3046  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
14:35:12 3047  BEGIN
14:35:12 3048  	 OPEN out_result_set FOR
14:35:12 3049  	 SELECT subscription.id FROM
14:35:12 3050  	   subscription
14:35:12 3051  	 INNER JOIN license ON license.subscription_id = subscription.id
14:35:12 3052  	 INNER JOIN invoice ON invoice.id = license.invoice_id
14:35:12 3053  	 INNER JOIN charge ON invoice.id = charge.invoice_id
14:35:12 3054  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
14:35:12 3055  	 WHERE transaction.order_id = in_order_id;
14:35:12 3056  EXCEPTION
14:35:12 3057  WHEN OTHERS THEN
14:35:12 3058  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 3059  	   SPROC_NAME, 'Unknown error', sqlerrm);
14:35:12 3060  END GET_SUBS_BY_TRNS_ORDER_ID;
14:35:12 3061  
14:35:12 3062  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
14:35:12 3063  	(
14:35:12 3064  /*
14:35:12 3065  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 3066  */
14:35:12 3067  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:35:12 3068  	 out_result_set      OUT SYS_REFCURSOR
14:35:12 3069  )
14:35:12 3070  AS
14:35:12 3071  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
14:35:12 3072  BEGIN
14:35:12 3073  	 OPEN out_result_set FOR
14:35:12 3074  	 SELECT
14:35:12 3075  	   c.ID,
14:35:12 3076  	   c.TRANSACTION_ID,
14:35:12 3077  	   c.INSTRUMENT_ID,
14:35:12 3078  	   c.INSTRUMENT_TYPE_ID,
14:35:12 3079  	   c.CHARGE_AMOUNT,
14:35:12 3080  	   c.CREATE_DATE,
14:35:12 3081  	   c.CREATED_BY,
14:35:12 3082  	   c.INVOICE_ID
14:35:12 3083  	  FROM
14:35:12 3084  	   subscription s,
14:35:12 3085  	   license l,
14:35:12 3086  	   charge c
14:35:12 3087  	 WHERE
14:35:12 3088  	   s.id = l.subscription_id and
14:35:12 3089  	   l.invoice_id = c.invoice_id and
14:35:12 3090  	   c.charge_status_id = GLOBAL_STATUSES_V16.CHARGE_OPENED and
14:35:12 3091  	   exists (
14:35:12 3092  	     select null
14:35:12 3093  	     from transaction t
14:35:12 3094  	     where
14:35:12 3095  	       t.id = c.transaction_id
14:35:12 3096  	   ) and
14:35:12 3097  	   s.id = in_subscription_id;
14:35:12 3098  EXCEPTION
14:35:12 3099  WHEN OTHERS THEN
14:35:12 3100  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 3101  	   SPROC_NAME, 'Unknown error', sqlerrm);
14:35:12 3102  END GET_OPEN_CHARGES_BY_SUBID;
14:35:12 3103  
14:35:12 3104  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
14:35:12 3105  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
14:35:12 3106  ) RETURN NUMBER
14:35:12 3107  AS
14:35:12 3108  var_gift_certificate_id NUMBER;
14:35:12 3109  BEGIN
14:35:12 3110  	     SELECT id INTO var_gift_certificate_id
14:35:12 3111  	     FROM
14:35:12 3112  	       gift_certificate gc
14:35:12 3113  	     WHERE
14:35:12 3114  	       gc.finalized_invoice_id in (
14:35:12 3115  		 SELECT invoice_id
14:35:12 3116  		 FROM (
14:35:12 3117  		   SELECT l.invoice_id
14:35:12 3118  		   FROM
14:35:12 3119  		     license l
14:35:12 3120  		   WHERE
14:35:12 3121  		     l.subscription_id = in_subscription_id
14:35:12 3122  		   ORDER BY l.create_date asc
14:35:12 3123  		 )
14:35:12 3124  	       )
14:35:12 3125  	       and rownum <= 1;
14:35:12 3126  	     return var_gift_certificate_id;
14:35:12 3127  END GET_GIFT_CERT_ID_BY_SUB_ID;
14:35:12 3128  
14:35:12 3129  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
14:35:12 3130  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
14:35:12 3131  ) RETURN VARCHAR2
14:35:12 3132  AS
14:35:12 3133  var_gift_certificate_code VARCHAR2(255 BYTE);
14:35:12 3134  BEGIN
14:35:12 3135  	     SELECT code INTO var_gift_certificate_code
14:35:12 3136  	     FROM
14:35:12 3137  	       gift_certificate gc
14:35:12 3138  	     WHERE
14:35:12 3139  	       gc.finalized_invoice_id in (
14:35:12 3140  		 SELECT invoice_id
14:35:12 3141  		 FROM (
14:35:12 3142  		   SELECT l.invoice_id
14:35:12 3143  		   FROM
14:35:12 3144  		     license l
14:35:12 3145  		   WHERE
14:35:12 3146  		     l.subscription_id = in_subscription_id
14:35:12 3147  		 )
14:35:12 3148  	       )
14:35:12 3149  	       and rownum <= 1;
14:35:12 3150  	     return var_gift_certificate_code;
14:35:12 3151  END GET_GIFT_CERT_CODE_BY_SUB_ID;
14:35:12 3152  
14:35:12 3153  
14:35:12 3154  
14:35:12 3155  PROCEDURE GET_ACTIVE_MEU_SUBS (
14:35:12 3156  	 out_result_set      OUT SYS_REFCURSOR
14:35:12 3157  )
14:35:12 3158  AS
14:35:12 3159  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
14:35:12 3160  BEGIN
14:35:12 3161  	 OPEN out_result_set FOR
14:35:12 3162  	       SELECT
14:35:12 3163  		   s.id,
14:35:12 3164  		   s.instrument_type_id,
14:35:12 3165  		   s.instrument_id,
14:35:12 3166  		   a.group_id,
14:35:12 3167  		   s.offer_chain_id
14:35:12 3168  	       FROM
14:35:12 3169  		   core_owner.subscription s,
14:35:12 3170  		   core_owner.account a
14:35:12 3171  	       WHERE
14:35:12 3172  		   a.id = s.account_id AND(
14:35:12 3173  		       s.offer_chain_id = 1745992781 OR
14:35:12 3174  		       s.offer_chain_id = 3902149773 OR
14:35:12 3175  		       s.offer_chain_id = 2240201337) AND
14:35:12 3176  		   NOT EXISTS
14:35:12 3177  		   (
14:35:12 3178  		       SELECT
14:35:12 3179  			   1
14:35:12 3180  		       FROM
14:35:12 3181  			   core_owner.subscription ss
14:35:12 3182  		       WHERE
14:35:12 3183  			   ss.account_id = a.id AND(
14:35:12 3184  			       ss.offer_chain_id = 2794122734 OR
14:35:12 3185  			       ss.offer_chain_id = 3564368005 OR
14:35:12 3186  			       ss.offer_chain_id = 757934392)) AND
14:35:12 3187  		   rownum < 5000;
14:35:12 3188  END GET_ACTIVE_MEU_SUBS;
14:35:12 3189  
14:35:12 3190  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
14:35:12 3191  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:35:12 3192  	 out_offer_id	     OUT NUMBER
14:35:12 3193  )
14:35:12 3194  AS
14:35:12 3195  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
14:35:12 3196  BEGIN
14:35:12 3197  	 SELECT OFFER_ID INTO out_offer_id
14:35:12 3198  	 FROM LICENSE L,
14:35:12 3199  	 (
14:35:12 3200  	   SELECT MIN(ID) ID FROM LICENSE
14:35:12 3201  	   WHERE SUBSCRIPTION_ID = in_subscription_id
14:35:12 3202  	   AND LICENSE_STATUS_ID = 2
14:35:12 3203  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
14:35:12 3204  	 ) EARLIEST_ACTIVE_LICENSE
14:35:12 3205  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
14:35:12 3206  END GET_EARLIEST_ACTIVE_OFFER_ID;
14:35:12 3207  
14:35:12 3208  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
14:35:12 3209  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:35:12 3210  	 out_license_id        OUT NUMBER
14:35:12 3211  )
14:35:12 3212  AS
14:35:12 3213  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
14:35:12 3214  BEGIN
14:35:12 3215  	 SELECT MIN(ID) into out_license_id
14:35:12 3216  	 FROM LICENSE
14:35:12 3217  	 WHERE SUBSCRIPTION_ID = in_subscription_id
14:35:12 3218  	 AND LICENSE_STATUS_ID = 2
14:35:12 3219  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
14:35:12 3220  END GET_EARLIEST_ACTIVE_LICENSE_ID;
14:35:12 3221  
14:35:12 3222  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
14:35:12 3223  	 out_result_set      OUT SYS_REFCURSOR
14:35:12 3224  )
14:35:12 3225  AS
14:35:12 3226  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
14:35:12 3227  BEGIN
14:35:12 3228  	 OPEN out_result_set FOR
14:35:12 3229  	   SELECT
14:35:12 3230  	     s.id
14:35:12 3231  	   FROM
14:35:12 3232  	     core_owner.transaction t
14:35:12 3233  	   INNER JOIN
14:35:12 3234  	     core_owner.charge c
14:35:12 3235  	   ON
14:35:12 3236  	     c.transaction_id = t.id
14:35:12 3237  	   INNER JOIN
14:35:12 3238  	     core_owner.invoice i
14:35:12 3239  	   ON
14:35:12 3240  	     i.id = c.invoice_id
14:35:12 3241  	   INNER JOIN
14:35:12 3242  	     core_owner.license l
14:35:12 3243  	   ON
14:35:12 3244  	     i.id = l.invoice_id
14:35:12 3245  	   INNER JOIN
14:35:12 3246  	     core_owner.subscription s
14:35:12 3247  	   ON
14:35:12 3248  	     l.subscription_id = s.id
14:35:12 3249  	   INNER JOIN
14:35:12 3250  	     core_owner.account a
14:35:12 3251  	   ON
14:35:12 3252  	     s.account_id = a.id
14:35:12 3253  	   JOIN
14:35:12 3254  	     core_owner.rcn_cpt_chargeback_act_detail ccad
14:35:12 3255  	   ON
14:35:12 3256  	     t.order_id = ccad.merchant_order_number
14:35:12 3257  	   WHERE
14:35:12 3258  	     ccad.chargeback_category = 'RECD'
14:35:12 3259  	   AND s.subscription_status_id = 1;
14:35:12 3260  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
14:35:12 3261  
14:35:12 3262  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
14:35:12 3263  	 out_result_set      OUT SYS_REFCURSOR
14:35:12 3264  )
14:35:12 3265  AS
14:35:12 3266  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
14:35:12 3267  BEGIN
14:35:12 3268  	 OPEN out_result_set FOR
14:35:12 3269  	   SELECT
14:35:12 3270  	     s.id
14:35:12 3271  	   FROM
14:35:12 3272  	     core_owner.transaction t
14:35:12 3273  	   INNER JOIN
14:35:12 3274  	     core_owner.charge c
14:35:12 3275  	   ON
14:35:12 3276  	     c.transaction_id = t.id
14:35:12 3277  	   INNER JOIN
14:35:12 3278  	     core_owner.invoice i
14:35:12 3279  	   ON
14:35:12 3280  	     i.id = c.invoice_id
14:35:12 3281  	   INNER JOIN
14:35:12 3282  	     core_owner.license l
14:35:12 3283  	   ON
14:35:12 3284  	     i.id = l.invoice_id
14:35:12 3285  	   INNER JOIN
14:35:12 3286  	     core_owner.subscription s
14:35:12 3287  	   ON
14:35:12 3288  	     l.subscription_id = s.id
14:35:12 3289  	   INNER JOIN
14:35:12 3290  	     core_owner.account a
14:35:12 3291  	   ON
14:35:12 3292  	     s.account_id = a.id
14:35:12 3293  	   INNER JOIN
14:35:12 3294  	     core_owner.rcn_pp_trans_detail ptd
14:35:12 3295  	   ON
14:35:12 3296  	     t.order_id = ptd.invoice_id
14:35:12 3297  	   WHERE
14:35:12 3298  	     ptd.trans_status = 'D'
14:35:12 3299  	   AND s.subscription_status_id = 1;
14:35:12 3300  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
14:35:12 3301  
14:35:12 3302  END PROCS_SUBSCRIPTION_V16;
14:35:12 3303  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.06
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE IS_INVOICE_FOR_GC (
14:35:12   4  	in_invoice_id IN NUMBER,
14:35:12   5  	out_result    OUT NUMBER
14:35:12   6  ) AS
14:35:12   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
14:35:12   8  var_is_for_gc NUMBER;
14:35:12   9  BEGIN
14:35:12  10  	SELECT
14:35:12  11  	  count(1) into var_is_for_gc
14:35:12  12  	FROM GIFT_CERTIFICATE GC
14:35:12  13  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
14:35:12  14  
14:35:12  15  	IF var_is_for_gc > 0 THEN
14:35:12  16  	  out_result := 1;
14:35:12  17  	ELSE
14:35:12  18  	  out_result := 0;
14:35:12  19  	END IF;
14:35:12  20  END IS_INVOICE_FOR_GC;
14:35:12  21  
14:35:12  22  PROCEDURE CREATE_INVOICE(
14:35:12  23  /*
14:35:12  24  Throws exceptions:
14:35:12  25  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  26  */
14:35:12  27  	  in_invoice_status IN NUMBER,
14:35:12  28  	  in_created_by     IN VARCHAR2,
14:35:12  29  	  in_tax_exempt_id  IN VARCHAR2,
14:35:12  30  	  out_invoice_id    OUT NUMBER
14:35:12  31  ) AS
14:35:12  32  -- VARIABLES
14:35:12  33  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
14:35:12  34  var_new_invoice_id NUMBER;
14:35:12  35  -- EXCEPTIONS
14:35:12  36  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12  37  BEGIN
14:35:12  38  
14:35:12  39  	PROCS_INVOICE_CRU_V16.CREATE_INVOICE(
14:35:12  40  	  out_invoice_id		 => var_new_invoice_id,
14:35:12  41  	  in_created_by 		 => in_created_by,
14:35:12  42  	  in_invoice_status_id		 => in_invoice_status,
14:35:12  43  	  in_tax_exempt_id		 => in_tax_exempt_id
14:35:12  44  	);
14:35:12  45  
14:35:12  46  	out_invoice_id := var_new_invoice_id;
14:35:12  47  
14:35:12  48  EXCEPTION
14:35:12  49  WHEN OTHERS THEN
14:35:12  50  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12  51  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12  52  END CREATE_INVOICE;
14:35:12  53  
14:35:12  54  /************************************************************/
14:35:12  55  
14:35:12  56  PROCEDURE GET_PENDING_INVOICES (
14:35:12  57  /*
14:35:12  58  Throws exceptions:
14:35:12  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  60  */
14:35:12  61  	out_result_set1      OUT SYS_REFCURSOR,
14:35:12  62  	out_result_set2      OUT SYS_REFCURSOR,
14:35:12  63  	out_result_set3      OUT SYS_REFCURSOR,
14:35:12  64  	in_row_number	     IN NUMBER DEFAULT NULL
14:35:12  65  ) AS
14:35:12  66  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
14:35:12  67  -- COMSTANTS
14:35:12  68  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
14:35:12  69  -- VARIABLES
14:35:12  70  var_row_number NUMBER;
14:35:12  71  BEGIN
14:35:12  72  
14:35:12  73  	IF in_row_number IS NULL THEN
14:35:12  74  	  var_row_number := DEFAULT_ROW_NUMBER;
14:35:12  75  	ELSE
14:35:12  76  	  var_row_number := in_row_number;
14:35:12  77  	END IF;
14:35:12  78  
14:35:12  79  	-- Invoices with one or more payments(charges) with transaction status PENDING
14:35:12  80  	OPEN out_result_set1 FOR
14:35:12  81  SELECT * FROM
14:35:12  82  (
14:35:12  83  	SELECT
14:35:12  84  	  INVOICE.ID
14:35:12  85  	FROM
14:35:12  86  	  CHARGE
14:35:12  87  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
14:35:12  88  	WHERE
14:35:12  89  	  EXISTS(
14:35:12  90  	    SELECT NULL
14:35:12  91  	    FROM TRANSACTION
14:35:12  92  	    WHERE
14:35:12  93  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
14:35:12  94  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
14:35:12  95  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V16.TRUE
14:35:12  96  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
14:35:12  97  	  )
14:35:12  98  	  AND
14:35:12  99  	  NOT EXISTS(
14:35:12 100  	    SELECT NULL
14:35:12 101  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:12 102  	    WHERE PROCESS_NAME = SPROC_NAME
14:35:12 103  	      AND GENERIC_ID = INVOICE.ID
14:35:12 104  	  )
14:35:12 105  	  AND ROWNUM <= var_row_number*10
14:35:12 106  	  ORDER BY dbms_random.value
14:35:12 107  ) WHERE
14:35:12 108  	  ROWNUM <= var_row_number;
14:35:12 109  
14:35:12 110  	-- Invoices not marked as CLOSED but are fully paid (shouldn't happen).
14:35:12 111  	OPEN out_result_set2 FOR
14:35:12 112  	SELECT
14:35:12 113  	  INVOICE.ID
14:35:12 114  	FROM
14:35:12 115  	  INVOICE
14:35:12 116  	WHERE
14:35:12 117  	  1 = 2 AND
14:35:12 118  	  (
14:35:12 119  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V16.INVOICE_OPEN
14:35:12 120  	  )
14:35:12 121  	  AND NOT EXISTS(
14:35:12 122  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED AND ROWNUM <= 1
14:35:12 123  	  )
14:35:12 124  	  AND EXISTS (
14:35:12 125  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID != GLOBAL_STATUSES_V16.CHARGE_OPENED AND ROWNUM <= 1
14:35:12 126  	  )
14:35:12 127  	  AND INVOICE.ID NOT IN
14:35:12 128  	    (
14:35:12 129  	      SELECT GENERIC_ID
14:35:12 130  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:12 131  	      WHERE
14:35:12 132  		PROCESS_NAME = SPROC_NAME
14:35:12 133  	    )
14:35:12 134  	  AND ROWNUM <= var_row_number;
14:35:12 135  
14:35:12 136  	-- Invoices not marked as CLOSED with no payments(charges).
14:35:12 137  	OPEN out_result_set3 FOR
14:35:12 138  	SELECT
14:35:12 139  	  INVOICE.ID
14:35:12 140  	FROM
14:35:12 141  	  INVOICE
14:35:12 142  	WHERE
14:35:12 143  	  1 = 2 AND
14:35:12 144  	  (
14:35:12 145  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V16.INVOICE_OPEN
14:35:12 146  	  )
14:35:12 147  	  AND NOT EXISTS (
14:35:12 148  	    SELECT 1 FROM CHARGE WHERE CHARGE.INVOICE_ID = INVOICE.ID AND ROWNUM <= 1
14:35:12 149  	  )
14:35:12 150  	  AND INVOICE.ID NOT IN
14:35:12 151  	    (
14:35:12 152  	      SELECT GENERIC_ID
14:35:12 153  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:12 154  	      WHERE
14:35:12 155  		PROCESS_NAME = SPROC_NAME
14:35:12 156  	    )
14:35:12 157  	  AND ROWNUM <= var_row_number;
14:35:12 158  
14:35:12 159  EXCEPTION
14:35:12 160  WHEN OTHERS THEN
14:35:12 161  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 163  END GET_PENDING_INVOICES;
14:35:12 164  
14:35:12 165  /************************************************************/
14:35:12 166  
14:35:12 167  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
14:35:12 168  	in_invoice_id IN  NUMBER
14:35:12 169  ) RETURN NUMBER AS
14:35:12 170  var_amount NUMBER;
14:35:12 171  BEGIN
14:35:12 172  
14:35:12 173  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
14:35:12 174  	RETURN var_amount;
14:35:12 175  
14:35:12 176  END;
14:35:12 177  
14:35:12 178  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:35:12 179  /*
14:35:12 180  Throws exceptions:
14:35:12 181  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 182  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 183  */
14:35:12 184  	in_invoice_id IN  NUMBER,
14:35:12 185  	out_amount    OUT NUMBER
14:35:12 186  ) AS
14:35:12 187  -- VARIABLES
14:35:12 188  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
14:35:12 189  temp_invoice_id	     NUMBER;
14:35:12 190  var_total_amount	     NUMBER(10,6);
14:35:12 191  var_final_amount	     NUMBER(10,2);
14:35:12 192  var_line_item_amount   NUMBER(10,6);
14:35:12 193  
14:35:12 194  var_line_items_set     SYS_REFCURSOR;
14:35:12 195  var_line_item_id	     NUMBER;
14:35:12 196  var_line_item_quantity NUMBER;
14:35:12 197  var_line_item_price    NUMBER (10,2);
14:35:12 198  
14:35:12 199  var_discount_fixed_amount NUMBER (10,2);
14:35:12 200  var_discount_percent_amount NUMBER (10,2);
14:35:12 201  
14:35:12 202  -- EXCEPTIONS
14:35:12 203  BAD_INVOICE_ID		    EXCEPTION;
14:35:12 204  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
14:35:12 205  EXCEPTION_MESSAGE VARCHAR2(1024);
14:35:12 206  BEGIN
14:35:12 207  
14:35:12 208  	var_total_amount := 0;
14:35:12 209  
14:35:12 210  	-- Check that given invoice exists
14:35:12 211  	BEGIN
14:35:12 212  	  SELECT
14:35:12 213  	    INVOICE.ID into temp_invoice_id
14:35:12 214  	  FROM
14:35:12 215  	    INVOICE
14:35:12 216  	  WHERE
14:35:12 217  	    INVOICE.ID = in_invoice_id
14:35:12 218  	    AND ROWNUM <= 1;
14:35:12 219  	  EXCEPTION
14:35:12 220  	    WHEN NO_DATA_FOUND THEN
14:35:12 221  	      RAISE BAD_INVOICE_ID;
14:35:12 222  	END;
14:35:12 223  
14:35:12 224  	-- Calculate amount for each line item in invoice
14:35:12 225  	FOR f_line_item IN (
14:35:12 226  	  SELECT
14:35:12 227  	    LINE_ITEM.ID
14:35:12 228  	  FROM
14:35:12 229  	    LINE_ITEM
14:35:12 230  	  WHERE
14:35:12 231  	    LINE_ITEM.INVOICE_ID = in_invoice_id
14:35:12 232  	)
14:35:12 233  	LOOP
14:35:12 234  	  BEGIN
14:35:12 235  	    PROCS_LINE_ITEMS_V16.CALCULATE_LINE_ITEM_AMOUNT(
14:35:12 236  	      in_line_item_id => f_line_item.ID,
14:35:12 237  	      out_amount      => var_line_item_amount
14:35:12 238  	    );
14:35:12 239  	    var_total_amount := var_total_amount + var_line_item_amount;
14:35:12 240  	    EXCEPTION
14:35:12 241  	      WHEN OTHERS THEN
14:35:12 242  		EXCEPTION_MESSAGE := SQLERRM;
14:35:12 243  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
14:35:12 244  	  END;
14:35:12 245  	END LOOP;
14:35:12 246  	var_final_amount := var_total_amount;
14:35:12 247  	out_amount := var_final_amount;
14:35:12 248  
14:35:12 249  EXCEPTION
14:35:12 250  WHEN BAD_INVOICE_ID THEN
14:35:12 251  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 252  	  SPROC_NAME, 'No such invoice');
14:35:12 253  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
14:35:12 254  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 255  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
14:35:12 256  WHEN OTHERS THEN
14:35:12 257  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 258  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 259  END;
14:35:12 260  
14:35:12 261  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
14:35:12 262  /*
14:35:12 263  Throws exceptions:
14:35:12 264  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 265  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 266  */
14:35:12 267  	in_invoice_id  IN  NUMBER,
14:35:12 268  	out_account_id OUT NUMBER
14:35:12 269  ) AS
14:35:12 270  -- VARIABLES
14:35:12 271  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
14:35:12 272  temp_gc_account_id NUMBER;
14:35:12 273  temp_ss_account_id NUMBER;
14:35:12 274  temp_invoice_id	 NUMBER;
14:35:12 275  -- EXCEPTIONS
14:35:12 276  BAD_INVOICE_ID	   EXCEPTION;
14:35:12 277  CAN_NOT_FIND_ACCOUNT EXCEPTION;
14:35:12 278  BEGIN
14:35:12 279  
14:35:12 280  	-- Check that given invoice exists
14:35:12 281  	BEGIN
14:35:12 282  	  SELECT
14:35:12 283  	    INVOICE.ID into temp_invoice_id
14:35:12 284  	  FROM
14:35:12 285  	    INVOICE
14:35:12 286  	  WHERE
14:35:12 287  	    INVOICE.ID = in_invoice_id;
14:35:12 288  	  EXCEPTION
14:35:12 289  	    WHEN NO_DATA_FOUND THEN
14:35:12 290  	      RAISE BAD_INVOICE_ID;
14:35:12 291  	END;
14:35:12 292  
14:35:12 293  	-- Try to find gift certificate with given invoice
14:35:12 294  	BEGIN
14:35:12 295  	  SELECT
14:35:12 296  	    ACCOUNT.GROUP_ID into temp_gc_account_id
14:35:12 297  	  FROM
14:35:12 298  	    GIFT_CERTIFICATE
14:35:12 299  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
14:35:12 300  	  WHERE
14:35:12 301  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
14:35:12 302  	    AND ROWNUM <= 1;
14:35:12 303  	  EXCEPTION
14:35:12 304  	    WHEN NO_DATA_FOUND THEN
14:35:12 305  	      temp_gc_account_id := NULL;
14:35:12 306  	END;
14:35:12 307  
14:35:12 308  	-- check subscriptions for given invoice
14:35:12 309  	IF temp_gc_account_id IS NOT NULL THEN
14:35:12 310  	  out_account_id := temp_gc_account_id;
14:35:12 311  	ELSE
14:35:12 312  	  BEGIN
14:35:12 313  	    SELECT
14:35:12 314  	      ACCOUNT.GROUP_ID into temp_ss_account_id
14:35:12 315  	    FROM
14:35:12 316  	      LICENSE
14:35:12 317  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 318  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:35:12 319  	    WHERE
14:35:12 320  	      LICENSE.INVOICE_ID = in_invoice_id
14:35:12 321  	      AND ROWNUM <= 1;
14:35:12 322  	    EXCEPTION
14:35:12 323  	      WHEN NO_DATA_FOUND THEN
14:35:12 324  		temp_ss_account_id := NULL;
14:35:12 325  	  END;
14:35:12 326  	  IF temp_ss_account_id IS NULL THEN
14:35:12 327  	    RAISE CAN_NOT_FIND_ACCOUNT;
14:35:12 328  	  ELSE
14:35:12 329  	    out_account_id := temp_ss_account_id;
14:35:12 330  	  END IF;
14:35:12 331  	END IF;
14:35:12 332  
14:35:12 333  EXCEPTION
14:35:12 334  WHEN BAD_INVOICE_ID THEN
14:35:12 335  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 336  	  SPROC_NAME, 'No such invoice');
14:35:12 337  WHEN CAN_NOT_FIND_ACCOUNT THEN
14:35:12 338  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 339  	  SPROC_NAME, 'Could not find account by given invoice id');
14:35:12 340  WHEN OTHERS THEN
14:35:12 341  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 342  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 343  END GET_ACCOUNT_BY_INVOICE_ID;
14:35:12 344  
14:35:12 345  /*****************************************************************/
14:35:12 346  
14:35:12 347  PROCEDURE GET_INVOICE_DETAILS (
14:35:12 348  /*
14:35:12 349  Throws exceptions:
14:35:12 350  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 351  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 352  */
14:35:12 353  	in_invoice_id	   IN  NUMBER,
14:35:12 354  	out_group_id	   OUT NUMBER,
14:35:12 355  	out_status_id	   OUT NUMBER,
14:35:12 356  	out_line_items_set OUT SYS_REFCURSOR,
14:35:12 357  	out_pp_charges_set OUT SYS_REFCURSOR,
14:35:12 358  	out_cc_charges_set OUT SYS_REFCURSOR,
14:35:12 359  	out_gc_charges_set OUT SYS_REFCURSOR
14:35:12 360  ) AS
14:35:12 361  -- VARIABLES
14:35:12 362  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
14:35:12 363  
14:35:12 364  -- EXCEPTIONS
14:35:12 365  BAD_INVOICE_ID	     EXCEPTION;
14:35:12 366  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
14:35:12 367  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 368  BEGIN
14:35:12 369  
14:35:12 370  	-- get invoice status
14:35:12 371  	BEGIN
14:35:12 372  	  SELECT
14:35:12 373  	    INVOICE.INVOICE_STATUS_ID into out_status_id
14:35:12 374  	  FROM
14:35:12 375  	    INVOICE
14:35:12 376  	  WHERE
14:35:12 377  	    INVOICE.ID = in_invoice_id;
14:35:12 378  	  EXCEPTION
14:35:12 379  	    WHEN NO_DATA_FOUND THEN
14:35:12 380  	      RAISE BAD_INVOICE_ID;
14:35:12 381  	END;
14:35:12 382  
14:35:12 383  	-- get group id
14:35:12 384  	BEGIN
14:35:12 385  	  PROCS_INVOICE_V16.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
14:35:12 386  	  EXCEPTION
14:35:12 387  	    WHEN OTHERS THEN
14:35:12 388  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 389  	      RAISE CAN_NOT_FIND_ACCOUNT;
14:35:12 390  	END;
14:35:12 391  
14:35:12 392  	-- get all line items for given invoice
14:35:12 393  	OPEN out_line_items_set FOR
14:35:12 394  	SELECT
14:35:12 395  	  LINE_ITEM.AMOUNT,
14:35:12 396  	  LINE_ITEM.ID,
14:35:12 397  	  LINE_ITEM.CREATED_BY,
14:35:12 398  	  LINE_ITEM.CREATE_DATE,
14:35:12 399  	  LINE_ITEM.DISCOUNT_AMOUNT,
14:35:12 400  	  LINE_ITEM.TAXES_AMOUNT,
14:35:12 401  	  LINE_ITEM.PRODUCT_OFFER_ID,
14:35:12 402  	  LINE_ITEM.INVOICE_ID
14:35:12 403  	FROM
14:35:12 404  	  LINE_ITEM
14:35:12 405  	WHERE
14:35:12 406  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
14:35:12 407  
14:35:12 408  	-- get all pp charges for given invoice
14:35:12 409  	OPEN out_pp_charges_set FOR
14:35:12 410  	SELECT
14:35:12 411  	  CHARGE.ID as "CHARGE_ID",
14:35:12 412  	  CHARGE_AMOUNT,
14:35:12 413  	  CHARGE.INSTRUMENT_ID,
14:35:12 414  	  CHARGE.CHARGE_STATUS_ID
14:35:12 415  	FROM
14:35:12 416  	  CHARGE
14:35:12 417  	WHERE
14:35:12 418  	  CHARGE.INVOICE_ID = in_invoice_id
14:35:12 419  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL;
14:35:12 420  
14:35:12 421  	-- get all credir cards for given invoice
14:35:12 422  	OPEN out_cc_charges_set FOR
14:35:12 423  	SELECT
14:35:12 424  	  CHARGE.ID as "CHARGE_ID",
14:35:12 425  	  CHARGE.CHARGE_AMOUNT,
14:35:12 426  	  CHARGE.INSTRUMENT_ID,
14:35:12 427  	  CHARGE.CHARGE_STATUS_ID
14:35:12 428  	FROM
14:35:12 429  	  CHARGE
14:35:12 430  	WHERE
14:35:12 431  	  CHARGE.INVOICE_ID = in_invoice_id
14:35:12 432  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD;
14:35:12 433  
14:35:12 434  	OPEN out_gc_charges_set FOR
14:35:12 435  	SELECT
14:35:12 436  	  CHARGE.ID as "CHARGE_ID",
14:35:12 437  	  CHARGE.CHARGE_AMOUNT,
14:35:12 438  	  CHARGE.INSTRUMENT_ID,
14:35:12 439  	  CHARGE.CHARGE_STATUS_ID
14:35:12 440  	FROM
14:35:12 441  	  CHARGE
14:35:12 442  	WHERE
14:35:12 443  	  CHARGE.INVOICE_ID = in_invoice_id
14:35:12 444  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
14:35:12 445  
14:35:12 446  EXCEPTION
14:35:12 447  WHEN BAD_INVOICE_ID THEN
14:35:12 448  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 449  	  SPROC_NAME, 'No such invoice');
14:35:12 450  WHEN CAN_NOT_FIND_ACCOUNT THEN
14:35:12 451  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 452  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
14:35:12 453  WHEN OTHERS THEN
14:35:12 454  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 455  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 456  END GET_INVOICE_DETAILS;
14:35:12 457  
14:35:12 458  /******************************************************/
14:35:12 459  -- norlov: #38796
14:35:12 460  PROCEDURE GET_TRANSACTION_INVOICE (
14:35:12 461  /*
14:35:12 462  Throws exceptions:
14:35:12 463  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 464  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 465  */
14:35:12 466  	in_transaction_id  IN  NUMBER,
14:35:12 467  	out_result_set	      OUT SYS_REFCURSOR
14:35:12 468  ) AS
14:35:12 469  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
14:35:12 470  -- VARIABLES
14:35:12 471  temp_transaction_id  NUMBER;
14:35:12 472  var_invoice_id	   NUMBER;
14:35:12 473  var_subscription_id  NUMBER;
14:35:12 474  var_offer_chain_id   NUMBER;
14:35:12 475  var_offer_chain_name VARCHAR2(255);
14:35:12 476  -- EXCEPTIONS
14:35:12 477  BAD_TRANSACTION_ID     EXCEPTION;
14:35:12 478  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 479  BEGIN
14:35:12 480   -- check if there is the transaction
14:35:12 481  	BEGIN
14:35:12 482  	  SELECT
14:35:12 483  	    TRANSACTION.ID into temp_transaction_id
14:35:12 484  	  FROM
14:35:12 485  	    TRANSACTION
14:35:12 486  	  WHERE
14:35:12 487  	    TRANSACTION.ID = in_transaction_id;
14:35:12 488  	  EXCEPTION
14:35:12 489  	    WHEN NO_DATA_FOUND THEN
14:35:12 490  	      RAISE BAD_TRANSACTION_ID;
14:35:12 491  	END;
14:35:12 492  
14:35:12 493  	-- Get invoice id
14:35:12 494  	SELECT DISTINCT
14:35:12 495  	  CHARGE.INVOICE_ID into var_invoice_id
14:35:12 496  	FROM
14:35:12 497  	  CHARGE
14:35:12 498  	WHERE
14:35:12 499  	  CHARGE.TRANSACTION_ID = in_transaction_id;
14:35:12 500  
14:35:12 501  	-- Get subscription id if exists
14:35:12 502  	BEGIN
14:35:12 503  	  SELECT DISTINCT
14:35:12 504  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
14:35:12 505  	  FROM
14:35:12 506  	    LICENSE
14:35:12 507  	  WHERE
14:35:12 508  	    LICENSE.INVOICE_ID = var_invoice_id;
14:35:12 509  	  EXCEPTION
14:35:12 510  	    WHEN NO_DATA_FOUND THEN
14:35:12 511  	      var_subscription_id := NULL;
14:35:12 512  	END;
14:35:12 513  
14:35:12 514  	IF var_subscription_id IS NOT NULL THEN
14:35:12 515  	  -- Fetch offer chain from subscription
14:35:12 516  	  SELECT
14:35:12 517  	    OFFER_CHAIN.ID,
14:35:12 518  	    OFFER_CHAIN.NAME
14:35:12 519  	    into
14:35:12 520  	    var_offer_chain_id,
14:35:12 521  	    var_offer_chain_name
14:35:12 522  	  FROM
14:35:12 523  	    OFFER_CHAIN
14:35:12 524  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 525  	  WHERE
14:35:12 526  	    SUBSCRIPTION.ID = var_subscription_id;
14:35:12 527  	ELSE
14:35:12 528  	  -- Fetch offer chain from GC
14:35:12 529  	  SELECT
14:35:12 530  	    OFFER_CHAIN.ID,
14:35:12 531  	    OFFER_CHAIN.NAME
14:35:12 532  	    into
14:35:12 533  	    var_offer_chain_id,
14:35:12 534  	    var_offer_chain_name
14:35:12 535  	  FROM
14:35:12 536  	    OFFER_CHAIN
14:35:12 537  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 538  	  WHERE
14:35:12 539  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
14:35:12 540  	END IF;
14:35:12 541  
14:35:12 542  	OPEN out_result_set FOR
14:35:12 543  	SELECT DISTINCT
14:35:12 544  	  var_invoice_id       AS "INVOICE_ID",
14:35:12 545  	  var_subscription_id  AS "SUBSCRIPTION_ID",
14:35:12 546  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
14:35:12 547  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
14:35:12 548  	FROM
14:35:12 549  	  DUAL;
14:35:12 550  
14:35:12 551  EXCEPTION
14:35:12 552  WHEN BAD_TRANSACTION_ID THEN
14:35:12 553  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 554  	  SPROC_NAME, 'No such transaction');
14:35:12 555  WHEN OTHERS THEN
14:35:12 556  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 557  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 558  END GET_TRANSACTION_INVOICE;
14:35:12 559  
14:35:12 560  /******************************************************/
14:35:12 561  
14:35:12 562  PROCEDURE UPDATE_INVOICE_STATUS (
14:35:12 563  /*
14:35:12 564  Throws exceptions:
14:35:12 565  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 566  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 567  */
14:35:12 568  	in_invoice_id		       IN NUMBER,
14:35:12 569  	in_invoice_status_id	       IN NUMBER,
14:35:12 570  	in_updated_by		       IN VARCHAR2
14:35:12 571  ) AS
14:35:12 572  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
14:35:12 573  -- VARIABLES
14:35:12 574  temp_invoice_id NUMBER;
14:35:12 575  -- EXCEPTIONS
14:35:12 576  BAD_INVOICE_ID		      EXCEPTION;
14:35:12 577  BAD_INVOICE_STATUS_ID	      EXCEPTION;
14:35:12 578  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
14:35:12 579  BEGIN
14:35:12 580  
14:35:12 581  	-- Check if invoice exists
14:35:12 582  	BEGIN
14:35:12 583  	  SELECT
14:35:12 584  	    INVOICE.ID into temp_invoice_id
14:35:12 585  	  FROM
14:35:12 586  	    INVOICE
14:35:12 587  	  WHERE
14:35:12 588  	    INVOICE.ID = in_invoice_id;
14:35:12 589  	  EXCEPTION
14:35:12 590  	    WHEN NO_DATA_FOUND THEN
14:35:12 591  	      RAISE BAD_INVOICE_ID;
14:35:12 592  	END;
14:35:12 593  
14:35:12 594  	IF in_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_OPEN
14:35:12 595  	  AND in_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
14:35:12 596  	  RAISE BAD_INVOICE_STATUS_ID;
14:35:12 597  	END IF;
14:35:12 598  
14:35:12 599  	PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
14:35:12 600  	  in_invoice_id 		 => in_invoice_id,
14:35:12 601  	  in_invoice_status_id		 => in_invoice_status_id,
14:35:12 602  	  in_updated_by 		 => in_updated_by
14:35:12 603  	);
14:35:12 604  
14:35:12 605  EXCEPTION
14:35:12 606  WHEN BAD_INVOICE_STATUS_ID THEN
14:35:12 607  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 608  	  SPROC_NAME, 'Bad invoice status id');
14:35:12 609  WHEN BAD_INVOICE_ID THEN
14:35:12 610  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 611  	  SPROC_NAME, 'No such invoice');
14:35:12 612  WHEN OTHERS THEN
14:35:12 613  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 614  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 615  END UPDATE_INVOICE_STATUS;
14:35:12 616  
14:35:12 617  /****************************************************************/
14:35:12 618  
14:35:12 619  FUNCTION IS_INVOICE_PAYING_STARTED (
14:35:12 620  /*
14:35:12 621  Throws exceptions:
14:35:12 622  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 623  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 624  */
14:35:12 625  	in_invoice_id IN NUMBER
14:35:12 626  ) RETURN NUMBER AS
14:35:12 627  -- VARIABLES
14:35:12 628  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
14:35:12 629  temp_invoice_id		 NUMBER;
14:35:12 630  var_processed_charges_num  NUMBER;
14:35:12 631  var_processed_transac_num  NUMBER;
14:35:12 632  var_success_attempts_num	 NUMBER;
14:35:12 633  var_is_gc 		 NUMBER;
14:35:12 634  -- EXCEPTIONS
14:35:12 635  BAD_INVOICE_ID EXCEPTION;
14:35:12 636  BEGIN
14:35:12 637  
14:35:12 638  	-- Check that invoice exists
14:35:12 639  	BEGIN
14:35:12 640  	  SELECT
14:35:12 641  	    INVOICE.ID into temp_invoice_id
14:35:12 642  	  FROM
14:35:12 643  	    INVOICE
14:35:12 644  	  WHERE
14:35:12 645  	    INVOICE.ID = in_invoice_id;
14:35:12 646  	  EXCEPTION
14:35:12 647  	   WHEN NO_DATA_FOUND THEN
14:35:12 648  	     RAISE BAD_INVOICE_ID;
14:35:12 649  	END;
14:35:12 650  
14:35:12 651  	-- Check that there are tansaction attempts with status success
14:35:12 652  	SELECT
14:35:12 653  	  COUNT(1) into var_success_attempts_num
14:35:12 654  	FROM
14:35:12 655  	  TRANSACTION_ATTEMPT ta,
14:35:12 656  	  TRANSACTION t,
14:35:12 657  	  CHARGE c
14:35:12 658  	WHERE
14:35:12 659  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS and
14:35:12 660  	  ta.transaction_id = t.id and
14:35:12 661  	  c.transaction_id = t.id and
14:35:12 662  	  t.is_refund = GLOBAL_CONSTANTS_V16.FALSE and
14:35:12 663  	  c.invoice_id = in_invoice_id
14:35:12 664  	;
14:35:12 665  
14:35:12 666  	IF var_success_attempts_num > 0 THEN
14:35:12 667  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 668  	END IF;
14:35:12 669  
14:35:12 670  	SELECT
14:35:12 671  	  COUNT(1) into var_success_attempts_num
14:35:12 672  	FROM
14:35:12 673  	  TRANSACTION t,
14:35:12 674  	  CHARGE c
14:35:12 675  	WHERE
14:35:12 676  	  c.transaction_id = t.id and
14:35:12 677  	  t.is_refund = GLOBAL_CONSTANTS_V16.FALSE and
14:35:12 678  	  t.is_settled = GLOBAL_CONSTANTS_V16.TRUE and
14:35:12 679  	  c.invoice_id = in_invoice_id
14:35:12 680  	;
14:35:12 681  
14:35:12 682  	IF var_success_attempts_num > 0 THEN
14:35:12 683  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 684  	END IF;
14:35:12 685  
14:35:12 686  	SELECT
14:35:12 687  	  COUNT(1) into var_is_gc
14:35:12 688  	FROM
14:35:12 689  	  gift_certificate gc
14:35:12 690  	WHERE
14:35:12 691  	  gc.finalized_invoice_id = in_invoice_id
14:35:12 692  	;
14:35:12 693  
14:35:12 694  	IF var_is_gc > 0 THEN
14:35:12 695  	  RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 696  	END IF;
14:35:12 697  
14:35:12 698  	RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 699  
14:35:12 700  EXCEPTION
14:35:12 701  WHEN BAD_INVOICE_ID THEN
14:35:12 702  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 703  	  SPROC_NAME, 'No such invoice');
14:35:12 704  WHEN OTHERS THEN
14:35:12 705  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 706  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 707  END IS_INVOICE_PAYING_STARTED;
14:35:12 708  
14:35:12 709  /******************************************************************************/
14:35:12 710  
14:35:12 711  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
14:35:12 712  	in_invoice_id  IN NUMBER,
14:35:12 713  	out_is_started OUT NUMBER
14:35:12 714  ) AS
14:35:12 715  BEGIN
14:35:12 716  	-- Just a wrapper
14:35:12 717  	out_is_started := PROCS_INVOICE_V16.IS_INVOICE_PAYING_STARTED(in_invoice_id);
14:35:12 718  END P_IS_INVOICE_PAYING_STARTED;
14:35:12 719  
14:35:12 720  /******************************************************************************/
14:35:12 721  
14:35:12 722  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
14:35:12 723  	in_invoice_id	      IN NUMBER,
14:35:12 724  	in_chargeback_date    IN DATE,
14:35:12 725  	out_chargeback_amount OUT NUMBER
14:35:12 726  ) AS
14:35:12 727  -- VARIABLES
14:35:12 728  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
14:35:12 729  var_chargeback_date    DATE;
14:35:12 730  temp_invoice_id	     NUMBER;
14:35:12 731  var_licenses_number    NUMBER;
14:35:12 732  var_invoice_start_date DATE;
14:35:12 733  var_invoice_end_date   DATE;
14:35:12 734  var_offer_id	     NUMBER;
14:35:12 735  var_offer_days_interval NUMBER;
14:35:12 736  var_license_days_used  NUMBER;
14:35:12 737  var_invoice_amount     NUMBER(10,2);
14:35:12 738  var_offer_chain_id     NUMBER;
14:35:12 739  var_offer_chain_meta_data_val VARCHAR2(1024);
14:35:12 740  var_offer_chain_full_refund   NUMBER;
14:35:12 741  var_offer_chain_prorated_ref  NUMBER;
14:35:12 742  var_chargeback_calculated NUMBER;
14:35:12 743  var_max_invoice_refund	NUMBER;
14:35:12 744  -- EXCEPTIONS
14:35:12 745  BAD_INVOICE_ID		  EXCEPTION;
14:35:12 746  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
14:35:12 747  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
14:35:12 748  BEGIN
14:35:12 749  
14:35:12 750  	IF in_chargeback_date IS NULL THEN
14:35:12 751  	  var_chargeback_date := PROCS_COMMON_V16.NORMALIZE_DATE(current_date);
14:35:12 752  	ELSE
14:35:12 753  	  var_chargeback_date := PROCS_COMMON_V16.NORMALIZE_DATE(in_chargeback_date);
14:35:12 754  	END IF;
14:35:12 755  
14:35:12 756  	-- Check that invoice exists
14:35:12 757  	BEGIN
14:35:12 758  	  SELECT
14:35:12 759  	    INVOICE.ID into temp_invoice_id
14:35:12 760  	  FROM
14:35:12 761  	    INVOICE
14:35:12 762  	  WHERE
14:35:12 763  	    INVOICE.ID = in_invoice_id;
14:35:12 764  	  EXCEPTION
14:35:12 765  	    WHEN NO_DATA_FOUND THEN
14:35:12 766  	      RAISE BAD_INVOICE_ID;
14:35:12 767  	END;
14:35:12 768  
14:35:12 769  	-- Check that invoice has at least one license
14:35:12 770  	SELECT
14:35:12 771  	  COUNT(*) into var_licenses_number
14:35:12 772  	FROM
14:35:12 773  	  LICENSE
14:35:12 774  	WHERE
14:35:12 775  	  LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 776  
14:35:12 777  	IF var_licenses_number = 0 THEN
14:35:12 778  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
14:35:12 779  	END IF;
14:35:12 780  
14:35:12 781  	SELECT
14:35:12 782  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
14:35:12 783  	FROM
14:35:12 784  	  LICENSE
14:35:12 785  	WHERE
14:35:12 786  	  LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 787  
14:35:12 788  	var_invoice_start_date := PROCS_COMMON_V16.NORMALIZE_DATE(var_invoice_start_date);
14:35:12 789  
14:35:12 790  	SELECT DISTINCT
14:35:12 791  	  LICENSE.OFFER_ID into var_offer_id
14:35:12 792  	FROM
14:35:12 793  	  LICENSE
14:35:12 794  	WHERE
14:35:12 795  	  LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 796  
14:35:12 797  	SELECT
14:35:12 798  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
14:35:12 799  	FROM
14:35:12 800  	  LICENSE
14:35:12 801  	WHERE
14:35:12 802  	  LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 803  
14:35:12 804  	-- All licenses for given invoice should point into the same offer
14:35:12 805  
14:35:12 806  	PROCS_OFFER_CHAIN_V16.GET_OFFER_LENGTH_IN_DAYS(
14:35:12 807  	  in_offer_id	=> var_offer_id,
14:35:12 808  	  in_start_date => var_invoice_start_date,
14:35:12 809  	  out_days	=> var_offer_days_interval
14:35:12 810  	);
14:35:12 811  
14:35:12 812  	IF var_offer_days_interval = 0 THEN
14:35:12 813  	  RAISE OFFER_LENGTH_IS_ZERO;
14:35:12 814  	END IF;
14:35:12 815  
14:35:12 816  	PROCS_INVOICE_V16.GET_INVOICE_DAYS_USED_NUMBER(
14:35:12 817  	  in_invoice_id      => in_invoice_id,
14:35:12 818  	  in_chargeback_date => var_chargeback_date,
14:35:12 819  	  out_days_num	     => var_license_days_used
14:35:12 820  	);
14:35:12 821  
14:35:12 822  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(
14:35:12 823  	  in_invoice_id => in_invoice_id,
14:35:12 824  	  out_amount	=> var_invoice_amount
14:35:12 825  	);
14:35:12 826  
14:35:12 827  	-- 39437
14:35:12 828  	-- Get offer chain id by invoice id
14:35:12 829  	SELECT DISTINCT
14:35:12 830  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
14:35:12 831  	FROM
14:35:12 832  	  SUBSCRIPTION
14:35:12 833  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 834  	WHERE
14:35:12 835  	  LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 836  
14:35:12 837  	-- Get offer chain's meta data full amount value
14:35:12 838  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
14:35:12 839  	  in_offer_chain_id => var_offer_chain_id,
14:35:12 840  	  in_meta_data_name => GLOBAL_CONSTANTS_V16.OFFER_CHAIN_FULL_REFUND,
14:35:12 841  	  out_value	    => var_offer_chain_meta_data_val
14:35:12 842  	);
14:35:12 843  	IF var_offer_chain_meta_data_val IS NULL THEN
14:35:12 844  	  var_offer_chain_full_refund := NULL;
14:35:12 845  	ELSE
14:35:12 846  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
14:35:12 847  	END IF;
14:35:12 848  
14:35:12 849  	-- Get offer chain's meta data prorated amount value
14:35:12 850  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
14:35:12 851  	  in_offer_chain_id => var_offer_chain_id,
14:35:12 852  	  in_meta_data_name => GLOBAL_CONSTANTS_V16.OFFER_CHAIN_PRORATED_REFUND,
14:35:12 853  	  out_value	    => var_offer_chain_meta_data_val
14:35:12 854  	);
14:35:12 855  	IF var_offer_chain_meta_data_val IS NULL THEN
14:35:12 856  	  var_offer_chain_prorated_ref := NULL;
14:35:12 857  	ELSE
14:35:12 858  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
14:35:12 859  	END IF;
14:35:12 860  
14:35:12 861  	var_chargeback_calculated := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 862  
14:35:12 863  	IF var_offer_chain_full_refund IS NOT NULL
14:35:12 864  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 865  	  IF var_license_days_used < var_offer_chain_full_refund THEN
14:35:12 866  	    out_chargeback_amount := var_invoice_amount;
14:35:12 867  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 868  	  END IF;
14:35:12 869  	END IF;
14:35:12 870  
14:35:12 871  	IF var_offer_chain_prorated_ref IS NOT NULL
14:35:12 872  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 873  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
14:35:12 874  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
14:35:12 875  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 876  	  END IF;
14:35:12 877  	END IF;
14:35:12 878  
14:35:12 879  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V16.TRUE THEN
14:35:12 880  	  PROCS_INVOICE_V16.GET_MAX_REFUND(
14:35:12 881  	    in_invoice_id => in_invoice_id,
14:35:12 882  	    out_amount	  => var_max_invoice_refund
14:35:12 883  	  );
14:35:12 884  	  IF var_max_invoice_refund < out_chargeback_amount THEN
14:35:12 885  	    out_chargeback_amount := var_max_invoice_refund;
14:35:12 886  	  END IF;
14:35:12 887  	END IF;
14:35:12 888  
14:35:12 889  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 890  	  out_chargeback_amount := 0;
14:35:12 891  	END IF;
14:35:12 892  
14:35:12 893  EXCEPTION
14:35:12 894  WHEN BAD_INVOICE_ID THEN
14:35:12 895  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 896  	  SPROC_NAME, 'No such invoice');
14:35:12 897  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
14:35:12 898  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 899  	  SPROC_NAME, 'No licenses found');
14:35:12 900  WHEN OFFER_LENGTH_IS_ZERO THEN
14:35:12 901  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 902  	  SPROC_NAME, 'Offer length is zero');
14:35:12 903  WHEN OTHERS THEN
14:35:12 904  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 906  END CALCULATE_INVOICE_CHARGEBACK;
14:35:12 907  
14:35:12 908  /********************************************************************/
14:35:12 909  
14:35:12 910  PROCEDURE APPLY_REFUND (
14:35:12 911  	in_invoice_id	     IN NUMBER,
14:35:12 912  	in_chargeback_amount IN NUMBER,
14:35:12 913  	in_created_by	     IN VARCHAR2,
14:35:12 914  	out_charge_id	     OUT NUMBER
14:35:12 915  ) AS
14:35:12 916  -- VARIABLES
14:35:12 917  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
14:35:12 918  temp_invoice_id		 NUMBER;
14:35:12 919  var_total_charges_amount	 NUMBER(10,2);
14:35:12 920  var_charge_amount_to_apply NUMBER(10,2);
14:35:12 921  var_transaction_id	 NUMBER;
14:35:12 922  var_instrument_type_id	 NUMBER;
14:35:12 923  var_instrument_id 	 NUMBER;
14:35:12 924  var_charge_id		 NUMBER;
14:35:12 925  -- EXCEPTIONS
14:35:12 926  BAD_INVOICE_ID		 EXCEPTION;
14:35:12 927  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
14:35:12 928  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
14:35:12 929  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
14:35:12 930  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
14:35:12 931  BEGIN
14:35:12 932  
14:35:12 933  	BEGIN
14:35:12 934  	  SELECT
14:35:12 935  	    INVOICE.ID into temp_invoice_id
14:35:12 936  	  FROM
14:35:12 937  	    INVOICE
14:35:12 938  	  WHERE
14:35:12 939  	    INVOICE.ID = in_invoice_id;
14:35:12 940  	  EXCEPTION
14:35:12 941  	    WHEN NO_DATA_FOUND THEN
14:35:12 942  	      RAISE BAD_INVOICE_ID;
14:35:12 943  	END;
14:35:12 944  
14:35:12 945  	SELECT
14:35:12 946  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
14:35:12 947  	FROM
14:35:12 948  	  CHARGE
14:35:12 949  	WHERE
14:35:12 950  	  CHARGE.INVOICE_ID = in_invoice_id
14:35:12 951  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
14:35:12 952  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
14:35:12 953  
14:35:12 954  	-- FIXME: Maybe whe should throw exception here?
14:35:12 955  	IF var_total_charges_amount < in_chargeback_amount THEN
14:35:12 956  	  var_charge_amount_to_apply := var_total_charges_amount;
14:35:12 957  	ELSE
14:35:12 958  	  var_charge_amount_to_apply := in_chargeback_amount;
14:35:12 959  	END IF;
14:35:12 960  
14:35:12 961  	BEGIN
14:35:12 962  	  PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
14:35:12 963  	    in_transaction_id  => NULL,
14:35:12 964  	    in_status_id       => GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
14:35:12 965  	    in_amount	       => -var_charge_amount_to_apply,
14:35:12 966  	    in_created_by      => in_created_by,
14:35:12 967  	    in_order_id        => NULL,
14:35:12 968  	    in_is_refund       => GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 969  	    out_transaction_id => var_transaction_id
14:35:12 970  	  );
14:35:12 971  	  EXCEPTION
14:35:12 972  	    WHEN OTHERS THEN
14:35:12 973  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 974  	      RAISE CAN_NOT_CREATE_TRANSACTION;
14:35:12 975  	END;
14:35:12 976  
14:35:12 977  	BEGIN
14:35:12 978  	  SELECT
14:35:12 979  	    C.INSTRUMENT_TYPE_ID,
14:35:12 980  	    C.INSTRUMENT_ID
14:35:12 981  	    into
14:35:12 982  	    var_instrument_type_id,
14:35:12 983  	    var_instrument_id
14:35:12 984  	  FROM
14:35:12 985  	    CHARGE C,
14:35:12 986  	    TRANSACTION_ATTEMPT TA,
14:35:12 987  	    TRANSACTION T
14:35:12 988  	  WHERE
14:35:12 989  	    C.INVOICE_ID = in_invoice_id and
14:35:12 990  	    C.TRANSACTION_ID = T.ID and
14:35:12 991  	    TA.TRANSACTION_ID = T.ID and
14:35:12 992  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS and
14:35:12 993  	    T.IS_REFUND = GLOBAL_CONSTANTS_V16.FALSE and
14:35:12 994  	    T.TRANSACTION_AMOUNT >= 0 and
14:35:12 995  	    rownum < 2;
14:35:12 996  	EXCEPTION
14:35:12 997  	    WHEN NO_DATA_FOUND THEN
14:35:12 998  	      RAISE CAN_NOT_FIND_INSTRUMENT;
14:35:12 999  	END;
14:35:12 1000  	 BEGIN
14:35:12 1001  	   PROCS_CHARGE_V16.CREATE_CHARGE(
14:35:12 1002  	     in_invoice_id	   => in_invoice_id,
14:35:12 1003  	     in_transaction_id	   => var_transaction_id,
14:35:12 1004  	     in_instrument_type_id => var_instrument_type_id,
14:35:12 1005  	     in_instrument_id	   => var_instrument_id,
14:35:12 1006  	     in_charge_amount	   => -var_charge_amount_to_apply,
14:35:12 1007  	     in_created_by	   => in_created_by,
14:35:12 1008  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
14:35:12 1009  	     out_charge_id	   => var_charge_id
14:35:12 1010  	   );
14:35:12 1011  	   EXCEPTION
14:35:12 1012  	     WHEN OTHERS THEN
14:35:12 1013  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1014  	       RAISE CAN_NOT_CREATE_CHARGE;
14:35:12 1015  	 END;
14:35:12 1016  
14:35:12 1017  	 out_charge_id := var_charge_id;
14:35:12 1018  
14:35:12 1019  EXCEPTION
14:35:12 1020  WHEN BAD_INVOICE_ID THEN
14:35:12 1021  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1022  	   SPROC_NAME, 'No such invoice');
14:35:12 1023  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:35:12 1024  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1025  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:35:12 1026  WHEN CAN_NOT_FIND_INSTRUMENT THEN
14:35:12 1027  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1028  	   SPROC_NAME, 'Could not find financial instrument');
14:35:12 1029  WHEN CAN_NOT_CREATE_CHARGE THEN
14:35:12 1030  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1031  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:35:12 1032  WHEN OTHERS THEN
14:35:12 1033  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1034  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1035  END APPLY_REFUND;
14:35:12 1036  
14:35:12 1037  /******************************************************************************/
14:35:12 1038  
14:35:12 1039  PROCEDURE GET_MAX_REFUND (
14:35:12 1040  	 in_invoice_id IN NUMBER,
14:35:12 1041  	 out_amount    OUT NUMBER
14:35:12 1042  ) AS
14:35:12 1043  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
14:35:12 1044  -- VARIABLES
14:35:12 1045  temp_invoice_id	       NUMBER;
14:35:12 1046  var_invoice_refunds_sum NUMBER(10,2);
14:35:12 1047  var_invoice_charges_sum NUMBER(10,2);
14:35:12 1048  -- EXCEPTIONS
14:35:12 1049  BAD_INVOICE_ID EXCEPTION;
14:35:12 1050  BEGIN
14:35:12 1051  
14:35:12 1052  	 BEGIN
14:35:12 1053  	   SELECT
14:35:12 1054  	     INVOICE.ID into temp_invoice_id
14:35:12 1055  	   FROM
14:35:12 1056  	     INVOICE
14:35:12 1057  	   WHERE
14:35:12 1058  	     INVOICE.ID = in_invoice_id;
14:35:12 1059  	   EXCEPTION
14:35:12 1060  	     WHEN NO_DATA_FOUND THEN
14:35:12 1061  	       RAISE BAD_INVOICE_ID;
14:35:12 1062  	 END;
14:35:12 1063  
14:35:12 1064  	 var_invoice_refunds_sum := 0;
14:35:12 1065  	 var_invoice_charges_sum := 0;
14:35:12 1066  
14:35:12 1067  	 FOR f_charge IN (
14:35:12 1068  	   SELECT
14:35:12 1069  	     CHARGE.ID,
14:35:12 1070  	     CHARGE.CHARGE_STATUS_ID,
14:35:12 1071  	     CHARGE.CHARGE_AMOUNT,
14:35:12 1072  	     CHARGE.TRANSACTION_ID
14:35:12 1073  	   FROM
14:35:12 1074  	     CHARGE
14:35:12 1075  	   WHERE
14:35:12 1076  	     CHARGE.INVOICE_ID = in_invoice_id
14:35:12 1077  	 )
14:35:12 1078  	 LOOP
14:35:12 1079  	   -- If charge.status = canceled then continue
14:35:12 1080  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V16.CHARGE_CANCELED THEN
14:35:12 1081  
14:35:12 1082  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
14:35:12 1083  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
14:35:12 1084  		  AND PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V16.TRUE THEN
14:35:12 1085  		 -- Transaction collected
14:35:12 1086  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
14:35:12 1087  	       ELSE
14:35:12 1088  		 -- Transaction is not collected. Do nothing
14:35:12 1089  		 NULL;
14:35:12 1090  	       END IF;
14:35:12 1091  	     ELSE
14:35:12 1092  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
14:35:12 1093  		  AND PROCS_TRANSACTION_V16.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 1094  		 -- If charge is processed transaction is not collected then do nothing
14:35:12 1095  		 NULL;
14:35:12 1096  	       ELSE
14:35:12 1097  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
14:35:12 1098  	       END IF;
14:35:12 1099  	     END IF;
14:35:12 1100  
14:35:12 1101  	   END IF;
14:35:12 1102  	 END LOOP;
14:35:12 1103  
14:35:12 1104  	 -- Refunds are negative
14:35:12 1105  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
14:35:12 1106  
14:35:12 1107  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
14:35:12 1108  
14:35:12 1109  EXCEPTION
14:35:12 1110  WHEN BAD_INVOICE_ID THEN
14:35:12 1111  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1112  	   SPROC_NAME, 'No such invoice');
14:35:12 1113  WHEN OTHERS THEN
14:35:12 1114  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1115  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1116  END GET_MAX_REFUND;
14:35:12 1117  
14:35:12 1118  /******************************************************************************/
14:35:12 1119  
14:35:12 1120  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
14:35:12 1121  	 in_invoice_id	     IN NUMBER,
14:35:12 1122  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
14:35:12 1123  	 out_days_num	     OUT NUMBER
14:35:12 1124  ) AS
14:35:12 1125  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
14:35:12 1126  -- VARIABLES
14:35:12 1127  temp_invoice_id	      NUMBER;
14:35:12 1128  var_license_start_date DATE;
14:35:12 1129  var_license_end_date   DATE;
14:35:12 1130  var_chargeback_date    DATE;
14:35:12 1131  var_invoice_days_used  NUMBER;
14:35:12 1132  -- EXCEPTIONS
14:35:12 1133  BAD_INVOICE_ID EXCEPTION;
14:35:12 1134  BEGIN
14:35:12 1135  
14:35:12 1136  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
14:35:12 1137  
14:35:12 1138  	 BEGIN
14:35:12 1139  	   SELECT
14:35:12 1140  	     INVOICE.ID into temp_invoice_id
14:35:12 1141  	   FROM
14:35:12 1142  	     INVOICE
14:35:12 1143  	   WHERE
14:35:12 1144  	     INVOICE.ID = in_invoice_id;
14:35:12 1145  	   EXCEPTION
14:35:12 1146  	     WHEN NO_DATA_FOUND THEN
14:35:12 1147  	       RAISE BAD_INVOICE_ID;
14:35:12 1148  	 END;
14:35:12 1149  
14:35:12 1150  	 var_invoice_days_used := 0;
14:35:12 1151  
14:35:12 1152  	 FOR f_license IN (
14:35:12 1153  	   SELECT
14:35:12 1154  	     LICENSE.START_DATE,
14:35:12 1155  	     LICENSE.END_DATE
14:35:12 1156  	   FROM
14:35:12 1157  	     LICENSE
14:35:12 1158  	   WHERE
14:35:12 1159  	     LICENSE.INVOICE_ID = in_invoice_id
14:35:12 1160  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V16.FALSE
14:35:12 1161  	 )
14:35:12 1162  	 LOOP
14:35:12 1163  	   var_license_start_date := PROCS_COMMON_V16.NORMALIZE_DATE(f_license.START_DATE);
14:35:12 1164  	   var_license_end_date := PROCS_COMMON_V16.NORMALIZE_DATE(f_license.END_DATE);
14:35:12 1165  
14:35:12 1166  	   IF var_license_start_date <= var_chargeback_date THEN
14:35:12 1167  	     IF var_license_end_date <= var_chargeback_date THEN
14:35:12 1168  	       -- License is passed
14:35:12 1169  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
14:35:12 1170  	     ELSE
14:35:12 1171  	       -- This is current license
14:35:12 1172  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
14:35:12 1173  	     END IF;
14:35:12 1174  	   ELSE
14:35:12 1175  	     -- if var_license_start_date > in_chargeback_date then do nothing
14:35:12 1176  	     NULL;
14:35:12 1177  	   END IF;
14:35:12 1178  	 END LOOP;
14:35:12 1179  
14:35:12 1180  	 out_days_num := var_invoice_days_used;
14:35:12 1181  
14:35:12 1182  EXCEPTION
14:35:12 1183  WHEN BAD_INVOICE_ID THEN
14:35:12 1184  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1185  	   SPROC_NAME, 'No such invoice');
14:35:12 1186  WHEN OTHERS THEN
14:35:12 1187  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1188  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1189  END GET_INVOICE_DAYS_USED_NUMBER;
14:35:12 1190  
14:35:12 1191  /******************************************************************************/
14:35:12 1192  
14:35:12 1193  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:35:12 1194  	 in_invoice_id	IN NUMBER,
14:35:12 1195  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1196  ) AS
14:35:12 1197  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
14:35:12 1198  -- VARIABLES
14:35:12 1199  temp_invoice_id NUMBER;
14:35:12 1200  -- EXCEPTIONS
14:35:12 1201  BAD_INVOICE_ID EXCEPTION;
14:35:12 1202  BEGIN
14:35:12 1203  
14:35:12 1204  	 BEGIN
14:35:12 1205  	   SELECT
14:35:12 1206  	     INVOICE.ID into temp_invoice_id
14:35:12 1207  	   FROM
14:35:12 1208  	     INVOICE
14:35:12 1209  	   WHERE
14:35:12 1210  	     INVOICE.ID = in_invoice_id;
14:35:12 1211  	   EXCEPTION
14:35:12 1212  	     WHEN NO_DATA_FOUND THEN
14:35:12 1213  	       RAISE BAD_INVOICE_ID;
14:35:12 1214  	 END;
14:35:12 1215  
14:35:12 1216  	 OPEN out_result_set FOR
14:35:12 1217  	 SELECT
14:35:12 1218  	   LINE_ITEM.ID,
14:35:12 1219  	   LINE_ITEM.PRODUCT_OFFER_ID,
14:35:12 1220  	   LINE_ITEM.INVOICE_ID,
14:35:12 1221  	   LINE_ITEM.AMOUNT,
14:35:12 1222  	   LINE_ITEM.DISCOUNT_AMOUNT,
14:35:12 1223  	   LINE_ITEM.TAXES_AMOUNT,
14:35:12 1224  	   LINE_ITEM.CREATE_DATE,
14:35:12 1225  	   LINE_ITEM.CREATED_BY
14:35:12 1226  	 FROM
14:35:12 1227  	   LINE_ITEM
14:35:12 1228  	 WHERE
14:35:12 1229  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
14:35:12 1230  
14:35:12 1231  EXCEPTION
14:35:12 1232  WHEN BAD_INVOICE_ID THEN
14:35:12 1233  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1234  	   SPROC_NAME, 'No such invoice');
14:35:12 1235  WHEN OTHERS THEN
14:35:12 1236  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1237  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1238  END GET_INVOICE_LINE_ITEMS;
14:35:12 1239  
14:35:12 1240  /******************************************************************************/
14:35:12 1241  
14:35:12 1242  PROCEDURE GET_INVOICE_LICENSES (
14:35:12 1243  	 in_invoice_id	IN NUMBER,
14:35:12 1244  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1245  ) AS
14:35:12 1246  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
14:35:12 1247  -- VARIABLES
14:35:12 1248  temp_invoice_id NUMBER;
14:35:12 1249  -- EXCEPTIONS
14:35:12 1250  BAD_INVOICE_ID EXCEPTION;
14:35:12 1251  BEGIN
14:35:12 1252  
14:35:12 1253  	 BEGIN
14:35:12 1254  	   SELECT
14:35:12 1255  	     INVOICE.ID into temp_invoice_id
14:35:12 1256  	   FROM
14:35:12 1257  	     INVOICE
14:35:12 1258  	   WHERE
14:35:12 1259  	     INVOICE.ID = in_invoice_id;
14:35:12 1260  	   EXCEPTION
14:35:12 1261  	     WHEN NO_DATA_FOUND THEN
14:35:12 1262  	       RAISE BAD_INVOICE_ID;
14:35:12 1263  	 END;
14:35:12 1264  
14:35:12 1265  	 OPEN out_result_set FOR
14:35:12 1266  	 SELECT
14:35:12 1267  	   LICENSE.ID,
14:35:12 1268  	   LICENSE.INVOICE_ID,
14:35:12 1269  	   LICENSE.CREATE_DATE,
14:35:12 1270  	   LICENSE.CREATED_BY,
14:35:12 1271  	   LICENSE.CURRENT_OFFER_INDEX,
14:35:12 1272  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
14:35:12 1273  	   LICENSE.END_DATE,
14:35:12 1274  	   LICENSE.ENTITLEMENT_END_DATE,
14:35:12 1275  	   LICENSE.IS_EXTENSION,
14:35:12 1276  	   LICENSE.LICENSE_STATUS_ID,
14:35:12 1277  	   LICENSE.NEEDS_ENTITLEMENTS,
14:35:12 1278  	   LICENSE.OFFER_ID,
14:35:12 1279  	   LICENSE.START_DATE,
14:35:12 1280  	   LICENSE.SUBSCRIPTION_ID,
14:35:12 1281  	   LICENSE.UPDATE_DATE,
14:35:12 1282  	   LICENSE.UPDATED_BY
14:35:12 1283  	 FROM
14:35:12 1284  	   LICENSE
14:35:12 1285  	 WHERE
14:35:12 1286  	   LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 1287  
14:35:12 1288  EXCEPTION
14:35:12 1289  WHEN BAD_INVOICE_ID THEN
14:35:12 1290  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1291  	   SPROC_NAME, 'No such invoice');
14:35:12 1292  WHEN OTHERS THEN
14:35:12 1293  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1294  	   SPROC_NAME, 'Unknown error');
14:35:12 1295  END GET_INVOICE_LICENSES;
14:35:12 1296  
14:35:12 1297  /******************************************************************************/
14:35:12 1298  
14:35:12 1299  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
14:35:12 1300  	 in_invoice_id	    IN NUMBER,
14:35:12 1301  	 out_offer_chain_id OUT NUMBER
14:35:12 1302  ) AS
14:35:12 1303  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
14:35:12 1304  -- VARIABLES
14:35:12 1305  temp_invoice_id NUMBER;
14:35:12 1306  -- EXCEPTIONS
14:35:12 1307  BAD_INVOICE_ID EXCEPTION;
14:35:12 1308  BEGIN
14:35:12 1309  
14:35:12 1310  	 BEGIN
14:35:12 1311  	   SELECT
14:35:12 1312  	     INVOICE.ID into temp_invoice_id
14:35:12 1313  	   FROM
14:35:12 1314  	     INVOICE
14:35:12 1315  	   WHERE
14:35:12 1316  	     INVOICE.ID = in_invoice_id;
14:35:12 1317  	   EXCEPTION
14:35:12 1318  	     WHEN NO_DATA_FOUND THEN
14:35:12 1319  	       RAISE BAD_INVOICE_ID;
14:35:12 1320  	 END;
14:35:12 1321  
14:35:12 1322  	 BEGIN
14:35:12 1323  	   SELECT DISTINCT
14:35:12 1324  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
14:35:12 1325  	   FROM
14:35:12 1326  	     LICENSE
14:35:12 1327  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 1328  	   WHERE
14:35:12 1329  	     LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 1330  	   EXCEPTION
14:35:12 1331  	     WHEN NO_DATA_FOUND THEN
14:35:12 1332  	       out_offer_chain_id := NULL;
14:35:12 1333  	 END;
14:35:12 1334  
14:35:12 1335  EXCEPTION
14:35:12 1336  WHEN BAD_INVOICE_ID THEN
14:35:12 1337  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1338  	   SPROC_NAME, 'No such invoice');
14:35:12 1339  WHEN OTHERS THEN
14:35:12 1340  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1341  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1342  END GET_OFFER_CH_ID_BY_INVOICE_ID;
14:35:12 1343  
14:35:12 1344  /******************************************************************************/
14:35:12 1345  
14:35:12 1346  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
14:35:12 1347  -- Closing invoice without refund
14:35:12 1348  	 in_invoice_id IN NUMBER,
14:35:12 1349  	 in_updated_by IN VARCHAR2
14:35:12 1350  ) AS
14:35:12 1351  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
14:35:12 1352  -- VARIABLES
14:35:12 1353  temp_invoice_id NUMBER;
14:35:12 1354  -- EXCEPTIONS
14:35:12 1355  BAD_INVOICE_ID EXCEPTION;
14:35:12 1356  BEGIN
14:35:12 1357  
14:35:12 1358  	 BEGIN
14:35:12 1359  	   SELECT
14:35:12 1360  	     INVOICE.ID into temp_invoice_id
14:35:12 1361  	   FROM
14:35:12 1362  	     INVOICE
14:35:12 1363  	   WHERE
14:35:12 1364  	     INVOICE.ID = in_invoice_id;
14:35:12 1365  	   EXCEPTION
14:35:12 1366  	     WHEN NO_DATA_FOUND THEN
14:35:12 1367  	       RAISE BAD_INVOICE_ID;
14:35:12 1368  	 END;
14:35:12 1369  
14:35:12 1370  	 -- Needs to close charges. No refund.
14:35:12 1371  	 FOR f_charge_to_close IN (
14:35:12 1372  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
14:35:12 1373  	 )
14:35:12 1374  	 LOOP
14:35:12 1375  	   PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
14:35:12 1376  	     in_charge_id	 => f_charge_to_close.ID,
14:35:12 1377  	     in_updated_by	 => in_updated_by,
14:35:12 1378  	     in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
14:35:12 1379  	   );
14:35:12 1380  	 END LOOP;
14:35:12 1381  
14:35:12 1382  	 --FOR f_license_to_cancel IN (
14:35:12 1383  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V16.LICENSE_ACTIVE
14:35:12 1384  	 --)
14:35:12 1385  	 --LOOP
14:35:12 1386  	 --  PROCS_LICENSE_CRU_V16.UPDATE_LICENSE(
14:35:12 1387  	 --    in_license_id	     => f_license_to_cancel.ID,
14:35:12 1388  	 --    in_license_status_id  => GLOBAL_STATUSES_V16.LICENSE_CLOSED,
14:35:12 1389  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V16.FALSE,
14:35:12 1390  	 --    in_updated_by	     => in_updated_by
14:35:12 1391  	 --  );
14:35:12 1392  	 --END LOOP;
14:35:12 1393  
14:35:12 1394  	 PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
14:35:12 1395  	   in_invoice_id		  => in_invoice_id,
14:35:12 1396  	   in_updated_by		  => in_updated_by,
14:35:12 1397  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V16.INVOICE_CLOSED
14:35:12 1398  	 );
14:35:12 1399  
14:35:12 1400  	 FOR f_transaction_to_close IN (
14:35:12 1401  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
14:35:12 1402  	 )
14:35:12 1403  	 LOOP
14:35:12 1404  	   PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
14:35:12 1405  	     in_transaction_id	      => f_transaction_to_close.ID,
14:35:12 1406  	     in_updated_by	      => in_updated_by,
14:35:12 1407  	     in_transaction_status_id => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
14:35:12 1408  	   );
14:35:12 1409  	 END LOOP;
14:35:12 1410  
14:35:12 1411  EXCEPTION
14:35:12 1412  WHEN BAD_INVOICE_ID THEN
14:35:12 1413  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1414  	   SPROC_NAME, 'No such invoice');
14:35:12 1415  WHEN OTHERS THEN
14:35:12 1416  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1417  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1418  END CLOSE_INVOICE_AS_NOT_COLLECTED;
14:35:12 1419  
14:35:12 1420  /******************************************************************************/
14:35:12 1421  
14:35:12 1422  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
14:35:12 1423  	 in_invoice_id	     IN NUMBER,
14:35:12 1424  	 out_subscription_id OUT NUMBER
14:35:12 1425  ) AS
14:35:12 1426  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
14:35:12 1427  -- VARIABLES
14:35:12 1428  temp_invoice_id NUMBER;
14:35:12 1429  -- EXCEPTIONS
14:35:12 1430  BAD_INVOICE_ID		 EXCEPTION;
14:35:12 1431  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
14:35:12 1432  BEGIN
14:35:12 1433  
14:35:12 1434  	 BEGIN
14:35:12 1435  	   SELECT
14:35:12 1436  	     INVOICE.ID into temp_invoice_id
14:35:12 1437  	   FROM
14:35:12 1438  	     INVOICE
14:35:12 1439  	   WHERE
14:35:12 1440  	     INVOICE.ID = in_invoice_id;
14:35:12 1441  	   EXCEPTION
14:35:12 1442  	     WHEN NO_DATA_FOUND THEN
14:35:12 1443  	       RAISE BAD_INVOICE_ID;
14:35:12 1444  	 END;
14:35:12 1445  
14:35:12 1446  	 BEGIN
14:35:12 1447  	   SELECT DISTINCT
14:35:12 1448  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
14:35:12 1449  	   FROM
14:35:12 1450  	     LICENSE
14:35:12 1451  	   WHERE
14:35:12 1452  	     LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 1453  	   EXCEPTION
14:35:12 1454  	     WHEN NO_DATA_FOUND THEN
14:35:12 1455  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
14:35:12 1456  	 END;
14:35:12 1457  
14:35:12 1458  EXCEPTION
14:35:12 1459  WHEN BAD_INVOICE_ID THEN
14:35:12 1460  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1461  	   SPROC_NAME, 'No such invoice');
14:35:12 1462  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
14:35:12 1463  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1464  	   SPROC_NAME, 'Could not find subscription for given invoice');
14:35:12 1465  WHEN OTHERS THEN
14:35:12 1466  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1468  END GET_SUBSCR_ID_BY_INVOICE_ID;
14:35:12 1469  
14:35:12 1470  /******************************************************************************/
14:35:12 1471  
14:35:12 1472  PROCEDURE IS_INVOICE_TAX_EXEMPT (
14:35:12 1473  /*
14:35:12 1474  Throws exceptions:
14:35:12 1475  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1476  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1477  Return:
14:35:12 1478  	 GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
14:35:12 1479  	 GLOBAL_CONSTANTS_V16.FALSE else
14:35:12 1480  */
14:35:12 1481  	 in_invoice_id	   IN NUMBER,
14:35:12 1482  	 out_is_tax_exempt OUT NUMBER
14:35:12 1483  ) AS
14:35:12 1484  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
14:35:12 1485  -- VARIABLES
14:35:12 1486  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
14:35:12 1487  -- EXCEPTIONS
14:35:12 1488  BAD_INVOICE_ID EXCEPTION;
14:35:12 1489  BEGIN
14:35:12 1490  
14:35:12 1491  	 BEGIN
14:35:12 1492  	   SELECT
14:35:12 1493  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
14:35:12 1494  	   FROM
14:35:12 1495  	     INVOICE
14:35:12 1496  	   WHERE
14:35:12 1497  	     INVOICE.ID = in_invoice_id;
14:35:12 1498  	   EXCEPTION
14:35:12 1499  	     WHEN NO_DATA_FOUND THEN
14:35:12 1500  	       RAISE BAD_INVOICE_ID;
14:35:12 1501  	 END;
14:35:12 1502  
14:35:12 1503  	 IF var_is_tax_exempt IS NULL THEN
14:35:12 1504  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 1505  	 ELSE
14:35:12 1506  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 1507  	 END IF;
14:35:12 1508  
14:35:12 1509  EXCEPTION
14:35:12 1510  WHEN BAD_INVOICE_ID THEN
14:35:12 1511  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1512  	   SPROC_NAME, 'No such invoice');
14:35:12 1513  WHEN OTHERS THEN
14:35:12 1514  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1515  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1516  END IS_INVOICE_TAX_EXEMPT;
14:35:12 1517  
14:35:12 1518  /******************************************************************************/
14:35:12 1519  
14:35:12 1520  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
14:35:12 1521  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
14:35:12 1522  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1523  ) AS
14:35:12 1524  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
14:35:12 1525  -- VARIABLE
14:35:12 1526  temp_order_id TRANSACTION.ORDER_ID%TYPE;
14:35:12 1527  -- EXCEPTIONS
14:35:12 1528  BAD_ORDER_ID EXCEPTION;
14:35:12 1529  CAN_NOT_FIND_INVOICE EXCEPTION;
14:35:12 1530  BEGIN
14:35:12 1531  
14:35:12 1532  	 OPEN out_result_set FOR
14:35:12 1533  	   SELECT DISTINCT
14:35:12 1534  	     CHARGE.INVOICE_ID
14:35:12 1535  	   FROM
14:35:12 1536  	     CHARGE
14:35:12 1537  	   INNER JOIN
14:35:12 1538  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
14:35:12 1539  	   WHERE
14:35:12 1540  	     TRANSACTION.ORDER_ID = in_order_id;
14:35:12 1541  
14:35:12 1542  EXCEPTION
14:35:12 1543  WHEN BAD_ORDER_ID THEN
14:35:12 1544  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1545  	   SPROC_NAME, 'No such transaction');
14:35:12 1546  WHEN CAN_NOT_FIND_INVOICE THEN
14:35:12 1547  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1548  	   SPROC_NAME, 'Could not find invoice for given order id');
14:35:12 1549  WHEN OTHERS THEN
14:35:12 1550  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1551  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1552  END GET_INVOICE_BY_TRNS_ORDER_ID;
14:35:12 1553  
14:35:12 1554  /******************************************************************************/
14:35:12 1555  
14:35:12 1556  PROCEDURE GET_INVOICE_BY_ID (
14:35:12 1557  	 in_invoice_id	IN NUMBER,
14:35:12 1558  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1559  ) AS
14:35:12 1560  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
14:35:12 1561  -- VARIABLE
14:35:12 1562  temp_invoice_id NUMBER;
14:35:12 1563  -- EXCEPTIONS
14:35:12 1564  BAD_INVOCIE_ID EXCEPTION;
14:35:12 1565  BEGIN
14:35:12 1566  
14:35:12 1567  	 BEGIN
14:35:12 1568  	   SELECT
14:35:12 1569  	     INVOICE.ID into temp_invoice_id
14:35:12 1570  	   FROM
14:35:12 1571  	     INVOICE
14:35:12 1572  	   WHERE
14:35:12 1573  	     INVOICE.ID = in_invoice_id;
14:35:12 1574  	   EXCEPTION
14:35:12 1575  	     WHEN NO_DATA_FOUND THEN
14:35:12 1576  	       RAISE BAD_INVOCIE_ID;
14:35:12 1577  	 END;
14:35:12 1578  
14:35:12 1579  	 OPEN out_result_set FOR
14:35:12 1580  	 SELECT
14:35:12 1581  	   INVOICE.ID,
14:35:12 1582  	   INVOICE.INVOICE_STATUS_ID,
14:35:12 1583  	   INVOICE.TAX_EXEMPT_ID,
14:35:12 1584  	   INVOICE.UPDATE_DATE,
14:35:12 1585  	   INVOICE.UPDATED_BY,
14:35:12 1586  	   INVOICE.CREATE_DATE,
14:35:12 1587  	   INVOICE.CREATED_BY
14:35:12 1588  	 FROM
14:35:12 1589  	   INVOICE
14:35:12 1590  	 WHERE
14:35:12 1591  	   INVOICE.ID = in_invoice_id;
14:35:12 1592  
14:35:12 1593  EXCEPTION
14:35:12 1594  WHEN BAD_INVOCIE_ID THEN
14:35:12 1595  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1596  	   SPROC_NAME, 'No such invoice');
14:35:12 1597  WHEN OTHERS THEN
14:35:12 1598  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1599  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1600  END GET_INVOICE_BY_ID;
14:35:12 1601  
14:35:12 1602  /******************************************************************************/
14:35:12 1603  
14:35:12 1604  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
14:35:12 1605  	 in_invoice_id		       IN NUMBER,
14:35:12 1606  	 out_is_tax_calculation_needed OUT NUMBER
14:35:12 1607  ) AS
14:35:12 1608  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
14:35:12 1609  BEGIN
14:35:12 1610  
14:35:12 1611  	 SELECT
14:35:12 1612  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
14:35:12 1613  	 FROM
14:35:12 1614  	   INVOICE I
14:35:12 1615  	 WHERE
14:35:12 1616  	   I.ID = in_invoice_id;
14:35:12 1617  
14:35:12 1618  EXCEPTION
14:35:12 1619  WHEN NO_DATA_FOUND THEN
14:35:12 1620  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1621  	   SPROC_NAME, 'No such invoice');
14:35:12 1622  WHEN OTHERS THEN
14:35:12 1623  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1624  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1625  END GET_IS_TAX_CALCULATION_NEEDED;
14:35:12 1626  
14:35:12 1627  /******************************************************************************/
14:35:12 1628  
14:35:12 1629  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
14:35:12 1630  	 in_invoice_id		      IN NUMBER,
14:35:12 1631  	 in_updated_by		      IN VARCHAR2,
14:35:12 1632  	 in_is_tax_calculation_needed IN NUMBER
14:35:12 1633  ) AS
14:35:12 1634  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
14:35:12 1635  -- VARIABLES
14:35:12 1636  temp_invoice_id	      NUMBER;
14:35:12 1637  -- EXCEPTIONS
14:35:12 1638  BAD_INVOICE_ID	      EXCEPTION;
14:35:12 1639  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
14:35:12 1640  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 1641  BEGIN
14:35:12 1642  
14:35:12 1643  	 BEGIN
14:35:12 1644  	   SELECT
14:35:12 1645  	     i.id into temp_invoice_id
14:35:12 1646  	   FROM
14:35:12 1647  	     invoice i
14:35:12 1648  	   WHERE
14:35:12 1649  	     i.id = in_invoice_id;
14:35:12 1650  	   EXCEPTION
14:35:12 1651  	     WHEN NO_DATA_FOUND THEN
14:35:12 1652  	       RAISE BAD_INVOICE_ID;
14:35:12 1653  	 END;
14:35:12 1654  
14:35:12 1655  	 BEGIN
14:35:12 1656  	   PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
14:35:12 1657  	     in_invoice_id => in_invoice_id,
14:35:12 1658  	     in_updated_by => in_updated_by,
14:35:12 1659  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
14:35:12 1660  	   );
14:35:12 1661  	   EXCEPTION
14:35:12 1662  	     WHEN OTHERS THEN
14:35:12 1663  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1664  	       RAISE CAN_NOT_UPDATE_INVOCIE;
14:35:12 1665  	 END;
14:35:12 1666  
14:35:12 1667  EXCEPTION
14:35:12 1668  WHEN BAD_INVOICE_ID THEN
14:35:12 1669  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1670  	   SPROC_NAME, 'No such invoice');
14:35:12 1671  WHEN CAN_NOT_UPDATE_INVOCIE THEN
14:35:12 1672  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1673  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
14:35:12 1674  WHEN OTHERS THEN
14:35:12 1675  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1676  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1677  END SET_IS_TAX_CALCULATION_NEEDED;
14:35:12 1678  
14:35:12 1679  /******************************************************************************/
14:35:12 1680  
14:35:12 1681  PROCEDURE REFUND_INVOICE (
14:35:12 1682  	 in_invoice_id	    IN NUMBER,
14:35:12 1683  	 in_refund_amount   IN NUMBER,
14:35:12 1684  	 in_note	    IN VARCHAR2,
14:35:12 1685  	 in_created_by	    IN VARCHAR2,
14:35:12 1686  	 out_charge_id	    OUT NUMBER
14:35:12 1687  ) AS
14:35:12 1688  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
14:35:12 1689  -- VARIABLES
14:35:12 1690  var_invoice_status_id  NUMBER;
14:35:12 1691  var_subscription_id    NUMBER;
14:35:12 1692  var_account_id	      NUMBER;
14:35:12 1693  var_group_id	      NUMBER;
14:35:12 1694  var_account_status_id  NUMBER;
14:35:12 1695  var_new_transaction_id NUMBER;
14:35:12 1696  var_instrument_type_id NUMBER;
14:35:12 1697  var_instrument_id      NUMBER;
14:35:12 1698  var_new_charge_id      NUMBER;
14:35:12 1699  var_invoice_amount     NUMBER(10,2);
14:35:12 1700  var_refunds_before     NUMBER(10,2);
14:35:12 1701  var_charges_amount     NUMBER(10,2);
14:35:12 1702  -- EXCEPTIONS
14:35:12 1703  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
14:35:12 1704  ACCOUNT_IS_FROZEN	     EXCEPTION;
14:35:12 1705  BAD_INVOICE_ID		     EXCEPTION;
14:35:12 1706  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
14:35:12 1707  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
14:35:12 1708  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
14:35:12 1709  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
14:35:12 1710  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
14:35:12 1711  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
14:35:12 1712  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
14:35:12 1713  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
14:35:12 1714  EXCEPTION_MESSAGE	      VARCHAR2(1024);
14:35:12 1715  BEGIN
14:35:12 1716  
14:35:12 1717  	 BEGIN
14:35:12 1718  	   SELECT
14:35:12 1719  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
14:35:12 1720  	   FROM
14:35:12 1721  	     INVOICE
14:35:12 1722  	   WHERE
14:35:12 1723  	     INVOICE.ID = in_invoice_id;
14:35:12 1724  	   EXCEPTION
14:35:12 1725  	     WHEN NO_DATA_FOUND THEN
14:35:12 1726  	       RAISE BAD_INVOICE_ID;
14:35:12 1727  	 END;
14:35:12 1728  
14:35:12 1729  	 -- Get instrument and subscription id if exists
14:35:12 1730  	 BEGIN
14:35:12 1731  	   SELECT
14:35:12 1732  	     SUBSCRIPTION.INSTRUMENT_ID,
14:35:12 1733  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
14:35:12 1734  	     SUBSCRIPTION.ACCOUNT_ID,
14:35:12 1735  	     SUBSCRIPTION.ID
14:35:12 1736  	     into
14:35:12 1737  	     var_instrument_id,
14:35:12 1738  	     var_instrument_type_id,
14:35:12 1739  	     var_account_id,
14:35:12 1740  	     var_subscription_id
14:35:12 1741  	   FROM
14:35:12 1742  	     SUBSCRIPTION
14:35:12 1743  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
14:35:12 1744  	   WHERE
14:35:12 1745  	     LICENSE.INVOICE_ID = in_invoice_id
14:35:12 1746  	     AND ROWNUM <= 1;
14:35:12 1747  	   EXCEPTION
14:35:12 1748  	     WHEN NO_DATA_FOUND THEN
14:35:12 1749  	       BEGIN
14:35:12 1750  
14:35:12 1751  		 var_subscription_id := NULL;
14:35:12 1752  
14:35:12 1753  		 SELECT
14:35:12 1754  		   CHARGE.INSTRUMENT_ID,
14:35:12 1755  		   CHARGE.INSTRUMENT_TYPE_ID,
14:35:12 1756  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
14:35:12 1757  		   into
14:35:12 1758  		   var_instrument_id,
14:35:12 1759  		   var_instrument_type_id,
14:35:12 1760  		   var_group_id
14:35:12 1761  		 FROM
14:35:12 1762  		   INVOICE
14:35:12 1763  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
14:35:12 1764  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
14:35:12 1765  		 WHERE
14:35:12 1766  		   INVOICE.ID = in_invoice_id
14:35:12 1767  		   AND ROWNUM <= 1;
14:35:12 1768  
14:35:12 1769  		 SELECT
14:35:12 1770  		   ACCOUNT.ID into var_account_id
14:35:12 1771  		 FROM
14:35:12 1772  		   ACCOUNT
14:35:12 1773  		 WHERE
14:35:12 1774  		   ACCOUNT.GROUP_ID = var_group_id;
14:35:12 1775  
14:35:12 1776  		 EXCEPTION
14:35:12 1777  		   WHEN NO_DATA_FOUND THEN
14:35:12 1778  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
14:35:12 1779  	       END;
14:35:12 1780  	 END;
14:35:12 1781  
14:35:12 1782  	 -- Check account status. It should not to be frozen
14:35:12 1783  	 SELECT
14:35:12 1784  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
14:35:12 1785  	 FROM
14:35:12 1786  	   ACCOUNT
14:35:12 1787  	 WHERE
14:35:12 1788  	   ACCOUNT.ID = var_account_id;
14:35:12 1789  
14:35:12 1790  	 IF var_account_status_id = GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
14:35:12 1791  	   RAISE ACCOUNT_IS_FROZEN;
14:35:12 1792  	 END IF;
14:35:12 1793  
14:35:12 1794  	 IF var_invoice_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
14:35:12 1795  	   RAISE INVOICE_IS_NOT_CLOSED;
14:35:12 1796  	 END IF;
14:35:12 1797  
14:35:12 1798  	 BEGIN
14:35:12 1799  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
14:35:12 1800  	     in_invoice_id => in_invoice_id,
14:35:12 1801  	     out_amount    => var_invoice_amount
14:35:12 1802  	   );
14:35:12 1803  	   EXCEPTION
14:35:12 1804  	     WHEN OTHERS THEN
14:35:12 1805  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1806  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:35:12 1807  	 END;
14:35:12 1808  
14:35:12 1809  	 IF ( in_refund_amount > var_invoice_amount ) THEN
14:35:12 1810  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
14:35:12 1811  	 END IF;
14:35:12 1812  
14:35:12 1813  	 SELECT /*+ STAR_TRANSFORMATION */
14:35:12 1814  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
14:35:12 1815  	 FROM
14:35:12 1816  	   CHARGE
14:35:12 1817  	 WHERE
14:35:12 1818  	   CHARGE.INVOICE_ID = in_invoice_id
14:35:12 1819  	   AND (
14:35:12 1820  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_OPENED
14:35:12 1821  	     OR (
14:35:12 1822  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V16.CHARGE_PROCESSED
14:35:12 1823  	       AND EXISTS (
14:35:12 1824  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
14:35:12 1825  	       )
14:35:12 1826  	     )
14:35:12 1827  	   )
14:35:12 1828  	   AND CHARGE.CHARGE_AMOUNT < 0;
14:35:12 1829  
14:35:12 1830  	 -- Refunds are negative
14:35:12 1831  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
14:35:12 1832  	 var_refunds_before := 0 - var_refunds_before;
14:35:12 1833  
14:35:12 1834  	 var_charges_amount := 0;
14:35:12 1835  
14:35:12 1836  	 FOR f_processed_charges IN (
14:35:12 1837  	   SELECT
14:35:12 1838  	     CHARGE.CHARGE_AMOUNT
14:35:12 1839  	   FROM
14:35:12 1840  	     CHARGE
14:35:12 1841  	   WHERE
14:35:12 1842  	     CHARGE.INVOICE_ID = in_invoice_id
14:35:12 1843  	     AND CHARGE.CHARGE_AMOUNT > 0
14:35:12 1844  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V16.CHARGE_PROCESSED FROM DUAL)
14:35:12 1845  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS)
14:35:12 1846  	 )
14:35:12 1847  	 LOOP
14:35:12 1848  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
14:35:12 1849  	 END LOOP;
14:35:12 1850  
14:35:12 1851  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
14:35:12 1852  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
14:35:12 1853  	 END IF;
14:35:12 1854  
14:35:12 1855  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
14:35:12 1856  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
14:35:12 1857  	 END IF;
14:35:12 1858  
14:35:12 1859  	 BEGIN
14:35:12 1860  	   PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
14:35:12 1861  	     in_transaction_id	=> NULL,
14:35:12 1862  	     in_status_id	=> GLOBAL_STATUSES_V16.TRANSACTION_PREPARE,
14:35:12 1863  	     in_amount		=> -in_refund_amount,
14:35:12 1864  	     in_created_by	=> in_created_by,
14:35:12 1865  	     in_order_id	=> NULL,
14:35:12 1866  	     in_is_refund	=> GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 1867  	     out_transaction_id => var_new_transaction_id
14:35:12 1868  	   );
14:35:12 1869  	   EXCEPTION
14:35:12 1870  	     WHEN OTHERS THEN
14:35:12 1871  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1872  	       RAISE CAN_NOT_CREATE_TRANSACTION;
14:35:12 1873  	 END;
14:35:12 1874  
14:35:12 1875  	 BEGIN
14:35:12 1876  	   PROCS_CHARGE_V16.CREATE_CHARGE(
14:35:12 1877  	     in_invoice_id	   => in_invoice_id,
14:35:12 1878  	     in_transaction_id	   => var_new_transaction_id,
14:35:12 1879  	     in_instrument_type_id => var_instrument_type_id,
14:35:12 1880  	     in_instrument_id	   => var_instrument_id,
14:35:12 1881  	     in_charge_amount	   => -in_refund_amount,
14:35:12 1882  	     in_created_by	   => in_created_by,
14:35:12 1883  	     in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
14:35:12 1884  	     out_charge_id	   => var_new_charge_id
14:35:12 1885  	   );
14:35:12 1886  	   EXCEPTION
14:35:12 1887  	     WHEN OTHERS THEN
14:35:12 1888  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1889  	       RAISE CAN_NOT_CREATE_CHARGE;
14:35:12 1890  	 END;
14:35:12 1891  
14:35:12 1892  	 out_charge_id := var_new_charge_id;
14:35:12 1893  
14:35:12 1894  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
14:35:12 1895  	   BEGIN
14:35:12 1896  	     PROCS_SUBSCRIPTION_V16.ANNOTATE_SUBSCRIPTION(
14:35:12 1897  	       in_subscription_id => var_subscription_id,
14:35:12 1898  	       in_agent_id	  => 0, -- AGENT_ID??
14:35:12 1899  	       in_note		  => in_note,
14:35:12 1900  	       in_created_by	  => in_created_by
14:35:12 1901  	     );
14:35:12 1902  	     EXCEPTION
14:35:12 1903  	       WHEN OTHERS THEN
14:35:12 1904  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1905  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
14:35:12 1906  	   END;
14:35:12 1907  	 END IF;
14:35:12 1908  
14:35:12 1909  EXCEPTION
14:35:12 1910  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
14:35:12 1911  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1912  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
14:35:12 1913  WHEN INVOICE_IS_NOT_CLOSED THEN
14:35:12 1914  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1915  	   SPROC_NAME, 'Invoice is not closed');
14:35:12 1916  WHEN ACCOUNT_IS_FROZEN THEN
14:35:12 1917  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1918  	   SPROC_NAME, 'Could not refund subscription for frozen account');
14:35:12 1919  WHEN BAD_INVOICE_ID THEN
14:35:12 1920  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1921  	   SPROC_NAME, 'No such invoice');
14:35:12 1922  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:35:12 1923  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1924  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
14:35:12 1925  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
14:35:12 1926  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1927  	   SPROC_NAME, 'Refund is greater than amount');
14:35:12 1928  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
14:35:12 1929  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1930  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
14:35:12 1931  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
14:35:12 1932  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1933  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
14:35:12 1934  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:35:12 1935  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1936  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:35:12 1937  WHEN CAN_NOT_CREATE_CHARGE THEN
14:35:12 1938  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1939  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:35:12 1940  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
14:35:12 1941  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1942  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:35:12 1943  WHEN OTHERS THEN
14:35:12 1944  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1945  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1946  END REFUND_INVOICE;
14:35:12 1947  
14:35:12 1948  /******************************************************************************/
14:35:12 1949  
14:35:12 1950  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
14:35:12 1951  	 in_invoice_id		     IN NUMBER,
14:35:12 1952  	 out_order_id		     OUT VARCHAR2,
14:35:12 1953  	 out_external_transaction_id OUT VARCHAR2
14:35:12 1954  ) AS
14:35:12 1955  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
14:35:12 1956  -- VARIABLES
14:35:12 1957  temp_invoice_id number;
14:35:12 1958  cnt_matched_instr number := 0;
14:35:12 1959  -- EXCEPTIONS
14:35:12 1960  BAD_INVOICE_ID EXCEPTION;
14:35:12 1961  BEGIN
14:35:12 1962  
14:35:12 1963  	 BEGIN
14:35:12 1964  	   SELECT
14:35:12 1965  	     i.id into temp_invoice_id
14:35:12 1966  	   from
14:35:12 1967  	     invoice i
14:35:12 1968  	   where
14:35:12 1969  	     i.id = in_invoice_id;
14:35:12 1970  	   EXCEPTION
14:35:12 1971  	     WHEN NO_DATA_FOUND THEN
14:35:12 1972  	       RAISE BAD_INVOICE_ID;
14:35:12 1973  	 END;
14:35:12 1974  
14:35:12 1975  	 select
14:35:12 1976  	   count(1) into cnt_matched_instr
14:35:12 1977  	 from
14:35:12 1978  	   charge ch
14:35:12 1979  	 inner join
14:35:12 1980  	   subscription s
14:35:12 1981  	 on
14:35:12 1982  	   s.instrument_id = ch.instrument_id
14:35:12 1983  	 where
14:35:12 1984  	   ch.invoice_id = in_invoice_id;
14:35:12 1985  
14:35:12 1986  	 if cnt_matched_instr = 0 then
14:35:12 1987  	   out_external_transaction_id := null;
14:35:12 1988  	   out_order_id := null;
14:35:12 1989  	   return;
14:35:12 1990  	 end if;
14:35:12 1991  
14:35:12 1992  	 SELECT
14:35:12 1993  	   t.order_id,
14:35:12 1994  	   ta.external_transaction_id
14:35:12 1995  	   into
14:35:12 1996  	   out_order_id,
14:35:12 1997  	   out_external_transaction_id
14:35:12 1998  	 from
14:35:12 1999  	   charge ch
14:35:12 2000  	   inner join transaction t on ch.transaction_id = t.id
14:35:12 2001  	   inner join transaction_attempt ta on ta.transaction_id = t.id
14:35:12 2002  	 where
14:35:12 2003  	   ch.invoice_id = in_invoice_id
14:35:12 2004  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
14:35:12 2005  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
14:35:12 2006  
14:35:12 2007  EXCEPTION
14:35:12 2008  WHEN BAD_INVOICE_ID THEN
14:35:12 2009  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2010  	   SPROC_NAME, 'No such invoice');
14:35:12 2011  WHEN NO_DATA_FOUND THEN
14:35:12 2012  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2013  	   SPROC_NAME, 'No payment data found');
14:35:12 2014  WHEN OTHERS THEN
14:35:12 2015  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2016  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2017  END GET_PAYMENT_INFO_BY_INVOICE_ID;
14:35:12 2018  
14:35:12 2019  PROCEDURE IS_REVOKE_ENTITLEMENTS(
14:35:12 2020  	 in_invoice_id IN NUMBER,
14:35:12 2021  	 out_is_revoke OUT NUMBER
14:35:12 2022  ) AS
14:35:12 2023  BEGIN
14:35:12 2024  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V16.FALSE, GLOBAL_CONSTANTS_V16.TRUE)
14:35:12 2025  	   into out_is_revoke
14:35:12 2026  	 FROM
14:35:12 2027  	   offer_chain oc,
14:35:12 2028  	   subscription s,
14:35:12 2029  	   license l,
14:35:12 2030  	   invoice i
14:35:12 2031  	 where
14:35:12 2032  	   oc.id = s.offer_chain_id and
14:35:12 2033  	   s.id = l.subscription_id and
14:35:12 2034  	   l.invoice_id = i.id and
14:35:12 2035  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V16.TRUE and
14:35:12 2036  	   i.id = in_invoice_id and
14:35:12 2037  	   rownum < 2
14:35:12 2038  	 ;
14:35:12 2039  END IS_REVOKE_ENTITLEMENTS;
14:35:12 2040  
14:35:12 2041  END PROCS_INVOICE_V16;
14:35:12 2042  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
14:35:12   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:12   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
14:35:12   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
14:35:12   7  AS
14:35:12   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
14:35:12   9  BEGIN
14:35:12  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
14:35:12  11  	  PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE (
14:35:12  12  	    in_gift_certificate_id	  => rec.Id,
14:35:12  13  	    in_gift_certificate_status_id => in_status_id,
14:35:12  14  	    in_updated_by		  => in_updater
14:35:12  15  	  );
14:35:12  16  	END LOOP;
14:35:12  17  END UPDATE_GC_STATUS_BY_INVOICE;
14:35:12  18  
14:35:12  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
14:35:12  20  	in_invoice_id		     IN NUMBER,
14:35:12  21  	out_is_invoice_for_redeem_gc OUT NUMBER
14:35:12  22  ) AS
14:35:12  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
14:35:12  24  var_is_for_gc NUMBER;
14:35:12  25  BEGIN
14:35:12  26  	SELECT
14:35:12  27  	  count(1) into var_is_for_gc
14:35:12  28  	FROM GIFT_CERTIFICATE GC
14:35:12  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
14:35:12  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
14:35:12  31  
14:35:12  32  	IF var_is_for_gc > 0 THEN
14:35:12  33  	  out_is_invoice_for_redeem_gc := 1;
14:35:12  34  	ELSE
14:35:12  35  	  out_is_invoice_for_redeem_gc := 0;
14:35:12  36  	END IF;
14:35:12  37  END IS_INVOICE_FOR_REDEEMED_GC;
14:35:12  38  
14:35:12  39  PROCEDURE GET_UNREDEEMED_GCS (
14:35:12  40  	out_result_set		OUT SYS_REFCURSOR,
14:35:12  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:35:12  42  	in_num_rows		IN NUMBER DEFAULT 10000,
14:35:12  43  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:12  44  ) AS
14:35:12  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
14:35:12  46  BEGIN
14:35:12  47  	OPEN out_result_set FOR
14:35:12  48  SELECT * FROM
14:35:12  49  (
14:35:12  50  	SELECT
14:35:12  51  	  gc.EXPIRATION_DATE,
14:35:12  52  	  ch.name,
14:35:12  53  	  ch.id offer_chain_id,
14:35:12  54  	  gc.sender_email,
14:35:12  55  	  gc.sender_name,
14:35:12  56  	  gc.recipient_email,
14:35:12  57  	  gc.recipient_name,
14:35:12  58  	  gc.purchase_date,
14:35:12  59  	  gc.redemption_date,
14:35:12  60  	  gc.purchaser_group_id,
14:35:12  61  	  gc.redeemer_group_id,
14:35:12  62  	  gc.code,
14:35:12  63  	  gc.gift_message,
14:35:12  64  	  gc.recipient_notify_date,
14:35:12  65  	  gc.id
14:35:12  66  	FROM
14:35:12  67  	  GIFT_CERTIFICATE gc,
14:35:12  68  	  OFFER_CHAIN ch
14:35:12  69  	WHERE
14:35:12  70  	  ch.id = gc.offer_chain_id
14:35:12  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
14:35:12  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
14:35:12  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
14:35:12  74  	  AND gc.redeemer_group_id is null
14:35:12  75  	  AND NOT EXISTS(
14:35:12  76  	    SELECT NULL
14:35:12  77  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
14:35:12  78  	    WHERE PROCESS_NAME = in_process_name
14:35:12  79  	      AND GENERIC_ID = gc.id
14:35:12  80  	  ) AND EXISTS(
14:35:12  81  	    SELECT NULL
14:35:12  82  	    FROM
14:35:12  83  	      charge c,
14:35:12  84  	      transaction_attempt ta,
14:35:12  85  	      transaction t
14:35:12  86  	    WHERE
14:35:12  87  	      c.invoice_id = gc.purchase_invoice_id and
14:35:12  88  	      c.transaction_id = t.id and
14:35:12  89  	      t.id = ta.transaction_id and
14:35:12  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS
14:35:12  91  	  ) AND NOT EXISTS (
14:35:12  92  	    SELECT NULL
14:35:12  93  	    FROM
14:35:12  94  	      charge c,
14:35:12  95  	      transaction t
14:35:12  96  	    WHERE
14:35:12  97  	      c.invoice_id = gc.purchase_invoice_id and
14:35:12  98  	      c.transaction_id = t.id and
14:35:12  99  	      t.is_refund = GLOBAL_CONSTANTS_V16.TRUE
14:35:12 100  	  )
14:35:12 101  	  AND ROWNUM <= in_num_rows*10
14:35:12 102  	  ORDER BY dbms_random.value
14:35:12 103  ) WHERE
14:35:12 104  	  ROWNUM <= in_num_rows;
14:35:12 105  EXCEPTION
14:35:12 106  WHEN OTHERS THEN
14:35:12 107  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 109  END GET_UNREDEEMED_GCS;
14:35:12 110  
14:35:12 111  PROCEDURE ADD_CREDIT_CARD (
14:35:12 112  /*
14:35:12 113  Throws exceptions:
14:35:12 114  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 115  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 116  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 117  */
14:35:12 118  	in_group_id		  IN NUMBER,
14:35:12 119  	in_updated_by		  IN VARCHAR2,
14:35:12 120  	in_instrument_name	  IN VARCHAR2,
14:35:12 121  	in_card_holder_name	  IN VARCHAR2,
14:35:12 122  	in_street_address	  IN VARCHAR2,
14:35:12 123  	in_street_address2	  IN VARCHAR2,
14:35:12 124  	in_state		  IN VARCHAR2,
14:35:12 125  	in_city 		  IN VARCHAR2,
14:35:12 126  	in_postal_code		  IN VARCHAR2,
14:35:12 127  	in_country		  IN CHAR,
14:35:12 128  	in_last_four_cc 	  IN VARCHAR2,
14:35:12 129  	in_expiration_date	  IN DATE,
14:35:12 130  	in_credit_card_type_id	  IN NUMBER,
14:35:12 131  	in_token		  IN VARCHAR2,
14:35:12 132  	in_chase_profile_id	  IN VARCHAR2,
14:35:12 133  	in_credit_card_status_id  IN NUMBER,
14:35:12 134  	in_private_first_name	  IN VARCHAR2,
14:35:12 135  	in_private_last_name	  IN VARCHAR2,
14:35:12 136  	out_credit_card_id	  OUT NUMBER
14:35:12 137  ) AS
14:35:12 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
14:35:12 139  -- VARIABLES
14:35:12 140  var_account_id	      NUMBER;
14:35:12 141  var_account_status      NUMBER;
14:35:12 142  var_credit_card_id      NUMBER;
14:35:12 143  temp_old_credit_card_id NUMBER;
14:35:12 144  -- EXCEPTIONS
14:35:12 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
14:35:12 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
14:35:12 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
14:35:12 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
14:35:12 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
14:35:12 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
14:35:12 151  var_charges_set		SYS_REFCURSOR;
14:35:12 152  var_charge_id		NUMBER;
14:35:12 153  var_charge_invoice_id	NUMBER;
14:35:12 154  var_charge_transaction_id NUMBER;
14:35:12 155  var_charge_amount 	NUMBER(10,2);
14:35:12 156  temp_out_charge_id	NUMBER;
14:35:12 157  temp_out_transaction_id	NUMBER;
14:35:12 158  var_order_id			VARCHAR2(1024);
14:35:12 159  BEGIN
14:35:12 160  
14:35:12 161  	-- Get account id
14:35:12 162  	-- Get account status
14:35:12 163  	SELECT
14:35:12 164  	  ACCOUNT.ID,
14:35:12 165  	  ACCOUNT.ACCOUNT_STATUS_ID
14:35:12 166  	  into
14:35:12 167  	  var_account_id,
14:35:12 168  	  var_account_status
14:35:12 169  	FROM
14:35:12 170  	  ACCOUNT
14:35:12 171  	WHERE
14:35:12 172  	  ACCOUNT.GROUP_ID = in_group_id;
14:35:12 173  
14:35:12 174  	SELECT
14:35:12 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
14:35:12 176  	FROM DUAL;
14:35:12 177  
14:35:12 178  	-- Insert new row in CREDIT_CARD table
14:35:12 179  	PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_CREDIT_CARD(
14:35:12 180  	  out_credit_card_id	      => var_credit_card_id,
14:35:12 181  	  in_account_id 	      => var_account_id,
14:35:12 182  	  in_instrument_name	      => in_instrument_name,
14:35:12 183  	  in_private_card_holder_name => in_card_holder_name,
14:35:12 184  	  in_private_street_address   => in_street_address,
14:35:12 185  	  in_private_street_address2  => in_street_address2,
14:35:12 186  	  in_state		      => in_state,
14:35:12 187  	  in_city		      => in_city,
14:35:12 188  	  in_postal_code	      => in_postal_code,
14:35:12 189  	  in_country		      => in_country,
14:35:12 190  	  in_last_four_cc	      => in_last_four_cc,
14:35:12 191  	  in_expiration_date	      => in_expiration_date,
14:35:12 192  	  in_credit_card_type_id      => in_credit_card_type_id,
14:35:12 193  	  in_secret_token	      => in_token,
14:35:12 194  	  in_chase_profile_id	      => in_chase_profile_id,
14:35:12 195  	  in_created_by 	      => in_updated_by,
14:35:12 196  	  in_credit_card_status_id    => in_credit_card_status_id,
14:35:12 197  	  in_private_first_name       => in_private_first_name,
14:35:12 198  	  in_private_last_name	      => in_private_last_name
14:35:12 199  	);
14:35:12 200  
14:35:12 201  	out_credit_card_id := var_credit_card_id;
14:35:12 202  
14:35:12 203  EXCEPTION
14:35:12 204  WHEN NO_DATA_FOUND THEN
14:35:12 205  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 206  	  SPROC_NAME, 'No such account');
14:35:12 207  WHEN BAD_OLD_CREDIT_CARD THEN
14:35:12 208  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 209  	  SPROC_NAME, 'Bad old credit card id');
14:35:12 210  WHEN BAD_IS_DEFAULT_VALUE THEN
14:35:12 211  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 212  	  SPROC_NAME, 'Bad is_default value');
14:35:12 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
14:35:12 214  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
14:35:12 216  WHEN BAD_ACCOUNT_STATUS THEN
14:35:12 217  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 218  	  SPROC_NAME, 'Account is not active');
14:35:12 219  WHEN OTHERS THEN
14:35:12 220  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 222  END ADD_CREDIT_CARD;
14:35:12 223  
14:35:12 224  /******************************************************************************/
14:35:12 225  
14:35:12 226  PROCEDURE ADD_PAYPAL (
14:35:12 227  /*
14:35:12 228  Throws exceptions:
14:35:12 229  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 230  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 231  */
14:35:12 232  	in_group_id			IN NUMBER,
14:35:12 233  	in_instrument_name		IN VARCHAR2,
14:35:12 234  	in_private_email_address	IN VARCHAR2,
14:35:12 235  	in_created_by			IN VARCHAR2,
14:35:12 236  	in_paypal_status_id		IN NUMBER,
14:35:12 237  	in_paypal_prvt_street_address	IN VARCHAR2,
14:35:12 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
14:35:12 239  	in_state			IN VARCHAR2,
14:35:12 240  	in_city 			IN VARCHAR2,
14:35:12 241  	in_postal_code			IN VARCHAR2,
14:35:12 242  	in_country			IN CHAR,
14:35:12 243  	in_expiration_date		IN DATE,
14:35:12 244  	in_secret_token 		IN VARCHAR2,
14:35:12 245  	out_paypal_id			OUT NUMBER
14:35:12 246  ) AS
14:35:12 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
14:35:12 248  var_paypal_id NUMBER;
14:35:12 249  var_account_id  NUMBER;
14:35:12 250  -- EXCEPTIONS
14:35:12 251  BAD_GROUP_ID	    EXCEPTION;
14:35:12 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
14:35:12 253  BAD_PAYPAL_STATUS     EXCEPTION;
14:35:12 254  EXCEPTION_MESSAGE VARCHAR2(1024);
14:35:12 255  BEGIN
14:35:12 256  
14:35:12 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
14:35:12 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
14:35:12 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
14:35:12 260  	  RAISE BAD_PAYPAL_STATUS;
14:35:12 261  	END IF;
14:35:12 262  
14:35:12 263  	BEGIN
14:35:12 264  	  SELECT
14:35:12 265  	    a.id into var_account_id
14:35:12 266  	  from
14:35:12 267  	    account a
14:35:12 268  	  where
14:35:12 269  	    a.group_id = in_group_id;
14:35:12 270  	  EXCEPTION
14:35:12 271  	    WHEN NO_DATA_FOUND THEN
14:35:12 272  	      RAISE BAD_GROUP_ID;
14:35:12 273  	END;
14:35:12 274  
14:35:12 275  	BEGIN
14:35:12 276  	  PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_PAYPAL(
14:35:12 277  	    out_paypal_id		   => var_paypal_id,
14:35:12 278  	    in_paypal_id		   => NULL,
14:35:12 279  	    in_account_id		   => var_account_id,
14:35:12 280  	    in_instrument_name		   => in_instrument_name,
14:35:12 281  	    in_private_email_address	   => in_private_email_address,
14:35:12 282  	    in_created_by		   => in_created_by,
14:35:12 283  	    in_paypal_status_id 	   => in_paypal_status_id,
14:35:12 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
14:35:12 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
14:35:12 286  	    in_state			   => in_state,
14:35:12 287  	    in_city			   => in_city,
14:35:12 288  	    in_postal_code		   => in_postal_code,
14:35:12 289  	    in_country			   => in_country,
14:35:12 290  	    in_expiration_date		   => in_expiration_date,
14:35:12 291  	    in_secret_token		   => in_secret_token
14:35:12 292  	  );
14:35:12 293  	  EXCEPTION
14:35:12 294  	    WHEN OTHERS THEN
14:35:12 295  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
14:35:12 297  	END;
14:35:12 298  
14:35:12 299  	out_paypal_id := var_paypal_id;
14:35:12 300  
14:35:12 301  EXCEPTION
14:35:12 302  WHEN BAD_GROUP_ID THEN
14:35:12 303  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 304  	  SPROC_NAME, 'No such group id');
14:35:12 305  WHEN BAD_PAYPAL_STATUS THEN
14:35:12 306  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 307  	  SPROC_NAME, 'Bad paypal status');
14:35:12 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
14:35:12 309  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
14:35:12 311  WHEN OTHERS THEN
14:35:12 312  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 314  END ADD_PAYPAL;
14:35:12 315  
14:35:12 316  /******************************************************************************/
14:35:12 317  
14:35:12 318  PROCEDURE DISABLE_CREDIT_CARD (
14:35:12 319  /*
14:35:12 320  Throws exceptions:
14:35:12 321  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 322  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 323  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 324  */
14:35:12 325  	in_credit_card_id IN NUMBER,
14:35:12 326  	in_updated_by	  IN VARCHAR2
14:35:12 327  ) AS
14:35:12 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
14:35:12 329  -- VARIBLES
14:35:12 330  var_account_id		     NUMBER;
14:35:12 331  var_group_id		     NUMBER;
14:35:12 332  var_credit_card_status	     NUMBER;
14:35:12 333  var_pending_transactions_num   NUMBER;
14:35:12 334  var_pending_invoices_num	     NUMBER;
14:35:12 335  current_def_instrument_type_id NUMBER;
14:35:12 336  current_def_instrument_id      NUMBER;
14:35:12 337  -- EXCEPTIONS
14:35:12 338  BAD_CC_STATUS		   EXCEPTION;
14:35:12 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
14:35:12 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
14:35:12 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
14:35:12 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
14:35:12 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
14:35:12 344  BEGIN
14:35:12 345  
14:35:12 346  	-- Get credit card status
14:35:12 347  	-- Get account id
14:35:12 348  	SELECT
14:35:12 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
14:35:12 350  	  CREDIT_CARD.ACCOUNT_ID
14:35:12 351  	  into
14:35:12 352  	  var_credit_card_status,
14:35:12 353  	  var_account_id
14:35:12 354  	FROM
14:35:12 355  	  CREDIT_CARD
14:35:12 356  	WHERE
14:35:12 357  	  CREDIT_CARD.ID = in_credit_card_id;
14:35:12 358  
14:35:12 359  	-- Check that we can disable this credit card (STUB)
14:35:12 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
14:35:12 362  	END IF;
14:35:12 363  
14:35:12 364  	-- Get account id
14:35:12 365  	SELECT
14:35:12 366  	  ACCOUNT.GROUP_ID into var_group_id
14:35:12 367  	FROM
14:35:12 368  	  ACCOUNT
14:35:12 369  	WHERE
14:35:12 370  	  ACCOUNT.ID = var_account_id;
14:35:12 371  
14:35:12 372  	-- Card should to be active
14:35:12 373  	IF var_credit_card_status != GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE THEN
14:35:12 374  	  RAISE BAD_CC_STATUS;
14:35:12 375  	END IF;
14:35:12 376  
14:35:12 377  	-- Looking for pending transactions associated with given credit card
14:35:12 378  	SELECT
14:35:12 379  	  COUNT(*) into var_pending_invoices_num
14:35:12 380  	FROM
14:35:12 381  	  CHARGE
14:35:12 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:35:12 383  	WHERE
14:35:12 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
14:35:12 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
14:35:12 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
14:35:12 387  
14:35:12 388  	IF var_pending_invoices_num > 0 THEN
14:35:12 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
14:35:12 390  	END IF;
14:35:12 391  
14:35:12 392  	-- Getting current default financial instrument
14:35:12 393  	BEGIN
14:35:12 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
14:35:12 395  	    in_group_id 	   => var_group_id,
14:35:12 396  	    out_instrument_type_id => current_def_instrument_type_id,
14:35:12 397  	    out_instrument_id	   => current_def_instrument_id
14:35:12 398  	  );
14:35:12 399  	  EXCEPTION
14:35:12 400  	    WHEN OTHERS THEN
14:35:12 401  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
14:35:12 403  	END;
14:35:12 404  
14:35:12 405  	-- Checking that credit card is not default
14:35:12 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
14:35:12 407  	  AND current_def_instrument_id = in_credit_card_id THEN
14:35:12 408  	  BEGIN
14:35:12 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
14:35:12 410  	      in_group_id => var_group_id
14:35:12 411  	    );
14:35:12 412  	  EXCEPTION
14:35:12 413  	    WHEN OTHERS THEN
14:35:12 414  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
14:35:12 416  	  END;
14:35:12 417  	END IF;
14:35:12 418  
14:35:12 419  	-- Update credit card status
14:35:12 420  	PROCS_FIN_INSTRUMENTS_V16.UPDATE_CREDIT_CARD_STATUS(
14:35:12 421  	  in_credit_card_id	   => in_credit_card_id,
14:35:12 422  	  in_updated_by 	   => in_updated_by,
14:35:12 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
14:35:12 424  	);
14:35:12 425  
14:35:12 426  EXCEPTION
14:35:12 427  WHEN NO_DATA_FOUND THEN
14:35:12 428  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 429  	  SPROC_NAME, 'No such credit card');
14:35:12 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
14:35:12 431  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
14:35:12 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
14:35:12 434  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
14:35:12 436  WHEN BAD_CC_STATUS THEN
14:35:12 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 438  	  SPROC_NAME, 'Credit card is not active');
14:35:12 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
14:35:12 440  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
14:35:12 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
14:35:12 443  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
14:35:12 445  WHEN OTHERS THEN
14:35:12 446  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 448  END DISABLE_CREDIT_CARD;
14:35:12 449  
14:35:12 450  /******************************************************************************/
14:35:12 451  
14:35:12 452  PROCEDURE DISABLE_PAYPAL (
14:35:12 453  /*
14:35:12 454  Throws exceptions:
14:35:12 455  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 456  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 457  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 458  */
14:35:12 459  	in_paypal_id  IN NUMBER,
14:35:12 460  	in_updated_by IN VARCHAR2
14:35:12 461  ) AS
14:35:12 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
14:35:12 463  -- VARIABLES
14:35:12 464  var_paypal_status_id NUMBER;
14:35:12 465  var_account_id	   NUMBER;
14:35:12 466  var_group_id	   NUMBER;
14:35:12 467  var_pending_invoices_num NUMBER;
14:35:12 468  current_def_instrument_type_id NUMBER;
14:35:12 469  current_def_instrument_id NUMBER;
14:35:12 470  -- EXCEPTIONS
14:35:12 471  BAD_PAYPAL_ID EXCEPTION;
14:35:12 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
14:35:12 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
14:35:12 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
14:35:12 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
14:35:12 476  EXCEPTION_MESSAGE VARCHAR2(1024);
14:35:12 477  BEGIN
14:35:12 478  
14:35:12 479  	-- Get Paypal status
14:35:12 480  	-- Get account
14:35:12 481  	BEGIN
14:35:12 482  	  SELECT
14:35:12 483  	    PAYPAL.PAYPAL_STATUS_ID,
14:35:12 484  	    PAYPAL.ACCOUNT_ID
14:35:12 485  	    into
14:35:12 486  	    var_paypal_status_id,
14:35:12 487  	    var_account_id
14:35:12 488  	  FROM
14:35:12 489  	    PAYPAL
14:35:12 490  	  WHERE
14:35:12 491  	    PAYPAL.ID = in_paypal_id;
14:35:12 492  	  EXCEPTION
14:35:12 493  	    WHEN NO_DATA_FOUND THEN
14:35:12 494  	      RAISE BAD_PAYPAL_ID;
14:35:12 495  	END;
14:35:12 496  
14:35:12 497  	-- Get group id
14:35:12 498  	SELECT
14:35:12 499  	  ACCOUNT.GROUP_ID into var_group_id
14:35:12 500  	FROM
14:35:12 501  	  ACCOUNT
14:35:12 502  	WHERE
14:35:12 503  	  ACCOUNT.ID = var_account_id;
14:35:12 504  
14:35:12 505  	-- Card should not be disabled
14:35:12 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V16.PAYPAL_INACTIVE THEN
14:35:12 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
14:35:12 508  	END IF;
14:35:12 509  
14:35:12 510  	-- Looking for pending transactions associated with given credit card
14:35:12 511  	SELECT
14:35:12 512  	  COUNT(*) into var_pending_invoices_num
14:35:12 513  	FROM
14:35:12 514  	  CHARGE
14:35:12 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:35:12 516  	WHERE
14:35:12 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
14:35:12 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
14:35:12 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V16.TRANSACTION_PENDING;
14:35:12 520  
14:35:12 521  	IF var_pending_invoices_num > 0 THEN
14:35:12 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
14:35:12 523  	END IF;
14:35:12 524  
14:35:12 525  	-- Getting current default financial instrument
14:35:12 526  	BEGIN
14:35:12 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
14:35:12 528  	    in_group_id 	   => var_group_id,
14:35:12 529  	    out_instrument_type_id => current_def_instrument_type_id,
14:35:12 530  	    out_instrument_id	   => current_def_instrument_id
14:35:12 531  	  );
14:35:12 532  	  EXCEPTION
14:35:12 533  	    WHEN OTHERS THEN
14:35:12 534  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
14:35:12 536  	END;
14:35:12 537  
14:35:12 538  	-- Checking that credit card is not default
14:35:12 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
14:35:12 540  	  AND current_def_instrument_id = in_paypal_id THEN
14:35:12 541  	  BEGIN
14:35:12 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
14:35:12 543  	      in_group_id => var_group_id
14:35:12 544  	    );
14:35:12 545  	  EXCEPTION
14:35:12 546  	    WHEN OTHERS THEN
14:35:12 547  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
14:35:12 549  	  END;
14:35:12 550  	END IF;
14:35:12 551  
14:35:12 552  	PROCS_FIN_INSTRUMENTS_V16.UPDATE_PAYPAL_STATUS(
14:35:12 553  	  in_paypal_id	      => in_paypal_id,
14:35:12 554  	  in_updated_by       => in_updated_by,
14:35:12 555  	  in_paypal_status_id => GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
14:35:12 556  	);
14:35:12 557  
14:35:12 558  EXCEPTION
14:35:12 559  WHEN BAD_PAYPAL_ID THEN
14:35:12 560  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 561  	  SPROC_NAME, 'No such paypal');
14:35:12 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
14:35:12 563  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 564  	  SPROC_NAME, 'Paypal already inactive');
14:35:12 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
14:35:12 566  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
14:35:12 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
14:35:12 569  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
14:35:12 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
14:35:12 572  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
14:35:12 574  WHEN OTHERS THEN
14:35:12 575  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 577  END DISABLE_PAYPAL;
14:35:12 578  
14:35:12 579  /******************************************************************************/
14:35:12 580  
14:35:12 581  PROCEDURE UPDATE_CREDIT_CARD (
14:35:12 582  /*
14:35:12 583  Throws exceptions:
14:35:12 584  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 585  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 586  */
14:35:12 587  	in_credit_card_id	  IN NUMBER,
14:35:12 588  	in_updated_by		  IN VARCHAR2,
14:35:12 589  	in_instrument_name	  IN VARCHAR2,
14:35:12 590  	in_is_default		  IN NUMBER
14:35:12 591  ) AS
14:35:12 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
14:35:12 593  -- VARIABLES
14:35:12 594  var_account_id NUMBER;
14:35:12 595  var_group_id   NUMBER;
14:35:12 596  temp_cc_rownum NUMBER;
14:35:12 597  current_def_instrument_type_id NUMBER;
14:35:12 598  current_def_instrument_id      NUMBER;
14:35:12 599  -- EXCEPTION
14:35:12 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
14:35:12 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
14:35:12 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
14:35:12 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
14:35:12 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
14:35:12 605  BEGIN
14:35:12 606  
14:35:12 607  	-- Get account id
14:35:12 608  	SELECT
14:35:12 609  	  CREDIT_CARD.ACCOUNT_ID
14:35:12 610  	  into
14:35:12 611  	  var_account_id
14:35:12 612  	FROM
14:35:12 613  	  CREDIT_CARD
14:35:12 614  	WHERE
14:35:12 615  	  CREDIT_CARD.ID = in_credit_card_id;
14:35:12 616  
14:35:12 617  	-- Get group id
14:35:12 618  	SELECT
14:35:12 619  	  ACCOUNT.GROUP_ID into var_group_id
14:35:12 620  	FROM
14:35:12 621  	  ACCOUNT
14:35:12 622  	WHERE
14:35:12 623  	  ACCOUNT.ID = var_account_id;
14:35:12 624  
14:35:12 625  	-- Check that passed data is correct
14:35:12 626  	IF in_is_default != GLOBAL_CONSTANTS_V16.TRUE
14:35:12 627  	  AND in_is_default != GLOBAL_CONSTANTS_V16.FALSE
14:35:12 628  	  AND in_is_default IS NOT NULL THEN
14:35:12 629  	  RAISE BAD_IS_DEFAULT_VALUE;
14:35:12 630  	END IF;
14:35:12 631  
14:35:12 632  	-- Update credit card
14:35:12 633  	IF in_instrument_name IS NOT NULL THEN
14:35:12 634  	  PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_CREDIT_CARD(
14:35:12 635  	    in_credit_card_id  => in_credit_card_id,
14:35:12 636  	    in_updated_by      => in_updated_by,
14:35:12 637  	    in_instrument_name => in_instrument_name
14:35:12 638  	  );
14:35:12 639  	END IF;
14:35:12 640  
14:35:12 641  	-- Set default financial instrument
14:35:12 642  	IF in_is_default = GLOBAL_CONSTANTS_V16.TRUE THEN
14:35:12 643  	  BEGIN
14:35:12 644  	    PROCS_FIN_INSTRUMENTS_V16.SET_DEF_FINANCIAL_INSTRUMENT(
14:35:12 645  	      in_group_id	    => var_group_id,
14:35:12 646  	      in_instrument_type_id => GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD,
14:35:12 647  	      in_instrument_id	    => in_credit_card_id,
14:35:12 648  	      in_updated_by	    => in_updated_by
14:35:12 649  	    );
14:35:12 650  	    EXCEPTION
14:35:12 651  	      WHEN OTHERS THEN
14:35:12 652  		EXCEPTION_MESSAGE := SQLERRM;
14:35:12 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
14:35:12 654  	  END;
14:35:12 655  	END IF;
14:35:12 656  
14:35:12 657  	-- Set default financial instrument
14:35:12 658  	IF in_is_default = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 659  	  BEGIN
14:35:12 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
14:35:12 661  	      in_group_id	     => var_group_id,
14:35:12 662  	      out_instrument_type_id => current_def_instrument_type_id,
14:35:12 663  	      out_instrument_id      => current_def_instrument_id
14:35:12 664  	    );
14:35:12 665  	  EXCEPTION
14:35:12 666  	    WHEN OTHERS THEN
14:35:12 667  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
14:35:12 669  	  END;
14:35:12 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
14:35:12 671  	    AND current_def_instrument_id = in_credit_card_id THEN
14:35:12 672  	    BEGIN
14:35:12 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
14:35:12 674  		in_group_id => var_group_id
14:35:12 675  	      );
14:35:12 676  	      EXCEPTION
14:35:12 677  		WHEN OTHERS THEN
14:35:12 678  		  EXCEPTION_MESSAGE := SQLERRM;
14:35:12 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
14:35:12 680  	    END;
14:35:12 681  	  END IF;
14:35:12 682  	END IF;
14:35:12 683  
14:35:12 684  EXCEPTION
14:35:12 685  WHEN NO_DATA_FOUND THEN
14:35:12 686  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 687  	  SPROC_NAME, 'No such credit card');
14:35:12 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
14:35:12 689  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
14:35:12 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
14:35:12 692  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
14:35:12 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
14:35:12 695  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
14:35:12 697  WHEN OTHERS THEN
14:35:12 698  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 700  END UPDATE_CREDIT_CARD;
14:35:12 701  
14:35:12 702  /******************************************************************************/
14:35:12 703  
14:35:12 704  PROCEDURE START_GC_PURCHASING (
14:35:12 705  	in_group_id		  IN NUMBER,
14:35:12 706  	in_offer_chain_id	  IN VARCHAR2,
14:35:12 707  	in_gift_certificate_code  IN  VARCHAR2,
14:35:12 708  	in_created_by		  IN  VARCHAR2,
14:35:12 709  	in_recipient_name	  IN  VARCHAR2,
14:35:12 710  	in_recipient_email	  IN  VARCHAR2,
14:35:12 711  	in_recipient_address_id   IN NUMBER,
14:35:12 712  	in_recipient_notify_date  IN DATE,
14:35:12 713  	in_sender_name		  IN VARCHAR2,
14:35:12 714  	in_sender_email 	  IN VARCHAR2,
14:35:12 715  	in_gift_message 	  IN  VARCHAR2,
14:35:12 716  	in_expiration_date	  IN DATE,
14:35:12 717  	out_gift_certificate_id   OUT NUMBER,
14:35:12 718  	out_invoice_id		  OUT NUMBER
14:35:12 719  ) AS
14:35:12 720  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
14:35:12 721  -- VARIABLES
14:35:12 722  var_account_id		NUMBER;
14:35:12 723  temp_gc_code		GIFT_CERTIFICATE.CODE%TYPE;
14:35:12 724  var_och_is_gc		NUMBER;
14:35:12 725  var_offer_chain_status_id NUMBER;
14:35:12 726  var_is_for_redemption	NUMBER;
14:35:12 727  var_new_invoice_id	NUMBER;
14:35:12 728  var_gift_cert_id		NUMBER;
14:35:12 729  var_account_tax_exempt_id VARCHAR2(255);
14:35:12 730  -- EXCEPTIONS
14:35:12 731  BAD_GROUP_ID		    EXCEPTION;
14:35:12 732  GC_CODE_ALREADY_EXISTS	    EXCEPTION;
14:35:12 733  BAD_OFFER_CHAIN_ID	    EXCEPTION;
14:35:12 734  OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
14:35:12 735  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
14:35:12 736  CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
14:35:12 737  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
14:35:12 738  OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
14:35:12 739  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
14:35:12 740  
14:35:12 741  EXCEPTION_MESSAGE VARCHAR2(1024);
14:35:12 742  BEGIN
14:35:12 743  	-- Get account id
14:35:12 744  	BEGIN
14:35:12 745  	  SELECT
14:35:12 746  	    ACCOUNT.ID,
14:35:12 747  	    ACCOUNT.TAX_EXEMPT_ID
14:35:12 748  	    into
14:35:12 749  	    var_account_id,
14:35:12 750  	    var_account_tax_exempt_id
14:35:12 751  	  FROM
14:35:12 752  	    ACCOUNT
14:35:12 753  	  WHERE
14:35:12 754  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12 755  	  EXCEPTION
14:35:12 756  	  WHEN NO_DATA_FOUND THEN
14:35:12 757  	    RAISE BAD_GROUP_ID;
14:35:12 758  	END;
14:35:12 759  
14:35:12 760  	-- Check for the same code
14:35:12 761  	BEGIN
14:35:12 762  	  SELECT
14:35:12 763  	    GIFT_CERTIFICATE.CODE into temp_gc_code
14:35:12 764  	  FROM
14:35:12 765  	    GIFT_CERTIFICATE
14:35:12 766  	  WHERE
14:35:12 767  	    GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
14:35:12 768  
14:35:12 769  	  RAISE GC_CODE_ALREADY_EXISTS;
14:35:12 770  
14:35:12 771  	  EXCEPTION
14:35:12 772  	    WHEN NO_DATA_FOUND THEN
14:35:12 773  	      NULL;
14:35:12 774  	END;
14:35:12 775  
14:35:12 776  	-- Get offer chain flag "is_gift_certificate"
14:35:12 777  	BEGIN
14:35:12 778  	  SELECT
14:35:12 779  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE,
14:35:12 780  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
14:35:12 781  	    into
14:35:12 782  	    var_och_is_gc,
14:35:12 783  	    var_offer_chain_status_id
14:35:12 784  	  FROM
14:35:12 785  	    OFFER_CHAIN
14:35:12 786  	  WHERE
14:35:12 787  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:35:12 788  	  EXCEPTION
14:35:12 789  	  WHEN NO_DATA_FOUND THEN
14:35:12 790  	    RAISE BAD_OFFER_CHAIN_ID;
14:35:12 791  	END;
14:35:12 792  
14:35:12 793  	IF var_och_is_gc != GLOBAL_CONSTANTS_V16.TRUE
14:35:12 794  	  OR var_och_is_gc IS NULL THEN
14:35:12 795  	  RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
14:35:12 796  	END IF;
14:35:12 797  
14:35:12 798  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
14:35:12 799  	  RAISE BAD_OFFER_CHAIN_STATUS;
14:35:12 800  	END IF;
14:35:12 801  
14:35:12 802  	-- norlov: #38151 check if the OC is for Redemption:
14:35:12 803  	SELECT
14:35:12 804  	  COUNT(*) into var_is_for_redemption
14:35:12 805  	FROM
14:35:12 806  	  OFFER_CHAIN_ELIGIBILITY
14:35:12 807  	WHERE
14:35:12 808  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 809  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
14:35:12 810  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
14:35:12 811  
14:35:12 812  	IF var_is_for_redemption > 0 THEN
14:35:12 813  	  RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
14:35:12 814  	END IF;
14:35:12 815  
14:35:12 816  	-- Create new invoice
14:35:12 817  	BEGIN
14:35:12 818  	  PROCS_INVOICE_V16.CREATE_INVOICE(
14:35:12 819  	    in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
14:35:12 820  	    in_created_by     => in_created_by,
14:35:12 821  	    in_tax_exempt_id  => var_account_tax_exempt_id,
14:35:12 822  	    out_invoice_id    => var_new_invoice_id
14:35:12 823  	  );
14:35:12 824  	  EXCEPTION
14:35:12 825  	    WHEN OTHERS THEN
14:35:12 826  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 827  	      RAISE CAN_NOT_CREATE_INVOICE;
14:35:12 828  	END;
14:35:12 829  
14:35:12 830  	-- Add line items for new invoice
14:35:12 831  	BEGIN
14:35:12 832  	  FOR f_offer_data IN (
14:35:12 833  	    SELECT
14:35:12 834  	      OFFER_ID,
14:35:12 835  	      NUM_RECURRENCES
14:35:12 836  	    FROM
14:35:12 837  	      OFFER_OFFER_CHAIN
14:35:12 838  	    WHERE
14:35:12 839  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 840  	  )
14:35:12 841  	  LOOP
14:35:12 842  	    IF f_offer_data.NUM_RECURRENCES < 1 THEN
14:35:12 843  	      RAISE OFFER_REC_NUM_LESS_THAN_ONE;
14:35:12 844  	    END IF;
14:35:12 845  	    FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
14:35:12 846  	    LOOP
14:35:12 847  	      PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
14:35:12 848  		in_invoice_id => var_new_invoice_id,
14:35:12 849  		in_offer_id   => f_offer_data.OFFER_ID,
14:35:12 850  		in_created_by => in_created_by
14:35:12 851  	      );
14:35:12 852  	    END LOOP;
14:35:12 853  	  END LOOP;
14:35:12 854  
14:35:12 855  	  EXCEPTION
14:35:12 856  	    WHEN OTHERS THEN
14:35:12 857  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 858  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
14:35:12 859  	END;
14:35:12 860  
14:35:12 861  	PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_GIFT_CERTIFICATE(
14:35:12 862  	  out_gift_certificate_id	=> var_gift_cert_id,
14:35:12 863  	  in_purchaser_group_id 	=> in_group_id,
14:35:12 864  	  in_purchaser_invoice_id	=> var_new_invoice_id,
14:35:12 865  	  in_offer_chain_id		=> in_offer_chain_id,
14:35:12 866  	  in_expiration_date		=> in_expiration_date,
14:35:12 867  	  in_purchase_date		=> SYSDATE,
14:35:12 868  	  in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE,
14:35:12 869  	  in_code			=> in_gift_certificate_code,
14:35:12 870  	  in_created_by 		=> in_created_by,
14:35:12 871  	  in_recipient_name		=> in_recipient_name,
14:35:12 872  	  in_gift_message		=> in_gift_message,
14:35:12 873  	  in_recipient_email		=> in_recipient_email,
14:35:12 874  	  in_sender_email		=> in_sender_email,
14:35:12 875  	  in_sender_name		=> in_sender_name,
14:35:12 876  	  in_recipient_address_id	=> in_recipient_address_id,
14:35:12 877  	  in_recipient_notify_date	=> in_recipient_notify_date
14:35:12 878  	);
14:35:12 879  
14:35:12 880  	out_gift_certificate_id := var_gift_cert_id;
14:35:12 881  	out_invoice_id := var_new_invoice_id;
14:35:12 882  
14:35:12 883  EXCEPTION
14:35:12 884  WHEN BAD_OFFER_CHAIN_STATUS THEN
14:35:12 885  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 886  	  SPROC_NAME, 'Offer chain is not active');
14:35:12 887  WHEN GC_CODE_ALREADY_EXISTS THEN
14:35:12 888  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:12 889  	  SPROC_NAME, 'Gift certificate with same code already exists');
14:35:12 890  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
14:35:12 891  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 892  	  SPROC_NAME, 'This offer chain can not be used for gift certificate');
14:35:12 893  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
14:35:12 894  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 895  	  SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
14:35:12 896  WHEN CAN_NOT_CREATE_INVOICE THEN
14:35:12 897  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 898  	  SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
14:35:12 899  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
14:35:12 900  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 901  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
14:35:12 902  WHEN BAD_GROUP_ID THEN
14:35:12 903  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 904  	  SPROC_NAME, 'No such group id');
14:35:12 905  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:12 906  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 907  	  SPROC_NAME, 'No such offer chain');
14:35:12 908  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
14:35:12 909  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 910  	  SPROC_NAME, 'Some offer has recurrences number less than 1');
14:35:12 911  WHEN OTHERS THEN
14:35:12 912  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 913  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 914  END START_GC_PURCHASING;
14:35:12 915  
14:35:12 916  /******************************************************************************/
14:35:12 917  
14:35:12 918  PROCEDURE FINALIZE_GC_PURCHASING (
14:35:12 919  	in_invoice_id	      IN NUMBER,
14:35:12 920  	in_created_by	      IN VARCHAR2,
14:35:12 921  	in_instrument_id      IN NUMBER,
14:35:12 922  	in_instrument_type_id IN NUMBER,
14:35:12 923  	in_order_id	      IN VARCHAR2,
14:35:12 924  	in_transaction_id     IN NUMBER,
14:35:12 925  	out_charge_amount     OUT NUMBER
14:35:12 926  ) AS
14:35:12 927  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
14:35:12 928  -- VARIABLES
14:35:12 929  temp_transaction_id_count NUMBER;
14:35:12 930  var_invoice_amount	NUMBER(10,2);
14:35:12 931  var_transaction_id	NUMBER;
14:35:12 932  var_new_charge_id 	NUMBER;
14:35:12 933  -- EXCEPTIONS
14:35:12 934  BAD_CREDIT_CARD_ID	  EXCEPTION;
14:35:12 935  BAD_PAYPAL_ID		  EXCEPTION;
14:35:12 936  BAD_INSTRUMENT_TYPE	  EXCEPTION;
14:35:12 937  TRANSACTION_EXISTS	  EXCEPTION;
14:35:12 938  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
14:35:12 939  CAN_NOT_USE_FCINSTR	  EXCEPTION;
14:35:12 940  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
14:35:12 941  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
14:35:12 942  EXCEPTION_MESSAGE   VARCHAR2(1024);
14:35:12 943  BEGIN
14:35:12 944  
14:35:12 945  	-- Check that instrument exists
14:35:12 946  	IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
14:35:12 947  	  IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 948  	    RAISE BAD_CREDIT_CARD_ID;
14:35:12 949  	  END IF;
14:35:12 950  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
14:35:12 951  	  IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 952  	    RAISE BAD_PAYPAL_ID;
14:35:12 953  	  END IF;
14:35:12 954  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
14:35:12 955  	  NULL;
14:35:12 956  	ELSE
14:35:12 957  	  RAISE BAD_INSTRUMENT_TYPE;
14:35:12 958  	END IF;
14:35:12 959  
14:35:12 960  	-- Check that transaction with given id do not exists
14:35:12 961  	SELECT
14:35:12 962  	  COUNT(*) into temp_transaction_id_count
14:35:12 963  	FROM
14:35:12 964  	  TRANSACTION
14:35:12 965  	WHERE
14:35:12 966  	  TRANSACTION.ID = in_transaction_id;
14:35:12 967  
14:35:12 968  	IF temp_transaction_id_count > 0 THEN
14:35:12 969  	  RAISE TRANSACTION_EXISTS;
14:35:12 970  	END IF;
14:35:12 971  
14:35:12 972  	-- Calculate new invoice amount
14:35:12 973  	BEGIN
14:35:12 974  	  PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
14:35:12 975  	  EXCEPTION
14:35:12 976  	    WHEN OTHERS THEN
14:35:12 977  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 978  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:35:12 979  	END;
14:35:12 980  
14:35:12 981  	IF var_invoice_amount > 0
14:35:12 982  	  AND in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
14:35:12 983  	  RAISE CAN_NOT_USE_FCINSTR;
14:35:12 984  	END IF;
14:35:12 985  
14:35:12 986  	-- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
14:35:12 987  	IF var_invoice_amount = 0 THEN
14:35:12 988  	  PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
14:35:12 989  	    in_invoice_id		   => in_invoice_id,
14:35:12 990  	    in_updated_by		   => in_created_by,
14:35:12 991  	    in_invoice_status_id	   => GLOBAL_STATUSES_V16.INVOICE_CLOSED
14:35:12 992  	  );
14:35:12 993  	END IF;
14:35:12 994  
14:35:12 995  	IF var_invoice_amount > 0 THEN
14:35:12 996  	  -- Create transaction
14:35:12 997  	  BEGIN
14:35:12 998  	    PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
14:35:12 999  	      in_transaction_id  => in_transaction_id,
14:35:12 1000  	       in_status_id	  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
14:35:12 1001  	       in_amount	  => var_invoice_amount,
14:35:12 1002  	       in_created_by	  => in_created_by,
14:35:12 1003  	       in_order_id	  => in_order_id,
14:35:12 1004  	       out_transaction_id => var_transaction_id
14:35:12 1005  	     );
14:35:12 1006  	     EXCEPTION
14:35:12 1007  	       WHEN OTHERS THEN
14:35:12 1008  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1009  		 RAISE CAN_NOT_CREATE_TRANSACTION;
14:35:12 1010  	   END;
14:35:12 1011  
14:35:12 1012  	   -- Create charge
14:35:12 1013  	   BEGIN
14:35:12 1014  	     PROCS_CHARGE_V16.CREATE_CHARGE(
14:35:12 1015  	       in_invoice_id	     => in_invoice_id,
14:35:12 1016  	       in_transaction_id     => var_transaction_id,
14:35:12 1017  	       in_instrument_type_id => in_instrument_type_id,
14:35:12 1018  	       in_instrument_id      => in_instrument_id,
14:35:12 1019  	       in_charge_amount      => var_invoice_amount,
14:35:12 1020  	       in_created_by	     => in_created_by,
14:35:12 1021  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
14:35:12 1022  	       out_charge_id	     => var_new_charge_id
14:35:12 1023  	     );
14:35:12 1024  	     out_charge_amount := var_invoice_amount;
14:35:12 1025  	     EXCEPTION
14:35:12 1026  	       WHEN OTHERS THEN
14:35:12 1027  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1028  		 RAISE CAN_NOT_CREATE_CHARGE;
14:35:12 1029  	   END;
14:35:12 1030  	 ELSE
14:35:12 1031  	   out_charge_amount := 0;
14:35:12 1032  	 END IF;
14:35:12 1033  
14:35:12 1034  EXCEPTION
14:35:12 1035  WHEN CAN_NOT_USE_FCINSTR THEN
14:35:12 1036  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1037  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
14:35:12 1038  WHEN BAD_CREDIT_CARD_ID THEN
14:35:12 1039  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1040  	   SPROC_NAME, 'Bad credit card id');
14:35:12 1041  WHEN BAD_PAYPAL_ID THEN
14:35:12 1042  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1043  	   SPROC_NAME, 'Bad paypal id');
14:35:12 1044  WHEN BAD_INSTRUMENT_TYPE THEN
14:35:12 1045  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1046  	   SPROC_NAME, 'Bad instrument type');
14:35:12 1047  WHEN TRANSACTION_EXISTS THEN
14:35:12 1048  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:12 1049  	   SPROC_NAME, 'Transaction with given id already exists');
14:35:12 1050  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:35:12 1051  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1052  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:35:12 1053  WHEN CAN_NOT_CREATE_CHARGE THEN
14:35:12 1054  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1055  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:35:12 1056  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:35:12 1057  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1058  	   SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
14:35:12 1059  WHEN OTHERS THEN
14:35:12 1060  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1061  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1062  END FINALIZE_GC_PURCHASING;
14:35:12 1063  
14:35:12 1064  /******************************************************************************/
14:35:12 1065  
14:35:12 1066  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
14:35:12 1067  	 in_group_id		   IN NUMBER,
14:35:12 1068  	 in_offer_chain_id	   IN VARCHAR2,
14:35:12 1069  	 in_gift_certificate_code  IN VARCHAR2,
14:35:12 1070  	 in_created_by		   IN VARCHAR2,
14:35:12 1071  	 in_recipient_name	   IN VARCHAR2,
14:35:12 1072  	 in_recipient_email	   IN VARCHAR2,
14:35:12 1073  	 in_sender_name 	   IN VARCHAR2,
14:35:12 1074  	 in_sender_email	   IN VARCHAR2,
14:35:12 1075  	 in_gift_message	   IN VARCHAR2,
14:35:12 1076  	 in_instrument_id	   IN NUMBER,
14:35:12 1077  	 in_instrument_type_id	   IN NUMBER,
14:35:12 1078  	 in_expiration_date	   IN DATE,
14:35:12 1079  	 in_order_id		   IN VARCHAR2,
14:35:12 1080  	 in_transaction_id	   IN NUMBER
14:35:12 1081  ) AS
14:35:12 1082  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
14:35:12 1083  -- VARIABLES
14:35:12 1084  var_gift_cert_id   NUMBER;
14:35:12 1085  var_account_id	  NUMBER;
14:35:12 1086  var_invoice_amount NUMBER (10,2);
14:35:12 1087  var_new_invoice_id NUMBER;
14:35:12 1088  var_new_charge_id  NUMBER;
14:35:12 1089  var_och_is_gc	  NUMBER;
14:35:12 1090  var_offer_chain_status_id NUMBER;
14:35:12 1091  var_is_for_redemption	 NUMBER;
14:35:12 1092  var_account_tax_exempt_id VARCHAR2(255);
14:35:12 1093  
14:35:12 1094  temp_transaction_id_count NUMBER;
14:35:12 1095  var_transaction_id	 NUMBER;
14:35:12 1096  temp_gc_code VARCHAR2(255);
14:35:12 1097  
14:35:12 1098  var_invoice_status_id NUMBER;
14:35:12 1099  -- EXCEPTIONS
14:35:12 1100  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
14:35:12 1101  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
14:35:12 1102  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
14:35:12 1103  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
14:35:12 1104  BAD_GROUP_ID			   EXCEPTION;
14:35:12 1105  BAD_OFFER_CHAIN_ID		   EXCEPTION;
14:35:12 1106  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
14:35:12 1107  TRANSACTION_EXISTS		   EXCEPTION;
14:35:12 1108  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
14:35:12 1109  BAD_INSTRUMENT_TYPE		   EXCEPTION;
14:35:12 1110  BAD_CREDIT_CARD_ID		   EXCEPTION;
14:35:12 1111  BAD_PAYPAL_ID			   EXCEPTION;
14:35:12 1112  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
14:35:12 1113  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
14:35:12 1114  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
14:35:12 1115  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
14:35:12 1116  CAN_NOT_USE_FCINSTR		   EXCEPTION;
14:35:12 1117  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
14:35:12 1118  EXCEPTION_MESSAGE		   VARCHAR2(1024);
14:35:12 1119  BEGIN
14:35:12 1120  
14:35:12 1121  	 -- Get account id
14:35:12 1122  	 BEGIN
14:35:12 1123  	   SELECT
14:35:12 1124  	     ACCOUNT.ID,
14:35:12 1125  	     ACCOUNT.TAX_EXEMPT_ID
14:35:12 1126  	     into
14:35:12 1127  	     var_account_id,
14:35:12 1128  	     var_account_tax_exempt_id
14:35:12 1129  	   FROM
14:35:12 1130  	     ACCOUNT
14:35:12 1131  	   WHERE
14:35:12 1132  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1133  	   EXCEPTION
14:35:12 1134  	   WHEN NO_DATA_FOUND THEN
14:35:12 1135  	     RAISE BAD_GROUP_ID;
14:35:12 1136  	 END;
14:35:12 1137  
14:35:12 1138  	 -- Check that instrument exists
14:35:12 1139  	 IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
14:35:12 1140  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 1141  	     RAISE BAD_CREDIT_CARD_ID;
14:35:12 1142  	   END IF;
14:35:12 1143  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
14:35:12 1144  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 1145  	     RAISE BAD_PAYPAL_ID;
14:35:12 1146  	   END IF;
14:35:12 1147  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
14:35:12 1148  	   NULL;
14:35:12 1149  	 ELSE
14:35:12 1150  	   RAISE BAD_INSTRUMENT_TYPE;
14:35:12 1151  	 END IF;
14:35:12 1152  
14:35:12 1153  	 -- Check for the same code
14:35:12 1154  	 BEGIN
14:35:12 1155  	   SELECT
14:35:12 1156  	     GIFT_CERTIFICATE.CODE into temp_gc_code
14:35:12 1157  	   FROM
14:35:12 1158  	     GIFT_CERTIFICATE
14:35:12 1159  	   WHERE
14:35:12 1160  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
14:35:12 1161  
14:35:12 1162  	   RAISE GC_CODE_ALREADY_EXISTS;
14:35:12 1163  
14:35:12 1164  	   EXCEPTION
14:35:12 1165  	     WHEN NO_DATA_FOUND THEN
14:35:12 1166  	       NULL;
14:35:12 1167  	 END;
14:35:12 1168  
14:35:12 1169  	 -- Get offer chain flag "is_gift_certificate"
14:35:12 1170  	 BEGIN
14:35:12 1171  	   SELECT
14:35:12 1172  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
14:35:12 1173  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
14:35:12 1174  	     into
14:35:12 1175  	     var_och_is_gc,
14:35:12 1176  	     var_offer_chain_status_id
14:35:12 1177  	   FROM
14:35:12 1178  	     OFFER_CHAIN
14:35:12 1179  	   WHERE
14:35:12 1180  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:35:12 1181  	   EXCEPTION
14:35:12 1182  	   WHEN NO_DATA_FOUND THEN
14:35:12 1183  	     RAISE BAD_OFFER_CHAIN_ID;
14:35:12 1184  	 END;
14:35:12 1185  
14:35:12 1186  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V16.TRUE
14:35:12 1187  	   OR var_och_is_gc IS NULL THEN
14:35:12 1188  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
14:35:12 1189  	 END IF;
14:35:12 1190  
14:35:12 1191  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V16.OFFER_CHAIN_ACTIVE THEN
14:35:12 1192  	   RAISE BAD_OFFER_CHAIN_STATUS;
14:35:12 1193  	 END IF;
14:35:12 1194  
14:35:12 1195  	 -- norlov: #38151 check if the OC is for Redemption:
14:35:12 1196  	 SELECT
14:35:12 1197  	   COUNT(*) into var_is_for_redemption
14:35:12 1198  	 FROM
14:35:12 1199  	   OFFER_CHAIN_ELIGIBILITY
14:35:12 1200  	 WHERE
14:35:12 1201  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 1202  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
14:35:12 1203  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET;
14:35:12 1204  
14:35:12 1205  	 IF var_is_for_redemption > 0 THEN
14:35:12 1206  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
14:35:12 1207  	 END IF;
14:35:12 1208  
14:35:12 1209  	 -- Check that transaction with given id do not exists
14:35:12 1210  	 SELECT
14:35:12 1211  	   COUNT(*) into temp_transaction_id_count
14:35:12 1212  	 FROM
14:35:12 1213  	   TRANSACTION
14:35:12 1214  	 WHERE
14:35:12 1215  	   TRANSACTION.ID = in_transaction_id;
14:35:12 1216  
14:35:12 1217  	 IF temp_transaction_id_count > 0 THEN
14:35:12 1218  	   RAISE TRANSACTION_EXISTS;
14:35:12 1219  	 END IF;
14:35:12 1220  
14:35:12 1221  	 -- Create new invoice
14:35:12 1222  	 BEGIN
14:35:12 1223  	   PROCS_INVOICE_V16.CREATE_INVOICE(
14:35:12 1224  	     in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_OPEN,
14:35:12 1225  	     in_created_by     => in_created_by,
14:35:12 1226  	     in_tax_exempt_id  => var_account_tax_exempt_id,
14:35:12 1227  	     out_invoice_id    => var_new_invoice_id
14:35:12 1228  	   );
14:35:12 1229  	   EXCEPTION
14:35:12 1230  	     WHEN OTHERS THEN
14:35:12 1231  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1232  	       RAISE CAN_NOT_CREATE_INVOICE;
14:35:12 1233  	 END;
14:35:12 1234  
14:35:12 1235  	 -- Add line items for new invoice
14:35:12 1236  	 BEGIN
14:35:12 1237  	   FOR f_offer_data IN (
14:35:12 1238  	     SELECT
14:35:12 1239  	       OFFER_ID,
14:35:12 1240  	       NUM_RECURRENCES
14:35:12 1241  	     FROM
14:35:12 1242  	       OFFER_OFFER_CHAIN
14:35:12 1243  	     WHERE
14:35:12 1244  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:35:12 1245  	   )
14:35:12 1246  	   LOOP
14:35:12 1247  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
14:35:12 1248  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
14:35:12 1249  	     END IF;
14:35:12 1250  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
14:35:12 1251  	     LOOP
14:35:12 1252  	       PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
14:35:12 1253  		 in_invoice_id => var_new_invoice_id,
14:35:12 1254  		 in_offer_id   => f_offer_data.OFFER_ID,
14:35:12 1255  		 in_created_by => in_created_by
14:35:12 1256  	       );
14:35:12 1257  	     END LOOP;
14:35:12 1258  	   END LOOP;
14:35:12 1259  
14:35:12 1260  	   EXCEPTION
14:35:12 1261  	     WHEN OTHERS THEN
14:35:12 1262  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1263  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
14:35:12 1264  	 END;
14:35:12 1265  
14:35:12 1266  	 -- Calculate new invoice amount
14:35:12 1267  	 BEGIN
14:35:12 1268  	   PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
14:35:12 1269  	   EXCEPTION
14:35:12 1270  	     WHEN OTHERS THEN
14:35:12 1271  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1272  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:35:12 1273  	 END;
14:35:12 1274  
14:35:12 1275  	 IF var_invoice_amount > 0
14:35:12 1276  	   AND in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_ZCI_INSTRUMENT THEN
14:35:12 1277  	   RAISE CAN_NOT_USE_FCINSTR;
14:35:12 1278  	 END IF;
14:35:12 1279  
14:35:12 1280  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
14:35:12 1281  	 IF var_invoice_amount = 0 THEN
14:35:12 1282  	   PROCS_INVOICE_CRU_V16.UPDATE_INVOICE(
14:35:12 1283  	     in_invoice_id		    => var_new_invoice_id,
14:35:12 1284  	     in_updated_by		    => in_created_by,
14:35:12 1285  	     in_invoice_status_id	    => GLOBAL_STATUSES_V16.INVOICE_CLOSED
14:35:12 1286  	   );
14:35:12 1287  	 END IF;
14:35:12 1288  
14:35:12 1289  	 IF var_invoice_amount > 0 THEN
14:35:12 1290  	   -- Create transaction
14:35:12 1291  	   BEGIN
14:35:12 1292  	     PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
14:35:12 1293  	       in_transaction_id  => in_transaction_id,
14:35:12 1294  	       in_status_id	  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
14:35:12 1295  	       in_amount	  => var_invoice_amount,
14:35:12 1296  	       in_created_by	  => in_created_by,
14:35:12 1297  	       in_order_id	  => in_order_id,
14:35:12 1298  	       out_transaction_id => var_transaction_id
14:35:12 1299  	     );
14:35:12 1300  	     EXCEPTION
14:35:12 1301  	       WHEN OTHERS THEN
14:35:12 1302  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1303  		 RAISE CAN_NOT_CREATE_TRANSACTION;
14:35:12 1304  	   END;
14:35:12 1305  
14:35:12 1306  	   -- Create charge
14:35:12 1307  	   BEGIN
14:35:12 1308  	     PROCS_CHARGE_V16.CREATE_CHARGE(
14:35:12 1309  	       in_invoice_id	     => var_new_invoice_id,
14:35:12 1310  	       in_transaction_id     => var_transaction_id,
14:35:12 1311  	       in_instrument_type_id => in_instrument_type_id,
14:35:12 1312  	       in_instrument_id      => in_instrument_id,
14:35:12 1313  	       in_charge_amount      => var_invoice_amount,
14:35:12 1314  	       in_created_by	     => in_created_by,
14:35:12 1315  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
14:35:12 1316  	       out_charge_id	     => var_new_charge_id
14:35:12 1317  	     );
14:35:12 1318  	     EXCEPTION
14:35:12 1319  	       WHEN OTHERS THEN
14:35:12 1320  		 EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1321  		 RAISE CAN_NOT_CREATE_CHARGE;
14:35:12 1322  	   END;
14:35:12 1323  	 END IF;
14:35:12 1324  
14:35:12 1325  	 -- Create new row in GIFT_CERTIFICATE table
14:35:12 1326  	 PROCS_FIN_INSTRUMENTS_CRU_V16.CREATE_GIFT_CERTIFICATE(
14:35:12 1327  	   out_gift_certificate_id	 => var_gift_cert_id,
14:35:12 1328  	   in_purchaser_group_id	 => in_group_id,
14:35:12 1329  	   in_purchaser_invoice_id	 => var_new_invoice_id,
14:35:12 1330  	   in_offer_chain_id		 => in_offer_chain_id,
14:35:12 1331  	   in_expiration_date		 => in_expiration_date,
14:35:12 1332  	   in_purchase_date		 => SYSDATE,
14:35:12 1333  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE,
14:35:12 1334  	   in_code			 => in_gift_certificate_code,
14:35:12 1335  	   in_created_by		 => in_created_by,
14:35:12 1336  	   in_recipient_name		 => in_recipient_name,
14:35:12 1337  	   in_gift_message		 => in_gift_message,
14:35:12 1338  	   in_recipient_email		 => in_recipient_email,
14:35:12 1339  	   in_sender_email		 => in_sender_email,
14:35:12 1340  	   in_sender_name		 => in_sender_name
14:35:12 1341  	 );
14:35:12 1342  
14:35:12 1343  EXCEPTION
14:35:12 1344  WHEN CAN_NOT_USE_FCINSTR THEN
14:35:12 1345  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1346  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
14:35:12 1347  WHEN BAD_OFFER_CHAIN_STATUS THEN
14:35:12 1348  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1349  	   SPROC_NAME, 'Offer chain is not active');
14:35:12 1350  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
14:35:12 1351  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1352  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
14:35:12 1353  WHEN BAD_CREDIT_CARD_ID THEN
14:35:12 1354  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1355  	   SPROC_NAME, 'Bad credit card id');
14:35:12 1356  WHEN BAD_PAYPAL_ID THEN
14:35:12 1357  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1358  	   SPROC_NAME, 'Bad paypal id');
14:35:12 1359  WHEN BAD_INSTRUMENT_TYPE THEN
14:35:12 1360  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1361  	   SPROC_NAME, 'Bad instrument type');
14:35:12 1362  WHEN GC_CODE_ALREADY_EXISTS THEN
14:35:12 1363  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:12 1364  	   SPROC_NAME, 'Gift certificate with same code already exists');
14:35:12 1365  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
14:35:12 1366  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1367  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
14:35:12 1368  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
14:35:12 1369  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1370  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
14:35:12 1371  WHEN TRANSACTION_EXISTS THEN
14:35:12 1372  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:12 1373  	   SPROC_NAME, 'Transaction with given id already exists');
14:35:12 1374  WHEN CAN_NOT_CREATE_INVOICE THEN
14:35:12 1375  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1376  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
14:35:12 1377  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:35:12 1378  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1379  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:35:12 1380  WHEN CAN_NOT_CREATE_CHARGE THEN
14:35:12 1381  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1382  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:35:12 1383  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
14:35:12 1384  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1385  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
14:35:12 1386  WHEN BAD_GROUP_ID THEN
14:35:12 1387  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1388  	   SPROC_NAME, 'No such group id');
14:35:12 1389  WHEN BAD_OFFER_CHAIN_ID THEN
14:35:12 1390  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1391  	   SPROC_NAME, 'No such offer chain');
14:35:12 1392  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
14:35:12 1393  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1394  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
14:35:12 1395  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:35:12 1396  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1397  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
14:35:12 1398  WHEN OTHERS THEN
14:35:12 1399  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1400  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1401  END PURCHASE_GIFT_CERTIFICATE;
14:35:12 1402  
14:35:12 1403  /******************************************************************************/
14:35:12 1404  
14:35:12 1405  PROCEDURE REDEEM_GIFT_CERTIFICATE (
14:35:12 1406  	 in_group_id			 IN NUMBER,
14:35:12 1407  	 in_gift_certificate_code	 IN VARCHAR2,
14:35:12 1408  	 in_created_by			 IN VARCHAR2,
14:35:12 1409  	 in_redeemer_address_id 	 IN NUMBER,
14:35:12 1410  	 in_fin_instrument_id		 IN NUMBER,
14:35:12 1411  	 in_fin_instrument_type_id	 IN NUMBER,
14:35:12 1412  	 in_redemption_offer_chain_id	 IN NUMBER,
14:35:12 1413  	 out_subscription_id		 OUT NUMBER,
14:35:12 1414  	 out_license_id 		 OUT NUMBER
14:35:12 1415  ) AS
14:35:12 1416  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
14:35:12 1417  -- VARIABLES
14:35:12 1418  var_gift_certificate_id NUMBER;
14:35:12 1419  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
14:35:12 1420  var_purchased_oc_id     NUMBER;
14:35:12 1421  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
14:35:12 1422  var_offer_duration      VARCHAR2(30);
14:35:12 1423  var_invoice_id	       NUMBER;
14:35:12 1424  var_succ_purch_attempts_num NUMBER;
14:35:12 1425  var_subscription_id     NUMBER;
14:35:12 1426  var_license_id	       NUMBER;
14:35:12 1427  var_account_id	       NUMBER;
14:35:12 1428  var_gc_status_id        NUMBER;
14:35:12 1429  var_gc_charges_amount   NUMBER;
14:35:12 1430  var_gc_expiration_date  DATE;
14:35:12 1431  var_gc_redeemer_group_id NUMBER;
14:35:12 1432  var_gc_purchase_invoice_id NUMBER;
14:35:12 1433  var_gc_purchase_inv_status_id NUMBER;
14:35:12 1434  var_offer_index		     NUMBER;
14:35:12 1435  var_purchaser_group_id	     NUMBER;
14:35:12 1436  temp_license_id		     NUMBER;
14:35:12 1437  var_same_offer_chains_num     NUMBER;
14:35:12 1438  var_max_concurrent_subscrs    NUMBER;
14:35:12 1439  var_account_tax_exempt_id     VARCHAR2(255);
14:35:12 1440  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
14:35:12 1441  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
14:35:12 1442  var_first_offer_id	  NUMBER;
14:35:12 1443  var_date 	     DATE := SYSDATE;
14:35:12 1444  
14:35:12 1445  var_offers SYS_REFCURSOR;
14:35:12 1446  
14:35:12 1447  -- EXCEPTIONS
14:35:12 1448  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
14:35:12 1449  BAD_GROUP_ID		      EXCEPTION;
14:35:12 1450  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
14:35:12 1451  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
14:35:12 1452  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
14:35:12 1453  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
14:35:12 1454  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
14:35:12 1455  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
14:35:12 1456  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
14:35:12 1457  LIMIT_REACHED		      EXCEPTION;
14:35:12 1458  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
14:35:12 1459  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
14:35:12 1460  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
14:35:12 1461  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
14:35:12 1462  EXCEPTION_MESSAGE	      VARCHAR2(1024);
14:35:12 1463  BEGIN
14:35:12 1464  
14:35:12 1465  	 -- Get account id
14:35:12 1466  	 BEGIN
14:35:12 1467  	   SELECT
14:35:12 1468  	     ACCOUNT.ID,
14:35:12 1469  	     ACCOUNT.TAX_EXEMPT_ID
14:35:12 1470  	     into
14:35:12 1471  	     var_account_id,
14:35:12 1472  	     var_account_tax_exempt_id
14:35:12 1473  	   FROM
14:35:12 1474  	     ACCOUNT
14:35:12 1475  	   WHERE
14:35:12 1476  	     ACCOUNT.GROUP_ID = in_group_id
14:35:12 1477  	     AND ROWNUM <= 1;
14:35:12 1478  
14:35:12 1479  	   EXCEPTION
14:35:12 1480  	   WHEN NO_DATA_FOUND THEN
14:35:12 1481  	     RAISE BAD_GROUP_ID;
14:35:12 1482  	 END;
14:35:12 1483  
14:35:12 1484  	 -- Get gift certificate data
14:35:12 1485  	 BEGIN
14:35:12 1486  	   SELECT
14:35:12 1487  	     GIFT_CERTIFICATE.ID,
14:35:12 1488  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
14:35:12 1489  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
14:35:12 1490  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
14:35:12 1491  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
14:35:12 1492  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
14:35:12 1493  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
14:35:12 1494  	     into
14:35:12 1495  	     var_gift_certificate_id,
14:35:12 1496  	     var_purchased_oc_id,
14:35:12 1497  	     var_gc_status_id,
14:35:12 1498  	     var_purchaser_group_id,
14:35:12 1499  	     var_gc_expiration_date,
14:35:12 1500  	     var_gc_redeemer_group_id,
14:35:12 1501  	     var_gc_purchase_invoice_id
14:35:12 1502  	   FROM
14:35:12 1503  	     GIFT_CERTIFICATE
14:35:12 1504  	   WHERE
14:35:12 1505  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
14:35:12 1506  	     AND ROWNUM <= 1;
14:35:12 1507  
14:35:12 1508  	   EXCEPTION
14:35:12 1509  	   WHEN NO_DATA_FOUND THEN
14:35:12 1510  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
14:35:12 1511  	 END;
14:35:12 1512  
14:35:12 1513  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
14:35:12 1514  	 -- but in that case a redemption offer chain id should always be passed in
14:35:12 1515  	 IF var_oc_id_to_redeem IS NULL THEN
14:35:12 1516  	   BEGIN
14:35:12 1517  	     SELECT
14:35:12 1518  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
14:35:12 1519  	       into
14:35:12 1520  	       var_oc_id_to_redeem
14:35:12 1521  	     FROM
14:35:12 1522  	       OFFER_CHAIN_META_DATA
14:35:12 1523  	     WHERE
14:35:12 1524  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
14:35:12 1525  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V16.REDEMPTION_OC_ID
14:35:12 1526  	       AND ROWNUM = 1;
14:35:12 1527  -- requested by ticket so (but above is correct for the actual migrated data):
14:35:12 1528  --  SELECT
14:35:12 1529  --      OFFER_CHAIN.ID
14:35:12 1530  --      into
14:35:12 1531  --      var_oc_id_to_redeem
14:35:12 1532  --    FROM
14:35:12 1533  --      OFFER_CHAIN
14:35:12 1534  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
14:35:12 1535  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
14:35:12 1536  --    WHERE
14:35:12 1537  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 1538  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V16.GIFT_CERTIFICATE_REQUIRED
14:35:12 1539  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V16.ELIGIBILITY_FLAG_SET
14:35:12 1540  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 1541  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V16.REDEMPTION_OC_ID
14:35:12 1542  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
14:35:12 1543  --      AND ROWNUM = 1;
14:35:12 1544  
14:35:12 1545  	     EXCEPTION
14:35:12 1546  	     WHEN NO_DATA_FOUND THEN
14:35:12 1547  	       RAISE OC_TO_REDEEM_NOT_FOUND;
14:35:12 1548  	   END;
14:35:12 1549  	 END IF;
14:35:12 1550  
14:35:12 1551  	 -- Check that purchase invoice for this GC was closed
14:35:12 1552  	 SELECT
14:35:12 1553  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
14:35:12 1554  	 FROM
14:35:12 1555  	   INVOICE
14:35:12 1556  	 WHERE
14:35:12 1557  	   INVOICE.ID = var_gc_purchase_invoice_id;
14:35:12 1558  
14:35:12 1559  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V16.INVOICE_CLOSED THEN
14:35:12 1560  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
14:35:12 1561  	 END IF;
14:35:12 1562  
14:35:12 1563  	 -- Check that this invoice was successfully processed by billing
14:35:12 1564  	 SELECT
14:35:12 1565  	   COUNT(1) into var_succ_purch_attempts_num
14:35:12 1566  	 FROM
14:35:12 1567  	   TRANSACTION_ATTEMPT TA
14:35:12 1568  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
14:35:12 1569  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
14:35:12 1570  	 WHERE
14:35:12 1571  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
14:35:12 1572  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V16.TRANS_ATTEMPT_SUCCESS;
14:35:12 1573  
14:35:12 1574  	 IF var_succ_purch_attempts_num = 0 THEN
14:35:12 1575  	   SELECT
14:35:12 1576  	     COUNT(1) into var_succ_purch_attempts_num
14:35:12 1577  	   FROM
14:35:12 1578  	     DUAL
14:35:12 1579  	   WHERE
14:35:12 1580  	     PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
14:35:12 1581  	 END IF;
14:35:12 1582  
14:35:12 1583  	 IF var_succ_purch_attempts_num = 0 THEN
14:35:12 1584  	   RAISE PURCHASE_INVOICES_NOT_PAID;
14:35:12 1585  	 END IF;
14:35:12 1586  
14:35:12 1587  	 -- Check limit for gc's offer chain
14:35:12 1588  	 SELECT
14:35:12 1589  	   COUNT(*) into var_same_offer_chains_num
14:35:12 1590  	 FROM
14:35:12 1591  	   SUBSCRIPTION
14:35:12 1592  	 WHERE
14:35:12 1593  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 1594  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
14:35:12 1595  	   AND (
14:35:12 1596  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 1597  	     -- TODO: Does we need next line?
14:35:12 1598  	     -- OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
14:35:12 1599  	   );
14:35:12 1600  -- norlov: #38414 the same checking as on OC purchase (just copypasted from CREATE_SUBSCRIPTION - TODO: refactor it not to keep the same code twice)
14:35:12 1601  --  IF PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem) = var_same_offer_chains_num THEN
14:35:12 1602  --    RAISE LIMIT_REACHED;
14:35:12 1603  --  END IF;
14:35:12 1604  IF var_same_offer_chains_num = 0 THEN
14:35:12 1605  	   -- if user does not have any active existing subscriptions to the offer chain
14:35:12 1606  	   -- and if product from the offer chain is already owned from another offer chain
14:35:12 1607  	   -- then deny purchase
14:35:12 1608  	   FOR f_account_offer_chains IN (
14:35:12 1609  	     SELECT DISTINCT
14:35:12 1610  	       OFFER_CHAIN_ID
14:35:12 1611  	     FROM
14:35:12 1612  	       SUBSCRIPTION
14:35:12 1613  	     WHERE
14:35:12 1614  	       ACCOUNT_ID = var_account_id
14:35:12 1615  	       AND (
14:35:12 1616  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 1617  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED)
14:35:12 1618  	   )
14:35:12 1619  	   LOOP
14:35:12 1620  	     IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V16.TRUE THEN
14:35:12 1621  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
14:35:12 1622  	     END IF;
14:35:12 1623  	   END LOOP;
14:35:12 1624  	 ELSE
14:35:12 1625  
14:35:12 1626  	   -- if user have any active existing subscriptions to the offer chain
14:35:12 1627  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
14:35:12 1628  	   -- then deny purchase
14:35:12 1629  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
14:35:12 1630  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V16.INFINITY
14:35:12 1631  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
14:35:12 1632  	     RAISE LIMIT_REACHED;
14:35:12 1633  	   END IF;
14:35:12 1634  	 END IF;
14:35:12 1635  -- norlov: END OF TODO
14:35:12 1636  
14:35:12 1637  
14:35:12 1638  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
14:35:12 1639  	   RAISE GIFT_CERTIFICATE_REDEEMED;
14:35:12 1640  	 END IF;
14:35:12 1641  
14:35:12 1642  	 IF var_gc_expiration_date < sysdate THEN
14:35:12 1643  	   RAISE GIFT_CERTIFICATE_EXPIRED;
14:35:12 1644  	 END IF;
14:35:12 1645  
14:35:12 1646  	  IF var_gc_status_id = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_REFUNDED THEN
14:35:12 1647  	   RAISE GIFT_CERT_IS_REFUNDED;
14:35:12 1648  	 END IF;
14:35:12 1649  
14:35:12 1650  	 IF var_gc_status_id = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED THEN
14:35:12 1651  	   RAISE GIFT_CERT_IS_FINALIZED;
14:35:12 1652  	 END IF;
14:35:12 1653  
14:35:12 1654  	 -- Check that user did not subscribed to same product already
14:35:12 1655  	 -- norlov: get rid of this since there is already the check?
14:35:12 1656  	 FOR f_user_offer_chain IN (
14:35:12 1657  	   SELECT DISTINCT
14:35:12 1658  	     OFFER_CHAIN_ID
14:35:12 1659  	   FROM
14:35:12 1660  	     SUBSCRIPTION
14:35:12 1661  	   WHERE
14:35:12 1662  	     ACCOUNT_ID=var_account_id
14:35:12 1663  	     AND (
14:35:12 1664  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 1665  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
14:35:12 1666  	     )
14:35:12 1667  	 )
14:35:12 1668  	 LOOP
14:35:12 1669  	   IF PROCS_OFFER_CHAIN_V16.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V16.TRUE THEN
14:35:12 1670  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
14:35:12 1671  	   END IF;
14:35:12 1672  	 END LOOP;
14:35:12 1673  
14:35:12 1674  	 -- Check for gift certificate amount
14:35:12 1675  	 SELECT
14:35:12 1676  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
14:35:12 1677  	 FROM
14:35:12 1678  	   CHARGE
14:35:12 1679  	 WHERE
14:35:12 1680  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
14:35:12 1681  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
14:35:12 1682  
14:35:12 1683  	 -- Create new invoice
14:35:12 1684  	 PROCS_INVOICE_V16.CREATE_INVOICE(
14:35:12 1685  	   out_invoice_id    => var_invoice_id,
14:35:12 1686  	   in_invoice_status => GLOBAL_STATUSES_V16.INVOICE_CLOSED,
14:35:12 1687  	   in_tax_exempt_id  => var_account_tax_exempt_id,
14:35:12 1688  	   in_created_by     => in_created_by
14:35:12 1689  	 );
14:35:12 1690  
14:35:12 1691  	 -- If a financial instrument wasn't passed in, use the gift certificate id
14:35:12 1692  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
14:35:12 1693  	 IF var_fin_instrument_id is null THEN
14:35:12 1694  	   var_fin_instrument_id := var_gift_certificate_id;
14:35:12 1695  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V16.INSTRUMENT_GIFT_CERTIFICATE;
14:35:12 1696  	 END IF;
14:35:12 1697  
14:35:12 1698  	 -- Insert new row into subscription table
14:35:12 1699  	 PROCS_SUBSCRIPTION_CRU_V16.CREATE_SUBSCRIPTION(
14:35:12 1700  	   out_subscription_id	     => var_subscription_id,
14:35:12 1701  	   in_account_id	     => var_account_id,
14:35:12 1702  	   in_purchase_date	     => var_date,
14:35:12 1703  	   in_offer_chain_id	     => var_oc_id_to_redeem,
14:35:12 1704  	   in_created_by	     => in_created_by,
14:35:12 1705  	   in_instrument_type_id     => var_fin_instrument_type_id,
14:35:12 1706  	   in_instrument_id	     => var_fin_instrument_id,
14:35:12 1707  	   in_subscription_status_id => GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 1708  	 );
14:35:12 1709  
14:35:12 1710  	 out_subscription_id := var_subscription_id;
14:35:12 1711  
14:35:12 1712  	 BEGIN
14:35:12 1713  	   PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
14:35:12 1714  	   EXCEPTION
14:35:12 1715  	     WHEN OTHERS THEN
14:35:12 1716  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1717  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
14:35:12 1718  	 END;
14:35:12 1719  
14:35:12 1720  	 BEGIN
14:35:12 1721  	   PROCS_LICENSE_V16.CREATE_LICENSE (
14:35:12 1722  	     out_license_id		 => out_license_id,
14:35:12 1723  	     in_status_id		 => GLOBAL_STATUSES_V16.LICENSE_ACTIVE,
14:35:12 1724  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V16.TRUE,
14:35:12 1725  	     in_start_date		 => var_date,
14:35:12 1726  	     in_offer_id		 => var_first_offer_id,
14:35:12 1727  	     in_subscription_id 	 => var_subscription_id,
14:35:12 1728  	     in_invoice_id		 => var_invoice_id,
14:35:12 1729  	     in_created_by		 => in_created_by,
14:35:12 1730  	     in_end_date		 => NULL, -- Will be calculated automatically
14:35:12 1731  	     in_is_extension		 => GLOBAL_CONSTANTS_V16.FALSE,
14:35:12 1732  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V16.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
14:35:12 1733  	     in_current_offer_recurr_num => 1
14:35:12 1734  	   );
14:35:12 1735  
14:35:12 1736  	   EXCEPTION
14:35:12 1737  	     WHEN OTHERS THEN
14:35:12 1738  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1739  	       RAISE CAN_NOT_CREATE_LICENSE;
14:35:12 1740  	 END;
14:35:12 1741  
14:35:12 1742  	 -- Update original gift certificate
14:35:12 1743  	 BEGIN
14:35:12 1744  	   PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE(
14:35:12 1745  	     in_gift_certificate_id	   => var_gift_certificate_id,
14:35:12 1746  	     in_updated_by		   => in_created_by,
14:35:12 1747  	     in_redeemer_group_id	   => in_group_id,
14:35:12 1748  	     in_finalized_invoice_id	   => var_invoice_id,
14:35:12 1749  	     in_redemption_date 	   => var_date,
14:35:12 1750  	     in_redeemer_address_id	   => in_redeemer_address_id,
14:35:12 1751  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED
14:35:12 1752  	   );
14:35:12 1753  	   EXCEPTION
14:35:12 1754  	     WHEN OTHERS THEN
14:35:12 1755  	       EXCEPTION_MESSAGE := SQLERRM;
14:35:12 1756  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
14:35:12 1757  	 END;
14:35:12 1758  
14:35:12 1759  EXCEPTION
14:35:12 1760  WHEN LIMIT_REACHED THEN
14:35:12 1761  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
14:35:12 1762  	   SPROC_NAME, 'Limit reached for given offer chain');
14:35:12 1763  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
14:35:12 1764  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.CONFLICT_ERROR,
14:35:12 1765  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
14:35:12 1766  WHEN GIFT_CERTIFICATE_REDEEMED THEN
14:35:12 1767  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1768  	   SPROC_NAME, 'Gift certificate already redeemed');
14:35:12 1769  WHEN GIFT_CERTIFICATE_EXPIRED THEN
14:35:12 1770  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1771  	   SPROC_NAME, 'Gift certificate expired');
14:35:12 1772  WHEN GIFT_CERT_IS_FINALIZED THEN
14:35:12 1773  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1774  	   SPROC_NAME, 'Gift certificate is finalized');
14:35:12 1775  WHEN GIFT_CERT_IS_REFUNDED THEN
14:35:12 1776  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1777  	   SPROC_NAME, 'Gift certificate has been refunded');
14:35:12 1778  WHEN BAD_GROUP_ID THEN
14:35:12 1779  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1780  	   SPROC_NAME, 'No such account with given group id');
14:35:12 1781  WHEN OC_TO_REDEEM_NOT_FOUND THEN
14:35:12 1782  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1783  	   SPROC_NAME, 'Offer chain to redeem not found');
14:35:12 1784  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
14:35:12 1785  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1786  	   SPROC_NAME, 'No such gift certificate code');
14:35:12 1787  WHEN CAN_NOT_CREATE_LICENSE THEN
14:35:12 1788  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1789  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
14:35:12 1790  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
14:35:12 1791  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 1792  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
14:35:12 1793  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
14:35:12 1794  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1795  	   SPROC_NAME, 'Purchase invoice is not closed');
14:35:12 1796  WHEN PURCHASE_INVOICES_NOT_PAID THEN
14:35:12 1797  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 1798  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
14:35:12 1799  WHEN OTHERS THEN
14:35:12 1800  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1801  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1802  END;
14:35:12 1803  
14:35:12 1804  /******************************************************************************/
14:35:12 1805  
14:35:12 1806  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
14:35:12 1807  /*
14:35:12 1808  Throws exceptions:
14:35:12 1809  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1810  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1811  */
14:35:12 1812  	 in_code	IN VARCHAR,
14:35:12 1813  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1814  ) AS
14:35:12 1815  -- VARIABLES
14:35:12 1816  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
14:35:12 1817  temp_gift_certificate_id NUMBER;
14:35:12 1818  -- EXCEPTIONS
14:35:12 1819  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
14:35:12 1820  BEGIN
14:35:12 1821  
14:35:12 1822  	 BEGIN
14:35:12 1823  	   SELECT
14:35:12 1824  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
14:35:12 1825  	   FROM
14:35:12 1826  	     GIFT_CERTIFICATE
14:35:12 1827  	   WHERE
14:35:12 1828  	     GIFT_CERTIFICATE.CODE = in_code;
14:35:12 1829  	   EXCEPTION
14:35:12 1830  	     WHEN NO_DATA_FOUND THEN
14:35:12 1831  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
14:35:12 1832  	 END;
14:35:12 1833  
14:35:12 1834  	 -- Select all gift certificates with given code
14:35:12 1835  	 OPEN out_result_set FOR
14:35:12 1836  	 SELECT
14:35:12 1837  	   gc.EXPIRATION_DATE,
14:35:12 1838  	   ch.name,
14:35:12 1839  	   ch.id,
14:35:12 1840  	   gc.sender_email,
14:35:12 1841  	   gc.sender_name,
14:35:12 1842  	   gc.recipient_email,
14:35:12 1843  	   gc.recipient_name,
14:35:12 1844  	   gc.purchase_date,
14:35:12 1845  	   gc.redemption_date,
14:35:12 1846  	   gc.purchaser_group_id,
14:35:12 1847  	   gc.redeemer_group_id,
14:35:12 1848  	   gc.gift_message,
14:35:12 1849  	   ocmd.value redemption_offer_chain_ids,
14:35:12 1850  	   s.offer_chain_id redeemed_offer_chain_id,
14:35:12 1851  	   gc.recipient_notify_date,
14:35:12 1852  	   gc.gift_certificate_status_id,
14:35:12 1853  	   gc.purchase_invoice_id,
14:35:12 1854  	   gc.finalized_invoice_id
14:35:12 1855  	 FROM
14:35:12 1856  	   GIFT_CERTIFICATE gc
14:35:12 1857  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
14:35:12 1858  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
14:35:12 1859  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
14:35:12 1860  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
14:35:12 1861  	 WHERE
14:35:12 1862  	   gc.code = in_code;
14:35:12 1863  
14:35:12 1864  EXCEPTION
14:35:12 1865  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
14:35:12 1866  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1867  	   SPROC_NAME, 'No such gift certificate');
14:35:12 1868  WHEN OTHERS THEN
14:35:12 1869  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1870  	   SPROC_NAME, 'Unknown Error', SQLERRM);
14:35:12 1871  END;
14:35:12 1872  
14:35:12 1873  /******************************************************************************/
14:35:12 1874  
14:35:12 1875  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
14:35:12 1876  /*
14:35:12 1877  Throws exceptions:
14:35:12 1878  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1879  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1880  */
14:35:12 1881  	 in_gift_certificate_id IN NUMBER,
14:35:12 1882  	 out_result_set 	OUT SYS_REFCURSOR
14:35:12 1883  ) AS
14:35:12 1884  -- VARIABLES
14:35:12 1885  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
14:35:12 1886  temp_gift_certificate_id NUMBER;
14:35:12 1887  -- EXCEPTIONS
14:35:12 1888  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
14:35:12 1889  BEGIN
14:35:12 1890  
14:35:12 1891  	 BEGIN
14:35:12 1892  	   SELECT
14:35:12 1893  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
14:35:12 1894  	   FROM
14:35:12 1895  	     GIFT_CERTIFICATE
14:35:12 1896  	   WHERE
14:35:12 1897  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
14:35:12 1898  	   EXCEPTION
14:35:12 1899  	     WHEN NO_DATA_FOUND THEN
14:35:12 1900  	       RAISE BAD_GIFT_CERTIFICATE_ID;
14:35:12 1901  	 END;
14:35:12 1902  
14:35:12 1903  	 -- Select all gift certificates with given code
14:35:12 1904  	 OPEN out_result_set FOR
14:35:12 1905  	 SELECT
14:35:12 1906  	   gc.EXPIRATION_DATE,
14:35:12 1907  	   ch.name,
14:35:12 1908  	   ch.id,
14:35:12 1909  	   gc.sender_email,
14:35:12 1910  	   gc.sender_name,
14:35:12 1911  	   gc.recipient_email,
14:35:12 1912  	   gc.recipient_name,
14:35:12 1913  	   gc.purchase_date,
14:35:12 1914  	   gc.redemption_date,
14:35:12 1915  	   gc.purchaser_group_id,
14:35:12 1916  	   gc.redeemer_group_id,
14:35:12 1917  	   gc.code,
14:35:12 1918  	   gc.gift_message,
14:35:12 1919  	   gc.recipient_notify_date
14:35:12 1920  	 FROM
14:35:12 1921  	   GIFT_CERTIFICATE gc
14:35:12 1922  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
14:35:12 1923  	 WHERE
14:35:12 1924  	   gc.id = in_gift_certificate_id;
14:35:12 1925  
14:35:12 1926  EXCEPTION
14:35:12 1927  WHEN BAD_GIFT_CERTIFICATE_ID THEN
14:35:12 1928  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1929  	   SPROC_NAME, 'No such gift certificate');
14:35:12 1930  WHEN OTHERS THEN
14:35:12 1931  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1932  	   SPROC_NAME, 'Unknown Error', SQLERRM);
14:35:12 1933  END GET_GIFT_CERTIFICATE_BY_ID;
14:35:12 1934  
14:35:12 1935  /******************************************************************************/
14:35:12 1936  
14:35:12 1937  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
14:35:12 1938  	 in_group_id		IN  NUMBER,
14:35:12 1939  	 out_instrument_type_id OUT NUMBER,
14:35:12 1940  	 out_instrument_id	OUT NUMBER
14:35:12 1941  ) AS
14:35:12 1942  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
14:35:12 1943  BEGIN
14:35:12 1944  
14:35:12 1945  	 SELECT
14:35:12 1946  	   ACCOUNT.INSTRUMENT_TYPE_ID,
14:35:12 1947  	   ACCOUNT.INSTRUMENT_ID
14:35:12 1948  	   into
14:35:12 1949  	   out_instrument_type_id,
14:35:12 1950  	   out_instrument_id
14:35:12 1951  	 FROM
14:35:12 1952  	   ACCOUNT
14:35:12 1953  	 WHERE
14:35:12 1954  	   ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1955  
14:35:12 1956  EXCEPTION
14:35:12 1957  WHEN NO_DATA_FOUND THEN
14:35:12 1958  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1959  	   SPROC_NAME, 'Bad group id');
14:35:12 1960  WHEN OTHERS THEN
14:35:12 1961  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1962  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1963  END GET_DEF_FINANCIAL_INSTRUMENT;
14:35:12 1964  
14:35:12 1965  /******************************************************************************/
14:35:12 1966  
14:35:12 1967  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
14:35:12 1968  	 in_group_id	       IN NUMBER,
14:35:12 1969  	 in_instrument_type_id IN NUMBER,
14:35:12 1970  	 in_instrument_id      IN NUMBER,
14:35:12 1971  	 in_updated_by	       IN VARCHAR2
14:35:12 1972  ) AS
14:35:12 1973  -- VARIABLES
14:35:12 1974  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
14:35:12 1975  var_account_id	      NUMBER;
14:35:12 1976  -- EXCEPTIONS
14:35:12 1977  BAD_GROUP_ID	      EXCEPTION;
14:35:12 1978  BAD_CREDIT_CARD	      EXCEPTION;
14:35:12 1979  BAD_PAYPAL	      EXCEPTION;
14:35:12 1980  BAD_INSTRUMENT_TYPE    EXCEPTION;
14:35:12 1981  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 1982  BEGIN
14:35:12 1983  
14:35:12 1984  	 -- get account id
14:35:12 1985  	 BEGIN
14:35:12 1986  	   SELECT
14:35:12 1987  	     ACCOUNT.ID into var_account_id
14:35:12 1988  	   FROM
14:35:12 1989  	     ACCOUNT
14:35:12 1990  	   WHERE
14:35:12 1991  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1992  	   EXCEPTION
14:35:12 1993  	     WHEN NO_DATA_FOUND THEN
14:35:12 1994  	       RAISE BAD_GROUP_ID;
14:35:12 1995  	 END;
14:35:12 1996  
14:35:12 1997  	 -- Chech that given instrument exists
14:35:12 1998  	 IF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
14:35:12 1999  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 2000  	     RAISE BAD_CREDIT_CARD;
14:35:12 2001  	   END IF;
14:35:12 2002  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
14:35:12 2003  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 2004  	     RAISE BAD_PAYPAL;
14:35:12 2005  	   END IF;
14:35:12 2006  	 ELSE
14:35:12 2007  	   RAISE BAD_INSTRUMENT_TYPE;
14:35:12 2008  	 END IF;
14:35:12 2009  
14:35:12 2010  	 -- update account information
14:35:12 2011  	 PROCS_ACCOUNT_CRU_V16.UPDATE_ACCOUNT(
14:35:12 2012  	   in_account_id	 => var_account_id,
14:35:12 2013  	   in_updated_by	 => in_updated_by,
14:35:12 2014  	   in_instrument_type_id => in_instrument_type_id,
14:35:12 2015  	   in_instrument_id	 => in_instrument_id
14:35:12 2016  	 );
14:35:12 2017  
14:35:12 2018  EXCEPTION
14:35:12 2019  WHEN BAD_GROUP_ID THEN
14:35:12 2020  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2021  	   SPROC_NAME, 'No such account');
14:35:12 2022  WHEN BAD_CREDIT_CARD THEN
14:35:12 2023  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2024  	   SPROC_NAME, 'Could not find credit card with given ID');
14:35:12 2025  WHEN BAD_PAYPAL THEN
14:35:12 2026  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2027  	   SPROC_NAME, 'Could not find paypal with given ID');
14:35:12 2028  WHEN BAD_INSTRUMENT_TYPE THEN
14:35:12 2029  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2030  	   SPROC_NAME, 'Bad instrument type id');
14:35:12 2031  WHEN OTHERS THEN
14:35:12 2032  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2033  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2034  END SET_DEF_FINANCIAL_INSTRUMENT;
14:35:12 2035  
14:35:12 2036  /******************************************************************************/
14:35:12 2037  
14:35:12 2038  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
14:35:12 2039  	 in_group_id IN NUMBER
14:35:12 2040  ) AS
14:35:12 2041  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
14:35:12 2042  -- VARIABLES
14:35:12 2043  var_account_id NUMBER;
14:35:12 2044  -- EXCEPTIONS
14:35:12 2045  BAD_GROUP_ID	 EXCEPTION;
14:35:12 2046  EXCEPTION_MESSAGE VARCHAR2(1024);
14:35:12 2047  BEGIN
14:35:12 2048  
14:35:12 2049  	 BEGIN
14:35:12 2050  	   SELECT
14:35:12 2051  	     ACCOUNT.ID into var_account_id
14:35:12 2052  	   FROM
14:35:12 2053  	     ACCOUNT
14:35:12 2054  	   WHERE
14:35:12 2055  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 2056  	   EXCEPTION
14:35:12 2057  	     WHEN NO_DATA_FOUND THEN
14:35:12 2058  	       RAISE BAD_GROUP_ID;
14:35:12 2059  	 END;
14:35:12 2060  
14:35:12 2061  	 PROCS_ACCOUNT_CRU_V16.UPDATE_DEF_FIN_INSTRUMENT(
14:35:12 2062  	   in_account_id => var_account_id,
14:35:12 2063  	   in_instrument_type_id => NULL,
14:35:12 2064  	   in_instrument_id => NULL,
14:35:12 2065  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
14:35:12 2066  	 );
14:35:12 2067  
14:35:12 2068  EXCEPTION
14:35:12 2069  WHEN BAD_GROUP_ID THEN
14:35:12 2070  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2071  	   SPROC_NAME, 'No such group id');
14:35:12 2072  WHEN OTHERS THEN
14:35:12 2073  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2074  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2075  END DEL_DEF_FINANCIAL_INSTRUMENT;
14:35:12 2076  
14:35:12 2077  /******************************************************************************/
14:35:12 2078  
14:35:12 2079  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:35:12 2080  	 in_credit_card_id IN  NUMBER,
14:35:12 2081  	 out_result_set    OUT SYS_REFCURSOR
14:35:12 2082  ) AS
14:35:12 2083  -- VARIABLES
14:35:12 2084  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
14:35:12 2085  temp_cc_count NUMBER;
14:35:12 2086  
14:35:12 2087  -- EXCEPTIONS
14:35:12 2088  BAD_CREDIT_CARD_ID EXCEPTION;
14:35:12 2089  BEGIN
14:35:12 2090  
14:35:12 2091  	 -- Check that credit card exists
14:35:12 2092  	 SELECT
14:35:12 2093  	   COUNT(*) into temp_cc_count
14:35:12 2094  	 FROM
14:35:12 2095  	   CREDIT_CARD
14:35:12 2096  	 WHERE
14:35:12 2097  	   CREDIT_CARD.ID = in_credit_card_id;
14:35:12 2098  	 IF temp_cc_count = 0 THEN
14:35:12 2099  	   RAISE BAD_CREDIT_CARD_ID;
14:35:12 2100  	 END IF;
14:35:12 2101  
14:35:12 2102  	 -- Get data
14:35:12 2103  	 OPEN out_result_set FOR
14:35:12 2104  	 SELECT
14:35:12 2105  	   CREDIT_CARD.ID,
14:35:12 2106  	   CREDIT_CARD.ACCOUNT_ID,
14:35:12 2107  	   CREDIT_CARD.INSTRUMENT_NAME,
14:35:12 2108  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
14:35:12 2109  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
14:35:12 2110  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
14:35:12 2111  	   CREDIT_CARD.STATE,
14:35:12 2112  	   CREDIT_CARD.CITY,
14:35:12 2113  	   CREDIT_CARD.POSTAL_CODE,
14:35:12 2114  	   CREDIT_CARD.COUNTRY,
14:35:12 2115  	   CREDIT_CARD.LAST_FOUR_CC,
14:35:12 2116  	   CREDIT_CARD.EXPIRATION_DATE,
14:35:12 2117  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
14:35:12 2118  	   CREDIT_CARD.SECRET_TOKEN,
14:35:12 2119  	   CREDIT_CARD.CREATE_DATE,
14:35:12 2120  	   CREDIT_CARD.CREATED_BY,
14:35:12 2121  	   CREDIT_CARD.UPDATE_DATE,
14:35:12 2122  	   CREDIT_CARD.UPDATED_BY,
14:35:12 2123  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
14:35:12 2124  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
14:35:12 2125  	   CREDIT_CARD.PRIVATE_LAST_NAME,
14:35:12 2126  	       CREDIT_CARD.CHASE_PROFILE_ID
14:35:12 2127  	 FROM
14:35:12 2128  	   CREDIT_CARD
14:35:12 2129  	 WHERE
14:35:12 2130  	   CREDIT_CARD.ID = in_credit_card_id;
14:35:12 2131  
14:35:12 2132  EXCEPTION
14:35:12 2133  WHEN BAD_CREDIT_CARD_ID THEN
14:35:12 2134  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2135  	   SPROC_NAME, 'No such credit card');
14:35:12 2136  WHEN OTHERS THEN
14:35:12 2137  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2138  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2139  END GET_CREDIT_CARD_BY_ID;
14:35:12 2140  
14:35:12 2141  /******************************************************************************/
14:35:12 2142  
14:35:12 2143  PROCEDURE GET_PAYPAL_BY_ID (
14:35:12 2144  	 in_paypal_id	IN  NUMBER,
14:35:12 2145  	 out_result_set OUT SYS_REFCURSOR
14:35:12 2146  ) AS
14:35:12 2147  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
14:35:12 2148  -- VARIABLES
14:35:12 2149  temp_pp_count NUMBER;
14:35:12 2150  -- EXCEPTIONS
14:35:12 2151  BAD_PAYPAL_ID EXCEPTION;
14:35:12 2152  BEGIN
14:35:12 2153  
14:35:12 2154  	 -- Check that credit card exists
14:35:12 2155  	 SELECT
14:35:12 2156  	   COUNT(*) into temp_pp_count
14:35:12 2157  	 FROM
14:35:12 2158  	   PAYPAL
14:35:12 2159  	 WHERE
14:35:12 2160  	   PAYPAL.ID = in_paypal_id;
14:35:12 2161  	 IF temp_pp_count = 0 THEN
14:35:12 2162  	   RAISE BAD_PAYPAL_ID;
14:35:12 2163  	 END IF;
14:35:12 2164  
14:35:12 2165  	 OPEN out_result_set FOR
14:35:12 2166  	 SELECT
14:35:12 2167  	   ID,
14:35:12 2168  	   ACCOUNT_ID,
14:35:12 2169  	   INSTRUMENT_NAME,
14:35:12 2170  	   PRIVATE_EMAIL_ADDRESS,
14:35:12 2171  	   CREATE_DATE,
14:35:12 2172  	   CREATED_BY,
14:35:12 2173  	   UPDATE_DATE,
14:35:12 2174  	   UPDATED_BY,
14:35:12 2175  	   PAYPAL_STATUS_ID,
14:35:12 2176  	   PRIVATE_STREET_ADDRESS,
14:35:12 2177  	   PRIVATE_STREET_ADDRESS2,
14:35:12 2178  	   STATE,
14:35:12 2179  	   CITY,
14:35:12 2180  	   POSTAL_CODE,
14:35:12 2181  	   COUNTRY,
14:35:12 2182  	   EXPIRATION_DATE,
14:35:12 2183  	   SECRET_TOKEN
14:35:12 2184  	 FROM
14:35:12 2185  	   PAYPAL
14:35:12 2186  	 WHERE
14:35:12 2187  	   ID = in_paypal_id;
14:35:12 2188  
14:35:12 2189  EXCEPTION
14:35:12 2190  WHEN BAD_PAYPAL_ID THEN
14:35:12 2191  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2192  	   SPROC_NAME, 'No such paypal');
14:35:12 2193  WHEN OTHERS THEN
14:35:12 2194  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2195  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2196  END GET_PAYPAL_BY_ID;
14:35:12 2197  
14:35:12 2198  /******************************************************************************/
14:35:12 2199  
14:35:12 2200  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
14:35:12 2201  /*
14:35:12 2202  	 Returns GLOBAL_CONSTANTS_V16.TRUE if system can disable credit card
14:35:12 2203  	 GLOBAL_CONSTANTS_V16.FALSE else
14:35:12 2204  */
14:35:12 2205  	 in_credit_card_id NUMBER
14:35:12 2206  ) RETURN NUMBER AS
14:35:12 2207  BEGIN
14:35:12 2208  	 -- STUB
14:35:12 2209  	 RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2210  END F_CAN_DISABLE_CREDIT_CARD;
14:35:12 2211  
14:35:12 2212  /******************************************************************************/
14:35:12 2213  
14:35:12 2214  PROCEDURE GET_PURCHASED_GCERTIFICATES (
14:35:12 2215  	 in_group_id	IN NUMBER,
14:35:12 2216  	 out_result_set OUT SYS_REFCURSOR
14:35:12 2217  ) AS
14:35:12 2218  -- VARIABLES
14:35:12 2219  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
14:35:12 2220  var_account_id NUMBER;
14:35:12 2221  -- EXCEPTIONS
14:35:12 2222  BAD_GROUP_ID EXCEPTION;
14:35:12 2223  BEGIN
14:35:12 2224  
14:35:12 2225  	 BEGIN
14:35:12 2226  	   SELECT
14:35:12 2227  	     ACCOUNT.ID into var_account_id
14:35:12 2228  	   FROM
14:35:12 2229  	     ACCOUNT
14:35:12 2230  	   WHERE
14:35:12 2231  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 2232  	   EXCEPTION
14:35:12 2233  	     WHEN NO_DATA_FOUND THEN
14:35:12 2234  	       RAISE BAD_GROUP_ID;
14:35:12 2235  	 END;
14:35:12 2236  
14:35:12 2237  	 OPEN out_result_set FOR
14:35:12 2238  	 SELECT
14:35:12 2239  	   GIFT_CERTIFICATE.CODE,
14:35:12 2240  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
14:35:12 2241  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
14:35:12 2242  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
14:35:12 2243  	   GIFT_CERTIFICATE.SENDER_EMAIL,
14:35:12 2244  	   GIFT_CERTIFICATE.SENDER_NAME,
14:35:12 2245  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
14:35:12 2246  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
14:35:12 2247  	   GIFT_CERTIFICATE.PURCHASE_DATE,
14:35:12 2248  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
14:35:12 2249  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
14:35:12 2250  	 FROM
14:35:12 2251  	   GIFT_CERTIFICATE
14:35:12 2252  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 2253  	 WHERE
14:35:12 2254  	   ROWNUM <= 100 AND
14:35:12 2255  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
14:35:12 2256  
14:35:12 2257  EXCEPTION
14:35:12 2258  WHEN BAD_GROUP_ID THEN
14:35:12 2259  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2260  	   SPROC_NAME, 'No such group id');
14:35:12 2261  WHEN OTHERS THEN
14:35:12 2262  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2263  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2264  END GET_PURCHASED_GCERTIFICATES;
14:35:12 2265  
14:35:12 2266  /******************************************************************************/
14:35:12 2267  
14:35:12 2268  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
14:35:12 2269  	 in_gift_certificate_id IN NUMBER,
14:35:12 2270  	 in_charge_id		IN NUMBER,
14:35:12 2271  	 out_result		OUT NUMBER
14:35:12 2272  ) AS
14:35:12 2273  -- VARIABLES
14:35:12 2274  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
14:35:12 2275  var_invoice_id	    NUMBER;
14:35:12 2276  var_offer_chain_id   NUMBER;
14:35:12 2277  var_offer_chain_s_id NUMBER;
14:35:12 2278  -- EXCEPTIONS
14:35:12 2279  BAD_CHARGE_ID		 EXCEPTION;
14:35:12 2280  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
14:35:12 2281  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
14:35:12 2282  BEGIN
14:35:12 2283  
14:35:12 2284  	 BEGIN
14:35:12 2285  	   SELECT
14:35:12 2286  	     CHARGE.INVOICE_ID into var_invoice_id
14:35:12 2287  	   FROM
14:35:12 2288  	     CHARGE
14:35:12 2289  	   WHERE
14:35:12 2290  	     CHARGE.ID = in_charge_id;
14:35:12 2291  	   EXCEPTION
14:35:12 2292  	     WHEN NO_DATA_FOUND THEN
14:35:12 2293  	       RAISE BAD_CHARGE_ID;
14:35:12 2294  	 END;
14:35:12 2295  
14:35:12 2296  	 BEGIN
14:35:12 2297  	   SELECT
14:35:12 2298  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
14:35:12 2299  	   FROM
14:35:12 2300  	     GIFT_CERTIFICATE
14:35:12 2301  	   WHERE
14:35:12 2302  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
14:35:12 2303  	   EXCEPTION
14:35:12 2304  	     WHEN NO_DATA_FOUND THEN
14:35:12 2305  	       RAISE BAD_GIFT_CERTIFICATE_ID;
14:35:12 2306  	 END;
14:35:12 2307  
14:35:12 2308  	 BEGIN
14:35:12 2309  	   SELECT
14:35:12 2310  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
14:35:12 2311  	   FROM
14:35:12 2312  	     SUBSCRIPTION
14:35:12 2313  	   WHERE
14:35:12 2314  	     SUBSCRIPTION.ID IN (
14:35:12 2315  	       SELECT DISTINCT
14:35:12 2316  		 LICENSE.SUBSCRIPTION_ID
14:35:12 2317  	       FROM
14:35:12 2318  		 LICENSE
14:35:12 2319  	       WHERE
14:35:12 2320  		 LICENSE.INVOICE_ID = var_invoice_id
14:35:12 2321  	     );
14:35:12 2322  	   EXCEPTION
14:35:12 2323  	     WHEN NO_DATA_FOUND THEN
14:35:12 2324  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
14:35:12 2325  	 END;
14:35:12 2326  
14:35:12 2327  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
14:35:12 2328  	   out_result := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2329  	 ELSE
14:35:12 2330  	   out_result := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 2331  	 END IF;
14:35:12 2332  
14:35:12 2333  EXCEPTION
14:35:12 2334  WHEN BAD_CHARGE_ID THEN
14:35:12 2335  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2336  	   SPROC_NAME, 'No such charge');
14:35:12 2337  WHEN BAD_GIFT_CERTIFICATE_ID THEN
14:35:12 2338  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2339  	   SPROC_NAME, 'No such gift certificate');
14:35:12 2340  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
14:35:12 2341  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2342  	   SPROC_NAME, 'Could not find subscription for given charge');
14:35:12 2343  WHEN OTHERS THEN
14:35:12 2344  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2345  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2346  END IS_GCERT_FOR_PROPER_OFFER;
14:35:12 2347  
14:35:12 2348  /******************************************************************************/
14:35:12 2349  
14:35:12 2350  FUNCTION IS_CREDIT_CARD_EXISTS (
14:35:12 2351  /*
14:35:12 2352  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
14:35:12 2353  GLOBAL_CONSTANTS_V16.FALSE - else
14:35:12 2354  */
14:35:12 2355  	 in_credit_card_id IN NUMBER
14:35:12 2356  ) RETURN NUMBER AS
14:35:12 2357  -- VARIABLES
14:35:12 2358  var_cc_count NUMBER;
14:35:12 2359  BEGIN
14:35:12 2360  	 SELECT
14:35:12 2361  	   COUNT(*) into var_cc_count
14:35:12 2362  	 FROM
14:35:12 2363  	   CREDIT_CARD
14:35:12 2364  	 WHERE
14:35:12 2365  	   CREDIT_CARD.ID = in_credit_card_id;
14:35:12 2366  
14:35:12 2367  	 IF var_cc_count = 0 THEN
14:35:12 2368  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 2369  	 ELSE
14:35:12 2370  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2371  	 END IF;
14:35:12 2372  
14:35:12 2373  END IS_CREDIT_CARD_EXISTS;
14:35:12 2374  
14:35:12 2375  /******************************************************************************/
14:35:12 2376  
14:35:12 2377  FUNCTION IS_PAYPAL_EXISTS (
14:35:12 2378  /*
14:35:12 2379  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
14:35:12 2380  GLOBAL_CONSTANTS_V16.FALSE - else
14:35:12 2381  */
14:35:12 2382  	 in_paypal_id IN NUMBER
14:35:12 2383  ) RETURN NUMBER AS
14:35:12 2384  -- VARIABLES
14:35:12 2385  var_pp_count NUMBER;
14:35:12 2386  BEGIN
14:35:12 2387  	 SELECT
14:35:12 2388  	   COUNT(*) into var_pp_count
14:35:12 2389  	 FROM
14:35:12 2390  	   PAYPAL
14:35:12 2391  	 WHERE
14:35:12 2392  	   PAYPAL.ID = in_paypal_id;
14:35:12 2393  
14:35:12 2394  	 IF var_pp_count = 0 THEN
14:35:12 2395  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 2396  	 ELSE
14:35:12 2397  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2398  	 END IF;
14:35:12 2399  
14:35:12 2400  END IS_PAYPAL_EXISTS;
14:35:12 2401  
14:35:12 2402  /******************************************************************************/
14:35:12 2403  
14:35:12 2404  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
14:35:12 2405  /*
14:35:12 2406  GLOBAL_CONSTANTS_V16.TRUE - if instrument exists
14:35:12 2407  GLOBAL_CONSTANTS_V16.FALSE - else
14:35:12 2408  */
14:35:12 2409  	 in_gift_certificate_id IN NUMBER
14:35:12 2410  ) RETURN NUMBER AS
14:35:12 2411  -- VARIABLES
14:35:12 2412  var_gc_count NUMBER;
14:35:12 2413  BEGIN
14:35:12 2414  	 SELECT
14:35:12 2415  	   COUNT(*) into var_gc_count
14:35:12 2416  	 FROM
14:35:12 2417  	   GIFT_CERTIFICATE
14:35:12 2418  	 WHERE
14:35:12 2419  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
14:35:12 2420  
14:35:12 2421  	 IF var_gc_count = 0 THEN
14:35:12 2422  	   RETURN GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 2423  	 ELSE
14:35:12 2424  	   RETURN GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 2425  	 END IF;
14:35:12 2426  
14:35:12 2427  END IS_GIFT_CERTIFICATE_EXISTS;
14:35:12 2428  
14:35:12 2429  /******************************************************************************/
14:35:12 2430  
14:35:12 2431  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
14:35:12 2432  	 in_credit_card_id IN NUMBER,
14:35:12 2433  	 out_group_id	   OUT NUMBER
14:35:12 2434  ) AS
14:35:12 2435  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
14:35:12 2436  BEGIN
14:35:12 2437  	 SELECT
14:35:12 2438  	   ACCOUNT.GROUP_ID into out_group_id
14:35:12 2439  	 FROM
14:35:12 2440  	   CREDIT_CARD
14:35:12 2441  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
14:35:12 2442  	 WHERE
14:35:12 2443  	   CREDIT_CARD.ID = in_credit_card_id;
14:35:12 2444  EXCEPTION
14:35:12 2445  WHEN NO_DATA_FOUND THEN
14:35:12 2446  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2447  	   SPROC_NAME, 'No such credit card');
14:35:12 2448  WHEN OTHERS THEN
14:35:12 2449  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2450  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2451  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
14:35:12 2452  
14:35:12 2453  /******************************************************************************/
14:35:12 2454  
14:35:12 2455  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
14:35:12 2456  	 in_paypal_id IN NUMBER,
14:35:12 2457  	 out_group_id OUT NUMBER
14:35:12 2458  ) AS
14:35:12 2459  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
14:35:12 2460  BEGIN
14:35:12 2461  	 SELECT
14:35:12 2462  	   ACCOUNT.GROUP_ID into out_group_id
14:35:12 2463  	 FROM
14:35:12 2464  	   PAYPAL
14:35:12 2465  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
14:35:12 2466  	 WHERE
14:35:12 2467  	   PAYPAL.ID = in_paypal_id;
14:35:12 2468  EXCEPTION
14:35:12 2469  WHEN NO_DATA_FOUND THEN
14:35:12 2470  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2471  	   SPROC_NAME, 'No such paypal');
14:35:12 2472  WHEN OTHERS THEN
14:35:12 2473  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2474  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2475  END GET_GROUP_ID_BY_PAYPAL_ID;
14:35:12 2476  
14:35:12 2477  /******************************************************************************/
14:35:12 2478  
14:35:12 2479  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
14:35:12 2480  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
14:35:12 2481  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
14:35:12 2482  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
14:35:12 2483  ) AS
14:35:12 2484  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
14:35:12 2485  -- EXCEPTIONS
14:35:12 2486  BAD_CREDIT_CARD_ID     EXCEPTION;
14:35:12 2487  BAD_STATUS_ID	      EXCEPTION;
14:35:12 2488  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 2489  BEGIN
14:35:12 2490  
14:35:12 2491  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
14:35:12 2492  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_INVALID
14:35:12 2493  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_DISABLED
14:35:12 2494  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V16.CREDIT_CARD_EXPIRED THEN
14:35:12 2495  	   RAISE BAD_STATUS_ID;
14:35:12 2496  	 END IF;
14:35:12 2497  
14:35:12 2498  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_CREDIT_CARD(
14:35:12 2499  	   in_credit_card_id	    => in_credit_card_id,
14:35:12 2500  	   in_updated_by	    => in_updated_by,
14:35:12 2501  	   in_credit_card_status_id => in_credit_card_status_id
14:35:12 2502  	 );
14:35:12 2503  
14:35:12 2504  	 IF SQL%ROWCOUNT = 0 THEN
14:35:12 2505  	   RAISE BAD_CREDIT_CARD_ID;
14:35:12 2506  	 END IF;
14:35:12 2507  
14:35:12 2508  EXCEPTION
14:35:12 2509  WHEN BAD_CREDIT_CARD_ID THEN
14:35:12 2510  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2511  	   SPROC_NAME, 'No such credit card');
14:35:12 2512  WHEN BAD_STATUS_ID THEN
14:35:12 2513  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2514  	   SPROC_NAME, 'Bad credit card status id');
14:35:12 2515  WHEN OTHERS THEN
14:35:12 2516  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2517  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2518  END UPDATE_CREDIT_CARD_STATUS;
14:35:12 2519  
14:35:12 2520  /******************************************************************************/
14:35:12 2521  
14:35:12 2522  PROCEDURE UPDATE_PAYPAL_STATUS (
14:35:12 2523  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
14:35:12 2524  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
14:35:12 2525  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
14:35:12 2526  ) AS
14:35:12 2527  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
14:35:12 2528  -- EXCEPTIONS
14:35:12 2529  BAD_PAYPAL_ID	      EXCEPTION;
14:35:12 2530  BAD_STATUS_ID	      EXCEPTION;
14:35:12 2531  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 2532  BEGIN
14:35:12 2533  
14:35:12 2534  	 IF in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
14:35:12 2535  	   AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
14:35:12 2536  	   AND in_paypal_status_id != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
14:35:12 2537  	   RAISE BAD_STATUS_ID;
14:35:12 2538  	 END IF;
14:35:12 2539  
14:35:12 2540  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_PAYPAL(
14:35:12 2541  	   in_paypal_id        => in_paypal_id,
14:35:12 2542  	   in_paypal_status_id => in_paypal_status_id,
14:35:12 2543  	   in_updated_by       => in_updated_by
14:35:12 2544  	 );
14:35:12 2545  
14:35:12 2546  	 IF SQL%ROWCOUNT = 0 THEN
14:35:12 2547  	   RAISE BAD_PAYPAL_ID;
14:35:12 2548  	 END IF;
14:35:12 2549  
14:35:12 2550  EXCEPTION
14:35:12 2551  WHEN BAD_PAYPAL_ID THEN
14:35:12 2552  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2553  	   SPROC_NAME, 'No such paypal');
14:35:12 2554  WHEN BAD_STATUS_ID THEN
14:35:12 2555  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2556  	   SPROC_NAME, 'Bad paypal status id');
14:35:12 2557  WHEN OTHERS THEN
14:35:12 2558  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2559  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2560  END UPDATE_PAYPAL_STATUS;
14:35:12 2561  
14:35:12 2562  /******************************************************************************/
14:35:12 2563  
14:35:12 2564  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
14:35:12 2565  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
14:35:12 2566  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
14:35:12 2567  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
14:35:12 2568  ) AS
14:35:12 2569  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
14:35:12 2570  -- EXCEPTIONS
14:35:12 2571  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
14:35:12 2572  BAD_STATUS_ID	       EXCEPTION;
14:35:12 2573  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:35:12 2574  BEGIN
14:35:12 2575  
14:35:12 2576  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
14:35:12 2577  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_FINALIZED THEN
14:35:12 2578  	   RAISE BAD_STATUS_ID;
14:35:12 2579  	 END IF;
14:35:12 2580  
14:35:12 2581  	 PROCS_FIN_INSTRUMENTS_CRU_V16.UPDATE_GIFT_CERTIFICATE(
14:35:12 2582  	   in_gift_certificate_id	 => in_gift_certificate_id,
14:35:12 2583  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
14:35:12 2584  	   in_updated_by		 => in_updated_by
14:35:12 2585  	 );
14:35:12 2586  
14:35:12 2587  	 IF SQL%ROWCOUNT = 0 THEN
14:35:12 2588  	   RAISE BAD_GIFT_CERTIFICATE_ID;
14:35:12 2589  	 END IF;
14:35:12 2590  
14:35:12 2591  EXCEPTION
14:35:12 2592  WHEN BAD_GIFT_CERTIFICATE_ID THEN
14:35:12 2593  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2594  	   SPROC_NAME, 'No such gift certificate');
14:35:12 2595  WHEN BAD_STATUS_ID THEN
14:35:12 2596  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2597  	   SPROC_NAME, 'Bad paypal status id');
14:35:12 2598  WHEN OTHERS THEN
14:35:12 2599  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2600  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2601  END UPDATE_GIFT_CERTIFICATE_STATUS;
14:35:12 2602  
14:35:12 2603  /******************************************************************************/
14:35:12 2604  
14:35:12 2605  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:35:12 2606  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:12 2607  	 out_result_set OUT SYS_REFCURSOR
14:35:12 2608  ) AS
14:35:12 2609  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
14:35:12 2610  -- VARIABLES
14:35:12 2611  temp_invoice_id NUMBER;
14:35:12 2612  -- EXCEPTIONS
14:35:12 2613  BAD_INVOICE_ID EXCEPTION;
14:35:12 2614  BEGIN
14:35:12 2615  
14:35:12 2616  	 BEGIN
14:35:12 2617  	   SELECT
14:35:12 2618  	     I.ID into temp_invoice_id
14:35:12 2619  	   FROM
14:35:12 2620  	     INVOICE I
14:35:12 2621  	   WHERE
14:35:12 2622  	     I.ID = in_invoice_id;
14:35:12 2623  	   EXCEPTION
14:35:12 2624  	     WHEN NO_DATA_FOUND THEN
14:35:12 2625  	       RAISE BAD_INVOICE_ID;
14:35:12 2626  	 END;
14:35:12 2627  
14:35:12 2628  	 OPEN out_result_set FOR
14:35:12 2629  	   SELECT
14:35:12 2630  	     gc.EXPIRATION_DATE,
14:35:12 2631  	     ch.name,
14:35:12 2632  	     ch.id offer_chain_id,
14:35:12 2633  	     gc.sender_email,
14:35:12 2634  	     gc.sender_name,
14:35:12 2635  	     gc.recipient_email,
14:35:12 2636  	     gc.recipient_name,
14:35:12 2637  	     gc.purchase_date,
14:35:12 2638  	     gc.redemption_date,
14:35:12 2639  	     gc.purchaser_group_id,
14:35:12 2640  	     gc.redeemer_group_id,
14:35:12 2641  	     gc.code,
14:35:12 2642  	     gc.gift_message,
14:35:12 2643  	     gc.recipient_notify_date,
14:35:12 2644  	     gc.id
14:35:12 2645  	   FROM
14:35:12 2646  	     GIFT_CERTIFICATE gc
14:35:12 2647  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
14:35:12 2648  	   WHERE
14:35:12 2649  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
14:35:12 2650  
14:35:12 2651  EXCEPTION
14:35:12 2652  WHEN BAD_INVOICE_ID THEN
14:35:12 2653  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2654  	   SPROC_NAME, 'No such invoice');
14:35:12 2655  WHEN OTHERS THEN
14:35:12 2656  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2658  END GET_GC_BY_PURCH_INVOICE_ID;
14:35:12 2659  
14:35:12 2660  
14:35:12 2661  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
14:35:12 2662  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:12 2663  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
14:35:12 2664  ) AS
14:35:12 2665  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
14:35:12 2666  -- VARIABLES
14:35:12 2667  temp_invoice_id NUMBER;
14:35:12 2668  -- EXCEPTIONS
14:35:12 2669  BAD_INVOICE_ID EXCEPTION;
14:35:12 2670  BEGIN
14:35:12 2671  
14:35:12 2672  	 BEGIN
14:35:12 2673  	   SELECT
14:35:12 2674  	     I.ID into temp_invoice_id
14:35:12 2675  	   FROM
14:35:12 2676  	     INVOICE I
14:35:12 2677  	   WHERE
14:35:12 2678  	     I.ID = in_invoice_id;
14:35:12 2679  	   EXCEPTION
14:35:12 2680  	     WHEN NO_DATA_FOUND THEN
14:35:12 2681  	       RAISE BAD_INVOICE_ID;
14:35:12 2682  	 END;
14:35:12 2683  
14:35:12 2684  	 BEGIN
14:35:12 2685  	   SELECT
14:35:12 2686  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
14:35:12 2687  	   FROM
14:35:12 2688  	     GIFT_CERTIFICATE
14:35:12 2689  	   WHERE
14:35:12 2690  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
14:35:12 2691  	   EXCEPTION
14:35:12 2692  	     WHEN NO_DATA_FOUND THEN
14:35:12 2693  	       out_gift_certificate_id := NULL;
14:35:12 2694  	 END;
14:35:12 2695  
14:35:12 2696  EXCEPTION
14:35:12 2697  WHEN BAD_INVOICE_ID THEN
14:35:12 2698  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2699  	   SPROC_NAME, 'No such invoice');
14:35:12 2700  WHEN OTHERS THEN
14:35:12 2701  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2702  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2703  END GET_GC_ID_BY_PURCH_INVOICE_ID;
14:35:12 2704  
14:35:12 2705  /******************************************************************************/
14:35:12 2706  
14:35:12 2707  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
14:35:12 2708  	 /*in_group_id		      IN NUMBER  -- TODO: should we pass group_id here?*/
14:35:12 2709  	 in_old_fin_instrument_id   IN NUMBER,
14:35:12 2710  	 in_old_fin_instrument_type IN NUMBER,
14:35:12 2711  	 in_new_fin_instrument_id   IN NUMBER,
14:35:12 2712  	 in_new_fin_instrument_type IN NUMBER,
14:35:12 2713  	 in_updated_by		    IN VARCHAR2
14:35:12 2714  ) AS
14:35:12 2715  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
14:35:12 2716  -- variables
14:35:12 2717  temp_out_transaction_id NUMBER;
14:35:12 2718  temp_out_charge_id      NUMBER;
14:35:12 2719  var_accounts_count      NUMBER;
14:35:12 2720  -- EXCEPTIONS
14:35:12 2721  BAD_OLD_CC   EXCEPTION;
14:35:12 2722  BAD_OLD_PP   EXCEPTION;
14:35:12 2723  BAD_OLD_TYPE EXCEPTION;
14:35:12 2724  BAD_NEW_CC   EXCEPTION;
14:35:12 2725  BAD_NEW_PP   EXCEPTION;
14:35:12 2726  BAD_NEW_TYPE EXCEPTION;
14:35:12 2727  DIFFERENT_OWNERS EXCEPTION;
14:35:12 2728  BEGIN
14:35:12 2729  
14:35:12 2730  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
14:35:12 2731  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 2732  	     -- throw exception: bad old credit card
14:35:12 2733  	     RAISE BAD_OLD_CC;
14:35:12 2734  	   END IF;
14:35:12 2735  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
14:35:12 2736  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 2737  	     -- throw exception: bad old paypal
14:35:12 2738  	     RAISE BAD_OLD_PP;
14:35:12 2739  	   END IF;
14:35:12 2740  	 ELSE
14:35:12 2741  	   -- throw exception: bad instrument type
14:35:12 2742  	   RAISE BAD_OLD_TYPE;
14:35:12 2743  	 END IF;
14:35:12 2744  
14:35:12 2745  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
14:35:12 2746  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 2747  	     -- throw exception: bad new credit card
14:35:12 2748  	     RAISE BAD_NEW_CC;
14:35:12 2749  	   END IF;
14:35:12 2750  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
14:35:12 2751  	   IF PROCS_FIN_INSTRUMENTS_V16.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 2752  	     -- throw exception: bad new paypal
14:35:12 2753  	     RAISE BAD_NEW_PP;
14:35:12 2754  	   END IF;
14:35:12 2755  	 ELSE
14:35:12 2756  	   -- throw exception: bad new instrument type
14:35:12 2757  	   RAISE BAD_NEW_TYPE;
14:35:12 2758  	 END IF;
14:35:12 2759  
14:35:12 2760  	 -- Check that owner of both instruments - same man
14:35:12 2761  
14:35:12 2762  	 SELECT count(1) into var_accounts_count FROM (
14:35:12 2763  	   SELECT
14:35:12 2764  	     CC.ACCOUNT_ID
14:35:12 2765  	   FROM
14:35:12 2766  	     CREDIT_CARD CC
14:35:12 2767  	   WHERE
14:35:12 2768  	     (
14:35:12 2769  	       CC.ID = in_old_fin_instrument_id
14:35:12 2770  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
14:35:12 2771  	     )
14:35:12 2772  	     OR
14:35:12 2773  	     (
14:35:12 2774  	       CC.ID = in_new_fin_instrument_id
14:35:12 2775  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD
14:35:12 2776  	     )
14:35:12 2777  	   UNION
14:35:12 2778  	   SELECT
14:35:12 2779  	     PP.ACCOUNT_ID
14:35:12 2780  	   FROM
14:35:12 2781  	     PAYPAL PP
14:35:12 2782  	   WHERE
14:35:12 2783  	     (
14:35:12 2784  	       PP.ID = in_old_fin_instrument_id
14:35:12 2785  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
14:35:12 2786  	     )
14:35:12 2787  	     OR
14:35:12 2788  	     (
14:35:12 2789  	       PP.ID = in_new_fin_instrument_id
14:35:12 2790  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL
14:35:12 2791  	     )
14:35:12 2792  	 )
14:35:12 2793  	 WHERE
14:35:12 2794  	   account_id IS NOT NULL;
14:35:12 2795  
14:35:12 2796  	 IF (var_accounts_count > 1) THEN
14:35:12 2797  	   -- Throw exception: different owners of instruments
14:35:12 2798  	   RAISE DIFFERENT_OWNERS;
14:35:12 2799  	 END IF;
14:35:12 2800  
14:35:12 2801  	 FOR f_sub IN (
14:35:12 2802  	   select
14:35:12 2803  	     s.id
14:35:12 2804  	   FROM
14:35:12 2805  	     subscription s
14:35:12 2806  	   WHERE
14:35:12 2807  	     (
14:35:12 2808  	       s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE OR
14:35:12 2809  	       s.subscription_status_id = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
14:35:12 2810  	     )
14:35:12 2811  	     AND
14:35:12 2812  	     s.instrument_type_id = in_old_fin_instrument_type AND
14:35:12 2813  	     s.instrument_id = in_old_fin_instrument_id
14:35:12 2814  	 ) LOOP
14:35:12 2815  	   PROCS_SUBSCRIPTION_CRU_V16.UPDATE_SUBSCRIPTION(
14:35:12 2816  	     in_subscription_id => f_sub.id,
14:35:12 2817  	     in_instrument_type_id => in_new_fin_instrument_type,
14:35:12 2818  	     in_instrument_id => in_new_fin_instrument_id,
14:35:12 2819  	     in_updated_by => in_updated_by
14:35:12 2820  	   );
14:35:12 2821  	 END LOOP;
14:35:12 2822  
14:35:12 2823  	 FOR f_open_charge IN (
14:35:12 2824  	   select
14:35:12 2825  	     ch.id,
14:35:12 2826  	     ch.invoice_id,
14:35:12 2827  	     ch.transaction_id,
14:35:12 2828  	     ch.charge_amount
14:35:12 2829  	   FROM
14:35:12 2830  	     charge ch
14:35:12 2831  	   WHERE
14:35:12 2832  	     ch.instrument_type_id = in_old_fin_instrument_type
14:35:12 2833  	     AND ch.instrument_id = in_old_fin_instrument_id
14:35:12 2834  	     AND ch.charge_status_id = GLOBAL_STATUSES_V16.CHARGE_OPENED
14:35:12 2835  	 ) LOOP
14:35:12 2836  
14:35:12 2837  	   FOR f_pending_transaction IN (
14:35:12 2838  	     select
14:35:12 2839  	       id, transaction_amount, order_id, is_refund
14:35:12 2840  	     from
14:35:12 2841  	       transaction
14:35:12 2842  	     where
14:35:12 2843  	       id = f_open_charge.transaction_id
14:35:12 2844  	       and transaction_status_id = GLOBAL_STATUSES_V16.TRANSACTION_PENDING
14:35:12 2845  	   ) LOOP
14:35:12 2846  	     PROCS_TRANSACTION_V16.CREATE_TRANSACTION (
14:35:12 2847  	       in_transaction_id => NULL,
14:35:12 2848  	       in_status_id  => GLOBAL_STATUSES_V16.TRANSACTION_PENDING,
14:35:12 2849  	       in_amount     => f_pending_transaction.transaction_amount,
14:35:12 2850  	       in_created_by => in_updated_by,
14:35:12 2851  	       in_order_id   => null,
14:35:12 2852  	       in_is_refund  => f_pending_transaction.is_refund,
14:35:12 2853  	       out_transaction_id => temp_out_transaction_id
14:35:12 2854  	     );
14:35:12 2855  
14:35:12 2856  	     PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
14:35:12 2857  	       in_transaction_id => f_pending_transaction.id,
14:35:12 2858  	       in_updated_by	 => in_updated_by,
14:35:12 2859  	       in_transaction_status_id  => GLOBAL_STATUSES_V16.TRANSACTION_CLOSED
14:35:12 2860  	     );
14:35:12 2861  
14:35:12 2862  	     -- Create new charge
14:35:12 2863  	     PROCS_CHARGE_V16.CREATE_CHARGE (
14:35:12 2864  	       in_invoice_id	     => f_open_charge.invoice_id,
14:35:12 2865  	       in_transaction_id     => temp_out_transaction_id,
14:35:12 2866  	       in_instrument_type_id => in_new_fin_instrument_type,
14:35:12 2867  	       in_instrument_id      => in_new_fin_instrument_id,
14:35:12 2868  	       in_charge_amount      => f_open_charge.charge_amount,
14:35:12 2869  	       in_created_by	     => in_updated_by,
14:35:12 2870  	       in_charge_status_id   => GLOBAL_STATUSES_V16.CHARGE_OPENED,
14:35:12 2871  	       out_charge_id	     => temp_out_charge_id
14:35:12 2872  	     );
14:35:12 2873  	     -- Cancel old charge
14:35:12 2874  	     PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
14:35:12 2875  	       in_charge_id	   => f_open_charge.id,
14:35:12 2876  	       in_updated_by	   => in_updated_by,
14:35:12 2877  	       in_charge_status_id => GLOBAL_STATUSES_V16.CHARGE_CANCELED
14:35:12 2878  	     );
14:35:12 2879  
14:35:12 2880  	     PROCS_ADJUSTMENTS_V16.UPDATE_INVOICE_ADJUSTMENT(
14:35:12 2881  	       IN_INVOICE_ID => f_open_charge.invoice_id,
14:35:12 2882  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
14:35:12 2883  	       IN_CHARGE_ID => temp_out_charge_id,
14:35:12 2884  	       IN_UPDATED_BY => in_updated_by
14:35:12 2885  	     );
14:35:12 2886  
14:35:12 2887  	   END LOOP;
14:35:12 2888  	 END LOOP;
14:35:12 2889  
14:35:12 2890  EXCEPTION
14:35:12 2891  WHEN BAD_OLD_CC THEN
14:35:12 2892  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2893  	   SPROC_NAME, 'Trying to switch from non existing credit card');
14:35:12 2894  WHEN BAD_OLD_PP THEN
14:35:12 2895  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2896  	   SPROC_NAME, 'Trying to switch from non existing paypal');
14:35:12 2897  WHEN BAD_OLD_TYPE THEN
14:35:12 2898  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2899  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
14:35:12 2900  WHEN BAD_NEW_CC THEN
14:35:12 2901  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2902  	   SPROC_NAME, 'Trying to switch to non existing credit card');
14:35:12 2903  WHEN BAD_NEW_PP THEN
14:35:12 2904  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2905  	   SPROC_NAME, 'Trying to switch to non existing paypal');
14:35:12 2906  WHEN BAD_NEW_TYPE THEN
14:35:12 2907  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 2908  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
14:35:12 2909  WHEN DIFFERENT_OWNERS THEN
14:35:12 2910  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 2911  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
14:35:12 2912  WHEN OTHERS THEN
14:35:12 2913  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 2914  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 2915  END SWITCH_FINANCIAL_INSTRUMENT;
14:35:12 2916  
14:35:12 2917  END PROCS_FIN_INSTRUMENTS_V16;
14:35:12 2918  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.04
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
14:35:12   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
14:35:12   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
14:35:12   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:12   7  ) AS
14:35:12   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
14:35:12   9  BEGIN
14:35:12  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_SUBSCRIPTION_SHARE (
14:35:12  11  	  in_id 		=> in_sub_share_id,
14:35:12  12  	  in_needs_entitlements => in_need_entitlements,
14:35:12  13  	  in_updated_by 	=> in_updater
14:35:12  14  	);
14:35:12  15  END UPDATE_SS_NEED_ENTITLEMENTS;
14:35:12  16  
14:35:12  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
14:35:12  18  	out_result_set OUT SYS_REFCURSOR
14:35:12  19  ) AS
14:35:12  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
14:35:12  21  BEGIN
14:35:12  22  	OPEN out_result_set FOR
14:35:12  23  	SELECT * FROM (
14:35:12  24  	  SELECT DISTINCT
14:35:12  25  	    ga.Subscription_Id,
14:35:12  26  	    A.Group_Id Borrower_Group_Id,
14:35:12  27  	    L.Offer_Id,
14:35:12  28  	    ss.id Subscription_Share_id
14:35:12  29  	  FROM
14:35:12  30  	    Subscription_Share Ss,
14:35:12  31  	    Group_Account Ga,
14:35:12  32  	    Account A,
14:35:12  33  	    License l
14:35:12  34  	  WHERE
14:35:12  35  	    Ss.Group_Account_Id        = ga.id
14:35:12  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V16.TRUE
14:35:12  37  	    AND Ss.Borrower_Account_Id = A.Id
14:35:12  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
14:35:12  39  	    AND ROWNUM <= 5000
14:35:12  40  	  ORDER BY dbms_random.value
14:35:12  41  ) WHERE
14:35:12  42  	ROWNUM <= 1000;
14:35:12  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
14:35:12  44  
14:35:12  45  PROCEDURE EXPIRE_SUB_SHARE(
14:35:12  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
14:35:12  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:12  48  ) AS
14:35:12  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
14:35:12  50  BEGIN
14:35:12  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_SUBSCRIPTION_SHARE (
14:35:12  52  	  in_id 	=> in_sub_share_id,
14:35:12  53  	  in_end_date	=> SYSDATE,
14:35:12  54  	  in_updated_by => in_updater,
14:35:12  55  	  in_needs_entitlements => 1
14:35:12  56  	);
14:35:12  57  END EXPIRE_SUB_SHARE;
14:35:12  58  
14:35:12  59  PROCEDURE EXPIRE_ALL_SHARES (
14:35:12  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
14:35:12  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:12  62  ) AS
14:35:12  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
14:35:12  64  BEGIN
14:35:12  65  	UPDATE SUBSCRIPTION_SHARE SET
14:35:12  66  	  END_DATE = SYSDATE,
14:35:12  67  	  UPDATED_BY = in_updated_by,
14:35:12  68  	  UPDATE_DATE = SYSDATE
14:35:12  69  	WHERE
14:35:12  70  	  GROUP_ACCOUNT_ID = in_group_account_id
14:35:12  71  	AND
14:35:12  72  	  SYSDATE < END_DATE;
14:35:12  73  EXCEPTION
14:35:12  74  	WHEN OTHERS THEN
14:35:12  75  	  PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
14:35:12  77  END EXPIRE_ALL_SHARES;
14:35:12  78  
14:35:12  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
14:35:12  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
14:35:12  81  	in_start	 IN  NUMBER,
14:35:12  82  	in_end		 IN  NUMBER,
14:35:12  83  	in_expired	 IN  NUMBER,
14:35:12  84  	out_result_set	 OUT SYS_REFCURSOR,
14:35:12  85  	out_shares_count OUT NUMBER
14:35:12  86  ) AS
14:35:12  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
14:35:12  88  range_diff NUMBER := 0;
14:35:12  89  upper_bond_diff NUMBER := 0;
14:35:12  90  l_start NUMBER := 0;
14:35:12  91  l_end   NUMBER := 0;
14:35:12  92  BEGIN
14:35:12  93  	--Normalize the end points [START]
14:35:12  94  	IF (in_start IS NULL OR in_start < 0) Then
14:35:12  95  	  l_start := 0;
14:35:12  96  	ELSE
14:35:12  97  	  l_start := in_start;
14:35:12  98  	END IF;
14:35:12  99  
14:35:12 100  	IF (in_end IS NULL) Then
14:35:12 101  	  l_end := 11;
14:35:12 102  	ELSE
14:35:12 103  	  l_end := in_end;
14:35:12 104  	END IF;
14:35:12 105  
14:35:12 106  	l_start := l_start + 1;
14:35:12 107  	l_end	:= l_end   + 1;
14:35:12 108  
14:35:12 109  	range_diff := l_end - l_start;
14:35:12 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
14:35:12 111  
14:35:12 112  	IF (upper_bond_diff > 0) Then
14:35:12 113  	  l_end := l_end - upper_bond_diff;
14:35:12 114  	END IF;
14:35:12 115  	--Normalize the end points [END]
14:35:12 116  
14:35:12 117  	BEGIN
14:35:12 118  	  SELECT
14:35:12 119  	    COUNT(1) INTO out_shares_count
14:35:12 120  	  FROM
14:35:12 121  	    GROUP_ACCOUNT ga,
14:35:12 122  	    SUBSCRIPTION_SHARE ss,
14:35:12 123  	    ACCOUNT a
14:35:12 124  	  WHERE
14:35:12 125  	    a.GROUP_ID		= in_group_id AND
14:35:12 126  	    a.Id		= ss.borrower_account_id And
14:35:12 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
14:35:12 128  	END;
14:35:12 129  
14:35:12 130  	IF in_expired > 0 THEN
14:35:12 131  	BEGIN
14:35:12 132  	    OPEN out_result_set FOR
14:35:12 133  	    SELECT
14:35:12 134  	      *
14:35:12 135  	    FROM
14:35:12 136  	      (SELECT rownum rnum, q.*
14:35:12 137  	       FROM
14:35:12 138  		(SELECT
14:35:12 139  		   ga.SUBSCRIPTION_ID,
14:35:12 140  		   ss.START_DATE,
14:35:12 141  		   ss.END_DATE,
14:35:12 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
14:35:12 143  		 FROM
14:35:12 144  		   GROUP_ACCOUNT ga,
14:35:12 145  		   SUBSCRIPTION_SHARE ss,
14:35:12 146  		   ACCOUNT a,
14:35:12 147  		   SUBSCRIPTION s,
14:35:12 148  		   ACCOUNT a2
14:35:12 149  		 WHERE
14:35:12 150  		   a.GROUP_ID	       = in_group_id AND
14:35:12 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
14:35:12 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
14:35:12 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
14:35:12 154  		   s.ACCOUNT_ID        = a2.ID
14:35:12 155  		) Q
14:35:12 156  	      WHERE rownum <= l_end)
14:35:12 157  	    WHERE rnum >= l_Start;
14:35:12 158  	END;
14:35:12 159  	ELSE
14:35:12 160  	BEGIN
14:35:12 161  	    OPEN out_result_set FOR
14:35:12 162  	    SELECT
14:35:12 163  	      *
14:35:12 164  	    FROM
14:35:12 165  	      (SELECT rownum rnum, q.*
14:35:12 166  	       FROM
14:35:12 167  		(SELECT
14:35:12 168  		   ga.SUBSCRIPTION_ID,
14:35:12 169  		   ss.START_DATE,
14:35:12 170  		   ss.END_DATE,
14:35:12 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
14:35:12 172  		 FROM
14:35:12 173  		   GROUP_ACCOUNT ga,
14:35:12 174  		   SUBSCRIPTION_SHARE ss,
14:35:12 175  		   ACCOUNT a,
14:35:12 176  		   SUBSCRIPTION s,
14:35:12 177  		   ACCOUNT a2
14:35:12 178  		 WHERE
14:35:12 179  		   a.GROUP_ID	       = in_group_id AND
14:35:12 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
14:35:12 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
14:35:12 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
14:35:12 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
14:35:12 184  		   s.ACCOUNT_ID        = a2.ID
14:35:12 185  		) Q
14:35:12 186  	      WHERE rownum <= l_end)
14:35:12 187  	    WHERE rnum >= l_start;
14:35:12 188  	  END;
14:35:12 189  	END IF;
14:35:12 190  EXCEPTION
14:35:12 191  WHEN NO_DATA_FOUND THEN
14:35:12 192  	NULL;
14:35:12 193  WHEN OTHERS THEN
14:35:12 194  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
14:35:12 196  END SUB_SHARE_BY_GROUP_ID;
14:35:12 197  
14:35:12 198  PROCEDURE IS_VALID_IP_ADDRESS (
14:35:12 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:12 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:35:12 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:35:12 202  	out_is_valid	    OUT NUMBER
14:35:12 203  ) AS
14:35:12 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
14:35:12 205  BEGIN
14:35:12 206  	SELECT
14:35:12 207  	  COUNT(1) INTO out_is_valid
14:35:12 208  	FROM
14:35:12 209  	  GROUP_ACCOUNT_IP_RANGE,
14:35:12 210  	  GROUP_ACCOUNT,
14:35:12 211  	  SUBSCRIPTION,
14:35:12 212  	  OFFER_CHAIN
14:35:12 213  	WHERE
14:35:12 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
14:35:12 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:35:12 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
14:35:12 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
14:35:12 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
14:35:12 219  	 (
14:35:12 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
14:35:12 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
14:35:12 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
14:35:12 223  	 ) AND
14:35:12 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE;
14:35:12 225  EXCEPTION
14:35:12 226  WHEN OTHERS THEN
14:35:12 227  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
14:35:12 229  END IS_VALID_IP_ADDRESS;
14:35:12 230  
14:35:12 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
14:35:12 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:12 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:35:12 234  	out_is_valid	    OUT NUMBER
14:35:12 235  ) AS
14:35:12 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
14:35:12 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
14:35:12 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
14:35:12 239  BEGIN
14:35:12 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
14:35:12 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
14:35:12 242  
14:35:12 243  	SELECT
14:35:12 244  	  COUNT(1) INTO out_is_valid
14:35:12 245  	FROM
14:35:12 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
14:35:12 247  	  GROUP_ACCOUNT ga,
14:35:12 248  	  SUBSCRIPTION s,
14:35:12 249  	  OFFER_CHAIN oc
14:35:12 250  	WHERE
14:35:12 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
14:35:12 252  	  ga.SUBSCRIPTION_ID = s.ID AND
14:35:12 253  	  s.OFFER_CHAIN_ID = oc.ID AND
14:35:12 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
14:35:12 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
14:35:12 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
14:35:12 257  	  gaed.IS_ACTIVE = 1;
14:35:12 258  EXCEPTION
14:35:12 259  WHEN OTHERS THEN
14:35:12 260  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
14:35:12 262  END IS_VALID_EMAIL_DOMAIN;
14:35:12 263  
14:35:12 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
14:35:12 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
14:35:12 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
14:35:12 267  	out_Result_Set	       OUT Sys_Refcursor
14:35:12 268  ) AS
14:35:12 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
14:35:12 270  BEGIN
14:35:12 271  	BEGIN
14:35:12 272  	   OPEN out_result_set FOR
14:35:12 273  	   SELECT
14:35:12 274  	      ss.ID,
14:35:12 275  	      ss.GROUP_ACCOUNT_ID,
14:35:12 276  	      ss.BORROWER_ACCOUNT_ID,
14:35:12 277  	      ss.IP_ADDRESS,
14:35:12 278  	      ss.START_DATE,
14:35:12 279  	      ss.END_DATE,
14:35:12 280  	      ss.CREATED_BY,
14:35:12 281  	      ss.CREATE_DATE,
14:35:12 282  	      ss.UPDATED_BY,
14:35:12 283  	      ss.UPDATE_DATE,
14:35:12 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
14:35:12 285  	   FROM
14:35:12 286  	     SUBSCRIPTION_SHARE ss,
14:35:12 287  	     ACCOUNT a
14:35:12 288  	   WHERE
14:35:12 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
14:35:12 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
14:35:12 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
14:35:12 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
14:35:12 293  	END;
14:35:12 294  EXCEPTION
14:35:12 295  WHEN OTHERS THEN
14:35:12 296  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
14:35:12 298  END GET_SUBSCRIPTION_SHARE;
14:35:12 299  
14:35:12 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
14:35:12 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
14:35:12 302  	out_result_set	   OUT SYS_REFCURSOR
14:35:12 303  ) As
14:35:12 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
14:35:12 305  BEGIN
14:35:12 306  OPEN out_result_set FOR
14:35:12 307  	SELECT
14:35:12 308  	  ID,
14:35:12 309  	  SUBSCRIPTION_ID,
14:35:12 310  	  GROUP_NAME,
14:35:12 311  	  FIRST_NAME,
14:35:12 312  	  LAST_NAME,
14:35:12 313  	  EMAIL,
14:35:12 314  	  PHONE,
14:35:12 315  	  ORGANIZATION_TYPE,
14:35:12 316  	  SEATS,
14:35:12 317  	  SEAT_TTL_IN_HOURS,
14:35:12 318  	  CREATE_DATE,
14:35:12 319  	  CREATED_BY,
14:35:12 320  	  UPDATE_DATE,
14:35:12 321  	  UPDATED_BY
14:35:12 322  	FROM
14:35:12 323  	  GROUP_ACCOUNT
14:35:12 324  	Where
14:35:12 325  	  Subscription_Id = in_subscription_id;
14:35:12 326  EXCEPTION
14:35:12 327  WHEN OTHERS THEN
14:35:12 328  	Procs_Common_V16.Throw_Exception(APP_EXCEPTION_CODES_V16.Unknown_Error,
14:35:12 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 330  
14:35:12 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
14:35:12 332  
14:35:12 333  PROCEDURE CREATE_GROUP_ACCOUNT (
14:35:12 334  	in_subscription_id	 IN NUMBER,
14:35:12 335  	in_group_name		 IN VARCHAR2,
14:35:12 336  	in_first_name		 IN VARCHAR2,
14:35:12 337  	in_last_name		 IN VARCHAR2,
14:35:12 338  	in_email		 IN VARCHAR2,
14:35:12 339  	in_phone		 IN VARCHAR2,
14:35:12 340  	in_organization_type	 IN VARCHAR2,
14:35:12 341  	in_seats		 IN NUMBER,
14:35:12 342  	in_seat_ttl_in_hours	 IN NUMBER,
14:35:12 343  	in_ip			 IN NUMBER,
14:35:12 344  	in_created_by		 IN VARCHAR2
14:35:12 345  ) AS
14:35:12 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
14:35:12 347  BEGIN
14:35:12 348  
14:35:12 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.CREATE_GROUP_ACCOUNT(
14:35:12 350  	  in_subscription_id => in_subscription_id,
14:35:12 351  	  in_group_name => in_group_name,
14:35:12 352  	  in_first_name => in_first_name,
14:35:12 353  	  in_last_name => in_last_name,
14:35:12 354  	  in_email => in_email,
14:35:12 355  	  in_phone => in_phone,
14:35:12 356  	  in_organization_type => in_organization_type,
14:35:12 357  	  in_seats => in_seats,
14:35:12 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
14:35:12 359  	  in_ip => in_ip,
14:35:12 360  	  in_created_by => in_created_by
14:35:12 361  	);
14:35:12 362  
14:35:12 363  END CREATE_GROUP_ACCOUNT;
14:35:12 364  
14:35:12 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
14:35:12 366  	in_group_account_id IN NUMBER,
14:35:12 367  	in_start	    IN NUMBER,
14:35:12 368  	in_end		    IN NUMBER,
14:35:12 369  	out_Result_Set	    OUT Sys_Refcursor
14:35:12 370  ) AS
14:35:12 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
14:35:12 372  range_diff NUMBER := 0;
14:35:12 373  upper_bond_diff NUMBER := 0;
14:35:12 374  l_start NUMBER := 0;
14:35:12 375  l_end   NUMBER := 0;
14:35:12 376  BEGIN
14:35:12 377  	-- Normalize the end points [START]
14:35:12 378  	IF (in_start IS NULL OR in_start < 0) Then
14:35:12 379  	  l_start := 0;
14:35:12 380  	ELSE
14:35:12 381  	  l_start := in_start;
14:35:12 382  	END IF;
14:35:12 383  
14:35:12 384  	IF (in_end IS NULL) Then
14:35:12 385  	  l_end := 11;
14:35:12 386  	ELSE
14:35:12 387  	  l_end := in_end;
14:35:12 388  	END IF;
14:35:12 389  
14:35:12 390  	l_start := l_start + 1;
14:35:12 391  	l_end	:= l_end   + 1;
14:35:12 392  
14:35:12 393  	range_diff := l_end - l_start;
14:35:12 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
14:35:12 395  
14:35:12 396  	IF (upper_bond_diff > 0) Then
14:35:12 397  	  l_end := l_end - upper_bond_diff;
14:35:12 398  	END IF;
14:35:12 399  	-- Normalize the end points [END]
14:35:12 400  
14:35:12 401  	BEGIN
14:35:12 402  	   OPEN out_result_set FOR
14:35:12 403  	   SELECT *
14:35:12 404  	   FROM
14:35:12 405  	     (SELECT rownum rnum, Q.*
14:35:12 406  	      FROM
14:35:12 407  	       (SELECT
14:35:12 408  		  ss.ID,
14:35:12 409  		  ss.GROUP_ACCOUNT_ID,
14:35:12 410  		  ss.BORROWER_ACCOUNT_ID,
14:35:12 411  		  ss.IP_ADDRESS,
14:35:12 412  		  ss.START_DATE,
14:35:12 413  		  ss.END_DATE,
14:35:12 414  		  ss.CREATED_BY,
14:35:12 415  		  ss.CREATE_DATE,
14:35:12 416  		  ss.UPDATED_BY,
14:35:12 417  		  ss.UPDATE_DATE,
14:35:12 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
14:35:12 419  		FROM
14:35:12 420  		  SUBSCRIPTION_SHARE ss,
14:35:12 421  		  ACCOUNT a,
14:35:12 422  		  LICENSE l,
14:35:12 423  		  GROUP_ACCOUNT ga
14:35:12 424  		WHERE
14:35:12 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
14:35:12 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
14:35:12 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
14:35:12 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
14:35:12 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
14:35:12 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
14:35:12 431  	      ) Q
14:35:12 432  	    WHERE rownum <= l_end)
14:35:12 433  	  WHERE rnum >= l_start;
14:35:12 434  	END;
14:35:12 435  EXCEPTION
14:35:12 436  WHEN OTHERS THEN
14:35:12 437  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
14:35:12 439  END GET_SUBSCRIPTION_SHARES;
14:35:12 440  
14:35:12 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
14:35:12 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:35:12 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:35:12 444  	out_result_set	      OUT SYS_REFCURSOR
14:35:12 445  ) AS
14:35:12 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
14:35:12 447  BEGIN
14:35:12 448  	BEGIN
14:35:12 449  	  OPEN out_result_set FOR
14:35:12 450  	  SELECT
14:35:12 451  	    ID,
14:35:12 452  	    SUBSCRIPTION_ID,
14:35:12 453  	    GROUP_NAME,
14:35:12 454  	    FIRST_NAME,
14:35:12 455  	    LAST_NAME,
14:35:12 456  	    EMAIL,
14:35:12 457  	    PHONE,
14:35:12 458  	    ORGANIZATION_TYPE,
14:35:12 459  	    SEATS,
14:35:12 460  	    SEAT_TTL_IN_HOURS,
14:35:12 461  	    CREATE_DATE,
14:35:12 462  	    CREATED_BY,
14:35:12 463  	    UPDATE_DATE,
14:35:12 464  	    UPDATED_BY
14:35:12 465  	  FROM
14:35:12 466  	    GROUP_ACCOUNT
14:35:12 467  	  WHERE
14:35:12 468  	    ID IN (
14:35:12 469  	      SELECT
14:35:12 470  		GROUP_ACCOUNT_ID
14:35:12 471  	      FROM
14:35:12 472  		GROUP_ACCOUNT_IP_RANGE,
14:35:12 473  		GROUP_ACCOUNT,
14:35:12 474  		SUBSCRIPTION,
14:35:12 475  		OFFER_CHAIN
14:35:12 476  	      WHERE
14:35:12 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
14:35:12 478  	      AND
14:35:12 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:35:12 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
14:35:12 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
14:35:12 482  	      AND
14:35:12 483  		(
14:35:12 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
14:35:12 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
14:35:12 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
14:35:12 487  		)
14:35:12 488  	      AND
14:35:12 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE
14:35:12 490  	    );
14:35:12 491  	  END;
14:35:12 492  EXCEPTION
14:35:12 493  WHEN OTHERS THEN
14:35:12 494  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 496  END GET_GROUP_ACCOUNT_BY_IP;
14:35:12 497  
14:35:12 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
14:35:12 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:35:12 500  	out_result_set	    OUT SYS_REFCURSOR
14:35:12 501  ) AS
14:35:12 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
14:35:12 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
14:35:12 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
14:35:12 505  BEGIN
14:35:12 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
14:35:12 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
14:35:12 508  	BEGIN
14:35:12 509  	  OPEN out_result_set FOR
14:35:12 510  	  SELECT
14:35:12 511  	    ID,
14:35:12 512  	    SUBSCRIPTION_ID,
14:35:12 513  	    GROUP_NAME,
14:35:12 514  	    FIRST_NAME,
14:35:12 515  	    LAST_NAME,
14:35:12 516  	    EMAIL,
14:35:12 517  	    PHONE,
14:35:12 518  	    ORGANIZATION_TYPE,
14:35:12 519  	    SEATS,
14:35:12 520  	    SEAT_TTL_IN_HOURS,
14:35:12 521  	    CREATE_DATE,
14:35:12 522  	    CREATED_BY,
14:35:12 523  	    UPDATE_DATE,
14:35:12 524  	    UPDATED_BY
14:35:12 525  	  FROM
14:35:12 526  	    GROUP_ACCOUNT
14:35:12 527  	  WHERE
14:35:12 528  	    ID IN (
14:35:12 529  	      SELECT
14:35:12 530  		GROUP_ACCOUNT_ID
14:35:12 531  	      FROM
14:35:12 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
14:35:12 533  		GROUP_ACCOUNT ga,
14:35:12 534  		SUBSCRIPTION s,
14:35:12 535  		OFFER_CHAIN oc
14:35:12 536  	      WHERE
14:35:12 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
14:35:12 538  		ga.SUBSCRIPTION_ID = s.ID AND
14:35:12 539  		s.OFFER_CHAIN_ID = oc.ID AND
14:35:12 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
14:35:12 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
14:35:12 542  		gaed.IS_ACTIVE = 1
14:35:12 543  	    );
14:35:12 544  	  END;
14:35:12 545  EXCEPTION
14:35:12 546  WHEN OTHERS THEN
14:35:12 547  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
14:35:12 550  
14:35:12 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
14:35:12 552  	in_group_account_id   IN NUMBER,
14:35:12 553  	in_start	      IN NUMBER,
14:35:12 554  	in_end		      IN NUMBER,
14:35:12 555  	in_status	      IN NUMBER,
14:35:12 556  	out_record_count      OUT NUMBER,
14:35:12 557  	out_result_set	      OUT SYS_REFCURSOR
14:35:12 558  ) AS
14:35:12 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
14:35:12 560  range_diff NUMBER := 0;
14:35:12 561  upper_bond_diff NUMBER := 0;
14:35:12 562  l_start NUMBER := 0;
14:35:12 563  l_end   NUMBER := 0;
14:35:12 564  BEGIN
14:35:12 565  	--Normalize the end points [START]
14:35:12 566  	IF (in_start IS NULL OR in_start < 0) Then
14:35:12 567  	  l_start := 0;
14:35:12 568  	ELSE
14:35:12 569  	  l_start := in_start;
14:35:12 570  	END IF;
14:35:12 571  
14:35:12 572  	IF (in_end IS NULL) Then
14:35:12 573  	  l_end := 11;
14:35:12 574  	ELSE
14:35:12 575  	  l_end := in_end;
14:35:12 576  	END IF;
14:35:12 577  
14:35:12 578  	l_start := l_start + 1;
14:35:12 579  	l_end	:= l_end   + 1;
14:35:12 580  
14:35:12 581  	range_diff := l_end - l_start;
14:35:12 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
14:35:12 583  
14:35:12 584  	IF (upper_bond_diff > 0) Then
14:35:12 585  	  l_end := l_end - upper_bond_diff;
14:35:12 586  	END IF;
14:35:12 587  	--Normalize the end points [END]
14:35:12 588  
14:35:12 589  	--Total count of records [START]
14:35:12 590  	SELECT
14:35:12 591  	  COUNT(1) INTO out_record_count
14:35:12 592  	FROM
14:35:12 593  	  GROUP_ACCOUNT_IP_RANGE
14:35:12 594  	WHERE
14:35:12 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
14:35:12 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
14:35:12 597  	--Total count of records [END]
14:35:12 598  
14:35:12 599  	OPEN out_result_set FOR
14:35:12 600  	SELECT
14:35:12 601  	  *
14:35:12 602  	FROM
14:35:12 603  	  (SELECT rownum rnum, q.*
14:35:12 604  	   FROM
14:35:12 605  	    (SELECT
14:35:12 606  	       ID,
14:35:12 607  	       GROUP_ACCOUNT_ID,
14:35:12 608  	       MINIMUM_IP_STRING,
14:35:12 609  	       MAXIMUM_IP_STRING,
14:35:12 610  	       GROUP_ACC_IP_RNG_STATUS_ID
14:35:12 611  	     FROM
14:35:12 612  	       GROUP_ACCOUNT_IP_RANGE
14:35:12 613  	     WHERE
14:35:12 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
14:35:12 615  	       (in_status IS NULL OR
14:35:12 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
14:35:12 617  	    ) Q
14:35:12 618  	  WHERE rownum <= l_end)
14:35:12 619  	WHERE rnum >= l_Start;
14:35:12 620  EXCEPTION
14:35:12 621  WHEN OTHERS THEN
14:35:12 622  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
14:35:12 624  END GET_GROUP_ACCOUNT_IP_RANGES;
14:35:12 625  
14:35:12 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
14:35:12 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:12 628  	in_start	      IN NUMBER,
14:35:12 629  	in_end		      IN NUMBER,
14:35:12 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
14:35:12 631  	out_record_count      OUT NUMBER,
14:35:12 632  	out_result_set	      OUT SYS_REFCURSOR
14:35:12 633  ) AS
14:35:12 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
14:35:12 635  range_diff NUMBER := 0;
14:35:12 636  upper_bond_diff NUMBER := 0;
14:35:12 637  l_start NUMBER := 0;
14:35:12 638  l_end   NUMBER := 0;
14:35:12 639  BEGIN
14:35:12 640  	--Normalize the end points [START]
14:35:12 641  	IF (in_start IS NULL OR in_start < 0) Then
14:35:12 642  	  l_start := 0;
14:35:12 643  	ELSE
14:35:12 644  	  l_start := in_start;
14:35:12 645  	END IF;
14:35:12 646  
14:35:12 647  	IF (in_end IS NULL) Then
14:35:12 648  	  l_end := 11;
14:35:12 649  	ELSE
14:35:12 650  	  l_end := in_end;
14:35:12 651  	END IF;
14:35:12 652  
14:35:12 653  	l_start := l_start + 1;
14:35:12 654  	l_end	:= l_end   + 1;
14:35:12 655  
14:35:12 656  	range_diff := l_end - l_start;
14:35:12 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V16.MAX_RETURN_COUNT;
14:35:12 658  
14:35:12 659  	IF (upper_bond_diff > 0) Then
14:35:12 660  	  l_end := l_end - upper_bond_diff;
14:35:12 661  	END IF;
14:35:12 662  	--Normalize the end points [END]
14:35:12 663  
14:35:12 664  	--Total count of records [START]
14:35:12 665  	SELECT
14:35:12 666  	  COUNT(1) INTO out_record_count
14:35:12 667  	FROM
14:35:12 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
14:35:12 669  	WHERE
14:35:12 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
14:35:12 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
14:35:12 672  	--Total count of records [END]
14:35:12 673  
14:35:12 674  	OPEN out_result_set FOR
14:35:12 675  	SELECT
14:35:12 676  	  *
14:35:12 677  	FROM
14:35:12 678  	  (SELECT rownum rnum, q.*
14:35:12 679  	   FROM
14:35:12 680  	    (SELECT
14:35:12 681  	      ID,
14:35:12 682  	      GROUP_ACCOUNT_ID,
14:35:12 683  	      EMAIL_DOMAIN,
14:35:12 684  	      IS_ACTIVE
14:35:12 685  	     FROM
14:35:12 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
14:35:12 687  	     WHERE
14:35:12 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
14:35:12 689  	       (in_status IS NULL OR
14:35:12 690  		IS_ACTIVE = in_status)
14:35:12 691  	    ) Q
14:35:12 692  	  WHERE rownum <= l_end)
14:35:12 693  	WHERE rnum >= l_Start;
14:35:12 694  
14:35:12 695  EXCEPTION
14:35:12 696  WHEN OTHERS THEN
14:35:12 697  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
14:35:12 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
14:35:12 700  
14:35:12 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
14:35:12 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:12 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:12 704  ) AS
14:35:12 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
14:35:12 706  BEGIN
14:35:12 707  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
14:35:12 708  	    in_group_account_id => in_group_account_id,
14:35:12 709  	    in_updated_by => in_updated_by
14:35:12 710  	  );
14:35:12 711  EXCEPTION
14:35:12 712  WHEN OTHERS THEN
14:35:12 713  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
14:35:12 716  
14:35:12 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
14:35:12 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:35:12 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:35:12 720  ) AS
14:35:12 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
14:35:12 722  BEGIN
14:35:12 723  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_EMAIL_DOMAIN_BY_ID(
14:35:12 724  	    in_id => in_id,
14:35:12 725  	    in_updated_by => in_updated_by
14:35:12 726  	  );
14:35:12 727  EXCEPTION
14:35:12 728  WHEN OTHERS THEN
14:35:12 729  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
14:35:12 732  
14:35:12 733  PROCEDURE ADD_EMAIL_DOMAIN (
14:35:12 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:35:12 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:35:12 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
14:35:12 737  ) AS
14:35:12 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
14:35:12 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
14:35:12 740  var_is_dupe NUMBER(1);
14:35:12 741  var_group_account_count NUMBER := 0;
14:35:12 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
14:35:12 743  NOT_GL EXCEPTION;
14:35:12 744  DUPE EXCEPTION;
14:35:12 745  BEGIN
14:35:12 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
14:35:12 747  	  FROM
14:35:12 748  	    GROUP_ACCOUNT,
14:35:12 749  	    SUBSCRIPTION,
14:35:12 750  	    OFFER_CHAIN
14:35:12 751  	  WHERE
14:35:12 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
14:35:12 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:35:12 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 755  	  ;
14:35:12 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
14:35:12 757  	    RAISE NOT_GL;
14:35:12 758  	  END IF;
14:35:12 759  
14:35:12 760  	  --check if email domain already exists
14:35:12 761  	  SELECT count(1) into var_group_account_count
14:35:12 762  	  FROM
14:35:12 763  	      GROUP_ACCOUNT_EMAIL_DOMAIN
14:35:12 764  	  WHERE
14:35:12 765  	      GROUP_ACCOUNT_ID= in_group_account_id AND
14:35:12 766  	      EMAIL_DOMAIN = in_email_domain
14:35:12 767  	  ;
14:35:12 768  
14:35:12 769  	  IF(var_group_account_count > 0) THEN
14:35:12 770  	      SELECT ID into var_id
14:35:12 771  	      FROM
14:35:12 772  		  GROUP_ACCOUNT_EMAIL_DOMAIN
14:35:12 773  	      WHERE
14:35:12 774  		  GROUP_ACCOUNT_ID= in_group_account_id AND
14:35:12 775  		  EMAIL_DOMAIN = in_email_domain AND
14:35:12 776  		  rownum <= 1;
14:35:12 777  	      PROCS_GROUP_ACCOUNT_CRU_V16.ENABLE_EMAIL_DOMAIN_BY_ID(
14:35:12 778  		  in_id => var_id,
14:35:12 779  		  in_updated_by => in_created_by
14:35:12 780  		  );
14:35:12 781  	  ELSE
14:35:12 782  	      PROCS_GROUP_ACCOUNT_CRU_V16.ADD_EMAIL_DOMAIN(
14:35:12 783  		  in_group_account_id => in_group_account_id,
14:35:12 784  		  in_email_domain => in_email_domain,
14:35:12 785  		      in_is_active => GLOBAL_STATUSES_V16.GROUP_ACC_EMAIL_DOMAIN_ACT,
14:35:12 786  		  in_created_by => in_created_by
14:35:12 787  	      );
14:35:12 788  	  END IF;
14:35:12 789  
14:35:12 790  EXCEPTION
14:35:12 791  WHEN NOT_GL THEN
14:35:12 792  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 793  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
14:35:12 794  WHEN OTHERS THEN
14:35:12 795  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 796  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 797  END ADD_EMAIL_DOMAIN;
14:35:12 798  
14:35:12 799  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
14:35:12 800  	in_group_account_id    IN NUMBER,
14:35:12 801  	in_borrower_account_id IN NUMBER,
14:35:12 802  	in_ip_address	       IN VARCHAR2,
14:35:12 803  	in_email_domain        IN VARCHAR2,
14:35:12 804  	in_created_by	       IN VARCHAR2
14:35:12 805  ) AS
14:35:12 806  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
14:35:12 807  ga_ttl_in_hours NUMBER := NULL;
14:35:12 808  start_date DATE := NULL;
14:35:12 809  end_date DATE := NULL;
14:35:12 810  BEGIN
14:35:12 811  	start_date := sysdate;
14:35:12 812  	end_date   := GLOBAL_CONSTANTS_V16.MAX_DATE;
14:35:12 813  
14:35:12 814  	BEGIN
14:35:12 815  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
14:35:12 816  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
14:35:12 817  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
14:35:12 818  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:35:12 819  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
14:35:12 820  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
14:35:12 821  	EXCEPTION
14:35:12 822  	  WHEN no_data_found THEN
14:35:12 823  	    ga_ttl_in_hours := NULL;
14:35:12 824  	END;
14:35:12 825  
14:35:12 826  	IF (ga_ttl_in_hours IS NOT NULL) THEN
14:35:12 827  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
14:35:12 828  	END IF;
14:35:12 829  
14:35:12 830  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16.CREATE_SUBSCRIPTION_SHARE(
14:35:12 831  	  in_group_account_id => in_group_account_id,
14:35:12 832  	  in_borrower_account_id => in_borrower_account_id,
14:35:12 833  	  in_ip_address => in_ip_address,
14:35:12 834  	  in_email_domain => in_email_domain,
14:35:12 835  	  in_start_date => start_date,
14:35:12 836  	  in_end_date => end_date,
14:35:12 837  	  in_created_by => in_created_by
14:35:12 838  	);
14:35:12 839  END CREATE_SUBSCRIPTION_SHARE;
14:35:12 840  
14:35:12 841  
14:35:12 842  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
14:35:12 843  	in_group_account_id   IN NUMBER,
14:35:12 844  	out_occupied_seats   OUT NUMBER
14:35:12 845  ) AS
14:35:12 846  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
14:35:12 847  BEGIN
14:35:12 848  	SELECT
14:35:12 849  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
14:35:12 850  	FROM dual;
14:35:12 851  EXCEPTION
14:35:12 852  WHEN OTHERS THEN
14:35:12 853  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 854  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 855  END GET_NUM_OCCUPIED_GROUP_SEATS;
14:35:12 856  
14:35:12 857  
14:35:12 858  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
14:35:12 859  	in_group_account_id   IN NUMBER
14:35:12 860  ) RETURN NUMBER IS
14:35:12 861  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
14:35:12 862  num_seats NUMBER;
14:35:12 863  BEGIN
14:35:12 864  	SELECT
14:35:12 865  	  COUNT(1) INTO num_seats
14:35:12 866  	FROM
14:35:12 867  	  SUBSCRIPTION_SHARE
14:35:12 868  	WHERE
14:35:12 869  	  GROUP_ACCOUNT_ID = in_group_account_id AND
14:35:12 870  	  SYSDATE BETWEEN START_DATE AND END_DATE;
14:35:12 871  	RETURN num_seats;
14:35:12 872  EXCEPTION
14:35:12 873  WHEN OTHERS THEN
14:35:12 874  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 875  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 876  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
14:35:12 877  
14:35:12 878  -- *********************************************************************
14:35:12 879  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
14:35:12 880  -- *********************************************************************
14:35:12 881  -- I'm debating if this should be in a different package, but right now
14:35:12 882  -- I'm too lazy to move this else where.
14:35:12 883  -- *********************************************************************
14:35:12 884  
14:35:12 885  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
14:35:12 886  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:12 887  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:35:12 888  ) AS
14:35:12 889  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
14:35:12 890  BEGIN
14:35:12 891  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_IP_RANGES_BY_GA_ID(
14:35:12 892  	    in_group_account_id => in_group_account_id,
14:35:12 893  	    in_updated_by => in_updated_by
14:35:12 894  	  );
14:35:12 895  EXCEPTION
14:35:12 896  WHEN OTHERS THEN
14:35:12 897  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 899  END DISABLE_IP_RANGES_BY_GA_ID;
14:35:12 900  
14:35:12 901  PROCEDURE DISABLE_IP_RANGE_BY_ID (
14:35:12 902  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
14:35:12 903  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:35:12 904  ) AS
14:35:12 905  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
14:35:12 906  BEGIN
14:35:12 907  	  PROCS_GROUP_ACCOUNT_CRU_V16.DISABLE_IP_RANGE_BY_ID(
14:35:12 908  	    in_id => in_id,
14:35:12 909  	    in_updated_by => in_updated_by
14:35:12 910  	  );
14:35:12 911  EXCEPTION
14:35:12 912  WHEN OTHERS THEN
14:35:12 913  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 915  END DISABLE_IP_RANGE_BY_ID;
14:35:12 916  
14:35:12 917  PROCEDURE ADD_IP_RANGE (
14:35:12 918  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:35:12 919  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
14:35:12 920  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:35:12 921  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:35:12 922  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
14:35:12 923  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
14:35:12 924  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
14:35:12 925  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
14:35:12 926  ) AS
14:35:12 927  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
14:35:12 928  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
14:35:12 929  var_is_dupe NUMBER(1);
14:35:12 930  NOT_GL EXCEPTION;
14:35:12 931  DUPE EXCEPTION;
14:35:12 932  BEGIN
14:35:12 933  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
14:35:12 934  	  FROM
14:35:12 935  	    GROUP_ACCOUNT,
14:35:12 936  	    SUBSCRIPTION,
14:35:12 937  	    OFFER_CHAIN
14:35:12 938  	  WHERE
14:35:12 939  	    GROUP_ACCOUNT.ID = in_group_account_id AND
14:35:12 940  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:35:12 941  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 942  	  ;
14:35:12 943  	  IF(var_ga_type != 'GL') THEN
14:35:12 944  	    RAISE NOT_GL;
14:35:12 945  	  END IF;
14:35:12 946  
14:35:12 947  	  PROCS_GROUP_ACCOUNT_CRU_V16.ADD_IP_RANGE(
14:35:12 948  	    in_group_account_id => in_group_account_id,
14:35:12 949  	    in_minimum_ip_string => in_minimum_ip_string,
14:35:12 950  	    in_minimum_ip_low => in_minimum_ip_low,
14:35:12 951  	    in_minimum_ip_high => in_minimum_ip_high,
14:35:12 952  	    in_maximum_ip_string => in_maximum_ip_string,
14:35:12 953  	    in_maximum_ip_low => in_maximum_ip_low,
14:35:12 954  	    in_maximum_ip_high => in_maximum_ip_high,
14:35:12 955  	    in_created_by => in_created_by
14:35:12 956  	  );
14:35:12 957  
14:35:12 958  	  -- Check for overlapping ip address range after insert.  Note that if another
14:35:12 959  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
14:35:12 960  	  SELECT count(1) into var_is_dupe
14:35:12 961  	  FROM
14:35:12 962  	    GROUP_ACCOUNT_IP_RANGE
14:35:12 963  	  WHERE
14:35:12 964  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V16.GROUP_ACC_IP_RNG_ACTIVE AND
14:35:12 965  		((
14:35:12 966  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
14:35:12 967  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
14:35:12 968  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
14:35:12 969  		) OR
14:35:12 970  
14:35:12 971  		(
14:35:12 972  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
14:35:12 973  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
14:35:12 974  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
14:35:12 975  		)) AND
14:35:12 976  	    ROWNUM < 3;
14:35:12 977  
14:35:12 978  	  If(var_is_dupe > 1) THEN
14:35:12 979  	    RAISE DUPE;
14:35:12 980  	  END IF;
14:35:12 981  EXCEPTION
14:35:12 982  WHEN NOT_GL THEN
14:35:12 983  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 984  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
14:35:12 985  WHEN DUPE THEN
14:35:12 986  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 987  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
14:35:12 988  WHEN OTHERS THEN
14:35:12 989  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 990  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 991  END ADD_IP_RANGE;
14:35:12 992  
14:35:12 993  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
14:35:12 994  	in_group_account_id IN NUMBER,
14:35:12 995  	out_group_id OUT NUMBER
14:35:12 996  ) AS
14:35:12 997  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
14:35:12 998  BEGIN
14:35:12 999  	SELECT
14:35:12 1000  	   a.group_id into out_group_id
14:35:12 1001  	 FROM
14:35:12 1002  	   account a,
14:35:12 1003  	   subscription s,
14:35:12 1004  	   group_account ga
14:35:12 1005  	 WHERE
14:35:12 1006  	   a.id = s.account_id and
14:35:12 1007  	   s.id = ga.subscription_id and
14:35:12 1008  	   ga.id = in_group_account_id and
14:35:12 1009  	   rownum < 2
14:35:12 1010  	 ;
14:35:12 1011  EXCEPTION
14:35:12 1012  WHEN NO_DATA_FOUND THEN
14:35:12 1013  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1014  	   SPROC_NAME, 'Bad group_account_id');
14:35:12 1015  WHEN OTHERS THEN
14:35:12 1016  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1017  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1018  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
14:35:12 1019  
14:35:12 1020  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
14:35:12 1021  	 in_group_account_ip_range_id IN NUMBER,
14:35:12 1022  	 out_group_id OUT NUMBER
14:35:12 1023  ) AS
14:35:12 1024  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
14:35:12 1025  BEGIN
14:35:12 1026  	 SELECT
14:35:12 1027  	   a.group_id into out_group_id
14:35:12 1028  	 FROM
14:35:12 1029  	   account a,
14:35:12 1030  	   subscription s,
14:35:12 1031  	   group_account ga,
14:35:12 1032  	   group_account_ip_range ir
14:35:12 1033  	 WHERE
14:35:12 1034  	   a.id = s.account_id and
14:35:12 1035  	   s.id = ga.subscription_id and
14:35:12 1036  	   ga.id = ir.group_account_id and
14:35:12 1037  	   ir.id = in_group_account_ip_range_id and
14:35:12 1038  	   rownum < 2
14:35:12 1039  	 ;
14:35:12 1040  EXCEPTION
14:35:12 1041  WHEN NO_DATA_FOUND THEN
14:35:12 1042  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1043  	   SPROC_NAME, 'Bad group_account_ip_range_id');
14:35:12 1044  WHEN OTHERS THEN
14:35:12 1045  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1046  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1047  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
14:35:12 1048  
14:35:12 1049  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
14:35:12 1050  	 in_group_account_email_dom_id IN NUMBER,
14:35:12 1051  	 out_group_id OUT NUMBER
14:35:12 1052  ) AS
14:35:12 1053  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
14:35:12 1054  BEGIN
14:35:12 1055  	 SELECT
14:35:12 1056  	   a.group_id into out_group_id
14:35:12 1057  	 FROM
14:35:12 1058  	   account a,
14:35:12 1059  	   subscription s,
14:35:12 1060  	   group_account ga,
14:35:12 1061  	   group_account_email_domain ir
14:35:12 1062  	 WHERE
14:35:12 1063  	   a.id = s.account_id and
14:35:12 1064  	   s.id = ga.subscription_id and
14:35:12 1065  	   ga.id = ir.group_account_id and
14:35:12 1066  	   ir.id = in_group_account_email_dom_id and
14:35:12 1067  	   rownum < 2
14:35:12 1068  	 ;
14:35:12 1069  EXCEPTION
14:35:12 1070  WHEN NO_DATA_FOUND THEN
14:35:12 1071  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1072  	   SPROC_NAME, 'Bad group_account_ip_range_id');
14:35:12 1073  WHEN OTHERS THEN
14:35:12 1074  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1075  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1076  END GET_GRP_ID_BY_EMAIL_DOM_ID;
14:35:12 1077  
14:35:12 1078  PROCEDURE UPDATE_GROUP_ACCOUNT (
14:35:12 1079  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
14:35:12 1080  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
14:35:12 1081  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
14:35:12 1082  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
14:35:12 1083  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
14:35:12 1084  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
14:35:12 1085  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:35:12 1086  ) AS
14:35:12 1087  BEGIN
14:35:12 1088  	 PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_GROUP_ACCOUNT(
14:35:12 1089  	   in_group_account_id => in_group_account_id,
14:35:12 1090  	   in_group_name => in_group_name,
14:35:12 1091  	   in_first_name => in_first_name,
14:35:12 1092  	   in_last_name => in_last_name,
14:35:12 1093  	   in_email => in_email,
14:35:12 1094  	   in_phone => in_phone,
14:35:12 1095  	   in_updated_by => in_updated_by
14:35:12 1096  	 );
14:35:12 1097  END UPDATE_GROUP_ACCOUNT;
14:35:12 1098  
14:35:12 1099  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
14:35:12 1100  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
14:35:12 1101  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
14:35:12 1102  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:35:12 1103  ) AS
14:35:12 1104  BEGIN
14:35:12 1105  	 PROCS_GROUP_ACCOUNT_CRU_V16.UPDATE_GROUP_ACCOUNT_SEATS(
14:35:12 1106  	   in_group_account_id => in_group_account_id,
14:35:12 1107  	   in_seats => in_seats,
14:35:12 1108  	   in_updated_by => in_updated_by
14:35:12 1109  	 );
14:35:12 1110  END UPDATE_GROUP_ACCOUNT_SEATS;
14:35:12 1111  
14:35:12 1112  END PROCS_GROUP_ACCOUNT_V16;
14:35:12 1113  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE TEST_CLEAR_ALL IS
14:35:12   4  BEGIN
14:35:12   5  	DELETE FROM TAX_ADJUSTMENT;
14:35:12   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
14:35:12   7  	DELETE FROM INVOICE_ADJUSTMENT;
14:35:12   8  	DELETE FROM LICENSE;
14:35:12   9  	DELETE FROM OFFER_OFFER_CHAIN;
14:35:12  10  	delete from offer_product_offering;
14:35:12  11  	delete from tax;
14:35:12  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
14:35:12  13  	delete from discount_line_item; -- ?
14:35:12  14  	delete from discount; -- ?
14:35:12  15  	DELETE FROM LINE_ITEM;
14:35:12  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
14:35:12  17  	DELETE FROM PRODUCT_OFFERING;
14:35:12  18  	DELETE FROM PRODUCT;
14:35:12  19  	DELETE FROM INVOICE_NOTE;
14:35:12  20  	DELETE FROM GIFT_CERTIFICATE;
14:35:12  21  	DELETE FROM OFFER;
14:35:12  22  	DELETE FROM OFFER_CHAIN_META_DATA;
14:35:12  23  	DELETE FROM SUBSCRIPTION_NOTE;
14:35:12  24  	DELETE FROM SUBSCRIPTION_META_DATA;
14:35:12  25  	DELETE FROM SUBSCRIPTION;
14:35:12  26  	DELETE FROM CREDIT_CARD;
14:35:12  27  	DELETE FROM FLAGGED_ACCOUNTS;
14:35:12  28  	DELETE FROM ACCOUNT_NOTE;
14:35:12  29  	DELETE FROM ACCOUNT_LOCK;
14:35:12  30  	DELETE FROM ACCOUNT;
14:35:12  31  	DELETE FROM CHARGE;
14:35:12  32  	DELETE FROM TRANSACTION_ATTEMPT;
14:35:12  33  	DELETE FROM CHARGEBACK;
14:35:12  34  	DELETE FROM TRANSACTION;
14:35:12  35  	DELETE FROM INVOICE_NOTE;
14:35:12  36  	DELETE FROM INVOICE;
14:35:12  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
14:35:12  38  	DELETE FROM OFFER_CHAIN;
14:35:12  39  END TEST_CLEAR_ALL;
14:35:12  40  
14:35:12  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
14:35:12  42  BEGIN
14:35:12  43  	DELETE FROM OFFER_OFFER_CHAIN;
14:35:12  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
14:35:12  45  	DELETE FROM TAX;
14:35:12  46  	DELETE FROM PRODUCT_OFFERING;
14:35:12  47  	DELETE FROM PRODUCT;
14:35:12  48  	DELETE FROM OFFER;
14:35:12  49  	DELETE FROM OFFER_CHAIN_META_DATA;
14:35:12  50  	DELETE FROM OFFER_CHAIN;
14:35:12  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
14:35:12  52  END;
14:35:12  53  
14:35:12  54  /******************************************/
14:35:12  55  
14:35:12  56  PROCEDURE TEST_GET_ACCOUNT (
14:35:12  57  	in_group_id	IN NUMBER,
14:35:12  58  	out_result_set	OUT SYS_REFCURSOR
14:35:12  59  ) AS
14:35:12  60  BEGIN
14:35:12  61  
14:35:12  62  	OPEN out_result_set FOR
14:35:12  63  	SELECT *
14:35:12  64  	FROM
14:35:12  65  	  ACCOUNT
14:35:12  66  	WHERE
14:35:12  67  	  ACCOUNT.GROUP_ID = in_group_id;
14:35:12  68  
14:35:12  69  END TEST_GET_ACCOUNT;
14:35:12  70  
14:35:12  71  /*******************************************/
14:35:12  72  
14:35:12  73  PROCEDURE TEST_GET_SUBSCRIPTION (
14:35:12  74  	in_subscription_id IN NUMBER,
14:35:12  75  	out_result_set	   OUT SYS_REFCURSOR
14:35:12  76  ) AS
14:35:12  77  BEGIN
14:35:12  78  	OPEN out_result_set FOR
14:35:12  79  	SELECT *
14:35:12  80  	FROM
14:35:12  81  	  SUBSCRIPTION
14:35:12  82  	WHERE
14:35:12  83  	  SUBSCRIPTION.ID = in_subscription_id;
14:35:12  84  
14:35:12  85  END TEST_GET_SUBSCRIPTION;
14:35:12  86  
14:35:12  87  /***************************************************/
14:35:12  88  
14:35:12  89  PROCEDURE TEST_DELETE_INVOICE (
14:35:12  90  	in_invoice_id IN NUMBER
14:35:12  91  ) AS
14:35:12  92  var_line_item_id_set SYS_REFCURSOR;
14:35:12  93  var_line_item_id	   NUMBER;
14:35:12  94  
14:35:12  95  var_charge_id_set  SYS_REFCURSOR;
14:35:12  96  var_charge_id	 NUMBER;
14:35:12  97  var_transaction_id NUMBER;
14:35:12  98  BEGIN
14:35:12  99  	-- GET ACCOUNT'S LINE_ITEMS
14:35:12 100  	OPEN var_line_item_id_set FOR
14:35:12 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
14:35:12 102  	LOOP
14:35:12 103  	  FETCH var_line_item_id_set into var_line_item_id;
14:35:12 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
14:35:12 105  
14:35:12 106  	  -- DELETE ADJUSTMENTS
14:35:12 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
14:35:12 108  	  LOOP
14:35:12 109  
14:35:12 110  	    -- DELETE DISCOUNT ADJUSTMENTS
14:35:12 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
14:35:12 112  
14:35:12 113  	    -- DELETE TAX ADJUSTMENTS
14:35:12 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
14:35:12 115  	  END LOOP;
14:35:12 116  
14:35:12 117  	  -- DELETE LINE ITEM ADJUSTMENTS
14:35:12 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
14:35:12 119  
14:35:12 120  	  -- DELETE DISCOUNT_LINE_ITEM
14:35:12 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
14:35:12 122  
14:35:12 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
14:35:12 124  
14:35:12 125  	  -- DELETE LINE ITEM
14:35:12 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
14:35:12 127  
14:35:12 128  	END LOOP;
14:35:12 129  
14:35:12 130  	-- DELETE INVOICE ADJUSTMENTS
14:35:12 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
14:35:12 132  
14:35:12 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
14:35:12 134  	OPEN var_charge_id_set FOR
14:35:12 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
14:35:12 136  	LOOP
14:35:12 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
14:35:12 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
14:35:12 139  	  -- DELETE CHARGEBACK
14:35:12 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
14:35:12 141  
14:35:12 142  	  -- DELETE TRANSACTION ATTEMP
14:35:12 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
14:35:12 144  
14:35:12 145  	  -- DELETE CHARGE
14:35:12 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
14:35:12 147  
14:35:12 148  	  -- DELETE TRANSACTION
14:35:12 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
14:35:12 150  	END LOOP;
14:35:12 151  
14:35:12 152  	-- DELETE INVOICE NOTES
14:35:12 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
14:35:12 154  
14:35:12 155  	-- DELETE INVOICE
14:35:12 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
14:35:12 157  END;
14:35:12 158  
14:35:12 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
14:35:12 160  	in_group_id IN NUMBER
14:35:12 161  ) AS
14:35:12 162  -- VARIABLES
14:35:12 163  var_account_id NUMBER;
14:35:12 164  
14:35:12 165  -- CURSORS
14:35:12 166  var_subscription_id_set SYS_REFCURSOR;
14:35:12 167  var_subscription_id     NUMBER;
14:35:12 168  
14:35:12 169  var_license_id_set SYS_REFCURSOR;
14:35:12 170  var_license_id	 NUMBER;
14:35:12 171  var_invoice_id	 NUMBER;
14:35:12 172  
14:35:12 173  var_gift_certificate_id_set SYS_REFCURSOR;
14:35:12 174  var_gift_certificate_id	  NUMBER;
14:35:12 175  var_gc_purchase_invoice_id  NUMBER;
14:35:12 176  BEGIN
14:35:12 177  
14:35:12 178   /*FOR f_account in (
14:35:12 179  	  select id from account where group_id = in_group_id
14:35:12 180  	)
14:35:12 181  	loop
14:35:12 182  
14:35:12 183  	  -- delete account
14:35:12 184  	  delete from account where id = f_account.id;
14:35:12 185  
14:35:12 186  	end loop;*/
14:35:12 187  
14:35:12 188  	BEGIN
14:35:12 189  	  SELECT
14:35:12 190  	    ACCOUNT.ID into var_account_id
14:35:12 191  	  FROM
14:35:12 192  	    ACCOUNT
14:35:12 193  	  WHERE
14:35:12 194  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12 195  	  EXCEPTION
14:35:12 196  	    WHEN NO_DATA_FOUND THEN
14:35:12 197  	      -- Nothing to do
14:35:12 198  	      RETURN;
14:35:12 199  	END;
14:35:12 200  
14:35:12 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
14:35:12 202  	OPEN var_subscription_id_set FOR
14:35:12 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
14:35:12 204  	LOOP
14:35:12 205  	  FETCH var_subscription_id_set into var_subscription_id;
14:35:12 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
14:35:12 207  
14:35:12 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
14:35:12 209  	  OPEN var_license_id_set FOR
14:35:12 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
14:35:12 211  	  LOOP
14:35:12 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
14:35:12 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
14:35:12 214  
14:35:12 215  
14:35:12 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
14:35:12 217  	    OPEN var_gift_certificate_id_set FOR
14:35:12 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
14:35:12 219  	    LOOP
14:35:12 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
14:35:12 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
14:35:12 222  
14:35:12 223  	      -- DELETE GIFT_CERTIFICATE
14:35:12 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
14:35:12 225  
14:35:12 226  	      -- DELETE LICENSE
14:35:12 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
14:35:12 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
14:35:12 229  	      END IF;
14:35:12 230  
14:35:12 231  	    END LOOP;
14:35:12 232  
14:35:12 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
14:35:12 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
14:35:12 235  
14:35:12 236  	    -- DELETE LICENSE
14:35:12 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
14:35:12 238  
14:35:12 239  	    -- DELETE INVOICE
14:35:12 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
14:35:12 241  	      TEST_DELETE_INVOICE(var_invoice_id);
14:35:12 242  	    END IF;
14:35:12 243  	  END LOOP;
14:35:12 244  
14:35:12 245  	  -- DELETE SUBSCRIPTION_NOTE
14:35:12 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
14:35:12 247  
14:35:12 248  	  -- DELETE SUBSCRIPTION META_DATA
14:35:12 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
14:35:12 250  
14:35:12 251  	  -- DELETE SUBSCRIPTION
14:35:12 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
14:35:12 253  	END LOOP;
14:35:12 254  
14:35:12 255  	-- DELETE CREDIT_CARDS
14:35:12 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
14:35:12 257  
14:35:12 258  	-- DELETE PAYPAL
14:35:12 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
14:35:12 260  
14:35:12 261  	-- DELETE FLAGS
14:35:12 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
14:35:12 263  
14:35:12 264  	-- DELETE ACCOUNT NOTES
14:35:12 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
14:35:12 266  
14:35:12 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
14:35:12 268  	OPEN var_gift_certificate_id_set FOR
14:35:12 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
14:35:12 270  	LOOP
14:35:12 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
14:35:12 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
14:35:12 273  
14:35:12 274  	  -- DELETE GIFT CERTIFICATE
14:35:12 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
14:35:12 276  
14:35:12 277  	  -- DELETE INVOICE
14:35:12 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
14:35:12 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
14:35:12 280  	  END IF;
14:35:12 281  	END LOOP;
14:35:12 282  
14:35:12 283  	-- DELETE LOCKS
14:35:12 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
14:35:12 285  
14:35:12 286  	-- DELETE ACCOUNT
14:35:12 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
14:35:12 288  
14:35:12 289  END TEST_DELETE_USER_ACCOUNT;
14:35:12 290  
14:35:12 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
14:35:12 292  	in_start_group_id IN NUMBER,
14:35:12 293  	in_end_group_id   IN NUMBER
14:35:12 294  ) IS
14:35:12 295   gid ACCOUNT.GROUP_ID%TYPE;
14:35:12 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
14:35:12 297  BEGIN
14:35:12 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
14:35:12 299  	/*
14:35:12 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
14:35:12 301  	LOOP
14:35:12 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
14:35:12 303  	END LOOP;*/
14:35:12 304  	OPEN c(in_start_group_id, in_end_group_id);
14:35:12 305  	WHILE c%ISOPEN LOOP
14:35:12 306  	  FETCH c INTO gid;
14:35:12 307  	  IF c%NOTFOUND THEN
14:35:12 308  	   CLOSE c;
14:35:12 309  	  END IF;
14:35:12 310  	  TEST_DELETE_USER_ACCOUNT(gid);
14:35:12 311  	END LOOP;
14:35:12 312  END;
14:35:12 313  
14:35:12 314  /**********************************************************/
14:35:12 315  
14:35:12 316  FUNCTION TEST_IS_INVOICE_EXISTS(
14:35:12 317  /*
14:35:12 318  1 - exists
14:35:12 319  0 - not exists
14:35:12 320  */
14:35:12 321  	in_invoice_id IN NUMBER
14:35:12 322  ) RETURN NUMBER AS
14:35:12 323  var_invoice_count NUMBER;
14:35:12 324  BEGIN
14:35:12 325  	SELECT
14:35:12 326  	  COUNT(*) into var_invoice_count
14:35:12 327  	FROM
14:35:12 328  	  INVOICE
14:35:12 329  	WHERE
14:35:12 330  	  INVOICE.ID = in_invoice_id;
14:35:12 331  	IF var_invoice_count = 0 THEN
14:35:12 332  	  RETURN 0;
14:35:12 333  	ELSE
14:35:12 334  	  RETURN 1;
14:35:12 335  	END IF;
14:35:12 336  END;
14:35:12 337  
14:35:12 338  PROCEDURE TEST_GET_INVOICE_INFO (
14:35:12 339  	in_invoice_id  IN NUMBER,
14:35:12 340  	out_result_set OUT SYS_REFCURSOR
14:35:12 341  ) AS
14:35:12 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
14:35:12 343  BEGIN
14:35:12 344  
14:35:12 345  	 OPEN out_result_set FOR SELECT
14:35:12 346  	    in_invoice_id AS "INVOICE_ID",
14:35:12 347  	    INVOICE.INVOICE_STATUS_ID,
14:35:12 348  	    PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
14:35:12 349  	    CHARGE.ID AS "CHARGE_ID",
14:35:12 350  	    CHARGE.CHARGE_AMOUNT,
14:35:12 351  	    CHARGE.TRANSACTION_ID,
14:35:12 352  	    TRANSACTION.TRANSACTION_STATUS_ID
14:35:12 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
14:35:12 354  
14:35:12 355  END TEST_GET_INVOICE_INFO;
14:35:12 356  
14:35:12 357  /******************************************************************************/
14:35:12 358  
14:35:12 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
14:35:12 360  	in_offer_chain_id in number
14:35:12 361  ) as
14:35:12 362  begin
14:35:12 363  
14:35:12 364  	for v_offer_chain in (
14:35:12 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
14:35:12 366  	)
14:35:12 367  	loop
14:35:12 368  
14:35:12 369  	  for v_offer in (
14:35:12 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
14:35:12 371  	  )
14:35:12 372  	  loop
14:35:12 373  
14:35:12 374  	    for v_product_offering in (
14:35:12 375  	      select
14:35:12 376  		product_offering.id,
14:35:12 377  		product_offering.product_id
14:35:12 378  	      from
14:35:12 379  		offer_product_offering
14:35:12 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
14:35:12 381  	      where offer_product_offering.offer_id = v_offer.id
14:35:12 382  	    )
14:35:12 383  	    loop
14:35:12 384  
14:35:12 385  	      -- delete product eligibility
14:35:12 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
14:35:12 387  
14:35:12 388  	      -- delete meta data
14:35:12 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
14:35:12 390  
14:35:12 391  	      -- delete product
14:35:12 392  	      delete from product where id = v_product_offering.product_id;
14:35:12 393  
14:35:12 394  	      -- delete product_offering
14:35:12 395  	      delete from product_offering where id = v_product_offering.id;
14:35:12 396  
14:35:12 397  	    end loop;
14:35:12 398  
14:35:12 399  	    -- delete data from offer_product_offering table
14:35:12 400  	    delete from offer_product_offering where offer_id = v_offer.id;
14:35:12 401  
14:35:12 402  	    -- delete data from offer_offer_chain table
14:35:12 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
14:35:12 404  
14:35:12 405  	    -- delete offer
14:35:12 406  	    delete from offer where id = v_offer.id;
14:35:12 407  
14:35:12 408  	  end loop;
14:35:12 409  
14:35:12 410  	  -- delete offer_chain_eligibility
14:35:12 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
14:35:12 412  
14:35:12 413  	  -- delete metadata
14:35:12 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
14:35:12 415  
14:35:12 416  	  -- delete offer chain
14:35:12 417  	  delete from offer_chain where id = v_offer_chain.id;
14:35:12 418  
14:35:12 419  	end loop;
14:35:12 420  
14:35:12 421  end;
14:35:12 422  
14:35:12 423  END PROCS_TEST_V16;
14:35:12 424  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.01
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V16" AS
14:35:12   2  
14:35:12   3  REAL_TIME_CANCEL_REASON CONSTANT NUMBER := 41;
14:35:12   4  
14:35:12   5  PROCEDURE ANNOTATE_ACCOUNT (
14:35:12   6  /*
14:35:12   7  Throws exceptions:
14:35:12   8  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12   9  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  10  */
14:35:12  11  	in_group_id   IN  NUMBER,
14:35:12  12  	in_agent_id   IN  NUMBER,
14:35:12  13  	in_note       IN  VARCHAR2,
14:35:12  14  	in_created_by IN  VARCHAR2
14:35:12  15  ) AS
14:35:12  16  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
14:35:12  17  -- VARIABLES
14:35:12  18  var_account_id	  NUMBER;
14:35:12  19  var_account_note_id NUMBER;
14:35:12  20  -- EXCEPTIONS
14:35:12  21  BAD_ACCOUNT_ID EXCEPTION;
14:35:12  22  BEGIN
14:35:12  23  
14:35:12  24  	-- Get account id
14:35:12  25  	BEGIN
14:35:12  26  	  SELECT
14:35:12  27  	    ACCOUNT.ID into var_account_id
14:35:12  28  	  FROM
14:35:12  29  	    ACCOUNT
14:35:12  30  	  WHERE
14:35:12  31  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12  32  	  EXCEPTION
14:35:12  33  	    WHEN NO_DATA_FOUND THEN
14:35:12  34  	      RAISE BAD_ACCOUNT_ID;
14:35:12  35  	END;
14:35:12  36  
14:35:12  37  	-- Insert new row into ACCOUNT_NOTE table
14:35:12  38  	PROCS_ACCOUNT_CRU_V16.CREATE_ACCOUNT_NOTE(
14:35:12  39  	  inout_account_note_id => var_account_note_id,
14:35:12  40  	  in_agent_id		=> in_agent_id,
14:35:12  41  	  in_account_id 	=> var_account_id,
14:35:12  42  	  in_note		=> in_note,
14:35:12  43  	  in_created_by 	=> in_created_by
14:35:12  44  	);
14:35:12  45  
14:35:12  46  EXCEPTION
14:35:12  47  WHEN BAD_ACCOUNT_ID THEN
14:35:12  48  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12  49  	  SPROC_NAME, 'No such group id');
14:35:12  50  WHEN OTHERS THEN
14:35:12  51  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12  52  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12  53  END ANNOTATE_ACCOUNT;
14:35:12  54  
14:35:12  55  /******************************************************************************/
14:35:12  56  
14:35:12  57  PROCEDURE ASSERT_ACCOUNT_EXISTS (
14:35:12  58  /*
14:35:12  59  Throws exceptions:
14:35:12  60  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12  61  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  62  */
14:35:12  63  	in_group_id IN	NUMBER,
14:35:12  64  	out_exists  OUT NUMBER
14:35:12  65  ) AS
14:35:12  66  -- VARIABLES
14:35:12  67  var_found_id  NUMBER;
14:35:12  68  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
14:35:12  69  BEGIN
14:35:12  70  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
14:35:12  71  	out_exists := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12  72  EXCEPTION
14:35:12  73  WHEN NO_DATA_FOUND THEN
14:35:12  74  	out_exists := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12  75  WHEN OTHERS THEN
14:35:12  76  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12  78  END ASSERT_ACCOUNT_EXISTS;
14:35:12  79  
14:35:12  80  /******************************************************************************/
14:35:12  81  
14:35:12  82  PROCEDURE DISABLE_ACCOUNT (
14:35:12  83  /*
14:35:12  84  Throws exceptions:
14:35:12  85  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12  86  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12  87  */
14:35:12  88  	in_group_id   IN NUMBER,
14:35:12  89  	in_updated_by IN VARCHAR2,
14:35:12  90  	in_note       IN VARCHAR2,
14:35:12  91  	in_agent_id   IN NUMBER
14:35:12  92  ) AS
14:35:12  93  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
14:35:12  94  var_account_id	      NUMBER;
14:35:12  95  current_account_status  NUMBER;
14:35:12  96  
14:35:12  97  var_active_subscriptions_num NUMBER;
14:35:12  98  var_pending_invoices_num	   NUMBER;
14:35:12  99  
14:35:12 100  -- EXCEPTIONS
14:35:12 101  BAD_ACOUNT_ID		EXCEPTION;
14:35:12 102  BAD_CURRENT_ACC_STATUS	EXCEPTION;
14:35:12 103  PENDING_INVOICES_FOUND	EXCEPTION;
14:35:12 104  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
14:35:12 105  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
14:35:12 106  EXCEPTION_MESSAGE 	VARCHAR2(1024);
14:35:12 107  BEGIN
14:35:12 108  
14:35:12 109  	-- Get account's status and id
14:35:12 110  	BEGIN
14:35:12 111  	  SELECT
14:35:12 112  	    ACCOUNT.ACCOUNT_STATUS_ID,
14:35:12 113  	    ACCOUNT.ID
14:35:12 114  	  INTO
14:35:12 115  	    current_account_status,
14:35:12 116  	    var_account_id
14:35:12 117  	  FROM ACCOUNT
14:35:12 118  	  WHERE
14:35:12 119  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12 120  	  EXCEPTION
14:35:12 121  	    WHEN NO_DATA_FOUND THEN
14:35:12 122  	      RAISE BAD_ACOUNT_ID;
14:35:12 123  	END;
14:35:12 124  
14:35:12 125  	-- For now, we can disable account whenever
14:35:12 126  	IF current_account_status = GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
14:35:12 127  	  RAISE BAD_CURRENT_ACC_STATUS;
14:35:12 128  	END IF;
14:35:12 129  
14:35:12 130  	-- Checks for out outstanding balances
14:35:12 131  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
14:35:12 132  	SELECT
14:35:12 133  	  COUNT(*) into var_pending_invoices_num
14:35:12 134  	FROM
14:35:12 135  	  LICENSE
14:35:12 136  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 137  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:35:12 138  	WHERE
14:35:12 139  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 140  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V16.INVOICE_OPEN FROM DUAL );
14:35:12 141  
14:35:12 142  	IF var_pending_invoices_num > 0 THEN
14:35:12 143  	  RAISE PENDING_INVOICES_FOUND;
14:35:12 144  	END IF;
14:35:12 145  
14:35:12 146  	SELECT
14:35:12 147  	  COUNT(*) into var_active_subscriptions_num
14:35:12 148  	FROM
14:35:12 149  	  SUBSCRIPTION
14:35:12 150  	WHERE
14:35:12 151  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 152  	  AND (
14:35:12 153  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 154  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
14:35:12 155  	  );
14:35:12 156  
14:35:12 157  	IF var_active_subscriptions_num > 0 THEN
14:35:12 158  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
14:35:12 159  	END IF;
14:35:12 160  
14:35:12 161  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
14:35:12 162  	  in_account_id        => var_account_id,
14:35:12 163  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_DISABLED,
14:35:12 164  	  in_updated_by        => in_updated_by
14:35:12 165  	);
14:35:12 166  
14:35:12 167  	-- Annotate account
14:35:12 168  	IF in_note IS NOT NULL THEN
14:35:12 169  	  BEGIN
14:35:12 170  	    PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
14:35:12 171  	      in_group_id   => in_group_id,
14:35:12 172  	      in_agent_id   => in_agent_id,
14:35:12 173  	      in_note	    => in_note,
14:35:12 174  	      in_created_by => in_updated_by
14:35:12 175  	    );
14:35:12 176  	    EXCEPTION
14:35:12 177  	      WHEN OTHERS THEN
14:35:12 178  		EXCEPTION_MESSAGE := SQLERRM;
14:35:12 179  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
14:35:12 180  	  END;
14:35:12 181  	END IF;
14:35:12 182  
14:35:12 183  EXCEPTION
14:35:12 184  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
14:35:12 185  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 186  	  SPROC_NAME, 'Account has active or suspended subsciptions');
14:35:12 187  WHEN BAD_CURRENT_ACC_STATUS THEN
14:35:12 188  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 189  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
14:35:12 190  WHEN PENDING_INVOICES_FOUND THEN
14:35:12 191  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 192  	  SPROC_NAME, 'Opened/Pending invoices founded');
14:35:12 193  WHEN BAD_ACOUNT_ID THEN
14:35:12 194  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 195  	  SPROC_NAME, 'No such account');
14:35:12 196  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
14:35:12 197  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 198  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
14:35:12 199  WHEN OTHERS THEN
14:35:12 200  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 201  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 202  END DISABLE_ACCOUNT;
14:35:12 203  
14:35:12 204  /******************************************************************************/
14:35:12 205  
14:35:12 206  PROCEDURE CREATE_ACTIVE_ACCOUNT(
14:35:12 207  /*
14:35:12 208  Throws exceptions:
14:35:12 209  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 210  APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR
14:35:12 211  */
14:35:12 212  	  in_created_by IN VARCHAR2,
14:35:12 213  	  in_group_id	IN NUMBER
14:35:12 214  ) AS
14:35:12 215  -- VARIABLES
14:35:12 216  SPROC_NAME      CONSTANT VARCHAR2(21) := 'CREATE_ACTIVE_ACCOUNT';
14:35:12 217  new_account_id  NUMBER;
14:35:12 218  temp_group_id   NUMBER;
14:35:12 219  -- EXCEPTIONS
14:35:12 220  GROUP_EXISTS_EXCEPTION EXCEPTION;
14:35:12 221  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 222  BEGIN
14:35:12 223  	-- Check if account already exists
14:35:12 224  	BEGIN
14:35:12 225  	  SELECT
14:35:12 226  	    ACCOUNT.GROUP_ID into temp_group_id
14:35:12 227  	  FROM
14:35:12 228  	    ACCOUNT
14:35:12 229  	  WHERE
14:35:12 230  	    ACCOUNT.GROUP_ID = in_group_id
14:35:12 231  	    AND ROWNUM <= 1;
14:35:12 232  
14:35:12 233  	  IF SQL%ROWCOUNT = 1 THEN
14:35:12 234  	    RAISE GROUP_EXISTS_EXCEPTION;
14:35:12 235  	  END IF;
14:35:12 236  
14:35:12 237  	  EXCEPTION
14:35:12 238  	    WHEN NO_DATA_FOUND THEN
14:35:12 239  	      NULL;
14:35:12 240  	END;
14:35:12 241  
14:35:12 242  	-- Insert new row into ACCOUNT table
14:35:12 243  	PROCS_ACCOUNT_CRU_V16.CREATE_ACCOUNT(
14:35:12 244  	  out_account_id	=> new_account_id,
14:35:12 245  	  in_account_status_id	=> GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE,
14:35:12 246  	  in_group_id		=> in_group_id,
14:35:12 247  	  in_created_by 	=> in_created_by,
14:35:12 248  	  in_system_category_id => GLOBAL_ENUMS_V16.SYSTEM_CATEGORY_LIVE
14:35:12 249  	);
14:35:12 250  
14:35:12 251  EXCEPTION
14:35:12 252  WHEN GROUP_EXISTS_EXCEPTION THEN
14:35:12 253  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.DUPLICATE_ERROR,
14:35:12 254  	  SPROC_NAME, 'Group already exists');
14:35:12 255  WHEN OTHERS THEN
14:35:12 256  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 257  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 258  END CREATE_ACTIVE_ACCOUNT;
14:35:12 259  
14:35:12 260  /******************************************************************************/
14:35:12 261  
14:35:12 262  PROCEDURE REACTIVATE_ACCOUNT (
14:35:12 263  /*
14:35:12 264  Throws exceptions:
14:35:12 265  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 266  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 267  */
14:35:12 268  	in_group_id   IN NUMBER,
14:35:12 269  	in_updated_by IN VARCHAR2,
14:35:12 270  	in_note       IN VARCHAR2,
14:35:12 271  	in_agent_id   IN NUMBER
14:35:12 272  ) AS
14:35:12 273  -- VARIABLES
14:35:12 274  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
14:35:12 275  var_account_id	      NUMBER;
14:35:12 276  current_account_status  NUMBER;
14:35:12 277  
14:35:12 278  -- EXCEPTIONS
14:35:12 279  BAD_CURRENT_ACC_STATUS EXCEPTION;
14:35:12 280  CAN_NOT_CREATE_NOTE    EXCEPTION;
14:35:12 281  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 282  BEGIN
14:35:12 283  	-- Get account id, status
14:35:12 284  	SELECT
14:35:12 285  	  ACCOUNT.ACCOUNT_STATUS_ID,
14:35:12 286  	  ACCOUNT.ID
14:35:12 287  	INTO
14:35:12 288  	  current_account_status,
14:35:12 289  	  var_account_id
14:35:12 290  	FROM ACCOUNT
14:35:12 291  	WHERE
14:35:12 292  	  ACCOUNT.GROUP_ID = in_group_id;
14:35:12 293  
14:35:12 294  	IF current_account_status != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
14:35:12 295  	  RAISE BAD_CURRENT_ACC_STATUS;
14:35:12 296  	END IF;
14:35:12 297  
14:35:12 298  	-- Change account status
14:35:12 299  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
14:35:12 300  	  in_account_id        => var_account_id,
14:35:12 301  	  in_updated_by        => in_updated_by,
14:35:12 302  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
14:35:12 303  	);
14:35:12 304  
14:35:12 305  	-- Add note
14:35:12 306  	BEGIN
14:35:12 307  	  PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
14:35:12 308  	    in_group_id   => in_group_id,
14:35:12 309  	    in_agent_id   => in_agent_id,
14:35:12 310  	    in_note	  => in_note,
14:35:12 311  	    in_created_by => in_updated_by
14:35:12 312  	  );
14:35:12 313  	  EXCEPTION
14:35:12 314  	    WHEN OTHERS THEN
14:35:12 315  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 316  	      RAISE CAN_NOT_CREATE_NOTE;
14:35:12 317  	END;
14:35:12 318  
14:35:12 319  EXCEPTION
14:35:12 320  WHEN BAD_CURRENT_ACC_STATUS THEN
14:35:12 321  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 322  	  SPROC_NAME, 'Current account status is not "frozen"');
14:35:12 323  WHEN NO_DATA_FOUND THEN
14:35:12 324  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 325  	  SPROC_NAME, 'Could not find account with given group ID');
14:35:12 326  WHEN CAN_NOT_CREATE_NOTE THEN
14:35:12 327  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 328  	  SPROC_NAME, 'Could not annotate account');
14:35:12 329  WHEN OTHERS THEN
14:35:12 330  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 332  END REACTIVATE_ACCOUNT;
14:35:12 333  
14:35:12 334  /******************************************************************************/
14:35:12 335  
14:35:12 336  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
14:35:12 337  /*
14:35:12 338  IN:
14:35:12 339  instr_status:
14:35:12 340  1 - get active instruments only (default)
14:35:12 341  0 - get inactive instruments only
14:35:12 342  
14:35:12 343  Throws exceptions:
14:35:12 344  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 345  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 346  */
14:35:12 347  	in_group_id	  IN NUMBER,
14:35:12 348  	out_result_cc_set OUT SYS_REFCURSOR,
14:35:12 349  	out_default_id	  OUT NUMBER,
14:35:12 350  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V16.CREDIT_CARD_ACTIVE
14:35:12 351  ) AS
14:35:12 352  SPROC_NAME		 CONSTANT VARCHAR2(24) := 'GET_ACCOUNT_CREDIT_CARDS';
14:35:12 353  var_account_id		 NUMBER;
14:35:12 354  var_def_instrument_type_id NUMBER;
14:35:12 355  var_def_instrument_id	 NUMBER;
14:35:12 356  temp_cc_status_id 	 NUMBER;
14:35:12 357  
14:35:12 358  -- Exceptions
14:35:12 359  WRONG_INSTR_EXCEPTION	     EXCEPTION;
14:35:12 360  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
14:35:12 361  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
14:35:12 362  BEGIN
14:35:12 363  
14:35:12 364  	-- Get group id
14:35:12 365  	SELECT
14:35:12 366  	  ACCOUNT.ID INTO var_account_id
14:35:12 367  	FROM
14:35:12 368  	  ACCOUNT
14:35:12 369  	WHERE
14:35:12 370  	  ACCOUNT.GROUP_ID = in_group_id;
14:35:12 371  
14:35:12 372  	-- Check that incoming parameter is correct
14:35:12 373  	BEGIN
14:35:12 374  	  SELECT
14:35:12 375  	    CREDIT_CARD_STATUS.ID into temp_cc_status_id
14:35:12 376  	  FROM
14:35:12 377  	    CREDIT_CARD_STATUS
14:35:12 378  	  WHERE
14:35:12 379  	    CREDIT_CARD_STATUS.ID = in_instr_status;
14:35:12 380  	  EXCEPTION
14:35:12 381  	    WHEN NO_DATA_FOUND THEN
14:35:12 382  	      RAISE WRONG_INSTR_EXCEPTION;
14:35:12 383  	END;
14:35:12 384  
14:35:12 385  	-- Select all crdit cards for given account
14:35:12 386  	OPEN out_result_cc_set FOR
14:35:12 387  	SELECT
14:35:12 388  	  CREDIT_CARD.ID,
14:35:12 389  	  CREDIT_CARD.ACCOUNT_ID,
14:35:12 390  	  CREDIT_CARD.INSTRUMENT_NAME,
14:35:12 391  	  CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
14:35:12 392  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS,
14:35:12 393  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
14:35:12 394  	  CREDIT_CARD.STATE,
14:35:12 395  	  CREDIT_CARD.CITY,
14:35:12 396  	  CREDIT_CARD.POSTAL_CODE,
14:35:12 397  	  CREDIT_CARD.COUNTRY,
14:35:12 398  	  CREDIT_CARD.LAST_FOUR_CC,
14:35:12 399  	  CREDIT_CARD.EXPIRATION_DATE,
14:35:12 400  	  CREDIT_CARD.CREDIT_CARD_TYPE_ID,
14:35:12 401  	  CREDIT_CARD.SECRET_TOKEN,
14:35:12 402  	  CREDIT_CARD.CREATE_DATE,
14:35:12 403  	  CREDIT_CARD.CREATED_BY,
14:35:12 404  	  CREDIT_CARD.UPDATE_DATE,
14:35:12 405  	  CREDIT_CARD.UPDATED_BY,
14:35:12 406  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
14:35:12 407  	  CREDIT_CARD.PRIVATE_FIRST_NAME,
14:35:12 408  	  CREDIT_CARD.PRIVATE_LAST_NAME
14:35:12 409  	FROM
14:35:12 410  	  CREDIT_CARD
14:35:12 411  	WHERE
14:35:12 412  	  CREDIT_CARD.ACCOUNT_ID = var_account_id
14:35:12 413  	  AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_instr_status;
14:35:12 414  
14:35:12 415  	-- Get default credit card if exists
14:35:12 416  	BEGIN
14:35:12 417  	  PROCS_FIN_INSTRUMENTS_V16.GET_DEF_FINANCIAL_INSTRUMENT(
14:35:12 418  	    in_group_id 	   => in_group_id,
14:35:12 419  	    out_instrument_type_id => var_def_instrument_type_id,
14:35:12 420  	    out_instrument_id	   => var_def_instrument_id
14:35:12 421  	  );
14:35:12 422  	  EXCEPTION
14:35:12 423  	    WHEN OTHERS THEN
14:35:12 424  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 425  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
14:35:12 426  	END;
14:35:12 427  
14:35:12 428  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_CREDIT_CARD THEN
14:35:12 429  	  out_default_id := var_def_instrument_id;
14:35:12 430  	ELSE
14:35:12 431  	  out_default_id := 0;
14:35:12 432  	END IF;
14:35:12 433  
14:35:12 434  EXCEPTION
14:35:12 435  WHEN NO_DATA_FOUND THEN
14:35:12 436  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 437  	  SPROC_NAME, 'No such account');
14:35:12 438  WHEN WRONG_INSTR_EXCEPTION THEN
14:35:12 439  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 440  	  SPROC_NAME, 'Wrong instrument status');
14:35:12 441  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
14:35:12 442  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 443  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
14:35:12 444  WHEN OTHERS THEN
14:35:12 445  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 446  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 447  END GET_ACCOUNT_CREDIT_CARDS;
14:35:12 448  
14:35:12 449  /******************************************************************************/
14:35:12 450  
14:35:12 451  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
14:35:12 452  /*
14:35:12 453  IN:
14:35:12 454  instr_status:
14:35:12 455  GLOBAL_CONSTANTS_V16.TRUE - get active instruments only (default)
14:35:12 456  GLOBAL_CONSTANTS_V16.FALSE - get inactive instruments only
14:35:12 457  
14:35:12 458  Throws exceptions:
14:35:12 459  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 460  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 461  */
14:35:12 462  	in_group_id	  IN NUMBER,
14:35:12 463  	out_result_gc_set OUT SYS_REFCURSOR,
14:35:12 464  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.TRUE
14:35:12 465  ) AS
14:35:12 466  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
14:35:12 467  var_account_id NUMBER;
14:35:12 468  
14:35:12 469  -- Exceptions
14:35:12 470  WRONG_INSTR_EXCEPTION	 EXCEPTION;
14:35:12 471  BEGIN
14:35:12 472  
14:35:12 473  	-- Get account id
14:35:12 474  	SELECT
14:35:12 475  	  ACCOUNT.ID INTO var_account_id
14:35:12 476  	FROM
14:35:12 477  	  ACCOUNT
14:35:12 478  	WHERE
14:35:12 479  	  ACCOUNT.GROUP_ID = in_group_id;
14:35:12 480  
14:35:12 481  	-- Check that incoming data is correct
14:35:12 482  	IF in_instr_status != GLOBAL_CONSTANTS_V16.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V16.FALSE THEN
14:35:12 483  	  RAISE WRONG_INSTR_EXCEPTION;
14:35:12 484  	END IF;
14:35:12 485  
14:35:12 486  	OPEN out_result_gc_set FOR
14:35:12 487  	SELECT
14:35:12 488  	  GIFT_CERTIFICATE.ID,
14:35:12 489  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
14:35:12 490  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
14:35:12 491  	  GIFT_CERTIFICATE.PURCHASE_DATE,
14:35:12 492  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
14:35:12 493  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
14:35:12 494  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
14:35:12 495  	  GIFT_CERTIFICATE.CODE,
14:35:12 496  	  GIFT_CERTIFICATE.CREATE_DATE,
14:35:12 497  	  GIFT_CERTIFICATE.CREATED_BY,
14:35:12 498  	  GIFT_CERTIFICATE.UPDATE_DATE,
14:35:12 499  	  GIFT_CERTIFICATE.UPDATED_BY,
14:35:12 500  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
14:35:12 501  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
14:35:12 502  	  GIFT_CERTIFICATE.SENDER_NAME,
14:35:12 503  	  GIFT_CERTIFICATE.SENDER_EMAIL,
14:35:12 504  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
14:35:12 505  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
14:35:12 506  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
14:35:12 507  	  GIFT_CERTIFICATE.GIFT_MESSAGE
14:35:12 508  	FROM
14:35:12 509  	  GIFT_CERTIFICATE
14:35:12 510  	WHERE
14:35:12 511  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
14:35:12 512  	  AND (
14:35:12 513  		( in_instr_status = GLOBAL_CONSTANTS_V16.TRUE AND
14:35:12 514  		  (
14:35:12 515  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
14:35:12 516  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
14:35:12 517  		  )
14:35:12 518  		)
14:35:12 519  		OR
14:35:12 520  		(
14:35:12 521  		  in_instr_status = GLOBAL_CONSTANTS_V16.FALSE AND
14:35:12 522  		  (
14:35:12 523  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
14:35:12 524  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V16.GIFT_CERTIFICATE_ACTIVE
14:35:12 525  		  )
14:35:12 526  		)
14:35:12 527  	      );
14:35:12 528  
14:35:12 529  EXCEPTION
14:35:12 530  WHEN NO_DATA_FOUND THEN
14:35:12 531  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 532  	  SPROC_NAME, 'Can not find account with given group id');
14:35:12 533  WHEN WRONG_INSTR_EXCEPTION THEN
14:35:12 534  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 535  	  SPROC_NAME, 'Wrong gift certificate type');
14:35:12 536  WHEN OTHERS THEN
14:35:12 537  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 538  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 539  END GET_ACCOUNT_GIFT_CERTIFICATES;
14:35:12 540  
14:35:12 541  /******************************************************************************/
14:35:12 542  
14:35:12 543  PROCEDURE GET_ACCOUNT_INFO  (
14:35:12 544  /*
14:35:12 545  Throws exceptions:
14:35:12 546  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 547  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 548  */
14:35:12 549  	  in_group_id	    IN	NUMBER,
14:35:12 550  	  out_account_info  OUT SYS_REFCURSOR
14:35:12 551  ) AS
14:35:12 552  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
14:35:12 553  var_account_id  NUMBER;
14:35:12 554  BEGIN
14:35:12 555  
14:35:12 556  	-- Get account id
14:35:12 557  	SELECT
14:35:12 558  	  ACCOUNT.ID INTO var_account_id
14:35:12 559  	FROM
14:35:12 560  	  ACCOUNT
14:35:12 561  	WHERE
14:35:12 562  	  ACCOUNT.GROUP_ID = in_group_id;
14:35:12 563  
14:35:12 564  	-- Get account info
14:35:12 565  	OPEN out_account_info FOR
14:35:12 566  	  SELECT
14:35:12 567  	    ACCOUNT.ACCOUNT_STATUS_ID
14:35:12 568  	  FROM ACCOUNT
14:35:12 569  	  WHERE
14:35:12 570  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12 571  
14:35:12 572  EXCEPTION
14:35:12 573  WHEN NO_DATA_FOUND THEN
14:35:12 574  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 575  	  SPROC_NAME, 'No such account');
14:35:12 576  WHEN OTHERS THEN
14:35:12 577  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 578  	  SPROC_NAME, 'Unknown Error', SQLERRM);
14:35:12 579  END GET_ACCOUNT_INFO;
14:35:12 580  
14:35:12 581  /******************************************************************************/
14:35:12 582  
14:35:12 583  PROCEDURE GET_ACCOUNT_NOTES (
14:35:12 584  /*
14:35:12 585  Throws exceptions:
14:35:12 586  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 587  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 588  */
14:35:12 589  	  in_group_id	 IN  NUMBER,
14:35:12 590  	  out_result_set OUT SYS_REFCURSOR
14:35:12 591  ) AS
14:35:12 592  -- VARIABLES
14:35:12 593  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
14:35:12 594  var_account_id NUMBER;
14:35:12 595  -- EXCEPTIONS
14:35:12 596  BAD_ACCOUNT_ID EXCEPTION;
14:35:12 597  BEGIN
14:35:12 598  
14:35:12 599  	-- Check that account is exists
14:35:12 600  	BEGIN
14:35:12 601  	  SELECT
14:35:12 602  	    ACCOUNT.ID into var_account_id
14:35:12 603  	  FROM
14:35:12 604  	    ACCOUNT
14:35:12 605  	  WHERE
14:35:12 606  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12 607  	  EXCEPTION
14:35:12 608  	    WHEN NO_DATA_FOUND THEN
14:35:12 609  	      RAISE BAD_ACCOUNT_ID;
14:35:12 610  	END;
14:35:12 611  
14:35:12 612  	-- Get account notes
14:35:12 613  	OPEN out_result_set FOR
14:35:12 614  	SELECT
14:35:12 615  	  ACCOUNT_NOTE.ACCOUNT_ID,
14:35:12 616  	  ACCOUNT_NOTE.AGENT_ID,
14:35:12 617  	  ACCOUNT_NOTE.CREATE_DATE,
14:35:12 618  	  ACCOUNT_NOTE.CREATED_BY,
14:35:12 619  	  ACCOUNT_NOTE.ID,
14:35:12 620  	  ACCOUNT_NOTE.NOTE
14:35:12 621  	FROM
14:35:12 622  	  ACCOUNT_NOTE
14:35:12 623  	WHERE
14:35:12 624  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
14:35:12 625  	ORDER BY
14:35:12 626  	  ACCOUNT_NOTE.CREATE_DATE ASC;
14:35:12 627  
14:35:12 628  EXCEPTION
14:35:12 629  WHEN BAD_ACCOUNT_ID THEN
14:35:12 630  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 631  	  SPROC_NAME, 'No such account');
14:35:12 632  WHEN OTHERS THEN
14:35:12 633  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 634  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 635  END GET_ACCOUNT_NOTES;
14:35:12 636  
14:35:12 637  /******************************************************************************/
14:35:12 638  
14:35:12 639  PROCEDURE GET_ACCOUNT_PAYPALS(
14:35:12 640  /*
14:35:12 641  IN:
14:35:12 642  instr_status:
14:35:12 643  1 - get active instruments only (default)
14:35:12 644  0 - get inactive instruments only
14:35:12 645  
14:35:12 646  Throws exceptions:
14:35:12 647  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 648  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 649  */
14:35:12 650  	in_group_id	  IN  NUMBER,
14:35:12 651  	out_result_pp_set OUT SYS_REFCURSOR,
14:35:12 652  	out_default_id	  OUT NUMBER,
14:35:12 653  	in_instr_status   IN  NUMBER DEFAULT GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
14:35:12 654  ) AS
14:35:12 655  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACCOUNT_PAYPALS';
14:35:12 656  -- VARIABLES
14:35:12 657  var_account_id NUMBER;
14:35:12 658  var_def_instrument_type_id NUMBER;
14:35:12 659  var_def_instrument_id	 NUMBER;
14:35:12 660  -- EXCEPTIONS
14:35:12 661  WRONG_INSTR_EXCEPTION	 EXCEPTION;
14:35:12 662  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
14:35:12 663  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
14:35:12 664  BEGIN
14:35:12 665  
14:35:12 666  	-- Get account id
14:35:12 667  	SELECT
14:35:12 668  	  ACCOUNT.ID INTO var_account_id
14:35:12 669  	FROM
14:35:12 670  	  ACCOUNT
14:35:12 671  	WHERE
14:35:12 672  	  ACCOUNT.GROUP_ID = in_group_id;
14:35:12 673  
14:35:12 674  	-- Check that all passed agruments are valid
14:35:12 675  	IF in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_ACTIVE
14:35:12 676  	  AND in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_INACTIVE
14:35:12 677  	  AND in_instr_status != GLOBAL_STATUSES_V16.PAYPAL_FROZEN THEN
14:35:12 678  	  RAISE WRONG_INSTR_EXCEPTION;
14:35:12 679  	END IF;
14:35:12 680  
14:35:12 681  	-- Retreiving information about paypals
14:35:12 682  	OPEN out_result_pp_set FOR
14:35:12 683  	SELECT
14:35:12 684  	  PAYPAL.ID,
14:35:12 685  	  PAYPAL.ACCOUNT_ID,
14:35:12 686  	  PAYPAL.INSTRUMENT_NAME,
14:35:12 687  	  PAYPAL.PRIVATE_EMAIL_ADDRESS,
14:35:12 688  	  PAYPAL.CREATE_DATE,
14:35:12 689  	  PAYPAL.CREATED_BY,
14:35:12 690  	  PAYPAL.UPDATE_DATE,
14:35:12 691  	  PAYPAL.UPDATED_BY,
14:35:12 692  	  PAYPAL.PAYPAL_STATUS_ID,
14:35:12 693  	  PAYPAL.PRIVATE_STREET_ADDRESS,
14:35:12 694  	  PAYPAL.PRIVATE_STREET_ADDRESS2,
14:35:12 695  	  PAYPAL.STATE,
14:35:12 696  	  PAYPAL.CITY,
14:35:12 697  	  PAYPAL.POSTAL_CODE,
14:35:12 698  	  PAYPAL.COUNTRY,
14:35:12 699  	  PAYPAL.EXPIRATION_DATE,
14:35:12 700  	  PAYPAL.SECRET_TOKEN
14:35:12 701  	FROM
14:35:12 702  	  PAYPAL
14:35:12 703  	WHERE
14:35:12 704  	  PAYPAL.ACCOUNT_ID = var_account_id
14:35:12 705  	  AND PAYPAL.PAYPAL_STATUS_ID = in_instr_status;
14:35:12 706  
14:35:12 707  	-- Get default credit card if exists
14:35:12 708  	BEGIN
14:35:12 709  	  PROCS_FIN_INSTRUMENTS_V16.GET_DEF_FINANCIAL_INSTRUMENT(
14:35:12 710  	    in_group_id 	   => in_group_id,
14:35:12 711  	    out_instrument_type_id => var_def_instrument_type_id,
14:35:12 712  	    out_instrument_id	   => var_def_instrument_id
14:35:12 713  	  );
14:35:12 714  	  EXCEPTION
14:35:12 715  	    WHEN OTHERS THEN
14:35:12 716  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 717  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
14:35:12 718  	END;
14:35:12 719  
14:35:12 720  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V16.INSTRUMENT_PAYPAL THEN
14:35:12 721  	  out_default_id := var_def_instrument_id;
14:35:12 722  	ELSE
14:35:12 723  	  out_default_id := 0;
14:35:12 724  	END IF;
14:35:12 725  
14:35:12 726  EXCEPTION
14:35:12 727  WHEN NO_DATA_FOUND THEN
14:35:12 728  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 729  	  SPROC_NAME, 'Could not find account with given group id');
14:35:12 730  WHEN WRONG_INSTR_EXCEPTION THEN
14:35:12 731  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 732  	  SPROC_NAME, 'Bad paypal status id');
14:35:12 733  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
14:35:12 734  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 735  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
14:35:12 736  WHEN OTHERS THEN
14:35:12 737  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 738  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 739  END GET_ACCOUNT_PAYPALS;
14:35:12 740  
14:35:12 741  /******************************************************************************/
14:35:12 742  
14:35:12 743  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
14:35:12 744  /*
14:35:12 745  Throws exceptions:
14:35:12 746  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 747  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 748  */
14:35:12 749  	  in_group_id	 IN  NUMBER,
14:35:12 750  	  in_start_date  IN DATE,
14:35:12 751  	  in_end_date	 IN DATE,
14:35:12 752  	  in_status	 IN NUMBER,
14:35:12 753  	  in_group_account_type IN VARCHAR2,
14:35:12 754  	  out_result_set OUT SYS_REFCURSOR
14:35:12 755  ) AS
14:35:12 756  -- VARIABLES
14:35:12 757  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
14:35:12 758  var_account_id NUMBER;
14:35:12 759  -- EXCEPTIONS
14:35:12 760  BAD_GROUP_ID	      EXCEPTION;
14:35:12 761  BAD_SUBSCRIPTION_STATUS EXCEPTION;
14:35:12 762  BEGIN
14:35:12 763  	-- Check that all passed data is correct
14:35:12 764  	IF in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE
14:35:12 765  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_SUSPENDED
14:35:12 766  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_CANCELED
14:35:12 767  	  AND in_status != GLOBAL_STATUSES_V16.SUBSCRIPTION_CLOSED
14:35:12 768  	THEN
14:35:12 769  	  RAISE BAD_SUBSCRIPTION_STATUS;
14:35:12 770  	END IF;
14:35:12 771  
14:35:12 772  	-- Get account id
14:35:12 773  	BEGIN
14:35:12 774  	  SELECT
14:35:12 775  	    ACCOUNT.ID INTO var_account_id
14:35:12 776  	  FROM
14:35:12 777  	    ACCOUNT
14:35:12 778  	  WHERE
14:35:12 779  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12 780  	  EXCEPTION
14:35:12 781  	    WHEN NO_DATA_FOUND THEN
14:35:12 782  	      RAISE BAD_GROUP_ID;
14:35:12 783  	END;
14:35:12 784  
14:35:12 785  	-- Get information about account subscriptions
14:35:12 786  	OPEN out_result_set FOR
14:35:12 787  	SELECT
14:35:12 788  	  in_group_id AS "GROUP_ID",
14:35:12 789  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
14:35:12 790  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
14:35:12 791  	  SUBSCRIPTION.PURCHASE_DATE,
14:35:12 792  	  SUBSCRIPTION.SUSPEND_DATE,
14:35:12 793  	  SUBSCRIPTION.REACTIVATION_DATE,
14:35:12 794  	  SUBSCRIPTION.CANCELLATION_DATE,
14:35:12 795  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
14:35:12 796  	  SUBSCRIPTION.INSTRUMENT_ID,
14:35:12 797  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
14:35:12 798  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
14:35:12 799  	  OFFER_CHAIN.NAME,
14:35:12 800  	  OFFER_CHAIN.DESCRIPTION,
14:35:12 801  	  OFFER_CHAIN.PRODUCT_URI,
14:35:12 802  	  PROCS_SUBSCRIPTION_V16.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
14:35:12 803  	  PROCS_SUBSCRIPTION_V16.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
14:35:12 804  	  PROCS_SUBSCRIPTION_V16.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
14:35:12 805  	  PROCS_SUBSCRIPTION_V16.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
14:35:12 806  	  PROCS_SUBSCRIPTION_V16.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
14:35:12 807  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
14:35:12 808  	  (
14:35:12 809  	    SELECT
14:35:12 810  	      MAX(ENTITLEMENT_END_DATE)
14:35:12 811  	      FROM LICENSE
14:35:12 812  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 813  	  )
14:35:12 814  	  as "ENT_END_DATE",
14:35:12 815  	  (
14:35:12 816  	    SELECT
14:35:12 817  	      MIN(START_DATE)
14:35:12 818  	      FROM LICENSE
14:35:12 819  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 820  	  )
14:35:12 821  	  as "ENT_START_DATE",
14:35:12 822  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
14:35:12 823  	  GROUP_ACCOUNT.ID GA_ID,
14:35:12 824  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
14:35:12 825  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
14:35:12 826  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
14:35:12 827  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
14:35:12 828  	  GROUP_ACCOUNT.PHONE GA_PHONE,
14:35:12 829  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
14:35:12 830  	  GROUP_ACCOUNT.SEATS GA_SEATS,
14:35:12 831  	  PROCS_GROUP_ACCOUNT_V16.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
14:35:12 832  	  GROUP_ACCOUNT.IP GA_IP,
14:35:12 833  	  PROCS_SUBSCRIPTION_V16.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE
14:35:12 834  	FROM
14:35:12 835  	  SUBSCRIPTION
14:35:12 836  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 837  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
14:35:12 838  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
14:35:12 839  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
14:35:12 840  	WHERE
14:35:12 841  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 842  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
14:35:12 843  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
14:35:12 844  	  AND PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
14:35:12 845  	  AND PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V16.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
14:35:12 846  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
14:35:12 847  
14:35:12 848  EXCEPTION
14:35:12 849  WHEN BAD_SUBSCRIPTION_STATUS THEN
14:35:12 850  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 851  	  SPROC_NAME, 'Bad subscription status');
14:35:12 852  WHEN BAD_GROUP_ID THEN
14:35:12 853  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 854  	  SPROC_NAME, 'Can not find account with given group id');
14:35:12 855  WHEN OTHERS THEN
14:35:12 856  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 857  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 858  END GET_ACCOUNT_SUBSCRIPTIONS;
14:35:12 859  
14:35:12 860  /******************************************************************************/
14:35:12 861  
14:35:12 862  PROCEDURE FREEZE_ACCOUNT (
14:35:12 863  /*
14:35:12 864  Throws exceptions:
14:35:12 865  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 866  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 867  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 868  */
14:35:12 869  	in_group_id   IN NUMBER,
14:35:12 870  	in_updated_by IN VARCHAR2,
14:35:12 871  	in_note       IN VARCHAR2,
14:35:12 872  	in_agent_id   IN NUMBER
14:35:12 873  ) AS
14:35:12 874  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
14:35:12 875  -- VARIABLES
14:35:12 876  var_account_id	    NUMBER;
14:35:12 877  var_account_status_id NUMBER;
14:35:12 878  -- EXCEPTIONS
14:35:12 879  BAD_GROUP_ID	    EXCEPTION;
14:35:12 880  BAD_ACCOUNT_STATUS_ID EXCEPTION;
14:35:12 881  CAN_NOT_CREATE_NOTE   EXCEPTION;
14:35:12 882  EXCEPTION_MESSAGE     VARCHAR2(1024);
14:35:12 883  BEGIN
14:35:12 884  
14:35:12 885  	-- Get account status, account id
14:35:12 886  	BEGIN
14:35:12 887  	  SELECT
14:35:12 888  	    ACCOUNT.ID,
14:35:12 889  	    ACCOUNT.ACCOUNT_STATUS_ID
14:35:12 890  	    into
14:35:12 891  	    var_account_id,
14:35:12 892  	    var_account_status_id
14:35:12 893  	  FROM
14:35:12 894  	    ACCOUNT
14:35:12 895  	  WHERE
14:35:12 896  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12 897  	  EXCEPTION
14:35:12 898  	    WHEN NO_DATA_FOUND THEN
14:35:12 899  	      RAISE BAD_GROUP_ID;
14:35:12 900  	END;
14:35:12 901  
14:35:12 902  	-- We can freeze only ACTIVE accounts
14:35:12 903  	IF var_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
14:35:12 904  	  AND var_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN THEN
14:35:12 905  	  RAISE BAD_ACCOUNT_STATUS_ID;
14:35:12 906  	END IF;
14:35:12 907  
14:35:12 908  	-- Set account status
14:35:12 909  	PROCS_ACCOUNT_V16.UPDATE_ACCOUNT_STATUS(
14:35:12 910  	  in_account_id        => var_account_id,
14:35:12 911  	  in_updated_by        => in_updated_by,
14:35:12 912  	  in_account_status_id => GLOBAL_STATUSES_V16.ACCOUNT_FROZEN
14:35:12 913  	);
14:35:12 914  
14:35:12 915  	-- Annotate account
14:35:12 916  	BEGIN
14:35:12 917  	  PROCS_ACCOUNT_V16.ANNOTATE_ACCOUNT(
14:35:12 918  	    in_group_id   => in_group_id,
14:35:12 919  	    in_agent_id   => in_agent_id,
14:35:12 920  	    in_note	  => in_note,
14:35:12 921  	    in_created_by => in_updated_by
14:35:12 922  	  );
14:35:12 923  	  EXCEPTION
14:35:12 924  	    WHEN OTHERS THEN
14:35:12 925  	      EXCEPTION_MESSAGE := SQLERRM;
14:35:12 926  	      RAISE CAN_NOT_CREATE_NOTE;
14:35:12 927  	END;
14:35:12 928  
14:35:12 929  EXCEPTION
14:35:12 930  WHEN BAD_GROUP_ID THEN
14:35:12 931  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 932  	  SPROC_NAME, 'No such group id');
14:35:12 933  WHEN BAD_ACCOUNT_STATUS_ID THEN
14:35:12 934  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.STATE_ERROR,
14:35:12 935  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
14:35:12 936  WHEN CAN_NOT_CREATE_NOTE THEN
14:35:12 937  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INTERNAL_ERROR,
14:35:12 938  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
14:35:12 939  WHEN OTHERS THEN
14:35:12 940  	PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 941  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 942  END FREEZE_ACCOUNT;
14:35:12 943  
14:35:12 944  /******************************************************************************/
14:35:12 945  
14:35:12 946  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
14:35:12 947  /*
14:35:12 948  Throws exceptions:
14:35:12 949  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 950  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 951  */
14:35:12 952  	in_group_id	   IN  NUMBER,
14:35:12 953  	in_subscription_id IN NUMBER,
14:35:12 954  	out_result_set	   OUT SYS_REFCURSOR
14:35:12 955  ) AS
14:35:12 956  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
14:35:12 957  -- VARIABLES
14:35:12 958  var_account_id	   NUMBER;
14:35:12 959  temp_subscription_id NUMBER;
14:35:12 960  -- EXCEPTIONS
14:35:12 961  BAD_GROUP_ID	  EXCEPTION;
14:35:12 962  BAD_SUBSCRIPTION_ID EXCEPTION;
14:35:12 963  BEGIN
14:35:12 964  	-- Get account id
14:35:12 965  	BEGIN
14:35:12 966  	  SELECT
14:35:12 967  	    ACCOUNT.ID into var_account_id
14:35:12 968  	  FROM
14:35:12 969  	    ACCOUNT
14:35:12 970  	  WHERE
14:35:12 971  	    ACCOUNT.GROUP_ID = in_group_id;
14:35:12 972  	  EXCEPTION
14:35:12 973  	    WHEN NO_DATA_FOUND THEN
14:35:12 974  	      RAISE BAD_GROUP_ID;
14:35:12 975  	END;
14:35:12 976  
14:35:12 977  	-- Check that subscription exists
14:35:12 978  	BEGIN
14:35:12 979  	  IF in_subscription_id IS NOT NULL THEN
14:35:12 980  	    SELECT
14:35:12 981  	      SUBSCRIPTION.ID into temp_subscription_id
14:35:12 982  	    FROM
14:35:12 983  	      SUBSCRIPTION
14:35:12 984  	    WHERE
14:35:12 985  	      SUBSCRIPTION.ID = in_subscription_id;
14:35:12 986  	  END IF;
14:35:12 987  	  EXCEPTION
14:35:12 988  	    WHEN NO_DATA_FOUND THEN
14:35:12 989  	      RAISE BAD_SUBSCRIPTION_ID;
14:35:12 990  	END;
14:35:12 991  
14:35:12 992  	OPEN out_result_set FOR
14:35:12 993  	SELECT DISTINCT
14:35:12 994  	  INVOICE.ID as "INVOICE_ID",
14:35:12 995  	  INVOICE.CREATE_DATE,
14:35:12 996  	  INVOICE.INVOICE_STATUS_ID,
14:35:12 997  	  PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
14:35:12 998  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
14:35:12 999  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
14:35:12 1000  	   SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
14:35:12 1001  	   NULL as "GC_CODE",
14:35:12 1002  	   NULL as "GC_ID"
14:35:12 1003  	 FROM
14:35:12 1004  	   LICENSE
14:35:12 1005  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 1006  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:35:12 1007  	   INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 1008  	 WHERE
14:35:12 1009  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 1010  	   AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
14:35:12 1011  	   AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
14:35:12 1012  
14:35:12 1013  EXCEPTION
14:35:12 1014  WHEN BAD_GROUP_ID THEN
14:35:12 1015  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1016  	   SPROC_NAME, 'No such account');
14:35:12 1017  WHEN BAD_SUBSCRIPTION_ID THEN
14:35:12 1018  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1019  	   SPROC_NAME, 'No such subscription');
14:35:12 1020  WHEN OTHERS THEN
14:35:12 1021  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1022  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1023  END GET_ACCOUNT_SUBSCR_INVOICES;
14:35:12 1024  
14:35:12 1025  /******************************************************************************/
14:35:12 1026  
14:35:12 1027  PROCEDURE GET_ACCOUNT_GC_INVOICES (
14:35:12 1028  /*
14:35:12 1029  Throws exceptions:
14:35:12 1030  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1031  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1032  */
14:35:12 1033  	 in_group_id	IN  NUMBER,
14:35:12 1034  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1035  ) AS
14:35:12 1036  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
14:35:12 1037  -- VARIABLES
14:35:12 1038  var_account_id NUMBER;
14:35:12 1039  -- EXCEPTIONS
14:35:12 1040  BAD_GROUP_ID EXCEPTION;
14:35:12 1041  BEGIN
14:35:12 1042  	 -- Get account id
14:35:12 1043  	 BEGIN
14:35:12 1044  	   SELECT
14:35:12 1045  	     ACCOUNT.ID into var_account_id
14:35:12 1046  	   FROM
14:35:12 1047  	     ACCOUNT
14:35:12 1048  	   WHERE
14:35:12 1049  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1050  	   EXCEPTION
14:35:12 1051  	     WHEN NO_DATA_FOUND THEN
14:35:12 1052  	       RAISE BAD_GROUP_ID;
14:35:12 1053  	 END;
14:35:12 1054  
14:35:12 1055  	 -- Get invoices
14:35:12 1056  	 OPEN out_result_set FOR
14:35:12 1057  	 SELECT DISTINCT
14:35:12 1058  	   INVOICE.ID as "INVOICE_ID",
14:35:12 1059  	   INVOICE.CREATE_DATE,
14:35:12 1060  	   INVOICE.INVOICE_STATUS_ID,
14:35:12 1061  	   PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
14:35:12 1062  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
14:35:12 1063  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
14:35:12 1064  	   NULL as "SUBSCRIPTION_ID",
14:35:12 1065  	   GIFT_CERTIFICATE.CODE as "GC_CODE",
14:35:12 1066  	   GIFT_CERTIFICATE.ID as "GC_ID"
14:35:12 1067  	 FROM
14:35:12 1068  	   GIFT_CERTIFICATE
14:35:12 1069  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
14:35:12 1070  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 1071  	 WHERE
14:35:12 1072  	   ROWNUM <= 100 AND
14:35:12 1073  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
14:35:12 1074  
14:35:12 1075  EXCEPTION
14:35:12 1076  WHEN BAD_GROUP_ID THEN
14:35:12 1077  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1078  	   SPROC_NAME, 'No such account');
14:35:12 1079  WHEN OTHERS THEN
14:35:12 1080  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1081  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1082  END GET_ACCOUNT_GC_INVOICES;
14:35:12 1083  
14:35:12 1084  /******************************************************************************/
14:35:12 1085  -- norlov: #38580
14:35:12 1086  PROCEDURE GET_GC_INVOICE (
14:35:12 1087  /*
14:35:12 1088  Throws exceptions:
14:35:12 1089  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1090  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1091  */
14:35:12 1092  	 in_group_id	IN  NUMBER,
14:35:12 1093  	 in_gc_code	IN  VARCHAR2,
14:35:12 1094  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1095  ) AS
14:35:12 1096  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
14:35:12 1097  -- VARIABLES
14:35:12 1098  var_account_id NUMBER;
14:35:12 1099  -- EXCEPTIONS
14:35:12 1100  BAD_GROUP_ID EXCEPTION;
14:35:12 1101  BEGIN
14:35:12 1102  	 -- Get account id
14:35:12 1103  	 BEGIN
14:35:12 1104  	   SELECT
14:35:12 1105  	     ACCOUNT.ID into var_account_id
14:35:12 1106  	   FROM
14:35:12 1107  	     ACCOUNT
14:35:12 1108  	   WHERE
14:35:12 1109  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1110  	   EXCEPTION
14:35:12 1111  	     WHEN NO_DATA_FOUND THEN
14:35:12 1112  	       RAISE BAD_GROUP_ID;
14:35:12 1113  	 END;
14:35:12 1114  
14:35:12 1115  	 -- Get invoice for the GC
14:35:12 1116  	 OPEN out_result_set FOR
14:35:12 1117  	 SELECT DISTINCT
14:35:12 1118  	   INVOICE.ID as "INVOICE_ID",
14:35:12 1119  	   INVOICE.CREATE_DATE,
14:35:12 1120  	   INVOICE.INVOICE_STATUS_ID,
14:35:12 1121  	   PROCS_INVOICE_V16.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
14:35:12 1122  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
14:35:12 1123  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
14:35:12 1124  	   NULL as "SUBSCRIPTION_ID",
14:35:12 1125  	   GIFT_CERTIFICATE.CODE as "GC_CODE"
14:35:12 1126  	 FROM
14:35:12 1127  	   GIFT_CERTIFICATE
14:35:12 1128  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
14:35:12 1129  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:35:12 1130  	 WHERE
14:35:12 1131  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
14:35:12 1132  	   AND GIFT_CERTIFICATE.CODE = in_gc_code;
14:35:12 1133  
14:35:12 1134  EXCEPTION
14:35:12 1135  WHEN BAD_GROUP_ID THEN
14:35:12 1136  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1137  	   SPROC_NAME, 'No such account');
14:35:12 1138  WHEN OTHERS THEN
14:35:12 1139  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1140  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1141  END GET_GC_INVOICE;
14:35:12 1142  /******************************************************************************/
14:35:12 1143  
14:35:12 1144  PROCEDURE GET_ACCOUNT_PRODUCTS (
14:35:12 1145  /*
14:35:12 1146  Throws exceptions:
14:35:12 1147  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1148  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1149  */
14:35:12 1150  	 in_group_id	IN  NUMBER,
14:35:12 1151  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1152  ) AS
14:35:12 1153  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
14:35:12 1154  -- VARIABLES
14:35:12 1155  var_account_id NUMBER;
14:35:12 1156  -- EXCEPTIONS
14:35:12 1157  BAD_GROUP_ID EXCEPTION;
14:35:12 1158  BEGIN
14:35:12 1159  	 -- Get account id
14:35:12 1160  	 BEGIN
14:35:12 1161  	   SELECT
14:35:12 1162  	     ACCOUNT.ID into var_account_id
14:35:12 1163  	   FROM
14:35:12 1164  	     ACCOUNT
14:35:12 1165  	   WHERE
14:35:12 1166  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1167  	   EXCEPTION
14:35:12 1168  	     WHEN NO_DATA_FOUND THEN
14:35:12 1169  	       RAISE BAD_GROUP_ID;
14:35:12 1170  	 END;
14:35:12 1171  
14:35:12 1172  	 OPEN out_result_set FOR
14:35:12 1173  	 SELECT DISTINCT
14:35:12 1174  	   PRODUCT.ID,
14:35:12 1175  	   PRODUCT.NAME
14:35:12 1176  	 FROM
14:35:12 1177  	   PRODUCT
14:35:12 1178  	 WHERE
14:35:12 1179  	   PRODUCT.ID IN (
14:35:12 1180  	     SELECT DISTINCT
14:35:12 1181  	       PRODUCT_OFFERING.PRODUCT_ID
14:35:12 1182  	     FROM
14:35:12 1183  	       PRODUCT_OFFERING
14:35:12 1184  	     WHERE
14:35:12 1185  	       PRODUCT_OFFERING.ID IN (
14:35:12 1186  		 SELECT DISTINCT
14:35:12 1187  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:35:12 1188  		 FROM
14:35:12 1189  		   OFFER_PRODUCT_OFFERING
14:35:12 1190  		 WHERE
14:35:12 1191  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:35:12 1192  		     SELECT DISTINCT
14:35:12 1193  		       OFFER_OFFER_CHAIN.OFFER_ID
14:35:12 1194  		     FROM
14:35:12 1195  		       OFFER_OFFER_CHAIN
14:35:12 1196  		     WHERE
14:35:12 1197  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
14:35:12 1198  			 SELECT DISTINCT
14:35:12 1199  			   SUBSCRIPTION.OFFER_CHAIN_ID
14:35:12 1200  			 FROM
14:35:12 1201  			   SUBSCRIPTION
14:35:12 1202  			 WHERE
14:35:12 1203  			   SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 1204  		       )
14:35:12 1205  		   )
14:35:12 1206  	       )
14:35:12 1207  	   );
14:35:12 1208  
14:35:12 1209  EXCEPTION
14:35:12 1210  WHEN BAD_GROUP_ID THEN
14:35:12 1211  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1212  	   SPROC_NAME, 'No such account');
14:35:12 1213  WHEN OTHERS THEN
14:35:12 1214  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1216  END GET_ACCOUNT_PRODUCTS;
14:35:12 1217  
14:35:12 1218  /******************************************************************************/
14:35:12 1219  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
14:35:12 1220  /*
14:35:12 1221  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 1222  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1223  */
14:35:12 1224  	 in_group_id IN NUMBER,
14:35:12 1225  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 1226  ) AS
14:35:12 1227  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
14:35:12 1228  -- VARIABLES
14:35:12 1229  var_account_id NUMBER;
14:35:12 1230  -- EXCEPTIONS
14:35:12 1231  BAD_GROUP_ID EXCEPTION;
14:35:12 1232  BEGIN
14:35:12 1233  	  -- Get account id
14:35:12 1234  	 BEGIN
14:35:12 1235  	   SELECT
14:35:12 1236  	     ACCOUNT.ID into var_account_id
14:35:12 1237  	   FROM
14:35:12 1238  	     ACCOUNT
14:35:12 1239  	   WHERE
14:35:12 1240  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1241  	   EXCEPTION
14:35:12 1242  	     WHEN NO_DATA_FOUND THEN
14:35:12 1243  	       RAISE BAD_GROUP_ID;
14:35:12 1244  	 END;
14:35:12 1245  
14:35:12 1246  	 OPEN out_result_set FOR
14:35:12 1247  	 SELECT DISTINCT
14:35:12 1248  	   PRODUCT_OFFERING.ID,
14:35:12 1249  	   PRODUCT_OFFERING.PRODUCT_ID,
14:35:12 1250  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
14:35:12 1251  	   PRODUCT_OFFERING.UNIT_PRICE,
14:35:12 1252  	   PRODUCT_OFFERING.QUANTITY,
14:35:12 1253  	   PRODUCT_OFFERING.CREATE_DATE,
14:35:12 1254  	   PRODUCT_OFFERING.CREATED_BY,
14:35:12 1255  	   CAPABILITY.ID CAP_ID,
14:35:12 1256  	   CAPABILITY.CODE CAP_CODE,
14:35:12 1257  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
14:35:12 1258  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
14:35:12 1259  	 FROM
14:35:12 1260  	   OFFER_PRODUCT_OFFERING
14:35:12 1261  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:35:12 1262  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
14:35:12 1263  	 WHERE
14:35:12 1264  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:35:12 1265  	     SELECT DISTINCT
14:35:12 1266  	       OFFER_OFFER_CHAIN.OFFER_ID
14:35:12 1267  	     FROM
14:35:12 1268  	       OFFER_OFFER_CHAIN
14:35:12 1269  	     WHERE
14:35:12 1270  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
14:35:12 1271  		 SELECT DISTINCT
14:35:12 1272  		   SUBSCRIPTION.OFFER_CHAIN_ID
14:35:12 1273  		 FROM
14:35:12 1274  		   SUBSCRIPTION
14:35:12 1275  		 WHERE
14:35:12 1276  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 1277  	       )
14:35:12 1278  	   );
14:35:12 1279  
14:35:12 1280  EXCEPTION
14:35:12 1281  WHEN BAD_GROUP_ID THEN
14:35:12 1282  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1283  	   SPROC_NAME, 'No such account');
14:35:12 1284  WHEN OTHERS THEN
14:35:12 1285  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1286  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1287  END GET_ACCOUNT_PROD_OFFERRINGS;
14:35:12 1288  
14:35:12 1289  /******************************************************************************/
14:35:12 1290  
14:35:12 1291  PROCEDURE UPDATE_ACCOUNT_STATUS (
14:35:12 1292  /*
14:35:12 1293  Throws exceptions:
14:35:12 1294  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1295  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1296  */
14:35:12 1297  	 in_account_id	      IN ACCOUNT.ID%TYPE,
14:35:12 1298  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
14:35:12 1299  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
14:35:12 1300  ) AS
14:35:12 1301  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
14:35:12 1302  -- EXCEPTIONS
14:35:12 1303  BAD_ACCOUNT_ID	      EXCEPTION;
14:35:12 1304  BAD_STATUS_ID	      EXCEPTION;
14:35:12 1305  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:35:12 1306  BEGIN
14:35:12 1307  
14:35:12 1308  	 IF in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_ACTIVE
14:35:12 1309  	   AND in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_FROZEN
14:35:12 1310  	   AND in_account_status_id != GLOBAL_STATUSES_V16.ACCOUNT_DISABLED THEN
14:35:12 1311  	   RAISE BAD_STATUS_ID;
14:35:12 1312  	 END IF;
14:35:12 1313  
14:35:12 1314  	 PROCS_ACCOUNT_CRU_V16.UPDATE_ACCOUNT(
14:35:12 1315  	   in_account_id	=> in_account_id,
14:35:12 1316  	   in_account_status_id => in_account_status_id,
14:35:12 1317  	   in_updated_by	=> in_updated_by
14:35:12 1318  	 );
14:35:12 1319  
14:35:12 1320  	 IF SQL%ROWCOUNT = 0 THEN
14:35:12 1321  	   RAISE BAD_ACCOUNT_ID;
14:35:12 1322  	 END IF;
14:35:12 1323  
14:35:12 1324  EXCEPTION
14:35:12 1325  WHEN BAD_ACCOUNT_ID THEN
14:35:12 1326  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1327  	   SPROC_NAME, 'No such account');
14:35:12 1328  WHEN BAD_STATUS_ID THEN
14:35:12 1329  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1330  	   SPROC_NAME, 'Bad status id');
14:35:12 1331  WHEN OTHERS THEN
14:35:12 1332  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1333  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1334  END UPDATE_ACCOUNT_STATUS;
14:35:12 1335  
14:35:12 1336  /******************************************************************************/
14:35:12 1337  
14:35:12 1338  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
14:35:12 1339  /*
14:35:12 1340  Throws exceptions:
14:35:12 1341  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1342  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1343  */
14:35:12 1344  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
14:35:12 1345  	 out_licenses_num OUT NUMBER
14:35:12 1346  ) AS
14:35:12 1347  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
14:35:12 1348  -- VARIABLES
14:35:12 1349  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
14:35:12 1350  -- EXCEPTIONS
14:35:12 1351  BAD_ACCOUNT_ID EXCEPTION;
14:35:12 1352  BEGIN
14:35:12 1353  
14:35:12 1354  	 BEGIN
14:35:12 1355  	   SELECT
14:35:12 1356  	     ACCOUNT.ID into var_account_id
14:35:12 1357  	   FROM
14:35:12 1358  	     ACCOUNT
14:35:12 1359  	   WHERE
14:35:12 1360  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1361  	   EXCEPTION
14:35:12 1362  	     WHEN NO_DATA_FOUND THEN
14:35:12 1363  	       RAISE BAD_ACCOUNT_ID;
14:35:12 1364  	 END;
14:35:12 1365  
14:35:12 1366  	 SELECT
14:35:12 1367  	   COUNT(LICENSE.ID) into out_licenses_num
14:35:12 1368  	 FROM
14:35:12 1369  	   LICENSE
14:35:12 1370  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 1371  	 WHERE
14:35:12 1372  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:35:12 1373  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 1374  
14:35:12 1375  EXCEPTION
14:35:12 1376  WHEN BAD_ACCOUNT_ID THEN
14:35:12 1377  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1378  	   SPROC_NAME, 'No such group id');
14:35:12 1379  WHEN OTHERS THEN
14:35:12 1380  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1381  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1382  END GET_NEEDS_ENTTL_LICENSES_NUM;
14:35:12 1383  
14:35:12 1384  /******************************************************************************/
14:35:12 1385  
14:35:12 1386  PROCEDURE SET_TAX_EXEMPT (
14:35:12 1387  /*
14:35:12 1388  Throws exceptions:
14:35:12 1389  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1390  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1391  */
14:35:12 1392  	 in_group_id  IN NUMBER,
14:35:12 1393  	 in_exempt_id IN VARCHAR2
14:35:12 1394  ) AS
14:35:12 1395  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
14:35:12 1396  -- VARIABLES
14:35:12 1397  var_account_id NUMBER;
14:35:12 1398  -- EXCEPTIONS
14:35:12 1399  BAD_GROUP_ID EXCEPTION;
14:35:12 1400  BEGIN
14:35:12 1401  
14:35:12 1402  	 BEGIN
14:35:12 1403  	   SELECT
14:35:12 1404  	     ACCOUNT.ID into var_account_id
14:35:12 1405  	   FROM
14:35:12 1406  	     ACCOUNT
14:35:12 1407  	   WHERE
14:35:12 1408  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1409  	   EXCEPTION
14:35:12 1410  	     WHEN NO_DATA_FOUND THEN
14:35:12 1411  	       RAISE BAD_GROUP_ID;
14:35:12 1412  	 END;
14:35:12 1413  
14:35:12 1414  	 UPDATE
14:35:12 1415  	   ACCOUNT
14:35:12 1416  	 SET
14:35:12 1417  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
14:35:12 1418  	 WHERE
14:35:12 1419  	   ACCOUNT.ID = var_account_id;
14:35:12 1420  
14:35:12 1421  EXCEPTION
14:35:12 1422  WHEN BAD_GROUP_ID THEN
14:35:12 1423  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1424  	   SPROC_NAME, 'No such group id');
14:35:12 1425  WHEN OTHERS THEN
14:35:12 1426  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1427  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1428  END SET_TAX_EXEMPT;
14:35:12 1429  
14:35:12 1430  /******************************************************************************/
14:35:12 1431  
14:35:12 1432  PROCEDURE IS_TAX_EXEMPT (
14:35:12 1433  /*
14:35:12 1434  Throws exceptions:
14:35:12 1435  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1436  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1437  Return:
14:35:12 1438  	 GLOBAL_CONSTANTS_V16.TRUE if ACCOUNT.EXEMPT_ID is not null
14:35:12 1439  	 GLOBAL_CONSTANTS_V16.FALSE else
14:35:12 1440  */
14:35:12 1441  	 in_group_id	   IN NUMBER,
14:35:12 1442  	 out_is_tax_exempt OUT NUMBER
14:35:12 1443  ) AS
14:35:12 1444  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
14:35:12 1445  -- VARIABLES
14:35:12 1446  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
14:35:12 1447  -- EXCEPTIONS
14:35:12 1448  BAD_GROUP_ID EXCEPTION;
14:35:12 1449  BEGIN
14:35:12 1450  
14:35:12 1451  	 BEGIN
14:35:12 1452  	   SELECT
14:35:12 1453  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
14:35:12 1454  	   FROM
14:35:12 1455  	     ACCOUNT
14:35:12 1456  	   WHERE
14:35:12 1457  	     ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1458  	   EXCEPTION
14:35:12 1459  	     WHEN NO_DATA_FOUND THEN
14:35:12 1460  	       RAISE BAD_GROUP_ID;
14:35:12 1461  	 END;
14:35:12 1462  
14:35:12 1463  	 IF var_is_tax_exempt IS NULL THEN
14:35:12 1464  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.FALSE;
14:35:12 1465  	 ELSE
14:35:12 1466  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V16.TRUE;
14:35:12 1467  	 END IF;
14:35:12 1468  
14:35:12 1469  EXCEPTION
14:35:12 1470  WHEN BAD_GROUP_ID THEN
14:35:12 1471  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1472  	   SPROC_NAME, 'No such group id');
14:35:12 1473  WHEN OTHERS THEN
14:35:12 1474  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1475  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1476  END IS_TAX_EXEMPT;
14:35:12 1477  
14:35:12 1478  /******************************************************************************/
14:35:12 1479  
14:35:12 1480  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
14:35:12 1481  /*
14:35:12 1482  Throws exceptions:
14:35:12 1483  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1484  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1485  */
14:35:12 1486  	 in_account_id IN NUMBER,
14:35:12 1487  	 out_group_id  OUT NUMBER
14:35:12 1488  ) AS
14:35:12 1489  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
14:35:12 1490  BEGIN
14:35:12 1491  
14:35:12 1492  	 SELECT
14:35:12 1493  	   ACCOUNT.GROUP_ID into out_group_id
14:35:12 1494  	 FROM
14:35:12 1495  	   ACCOUNT
14:35:12 1496  	 WHERE
14:35:12 1497  	   ACCOUNT.ID = in_account_id;
14:35:12 1498  
14:35:12 1499  EXCEPTION
14:35:12 1500  WHEN NO_DATA_FOUND THEN
14:35:12 1501  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1502  	   SPROC_NAME, 'No such account');
14:35:12 1503  WHEN OTHERS THEN
14:35:12 1504  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1505  	   SPROC_NAME, 'Unknown error');
14:35:12 1506  END GET_GROUP_ID_BY_ACCOUNT_ID;
14:35:12 1507  
14:35:12 1508  /******************************************************************************/
14:35:12 1509  
14:35:12 1510  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:35:12 1511  /*
14:35:12 1512  Throws exceptions:
14:35:12 1513  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1514  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1515  */
14:35:12 1516  	 in_group_id IN NUMBER,
14:35:12 1517  	 out_account_id  OUT NUMBER
14:35:12 1518  ) AS
14:35:12 1519  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
14:35:12 1520  BEGIN
14:35:12 1521  
14:35:12 1522  	 SELECT
14:35:12 1523  	   ACCOUNT.ID into out_account_id
14:35:12 1524  	 FROM
14:35:12 1525  	   ACCOUNT
14:35:12 1526  	 WHERE
14:35:12 1527  	   ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1528  
14:35:12 1529  EXCEPTION
14:35:12 1530  WHEN NO_DATA_FOUND THEN
14:35:12 1531  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1532  	   SPROC_NAME, 'No such account');
14:35:12 1533  WHEN OTHERS THEN
14:35:12 1534  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1535  	   SPROC_NAME, 'Unknown error');
14:35:12 1536  END GET_ACCOUNT_ID_BY_GROUP_ID;
14:35:12 1537  
14:35:12 1538  /******************************************************************************/
14:35:12 1539  
14:35:12 1540  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
14:35:12 1541  /*
14:35:12 1542  This procedure is using for LOCKING only
14:35:12 1543  
14:35:12 1544  Throws exceptions:
14:35:12 1545  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1546  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1547  */
14:35:12 1548  	 in_invoice_id IN NUMBER,
14:35:12 1549  	 out_group_ids OUT SYS_REFCURSOR
14:35:12 1550  ) AS
14:35:12 1551  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
14:35:12 1552  -- VARIABLES
14:35:12 1553  temp_invoice_id		 NUMBER;
14:35:12 1554  var_subscrib_group_id	 NUMBER;
14:35:12 1555  var_gc_purchaser_group_id NUMBER;
14:35:12 1556  var_gc_redeemer_group_id  NUMBER;
14:35:12 1557  -- EXCEPTIONS
14:35:12 1558  BAD_INVOICE_ID	    EXCEPTION;
14:35:12 1559  CAN_NOT_FIND_ACCOUNT EXCEPTION;
14:35:12 1560  BEGIN
14:35:12 1561  
14:35:12 1562  	 BEGIN
14:35:12 1563  	   SELECT
14:35:12 1564  	     INVOICE.ID into temp_invoice_id
14:35:12 1565  	   FROM
14:35:12 1566  	     INVOICE
14:35:12 1567  	   WHERE
14:35:12 1568  	     INVOICE.ID = in_invoice_id;
14:35:12 1569  	   EXCEPTION
14:35:12 1570  	     WHEN NO_DATA_FOUND THEN
14:35:12 1571  	       RAISE BAD_INVOICE_ID;
14:35:12 1572  	 END;
14:35:12 1573  
14:35:12 1574  	 BEGIN
14:35:12 1575  	   SELECT DISTINCT
14:35:12 1576  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
14:35:12 1577  	   FROM
14:35:12 1578  	     ACCOUNT
14:35:12 1579  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:35:12 1580  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:35:12 1581  	   WHERE
14:35:12 1582  	     LICENSE.INVOICE_ID = in_invoice_id;
14:35:12 1583  	   EXCEPTION
14:35:12 1584  	     WHEN NO_DATA_FOUND THEN
14:35:12 1585  	       var_subscrib_group_id := NULL;
14:35:12 1586  	 END;
14:35:12 1587  
14:35:12 1588  	 IF var_subscrib_group_id IS NULL THEN
14:35:12 1589  	   BEGIN
14:35:12 1590  	     SELECT
14:35:12 1591  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
14:35:12 1592  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
14:35:12 1593  	       into
14:35:12 1594  	       var_gc_purchaser_group_id,
14:35:12 1595  	       var_gc_redeemer_group_id
14:35:12 1596  	     FROM
14:35:12 1597  	       GIFT_CERTIFICATE
14:35:12 1598  	     WHERE
14:35:12 1599  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
14:35:12 1600  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
14:35:12 1601  	     EXCEPTION
14:35:12 1602  	       WHEN NO_DATA_FOUND THEN
14:35:12 1603  		 var_gc_purchaser_group_id := NULL;
14:35:12 1604  		 var_gc_redeemer_group_id  := NULL;
14:35:12 1605  	   END;
14:35:12 1606  	 END IF;
14:35:12 1607  
14:35:12 1608  	 IF var_subscrib_group_id IS NULL
14:35:12 1609  	   AND var_gc_purchaser_group_id IS NULL
14:35:12 1610  	   AND var_gc_redeemer_group_id IS NULL THEN
14:35:12 1611  	     RAISE CAN_NOT_FIND_ACCOUNT;
14:35:12 1612  	 END IF;
14:35:12 1613  
14:35:12 1614  	 OPEN out_group_ids FOR
14:35:12 1615  	 SELECT GROUP_ID FROM (
14:35:12 1616  	   SELECT
14:35:12 1617  	     var_subscrib_group_id as "GROUP_ID"
14:35:12 1618  	   FROM
14:35:12 1619  	     DUAL
14:35:12 1620  	   UNION
14:35:12 1621  	   SELECT
14:35:12 1622  	     var_gc_purchaser_group_id as "GROUP_ID"
14:35:12 1623  	   FROM
14:35:12 1624  	     DUAL
14:35:12 1625  	   UNION
14:35:12 1626  	   SELECT
14:35:12 1627  	     var_gc_redeemer_group_id as "GROUP_ID"
14:35:12 1628  	   FROM
14:35:12 1629  	     DUAL
14:35:12 1630  	 )
14:35:12 1631  	 WHERE
14:35:12 1632  	   GROUP_ID IS NOT NULL;
14:35:12 1633  
14:35:12 1634  EXCEPTION
14:35:12 1635  WHEN BAD_INVOICE_ID THEN
14:35:12 1636  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1637  	   SPROC_NAME, 'No such invoice');
14:35:12 1638  WHEN CAN_NOT_FIND_ACCOUNT THEN
14:35:12 1639  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1640  	   SPROC_NAME, 'Could not find account for given invoice');
14:35:12 1641  WHEN OTHERS THEN
14:35:12 1642  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1643  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1644  END GET_GROUPS_ID_BY_INVOICE_ID;
14:35:12 1645  
14:35:12 1646  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
14:35:12 1647  /*
14:35:12 1648  Throws exceptions:
14:35:12 1649  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1650  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1651  */
14:35:12 1652  	 in_group_id	   IN NUMBER,
14:35:12 1653  	 out_tax_exempt_id OUT VARCHAR2
14:35:12 1654  ) AS
14:35:12 1655  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
14:35:12 1656  -- VARIABLES
14:35:12 1657  -- EXCEPTIONS
14:35:12 1658  BEGIN
14:35:12 1659  
14:35:12 1660  	 SELECT
14:35:12 1661  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
14:35:12 1662  	 FROM
14:35:12 1663  	   ACCOUNT
14:35:12 1664  	 WHERE
14:35:12 1665  	   ACCOUNT.GROUP_ID = in_group_id;
14:35:12 1666  
14:35:12 1667  EXCEPTION
14:35:12 1668  WHEN NO_DATA_FOUND THEN
14:35:12 1669  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1670  	   SPROC_NAME, 'No such account');
14:35:12 1671  WHEN OTHERS THEN
14:35:12 1672  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1673  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1674  END GET_ACCOUNT_TAX_EXEMPT_ID;
14:35:12 1675  
14:35:12 1676  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
14:35:12 1677  /*
14:35:12 1678  Throws exceptions:
14:35:12 1679  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1680  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1681  
14:35:12 1682  Result has two columns:
14:35:12 1683  subscription_id and offer_chain_id
14:35:12 1684  */
14:35:12 1685  	 in_group_id	IN NUMBER,
14:35:12 1686  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1687  ) AS
14:35:12 1688  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
14:35:12 1689  -- Variables
14:35:12 1690  var_account_id NUMBER;
14:35:12 1691  -- Exceptions
14:35:12 1692  BAD_GROUP_ID   EXCEPTION;
14:35:12 1693  BEGIN
14:35:12 1694  
14:35:12 1695  	 BEGIN
14:35:12 1696  	   SELECT
14:35:12 1697  	     ID into var_account_id
14:35:12 1698  	   FROM
14:35:12 1699  	     ACCOUNT
14:35:12 1700  	   WHERE
14:35:12 1701  	     GROUP_ID = in_group_id;
14:35:12 1702  	   EXCEPTION
14:35:12 1703  	     WHEN NO_DATA_FOUND THEN
14:35:12 1704  	       RAISE BAD_GROUP_ID;
14:35:12 1705  	 END;
14:35:12 1706  
14:35:12 1707  	 OPEN out_result_set FOR
14:35:12 1708  	 SELECT
14:35:12 1709  	   S.ID as SUBSCRIPTION_ID,
14:35:12 1710  	   OCHMD.OFFER_CHAIN_ID
14:35:12 1711  	 FROM
14:35:12 1712  	   SUBSCRIPTION S
14:35:12 1713  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
14:35:12 1714  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V16.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
14:35:12 1715  	 WHERE
14:35:12 1716  	   S.ACCOUNT_ID = var_account_id;
14:35:12 1717  
14:35:12 1718  EXCEPTION
14:35:12 1719  WHEN BAD_GROUP_ID THEN
14:35:12 1720  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1721  	   SPROC_NAME, 'No such account');
14:35:12 1722  WHEN OTHERS THEN
14:35:12 1723  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1724  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1725  END GET_UPGRADABLE_SUBSCRIPTIONS;
14:35:12 1726  
14:35:12 1727  /******************************************************************************/
14:35:12 1728  
14:35:12 1729  PROCEDURE GET_USR_ALL_SBSCR_IDS (
14:35:12 1730  /*
14:35:12 1731  Throws exceptions:
14:35:12 1732  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1733  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 1734  
14:35:12 1735  Result has two columns:
14:35:12 1736  subscription_id and offer_chain_id
14:35:12 1737  */
14:35:12 1738  	 in_group_id	    IN NUMBER,
14:35:12 1739  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 1740  ) AS
14:35:12 1741  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
14:35:12 1742  -- VARIABLES
14:35:12 1743  var_account_id NUMBER;
14:35:12 1744  -- EXCEPTIONS
14:35:12 1745  BAD_GROUP_ID EXCEPTION;
14:35:12 1746  BEGIN
14:35:12 1747  
14:35:12 1748  	 BEGIN
14:35:12 1749  	   SELECT
14:35:12 1750  	     A.ID INTO var_account_id
14:35:12 1751  	   FROM
14:35:12 1752  	     ACCOUNT A
14:35:12 1753  	   WHERE
14:35:12 1754  	     A.GROUP_ID = in_group_id;
14:35:12 1755  	   EXCEPTION
14:35:12 1756  	     WHEN NO_DATA_FOUND THEN
14:35:12 1757  	       RAISE BAD_GROUP_ID;
14:35:12 1758  	 END;
14:35:12 1759  
14:35:12 1760  	 OPEN out_result_set FOR
14:35:12 1761  	 SELECT
14:35:12 1762  	   S.ID
14:35:12 1763  	 FROM
14:35:12 1764  	   SUBSCRIPTION S
14:35:12 1765  	 WHERE
14:35:12 1766  	   S.ACCOUNT_ID = var_account_id
14:35:12 1767  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
14:35:12 1768  
14:35:12 1769  EXCEPTION
14:35:12 1770  WHEN BAD_GROUP_ID THEN
14:35:12 1771  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1772  	   SPROC_NAME, 'No such account');
14:35:12 1773  WHEN OTHERS THEN
14:35:12 1774  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1775  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1776  END GET_USR_ALL_SBSCR_IDS;
14:35:12 1777  
14:35:12 1778  /******************************************************************************/
14:35:12 1779  
14:35:12 1780  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
14:35:12 1781  /*
14:35:12 1782  Throws exceptions:
14:35:12 1783  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1784  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1785  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:12 1786  
14:35:12 1787  Result has two columns:
14:35:12 1788  subscription_id and offer_chain_id
14:35:12 1789  */
14:35:12 1790  	 in_group_id	    IN NUMBER,
14:35:12 1791  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:35:12 1792  	 out_result_set     OUT SYS_REFCURSOR
14:35:12 1793  ) AS
14:35:12 1794  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
14:35:12 1795  -- VARIABLES
14:35:12 1796  var_account_id NUMBER;
14:35:12 1797  -- EXCEPTIONS
14:35:12 1798  BAD_GROUP_ID	   EXCEPTION;
14:35:12 1799  BAD_OFFER_CHAIN_IDS EXCEPTION;
14:35:12 1800  BEGIN
14:35:12 1801  
14:35:12 1802  	 IF in_offer_chain_ids IS NULL THEN
14:35:12 1803  	   RAISE BAD_OFFER_CHAIN_IDS;
14:35:12 1804  	 END IF;
14:35:12 1805  
14:35:12 1806  	 BEGIN
14:35:12 1807  	   SELECT
14:35:12 1808  	     A.ID INTO var_account_id
14:35:12 1809  	   FROM
14:35:12 1810  	     ACCOUNT A
14:35:12 1811  	   WHERE
14:35:12 1812  	     A.GROUP_ID = in_group_id;
14:35:12 1813  	   EXCEPTION
14:35:12 1814  	     WHEN NO_DATA_FOUND THEN
14:35:12 1815  	       RAISE BAD_GROUP_ID;
14:35:12 1816  	 END;
14:35:12 1817  
14:35:12 1818  	 OPEN out_result_set FOR
14:35:12 1819  	 SELECT
14:35:12 1820  	   S.ID
14:35:12 1821  	 FROM
14:35:12 1822  	   SUBSCRIPTION S
14:35:12 1823  	 WHERE
14:35:12 1824  	   S.ACCOUNT_ID = var_account_id
14:35:12 1825  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
14:35:12 1826  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V16.SUBSCRIPTION_ACTIVE;
14:35:12 1827  
14:35:12 1828  EXCEPTION
14:35:12 1829  WHEN BAD_OFFER_CHAIN_IDS THEN
14:35:12 1830  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.INVALID_PARAMETER,
14:35:12 1831  	   SPROC_NAME, 'Offer chains ids parameter is null');
14:35:12 1832  WHEN BAD_GROUP_ID THEN
14:35:12 1833  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 1834  	   SPROC_NAME, 'No such account');
14:35:12 1835  WHEN OTHERS THEN
14:35:12 1836  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1837  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1838  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
14:35:12 1839  
14:35:12 1840  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
14:35:12 1841  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:35:12 1842  	 in_expiration_date IN DATE,
14:35:12 1843  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
14:35:12 1844  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
14:35:12 1845  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
14:35:12 1846  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
14:35:12 1847  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
14:35:12 1848  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
14:35:12 1849  	 in_lower_bound IN NUMBER DEFAULT 1,
14:35:12 1850  	 in_upper_bound IN NUMBER DEFAULT 11,
14:35:12 1851  	 out_result_set OUT SYS_REFCURSOR
14:35:12 1852  ) AS
14:35:12 1853  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
14:35:12 1854  BEGIN
14:35:12 1855  
14:35:12 1856  	 OPEN out_result_set FOR
14:35:12 1857  	     SELECT
14:35:12 1858  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
14:35:12 1859  	     FROM
14:35:12 1860  	       account a,
14:35:12 1861  	       credit_card cc
14:35:12 1862  	     WHERE
14:35:12 1863  	       cc.expiration_date = in_expiration_date and
14:35:12 1864  	       cc.last_four_cc = in_last_four_cc and
14:35:12 1865  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
14:35:12 1866  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
14:35:12 1867  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
14:35:12 1868  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
14:35:12 1869  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
14:35:12 1870  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
14:35:12 1871  	       a.id = cc.account_id and
14:35:12 1872  	       rownum >= in_lower_bound and
14:35:12 1873  	       rownum <= in_upper_bound
14:35:12 1874  	   ;
14:35:12 1875  
14:35:12 1876  EXCEPTION
14:35:12 1877  WHEN OTHERS THEN
14:35:12 1878  	 PROCS_COMMON_V16.THROW_EXCEPTION(APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR,
14:35:12 1879  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:35:12 1880  END GET_GROUP_IDS_BY_CC_INFO;
14:35:12 1881  
14:35:12 1882  END PROCS_ACCOUNT_V16;
14:35:12 1883  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:35:12   4  /*
14:35:12   5  Throws exceptions:
14:35:12   6  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12   7  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12   8  */
14:35:12   9  	  in_offer_chain_id IN	 NUMBER,
14:35:12  10  	  out_result_set    OUT  SYS_REFCURSOR
14:35:12  11  ) AS
14:35:12  12  BEGIN
14:35:12  13  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_BY_ID (
14:35:12  14  	  in_offer_chain_id => in_offer_chain_id,
14:35:12  15  	  out_result_set => out_result_set
14:35:12  16  	);
14:35:12  17  END GET_OFFER_CHAIN_BY_ID;
14:35:12  18  
14:35:12  19  PROCEDURE GET_PENDING_INVOICES (
14:35:12  20  /*
14:35:12  21  Throws exceptions:
14:35:12  22  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  23  */
14:35:12  24  	out_result_set1      OUT SYS_REFCURSOR,
14:35:12  25  	out_result_set2      OUT SYS_REFCURSOR,
14:35:12  26  	out_result_set3      OUT SYS_REFCURSOR,
14:35:12  27  	in_row_number	     IN NUMBER DEFAULT NULL
14:35:12  28  ) AS
14:35:12  29  BEGIN
14:35:12  30  	PROCS_INVOICE_V16.GET_PENDING_INVOICES(
14:35:12  31  	  out_result_set1,
14:35:12  32  	  out_result_set2,
14:35:12  33  	  out_result_set3,
14:35:12  34  	  in_row_number
14:35:12  35  	);
14:35:12  36  END GET_PENDING_INVOICES;
14:35:12  37  
14:35:12  38  /********************************************************/
14:35:12  39  PROCEDURE GET_PENDING_REFUND_CHARGES (
14:35:12  40  /*
14:35:12  41  Throws exceptions:
14:35:12  42  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  43  */
14:35:12  44  	out_result_set	    OUT SYS_REFCURSOR,
14:35:12  45  	in_row_number	    IN NUMBER DEFAULT NULL
14:35:12  46  ) AS
14:35:12  47  BEGIN
14:35:12  48  	PROCS_CHARGE_V16.GET_PENDING_REFUND_CHARGES(
14:35:12  49  	  out_result_set,
14:35:12  50  	  in_row_number
14:35:12  51  	);
14:35:12  52  END GET_PENDING_REFUND_CHARGES;
14:35:12  53  /********************************************************/
14:35:12  54  
14:35:12  55  PROCEDURE GET_UNPROCESSED_CHARGES (
14:35:12  56  /*
14:35:12  57  Throws exceptions:
14:35:12  58  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12  59  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  60  */
14:35:12  61  	in_invoice_id  IN NUMBER,
14:35:12  62  	out_result_set OUT SYS_REFCURSOR
14:35:12  63  ) AS
14:35:12  64  BEGIN
14:35:12  65  	PROCS_CHARGE_V16.GET_UNPROCESSED_CHARGES(
14:35:12  66  	  in_invoice_id,
14:35:12  67  	  out_result_set
14:35:12  68  	);
14:35:12  69  END GET_UNPROCESSED_CHARGES;
14:35:12  70  
14:35:12  71  /********************************************************/
14:35:12  72  
14:35:12  73  PROCEDURE GET_PROCESSED_CHARGES (
14:35:12  74  /*
14:35:12  75  Throws exceptions:
14:35:12  76  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12  77  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  78  */
14:35:12  79  	in_invoice_id  IN NUMBER,
14:35:12  80  	out_result_set OUT SYS_REFCURSOR
14:35:12  81  ) AS
14:35:12  82  BEGIN
14:35:12  83  	PROCS_CHARGE_V16.GET_PROCESSED_CHARGES(
14:35:12  84  	  in_invoice_id,
14:35:12  85  	  out_result_set
14:35:12  86  	);
14:35:12  87  END GET_PROCESSED_CHARGES;
14:35:12  88  
14:35:12  89  /********************************************************/
14:35:12  90  
14:35:12  91  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
14:35:12  92  /*
14:35:12  93  Throws exceptions:
14:35:12  94  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  95  */
14:35:12  96  	in_transaction_id	      IN NUMBER,
14:35:12  97  	in_transaction_attempt_status IN NUMBER,
14:35:12  98  	out_result_set		      OUT SYS_REFCURSOR
14:35:12  99  ) AS
14:35:12 100  BEGIN
14:35:12 101  	PROCS_TRANSACTION_V16.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
14:35:12 102  	  in_transaction_id,
14:35:12 103  	  in_transaction_attempt_status,
14:35:12 104  	  out_result_set
14:35:12 105  	);
14:35:12 106  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
14:35:12 107  
14:35:12 108  /********************************************************/
14:35:12 109  
14:35:12 110  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
14:35:12 111  /*
14:35:12 112  Throws exceptions:
14:35:12 113  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 114  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 115  */
14:35:12 116  	in_transaction_attempt_id     IN NUMBER,
14:35:12 117  	in_transaction_attempt_status IN NUMBER
14:35:12 118  ) AS
14:35:12 119  BEGIN
14:35:12 120  	PROCS_TRANSACTION_V16.UPDATE_TRNSCTN_ATTEMPT_STATUS(
14:35:12 121  	   in_transaction_attempt_id,
14:35:12 122  	   in_transaction_attempt_status
14:35:12 123  	);
14:35:12 124  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
14:35:12 125  
14:35:12 126  /********************************************************/
14:35:12 127  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
14:35:12 128  /*
14:35:12 129  Throws exceptions:
14:35:12 130  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 131  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 132  */
14:35:12 133  	in_invoice_id	IN  NUMBER,
14:35:12 134  	out_result_set OUT SYS_REFCURSOR
14:35:12 135  ) AS
14:35:12 136  BEGIN
14:35:12 137  	PROCS_TRANSACTION_V16.GET_CLOSED_REFUNDS_BY_INVOICE(
14:35:12 138  	   in_invoice_id,
14:35:12 139  	   out_result_set
14:35:12 140  	);
14:35:12 141  END GET_CLOSED_REFUNDS_BY_INVOICE;
14:35:12 142  
14:35:12 143  /********************************************************/
14:35:12 144  
14:35:12 145  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
14:35:12 146  /*
14:35:12 147  Throws exceptions:
14:35:12 148  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 149  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 150  */
14:35:12 151  	in_transaction_attempt_id IN NUMBER,
14:35:12 152  	in_updated_by		  IN VARCHAR2
14:35:12 153  ) AS
14:35:12 154  BEGIN
14:35:12 155  	PROCS_TRANSACTION_V16.UPDATE_TRNSCTN_ATTEMPT_TIME(
14:35:12 156  	  in_transaction_attempt_id,
14:35:12 157  	  in_updated_by
14:35:12 158  	);
14:35:12 159  END UPDATE_TRNSCTN_ATTEMPT_TIME;
14:35:12 160  
14:35:12 161  /********************************************************/
14:35:12 162  
14:35:12 163  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
14:35:12 164  /*
14:35:12 165  Throws exceptions:
14:35:12 166  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 167  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 168  */
14:35:12 169  	in_transaction_id	   IN NUMBER,
14:35:12 170  	in_trans_attempt_status    IN NUMBER,
14:35:12 171  	in_external_status_code    IN VARCHAR2,
14:35:12 172  	in_external_status_message IN VARCHAR2,
14:35:12 173  	in_created_by		   IN VARCHAR2,
14:35:12 174  	in_ext_transaction_id	   IN VARCHAR2,
14:35:12 175  	out_transaction_attempt_id OUT NUMBER
14:35:12 176  ) AS
14:35:12 177  BEGIN
14:35:12 178  	PROCS_TRANSACTION_V16.CREATE_TRANSACTION_ATTEMPT(
14:35:12 179  	  in_transaction_id,
14:35:12 180  	  in_trans_attempt_status,
14:35:12 181  	  in_external_status_code,
14:35:12 182  	  in_external_status_message,
14:35:12 183  	  in_created_by,
14:35:12 184  	  in_ext_transaction_id,
14:35:12 185  	  out_transaction_attempt_id
14:35:12 186  	);
14:35:12 187  END CREATE_TRANSACTION_ATTEMPT;
14:35:12 188  
14:35:12 189  /********************************************************/
14:35:12 190  
14:35:12 191  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
14:35:12 192  /*
14:35:12 193  Throws exceptions:
14:35:12 194  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 195  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 196  */
14:35:12 197  	in_transaction_attempt_id IN NUMBER,
14:35:12 198  	in_ext_status_code	  IN VARCHAR2,
14:35:12 199  	in_ext_status_message	  IN VARCHAR2,
14:35:12 200  	in_ext_transaction_id	  IN VARCHAR2
14:35:12 201  ) AS
14:35:12 202  BEGIN
14:35:12 203  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_ATTEMPT_INF(
14:35:12 204  	  in_transaction_attempt_id,
14:35:12 205  	  in_ext_status_code,
14:35:12 206  	  in_ext_status_message,
14:35:12 207  	  in_ext_transaction_id
14:35:12 208  	);
14:35:12 209  END UPDATE_TRANSACTION_ATTEMPT_INF;
14:35:12 210  
14:35:12 211  /********************************************************/
14:35:12 212  
14:35:12 213  PROCEDURE UPDATE_TRANSACTION_STATUS (
14:35:12 214  /*
14:35:12 215  Throws exceptions:
14:35:12 216  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 217  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 218  */
14:35:12 219  	in_transaction_id	 IN NUMBER,
14:35:12 220  	in_updated_by		 IN VARCHAR2,
14:35:12 221  	in_transaction_status_id IN NUMBER
14:35:12 222  ) AS
14:35:12 223  BEGIN
14:35:12 224  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_STATUS(
14:35:12 225  	  in_transaction_id,
14:35:12 226  	  in_updated_by,
14:35:12 227  	  in_transaction_status_id
14:35:12 228  	);
14:35:12 229  END UPDATE_TRANSACTION_STATUS;
14:35:12 230  
14:35:12 231  /********************************************************/
14:35:12 232  
14:35:12 233  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
14:35:12 234  /*
14:35:12 235  Throws exceptions:
14:35:12 236  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 237  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 238  */
14:35:12 239  	in_transaction_id IN  NUMBER,
14:35:12 240  	out_attempts_num  OUT NUMBER
14:35:12 241  ) AS
14:35:12 242  BEGIN
14:35:12 243  	PROCS_TRANSACTION_V16.GET_FAILED_ATTEMPTS_NUMBER(
14:35:12 244  	  in_transaction_id,
14:35:12 245  	  out_attempts_num
14:35:12 246  	);
14:35:12 247  END GET_FAILED_ATTEMPTS_NUMBER;
14:35:12 248  
14:35:12 249  /********************************************************/
14:35:12 250  
14:35:12 251  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
14:35:12 252  /*
14:35:12 253  Throws exceptions:
14:35:12 254  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 255  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 256  */
14:35:12 257  	in_transaction_id IN  NUMBER,
14:35:12 258  	out_is_successfull  OUT NUMBER
14:35:12 259  ) AS
14:35:12 260  BEGIN
14:35:12 261  	PROCS_TRANSACTION_V16.IS_TRANSACTION_SUCCESSFULL(
14:35:12 262  	  in_transaction_id,
14:35:12 263  	  out_is_successfull
14:35:12 264  	);
14:35:12 265  END IS_TRANSACTION_SUCCESSFULL;
14:35:12 266  /********************************************************/
14:35:12 267  
14:35:12 268  PROCEDURE UPDATE_INVOICE_STATUS (
14:35:12 269  /*
14:35:12 270  Throws exceptions:
14:35:12 271  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 272  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 273  */
14:35:12 274  	in_invoice_id		       IN NUMBER,
14:35:12 275  	in_invoice_status_id	       IN NUMBER,
14:35:12 276  	in_updated_by		       IN VARCHAR2
14:35:12 277  ) AS
14:35:12 278  BEGIN
14:35:12 279  	PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
14:35:12 280  	  in_invoice_id,
14:35:12 281  	  in_invoice_status_id,
14:35:12 282  	  in_updated_by
14:35:12 283  	);
14:35:12 284  END UPDATE_INVOICE_STATUS;
14:35:12 285  
14:35:12 286  /********************************************************/
14:35:12 287  
14:35:12 288  PROCEDURE SUSPEND_SUBSCRIPTION(
14:35:12 289  /*
14:35:12 290  Throws exceptions:
14:35:12 291  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 292  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 293  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 294  */
14:35:12 295  	  in_subs_id	IN NUMBER ,
14:35:12 296  	  in_updated_by IN VARCHAR2
14:35:12 297  ) AS
14:35:12 298  BEGIN
14:35:12 299  	PROCS_SUBSCRIPTION_V16.SUSPEND_SUBSCRIPTION(
14:35:12 300  	  in_subs_id,
14:35:12 301  	  in_updated_by
14:35:12 302  	);
14:35:12 303  END SUSPEND_SUBSCRIPTION;
14:35:12 304  
14:35:12 305  /********************************************************/
14:35:12 306  
14:35:12 307  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:35:12 308  /*
14:35:12 309  Throws exceptions:
14:35:12 310  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 311  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 312  */
14:35:12 313  	in_credit_card_id IN  NUMBER,
14:35:12 314  	out_result_set	  OUT SYS_REFCURSOR
14:35:12 315  ) AS
14:35:12 316  BEGIN
14:35:12 317  	PROCS_FIN_INSTRUMENTS_V16.GET_CREDIT_CARD_BY_ID(
14:35:12 318  	  in_credit_card_id,
14:35:12 319  	  out_result_set
14:35:12 320  	);
14:35:12 321  END GET_CREDIT_CARD_BY_ID;
14:35:12 322  
14:35:12 323  /*********************************************************/
14:35:12 324  
14:35:12 325  PROCEDURE GET_TRANSACTION_AMOUNT (
14:35:12 326  /*
14:35:12 327  Throws exceptions:
14:35:12 328  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 329  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 330  */
14:35:12 331  	in_transaction_id      IN  NUMBER,
14:35:12 332  	out_transaction_amount OUT NUMBER
14:35:12 333  ) AS
14:35:12 334  BEGIN
14:35:12 335  	PROCS_TRANSACTION_V16.GET_TRANSACTION_AMOUNT(
14:35:12 336  	  in_transaction_id,
14:35:12 337  	  out_transaction_amount
14:35:12 338  	);
14:35:12 339  END GET_TRANSACTION_AMOUNT;
14:35:12 340  
14:35:12 341  /***********************************************************/
14:35:12 342  
14:35:12 343  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
14:35:12 344  /*
14:35:12 345  Throws exceptions:
14:35:12 346  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 347  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 348  */
14:35:12 349  	in_invoice_id  IN  NUMBER,
14:35:12 350  	out_account_id OUT NUMBER
14:35:12 351  ) AS
14:35:12 352  BEGIN
14:35:12 353  	PROCS_INVOICE_V16.GET_ACCOUNT_BY_INVOICE_ID(
14:35:12 354  	  in_invoice_id,
14:35:12 355  	  out_account_id
14:35:12 356  	);
14:35:12 357  END GET_ACCOUNT_BY_INVOICE_ID;
14:35:12 358  
14:35:12 359  /************************************************************/
14:35:12 360  
14:35:12 361  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
14:35:12 362  /*
14:35:12 363  Throws exceptions:
14:35:12 364  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 365  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 366  */
14:35:12 367  	in_gift_certificate_id IN NUMBER,
14:35:12 368  	out_result_set	       OUT SYS_REFCURSOR
14:35:12 369  ) AS
14:35:12 370  BEGIN
14:35:12 371  	PROCS_FIN_INSTRUMENTS_V16.GET_GIFT_CERTIFICATE_BY_ID (
14:35:12 372  	  in_gift_certificate_id,
14:35:12 373  	  out_result_set
14:35:12 374  	);
14:35:12 375  END GET_GIFT_CERTIFICATE_BY_ID;
14:35:12 376  
14:35:12 377  /**************************************************************/
14:35:12 378  
14:35:12 379  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
14:35:12 380  /*
14:35:12 381  Throws exceptions:
14:35:12 382  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 383  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 384  */
14:35:12 385  	in_charge_id	    IN NUMBER,
14:35:12 386  	out_subscription_id OUT NUMBER
14:35:12 387  ) AS
14:35:12 388  BEGIN
14:35:12 389  	PROCS_CHARGE_V16.GET_SUBSCR_ID_BY_CHARGE_ID(
14:35:12 390  	  in_charge_id,
14:35:12 391  	  out_subscription_id
14:35:12 392  	);
14:35:12 393  END GET_SUBSCR_ID_BY_CHARGE_ID;
14:35:12 394  
14:35:12 395  /**************************************************************/
14:35:12 396  
14:35:12 397  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
14:35:12 398  /*
14:35:12 399  Throws exceptions:
14:35:12 400  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 401  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 402  */
14:35:12 403  	in_gift_certificate_id IN NUMBER,
14:35:12 404  	in_charge_id	       IN NUMBER,
14:35:12 405  	out_result	       OUT NUMBER
14:35:12 406  ) AS
14:35:12 407  BEGIN
14:35:12 408  	PROCS_FIN_INSTRUMENTS_V16.IS_GCERT_FOR_PROPER_OFFER (
14:35:12 409  	  in_gift_certificate_id,
14:35:12 410  	  in_charge_id,
14:35:12 411  	  out_result
14:35:12 412  	);
14:35:12 413  END IS_GCERT_FOR_PROPER_OFFER;
14:35:12 414  
14:35:12 415  /**************************************************************/
14:35:12 416  
14:35:12 417  PROCEDURE GET_SUBSCRIPTION_INFO (
14:35:12 418  /*
14:35:12 419  Throws exceptions:
14:35:12 420  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 421  */
14:35:12 422  	  in_subscription_id IN  NUMBER,
14:35:12 423  	  out_result_set      OUT SYS_REFCURSOR
14:35:12 424  ) AS
14:35:12 425  BEGIN
14:35:12 426  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTION_INFO (
14:35:12 427  	  in_subscription_id,
14:35:12 428  	  out_result_set
14:35:12 429  	);
14:35:12 430  END GET_SUBSCRIPTION_INFO;
14:35:12 431  
14:35:12 432  /****************************************************************/
14:35:12 433  
14:35:12 434  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:35:12 435  /*
14:35:12 436  Throws exceptions:
14:35:12 437  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 438  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 439  */
14:35:12 440  	in_invoice_id IN  NUMBER,
14:35:12 441  	out_amount    OUT NUMBER
14:35:12 442  ) AS
14:35:12 443  BEGIN
14:35:12 444  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
14:35:12 445  	  in_invoice_id,
14:35:12 446  	  out_amount
14:35:12 447  	);
14:35:12 448  END CALCULATE_INVOICE_AMOUNT;
14:35:12 449  
14:35:12 450  /****************************************************************/
14:35:12 451  
14:35:12 452  PROCEDURE GET_TRANSACTION_BY_ID (
14:35:12 453  /*
14:35:12 454  Throws exceptions:
14:35:12 455  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 456  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 457  */
14:35:12 458  	in_transaction_id IN NUMBER,
14:35:12 459  	out_result_set	  OUT SYS_REFCURSOR
14:35:12 460  ) AS
14:35:12 461  BEGIN
14:35:12 462  	PROCS_TRANSACTION_V16.GET_TRANSACTION_BY_ID(
14:35:12 463  	  in_transaction_id,
14:35:12 464  	  out_result_set
14:35:12 465  	);
14:35:12 466  END GET_TRANSACTION_BY_ID;
14:35:12 467  
14:35:12 468  /****************************************************************/
14:35:12 469  
14:35:12 470  PROCEDURE UPDATE_CHARGE_STATUS (
14:35:12 471  /*
14:35:12 472  Throws exceptions:
14:35:12 473  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 474  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 475  */
14:35:12 476  	in_charge_id	    IN CHARGE.ID%TYPE,
14:35:12 477  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:35:12 478  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
14:35:12 479  ) AS
14:35:12 480  BEGIN
14:35:12 481  	PROCS_CHARGE_V16.UPDATE_CHARGE_STATUS(
14:35:12 482  	  in_charge_id,
14:35:12 483  	  in_charge_status_id,
14:35:12 484  	  in_updated_by
14:35:12 485  	);
14:35:12 486  END UPDATE_CHARGE_STATUS;
14:35:12 487  
14:35:12 488  /****************************************************************/
14:35:12 489  
14:35:12 490  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:35:12 491  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:12 492  	out_result_set OUT SYS_REFCURSOR
14:35:12 493  ) AS
14:35:12 494  BEGIN
14:35:12 495  	PROCS_FIN_INSTRUMENTS_V16.GET_GC_BY_PURCH_INVOICE_ID(
14:35:12 496  	  in_invoice_id,
14:35:12 497  	  out_result_set
14:35:12 498  	);
14:35:12 499  END GET_GC_BY_PURCH_INVOICE_ID;
14:35:12 500  
14:35:12 501  /****************************************************************/
14:35:12 502  
14:35:12 503  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:35:12 504  /*
14:35:12 505  Throws exceptions:
14:35:12 506  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 507  APP_EXCEPTION_CODES_V16.INTRNAL_ERROR
14:35:12 508  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 509  */
14:35:12 510  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:35:12 511  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:35:12 512  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:35:12 513  ) AS
14:35:12 514  BEGIN
14:35:12 515  	PROCS_TRANSACTION_V16.UPDATE_TRANSACTION_ORDER_ID(
14:35:12 516  	  in_transaction_id,
14:35:12 517  	  in_order_id,
14:35:12 518  	  in_updated_by
14:35:12 519  	);
14:35:12 520  END UPDATE_TRANSACTION_ORDER_ID;
14:35:12 521  
14:35:12 522  /****************************************************************/
14:35:12 523  
14:35:12 524  PROCEDURE GET_ACTIVE_INVOICES_IDS (
14:35:12 525  /*
14:35:12 526  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 527  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 528  */
14:35:12 529  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
14:35:12 530  	in_subscription_id IN NUMBER,
14:35:12 531  	out_result_set	   OUT SYS_REFCURSOR
14:35:12 532  ) AS
14:35:12 533  BEGIN
14:35:12 534  	PROCS_SUBSCRIPTION_V16.GET_ACTIVE_INVOICES_IDS(
14:35:12 535  	  in_subscription_id,
14:35:12 536  	  out_result_set
14:35:12 537  	);
14:35:12 538  END GET_ACTIVE_INVOICES_IDS;
14:35:12 539  
14:35:12 540  /****************************************************************/
14:35:12 541  
14:35:12 542  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
14:35:12 543  /*
14:35:12 544  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 545  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 546  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 547  */
14:35:12 548  --  in_invoice_id        IN INVOICE.ID%TYPE,
14:35:12 549  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
14:35:12 550  -- norlov: in_refundable	      IN refund enabled
14:35:12 551  	in_invoice_id	     IN NUMBER,
14:35:12 552  	in_updated_by	     IN VARCHAR2,
14:35:12 553  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V16.FALSE
14:35:12 554  --  in_cancellation_date IN DATE DEFAULT current_timestamp
14:35:12 555  ) AS
14:35:12 556  BEGIN
14:35:12 557  	PROCS_SUBSCRIPTION_V16.CANCEL_SUBSCRIPTION_INVOICE(
14:35:12 558  	  in_invoice_id,
14:35:12 559  	  in_updated_by,
14:35:12 560  	  in_refundable
14:35:12 561  	);
14:35:12 562  END CANCEL_SUBSCRIPTION_INVOICE;
14:35:12 563  
14:35:12 564  /****************************************************************/
14:35:12 565  
14:35:12 566  PROCEDURE FINALIZE_CANCELATION (
14:35:12 567  /*
14:35:12 568  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 569  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 570  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 571  */
14:35:12 572  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
14:35:12 573  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
14:35:12 574  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
14:35:12 575  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:35:12 576  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:35:12 577  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
14:35:12 578  	in_subscription_id    IN NUMBER,
14:35:12 579  	in_cancelation_reason IN VARCHAR2,
14:35:12 580  	in_cancelation_date   IN DATE,
14:35:12 581  	in_note 	      IN VARCHAR2,
14:35:12 582  	in_agent_id	      IN NUMBER,
14:35:12 583  	in_updated_by	      IN VARCHAR2
14:35:12 584  ) AS
14:35:12 585  BEGIN
14:35:12 586  	PROCS_SUBSCRIPTION_V16.FINALIZE_CANCELATION(
14:35:12 587  	  in_subscription_id,
14:35:12 588  	  in_cancelation_reason,
14:35:12 589  	  in_cancelation_date,
14:35:12 590  	  in_note,
14:35:12 591  	  in_agent_id,
14:35:12 592  	  in_updated_by
14:35:12 593  	);
14:35:12 594  END FINALIZE_CANCELATION;
14:35:12 595  
14:35:12 596  /****************************************************************/
14:35:12 597  
14:35:12 598  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
14:35:12 599  /*
14:35:12 600  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 601  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 602  */
14:35:12 603  	in_subscription_id IN NUMBER,
14:35:12 604  	out_result_set	   OUT SYS_REFCURSOR
14:35:12 605  ) AS
14:35:12 606  BEGIN
14:35:12 607  	PROCS_SUBSCRIPTION_V16.GET_SUBSCR_PROD_OFFERRINGS(
14:35:12 608  	  in_subscription_id,
14:35:12 609  	  out_result_set
14:35:12 610  	);
14:35:12 611  END GET_SUBSCR_PROD_OFFERRINGS;
14:35:12 612  
14:35:12 613  /****************************************************************/
14:35:12 614  
14:35:12 615  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:35:12 616  /*
14:35:12 617  Throws exceptions (codes):
14:35:12 618  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 619  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 620  */
14:35:12 621  	in_offer_chain_id IN NUMBER,
14:35:12 622  	in_meta_data_name IN VARCHAR2,
14:35:12 623  	out_result_set	  OUT SYS_REFCURSOR
14:35:12 624  )AS
14:35:12 625  BEGIN
14:35:12 626  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_META_DATA(
14:35:12 627  	  in_offer_chain_id,
14:35:12 628  	  in_meta_data_name,
14:35:12 629  	  out_result_set
14:35:12 630  	);
14:35:12 631  END GET_OFFER_CHAIN_META_DATA;
14:35:12 632  
14:35:12 633  /****************************************************************/
14:35:12 634  
14:35:12 635  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
14:35:12 636  /*
14:35:12 637  Throws exceptions (codes):
14:35:12 638  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 639  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 640  */
14:35:12 641  	in_product_offering_id IN NUMBER,
14:35:12 642  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
14:35:12 643  	out_result_set	       OUT SYS_REFCURSOR
14:35:12 644  )AS
14:35:12 645  BEGIN
14:35:12 646  	PROCS_OFFER_CHAIN_V16.GET_PRODUCT_OFFERING_META_DATA(
14:35:12 647  	  in_product_offering_id,
14:35:12 648  	  in_meta_data_name,
14:35:12 649  	  out_result_set
14:35:12 650  	);
14:35:12 651  END GET_PRODUCT_OFFERING_META_DATA;
14:35:12 652  
14:35:12 653  /****************************************************************/
14:35:12 654  
14:35:12 655  PROCEDURE READ_ACCOUNT (
14:35:12 656  	in_account_id  IN ACCOUNT.ID%TYPE,
14:35:12 657  	out_result_set OUT SYS_REFCURSOR
14:35:12 658  )AS
14:35:12 659  BEGIN
14:35:12 660  	PROCS_ACCOUNT_CRU_V16.READ_ACCOUNT(
14:35:12 661  	  in_account_id,
14:35:12 662  	  out_result_set
14:35:12 663  	);
14:35:12 664  END READ_ACCOUNT;
14:35:12 665  
14:35:12 666  /****************************************************************/
14:35:12 667  
14:35:12 668  PROCEDURE GET_COLLECTED_CHARGES (
14:35:12 669  /*
14:35:12 670  Throws exceptions:
14:35:12 671  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 672  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 673  */
14:35:12 674  	in_invoice_id  IN NUMBER,
14:35:12 675  	out_result_set OUT SYS_REFCURSOR
14:35:12 676  ) AS
14:35:12 677  BEGIN
14:35:12 678  	PROCS_CHARGE_V16.GET_COLLECTED_CHARGES(
14:35:12 679  	  in_invoice_id,
14:35:12 680  	  out_result_set
14:35:12 681  	);
14:35:12 682  END GET_COLLECTED_CHARGES;
14:35:12 683  
14:35:12 684  /****************************************************************/
14:35:12 685  
14:35:12 686  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
14:35:12 687  /*
14:35:12 688  Throws exceptions:
14:35:12 689  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 690  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 691  */
14:35:12 692  	in_invoice_id IN NUMBER,
14:35:12 693  	out_group_ids OUT SYS_REFCURSOR
14:35:12 694  ) AS
14:35:12 695  BEGIN
14:35:12 696  
14:35:12 697  	PROCS_ACCOUNT_V16.GET_GROUPS_ID_BY_INVOICE_ID(
14:35:12 698  	  in_invoice_id,
14:35:12 699  	  out_group_ids
14:35:12 700  	);
14:35:12 701  
14:35:12 702  END GET_GROUPS_ID_BY_INVOICE_ID;
14:35:12 703  
14:35:12 704  /****************************************************************/
14:35:12 705  
14:35:12 706  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:35:12 707  /*
14:35:12 708  Throws exceptions:
14:35:12 709  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 710  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 711  */
14:35:12 712  	in_group_id IN NUMBER,
14:35:12 713  	out_account_id	OUT NUMBER
14:35:12 714  ) AS
14:35:12 715  BEGIN
14:35:12 716  
14:35:12 717  	PROCS_ACCOUNT_V16.GET_ACCOUNT_ID_BY_GROUP_ID(
14:35:12 718  	  in_group_id,
14:35:12 719  	  out_account_id
14:35:12 720  	);
14:35:12 721  
14:35:12 722  END GET_ACCOUNT_ID_BY_GROUP_ID;
14:35:12 723  
14:35:12 724  /****************************************************************/
14:35:12 725  
14:35:12 726  PROCEDURE LOCK_ACCOUNT (
14:35:12 727  	in_group_id    IN NUMBER,
14:35:12 728  	in_lock_key    IN VARCHAR2,
14:35:12 729  	in_seconds_num IN NUMBER,
14:35:12 730  	in_created_by  IN VARCHAR2,
14:35:12 731  	in_reason      IN VARCHAR2
14:35:12 732  ) AS
14:35:12 733  BEGIN
14:35:12 734  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
14:35:12 735  	  in_group_id,
14:35:12 736  	  in_lock_key,
14:35:12 737  	  in_seconds_num,
14:35:12 738  	  in_created_by,
14:35:12 739  	  in_reason
14:35:12 740  	);
14:35:12 741  END LOCK_ACCOUNT;
14:35:12 742  
14:35:12 743  /****************************************************************/
14:35:12 744  
14:35:12 745  PROCEDURE RELEASE_LOCK (
14:35:12 746  	in_group_id IN NUMBER,
14:35:12 747  	in_lock_key IN VARCHAR2
14:35:12 748  ) AS
14:35:12 749  BEGIN
14:35:12 750  	PROCS_LOCKING_V16.RELEASE_LOCK(
14:35:12 751  	  in_group_id,
14:35:12 752  	  in_lock_key
14:35:12 753  	);
14:35:12 754  END RELEASE_LOCK;
14:35:12 755  
14:35:12 756  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
14:35:12 757  	in_invoice_id		    IN NUMBER,
14:35:12 758  	out_order_id		    OUT VARCHAR2,
14:35:12 759  	out_external_transaction_id OUT VARCHAR2
14:35:12 760  ) AS
14:35:12 761  BEGIN
14:35:12 762  	PROCS_INVOICE_V16.GET_PAYMENT_INFO_BY_INVOICE_ID(
14:35:12 763  	  in_invoice_id,
14:35:12 764  	  out_order_id,
14:35:12 765  	  out_external_transaction_id
14:35:12 766  	);
14:35:12 767  END GET_PAYMENT_INFO_BY_INVOICE_ID;
14:35:12 768  
14:35:12 769  /******************************************************************************/
14:35:12 770  
14:35:12 771  PROCEDURE GET_PAYPAL_BY_ID (
14:35:12 772  	in_paypal_id   IN  NUMBER,
14:35:12 773  	out_result_set OUT SYS_REFCURSOR
14:35:12 774  ) AS
14:35:12 775  BEGIN
14:35:12 776  	PROCS_FIN_INSTRUMENTS_V16.GET_PAYPAL_BY_ID(
14:35:12 777  	  in_paypal_id,
14:35:12 778  	  out_result_set
14:35:12 779  	);
14:35:12 780  END GET_PAYPAL_BY_ID;
14:35:12 781  
14:35:12 782  PROCEDURE GET_ATTEMPT_NUMBER (
14:35:12 783  /*
14:35:12 784  Throws exceptions:
14:35:12 785  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 786  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 787  */
14:35:12 788  	in_charge_id   in  number,
14:35:12 789  	out_attempt_count out number
14:35:12 790  ) as
14:35:12 791  begin
14:35:12 792  	PROCS_TRANSACTION_V16.GET_ATTEMPT_NUMBER(
14:35:12 793  	  in_charge_id,
14:35:12 794  	  out_attempt_count
14:35:12 795  	);
14:35:12 796  end get_attempt_number;
14:35:12 797  
14:35:12 798  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:35:12 799  	in_offer_chain_id	 IN NUMBER,
14:35:12 800  	in_action_name		 IN VARCHAR2,
14:35:12 801  	out_notification_type_id out number
14:35:12 802  ) as
14:35:12 803  begin
14:35:12 804  	PROCS_OFFER_CHAIN_V16.GET_NOTIFICATION_TYPE_ID(
14:35:12 805  	  in_offer_chain_id,
14:35:12 806  	  in_action_name,
14:35:12 807  	  out_notification_type_id
14:35:12 808  	);
14:35:12 809  end GET_NOTIFICATION_TYPE_ID;
14:35:12 810  
14:35:12 811  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
14:35:12 812  /*
14:35:12 813  Throws exceptions:
14:35:12 814  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 815  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 816  */
14:35:12 817  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:12 818  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
14:35:12 819  ) AS
14:35:12 820  BEGIN
14:35:12 821  PROCS_FIN_INSTRUMENTS_V16.GET_GC_ID_BY_PURCH_INVOICE_ID(
14:35:12 822  in_invoice_id,
14:35:12 823  out_gift_certificate_id
14:35:12 824  );
14:35:12 825  END GET_GC_ID_BY_PURCH_INVOICE_ID;
14:35:12 826  
14:35:12 827  END PUBLIC_PROCS_BILLING_V16;
14:35:12 828  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.14
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE LOCK_ACCOUNT (
14:35:12   4  	in_group_id    IN NUMBER,
14:35:12   5  	in_lock_key    IN VARCHAR2,
14:35:12   6  	in_seconds_num IN NUMBER,
14:35:12   7  	in_created_by  IN VARCHAR2,
14:35:12   8  	in_reason      IN VARCHAR2
14:35:12   9  ) AS
14:35:12  10  BEGIN
14:35:12  11  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
14:35:12  12  	  in_group_id,
14:35:12  13  	  in_lock_key,
14:35:12  14  	  in_seconds_num,
14:35:12  15  	  in_created_by,
14:35:12  16  	  in_reason
14:35:12  17  	);
14:35:12  18  END LOCK_ACCOUNT;
14:35:12  19  
14:35:12  20  /******************************************************************************/
14:35:12  21  
14:35:12  22  PROCEDURE RELEASE_LOCK (
14:35:12  23  	in_group_id IN NUMBER,
14:35:12  24  	in_lock_key IN VARCHAR2
14:35:12  25  ) AS
14:35:12  26  BEGIN
14:35:12  27  	PROCS_LOCKING_V16.RELEASE_LOCK(
14:35:12  28  	  in_group_id,
14:35:12  29  	  in_lock_key
14:35:12  30  	);
14:35:12  31  END RELEASE_LOCK;
14:35:12  32  
14:35:12  33  END PUBLIC_PROCS_NOTIFICATION_V16;
14:35:12  34  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.00
14:35:12 SQL> 
14:35:12 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V16" AS
14:35:12   2  
14:35:12   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
14:35:12   4  	out_result_set OUT SYS_REFCURSOR
14:35:12   5  ) AS
14:35:12   6  BEGIN
14:35:12   7  	PROCS_GROUP_ACCOUNT_V16.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
14:35:12   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
14:35:12   9  
14:35:12  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
14:35:12  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
14:35:12  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
14:35:12  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:35:12  14  ) AS
14:35:12  15  BEGIN
14:35:12  16  	PROCS_GROUP_ACCOUNT_V16.UPDATE_SS_NEED_ENTITLEMENTS(
14:35:12  17  	  in_sub_share_id => in_sub_share_id,
14:35:12  18  	  in_need_entitlements => in_need_entitlements,
14:35:12  19  	  in_updater => in_updater
14:35:12  20  	);
14:35:12  21  END UPDATE_SS_NEED_ENTITLEMENTS;
14:35:12  22  
14:35:12  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:35:12  24  /*
14:35:12  25  Throws exceptions:
14:35:12  26  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12  27  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  28  */
14:35:12  29  	  in_offer_chain_id IN	 NUMBER,
14:35:12  30  	  out_result_set    OUT  SYS_REFCURSOR
14:35:12  31  ) AS
14:35:12  32  BEGIN
14:35:12  33  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_BY_ID (
14:35:12  34  	  in_offer_chain_id => in_offer_chain_id,
14:35:12  35  	  out_result_set => out_result_set
14:35:12  36  	);
14:35:12  37  END GET_OFFER_CHAIN_BY_ID;
14:35:12  38  
14:35:12  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:35:12  40  /*
14:35:12  41  Throws exceptions (codes):
14:35:12  42  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12  43  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  44  */
14:35:12  45  	in_offer_chain_id IN NUMBER,
14:35:12  46  	in_meta_data_name IN VARCHAR2,
14:35:12  47  	out_result_set	  OUT SYS_REFCURSOR
14:35:12  48  )AS
14:35:12  49  BEGIN
14:35:12  50  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_META_DATA(
14:35:12  51  	  in_offer_chain_id,
14:35:12  52  	  in_meta_data_name,
14:35:12  53  	  out_result_set
14:35:12  54  	);
14:35:12  55  END GET_OFFER_CHAIN_META_DATA;
14:35:12  56  
14:35:12  57  PROCEDURE GET_ENDING_LICENSES (
14:35:12  58  /*
14:35:12  59  Throws exceptions:
14:35:12  60  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  61  */
14:35:12  62  	in_hours_number IN NUMBER,
14:35:12  63  	out_result_set OUT SYS_REFCURSOR
14:35:12  64  ) AS
14:35:12  65  BEGIN
14:35:12  66  	PROCS_LICENSE_V16.GET_ENDING_LICENSES(in_hours_number,out_result_set);
14:35:12  67  END GET_ENDING_LICENSES;
14:35:12  68  
14:35:12  69  PROCEDURE GET_ENDING_LICENSES_CC (
14:35:12  70  /*
14:35:12  71  Throws exceptions:
14:35:12  72  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  73  */
14:35:12  74  	in_hours_number IN NUMBER,
14:35:12  75  	out_result_set OUT SYS_REFCURSOR,
14:35:12  76  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:12  77  ) AS
14:35:12  78  BEGIN
14:35:12  79  	PROCS_LICENSE_V16.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
14:35:12  80  END GET_ENDING_LICENSES_CC;
14:35:12  81  
14:35:12  82  /*******************************************************/
14:35:12  83  
14:35:12  84  PROCEDURE GET_RECURRING_OFFER (
14:35:12  85  /*
14:35:12  86  Throws exceptions:
14:35:12  87  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12  88  */
14:35:12  89  	in_license_id  IN NUMBER,
14:35:12  90  	out_result_set OUT SYS_REFCURSOR
14:35:12  91  ) AS
14:35:12  92  BEGIN
14:35:12  93  	PROCS_LICENSE_V16.GET_RECURRING_OFFER (
14:35:12  94  	  in_license_id,
14:35:12  95  	  out_result_set
14:35:12  96  	);
14:35:12  97  END GET_RECURRING_OFFER;
14:35:12  98  
14:35:12  99  /********************************************************/
14:35:12 100  
14:35:12 101  PROCEDURE GET_NEXT_OFFER (
14:35:12 102  /*
14:35:12 103  Throws exceptions:
14:35:12 104  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 105  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 106  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 107  */
14:35:12 108  	in_license_id  IN NUMBER,
14:35:12 109  	out_result_set OUT SYS_REFCURSOR
14:35:12 110  ) AS
14:35:12 111  BEGIN
14:35:12 112  	PROCS_LICENSE_V16.GET_NEXT_OFFER (
14:35:12 113  	  in_license_id,
14:35:12 114  	  out_result_set
14:35:12 115  	);
14:35:12 116  END GET_NEXT_OFFER;
14:35:12 117  
14:35:12 118  /*********************************************************/
14:35:12 119  
14:35:12 120  PROCEDURE UPDATE_LICENSE_STATUS(
14:35:12 121  /*
14:35:12 122  Throws exceptions:
14:35:12 123  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 124  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 125  */
14:35:12 126  	  in_license_id     IN NUMBER,
14:35:12 127  	  in_license_status IN NUMBER,
14:35:12 128  	  in_updated_by     IN VARCHAR2
14:35:12 129  ) AS
14:35:12 130  BEGIN
14:35:12 131  	PROCS_LICENSE_V16.UPDATE_LICENSE_STATUS (
14:35:12 132  	  in_license_id,
14:35:12 133  	  in_license_status,
14:35:12 134  	  in_updated_by
14:35:12 135  	);
14:35:12 136  END UPDATE_LICENSE_STATUS;
14:35:12 137  
14:35:12 138  /**********************************************************/
14:35:12 139  
14:35:12 140  PROCEDURE UPDATE_INVOICE_STATUS (
14:35:12 141  /*
14:35:12 142  Throws exceptions:
14:35:12 143  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 144  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 145  */
14:35:12 146  	in_invoice_id		       IN NUMBER,
14:35:12 147  	in_invoice_status_id	       IN NUMBER,
14:35:12 148  	in_updated_by		       IN VARCHAR2
14:35:12 149  ) AS
14:35:12 150  BEGIN
14:35:12 151  	PROCS_INVOICE_V16.UPDATE_INVOICE_STATUS(
14:35:12 152  	  in_invoice_id,
14:35:12 153  	  in_invoice_status_id,
14:35:12 154  	  in_updated_by
14:35:12 155  	);
14:35:12 156  END UPDATE_INVOICE_STATUS;
14:35:12 157  
14:35:12 158  /***********************************************************/
14:35:12 159  
14:35:12 160  PROCEDURE CREATE_LICENSE(
14:35:12 161  /*
14:35:12 162  Throws exceptions:
14:35:12 163  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 164  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 165  APP_EXCEPTION_CODES_V16.INTERNAL_ERROR
14:35:12 166  */
14:35:12 167  	in_status_id		    IN NUMBER,
14:35:12 168  	in_needs_entitlements	    IN NUMBER,
14:35:12 169  	in_start_date		    IN DATE,
14:35:12 170  	in_end_date		    IN DATE,
14:35:12 171  	in_offer_id		    IN NUMBER,
14:35:12 172  	in_subscription_id	    IN NUMBER,
14:35:12 173  	in_invoice_id		    IN NUMBER,
14:35:12 174  	in_created_by		    IN VARCHAR2,
14:35:12 175  	in_is_extension 	    IN NUMBER,
14:35:12 176  	in_current_offer_index	    IN NUMBER,
14:35:12 177  	in_current_offer_recurr_num IN NUMBER,
14:35:12 178  	out_license_id		    OUT NUMBER
14:35:12 179  ) AS
14:35:12 180  BEGIN
14:35:12 181  	PROCS_LICENSE_V16.CREATE_LICENSE (
14:35:12 182  	  in_status_id,
14:35:12 183  	  in_needs_entitlements,
14:35:12 184  	  in_start_date,
14:35:12 185  	  in_end_date,
14:35:12 186  	  in_offer_id,
14:35:12 187  	  in_subscription_id,
14:35:12 188  	  in_invoice_id,
14:35:12 189  	  in_created_by,
14:35:12 190  	  in_is_extension,
14:35:12 191  	  in_current_offer_index,
14:35:12 192  	  in_current_offer_recurr_num,
14:35:12 193  	  out_license_id
14:35:12 194  	);
14:35:12 195  END CREATE_LICENSE;
14:35:12 196  
14:35:12 197  /******************************************************/
14:35:12 198  
14:35:12 199  PROCEDURE CREATE_INVOICE(
14:35:12 200  /*
14:35:12 201  Throws exceptions:
14:35:12 202  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 203  */
14:35:12 204  	  in_invoice_status IN NUMBER,
14:35:12 205  	  in_created_by     IN VARCHAR2,
14:35:12 206  	  in_tax_exempt_id  IN VARCHAR2,
14:35:12 207  	  out_invoice_id    OUT NUMBER
14:35:12 208  ) AS
14:35:12 209  BEGIN
14:35:12 210  	PROCS_INVOICE_V16.CREATE_INVOICE (
14:35:12 211  	  in_invoice_status,
14:35:12 212  	  in_created_by,
14:35:12 213  	  in_tax_exempt_id,
14:35:12 214  	  out_invoice_id
14:35:12 215  	);
14:35:12 216  END CREATE_INVOICE;
14:35:12 217  
14:35:12 218  /*******************************************************/
14:35:12 219  
14:35:12 220  PROCEDURE CREATE_CHARGE(
14:35:12 221  /*
14:35:12 222  Throws exceptions:
14:35:12 223  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 224  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 225  */
14:35:12 226  	in_invoice_id	      IN NUMBER,
14:35:12 227  	in_transaction_id     IN NUMBER,
14:35:12 228  	in_instrument_type_id IN NUMBER,
14:35:12 229  	in_instrument_id      IN NUMBER,
14:35:12 230  	in_charge_amount      IN NUMBER,
14:35:12 231  	in_created_by	      IN VARCHAR2,
14:35:12 232  	in_charge_status_id   IN NUMBER,
14:35:12 233  	out_charge_id	      OUT NUMBER
14:35:12 234  ) AS
14:35:12 235  BEGIN
14:35:12 236  	PROCS_CHARGE_V16.CREATE_CHARGE (
14:35:12 237  	  in_invoice_id,
14:35:12 238  	  in_transaction_id,
14:35:12 239  	  in_instrument_type_id,
14:35:12 240  	  in_instrument_id,
14:35:12 241  	  in_charge_amount,
14:35:12 242  	  in_created_by,
14:35:12 243  	  in_charge_status_id,
14:35:12 244  	  out_charge_id
14:35:12 245  	);
14:35:12 246  END CREATE_CHARGE;
14:35:12 247  
14:35:12 248  /**********************************************************/
14:35:12 249  
14:35:12 250  PROCEDURE HAS_FUTURE_LICENSE (
14:35:12 251  /*
14:35:12 252  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 253  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 254  --
14:35:12 255  RETURNS:
14:35:12 256  1 - if has,
14:35:12 257  0 - else
14:35:12 258  */
14:35:12 259  	in_license_id IN NUMBER,
14:35:12 260  	out_result	   OUT NUMBER
14:35:12 261  ) AS
14:35:12 262  BEGIN
14:35:12 263  	PROCS_SUBSCRIPTION_V16.HAS_FUTURE_LICENSE (
14:35:12 264  	  in_license_id,
14:35:12 265  	  out_result
14:35:12 266  	);
14:35:12 267  END HAS_FUTURE_LICENSE;
14:35:12 268  
14:35:12 269  /***********************************************************/
14:35:12 270  
14:35:12 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
14:35:12 272  /*
14:35:12 273  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 274  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 275  */
14:35:12 276  	in_license_id IN NUMBER,
14:35:12 277  	out_group_id  OUT NUMBER
14:35:12 278  ) AS
14:35:12 279  BEGIN
14:35:12 280  	PROCS_LICENSE_V16.GET_GROUP_ID_BY_LICENSE_ID (
14:35:12 281  	  in_license_id,
14:35:12 282  	  out_group_id
14:35:12 283  	);
14:35:12 284  END GET_GROUP_ID_BY_LICENSE_ID;
14:35:12 285  
14:35:12 286  /**********************************************************/
14:35:12 287  
14:35:12 288  PROCEDURE GET_OFFER_PRODUCTS (
14:35:12 289  /*
14:35:12 290  Throws exceptions (codes):
14:35:12 291  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 292  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 293  */
14:35:12 294  	in_offer_id    IN NUMBER,
14:35:12 295  	out_result_set OUT SYS_REFCURSOR
14:35:12 296  ) AS
14:35:12 297  BEGIN
14:35:12 298  	PROCS_OFFER_CHAIN_V16.GET_OFFER_PRODUCTS (
14:35:12 299  	  in_offer_id,
14:35:12 300  	  out_result_set
14:35:12 301  	);
14:35:12 302  END GET_OFFER_PRODUCTS;
14:35:12 303  
14:35:12 304  /***********************************************************/
14:35:12 305  
14:35:12 306  PROCEDURE CREATE_TRANSACTION (
14:35:12 307  /*
14:35:12 308  Throws exceptions:
14:35:12 309  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 310  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 311  */
14:35:12 312  	in_transaction_id  IN NUMBER,
14:35:12 313  	in_status_id	   IN NUMBER,
14:35:12 314  	in_amount	   IN NUMBER,
14:35:12 315  	in_created_by	   IN VARCHAR2,
14:35:12 316  	in_order_id	   IN VARCHAR2,
14:35:12 317  	out_transaction_id OUT NUMBER
14:35:12 318  ) AS
14:35:12 319  BEGIN
14:35:12 320  	PROCS_TRANSACTION_V16.CREATE_TRANSACTION(
14:35:12 321  	  in_transaction_id,
14:35:12 322  	  in_status_id,
14:35:12 323  	  in_amount,
14:35:12 324  	  in_created_by,
14:35:12 325  	  in_order_id,
14:35:12 326  	  GLOBAL_CONSTANTS_V16.FALSE, -- is_refund should be false in renewal
14:35:12 327  	  out_transaction_id
14:35:12 328  	);
14:35:12 329  END CREATE_TRANSACTION;
14:35:12 330  
14:35:12 331  /************************************************************/
14:35:12 332  
14:35:12 333  PROCEDURE ADD_LINE_ITEMS(
14:35:12 334  /*
14:35:12 335  Throws exceptions:
14:35:12 336  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 337  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 338  */
14:35:12 339  	in_invoice_id IN NUMBER,
14:35:12 340  	in_offer_id   IN NUMBER,
14:35:12 341  	in_created_by IN VARCHAR2
14:35:12 342  ) AS
14:35:12 343  BEGIN
14:35:12 344  	PROCS_LINE_ITEMS_V16.ADD_LINE_ITEMS(
14:35:12 345  	  in_invoice_id,
14:35:12 346  	  in_offer_id,
14:35:12 347  	  in_created_by
14:35:12 348  	);
14:35:12 349  END ADD_LINE_ITEMS;
14:35:12 350  
14:35:12 351  /************************************************************/
14:35:12 352  
14:35:12 353  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:35:12 354  /*
14:35:12 355  Throws exceptions:
14:35:12 356  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 357  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 358  */
14:35:12 359  	in_invoice_id IN  NUMBER,
14:35:12 360  	out_amount    OUT NUMBER
14:35:12 361  ) AS
14:35:12 362  BEGIN
14:35:12 363  	PROCS_INVOICE_V16.CALCULATE_INVOICE_AMOUNT (
14:35:12 364  	  in_invoice_id,
14:35:12 365  	  out_amount
14:35:12 366  	);
14:35:12 367  END CALCULATE_INVOICE_AMOUNT;
14:35:12 368  
14:35:12 369  /*************************************************************/
14:35:12 370  
14:35:12 371  PROCEDURE RESERVE_TRANSACTION_ID (
14:35:12 372  /*
14:35:12 373  Throws exceptions:
14:35:12 374  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 375  */
14:35:12 376  	out_transaction_id OUT NUMBER
14:35:12 377  ) AS
14:35:12 378  BEGIN
14:35:12 379  	PROCS_TRANSACTION_V16.RESERVE_TRANSACTION_ID (
14:35:12 380  	  out_transaction_id
14:35:12 381  	);
14:35:12 382  END RESERVE_TRANSACTION_ID;
14:35:12 383  
14:35:12 384  /***************************************************************/
14:35:12 385  
14:35:12 386  PROCEDURE P_GET_NEXT_OFFER_INDEX (
14:35:12 387  	in_offer_chain_id	     IN NUMBER,
14:35:12 388  	in_offer_chain_current_index IN NUMBER,
14:35:12 389  	out_next_offer_index	     OUT NUMBER
14:35:12 390  ) AS
14:35:12 391  BEGIN
14:35:12 392  	PROCS_OFFER_CHAIN_V16.P_GET_NEXT_OFFER_INDEX(
14:35:12 393  	  in_offer_chain_id,
14:35:12 394  	  in_offer_chain_current_index,
14:35:12 395  	  out_next_offer_index
14:35:12 396  	);
14:35:12 397  END P_GET_NEXT_OFFER_INDEX;
14:35:12 398  
14:35:12 399  /***************************************************************/
14:35:12 400  
14:35:12 401  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
14:35:12 402  	in_license_id		     IN NUMBER,
14:35:12 403  	in_offer_chain_current_index IN NUMBER,
14:35:12 404  	out_next_offer_index	     OUT NUMBER
14:35:12 405  ) AS
14:35:12 406  BEGIN
14:35:12 407  	PROCS_OFFER_CHAIN_V16.GET_NEXT_OFFER_INDEX_BY_LCNS(
14:35:12 408  	  in_license_id,
14:35:12 409  	  in_offer_chain_current_index,
14:35:12 410  	  out_next_offer_index
14:35:12 411  	);
14:35:12 412  END GET_NEXT_OFFER_INDEX_BY_LCNS;
14:35:12 413  
14:35:12 414  /******************************************************************/
14:35:12 415  
14:35:12 416  PROCEDURE GET_SUBSCRIPTION_INFO (
14:35:12 417  /*
14:35:12 418  Throws exceptions:
14:35:12 419  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 420  */
14:35:12 421  	  in_subscription_id IN  NUMBER,
14:35:12 422  	  out_result_set      OUT SYS_REFCURSOR
14:35:12 423  ) AS
14:35:12 424  BEGIN
14:35:12 425  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTION_INFO(
14:35:12 426  	  in_subscription_id,
14:35:12 427  	  out_result_set
14:35:12 428  	);
14:35:12 429  END GET_SUBSCRIPTION_INFO;
14:35:12 430  
14:35:12 431  /*******************************************************************/
14:35:12 432  
14:35:12 433  PROCEDURE CLOSE_SUBSCRIPTION (
14:35:12 434  	in_subscription_id IN NUMBER,
14:35:12 435  	in_updated_by	   IN VARCHAR2
14:35:12 436  ) AS
14:35:12 437  BEGIN
14:35:12 438  	PROCS_SUBSCRIPTION_V16.CLOSE_SUBSCRIPTION(
14:35:12 439  	  in_subscription_id,
14:35:12 440  	  in_updated_by
14:35:12 441  	);
14:35:12 442  END CLOSE_SUBSCRIPTION;
14:35:12 443  
14:35:12 444  /*******************************************************************/
14:35:12 445  
14:35:12 446  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
14:35:12 447  	out_result_set OUT SYS_REFCURSOR
14:35:12 448  ) AS
14:35:12 449  BEGIN
14:35:12 450  	PROCS_LICENSE_V16.GET_NEED_ENTITLEMENTS_LICENSES(
14:35:12 451  	  out_result_set
14:35:12 452  	);
14:35:12 453  END GET_NEED_ENTITLEMENTS_LICENSES;
14:35:12 454  
14:35:12 455  /*******************************************************************/
14:35:12 456  
14:35:12 457  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
14:35:12 458  	in_license_id	      IN NUMBER,
14:35:12 459  	in_needs_entitlements IN NUMBER,
14:35:12 460  	in_updated_by	      IN VARCHAR2
14:35:12 461  ) AS
14:35:12 462  BEGIN
14:35:12 463  	PROCS_LICENSE_V16.UPDATE_NEED_ENTITLEMENTS_FLAG(
14:35:12 464  	  in_license_id,
14:35:12 465  	  in_needs_entitlements,
14:35:12 466  	  in_updated_by
14:35:12 467  	);
14:35:12 468  END UPDATE_NEED_ENTITLEMENTS_FLAG;
14:35:12 469  
14:35:12 470  /*******************************************************/
14:35:12 471  
14:35:12 472  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
14:35:12 473  /*
14:35:12 474  Throws exceptions (codes):
14:35:12 475  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 476  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 477  */
14:35:12 478  	in_offer_id    IN NUMBER,
14:35:12 479  	out_result_set OUT SYS_REFCURSOR
14:35:12 480  ) AS
14:35:12 481  BEGIN
14:35:12 482  	PROCS_OFFER_CHAIN_V16.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
14:35:12 483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
14:35:12 484  
14:35:12 485  /*******************************************************/
14:35:12 486  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
14:35:12 487  /*
14:35:12 488  Throws exceptions (codes):
14:35:12 489  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 490  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 491  */
14:35:12 492  	in_product_offering_id IN NUMBER,
14:35:12 493  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
14:35:12 494  	out_result_set	       OUT SYS_REFCURSOR
14:35:12 495  ) AS
14:35:12 496  BEGIN
14:35:12 497  	PROCS_OFFER_CHAIN_V16.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
14:35:12 498  END GET_PRODUCT_OFFERING_META_DATA;
14:35:12 499  
14:35:12 500  /*******************************************************/
14:35:12 501  
14:35:12 502  PROCEDURE LOCK_ACCOUNT (
14:35:12 503  	in_group_id    IN NUMBER,
14:35:12 504  	in_lock_key    IN VARCHAR2,
14:35:12 505  	in_seconds_num IN NUMBER,
14:35:12 506  	in_created_by  IN VARCHAR2,
14:35:12 507  	in_reason      IN VARCHAR2
14:35:12 508  ) AS
14:35:12 509  BEGIN
14:35:12 510  	PROCS_LOCKING_V16.LOCK_ACCOUNT(
14:35:12 511  	  in_group_id,
14:35:12 512  	  in_lock_key,
14:35:12 513  	  in_seconds_num,
14:35:12 514  	  in_created_by,
14:35:12 515  	  in_reason
14:35:12 516  	);
14:35:12 517  END LOCK_ACCOUNT;
14:35:12 518  
14:35:12 519  /****************************************************************/
14:35:12 520  
14:35:12 521  PROCEDURE RELEASE_LOCK (
14:35:12 522  	in_group_id IN NUMBER,
14:35:12 523  	in_lock_key IN VARCHAR2
14:35:12 524  ) AS
14:35:12 525  BEGIN
14:35:12 526  	PROCS_LOCKING_V16.RELEASE_LOCK(
14:35:12 527  	  in_group_id,
14:35:12 528  	  in_lock_key
14:35:12 529  	);
14:35:12 530  END RELEASE_LOCK;
14:35:12 531  
14:35:12 532  /******************************************************************************/
14:35:12 533  
14:35:12 534  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:35:12 535  	in_invoice_id  IN NUMBER,
14:35:12 536  	out_result_set OUT SYS_REFCURSOR
14:35:12 537  ) AS
14:35:12 538  BEGIN
14:35:12 539  	PROCS_INVOICE_V16.GET_INVOICE_LINE_ITEMS(
14:35:12 540  	  in_invoice_id,
14:35:12 541  	  out_result_set
14:35:12 542  	);
14:35:12 543  END GET_INVOICE_LINE_ITEMS;
14:35:12 544  
14:35:12 545  /******************************************************************************/
14:35:12 546  
14:35:12 547  PROCEDURE ADD_TAX (
14:35:12 548  	in_tax_type_id		 IN NUMBER,
14:35:12 549  	in_calculated_amount	 IN NUMBER,
14:35:12 550  	in_created_by		 IN VARCHAR2,
14:35:12 551  	in_line_item_id 	 IN NUMBER,
14:35:12 552  	in_effective_rate	 IN VARCHAR2,
14:35:12 553  	in_taxable_amount	 IN NUMBER,
14:35:12 554  	in_tax_rule_id		 IN NUMBER,
14:35:12 555  	in_jurisdiction_level_id IN NUMBER,
14:35:12 556  	in_jurisdiction_name	 IN VARCHAR2,
14:35:12 557  	in_jurisdiction_id	 IN VARCHAR2,
14:35:12 558  	in_ext_tax_type 	 IN VARCHAR2,
14:35:12 559  	in_ext_result		 IN VARCHAR2,
14:35:12 560  	in_imposition_type	 IN VARCHAR2,
14:35:12 561  	in_imposition		 IN VARCHAR2
14:35:12 562  ) AS
14:35:12 563  BEGIN
14:35:12 564  	PROCS_TAXES_V16.ADD_TAX(
14:35:12 565  	  in_tax_type_id,
14:35:12 566  	  in_calculated_amount,
14:35:12 567  	  in_created_by,
14:35:12 568  	  in_line_item_id,
14:35:12 569  	  in_effective_rate,
14:35:12 570  	  in_taxable_amount,
14:35:12 571  	  in_tax_rule_id,
14:35:12 572  	  in_jurisdiction_level_id,
14:35:12 573  	  in_jurisdiction_name,
14:35:12 574  	  in_jurisdiction_id,
14:35:12 575  	  in_ext_tax_type,
14:35:12 576  	  in_ext_result,
14:35:12 577  	  in_imposition_type,
14:35:12 578  	  in_imposition
14:35:12 579  	);
14:35:12 580  END ADD_TAX;
14:35:12 581  
14:35:12 582  /******************************************************************************/
14:35:12 583  
14:35:12 584  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:35:12 585  	in_credit_card_id IN  NUMBER,
14:35:12 586  	out_result_set	  OUT SYS_REFCURSOR
14:35:12 587  ) AS
14:35:12 588  BEGIN
14:35:12 589  	PROCS_FIN_INSTRUMENTS_V16.GET_CREDIT_CARD_BY_ID(
14:35:12 590  	  in_credit_card_id,
14:35:12 591  	  out_result_set
14:35:12 592  	);
14:35:12 593  END GET_CREDIT_CARD_BY_ID;
14:35:12 594  
14:35:12 595  /******************************************************************************/
14:35:12 596  
14:35:12 597  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
14:35:12 598  	in_line_item_id IN NUMBER,
14:35:12 599  	out_result_set	OUT SYS_REFCURSOR
14:35:12 600  ) AS
14:35:12 601  BEGIN
14:35:12 602  	PROCS_PRODUCT_V16.GET_PRD_OFFERING_BY_LINE_IT_ID(
14:35:12 603  	  in_line_item_id,
14:35:12 604  	  out_result_set
14:35:12 605  	);
14:35:12 606  END GET_PRD_OFFERING_BY_LINE_IT_ID;
14:35:12 607  
14:35:12 608  /******************************************************************************/
14:35:12 609  
14:35:12 610  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:35:12 611  /*
14:35:12 612  Throws exceptions:
14:35:12 613  APP_EXCEPTION_CODES_V16.NOT_FOUND,
14:35:12 614  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 615  */
14:35:12 616  	in_group_id IN NUMBER,
14:35:12 617  	out_account_id	OUT NUMBER
14:35:12 618  ) AS
14:35:12 619  BEGIN
14:35:12 620  	PROCS_ACCOUNT_V16.GET_ACCOUNT_ID_BY_GROUP_ID(
14:35:12 621  	  in_group_id,
14:35:12 622  	  out_account_id
14:35:12 623  	);
14:35:12 624  END GET_ACCOUNT_ID_BY_GROUP_ID;
14:35:12 625  
14:35:12 626  /******************************************************************************/
14:35:12 627  
14:35:12 628  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
14:35:12 629  /*
14:35:12 630  Throws exceptions:
14:35:12 631  APP_EXCEPTION_CODES_V16.NOT_FOUND
14:35:12 632  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 633  */
14:35:12 634  	in_line_item_id IN  NUMBER,
14:35:12 635  	out_result_set	OUT SYS_REFCURSOR
14:35:12 636  ) AS
14:35:12 637  BEGIN
14:35:12 638  	PROCS_LINE_ITEMS_V16.GET_LINE_ITEM_DISCOUNTS(
14:35:12 639  	  in_line_item_id,
14:35:12 640  	  out_result_set
14:35:12 641  	);
14:35:12 642  END GET_LINE_ITEM_DISCOUNTS;
14:35:12 643  
14:35:12 644  /******************************************************************************/
14:35:12 645  
14:35:12 646  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
14:35:12 647  	in_line_item_id    IN NUMBER,
14:35:12 648  	in_amount	   IN NUMBER,
14:35:12 649  	in_discount_amount IN NUMBER,
14:35:12 650  	in_taxes_amount    IN NUMBER
14:35:12 651  ) AS
14:35:12 652  BEGIN
14:35:12 653  	PROCS_LINE_ITEMS_V16.UPDATE_LINE_ITEM_AMOUNT(
14:35:12 654  	  in_line_item_id,
14:35:12 655  	  in_amount,
14:35:12 656  	  in_discount_amount,
14:35:12 657  	  in_taxes_amount
14:35:12 658  	);
14:35:12 659  END UPDATE_LINE_ITEM_AMOUNT;
14:35:12 660  
14:35:12 661  /******************************************************************************/
14:35:12 662  
14:35:12 663  PROCEDURE GET_PAYPAL_BY_ID (
14:35:12 664  	in_paypal_id   IN  NUMBER,
14:35:12 665  	out_result_set OUT SYS_REFCURSOR
14:35:12 666  ) AS
14:35:12 667  BEGIN
14:35:12 668  	PROCS_FIN_INSTRUMENTS_V16.GET_PAYPAL_BY_ID(
14:35:12 669  	  in_paypal_id,
14:35:12 670  	  out_result_set
14:35:12 671  	);
14:35:12 672  END GET_PAYPAL_BY_ID;
14:35:12 673  
14:35:12 674  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:35:12 675  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:35:12 676  	out_result_set OUT SYS_REFCURSOR
14:35:12 677  ) AS
14:35:12 678  BEGIN
14:35:12 679  	PROCS_FIN_INSTRUMENTS_V16.GET_GC_BY_PURCH_INVOICE_ID (
14:35:12 680  	  in_invoice_id,
14:35:12 681  	  out_result_set
14:35:12 682  	);
14:35:12 683  END GET_GC_BY_PURCH_INVOICE_ID;
14:35:12 684  
14:35:12 685  PROCEDURE GET_LICENSE_BY_ID (
14:35:12 686  	in_license_id  IN NUMBER,
14:35:12 687  	out_result_set OUT SYS_REFCURSOR
14:35:12 688  ) AS
14:35:12 689  BEGIN
14:35:12 690  	PROCS_LICENSE_V16.GET_LICENSE_BY_ID (
14:35:12 691  	  in_license_id,
14:35:12 692  	  out_result_set
14:35:12 693  	);
14:35:12 694  END GET_LICENSE_BY_ID;
14:35:12 695  
14:35:12 696  /******************************************************************************/
14:35:12 697  
14:35:12 698  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:35:12 699  	in_offer_chain_id	 IN NUMBER,
14:35:12 700  	in_action_name		 IN VARCHAR2,
14:35:12 701  	out_notification_type_id OUT NUMBER
14:35:12 702  ) AS
14:35:12 703  BEGIN
14:35:12 704  	PROCS_OFFER_CHAIN_V16.GET_NOTIFICATION_TYPE_ID(
14:35:12 705  	  in_offer_chain_id,
14:35:12 706  	  in_action_name,
14:35:12 707  	  out_notification_type_id
14:35:12 708  	);
14:35:12 709  END GET_NOTIFICATION_TYPE_ID;
14:35:12 710  
14:35:12 711  /******************************************************************************/
14:35:12 712  
14:35:12 713  PROCEDURE GET_ALL_OCH_META_DATA (
14:35:12 714  	in_offer_chain_id IN NUMBER,
14:35:12 715  	out_result_set	  OUT SYS_REFCURSOR
14:35:12 716  ) AS
14:35:12 717  BEGIN
14:35:12 718  	PROCS_OFFER_CHAIN_V16.GET_ALL_META_DATA (
14:35:12 719  	  in_offer_chain_id,
14:35:12 720  	  out_result_set
14:35:12 721  	);
14:35:12 722  END GET_ALL_OCH_META_DATA;
14:35:12 723  
14:35:12 724  /******************************************************************************/
14:35:12 725  
14:35:12 726  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
14:35:12 727  /*
14:35:12 728  APP_EXCEPTION_CODES_V16.INVALID_PARAMETER
14:35:12 729  APP_EXCEPTION_CODES_V16.UNKNOWN_ERROR
14:35:12 730  */
14:35:12 731  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
14:35:12 732  	out_result_set	     OUT SYS_REFCURSOR
14:35:12 733  ) AS
14:35:12 734  BEGIN
14:35:12 735  	PROCS_SUBSCRIPTION_V16.GET_SUBSCRIPTIONS_META_DATA(
14:35:12 736  	  in_subscriptions_ids,
14:35:12 737  	  out_result_set
14:35:12 738  	);
14:35:12 739  END GET_SUBSCRIPTIONS_META_DATA;
14:35:12 740  
14:35:12 741  PROCEDURE GET_UNREDEEMED_GCS (
14:35:12 742  	out_result_set		OUT SYS_REFCURSOR,
14:35:12 743  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:35:12 744  	in_num_rows		IN NUMBER DEFAULT 10000,
14:35:12 745  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:35:12 746  ) AS
14:35:12 747  BEGIN
14:35:12 748  	PROCS_FIN_INSTRUMENTS_V16.GET_UNREDEEMED_GCS(
14:35:12 749  	  out_result_set => out_result_set,
14:35:12 750  	  in_hours_number => in_hours_number,
14:35:12 751  	  in_num_rows => in_num_rows,
14:35:12 752  	  in_process_name => in_process_name
14:35:12 753  	);
14:35:12 754  END GET_UNREDEEMED_GCS;
14:35:12 755  
14:35:12 756  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
14:35:12 757  	in_offer_chain_id IN NUMBER,
14:35:12 758  	in_meta_data_name IN VARCHAR2,
14:35:12 759  	out_value	  OUT VARCHAR2
14:35:12 760  ) AS
14:35:12 761  BEGIN
14:35:12 762  	PROCS_OFFER_CHAIN_V16.GET_OFFER_CHAIN_MD_VALUE(
14:35:12 763  	  in_offer_chain_id => in_offer_chain_id,
14:35:12 764  	  in_meta_data_name => in_meta_data_name,
14:35:12 765  	  out_value => out_value
14:35:12 766  	);
14:35:12 767  END GET_OFFER_CHAIN_MD_VALUE;
14:35:12 768  
14:35:12 769  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
14:35:12 770  	out_result_set	    OUT SYS_REFCURSOR
14:35:12 771  )
14:35:12 772  AS
14:35:12 773  BEGIN
14:35:12 774  	PROCS_SUBSCRIPTION_V16.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
14:35:12 775  	  out_result_set => out_result_set
14:35:12 776  	);
14:35:12 777  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
14:35:12 778  
14:35:12 779  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
14:35:12 780  	out_result_set	    OUT SYS_REFCURSOR
14:35:12 781  )
14:35:12 782  AS
14:35:12 783  BEGIN
14:35:12 784  	PROCS_SUBSCRIPTION_V16.GET_ACT_SUBS_W_PP_CHARGEBACKS(
14:35:12 785  	  out_result_set => out_result_set
14:35:12 786  	);
14:35:12 787  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
14:35:12 788  
14:35:12 789  END PUBLIC_PROCS_RENEWAL_V16;
14:35:12 790  .
14:35:12 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:35:12 SQL> 
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ADX_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_TEST_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> 
14:35:12 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V16 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V16 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V16 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> 
14:35:12 SQL> 
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> 
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.02
14:35:12 SQL> 
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V16 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> 
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> 
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V16 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V16 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> 
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:35:12 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V16 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:35:12 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
14:35:12 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECST2@rac01.stg.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: nytd_oracledba@nytimes.com
Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.stg.ewr1.nytimes.com
        SID: ECST2
        Schema: core_owner
        Migration: 19.2-release-1.11.0-all
        SVN Revision: 10148
        Duration: 3 sec.
        Service Request: https://jira.em.nytimes.com/browse/ORA-284