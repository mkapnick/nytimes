10:28:39 SQL> @/dbbackups/ECST/migrations/core_owner/84.3-sartre-release-1.18.0-bulk-load-3-CORE-all.sql/upgrade.sql
10:28:39 SQL> prompt Compiling header for notification_statuses.sql
Compiling header for notification_statuses.sql
10:28:39 SQL> 
10:28:39 SQL> .
10:28:39 SQL> /
SP2-0103: Nothing in SQL buffer to run.
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_account.sql
Compiling header for procs_account.sql
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V24" AS
10:28:39   2  
10:28:39   3  FUNCTION GET_GRACE_START_DATE(
10:28:39   4  	in_subscription_id IN NUMBER
10:28:39   5  ) RETURN DATE;
10:28:39   6  
10:28:39   7  FUNCTION GET_GRACE_END_DATE(
10:28:39   8  	in_subscription_id IN NUMBER
10:28:39   9  ) RETURN DATE;
10:28:39  10  
10:28:39  11  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
10:28:39  12  	in_group_id    IN  NUMBER,
10:28:39  13  	out_result_set OUT SYS_REFCURSOR
10:28:39  14  );
10:28:39  15  
10:28:39  16  PROCEDURE ANNOTATE_ACCOUNT (
10:28:39  17  	in_group_id   IN  NUMBER,
10:28:39  18  	in_agent_id   IN  NUMBER,
10:28:39  19  	in_note       IN  VARCHAR2,
10:28:39  20  	in_created_by IN  VARCHAR2
10:28:39  21  );
10:28:39  22  
10:28:39  23  PROCEDURE ASSERT_ACCOUNT_EXISTS (
10:28:39  24  	in_group_id IN	NUMBER,
10:28:39  25  	out_exists  OUT NUMBER
10:28:39  26  );
10:28:39  27  
10:28:39  28  PROCEDURE DISABLE_ACCOUNT (
10:28:39  29  	in_group_id   IN NUMBER,
10:28:39  30  	in_updated_by IN VARCHAR2,
10:28:39  31  	in_note       IN VARCHAR2,
10:28:39  32  	in_agent_id   IN NUMBER
10:28:39  33  );
10:28:39  34  
10:28:39  35  PROCEDURE CREATE_ACTIVE_ACCOUNT(
10:28:39  36  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
10:28:39  37  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
10:28:39  38  	out_new_account_id OUT ACCOUNT.ID%TYPE
10:28:39  39  );
10:28:39  40  
10:28:39  41  PROCEDURE REACTIVATE_ACCOUNT (
10:28:39  42  	in_group_id	  IN NUMBER,
10:28:39  43  	in_updated_by	  IN VARCHAR2,
10:28:39  44  	in_note 	  IN VARCHAR2,
10:28:39  45  	in_agent_id	  IN NUMBER
10:28:39  46  );
10:28:39  47  
10:28:39  48  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
10:28:39  49  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
10:28:39  50  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V24.CREDIT_CARD_ACTIVE,
10:28:39  51  	out_result_set OUT SYS_REFCURSOR
10:28:39  52  );
10:28:39  53  
10:28:39  54  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
10:28:39  55  	in_group_id	  IN NUMBER,
10:28:39  56  	out_result_gc_set OUT SYS_REFCURSOR,
10:28:39  57  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.TRUE
10:28:39  58  );
10:28:39  59  
10:28:39  60  PROCEDURE GET_ACCOUNT_INFO  (
10:28:39  61  	  in_group_id	    IN	NUMBER,
10:28:39  62  	  out_account_info  OUT SYS_REFCURSOR
10:28:39  63  );
10:28:39  64  
10:28:39  65  PROCEDURE GET_ACCOUNT_NOTES (
10:28:39  66  	  in_group_id	 IN  NUMBER,
10:28:39  67  	  out_result_set OUT SYS_REFCURSOR
10:28:39  68  );
10:28:39  69  
10:28:39  70  PROCEDURE GET_ACCOUNT_PAYPALS(
10:28:39  71  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
10:28:39  72  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V24.PAYPAL_ACTIVE,
10:28:39  73  	out_result_set OUT SYS_REFCURSOR
10:28:39  74  );
10:28:39  75  
10:28:39  76  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
10:28:39  77  	  in_group_id	 IN  NUMBER,
10:28:39  78  	  in_start_date  IN DATE,
10:28:39  79  	  in_end_date	 IN DATE,
10:28:39  80  	  in_status	 IN NUMBER,
10:28:39  81  	  in_group_account_type IN VARCHAR2,
10:28:39  82  	  out_result_set  OUT SYS_REFCURSOR
10:28:39  83  );
10:28:39  84  
10:28:39  85  PROCEDURE FREEZE_ACCOUNT (
10:28:39  86  	in_group_id   IN NUMBER,
10:28:39  87  	in_updated_by IN VARCHAR2,
10:28:39  88  	in_note       IN VARCHAR2,
10:28:39  89  	in_agent_id   IN NUMBER
10:28:39  90  );
10:28:39  91  
10:28:39  92  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
10:28:39  93  	in_group_id	   IN  NUMBER,
10:28:39  94  	in_subscription_id IN NUMBER,
10:28:39  95  	out_result_set	   OUT SYS_REFCURSOR
10:28:39  96  );
10:28:39  97  
10:28:39  98  PROCEDURE GET_ACCOUNT_GC_INVOICES (
10:28:39  99  	in_group_id    IN  NUMBER,
10:28:39 100  	out_result_set OUT SYS_REFCURSOR
10:28:39 101  );
10:28:39 102  
10:28:39 103  PROCEDURE GET_GC_INVOICE (
10:28:39 104  	in_group_id    IN  NUMBER,
10:28:39 105  	in_gc_code     IN  VARCHAR2,
10:28:39 106  	out_result_set OUT SYS_REFCURSOR
10:28:39 107  );
10:28:39 108  
10:28:39 109  PROCEDURE GET_ACCOUNT_PRODUCTS (
10:28:39 110  	in_group_id    IN  NUMBER,
10:28:39 111  	out_result_set OUT SYS_REFCURSOR
10:28:39 112  );
10:28:39 113  
10:28:39 114  PROCEDURE UPDATE_ACCOUNT_STATUS (
10:28:39 115  	in_account_id	     IN ACCOUNT.ID%TYPE,
10:28:39 116  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
10:28:39 117  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
10:28:39 118  );
10:28:39 119  
10:28:39 120  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
10:28:39 121  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
10:28:39 122  	out_licenses_num OUT NUMBER
10:28:39 123  );
10:28:39 124  
10:28:39 125  PROCEDURE SET_TAX_EXEMPT (
10:28:39 126  	in_group_id  IN NUMBER,
10:28:39 127  	in_exempt_id IN VARCHAR2
10:28:39 128  );
10:28:39 129  
10:28:39 130  PROCEDURE IS_TAX_EXEMPT (
10:28:39 131  	in_group_id	  IN NUMBER,
10:28:39 132  	out_is_tax_exempt OUT NUMBER
10:28:39 133  );
10:28:39 134  
10:28:39 135  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
10:28:39 136  	in_account_id IN NUMBER,
10:28:39 137  	out_group_id  OUT NUMBER
10:28:39 138  );
10:28:39 139  
10:28:39 140  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:28:39 141  	in_group_id IN NUMBER,
10:28:39 142  	out_account_id	OUT NUMBER
10:28:39 143  );
10:28:39 144  
10:28:39 145  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
10:28:39 146  	in_invoice_id IN NUMBER,
10:28:39 147  	out_group_ids OUT SYS_REFCURSOR
10:28:39 148  );
10:28:39 149  
10:28:39 150  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
10:28:39 151  	in_group_id	  IN NUMBER,
10:28:39 152  	out_tax_exempt_id OUT VARCHAR2
10:28:39 153  );
10:28:39 154  
10:28:39 155  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
10:28:39 156  	in_group_id    IN NUMBER,
10:28:39 157  	out_result_set OUT SYS_REFCURSOR
10:28:39 158  );
10:28:39 159  
10:28:39 160  PROCEDURE GET_USR_ALL_SBSCR_IDS (
10:28:39 161  	in_group_id	   IN NUMBER,
10:28:39 162  	out_result_set	   OUT SYS_REFCURSOR
10:28:39 163  );
10:28:39 164  
10:28:39 165  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
10:28:39 166  	in_group_id	   IN NUMBER,
10:28:39 167  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:28:39 168  	out_result_set	   OUT SYS_REFCURSOR
10:28:39 169  );
10:28:39 170  
10:28:39 171  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
10:28:39 172  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:28:39 173  	in_expiration_date IN DATE,
10:28:39 174  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
10:28:39 175  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:39 176  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
10:28:39 177  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
10:28:39 178  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
10:28:39 179  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
10:28:39 180  	in_lower_bound IN NUMBER DEFAULT 1,
10:28:39 181  	in_upper_bound IN NUMBER DEFAULT 11,
10:28:39 182  	out_result_set OUT SYS_REFCURSOR
10:28:39 183  );
10:28:39 184  
10:28:39 185  END PROCS_ACCOUNT_V24;
10:28:39 186  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.14
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_account_cru.sql
Compiling header for procs_account_cru.sql
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> -- DDL for package PROCS_ACCOUNT_CRU
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> 
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE CREATE_ACCOUNT (
10:28:39   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
10:28:39   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
10:28:39   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
10:28:39   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
10:28:39   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
10:28:39   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
10:28:39  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:28:39  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
10:28:39  12  );
10:28:39  13  
10:28:39  14  PROCEDURE UPDATE_ACCOUNT (
10:28:39  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
10:28:39  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
10:28:39  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
10:28:39  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
10:28:39  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
10:28:39  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:28:39  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
10:28:39  22  );
10:28:39  23  
10:28:39  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
10:28:39  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
10:28:39  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
10:28:39  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
10:28:39  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
10:28:39  29  );
10:28:39  30  
10:28:39  31  PROCEDURE READ_ACCOUNT (
10:28:39  32  	in_account_id  IN ACCOUNT.ID%TYPE,
10:28:39  33  	out_result_set OUT SYS_REFCURSOR
10:28:39  34  );
10:28:39  35  
10:28:39  36  PROCEDURE CREATE_ACCOUNT_NOTE (
10:28:39  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
10:28:39  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
10:28:39  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
10:28:39  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
10:28:39  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
10:28:39  42  );
10:28:39  43  
10:28:39  44  END PROCS_ACCOUNT_CRU_V24;
10:28:39  45  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.08
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_address.sql
Compiling header for procs_address.sql
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE CREATE_ADDRESS(
10:28:39   4  /*
10:28:39   5  Throws exceptions:
10:28:39   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39   7  */
10:28:39   8  	  out_address_id	OUT NUMBER,
10:28:39   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:28:39  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:28:39  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:28:39  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:28:39  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:39  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:28:39  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
10:28:39  16  );
10:28:39  17  
10:28:39  18  PROCEDURE UPDATE_ADDRESS(
10:28:39  19  /*
10:28:39  20  Throws exceptions:
10:28:39  21  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39  22  */
10:28:39  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
10:28:39  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:28:39  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:28:39  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:28:39  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:28:39  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:39  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:28:39  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
10:28:39  31  );
10:28:39  32  
10:28:39  33  PROCEDURE GET_ADDRESS (
10:28:39  34  /*
10:28:39  35  Throws exceptions:
10:28:39  36  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39  37  */
10:28:39  38  	  in_id 		IN ADDRESS.ID%TYPE,
10:28:39  39  	  out_result_set	OUT SYS_REFCURSOR
10:28:39  40  );
10:28:39  41  
10:28:39  42  END PROCS_ADDRESS_V24;
10:28:39  43  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_address_cru.sql
Compiling header for procs_address_cru.sql
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> -- DDL for package PROCS_ADDRESS_CRU
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> 
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE CREATE_ADDRESS(
10:28:39   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
10:28:39   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
10:28:39   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:28:39   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:28:39   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:28:39   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:28:39  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:39  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:28:39  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
10:28:39  13  );
10:28:39  14  
10:28:39  15  PROCEDURE UPDATE_ADDRESS(
10:28:39  16  	in_address_id	      IN ADDRESS.ID%TYPE,
10:28:39  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:28:39  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:28:39  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:28:39  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:28:39  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:39  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:28:39  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
10:28:39  24  );
10:28:39  25  
10:28:39  26  END PROCS_ADDRESS_CRU_V24;
10:28:39  27  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.02
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_adjustments.sql
Compiling header for procs_adjustments.sql
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> -- DDL for package PROCS_ADJUSTMENTS
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> 
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
10:28:39   4  	in_invoice_id		  IN NUMBER,
10:28:39   5  	in_adjustment_reason	  IN VARCHAR2,
10:28:39   6  	in_is_credit		  IN NUMBER,
10:28:39   7  	in_charge_id		  IN NUMBER,
10:28:39   8  	in_business_date	  IN DATE,
10:28:39   9  	in_created_by		  IN VARCHAR2,
10:28:39  10  	out_invoice_adjustment_id OUT NUMBER
10:28:39  11  );
10:28:39  12  
10:28:39  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
10:28:39  14  	in_invoice_id		  IN NUMBER,
10:28:39  15  	in_original_charge_id	  IN NUMBER,
10:28:39  16  	in_charge_id		  IN NUMBER,
10:28:39  17  	in_updated_by		  IN VARCHAR2
10:28:39  18  );
10:28:39  19  
10:28:39  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
10:28:39  21  	in_line_item_id 	    IN NUMBER,
10:28:39  22  	in_invoice_adjustment_id    IN NUMBER,
10:28:39  23  	in_amount		    IN NUMBER,
10:28:39  24  	in_tax			    IN NUMBER,
10:28:39  25  	in_discount		    IN NUMBER,
10:28:39  26  	in_created_by		    IN VARCHAR2,
10:28:39  27  	out_line_item_adjustment_id OUT NUMBER
10:28:39  28  );
10:28:39  29  
10:28:39  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
10:28:39  31  	in_tax_id		   IN NUMBER,
10:28:39  32  	in_line_item_adjustment_id IN NUMBER,
10:28:39  33  	in_amount		   IN NUMBER,
10:28:39  34  	in_created_by		   IN VARCHAR2,
10:28:39  35  	out_tax_adjustment_id	   OUT NUMBER
10:28:39  36  );
10:28:39  37  
10:28:39  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
10:28:39  39  	in_discount_id		   NUMBER,
10:28:39  40  	in_line_item_id 	   NUMBER,
10:28:39  41  	in_line_item_adjustment_id IN NUMBER,
10:28:39  42  	in_amount		   IN NUMBER,
10:28:39  43  	in_created_by		   IN VARCHAR2,
10:28:39  44  	out_discount_li_id	   OUT NUMBER
10:28:39  45  );
10:28:39  46  
10:28:39  47  END PROCS_ADJUSTMENTS_V24;
10:28:39  48  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_adx.sql
Compiling header for procs_adx.sql
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE GET_SUB_ADX_INFO (
10:28:39   4  /*
10:28:39   5  Throws exceptions:
10:28:39   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39   7  */
10:28:39   8  	out_result_set	    OUT SYS_REFCURSOR,
10:28:39   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
10:28:39  10  );
10:28:39  11  
10:28:39  12  END PROCS_ADX_V24;
10:28:39  13  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_amazon.sql
Compiling header for procs_amazon.sql
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE AASR_PURCHASE_TOKEN_USED(
10:28:39   4  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:28:39   5  	out_data	  OUT NUMBER
10:28:39   6  );
10:28:39   7  
10:28:39   8  PROCEDURE UPDATE_AASR_LAST_CHECK_DATE(
10:28:39   9  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:39  10  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:28:39  11  );
10:28:39  12  
10:28:39  13  PROCEDURE EXPIRED_AASR_SUB_IDS(
10:28:39  14  	out_data   OUT SYS_REFCURSOR
10:28:39  15  );
10:28:39  16  
10:28:39  17  PROCEDURE UPDATE_AASR_PURCHASE_TOKEN(
10:28:39  18  	in_id		  IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:39  19  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:28:39  20  	in_updated_by	  IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:28:39  21  );
10:28:39  22  
10:28:39  23  PROCEDURE UPDATE_AASR_END_DATE(
10:28:39  24  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:39  25  	in_end_date   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE,
10:28:39  26  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:28:39  27  );
10:28:39  28  
10:28:39  29  PROCEDURE AASR_RECEIPTS_WITH_ACTIVE_SUBS(
10:28:39  30  	out_data   OUT SYS_REFCURSOR,
10:28:39  31  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:39  32  );
10:28:39  33  
10:28:39  34  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
10:28:39  35  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:39  36  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:28:39  37  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
10:28:39  38  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
10:28:39  39  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:28:39  40  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:28:39  41  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:28:39  42  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
10:28:39  43  );
10:28:39  44  
10:28:39  45  PROCEDURE AMAZON_APPSTORE_RECEIPTS(
10:28:39  46  	in_user_id IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:28:39  47  	in_sku	   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:28:39  48  	out_data   OUT SYS_REFCURSOR
10:28:39  49  );
10:28:39  50  
10:28:39  51  PROCEDURE CREATE_AMAZON_SUB(
10:28:39  52  	  out_id	      OUT NUMBER,
10:28:39  53  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
10:28:39  54  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
10:28:39  55  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
10:28:39  56  );
10:28:39  57  
10:28:39  58  PROCEDURE GET_ACTIVE_SUB_IDS (
10:28:39  59  	out_result_set	    OUT SYS_REFCURSOR,
10:28:39  60  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
10:28:39  61  );
10:28:39  62  
10:28:39  63  PROCEDURE GET_ACTIVE_GROUP_IDS (
10:28:39  64  	out_result_set	    OUT SYS_REFCURSOR,
10:28:39  65  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
10:28:39  66  );
10:28:39  67  
10:28:39  68  END PROCS_AMAZON_V24;
10:28:39  69  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.10
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_amazon_cru.sql
Compiling header for procs_amazon_cru.sql
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE UPDATE_AMAZON_APPSTORE_RECEIPT(
10:28:39   4  	in_id		   IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:39   5  	in_updated_by	   IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE,
10:28:39   6  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE DEFAULT NULL,
10:28:39   7  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE DEFAULT NULL,
10:28:39   8  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE DEFAULT NULL,
10:28:39   9  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE DEFAULT NULL,
10:28:39  10  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:28:39  11  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE DEFAULT NULL,
10:28:39  12  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE DEFAULT NULL,
10:28:39  13  	in_last_check_date IN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE DEFAULT NULL
10:28:39  14  );
10:28:39  15  
10:28:39  16  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
10:28:39  17  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:39  18  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:28:39  19  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
10:28:39  20  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
10:28:39  21  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:28:39  22  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:28:39  23  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:28:39  24  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
10:28:39  25  );
10:28:39  26  
10:28:39  27  PROCEDURE CREATE_AMAZON_SUB(
10:28:39  28  	  out_id	      OUT NUMBER,
10:28:39  29  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
10:28:39  30  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
10:28:39  31  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
10:28:39  32  );
10:28:39  33  
10:28:39  34  END PROCS_AMAZON_CRU_V24;
10:28:39  35  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.02
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_ar_bal_applies.sql
Compiling header for procs_ar_bal_applies.sql
10:28:39 SQL> 
10:28:39 SQL> 
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_AR_BAL_APPLIES_V24" AS
10:28:39   2  
10:28:39   3  
10:28:39   4  PROCEDURE APPLY_BALANCE (
10:28:39   5  	in_invoice_id  IN AR_BALANCE_APPLIES.INVOICE_ID%TYPE,
10:28:39   6  	in_charge_id IN AR_BALANCE_APPLIES.CHARGE_ID%TYPE,
10:28:39   7  	in_amount IN AR_BALANCE_APPLIES.AMOUNT%TYPE,
10:28:39   8  	in_created_by	    IN AR_BALANCE_APPLIES.CREATED_BY%TYPE
10:28:39   9  );
10:28:39  10  
10:28:39  11  
10:28:39  12  END PROCS_AR_BAL_APPLIES_V24;
10:28:39  13  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.02
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_charge.sql
Compiling header for procs_charge.sql
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> -- DDL for package PROCS_CHARGE
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> 
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE CREATE_CHARGE(
10:28:39   4  /*
10:28:39   5  Throws exceptions:
10:28:39   6  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:39   7  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39   8  */
10:28:39   9  	in_invoice_id	      IN NUMBER,
10:28:39  10  	in_transaction_id     IN NUMBER,
10:28:39  11  	in_instrument_type_id IN NUMBER,
10:28:39  12  	in_instrument_id      IN NUMBER,
10:28:39  13  	in_charge_amount      IN NUMBER,
10:28:39  14  	in_created_by	      IN VARCHAR2,
10:28:39  15  	in_charge_status_id   IN NUMBER,
10:28:39  16  	out_charge_id	      OUT NUMBER
10:28:39  17  );
10:28:39  18  
10:28:39  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
10:28:39  20  /*
10:28:39  21  Throws exceptions:
10:28:39  22  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39  23  */
10:28:39  24  	out_result_set	    OUT SYS_REFCURSOR,
10:28:39  25  	in_row_number	    IN NUMBER DEFAULT NULL
10:28:39  26  );
10:28:39  27  
10:28:39  28  PROCEDURE GET_UNPROCESSED_CHARGES (
10:28:39  29  /*
10:28:39  30  Throws exceptions:
10:28:39  31  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:39  32  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39  33  */
10:28:39  34  	in_invoice_id  IN NUMBER,
10:28:39  35  	out_result_set OUT SYS_REFCURSOR
10:28:39  36  );
10:28:39  37  
10:28:39  38  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
10:28:39  39  /*
10:28:39  40  Throws exceptions:
10:28:39  41  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:39  42  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39  43  */
10:28:39  44  	in_charge_id	    IN NUMBER,
10:28:39  45  	out_subscription_id OUT NUMBER
10:28:39  46  );
10:28:39  47  
10:28:39  48  PROCEDURE UPDATE_CHARGE_STATUS (
10:28:39  49  /*
10:28:39  50  Throws exceptions:
10:28:39  51  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:39  52  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39  53  */
10:28:39  54  	in_charge_id	    IN CHARGE.ID%TYPE,
10:28:39  55  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:28:39  56  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
10:28:39  57  );
10:28:39  58  
10:28:39  59  FUNCTION IS_CHARGE_COLLECTED (
10:28:39  60  /*
10:28:39  61  Throws:
10:28:39  62  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:39  63  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39  64  Returns:
10:28:39  65  GLOBAL_CONST.TRUE if transaction collected,
10:28:39  66  GLOBAL_CONST.FALSE else
10:28:39  67  */
10:28:39  68  	in_charge_id IN NUMBER
10:28:39  69  ) RETURN NUMBER;
10:28:39  70  
10:28:39  71  PROCEDURE GET_COLLECTED_CHARGES (
10:28:39  72  /*
10:28:39  73  Throws exceptions:
10:28:39  74  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:39  75  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:39  76  */
10:28:39  77  	in_invoice_id  IN NUMBER,
10:28:39  78  	out_result_set OUT SYS_REFCURSOR
10:28:39  79  );
10:28:39  80  
10:28:39  81  END PROCS_CHARGE_V24;
10:28:39  82  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.09
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_charge_cru.sql
Compiling header for procs_charge_cru.sql
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> -- DDL for package PROCS_CHARGE_CRU
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> 
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE CREATE_CHARGE(
10:28:39   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
10:28:39   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
10:28:39   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
10:28:39   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
10:28:39   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
10:28:39   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
10:28:39  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
10:28:39  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:28:39  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
10:28:39  13  );
10:28:39  14  
10:28:39  15  PROCEDURE UPDATE_CHARGE(
10:28:39  16  	in_charge_id	      IN CHARGE.ID%TYPE,
10:28:39  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:28:39  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
10:28:39  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
10:28:39  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
10:28:39  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
10:28:39  22  );
10:28:39  23  
10:28:39  24  END PROCS_CHARGE_CRU_V24;
10:28:39  25  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.02
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_cupy.sql
Compiling header for procs_cupy.sql
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
10:28:39   2  
10:28:39   3  	PROCEDURE POPULATE_REQUEST_INFO(
10:28:39   4  	  in_hours_prior    IN	NUMBER,
10:28:39   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
10:28:39   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
10:28:39   7  	);
10:28:39   8  
10:28:39   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
10:28:39  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:28:39  11  	  in_start	     IN NUMBER,
10:28:39  12  	  in_end	     IN NUMBER,
10:28:39  13  	  out_result_set     OUT SYS_REFCURSOR
10:28:39  14  	);
10:28:39  15  
10:28:39  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
10:28:39  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
10:28:39  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
10:28:39  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
10:28:39  20  	);
10:28:39  21  
10:28:39  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
10:28:39  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:28:39  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:28:39  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
10:28:39  26  	);
10:28:39  27  
10:28:39  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
10:28:39  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
10:28:39  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
10:28:39  31  	  out_request_files   OUT SYS_REFCURSOR
10:28:39  32  	);
10:28:39  33  
10:28:39  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
10:28:39  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:28:39  36  	  out_count OUT NUMBER
10:28:39  37  	);
10:28:39  38  
10:28:39  39  	PROCEDURE GET_CREDIT_CARD_INFO (
10:28:39  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
10:28:39  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
10:28:39  42  	  out_card_info        OUT SYS_REFCURSOR
10:28:39  43  	);
10:28:39  44  
10:28:39  45  	PROCEDURE UPDATE_CC_UPDATE(
10:28:39  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
10:28:39  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:28:39  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
10:28:39  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
10:28:39  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
10:28:39  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:28:39  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
10:28:39  53  	);
10:28:39  54  
10:28:39  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
10:28:39  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
10:28:39  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:28:39  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
10:28:39  59  	);
10:28:39  60  
10:28:39  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
10:28:39  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
10:28:39  63  	  out_request_file     OUT SYS_REFCURSOR
10:28:39  64  	);
10:28:39  65  
10:28:39  66  	PROCEDURE SUSPEND_CREDIT_CARD (
10:28:39  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
10:28:39  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
10:28:39  69  	);
10:28:39  70  
10:28:39  71  	PROCEDURE UPDATE_CREDIT_CARD (
10:28:39  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
10:28:39  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:28:39  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
10:28:39  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
10:28:39  76  	);
10:28:39  77  
10:28:39  78  	PROCEDURE COMPLETABLE_REQUESTS (
10:28:39  79  	  out_request_files OUT SYS_REFCURSOR
10:28:39  80  	);
10:28:39  81  
10:28:39  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
10:28:39  83  	  in_max_hours_before_report IN  NUMBER,
10:28:39  84  	  out_request_files	     OUT SYS_REFCURSOR
10:28:39  85  	);
10:28:39  86  
10:28:39  87  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
10:28:39  88  	  in_account_id IN NUMBER,
10:28:39  89  	  out_group_id	OUT NUMBER
10:28:39  90  	);
10:28:39  91  
10:28:39  92  	PROCEDURE GET_LICENSE_BY_ID (
10:28:39  93  	  in_license_id  IN NUMBER,
10:28:39  94  	  out_result_set OUT SYS_REFCURSOR
10:28:39  95  	);
10:28:39  96  
10:28:39  97  END PROCS_CUPY;
10:28:39  98  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.05
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_entitlement.sql
Compiling header for procs_entitlement.sql
10:28:39 SQL> CREATE OR REPLACE
10:28:39   2  PACKAGE PROCS_ENTITLEMENT_V24 AS
10:28:39   3  
10:28:39   4  PROCEDURE GET_ALL_ENTITLEMENTS(
10:28:39   5  	in_group_id IN NUMBER,
10:28:39   6  	out_result_set OUT SYS_REFCURSOR);
10:28:39   7  
10:28:39   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
10:28:39   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:39  10  	out_result_set OUT SYS_REFCURSOR);
10:28:39  11  
10:28:39  12  END PROCS_ENTITLEMENT_V24;
10:28:39  13  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.04
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_fin_instruments.sql
Compiling header for procs_fin_instruments.sql
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
10:28:39   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:39   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
10:28:39   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
10:28:39   7  );
10:28:39   8  
10:28:39   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
10:28:39  10  	in_invoice_id		     IN NUMBER,
10:28:39  11  	out_is_invoice_for_redeem_gc OUT NUMBER
10:28:39  12  );
10:28:39  13  
10:28:39  14  PROCEDURE GET_UNREDEEMED_GCS (
10:28:39  15  	out_result_set		OUT SYS_REFCURSOR,
10:28:39  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:28:39  17  	in_num_rows		IN NUMBER DEFAULT 10000,
10:28:39  18  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:39  19  );
10:28:39  20  
10:28:39  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
10:28:39  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:39  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
10:28:39  24  );
10:28:39  25  
10:28:39  26  PROCEDURE ADD_CREDIT_CARD (
10:28:39  27  	in_group_id		  IN NUMBER,
10:28:39  28  	in_updated_by		  IN VARCHAR2,
10:28:39  29  	in_instrument_name	  IN VARCHAR2,
10:28:39  30  	in_card_holder_name	  IN VARCHAR2,
10:28:39  31  	in_street_address	  IN VARCHAR2,
10:28:39  32  	in_street_address2	  IN VARCHAR2,
10:28:39  33  	in_state		  IN VARCHAR2,
10:28:39  34  	in_city 		  IN VARCHAR2,
10:28:39  35  	in_postal_code		  IN VARCHAR2,
10:28:39  36  	in_country		  IN CHAR,
10:28:39  37  	in_last_four_cc 	  IN VARCHAR2,
10:28:39  38  	in_expiration_date	  IN DATE,
10:28:39  39  	in_credit_card_type_id	  IN NUMBER,
10:28:39  40  	in_token		  IN VARCHAR2,
10:28:39  41  	in_chase_profile_id	  IN VARCHAR2,
10:28:39  42  	in_credit_card_status_id  IN NUMBER,
10:28:39  43  	in_private_first_name	  IN VARCHAR2,
10:28:39  44  	in_private_last_name	  IN VARCHAR2,
10:28:39  45  	out_credit_card_id	  OUT NUMBER
10:28:39  46  );
10:28:39  47  
10:28:39  48  /******************************************************************************/
10:28:39  49  
10:28:39  50  PROCEDURE ADD_PAYPAL (
10:28:39  51  	in_group_id			IN NUMBER,
10:28:39  52  	in_instrument_name		IN VARCHAR2,
10:28:39  53  	in_private_email_address	IN VARCHAR2,
10:28:39  54  	in_created_by			IN VARCHAR2,
10:28:39  55  	in_paypal_status_id		IN NUMBER,
10:28:39  56  	in_paypal_prvt_street_address	IN VARCHAR2,
10:28:39  57  	in_paypal_prvt_street_address2	IN VARCHAR2,
10:28:39  58  	in_state			IN VARCHAR2,
10:28:39  59  	in_city 			IN VARCHAR2,
10:28:39  60  	in_postal_code			IN VARCHAR2,
10:28:39  61  	in_country			IN CHAR,
10:28:39  62  	in_expiration_date		IN DATE,
10:28:39  63  	in_secret_token 		IN VARCHAR2,
10:28:39  64  	out_paypal_id			OUT NUMBER
10:28:39  65  );
10:28:39  66  
10:28:39  67  /********************************************/
10:28:39  68  
10:28:39  69  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
10:28:39  70  	in_code       IN VARCHAR,
10:28:39  71  	out_result_set OUT SYS_REFCURSOR
10:28:39  72  );
10:28:39  73  
10:28:39  74  /********************************************/
10:28:39  75  
10:28:39  76  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
10:28:39  77  	in_gift_certificate_id IN NUMBER,
10:28:39  78  	out_result_set	       OUT SYS_REFCURSOR
10:28:39  79  );
10:28:39  80  
10:28:39  81  /********************************************/
10:28:39  82  
10:28:39  83  PROCEDURE DISABLE_CREDIT_CARD (
10:28:39  84  	in_credit_card_id IN NUMBER,
10:28:39  85  	in_updated_by	  IN VARCHAR2
10:28:39  86  );
10:28:39  87  
10:28:39  88  /********************************************/
10:28:39  89  
10:28:39  90  PROCEDURE DISABLE_PAYPAL (
10:28:39  91  	in_paypal_id  IN NUMBER,
10:28:39  92  	in_updated_by IN VARCHAR2
10:28:39  93  );
10:28:39  94  
10:28:39  95  /********************************************/
10:28:39  96  
10:28:39  97  PROCEDURE UPDATE_CREDIT_CARD (
10:28:39  98  	in_credit_card_id	  IN NUMBER,
10:28:39  99  	in_updated_by		  IN VARCHAR2,
10:28:39 100  	in_instrument_name	  IN VARCHAR2,
10:28:39 101  	in_is_default		  IN NUMBER
10:28:39 102  );
10:28:39 103  
10:28:39 104  /********************************************/
10:28:39 105  
10:28:39 106  PROCEDURE START_GC_PURCHASING (
10:28:39 107  	in_group_id		  IN NUMBER,
10:28:39 108  	in_offer_chain_id	  IN VARCHAR2,
10:28:39 109  	in_gift_certificate_code  IN  VARCHAR2,
10:28:39 110  	in_created_by		  IN  VARCHAR2,
10:28:39 111  	in_recipient_name	  IN  VARCHAR2,
10:28:39 112  	in_recipient_email	  IN  VARCHAR2,
10:28:39 113  	in_recipient_address_id   IN NUMBER,
10:28:39 114  	in_recipient_notify_date  IN DATE,
10:28:39 115  	in_sender_name		  IN VARCHAR2,
10:28:39 116  	in_sender_email 	  IN VARCHAR2,
10:28:39 117  	in_gift_message 	  IN  VARCHAR2,
10:28:39 118  	in_expiration_date	  IN DATE,
10:28:39 119  	in_campaign		  IN VARCHAR2,
10:28:39 120  	in_reference_code	  IN VARCHAR2,
10:28:39 121  	out_gift_certificate_id   OUT NUMBER,
10:28:39 122  	out_invoice_id		  OUT NUMBER
10:28:39 123  );
10:28:39 124  
10:28:39 125  PROCEDURE FINALIZE_GC_PURCHASING (
10:28:39 126  	in_invoice_id	      IN NUMBER,
10:28:39 127  	in_created_by	      IN VARCHAR2,
10:28:39 128  	in_instrument_id      IN NUMBER,
10:28:39 129  	in_instrument_type_id IN NUMBER,
10:28:39 130  	in_order_id	      IN VARCHAR2,
10:28:39 131  	in_transaction_id     IN NUMBER,
10:28:39 132  	out_charge_amount     OUT NUMBER
10:28:39 133  );
10:28:39 134  
10:28:39 135  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
10:28:39 136  	in_group_id	  IN NUMBER,
10:28:39 137  	in_offer_chain_id IN VARCHAR2,
10:28:39 138  	in_gift_certificate_code  IN  VARCHAR2,
10:28:39 139  	in_created_by IN  VARCHAR2,
10:28:39 140  	in_recipient_name IN  VARCHAR2,
10:28:39 141  	in_recipient_email IN  VARCHAR2,
10:28:39 142  	in_sender_name IN VARCHAR2,
10:28:39 143  	in_sender_email IN VARCHAR2,
10:28:39 144  	in_gift_message IN  VARCHAR2,
10:28:39 145  	in_instrument_id  IN  NUMBER,
10:28:39 146  	in_instrument_type_id IN NUMBER,
10:28:39 147  	in_expiration_date IN DATE,
10:28:39 148  	in_order_id IN VARCHAR2,
10:28:39 149  	in_transaction_id IN NUMBER
10:28:39 150  );
10:28:39 151  
10:28:39 152  /*********************************************/
10:28:39 153  
10:28:39 154  PROCEDURE REDEEM_GIFT_CERTIFICATE (
10:28:39 155  	in_group_id			IN NUMBER,
10:28:39 156  	in_gift_certificate_code	IN VARCHAR2,
10:28:39 157  	in_created_by			IN VARCHAR2,
10:28:39 158  	in_redeemer_address_id		IN NUMBER,
10:28:39 159  	in_fin_instrument_id		IN NUMBER,
10:28:39 160  	in_fin_instrument_type_id	IN NUMBER,
10:28:39 161  	in_redemption_offer_chain_id	IN NUMBER,
10:28:39 162  	out_subscription_id		OUT NUMBER,
10:28:39 163  	out_license_id			OUT NUMBER
10:28:39 164  );
10:28:39 165  
10:28:39 166  /********************************************/
10:28:39 167  
10:28:39 168  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
10:28:39 169  	in_group_id	       IN  NUMBER,
10:28:39 170  	out_instrument_type_id OUT NUMBER,
10:28:39 171  	out_instrument_id      OUT NUMBER
10:28:39 172  );
10:28:39 173  
10:28:39 174  /************************************************/
10:28:39 175  
10:28:39 176  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
10:28:39 177  	in_group_id	      IN NUMBER,
10:28:39 178  	in_instrument_type_id IN NUMBER,
10:28:39 179  	in_instrument_id      IN NUMBER,
10:28:39 180  	in_updated_by	      IN VARCHAR2
10:28:39 181  );
10:28:39 182  
10:28:39 183  /***************************************************/
10:28:39 184  
10:28:39 185  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
10:28:39 186  	in_group_id	      IN NUMBER
10:28:39 187  );
10:28:39 188  
10:28:39 189  /****************************************************/
10:28:39 190  
10:28:39 191  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:28:39 192  	in_credit_card_id IN  NUMBER,
10:28:39 193  	out_result_set	  OUT SYS_REFCURSOR
10:28:39 194  );
10:28:39 195  
10:28:39 196  /****************************************************/
10:28:39 197  
10:28:39 198  PROCEDURE GET_PAYPAL_BY_ID (
10:28:39 199  	in_paypal_id   IN  NUMBER,
10:28:39 200  	out_result_set OUT SYS_REFCURSOR
10:28:39 201  );
10:28:39 202  
10:28:39 203  /***********************************************/
10:28:39 204  
10:28:39 205  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
10:28:39 206  	in_credit_card_id NUMBER
10:28:39 207  ) RETURN NUMBER;
10:28:39 208  
10:28:39 209  /*************************************************/
10:28:39 210  
10:28:39 211  PROCEDURE GET_PURCHASED_GCERTIFICATES (
10:28:39 212  	in_group_id    IN NUMBER,
10:28:39 213  	out_result_set OUT SYS_REFCURSOR
10:28:39 214  );
10:28:39 215  
10:28:39 216  /*************************************************/
10:28:39 217  
10:28:39 218  -- isGiftCertificateForProperOffer
10:28:39 219  
10:28:39 220  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
10:28:39 221  	in_gift_certificate_id IN NUMBER,
10:28:39 222  	in_charge_id	       IN NUMBER,
10:28:39 223  	out_result	       OUT NUMBER
10:28:39 224  );
10:28:39 225  
10:28:39 226  FUNCTION IS_CREDIT_CARD_EXISTS (
10:28:39 227  /*
10:28:39 228  1 - if instrument exists
10:28:39 229  0 - else
10:28:39 230  */
10:28:39 231  	in_credit_card_id IN NUMBER
10:28:39 232  ) RETURN NUMBER;
10:28:39 233  
10:28:39 234  FUNCTION IS_PAYPAL_EXISTS (
10:28:39 235  /*
10:28:39 236  1 - if instrument exists
10:28:39 237  0 - else
10:28:39 238  */
10:28:39 239  	in_paypal_id IN NUMBER
10:28:39 240  ) RETURN NUMBER;
10:28:39 241  
10:28:39 242  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
10:28:39 243  /*
10:28:39 244  1 - if instrument exists
10:28:39 245  0 - else
10:28:39 246  */
10:28:39 247  	in_gift_certificate_id IN NUMBER
10:28:39 248  ) RETURN NUMBER;
10:28:39 249  
10:28:39 250  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
10:28:39 251  	in_credit_card_id IN NUMBER,
10:28:39 252  	out_group_id	  OUT NUMBER
10:28:39 253  );
10:28:39 254  
10:28:39 255  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
10:28:39 256  	in_paypal_id IN NUMBER,
10:28:39 257  	out_group_id	  OUT NUMBER
10:28:39 258  );
10:28:39 259  
10:28:39 260  PROCEDURE GET_EXPIRING_PAYPAL (
10:28:39 261  	in_expire_window_days	IN NUMBER,
10:28:39 262  	in_creation_limit_days	IN NUMBER,
10:28:39 263  	in_retry_throttle_name	PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
10:28:39 264  	out_result_set		OUT SYS_REFCURSOR
10:28:39 265  );
10:28:39 266  
10:28:39 267  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
10:28:39 268  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
10:28:39 269  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
10:28:39 270  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
10:28:39 271  );
10:28:39 272  
10:28:39 273  PROCEDURE UPDATE_PAYPAL_STATUS (
10:28:39 274  	in_paypal_id	    IN PAYPAL.ID%TYPE,
10:28:39 275  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
10:28:39 276  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
10:28:39 277  );
10:28:39 278  
10:28:39 279  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
10:28:39 280  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
10:28:39 281  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
10:28:39 282  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
10:28:39 283  );
10:28:39 284  
10:28:39 285  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:28:39 286  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:39 287  	out_result_set OUT SYS_REFCURSOR
10:28:39 288  );
10:28:39 289  
10:28:39 290  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
10:28:39 291  	in_old_fin_instrument_id   IN NUMBER,
10:28:39 292  	in_old_fin_instrument_type IN NUMBER,
10:28:39 293  	in_new_fin_instrument_id   IN NUMBER,
10:28:39 294  	in_new_fin_instrument_type IN NUMBER,
10:28:39 295  	in_updated_by		   IN VARCHAR2
10:28:39 296  );
10:28:39 297  
10:28:39 298  END PROCS_FIN_INSTRUMENTS_V24;
10:28:39 299  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.17
10:28:39 SQL> 
10:28:39 SQL> prompt Compiling header for procs_fin_instruments_cru.sql
Compiling header for procs_fin_instruments_cru.sql
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
10:28:39 SQL> --------------------------------------------------------------------------------
10:28:39 SQL> 
10:28:39 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V24" AS
10:28:39   2  
10:28:39   3  PROCEDURE CREATE_CREDIT_CARD(
10:28:39   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
10:28:39   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
10:28:39   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
10:28:39   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
10:28:39   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
10:28:39   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
10:28:39  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
10:28:39  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
10:28:39  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
10:28:39  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
10:28:39  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
10:28:39  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:28:39  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
10:28:39  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
10:28:39  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
10:28:39  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
10:28:39  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
10:28:39  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
10:28:39  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
10:28:39  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
10:28:39  24  );
10:28:39  25  
10:28:39  26  PROCEDURE UPDATE_CREDIT_CARD(
10:28:39  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
10:28:39  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:28:39  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
10:28:39  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:28:39  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
10:28:39  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
10:28:39  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
10:28:39  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:39  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
10:28:39  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
10:28:39  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:28:39  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
10:28:39  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
10:28:39  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
10:28:39  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
10:28:39  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
10:28:39  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
10:28:39  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
10:28:39  45  );
10:28:39  46  
10:28:39  47  PROCEDURE CREATE_PAYPAL(
10:28:39  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
10:28:39  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
10:28:39  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
10:28:39  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:28:39  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
10:28:39  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
10:28:39  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
10:28:39  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
10:28:39  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
10:28:39  57  	in_state			IN PAYPAL.STATE%TYPE,
10:28:39  58  	in_city 			IN PAYPAL.CITY%TYPE,
10:28:39  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
10:28:39  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
10:28:39  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
10:28:39  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
10:28:39  63  );
10:28:39  64  
10:28:39  65  PROCEDURE UPDATE_PAYPAL(
10:28:39  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
10:28:39  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:28:39  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
10:28:39  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
10:28:39  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
10:28:39  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:28:39  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:28:39  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
10:28:39  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
10:28:39  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:39  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
10:28:39  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:28:39  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
10:28:39  79  );
10:28:39  80  
10:28:39  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
10:28:39  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
10:28:39  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
10:28:39  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
10:28:39  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:39  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
10:28:39  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:28:39  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
10:28:39  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
10:28:39  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
10:28:39  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
10:28:39  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
10:28:39  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
10:28:39  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
10:28:39  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
10:28:39  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
10:28:39  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
10:28:39  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
10:28:39  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
10:28:39 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
10:28:39 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
10:28:39 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL,
10:28:39 103  	in_campaign		      IN GC_CAMPAIGN_AND_REF.CAMPAIGN%TYPE DEFAULT NULL,
10:28:39 104  	in_reference_code	      IN GC_CAMPAIGN_AND_REF.REFERENCE_CODE%TYPE DEFAULT NULL
10:28:39 105  );
10:28:39 106  
10:28:39 107  PROCEDURE UPDATE_GIFT_CERTIFICATE(
10:28:39 108  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
10:28:39 109  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:28:39 110  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
10:28:39 111  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
10:28:39 112  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
10:28:39 113  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
10:28:39 114  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
10:28:39 115  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
10:28:39 116  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
10:28:39 117  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
10:28:39 118  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
10:28:39 119  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
10:28:39 120  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
10:28:39 121  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
10:28:39 122  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
10:28:39 123  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
10:28:39 124  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
10:28:39 125  );
10:28:39 126  
10:28:39 127  END PROCS_FIN_INSTRUMENTS_CRU_V24;
10:28:39 128  .
10:28:39 SQL> /

Package created.

Elapsed: 00:00:00.12
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_group_account.sql
Compiling header for procs_group_account.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V24" As
10:28:40   2  
10:28:40   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
10:28:40   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
10:28:40   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
10:28:40   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:40   7  );
10:28:40   8  
10:28:40   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
10:28:40  10  	out_result_set OUT SYS_REFCURSOR
10:28:40  11  );
10:28:40  12  
10:28:40  13  PROCEDURE EXPIRE_SUB_SHARE (
10:28:40  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
10:28:40  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:40  16  );
10:28:40  17  
10:28:40  18  PROCEDURE EXPIRE_ALL_SHARES (
10:28:40  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
10:28:40  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:40  21  );
10:28:40  22  
10:28:40  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
10:28:40  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
10:28:40  25  	in_start	 IN  NUMBER,
10:28:40  26  	in_end		 IN  NUMBER,
10:28:40  27  	in_expired	 IN  NUMBER,
10:28:40  28  	out_result_set	 OUT SYS_REFCURSOR,
10:28:40  29  	out_shares_count OUT NUMBER
10:28:40  30  );
10:28:40  31  
10:28:40  32  PROCEDURE IS_VALID_IP_ADDRESS (
10:28:40  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:40  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:28:40  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:28:40  36  	out_is_valid	    OUT NUMBER
10:28:40  37  );
10:28:40  38  
10:28:40  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
10:28:40  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:40  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:28:40  42  	out_is_valid	    OUT NUMBER
10:28:40  43  );
10:28:40  44  
10:28:40  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
10:28:40  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
10:28:40  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
10:28:40  48  	Out_Result_Set	       Out Sys_Refcursor
10:28:40  49  );
10:28:40  50  
10:28:40  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
10:28:40  52  	in_group_account_id IN NUMBER,
10:28:40  53  	in_start	    IN NUMBER,
10:28:40  54  	in_end		    IN NUMBER,
10:28:40  55  	Out_Result_Set	    OUT Sys_Refcursor
10:28:40  56  );
10:28:40  57  
10:28:40  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
10:28:40  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
10:28:40  60  	Out_Result_Set	   Out Sys_Refcursor
10:28:40  61  );
10:28:40  62  
10:28:40  63  PROCEDURE CREATE_GROUP_ACCOUNT (
10:28:40  64  	in_subscription_id	 IN NUMBER,
10:28:40  65  	in_group_name		 IN VARCHAR2,
10:28:40  66  	in_first_name		 IN VARCHAR2,
10:28:40  67  	in_last_name		 IN VARCHAR2,
10:28:40  68  	in_email		 IN VARCHAR2,
10:28:40  69  	in_phone		 IN VARCHAR2,
10:28:40  70  	in_organization_type	 IN VARCHAR2,
10:28:40  71  	in_seats		 IN NUMBER,
10:28:40  72  	in_seat_ttl_in_hours	 IN NUMBER,
10:28:40  73  	in_ip			 IN NUMBER,
10:28:40  74  	in_created_by		 IN VARCHAR2
10:28:40  75  );
10:28:40  76  
10:28:40  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
10:28:40  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:28:40  79  	out_result_set	    OUT SYS_REFCURSOR
10:28:40  80  );
10:28:40  81  
10:28:40  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
10:28:40  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:28:40  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:28:40  85  	out_result_set	    OUT SYS_REFCURSOR
10:28:40  86  );
10:28:40  87  
10:28:40  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
10:28:40  89  	in_group_account_id   IN NUMBER,
10:28:40  90  	in_start	      IN NUMBER,
10:28:40  91  	in_end		      IN NUMBER,
10:28:40  92  	in_status	      IN NUMBER,
10:28:40  93  	out_record_count      OUT NUMBER,
10:28:40  94  	out_result_set	      OUT SYS_REFCURSOR
10:28:40  95  );
10:28:40  96  
10:28:40  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
10:28:40  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:40  99  	in_start	      IN NUMBER,
10:28:40 100  	in_end		      IN NUMBER,
10:28:40 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
10:28:40 102  	out_record_count      OUT NUMBER,
10:28:40 103  	out_result_set	      OUT SYS_REFCURSOR
10:28:40 104  );
10:28:40 105  
10:28:40 106  PROCEDURE ADD_EMAIL_DOMAIN (
10:28:40 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:40 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:28:40 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
10:28:40 110  );
10:28:40 111  
10:28:40 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
10:28:40 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:40 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:40 115  );
10:28:40 116  
10:28:40 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
10:28:40 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:28:40 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:40 120  );
10:28:40 121  
10:28:40 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
10:28:40 123  	in_group_account_id    IN NUMBER,
10:28:40 124  	in_borrower_account_id IN NUMBER,
10:28:40 125  	in_ip_address	       IN VARCHAR2,
10:28:40 126  	in_email_domain        IN VARCHAR2,
10:28:40 127  	in_created_by	       IN VARCHAR2
10:28:40 128  );
10:28:40 129  
10:28:40 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
10:28:40 131  	in_group_account_id   IN NUMBER,
10:28:40 132  	out_occupied_seats   OUT NUMBER
10:28:40 133  );
10:28:40 134  
10:28:40 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
10:28:40 136  	in_group_account_id   IN NUMBER
10:28:40 137  ) RETURN NUMBER;
10:28:40 138  
10:28:40 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
10:28:40 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:40 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:28:40 142  );
10:28:40 143  
10:28:40 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
10:28:40 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
10:28:40 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:28:40 147  );
10:28:40 148  
10:28:40 149  PROCEDURE ADD_IP_RANGE (
10:28:40 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:40 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
10:28:40 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:28:40 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:28:40 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
10:28:40 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
10:28:40 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
10:28:40 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
10:28:40 158  );
10:28:40 159  
10:28:40 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
10:28:40 161  	in_group_account_id IN NUMBER,
10:28:40 162  	out_group_id OUT NUMBER
10:28:40 163  );
10:28:40 164  
10:28:40 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
10:28:40 166  	in_group_account_ip_range_id IN NUMBER,
10:28:40 167  	out_group_id OUT NUMBER
10:28:40 168  );
10:28:40 169  
10:28:40 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
10:28:40 171  	in_group_account_email_dom_id IN NUMBER,
10:28:40 172  	out_group_id OUT NUMBER
10:28:40 173  );
10:28:40 174  
10:28:40 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
10:28:40 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:28:40 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
10:28:40 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
10:28:40 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
10:28:40 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
10:28:40 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
10:28:40 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:28:40 183  );
10:28:40 184  
10:28:40 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
10:28:40 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:28:40 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
10:28:40 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:28:40 189  );
10:28:40 190  
10:28:40 191  END PROCS_GROUP_ACCOUNT_V24;
10:28:40 192  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.12
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_group_account_cru.sql
Compiling header for procs_group_account_cru.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
10:28:40   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
10:28:40   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
10:28:40   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
10:28:40   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
10:28:40   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
10:28:40   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
10:28:40  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
10:28:40  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:40  12  );
10:28:40  13  
10:28:40  14  PROCEDURE CREATE_GROUP_ACCOUNT (
10:28:40  15  	in_subscription_id	 IN NUMBER,
10:28:40  16  	in_group_name		 IN VARCHAR2,
10:28:40  17  	in_first_name		 IN VARCHAR2,
10:28:40  18  	in_last_name		 IN VARCHAR2,
10:28:40  19  	in_email		 IN VARCHAR2,
10:28:40  20  	in_phone		 IN VARCHAR2,
10:28:40  21  	in_organization_type	 IN VARCHAR2,
10:28:40  22  	in_seats		 IN NUMBER,
10:28:40  23  	in_seat_ttl_in_hours	 IN NUMBER,
10:28:40  24  	in_ip			 IN NUMBER,
10:28:40  25  	in_created_by		 IN VARCHAR2
10:28:40  26  );
10:28:40  27  
10:28:40  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
10:28:40  29  	in_group_account_id    IN NUMBER,
10:28:40  30  	in_borrower_account_id IN NUMBER,
10:28:40  31  	in_ip_address	       IN VARCHAR2,
10:28:40  32  	in_email_domain        IN VARCHAR2,
10:28:40  33  	in_start_date	       IN DATE,
10:28:40  34  	in_end_date	       IN DATE,
10:28:40  35  	in_created_by	       IN VARCHAR2
10:28:40  36  );
10:28:40  37  
10:28:40  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
10:28:40  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:40  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:28:40  41  );
10:28:40  42  
10:28:40  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
10:28:40  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
10:28:40  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:28:40  46  );
10:28:40  47  
10:28:40  48  PROCEDURE ADD_IP_RANGE (
10:28:40  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:40  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
10:28:40  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:28:40  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:28:40  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
10:28:40  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
10:28:40  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
10:28:40  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
10:28:40  57  );
10:28:40  58  
10:28:40  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
10:28:40  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:40  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:40  62  );
10:28:40  63  
10:28:40  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
10:28:40  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:28:40  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:40  67  );
10:28:40  68  
10:28:40  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
10:28:40  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:28:40  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:40  72  );
10:28:40  73  
10:28:40  74  PROCEDURE ADD_EMAIL_DOMAIN (
10:28:40  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:40  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:28:40  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
10:28:40  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
10:28:40  79  );
10:28:40  80  
10:28:40  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
10:28:40  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:28:40  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
10:28:40  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
10:28:40  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
10:28:40  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
10:28:40  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
10:28:40  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:28:40  89  );
10:28:40  90  
10:28:40  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
10:28:40  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:28:40  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
10:28:40  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:28:40  95  );
10:28:40  96  END PROCS_GROUP_ACCOUNT_CRU_V24;
10:28:40  97  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.09
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_history.sql
Compiling header for procs_history.sql
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE CREATE_AASR_HISTORY(
10:28:40   4  	in_id			     IN CORE_OWNER.AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:40   5  	in_system_activity_reason_id IN NUMBER,
10:28:40   6  	in_created_by		     IN VARCHAR2
10:28:40   7  );
10:28:40   8  
10:28:40   9  PROCEDURE CREATE_ADDRESS_HISTORY(
10:28:40  10  	in_address_id		     IN NUMBER,
10:28:40  11  	in_system_activity_reason_id IN NUMBER
10:28:40  12  );
10:28:40  13  
10:28:40  14  PROCEDURE CREATE_ACCOUNT_HISTORY(
10:28:40  15  	in_account_id		     IN NUMBER,
10:28:40  16  	in_system_activity_reason_id IN NUMBER
10:28:40  17  );
10:28:40  18  
10:28:40  19  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
10:28:40  20  	in_subscription_id	     IN NUMBER,
10:28:40  21  	in_system_activity_reason_id IN NUMBER
10:28:40  22  );
10:28:40  23  
10:28:40  24  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
10:28:40  25  	in_credit_card_id	      IN NUMBER,
10:28:40  26  	in_system_activity_reason_id  IN  NUMBER
10:28:40  27  );
10:28:40  28  
10:28:40  29  PROCEDURE CREATE_PAYPAL_HISTORY(
10:28:40  30  	in_paypal_id		      IN NUMBER,
10:28:40  31  	in_system_activity_reason_id  IN NUMBER
10:28:40  32  );
10:28:40  33  
10:28:40  34  PROCEDURE CREATE_GIFT_CERT_HISTORY(
10:28:40  35  	in_gift_certificate_id	      IN NUMBER,
10:28:40  36  	in_system_activity_reason_id  IN  NUMBER
10:28:40  37  );
10:28:40  38  
10:28:40  39  PROCEDURE CREATE_TRANSACTION_HISTORY (
10:28:40  40  	in_transaction_id	     IN NUMBER,
10:28:40  41  	in_system_activity_reason_id IN NUMBER
10:28:40  42  );
10:28:40  43  
10:28:40  44  PROCEDURE CREATE_INVOICE_HISTORY (
10:28:40  45  	in_invoice_id		     IN NUMBER,
10:28:40  46  	in_system_activity_reason_id IN NUMBER
10:28:40  47  );
10:28:40  48  
10:28:40  49  PROCEDURE CREATE_LICENSE_HISTORY (
10:28:40  50  	in_license_id		     IN NUMBER,
10:28:40  51  	in_system_activity_reason_id IN NUMBER
10:28:40  52  );
10:28:40  53  
10:28:40  54  PROCEDURE CREATE_CHARGE_HISTORY (
10:28:40  55  	in_charge_id		    IN NUMBER,
10:28:40  56  	in_system_activity_reason_id IN NUMBER
10:28:40  57  );
10:28:40  58  
10:28:40  59  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
10:28:40  60  	in_invoice_adjustment_id     IN NUMBER,
10:28:40  61  	in_system_activity_reason_id IN NUMBER
10:28:40  62  );
10:28:40  63  
10:28:40  64  
10:28:40  65  END PROCS_HISTORY_V24;
10:28:40  66  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_invoice.sql
Compiling header for procs_invoice.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_INVOICE
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE GET_INVOICE_IDS(
10:28:40   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
10:28:40   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
10:28:40   6  	out_result_set OUT SYS_REFCURSOR
10:28:40   7  );
10:28:40   8  
10:28:40   9  PROCEDURE IS_INVOICE_FOR_GC (
10:28:40  10  	in_invoice_id  IN NUMBER,
10:28:40  11  	out_result     OUT NUMBER
10:28:40  12  );
10:28:40  13  
10:28:40  14  PROCEDURE CREATE_INVOICE(
10:28:40  15  /*
10:28:40  16  Throws exceptions:
10:28:40  17  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  18  */
10:28:40  19  	  in_invoice_status IN NUMBER,
10:28:40  20  	  in_created_by     IN VARCHAR2,
10:28:40  21  	  in_tax_exempt_id  IN VARCHAR2,
10:28:40  22  	  out_invoice_id    OUT NUMBER
10:28:40  23  );
10:28:40  24  
10:28:40  25  PROCEDURE GET_PENDING_INVOICES (
10:28:40  26  /*
10:28:40  27  Throws exceptions:
10:28:40  28  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  29  */
10:28:40  30  	out_result_set	     OUT SYS_REFCURSOR,
10:28:40  31  	in_row_number	     IN NUMBER DEFAULT NULL
10:28:40  32  );
10:28:40  33  
10:28:40  34  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:28:40  35  /*
10:28:40  36  Throws exceptions:
10:28:40  37  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  38  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  39  */
10:28:40  40  	in_invoice_id IN  NUMBER,
10:28:40  41  	out_amount    OUT NUMBER
10:28:40  42  );
10:28:40  43  
10:28:40  44  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
10:28:40  45  	in_invoice_id IN  NUMBER
10:28:40  46  ) RETURN NUMBER;
10:28:40  47  
10:28:40  48  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
10:28:40  49  /*
10:28:40  50  Throws exceptions:
10:28:40  51  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  52  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  53  */
10:28:40  54  	in_invoice_id  IN  NUMBER,
10:28:40  55  	out_account_id OUT NUMBER
10:28:40  56  );
10:28:40  57  
10:28:40  58  PROCEDURE GET_INVOICE_DETAILS (
10:28:40  59  /*
10:28:40  60  Throws exceptions:
10:28:40  61  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  62  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  63  */
10:28:40  64  	in_invoice_id	   IN  NUMBER,
10:28:40  65  	out_group_id	   OUT NUMBER,
10:28:40  66  	out_status_id	   OUT NUMBER,
10:28:40  67  	out_line_items_set OUT SYS_REFCURSOR,
10:28:40  68  	out_pp_charges_set OUT SYS_REFCURSOR,
10:28:40  69  	out_cc_charges_set OUT SYS_REFCURSOR,
10:28:40  70  	out_gc_charges_set OUT SYS_REFCURSOR
10:28:40  71  );
10:28:40  72  -- norlov: #38796
10:28:40  73  PROCEDURE GET_TRANSACTION_INVOICE (
10:28:40  74  /*
10:28:40  75  Throws exceptions:
10:28:40  76  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  77  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  78  */
10:28:40  79  	in_transaction_id  IN  NUMBER,
10:28:40  80  	out_result_set	      OUT SYS_REFCURSOR
10:28:40  81  );
10:28:40  82  
10:28:40  83  PROCEDURE UPDATE_INVOICE_STATUS (
10:28:40  84  /*
10:28:40  85  Throws exceptions:
10:28:40  86  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  87  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  88  */
10:28:40  89  	in_invoice_id		       IN NUMBER,
10:28:40  90  	in_invoice_status_id	       IN NUMBER,
10:28:40  91  	in_updated_by		       IN VARCHAR2
10:28:40  92  );
10:28:40  93  
10:28:40  94  FUNCTION IS_INVOICE_PAYING_STARTED (
10:28:40  95  /*
10:28:40  96  Throws exceptions:
10:28:40  97  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  98  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  99  */
10:28:40 100  	in_invoice_id IN NUMBER
10:28:40 101  ) RETURN NUMBER;
10:28:40 102  
10:28:40 103  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
10:28:40 104  	in_invoice_id  IN NUMBER,
10:28:40 105  	out_is_started OUT NUMBER
10:28:40 106  );
10:28:40 107  
10:28:40 108  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
10:28:40 109  	in_invoice_id	      IN NUMBER,
10:28:40 110  	in_chargeback_date    IN DATE,
10:28:40 111  	out_chargeback_amount OUT NUMBER
10:28:40 112  );
10:28:40 113  
10:28:40 114  PROCEDURE APPLY_REFUND (
10:28:40 115  	in_invoice_id	     IN NUMBER,
10:28:40 116  	in_chargeback_amount IN NUMBER,
10:28:40 117  	in_created_by	     IN VARCHAR2,
10:28:40 118  	out_charge_id	     OUT NUMBER
10:28:40 119  );
10:28:40 120  
10:28:40 121  PROCEDURE GET_MAX_REFUND (
10:28:40 122  	in_invoice_id IN NUMBER,
10:28:40 123  	out_amount    OUT NUMBER
10:28:40 124  );
10:28:40 125  
10:28:40 126  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
10:28:40 127  	in_invoice_id	    IN NUMBER,
10:28:40 128  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
10:28:40 129  	out_days_num	    OUT NUMBER
10:28:40 130  );
10:28:40 131  
10:28:40 132  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:28:40 133  	in_invoice_id  IN NUMBER,
10:28:40 134  	out_result_set OUT SYS_REFCURSOR
10:28:40 135  );
10:28:40 136  
10:28:40 137  PROCEDURE GET_INVOICE_LICENSES (
10:28:40 138  	in_invoice_id  IN NUMBER,
10:28:40 139  	out_result_set OUT SYS_REFCURSOR
10:28:40 140  );
10:28:40 141  
10:28:40 142  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
10:28:40 143  	in_invoice_id	   IN NUMBER,
10:28:40 144  	out_offer_chain_id OUT NUMBER
10:28:40 145  );
10:28:40 146  
10:28:40 147  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
10:28:40 148  -- Closing invoice without refund
10:28:40 149  	in_invoice_id IN NUMBER,
10:28:40 150  	in_updated_by IN VARCHAR2
10:28:40 151  );
10:28:40 152  
10:28:40 153  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
10:28:40 154  	in_invoice_id	    IN NUMBER,
10:28:40 155  	out_subscription_id OUT NUMBER
10:28:40 156  );
10:28:40 157  
10:28:40 158  PROCEDURE IS_INVOICE_TAX_EXEMPT (
10:28:40 159  /*
10:28:40 160  Throws exceptions:
10:28:40 161  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:40 162  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40 163  Return:
10:28:40 164  	GLOBAL_CONSTANTS_V24.TRUE if ACCOUNT.EXEMPT_ID is not null
10:28:40 165  	GLOBAL_CONSTANTS_V24.FALSE else
10:28:40 166  */
10:28:40 167  	in_invoice_id	  IN NUMBER,
10:28:40 168  	out_is_tax_exempt OUT NUMBER
10:28:40 169  );
10:28:40 170  
10:28:40 171  PROCEDURE GET_INVOICE_BY_ID (
10:28:40 172  	in_invoice_id  IN NUMBER,
10:28:40 173  	out_result_set OUT SYS_REFCURSOR
10:28:40 174  );
10:28:40 175  
10:28:40 176  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
10:28:40 177  	in_invoice_id		      IN NUMBER,
10:28:40 178  	out_is_tax_calculation_needed OUT NUMBER
10:28:40 179  );
10:28:40 180  
10:28:40 181  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
10:28:40 182  	in_invoice_id		     IN NUMBER,
10:28:40 183  	in_updated_by		     IN VARCHAR2,
10:28:40 184  	in_is_tax_calculation_needed IN NUMBER
10:28:40 185  );
10:28:40 186  
10:28:40 187  PROCEDURE REFUND_INVOICE (
10:28:40 188  	in_invoice_id	   IN NUMBER,
10:28:40 189  	in_refund_amount   IN NUMBER,
10:28:40 190  	in_note 	   IN VARCHAR2,
10:28:40 191  	in_created_by	   IN VARCHAR2,
10:28:40 192  	out_charge_id	   OUT NUMBER
10:28:40 193  );
10:28:40 194  
10:28:40 195  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
10:28:40 196  	in_invoice_id		    IN NUMBER,
10:28:40 197  	out_order_id		    OUT VARCHAR2,
10:28:40 198  	out_external_transaction_id OUT VARCHAR2
10:28:40 199  );
10:28:40 200  
10:28:40 201  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
10:28:40 202  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
10:28:40 203  	out_result_set OUT SYS_REFCURSOR
10:28:40 204  );
10:28:40 205  
10:28:40 206  PROCEDURE IS_REVOKE_ENTITLEMENTS(
10:28:40 207  	in_invoice_id IN NUMBER,
10:28:40 208  	out_is_revoke OUT NUMBER
10:28:40 209  );
10:28:40 210  
10:28:40 211  END PROCS_INVOICE_V24;
10:28:40 212  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.08
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_invoice_cru.sql
Compiling header for procs_invoice_cru.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_INVOICE_CRU
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE CREATE_INVOICE (
10:28:40   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
10:28:40   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
10:28:40   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
10:28:40   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
10:28:40   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
10:28:40   9  );
10:28:40  10  
10:28:40  11  PROCEDURE UPDATE_INVOICE (
10:28:40  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
10:28:40  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
10:28:40  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
10:28:40  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
10:28:40  16  );
10:28:40  17  
10:28:40  18  END PROCS_INVOICE_CRU_V24;
10:28:40  19  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_itunes_receipt.sql
Compiling header for procs_itunes_receipt.sql
10:28:40 SQL> /*
10:28:40 SQL> CREATE TABLE ITUNES_RECEIPT (
10:28:40 SQL> 	id NUMBER NOT NULL ENABLE,
10:28:40 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
10:28:40 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
10:28:40 SQL> 	status NUMBER,
10:28:40 SQL> 	quantity NUMBER,
10:28:40 SQL> 	product_id VARCHAR(1024),
10:28:40 SQL> 	transaction_id VARCHAR(1024),
10:28:40 SQL> 	purchase_date TIMESTAMP,
10:28:40 SQL> 	original_transaction_id VARCHAR(1024),
10:28:40 SQL> 	original_purchase_date TIMESTAMP,
10:28:40 SQL> 	app_item_id VARCHAR(1024),
10:28:40 SQL> 	version_external_id NUMBER,
10:28:40 SQL> 	bid VARCHAR(1024),
10:28:40 SQL> 	bvrs VARCHAR(255),
10:28:40 SQL> 	expires_date TIMESTAMP,
10:28:40 SQL> 	create_date DATE NOT NULL,
10:28:40 SQL> 	created_by VARCHAR(255) NOT NULL,
10:28:40 SQL> 	update_date DATE NOT NULL,
10:28:40 SQL> 	updated_by VARCHAR(255) NOT NULL,
10:28:40 SQL> 	last_check_date DATE NOT NULL,
10:28:40 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:28:40 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:28:40 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:28:40 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
10:28:40 SQL> )
10:28:40 SQL> TABLESPACE CORE;
10:28:40 SQL> */
10:28:40 SQL> 
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
10:28:40   4  	      /*
10:28:40   5  	      Throws exceptions:
10:28:40   6  	      APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40   7  	      */
10:28:40   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:40   9  	      out_result_set	  OUT SYS_REFCURSOR
10:28:40  10  );
10:28:40  11  
10:28:40  12  PROCEDURE CREATE_RECEIPT(
10:28:40  13  /*
10:28:40  14  Throws exceptions:
10:28:40  15  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  16  */
10:28:40  17  	  out_id	      OUT NUMBER,
10:28:40  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:40  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
10:28:40  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
10:28:40  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
10:28:40  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:40  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:28:40  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:28:40  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:40  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:28:40  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:28:40  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:28:40  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
10:28:40  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
10:28:40  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:28:40  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
10:28:40  33  );
10:28:40  34  
10:28:40  35  PROCEDURE UPDATE_RECEIPT(
10:28:40  36  /*
10:28:40  37  Throws exceptions:
10:28:40  38  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  39  */
10:28:40  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
10:28:40  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
10:28:40  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
10:28:40  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
10:28:40  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:40  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:28:40  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:28:40  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:40  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:28:40  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:28:40  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:28:40  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
10:28:40  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
10:28:40  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:28:40  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
10:28:40  55  	  in_is_expired       IN NUMBER
10:28:40  56  );
10:28:40  57  
10:28:40  58  PROCEDURE LINK_ITUNES_RECEIPT(
10:28:40  59  /*
10:28:40  60  Throws exceptions:
10:28:40  61  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  62  */
10:28:40  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
10:28:40  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:40  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
10:28:40  66  );
10:28:40  67  
10:28:40  68  PROCEDURE MARK_RECEIPT_CHECKED(
10:28:40  69  /*
10:28:40  70  Throws exceptions:
10:28:40  71  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  72  */
10:28:40  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
10:28:40  74  );
10:28:40  75  
10:28:40  76  PROCEDURE GET_ITUNES_RECEIPTS (
10:28:40  77  /*
10:28:40  78  Throws exceptions:
10:28:40  79  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  80  */
10:28:40  81  	out_result_set	    OUT SYS_REFCURSOR,
10:28:40  82  	in_row_number	    IN NUMBER DEFAULT 500
10:28:40  83  );
10:28:40  84  
10:28:40  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
10:28:40  86  /*
10:28:40  87  Throws exceptions:
10:28:40  88  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  89  */
10:28:40  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
10:28:40  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
10:28:40  92  );
10:28:40  93  
10:28:40  94  END PROCS_ITUNES_RECEIPT_V24;
10:28:40  95  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.08
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_itunes_receipt_cru.sql
Compiling header for procs_itunes_receipt_cru.sql
10:28:40 SQL> /*
10:28:40 SQL> CREATE TABLE ITUNES_RECEIPT (
10:28:40 SQL> 	id NUMBER NOT NULL ENABLE,
10:28:40 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
10:28:40 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
10:28:40 SQL> 	status NUMBER,
10:28:40 SQL> 	quantity NUMBER,
10:28:40 SQL> 	product_id VARCHAR(1024),
10:28:40 SQL> 	transaction_id VARCHAR(1024),
10:28:40 SQL> 	purchase_date TIMESTAMP,
10:28:40 SQL> 	original_transaction_id VARCHAR(1024),
10:28:40 SQL> 	original_purchase_date TIMESTAMP,
10:28:40 SQL> 	app_item_id VARCHAR(1024),
10:28:40 SQL> 	version_external_id NUMBER,
10:28:40 SQL> 	bid VARCHAR(1024),
10:28:40 SQL> 	bvrs VARCHAR(255),
10:28:40 SQL> 	expires_date TIMESTAMP,
10:28:40 SQL> 	create_date DATE NOT NULL,
10:28:40 SQL> 	created_by VARCHAR(255) NOT NULL,
10:28:40 SQL> 	update_date DATE NOT NULL,
10:28:40 SQL> 	updated_by VARCHAR(255) NOT NULL,
10:28:40 SQL> 	last_check_date DATE NOT NULL,
10:28:40 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:28:40 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:28:40 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:28:40 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
10:28:40 SQL> )
10:28:40 SQL> TABLESPACE CORE;
10:28:40 SQL> */
10:28:40 SQL> 
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE CREATE_RECEIPT(
10:28:40   4  /*
10:28:40   5  Throws exceptions:
10:28:40   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40   7  */
10:28:40   8  	  out_id	      OUT NUMBER,
10:28:40   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:40  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
10:28:40  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
10:28:40  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
10:28:40  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:40  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:28:40  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:28:40  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:40  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:28:40  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:28:40  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:28:40  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
10:28:40  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
10:28:40  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:28:40  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
10:28:40  24  );
10:28:40  25  
10:28:40  26  PROCEDURE UPDATE_RECEIPT(
10:28:40  27  /*
10:28:40  28  Throws exceptions:
10:28:40  29  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  30  */
10:28:40  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
10:28:40  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
10:28:40  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
10:28:40  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
10:28:40  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:40  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:28:40  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:28:40  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:40  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:28:40  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:28:40  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:28:40  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
10:28:40  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
10:28:40  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:28:40  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
10:28:40  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
10:28:40  47  );
10:28:40  48  
10:28:40  49  PROCEDURE LINK_ITUNES_RECEIPT(
10:28:40  50  /*
10:28:40  51  Throws exceptions:
10:28:40  52  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  53  */
10:28:40  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
10:28:40  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:40  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
10:28:40  57  );
10:28:40  58  
10:28:40  59  PROCEDURE MARK_RECEIPT_CHECKED(
10:28:40  60  /*
10:28:40  61  Throws exceptions:
10:28:40  62  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  63  */
10:28:40  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
10:28:40  65  );
10:28:40  66  
10:28:40  67  END PROCS_ITUNES_RECEIPT_CRU_V24;
10:28:40  68  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.05
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_license.sql
Compiling header for procs_license.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_LICENSE
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE CREATE_LICENSE(
10:28:40   4  	in_status_id		    IN NUMBER,
10:28:40   5  	in_needs_entitlements	    IN NUMBER,
10:28:40   6  	in_start_date		    IN DATE,
10:28:40   7  	in_end_date		    IN DATE,
10:28:40   8  	in_offer_id		    IN NUMBER,
10:28:40   9  	in_subscription_id	    IN NUMBER,
10:28:40  10  	in_invoice_id		    IN NUMBER,
10:28:40  11  	in_created_by		    IN VARCHAR2,
10:28:40  12  	in_is_extension 	    IN NUMBER,
10:28:40  13  	in_current_offer_index	    IN NUMBER,
10:28:40  14  	in_current_offer_recurr_num IN NUMBER,
10:28:40  15  	out_license_id		    OUT NUMBER
10:28:40  16  );
10:28:40  17  
10:28:40  18  PROCEDURE UPDATE_LICENSE_STATUS(
10:28:40  19  	  in_license_id     IN NUMBER,
10:28:40  20  	  in_license_status IN NUMBER,
10:28:40  21  	  in_updated_by     IN VARCHAR2,
10:28:40  22  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE
10:28:40  23  );
10:28:40  24  
10:28:40  25  PROCEDURE GET_ENDING_LICENSES (
10:28:40  26  	in_hours_number IN NUMBER,
10:28:40  27  	out_result_set OUT SYS_REFCURSOR
10:28:40  28  );
10:28:40  29  
10:28:40  30  PROCEDURE GET_ENDING_LICENSES_CC (
10:28:40  31  	in_hours_number IN NUMBER,
10:28:40  32  	out_result_set OUT SYS_REFCURSOR,
10:28:40  33  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:40  34  );
10:28:40  35  
10:28:40  36  PROCEDURE GET_RECURRING_OFFER (
10:28:40  37  	in_license_id  IN NUMBER,
10:28:40  38  	out_result_set OUT SYS_REFCURSOR
10:28:40  39  );
10:28:40  40  
10:28:40  41  PROCEDURE GET_NEXT_OFFER (
10:28:40  42  	in_license_id  IN NUMBER,
10:28:40  43  	out_result_set OUT SYS_REFCURSOR
10:28:40  44  );
10:28:40  45  
10:28:40  46  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
10:28:40  47  	in_license_id IN NUMBER,
10:28:40  48  	out_group_id  OUT NUMBER
10:28:40  49  );
10:28:40  50  
10:28:40  51  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
10:28:40  52  	out_result_set OUT SYS_REFCURSOR
10:28:40  53  );
10:28:40  54  
10:28:40  55  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
10:28:40  56  	in_license_id	      IN NUMBER,
10:28:40  57  	in_needs_entitlements IN NUMBER,
10:28:40  58  	in_updated_by	      IN VARCHAR2
10:28:40  59  );
10:28:40  60  
10:28:40  61  PROCEDURE GET_LICENSE_BY_ID (
10:28:40  62  	in_license_id  IN NUMBER,
10:28:40  63  	out_result_set OUT SYS_REFCURSOR
10:28:40  64  );
10:28:40  65  
10:28:40  66  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
10:28:40  67  	in_subscription_id IN NUMBER,
10:28:40  68  	in_end_date IN DATE,
10:28:40  69  	in_updated_by IN VARCHAR2
10:28:40  70  );
10:28:40  71  
10:28:40  72  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
10:28:40  73  	in_days_before_close	 IN NUMBER,
10:28:40  74  	in_num_licenses_to_fetch IN NUMBER,
10:28:40  75  	out_result_set		 OUT SYS_REFCURSOR
10:28:40  76  );
10:28:40  77  
10:28:40  78  END PROCS_LICENSE_V24;
10:28:40  79  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_license_cru.sql
Compiling header for procs_license_cru.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_LICENSE_CRU
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE CREATE_LICENSE(
10:28:40   4  	out_license_id		    OUT LICENSE.ID%TYPE,
10:28:40   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
10:28:40   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
10:28:40   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
10:28:40   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
10:28:40   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
10:28:40  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
10:28:40  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
10:28:40  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
10:28:40  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
10:28:40  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
10:28:40  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
10:28:40  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
10:28:40  17  );
10:28:40  18  
10:28:40  19  PROCEDURE UPDATE_LICENSE (
10:28:40  20  	in_license_id		    IN LICENSE.ID%TYPE,
10:28:40  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
10:28:40  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
10:28:40  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
10:28:40  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
10:28:40  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
10:28:40  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
10:28:40  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
10:28:40  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
10:28:40  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
10:28:40  30  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
10:28:40  31  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
10:28:40  32  );
10:28:40  33  
10:28:40  34  END PROCS_LICENSE_CRU_V24;
10:28:40  35  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.07
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_line_items.sql
Compiling header for procs_line_items.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_LINE_ITEMS
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE ADD_LINE_ITEMS(
10:28:40   4  /*
10:28:40   5  Throws exceptions:
10:28:40   6  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40   7  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40   8  */
10:28:40   9  	in_invoice_id IN NUMBER,
10:28:40  10  	in_offer_id   IN NUMBER,
10:28:40  11  	in_created_by IN VARCHAR2
10:28:40  12  );
10:28:40  13  
10:28:40  14  /****************************************************/
10:28:40  15  
10:28:40  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
10:28:40  17  	in_line_item_id    IN NUMBER,
10:28:40  18  	in_amount	   IN NUMBER,
10:28:40  19  	in_discount_amount IN NUMBER,
10:28:40  20  	in_taxes_amount    IN NUMBER
10:28:40  21  );
10:28:40  22  
10:28:40  23  /****************************************************/
10:28:40  24  
10:28:40  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:28:40  26  /*
10:28:40  27  Throws exceptions:
10:28:40  28  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  29  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  30  */
10:28:40  31  	in_invoice_id  IN NUMBER,
10:28:40  32  	out_result_set OUT SYS_REFCURSOR
10:28:40  33  );
10:28:40  34  
10:28:40  35  /****************************************************/
10:28:40  36  
10:28:40  37  PROCEDURE GET_LINE_ITEM_TAXES (
10:28:40  38  /*
10:28:40  39  Throws exceptions:
10:28:40  40  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  41  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  42  */
10:28:40  43  	in_line_item_id IN  NUMBER,
10:28:40  44  	out_result_set	OUT SYS_REFCURSOR
10:28:40  45  );
10:28:40  46  /****************************************************/
10:28:40  47  
10:28:40  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
10:28:40  49  /*
10:28:40  50  Throws exceptions:
10:28:40  51  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  52  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  53  */
10:28:40  54  	in_line_item_id IN  NUMBER,
10:28:40  55  	out_result_set	OUT SYS_REFCURSOR
10:28:40  56  );
10:28:40  57  
10:28:40  58  /****************************************************/
10:28:40  59  
10:28:40  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
10:28:40  61  /*
10:28:40  62  Throws exceptions:
10:28:40  63  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  64  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  65  */
10:28:40  66  	in_line_item_id     IN	NUMBER,
10:28:40  67  	out_amount	    OUT NUMBER
10:28:40  68  );
10:28:40  69  
10:28:40  70  /****************************************************/
10:28:40  71  
10:28:40  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
10:28:40  73  /*
10:28:40  74  Throws exceptions:
10:28:40  75  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:40  76  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40  77  */
10:28:40  78  	in_line_item_id     IN	NUMBER
10:28:40  79  ) RETURN NUMBER;
10:28:40  80  
10:28:40  81  END PROCS_LINE_ITEMS_V24;
10:28:40  82  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.02
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_line_items_cru.sql
Compiling header for procs_line_items_cru.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE CREATE_LINE_ITEM (
10:28:40   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
10:28:40   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
10:28:40   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
10:28:40   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
10:28:40   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
10:28:40   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
10:28:40  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
10:28:40  11  );
10:28:40  12  
10:28:40  13  PROCEDURE UPDATE_LINE_ITEM (
10:28:40  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
10:28:40  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
10:28:40  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
10:28:40  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
10:28:40  18  );
10:28:40  19  
10:28:40  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
10:28:40  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
10:28:40  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
10:28:40  23  );
10:28:40  24  
10:28:40  25  END PROCS_LINE_ITEMS_CRU_V24;
10:28:40  26  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_locking.sql
Compiling header for procs_locking.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_LOCKING
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V24" AS
10:28:40   2  
10:28:40   3  /*
10:28:40   4  Removed by Sergey
10:28:40   5  10.12.2010
10:28:40   6  PROCEDURE INITIALIZE_SYSTEM;
10:28:40   7  
10:28:40   8  PROCEDURE INITIALIZE_ACCOUNT (
10:28:40   9  	in_account_id IN NUMBER
10:28:40  10  );
10:28:40  11  
10:28:40  12  PROCEDURE INITIALIZE_GROUP (
10:28:40  13  	in_group_id IN NUMBER
10:28:40  14  );
10:28:40  15  */
10:28:40  16  
10:28:40  17  PROCEDURE LOCK_ACCOUNT (
10:28:40  18  	in_group_id    IN NUMBER,
10:28:40  19  	in_lock_key    IN VARCHAR2,
10:28:40  20  	in_seconds_num IN NUMBER,
10:28:40  21  	in_created_by  IN VARCHAR2,
10:28:40  22  	in_reason      IN VARCHAR2
10:28:40  23  );
10:28:40  24  
10:28:40  25  PROCEDURE RELEASE_LOCK (
10:28:40  26  	in_group_id IN NUMBER,
10:28:40  27  	in_lock_key IN VARCHAR2
10:28:40  28  );
10:28:40  29  
10:28:40  30  END PROCS_LOCKING_V24;
10:28:40  31  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.04
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_notification.sql
Compiling header for procs_notification.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_NOTIFICATION
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_NOTIFICATION_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
10:28:40   4  	in_notification_type_name IN VARCHAR2,
10:28:40   5  	out_notification_type_id  OUT NUMBER
10:28:40   6  );
10:28:40   7  
10:28:40   8  PROCEDURE ADD_NOTIFICATION (
10:28:40   9  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:28:40  10  	in_recipient_group_id	 IN NUMBER,
10:28:40  11  	in_notification_type_id  IN NUMBER,
10:28:40  12  	in_date_to_notify	 IN DATE,
10:28:40  13  	in_email_template_params IN CLOB
10:28:40  14  );
10:28:40  15  
10:28:40  16  PROCEDURE ADD_SINGLE_NOTIFICATION_ROW (
10:28:40  17  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:28:40  18  	in_recipient_group_id	 IN NUMBER,
10:28:40  19  	in_notification_type_id  IN NUMBER,
10:28:40  20  	in_date_to_notify	 IN DATE,
10:28:40  21  	in_email_template_params IN CLOB
10:28:40  22  );
10:28:40  23  
10:28:40  24  PROCEDURE GET_PENDING_NOTIFICATIONS (
10:28:40  25  	out_result_set OUT SYS_REFCURSOR
10:28:40  26  );
10:28:40  27  
10:28:40  28  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
10:28:40  29  	in_notification_id IN NUMBER
10:28:40  30  );
10:28:40  31  
10:28:40  32  PROCEDURE SET_NOTIFICATION_STATUS (
10:28:40  33  	in_notification_id	  IN NUMBER,
10:28:40  34  	in_notification_status_id IN NUMBER,
10:28:40  35  	in_error_message	  IN VARCHAR2
10:28:40  36  );
10:28:40  37  
10:28:40  38  PROCEDURE ADD_NOTIFICATION_FAILURE (
10:28:40  39  	in_notification_id IN NUMBER,
10:28:40  40  	in_error_message   IN VARCHAR2
10:28:40  41  );
10:28:40  42  
10:28:40  43  PROCEDURE LOCK_PENDING_NOTIFICATION (
10:28:40  44  /*
10:28:40  45  Result: 1 if notification locked
10:28:40  46  2 - else
10:28:40  47  */
10:28:40  48  	in_notification_id IN NUMBER,
10:28:40  49  	out_lock_status    OUT NUMBER
10:28:40  50  );
10:28:40  51  
10:28:40  52  PROCEDURE GET_NOTIFICATION_DATA (
10:28:40  53  	in_notification_id IN NUMBER,
10:28:40  54  	out_result_set	   OUT SYS_REFCURSOR
10:28:40  55  );
10:28:40  56  
10:28:40  57  END PROCS_NOTIFICATION_V24;
10:28:40  58  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_offer_chain.sql
Compiling header for procs_offer_chain.sql
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE IS_GC_OFFER_CHAIN(
10:28:40   4  	in_offer_chain_id IN OFFER_CHAIN.ID%TYPE,
10:28:40   5  	out_data OUT NUMBER
10:28:40   6  );
10:28:40   7  
10:28:40   8  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
10:28:40   9  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
10:28:40  10  	out_data	     OUT OFFER_CHAIN.ID%TYPE
10:28:40  11  );
10:28:40  12  
10:28:40  13  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
10:28:40  14  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
10:28:40  15  	out_data	       OUT OFFER_CHAIN.ID%TYPE
10:28:40  16  );
10:28:40  17  
10:28:40  18  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:28:40  19  	  in_offer_chain_id IN	 NUMBER,
10:28:40  20  	  out_result_set    OUT  SYS_REFCURSOR
10:28:40  21  );
10:28:40  22  
10:28:40  23  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
10:28:40  24  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:28:40  25  	out_result_set	   OUT SYS_REFCURSOR
10:28:40  26  );
10:28:40  27  
10:28:40  28  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
10:28:40  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:28:40  30  	out_result_set	   OUT SYS_REFCURSOR
10:28:40  31  );
10:28:40  32  
10:28:40  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
10:28:40  34  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:28:40  35  	out_result_set	   OUT SYS_REFCURSOR
10:28:40  36  );
10:28:40  37  
10:28:40  38  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
10:28:40  39  	in_product_id  IN  NUMBER,
10:28:40  40  	out_result_set OUT SYS_REFCURSOR
10:28:40  41  );
10:28:40  42  
10:28:40  43  PROCEDURE GET_OFFER_CHAIN_PRICE (
10:28:40  44  	in_offer_chain_id IN NUMBER,
10:28:40  45  	out_price	  OUT NUMBER
10:28:40  46  );
10:28:40  47  
10:28:40  48  PROCEDURE GET_FIRST_OFFER(
10:28:40  49  	in_offer_chain_id IN  NUMBER,
10:28:40  50  	out_offer_id	  OUT NUMBER
10:28:40  51  );
10:28:40  52  
10:28:40  53  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
10:28:40  54  	out_result_set OUT SYS_REFCURSOR
10:28:40  55  );
10:28:40  56  
10:28:40  57  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
10:28:40  58  	in_offer_chain_id IN NUMBER,
10:28:40  59  	out_result_set	  OUT SYS_REFCURSOR
10:28:40  60  );
10:28:40  61  
10:28:40  62  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
10:28:40  63  	in_offer_chain_id	  IN NUMBER,
10:28:40  64  	in_offer_chain_start_date IN DATE
10:28:40  65  ) RETURN DATE;
10:28:40  66  
10:28:40  67  FUNCTION CALCULATE_OFFER_AMOUNT (
10:28:40  68  	in_offer_id IN NUMBER
10:28:40  69  ) RETURN NUMBER;
10:28:40  70  
10:28:40  71  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
10:28:40  72  	in_offer_chain_id IN NUMBER
10:28:40  73  ) RETURN NUMBER;
10:28:40  74  
10:28:40  75  FUNCTION GET_FIRST_OFFER_INDEX (
10:28:40  76  	in_offer_chain_id IN NUMBER
10:28:40  77  ) RETURN NUMBER;
10:28:40  78  
10:28:40  79  FUNCTION GET_NEXT_OFFER_INDEX (
10:28:40  80  	in_offer_chain_id	     IN NUMBER,
10:28:40  81  	in_offer_chain_current_index IN NUMBER
10:28:40  82  ) RETURN NUMBER;
10:28:40  83  
10:28:40  84  PROCEDURE P_GET_NEXT_OFFER_INDEX (
10:28:40  85  	in_offer_chain_id	     IN NUMBER,
10:28:40  86  	in_offer_chain_current_index IN NUMBER,
10:28:40  87  	out_next_offer_index	     OUT NUMBER
10:28:40  88  );
10:28:40  89  
10:28:40  90  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
10:28:40  91  	in_license_id		     IN NUMBER,
10:28:40  92  	in_offer_chain_current_index IN NUMBER,
10:28:40  93  	out_next_offer_index	     OUT NUMBER
10:28:40  94  );
10:28:40  95  
10:28:40  96  FUNCTION IS_OFFER_INDEX_EXISTS (
10:28:40  97  	in_offer_chain_id	   IN NUMBER,
10:28:40  98  	in_offer_chain_offer_index IN NUMBER
10:28:40  99  ) RETURN NUMBER;
10:28:40 100  
10:28:40 101  PROCEDURE GET_OFFER_LENGTH (
10:28:40 102  	in_offer_id IN NUMBER,
10:28:40 103  	out_years   OUT NUMBER,
10:28:40 104  	out_months  OUT NUMBER,
10:28:40 105  	out_days    OUT NUMBER
10:28:40 106  );
10:28:40 107  
10:28:40 108  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
10:28:40 109  	in_offer_id   IN NUMBER,
10:28:40 110  	in_start_date IN DATE DEFAULT SYSDATE,
10:28:40 111  	out_days      OUT NUMBER
10:28:40 112  );
10:28:40 113  
10:28:40 114  PROCEDURE GET_OFFER_PRODUCTS (
10:28:40 115  	in_offer_id    IN NUMBER,
10:28:40 116  	out_result_set OUT SYS_REFCURSOR
10:28:40 117  );
10:28:40 118  
10:28:40 119  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
10:28:40 120  	in_offer_chain_id IN NUMBER,
10:28:40 121  	out_result_set	  OUT SYS_REFCURSOR
10:28:40 122  );
10:28:40 123  
10:28:40 124  FUNCTION CHECK_FOR_SAME_PRODUCTS (
10:28:40 125  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
10:28:40 126  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
10:28:40 127  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE
10:28:40 128  ) RETURN NUMBER;
10:28:40 129  
10:28:40 130  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
10:28:40 131  	in_offer_chain_id IN NUMBER
10:28:40 132  ) RETURN NUMBER;
10:28:40 133  
10:28:40 134  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
10:28:40 135  	in_offer_chain_id IN NUMBER
10:28:40 136  ) RETURN NUMBER;
10:28:40 137  
10:28:40 138  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
10:28:40 139  	in_offer_chain_id   IN NUMBER,
10:28:40 140  	in_eligibility_name IN VARCHAR2,
10:28:40 141  	out_result_set	    OUT SYS_REFCURSOR
10:28:40 142  );
10:28:40 143  
10:28:40 144  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
10:28:40 145  	in_offer_chain_ids  IN VARCHAR2,
10:28:40 146  	in_eligibility_name IN VARCHAR2,
10:28:40 147  	out_result_set	    OUT SYS_REFCURSOR
10:28:40 148  );
10:28:40 149  
10:28:40 150  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:28:40 151  	in_offer_chain_id IN NUMBER,
10:28:40 152  	in_meta_data_name IN VARCHAR2,
10:28:40 153  	out_result_set	  OUT SYS_REFCURSOR
10:28:40 154  );
10:28:40 155  
10:28:40 156  PROCEDURE GET_OFFER_CHAINS_META_DATA (
10:28:40 157  	in_offer_chain_ids IN VARCHAR2,
10:28:40 158  	in_meta_data_name  IN VARCHAR2,
10:28:40 159  	out_result_set	   OUT SYS_REFCURSOR
10:28:40 160  );
10:28:40 161  
10:28:40 162  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
10:28:40 163  	in_offer_id    IN NUMBER,
10:28:40 164  	out_result_set OUT SYS_REFCURSOR
10:28:40 165  );
10:28:40 166  
10:28:40 167  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
10:28:40 168  	in_offer_chain_1 IN NUMBER,
10:28:40 169  	in_offer_chain_2 IN NUMBER,
10:28:40 170  	out_result_set	OUT SYS_REFCURSOR
10:28:40 171  );
10:28:40 172  
10:28:40 173  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
10:28:40 174  	in_offer_chain_id IN NUMBER,
10:28:40 175  	in_meta_data_name IN VARCHAR2,
10:28:40 176  	out_value	  OUT VARCHAR2
10:28:40 177  );
10:28:40 178  
10:28:40 179  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
10:28:40 180  	in_offer_chain_id   IN NUMBER,
10:28:40 181  	in_eligibility_name IN VARCHAR2,
10:28:40 182  	out_value	    OUT VARCHAR2
10:28:40 183  );
10:28:40 184  
10:28:40 185  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
10:28:40 186  	in_offer_id    IN NUMBER,
10:28:40 187  	out_result_set OUT SYS_REFCURSOR
10:28:40 188  );
10:28:40 189  
10:28:40 190  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
10:28:40 191  	in_meta_data_name  IN VARCHAR2,
10:28:40 192  	in_meta_data_value IN VARCHAR2,
10:28:40 193  	out_result_set	   OUT SYS_REFCURSOR
10:28:40 194  );
10:28:40 195  
10:28:40 196  PROCEDURE GET_ALL_META_DATA (
10:28:40 197  	in_offer_chain_id IN NUMBER,
10:28:40 198  	out_result_set	  OUT SYS_REFCURSOR
10:28:40 199  );
10:28:40 200  
10:28:40 201  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
10:28:40 202  	in_group_id	  IN NUMBER,
10:28:40 203  	in_offer_chain_id IN NUMBER,
10:28:40 204  	out_is_eligible   OUT NUMBER,
10:28:40 205  	out_concurrent_subscription_id OUT NUMBER
10:28:40 206  );
10:28:40 207  
10:28:40 208  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:28:40 209  	in_offer_chain_id	 IN NUMBER,
10:28:40 210  	in_action_name		 IN VARCHAR2,
10:28:40 211  	out_notification_type_id OUT NUMBER
10:28:40 212  );
10:28:40 213  
10:28:40 214  END PROCS_OFFER_CHAIN_V24;
10:28:40 215  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.08
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_polling_sync.sql
Compiling header for procs_polling_sync.sql
10:28:40 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
10:28:40   2  AS
10:28:40   3  
10:28:40   4  ----
10:28:40   5  --------------------------------------------------------------------------------
10:28:40   6  ----
10:28:40   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
10:28:40   8  	      returned from the previous call and store the result for the
10:28:40   9  	      next call.
10:28:40  10  	     This method will identify and create new Sync Events from trigger activity data */
10:28:40  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
10:28:40  12  ----
10:28:40  13  --------------------------------------------------------------------------------
10:28:40  14  ----
10:28:40  15  	  /* Internal logic call may need to be used to fix poller data */
10:28:40  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
10:28:40  17  ----
10:28:40  18  --------------------------------------------------------------------------------
10:28:40  19  ----
10:28:40  20  	  /* User request for sync events. Params should be hard-coded in the application
10:28:40  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
10:28:40  22  	      skipped. Last read time is logged.
10:28:40  23  	     Params:
10:28:40  24  		  set_maximum: Size of each transfer set
10:28:40  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
10:28:40  26  	     Returns:
10:28:40  27  		  set_id: Transfer set id, duplicated for all entries
10:28:40  28  		  group_id: regi_id value
10:28:40  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
10:28:40  30  	  */
10:28:40  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
10:28:40  32  ----
10:28:40  33  --------------------------------------------------------------------------------
10:28:40  34  ----
10:28:40  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
10:28:40  36  	      single confirmation per transfer set.
10:28:40  37  	  */
10:28:40  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
10:28:40  39  ----
10:28:40  40  --------------------------------------------------------------------------------
10:28:40  41  ----
10:28:40  42  	  procedure SET_LAST_RUN(ts in timestamp);
10:28:40  43  	  procedure GET_LAST_RUN(ts out timestamp);
10:28:40  44  END PROCS_POLLING_SYNC;
10:28:40  45  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_process_retry.sql
Compiling header for procs_process_retry.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_PROCESS_RETRY_THROTTLE
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_PROCESS_RETRY_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE LOG_RETRY(
10:28:40   4  	  in_process_name IN VARCHAR2,
10:28:40   5  	  in_generic_id   IN NUMBER,
10:28:40   6  	  in_date	  IN VARCHAR2,
10:28:40   7  	  out_success	   OUT NUMBER
10:28:40   8  );
10:28:40   9  
10:28:40  10  PROCEDURE LOG_RETRY_DATE(
10:28:40  11  	  in_process_name IN VARCHAR2,
10:28:40  12  	  in_generic_id   IN NUMBER,
10:28:40  13  	  in_date	  IN DATE,
10:28:40  14  	  out_success	   OUT NUMBER
10:28:40  15  );
10:28:40  16  
10:28:40  17  PROCEDURE DELETE_RETRY(
10:28:40  18  	  in_process_name IN VARCHAR2,
10:28:40  19  	  in_remove_minutes  IN NUMBER
10:28:40  20  );
10:28:40  21  
10:28:40  22  PROCEDURE GET_SYSDATE (
10:28:40  23  	  out_date OUT VARCHAR2
10:28:40  24  );
10:28:40  25  
10:28:40  26  END PROCS_PROCESS_RETRY_V24;
10:28:40  27  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.04
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_product.sql
Compiling header for procs_product.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_PRODUCT
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE GET_PRODUCTS (
10:28:40   4  /*
10:28:40   5  Throws exceptions:
10:28:40   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:40   7  */
10:28:40   8  	in_status_id   IN  NUMBER,
10:28:40   9  	out_result_set OUT SYS_REFCURSOR
10:28:40  10  );
10:28:40  11  
10:28:40  12  PROCEDURE GET_PRODUCT_BY_ID (
10:28:40  13  	in_product_id  IN NUMBER,
10:28:40  14  	out_result_set OUT SYS_REFCURSOR
10:28:40  15  );
10:28:40  16  
10:28:40  17  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
10:28:40  18  	in_line_item_id IN NUMBER,
10:28:40  19  	out_result_set	OUT SYS_REFCURSOR
10:28:40  20  );
10:28:40  21  
10:28:40  22  PROCEDURE GET_PRD_OFFERING_BY_ID (
10:28:40  23  	in_product_offering_id IN NUMBER,
10:28:40  24  	out_result_set	OUT SYS_REFCURSOR
10:28:40  25  );
10:28:40  26  
10:28:40  27  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
10:28:40  28  	in_product_offering_id IN NUMBER,
10:28:40  29  	out_result_set	       OUT SYS_REFCURSOR
10:28:40  30  );
10:28:40  31  
10:28:40  32  END PROCS_PRODUCT_V24;
10:28:40  33  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:40 SQL> 
10:28:40 SQL> prompt Compiling header for procs_reconciliation_cru.sql
Compiling header for procs_reconciliation_cru.sql
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
10:28:40 SQL> --------------------------------------------------------------------------------
10:28:40 SQL> 
10:28:40 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V24" AS
10:28:40   2  
10:28:40   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
10:28:40   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
10:28:40   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
10:28:40   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:40   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
10:28:40   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
10:28:40   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
10:28:40  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
10:28:40  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
10:28:40  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:28:40  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
10:28:40  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
10:28:40  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
10:28:40  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:28:40  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
10:28:40  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
10:28:40  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
10:28:40  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
10:28:40  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
10:28:40  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
10:28:40  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
10:28:40  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
10:28:40  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
10:28:40  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
10:28:40  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
10:28:40  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
10:28:40  29  );
10:28:40  30  
10:28:40  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
10:28:40  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
10:28:40  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
10:28:40  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
10:28:40  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
10:28:40  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
10:28:40  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:28:40  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
10:28:40  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
10:28:40  40  );
10:28:40  41  
10:28:40  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
10:28:40  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
10:28:40  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
10:28:40  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:40  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
10:28:40  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
10:28:40  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
10:28:40  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
10:28:40  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
10:28:40  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
10:28:40  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
10:28:40  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
10:28:40  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
10:28:40  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
10:28:40  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
10:28:40  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
10:28:40  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
10:28:40  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
10:28:40  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
10:28:40  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
10:28:40  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
10:28:40  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
10:28:40  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
10:28:40  65  );
10:28:40  66  
10:28:40  67  PROCEDURE CREATE_CPT_EXCEPTION (
10:28:40  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
10:28:40  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
10:28:40  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:40  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
10:28:40  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
10:28:40  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
10:28:40  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
10:28:40  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
10:28:40  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
10:28:40  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
10:28:40  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
10:28:40  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:28:40  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:28:40  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
10:28:40  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
10:28:40  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
10:28:40  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
10:28:40  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
10:28:40  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
10:28:40  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
10:28:40  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
10:28:40  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
10:28:40  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
10:28:40  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
10:28:40  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
10:28:40  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
10:28:40  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
10:28:40  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
10:28:40  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
10:28:40  97  );
10:28:40  98  
10:28:40  99  PROCEDURE CREATE_CPT_DEPOSIT (
10:28:40 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
10:28:40 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
10:28:40 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:40 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
10:28:40 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
10:28:40 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
10:28:40 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
10:28:40 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
10:28:40 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
10:28:40 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
10:28:40 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
10:28:40 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:28:40 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:28:40 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
10:28:40 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
10:28:40 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
10:28:40 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
10:28:40 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
10:28:40 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
10:28:40 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
10:28:40 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
10:28:40 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
10:28:40 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
10:28:40 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
10:28:40 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
10:28:40 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
10:28:40 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
10:28:40 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
10:28:40 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
10:28:40 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
10:28:40 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
10:28:40 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
10:28:40 132  );
10:28:40 133  
10:28:40 134  PROCEDURE CREATE_PP_SETTLEMENT (
10:28:40 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
10:28:40 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
10:28:40 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:40 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
10:28:40 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
10:28:40 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
10:28:40 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
10:28:40 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
10:28:40 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
10:28:40 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
10:28:40 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
10:28:40 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
10:28:40 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
10:28:40 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
10:28:40 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
10:28:40 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
10:28:40 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
10:28:40 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
10:28:40 153  );
10:28:40 154  
10:28:40 155  PROCEDURE CREATE_PP_DISPUTE (
10:28:40 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
10:28:40 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
10:28:40 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:40 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
10:28:40 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
10:28:40 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
10:28:40 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
10:28:40 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
10:28:40 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
10:28:40 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
10:28:40 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
10:28:40 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
10:28:40 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
10:28:40 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
10:28:40 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
10:28:40 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
10:28:40 172  );
10:28:40 173  
10:28:40 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
10:28:40 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
10:28:40 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
10:28:40 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:40 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
10:28:40 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
10:28:40 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
10:28:40 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
10:28:40 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
10:28:40 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
10:28:40 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
10:28:40 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
10:28:40 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
10:28:40 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
10:28:40 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
10:28:40 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
10:28:40 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
10:28:40 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
10:28:40 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
10:28:40 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
10:28:40 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
10:28:40 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
10:28:40 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
10:28:40 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
10:28:40 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
10:28:40 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
10:28:40 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
10:28:40 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
10:28:40 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
10:28:40 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
10:28:40 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
10:28:40 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
10:28:40 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
10:28:40 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
10:28:40 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
10:28:40 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
10:28:40 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
10:28:40 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
10:28:40 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
10:28:40 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
10:28:40 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
10:28:40 215  );
10:28:40 216  
10:28:40 217  PROCEDURE GET_EXT_SOURCE_LOG (
10:28:40 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:28:40 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
10:28:40 220  	out_result_set		 OUT SYS_REFCURSOR
10:28:40 221  );
10:28:40 222  
10:28:40 223  FUNCTION CHECK_EXT_SOURCE_LOG (
10:28:40 224  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:28:40 225  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
10:28:40 226  ) RETURN NUMBER;
10:28:40 227  
10:28:40 228  PROCEDURE CREATE_AMEX_CHARGEBACK (
10:28:40 229  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
10:28:40 230  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
10:28:40 231  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
10:28:40 232  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
10:28:40 233  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
10:28:40 234  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
10:28:40 235  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
10:28:40 236  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
10:28:40 237  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
10:28:40 238  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
10:28:40 239  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
10:28:40 240  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
10:28:40 241  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
10:28:40 242  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
10:28:40 243  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
10:28:40 244  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
10:28:40 245  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
10:28:40 246  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
10:28:40 247  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
10:28:40 248  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
10:28:40 249  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
10:28:40 250  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
10:28:40 251  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
10:28:40 252  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
10:28:40 253  );
10:28:40 254  
10:28:40 255  END PROCS_RECONCILIATION_CRU_V24;
10:28:40 256  .
10:28:40 SQL> /

Package created.

Elapsed: 00:00:00.20
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_reporting.sql
Compiling header for procs_reporting.sql
10:28:41 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
10:28:41   2  
10:28:41   3  ----
10:28:41   4  --------------------------------------------------------------------------------
10:28:41   5  ----
10:28:41   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41   7  ----
10:28:41   8  --------------------------------------------------------------------------------
10:28:41   9  ----
10:28:41  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  11  ----
10:28:41  12  --------------------------------------------------------------------------------
10:28:41  13  ----
10:28:41  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  15  ----
10:28:41  16  --------------------------------------------------------------------------------
10:28:41  17  ----
10:28:41  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  19  ----
10:28:41  20  --------------------------------------------------------------------------------
10:28:41  21  ----
10:28:41  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  23  ----
10:28:41  24  --------------------------------------------------------------------------------
10:28:41  25  ----
10:28:41  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  27  ----
10:28:41  28  --------------------------------------------------------------------------------
10:28:41  29  ----
10:28:41  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  31  ----
10:28:41  32  --------------------------------------------------------------------------------
10:28:41  33  ----
10:28:41  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  35  ----
10:28:41  36  --------------------------------------------------------------------------------
10:28:41  37  ----
10:28:41  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  39  ----
10:28:41  40  --------------------------------------------------------------------------------
10:28:41  41  ----
10:28:41  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  43  ----
10:28:41  44  --------------------------------------------------------------------------------
10:28:41  45  ----
10:28:41  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  47  ----
10:28:41  48  --------------------------------------------------------------------------------
10:28:41  49  ----
10:28:41  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  51  ----
10:28:41  52  --------------------------------------------------------------------------------
10:28:41  53  ----
10:28:41  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  55  ----
10:28:41  56  --------------------------------------------------------------------------------
10:28:41  57  ----
10:28:41  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  59  ----
10:28:41  60  --------------------------------------------------------------------------------
10:28:41  61  ----
10:28:41  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  63  ----
10:28:41  64  --------------------------------------------------------------------------------
10:28:41  65  ----
10:28:41  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  67  ----
10:28:41  68  --------------------------------------------------------------------------------
10:28:41  69  ----
10:28:41  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  71  ----
10:28:41  72  --------------------------------------------------------------------------------
10:28:41  73  ----
10:28:41  74  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  75  ----
10:28:41  76  --------------------------------------------------------------------------------
10:28:41  77  ----
10:28:41  78  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  79  ----
10:28:41  80  --------------------------------------------------------------------------------
10:28:41  81  ----
10:28:41  82  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  83  ----
10:28:41  84  --------------------------------------------------------------------------------
10:28:41  85  ----
10:28:41  86  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  87  ----
10:28:41  88  --------------------------------------------------------------------------------
10:28:41  89  ----
10:28:41  90  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  91  ----
10:28:41  92  --------------------------------------------------------------------------------
10:28:41  93  ----
10:28:41  94  
10:28:41  95  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41  96  ----
10:28:41  97  --------------------------------------------------------------------------------
10:28:41  98  ----
10:28:41  99  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 100  ----
10:28:41 101  --------------------------------------------------------------------------------
10:28:41 102  ----
10:28:41 103  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 104  ----
10:28:41 105  --------------------------------------------------------------------------------
10:28:41 106  ----
10:28:41 107  /**/
10:28:41 108  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 109  ----
10:28:41 110  --------------------------------------------------------------------------------
10:28:41 111  ----
10:28:41 112  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 113  ----
10:28:41 114  --------------------------------------------------------------------------------
10:28:41 115  ----
10:28:41 116  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 117  ----
10:28:41 118  --------------------------------------------------------------------------------
10:28:41 119  ----
10:28:41 120  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 121  ----
10:28:41 122  --------------------------------------------------------------------------------
10:28:41 123  ----
10:28:41 124  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 125  ----
10:28:41 126  --------------------------------------------------------------------------------
10:28:41 127  ----
10:28:41 128  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 129  ----
10:28:41 130  --------------------------------------------------------------------------------
10:28:41 131  ----
10:28:41 132  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 133  ----
10:28:41 134  --------------------------------------------------------------------------------
10:28:41 135  ----
10:28:41 136  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 137  ----
10:28:41 138  --------------------------------------------------------------------------------
10:28:41 139  ----
10:28:41 140  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 141  ----
10:28:41 142  --------------------------------------------------------------------------------
10:28:41 143  ----
10:28:41 144  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 145  ----
10:28:41 146  --------------------------------------------------------------------------------
10:28:41 147  ----
10:28:41 148  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:28:41 149  ----
10:28:41 150  --------------------------------------------------------------------------------
10:28:41 151  ----
10:28:41 152  /**/
10:28:41 153  END PROCS_REPORTING;
10:28:41 154  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.04
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_reports.sql
Compiling header for procs_reports.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PROCS_REPORTS
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V24" AS
10:28:41   2  
10:28:41   3  FUNCTION GET_PRODUCT_NAMES(
10:28:41   4  	in_offer_id IN NUMBER
10:28:41   5  ) RETURN VARCHAR2;
10:28:41   6  
10:28:41   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
10:28:41   8  	in_start_date  IN DATE,
10:28:41   9  	in_end_date    IN DATE,
10:28:41  10  	out_result_set OUT SYS_REFCURSOR
10:28:41  11  );
10:28:41  12  
10:28:41  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
10:28:41  14  	in_offer_id	       IN NUMBER,
10:28:41  15  	in_start_date	       IN DATE,
10:28:41  16  	in_end_date	       IN DATE,
10:28:41  17  	out_new_purchasers_num OUT NUMBER,
10:28:41  18  	out_renewals_num       OUT NUMBER,
10:28:41  19  	out_product_names      OUT VARCHAR2,
10:28:41  20  	out_total_dollar_value OUT NUMBER,
10:28:41  21  	out_unique_purchasers  OUT NUMBER
10:28:41  22  );
10:28:41  23  
10:28:41  24  /*
10:28:41  25  FUNCTIONS FOR THE FLASH REPORT
10:28:41  26  */
10:28:41  27  
10:28:41  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
10:28:41  29  	in_offer_id	       IN NUMBER,
10:28:41  30  	in_start_date	       IN DATE,
10:28:41  31  	in_end_date	       IN DATE
10:28:41  32  ) RETURN NUMBER;
10:28:41  33  
10:28:41  34  FUNCTION FLR_RENEWALS_NUM (
10:28:41  35  	in_offer_id	       IN NUMBER,
10:28:41  36  	in_start_date	       IN DATE,
10:28:41  37  	in_end_date	       IN DATE
10:28:41  38  ) RETURN NUMBER;
10:28:41  39  
10:28:41  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
10:28:41  41  	in_offer_id	       IN NUMBER,
10:28:41  42  	in_start_date	       IN DATE,
10:28:41  43  	in_end_date	       IN DATE
10:28:41  44  ) RETURN NUMBER;
10:28:41  45  
10:28:41  46  FUNCTION FLR_UNIQUE_PURCHASERS (
10:28:41  47  	in_offer_id	       IN NUMBER,
10:28:41  48  	in_start_date	       IN DATE,
10:28:41  49  	in_end_date	       IN DATE
10:28:41  50  ) RETURN NUMBER;
10:28:41  51  
10:28:41  52  END PROCS_REPORTS_V24;
10:28:41  53  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_subscription.sql
Compiling header for procs_subscription.sql
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
10:28:41   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
10:28:41   5  	in_updater	     IN VARCHAR2,
10:28:41   6  	in_duration_in_hours IN NUMBER
10:28:41   7  );
10:28:41   8  
10:28:41   9  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
10:28:41  10  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
10:28:41  11  	in_updater    IN VARCHAR2
10:28:41  12  );
10:28:41  13  
10:28:41  14  PROCEDURE START_SUBSCRIPTION_CREATION (
10:28:41  15  	in_group_id	      IN NUMBER,
10:28:41  16  	in_created_by	      IN VARCHAR2,
10:28:41  17  	in_offer_chain_id     IN NUMBER,
10:28:41  18  	in_instrument_type_id IN NUMBER,
10:28:41  19  	in_instrument_id      IN NUMBER,
10:28:41  20  	in_agent_id	      IN NUMBER,
10:28:41  21  	in_note 	      IN VARCHAR2,
10:28:41  22  	out_subscription_id   OUT NUMBER,
10:28:41  23  	out_invoice_id	      OUT NUMBER,
10:28:41  24  	out_new_license_id    OUT NUMBER,
10:28:41  25  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.TRUE
10:28:41  26  );
10:28:41  27  
10:28:41  28  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
10:28:41  29  	in_subscription_id    IN NUMBER,
10:28:41  30  	in_invoice_id	      IN NUMBER,
10:28:41  31  	in_instrument_type_id IN NUMBER,
10:28:41  32  	in_instrument_id      IN NUMBER,
10:28:41  33  	in_created_by	      IN VARCHAR2
10:28:41  34  );
10:28:41  35  
10:28:41  36  PROCEDURE SUSPEND_SUBSCRIPTION(
10:28:41  37  	  in_subs_id	IN NUMBER ,
10:28:41  38  	  in_updated_by IN VARCHAR2
10:28:41  39  );
10:28:41  40  
10:28:41  41  PROCEDURE REACTIVATE_SUBSCRIPTION (
10:28:41  42  	in_subscription_id IN  NUMBER,
10:28:41  43  	in_updated_by	   IN  VARCHAR2
10:28:41  44  );
10:28:41  45  
10:28:41  46  PROCEDURE GET_SUBSCRIPTION_INFO (
10:28:41  47  	  in_subscription_id IN  NUMBER,
10:28:41  48  	  out_result_set      OUT SYS_REFCURSOR
10:28:41  49  );
10:28:41  50  
10:28:41  51  PROCEDURE GET_SUBSCRIPTION_INVOICES (
10:28:41  52  	in_subscription_id  IN	NUMBER,
10:28:41  53  	out_result_set	    OUT SYS_REFCURSOR
10:28:41  54  );
10:28:41  55  
10:28:41  56  PROCEDURE GET_SUBSCRIPTION_NOTES (
10:28:41  57  	in_subscription_id  IN	NUMBER,
10:28:41  58  	out_result_set	    OUT SYS_REFCURSOR
10:28:41  59  );
10:28:41  60  
10:28:41  61  PROCEDURE ANNOTATE_SUBSCRIPTION (
10:28:41  62  	in_subscription_id IN  NUMBER,
10:28:41  63  	in_agent_id	   IN  NUMBER,
10:28:41  64  	in_note 	   IN  VARCHAR2,
10:28:41  65  	in_created_by	   IN  VARCHAR2
10:28:41  66  );
10:28:41  67  
10:28:41  68  PROCEDURE GET_CANCEL_REASONS (
10:28:41  69  	out_result_set OUT    SYS_REFCURSOR
10:28:41  70  );
10:28:41  71  
10:28:41  72  FUNCTION GET_RENEWAL_DATE (
10:28:41  73  	in_subscription_id in NUMBER
10:28:41  74  ) RETURN DATE;
10:28:41  75  
10:28:41  76  FUNCTION GET_RECENT_CHARGE (
10:28:41  77  	in_subscription_id IN NUMBER
10:28:41  78  ) RETURN NUMBER;
10:28:41  79  
10:28:41  80  FUNCTION GET_BILLING_CYCLE (
10:28:41  81  	in_subscription_id IN NUMBER
10:28:41  82  ) RETURN VARCHAR2;
10:28:41  83  
10:28:41  84  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
10:28:41  85  	in_subscription_id	IN NUMBER,
10:28:41  86  	in_effective_start_date IN DATE,
10:28:41  87  	in_effective_end_date	IN DATE,
10:28:41  88  	in_note 		IN VARCHAR2,
10:28:41  89  	in_updated_by		IN VARCHAR2
10:28:41  90  );
10:28:41  91  
10:28:41  92  FUNCTION CALC_SUBSCRIPTION_END_DATE (
10:28:41  93  	in_subscription_id IN NUMBER
10:28:41  94  ) RETURN DATE;
10:28:41  95  
10:28:41  96  PROCEDURE HAS_FUTURE_LICENSE (
10:28:41  97  	in_license_id IN  NUMBER,
10:28:41  98  	out_result    OUT NUMBER
10:28:41  99  );
10:28:41 100  
10:28:41 101  PROCEDURE CLOSE_SUBSCRIPTION (
10:28:41 102  	in_subscription_id IN NUMBER,
10:28:41 103  	in_updated_by	   IN VARCHAR2
10:28:41 104  );
10:28:41 105  
10:28:41 106  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
10:28:41 107  	in_subscription_id IN NUMBER,
10:28:41 108  	out_group_id	   OUT NUMBER
10:28:41 109  );
10:28:41 110  
10:28:41 111  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
10:28:41 112  	in_subscription_id IN NUMBER,
10:28:41 113  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 114  );
10:28:41 115  
10:28:41 116  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
10:28:41 117  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
10:28:41 118  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
10:28:41 119  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
10:28:41 120  );
10:28:41 121  
10:28:41 122  PROCEDURE GET_ACTIVE_INVOICES_IDS (
10:28:41 123  	in_subscription_id IN NUMBER,
10:28:41 124  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 125  );
10:28:41 126  
10:28:41 127  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
10:28:41 128  	in_invoice_id	     IN NUMBER,
10:28:41 129  	in_updated_by	     IN VARCHAR2,
10:28:41 130  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE
10:28:41 131  );
10:28:41 132  
10:28:41 133  PROCEDURE FINALIZE_CANCELATION (
10:28:41 134  	in_subscription_id    IN NUMBER,
10:28:41 135  	in_cancelation_reason IN VARCHAR2,
10:28:41 136  	in_cancelation_date   IN DATE,
10:28:41 137  	in_note 	      IN VARCHAR2,
10:28:41 138  	in_agent_id	      IN NUMBER,
10:28:41 139  	in_updated_by	      IN VARCHAR2,
10:28:41 140  	in_revoke_entitlements IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:28:41 141  );
10:28:41 142  
10:28:41 143  PROCEDURE FINALIZE_FALSE_START (
10:28:41 144  	in_subscription_id    IN NUMBER,
10:28:41 145  	in_cancelation_date   IN DATE,
10:28:41 146  	in_note 	      IN VARCHAR2,
10:28:41 147  	in_agent_id	      IN NUMBER,
10:28:41 148  	in_updated_by	      IN VARCHAR2
10:28:41 149  );
10:28:41 150  
10:28:41 151  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
10:28:41 152  	in_subscription_id IN NUMBER
10:28:41 153  ) RETURN NUMBER;
10:28:41 154  
10:28:41 155  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
10:28:41 156  	in_subscription_id IN NUMBER,
10:28:41 157  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 158  );
10:28:41 159  
10:28:41 160  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
10:28:41 161  	in_subscription_id IN NUMBER,
10:28:41 162  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 163  );
10:28:41 164  
10:28:41 165  PROCEDURE GET_SUBSCR_LIC_OFFER (
10:28:41 166  	in_subscription_id IN NUMBER,
10:28:41 167  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 168  );
10:28:41 169  
10:28:41 170  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
10:28:41 171  	in_subscription_id IN NUMBER,
10:28:41 172  	out_result	   OUT NUMBER
10:28:41 173  );
10:28:41 174  
10:28:41 175  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
10:28:41 176  	in_group_id	   IN NUMBER,
10:28:41 177  	in_offer_chain_id  IN NUMBER,
10:28:41 178  	out_result	   out number
10:28:41 179  );
10:28:41 180  
10:28:41 181  PROCEDURE GET_EXISTING_SUBSCR_IDS (
10:28:41 182  	in_group_id	   IN NUMBER,
10:28:41 183  	in_offer_chain_id  IN NUMBER,
10:28:41 184  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 185  );
10:28:41 186  
10:28:41 187  PROCEDURE ADD_META_DATA (
10:28:41 188  	in_subscription_id IN NUMBER,
10:28:41 189  	in_name 	   IN VARCHAR2,
10:28:41 190  	in_value	   IN VARCHAR2,
10:28:41 191  	in_created_by	   IN VARCHAR2
10:28:41 192  );
10:28:41 193  
10:28:41 194  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
10:28:41 195  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
10:28:41 196  	out_result_set	     OUT SYS_REFCURSOR
10:28:41 197  );
10:28:41 198  
10:28:41 199  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
10:28:41 200  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
10:28:41 201  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 202  );
10:28:41 203  
10:28:41 204  PROCEDURE GET_OPEN_CHARGES_BY_SUBID (
10:28:41 205  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:28:41 206  	out_result_set	    OUT SYS_REFCURSOR
10:28:41 207  );
10:28:41 208  
10:28:41 209  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
10:28:41 210  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
10:28:41 211  ) RETURN NUMBER;
10:28:41 212  
10:28:41 213  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
10:28:41 214  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
10:28:41 215  ) RETURN VARCHAR2;
10:28:41 216  
10:28:41 217  PROCEDURE GET_ACTIVE_MEU_SUBS (
10:28:41 218  	out_result_set	    OUT SYS_REFCURSOR
10:28:41 219  );
10:28:41 220  
10:28:41 221  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
10:28:41 222  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:28:41 223  	out_offer_id	    OUT LICENSE.ID%TYPE
10:28:41 224  );
10:28:41 225  
10:28:41 226  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
10:28:41 227  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:28:41 228  	out_license_id	    OUT LICENSE.ID%TYPE
10:28:41 229  );
10:28:41 230  
10:28:41 231  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
10:28:41 232  	out_result_set	    OUT SYS_REFCURSOR
10:28:41 233  );
10:28:41 234  
10:28:41 235  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
10:28:41 236  	out_result_set	    OUT SYS_REFCURSOR
10:28:41 237  );
10:28:41 238  
10:28:41 239  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
10:28:41 240  	out_result_set	    OUT SYS_REFCURSOR
10:28:41 241  );
10:28:41 242  
10:28:41 243  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
10:28:41 244  	in_max_days_until_close IN NUMBER,
10:28:41 245  	in_num_subs_to_fetch	IN NUMBER,
10:28:41 246  	out_result_set		OUT SYS_REFCURSOR
10:28:41 247  );
10:28:41 248  
10:28:41 249  
10:28:41 250  END PROCS_SUBSCRIPTION_V24;
10:28:41 251  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.15
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_subscription_cru.sql
Compiling header for procs_subscription_cru.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE CREATE_SUBSCRIPTION(
10:28:41   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
10:28:41   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
10:28:41   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
10:28:41   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
10:28:41   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
10:28:41   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
10:28:41  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
10:28:41  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
10:28:41  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
10:28:41  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
10:28:41  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
10:28:41  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
10:28:41  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
10:28:41  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
10:28:41  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
10:28:41  19  );
10:28:41  20  
10:28:41  21  PROCEDURE UPDATE_SUBSCRIPTION(
10:28:41  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
10:28:41  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
10:28:41  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
10:28:41  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
10:28:41  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
10:28:41  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
10:28:41  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
10:28:41  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:28:41  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
10:28:41  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
10:28:41  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
10:28:41  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
10:28:41  34  );
10:28:41  35  
10:28:41  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
10:28:41  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
10:28:41  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:28:41  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
10:28:41  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:28:41  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
10:28:41  42  );
10:28:41  43  
10:28:41  44  END PROCS_SUBSCRIPTION_CRU_V24;
10:28:41  45  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.02
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_system.sql
Compiling header for procs_system.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PROCS_SYSTEM
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE INCREMENT_VERSION;
10:28:41   4  
10:28:41   5  PROCEDURE CHECK_VERSION(
10:28:41   6  	  in_vers    IN NUMBER,
10:28:41   7  	  out_result OUT NUMBER
10:28:41   8  );
10:28:41   9  
10:28:41  10  END PROCS_SYSTEM_V24;
10:28:41  11  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.04
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_taxes.sql
Compiling header for procs_taxes.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PROCS_TAXES
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE ADD_TAX (
10:28:41   4  	in_tax_type_id		 IN NUMBER,
10:28:41   5  	in_calculated_amount	 IN NUMBER,
10:28:41   6  	in_created_by		 IN VARCHAR2,
10:28:41   7  	in_line_item_id 	 IN NUMBER,
10:28:41   8  	in_effective_rate	 IN VARCHAR2,
10:28:41   9  	in_taxable_amount	 IN NUMBER,
10:28:41  10  	in_tax_rule_id		 IN NUMBER,
10:28:41  11  	in_jurisdiction_level_id IN NUMBER,
10:28:41  12  	in_jurisdiction_name	 IN VARCHAR2,
10:28:41  13  	in_jurisdiction_id	 IN VARCHAR2,
10:28:41  14  	in_ext_tax_type 	 IN VARCHAR2,
10:28:41  15  	in_ext_result		 IN VARCHAR2,
10:28:41  16  	in_imposition_type	 IN VARCHAR2,
10:28:41  17  	in_imposition		 IN VARCHAR2
10:28:41  18  );
10:28:41  19  
10:28:41  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
10:28:41  21  	in_country_code IN CHAR,
10:28:41  22  	in_check_date IN DATE,
10:28:41  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V24.FALSE
10:28:41  24  );
10:28:41  25  
10:28:41  26  PROCEDURE GET_TAX_CATEGORY (
10:28:41  27  	in_tax_category_id IN NUMBER,
10:28:41  28  	out_result_set	   OUT SYS_REFCURSOR
10:28:41  29  );
10:28:41  30  
10:28:41  31  END PROCS_TAXES_V24;
10:28:41  32  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_taxes_cru.sql
Compiling header for procs_taxes_cru.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PROCS_TAXES_CRU
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE CREATE_TAX (
10:28:41   4  	inout_tax_id		 IN OUT NUMBER,
10:28:41   5  	in_tax_type_id		 IN NUMBER,
10:28:41   6  	in_calculated_amount	 IN NUMBER,
10:28:41   7  	in_created_by		 IN VARCHAR2,
10:28:41   8  	in_line_item_id 	 IN NUMBER,
10:28:41   9  	in_effective_rate	 IN VARCHAR2,
10:28:41  10  	in_taxable_amount	 IN NUMBER,
10:28:41  11  	in_tax_rule_id		 IN NUMBER,
10:28:41  12  	in_jurisdiction_level_id IN NUMBER,
10:28:41  13  	in_jurisdiction_name	 IN VARCHAR2,
10:28:41  14  	in_jurisdiction_id	 IN VARCHAR2,
10:28:41  15  	in_ext_tax_type 	 IN VARCHAR2,
10:28:41  16  	in_ext_result		 IN VARCHAR2,
10:28:41  17  	in_imposition_type	 IN VARCHAR2,
10:28:41  18  	in_imposition		 IN VARCHAR2
10:28:41  19  );
10:28:41  20  
10:28:41  21  END PROCS_TAXES_CRU_V24;
10:28:41  22  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.02
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_test.sql
Compiling header for procs_test.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PROCS_TEST
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE TEST_CLEAR_ALL;
10:28:41   4  PROCEDURE TEST_CLEAR_PRODUCTS;
10:28:41   5  
10:28:41   6  /********************************************/
10:28:41   7  
10:28:41   8  PROCEDURE TEST_GET_ACCOUNT (
10:28:41   9  	in_group_id	IN NUMBER,
10:28:41  10  	out_result_set	OUT SYS_REFCURSOR
10:28:41  11  );
10:28:41  12  
10:28:41  13  /********************************************/
10:28:41  14  
10:28:41  15  PROCEDURE TEST_GET_SUBSCRIPTION (
10:28:41  16  	in_subscription_id IN NUMBER,
10:28:41  17  	out_result_set	   OUT SYS_REFCURSOR
10:28:41  18  );
10:28:41  19  
10:28:41  20  /*********************************************/
10:28:41  21  
10:28:41  22  PROCEDURE TEST_DELETE_INVOICE (
10:28:41  23  	in_invoice_id IN NUMBER
10:28:41  24  );
10:28:41  25  
10:28:41  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
10:28:41  27  	in_group_id IN NUMBER
10:28:41  28  );
10:28:41  29  
10:28:41  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
10:28:41  31  	in_start_group_id IN NUMBER,
10:28:41  32  	in_end_group_id   IN NUMBER
10:28:41  33  );
10:28:41  34  
10:28:41  35  /**********************************************/
10:28:41  36  
10:28:41  37  FUNCTION TEST_IS_INVOICE_EXISTS(
10:28:41  38  /*
10:28:41  39  1 - exists
10:28:41  40  0 - not exists
10:28:41  41  */
10:28:41  42  	in_invoice_id IN NUMBER
10:28:41  43  ) RETURN NUMBER;
10:28:41  44  
10:28:41  45  PROCEDURE TEST_GET_INVOICE_INFO (
10:28:41  46  	in_invoice_id  IN NUMBER,
10:28:41  47  	out_result_set OUT SYS_REFCURSOR
10:28:41  48  );
10:28:41  49  
10:28:41  50  /******************************************************************************/
10:28:41  51  
10:28:41  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
10:28:41  53  	in_offer_chain_id in number
10:28:41  54  );
10:28:41  55  
10:28:41  56  END PROCS_TEST_V24;
10:28:41  57  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.04
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_transaction.sql
Compiling header for procs_transaction.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PROCS_TRANSACTION
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE CREATE_TRANSACTION (
10:28:41   4  /*
10:28:41   5  Throws exceptions:
10:28:41   6  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41   7  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41   8  */
10:28:41   9  	in_transaction_id	  IN NUMBER,
10:28:41  10  	in_status_id		  IN NUMBER,
10:28:41  11  	in_amount		  IN NUMBER,
10:28:41  12  	in_created_by		  IN VARCHAR2,
10:28:41  13  	in_order_id		  IN VARCHAR2,
10:28:41  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE,
10:28:41  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
10:28:41  16  	out_transaction_id	  OUT NUMBER
10:28:41  17  );
10:28:41  18  
10:28:41  19  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
10:28:41  20  /*
10:28:41  21  Throws exceptions:
10:28:41  22  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  23  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  24  */
10:28:41  25  	in_transaction_id	   IN NUMBER,
10:28:41  26  	in_trans_attempt_status    IN NUMBER,
10:28:41  27  	in_external_status_code    IN VARCHAR2,
10:28:41  28  	in_external_status_message IN VARCHAR2,
10:28:41  29  	in_created_by		   IN VARCHAR2,
10:28:41  30  	in_ext_transaction_id	   IN VARCHAR2,
10:28:41  31  	out_transaction_attempt_id OUT NUMBER
10:28:41  32  );
10:28:41  33  
10:28:41  34  PROCEDURE UPDATE_TRANSACTION_STATUS (
10:28:41  35  /*
10:28:41  36  Throws exceptions:
10:28:41  37  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  38  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  39  */
10:28:41  40  	in_transaction_id	 IN NUMBER,
10:28:41  41  	in_updated_by		 IN VARCHAR2,
10:28:41  42  	in_transaction_status_id IN NUMBER
10:28:41  43  );
10:28:41  44  
10:28:41  45  PROCEDURE UPDATE_TRANSACTION_SETTLED (
10:28:41  46  /*
10:28:41  47  Throws exceptions:
10:28:41  48  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  49  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  50  */
10:28:41  51  	in_transaction_id	 IN NUMBER,
10:28:41  52  	in_updated_by		 IN VARCHAR2,
10:28:41  53  	in_is_settled		 IN NUMBER
10:28:41  54  );
10:28:41  55  
10:28:41  56  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
10:28:41  57  /*
10:28:41  58  Throws exceptions:
10:28:41  59  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  60  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  61  */
10:28:41  62  	in_transaction_attempt_id IN NUMBER,
10:28:41  63  	in_updated_by		  IN VARCHAR2
10:28:41  64  );
10:28:41  65  
10:28:41  66  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
10:28:41  67  /*
10:28:41  68  Throws exceptions:
10:28:41  69  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  70  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  71  */
10:28:41  72  	in_transaction_attempt_id     IN NUMBER,
10:28:41  73  	in_transaction_attempt_status IN NUMBER
10:28:41  74  );
10:28:41  75  
10:28:41  76  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
10:28:41  77  /*
10:28:41  78  Throws exceptions:
10:28:41  79  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  80  */
10:28:41  81  	in_transaction_id	      IN NUMBER,
10:28:41  82  	in_transaction_attempt_status IN NUMBER,
10:28:41  83  	out_result_set		      OUT SYS_REFCURSOR
10:28:41  84  );
10:28:41  85  
10:28:41  86  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
10:28:41  87  /*
10:28:41  88  Throws exceptions:
10:28:41  89  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  90  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  91  */
10:28:41  92  	in_transaction_attempt_id IN NUMBER,
10:28:41  93  	in_ext_status_code	  IN VARCHAR2,
10:28:41  94  	in_ext_status_message	  IN VARCHAR2,
10:28:41  95  	in_ext_transaction_id	  IN VARCHAR2
10:28:41  96  );
10:28:41  97  
10:28:41  98  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
10:28:41  99  /*
10:28:41 100  Throws exceptions:
10:28:41 101  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 102  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 103  */
10:28:41 104  	in_transaction_id IN  NUMBER,
10:28:41 105  	out_attempts_num  OUT NUMBER
10:28:41 106  );
10:28:41 107  
10:28:41 108  PROCEDURE GET_TRANSACTION_AMOUNT (
10:28:41 109  /*
10:28:41 110  Throws exceptions:
10:28:41 111  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 112  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 113  */
10:28:41 114  	in_transaction_id      IN  NUMBER,
10:28:41 115  	out_transaction_amount OUT NUMBER
10:28:41 116  );
10:28:41 117  
10:28:41 118  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
10:28:41 119  /*
10:28:41 120  Throws exceptions:
10:28:41 121  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 122  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 123  */
10:28:41 124  	in_charge_id   IN  NUMBER,
10:28:41 125  	out_result_set OUT SYS_REFCURSOR
10:28:41 126  );
10:28:41 127  
10:28:41 128  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
10:28:41 129  /*
10:28:41 130  Throws exceptions:
10:28:41 131  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 132  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 133  */
10:28:41 134  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
10:28:41 135  	out_result_set OUT SYS_REFCURSOR
10:28:41 136  );
10:28:41 137  
10:28:41 138  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
10:28:41 139  /*
10:28:41 140  Throws exceptions:
10:28:41 141  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 142  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 143  */
10:28:41 144  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
10:28:41 145  	out_result_set OUT SYS_REFCURSOR
10:28:41 146  );
10:28:41 147  
10:28:41 148  PROCEDURE GET_TRANSACTION_ATTEMPTS (
10:28:41 149  /*
10:28:41 150  Throws exceptions:
10:28:41 151  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 152  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 153  */
10:28:41 154  	in_transaction_id IN  NUMBER,
10:28:41 155  	out_result_set	  OUT SYS_REFCURSOR
10:28:41 156  );
10:28:41 157  
10:28:41 158  PROCEDURE RESERVE_TRANSACTION_ID (
10:28:41 159  /*
10:28:41 160  Throws exceptions:
10:28:41 161  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 162  */
10:28:41 163  	out_transaction_id OUT NUMBER
10:28:41 164  );
10:28:41 165  
10:28:41 166  PROCEDURE GET_TRANSACTION_BY_ID (
10:28:41 167  /*
10:28:41 168  Throws exceptions:
10:28:41 169  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 170  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 171  */
10:28:41 172  	in_transaction_id IN NUMBER,
10:28:41 173  	out_result_set	  OUT SYS_REFCURSOR
10:28:41 174  );
10:28:41 175  
10:28:41 176  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:28:41 177  /*
10:28:41 178  Throws exceptions:
10:28:41 179  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 180  APP_EXCEPTION_CODES_V24.INTRNAL_ERROR
10:28:41 181  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 182  */
10:28:41 183  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:28:41 184  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:28:41 185  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:28:41 186  );
10:28:41 187  
10:28:41 188  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
10:28:41 189  /*
10:28:41 190  Throws exceptions:
10:28:41 191  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 192  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 193  */
10:28:41 194  	in_invoice_id	IN  NUMBER,
10:28:41 195  	out_result_set OUT SYS_REFCURSOR
10:28:41 196  );
10:28:41 197  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
10:28:41 198  /*
10:28:41 199  Throws exceptions:
10:28:41 200  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 201  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 202  */
10:28:41 203  	in_transaction_id IN  NUMBER,
10:28:41 204  	out_is_successfull  OUT NUMBER
10:28:41 205  );
10:28:41 206  
10:28:41 207  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
10:28:41 208  	in_transaction_id IN NUMBER
10:28:41 209  ) RETURN NUMBER;
10:28:41 210  
10:28:41 211  FUNCTION GET_TRANSACTION_INTRL_TAXES (
10:28:41 212  	in_transaction_id IN NUMBER
10:28:41 213  ) RETURN NUMBER;
10:28:41 214  
10:28:41 215  -- norlov: #38796
10:28:41 216  PROCEDURE GET_TRANSACTIONS (
10:28:41 217  /*
10:28:41 218  Throws exceptions:
10:28:41 219  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 220  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 221  */
10:28:41 222  	in_group_id	      IN  NUMBER,
10:28:41 223  	in_invoice_id	      IN NUMBER DEFAULT NULL,
10:28:41 224  	in_subscription_id    IN NUMBER DEFAULT NULL,
10:28:41 225  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
10:28:41 226  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
10:28:41 227  	in_transaction_status IN NUMBER DEFAULT NULL,
10:28:41 228  	out_result_set	      OUT SYS_REFCURSOR
10:28:41 229  );
10:28:41 230  
10:28:41 231  FUNCTION IS_TRANSACTION_COLLECTED (
10:28:41 232  /*
10:28:41 233  Throws:
10:28:41 234  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 235  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 236  Returns:
10:28:41 237  GLOBAL_CONST.TRUE if transaction collected,
10:28:41 238  GLOBAL_CONST.FALSE else
10:28:41 239  */
10:28:41 240  	in_transaction_id IN NUMBER
10:28:41 241  ) RETURN NUMBER;
10:28:41 242  
10:28:41 243  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
10:28:41 244  /*
10:28:41 245  Throws exceptions:
10:28:41 246  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 247  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 248  */
10:28:41 249  	in_charge_id   in  number,
10:28:41 250  	out_attempt_count out number
10:28:41 251  );
10:28:41 252  
10:28:41 253  END PROCS_TRANSACTION_V24;
10:28:41 254  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.09
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for procs_transaction_cru.sql
Compiling header for procs_transaction_cru.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PROCS_TRANSACTION_CRU
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE CREATE_TRANSACTION (
10:28:41   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
10:28:41   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
10:28:41   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
10:28:41   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
10:28:41   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
10:28:41   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
10:28:41  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V24.FALSE,
10:28:41  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
10:28:41  12  );
10:28:41  13  
10:28:41  14  PROCEDURE UPDATE_TRANSACTION (
10:28:41  15  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
10:28:41  16  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
10:28:41  17  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
10:28:41  18  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
10:28:41  19  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
10:28:41  20  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
10:28:41  21  );
10:28:41  22  
10:28:41  23  PROCEDURE READ_TRANSACTION (
10:28:41  24  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:28:41  25  	out_result_set	  OUT SYS_REFCURSOR
10:28:41  26  );
10:28:41  27  
10:28:41  28  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
10:28:41  29  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
10:28:41  30  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
10:28:41  31  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
10:28:41  32  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:28:41  33  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
10:28:41  34  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
10:28:41  35  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
10:28:41  36  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
10:28:41  37  );
10:28:41  38  
10:28:41  39  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:28:41  40  /*
10:28:41  41  Throws exceptions:
10:28:41  42  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  43  APP_EXCEPTION_CODES_V24.INTRNAL_ERROR
10:28:41  44  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  45  */
10:28:41  46  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:28:41  47  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:28:41  48  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:28:41  49  );
10:28:41  50  
10:28:41  51  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
10:28:41  52  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
10:28:41  53  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
10:28:41  54  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:28:41  55  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
10:28:41  56  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
10:28:41  57  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
10:28:41  58  );
10:28:41  59  
10:28:41  60  END PROCS_TRANSACTION_CRU_V24;
10:28:41  61  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for public_procs_billing.sql
Compiling header for public_procs_billing.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PUBLIC_PROCS_BILLING
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:28:41   4  /*
10:28:41   5  Throws exceptions:
10:28:41   6  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41   7  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41   8  */
10:28:41   9  	  in_offer_chain_id IN	 NUMBER,
10:28:41  10  	  out_result_set    OUT  SYS_REFCURSOR
10:28:41  11  );
10:28:41  12  
10:28:41  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
10:28:41  14  /*
10:28:41  15  Throws exceptions:
10:28:41  16  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  17  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  18  */
10:28:41  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:41  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
10:28:41  21  );
10:28:41  22  
10:28:41  23  PROCEDURE GET_PENDING_INVOICES (
10:28:41  24  /*
10:28:41  25  Throws exceptions:
10:28:41  26  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  27  */
10:28:41  28  	out_result_set	     OUT SYS_REFCURSOR,
10:28:41  29  	in_row_number	     IN NUMBER DEFAULT NULL
10:28:41  30  );
10:28:41  31  
10:28:41  32  PROCEDURE GET_PENDING_REFUND_CHARGES (
10:28:41  33  /*
10:28:41  34  Throws exceptions:
10:28:41  35  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  36  */
10:28:41  37  	out_result_set	    OUT SYS_REFCURSOR,
10:28:41  38  	in_row_number	    IN NUMBER DEFAULT NULL
10:28:41  39  );
10:28:41  40  
10:28:41  41  PROCEDURE GET_UNPROCESSED_CHARGES (
10:28:41  42  /*
10:28:41  43  Throws exceptions:
10:28:41  44  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  45  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  46  */
10:28:41  47  	in_invoice_id  IN NUMBER,
10:28:41  48  	out_result_set OUT SYS_REFCURSOR
10:28:41  49  );
10:28:41  50  
10:28:41  51  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
10:28:41  52  /*
10:28:41  53  Throws exceptions:
10:28:41  54  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  55  */
10:28:41  56  	in_transaction_id	      IN NUMBER,
10:28:41  57  	in_transaction_attempt_status IN NUMBER,
10:28:41  58  	out_result_set		      OUT SYS_REFCURSOR
10:28:41  59  );
10:28:41  60  
10:28:41  61  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
10:28:41  62  /*
10:28:41  63  Throws exceptions:
10:28:41  64  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  65  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  66  */
10:28:41  67  	in_transaction_attempt_id     IN NUMBER,
10:28:41  68  	in_transaction_attempt_status IN NUMBER
10:28:41  69  );
10:28:41  70  
10:28:41  71  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
10:28:41  72  /*
10:28:41  73  Throws exceptions:
10:28:41  74  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  75  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  76  */
10:28:41  77  	in_transaction_attempt_id IN NUMBER,
10:28:41  78  	in_updated_by		  IN VARCHAR2
10:28:41  79  );
10:28:41  80  
10:28:41  81  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
10:28:41  82  /*
10:28:41  83  Throws exceptions:
10:28:41  84  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  85  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  86  */
10:28:41  87  	in_transaction_id	   IN NUMBER,
10:28:41  88  	in_trans_attempt_status    IN NUMBER,
10:28:41  89  	in_external_status_code    IN VARCHAR2,
10:28:41  90  	in_external_status_message IN VARCHAR2,
10:28:41  91  	in_created_by		   IN VARCHAR2,
10:28:41  92  	in_ext_transaction_id	   IN VARCHAR2,
10:28:41  93  	out_transaction_attempt_id OUT NUMBER
10:28:41  94  );
10:28:41  95  
10:28:41  96  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
10:28:41  97  /*
10:28:41  98  Throws exceptions:
10:28:41  99  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 100  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 101  */
10:28:41 102  	in_transaction_attempt_id IN NUMBER,
10:28:41 103  	in_ext_status_code	  IN VARCHAR2,
10:28:41 104  	in_ext_status_message	  IN VARCHAR2,
10:28:41 105  	in_ext_transaction_id	  IN VARCHAR2
10:28:41 106  );
10:28:41 107  
10:28:41 108  PROCEDURE UPDATE_TRANSACTION_STATUS (
10:28:41 109  /*
10:28:41 110  Throws exceptions:
10:28:41 111  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 112  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 113  */
10:28:41 114  	in_transaction_id	 IN NUMBER,
10:28:41 115  	in_updated_by		 IN VARCHAR2,
10:28:41 116  	in_transaction_status_id IN NUMBER
10:28:41 117  );
10:28:41 118  
10:28:41 119  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
10:28:41 120  /*
10:28:41 121  Throws exceptions:
10:28:41 122  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 123  */
10:28:41 124  	in_transaction_id IN  NUMBER,
10:28:41 125  	out_attempts_num  OUT NUMBER
10:28:41 126  );
10:28:41 127  
10:28:41 128  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
10:28:41 129  /*
10:28:41 130  Throws exceptions:
10:28:41 131  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 132  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 133  */
10:28:41 134  	in_transaction_id IN  NUMBER,
10:28:41 135  	out_is_successfull  OUT NUMBER
10:28:41 136  );
10:28:41 137  
10:28:41 138  PROCEDURE UPDATE_INVOICE_STATUS (
10:28:41 139  /*
10:28:41 140  Throws exceptions:
10:28:41 141  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 142  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 143  */
10:28:41 144  	in_invoice_id		       IN NUMBER,
10:28:41 145  	in_invoice_status_id	       IN NUMBER,
10:28:41 146  	in_updated_by		       IN VARCHAR2
10:28:41 147  );
10:28:41 148  
10:28:41 149  PROCEDURE SUSPEND_SUBSCRIPTION(
10:28:41 150  /*
10:28:41 151  Throws exceptions:
10:28:41 152  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 153  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:41 154  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 155  */
10:28:41 156  	  in_subs_id	IN NUMBER ,
10:28:41 157  	  in_updated_by IN VARCHAR2
10:28:41 158  );
10:28:41 159  
10:28:41 160  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:28:41 161  /*
10:28:41 162  Throws exceptions:
10:28:41 163  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 164  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 165  */
10:28:41 166  	in_credit_card_id IN  NUMBER,
10:28:41 167  	out_result_set	  OUT SYS_REFCURSOR
10:28:41 168  );
10:28:41 169  
10:28:41 170  PROCEDURE GET_TRANSACTION_AMOUNT (
10:28:41 171  /*
10:28:41 172  Throws exceptions:
10:28:41 173  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 174  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 175  */
10:28:41 176  	in_transaction_id      IN  NUMBER,
10:28:41 177  	out_transaction_amount OUT NUMBER
10:28:41 178  );
10:28:41 179  
10:28:41 180  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
10:28:41 181  /*
10:28:41 182  Throws exceptions:
10:28:41 183  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 184  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 185  */
10:28:41 186  	in_invoice_id  IN  NUMBER,
10:28:41 187  	out_account_id OUT NUMBER
10:28:41 188  );
10:28:41 189  
10:28:41 190  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
10:28:41 191  /*
10:28:41 192  Throws exceptions:
10:28:41 193  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:41 194  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 195  */
10:28:41 196  	in_gift_certificate_id IN NUMBER,
10:28:41 197  	out_result_set	       OUT SYS_REFCURSOR
10:28:41 198  );
10:28:41 199  
10:28:41 200  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
10:28:41 201  /*
10:28:41 202  Throws exceptions:
10:28:41 203  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 204  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 205  */
10:28:41 206  	in_charge_id	    IN NUMBER,
10:28:41 207  	out_subscription_id OUT NUMBER
10:28:41 208  );
10:28:41 209  
10:28:41 210  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
10:28:41 211  /*
10:28:41 212  Throws exceptions:
10:28:41 213  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 214  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 215  */
10:28:41 216  	in_gift_certificate_id IN NUMBER,
10:28:41 217  	in_charge_id	       IN NUMBER,
10:28:41 218  	out_result	       OUT NUMBER
10:28:41 219  );
10:28:41 220  
10:28:41 221  PROCEDURE GET_SUBSCRIPTION_INFO (
10:28:41 222  /*
10:28:41 223  Throws exceptions:
10:28:41 224  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 225  */
10:28:41 226  	  in_subscription_id IN  NUMBER,
10:28:41 227  	  out_result_set      OUT SYS_REFCURSOR
10:28:41 228  );
10:28:41 229  
10:28:41 230  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:28:41 231  /*
10:28:41 232  Throws exceptions:
10:28:41 233  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 234  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 235  */
10:28:41 236  	in_invoice_id IN  NUMBER,
10:28:41 237  	out_amount    OUT NUMBER
10:28:41 238  );
10:28:41 239  
10:28:41 240  PROCEDURE GET_TRANSACTION_BY_ID (
10:28:41 241  /*
10:28:41 242  Throws exceptions:
10:28:41 243  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 244  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 245  */
10:28:41 246  	in_transaction_id IN NUMBER,
10:28:41 247  	out_result_set	  OUT SYS_REFCURSOR
10:28:41 248  );
10:28:41 249  
10:28:41 250  PROCEDURE UPDATE_CHARGE_STATUS (
10:28:41 251  /*
10:28:41 252  Throws exceptions:
10:28:41 253  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 254  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 255  */
10:28:41 256  	in_charge_id	    IN CHARGE.ID%TYPE,
10:28:41 257  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:28:41 258  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
10:28:41 259  );
10:28:41 260  
10:28:41 261  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:28:41 262  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:41 263  	out_result_set OUT SYS_REFCURSOR
10:28:41 264  );
10:28:41 265  
10:28:41 266  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:28:41 267  /*
10:28:41 268  Throws exceptions:
10:28:41 269  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 270  APP_EXCEPTION_CODES_V24.INTRNAL_ERROR
10:28:41 271  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 272  */
10:28:41 273  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:28:41 274  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:28:41 275  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:28:41 276  );
10:28:41 277  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
10:28:41 278  /*
10:28:41 279  Throws exceptions:
10:28:41 280  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 281  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 282  */
10:28:41 283  	in_invoice_id	IN  NUMBER,
10:28:41 284  	out_result_set OUT SYS_REFCURSOR
10:28:41 285  );
10:28:41 286  PROCEDURE GET_ACTIVE_INVOICES_IDS (
10:28:41 287  /*
10:28:41 288  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 289  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 290  */
10:28:41 291  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
10:28:41 292  	in_subscription_id IN NUMBER,
10:28:41 293  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 294  );
10:28:41 295  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
10:28:41 296  /*
10:28:41 297  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 298  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 299  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:41 300  */
10:28:41 301  --  in_invoice_id        IN INVOICE.ID%TYPE,
10:28:41 302  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
10:28:41 303  -- norlov: in_refundable	      IN refund enabled
10:28:41 304  	in_invoice_id	     IN NUMBER,
10:28:41 305  	in_updated_by	     IN VARCHAR2,
10:28:41 306  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE
10:28:41 307  --  in_cancellation_date IN DATE DEFAULT current_timestamp
10:28:41 308  );
10:28:41 309  
10:28:41 310  PROCEDURE FINALIZE_CANCELATION (
10:28:41 311  /*
10:28:41 312  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 313  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 314  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:41 315  */
10:28:41 316  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
10:28:41 317  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
10:28:41 318  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
10:28:41 319  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:28:41 320  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:28:41 321  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
10:28:41 322  	in_subscription_id    IN NUMBER,
10:28:41 323  	in_cancelation_reason IN VARCHAR2,
10:28:41 324  	in_cancelation_date   IN DATE,
10:28:41 325  	in_note 	      IN VARCHAR2,
10:28:41 326  	in_agent_id	      IN NUMBER,
10:28:41 327  	in_updated_by	      IN VARCHAR2
10:28:41 328  );
10:28:41 329  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
10:28:41 330  /*
10:28:41 331  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 332  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 333  */
10:28:41 334  	in_subscription_id IN NUMBER,
10:28:41 335  	out_result_set	   OUT SYS_REFCURSOR
10:28:41 336  );
10:28:41 337  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:28:41 338  /*
10:28:41 339  Throws exceptions (codes):
10:28:41 340  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 341  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 342  */
10:28:41 343  	in_offer_chain_id IN NUMBER,
10:28:41 344  	in_meta_data_name IN VARCHAR2,
10:28:41 345  	out_result_set	  OUT SYS_REFCURSOR
10:28:41 346  );
10:28:41 347  
10:28:41 348  PROCEDURE READ_ACCOUNT (
10:28:41 349  	in_account_id  IN ACCOUNT.ID%TYPE,
10:28:41 350  	out_result_set OUT SYS_REFCURSOR
10:28:41 351  );
10:28:41 352  
10:28:41 353  PROCEDURE GET_COLLECTED_CHARGES (
10:28:41 354  /*
10:28:41 355  Throws exceptions:
10:28:41 356  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 357  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 358  */
10:28:41 359  	in_invoice_id  IN NUMBER,
10:28:41 360  	out_result_set OUT SYS_REFCURSOR
10:28:41 361  );
10:28:41 362  
10:28:41 363  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
10:28:41 364  /*
10:28:41 365  Throws exceptions:
10:28:41 366  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:41 367  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 368  */
10:28:41 369  	in_invoice_id IN NUMBER,
10:28:41 370  	out_group_ids OUT SYS_REFCURSOR
10:28:41 371  );
10:28:41 372  
10:28:41 373  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:28:41 374  /*
10:28:41 375  Throws exceptions:
10:28:41 376  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:41 377  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 378  */
10:28:41 379  	in_group_id IN NUMBER,
10:28:41 380  	out_account_id	OUT NUMBER
10:28:41 381  );
10:28:41 382  
10:28:41 383  PROCEDURE LOCK_ACCOUNT (
10:28:41 384  	in_group_id    IN NUMBER,
10:28:41 385  	in_lock_key    IN VARCHAR2,
10:28:41 386  	in_seconds_num IN NUMBER,
10:28:41 387  	in_created_by  IN VARCHAR2,
10:28:41 388  	in_reason      IN VARCHAR2
10:28:41 389  );
10:28:41 390  
10:28:41 391  PROCEDURE RELEASE_LOCK (
10:28:41 392  	in_group_id IN NUMBER,
10:28:41 393  	in_lock_key IN VARCHAR2
10:28:41 394  );
10:28:41 395  
10:28:41 396  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
10:28:41 397  	in_invoice_id		    IN NUMBER,
10:28:41 398  	out_order_id		    OUT VARCHAR2,
10:28:41 399  	out_external_transaction_id OUT VARCHAR2
10:28:41 400  );
10:28:41 401  
10:28:41 402  PROCEDURE GET_PAYPAL_BY_ID (
10:28:41 403  	in_paypal_id   IN  NUMBER,
10:28:41 404  	out_result_set OUT SYS_REFCURSOR
10:28:41 405  );
10:28:41 406  
10:28:41 407  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
10:28:41 408  /*
10:28:41 409  Throws exceptions:
10:28:41 410  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41 411  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41 412  */
10:28:41 413  	in_charge_id   in  number,
10:28:41 414  	out_attempt_count out number
10:28:41 415  );
10:28:41 416  
10:28:41 417  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:28:41 418  	in_offer_chain_id	 IN NUMBER,
10:28:41 419  	in_action_name		 IN VARCHAR2,
10:28:41 420  	out_notification_type_id out number
10:28:41 421  );
10:28:41 422  
10:28:41 423  PROCEDURE SHOULD_MOVE_TO_GRACE(
10:28:41 424  	in_invoice_id  IN INVOICE.ID%TYPE,
10:28:41 425  	out_result     OUT NUMBER
10:28:41 426  );
10:28:41 427  
10:28:41 428  PROCEDURE MOVE_TO_GRACE(
10:28:41 429  	in_invoice_id		      IN INVOICE.ID%TYPE,
10:28:41 430  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
10:28:41 431  	in_grace_period_length_hours  IN NUMBER
10:28:41 432  );
10:28:41 433  
10:28:41 434  PROCEDURE MOVE_OUT_OF_GRACE(
10:28:41 435  	in_invoice_id	IN INVOICE.ID%TYPE,
10:28:41 436  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
10:28:41 437  );
10:28:41 438  
10:28:41 439  END PUBLIC_PROCS_BILLING_V24;
10:28:41 440  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.14
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for public_procs_client.sql
Compiling header for public_procs_client.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PUBLIC_PROCS_CLIENT
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_CLIENT_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
10:28:41   4  /*
10:28:41   5  Throws exceptions:
10:28:41   6  CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41   7  CORE_OWNER.APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41   8  */
10:28:41   9  	in_notification_type_name IN VARCHAR2,
10:28:41  10  	out_notification_type_id  OUT NUMBER
10:28:41  11  );
10:28:41  12  
10:28:41  13  PROCEDURE ADD_NOTIFICATION (
10:28:41  14  /*
10:28:41  15  Throws exceptions:
10:28:41  16  CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:41  17  CORE_OWNER.APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:41  18  */
10:28:41  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:28:41  20  	in_recipient_group_id	 IN NUMBER,
10:28:41  21  	in_notification_type_id  IN NUMBER,
10:28:41  22  	in_date_to_notify	 IN DATE,
10:28:41  23  	in_email_template_params IN CLOB
10:28:41  24  );
10:28:41  25  
10:28:41  26  END PUBLIC_PROCS_CLIENT_V24;
10:28:41  27  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.03
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for public_procs_notification.sql
Compiling header for public_procs_notification.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE LOCK_ACCOUNT (
10:28:41   4  	in_group_id    IN NUMBER,
10:28:41   5  	in_lock_key    IN VARCHAR2,
10:28:41   6  	in_seconds_num IN NUMBER,
10:28:41   7  	in_created_by  IN VARCHAR2,
10:28:41   8  	in_reason      IN VARCHAR2
10:28:41   9  );
10:28:41  10  
10:28:41  11  PROCEDURE RELEASE_LOCK (
10:28:41  12  	in_group_id IN NUMBER,
10:28:41  13  	in_lock_key IN VARCHAR2
10:28:41  14  );
10:28:41  15  
10:28:41  16  END PUBLIC_PROCS_NOTIFICATION_V24;
10:28:41  17  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.01
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling header for public_procs_renewal.sql
Compiling header for public_procs_renewal.sql
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
10:28:41 SQL> --------------------------------------------------------------------------------
10:28:41 SQL> 
10:28:41 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
10:28:41   4  	out_result_set OUT SYS_REFCURSOR
10:28:41   5  );
10:28:41   6  
10:28:41   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
10:28:41   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
10:28:41   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
10:28:41  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:41  11  );
10:28:41  12  
10:28:41  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:28:41  14  	  in_offer_chain_id IN	 NUMBER,
10:28:41  15  	  out_result_set    OUT  SYS_REFCURSOR
10:28:41  16  );
10:28:41  17  
10:28:41  18  PROCEDURE GET_UNREDEEMED_GCS (
10:28:41  19  	out_result_set		OUT SYS_REFCURSOR,
10:28:41  20  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:28:41  21  	in_num_rows		IN NUMBER DEFAULT 10000,
10:28:41  22  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:41  23  );
10:28:41  24  
10:28:41  25  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
10:28:41  26  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
10:28:41  27  	out_result_set	     OUT SYS_REFCURSOR
10:28:41  28  );
10:28:41  29  
10:28:41  30  PROCEDURE GET_ALL_OCH_META_DATA (
10:28:41  31  	in_offer_chain_id IN NUMBER,
10:28:41  32  	out_result_set	  OUT SYS_REFCURSOR
10:28:41  33  );
10:28:41  34  
10:28:41  35  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:28:41  36  	in_offer_chain_id IN NUMBER,
10:28:41  37  	in_meta_data_name IN VARCHAR2,
10:28:41  38  	out_result_set	  OUT SYS_REFCURSOR
10:28:41  39  );
10:28:41  40  
10:28:41  41  PROCEDURE GET_ENDING_LICENSES (
10:28:41  42  	in_hours_number IN NUMBER,
10:28:41  43  	out_result_set OUT SYS_REFCURSOR
10:28:41  44  );
10:28:41  45  
10:28:41  46  PROCEDURE GET_ENDING_LICENSES_CC (
10:28:41  47  	in_hours_number IN NUMBER,
10:28:41  48  	out_result_set OUT SYS_REFCURSOR,
10:28:41  49  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:41  50  );
10:28:41  51  
10:28:41  52  PROCEDURE GET_RECURRING_OFFER (
10:28:41  53  	in_license_id  IN NUMBER,
10:28:41  54  	out_result_set OUT SYS_REFCURSOR
10:28:41  55  );
10:28:41  56  
10:28:41  57  PROCEDURE GET_NEXT_OFFER (
10:28:41  58  	in_license_id  IN NUMBER,
10:28:41  59  	out_result_set OUT SYS_REFCURSOR
10:28:41  60  );
10:28:41  61  
10:28:41  62  PROCEDURE UPDATE_LICENSE_STATUS(
10:28:41  63  	  in_license_id     IN NUMBER,
10:28:41  64  	  in_license_status IN NUMBER,
10:28:41  65  	  in_updated_by     IN VARCHAR2
10:28:41  66  );
10:28:41  67  
10:28:41  68  PROCEDURE UPDATE_INVOICE_STATUS (
10:28:41  69  	in_invoice_id		       IN NUMBER,
10:28:41  70  	in_invoice_status_id	       IN NUMBER,
10:28:41  71  	in_updated_by		       IN VARCHAR2
10:28:41  72  );
10:28:41  73  
10:28:41  74  PROCEDURE CREATE_LICENSE(
10:28:41  75  	in_status_id		    IN NUMBER,
10:28:41  76  	in_needs_entitlements	    IN NUMBER,
10:28:41  77  	in_start_date		    IN DATE,
10:28:41  78  	in_end_date		    IN DATE,
10:28:41  79  	in_offer_id		    IN NUMBER,
10:28:41  80  	in_subscription_id	    IN NUMBER,
10:28:41  81  	in_invoice_id		    IN NUMBER,
10:28:41  82  	in_created_by		    IN VARCHAR2,
10:28:41  83  	in_is_extension 	    IN NUMBER,
10:28:41  84  	in_current_offer_index	    IN NUMBER,
10:28:41  85  	in_current_offer_recurr_num IN NUMBER,
10:28:41  86  	out_license_id		    OUT NUMBER
10:28:41  87  );
10:28:41  88  
10:28:41  89  PROCEDURE CREATE_INVOICE(
10:28:41  90  	  in_invoice_status IN NUMBER,
10:28:41  91  	  in_created_by     IN VARCHAR2,
10:28:41  92  	  in_tax_exempt_id  IN VARCHAR2,
10:28:41  93  	  out_invoice_id    OUT NUMBER
10:28:41  94  );
10:28:41  95  
10:28:41  96  PROCEDURE CREATE_CHARGE(
10:28:41  97  	in_invoice_id	      IN NUMBER,
10:28:41  98  	in_transaction_id     IN NUMBER,
10:28:41  99  	in_instrument_type_id IN NUMBER,
10:28:41 100  	in_instrument_id      IN NUMBER,
10:28:41 101  	in_charge_amount      IN NUMBER,
10:28:41 102  	in_created_by	      IN VARCHAR2,
10:28:41 103  	in_charge_status_id   IN NUMBER,
10:28:41 104  	out_charge_id	      OUT NUMBER
10:28:41 105  );
10:28:41 106  
10:28:41 107  PROCEDURE HAS_FUTURE_LICENSE (
10:28:41 108  	in_license_id IN NUMBER,
10:28:41 109  	out_result	   OUT NUMBER
10:28:41 110  );
10:28:41 111  
10:28:41 112  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
10:28:41 113  	in_license_id IN NUMBER,
10:28:41 114  	out_group_id  OUT NUMBER
10:28:41 115  );
10:28:41 116  
10:28:41 117  PROCEDURE GET_OFFER_PRODUCTS (
10:28:41 118  	in_offer_id    IN NUMBER,
10:28:41 119  	out_result_set OUT SYS_REFCURSOR
10:28:41 120  );
10:28:41 121  
10:28:41 122  PROCEDURE CREATE_TRANSACTION (
10:28:41 123  	in_transaction_id	  IN NUMBER,
10:28:41 124  	in_status_id		  IN NUMBER,
10:28:41 125  	in_amount		  IN NUMBER,
10:28:41 126  	in_created_by		  IN VARCHAR2,
10:28:41 127  	in_order_id		  IN VARCHAR2,
10:28:41 128  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
10:28:41 129  	out_transaction_id	  OUT NUMBER
10:28:41 130  );
10:28:41 131  
10:28:41 132  PROCEDURE ADD_LINE_ITEMS(
10:28:41 133  	in_invoice_id IN NUMBER,
10:28:41 134  	in_offer_id   IN NUMBER,
10:28:41 135  	in_created_by IN VARCHAR2
10:28:41 136  );
10:28:41 137  
10:28:41 138  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:28:41 139  	in_invoice_id IN  NUMBER,
10:28:41 140  	out_amount    OUT NUMBER
10:28:41 141  );
10:28:41 142  
10:28:41 143  PROCEDURE RESERVE_TRANSACTION_ID (
10:28:41 144  	out_transaction_id OUT NUMBER
10:28:41 145  );
10:28:41 146  
10:28:41 147  PROCEDURE P_GET_NEXT_OFFER_INDEX (
10:28:41 148  	in_offer_chain_id	     IN NUMBER,
10:28:41 149  	in_offer_chain_current_index IN NUMBER,
10:28:41 150  	out_next_offer_index	     OUT NUMBER
10:28:41 151  );
10:28:41 152  
10:28:41 153  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
10:28:41 154  	in_license_id		     IN NUMBER,
10:28:41 155  	in_offer_chain_current_index IN NUMBER,
10:28:41 156  	out_next_offer_index	     OUT NUMBER
10:28:41 157  );
10:28:41 158  
10:28:41 159  PROCEDURE GET_SUBSCRIPTION_INFO (
10:28:41 160  	  in_subscription_id IN  NUMBER,
10:28:41 161  	  out_result_set      OUT SYS_REFCURSOR
10:28:41 162  );
10:28:41 163  
10:28:41 164  PROCEDURE CLOSE_SUBSCRIPTION (
10:28:41 165  	in_subscription_id IN NUMBER,
10:28:41 166  	in_updated_by	   IN VARCHAR2
10:28:41 167  );
10:28:41 168  
10:28:41 169  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
10:28:41 170  	out_result_set OUT SYS_REFCURSOR
10:28:41 171  );
10:28:41 172  
10:28:41 173  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
10:28:41 174  	in_license_id	      IN NUMBER,
10:28:41 175  	in_needs_entitlements IN NUMBER,
10:28:41 176  	in_updated_by	      IN VARCHAR2
10:28:41 177  );
10:28:41 178  
10:28:41 179  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
10:28:41 180  	in_offer_id    IN NUMBER,
10:28:41 181  	out_result_set OUT SYS_REFCURSOR
10:28:41 182  );
10:28:41 183  
10:28:41 184  PROCEDURE LOCK_ACCOUNT (
10:28:41 185  	in_group_id    IN NUMBER,
10:28:41 186  	in_lock_key    IN VARCHAR2,
10:28:41 187  	in_seconds_num IN NUMBER,
10:28:41 188  	in_created_by  IN VARCHAR2,
10:28:41 189  	in_reason      IN VARCHAR2
10:28:41 190  );
10:28:41 191  
10:28:41 192  PROCEDURE RELEASE_LOCK (
10:28:41 193  	in_group_id IN NUMBER,
10:28:41 194  	in_lock_key IN VARCHAR2
10:28:41 195  );
10:28:41 196  
10:28:41 197  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:28:41 198  	in_invoice_id  IN NUMBER,
10:28:41 199  	out_result_set OUT SYS_REFCURSOR
10:28:41 200  );
10:28:41 201  
10:28:41 202  PROCEDURE ADD_TAX (
10:28:41 203  	in_tax_type_id		 IN NUMBER,
10:28:41 204  	in_calculated_amount	 IN NUMBER,
10:28:41 205  	in_created_by		 IN VARCHAR2,
10:28:41 206  	in_line_item_id 	 IN NUMBER,
10:28:41 207  	in_effective_rate	 IN VARCHAR2,
10:28:41 208  	in_taxable_amount	 IN NUMBER,
10:28:41 209  	in_tax_rule_id		 IN NUMBER,
10:28:41 210  	in_jurisdiction_level_id IN NUMBER,
10:28:41 211  	in_jurisdiction_name	 IN VARCHAR2,
10:28:41 212  	in_jurisdiction_id	 IN VARCHAR2,
10:28:41 213  	in_ext_tax_type 	 IN VARCHAR2,
10:28:41 214  	in_ext_result		 IN VARCHAR2,
10:28:41 215  	in_imposition_type	 IN VARCHAR2,
10:28:41 216  	in_imposition		 IN VARCHAR2
10:28:41 217  );
10:28:41 218  
10:28:41 219  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:28:41 220  	in_credit_card_id IN  NUMBER,
10:28:41 221  	out_result_set	  OUT SYS_REFCURSOR
10:28:41 222  );
10:28:41 223  
10:28:41 224  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
10:28:41 225  	in_line_item_id IN NUMBER,
10:28:41 226  	out_result_set	OUT SYS_REFCURSOR
10:28:41 227  );
10:28:41 228  
10:28:41 229  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:28:41 230  	in_group_id IN NUMBER,
10:28:41 231  	out_account_id	OUT NUMBER
10:28:41 232  );
10:28:41 233  
10:28:41 234  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
10:28:41 235  	in_line_item_id IN  NUMBER,
10:28:41 236  	out_result_set	OUT SYS_REFCURSOR
10:28:41 237  );
10:28:41 238  
10:28:41 239  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
10:28:41 240  	in_line_item_id    IN NUMBER,
10:28:41 241  	in_amount	   IN NUMBER,
10:28:41 242  	in_discount_amount IN NUMBER,
10:28:41 243  	in_taxes_amount    IN NUMBER
10:28:41 244  );
10:28:41 245  
10:28:41 246  PROCEDURE GET_PAYPAL_BY_ID (
10:28:41 247  	in_paypal_id   IN  NUMBER,
10:28:41 248  	out_result_set OUT SYS_REFCURSOR
10:28:41 249  );
10:28:41 250  
10:28:41 251  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:28:41 252  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:41 253  	out_result_set OUT SYS_REFCURSOR
10:28:41 254  );
10:28:41 255  
10:28:41 256  PROCEDURE GET_LICENSE_BY_ID (
10:28:41 257  	in_license_id  IN NUMBER,
10:28:41 258  	out_result_set OUT SYS_REFCURSOR
10:28:41 259  );
10:28:41 260  
10:28:41 261  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:28:41 262  	in_offer_chain_id	 IN NUMBER,
10:28:41 263  	in_action_name		 IN VARCHAR2,
10:28:41 264  	out_notification_type_id OUT NUMBER
10:28:41 265  );
10:28:41 266  
10:28:41 267  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
10:28:41 268  	in_offer_chain_id IN NUMBER,
10:28:41 269  	in_meta_data_name IN VARCHAR2,
10:28:41 270  	out_value	  OUT VARCHAR2
10:28:41 271  );
10:28:41 272  
10:28:41 273  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
10:28:41 274  	out_result_set	    OUT SYS_REFCURSOR
10:28:41 275  );
10:28:41 276  
10:28:41 277  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
10:28:41 278  	out_result_set	    OUT SYS_REFCURSOR
10:28:41 279  );
10:28:41 280  
10:28:41 281  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
10:28:41 282  	out_result_set	    OUT SYS_REFCURSOR
10:28:41 283  );
10:28:41 284  
10:28:41 285  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
10:28:41 286  	in_max_days_until_close IN NUMBER,
10:28:41 287  	in_num_subs_to_fetch	IN NUMBER,
10:28:41 288  	out_result_set		OUT SYS_REFCURSOR
10:28:41 289  );
10:28:41 290  
10:28:41 291  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
10:28:41 292  	in_days_before_close	 IN NUMBER,
10:28:41 293  	in_num_licenses_to_fetch IN NUMBER,
10:28:41 294  	out_result_set		 OUT SYS_REFCURSOR
10:28:41 295  );
10:28:41 296  
10:28:41 297  PROCEDURE GET_EXPIRING_PAYPAL (
10:28:41 298  	in_expire_window_days	IN NUMBER,
10:28:41 299  	in_creation_limit_days	IN NUMBER,
10:28:41 300  	in_retry_throttle_name	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
10:28:41 301  	out_result_set		OUT SYS_REFCURSOR
10:28:41 302  );
10:28:41 303  
10:28:41 304  END PUBLIC_PROCS_RENEWAL_V24;
10:28:41 305  .
10:28:41 SQL> /

Package created.

Elapsed: 00:00:00.10
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling body for procs_account_cru.sql
Compiling body for procs_account_cru.sql
10:28:41 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE CREATE_ACCOUNT (
10:28:41   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
10:28:41   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
10:28:41   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
10:28:41   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
10:28:41   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
10:28:41   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
10:28:41  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:28:41  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
10:28:41  12  ) AS
10:28:41  13  -- VARIABLES
10:28:41  14  var_new_account_id ACCOUNT.ID%TYPE;
10:28:41  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:41  16  var_date DATE := SYSDATE;
10:28:41  17  BEGIN
10:28:41  18  	SELECT
10:28:41  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
10:28:41  20  	FROM DUAL;
10:28:41  21  	INSERT INTO ACCOUNT (
10:28:41  22  	  ID,
10:28:41  23  	  ACCOUNT_STATUS_ID,
10:28:41  24  	  SUSPEND_DATE,
10:28:41  25  	  GROUP_ID,
10:28:41  26  	  CREATE_DATE,
10:28:41  27  	  CREATED_BY,
10:28:41  28  	  UPDATE_DATE,
10:28:41  29  	  UPDATED_BY,
10:28:41  30  	  SYSTEM_CATEGORY_ID,
10:28:41  31  	  INSTRUMENT_TYPE_ID,
10:28:41  32  	  INSTRUMENT_ID,
10:28:41  33  	  TAX_EXEMPT_ID
10:28:41  34  	) VALUES (
10:28:41  35  	  var_new_account_id,
10:28:41  36  	  in_account_status_id,
10:28:41  37  	  in_suspend_date,
10:28:41  38  	  in_group_id,
10:28:41  39  	  var_date,
10:28:41  40  	  in_created_by,
10:28:41  41  	  var_date,
10:28:41  42  	  in_created_by,
10:28:41  43  	  in_system_category_id,
10:28:41  44  	  in_instrument_type_id,
10:28:41  45  	  in_instrument_id,
10:28:41  46  	  NULL
10:28:41  47  	);
10:28:41  48  
10:28:41  49  	out_account_id := var_new_account_id;
10:28:41  50  END CREATE_ACCOUNT;
10:28:41  51  
10:28:41  52  /*************************************************************/
10:28:41  53  
10:28:41  54  PROCEDURE UPDATE_ACCOUNT (
10:28:41  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
10:28:41  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
10:28:41  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
10:28:41  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
10:28:41  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
10:28:41  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:28:41  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
10:28:41  62  ) AS
10:28:41  63  BEGIN
10:28:41  64  
10:28:41  65  	-- CREATE HISTORY
10:28:41  66  	PROCS_HISTORY_V24.CREATE_ACCOUNT_HISTORY(
10:28:41  67  	  in_account_id 	       => in_account_id,
10:28:41  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:41  69  	);
10:28:41  70  
10:28:41  71  	UPDATE ACCOUNT SET
10:28:41  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
10:28:41  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
10:28:41  74  	  UPDATED_BY	     = in_updated_by,
10:28:41  75  	  UPDATE_DATE	     = SYSDATE,
10:28:41  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
10:28:41  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
10:28:41  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
10:28:41  79  	WHERE
10:28:41  80  	  ACCOUNT.ID = in_account_id;
10:28:41  81  
10:28:41  82  END UPDATE_ACCOUNT;
10:28:41  83  
10:28:41  84  /*************************************************************/
10:28:41  85  
10:28:41  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
10:28:41  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
10:28:41  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
10:28:41  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
10:28:41  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
10:28:41  91  ) AS
10:28:41  92  BEGIN
10:28:41  93  
10:28:41  94  	-- CREATE HISTORY
10:28:41  95  	PROCS_HISTORY_V24.CREATE_ACCOUNT_HISTORY(
10:28:41  96  	  in_account_id 	       => in_account_id,
10:28:41  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:41  98  	);
10:28:41  99  
10:28:41 100  	UPDATE ACCOUNT SET
10:28:41 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
10:28:41 102  	  INSTRUMENT_ID      = in_instrument_id
10:28:41 103  	WHERE
10:28:41 104  	  ACCOUNT.ID = in_account_id;
10:28:41 105  
10:28:41 106  END;
10:28:41 107  
10:28:41 108  /*************************************************************/
10:28:41 109  
10:28:41 110  PROCEDURE READ_ACCOUNT (
10:28:41 111  	in_account_id  IN ACCOUNT.ID%TYPE,
10:28:41 112  	out_result_set OUT SYS_REFCURSOR
10:28:41 113  ) AS
10:28:41 114  BEGIN
10:28:41 115  	OPEN out_result_set FOR
10:28:41 116  	SELECT
10:28:41 117  	  ACCOUNT_STATUS_ID,
10:28:41 118  	  SUSPEND_DATE,
10:28:41 119  	  GROUP_ID
10:28:41 120  	FROM
10:28:41 121  	  ACCOUNT
10:28:41 122  	WHERE
10:28:41 123  	  ID = in_account_id;
10:28:41 124  END READ_ACCOUNT;
10:28:41 125  
10:28:41 126  /*************************************************************/
10:28:41 127  
10:28:41 128  PROCEDURE CREATE_ACCOUNT_NOTE (
10:28:41 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
10:28:41 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
10:28:41 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
10:28:41 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
10:28:41 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
10:28:41 134  ) AS
10:28:41 135  BEGIN
10:28:41 136  	IF inout_account_note_id IS NULL THEN
10:28:41 137  	  SELECT
10:28:41 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
10:28:41 139  	  FROM DUAL;
10:28:41 140  	END IF;
10:28:41 141  	INSERT INTO ACCOUNT_NOTE(
10:28:41 142  	  ID,
10:28:41 143  	  AGENT_ID,
10:28:41 144  	  ACCOUNT_ID,
10:28:41 145  	  NOTE,
10:28:41 146  	  CREATE_DATE,
10:28:41 147  	  CREATED_BY
10:28:41 148  	) VALUES (
10:28:41 149  	  inout_account_note_id,
10:28:41 150  	  in_agent_id,
10:28:41 151  	  in_account_id,
10:28:41 152  	  in_note,
10:28:41 153  	  SYSDATE,
10:28:41 154  	  in_created_by
10:28:41 155  	);
10:28:41 156  END CREATE_ACCOUNT_NOTE;
10:28:41 157  
10:28:41 158  END PROCS_ACCOUNT_CRU_V24;
10:28:41 159  .
10:28:41 SQL> /

Package body created.

Elapsed: 00:00:00.04
10:28:41 SQL> 
10:28:41 SQL> prompt Compiling body for procs_address_cru.sql
Compiling body for procs_address_cru.sql
10:28:41 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V24" AS
10:28:41   2  
10:28:41   3  PROCEDURE CREATE_ADDRESS(
10:28:41   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
10:28:41   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
10:28:41   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:28:41   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:28:41   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:28:41   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:28:41  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:41  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:28:41  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
10:28:41  13  ) AS
10:28:41  14  -- VARIABLES
10:28:41  15  var_address_id ADDRESS.ID%TYPE;
10:28:41  16  var_date DATE := SYSDATE;
10:28:41  17  BEGIN
10:28:41  18  	IF in_address_id IS NULL THEN
10:28:41  19  	  SELECT
10:28:41  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
10:28:41  21  	  FROM DUAL;
10:28:41  22  	ELSE
10:28:41  23  	  var_address_id := in_address_id;
10:28:41  24  	END IF;
10:28:41  25  	INSERT INTO
10:28:41  26  	  ADDRESS (
10:28:41  27  	    ID,
10:28:41  28  	    ADDRESS1,
10:28:41  29  	    ADDRESS2,
10:28:41  30  	    CITY,
10:28:41  31  	    STATE,
10:28:41  32  	    POSTAL_CODE,
10:28:41  33  	    COUNTRY,
10:28:41  34  	    CREATE_DATE,
10:28:41  35  	    CREATED_BY,
10:28:41  36  	    UPDATE_DATE,
10:28:41  37  	    UPDATED_BY
10:28:41  38  	  ) VALUES (
10:28:41  39  	    var_address_id,
10:28:41  40  	    in_address1,
10:28:41  41  	    in_address2,
10:28:41  42  	    in_city,
10:28:41  43  	    in_state,
10:28:41  44  	    in_postal_code,
10:28:41  45  	    in_country,
10:28:41  46  	    var_date,
10:28:41  47  	    in_created_by,
10:28:41  48  	    var_date,
10:28:41  49  	    in_created_by
10:28:41  50  	  );
10:28:41  51  
10:28:41  52  	out_address_id := var_address_id;
10:28:42  53  END CREATE_ADDRESS;
10:28:42  54  
10:28:42  55  PROCEDURE UPDATE_ADDRESS(
10:28:42  56  	in_address_id	      IN ADDRESS.ID%TYPE,
10:28:42  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:28:42  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:28:42  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:28:42  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:28:42  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:42  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:28:42  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
10:28:42  64  ) AS
10:28:42  65  BEGIN
10:28:42  66  
10:28:42  67  	-- Create history
10:28:42  68  	PROCS_HISTORY_V24.CREATE_ADDRESS_HISTORY(
10:28:42  69  	  in_address_id 		=> in_address_id,
10:28:42  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42  71  	);
10:28:42  72  
10:28:42  73  	UPDATE
10:28:42  74  	  ADDRESS
10:28:42  75  	SET
10:28:42  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
10:28:42  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
10:28:42  78  	  CITY = NVL(in_city, CITY),
10:28:42  79  	  STATE = NVL(in_state, STATE),
10:28:42  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
10:28:42  81  	  COUNTRY = NVL(in_country, COUNTRY),
10:28:42  82  	  UPDATE_DATE = SYSDATE,
10:28:42  83  	  UPDATED_BY = in_updated_by
10:28:42  84  	WHERE
10:28:42  85  	  ID = in_address_id;
10:28:42  86  
10:28:42  87  END UPDATE_ADDRESS;
10:28:42  88  
10:28:42  89  END PROCS_ADDRESS_CRU_V24;
10:28:42  90  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_amazon_cru.sql
Compiling body for procs_amazon_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE UPDATE_AMAZON_APPSTORE_RECEIPT(
10:28:42   4  	in_id		   IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:42   5  	in_updated_by	   IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE,
10:28:42   6  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE DEFAULT NULL,
10:28:42   7  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE DEFAULT NULL,
10:28:42   8  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE DEFAULT NULL,
10:28:42   9  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE DEFAULT NULL,
10:28:42  10  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:28:42  11  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE DEFAULT NULL,
10:28:42  12  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE DEFAULT NULL,
10:28:42  13  	in_last_check_date IN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE DEFAULT NULL
10:28:42  14  ) AS
10:28:42  15  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AMAZON_APPSTORE_RECEIPT';
10:28:42  16  BEGIN
10:28:42  17  	CORE_OWNER.PROCS_HISTORY_V24.CREATE_AASR_HISTORY(
10:28:42  18  	    in_id => in_id,
10:28:42  19  	    in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE,
10:28:42  20  	    in_created_by => in_updated_by
10:28:42  21  	);
10:28:42  22  
10:28:42  23  	UPDATE AMAZON_APPSTORE_RECEIPT SET
10:28:42  24  	  SUBSCRIPTION_ID = NVL(in_subscription_id,SUBSCRIPTION_ID),
10:28:42  25  	  USER_ID	  = NVL(in_user_id,USER_ID),
10:28:42  26  	  ITEM_TYPE	  = NVL(in_item_type,ITEM_TYPE),
10:28:42  27  	  START_DATE	  = NVL(in_start_date,START_DATE),
10:28:42  28  	  END_DATE	  = NVL(in_end_date,END_DATE),
10:28:42  29  	  SKU		  = NVL(in_sku,SKU),
10:28:42  30  	  PURCHASE_TOKEN  = NVL(in_purchase_token,PURCHASE_TOKEN),
10:28:42  31  	  LAST_CHECK_DATE = NVL(in_last_check_date,LAST_CHECK_DATE),
10:28:42  32  	  UPDATE_DATE	  = SYSDATE,
10:28:42  33  	  UPDATED_BY	  = in_updated_by
10:28:42  34  	WHERE
10:28:42  35  	  ID = in_id;
10:28:42  36  END UPDATE_AMAZON_APPSTORE_RECEIPT;
10:28:42  37  
10:28:42  38  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
10:28:42  39  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:42  40  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:28:42  41  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
10:28:42  42  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
10:28:42  43  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:28:42  44  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:28:42  45  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:28:42  46  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
10:28:42  47  ) AS
10:28:42  48  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE_RECEIPT';
10:28:42  49  var_now	 DATE := SYSDATE;
10:28:42  50  BEGIN
10:28:42  51  	INSERT INTO CORE_OWNER.AMAZON_APPSTORE_RECEIPT (
10:28:42  52  	  ID,
10:28:42  53  	  SUBSCRIPTION_ID,
10:28:42  54  	  USER_ID,
10:28:42  55  	  ITEM_TYPE,
10:28:42  56  	  START_DATE,
10:28:42  57  	  END_DATE,
10:28:42  58  	  SKU,
10:28:42  59  	  PURCHASE_TOKEN,
10:28:42  60  	  CREATE_DATE,
10:28:42  61  	  CREATED_BY,
10:28:42  62  	  UPDATE_DATE,
10:28:42  63  	  UPDATED_BY
10:28:42  64  	) VALUES (
10:28:42  65  	  CORE_OWNER.AAS_RECEIPT_ID_SEQ.nextval,
10:28:42  66  	  in_subscription_id,
10:28:42  67  	  in_user_id,
10:28:42  68  	  in_item_type,
10:28:42  69  	  in_start_date,
10:28:42  70  	  in_end_date,
10:28:42  71  	  in_sku,
10:28:42  72  	  in_purchase_token,
10:28:42  73  	  var_now,
10:28:42  74  	  in_created_by,
10:28:42  75  	  var_now,
10:28:42  76  	  in_created_by
10:28:42  77  	);
10:28:42  78  END ADD_AMAZON_APPSTORE_RECEIPT;
10:28:42  79  
10:28:42  80  	PROCEDURE CREATE_AMAZON_SUB(
10:28:42  81  /*
10:28:42  82  Throws exceptions:
10:28:42  83  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42  84  */
10:28:42  85  	  out_id	      OUT NUMBER,
10:28:42  86  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
10:28:42  87  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
10:28:42  88  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
10:28:42  89  ) AS
10:28:42  90  -- VARIABLES
10:28:42  91  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
10:28:42  92  var_current_date	DATE;
10:28:42  93  var_count 	NUMBER;
10:28:42  94  AMAZON_SUB_USED	EXCEPTION;
10:28:42  95  BEGIN
10:28:42  96  
10:28:42  97  	SELECT COUNT(1) INTO var_count
10:28:42  98  	FROM SUBSCRIPTION s, AMAZON_SUB am
10:28:42  99  	WHERE
10:28:42 100  	  am.AMAZON_ID = in_amazon_id
10:28:42 101  	  and am.subscription_id = s.id
10:28:42 102  	  and s.subscription_status_id = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE;
10:28:42 103  
10:28:42 104  	if var_count > 0 then
10:28:42 105  	  raise AMAZON_SUB_USED;
10:28:42 106  	end if;
10:28:42 107  
10:28:42 108  	SELECT
10:28:42 109  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
10:28:42 110  	INTO
10:28:42 111  	  out_id
10:28:42 112  	FROM
10:28:42 113  	  dual
10:28:42 114  	;
10:28:42 115  
10:28:42 116  	SELECT
10:28:42 117  	  sysdate
10:28:42 118  	INTO
10:28:42 119  	  var_current_date
10:28:42 120  	FROM
10:28:42 121  	  dual
10:28:42 122  	;
10:28:42 123  
10:28:42 124  	INSERT INTO CORE_OWNER.AMAZON_SUB
10:28:42 125  	(
10:28:42 126  	  id,
10:28:42 127  	  subscription_id,
10:28:42 128  	  amazon_id,
10:28:42 129  	  create_date,
10:28:42 130  	  created_by,
10:28:42 131  	  update_date,
10:28:42 132  	  updated_by
10:28:42 133  	)
10:28:42 134  	VALUES
10:28:42 135  	(
10:28:42 136  	  out_id,
10:28:42 137  	  in_subscription_id,
10:28:42 138  	  in_amazon_id,
10:28:42 139  	  var_current_date,
10:28:42 140  	  in_created_by,
10:28:42 141  	  var_current_date,
10:28:42 142  	  in_created_by
10:28:42 143  	);
10:28:42 144  
10:28:42 145  EXCEPTION
10:28:42 146  WHEN AMAZON_SUB_USED THEN
10:28:42 147  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:42 148  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
10:28:42 149  WHEN DUP_VAL_ON_INDEX THEN
10:28:42 150  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:42 151  	  SPROC_NAME, 'Duplicate value', SQLERRM);
10:28:42 152  WHEN OTHERS THEN
10:28:42 153  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 155  END CREATE_AMAZON_SUB;
10:28:42 156  
10:28:42 157  END PROCS_AMAZON_CRU_V24;
10:28:42 158  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.05
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_charge_cru.sql
Compiling body for procs_charge_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_CHARGE(
10:28:42   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
10:28:42   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
10:28:42   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
10:28:42   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
10:28:42   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
10:28:42   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
10:28:42  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
10:28:42  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:28:42  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
10:28:42  13  ) AS
10:28:42  14  -- VARIABLES
10:28:42  15  var_charge_id CHARGE.ID%TYPE;
10:28:42  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:42  17  var_date DATE := SYSDATE;
10:28:42  18  BEGIN
10:28:42  19  	IF in_charge_id IS NULL THEN
10:28:42  20  	  SELECT
10:28:42  21  	    CRG_ID_SEQ.nextVal into var_charge_id
10:28:42  22  	  FROM DUAL;
10:28:42  23  	ELSE
10:28:42  24  	  var_charge_id := in_charge_id;
10:28:42  25  	END IF;
10:28:42  26  	INSERT INTO
10:28:42  27  	  CHARGE (
10:28:42  28  	    ID,
10:28:42  29  	    INVOICE_ID,
10:28:42  30  	    TRANSACTION_ID,
10:28:42  31  	    INSTRUMENT_TYPE_ID,
10:28:42  32  	    INSTRUMENT_ID,
10:28:42  33  	    CHARGE_AMOUNT,
10:28:42  34  	    CHARGE_STATUS_ID,
10:28:42  35  	    CREATE_DATE,
10:28:42  36  	    CREATED_BY,
10:28:42  37  	    UPDATE_DATE,
10:28:42  38  	    UPDATED_BY
10:28:42  39  	  ) VALUES (
10:28:42  40  	    var_charge_id,
10:28:42  41  	    in_invoice_id,
10:28:42  42  	    in_transaction_id,
10:28:42  43  	    in_instrument_type_id,
10:28:42  44  	    in_instrument_id,
10:28:42  45  	    in_charge_amount,
10:28:42  46  	    in_charge_status_id,
10:28:42  47  	    var_date,
10:28:42  48  	    in_created_by,
10:28:42  49  	    var_date,
10:28:42  50  	    in_created_by
10:28:42  51  	  );
10:28:42  52  
10:28:42  53  	  INSERT INTO CHARGE_STATUS_LOG
10:28:42  54  	  (
10:28:42  55  	      ID,
10:28:42  56  	      CHARGE_ID,
10:28:42  57  	      CHARGE_STATUS_ID,
10:28:42  58  	      CREATE_DATE,
10:28:42  59  	      CREATED_BY
10:28:42  60  	  )
10:28:42  61  	  VALUES
10:28:42  62  	  (
10:28:42  63  	      CHARGE_STATUS_LOG_ID_SEQ.nextval,
10:28:42  64  	      var_charge_id,
10:28:42  65  	      in_charge_status_id,
10:28:42  66  	      sysdate,
10:28:42  67  	      in_created_by
10:28:42  68  	  );
10:28:42  69  	out_charge_id := var_charge_id;
10:28:42  70  END CREATE_CHARGE;
10:28:42  71  
10:28:42  72  PROCEDURE UPDATE_CHARGE(
10:28:42  73  	in_charge_id	      IN CHARGE.ID%TYPE,
10:28:42  74  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:28:42  75  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
10:28:42  76  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
10:28:42  77  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
10:28:42  78  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
10:28:42  79  ) AS
10:28:42  80  BEGIN
10:28:42  81  
10:28:42  82  	-- Create history
10:28:42  83  	PROCS_HISTORY_V24.CREATE_CHARGE_HISTORY(
10:28:42  84  	  in_charge_id		       => in_charge_id,
10:28:42  85  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42  86  	);
10:28:42  87  
10:28:42  88  	INSERT INTO CHARGE_STATUS_LOG
10:28:42  89  	(
10:28:42  90  	  ID,
10:28:42  91  	  CHARGE_ID,
10:28:42  92  	  CHARGE_STATUS_ID,
10:28:42  93  	  CREATE_DATE,
10:28:42  94  	  CREATED_BY
10:28:42  95  	)
10:28:42  96  	VALUES
10:28:42  97  	(
10:28:42  98  	  CHARGE_STATUS_LOG_ID_SEQ.nextval,
10:28:42  99  	  in_charge_id,
10:28:42 100  	  in_charge_status_id,
10:28:42 101  	  sysdate,
10:28:42 102  	  in_updated_by
10:28:42 103  	);
10:28:42 104  
10:28:42 105  	UPDATE
10:28:42 106  	  CHARGE
10:28:42 107  	SET
10:28:42 108  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
10:28:42 109  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
10:28:42 110  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
10:28:42 111  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
10:28:42 112  	  UPDATE_DATE	     = SYSDATE,
10:28:42 113  	  UPDATED_BY	     = in_updated_by
10:28:42 114  	WHERE
10:28:42 115  	  ID = in_charge_id;
10:28:42 116  
10:28:42 117  END UPDATE_CHARGE;
10:28:42 118  
10:28:42 119  END PROCS_CHARGE_CRU_V24;
10:28:42 120  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_fin_instruments_cru.sql
Compiling body for procs_fin_instruments_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_CREDIT_CARD(
10:28:42   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
10:28:42   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
10:28:42   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
10:28:42   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
10:28:42   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
10:28:42   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
10:28:42  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
10:28:42  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
10:28:42  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
10:28:42  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
10:28:42  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
10:28:42  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:28:42  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
10:28:42  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
10:28:42  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
10:28:42  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
10:28:42  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
10:28:42  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
10:28:42  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
10:28:42  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
10:28:42  24  ) AS
10:28:42  25  -- VARIABLES
10:28:42  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
10:28:42  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:42  28  var_date DATE := SYSDATE;
10:28:42  29  BEGIN
10:28:42  30  	IF in_credit_card_id IS NULL THEN
10:28:42  31  	  SELECT
10:28:42  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
10:28:42  33  	  FROM DUAL;
10:28:42  34  	ELSE
10:28:42  35  	  var_credit_card_id := in_credit_card_id;
10:28:42  36  	END IF;
10:28:42  37  	INSERT INTO CREDIT_CARD(
10:28:42  38  	    ID,
10:28:42  39  	    ACCOUNT_ID,
10:28:42  40  	    INSTRUMENT_NAME,
10:28:42  41  	    PRIVATE_CARD_HOLDER_NAME,
10:28:42  42  	    PRIVATE_STREET_ADDRESS,
10:28:42  43  	    PRIVATE_STREET_ADDRESS2,
10:28:42  44  	    STATE,
10:28:42  45  	    CITY,
10:28:42  46  	    POSTAL_CODE,
10:28:42  47  	    COUNTRY,
10:28:42  48  	    LAST_FOUR_CC,
10:28:42  49  	    EXPIRATION_DATE,
10:28:42  50  	    CREDIT_CARD_TYPE_ID,
10:28:42  51  	    SECRET_TOKEN,
10:28:42  52  	    CHASE_PROFILE_ID,
10:28:42  53  	    CREATE_DATE,
10:28:42  54  	    CREATED_BY,
10:28:42  55  	    UPDATE_DATE,
10:28:42  56  	    UPDATED_BY,
10:28:42  57  	    CREDIT_CARD_STATUS_ID,
10:28:42  58  	    PRIVATE_FIRST_NAME,
10:28:42  59  	    PRIVATE_LAST_NAME
10:28:42  60  	  ) VALUES (
10:28:42  61  	    var_credit_card_id,
10:28:42  62  	    in_account_id,
10:28:42  63  	    in_instrument_name,
10:28:42  64  	    in_private_card_holder_name,
10:28:42  65  	    in_private_street_address,
10:28:42  66  	    in_private_street_address2,
10:28:42  67  	    in_state,
10:28:42  68  	    in_city,
10:28:42  69  	    in_postal_code,
10:28:42  70  	    in_country,
10:28:42  71  	    in_last_four_cc,
10:28:42  72  	    in_expiration_date,
10:28:42  73  	    in_credit_card_type_id,
10:28:42  74  	    in_secret_token,
10:28:42  75  	    in_chase_profile_id,
10:28:42  76  	    var_date,
10:28:42  77  	    in_created_by,
10:28:42  78  	    var_date,
10:28:42  79  	    in_created_by,
10:28:42  80  	    in_credit_card_status_id,
10:28:42  81  	    in_private_first_name,
10:28:42  82  	    in_private_last_name
10:28:42  83  	  );
10:28:42  84  
10:28:42  85  	out_credit_card_id := var_credit_card_id;
10:28:42  86  END CREATE_CREDIT_CARD;
10:28:42  87  
10:28:42  88  /******************************************************************************/
10:28:42  89  
10:28:42  90  PROCEDURE UPDATE_CREDIT_CARD(
10:28:42  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
10:28:42  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:28:42  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
10:28:42  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:28:42  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
10:28:42  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
10:28:42  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
10:28:42  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:42  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
10:28:42 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
10:28:42 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:28:42 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
10:28:42 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
10:28:42 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
10:28:42 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
10:28:42 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
10:28:42 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
10:28:42 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
10:28:42 109  ) AS
10:28:42 110  BEGIN
10:28:42 111  
10:28:42 112  	-- Create history
10:28:42 113  	PROCS_HISTORY_V24.CREATE_CREDIT_CARD_HISTORY(
10:28:42 114  	  in_credit_card_id	       => in_credit_card_id,
10:28:42 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42 116  	);
10:28:42 117  
10:28:42 118  	UPDATE CREDIT_CARD SET
10:28:42 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
10:28:42 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
10:28:42 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
10:28:42 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
10:28:42 123  	  STATE 		   = NVL(in_state, STATE),
10:28:42 124  	  CITY			   = NVL(in_city, CITY),
10:28:42 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
10:28:42 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
10:28:42 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
10:28:42 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
10:28:42 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
10:28:42 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
10:28:42 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
10:28:42 132  	  UPDATE_DATE		   = SYSDATE,
10:28:42 133  	  UPDATED_BY		   = in_updated_by,
10:28:42 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
10:28:42 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
10:28:42 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
10:28:42 137  	WHERE
10:28:42 138  	  ID = in_credit_card_id;
10:28:42 139  
10:28:42 140  END UPDATE_CREDIT_CARD;
10:28:42 141  
10:28:42 142  /******************************************************************************/
10:28:42 143  
10:28:42 144  PROCEDURE CREATE_PAYPAL(
10:28:42 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
10:28:42 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
10:28:42 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
10:28:42 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:28:42 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
10:28:42 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
10:28:42 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
10:28:42 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
10:28:42 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
10:28:42 154  	in_state			IN PAYPAL.STATE%TYPE,
10:28:42 155  	in_city 			IN PAYPAL.CITY%TYPE,
10:28:42 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
10:28:42 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
10:28:42 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
10:28:42 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
10:28:42 160  ) AS
10:28:42 161  -- VARIABLES
10:28:42 162  var_paypal_id PAYPAL.ID%TYPE;
10:28:42 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:42 164  var_date DATE := SYSDATE;
10:28:42 165  BEGIN
10:28:42 166  	IF in_paypal_id IS NULL THEN
10:28:42 167  	  SELECT
10:28:42 168  	    PP_ID_SEQ.nextVal into var_paypal_id
10:28:42 169  	  FROM DUAL;
10:28:42 170  	ELSE
10:28:42 171  	  var_paypal_id := in_paypal_id;
10:28:42 172  	END IF;
10:28:42 173  	INSERT INTO PAYPAL(
10:28:42 174  	    ID,
10:28:42 175  	    ACCOUNT_ID,
10:28:42 176  	    INSTRUMENT_NAME,
10:28:42 177  	    PRIVATE_EMAIL_ADDRESS,
10:28:42 178  	    CREATE_DATE,
10:28:42 179  	    CREATED_BY,
10:28:42 180  	    UPDATE_DATE,
10:28:42 181  	    UPDATED_BY,
10:28:42 182  	    PAYPAL_STATUS_ID,
10:28:42 183  	    PRIVATE_STREET_ADDRESS,
10:28:42 184  	    PRIVATE_STREET_ADDRESS2,
10:28:42 185  	    STATE,
10:28:42 186  	    CITY,
10:28:42 187  	    POSTAL_CODE,
10:28:42 188  	    COUNTRY,
10:28:42 189  	    EXPIRATION_DATE,
10:28:42 190  	    SECRET_TOKEN
10:28:42 191  	  ) VALUES (
10:28:42 192  	    var_paypal_id,
10:28:42 193  	    in_account_id,
10:28:42 194  	    in_instrument_name,
10:28:42 195  	    in_private_email_address,
10:28:42 196  	    var_date,
10:28:42 197  	    in_created_by,
10:28:42 198  	    var_date,
10:28:42 199  	    in_created_by,
10:28:42 200  	    in_paypal_status_id,
10:28:42 201  	    in_paypal_prvt_street_address,
10:28:42 202  	    in_paypal_prvt_street_address2,
10:28:42 203  	    in_state,
10:28:42 204  	    in_city,
10:28:42 205  	    in_postal_code,
10:28:42 206  	    in_country,
10:28:42 207  	    in_expiration_date,
10:28:42 208  	    in_secret_token
10:28:42 209  	  );
10:28:42 210  	out_paypal_id := var_paypal_id;
10:28:42 211  END CREATE_PAYPAL;
10:28:42 212  
10:28:42 213  /******************************************************************************/
10:28:42 214  
10:28:42 215  PROCEDURE UPDATE_PAYPAL(
10:28:42 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
10:28:42 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:28:42 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
10:28:42 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
10:28:42 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
10:28:42 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:28:42 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:28:42 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
10:28:42 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
10:28:42 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:42 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
10:28:42 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:28:42 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
10:28:42 229  ) AS
10:28:42 230  BEGIN
10:28:42 231  	-- Create history
10:28:42 232  	PROCS_HISTORY_V24.CREATE_PAYPAL_HISTORY(
10:28:42 233  	  in_paypal_id		       => in_paypal_id,
10:28:42 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42 235  	);
10:28:42 236  
10:28:42 237  	UPDATE PAYPAL SET
10:28:42 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
10:28:42 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
10:28:42 240  	  UPDATE_DATE	   = SYSDATE,
10:28:42 241  	  UPDATED_BY	   = in_updated_by,
10:28:42 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
10:28:42 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
10:28:42 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
10:28:42 245  	  STATE 		  = NVL(in_state, STATE),
10:28:42 246  	  CITY			  = NVL(in_city, CITY),
10:28:42 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
10:28:42 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
10:28:42 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
10:28:42 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
10:28:42 251  	WHERE
10:28:42 252  	  ID = in_paypal_id;
10:28:42 253  END UPDATE_PAYPAL;
10:28:42 254  
10:28:42 255  /******************************************************************************/
10:28:42 256  
10:28:42 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
10:28:42 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
10:28:42 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
10:28:42 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
10:28:42 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:42 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
10:28:42 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:28:42 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
10:28:42 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
10:28:42 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
10:28:42 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
10:28:42 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
10:28:42 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
10:28:42 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
10:28:42 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
10:28:42 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
10:28:42 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
10:28:42 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
10:28:42 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
10:28:42 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
10:28:42 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
10:28:42 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL,
10:28:42 279  	in_campaign		      IN GC_CAMPAIGN_AND_REF.CAMPAIGN%TYPE DEFAULT NULL,
10:28:42 280  	in_reference_code	      IN GC_CAMPAIGN_AND_REF.REFERENCE_CODE%TYPE DEFAULT NULL
10:28:42 281  ) AS
10:28:42 282  -- VARIABLES
10:28:42 283  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
10:28:42 284  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:42 285  var_date DATE := SYSDATE;
10:28:42 286  BEGIN
10:28:42 287  	IF in_gift_certificate_id IS NULL THEN
10:28:42 288  	  SELECT
10:28:42 289  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
10:28:42 290  	  FROM DUAL;
10:28:42 291  	ELSE
10:28:42 292  	  var_gift_certificate_id := in_gift_certificate_id;
10:28:42 293  	END IF;
10:28:42 294  
10:28:42 295  	INSERT INTO GIFT_CERTIFICATE (
10:28:42 296  	    ID,
10:28:42 297  	    PURCHASER_GROUP_ID,
10:28:42 298  	    PURCHASE_INVOICE_ID,
10:28:42 299  	    OFFER_CHAIN_ID,
10:28:42 300  	    EXPIRATION_DATE,
10:28:42 301  	    PURCHASE_DATE,
10:28:42 302  	    GIFT_CERTIFICATE_STATUS_ID,
10:28:42 303  	    CODE,
10:28:42 304  	    CREATE_DATE,
10:28:42 305  	    CREATED_BY,
10:28:42 306  	    UPDATE_DATE,
10:28:42 307  	    UPDATED_BY,
10:28:42 308  	    RECIPIENT_NAME,
10:28:42 309  	    GIFT_MESSAGE,
10:28:42 310  	    RECIPIENT_EMAIL,
10:28:42 311  	    FINALIZED_INVOICE_ID,
10:28:42 312  	    SENDER_EMAIL,
10:28:42 313  	    SENDER_NAME,
10:28:42 314  	    REDEMPTION_DATE,
10:28:42 315  	    CANCELATION_DATE,
10:28:42 316  	    REDEEMER_GROUP_ID,
10:28:42 317  	    RECIPIENT_ADDRESS_ID,
10:28:42 318  	    RECIPIENT_NOTIFY_DATE
10:28:42 319  	  ) VALUES(
10:28:42 320  	    var_gift_certificate_id,
10:28:42 321  	    in_purchaser_group_id,
10:28:42 322  	    in_purchaser_invoice_id,
10:28:42 323  	    in_offer_chain_id,
10:28:42 324  	    in_expiration_date,
10:28:42 325  	    in_purchase_date,
10:28:42 326  	    in_gift_certificate_status_id,
10:28:42 327  	    in_code,
10:28:42 328  	    var_date,
10:28:42 329  	    in_created_by,
10:28:42 330  	    var_date,
10:28:42 331  	    in_created_by,
10:28:42 332  	    in_recipient_name,
10:28:42 333  	    in_gift_message,
10:28:42 334  	    in_recipient_email,
10:28:42 335  	    in_finalized_invoice_id,
10:28:42 336  	    in_sender_email,
10:28:42 337  	    in_sender_name,
10:28:42 338  	    in_redemption_date,
10:28:42 339  	    in_cancelation_date,
10:28:42 340  	    in_redeemer_group_id,
10:28:42 341  	    in_recipient_address_id,
10:28:42 342  	    in_recipient_notify_date
10:28:42 343  	  );
10:28:42 344  
10:28:42 345  	  IF in_campaign IS NOT NULL THEN
10:28:42 346  	    INSERT INTO GC_CAMPAIGN_AND_REF(GC_ID, CAMPAIGN, REFERENCE_CODE)
10:28:42 347  	      VALUES(var_gift_certificate_id, in_campaign, in_reference_code);
10:28:42 348  	  END IF;
10:28:42 349  
10:28:42 350  	out_gift_certificate_id := var_gift_certificate_id;
10:28:42 351  END CREATE_GIFT_CERTIFICATE;
10:28:42 352  
10:28:42 353  /******************************************************************************/
10:28:42 354  
10:28:42 355  PROCEDURE UPDATE_GIFT_CERTIFICATE(
10:28:42 356  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
10:28:42 357  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:28:42 358  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
10:28:42 359  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
10:28:42 360  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
10:28:42 361  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
10:28:42 362  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
10:28:42 363  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
10:28:42 364  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
10:28:42 365  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
10:28:42 366  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
10:28:42 367  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
10:28:42 368  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
10:28:42 369  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
10:28:42 370  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
10:28:42 371  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
10:28:42 372  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
10:28:42 373  ) AS
10:28:42 374  BEGIN
10:28:42 375  
10:28:42 376  	-- Create history
10:28:42 377  	PROCS_HISTORY_V24.CREATE_GIFT_CERT_HISTORY(
10:28:42 378  	  in_gift_certificate_id       => in_gift_certificate_id,
10:28:42 379  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42 380  	);
10:28:42 381  
10:28:42 382  	UPDATE GIFT_CERTIFICATE SET
10:28:42 383  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
10:28:42 384  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
10:28:42 385  	  CODE			     = NVL(in_code, CODE),
10:28:42 386  	  UPDATE_DATE		     = SYSDATE,
10:28:42 387  	  UPDATED_BY		     = in_updated_by,
10:28:42 388  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
10:28:42 389  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
10:28:42 390  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
10:28:42 391  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
10:28:42 392  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
10:28:42 393  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
10:28:42 394  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
10:28:42 395  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
10:28:42 396  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
10:28:42 397  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
10:28:42 398  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
10:28:42 399  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
10:28:42 400  	WHERE
10:28:42 401  	  ID = in_gift_certificate_id;
10:28:42 402  
10:28:42 403  END UPDATE_GIFT_CERTIFICATE;
10:28:42 404  
10:28:42 405  END PROCS_FIN_INSTRUMENTS_CRU_V24;
10:28:42 406  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.09
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_group_account_cru.sql
Compiling body for procs_group_account_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
10:28:42   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
10:28:42   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
10:28:42   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
10:28:42   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
10:28:42   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
10:28:42   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
10:28:42  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
10:28:42  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:42  12  ) AS
10:28:42  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
10:28:42  14  BEGIN
10:28:42  15  	UPDATE SUBSCRIPTION_SHARE SET
10:28:42  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
10:28:42  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
10:28:42  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
10:28:42  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
10:28:42  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
10:28:42  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
10:28:42  22  	  UPDATED_BY	       = in_updated_by,
10:28:42  23  	  UPDATE_DATE	       = SYSDATE
10:28:42  24  	WHERE
10:28:42  25  	  SUBSCRIPTION_SHARE.ID = in_id;
10:28:42  26  EXCEPTION
10:28:42  27  	WHEN OTHERS THEN
10:28:42  28  	  Procs_Common_V24.Throw_Exception(APP_EXCEPTION_CODES_V24.Internal_Error,
10:28:42  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
10:28:42  30  END UPDATE_SUBSCRIPTION_SHARE;
10:28:42  31  
10:28:42  32  PROCEDURE CREATE_GROUP_ACCOUNT (
10:28:42  33  	in_subscription_id	 IN NUMBER,
10:28:42  34  	in_group_name		 IN VARCHAR2,
10:28:42  35  	in_first_name		 IN VARCHAR2,
10:28:42  36  	in_last_name		 IN VARCHAR2,
10:28:42  37  	in_email		 IN VARCHAR2,
10:28:42  38  	in_phone		 IN VARCHAR2,
10:28:42  39  	in_organization_type	 IN VARCHAR2,
10:28:42  40  	in_seats		 IN NUMBER,
10:28:42  41  	in_seat_ttl_in_hours	 IN NUMBER,
10:28:42  42  	in_ip			 IN NUMBER,
10:28:42  43  	in_created_by		 IN VARCHAR2
10:28:42  44  ) AS
10:28:42  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
10:28:42  46  var_now DATE;
10:28:42  47  BEGIN
10:28:42  48  
10:28:42  49  	SELECT
10:28:42  50  	  SYSDATE INTO var_now
10:28:42  51  	FROM dual;
10:28:42  52  
10:28:42  53  	INSERT INTO GROUP_ACCOUNT (
10:28:42  54  	  id,
10:28:42  55  	  subscription_id,
10:28:42  56  	  group_name,
10:28:42  57  	  first_name,
10:28:42  58  	  last_name,
10:28:42  59  	  email,
10:28:42  60  	  phone,
10:28:42  61  	  organization_type,
10:28:42  62  	  seats,
10:28:42  63  	  seat_ttl_in_hours,
10:28:42  64  	  ip,
10:28:42  65  	  create_date,
10:28:42  66  	  created_by,
10:28:42  67  	  update_date,
10:28:42  68  	  updated_by
10:28:42  69  	) VALUES (
10:28:42  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
10:28:42  71  	  in_subscription_id,
10:28:42  72  	  in_group_name,
10:28:42  73  	  in_first_name,
10:28:42  74  	  in_last_name,
10:28:42  75  	  in_email,
10:28:42  76  	  in_phone,
10:28:42  77  	  in_organization_type,
10:28:42  78  	  in_seats,
10:28:42  79  	  in_seat_ttl_in_hours,
10:28:42  80  	  in_ip,
10:28:42  81  	  var_now,
10:28:42  82  	  in_created_by,
10:28:42  83  	  var_now,
10:28:42  84  	  in_created_by
10:28:42  85  	);
10:28:42  86  
10:28:42  87  EXCEPTION
10:28:42  88  	WHEN PROGRAM_ERROR THEN
10:28:42  89  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:42  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
10:28:42  91  	WHEN OTHERS THEN
10:28:42  92  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
10:28:42  94  END CREATE_GROUP_ACCOUNT;
10:28:42  95  
10:28:42  96  
10:28:42  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
10:28:42  98  	in_group_account_id    IN NUMBER,
10:28:42  99  	in_borrower_account_id IN NUMBER,
10:28:42 100  	in_ip_address	       IN VARCHAR2,
10:28:42 101  	in_email_domain        IN VARCHAR2,
10:28:42 102  	in_start_date	       IN DATE,
10:28:42 103  	in_end_date	       IN DATE,
10:28:42 104  	in_created_by	       IN VARCHAR2
10:28:42 105  ) AS
10:28:42 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
10:28:42 107  var_now DATE;
10:28:42 108  BEGIN
10:28:42 109  
10:28:42 110  	SELECT
10:28:42 111  	  SYSDATE INTO var_now
10:28:42 112  	FROM dual;
10:28:42 113  
10:28:42 114  	INSERT INTO SUBSCRIPTION_SHARE (
10:28:42 115  	  id,
10:28:42 116  	  group_account_id,
10:28:42 117  	  borrower_account_id,
10:28:42 118  	  ip_address,
10:28:42 119  	  email_domain,
10:28:42 120  	  start_date,
10:28:42 121  	  end_date,
10:28:42 122  	  create_date,
10:28:42 123  	  created_by,
10:28:42 124  	  update_date,
10:28:42 125  	  updated_by
10:28:42 126  	) VALUES (
10:28:42 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
10:28:42 128  	  in_group_account_id,
10:28:42 129  	  in_borrower_account_id,
10:28:42 130  	  in_ip_address,
10:28:42 131  	  in_email_domain,
10:28:42 132  	  in_start_date,
10:28:42 133  	  in_end_date,
10:28:42 134  	  var_now,
10:28:42 135  	  in_created_by,
10:28:42 136  	  var_now,
10:28:42 137  	  in_created_by
10:28:42 138  	);
10:28:42 139  
10:28:42 140  EXCEPTION
10:28:42 141  	WHEN PROGRAM_ERROR THEN
10:28:42 142  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:42 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
10:28:42 144  END CREATE_SUBSCRIPTION_SHARE;
10:28:42 145  
10:28:42 146  -- Eh, I don't like the cru packages at all
10:28:42 147  -- the idea of code reuse in PL/SQL is still lost on me
10:28:42 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
10:28:42 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:42 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:28:42 151  ) AS
10:28:42 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
10:28:42 153  BEGIN
10:28:42 154  	update
10:28:42 155  	  GROUP_ACCOUNT_IP_RANGE IR
10:28:42 156  	set
10:28:42 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V24.GROUP_ACC_IP_RNG_INACTIVE,
10:28:42 158  	  IR.UPDATED_BY = in_updated_by,
10:28:42 159  	  IR.UPDATE_DATE = sysdate
10:28:42 160  	where
10:28:42 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
10:28:42 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V24.GROUP_ACC_IP_RNG_ACTIVE
10:28:42 163  	;
10:28:42 164  EXCEPTION
10:28:42 165  WHEN OTHERS THEN
10:28:42 166  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 168  END DISABLE_IP_RANGES_BY_GA_ID;
10:28:42 169  
10:28:42 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
10:28:42 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
10:28:42 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:28:42 173  ) AS
10:28:42 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
10:28:42 175  BEGIN
10:28:42 176  	update
10:28:42 177  	  GROUP_ACCOUNT_IP_RANGE IR
10:28:42 178  	set
10:28:42 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V24.GROUP_ACC_IP_RNG_INACTIVE,
10:28:42 180  	  IR.UPDATED_BY = in_updated_by,
10:28:42 181  	  IR.UPDATE_DATE = sysdate
10:28:42 182  	where
10:28:42 183  	  IR.ID = in_id and
10:28:42 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V24.GROUP_ACC_IP_RNG_ACTIVE
10:28:42 185  	;
10:28:42 186  	if sql%rowcount = 0 then
10:28:42 187  	  raise NO_DATA_FOUND ;
10:28:42 188  	end if;
10:28:42 189  EXCEPTION
10:28:42 190  WHEN NO_DATA_FOUND THEN
10:28:42 191  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:42 192  	  SPROC_NAME, 'Missing or invalid group_account_ip_range_id '||in_id, SQLERRM);
10:28:42 193  WHEN OTHERS THEN
10:28:42 194  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 195  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
10:28:42 196  END DISABLE_IP_RANGE_BY_ID;
10:28:42 197  
10:28:42 198  PROCEDURE ADD_IP_RANGE (
10:28:42 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:42 200  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
10:28:42 201  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:28:42 202  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:28:42 203  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
10:28:42 204  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
10:28:42 205  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
10:28:42 206  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
10:28:42 207  ) AS
10:28:42 208  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
10:28:42 209  BEGIN
10:28:42 210  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
10:28:42 211  	    ID,
10:28:42 212  	    GROUP_ACCOUNT_ID,
10:28:42 213  	    MINIMUM_IP_STRING,
10:28:42 214  	    MINIMUM_IP_LOW,
10:28:42 215  	    MINIMUM_IP_HIGH,
10:28:42 216  	    MAXIMUM_IP_STRING,
10:28:42 217  	    MAXIMUM_IP_LOW,
10:28:42 218  	    MAXIMUM_IP_HIGH,
10:28:42 219  	    CREATED_BY,
10:28:42 220  	    CREATE_DATE,
10:28:42 221  	    UPDATED_BY,
10:28:42 222  	    UPDATE_DATE,
10:28:42 223  	    GROUP_ACC_IP_RNG_STATUS_ID
10:28:42 224  	  )
10:28:42 225  	  VALUES (
10:28:42 226  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
10:28:42 227  	    in_group_account_id,
10:28:42 228  	    in_minimum_ip_string,
10:28:42 229  	    in_minimum_ip_low,
10:28:42 230  	    in_minimum_ip_high,
10:28:42 231  	    in_maximum_ip_string,
10:28:42 232  	    in_maximum_ip_low,
10:28:42 233  	    in_maximum_ip_high,
10:28:42 234  	    in_created_by,
10:28:42 235  	    sysdate,
10:28:42 236  	    in_created_by,
10:28:42 237  	    sysdate,
10:28:42 238  	    GLOBAL_STATUSES_V24.GROUP_ACC_IP_RNG_ACTIVE
10:28:42 239  	  );
10:28:42 240  EXCEPTION
10:28:42 241  WHEN OTHERS THEN
10:28:42 242  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 243  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 244  END ADD_IP_RANGE;
10:28:42 245  
10:28:42 246  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
10:28:42 247  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:42 248  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:42 249  ) AS
10:28:42 250  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
10:28:42 251  BEGIN
10:28:42 252  	update
10:28:42 253  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
10:28:42 254  	set
10:28:42 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V24.GROUP_ACC_EMAIL_DOMAIN_INACT,
10:28:42 256  	  ED.UPDATED_BY = in_updated_by,
10:28:42 257  	  ED.UPDATE_DATE = sysdate
10:28:42 258  	where
10:28:42 259  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
10:28:42 260  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V24.GROUP_ACC_EMAIL_DOMAIN_ACT
10:28:42 261  	;
10:28:42 262  EXCEPTION
10:28:42 263  WHEN OTHERS THEN
10:28:42 264  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 265  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 266  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
10:28:42 267  
10:28:42 268  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
10:28:42 269  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:28:42 270  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:42 271  ) AS
10:28:42 272  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
10:28:42 273  BEGIN
10:28:42 274  	update
10:28:42 275  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
10:28:42 276  	set
10:28:42 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V24.GROUP_ACC_EMAIL_DOMAIN_INACT,
10:28:42 278  	  ED.UPDATED_BY = in_updated_by,
10:28:42 279  	  ED.UPDATE_DATE = sysdate
10:28:42 280  	where
10:28:42 281  	  ED.ID = in_id and
10:28:42 282  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V24.GROUP_ACC_EMAIL_DOMAIN_ACT
10:28:42 283  	;
10:28:42 284  EXCEPTION
10:28:42 285  WHEN OTHERS THEN
10:28:42 286  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 287  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
10:28:42 288  END DISABLE_EMAIL_DOMAIN_BY_ID;
10:28:42 289  
10:28:42 290  
10:28:42 291  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
10:28:42 292  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:28:42 293  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:42 294  ) AS
10:28:42 295  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
10:28:42 296  BEGIN
10:28:42 297  	update
10:28:42 298  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
10:28:42 299  	set
10:28:42 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V24.GROUP_ACC_EMAIL_DOMAIN_ACT,
10:28:42 301  	  ED.UPDATED_BY = in_updated_by,
10:28:42 302  	  ED.UPDATE_DATE = sysdate
10:28:42 303  	where
10:28:42 304  	  ED.ID = in_id and
10:28:42 305  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V24.GROUP_ACC_EMAIL_DOMAIN_INACT
10:28:42 306  	;
10:28:42 307  EXCEPTION
10:28:42 308  WHEN DUP_VAL_ON_INDEX THEN
10:28:42 309  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:42 310  		SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
10:28:42 311  WHEN OTHERS THEN
10:28:42 312  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 313  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
10:28:42 314  END ENABLE_EMAIL_DOMAIN_BY_ID;
10:28:42 315  
10:28:42 316  
10:28:42 317  PROCEDURE ADD_EMAIL_DOMAIN (
10:28:42 318  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:42 319  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:28:42 320  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
10:28:42 321  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
10:28:42 322  ) AS
10:28:42 323  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
10:28:42 324  BEGIN
10:28:42 325  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
10:28:42 326  	    ID,
10:28:42 327  	    GROUP_ACCOUNT_ID,
10:28:42 328  	    EMAIL_DOMAIN,
10:28:42 329  		IS_ACTIVE,
10:28:42 330  	    CREATED_BY,
10:28:42 331  	    CREATE_DATE,
10:28:42 332  	    UPDATED_BY,
10:28:42 333  	    UPDATE_DATE
10:28:42 334  	  )
10:28:42 335  	  VALUES (
10:28:42 336  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
10:28:42 337  	    in_group_account_id,
10:28:42 338  		in_email_domain,
10:28:42 339  		in_is_active,
10:28:42 340  		in_created_by,
10:28:42 341  	    sysdate,
10:28:42 342  	    in_created_by,
10:28:42 343  	    sysdate
10:28:42 344  	  );
10:28:42 345  EXCEPTION
10:28:42 346  WHEN DUP_VAL_ON_INDEX THEN
10:28:42 347  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:42 348  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
10:28:42 349  WHEN OTHERS THEN
10:28:42 350  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 351  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
10:28:42 352  END ADD_EMAIL_DOMAIN;
10:28:42 353  
10:28:42 354  PROCEDURE UPDATE_GROUP_ACCOUNT (
10:28:42 355  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:28:42 356  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
10:28:42 357  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
10:28:42 358  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
10:28:42 359  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
10:28:42 360  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
10:28:42 361  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:28:42 362  ) AS
10:28:42 363  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
10:28:42 364  BEGIN
10:28:42 365  	update
10:28:42 366  	  group_account
10:28:42 367  	set
10:28:42 368  	  group_name = nvl(in_group_name, group_name),
10:28:42 369  	  first_name = nvl(in_first_name, first_name),
10:28:42 370  	  last_name = nvl(in_last_name, last_name),
10:28:42 371  	  email = nvl(in_email, email),
10:28:42 372  	  phone = nvl(in_phone, phone),
10:28:42 373  	  updated_by = in_updated_by,
10:28:42 374  	  update_date = sysdate
10:28:42 375  	where
10:28:42 376  	  id = in_group_account_id;
10:28:42 377  
10:28:42 378  	if(sql%rowcount = 0) then
10:28:42 379  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:42 380  	  SPROC_NAME, 'Group Account not found', SQLERRM);
10:28:42 381  	end if;
10:28:42 382  EXCEPTION
10:28:42 383  	WHEN OTHERS THEN
10:28:42 384  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:42 385  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
10:28:42 386  END UPDATE_GROUP_ACCOUNT;
10:28:42 387  
10:28:42 388  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
10:28:42 389  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:28:42 390  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
10:28:42 391  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:28:42 392  ) AS
10:28:42 393  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
10:28:42 394  var_subscription_id NUMBER;
10:28:42 395  var_seats NUMBER;
10:28:42 396  BEGIN
10:28:42 397  	select subscription_id, seats into var_subscription_id, var_seats
10:28:42 398  	from group_account
10:28:42 399  	where id = in_group_account_id;
10:28:42 400  
10:28:42 401  	update
10:28:42 402  	  group_account
10:28:42 403  	set
10:28:42 404  	  seats = in_seats,
10:28:42 405  	  updated_by = in_updated_by,
10:28:42 406  	  update_date = sysdate
10:28:42 407  	where
10:28:42 408  	  id = in_group_account_id;
10:28:42 409  
10:28:42 410  	if(sql%rowcount = 0) then
10:28:42 411  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:42 412  	  SPROC_NAME, 'Group Account not found', SQLERRM);
10:28:42 413  	end if;
10:28:42 414  
10:28:42 415  	PROCS_SUBSCRIPTION_V24.ANNOTATE_SUBSCRIPTION(
10:28:42 416  	  in_subscription_id => var_subscription_id,
10:28:42 417  	  in_agent_id	     => 0,
10:28:42 418  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
10:28:42 419  	  in_created_by      => in_updated_by
10:28:42 420  	);
10:28:42 421  EXCEPTION
10:28:42 422  	WHEN NO_DATA_FOUND THEN
10:28:42 423  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:42 424  	  SPROC_NAME, 'Group Account not found', SQLERRM);
10:28:42 425  	WHEN OTHERS THEN
10:28:42 426  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:42 427  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
10:28:42 428  END UPDATE_GROUP_ACCOUNT_SEATS;
10:28:42 429  
10:28:42 430  END PROCS_GROUP_ACCOUNT_CRU_V24;
10:28:42 431  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.11
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_invoice_cru.sql
Compiling body for procs_invoice_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_INVOICE (
10:28:42   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
10:28:42   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
10:28:42   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
10:28:42   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
10:28:42   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
10:28:42   9  ) AS
10:28:42  10  -- VARIABLES
10:28:42  11  var_invoice_id INVOICE.ID%TYPE;
10:28:42  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:42  13  var_date DATE := SYSDATE;
10:28:42  14  BEGIN
10:28:42  15  	IF in_invoice_id IS NULL THEN
10:28:42  16  	  SELECT
10:28:42  17  	    INV_ID_SEQ.nextVal into var_invoice_id
10:28:42  18  	  FROM DUAL;
10:28:42  19  	ELSE
10:28:42  20  	  var_invoice_id := in_invoice_id;
10:28:42  21  	END IF;
10:28:42  22  	INSERT INTO
10:28:42  23  	  INVOICE (
10:28:42  24  	    ID,
10:28:42  25  	    INVOICE_STATUS_ID,
10:28:42  26  	    CREATE_DATE,
10:28:42  27  	    CREATED_BY,
10:28:42  28  	    UPDATE_DATE,
10:28:42  29  	    UPDATED_BY,
10:28:42  30  	    TAX_EXEMPT_ID,
10:28:42  31  	    IS_TAX_CALCULATION_NEEDED
10:28:42  32  	  ) VALUES (
10:28:42  33  	    var_invoice_id,
10:28:42  34  	    in_invoice_status_id,
10:28:42  35  	    var_date,
10:28:42  36  	    in_created_by,
10:28:42  37  	    var_date,
10:28:42  38  	    in_created_by,
10:28:42  39  	    in_tax_exempt_id,
10:28:42  40  	    0 -- DEFAULT VALUE
10:28:42  41  	  );
10:28:42  42  
10:28:42  43  	out_invoice_id := var_invoice_id;
10:28:42  44  END;
10:28:42  45  
10:28:42  46  /*****************************************************************/
10:28:42  47  
10:28:42  48  PROCEDURE UPDATE_INVOICE (
10:28:42  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
10:28:42  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
10:28:42  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
10:28:42  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
10:28:42  53  ) AS
10:28:42  54  BEGIN
10:28:42  55  	-- Create history
10:28:42  56  	PROCS_HISTORY_V24.CREATE_INVOICE_HISTORY(
10:28:42  57  	  in_invoice_id 	       => in_invoice_id,
10:28:42  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42  59  	);
10:28:42  60  
10:28:42  61  	UPDATE
10:28:42  62  	  INVOICE
10:28:42  63  	SET
10:28:42  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
10:28:42  65  	  UPDATE_DATE		    = SYSDATE,
10:28:42  66  	  UPDATED_BY		    = in_updated_by,
10:28:42  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
10:28:42  68  	WHERE
10:28:42  69  	  ID = in_invoice_id;
10:28:42  70  END;
10:28:42  71  
10:28:42  72  END PROCS_INVOICE_CRU_V24;
10:28:42  73  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_itunes_receipt_cru.sql
Compiling body for procs_itunes_receipt_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_RECEIPT(
10:28:42   4  /*
10:28:42   5  Throws exceptions:
10:28:42   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42   7  */
10:28:42   8  	  out_id	      OUT NUMBER,
10:28:42   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:42  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
10:28:42  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
10:28:42  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
10:28:42  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:42  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:28:42  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:28:42  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:42  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:28:42  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:28:42  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:28:42  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
10:28:42  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
10:28:42  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:28:42  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
10:28:42  24  ) AS
10:28:42  25  -- VARIABLES
10:28:42  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
10:28:42  27  var_current_date	    DATE;
10:28:42  28  var_count 	    NUMBER;
10:28:42  29  ITUNES_ORG_TNX_USED   EXCEPTION;
10:28:42  30  BEGIN
10:28:42  31  	SELECT COUNT(1) into var_count
10:28:42  32  	FROM
10:28:42  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
10:28:42  34  	WHERE
10:28:42  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
10:28:42  36  	  IR.SUBSCRIPTION_ID = S.ID AND
10:28:42  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE;
10:28:42  38  
10:28:42  39  	if var_count > 0 then
10:28:42  40  	  raise ITUNES_ORG_TNX_USED;
10:28:42  41  	end if;
10:28:42  42  
10:28:42  43  	SELECT
10:28:42  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
10:28:42  45  	INTO
10:28:42  46  	  out_id
10:28:42  47  	FROM
10:28:42  48  	  dual
10:28:42  49  	;
10:28:42  50  
10:28:42  51  	SELECT
10:28:42  52  	  sysdate
10:28:42  53  	INTO
10:28:42  54  	  var_current_date
10:28:42  55  	FROM
10:28:42  56  	  dual
10:28:42  57  	;
10:28:42  58  
10:28:42  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
10:28:42  60  	(
10:28:42  61  	  id,
10:28:42  62  	  subscription_id,
10:28:42  63  	  receipt,
10:28:42  64  	  status,
10:28:42  65  	  quantity,
10:28:42  66  	  product_id,
10:28:42  67  	  transaction_id,
10:28:42  68  	  purchase_date,
10:28:42  69  	  original_transaction_id,
10:28:42  70  	  original_purchase_date,
10:28:42  71  	  app_item_id,
10:28:42  72  	  version_external_id,
10:28:42  73  	  bid,
10:28:42  74  	  bvrs,
10:28:42  75  	  expires_date,
10:28:42  76  	  create_date,
10:28:42  77  	  created_by,
10:28:42  78  	  update_date,
10:28:42  79  	  updated_by,
10:28:42  80  	  last_check_date
10:28:42  81  	)
10:28:42  82  	VALUES
10:28:42  83  	(
10:28:42  84  	  out_id,
10:28:42  85  	  in_subscription_id,
10:28:42  86  	  in_receipt,
10:28:42  87  	  in_status,
10:28:42  88  	  in_quantity,
10:28:42  89  	  in_product_id,
10:28:42  90  	  in_transaction_id,
10:28:42  91  	  in_purchase_date,
10:28:42  92  	  in_original_transaction_id,
10:28:42  93  	  in_original_purchase_date,
10:28:42  94  	  in_app_item_id,
10:28:42  95  	  in_version_external_id,
10:28:42  96  	  in_bid,
10:28:42  97  	  in_bvrs,
10:28:42  98  	  in_expires_date,
10:28:42  99  	  var_current_date,
10:28:42 100  	  in_created_by,
10:28:42 101  	  var_current_date,
10:28:42 102  	  in_created_by,
10:28:42 103  	  var_current_date
10:28:42 104  	);
10:28:42 105  
10:28:42 106  EXCEPTION
10:28:42 107  WHEN ITUNES_ORG_TNX_USED THEN
10:28:42 108  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:42 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
10:28:42 110  WHEN DUP_VAL_ON_INDEX THEN
10:28:42 111  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:42 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
10:28:42 113  WHEN OTHERS THEN
10:28:42 114  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 116  END CREATE_RECEIPT;
10:28:42 117  
10:28:42 118  PROCEDURE UPDATE_RECEIPT(
10:28:42 119  /*
10:28:42 120  Throws exceptions:
10:28:42 121  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42 122  */
10:28:42 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
10:28:42 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
10:28:42 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
10:28:42 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
10:28:42 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:42 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:28:42 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:28:42 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:42 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:28:42 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:28:42 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:28:42 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
10:28:42 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
10:28:42 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:28:42 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
10:28:42 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
10:28:42 139  ) AS
10:28:42 140  -- VARIABLES
10:28:42 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
10:28:42 142  var_current_date	    DATE;
10:28:42 143  BEGIN
10:28:42 144  
10:28:42 145  	SELECT
10:28:42 146  	  sysdate
10:28:42 147  	INTO
10:28:42 148  	  var_current_date
10:28:42 149  	FROM
10:28:42 150  	  dual
10:28:42 151  	;
10:28:42 152  
10:28:42 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
10:28:42 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_ITUNES_RECEIPT_HISTORY
10:28:42 155  	  (
10:28:42 156  	      rec.id,
10:28:42 157  	      rec.subscription_id,
10:28:42 158  	      rec.receipt,
10:28:42 159  	      rec.status,
10:28:42 160  	      rec.quantity,
10:28:42 161  	      rec.product_id,
10:28:42 162  	      rec.transaction_id,
10:28:42 163  	      rec.purchase_date,
10:28:42 164  	      rec.original_transaction_id,
10:28:42 165  	      rec.original_purchase_date,
10:28:42 166  	      rec.app_item_id,
10:28:42 167  	      rec.version_external_id,
10:28:42 168  	      rec.bid,
10:28:42 169  	      rec.bvrs,
10:28:42 170  	      rec.expires_date,
10:28:42 171  	      rec.create_date,
10:28:42 172  	      rec.created_by,
10:28:42 173  	      rec.update_date,
10:28:42 174  	      rec.updated_by,
10:28:42 175  	      rec.last_check_date,
10:28:42 176  	      rec.cancel_date
10:28:42 177  	  );
10:28:42 178  	END LOOP;
10:28:42 179  
10:28:42 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
10:28:42 181  	SET
10:28:42 182  	  receipt = in_receipt,
10:28:42 183  	  status = in_status,
10:28:42 184  	  quantity = in_quantity,
10:28:42 185  	  product_id = in_product_id,
10:28:42 186  	  transaction_id = in_transaction_id,
10:28:42 187  	  purchase_date = in_purchase_date,
10:28:42 188  	  original_transaction_id = in_original_transaction_id,
10:28:42 189  	  original_purchase_date = in_original_purchase_date,
10:28:42 190  	  app_item_id = in_app_item_id,
10:28:42 191  	  version_external_id = in_version_external_id,
10:28:42 192  	  bid = in_bid,
10:28:42 193  	  bvrs = in_bvrs,
10:28:42 194  	  expires_date = in_expires_date,
10:28:42 195  	  update_date = var_current_date,
10:28:42 196  	  updated_by = in_updated_by,
10:28:42 197  	  last_check_date = var_current_date,
10:28:42 198  	  cancel_date = in_cancel_date
10:28:42 199  	WHERE
10:28:42 200  	  id = in_id
10:28:42 201  	;
10:28:42 202  
10:28:42 203  EXCEPTION
10:28:42 204  WHEN DUP_VAL_ON_INDEX THEN
10:28:42 205  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:42 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
10:28:42 207  WHEN OTHERS THEN
10:28:42 208  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 210  
10:28:42 211  END UPDATE_RECEIPT;
10:28:42 212  
10:28:42 213  PROCEDURE LINK_ITUNES_RECEIPT(
10:28:42 214  /*
10:28:42 215  Throws exceptions:
10:28:42 216  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42 217  */
10:28:42 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
10:28:42 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:42 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
10:28:42 221  ) AS
10:28:42 222  -- VARIABLES
10:28:42 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
10:28:42 224  var_current_date	    DATE;
10:28:42 225  BEGIN
10:28:42 226  
10:28:42 227  	      SELECT
10:28:42 228  	  sysdate
10:28:42 229  	      INTO
10:28:42 230  	  var_current_date
10:28:42 231  	      FROM
10:28:42 232  	  dual
10:28:42 233  	      ;
10:28:42 234  
10:28:42 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
10:28:42 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_ITUNES_RECEIPT_HISTORY
10:28:42 237  	      (
10:28:42 238  	    rec.id,
10:28:42 239  	    rec.subscription_id,
10:28:42 240  	    rec.receipt,
10:28:42 241  	    rec.status,
10:28:42 242  	    rec.quantity,
10:28:42 243  	    rec.product_id,
10:28:42 244  	    rec.transaction_id,
10:28:42 245  	    rec.purchase_date,
10:28:42 246  	    rec.original_transaction_id,
10:28:42 247  	    rec.original_purchase_date,
10:28:42 248  	    rec.app_item_id,
10:28:42 249  	    rec.version_external_id,
10:28:42 250  	    rec.bid,
10:28:42 251  	    rec.bvrs,
10:28:42 252  	    rec.expires_date,
10:28:42 253  	    rec.create_date,
10:28:42 254  	    rec.created_by,
10:28:42 255  	    rec.update_date,
10:28:42 256  	    rec.updated_by,
10:28:42 257  	    rec.last_check_date,
10:28:42 258  	    rec.cancel_date
10:28:42 259  	      );
10:28:42 260  	      END LOOP;
10:28:42 261  
10:28:42 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
10:28:42 263  		SET
10:28:42 264  		      subscription_id = in_subscription_id,
10:28:42 265  		      update_date = var_current_date,
10:28:42 266  	      updated_by = in_updated_by,
10:28:42 267  	      last_check_date = var_current_date
10:28:42 268  	      WHERE
10:28:42 269  		  id = in_id
10:28:42 270  	      ;
10:28:42 271  
10:28:42 272  	      EXCEPTION
10:28:42 273  	      WHEN DUP_VAL_ON_INDEX THEN
10:28:42 274  		PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:42 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
10:28:42 276  	      WHEN OTHERS THEN
10:28:42 277  		PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 279  END LINK_ITUNES_RECEIPT;
10:28:42 280  
10:28:42 281  
10:28:42 282  PROCEDURE MARK_RECEIPT_CHECKED(
10:28:42 283  /*
10:28:42 284  Throws exceptions:
10:28:42 285  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42 286  */
10:28:42 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
10:28:42 288  ) AS
10:28:42 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
10:28:42 290  BEGIN
10:28:42 291  	UPDATE
10:28:42 292  	  CORE_OWNER.ITUNES_RECEIPT
10:28:42 293  	SET
10:28:42 294  	  last_check_date = sysdate
10:28:42 295  	WHERE
10:28:42 296  	  id = in_id
10:28:42 297  	;
10:28:42 298  EXCEPTION
10:28:42 299  WHEN OTHERS THEN
10:28:42 300  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 302  END MARK_RECEIPT_CHECKED;
10:28:42 303  
10:28:42 304  END PROCS_ITUNES_RECEIPT_CRU_V24;
10:28:42 305  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.06
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_license_cru.sql
Compiling body for procs_license_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_LICENSE(
10:28:42   4  	out_license_id		    OUT LICENSE.ID%TYPE,
10:28:42   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
10:28:42   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
10:28:42   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
10:28:42   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
10:28:42   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
10:28:42  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
10:28:42  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
10:28:42  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
10:28:42  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
10:28:42  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
10:28:42  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
10:28:42  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
10:28:42  17  ) AS
10:28:42  18  -- VARIABLES
10:28:42  19  var_license_id LICENSE.ID%TYPE;
10:28:42  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:42  21  var_date DATE := SYSDATE;
10:28:42  22  BEGIN
10:28:42  23  	IF in_license_id IS NULL THEN
10:28:42  24  	  SELECT
10:28:42  25  	    LCN_ID_SEQ.nextVal into var_license_id
10:28:42  26  	  FROM DUAL;
10:28:42  27  	ELSE
10:28:42  28  	  var_license_id := in_license_id;
10:28:42  29  	END IF;
10:28:42  30  	INSERT INTO
10:28:42  31  	  LICENSE (
10:28:42  32  	    ID,
10:28:42  33  	    LICENSE_STATUS_ID,
10:28:42  34  	    NEEDS_ENTITLEMENTS,
10:28:42  35  	    START_DATE,
10:28:42  36  	    OFFER_ID,
10:28:42  37  	    SUBSCRIPTION_ID,
10:28:42  38  	    INVOICE_ID,
10:28:42  39  	    END_DATE,
10:28:42  40  	    CREATE_DATE,
10:28:42  41  	    CREATED_BY,
10:28:42  42  	    UPDATE_DATE,
10:28:42  43  	    UPDATED_BY,
10:28:42  44  	    IS_EXTENSION,
10:28:42  45  	    CURRENT_OFFER_INDEX,
10:28:42  46  	    CURRENT_OFFER_RECURR_NUM,
10:28:42  47  	    ENTITLEMENT_END_DATE
10:28:42  48  	  ) VALUES (
10:28:42  49  	    var_license_id,
10:28:42  50  	    in_license_status_id,
10:28:42  51  	    in_needs_entitlements,
10:28:42  52  	    in_start_date,
10:28:42  53  	    in_offer_id,
10:28:42  54  	    in_subscription_id,
10:28:42  55  	    in_invoice_id,
10:28:42  56  	    in_end_date,
10:28:42  57  	    var_date,
10:28:42  58  	    in_created_by,
10:28:42  59  	    var_date,
10:28:42  60  	    in_created_by,
10:28:42  61  	    in_is_extension,
10:28:42  62  	    in_current_offer_index,
10:28:42  63  	    in_current_offer_recurr_num,
10:28:42  64  	    in_end_date
10:28:42  65  	  );
10:28:42  66  
10:28:42  67  	out_license_id := var_license_id;
10:28:42  68  END CREATE_LICENSE;
10:28:42  69  
10:28:42  70  /********************************************************************/
10:28:42  71  
10:28:42  72  PROCEDURE UPDATE_LICENSE (
10:28:42  73  	in_license_id		    IN LICENSE.ID%TYPE,
10:28:42  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
10:28:42  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
10:28:42  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
10:28:42  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
10:28:42  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
10:28:42  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
10:28:42  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
10:28:42  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
10:28:42  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
10:28:42  83  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
10:28:42  84  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
10:28:42  85  ) AS
10:28:42  86  BEGIN
10:28:42  87  	-- Create history
10:28:42  88  	PROCS_HISTORY_V24.CREATE_LICENSE_HISTORY(
10:28:42  89  	  in_license_id 	       => in_license_id,
10:28:42  90  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42  91  	);
10:28:42  92  
10:28:42  93  	UPDATE
10:28:42  94  	  LICENSE
10:28:42  95  	SET
10:28:42  96  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
10:28:42  97  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
10:28:42  98  	  START_DATE		   = NVL(in_start_date, START_DATE),
10:28:42  99  	  END_DATE		   = NVL(in_end_date, END_DATE),
10:28:42 100  	  UPDATE_DATE		   = SYSDATE,
10:28:42 101  	  UPDATED_BY		   = in_updated_by,
10:28:42 102  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
10:28:42 103  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
10:28:42 104  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
10:28:42 105  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE),
10:28:42 106  	  GRACE_START_DATE	   = NVL(in_grace_start_date, GRACE_START_DATE),
10:28:42 107  	  GRACE_END_DATE	   = NVL(in_grace_end_date, GRACE_END_DATE)
10:28:42 108  	WHERE
10:28:42 109  	  LICENSE.ID = in_license_id;
10:28:42 110  END UPDATE_LICENSE;
10:28:42 111  
10:28:42 112  END PROCS_LICENSE_CRU_V24;
10:28:42 113  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_line_items_cru.sql
Compiling body for procs_line_items_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_LINE_ITEM (
10:28:42   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
10:28:42   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
10:28:42   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
10:28:42   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
10:28:42   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
10:28:42   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
10:28:42  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
10:28:42  11  ) AS
10:28:42  12  BEGIN
10:28:42  13  	IF inout_line_item_id IS NULL THEN
10:28:42  14  	  SELECT
10:28:42  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
10:28:42  16  	  FROM DUAL;
10:28:42  17  	END IF;
10:28:42  18  	INSERT INTO LINE_ITEM (
10:28:42  19  	  ID,
10:28:42  20  	  PRODUCT_OFFER_ID,
10:28:42  21  	  INVOICE_ID,
10:28:42  22  	  AMOUNT,
10:28:42  23  	  QUANTITY,
10:28:42  24  	  CREATE_DATE,
10:28:42  25  	  CREATED_BY,
10:28:42  26  	  DISCOUNT_AMOUNT,
10:28:42  27  	  TAXES_AMOUNT
10:28:42  28  	) VALUES (
10:28:42  29  	  inout_line_item_id,
10:28:42  30  	  in_product_offer_id,
10:28:42  31  	  in_invoice_id,
10:28:42  32  	  in_amount,
10:28:42  33  	  1, -- [REVU]: Deprecated. Ignore this field
10:28:42  34  	  SYSDATE,
10:28:42  35  	  in_created_by,
10:28:42  36  	  in_discount_amount,
10:28:42  37  	  in_taxes_amount
10:28:42  38  	);
10:28:42  39  END CREATE_LINE_ITEM;
10:28:42  40  
10:28:42  41  /******************************************************************************/
10:28:42  42  
10:28:42  43  PROCEDURE UPDATE_LINE_ITEM (
10:28:42  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
10:28:42  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
10:28:42  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
10:28:42  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
10:28:42  48  ) AS
10:28:42  49  BEGIN
10:28:42  50  	UPDATE
10:28:42  51  	  LINE_ITEM
10:28:42  52  	SET
10:28:42  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
10:28:42  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
10:28:42  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
10:28:42  56  	WHERE
10:28:42  57  	  LINE_ITEM.ID = in_line_item_id;
10:28:42  58  END UPDATE_LINE_ITEM;
10:28:42  59  
10:28:42  60  /******************************************************************************/
10:28:42  61  
10:28:42  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
10:28:42  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
10:28:42  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
10:28:42  65  ) AS
10:28:42  66  BEGIN
10:28:42  67  	INSERT INTO DISCOUNT_LINE_ITEM(
10:28:42  68  	  DISCOUNT_ID,
10:28:42  69  	  LINE_ITEM_ID
10:28:42  70  	) VALUES (
10:28:42  71  	  in_discount_id,
10:28:42  72  	  in_line_item_id
10:28:42  73  	);
10:28:42  74  END CREATE_DISCOUNT_LINE_ITEM;
10:28:42  75  
10:28:42  76  END PROCS_LINE_ITEMS_CRU_V24;
10:28:42  77  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_reconciliation_cru.sql
Compiling body for procs_reconciliation_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
10:28:42   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
10:28:42   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
10:28:42   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:42   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
10:28:42   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
10:28:42   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
10:28:42  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
10:28:42  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
10:28:42  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:28:42  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
10:28:42  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
10:28:42  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
10:28:42  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:28:42  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
10:28:42  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
10:28:42  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
10:28:42  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
10:28:42  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
10:28:42  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
10:28:42  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
10:28:42  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
10:28:42  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
10:28:42  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
10:28:42  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
10:28:42  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
10:28:42  29  ) AS
10:28:42  30  -- VARIABLES
10:28:42  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
10:28:42  32  var_date DATE := SYSDATE;
10:28:42  33  BEGIN
10:28:42  34  	IF in_cpt_chargeback_act_id IS NULL THEN
10:28:42  35  	  SELECT
10:28:42  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
10:28:42  37  	  FROM DUAL;
10:28:42  38  	ELSE
10:28:42  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
10:28:42  40  	END IF;
10:28:42  41  	INSERT INTO
10:28:42  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
10:28:42  43  	    id,
10:28:42  44  	    rcn_ext_source_log_id,
10:28:42  45  	    record_type,
10:28:42  46  	    entity_type,
10:28:42  47  	    entity_number,
10:28:42  48  	    chargeback_amount_issuer,
10:28:42  49  	    prev_partial_representment,
10:28:42  50  	    presentment_currency,
10:28:42  51  	    chargeback_category,
10:28:42  52  	    status_flag,
10:28:42  53  	    sequence_number,
10:28:42  54  	    merchant_order_number,
10:28:42  55  	    account_number,
10:28:42  56  	    reason_code,
10:28:42  57  	    transaction_date,
10:28:42  58  	    chargeback_date,
10:28:42  59  	    activity_date,
10:28:42  60  	    chargeback_amount_action,
10:28:42  61  	    fee_amount,
10:28:42  62  	    usage_code,
10:28:42  63  	    mop_code,
10:28:42  64  	    authorization_date,
10:28:42  65  	    chargeback_due_date,
10:28:42  66  	    create_date,
10:28:42  67  	    created_by
10:28:42  68  	  ) VALUES (
10:28:42  69  	    var_cpt_chargeback_act_id,
10:28:42  70  	    in_ext_source_log_id,
10:28:42  71  	    in_record_type,
10:28:42  72  	    in_entity_type,
10:28:42  73  	    in_entity_number,
10:28:42  74  	    in_chargeback_amount_issuer,
10:28:42  75  	    in_prev_partial_repres,
10:28:42  76  	    in_presentment_currency,
10:28:42  77  	    in_chargeback_category,
10:28:42  78  	    in_status_flag,
10:28:42  79  	    in_sequence_number,
10:28:42  80  	    in_merchant_order_number,
10:28:42  81  	    in_account_number,
10:28:42  82  	    in_reason_code,
10:28:42  83  	    in_transaction_date,
10:28:42  84  	    in_chargeback_date,
10:28:42  85  	    in_activity_date,
10:28:42  86  	    in_chargeback_amount_action,
10:28:42  87  	    in_fee_amount,
10:28:42  88  	    in_usage_code,
10:28:42  89  	    in_mop_code,
10:28:42  90  	    in_authorization_date,
10:28:42  91  	    in_chargeback_due_date,
10:28:42  92  	    var_date,
10:28:42  93  	    in_created_by
10:28:42  94  	  );
10:28:42  95  
10:28:42  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
10:28:42  97  END CREATE_CPT_CHARGEBACK_ACT;
10:28:42  98  
10:28:42  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
10:28:42 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
10:28:42 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
10:28:42 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
10:28:42 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
10:28:42 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
10:28:42 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:28:42 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
10:28:42 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
10:28:42 108  ) AS
10:28:42 109  -- VARIABLES
10:28:42 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
10:28:42 111  var_date DATE := SYSDATE;
10:28:42 112  BEGIN
10:28:42 113  	IF in_ext_source_log_id IS NULL THEN
10:28:42 114  	  SELECT
10:28:42 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
10:28:42 116  	  FROM DUAL;
10:28:42 117  	ELSE
10:28:42 118  	  var_ext_source_log_id := in_ext_source_log_id;
10:28:42 119  	END IF;
10:28:42 120  	INSERT INTO
10:28:42 121  	  RCN_EXT_SOURCE_LOG (
10:28:42 122  	    id,
10:28:42 123  	    extraction_timestamp,
10:28:42 124  	    report_date,
10:28:42 125  	    report_generation_datetime,
10:28:42 126  	    record_type,
10:28:42 127  	    report_file_name,
10:28:42 128  	    create_date,
10:28:42 129  	    created_by
10:28:42 130  	  ) VALUES (
10:28:42 131  	    var_ext_source_log_id,
10:28:42 132  	    in_extraction_timestamp,
10:28:42 133  	    in_report_date,
10:28:42 134  	    in_report_gen_datetime,
10:28:42 135  	    in_record_type,
10:28:42 136  	    in_report_file_name,
10:28:42 137  	    var_date,
10:28:42 138  	    in_created_by
10:28:42 139  	  );
10:28:42 140  
10:28:42 141  	out_ext_source_log_id := var_ext_source_log_id;
10:28:42 142  END CREATE_EXT_SOURCE_LOG;
10:28:42 143  
10:28:42 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
10:28:42 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
10:28:42 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
10:28:42 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:42 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
10:28:42 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
10:28:42 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
10:28:42 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
10:28:42 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
10:28:42 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
10:28:42 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
10:28:42 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
10:28:42 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
10:28:42 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
10:28:42 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
10:28:42 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
10:28:42 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
10:28:42 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
10:28:42 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
10:28:42 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
10:28:42 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
10:28:42 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
10:28:42 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
10:28:42 167  ) AS
10:28:42 168  -- VARIABLES
10:28:42 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
10:28:42 170  var_date DATE := SYSDATE;
10:28:42 171  BEGIN
10:28:42 172  	IF in_cpt_service_charge_id IS NULL THEN
10:28:42 173  	  SELECT
10:28:42 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
10:28:42 175  	  FROM DUAL;
10:28:42 176  	ELSE
10:28:42 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
10:28:42 178  	END IF;
10:28:42 179  	INSERT INTO
10:28:42 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
10:28:42 181  	    id,
10:28:42 182  	    rcn_ext_source_log_id,
10:28:42 183  	    record_type,
10:28:42 184  	    category,
10:28:42 185  	    sub_category,
10:28:42 186  	    entity_type,
10:28:42 187  	    entity_number,
10:28:42 188  	    funds_transfer_inst_number,
10:28:42 189  	    secure_ba_number,
10:28:42 190  	    settlement_currency,
10:28:42 191  	    fee_schedule,
10:28:42 192  	    mop,
10:28:42 193  	    interchange_qualification,
10:28:42 194  	    fee_type_description,
10:28:42 195  	    action_type,
10:28:42 196  	    unit_quantity,
10:28:42 197  	    unit_fee,
10:28:42 198  	    amount,
10:28:42 199  	    percentage_rate,
10:28:42 200  	    total_charge,
10:28:42 201  	    create_date,
10:28:42 202  	    created_by
10:28:42 203  	  ) VALUES (
10:28:42 204  	    var_cpt_service_charge_id,
10:28:42 205  	    in_ext_source_log_id,
10:28:42 206  	    in_record_type,
10:28:42 207  	    in_category,
10:28:42 208  	    in_sub_category,
10:28:42 209  	    in_entity_type,
10:28:42 210  	    in_entity_number,
10:28:42 211  	    in_funds_trans_inst_number,
10:28:42 212  	    in_secure_ba_number,
10:28:42 213  	    in_settlement_currency,
10:28:42 214  	    in_fee_schedule,
10:28:42 215  	    in_mop,
10:28:42 216  	    in_interchange_qual,
10:28:42 217  	    in_fee_type_description,
10:28:42 218  	    in_action_type,
10:28:42 219  	    in_unit_quantity,
10:28:42 220  	    in_unit_fee,
10:28:42 221  	    in_amount,
10:28:42 222  	    in_percentage_rate,
10:28:42 223  	    in_total_charge,
10:28:42 224  	    var_date,
10:28:42 225  	    in_created_by
10:28:42 226  	  );
10:28:42 227  
10:28:42 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
10:28:42 229  END CREATE_CPT_SERVICE_CHARGE;
10:28:42 230  
10:28:42 231  PROCEDURE CREATE_CPT_EXCEPTION (
10:28:42 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
10:28:42 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
10:28:42 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:42 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
10:28:42 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
10:28:42 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
10:28:42 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
10:28:42 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
10:28:42 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
10:28:42 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
10:28:42 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
10:28:42 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:28:42 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:28:42 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
10:28:42 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
10:28:42 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
10:28:42 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
10:28:42 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
10:28:42 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
10:28:42 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
10:28:42 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
10:28:42 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
10:28:42 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
10:28:42 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
10:28:42 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
10:28:42 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
10:28:42 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
10:28:42 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
10:28:42 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
10:28:42 261  ) AS
10:28:42 262  -- VARIABLES
10:28:42 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
10:28:42 264  var_date DATE := SYSDATE;
10:28:42 265  BEGIN
10:28:42 266  	IF in_cpt_exception_id IS NULL THEN
10:28:42 267  	  SELECT
10:28:42 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
10:28:42 269  	  FROM DUAL;
10:28:42 270  	ELSE
10:28:42 271  	  var_cpt_exception_id := in_cpt_exception_id;
10:28:42 272  	END IF;
10:28:42 273  	INSERT INTO
10:28:42 274  	  RCN_CPT_EXCEPTION_DETAIL (
10:28:42 275  	    id,
10:28:42 276  	    rcn_ext_source_log_id,
10:28:42 277  	    record_type,
10:28:42 278  	    submission_date,
10:28:42 279  	    pid_number,
10:28:42 280  	    pid_short_name,
10:28:42 281  	    submission_number,
10:28:42 282  	    record_number,
10:28:42 283  	    entity_type,
10:28:42 284  	    entity_number,
10:28:42 285  	    presentment_currency,
10:28:42 286  	    merchant_order_number,
10:28:42 287  	    rdfi_number,
10:28:42 288  	    account_number,
10:28:42 289  	    expiration_date,
10:28:42 290  	    amount,
10:28:42 291  	    mop,
10:28:42 292  	    action_code,
10:28:42 293  	    auth_date,
10:28:42 294  	    auth_code,
10:28:42 295  	    auth_response_code,
10:28:42 296  	    trace_number,
10:28:42 297  	    consumer_country_code,
10:28:42 298  	    category,
10:28:42 299  	    mcc,
10:28:42 300  	    reject_code,
10:28:42 301  	    submission_status,
10:28:42 302  	    create_date,
10:28:42 303  	    created_by
10:28:42 304  	  ) VALUES (
10:28:42 305  	    var_cpt_exception_id,
10:28:42 306  	    in_ext_source_log_id,
10:28:42 307  	    in_record_type,
10:28:42 308  	    in_submission_date,
10:28:42 309  	    in_pid_number,
10:28:42 310  	    in_pid_short_name,
10:28:42 311  	    in_submission_number,
10:28:42 312  	    in_record_number,
10:28:42 313  	    in_entity_type,
10:28:42 314  	    in_entity_number,
10:28:42 315  	    in_presentment_currency,
10:28:42 316  	    in_merchant_order_number,
10:28:42 317  	    in_rdfi_number,
10:28:42 318  	    in_account_number,
10:28:42 319  	    in_expiration_date,
10:28:42 320  	    in_amount,
10:28:42 321  	    in_mop,
10:28:42 322  	    in_action_code,
10:28:42 323  	    in_auth_date,
10:28:42 324  	    in_auth_code,
10:28:42 325  	    in_auth_response_code,
10:28:42 326  	    in_trace_number,
10:28:42 327  	    in_consumer_country_code,
10:28:42 328  	    in_category,
10:28:42 329  	    in_mcc,
10:28:42 330  	    in_reject_code,
10:28:42 331  	    in_submission_status,
10:28:42 332  	    var_date,
10:28:42 333  	    in_created_by
10:28:42 334  	  );
10:28:42 335  
10:28:42 336  	out_cpt_exception_id := var_cpt_exception_id;
10:28:42 337  END CREATE_CPT_EXCEPTION;
10:28:42 338  
10:28:42 339  PROCEDURE CREATE_CPT_DEPOSIT (
10:28:42 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
10:28:42 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
10:28:42 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:42 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
10:28:42 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
10:28:42 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
10:28:42 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
10:28:42 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
10:28:42 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
10:28:42 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
10:28:42 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
10:28:42 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:28:42 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:28:42 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
10:28:42 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
10:28:42 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
10:28:42 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
10:28:42 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
10:28:42 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
10:28:42 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
10:28:42 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
10:28:42 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
10:28:42 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
10:28:42 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
10:28:42 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
10:28:42 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
10:28:42 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
10:28:42 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
10:28:42 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
10:28:42 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
10:28:42 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
10:28:42 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
10:28:42 372  ) AS
10:28:42 373  -- VARIABLES
10:28:42 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
10:28:42 375  var_date DATE := SYSDATE;
10:28:42 376  BEGIN
10:28:42 377  	IF in_cpt_deposit_id IS NULL THEN
10:28:42 378  	  SELECT
10:28:42 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
10:28:42 380  	  FROM DUAL;
10:28:42 381  	ELSE
10:28:42 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
10:28:42 383  	END IF;
10:28:42 384  	INSERT INTO
10:28:42 385  	  RCN_CPT_DEPOSIT_DETAIL (
10:28:42 386  	    id,
10:28:42 387  	    rcn_ext_source_log_id,
10:28:42 388  	    record_type,
10:28:42 389  	    submission_date,
10:28:42 390  	    pid_number,
10:28:42 391  	    pid_short_name,
10:28:42 392  	    submission_number,
10:28:42 393  	    record_number,
10:28:42 394  	    entity_type,
10:28:42 395  	    entity_number,
10:28:42 396  	    presentment_currency,
10:28:42 397  	    merchant_order_number,
10:28:42 398  	    rdfi_number,
10:28:42 399  	    account_number,
10:28:42 400  	    expiration_date,
10:28:42 401  	    amount,
10:28:42 402  	    mop,
10:28:42 403  	    action_code,
10:28:42 404  	    auth_date,
10:28:42 405  	    auth_code,
10:28:42 406  	    auth_response_code,
10:28:42 407  	    trace_number,
10:28:42 408  	    consumer_country_code,
10:28:42 409  	    mcc,
10:28:42 410  	    fee_code,
10:28:42 411  	    unit_fee,
10:28:42 412  	    percent_fee,
10:28:42 413  	    total_interchange_fee,
10:28:42 414  	    total_assessment_fee,
10:28:42 415  	    other_fee,
10:28:42 416  	    create_date,
10:28:42 417  	    created_by
10:28:42 418  	  ) VALUES (
10:28:42 419  	    var_cpt_deposit_id,
10:28:42 420  	    in_ext_source_log_id,
10:28:42 421  	    in_record_type,
10:28:42 422  	    in_submission_date,
10:28:42 423  	    in_pid_number,
10:28:42 424  	    in_pid_short_name,
10:28:42 425  	    in_submission_number,
10:28:42 426  	    in_record_number,
10:28:42 427  	    in_entity_type,
10:28:42 428  	    in_entity_number,
10:28:42 429  	    in_presentment_currency,
10:28:42 430  	    in_merchant_order_number,
10:28:42 431  	    in_rdfi_number,
10:28:42 432  	    in_account_number,
10:28:42 433  	    in_expiration_date,
10:28:42 434  	    in_amount,
10:28:42 435  	    in_mop,
10:28:42 436  	    in_action_code,
10:28:42 437  	    in_auth_date,
10:28:42 438  	    in_auth_code,
10:28:42 439  	    in_auth_response_code,
10:28:42 440  	    in_trace_number,
10:28:42 441  	    in_consumer_country_code,
10:28:42 442  	    in_mcc,
10:28:42 443  	    in_fee_code,
10:28:42 444  	    in_unit_fee,
10:28:42 445  	    in_percent_fee,
10:28:42 446  	    in_total_interchange_fee,
10:28:42 447  	    in_total_assessment_fee,
10:28:42 448  	    in_other_fee,
10:28:42 449  	    var_date,
10:28:42 450  	    in_created_by
10:28:42 451  	  );
10:28:42 452  
10:28:42 453  	out_cpt_deposit_id := var_cpt_deposit_id;
10:28:42 454  END CREATE_CPT_DEPOSIT;
10:28:42 455  
10:28:42 456  PROCEDURE CREATE_PP_SETTLEMENT (
10:28:42 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
10:28:42 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
10:28:42 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:42 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
10:28:42 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
10:28:42 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
10:28:42 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
10:28:42 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
10:28:42 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
10:28:42 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
10:28:42 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
10:28:42 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
10:28:42 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
10:28:42 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
10:28:42 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
10:28:42 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
10:28:42 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
10:28:42 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
10:28:42 475  ) AS
10:28:42 476  -- VARIABLES
10:28:42 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
10:28:42 478  var_date DATE := SYSDATE;
10:28:42 479  BEGIN
10:28:42 480  	IF in_pp_settlement_id IS NULL THEN
10:28:42 481  	  SELECT
10:28:42 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
10:28:42 483  	  FROM DUAL;
10:28:42 484  	ELSE
10:28:42 485  	  var_pp_settlement_id := in_pp_settlement_id;
10:28:42 486  	END IF;
10:28:42 487  	INSERT INTO
10:28:42 488  	  RCN_PP_SETTLEMENT (
10:28:42 489  	    id,
10:28:42 490  	    rcn_ext_source_log_id,
10:28:42 491  	    transaction_id,
10:28:42 492  	    invoice_id,
10:28:42 493  	    pp_ref_id,
10:28:42 494  	    pp_ref_id_type,
10:28:42 495  	    trans_event_code,
10:28:42 496  	    trans_init_date,
10:28:42 497  	    trans_comp_date,
10:28:42 498  	    trans_deb_or_cred,
10:28:42 499  	    gross_trans_amount,
10:28:42 500  	    gross_trans_currency,
10:28:42 501  	    fee_deb_or_cred,
10:28:42 502  	    fee_amount,
10:28:42 503  	    fee_currency,
10:28:42 504  	    custom_field,
10:28:42 505  	    create_date,
10:28:42 506  	    created_by
10:28:42 507  	  ) VALUES (
10:28:42 508  	    var_pp_settlement_id,
10:28:42 509  	    in_ext_source_log_id,
10:28:42 510  	    in_transaction_id,
10:28:42 511  	    in_invoice_id,
10:28:42 512  	    in_pp_ref_id,
10:28:42 513  	    in_pp_ref_id_type,
10:28:42 514  	    in_trans_event_code,
10:28:42 515  	    in_trans_init_date,
10:28:42 516  	    in_trans_comp_date,
10:28:42 517  	    in_trans_deb_or_cred,
10:28:42 518  	    in_gross_trans_amount,
10:28:42 519  	    in_gross_trans_currency,
10:28:42 520  	    in_fee_deb_or_cred,
10:28:42 521  	    in_fee_amount,
10:28:42 522  	    in_fee_currency,
10:28:42 523  	    in_custom_field,
10:28:42 524  	    var_date,
10:28:42 525  	    in_created_by
10:28:42 526  	  );
10:28:42 527  
10:28:42 528  	out_pp_settlement_id := var_pp_settlement_id;
10:28:42 529  END CREATE_PP_SETTLEMENT;
10:28:42 530  
10:28:42 531  PROCEDURE CREATE_PP_DISPUTE (
10:28:42 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
10:28:42 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
10:28:42 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:42 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
10:28:42 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
10:28:42 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
10:28:42 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
10:28:42 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
10:28:42 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
10:28:42 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
10:28:42 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
10:28:42 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
10:28:42 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
10:28:42 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
10:28:42 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
10:28:42 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
10:28:42 548  ) AS
10:28:42 549  -- VARIABLES
10:28:42 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
10:28:42 551  var_date DATE := SYSDATE;
10:28:42 552  BEGIN
10:28:42 553  	IF in_pp_dispute_id IS NULL THEN
10:28:42 554  	  SELECT
10:28:42 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
10:28:42 556  	  FROM DUAL;
10:28:42 557  	ELSE
10:28:42 558  	  var_pp_dispute_id := in_pp_dispute_id;
10:28:42 559  	END IF;
10:28:42 560  	INSERT INTO
10:28:42 561  	  RCN_PP_DISPUTE (
10:28:42 562  	    id,
10:28:42 563  	    rcn_ext_source_log_id,
10:28:42 564  	    dispute_type,
10:28:42 565  	    claimant_name,
10:28:42 566  	    claimant_email,
10:28:42 567  	    transaction_id,
10:28:42 568  	    trans_date,
10:28:42 569  	    disputed_amount,
10:28:42 570  	    disputed_amount_currency,
10:28:42 571  	    dispute_reason,
10:28:42 572  	    dispute_filing_date,
10:28:42 573  	    dispute_status,
10:28:42 574  	    dispute_case_id,
10:28:42 575  	    invoice_id,
10:28:42 576  	    create_date,
10:28:42 577  	    created_by
10:28:42 578  	  ) VALUES (
10:28:42 579  	    var_pp_dispute_id,
10:28:42 580  	    in_ext_source_log_id,
10:28:42 581  	    in_dispute_type,
10:28:42 582  	    in_claimant_name,
10:28:42 583  	    in_claimant_email,
10:28:42 584  	    in_transaction_id,
10:28:42 585  	    in_trans_date,
10:28:42 586  	    in_disputed_amount,
10:28:42 587  	    in_disputed_amount_currency,
10:28:42 588  	    in_dispute_reason,
10:28:42 589  	    in_dispute_filing_date,
10:28:42 590  	    in_dispute_status,
10:28:42 591  	    in_dispute_case_id,
10:28:42 592  	    in_invoice_id,
10:28:42 593  	    var_date,
10:28:42 594  	    in_created_by
10:28:42 595  	  );
10:28:42 596  
10:28:42 597  	out_pp_dispute_id := var_pp_dispute_id;
10:28:42 598  END CREATE_PP_DISPUTE;
10:28:42 599  
10:28:42 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
10:28:42 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
10:28:42 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
10:28:42 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:28:42 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
10:28:42 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
10:28:42 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
10:28:42 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
10:28:42 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
10:28:42 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
10:28:42 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
10:28:42 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
10:28:42 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
10:28:42 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
10:28:42 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
10:28:42 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
10:28:42 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
10:28:42 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
10:28:42 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
10:28:42 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
10:28:42 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
10:28:42 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
10:28:42 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
10:28:42 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
10:28:42 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
10:28:42 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
10:28:42 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
10:28:42 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
10:28:42 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
10:28:42 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
10:28:42 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
10:28:42 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
10:28:42 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
10:28:42 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
10:28:42 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
10:28:42 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
10:28:42 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
10:28:42 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
10:28:42 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
10:28:42 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
10:28:42 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
10:28:42 641  ) AS
10:28:42 642  -- VARIABLES
10:28:42 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
10:28:42 644  var_date DATE := SYSDATE;
10:28:42 645  BEGIN
10:28:42 646  	IF in_pp_trans_detail_id IS NULL THEN
10:28:42 647  	  SELECT
10:28:42 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
10:28:42 649  	  FROM DUAL;
10:28:42 650  	ELSE
10:28:42 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
10:28:42 652  	END IF;
10:28:42 653  	INSERT INTO
10:28:42 654  	  RCN_PP_TRANS_DETAIL (
10:28:42 655  	    id,
10:28:42 656  	    rcn_ext_source_log_id,
10:28:42 657  	    transaction_id,
10:28:42 658  	    invoice_id,
10:28:42 659  	    pp_ref_id,
10:28:42 660  	    trans_event_code,
10:28:42 661  	    trans_init_date,
10:28:42 662  	    trans_comp_date,
10:28:42 663  	    trans_deb_or_cred,
10:28:42 664  	    gross_trans_amount,
10:28:42 665  	    gross_trans_currency,
10:28:42 666  	    fee_deb_or_cred,
10:28:42 667  	    fee_amount,
10:28:42 668  	    fee_currency,
10:28:42 669  	    trans_status,
10:28:42 670  	    insurance_amount,
10:28:42 671  	    sales_tax_amount,
10:28:42 672  	    shipping_amount,
10:28:42 673  	    trans_subject,
10:28:42 674  	    trans_note,
10:28:42 675  	    payer_acct_id,
10:28:42 676  	    payer_addr_status,
10:28:42 677  	    item_name,
10:28:42 678  	    item_id,
10:28:42 679  	    option_1_name,
10:28:42 680  	    option_1_value,
10:28:42 681  	    option_2_name,
10:28:42 682  	    option_2_value,
10:28:42 683  	    auction_site,
10:28:42 684  	    auction_buyer_id,
10:28:42 685  	    auction_closing_date,
10:28:42 686  	    shipping_addr_line_1,
10:28:42 687  	    shipping_addr_line_2,
10:28:42 688  	    shipping_addr_city,
10:28:42 689  	    shipping_addr_state,
10:28:42 690  	    shipping_addr_zip,
10:28:42 691  	    shipping_addr_country,
10:28:42 692  	    custom_field,
10:28:42 693  	    create_date,
10:28:42 694  	    created_by
10:28:42 695  	  ) VALUES (
10:28:42 696  	    var_pp_trans_detail_id,
10:28:42 697  	    in_ext_source_log_id,
10:28:42 698  	    in_transaction_id,
10:28:42 699  	    in_invoice_id,
10:28:42 700  	    in_pp_ref_id,
10:28:42 701  	    in_trans_event_code,
10:28:42 702  	    in_trans_init_date,
10:28:42 703  	    in_trans_comp_date,
10:28:42 704  	    in_trans_deb_or_cred,
10:28:42 705  	    in_gross_trans_amount,
10:28:42 706  	    in_gross_trans_currency,
10:28:42 707  	    in_fee_deb_or_cred,
10:28:42 708  	    in_fee_amount,
10:28:42 709  	    in_fee_currency,
10:28:42 710  	    in_trans_status,
10:28:42 711  	    in_insurance_amount,
10:28:42 712  	    in_sales_tax_amount,
10:28:42 713  	    in_shipping_amount,
10:28:42 714  	    in_trans_subject,
10:28:42 715  	    in_trans_note,
10:28:42 716  	    in_payer_acct_id,
10:28:42 717  	    in_payer_addr_status,
10:28:42 718  	    in_item_name,
10:28:42 719  	    in_item_id,
10:28:42 720  	    in_option_1_name,
10:28:42 721  	    in_option_1_value,
10:28:42 722  	    in_option_2_name,
10:28:42 723  	    in_option_2_value,
10:28:42 724  	    in_auction_site,
10:28:42 725  	    in_auction_buyer_id,
10:28:42 726  	    in_auction_closing_date,
10:28:42 727  	    in_shipping_addr_line_1,
10:28:42 728  	    in_shipping_addr_line_2,
10:28:42 729  	    in_shipping_addr_city,
10:28:42 730  	    in_shipping_addr_state,
10:28:42 731  	    in_shipping_addr_zip,
10:28:42 732  	    in_shipping_addr_country,
10:28:42 733  	    in_custom_field,
10:28:42 734  	    var_date,
10:28:42 735  	    in_created_by
10:28:42 736  	  );
10:28:42 737  
10:28:42 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
10:28:42 739  END CREATE_PP_TRANS_DETAIL;
10:28:42 740  
10:28:42 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
10:28:42 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:28:42 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
10:28:42 744  ) AS
10:28:42 745  BEGIN
10:28:42 746  	DELETE FROM
10:28:42 747  	  RCN_EXT_SOURCE_LOG
10:28:42 748  	WHERE
10:28:42 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
10:28:42 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
10:28:42 751  END DELETE_EXT_SOURCE_LOG;
10:28:42 752  
10:28:42 753  PROCEDURE GET_EXT_SOURCE_LOG (
10:28:42 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:28:42 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
10:28:42 756  	out_result_set		 OUT SYS_REFCURSOR
10:28:42 757  ) AS
10:28:42 758  BEGIN
10:28:42 759  	OPEN out_result_set FOR
10:28:42 760  	SELECT * FROM
10:28:42 761  	  RCN_EXT_SOURCE_LOG
10:28:42 762  	WHERE
10:28:42 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
10:28:42 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
10:28:42 765  END GET_EXT_SOURCE_LOG;
10:28:42 766  
10:28:42 767  FUNCTION CHECK_EXT_SOURCE_LOG (
10:28:42 768  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:28:42 769  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
10:28:42 770  ) RETURN NUMBER AS
10:28:42 771  var_exists NUMBER;
10:28:42 772  BEGIN
10:28:42 773  	SELECT count(1) INTO var_exists
10:28:42 774  	FROM
10:28:42 775  	  RCN_EXT_SOURCE_LOG
10:28:42 776  	WHERE
10:28:42 777  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
10:28:42 778  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
10:28:42 779  
10:28:42 780  	IF var_exists > 1 THEN
10:28:42 781  	  var_exists := 1;
10:28:42 782  	END IF;
10:28:42 783  
10:28:42 784  	RETURN var_exists;
10:28:42 785  END;
10:28:42 786  
10:28:42 787  PROCEDURE CREATE_AMEX_CHARGEBACK (
10:28:42 788  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
10:28:42 789  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
10:28:42 790  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
10:28:42 791  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
10:28:42 792  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
10:28:42 793  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
10:28:42 794  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
10:28:42 795  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
10:28:42 796  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
10:28:42 797  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
10:28:42 798  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
10:28:42 799  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
10:28:42 800  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
10:28:42 801  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
10:28:42 802  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
10:28:42 803  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
10:28:42 804  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
10:28:42 805  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
10:28:42 806  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
10:28:42 807  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
10:28:42 808  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
10:28:42 809  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
10:28:42 810  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
10:28:42 811  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
10:28:42 812  ) AS
10:28:42 813  var_amex_chargeback_id RCN_AMEX_CHARGEBACK.ID%TYPE;
10:28:42 814  var_date DATE := SYSDATE;
10:28:42 815  var_charge_id NUMBER ;
10:28:42 816  BEGIN
10:28:42 817  	SELECT
10:28:42 818  	  RCNAMEXCB_ID_SEQ.nextVal into var_amex_chargeback_id
10:28:42 819  	FROM DUAL;
10:28:42 820  
10:28:42 821  	INSERT INTO
10:28:42 822  	  RCN_AMEX_CHARGEBACK (
10:28:42 823  	    id,
10:28:42 824  	    rcn_ext_source_log_id,
10:28:42 825  	    resolution,
10:28:42 826  	    from_system,
10:28:42 827  	    rejects_to_system,
10:28:42 828  	    disputes_to_system,
10:28:42 829  	    date_of_adjustment,
10:28:42 830  	    date_of_charge,
10:28:42 831  	    case_type,
10:28:42 832  	    cb_reas_code,
10:28:42 833  	    cb_amount,
10:28:42 834  	    cb_adjustment_number,
10:28:42 835  	    billed_amount,
10:28:42 836  	    soc_amount,
10:28:42 837  	    foreign_amount,
10:28:42 838  	    currency,
10:28:42 839  	    note1,
10:28:42 840  	    note2,
10:28:42 841  	    note3,
10:28:42 842  	    note4,
10:28:42 843  	    note5,
10:28:42 844  	    note6,
10:28:42 845  	    note7,
10:28:42 846  	    ind_ref_number,
10:28:42 847  	    create_date,
10:28:42 848  	    created_by,
10:28:42 849  	    update_date,
10:28:42 850  	    updated_by
10:28:42 851  	  ) VALUES (
10:28:42 852  	    var_amex_chargeback_id,
10:28:42 853  	    in_rcn_ext_source_log_id,
10:28:42 854  	    in_resolution,
10:28:42 855  	    in_from_system,
10:28:42 856  	    in_rejects_to_system,
10:28:42 857  	    in_disputes_to_system,
10:28:42 858  	    in_date_of_adjustment,
10:28:42 859  	    in_date_of_charge,
10:28:42 860  	    in_case_type,
10:28:42 861  	    in_cb_reas_code,
10:28:42 862  	    in_cb_amount,
10:28:42 863  	    in_cb_adjustment_number,
10:28:42 864  	    in_billed_amount,
10:28:42 865  	    in_soc_amount,
10:28:42 866  	    in_foreign_amount,
10:28:42 867  	    in_currency,
10:28:42 868  	    in_note1,
10:28:42 869  	    in_note2,
10:28:42 870  	    in_note3,
10:28:42 871  	    in_note4,
10:28:42 872  	    in_note5,
10:28:42 873  	    in_note6,
10:28:42 874  	    in_note7,
10:28:42 875  	    in_ind_ref_number,
10:28:42 876  	    var_date,
10:28:42 877  	    in_created_by,
10:28:42 878  	    var_date,
10:28:42 879  	    in_created_by
10:28:42 880  	  );
10:28:42 881  
10:28:42 882  	 BEGIN
10:28:42 883  	      SELECT
10:28:42 884  		      c.ID into var_charge_id
10:28:42 885  	      FROM
10:28:42 886  		      CHARGE c, TRANSACTION t
10:28:42 887  	      WHERE
10:28:42 888  		      c.TRANSACTION_ID = t.ID
10:28:42 889  		      AND T.ORDER_ID = LOWER(in_ind_ref_number)
10:28:42 890  		      AND rownum <= 1;
10:28:42 891  	      EXCEPTION
10:28:42 892  		      WHEN OTHERS THEN
10:28:42 893  			      var_charge_id := NULL;
10:28:42 894  	  END;
10:28:42 895  
10:28:42 896  	  IF var_charge_id IS NOT NULL
10:28:42 897  	  THEN
10:28:42 898  	      PROCS_CHARGE_V24.UPDATE_CHARGE_STATUS(var_charge_id,GLOBAL_STATUSES_V24.CHARGEBACK_SETTLED,in_created_by);
10:28:42 899  	  END IF;
10:28:42 900  
10:28:42 901  END CREATE_AMEX_CHARGEBACK;
10:28:42 902  
10:28:42 903  END PROCS_RECONCILIATION_CRU_V24;
10:28:42 904  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.16
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_subscription_cru.sql
Compiling body for procs_subscription_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_SUBSCRIPTION(
10:28:42   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
10:28:42   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
10:28:42   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
10:28:42   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
10:28:42   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
10:28:42   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
10:28:42  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
10:28:42  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
10:28:42  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
10:28:42  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
10:28:42  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
10:28:42  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
10:28:42  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
10:28:42  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
10:28:42  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
10:28:42  19  ) AS
10:28:42  20  -- VARIABLES
10:28:42  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
10:28:42  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:42  23  var_date DATE := SYSDATE;
10:28:42  24  BEGIN
10:28:42  25  	IF in_subscription_id IS NULL THEN
10:28:42  26  	  SELECT
10:28:42  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
10:28:42  28  	  FROM DUAL;
10:28:42  29  	ELSE
10:28:42  30  	  var_new_subscription_id := in_subscription_id;
10:28:42  31  	END IF;
10:28:42  32  	INSERT INTO SUBSCRIPTION (
10:28:42  33  	  ID,
10:28:42  34  	  SUSPEND_DATE,
10:28:42  35  	  ACCOUNT_ID,
10:28:42  36  	  PURCHASE_DATE,
10:28:42  37  	  OFFER_CHAIN_ID,
10:28:42  38  	  TERMINATION_DATE,
10:28:42  39  	  DAYS_REMAINING_ADJUSTMENT,
10:28:42  40  	  SCT_ID,
10:28:42  41  	  CREATE_DATE,
10:28:42  42  	  CREATED_BY,
10:28:42  43  	  UPDATE_DATE,
10:28:42  44  	  UPDATED_BY,
10:28:42  45  	  INSTRUMENT_TYPE_ID,
10:28:42  46  	  INSTRUMENT_ID,
10:28:42  47  	  SUBSCRIPTION_STATUS_ID,
10:28:42  48  	  CANCELLATION_DATE,
10:28:42  49  	  REACTIVATION_DATE
10:28:42  50  	) VALUES (
10:28:42  51  	  var_new_subscription_id,
10:28:42  52  	  in_suspend_date,
10:28:42  53  	  in_account_id,
10:28:42  54  	  in_purchase_date,
10:28:42  55  	  in_offer_chain_id,
10:28:42  56  	  in_termination_date,
10:28:42  57  	  in_days_remainning_ajustment,
10:28:42  58  	  in_sct_id,
10:28:42  59  	  var_date,
10:28:42  60  	  in_created_by,
10:28:42  61  	  var_date,
10:28:42  62  	  in_created_by,
10:28:42  63  	  in_instrument_type_id,
10:28:42  64  	  in_instrument_id,
10:28:42  65  	  in_subscription_status_id,
10:28:42  66  	  in_cancelation_date,
10:28:42  67  	  in_reactivation_date
10:28:42  68  	);
10:28:42  69  
10:28:42  70  	out_subscription_id := var_new_subscription_id;
10:28:42  71  END CREATE_SUBSCRIPTION;
10:28:42  72  
10:28:42  73  /******************************************************************************/
10:28:42  74  
10:28:42  75  PROCEDURE UPDATE_SUBSCRIPTION(
10:28:42  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
10:28:42  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
10:28:42  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
10:28:42  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
10:28:42  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
10:28:42  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
10:28:42  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
10:28:42  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:28:42  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
10:28:42  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
10:28:42  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
10:28:42  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
10:28:42  88  ) AS
10:28:42  89  BEGIN
10:28:42  90  	-- Create history
10:28:42  91  	PROCS_HISTORY_V24.CREATE_SUBSCRIPTION_HISTORY(
10:28:42  92  	  in_subscription_id	       => in_subscription_id,
10:28:42  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42  94  	);
10:28:42  95  
10:28:42  96  	UPDATE SUBSCRIPTION SET
10:28:42  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
10:28:42  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
10:28:42  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
10:28:42 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
10:28:42 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
10:28:42 102  	  UPDATE_DATE		    = SYSDATE,
10:28:42 103  	  UPDATED_BY		    = in_updated_by,
10:28:42 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
10:28:42 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
10:28:42 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
10:28:42 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
10:28:42 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
10:28:42 109  	WHERE
10:28:42 110  	  ID = in_subscription_id;
10:28:42 111  END UPDATE_SUBSCRIPTION;
10:28:42 112  
10:28:42 113  /******************************************************************************/
10:28:42 114  
10:28:42 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
10:28:42 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
10:28:42 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:28:42 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
10:28:42 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:28:42 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
10:28:42 121  ) AS
10:28:42 122  BEGIN
10:28:42 123  	IF inout_subscription_note_id IS NULL THEN
10:28:42 124  	  SELECT
10:28:42 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
10:28:42 126  	  FROM DUAL;
10:28:42 127  	END IF;
10:28:42 128  	INSERT INTO SUBSCRIPTION_NOTE (
10:28:42 129  	  ID,
10:28:42 130  	  AGENT_ID,
10:28:42 131  	  SUBSCRIPTION_ID,
10:28:42 132  	  NOTE,
10:28:42 133  	  CREATE_DATE,
10:28:42 134  	  CREATED_BY
10:28:42 135  	) VALUES (
10:28:42 136  	  inout_subscription_note_id,
10:28:42 137  	  in_agent_id,
10:28:42 138  	  in_subscription_id,
10:28:42 139  	  in_note,
10:28:42 140  	  SYSDATE,
10:28:42 141  	  in_created_by
10:28:42 142  	);
10:28:42 143  END CREATE_SUBSCRIPTION_NOTE;
10:28:42 144  
10:28:42 145  END PROCS_SUBSCRIPTION_CRU_V24;
10:28:42 146  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_taxes_cru.sql
Compiling body for procs_taxes_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_TAX (
10:28:42   4  	inout_tax_id		 IN OUT NUMBER,
10:28:42   5  	in_tax_type_id		 IN NUMBER,
10:28:42   6  	in_calculated_amount	 IN NUMBER,
10:28:42   7  	in_created_by		 IN VARCHAR2,
10:28:42   8  	in_line_item_id 	 IN NUMBER,
10:28:42   9  	in_effective_rate	 IN VARCHAR2,
10:28:42  10  	in_taxable_amount	 IN NUMBER,
10:28:42  11  	in_tax_rule_id		 IN NUMBER,
10:28:42  12  	in_jurisdiction_level_id IN NUMBER,
10:28:42  13  	in_jurisdiction_name	 IN VARCHAR2,
10:28:42  14  	in_jurisdiction_id	 IN VARCHAR2,
10:28:42  15  	in_ext_tax_type 	 IN VARCHAR2,
10:28:42  16  	in_ext_result		 IN VARCHAR2,
10:28:42  17  	in_imposition_type	 IN VARCHAR2,
10:28:42  18  	in_imposition		 IN VARCHAR2
10:28:42  19  ) AS
10:28:42  20  var_date DATE := SYSDATE;
10:28:42  21  BEGIN
10:28:42  22  
10:28:42  23  	IF inout_tax_id IS NULL THEN
10:28:42  24  	  SELECT
10:28:42  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
10:28:42  26  	  FROM DUAL;
10:28:42  27  	END IF;
10:28:42  28  
10:28:42  29  	INSERT INTO TAX (
10:28:42  30  	  ID,
10:28:42  31  	  TAX_TYPE_ID,
10:28:42  32  	  CALCULATED_AMOUNT,
10:28:42  33  	  CREATE_DATE,
10:28:42  34  	  CREATED_BY,
10:28:42  35  	  LINE_ITEM_ID,
10:28:42  36  	  EFFECTIVE_RATE,
10:28:42  37  	  TAXABLE_AMOUNT,
10:28:42  38  	  TAX_RULE_ID,
10:28:42  39  	  JURISDICTION_LEVEL_ID,
10:28:42  40  	  JURISDICTION_NAME,
10:28:42  41  	  JURISDICTION_ID,
10:28:42  42  	  EXT_TAX_TYPE,
10:28:42  43  	  EXT_RESULT,
10:28:42  44  	  IMPOSITION_TYPE,
10:28:42  45  	  IMPOSITION
10:28:42  46  	) VALUES (
10:28:42  47  	  inout_tax_id,
10:28:42  48  	  in_tax_type_id,
10:28:42  49  	  in_calculated_amount,
10:28:42  50  	  var_date,
10:28:42  51  	  in_created_by,
10:28:42  52  	  in_line_item_id,
10:28:42  53  	  in_effective_rate,
10:28:42  54  	  in_taxable_amount,
10:28:42  55  	  in_tax_rule_id,
10:28:42  56  	  in_jurisdiction_level_id,
10:28:42  57  	  in_jurisdiction_name,
10:28:42  58  	  in_jurisdiction_id,
10:28:42  59  	  in_ext_tax_type,
10:28:42  60  	  in_ext_result,
10:28:42  61  	  in_imposition_type,
10:28:42  62  	  in_imposition
10:28:42  63  	);
10:28:42  64  
10:28:42  65  END CREATE_TAX;
10:28:42  66  
10:28:42  67  END PROCS_TAXES_CRU_V24;
10:28:42  68  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_transaction_cru.sql
Compiling body for procs_transaction_cru.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_TRANSACTION (
10:28:42   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
10:28:42   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
10:28:42   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
10:28:42   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
10:28:42   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
10:28:42   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
10:28:42  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V24.FALSE,
10:28:42  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
10:28:42  12  ) AS
10:28:42  13  -- VARIABLES
10:28:42  14  var_transaction_id TRANSACTION.ID%TYPE;
10:28:42  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:42  16  var_date DATE := SYSDATE;
10:28:42  17  BEGIN
10:28:42  18  	IF in_transaction_id IS NULL THEN
10:28:42  19  	  SELECT
10:28:42  20  	    TRN_ID_SEQ.nextVal into var_transaction_id
10:28:42  21  	  FROM DUAL;
10:28:42  22  	ELSE
10:28:42  23  	  var_transaction_id := in_transaction_id;
10:28:42  24  	END IF;
10:28:42  25  	INSERT INTO
10:28:42  26  	  TRANSACTION (
10:28:42  27  	    ID,
10:28:42  28  	    TRANSACTION_STATUS_ID,
10:28:42  29  	    TRANSACTION_AMOUNT,
10:28:42  30  	    CREATE_DATE,
10:28:42  31  	    CREATED_BY,
10:28:42  32  	    UPDATE_DATE,
10:28:42  33  	    UPDATED_BY,
10:28:42  34  	    ORDER_ID,
10:28:42  35  	    IS_REFUND,
10:28:42  36  	    TRANSACTION_TYPE_CODE
10:28:42  37  	  ) VALUES (
10:28:42  38  	    var_transaction_id,
10:28:42  39  	    in_transaction_status_id,
10:28:42  40  	    in_transaction_amount,
10:28:42  41  	    var_date,
10:28:42  42  	    in_created_by,
10:28:42  43  	    var_date,
10:28:42  44  	    in_created_by,
10:28:42  45  	    in_order_id,
10:28:42  46  	    in_is_refund,
10:28:42  47  	    in_transaction_type_code
10:28:42  48  	  );
10:28:42  49  
10:28:42  50  	out_transaction_id := var_transaction_id;
10:28:42  51  END CREATE_TRANSACTION;
10:28:42  52  
10:28:42  53  /*******************************************************************/
10:28:42  54  
10:28:42  55  PROCEDURE UPDATE_TRANSACTION (
10:28:42  56  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
10:28:42  57  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
10:28:42  58  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
10:28:42  59  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
10:28:42  60  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
10:28:42  61  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
10:28:42  62  ) AS
10:28:42  63  BEGIN
10:28:42  64  	-- Create history
10:28:42  65  	PROCS_HISTORY_V24.CREATE_TRANSACTION_HISTORY(
10:28:42  66  	  in_transaction_id	       => in_transaction_id,
10:28:42  67  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42  68  	);
10:28:42  69  	UPDATE
10:28:42  70  	  TRANSACTION
10:28:42  71  	SET
10:28:42  72  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
10:28:42  73  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
10:28:42  74  	  UPDATE_DATE		= SYSDATE,
10:28:42  75  	  UPDATED_BY		= in_updated_by,
10:28:42  76  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
10:28:42  77  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
10:28:42  78  	WHERE
10:28:42  79  	  ID = in_transaction_id;
10:28:42  80  END UPDATE_TRANSACTION;
10:28:42  81  
10:28:42  82  /*******************************************************************/
10:28:42  83  
10:28:42  84  PROCEDURE READ_TRANSACTION (
10:28:42  85  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:28:42  86  	out_result_set	  OUT SYS_REFCURSOR
10:28:42  87  ) AS
10:28:42  88  BEGIN
10:28:42  89  	OPEN out_result_set FOR
10:28:42  90  	SELECT
10:28:42  91  	  ID,
10:28:42  92  	  TRANSACTION_STATUS_ID,
10:28:42  93  	  TRANSACTION_TYPE_CODE,
10:28:42  94  	  TRANSACTION_AMOUNT,
10:28:42  95  	  CREATE_DATE,
10:28:42  96  	  CREATED_BY,
10:28:42  97  	  UPDATE_DATE,
10:28:42  98  	  UPDATED_BY,
10:28:42  99  	  ORDER_ID,
10:28:42 100  	  IS_REFUND,
10:28:42 101  	  IS_SETTLED
10:28:42 102  	FROM
10:28:42 103  	  TRANSACTION
10:28:42 104  	WHERE
10:28:42 105  	  ID = in_transaction_id;
10:28:42 106  END READ_TRANSACTION;
10:28:42 107  
10:28:42 108  /*******************************************************************/
10:28:42 109  
10:28:42 110  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
10:28:42 111  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
10:28:42 112  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
10:28:42 113  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
10:28:42 114  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:28:42 115  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
10:28:42 116  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
10:28:42 117  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
10:28:42 118  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
10:28:42 119  ) AS
10:28:42 120  BEGIN
10:28:42 121  	IF inout_transaction_attempt_id IS NULL THEN
10:28:42 122  	  SELECT
10:28:42 123  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
10:28:42 124  	  FROM DUAL;
10:28:42 125  	END IF;
10:28:42 126  	INSERT INTO TRANSACTION_ATTEMPT (
10:28:42 127  	  ID,
10:28:42 128  	  TRANSACTION_ID,
10:28:42 129  	  EXTERNAL_STATUS_CODE,
10:28:42 130  	  EXTERNAL_STATUS_MESSAGE,
10:28:42 131  	  CREATE_DATE,
10:28:42 132  	  CREATED_BY,
10:28:42 133  	  EXTERNAL_TRANSACTION_ID,
10:28:42 134  	  TRANSACTION_START_TIME,
10:28:42 135  	  TRANSACTION_ATTEMPT_STATUS_ID
10:28:42 136  	) VALUES (
10:28:42 137  	  inout_transaction_attempt_id,
10:28:42 138  	  in_transaction_id,
10:28:42 139  	  in_external_status_code,
10:28:42 140  	  in_external_status_message,
10:28:42 141  	  SYSDATE,
10:28:42 142  	  in_created_by,
10:28:42 143  	  in_external_transaction_id,
10:28:42 144  	  in_transaction_start_time,
10:28:42 145  	  in_status_id
10:28:42 146  	);
10:28:42 147  END;
10:28:42 148  
10:28:42 149  /*******************************************************************/
10:28:42 150  
10:28:42 151  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
10:28:42 152  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
10:28:42 153  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
10:28:42 154  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:28:42 155  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
10:28:42 156  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
10:28:42 157  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
10:28:42 158  ) AS
10:28:42 159  BEGIN
10:28:42 160  	UPDATE
10:28:42 161  	  TRANSACTION_ATTEMPT
10:28:42 162  	SET
10:28:42 163  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
10:28:42 164  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
10:28:42 165  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
10:28:42 166  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
10:28:42 167  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
10:28:42 168  	WHERE
10:28:42 169  	  ID = in_transaction_attempt_id;
10:28:42 170  END;
10:28:42 171  
10:28:42 172  /*******************************************************************/
10:28:42 173  
10:28:42 174  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:28:42 175  /*
10:28:42 176  Throws exceptions:
10:28:42 177  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:42 178  APP_EXCEPTION_CODES_V24.INTRNAL_ERROR
10:28:42 179  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42 180  */
10:28:42 181  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:28:42 182  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:28:42 183  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:28:42 184  ) AS
10:28:42 185  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
10:28:42 186  -- EXCEPTIONS
10:28:42 187  BAD_TRANSACTION_ID EXCEPTION;
10:28:42 188  BEGIN
10:28:42 189  
10:28:42 190  	PROCS_HISTORY_V24.CREATE_TRANSACTION_HISTORY(
10:28:42 191  	  in_transaction_id	       => in_transaction_id,
10:28:42 192  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42 193  	);
10:28:42 194  
10:28:42 195  	UPDATE
10:28:42 196  	  TRANSACTION
10:28:42 197  	SET
10:28:42 198  	  TRANSACTION.ORDER_ID	 = in_order_id,
10:28:42 199  	  TRANSACTION.UPDATED_BY = in_updated_by,
10:28:42 200  	  TRANSACTION.UPDATE_DATE= SYSDATE
10:28:42 201  	WHERE
10:28:42 202  	  TRANSACTION.ID = in_transaction_id
10:28:42 203  	  AND TRANSACTION.ORDER_ID IS NULL;
10:28:42 204  
10:28:42 205  	IF SQL%ROWCOUNT = 0 THEN
10:28:42 206  	  RAISE BAD_TRANSACTION_ID;
10:28:42 207  	END IF;
10:28:42 208  EXCEPTION
10:28:42 209  WHEN BAD_TRANSACTION_ID THEN
10:28:42 210  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:42 211  	  SPROC_NAME, 'No such transaction');
10:28:42 212  END UPDATE_TRANSACTION_ORDER_ID;
10:28:42 213  
10:28:42 214  END PROCS_TRANSACTION_CRU_V24;
10:28:42 215  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.08
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_address.sql
Compiling body for procs_address.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_ADDRESS(
10:28:42   4  /*
10:28:42   5  Throws exceptions:
10:28:42   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42   7  */
10:28:42   8  	  out_address_id	OUT NUMBER,
10:28:42   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:28:42  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:28:42  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:28:42  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:28:42  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:42  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:28:42  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
10:28:42  16  ) AS
10:28:42  17  -- VARIABLES
10:28:42  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
10:28:42  19  -- EXCEPTIONS
10:28:42  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:42  21  BEGIN
10:28:42  22  
10:28:42  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V24.CREATE_ADDRESS(
10:28:42  24  	  out_address_id      => out_address_id,
10:28:42  25  	  in_address_id       => null,
10:28:42  26  	  in_address1	      => in_address1,
10:28:42  27  	  in_address2	      => in_address2,
10:28:42  28  	  in_city	      => in_city,
10:28:42  29  	  in_state	      => in_state,
10:28:42  30  	  in_postal_code      => in_postal_code,
10:28:42  31  	  in_country	      => in_country,
10:28:42  32  	  in_created_by       => in_created_by
10:28:42  33  	);
10:28:42  34  
10:28:42  35  END CREATE_ADDRESS;
10:28:42  36  
10:28:42  37  PROCEDURE UPDATE_ADDRESS(
10:28:42  38  /*
10:28:42  39  Throws exceptions:
10:28:42  40  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42  41  */
10:28:42  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
10:28:42  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:28:42  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:28:42  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:28:42  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:28:42  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:42  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:28:42  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
10:28:42  50  ) AS
10:28:42  51  BEGIN
10:28:42  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V24.UPDATE_ADDRESS(
10:28:42  53  	  in_address_id 	=> in_address_id,
10:28:42  54  	  in_address1		=> in_address1,
10:28:42  55  	  in_address2		=> in_address2,
10:28:42  56  	  in_city		=> in_city,
10:28:42  57  	  in_state		=> in_state,
10:28:42  58  	  in_postal_code	=> in_postal_code,
10:28:42  59  	  in_country		=> in_country,
10:28:42  60  	  in_updated_by 	=> in_updated_by
10:28:42  61  	);
10:28:42  62  END UPDATE_ADDRESS;
10:28:42  63  
10:28:42  64  PROCEDURE GET_ADDRESS (
10:28:42  65  /*
10:28:42  66  Throws exceptions:
10:28:42  67  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42  68  */
10:28:42  69  	  in_id 		IN ADDRESS.ID%TYPE,
10:28:42  70  	  out_result_set	OUT SYS_REFCURSOR
10:28:42  71  ) AS
10:28:42  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
10:28:42  73  BEGIN
10:28:42  74  
10:28:42  75  OPEN out_result_set FOR
10:28:42  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
10:28:42  77  
10:28:42  78  END GET_ADDRESS;
10:28:42  79  
10:28:42  80  END PROCS_ADDRESS_V24;
10:28:42  81  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_adjustments.sql
Compiling body for procs_adjustments.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
10:28:42   4  	in_invoice_id		  IN NUMBER,
10:28:42   5  	in_adjustment_reason	  IN VARCHAR2,
10:28:42   6  	in_is_credit		  IN NUMBER,
10:28:42   7  	in_charge_id		  IN NUMBER,
10:28:42   8  	in_business_date	  IN DATE,
10:28:42   9  	in_created_by		  IN VARCHAR2,
10:28:42  10  	out_invoice_adjustment_id OUT NUMBER
10:28:42  11  ) AS
10:28:42  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
10:28:42  13  -- VARIABLES
10:28:42  14  var_current_date	    DATE := SYSDATE;
10:28:42  15  var_new_entity_id     NUMBER;
10:28:42  16  var_inv_adj_reason_id NUMBER;
10:28:42  17  -- EXCEPTIONS
10:28:42  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
10:28:42  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
10:28:42  20  BEGIN
10:28:42  21  
10:28:42  22  	IF in_is_credit != GLOBAL_CONSTANTS_V24.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:42  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
10:28:42  24  	END IF;
10:28:42  25  
10:28:42  26  	BEGIN
10:28:42  27  	  SELECT
10:28:42  28  	    ID into var_inv_adj_reason_id
10:28:42  29  	  FROM
10:28:42  30  	    INVOICE_ADJUSTMENT_REASON
10:28:42  31  	  WHERE
10:28:42  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
10:28:42  33  	  EXCEPTION
10:28:42  34  	    WHEN NO_DATA_FOUND THEN
10:28:42  35  	      RAISE DAB_ADJUSTMENT_REASON;
10:28:42  36  	END;
10:28:42  37  
10:28:42  38  	SELECT
10:28:42  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
10:28:42  40  	FROM
10:28:42  41  	  DUAL;
10:28:42  42  
10:28:42  43  	INSERT INTO INVOICE_ADJUSTMENT (
10:28:42  44  	  ID,
10:28:42  45  	  INVOICE_ID,
10:28:42  46  	  INVOICE_ADJUSTMENT_REASON_ID,
10:28:42  47  	  IS_CREDIT,
10:28:42  48  	  CHARGE_ID,
10:28:42  49  	  ADJUSTMENT_DATE,
10:28:42  50  	  CREATE_DATE,
10:28:42  51  	  CREATED_BY,
10:28:42  52  	  UPDATE_DATE,
10:28:42  53  	  UPDATED_BY
10:28:42  54  	)
10:28:42  55  	VALUES (
10:28:42  56  	  var_new_entity_id,
10:28:42  57  	  in_invoice_id,
10:28:42  58  	  var_inv_adj_reason_id,
10:28:42  59  	  in_is_credit,
10:28:42  60  	  in_charge_id,
10:28:42  61  	  in_business_date,
10:28:42  62  	  var_current_date,
10:28:42  63  	  in_created_by,
10:28:42  64  	  var_current_date,
10:28:42  65  	  in_created_by
10:28:42  66  	);
10:28:42  67  
10:28:42  68  	out_invoice_adjustment_id := var_new_entity_id;
10:28:42  69  
10:28:42  70  EXCEPTION
10:28:42  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
10:28:42  72  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:42  73  	  SPROC_NAME, 'Bad in_is_credit value');
10:28:42  74  WHEN DAB_ADJUSTMENT_REASON THEN
10:28:42  75  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:42  76  	  SPROC_NAME, 'Bad adjustment reason');
10:28:42  77  WHEN OTHERS THEN
10:28:42  78  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42  80  END CREATE_INVOICE_ADJUSTMENT;
10:28:42  81  
10:28:42  82  /******************************************************************************/
10:28:42  83  
10:28:42  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
10:28:42  85  	  in_invoice_id 	    IN NUMBER,
10:28:42  86  	  in_original_charge_id     IN NUMBER,
10:28:42  87  	  in_charge_id		    IN NUMBER,
10:28:42  88  	  in_updated_by 	    IN VARCHAR2
10:28:42  89  ) AS
10:28:42  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
10:28:42  91  var_invoice_adjustment_id NUMBER;
10:28:42  92  BEGIN
10:28:42  93  	SELECT
10:28:42  94  	  id into var_invoice_adjustment_id
10:28:42  95  	FROM
10:28:42  96  	  INVOICE_ADJUSTMENT
10:28:42  97  	WHERE INVOICE_ID = in_invoice_id
10:28:42  98  	      AND CHARGE_ID = in_original_charge_id;
10:28:42  99  
10:28:42 100  	--create history
10:28:42 101  	PROCS_HISTORY_V24.CREATE_INVOICE_ADJ_HISTORY(
10:28:42 102  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
10:28:42 103  	  in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42 104  	);
10:28:42 105  
10:28:42 106  	UPDATE INVOICE_ADJUSTMENT
10:28:42 107  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
10:28:42 108  	WHERE ID = var_invoice_adjustment_id;
10:28:42 109  
10:28:42 110  EXCEPTION
10:28:42 111  WHEN NO_DATA_FOUND THEN
10:28:42 112  	    NULL;
10:28:42 113  END UPDATE_INVOICE_ADJUSTMENT;
10:28:42 114  
10:28:42 115  /******************************************************************************/
10:28:42 116  
10:28:42 117  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
10:28:42 118  	in_line_item_id 	    IN NUMBER,
10:28:42 119  	in_invoice_adjustment_id    IN NUMBER,
10:28:42 120  	in_amount		    IN NUMBER,
10:28:42 121  	in_tax			    IN NUMBER,
10:28:42 122  	in_discount		    IN NUMBER,
10:28:42 123  	in_created_by		    IN VARCHAR2,
10:28:42 124  	out_line_item_adjustment_id OUT NUMBER
10:28:42 125  ) AS
10:28:42 126  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
10:28:42 127  -- VARIABLES
10:28:42 128  var_current_date DATE := SYSDATE;
10:28:42 129  var_new_entity_id NUMBER;
10:28:42 130  BEGIN
10:28:42 131  
10:28:42 132  	SELECT
10:28:42 133  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
10:28:42 134  	FROM
10:28:42 135  	  DUAL;
10:28:42 136  
10:28:42 137  	INSERT INTO LINE_ITEM_ADJUSTMENT (
10:28:42 138  	  ID,
10:28:42 139  	  LINE_ITEM_ID,
10:28:42 140  	  INVOICE_ADJUSTMENT_ID,
10:28:42 141  	  AMOUNT,
10:28:42 142  	  TAX,
10:28:42 143  	  DISCOUNT,
10:28:42 144  	  CREATE_DATE,
10:28:42 145  	  CREATED_BY
10:28:42 146  	)
10:28:42 147  	VALUES (
10:28:42 148  	  var_new_entity_id,
10:28:42 149  	  in_line_item_id,
10:28:42 150  	  in_invoice_adjustment_id,
10:28:42 151  	  in_amount,
10:28:42 152  	  in_tax,
10:28:42 153  	  in_discount,
10:28:42 154  	  var_current_date,
10:28:42 155  	  in_created_by
10:28:42 156  	);
10:28:42 157  
10:28:42 158  	out_line_item_adjustment_id := var_new_entity_id;
10:28:42 159  
10:28:42 160  EXCEPTION
10:28:42 161  WHEN OTHERS THEN
10:28:42 162  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 163  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 164  END CREATE_LINE_ITEM_ADJUSTMENT;
10:28:42 165  
10:28:42 166  /******************************************************************************/
10:28:42 167  
10:28:42 168  PROCEDURE CREATE_TAX_ADJUSTMENT (
10:28:42 169  	in_tax_id		   IN NUMBER,
10:28:42 170  	in_line_item_adjustment_id IN NUMBER,
10:28:42 171  	in_amount		   IN NUMBER,
10:28:42 172  	in_created_by		   IN VARCHAR2,
10:28:42 173  	out_tax_adjustment_id	   OUT NUMBER
10:28:42 174  ) AS
10:28:42 175  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
10:28:42 176  -- VARIABLES
10:28:42 177  var_current_date DATE := SYSDATE;
10:28:42 178  var_new_entity_id NUMBER;
10:28:42 179  BEGIN
10:28:42 180  
10:28:42 181  	SELECT
10:28:42 182  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
10:28:42 183  	FROM
10:28:42 184  	  DUAL;
10:28:42 185  
10:28:42 186  	INSERT INTO TAX_ADJUSTMENT (
10:28:42 187  	  ID,
10:28:42 188  	  TAX_ID,
10:28:42 189  	  LINE_ITEM_ADJUSTMENT_ID,
10:28:42 190  	  AMOUNT,
10:28:42 191  	  CREATE_DATE,
10:28:42 192  	  CREATED_BY
10:28:42 193  	)
10:28:42 194  	VALUES (
10:28:42 195  	  var_new_entity_id,
10:28:42 196  	  in_tax_id,
10:28:42 197  	  in_line_item_adjustment_id,
10:28:42 198  	  in_amount,
10:28:42 199  	  var_current_date,
10:28:42 200  	  in_created_by
10:28:42 201  	);
10:28:42 202  
10:28:42 203  	out_tax_adjustment_id := var_new_entity_id;
10:28:42 204  
10:28:42 205  EXCEPTION
10:28:42 206  WHEN OTHERS THEN
10:28:42 207  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 208  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 209  END CREATE_TAX_ADJUSTMENT;
10:28:42 210  
10:28:42 211  /******************************************************************************/
10:28:42 212  
10:28:42 213  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
10:28:42 214  	in_discount_id		   NUMBER,
10:28:42 215  	in_line_item_id 	   NUMBER,
10:28:42 216  	in_line_item_adjustment_id IN NUMBER,
10:28:42 217  	in_amount		   IN NUMBER,
10:28:42 218  	in_created_by		   IN VARCHAR2,
10:28:42 219  	out_discount_li_id	   OUT NUMBER
10:28:42 220  ) AS
10:28:42 221  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
10:28:42 222  -- VARIABLES
10:28:42 223  var_current_date DATE := SYSDATE;
10:28:42 224  var_new_entity_id NUMBER;
10:28:42 225  BEGIN
10:28:42 226  
10:28:42 227  	SELECT
10:28:42 228  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
10:28:42 229  	FROM
10:28:42 230  	  DUAL;
10:28:42 231  
10:28:42 232  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
10:28:42 233  	  ID,
10:28:42 234  	  DISCOUNT_ID,
10:28:42 235  	  LINE_ITEM_ID,
10:28:42 236  	  LINE_ITEM_ADJUSTMENT_ID,
10:28:42 237  	  AMOUNT,
10:28:42 238  	  CREATE_DATE,
10:28:42 239  	  CREATED_BY
10:28:42 240  	)
10:28:42 241  	VALUES (
10:28:42 242  	  var_new_entity_id,
10:28:42 243  	  in_discount_id,
10:28:42 244  	  in_line_item_id,
10:28:42 245  	  in_line_item_adjustment_id,
10:28:42 246  	  in_amount,
10:28:42 247  	  var_current_date,
10:28:42 248  	  in_created_by
10:28:42 249  	);
10:28:42 250  
10:28:42 251  	out_discount_li_id := var_new_entity_id;
10:28:42 252  
10:28:42 253  EXCEPTION
10:28:42 254  WHEN OTHERS THEN
10:28:42 255  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:42 256  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:42 257  END CREATE_DISCOUNT_LI_ADJUSTMENT;
10:28:42 258  
10:28:42 259  END PROCS_ADJUSTMENTS_V24;
10:28:42 260  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.09
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_adx.sql
Compiling body for procs_adx.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE GET_SUB_ADX_INFO (
10:28:42   4  /*
10:28:42   5  Throws exceptions:
10:28:42   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:42   7  */
10:28:42   8  	out_result_set	    OUT SYS_REFCURSOR,
10:28:42   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
10:28:42  10  ) AS
10:28:42  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
10:28:42  12  BEGIN
10:28:42  13  OPEN out_result_set FOR
10:28:42  14  SELECT /*+ FIRST_ROWS(5) */
10:28:42  15  	s.offer_chain_id,
10:28:42  16  	s.create_date,
10:28:42  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
10:28:42  18  	ocmd.value,
10:28:42  19  	a.group_id,
10:28:42  20  	s.id subscription_id
10:28:42  21  FROM
10:28:42  22  	account a,
10:28:42  23  	subscription s,
10:28:42  24  	offer_chain_meta_data ocmd,
10:28:42  25  	group_account g,
10:28:42  26  	subscription_share ss,
10:28:42  27  	account a2
10:28:42  28  WHERE
10:28:42  29  	s.account_id = a.id and
10:28:42  30  	s.offer_chain_id = ocmd.offer_chain_id and
10:28:42  31  	g.id = ss.group_account_id and
10:28:42  32  	ss.borrower_account_id = a2.id and
10:28:42  33  	s.id = g.subscription_id and
10:28:42  34  	ocmd.name = 'ADX_BUNDLE' and
10:28:42  35  	a2.group_id = in_group_id and
10:28:42  36  	rownum < 5
10:28:42  37  union all
10:28:42  38  SELECT /*+ FIRST_ROWS(5) */
10:28:42  39  	s.offer_chain_id,
10:28:42  40  	s.create_date,
10:28:42  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
10:28:42  42  	ocmd.value,
10:28:42  43  	a.group_id,
10:28:42  44  	s.id subscription_id
10:28:42  45  FROM
10:28:42  46  	account a,
10:28:42  47  	subscription s,
10:28:42  48  	offer_chain_meta_data ocmd
10:28:42  49  WHERE
10:28:42  50  	s.account_id = a.id and
10:28:42  51  	s.offer_chain_id = ocmd.offer_chain_id and
10:28:42  52  	ocmd.name = 'ADX_BUNDLE' and
10:28:42  53  	a.group_id = in_group_id and
10:28:42  54  	rownum < 5
10:28:42  55  ;
10:28:42  56  
10:28:42  57  END GET_SUB_ADX_INFO;
10:28:42  58  
10:28:42  59  END PROCS_ADX_V24;
10:28:42  60  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_amazon.sql
Compiling body for procs_amazon.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V24" AS
10:28:42   2  
10:28:42   3  PROCEDURE AASR_PURCHASE_TOKEN_USED(
10:28:42   4  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:28:42   5  	out_data	  OUT NUMBER
10:28:42   6  ) AS
10:28:42   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'AASR_PURCHASE_TOKEN_USED';
10:28:42   8  BEGIN
10:28:42   9  	SELECT
10:28:42  10  	  COUNT(1)
10:28:42  11  	INTO OUT_DATA
10:28:42  12  	FROM AMAZON_APPSTORE_RECEIPT
10:28:42  13  	WHERE PURCHASE_TOKEN = in_purchase_token;
10:28:42  14  	EXCEPTION
10:28:42  15  	WHEN NO_DATA_FOUND THEN
10:28:42  16  	out_data := 0;
10:28:42  17  END;
10:28:42  18  
10:28:42  19  PROCEDURE UPDATE_AASR_LAST_CHECK_DATE(
10:28:42  20  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:42  21  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:28:42  22  ) AS
10:28:42  23  BEGIN
10:28:42  24  	CORE_OWNER.PROCS_AMAZON_CRU_V24.UPDATE_AMAZON_APPSTORE_RECEIPT(
10:28:42  25  	  in_id 	     => in_id,
10:28:42  26  	  in_updated_by      => in_updated_by,
10:28:42  27  	  in_last_check_date => SYSDATE
10:28:42  28  	);
10:28:42  29  END UPDATE_AASR_LAST_CHECK_DATE;
10:28:42  30  
10:28:42  31  PROCEDURE EXPIRED_AASR_SUB_IDS(
10:28:42  32  	out_data   OUT SYS_REFCURSOR
10:28:42  33  ) AS
10:28:42  34  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRED_AASR_SUB_IDS';
10:28:42  35  BEGIN
10:28:42  36  	OPEN out_data FOR
10:28:42  37  	SELECT
10:28:42  38  	  *
10:28:42  39  	FROM
10:28:42  40  	  (
10:28:42  41  	    SELECT
10:28:42  42  	      AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
10:28:42  43  	    FROM AMAZON_APPSTORE_RECEIPT
10:28:42  44  	      INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
10:28:42  45  	    WHERE
10:28:42  46  	      AMAZON_APPSTORE_RECEIPT.END_DATE <= SYSDATE AND
10:28:42  47  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:42  48  	    ORDER BY dbms_random.value
10:28:42  49  	  )
10:28:42  50  	WHERE
10:28:42  51  	  ROWNUM <= 1000;
10:28:42  52  END EXPIRED_AASR_SUB_IDS;
10:28:42  53  
10:28:42  54  PROCEDURE UPDATE_AASR_PURCHASE_TOKEN(
10:28:42  55  	in_id		  IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:42  56  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:28:42  57  	in_updated_by	  IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:28:42  58  ) AS
10:28:42  59  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AASR_PURCHASE_TOKEN';
10:28:42  60  BEGIN
10:28:42  61  	  CORE_OWNER.PROCS_AMAZON_CRU_V24.UPDATE_AMAZON_APPSTORE_RECEIPT(
10:28:42  62  	      in_id		  => in_id,
10:28:42  63  	      in_updated_by	  => in_updated_by,
10:28:42  64  	      in_purchase_token   => in_purchase_token
10:28:42  65  	  );
10:28:42  66  END UPDATE_AASR_PURCHASE_TOKEN;
10:28:42  67  
10:28:42  68  PROCEDURE UPDATE_AASR_END_DATE(
10:28:42  69  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:42  70  	in_end_date   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE,
10:28:42  71  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:28:42  72  ) AS
10:28:42  73  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AASR_END_DATE';
10:28:42  74  BEGIN
10:28:42  75  	CORE_OWNER.PROCS_AMAZON_CRU_V24.UPDATE_AMAZON_APPSTORE_RECEIPT(
10:28:42  76  	    in_id	  => in_id,
10:28:42  77  	    in_updated_by => in_updated_by,
10:28:42  78  	    in_end_date   => in_end_date
10:28:42  79  	);
10:28:42  80  END UPDATE_AASR_END_DATE;
10:28:42  81  
10:28:42  82  PROCEDURE AASR_RECEIPTS_WITH_ACTIVE_SUBS(
10:28:42  83  	out_data   OUT SYS_REFCURSOR,
10:28:42  84  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:42  85  ) AS
10:28:42  86  SPROC_NAME CONSTANT VARCHAR2(32) := 'AASR_RECEIPTS_WITH_ACTIVE_SUBS';
10:28:42  87  BEGIN
10:28:42  88  	OPEN out_data FOR
10:28:42  89  	SELECT
10:28:42  90  	  *
10:28:42  91  	FROM (
10:28:42  92  	  SELECT
10:28:42  93  	    AMAZON_APPSTORE_RECEIPT.ID,
10:28:42  94  	    AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
10:28:42  95  	    AMAZON_APPSTORE_RECEIPT.USER_ID,
10:28:42  96  	    AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
10:28:42  97  	    AMAZON_APPSTORE_RECEIPT.START_DATE,
10:28:42  98  	    AMAZON_APPSTORE_RECEIPT.END_DATE,
10:28:42  99  	    AMAZON_APPSTORE_RECEIPT.SKU,
10:28:42 100  	    AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
10:28:42 101  	    AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
10:28:42 102  	    AMAZON_APPSTORE_RECEIPT.CREATED_BY,
10:28:42 103  	    AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
10:28:42 104  	    AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
10:28:42 105  	    AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
10:28:42 106  	  FROM AMAZON_APPSTORE_RECEIPT
10:28:42 107  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
10:28:42 108  	  WHERE
10:28:42 109  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:42 110  	    AND NOT EXISTS
10:28:42 111  	    (
10:28:42 112  		SELECT
10:28:42 113  		  NULL
10:28:42 114  		FROM PROCESS_RETRY_THROTTLE
10:28:42 115  		WHERE PROCESS_NAME = in_process_name
10:28:42 116  		      AND GENERIC_ID = AMAZON_APPSTORE_RECEIPT.ID
10:28:42 117  	    )
10:28:42 118  	  ORDER BY dbms_random.value
10:28:42 119  	)
10:28:42 120  	WHERE
10:28:42 121  	  ROWNUM <= 1000;
10:28:42 122  END AASR_RECEIPTS_WITH_ACTIVE_SUBS;
10:28:42 123  
10:28:42 124  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
10:28:42 125  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:42 126  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:28:42 127  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
10:28:42 128  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
10:28:42 129  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:28:42 130  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:28:42 131  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:28:42 132  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
10:28:42 133  ) AS
10:28:42 134  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE_RECEIPT';
10:28:42 135  BEGIN
10:28:42 136  	CORE_OWNER.PROCS_AMAZON_CRU_V24.ADD_AMAZON_APPSTORE_RECEIPT(
10:28:42 137  	    in_subscription_id =>  in_subscription_id,
10:28:42 138  	    in_user_id	       =>  in_user_id,
10:28:42 139  	    in_item_type       =>  in_item_type,
10:28:42 140  	    in_start_date      =>  in_start_date,
10:28:42 141  	    in_end_date        =>  in_end_date,
10:28:42 142  	    in_sku	       =>  in_sku,
10:28:42 143  	    in_purchase_token  =>  in_purchase_token,
10:28:42 144  	    in_created_by      =>  in_created_by
10:28:42 145  	);
10:28:42 146  END ADD_AMAZON_APPSTORE_RECEIPT;
10:28:42 147  
10:28:42 148  PROCEDURE AMAZON_APPSTORE_RECEIPTS(
10:28:42 149  	in_user_id IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:28:42 150  	in_sku	   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:28:42 151  	out_data   OUT SYS_REFCURSOR
10:28:42 152  ) AS
10:28:42 153  SPROC_NAME CONSTANT VARCHAR2(32) := 'AMAZON_APPSTORE_RECEIPTS';
10:28:42 154  BEGIN
10:28:42 155  	OPEN out_data FOR
10:28:42 156  	SELECT
10:28:42 157  	  AMAZON_APPSTORE_RECEIPT.ID,
10:28:42 158  	  AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
10:28:42 159  	  AMAZON_APPSTORE_RECEIPT.USER_ID,
10:28:42 160  	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
10:28:42 161  	  AMAZON_APPSTORE_RECEIPT.START_DATE,
10:28:42 162  	  AMAZON_APPSTORE_RECEIPT.END_DATE,
10:28:42 163  	  AMAZON_APPSTORE_RECEIPT.SKU,
10:28:42 164  	  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
10:28:42 165  	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
10:28:42 166  	  AMAZON_APPSTORE_RECEIPT.CREATED_BY,
10:28:42 167  	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
10:28:42 168  	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
10:28:42 169  	  AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
10:28:42 170  	FROM AMAZON_APPSTORE_RECEIPT
10:28:42 171  	  INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
10:28:42 172  	WHERE AMAZON_APPSTORE_RECEIPT.USER_ID = in_user_id AND
10:28:42 173  	      AMAZON_APPSTORE_RECEIPT.SKU = in_sku AND
10:28:42 174  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE;
10:28:42 175  END AMAZON_APPSTORE_RECEIPTS;
10:28:42 176  
10:28:42 177  	PROCEDURE CREATE_AMAZON_SUB(
10:28:42 178  	  out_id	      OUT NUMBER,
10:28:42 179  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
10:28:42 180  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
10:28:42 181  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
10:28:42 182  ) AS
10:28:42 183  -- VARIABLES
10:28:42 184  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
10:28:42 185  -- EXCEPTIONS
10:28:42 186  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:42 187  BEGIN
10:28:42 188  
10:28:42 189  	CORE_OWNER.PROCS_AMAZON_CRU_V24.CREATE_AMAZON_SUB(
10:28:42 190  	  out_id	      =>  out_id,
10:28:42 191  	  in_subscription_id  =>  in_subscription_id,
10:28:42 192  	  in_amazon_id	      =>  in_amazon_id,
10:28:42 193  	  in_created_by       =>  in_created_by
10:28:42 194  	);
10:28:42 195  
10:28:42 196  END CREATE_AMAZON_SUB;
10:28:42 197  
10:28:42 198  PROCEDURE GET_ACTIVE_SUB_IDS (
10:28:42 199  	out_result_set	    OUT SYS_REFCURSOR,
10:28:42 200  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
10:28:42 201  ) AS
10:28:42 202  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
10:28:42 203  BEGIN
10:28:42 204  OPEN out_result_set FOR
10:28:42 205  SELECT s.id
10:28:42 206  FROM subscription s, amazon_sub am
10:28:42 207  WHERE
10:28:42 208  	s.id = am.subscription_id
10:28:42 209  	and s.subscription_status_id = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:42 210  	and am.amazon_id = in_amazon_id
10:28:42 211  ;
10:28:42 212  
10:28:42 213  END GET_ACTIVE_SUB_IDS;
10:28:42 214  
10:28:42 215  PROCEDURE GET_ACTIVE_GROUP_IDS (
10:28:42 216  	out_result_set	    OUT SYS_REFCURSOR,
10:28:42 217  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
10:28:42 218  ) AS
10:28:42 219  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
10:28:42 220  BEGIN
10:28:42 221  OPEN out_result_set FOR
10:28:42 222  SELECT distinct a.group_id id
10:28:42 223  FROM subscription s, amazon_sub am, account a
10:28:42 224  WHERE
10:28:42 225  	s.id = am.subscription_id
10:28:42 226  	and a.id = s.account_id
10:28:42 227  	and s.subscription_status_id = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:42 228  	and am.amazon_id = in_amazon_id
10:28:42 229  ;
10:28:42 230  
10:28:42 231  END GET_ACTIVE_GROUP_IDS;
10:28:42 232  
10:28:42 233  END PROCS_AMAZON_V24;
10:28:42 234  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.05
10:28:42 SQL> 
10:28:42 SQL> prompt Compiling body for procs_cupy.sql
Compiling body for procs_cupy.sql
10:28:42 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
10:28:42   2  
10:28:42   3  	/****************************************************************************/
10:28:42   4  
10:28:42   5  	PROCEDURE POPULATE_REQUEST_INFO(
10:28:42   6  	  in_hours_prior    IN	NUMBER,
10:28:42   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
10:28:42   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
10:28:42   9  	) AS
10:28:42  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
10:28:42  11  	var_start_date	    DATE := SYSDATE;
10:28:42  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
10:28:42  13  	var_request_file_id NUMBER := 0;
10:28:42  14  	var_license_count   NUMBER := 0;
10:28:42  15  	var_cc_update_count NUMBER := 0;
10:28:42  16  	BEGIN
10:28:42  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
10:28:42  18  	    INSERT INTO CC_REQUEST_FILE (ID,
10:28:42  19  					 FILE_NAME,
10:28:42  20  					 CC_REQUEST_FILE_STATUS,
10:28:42  21  					 CREATE_DATE,
10:28:42  22  					 CREATED_BY,
10:28:42  23  					 UPDATE_DATE,
10:28:42  24  					 UPDATED_BY)
10:28:42  25  					 VALUES (
10:28:42  26  					 var_request_file_id,
10:28:42  27  					 in_filename,
10:28:42  28  					 'NOT_CREATED',
10:28:42  29  					 var_start_date,
10:28:42  30  					 in_creator,
10:28:42  31  					 var_start_date,
10:28:42  32  					 in_creator);
10:28:42  33  
10:28:42  34  	   FOR record IN (SELECT
10:28:42  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
10:28:42  36  			  FROM
10:28:42  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
10:28:42  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
10:28:42  39  			  WHERE
10:28:42  40  			    s.INSTRUMENT_TYPE_ID	 = 1
10:28:42  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
10:28:42  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
10:28:42  43  			    AND l.LICENSE_STATUS_ID	 = 2
10:28:42  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
10:28:42  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
10:28:42  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
10:28:42  47  	   LOOP
10:28:42  48  	     var_license_count := 0;
10:28:42  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
10:28:42  50  
10:28:42  51  	     IF var_license_count = 0 THEN
10:28:42  52  		INSERT INTO CC_UPDATE (ID,
10:28:42  53  				       CREDIT_CARD_ID,
10:28:42  54  				       LICENSE_ID,
10:28:42  55  				       CC_UPDATE_STATUS,
10:28:42  56  				       CC_REQUEST_FILE_ID,
10:28:42  57  				       CREATE_DATE,
10:28:42  58  				       UPDATE_DATE,
10:28:42  59  				       CREATED_BY,
10:28:42  60  				       UPDATED_BY
10:28:42  61  				       ) VALUES (
10:28:42  62  				       CC_UPDATE_SEQ.NEXTVAL,
10:28:42  63  				       record.CREDIT_CARD_ID,
10:28:42  64  				       record.LICENSE_ID,
10:28:42  65  				       'NOT_ADDED_TO_FILE',
10:28:42  66  				       var_request_file_id,
10:28:42  67  				       var_start_date,
10:28:42  68  				       var_start_date,
10:28:42  69  				       in_creator,
10:28:42  70  				       in_creator
10:28:42  71  				       );
10:28:42  72  	     END IF;
10:28:42  73  	   END LOOP;
10:28:42  74  
10:28:42  75  	   SELECT COUNT(1) INTO var_cc_update_count
10:28:42  76  	   FROM CC_UPDATE
10:28:42  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
10:28:42  78  	   IF var_cc_update_count <= 0 THEN
10:28:42  79  	     UPDATE CC_REQUEST_FILE
10:28:42  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
10:28:42  81  	     WHERE ID = var_request_file_id;
10:28:42  82  	   END IF;
10:28:42  83  
10:28:42  84  	END POPULATE_REQUEST_INFO;
10:28:42  85  
10:28:42  86  	/****************************************************************************/
10:28:42  87  
10:28:42  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
10:28:42  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:28:42  90  	  in_start	     IN NUMBER,
10:28:42  91  	  in_end	     IN NUMBER,
10:28:42  92  	  out_result_set     OUT SYS_REFCURSOR
10:28:42  93  	) AS
10:28:42  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
10:28:42  95  	var_range_diff	    NUMBER := 0;
10:28:42  96  	var_upper_bond_diff NUMBER := 0;
10:28:42  97  	var_l_start	    NUMBER := 0;
10:28:42  98  	var_l_end	    NUMBER := 0;
10:28:42  99  	BEGIN
10:28:42 100  	  --Normalize the end points [START]
10:28:42 101  	  IF (in_start IS NULL OR in_start < 0) Then
10:28:42 102  	    var_l_start := 0;
10:28:42 103  	  ELSE
10:28:42 104  	    var_l_start := in_start;
10:28:42 105  	  END IF;
10:28:42 106  
10:28:42 107  	  IF (in_end IS NULL) Then
10:28:42 108  	    var_l_end := 500;
10:28:42 109  	  ELSE
10:28:42 110  	    var_l_end := in_end;
10:28:42 111  	  END IF;
10:28:42 112  
10:28:42 113  	  var_l_start := var_l_start + 1;
10:28:42 114  	  var_l_end   := var_l_end   + 1;
10:28:42 115  
10:28:42 116  	  var_range_diff  := var_l_end - var_l_start;
10:28:42 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
10:28:42 118  
10:28:42 119  	  IF (var_upper_bond_diff > 0) Then
10:28:42 120  	    var_l_end := var_l_end - var_upper_bond_diff;
10:28:42 121  	  END IF;
10:28:42 122  	  --Normalize the end points [END]
10:28:42 123  
10:28:42 124  	  OPEN out_result_set FOR
10:28:42 125  	    SELECT CHASE_PROFILE_ID FROM
10:28:42 126  	      (SELECT rownum rnum, q.* FROM
10:28:42 127  		 (SELECT
10:28:42 128  		    cc.CHASE_PROFILE_ID
10:28:42 129  		  FROM
10:28:42 130  		    CREDIT_CARD cc,
10:28:42 131  		    CC_UPDATE ccu
10:28:42 132  		  WHERE
10:28:42 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
10:28:42 134  		    AND ccu.CREDIT_CARD_ID = cc.id
10:28:42 135  		) Q
10:28:42 136  	      WHERE rownum <= var_l_end)
10:28:42 137  	    WHERE rnum >= var_l_Start;
10:28:42 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
10:28:42 139  
10:28:42 140  	/****************************************************************************/
10:28:42 141  
10:28:42 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
10:28:42 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
10:28:42 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
10:28:42 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
10:28:42 146  	)AS
10:28:42 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
10:28:42 148  	BEGIN
10:28:42 149  	  UPDATE CC_REQUEST_FILE
10:28:42 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
10:28:42 151  	      UPDATE_DATE = SYSDATE,
10:28:42 152  	      UPDATED_BY  = in_updated_by
10:28:42 153  	  WHERE ID = in_request_file_id;
10:28:42 154  	END UPDATE_REQUEST_FILE_STATUS;
10:28:42 155  
10:28:42 156  	/****************************************************************************/
10:28:42 157  
10:28:42 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
10:28:42 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:28:42 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:28:42 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
10:28:42 162  	) AS
10:28:42 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
10:28:42 164  	BEGIN
10:28:42 165  	  UPDATE CC_UPDATE
10:28:42 166  	  SET CC_UPDATE_STATUS = in_status,
10:28:42 167  	      UPDATE_DATE      = SYSDATE,
10:28:42 168  	      UPDATED_BY       = in_updated_by
10:28:42 169  	  WHERE
10:28:42 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
10:28:42 171  	END UPDATE_CC_REQUEST_STATUS;
10:28:42 172  
10:28:42 173  	/****************************************************************************/
10:28:42 174  
10:28:42 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
10:28:42 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
10:28:42 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
10:28:42 178  	  out_request_files   OUT SYS_REFCURSOR
10:28:42 179  	) AS
10:28:42 180  	var_older_than_hours NUMBER := in_older_than_hours;
10:28:42 181  	BEGIN
10:28:42 182  	 IF (var_older_than_hours IS NULL) THEN
10:28:42 183  	   var_older_than_hours := -288;
10:28:42 184  	 END IF;
10:28:42 185  
10:28:42 186  	 OPEN out_request_files FOR
10:28:42 187  	 SELECT
10:28:42 188  	   ID,
10:28:42 189  	   FILE_NAME
10:28:42 190  	 FROM
10:28:42 191  	   CC_REQUEST_FILE
10:28:42 192  	 WHERE
10:28:42 193  	   CC_REQUEST_FILE_STATUS = in_status
10:28:42 194  	 AND
10:28:42 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
10:28:42 196  	END REQUEST_FILES_BY_STATUS;
10:28:42 197  
10:28:42 198  	/****************************************************************************/
10:28:42 199  
10:28:42 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
10:28:42 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:28:42 202  	  out_count OUT NUMBER
10:28:42 203  	) AS
10:28:42 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
10:28:42 205  	BEGIN
10:28:42 206  	  SELECT COUNT(1) INTO out_count
10:28:42 207  	  FROM CC_UPDATE
10:28:42 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
10:28:42 209  	END COUNT_BY_REQUEST_FILE_ID;
10:28:42 210  
10:28:42 211  	/****************************************************************************/
10:28:42 212  
10:28:42 213  	PROCEDURE GET_CREDIT_CARD_INFO (
10:28:42 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
10:28:42 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
10:28:42 216  	  out_card_info        OUT SYS_REFCURSOR
10:28:42 217  	) AS
10:28:42 218  	BEGIN
10:28:42 219  	  OPEN out_card_info FOR
10:28:42 220  	  SELECT
10:28:42 221  	    u.LICENSE_ID,
10:28:42 222  	    cc.ACCOUNT_ID,
10:28:42 223  	    cc.ID CREDIT_CARD_ID,
10:28:42 224  	    cc.CHASE_PROFILE_ID,
10:28:42 225  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
10:28:42 226  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
10:28:42 227  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
10:28:42 228  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
10:28:42 229  	    u.ID CC_UPDATE_ID,
10:28:42 230  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
10:28:42 231  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf
10:28:42 232  	  WHERE cc.ID = u.CREDIT_CARD_ID
10:28:42 233  	  AND u.CC_REQUEST_FILE_ID = rf.ID
10:28:42 234  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
10:28:42 235  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
10:28:42 236  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
10:28:42 237  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
10:28:42 238  	  ORDER BY cc.UPDATE_DATE DESC;
10:28:42 239  	END GET_CREDIT_CARD_INFO;
10:28:42 240  
10:28:42 241  	/****************************************************************************/
10:28:42 242  
10:28:42 243  	PROCEDURE UPDATE_CC_UPDATE(
10:28:42 244  	  in_id 	     IN CC_UPDATE.ID%TYPE,
10:28:42 245  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:28:42 246  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
10:28:42 247  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
10:28:42 248  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
10:28:42 249  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:28:42 250  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
10:28:42 251  	) AS
10:28:42 252  	BEGIN
10:28:42 253  	  UPDATE CC_UPDATE
10:28:42 254  	  SET CC_UPDATE_STATUS = in_status,
10:28:42 255  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
10:28:42 256  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
10:28:42 257  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
10:28:42 258  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
10:28:42 259  	  UPDATE_DATE = SYSDATE,
10:28:42 260  	  UPDATED_BY = in_updated_by
10:28:42 261  	  WHERE ID = in_id;
10:28:42 262  	END UPDATE_CC_UPDATE;
10:28:42 263  
10:28:42 264  	/****************************************************************************/
10:28:42 265  
10:28:42 266  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
10:28:42 267  	  in_id 	IN CC_UPDATE.ID%TYPE,
10:28:42 268  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:28:42 269  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
10:28:42 270  	) AS
10:28:42 271  	BEGIN
10:28:42 272  	  UPDATE CC_UPDATE
10:28:42 273  	  SET CC_UPDATE_STATUS = in_status,
10:28:42 274  	  UPDATE_DATE = SYSDATE,
10:28:42 275  	  UPDATED_BY = in_updated_by
10:28:42 276  	  WHERE ID = in_id;
10:28:42 277  	END UPDATE_CC_UPDATE_STATUS;
10:28:42 278  
10:28:42 279  	/****************************************************************************/
10:28:42 280  
10:28:42 281  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
10:28:42 282  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
10:28:42 283  	  out_request_file     OUT SYS_REFCURSOR
10:28:42 284  	) AS
10:28:42 285  	BEGIN
10:28:42 286  	  OPEN out_request_file FOR
10:28:42 287  	  SELECT ID, FILE_NAME
10:28:42 288  	  FROM CC_REQUEST_FILE
10:28:42 289  	  WHERE FILE_NAME = in_request_filename;
10:28:42 290  	END GET_REQUEST_FILE_BY_FILENAME;
10:28:42 291  
10:28:42 292  	/****************************************************************************/
10:28:42 293  
10:28:42 294  	PROCEDURE SUSPEND_CREDIT_CARD (
10:28:42 295  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
10:28:42 296  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
10:28:42 297  	) AS
10:28:42 298  	BEGIN
10:28:42 299  	  -- Create history
10:28:42 300  	  PROCS_HISTORY_V24.CREATE_CREDIT_CARD_HISTORY(
10:28:42 301  	      in_credit_card_id 	   => in_credit_card_id,
10:28:42 302  	      in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42 303  	  );
10:28:42 304  
10:28:42 305  	  UPDATE CREDIT_CARD
10:28:42 306  	  SET UPDATE_DATE = SYSDATE,
10:28:42 307  	  UPDATED_BY = in_updated_by,
10:28:42 308  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V24.CREDIT_CARD_DISABLED
10:28:42 309  	  WHERE ID = in_credit_card_id;
10:28:42 310  	END SUSPEND_CREDIT_CARD;
10:28:42 311  
10:28:42 312  	/****************************************************************************/
10:28:42 313  
10:28:42 314  	PROCEDURE UPDATE_CREDIT_CARD (
10:28:42 315  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
10:28:42 316  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:28:42 317  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
10:28:42 318  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
10:28:42 319  	) AS
10:28:42 320  	BEGIN
10:28:42 321  	  -- Create history
10:28:42 322  	  PROCS_HISTORY_V24.CREATE_CREDIT_CARD_HISTORY(
10:28:42 323  	      in_credit_card_id 	   => in_credit_card_id,
10:28:42 324  	      in_system_activity_reason_id => GLOBAL_ENUMS_V24.SAC_SYSTEM_APPLIED_RULE
10:28:42 325  	  );
10:28:42 326  
10:28:42 327  	  UPDATE CREDIT_CARD
10:28:42 328  	  SET UPDATE_DATE = SYSDATE,
10:28:42 329  	  UPDATED_BY = in_updated_by,
10:28:42 330  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
10:28:42 331  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
10:28:42 332  	  WHERE ID = in_credit_card_id;
10:28:42 333  	END UPDATE_CREDIT_CARD;
10:28:42 334  
10:28:42 335  	/****************************************************************************/
10:28:42 336  
10:28:42 337  	PROCEDURE COMPLETABLE_REQUESTS (
10:28:42 338  	  out_request_files OUT SYS_REFCURSOR
10:28:42 339  	) AS
10:28:42 340  	BEGIN
10:28:42 341  	  OPEN out_request_files FOR
10:28:42 342  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
10:28:42 343  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
10:28:42 344  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
10:28:42 345  	  AND rf.ID = u.CC_REQUEST_FILE_ID
10:28:42 346  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
10:28:42 347  	  MINUS
10:28:42 348  	  SELECT rf.ID, rf.FILE_NAME
10:28:42 349  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
10:28:42 350  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
10:28:42 351  	  AND rf.ID = u.CC_REQUEST_FILE_ID
10:28:42 352  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
10:28:42 353  	END COMPLETABLE_REQUESTS;
10:28:42 354  
10:28:42 355  	/****************************************************************************/
10:28:42 356  
10:28:42 357  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
10:28:42 358  	  in_max_hours_before_report IN  NUMBER,
10:28:42 359  	  out_request_files	     OUT SYS_REFCURSOR
10:28:42 360  	) AS
10:28:42 361  	BEGIN
10:28:42 362  	  OPEN out_request_files FOR
10:28:42 363  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
10:28:42 364  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
10:28:42 365  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
10:28:42 366  	  AND rf.ID = u.CC_REQUEST_FILE_ID
10:28:42 367  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
10:28:42 368  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
10:28:42 369  	  MINUS
10:28:42 370  	  SELECT rf.ID, rf.FILE_NAME
10:28:42 371  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
10:28:42 372  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
10:28:42 373  	  AND rf.ID = u.CC_REQUEST_FILE_ID
10:28:42 374  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
10:28:42 375  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
10:28:42 376  	END COMPLETABLE_REQUESTS_W_FAILS;
10:28:42 377  
10:28:42 378  	/****************************************************************************/
10:28:42 379  
10:28:42 380  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
10:28:42 381  	  in_account_id IN NUMBER,
10:28:42 382  	  out_group_id	OUT NUMBER
10:28:42 383  	) AS
10:28:42 384  	BEGIN
10:28:42 385  	  PROCS_ACCOUNT_V24.GET_GROUP_ID_BY_ACCOUNT_ID(
10:28:42 386  	    in_account_id => in_account_id,
10:28:42 387  	    out_group_id => out_group_id
10:28:42 388  	  );
10:28:42 389  	END GET_GROUP_ID_BY_ACCOUNT_ID;
10:28:42 390  
10:28:42 391  	/****************************************************************************/
10:28:42 392  
10:28:42 393  	PROCEDURE GET_LICENSE_BY_ID (
10:28:42 394  	  in_license_id  IN NUMBER,
10:28:42 395  	  out_result_set OUT SYS_REFCURSOR
10:28:42 396  	) AS
10:28:42 397  	BEGIN
10:28:42 398  	  PROCS_LICENSE_V24.GET_LICENSE_BY_ID(
10:28:42 399  	    in_license_id => in_license_id,
10:28:42 400  	    out_result_set => out_result_set
10:28:42 401  	  );
10:28:42 402  	END GET_LICENSE_BY_ID;
10:28:42 403  
10:28:42 404  END PROCS_CUPY;
10:28:42 405  .
10:28:42 SQL> /

Package body created.

Elapsed: 00:00:00.23
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_entitlement.sql
Compiling body for procs_entitlement.sql
10:28:43 SQL> CREATE OR REPLACE
10:28:43   2  PACKAGE BODY PROCS_ENTITLEMENT_V24 AS
10:28:43   3  
10:28:43   4  	PROCEDURE GET_ALL_ENTITLEMENTS(
10:28:43   5  	  in_group_id	 IN  NUMBER,
10:28:43   6  	  out_result_set OUT SYS_REFCURSOR)
10:28:43   7  	AS
10:28:43   8  	  -- CONSTANTS
10:28:43   9  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
10:28:43  10  	  -- EXCEPTIONS
10:28:43  11  	  NOT_FOUND	  EXCEPTION;
10:28:43  12  	  UNKNOWN_ERROR   EXCEPTION;
10:28:43  13  	  -- VARIABLES
10:28:43  14  	  var_subs	  SYS_REFCURSOR;
10:28:43  15  	BEGIN
10:28:43  16  	  OPEN out_result_set FOR
10:28:43  17  
10:28:43  18  	SELECT
10:28:43  19  	  P.ENTITLEMENT,
10:28:43  20  	  P.NAME,
10:28:43  21  	  0 INHERITED,
10:28:43  22  	  P.IS_SHAREABLE,
10:28:43  23  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
10:28:43  24  	FROM
10:28:43  25  	  SUBSCRIPTION SB
10:28:43  26  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
10:28:43  27  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
10:28:43  28  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
10:28:43  29  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
10:28:43  30  	  INNER JOIN PRODUCT P ON P.ID = PO.PRODUCT_ID
10:28:43  31  	WHERE
10:28:43  32  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
10:28:43  33  	  AND LIC.START_DATE <= SYSDATE
10:28:43  34  	  AND AC.GROUP_ID = in_group_id
10:28:43  35  	GROUP BY
10:28:43  36  	  P.ENTITLEMENT, 0, P.IS_SHAREABLE, P.NAME
10:28:43  37  UNION ALL
10:28:43  38  	SELECT
10:28:43  39  	  P.ENTITLEMENT,
10:28:43  40  	  P.NAME,
10:28:43  41  	  1 INHERITED,
10:28:43  42  	  P.IS_SHAREABLE,
10:28:43  43  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
10:28:43  44  	FROM
10:28:43  45  	  ACCOUNT BORROWER,
10:28:43  46  	  SUBSCRIPTION S,
10:28:43  47  	  LICENSE LIC,
10:28:43  48  	  OFFER_PRODUCT_OFFERING OPO,
10:28:43  49  	  PRODUCT_OFFERING PO,
10:28:43  50  	  PRODUCT P,
10:28:43  51  	  GROUP_ACCOUNT GA,
10:28:43  52  	  SUBSCRIPTION_SHARE SS
10:28:43  53  	WHERE
10:28:43  54  	  BORROWER.GROUP_ID = in_group_id
10:28:43  55  	  AND LIC.SUBSCRIPTION_ID = S.ID
10:28:43  56  	  AND OPO.OFFER_ID = LIC.OFFER_ID
10:28:43  57  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
10:28:43  58  	  AND PO.PRODUCT_ID = P.ID
10:28:43  59  	  AND GA.SUBSCRIPTION_ID = S.ID
10:28:43  60  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
10:28:43  61  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
10:28:43  62  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
10:28:43  63  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
10:28:43  64  	  AND P.IS_SHAREABLE = 1
10:28:43  65  	GROUP BY
10:28:43  66  	  P.ENTITLEMENT, 0, P.IS_SHAREABLE, P.NAME;
10:28:43  67  
10:28:43  68  	EXCEPTION
10:28:43  69  	  WHEN OTHERS THEN
10:28:43  70  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43  71  	      SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43  72  	END GET_ALL_ENTITLEMENTS;
10:28:43  73  
10:28:43  74  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
10:28:43  75  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:43  76  	  out_result_set OUT SYS_REFCURSOR)
10:28:43  77  	AS
10:28:43  78  	  -- CONSTANTS
10:28:43  79  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
10:28:43  80  	  -- EXCEPTIONS
10:28:43  81  	  NOT_FOUND	  EXCEPTION;
10:28:43  82  	  UNKNOWN_ERROR   EXCEPTION;
10:28:43  83  	  -- VARIABLES
10:28:43  84  	  var_subs	  SYS_REFCURSOR;
10:28:43  85  	BEGIN
10:28:43  86  	  OPEN out_result_set FOR
10:28:43  87  
10:28:43  88  	      SELECT
10:28:43  89  		p.entitlement,
10:28:43  90  		p.name,
10:28:43  91  		0 INHERITED,
10:28:43  92  		p.IS_SHAREABLE,
10:28:43  93  		sysdate as EXPIRES
10:28:43  94  	      FROM
10:28:43  95  		offer_offer_chain ooc,
10:28:43  96  		offer o,
10:28:43  97  		offer_product_offering opo,
10:28:43  98  		product_offering po,
10:28:43  99  		product p
10:28:43 100  	      WHERE
10:28:43 101  		o.id = ooc.offer_id AND
10:28:43 102  		opo.offer_id = o.id AND
10:28:43 103  		po.id = opo.product_offering_id AND
10:28:43 104  		p.id = po.product_id AND
10:28:43 105  		ooc.offer_chain_id =
10:28:43 106  		(SELECT
10:28:43 107  		    ocmd.offer_chain_id
10:28:43 108  		  FROM
10:28:43 109  		      offer_chain_meta_data ocmd
10:28:43 110  		  WHERE
10:28:43 111  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
10:28:43 112  		      ocmd.value = in_product_id AND
10:28:43 113  		      rownum < 2
10:28:43 114  		)
10:28:43 115  	      ;
10:28:43 116  
10:28:43 117  	EXCEPTION
10:28:43 118  	  WHEN OTHERS THEN
10:28:43 119  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 120  	      SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 121  	END GET_ITUNES_ENTITLEMENTS;
10:28:43 122  
10:28:43 123  END PROCS_ENTITLEMENT_V24;
10:28:43 124  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_history.sql
Compiling body for procs_history.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V24" AS
10:28:43   2  
10:28:43   3  PROCEDURE CREATE_AASR_HISTORY(
10:28:43   4  	in_id			     IN CORE_OWNER.AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:28:43   5  	in_system_activity_reason_id IN NUMBER,
10:28:43   6  	in_created_by		     IN VARCHAR2
10:28:43   7  ) AS
10:28:43   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_AASR_HISTORY';
10:28:43   9  var_id		  AMAZON_APPSTORE_RECEIPT.ID%TYPE;
10:28:43  10  var_subscription_id AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE;
10:28:43  11  var_user_id	  AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE;
10:28:43  12  var_item_type	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE;
10:28:43  13  var_start_date	  AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE;
10:28:43  14  var_end_date	  AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE;
10:28:43  15  var_sku		  AMAZON_APPSTORE_RECEIPT.SKU%TYPE;
10:28:43  16  var_purchase_token  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE;
10:28:43  17  var_create_date	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE%TYPE;
10:28:43  18  var_created_by	  AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE;
10:28:43  19  var_update_date	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE%TYPE;
10:28:43  20  var_updated_by	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE;
10:28:43  21  var_last_check_date AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE;
10:28:43  22  BEGIN
10:28:43  23  	SELECT
10:28:43  24  	  AMAZON_APPSTORE_RECEIPT.ID,
10:28:43  25  	  AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
10:28:43  26  	  AMAZON_APPSTORE_RECEIPT.USER_ID,
10:28:43  27  	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
10:28:43  28  	  AMAZON_APPSTORE_RECEIPT.START_DATE,
10:28:43  29  	  AMAZON_APPSTORE_RECEIPT.END_DATE,
10:28:43  30  	  AMAZON_APPSTORE_RECEIPT.SKU,
10:28:43  31  	  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
10:28:43  32  	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
10:28:43  33  	  AMAZON_APPSTORE_RECEIPT.CREATED_BY,
10:28:43  34  	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
10:28:43  35  	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
10:28:43  36  	  AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
10:28:43  37  	INTO
10:28:43  38  	  var_id,
10:28:43  39  	  var_subscription_id,
10:28:43  40  	  var_user_id,
10:28:43  41  	  var_item_type,
10:28:43  42  	  var_start_date,
10:28:43  43  	  var_end_date,
10:28:43  44  	  var_sku,
10:28:43  45  	  var_purchase_token,
10:28:43  46  	  var_create_date,
10:28:43  47  	  var_created_by,
10:28:43  48  	  var_update_date,
10:28:43  49  	  var_updated_by,
10:28:43  50  	  var_last_check_date
10:28:43  51  	FROM
10:28:43  52  	  AMAZON_APPSTORE_RECEIPT
10:28:43  53  	WHERE
10:28:43  54  	  AMAZON_APPSTORE_RECEIPT.ID = in_id;
10:28:43  55  
10:28:43  56  	CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_AASR_HISTORY(
10:28:43  57  	    var_id,
10:28:43  58  	    var_subscription_id,
10:28:43  59  	    var_user_id,
10:28:43  60  	    var_item_type,
10:28:43  61  	    var_start_date,
10:28:43  62  	    var_end_date,
10:28:43  63  	    var_sku,
10:28:43  64  	    var_purchase_token,
10:28:43  65  	    var_create_date,
10:28:43  66  	    var_created_by,
10:28:43  67  	    var_update_date,
10:28:43  68  	    var_updated_by,
10:28:43  69  	    in_system_activity_reason_id,
10:28:43  70  	    in_created_by,
10:28:43  71  	    var_last_check_date
10:28:43  72  	);
10:28:43  73  END CREATE_AASR_HISTORY;
10:28:43  74  
10:28:43  75  PROCEDURE CREATE_ADDRESS_HISTORY(
10:28:43  76  	in_address_id		     IN NUMBER,
10:28:43  77  	in_system_activity_reason_id IN NUMBER
10:28:43  78  ) AS
10:28:43  79  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
10:28:43  80  -- VARIABLES
10:28:43  81  var_address1    ADDRESS.ADDRESS1%TYPE;
10:28:43  82  var_address2    ADDRESS.ADDRESS2%TYPE;
10:28:43  83  var_city	      ADDRESS.CITY%TYPE;
10:28:43  84  var_state       ADDRESS.STATE%TYPE;
10:28:43  85  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
10:28:43  86  var_country     ADDRESS.COUNTRY%TYPE;
10:28:43  87  var_created_by  ADDRESS.CREATED_BY%TYPE;
10:28:43  88  var_create_date ADDRESS.CREATE_DATE%TYPE;
10:28:43  89  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
10:28:43  90  var_update_date ADDRESS.UPDATE_DATE%TYPE;
10:28:43  91  -- EXCEPTIONS
10:28:43  92  BAD_ADDRESS_ID	     EXCEPTION;
10:28:43  93  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:28:43  94  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43  95  BEGIN
10:28:43  96  
10:28:43  97  	BEGIN
10:28:43  98  	  SELECT
10:28:43  99  	    ADDRESS.ADDRESS1,
10:28:43 100  	    ADDRESS.ADDRESS2,
10:28:43 101  	    ADDRESS.CITY,
10:28:43 102  	    ADDRESS.STATE,
10:28:43 103  	    ADDRESS.POSTAL_CODE,
10:28:43 104  	    ADDRESS.COUNTRY,
10:28:43 105  	    ADDRESS.CREATED_BY,
10:28:43 106  	    ADDRESS.CREATE_DATE,
10:28:43 107  	    ADDRESS.UPDATED_BY,
10:28:43 108  	    ADDRESS.UPDATE_DATE
10:28:43 109  	    into
10:28:43 110  	    var_address1,
10:28:43 111  	    var_address2,
10:28:43 112  	    var_city,
10:28:43 113  	    var_state,
10:28:43 114  	    var_postal_code,
10:28:43 115  	    var_country,
10:28:43 116  	    var_created_by,
10:28:43 117  	    var_create_date,
10:28:43 118  	    var_updated_by,
10:28:43 119  	    var_update_date
10:28:43 120  	  FROM
10:28:43 121  	    ADDRESS
10:28:43 122  	  WHERE
10:28:43 123  	    ADDRESS.ID = in_address_id;
10:28:43 124  	  EXCEPTION
10:28:43 125  	    WHEN NO_DATA_FOUND THEN
10:28:43 126  	      RAISE BAD_ADDRESS_ID;
10:28:43 127  	END;
10:28:43 128  
10:28:43 129  	BEGIN
10:28:43 130  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_ADDRESS_HISTORY(
10:28:43 131  	    in_address_id,
10:28:43 132  	    in_system_activity_reason_id,
10:28:43 133  	    var_address1,
10:28:43 134  	    var_address2,
10:28:43 135  	    var_city,
10:28:43 136  	    var_state,
10:28:43 137  	    var_postal_code,
10:28:43 138  	    var_country,
10:28:43 139  	    var_created_by,
10:28:43 140  	    var_create_date,
10:28:43 141  	    var_updated_by,
10:28:43 142  	    var_update_date
10:28:43 143  	  );
10:28:43 144  	  EXCEPTION
10:28:43 145  	    WHEN OTHERS THEN
10:28:43 146  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 147  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 148  	END;
10:28:43 149  
10:28:43 150  EXCEPTION
10:28:43 151  WHEN BAD_ADDRESS_ID THEN
10:28:43 152  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 153  	  SPROC_NAME, 'Bad recipientAddress id');
10:28:43 154  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 155  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 156  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 157  WHEN OTHERS THEN
10:28:43 158  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 159  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 160  END CREATE_ADDRESS_HISTORY;
10:28:43 161  
10:28:43 162  /********************************************************************/
10:28:43 163  
10:28:43 164  PROCEDURE CREATE_ACCOUNT_HISTORY(
10:28:43 165  	in_account_id		     IN NUMBER,
10:28:43 166  	in_system_activity_reason_id IN NUMBER
10:28:43 167  ) AS
10:28:43 168  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
10:28:43 169  -- VARIABLES
10:28:43 170  var_account_status_id  NUMBER;
10:28:43 171  var_suspend_date	     DATE;
10:28:43 172  var_group_id	     NUMBER;
10:28:43 173  var_instrument_type_id NUMBER;
10:28:43 174  var_instrument_id      NUMBER;
10:28:43 175  var_updated_by	     VARCHAR2(255);
10:28:43 176  var_update_date	     DATE;
10:28:43 177  -- EXCEPTIONS
10:28:43 178  BAD_ACCOUNT_ID	     EXCEPTION;
10:28:43 179  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:28:43 180  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43 181  BEGIN
10:28:43 182  
10:28:43 183  	BEGIN
10:28:43 184  	  SELECT
10:28:43 185  	    ACCOUNT.ACCOUNT_STATUS_ID,
10:28:43 186  	    ACCOUNT.GROUP_ID,
10:28:43 187  	    ACCOUNT.INSTRUMENT_TYPE_ID,
10:28:43 188  	    ACCOUNT.INSTRUMENT_ID,
10:28:43 189  	    ACCOUNT.UPDATED_BY,
10:28:43 190  	    ACCOUNT.UPDATE_DATE
10:28:43 191  	    into
10:28:43 192  	    var_account_status_id,
10:28:43 193  	    var_group_id,
10:28:43 194  	    var_instrument_type_id,
10:28:43 195  	    var_instrument_id,
10:28:43 196  	    var_updated_by,
10:28:43 197  	    var_update_date
10:28:43 198  	  FROM
10:28:43 199  	    ACCOUNT
10:28:43 200  	  WHERE
10:28:43 201  	    ACCOUNT.ID = in_account_id;
10:28:43 202  	  EXCEPTION
10:28:43 203  	    WHEN NO_DATA_FOUND THEN
10:28:43 204  	      RAISE BAD_ACCOUNT_ID;
10:28:43 205  	END;
10:28:43 206  
10:28:43 207  	BEGIN
10:28:43 208  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_ACCOUNT_HISTORY(
10:28:43 209  	    in_account_id,
10:28:43 210  	    var_suspend_date,
10:28:43 211  	    var_group_id,
10:28:43 212  	    var_updated_by,
10:28:43 213  	    var_update_date,
10:28:43 214  	    in_system_activity_reason_id,
10:28:43 215  	    var_account_status_id,
10:28:43 216  	    var_instrument_type_id,
10:28:43 217  	    var_instrument_id
10:28:43 218  	  );
10:28:43 219  	  EXCEPTION
10:28:43 220  	    WHEN OTHERS THEN
10:28:43 221  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 222  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 223  	END;
10:28:43 224  
10:28:43 225  EXCEPTION
10:28:43 226  WHEN BAD_ACCOUNT_ID THEN
10:28:43 227  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 228  	  SPROC_NAME, 'Bad account id');
10:28:43 229  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 230  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 231  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 232  WHEN OTHERS THEN
10:28:43 233  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 234  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 235  END CREATE_ACCOUNT_HISTORY;
10:28:43 236  
10:28:43 237  /********************************************************************/
10:28:43 238  
10:28:43 239  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
10:28:43 240  	in_subscription_id	     IN NUMBER,
10:28:43 241  	in_system_activity_reason_id IN NUMBER
10:28:43 242  ) AS
10:28:43 243  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
10:28:43 244  -- VARIABLES
10:28:43 245  var_account_id		    NUMBER;
10:28:43 246  var_purchase_date 	    DATE;
10:28:43 247  var_offer_chain_id	    NUMBER;
10:28:43 248  var_suspend_date		    DATE;
10:28:43 249  var_termination_date	    DATE;
10:28:43 250  var_days_ramaining_adjustment NUMBER;
10:28:43 251  var_sct_id		    NUMBER;
10:28:43 252  var_updated_by		    VARCHAR2(255);
10:28:43 253  var_update_date		    DATE;
10:28:43 254  -- EXCEPTIONS
10:28:43 255  BAD_SUBSCRIPTION_ID    EXCEPTION;
10:28:43 256  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:28:43 257  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43 258  BEGIN
10:28:43 259  
10:28:43 260  	BEGIN
10:28:43 261  	  SELECT
10:28:43 262  	    SUBSCRIPTION.account_id,
10:28:43 263  	    SUBSCRIPTION.PURCHASE_DATE,
10:28:43 264  	    SUBSCRIPTION.OFFER_CHAIN_ID,
10:28:43 265  	    SUBSCRIPTION.SUSPEND_DATE,
10:28:43 266  	    SUBSCRIPTION.TERMINATION_DATE,
10:28:43 267  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
10:28:43 268  	    SUBSCRIPTION.SCT_ID,
10:28:43 269  	    SUBSCRIPTION.UPDATED_BY,
10:28:43 270  	    SUBSCRIPTION.UPDATE_DATE
10:28:43 271  	    into
10:28:43 272  	    var_account_id,
10:28:43 273  	    var_purchase_date,
10:28:43 274  	    var_offer_chain_id,
10:28:43 275  	    var_suspend_date,
10:28:43 276  	    var_termination_date,
10:28:43 277  	    var_days_ramaining_adjustment,
10:28:43 278  	    var_sct_id,
10:28:43 279  	    var_updated_by,
10:28:43 280  	    var_update_date
10:28:43 281  	  FROM
10:28:43 282  	    SUBSCRIPTION
10:28:43 283  	  WHERE
10:28:43 284  	    SUBSCRIPTION.ID = in_subscription_id;
10:28:43 285  	  EXCEPTION
10:28:43 286  	    WHEN NO_DATA_FOUND THEN
10:28:43 287  	      RAISE BAD_SUBSCRIPTION_ID;
10:28:43 288  	END;
10:28:43 289  
10:28:43 290  	BEGIN
10:28:43 291  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_SUBSCRIPTION_HISTORY(
10:28:43 292  	    in_subscription_id,
10:28:43 293  	    var_account_id,
10:28:43 294  	    var_purchase_date,
10:28:43 295  	    var_offer_chain_id,
10:28:43 296  	    var_suspend_date,
10:28:43 297  	    var_termination_date,
10:28:43 298  	    var_days_ramaining_adjustment,
10:28:43 299  	    var_sct_id,
10:28:43 300  	    var_updated_by,
10:28:43 301  	    var_update_date,
10:28:43 302  	    in_system_activity_reason_id
10:28:43 303  	  );
10:28:43 304  	  EXCEPTION
10:28:43 305  	    WHEN OTHERS THEN
10:28:43 306  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 307  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 308  	END;
10:28:43 309  
10:28:43 310  EXCEPTION
10:28:43 311  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:43 312  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 313  	  SPROC_NAME, 'No such subscription');
10:28:43 314  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 315  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 316  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 317  WHEN OTHERS THEN
10:28:43 318  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 320  END CREATE_SUBSCRIPTION_HISTORY;
10:28:43 321  
10:28:43 322  /********************************************************************/
10:28:43 323  
10:28:43 324  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
10:28:43 325  	in_credit_card_id	      IN NUMBER,
10:28:43 326  	in_system_activity_reason_id  IN NUMBER
10:28:43 327  ) AS
10:28:43 328  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
10:28:43 329  -- VARIABLES
10:28:43 330  var_account_id		     NUMBER;
10:28:43 331  var_instrument_name	     VARCHAR2(255);
10:28:43 332  var_private_card_holder_name   VARCHAR2(256);
10:28:43 333  var_private_street_address     VARCHAR2(256);
10:28:43 334  var_private_street_address2    VARCHAR2(256);
10:28:43 335  var_state 		     VARCHAR2(50);
10:28:43 336  var_city			     VARCHAR2(50);
10:28:43 337  var_postal_code		     VARCHAR2(20);
10:28:43 338  var_country		     CHAR(2);
10:28:43 339  var_last_four_cc		     VARCHAR2(4);
10:28:43 340  var_expiration_date	     DATE;
10:28:43 341  var_credit_card_type_id	     NUMBER;
10:28:43 342  var_secret_token		     VARCHAR2(255);
10:28:43 343  var_chase_profile_id	     VARCHAR2(255);
10:28:43 344  var_credit_card_status_id      NUMBER;
10:28:43 345  var_updated_by		     VARCHAR2(255);
10:28:43 346  var_update_date		     DATE;
10:28:43 347  -- EXCEPTIONS
10:28:43 348  BAD_CREDIT_CARD_ID     EXCEPTION;
10:28:43 349  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:28:43 350  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43 351  BEGIN
10:28:43 352  
10:28:43 353  	BEGIN
10:28:43 354  	  SELECT
10:28:43 355  	    ACCOUNT_ID,
10:28:43 356  	    INSTRUMENT_NAME,
10:28:43 357  	    PRIVATE_CARD_HOLDER_NAME,
10:28:43 358  	    PRIVATE_STREET_ADDRESS,
10:28:43 359  	    PRIVATE_STREET_ADDRESS2,
10:28:43 360  	    STATE,
10:28:43 361  	    CITY,
10:28:43 362  	    POSTAL_CODE,
10:28:43 363  	    COUNTRY,
10:28:43 364  	    LAST_FOUR_CC,
10:28:43 365  	    EXPIRATION_DATE,
10:28:43 366  	    CREDIT_CARD_TYPE_ID,
10:28:43 367  	    SECRET_TOKEN,
10:28:43 368  	    CHASE_PROFILE_ID,
10:28:43 369  	    CREDIT_CARD_STATUS_ID,
10:28:43 370  	    UPDATED_BY,
10:28:43 371  	    UPDATE_DATE
10:28:43 372  	    into
10:28:43 373  	    var_account_id,
10:28:43 374  	    var_instrument_name,
10:28:43 375  	    var_private_card_holder_name,
10:28:43 376  	    var_private_street_address,
10:28:43 377  	    var_private_street_address2,
10:28:43 378  	    var_state,
10:28:43 379  	    var_city,
10:28:43 380  	    var_postal_code,
10:28:43 381  	    var_country,
10:28:43 382  	    var_last_four_cc,
10:28:43 383  	    var_expiration_date,
10:28:43 384  	    var_credit_card_type_id,
10:28:43 385  	    var_secret_token,
10:28:43 386  	    var_chase_profile_id,
10:28:43 387  	    var_credit_card_status_id,
10:28:43 388  	    var_updated_by,
10:28:43 389  	    var_update_date
10:28:43 390  	  FROM
10:28:43 391  	    CREDIT_CARD
10:28:43 392  	  WHERE
10:28:43 393  	    CREDIT_CARD.ID = in_credit_card_id;
10:28:43 394  	  EXCEPTION
10:28:43 395  	    WHEN NO_DATA_FOUND THEN
10:28:43 396  	      RAISE BAD_CREDIT_CARD_ID;
10:28:43 397  	END;
10:28:43 398  
10:28:43 399  	BEGIN
10:28:43 400  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_CREDIT_CARD_HISTORY(
10:28:43 401  	    in_credit_card_id,
10:28:43 402  	    var_account_id,
10:28:43 403  	    var_instrument_name,
10:28:43 404  	    var_private_card_holder_name,
10:28:43 405  	    var_private_street_address,
10:28:43 406  	    var_private_street_address2,
10:28:43 407  	    var_state,
10:28:43 408  	    var_city,
10:28:43 409  	    var_postal_code,
10:28:43 410  	    var_country,
10:28:43 411  	    var_last_four_cc,
10:28:43 412  	    var_expiration_date,
10:28:43 413  	    var_credit_card_type_id,
10:28:43 414  	    var_secret_token,
10:28:43 415  	    var_chase_profile_id,
10:28:43 416  	    var_credit_card_status_id,
10:28:43 417  	    var_updated_by,
10:28:43 418  	    var_update_date,
10:28:43 419  	    in_system_activity_reason_id
10:28:43 420  	  );
10:28:43 421  	  EXCEPTION
10:28:43 422  	    WHEN OTHERS THEN
10:28:43 423  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 424  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 425  	END;
10:28:43 426  
10:28:43 427  EXCEPTION
10:28:43 428  WHEN BAD_CREDIT_CARD_ID THEN
10:28:43 429  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 430  	  SPROC_NAME, 'No such credit card');
10:28:43 431  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 432  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 433  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 434  WHEN OTHERS THEN
10:28:43 435  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 437  END CREATE_CREDIT_CARD_HISTORY;
10:28:43 438  
10:28:43 439  /********************************************************************/
10:28:43 440  
10:28:43 441  PROCEDURE CREATE_PAYPAL_HISTORY(
10:28:43 442  /*
10:28:43 443  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 444  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 445  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:43 446  */
10:28:43 447  	in_paypal_id		      IN NUMBER,
10:28:43 448  	in_system_activity_reason_id  IN NUMBER
10:28:43 449  ) AS
10:28:43 450  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
10:28:43 451  -- VARIABLES
10:28:43 452  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
10:28:43 453  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
10:28:43 454  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
10:28:43 455  var_created_by		   PAYPAL.CREATED_BY%TYPE;
10:28:43 456  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
10:28:43 457  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
10:28:43 458  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
10:28:43 459  var_state 		   PAYPAL.STATE%TYPE;
10:28:43 460  var_city			   PAYPAL.CITY%TYPE;
10:28:43 461  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
10:28:43 462  var_country		   PAYPAL.COUNTRY%TYPE;
10:28:43 463  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
10:28:43 464  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
10:28:43 465  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
10:28:43 466  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
10:28:43 467  -- EXCEPTION
10:28:43 468  BAD_PAYPAL_ID	  EXCEPTION;
10:28:43 469  CAN_NOT_ADD_HISTORY EXCEPTION;
10:28:43 470  EXCEPTION_MESSAGE   VARCHAR2(1024);
10:28:43 471  BEGIN
10:28:43 472  
10:28:43 473  	BEGIN
10:28:43 474  	  SELECT
10:28:43 475  	    ACCOUNT_ID,
10:28:43 476  	    INSTRUMENT_NAME,
10:28:43 477  	    PRIVATE_EMAIL_ADDRESS,
10:28:43 478  	    UPDATE_DATE,
10:28:43 479  	    UPDATED_BY,
10:28:43 480  	    PAYPAL_STATUS_ID,
10:28:43 481  	    PRIVATE_STREET_ADDRESS,
10:28:43 482  	    PRIVATE_STREET_ADDRESS2,
10:28:43 483  	    STATE,
10:28:43 484  	    CITY,
10:28:43 485  	    POSTAL_CODE,
10:28:43 486  	    COUNTRY,
10:28:43 487  	    EXPIRATION_DATE,
10:28:43 488  	    SECRET_TOKEN
10:28:43 489  	  INTO
10:28:43 490  	    var_account_id,
10:28:43 491  	    var_instrument_name,
10:28:43 492  	    var_private_email_address,
10:28:43 493  	    var_update_date,
10:28:43 494  	    var_updated_by,
10:28:43 495  	    var_paypal_status_id,
10:28:43 496  	    var_paypal_prvt_street_addr,
10:28:43 497  	    var_paypal_prvt_street_addr2,
10:28:43 498  	    var_state,
10:28:43 499  	    var_city,
10:28:43 500  	    var_postal_code,
10:28:43 501  	    var_country,
10:28:43 502  	    var_expiration_date,
10:28:43 503  	    var_secret_token
10:28:43 504  	  FROM
10:28:43 505  	    PAYPAL
10:28:43 506  	  WHERE
10:28:43 507  	    ID = in_paypal_id;
10:28:43 508  	  EXCEPTION
10:28:43 509  	    WHEN NO_DATA_FOUND THEN
10:28:43 510  	      RAISE BAD_PAYPAL_ID;
10:28:43 511  	END;
10:28:43 512  
10:28:43 513  	BEGIN
10:28:43 514  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_PAYPAL_HISTORY(
10:28:43 515  	    in_paypal_id,
10:28:43 516  	    var_account_id,
10:28:43 517  	    var_instrument_name,
10:28:43 518  	    var_private_email_address,
10:28:43 519  	    var_updated_by,
10:28:43 520  	    var_update_date,
10:28:43 521  	    var_paypal_status_id,
10:28:43 522  	    var_paypal_prvt_street_addr,
10:28:43 523  	    var_paypal_prvt_street_addr2,
10:28:43 524  	    var_state,
10:28:43 525  	    var_city,
10:28:43 526  	    var_postal_code,
10:28:43 527  	    var_country,
10:28:43 528  	    var_expiration_date,
10:28:43 529  	    in_system_activity_reason_id,
10:28:43 530  	    var_secret_token
10:28:43 531  	  );
10:28:43 532  	  EXCEPTION
10:28:43 533  	    WHEN OTHERS THEN
10:28:43 534  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 535  	      RAISE CAN_NOT_ADD_HISTORY;
10:28:43 536  	END;
10:28:43 537  
10:28:43 538  EXCEPTION
10:28:43 539  WHEN BAD_PAYPAL_ID THEN
10:28:43 540  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 541  	  SPROC_NAME, 'No such paypal');
10:28:43 542  WHEN CAN_NOT_ADD_HISTORY THEN
10:28:43 543  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 544  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
10:28:43 545  WHEN OTHERS THEN
10:28:43 546  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 547  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 548  END CREATE_PAYPAL_HISTORY;
10:28:43 549  
10:28:43 550  /********************************************************************/
10:28:43 551  
10:28:43 552  PROCEDURE CREATE_GIFT_CERT_HISTORY(
10:28:43 553  	in_gift_certificate_id	      IN NUMBER,
10:28:43 554  	in_system_activity_reason_id  IN NUMBER
10:28:43 555  ) AS
10:28:43 556  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
10:28:43 557  -- VARIABLES
10:28:43 558  var_purchaser_group_id	     NUMBER;
10:28:43 559  var_purchase_invoice_id	     NUMBER;
10:28:43 560  var_offer_chain_id	     NUMBER;
10:28:43 561  var_expiration_date	     DATE;
10:28:43 562  var_purchase_date 	     DATE;
10:28:43 563  var_gift_certificate_status_id NUMBER;
10:28:43 564  var_code			     VARCHAR2(255);
10:28:43 565  var_recipient_name	     VARCHAR2(255);
10:28:43 566  var_gift_message		     VARCHAR2(500);
10:28:43 567  var_recipient_email	     VARCHAR2(255);
10:28:43 568  var_finalized_invoice_id	     NUMBER;
10:28:43 569  var_sender_email		     VARCHAR2(50);
10:28:43 570  var_sender_name		     VARCHAR2(50);
10:28:43 571  var_redemption_date	     DATE;
10:28:43 572  var_redeemer_group_id	     NUMBER;
10:28:43 573  var_cancelation_date	     DATE;
10:28:43 574  var_updated_by		     VARCHAR2(255);
10:28:43 575  var_update_date		     DATE;
10:28:43 576  var_recipient_address_id	     NUMBER;
10:28:43 577  var_redeemer_address_id	     NUMBER;
10:28:43 578  var_recipient_notify_date      DATE;
10:28:43 579  -- EXCEPTIONS
10:28:43 580  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
10:28:43 581  CAN_NOT_CREATE_HISTORY  EXCEPTION;
10:28:43 582  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:28:43 583  BEGIN
10:28:43 584  
10:28:43 585  	BEGIN
10:28:43 586  	  SELECT
10:28:43 587  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
10:28:43 588  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
10:28:43 589  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
10:28:43 590  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
10:28:43 591  	    GIFT_CERTIFICATE.PURCHASE_DATE,
10:28:43 592  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
10:28:43 593  	    GIFT_CERTIFICATE.CODE,
10:28:43 594  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
10:28:43 595  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
10:28:43 596  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
10:28:43 597  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
10:28:43 598  	    GIFT_CERTIFICATE.SENDER_EMAIL,
10:28:43 599  	    GIFT_CERTIFICATE.SENDER_NAME,
10:28:43 600  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
10:28:43 601  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
10:28:43 602  	    GIFT_CERTIFICATE.CANCELATION_DATE,
10:28:43 603  	    GIFT_CERTIFICATE.UPDATED_BY,
10:28:43 604  	    GIFT_CERTIFICATE.UPDATE_DATE,
10:28:43 605  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
10:28:43 606  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
10:28:43 607  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
10:28:43 608  	    into
10:28:43 609  	    var_purchaser_group_id,
10:28:43 610  	    var_purchase_invoice_id,
10:28:43 611  	    var_offer_chain_id,
10:28:43 612  	    var_expiration_date,
10:28:43 613  	    var_purchase_date,
10:28:43 614  	    var_gift_certificate_status_id,
10:28:43 615  	    var_code,
10:28:43 616  	    var_recipient_name,
10:28:43 617  	    var_gift_message,
10:28:43 618  	    var_recipient_email,
10:28:43 619  	    var_finalized_invoice_id,
10:28:43 620  	    var_sender_email,
10:28:43 621  	    var_sender_name,
10:28:43 622  	    var_redemption_date,
10:28:43 623  	    var_redeemer_group_id,
10:28:43 624  	    var_cancelation_date,
10:28:43 625  	    var_updated_by,
10:28:43 626  	    var_update_date,
10:28:43 627  	    var_recipient_address_id,
10:28:43 628  	    var_redeemer_address_id,
10:28:43 629  	    var_recipient_notify_date
10:28:43 630  	  FROM
10:28:43 631  	    GIFT_CERTIFICATE
10:28:43 632  	  WHERE
10:28:43 633  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
10:28:43 634  	END;
10:28:43 635  
10:28:43 636  	BEGIN
10:28:43 637  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_GIFT_CERT_HISTORY(
10:28:43 638  	    in_gift_certificate_id,
10:28:43 639  	    var_purchaser_group_id,
10:28:43 640  	    var_purchase_invoice_id,
10:28:43 641  	    var_offer_chain_id,
10:28:43 642  	    var_expiration_date,
10:28:43 643  	    var_purchase_date,
10:28:43 644  	    var_gift_certificate_status_id,
10:28:43 645  	    var_code,
10:28:43 646  	    var_updated_by,
10:28:43 647  	    var_update_date,
10:28:43 648  	    in_system_activity_reason_id,
10:28:43 649  	    var_recipient_name,
10:28:43 650  	    var_gift_message,
10:28:43 651  	    var_recipient_email,
10:28:43 652  	    var_finalized_invoice_id,
10:28:43 653  	    var_sender_email,
10:28:43 654  	    var_sender_name,
10:28:43 655  	    var_redemption_date,
10:28:43 656  	    var_redeemer_group_id,
10:28:43 657  	    var_cancelation_date,
10:28:43 658  	    var_recipient_address_id,
10:28:43 659  	    var_redeemer_address_id,
10:28:43 660  	    var_recipient_notify_date
10:28:43 661  	  );
10:28:43 662  	  EXCEPTION
10:28:43 663  	    WHEN OTHERS THEN
10:28:43 664  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 665  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 666  	END;
10:28:43 667  
10:28:43 668  EXCEPTION
10:28:43 669  WHEN BAD_GIFT_CERTIFICATE_ID THEN
10:28:43 670  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 671  	  SPROC_NAME, 'No such gift certificate');
10:28:43 672  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 673  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 674  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 675  WHEN OTHERS THEN
10:28:43 676  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 677  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 678  END CREATE_GIFT_CERT_HISTORY;
10:28:43 679  
10:28:43 680  /********************************************************************/
10:28:43 681  
10:28:43 682  PROCEDURE CREATE_TRANSACTION_HISTORY (
10:28:43 683  	in_transaction_id	     IN NUMBER,
10:28:43 684  	in_system_activity_reason_id IN NUMBER
10:28:43 685  ) AS
10:28:43 686  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
10:28:43 687  -- VARIABLES
10:28:43 688  var_transaction_status_id  TRANSACTION.TRANSACTION_STATUS_ID%TYPE;
10:28:43 689  var_transaction_amount	 TRANSACTION.TRANSACTION_AMOUNT%TYPE;
10:28:43 690  var_updated_by		 TRANSACTION.UPDATED_BY%TYPE;
10:28:43 691  var_update_date		 TRANSACTION.UPDATE_DATE%TYPE;
10:28:43 692  var_order_id		 TRANSACTION.ORDER_ID%TYPE;
10:28:43 693  var_charge_id		 TRANSACTION.CHARGE_ID%TYPE;
10:28:43 694  var_is_refund		 TRANSACTION.IS_REFUND%TYPE;
10:28:43 695  var_is_settled		 TRANSACTION.IS_SETTLED%TYPE;
10:28:43 696  var_transaction_type_code  TRANSACTION.TRANSACTION_TYPE_CODE%TYPE;
10:28:43 697  -- EXCEPTIONS
10:28:43 698  BAD_TRANSACTION_ID     EXCEPTION;
10:28:43 699  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:28:43 700  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43 701  BEGIN
10:28:43 702  
10:28:43 703  	BEGIN
10:28:43 704  	  SELECT
10:28:43 705  	    TRANSACTION.TRANSACTION_STATUS_ID,
10:28:43 706  	    TRANSACTION.TRANSACTION_AMOUNT,
10:28:43 707  	    TRANSACTION.UPDATED_BY,
10:28:43 708  	    TRANSACTION.UPDATE_DATE,
10:28:43 709  	    TRANSACTION.ORDER_ID,
10:28:43 710  	    TRANSACTION.CHARGE_ID,
10:28:43 711  	    TRANSACTION.IS_REFUND,
10:28:43 712  	    TRANSACTION.IS_SETTLED,
10:28:43 713  	    TRANSACTION.TRANSACTION_TYPE_CODE
10:28:43 714  	    into
10:28:43 715  	    var_transaction_status_id,
10:28:43 716  	    var_transaction_amount,
10:28:43 717  	    var_updated_by,
10:28:43 718  	    var_update_date,
10:28:43 719  	    var_order_id,
10:28:43 720  	    var_charge_id,
10:28:43 721  	    var_is_refund,
10:28:43 722  	    var_is_settled,
10:28:43 723  	    var_transaction_type_code
10:28:43 724  	  FROM
10:28:43 725  	    TRANSACTION
10:28:43 726  	  WHERE
10:28:43 727  	    TRANSACTION.ID = in_transaction_id;
10:28:43 728  	  EXCEPTION
10:28:43 729  	    WHEN NO_DATA_FOUND THEN
10:28:43 730  	      RAISE BAD_TRANSACTION_ID;
10:28:43 731  	END;
10:28:43 732  
10:28:43 733  	BEGIN
10:28:43 734  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_TRANSACTION_HISTORY(
10:28:43 735  	    in_transaction_id,
10:28:43 736  	    var_transaction_status_id,
10:28:43 737  	    var_transaction_amount,
10:28:43 738  	    var_updated_by,
10:28:43 739  	    var_update_date,
10:28:43 740  	    var_order_id,
10:28:43 741  	    var_charge_id,
10:28:43 742  	    var_is_refund,
10:28:43 743  	    var_is_settled,
10:28:43 744  	    var_transaction_type_code,
10:28:43 745  	    in_system_activity_reason_id
10:28:43 746  	  );
10:28:43 747  	  EXCEPTION
10:28:43 748  	    WHEN OTHERS THEN
10:28:43 749  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 750  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 751  	END;
10:28:43 752  
10:28:43 753  EXCEPTION
10:28:43 754  WHEN BAD_TRANSACTION_ID THEN
10:28:43 755  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 756  	  SPROC_NAME, 'No such transaction');
10:28:43 757  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 758  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 759  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 760  WHEN OTHERS THEN
10:28:43 761  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 762  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 763  END CREATE_TRANSACTION_HISTORY;
10:28:43 764  
10:28:43 765  /********************************************************************/
10:28:43 766  
10:28:43 767  PROCEDURE CREATE_INVOICE_HISTORY (
10:28:43 768  /*
10:28:43 769  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 770  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 771  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:43 772  */
10:28:43 773  	in_invoice_id		     IN NUMBER,
10:28:43 774  	in_system_activity_reason_id IN NUMBER
10:28:43 775  ) AS
10:28:43 776  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
10:28:43 777  -- VARIABLES
10:28:43 778  var_invoice_status_id NUMBER;
10:28:43 779  var_updated_by	    VARCHAR2(255);
10:28:43 780  var_update_date	    DATE;
10:28:43 781  -- EXCEPTIONS
10:28:43 782  BAD_INVOICE_ID	     EXCEPTION;
10:28:43 783  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:28:43 784  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43 785  BEGIN
10:28:43 786  
10:28:43 787  	BEGIN
10:28:43 788  	  SELECT
10:28:43 789  	    INVOICE.INVOICE_STATUS_ID,
10:28:43 790  	    INVOICE.UPDATED_BY,
10:28:43 791  	    INVOICE.UPDATE_DATE
10:28:43 792  	    into
10:28:43 793  	    var_invoice_status_id,
10:28:43 794  	    var_updated_by,
10:28:43 795  	    var_update_date
10:28:43 796  	  FROM
10:28:43 797  	    INVOICE
10:28:43 798  	  WHERE
10:28:43 799  	    INVOICE.ID = in_invoice_id;
10:28:43 800  	  EXCEPTION
10:28:43 801  	    WHEN NO_DATA_FOUND THEN
10:28:43 802  	      RAISE BAD_INVOICE_ID;
10:28:43 803  	END;
10:28:43 804  
10:28:43 805  	BEGIN
10:28:43 806  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_INVOICE_HISTORY(
10:28:43 807  	    in_invoice_id,
10:28:43 808  	    var_invoice_status_id,
10:28:43 809  	    var_updated_by,
10:28:43 810  	    var_update_date,
10:28:43 811  	    in_system_activity_reason_id
10:28:43 812  	  );
10:28:43 813  	  EXCEPTION
10:28:43 814  	    WHEN OTHERS THEN
10:28:43 815  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 816  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 817  	END;
10:28:43 818  
10:28:43 819  EXCEPTION
10:28:43 820  WHEN BAD_INVOICE_ID THEN
10:28:43 821  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 822  	  SPROC_NAME, 'No such invoice');
10:28:43 823  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 824  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 825  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 826  WHEN OTHERS THEN
10:28:43 827  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 828  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 829  END CREATE_INVOICE_HISTORY;
10:28:43 830  
10:28:43 831  /********************************************************************/
10:28:43 832  
10:28:43 833  PROCEDURE CREATE_LICENSE_HISTORY (
10:28:43 834  /*
10:28:43 835  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 836  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 837  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:43 838  */
10:28:43 839  	in_license_id		     IN NUMBER,
10:28:43 840  	in_system_activity_reason_id IN NUMBER
10:28:43 841  ) AS
10:28:43 842  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
10:28:43 843  -- VARIABLES
10:28:43 844  var_license_status_id	    NUMBER;
10:28:43 845  var_needs_entitlements	    NUMBER;
10:28:43 846  var_start_date		    DATE;
10:28:43 847  var_offer_id		    NUMBER;
10:28:43 848  var_subscription_id	    NUMBER;
10:28:43 849  var_invoice_id		    NUMBER;
10:28:43 850  var_end_date		    DATE;
10:28:43 851  var_is_extension		    NUMBER;
10:28:43 852  var_current_offer_index	    NUMBER;
10:28:43 853  var_current_offer_recurr_num  NUMBER;
10:28:43 854  var_updated_by		    VARCHAR2(255);
10:28:43 855  var_update_date		    DATE;
10:28:43 856  var_entitlement_end_date	    DATE;
10:28:43 857  var_grace_start_date	    DATE;
10:28:43 858  var_grace_end_date	    DATE;
10:28:43 859  -- EXCEPTIONS
10:28:43 860  BAD_LICENSE_ID	     EXCEPTION;
10:28:43 861  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:28:43 862  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43 863  BEGIN
10:28:43 864  
10:28:43 865  	BEGIN
10:28:43 866  	  SELECT
10:28:43 867  	    LICENSE.LICENSE_STATUS_ID,
10:28:43 868  	    LICENSE.NEEDS_ENTITLEMENTS,
10:28:43 869  	    LICENSE.START_DATE,
10:28:43 870  	    LICENSE.OFFER_ID,
10:28:43 871  	    LICENSE.SUBSCRIPTION_ID,
10:28:43 872  	    LICENSE.INVOICE_ID,
10:28:43 873  	    LICENSE.END_DATE,
10:28:43 874  	    LICENSE.IS_EXTENSION,
10:28:43 875  	    LICENSE.CURRENT_OFFER_INDEX,
10:28:43 876  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
10:28:43 877  	    LICENSE.UPDATED_BY,
10:28:43 878  	    LICENSE.UPDATE_DATE,
10:28:43 879  	    LICENSE.ENTITLEMENT_END_DATE,
10:28:43 880  	    LICENSE.GRACE_START_DATE,
10:28:43 881  	    LICENSE.GRACE_END_DATE
10:28:43 882  	    into
10:28:43 883  	    var_license_status_id,
10:28:43 884  	    var_needs_entitlements,
10:28:43 885  	    var_start_date,
10:28:43 886  	    var_offer_id,
10:28:43 887  	    var_subscription_id,
10:28:43 888  	    var_invoice_id,
10:28:43 889  	    var_end_date,
10:28:43 890  	    var_is_extension,
10:28:43 891  	    var_current_offer_index,
10:28:43 892  	    var_current_offer_recurr_num,
10:28:43 893  	    var_updated_by,
10:28:43 894  	    var_update_date,
10:28:43 895  	    var_entitlement_end_date,
10:28:43 896  	    var_grace_start_date,
10:28:43 897  	    var_grace_end_date
10:28:43 898  	  FROM
10:28:43 899  	    LICENSE
10:28:43 900  	  WHERE
10:28:43 901  	    LICENSE.ID = in_license_id;
10:28:43 902  	  EXCEPTION
10:28:43 903  	    WHEN NO_DATA_FOUND THEN
10:28:43 904  	      RAISE BAD_LICENSE_ID;
10:28:43 905  	END;
10:28:43 906  
10:28:43 907  	BEGIN
10:28:43 908  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_LICENSE_HISTORY(
10:28:43 909  	    in_license_id,
10:28:43 910  	    var_license_status_id,
10:28:43 911  	    var_needs_entitlements,
10:28:43 912  	    var_start_date,
10:28:43 913  	    var_offer_id,
10:28:43 914  	    var_subscription_id,
10:28:43 915  	    var_invoice_id,
10:28:43 916  	    var_end_date,
10:28:43 917  	    var_updated_by,
10:28:43 918  	    var_update_date,
10:28:43 919  	    var_is_extension,
10:28:43 920  	    var_current_offer_index,
10:28:43 921  	    var_current_offer_recurr_num,
10:28:43 922  	    in_system_activity_reason_id,
10:28:43 923  	    var_entitlement_end_date,
10:28:43 924  	    var_grace_start_date,
10:28:43 925  	    var_grace_end_date
10:28:43 926  	  );
10:28:43 927  	  EXCEPTION
10:28:43 928  	    WHEN OTHERS THEN
10:28:43 929  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 930  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 931  	END;
10:28:43 932  
10:28:43 933  EXCEPTION
10:28:43 934  WHEN BAD_LICENSE_ID THEN
10:28:43 935  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 936  	  SPROC_NAME, 'No such license');
10:28:43 937  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 938  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 939  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 940  WHEN OTHERS THEN
10:28:43 941  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 942  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 943  END CREATE_LICENSE_HISTORY;
10:28:43 944  
10:28:43 945  /********************************************************************/
10:28:43 946  
10:28:43 947  PROCEDURE CREATE_CHARGE_HISTORY (
10:28:43 948  /*
10:28:43 949  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 950  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 951  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:43 952  */
10:28:43 953  	in_charge_id		    IN NUMBER,
10:28:43 954  	in_system_activity_reason_id IN NUMBER
10:28:43 955  ) AS
10:28:43 956  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
10:28:43 957  -- VARIABLES
10:28:43 958  var_invoice_id	     NUMBER;
10:28:43 959  var_transaction_id     NUMBER;
10:28:43 960  var_instrument_type_id NUMBER;
10:28:43 961  var_instrument_id      NUMBER;
10:28:43 962  var_charge_amount      NUMBER;
10:28:43 963  var_charge_status_id   NUMBER;
10:28:43 964  var_updated_by	     VARCHAR2(255);
10:28:43 965  var_update_date	     DATE;
10:28:43 966  -- EXCEPTIONS
10:28:43 967  BAD_CHARGE_ID	     EXCEPTION;
10:28:43 968  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:28:43 969  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43 970  BEGIN
10:28:43 971  
10:28:43 972  	BEGIN
10:28:43 973  	  SELECT
10:28:43 974  	    CHARGE.INVOICE_ID,
10:28:43 975  	    CHARGE.TRANSACTION_ID,
10:28:43 976  	    CHARGE.INSTRUMENT_TYPE_ID,
10:28:43 977  	    CHARGE.INSTRUMENT_ID,
10:28:43 978  	    CHARGE.CHARGE_AMOUNT,
10:28:43 979  	    CHARGE.CHARGE_STATUS_ID,
10:28:43 980  	    CHARGE.UPDATED_BY,
10:28:43 981  	    CHARGE.UPDATE_DATE
10:28:43 982  	    into
10:28:43 983  	    var_invoice_id,
10:28:43 984  	    var_transaction_id,
10:28:43 985  	    var_instrument_type_id,
10:28:43 986  	    var_instrument_id,
10:28:43 987  	    var_charge_amount,
10:28:43 988  	    var_charge_status_id,
10:28:43 989  	    var_updated_by,
10:28:43 990  	    var_update_date
10:28:43 991  	  FROM
10:28:43 992  	    CHARGE
10:28:43 993  	  WHERE
10:28:43 994  	    CHARGE.ID = in_charge_id;
10:28:43 995  	  EXCEPTION
10:28:43 996  	    WHEN NO_DATA_FOUND THEN
10:28:43 997  	      RAISE BAD_CHARGE_ID;
10:28:43 998  	END;
10:28:43 999  
10:28:43 1000  	 BEGIN
10:28:43 1001  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_CHARGE_HISTORY (
10:28:43 1002  	     in_charge_id,
10:28:43 1003  	     var_invoice_id,
10:28:43 1004  	     var_transaction_id,
10:28:43 1005  	     var_instrument_type_id,
10:28:43 1006  	     var_instrument_id,
10:28:43 1007  	     var_charge_amount,
10:28:43 1008  	     var_updated_by,
10:28:43 1009  	     var_update_date,
10:28:43 1010  	     var_charge_status_id,
10:28:43 1011  	     in_system_activity_reason_id
10:28:43 1012  	   );
10:28:43 1013  	   EXCEPTION
10:28:43 1014  	     WHEN OTHERS THEN
10:28:43 1015  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:43 1016  	       RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 1017  	 END;
10:28:43 1018  
10:28:43 1019  EXCEPTION
10:28:43 1020  WHEN BAD_CHARGE_ID THEN
10:28:43 1021  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1022  	   SPROC_NAME, 'No such license');
10:28:43 1023  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 1024  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 1025  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 1026  WHEN OTHERS THEN
10:28:43 1027  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1028  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1029  END CREATE_CHARGE_HISTORY;
10:28:43 1030  
10:28:43 1031  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
10:28:43 1032  /*
10:28:43 1033  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 1034  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 1035  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:43 1036  */
10:28:43 1037  	 in_invoice_adjustment_id  IN NUMBER,
10:28:43 1038  	 in_system_activity_reason_id IN NUMBER
10:28:43 1039  ) AS
10:28:43 1040  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
10:28:43 1041  --VARIABLED
10:28:43 1042  var_invoice_adj_id	   INVOICE_ADJUSTMENT.ID%TYPE;
10:28:43 1043  var_invoice_id		   INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
10:28:43 1044  var_is_credit		   INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
10:28:43 1045  var_charge_id		   INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
10:28:43 1046  var_adjustment_date	   INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
10:28:43 1047  var_create_date		   INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
10:28:43 1048  var_created_by		   INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
10:28:43 1049  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
10:28:43 1050  var_update_date		   INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
10:28:43 1051  var_updated_by		   INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
10:28:43 1052  BAD_INVOICE_ADJ_ID	   EXCEPTION;
10:28:43 1053  CAN_NOT_CREATE_HISTORY	   EXCEPTION;
10:28:43 1054  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43 1055  BEGIN
10:28:43 1056  
10:28:43 1057  	 BEGIN
10:28:43 1058  	   SELECT
10:28:43 1059  	     INVOICE_ADJUSTMENT.ID,
10:28:43 1060  	     INVOICE_ADJUSTMENT.INVOICE_ID,
10:28:43 1061  	     INVOICE_ADJUSTMENT.IS_CREDIT,
10:28:43 1062  	     INVOICE_ADJUSTMENT.CHARGE_ID,
10:28:43 1063  	     INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
10:28:43 1064  	     INVOICE_ADJUSTMENT.CREATE_DATE,
10:28:43 1065  	     INVOICE_ADJUSTMENT.CREATED_BY,
10:28:43 1066  	     INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
10:28:43 1067  	     INVOICE_ADJUSTMENT.UPDATE_DATE,
10:28:43 1068  	     INVOICE_ADJUSTMENT.UPDATED_BY
10:28:43 1069  	     into
10:28:43 1070  	     var_invoice_adj_id,
10:28:43 1071  	     var_invoice_id,
10:28:43 1072  	     var_is_credit,
10:28:43 1073  	     var_charge_id,
10:28:43 1074  	     var_adjustment_date,
10:28:43 1075  	     var_create_date,
10:28:43 1076  	     var_created_by,
10:28:43 1077  	     var_invoice_adj_reason_id,
10:28:43 1078  	     var_update_date,
10:28:43 1079  	     var_updated_by
10:28:43 1080  	   FROM
10:28:43 1081  	     INVOICE_ADJUSTMENT
10:28:43 1082  	   WHERE
10:28:43 1083  	     INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
10:28:43 1084  	   EXCEPTION
10:28:43 1085  	     WHEN NO_DATA_FOUND THEN
10:28:43 1086  	       RAISE BAD_INVOICE_ADJ_ID;
10:28:43 1087  	 END;
10:28:43 1088  
10:28:43 1089  	 BEGIN
10:28:43 1090  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_INVOICE_ADJ_HISTORY (
10:28:43 1091  	     var_invoice_adj_id,
10:28:43 1092  	     var_invoice_id,
10:28:43 1093  	     var_is_credit,
10:28:43 1094  	     var_charge_id,
10:28:43 1095  	     var_adjustment_date,
10:28:43 1096  	     var_create_date,
10:28:43 1097  	     var_created_by,
10:28:43 1098  	     var_invoice_adj_reason_id,
10:28:43 1099  	     var_update_date,
10:28:43 1100  	     var_updated_by
10:28:43 1101  	   );
10:28:43 1102  	   EXCEPTION
10:28:43 1103  	     WHEN OTHERS THEN
10:28:43 1104  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:43 1105  	       RAISE CAN_NOT_CREATE_HISTORY;
10:28:43 1106  	 END;
10:28:43 1107  
10:28:43 1108  EXCEPTION
10:28:43 1109  WHEN BAD_INVOICE_ADJ_ID THEN
10:28:43 1110  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1111  	   SPROC_NAME, 'No such invoice adjustment');
10:28:43 1112  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:43 1113  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 1114  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:43 1115  WHEN OTHERS THEN
10:28:43 1116  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1117  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1118  END CREATE_INVOICE_ADJ_HISTORY;
10:28:43 1119  
10:28:43 1120  END PROCS_HISTORY_V24;
10:28:43 1121  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.10
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_itunes_receipt.sql
Compiling body for procs_itunes_receipt.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V24" AS
10:28:43   2  
10:28:43   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
10:28:43   4  /*
10:28:43   5  Throws exceptions:
10:28:43   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43   7  */
10:28:43   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:43   9  	out_result_set	    OUT SYS_REFCURSOR
10:28:43  10  ) AS
10:28:43  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
10:28:43  12  BEGIN
10:28:43  13  OPEN out_result_set FOR
10:28:43  14  	      SELECT
10:28:43  15  	      i.id as ITUNES_RECEIPT_ID,
10:28:43  16  	      s.id as SUBSCRIPTION_ID,
10:28:43  17  	      s.SUBSCRIPTION_STATUS_ID,
10:28:43  18  	      i.STATUS,
10:28:43  19  	      a.GROUP_ID
10:28:43  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
10:28:43  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
10:28:43  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
10:28:43  23  	      AND a.ID(+) = s.ACCOUNT_ID;
10:28:43  24  END ITUNES_RECEIPT_SUBSCRIPTION;
10:28:43  25  
10:28:43  26  
10:28:43  27  PROCEDURE CREATE_RECEIPT(
10:28:43  28  /*
10:28:43  29  Throws exceptions:
10:28:43  30  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43  31  */
10:28:43  32  	  out_id      OUT NUMBER,
10:28:43  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:43  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
10:28:43  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
10:28:43  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
10:28:43  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:43  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:28:43  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:28:43  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:43  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:28:43  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:28:43  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:28:43  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
10:28:43  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
10:28:43  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:28:43  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
10:28:43  48  ) AS
10:28:43  49  -- VARIABLES
10:28:43  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
10:28:43  51  -- EXCEPTIONS
10:28:43  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:43  53  BEGIN
10:28:43  54  
10:28:43  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V24.CREATE_RECEIPT(
10:28:43  56  	  out_id	      =>  out_id,
10:28:43  57  	  in_subscription_id  =>  in_subscription_id,
10:28:43  58  	  in_receipt	      =>  in_receipt,
10:28:43  59  	  in_status	      =>  in_status,
10:28:43  60  	  in_quantity	      =>  in_quantity,
10:28:43  61  	  in_product_id       =>  in_product_id,
10:28:43  62  	  in_transaction_id   =>  in_transaction_id,
10:28:43  63  	  in_purchase_date    =>  in_purchase_date,
10:28:43  64  	  in_original_transaction_id  =>  in_original_transaction_id,
10:28:43  65  	  in_original_purchase_date => in_original_purchase_date,
10:28:43  66  	  in_app_item_id      =>  in_app_item_id,
10:28:43  67  	  in_version_external_id  =>  in_version_external_id,
10:28:43  68  	  in_bid	      =>  in_bid,
10:28:43  69  	  in_bvrs	      =>  in_bvrs,
10:28:43  70  	  in_expires_date     =>  in_expires_date,
10:28:43  71  	  in_created_by       =>  in_created_by
10:28:43  72  	);
10:28:43  73  
10:28:43  74  END CREATE_RECEIPT;
10:28:43  75  
10:28:43  76  PROCEDURE UPDATE_RECEIPT(
10:28:43  77  /*
10:28:43  78  Throws exceptions:
10:28:43  79  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43  80  */
10:28:43  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
10:28:43  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
10:28:43  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
10:28:43  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
10:28:43  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:28:43  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:28:43  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:28:43  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:28:43  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:28:43  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:28:43  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:28:43  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
10:28:43  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
10:28:43  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:28:43  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
10:28:43  96  	  in_is_expired       IN NUMBER
10:28:43  97  ) AS
10:28:43  98  CANCEL_DATE DATE;
10:28:43  99  BEGIN
10:28:43 100  	-- see if cancel date is already set
10:28:43 101  	BEGIN
10:28:43 102  	  SELECT
10:28:43 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
10:28:43 104  	  FROM
10:28:43 105  	    ITUNES_RECEIPT IR
10:28:43 106  	  WHERE
10:28:43 107  	    IR.ID = in_id;
10:28:43 108  	EXCEPTION
10:28:43 109  	  WHEN NO_DATA_FOUND THEN
10:28:43 110  	    CANCEL_DATE := NULL;
10:28:43 111  	END;
10:28:43 112  
10:28:43 113  	-- only update cancel date if it isn't already set and the receipt is expired
10:28:43 114  	IF in_is_expired = 1 THEN
10:28:43 115  	  IF CANCEL_DATE IS NULL THEN
10:28:43 116  	    CANCEL_DATE := SYSDATE;
10:28:43 117  	  END IF;
10:28:43 118  	ELSE
10:28:43 119  	  CANCEL_DATE := NULL;
10:28:43 120  	END IF;
10:28:43 121  
10:28:43 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V24.UPDATE_RECEIPT(
10:28:43 123  	  in_id => in_id,
10:28:43 124  	  in_receipt => in_receipt,
10:28:43 125  	  in_status => in_status,
10:28:43 126  	  in_quantity => in_quantity,
10:28:43 127  	  in_product_id => in_product_id,
10:28:43 128  	  in_transaction_id => in_transaction_id,
10:28:43 129  	  in_purchase_date => in_purchase_date,
10:28:43 130  	  in_original_transaction_id => in_original_transaction_id,
10:28:43 131  	  in_original_purchase_date => in_original_purchase_date,
10:28:43 132  	  in_app_item_id => in_app_item_id,
10:28:43 133  	  in_version_external_id => in_version_external_id,
10:28:43 134  	  in_bid => in_bid,
10:28:43 135  	  in_bvrs => in_bvrs,
10:28:43 136  	  in_expires_date => in_expires_date,
10:28:43 137  	  in_updated_by => in_updated_by,
10:28:43 138  	  in_cancel_date => CANCEL_DATE
10:28:43 139  	);
10:28:43 140  END UPDATE_RECEIPT;
10:28:43 141  
10:28:43 142  PROCEDURE LINK_ITUNES_RECEIPT(
10:28:43 143  /*
10:28:43 144  Throws exceptions:
10:28:43 145  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 146  */
10:28:43 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
10:28:43 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:28:43 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
10:28:43 150  ) AS
10:28:43 151  BEGIN
10:28:43 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V24.LINK_ITUNES_RECEIPT(
10:28:43 153  		      in_id => in_id,
10:28:43 154  		      in_subscription_id => in_subscription_id,
10:28:43 155  		      in_updated_by => in_updated_by
10:28:43 156  		      );
10:28:43 157  END LINK_ITUNES_RECEIPT;
10:28:43 158  
10:28:43 159  PROCEDURE MARK_RECEIPT_CHECKED(
10:28:43 160  /*
10:28:43 161  Throws exceptions:
10:28:43 162  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 163  */
10:28:43 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
10:28:43 165  ) AS
10:28:43 166  BEGIN
10:28:43 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V24.MARK_RECEIPT_CHECKED(
10:28:43 168  	  in_id => in_id
10:28:43 169  	);
10:28:43 170  END MARK_RECEIPT_CHECKED;
10:28:43 171  
10:28:43 172  PROCEDURE GET_ITUNES_RECEIPTS (
10:28:43 173  /*
10:28:43 174  Throws exceptions:
10:28:43 175  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 176  */
10:28:43 177  	out_result_set	    OUT SYS_REFCURSOR,
10:28:43 178  	in_row_number	    IN NUMBER DEFAULT 500
10:28:43 179  ) AS
10:28:43 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
10:28:43 181  BEGIN
10:28:43 182  OPEN out_result_set FOR
10:28:43 183  SELECT * FROM
10:28:43 184  (
10:28:43 185  	SELECT * FROM
10:28:43 186  	(
10:28:43 187  	  SELECT
10:28:43 188  	    IR.ID,
10:28:43 189  	    IR.SUBSCRIPTION_ID,
10:28:43 190  	    IR.RECEIPT,
10:28:43 191  	    IR.STATUS,
10:28:43 192  	    IR.QUANTITY,
10:28:43 193  	    IR.PRODUCT_ID,
10:28:43 194  	    IR.TRANSACTION_ID,
10:28:43 195  	    IR.PURCHASE_DATE,
10:28:43 196  	    IR.ORIGINAL_TRANSACTION_ID,
10:28:43 197  	    IR.ORIGINAL_PURCHASE_DATE,
10:28:43 198  	    IR.APP_ITEM_ID,
10:28:43 199  	    IR.VERSION_EXTERNAL_ID,
10:28:43 200  	    IR.BID,
10:28:43 201  	    IR.BVRS,
10:28:43 202  	    IR.EXPIRES_DATE,
10:28:43 203  	    IR.CREATE_DATe,
10:28:43 204  	    IR.CREATED_BY,
10:28:43 205  	    IR.UPDATE_DATE,
10:28:43 206  	    IR.UPDATED_BY,
10:28:43 207  	    IR.LAST_CHECK_DATE,
10:28:43 208  	    OC.VENDOR_SOURCE_ID
10:28:43 209  	  FROM
10:28:43 210  	    CORE_OWNER.ITUNES_RECEIPT IR
10:28:43 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
10:28:43 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
10:28:43 213  	  WHERE
10:28:43 214  	    NOT EXISTS
10:28:43 215  	    (
10:28:43 216  	      SELECT NULL
10:28:43 217  	      FROM PROCESS_RETRY_THROTTLE
10:28:43 218  	      WHERE PROCESS_NAME = SPROC_NAME
10:28:43 219  		AND GENERIC_ID = IR.ID
10:28:43 220  	    ) AND
10:28:43 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
10:28:43 222  	    ROWNUM <= in_row_number*10
10:28:43 223  	)
10:28:43 224  	ORDER BY dbms_random.value
10:28:43 225  )
10:28:43 226  WHERE
10:28:43 227  	ROWNUM <= in_row_number;
10:28:43 228  
10:28:43 229  END GET_ITUNES_RECEIPTS;
10:28:43 230  
10:28:43 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
10:28:43 232  /*
10:28:43 233  Throws exceptions:
10:28:43 234  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 235  */
10:28:43 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
10:28:43 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
10:28:43 238  ) AS
10:28:43 239  BEGIN
10:28:43 240  
10:28:43 241  SELECT
10:28:43 242  	  oc.vendor_source_id
10:28:43 243  INTO
10:28:43 244  	  out_vendor_source_id
10:28:43 245  FROM
10:28:43 246  	  offer_chain_meta_data ocmd
10:28:43 247  JOIN
10:28:43 248  	  offer_chain oc
10:28:43 249  ON
10:28:43 250  	  ocmd.offer_chain_id = oc.id
10:28:43 251  WHERE
10:28:43 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
10:28:43 253  AND ocmd.value = in_itunes_pid
10:28:43 254  AND rownum <= 1;
10:28:43 255  
10:28:43 256  END GET_VENDOR_FROM_ITUNES_PID;
10:28:43 257  
10:28:43 258  END PROCS_ITUNES_RECEIPT_V24;
10:28:43 259  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.04
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_line_items.sql
Compiling body for procs_line_items.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V24" AS
10:28:43   2  
10:28:43   3  PROCEDURE ADD_LINE_ITEMS(
10:28:43   4  /*
10:28:43   5  Throws exceptions:
10:28:43   6  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43   7  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43   8  */
10:28:43   9  	in_invoice_id IN NUMBER,
10:28:43  10  	in_offer_id   IN NUMBER,
10:28:43  11  	in_created_by IN VARCHAR2
10:28:43  12  ) AS
10:28:43  13  -- VARIABLES
10:28:43  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
10:28:43  15  temp_invoice_id NUMBER;
10:28:43  16  temp_offer_id   NUMBER;
10:28:43  17  
10:28:43  18  var_line_item_data SYS_REFCURSOR;
10:28:43  19  var_new_line_item_id NUMBER;
10:28:43  20  var_product_unit_price NUMBER (10,6);
10:28:43  21  var_product_offering_price NUMBER(10,6);
10:28:43  22  var_product_offering_oprice NUMBER(10,6);
10:28:43  23  var_product_quantity NUMBER;
10:28:43  24  var_product_offering_id NUMBER;
10:28:43  25  
10:28:43  26  var_line_item_price	  NUMBER(10,2);
10:28:43  27  var_discount_fixed_amount   NUMBER(10,6);
10:28:43  28  var_discount_percent_amount NUMBER(10,2);
10:28:43  29  
10:28:43  30  
10:28:43  31  -- EXCEPTIONS
10:28:43  32  BAD_INVOICE_ID EXCEPTION;
10:28:43  33  BAD_OFFER_ID EXCEPTION;
10:28:43  34  BAD_DISCOUNT EXCEPTION;
10:28:43  35  BEGIN
10:28:43  36  
10:28:43  37  	-- Check that given invoice exists
10:28:43  38  	BEGIN
10:28:43  39  	  SELECT
10:28:43  40  	    INVOICE.ID into temp_invoice_id
10:28:43  41  	  FROM
10:28:43  42  	    INVOICE
10:28:43  43  	  WHERE
10:28:43  44  	    INVOICE.ID = in_invoice_id;
10:28:43  45  
10:28:43  46  	  EXCEPTION
10:28:43  47  	    WHEN NO_DATA_FOUND THEN
10:28:43  48  	      RAISE BAD_INVOICE_ID;
10:28:43  49  	END;
10:28:43  50  
10:28:43  51  	-- Check that given offer exists
10:28:43  52  	BEGIN
10:28:43  53  	  SELECT
10:28:43  54  	    OFFER.ID into temp_offer_id
10:28:43  55  	  FROM
10:28:43  56  	    OFFER
10:28:43  57  	  WHERE
10:28:43  58  	    OFFER.ID = in_offer_id;
10:28:43  59  
10:28:43  60  	  EXCEPTION
10:28:43  61  	    WHEN NO_DATA_FOUND THEN
10:28:43  62  	      RAISE BAD_OFFER_ID;
10:28:43  63  	END;
10:28:43  64  
10:28:43  65  	-- Get product_offering data
10:28:43  66  	OPEN var_line_item_data FOR
10:28:43  67  	SELECT
10:28:43  68  	  PRODUCT_OFFERING.ID,
10:28:43  69  	  PRODUCT_OFFERING.UNIT_PRICE,
10:28:43  70  	  PRODUCT_OFFERING.QUANTITY
10:28:43  71  	FROM
10:28:43  72  	  OFFER_PRODUCT_OFFERING
10:28:43  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:28:43  74  	WHERE
10:28:43  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
10:28:43  76  
10:28:43  77  	-- insert line items
10:28:43  78  	-- add discounts to line items
10:28:43  79  	LOOP
10:28:43  80  	  FETCH var_line_item_data INTO
10:28:43  81  	    var_product_offering_id,
10:28:43  82  	    var_product_unit_price,
10:28:43  83  	    var_product_quantity;
10:28:43  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
10:28:43  85  
10:28:43  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
10:28:43  87  	  var_product_offering_price := var_product_offering_oprice;
10:28:43  88  
10:28:43  89  	  -- Apply discounts to line_item
10:28:43  90  	  BEGIN
10:28:43  91  	    SELECT
10:28:43  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
10:28:43  93  	    FROM
10:28:43  94  	      DISCOUNT_PRODUCT_OFFERING
10:28:43  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:28:43  96  	    WHERE
10:28:43  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:28:43  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
10:28:43  99  	    EXCEPTION
10:28:43 100  	    WHEN NO_DATA_FOUND THEN
10:28:43 101  	      var_discount_fixed_amount := NULL;
10:28:43 102  	  END;
10:28:43 103  
10:28:43 104  	  BEGIN
10:28:43 105  	    SELECT
10:28:43 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
10:28:43 107  	    FROM
10:28:43 108  	      DISCOUNT_PRODUCT_OFFERING
10:28:43 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:28:43 110  	    WHERE
10:28:43 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:28:43 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
10:28:43 113  	    EXCEPTION
10:28:43 114  	    WHEN NO_DATA_FOUND THEN
10:28:43 115  	      var_discount_percent_amount := NULL;
10:28:43 116  	  END;
10:28:43 117  
10:28:43 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
10:28:43 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
10:28:43 120  	  END IF;
10:28:43 121  
10:28:43 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
10:28:43 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
10:28:43 124  	  END IF;
10:28:43 125  
10:28:43 126  	  var_line_item_price := PROCS_COMMON_V24.ROUND_10_6_TO_10_2(var_product_offering_price);
10:28:43 127  
10:28:43 128  	  IF (var_line_item_price < 0) THEN
10:28:43 129  	      RAISE BAD_DISCOUNT;
10:28:43 130  	  END IF;
10:28:43 131  
10:28:43 132  	  var_new_line_item_id := NULL;
10:28:43 133  	  PROCS_LINE_ITEMS_CRU_V24.CREATE_LINE_ITEM(
10:28:43 134  	    inout_line_item_id	=> var_new_line_item_id,
10:28:43 135  	    in_product_offer_id => var_product_offering_id,
10:28:43 136  	    in_invoice_id	=> in_invoice_id,
10:28:43 137  	    in_amount		=> var_line_item_price,
10:28:43 138  	    in_created_by	=> in_created_by,
10:28:43 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
10:28:43 140  	    in_taxes_amount	=> NULL
10:28:43 141  	  );
10:28:43 142  
10:28:43 143  	  FOR f_discount IN (
10:28:43 144  	    SELECT
10:28:43 145  	      DISCOUNT.ID
10:28:43 146  	    FROM
10:28:43 147  	      DISCOUNT_PRODUCT_OFFERING
10:28:43 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:28:43 149  	    WHERE
10:28:43 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:28:43 151  	  )
10:28:43 152  	  LOOP
10:28:43 153  	    PROCS_LINE_ITEMS_CRU_V24.CREATE_DISCOUNT_LINE_ITEM(
10:28:43 154  	      in_discount_id =>  f_discount.ID,
10:28:43 155  	      in_line_item_id => var_new_line_item_id
10:28:43 156  	    );
10:28:43 157  	  END LOOP;
10:28:43 158  	END LOOP;
10:28:43 159  
10:28:43 160  EXCEPTION
10:28:43 161  WHEN BAD_INVOICE_ID THEN
10:28:43 162  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 163  	  SPROC_NAME, 'No such license');
10:28:43 164  WHEN BAD_OFFER_ID THEN
10:28:43 165  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 166  	  SPROC_NAME, 'No such offer');
10:28:43 167  WHEN BAD_DISCOUNT THEN
10:28:43 168  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 169  	  SPROC_NAME, 'Bad Discount');
10:28:43 170  WHEN OTHERS THEN
10:28:43 171  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 173  END ADD_LINE_ITEMS;
10:28:43 174  
10:28:43 175  /******************************************************************************/
10:28:43 176  
10:28:43 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
10:28:43 178  	in_line_item_id    IN NUMBER,
10:28:43 179  	in_amount	   IN NUMBER,
10:28:43 180  	in_discount_amount IN NUMBER,
10:28:43 181  	in_taxes_amount    IN NUMBER
10:28:43 182  ) AS
10:28:43 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
10:28:43 184  -- VARIABLES
10:28:43 185  temp_line_item_id NUMBER;
10:28:43 186  -- EXCEPTIONS
10:28:43 187  BAD_LINE_ITEM_ID EXCEPTION;
10:28:43 188  BEGIN
10:28:43 189  
10:28:43 190  	-- Check that line item exists
10:28:43 191  	BEGIN
10:28:43 192  	  SELECT
10:28:43 193  	    LINE_ITEM.ID into temp_line_item_id
10:28:43 194  	  FROM
10:28:43 195  	    LINE_ITEM
10:28:43 196  	  WHERE
10:28:43 197  	    LINE_ITEM.ID = in_line_item_id;
10:28:43 198  	  EXCEPTION
10:28:43 199  	    WHEN NO_DATA_FOUND THEN
10:28:43 200  	      RAISE BAD_LINE_ITEM_ID;
10:28:43 201  	END;
10:28:43 202  
10:28:43 203  	-- Update line item
10:28:43 204  	PROCS_LINE_ITEMS_CRU_V24.UPDATE_LINE_ITEM(
10:28:43 205  	  in_line_item_id    => in_line_item_id,
10:28:43 206  	  in_amount	     => in_amount,
10:28:43 207  	  in_discount_amount => in_discount_amount,
10:28:43 208  	  in_taxes_amount    => in_taxes_amount
10:28:43 209  	);
10:28:43 210  
10:28:43 211  EXCEPTION
10:28:43 212  WHEN BAD_LINE_ITEM_ID THEN
10:28:43 213  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 214  	  SPROC_NAME, 'No such line item');
10:28:43 215  WHEN OTHERS THEN
10:28:43 216  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 218  END UPDATE_LINE_ITEM_AMOUNT;
10:28:43 219  
10:28:43 220  /******************************************************************************/
10:28:43 221  
10:28:43 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:28:43 223  /*
10:28:43 224  Throws exceptions:
10:28:43 225  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 226  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 227  */
10:28:43 228  	in_invoice_id  IN NUMBER,
10:28:43 229  	out_result_set OUT SYS_REFCURSOR
10:28:43 230  ) AS
10:28:43 231  -- VARIABLES
10:28:43 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
10:28:43 233  temp_invoice_id NUMBER;
10:28:43 234  
10:28:43 235  -- EXCEPTIONS
10:28:43 236  BAD_INVOICE_ID EXCEPTION;
10:28:43 237  BEGIN
10:28:43 238  
10:28:43 239  	-- Check that given invoice exists
10:28:43 240  	BEGIN
10:28:43 241  	  SELECT
10:28:43 242  	    INVOICE.ID into temp_invoice_id
10:28:43 243  	  FROM
10:28:43 244  	    INVOICE
10:28:43 245  	  WHERE
10:28:43 246  	    INVOICE.ID = in_invoice_id;
10:28:43 247  	  EXCEPTION
10:28:43 248  	    WHEN NO_DATA_FOUND THEN
10:28:43 249  	      RAISE BAD_INVOICE_ID;
10:28:43 250  	END;
10:28:43 251  
10:28:43 252  	-- Select line items
10:28:43 253  	OPEN out_result_set FOR
10:28:43 254  	SELECT
10:28:43 255  	  LINE_ITEM.ID,
10:28:43 256  	  LINE_ITEM.AMOUNT,
10:28:43 257  	  LINE_ITEM.CREATE_DATE,
10:28:43 258  	  LINE_ITEM.CREATED_BY,
10:28:43 259  	  LINE_ITEM.INVOICE_ID,
10:28:43 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
10:28:43 261  	  LINE_ITEM.TAXES_AMOUNT,
10:28:43 262  	  LINE_ITEM.PRODUCT_OFFER_ID
10:28:43 263  	FROM
10:28:43 264  	  LINE_ITEM
10:28:43 265  	WHERE
10:28:43 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
10:28:43 267  
10:28:43 268  EXCEPTION
10:28:43 269  WHEN BAD_INVOICE_ID THEN
10:28:43 270  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 271  	  SPROC_NAME, 'No such invoice');
10:28:43 272  WHEN OTHERS THEN
10:28:43 273  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 275  END GET_INVOICE_LINE_ITEMS;
10:28:43 276  
10:28:43 277  /******************************************************************************/
10:28:43 278  
10:28:43 279  PROCEDURE GET_LINE_ITEM_TAXES (
10:28:43 280  /*
10:28:43 281  Throws exceptions:
10:28:43 282  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 283  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 284  */
10:28:43 285  	in_line_item_id IN  NUMBER,
10:28:43 286  	out_result_set	OUT SYS_REFCURSOR
10:28:43 287  ) AS
10:28:43 288  -- VARIABLES
10:28:43 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
10:28:43 290  temp_line_item_id NUMBER;
10:28:43 291  -- EXCEPTIONS
10:28:43 292  BAD_LINE_ITEM_ID EXCEPTION;
10:28:43 293  BEGIN
10:28:43 294  
10:28:43 295  	-- Check that line item exists
10:28:43 296  	BEGIN
10:28:43 297  	  SELECT
10:28:43 298  	    LINE_ITEM.ID into temp_line_item_id
10:28:43 299  	  FROM
10:28:43 300  	    LINE_ITEM
10:28:43 301  	  WHERE
10:28:43 302  	    LINE_ITEM.ID = in_line_item_id;
10:28:43 303  	  EXCEPTION
10:28:43 304  	    WHEN NO_DATA_FOUND THEN
10:28:43 305  	      RAISE BAD_LINE_ITEM_ID;
10:28:43 306  	END;
10:28:43 307  
10:28:43 308  	-- Get all taxes for given line item
10:28:43 309  	OPEN out_result_set FOR
10:28:43 310  	SELECT
10:28:43 311  	  TAX.ID,
10:28:43 312  	  TAX.CALCULATED_AMOUNT,
10:28:43 313  	  TAX.CREATE_DATE,
10:28:43 314  	  TAX.CREATED_BY,
10:28:43 315  	  TAX.EFFECTIVE_RATE,
10:28:43 316  	  TAX.EXT_RESULT,
10:28:43 317  	  TAX.EXT_TAX_TYPE,
10:28:43 318  	  TAX.IMPOSITION,
10:28:43 319  	  TAX.IMPOSITION_TYPE,
10:28:43 320  	  TAX.JURISDICTION_ID,
10:28:43 321  	  TAX.JURISDICTION_LEVEL_ID,
10:28:43 322  	  TAX.JURISDICTION_NAME,
10:28:43 323  	  TAX.LINE_ITEM_ID,
10:28:43 324  	  TAX.TAX_RULE_ID,
10:28:43 325  	  TAX.TAX_TYPE_ID,
10:28:43 326  	  TAX.TAXABLE_AMOUNT
10:28:43 327  	FROM
10:28:43 328  	  TAX
10:28:43 329  	WHERE
10:28:43 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
10:28:43 331  
10:28:43 332  EXCEPTION
10:28:43 333  WHEN BAD_LINE_ITEM_ID THEN
10:28:43 334  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 335  	  SPROC_NAME, 'No such line item');
10:28:43 336  WHEN OTHERS THEN
10:28:43 337  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 339  END GET_LINE_ITEM_TAXES;
10:28:43 340  
10:28:43 341  -- norlov: #38770
10:28:43 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
10:28:43 343  /*
10:28:43 344  Throws exceptions:
10:28:43 345  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 346  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 347  */
10:28:43 348  	in_line_item_id IN  NUMBER,
10:28:43 349  	out_result_set	OUT SYS_REFCURSOR
10:28:43 350  ) AS
10:28:43 351  -- VARIABLES
10:28:43 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
10:28:43 353  temp_line_item_id NUMBER;
10:28:43 354  -- EXCEPTIONS
10:28:43 355  BAD_LINE_ITEM_ID EXCEPTION;
10:28:43 356  BEGIN
10:28:43 357  
10:28:43 358  	-- Check that line item exists
10:28:43 359  	BEGIN
10:28:43 360  	  SELECT
10:28:43 361  	    LINE_ITEM.ID into temp_line_item_id
10:28:43 362  	  FROM
10:28:43 363  	    LINE_ITEM
10:28:43 364  	  WHERE
10:28:43 365  	    LINE_ITEM.ID = in_line_item_id;
10:28:43 366  	  EXCEPTION
10:28:43 367  	    WHEN NO_DATA_FOUND THEN
10:28:43 368  	      RAISE BAD_LINE_ITEM_ID;
10:28:43 369  	END;
10:28:43 370  
10:28:43 371  	-- Get all discounts for given line item
10:28:43 372  	OPEN out_result_set FOR
10:28:43 373  	SELECT
10:28:43 374  	  DISCOUNT.FIXED_AMOUNT,
10:28:43 375  	  DISCOUNT.NAME,
10:28:43 376  	  DISCOUNT.ID,
10:28:43 377  	  DISCOUNT.PERCENT_AMOUNT
10:28:43 378  	FROM
10:28:43 379  	  DISCOUNT_LINE_ITEM
10:28:43 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
10:28:43 381  	WHERE
10:28:43 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
10:28:43 383  
10:28:43 384  EXCEPTION
10:28:43 385  WHEN BAD_LINE_ITEM_ID THEN
10:28:43 386  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 387  	  SPROC_NAME, 'No such line item');
10:28:43 388  WHEN OTHERS THEN
10:28:43 389  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 391  END GET_LINE_ITEM_DISCOUNTS;
10:28:43 392  /******************************************************************************/
10:28:43 393  
10:28:43 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
10:28:43 395  /*
10:28:43 396  Throws exceptions:
10:28:43 397  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 398  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 399  */
10:28:43 400  	in_line_item_id     IN	NUMBER,
10:28:43 401  	out_amount	    OUT NUMBER
10:28:43 402  ) AS
10:28:43 403  -- VARIABLES
10:28:43 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
10:28:43 405  -- EXCEPTIONS
10:28:43 406  BAD_LINE_ITEM_ID EXCEPTION;
10:28:43 407  BEGIN
10:28:43 408  
10:28:43 409  	BEGIN
10:28:43 410  	  SELECT
10:28:43 411  	    LINE_ITEM.AMOUNT into out_amount
10:28:43 412  	  FROM
10:28:43 413  	    LINE_ITEM
10:28:43 414  	  WHERE
10:28:43 415  	    LINE_ITEM.ID = in_line_item_id;
10:28:43 416  	  EXCEPTION
10:28:43 417  	    WHEN NO_DATA_FOUND THEN
10:28:43 418  	      RAISE BAD_LINE_ITEM_ID;
10:28:43 419  	END;
10:28:43 420  
10:28:43 421  EXCEPTION
10:28:43 422  WHEN BAD_LINE_ITEM_ID THEN
10:28:43 423  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 424  	  SPROC_NAME, 'No such line item');
10:28:43 425  WHEN OTHERS THEN
10:28:43 426  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 428  END CALCULATE_LINE_ITEM_AMOUNT;
10:28:43 429  
10:28:43 430  /******************************************************************************/
10:28:43 431  
10:28:43 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
10:28:43 433  /*
10:28:43 434  Throws exceptions:
10:28:43 435  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:43 436  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43 437  */
10:28:43 438  	in_line_item_id     IN	NUMBER
10:28:43 439  ) RETURN NUMBER AS
10:28:43 440  var_invoice_amount NUMBER(10, 2);
10:28:43 441  BEGIN
10:28:43 442  	PROCS_LINE_ITEMS_V24.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
10:28:43 443  	RETURN var_invoice_amount;
10:28:43 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
10:28:43 445  
10:28:43 446  END PROCS_LINE_ITEMS_V24;
10:28:43 447  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.07
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_locking.sql
Compiling body for procs_locking.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V24" AS
10:28:43   2  
10:28:43   3  /*
10:28:43   4  PROCEDURE INITIALIZE_SYSTEM AS
10:28:43   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
10:28:43   6  -- VARIABLES
10:28:43   7  var_account_ids SYS_REFCURSOR;
10:28:43   8  var_account_id  NUMBER;
10:28:43   9  BEGIN
10:28:43  10  
10:28:43  11  	OPEN var_account_ids FOR
10:28:43  12  	SELECT
10:28:43  13  	  ACCOUNT.ID
10:28:43  14  	FROM
10:28:43  15  	  ACCOUNT;
10:28:43  16  
10:28:43  17  	LOOP
10:28:43  18  	  FETCH var_account_ids into var_account_id;
10:28:43  19  	  EXIT WHEN var_account_ids%NOTFOUND;
10:28:43  20  	  BEGIN
10:28:43  21  	    INITIALIZE_ACCOUNT(var_account_id);
10:28:43  22  	    EXCEPTION
10:28:43  23  	      WHEN OTHERS THEN
10:28:43  24  		NULL;
10:28:43  25  	  END;
10:28:43  26  	END LOOP;
10:28:43  27  
10:28:43  28  END INITIALIZE_SYSTEM;
10:28:43  29  
10:28:43  30  PROCEDURE INITIALIZE_ACCOUNT (
10:28:43  31  	in_account_id IN NUMBER
10:28:43  32  ) AS
10:28:43  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
10:28:43  34  -- EXCEPTIONS
10:28:43  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
10:28:43  36  BEGIN
10:28:43  37  
10:28:43  38  	BEGIN
10:28:43  39  	  INSERT INTO ACCOUNT_LOCK(
10:28:43  40  	    ACCOUNT_ID,
10:28:43  41  	    LOCK_KEY,
10:28:43  42  	    END_DATE,
10:28:43  43  	    CREATED_BY,
10:28:43  44  	    REASON
10:28:43  45  	  ) VALUES (
10:28:43  46  	    in_account_id,
10:28:43  47  	    'initialization key',
10:28:43  48  	    SYSDATE,
10:28:43  49  	    'system',
10:28:43  50  	    'initialization'
10:28:43  51  	  );
10:28:43  52  	  EXCEPTION
10:28:43  53  	    WHEN DUP_VAL_ON_INDEX THEN
10:28:43  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
10:28:43  55  	END;
10:28:43  56  
10:28:43  57  EXCEPTION
10:28:43  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
10:28:43  59  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:43  60  	  SPROC_NAME, 'Account already initialized');
10:28:43  61  WHEN OTHERS THEN
10:28:43  62  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43  64  END;
10:28:43  65  
10:28:43  66  PROCEDURE INITIALIZE_GROUP (
10:28:43  67  	in_group_id IN NUMBER
10:28:43  68  ) AS
10:28:43  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
10:28:43  70  -- VARIABLES
10:28:43  71  var_account_id NUMBER;
10:28:43  72  -- EXCEPTIONS
10:28:43  73  BAD_GROUP_ID		EXCEPTION;
10:28:43  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
10:28:43  75  BEGIN
10:28:43  76  
10:28:43  77  	BEGIN
10:28:43  78  	  SELECT
10:28:43  79  	    ACCOUNT.ID into var_account_id
10:28:43  80  	  FROM
10:28:43  81  	    ACCOUNT
10:28:43  82  	  WHERE
10:28:43  83  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:43  84  	  EXCEPTION
10:28:43  85  	    WHEN NO_DATA_FOUND THEN
10:28:43  86  	     RAISE BAD_GROUP_ID;
10:28:43  87  	END;
10:28:43  88  
10:28:43  89  	BEGIN
10:28:43  90  	  INSERT INTO ACCOUNT_LOCK (
10:28:43  91  	    ACCOUNT_ID,
10:28:43  92  	    LOCK_KEY,
10:28:43  93  	    END_DATE,
10:28:43  94  	    CREATED_BY,
10:28:43  95  	    REASON
10:28:43  96  	  ) VALUES (
10:28:43  97  	    var_account_id,
10:28:43  98  	    'initialization key',
10:28:43  99  	    SYSDATE,
10:28:43 100  	    'system',
10:28:43 101  	    'initialization'
10:28:43 102  	  );
10:28:43 103  	  EXCEPTION
10:28:43 104  	    WHEN DUP_VAL_ON_INDEX THEN
10:28:43 105  	      RAISE GROUP_ALREADY_INITIALIZED;
10:28:43 106  	END;
10:28:43 107  
10:28:43 108  EXCEPTION
10:28:43 109  WHEN BAD_GROUP_ID THEN
10:28:43 110  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 111  	  SPROC_NAME, 'No such account with given group id');
10:28:43 112  WHEN GROUP_ALREADY_INITIALIZED THEN
10:28:43 113  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:43 114  	  SPROC_NAME, 'Group already initialized');
10:28:43 115  WHEN OTHERS THEN
10:28:43 116  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 118  END INITIALIZE_GROUP;
10:28:43 119  */
10:28:43 120  
10:28:43 121  PROCEDURE LOCK_ACCOUNT (
10:28:43 122  	in_group_id    IN NUMBER,
10:28:43 123  	in_lock_key    IN VARCHAR2,
10:28:43 124  	in_seconds_num IN NUMBER,
10:28:43 125  	in_created_by  IN VARCHAR2,
10:28:43 126  	in_reason      IN VARCHAR2
10:28:43 127  ) AS
10:28:43 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
10:28:43 129  -- CONSTANTS
10:28:43 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
10:28:43 131  -- VARIABLES
10:28:43 132  var_account_id NUMBER;
10:28:43 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:43 134  var_date		DATE := SYSDATE;
10:28:43 135  var_lock_end_date DATE;
10:28:43 136  -- EXCEPTIONS
10:28:43 137  BAD_GROUP_ID   EXCEPTION;
10:28:43 138  ALREADY_LOCKED EXCEPTION;
10:28:43 139  BEGIN
10:28:43 140  
10:28:43 141  	BEGIN
10:28:43 142  	  SELECT
10:28:43 143  	    ACCOUNT.ID into var_account_id
10:28:43 144  	  FROM
10:28:43 145  	    ACCOUNT
10:28:43 146  	  WHERE
10:28:43 147  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:43 148  	  EXCEPTION
10:28:43 149  	    WHEN NO_DATA_FOUND THEN
10:28:43 150  	      RAISE BAD_GROUP_ID;
10:28:43 151  	END;
10:28:43 152  
10:28:43 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
10:28:43 154  
10:28:43 155  	BEGIN
10:28:43 156  
10:28:43 157  	  INSERT INTO ACCOUNT_LOCK (
10:28:43 158  	    ACCOUNT_ID,
10:28:43 159  	    LOCK_KEY,
10:28:43 160  	    END_DATE,
10:28:43 161  	    CREATED_BY,
10:28:43 162  	    REASON
10:28:43 163  	  ) VALUES (
10:28:43 164  	    var_account_id,
10:28:43 165  	    in_lock_key,
10:28:43 166  	    var_lock_end_date,
10:28:43 167  	    in_created_by,
10:28:43 168  	    in_reason
10:28:43 169  	  );
10:28:43 170  
10:28:43 171  	  EXCEPTION
10:28:43 172  	    WHEN DUP_VAL_ON_INDEX THEN
10:28:43 173  	      -- This rows was created before... I will try to update it
10:28:43 174  	      BEGIN
10:28:43 175  
10:28:43 176  		UPDATE
10:28:43 177  		  ACCOUNT_LOCK
10:28:43 178  		SET
10:28:43 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
10:28:43 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
10:28:43 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
10:28:43 182  		  ACCOUNT_LOCK.REASON = in_reason
10:28:43 183  		WHERE
10:28:43 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
10:28:43 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
10:28:43 186  
10:28:43 187  		IF SQL%ROWCOUNT = 0 THEN
10:28:43 188  		  RAISE ALREADY_LOCKED;
10:28:43 189  		END IF;
10:28:43 190  
10:28:43 191  	      END;
10:28:43 192  	END;
10:28:43 193  
10:28:43 194  EXCEPTION
10:28:43 195  WHEN BAD_GROUP_ID THEN
10:28:43 196  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 197  	  SPROC_NAME, 'No such group id');
10:28:43 198  WHEN ALREADY_LOCKED THEN
10:28:43 199  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:43 200  	  SPROC_NAME, 'Account already locked');
10:28:43 201  WHEN OTHERS THEN
10:28:43 202  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 204  END LOCK_ACCOUNT;
10:28:43 205  
10:28:43 206  /******************************************************************************/
10:28:43 207  
10:28:43 208  PROCEDURE RELEASE_LOCK (
10:28:43 209  	in_group_id IN NUMBER,
10:28:43 210  	in_lock_key IN VARCHAR2
10:28:43 211  ) AS
10:28:43 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
10:28:43 213  -- VARIABLES
10:28:43 214  var_account_id NUMBER;
10:28:43 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:28:43 216  var_date DATE := SYSDATE;
10:28:43 217  -- EXCEPTIONS
10:28:43 218  BAD_GROUP_ID		EXCEPTION;
10:28:43 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
10:28:43 220  BEGIN
10:28:43 221  
10:28:43 222  	BEGIN
10:28:43 223  	  SELECT
10:28:43 224  	    ACCOUNT.ID into var_account_id
10:28:43 225  	  FROM
10:28:43 226  	    ACCOUNT
10:28:43 227  	  WHERE
10:28:43 228  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:43 229  	  EXCEPTION
10:28:43 230  	    WHEN NO_DATA_FOUND THEN
10:28:43 231  	      RAISE BAD_GROUP_ID;
10:28:43 232  	END;
10:28:43 233  
10:28:43 234  	UPDATE
10:28:43 235  	  ACCOUNT_LOCK
10:28:43 236  	SET
10:28:43 237  	  ACCOUNT_LOCK.END_DATE = var_date
10:28:43 238  	WHERE
10:28:43 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
10:28:43 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
10:28:43 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
10:28:43 242  
10:28:43 243  	IF SQL%ROWCOUNT = 0 THEN
10:28:43 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
10:28:43 245  	END IF;
10:28:43 246  
10:28:43 247  EXCEPTION
10:28:43 248  WHEN BAD_GROUP_ID THEN
10:28:43 249  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 250  	  SPROC_NAME, 'No such group id');
10:28:43 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
10:28:43 252  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:43 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
10:28:43 254  WHEN OTHERS THEN
10:28:43 255  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 256  	  SPROC_NAME, 'Unknown error');
10:28:43 257  END RELEASE_LOCK;
10:28:43 258  
10:28:43 259  END PROCS_LOCKING_V24;
10:28:43 260  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.07
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_offer_chain.sql
Compiling body for procs_offer_chain.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V24" AS
10:28:43   2  
10:28:43   3  PROCEDURE IS_GC_OFFER_CHAIN(
10:28:43   4  	in_offer_chain_id IN OFFER_CHAIN.ID%TYPE,
10:28:43   5  	out_data OUT NUMBER
10:28:43   6  ) AS
10:28:43   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_GC_OFFER_CHAIN';
10:28:43   8  var_purchase_oc NUMBER := 0;
10:28:43   9  var_redeem_oc   NUMBER := 0;
10:28:43  10  BEGIN
10:28:43  11  	SELECT
10:28:43  12  	  COUNT(1) INTO var_purchase_oc
10:28:43  13  	FROM
10:28:43  14  	  Offer_Chain
10:28:43  15  	WHERE
10:28:43  16  	  Offer_Chain.Id		      = in_offer_chain_id
10:28:43  17  	  AND Offer_Chain.Is_Gift_Certificate = GLOBAL_CONSTANTS_V24.TRUE;
10:28:43  18  
10:28:43  19  	SELECT
10:28:43  20  	  COUNT(1) INTO var_redeem_oc
10:28:43  21  	FROM
10:28:43  22  	  Offer_Chain_Meta_Data
10:28:43  23  	WHERE
10:28:43  24  	  Offer_Chain_Meta_Data.Name = 'redemption offer chain id'
10:28:43  25  	  AND REGEXP_LIKE(Offer_Chain_Meta_Data.Value,'(^|\s|,)' || TO_CHAR(in_offer_chain_id) || '(,|\s|$)');
10:28:43  26  
10:28:43  27  	out_data := var_purchase_oc + var_redeem_oc;
10:28:43  28  END;
10:28:43  29  
10:28:43  30  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
10:28:43  31  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
10:28:43  32  	out_data	     OUT OFFER_CHAIN.ID%TYPE
10:28:43  33  ) AS
10:28:43  34  	SPROC_NAME CONSTANT VARCHAR2(32) := 'OC_ID_BY_ITUNES_PRODUCT_ID';
10:28:43  35  BEGIN
10:28:43  36  	SELECT
10:28:43  37  	  ID INTO out_data
10:28:43  38  	FROM
10:28:43  39  	  OFFER_CHAIN
10:28:43  40  	WHERE
10:28:43  41  	  ITUNES_PRODUCT_ID = in_itunes_product_id;
10:28:43  42  EXCEPTION
10:28:43  43  	WHEN NO_DATA_FOUND THEN NULL;
10:28:43  44  END OC_ID_BY_ITUNES_PRODUCT_ID;
10:28:43  45  
10:28:43  46  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
10:28:43  47  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
10:28:43  48  	out_data	       OUT OFFER_CHAIN.ID%TYPE
10:28:43  49  ) AS
10:28:43  50  SPROC_NAME CONSTANT VARCHAR2(32) := 'OFFER_CHAIN_ID_BY_AMAZON_SKU';
10:28:43  51  BEGIN
10:28:43  52  	SELECT
10:28:43  53  	  ID INTO out_data
10:28:43  54  	FROM
10:28:43  55  	  OFFER_CHAIN
10:28:43  56  	WHERE
10:28:43  57  	  AMAZON_APPSTORE_SKU = in_amazon_appstore_sku;
10:28:43  58  EXCEPTION
10:28:43  59  	WHEN NO_DATA_FOUND THEN NULL;
10:28:43  60  END OFFER_CHAIN_ID_BY_AMAZON_SKU;
10:28:43  61  
10:28:43  62  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:28:43  63  	in_offer_chain_id IN   NUMBER,
10:28:43  64  	out_result_set	  OUT  SYS_REFCURSOR
10:28:43  65  ) AS
10:28:43  66  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OFFER_CHAIN_BY_ID';
10:28:43  67  BEGIN
10:28:43  68  
10:28:43  69  	-- Get offer chain informations
10:28:43  70  	OPEN out_result_set FOR
10:28:43  71  	  SELECT
10:28:43  72  	    OC.ID,
10:28:43  73  	    OC.NAME,
10:28:43  74  	    OC.ADOPTABILITY_WINDOW_START_DATE,
10:28:43  75  	    OC.ADOPTABILITY_WINDOW_END_DATE,
10:28:43  76  	    OC.DESCRIPTION,
10:28:43  77  	    OC.IS_GIFT_CERTIFICATE,
10:28:43  78  	    OC.OFFER_CHAIN_STATUS_ID,
10:28:43  79  	    OC.PRODUCT_URI,
10:28:43  80  	    OC.BILLING_SOURCE_ID,
10:28:43  81  	    OC.VENDOR_SOURCE_ID,
10:28:43  82  	    OC.GROUP_ACCOUNT_TYPE_ID,
10:28:43  83  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED,
10:28:43  84  	    OC.AMAZON_APPSTORE_SKU,
10:28:43  85  	    OC.ITUNES_PRODUCT_ID
10:28:43  86  	  FROM
10:28:43  87  	    OFFER_CHAIN OC
10:28:43  88  	  WHERE
10:28:43  89  	    OC.ID = in_offer_chain_id
10:28:43  90  	    AND ROWNUM <= 1;
10:28:43  91  
10:28:43  92  EXCEPTION
10:28:43  93  WHEN OTHERS THEN
10:28:43  94  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43  95  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43  96  END GET_OFFER_CHAIN_BY_ID;
10:28:43  97  
10:28:43  98  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
10:28:43  99  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:28:43 100  	out_result_set	   OUT SYS_REFCURSOR
10:28:43 101  ) AS
10:28:43 102  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
10:28:43 103  -- EXCEPTIONS
10:28:43 104  BAD_OFFER_CHAINS_IDS EXCEPTION;
10:28:43 105  BEGIN
10:28:43 106  
10:28:43 107  	IF (in_offer_chain_ids IS NULL) THEN
10:28:43 108  	  RAISE BAD_OFFER_CHAINS_IDS;
10:28:43 109  	END IF;
10:28:43 110  
10:28:43 111  	OPEN out_result_set FOR
10:28:43 112  	SELECT
10:28:43 113  	  OCH.ID,
10:28:43 114  	  OCH.NAME,
10:28:43 115  	  OCH.DESCRIPTION,
10:28:43 116  	  OCH.OFFER_CHAIN_STATUS_ID,
10:28:43 117  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
10:28:43 118  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
10:28:43 119  	  OCH.IS_GIFT_CERTIFICATE,
10:28:43 120  	  PROCS_OFFER_CHAIN_V24.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
10:28:43 121  	  PROCS_OFFER_CHAIN_V24.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
10:28:43 122  	  OCH.VENDOR_SOURCE_ID,
10:28:43 123  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
10:28:43 124  	FROM
10:28:43 125  	  OFFER_CHAIN OCH
10:28:43 126  	WHERE
10:28:43 127  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
10:28:43 128  
10:28:43 129  EXCEPTION
10:28:43 130  WHEN BAD_OFFER_CHAINS_IDS THEN
10:28:43 131  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:43 132  	  SPROC_NAME, 'Invalid offer chains ids');
10:28:43 133  WHEN OTHERS THEN
10:28:43 134  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 135  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 136  END GET_OFFER_CHAINS_BY_IDS;
10:28:43 137  
10:28:43 138  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
10:28:43 139  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:28:43 140  	out_result_set	   OUT SYS_REFCURSOR
10:28:43 141  ) AS
10:28:43 142  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
10:28:43 143  -- EXCEPTIONS
10:28:43 144  BAD_OFFER_CHAINS_IDS EXCEPTION;
10:28:43 145  BEGIN
10:28:43 146  
10:28:43 147  	IF (in_offer_chain_ids IS NULL) THEN
10:28:43 148  	  RAISE BAD_OFFER_CHAINS_IDS;
10:28:43 149  	END IF;
10:28:43 150  
10:28:43 151  	OPEN out_result_set FOR
10:28:43 152  	SELECT
10:28:43 153  	  OOCH.OFFER_CHAIN_ID,
10:28:43 154  	  PO.PRODUCT_ID
10:28:43 155  	FROM
10:28:43 156  	  PRODUCT_OFFERING PO
10:28:43 157  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
10:28:43 158  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
10:28:43 159  	WHERE
10:28:43 160  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
10:28:43 161  
10:28:43 162  EXCEPTION
10:28:43 163  WHEN BAD_OFFER_CHAINS_IDS THEN
10:28:43 164  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:43 165  	  SPROC_NAME, 'Invalid offer chains ids');
10:28:43 166  WHEN OTHERS THEN
10:28:43 167  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 168  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 169  END GET_OFFER_CHAINS_PRODUCTS;
10:28:43 170  
10:28:43 171  PROCEDURE GET_OFFER_CHAINS_OFFERS (
10:28:43 172  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:28:43 173  	out_result_set	   OUT SYS_REFCURSOR
10:28:43 174  ) AS
10:28:43 175  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
10:28:43 176  -- EXCEPTIONS
10:28:43 177  BAD_OFFER_CHAINS_IDS EXCEPTION;
10:28:43 178  BEGIN
10:28:43 179  
10:28:43 180  	IF (in_offer_chain_ids IS NULL) THEN
10:28:43 181  	  RAISE BAD_OFFER_CHAINS_IDS;
10:28:43 182  	END IF;
10:28:43 183  
10:28:43 184  	OPEN out_result_set FOR
10:28:43 185  	SELECT
10:28:43 186  	  OOCH.OFFER_CHAIN_ID,
10:28:43 187  	  OOCH.OFFER_ID,
10:28:43 188  	  OOCH.INDEX_VALUE,
10:28:43 189  	  OOCH.NUM_RECURRENCES,
10:28:43 190  	  O.ENTITLEMENT_DURATION,
10:28:43 191  	  PROCS_OFFER_CHAIN_V24.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
10:28:43 192  	FROM
10:28:43 193  	  OFFER O
10:28:43 194  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
10:28:43 195  	WHERE
10:28:43 196  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
10:28:43 197  
10:28:43 198  EXCEPTION
10:28:43 199  WHEN BAD_OFFER_CHAINS_IDS THEN
10:28:43 200  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:43 201  	  SPROC_NAME, 'Invalid offer chains ids');
10:28:43 202  WHEN OTHERS THEN
10:28:43 203  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 204  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 205  END GET_OFFER_CHAINS_OFFERS;
10:28:43 206  
10:28:43 207  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
10:28:43 208  	in_product_id  IN  NUMBER,
10:28:43 209  	out_result_set OUT SYS_REFCURSOR
10:28:43 210  )AS
10:28:43 211  -- VARIBLES
10:28:43 212  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
10:28:43 213  temp_product_id NUMBER;
10:28:43 214  
10:28:43 215  -- EXCEPTIONS
10:28:43 216  BAD_PRODUCT_ID EXCEPTION;
10:28:43 217  BEGIN
10:28:43 218  
10:28:43 219  	-- Check that given product exists
10:28:43 220  	BEGIN
10:28:43 221  	  SELECT
10:28:43 222  	    PRODUCT.ID into temp_product_id
10:28:43 223  	  FROM
10:28:43 224  	    PRODUCT
10:28:43 225  	  WHERE
10:28:43 226  	    PRODUCT.ID = in_product_id;
10:28:43 227  	  EXCEPTION
10:28:43 228  	    WHEN NO_DATA_FOUND THEN
10:28:43 229  	      RAISE BAD_PRODUCT_ID;
10:28:43 230  	END;
10:28:43 231  
10:28:43 232  	-- Select all offer chains that contains given product
10:28:43 233  	OPEN out_result_set FOR
10:28:43 234  	SELECT
10:28:43 235  	  OFFER_CHAIN.ID,
10:28:43 236  	  OFFER_CHAIN.NAME,
10:28:43 237  	  OFFER_CHAIN.DESCRIPTION,
10:28:43 238  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
10:28:43 239  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
10:28:43 240  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
10:28:43 241  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
10:28:43 242  	FROM
10:28:43 243  	  OFFER_CHAIN
10:28:43 244  	WHERE
10:28:43 245  	  OFFER_CHAIN.ID IN (
10:28:43 246  	    SELECT DISTINCT
10:28:43 247  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
10:28:43 248  	    FROM
10:28:43 249  	      OFFER_OFFER_CHAIN
10:28:43 250  	    WHERE
10:28:43 251  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
10:28:43 252  		SELECT DISTINCT
10:28:43 253  		  OFFER_PRODUCT_OFFERING.OFFER_ID
10:28:43 254  		FROM
10:28:43 255  		  OFFER_PRODUCT_OFFERING
10:28:43 256  		WHERE
10:28:43 257  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
10:28:43 258  	      )
10:28:43 259  	  );
10:28:43 260  
10:28:43 261  EXCEPTION
10:28:43 262  WHEN BAD_PRODUCT_ID THEN
10:28:43 263  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 264  	  SPROC_NAME, 'No such product');
10:28:43 265  WHEN OTHERS THEN
10:28:43 266  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 267  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 268  END GET_OFFER_CHAINS_BY_PRODUCT;
10:28:43 269  
10:28:43 270  PROCEDURE GET_OFFER_CHAIN_PRICE (
10:28:43 271  	in_offer_chain_id IN NUMBER,
10:28:43 272  	out_price	  OUT NUMBER
10:28:43 273  ) AS
10:28:43 274  -- VARIABLES
10:28:43 275  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
10:28:43 276  temp_offer_chain_id NUMBER;
10:28:43 277  
10:28:43 278  -- EXCEPTION
10:28:43 279  BAD_OFFER_CHAIN_ID       EXCEPTION;
10:28:43 280  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
10:28:43 281  EXCEPTION_MESSAGE        VARCHAR2(1024);
10:28:43 282  BEGIN
10:28:43 283  
10:28:43 284  	-- Check that given offer chain exists
10:28:43 285  	BEGIN
10:28:43 286  	  SELECT
10:28:43 287  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 288  	  FROM
10:28:43 289  	    OFFER_CHAIN
10:28:43 290  	  WHERE
10:28:43 291  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:28:43 292  
10:28:43 293  	  EXCEPTION
10:28:43 294  	  WHEN NO_DATA_FOUND THEN
10:28:43 295  	    RAISE BAD_OFFER_CHAIN_ID;
10:28:43 296  	END;
10:28:43 297  
10:28:43 298  	BEGIN
10:28:43 299  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
10:28:43 300  	  EXCEPTION
10:28:43 301  	    WHEN OTHERS THEN
10:28:43 302  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 303  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
10:28:43 304  	END;
10:28:43 305  
10:28:43 306  EXCEPTION
10:28:43 307  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:43 308  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 309  	  SPROC_NAME, 'Bad offer chain id');
10:28:43 310  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
10:28:43 311  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 312  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
10:28:43 313  WHEN OTHERS THEN
10:28:43 314  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 315  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 316  END GET_OFFER_CHAIN_PRICE;
10:28:43 317  
10:28:43 318  PROCEDURE GET_FIRST_OFFER(
10:28:43 319  	in_offer_chain_id IN  NUMBER,
10:28:43 320  	out_offer_id	  OUT NUMBER
10:28:43 321  ) AS
10:28:43 322  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
10:28:43 323  BEGIN
10:28:43 324  	-- Seect first offer in offer chain
10:28:43 325  	SELECT
10:28:43 326  	  OFFER_ID into out_offer_id
10:28:43 327  	FROM (
10:28:43 328  	  SELECT
10:28:43 329  	    OFFER_OFFER_CHAIN.OFFER_ID
10:28:43 330  	  FROM
10:28:43 331  	    OFFER_OFFER_CHAIN
10:28:43 332  	  WHERE
10:28:43 333  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 334  	  ORDER BY
10:28:43 335  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
10:28:43 336  	)
10:28:43 337  	WHERE
10:28:43 338  	  ROWNUM <= 1;
10:28:43 339  
10:28:43 340  EXCEPTION
10:28:43 341  WHEN NO_DATA_FOUND THEN
10:28:43 342  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 343  	  SPROC_NAME, 'No such offer chain');
10:28:43 344  WHEN OTHERS THEN
10:28:43 345  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 346  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 347  END GET_FIRST_OFFER;
10:28:43 348  
10:28:43 349  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
10:28:43 350  	out_result_set OUT SYS_REFCURSOR
10:28:43 351  ) AS
10:28:43 352  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
10:28:43 353  BEGIN
10:28:43 354  	OPEN out_result_set FOR
10:28:43 355  	SELECT
10:28:43 356  	  OFFER_CHAIN.ID,
10:28:43 357  	  OFFER_CHAIN.NAME,
10:28:43 358  	  OFFER_CHAIN.DESCRIPTION,
10:28:43 359  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
10:28:43 360  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
10:28:43 361  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
10:28:43 362  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
10:28:43 363  	  PROCS_OFFER_CHAIN_V24.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
10:28:43 364  	  PRODUCT_OFFERING.PRODUCT_ID
10:28:43 365  	FROM
10:28:43 366  	  OFFER_CHAIN,
10:28:43 367  	  OFFER_OFFER_CHAIN,
10:28:43 368  	  OFFER_PRODUCT_OFFERING,
10:28:43 369  	  PRODUCT_OFFERING
10:28:43 370  	WHERE
10:28:43 371  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
10:28:43 372  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
10:28:43 373  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:28:43 374  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V24.OFFER_CHAIN_ACTIVE;
10:28:43 375  
10:28:43 376  EXCEPTION
10:28:43 377  WHEN OTHERS THEN
10:28:43 378  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 379  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 380  END GET_ACTIVE_OFFER_CHAINS;
10:28:43 381  
10:28:43 382  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
10:28:43 383  	in_offer_chain_id IN NUMBER,
10:28:43 384  	out_result_set	  OUT SYS_REFCURSOR
10:28:43 385  ) AS
10:28:43 386  -- VARIABLES
10:28:43 387  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
10:28:43 388  temp_offer_chain_id NUMBER;
10:28:43 389  
10:28:43 390  -- EXCEPTIONS
10:28:43 391  BAD_OFFER_CHAIN EXCEPTION;
10:28:43 392  BEGIN
10:28:43 393  
10:28:43 394  	-- Check that offer chain exists
10:28:43 395  	BEGIN
10:28:43 396  	  SELECT
10:28:43 397  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 398  	  FROM
10:28:43 399  	    OFFER_CHAIN
10:28:43 400  	  WHERE
10:28:43 401  	    OFFER_CHAIN.ID = in_offer_chain_id
10:28:43 402  	    AND ROWNUM <= 1;
10:28:43 403  
10:28:43 404  	  EXCEPTION
10:28:43 405  	    WHEN OTHERS THEN
10:28:43 406  	      RAISE BAD_OFFER_CHAIN;
10:28:43 407  	END;
10:28:43 408  
10:28:43 409  	-- Select all products for given offer chain
10:28:43 410  	OPEN out_result_set FOR
10:28:43 411  	SELECT DISTINCT
10:28:43 412  	  PRODUCT_OFFERING.PRODUCT_ID
10:28:43 413  	FROM
10:28:43 414  	  PRODUCT_OFFERING
10:28:43 415  	WHERE
10:28:43 416  	  PRODUCT_OFFERING.ID IN (
10:28:43 417  	    SELECT DISTINCT
10:28:43 418  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:28:43 419  	    FROM
10:28:43 420  	      OFFER_PRODUCT_OFFERING
10:28:43 421  	    WHERE
10:28:43 422  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:28:43 423  		SELECT
10:28:43 424  		  OFFER_OFFER_CHAIN.OFFER_ID
10:28:43 425  		FROM
10:28:43 426  		  OFFER_OFFER_CHAIN
10:28:43 427  		WHERE
10:28:43 428  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 429  	      )
10:28:43 430  	  );
10:28:43 431  
10:28:43 432  EXCEPTION
10:28:43 433  WHEN BAD_OFFER_CHAIN THEN
10:28:43 434  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 435  	  SPROC_NAME, 'No such offer chain');
10:28:43 436  WHEN OTHERS THEN
10:28:43 437  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 438  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 439  END GET_OFFER_CHAIN_PRODUCTS;
10:28:43 440  
10:28:43 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
10:28:43 442  	in_offer_chain_id	  IN NUMBER,
10:28:43 443  	in_offer_chain_start_date IN DATE
10:28:43 444  ) RETURN DATE AS
10:28:43 445  -- VARIABLES
10:28:43 446  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
10:28:43 447  temp_offer_chain_id    NUMBER;
10:28:43 448  var_offer_chain_length NUMBER;
10:28:43 449  var_offer_duration     VARCHAR2(30);
10:28:43 450  var_offer_recurrences  NUMBER;
10:28:43 451  var_end_date	     DATE;
10:28:43 452  
10:28:43 453  var_offer_ym_interval INTERVAL YEAR TO MONTH;
10:28:43 454  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
10:28:43 455  var_offer_years	    NUMBER;
10:28:43 456  var_offer_months	    NUMBER;
10:28:43 457  var_offer_days	    NUMBER;
10:28:43 458  var_infinity_offers_count NUMBER;
10:28:43 459  
10:28:43 460  var_offers_set SYS_REFCURSOR;
10:28:43 461  
10:28:43 462  -- EXCEPTIONS
10:28:43 463  BAD_OFFER_CHAIN_ID EXCEPTION;
10:28:43 464  BEGIN
10:28:43 465  
10:28:43 466  	var_end_date := in_offer_chain_start_date;
10:28:43 467  
10:28:43 468  	-- Check that offer chain exists
10:28:43 469  	BEGIN
10:28:43 470  	  SELECT
10:28:43 471  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 472  	  FROM
10:28:43 473  	    OFFER_CHAIN
10:28:43 474  	  WHERE
10:28:43 475  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:28:43 476  	  EXCEPTION
10:28:43 477  	    WHEN NO_DATA_FOUND
10:28:43 478  	      THEN RAISE BAD_OFFER_CHAIN_ID;
10:28:43 479  	END;
10:28:43 480  
10:28:43 481  	SELECT
10:28:43 482  	  COUNT(*) into var_infinity_offers_count
10:28:43 483  	FROM
10:28:43 484  	  OFFER_OFFER_CHAIN
10:28:43 485  	WHERE
10:28:43 486  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 487  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V24.OFFER_REC_INFINITY;
10:28:43 488  
10:28:43 489  	IF var_infinity_offers_count > 0 THEN
10:28:43 490  	  -- Offer chain contains offers with infinity num of recurrences
10:28:43 491  	  RETURN NULL;
10:28:43 492  	END IF;
10:28:43 493  
10:28:43 494  	-- Select offers durations
10:28:43 495  	OPEN var_offers_set FOR
10:28:43 496  	SELECT
10:28:43 497  	  OFFER.ENTITLEMENT_DURATION,
10:28:43 498  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
10:28:43 499  	FROM
10:28:43 500  	  OFFER_OFFER_CHAIN
10:28:43 501  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:28:43 502  	WHERE
10:28:43 503  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
10:28:43 504  
10:28:43 505  	-- Calculate sum of offers durations
10:28:43 506  	LOOP
10:28:43 507  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
10:28:43 508  	  EXIT WHEN var_offers_set%NOTFOUND;
10:28:43 509  	  PROCS_COMMON_V24.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
10:28:43 510  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
10:28:43 511  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
10:28:43 512  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
10:28:43 513  	END LOOP;
10:28:43 514  
10:28:43 515  	RETURN var_end_date;
10:28:43 516  
10:28:43 517  EXCEPTION
10:28:43 518  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:43 519  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 520  	  SPROC_NAME, 'No such offer chain');
10:28:43 521  WHEN OTHERS THEN
10:28:43 522  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 523  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 524  END CALCULATE_OFFER_CHAIN_END_DATE;
10:28:43 525  
10:28:43 526  FUNCTION CALCULATE_OFFER_AMOUNT (
10:28:43 527  	in_offer_id IN NUMBER
10:28:43 528  ) RETURN NUMBER AS
10:28:43 529  -- VARIABLES
10:28:43 530  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
10:28:43 531  temp_offer_id NUMBER;
10:28:43 532  
10:28:43 533  var_product_offering_set	    SYS_REFCURSOR;
10:28:43 534  var_product_offering_id	    NUMBER;
10:28:43 535  var_product_offering_price    NUMBER(10,6);
10:28:43 536  var_product_offering_t_amount NUMBER(10,6);
10:28:43 537  var_product_offering_quantity NUMBER;
10:28:43 538  
10:28:43 539  var_total_amount NUMBER(10,6);
10:28:43 540  var_final_amount NUMBER(10,2);
10:28:43 541  
10:28:43 542  var_percent_discount NUMBER(10,2);
10:28:43 543  var_fixed_discount NUMBER(10,6);
10:28:43 544  
10:28:43 545  -- EXCEPTIONS
10:28:43 546  BAD_OFFER_ID EXCEPTION;
10:28:43 547  BEGIN
10:28:43 548  
10:28:43 549  	BEGIN
10:28:43 550  	  SELECT
10:28:43 551  	    OFFER.ID into temp_offer_id
10:28:43 552  	  FROM
10:28:43 553  	    OFFER
10:28:43 554  	  WHERE
10:28:43 555  	    OFFER.ID = in_offer_id;
10:28:43 556  	  EXCEPTION
10:28:43 557  	    WHEN NO_DATA_FOUND THEN
10:28:43 558  	      RAISE BAD_OFFER_ID;
10:28:43 559  	END;
10:28:43 560  
10:28:43 561  	OPEN var_product_offering_set FOR
10:28:43 562  	SELECT
10:28:43 563  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
10:28:43 564  	  PRODUCT_OFFERING.UNIT_PRICE,
10:28:43 565  	  PRODUCT_OFFERING.QUANTITY
10:28:43 566  	FROM
10:28:43 567  	  OFFER_PRODUCT_OFFERING
10:28:43 568  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:28:43 569  	WHERE
10:28:43 570  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
10:28:43 571  
10:28:43 572  	var_total_amount := 0;
10:28:43 573  
10:28:43 574  	LOOP
10:28:43 575  	  FETCH var_product_offering_set into
10:28:43 576  	    var_product_offering_id,
10:28:43 577  	    var_product_offering_price,
10:28:43 578  	    var_product_offering_quantity;
10:28:43 579  	  EXIT WHEN var_product_offering_set%NOTFOUND;
10:28:43 580  
10:28:43 581  	  SELECT
10:28:43 582  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
10:28:43 583  	  FROM
10:28:43 584  	    DISCOUNT_PRODUCT_OFFERING
10:28:43 585  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:28:43 586  	  WHERE
10:28:43 587  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:28:43 588  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
10:28:43 589  
10:28:43 590  	  SELECT
10:28:43 591  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
10:28:43 592  	  FROM
10:28:43 593  	    DISCOUNT_PRODUCT_OFFERING
10:28:43 594  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:28:43 595  	  WHERE
10:28:43 596  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:28:43 597  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
10:28:43 598  
10:28:43 599  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
10:28:43 600  
10:28:43 601  	  IF var_percent_discount IS NOT NULL THEN
10:28:43 602  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
10:28:43 603  	  END IF;
10:28:43 604  
10:28:43 605  	  IF var_fixed_discount IS NOT NULL THEN
10:28:43 606  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
10:28:43 607  	  END IF;
10:28:43 608  
10:28:43 609  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
10:28:43 610  	END LOOP;
10:28:43 611  	var_final_amount := var_total_amount;
10:28:43 612  	RETURN var_final_amount;
10:28:43 613  
10:28:43 614  EXCEPTION
10:28:43 615  WHEN BAD_OFFER_ID THEN
10:28:43 616  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 617  	  SPROC_NAME, 'No such offer');
10:28:43 618  WHEN OTHERS THEN
10:28:43 619  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 620  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 621  END CALCULATE_OFFER_AMOUNT;
10:28:43 622  
10:28:43 623  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
10:28:43 624  	in_offer_chain_id IN NUMBER
10:28:43 625  ) RETURN NUMBER AS
10:28:43 626  -- VARIABLES
10:28:43 627  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
10:28:43 628  temp_offer_chain_id    NUMBER;
10:28:43 629  var_first_offer_id     NUMBER;
10:28:43 630  -- EXCEPTIONS
10:28:43 631  BAD_OFFER_CHAIN_ID      EXCEPTION;
10:28:43 632  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
10:28:43 633  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:28:43 634  BEGIN
10:28:43 635  
10:28:43 636  	BEGIN
10:28:43 637  	  SELECT
10:28:43 638  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 639  	  FROM
10:28:43 640  	    OFFER_CHAIN
10:28:43 641  	  WHERE
10:28:43 642  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:28:43 643  	  EXCEPTION
10:28:43 644  	    WHEN NO_DATA_FOUND THEN
10:28:43 645  	      RAISE BAD_OFFER_CHAIN_ID;
10:28:43 646  	END;
10:28:43 647  
10:28:43 648  	BEGIN
10:28:43 649  	  PROCS_OFFER_CHAIN_V24.GET_FIRST_OFFER(
10:28:43 650  	    in_offer_chain_id => in_offer_chain_id,
10:28:43 651  	    out_offer_id      => var_first_offer_id
10:28:43 652  	  );
10:28:43 653  	  EXCEPTION
10:28:43 654  	    WHEN OTHERS THEN
10:28:43 655  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 656  	      RAISE CAN_NOT_GET_FIRST_OFFER;
10:28:43 657  	END;
10:28:43 658  
10:28:43 659  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
10:28:43 660  
10:28:43 661  EXCEPTION
10:28:43 662  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:43 663  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 664  	  SPROC_NAME, 'No such offer chain');
10:28:43 665  WHEN CAN_NOT_GET_FIRST_OFFER THEN
10:28:43 666  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 667  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
10:28:43 668  WHEN OTHERS THEN
10:28:43 669  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 670  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 671  END CALCULATE_OFFER_CHAIN_AMOUNT;
10:28:43 672  
10:28:43 673  FUNCTION GET_FIRST_OFFER_INDEX (
10:28:43 674  	in_offer_chain_id IN NUMBER
10:28:43 675  ) RETURN NUMBER AS
10:28:43 676  -- VARIABLES
10:28:43 677  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
10:28:43 678  var_first_offer_index NUMBER;
10:28:43 679  BEGIN
10:28:43 680  
10:28:43 681  	SELECT
10:28:43 682  	  INDEX_VALUE into var_first_offer_index
10:28:43 683  	FROM (
10:28:43 684  	  SELECT
10:28:43 685  	    OFFER_OFFER_CHAIN.INDEX_VALUE
10:28:43 686  	  FROM
10:28:43 687  	    OFFER_OFFER_CHAIN
10:28:43 688  	  WHERE
10:28:43 689  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 690  	  ORDER BY
10:28:43 691  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
10:28:43 692  	)
10:28:43 693  	WHERE
10:28:43 694  	  ROWNUM <= 1;
10:28:43 695  
10:28:43 696  	RETURN var_first_offer_index;
10:28:43 697  
10:28:43 698  EXCEPTION
10:28:43 699  WHEN NO_DATA_FOUND THEN
10:28:43 700  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 701  	  SPROC_NAME, 'No such offer chain');
10:28:43 702  WHEN OTHERS THEN
10:28:43 703  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 704  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 705  END GET_FIRST_OFFER_INDEX;
10:28:43 706  
10:28:43 707  FUNCTION GET_NEXT_OFFER_INDEX (
10:28:43 708  	in_offer_chain_id	     IN NUMBER,
10:28:43 709  	in_offer_chain_current_index IN NUMBER
10:28:43 710  ) RETURN NUMBER AS
10:28:43 711  -- VARIABLES
10:28:43 712  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
10:28:43 713  temp_offer_chain_id	     NUMBER;
10:28:43 714  temp_offer_chain_current_index NUMBER;
10:28:43 715  var_result		     NUMBER;
10:28:43 716  -- EXCEPTIONS
10:28:43 717  BAD_OFFER_CHAIN_ID      EXCEPTION;
10:28:43 718  BAD_CURRENT_INDEX_VALUE EXCEPTION;
10:28:43 719  BEGIN
10:28:43 720  
10:28:43 721  	-- Check that offer chain exists
10:28:43 722  	BEGIN
10:28:43 723  	  SELECT
10:28:43 724  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 725  	  FROM
10:28:43 726  	    OFFER_CHAIN
10:28:43 727  	  WHERE
10:28:43 728  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:28:43 729  	  EXCEPTION
10:28:43 730  	    WHEN NO_DATA_FOUND THEN
10:28:43 731  	      RAISE BAD_OFFER_CHAIN_ID;
10:28:43 732  	END;
10:28:43 733  
10:28:43 734  	-- Check that current offer index exists
10:28:43 735  	BEGIN
10:28:43 736  	  SELECT
10:28:43 737  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
10:28:43 738  	  FROM
10:28:43 739  	    OFFER_OFFER_CHAIN
10:28:43 740  	  WHERE
10:28:43 741  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 742  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
10:28:43 743  	    -- TODO: delete next line
10:28:43 744  	    AND ROWNUM <= 1;
10:28:43 745  	  EXCEPTION
10:28:43 746  	    WHEN NO_DATA_FOUND THEN
10:28:43 747  	      RAISE BAD_CURRENT_INDEX_VALUE;
10:28:43 748  	END;
10:28:43 749  
10:28:43 750  	-- Get next offer index
10:28:43 751  	BEGIN
10:28:43 752  	  SELECT
10:28:43 753  	    INDEX_VALUE into var_result
10:28:43 754  	  FROM (
10:28:43 755  	    SELECT
10:28:43 756  	      OFFER_OFFER_CHAIN.INDEX_VALUE
10:28:43 757  	    FROM
10:28:43 758  	      OFFER_OFFER_CHAIN
10:28:43 759  	    WHERE
10:28:43 760  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 761  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
10:28:43 762  	    ORDER BY
10:28:43 763  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
10:28:43 764  	  )
10:28:43 765  	  WHERE
10:28:43 766  	    ROWNUM <= 1;
10:28:43 767  	  EXCEPTION
10:28:43 768  	    WHEN NO_DATA_FOUND THEN
10:28:43 769  	      var_result := NULL;
10:28:43 770  	END;
10:28:43 771  
10:28:43 772  	RETURN var_result;
10:28:43 773  
10:28:43 774  EXCEPTION
10:28:43 775  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:43 776  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 777  	  SPROC_NAME, 'No such offer chain');
10:28:43 778  WHEN BAD_CURRENT_INDEX_VALUE THEN
10:28:43 779  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 780  	  SPROC_NAME, 'Bad current index value');
10:28:43 781  WHEN OTHERS THEN
10:28:43 782  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 784  END GET_NEXT_OFFER_INDEX;
10:28:43 785  
10:28:43 786  PROCEDURE P_GET_NEXT_OFFER_INDEX (
10:28:43 787  	in_offer_chain_id	     IN NUMBER,
10:28:43 788  	in_offer_chain_current_index IN NUMBER,
10:28:43 789  	out_next_offer_index	     OUT NUMBER
10:28:43 790  ) AS
10:28:43 791  BEGIN
10:28:43 792  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
10:28:43 793  	  in_offer_chain_id,
10:28:43 794  	  in_offer_chain_current_index
10:28:43 795  	);
10:28:43 796  END P_GET_NEXT_OFFER_INDEX;
10:28:43 797  
10:28:43 798  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
10:28:43 799  	in_license_id		     IN NUMBER,
10:28:43 800  	in_offer_chain_current_index IN NUMBER,
10:28:43 801  	out_next_offer_index	     OUT NUMBER
10:28:43 802  ) AS
10:28:43 803  -- VARIABLES
10:28:43 804  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
10:28:43 805  var_offer_chain_id NUMBER;
10:28:43 806  -- EXCEPTIONS
10:28:43 807  BAD_LICENSE_ID		   EXCEPTION;
10:28:43 808  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
10:28:43 809  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
10:28:43 810  BEGIN
10:28:43 811  
10:28:43 812  	BEGIN
10:28:43 813  	  SELECT
10:28:43 814  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
10:28:43 815  	  FROM
10:28:43 816  	    SUBSCRIPTION
10:28:43 817  	  WHERE
10:28:43 818  	    SUBSCRIPTION.ID = (
10:28:43 819  	      SELECT
10:28:43 820  		LICENSE.SUBSCRIPTION_ID
10:28:43 821  	      FROM
10:28:43 822  		LICENSE
10:28:43 823  	      WHERE
10:28:43 824  		LICENSE.ID = in_license_id
10:28:43 825  	    );
10:28:43 826  	  EXCEPTION
10:28:43 827  	    WHEN NO_DATA_FOUND THEN
10:28:43 828  	      RAISE BAD_LICENSE_ID;
10:28:43 829  	END;
10:28:43 830  
10:28:43 831  	BEGIN
10:28:43 832  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
10:28:43 833  	    var_offer_chain_id,
10:28:43 834  	    in_offer_chain_current_index
10:28:43 835  	  );
10:28:43 836  	  EXCEPTION
10:28:43 837  	    WHEN OTHERS THEN
10:28:43 838  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 839  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
10:28:43 840  	END;
10:28:43 841  
10:28:43 842  EXCEPTION
10:28:43 843  WHEN BAD_LICENSE_ID THEN
10:28:43 844  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 845  	  SPROC_NAME, 'No such license');
10:28:43 846  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
10:28:43 847  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 848  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
10:28:43 849  WHEN OTHERS THEN
10:28:43 850  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 851  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 852  END GET_NEXT_OFFER_INDEX_BY_LCNS;
10:28:43 853  
10:28:43 854  FUNCTION IS_OFFER_INDEX_EXISTS (
10:28:43 855  	in_offer_chain_id	   IN NUMBER,
10:28:43 856  	in_offer_chain_offer_index IN NUMBER
10:28:43 857  ) RETURN NUMBER AS
10:28:43 858  -- VARIABLES
10:28:43 859  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
10:28:43 860  temp_count NUMBER;
10:28:43 861  BEGIN
10:28:43 862  
10:28:43 863  	SELECT
10:28:43 864  	  COUNT(*) into temp_count
10:28:43 865  	FROM
10:28:43 866  	  OFFER_OFFER_CHAIN
10:28:43 867  	WHERE
10:28:43 868  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 869  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
10:28:43 870  
10:28:43 871  	IF temp_count > 0 THEN
10:28:43 872  	  RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:43 873  	ELSE
10:28:43 874  	  RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:43 875  	END IF;
10:28:43 876  
10:28:43 877  EXCEPTION
10:28:43 878  WHEN OTHERS THEN
10:28:43 879  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 880  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 881  END IS_OFFER_INDEX_EXISTS;
10:28:43 882  
10:28:43 883  PROCEDURE GET_OFFER_LENGTH (
10:28:43 884  	in_offer_id IN NUMBER,
10:28:43 885  	out_years   OUT NUMBER,
10:28:43 886  	out_months  OUT NUMBER,
10:28:43 887  	out_days    OUT NUMBER
10:28:43 888  ) AS
10:28:43 889  -- VARIABLES
10:28:43 890  var_offer_duration VARCHAR2(30);
10:28:43 891  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
10:28:43 892  -- EXCEPTIONS
10:28:43 893  BAD_OFFER_ID	     EXCEPTION;
10:28:43 894  CAN_NOT_PARSE_DURATION EXCEPTION;
10:28:43 895  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:28:43 896  BEGIN
10:28:43 897  
10:28:43 898  	BEGIN
10:28:43 899  	  SELECT
10:28:43 900  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
10:28:43 901  	  FROM
10:28:43 902  	    OFFER
10:28:43 903  	  WHERE
10:28:43 904  	    OFFER.ID = in_offer_id;
10:28:43 905  	  EXCEPTION
10:28:43 906  	    WHEN NO_DATA_FOUND THEN
10:28:43 907  	      RAISE BAD_OFFER_ID;
10:28:43 908  	END;
10:28:43 909  
10:28:43 910  	BEGIN
10:28:43 911  	  PROCS_COMMON_V24.ISO8601DURATION_TO_INTERVALS(
10:28:43 912  	    var_offer_duration,
10:28:43 913  	    out_years,
10:28:43 914  	    out_months,
10:28:43 915  	    out_days
10:28:43 916  	  );
10:28:43 917  	  EXCEPTION
10:28:43 918  	    WHEN OTHERS THEN
10:28:43 919  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:43 920  	      RAISE CAN_NOT_PARSE_DURATION;
10:28:43 921  	END;
10:28:43 922  
10:28:43 923  EXCEPTION
10:28:43 924  WHEN BAD_OFFER_ID THEN
10:28:43 925  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 926  	  SPROC_NAME, 'No such offer');
10:28:43 927  WHEN CAN_NOT_PARSE_DURATION THEN
10:28:43 928  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 929  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
10:28:43 930  WHEN OTHERS THEN
10:28:43 931  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 933  END GET_OFFER_LENGTH;
10:28:43 934  
10:28:43 935  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
10:28:43 936  	in_offer_id   IN NUMBER,
10:28:43 937  	in_start_date IN DATE DEFAULT SYSDATE,
10:28:43 938  	out_days      OUT NUMBER
10:28:43 939  ) AS
10:28:43 940  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
10:28:43 941  -- VARIABLES
10:28:43 942  var_offer_duration VARCHAR2(30);
10:28:43 943  var_offer_years	 NUMBER;
10:28:43 944  var_offer_months	 NUMBER;
10:28:43 945  var_offer_days	 NUMBER;
10:28:43 946  var_offer_end_date DATE;
10:28:43 947  -- EXCEPTIONS
10:28:43 948  BAD_OFFER_ID EXCEPTION;
10:28:43 949  BEGIN
10:28:43 950  
10:28:43 951  	BEGIN
10:28:43 952  	  SELECT
10:28:43 953  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
10:28:43 954  	  FROM
10:28:43 955  	    OFFER
10:28:43 956  	  WHERE
10:28:43 957  	    OFFER.ID = in_offer_id;
10:28:43 958  	  EXCEPTION
10:28:43 959  	    WHEN NO_DATA_FOUND THEN
10:28:43 960  	      RAISE BAD_OFFER_ID;
10:28:43 961  	END;
10:28:43 962  
10:28:43 963  	PROCS_COMMON_V24.ISO8601DURATION_TO_INTERVALS (
10:28:43 964  	  var_offer_duration,
10:28:43 965  	  var_offer_years,
10:28:43 966  	  var_offer_months,
10:28:43 967  	  var_offer_days
10:28:43 968  	);
10:28:43 969  
10:28:43 970  	var_offer_end_date := ( ( in_start_date
10:28:43 971  	  + GLOBAL_CONSTANTS_V24.ONE_DAY_INTERVAL * var_offer_days )
10:28:43 972  	  + GLOBAL_CONSTANTS_V24.ONE_MONTH_INTERVAL * var_offer_months )
10:28:43 973  	  + GLOBAL_CONSTANTS_V24.ONE_YEAR_INTERVAL * var_offer_years;
10:28:43 974  
10:28:43 975  	out_days := var_offer_end_date - in_start_date;
10:28:43 976  
10:28:43 977  EXCEPTION
10:28:43 978  WHEN BAD_OFFER_ID THEN
10:28:43 979  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 980  	  SPROC_NAME, 'No such offer');
10:28:43 981  WHEN OTHERS THEN
10:28:43 982  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 983  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 984  END GET_OFFER_LENGTH_IN_DAYS;
10:28:43 985  
10:28:43 986  PROCEDURE GET_OFFER_PRODUCTS (
10:28:43 987  	in_offer_id    IN NUMBER,
10:28:43 988  	out_result_set OUT SYS_REFCURSOR
10:28:43 989  ) AS
10:28:43 990  -- VARIABLES
10:28:43 991  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
10:28:43 992  temp_offerr_id NUMBER;
10:28:43 993  -- EXCEPTIONS
10:28:43 994  BAD_OFFER_ID EXCEPTION;
10:28:43 995  BEGIN
10:28:43 996  
10:28:43 997  	BEGIN
10:28:43 998  	  SELECT
10:28:43 999  	    OFFER.ID into temp_offerr_id
10:28:43 1000  	   FROM
10:28:43 1001  	     OFFER
10:28:43 1002  	   WHERE
10:28:43 1003  	     OFFER.ID = in_offer_id;
10:28:43 1004  	   EXCEPTION
10:28:43 1005  	     WHEN NO_DATA_FOUND THEN
10:28:43 1006  	       RAISE BAD_OFFER_ID;
10:28:43 1007  	 END;
10:28:43 1008  
10:28:43 1009  	 OPEN out_result_set FOR
10:28:43 1010  	 SELECT DISTINCT
10:28:43 1011  	   PRODUCT.ID,
10:28:43 1012  	   PRODUCT.NAME
10:28:43 1013  	 FROM
10:28:43 1014  	   PRODUCT
10:28:43 1015  	 WHERE
10:28:43 1016  	   PRODUCT.ID IN (
10:28:43 1017  	       SELECT
10:28:43 1018  		 PRODUCT_OFFERING.PRODUCT_ID
10:28:43 1019  	       FROM
10:28:43 1020  		 OFFER_PRODUCT_OFFERING
10:28:43 1021  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:28:43 1022  	       WHERE
10:28:43 1023  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
10:28:43 1024  	     );
10:28:43 1025  
10:28:43 1026  EXCEPTION
10:28:43 1027  WHEN BAD_OFFER_ID THEN
10:28:43 1028  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1029  	   SPROC_NAME, 'No such offer');
10:28:43 1030  WHEN OTHERS THEN
10:28:43 1031  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1032  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1033  END GET_OFFER_PRODUCTS;
10:28:43 1034  
10:28:43 1035  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
10:28:43 1036  	 in_offer_chain_id IN NUMBER,
10:28:43 1037  	 out_result_set    OUT SYS_REFCURSOR
10:28:43 1038  ) AS
10:28:43 1039  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
10:28:43 1040  -- VARIABLES
10:28:43 1041  temp_offer_chain_id NUMBER;
10:28:43 1042  -- EXCEPTIONS
10:28:43 1043  BAD_OFFER_CHAIN_ID EXCEPTION;
10:28:43 1044  BEGIN
10:28:43 1045  
10:28:43 1046  	 BEGIN
10:28:43 1047  	   SELECT
10:28:43 1048  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 1049  	   FROM
10:28:43 1050  	     OFFER_CHAIN
10:28:43 1051  	   WHERE
10:28:43 1052  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:28:43 1053  	   EXCEPTION
10:28:43 1054  	     WHEN NO_DATA_FOUND THEN
10:28:43 1055  	       RAISE BAD_OFFER_CHAIN_ID;
10:28:43 1056  	 END;
10:28:43 1057  
10:28:43 1058  	 OPEN out_result_set FOR
10:28:43 1059  	 SELECT
10:28:43 1060  	   PRODUCT_OFFERING.ID,
10:28:43 1061  	   PRODUCT_OFFERING.PRODUCT_ID,
10:28:43 1062  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
10:28:43 1063  	   PRODUCT_OFFERING.UNIT_PRICE,
10:28:43 1064  	   PRODUCT_OFFERING.QUANTITY,
10:28:43 1065  	   PRODUCT_OFFERING.CREATE_DATE,
10:28:43 1066  	   PRODUCT_OFFERING.CREATED_BY,
10:28:43 1067  	   PRODUCT.ID P_ID,
10:28:43 1068  	   PRODUCT.NAME,
10:28:43 1069  	   PRODUCT.TAX_CATEGORY_ID,
10:28:43 1070  	   PRODUCT.ENTITLEMENT,
10:28:43 1071  	   PRODUCT.IS_SHAREABLE,
10:28:43 1072  	   PRODUCT.PRODUCT_STATUS_ID,
10:28:43 1073  	   PRODUCT.DEFAULT_VAT_RATE
10:28:43 1074  	 FROM
10:28:43 1075  	   PRODUCT_OFFERING
10:28:43 1076  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:28:43 1077  	 WHERE
10:28:43 1078  	   PRODUCT_OFFERING.ID IN (
10:28:43 1079  	     SELECT DISTINCT
10:28:43 1080  	       PRODUCT_OFFERING_ID
10:28:43 1081  	     FROM
10:28:43 1082  	       OFFER_PRODUCT_OFFERING
10:28:43 1083  	     WHERE
10:28:43 1084  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:28:43 1085  		 SELECT DISTINCT
10:28:43 1086  		   OFFER_ID
10:28:43 1087  		 FROM
10:28:43 1088  		   OFFER_OFFER_CHAIN
10:28:43 1089  		 WHERE
10:28:43 1090  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 1091  	       )
10:28:43 1092  	   );
10:28:43 1093  
10:28:43 1094  EXCEPTION
10:28:43 1095  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:43 1096  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1097  	   SPROC_NAME, 'Bad offer chain id');
10:28:43 1098  WHEN OTHERS THEN
10:28:43 1099  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1100  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1101  END GET_OFFER_CHAIN_PROD_OFFERINGS;
10:28:43 1102  
10:28:43 1103  FUNCTION CHECK_FOR_SAME_PRODUCTS (
10:28:43 1104  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
10:28:43 1105  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
10:28:43 1106  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE
10:28:43 1107  ) RETURN NUMBER AS
10:28:43 1108  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
10:28:43 1109  -- CONSTANTS
10:28:43 1110  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
10:28:43 1111  -- VARIABLES
10:28:43 1112  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
10:28:43 1113  var_same_products	SYS_REFCURSOR;
10:28:43 1114  var_same_product_id	NUMBER;
10:28:43 1115  same_product_count	NUMBER;
10:28:43 1116  var_product_eligibility_limit NUMBER := 1;
10:28:43 1117  -- EXCEPTIONS
10:28:43 1118  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
10:28:43 1119  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
10:28:43 1120  BEGIN
10:28:43 1121  
10:28:43 1122  	 -- Check that first offer chain exists
10:28:43 1123  	 BEGIN
10:28:43 1124  	   SELECT
10:28:43 1125  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 1126  	   FROM
10:28:43 1127  	     OFFER_CHAIN
10:28:43 1128  	   WHERE
10:28:43 1129  	     OFFER_CHAIN.ID = in_offer_chain_1;
10:28:43 1130  	   EXCEPTION
10:28:43 1131  	     WHEN NO_DATA_FOUND THEN
10:28:43 1132  	       RAISE BAD_FIRST_OFFER_CHAIN;
10:28:43 1133  	 END;
10:28:43 1134  
10:28:43 1135  	 -- Check that second offer chain exists
10:28:43 1136  	 BEGIN
10:28:43 1137  	   SELECT
10:28:43 1138  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 1139  	   FROM
10:28:43 1140  	     OFFER_CHAIN
10:28:43 1141  	   WHERE
10:28:43 1142  	     OFFER_CHAIN.ID = in_offer_chain_2;
10:28:43 1143  	   EXCEPTION
10:28:43 1144  	     WHEN NO_DATA_FOUND THEN
10:28:43 1145  	       RAISE BAD_SECOND_OFFER_CHAIN;
10:28:43 1146  	 END;
10:28:43 1147  
10:28:43 1148  	 PROCS_OFFER_CHAIN_V24.GET_OFF_CHAINS_SAME_PRODUCTS(
10:28:43 1149  	   in_offer_chain_1 => in_offer_chain_1,
10:28:43 1150  	   in_offer_chain_2 => in_offer_chain_2,
10:28:43 1151  	   out_result_set   => var_same_products
10:28:43 1152  	 );
10:28:43 1153  
10:28:43 1154  	 LOOP
10:28:43 1155  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
10:28:43 1156  	   EXIT WHEN var_same_products%NOTFOUND;
10:28:43 1157  
10:28:43 1158  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:43 1159  	     -- Return false because this offer chains having same products
10:28:43 1160  	     RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:43 1161  	   ELSE
10:28:43 1162  	     -- Check for limit
10:28:43 1163  	     IF var_product_eligibility_limit < same_product_count THEN
10:28:43 1164  	       RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:43 1165  	     END IF;
10:28:43 1166  
10:28:43 1167  	   END IF;
10:28:43 1168  	 END LOOP;
10:28:43 1169  
10:28:43 1170  	 RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:43 1171  
10:28:43 1172  EXCEPTION
10:28:43 1173  WHEN BAD_FIRST_OFFER_CHAIN THEN
10:28:43 1174  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1175  	   SPROC_NAME, 'First offer chain not found');
10:28:43 1176  WHEN BAD_SECOND_OFFER_CHAIN THEN
10:28:43 1177  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1178  	   SPROC_NAME, 'Second offer chain not found');
10:28:43 1179  WHEN OTHERS THEN
10:28:43 1180  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1181  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1182  END CHECK_FOR_SAME_PRODUCTS;
10:28:43 1183  
10:28:43 1184  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
10:28:43 1185  	 in_offer_chain_id IN NUMBER
10:28:43 1186  ) RETURN NUMBER AS
10:28:43 1187  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
10:28:43 1188  -- VARIABLES
10:28:43 1189  var_is_cancelable_str VARCHAR2(1);
10:28:43 1190  var_is_cancelable     NUMBER;
10:28:43 1191  BEGIN
10:28:43 1192  
10:28:43 1193  	 BEGIN
10:28:43 1194  	   SELECT
10:28:43 1195  	     VALUE INTO var_is_cancelable_str
10:28:43 1196  	   FROM (
10:28:43 1197  	     SELECT
10:28:43 1198  	       VALUE, NAME
10:28:43 1199  	     FROM
10:28:43 1200  	       OFFER_CHAIN_META_DATA
10:28:43 1201  	     WHERE
10:28:43 1202  	       OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 1203  	     )
10:28:43 1204  	   WHERE
10:28:43 1205  	     UPPER(NAME) = 'CANCELABLE';
10:28:43 1206  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
10:28:43 1207  	   EXCEPTION
10:28:43 1208  	     WHEN NO_DATA_FOUND THEN
10:28:43 1209  	       var_is_cancelable := GLOBAL_CONSTANTS_V24.FALSE;
10:28:43 1210  	 END;
10:28:43 1211  
10:28:43 1212  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:43 1213  	   RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:43 1214  	 END IF;
10:28:43 1215  
10:28:43 1216  	 RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:43 1217  
10:28:43 1218  EXCEPTION
10:28:43 1219  WHEN OTHERS THEN
10:28:43 1220  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1221  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1222  END IS_OFFER_CHAIN_CANCELABLE;
10:28:43 1223  
10:28:43 1224  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
10:28:43 1225  	 in_offer_chain_id IN NUMBER
10:28:43 1226  ) RETURN NUMBER AS
10:28:43 1227  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
10:28:43 1228  -- VARIABLES
10:28:43 1229  var_max_concurrent_subs_str VARCHAR2(100);
10:28:43 1230  var_max_concurrent_subs	   NUMBER;
10:28:43 1231  BEGIN
10:28:43 1232  
10:28:43 1233  	 BEGIN
10:28:43 1234  	   SELECT
10:28:43 1235  	     VALUE into var_max_concurrent_subs_str
10:28:43 1236  	   FROM
10:28:43 1237  	     (
10:28:43 1238  	       SELECT
10:28:43 1239  		 NAME,
10:28:43 1240  		 VALUE
10:28:43 1241  	       FROM
10:28:43 1242  		 OFFER_CHAIN_ELIGIBILITY
10:28:43 1243  	       WHERE
10:28:43 1244  		 OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 1245  	     )
10:28:43 1246  	   WHERE
10:28:43 1247  	     NAME LIKE GLOBAL_CONSTANTS_V24.MAX_CONCURRENT_SUBS;
10:28:43 1248  
10:28:43 1249  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V24.MAX_CONCURRENT_SUBS_UNLIM THEN
10:28:43 1250  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V24.INFINITY;
10:28:43 1251  	   ELSE
10:28:43 1252  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
10:28:43 1253  	   END IF;
10:28:43 1254  
10:28:43 1255  	   EXCEPTION
10:28:43 1256  	     WHEN NO_DATA_FOUND THEN
10:28:43 1257  	       var_max_concurrent_subs := 1;
10:28:43 1258  	 END;
10:28:43 1259  
10:28:43 1260  	 RETURN var_max_concurrent_subs;
10:28:43 1261  
10:28:43 1262  EXCEPTION
10:28:43 1263  WHEN OTHERS THEN
10:28:43 1264  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1265  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1266  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
10:28:43 1267  
10:28:43 1268  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
10:28:43 1269  	 in_offer_chain_id   IN NUMBER,
10:28:43 1270  	 in_eligibility_name IN VARCHAR2,
10:28:43 1271  	 out_result_set      OUT SYS_REFCURSOR
10:28:43 1272  ) AS
10:28:43 1273  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
10:28:43 1274  -- VARIABLES
10:28:43 1275  temp_offer_chain_id NUMBER;
10:28:43 1276  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
10:28:43 1277  -- EXCEPTIONS
10:28:43 1278  BAD_OFFER_CHAIN_ID EXCEPTION;
10:28:43 1279  BEGIN
10:28:43 1280  
10:28:43 1281  	 BEGIN
10:28:43 1282  	   SELECT
10:28:43 1283  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 1284  	   FROM
10:28:43 1285  	     OFFER_CHAIN
10:28:43 1286  	   WHERE
10:28:43 1287  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:28:43 1288  	   EXCEPTION
10:28:43 1289  	     WHEN NO_DATA_FOUND THEN
10:28:43 1290  	       RAISE BAD_OFFER_CHAIN_ID;
10:28:43 1291  	 END;
10:28:43 1292  
10:28:43 1293  	 var_eligibility_name := UPPER(in_eligibility_name);
10:28:43 1294  
10:28:43 1295  	 OPEN out_result_set FOR
10:28:43 1296  	 SELECT
10:28:43 1297  	   OFFER_CHAIN_ELIGIBILITY.ID,
10:28:43 1298  	   OFFER_CHAIN_ELIGIBILITY.NAME,
10:28:43 1299  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
10:28:43 1300  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
10:28:43 1301  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
10:28:43 1302  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
10:28:43 1303  	 FROM
10:28:43 1304  	   OFFER_CHAIN_ELIGIBILITY
10:28:43 1305  	 WHERE
10:28:43 1306  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 1307  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
10:28:43 1308  
10:28:43 1309  EXCEPTION
10:28:43 1310  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:43 1311  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1312  	   SPROC_NAME, 'No such offer chain');
10:28:43 1313  WHEN OTHERS THEN
10:28:43 1314  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1315  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1316  END GET_OFFER_CHAIN_ELIGIBILITY;
10:28:43 1317  
10:28:43 1318  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
10:28:43 1319  	 in_offer_chain_ids  IN VARCHAR2,
10:28:43 1320  	 in_eligibility_name IN VARCHAR2,
10:28:43 1321  	 out_result_set      OUT SYS_REFCURSOR
10:28:43 1322  ) AS
10:28:43 1323  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
10:28:43 1324  -- VARIABLES
10:28:43 1325  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
10:28:43 1326  BEGIN
10:28:43 1327  
10:28:43 1328  	 var_eligibility_name := UPPER(in_eligibility_name);
10:28:43 1329  
10:28:43 1330  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
10:28:43 1331  
10:28:43 1332  	 open out_result_set for
10:28:43 1333  	 'SELECT
10:28:43 1334  	   ID,
10:28:43 1335  	   NAME,
10:28:43 1336  	   VALUE,
10:28:43 1337  	   OFFER_CHAIN_ID,
10:28:43 1338  	   CREATE_DATE,
10:28:43 1339  	   CREATED_BY
10:28:43 1340  	 FROM
10:28:43 1341  	   OFFER_CHAIN_ELIGIBILITY
10:28:43 1342  	 WHERE
10:28:43 1343  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
10:28:43 1344  	   AND UPPER(NAME) = :1'
10:28:43 1345  	 using var_eligibility_name;
10:28:43 1346  
10:28:43 1347  EXCEPTION
10:28:43 1348  WHEN OTHERS THEN
10:28:43 1349  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1350  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1351  END GET_OFFER_CHAINS_ELIGIBILITY;
10:28:43 1352  
10:28:43 1353  PROCEDURE GET_OFFER_CHAINS_META_DATA (
10:28:43 1354  	 in_offer_chain_ids IN VARCHAR2,
10:28:43 1355  	 in_meta_data_name  IN VARCHAR2,
10:28:43 1356  	 out_result_set     OUT SYS_REFCURSOR
10:28:43 1357  ) AS
10:28:43 1358  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
10:28:43 1359  -- VARIABLES
10:28:43 1360  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
10:28:43 1361  BEGIN
10:28:43 1362  
10:28:43 1363  	 var_meta_data_name := UPPER(in_meta_data_name);
10:28:43 1364  
10:28:43 1365  	 open out_result_set for
10:28:43 1366  	 'select
10:28:43 1367  	   ID,
10:28:43 1368  	   NAME,
10:28:43 1369  	   VALUE,
10:28:43 1370  	   OFFER_CHAIN_ID,
10:28:43 1371  	   CREATED_BY,
10:28:43 1372  	   CREATE_DATE
10:28:43 1373  	 from
10:28:43 1374  	   OFFER_CHAIN_META_DATA
10:28:43 1375  	 where
10:28:43 1376  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
10:28:43 1377  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
10:28:43 1378  	 using var_meta_data_name;
10:28:43 1379  
10:28:43 1380  EXCEPTION
10:28:43 1381  WHEN OTHERS THEN
10:28:43 1382  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1383  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1384  END GET_OFFER_CHAINS_META_DATA;
10:28:43 1385  
10:28:43 1386  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:28:43 1387  	 in_offer_chain_id IN NUMBER,
10:28:43 1388  	 in_meta_data_name IN VARCHAR2,
10:28:43 1389  	 out_result_set    OUT SYS_REFCURSOR
10:28:43 1390  ) AS
10:28:43 1391  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
10:28:43 1392  -- VARIABLES
10:28:43 1393  temp_offer_chain_id NUMBER;
10:28:43 1394  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
10:28:43 1395  -- EXCEPTIONS
10:28:43 1396  BAD_OFFER_CHAIN_ID EXCEPTION;
10:28:43 1397  BEGIN
10:28:43 1398  
10:28:43 1399  	 BEGIN
10:28:43 1400  	   SELECT
10:28:43 1401  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:28:43 1402  	   FROM
10:28:43 1403  	     OFFER_CHAIN
10:28:43 1404  	   WHERE
10:28:43 1405  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:28:43 1406  	   EXCEPTION
10:28:43 1407  	     WHEN NO_DATA_FOUND THEN
10:28:43 1408  	       RAISE BAD_OFFER_CHAIN_ID;
10:28:43 1409  	 END;
10:28:43 1410  
10:28:43 1411  	 var_meta_data_name := UPPER(in_meta_data_name);
10:28:43 1412  
10:28:43 1413  	 OPEN out_result_set FOR
10:28:43 1414  	 SELECT
10:28:43 1415  	   OFFER_CHAIN_META_DATA.ID,
10:28:43 1416  	   OFFER_CHAIN_META_DATA.NAME,
10:28:43 1417  	   OFFER_CHAIN_META_DATA.VALUE,
10:28:43 1418  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
10:28:43 1419  	   OFFER_CHAIN_META_DATA.CREATED_BY,
10:28:43 1420  	   OFFER_CHAIN_META_DATA.CREATE_DATE
10:28:43 1421  	 FROM
10:28:43 1422  	   OFFER_CHAIN_META_DATA
10:28:43 1423  	 WHERE
10:28:43 1424  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 1425  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
10:28:43 1426  
10:28:43 1427  EXCEPTION
10:28:43 1428  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:43 1429  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1430  	   SPROC_NAME, 'No such offer chain');
10:28:43 1431  WHEN OTHERS THEN
10:28:43 1432  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1433  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1434  END GET_OFFER_CHAIN_META_DATA;
10:28:43 1435  
10:28:43 1436  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
10:28:43 1437  	 in_offer_id	IN NUMBER,
10:28:43 1438  	 out_result_set OUT SYS_REFCURSOR
10:28:43 1439  ) AS
10:28:43 1440  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
10:28:43 1441  -- VARIABLES
10:28:43 1442  temp_offer_id NUMBER;
10:28:43 1443  -- EXCEPTIONS
10:28:43 1444  BAD_OFFER_ID EXCEPTION;
10:28:43 1445  BEGIN
10:28:43 1446  
10:28:43 1447  	 BEGIN
10:28:43 1448  	   SELECT
10:28:43 1449  	     OFFER.ID into temp_offer_id
10:28:43 1450  	   FROM
10:28:43 1451  	     OFFER
10:28:43 1452  	   WHERE
10:28:43 1453  	     OFFER.ID = in_offer_id;
10:28:43 1454  	   EXCEPTION
10:28:43 1455  	     WHEN NO_DATA_FOUND THEN
10:28:43 1456  	       RAISE BAD_OFFER_ID;
10:28:43 1457  	 END;
10:28:43 1458  
10:28:43 1459  	 OPEN out_result_set FOR
10:28:43 1460  	 SELECT DISTINCT
10:28:43 1461  	   PRODUCT_OFFERING.ID,
10:28:43 1462  	   PRODUCT_OFFERING.PRODUCT_ID,
10:28:43 1463  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
10:28:43 1464  	   PRODUCT_OFFERING.UNIT_PRICE,
10:28:43 1465  	   PRODUCT_OFFERING.QUANTITY,
10:28:43 1466  	   PRODUCT_OFFERING.CREATE_DATE,
10:28:43 1467  	   PRODUCT_OFFERING.CREATED_BY,
10:28:43 1468  	   PRODUCT.ID P_ID,
10:28:43 1469  	   PRODUCT.NAME,
10:28:43 1470  	   PRODUCT.TAX_CATEGORY_ID,
10:28:43 1471  	   PRODUCT.ENTITLEMENT,
10:28:43 1472  	   PRODUCT.IS_SHAREABLE,
10:28:43 1473  	   PRODUCT.PRODUCT_STATUS_ID,
10:28:43 1474  	   PRODUCT.DEFAULT_VAT_RATE
10:28:43 1475  	 FROM
10:28:43 1476  	   OFFER_PRODUCT_OFFERING
10:28:43 1477  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:28:43 1478  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:28:43 1479  	 WHERE
10:28:43 1480  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
10:28:43 1481  
10:28:43 1482  EXCEPTION
10:28:43 1483  WHEN BAD_OFFER_ID THEN
10:28:43 1484  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1485  	   SPROC_NAME, 'No such offer');
10:28:43 1486  WHEN OTHERS THEN
10:28:43 1487  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1488  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1489  END GET_PROD_OFFERINGS_BY_OFFER_ID;
10:28:43 1490  
10:28:43 1491  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
10:28:43 1492  	 in_offer_chain_1 IN NUMBER,
10:28:43 1493  	 in_offer_chain_2 IN NUMBER,
10:28:43 1494  	 out_result_set   OUT SYS_REFCURSOR
10:28:43 1495  ) AS
10:28:43 1496  BEGIN
10:28:43 1497  
10:28:43 1498  	 OPEN out_result_set FOR
10:28:43 1499  	 SELECT
10:28:43 1500  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
10:28:43 1501  	   COUNT_1 + COUNT_2	    AS "COUNT"
10:28:43 1502  	 FROM
10:28:43 1503  	   (
10:28:43 1504  	     SELECT
10:28:43 1505  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
10:28:43 1506  	       COUNT(*) 		   as "COUNT_1"
10:28:43 1507  	     FROM
10:28:43 1508  	       (
10:28:43 1509  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
10:28:43 1510  	       )
10:28:43 1511  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
10:28:43 1512  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:28:43 1513  		       INNER JOIN PRODUCT ON PRODUCT.ID = PRODUCT_OFFERING.PRODUCT_ID
10:28:43 1514  		 where PRODUCT.ENTITLEMENT <> 'AAA'
10:28:43 1515  	     GROUP BY
10:28:43 1516  	       PRODUCT_OFFERING.PRODUCT_ID
10:28:43 1517  	   )
10:28:43 1518  	   INNER JOIN
10:28:43 1519  	   (
10:28:43 1520  	     SELECT
10:28:43 1521  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
10:28:43 1522  	       COUNT(*) 		   as "COUNT_2"
10:28:43 1523  	     FROM
10:28:43 1524  	       (
10:28:43 1525  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
10:28:43 1526  	       )
10:28:43 1527  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
10:28:43 1528  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:28:43 1529  		       INNER JOIN PRODUCT ON PRODUCT.ID = PRODUCT_OFFERING.PRODUCT_ID
10:28:43 1530  		 where PRODUCT.ENTITLEMENT <> 'AAA'
10:28:43 1531  	     GROUP BY
10:28:43 1532  	       PRODUCT_OFFERING.PRODUCT_ID
10:28:43 1533  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
10:28:43 1534  
10:28:43 1535  END GET_OFF_CHAINS_SAME_PRODUCTS;
10:28:43 1536  
10:28:43 1537  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
10:28:43 1538  	 in_offer_chain_id IN NUMBER,
10:28:43 1539  	 in_meta_data_name IN VARCHAR2,
10:28:43 1540  	 out_value	   OUT VARCHAR2
10:28:43 1541  ) AS
10:28:43 1542  BEGIN
10:28:43 1543  	 BEGIN
10:28:43 1544  	   SELECT
10:28:43 1545  	     OFFER_CHAIN_META_DATA.VALUE into out_value
10:28:43 1546  	   FROM
10:28:43 1547  	     OFFER_CHAIN_META_DATA
10:28:43 1548  	   WHERE
10:28:43 1549  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 1550  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
10:28:43 1551  
10:28:43 1552  	   EXCEPTION
10:28:43 1553  	     WHEN NO_DATA_FOUND THEN
10:28:43 1554  	       out_value := NULL;
10:28:43 1555  	 END;
10:28:43 1556  END GET_OFFER_CHAIN_MD_VALUE;
10:28:43 1557  
10:28:43 1558  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
10:28:43 1559  	 in_offer_chain_id   IN NUMBER,
10:28:43 1560  	 in_eligibility_name IN VARCHAR2,
10:28:43 1561  	 out_value	     OUT VARCHAR2
10:28:43 1562  ) AS
10:28:43 1563  BEGIN
10:28:43 1564  	 BEGIN
10:28:43 1565  	   SELECT
10:28:43 1566  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
10:28:43 1567  	   FROM
10:28:43 1568  	     OFFER_CHAIN_ELIGIBILITY
10:28:43 1569  	   WHERE
10:28:43 1570  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 1571  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
10:28:43 1572  
10:28:43 1573  	   EXCEPTION
10:28:43 1574  	     WHEN NO_DATA_FOUND THEN
10:28:43 1575  	       out_value := NULL;
10:28:43 1576  	 END;
10:28:43 1577  END GET_OFFER_CHAIN_EL_VALUE;
10:28:43 1578  
10:28:43 1579  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
10:28:43 1580  	 in_offer_id	IN NUMBER,
10:28:43 1581  	 out_result_set OUT SYS_REFCURSOR
10:28:43 1582  ) AS
10:28:43 1583  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
10:28:43 1584  -- VARIABLES
10:28:43 1585  temp_offer_id NUMBER;
10:28:43 1586  -- EXCEPTIONS
10:28:43 1587  BAD_OFFER_ID EXCEPTION;
10:28:43 1588  BEGIN
10:28:43 1589  
10:28:43 1590  	 BEGIN
10:28:43 1591  	   SELECT
10:28:43 1592  	     OFFER.ID into temp_offer_id
10:28:43 1593  	   FROM
10:28:43 1594  	     OFFER
10:28:43 1595  	   WHERE
10:28:43 1596  	     OFFER.ID = in_offer_id;
10:28:43 1597  	   EXCEPTION
10:28:43 1598  	     WHEN NO_DATA_FOUND THEN
10:28:43 1599  	       RAISE BAD_OFFER_ID;
10:28:43 1600  	 END;
10:28:43 1601  
10:28:43 1602  	 OPEN out_result_set FOR
10:28:43 1603  	 SELECT
10:28:43 1604  	   PRODUCT_OFFERING.ID,
10:28:43 1605  	   PRODUCT_OFFERING.PRODUCT_ID,
10:28:43 1606  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
10:28:43 1607  	   PRODUCT_OFFERING.UNIT_PRICE,
10:28:43 1608  	   PRODUCT_OFFERING.QUANTITY,
10:28:43 1609  	   PRODUCT_OFFERING.CREATE_DATE,
10:28:43 1610  	   PRODUCT_OFFERING.CREATED_BY,
10:28:43 1611  	   PRODUCT.ID P_ID,
10:28:43 1612  	   PRODUCT.NAME,
10:28:43 1613  	   PRODUCT.TAX_CATEGORY_ID,
10:28:43 1614  	   PRODUCT.ENTITLEMENT,
10:28:43 1615  	   PRODUCT.IS_SHAREABLE,
10:28:43 1616  	   PRODUCT.PRODUCT_STATUS_ID,
10:28:43 1617  	   PRODUCT.DEFAULT_VAT_RATE
10:28:43 1618  	 FROM
10:28:43 1619  	   PRODUCT_OFFERING
10:28:43 1620  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:28:43 1621  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:28:43 1622  	 WHERE
10:28:43 1623  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
10:28:43 1624  
10:28:43 1625  EXCEPTION
10:28:43 1626  WHEN BAD_OFFER_ID THEN
10:28:43 1627  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1628  	   SPROC_NAME, 'No such offer');
10:28:43 1629  WHEN OTHERS THEN
10:28:43 1630  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1631  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1632  END GET_OFFER_PRODUCT_OFFERINGS;
10:28:43 1633  
10:28:43 1634  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
10:28:43 1635  	 in_meta_data_name  IN VARCHAR2,
10:28:43 1636  	 in_meta_data_value IN VARCHAR2,
10:28:43 1637  	 out_result_set     OUT SYS_REFCURSOR
10:28:43 1638  ) AS
10:28:43 1639  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
10:28:43 1640  -- VARIABLES
10:28:43 1641  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
10:28:43 1642  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
10:28:43 1643  BEGIN
10:28:43 1644  
10:28:43 1645  	 OPEN out_result_set FOR
10:28:43 1646  	 SELECT
10:28:43 1647  	   och.ID,
10:28:43 1648  	   och.NAME,
10:28:43 1649  	   och.DESCRIPTION,
10:28:43 1650  	   och.OFFER_CHAIN_STATUS_ID,
10:28:43 1651  	   PROCS_OFFER_CHAIN_V24.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
10:28:43 1652  	   och.ADOPTABILITY_WINDOW_START_DATE,
10:28:43 1653  	   och.ADOPTABILITY_WINDOW_END_DATE,
10:28:43 1654  	   PROCS_OFFER_CHAIN_V24.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
10:28:43 1655  	   och.IS_GIFT_CERTIFICATE,
10:28:43 1656  	   'false' as comf_offer_chain, -- TODO
10:28:43 1657  	   po.PRODUCT_ID,
10:28:43 1658  	   och.GROUP_ACCOUNT_TYPE_ID
10:28:43 1659  	 FROM
10:28:43 1660  	   OFFER_CHAIN och,
10:28:43 1661  	   OFFER_OFFER_CHAIN ooch,
10:28:43 1662  	   OFFER_PRODUCT_OFFERING opo,
10:28:43 1663  	   PRODUCT_OFFERING po
10:28:43 1664  	 WHERE
10:28:43 1665  	   och.ID = ooch.OFFER_CHAIN_ID
10:28:43 1666  	   and ooch.OFFER_ID = opo.OFFER_ID
10:28:43 1667  	   and opo.PRODUCT_OFFERING_ID = po.ID
10:28:43 1668  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V24.OFFER_CHAIN_ACTIVE
10:28:43 1669  	   and och.id in (
10:28:43 1670  	     SELECT DISTINCT
10:28:43 1671  	       och2.id
10:28:43 1672  	     from
10:28:43 1673  	       offer_chain och2
10:28:43 1674  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
10:28:43 1675  	     where
10:28:43 1676  	       UPPER(ochmd.name) = v_meta_data_name
10:28:43 1677  	       AND UPPER(ochmd.value) = v_meta_data_value
10:28:43 1678  	   );
10:28:43 1679  
10:28:43 1680  EXCEPTION
10:28:43 1681  WHEN OTHERS THEN
10:28:43 1682  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1683  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1684  END GET_OFFER_CHAINS_BY_META_DATA;
10:28:43 1685  
10:28:43 1686  PROCEDURE GET_ALL_META_DATA (
10:28:43 1687  	 in_offer_chain_id IN NUMBER,
10:28:43 1688  	 out_result_set    OUT SYS_REFCURSOR
10:28:43 1689  ) AS
10:28:43 1690  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
10:28:43 1691  -- Variables
10:28:43 1692  temp_offer_chain_id NUMBER;
10:28:43 1693  -- Exceptions
10:28:43 1694  BAD_OFFER_CHAIN_ID EXCEPTION;
10:28:43 1695  BEGIN
10:28:43 1696  
10:28:43 1697  	 BEGIN
10:28:43 1698  	   SELECT
10:28:43 1699  	     OCH.ID into temp_offer_chain_id
10:28:43 1700  	   FROM
10:28:43 1701  	     OFFER_CHAIN OCH
10:28:43 1702  	   WHERE
10:28:43 1703  	     OCH.ID = in_offer_chain_id;
10:28:43 1704  	   EXCEPTION
10:28:43 1705  	     WHEN NO_DATA_FOUND THEN
10:28:43 1706  	       RAISE BAD_OFFER_CHAIN_ID;
10:28:43 1707  	 END;
10:28:43 1708  
10:28:43 1709  	 OPEN out_result_set FOR
10:28:43 1710  	 SELECT
10:28:43 1711  	   OCHMD.ID,
10:28:43 1712  	   OCHMD.OFFER_CHAIN_ID,
10:28:43 1713  	   OCHMD.NAME,
10:28:43 1714  	   OCHMD.VALUE,
10:28:43 1715  	   OCHMD.CREATE_DATE,
10:28:43 1716  	   OCHMD.CREATED_BY
10:28:43 1717  	 FROM
10:28:43 1718  	   OFFER_CHAIN_META_DATA OCHMD
10:28:43 1719  	 WHERE
10:28:43 1720  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
10:28:43 1721  
10:28:43 1722  EXCEPTION
10:28:43 1723  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:43 1724  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1725  	   SPROC_NAME, 'No such offer chain', SQLERRM);
10:28:43 1726  WHEN OTHERS THEN
10:28:43 1727  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1728  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1729  END GET_ALL_META_DATA;
10:28:43 1730  
10:28:43 1731  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
10:28:43 1732  	 in_group_id	   IN NUMBER,
10:28:43 1733  	 in_offer_chain_id IN NUMBER,
10:28:43 1734  	 out_is_eligible   OUT NUMBER,
10:28:43 1735  	 out_concurrent_subscription_id OUT NUMBER
10:28:43 1736  ) AS
10:28:43 1737  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
10:28:43 1738  -- Variables
10:28:43 1739  var_account_id  NUMBER;
10:28:43 1740  var_is_eligible NUMBER;
10:28:43 1741  var_is_gc       NUMBER;
10:28:43 1742  -- Exceptions
10:28:43 1743  BAD_GROUP_ID		   EXCEPTION;
10:28:43 1744  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
10:28:43 1745  BAD_OC_ID		   EXCEPTION;
10:28:43 1746  EXCEPTION_MESSAGE	   VARCHAR(1024);
10:28:43 1747  BEGIN
10:28:43 1748  
10:28:43 1749  	 var_is_eligible := GLOBAL_CONSTANTS_V24.TRUE;
10:28:43 1750  
10:28:43 1751  	 out_concurrent_subscription_id := NULL;
10:28:43 1752  
10:28:43 1753  	 BEGIN
10:28:43 1754  	   SELECT
10:28:43 1755  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
10:28:43 1756  	   FROM
10:28:43 1757  	     OFFER_CHAIN OC
10:28:43 1758  	   WHERE
10:28:43 1759  	     OC.ID = in_offer_chain_id;
10:28:43 1760  	   EXCEPTION
10:28:43 1761  	     WHEN NO_DATA_FOUND THEN
10:28:43 1762  	       RAISE BAD_OC_ID;
10:28:43 1763  	 END;
10:28:43 1764  
10:28:43 1765  	 -- only check eligibility if this is not a gift certificate
10:28:43 1766  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
10:28:43 1767  	   BEGIN
10:28:43 1768  	     SELECT
10:28:43 1769  	       A.ID into var_account_id
10:28:43 1770  	     FROM
10:28:43 1771  	       ACCOUNT A
10:28:43 1772  	     WHERE
10:28:43 1773  	       A.GROUP_ID = in_group_id;
10:28:43 1774  	     EXCEPTION
10:28:43 1775  	       WHEN NO_DATA_FOUND THEN
10:28:43 1776  		 RAISE BAD_GROUP_ID;
10:28:43 1777  	   END;
10:28:43 1778  
10:28:43 1779  
10:28:43 1780  	   FOR f_offer_chain IN (
10:28:43 1781  	       SELECT
10:28:43 1782  		 S.ID as SUBSCRIPTION_ID,
10:28:43 1783  		 S.OFFER_CHAIN_ID
10:28:43 1784  	       FROM
10:28:43 1785  		 SUBSCRIPTION S
10:28:43 1786  	       WHERE
10:28:43 1787  		 S.ACCOUNT_ID = var_account_id
10:28:43 1788  		 AND (S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:43 1789  		      OR S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD)
10:28:43 1790  	   )
10:28:43 1791  	   LOOP
10:28:43 1792  	     BEGIN
10:28:43 1793  	       IF (
10:28:43 1794  		 PROCS_OFFER_CHAIN_V24.CHECK_FOR_SAME_PRODUCTS(
10:28:43 1795  		   in_offer_chain_id,
10:28:43 1796  		   f_offer_chain.offer_chain_id,
10:28:43 1797  		   GLOBAL_CONSTANTS_V24.TRUE
10:28:43 1798  		 ) = GLOBAL_CONSTANTS_V24.TRUE
10:28:43 1799  	       ) THEN
10:28:43 1800  		 var_is_eligible := GLOBAL_CONSTANTS_V24.FALSE;
10:28:43 1801  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
10:28:43 1802  	       END IF;
10:28:43 1803  	       EXCEPTION
10:28:43 1804  		 WHEN OTHERS THEN
10:28:43 1805  		   EXCEPTION_MESSAGE := SQLERRM;
10:28:43 1806  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
10:28:43 1807  	     END;
10:28:43 1808  	   END LOOP;
10:28:43 1809  	 END IF;
10:28:43 1810  	 out_is_eligible := var_is_eligible;
10:28:43 1811  
10:28:43 1812  EXCEPTION
10:28:43 1813  WHEN BAD_GROUP_ID THEN
10:28:43 1814  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1815  	   SPROC_NAME, 'No such offer chain', SQLERRM);
10:28:43 1816  WHEN BAD_OC_ID THEN
10:28:43 1817  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 1818  	   SPROC_NAME, 'No such offer chain', SQLERRM);
10:28:43 1819  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
10:28:43 1820  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 1821  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
10:28:43 1822  WHEN OTHERS THEN
10:28:43 1823  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1824  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1825  END CHECK_PRODUCT_ELIGIBILITY;
10:28:43 1826  
10:28:43 1827  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:28:43 1828  	 in_offer_chain_id	  IN NUMBER,
10:28:43 1829  	 in_action_name 	  IN VARCHAR2,
10:28:43 1830  	 out_notification_type_id OUT NUMBER
10:28:43 1831  ) AS
10:28:43 1832  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
10:28:43 1833  -- Variables
10:28:43 1834  var_action_id NUMBER;
10:28:43 1835  -- Exceptions
10:28:43 1836  BAD_ACTION_NAME	      EXCEPTION;
10:28:43 1837  MULTIPLY_ACTIONS_FOUND EXCEPTION;
10:28:43 1838  BEGIN
10:28:43 1839  
10:28:43 1840  	 BEGIN
10:28:43 1841  	   SELECT
10:28:43 1842  	     A.ID into var_action_id
10:28:43 1843  	   FROM
10:28:43 1844  	     ACTION A
10:28:43 1845  	   WHERE
10:28:43 1846  	     UPPER(A.NAME) = UPPER(in_action_name);
10:28:43 1847  	   EXCEPTION
10:28:43 1848  	     WHEN NO_DATA_FOUND THEN
10:28:43 1849  	       RAISE BAD_ACTION_NAME;
10:28:43 1850  	     WHEN TOO_MANY_ROWS THEN
10:28:43 1851  	       RAISE MULTIPLY_ACTIONS_FOUND;
10:28:43 1852  	 END;
10:28:43 1853  
10:28:43 1854  	 SELECT
10:28:43 1855  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
10:28:43 1856  	 FROM
10:28:43 1857  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
10:28:43 1858  	 WHERE
10:28:43 1859  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
10:28:43 1860  	   AND OCNT.ACTION_ID = var_action_id;
10:28:43 1861  
10:28:43 1862  EXCEPTION
10:28:43 1863  WHEN NO_DATA_FOUND THEN
10:28:43 1864  	 out_notification_type_id := NULL;
10:28:43 1865  WHEN BAD_ACTION_NAME THEN
10:28:43 1866  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:43 1867  	   SPROC_NAME, 'Bad action name', SQLERRM);
10:28:43 1868  WHEN MULTIPLY_ACTIONS_FOUND THEN
10:28:43 1869  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:43 1870  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
10:28:43 1871  WHEN OTHERS THEN
10:28:43 1872  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 1873  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 1874  END GET_NOTIFICATION_TYPE_ID;
10:28:43 1875  
10:28:43 1876  END PROCS_OFFER_CHAIN_V24;
10:28:43 1877  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.27
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_polling_sync.sql
Compiling body for procs_polling_sync.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
10:28:43   2  AS
10:28:43   3  	  --------------------------------------------------------------------------------
10:28:43   4  PROCEDURE GATHER_SYNC_EVENTS
10:28:43   5  	  (
10:28:43   6  	      in_last_timestamp TIMESTAMP,
10:28:43   7  	      out_new_timestamp OUT TIMESTAMP)
10:28:43   8  IS
10:28:43   9  BEGIN
10:28:43  10  	  out_new_timestamp := systimestamp;
10:28:43  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
10:28:43  12  END;
10:28:43  13  	  --------------------------------------------------------------------------------
10:28:43  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
10:28:43  15  IS
10:28:43  16  BEGIN
10:28:43  17  	  INSERT
10:28:43  18  	  INTO
10:28:43  19  	      core_owner.polling_sync
10:28:43  20  	      (
10:28:43  21  		  account_id,
10:28:43  22  		  group_id,
10:28:43  23  		  event_type,
10:28:43  24  		  event_date
10:28:43  25  	      )
10:28:43  26  	  select id, group_id, event_type, event_date from (
10:28:43  27  	      SELECT
10:28:43  28  		  a.id,
10:28:43  29  		  a.group_id,
10:28:43  30  		  'I' event_type,
10:28:43  31  		  in_end_ts event_date,
10:28:43  32  		  max(cl.change_time) last_change_time
10:28:43  33  	      FROM
10:28:43  34  		  core_hist_owner.change_log cl,
10:28:43  35  		  core_owner.credit_card cc,
10:28:43  36  		  core_owner.account a
10:28:43  37  	      WHERE
10:28:43  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
10:28:43  39  	      AND cl.item = 'CREDIT_CARD'
10:28:43  40  	      AND cl.id = cc.id
10:28:43  41  	      AND cc.account_id = a.id
10:28:43  42  	      GROUP BY a.id, a.group_id
10:28:43  43  	      UNION ALL
10:28:43  44  	      SELECT
10:28:43  45  		  a.id,
10:28:43  46  		  a.group_id,
10:28:43  47  		  'I',
10:28:43  48  		  in_end_ts,
10:28:43  49  		  max(cl.change_time) last_change_time
10:28:43  50  	      FROM
10:28:43  51  		  core_hist_owner.change_log cl,
10:28:43  52  		  core_owner.paypal p,
10:28:43  53  		  core_owner.account a
10:28:43  54  	      WHERE
10:28:43  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
10:28:43  56  	      AND cl.item = 'PAYPAL'
10:28:43  57  	      AND cl.id = p.id
10:28:43  58  	      AND p.account_id = a.id
10:28:43  59  	      GROUP BY a.id, a.group_id
10:28:43  60  	      UNION ALL
10:28:43  61  	      SELECT
10:28:43  62  		  a.id,
10:28:43  63  		  a.group_id,
10:28:43  64  		  'S',
10:28:43  65  		  in_end_ts,
10:28:43  66  		  max(cl.change_time) last_change_time
10:28:43  67  	      FROM
10:28:43  68  		  core_hist_owner.change_log cl,
10:28:43  69  		  core_owner.subscription s,
10:28:43  70  		  core_owner.account a
10:28:43  71  	      WHERE
10:28:43  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
10:28:43  73  	      AND cl.item = 'SUBSCRIPTION'
10:28:43  74  	      AND cl.id = s.id
10:28:43  75  	      AND s.account_id = a.id
10:28:43  76  	      GROUP BY a.id, a.group_id
10:28:43  77  	      UNION ALL
10:28:43  78  	      SELECT
10:28:43  79  		  a.id,
10:28:43  80  		  a.group_id,
10:28:43  81  		  'G',
10:28:43  82  		  in_end_ts,
10:28:43  83  		  max(cl.change_time) last_change_time
10:28:43  84  	      FROM
10:28:43  85  		  core_hist_owner.change_log cl,
10:28:43  86  		  core_owner.gift_certificate gc,
10:28:43  87  		  core_owner.account a
10:28:43  88  	      WHERE
10:28:43  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
10:28:43  90  	      AND cl.item = 'GIFT_CERTIFICATE'
10:28:43  91  	      AND cl.id = gc.id
10:28:43  92  	      AND gc.purchaser_group_id = a.group_id
10:28:43  93  	      GROUP BY a.id, a.group_id
10:28:43  94  	  ) t
10:28:43  95  	  where not exists (
10:28:43  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
10:28:43  97  	      from polling_sync ps
10:28:43  98  	      where ps.account_id = t.id
10:28:43  99  		and ps.group_id = t.group_id
10:28:43 100  		and ps.event_type = t.event_type
10:28:43 101  		and ps.event_date >= t.last_change_time
10:28:43 102  	  )
10:28:43 103  	  ;
10:28:43 104  END;
10:28:43 105  --------------------------------------------------------------------------------
10:28:43 106  FUNCTION CREATE_NEW_TRANSFER_SET
10:28:43 107  	  (
10:28:43 108  	      in_set_maximum NUMBER)
10:28:43 109  	  RETURN core_owner.polling_sync.set_id%type
10:28:43 110  IS
10:28:43 111  	  pragma autonomous_transaction;
10:28:43 112  	  v_set_id core_owner.polling_sync.set_id%type;
10:28:43 113  BEGIN
10:28:43 114  	  SELECT
10:28:43 115  	      pollsync_setid_seq.nextval
10:28:43 116  	  INTO
10:28:43 117  	      v_set_id
10:28:43 118  	  FROM
10:28:43 119  	      dual;
10:28:43 120  	  update
10:28:43 121  	    core_owner.polling_sync ps
10:28:43 122  	  set
10:28:43 123  	    ps.set_id = v_set_id
10:28:43 124  	  where
10:28:43 125  	    ps.set_id IS NULL and
10:28:43 126  	    rownum <= in_set_maximum
10:28:43 127  	  ;
10:28:43 128  	  COMMIT;
10:28:43 129  	  RETURN v_set_id;
10:28:43 130  END;
10:28:43 131  --------------------------------------------------------------------------------
10:28:43 132  FUNCTION RETREIVE_TRANSFER_SET
10:28:43 133  	  (
10:28:43 134  	      in_set_id core_owner.polling_sync.set_id%type)
10:28:43 135  	  RETURN sys_refcursor
10:28:43 136  IS
10:28:43 137  	  v_refcursor sys_refcursor;
10:28:43 138  BEGIN
10:28:43 139  	  UPDATE
10:28:43 140  	      core_owner.polling_sync ps
10:28:43 141  	  SET
10:28:43 142  	      ps.last_send_date = sysdate,
10:28:43 143  	      ps.num_calls = ps.num_calls + 1
10:28:43 144  	  WHERE
10:28:43 145  	      ps.set_id = in_set_id ;
10:28:43 146  	  OPEN v_refcursor FOR
10:28:43 147  	  SELECT
10:28:43 148  	      ps.set_id,
10:28:43 149  	      ps.group_id,
10:28:43 150  	      ps.event_type,
10:28:43 151  	      ps.event_date
10:28:43 152  	  FROM
10:28:43 153  	      core_owner.polling_sync ps
10:28:43 154  	  WHERE
10:28:43 155  	      ps.set_id = in_set_id
10:28:43 156  	  AND ps.group_id IS NOT NULL ;
10:28:43 157  	  RETURN v_refcursor;
10:28:43 158  END;
10:28:43 159  --------------------------------------------------------------------------------
10:28:43 160  PROCEDURE GET_TRANSFER_SET
10:28:43 161  	  (
10:28:43 162  	      in_set_maximum NUMBER,
10:28:43 163  	      in_max_retries NUMBER,
10:28:43 164  	      out_refcursor OUT sys_refcursor)
10:28:43 165  IS
10:28:43 166  	  v_set_id core_owner.polling_sync.set_id%type;
10:28:43 167  BEGIN
10:28:43 168  	  /* Look for previously sent but unconfirmed sets and
10:28:43 169  	  send again until max_retries calls */
10:28:43 170  	  FOR x IN
10:28:43 171  	  (
10:28:43 172  	      SELECT
10:28:43 173  		  ps.set_id,
10:28:43 174  		  COUNT( *) set_size
10:28:43 175  	      FROM
10:28:43 176  		  core_owner.polling_sync ps
10:28:43 177  	      WHERE
10:28:43 178  		  ps.event_date > sysdate - 14
10:28:43 179  	      AND ps.confirm_date IS NULL
10:28:43 180  	      AND ps.last_send_date IS NOT NULL
10:28:43 181  	      AND ps.num_calls < in_max_retries
10:28:43 182  	      GROUP BY
10:28:43 183  		  ps.set_id
10:28:43 184  	      ORDER BY
10:28:43 185  		  ps.set_id
10:28:43 186  	  )
10:28:43 187  	  LOOP
10:28:43 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
10:28:43 189  	      RETURN;
10:28:43 190  	  END LOOP;
10:28:43 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
10:28:43 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
10:28:43 193  	  RETURN;
10:28:43 194  END;
10:28:43 195  --------------------------------------------------------------------------------
10:28:43 196  PROCEDURE CONFIRM_TRANSFER_SET
10:28:43 197  	  (
10:28:43 198  	      in_set_id core_owner.polling_sync.set_id%type)
10:28:43 199  IS
10:28:43 200  	  v_unconfirmable EXCEPTION;
10:28:43 201  BEGIN
10:28:43 202  	  UPDATE
10:28:43 203  	      core_owner.polling_sync ps
10:28:43 204  	  SET
10:28:43 205  	      ps.confirm_date = systimestamp
10:28:43 206  	  WHERE
10:28:43 207  	      ps.set_id = in_set_id
10:28:43 208  	  AND ps.confirm_date IS NULL ;
10:28:43 209  	  IF(sql%rowcount < 1) THEN
10:28:43 210  	      raise v_unconfirmable;
10:28:43 211  	  END IF;
10:28:43 212  END;
10:28:43 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
10:28:43 214  IS
10:28:43 215  BEGIN
10:28:43 216  	  UPDATE POLLING_SYNC_LASTRUN
10:28:43 217  	  SET last_run = current_timestamp;
10:28:43 218  	  IF ( sql%rowcount = 0 )
10:28:43 219  	  THEN
10:28:43 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
10:28:43 221  	  END if;
10:28:43 222  	  COMMIT;
10:28:43 223  END;
10:28:43 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
10:28:43 225  IS
10:28:43 226  BEGIN
10:28:43 227  	  SELECT LAST_RUN INTO ts
10:28:43 228  	  FROM POLLING_SYNC_LASTRUN
10:28:43 229  	  WHERE ROWNUM < 2;
10:28:43 230  EXCEPTION
10:28:43 231  	WHEN NO_DATA_FOUND
10:28:43 232  	THEN
10:28:43 233  	  ts := current_timestamp;
10:28:43 234  END;
10:28:43 235  END PROCS_POLLING_SYNC;
10:28:43 236  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_product.sql
Compiling body for procs_product.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V24" AS
10:28:43   2  
10:28:43   3  PROCEDURE GET_PRODUCTS (
10:28:43   4  /*
10:28:43   5  Throws exceptions:
10:28:43   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43   7  */
10:28:43   8  	in_status_id   IN  NUMBER,
10:28:43   9  	out_result_set OUT SYS_REFCURSOR
10:28:43  10  ) AS
10:28:43  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
10:28:43  12  BEGIN
10:28:43  13  	OPEN out_result_set FOR
10:28:43  14  	SELECT
10:28:43  15  	  PRODUCT.ID,
10:28:43  16  	  PRODUCT.NAME,
10:28:43  17  	  PRODUCT.TAX_CATEGORY_ID,
10:28:43  18  	  PRODUCT.ENTITLEMENT,
10:28:43  19  	  PRODUCT.IS_SHAREABLE,
10:28:43  20  	  PRODUCT.CREATE_DATE,
10:28:43  21  	  PRODUCT.CREATED_BY,
10:28:43  22  	  PRODUCT.PRODUCT_STATUS_ID,
10:28:43  23  	  PRODUCT.DEFAULT_VAT_RATE
10:28:43  24  	FROM
10:28:43  25  	  PRODUCT
10:28:43  26  	WHERE
10:28:43  27  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
10:28:43  28  EXCEPTION
10:28:43  29  WHEN OTHERS THEN
10:28:43  30  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43  31  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43  32  END GET_PRODUCTS;
10:28:43  33  
10:28:43  34  /******************************************************************************/
10:28:43  35  
10:28:43  36  PROCEDURE GET_PRODUCT_BY_ID (
10:28:43  37  	in_product_id  IN NUMBER,
10:28:43  38  	out_result_set OUT SYS_REFCURSOR
10:28:43  39  ) AS
10:28:43  40  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
10:28:43  41  -- VARIABLES
10:28:43  42  temp_product_id NUMBER;
10:28:43  43  -- EXCEPTIONS
10:28:43  44  BAD_PRODUCT_ID EXCEPTION;
10:28:43  45  BEGIN
10:28:43  46  
10:28:43  47  	BEGIN
10:28:43  48  	  SELECT
10:28:43  49  	    PRODUCT.ID into temp_product_id
10:28:43  50  	  FROM
10:28:43  51  	    PRODUCT
10:28:43  52  	  WHERE
10:28:43  53  	    PRODUCT.ID = in_product_id;
10:28:43  54  	  EXCEPTION
10:28:43  55  	    WHEN NO_DATA_FOUND THEN
10:28:43  56  	      RAISE BAD_PRODUCT_ID;
10:28:43  57  	END;
10:28:43  58  
10:28:43  59  	OPEN out_result_set FOR
10:28:43  60  	SELECT
10:28:43  61  	  PRODUCT.ID,
10:28:43  62  	  PRODUCT.NAME,
10:28:43  63  	  PRODUCT.TAX_CATEGORY_ID,
10:28:43  64  	  PRODUCT.ENTITLEMENT,
10:28:43  65  	  PRODUCT.IS_SHAREABLE,
10:28:43  66  	  PRODUCT.CREATE_DATE,
10:28:43  67  	  PRODUCT.CREATED_BY,
10:28:43  68  	  PRODUCT.PRODUCT_STATUS_ID,
10:28:43  69  	  PRODUCT.DEFAULT_VAT_RATE
10:28:43  70  	FROM
10:28:43  71  	  PRODUCT
10:28:43  72  	WHERE
10:28:43  73  	  PRODUCT.ID = in_product_id;
10:28:43  74  
10:28:43  75  EXCEPTION
10:28:43  76  WHEN BAD_PRODUCT_ID THEN
10:28:43  77  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43  78  	  SPROC_NAME, 'No such product');
10:28:43  79  WHEN OTHERS THEN
10:28:43  80  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43  81  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43  82  END GET_PRODUCT_BY_ID;
10:28:43  83  
10:28:43  84  /******************************************************************************/
10:28:43  85  
10:28:43  86  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
10:28:43  87  	in_line_item_id IN NUMBER,
10:28:43  88  	out_result_set	OUT SYS_REFCURSOR
10:28:43  89  ) AS
10:28:43  90  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
10:28:43  91  -- VARIABLES
10:28:43  92  temp_line_item_id NUMBER;
10:28:43  93  -- EXCEPTIONS
10:28:43  94  BAD_LINE_ITEM_ID EXCEPTION;
10:28:43  95  BEGIN
10:28:43  96  
10:28:43  97  	BEGIN
10:28:43  98  	  SELECT
10:28:43  99  	    LINE_ITEM.ID into temp_line_item_id
10:28:43 100  	  FROM
10:28:43 101  	    LINE_ITEM
10:28:43 102  	  WHERE
10:28:43 103  	    LINE_ITEM.ID = in_line_item_id;
10:28:43 104  	  EXCEPTION
10:28:43 105  	    WHEN NO_DATA_FOUND THEN
10:28:43 106  	      RAISE BAD_LINE_ITEM_ID;
10:28:43 107  	END;
10:28:43 108  
10:28:43 109  	OPEN out_result_set FOR
10:28:43 110  	SELECT
10:28:43 111  	  PRODUCT_OFFERING.ID,
10:28:43 112  	  PRODUCT_OFFERING.PRODUCT_ID,
10:28:43 113  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
10:28:43 114  	  PRODUCT_OFFERING.UNIT_PRICE,
10:28:43 115  	  PRODUCT_OFFERING.QUANTITY,
10:28:43 116  	  PRODUCT_OFFERING.CREATE_DATE,
10:28:43 117  	  PRODUCT_OFFERING.CREATED_BY,
10:28:43 118  	  PRODUCT.ID P_ID,
10:28:43 119  	  PRODUCT.NAME,
10:28:43 120  	  PRODUCT.TAX_CATEGORY_ID,
10:28:43 121  	  PRODUCT.ENTITLEMENT,
10:28:43 122  	  PRODUCT.IS_SHAREABLE,
10:28:43 123  	  PRODUCT.PRODUCT_STATUS_ID,
10:28:43 124  	  PRODUCT.DEFAULT_VAT_RATE
10:28:43 125  	FROM
10:28:43 126  	  PRODUCT_OFFERING
10:28:43 127  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
10:28:43 128  	  INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:28:43 129  	WHERE
10:28:43 130  	  LINE_ITEM.ID = in_line_item_id;
10:28:43 131  
10:28:43 132  EXCEPTION
10:28:43 133  WHEN BAD_LINE_ITEM_ID THEN
10:28:43 134  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 135  	  SPROC_NAME, 'No such line item');
10:28:43 136  WHEN OTHERS THEN
10:28:43 137  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 138  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 139  END GET_PRD_OFFERING_BY_LINE_IT_ID;
10:28:43 140  
10:28:43 141  
10:28:43 142  /******************************************************************************/
10:28:43 143  
10:28:43 144  PROCEDURE GET_PRD_OFFERING_BY_ID (
10:28:43 145  	in_product_offering_id IN NUMBER,
10:28:43 146  	out_result_set	OUT SYS_REFCURSOR
10:28:43 147  ) AS
10:28:43 148  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
10:28:43 149  BEGIN
10:28:43 150  	OPEN out_result_set FOR
10:28:43 151  	SELECT
10:28:43 152  	  PRODUCT_OFFERING.ID,
10:28:43 153  	  PRODUCT_OFFERING.PRODUCT_ID,
10:28:43 154  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
10:28:43 155  	  PRODUCT_OFFERING.UNIT_PRICE,
10:28:43 156  	  PRODUCT_OFFERING.QUANTITY,
10:28:43 157  	  PRODUCT_OFFERING.CREATE_DATE,
10:28:43 158  	  PRODUCT_OFFERING.CREATED_BY,
10:28:43 159  	  PRODUCT.ID P_ID,
10:28:43 160  	  PRODUCT.NAME,
10:28:43 161  	  PRODUCT.TAX_CATEGORY_ID,
10:28:43 162  	  PRODUCT.ENTITLEMENT,
10:28:43 163  	  PRODUCT.IS_SHAREABLE,
10:28:43 164  	  PRODUCT.DEFAULT_VAT_RATE,
10:28:43 165  	  PRODUCT.PRODUCT_STATUS_ID,
10:28:43 166  	  PRODUCT.DEFAULT_VAT_RATE
10:28:43 167  	FROM
10:28:43 168  	    PRODUCT_OFFERING
10:28:43 169  	    INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:28:43 170  	WHERE
10:28:43 171  	  PRODUCT_OFFERING.ID = in_product_offering_id;
10:28:43 172  
10:28:43 173  EXCEPTION
10:28:43 174  WHEN OTHERS THEN
10:28:43 175  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 176  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 177  END GET_PRD_OFFERING_BY_ID;
10:28:43 178  
10:28:43 179  /******************************************************************************/
10:28:43 180  
10:28:43 181  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
10:28:43 182  	in_product_offering_id IN NUMBER,
10:28:43 183  	out_result_set	       OUT SYS_REFCURSOR
10:28:43 184  ) AS
10:28:43 185  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
10:28:43 186  -- VARIABLES
10:28:43 187  temp_product_offering_id NUMBER;
10:28:43 188  -- EXCEPTIONS
10:28:43 189  BAD_PRODUCT_OFFERING_ID EXCEPTION;
10:28:43 190  BEGIN
10:28:43 191  
10:28:43 192  	BEGIN
10:28:43 193  	  SELECT
10:28:43 194  	    PRODUCT_OFFERING.ID into temp_product_offering_id
10:28:43 195  	  FROM
10:28:43 196  	    PRODUCT_OFFERING
10:28:43 197  	  WHERE
10:28:43 198  	    PRODUCT_OFFERING.ID = in_product_offering_id;
10:28:43 199  	  EXCEPTION
10:28:43 200  	    WHEN NO_DATA_FOUND THEN
10:28:43 201  	      RAISE BAD_PRODUCT_OFFERING_ID;
10:28:43 202  	END;
10:28:43 203  
10:28:43 204  	OPEN out_result_set FOR
10:28:43 205  	SELECT
10:28:43 206  	  DISCOUNT.ID,
10:28:43 207  	  DISCOUNT.NAME,
10:28:43 208  	  DISCOUNT.FIXED_AMOUNT,
10:28:43 209  	  DISCOUNT.PERCENT_AMOUNT,
10:28:43 210  	  DISCOUNT.DISCOUNT_TYPE_ID,
10:28:43 211  	  DISCOUNT.CREATE_DATE,
10:28:43 212  	  DISCOUNT.CREATED_BY,
10:28:43 213  	  DISCOUNT.DESCRIPTION
10:28:43 214  	FROM
10:28:43 215  	  DISCOUNT
10:28:43 216  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
10:28:43 217  	WHERE
10:28:43 218  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
10:28:43 219  
10:28:43 220  EXCEPTION
10:28:43 221  WHEN BAD_PRODUCT_OFFERING_ID THEN
10:28:43 222  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:43 223  	  SPROC_NAME, 'No such product offering');
10:28:43 224  WHEN OTHERS THEN
10:28:43 225  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:43 226  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:43 227  END GET_PRODUCT_OFFERING_DISCOUNTS;
10:28:43 228  
10:28:43 229  END PROCS_PRODUCT_V24;
10:28:43 230  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_reporting.sql
Compiling body for procs_reporting.sql
10:28:43 SQL> CREATE OR REPLACE
10:28:43   2  PACKAGE BODY PROCS_REPORTING AS
10:28:43   3  
10:28:43   4  ----
10:28:43   5  --------------------------------------------------------------------------------
10:28:43   6  ----
10:28:43   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43   8  	  is
10:28:43   9  	  begin
10:28:43  10  	      open out_cursor for
10:28:43  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
10:28:43  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
10:28:43  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
10:28:43  14  			,c.create_date, c.update_date
10:28:43  15  		  from charge c
10:28:43  16  		      ,charge_status cs
10:28:43  17  		      ,instrument_type it
10:28:43  18  		      ,ids
10:28:43  19  		  where c.id = ids.id
10:28:43  20  		    and c.charge_status_id = cs.id
10:28:43  21  		    and c.instrument_type_id = it.id
10:28:43  22  	      ;
10:28:43  23  	  end;
10:28:43  24  ----
10:28:43  25  --------------------------------------------------------------------------------
10:28:43  26  ----
10:28:43  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43  28  	  is
10:28:43  29  	  begin
10:28:43  30  	      open out_cursor for
10:28:43  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
10:28:43  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
10:28:43  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date, l.grace_start_date, l.grace_end_date
10:28:43  35  		  from license l
10:28:43  36  		      ,license_status ls
10:28:43  37  		      ,ids
10:28:43  38  		  where l.id = ids.id
10:28:43  39  		    and l.license_status_id = ls.id
10:28:43  40  	      ;
10:28:43  41  	  end;
10:28:43  42  ----
10:28:43  43  --------------------------------------------------------------------------------
10:28:43  44  ----
10:28:43  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43  46  	  is
10:28:43  47  	  begin
10:28:43  48  	      open out_cursor for
10:28:43  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
10:28:43  50  		  select
10:28:43  51  		    i.id invoice_id,
10:28:43  52  		    i.create_date,
10:28:43  53  		    i.update_date,
10:28:43  54  		    i.invoice_status_id,
10:28:43  55  		    istat.value invoice_status,
10:28:43  56  		    NVL(
10:28:43  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
10:28:43  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
10:28:43  59  		    ) offer_chain_id
10:28:43  60  		  from	   invoice i
10:28:43  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
10:28:43  62  		      join ids			on ids.id = i.id
10:28:43  63  		  where 1 = 1
10:28:43  64  	      ;
10:28:43  65  	  end;
10:28:43  66  ----
10:28:43  67  --------------------------------------------------------------------------------
10:28:43  68  ----
10:28:43  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43  70  	  is
10:28:43  71  	  begin
10:28:43  72  	      open out_cursor for
10:28:43  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
10:28:43  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
10:28:43  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
10:28:43  76  		  from line_item li
10:28:43  77  		    , ids
10:28:43  78  		  where li.id = ids.id
10:28:43  79  	      ;
10:28:43  80  	  end;
10:28:43  81  ----
10:28:43  82  --------------------------------------------------------------------------------
10:28:43  83  ----
10:28:43  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43  85  	  is
10:28:43  86  	  begin
10:28:43  87  	      open out_cursor for
10:28:43  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
10:28:43  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
10:28:43  91  			,a.instrument_id, a.tax_exempt_id
10:28:43  92  			-- need system category??
10:28:43  93  		  from account a
10:28:43  94  		      ,account_status astat
10:28:43  95  		      ,instrument_type it
10:28:43  96  		      , ids
10:28:43  97  		  where a.id = ids.id
10:28:43  98  		    and astat.id = a.account_status_id
10:28:43  99  		    and a.instrument_type_id = it.id(+)
10:28:43 100  	      ;
10:28:43 101  	  end;
10:28:43 102  ----
10:28:43 103  --------------------------------------------------------------------------------
10:28:43 104  ----
10:28:43 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 106  	  is
10:28:43 107  	  begin
10:28:43 108  	      open out_cursor for
10:28:43 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
10:28:43 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
10:28:43 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
10:28:43 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
10:28:43 114  		  from subscription s
10:28:43 115  		      ,subscription_status ss
10:28:43 116  		      ,subscription_cancel_reason sct
10:28:43 117  		      ,instrument_type it
10:28:43 118  		      , ids
10:28:43 119  		  where s.id = ids.id
10:28:43 120  		    and ss.id = s.subscription_status_id
10:28:43 121  		    and s.instrument_type_id = it.id
10:28:43 122  		    and sct.id(+) = s.sct_id
10:28:43 123  	      ;
10:28:43 124  	  end;
10:28:43 125  ----
10:28:43 126  --------------------------------------------------------------------------------
10:28:43 127  ----
10:28:43 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 129  	  is
10:28:43 130  	  begin
10:28:43 131  	      open out_cursor for
10:28:43 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 133  		  select t.id transaction_id, t.transaction_amount
10:28:43 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
10:28:43 135  			,t.create_date, t.update_date, t.is_settled
10:28:43 136  		  from transaction t
10:28:43 137  		      ,transaction_status ts
10:28:43 138  		      , ids
10:28:43 139  		  where t.id = ids.id
10:28:43 140  		    and t.transaction_status_id = ts.id
10:28:43 141  	      ;
10:28:43 142  	  end;
10:28:43 143  ----
10:28:43 144  --------------------------------------------------------------------------------
10:28:43 145  ----
10:28:43 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 147  	  is
10:28:43 148  	  begin
10:28:43 149  	      open out_cursor for
10:28:43 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
10:28:43 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
10:28:43 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
10:28:43 154  			,oc.billing_source_id, bs.name billing_source_name
10:28:43 155  			,oc.is_seat_license,oc.group_account_type_id
10:28:43 156  		  from offer_chain oc
10:28:43 157  		      , offer_chain_status ocs
10:28:43 158  		      , ids
10:28:43 159  		      , vendor_source vs
10:28:43 160  		      , billing_source bs
10:28:43 161  		  where oc.id = ids.id
10:28:43 162  		    and oc.offer_chain_status_id = ocs.id
10:28:43 163  		    and oc.vendor_source_id = vs.id
10:28:43 164  		    and oc.billing_source_id = bs.id
10:28:43 165  	      ;
10:28:43 166  	  end;
10:28:43 167  ----
10:28:43 168  --------------------------------------------------------------------------------
10:28:43 169  ----
10:28:43 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 171  	  is
10:28:43 172  	  begin
10:28:43 173  	      open out_cursor for
10:28:43 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
10:28:43 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
10:28:43 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
10:28:43 177  		  from offer_offer_chain ooc
10:28:43 178  		  , ids
10:28:43 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
10:28:43 180  	      ;
10:28:43 181  	  end;
10:28:43 182  ----
10:28:43 183  --------------------------------------------------------------------------------
10:28:43 184  ----
10:28:43 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 186  	  is
10:28:43 187  	  begin
10:28:43 188  	      open out_cursor for
10:28:43 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
10:28:43 191  		  from offer o
10:28:43 192  		      ,offer_status os
10:28:43 193  		      , ids
10:28:43 194  		  where o.id = ids.id
10:28:43 195  		    and o.offer_status_id = os.id
10:28:43 196  	      ;
10:28:43 197  	  end;
10:28:43 198  ----
10:28:43 199  --------------------------------------------------------------------------------
10:28:43 200  ----
10:28:43 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 202  	  is
10:28:43 203  	  begin
10:28:43 204  	      open out_cursor for
10:28:43 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
10:28:43 207  			 ,gc.expiration_date, gc.purchase_date
10:28:43 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
10:28:43 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
10:28:43 210  			 ,recipient_address_id
10:28:43 211  			 ,redeemer_address_id
10:28:43 212  			 ,recipient_notify_date
10:28:43 213  			 ,recipient_name
10:28:43 214  			 ,redemption_date
10:28:43 215  			 ,recipient_email
10:28:43 216  		  from gift_certificate gc
10:28:43 217  		      ,gift_certificate_status gcs
10:28:43 218  		      , ids
10:28:43 219  		  where gc.id = ids.id
10:28:43 220  		    and gc.gift_certificate_status_id = gcs.id
10:28:43 221  	      ;
10:28:43 222  	  end;
10:28:43 223  ----
10:28:43 224  --------------------------------------------------------------------------------
10:28:43 225  ----
10:28:43 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 227  	  is
10:28:43 228  	  begin
10:28:43 229  	      open out_cursor for
10:28:43 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
10:28:43 232  		  from product_offering po
10:28:43 233  		  , ids
10:28:43 234  		  where po.id = ids.id
10:28:43 235  	      ;
10:28:43 236  	  end;
10:28:43 237  ----
10:28:43 238  --------------------------------------------------------------------------------
10:28:43 239  ----
10:28:43 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 241  	  is
10:28:43 242  	  begin
10:28:43 243  	      open out_cursor for
10:28:43 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 245  		  select p.id product_id, p.name, p.entitlement, p.is_shareable, p.tax_category_id, p.product_status_id, ps.value product_status
10:28:43 246  			,p.create_date
10:28:43 247  		  from product p
10:28:43 248  		      ,product_status ps
10:28:43 249  		      , ids
10:28:43 250  		  where p.id = ids.id
10:28:43 251  		    and p.product_status_id = ps.id
10:28:43 252  	      ;
10:28:43 253  	  end;
10:28:43 254  
10:28:43 255  
10:28:43 256  ----
10:28:43 257  --------------------------------------------------------------------------------
10:28:43 258  ----
10:28:43 259  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 260  	  is
10:28:43 261  	  begin
10:28:43 262  	      open out_cursor for
10:28:43 263  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
10:28:43 264  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
10:28:43 265  		  from offer_product_offering opo
10:28:43 266  		  , ids
10:28:43 267  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
10:28:43 268  	      ;
10:28:43 269  	  end;
10:28:43 270  ----
10:28:43 271  --------------------------------------------------------------------------------
10:28:43 272  ----
10:28:43 273  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 274  	  is
10:28:43 275  	  begin
10:28:43 276  	      open out_cursor for
10:28:43 277  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
10:28:43 278  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
10:28:43 279  		  from discount_product_offering dpo
10:28:43 280  		  , ids
10:28:43 281  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
10:28:43 282  	      ;
10:28:43 283  	  end;
10:28:43 284  ----
10:28:43 285  --------------------------------------------------------------------------------
10:28:43 286  ----
10:28:43 287  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 288  	  is
10:28:43 289  	  begin
10:28:43 290  	      open out_cursor for
10:28:43 291  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 292  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
10:28:43 293  			,d.discount_type_id, dt.value discount_type, d.create_date
10:28:43 294  		  from discount d
10:28:43 295  		      ,discount_type dt
10:28:43 296  		      , ids
10:28:43 297  		  where d.id = ids.id
10:28:43 298  		    and d.discount_type_id = dt.id
10:28:43 299  	      ;
10:28:43 300  	  end;
10:28:43 301  ----
10:28:43 302  --------------------------------------------------------------------------------
10:28:43 303  ----
10:28:43 304  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 305  	  is
10:28:43 306  	  begin
10:28:43 307  	      open out_cursor for
10:28:43 308  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 309  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
10:28:43 310  		  from offer_chain_eligibility oce
10:28:43 311  		  , ids
10:28:43 312  		  where oce.id = ids.id
10:28:43 313  	      ;
10:28:43 314  	  end;
10:28:43 315  ----
10:28:43 316  --------------------------------------------------------------------------------
10:28:43 317  ----
10:28:43 318  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 319  	  is
10:28:43 320  	  begin
10:28:43 321  	      open out_cursor for
10:28:43 322  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 323  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
10:28:43 324  		  from offer_chain_meta_data ocm
10:28:43 325  		  , ids
10:28:43 326  		  where ocm.id = ids.id
10:28:43 327  	      ;
10:28:43 328  	  end;
10:28:43 329  ----
10:28:43 330  --------------------------------------------------------------------------------
10:28:43 331  ----
10:28:43 332  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 333  	  is
10:28:43 334  	  begin
10:28:43 335  	      open out_cursor for
10:28:43 336  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 337  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
10:28:43 338  		  from subscription_meta_data sm
10:28:43 339  		  , ids
10:28:43 340  		  where sm.id = ids.id
10:28:43 341  	      ;
10:28:43 342  	  end;
10:28:43 343  ----
10:28:43 344  --------------------------------------------------------------------------------
10:28:43 345  ----
10:28:43 346  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 347  	  is
10:28:43 348  	  begin
10:28:43 349  	      open out_cursor for
10:28:43 350  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 351  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
10:28:43 352  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
10:28:43 353  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
10:28:43 354  		  from credit_card cc
10:28:43 355  		      ,credit_card_type cct
10:28:43 356  		      ,credit_card_status ccs
10:28:43 357  		      , ids
10:28:43 358  		  where cc.id = ids.id
10:28:43 359  		    and cc.credit_card_type_id = cct.id(+)
10:28:43 360  		    and cc.credit_card_status_id = ccs.id
10:28:43 361  	      ;
10:28:43 362  	  end;
10:28:43 363  ----
10:28:43 364  --------------------------------------------------------------------------------
10:28:43 365  ----
10:28:43 366  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 367  	  is
10:28:43 368  	  begin
10:28:43 369  	      open out_cursor for
10:28:43 370  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 371  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
10:28:43 372  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
10:28:43 373  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
10:28:43 374  			,ta.create_date
10:28:43 375  		  from transaction_attempt ta
10:28:43 376  		      ,transaction_attempt_status tas
10:28:43 377  		      , ids
10:28:43 378  		  where ta.id = ids.id
10:28:43 379  		    and ta.transaction_attempt_status_id = tas.id
10:28:43 380  	      ;
10:28:43 381  	  end;
10:28:43 382  ----
10:28:43 383  --------------------------------------------------------------------------------
10:28:43 384  ----
10:28:43 385  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 386  	  is
10:28:43 387  	  begin
10:28:43 388  	      open out_cursor for
10:28:43 389  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 390  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
10:28:43 391  			,ia.adjustment_date, ia.create_date
10:28:43 392  		  from invoice_adjustment ia, invoice_adjustment_reason ir
10:28:43 393  		  , ids
10:28:43 394  		  where ia.id = ids.id
10:28:43 395  		  and ir.id = ia.invoice_adjustment_reason_id
10:28:43 396  	      ;
10:28:43 397  	  end;
10:28:43 398  ----
10:28:43 399  --------------------------------------------------------------------------------
10:28:43 400  ----
10:28:43 401  
10:28:43 402  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 403  	  is
10:28:43 404  	  begin
10:28:43 405  	      open out_cursor for
10:28:43 406  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 407  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
10:28:43 408  		  from line_item_adjustment lia
10:28:43 409  		  , ids
10:28:43 410  		  where lia.id = ids.id
10:28:43 411  	      ;
10:28:43 412  	  end;
10:28:43 413  ----
10:28:43 414  --------------------------------------------------------------------------------
10:28:43 415  ----
10:28:43 416  
10:28:43 417  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 418  	  is
10:28:43 419  	  begin
10:28:43 420  	      open out_cursor for
10:28:43 421  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 422  		  select
10:28:43 423  		    tax.id tax_id,
10:28:43 424  		    ttype.code tax_type,
10:28:43 425  		    tax.calculated_amount,
10:28:43 426  		    tax.create_date,
10:28:43 427  		    tax.line_item_id,
10:28:43 428  		    tax.effective_rate,
10:28:43 429  		    tax.taxable_amount,
10:28:43 430  		    tax.tax_rule_id,
10:28:43 431  		    j.name jurisdiction_level,
10:28:43 432  		    tax.jurisdiction_name,
10:28:43 433  		    tax.jurisdiction_id,
10:28:43 434  		    tax.ext_tax_type,
10:28:43 435  		    tax.ext_result,
10:28:43 436  		    tax.imposition_type,
10:28:43 437  		    tax.imposition
10:28:43 438  		  from tax
10:28:43 439  		  , tax_type ttype
10:28:43 440  		  , jurisdiction_level j
10:28:43 441  		  , ids
10:28:43 442  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
10:28:43 443  	      ;
10:28:43 444  	  end;
10:28:43 445  ----
10:28:43 446  --------------------------------------------------------------------------------
10:28:43 447  ----
10:28:43 448  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:28:43 449  	  is
10:28:43 450  	  begin
10:28:43 451  	      open out_cursor for
10:28:43 452  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
10:28:43 453  		  select
10:28:43 454  		    tax.id tad_adjustment_id,
10:28:43 455  		    tax.tax_id tax_id,
10:28:43 456  		    tax.line_item_adjustment_id line_item_adjustment_id,
10:28:43 457  		    tax.amount tax_amount,
10:28:43 458  		    tax.create_date create_date
10:28:43 459  		  from tax_adjustment tax
10:28:43 460  		  , ids
10:28:43 461  		  where tax.id = ids.id
10:28:43 462  	      ;
10:28:43 463  	  end;
10:28:43 464  ----
10:28:43 465  --------------------------------------------------------------------------------
10:28:43 466  ----
10:28:43 467  /**/
10:28:43 468  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 469  	  BEGIN
10:28:43 470  	    OPEN OUT_CURSOR FOR
10:28:43 471  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 472  	    SELECT
10:28:43 473  		t.id rcn_ext_source_log_id
10:28:43 474  	      , t.extraction_timestamp
10:28:43 475  	      , t.report_date
10:28:43 476  	      , t.report_generation_datetime
10:28:43 477  	      , t.record_type
10:28:43 478  	      , t.report_file_name
10:28:43 479  	      , t.create_date
10:28:43 480  	      , t.created_by
10:28:43 481  	    FROM rcn_ext_source_log t, ids
10:28:43 482  	    WHERE ids.id = t.id;
10:28:43 483  	  END;
10:28:43 484  
10:28:43 485  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 486  	  BEGIN
10:28:43 487  	    OPEN OUT_CURSOR FOR
10:28:43 488  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 489  	    SELECT
10:28:43 490  		t.id rcn_cpt_svc_chg_dtl_id
10:28:43 491  	      , t.rcn_ext_source_log_id
10:28:43 492  	      , t.record_type
10:28:43 493  	      , t.category
10:28:43 494  	      , t.sub_category
10:28:43 495  	      , t.entity_type
10:28:43 496  	      , t.entity_number
10:28:43 497  	      , t.funds_transfer_inst_number
10:28:43 498  	      , t.secure_ba_number
10:28:43 499  	      , t.settlement_currency
10:28:43 500  	      , t.fee_schedule
10:28:43 501  	      , t.mop
10:28:43 502  	      , t.interchange_qualification
10:28:43 503  	      , t.fee_type_description
10:28:43 504  	      , t.action_type
10:28:43 505  	      , t.unit_quantity
10:28:43 506  	      , t.unit_fee
10:28:43 507  	      , t.amount
10:28:43 508  	      , t.percentage_rate
10:28:43 509  	      , t.total_charge
10:28:43 510  	      , t.create_date
10:28:43 511  	      , t.created_by
10:28:43 512  	    FROM rcn_cpt_service_charge_detail t, ids
10:28:43 513  	    WHERE ids.id = t.id;
10:28:43 514  	  END;
10:28:43 515  ----
10:28:43 516  --------------------------------------------------------------------------------
10:28:43 517  ----
10:28:43 518  
10:28:43 519  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 520  	  BEGIN
10:28:43 521  	    OPEN OUT_CURSOR FOR
10:28:43 522  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 523  	    SELECT
10:28:43 524  		t.id rcn_cpt_excp_dtl_id
10:28:43 525  	      , t.rcn_ext_source_log_id
10:28:43 526  	      , t.record_type
10:28:43 527  	      , t.submission_date
10:28:43 528  	      , t.pid_number
10:28:43 529  	      , t.pid_short_name
10:28:43 530  	      , t.submission_number
10:28:43 531  	      , t.record_number
10:28:43 532  	      , t.entity_type
10:28:43 533  	      , t.entity_number
10:28:43 534  	      , t.presentment_currency
10:28:43 535  	      , t.merchant_order_number
10:28:43 536  	      , t.rdfi_number
10:28:43 537  	      , t.account_number
10:28:43 538  	      , t.expiration_date
10:28:43 539  	      , t.amount
10:28:43 540  	      , t.mop
10:28:43 541  	      , t.action_code
10:28:43 542  	      , t.auth_date
10:28:43 543  	      , t.auth_code
10:28:43 544  	      , t.auth_response_code
10:28:43 545  	      , t.trace_number
10:28:43 546  	      , t.consumer_country_code
10:28:43 547  	      , t.category
10:28:43 548  	      , t.mcc
10:28:43 549  	      , t.reject_code
10:28:43 550  	      , t.submission_status
10:28:43 551  	      , t.create_date
10:28:43 552  	      , t.created_by
10:28:43 553  	    FROM rcn_cpt_exception_detail t, ids
10:28:43 554  	    WHERE ids.id = t.id;
10:28:43 555  	  END;
10:28:43 556  ----
10:28:43 557  --------------------------------------------------------------------------------
10:28:43 558  ----
10:28:43 559  
10:28:43 560  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 561  	  BEGIN
10:28:43 562  	    OPEN OUT_CURSOR FOR
10:28:43 563  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 564  	      SELECT
10:28:43 565  		t.id rcn_cpt_deposit_dtl_id
10:28:43 566  	      , t.rcn_ext_source_log_id
10:28:43 567  	      , t.record_type
10:28:43 568  	      , t.submission_date
10:28:43 569  	      , t.pid_number
10:28:43 570  	      , t.pid_short_name
10:28:43 571  	      , t.submission_number
10:28:43 572  	      , t.record_number
10:28:43 573  	      , t.entity_type
10:28:43 574  	      , t.entity_number
10:28:43 575  	      , t.presentment_currency
10:28:43 576  	      , t.merchant_order_number
10:28:43 577  	      , t.rdfi_number
10:28:43 578  	      , t.account_number
10:28:43 579  	      , t.expiration_date
10:28:43 580  	      , t.amount
10:28:43 581  	      , t.mop
10:28:43 582  	      , t.action_code
10:28:43 583  	      , t.auth_date
10:28:43 584  	      , t.auth_code
10:28:43 585  	      , t.auth_response_code
10:28:43 586  	      , t.trace_number
10:28:43 587  	      , t.consumer_country_code
10:28:43 588  	      , t.mcc
10:28:43 589  	      , t.create_date
10:28:43 590  	      , t.created_by
10:28:43 591  	      , t.fee_code
10:28:43 592  	      , t.unit_fee
10:28:43 593  	      , t.percent_fee
10:28:43 594  	      , t.total_interchange_fee
10:28:43 595  	      , t.total_assessment_fee
10:28:43 596  	      , t.other_fee
10:28:43 597  	    FROM rcn_cpt_deposit_detail t, ids
10:28:43 598  	    WHERE ids.id = t.id;
10:28:43 599  	  END;
10:28:43 600  ----
10:28:43 601  --------------------------------------------------------------------------------
10:28:43 602  ----
10:28:43 603  
10:28:43 604  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 605  	  BEGIN
10:28:43 606  	    OPEN OUT_CURSOR FOR
10:28:43 607  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 608  	    SELECT
10:28:43 609  		t.id rcn_cpt_chgbk_act_dtl_id
10:28:43 610  	      , t.rcn_ext_source_log_id
10:28:43 611  	      , t.record_type
10:28:43 612  	      , t.entity_type
10:28:43 613  	      , t.entity_number
10:28:43 614  	      , t.chargeback_amount_issuer
10:28:43 615  	      , t.prev_partial_representment
10:28:43 616  	      , t.presentment_currency
10:28:43 617  	      , t.chargeback_category
10:28:43 618  	      , t.status_flag
10:28:43 619  	      , t.sequence_number
10:28:43 620  	      , t.merchant_order_number
10:28:43 621  	      , t.account_number
10:28:43 622  	      , t.reason_code
10:28:43 623  	      , t.transaction_date
10:28:43 624  	      , t.chargeback_date
10:28:43 625  	      , t.activity_date
10:28:43 626  	      , t.chargeback_amount_action
10:28:43 627  	      , t.fee_amount
10:28:43 628  	      , t.usage_code
10:28:43 629  	      , t.mop_code
10:28:43 630  	      , t.authorization_date
10:28:43 631  	      , t.chargeback_due_date
10:28:43 632  	      , t.create_date
10:28:43 633  	      , t.created_by
10:28:43 634  	    FROM rcn_cpt_chargeback_act_detail t, ids
10:28:43 635  	    WHERE ids.id = t.id;
10:28:43 636  	  END;
10:28:43 637  ----
10:28:43 638  --------------------------------------------------------------------------------
10:28:43 639  ----
10:28:43 640  
10:28:43 641  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 642  	  BEGIN
10:28:43 643  	    OPEN OUT_CURSOR FOR
10:28:43 644  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 645  	    SELECT
10:28:43 646  		t.id rcn_pp_settlement_id
10:28:43 647  	      , t.rcn_ext_source_log_id
10:28:43 648  	      , t.transaction_id
10:28:43 649  	      , t.invoice_id
10:28:43 650  	      , t.pp_ref_id
10:28:43 651  	      , t.pp_ref_id_type
10:28:43 652  	      , t.trans_event_code
10:28:43 653  	      , t.trans_init_date
10:28:43 654  	      , t.trans_comp_date
10:28:43 655  	      , t.trans_deb_or_cred
10:28:43 656  	      , t.gross_trans_amount
10:28:43 657  	      , t.gross_trans_currency
10:28:43 658  	      , t.fee_deb_or_cred
10:28:43 659  	      , t.fee_amount
10:28:43 660  	      , t.fee_currency
10:28:43 661  	      , t.custom_field
10:28:43 662  	      , t.create_date
10:28:43 663  	      , t.created_by
10:28:43 664  	    FROM rcn_pp_settlement t, ids
10:28:43 665  	    WHERE ids.id = t.id;
10:28:43 666  	  END;
10:28:43 667  ----
10:28:43 668  --------------------------------------------------------------------------------
10:28:43 669  ----
10:28:43 670  
10:28:43 671  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 672  	  BEGIN
10:28:43 673  	    OPEN OUT_CURSOR FOR
10:28:43 674  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 675  	    SELECT
10:28:43 676  		t.id rcn_pp_dispute_id
10:28:43 677  	      , t.rcn_ext_source_log_id
10:28:43 678  	      , t.dispute_type
10:28:43 679  	      , t.claimant_name
10:28:43 680  	      , t.claimant_email
10:28:43 681  	      , t.transaction_id
10:28:43 682  	      , t.trans_date
10:28:43 683  	      , t.disputed_amount
10:28:43 684  	      , t.disputed_amount_currency
10:28:43 685  	      , t.dispute_reason
10:28:43 686  	      , t.dispute_filing_date
10:28:43 687  	      , t.dispute_status
10:28:43 688  	      , t.dispute_case_id
10:28:43 689  	      , t.invoice_id
10:28:43 690  	      , t.create_date
10:28:43 691  	      , t.created_by
10:28:43 692  	    FROM
10:28:43 693  	    rcn_pp_dispute t, ids
10:28:43 694  	    WHERE ids.id = t.id;
10:28:43 695  	  END;
10:28:43 696  ----
10:28:43 697  --------------------------------------------------------------------------------
10:28:43 698  ----
10:28:43 699  
10:28:43 700  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 701  	  BEGIN
10:28:43 702  	    OPEN OUT_CURSOR FOR
10:28:43 703  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 704  	    SELECT
10:28:43 705  		t.id rcn_pp_trans_dtl_id
10:28:43 706  	      , t.rcn_ext_source_log_id
10:28:43 707  	      , t.transaction_id
10:28:43 708  	      , t.invoice_id
10:28:43 709  	      , t.pp_ref_id
10:28:43 710  	      , t.trans_event_code
10:28:43 711  	      , t.trans_init_date
10:28:43 712  	      , t.trans_comp_date
10:28:43 713  	      , t.trans_deb_or_cred
10:28:43 714  	      , t.gross_trans_amount
10:28:43 715  	      , t.gross_trans_currency
10:28:43 716  	      , t.fee_deb_or_cred
10:28:43 717  	      , t.fee_amount
10:28:43 718  	      , t.fee_currency
10:28:43 719  	      , t.trans_status
10:28:43 720  	      , t.insurance_amount
10:28:43 721  	      , t.sales_tax_amount
10:28:43 722  	      , t.shipping_amount
10:28:43 723  	      , t.trans_subject
10:28:43 724  	      , t.trans_note
10:28:43 725  	      , t.payer_acct_id
10:28:43 726  	      , t.payer_addr_status
10:28:43 727  	      , t.item_name
10:28:43 728  	      , t.item_id
10:28:43 729  	      , t.option_1_name
10:28:43 730  	      , t.option_1_value
10:28:43 731  	      , t.option_2_name
10:28:43 732  	      , t.option_2_value
10:28:43 733  	      , t.auction_site
10:28:43 734  	      , t.auction_buyer_id
10:28:43 735  	      , t.auction_closing_date
10:28:43 736  	      , t.shipping_addr_line_1
10:28:43 737  	      , t.shipping_addr_line_2
10:28:43 738  	      , t.shipping_addr_city
10:28:43 739  	      , t.shipping_addr_state
10:28:43 740  	      , t.shipping_addr_zip
10:28:43 741  	      , t.shipping_addr_country
10:28:43 742  	      , t.custom_field
10:28:43 743  	      , t.create_date
10:28:43 744  	      , t.created_by
10:28:43 745  	    FROM rcn_pp_trans_detail t, ids
10:28:43 746  	    WHERE ids.id = t.id;
10:28:43 747  	  END;
10:28:43 748  ----
10:28:43 749  --------------------------------------------------------------------------------
10:28:43 750  ----
10:28:43 751  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 752  	  BEGIN
10:28:43 753  	    OPEN OUT_CURSOR FOR
10:28:43 754  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_AMEX_CHARGEBACK' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 755  	    SELECT
10:28:43 756  	      rac.id
10:28:43 757  	    , rac.rcn_ext_source_log_id
10:28:43 758  	    , rac.resolution
10:28:43 759  	    , rac.from_system
10:28:43 760  	    , rac.rejects_to_system
10:28:43 761  	    , rac.disputes_to_system
10:28:43 762  	    , rac.date_of_adjustment
10:28:43 763  	    , rac.date_of_charge
10:28:43 764  	    , rac.case_type
10:28:43 765  	    , rac.cb_reas_code
10:28:43 766  	    , rac.cb_amount
10:28:43 767  	    , rac.cb_adjustment_number
10:28:43 768  	    , rac.billed_amount
10:28:43 769  	    , rac.soc_amount
10:28:43 770  	    , rac.foreign_amount
10:28:43 771  	    , rac.currency
10:28:43 772  	    , rac.note1
10:28:43 773  	    , rac.note2
10:28:43 774  	    , rac.note3
10:28:43 775  	    , rac.note4
10:28:43 776  	    , rac.note5
10:28:43 777  	    , rac.note6
10:28:43 778  	    , rac.note7
10:28:43 779  	    , rac.ind_ref_number
10:28:43 780  	    , rac.create_date
10:28:43 781  	    , rac.created_by
10:28:43 782  	    , rac.update_date
10:28:43 783  	    , rac.updated_by
10:28:43 784  	    FROM rcn_amex_chargeback rac, ids
10:28:43 785  	    WHERE ids.id = rac.id;
10:28:43 786  	  END;
10:28:43 787  ----
10:28:43 788  --------------------------------------------------------------------------------
10:28:43 789  ----
10:28:43 790  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 791  	  BEGIN
10:28:43 792  	    OPEN OUT_CURSOR FOR
10:28:43 793  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 794  	    SELECT
10:28:43 795  		t.ID PAYPAL_ID
10:28:43 796  	      , ACCOUNT_ID
10:28:43 797  	      , INSTRUMENT_NAME
10:28:43 798  	      , CREATE_DATE
10:28:43 799  	      , CREATED_BY
10:28:43 800  	      , UPDATE_DATE
10:28:43 801  	      , UPDATED_BY
10:28:43 802  	      , s.value PAYPAL_STATUS
10:28:43 803  	      , STATE
10:28:43 804  	      , CITY
10:28:43 805  	      , POSTAL_CODE
10:28:43 806  	      , COUNTRY
10:28:43 807  	      , EXPIRATION_DATE
10:28:43 808  	    FROM paypal t, paypal_status s, ids
10:28:43 809  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
10:28:43 810  	  END;
10:28:43 811  ----
10:28:43 812  --------------------------------------------------------------------------------
10:28:43 813  ----
10:28:43 814  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:28:43 815  	  BEGIN
10:28:43 816  	    OPEN OUT_CURSOR FOR
10:28:43 817  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
10:28:43 818  	    SELECT
10:28:43 819  	      a.id ADDRESS_ID,
10:28:43 820  	      address1,
10:28:43 821  	      address2,
10:28:43 822  	      city,
10:28:43 823  	      state,
10:28:43 824  	      postal_code,
10:28:43 825  	      country,
10:28:43 826  	      create_date,
10:28:43 827  	      created_by,
10:28:43 828  	      update_date,
10:28:43 829  	      updated_by
10:28:43 830  	    FROM address a, ids
10:28:43 831  	    WHERE ids.id = a.id;
10:28:43 832  	  END;
10:28:43 833  ----
10:28:43 834  --------------------------------------------------------------------------------
10:28:43 835  ----
10:28:43 836  /**/
10:28:43 837  END PROCS_REPORTING;
10:28:43 838  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.10
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_reports.sql
Compiling body for procs_reports.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V24" AS
10:28:43   2  
10:28:43   3  FUNCTION GET_PRODUCT_NAMES(
10:28:43   4  	in_offer_id IN NUMBER
10:28:43   5  ) RETURN VARCHAR2 AS
10:28:43   6  var_result_names VARCHAR2(1024);
10:28:43   7  BEGIN
10:28:43   8  
10:28:43   9  	var_result_names := NULL;
10:28:43  10  
10:28:43  11  	FOR f_product IN (
10:28:43  12  	  SELECT
10:28:43  13  	    PRODUCT.NAME
10:28:43  14  	  FROM
10:28:43  15  	    PRODUCT
10:28:43  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:28:43  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:28:43  18  	  WHERE
10:28:43  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
10:28:43  20  	)
10:28:43  21  	LOOP
10:28:43  22  
10:28:43  23  	  IF var_result_names IS NULL THEN
10:28:43  24  	    var_result_names := f_product.NAME;
10:28:43  25  	  ELSE
10:28:43  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
10:28:43  27  	  END IF;
10:28:43  28  
10:28:43  29  	END LOOP;
10:28:43  30  
10:28:43  31  	RETURN var_result_names;
10:28:43  32  
10:28:43  33  END GET_PRODUCT_NAMES;
10:28:43  34  
10:28:43  35  /******************************************************************************/
10:28:43  36  
10:28:43  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
10:28:43  38  	in_start_date  IN DATE,
10:28:43  39  	in_end_date    IN DATE,
10:28:43  40  	out_result_set OUT SYS_REFCURSOR
10:28:43  41  ) AS
10:28:43  42  -- CONSTANTS
10:28:43  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:28:43  44  BEGIN
10:28:43  45  
10:28:43  46  	OPEN out_result_set FOR
10:28:43  47  	SELECT
10:28:43  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
10:28:43  49  	  "Offer_Id",
10:28:43  50  	  "New_Purchases_Num",
10:28:43  51  	  "Number_Of_renewals",
10:28:43  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
10:28:43  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
10:28:43  54  	FROM (
10:28:43  55  	  SELECT
10:28:43  56  	    "Offer_Id",
10:28:43  57  	    "Number_Of_renewals",
10:28:43  58  	    "New_Purchases_Num"
10:28:43  59  	  FROM (
10:28:43  60  	    SELECT
10:28:43  61  	      OFFER.ID as "Offer_Id",
10:28:43  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
10:28:43  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
10:28:43  64  	    FROM
10:28:43  65  	      OFFER
10:28:43  66  	  )
10:28:43  67  	  WHERE
10:28:43  68  	    "New_Purchases_Num" > 0
10:28:43  69  	    OR "Number_Of_renewals" > 0
10:28:43  70  	);
10:28:43  71  
10:28:43  72  	/*
10:28:43  73  	OPEN out_result_set FOR
10:28:43  74  	SELECT
10:28:43  75  	  "Product_Names",
10:28:43  76  	  "Offer_Id",
10:28:43  77  	  "New_Purchases_Num",
10:28:43  78  	  "Number_Of_renewals",
10:28:43  79  	  "Total_Dollar_Value",
10:28:43  80  	  "Unique_Purchasers_num"
10:28:43  81  	FROM (
10:28:43  82  	  SELECT
10:28:43  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
10:28:43  84  	    offer.id as "Offer_Id",
10:28:43  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
10:28:43  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
10:28:43  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
10:28:43  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
10:28:43  89  	  FROM
10:28:43  90  	    OFFER
10:28:43  91  	)
10:28:43  92  	WHERE
10:28:43  93  	  "New_Purchases_Num" > 0
10:28:43  94  	  OR "Number_Of_renewals" > 0
10:28:43  95  	  OR "Total_Dollar_Value" > 0
10:28:43  96  	  OR "Unique_Purchasers_num" > 0;
10:28:43  97  	*/
10:28:43  98  
10:28:43  99  END GET_FULL_FLASH_REPORT_PURCH;
10:28:43 100  
10:28:43 101  /******************************************************************************/
10:28:43 102  
10:28:43 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
10:28:43 104  	in_offer_id	       IN NUMBER,
10:28:43 105  	in_start_date	       IN DATE,
10:28:43 106  	in_end_date	       IN DATE,
10:28:43 107  	out_new_purchasers_num OUT NUMBER,
10:28:43 108  	out_renewals_num       OUT NUMBER,
10:28:43 109  	out_product_names      OUT VARCHAR2,
10:28:43 110  	out_total_dollar_value OUT NUMBER,
10:28:43 111  	out_unique_purchasers  OUT NUMBER
10:28:43 112  ) AS
10:28:43 113  -- CONSTANTS
10:28:43 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:28:43 115  BEGIN
10:28:43 116  
10:28:43 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
10:28:43 118  
10:28:43 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
10:28:43 120  	  in_offer_id,
10:28:43 121  	  in_start_date,
10:28:43 122  	  in_end_date
10:28:43 123  	);
10:28:43 124  
10:28:43 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
10:28:43 126  	  in_offer_id,
10:28:43 127  	  in_start_date,
10:28:43 128  	  in_end_date
10:28:43 129  	);
10:28:43 130  
10:28:43 131  	out_renewals_num := FLR_RENEWALS_NUM(
10:28:43 132  	  in_offer_id,
10:28:43 133  	  in_start_date,
10:28:43 134  	  in_end_date
10:28:43 135  	);
10:28:43 136  
10:28:43 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
10:28:43 138  	  in_offer_id,
10:28:43 139  	  in_start_date,
10:28:43 140  	  in_end_date
10:28:43 141  	);
10:28:43 142  
10:28:43 143  END GET_FLASH_REPORT_PURCHASES;
10:28:43 144  
10:28:43 145  /******************************************************************************/
10:28:43 146  
10:28:43 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
10:28:43 148  	in_offer_id	       IN NUMBER,
10:28:43 149  	in_start_date	       IN DATE,
10:28:43 150  	in_end_date	       IN DATE
10:28:43 151  ) RETURN NUMBER AS
10:28:43 152  -- CONSTANTS
10:28:43 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:28:43 154  -- VARIABLES
10:28:43 155  var_new_purchases_num NUMBER;
10:28:43 156  BEGIN
10:28:43 157  	SELECT
10:28:43 158  	  COUNT(LICENSE.ID)
10:28:43 159  	  into
10:28:43 160  	  var_new_purchases_num
10:28:43 161  	FROM
10:28:43 162  	  LICENSE
10:28:43 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
10:28:43 164  	WHERE
10:28:43 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
10:28:43 166  	  AND LICENSE.OFFER_ID = in_offer_id
10:28:43 167  	  AND CHARGE.CHARGE_AMOUNT > 0
10:28:43 168  	  AND PROCS_CHARGE_V24.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V24.TRUE
10:28:43 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
10:28:43 170  
10:28:43 171  	RETURN var_new_purchases_num;
10:28:43 172  END FLR_NEW_PURCHASERS_NUM;
10:28:43 173  
10:28:43 174  /******************************************************************************/
10:28:43 175  
10:28:43 176  FUNCTION FLR_RENEWALS_NUM (
10:28:43 177  	in_offer_id	       IN NUMBER,
10:28:43 178  	in_start_date	       IN DATE,
10:28:43 179  	in_end_date	       IN DATE
10:28:43 180  ) RETURN NUMBER AS
10:28:43 181  -- CONSTANTS
10:28:43 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:28:43 183  -- VARIABLES
10:28:43 184  var_renewals_num NUMBER;
10:28:43 185  BEGIN
10:28:43 186  	SELECT
10:28:43 187  	  COUNT(LICENSE.ID)
10:28:43 188  	  into
10:28:43 189  	  var_renewals_num
10:28:43 190  	FROM
10:28:43 191  	  LICENSE
10:28:43 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
10:28:43 193  	WHERE
10:28:43 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
10:28:43 195  	  AND LICENSE.OFFER_ID = in_offer_id
10:28:43 196  	  AND CHARGE.CHARGE_AMOUNT > 0
10:28:43 197  	  AND PROCS_CHARGE_V24.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V24.TRUE
10:28:43 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
10:28:43 199  
10:28:43 200  	RETURN var_renewals_num;
10:28:43 201  END FLR_RENEWALS_NUM;
10:28:43 202  
10:28:43 203  /******************************************************************************/
10:28:43 204  
10:28:43 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
10:28:43 206  	in_offer_id	       IN NUMBER,
10:28:43 207  	in_start_date	       IN DATE,
10:28:43 208  	in_end_date	       IN DATE
10:28:43 209  ) RETURN NUMBER AS
10:28:43 210  var_dollar_value NUMBER(10,2);
10:28:43 211  BEGIN
10:28:43 212  	SELECT
10:28:43 213  	  SUM(CHARGE.CHARGE_AMOUNT)
10:28:43 214  	  into
10:28:43 215  	  var_dollar_value
10:28:43 216  	FROM
10:28:43 217  	  LICENSE
10:28:43 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
10:28:43 219  	WHERE
10:28:43 220  	  LICENSE.OFFER_ID = in_offer_id
10:28:43 221  	  AND CHARGE.CHARGE_AMOUNT > 0
10:28:43 222  	  AND PROCS_CHARGE_V24.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V24.TRUE
10:28:43 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
10:28:43 224  
10:28:43 225  	RETURN var_dollar_value;
10:28:43 226  END FLR_TOTAL_DOLLAR_VALUE;
10:28:43 227  
10:28:43 228  /******************************************************************************/
10:28:43 229  
10:28:43 230  FUNCTION FLR_UNIQUE_PURCHASERS (
10:28:43 231  	in_offer_id	       IN NUMBER,
10:28:43 232  	in_start_date	       IN DATE,
10:28:43 233  	in_end_date	       IN DATE
10:28:43 234  ) RETURN NUMBER AS
10:28:43 235  -- CONSTANTS
10:28:43 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:28:43 237  -- VARIABLES
10:28:43 238  var_unique_purchasers NUMBER;
10:28:43 239  BEGIN
10:28:43 240  	SELECT
10:28:43 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
10:28:43 242  	FROM
10:28:43 243  	  LICENSE
10:28:43 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
10:28:43 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:43 246  	WHERE
10:28:43 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
10:28:43 248  	  AND LICENSE.OFFER_ID = in_offer_id
10:28:43 249  	  AND CHARGE.CHARGE_AMOUNT > 0
10:28:43 250  	  AND PROCS_CHARGE_V24.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V24.TRUE
10:28:43 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
10:28:43 252  
10:28:43 253  	RETURN var_unique_purchasers;
10:28:43 254  END;
10:28:43 255  
10:28:43 256  END PROCS_REPORTS_V24;
10:28:43 257  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:43 SQL> 
10:28:43 SQL> prompt Compiling body for procs_system.sql
Compiling body for procs_system.sql
10:28:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V24" AS
10:28:43   2  
10:28:43   3  PROCEDURE INCREMENT_VERSION
10:28:43   4  /*
10:28:43   5  Throws exceptions:
10:28:43   6  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:43   7  */
10:28:43   8  AS
10:28:43   9  BEGIN
10:28:43  10  
10:28:43  11  	UPDATE SYS_VERSION SET version=version+1;
10:28:43  12  
10:28:43  13  END INCREMENT_VERSION;
10:28:43  14  
10:28:43  15  /*************************************************************/
10:28:43  16  
10:28:43  17  PROCEDURE CHECK_VERSION(
10:28:43  18  	  in_vers    IN NUMBER,
10:28:43  19  	  out_result OUT NUMBER
10:28:43  20  ) AS
10:28:43  21  	current_version NUMBER;
10:28:43  22  BEGIN
10:28:43  23  	SELECT version INTO current_version FROM SYS_VERSION;
10:28:43  24  	IF(current_version != in_vers) THEN
10:28:43  25  	  out_result := 1;
10:28:43  26  	ELSE
10:28:43  27  	  out_result := 0;
10:28:43  28  	END IF;
10:28:43  29  END CHECK_VERSION;
10:28:43  30  
10:28:43  31  END PROCS_SYSTEM_V24;
10:28:43  32  .
10:28:43 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:44 SQL> 
10:28:44 SQL> prompt Compiling body for procs_taxes.sql
Compiling body for procs_taxes.sql
10:28:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V24" AS
10:28:44   2  
10:28:44   3  PROCEDURE ADD_TAX (
10:28:44   4  	in_tax_type_id		 IN NUMBER,
10:28:44   5  	in_calculated_amount	 IN NUMBER,
10:28:44   6  	in_created_by		 IN VARCHAR2,
10:28:44   7  	in_line_item_id 	 IN NUMBER,
10:28:44   8  	in_effective_rate	 IN VARCHAR2,
10:28:44   9  	in_taxable_amount	 IN NUMBER,
10:28:44  10  	in_tax_rule_id		 IN NUMBER,
10:28:44  11  	in_jurisdiction_level_id IN NUMBER,
10:28:44  12  	in_jurisdiction_name	 IN VARCHAR2,
10:28:44  13  	in_jurisdiction_id	 IN VARCHAR2,
10:28:44  14  	in_ext_tax_type 	 IN VARCHAR2,
10:28:44  15  	in_ext_result		 IN VARCHAR2,
10:28:44  16  	in_imposition_type	 IN VARCHAR2,
10:28:44  17  	in_imposition		 IN VARCHAR2
10:28:44  18  ) AS
10:28:44  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
10:28:44  20  -- VARIABLES
10:28:44  21  var_new_tax_id	NUMBER;
10:28:44  22  temp_line_item_id NUMBER;
10:28:44  23  -- EXCEPTIONS
10:28:44  24  BAD_LINE_ITEM_ID EXCEPTION;
10:28:44  25  BEGIN
10:28:44  26  
10:28:44  27  	BEGIN
10:28:44  28  	  SELECT
10:28:44  29  	    LINE_ITEM.ID into temp_line_item_id
10:28:44  30  	  FROM
10:28:44  31  	    LINE_ITEM
10:28:44  32  	  WHERE
10:28:44  33  	    LINE_ITEM.ID = in_line_item_id;
10:28:44  34  	  EXCEPTION
10:28:44  35  	    WHEN NO_DATA_FOUND THEN
10:28:44  36  	      RAISE BAD_LINE_ITEM_ID;
10:28:44  37  	END;
10:28:44  38  
10:28:44  39  	var_new_tax_id := NULL;
10:28:44  40  
10:28:44  41  	PROCS_TAXES_CRU_V24.CREATE_TAX(
10:28:44  42  	  var_new_tax_id,
10:28:44  43  	  in_tax_type_id,
10:28:44  44  	  in_calculated_amount,
10:28:44  45  	  in_created_by,
10:28:44  46  	  in_line_item_id,
10:28:44  47  	  in_effective_rate,
10:28:44  48  	  in_taxable_amount,
10:28:44  49  	  in_tax_rule_id,
10:28:44  50  	  in_jurisdiction_level_id,
10:28:44  51  	  in_jurisdiction_name,
10:28:44  52  	  in_jurisdiction_id,
10:28:44  53  	  in_ext_tax_type,
10:28:44  54  	  in_ext_result,
10:28:44  55  	  in_imposition_type,
10:28:44  56  	  in_imposition
10:28:44  57  	);
10:28:44  58  
10:28:44  59  EXCEPTION
10:28:44  60  WHEN BAD_LINE_ITEM_ID THEN
10:28:44  61  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44  62  	  SPROC_NAME, 'No such line item');
10:28:44  63  WHEN OTHERS THEN
10:28:44  64  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44  66  END ADD_TAX;
10:28:44  67  
10:28:44  68  /******************************************************************************/
10:28:44  69  
10:28:44  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
10:28:44  71  	in_country_code IN CHAR,
10:28:44  72  	in_check_date IN DATE,
10:28:44  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V24.FALSE
10:28:44  74  ) AS
10:28:44  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
10:28:44  76  -- VARIABLES
10:28:44  77  var_countries_count NUMBER;
10:28:44  78  var_result	  NUMBER;
10:28:44  79  BEGIN
10:28:44  80  
10:28:44  81  	SELECT
10:28:44  82  	  COUNT(1) into var_countries_count
10:28:44  83  	FROM
10:28:44  84  	  TAX_COUNTRY_EXCLUSION_LIST
10:28:44  85  	WHERE
10:28:44  86  	  country_code = in_country_code
10:28:44  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
10:28:44  88  	  AND (
10:28:44  89  	    end_date is null
10:28:44  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
10:28:44  91  	  );
10:28:44  92  
10:28:44  93  	IF var_countries_count > 1 THEN
10:28:44  94  	  -- [REVU] Should not happen. DB structure error
10:28:44  95  	  var_result := GLOBAL_CONSTANTS_V24.TRUE;
10:28:44  96  	ELSIF var_countries_count = 1 THEN
10:28:44  97  	  var_result := GLOBAL_CONSTANTS_V24.TRUE;
10:28:44  98  	ELSE
10:28:44  99  	  var_result := GLOBAL_CONSTANTS_V24.FALSE;
10:28:44 100  	END IF;
10:28:44 101  
10:28:44 102  	out_is_founded := var_result;
10:28:44 103  
10:28:44 104  EXCEPTION
10:28:44 105  WHEN OTHERS THEN
10:28:44 106  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 108  END CHECK_COUNTRY_FOR_EXCLUSION;
10:28:44 109  
10:28:44 110  /******************************************************************************/
10:28:44 111  
10:28:44 112  PROCEDURE GET_TAX_CATEGORY (
10:28:44 113  	in_tax_category_id IN NUMBER,
10:28:44 114  	out_result_set	   OUT SYS_REFCURSOR
10:28:44 115  ) AS
10:28:44 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
10:28:44 117  BEGIN
10:28:44 118  
10:28:44 119  	OPEN out_result_set FOR
10:28:44 120  	SELECT
10:28:44 121  	  ID,
10:28:44 122  	  CODE,
10:28:44 123  	  DESCRIPTION
10:28:44 124  	FROM
10:28:44 125  	  TAX_CATEGORY
10:28:44 126  	WHERE
10:28:44 127  	  ID = in_tax_category_id;
10:28:44 128  
10:28:44 129  EXCEPTION
10:28:44 130  WHEN OTHERS THEN
10:28:44 131  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 133  END GET_TAX_CATEGORY;
10:28:44 134  
10:28:44 135  END PROCS_TAXES_V24;
10:28:44 136  .
10:28:44 SQL> /

Package body created.

Elapsed: 00:00:00.04
10:28:44 SQL> 
10:28:44 SQL> prompt Compiling body for procs_transaction.sql
Compiling body for procs_transaction.sql
10:28:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V24" AS
10:28:44   2  
10:28:44   3  PROCEDURE CREATE_TRANSACTION (
10:28:44   4  /*
10:28:44   5  Throws exceptions:
10:28:44   6  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44   7  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44   8  */
10:28:44   9  	in_transaction_id	  IN NUMBER,
10:28:44  10  	in_status_id		  IN NUMBER,
10:28:44  11  	in_amount		  IN NUMBER,
10:28:44  12  	in_created_by		  IN VARCHAR2,
10:28:44  13  	in_order_id		  IN VARCHAR2,
10:28:44  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE,
10:28:44  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
10:28:44  16  	out_transaction_id	  OUT NUMBER
10:28:44  17  ) AS
10:28:44  18  -- VARIABLES
10:28:44  19  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
10:28:44  20  var_transaction_count  NUMBER;
10:28:44  21  -- EXCEPTIONS
10:28:44  22  BAD_TRANSACTION_ID     EXCEPTION;
10:28:44  23  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44  24  BEGIN
10:28:44  25  
10:28:44  26  	IF in_transaction_id IS NOT NULL THEN
10:28:44  27  	  SELECT
10:28:44  28  	    COUNT(*) into var_transaction_count
10:28:44  29  	  FROM
10:28:44  30  	    TRANSACTION
10:28:44  31  	  WHERE
10:28:44  32  	    TRANSACTION.ID = in_transaction_id;
10:28:44  33  	  IF var_transaction_count > 0 THEN
10:28:44  34  	    RAISE BAD_TRANSACTION_ID;
10:28:44  35  	  END IF;
10:28:44  36  	END IF;
10:28:44  37  
10:28:44  38  	PROCS_TRANSACTION_CRU_V24.CREATE_TRANSACTION(
10:28:44  39  	  out_transaction_id	   => out_transaction_id,
10:28:44  40  	  in_transaction_id	   => in_transaction_id,
10:28:44  41  	  in_transaction_status_id => in_status_id,
10:28:44  42  	  in_transaction_amount    => in_amount,
10:28:44  43  	  in_created_by 	   => in_created_by,
10:28:44  44  	  in_order_id		   => in_order_id,
10:28:44  45  	  in_is_refund		   => in_is_refund,
10:28:44  46  	  in_transaction_type_code => in_transaction_type_code
10:28:44  47  	);
10:28:44  48  
10:28:44  49  EXCEPTION
10:28:44  50  WHEN BAD_TRANSACTION_ID THEN
10:28:44  51  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:44  52  	  SPROC_NAME, 'Transaction with given id already exists');
10:28:44  53  WHEN OTHERS THEN
10:28:44  54  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44  55  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44  56  END CREATE_TRANSACTION;
10:28:44  57  
10:28:44  58  /******************************************************************************/
10:28:44  59  
10:28:44  60  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
10:28:44  61  /*
10:28:44  62  Throws exceptions:
10:28:44  63  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44  64  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44  65  */
10:28:44  66  	in_transaction_id	   IN NUMBER,
10:28:44  67  	in_trans_attempt_status    IN NUMBER,
10:28:44  68  	in_external_status_code    IN VARCHAR2,
10:28:44  69  	in_external_status_message IN VARCHAR2,
10:28:44  70  	in_created_by		   IN VARCHAR2,
10:28:44  71  	in_ext_transaction_id	   IN VARCHAR2,
10:28:44  72  	out_transaction_attempt_id OUT NUMBER
10:28:44  73  ) AS
10:28:44  74  -- VARIABLES
10:28:44  75  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
10:28:44  76  var_transaction_create_date DATE;
10:28:44  77  var_transaction_attempt_id  NUMBER;
10:28:44  78  
10:28:44  79  -- EXCEPTIONS
10:28:44  80  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
10:28:44  81  BAD_TRANSACTION_ID       EXCEPTION;
10:28:44  82  BEGIN
10:28:44  83  
10:28:44  84  	-- Check that transaction exists
10:28:44  85  	BEGIN
10:28:44  86  	  SELECT
10:28:44  87  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
10:28:44  88  	  FROM
10:28:44  89  	    TRANSACTION
10:28:44  90  	  WHERE
10:28:44  91  	    TRANSACTION.ID = in_transaction_id;
10:28:44  92  	  EXCEPTION
10:28:44  93  	    WHEN OTHERS THEN
10:28:44  94  	      RAISE BAD_TRANSACTION_ID;
10:28:44  95  	END;
10:28:44  96  
10:28:44  97  	-- Check that transaction status is correct
10:28:44  98  	IF in_trans_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_IN_PROGRESS
10:28:44  99  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS
10:28:44 100  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_FAILED THEN
10:28:44 101  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
10:28:44 102  	END IF;
10:28:44 103  
10:28:44 104  	var_transaction_attempt_id := NULL;
10:28:44 105  	PROCS_TRANSACTION_CRU_V24.CREATE_TRANSACTION_ATTEMPT(
10:28:44 106  	  inout_transaction_attempt_id => var_transaction_attempt_id,
10:28:44 107  	  in_transaction_id	       => in_transaction_id,
10:28:44 108  	  in_external_status_code      => in_external_status_code,
10:28:44 109  	  in_external_status_message   => in_external_status_message,
10:28:44 110  	  in_created_by 	       => in_created_by,
10:28:44 111  	  in_external_transaction_id   => in_ext_transaction_id,
10:28:44 112  	  in_transaction_start_time    => var_transaction_create_date,
10:28:44 113  	  in_status_id		       => in_trans_attempt_status
10:28:44 114  	);
10:28:44 115  
10:28:44 116  	PROCS_TRANSACTION_CRU_V24.UPDATE_TRANSACTION(
10:28:44 117  	  in_transaction_id => in_transaction_id,
10:28:44 118  	  in_updated_by     => in_created_by
10:28:44 119  	);
10:28:44 120  
10:28:44 121  	out_transaction_attempt_id := var_transaction_attempt_id;
10:28:44 122  
10:28:44 123  EXCEPTION
10:28:44 124  WHEN BAD_TRANSACTION_ID THEN
10:28:44 125  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 126  	  SPROC_NAME, 'No such transaction');
10:28:44 127  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
10:28:44 128  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 129  	  SPROC_NAME, 'Bad transaction attempt status');
10:28:44 130  WHEN OTHERS THEN
10:28:44 131  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 133  END CREATE_TRANSACTION_ATTEMPT;
10:28:44 134  
10:28:44 135  /******************************************************************************/
10:28:44 136  
10:28:44 137  PROCEDURE UPDATE_TRANSACTION_STATUS (
10:28:44 138  /*
10:28:44 139  Throws exceptions:
10:28:44 140  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 141  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 142  */
10:28:44 143  	in_transaction_id	 IN NUMBER,
10:28:44 144  	in_updated_by		 IN VARCHAR2,
10:28:44 145  	in_transaction_status_id IN NUMBER
10:28:44 146  ) AS
10:28:44 147  -- VARIABLES
10:28:44 148  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
10:28:44 149  temp_transaction_id NUMBER;
10:28:44 150  temp_charge_id NUMBER;
10:28:44 151  
10:28:44 152  -- EXCEPTIONS
10:28:44 153  BAD_TRANSACTION_ID     EXCEPTION;
10:28:44 154  BAD_TRANSACTION_STATUS EXCEPTION;
10:28:44 155  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44 156  BEGIN
10:28:44 157  
10:28:44 158  	-- Check that transaction exists
10:28:44 159  	BEGIN
10:28:44 160  	  SELECT
10:28:44 161  	    TRANSACTION.ID into temp_transaction_id
10:28:44 162  	  FROM
10:28:44 163  	    TRANSACTION
10:28:44 164  	  WHERE
10:28:44 165  	    TRANSACTION.ID = in_transaction_id;
10:28:44 166  	  EXCEPTION
10:28:44 167  	    WHEN OTHERS THEN
10:28:44 168  	      RAISE BAD_TRANSACTION_ID;
10:28:44 169  	END;
10:28:44 170  
10:28:44 171  	-- Check that transaction status is correct
10:28:44 172  	IF    in_transaction_status_id != GLOBAL_STATUSES_V24.TRANSACTION_PENDING
10:28:44 173  	  AND in_transaction_status_id != GLOBAL_STATUSES_V24.TRANSACTION_CLOSED
10:28:44 174  	  AND in_transaction_status_id != GLOBAL_STATUSES_V24.TRANSACTION_CHARGEBACK
10:28:44 175  	  AND in_transaction_status_id != GLOBAL_STATUSES_V24.TRANSACTION_DECLINED THEN
10:28:44 176  	  RAISE BAD_TRANSACTION_STATUS;
10:28:44 177  	END IF;
10:28:44 178  
10:28:44 179  	PROCS_TRANSACTION_CRU_V24.UPDATE_TRANSACTION(
10:28:44 180  	  in_transaction_id	   => in_transaction_id,
10:28:44 181  	  in_updated_by 	   => in_updated_by,
10:28:44 182  	  in_transaction_status_id => in_transaction_status_id
10:28:44 183  	);
10:28:44 184  
10:28:44 185  	   -- Check that transaction exists
10:28:44 186  	BEGIN
10:28:44 187  	  SELECT
10:28:44 188  	    CHARGE.ID into temp_charge_id
10:28:44 189  	  FROM
10:28:44 190  	    CHARGE
10:28:44 191  	  WHERE
10:28:44 192  	    CHARGE.TRANSACTION_ID = in_transaction_id
10:28:44 193  	    AND rownum <= 1;
10:28:44 194  	  EXCEPTION
10:28:44 195  	    WHEN OTHERS THEN
10:28:44 196  	      RAISE BAD_TRANSACTION_ID;
10:28:44 197  	END;
10:28:44 198  
10:28:44 199  	IF  in_transaction_status_id = GLOBAL_STATUSES_V24.TRANSACTION_CHARGEBACK  OR in_transaction_status_id = GLOBAL_STATUSES_V24.TRANSACTION_DECLINED
10:28:44 200  	THEN
10:28:44 201  	  PROCS_CHARGE_V24.UPDATE_CHARGE_STATUS(temp_charge_id,GLOBAL_STATUSES_V24.CHARGEBACK_SETTLED,in_updated_by);
10:28:44 202  	END IF;
10:28:44 203  
10:28:44 204  
10:28:44 205  EXCEPTION
10:28:44 206  WHEN BAD_TRANSACTION_ID THEN
10:28:44 207  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 208  	  SPROC_NAME, 'No such transaction');
10:28:44 209  WHEN BAD_TRANSACTION_STATUS THEN
10:28:44 210  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 211  	  SPROC_NAME, 'Bad transaction status');
10:28:44 212  WHEN OTHERS THEN
10:28:44 213  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 214  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 215  END UPDATE_TRANSACTION_STATUS;
10:28:44 216  
10:28:44 217  /******************************************************************************/
10:28:44 218  
10:28:44 219  PROCEDURE UPDATE_TRANSACTION_SETTLED (
10:28:44 220  /*
10:28:44 221  Throws exceptions:
10:28:44 222  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 223  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 224  */
10:28:44 225  	in_transaction_id	 IN NUMBER,
10:28:44 226  	in_updated_by		 IN VARCHAR2,
10:28:44 227  	in_is_settled		 IN NUMBER
10:28:44 228  ) AS
10:28:44 229  -- VARIABLES
10:28:44 230  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
10:28:44 231  temp_transaction_id NUMBER;
10:28:44 232  temp_charge_id NUMBER;
10:28:44 233  
10:28:44 234  -- EXCEPTIONS
10:28:44 235  BAD_TRANSACTION_ID     EXCEPTION;
10:28:44 236  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44 237  BEGIN
10:28:44 238  
10:28:44 239  	-- Check that transaction exists
10:28:44 240  	BEGIN
10:28:44 241  	  SELECT
10:28:44 242  	    TRANSACTION.ID into temp_transaction_id
10:28:44 243  	  FROM
10:28:44 244  	    TRANSACTION
10:28:44 245  	  WHERE
10:28:44 246  	    TRANSACTION.ID = in_transaction_id;
10:28:44 247  	  EXCEPTION
10:28:44 248  	    WHEN OTHERS THEN
10:28:44 249  	      RAISE BAD_TRANSACTION_ID;
10:28:44 250  	END;
10:28:44 251  
10:28:44 252  	PROCS_TRANSACTION_CRU_V24.UPDATE_TRANSACTION(
10:28:44 253  	  in_transaction_id	   => in_transaction_id,
10:28:44 254  	  in_updated_by 	   => in_updated_by,
10:28:44 255  	  in_is_settled 	   => in_is_settled
10:28:44 256  	);
10:28:44 257  
10:28:44 258  	BEGIN
10:28:44 259  	  SELECT
10:28:44 260  	    CHARGE.ID into temp_charge_id
10:28:44 261  	  FROM
10:28:44 262  	    CHARGE
10:28:44 263  	  WHERE
10:28:44 264  	    CHARGE.TRANSACTION_ID = in_transaction_id
10:28:44 265  	    AND rownum <= 1;
10:28:44 266  	  EXCEPTION
10:28:44 267  	    WHEN OTHERS THEN
10:28:44 268  	      RAISE BAD_TRANSACTION_ID;
10:28:44 269  	END;
10:28:44 270  
10:28:44 271  	IF  in_is_settled = 1
10:28:44 272  	THEN
10:28:44 273  	  PROCS_CHARGE_V24.UPDATE_CHARGE_STATUS(temp_charge_id,GLOBAL_STATUSES_V24.CHARGE_SETTLED,in_updated_by);
10:28:44 274  	END IF;
10:28:44 275  
10:28:44 276  
10:28:44 277  EXCEPTION
10:28:44 278  WHEN BAD_TRANSACTION_ID THEN
10:28:44 279  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 280  	  SPROC_NAME, 'No such transaction');
10:28:44 281  WHEN OTHERS THEN
10:28:44 282  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 283  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 284  END UPDATE_TRANSACTION_SETTLED;
10:28:44 285  
10:28:44 286  /******************************************************************************/
10:28:44 287  
10:28:44 288  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
10:28:44 289  /*
10:28:44 290  Throws exceptions:
10:28:44 291  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 292  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 293  */
10:28:44 294  	in_transaction_attempt_id IN NUMBER,
10:28:44 295  	in_updated_by		  IN VARCHAR2
10:28:44 296  ) AS
10:28:44 297  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
10:28:44 298  -- VARIABLES
10:28:44 299  var_transaction_id NUMBER;
10:28:44 300  -- EXCEPTION
10:28:44 301  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
10:28:44 302  BEGIN
10:28:44 303  
10:28:44 304  	BEGIN
10:28:44 305  	  SELECT
10:28:44 306  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
10:28:44 307  	  FROM
10:28:44 308  	    TRANSACTION_ATTEMPT
10:28:44 309  	  WHERE
10:28:44 310  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
10:28:44 311  	  EXCEPTION
10:28:44 312  	    WHEN NO_DATA_FOUND THEN
10:28:44 313  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
10:28:44 314  	END;
10:28:44 315  
10:28:44 316  	PROCS_TRANSACTION_CRU_V24.UPDATE_TRANSACTION(
10:28:44 317  	  in_transaction_id => var_transaction_id,
10:28:44 318  	  in_updated_by     => in_updated_by
10:28:44 319  	);
10:28:44 320  
10:28:44 321  EXCEPTION
10:28:44 322  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
10:28:44 323  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 324  	  SPROC_NAME, 'No such transaction attempt');
10:28:44 325  WHEN OTHERS THEN
10:28:44 326  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 327  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 328  END UPDATE_TRNSCTN_ATTEMPT_TIME;
10:28:44 329  
10:28:44 330  /******************************************************************************/
10:28:44 331  
10:28:44 332  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
10:28:44 333  /*
10:28:44 334  Throws exceptions:
10:28:44 335  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 336  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 337  */
10:28:44 338  	in_transaction_attempt_id     IN NUMBER,
10:28:44 339  	in_transaction_attempt_status IN NUMBER
10:28:44 340  ) AS
10:28:44 341  -- VARIABLES
10:28:44 342  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
10:28:44 343  temp_transaction_attempt_id NUMBER;
10:28:44 344  
10:28:44 345  -- EXCEPTION
10:28:44 346  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
10:28:44 347  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
10:28:44 348  BEGIN
10:28:44 349  
10:28:44 350  	-- Check that transaction attempt exists
10:28:44 351  	BEGIN
10:28:44 352  	  SELECT
10:28:44 353  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
10:28:44 354  	  FROM
10:28:44 355  	    TRANSACTION_ATTEMPT
10:28:44 356  	  WHERE
10:28:44 357  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
10:28:44 358  	  EXCEPTION
10:28:44 359  	    WHEN NO_DATA_FOUND THEN
10:28:44 360  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
10:28:44 361  	END;
10:28:44 362  
10:28:44 363  	-- Check that transaction attempt is correct
10:28:44 364  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_IN_PROGRESS
10:28:44 365  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS
10:28:44 366  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_FAILED THEN
10:28:44 367  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
10:28:44 368  	END IF;
10:28:44 369  
10:28:44 370  	PROCS_TRANSACTION_CRU_V24.UPDATE_TRANSACTION_ATTEMPT(
10:28:44 371  	  in_transaction_attempt_id => in_transaction_attempt_id,
10:28:44 372  	  in_status_id		    => in_transaction_attempt_status
10:28:44 373  	);
10:28:44 374  
10:28:44 375  EXCEPTION
10:28:44 376  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
10:28:44 377  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 378  	  SPROC_NAME, 'No such transaction attempt');
10:28:44 379  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
10:28:44 380  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 381  	  SPROC_NAME, 'Bad transaction attempt status');
10:28:44 382  WHEN OTHERS THEN
10:28:44 383  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 384  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 385  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
10:28:44 386  
10:28:44 387  /******************************************************************************/
10:28:44 388  
10:28:44 389  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
10:28:44 390  /*
10:28:44 391  Throws exceptions:
10:28:44 392  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 393  */
10:28:44 394  	in_transaction_id	      IN NUMBER,
10:28:44 395  	in_transaction_attempt_status IN NUMBER,
10:28:44 396  	out_result_set		      OUT SYS_REFCURSOR
10:28:44 397  ) AS
10:28:44 398  -- VARIABLES
10:28:44 399  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
10:28:44 400  temp_transaction_id NUMBER;
10:28:44 401  -- EXCEPTIONS
10:28:44 402  BAD_TRANSACTION_ID       EXCEPTION;
10:28:44 403  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
10:28:44 404  BEGIN
10:28:44 405  
10:28:44 406  	-- Check that transaction exists
10:28:44 407  	BEGIN
10:28:44 408  	  SELECT
10:28:44 409  	    TRANSACTION.ID into temp_transaction_id
10:28:44 410  	  FROM
10:28:44 411  	    TRANSACTION
10:28:44 412  	  WHERE
10:28:44 413  	    TRANSACTION.ID = in_transaction_id;
10:28:44 414  	  EXCEPTION
10:28:44 415  	    WHEN OTHERS THEN
10:28:44 416  	      RAISE BAD_TRANSACTION_ID;
10:28:44 417  	END;
10:28:44 418  
10:28:44 419  	-- Check that transaction attempt status is correct
10:28:44 420  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_IN_PROGRESS
10:28:44 421  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS
10:28:44 422  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V24.TRANS_ATTEMPT_FAILED THEN
10:28:44 423  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
10:28:44 424  	END IF;
10:28:44 425  
10:28:44 426  	OPEN out_result_set FOR
10:28:44 427  	SELECT
10:28:44 428  	  TRANSACTION_ATTEMPT.ID,
10:28:44 429  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
10:28:44 430  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
10:28:44 431  	  TRANSACTION_ATTEMPT.CREATE_DATE,
10:28:44 432  	  TRANSACTION_ATTEMPT.CREATED_BY,
10:28:44 433  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
10:28:44 434  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
10:28:44 435  	  TRANSACTION.TRANSACTION_AMOUNT,
10:28:44 436  	  TRANSACTION.ID as "TRANSACTION_ID",
10:28:44 437  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
10:28:44 438  	FROM
10:28:44 439  	  TRANSACTION_ATTEMPT
10:28:44 440  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
10:28:44 441  	WHERE
10:28:44 442  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
10:28:44 443  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
10:28:44 444  
10:28:44 445  EXCEPTION
10:28:44 446  WHEN BAD_TRANSACTION_ID THEN
10:28:44 447  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 448  	  SPROC_NAME, 'No such transaction');
10:28:44 449  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
10:28:44 450  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 451  	  SPROC_NAME, 'Bad transaction attempt status');
10:28:44 452  WHEN OTHERS THEN
10:28:44 453  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 454  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 455  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
10:28:44 456  
10:28:44 457  /******************************************************************************/
10:28:44 458  
10:28:44 459  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
10:28:44 460  /*
10:28:44 461  Throws exceptions:
10:28:44 462  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 463  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 464  */
10:28:44 465  	in_transaction_attempt_id IN NUMBER,
10:28:44 466  	in_ext_status_code	  IN VARCHAR2,
10:28:44 467  	in_ext_status_message	  IN VARCHAR2,
10:28:44 468  	in_ext_transaction_id	  IN VARCHAR2
10:28:44 469  ) AS
10:28:44 470  -- VARIABLES
10:28:44 471  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
10:28:44 472  temp_trans_attempt_count NUMBER;
10:28:44 473  -- EXCEPTIONS
10:28:44 474  BAD_ATTEMPT_ID EXCEPTION;
10:28:44 475  BEGIN
10:28:44 476  
10:28:44 477  	SELECT
10:28:44 478  	  COUNT(*) into temp_trans_attempt_count
10:28:44 479  	FROM
10:28:44 480  	  TRANSACTION_ATTEMPT
10:28:44 481  	WHERE
10:28:44 482  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
10:28:44 483  
10:28:44 484  	IF temp_trans_attempt_count = 0 THEN
10:28:44 485  	  RAISE BAD_ATTEMPT_ID;
10:28:44 486  	END IF;
10:28:44 487  
10:28:44 488  	PROCS_TRANSACTION_CRU_V24.UPDATE_TRANSACTION_ATTEMPT(
10:28:44 489  	  in_transaction_attempt_id  => in_transaction_attempt_id,
10:28:44 490  	  in_external_status_code    => in_ext_status_code,
10:28:44 491  	  in_external_status_message => in_ext_status_message,
10:28:44 492  	  in_external_transaction_id => in_ext_transaction_id
10:28:44 493  	);
10:28:44 494  
10:28:44 495  EXCEPTION
10:28:44 496  WHEN BAD_ATTEMPT_ID THEN
10:28:44 497  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 498  	  SPROC_NAME, 'No such attempt');
10:28:44 499  WHEN OTHERS THEN
10:28:44 500  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 501  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 502  END UPDATE_TRANSACTION_ATTEMPT_INF;
10:28:44 503  
10:28:44 504  /******************************************************************************/
10:28:44 505  
10:28:44 506  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
10:28:44 507  /*
10:28:44 508  Throws exceptions:
10:28:44 509  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 510  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 511  */
10:28:44 512  	in_transaction_id IN  NUMBER,
10:28:44 513  	out_attempts_num  OUT NUMBER
10:28:44 514  ) AS
10:28:44 515  -- VARIABLES
10:28:44 516  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
10:28:44 517  temp_transaction_count NUMBER;
10:28:44 518  
10:28:44 519  -- EXCEPTIONS
10:28:44 520  BAD_TRANSACTION_ID EXCEPTION;
10:28:44 521  BEGIN
10:28:44 522  
10:28:44 523  	SELECT
10:28:44 524  	  COUNT(*) into temp_transaction_count
10:28:44 525  	FROM
10:28:44 526  	  TRANSACTION
10:28:44 527  	WHERE
10:28:44 528  	  TRANSACTION.ID = in_transaction_id;
10:28:44 529  
10:28:44 530  	IF temp_transaction_count = 0 THEN
10:28:44 531  	  RAISE BAD_TRANSACTION_ID;
10:28:44 532  	END IF;
10:28:44 533  
10:28:44 534  	SELECT
10:28:44 535  	  COUNT(*) into out_attempts_num
10:28:44 536  	FROM
10:28:44 537  	  TRANSACTION_ATTEMPT
10:28:44 538  	WHERE
10:28:44 539  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
10:28:44 540  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_FAILED;
10:28:44 541  
10:28:44 542  EXCEPTION
10:28:44 543  WHEN BAD_TRANSACTION_ID THEN
10:28:44 544  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 545  	  SPROC_NAME, 'No such transaction');
10:28:44 546  WHEN OTHERS THEN
10:28:44 547  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 549  END GET_FAILED_ATTEMPTS_NUMBER;
10:28:44 550  /******************************************************************************/
10:28:44 551  
10:28:44 552  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
10:28:44 553  /*
10:28:44 554  Throws exceptions:
10:28:44 555  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 556  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 557  */
10:28:44 558  	in_transaction_id IN  NUMBER,
10:28:44 559  	out_is_successfull  OUT NUMBER
10:28:44 560  ) AS
10:28:44 561  -- VARIABLES
10:28:44 562  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
10:28:44 563  temp_transaction_count NUMBER;
10:28:44 564  
10:28:44 565  -- EXCEPTIONS
10:28:44 566  BAD_TRANSACTION_ID EXCEPTION;
10:28:44 567  BEGIN
10:28:44 568  
10:28:44 569  	SELECT
10:28:44 570  	  COUNT(*) into temp_transaction_count
10:28:44 571  	FROM
10:28:44 572  	  TRANSACTION
10:28:44 573  	WHERE
10:28:44 574  	  TRANSACTION.ID = in_transaction_id;
10:28:44 575  
10:28:44 576  	IF temp_transaction_count = 0 THEN
10:28:44 577  	  RAISE BAD_TRANSACTION_ID;
10:28:44 578  	END IF;
10:28:44 579  
10:28:44 580  	SELECT
10:28:44 581  	  COUNT(*) into out_is_successfull
10:28:44 582  	FROM
10:28:44 583  	  TRANSACTION_ATTEMPT
10:28:44 584  	WHERE
10:28:44 585  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
10:28:44 586  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS;
10:28:44 587  
10:28:44 588  EXCEPTION
10:28:44 589  WHEN BAD_TRANSACTION_ID THEN
10:28:44 590  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 591  	  SPROC_NAME, 'No such transaction');
10:28:44 592  WHEN OTHERS THEN
10:28:44 593  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 594  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 595  END IS_TRANSACTION_SUCCESSFULL;
10:28:44 596  /******************************************************************************/
10:28:44 597  
10:28:44 598  PROCEDURE GET_TRANSACTION_AMOUNT (
10:28:44 599  /*
10:28:44 600  Throws exceptions:
10:28:44 601  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 602  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 603  */
10:28:44 604  	in_transaction_id      IN  NUMBER,
10:28:44 605  	out_transaction_amount OUT NUMBER
10:28:44 606  ) AS
10:28:44 607  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
10:28:44 608  BEGIN
10:28:44 609  
10:28:44 610  	SELECT
10:28:44 611  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
10:28:44 612  	FROM
10:28:44 613  	  TRANSACTION
10:28:44 614  	WHERE
10:28:44 615  	  TRANSACTION.ID = in_transaction_id;
10:28:44 616  
10:28:44 617  EXCEPTION
10:28:44 618  WHEN NO_DATA_FOUND THEN
10:28:44 619  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 620  	  SPROC_NAME, 'No such transaction');
10:28:44 621  WHEN OTHERS THEN
10:28:44 622  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 623  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 624  END GET_TRANSACTION_AMOUNT;
10:28:44 625  
10:28:44 626  /******************************************************************************/
10:28:44 627  
10:28:44 628  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
10:28:44 629  /*
10:28:44 630  Throws exceptions:
10:28:44 631  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 632  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 633  */
10:28:44 634  	in_charge_id   IN  NUMBER,
10:28:44 635  	out_result_set OUT SYS_REFCURSOR
10:28:44 636  ) AS
10:28:44 637  -- VARIABLES
10:28:44 638  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
10:28:44 639  temp_charge_id NUMBER;
10:28:44 640  -- EXCEPTIONS
10:28:44 641  BAD_CHARGE_ID EXCEPTION;
10:28:44 642  BEGIN
10:28:44 643  
10:28:44 644  	BEGIN
10:28:44 645  	  SELECT
10:28:44 646  	    CHARGE.ID into temp_charge_id
10:28:44 647  	  FROM
10:28:44 648  	    CHARGE
10:28:44 649  	  WHERE
10:28:44 650  	    CHARGE.ID = in_charge_id;
10:28:44 651  	  EXCEPTION
10:28:44 652  	    WHEN NO_DATA_FOUND THEN
10:28:44 653  	      RAISE BAD_CHARGE_ID;
10:28:44 654  	END;
10:28:44 655  
10:28:44 656  	OPEN out_result_set FOR
10:28:44 657  	SELECT DISTINCT
10:28:44 658  	  TRANSACTION.ID,
10:28:44 659  	  TRANSACTION.TRANSACTION_STATUS_ID,
10:28:44 660  	  TRANSACTION.CREATE_DATE,
10:28:44 661  	  TRANSACTION.TRANSACTION_AMOUNT,
10:28:44 662  	  TRANSACTION.IS_REFUND,
10:28:44 663  	  TRANSACTION.ORDER_ID
10:28:44 664  	FROM
10:28:44 665  	  CHARGE INNER JOIN TRANSACTION ON
10:28:44 666  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:28:44 667  	WHERE
10:28:44 668  	  CHARGE.ID = in_charge_id;
10:28:44 669  
10:28:44 670  EXCEPTION
10:28:44 671  WHEN BAD_CHARGE_ID THEN
10:28:44 672  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 673  	  SPROC_NAME, 'No such charge');
10:28:44 674  WHEN OTHERS THEN
10:28:44 675  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 676  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 677  END GET_TRANSACTIONS_BY_CHARGE_ID;
10:28:44 678  /******************************************************************************/
10:28:44 679  
10:28:44 680  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
10:28:44 681  /*
10:28:44 682  Throws exceptions:
10:28:44 683  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 684  */
10:28:44 685  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
10:28:44 686  	out_result_set OUT SYS_REFCURSOR
10:28:44 687  ) AS
10:28:44 688  -- VARIABLES
10:28:44 689  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
10:28:44 690  BEGIN
10:28:44 691  	OPEN out_result_set FOR
10:28:44 692  	SELECT DISTINCT
10:28:44 693  	  TRANSACTION.ID
10:28:44 694  	FROM
10:28:44 695  	  TRANSACTION
10:28:44 696  	WHERE
10:28:44 697  	  TRANSACTION.ORDER_ID = in_order_id;
10:28:44 698  
10:28:44 699  EXCEPTION
10:28:44 700  WHEN OTHERS THEN
10:28:44 701  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 702  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 703  END GET_TRANSACTION_BY_ORDER_ID;
10:28:44 704  /******************************************************************************/
10:28:44 705  
10:28:44 706  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
10:28:44 707  /*
10:28:44 708  Throws exceptions:
10:28:44 709  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 710  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 711  */
10:28:44 712  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
10:28:44 713  	out_result_set OUT SYS_REFCURSOR
10:28:44 714  ) AS
10:28:44 715  -- VARIABLES
10:28:44 716  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
10:28:44 717  temp_order_id TRANSACTION.ORDER_ID%TYPE;
10:28:44 718  -- EXCEPTIONS
10:28:44 719  BAD_ORDER_ID EXCEPTION;
10:28:44 720  BEGIN
10:28:44 721  
10:28:44 722  	--TODO BOO, REMOVE ME
10:28:44 723  	BEGIN
10:28:44 724  	  SELECT
10:28:44 725  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
10:28:44 726  	  FROM
10:28:44 727  	    TRANSACTION
10:28:44 728  	  WHERE
10:28:44 729  	    TRANSACTION.ORDER_ID = in_order_id;
10:28:44 730  	  EXCEPTION
10:28:44 731  	    WHEN NO_DATA_FOUND THEN
10:28:44 732  	      RAISE BAD_ORDER_ID;
10:28:44 733  	END;
10:28:44 734  
10:28:44 735  	OPEN out_result_set FOR
10:28:44 736  	SELECT c.ID CHARGE_ID,
10:28:44 737  	  c.CHARGE_AMOUNT,
10:28:44 738  	  c.CHARGE_STATUS_ID,
10:28:44 739  	  c.INSTRUMENT_ID,
10:28:44 740  	  c.INSTRUMENT_TYPE_ID,
10:28:44 741  	  c.INVOICE_ID,
10:28:44 742  	  t.ID TRANSACTION_ID,
10:28:44 743  	  t.IS_REFUND,
10:28:44 744  	  t.IS_SETTLED,
10:28:44 745  	  t.ORDER_ID,
10:28:44 746  	  t.TRANSACTION_AMOUNT,
10:28:44 747  	  t.TRANSACTION_STATUS_ID,
10:28:44 748  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
10:28:44 749  	  t.CREATED_BY TRANSACTION_CREATED_BY,
10:28:44 750  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
10:28:44 751  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
10:28:44 752  	FROM CHARGE c
10:28:44 753  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
10:28:44 754  	WHERE TRANSACTION_ID IN (
10:28:44 755  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
10:28:44 756  	);
10:28:44 757  
10:28:44 758  EXCEPTION
10:28:44 759  WHEN BAD_ORDER_ID THEN
10:28:44 760  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 761  	  SPROC_NAME, 'No such order');
10:28:44 762  WHEN OTHERS THEN
10:28:44 763  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 764  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 765  END GET_TRANSACTIONS_BY_ORDER_ID;
10:28:44 766  /******************************************************************************/
10:28:44 767  
10:28:44 768  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
10:28:44 769  /*
10:28:44 770  Throws exceptions:
10:28:44 771  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 772  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 773  */
10:28:44 774  	in_invoice_id	IN  NUMBER,
10:28:44 775  	out_result_set OUT SYS_REFCURSOR
10:28:44 776  ) AS
10:28:44 777  -- VARIABLES
10:28:44 778  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
10:28:44 779  temp_invoice_id NUMBER;
10:28:44 780  -- EXCEPTIONS
10:28:44 781  BAD_INVOICE_ID EXCEPTION;
10:28:44 782  BEGIN
10:28:44 783  
10:28:44 784  	BEGIN
10:28:44 785  	  SELECT
10:28:44 786  	    INVOICE.ID into temp_invoice_id
10:28:44 787  	  FROM
10:28:44 788  	    INVOICE
10:28:44 789  	  WHERE
10:28:44 790  	    INVOICE.ID = in_invoice_id;
10:28:44 791  	  EXCEPTION
10:28:44 792  	    WHEN NO_DATA_FOUND THEN
10:28:44 793  	      RAISE BAD_INVOICE_ID;
10:28:44 794  	END;
10:28:44 795  
10:28:44 796  	OPEN out_result_set FOR
10:28:44 797  	SELECT DISTINCT
10:28:44 798  	  TRANSACTION.ID,
10:28:44 799  	  TRANSACTION.TRANSACTION_STATUS_ID,
10:28:44 800  	  TRANSACTION.CREATE_DATE,
10:28:44 801  	  TRANSACTION.UPDATE_DATE,
10:28:44 802  	  TRANSACTION.ORDER_ID,
10:28:44 803  	  TRANSACTION.TRANSACTION_AMOUNT
10:28:44 804  	FROM
10:28:44 805  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
10:28:44 806  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
10:28:44 807  	WHERE
10:28:44 808  	  INVOICE.ID = in_invoice_id
10:28:44 809  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V24.TRUE
10:28:44 810  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
10:28:44 811  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V24.TRANSACTION_CLOSED;
10:28:44 812  
10:28:44 813  EXCEPTION
10:28:44 814  WHEN BAD_INVOICE_ID THEN
10:28:44 815  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 816  	  SPROC_NAME, 'No such invoice');
10:28:44 817  WHEN OTHERS THEN
10:28:44 818  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 819  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 820  END GET_CLOSED_REFUNDS_BY_INVOICE;
10:28:44 821  
10:28:44 822  /******************************************************************************/
10:28:44 823  
10:28:44 824  PROCEDURE GET_TRANSACTION_ATTEMPTS (
10:28:44 825  /*
10:28:44 826  Throws exceptions:
10:28:44 827  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 828  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 829  */
10:28:44 830  	in_transaction_id IN  NUMBER,
10:28:44 831  	out_result_set	  OUT SYS_REFCURSOR
10:28:44 832  ) AS
10:28:44 833  -- VARIABLES
10:28:44 834  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
10:28:44 835  temp_transaction_id NUMBER;
10:28:44 836  -- EXCEPTIONS
10:28:44 837  BAD_TRANSACTION_ID EXCEPTION;
10:28:44 838  BEGIN
10:28:44 839  
10:28:44 840  	BEGIN
10:28:44 841  	  SELECT
10:28:44 842  	    TRANSACTION.ID into temp_transaction_id
10:28:44 843  	  FROM
10:28:44 844  	    TRANSACTION
10:28:44 845  	  WHERE
10:28:44 846  	    TRANSACTION.ID = in_transaction_id;
10:28:44 847  	  EXCEPTION
10:28:44 848  	    WHEN NO_DATA_FOUND THEN
10:28:44 849  	      RAISE BAD_TRANSACTION_ID;
10:28:44 850  	END;
10:28:44 851  
10:28:44 852  	OPEN out_result_set FOR
10:28:44 853  	SELECT
10:28:44 854  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
10:28:44 855  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
10:28:44 856  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
10:28:44 857  	  TRANSACTION_ATTEMPT.CREATE_DATE,
10:28:44 858  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
10:28:44 859  	FROM
10:28:44 860  	  TRANSACTION_ATTEMPT
10:28:44 861  	WHERE
10:28:44 862  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
10:28:44 863  
10:28:44 864  EXCEPTION
10:28:44 865  WHEN BAD_TRANSACTION_ID THEN
10:28:44 866  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 867  	  SPROC_NAME, 'No such transaction');
10:28:44 868  WHEN OTHERS THEN
10:28:44 869  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 870  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 871  END GET_TRANSACTION_ATTEMPTS;
10:28:44 872  
10:28:44 873  /******************************************************************************/
10:28:44 874  
10:28:44 875  PROCEDURE RESERVE_TRANSACTION_ID (
10:28:44 876  /*
10:28:44 877  Throws exceptions:
10:28:44 878  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 879  */
10:28:44 880  	out_transaction_id OUT NUMBER
10:28:44 881  ) AS
10:28:44 882  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
10:28:44 883  BEGIN
10:28:44 884  	SELECT
10:28:44 885  	  TRN_ID_SEQ.nextVal into out_transaction_id
10:28:44 886  	FROM DUAL;
10:28:44 887  EXCEPTION
10:28:44 888  WHEN OTHERS THEN
10:28:44 889  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 890  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 891  END RESERVE_TRANSACTION_ID;
10:28:44 892  
10:28:44 893  /******************************************************************************/
10:28:44 894  
10:28:44 895  PROCEDURE GET_TRANSACTION_BY_ID (
10:28:44 896  /*
10:28:44 897  Throws exceptions:
10:28:44 898  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 899  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 900  */
10:28:44 901  	in_transaction_id IN NUMBER,
10:28:44 902  	out_result_set	  OUT SYS_REFCURSOR
10:28:44 903  ) AS
10:28:44 904  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
10:28:44 905  -- VARIABLES
10:28:44 906  temp_transaction_id NUMBER;
10:28:44 907  -- EXCPTIONS
10:28:44 908  BAD_TRANSACTION_ID EXCEPTION;
10:28:44 909  BEGIN
10:28:44 910  	BEGIN
10:28:44 911  	  SELECT
10:28:44 912  	    TRANSACTION.ID into temp_transaction_id
10:28:44 913  	  FROM
10:28:44 914  	    TRANSACTION
10:28:44 915  	  WHERE
10:28:44 916  	    TRANSACTION.ID = in_transaction_id;
10:28:44 917  	  EXCEPTION
10:28:44 918  	    WHEN NO_DATA_FOUND THEN
10:28:44 919  	      RAISE BAD_TRANSACTION_ID;
10:28:44 920  	END;
10:28:44 921  
10:28:44 922  	PROCS_TRANSACTION_CRU_V24.READ_TRANSACTION(
10:28:44 923  	  in_transaction_id => in_transaction_id,
10:28:44 924  	  out_result_set    => out_result_set
10:28:44 925  	);
10:28:44 926  
10:28:44 927  EXCEPTION
10:28:44 928  WHEN NO_DATA_FOUND THEN
10:28:44 929  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 930  	  SPROC_NAME, 'No such transaction');
10:28:44 931  WHEN OTHERS THEN
10:28:44 932  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 933  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 934  END GET_TRANSACTION_BY_ID;
10:28:44 935  
10:28:44 936  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:28:44 937  /*
10:28:44 938  Throws exceptions:
10:28:44 939  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 940  APP_EXCEPTION_CODES_V24.INTRNAL_ERROR
10:28:44 941  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 942  */
10:28:44 943  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:28:44 944  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:28:44 945  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:28:44 946  ) AS
10:28:44 947  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
10:28:44 948  -- VARIABLES
10:28:44 949  temp_transaction_id TRANSACTION.ID%TYPE;
10:28:44 950  -- EXCEPTIONS
10:28:44 951  BAD_TRANSACTION_ID   EXCEPTION;
10:28:44 952  ORDER_ID_IS_NOT_NULL EXCEPTION;
10:28:44 953  CRU_UNKNOWN_ERROR    EXCEPTION;
10:28:44 954  EXCEPTION_MESSAGE VARCHAR2(1024);
10:28:44 955  BEGIN
10:28:44 956  	BEGIN
10:28:44 957  	  SELECT
10:28:44 958  	    TRANSACTION.ID into temp_transaction_id
10:28:44 959  	  FROM
10:28:44 960  	    TRANSACTION
10:28:44 961  	  WHERE
10:28:44 962  	    TRANSACTION.ID = in_transaction_id;
10:28:44 963  	  EXCEPTION
10:28:44 964  	    WHEN NO_DATA_FOUND THEN
10:28:44 965  	      RAISE BAD_TRANSACTION_ID;
10:28:44 966  	END;
10:28:44 967  
10:28:44 968  	BEGIN
10:28:44 969  	  PROCS_TRANSACTION_CRU_V24.UPDATE_TRANSACTION_ORDER_ID(
10:28:44 970  	    in_transaction_id => in_transaction_id,
10:28:44 971  	    in_order_id       => in_order_id,
10:28:44 972  	    in_updated_by     => in_updated_by
10:28:44 973  	  );
10:28:44 974  	  EXCEPTION
10:28:44 975  	    WHEN OTHERS THEN
10:28:44 976  	      IF SQLCODE = APP_EXCEPTION_CODES_V24.NOT_FOUND THEN
10:28:44 977  		RAISE ORDER_ID_IS_NOT_NULL;
10:28:44 978  	      ELSE
10:28:44 979  		EXCEPTION_MESSAGE := SQLERRM;
10:28:44 980  		RAISE CRU_UNKNOWN_ERROR;
10:28:44 981  	      END IF;
10:28:44 982  	END;
10:28:44 983  
10:28:44 984  EXCEPTION
10:28:44 985  WHEN BAD_TRANSACTION_ID THEN
10:28:44 986  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 987  	  SPROC_NAME, 'No such transaction');
10:28:44 988  WHEN ORDER_ID_IS_NOT_NULL THEN
10:28:44 989  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 990  	  SPROC_NAME, 'Order id is not null');
10:28:44 991  WHEN CRU_UNKNOWN_ERROR THEN
10:28:44 992  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 993  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
10:28:44 994  WHEN OTHERS THEN
10:28:44 995  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 996  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 997  END UPDATE_TRANSACTION_ORDER_ID;
10:28:44 998  
10:28:44 999  /******************************************************************************/
10:28:44 1000  
10:28:44 1001  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
10:28:44 1002  	 in_transaction_id IN NUMBER
10:28:44 1003  ) RETURN NUMBER AS
10:28:44 1004  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
10:28:44 1005  -- Variables
10:28:44 1006  var_tax_amount NUMBER(10,2);
10:28:44 1007  BEGIN
10:28:44 1008  
10:28:44 1009  	 SELECT
10:28:44 1010  	   SUM(LI.TAXES_AMOUNT) into var_tax_amount
10:28:44 1011  	 FROM
10:28:44 1012  	   LINE_ITEM LI
10:28:44 1013  	   INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
10:28:44 1014  	   INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
10:28:44 1015  	 WHERE
10:28:44 1016  	   CH.TRANSACTION_ID = in_transaction_id;
10:28:44 1017  
10:28:44 1018  	 IF var_tax_amount IS NULL THEN
10:28:44 1019  	   var_tax_amount := 0;
10:28:44 1020  	 END IF;
10:28:44 1021  
10:28:44 1022  	 RETURN var_tax_amount;
10:28:44 1023  
10:28:44 1024  END GET_TRANSACTION_TAX_AMOUNT;
10:28:44 1025  
10:28:44 1026  /******************************************************************************/
10:28:44 1027  
10:28:44 1028  FUNCTION GET_TRANSACTION_INTRL_TAXES (
10:28:44 1029  	 in_transaction_id IN NUMBER
10:28:44 1030  ) RETURN NUMBER AS
10:28:44 1031  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
10:28:44 1032  -- Variables
10:28:44 1033  var_intrl_tax_amount NUMBER(10, 2);
10:28:44 1034  BEGIN
10:28:44 1035  
10:28:44 1036  	 SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
10:28:44 1037  	 FROM
10:28:44 1038  	   LINE_ITEM LI
10:28:44 1039  	   INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
10:28:44 1040  	   INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
10:28:44 1041  	   INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
10:28:44 1042  	 WHERE
10:28:44 1043  	   CH.TRANSACTION_ID = in_transaction_id
10:28:44 1044  	   AND T.TAX_TYPE_ID IN (
10:28:44 1045  	     SELECT GLOBAL_ENUMS_V24.TAX_TYPE_VAT FROM DUAL
10:28:44 1046  	   );
10:28:44 1047  
10:28:44 1048  	 IF var_intrl_tax_amount IS NULL THEN
10:28:44 1049  	   var_intrl_tax_amount := 0;
10:28:44 1050  	 END IF;
10:28:44 1051  
10:28:44 1052  	 RETURN var_intrl_tax_amount;
10:28:44 1053  
10:28:44 1054  END GET_TRANSACTION_INTRL_TAXES;
10:28:44 1055  
10:28:44 1056  /******************************************************************************/
10:28:44 1057  -- norlov: #38796
10:28:44 1058  PROCEDURE GET_TRANSACTIONS (
10:28:44 1059  /*
10:28:44 1060  Throws exceptions:
10:28:44 1061  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 1062  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 1063  */
10:28:44 1064  	 in_group_id	       IN  NUMBER,
10:28:44 1065  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
10:28:44 1066  	 in_subscription_id    IN NUMBER DEFAULT NULL,
10:28:44 1067  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
10:28:44 1068  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
10:28:44 1069  	 in_transaction_status IN NUMBER DEFAULT NULL,
10:28:44 1070  	 out_result_set        OUT SYS_REFCURSOR
10:28:44 1071  ) AS
10:28:44 1072  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
10:28:44 1073  -- VARIABLES
10:28:44 1074  var_account_id ACCOUNT.ID%TYPE;
10:28:44 1075  statement VARCHAR2(2000);
10:28:44 1076  -- EXCEPTIONS
10:28:44 1077  BAD_GROUP_ID   EXCEPTION;
10:28:44 1078  BEGIN
10:28:44 1079  	-- check group id
10:28:44 1080  	BEGIN
10:28:44 1081  	   SELECT
10:28:44 1082  	     ACCOUNT.ID into var_account_id
10:28:44 1083  	   FROM
10:28:44 1084  	     ACCOUNT
10:28:44 1085  	   WHERE
10:28:44 1086  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:44 1087  	   EXCEPTION
10:28:44 1088  	     WHEN NO_DATA_FOUND THEN
10:28:44 1089  	       RAISE BAD_GROUP_ID;
10:28:44 1090  	 END;
10:28:44 1091  
10:28:44 1092  	 OPEN out_result_set FOR
10:28:44 1093  	 SELECT
10:28:44 1094  	   TRANSACTION.ID,
10:28:44 1095  	   TRANSACTION.TRANSACTION_STATUS_ID,
10:28:44 1096  	   TRANSACTION.TRANSACTION_AMOUNT,
10:28:44 1097  	   TRANSACTION.CREATE_DATE,
10:28:44 1098  	   TRANSACTION.CREATED_BY,
10:28:44 1099  	   TRANSACTION.IS_REFUND,
10:28:44 1100  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
10:28:44 1101  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
10:28:44 1102  	 FROM
10:28:44 1103  	   TRANSACTION
10:28:44 1104  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
10:28:44 1105  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
10:28:44 1106  	 WHERE
10:28:44 1107  	   -- Filter by invoice ID
10:28:44 1108  	   (
10:28:44 1109  	     INVOICE.ID IN (
10:28:44 1110  	       -- Gift certificate invoices
10:28:44 1111  	       SELECT
10:28:44 1112  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
10:28:44 1113  	       FROM
10:28:44 1114  		 GIFT_CERTIFICATE
10:28:44 1115  	       WHERE
10:28:44 1116  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
10:28:44 1117  		 -- If subscription_id is set then return nothing
10:28:44 1118  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
10:28:44 1119  	     )
10:28:44 1120  	     OR
10:28:44 1121  	     INVOICE.ID IN (
10:28:44 1122  	       SELECT
10:28:44 1123  		 LICENSE.INVOICE_ID
10:28:44 1124  	       FROM
10:28:44 1125  		 LICENSE
10:28:44 1126  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 1127  	       WHERE
10:28:44 1128  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:44 1129  		 -- Filter by subscription id
10:28:44 1130  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
10:28:44 1131  	     )
10:28:44 1132  	   )
10:28:44 1133  	   -- Filter by invoice id
10:28:44 1134  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
10:28:44 1135  	   -- Filter by start date
10:28:44 1136  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
10:28:44 1137  	   -- Filter by end date
10:28:44 1138  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
10:28:44 1139  	   -- Filter by transaction status
10:28:44 1140  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
10:28:44 1141  
10:28:44 1142  /*
10:28:44 1143  
10:28:44 1144  statement :=  'select distinct '||CHR(10)
10:28:44 1145  || ' TRANSACTION.ID,'||CHR(10)
10:28:44 1146  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
10:28:44 1147  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
10:28:44 1148  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
10:28:44 1149  || ' TRANSACTION.CREATED_BY, '||CHR(10)
10:28:44 1150  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
10:28:44 1151  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
10:28:44 1152  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
10:28:44 1153  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
10:28:44 1154  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
10:28:44 1155  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
10:28:44 1156  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
10:28:44 1157  
10:28:44 1158  IF (in_transaction_status IS NOT NULL) THEN
10:28:44 1159  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
10:28:44 1160  END IF;
10:28:44 1161  
10:28:44 1162  IF (in_invoice_id IS NOT NULL) THEN
10:28:44 1163  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
10:28:44 1164  END IF;
10:28:44 1165  
10:28:44 1166  IF (in_subscription_id IS NOT NULL) THEN
10:28:44 1167  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
10:28:44 1168  END IF;
10:28:44 1169  
10:28:44 1170  IF (in_start_date IS NOT NULL) THEN
10:28:44 1171  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
10:28:44 1172  END IF;
10:28:44 1173  
10:28:44 1174  IF (in_end_date IS NOT NULL) THEN
10:28:44 1175  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
10:28:44 1176  END IF;
10:28:44 1177  dbms_output.put_line(statement);
10:28:44 1178  OPEN out_result_set FOR statement;
10:28:44 1179  
10:28:44 1180  */
10:28:44 1181  
10:28:44 1182  EXCEPTION
10:28:44 1183  WHEN BAD_GROUP_ID THEN
10:28:44 1184  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1185  	   SPROC_NAME, 'No such group');
10:28:44 1186  WHEN OTHERS THEN
10:28:44 1187  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1188  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1189  END GET_TRANSACTIONS;
10:28:44 1190  
10:28:44 1191  FUNCTION IS_TRANSACTION_COLLECTED (
10:28:44 1192  /*
10:28:44 1193  Throws:
10:28:44 1194  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 1195  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 1196  Returns:
10:28:44 1197  GLOBAL_CONST.TRUE if transaction collected,
10:28:44 1198  GLOBAL_CONST.FALSE else
10:28:44 1199  */
10:28:44 1200  	 in_transaction_id IN NUMBER
10:28:44 1201  ) RETURN NUMBER AS
10:28:44 1202  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
10:28:44 1203  -- VARIABLES
10:28:44 1204  temp_transaction_id     NUMBER;
10:28:44 1205  var_success_attemps_num NUMBER;
10:28:44 1206  -- EXCEPTIONS
10:28:44 1207  BAD_TRANSACTION_ID EXCEPTION;
10:28:44 1208  BEGIN
10:28:44 1209  
10:28:44 1210  	 BEGIN
10:28:44 1211  	   SELECT
10:28:44 1212  	     TRANSACTION.ID into temp_transaction_id
10:28:44 1213  	   FROM
10:28:44 1214  	     TRANSACTION
10:28:44 1215  	   WHERE
10:28:44 1216  	     TRANSACTION.ID = in_transaction_id;
10:28:44 1217  	   EXCEPTION
10:28:44 1218  	     WHEN NO_DATA_FOUND THEN
10:28:44 1219  	       RAISE BAD_TRANSACTION_ID;
10:28:44 1220  	 END;
10:28:44 1221  
10:28:44 1222  	 SELECT
10:28:44 1223  	   COUNT(*) into var_success_attemps_num
10:28:44 1224  	 FROM
10:28:44 1225  	   TRANSACTION_ATTEMPT
10:28:44 1226  	 WHERE
10:28:44 1227  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
10:28:44 1228  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS FROM DUAL );
10:28:44 1229  
10:28:44 1230  	 IF var_success_attemps_num > 0 THEN
10:28:44 1231  	   RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:44 1232  	 ELSE
10:28:44 1233  	   RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:44 1234  	 END IF;
10:28:44 1235  
10:28:44 1236  EXCEPTION
10:28:44 1237  WHEN BAD_TRANSACTION_ID THEN
10:28:44 1238  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1239  	   SPROC_NAME, 'No such transaction');
10:28:44 1240  WHEN OTHERS THEN
10:28:44 1241  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1242  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1243  END IS_TRANSACTION_COLLECTED;
10:28:44 1244  
10:28:44 1245  
10:28:44 1246  /******************************************************************************/
10:28:44 1247  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
10:28:44 1248  /*
10:28:44 1249  Throws exceptions:
10:28:44 1250  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 1251  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 1252  */
10:28:44 1253  	 in_charge_id	in  number,
10:28:44 1254  	 out_attempt_count OUT NUMBER
10:28:44 1255  ) AS
10:28:44 1256  -- VARIABLES
10:28:44 1257  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_NEXT_ATTEMPT_NUMBER';
10:28:44 1258  temp_transaction_id NUMBER;
10:28:44 1259  -- EXCEPTIONS
10:28:44 1260  BAD_CHARGE_ID EXCEPTION;
10:28:44 1261  BEGIN
10:28:44 1262  
10:28:44 1263  	 BEGIN
10:28:44 1264  	   SELECT
10:28:44 1265  	     TRANSACTION_ID into temp_transaction_id
10:28:44 1266  	   FROM
10:28:44 1267  	     CHARGE
10:28:44 1268  	   WHERE
10:28:44 1269  	     CHARGE.ID = in_charge_id;
10:28:44 1270  	   EXCEPTION
10:28:44 1271  	     WHEN NO_DATA_FOUND THEN
10:28:44 1272  	       RAISE BAD_CHARGE_ID;
10:28:44 1273  	 END;
10:28:44 1274  
10:28:44 1275  	 select
10:28:44 1276  	   count(1)
10:28:44 1277  	 into
10:28:44 1278  	   out_attempt_count
10:28:44 1279  	 from
10:28:44 1280  	   transaction tr
10:28:44 1281  	 inner join
10:28:44 1282  	   transaction_attempt ta
10:28:44 1283  	 on (tr.id = ta.transaction_id)
10:28:44 1284  	 where
10:28:44 1285  	   tr.ID = temp_transaction_id;
10:28:44 1286  
10:28:44 1287  	 out_attempt_count := out_attempt_count + 1;
10:28:44 1288  
10:28:44 1289  EXCEPTION
10:28:44 1290  WHEN BAD_CHARGE_ID THEN
10:28:44 1291  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1292  	   SPROC_NAME, 'No such charge');
10:28:44 1293  WHEN OTHERS THEN
10:28:44 1294  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1295  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1296  end GET_NEXT_ATTEMPT_NUMBER;
10:28:44 1297  /******************************************************************************/
10:28:44 1298  
10:28:44 1299  END PROCS_TRANSACTION_V24;
10:28:44 1300  .
10:28:44 SQL> /

Package body created.

Elapsed: 00:00:00.18
10:28:44 SQL> 
10:28:44 SQL> prompt Compiling body for procs_license.sql
Compiling body for procs_license.sql
10:28:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V24" AS
10:28:44   2  
10:28:44   3  PROCEDURE CREATE_LICENSE(
10:28:44   4  	in_status_id		    IN NUMBER,
10:28:44   5  	in_needs_entitlements	    IN NUMBER,
10:28:44   6  	in_start_date		    IN DATE,
10:28:44   7  	in_end_date		    IN DATE,
10:28:44   8  	in_offer_id		    IN NUMBER,
10:28:44   9  	in_subscription_id	    IN NUMBER,
10:28:44  10  	in_invoice_id		    IN NUMBER,
10:28:44  11  	in_created_by		    IN VARCHAR2,
10:28:44  12  	in_is_extension 	    IN NUMBER,
10:28:44  13  	in_current_offer_index	    IN NUMBER,
10:28:44  14  	in_current_offer_recurr_num IN NUMBER,
10:28:44  15  	out_license_id		    OUT NUMBER
10:28:44  16  ) AS
10:28:44  17  -- VARIABLES
10:28:44  18  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
10:28:44  19  temp_offer_id	   NUMBER;
10:28:44  20  temp_subscription_id NUMBER;
10:28:44  21  temp_invoice_id	   NUMBER;
10:28:44  22  
10:28:44  23  var_new_license_id NUMBER;
10:28:44  24  var_offer_duration VARCHAR2(30);
10:28:44  25  
10:28:44  26  var_offer_ym_interval INTERVAL YEAR TO MONTH;
10:28:44  27  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
10:28:44  28  var_offer_years	    NUMBER;
10:28:44  29  var_offer_months	    NUMBER;
10:28:44  30  var_offer_days	    NUMBER;
10:28:44  31  
10:28:44  32  -- EXCEPTIONS
10:28:44  33  BAD_OFFER_ID	     EXCEPTION;
10:28:44  34  BAD_SUBSCRIPTION_ID    EXCEPTION;
10:28:44  35  BAD_INVOICE_ID	     EXCEPTION;
10:28:44  36  BAD_OFFER_DURATION     EXCEPTION;
10:28:44  37  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44  38  BEGIN
10:28:44  39  
10:28:44  40  	-- TODO:
10:28:44  41  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
10:28:44  42  
10:28:44  43  	out_license_id := NULL;
10:28:44  44  
10:28:44  45  	-- get offer id and offer entitlement duration
10:28:44  46  	BEGIN
10:28:44  47  	  SELECT
10:28:44  48  	    OFFER.ID,
10:28:44  49  	    OFFER.ENTITLEMENT_DURATION
10:28:44  50  	    into
10:28:44  51  	    temp_offer_id,
10:28:44  52  	    var_offer_duration
10:28:44  53  	  FROM
10:28:44  54  	    OFFER
10:28:44  55  	  WHERE
10:28:44  56  	    OFFER.ID = in_offer_id;
10:28:44  57  	  EXCEPTION
10:28:44  58  	  WHEN NO_DATA_FOUND THEN
10:28:44  59  	    RAISE BAD_OFFER_ID;
10:28:44  60  	END;
10:28:44  61  
10:28:44  62  	-- Check that subscription exists
10:28:44  63  	BEGIN
10:28:44  64  	  SELECT
10:28:44  65  	    SUBSCRIPTION.ID into temp_subscription_id
10:28:44  66  	  FROM
10:28:44  67  	    SUBSCRIPTION
10:28:44  68  	  WHERE
10:28:44  69  	    SUBSCRIPTION.ID = in_subscription_id;
10:28:44  70  	  EXCEPTION
10:28:44  71  	  WHEN NO_DATA_FOUND THEN
10:28:44  72  	    RAISE BAD_SUBSCRIPTION_ID;
10:28:44  73  	END;
10:28:44  74  
10:28:44  75  	-- Check that invoice exists
10:28:44  76  	BEGIN
10:28:44  77  	  SELECT
10:28:44  78  	    INVOICE.ID into temp_invoice_id
10:28:44  79  	  FROM
10:28:44  80  	    INVOICE
10:28:44  81  	  WHERE
10:28:44  82  	    INVOICE.ID = in_invoice_id;
10:28:44  83  	  EXCEPTION
10:28:44  84  	  WHEN NO_DATA_FOUND THEN
10:28:44  85  	    RAISE BAD_INVOICE_ID;
10:28:44  86  	END;
10:28:44  87  
10:28:44  88  	-- convert offer duration into intervals
10:28:44  89  	BEGIN
10:28:44  90  	  PROCS_COMMON_V24.ISO8601DURATION_TO_INTERVALS(
10:28:44  91  	    var_offer_duration,
10:28:44  92  	    var_offer_years,
10:28:44  93  	    var_offer_months,
10:28:44  94  	    var_offer_days);
10:28:44  95  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
10:28:44  96  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
10:28:44  97  	  EXCEPTION
10:28:44  98  	    WHEN OTHERS THEN
10:28:44  99  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:44 100  	      RAISE BAD_OFFER_DURATION;
10:28:44 101  	END;
10:28:44 102  
10:28:44 103  	-- insert new row into license table
10:28:44 104  	PROCS_LICENSE_CRU_V24.CREATE_LICENSE(
10:28:44 105  	  out_license_id	      => var_new_license_id,
10:28:44 106  	  in_license_status_id	      => in_status_id,
10:28:44 107  	  in_needs_entitlements       => in_needs_entitlements,
10:28:44 108  	  in_start_date 	      => in_start_date,
10:28:44 109  	  in_offer_id		      => in_offer_id,
10:28:44 110  	  in_subscription_id	      => in_subscription_id,
10:28:44 111  	  in_invoice_id 	      => in_invoice_id,
10:28:44 112  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
10:28:44 113  	  in_created_by 	      => in_created_by,
10:28:44 114  	  in_is_extension	      => in_is_extension,
10:28:44 115  	  in_current_offer_index      => in_current_offer_index,
10:28:44 116  	  in_current_offer_recurr_num => in_current_offer_recurr_num
10:28:44 117  	);
10:28:44 118  
10:28:44 119  	out_license_id := var_new_license_id;
10:28:44 120  
10:28:44 121  EXCEPTION
10:28:44 122  WHEN BAD_OFFER_DURATION THEN
10:28:44 123  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 124  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
10:28:44 125  WHEN BAD_OFFER_ID THEN
10:28:44 126  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 127  	  SPROC_NAME, 'No such offer');
10:28:44 128  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 129  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 130  	  SPROC_NAME, 'No such subscription');
10:28:44 131  WHEN BAD_INVOICE_ID THEN
10:28:44 132  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 133  	  SPROC_NAME, 'No such invoice');
10:28:44 134  WHEN OTHERS THEN
10:28:44 135  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 136  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 137  END;
10:28:44 138  
10:28:44 139  /******************************************************************************/
10:28:44 140  
10:28:44 141  PROCEDURE UPDATE_LICENSE_STATUS(
10:28:44 142  	  in_license_id     IN NUMBER,
10:28:44 143  	  in_license_status IN NUMBER,
10:28:44 144  	  in_updated_by     IN VARCHAR2,
10:28:44 145  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE
10:28:44 146  ) AS
10:28:44 147  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
10:28:44 148  -- VARIABLES
10:28:44 149  temp_license_id NUMBER;
10:28:44 150  -- EXCEPTIONS
10:28:44 151  BAD_LICENSE_ID	     EXCEPTION;
10:28:44 152  BAD_LICENSE_STATUS     EXCEPTION;
10:28:44 153  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44 154  BEGIN
10:28:44 155  
10:28:44 156  	BEGIN
10:28:44 157  	  SELECT
10:28:44 158  	    ID into temp_license_id
10:28:44 159  	  FROM
10:28:44 160  	    LICENSE
10:28:44 161  	  WHERE
10:28:44 162  	    LICENSE.ID = in_license_id;
10:28:44 163  	  EXCEPTION
10:28:44 164  	    WHEN NO_DATA_FOUND THEN
10:28:44 165  	      RAISE BAD_LICENSE_ID;
10:28:44 166  	END;
10:28:44 167  
10:28:44 168  	IF in_license_status != GLOBAL_STATUSES_V24.LICENSE_CLOSED
10:28:44 169  	   AND in_license_status != GLOBAL_STATUSES_V24.LICENSE_ACTIVE
10:28:44 170  	   AND in_license_status != GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD THEN
10:28:44 171  	  RAISE BAD_LICENSE_STATUS;
10:28:44 172  	END IF;
10:28:44 173  
10:28:44 174  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V24.TRUE) then
10:28:44 175  	  PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 176  	    in_license_id	 => in_license_id,
10:28:44 177  	    in_updated_by	 => in_updated_by,
10:28:44 178  	    in_license_status_id => in_license_status,
10:28:44 179  	    in_entitlement_end_date	 => sysdate
10:28:44 180  	  );
10:28:44 181  	ELSE
10:28:44 182  	  PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 183  	    in_license_id	 => in_license_id,
10:28:44 184  	    in_updated_by	 => in_updated_by,
10:28:44 185  	    in_license_status_id => in_license_status
10:28:44 186  	  );
10:28:44 187  	END IF;
10:28:44 188  
10:28:44 189  EXCEPTION
10:28:44 190  WHEN BAD_LICENSE_STATUS THEN
10:28:44 191  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 192  	  SPROC_NAME, 'Bad status id');
10:28:44 193  WHEN BAD_LICENSE_ID THEN
10:28:44 194  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 195  	  SPROC_NAME, 'No such license');
10:28:44 196  WHEN OTHERS THEN
10:28:44 197  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 198  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 199  END UPDATE_LICENSE_STATUS;
10:28:44 200  
10:28:44 201  /******************************************************************************/
10:28:44 202  
10:28:44 203  PROCEDURE GET_ENDING_LICENSES (
10:28:44 204  	in_hours_number IN NUMBER,
10:28:44 205  	out_result_set	OUT SYS_REFCURSOR
10:28:44 206  ) AS
10:28:44 207  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
10:28:44 208  BEGIN
10:28:44 209  
10:28:44 210  	OPEN out_result_set FOR
10:28:44 211  	  SELECT * FROM (
10:28:44 212  	    SELECT
10:28:44 213  	      ID,
10:28:44 214  	      CREATE_DATE,
10:28:44 215  	      CREATED_BY,
10:28:44 216  	      CURRENT_OFFER_INDEX,
10:28:44 217  	      CURRENT_OFFER_RECURR_NUM,
10:28:44 218  	      END_DATE,
10:28:44 219  	      ENTITLEMENT_END_DATE,
10:28:44 220  	      INVOICE_ID,
10:28:44 221  	      IS_EXTENSION,
10:28:44 222  	      (SELECT VALUE FROM LICENSE_STATUS WHERE ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE) STATUS,
10:28:44 223  	      NEEDS_ENTITLEMENTS,
10:28:44 224  	      OFFER_ID,
10:28:44 225  	      START_DATE,
10:28:44 226  	      SUBSCRIPTION_ID,
10:28:44 227  	      UPDATE_DATE,
10:28:44 228  	      UPDATED_BY
10:28:44 229  	    FROM
10:28:44 230  	      LICENSE
10:28:44 231  	    WHERE
10:28:44 232  	      END_DATE <= SYSDATE + (in_hours_number / 24)
10:28:44 233  	      AND LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:28:44 234  	      AND NOT EXISTS (
10:28:44 235  		SELECT NULL
10:28:44 236  		FROM PROCESS_RETRY_THROTTLE
10:28:44 237  		WHERE PROCESS_NAME = SPROC_NAME
10:28:44 238  		AND GENERIC_ID = LICENSE.ID
10:28:44 239  	      )
10:28:44 240  	      AND ROWNUM <= 40000
10:28:44 241  	      ORDER BY dbms_random.value
10:28:44 242  	  ) WHERE
10:28:44 243  	      ROWNUM <= 4000;
10:28:44 244  END GET_ENDING_LICENSES;
10:28:44 245  
10:28:44 246  
10:28:44 247  /******************************************************************************/
10:28:44 248  
10:28:44 249  PROCEDURE GET_ENDING_LICENSES_CC (
10:28:44 250  	in_hours_number IN NUMBER,
10:28:44 251  	out_result_set	OUT SYS_REFCURSOR,
10:28:44 252  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:44 253  ) AS
10:28:44 254  BEGIN
10:28:44 255  
10:28:44 256  	OPEN out_result_set FOR
10:28:44 257  	  SELECT * FROM (
10:28:44 258  	    SELECT
10:28:44 259  	      ID,
10:28:44 260  	      CREATE_DATE,
10:28:44 261  	      CREATED_BY,
10:28:44 262  	      CURRENT_OFFER_INDEX,
10:28:44 263  	      CURRENT_OFFER_RECURR_NUM,
10:28:44 264  	      END_DATE,
10:28:44 265  	      ENTITLEMENT_END_DATE,
10:28:44 266  	      INVOICE_ID,
10:28:44 267  	      IS_EXTENSION,
10:28:44 268  	      (SELECT VALUE FROM LICENSE_STATUS WHERE ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE) STATUS,
10:28:44 269  	      NEEDS_ENTITLEMENTS,
10:28:44 270  	      OFFER_ID,
10:28:44 271  	      START_DATE,
10:28:44 272  	      SUBSCRIPTION_ID,
10:28:44 273  	      UPDATE_DATE,
10:28:44 274  	      UPDATED_BY
10:28:44 275  	    FROM
10:28:44 276  	      LICENSE l
10:28:44 277  	    WHERE
10:28:44 278  	      END_DATE <= SYSDATE + (in_hours_number / 24)
10:28:44 279  	      AND LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:28:44 280  	      AND NOT EXISTS (
10:28:44 281  		SELECT NULL
10:28:44 282  		FROM PROCESS_RETRY_THROTTLE
10:28:44 283  		WHERE PROCESS_NAME = in_process_name
10:28:44 284  		AND GENERIC_ID = l.INVOICE_ID
10:28:44 285  	      )
10:28:44 286  	      AND ROWNUM <= 10000
10:28:44 287  	      ORDER BY dbms_random.value
10:28:44 288  	  ) WHERE ROWNUM <= 1000;
10:28:44 289  END GET_ENDING_LICENSES_CC;
10:28:44 290  
10:28:44 291  /******************************************************************************/
10:28:44 292  
10:28:44 293  PROCEDURE GET_RECURRING_OFFER (
10:28:44 294  	in_license_id  IN NUMBER,
10:28:44 295  	out_result_set OUT SYS_REFCURSOR
10:28:44 296  ) AS
10:28:44 297  -- VARIABLES
10:28:44 298  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
10:28:44 299  var_offer_chain_id	    NUMBER;
10:28:44 300  var_offer_id		    NUMBER;
10:28:44 301  var_offer_num_recurrences     NUMBER;
10:28:44 302  var_license_cur_offer_rec_num NUMBER;
10:28:44 303  var_offer_index		    NUMBER;
10:28:44 304  -- EXCEPTIONS
10:28:44 305  BAD_LICENSE_ID	     EXCEPTION;
10:28:44 306  CAN_NOT_GET_OFFER_INFO EXCEPTION;
10:28:44 307  BEGIN
10:28:44 308  
10:28:44 309  	BEGIN
10:28:44 310  	  SELECT
10:28:44 311  	    SUBSCRIPTION.OFFER_CHAIN_ID,
10:28:44 312  	    LICENSE.OFFER_ID,
10:28:44 313  	    LICENSE.CURRENT_OFFER_RECURR_NUM
10:28:44 314  	    into
10:28:44 315  	    var_offer_chain_id,
10:28:44 316  	    var_offer_id,
10:28:44 317  	    var_license_cur_offer_rec_num
10:28:44 318  	  FROM
10:28:44 319  	    LICENSE
10:28:44 320  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 321  	  WHERE
10:28:44 322  	    LICENSE.ID = in_license_id;
10:28:44 323  	  EXCEPTION
10:28:44 324  	    WHEN NO_DATA_FOUND THEN
10:28:44 325  	      RAISE BAD_LICENSE_ID;
10:28:44 326  	END;
10:28:44 327  
10:28:44 328  	BEGIN
10:28:44 329  	  SELECT
10:28:44 330  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
10:28:44 331  	    OFFER_OFFER_CHAIN.INDEX_VALUE
10:28:44 332  	    into
10:28:44 333  	    var_offer_num_recurrences,
10:28:44 334  	    var_offer_index
10:28:44 335  	  FROM
10:28:44 336  	    OFFER_OFFER_CHAIN
10:28:44 337  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:28:44 338  	  WHERE
10:28:44 339  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:28:44 340  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
10:28:44 341  	  EXCEPTION
10:28:44 342  	    WHEN NO_DATA_FOUND THEN
10:28:44 343  	      RAISE CAN_NOT_GET_OFFER_INFO;
10:28:44 344  	END;
10:28:44 345  
10:28:44 346  	IF var_offer_num_recurrences = 0 THEN
10:28:44 347  	  --out_result_set := NULL;
10:28:44 348  	  -- TODO: Remove this hardcode
10:28:44 349  	  OPEN out_result_set FOR
10:28:44 350  	  SELECT
10:28:44 351  	    OFFER.ID,
10:28:44 352  	    OFFER.OFFER_STATUS_ID,
10:28:44 353  	    OFFER.ENTITLEMENT_DURATION,
10:28:44 354  	    OFFER.CREATED_BY,
10:28:44 355  	    OFFER.CREATE_DATE,
10:28:44 356  	    OFFER.UPDATED_BY,
10:28:44 357  	    OFFER.UPDATE_DATE,
10:28:44 358  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
10:28:44 359  	    var_offer_index as "OFFER_INDEX"
10:28:44 360  	  FROM
10:28:44 361  	    OFFER_OFFER_CHAIN
10:28:44 362  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:28:44 363  	  WHERE ROWNUM = 0;
10:28:44 364  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
10:28:44 365  	  --out_result_set := NULL;
10:28:44 366  	  -- TODO: Remove this hardcode
10:28:44 367  	  OPEN out_result_set FOR
10:28:44 368  	  SELECT
10:28:44 369  	    OFFER.ID,
10:28:44 370  	    OFFER.OFFER_STATUS_ID,
10:28:44 371  	    OFFER.ENTITLEMENT_DURATION,
10:28:44 372  	    OFFER.CREATED_BY,
10:28:44 373  	    OFFER.CREATE_DATE,
10:28:44 374  	    OFFER.UPDATED_BY,
10:28:44 375  	    OFFER.UPDATE_DATE,
10:28:44 376  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
10:28:44 377  	    var_offer_index as "OFFER_INDEX"
10:28:44 378  	  FROM
10:28:44 379  	    OFFER_OFFER_CHAIN
10:28:44 380  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:28:44 381  	  WHERE ROWNUM = 0;
10:28:44 382  	ELSE
10:28:44 383  	  OPEN out_result_set FOR
10:28:44 384  	  SELECT
10:28:44 385  	    OFFER.ID,
10:28:44 386  	    OFFER.OFFER_STATUS_ID,
10:28:44 387  	    OFFER.ENTITLEMENT_DURATION,
10:28:44 388  	    OFFER.CREATED_BY,
10:28:44 389  	    OFFER.CREATE_DATE,
10:28:44 390  	    OFFER.UPDATED_BY,
10:28:44 391  	    OFFER.UPDATE_DATE,
10:28:44 392  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
10:28:44 393  	    var_offer_index as "OFFER_INDEX"
10:28:44 394  	  FROM
10:28:44 395  	    OFFER
10:28:44 396  	  WHERE
10:28:44 397  	    OFFER.ID = var_offer_id;
10:28:44 398  	END IF;
10:28:44 399  
10:28:44 400  EXCEPTION
10:28:44 401  WHEN BAD_LICENSE_ID THEN
10:28:44 402  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 403  	  SPROC_NAME, 'No such license');
10:28:44 404  WHEN CAN_NOT_GET_OFFER_INFO THEN
10:28:44 405  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 406  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
10:28:44 407  WHEN OTHERS THEN
10:28:44 408  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 409  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 410  END GET_RECURRING_OFFER;
10:28:44 411  
10:28:44 412  /******************************************************************************/
10:28:44 413  
10:28:44 414  PROCEDURE GET_NEXT_OFFER (
10:28:44 415  	in_license_id  IN NUMBER,
10:28:44 416  	out_result_set OUT SYS_REFCURSOR
10:28:44 417  ) AS
10:28:44 418  -- VARIABLES
10:28:44 419  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
10:28:44 420  var_offer_chain_id	NUMBER;
10:28:44 421  var_offer_id		NUMBER;
10:28:44 422  var_license_current_index NUMBER;
10:28:44 423  var_next_offer_index	NUMBER;
10:28:44 424  -- EXCEPTIONS
10:28:44 425  BAD_LICENSE_ID	      EXCEPTION;
10:28:44 426  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
10:28:44 427  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:28:44 428  BEGIN
10:28:44 429  
10:28:44 430  	BEGIN
10:28:44 431  	  SELECT
10:28:44 432  	    SUBSCRIPTION.OFFER_CHAIN_ID,
10:28:44 433  	    LICENSE.OFFER_ID,
10:28:44 434  	    LICENSE.CURRENT_OFFER_INDEX
10:28:44 435  	    into
10:28:44 436  	    var_offer_chain_id,
10:28:44 437  	    var_offer_id,
10:28:44 438  	    var_license_current_index
10:28:44 439  	  FROM
10:28:44 440  	    LICENSE
10:28:44 441  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 442  	  WHERE
10:28:44 443  	    LICENSE.ID = in_license_id;
10:28:44 444  	  EXCEPTION
10:28:44 445  	    WHEN NO_DATA_FOUND THEN
10:28:44 446  	      RAISE BAD_LICENSE_ID;
10:28:44 447  	END;
10:28:44 448  
10:28:44 449  	BEGIN
10:28:44 450  	  var_next_offer_index := PROCS_OFFER_CHAIN_V24.GET_NEXT_OFFER_INDEX(
10:28:44 451  	    var_offer_chain_id,
10:28:44 452  	    var_license_current_index
10:28:44 453  	  );
10:28:44 454  	  EXCEPTION
10:28:44 455  	    WHEN OTHERS THEN
10:28:44 456  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:44 457  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
10:28:44 458  	END;
10:28:44 459  
10:28:44 460  	IF var_next_offer_index IS NULL THEN
10:28:44 461  	  -- RETURN NULL;
10:28:44 462  	  -- TODO: Remove this hardcode
10:28:44 463  	  OPEN out_result_set FOR
10:28:44 464  	  SELECT
10:28:44 465  	    OFFER.ID,
10:28:44 466  	    OFFER.OFFER_STATUS_ID,
10:28:44 467  	    OFFER.ENTITLEMENT_DURATION,
10:28:44 468  	    OFFER.CREATED_BY,
10:28:44 469  	    OFFER.CREATE_DATE,
10:28:44 470  	    OFFER.UPDATED_BY,
10:28:44 471  	    OFFER.UPDATE_DATE,
10:28:44 472  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
10:28:44 473  	  FROM
10:28:44 474  	    OFFER_OFFER_CHAIN
10:28:44 475  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:28:44 476  	  WHERE
10:28:44 477  	    1=2;
10:28:44 478  	ELSE
10:28:44 479  	  OPEN out_result_set FOR
10:28:44 480  	  SELECT
10:28:44 481  	    OFFER.ID,
10:28:44 482  	    OFFER.OFFER_STATUS_ID,
10:28:44 483  	    OFFER.ENTITLEMENT_DURATION,
10:28:44 484  	    OFFER.CREATED_BY,
10:28:44 485  	    OFFER.CREATE_DATE,
10:28:44 486  	    OFFER.UPDATED_BY,
10:28:44 487  	    OFFER.UPDATE_DATE,
10:28:44 488  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
10:28:44 489  	  FROM
10:28:44 490  	    OFFER_OFFER_CHAIN
10:28:44 491  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:28:44 492  	  WHERE
10:28:44 493  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:28:44 494  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
10:28:44 495  	END IF;
10:28:44 496  
10:28:44 497  EXCEPTION
10:28:44 498  WHEN BAD_LICENSE_ID THEN
10:28:44 499  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 500  	  SPROC_NAME, 'No such license');
10:28:44 501  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
10:28:44 502  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 503  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
10:28:44 504  WHEN OTHERS THEN
10:28:44 505  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 506  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 507  END GET_NEXT_OFFER;
10:28:44 508  
10:28:44 509  /******************************************************************************/
10:28:44 510  
10:28:44 511  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
10:28:44 512  	in_license_id IN NUMBER,
10:28:44 513  	out_group_id  OUT NUMBER
10:28:44 514  ) AS
10:28:44 515  -- VARIABLES
10:28:44 516  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
10:28:44 517  var_subscription_id NUMBER;
10:28:44 518  var_group_id	  NUMBER;
10:28:44 519  -- EXCEPTIONS
10:28:44 520  BAD_LICENSE_ID	   EXCEPTION;
10:28:44 521  CAN_NOT_GET_GROUP_ID EXCEPTION;
10:28:44 522  BEGIN
10:28:44 523  
10:28:44 524  	-- Get subscription id
10:28:44 525  	BEGIN
10:28:44 526  	  SELECT
10:28:44 527  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
10:28:44 528  	  FROM
10:28:44 529  	    LICENSE
10:28:44 530  	  WHERE
10:28:44 531  	    LICENSE.ID = in_license_id;
10:28:44 532  	  EXCEPTION
10:28:44 533  	    WHEN NO_DATA_FOUND THEN
10:28:44 534  	      RAISE BAD_LICENSE_ID;
10:28:44 535  	END;
10:28:44 536  
10:28:44 537  	-- Get group id
10:28:44 538  	BEGIN
10:28:44 539  	  SELECT
10:28:44 540  	    ACCOUNT.GROUP_ID into var_group_id
10:28:44 541  	  FROM
10:28:44 542  	    SUBSCRIPTION
10:28:44 543  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:28:44 544  	  WHERE
10:28:44 545  	    SUBSCRIPTION.ID = var_subscription_id;
10:28:44 546  	  EXCEPTION
10:28:44 547  	    WHEN NO_DATA_FOUND THEN
10:28:44 548  	      RAISE CAN_NOT_GET_GROUP_ID;
10:28:44 549  	END;
10:28:44 550  
10:28:44 551  	out_group_id := var_group_id;
10:28:44 552  
10:28:44 553  EXCEPTION
10:28:44 554  WHEN BAD_LICENSE_ID THEN
10:28:44 555  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 556  	  SPROC_NAME, 'No such license');
10:28:44 557  WHEN CAN_NOT_GET_GROUP_ID THEN
10:28:44 558  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 559  	  SPROC_NAME, 'Could not get group id');
10:28:44 560  WHEN OTHERS THEN
10:28:44 561  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 562  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 563  END GET_GROUP_ID_BY_LICENSE_ID;
10:28:44 564  
10:28:44 565  /******************************************************************************/
10:28:44 566  
10:28:44 567  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
10:28:44 568  	out_result_set OUT SYS_REFCURSOR
10:28:44 569  ) AS
10:28:44 570  BEGIN
10:28:44 571  	OPEN out_result_set FOR
10:28:44 572  	  SELECT * FROM (
10:28:44 573  	    SELECT
10:28:44 574  	      ID,
10:28:44 575  	      CREATE_DATE,
10:28:44 576  	      CREATED_BY,
10:28:44 577  	      CURRENT_OFFER_INDEX,
10:28:44 578  	      CURRENT_OFFER_RECURR_NUM,
10:28:44 579  	      END_DATE,
10:28:44 580  	      ENTITLEMENT_END_DATE,
10:28:44 581  	      INVOICE_ID,
10:28:44 582  	      IS_EXTENSION,
10:28:44 583  	      NEEDS_ENTITLEMENTS,
10:28:44 584  	      OFFER_ID,
10:28:44 585  	      START_DATE,
10:28:44 586  	      (SELECT VALUE FROM LICENSE_STATUS WHERE ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE) STATUS,
10:28:44 587  	      SUBSCRIPTION_ID,
10:28:44 588  	      UPDATE_DATE,
10:28:44 589  	      UPDATED_BY
10:28:44 590  	    FROM
10:28:44 591  	      LICENSE
10:28:44 592  	    WHERE
10:28:44 593  	      NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V24.TRUE
10:28:44 594  	    AND ROWNUM <= 5000
10:28:44 595  	    ORDER BY dbms_random.value
10:28:44 596  ) WHERE
10:28:44 597  	ROWNUM <= 500;
10:28:44 598  
10:28:44 599  END GET_NEED_ENTITLEMENTS_LICENSES;
10:28:44 600  
10:28:44 601  /******************************************************************************/
10:28:44 602  
10:28:44 603  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
10:28:44 604  	in_license_id	      IN NUMBER,
10:28:44 605  	in_needs_entitlements IN NUMBER,
10:28:44 606  	in_updated_by	      IN VARCHAR2
10:28:44 607  ) AS
10:28:44 608  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
10:28:44 609  -- VARIABLES
10:28:44 610  temp_license_id NUMBER;
10:28:44 611  -- EXCEPTIONS
10:28:44 612  BAD_LICENSE_ID	     EXCEPTION;
10:28:44 613  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
10:28:44 614  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44 615  BEGIN
10:28:44 616  
10:28:44 617  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V24.TRUE
10:28:44 618  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:44 619  	  RAISE BAD_ENTITLEMENTS_FLAG;
10:28:44 620  	END IF;
10:28:44 621  
10:28:44 622  	BEGIN
10:28:44 623  	  SELECT
10:28:44 624  	    LICENSE.ID into temp_license_id
10:28:44 625  	  FROM
10:28:44 626  	    LICENSE
10:28:44 627  	  WHERE
10:28:44 628  	    LICENSE.ID = in_license_id;
10:28:44 629  	  EXCEPTION
10:28:44 630  	    WHEN NO_DATA_FOUND THEN
10:28:44 631  	      RAISE BAD_LICENSE_ID;
10:28:44 632  	END;
10:28:44 633  
10:28:44 634  	PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 635  	  in_license_id 	=> in_license_id,
10:28:44 636  	  in_needs_entitlements => in_needs_entitlements,
10:28:44 637  	  in_updated_by 	=> in_updated_by
10:28:44 638  	);
10:28:44 639  
10:28:44 640  EXCEPTION
10:28:44 641  WHEN BAD_ENTITLEMENTS_FLAG THEN
10:28:44 642  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 643  	  SPROC_NAME, 'Bad entitlements flag value');
10:28:44 644  WHEN BAD_LICENSE_ID THEN
10:28:44 645  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 646  	  SPROC_NAME, 'No such license');
10:28:44 647  WHEN OTHERS THEN
10:28:44 648  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 649  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 650  END UPDATE_NEED_ENTITLEMENTS_FLAG;
10:28:44 651  
10:28:44 652  
10:28:44 653  /******************************************************************************/
10:28:44 654  
10:28:44 655  PROCEDURE GET_LICENSE_BY_ID (
10:28:44 656  	in_license_id  IN NUMBER,
10:28:44 657  	out_result_set OUT SYS_REFCURSOR
10:28:44 658  ) AS
10:28:44 659  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
10:28:44 660  -- VARIABLES
10:28:44 661  temp_license_id NUMBER;
10:28:44 662  -- EXCEPTIONS
10:28:44 663  BAD_LICENSE_ID EXCEPTION;
10:28:44 664  BEGIN
10:28:44 665  
10:28:44 666  	BEGIN
10:28:44 667  	  SELECT
10:28:44 668  	    l.id into temp_license_id
10:28:44 669  	  FROM
10:28:44 670  	    license l
10:28:44 671  	  WHERE
10:28:44 672  	    l.id = in_license_id;
10:28:44 673  	  EXCEPTION
10:28:44 674  	    WHEN NO_DATA_FOUND THEN
10:28:44 675  	      RAISE BAD_LICENSE_ID;
10:28:44 676  	END;
10:28:44 677  
10:28:44 678  	OPEN out_result_set FOR
10:28:44 679  	SELECT
10:28:44 680  	  ID,
10:28:44 681  	  LICENSE_STATUS_ID,
10:28:44 682  	  (SELECT VALUE FROM LICENSE_STATUS WHERE ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE) STATUS,
10:28:44 683  	  SUBSCRIPTION_ID,
10:28:44 684  	  INVOICE_ID,
10:28:44 685  	  OFFER_ID,
10:28:44 686  	  START_DATE,
10:28:44 687  	  END_DATE,
10:28:44 688  	  ENTITLEMENT_END_DATE,
10:28:44 689  	  IS_EXTENSION,
10:28:44 690  	  CREATE_DATE,
10:28:44 691  	  CREATED_BY,
10:28:44 692  	  UPDATE_DATE,
10:28:44 693  	  UPDATED_BY,
10:28:44 694  	  CURRENT_OFFER_INDEX,
10:28:44 695  	  CURRENT_OFFER_RECURR_NUM,
10:28:44 696  	  NEEDS_ENTITLEMENTS
10:28:44 697  	FROM
10:28:44 698  	  LICENSE
10:28:44 699  	WHERE
10:28:44 700  	  ID = in_license_id;
10:28:44 701  
10:28:44 702  EXCEPTION
10:28:44 703  WHEN BAD_LICENSE_ID THEN
10:28:44 704  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 705  	  SPROC_NAME, 'No such license');
10:28:44 706  END GET_LICENSE_BY_ID;
10:28:44 707  
10:28:44 708  /******************************************************************************/
10:28:44 709  
10:28:44 710  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
10:28:44 711  	in_subscription_id IN NUMBER,
10:28:44 712  	in_end_date IN DATE,
10:28:44 713  	in_updated_by IN VARCHAR2
10:28:44 714  ) AS
10:28:44 715  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
10:28:44 716  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44 717  var_latest_lice NUMBER;
10:28:44 718  BEGIN
10:28:44 719  	SELECT max(id)
10:28:44 720  	INTO  var_latest_lice
10:28:44 721  	FROM LICENSE
10:28:44 722  	WHERE
10:28:44 723  	  subscription_id = in_subscription_id
10:28:44 724  	;
10:28:44 725  
10:28:44 726  	PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 727  	  in_license_id        => var_latest_lice,
10:28:44 728  	  in_updated_by        => in_updated_by,
10:28:44 729  	  in_needs_entitlements => GLOBAL_CONSTANTS_V24.TRUE,
10:28:44 730  	  in_end_date	       => in_end_date,
10:28:44 731  	  in_entitlement_end_date => in_end_date
10:28:44 732  	);
10:28:44 733  
10:28:44 734  EXCEPTION
10:28:44 735  WHEN NO_DATA_FOUND THEN
10:28:44 736  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 737  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
10:28:44 738  WHEN OTHERS THEN
10:28:44 739  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 740  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 741  END UP_LATEST_LICE_END_BY_SUBID;
10:28:44 742  
10:28:44 743  /******************************************************************************/
10:28:44 744  
10:28:44 745  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
10:28:44 746  	in_days_before_close	 IN NUMBER,
10:28:44 747  	in_num_licenses_to_fetch IN NUMBER,
10:28:44 748  	out_result_set		 OUT SYS_REFCURSOR
10:28:44 749  ) AS
10:28:44 750  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRACE_LICE_FOR_FINAL_TRANS';
10:28:44 751  BEGIN
10:28:44 752  	OPEN out_result_set FOR
10:28:44 753  	SELECT
10:28:44 754  	    *
10:28:44 755  	FROM
10:28:44 756  	    (
10:28:44 757  		SELECT
10:28:44 758  		    l.id
10:28:44 759  		FROM
10:28:44 760  		    license l
10:28:44 761  		JOIN
10:28:44 762  		    invoice i
10:28:44 763  		ON
10:28:44 764  		    l.invoice_id = i.id
10:28:44 765  		WHERE
10:28:44 766  		    i.invoice_status_id = GLOBAL_STATUSES_V24.INVOICE_OPEN
10:28:44 767  		AND l.license_status_id = GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD
10:28:44 768  		AND SYSDATE + in_days_before_close >= l.grace_end_date
10:28:44 769  		AND NOT EXISTS
10:28:44 770  		    (
10:28:44 771  			SELECT
10:28:44 772  			    1
10:28:44 773  			FROM
10:28:44 774  			    charge c
10:28:44 775  			WHERE
10:28:44 776  			    c.invoice_id = i.id
10:28:44 777  			AND c.charge_status_id = GLOBAL_STATUSES_V24.CHARGE_OPENED)
10:28:44 778  		AND rownum <= in_num_licenses_to_fetch * 10
10:28:44 779  		ORDER BY
10:28:44 780  		    dbms_random.value)
10:28:44 781  	WHERE
10:28:44 782  	    rownum <= in_num_licenses_to_fetch;
10:28:44 783  END GET_GRACE_LICE_FOR_FINAL_TRANS;
10:28:44 784  
10:28:44 785  END PROCS_LICENSE_V24;
10:28:44 786  .
10:28:44 SQL> /

Package body created.

Elapsed: 00:00:00.13
10:28:44 SQL> 
10:28:44 SQL> prompt Compiling body for procs_charge.sql
Compiling body for procs_charge.sql
10:28:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V24" AS
10:28:44   2  
10:28:44   3  PROCEDURE CREATE_CHARGE(
10:28:44   4  /*
10:28:44   5  Throws exceptions:
10:28:44   6  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44   7  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44   8  */
10:28:44   9  	in_invoice_id	      IN NUMBER,
10:28:44  10  	in_transaction_id     IN NUMBER,
10:28:44  11  	in_instrument_type_id IN NUMBER,
10:28:44  12  	in_instrument_id      IN NUMBER,
10:28:44  13  	in_charge_amount      IN NUMBER,
10:28:44  14  	in_created_by	      IN VARCHAR2,
10:28:44  15  	in_charge_status_id   IN NUMBER,
10:28:44  16  	out_charge_id	      OUT NUMBER
10:28:44  17  ) AS
10:28:44  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
10:28:44  19  -- VARIABLES
10:28:44  20  temp_invoice_id	  NUMBER;
10:28:44  21  temp_transaction_id NUMBER;
10:28:44  22  var_new_charge_id   NUMBER;
10:28:44  23  -- EXCEPTIONS
10:28:44  24  BAD_INVOICE_ID	     EXCEPTION;
10:28:44  25  BAD_TRANSACTION_ID     EXCEPTION;
10:28:44  26  BAD_PAYPAL_ID	     EXCEPTION;
10:28:44  27  BAD_CREDIT_CARD_ID     EXCEPTION;
10:28:44  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
10:28:44  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
10:28:44  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44  31  BEGIN
10:28:44  32  	-- Check that incoming data is correct
10:28:44  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD
10:28:44  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL THEN
10:28:44  35  	  RAISE BAD_INSTRUMENT_TYPE;
10:28:44  36  	END IF;
10:28:44  37  
10:28:44  38  	-- Check that invoice exists
10:28:44  39  	BEGIN
10:28:44  40  	  SELECT
10:28:44  41  	    INVOICE.ID into temp_invoice_id
10:28:44  42  	  FROM
10:28:44  43  	    INVOICE
10:28:44  44  	  WHERE
10:28:44  45  	    INVOICE.ID = in_invoice_id;
10:28:44  46  	  EXCEPTION
10:28:44  47  	    WHEN NO_DATA_FOUND THEN
10:28:44  48  	      RAISE BAD_INVOICE_ID;
10:28:44  49  	END;
10:28:44  50  
10:28:44  51  	-- Check that transaction exists
10:28:44  52  	BEGIN
10:28:44  53  	  SELECT
10:28:44  54  	    TRANSACTION.ID into temp_transaction_id
10:28:44  55  	  FROM
10:28:44  56  	    TRANSACTION
10:28:44  57  	  WHERE
10:28:44  58  	    TRANSACTION.ID = in_transaction_id;
10:28:44  59  	  EXCEPTION
10:28:44  60  	    WHEN NO_DATA_FOUND THEN
10:28:44  61  	      RAISE BAD_TRANSACTION_ID;
10:28:44  62  	END;
10:28:44  63  
10:28:44  64  	-- Check that instrument exists
10:28:44  65  	IF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD THEN
10:28:44  66  	  IF PROCS_FIN_INSTRUMENTS_V24.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:44  67  	    RAISE BAD_CREDIT_CARD_ID;
10:28:44  68  	  END IF;
10:28:44  69  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL THEN
10:28:44  70  	  IF PROCS_FIN_INSTRUMENTS_V24.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:44  71  	    RAISE BAD_PAYPAL_ID;
10:28:44  72  	  END IF;
10:28:44  73  	END IF;
10:28:44  74  
10:28:44  75  	-- Create new charge
10:28:44  76  	PROCS_CHARGE_CRU_V24.CREATE_CHARGE(
10:28:44  77  	  out_charge_id 	=> var_new_charge_id,
10:28:44  78  	  in_invoice_id 	=> in_invoice_id,
10:28:44  79  	  in_transaction_id	=> in_transaction_id,
10:28:44  80  	  in_instrument_type_id => in_instrument_type_id,
10:28:44  81  	  in_instrument_id	=> in_instrument_id,
10:28:44  82  	  in_charge_amount	=> in_charge_amount,
10:28:44  83  	  in_charge_status_id	=> in_charge_status_id,
10:28:44  84  	  in_created_by 	=> in_created_by
10:28:44  85  	);
10:28:44  86  
10:28:44  87  	out_charge_id := var_new_charge_id;
10:28:44  88  
10:28:44  89  EXCEPTION
10:28:44  90  WHEN BAD_CHARGE_STATUS_ID THEN
10:28:44  91  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44  92  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
10:28:44  93  WHEN BAD_INSTRUMENT_TYPE THEN
10:28:44  94  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44  95  	  PROCS_NAME, 'Bad instrument type id');
10:28:44  96  WHEN BAD_INVOICE_ID THEN
10:28:44  97  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44  98  	  PROCS_NAME, 'No such invoice');
10:28:44  99  WHEN BAD_TRANSACTION_ID THEN
10:28:44 100  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 101  	  PROCS_NAME, 'No such transaction');
10:28:44 102  WHEN BAD_PAYPAL_ID THEN
10:28:44 103  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 104  	  PROCS_NAME, 'No such paypal');
10:28:44 105  WHEN BAD_CREDIT_CARD_ID THEN
10:28:44 106  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 107  	  PROCS_NAME, 'No such credit card');
10:28:44 108  WHEN OTHERS THEN
10:28:44 109  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 110  	  PROCS_NAME, 'Unknown error', SQLERRM);
10:28:44 111  END CREATE_CHARGE;
10:28:44 112  
10:28:44 113  /********************************************************/
10:28:44 114  -- norlov #38562 :
10:28:44 115  PROCEDURE GET_PENDING_REFUND_CHARGES (
10:28:44 116  /*
10:28:44 117  Throws exceptions:
10:28:44 118  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 119  */
10:28:44 120  	out_result_set	    OUT SYS_REFCURSOR,
10:28:44 121  	in_row_number	    IN NUMBER DEFAULT NULL
10:28:44 122  ) AS
10:28:44 123  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
10:28:44 124  -- COMSTANTS
10:28:44 125  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
10:28:44 126  -- VARIABLES
10:28:44 127  var_row_number NUMBER;
10:28:44 128  BEGIN
10:28:44 129  	IF in_row_number IS NULL THEN
10:28:44 130  	  var_row_number := DEFAULT_ROW_NUMBER;
10:28:44 131  	ELSE
10:28:44 132  	  var_row_number := in_row_number;
10:28:44 133  	END IF;
10:28:44 134  
10:28:44 135  	-- Select charges
10:28:44 136  	OPEN out_result_set FOR
10:28:44 137  SELECT * FROM
10:28:44 138  (
10:28:44 139  	SELECT
10:28:44 140  	  CHARGE.ID,
10:28:44 141  	  CHARGE.TRANSACTION_ID,
10:28:44 142  	  CHARGE.INSTRUMENT_ID,
10:28:44 143  	  CHARGE.INSTRUMENT_TYPE_ID,
10:28:44 144  	  CHARGE.CHARGE_AMOUNT,
10:28:44 145  	  CHARGE.CREATE_DATE,
10:28:44 146  	  CHARGE.CREATED_BY,
10:28:44 147  	  CHARGE.INVOICE_ID
10:28:44 148  	FROM
10:28:44 149  	  CHARGE
10:28:44 150  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:28:44 151  	WHERE
10:28:44 152  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V24.TRANSACTION_PENDING
10:28:44 153  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V24.TRUE
10:28:44 154  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
10:28:44 155  	  AND NOT EXISTS
10:28:44 156  	  (
10:28:44 157  	    SELECT NULL
10:28:44 158  	    FROM PROCESS_RETRY_THROTTLE
10:28:44 159  	    WHERE PROCESS_NAME = SPROC_NAME
10:28:44 160  	      AND GENERIC_ID = CHARGE.ID
10:28:44 161  	  )
10:28:44 162  	  AND ROWNUM <= var_row_number*10
10:28:44 163  	  ORDER BY dbms_random.value
10:28:44 164  ) WHERE
10:28:44 165  	  ROWNUM <= var_row_number;
10:28:44 166  
10:28:44 167  END GET_PENDING_REFUND_CHARGES;
10:28:44 168  /******************************************************************************/
10:28:44 169  
10:28:44 170  PROCEDURE GET_UNPROCESSED_CHARGES (
10:28:44 171  /*
10:28:44 172  Throws exceptions:
10:28:44 173  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 174  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 175  */
10:28:44 176  	in_invoice_id  IN NUMBER,
10:28:44 177  	out_result_set OUT SYS_REFCURSOR
10:28:44 178  ) AS
10:28:44 179  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
10:28:44 180  -- VARIABLES
10:28:44 181  temp_invoice_id NUMBER;
10:28:44 182  -- EXCEPTIONS
10:28:44 183  BAD_INVOICE_ID EXCEPTION;
10:28:44 184  BEGIN
10:28:44 185  
10:28:44 186  	-- Check that invoice exists
10:28:44 187  	BEGIN
10:28:44 188  	  SELECT
10:28:44 189  	    INVOICE.ID into temp_invoice_id
10:28:44 190  	  FROM
10:28:44 191  	    INVOICE
10:28:44 192  	  WHERE
10:28:44 193  	    INVOICE.ID = in_invoice_id;
10:28:44 194  	  EXCEPTION
10:28:44 195  	    WHEN NO_DATA_FOUND THEN
10:28:44 196  	      RAISE BAD_INVOICE_ID;
10:28:44 197  	END;
10:28:44 198  
10:28:44 199  	-- Select charges
10:28:44 200  	OPEN out_result_set FOR
10:28:44 201  	SELECT
10:28:44 202  	  CHARGE.ID,
10:28:44 203  	  CHARGE.TRANSACTION_ID,
10:28:44 204  	  CHARGE.INSTRUMENT_ID,
10:28:44 205  	  CHARGE.INSTRUMENT_TYPE_ID,
10:28:44 206  	  CHARGE.CHARGE_AMOUNT,
10:28:44 207  	  CHARGE.CREATE_DATE,
10:28:44 208  	  CHARGE.CREATED_BY,
10:28:44 209  	  CHARGE.INVOICE_ID
10:28:44 210  	FROM
10:28:44 211  	  CHARGE
10:28:44 212  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:28:44 213  	WHERE
10:28:44 214  	  CHARGE.INVOICE_ID = in_invoice_id
10:28:44 215  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V24.CHARGE_OPENED
10:28:44 216  	  AND
10:28:44 217  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V24.TRANSACTION_PENDING;
10:28:44 218  
10:28:44 219  EXCEPTION
10:28:44 220  WHEN BAD_INVOICE_ID THEN
10:28:44 221  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 222  	  SPROC_NAME, 'No such invoice');
10:28:44 223  WHEN OTHERS THEN
10:28:44 224  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 225  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 226  END GET_UNPROCESSED_CHARGES;
10:28:44 227  
10:28:44 228  /******************************************************************************/
10:28:44 229  
10:28:44 230  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
10:28:44 231  /*
10:28:44 232  Throws exceptions:
10:28:44 233  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 234  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 235  */
10:28:44 236  	in_charge_id	    IN NUMBER,
10:28:44 237  	out_subscription_id OUT NUMBER
10:28:44 238  ) AS
10:28:44 239  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
10:28:44 240  -- VARIABLES
10:28:44 241  var_invoice_id	  NUMBER;
10:28:44 242  var_subscription_id NUMBER;
10:28:44 243  -- EXCEPTIONS
10:28:44 244  BAD_CHARGE_ID		EXCEPTION;
10:28:44 245  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
10:28:44 246  BEGIN
10:28:44 247  
10:28:44 248  	BEGIN
10:28:44 249  	  SELECT
10:28:44 250  	    CHARGE.INVOICE_ID into var_invoice_id
10:28:44 251  	  FROM
10:28:44 252  	    CHARGE
10:28:44 253  	  WHERE
10:28:44 254  	    CHARGE.ID = in_charge_id;
10:28:44 255  	  EXCEPTION
10:28:44 256  	    WHEN NO_DATA_FOUND THEN
10:28:44 257  	      RAISE BAD_CHARGE_ID;
10:28:44 258  	END;
10:28:44 259  
10:28:44 260  	BEGIN
10:28:44 261  	  SELECT
10:28:44 262  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
10:28:44 263  	  FROM
10:28:44 264  	    LICENSE
10:28:44 265  	  WHERE
10:28:44 266  	    LICENSE.INVOICE_ID = var_invoice_id
10:28:44 267  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
10:28:44 268  	  EXCEPTION
10:28:44 269  	    WHEN NO_DATA_FOUND THEN
10:28:44 270  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
10:28:44 271  	END;
10:28:44 272  
10:28:44 273  	out_subscription_id := var_subscription_id;
10:28:44 274  
10:28:44 275  EXCEPTION
10:28:44 276  WHEN BAD_CHARGE_ID THEN
10:28:44 277  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 278  	  SPROC_NAME, 'No such charge');
10:28:44 279  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
10:28:44 280  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 281  	  SPROC_NAME, 'Could not find subscription for given charge');
10:28:44 282  WHEN OTHERS THEN
10:28:44 283  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 284  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 285  END GET_SUBSCR_ID_BY_CHARGE_ID;
10:28:44 286  
10:28:44 287  /******************************************************************************/
10:28:44 288  
10:28:44 289  PROCEDURE UPDATE_CHARGE_STATUS (
10:28:44 290  /*
10:28:44 291  Throws exceptions:
10:28:44 292  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 293  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 294  */
10:28:44 295  	in_charge_id	    IN CHARGE.ID%TYPE,
10:28:44 296  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:28:44 297  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
10:28:44 298  ) AS
10:28:44 299  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
10:28:44 300  -- EXCEPTIONS
10:28:44 301  BAD_CHARGE_ID	     EXCEPTION;
10:28:44 302  BAD_STATUS_ID	     EXCEPTION;
10:28:44 303  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44 304  BEGIN
10:28:44 305  
10:28:44 306  
10:28:44 307  	PROCS_CHARGE_CRU_V24.UPDATE_CHARGE(
10:28:44 308  	  in_charge_id	      => in_charge_id,
10:28:44 309  	  in_charge_status_id => in_charge_status_id,
10:28:44 310  	  in_updated_by       => in_updated_by
10:28:44 311  	);
10:28:44 312  
10:28:44 313  	IF SQL%ROWCOUNT = 0 THEN
10:28:44 314  	  RAISE BAD_CHARGE_ID;
10:28:44 315  	END IF;
10:28:44 316  
10:28:44 317  EXCEPTION
10:28:44 318  WHEN BAD_CHARGE_ID THEN
10:28:44 319  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 320  	  SPROC_NAME, 'No such charge');
10:28:44 321  WHEN BAD_STATUS_ID THEN
10:28:44 322  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 323  	  SPROC_NAME, 'Bad status id');
10:28:44 324  WHEN OTHERS THEN
10:28:44 325  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 326  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 327  END UPDATE_CHARGE_STATUS;
10:28:44 328  
10:28:44 329  FUNCTION IS_CHARGE_COLLECTED (
10:28:44 330  /*
10:28:44 331  Throws:
10:28:44 332  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 333  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 334  Returns:
10:28:44 335  GLOBAL_CONST.TRUE if transaction collected,
10:28:44 336  GLOBAL_CONST.FALSE else
10:28:44 337  */
10:28:44 338  	in_charge_id IN NUMBER
10:28:44 339  ) RETURN NUMBER AS
10:28:44 340  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
10:28:44 341  -- VARIABLES
10:28:44 342  var_transaction_id NUMBER;
10:28:44 343  is_transaction_collected NUMBER;
10:28:44 344  -- EXCEPTIONS
10:28:44 345  BAD_CHARGE_ID	       EXCEPTION;
10:28:44 346  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
10:28:44 347  EXCEPTION_MESSAGE        VARCHAR2(1024);
10:28:44 348  BEGIN
10:28:44 349  
10:28:44 350  	BEGIN
10:28:44 351  	  SELECT
10:28:44 352  	    CHARGE.TRANSACTION_ID into var_transaction_id
10:28:44 353  	  FROM
10:28:44 354  	    CHARGE
10:28:44 355  	  WHERE
10:28:44 356  	    CHARGE.ID = in_charge_id;
10:28:44 357  	  EXCEPTION
10:28:44 358  	    WHEN NO_DATA_FOUND THEN
10:28:44 359  	      RAISE BAD_CHARGE_ID;
10:28:44 360  	END;
10:28:44 361  
10:28:44 362  	BEGIN
10:28:44 363  	  is_transaction_collected := PROCS_TRANSACTION_V24.IS_TRANSACTION_COLLECTED(var_transaction_id);
10:28:44 364  	  EXCEPTION
10:28:44 365  	    WHEN OTHERS THEN
10:28:44 366  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:44 367  	      RAISE CAN_NOT_CHECK_TRANSACTION;
10:28:44 368  	END;
10:28:44 369  
10:28:44 370  	RETURN is_transaction_collected;
10:28:44 371  
10:28:44 372  EXCEPTION
10:28:44 373  WHEN BAD_CHARGE_ID THEN
10:28:44 374  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 375  	  SPROC_NAME, 'No such charge');
10:28:44 376  WHEN CAN_NOT_CHECK_TRANSACTION THEN
10:28:44 377  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 378  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
10:28:44 379  WHEN OTHERS THEN
10:28:44 380  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 381  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 382  END;
10:28:44 383  
10:28:44 384  PROCEDURE GET_COLLECTED_CHARGES (
10:28:44 385  /*
10:28:44 386  Throws exceptions:
10:28:44 387  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 388  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 389  */
10:28:44 390  	in_invoice_id  IN NUMBER,
10:28:44 391  	out_result_set OUT SYS_REFCURSOR
10:28:44 392  ) AS
10:28:44 393  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
10:28:44 394  -- VARIABLES
10:28:44 395  temp_invoice_id NUMBER;
10:28:44 396  -- EXCEPTIONS
10:28:44 397  BAD_INVOICE_ID  EXCEPTION;
10:28:44 398  BEGIN
10:28:44 399  
10:28:44 400  	-- Check that invoice exists
10:28:44 401  	BEGIN
10:28:44 402  	  SELECT
10:28:44 403  	    INVOICE.ID into temp_invoice_id
10:28:44 404  	  FROM
10:28:44 405  	    INVOICE
10:28:44 406  	  WHERE
10:28:44 407  	    INVOICE.ID = in_invoice_id;
10:28:44 408  	  EXCEPTION
10:28:44 409  	    WHEN NO_DATA_FOUND THEN
10:28:44 410  	      RAISE BAD_INVOICE_ID;
10:28:44 411  	END;
10:28:44 412  
10:28:44 413  	-- Select charges
10:28:44 414  	OPEN out_result_set FOR
10:28:44 415  	SELECT
10:28:44 416  	  CHARGE.ID,
10:28:44 417  	  CHARGE.TRANSACTION_ID,
10:28:44 418  	  CHARGE.INSTRUMENT_ID,
10:28:44 419  	  CHARGE.INSTRUMENT_TYPE_ID,
10:28:44 420  	  CHARGE.CHARGE_AMOUNT,
10:28:44 421  	  CHARGE.CREATE_DATE,
10:28:44 422  	  CHARGE.CREATED_BY,
10:28:44 423  	  CHARGE.INVOICE_ID
10:28:44 424  	FROM
10:28:44 425  	  CHARGE
10:28:44 426  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:28:44 427  	WHERE
10:28:44 428  	  CHARGE.INVOICE_ID = in_invoice_id
10:28:44 429  	  AND CHARGE.CHARGE_STATUS_ID IN (GLOBAL_STATUSES_V24.CHARGE_PROCESSED, GLOBAL_STATUSES_V24.CHARGE_CAPTURED,
10:28:44 430  	      GLOBAL_STATUSES_V24.CHARGE_SETTLED,GLOBAL_STATUSES_V24.CHARGE_CHARGEBACK_CLAIM, GLOBAL_STATUSES_V24.CHARGEBACK_SETTLED)
10:28:44 431  	  AND PROCS_CHARGE_V24.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V24.TRUE;
10:28:44 432  
10:28:44 433  EXCEPTION
10:28:44 434  WHEN BAD_INVOICE_ID THEN
10:28:44 435  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 436  	  SPROC_NAME, 'No such invoice');
10:28:44 437  WHEN OTHERS THEN
10:28:44 438  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 439  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 440  END GET_COLLECTED_CHARGES;
10:28:44 441  
10:28:44 442  END PROCS_CHARGE_V24;
10:28:44 443  .
10:28:44 SQL> /

Package body created.

Elapsed: 00:00:00.08
10:28:44 SQL> 
10:28:44 SQL> prompt Compiling body for procs_subscription.sql
Compiling body for procs_subscription.sql
10:28:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V24" AS
10:28:44   2  
10:28:44   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
10:28:44   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
10:28:44   5  	in_updater	     IN VARCHAR2,
10:28:44   6  	in_duration_in_hours IN NUMBER
10:28:44   7  ) AS
10:28:44   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
10:28:44   9  var_subs_id	  SUBSCRIPTION.ID%TYPE;
10:28:44  10  var_lic_id	  LICENSE.ID%TYPE;
10:28:44  11  var_grace_start	  DATE;
10:28:44  12  var_grace_end	  DATE;
10:28:44  13  BEGIN
10:28:44  14  	SELECT
10:28:44  15  	  ID,
10:28:44  16  	  SUBSCRIPTION_ID,
10:28:44  17  	  START_DATE,
10:28:44  18  	  START_DATE + (in_duration_in_hours / 24)
10:28:44  19  	INTO var_lic_id, var_subs_id, var_grace_start, var_grace_end
10:28:44  20  	FROM
10:28:44  21  	  LICENSE
10:28:44  22  	WHERE
10:28:44  23  	  INVOICE_ID = in_invoice_id
10:28:44  24  	  AND ROWNUM <= 1;
10:28:44  25  
10:28:44  26  	PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44  27  	    in_license_id	    => var_lic_id,
10:28:44  28  	    in_updated_by	    => in_updater,
10:28:44  29  	    in_grace_start_date     => var_grace_start,
10:28:44  30  	    in_grace_end_date	    => var_grace_end,
10:28:44  31  	    in_entitlement_end_date => var_grace_end,
10:28:44  32  	    in_license_status_id    => GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD
10:28:44  33  	);
10:28:44  34  
10:28:44  35  	PROCS_SUBSCRIPTION_CRU_V24.UPDATE_SUBSCRIPTION(
10:28:44  36  	    in_subscription_id	      => var_subs_id,
10:28:44  37  	    in_updated_by	      => in_updater,
10:28:44  38  	    in_subscription_status_id => GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD
10:28:44  39  	  );
10:28:44  40  END START_GRACE_BY_INVOICE_ID;
10:28:44  41  
10:28:44  42  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
10:28:44  43  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
10:28:44  44  	in_updater    IN VARCHAR2
10:28:44  45  ) AS
10:28:44  46  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
10:28:44  47  var_subs_id	  SUBSCRIPTION.ID%TYPE;
10:28:44  48  var_lic_id	  LICENSE.ID%TYPE;
10:28:44  49  var_lic_end_date	  DATE;
10:28:44  50  BEGIN
10:28:44  51  	SELECT
10:28:44  52  	  ID,
10:28:44  53  	  SUBSCRIPTION_ID,
10:28:44  54  	  END_DATE
10:28:44  55  	INTO var_lic_id, var_subs_id, var_lic_end_date
10:28:44  56  	FROM
10:28:44  57  	  LICENSE
10:28:44  58  	WHERE
10:28:44  59  	  INVOICE_ID = in_invoice_id
10:28:44  60  	  AND ROWNUM <= 1;
10:28:44  61  
10:28:44  62  	PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44  63  	    in_license_id	    => var_lic_id,
10:28:44  64  	    in_updated_by	    => in_updater,
10:28:44  65  	    in_grace_end_date	    => SYSDATE,
10:28:44  66  	    in_entitlement_end_date => var_lic_end_date,
10:28:44  67  	    in_license_status_id    => GLOBAL_STATUSES_V24.LICENSE_ACTIVE
10:28:44  68  	);
10:28:44  69  
10:28:44  70  	PROCS_SUBSCRIPTION_CRU_V24.UPDATE_SUBSCRIPTION(
10:28:44  71  	    in_subscription_id	      => var_subs_id,
10:28:44  72  	    in_updated_by	      => in_updater,
10:28:44  73  	    in_subscription_status_id => GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44  74  	);
10:28:44  75  END STOP_GRACE_BY_INVOICE_ID;
10:28:44  76  
10:28:44  77  
10:28:44  78  PROCEDURE START_SUBSCRIPTION_CREATION (
10:28:44  79  	in_group_id	      IN NUMBER,
10:28:44  80  	in_created_by	      IN VARCHAR2,
10:28:44  81  	in_offer_chain_id     IN NUMBER,
10:28:44  82  	in_instrument_type_id IN NUMBER,
10:28:44  83  	in_instrument_id      IN NUMBER,
10:28:44  84  	in_agent_id	      IN NUMBER,
10:28:44  85  	in_note 	      IN VARCHAR2,
10:28:44  86  	out_subscription_id   OUT NUMBER,
10:28:44  87  	out_invoice_id	      OUT NUMBER,
10:28:44  88  	out_new_license_id    OUT NUMBER,
10:28:44  89  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.TRUE
10:28:44  90  ) AS
10:28:44  91  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
10:28:44  92  -- VARIABLES
10:28:44  93  var_account_id		 NUMBER;
10:28:44  94  var_account_status	 NUMBER;
10:28:44  95  var_offer_chain_status_id  NUMBER;
10:28:44  96  var_is_gift_certificate	 NUMBER;
10:28:44  97  var_is_for_redemption	 NUMBER;
10:28:44  98  var_same_offer_chains_num  NUMBER;
10:28:44  99  var_max_concurrent_subscrs NUMBER;
10:28:44 100  var_first_offer_id	 NUMBER;
10:28:44 101  var_new_invoice_id	 NUMBER;
10:28:44 102  var_new_subscription_id	 NUMBER;
10:28:44 103  var_date			 DATE := SYSDATE;
10:28:44 104  var_account_tax_exempt_id  VARCHAR2(255);
10:28:44 105  var_concur_subscription_id NUMBER;
10:28:44 106  -- EXCEPTIONS
10:28:44 107  BAD_GROUP_ID		    EXCEPTION;
10:28:44 108  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
10:28:44 109  BAD_OFFER_CHAIN		    EXCEPTION;
10:28:44 110  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
10:28:44 111  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
10:28:44 112  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
10:28:44 113  LIMIT_REACHED		    EXCEPTION;
10:28:44 114  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
10:28:44 115  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
10:28:44 116  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
10:28:44 117  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
10:28:44 118  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
10:28:44 119  CAN_NOT_CREATE_NOTE	    EXCEPTION;
10:28:44 120  
10:28:44 121  EXCEPTION_MESSAGE VARCHAR2(1024);
10:28:44 122  BEGIN
10:28:44 123  
10:28:44 124  	-- Get account id and status
10:28:44 125  	BEGIN
10:28:44 126  	  SELECT
10:28:44 127  	    ACCOUNT.ID,
10:28:44 128  	    ACCOUNT.ACCOUNT_STATUS_ID,
10:28:44 129  	    ACCOUNT.TAX_EXEMPT_ID
10:28:44 130  	    into
10:28:44 131  	    var_account_id,
10:28:44 132  	    var_account_status,
10:28:44 133  	    var_account_tax_exempt_id
10:28:44 134  	  FROM
10:28:44 135  	    ACCOUNT
10:28:44 136  	  WHERE
10:28:44 137  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:44 138  	  EXCEPTION
10:28:44 139  	  WHEN NO_DATA_FOUND THEN
10:28:44 140  	    RAISE BAD_GROUP_ID;
10:28:44 141  	END;
10:28:44 142  
10:28:44 143  	-- Could not create subscription for disabled account
10:28:44 144  	IF var_account_status = GLOBAL_STATUSES_V24.ACCOUNT_DISABLED THEN
10:28:44 145  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
10:28:44 146  	END IF;
10:28:44 147  
10:28:44 148  	-- Get offer chain status
10:28:44 149  	BEGIN
10:28:44 150  	  SELECT
10:28:44 151  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
10:28:44 152  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
10:28:44 153  	    into
10:28:44 154  	    var_offer_chain_status_id,
10:28:44 155  	    var_is_gift_certificate
10:28:44 156  	  FROM
10:28:44 157  	    OFFER_CHAIN
10:28:44 158  	  WHERE
10:28:44 159  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:28:44 160  
10:28:44 161  	  EXCEPTION
10:28:44 162  	    WHEN NO_DATA_FOUND THEN
10:28:44 163  	      RAISE BAD_OFFER_CHAIN;
10:28:44 164  	END;
10:28:44 165  
10:28:44 166  	-- Could not subscribe to inactive/disabled offer chain
10:28:44 167  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V24.OFFER_CHAIN_ACTIVE THEN
10:28:44 168  	  RAISE BAD_OFFER_CHAIN_STATUS;
10:28:44 169  	END IF;
10:28:44 170  
10:28:44 171  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
10:28:44 172  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V24.TRUE THEN
10:28:44 173  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
10:28:44 174  	END IF;
10:28:44 175  
10:28:44 176  	-- check if the OC is for Redemption:
10:28:44 177  	SELECT
10:28:44 178  	  COUNT(*) into var_is_for_redemption
10:28:44 179  	FROM
10:28:44 180  	  OFFER_CHAIN_ELIGIBILITY
10:28:44 181  	WHERE
10:28:44 182  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:28:44 183  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V24.GIFT_CERTIFICATE_REQUIRED
10:28:44 184  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V24.ELIGIBILITY_FLAG_SET;
10:28:44 185  
10:28:44 186  	IF var_is_for_redemption > 0 THEN
10:28:44 187  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
10:28:44 188  	END IF;
10:28:44 189  
10:28:44 190  	SELECT
10:28:44 191  	  COUNT(*) into var_same_offer_chains_num
10:28:44 192  	FROM
10:28:44 193  	  SUBSCRIPTION
10:28:44 194  	WHERE
10:28:44 195  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:44 196  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
10:28:44 197  	  AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44 198  	       OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD);
10:28:44 199  
10:28:44 200  	-- ELIGIBILITY LOGIC CHANGED TO:
10:28:44 201  	-- FOR EACH offer chain eligibility rule in OC:
10:28:44 202  	--   IF offer chain eligibility rule fails:
10:28:44 203  	--     deny purchase;
10:28:44 204  	--   END IF
10:28:44 205  	-- END FOR
10:28:44 206  	-- FOR EACH product eligibility rule in OC:
10:28:44 207  	--   IF product eligibilty rule fails:
10:28:44 208  	--     deny purchase;
10:28:44 209  	--   END IF
10:28:44 210  	-- END FOR
10:28:44 211  	-- allow purchase;
10:28:44 212  
10:28:44 213  	-- if user have any active existing subscriptions to the offer chain
10:28:44 214  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
10:28:44 215  	-- then deny purchase
10:28:44 216  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
10:28:44 217  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V24.INFINITY
10:28:44 218  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
10:28:44 219  	  -- Find first concurrent subscription id:
10:28:44 220  	  SELECT
10:28:44 221  	    ID into var_concur_subscription_id
10:28:44 222  	  FROM (
10:28:44 223  	    SELECT
10:28:44 224  	      ID
10:28:44 225  	    FROM
10:28:44 226  	      SUBSCRIPTION
10:28:44 227  	    WHERE
10:28:44 228  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:44 229  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
10:28:44 230  	      AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44 231  		   OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD)
10:28:44 232  	    ORDER BY
10:28:44 233  	      ID
10:28:44 234  	  )
10:28:44 235  	  WHERE
10:28:44 236  	    ROWNUM <= 1;
10:28:44 237  	  RAISE LIMIT_REACHED;
10:28:44 238  	END IF;
10:28:44 239  
10:28:44 240  	-- if user does not have any active existing subscriptions to the offer chain
10:28:44 241  	-- and if product from the offer chain is already owned from another offer chain
10:28:44 242  	-- then deny purchase
10:28:44 243  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V24.FALSE) THEN
10:28:44 244  	  FOR f_account_offer_chains IN (
10:28:44 245  	    SELECT DISTINCT
10:28:44 246  	      OFFER_CHAIN_ID
10:28:44 247  	    FROM
10:28:44 248  	      SUBSCRIPTION
10:28:44 249  	    WHERE
10:28:44 250  	      ACCOUNT_ID = var_account_id
10:28:44 251  	      AND (
10:28:44 252  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44 253  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED
10:28:44 254  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD)
10:28:44 255  	  )
10:28:44 256  	  LOOP
10:28:44 257  	    IF PROCS_OFFER_CHAIN_V24.CHECK_FOR_SAME_PRODUCTS(
10:28:44 258  	      in_offer_chain_1	       => in_offer_chain_id,
10:28:44 259  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
10:28:44 260  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V24.TRUE
10:28:44 261  	    ) = GLOBAL_CONSTANTS_V24.TRUE THEN
10:28:44 262  
10:28:44 263  	      -- Find first concurrent subscription id:
10:28:44 264  	      SELECT
10:28:44 265  		ID into var_concur_subscription_id
10:28:44 266  	      FROM (
10:28:44 267  		SELECT
10:28:44 268  		  ID
10:28:44 269  		FROM
10:28:44 270  		  SUBSCRIPTION
10:28:44 271  		WHERE
10:28:44 272  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:44 273  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
10:28:44 274  		  AND (
10:28:44 275  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44 276  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED
10:28:44 277  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD)
10:28:44 278  		ORDER BY
10:28:44 279  		  ID
10:28:44 280  	      )
10:28:44 281  	      WHERE
10:28:44 282  		ROWNUM <= 1;
10:28:44 283  
10:28:44 284  	      RAISE PRODUCT_ALREADY_PURCHASED;
10:28:44 285  	    END IF;
10:28:44 286  	  END LOOP;
10:28:44 287  	END IF;
10:28:44 288  
10:28:44 289  	BEGIN
10:28:44 290  	  PROCS_OFFER_CHAIN_V24.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
10:28:44 291  	  EXCEPTION
10:28:44 292  	    WHEN OTHERS THEN
10:28:44 293  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:44 294  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
10:28:44 295  	END;
10:28:44 296  
10:28:44 297  	BEGIN
10:28:44 298  	  PROCS_INVOICE_V24.CREATE_INVOICE(
10:28:44 299  	    in_invoice_status => GLOBAL_STATUSES_V24.INVOICE_OPEN,
10:28:44 300  	    in_created_by     => in_created_by,
10:28:44 301  	    in_tax_exempt_id  => var_account_tax_exempt_id,
10:28:44 302  	    out_invoice_id    => var_new_invoice_id
10:28:44 303  	  );
10:28:44 304  	  EXCEPTION
10:28:44 305  	    WHEN OTHERS THEN
10:28:44 306  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:44 307  	      RAISE CAN_NOT_CREATE_INVOICE;
10:28:44 308  	END;
10:28:44 309  
10:28:44 310  	BEGIN
10:28:44 311  	  PROCS_LINE_ITEMS_V24.ADD_LINE_ITEMS(
10:28:44 312  	    in_invoice_id => var_new_invoice_id,
10:28:44 313  	    in_offer_id   => var_first_offer_id,
10:28:44 314  	    in_created_by => in_created_by
10:28:44 315  	  );
10:28:44 316  	  EXCEPTION
10:28:44 317  	    WHEN OTHERS THEN
10:28:44 318  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:44 319  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
10:28:44 320  	END;
10:28:44 321  
10:28:44 322  	PROCS_SUBSCRIPTION_CRU_V24.CREATE_SUBSCRIPTION(
10:28:44 323  	  out_subscription_id	    => var_new_subscription_id,
10:28:44 324  	  in_account_id 	    => var_account_id,
10:28:44 325  	  in_purchase_date	    => var_date,
10:28:44 326  	  in_offer_chain_id	    => in_offer_chain_id,
10:28:44 327  	  in_created_by 	    => in_created_by,
10:28:44 328  	  in_instrument_type_id     => in_instrument_type_id,
10:28:44 329  	  in_instrument_id	    => in_instrument_id,
10:28:44 330  	  in_subscription_status_id => GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44 331  	);
10:28:44 332  
10:28:44 333  	BEGIN
10:28:44 334  	  PROCS_SUBSCRIPTION_V24.ANNOTATE_SUBSCRIPTION(
10:28:44 335  	    in_subscription_id => var_new_subscription_id,
10:28:44 336  	    in_agent_id        => in_agent_id,
10:28:44 337  	    in_note	       => in_note,
10:28:44 338  	    in_created_by      => in_created_by
10:28:44 339  	  );
10:28:44 340  	  EXCEPTION
10:28:44 341  	   WHEN OTHERS THEN
10:28:44 342  	     EXCEPTION_MESSAGE := SQLERRM;
10:28:44 343  	     RAISE CAN_NOT_CREATE_NOTE;
10:28:44 344  	END;
10:28:44 345  
10:28:44 346  	BEGIN
10:28:44 347  	  PROCS_LICENSE_V24.CREATE_LICENSE(
10:28:44 348  	    in_status_id		=> GLOBAL_STATUSES_V24.LICENSE_ACTIVE,
10:28:44 349  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V24.TRUE,
10:28:44 350  	    in_start_date		=> var_date,
10:28:44 351  	    in_end_date 		=> NULL, -- Will be calculated automatically
10:28:44 352  	    in_offer_id 		=> var_first_offer_id,
10:28:44 353  	    in_subscription_id		=> var_new_subscription_id,
10:28:44 354  	    in_invoice_id		=> var_new_invoice_id,
10:28:44 355  	    in_created_by		=> in_created_by,
10:28:44 356  	    in_is_extension		=> GLOBAL_CONSTANTS_V24.FALSE,
10:28:44 357  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V24.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
10:28:44 358  	    in_current_offer_recurr_num => 1,
10:28:44 359  	    out_license_id		=> out_new_license_id
10:28:44 360  	  );
10:28:44 361  	  EXCEPTION
10:28:44 362  	    WHEN OTHERS THEN
10:28:44 363  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:44 364  	      RAISE CAN_NOT_CREATE_LICENSE;
10:28:44 365  	END;
10:28:44 366  
10:28:44 367  	out_subscription_id := var_new_subscription_id;
10:28:44 368  	out_invoice_id := var_new_invoice_id;
10:28:44 369  
10:28:44 370  EXCEPTION
10:28:44 371  WHEN BAD_OFFER_CHAIN_STATUS THEN
10:28:44 372  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 373  	  SPROC_NAME, 'Offer chain is not active');
10:28:44 374  WHEN LIMIT_REACHED THEN
10:28:44 375  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.CONFLICT_ERROR,
10:28:44 376  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
10:28:44 377  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
10:28:44 378  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 379  	  SPROC_NAME, 'Can not create subsscription for disabled account');
10:28:44 380  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
10:28:44 381  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 382  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
10:28:44 383  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
10:28:44 384  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 385  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
10:28:44 386  WHEN BAD_OFFER_CHAIN THEN
10:28:44 387  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 388  	  SPROC_NAME, 'No such offer chain');
10:28:44 389  WHEN PRODUCT_ALREADY_PURCHASED THEN
10:28:44 390  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.CONFLICT_ERROR,
10:28:44 391  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
10:28:44 392  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
10:28:44 393  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 394  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
10:28:44 395  WHEN CAN_NOT_CREATE_INVOICE THEN
10:28:44 396  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 397  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
10:28:44 398  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
10:28:44 399  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 400  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
10:28:44 401  WHEN CAN_NOT_CREATE_LICENSE THEN
10:28:44 402  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 403  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
10:28:44 404  WHEN BAD_GROUP_ID THEN
10:28:44 405  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 406  	  SPROC_NAME, 'Bad group id');
10:28:44 407  WHEN CAN_NOT_CREATE_NOTE THEN
10:28:44 408  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 409  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:28:44 410  WHEN OTHERS THEN
10:28:44 411  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 412  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 413  END START_SUBSCRIPTION_CREATION;
10:28:44 414  
10:28:44 415  /******************************************************************************/
10:28:44 416  
10:28:44 417  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
10:28:44 418  	in_subscription_id    IN NUMBER,
10:28:44 419  	in_invoice_id	      IN NUMBER,
10:28:44 420  	in_instrument_type_id IN NUMBER,
10:28:44 421  	in_instrument_id      IN NUMBER,
10:28:44 422  	in_created_by	      IN VARCHAR2
10:28:44 423  ) AS
10:28:44 424  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
10:28:44 425  -- VARIABLES
10:28:44 426  var_invoice_amount     NUMBER(10, 2);
10:28:44 427  var_new_transaction_id NUMBER;
10:28:44 428  var_new_charge_id      NUMBER;
10:28:44 429  -- EXCEPTIONS
10:28:44 430  CAN_NOT_USE_FCINSTR	  EXCEPTION;
10:28:44 431  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
10:28:44 432  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
10:28:44 433  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
10:28:44 434  
10:28:44 435  EXCEPTION_MESSAGE VARCHAR2(1024);
10:28:44 436  BEGIN
10:28:44 437  
10:28:44 438  	-- Calculate invoice amount ( + discounts, taxes)
10:28:44 439  	BEGIN
10:28:44 440  	  PROCS_INVOICE_V24.CALCULATE_INVOICE_AMOUNT(
10:28:44 441  	    in_invoice_id => in_invoice_id,
10:28:44 442  	    out_amount	  => var_invoice_amount
10:28:44 443  	  );
10:28:44 444  	  EXCEPTION
10:28:44 445  	   WHEN OTHERS THEN
10:28:44 446  	     EXCEPTION_MESSAGE := SQLERRM;
10:28:44 447  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:28:44 448  	END;
10:28:44 449  
10:28:44 450  	IF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_ZCI_INSTRUMENT
10:28:44 451  	  AND var_invoice_amount > 0 THEN
10:28:44 452  	  RAISE CAN_NOT_USE_FCINSTR;
10:28:44 453  	END IF;
10:28:44 454  
10:28:44 455  	IF var_invoice_amount = 0 THEN
10:28:44 456  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
10:28:44 457  	  PROCS_INVOICE_CRU_V24.UPDATE_INVOICE(
10:28:44 458  	    in_invoice_id		   => in_invoice_id,
10:28:44 459  	    in_updated_by		   => in_created_by,
10:28:44 460  	    in_invoice_status_id	   => GLOBAL_STATUSES_V24.INVOICE_CLOSED
10:28:44 461  	  );
10:28:44 462  	ELSE
10:28:44 463  	  -- Create transaction and charge
10:28:44 464  	  BEGIN
10:28:44 465  	    PROCS_TRANSACTION_V24.CREATE_TRANSACTION(
10:28:44 466  	      in_transaction_id 	=> NULL,
10:28:44 467  	      in_status_id		=> GLOBAL_STATUSES_V24.TRANSACTION_PENDING,
10:28:44 468  	      in_amount 		=> var_invoice_amount,
10:28:44 469  	      in_created_by		=> in_created_by,
10:28:44 470  	      in_order_id		=> NULL,
10:28:44 471  	      in_transaction_type_code	=> 'START_SUBSCRIPTION',
10:28:44 472  	      out_transaction_id	=> var_new_transaction_id
10:28:44 473  	    );
10:28:44 474  	    EXCEPTION
10:28:44 475  	      WHEN OTHERS THEN
10:28:44 476  		EXCEPTION_MESSAGE := SQLERRM;
10:28:44 477  		RAISE CAN_NOT_CREATE_TRANSACTION;
10:28:44 478  	  END;
10:28:44 479  
10:28:44 480  	  BEGIN
10:28:44 481  	    PROCS_CHARGE_V24.CREATE_CHARGE(
10:28:44 482  	      in_invoice_id	    => in_invoice_id,
10:28:44 483  	      in_transaction_id     => var_new_transaction_id,
10:28:44 484  	      in_instrument_type_id => in_instrument_type_id,
10:28:44 485  	      in_instrument_id	    => in_instrument_id,
10:28:44 486  	      in_charge_amount	    => var_invoice_amount,
10:28:44 487  	      in_created_by	    => in_created_by,
10:28:44 488  	      in_charge_status_id   => GLOBAL_STATUSES_V24.CHARGE_OPENED,
10:28:44 489  	      out_charge_id	    => var_new_charge_id
10:28:44 490  	    );
10:28:44 491  	    EXCEPTION
10:28:44 492  	      WHEN OTHERS THEN
10:28:44 493  		EXCEPTION_MESSAGE := SQLERRM;
10:28:44 494  		RAISE CAN_NOT_CREATE_CHARGE;
10:28:44 495  	  END;
10:28:44 496  	END IF;
10:28:44 497  
10:28:44 498  EXCEPTION
10:28:44 499  WHEN CAN_NOT_USE_FCINSTR THEN
10:28:44 500  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 501  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
10:28:44 502  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:28:44 503  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 504  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
10:28:44 505  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:28:44 506  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 507  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:28:44 508  WHEN CAN_NOT_CREATE_CHARGE THEN
10:28:44 509  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 510  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:28:44 511  WHEN OTHERS THEN
10:28:44 512  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 513  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 514  END FINALIZE_SUBSCRIPTION_CREATION;
10:28:44 515  
10:28:44 516  /******************************************************************************/
10:28:44 517  
10:28:44 518  PROCEDURE SUSPEND_SUBSCRIPTION(
10:28:44 519  /*
10:28:44 520  Throws exceptions:
10:28:44 521  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 522  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:44 523  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 524  */
10:28:44 525  	  in_subs_id	IN NUMBER,
10:28:44 526  	  in_updated_by IN VARCHAR2
10:28:44 527  ) AS
10:28:44 528  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
10:28:44 529  var_subscription_status_id  NUMBER;
10:28:44 530  var_license_id		  NUMBER;
10:28:44 531  var_offer_id		  NUMBER;
10:28:44 532  var_license_start_date	  DATE;
10:28:44 533  var_license_end_date	  DATE;
10:28:44 534  
10:28:44 535  var_entitlement_dupration   VARCHAR2(30);
10:28:44 536  var_d_entitlement_dupration NUMBER;
10:28:44 537  
10:28:44 538  var_ym_interval INTERVAL YEAR TO MONTH;
10:28:44 539  var_ds_interval INTERVAL DAY(3) TO SECOND;
10:28:44 540  
10:28:44 541  -- EXCEPTIONS
10:28:44 542  BAD_SUBSCRIPTION_ID     EXCEPTION;
10:28:44 543  BAD_SUBSCRIPTION_STATUS EXCEPTION;
10:28:44 544  NO_LICENSE_FOUND	      EXCEPTION;
10:28:44 545  NO_OFFER_FOUND	      EXCEPTION;
10:28:44 546  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:28:44 547  BEGIN
10:28:44 548  	-- TODO: Finish this prcedure (in Phase II)
10:28:44 549  
10:28:44 550  	-- Get subscription by id. FAULT if no such subscription.
10:28:44 551  	-- begin TX
10:28:44 552  	--   Get for update associated license (subscription.license_id). FAULT if not found.
10:28:44 553  	--   Set status to PROCESSED.
10:28:44 554  	--   updated record.
10:28:44 555  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
10:28:44 556  	--   new subscription status is SUSPENDED.
10:28:44 557  	--   suspend_date is now.
10:28:44 558  	--   update subscription record.
10:28:44 559  	-- end TX
10:28:44 560  
10:28:44 561  	BEGIN
10:28:44 562  	  SELECT
10:28:44 563  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
10:28:44 564  	  FROM
10:28:44 565  	    SUBSCRIPTION
10:28:44 566  	  WHERE
10:28:44 567  	    SUBSCRIPTION.ID = in_subs_id;
10:28:44 568  	  EXCEPTION
10:28:44 569  	  WHEN NO_DATA_FOUND THEN
10:28:44 570  	    RAISE BAD_SUBSCRIPTION_ID;
10:28:44 571  	END;
10:28:44 572  
10:28:44 573  	IF var_subscription_status_id != GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE THEN
10:28:44 574  	  RAISE BAD_SUBSCRIPTION_STATUS;
10:28:44 575  	END IF;
10:28:44 576  
10:28:44 577  	BEGIN
10:28:44 578  	  SELECT
10:28:44 579  	    LICENSE.ID,
10:28:44 580  	    LICENSE.OFFER_ID,
10:28:44 581  	    LICENSE.START_DATE
10:28:44 582  	    into
10:28:44 583  	    var_license_id,
10:28:44 584  	    var_offer_id,
10:28:44 585  	    var_license_start_date
10:28:44 586  	  FROM
10:28:44 587  	    LICENSE
10:28:44 588  	  WHERE
10:28:44 589  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
10:28:44 590  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_ACTIVE;
10:28:44 591  	  EXCEPTION
10:28:44 592  	  WHEN NO_DATA_FOUND THEN
10:28:44 593  	    RAISE NO_LICENSE_FOUND;
10:28:44 594  	END;
10:28:44 595  
10:28:44 596  	PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 597  	  in_license_id        => var_license_id,
10:28:44 598  	  in_updated_by        => in_updated_by,
10:28:44 599  	  in_license_status_id => GLOBAL_STATUSES_V24.LICENSE_CLOSED
10:28:44 600  	);
10:28:44 601  
10:28:44 602  	BEGIN
10:28:44 603  	  SELECT
10:28:44 604  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
10:28:44 605  	  FROM
10:28:44 606  	    OFFER
10:28:44 607  	  WHERE
10:28:44 608  	    OFFER.ID = var_offer_id;
10:28:44 609  	  EXCEPTION
10:28:44 610  	  WHEN NO_DATA_FOUND THEN
10:28:44 611  	    RAISE NO_OFFER_FOUND;
10:28:44 612  	END;
10:28:44 613  
10:28:44 614  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
10:28:44 615  	var_ds_interval := substr(var_entitlement_dupration, 4);
10:28:44 616  
10:28:44 617  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
10:28:44 618  
10:28:44 619  	var_d_entitlement_dupration := var_license_end_date - current_date;
10:28:44 620  
10:28:44 621  	PROCS_SUBSCRIPTION_CRU_V24.UPDATE_SUBSCRIPTION(
10:28:44 622  	  in_subscription_id	       => in_subs_id,
10:28:44 623  	  in_updated_by 	       => in_updated_by,
10:28:44 624  	  in_suspend_date	       => SYSDATE,
10:28:44 625  	  in_subscription_status_id    => GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED,
10:28:44 626  	  in_days_remainning_ajustment => var_d_entitlement_dupration
10:28:44 627  	);
10:28:44 628  
10:28:44 629  EXCEPTION
10:28:44 630  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 631  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 632  	  SPROC_NAME, 'No such subscription');
10:28:44 633  WHEN BAD_SUBSCRIPTION_STATUS THEN
10:28:44 634  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 635  	  SPROC_NAME, 'Subscription is not active');
10:28:44 636  WHEN NO_LICENSE_FOUND THEN
10:28:44 637  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 638  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
10:28:44 639  WHEN NO_OFFER_FOUND THEN
10:28:44 640  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 641  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
10:28:44 642  WHEN OTHERS THEN
10:28:44 643  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 644  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 645  END SUSPEND_SUBSCRIPTION;
10:28:44 646  
10:28:44 647  /******************************************************************************/
10:28:44 648  
10:28:44 649  PROCEDURE REACTIVATE_SUBSCRIPTION (
10:28:44 650  	in_subscription_id IN  NUMBER,
10:28:44 651  	in_updated_by	   IN  VARCHAR2
10:28:44 652  ) AS
10:28:44 653  BEGIN
10:28:44 654  	-- TODO: finish this function (in Phase II)
10:28:44 655  	NULL;
10:28:44 656  END REACTIVATE_SUBSCRIPTION;
10:28:44 657  
10:28:44 658  /******************************************************************************/
10:28:44 659  
10:28:44 660  PROCEDURE GET_SUBSCRIPTION_INFO (
10:28:44 661  	  in_subscription_id  IN  NUMBER,
10:28:44 662  	  out_result_set      OUT SYS_REFCURSOR
10:28:44 663  ) AS
10:28:44 664  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
10:28:44 665  -- VARIABLES
10:28:44 666  temp_subscription_id NUMBER;
10:28:44 667  -- EXCEPTIONS
10:28:44 668  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 669  BEGIN
10:28:44 670  	-- Find subscription by id
10:28:44 671  	-- Return its details
10:28:44 672  
10:28:44 673  	BEGIN
10:28:44 674  	  SELECT
10:28:44 675  	    SUBSCRIPTION.ID into temp_subscription_id
10:28:44 676  	  FROM
10:28:44 677  	    SUBSCRIPTION
10:28:44 678  	  WHERE
10:28:44 679  	    SUBSCRIPTION.ID = in_subscription_id;
10:28:44 680  	  EXCEPTION
10:28:44 681  	    WHEN NO_DATA_FOUND THEN
10:28:44 682  	      RAISE BAD_SUBSCRIPTION_ID;
10:28:44 683  	END;
10:28:44 684  
10:28:44 685  	OPEN out_result_set FOR
10:28:44 686  	SELECT
10:28:44 687  	  SUBSCRIPTION.ACCOUNT_ID,
10:28:44 688  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
10:28:44 689  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
10:28:44 690  	  SUBSCRIPTION.PURCHASE_DATE,
10:28:44 691  	  SUBSCRIPTION.SUSPEND_DATE,
10:28:44 692  	  SUBSCRIPTION.REACTIVATION_DATE,
10:28:44 693  	  SUBSCRIPTION.CANCELLATION_DATE,
10:28:44 694  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
10:28:44 695  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
10:28:44 696  	  OFFER_CHAIN.NAME,
10:28:44 697  	  OFFER_CHAIN.DESCRIPTION,
10:28:44 698  	  OFFER_CHAIN.PRODUCT_URI,
10:28:44 699  	  SUBSCRIPTION.INSTRUMENT_ID,
10:28:44 700  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
10:28:44 701  	  PROCS_SUBSCRIPTION_V24.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
10:28:44 702  	  PROCS_SUBSCRIPTION_V24.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
10:28:44 703  	  PROCS_SUBSCRIPTION_V24.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
10:28:44 704  	  PROCS_SUBSCRIPTION_V24.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
10:28:44 705  	  (
10:28:44 706  	    SELECT
10:28:44 707  	      ACCOUNT.GROUP_ID
10:28:44 708  	      FROM ACCOUNT
10:28:44 709  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
10:28:44 710  	  ) as "GROUP_ID",
10:28:44 711  	  (
10:28:44 712  	    SELECT
10:28:44 713  	      MAX(ENTITLEMENT_END_DATE)
10:28:44 714  	      FROM LICENSE
10:28:44 715  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 716  	  )
10:28:44 717  	  as "ENT_END_DATE",
10:28:44 718  	  (
10:28:44 719  	    SELECT
10:28:44 720  	      MIN(START_DATE)
10:28:44 721  	      FROM LICENSE
10:28:44 722  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 723  	  )
10:28:44 724  	  as "ENT_START_DATE",
10:28:44 725  	  PROCS_SUBSCRIPTION_V24.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
10:28:44 726  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
10:28:44 727  	  GROUP_ACCOUNT.ID GA_ID,
10:28:44 728  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
10:28:44 729  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
10:28:44 730  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
10:28:44 731  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
10:28:44 732  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
10:28:44 733  	  GROUP_ACCOUNT.PHONE GA_PHONE,
10:28:44 734  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
10:28:44 735  	  GROUP_ACCOUNT.SEATS GA_SEATS,
10:28:44 736  	  PROCS_GROUP_ACCOUNT_V24.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
10:28:44 737  	  GROUP_ACCOUNT.IP GA_IP,
10:28:44 738  	  PROCS_SUBSCRIPTION_V24.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code,
10:28:44 739  	  PROCS_ACCOUNT_V24.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
10:28:44 740  	  PROCS_ACCOUNT_V24.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
10:28:44 741  	FROM
10:28:44 742  	  SUBSCRIPTION
10:28:44 743  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:44 744  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
10:28:44 745  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
10:28:44 746  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
10:28:44 747  	WHERE
10:28:44 748  	  SUBSCRIPTION.ID = in_subscription_id;
10:28:44 749  
10:28:44 750  EXCEPTION
10:28:44 751  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 752  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 753  	  SPROC_NAME, 'No such subscription');
10:28:44 754  WHEN OTHERS THEN
10:28:44 755  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 757  END GET_SUBSCRIPTION_INFO;
10:28:44 758  
10:28:44 759  /******************************************************************************/
10:28:44 760  
10:28:44 761  PROCEDURE GET_SUBSCRIPTION_INVOICES (
10:28:44 762  	in_subscription_id  IN	NUMBER,
10:28:44 763  	out_result_set	    OUT SYS_REFCURSOR
10:28:44 764  ) AS
10:28:44 765  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
10:28:44 766  temp_subscription_id NUMBER;
10:28:44 767  BEGIN
10:28:44 768  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
10:28:44 769  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
10:28:44 770  	--   for each license
10:28:44 771  	--     get associated invoice
10:28:44 772  	--     add to results list
10:28:44 773  	--   end loop
10:28:44 774  	-- end
10:28:44 775  
10:28:44 776  	SELECT
10:28:44 777  	  SUBSCRIPTION.ID into temp_subscription_id
10:28:44 778  	FROM
10:28:44 779  	  SUBSCRIPTION
10:28:44 780  	WHERE
10:28:44 781  	  SUBSCRIPTION.ID = in_subscription_id;
10:28:44 782  
10:28:44 783  	OPEN out_result_set FOR
10:28:44 784  	SELECT
10:28:44 785  	  INVOICE.ID,
10:28:44 786  	  INVOICE.INVOICE_STATUS_ID,
10:28:44 787  	  INVOICE.CREATE_DATE,
10:28:44 788  	  INVOICE.CREATED_BY,
10:28:44 789  	  INVOICE.UPDATE_DATE,
10:28:44 790  	  INVOICE.UPDATED_BY,
10:28:44 791  	  INVOICE.TAX_EXEMPT_ID
10:28:44 792  	FROM
10:28:44 793  	  LICENSE
10:28:44 794  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:28:44 795  	WHERE
10:28:44 796  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
10:28:44 797  
10:28:44 798  EXCEPTION
10:28:44 799  WHEN NO_DATA_FOUND THEN
10:28:44 800  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 801  	  SPROC_NAME, 'Could not find subscription with given ID');
10:28:44 802  WHEN OTHERS THEN
10:28:44 803  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 804  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 805  END GET_SUBSCRIPTION_INVOICES;
10:28:44 806  
10:28:44 807  /******************************************************************************/
10:28:44 808  
10:28:44 809  PROCEDURE GET_SUBSCRIPTION_NOTES (
10:28:44 810  	in_subscription_id  IN	NUMBER,
10:28:44 811  	out_result_set	    OUT SYS_REFCURSOR
10:28:44 812  ) AS
10:28:44 813  -- VARIABLES
10:28:44 814  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
10:28:44 815  temp_subscription_id NUMBER;
10:28:44 816  -- EXCEPTIONS
10:28:44 817  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 818  BEGIN
10:28:44 819  
10:28:44 820  	-- Check that subscription exists
10:28:44 821  	BEGIN
10:28:44 822  	  SELECT
10:28:44 823  	    SUBSCRIPTION.ID into temp_subscription_id
10:28:44 824  	  FROM
10:28:44 825  	    SUBSCRIPTION
10:28:44 826  	  WHERE
10:28:44 827  	    SUBSCRIPTION.ID = in_subscription_id;
10:28:44 828  	  EXCEPTION
10:28:44 829  	    WHEN NO_DATA_FOUND THEN
10:28:44 830  	      RAISE BAD_SUBSCRIPTION_ID;
10:28:44 831  	END;
10:28:44 832  
10:28:44 833  	OPEN out_result_set FOR
10:28:44 834  	SELECT
10:28:44 835  	  SUBSCRIPTION_NOTE.NOTE,
10:28:44 836  	  SUBSCRIPTION_NOTE.CREATED_BY,
10:28:44 837  	  SUBSCRIPTION_NOTE.CREATE_DATE
10:28:44 838  	FROM
10:28:44 839  	  SUBSCRIPTION_NOTE
10:28:44 840  	WHERE
10:28:44 841  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
10:28:44 842  	ORDER BY
10:28:44 843  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
10:28:44 844  
10:28:44 845  EXCEPTION
10:28:44 846  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 847  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 848  	  SPROC_NAME, 'No such subscription');
10:28:44 849  WHEN OTHERS THEN
10:28:44 850  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 851  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 852  END GET_SUBSCRIPTION_NOTES;
10:28:44 853  
10:28:44 854  /******************************************************************************/
10:28:44 855  
10:28:44 856  PROCEDURE ANNOTATE_SUBSCRIPTION (
10:28:44 857  	in_subscription_id IN  NUMBER,
10:28:44 858  	in_agent_id	   IN  NUMBER,
10:28:44 859  	in_note 	   IN  VARCHAR2,
10:28:44 860  	in_created_by	   IN  VARCHAR2
10:28:44 861  ) AS
10:28:44 862  -- VARIABLES
10:28:44 863  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
10:28:44 864  temp_subscription_id     NUMBER;
10:28:44 865  var_subscription_note_id NUMBER;
10:28:44 866  -- EXCEPTIONS
10:28:44 867  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 868  BEGIN
10:28:44 869  
10:28:44 870  	-- Check that subscription exists
10:28:44 871  	BEGIN
10:28:44 872  	  SELECT
10:28:44 873  	    SUBSCRIPTION.ID into temp_subscription_id
10:28:44 874  	  FROM
10:28:44 875  	    SUBSCRIPTION
10:28:44 876  	  WHERE
10:28:44 877  	    SUBSCRIPTION.ID = in_subscription_id;
10:28:44 878  	  EXCEPTION
10:28:44 879  	    WHEN NO_DATA_FOUND THEN
10:28:44 880  	      RAISE BAD_SUBSCRIPTION_ID;
10:28:44 881  	END;
10:28:44 882  
10:28:44 883  	PROCS_SUBSCRIPTION_CRU_V24.CREATE_SUBSCRIPTION_NOTE(
10:28:44 884  	  inout_subscription_note_id => var_subscription_note_id,
10:28:44 885  	  in_agent_id		     => in_agent_id,
10:28:44 886  	  in_subscription_id	     => in_subscription_id,
10:28:44 887  	  in_note		     => in_note,
10:28:44 888  	  in_created_by 	     => in_created_by
10:28:44 889  	);
10:28:44 890  
10:28:44 891  EXCEPTION
10:28:44 892  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 893  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 894  	  SPROC_NAME, 'No such subscription');
10:28:44 895  WHEN OTHERS THEN
10:28:44 896  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 897  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 898  END ANNOTATE_SUBSCRIPTION;
10:28:44 899  
10:28:44 900  /******************************************************************************/
10:28:44 901  
10:28:44 902  PROCEDURE GET_CANCEL_REASONS (
10:28:44 903  	out_result_set	  OUT SYS_REFCURSOR
10:28:44 904  ) AS
10:28:44 905  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCEL_REASONS';
10:28:44 906  BEGIN
10:28:44 907  	OPEN out_result_set FOR
10:28:44 908  	SELECT
10:28:44 909  	  SUBSCRIPTION_CANCEL_REASON.ID,
10:28:44 910  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
10:28:44 911  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION,
10:28:44 912  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID AS STATUS_ID
10:28:44 913  	FROM
10:28:44 914  	  SUBSCRIPTION_CANCEL_REASON;
10:28:44 915  
10:28:44 916  END GET_CANCEL_REASONS;
10:28:44 917  
10:28:44 918  /******************************************************************************/
10:28:44 919  
10:28:44 920  FUNCTION GET_RENEWAL_DATE (
10:28:44 921  	in_subscription_id in NUMBER
10:28:44 922  ) RETURN DATE AS
10:28:44 923  -- VARIABLES
10:28:44 924  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
10:28:44 925  var_subscription_status NUMBER;
10:28:44 926  var_licenses_count      NUMBER;
10:28:44 927  var_license_end_date    DATE;
10:28:44 928  var_last_offer_id       NUMBER;
10:28:44 929  var_offer_chain_id      NUMBER;
10:28:44 930  var_last_license_id     NUMBER;
10:28:44 931  var_current_offer_index NUMBER;
10:28:44 932  var_current_offer_recurr_num NUMBER;
10:28:44 933  var_offer_recurr_num    NUMBER;
10:28:44 934  -- EXCEPTIONS
10:28:44 935  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 936  NO_LICENSES_FOUND EXCEPTION;
10:28:44 937  BEGIN
10:28:44 938  
10:28:44 939  	-- Get subscription id and offer chain id
10:28:44 940  	BEGIN
10:28:44 941  	  SELECT
10:28:44 942  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
10:28:44 943  	    SUBSCRIPTION.OFFER_CHAIN_ID
10:28:44 944  	    into
10:28:44 945  	    var_subscription_status,
10:28:44 946  	    var_offer_chain_id
10:28:44 947  	  FROM
10:28:44 948  	    SUBSCRIPTION
10:28:44 949  	  WHERE
10:28:44 950  	    SUBSCRIPTION.ID = in_subscription_id;
10:28:44 951  	  EXCEPTION
10:28:44 952  	    WHEN NO_DATA_FOUND THEN
10:28:44 953  	      RAISE BAD_SUBSCRIPTION_ID;
10:28:44 954  	END;
10:28:44 955  
10:28:44 956  	IF var_subscription_status != GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE THEN
10:28:44 957  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
10:28:44 958  	  -- AND var_subscription_status != GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED THEN
10:28:44 959  	  RETURN NULL;
10:28:44 960  	END IF;
10:28:44 961  
10:28:44 962  	BEGIN
10:28:44 963  	  SELECT
10:28:44 964  	    LICENSE_ID,
10:28:44 965  	    END_DATE,
10:28:44 966  	    OFFER_ID,
10:28:44 967  	    CURRENT_OFFER_INDEX,
10:28:44 968  	    CURRENT_OFFER_RECURR_NUM
10:28:44 969  	    into
10:28:44 970  	    var_last_license_id,
10:28:44 971  	    var_license_end_date,
10:28:44 972  	    var_last_offer_id,
10:28:44 973  	    var_current_offer_index,
10:28:44 974  	    var_current_offer_recurr_num
10:28:44 975  	  FROM
10:28:44 976  	    (
10:28:44 977  	      SELECT
10:28:44 978  		LICENSE.ID as "LICENSE_ID",
10:28:44 979  		LICENSE.END_DATE,
10:28:44 980  		LICENSE.OFFER_ID,
10:28:44 981  		LICENSE.CURRENT_OFFER_INDEX,
10:28:44 982  		LICENSE.CURRENT_OFFER_RECURR_NUM
10:28:44 983  	      FROM
10:28:44 984  		LICENSE
10:28:44 985  	      WHERE
10:28:44 986  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_ACTIVE
10:28:44 987  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:28:44 988  	      ORDER BY END_DATE DESC
10:28:44 989  	    )
10:28:44 990  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
10:28:44 991  	  WHERE
10:28:44 992  	    ROWNUM <= 1;
10:28:44 993  
10:28:44 994  	  EXCEPTION
10:28:44 995  	    WHEN NO_DATA_FOUND THEN
10:28:44 996  	      -- RAISE NO_LICENSES_FOUND;
10:28:44 997  	      RETURN NULL;
10:28:44 998  	END;
10:28:44 999  
10:28:44 1000  	 SELECT
10:28:44 1001  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
10:28:44 1002  	 FROM
10:28:44 1003  	   OFFER_OFFER_CHAIN
10:28:44 1004  	 WHERE
10:28:44 1005  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:28:44 1006  	   AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
10:28:44 1007  
10:28:44 1008  	 IF PROCS_OFFER_CHAIN_V24.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
10:28:44 1009  	   AND var_offer_recurr_num = var_current_offer_recurr_num THEN
10:28:44 1010  	   -- There is no next offer for this subscription
10:28:44 1011  	   RETURN NULL;
10:28:44 1012  	 END IF;
10:28:44 1013  
10:28:44 1014  	 RETURN var_license_end_date;
10:28:44 1015  
10:28:44 1016  EXCEPTION
10:28:44 1017  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 1018  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1019  	   SPROC_NAME, 'No such subscription');
10:28:44 1020  WHEN NO_LICENSES_FOUND THEN
10:28:44 1021  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1022  	   SPROC_NAME, 'No licenses found');
10:28:44 1023  WHEN OTHERS THEN
10:28:44 1024  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1025  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1026  END GET_RENEWAL_DATE;
10:28:44 1027  
10:28:44 1028  /******************************************************************************/
10:28:44 1029  
10:28:44 1030  FUNCTION GET_RECENT_CHARGE (
10:28:44 1031  	 in_subscription_id IN NUMBER
10:28:44 1032  ) RETURN NUMBER AS
10:28:44 1033  -- VARIABLES
10:28:44 1034  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
10:28:44 1035  temp_subscription_id NUMBER;
10:28:44 1036  var_recent_charge    NUMBER(10,2);
10:28:44 1037  
10:28:44 1038  -- EXCEPTIONS
10:28:44 1039  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 1040  BEGIN
10:28:44 1041  
10:28:44 1042  	 BEGIN
10:28:44 1043  	   SELECT
10:28:44 1044  	     SUBSCRIPTION.ID into temp_subscription_id
10:28:44 1045  	   FROM
10:28:44 1046  	     SUBSCRIPTION
10:28:44 1047  	   WHERE
10:28:44 1048  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1049  	   EXCEPTION
10:28:44 1050  	     WHEN NO_DATA_FOUND THEN
10:28:44 1051  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 1052  	 END;
10:28:44 1053  
10:28:44 1054  	 BEGIN
10:28:44 1055  	   SELECT
10:28:44 1056  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
10:28:44 1057  	   FROM
10:28:44 1058  	     LICENSE
10:28:44 1059  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 1060  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:28:44 1061  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
10:28:44 1062  	   WHERE
10:28:44 1063  	     -- TODO: Review
10:28:44 1064  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_PROCESSED
10:28:44 1065  	     -- AND
10:28:44 1066  	     SUBSCRIPTION.ID = in_subscription_id
10:28:44 1067  	     AND CHARGE.CHARGE_AMOUNT >= 0
10:28:44 1068  	     AND ROWNUM <= 1
10:28:44 1069  	   ORDER BY
10:28:44 1070  	     LICENSE.ID ASC, CHARGE.ID DESC;
10:28:44 1071  	   EXCEPTION
10:28:44 1072  	     WHEN NO_DATA_FOUND THEN
10:28:44 1073  	       var_recent_charge := 0;
10:28:44 1074  	 END;
10:28:44 1075  
10:28:44 1076  	 RETURN var_recent_charge;
10:28:44 1077  
10:28:44 1078  EXCEPTION
10:28:44 1079  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 1080  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1081  	   SPROC_NAME, 'No such subscription');
10:28:44 1082  WHEN OTHERS THEN
10:28:44 1083  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1084  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1085  END GET_RECENT_CHARGE;
10:28:44 1086  
10:28:44 1087  /******************************************************************************/
10:28:44 1088  
10:28:44 1089  FUNCTION GET_BILLING_CYCLE (
10:28:44 1090  	 in_subscription_id IN NUMBER
10:28:44 1091  ) RETURN VARCHAR2 AS
10:28:44 1092  -- VARIABLES
10:28:44 1093  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
10:28:44 1094  temp_subscription_id NUMBER;
10:28:44 1095  var_offer_duration   VARCHAR2(30);
10:28:44 1096  
10:28:44 1097  -- EXCEPTIONS
10:28:44 1098  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 1099  BEGIN
10:28:44 1100  
10:28:44 1101  	 BEGIN
10:28:44 1102  	   SELECT
10:28:44 1103  	     SUBSCRIPTION.ID into temp_subscription_id
10:28:44 1104  	   FROM
10:28:44 1105  	     SUBSCRIPTION
10:28:44 1106  	   WHERE
10:28:44 1107  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1108  	   EXCEPTION
10:28:44 1109  	     WHEN NO_DATA_FOUND THEN
10:28:44 1110  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 1111  	 END;
10:28:44 1112  
10:28:44 1113  	 SELECT
10:28:44 1114  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
10:28:44 1115  	 FROM
10:28:44 1116  	   LICENSE
10:28:44 1117  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 1118  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
10:28:44 1119  	 WHERE
10:28:44 1120  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_PROCESSED
10:28:44 1121  	   --AND
10:28:44 1122  	   SUBSCRIPTION.ID = in_subscription_id
10:28:44 1123  	   AND ROWNUM <= 1
10:28:44 1124  	 ORDER BY
10:28:44 1125  	   LICENSE.ID ASC;
10:28:44 1126  
10:28:44 1127  	 RETURN var_offer_duration;
10:28:44 1128  
10:28:44 1129  EXCEPTION
10:28:44 1130  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 1131  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1132  	   SPROC_NAME, 'No such subscription');
10:28:44 1133  WHEN OTHERS THEN
10:28:44 1134  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1135  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1136  END GET_BILLING_CYCLE;
10:28:44 1137  
10:28:44 1138  /******************************************************************************/
10:28:44 1139  
10:28:44 1140  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
10:28:44 1141  	 in_subscription_id	 IN NUMBER,
10:28:44 1142  	 in_effective_start_date IN DATE,
10:28:44 1143  	 in_effective_end_date	 IN DATE,
10:28:44 1144  	 in_note		 IN VARCHAR2,
10:28:44 1145  	 in_updated_by		 IN VARCHAR2
10:28:44 1146  ) AS
10:28:44 1147  -- VARIABLES
10:28:44 1148  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
10:28:44 1149  temp_subscription_id	    NUMBER;
10:28:44 1150  var_current_license_id	    NUMBER;
10:28:44 1151  var_current_license_start_date DATE;
10:28:44 1152  var_current_license_end_date DATE;
10:28:44 1153  var_current_offer_id	    NUMBER;
10:28:44 1154  var_current_invoice_id	    NUMBER;
10:28:44 1155  var_current_date 	    DATE;
10:28:44 1156  var_current_offer_index	    NUMBER;
10:28:44 1157  var_current_offer_recurr_num NUMBER;
10:28:44 1158  var_account_tax_exempt_id    VARCHAR2(255);
10:28:44 1159  
10:28:44 1160  var_free_invoice_id NUMBER;
10:28:44 1161  var_free_license_id NUMBER;
10:28:44 1162  var_new_license_id  NUMBER;
10:28:44 1163  var_ext_license_id  NUMBER;
10:28:44 1164  -- EXCEPTIONS
10:28:44 1165  BAD_SUBSCRIPTION_ID	     EXCEPTION;
10:28:44 1166  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
10:28:44 1167  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
10:28:44 1168  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
10:28:44 1169  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
10:28:44 1170  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
10:28:44 1171  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
10:28:44 1172  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
10:28:44 1173  EXT_START_DATE_LATER_THEN_END EXCEPTION;
10:28:44 1174  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
10:28:44 1175  EXCEPTION_MESSAGE	     VARCHAR2(1024);
10:28:44 1176  BEGIN
10:28:44 1177  
10:28:44 1178  	 var_current_date := PROCS_COMMON_V24.NORMALIZE_DATE(SYSDATE);
10:28:44 1179  
10:28:44 1180  	 -- Check that subscription exists
10:28:44 1181  	 BEGIN
10:28:44 1182  	   SELECT
10:28:44 1183  	     SUBSCRIPTION.ID into temp_subscription_id
10:28:44 1184  	   FROM
10:28:44 1185  	     SUBSCRIPTION
10:28:44 1186  	   WHERE
10:28:44 1187  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1188  	   EXCEPTION
10:28:44 1189  	     WHEN NO_DATA_FOUND THEN
10:28:44 1190  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 1191  	 END;
10:28:44 1192  
10:28:44 1193  	 -- Get account tax exempt id
10:28:44 1194  	 SELECT DISTINCT
10:28:44 1195  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
10:28:44 1196  	 FROM
10:28:44 1197  	   ACCOUNT
10:28:44 1198  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:28:44 1199  	 WHERE
10:28:44 1200  	   SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1201  
10:28:44 1202  	 -- Select current data
10:28:44 1203  	 BEGIN
10:28:44 1204  	   SELECT
10:28:44 1205  	     LICENSE.ID,
10:28:44 1206  	     LICENSE.START_DATE,
10:28:44 1207  	     LICENSE.END_DATE,
10:28:44 1208  	     LICENSE.CURRENT_OFFER_INDEX,
10:28:44 1209  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
10:28:44 1210  	     OFFER.ID,
10:28:44 1211  	     INVOICE.ID
10:28:44 1212  	   INTO
10:28:44 1213  	     var_current_license_id,
10:28:44 1214  	     var_current_license_start_date,
10:28:44 1215  	     var_current_license_end_date,
10:28:44 1216  	     var_current_offer_index,
10:28:44 1217  	     var_current_offer_recurr_num,
10:28:44 1218  	     var_current_offer_id,
10:28:44 1219  	     var_current_invoice_id
10:28:44 1220  	   FROM
10:28:44 1221  	     LICENSE
10:28:44 1222  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 1223  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
10:28:44 1224  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:28:44 1225  	   WHERE
10:28:44 1226  	     SUBSCRIPTION.ID = in_subscription_id
10:28:44 1227  	     AND PROCS_COMMON_V24.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
10:28:44 1228  	     AND PROCS_COMMON_V24.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
10:28:44 1229  	     AND ROWNUM <= 1
10:28:44 1230  	   ORDER BY
10:28:44 1231  	     LICENSE.ID DESC;
10:28:44 1232  	   EXCEPTION
10:28:44 1233  	     WHEN NO_DATA_FOUND THEN
10:28:44 1234  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
10:28:44 1235  	 END;
10:28:44 1236  
10:28:44 1237  	 IF var_current_license_end_date < in_effective_start_date THEN
10:28:44 1238  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
10:28:44 1239  	 END IF;
10:28:44 1240  
10:28:44 1241  	 IF var_current_license_start_date > in_effective_start_date THEN
10:28:44 1242  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
10:28:44 1243  	 END IF;
10:28:44 1244  
10:28:44 1245  	 IF in_effective_start_date > in_effective_end_date THEN
10:28:44 1246  	   RAISE EXT_START_DATE_LATER_THEN_END;
10:28:44 1247  	 END IF;
10:28:44 1248  
10:28:44 1249  	 -- Closing curent license
10:28:44 1250  	 BEGIN
10:28:44 1251  	   PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 1252  	     in_license_id	   => var_current_license_id,
10:28:44 1253  	     in_updated_by	   => in_updated_by,
10:28:44 1254  	     in_license_status_id  => GLOBAL_STATUSES_V24.LICENSE_CLOSED,
10:28:44 1255  	     in_end_date	   => in_effective_start_date,
10:28:44 1256  	     in_needs_entitlements => GLOBAL_CONSTANTS_V24.TRUE
10:28:44 1257  	   );
10:28:44 1258  	   EXCEPTION
10:28:44 1259  	     WHEN OTHERS THEN
10:28:44 1260  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1261  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
10:28:44 1262  	 END;
10:28:44 1263  
10:28:44 1264  	 -- Creating new "free" invoice
10:28:44 1265  	 BEGIN
10:28:44 1266  	   PROCS_INVOICE_V24.CREATE_INVOICE(
10:28:44 1267  	     in_invoice_status => GLOBAL_STATUSES_V24.INVOICE_CLOSED,
10:28:44 1268  	     in_created_by     => in_updated_by,
10:28:44 1269  	     in_tax_exempt_id  => var_account_tax_exempt_id,
10:28:44 1270  	     out_invoice_id    => var_free_invoice_id
10:28:44 1271  	   );
10:28:44 1272  	   EXCEPTION
10:28:44 1273  	     WHEN OTHERS THEN
10:28:44 1274  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1275  	       RAISE CAN_NOT_CREATE_INVOICE;
10:28:44 1276  	 END;
10:28:44 1277  
10:28:44 1278  	 -- Creating new "free" license
10:28:44 1279  	 BEGIN
10:28:44 1280  	   PROCS_LICENSE_V24.CREATE_LICENSE (
10:28:44 1281  	     in_status_id		 => GLOBAL_STATUSES_V24.LICENSE_ACTIVE,
10:28:44 1282  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V24.TRUE,
10:28:44 1283  	     in_start_date		 => in_effective_start_date,
10:28:44 1284  	     in_end_date		 => in_effective_end_date,
10:28:44 1285  	     in_offer_id		 => var_current_offer_id,
10:28:44 1286  	     in_subscription_id 	 => in_subscription_id,
10:28:44 1287  	     in_invoice_id		 => var_free_invoice_id,
10:28:44 1288  	     in_created_by		 => in_updated_by,
10:28:44 1289  	     in_is_extension		 => GLOBAL_CONSTANTS_V24.TRUE,
10:28:44 1290  	     in_current_offer_index	 => var_current_offer_index,
10:28:44 1291  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
10:28:44 1292  	     out_license_id		 => var_free_license_id
10:28:44 1293  	   );
10:28:44 1294  	   EXCEPTION
10:28:44 1295  	     WHEN OTHERS THEN
10:28:44 1296  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1297  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
10:28:44 1298  	 END;
10:28:44 1299  
10:28:44 1300  	 -- Creating new license
10:28:44 1301  	 IF PROCS_COMMON_V24.NORMALIZE_DATE(var_current_license_end_date) >
10:28:44 1302  	    PROCS_COMMON_V24.NORMALIZE_DATE(in_effective_start_date) THEN
10:28:44 1303  	   BEGIN
10:28:44 1304  	     PROCS_LICENSE_V24.CREATE_LICENSE (
10:28:44 1305  	       in_status_id		   => GLOBAL_STATUSES_V24.LICENSE_ACTIVE,
10:28:44 1306  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V24.TRUE,
10:28:44 1307  	       in_start_date		   => in_effective_end_date,
10:28:44 1308  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
10:28:44 1309  	       in_offer_id		   => var_current_offer_id,
10:28:44 1310  	       in_subscription_id	   => in_subscription_id,
10:28:44 1311  	       in_invoice_id		   => var_current_invoice_id,
10:28:44 1312  	       in_created_by		   => in_updated_by,
10:28:44 1313  	       in_is_extension		   => GLOBAL_CONSTANTS_V24.FALSE,
10:28:44 1314  	       in_current_offer_index	   => var_current_offer_index,
10:28:44 1315  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
10:28:44 1316  	       out_license_id		   => var_ext_license_id
10:28:44 1317  	     );
10:28:44 1318  	     EXCEPTION
10:28:44 1319  	       WHEN OTHERS THEN
10:28:44 1320  		 EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1321  		 RAISE CAN_NOT_CREATE_END_LICENSE;
10:28:44 1322  	   END;
10:28:44 1323  	 END IF;
10:28:44 1324  
10:28:44 1325  	 -- Create new note for subscription
10:28:44 1326  	 BEGIN
10:28:44 1327  	   PROCS_SUBSCRIPTION_V24.ANNOTATE_SUBSCRIPTION (
10:28:44 1328  	     in_subscription_id => in_subscription_id,
10:28:44 1329  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
10:28:44 1330  	     in_note		=> in_note,
10:28:44 1331  	     in_created_by	=> in_updated_by
10:28:44 1332  	   );
10:28:44 1333  	   EXCEPTION
10:28:44 1334  	     WHEN OTHERS THEN
10:28:44 1335  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1336  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
10:28:44 1337  	 END;
10:28:44 1338  
10:28:44 1339  EXCEPTION
10:28:44 1340  WHEN EXT_START_DATE_LATER_THEN_END THEN
10:28:44 1341  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 1342  	   SPROC_NAME, 'Extension start date is bigger then end date');
10:28:44 1343  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
10:28:44 1344  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 1345  	   SPROC_NAME, 'Extension start date is too far');
10:28:44 1346  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
10:28:44 1347  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 1348  	   SPROC_NAME, 'Extension start date is too small');
10:28:44 1349  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 1350  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1351  	   SPROC_NAME, 'No such subscription');
10:28:44 1352  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
10:28:44 1353  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1354  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
10:28:44 1355  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
10:28:44 1356  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1357  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
10:28:44 1358  WHEN CAN_NOT_CREATE_INVOICE THEN
10:28:44 1359  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1360  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
10:28:44 1361  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
10:28:44 1362  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1363  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
10:28:44 1364  WHEN CAN_NOT_CREATE_END_LICENSE THEN
10:28:44 1365  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1366  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
10:28:44 1367  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
10:28:44 1368  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1369  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
10:28:44 1370  WHEN OTHERS THEN
10:28:44 1371  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1372  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1373  END ADD_SUBSCRIPTION_EXTENSION;
10:28:44 1374  
10:28:44 1375  /******************************************************************************/
10:28:44 1376  
10:28:44 1377  FUNCTION CALC_SUBSCRIPTION_END_DATE (
10:28:44 1378  	 in_subscription_id IN NUMBER
10:28:44 1379  ) RETURN DATE AS
10:28:44 1380  -- VARIABLES
10:28:44 1381  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
10:28:44 1382  last_license_id		     NUMBER;
10:28:44 1383  last_license_end_date	     DATE;
10:28:44 1384  last_license_offer_id	     NUMBER;
10:28:44 1385  last_license_offer_index      NUMBER;
10:28:44 1386  last_license_offer_recurr_num NUMBER;
10:28:44 1387  var_last_license_id	     NUMBER;
10:28:44 1388  var_offer_chain_id	     NUMBER;
10:28:44 1389  var_current_offer_rec_number  NUMBER;
10:28:44 1390  var_next_offers_set	     SYS_REFCURSOR;
10:28:44 1391  var_next_offer_duration	     VARCHAR2(30);
10:28:44 1392  var_next_offer_recur	     NUMBER;
10:28:44 1393  var_infinity_offers_number    NUMBER;
10:28:44 1394  
10:28:44 1395  var_result_date DATE;
10:28:44 1396  
10:28:44 1397  var_ym_interval	INTERVAL YEAR TO MONTH;
10:28:44 1398  var_ds_interval	INTERVAL DAY(3) TO SECOND;
10:28:44 1399  var_offer_years	NUMBER;
10:28:44 1400  var_offer_months NUMBER;
10:28:44 1401  var_offer_days	NUMBER;
10:28:44 1402  
10:28:44 1403  -- EXCEPTIONS
10:28:44 1404  BAD_SUBSCRIPTION_ID	  EXCEPTION;
10:28:44 1405  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
10:28:44 1406  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
10:28:44 1407  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
10:28:44 1408  EXCEPTION_MESSAGE	  VARCHAR2(1024);
10:28:44 1409  BEGIN
10:28:44 1410  
10:28:44 1411  	 BEGIN
10:28:44 1412  	   SELECT
10:28:44 1413  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
10:28:44 1414  	   FROM
10:28:44 1415  	     SUBSCRIPTION
10:28:44 1416  	   WHERE
10:28:44 1417  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1418  	   EXCEPTION
10:28:44 1419  	     WHEN NO_DATA_FOUND THEN
10:28:44 1420  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 1421  	 END;
10:28:44 1422  
10:28:44 1423  	 BEGIN
10:28:44 1424  	   SELECT
10:28:44 1425  	     ID into var_last_license_id
10:28:44 1426  	   FROM
10:28:44 1427  	     (
10:28:44 1428  	       SELECT
10:28:44 1429  		 LICENSE.ID
10:28:44 1430  	       FROM
10:28:44 1431  		 LICENSE
10:28:44 1432  	       WHERE
10:28:44 1433  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:28:44 1434  	       ORDER BY
10:28:44 1435  		 LICENSE.END_DATE DESC
10:28:44 1436  	     )
10:28:44 1437  	   WHERE
10:28:44 1438  	     ROWNUM <= 1;
10:28:44 1439  	   EXCEPTION
10:28:44 1440  	     WHEN NO_DATA_FOUND THEN
10:28:44 1441  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
10:28:44 1442  	 END;
10:28:44 1443  
10:28:44 1444  	 SELECT
10:28:44 1445  	   COUNT(*) into var_infinity_offers_number
10:28:44 1446  	 FROM
10:28:44 1447  	   OFFER_OFFER_CHAIN
10:28:44 1448  	 WHERE
10:28:44 1449  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:28:44 1450  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V24.OFFER_REC_INFINITY;
10:28:44 1451  
10:28:44 1452  	 IF var_infinity_offers_number > 0 THEN
10:28:44 1453  	   RETURN NULL;
10:28:44 1454  	 END IF;
10:28:44 1455  
10:28:44 1456  	 BEGIN
10:28:44 1457  	   SELECT
10:28:44 1458  	     LICENSE.ID,
10:28:44 1459  	     LICENSE.END_DATE,
10:28:44 1460  	     LICENSE.CURRENT_OFFER_INDEX,
10:28:44 1461  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
10:28:44 1462  	     LICENSE.OFFER_ID
10:28:44 1463  	     into
10:28:44 1464  	     last_license_id,
10:28:44 1465  	     last_license_end_date,
10:28:44 1466  	     last_license_offer_index,
10:28:44 1467  	     last_license_offer_recurr_num,
10:28:44 1468  	     last_license_offer_id
10:28:44 1469  	   FROM
10:28:44 1470  	     LICENSE
10:28:44 1471  	   WHERE
10:28:44 1472  	     LICENSE.ID = var_last_license_id;
10:28:44 1473  	   EXCEPTION
10:28:44 1474  	     WHEN NO_DATA_FOUND THEN
10:28:44 1475  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
10:28:44 1476  	 END;
10:28:44 1477  
10:28:44 1478  	 var_result_date := last_license_end_date;
10:28:44 1479  
10:28:44 1480  	 -- Find current recurrence number
10:28:44 1481  	 SELECT
10:28:44 1482  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
10:28:44 1483  	 FROM
10:28:44 1484  	   OFFER_OFFER_CHAIN
10:28:44 1485  	 WHERE
10:28:44 1486  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:28:44 1487  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
10:28:44 1488  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
10:28:44 1489  
10:28:44 1490  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
10:28:44 1491  	   BEGIN
10:28:44 1492  	     PROCS_OFFER_CHAIN_V24.GET_OFFER_LENGTH(
10:28:44 1493  	       last_license_offer_id,
10:28:44 1494  	       var_offer_years,
10:28:44 1495  	       var_offer_months,
10:28:44 1496  	       var_offer_days
10:28:44 1497  	     );
10:28:44 1498  
10:28:44 1499  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
10:28:44 1500  	     var_ds_interval := var_offer_days||' 0:0:0';
10:28:44 1501  
10:28:44 1502  	     var_result_date := var_result_date
10:28:44 1503  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
10:28:44 1504  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
10:28:44 1505  	     EXCEPTION
10:28:44 1506  	       WHEN OTHERS THEN
10:28:44 1507  		 EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1508  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
10:28:44 1509  	   END;
10:28:44 1510  	 END IF;
10:28:44 1511  
10:28:44 1512  	 OPEN var_next_offers_set FOR
10:28:44 1513  	 SELECT
10:28:44 1514  	   OFFER.ENTITLEMENT_DURATION,
10:28:44 1515  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
10:28:44 1516  	 FROM
10:28:44 1517  	   OFFER_OFFER_CHAIN
10:28:44 1518  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:28:44 1519  	 WHERE
10:28:44 1520  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
10:28:44 1521  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
10:28:44 1522  
10:28:44 1523  	 LOOP
10:28:44 1524  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
10:28:44 1525  	   EXIT WHEN var_next_offers_set%NOTFOUND;
10:28:44 1526  	   BEGIN
10:28:44 1527  	     PROCS_COMMON_V24.ISO8601DURATION_TO_INTERVALS(
10:28:44 1528  	       var_next_offer_duration,
10:28:44 1529  	       var_offer_years,
10:28:44 1530  	       var_offer_months,
10:28:44 1531  	       var_offer_days
10:28:44 1532  	     );
10:28:44 1533  
10:28:44 1534  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
10:28:44 1535  	     var_ds_interval := var_offer_days||' 0:0:0';
10:28:44 1536  
10:28:44 1537  	     var_result_date := var_result_date
10:28:44 1538  	       + ( var_ym_interval * var_next_offer_recur )
10:28:44 1539  	       + ( var_ds_interval * var_next_offer_recur );
10:28:44 1540  	     EXCEPTION
10:28:44 1541  	       WHEN OTHERS THEN
10:28:44 1542  		 EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1543  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
10:28:44 1544  	   END;
10:28:44 1545  	 END LOOP;
10:28:44 1546  
10:28:44 1547  	 RETURN var_result_date;
10:28:44 1548  
10:28:44 1549  EXCEPTION
10:28:44 1550  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 1551  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1552  	   SPROC_NAME, 'No such subscription');
10:28:44 1553  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
10:28:44 1554  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1555  	   SPROC_NAME, 'Could not find last license for given subscription');
10:28:44 1556  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
10:28:44 1557  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1558  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
10:28:44 1559  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
10:28:44 1560  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1561  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
10:28:44 1562  WHEN OTHERS THEN
10:28:44 1563  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1564  	   SPROC_NAME, 'Unkown error', SQLERRM);
10:28:44 1565  END CALC_SUBSCRIPTION_END_DATE;
10:28:44 1566  
10:28:44 1567  /******************************************************************************/
10:28:44 1568  
10:28:44 1569  PROCEDURE HAS_FUTURE_LICENSE (
10:28:44 1570  	 in_license_id IN  NUMBER,
10:28:44 1571  	 out_result    OUT NUMBER
10:28:44 1572  ) AS
10:28:44 1573  -- VARIABLES
10:28:44 1574  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
10:28:44 1575  var_subscription_id	 NUMBER;
10:28:44 1576  var_future_licenses_count NUMBER;
10:28:44 1577  -- EXCEPTIONS
10:28:44 1578  BAD_LICENSE_ID	    EXCEPTION;
10:28:44 1579  BEGIN
10:28:44 1580  
10:28:44 1581  	 BEGIN
10:28:44 1582  	   SELECT
10:28:44 1583  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
10:28:44 1584  	   FROM
10:28:44 1585  	     LICENSE
10:28:44 1586  	   WHERE
10:28:44 1587  	     LICENSE.ID = in_license_id;
10:28:44 1588  	   EXCEPTION
10:28:44 1589  	     WHEN NO_DATA_FOUND THEN
10:28:44 1590  	       RAISE BAD_LICENSE_ID;
10:28:44 1591  	 END;
10:28:44 1592  
10:28:44 1593  	 SELECT
10:28:44 1594  	   COUNT(*) into var_future_licenses_count
10:28:44 1595  	 FROM
10:28:44 1596  	   LICENSE
10:28:44 1597  	 WHERE
10:28:44 1598  	   LICENSE.ID != in_license_id
10:28:44 1599  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
10:28:44 1600  	   AND LICENSE.END_DATE > sysdate;
10:28:44 1601  
10:28:44 1602  	 IF var_future_licenses_count > 0 THEN
10:28:44 1603  	   out_result := GLOBAL_CONSTANTS_V24.TRUE;
10:28:44 1604  	 ELSE
10:28:44 1605  	   out_result := GLOBAL_CONSTANTS_V24.FALSE;
10:28:44 1606  	 END IF;
10:28:44 1607  
10:28:44 1608  EXCEPTION
10:28:44 1609  WHEN BAD_LICENSE_ID THEN
10:28:44 1610  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1611  	   SPROC_NAME, 'No such license');
10:28:44 1612  WHEN OTHERS THEN
10:28:44 1613  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1614  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1615  END HAS_FUTURE_LICENSE;
10:28:44 1616  
10:28:44 1617  /******************************************************************************/
10:28:44 1618  
10:28:44 1619  PROCEDURE CLOSE_SUBSCRIPTION (
10:28:44 1620  	 in_subscription_id IN NUMBER,
10:28:44 1621  	 in_updated_by	    IN VARCHAR2
10:28:44 1622  ) AS
10:28:44 1623  -- VARIABLES
10:28:44 1624  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
10:28:44 1625  temp_subscription_id NUMBER;
10:28:44 1626  var_licenses_count   NUMBER;
10:28:44 1627  -- EXCEPTIONS
10:28:44 1628  BAD_SUBSCRIPTION_ID    EXCEPTION;
10:28:44 1629  ACTIVE_LICENSES_FOUND  EXCEPTION;
10:28:44 1630  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:44 1631  BEGIN
10:28:44 1632  
10:28:44 1633  	 BEGIN
10:28:44 1634  	   SELECT
10:28:44 1635  	     SUBSCRIPTION.ID into temp_subscription_id
10:28:44 1636  	   FROM
10:28:44 1637  	     SUBSCRIPTION
10:28:44 1638  	   WHERE
10:28:44 1639  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1640  	   EXCEPTION
10:28:44 1641  	     WHEN NO_DATA_FOUND THEN
10:28:44 1642  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 1643  	 END;
10:28:44 1644  
10:28:44 1645  	 SELECT
10:28:44 1646  	   COUNT(*) into var_licenses_count
10:28:44 1647  	 FROM
10:28:44 1648  	   LICENSE
10:28:44 1649  	 WHERE
10:28:44 1650  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:28:44 1651  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_ACTIVE;
10:28:44 1652  
10:28:44 1653  	 IF var_licenses_count > 0 THEN
10:28:44 1654  	   RAISE ACTIVE_LICENSES_FOUND;
10:28:44 1655  	 END IF;
10:28:44 1656  
10:28:44 1657  	 PROCS_SUBSCRIPTION_V24.UPDATE_SUBSCRIPTION_STATUS(
10:28:44 1658  	   in_subscription_id	     => in_subscription_id,
10:28:44 1659  	   in_updated_by	     => in_updated_by,
10:28:44 1660  	   in_subscription_status_id => GLOBAL_STATUSES_V24.SUBSCRIPTION_CLOSED
10:28:44 1661  	 );
10:28:44 1662  
10:28:44 1663  EXCEPTION
10:28:44 1664  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 1665  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1666  	   SPROC_NAME, 'No such subscription');
10:28:44 1667  WHEN ACTIVE_LICENSES_FOUND THEN
10:28:44 1668  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 1669  	   SPROC_NAME, 'Active licenses found');
10:28:44 1670  WHEN OTHERS THEN
10:28:44 1671  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1672  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1673  END CLOSE_SUBSCRIPTION;
10:28:44 1674  
10:28:44 1675  /******************************************************************************/
10:28:44 1676  
10:28:44 1677  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
10:28:44 1678  	 in_subscription_id IN NUMBER,
10:28:44 1679  	 out_group_id	    OUT NUMBER
10:28:44 1680  ) AS
10:28:44 1681  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
10:28:44 1682  BEGIN
10:28:44 1683  	 SELECT
10:28:44 1684  	   ACCOUNT.GROUP_ID into out_group_id
10:28:44 1685  	 FROM
10:28:44 1686  	   SUBSCRIPTION
10:28:44 1687  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:28:44 1688  	 WHERE
10:28:44 1689  	   SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1690  EXCEPTION
10:28:44 1691  WHEN NO_DATA_FOUND THEN
10:28:44 1692  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1693  	   SPROC_NAME, 'No such subscription');
10:28:44 1694  WHEN OTHERS THEN
10:28:44 1695  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1696  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1697  END GET_GROUP_ID_BY_SBSCRPTN_ID;
10:28:44 1698  
10:28:44 1699  /******************************************************************************/
10:28:44 1700  
10:28:44 1701  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
10:28:44 1702  	 in_subscription_id IN NUMBER,
10:28:44 1703  	 out_result_set     OUT SYS_REFCURSOR
10:28:44 1704  ) AS
10:28:44 1705  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
10:28:44 1706  -- VARIABLES
10:28:44 1707  var_offer_chain NUMBER;
10:28:44 1708  -- EXCEPTIONS
10:28:44 1709  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 1710  BEGIN
10:28:44 1711  	 BEGIN
10:28:44 1712  	   SELECT
10:28:44 1713  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
10:28:44 1714  	   FROM
10:28:44 1715  	     SUBSCRIPTION
10:28:44 1716  	   WHERE
10:28:44 1717  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1718  	   EXCEPTION
10:28:44 1719  	     WHEN NO_DATA_FOUND THEN
10:28:44 1720  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 1721  	 END;
10:28:44 1722  
10:28:44 1723  	 OPEN out_result_set FOR
10:28:44 1724  	 SELECT DISTINCT
10:28:44 1725  	   PRODUCT.ID,
10:28:44 1726  	   PRODUCT.NAME
10:28:44 1727  	 FROM
10:28:44 1728  	   PRODUCT
10:28:44 1729  	 WHERE
10:28:44 1730  	   PRODUCT.ID IN (
10:28:44 1731  	     SELECT DISTINCT
10:28:44 1732  	       PRODUCT_OFFERING.PRODUCT_ID
10:28:44 1733  	     FROM
10:28:44 1734  	       PRODUCT_OFFERING
10:28:44 1735  	     WHERE
10:28:44 1736  	       PRODUCT_OFFERING.ID IN (
10:28:44 1737  		 SELECT DISTINCT
10:28:44 1738  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:28:44 1739  		 FROM
10:28:44 1740  		   OFFER_PRODUCT_OFFERING
10:28:44 1741  		 WHERE
10:28:44 1742  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:28:44 1743  		     SELECT DISTINCT
10:28:44 1744  		       OFFER_OFFER_CHAIN.OFFER_ID
10:28:44 1745  		     FROM
10:28:44 1746  		       OFFER_OFFER_CHAIN
10:28:44 1747  		     WHERE
10:28:44 1748  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
10:28:44 1749  		   )
10:28:44 1750  	       )
10:28:44 1751  	   );
10:28:44 1752  
10:28:44 1753  EXCEPTION
10:28:44 1754  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 1755  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1756  	   SPROC_NAME, 'No such subscription');
10:28:44 1757  WHEN OTHERS THEN
10:28:44 1758  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1759  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1760  END GET_SUBSCRIPTION_PRODUCTS;
10:28:44 1761  
10:28:44 1762  /******************************************************************************/
10:28:44 1763  
10:28:44 1764  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
10:28:44 1765  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
10:28:44 1766  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
10:28:44 1767  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
10:28:44 1768  ) AS
10:28:44 1769  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
10:28:44 1770  BEGIN
10:28:44 1771  	 PROCS_SUBSCRIPTION_CRU_V24.UPDATE_SUBSCRIPTION(
10:28:44 1772  	   in_subscription_id	     => in_subscription_id,
10:28:44 1773  	   in_subscription_status_id => in_subscription_status_id,
10:28:44 1774  	   in_updated_by	     => in_updated_by
10:28:44 1775  	 );
10:28:44 1776  END UPDATE_SUBSCRIPTION_STATUS;
10:28:44 1777  
10:28:44 1778  /******************************************************************************/
10:28:44 1779  
10:28:44 1780  PROCEDURE GET_ACTIVE_INVOICES_IDS (
10:28:44 1781  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
10:28:44 1782  	 in_subscription_id IN NUMBER,
10:28:44 1783  	 out_result_set     OUT SYS_REFCURSOR
10:28:44 1784  ) AS
10:28:44 1785  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
10:28:44 1786  -- VARIABLES
10:28:44 1787  temp_subscription_id SUBSCRIPTION.ID%TYPE;
10:28:44 1788  -- EXCEPTIONS
10:28:44 1789  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 1790  BEGIN
10:28:44 1791  
10:28:44 1792  	 BEGIN
10:28:44 1793  	   SELECT
10:28:44 1794  	     SUBSCRIPTION.ID into temp_subscription_id
10:28:44 1795  	   FROM
10:28:44 1796  	     SUBSCRIPTION
10:28:44 1797  	   WHERE
10:28:44 1798  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 1799  	   EXCEPTION
10:28:44 1800  	     WHEN NO_DATA_FOUND THEN
10:28:44 1801  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 1802  	 END;
10:28:44 1803  
10:28:44 1804  	 OPEN out_result_set FOR
10:28:44 1805  	 SELECT DISTINCT
10:28:44 1806  	   LICENSE.INVOICE_ID as "ID"
10:28:44 1807  	 FROM
10:28:44 1808  	   LICENSE
10:28:44 1809  	 WHERE
10:28:44 1810  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V24.LICENSE_ACTIVE, GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD)
10:28:44 1811  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
10:28:44 1812  
10:28:44 1813  EXCEPTION
10:28:44 1814  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 1815  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1816  	   SPROC_NAME, 'No such subscription');
10:28:44 1817  WHEN OTHERS THEN
10:28:44 1818  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1819  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1820  END GET_ACTIVE_INVOICES_IDS;
10:28:44 1821  
10:28:44 1822  /******************************************************************************/
10:28:44 1823  
10:28:44 1824  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
10:28:44 1825  	 in_invoice_id	      IN NUMBER,
10:28:44 1826  	 in_updated_by	      IN VARCHAR2,
10:28:44 1827  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE
10:28:44 1828  ) AS
10:28:44 1829  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
10:28:44 1830  -- VARIABLES
10:28:44 1831  temp_invoice_id	      INVOICE.ID%TYPE;
10:28:44 1832  var_chargeback_amount  NUMBER(10,2);
10:28:44 1833  ver_refund_charge_id   NUMBER;
10:28:44 1834  -- EXCEPTIONS
10:28:44 1835  BAD_INVOICE_ID		    EXCEPTION;
10:28:44 1836  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
10:28:44 1837  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
10:28:44 1838  EXCEPTION_MESSAGE	    VARCHAR2(1024);
10:28:44 1839  -- STUB
10:28:44 1840  var_now DATE;
10:28:44 1841  var_revoke NUMBER;
10:28:44 1842  var_refund NUMBER;
10:28:44 1843  var_billed NUMBER;
10:28:44 1844  var_subscription_in_grace NUMBER;
10:28:44 1845  BEGIN
10:28:44 1846  
10:28:44 1847  	 var_now := sysdate;
10:28:44 1848  
10:28:44 1849  	 -- Check that invoice exists
10:28:44 1850  	 BEGIN
10:28:44 1851  	   SELECT
10:28:44 1852  	     INVOICE.ID into temp_invoice_id
10:28:44 1853  	   FROM
10:28:44 1854  	     INVOICE
10:28:44 1855  	   WHERE
10:28:44 1856  	     INVOICE.ID = in_invoice_id;
10:28:44 1857  	   EXCEPTION
10:28:44 1858  	     WHEN NO_DATA_FOUND THEN
10:28:44 1859  	       RAISE BAD_INVOICE_ID;
10:28:44 1860  	 END;
10:28:44 1861  
10:28:44 1862  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V24.FALSE, GLOBAL_CONSTANTS_V24.TRUE) into var_revoke
10:28:44 1863  	 from license l, subscription s, offer_chain oc
10:28:44 1864  	 where
10:28:44 1865  	   l.subscription_id = s.id and
10:28:44 1866  	   s.offer_chain_id = oc.id and
10:28:44 1867  	   l.invoice_id = in_invoice_id and
10:28:44 1868  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V24.TRUE and
10:28:44 1869  	   rownum < 2;
10:28:44 1870  
10:28:44 1871  	 select
10:28:44 1872  	   decode(s.subscription_status_id, GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD, 1, 0)
10:28:44 1873  	 into
10:28:44 1874  	   var_subscription_in_grace
10:28:44 1875  	 from license l, subscription s
10:28:44 1876  	 where
10:28:44 1877  	   l.subscription_id = s.id and
10:28:44 1878  	   l.invoice_id = in_invoice_id and
10:28:44 1879  	   rownum < 2;
10:28:44 1880  
10:28:44 1881  	 var_billed := PROCS_INVOICE_V24.IS_INVOICE_PAYING_STARTED(in_invoice_id);
10:28:44 1882  	 var_refund := GLOBAL_CONSTANTS_V24.FALSE;
10:28:44 1883  
10:28:44 1884  	 -- Check that transaction for given invoice not started
10:28:44 1885  	 -- if refund enabled calculate and apply chargeback
10:28:44 1886  	 IF (
10:28:44 1887  	     var_billed = GLOBAL_CONSTANTS_V24.TRUE
10:28:44 1888  	   )THEN
10:28:44 1889  	   if (in_refundable = GLOBAL_CONSTANTS_V24.TRUE) then
10:28:44 1890  	     -- If started then we need to calculate refund
10:28:44 1891  	     BEGIN
10:28:44 1892  	       PROCS_INVOICE_V24.CALCULATE_INVOICE_CHARGEBACK(
10:28:44 1893  		 in_invoice_id,
10:28:44 1894  		 var_now,
10:28:44 1895  		 var_chargeback_amount
10:28:44 1896  	       );
10:28:44 1897  	       EXCEPTION
10:28:44 1898  		 WHEN OTHERS THEN
10:28:44 1899  		   EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1900  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
10:28:44 1901  	     END;
10:28:44 1902  	     IF var_chargeback_amount > 0 THEN
10:28:44 1903  	       BEGIN
10:28:44 1904  		 PROCS_INVOICE_V24.APPLY_REFUND(
10:28:44 1905  		   in_invoice_id,
10:28:44 1906  		   var_chargeback_amount,
10:28:44 1907  		   in_updated_by,
10:28:44 1908  		   ver_refund_charge_id
10:28:44 1909  		 );
10:28:44 1910  		 EXCEPTION
10:28:44 1911  		   WHEN OTHERS THEN
10:28:44 1912  		     EXCEPTION_MESSAGE := SQLERRM;
10:28:44 1913  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
10:28:44 1914  	       END;
10:28:44 1915  	       var_refund := GLOBAL_CONSTANTS_V24.TRUE;
10:28:44 1916  	     END IF;
10:28:44 1917  	   end if;
10:28:44 1918  	 ELSE
10:28:44 1919  
10:28:44 1920  	   FOR f_transaction_to_close IN (
10:28:44 1921  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V24.CHARGE_OPENED
10:28:44 1922  	   )
10:28:44 1923  	   LOOP
10:28:44 1924  	     PROCS_TRANSACTION_V24.UPDATE_TRANSACTION_STATUS(
10:28:44 1925  	       in_transaction_id	=> f_transaction_to_close.ID,
10:28:44 1926  	       in_updated_by		=> in_updated_by,
10:28:44 1927  	       in_transaction_status_id => GLOBAL_STATUSES_V24.TRANSACTION_CLOSED
10:28:44 1928  	     );
10:28:44 1929  	   END LOOP;
10:28:44 1930  	   -- Needs to close charges. No refund.
10:28:44 1931  	   FOR f_charge_to_close IN (
10:28:44 1932  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V24.CHARGE_OPENED
10:28:44 1933  	   )
10:28:44 1934  	   LOOP
10:28:44 1935  	     PROCS_CHARGE_V24.UPDATE_CHARGE_STATUS(
10:28:44 1936  	       in_charge_id	   => f_charge_to_close.ID,
10:28:44 1937  	       in_updated_by	   => in_updated_by,
10:28:44 1938  	       in_charge_status_id => GLOBAL_STATUSES_V24.CHARGE_CANCELED
10:28:44 1939  	     );
10:28:44 1940  	   END LOOP;
10:28:44 1941  
10:28:44 1942  	   PROCS_INVOICE_V24.UPDATE_INVOICE_STATUS(
10:28:44 1943  	     in_invoice_id		    => in_invoice_id,
10:28:44 1944  	     in_updated_by		    => in_updated_by,
10:28:44 1945  	     in_invoice_status_id	    => GLOBAL_STATUSES_V24.INVOICE_CLOSED
10:28:44 1946  	   );
10:28:44 1947  
10:28:44 1948  	 END IF;
10:28:44 1949  	 -- update licenses
10:28:44 1950  	 IF(var_revoke = GLOBAL_CONSTANTS_V24.TRUE OR var_chargeback_amount > 0 OR (var_subscription_in_grace = GLOBAL_CONSTANTS_V24.FALSE AND var_billed = GLOBAL_CONSTANTS_V24.FALSE)) THEN
10:28:44 1951  	   FOR f_license_to_cancel IN (
10:28:44 1952  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_ACTIVE
10:28:44 1953  	   )
10:28:44 1954  	   LOOP
10:28:44 1955  	     PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 1956  	       in_license_id	     => f_license_to_cancel.ID,
10:28:44 1957  	       in_license_status_id  => GLOBAL_STATUSES_V24.LICENSE_CLOSED,
10:28:44 1958  	       in_needs_entitlements => GLOBAL_CONSTANTS_V24.TRUE,
10:28:44 1959  	       in_updated_by	     => in_updated_by,
10:28:44 1960  	       in_entitlement_end_date => var_now
10:28:44 1961  	     );
10:28:44 1962  	   END LOOP;
10:28:44 1963  	 ELSE
10:28:44 1964  	   FOR f_license_to_cancel IN (
10:28:44 1965  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V24.LICENSE_ACTIVE, GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD)
10:28:44 1966  	   )
10:28:44 1967  	   LOOP
10:28:44 1968  	     PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 1969  	       in_license_id	     => f_license_to_cancel.ID,
10:28:44 1970  	       in_license_status_id  => GLOBAL_STATUSES_V24.LICENSE_CLOSED,
10:28:44 1971  	       in_updated_by	     => in_updated_by
10:28:44 1972  	     );
10:28:44 1973  	   END LOOP;
10:28:44 1974  	 END IF;
10:28:44 1975  
10:28:44 1976  
10:28:44 1977  EXCEPTION
10:28:44 1978  WHEN BAD_INVOICE_ID THEN
10:28:44 1979  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 1980  	   SPROC_NAME, 'No such invoice');
10:28:44 1981  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
10:28:44 1982  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1983  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
10:28:44 1984  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
10:28:44 1985  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 1986  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
10:28:44 1987  WHEN OTHERS THEN
10:28:44 1988  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 1989  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 1990  END CANCEL_SUBSCRIPTION_INVOICE;
10:28:44 1991  
10:28:44 1992  /******************************************************************************/
10:28:44 1993  
10:28:44 1994  PROCEDURE FINALIZE_CANCELATION (
10:28:44 1995  	 in_subscription_id    IN NUMBER,
10:28:44 1996  	 in_cancelation_reason IN VARCHAR2,
10:28:44 1997  	 in_cancelation_date   IN DATE,
10:28:44 1998  	 in_note	       IN VARCHAR2,
10:28:44 1999  	 in_agent_id	       IN NUMBER,
10:28:44 2000  	 in_updated_by	       IN VARCHAR2,
10:28:44 2001  	 in_revoke_entitlements IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:28:44 2002  ) AS
10:28:44 2003  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
10:28:44 2004  -- VARIABLES
10:28:44 2005  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
10:28:44 2006  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
10:28:44 2007  var_active_invoices_count NUMBER;
10:28:44 2008  var_license_to_disgrace	 LICENSE.ID%TYPE;
10:28:44 2009  var_now			 DATE := SYSDATE;
10:28:44 2010  -- EXCEPTIONS
10:28:44 2011  BAD_SUBSCRIPTION_ID	   EXCEPTION;
10:28:44 2012  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
10:28:44 2013  BAD_CANCELATION_REASON	   EXCEPTION;
10:28:44 2014  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
10:28:44 2015  ACTIVE_INVOICES_FOUND	   EXCEPTION;
10:28:44 2016  CAN_NOT_CREATE_NOTE	   EXCEPTION;
10:28:44 2017  EXCEPTION_MESSAGE	   VARCHAR2(1024);
10:28:44 2018  BEGIN
10:28:44 2019  
10:28:44 2020  	 -- Get current subscription status
10:28:44 2021  	 BEGIN
10:28:44 2022  	   SELECT
10:28:44 2023  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
10:28:44 2024  	   FROM
10:28:44 2025  	     SUBSCRIPTION
10:28:44 2026  	   WHERE
10:28:44 2027  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 2028  	   EXCEPTION
10:28:44 2029  	     WHEN NO_DATA_FOUND THEN
10:28:44 2030  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 2031  	 END;
10:28:44 2032  
10:28:44 2033  	 -- Check that subscription reason is correct
10:28:44 2034  	 BEGIN
10:28:44 2035  	   SELECT
10:28:44 2036  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
10:28:44 2037  	   FROM
10:28:44 2038  	     SUBSCRIPTION_CANCEL_REASON
10:28:44 2039  	   WHERE
10:28:44 2040  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
10:28:44 2041  	     AND ROWNUM <= 1;
10:28:44 2042  	   EXCEPTION
10:28:44 2043  	     WHEN NO_DATA_FOUND THEN
10:28:44 2044  	       RAISE BAD_CANCELATION_REASON;
10:28:44 2045  	 END;
10:28:44 2046  
10:28:44 2047  	 -- Check for invoices with active licenses
10:28:44 2048  	 SELECT
10:28:44 2049  	   COUNT(*) into var_active_invoices_count
10:28:44 2050  	 FROM
10:28:44 2051  	   LICENSE
10:28:44 2052  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:28:44 2053  	 WHERE
10:28:44 2054  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V24.LICENSE_ACTIVE, GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD)
10:28:44 2055  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
10:28:44 2056  
10:28:44 2057  	 IF var_active_invoices_count > 0 THEN
10:28:44 2058  	   RAISE ACTIVE_INVOICES_FOUND;
10:28:44 2059  	 END IF;
10:28:44 2060  
10:28:44 2061  	 -- Check that subscription is active
10:28:44 2062  	 IF var_current_subscr_status != GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE AND
10:28:44 2063  	    var_current_subscr_status != GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED AND
10:28:44 2064  	    var_current_subscr_status != GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD THEN
10:28:44 2065  	   RAISE BAD_SUBSCRIPTION_STATUS;
10:28:44 2066  	 END IF;
10:28:44 2067  
10:28:44 2068  	 -- Update subscription data
10:28:44 2069  	 BEGIN
10:28:44 2070  	   PROCS_SUBSCRIPTION_CRU_V24.UPDATE_SUBSCRIPTION(
10:28:44 2071  	     in_subscription_id        => in_subscription_id,
10:28:44 2072  	     in_subscription_status_id => GLOBAL_STATUSES_V24.SUBSCRIPTION_CANCELED,
10:28:44 2073  	     in_cancelation_date       => in_cancelation_date,
10:28:44 2074  	     in_updated_by	       => in_updated_by,
10:28:44 2075  	     in_sct_id		       => var_sct_id
10:28:44 2076  	   );
10:28:44 2077  	   EXCEPTION
10:28:44 2078  	     WHEN OTHERS THEN
10:28:44 2079  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:44 2080  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
10:28:44 2081  	 END;
10:28:44 2082  
10:28:44 2083  	 -- Terminate grace period for licenses in grace [SAR-31]
10:28:44 2084  	 BEGIN
10:28:44 2085  	   SELECT
10:28:44 2086  	     LICENSE.ID into var_license_to_disgrace
10:28:44 2087  	   FROM
10:28:44 2088  	     LICENSE
10:28:44 2089  	   WHERE
10:28:44 2090  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:28:44 2091  	     AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD
10:28:44 2092  	     AND ROWNUM <= 1
10:28:44 2093  	   ORDER BY
10:28:44 2094  	     CREATE_DATE DESC;
10:28:44 2095  	 EXCEPTION
10:28:44 2096  	   WHEN NO_DATA_FOUND THEN
10:28:44 2097  	     var_license_to_disgrace := NULL;
10:28:44 2098  	 END;
10:28:44 2099  
10:28:44 2100  	 IF var_license_to_disgrace IS NOT NULL THEN
10:28:44 2101  	   IF in_revoke_entitlements = GLOBAL_CONSTANTS_V22.TRUE THEN
10:28:44 2102  	     PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:28:44 2103  	       in_license_id	       => var_license_to_disgrace,
10:28:44 2104  	       in_license_status_id    => GLOBAL_STATUSES_V22.LICENSE_CLOSED,
10:28:44 2105  	       in_needs_entitlements   => GLOBAL_CONSTANTS_V22.TRUE,
10:28:44 2106  	       in_updated_by	       => in_updated_by,
10:28:44 2107  	       in_entitlement_end_date => var_now
10:28:44 2108  	     );
10:28:44 2109  	   ELSE
10:28:44 2110  	     PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:44 2111  	       in_license_id	       => var_license_to_disgrace,
10:28:44 2112  	       in_license_status_id    => GLOBAL_STATUSES_V24.LICENSE_CLOSED,
10:28:44 2113  	       in_updated_by	       => in_updated_by
10:28:44 2114  	     );
10:28:44 2115  	   END IF;
10:28:44 2116  	 END IF;
10:28:44 2117  
10:28:44 2118  	 -- Annotate subscription
10:28:44 2119  	 IF in_note IS NOT NULL THEN
10:28:44 2120  	   BEGIN
10:28:44 2121  	     PROCS_SUBSCRIPTION_V24.ANNOTATE_SUBSCRIPTION(
10:28:44 2122  	       in_subscription_id,
10:28:44 2123  	       in_agent_id,
10:28:44 2124  	       in_note,
10:28:44 2125  	       in_updated_by
10:28:44 2126  	     );
10:28:44 2127  	     EXCEPTION
10:28:44 2128  	      WHEN OTHERS THEN
10:28:44 2129  		EXCEPTION_MESSAGE := SQLERRM;
10:28:44 2130  		RAISE CAN_NOT_CREATE_NOTE;
10:28:44 2131  	   END;
10:28:44 2132  	 END IF;
10:28:44 2133  
10:28:44 2134  EXCEPTION
10:28:44 2135  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 2136  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2137  	   SPROC_NAME, 'No such subscription');
10:28:44 2138  WHEN BAD_SUBSCRIPTION_STATUS THEN
10:28:44 2139  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 2140  	   SPROC_NAME, 'Bad current subscription status');
10:28:44 2141  WHEN BAD_CANCELATION_REASON THEN
10:28:44 2142  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 2143  	   SPROC_NAME, 'Bad cancellation reason');
10:28:44 2144  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
10:28:44 2145  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 2146  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
10:28:44 2147  WHEN ACTIVE_INVOICES_FOUND THEN
10:28:44 2148  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 2149  	   SPROC_NAME, 'Invoices with active licenses found');
10:28:44 2150  WHEN CAN_NOT_CREATE_NOTE THEN
10:28:44 2151  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 2152  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:28:44 2153  END FINALIZE_CANCELATION;
10:28:44 2154  
10:28:44 2155  /******************************************************************************/
10:28:44 2156  
10:28:44 2157  PROCEDURE FINALIZE_FALSE_START (
10:28:44 2158  	 in_subscription_id    IN NUMBER,
10:28:44 2159  	 in_cancelation_date   IN DATE,
10:28:44 2160  	 in_note	       IN VARCHAR2,
10:28:44 2161  	 in_agent_id	       IN NUMBER,
10:28:44 2162  	 in_updated_by	       IN VARCHAR2
10:28:44 2163  ) AS
10:28:44 2164  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
10:28:44 2165  FALSE_START_REASON CONSTANT NUMBER := 41;
10:28:44 2166  -- VARIABLES
10:28:44 2167  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
10:28:44 2168  var_active_invoices_count NUMBER;
10:28:44 2169  -- EXCEPTIONS
10:28:44 2170  BAD_SUBSCRIPTION_ID	   EXCEPTION;
10:28:44 2171  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
10:28:44 2172  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
10:28:44 2173  ACTIVE_INVOICES_FOUND	   EXCEPTION;
10:28:44 2174  CAN_NOT_CREATE_NOTE	   EXCEPTION;
10:28:44 2175  EXCEPTION_MESSAGE	   VARCHAR2(1024);
10:28:44 2176  BEGIN
10:28:44 2177  
10:28:44 2178  	 -- Get current subscription status
10:28:44 2179  	 BEGIN
10:28:44 2180  	   SELECT
10:28:44 2181  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
10:28:44 2182  	   FROM
10:28:44 2183  	     SUBSCRIPTION
10:28:44 2184  	   WHERE
10:28:44 2185  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 2186  	   EXCEPTION
10:28:44 2187  	     WHEN NO_DATA_FOUND THEN
10:28:44 2188  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 2189  	 END;
10:28:44 2190  
10:28:44 2191  	 -- Check for invoices with active licenses
10:28:44 2192  	 SELECT
10:28:44 2193  	   COUNT(*) into var_active_invoices_count
10:28:44 2194  	 FROM
10:28:44 2195  	   LICENSE
10:28:44 2196  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:28:44 2197  	 WHERE
10:28:44 2198  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_ACTIVE
10:28:44 2199  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
10:28:44 2200  
10:28:44 2201  	 IF var_active_invoices_count > 0 THEN
10:28:44 2202  	   RAISE ACTIVE_INVOICES_FOUND;
10:28:44 2203  	 END IF;
10:28:44 2204  
10:28:44 2205  	 -- Check that subscription is active
10:28:44 2206  	 IF var_current_subscr_status != GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44 2207  	    AND var_current_subscr_status != GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED THEN
10:28:44 2208  	   RAISE BAD_SUBSCRIPTION_STATUS;
10:28:44 2209  	 END IF;
10:28:44 2210  
10:28:44 2211  	 -- Update subscription data
10:28:44 2212  	 BEGIN
10:28:44 2213  	   PROCS_SUBSCRIPTION_CRU_V24.UPDATE_SUBSCRIPTION(
10:28:44 2214  	     in_subscription_id        => in_subscription_id,
10:28:44 2215  	     in_subscription_status_id => GLOBAL_STATUSES_V24.SUBSCRIPTION_FALSE_START,
10:28:44 2216  	     in_cancelation_date       => in_cancelation_date,
10:28:44 2217  	     in_updated_by	       => in_updated_by,
10:28:44 2218  	     in_sct_id		       => FALSE_START_REASON
10:28:44 2219  	   );
10:28:44 2220  	   EXCEPTION
10:28:44 2221  	     WHEN OTHERS THEN
10:28:44 2222  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:44 2223  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
10:28:44 2224  	 END;
10:28:44 2225  
10:28:44 2226  	 -- Annotate subscription
10:28:44 2227  	 IF in_note IS NOT NULL THEN
10:28:44 2228  	   BEGIN
10:28:44 2229  	     PROCS_SUBSCRIPTION_V24.ANNOTATE_SUBSCRIPTION(
10:28:44 2230  	       in_subscription_id,
10:28:44 2231  	       in_agent_id,
10:28:44 2232  	       in_note,
10:28:44 2233  	       in_updated_by
10:28:44 2234  	     );
10:28:44 2235  	     EXCEPTION
10:28:44 2236  	      WHEN OTHERS THEN
10:28:44 2237  		EXCEPTION_MESSAGE := SQLERRM;
10:28:44 2238  		RAISE CAN_NOT_CREATE_NOTE;
10:28:44 2239  	   END;
10:28:44 2240  	 END IF;
10:28:44 2241  
10:28:44 2242  EXCEPTION
10:28:44 2243  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 2244  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2245  	   SPROC_NAME, 'No such subscription');
10:28:44 2246  WHEN BAD_SUBSCRIPTION_STATUS THEN
10:28:44 2247  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 2248  	   SPROC_NAME, 'Bad current subscription status');
10:28:44 2249  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
10:28:44 2250  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 2251  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
10:28:44 2252  WHEN ACTIVE_INVOICES_FOUND THEN
10:28:44 2253  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:44 2254  	   SPROC_NAME, 'Invoices with active licenses found');
10:28:44 2255  WHEN CAN_NOT_CREATE_NOTE THEN
10:28:44 2256  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 2257  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:28:44 2258  WHEN OTHERS THEN
10:28:44 2259  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2260  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 2261  END FINALIZE_FALSE_START;
10:28:44 2262  
10:28:44 2263  /******************************************************************************/
10:28:44 2264  
10:28:44 2265  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
10:28:44 2266  	 in_subscription_id IN NUMBER
10:28:44 2267  ) RETURN NUMBER AS
10:28:44 2268  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
10:28:44 2269  -- VARIABLES
10:28:44 2270  var_is_offer_chain_cancelable NUMBER;
10:28:44 2271  --64603
10:28:44 2272  var_end_date date;
10:28:44 2273  today_date date := current_date;
10:28:44 2274  offer_id number;
10:28:44 2275  -- EXCEPTIONS
10:28:44 2276  COULD_NOT_CHECK	   EXCEPTION;
10:28:44 2277  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 2278  EXCEPTION_MESSAGE   VARCHAR2(1024);
10:28:44 2279  BEGIN
10:28:44 2280  
10:28:44 2281  	 BEGIN
10:28:44 2282  	   -- find offer_chain_id for given in_subscription_id
10:28:44 2283  	   SELECT OFFER_CHAIN_ID into offer_id
10:28:44 2284  	   FROM SUBSCRIPTION
10:28:44 2285  	   WHERE ID = in_subscription_id;
10:28:44 2286  	   EXCEPTION
10:28:44 2287  	     WHEN NO_DATA_FOUND THEN
10:28:44 2288  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 2289  	     WHEN OTHERS THEN
10:28:44 2290  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:44 2291  	       RAISE COULD_NOT_CHECK;
10:28:44 2292  	 END;
10:28:44 2293  
10:28:44 2294  	 -- find if it was redeemed from a gift certificate
10:28:44 2295  	 BEGIN
10:28:44 2296  	   SELECT l.end_date INTO var_end_date
10:28:44 2297  	   FROM LICENSE l, GIFT_CERTIFICATE g
10:28:44 2298  	   WHERE l.invoice_id = g.finalized_invoice_id
10:28:44 2299  	   AND l.subscription_id = in_subscription_id;
10:28:44 2300  
10:28:44 2301  	   -- if the license end_date is bigger than today, we are in the
10:28:44 2302  	   -- first period, so we cannot cancel; otherwise can cancel
10:28:44 2303  	   IF var_end_date > today_date THEN
10:28:44 2304  	       RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:44 2305  	   ELSE
10:28:44 2306  	       RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:44 2307  	   END IF;
10:28:44 2308  
10:28:44 2309  	   EXCEPTION
10:28:44 2310  	       -- not coming from a gift certificate,
10:28:44 2311  	       -- use old logic
10:28:44 2312  	       WHEN NO_DATA_FOUND THEN
10:28:44 2313  		   SELECT
10:28:44 2314  		       PROCS_OFFER_CHAIN_V24.IS_OFFER_CHAIN_CANCELABLE(offer_id)
10:28:44 2315  		       INTO var_is_offer_chain_cancelable
10:28:44 2316  		   FROM DUAL;
10:28:44 2317  		   RETURN var_is_offer_chain_cancelable;
10:28:44 2318  	 END;
10:28:44 2319  
10:28:44 2320  EXCEPTION
10:28:44 2321  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 2322  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2323  	   SPROC_NAME, 'No such subscription');
10:28:44 2324  WHEN COULD_NOT_CHECK THEN
10:28:44 2325  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:44 2326  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
10:28:44 2327  WHEN OTHERS THEN
10:28:44 2328  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2329  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 2330  
10:28:44 2331  END IS_SUBSCRIPTION_CANCELABLE;
10:28:44 2332  /******************************************************************************/
10:28:44 2333  
10:28:44 2334  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
10:28:44 2335  	 in_subscription_id IN NUMBER,
10:28:44 2336  	 out_result_set     OUT SYS_REFCURSOR
10:28:44 2337  ) AS
10:28:44 2338  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
10:28:44 2339  -- VARIABLES
10:28:44 2340  var_offer NUMBER;
10:28:44 2341  -- EXCEPTIONS
10:28:44 2342  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 2343  BEGIN
10:28:44 2344  
10:28:44 2345  	 OPEN out_result_set FOR
10:28:44 2346  	 SELECT DISTINCT
10:28:44 2347  	   PRODUCT_OFFERING.ID,
10:28:44 2348  	   PRODUCT_OFFERING.PRODUCT_ID,
10:28:44 2349  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
10:28:44 2350  	   PRODUCT_OFFERING.UNIT_PRICE,
10:28:44 2351  	   PRODUCT_OFFERING.QUANTITY,
10:28:44 2352  	   PRODUCT_OFFERING.CREATE_DATE,
10:28:44 2353  	   PRODUCT_OFFERING.CREATED_BY,
10:28:44 2354  	   PRODUCT.ID P_ID,
10:28:44 2355  	   PRODUCT.NAME,
10:28:44 2356  	   PRODUCT.TAX_CATEGORY_ID,
10:28:44 2357  	   PRODUCT.ENTITLEMENT,
10:28:44 2358  	   PRODUCT.IS_SHAREABLE,
10:28:44 2359  	   PRODUCT.PRODUCT_STATUS_ID,
10:28:44 2360  	   PRODUCT.DEFAULT_VAT_RATE
10:28:44 2361  	 FROM
10:28:44 2362  	   OFFER_PRODUCT_OFFERING
10:28:44 2363  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:28:44 2364  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:28:44 2365  	 WHERE
10:28:44 2366  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:28:44 2367  	     SELECT
10:28:44 2368  	       LICENSE.OFFER_ID
10:28:44 2369  	     FROM
10:28:44 2370  	       SUBSCRIPTION
10:28:44 2371  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V24.TRUE
10:28:44 2372  	     WHERE
10:28:44 2373  	       SUBSCRIPTION.ID = in_subscription_id
10:28:44 2374  	   );
10:28:44 2375  
10:28:44 2376  EXCEPTION
10:28:44 2377  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 2378  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2379  	   SPROC_NAME, 'No such subscription');
10:28:44 2380  WHEN OTHERS THEN
10:28:44 2381  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2382  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 2383  END GET_SUBSCR_PROD_OFFERRINGS;
10:28:44 2384  
10:28:44 2385  
10:28:44 2386  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
10:28:44 2387  /*
10:28:44 2388  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:44 2389  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:44 2390  */
10:28:44 2391  	 in_subscription_id IN NUMBER,
10:28:44 2392  	 out_result_set     OUT SYS_REFCURSOR
10:28:44 2393  ) AS
10:28:44 2394  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
10:28:44 2395  -- VARIABLES
10:28:44 2396  var_offer NUMBER;
10:28:44 2397  -- EXCEPTIONS
10:28:44 2398  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 2399  BEGIN
10:28:44 2400  
10:28:44 2401  	 OPEN out_result_set FOR
10:28:44 2402  	 SELECT DISTINCT
10:28:44 2403  	   PRODUCT_OFFERING.ID,
10:28:44 2404  	   PRODUCT_OFFERING.PRODUCT_ID,
10:28:44 2405  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
10:28:44 2406  	   PRODUCT_OFFERING.UNIT_PRICE,
10:28:44 2407  	   PRODUCT_OFFERING.QUANTITY,
10:28:44 2408  	   PRODUCT_OFFERING.CREATE_DATE,
10:28:44 2409  	   PRODUCT_OFFERING.CREATED_BY,
10:28:44 2410  	   PRODUCT.ID P_ID,
10:28:44 2411  	   PRODUCT.NAME,
10:28:44 2412  	   PRODUCT.TAX_CATEGORY_ID,
10:28:44 2413  	   PRODUCT.ENTITLEMENT,
10:28:44 2414  	   PRODUCT.IS_SHAREABLE,
10:28:44 2415  	   PRODUCT.PRODUCT_STATUS_ID,
10:28:44 2416  	   PRODUCT.DEFAULT_VAT_RATE
10:28:44 2417  	 FROM
10:28:44 2418  	   OFFER_PRODUCT_OFFERING
10:28:44 2419  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:28:44 2420  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:28:44 2421  	 WHERE
10:28:44 2422  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:28:44 2423  	     SELECT
10:28:44 2424  	       LICENSE.OFFER_ID
10:28:44 2425  	     FROM
10:28:44 2426  	       SUBSCRIPTION
10:28:44 2427  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:44 2428  	     WHERE
10:28:44 2429  	       SUBSCRIPTION.ID = in_subscription_id
10:28:44 2430  	   );
10:28:44 2431  
10:28:44 2432  EXCEPTION
10:28:44 2433  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 2434  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2435  	   SPROC_NAME, 'No such subscription');
10:28:44 2436  WHEN OTHERS THEN
10:28:44 2437  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2438  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 2439  END RETRIEVE_SUB_PROD_OFFER;
10:28:44 2440  /******************************************************************************/
10:28:44 2441  PROCEDURE GET_SUBSCR_LIC_OFFER(
10:28:44 2442  	 in_subscription_id IN NUMBER,
10:28:44 2443  	 out_result_set     OUT SYS_REFCURSOR
10:28:44 2444  ) AS
10:28:44 2445  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
10:28:44 2446  -- VARIABLES
10:28:44 2447  var_offer_chain NUMBER;
10:28:44 2448  -- EXCEPTIONS
10:28:44 2449  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 2450  BEGIN
10:28:44 2451  	 BEGIN
10:28:44 2452  	   SELECT
10:28:44 2453  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
10:28:44 2454  	   FROM
10:28:44 2455  	     SUBSCRIPTION
10:28:44 2456  	   WHERE
10:28:44 2457  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 2458  	   EXCEPTION
10:28:44 2459  	     WHEN NO_DATA_FOUND THEN
10:28:44 2460  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 2461  	 END;
10:28:44 2462  
10:28:44 2463  	 OPEN out_result_set FOR
10:28:44 2464  	 SELECT DISTINCT
10:28:44 2465  	   po.ID po_id,
10:28:44 2466  	   po.PRODUCT_ID po_product_id,
10:28:44 2467  	   p.TAX_CATEGORY_ID po_tax_category_id,
10:28:44 2468  	   po.UNIT_PRICE po_unit_price,
10:28:44 2469  	   po.QUANTITY po_quantity,
10:28:44 2470  	   po.CREATE_DATE po_create_date,
10:28:44 2471  	   po.CREATED_BY po_created_by,
10:28:44 2472  	   l.ID l_id,
10:28:44 2473  	   l.license_status_id l_license_status_id,
10:28:44 2474  	   l.start_date l_start_date,
10:28:44 2475  	   l.offer_id l_offer_id,
10:28:44 2476  	   l.subscription_id l_subscription_id,
10:28:44 2477  	   l.invoice_id l_invoice_id,
10:28:44 2478  	   l.end_date l_end_date,
10:28:44 2479  	   l.entitlement_end_date l_entitlement_end_date,
10:28:44 2480  	   l.create_date l_create_date,
10:28:44 2481  	   l.created_by l_created_by,
10:28:44 2482  	   l.is_extension l_is_extension,
10:28:44 2483  	   l.current_offer_index l_current_offer_index,
10:28:44 2484  	   l.current_offer_recurr_num l_current_offer_recurr_num,
10:28:44 2485  	   l.needs_entitlements l_needs_entitlements
10:28:44 2486  	 FROM
10:28:44 2487  	   OFFER_PRODUCT_OFFERING opo,
10:28:44 2488  	   PRODUCT_OFFERING po,
10:28:44 2489  	   SUBSCRIPTION s,
10:28:44 2490  	   LICENSE l,
10:28:44 2491  	   PRODUCT p
10:28:44 2492  	 WHERE
10:28:44 2493  	   opo.product_offering_id = po.id
10:28:44 2494  	   and po.id = l.offer_id
10:28:44 2495  	   and l.subscription_id = s.id
10:28:44 2496  	   and po.product_id = p.id
10:28:44 2497  	   and l.license_status_id = GLOBAL_STATUSES_V24.LICENSE_ACTIVE
10:28:44 2498  	   and s.id = in_subscription_id
10:28:44 2499  	 ;
10:28:44 2500  EXCEPTION
10:28:44 2501  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 2502  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2503  	   SPROC_NAME, 'No such subscription');
10:28:44 2504  WHEN OTHERS THEN
10:28:44 2505  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2506  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 2507  END GET_SUBSCR_LIC_OFFER;
10:28:44 2508  
10:28:44 2509  /******************************************************************************/
10:28:44 2510  
10:28:44 2511  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
10:28:44 2512  	 in_subscription_id IN NUMBER,
10:28:44 2513  	 out_result	    OUT NUMBER
10:28:44 2514  ) AS
10:28:44 2515  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
10:28:44 2516  -- VARIABLES
10:28:44 2517  temp_subscription_id NUMBER;
10:28:44 2518  var_local_result     NUMBER;
10:28:44 2519  -- EXCEPTIONS
10:28:44 2520  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:44 2521  BEGIN
10:28:44 2522  
10:28:44 2523  	 -- Check that subscription exists
10:28:44 2524  	 BEGIN
10:28:44 2525  	   SELECT
10:28:44 2526  	     SUBSCRIPTION.ID into temp_subscription_id
10:28:44 2527  	   FROM
10:28:44 2528  	     SUBSCRIPTION
10:28:44 2529  	   WHERE
10:28:44 2530  	     SUBSCRIPTION.ID = in_subscription_id;
10:28:44 2531  	   EXCEPTION
10:28:44 2532  	     WHEN NO_DATA_FOUND THEN
10:28:44 2533  	       RAISE BAD_SUBSCRIPTION_ID;
10:28:44 2534  	 END;
10:28:44 2535  
10:28:44 2536  	 var_local_result := NULL;
10:28:44 2537  
10:28:44 2538  	 -- Check charges for each invoice associated with gived subscription
10:28:44 2539  	 FOR f_invoice IN (
10:28:44 2540  	   SELECT DISTINCT
10:28:44 2541  	     LICENSE.INVOICE_ID as "ID"
10:28:44 2542  	   FROM
10:28:44 2543  	     LICENSE
10:28:44 2544  	   WHERE
10:28:44 2545  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:28:44 2546  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V24.LICENSE_ACTIVE FROM DUAL )
10:28:44 2547  	 )
10:28:44 2548  	 LOOP
10:28:44 2549  
10:28:44 2550  	   -- Check each charge in invoice
10:28:44 2551  	   FOR f_charge IN (
10:28:44 2552  	     SELECT
10:28:44 2553  	       CHARGE.ID,
10:28:44 2554  	       CHARGE.CHARGE_STATUS_ID,
10:28:44 2555  	       CHARGE.CHARGE_AMOUNT
10:28:44 2556  	     FROM
10:28:44 2557  	       CHARGE
10:28:44 2558  	     WHERE
10:28:44 2559  	       CHARGE.INVOICE_ID = f_invoice.ID
10:28:44 2560  	   )
10:28:44 2561  	   LOOP
10:28:44 2562  
10:28:44 2563  	     -- Charge amount < 0     => it is a refund
10:28:44 2564  	     -- Charge status is OPEN => means that it is not processed yet
10:28:44 2565  	     IF f_charge.CHARGE_AMOUNT < 0
10:28:44 2566  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V24.CHARGE_OPENED THEN
10:28:44 2567  	       var_local_result := GLOBAL_CONSTANTS_V24.TRUE;
10:28:44 2568  	     END IF;
10:28:44 2569  
10:28:44 2570  	   END LOOP;
10:28:44 2571  
10:28:44 2572  	 END LOOP;
10:28:44 2573  
10:28:44 2574  	 IF var_local_result IS NULL THEN
10:28:44 2575  	   out_result := GLOBAL_CONSTANTS_V24.FALSE;
10:28:44 2576  	 ELSE
10:28:44 2577  	   out_result := GLOBAL_CONSTANTS_V24.TRUE;
10:28:44 2578  	 END IF;
10:28:44 2579  
10:28:44 2580  EXCEPTION
10:28:44 2581  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:44 2582  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2583  	   SPROC_NAME, 'No such transaction id');
10:28:44 2584  WHEN OTHERS THEN
10:28:44 2585  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2586  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 2587  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
10:28:44 2588  
10:28:44 2589  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
10:28:44 2590  	 in_group_id	    IN NUMBER,
10:28:44 2591  	 in_offer_chain_id  IN NUMBER,
10:28:44 2592  	 out_result	    OUT NUMBER
10:28:44 2593  ) AS
10:28:44 2594  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
10:28:44 2595  -- VARIABLES
10:28:44 2596  temp_acct_id	    NUMBER;
10:28:44 2597  temp_oc_id	    NUMBER;
10:28:44 2598  -- EXCEPTIONS
10:28:44 2599  BAD_GROUP_ID EXCEPTION;
10:28:44 2600  BAD_OFFER_CHAIN_ID EXCEPTION;
10:28:44 2601  BEGIN
10:28:44 2602  	 -- Check that group id exists
10:28:44 2603  	 BEGIN
10:28:44 2604  	   SELECT
10:28:44 2605  	     ACCOUNT.ID into temp_acct_id
10:28:44 2606  	   FROM
10:28:44 2607  	     ACCOUNT
10:28:44 2608  	   WHERE
10:28:44 2609  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:44 2610  	   EXCEPTION
10:28:44 2611  	     WHEN NO_DATA_FOUND THEN
10:28:44 2612  	       RAISE BAD_GROUP_ID;
10:28:44 2613  	 END;
10:28:44 2614  	 -- Check that offer chain id exists
10:28:44 2615  	 BEGIN
10:28:44 2616  	   SELECT
10:28:44 2617  	     OFFER_CHAIN.ID into temp_oc_id
10:28:44 2618  	   FROM
10:28:44 2619  	     OFFER_CHAIN
10:28:44 2620  	   WHERE
10:28:44 2621  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:28:44 2622  	   EXCEPTION
10:28:44 2623  	     WHEN NO_DATA_FOUND THEN
10:28:44 2624  	       RAISE BAD_OFFER_CHAIN_ID;
10:28:44 2625  	 END;
10:28:44 2626  	 SELECT
10:28:44 2627  	   COUNT(*) into out_result
10:28:44 2628  	 FROM
10:28:44 2629  	   SUBSCRIPTION
10:28:44 2630  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:28:44 2631  	 WHERE
10:28:44 2632  	   ACCOUNT.GROUP_ID = in_group_id
10:28:44 2633  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
10:28:44 2634  	   AND (
10:28:44 2635  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44 2636  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD);
10:28:44 2637  
10:28:44 2638  EXCEPTION
10:28:44 2639  WHEN BAD_GROUP_ID THEN
10:28:44 2640  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2641  	   SPROC_NAME, 'No such transaction id');
10:28:44 2642  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:44 2643  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2644  	   SPROC_NAME, 'No such offer chain id');
10:28:44 2645  WHEN OTHERS THEN
10:28:44 2646  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2647  	   sproc_name, 'Unknown error', sqlerrm);
10:28:44 2648  END GET_EXISTING_SUBSCR_NUMBER;
10:28:44 2649  
10:28:44 2650  PROCEDURE GET_EXISTING_SUBSCR_IDS (
10:28:44 2651  	 in_group_id	    IN NUMBER,
10:28:44 2652  	 in_offer_chain_id  IN NUMBER,
10:28:44 2653  	 out_result_set     OUT SYS_REFCURSOR
10:28:44 2654  ) AS
10:28:44 2655  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
10:28:44 2656  -- VARIABLES
10:28:44 2657  temp_acct_id	    NUMBER;
10:28:44 2658  temp_oc_id	    NUMBER;
10:28:44 2659  -- EXCEPTIONS
10:28:44 2660  BAD_GROUP_ID EXCEPTION;
10:28:44 2661  BAD_OFFER_CHAIN_ID EXCEPTION;
10:28:44 2662  BEGIN
10:28:44 2663  
10:28:44 2664  	 -- Check that group id exists
10:28:44 2665  	 BEGIN
10:28:44 2666  	   SELECT
10:28:44 2667  	     ACCOUNT.ID into temp_acct_id
10:28:44 2668  	   FROM
10:28:44 2669  	     ACCOUNT
10:28:44 2670  	   WHERE
10:28:44 2671  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:44 2672  	   EXCEPTION
10:28:44 2673  	     WHEN NO_DATA_FOUND THEN
10:28:44 2674  	       RAISE BAD_GROUP_ID;
10:28:44 2675  	 END;
10:28:44 2676  	 -- Check that offer chain id exists
10:28:44 2677  	 BEGIN
10:28:44 2678  	   SELECT
10:28:44 2679  	     OFFER_CHAIN.ID into temp_oc_id
10:28:44 2680  	   FROM
10:28:44 2681  	     OFFER_CHAIN
10:28:44 2682  	   WHERE
10:28:44 2683  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:28:44 2684  	   EXCEPTION
10:28:44 2685  	     WHEN NO_DATA_FOUND THEN
10:28:44 2686  	       RAISE BAD_OFFER_CHAIN_ID;
10:28:44 2687  	 END;
10:28:44 2688  
10:28:44 2689  	 OPEN out_result_set FOR
10:28:44 2690  	 SELECT
10:28:44 2691  	   SUBSCRIPTION.ID
10:28:44 2692  	 FROM
10:28:44 2693  	   SUBSCRIPTION
10:28:44 2694  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:28:44 2695  	 WHERE
10:28:44 2696  	   ACCOUNT.GROUP_ID = in_group_id
10:28:44 2697  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
10:28:44 2698  	   AND (
10:28:44 2699  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:44 2700  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD);
10:28:44 2701  
10:28:44 2702  EXCEPTION
10:28:44 2703  WHEN BAD_GROUP_ID THEN
10:28:44 2704  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2705  	   SPROC_NAME, 'No such transaction id');
10:28:44 2706  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:44 2707  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2708  	   SPROC_NAME, 'No such offer chain id');
10:28:44 2709  WHEN OTHERS THEN
10:28:44 2710  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2711  	   sproc_name, 'Unknown error', sqlerrm);
10:28:44 2712  END GET_EXISTING_SUBSCR_IDS;
10:28:44 2713  
10:28:44 2714  PROCEDURE ADD_META_DATA (
10:28:44 2715  	 in_subscription_id IN NUMBER,
10:28:44 2716  	 in_name	    IN VARCHAR2,
10:28:44 2717  	 in_value	    IN VARCHAR2,
10:28:44 2718  	 in_created_by	    IN VARCHAR2
10:28:44 2719  ) AS
10:28:44 2720  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
10:28:44 2721  BEGIN
10:28:44 2722  
10:28:44 2723  	 INSERT INTO SUBSCRIPTION_META_DATA (
10:28:44 2724  	   ID,
10:28:44 2725  	   SUBSCRIPTION_ID,
10:28:44 2726  	   NAME,
10:28:44 2727  	   VALUE,
10:28:44 2728  	   CREATE_DATE,
10:28:44 2729  	   CREATED_BY
10:28:44 2730  	 ) VALUES (
10:28:44 2731  	   SUBMD_ID_SEQ.nextVal,
10:28:44 2732  	   in_subscription_id,
10:28:44 2733  	   in_name,
10:28:44 2734  	   in_value,
10:28:44 2735  	   sysdate,
10:28:44 2736  	   in_created_by
10:28:44 2737  	 );
10:28:44 2738  
10:28:44 2739  EXCEPTION
10:28:44 2740  WHEN OTHERS THEN
10:28:44 2741  	 IF SQLCODE = -2291 THEN
10:28:44 2742  	   PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:44 2743  	     SPROC_NAME, 'No such subscription');
10:28:44 2744  	 ELSE
10:28:44 2745  	   PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2746  	     SPROC_NAME, 'Unknown error', sqlerrm);
10:28:44 2747  	 END IF;
10:28:44 2748  END ADD_META_DATA;
10:28:44 2749  
10:28:44 2750  /******************************************************************************/
10:28:44 2751  
10:28:44 2752  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
10:28:44 2753  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
10:28:44 2754  	 out_result_set       OUT SYS_REFCURSOR
10:28:44 2755  ) AS
10:28:44 2756  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
10:28:44 2757  -- Exceptions
10:28:44 2758  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
10:28:44 2759  BEGIN
10:28:44 2760  
10:28:44 2761  	 IF in_subscriptions_ids IS NULL THEN
10:28:44 2762  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
10:28:44 2763  	 END IF;
10:28:44 2764  
10:28:44 2765  	 OPEN out_result_set FOR
10:28:44 2766  	 SELECT
10:28:44 2767  	   SMD.SUBSCRIPTION_ID,
10:28:44 2768  	   SMD.NAME,
10:28:44 2769  	   SMD.VALUE
10:28:44 2770  	 FROM
10:28:44 2771  	   SUBSCRIPTION_META_DATA SMD
10:28:44 2772  	 WHERE
10:28:44 2773  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
10:28:44 2774  
10:28:44 2775  EXCEPTION
10:28:44 2776  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
10:28:44 2777  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:44 2778  	   SPROC_NAME, 'Bad subscription ids parameter');
10:28:44 2779  WHEN OTHERS THEN
10:28:44 2780  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2781  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:44 2782  END GET_SUBSCRIPTIONS_META_DATA;
10:28:44 2783  
10:28:44 2784  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
10:28:44 2785  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
10:28:44 2786  	 out_result_set     OUT SYS_REFCURSOR
10:28:44 2787  ) AS
10:28:44 2788  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
10:28:44 2789  BEGIN
10:28:44 2790  	 OPEN out_result_set FOR
10:28:44 2791  	 SELECT subscription.id FROM
10:28:44 2792  	   subscription
10:28:44 2793  	 INNER JOIN license ON license.subscription_id = subscription.id
10:28:44 2794  	 INNER JOIN invoice ON invoice.id = license.invoice_id
10:28:44 2795  	 INNER JOIN charge ON invoice.id = charge.invoice_id
10:28:44 2796  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
10:28:44 2797  	 WHERE transaction.order_id = in_order_id;
10:28:44 2798  EXCEPTION
10:28:44 2799  WHEN OTHERS THEN
10:28:44 2800  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2801  	   SPROC_NAME, 'Unknown error', sqlerrm);
10:28:44 2802  END GET_SUBS_BY_TRNS_ORDER_ID;
10:28:44 2803  
10:28:44 2804  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
10:28:44 2805  	(
10:28:44 2806  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:28:44 2807  	 out_result_set      OUT SYS_REFCURSOR
10:28:44 2808  )
10:28:44 2809  AS
10:28:44 2810  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
10:28:44 2811  BEGIN
10:28:44 2812  	 OPEN out_result_set FOR
10:28:44 2813  	 SELECT
10:28:44 2814  	   c.ID,
10:28:44 2815  	   c.TRANSACTION_ID,
10:28:44 2816  	   c.INSTRUMENT_ID,
10:28:44 2817  	   c.INSTRUMENT_TYPE_ID,
10:28:44 2818  	   c.CHARGE_AMOUNT,
10:28:44 2819  	   c.CREATE_DATE,
10:28:44 2820  	   c.CREATED_BY,
10:28:44 2821  	   c.INVOICE_ID
10:28:44 2822  	  FROM
10:28:44 2823  	   subscription s,
10:28:44 2824  	   license l,
10:28:44 2825  	   charge c
10:28:44 2826  	 WHERE
10:28:44 2827  	   s.id = l.subscription_id and
10:28:44 2828  	   l.invoice_id = c.invoice_id and
10:28:44 2829  	   c.charge_status_id = GLOBAL_STATUSES_V24.CHARGE_OPENED and
10:28:44 2830  	   exists (
10:28:44 2831  	     select null
10:28:44 2832  	     from transaction t
10:28:44 2833  	     where
10:28:44 2834  	       t.id = c.transaction_id
10:28:44 2835  	   ) and
10:28:44 2836  	   s.id = in_subscription_id;
10:28:44 2837  EXCEPTION
10:28:44 2838  WHEN OTHERS THEN
10:28:44 2839  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:44 2840  	   SPROC_NAME, 'Unknown error', sqlerrm);
10:28:44 2841  END GET_OPEN_CHARGES_BY_SUBID;
10:28:44 2842  
10:28:44 2843  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
10:28:44 2844  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
10:28:44 2845  ) RETURN NUMBER
10:28:44 2846  AS
10:28:44 2847  var_gift_certificate_id NUMBER;
10:28:44 2848  BEGIN
10:28:44 2849  	     SELECT id INTO var_gift_certificate_id
10:28:44 2850  	     FROM
10:28:44 2851  	       gift_certificate gc
10:28:44 2852  	     WHERE
10:28:44 2853  	       gc.finalized_invoice_id in (
10:28:44 2854  		 SELECT invoice_id
10:28:44 2855  		 FROM (
10:28:44 2856  		   SELECT l.invoice_id
10:28:44 2857  		   FROM
10:28:44 2858  		     license l
10:28:44 2859  		   WHERE
10:28:44 2860  		     l.subscription_id = in_subscription_id
10:28:44 2861  		   ORDER BY l.create_date asc
10:28:44 2862  		 )
10:28:44 2863  	       )
10:28:44 2864  	       and rownum <= 1;
10:28:44 2865  	     return var_gift_certificate_id;
10:28:44 2866  END GET_GIFT_CERT_ID_BY_SUB_ID;
10:28:44 2867  
10:28:44 2868  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
10:28:44 2869  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
10:28:44 2870  ) RETURN VARCHAR2
10:28:44 2871  AS
10:28:44 2872  var_gift_certificate_code VARCHAR2(255 BYTE);
10:28:44 2873  BEGIN
10:28:44 2874  	     SELECT code INTO var_gift_certificate_code
10:28:44 2875  	     FROM
10:28:44 2876  	       gift_certificate gc
10:28:44 2877  	     WHERE
10:28:44 2878  	       gc.finalized_invoice_id in (
10:28:44 2879  		 SELECT invoice_id
10:28:44 2880  		 FROM (
10:28:44 2881  		   SELECT l.invoice_id
10:28:44 2882  		   FROM
10:28:44 2883  		     license l
10:28:44 2884  		   WHERE
10:28:44 2885  		     l.subscription_id = in_subscription_id
10:28:44 2886  		 )
10:28:44 2887  	       )
10:28:44 2888  	       and rownum <= 1;
10:28:44 2889  	     return var_gift_certificate_code;
10:28:44 2890  END GET_GIFT_CERT_CODE_BY_SUB_ID;
10:28:44 2891  
10:28:44 2892  PROCEDURE GET_ACTIVE_MEU_SUBS (
10:28:44 2893  	 out_result_set      OUT SYS_REFCURSOR
10:28:44 2894  )
10:28:44 2895  AS
10:28:44 2896  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
10:28:44 2897  BEGIN
10:28:44 2898  	 OPEN out_result_set FOR
10:28:44 2899  	       SELECT
10:28:44 2900  		   s.id,
10:28:44 2901  		   s.instrument_type_id,
10:28:44 2902  		   s.instrument_id,
10:28:44 2903  		   a.group_id,
10:28:44 2904  		   s.offer_chain_id
10:28:44 2905  	       FROM
10:28:44 2906  		   core_owner.subscription s,
10:28:44 2907  		   core_owner.account a
10:28:44 2908  	       WHERE
10:28:44 2909  		   a.id = s.account_id AND(
10:28:44 2910  		       s.offer_chain_id = 1745992781 OR
10:28:44 2911  		       s.offer_chain_id = 3902149773 OR
10:28:44 2912  		       s.offer_chain_id = 2240201337) AND
10:28:44 2913  		   NOT EXISTS
10:28:44 2914  		   (
10:28:44 2915  		       SELECT
10:28:44 2916  			   1
10:28:44 2917  		       FROM
10:28:44 2918  			   core_owner.subscription ss
10:28:44 2919  		       WHERE
10:28:44 2920  			   ss.account_id = a.id AND(
10:28:44 2921  			       ss.offer_chain_id = 2794122734 OR
10:28:44 2922  			       ss.offer_chain_id = 3564368005 OR
10:28:44 2923  			       ss.offer_chain_id = 757934392)) AND
10:28:44 2924  		   rownum < 5000;
10:28:44 2925  END GET_ACTIVE_MEU_SUBS;
10:28:44 2926  
10:28:44 2927  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
10:28:44 2928  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:28:44 2929  	 out_offer_id	     OUT LICENSE.ID%TYPE
10:28:44 2930  )
10:28:44 2931  AS
10:28:44 2932  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
10:28:44 2933  BEGIN
10:28:44 2934  	 SELECT OFFER_ID INTO out_offer_id
10:28:44 2935  	 FROM LICENSE L,
10:28:44 2936  	 (
10:28:44 2937  	   SELECT MIN(ID) ID FROM LICENSE
10:28:44 2938  	   WHERE SUBSCRIPTION_ID = in_subscription_id
10:28:44 2939  	   AND LICENSE_STATUS_ID = 2
10:28:44 2940  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
10:28:44 2941  	 ) EARLIEST_ACTIVE_LICENSE
10:28:44 2942  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
10:28:44 2943  END GET_EARLIEST_ACTIVE_OFFER_ID;
10:28:44 2944  
10:28:44 2945  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
10:28:44 2946  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:28:44 2947  	 out_license_id      OUT LICENSE.ID%TYPE
10:28:44 2948  )
10:28:44 2949  AS
10:28:44 2950  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
10:28:44 2951  BEGIN
10:28:44 2952  	 SELECT MIN(ID) into out_license_id
10:28:44 2953  	 FROM LICENSE
10:28:44 2954  	 WHERE SUBSCRIPTION_ID = in_subscription_id
10:28:44 2955  	   AND LICENSE_STATUS_ID = 2
10:28:44 2956  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
10:28:44 2957  END GET_EARLIEST_ACTIVE_LICENSE_ID;
10:28:44 2958  
10:28:44 2959  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
10:28:44 2960  	 out_result_set      OUT SYS_REFCURSOR
10:28:44 2961  )
10:28:44 2962  AS
10:28:44 2963  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
10:28:44 2964  BEGIN
10:28:44 2965  	 OPEN out_result_set FOR
10:28:44 2966  	   SELECT
10:28:44 2967  	     s.id
10:28:44 2968  	   FROM
10:28:44 2969  	     core_owner.transaction t
10:28:44 2970  	   INNER JOIN
10:28:44 2971  	     core_owner.charge c
10:28:44 2972  	   ON
10:28:44 2973  	     c.transaction_id = t.id
10:28:44 2974  	   INNER JOIN
10:28:44 2975  	     core_owner.invoice i
10:28:44 2976  	   ON
10:28:44 2977  	     i.id = c.invoice_id
10:28:44 2978  	   INNER JOIN
10:28:44 2979  	     core_owner.license l
10:28:44 2980  	   ON
10:28:44 2981  	     i.id = l.invoice_id
10:28:44 2982  	   INNER JOIN
10:28:44 2983  	     core_owner.subscription s
10:28:44 2984  	   ON
10:28:44 2985  	     l.subscription_id = s.id
10:28:44 2986  	   INNER JOIN
10:28:44 2987  	     core_owner.account a
10:28:44 2988  	   ON
10:28:44 2989  	     s.account_id = a.id
10:28:44 2990  	   JOIN
10:28:44 2991  	     core_owner.rcn_cpt_chargeback_act_detail ccad
10:28:44 2992  	   ON
10:28:44 2993  	     t.order_id = ccad.merchant_order_number
10:28:44 2994  	   WHERE
10:28:44 2995  	     ccad.chargeback_category = 'RECD'
10:28:44 2996  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD);
10:28:44 2997  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
10:28:44 2998  
10:28:44 2999  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
10:28:44 3000  	 out_result_set      OUT SYS_REFCURSOR
10:28:44 3001  )
10:28:44 3002  AS
10:28:44 3003  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
10:28:44 3004  BEGIN
10:28:44 3005  	 OPEN out_result_set FOR
10:28:44 3006  	   SELECT
10:28:44 3007  	     s.id
10:28:44 3008  	   FROM
10:28:44 3009  	     core_owner.transaction t
10:28:44 3010  	   INNER JOIN
10:28:44 3011  	     core_owner.charge c
10:28:44 3012  	   ON
10:28:44 3013  	     c.transaction_id = t.id
10:28:44 3014  	   INNER JOIN
10:28:44 3015  	     core_owner.invoice i
10:28:44 3016  	   ON
10:28:44 3017  	     i.id = c.invoice_id
10:28:44 3018  	   INNER JOIN
10:28:44 3019  	     core_owner.license l
10:28:44 3020  	   ON
10:28:44 3021  	     i.id = l.invoice_id
10:28:44 3022  	   INNER JOIN
10:28:44 3023  	     core_owner.subscription s
10:28:44 3024  	   ON
10:28:44 3025  	     l.subscription_id = s.id
10:28:44 3026  	   INNER JOIN
10:28:44 3027  	     core_owner.account a
10:28:44 3028  	   ON
10:28:44 3029  	     s.account_id = a.id
10:28:44 3030  	   INNER JOIN
10:28:44 3031  	     core_owner.rcn_pp_trans_detail ptd
10:28:44 3032  	   ON
10:28:44 3033  	     t.order_id = ptd.invoice_id
10:28:44 3034  	   WHERE
10:28:44 3035  	     ptd.trans_status = 'D'
10:28:44 3036  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD);
10:28:44 3037  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
10:28:44 3038  
10:28:44 3039  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
10:28:44 3040  	 in_max_days_until_close IN NUMBER,
10:28:44 3041  	 in_num_subs_to_fetch	 IN NUMBER,
10:28:44 3042  	 out_result_set 	 OUT SYS_REFCURSOR
10:28:44 3043  )
10:28:44 3044  AS
10:28:44 3045  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GRACE_PERIOD_SUB_REGIS';
10:28:44 3046  BEGIN
10:28:44 3047  	 OPEN out_result_set FOR
10:28:44 3048  	 SELECT
10:28:44 3049  	     *
10:28:44 3050  	 FROM
10:28:44 3051  	     (
10:28:44 3052  		 SELECT
10:28:44 3053  		     a.group_id group_id,
10:28:44 3054  		     l.grace_end_date grace_end_date
10:28:44 3055  		 FROM
10:28:44 3056  		     license l
10:28:44 3057  		 JOIN
10:28:44 3058  		     subscription s
10:28:44 3059  		 ON
10:28:44 3060  		     s.id = l.subscription_id
10:28:44 3061  		 JOIN
10:28:44 3062  		     account a
10:28:44 3063  		 ON
10:28:44 3064  		     a.id = s.account_id
10:28:44 3065  		 WHERE
10:28:44 3066  		     l.license_status_id = GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD
10:28:44 3067  		 AND l.grace_end_date - SYSDATE <= in_max_days_until_close
10:28:44 3068  		 AND NOT EXISTS
10:28:44 3069  		     (
10:28:44 3070  			 SELECT
10:28:44 3071  			     NULL
10:28:44 3072  			 FROM
10:28:44 3073  			     process_retry_throttle
10:28:44 3074  			 WHERE
10:28:44 3075  			     process_name = sproc_name
10:28:44 3076  			 AND generic_id = a.group_id)
10:28:44 3077  		 AND rownum <= in_num_subs_to_fetch * 10
10:28:44 3078  		 ORDER BY
10:28:44 3079  		     dbms_random.value)
10:28:44 3080  	 WHERE
10:28:44 3081  	     rownum <= in_num_subs_to_fetch;
10:28:44 3082  END GET_GRACE_PERIOD_SUB_REGIS;
10:28:44 3083  
10:28:44 3084  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
10:28:44 3085  	 out_result_set      OUT SYS_REFCURSOR
10:28:44 3086  )
10:28:44 3087  AS
10:28:44 3088  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_AMEX_CB';
10:28:44 3089  BEGIN
10:28:44 3090  	 OPEN out_result_set FOR
10:28:44 3091  	   SELECT
10:28:44 3092  	     s.id
10:28:44 3093  	   FROM
10:28:44 3094  	     core_owner.transaction t
10:28:44 3095  	   INNER JOIN
10:28:44 3096  	     core_owner.charge c
10:28:44 3097  	   ON
10:28:44 3098  	     c.transaction_id = t.id
10:28:44 3099  	   INNER JOIN
10:28:44 3100  	     core_owner.invoice i
10:28:44 3101  	   ON
10:28:44 3102  	     i.id = c.invoice_id
10:28:44 3103  	   INNER JOIN
10:28:44 3104  	     core_owner.license l
10:28:44 3105  	   ON
10:28:44 3106  	     i.id = l.invoice_id
10:28:44 3107  	   INNER JOIN
10:28:44 3108  	     core_owner.subscription s
10:28:44 3109  	   ON
10:28:44 3110  	     l.subscription_id = s.id
10:28:44 3111  	   INNER JOIN
10:28:44 3112  	     core_owner.account a
10:28:44 3113  	   ON
10:28:44 3114  	     s.account_id = a.id
10:28:44 3115  	   INNER JOIN
10:28:44 3116  	     core_owner.rcn_amex_chargeback ac
10:28:44 3117  	   ON
10:28:44 3118  	     t.order_id = lower(ac.ind_ref_number)
10:28:44 3119  	   WHERE
10:28:44 3120  	     s.subscription_status_id in (GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD);
10:28:44 3121  END GET_ACT_SUBS_W_AMEX_CB;
10:28:44 3122  
10:28:44 3123  END PROCS_SUBSCRIPTION_V24;
10:28:44 3124  .
10:28:44 SQL> /

Package body created.

Elapsed: 00:00:00.51
10:28:45 SQL> 
10:28:45 SQL> prompt Compiling body for procs_invoice.sql
Compiling body for procs_invoice.sql
10:28:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V24" AS
10:28:45   2  
10:28:45   3  PROCEDURE GET_INVOICE_IDS(
10:28:45   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
10:28:45   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
10:28:45   6  	out_result_set OUT SYS_REFCURSOR
10:28:45   7  ) AS
10:28:45   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_INVOICE_IDS';
10:28:45   9  BEGIN
10:28:45  10  	OPEN out_result_set FOR
10:28:45  11  	  SELECT
10:28:45  12  	    Invoice.ID
10:28:45  13  	  FROM
10:28:45  14  	      Invoice
10:28:45  15  	      INNER JOIN License
10:28:45  16  		ON
10:28:45  17  		  License.Invoice_Id = Invoice.Id
10:28:45  18  	      INNER JOIN Subscription
10:28:45  19  		ON
10:28:45  20  		  License.Subscription_Id = Subscription.Id
10:28:45  21  	      INNER JOIN account
10:28:45  22  		ON
10:28:45  23  		  Subscription.Account_Id = account.id
10:28:45  24  	  WHERE
10:28:45  25  	    Account.Group_Id = in_group_id
10:28:45  26  	    AND SUBSCRIPTION.INSTRUMENT_ID = in_fin_id
10:28:45  27  	    AND Invoice.Invoice_Status_Id = GLOBAL_STATUSES_V24.INVOICE_OPEN;
10:28:45  28  END GET_INVOICE_IDS;
10:28:45  29  
10:28:45  30  
10:28:45  31  PROCEDURE IS_INVOICE_FOR_GC (
10:28:45  32  	in_invoice_id IN NUMBER,
10:28:45  33  	out_result    OUT NUMBER
10:28:45  34  ) AS
10:28:45  35  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
10:28:45  36  var_is_for_gc NUMBER;
10:28:45  37  BEGIN
10:28:45  38  	SELECT
10:28:45  39  	  count(1) into var_is_for_gc
10:28:45  40  	FROM GIFT_CERTIFICATE GC
10:28:45  41  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
10:28:45  42  
10:28:45  43  	IF var_is_for_gc > 0 THEN
10:28:45  44  	  out_result := 1;
10:28:45  45  	ELSE
10:28:45  46  	  out_result := 0;
10:28:45  47  	END IF;
10:28:45  48  END IS_INVOICE_FOR_GC;
10:28:45  49  
10:28:45  50  PROCEDURE CREATE_INVOICE(
10:28:45  51  /*
10:28:45  52  Throws exceptions:
10:28:45  53  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45  54  */
10:28:45  55  	  in_invoice_status IN NUMBER,
10:28:45  56  	  in_created_by     IN VARCHAR2,
10:28:45  57  	  in_tax_exempt_id  IN VARCHAR2,
10:28:45  58  	  out_invoice_id    OUT NUMBER
10:28:45  59  ) AS
10:28:45  60  -- VARIABLES
10:28:45  61  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
10:28:45  62  var_new_invoice_id NUMBER;
10:28:45  63  -- EXCEPTIONS
10:28:45  64  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:45  65  BEGIN
10:28:45  66  
10:28:45  67  	PROCS_INVOICE_CRU_V24.CREATE_INVOICE(
10:28:45  68  	  out_invoice_id		 => var_new_invoice_id,
10:28:45  69  	  in_created_by 		 => in_created_by,
10:28:45  70  	  in_invoice_status_id		 => in_invoice_status,
10:28:45  71  	  in_tax_exempt_id		 => in_tax_exempt_id
10:28:45  72  	);
10:28:45  73  
10:28:45  74  	out_invoice_id := var_new_invoice_id;
10:28:45  75  
10:28:45  76  EXCEPTION
10:28:45  77  WHEN OTHERS THEN
10:28:45  78  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45  80  END CREATE_INVOICE;
10:28:45  81  
10:28:45  82  /************************************************************/
10:28:45  83  
10:28:45  84  PROCEDURE GET_PENDING_INVOICES (
10:28:45  85  /*
10:28:45  86  Throws exceptions:
10:28:45  87  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45  88  */
10:28:45  89  	out_result_set	     OUT SYS_REFCURSOR,
10:28:45  90  	in_row_number	     IN NUMBER DEFAULT NULL
10:28:45  91  ) AS
10:28:45  92  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
10:28:45  93  -- COMSTANTS
10:28:45  94  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
10:28:45  95  -- VARIABLES
10:28:45  96  var_row_number NUMBER;
10:28:45  97  BEGIN
10:28:45  98  
10:28:45  99  	IF in_row_number IS NULL THEN
10:28:45 100  	  var_row_number := DEFAULT_ROW_NUMBER;
10:28:45 101  	ELSE
10:28:45 102  	  var_row_number := in_row_number;
10:28:45 103  	END IF;
10:28:45 104  
10:28:45 105  	-- Invoices with one or more payments(charges) with transaction status PENDING
10:28:45 106  	OPEN out_result_set FOR
10:28:45 107  SELECT * FROM
10:28:45 108  (
10:28:45 109  	SELECT
10:28:45 110  	  INVOICE.ID
10:28:45 111  	FROM
10:28:45 112  	  CHARGE
10:28:45 113  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
10:28:45 114  	WHERE
10:28:45 115  	  EXISTS(
10:28:45 116  	    SELECT NULL
10:28:45 117  	    FROM TRANSACTION
10:28:45 118  	    WHERE
10:28:45 119  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V24.TRANSACTION_PENDING
10:28:45 120  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
10:28:45 121  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V24.TRUE
10:28:45 122  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
10:28:45 123  	  )
10:28:45 124  	  AND
10:28:45 125  	  NOT EXISTS(
10:28:45 126  	    SELECT NULL
10:28:45 127  	    FROM PROCESS_RETRY_THROTTLE
10:28:45 128  	    WHERE PROCESS_NAME = SPROC_NAME
10:28:45 129  	      AND GENERIC_ID = INVOICE.ID
10:28:45 130  	  )
10:28:45 131  	  AND ROWNUM <= var_row_number*10
10:28:45 132  	  ORDER BY dbms_random.value
10:28:45 133  ) WHERE
10:28:45 134  	  ROWNUM <= var_row_number;
10:28:45 135  
10:28:45 136  EXCEPTION
10:28:45 137  WHEN OTHERS THEN
10:28:45 138  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 139  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 140  END GET_PENDING_INVOICES;
10:28:45 141  
10:28:45 142  /************************************************************/
10:28:45 143  
10:28:45 144  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
10:28:45 145  	in_invoice_id IN  NUMBER
10:28:45 146  ) RETURN NUMBER AS
10:28:45 147  var_amount NUMBER;
10:28:45 148  BEGIN
10:28:45 149  
10:28:45 150  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
10:28:45 151  	RETURN var_amount;
10:28:45 152  
10:28:45 153  END;
10:28:45 154  
10:28:45 155  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:28:45 156  /*
10:28:45 157  Throws exceptions:
10:28:45 158  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 159  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 160  */
10:28:45 161  	in_invoice_id IN  NUMBER,
10:28:45 162  	out_amount    OUT NUMBER
10:28:45 163  ) AS
10:28:45 164  -- VARIABLES
10:28:45 165  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
10:28:45 166  temp_invoice_id	     NUMBER;
10:28:45 167  var_total_amount	     NUMBER(10,6);
10:28:45 168  var_final_amount	     NUMBER(10,2);
10:28:45 169  var_line_item_amount   NUMBER(10,6);
10:28:45 170  
10:28:45 171  var_line_items_set     SYS_REFCURSOR;
10:28:45 172  var_line_item_id	     NUMBER;
10:28:45 173  var_line_item_quantity NUMBER;
10:28:45 174  var_line_item_price    NUMBER (10,2);
10:28:45 175  
10:28:45 176  var_discount_fixed_amount NUMBER (10,2);
10:28:45 177  var_discount_percent_amount NUMBER (10,2);
10:28:45 178  
10:28:45 179  -- EXCEPTIONS
10:28:45 180  BAD_INVOICE_ID		    EXCEPTION;
10:28:45 181  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
10:28:45 182  EXCEPTION_MESSAGE VARCHAR2(1024);
10:28:45 183  BEGIN
10:28:45 184  
10:28:45 185  	var_total_amount := 0;
10:28:45 186  
10:28:45 187  	-- Check that given invoice exists
10:28:45 188  	BEGIN
10:28:45 189  	  SELECT
10:28:45 190  	    INVOICE.ID into temp_invoice_id
10:28:45 191  	  FROM
10:28:45 192  	    INVOICE
10:28:45 193  	  WHERE
10:28:45 194  	    INVOICE.ID = in_invoice_id
10:28:45 195  	    AND ROWNUM <= 1;
10:28:45 196  	  EXCEPTION
10:28:45 197  	    WHEN NO_DATA_FOUND THEN
10:28:45 198  	      RAISE BAD_INVOICE_ID;
10:28:45 199  	END;
10:28:45 200  
10:28:45 201  	-- Calculate amount for each line item in invoice
10:28:45 202  	FOR f_line_item IN (
10:28:45 203  	  SELECT
10:28:45 204  	    LINE_ITEM.ID
10:28:45 205  	  FROM
10:28:45 206  	    LINE_ITEM
10:28:45 207  	  WHERE
10:28:45 208  	    LINE_ITEM.INVOICE_ID = in_invoice_id
10:28:45 209  	)
10:28:45 210  	LOOP
10:28:45 211  	  BEGIN
10:28:45 212  	    PROCS_LINE_ITEMS_V24.CALCULATE_LINE_ITEM_AMOUNT(
10:28:45 213  	      in_line_item_id => f_line_item.ID,
10:28:45 214  	      out_amount      => var_line_item_amount
10:28:45 215  	    );
10:28:45 216  	    var_total_amount := var_total_amount + var_line_item_amount;
10:28:45 217  	    EXCEPTION
10:28:45 218  	      WHEN OTHERS THEN
10:28:45 219  		EXCEPTION_MESSAGE := SQLERRM;
10:28:45 220  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
10:28:45 221  	  END;
10:28:45 222  	END LOOP;
10:28:45 223  	var_final_amount := var_total_amount;
10:28:45 224  	out_amount := var_final_amount;
10:28:45 225  
10:28:45 226  EXCEPTION
10:28:45 227  WHEN BAD_INVOICE_ID THEN
10:28:45 228  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 229  	  SPROC_NAME, 'No such invoice');
10:28:45 230  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
10:28:45 231  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 232  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
10:28:45 233  WHEN OTHERS THEN
10:28:45 234  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 235  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 236  END;
10:28:45 237  
10:28:45 238  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
10:28:45 239  /*
10:28:45 240  Throws exceptions:
10:28:45 241  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 242  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 243  */
10:28:45 244  	in_invoice_id  IN  NUMBER,
10:28:45 245  	out_account_id OUT NUMBER
10:28:45 246  ) AS
10:28:45 247  -- VARIABLES
10:28:45 248  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
10:28:45 249  temp_gc_account_id NUMBER;
10:28:45 250  temp_ss_account_id NUMBER;
10:28:45 251  temp_invoice_id	 NUMBER;
10:28:45 252  -- EXCEPTIONS
10:28:45 253  BAD_INVOICE_ID	   EXCEPTION;
10:28:45 254  CAN_NOT_FIND_ACCOUNT EXCEPTION;
10:28:45 255  BEGIN
10:28:45 256  
10:28:45 257  	-- Check that given invoice exists
10:28:45 258  	BEGIN
10:28:45 259  	  SELECT
10:28:45 260  	    INVOICE.ID into temp_invoice_id
10:28:45 261  	  FROM
10:28:45 262  	    INVOICE
10:28:45 263  	  WHERE
10:28:45 264  	    INVOICE.ID = in_invoice_id;
10:28:45 265  	  EXCEPTION
10:28:45 266  	    WHEN NO_DATA_FOUND THEN
10:28:45 267  	      RAISE BAD_INVOICE_ID;
10:28:45 268  	END;
10:28:45 269  
10:28:45 270  	-- Try to find gift certificate with given invoice
10:28:45 271  	BEGIN
10:28:45 272  	  SELECT
10:28:45 273  	    ACCOUNT.GROUP_ID into temp_gc_account_id
10:28:45 274  	  FROM
10:28:45 275  	    GIFT_CERTIFICATE
10:28:45 276  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
10:28:45 277  	  WHERE
10:28:45 278  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
10:28:45 279  	    AND ROWNUM <= 1;
10:28:45 280  	  EXCEPTION
10:28:45 281  	    WHEN NO_DATA_FOUND THEN
10:28:45 282  	      temp_gc_account_id := NULL;
10:28:45 283  	END;
10:28:45 284  
10:28:45 285  	-- check subscriptions for given invoice
10:28:45 286  	IF temp_gc_account_id IS NOT NULL THEN
10:28:45 287  	  out_account_id := temp_gc_account_id;
10:28:45 288  	ELSE
10:28:45 289  	  BEGIN
10:28:45 290  	    SELECT
10:28:45 291  	      ACCOUNT.GROUP_ID into temp_ss_account_id
10:28:45 292  	    FROM
10:28:45 293  	      LICENSE
10:28:45 294  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:45 295  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:28:45 296  	    WHERE
10:28:45 297  	      LICENSE.INVOICE_ID = in_invoice_id
10:28:45 298  	      AND ROWNUM <= 1;
10:28:45 299  	    EXCEPTION
10:28:45 300  	      WHEN NO_DATA_FOUND THEN
10:28:45 301  		temp_ss_account_id := NULL;
10:28:45 302  	  END;
10:28:45 303  	  IF temp_ss_account_id IS NULL THEN
10:28:45 304  	    RAISE CAN_NOT_FIND_ACCOUNT;
10:28:45 305  	  ELSE
10:28:45 306  	    out_account_id := temp_ss_account_id;
10:28:45 307  	  END IF;
10:28:45 308  	END IF;
10:28:45 309  
10:28:45 310  EXCEPTION
10:28:45 311  WHEN BAD_INVOICE_ID THEN
10:28:45 312  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 313  	  SPROC_NAME, 'No such invoice');
10:28:45 314  WHEN CAN_NOT_FIND_ACCOUNT THEN
10:28:45 315  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 316  	  SPROC_NAME, 'Could not find account by given invoice id');
10:28:45 317  WHEN OTHERS THEN
10:28:45 318  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 320  END GET_ACCOUNT_BY_INVOICE_ID;
10:28:45 321  
10:28:45 322  /*****************************************************************/
10:28:45 323  
10:28:45 324  PROCEDURE GET_INVOICE_DETAILS (
10:28:45 325  /*
10:28:45 326  Throws exceptions:
10:28:45 327  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 328  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 329  */
10:28:45 330  	in_invoice_id	   IN  NUMBER,
10:28:45 331  	out_group_id	   OUT NUMBER,
10:28:45 332  	out_status_id	   OUT NUMBER,
10:28:45 333  	out_line_items_set OUT SYS_REFCURSOR,
10:28:45 334  	out_pp_charges_set OUT SYS_REFCURSOR,
10:28:45 335  	out_cc_charges_set OUT SYS_REFCURSOR,
10:28:45 336  	out_gc_charges_set OUT SYS_REFCURSOR
10:28:45 337  ) AS
10:28:45 338  -- VARIABLES
10:28:45 339  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
10:28:45 340  
10:28:45 341  -- EXCEPTIONS
10:28:45 342  BAD_INVOICE_ID	     EXCEPTION;
10:28:45 343  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
10:28:45 344  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:45 345  BEGIN
10:28:45 346  
10:28:45 347  	-- get invoice status
10:28:45 348  	BEGIN
10:28:45 349  	  SELECT
10:28:45 350  	    INVOICE.INVOICE_STATUS_ID into out_status_id
10:28:45 351  	  FROM
10:28:45 352  	    INVOICE
10:28:45 353  	  WHERE
10:28:45 354  	    INVOICE.ID = in_invoice_id;
10:28:45 355  	  EXCEPTION
10:28:45 356  	    WHEN NO_DATA_FOUND THEN
10:28:45 357  	      RAISE BAD_INVOICE_ID;
10:28:45 358  	END;
10:28:45 359  
10:28:45 360  	-- get group id
10:28:45 361  	BEGIN
10:28:45 362  	  PROCS_INVOICE_V24.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
10:28:45 363  	  EXCEPTION
10:28:45 364  	    WHEN OTHERS THEN
10:28:45 365  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 366  	      RAISE CAN_NOT_FIND_ACCOUNT;
10:28:45 367  	END;
10:28:45 368  
10:28:45 369  	-- get all line items for given invoice
10:28:45 370  	OPEN out_line_items_set FOR
10:28:45 371  	SELECT
10:28:45 372  	  LINE_ITEM.AMOUNT,
10:28:45 373  	  LINE_ITEM.ID,
10:28:45 374  	  LINE_ITEM.CREATED_BY,
10:28:45 375  	  LINE_ITEM.CREATE_DATE,
10:28:45 376  	  LINE_ITEM.DISCOUNT_AMOUNT,
10:28:45 377  	  LINE_ITEM.TAXES_AMOUNT,
10:28:45 378  	  LINE_ITEM.PRODUCT_OFFER_ID,
10:28:45 379  	  LINE_ITEM.INVOICE_ID
10:28:45 380  	FROM
10:28:45 381  	  LINE_ITEM
10:28:45 382  	WHERE
10:28:45 383  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
10:28:45 384  
10:28:45 385  	-- get all pp charges for given invoice
10:28:45 386  	OPEN out_pp_charges_set FOR
10:28:45 387  	SELECT
10:28:45 388  	  CHARGE.ID as "CHARGE_ID",
10:28:45 389  	  CHARGE_AMOUNT,
10:28:45 390  	  CHARGE.INSTRUMENT_ID,
10:28:45 391  	  CHARGE.CHARGE_STATUS_ID
10:28:45 392  	FROM
10:28:45 393  	  CHARGE
10:28:45 394  	WHERE
10:28:45 395  	  CHARGE.INVOICE_ID = in_invoice_id
10:28:45 396  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL;
10:28:45 397  
10:28:45 398  	-- get all credir cards for given invoice
10:28:45 399  	OPEN out_cc_charges_set FOR
10:28:45 400  	SELECT
10:28:45 401  	  CHARGE.ID as "CHARGE_ID",
10:28:45 402  	  CHARGE.CHARGE_AMOUNT,
10:28:45 403  	  CHARGE.INSTRUMENT_ID,
10:28:45 404  	  CHARGE.CHARGE_STATUS_ID
10:28:45 405  	FROM
10:28:45 406  	  CHARGE
10:28:45 407  	WHERE
10:28:45 408  	  CHARGE.INVOICE_ID = in_invoice_id
10:28:45 409  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD;
10:28:45 410  
10:28:45 411  	OPEN out_gc_charges_set FOR
10:28:45 412  	SELECT
10:28:45 413  	  CHARGE.ID as "CHARGE_ID",
10:28:45 414  	  CHARGE.CHARGE_AMOUNT,
10:28:45 415  	  CHARGE.INSTRUMENT_ID,
10:28:45 416  	  CHARGE.CHARGE_STATUS_ID
10:28:45 417  	FROM
10:28:45 418  	  CHARGE
10:28:45 419  	WHERE
10:28:45 420  	  CHARGE.INVOICE_ID = in_invoice_id
10:28:45 421  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V24.INSTRUMENT_GIFT_CERTIFICATE;
10:28:45 422  
10:28:45 423  EXCEPTION
10:28:45 424  WHEN BAD_INVOICE_ID THEN
10:28:45 425  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 426  	  SPROC_NAME, 'No such invoice');
10:28:45 427  WHEN CAN_NOT_FIND_ACCOUNT THEN
10:28:45 428  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 429  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
10:28:45 430  WHEN OTHERS THEN
10:28:45 431  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 432  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 433  END GET_INVOICE_DETAILS;
10:28:45 434  
10:28:45 435  /******************************************************/
10:28:45 436  -- norlov: #38796
10:28:45 437  PROCEDURE GET_TRANSACTION_INVOICE (
10:28:45 438  /*
10:28:45 439  Throws exceptions:
10:28:45 440  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 441  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 442  */
10:28:45 443  	in_transaction_id  IN  NUMBER,
10:28:45 444  	out_result_set	      OUT SYS_REFCURSOR
10:28:45 445  ) AS
10:28:45 446  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
10:28:45 447  -- VARIABLES
10:28:45 448  temp_transaction_id  NUMBER;
10:28:45 449  var_invoice_id	   NUMBER;
10:28:45 450  var_subscription_id  NUMBER;
10:28:45 451  var_offer_chain_id   NUMBER;
10:28:45 452  var_offer_chain_name VARCHAR2(255);
10:28:45 453  -- EXCEPTIONS
10:28:45 454  BAD_TRANSACTION_ID     EXCEPTION;
10:28:45 455  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:45 456  BEGIN
10:28:45 457   -- check if there is the transaction
10:28:45 458  	BEGIN
10:28:45 459  	  SELECT
10:28:45 460  	    TRANSACTION.ID into temp_transaction_id
10:28:45 461  	  FROM
10:28:45 462  	    TRANSACTION
10:28:45 463  	  WHERE
10:28:45 464  	    TRANSACTION.ID = in_transaction_id;
10:28:45 465  	  EXCEPTION
10:28:45 466  	    WHEN NO_DATA_FOUND THEN
10:28:45 467  	      RAISE BAD_TRANSACTION_ID;
10:28:45 468  	END;
10:28:45 469  
10:28:45 470  	-- Get invoice id
10:28:45 471  	SELECT DISTINCT
10:28:45 472  	  CHARGE.INVOICE_ID into var_invoice_id
10:28:45 473  	FROM
10:28:45 474  	  CHARGE
10:28:45 475  	WHERE
10:28:45 476  	  CHARGE.TRANSACTION_ID = in_transaction_id;
10:28:45 477  
10:28:45 478  	-- Get subscription id if exists
10:28:45 479  	BEGIN
10:28:45 480  	  SELECT DISTINCT
10:28:45 481  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
10:28:45 482  	  FROM
10:28:45 483  	    LICENSE
10:28:45 484  	  WHERE
10:28:45 485  	    LICENSE.INVOICE_ID = var_invoice_id;
10:28:45 486  	  EXCEPTION
10:28:45 487  	    WHEN NO_DATA_FOUND THEN
10:28:45 488  	      var_subscription_id := NULL;
10:28:45 489  	END;
10:28:45 490  
10:28:45 491  	IF var_subscription_id IS NOT NULL THEN
10:28:45 492  	  -- Fetch offer chain from subscription
10:28:45 493  	  SELECT
10:28:45 494  	    OFFER_CHAIN.ID,
10:28:45 495  	    OFFER_CHAIN.NAME
10:28:45 496  	    into
10:28:45 497  	    var_offer_chain_id,
10:28:45 498  	    var_offer_chain_name
10:28:45 499  	  FROM
10:28:45 500  	    OFFER_CHAIN
10:28:45 501  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:45 502  	  WHERE
10:28:45 503  	    SUBSCRIPTION.ID = var_subscription_id;
10:28:45 504  	ELSE
10:28:45 505  	  -- Fetch offer chain from GC
10:28:45 506  	  SELECT
10:28:45 507  	    OFFER_CHAIN.ID,
10:28:45 508  	    OFFER_CHAIN.NAME
10:28:45 509  	    into
10:28:45 510  	    var_offer_chain_id,
10:28:45 511  	    var_offer_chain_name
10:28:45 512  	  FROM
10:28:45 513  	    OFFER_CHAIN
10:28:45 514  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:45 515  	  WHERE
10:28:45 516  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
10:28:45 517  	END IF;
10:28:45 518  
10:28:45 519  	OPEN out_result_set FOR
10:28:45 520  	SELECT DISTINCT
10:28:45 521  	  var_invoice_id       AS "INVOICE_ID",
10:28:45 522  	  var_subscription_id  AS "SUBSCRIPTION_ID",
10:28:45 523  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
10:28:45 524  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
10:28:45 525  	FROM
10:28:45 526  	  DUAL;
10:28:45 527  
10:28:45 528  EXCEPTION
10:28:45 529  WHEN BAD_TRANSACTION_ID THEN
10:28:45 530  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 531  	  SPROC_NAME, 'No such transaction');
10:28:45 532  WHEN OTHERS THEN
10:28:45 533  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 534  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 535  END GET_TRANSACTION_INVOICE;
10:28:45 536  
10:28:45 537  /******************************************************/
10:28:45 538  
10:28:45 539  PROCEDURE UPDATE_INVOICE_STATUS (
10:28:45 540  /*
10:28:45 541  Throws exceptions:
10:28:45 542  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 543  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 544  */
10:28:45 545  	in_invoice_id		       IN NUMBER,
10:28:45 546  	in_invoice_status_id	       IN NUMBER,
10:28:45 547  	in_updated_by		       IN VARCHAR2
10:28:45 548  ) AS
10:28:45 549  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
10:28:45 550  -- VARIABLES
10:28:45 551  temp_invoice_id NUMBER;
10:28:45 552  -- EXCEPTIONS
10:28:45 553  BAD_INVOICE_ID		      EXCEPTION;
10:28:45 554  BAD_INVOICE_STATUS_ID	      EXCEPTION;
10:28:45 555  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
10:28:45 556  BEGIN
10:28:45 557  
10:28:45 558  	-- Check if invoice exists
10:28:45 559  	BEGIN
10:28:45 560  	  SELECT
10:28:45 561  	    INVOICE.ID into temp_invoice_id
10:28:45 562  	  FROM
10:28:45 563  	    INVOICE
10:28:45 564  	  WHERE
10:28:45 565  	    INVOICE.ID = in_invoice_id;
10:28:45 566  	  EXCEPTION
10:28:45 567  	    WHEN NO_DATA_FOUND THEN
10:28:45 568  	      RAISE BAD_INVOICE_ID;
10:28:45 569  	END;
10:28:45 570  
10:28:45 571  	IF in_invoice_status_id != GLOBAL_STATUSES_V24.INVOICE_OPEN
10:28:45 572  	  AND in_invoice_status_id != GLOBAL_STATUSES_V24.INVOICE_CLOSED THEN
10:28:45 573  	  RAISE BAD_INVOICE_STATUS_ID;
10:28:45 574  	END IF;
10:28:45 575  
10:28:45 576  	PROCS_INVOICE_CRU_V24.UPDATE_INVOICE(
10:28:45 577  	  in_invoice_id 		 => in_invoice_id,
10:28:45 578  	  in_invoice_status_id		 => in_invoice_status_id,
10:28:45 579  	  in_updated_by 		 => in_updated_by
10:28:45 580  	);
10:28:45 581  
10:28:45 582  EXCEPTION
10:28:45 583  WHEN BAD_INVOICE_STATUS_ID THEN
10:28:45 584  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 585  	  SPROC_NAME, 'Bad invoice status id');
10:28:45 586  WHEN BAD_INVOICE_ID THEN
10:28:45 587  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 588  	  SPROC_NAME, 'No such invoice');
10:28:45 589  WHEN OTHERS THEN
10:28:45 590  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 591  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 592  END UPDATE_INVOICE_STATUS;
10:28:45 593  
10:28:45 594  /****************************************************************/
10:28:45 595  
10:28:45 596  FUNCTION IS_INVOICE_PAYING_STARTED (
10:28:45 597  /*
10:28:45 598  Throws exceptions:
10:28:45 599  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 600  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 601  */
10:28:45 602  	in_invoice_id IN NUMBER
10:28:45 603  ) RETURN NUMBER AS
10:28:45 604  -- VARIABLES
10:28:45 605  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
10:28:45 606  temp_invoice_id		 NUMBER;
10:28:45 607  var_processed_charges_num  NUMBER;
10:28:45 608  var_processed_transac_num  NUMBER;
10:28:45 609  var_success_attempts_num	 NUMBER;
10:28:45 610  var_is_gc 		 NUMBER;
10:28:45 611  -- EXCEPTIONS
10:28:45 612  BAD_INVOICE_ID EXCEPTION;
10:28:45 613  BEGIN
10:28:45 614  
10:28:45 615  	-- Check that invoice exists
10:28:45 616  	BEGIN
10:28:45 617  	  SELECT
10:28:45 618  	    INVOICE.ID into temp_invoice_id
10:28:45 619  	  FROM
10:28:45 620  	    INVOICE
10:28:45 621  	  WHERE
10:28:45 622  	    INVOICE.ID = in_invoice_id;
10:28:45 623  	  EXCEPTION
10:28:45 624  	   WHEN NO_DATA_FOUND THEN
10:28:45 625  	     RAISE BAD_INVOICE_ID;
10:28:45 626  	END;
10:28:45 627  
10:28:45 628  	-- Check that there are tansaction attempts with status success
10:28:45 629  	SELECT
10:28:45 630  	  COUNT(1) into var_success_attempts_num
10:28:45 631  	FROM
10:28:45 632  	  TRANSACTION_ATTEMPT ta,
10:28:45 633  	  TRANSACTION t,
10:28:45 634  	  CHARGE c
10:28:45 635  	WHERE
10:28:45 636  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS and
10:28:45 637  	  ta.transaction_id = t.id and
10:28:45 638  	  c.transaction_id = t.id and
10:28:45 639  	  t.is_refund = GLOBAL_CONSTANTS_V24.FALSE and
10:28:45 640  	  c.invoice_id = in_invoice_id
10:28:45 641  	;
10:28:45 642  
10:28:45 643  	IF var_success_attempts_num > 0 THEN
10:28:45 644  	  RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 645  	END IF;
10:28:45 646  
10:28:45 647  	SELECT
10:28:45 648  	  COUNT(1) into var_success_attempts_num
10:28:45 649  	FROM
10:28:45 650  	  TRANSACTION t,
10:28:45 651  	  CHARGE c
10:28:45 652  	WHERE
10:28:45 653  	  c.transaction_id = t.id and
10:28:45 654  	  t.is_refund = GLOBAL_CONSTANTS_V24.FALSE and
10:28:45 655  	  t.is_settled = GLOBAL_CONSTANTS_V24.TRUE and
10:28:45 656  	  c.invoice_id = in_invoice_id
10:28:45 657  	;
10:28:45 658  
10:28:45 659  	IF var_success_attempts_num > 0 THEN
10:28:45 660  	  RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 661  	END IF;
10:28:45 662  
10:28:45 663  	SELECT
10:28:45 664  	  COUNT(1) into var_is_gc
10:28:45 665  	FROM
10:28:45 666  	  gift_certificate gc
10:28:45 667  	WHERE
10:28:45 668  	  gc.finalized_invoice_id = in_invoice_id
10:28:45 669  	;
10:28:45 670  
10:28:45 671  	IF var_is_gc > 0 THEN
10:28:45 672  	  RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 673  	END IF;
10:28:45 674  
10:28:45 675  	RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:45 676  
10:28:45 677  EXCEPTION
10:28:45 678  WHEN BAD_INVOICE_ID THEN
10:28:45 679  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 680  	  SPROC_NAME, 'No such invoice');
10:28:45 681  WHEN OTHERS THEN
10:28:45 682  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 683  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 684  END IS_INVOICE_PAYING_STARTED;
10:28:45 685  
10:28:45 686  /******************************************************************************/
10:28:45 687  
10:28:45 688  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
10:28:45 689  	in_invoice_id  IN NUMBER,
10:28:45 690  	out_is_started OUT NUMBER
10:28:45 691  ) AS
10:28:45 692  BEGIN
10:28:45 693  	-- Just a wrapper
10:28:45 694  	out_is_started := PROCS_INVOICE_V24.IS_INVOICE_PAYING_STARTED(in_invoice_id);
10:28:45 695  END P_IS_INVOICE_PAYING_STARTED;
10:28:45 696  
10:28:45 697  /******************************************************************************/
10:28:45 698  
10:28:45 699  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
10:28:45 700  	in_invoice_id	      IN NUMBER,
10:28:45 701  	in_chargeback_date    IN DATE,
10:28:45 702  	out_chargeback_amount OUT NUMBER
10:28:45 703  ) AS
10:28:45 704  -- VARIABLES
10:28:45 705  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
10:28:45 706  var_chargeback_date    DATE;
10:28:45 707  temp_invoice_id	     NUMBER;
10:28:45 708  var_licenses_number    NUMBER;
10:28:45 709  var_invoice_start_date DATE;
10:28:45 710  var_invoice_end_date   DATE;
10:28:45 711  var_offer_id	     NUMBER;
10:28:45 712  var_offer_days_interval NUMBER;
10:28:45 713  var_license_days_used  NUMBER;
10:28:45 714  var_invoice_amount     NUMBER(10,2);
10:28:45 715  var_offer_chain_id     NUMBER;
10:28:45 716  var_offer_chain_meta_data_val VARCHAR2(1024);
10:28:45 717  var_offer_chain_full_refund   NUMBER;
10:28:45 718  var_offer_chain_prorated_ref  NUMBER;
10:28:45 719  var_chargeback_calculated NUMBER;
10:28:45 720  var_max_invoice_refund	NUMBER;
10:28:45 721  -- EXCEPTIONS
10:28:45 722  BAD_INVOICE_ID		  EXCEPTION;
10:28:45 723  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
10:28:45 724  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
10:28:45 725  BEGIN
10:28:45 726  
10:28:45 727  	IF in_chargeback_date IS NULL THEN
10:28:45 728  	  var_chargeback_date := PROCS_COMMON_V24.NORMALIZE_DATE(current_date);
10:28:45 729  	ELSE
10:28:45 730  	  var_chargeback_date := PROCS_COMMON_V24.NORMALIZE_DATE(in_chargeback_date);
10:28:45 731  	END IF;
10:28:45 732  
10:28:45 733  	-- Check that invoice exists
10:28:45 734  	BEGIN
10:28:45 735  	  SELECT
10:28:45 736  	    INVOICE.ID into temp_invoice_id
10:28:45 737  	  FROM
10:28:45 738  	    INVOICE
10:28:45 739  	  WHERE
10:28:45 740  	    INVOICE.ID = in_invoice_id;
10:28:45 741  	  EXCEPTION
10:28:45 742  	    WHEN NO_DATA_FOUND THEN
10:28:45 743  	      RAISE BAD_INVOICE_ID;
10:28:45 744  	END;
10:28:45 745  
10:28:45 746  	-- Check that invoice has at least one license
10:28:45 747  	SELECT
10:28:45 748  	  COUNT(*) into var_licenses_number
10:28:45 749  	FROM
10:28:45 750  	  LICENSE
10:28:45 751  	WHERE
10:28:45 752  	  LICENSE.INVOICE_ID = in_invoice_id;
10:28:45 753  
10:28:45 754  	IF var_licenses_number = 0 THEN
10:28:45 755  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
10:28:45 756  	END IF;
10:28:45 757  
10:28:45 758  	SELECT
10:28:45 759  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
10:28:45 760  	FROM
10:28:45 761  	  LICENSE
10:28:45 762  	WHERE
10:28:45 763  	  LICENSE.INVOICE_ID = in_invoice_id;
10:28:45 764  
10:28:45 765  	var_invoice_start_date := PROCS_COMMON_V24.NORMALIZE_DATE(var_invoice_start_date);
10:28:45 766  
10:28:45 767  	SELECT DISTINCT
10:28:45 768  	  LICENSE.OFFER_ID into var_offer_id
10:28:45 769  	FROM
10:28:45 770  	  LICENSE
10:28:45 771  	WHERE
10:28:45 772  	  LICENSE.INVOICE_ID = in_invoice_id;
10:28:45 773  
10:28:45 774  	SELECT
10:28:45 775  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
10:28:45 776  	FROM
10:28:45 777  	  LICENSE
10:28:45 778  	WHERE
10:28:45 779  	  LICENSE.INVOICE_ID = in_invoice_id;
10:28:45 780  
10:28:45 781  	-- All licenses for given invoice should point into the same offer
10:28:45 782  
10:28:45 783  	PROCS_OFFER_CHAIN_V24.GET_OFFER_LENGTH_IN_DAYS(
10:28:45 784  	  in_offer_id	=> var_offer_id,
10:28:45 785  	  in_start_date => var_invoice_start_date,
10:28:45 786  	  out_days	=> var_offer_days_interval
10:28:45 787  	);
10:28:45 788  
10:28:45 789  	IF var_offer_days_interval = 0 THEN
10:28:45 790  	  RAISE OFFER_LENGTH_IS_ZERO;
10:28:45 791  	END IF;
10:28:45 792  
10:28:45 793  	PROCS_INVOICE_V24.GET_INVOICE_DAYS_USED_NUMBER(
10:28:45 794  	  in_invoice_id      => in_invoice_id,
10:28:45 795  	  in_chargeback_date => var_chargeback_date,
10:28:45 796  	  out_days_num	     => var_license_days_used
10:28:45 797  	);
10:28:45 798  
10:28:45 799  	PROCS_INVOICE_V24.CALCULATE_INVOICE_AMOUNT(
10:28:45 800  	  in_invoice_id => in_invoice_id,
10:28:45 801  	  out_amount	=> var_invoice_amount
10:28:45 802  	);
10:28:45 803  
10:28:45 804  	-- 39437
10:28:45 805  	-- Get offer chain id by invoice id
10:28:45 806  	SELECT DISTINCT
10:28:45 807  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
10:28:45 808  	FROM
10:28:45 809  	  SUBSCRIPTION
10:28:45 810  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:45 811  	WHERE
10:28:45 812  	  LICENSE.INVOICE_ID = in_invoice_id;
10:28:45 813  
10:28:45 814  	-- Get offer chain's meta data full amount value
10:28:45 815  	PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_MD_VALUE(
10:28:45 816  	  in_offer_chain_id => var_offer_chain_id,
10:28:45 817  	  in_meta_data_name => GLOBAL_CONSTANTS_V24.OFFER_CHAIN_FULL_REFUND,
10:28:45 818  	  out_value	    => var_offer_chain_meta_data_val
10:28:45 819  	);
10:28:45 820  	IF var_offer_chain_meta_data_val IS NULL THEN
10:28:45 821  	  var_offer_chain_full_refund := NULL;
10:28:45 822  	ELSE
10:28:45 823  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
10:28:45 824  	END IF;
10:28:45 825  
10:28:45 826  	-- Get offer chain's meta data prorated amount value
10:28:45 827  	PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_MD_VALUE(
10:28:45 828  	  in_offer_chain_id => var_offer_chain_id,
10:28:45 829  	  in_meta_data_name => GLOBAL_CONSTANTS_V24.OFFER_CHAIN_PRORATED_REFUND,
10:28:45 830  	  out_value	    => var_offer_chain_meta_data_val
10:28:45 831  	);
10:28:45 832  	IF var_offer_chain_meta_data_val IS NULL THEN
10:28:45 833  	  var_offer_chain_prorated_ref := NULL;
10:28:45 834  	ELSE
10:28:45 835  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
10:28:45 836  	END IF;
10:28:45 837  
10:28:45 838  	var_chargeback_calculated := GLOBAL_CONSTANTS_V24.FALSE;
10:28:45 839  
10:28:45 840  	IF var_offer_chain_full_refund IS NOT NULL
10:28:45 841  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 842  	  IF var_license_days_used < var_offer_chain_full_refund THEN
10:28:45 843  	    out_chargeback_amount := var_invoice_amount;
10:28:45 844  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 845  	  END IF;
10:28:45 846  	END IF;
10:28:45 847  
10:28:45 848  	IF var_offer_chain_prorated_ref IS NOT NULL
10:28:45 849  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 850  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
10:28:45 851  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
10:28:45 852  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 853  	  END IF;
10:28:45 854  	END IF;
10:28:45 855  
10:28:45 856  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V24.TRUE THEN
10:28:45 857  	  PROCS_INVOICE_V24.GET_MAX_REFUND(
10:28:45 858  	    in_invoice_id => in_invoice_id,
10:28:45 859  	    out_amount	  => var_max_invoice_refund
10:28:45 860  	  );
10:28:45 861  	  IF var_max_invoice_refund < out_chargeback_amount THEN
10:28:45 862  	    out_chargeback_amount := var_max_invoice_refund;
10:28:45 863  	  END IF;
10:28:45 864  	END IF;
10:28:45 865  
10:28:45 866  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 867  	  out_chargeback_amount := 0;
10:28:45 868  	END IF;
10:28:45 869  
10:28:45 870  EXCEPTION
10:28:45 871  WHEN BAD_INVOICE_ID THEN
10:28:45 872  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 873  	  SPROC_NAME, 'No such invoice');
10:28:45 874  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
10:28:45 875  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 876  	  SPROC_NAME, 'No licenses found');
10:28:45 877  WHEN OFFER_LENGTH_IS_ZERO THEN
10:28:45 878  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 879  	  SPROC_NAME, 'Offer length is zero');
10:28:45 880  WHEN OTHERS THEN
10:28:45 881  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 883  END CALCULATE_INVOICE_CHARGEBACK;
10:28:45 884  
10:28:45 885  /********************************************************************/
10:28:45 886  
10:28:45 887  PROCEDURE APPLY_REFUND (
10:28:45 888  	in_invoice_id	     IN NUMBER,
10:28:45 889  	in_chargeback_amount IN NUMBER,
10:28:45 890  	in_created_by	     IN VARCHAR2,
10:28:45 891  	out_charge_id	     OUT NUMBER
10:28:45 892  ) AS
10:28:45 893  -- VARIABLES
10:28:45 894  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
10:28:45 895  temp_invoice_id		 NUMBER;
10:28:45 896  var_total_charges_amount	 NUMBER(10,2);
10:28:45 897  var_charge_amount_to_apply NUMBER(10,2);
10:28:45 898  var_transaction_id	 NUMBER;
10:28:45 899  var_instrument_type_id	 NUMBER;
10:28:45 900  var_instrument_id 	 NUMBER;
10:28:45 901  var_charge_id		 NUMBER;
10:28:45 902  -- EXCEPTIONS
10:28:45 903  BAD_INVOICE_ID		 EXCEPTION;
10:28:45 904  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
10:28:45 905  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
10:28:45 906  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
10:28:45 907  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:28:45 908  BEGIN
10:28:45 909  
10:28:45 910  	BEGIN
10:28:45 911  	  SELECT
10:28:45 912  	    INVOICE.ID into temp_invoice_id
10:28:45 913  	  FROM
10:28:45 914  	    INVOICE
10:28:45 915  	  WHERE
10:28:45 916  	    INVOICE.ID = in_invoice_id;
10:28:45 917  	  EXCEPTION
10:28:45 918  	    WHEN NO_DATA_FOUND THEN
10:28:45 919  	      RAISE BAD_INVOICE_ID;
10:28:45 920  	END;
10:28:45 921  
10:28:45 922  	SELECT
10:28:45 923  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
10:28:45 924  	FROM
10:28:45 925  	  CHARGE
10:28:45 926  	WHERE
10:28:45 927  	  CHARGE.INVOICE_ID = in_invoice_id
10:28:45 928  	  AND CHARGE.CHARGE_STATUS_ID IN (GLOBAL_STATUSES_V24.CHARGE_PROCESSED, GLOBAL_STATUSES_V24.CHARGE_CAPTURED,
10:28:45 929  	      GLOBAL_STATUSES_V24.CHARGE_SETTLED,GLOBAL_STATUSES_V24.CHARGE_CHARGEBACK_CLAIM, GLOBAL_STATUSES_V24.CHARGEBACK_SETTLED)
10:28:45 930  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V24.INSTRUMENT_GIFT_CERTIFICATE;
10:28:45 931  
10:28:45 932  	-- FIXME: Maybe whe should throw exception here?
10:28:45 933  	IF var_total_charges_amount < in_chargeback_amount THEN
10:28:45 934  	  var_charge_amount_to_apply := var_total_charges_amount;
10:28:45 935  	ELSE
10:28:45 936  	  var_charge_amount_to_apply := in_chargeback_amount;
10:28:45 937  	END IF;
10:28:45 938  
10:28:45 939  	BEGIN
10:28:45 940  	  PROCS_TRANSACTION_V24.CREATE_TRANSACTION(
10:28:45 941  	    in_transaction_id	      => NULL,
10:28:45 942  	    in_status_id	      => GLOBAL_STATUSES_V24.TRANSACTION_PREPARE,
10:28:45 943  	    in_amount		      => -var_charge_amount_to_apply,
10:28:45 944  	    in_created_by	      => in_created_by,
10:28:45 945  	    in_order_id 	      => NULL,
10:28:45 946  	    in_is_refund	      => GLOBAL_CONSTANTS_V24.TRUE,
10:28:45 947  	    in_transaction_type_code  => 'REFUND',
10:28:45 948  	    out_transaction_id	      => var_transaction_id
10:28:45 949  	  );
10:28:45 950  	  EXCEPTION
10:28:45 951  	    WHEN OTHERS THEN
10:28:45 952  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 953  	      RAISE CAN_NOT_CREATE_TRANSACTION;
10:28:45 954  	END;
10:28:45 955  
10:28:45 956  	BEGIN
10:28:45 957  	  SELECT
10:28:45 958  	    C.INSTRUMENT_TYPE_ID,
10:28:45 959  	    C.INSTRUMENT_ID
10:28:45 960  	    into
10:28:45 961  	    var_instrument_type_id,
10:28:45 962  	    var_instrument_id
10:28:45 963  	  FROM
10:28:45 964  	    CHARGE C,
10:28:45 965  	    TRANSACTION_ATTEMPT TA,
10:28:45 966  	    TRANSACTION T
10:28:45 967  	  WHERE
10:28:45 968  	    C.INVOICE_ID = in_invoice_id and
10:28:45 969  	    C.TRANSACTION_ID = T.ID and
10:28:45 970  	    TA.TRANSACTION_ID = T.ID and
10:28:45 971  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS and
10:28:45 972  	    T.IS_REFUND = GLOBAL_CONSTANTS_V24.FALSE and
10:28:45 973  	    T.TRANSACTION_AMOUNT >= 0 and
10:28:45 974  	    rownum < 2;
10:28:45 975  	EXCEPTION
10:28:45 976  	    WHEN NO_DATA_FOUND THEN
10:28:45 977  	      RAISE CAN_NOT_FIND_INSTRUMENT;
10:28:45 978  	END;
10:28:45 979  	BEGIN
10:28:45 980  	  PROCS_CHARGE_V24.CREATE_CHARGE(
10:28:45 981  	    in_invoice_id	  => in_invoice_id,
10:28:45 982  	    in_transaction_id	  => var_transaction_id,
10:28:45 983  	    in_instrument_type_id => var_instrument_type_id,
10:28:45 984  	    in_instrument_id	  => var_instrument_id,
10:28:45 985  	    in_charge_amount	  => -var_charge_amount_to_apply,
10:28:45 986  	    in_created_by	  => in_created_by,
10:28:45 987  	    in_charge_status_id   => GLOBAL_STATUSES_V24.CHARGE_OPENED,
10:28:45 988  	    out_charge_id	  => var_charge_id
10:28:45 989  	  );
10:28:45 990  	  EXCEPTION
10:28:45 991  	    WHEN OTHERS THEN
10:28:45 992  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 993  	      RAISE CAN_NOT_CREATE_CHARGE;
10:28:45 994  	END;
10:28:45 995  
10:28:45 996  	out_charge_id := var_charge_id;
10:28:45 997  
10:28:45 998  EXCEPTION
10:28:45 999  WHEN BAD_INVOICE_ID THEN
10:28:45 1000  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1001  	   SPROC_NAME, 'No such invoice');
10:28:45 1002  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:28:45 1003  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1004  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:28:45 1005  WHEN CAN_NOT_FIND_INSTRUMENT THEN
10:28:45 1006  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1007  	   SPROC_NAME, 'Could not find financial instrument');
10:28:45 1008  WHEN CAN_NOT_CREATE_CHARGE THEN
10:28:45 1009  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1010  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:28:45 1011  WHEN OTHERS THEN
10:28:45 1012  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1013  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1014  END APPLY_REFUND;
10:28:45 1015  
10:28:45 1016  /******************************************************************************/
10:28:45 1017  
10:28:45 1018  PROCEDURE GET_MAX_REFUND (
10:28:45 1019  	 in_invoice_id IN NUMBER,
10:28:45 1020  	 out_amount    OUT NUMBER
10:28:45 1021  ) AS
10:28:45 1022  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
10:28:45 1023  -- VARIABLES
10:28:45 1024  temp_invoice_id	       NUMBER;
10:28:45 1025  var_invoice_refunds_sum NUMBER(10,2);
10:28:45 1026  var_invoice_charges_sum NUMBER(10,2);
10:28:45 1027  -- EXCEPTIONS
10:28:45 1028  BAD_INVOICE_ID EXCEPTION;
10:28:45 1029  BEGIN
10:28:45 1030  
10:28:45 1031  	 BEGIN
10:28:45 1032  	   SELECT
10:28:45 1033  	     INVOICE.ID into temp_invoice_id
10:28:45 1034  	   FROM
10:28:45 1035  	     INVOICE
10:28:45 1036  	   WHERE
10:28:45 1037  	     INVOICE.ID = in_invoice_id;
10:28:45 1038  	   EXCEPTION
10:28:45 1039  	     WHEN NO_DATA_FOUND THEN
10:28:45 1040  	       RAISE BAD_INVOICE_ID;
10:28:45 1041  	 END;
10:28:45 1042  
10:28:45 1043  	 var_invoice_refunds_sum := 0;
10:28:45 1044  	 var_invoice_charges_sum := 0;
10:28:45 1045  
10:28:45 1046  	 FOR f_charge IN (
10:28:45 1047  	   SELECT
10:28:45 1048  	     CHARGE.ID,
10:28:45 1049  	     CHARGE.CHARGE_STATUS_ID,
10:28:45 1050  	     CHARGE.CHARGE_AMOUNT,
10:28:45 1051  	     CHARGE.TRANSACTION_ID
10:28:45 1052  	   FROM
10:28:45 1053  	     CHARGE
10:28:45 1054  	   WHERE
10:28:45 1055  	     CHARGE.INVOICE_ID = in_invoice_id
10:28:45 1056  	 )
10:28:45 1057  	 LOOP
10:28:45 1058  	   -- If charge.status = canceled then continue
10:28:45 1059  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V24.CHARGE_CANCELED THEN
10:28:45 1060  
10:28:45 1061  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
10:28:45 1062  	       IF f_charge.CHARGE_STATUS_ID IN	(GLOBAL_STATUSES_V24.CHARGE_PROCESSED, GLOBAL_STATUSES_V24.CHARGE_CAPTURED,
10:28:45 1063  	       GLOBAL_STATUSES_V24.CHARGE_SETTLED,GLOBAL_STATUSES_V24.CHARGE_CHARGEBACK_CLAIM, GLOBAL_STATUSES_V24.CHARGEBACK_SETTLED)
10:28:45 1064  		  AND PROCS_TRANSACTION_V24.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V24.TRUE THEN
10:28:45 1065  		 -- Transaction collected
10:28:45 1066  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
10:28:45 1067  	       ELSE
10:28:45 1068  		 -- Transaction is not collected. Do nothing
10:28:45 1069  		 NULL;
10:28:45 1070  	       END IF;
10:28:45 1071  	     ELSE
10:28:45 1072  	       IF f_charge.CHARGE_STATUS_ID IN (GLOBAL_STATUSES_V24.CHARGE_PROCESSED, GLOBAL_STATUSES_V24.CHARGE_CAPTURED,
10:28:45 1073  	       GLOBAL_STATUSES_V24.CHARGE_SETTLED,GLOBAL_STATUSES_V24.CHARGE_CHARGEBACK_CLAIM, GLOBAL_STATUSES_V24.CHARGEBACK_SETTLED)
10:28:45 1074  		  AND PROCS_TRANSACTION_V24.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 1075  		 -- If charge is processed transaction is not collected then do nothing
10:28:45 1076  		 NULL;
10:28:45 1077  	       ELSE
10:28:45 1078  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
10:28:45 1079  	       END IF;
10:28:45 1080  	     END IF;
10:28:45 1081  
10:28:45 1082  	   END IF;
10:28:45 1083  	 END LOOP;
10:28:45 1084  
10:28:45 1085  	 -- Refunds are negative
10:28:45 1086  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
10:28:45 1087  
10:28:45 1088  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
10:28:45 1089  
10:28:45 1090  EXCEPTION
10:28:45 1091  WHEN BAD_INVOICE_ID THEN
10:28:45 1092  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1093  	   SPROC_NAME, 'No such invoice');
10:28:45 1094  WHEN OTHERS THEN
10:28:45 1095  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1096  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1097  END GET_MAX_REFUND;
10:28:45 1098  
10:28:45 1099  /******************************************************************************/
10:28:45 1100  
10:28:45 1101  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
10:28:45 1102  	 in_invoice_id	     IN NUMBER,
10:28:45 1103  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
10:28:45 1104  	 out_days_num	     OUT NUMBER
10:28:45 1105  ) AS
10:28:45 1106  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
10:28:45 1107  -- VARIABLES
10:28:45 1108  temp_invoice_id	      NUMBER;
10:28:45 1109  var_license_start_date DATE;
10:28:45 1110  var_license_end_date   DATE;
10:28:45 1111  var_chargeback_date    DATE;
10:28:45 1112  var_invoice_days_used  NUMBER;
10:28:45 1113  -- EXCEPTIONS
10:28:45 1114  BAD_INVOICE_ID EXCEPTION;
10:28:45 1115  BEGIN
10:28:45 1116  
10:28:45 1117  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
10:28:45 1118  
10:28:45 1119  	 BEGIN
10:28:45 1120  	   SELECT
10:28:45 1121  	     INVOICE.ID into temp_invoice_id
10:28:45 1122  	   FROM
10:28:45 1123  	     INVOICE
10:28:45 1124  	   WHERE
10:28:45 1125  	     INVOICE.ID = in_invoice_id;
10:28:45 1126  	   EXCEPTION
10:28:45 1127  	     WHEN NO_DATA_FOUND THEN
10:28:45 1128  	       RAISE BAD_INVOICE_ID;
10:28:45 1129  	 END;
10:28:45 1130  
10:28:45 1131  	 var_invoice_days_used := 0;
10:28:45 1132  
10:28:45 1133  	 FOR f_license IN (
10:28:45 1134  	   SELECT
10:28:45 1135  	     LICENSE.START_DATE,
10:28:45 1136  	     LICENSE.END_DATE
10:28:45 1137  	   FROM
10:28:45 1138  	     LICENSE
10:28:45 1139  	   WHERE
10:28:45 1140  	     LICENSE.INVOICE_ID = in_invoice_id
10:28:45 1141  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V24.FALSE
10:28:45 1142  	 )
10:28:45 1143  	 LOOP
10:28:45 1144  	   var_license_start_date := PROCS_COMMON_V24.NORMALIZE_DATE(f_license.START_DATE);
10:28:45 1145  	   var_license_end_date := PROCS_COMMON_V24.NORMALIZE_DATE(f_license.END_DATE);
10:28:45 1146  
10:28:45 1147  	   IF var_license_start_date <= var_chargeback_date THEN
10:28:45 1148  	     IF var_license_end_date <= var_chargeback_date THEN
10:28:45 1149  	       -- License is passed
10:28:45 1150  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
10:28:45 1151  	     ELSE
10:28:45 1152  	       -- This is current license
10:28:45 1153  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
10:28:45 1154  	     END IF;
10:28:45 1155  	   ELSE
10:28:45 1156  	     -- if var_license_start_date > in_chargeback_date then do nothing
10:28:45 1157  	     NULL;
10:28:45 1158  	   END IF;
10:28:45 1159  	 END LOOP;
10:28:45 1160  
10:28:45 1161  	 out_days_num := var_invoice_days_used;
10:28:45 1162  
10:28:45 1163  EXCEPTION
10:28:45 1164  WHEN BAD_INVOICE_ID THEN
10:28:45 1165  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1166  	   SPROC_NAME, 'No such invoice');
10:28:45 1167  WHEN OTHERS THEN
10:28:45 1168  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1169  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1170  END GET_INVOICE_DAYS_USED_NUMBER;
10:28:45 1171  
10:28:45 1172  /******************************************************************************/
10:28:45 1173  
10:28:45 1174  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:28:45 1175  	 in_invoice_id	IN NUMBER,
10:28:45 1176  	 out_result_set OUT SYS_REFCURSOR
10:28:45 1177  ) AS
10:28:45 1178  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
10:28:45 1179  -- VARIABLES
10:28:45 1180  temp_invoice_id NUMBER;
10:28:45 1181  -- EXCEPTIONS
10:28:45 1182  BAD_INVOICE_ID EXCEPTION;
10:28:45 1183  BEGIN
10:28:45 1184  
10:28:45 1185  	 BEGIN
10:28:45 1186  	   SELECT
10:28:45 1187  	     INVOICE.ID into temp_invoice_id
10:28:45 1188  	   FROM
10:28:45 1189  	     INVOICE
10:28:45 1190  	   WHERE
10:28:45 1191  	     INVOICE.ID = in_invoice_id;
10:28:45 1192  	   EXCEPTION
10:28:45 1193  	     WHEN NO_DATA_FOUND THEN
10:28:45 1194  	       RAISE BAD_INVOICE_ID;
10:28:45 1195  	 END;
10:28:45 1196  
10:28:45 1197  	 OPEN out_result_set FOR
10:28:45 1198  	 SELECT
10:28:45 1199  	   LINE_ITEM.ID,
10:28:45 1200  	   LINE_ITEM.PRODUCT_OFFER_ID,
10:28:45 1201  	   LINE_ITEM.INVOICE_ID,
10:28:45 1202  	   LINE_ITEM.AMOUNT,
10:28:45 1203  	   LINE_ITEM.DISCOUNT_AMOUNT,
10:28:45 1204  	   LINE_ITEM.TAXES_AMOUNT,
10:28:45 1205  	   LINE_ITEM.CREATE_DATE,
10:28:45 1206  	   LINE_ITEM.CREATED_BY
10:28:45 1207  	 FROM
10:28:45 1208  	   LINE_ITEM
10:28:45 1209  	 WHERE
10:28:45 1210  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
10:28:45 1211  
10:28:45 1212  EXCEPTION
10:28:45 1213  WHEN BAD_INVOICE_ID THEN
10:28:45 1214  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1215  	   SPROC_NAME, 'No such invoice');
10:28:45 1216  WHEN OTHERS THEN
10:28:45 1217  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1218  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1219  END GET_INVOICE_LINE_ITEMS;
10:28:45 1220  
10:28:45 1221  /******************************************************************************/
10:28:45 1222  
10:28:45 1223  PROCEDURE GET_INVOICE_LICENSES (
10:28:45 1224  	 in_invoice_id	IN NUMBER,
10:28:45 1225  	 out_result_set OUT SYS_REFCURSOR
10:28:45 1226  ) AS
10:28:45 1227  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
10:28:45 1228  -- VARIABLES
10:28:45 1229  temp_invoice_id NUMBER;
10:28:45 1230  -- EXCEPTIONS
10:28:45 1231  BAD_INVOICE_ID EXCEPTION;
10:28:45 1232  BEGIN
10:28:45 1233  
10:28:45 1234  	 BEGIN
10:28:45 1235  	   SELECT
10:28:45 1236  	     INVOICE.ID into temp_invoice_id
10:28:45 1237  	   FROM
10:28:45 1238  	     INVOICE
10:28:45 1239  	   WHERE
10:28:45 1240  	     INVOICE.ID = in_invoice_id;
10:28:45 1241  	   EXCEPTION
10:28:45 1242  	     WHEN NO_DATA_FOUND THEN
10:28:45 1243  	       RAISE BAD_INVOICE_ID;
10:28:45 1244  	 END;
10:28:45 1245  
10:28:45 1246  	 OPEN out_result_set FOR
10:28:45 1247  	 SELECT
10:28:45 1248  	   LICENSE.ID,
10:28:45 1249  	   LICENSE.INVOICE_ID,
10:28:45 1250  	   LICENSE.CREATE_DATE,
10:28:45 1251  	   LICENSE.CREATED_BY,
10:28:45 1252  	   LICENSE.CURRENT_OFFER_INDEX,
10:28:45 1253  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
10:28:45 1254  	   LICENSE.END_DATE,
10:28:45 1255  	   LICENSE.ENTITLEMENT_END_DATE,
10:28:45 1256  	   LICENSE.IS_EXTENSION,
10:28:45 1257  	   LICENSE.LICENSE_STATUS_ID,
10:28:45 1258  	   LICENSE.NEEDS_ENTITLEMENTS,
10:28:45 1259  	   LICENSE.OFFER_ID,
10:28:45 1260  	   LICENSE.START_DATE,
10:28:45 1261  	   LICENSE.SUBSCRIPTION_ID,
10:28:45 1262  	   LICENSE.UPDATE_DATE,
10:28:45 1263  	   LICENSE.UPDATED_BY
10:28:45 1264  	 FROM
10:28:45 1265  	   LICENSE
10:28:45 1266  	 WHERE
10:28:45 1267  	   LICENSE.INVOICE_ID = in_invoice_id;
10:28:45 1268  
10:28:45 1269  EXCEPTION
10:28:45 1270  WHEN BAD_INVOICE_ID THEN
10:28:45 1271  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1272  	   SPROC_NAME, 'No such invoice');
10:28:45 1273  WHEN OTHERS THEN
10:28:45 1274  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1275  	   SPROC_NAME, 'Unknown error');
10:28:45 1276  END GET_INVOICE_LICENSES;
10:28:45 1277  
10:28:45 1278  /******************************************************************************/
10:28:45 1279  
10:28:45 1280  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
10:28:45 1281  	 in_invoice_id	    IN NUMBER,
10:28:45 1282  	 out_offer_chain_id OUT NUMBER
10:28:45 1283  ) AS
10:28:45 1284  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
10:28:45 1285  -- VARIABLES
10:28:45 1286  temp_invoice_id NUMBER;
10:28:45 1287  -- EXCEPTIONS
10:28:45 1288  BAD_INVOICE_ID EXCEPTION;
10:28:45 1289  BEGIN
10:28:45 1290  
10:28:45 1291  	 BEGIN
10:28:45 1292  	   SELECT
10:28:45 1293  	     INVOICE.ID into temp_invoice_id
10:28:45 1294  	   FROM
10:28:45 1295  	     INVOICE
10:28:45 1296  	   WHERE
10:28:45 1297  	     INVOICE.ID = in_invoice_id;
10:28:45 1298  	   EXCEPTION
10:28:45 1299  	     WHEN NO_DATA_FOUND THEN
10:28:45 1300  	       RAISE BAD_INVOICE_ID;
10:28:45 1301  	 END;
10:28:45 1302  
10:28:45 1303  	 BEGIN
10:28:45 1304  	   SELECT DISTINCT
10:28:45 1305  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
10:28:45 1306  	   FROM
10:28:45 1307  	     LICENSE
10:28:45 1308  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:45 1309  	   WHERE
10:28:45 1310  	     LICENSE.INVOICE_ID = in_invoice_id;
10:28:45 1311  	   EXCEPTION
10:28:45 1312  	     WHEN NO_DATA_FOUND THEN
10:28:45 1313  	       out_offer_chain_id := NULL;
10:28:45 1314  	 END;
10:28:45 1315  
10:28:45 1316  EXCEPTION
10:28:45 1317  WHEN BAD_INVOICE_ID THEN
10:28:45 1318  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1319  	   SPROC_NAME, 'No such invoice');
10:28:45 1320  WHEN OTHERS THEN
10:28:45 1321  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1322  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1323  END GET_OFFER_CH_ID_BY_INVOICE_ID;
10:28:45 1324  
10:28:45 1325  /******************************************************************************/
10:28:45 1326  
10:28:45 1327  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
10:28:45 1328  -- Closing invoice without refund
10:28:45 1329  	 in_invoice_id IN NUMBER,
10:28:45 1330  	 in_updated_by IN VARCHAR2
10:28:45 1331  ) AS
10:28:45 1332  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
10:28:45 1333  -- VARIABLES
10:28:45 1334  temp_invoice_id NUMBER;
10:28:45 1335  -- EXCEPTIONS
10:28:45 1336  BAD_INVOICE_ID EXCEPTION;
10:28:45 1337  BEGIN
10:28:45 1338  
10:28:45 1339  	 BEGIN
10:28:45 1340  	   SELECT
10:28:45 1341  	     INVOICE.ID into temp_invoice_id
10:28:45 1342  	   FROM
10:28:45 1343  	     INVOICE
10:28:45 1344  	   WHERE
10:28:45 1345  	     INVOICE.ID = in_invoice_id;
10:28:45 1346  	   EXCEPTION
10:28:45 1347  	     WHEN NO_DATA_FOUND THEN
10:28:45 1348  	       RAISE BAD_INVOICE_ID;
10:28:45 1349  	 END;
10:28:45 1350  
10:28:45 1351  	 -- Needs to close charges. No refund.
10:28:45 1352  	 FOR f_charge_to_close IN (
10:28:45 1353  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
10:28:45 1354  	 )
10:28:45 1355  	 LOOP
10:28:45 1356  	   PROCS_CHARGE_V24.UPDATE_CHARGE_STATUS(
10:28:45 1357  	     in_charge_id	 => f_charge_to_close.ID,
10:28:45 1358  	     in_updated_by	 => in_updated_by,
10:28:45 1359  	     in_charge_status_id => GLOBAL_STATUSES_V24.CHARGE_CANCELED
10:28:45 1360  	   );
10:28:45 1361  	 END LOOP;
10:28:45 1362  
10:28:45 1363  	 --FOR f_license_to_cancel IN (
10:28:45 1364  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V24.LICENSE_ACTIVE
10:28:45 1365  	 --)
10:28:45 1366  	 --LOOP
10:28:45 1367  	 --  PROCS_LICENSE_CRU_V24.UPDATE_LICENSE(
10:28:45 1368  	 --    in_license_id	     => f_license_to_cancel.ID,
10:28:45 1369  	 --    in_license_status_id  => GLOBAL_STATUSES_V24.LICENSE_CLOSED,
10:28:45 1370  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V24.FALSE,
10:28:45 1371  	 --    in_updated_by	     => in_updated_by
10:28:45 1372  	 --  );
10:28:45 1373  	 --END LOOP;
10:28:45 1374  
10:28:45 1375  	 PROCS_INVOICE_V24.UPDATE_INVOICE_STATUS(
10:28:45 1376  	   in_invoice_id		  => in_invoice_id,
10:28:45 1377  	   in_updated_by		  => in_updated_by,
10:28:45 1378  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V24.INVOICE_CLOSED
10:28:45 1379  	 );
10:28:45 1380  
10:28:45 1381  	 FOR f_transaction_to_close IN (
10:28:45 1382  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
10:28:45 1383  	 )
10:28:45 1384  	 LOOP
10:28:45 1385  	   PROCS_TRANSACTION_V24.UPDATE_TRANSACTION_STATUS(
10:28:45 1386  	     in_transaction_id	      => f_transaction_to_close.ID,
10:28:45 1387  	     in_updated_by	      => in_updated_by,
10:28:45 1388  	     in_transaction_status_id => GLOBAL_STATUSES_V24.TRANSACTION_CLOSED
10:28:45 1389  	   );
10:28:45 1390  	 END LOOP;
10:28:45 1391  
10:28:45 1392  EXCEPTION
10:28:45 1393  WHEN BAD_INVOICE_ID THEN
10:28:45 1394  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1395  	   SPROC_NAME, 'No such invoice');
10:28:45 1396  WHEN OTHERS THEN
10:28:45 1397  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1398  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1399  END CLOSE_INVOICE_AS_NOT_COLLECTED;
10:28:45 1400  
10:28:45 1401  /******************************************************************************/
10:28:45 1402  
10:28:45 1403  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
10:28:45 1404  	 in_invoice_id	     IN NUMBER,
10:28:45 1405  	 out_subscription_id OUT NUMBER
10:28:45 1406  ) AS
10:28:45 1407  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
10:28:45 1408  -- VARIABLES
10:28:45 1409  temp_invoice_id NUMBER;
10:28:45 1410  -- EXCEPTIONS
10:28:45 1411  BAD_INVOICE_ID		 EXCEPTION;
10:28:45 1412  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
10:28:45 1413  BEGIN
10:28:45 1414  
10:28:45 1415  	 BEGIN
10:28:45 1416  	   SELECT
10:28:45 1417  	     INVOICE.ID into temp_invoice_id
10:28:45 1418  	   FROM
10:28:45 1419  	     INVOICE
10:28:45 1420  	   WHERE
10:28:45 1421  	     INVOICE.ID = in_invoice_id;
10:28:45 1422  	   EXCEPTION
10:28:45 1423  	     WHEN NO_DATA_FOUND THEN
10:28:45 1424  	       RAISE BAD_INVOICE_ID;
10:28:45 1425  	 END;
10:28:45 1426  
10:28:45 1427  	 BEGIN
10:28:45 1428  	   SELECT DISTINCT
10:28:45 1429  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
10:28:45 1430  	   FROM
10:28:45 1431  	     LICENSE
10:28:45 1432  	   WHERE
10:28:45 1433  	     LICENSE.INVOICE_ID = in_invoice_id;
10:28:45 1434  	   EXCEPTION
10:28:45 1435  	     WHEN NO_DATA_FOUND THEN
10:28:45 1436  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
10:28:45 1437  	 END;
10:28:45 1438  
10:28:45 1439  EXCEPTION
10:28:45 1440  WHEN BAD_INVOICE_ID THEN
10:28:45 1441  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1442  	   SPROC_NAME, 'No such invoice');
10:28:45 1443  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
10:28:45 1444  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1445  	   SPROC_NAME, 'Could not find subscription for given invoice');
10:28:45 1446  WHEN OTHERS THEN
10:28:45 1447  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1448  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1449  END GET_SUBSCR_ID_BY_INVOICE_ID;
10:28:45 1450  
10:28:45 1451  /******************************************************************************/
10:28:45 1452  
10:28:45 1453  PROCEDURE IS_INVOICE_TAX_EXEMPT (
10:28:45 1454  /*
10:28:45 1455  Throws exceptions:
10:28:45 1456  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1457  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 1458  Return:
10:28:45 1459  	 GLOBAL_CONSTANTS_V24.TRUE if ACCOUNT.EXEMPT_ID is not null
10:28:45 1460  	 GLOBAL_CONSTANTS_V24.FALSE else
10:28:45 1461  */
10:28:45 1462  	 in_invoice_id	   IN NUMBER,
10:28:45 1463  	 out_is_tax_exempt OUT NUMBER
10:28:45 1464  ) AS
10:28:45 1465  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
10:28:45 1466  -- VARIABLES
10:28:45 1467  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
10:28:45 1468  -- EXCEPTIONS
10:28:45 1469  BAD_INVOICE_ID EXCEPTION;
10:28:45 1470  BEGIN
10:28:45 1471  
10:28:45 1472  	 BEGIN
10:28:45 1473  	   SELECT
10:28:45 1474  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
10:28:45 1475  	   FROM
10:28:45 1476  	     INVOICE
10:28:45 1477  	   WHERE
10:28:45 1478  	     INVOICE.ID = in_invoice_id;
10:28:45 1479  	   EXCEPTION
10:28:45 1480  	     WHEN NO_DATA_FOUND THEN
10:28:45 1481  	       RAISE BAD_INVOICE_ID;
10:28:45 1482  	 END;
10:28:45 1483  
10:28:45 1484  	 IF var_is_tax_exempt IS NULL THEN
10:28:45 1485  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V24.FALSE;
10:28:45 1486  	 ELSE
10:28:45 1487  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 1488  	 END IF;
10:28:45 1489  
10:28:45 1490  EXCEPTION
10:28:45 1491  WHEN BAD_INVOICE_ID THEN
10:28:45 1492  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1493  	   SPROC_NAME, 'No such invoice');
10:28:45 1494  WHEN OTHERS THEN
10:28:45 1495  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1496  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1497  END IS_INVOICE_TAX_EXEMPT;
10:28:45 1498  
10:28:45 1499  /******************************************************************************/
10:28:45 1500  
10:28:45 1501  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
10:28:45 1502  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
10:28:45 1503  	 out_result_set OUT SYS_REFCURSOR
10:28:45 1504  ) AS
10:28:45 1505  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
10:28:45 1506  -- VARIABLE
10:28:45 1507  temp_order_id TRANSACTION.ORDER_ID%TYPE;
10:28:45 1508  -- EXCEPTIONS
10:28:45 1509  BAD_ORDER_ID EXCEPTION;
10:28:45 1510  CAN_NOT_FIND_INVOICE EXCEPTION;
10:28:45 1511  BEGIN
10:28:45 1512  
10:28:45 1513  	 OPEN out_result_set FOR
10:28:45 1514  	   SELECT DISTINCT
10:28:45 1515  	     CHARGE.INVOICE_ID
10:28:45 1516  	   FROM
10:28:45 1517  	     CHARGE
10:28:45 1518  	   INNER JOIN
10:28:45 1519  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
10:28:45 1520  	   WHERE
10:28:45 1521  	     TRANSACTION.ORDER_ID = in_order_id;
10:28:45 1522  
10:28:45 1523  EXCEPTION
10:28:45 1524  WHEN BAD_ORDER_ID THEN
10:28:45 1525  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1526  	   SPROC_NAME, 'No such transaction');
10:28:45 1527  WHEN CAN_NOT_FIND_INVOICE THEN
10:28:45 1528  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1529  	   SPROC_NAME, 'Could not find invoice for given order id');
10:28:45 1530  WHEN OTHERS THEN
10:28:45 1531  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1532  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1533  END GET_INVOICE_BY_TRNS_ORDER_ID;
10:28:45 1534  
10:28:45 1535  /******************************************************************************/
10:28:45 1536  
10:28:45 1537  PROCEDURE GET_INVOICE_BY_ID (
10:28:45 1538  	 in_invoice_id	IN NUMBER,
10:28:45 1539  	 out_result_set OUT SYS_REFCURSOR
10:28:45 1540  ) AS
10:28:45 1541  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
10:28:45 1542  -- VARIABLE
10:28:45 1543  temp_invoice_id NUMBER;
10:28:45 1544  -- EXCEPTIONS
10:28:45 1545  BAD_INVOCIE_ID EXCEPTION;
10:28:45 1546  BEGIN
10:28:45 1547  
10:28:45 1548  	 BEGIN
10:28:45 1549  	   SELECT
10:28:45 1550  	     INVOICE.ID into temp_invoice_id
10:28:45 1551  	   FROM
10:28:45 1552  	     INVOICE
10:28:45 1553  	   WHERE
10:28:45 1554  	     INVOICE.ID = in_invoice_id;
10:28:45 1555  	   EXCEPTION
10:28:45 1556  	     WHEN NO_DATA_FOUND THEN
10:28:45 1557  	       RAISE BAD_INVOCIE_ID;
10:28:45 1558  	 END;
10:28:45 1559  
10:28:45 1560  	 OPEN out_result_set FOR
10:28:45 1561  	 SELECT
10:28:45 1562  	   INVOICE.ID,
10:28:45 1563  	   INVOICE.INVOICE_STATUS_ID,
10:28:45 1564  	   INVOICE.TAX_EXEMPT_ID,
10:28:45 1565  	   INVOICE.UPDATE_DATE,
10:28:45 1566  	   INVOICE.UPDATED_BY,
10:28:45 1567  	   INVOICE.CREATE_DATE,
10:28:45 1568  	   INVOICE.CREATED_BY
10:28:45 1569  	 FROM
10:28:45 1570  	   INVOICE
10:28:45 1571  	 WHERE
10:28:45 1572  	   INVOICE.ID = in_invoice_id;
10:28:45 1573  
10:28:45 1574  EXCEPTION
10:28:45 1575  WHEN BAD_INVOCIE_ID THEN
10:28:45 1576  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1577  	   SPROC_NAME, 'No such invoice');
10:28:45 1578  WHEN OTHERS THEN
10:28:45 1579  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1580  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1581  END GET_INVOICE_BY_ID;
10:28:45 1582  
10:28:45 1583  /******************************************************************************/
10:28:45 1584  
10:28:45 1585  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
10:28:45 1586  	 in_invoice_id		       IN NUMBER,
10:28:45 1587  	 out_is_tax_calculation_needed OUT NUMBER
10:28:45 1588  ) AS
10:28:45 1589  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
10:28:45 1590  BEGIN
10:28:45 1591  
10:28:45 1592  	 SELECT
10:28:45 1593  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
10:28:45 1594  	 FROM
10:28:45 1595  	   INVOICE I
10:28:45 1596  	 WHERE
10:28:45 1597  	   I.ID = in_invoice_id;
10:28:45 1598  
10:28:45 1599  EXCEPTION
10:28:45 1600  WHEN NO_DATA_FOUND THEN
10:28:45 1601  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1602  	   SPROC_NAME, 'No such invoice');
10:28:45 1603  WHEN OTHERS THEN
10:28:45 1604  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1605  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1606  END GET_IS_TAX_CALCULATION_NEEDED;
10:28:45 1607  
10:28:45 1608  /******************************************************************************/
10:28:45 1609  
10:28:45 1610  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
10:28:45 1611  	 in_invoice_id		      IN NUMBER,
10:28:45 1612  	 in_updated_by		      IN VARCHAR2,
10:28:45 1613  	 in_is_tax_calculation_needed IN NUMBER
10:28:45 1614  ) AS
10:28:45 1615  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
10:28:45 1616  -- VARIABLES
10:28:45 1617  temp_invoice_id	      NUMBER;
10:28:45 1618  -- EXCEPTIONS
10:28:45 1619  BAD_INVOICE_ID	      EXCEPTION;
10:28:45 1620  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
10:28:45 1621  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:45 1622  BEGIN
10:28:45 1623  
10:28:45 1624  	 BEGIN
10:28:45 1625  	   SELECT
10:28:45 1626  	     i.id into temp_invoice_id
10:28:45 1627  	   FROM
10:28:45 1628  	     invoice i
10:28:45 1629  	   WHERE
10:28:45 1630  	     i.id = in_invoice_id;
10:28:45 1631  	   EXCEPTION
10:28:45 1632  	     WHEN NO_DATA_FOUND THEN
10:28:45 1633  	       RAISE BAD_INVOICE_ID;
10:28:45 1634  	 END;
10:28:45 1635  
10:28:45 1636  	 BEGIN
10:28:45 1637  	   PROCS_INVOICE_CRU_V24.UPDATE_INVOICE(
10:28:45 1638  	     in_invoice_id => in_invoice_id,
10:28:45 1639  	     in_updated_by => in_updated_by,
10:28:45 1640  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
10:28:45 1641  	   );
10:28:45 1642  	   EXCEPTION
10:28:45 1643  	     WHEN OTHERS THEN
10:28:45 1644  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1645  	       RAISE CAN_NOT_UPDATE_INVOCIE;
10:28:45 1646  	 END;
10:28:45 1647  
10:28:45 1648  EXCEPTION
10:28:45 1649  WHEN BAD_INVOICE_ID THEN
10:28:45 1650  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1651  	   SPROC_NAME, 'No such invoice');
10:28:45 1652  WHEN CAN_NOT_UPDATE_INVOCIE THEN
10:28:45 1653  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1654  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
10:28:45 1655  WHEN OTHERS THEN
10:28:45 1656  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1657  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1658  END SET_IS_TAX_CALCULATION_NEEDED;
10:28:45 1659  
10:28:45 1660  /******************************************************************************/
10:28:45 1661  
10:28:45 1662  PROCEDURE REFUND_INVOICE (
10:28:45 1663  	 in_invoice_id	    IN NUMBER,
10:28:45 1664  	 in_refund_amount   IN NUMBER,
10:28:45 1665  	 in_note	    IN VARCHAR2,
10:28:45 1666  	 in_created_by	    IN VARCHAR2,
10:28:45 1667  	 out_charge_id	    OUT NUMBER
10:28:45 1668  ) AS
10:28:45 1669  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
10:28:45 1670  -- VARIABLES
10:28:45 1671  var_invoice_status_id  NUMBER;
10:28:45 1672  var_subscription_id    NUMBER;
10:28:45 1673  var_account_id	      NUMBER;
10:28:45 1674  var_group_id	      NUMBER;
10:28:45 1675  var_account_status_id  NUMBER;
10:28:45 1676  var_new_transaction_id NUMBER;
10:28:45 1677  var_instrument_type_id NUMBER;
10:28:45 1678  var_instrument_id      NUMBER;
10:28:45 1679  var_new_charge_id      NUMBER;
10:28:45 1680  var_invoice_amount     NUMBER(10,2);
10:28:45 1681  var_refunds_before     NUMBER(10,2);
10:28:45 1682  var_charges_amount     NUMBER(10,2);
10:28:45 1683  -- EXCEPTIONS
10:28:45 1684  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
10:28:45 1685  ACCOUNT_IS_FROZEN	     EXCEPTION;
10:28:45 1686  BAD_INVOICE_ID		     EXCEPTION;
10:28:45 1687  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
10:28:45 1688  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
10:28:45 1689  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
10:28:45 1690  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
10:28:45 1691  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
10:28:45 1692  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
10:28:45 1693  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
10:28:45 1694  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
10:28:45 1695  EXCEPTION_MESSAGE	      VARCHAR2(1024);
10:28:45 1696  BEGIN
10:28:45 1697  
10:28:45 1698  	 BEGIN
10:28:45 1699  	   SELECT
10:28:45 1700  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
10:28:45 1701  	   FROM
10:28:45 1702  	     INVOICE
10:28:45 1703  	   WHERE
10:28:45 1704  	     INVOICE.ID = in_invoice_id;
10:28:45 1705  	   EXCEPTION
10:28:45 1706  	     WHEN NO_DATA_FOUND THEN
10:28:45 1707  	       RAISE BAD_INVOICE_ID;
10:28:45 1708  	 END;
10:28:45 1709  
10:28:45 1710  	 -- Get instrument and subscription id if exists
10:28:45 1711  	 BEGIN
10:28:45 1712  	   SELECT
10:28:45 1713  	     SUBSCRIPTION.INSTRUMENT_ID,
10:28:45 1714  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
10:28:45 1715  	     SUBSCRIPTION.ACCOUNT_ID,
10:28:45 1716  	     SUBSCRIPTION.ID
10:28:45 1717  	     into
10:28:45 1718  	     var_instrument_id,
10:28:45 1719  	     var_instrument_type_id,
10:28:45 1720  	     var_account_id,
10:28:45 1721  	     var_subscription_id
10:28:45 1722  	   FROM
10:28:45 1723  	     SUBSCRIPTION
10:28:45 1724  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
10:28:45 1725  	   WHERE
10:28:45 1726  	     LICENSE.INVOICE_ID = in_invoice_id
10:28:45 1727  	     AND ROWNUM <= 1;
10:28:45 1728  	   EXCEPTION
10:28:45 1729  	     WHEN NO_DATA_FOUND THEN
10:28:45 1730  	       BEGIN
10:28:45 1731  
10:28:45 1732  		 var_subscription_id := NULL;
10:28:45 1733  
10:28:45 1734  		 SELECT
10:28:45 1735  		   CHARGE.INSTRUMENT_ID,
10:28:45 1736  		   CHARGE.INSTRUMENT_TYPE_ID,
10:28:45 1737  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
10:28:45 1738  		   into
10:28:45 1739  		   var_instrument_id,
10:28:45 1740  		   var_instrument_type_id,
10:28:45 1741  		   var_group_id
10:28:45 1742  		 FROM
10:28:45 1743  		   INVOICE
10:28:45 1744  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
10:28:45 1745  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
10:28:45 1746  		 WHERE
10:28:45 1747  		   INVOICE.ID = in_invoice_id
10:28:45 1748  		   AND ROWNUM <= 1;
10:28:45 1749  
10:28:45 1750  		 SELECT
10:28:45 1751  		   ACCOUNT.ID into var_account_id
10:28:45 1752  		 FROM
10:28:45 1753  		   ACCOUNT
10:28:45 1754  		 WHERE
10:28:45 1755  		   ACCOUNT.GROUP_ID = var_group_id;
10:28:45 1756  
10:28:45 1757  		 EXCEPTION
10:28:45 1758  		   WHEN NO_DATA_FOUND THEN
10:28:45 1759  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
10:28:45 1760  	       END;
10:28:45 1761  	 END;
10:28:45 1762  
10:28:45 1763  	 -- Check account status. It should not to be frozen
10:28:45 1764  	 SELECT
10:28:45 1765  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
10:28:45 1766  	 FROM
10:28:45 1767  	   ACCOUNT
10:28:45 1768  	 WHERE
10:28:45 1769  	   ACCOUNT.ID = var_account_id;
10:28:45 1770  
10:28:45 1771  	 IF var_account_status_id = GLOBAL_STATUSES_V24.ACCOUNT_FROZEN THEN
10:28:45 1772  	   RAISE ACCOUNT_IS_FROZEN;
10:28:45 1773  	 END IF;
10:28:45 1774  
10:28:45 1775  	 IF var_invoice_status_id != GLOBAL_STATUSES_V24.INVOICE_CLOSED THEN
10:28:45 1776  	   RAISE INVOICE_IS_NOT_CLOSED;
10:28:45 1777  	 END IF;
10:28:45 1778  
10:28:45 1779  	 BEGIN
10:28:45 1780  	   PROCS_INVOICE_V24.CALCULATE_INVOICE_AMOUNT (
10:28:45 1781  	     in_invoice_id => in_invoice_id,
10:28:45 1782  	     out_amount    => var_invoice_amount
10:28:45 1783  	   );
10:28:45 1784  	   EXCEPTION
10:28:45 1785  	     WHEN OTHERS THEN
10:28:45 1786  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1787  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:28:45 1788  	 END;
10:28:45 1789  
10:28:45 1790  	 IF ( in_refund_amount > var_invoice_amount ) THEN
10:28:45 1791  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
10:28:45 1792  	 END IF;
10:28:45 1793  
10:28:45 1794  	 SELECT /*+ STAR_TRANSFORMATION */
10:28:45 1795  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
10:28:45 1796  	 FROM
10:28:45 1797  	   CHARGE
10:28:45 1798  	 WHERE
10:28:45 1799  	   CHARGE.INVOICE_ID = in_invoice_id
10:28:45 1800  	   AND (
10:28:45 1801  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V24.CHARGE_OPENED
10:28:45 1802  	     OR (
10:28:45 1803  	       CHARGE.CHARGE_STATUS_ID in  (GLOBAL_STATUSES_V24.CHARGE_PROCESSED, GLOBAL_STATUSES_V24.CHARGE_CAPTURED,
10:28:45 1804  	       GLOBAL_STATUSES_V24.CHARGE_SETTLED,GLOBAL_STATUSES_V24.CHARGE_CHARGEBACK_CLAIM, GLOBAL_STATUSES_V24.CHARGEBACK_SETTLED)
10:28:45 1805  	       AND EXISTS (
10:28:45 1806  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS
10:28:45 1807  	       )
10:28:45 1808  	     )
10:28:45 1809  	   )
10:28:45 1810  	   AND CHARGE.CHARGE_AMOUNT < 0;
10:28:45 1811  
10:28:45 1812  	 -- Refunds are negative
10:28:45 1813  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
10:28:45 1814  	 var_refunds_before := 0 - var_refunds_before;
10:28:45 1815  
10:28:45 1816  	 var_charges_amount := 0;
10:28:45 1817  
10:28:45 1818  	 FOR f_processed_charges IN (
10:28:45 1819  	   SELECT
10:28:45 1820  	     CHARGE.CHARGE_AMOUNT
10:28:45 1821  	   FROM
10:28:45 1822  	     CHARGE
10:28:45 1823  	   WHERE
10:28:45 1824  	     CHARGE.INVOICE_ID = in_invoice_id
10:28:45 1825  	     AND CHARGE.CHARGE_AMOUNT > 0
10:28:45 1826  	     AND CHARGE.CHARGE_STATUS_ID IN (GLOBAL_STATUSES_V24.CHARGE_PROCESSED, GLOBAL_STATUSES_V24.CHARGE_CAPTURED,
10:28:45 1827  	       GLOBAL_STATUSES_V24.CHARGE_SETTLED,GLOBAL_STATUSES_V24.CHARGE_CHARGEBACK_CLAIM, GLOBAL_STATUSES_V24.CHARGEBACK_SETTLED)
10:28:45 1828  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS)
10:28:45 1829  	 )
10:28:45 1830  	 LOOP
10:28:45 1831  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
10:28:45 1832  	 END LOOP;
10:28:45 1833  
10:28:45 1834  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
10:28:45 1835  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
10:28:45 1836  	 END IF;
10:28:45 1837  
10:28:45 1838  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
10:28:45 1839  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
10:28:45 1840  	 END IF;
10:28:45 1841  
10:28:45 1842  	 BEGIN
10:28:45 1843  	   PROCS_TRANSACTION_V24.CREATE_TRANSACTION(
10:28:45 1844  	     in_transaction_id	       => NULL,
10:28:45 1845  	     in_status_id	       => GLOBAL_STATUSES_V24.TRANSACTION_PREPARE,
10:28:45 1846  	     in_amount		       => -in_refund_amount,
10:28:45 1847  	     in_created_by	       => in_created_by,
10:28:45 1848  	     in_order_id	       => NULL,
10:28:45 1849  	     in_is_refund	       => GLOBAL_CONSTANTS_V24.TRUE,
10:28:45 1850  	     in_transaction_type_code  => 'REFUND',
10:28:45 1851  	     out_transaction_id        => var_new_transaction_id
10:28:45 1852  	   );
10:28:45 1853  	   EXCEPTION
10:28:45 1854  	     WHEN OTHERS THEN
10:28:45 1855  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1856  	       RAISE CAN_NOT_CREATE_TRANSACTION;
10:28:45 1857  	 END;
10:28:45 1858  
10:28:45 1859  	 BEGIN
10:28:45 1860  	   PROCS_CHARGE_V24.CREATE_CHARGE(
10:28:45 1861  	     in_invoice_id	   => in_invoice_id,
10:28:45 1862  	     in_transaction_id	   => var_new_transaction_id,
10:28:45 1863  	     in_instrument_type_id => var_instrument_type_id,
10:28:45 1864  	     in_instrument_id	   => var_instrument_id,
10:28:45 1865  	     in_charge_amount	   => -in_refund_amount,
10:28:45 1866  	     in_created_by	   => in_created_by,
10:28:45 1867  	     in_charge_status_id   => GLOBAL_STATUSES_V24.CHARGE_OPENED,
10:28:45 1868  	     out_charge_id	   => var_new_charge_id
10:28:45 1869  	   );
10:28:45 1870  	   EXCEPTION
10:28:45 1871  	     WHEN OTHERS THEN
10:28:45 1872  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1873  	       RAISE CAN_NOT_CREATE_CHARGE;
10:28:45 1874  	 END;
10:28:45 1875  
10:28:45 1876  	 out_charge_id := var_new_charge_id;
10:28:45 1877  
10:28:45 1878  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
10:28:45 1879  	   BEGIN
10:28:45 1880  	     PROCS_SUBSCRIPTION_V24.ANNOTATE_SUBSCRIPTION(
10:28:45 1881  	       in_subscription_id => var_subscription_id,
10:28:45 1882  	       in_agent_id	  => 0, -- AGENT_ID??
10:28:45 1883  	       in_note		  => in_note,
10:28:45 1884  	       in_created_by	  => in_created_by
10:28:45 1885  	     );
10:28:45 1886  	     EXCEPTION
10:28:45 1887  	       WHEN OTHERS THEN
10:28:45 1888  		 EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1889  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
10:28:45 1890  	   END;
10:28:45 1891  	 END IF;
10:28:45 1892  
10:28:45 1893  EXCEPTION
10:28:45 1894  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
10:28:45 1895  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1896  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
10:28:45 1897  WHEN INVOICE_IS_NOT_CLOSED THEN
10:28:45 1898  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1899  	   SPROC_NAME, 'Invoice is not closed');
10:28:45 1900  WHEN ACCOUNT_IS_FROZEN THEN
10:28:45 1901  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1902  	   SPROC_NAME, 'Could not refund subscription for frozen account');
10:28:45 1903  WHEN BAD_INVOICE_ID THEN
10:28:45 1904  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1905  	   SPROC_NAME, 'No such invoice');
10:28:45 1906  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:28:45 1907  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1908  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
10:28:45 1909  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
10:28:45 1910  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 1911  	   SPROC_NAME, 'Refund is greater than amount');
10:28:45 1912  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
10:28:45 1913  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 1914  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
10:28:45 1915  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
10:28:45 1916  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 1917  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
10:28:45 1918  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:28:45 1919  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1920  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:28:45 1921  WHEN CAN_NOT_CREATE_CHARGE THEN
10:28:45 1922  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1923  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:28:45 1924  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
10:28:45 1925  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1926  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:28:45 1927  WHEN OTHERS THEN
10:28:45 1928  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1929  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1930  END REFUND_INVOICE;
10:28:45 1931  
10:28:45 1932  /******************************************************************************/
10:28:45 1933  
10:28:45 1934  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
10:28:45 1935  	 in_invoice_id		     IN NUMBER,
10:28:45 1936  	 out_order_id		     OUT VARCHAR2,
10:28:45 1937  	 out_external_transaction_id OUT VARCHAR2
10:28:45 1938  ) AS
10:28:45 1939  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
10:28:45 1940  -- VARIABLES
10:28:45 1941  temp_invoice_id number;
10:28:45 1942  cnt_matched_instr number := 0;
10:28:45 1943  -- EXCEPTIONS
10:28:45 1944  BAD_INVOICE_ID EXCEPTION;
10:28:45 1945  BEGIN
10:28:45 1946  
10:28:45 1947  	 BEGIN
10:28:45 1948  	   SELECT
10:28:45 1949  	     i.id into temp_invoice_id
10:28:45 1950  	   from
10:28:45 1951  	     invoice i
10:28:45 1952  	   where
10:28:45 1953  	     i.id = in_invoice_id;
10:28:45 1954  	   EXCEPTION
10:28:45 1955  	     WHEN NO_DATA_FOUND THEN
10:28:45 1956  	       RAISE BAD_INVOICE_ID;
10:28:45 1957  	 END;
10:28:45 1958  
10:28:45 1959  	 select
10:28:45 1960  	   count(1) into cnt_matched_instr
10:28:45 1961  	 from
10:28:45 1962  	   charge ch
10:28:45 1963  	 inner join
10:28:45 1964  	   subscription s
10:28:45 1965  	 on
10:28:45 1966  	   s.instrument_id = ch.instrument_id
10:28:45 1967  	 where
10:28:45 1968  	   ch.invoice_id = in_invoice_id;
10:28:45 1969  
10:28:45 1970  	 if cnt_matched_instr = 0 then
10:28:45 1971  	   out_external_transaction_id := null;
10:28:45 1972  	   out_order_id := null;
10:28:45 1973  	   return;
10:28:45 1974  	 end if;
10:28:45 1975  
10:28:45 1976  	 SELECT
10:28:45 1977  	   t.order_id,
10:28:45 1978  	   ta.external_transaction_id
10:28:45 1979  	   into
10:28:45 1980  	   out_order_id,
10:28:45 1981  	   out_external_transaction_id
10:28:45 1982  	 from
10:28:45 1983  	   charge ch
10:28:45 1984  	   inner join transaction t on ch.transaction_id = t.id
10:28:45 1985  	   inner join transaction_attempt ta on ta.transaction_id = t.id
10:28:45 1986  	 where
10:28:45 1987  	   ch.invoice_id = in_invoice_id
10:28:45 1988  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS
10:28:45 1989  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
10:28:45 1990  
10:28:45 1991  EXCEPTION
10:28:45 1992  WHEN BAD_INVOICE_ID THEN
10:28:45 1993  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1994  	   SPROC_NAME, 'No such invoice');
10:28:45 1995  WHEN NO_DATA_FOUND THEN
10:28:45 1996  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1997  	   SPROC_NAME, 'No payment data found');
10:28:45 1998  WHEN OTHERS THEN
10:28:45 1999  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2000  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2001  END GET_PAYMENT_INFO_BY_INVOICE_ID;
10:28:45 2002  
10:28:45 2003  PROCEDURE IS_REVOKE_ENTITLEMENTS(
10:28:45 2004  	 in_invoice_id IN NUMBER,
10:28:45 2005  	 out_is_revoke OUT NUMBER
10:28:45 2006  ) AS
10:28:45 2007  BEGIN
10:28:45 2008  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V24.FALSE, GLOBAL_CONSTANTS_V24.TRUE)
10:28:45 2009  	   into out_is_revoke
10:28:45 2010  	 FROM
10:28:45 2011  	   offer_chain oc,
10:28:45 2012  	   subscription s,
10:28:45 2013  	   license l,
10:28:45 2014  	   invoice i
10:28:45 2015  	 where
10:28:45 2016  	   oc.id = s.offer_chain_id and
10:28:45 2017  	   s.id = l.subscription_id and
10:28:45 2018  	   l.invoice_id = i.id and
10:28:45 2019  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V24.TRUE and
10:28:45 2020  	   i.id = in_invoice_id and
10:28:45 2021  	   rownum < 2
10:28:45 2022  	 ;
10:28:45 2023  END IS_REVOKE_ENTITLEMENTS;
10:28:45 2024  
10:28:45 2025  END PROCS_INVOICE_V24;
10:28:45 2026  .
10:28:45 SQL> /

Package body created.

Elapsed: 00:00:00.29
10:28:45 SQL> 
10:28:45 SQL> prompt Compiling body for procs_fin_instruments.sql
Compiling body for procs_fin_instruments.sql
10:28:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V24" AS
10:28:45   2  
10:28:45   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
10:28:45   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:45   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
10:28:45   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
10:28:45   7  AS
10:28:45   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
10:28:45   9  BEGIN
10:28:45  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
10:28:45  11  	  PROCS_FIN_INSTRUMENTS_CRU_V24.UPDATE_GIFT_CERTIFICATE (
10:28:45  12  	    in_gift_certificate_id	  => rec.Id,
10:28:45  13  	    in_gift_certificate_status_id => in_status_id,
10:28:45  14  	    in_updated_by		  => in_updater
10:28:45  15  	  );
10:28:45  16  	END LOOP;
10:28:45  17  END UPDATE_GC_STATUS_BY_INVOICE;
10:28:45  18  
10:28:45  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
10:28:45  20  	in_invoice_id		     IN NUMBER,
10:28:45  21  	out_is_invoice_for_redeem_gc OUT NUMBER
10:28:45  22  ) AS
10:28:45  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
10:28:45  24  var_is_for_gc NUMBER;
10:28:45  25  BEGIN
10:28:45  26  	SELECT
10:28:45  27  	  count(1) into var_is_for_gc
10:28:45  28  	FROM GIFT_CERTIFICATE GC
10:28:45  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
10:28:45  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
10:28:45  31  
10:28:45  32  	IF var_is_for_gc > 0 THEN
10:28:45  33  	  out_is_invoice_for_redeem_gc := 1;
10:28:45  34  	ELSE
10:28:45  35  	  out_is_invoice_for_redeem_gc := 0;
10:28:45  36  	END IF;
10:28:45  37  END IS_INVOICE_FOR_REDEEMED_GC;
10:28:45  38  
10:28:45  39  PROCEDURE GET_UNREDEEMED_GCS (
10:28:45  40  	out_result_set		OUT SYS_REFCURSOR,
10:28:45  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:28:45  42  	in_num_rows		IN NUMBER DEFAULT 10000,
10:28:45  43  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:45  44  ) AS
10:28:45  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
10:28:45  46  BEGIN
10:28:45  47  	OPEN out_result_set FOR
10:28:45  48  SELECT * FROM
10:28:45  49  (
10:28:45  50  	SELECT
10:28:45  51  	  gc.EXPIRATION_DATE,
10:28:45  52  	  ch.name,
10:28:45  53  	  ch.id offer_chain_id,
10:28:45  54  	  gc.sender_email,
10:28:45  55  	  gc.sender_name,
10:28:45  56  	  gc.recipient_email,
10:28:45  57  	  gc.recipient_name,
10:28:45  58  	  gc.purchase_date,
10:28:45  59  	  gc.redemption_date,
10:28:45  60  	  gc.purchaser_group_id,
10:28:45  61  	  gc.redeemer_group_id,
10:28:45  62  	  gc.code,
10:28:45  63  	  gc.gift_message,
10:28:45  64  	  gc.recipient_notify_date,
10:28:45  65  	  gc.id
10:28:45  66  	FROM
10:28:45  67  	  GIFT_CERTIFICATE gc,
10:28:45  68  	  OFFER_CHAIN ch
10:28:45  69  	WHERE
10:28:45  70  	  ch.id = gc.offer_chain_id
10:28:45  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
10:28:45  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
10:28:45  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
10:28:45  74  	  AND gc.redeemer_group_id is null
10:28:45  75  	  AND NOT EXISTS(
10:28:45  76  	    SELECT NULL
10:28:45  77  	    FROM PROCESS_RETRY_THROTTLE
10:28:45  78  	    WHERE PROCESS_NAME = in_process_name
10:28:45  79  	      AND GENERIC_ID = gc.id
10:28:45  80  	  ) AND EXISTS(
10:28:45  81  	    SELECT NULL
10:28:45  82  	    FROM
10:28:45  83  	      charge c,
10:28:45  84  	      transaction_attempt ta,
10:28:45  85  	      transaction t
10:28:45  86  	    WHERE
10:28:45  87  	      c.invoice_id = gc.purchase_invoice_id and
10:28:45  88  	      c.transaction_id = t.id and
10:28:45  89  	      t.id = ta.transaction_id and
10:28:45  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS
10:28:45  91  	  ) AND NOT EXISTS (
10:28:45  92  	    SELECT NULL
10:28:45  93  	    FROM
10:28:45  94  	      charge c,
10:28:45  95  	      transaction t
10:28:45  96  	    WHERE
10:28:45  97  	      c.invoice_id = gc.purchase_invoice_id and
10:28:45  98  	      c.transaction_id = t.id and
10:28:45  99  	      t.is_refund = GLOBAL_CONSTANTS_V24.TRUE
10:28:45 100  	  )
10:28:45 101  	  AND ROWNUM <= in_num_rows*10
10:28:45 102  	  ORDER BY dbms_random.value
10:28:45 103  ) WHERE
10:28:45 104  	  ROWNUM <= in_num_rows;
10:28:45 105  EXCEPTION
10:28:45 106  WHEN OTHERS THEN
10:28:45 107  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 109  END GET_UNREDEEMED_GCS;
10:28:45 110  
10:28:45 111  PROCEDURE ADD_CREDIT_CARD (
10:28:45 112  /*
10:28:45 113  Throws exceptions:
10:28:45 114  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 115  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 116  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:45 117  */
10:28:45 118  	in_group_id		  IN NUMBER,
10:28:45 119  	in_updated_by		  IN VARCHAR2,
10:28:45 120  	in_instrument_name	  IN VARCHAR2,
10:28:45 121  	in_card_holder_name	  IN VARCHAR2,
10:28:45 122  	in_street_address	  IN VARCHAR2,
10:28:45 123  	in_street_address2	  IN VARCHAR2,
10:28:45 124  	in_state		  IN VARCHAR2,
10:28:45 125  	in_city 		  IN VARCHAR2,
10:28:45 126  	in_postal_code		  IN VARCHAR2,
10:28:45 127  	in_country		  IN CHAR,
10:28:45 128  	in_last_four_cc 	  IN VARCHAR2,
10:28:45 129  	in_expiration_date	  IN DATE,
10:28:45 130  	in_credit_card_type_id	  IN NUMBER,
10:28:45 131  	in_token		  IN VARCHAR2,
10:28:45 132  	in_chase_profile_id	  IN VARCHAR2,
10:28:45 133  	in_credit_card_status_id  IN NUMBER,
10:28:45 134  	in_private_first_name	  IN VARCHAR2,
10:28:45 135  	in_private_last_name	  IN VARCHAR2,
10:28:45 136  	out_credit_card_id	  OUT NUMBER
10:28:45 137  ) AS
10:28:45 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
10:28:45 139  -- VARIABLES
10:28:45 140  var_account_id	      NUMBER;
10:28:45 141  var_account_status      NUMBER;
10:28:45 142  var_credit_card_id      NUMBER;
10:28:45 143  temp_old_credit_card_id NUMBER;
10:28:45 144  -- EXCEPTIONS
10:28:45 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
10:28:45 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
10:28:45 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
10:28:45 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
10:28:45 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:28:45 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
10:28:45 151  var_charges_set		SYS_REFCURSOR;
10:28:45 152  var_charge_id		NUMBER;
10:28:45 153  var_charge_invoice_id	NUMBER;
10:28:45 154  var_charge_transaction_id NUMBER;
10:28:45 155  var_charge_amount 	NUMBER(10,2);
10:28:45 156  temp_out_charge_id	NUMBER;
10:28:45 157  temp_out_transaction_id	NUMBER;
10:28:45 158  var_order_id			VARCHAR2(1024);
10:28:45 159  BEGIN
10:28:45 160  
10:28:45 161  	-- Get account id
10:28:45 162  	-- Get account status
10:28:45 163  	SELECT
10:28:45 164  	  ACCOUNT.ID,
10:28:45 165  	  ACCOUNT.ACCOUNT_STATUS_ID
10:28:45 166  	  into
10:28:45 167  	  var_account_id,
10:28:45 168  	  var_account_status
10:28:45 169  	FROM
10:28:45 170  	  ACCOUNT
10:28:45 171  	WHERE
10:28:45 172  	  ACCOUNT.GROUP_ID = in_group_id;
10:28:45 173  
10:28:45 174  	SELECT
10:28:45 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
10:28:45 176  	FROM DUAL;
10:28:45 177  
10:28:45 178  	-- Insert new row in CREDIT_CARD table
10:28:45 179  	PROCS_FIN_INSTRUMENTS_CRU_V24.CREATE_CREDIT_CARD(
10:28:45 180  	  out_credit_card_id	      => var_credit_card_id,
10:28:45 181  	  in_account_id 	      => var_account_id,
10:28:45 182  	  in_instrument_name	      => in_instrument_name,
10:28:45 183  	  in_private_card_holder_name => in_card_holder_name,
10:28:45 184  	  in_private_street_address   => in_street_address,
10:28:45 185  	  in_private_street_address2  => in_street_address2,
10:28:45 186  	  in_state		      => in_state,
10:28:45 187  	  in_city		      => in_city,
10:28:45 188  	  in_postal_code	      => in_postal_code,
10:28:45 189  	  in_country		      => in_country,
10:28:45 190  	  in_last_four_cc	      => in_last_four_cc,
10:28:45 191  	  in_expiration_date	      => in_expiration_date,
10:28:45 192  	  in_credit_card_type_id      => in_credit_card_type_id,
10:28:45 193  	  in_secret_token	      => in_token,
10:28:45 194  	  in_chase_profile_id	      => in_chase_profile_id,
10:28:45 195  	  in_created_by 	      => in_updated_by,
10:28:45 196  	  in_credit_card_status_id    => in_credit_card_status_id,
10:28:45 197  	  in_private_first_name       => in_private_first_name,
10:28:45 198  	  in_private_last_name	      => in_private_last_name
10:28:45 199  	);
10:28:45 200  
10:28:45 201  	out_credit_card_id := var_credit_card_id;
10:28:45 202  
10:28:45 203  EXCEPTION
10:28:45 204  WHEN NO_DATA_FOUND THEN
10:28:45 205  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 206  	  SPROC_NAME, 'No such account');
10:28:45 207  WHEN BAD_OLD_CREDIT_CARD THEN
10:28:45 208  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 209  	  SPROC_NAME, 'Bad old credit card id');
10:28:45 210  WHEN BAD_IS_DEFAULT_VALUE THEN
10:28:45 211  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 212  	  SPROC_NAME, 'Bad is_default value');
10:28:45 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
10:28:45 214  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
10:28:45 216  WHEN BAD_ACCOUNT_STATUS THEN
10:28:45 217  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 218  	  SPROC_NAME, 'Account is not active');
10:28:45 219  WHEN OTHERS THEN
10:28:45 220  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 222  END ADD_CREDIT_CARD;
10:28:45 223  
10:28:45 224  /******************************************************************************/
10:28:45 225  
10:28:45 226  PROCEDURE ADD_PAYPAL (
10:28:45 227  /*
10:28:45 228  Throws exceptions:
10:28:45 229  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 230  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 231  */
10:28:45 232  	in_group_id			IN NUMBER,
10:28:45 233  	in_instrument_name		IN VARCHAR2,
10:28:45 234  	in_private_email_address	IN VARCHAR2,
10:28:45 235  	in_created_by			IN VARCHAR2,
10:28:45 236  	in_paypal_status_id		IN NUMBER,
10:28:45 237  	in_paypal_prvt_street_address	IN VARCHAR2,
10:28:45 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
10:28:45 239  	in_state			IN VARCHAR2,
10:28:45 240  	in_city 			IN VARCHAR2,
10:28:45 241  	in_postal_code			IN VARCHAR2,
10:28:45 242  	in_country			IN CHAR,
10:28:45 243  	in_expiration_date		IN DATE,
10:28:45 244  	in_secret_token 		IN VARCHAR2,
10:28:45 245  	out_paypal_id			OUT NUMBER
10:28:45 246  ) AS
10:28:45 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
10:28:45 248  var_paypal_id NUMBER;
10:28:45 249  var_account_id  NUMBER;
10:28:45 250  -- EXCEPTIONS
10:28:45 251  BAD_GROUP_ID	    EXCEPTION;
10:28:45 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
10:28:45 253  BAD_PAYPAL_STATUS     EXCEPTION;
10:28:45 254  EXCEPTION_MESSAGE VARCHAR2(1024);
10:28:45 255  BEGIN
10:28:45 256  
10:28:45 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V24.PAYPAL_ACTIVE
10:28:45 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V24.PAYPAL_INACTIVE
10:28:45 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V24.PAYPAL_FROZEN THEN
10:28:45 260  	  RAISE BAD_PAYPAL_STATUS;
10:28:45 261  	END IF;
10:28:45 262  
10:28:45 263  	BEGIN
10:28:45 264  	  SELECT
10:28:45 265  	    a.id into var_account_id
10:28:45 266  	  from
10:28:45 267  	    account a
10:28:45 268  	  where
10:28:45 269  	    a.group_id = in_group_id;
10:28:45 270  	  EXCEPTION
10:28:45 271  	    WHEN NO_DATA_FOUND THEN
10:28:45 272  	      RAISE BAD_GROUP_ID;
10:28:45 273  	END;
10:28:45 274  
10:28:45 275  	BEGIN
10:28:45 276  	  PROCS_FIN_INSTRUMENTS_CRU_V24.CREATE_PAYPAL(
10:28:45 277  	    out_paypal_id		   => var_paypal_id,
10:28:45 278  	    in_paypal_id		   => NULL,
10:28:45 279  	    in_account_id		   => var_account_id,
10:28:45 280  	    in_instrument_name		   => in_instrument_name,
10:28:45 281  	    in_private_email_address	   => in_private_email_address,
10:28:45 282  	    in_created_by		   => in_created_by,
10:28:45 283  	    in_paypal_status_id 	   => in_paypal_status_id,
10:28:45 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
10:28:45 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
10:28:45 286  	    in_state			   => in_state,
10:28:45 287  	    in_city			   => in_city,
10:28:45 288  	    in_postal_code		   => in_postal_code,
10:28:45 289  	    in_country			   => in_country,
10:28:45 290  	    in_expiration_date		   => in_expiration_date,
10:28:45 291  	    in_secret_token		   => in_secret_token
10:28:45 292  	  );
10:28:45 293  	  EXCEPTION
10:28:45 294  	    WHEN OTHERS THEN
10:28:45 295  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
10:28:45 297  	END;
10:28:45 298  
10:28:45 299  	out_paypal_id := var_paypal_id;
10:28:45 300  
10:28:45 301  EXCEPTION
10:28:45 302  WHEN BAD_GROUP_ID THEN
10:28:45 303  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 304  	  SPROC_NAME, 'No such group id');
10:28:45 305  WHEN BAD_PAYPAL_STATUS THEN
10:28:45 306  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 307  	  SPROC_NAME, 'Bad paypal status');
10:28:45 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
10:28:45 309  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
10:28:45 311  WHEN OTHERS THEN
10:28:45 312  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 314  END ADD_PAYPAL;
10:28:45 315  
10:28:45 316  /******************************************************************************/
10:28:45 317  
10:28:45 318  PROCEDURE DISABLE_CREDIT_CARD (
10:28:45 319  /*
10:28:45 320  Throws exceptions:
10:28:45 321  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 322  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 323  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:45 324  */
10:28:45 325  	in_credit_card_id IN NUMBER,
10:28:45 326  	in_updated_by	  IN VARCHAR2
10:28:45 327  ) AS
10:28:45 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
10:28:45 329  -- VARIBLES
10:28:45 330  var_account_id		     NUMBER;
10:28:45 331  var_group_id		     NUMBER;
10:28:45 332  var_credit_card_status	     NUMBER;
10:28:45 333  var_pending_transactions_num   NUMBER;
10:28:45 334  var_pending_invoices_num	     NUMBER;
10:28:45 335  current_def_instrument_type_id NUMBER;
10:28:45 336  current_def_instrument_id      NUMBER;
10:28:45 337  -- EXCEPTIONS
10:28:45 338  BAD_CC_STATUS		   EXCEPTION;
10:28:45 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
10:28:45 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
10:28:45 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
10:28:45 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
10:28:45 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
10:28:45 344  BEGIN
10:28:45 345  
10:28:45 346  	-- Get credit card status
10:28:45 347  	-- Get account id
10:28:45 348  	SELECT
10:28:45 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
10:28:45 350  	  CREDIT_CARD.ACCOUNT_ID
10:28:45 351  	  into
10:28:45 352  	  var_credit_card_status,
10:28:45 353  	  var_account_id
10:28:45 354  	FROM
10:28:45 355  	  CREDIT_CARD
10:28:45 356  	WHERE
10:28:45 357  	  CREDIT_CARD.ID = in_credit_card_id;
10:28:45 358  
10:28:45 359  	-- Check that we can disable this credit card (STUB)
10:28:45 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
10:28:45 362  	END IF;
10:28:45 363  
10:28:45 364  	-- Get account id
10:28:45 365  	SELECT
10:28:45 366  	  ACCOUNT.GROUP_ID into var_group_id
10:28:45 367  	FROM
10:28:45 368  	  ACCOUNT
10:28:45 369  	WHERE
10:28:45 370  	  ACCOUNT.ID = var_account_id;
10:28:45 371  
10:28:45 372  	-- Card should to be active
10:28:45 373  	IF var_credit_card_status != GLOBAL_STATUSES_V24.CREDIT_CARD_ACTIVE THEN
10:28:45 374  	  RAISE BAD_CC_STATUS;
10:28:45 375  	END IF;
10:28:45 376  
10:28:45 377  	-- Looking for pending transactions associated with given credit card
10:28:45 378  	SELECT
10:28:45 379  	  COUNT(*) into var_pending_invoices_num
10:28:45 380  	FROM
10:28:45 381  	  CHARGE
10:28:45 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:28:45 383  	WHERE
10:28:45 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD
10:28:45 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
10:28:45 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V24.TRANSACTION_PENDING;
10:28:45 387  
10:28:45 388  	IF var_pending_invoices_num > 0 THEN
10:28:45 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
10:28:45 390  	END IF;
10:28:45 391  
10:28:45 392  	-- Getting current default financial instrument
10:28:45 393  	BEGIN
10:28:45 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
10:28:45 395  	    in_group_id 	   => var_group_id,
10:28:45 396  	    out_instrument_type_id => current_def_instrument_type_id,
10:28:45 397  	    out_instrument_id	   => current_def_instrument_id
10:28:45 398  	  );
10:28:45 399  	  EXCEPTION
10:28:45 400  	    WHEN OTHERS THEN
10:28:45 401  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
10:28:45 403  	END;
10:28:45 404  
10:28:45 405  	-- Checking that credit card is not default
10:28:45 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD
10:28:45 407  	  AND current_def_instrument_id = in_credit_card_id THEN
10:28:45 408  	  BEGIN
10:28:45 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
10:28:45 410  	      in_group_id => var_group_id
10:28:45 411  	    );
10:28:45 412  	  EXCEPTION
10:28:45 413  	    WHEN OTHERS THEN
10:28:45 414  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
10:28:45 416  	  END;
10:28:45 417  	END IF;
10:28:45 418  
10:28:45 419  	-- Update credit card status
10:28:45 420  	PROCS_FIN_INSTRUMENTS_V24.UPDATE_CREDIT_CARD_STATUS(
10:28:45 421  	  in_credit_card_id	   => in_credit_card_id,
10:28:45 422  	  in_updated_by 	   => in_updated_by,
10:28:45 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V24.CREDIT_CARD_DISABLED
10:28:45 424  	);
10:28:45 425  
10:28:45 426  EXCEPTION
10:28:45 427  WHEN NO_DATA_FOUND THEN
10:28:45 428  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 429  	  SPROC_NAME, 'No such credit card');
10:28:45 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
10:28:45 431  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
10:28:45 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
10:28:45 434  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
10:28:45 436  WHEN BAD_CC_STATUS THEN
10:28:45 437  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 438  	  SPROC_NAME, 'Credit card is not active');
10:28:45 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
10:28:45 440  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
10:28:45 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
10:28:45 443  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
10:28:45 445  WHEN OTHERS THEN
10:28:45 446  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 448  END DISABLE_CREDIT_CARD;
10:28:45 449  
10:28:45 450  /******************************************************************************/
10:28:45 451  
10:28:45 452  PROCEDURE DISABLE_PAYPAL (
10:28:45 453  /*
10:28:45 454  Throws exceptions:
10:28:45 455  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 456  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 457  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:45 458  */
10:28:45 459  	in_paypal_id  IN NUMBER,
10:28:45 460  	in_updated_by IN VARCHAR2
10:28:45 461  ) AS
10:28:45 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
10:28:45 463  -- VARIABLES
10:28:45 464  var_paypal_status_id NUMBER;
10:28:45 465  var_account_id	   NUMBER;
10:28:45 466  var_group_id	   NUMBER;
10:28:45 467  var_pending_invoices_num NUMBER;
10:28:45 468  current_def_instrument_type_id NUMBER;
10:28:45 469  current_def_instrument_id NUMBER;
10:28:45 470  -- EXCEPTIONS
10:28:45 471  BAD_PAYPAL_ID EXCEPTION;
10:28:45 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
10:28:45 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
10:28:45 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
10:28:45 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
10:28:45 476  EXCEPTION_MESSAGE VARCHAR2(1024);
10:28:45 477  BEGIN
10:28:45 478  
10:28:45 479  	-- Get Paypal status
10:28:45 480  	-- Get account
10:28:45 481  	BEGIN
10:28:45 482  	  SELECT
10:28:45 483  	    PAYPAL.PAYPAL_STATUS_ID,
10:28:45 484  	    PAYPAL.ACCOUNT_ID
10:28:45 485  	    into
10:28:45 486  	    var_paypal_status_id,
10:28:45 487  	    var_account_id
10:28:45 488  	  FROM
10:28:45 489  	    PAYPAL
10:28:45 490  	  WHERE
10:28:45 491  	    PAYPAL.ID = in_paypal_id;
10:28:45 492  	  EXCEPTION
10:28:45 493  	    WHEN NO_DATA_FOUND THEN
10:28:45 494  	      RAISE BAD_PAYPAL_ID;
10:28:45 495  	END;
10:28:45 496  
10:28:45 497  	-- Get group id
10:28:45 498  	SELECT
10:28:45 499  	  ACCOUNT.GROUP_ID into var_group_id
10:28:45 500  	FROM
10:28:45 501  	  ACCOUNT
10:28:45 502  	WHERE
10:28:45 503  	  ACCOUNT.ID = var_account_id;
10:28:45 504  
10:28:45 505  	-- Card should not be disabled
10:28:45 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V24.PAYPAL_INACTIVE THEN
10:28:45 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
10:28:45 508  	END IF;
10:28:45 509  
10:28:45 510  	-- Looking for pending transactions associated with given credit card
10:28:45 511  	SELECT
10:28:45 512  	  COUNT(*) into var_pending_invoices_num
10:28:45 513  	FROM
10:28:45 514  	  CHARGE
10:28:45 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:28:45 516  	WHERE
10:28:45 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL
10:28:45 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
10:28:45 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V24.TRANSACTION_PENDING;
10:28:45 520  
10:28:45 521  	IF var_pending_invoices_num > 0 THEN
10:28:45 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
10:28:45 523  	END IF;
10:28:45 524  
10:28:45 525  	-- Getting current default financial instrument
10:28:45 526  	BEGIN
10:28:45 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
10:28:45 528  	    in_group_id 	   => var_group_id,
10:28:45 529  	    out_instrument_type_id => current_def_instrument_type_id,
10:28:45 530  	    out_instrument_id	   => current_def_instrument_id
10:28:45 531  	  );
10:28:45 532  	  EXCEPTION
10:28:45 533  	    WHEN OTHERS THEN
10:28:45 534  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
10:28:45 536  	END;
10:28:45 537  
10:28:45 538  	-- Checking that credit card is not default
10:28:45 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL
10:28:45 540  	  AND current_def_instrument_id = in_paypal_id THEN
10:28:45 541  	  BEGIN
10:28:45 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
10:28:45 543  	      in_group_id => var_group_id
10:28:45 544  	    );
10:28:45 545  	  EXCEPTION
10:28:45 546  	    WHEN OTHERS THEN
10:28:45 547  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
10:28:45 549  	  END;
10:28:45 550  	END IF;
10:28:45 551  
10:28:45 552  	PROCS_FIN_INSTRUMENTS_V24.UPDATE_PAYPAL_STATUS(
10:28:45 553  	  in_paypal_id	      => in_paypal_id,
10:28:45 554  	  in_updated_by       => in_updated_by,
10:28:45 555  	  in_paypal_status_id => GLOBAL_STATUSES_V24.PAYPAL_INACTIVE
10:28:45 556  	);
10:28:45 557  
10:28:45 558  EXCEPTION
10:28:45 559  WHEN BAD_PAYPAL_ID THEN
10:28:45 560  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 561  	  SPROC_NAME, 'No such paypal');
10:28:45 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
10:28:45 563  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 564  	  SPROC_NAME, 'Paypal already inactive');
10:28:45 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
10:28:45 566  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
10:28:45 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
10:28:45 569  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
10:28:45 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
10:28:45 572  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
10:28:45 574  WHEN OTHERS THEN
10:28:45 575  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 577  END DISABLE_PAYPAL;
10:28:45 578  
10:28:45 579  /******************************************************************************/
10:28:45 580  
10:28:45 581  PROCEDURE UPDATE_CREDIT_CARD (
10:28:45 582  /*
10:28:45 583  Throws exceptions:
10:28:45 584  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:45 585  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 586  */
10:28:45 587  	in_credit_card_id	  IN NUMBER,
10:28:45 588  	in_updated_by		  IN VARCHAR2,
10:28:45 589  	in_instrument_name	  IN VARCHAR2,
10:28:45 590  	in_is_default		  IN NUMBER
10:28:45 591  ) AS
10:28:45 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
10:28:45 593  -- VARIABLES
10:28:45 594  var_account_id NUMBER;
10:28:45 595  var_group_id   NUMBER;
10:28:45 596  temp_cc_rownum NUMBER;
10:28:45 597  current_def_instrument_type_id NUMBER;
10:28:45 598  current_def_instrument_id      NUMBER;
10:28:45 599  -- EXCEPTION
10:28:45 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
10:28:45 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
10:28:45 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
10:28:45 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
10:28:45 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:28:45 605  BEGIN
10:28:45 606  
10:28:45 607  	-- Get account id
10:28:45 608  	SELECT
10:28:45 609  	  CREDIT_CARD.ACCOUNT_ID
10:28:45 610  	  into
10:28:45 611  	  var_account_id
10:28:45 612  	FROM
10:28:45 613  	  CREDIT_CARD
10:28:45 614  	WHERE
10:28:45 615  	  CREDIT_CARD.ID = in_credit_card_id;
10:28:45 616  
10:28:45 617  	-- Get group id
10:28:45 618  	SELECT
10:28:45 619  	  ACCOUNT.GROUP_ID into var_group_id
10:28:45 620  	FROM
10:28:45 621  	  ACCOUNT
10:28:45 622  	WHERE
10:28:45 623  	  ACCOUNT.ID = var_account_id;
10:28:45 624  
10:28:45 625  	-- Check that passed data is correct
10:28:45 626  	IF in_is_default != GLOBAL_CONSTANTS_V24.TRUE
10:28:45 627  	  AND in_is_default != GLOBAL_CONSTANTS_V24.FALSE
10:28:45 628  	  AND in_is_default IS NOT NULL THEN
10:28:45 629  	  RAISE BAD_IS_DEFAULT_VALUE;
10:28:45 630  	END IF;
10:28:45 631  
10:28:45 632  	-- Update credit card
10:28:45 633  	IF in_instrument_name IS NOT NULL THEN
10:28:45 634  	  PROCS_FIN_INSTRUMENTS_CRU_V24.UPDATE_CREDIT_CARD(
10:28:45 635  	    in_credit_card_id  => in_credit_card_id,
10:28:45 636  	    in_updated_by      => in_updated_by,
10:28:45 637  	    in_instrument_name => in_instrument_name
10:28:45 638  	  );
10:28:45 639  	END IF;
10:28:45 640  
10:28:45 641  	-- Set default financial instrument
10:28:45 642  	IF in_is_default = GLOBAL_CONSTANTS_V24.TRUE THEN
10:28:45 643  	  BEGIN
10:28:45 644  	    PROCS_FIN_INSTRUMENTS_V24.SET_DEF_FINANCIAL_INSTRUMENT(
10:28:45 645  	      in_group_id	    => var_group_id,
10:28:45 646  	      in_instrument_type_id => GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD,
10:28:45 647  	      in_instrument_id	    => in_credit_card_id,
10:28:45 648  	      in_updated_by	    => in_updated_by
10:28:45 649  	    );
10:28:45 650  	    EXCEPTION
10:28:45 651  	      WHEN OTHERS THEN
10:28:45 652  		EXCEPTION_MESSAGE := SQLERRM;
10:28:45 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
10:28:45 654  	  END;
10:28:45 655  	END IF;
10:28:45 656  
10:28:45 657  	-- Set default financial instrument
10:28:45 658  	IF in_is_default = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 659  	  BEGIN
10:28:45 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
10:28:45 661  	      in_group_id	     => var_group_id,
10:28:45 662  	      out_instrument_type_id => current_def_instrument_type_id,
10:28:45 663  	      out_instrument_id      => current_def_instrument_id
10:28:45 664  	    );
10:28:45 665  	  EXCEPTION
10:28:45 666  	    WHEN OTHERS THEN
10:28:45 667  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
10:28:45 669  	  END;
10:28:45 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD
10:28:45 671  	    AND current_def_instrument_id = in_credit_card_id THEN
10:28:45 672  	    BEGIN
10:28:45 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
10:28:45 674  		in_group_id => var_group_id
10:28:45 675  	      );
10:28:45 676  	      EXCEPTION
10:28:45 677  		WHEN OTHERS THEN
10:28:45 678  		  EXCEPTION_MESSAGE := SQLERRM;
10:28:45 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
10:28:45 680  	    END;
10:28:45 681  	  END IF;
10:28:45 682  	END IF;
10:28:45 683  
10:28:45 684  EXCEPTION
10:28:45 685  WHEN NO_DATA_FOUND THEN
10:28:45 686  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 687  	  SPROC_NAME, 'No such credit card');
10:28:45 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
10:28:45 689  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
10:28:45 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
10:28:45 692  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
10:28:45 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
10:28:45 695  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
10:28:45 697  WHEN OTHERS THEN
10:28:45 698  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 700  END UPDATE_CREDIT_CARD;
10:28:45 701  
10:28:45 702  /******************************************************************************/
10:28:45 703  
10:28:45 704  	PROCEDURE START_GC_PURCHASING (
10:28:45 705  	  in_group_id		    IN NUMBER,
10:28:45 706  	  in_offer_chain_id	    IN VARCHAR2,
10:28:45 707  	  in_gift_certificate_code  IN	VARCHAR2,
10:28:45 708  	  in_created_by 	    IN	VARCHAR2,
10:28:45 709  	  in_recipient_name	    IN	VARCHAR2,
10:28:45 710  	  in_recipient_email	    IN	VARCHAR2,
10:28:45 711  	  in_recipient_address_id   IN NUMBER,
10:28:45 712  	  in_recipient_notify_date  IN DATE,
10:28:45 713  	  in_sender_name	    IN VARCHAR2,
10:28:45 714  	  in_sender_email	    IN VARCHAR2,
10:28:45 715  	  in_gift_message	    IN	VARCHAR2,
10:28:45 716  	  in_expiration_date	    IN DATE,
10:28:45 717  	  in_campaign		    IN VARCHAR2,
10:28:45 718  	  in_reference_code	    IN VARCHAR2,
10:28:45 719  	  out_gift_certificate_id   OUT NUMBER,
10:28:45 720  	  out_invoice_id	    OUT NUMBER
10:28:45 721  	) AS
10:28:45 722  	  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
10:28:45 723  -- VARIABLES
10:28:45 724  	  var_account_id	    NUMBER;
10:28:45 725  	  temp_gc_code		    GIFT_CERTIFICATE.CODE%TYPE;
10:28:45 726  	  var_och_is_gc 	    NUMBER;
10:28:45 727  	  var_offer_chain_status_id NUMBER;
10:28:45 728  	  var_is_for_redemption     NUMBER;
10:28:45 729  	  var_new_invoice_id	    NUMBER;
10:28:45 730  	  var_gift_cert_id	    NUMBER;
10:28:45 731  	  var_account_tax_exempt_id VARCHAR2(255);
10:28:45 732  -- EXCEPTIONS
10:28:45 733  	    BAD_GROUP_ID		  EXCEPTION;
10:28:45 734  	    GC_CODE_ALREADY_EXISTS	  EXCEPTION;
10:28:45 735  	    BAD_OFFER_CHAIN_ID		  EXCEPTION;
10:28:45 736  	    OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
10:28:45 737  	    BAD_OFFER_CHAIN_STATUS	  EXCEPTION;
10:28:45 738  	    CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
10:28:45 739  	    CAN_NOT_CREATE_INVOICE	  EXCEPTION;
10:28:45 740  	    OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
10:28:45 741  	    CAN_NOT_CREATE_LINE_ITEMS	  EXCEPTION;
10:28:45 742  	    REF_CODE_ALREADY_EXISTS	  EXCEPTION;
10:28:45 743  
10:28:45 744  	  EXCEPTION_MESSAGE VARCHAR2(1024);
10:28:45 745  	  BEGIN
10:28:45 746  -- Get account id
10:28:45 747  	    BEGIN
10:28:45 748  	      SELECT
10:28:45 749  		ACCOUNT.ID,
10:28:45 750  		ACCOUNT.TAX_EXEMPT_ID
10:28:45 751  	      into
10:28:45 752  		var_account_id,
10:28:45 753  		var_account_tax_exempt_id
10:28:45 754  	      FROM
10:28:45 755  		ACCOUNT
10:28:45 756  	      WHERE
10:28:45 757  		ACCOUNT.GROUP_ID = in_group_id;
10:28:45 758  	      EXCEPTION
10:28:45 759  	      WHEN NO_DATA_FOUND THEN
10:28:45 760  	      RAISE BAD_GROUP_ID;
10:28:45 761  	    END;
10:28:45 762  
10:28:45 763  -- Check for the same code
10:28:45 764  	    BEGIN
10:28:45 765  	      SELECT
10:28:45 766  		GIFT_CERTIFICATE.CODE into temp_gc_code
10:28:45 767  	      FROM
10:28:45 768  		GIFT_CERTIFICATE
10:28:45 769  	      WHERE
10:28:45 770  		GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
10:28:45 771  
10:28:45 772  	      RAISE GC_CODE_ALREADY_EXISTS;
10:28:45 773  
10:28:45 774  	      EXCEPTION
10:28:45 775  	      WHEN NO_DATA_FOUND THEN
10:28:45 776  	      NULL;
10:28:45 777  	    END;
10:28:45 778  
10:28:45 779  -- Get offer chain flag "is_gift_certificate"
10:28:45 780  	    BEGIN
10:28:45 781  	      SELECT
10:28:45 782  		OFFER_CHAIN.IS_GIFT_CERTIFICATE,
10:28:45 783  		OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
10:28:45 784  	      into
10:28:45 785  		var_och_is_gc,
10:28:45 786  		var_offer_chain_status_id
10:28:45 787  	      FROM
10:28:45 788  		OFFER_CHAIN
10:28:45 789  	      WHERE
10:28:45 790  		OFFER_CHAIN.ID = in_offer_chain_id;
10:28:45 791  	      EXCEPTION
10:28:45 792  	      WHEN NO_DATA_FOUND THEN
10:28:45 793  	      RAISE BAD_OFFER_CHAIN_ID;
10:28:45 794  	    END;
10:28:45 795  
10:28:45 796  	    IF var_och_is_gc != GLOBAL_CONSTANTS_V24.TRUE
10:28:45 797  	       OR var_och_is_gc IS NULL THEN
10:28:45 798  	      RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
10:28:45 799  	    END IF;
10:28:45 800  
10:28:45 801  	    IF var_offer_chain_status_id != GLOBAL_STATUSES_V24.OFFER_CHAIN_ACTIVE THEN
10:28:45 802  	      RAISE BAD_OFFER_CHAIN_STATUS;
10:28:45 803  	    END IF;
10:28:45 804  
10:28:45 805  -- norlov: #38151 check if the OC is for Redemption:
10:28:45 806  	    SELECT
10:28:45 807  	      COUNT(*) into var_is_for_redemption
10:28:45 808  	    FROM
10:28:45 809  	      OFFER_CHAIN_ELIGIBILITY
10:28:45 810  	    WHERE
10:28:45 811  	      OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:28:45 812  	      AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V24.GIFT_CERTIFICATE_REQUIRED
10:28:45 813  	      AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V24.ELIGIBILITY_FLAG_SET;
10:28:45 814  
10:28:45 815  	    IF var_is_for_redemption > 0 THEN
10:28:45 816  	      RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
10:28:45 817  	    END IF;
10:28:45 818  
10:28:45 819  -- Create new invoice
10:28:45 820  	    BEGIN
10:28:45 821  	      PROCS_INVOICE_V24.CREATE_INVOICE(
10:28:45 822  		  in_invoice_status => GLOBAL_STATUSES_V24.INVOICE_OPEN,
10:28:45 823  		  in_created_by     => in_created_by,
10:28:45 824  		  in_tax_exempt_id  => var_account_tax_exempt_id,
10:28:45 825  		  out_invoice_id    => var_new_invoice_id
10:28:45 826  	      );
10:28:45 827  	      EXCEPTION
10:28:45 828  	      WHEN OTHERS THEN
10:28:45 829  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 830  	      RAISE CAN_NOT_CREATE_INVOICE;
10:28:45 831  	    END;
10:28:45 832  
10:28:45 833  -- Add line items for new invoice
10:28:45 834  	    BEGIN
10:28:45 835  	      FOR f_offer_data IN (
10:28:45 836  	      SELECT
10:28:45 837  		OFFER_ID,
10:28:45 838  		NUM_RECURRENCES
10:28:45 839  	      FROM
10:28:45 840  		OFFER_OFFER_CHAIN
10:28:45 841  	      WHERE
10:28:45 842  		OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:45 843  	      )
10:28:45 844  	      LOOP
10:28:45 845  	      IF f_offer_data.NUM_RECURRENCES < 1 THEN
10:28:45 846  		RAISE OFFER_REC_NUM_LESS_THAN_ONE;
10:28:45 847  	      END IF;
10:28:45 848  	      FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
10:28:45 849  	      LOOP
10:28:45 850  		PROCS_LINE_ITEMS_V24.ADD_LINE_ITEMS(
10:28:45 851  		    in_invoice_id => var_new_invoice_id,
10:28:45 852  		    in_offer_id   => f_offer_data.OFFER_ID,
10:28:45 853  		    in_created_by => in_created_by
10:28:45 854  		);
10:28:45 855  	      END LOOP;
10:28:45 856  	      END LOOP;
10:28:45 857  
10:28:45 858  	      EXCEPTION
10:28:45 859  	      WHEN OTHERS THEN
10:28:45 860  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 861  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
10:28:45 862  	    END;
10:28:45 863  
10:28:45 864  	    BEGIN
10:28:45 865  	      PROCS_FIN_INSTRUMENTS_CRU_V24.CREATE_GIFT_CERTIFICATE(
10:28:45 866  		  out_gift_certificate_id	=> var_gift_cert_id,
10:28:45 867  		  in_purchaser_group_id 	=> in_group_id,
10:28:45 868  		  in_purchaser_invoice_id	=> var_new_invoice_id,
10:28:45 869  		  in_offer_chain_id		=> in_offer_chain_id,
10:28:45 870  		  in_expiration_date		=> in_expiration_date,
10:28:45 871  		  in_purchase_date		=> SYSDATE,
10:28:45 872  		  in_gift_certificate_status_id => GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_ACTIVE,
10:28:45 873  		  in_code			=> in_gift_certificate_code,
10:28:45 874  		  in_created_by 		=> in_created_by,
10:28:45 875  		  in_recipient_name		=> in_recipient_name,
10:28:45 876  		  in_gift_message		=> in_gift_message,
10:28:45 877  		  in_recipient_email		=> in_recipient_email,
10:28:45 878  		  in_sender_email		=> in_sender_email,
10:28:45 879  		  in_sender_name		=> in_sender_name,
10:28:45 880  		  in_recipient_address_id	=> in_recipient_address_id,
10:28:45 881  		  in_recipient_notify_date	=> in_recipient_notify_date,
10:28:45 882  		  in_campaign			=> in_campaign,
10:28:45 883  		  in_reference_code		=> in_reference_code
10:28:45 884  	      );
10:28:45 885  	      EXCEPTION WHEN DUP_VAL_ON_INDEX THEN RAISE REF_CODE_ALREADY_EXISTS;
10:28:45 886  	    END;
10:28:45 887  
10:28:45 888  	    out_gift_certificate_id := var_gift_cert_id;
10:28:45 889  	    out_invoice_id := var_new_invoice_id;
10:28:45 890  
10:28:45 891  	    EXCEPTION
10:28:45 892  	    WHEN BAD_OFFER_CHAIN_STATUS THEN
10:28:45 893  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 894  					     SPROC_NAME, 'Offer chain is not active');
10:28:45 895  	    WHEN GC_CODE_ALREADY_EXISTS THEN
10:28:45 896  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:45 897  					     SPROC_NAME, 'Gift certificate with same code already exists');
10:28:45 898  	    WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
10:28:45 899  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 900  					     SPROC_NAME, 'This offer chain can not be used for gift certificate');
10:28:45 901  	    WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
10:28:45 902  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 903  					     SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
10:28:45 904  	    WHEN CAN_NOT_CREATE_INVOICE THEN
10:28:45 905  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 906  					     SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
10:28:45 907  	    WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
10:28:45 908  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 909  					     SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
10:28:45 910  	    WHEN BAD_GROUP_ID THEN
10:28:45 911  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 912  					     SPROC_NAME, 'No such group id');
10:28:45 913  	    WHEN BAD_OFFER_CHAIN_ID THEN
10:28:45 914  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 915  					     SPROC_NAME, 'No such offer chain');
10:28:45 916  	    WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
10:28:45 917  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 918  					     SPROC_NAME, 'Some offer has recurrences number less than 1');
10:28:45 919  	    WHEN REF_CODE_ALREADY_EXISTS THEN
10:28:45 920  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 921  					     SPROC_NAME, 'reference_code already used');
10:28:45 922  	    WHEN OTHERS THEN
10:28:45 923  	    PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 924  					     SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 925  	  END START_GC_PURCHASING;
10:28:45 926  /******************************************************************************/
10:28:45 927  
10:28:45 928  	PROCEDURE FINALIZE_GC_PURCHASING (
10:28:45 929  	  in_invoice_id 	IN NUMBER,
10:28:45 930  	  in_created_by 	IN VARCHAR2,
10:28:45 931  	  in_instrument_id	IN NUMBER,
10:28:45 932  	  in_instrument_type_id IN NUMBER,
10:28:45 933  	  in_order_id		IN VARCHAR2,
10:28:45 934  	  in_transaction_id	IN NUMBER,
10:28:45 935  	  out_charge_amount	OUT NUMBER
10:28:45 936  	) AS
10:28:45 937  	  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
10:28:45 938  -- VARIABLES
10:28:45 939  	  temp_transaction_id_count NUMBER;
10:28:45 940  	  var_invoice_amount	    NUMBER(10,2);
10:28:45 941  	  var_transaction_id	    NUMBER;
10:28:45 942  	  var_new_charge_id	    NUMBER;
10:28:45 943  -- EXCEPTIONS
10:28:45 944  	    BAD_CREDIT_CARD_ID		EXCEPTION;
10:28:45 945  	    BAD_PAYPAL_ID		EXCEPTION;
10:28:45 946  	    BAD_INSTRUMENT_TYPE 	EXCEPTION;
10:28:45 947  	    TRANSACTION_EXISTS		EXCEPTION;
10:28:45 948  	    CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
10:28:45 949  	    CAN_NOT_USE_FCINSTR 	EXCEPTION;
10:28:45 950  	    CAN_NOT_CREATE_TRANSACTION	EXCEPTION;
10:28:45 951  	    CAN_NOT_CREATE_CHARGE	EXCEPTION;
10:28:45 952  	  EXCEPTION_MESSAGE   VARCHAR2(1024);
10:28:45 953  	  BEGIN
10:28:45 954  
10:28:45 955  -- Check that instrument exists
10:28:45 956  	    IF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD THEN
10:28:45 957  	      IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 958  		RAISE BAD_CREDIT_CARD_ID;
10:28:45 959  	      END IF;
10:28:45 960  	    ELSIF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL THEN
10:28:45 961  	      IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 962  		RAISE BAD_PAYPAL_ID;
10:28:45 963  	      END IF;
10:28:45 964  	    ELSIF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_ZCI_INSTRUMENT THEN
10:28:45 965  	      NULL;
10:28:45 966  	    ELSE
10:28:45 967  	      RAISE BAD_INSTRUMENT_TYPE;
10:28:45 968  	    END IF;
10:28:45 969  
10:28:45 970  -- Check that transaction with given id do not exists
10:28:45 971  	    SELECT
10:28:45 972  	      COUNT(*) into temp_transaction_id_count
10:28:45 973  	    FROM
10:28:45 974  	      TRANSACTION
10:28:45 975  	    WHERE
10:28:45 976  	      TRANSACTION.ID = in_transaction_id;
10:28:45 977  
10:28:45 978  	    IF temp_transaction_id_count > 0 THEN
10:28:45 979  	      RAISE TRANSACTION_EXISTS;
10:28:45 980  	    END IF;
10:28:45 981  
10:28:45 982  -- Calculate new invoice amount
10:28:45 983  	    BEGIN
10:28:45 984  	      PROCS_INVOICE_V24.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
10:28:45 985  	      EXCEPTION
10:28:45 986  	      WHEN OTHERS THEN
10:28:45 987  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:45 988  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:28:45 989  	    END;
10:28:45 990  
10:28:45 991  	    IF var_invoice_amount > 0
10:28:45 992  	       AND in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_ZCI_INSTRUMENT THEN
10:28:45 993  	      RAISE CAN_NOT_USE_FCINSTR;
10:28:45 994  	    END IF;
10:28:45 995  
10:28:45 996  -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
10:28:45 997  	    IF var_invoice_amount = 0 THEN
10:28:45 998  	      PROCS_INVOICE_CRU_V24.UPDATE_INVOICE(
10:28:45 999  		  in_invoice_id 		 => in_invoice_id,
10:28:45 1000  		   in_updated_by		  => in_created_by,
10:28:45 1001  		   in_invoice_status_id 	  => GLOBAL_STATUSES_V24.INVOICE_CLOSED
10:28:45 1002  	       );
10:28:45 1003  	     END IF;
10:28:45 1004  
10:28:45 1005  	     IF var_invoice_amount > 0 THEN
10:28:45 1006  -- Create transaction
10:28:45 1007  	       BEGIN
10:28:45 1008  		 PROCS_TRANSACTION_V24.CREATE_TRANSACTION(
10:28:45 1009  		     in_transaction_id	      => in_transaction_id,
10:28:45 1010  		     in_status_id	      => GLOBAL_STATUSES_V24.TRANSACTION_PENDING,
10:28:45 1011  		     in_amount		      => var_invoice_amount,
10:28:45 1012  		     in_created_by	      => in_created_by,
10:28:45 1013  		     in_order_id	      => in_order_id,
10:28:45 1014  		     in_transaction_type_code => 'GIFT_CERTIFICATE_PURCHASE',
10:28:45 1015  		     out_transaction_id       => var_transaction_id
10:28:45 1016  		 );
10:28:45 1017  		 EXCEPTION
10:28:45 1018  		 WHEN OTHERS THEN
10:28:45 1019  		 EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1020  		 RAISE CAN_NOT_CREATE_TRANSACTION;
10:28:45 1021  	       END;
10:28:45 1022  
10:28:45 1023  -- Create charge
10:28:45 1024  	       BEGIN
10:28:45 1025  		 PROCS_CHARGE_V24.CREATE_CHARGE(
10:28:45 1026  		     in_invoice_id	   => in_invoice_id,
10:28:45 1027  		     in_transaction_id	   => var_transaction_id,
10:28:45 1028  		     in_instrument_type_id => in_instrument_type_id,
10:28:45 1029  		     in_instrument_id	   => in_instrument_id,
10:28:45 1030  		     in_charge_amount	   => var_invoice_amount,
10:28:45 1031  		     in_created_by	   => in_created_by,
10:28:45 1032  		     in_charge_status_id   => GLOBAL_STATUSES_V24.CHARGE_OPENED,
10:28:45 1033  		     out_charge_id	   => var_new_charge_id
10:28:45 1034  		 );
10:28:45 1035  		 out_charge_amount := var_invoice_amount;
10:28:45 1036  		 EXCEPTION
10:28:45 1037  		 WHEN OTHERS THEN
10:28:45 1038  		 EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1039  		 RAISE CAN_NOT_CREATE_CHARGE;
10:28:45 1040  	       END;
10:28:45 1041  	     ELSE
10:28:45 1042  	       out_charge_amount := 0;
10:28:45 1043  	     END IF;
10:28:45 1044  
10:28:45 1045  	     EXCEPTION
10:28:45 1046  	     WHEN CAN_NOT_USE_FCINSTR THEN
10:28:45 1047  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1048  					      SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
10:28:45 1049  	     WHEN BAD_CREDIT_CARD_ID THEN
10:28:45 1050  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1051  					      SPROC_NAME, 'Bad credit card id');
10:28:45 1052  	     WHEN BAD_PAYPAL_ID THEN
10:28:45 1053  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1054  					      SPROC_NAME, 'Bad paypal id');
10:28:45 1055  	     WHEN BAD_INSTRUMENT_TYPE THEN
10:28:45 1056  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 1057  					      SPROC_NAME, 'Bad instrument type');
10:28:45 1058  	     WHEN TRANSACTION_EXISTS THEN
10:28:45 1059  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:45 1060  					      SPROC_NAME, 'Transaction with given id already exists');
10:28:45 1061  	     WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:28:45 1062  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1063  					      SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:28:45 1064  	     WHEN CAN_NOT_CREATE_CHARGE THEN
10:28:45 1065  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1066  					      SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:28:45 1067  	     WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:28:45 1068  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1069  					      SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
10:28:45 1070  	     WHEN OTHERS THEN
10:28:45 1071  	     PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1072  					      SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1073  	   END FINALIZE_GC_PURCHASING;
10:28:45 1074  
10:28:45 1075  /******************************************************************************/
10:28:45 1076  
10:28:45 1077  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
10:28:45 1078  	 in_group_id		   IN NUMBER,
10:28:45 1079  	 in_offer_chain_id	   IN VARCHAR2,
10:28:45 1080  	 in_gift_certificate_code  IN VARCHAR2,
10:28:45 1081  	 in_created_by		   IN VARCHAR2,
10:28:45 1082  	 in_recipient_name	   IN VARCHAR2,
10:28:45 1083  	 in_recipient_email	   IN VARCHAR2,
10:28:45 1084  	 in_sender_name 	   IN VARCHAR2,
10:28:45 1085  	 in_sender_email	   IN VARCHAR2,
10:28:45 1086  	 in_gift_message	   IN VARCHAR2,
10:28:45 1087  	 in_instrument_id	   IN NUMBER,
10:28:45 1088  	 in_instrument_type_id	   IN NUMBER,
10:28:45 1089  	 in_expiration_date	   IN DATE,
10:28:45 1090  	 in_order_id		   IN VARCHAR2,
10:28:45 1091  	 in_transaction_id	   IN NUMBER
10:28:45 1092  ) AS
10:28:45 1093  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
10:28:45 1094  -- VARIABLES
10:28:45 1095  var_gift_cert_id   NUMBER;
10:28:45 1096  var_account_id	  NUMBER;
10:28:45 1097  var_invoice_amount NUMBER (10,2);
10:28:45 1098  var_new_invoice_id NUMBER;
10:28:45 1099  var_new_charge_id  NUMBER;
10:28:45 1100  var_och_is_gc	  NUMBER;
10:28:45 1101  var_offer_chain_status_id NUMBER;
10:28:45 1102  var_is_for_redemption	 NUMBER;
10:28:45 1103  var_account_tax_exempt_id VARCHAR2(255);
10:28:45 1104  
10:28:45 1105  temp_transaction_id_count NUMBER;
10:28:45 1106  var_transaction_id	 NUMBER;
10:28:45 1107  temp_gc_code VARCHAR2(255);
10:28:45 1108  
10:28:45 1109  var_invoice_status_id NUMBER;
10:28:45 1110  -- EXCEPTIONS
10:28:45 1111  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
10:28:45 1112  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
10:28:45 1113  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
10:28:45 1114  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
10:28:45 1115  BAD_GROUP_ID			   EXCEPTION;
10:28:45 1116  BAD_OFFER_CHAIN_ID		   EXCEPTION;
10:28:45 1117  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
10:28:45 1118  TRANSACTION_EXISTS		   EXCEPTION;
10:28:45 1119  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
10:28:45 1120  BAD_INSTRUMENT_TYPE		   EXCEPTION;
10:28:45 1121  BAD_CREDIT_CARD_ID		   EXCEPTION;
10:28:45 1122  BAD_PAYPAL_ID			   EXCEPTION;
10:28:45 1123  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
10:28:45 1124  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
10:28:45 1125  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
10:28:45 1126  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
10:28:45 1127  CAN_NOT_USE_FCINSTR		   EXCEPTION;
10:28:45 1128  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
10:28:45 1129  EXCEPTION_MESSAGE		   VARCHAR2(1024);
10:28:45 1130  BEGIN
10:28:45 1131  
10:28:45 1132  	 -- Get account id
10:28:45 1133  	 BEGIN
10:28:45 1134  	   SELECT
10:28:45 1135  	     ACCOUNT.ID,
10:28:45 1136  	     ACCOUNT.TAX_EXEMPT_ID
10:28:45 1137  	     into
10:28:45 1138  	     var_account_id,
10:28:45 1139  	     var_account_tax_exempt_id
10:28:45 1140  	   FROM
10:28:45 1141  	     ACCOUNT
10:28:45 1142  	   WHERE
10:28:45 1143  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:45 1144  	   EXCEPTION
10:28:45 1145  	   WHEN NO_DATA_FOUND THEN
10:28:45 1146  	     RAISE BAD_GROUP_ID;
10:28:45 1147  	 END;
10:28:45 1148  
10:28:45 1149  	 -- Check that instrument exists
10:28:45 1150  	 IF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD THEN
10:28:45 1151  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 1152  	     RAISE BAD_CREDIT_CARD_ID;
10:28:45 1153  	   END IF;
10:28:45 1154  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL THEN
10:28:45 1155  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 1156  	     RAISE BAD_PAYPAL_ID;
10:28:45 1157  	   END IF;
10:28:45 1158  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_ZCI_INSTRUMENT THEN
10:28:45 1159  	   NULL;
10:28:45 1160  	 ELSE
10:28:45 1161  	   RAISE BAD_INSTRUMENT_TYPE;
10:28:45 1162  	 END IF;
10:28:45 1163  
10:28:45 1164  	 -- Check for the same code
10:28:45 1165  	 BEGIN
10:28:45 1166  	   SELECT
10:28:45 1167  	     GIFT_CERTIFICATE.CODE into temp_gc_code
10:28:45 1168  	   FROM
10:28:45 1169  	     GIFT_CERTIFICATE
10:28:45 1170  	   WHERE
10:28:45 1171  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
10:28:45 1172  
10:28:45 1173  	   RAISE GC_CODE_ALREADY_EXISTS;
10:28:45 1174  
10:28:45 1175  	   EXCEPTION
10:28:45 1176  	     WHEN NO_DATA_FOUND THEN
10:28:45 1177  	       NULL;
10:28:45 1178  	 END;
10:28:45 1179  
10:28:45 1180  	 -- Get offer chain flag "is_gift_certificate"
10:28:45 1181  	 BEGIN
10:28:45 1182  	   SELECT
10:28:45 1183  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
10:28:45 1184  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
10:28:45 1185  	     into
10:28:45 1186  	     var_och_is_gc,
10:28:45 1187  	     var_offer_chain_status_id
10:28:45 1188  	   FROM
10:28:45 1189  	     OFFER_CHAIN
10:28:45 1190  	   WHERE
10:28:45 1191  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:28:45 1192  	   EXCEPTION
10:28:45 1193  	   WHEN NO_DATA_FOUND THEN
10:28:45 1194  	     RAISE BAD_OFFER_CHAIN_ID;
10:28:45 1195  	 END;
10:28:45 1196  
10:28:45 1197  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V24.TRUE
10:28:45 1198  	   OR var_och_is_gc IS NULL THEN
10:28:45 1199  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
10:28:45 1200  	 END IF;
10:28:45 1201  
10:28:45 1202  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V24.OFFER_CHAIN_ACTIVE THEN
10:28:45 1203  	   RAISE BAD_OFFER_CHAIN_STATUS;
10:28:45 1204  	 END IF;
10:28:45 1205  
10:28:45 1206  	 -- norlov: #38151 check if the OC is for Redemption:
10:28:45 1207  	 SELECT
10:28:45 1208  	   COUNT(*) into var_is_for_redemption
10:28:45 1209  	 FROM
10:28:45 1210  	   OFFER_CHAIN_ELIGIBILITY
10:28:45 1211  	 WHERE
10:28:45 1212  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:28:45 1213  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V24.GIFT_CERTIFICATE_REQUIRED
10:28:45 1214  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V24.ELIGIBILITY_FLAG_SET;
10:28:45 1215  
10:28:45 1216  	 IF var_is_for_redemption > 0 THEN
10:28:45 1217  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
10:28:45 1218  	 END IF;
10:28:45 1219  
10:28:45 1220  	 -- Check that transaction with given id do not exists
10:28:45 1221  	 SELECT
10:28:45 1222  	   COUNT(*) into temp_transaction_id_count
10:28:45 1223  	 FROM
10:28:45 1224  	   TRANSACTION
10:28:45 1225  	 WHERE
10:28:45 1226  	   TRANSACTION.ID = in_transaction_id;
10:28:45 1227  
10:28:45 1228  	 IF temp_transaction_id_count > 0 THEN
10:28:45 1229  	   RAISE TRANSACTION_EXISTS;
10:28:45 1230  	 END IF;
10:28:45 1231  
10:28:45 1232  	 -- Create new invoice
10:28:45 1233  	 BEGIN
10:28:45 1234  	   PROCS_INVOICE_V24.CREATE_INVOICE(
10:28:45 1235  	     in_invoice_status => GLOBAL_STATUSES_V24.INVOICE_OPEN,
10:28:45 1236  	     in_created_by     => in_created_by,
10:28:45 1237  	     in_tax_exempt_id  => var_account_tax_exempt_id,
10:28:45 1238  	     out_invoice_id    => var_new_invoice_id
10:28:45 1239  	   );
10:28:45 1240  	   EXCEPTION
10:28:45 1241  	     WHEN OTHERS THEN
10:28:45 1242  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1243  	       RAISE CAN_NOT_CREATE_INVOICE;
10:28:45 1244  	 END;
10:28:45 1245  
10:28:45 1246  	 -- Add line items for new invoice
10:28:45 1247  	 BEGIN
10:28:45 1248  	   FOR f_offer_data IN (
10:28:45 1249  	     SELECT
10:28:45 1250  	       OFFER_ID,
10:28:45 1251  	       NUM_RECURRENCES
10:28:45 1252  	     FROM
10:28:45 1253  	       OFFER_OFFER_CHAIN
10:28:45 1254  	     WHERE
10:28:45 1255  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:28:45 1256  	   )
10:28:45 1257  	   LOOP
10:28:45 1258  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
10:28:45 1259  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
10:28:45 1260  	     END IF;
10:28:45 1261  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
10:28:45 1262  	     LOOP
10:28:45 1263  	       PROCS_LINE_ITEMS_V24.ADD_LINE_ITEMS(
10:28:45 1264  		 in_invoice_id => var_new_invoice_id,
10:28:45 1265  		 in_offer_id   => f_offer_data.OFFER_ID,
10:28:45 1266  		 in_created_by => in_created_by
10:28:45 1267  	       );
10:28:45 1268  	     END LOOP;
10:28:45 1269  	   END LOOP;
10:28:45 1270  
10:28:45 1271  	   EXCEPTION
10:28:45 1272  	     WHEN OTHERS THEN
10:28:45 1273  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1274  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
10:28:45 1275  	 END;
10:28:45 1276  
10:28:45 1277  	 -- Calculate new invoice amount
10:28:45 1278  	 BEGIN
10:28:45 1279  	   PROCS_INVOICE_V24.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
10:28:45 1280  	   EXCEPTION
10:28:45 1281  	     WHEN OTHERS THEN
10:28:45 1282  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1283  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:28:45 1284  	 END;
10:28:45 1285  
10:28:45 1286  	 IF var_invoice_amount > 0
10:28:45 1287  	   AND in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_ZCI_INSTRUMENT THEN
10:28:45 1288  	   RAISE CAN_NOT_USE_FCINSTR;
10:28:45 1289  	 END IF;
10:28:45 1290  
10:28:45 1291  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
10:28:45 1292  	 IF var_invoice_amount = 0 THEN
10:28:45 1293  	   PROCS_INVOICE_CRU_V24.UPDATE_INVOICE(
10:28:45 1294  	     in_invoice_id		    => var_new_invoice_id,
10:28:45 1295  	     in_updated_by		    => in_created_by,
10:28:45 1296  	     in_invoice_status_id	    => GLOBAL_STATUSES_V24.INVOICE_CLOSED
10:28:45 1297  	   );
10:28:45 1298  	 END IF;
10:28:45 1299  
10:28:45 1300  	 IF var_invoice_amount > 0 THEN
10:28:45 1301  	   -- Create transaction
10:28:45 1302  	   BEGIN
10:28:45 1303  	     PROCS_TRANSACTION_V24.CREATE_TRANSACTION(
10:28:45 1304  	       in_transaction_id  => in_transaction_id,
10:28:45 1305  	       in_status_id	  => GLOBAL_STATUSES_V24.TRANSACTION_PENDING,
10:28:45 1306  	       in_amount	  => var_invoice_amount,
10:28:45 1307  	       in_created_by	  => in_created_by,
10:28:45 1308  	       in_order_id	  => in_order_id,
10:28:45 1309  	       out_transaction_id => var_transaction_id
10:28:45 1310  	     );
10:28:45 1311  	     EXCEPTION
10:28:45 1312  	       WHEN OTHERS THEN
10:28:45 1313  		 EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1314  		 RAISE CAN_NOT_CREATE_TRANSACTION;
10:28:45 1315  	   END;
10:28:45 1316  
10:28:45 1317  	   -- Create charge
10:28:45 1318  	   BEGIN
10:28:45 1319  	     PROCS_CHARGE_V24.CREATE_CHARGE(
10:28:45 1320  	       in_invoice_id	     => var_new_invoice_id,
10:28:45 1321  	       in_transaction_id     => var_transaction_id,
10:28:45 1322  	       in_instrument_type_id => in_instrument_type_id,
10:28:45 1323  	       in_instrument_id      => in_instrument_id,
10:28:45 1324  	       in_charge_amount      => var_invoice_amount,
10:28:45 1325  	       in_created_by	     => in_created_by,
10:28:45 1326  	       in_charge_status_id   => GLOBAL_STATUSES_V24.CHARGE_OPENED,
10:28:45 1327  	       out_charge_id	     => var_new_charge_id
10:28:45 1328  	     );
10:28:45 1329  	     EXCEPTION
10:28:45 1330  	       WHEN OTHERS THEN
10:28:45 1331  		 EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1332  		 RAISE CAN_NOT_CREATE_CHARGE;
10:28:45 1333  	   END;
10:28:45 1334  	 END IF;
10:28:45 1335  
10:28:45 1336  	 -- Create new row in GIFT_CERTIFICATE table
10:28:45 1337  	 PROCS_FIN_INSTRUMENTS_CRU_V24.CREATE_GIFT_CERTIFICATE(
10:28:45 1338  	   out_gift_certificate_id	 => var_gift_cert_id,
10:28:45 1339  	   in_purchaser_group_id	 => in_group_id,
10:28:45 1340  	   in_purchaser_invoice_id	 => var_new_invoice_id,
10:28:45 1341  	   in_offer_chain_id		 => in_offer_chain_id,
10:28:45 1342  	   in_expiration_date		 => in_expiration_date,
10:28:45 1343  	   in_purchase_date		 => SYSDATE,
10:28:45 1344  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_ACTIVE,
10:28:45 1345  	   in_code			 => in_gift_certificate_code,
10:28:45 1346  	   in_created_by		 => in_created_by,
10:28:45 1347  	   in_recipient_name		 => in_recipient_name,
10:28:45 1348  	   in_gift_message		 => in_gift_message,
10:28:45 1349  	   in_recipient_email		 => in_recipient_email,
10:28:45 1350  	   in_sender_email		 => in_sender_email,
10:28:45 1351  	   in_sender_name		 => in_sender_name
10:28:45 1352  	 );
10:28:45 1353  
10:28:45 1354  EXCEPTION
10:28:45 1355  WHEN CAN_NOT_USE_FCINSTR THEN
10:28:45 1356  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1357  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
10:28:45 1358  WHEN BAD_OFFER_CHAIN_STATUS THEN
10:28:45 1359  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1360  	   SPROC_NAME, 'Offer chain is not active');
10:28:45 1361  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
10:28:45 1362  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1363  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
10:28:45 1364  WHEN BAD_CREDIT_CARD_ID THEN
10:28:45 1365  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1366  	   SPROC_NAME, 'Bad credit card id');
10:28:45 1367  WHEN BAD_PAYPAL_ID THEN
10:28:45 1368  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1369  	   SPROC_NAME, 'Bad paypal id');
10:28:45 1370  WHEN BAD_INSTRUMENT_TYPE THEN
10:28:45 1371  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 1372  	   SPROC_NAME, 'Bad instrument type');
10:28:45 1373  WHEN GC_CODE_ALREADY_EXISTS THEN
10:28:45 1374  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:45 1375  	   SPROC_NAME, 'Gift certificate with same code already exists');
10:28:45 1376  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
10:28:45 1377  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 1378  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
10:28:45 1379  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
10:28:45 1380  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 1381  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
10:28:45 1382  WHEN TRANSACTION_EXISTS THEN
10:28:45 1383  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR,
10:28:45 1384  	   SPROC_NAME, 'Transaction with given id already exists');
10:28:45 1385  WHEN CAN_NOT_CREATE_INVOICE THEN
10:28:45 1386  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1387  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
10:28:45 1388  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:28:45 1389  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1390  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:28:45 1391  WHEN CAN_NOT_CREATE_CHARGE THEN
10:28:45 1392  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1393  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:28:45 1394  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
10:28:45 1395  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1396  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
10:28:45 1397  WHEN BAD_GROUP_ID THEN
10:28:45 1398  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1399  	   SPROC_NAME, 'No such group id');
10:28:45 1400  WHEN BAD_OFFER_CHAIN_ID THEN
10:28:45 1401  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1402  	   SPROC_NAME, 'No such offer chain');
10:28:45 1403  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
10:28:45 1404  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1405  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
10:28:45 1406  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:28:45 1407  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1408  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
10:28:45 1409  WHEN OTHERS THEN
10:28:45 1410  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1411  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1412  END PURCHASE_GIFT_CERTIFICATE;
10:28:45 1413  
10:28:45 1414  /******************************************************************************/
10:28:45 1415  
10:28:45 1416  PROCEDURE REDEEM_GIFT_CERTIFICATE (
10:28:45 1417  	 in_group_id			 IN NUMBER,
10:28:45 1418  	 in_gift_certificate_code	 IN VARCHAR2,
10:28:45 1419  	 in_created_by			 IN VARCHAR2,
10:28:45 1420  	 in_redeemer_address_id 	 IN NUMBER,
10:28:45 1421  	 in_fin_instrument_id		 IN NUMBER,
10:28:45 1422  	 in_fin_instrument_type_id	 IN NUMBER,
10:28:45 1423  	 in_redemption_offer_chain_id	 IN NUMBER,
10:28:45 1424  	 out_subscription_id		 OUT NUMBER,
10:28:45 1425  	 out_license_id 		 OUT NUMBER
10:28:45 1426  ) AS
10:28:45 1427  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
10:28:45 1428  -- VARIABLES
10:28:45 1429  var_gift_certificate_id NUMBER;
10:28:45 1430  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
10:28:45 1431  var_purchased_oc_id     NUMBER;
10:28:45 1432  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
10:28:45 1433  var_offer_duration      VARCHAR2(30);
10:28:45 1434  var_invoice_id	       NUMBER;
10:28:45 1435  var_succ_purch_attempts_num NUMBER;
10:28:45 1436  var_subscription_id     NUMBER;
10:28:45 1437  var_license_id	       NUMBER;
10:28:45 1438  var_account_id	       NUMBER;
10:28:45 1439  var_gc_status_id        NUMBER;
10:28:45 1440  var_gc_charges_amount   NUMBER;
10:28:45 1441  var_gc_expiration_date  DATE;
10:28:45 1442  var_gc_redeemer_group_id NUMBER;
10:28:45 1443  var_gc_purchase_invoice_id NUMBER;
10:28:45 1444  var_gc_purchase_inv_status_id NUMBER;
10:28:45 1445  var_offer_index		     NUMBER;
10:28:45 1446  var_purchaser_group_id	     NUMBER;
10:28:45 1447  temp_license_id		     NUMBER;
10:28:45 1448  var_same_offer_chains_num     NUMBER;
10:28:45 1449  var_max_concurrent_subscrs    NUMBER;
10:28:45 1450  var_account_tax_exempt_id     VARCHAR2(255);
10:28:45 1451  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
10:28:45 1452  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
10:28:45 1453  var_first_offer_id	  NUMBER;
10:28:45 1454  var_date 	     DATE := SYSDATE;
10:28:45 1455  
10:28:45 1456  var_offers SYS_REFCURSOR;
10:28:45 1457  
10:28:45 1458  -- EXCEPTIONS
10:28:45 1459  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
10:28:45 1460  BAD_GROUP_ID		      EXCEPTION;
10:28:45 1461  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
10:28:45 1462  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
10:28:45 1463  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
10:28:45 1464  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
10:28:45 1465  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
10:28:45 1466  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
10:28:45 1467  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
10:28:45 1468  LIMIT_REACHED		      EXCEPTION;
10:28:45 1469  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
10:28:45 1470  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
10:28:45 1471  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
10:28:45 1472  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
10:28:45 1473  EXCEPTION_MESSAGE	      VARCHAR2(1024);
10:28:45 1474  BEGIN
10:28:45 1475  
10:28:45 1476  	 -- Get account id
10:28:45 1477  	 BEGIN
10:28:45 1478  	   SELECT
10:28:45 1479  	     ACCOUNT.ID,
10:28:45 1480  	     ACCOUNT.TAX_EXEMPT_ID
10:28:45 1481  	     into
10:28:45 1482  	     var_account_id,
10:28:45 1483  	     var_account_tax_exempt_id
10:28:45 1484  	   FROM
10:28:45 1485  	     ACCOUNT
10:28:45 1486  	   WHERE
10:28:45 1487  	     ACCOUNT.GROUP_ID = in_group_id
10:28:45 1488  	     AND ROWNUM <= 1;
10:28:45 1489  
10:28:45 1490  	   EXCEPTION
10:28:45 1491  	   WHEN NO_DATA_FOUND THEN
10:28:45 1492  	     RAISE BAD_GROUP_ID;
10:28:45 1493  	 END;
10:28:45 1494  
10:28:45 1495  	 -- Get gift certificate data
10:28:45 1496  	 BEGIN
10:28:45 1497  	   SELECT
10:28:45 1498  	     GIFT_CERTIFICATE.ID,
10:28:45 1499  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
10:28:45 1500  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
10:28:45 1501  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
10:28:45 1502  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
10:28:45 1503  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
10:28:45 1504  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
10:28:45 1505  	     into
10:28:45 1506  	     var_gift_certificate_id,
10:28:45 1507  	     var_purchased_oc_id,
10:28:45 1508  	     var_gc_status_id,
10:28:45 1509  	     var_purchaser_group_id,
10:28:45 1510  	     var_gc_expiration_date,
10:28:45 1511  	     var_gc_redeemer_group_id,
10:28:45 1512  	     var_gc_purchase_invoice_id
10:28:45 1513  	   FROM
10:28:45 1514  	     GIFT_CERTIFICATE
10:28:45 1515  	   WHERE
10:28:45 1516  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
10:28:45 1517  	     AND ROWNUM <= 1;
10:28:45 1518  
10:28:45 1519  	   EXCEPTION
10:28:45 1520  	   WHEN NO_DATA_FOUND THEN
10:28:45 1521  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
10:28:45 1522  	 END;
10:28:45 1523  
10:28:45 1524  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
10:28:45 1525  	 -- but in that case a redemption offer chain id should always be passed in
10:28:45 1526  	 IF var_oc_id_to_redeem IS NULL THEN
10:28:45 1527  	   BEGIN
10:28:45 1528  	     SELECT
10:28:45 1529  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
10:28:45 1530  	       into
10:28:45 1531  	       var_oc_id_to_redeem
10:28:45 1532  	     FROM
10:28:45 1533  	       OFFER_CHAIN_META_DATA
10:28:45 1534  	     WHERE
10:28:45 1535  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
10:28:45 1536  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V24.REDEMPTION_OC_ID
10:28:45 1537  	       AND ROWNUM = 1;
10:28:45 1538  -- requested by ticket so (but above is correct for the actual migrated data):
10:28:45 1539  --  SELECT
10:28:45 1540  --      OFFER_CHAIN.ID
10:28:45 1541  --      into
10:28:45 1542  --      var_oc_id_to_redeem
10:28:45 1543  --    FROM
10:28:45 1544  --      OFFER_CHAIN
10:28:45 1545  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
10:28:45 1546  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
10:28:45 1547  --    WHERE
10:28:45 1548  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:45 1549  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V24.GIFT_CERTIFICATE_REQUIRED
10:28:45 1550  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V24.ELIGIBILITY_FLAG_SET
10:28:45 1551  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:45 1552  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V24.REDEMPTION_OC_ID
10:28:45 1553  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
10:28:45 1554  --      AND ROWNUM = 1;
10:28:45 1555  
10:28:45 1556  	     EXCEPTION
10:28:45 1557  	     WHEN NO_DATA_FOUND THEN
10:28:45 1558  	       RAISE OC_TO_REDEEM_NOT_FOUND;
10:28:45 1559  	   END;
10:28:45 1560  	 END IF;
10:28:45 1561  
10:28:45 1562  	 -- Check that purchase invoice for this GC was closed
10:28:45 1563  	 SELECT
10:28:45 1564  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
10:28:45 1565  	 FROM
10:28:45 1566  	   INVOICE
10:28:45 1567  	 WHERE
10:28:45 1568  	   INVOICE.ID = var_gc_purchase_invoice_id;
10:28:45 1569  
10:28:45 1570  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V24.INVOICE_CLOSED THEN
10:28:45 1571  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
10:28:45 1572  	 END IF;
10:28:45 1573  
10:28:45 1574  	 -- Check that this invoice was successfully processed by billing
10:28:45 1575  	 SELECT
10:28:45 1576  	   COUNT(1) into var_succ_purch_attempts_num
10:28:45 1577  	 FROM
10:28:45 1578  	   TRANSACTION_ATTEMPT TA
10:28:45 1579  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
10:28:45 1580  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
10:28:45 1581  	 WHERE
10:28:45 1582  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
10:28:45 1583  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V24.TRANS_ATTEMPT_SUCCESS;
10:28:45 1584  
10:28:45 1585  	 IF var_succ_purch_attempts_num = 0 THEN
10:28:45 1586  	   SELECT
10:28:45 1587  	     COUNT(1) into var_succ_purch_attempts_num
10:28:45 1588  	   FROM
10:28:45 1589  	     DUAL
10:28:45 1590  	   WHERE
10:28:45 1591  	     PROCS_INVOICE_V24.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
10:28:45 1592  	 END IF;
10:28:45 1593  
10:28:45 1594  	 IF var_succ_purch_attempts_num = 0 THEN
10:28:45 1595  	   RAISE PURCHASE_INVOICES_NOT_PAID;
10:28:45 1596  	 END IF;
10:28:45 1597  
10:28:45 1598  	 -- Check limit for gc's offer chain
10:28:45 1599  	 SELECT
10:28:45 1600  	   COUNT(*) into var_same_offer_chains_num
10:28:45 1601  	 FROM
10:28:45 1602  	   SUBSCRIPTION
10:28:45 1603  	 WHERE
10:28:45 1604  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:45 1605  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
10:28:45 1606  	   AND (
10:28:45 1607  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:45 1608  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD);
10:28:45 1609  IF var_same_offer_chains_num = 0 THEN
10:28:45 1610  	   -- if user does not have any active existing subscriptions to the offer chain
10:28:45 1611  	   -- and if product from the offer chain is already owned from another offer chain
10:28:45 1612  	   -- then deny purchase
10:28:45 1613  	   FOR f_account_offer_chains IN (
10:28:45 1614  	     SELECT DISTINCT
10:28:45 1615  	       OFFER_CHAIN_ID
10:28:45 1616  	     FROM
10:28:45 1617  	       SUBSCRIPTION
10:28:45 1618  	     WHERE
10:28:45 1619  	       ACCOUNT_ID = var_account_id
10:28:45 1620  	       AND (
10:28:45 1621  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:45 1622  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED
10:28:45 1623  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD)
10:28:45 1624  	   )
10:28:45 1625  	   LOOP
10:28:45 1626  	     IF PROCS_OFFER_CHAIN_V24.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V24.TRUE THEN
10:28:45 1627  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
10:28:45 1628  	     END IF;
10:28:45 1629  	   END LOOP;
10:28:45 1630  	 ELSE
10:28:45 1631  
10:28:45 1632  	   -- if user have any active existing subscriptions to the offer chain
10:28:45 1633  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
10:28:45 1634  	   -- then deny purchase
10:28:45 1635  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
10:28:45 1636  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V24.INFINITY
10:28:45 1637  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
10:28:45 1638  	     RAISE LIMIT_REACHED;
10:28:45 1639  	   END IF;
10:28:45 1640  	 END IF;
10:28:45 1641  -- norlov: END OF TODO
10:28:45 1642  
10:28:45 1643  
10:28:45 1644  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
10:28:45 1645  	   RAISE GIFT_CERTIFICATE_REDEEMED;
10:28:45 1646  	 END IF;
10:28:45 1647  
10:28:45 1648  	 IF var_gc_expiration_date < sysdate THEN
10:28:45 1649  	   RAISE GIFT_CERTIFICATE_EXPIRED;
10:28:45 1650  	 END IF;
10:28:45 1651  
10:28:45 1652  	  IF var_gc_status_id = GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_REFUNDED THEN
10:28:45 1653  	   RAISE GIFT_CERT_IS_REFUNDED;
10:28:45 1654  	 END IF;
10:28:45 1655  
10:28:45 1656  	 IF var_gc_status_id = GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_FINALIZED THEN
10:28:45 1657  	   RAISE GIFT_CERT_IS_FINALIZED;
10:28:45 1658  	 END IF;
10:28:45 1659  
10:28:45 1660  	 -- Check that user did not subscribed to same product already
10:28:45 1661  	 -- norlov: get rid of this since there is already the check?
10:28:45 1662  	 FOR f_user_offer_chain IN (
10:28:45 1663  	   SELECT DISTINCT
10:28:45 1664  	     OFFER_CHAIN_ID
10:28:45 1665  	   FROM
10:28:45 1666  	     SUBSCRIPTION
10:28:45 1667  	   WHERE
10:28:45 1668  	     ACCOUNT_ID=var_account_id
10:28:45 1669  	     AND (
10:28:45 1670  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:45 1671  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED
10:28:45 1672  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD)
10:28:45 1673  	 )
10:28:45 1674  	 LOOP
10:28:45 1675  	   IF PROCS_OFFER_CHAIN_V24.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V24.TRUE THEN
10:28:45 1676  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
10:28:45 1677  	   END IF;
10:28:45 1678  	 END LOOP;
10:28:45 1679  
10:28:45 1680  	 -- Check for gift certificate amount
10:28:45 1681  	 SELECT
10:28:45 1682  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
10:28:45 1683  	 FROM
10:28:45 1684  	   CHARGE
10:28:45 1685  	 WHERE
10:28:45 1686  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
10:28:45 1687  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V24.INSTRUMENT_GIFT_CERTIFICATE;
10:28:45 1688  
10:28:45 1689  	 -- Create new invoice
10:28:45 1690  	 PROCS_INVOICE_V24.CREATE_INVOICE(
10:28:45 1691  	   out_invoice_id    => var_invoice_id,
10:28:45 1692  	   in_invoice_status => GLOBAL_STATUSES_V24.INVOICE_CLOSED,
10:28:45 1693  	   in_tax_exempt_id  => var_account_tax_exempt_id,
10:28:45 1694  	   in_created_by     => in_created_by
10:28:45 1695  	 );
10:28:45 1696  
10:28:45 1697  	 -- If a financial instrument wasn't passed in, use the gift certificate id
10:28:45 1698  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
10:28:45 1699  	 IF var_fin_instrument_id is null THEN
10:28:45 1700  	   var_fin_instrument_id := var_gift_certificate_id;
10:28:45 1701  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V24.INSTRUMENT_GIFT_CERTIFICATE;
10:28:45 1702  	 END IF;
10:28:45 1703  
10:28:45 1704  	 -- Insert new row into subscription table
10:28:45 1705  	 PROCS_SUBSCRIPTION_CRU_V24.CREATE_SUBSCRIPTION(
10:28:45 1706  	   out_subscription_id	     => var_subscription_id,
10:28:45 1707  	   in_account_id	     => var_account_id,
10:28:45 1708  	   in_purchase_date	     => var_date,
10:28:45 1709  	   in_offer_chain_id	     => var_oc_id_to_redeem,
10:28:45 1710  	   in_created_by	     => in_created_by,
10:28:45 1711  	   in_instrument_type_id     => var_fin_instrument_type_id,
10:28:45 1712  	   in_instrument_id	     => var_fin_instrument_id,
10:28:45 1713  	   in_subscription_status_id => GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:45 1714  	 );
10:28:45 1715  
10:28:45 1716  	 out_subscription_id := var_subscription_id;
10:28:45 1717  
10:28:45 1718  	 BEGIN
10:28:45 1719  	   PROCS_OFFER_CHAIN_V24.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
10:28:45 1720  	   EXCEPTION
10:28:45 1721  	     WHEN OTHERS THEN
10:28:45 1722  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1723  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
10:28:45 1724  	 END;
10:28:45 1725  
10:28:45 1726  	 BEGIN
10:28:45 1727  	   PROCS_LICENSE_V24.CREATE_LICENSE (
10:28:45 1728  	     out_license_id		 => out_license_id,
10:28:45 1729  	     in_status_id		 => GLOBAL_STATUSES_V24.LICENSE_ACTIVE,
10:28:45 1730  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V24.TRUE,
10:28:45 1731  	     in_start_date		 => var_date,
10:28:45 1732  	     in_offer_id		 => var_first_offer_id,
10:28:45 1733  	     in_subscription_id 	 => var_subscription_id,
10:28:45 1734  	     in_invoice_id		 => var_invoice_id,
10:28:45 1735  	     in_created_by		 => in_created_by,
10:28:45 1736  	     in_end_date		 => NULL, -- Will be calculated automatically
10:28:45 1737  	     in_is_extension		 => GLOBAL_CONSTANTS_V24.FALSE,
10:28:45 1738  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V24.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
10:28:45 1739  	     in_current_offer_recurr_num => 1
10:28:45 1740  	   );
10:28:45 1741  
10:28:45 1742  	   EXCEPTION
10:28:45 1743  	     WHEN OTHERS THEN
10:28:45 1744  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1745  	       RAISE CAN_NOT_CREATE_LICENSE;
10:28:45 1746  	 END;
10:28:45 1747  
10:28:45 1748  	 -- Update original gift certificate
10:28:45 1749  	 BEGIN
10:28:45 1750  	   PROCS_FIN_INSTRUMENTS_CRU_V24.UPDATE_GIFT_CERTIFICATE(
10:28:45 1751  	     in_gift_certificate_id	   => var_gift_certificate_id,
10:28:45 1752  	     in_updated_by		   => in_created_by,
10:28:45 1753  	     in_redeemer_group_id	   => in_group_id,
10:28:45 1754  	     in_finalized_invoice_id	   => var_invoice_id,
10:28:45 1755  	     in_redemption_date 	   => var_date,
10:28:45 1756  	     in_redeemer_address_id	   => in_redeemer_address_id,
10:28:45 1757  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_FINALIZED
10:28:45 1758  	   );
10:28:45 1759  	   EXCEPTION
10:28:45 1760  	     WHEN OTHERS THEN
10:28:45 1761  	       EXCEPTION_MESSAGE := SQLERRM;
10:28:45 1762  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
10:28:45 1763  	 END;
10:28:45 1764  
10:28:45 1765  EXCEPTION
10:28:45 1766  WHEN LIMIT_REACHED THEN
10:28:45 1767  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.CONFLICT_ERROR,
10:28:45 1768  	   SPROC_NAME, 'Limit reached for given offer chain');
10:28:45 1769  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
10:28:45 1770  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.CONFLICT_ERROR,
10:28:45 1771  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
10:28:45 1772  WHEN GIFT_CERTIFICATE_REDEEMED THEN
10:28:45 1773  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1774  	   SPROC_NAME, 'Gift certificate already redeemed');
10:28:45 1775  WHEN GIFT_CERTIFICATE_EXPIRED THEN
10:28:45 1776  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 1777  	   SPROC_NAME, 'Gift certificate expired');
10:28:45 1778  WHEN GIFT_CERT_IS_FINALIZED THEN
10:28:45 1779  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1780  	   SPROC_NAME, 'Gift certificate is finalized');
10:28:45 1781  WHEN GIFT_CERT_IS_REFUNDED THEN
10:28:45 1782  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1783  	   SPROC_NAME, 'Gift certificate has been refunded');
10:28:45 1784  WHEN BAD_GROUP_ID THEN
10:28:45 1785  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1786  	   SPROC_NAME, 'No such account with given group id');
10:28:45 1787  WHEN OC_TO_REDEEM_NOT_FOUND THEN
10:28:45 1788  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1789  	   SPROC_NAME, 'Offer chain to redeem not found');
10:28:45 1790  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
10:28:45 1791  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1792  	   SPROC_NAME, 'No such gift certificate code');
10:28:45 1793  WHEN CAN_NOT_CREATE_LICENSE THEN
10:28:45 1794  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1795  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
10:28:45 1796  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
10:28:45 1797  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:45 1798  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
10:28:45 1799  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
10:28:45 1800  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1801  	   SPROC_NAME, 'Purchase invoice is not closed');
10:28:45 1802  WHEN PURCHASE_INVOICES_NOT_PAID THEN
10:28:45 1803  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:45 1804  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
10:28:45 1805  WHEN OTHERS THEN
10:28:45 1806  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1807  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1808  END;
10:28:45 1809  
10:28:45 1810  /******************************************************************************/
10:28:45 1811  
10:28:45 1812  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
10:28:45 1813  /*
10:28:45 1814  Throws exceptions:
10:28:45 1815  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1816  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 1817  */
10:28:45 1818  	 in_code	IN VARCHAR,
10:28:45 1819  	 out_result_set OUT SYS_REFCURSOR
10:28:45 1820  ) AS
10:28:45 1821  -- VARIABLES
10:28:45 1822  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
10:28:45 1823  temp_gift_certificate_id NUMBER;
10:28:45 1824  -- EXCEPTIONS
10:28:45 1825  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
10:28:45 1826  BEGIN
10:28:45 1827  
10:28:45 1828  	 BEGIN
10:28:45 1829  	   SELECT
10:28:45 1830  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
10:28:45 1831  	   FROM
10:28:45 1832  	     GIFT_CERTIFICATE
10:28:45 1833  	   WHERE
10:28:45 1834  	     GIFT_CERTIFICATE.CODE = in_code;
10:28:45 1835  	   EXCEPTION
10:28:45 1836  	     WHEN NO_DATA_FOUND THEN
10:28:45 1837  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
10:28:45 1838  	 END;
10:28:45 1839  
10:28:45 1840  	 -- Select all gift certificates with given code
10:28:45 1841  	 OPEN out_result_set FOR
10:28:45 1842  	 SELECT
10:28:45 1843  	   gc.EXPIRATION_DATE,
10:28:45 1844  	   ch.name,
10:28:45 1845  	   ch.id,
10:28:45 1846  	   gc.sender_email,
10:28:45 1847  	   gc.sender_name,
10:28:45 1848  	   gc.recipient_email,
10:28:45 1849  	   gc.recipient_name,
10:28:45 1850  	   gc.purchase_date,
10:28:45 1851  	   gc.redemption_date,
10:28:45 1852  	   gc.purchaser_group_id,
10:28:45 1853  	   gc.redeemer_group_id,
10:28:45 1854  	   gc.gift_message,
10:28:45 1855  	   ocmd.value redemption_offer_chain_ids,
10:28:45 1856  	   s.offer_chain_id redeemed_offer_chain_id,
10:28:45 1857  	   gc.recipient_notify_date,
10:28:45 1858  	   gc.gift_certificate_status_id,
10:28:45 1859  	   gc.purchase_invoice_id,
10:28:45 1860  	   gc.finalized_invoice_id,
10:28:45 1861  	   gccr.reference_code
10:28:45 1862  	 FROM
10:28:45 1863  	   GIFT_CERTIFICATE gc
10:28:45 1864  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
10:28:45 1865  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
10:28:45 1866  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
10:28:45 1867  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
10:28:45 1868  	 LEFT JOIN GC_CAMPAIGN_AND_REF gccr ON gc.id = gccr.GC_ID
10:28:45 1869  	 WHERE
10:28:45 1870  	   gc.code = in_code;
10:28:45 1871  
10:28:45 1872  EXCEPTION
10:28:45 1873  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
10:28:45 1874  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1875  	   SPROC_NAME, 'No such gift certificate');
10:28:45 1876  
10:28:45 1877  WHEN OTHERS THEN
10:28:45 1878  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1879  	   SPROC_NAME, 'Unknown Error', SQLERRM);
10:28:45 1880  END;
10:28:45 1881  
10:28:45 1882  /******************************************************************************/
10:28:45 1883  
10:28:45 1884  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
10:28:45 1885  /*
10:28:45 1886  Throws exceptions:
10:28:45 1887  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1888  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:45 1889  */
10:28:45 1890  	 in_gift_certificate_id IN NUMBER,
10:28:45 1891  	 out_result_set 	OUT SYS_REFCURSOR
10:28:45 1892  ) AS
10:28:45 1893  -- VARIABLES
10:28:45 1894  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
10:28:45 1895  temp_gift_certificate_id NUMBER;
10:28:45 1896  -- EXCEPTIONS
10:28:45 1897  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
10:28:45 1898  BEGIN
10:28:45 1899  
10:28:45 1900  	 BEGIN
10:28:45 1901  	   SELECT
10:28:45 1902  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
10:28:45 1903  	   FROM
10:28:45 1904  	     GIFT_CERTIFICATE
10:28:45 1905  	   WHERE
10:28:45 1906  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
10:28:45 1907  	   EXCEPTION
10:28:45 1908  	     WHEN NO_DATA_FOUND THEN
10:28:45 1909  	       RAISE BAD_GIFT_CERTIFICATE_ID;
10:28:45 1910  	 END;
10:28:45 1911  
10:28:45 1912  	 -- Select all gift certificates with given code
10:28:45 1913  	 OPEN out_result_set FOR
10:28:45 1914  	 SELECT
10:28:45 1915  	   gc.EXPIRATION_DATE,
10:28:45 1916  	   ch.name,
10:28:45 1917  	   ch.id,
10:28:45 1918  	   gc.sender_email,
10:28:45 1919  	   gc.sender_name,
10:28:45 1920  	   gc.recipient_email,
10:28:45 1921  	   gc.recipient_name,
10:28:45 1922  	   gc.purchase_date,
10:28:45 1923  	   gc.redemption_date,
10:28:45 1924  	   gc.purchaser_group_id,
10:28:45 1925  	   gc.redeemer_group_id,
10:28:45 1926  	   gc.code,
10:28:45 1927  	   gc.gift_message,
10:28:45 1928  	   gc.recipient_notify_date
10:28:45 1929  	 FROM
10:28:45 1930  	   GIFT_CERTIFICATE gc
10:28:45 1931  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
10:28:45 1932  	 WHERE
10:28:45 1933  	   gc.id = in_gift_certificate_id;
10:28:45 1934  
10:28:45 1935  EXCEPTION
10:28:45 1936  WHEN BAD_GIFT_CERTIFICATE_ID THEN
10:28:45 1937  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1938  	   SPROC_NAME, 'No such gift certificate');
10:28:45 1939  WHEN OTHERS THEN
10:28:45 1940  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1941  	   SPROC_NAME, 'Unknown Error', SQLERRM);
10:28:45 1942  END GET_GIFT_CERTIFICATE_BY_ID;
10:28:45 1943  
10:28:45 1944  /******************************************************************************/
10:28:45 1945  
10:28:45 1946  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
10:28:45 1947  	 in_group_id		IN  NUMBER,
10:28:45 1948  	 out_instrument_type_id OUT NUMBER,
10:28:45 1949  	 out_instrument_id	OUT NUMBER
10:28:45 1950  ) AS
10:28:45 1951  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
10:28:45 1952  BEGIN
10:28:45 1953  
10:28:45 1954  	 SELECT
10:28:45 1955  	   ACCOUNT.INSTRUMENT_TYPE_ID,
10:28:45 1956  	   ACCOUNT.INSTRUMENT_ID
10:28:45 1957  	   into
10:28:45 1958  	   out_instrument_type_id,
10:28:45 1959  	   out_instrument_id
10:28:45 1960  	 FROM
10:28:45 1961  	   ACCOUNT
10:28:45 1962  	 WHERE
10:28:45 1963  	   ACCOUNT.GROUP_ID = in_group_id;
10:28:45 1964  
10:28:45 1965  EXCEPTION
10:28:45 1966  WHEN NO_DATA_FOUND THEN
10:28:45 1967  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1968  	   SPROC_NAME, 'Bad group id');
10:28:45 1969  WHEN OTHERS THEN
10:28:45 1970  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1971  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1972  END GET_DEF_FINANCIAL_INSTRUMENT;
10:28:45 1973  
10:28:45 1974  /******************************************************************************/
10:28:45 1975  
10:28:45 1976  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
10:28:45 1977  	 in_group_id	       IN NUMBER,
10:28:45 1978  	 in_instrument_type_id IN NUMBER,
10:28:45 1979  	 in_instrument_id      IN NUMBER,
10:28:45 1980  	 in_updated_by	       IN VARCHAR2
10:28:45 1981  ) AS
10:28:45 1982  -- VARIABLES
10:28:45 1983  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
10:28:45 1984  var_account_id	      NUMBER;
10:28:45 1985  -- EXCEPTIONS
10:28:45 1986  BAD_GROUP_ID	      EXCEPTION;
10:28:45 1987  BAD_CREDIT_CARD	      EXCEPTION;
10:28:45 1988  BAD_PAYPAL	      EXCEPTION;
10:28:45 1989  BAD_INSTRUMENT_TYPE    EXCEPTION;
10:28:45 1990  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:45 1991  BEGIN
10:28:45 1992  
10:28:45 1993  	 -- get account id
10:28:45 1994  	 BEGIN
10:28:45 1995  	   SELECT
10:28:45 1996  	     ACCOUNT.ID into var_account_id
10:28:45 1997  	   FROM
10:28:45 1998  	     ACCOUNT
10:28:45 1999  	   WHERE
10:28:45 2000  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:45 2001  	   EXCEPTION
10:28:45 2002  	     WHEN NO_DATA_FOUND THEN
10:28:45 2003  	       RAISE BAD_GROUP_ID;
10:28:45 2004  	 END;
10:28:45 2005  
10:28:45 2006  	 -- Chech that given instrument exists
10:28:45 2007  	 IF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD THEN
10:28:45 2008  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 2009  	     RAISE BAD_CREDIT_CARD;
10:28:45 2010  	   END IF;
10:28:45 2011  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL THEN
10:28:45 2012  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 2013  	     RAISE BAD_PAYPAL;
10:28:45 2014  	   END IF;
10:28:45 2015  	 ELSE
10:28:45 2016  	   RAISE BAD_INSTRUMENT_TYPE;
10:28:45 2017  	 END IF;
10:28:45 2018  
10:28:45 2019  	 -- update account information
10:28:45 2020  	 PROCS_ACCOUNT_CRU_V24.UPDATE_ACCOUNT(
10:28:45 2021  	   in_account_id	 => var_account_id,
10:28:45 2022  	   in_updated_by	 => in_updated_by,
10:28:45 2023  	   in_instrument_type_id => in_instrument_type_id,
10:28:45 2024  	   in_instrument_id	 => in_instrument_id
10:28:45 2025  	 );
10:28:45 2026  
10:28:45 2027  EXCEPTION
10:28:45 2028  WHEN BAD_GROUP_ID THEN
10:28:45 2029  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2030  	   SPROC_NAME, 'No such account');
10:28:45 2031  WHEN BAD_CREDIT_CARD THEN
10:28:45 2032  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2033  	   SPROC_NAME, 'Could not find credit card with given ID');
10:28:45 2034  WHEN BAD_PAYPAL THEN
10:28:45 2035  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2036  	   SPROC_NAME, 'Could not find paypal with given ID');
10:28:45 2037  WHEN BAD_INSTRUMENT_TYPE THEN
10:28:45 2038  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 2039  	   SPROC_NAME, 'Bad instrument type id');
10:28:45 2040  WHEN OTHERS THEN
10:28:45 2041  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2042  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2043  END SET_DEF_FINANCIAL_INSTRUMENT;
10:28:45 2044  
10:28:45 2045  /******************************************************************************/
10:28:45 2046  
10:28:45 2047  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
10:28:45 2048  	 in_group_id IN NUMBER
10:28:45 2049  ) AS
10:28:45 2050  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
10:28:45 2051  -- VARIABLES
10:28:45 2052  var_account_id NUMBER;
10:28:45 2053  -- EXCEPTIONS
10:28:45 2054  BAD_GROUP_ID	 EXCEPTION;
10:28:45 2055  EXCEPTION_MESSAGE VARCHAR2(1024);
10:28:45 2056  BEGIN
10:28:45 2057  
10:28:45 2058  	 BEGIN
10:28:45 2059  	   SELECT
10:28:45 2060  	     ACCOUNT.ID into var_account_id
10:28:45 2061  	   FROM
10:28:45 2062  	     ACCOUNT
10:28:45 2063  	   WHERE
10:28:45 2064  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:45 2065  	   EXCEPTION
10:28:45 2066  	     WHEN NO_DATA_FOUND THEN
10:28:45 2067  	       RAISE BAD_GROUP_ID;
10:28:45 2068  	 END;
10:28:45 2069  
10:28:45 2070  	 PROCS_ACCOUNT_CRU_V24.UPDATE_DEF_FIN_INSTRUMENT(
10:28:45 2071  	   in_account_id => var_account_id,
10:28:45 2072  	   in_instrument_type_id => NULL,
10:28:45 2073  	   in_instrument_id => NULL,
10:28:45 2074  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
10:28:45 2075  	 );
10:28:45 2076  
10:28:45 2077  EXCEPTION
10:28:45 2078  WHEN BAD_GROUP_ID THEN
10:28:45 2079  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2080  	   SPROC_NAME, 'No such group id');
10:28:45 2081  WHEN OTHERS THEN
10:28:45 2082  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2083  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2084  END DEL_DEF_FINANCIAL_INSTRUMENT;
10:28:45 2085  
10:28:45 2086  /******************************************************************************/
10:28:45 2087  
10:28:45 2088  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:28:45 2089  	 in_credit_card_id IN  NUMBER,
10:28:45 2090  	 out_result_set    OUT SYS_REFCURSOR
10:28:45 2091  ) AS
10:28:45 2092  SPROC_NAME    CONSTANT VARCHAR2(32) := 'GET_CREDIT_CARD_BY_ID';
10:28:45 2093  BEGIN
10:28:45 2094  	 OPEN out_result_set FOR
10:28:45 2095  	 SELECT
10:28:45 2096  	   ID,
10:28:45 2097  	   ACCOUNT_ID,
10:28:45 2098  	   INSTRUMENT_NAME,
10:28:45 2099  	   PRIVATE_CARD_HOLDER_NAME,
10:28:45 2100  	   PRIVATE_STREET_ADDRESS,
10:28:45 2101  	   PRIVATE_STREET_ADDRESS2,
10:28:45 2102  	   STATE,
10:28:45 2103  	   CITY,
10:28:45 2104  	   POSTAL_CODE,
10:28:45 2105  	   COUNTRY,
10:28:45 2106  	   LAST_FOUR_CC,
10:28:45 2107  	   EXPIRATION_DATE,
10:28:45 2108  	   CREDIT_CARD_TYPE_ID,
10:28:45 2109  	   SECRET_TOKEN,
10:28:45 2110  	   CREATE_DATE,
10:28:45 2111  	   CREATED_BY,
10:28:45 2112  	   UPDATE_DATE,
10:28:45 2113  	   UPDATED_BY,
10:28:45 2114  	   CREDIT_CARD_STATUS_ID,
10:28:45 2115  	   PRIVATE_FIRST_NAME,
10:28:45 2116  	   PRIVATE_LAST_NAME,
10:28:45 2117  	   CHASE_PROFILE_ID
10:28:45 2118  	 FROM
10:28:45 2119  	   CREDIT_CARD
10:28:45 2120  	 WHERE
10:28:45 2121  	   ID = in_credit_card_id;
10:28:45 2122  END GET_CREDIT_CARD_BY_ID;
10:28:45 2123  
10:28:45 2124  /******************************************************************************/
10:28:45 2125  
10:28:45 2126  PROCEDURE GET_PAYPAL_BY_ID (
10:28:45 2127  	 in_paypal_id	IN  NUMBER,
10:28:45 2128  	 out_result_set OUT SYS_REFCURSOR
10:28:45 2129  ) AS
10:28:45 2130  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PAYPAL_BY_ID';
10:28:45 2131  BEGIN
10:28:45 2132  	 OPEN out_result_set FOR
10:28:45 2133  	 SELECT
10:28:45 2134  	   ID,
10:28:45 2135  	   ACCOUNT_ID,
10:28:45 2136  	   INSTRUMENT_NAME,
10:28:45 2137  	   PRIVATE_EMAIL_ADDRESS,
10:28:45 2138  	   CREATE_DATE,
10:28:45 2139  	   CREATED_BY,
10:28:45 2140  	   UPDATE_DATE,
10:28:45 2141  	   UPDATED_BY,
10:28:45 2142  	   PAYPAL_STATUS_ID,
10:28:45 2143  	   PRIVATE_STREET_ADDRESS,
10:28:45 2144  	   PRIVATE_STREET_ADDRESS2,
10:28:45 2145  	   STATE,
10:28:45 2146  	   CITY,
10:28:45 2147  	   POSTAL_CODE,
10:28:45 2148  	   COUNTRY,
10:28:45 2149  	   EXPIRATION_DATE,
10:28:45 2150  	   SECRET_TOKEN
10:28:45 2151  	 FROM
10:28:45 2152  	   PAYPAL
10:28:45 2153  	 WHERE
10:28:45 2154  	   ID = in_paypal_id;
10:28:45 2155  END GET_PAYPAL_BY_ID;
10:28:45 2156  
10:28:45 2157  /******************************************************************************/
10:28:45 2158  
10:28:45 2159  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
10:28:45 2160  	 in_credit_card_id NUMBER
10:28:45 2161  ) RETURN NUMBER AS
10:28:45 2162  BEGIN
10:28:45 2163  	 -- STUB
10:28:45 2164  	 RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 2165  END F_CAN_DISABLE_CREDIT_CARD;
10:28:45 2166  
10:28:45 2167  /******************************************************************************/
10:28:45 2168  
10:28:45 2169  PROCEDURE GET_PURCHASED_GCERTIFICATES (
10:28:45 2170  	 in_group_id	IN NUMBER,
10:28:45 2171  	 out_result_set OUT SYS_REFCURSOR
10:28:45 2172  ) AS
10:28:45 2173  -- VARIABLES
10:28:45 2174  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
10:28:45 2175  var_account_id NUMBER;
10:28:45 2176  -- EXCEPTIONS
10:28:45 2177  BAD_GROUP_ID EXCEPTION;
10:28:45 2178  BEGIN
10:28:45 2179  
10:28:45 2180  	 BEGIN
10:28:45 2181  	   SELECT
10:28:45 2182  	     ACCOUNT.ID into var_account_id
10:28:45 2183  	   FROM
10:28:45 2184  	     ACCOUNT
10:28:45 2185  	   WHERE
10:28:45 2186  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:45 2187  	   EXCEPTION
10:28:45 2188  	     WHEN NO_DATA_FOUND THEN
10:28:45 2189  	       RAISE BAD_GROUP_ID;
10:28:45 2190  	 END;
10:28:45 2191  
10:28:45 2192  	 OPEN out_result_set FOR
10:28:45 2193  	 SELECT
10:28:45 2194  	   GIFT_CERTIFICATE.CODE,
10:28:45 2195  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
10:28:45 2196  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
10:28:45 2197  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
10:28:45 2198  	   GIFT_CERTIFICATE.SENDER_EMAIL,
10:28:45 2199  	   GIFT_CERTIFICATE.SENDER_NAME,
10:28:45 2200  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
10:28:45 2201  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
10:28:45 2202  	   GIFT_CERTIFICATE.PURCHASE_DATE,
10:28:45 2203  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
10:28:45 2204  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
10:28:45 2205  	 FROM
10:28:45 2206  	   GIFT_CERTIFICATE
10:28:45 2207  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:45 2208  	 WHERE
10:28:45 2209  	   ROWNUM <= 100 AND
10:28:45 2210  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
10:28:45 2211  
10:28:45 2212  EXCEPTION
10:28:45 2213  WHEN BAD_GROUP_ID THEN
10:28:45 2214  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2215  	   SPROC_NAME, 'No such group id');
10:28:45 2216  WHEN OTHERS THEN
10:28:45 2217  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2218  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2219  END GET_PURCHASED_GCERTIFICATES;
10:28:45 2220  
10:28:45 2221  /******************************************************************************/
10:28:45 2222  
10:28:45 2223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
10:28:45 2224  	 in_gift_certificate_id IN NUMBER,
10:28:45 2225  	 in_charge_id		IN NUMBER,
10:28:45 2226  	 out_result		OUT NUMBER
10:28:45 2227  ) AS
10:28:45 2228  -- VARIABLES
10:28:45 2229  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
10:28:45 2230  var_invoice_id	    NUMBER;
10:28:45 2231  var_offer_chain_id   NUMBER;
10:28:45 2232  var_offer_chain_s_id NUMBER;
10:28:45 2233  -- EXCEPTIONS
10:28:45 2234  BAD_CHARGE_ID		 EXCEPTION;
10:28:45 2235  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
10:28:45 2236  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
10:28:45 2237  BEGIN
10:28:45 2238  
10:28:45 2239  	 BEGIN
10:28:45 2240  	   SELECT
10:28:45 2241  	     CHARGE.INVOICE_ID into var_invoice_id
10:28:45 2242  	   FROM
10:28:45 2243  	     CHARGE
10:28:45 2244  	   WHERE
10:28:45 2245  	     CHARGE.ID = in_charge_id;
10:28:45 2246  	   EXCEPTION
10:28:45 2247  	     WHEN NO_DATA_FOUND THEN
10:28:45 2248  	       RAISE BAD_CHARGE_ID;
10:28:45 2249  	 END;
10:28:45 2250  
10:28:45 2251  	 BEGIN
10:28:45 2252  	   SELECT
10:28:45 2253  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
10:28:45 2254  	   FROM
10:28:45 2255  	     GIFT_CERTIFICATE
10:28:45 2256  	   WHERE
10:28:45 2257  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
10:28:45 2258  	   EXCEPTION
10:28:45 2259  	     WHEN NO_DATA_FOUND THEN
10:28:45 2260  	       RAISE BAD_GIFT_CERTIFICATE_ID;
10:28:45 2261  	 END;
10:28:45 2262  
10:28:45 2263  	 BEGIN
10:28:45 2264  	   SELECT
10:28:45 2265  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
10:28:45 2266  	   FROM
10:28:45 2267  	     SUBSCRIPTION
10:28:45 2268  	   WHERE
10:28:45 2269  	     SUBSCRIPTION.ID IN (
10:28:45 2270  	       SELECT DISTINCT
10:28:45 2271  		 LICENSE.SUBSCRIPTION_ID
10:28:45 2272  	       FROM
10:28:45 2273  		 LICENSE
10:28:45 2274  	       WHERE
10:28:45 2275  		 LICENSE.INVOICE_ID = var_invoice_id
10:28:45 2276  	     );
10:28:45 2277  	   EXCEPTION
10:28:45 2278  	     WHEN NO_DATA_FOUND THEN
10:28:45 2279  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
10:28:45 2280  	 END;
10:28:45 2281  
10:28:45 2282  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
10:28:45 2283  	   out_result := GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 2284  	 ELSE
10:28:45 2285  	   out_result := GLOBAL_CONSTANTS_V24.FALSE;
10:28:45 2286  	 END IF;
10:28:45 2287  
10:28:45 2288  EXCEPTION
10:28:45 2289  WHEN BAD_CHARGE_ID THEN
10:28:45 2290  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2291  	   SPROC_NAME, 'No such charge');
10:28:45 2292  WHEN BAD_GIFT_CERTIFICATE_ID THEN
10:28:45 2293  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2294  	   SPROC_NAME, 'No such gift certificate');
10:28:45 2295  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
10:28:45 2296  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2297  	   SPROC_NAME, 'Could not find subscription for given charge');
10:28:45 2298  WHEN OTHERS THEN
10:28:45 2299  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2300  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2301  END IS_GCERT_FOR_PROPER_OFFER;
10:28:45 2302  
10:28:45 2303  /******************************************************************************/
10:28:45 2304  
10:28:45 2305  FUNCTION IS_CREDIT_CARD_EXISTS (
10:28:45 2306  /*
10:28:45 2307  GLOBAL_CONSTANTS_V24.TRUE - if instrument exists
10:28:45 2308  GLOBAL_CONSTANTS_V24.FALSE - else
10:28:45 2309  */
10:28:45 2310  	 in_credit_card_id IN NUMBER
10:28:45 2311  ) RETURN NUMBER AS
10:28:45 2312  -- VARIABLES
10:28:45 2313  var_cc_count NUMBER;
10:28:45 2314  BEGIN
10:28:45 2315  	 SELECT
10:28:45 2316  	   COUNT(*) into var_cc_count
10:28:45 2317  	 FROM
10:28:45 2318  	   CREDIT_CARD
10:28:45 2319  	 WHERE
10:28:45 2320  	   CREDIT_CARD.ID = in_credit_card_id;
10:28:45 2321  
10:28:45 2322  	 IF var_cc_count = 0 THEN
10:28:45 2323  	   RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:45 2324  	 ELSE
10:28:45 2325  	   RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 2326  	 END IF;
10:28:45 2327  
10:28:45 2328  END IS_CREDIT_CARD_EXISTS;
10:28:45 2329  
10:28:45 2330  /******************************************************************************/
10:28:45 2331  
10:28:45 2332  FUNCTION IS_PAYPAL_EXISTS (
10:28:45 2333  /*
10:28:45 2334  GLOBAL_CONSTANTS_V24.TRUE - if instrument exists
10:28:45 2335  GLOBAL_CONSTANTS_V24.FALSE - else
10:28:45 2336  */
10:28:45 2337  	 in_paypal_id IN NUMBER
10:28:45 2338  ) RETURN NUMBER AS
10:28:45 2339  -- VARIABLES
10:28:45 2340  var_pp_count NUMBER;
10:28:45 2341  BEGIN
10:28:45 2342  	 SELECT
10:28:45 2343  	   COUNT(*) into var_pp_count
10:28:45 2344  	 FROM
10:28:45 2345  	   PAYPAL
10:28:45 2346  	 WHERE
10:28:45 2347  	   PAYPAL.ID = in_paypal_id;
10:28:45 2348  
10:28:45 2349  	 IF var_pp_count = 0 THEN
10:28:45 2350  	   RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:45 2351  	 ELSE
10:28:45 2352  	   RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 2353  	 END IF;
10:28:45 2354  
10:28:45 2355  END IS_PAYPAL_EXISTS;
10:28:45 2356  
10:28:45 2357  /******************************************************************************/
10:28:45 2358  
10:28:45 2359  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
10:28:45 2360  /*
10:28:45 2361  GLOBAL_CONSTANTS_V24.TRUE - if instrument exists
10:28:45 2362  GLOBAL_CONSTANTS_V24.FALSE - else
10:28:45 2363  */
10:28:45 2364  	 in_gift_certificate_id IN NUMBER
10:28:45 2365  ) RETURN NUMBER AS
10:28:45 2366  -- VARIABLES
10:28:45 2367  var_gc_count NUMBER;
10:28:45 2368  BEGIN
10:28:45 2369  	 SELECT
10:28:45 2370  	   COUNT(*) into var_gc_count
10:28:45 2371  	 FROM
10:28:45 2372  	   GIFT_CERTIFICATE
10:28:45 2373  	 WHERE
10:28:45 2374  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
10:28:45 2375  
10:28:45 2376  	 IF var_gc_count = 0 THEN
10:28:45 2377  	   RETURN GLOBAL_CONSTANTS_V24.FALSE;
10:28:45 2378  	 ELSE
10:28:45 2379  	   RETURN GLOBAL_CONSTANTS_V24.TRUE;
10:28:45 2380  	 END IF;
10:28:45 2381  
10:28:45 2382  END IS_GIFT_CERTIFICATE_EXISTS;
10:28:45 2383  
10:28:45 2384  /******************************************************************************/
10:28:45 2385  
10:28:45 2386  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
10:28:45 2387  	 in_credit_card_id IN NUMBER,
10:28:45 2388  	 out_group_id	   OUT NUMBER
10:28:45 2389  ) AS
10:28:45 2390  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
10:28:45 2391  BEGIN
10:28:45 2392  	 SELECT
10:28:45 2393  	   ACCOUNT.GROUP_ID into out_group_id
10:28:45 2394  	 FROM
10:28:45 2395  	   CREDIT_CARD
10:28:45 2396  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
10:28:45 2397  	 WHERE
10:28:45 2398  	   CREDIT_CARD.ID = in_credit_card_id;
10:28:45 2399  EXCEPTION
10:28:45 2400  WHEN NO_DATA_FOUND THEN
10:28:45 2401  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2402  	   SPROC_NAME, 'No such credit card');
10:28:45 2403  WHEN OTHERS THEN
10:28:45 2404  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2405  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2406  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
10:28:45 2407  
10:28:45 2408  /******************************************************************************/
10:28:45 2409  
10:28:45 2410  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
10:28:45 2411  	 in_paypal_id IN NUMBER,
10:28:45 2412  	 out_group_id OUT NUMBER
10:28:45 2413  ) AS
10:28:45 2414  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
10:28:45 2415  BEGIN
10:28:45 2416  	 SELECT
10:28:45 2417  	   ACCOUNT.GROUP_ID into out_group_id
10:28:45 2418  	 FROM
10:28:45 2419  	   PAYPAL
10:28:45 2420  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
10:28:45 2421  	 WHERE
10:28:45 2422  	   PAYPAL.ID = in_paypal_id;
10:28:45 2423  EXCEPTION
10:28:45 2424  WHEN NO_DATA_FOUND THEN
10:28:45 2425  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2426  	   SPROC_NAME, 'No such paypal');
10:28:45 2427  WHEN OTHERS THEN
10:28:45 2428  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2429  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2430  END GET_GROUP_ID_BY_PAYPAL_ID;
10:28:45 2431  
10:28:45 2432  /******************************************************************************/
10:28:45 2433  
10:28:45 2434  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
10:28:45 2435  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
10:28:45 2436  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
10:28:45 2437  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
10:28:45 2438  ) AS
10:28:45 2439  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
10:28:45 2440  -- EXCEPTIONS
10:28:45 2441  BAD_CREDIT_CARD_ID     EXCEPTION;
10:28:45 2442  BAD_STATUS_ID	      EXCEPTION;
10:28:45 2443  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:45 2444  BEGIN
10:28:45 2445  
10:28:45 2446  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V24.CREDIT_CARD_ACTIVE
10:28:45 2447  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V24.CREDIT_CARD_INVALID
10:28:45 2448  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V24.CREDIT_CARD_DISABLED
10:28:45 2449  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V24.CREDIT_CARD_EXPIRED THEN
10:28:45 2450  	   RAISE BAD_STATUS_ID;
10:28:45 2451  	 END IF;
10:28:45 2452  
10:28:45 2453  	 PROCS_FIN_INSTRUMENTS_CRU_V24.UPDATE_CREDIT_CARD(
10:28:45 2454  	   in_credit_card_id	    => in_credit_card_id,
10:28:45 2455  	   in_updated_by	    => in_updated_by,
10:28:45 2456  	   in_credit_card_status_id => in_credit_card_status_id
10:28:45 2457  	 );
10:28:45 2458  
10:28:45 2459  	 IF SQL%ROWCOUNT = 0 THEN
10:28:45 2460  	   RAISE BAD_CREDIT_CARD_ID;
10:28:45 2461  	 END IF;
10:28:45 2462  
10:28:45 2463  EXCEPTION
10:28:45 2464  WHEN BAD_CREDIT_CARD_ID THEN
10:28:45 2465  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2466  	   SPROC_NAME, 'No such credit card');
10:28:45 2467  WHEN BAD_STATUS_ID THEN
10:28:45 2468  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 2469  	   SPROC_NAME, 'Bad credit card status id');
10:28:45 2470  WHEN OTHERS THEN
10:28:45 2471  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2472  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2473  END UPDATE_CREDIT_CARD_STATUS;
10:28:45 2474  
10:28:45 2475  /******************************************************************************/
10:28:45 2476  
10:28:45 2477  PROCEDURE UPDATE_PAYPAL_STATUS (
10:28:45 2478  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
10:28:45 2479  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
10:28:45 2480  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
10:28:45 2481  ) AS
10:28:45 2482  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
10:28:45 2483  -- EXCEPTIONS
10:28:45 2484  BAD_PAYPAL_ID	      EXCEPTION;
10:28:45 2485  BAD_STATUS_ID	      EXCEPTION;
10:28:45 2486  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:45 2487  BEGIN
10:28:45 2488  
10:28:45 2489  	 IF in_paypal_status_id != GLOBAL_STATUSES_V24.PAYPAL_ACTIVE
10:28:45 2490  	   AND in_paypal_status_id != GLOBAL_STATUSES_V24.PAYPAL_INACTIVE
10:28:45 2491  	   AND in_paypal_status_id != GLOBAL_STATUSES_V24.PAYPAL_FROZEN THEN
10:28:45 2492  	   RAISE BAD_STATUS_ID;
10:28:45 2493  	 END IF;
10:28:45 2494  
10:28:45 2495  	 PROCS_FIN_INSTRUMENTS_CRU_V24.UPDATE_PAYPAL(
10:28:45 2496  	   in_paypal_id        => in_paypal_id,
10:28:45 2497  	   in_paypal_status_id => in_paypal_status_id,
10:28:45 2498  	   in_updated_by       => in_updated_by
10:28:45 2499  	 );
10:28:45 2500  
10:28:45 2501  	 IF SQL%ROWCOUNT = 0 THEN
10:28:45 2502  	   RAISE BAD_PAYPAL_ID;
10:28:45 2503  	 END IF;
10:28:45 2504  
10:28:45 2505  EXCEPTION
10:28:45 2506  WHEN BAD_PAYPAL_ID THEN
10:28:45 2507  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2508  	   SPROC_NAME, 'No such paypal');
10:28:45 2509  WHEN BAD_STATUS_ID THEN
10:28:45 2510  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 2511  	   SPROC_NAME, 'Bad paypal status id');
10:28:45 2512  WHEN OTHERS THEN
10:28:45 2513  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2514  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2515  END UPDATE_PAYPAL_STATUS;
10:28:45 2516  
10:28:45 2517  /******************************************************************************/
10:28:45 2518  
10:28:45 2519  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
10:28:45 2520  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
10:28:45 2521  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
10:28:45 2522  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
10:28:45 2523  ) AS
10:28:45 2524  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
10:28:45 2525  -- EXCEPTIONS
10:28:45 2526  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
10:28:45 2527  BAD_STATUS_ID	       EXCEPTION;
10:28:45 2528  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:28:45 2529  BEGIN
10:28:45 2530  
10:28:45 2531  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_ACTIVE
10:28:45 2532  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_FINALIZED THEN
10:28:45 2533  	   RAISE BAD_STATUS_ID;
10:28:45 2534  	 END IF;
10:28:45 2535  
10:28:45 2536  	 PROCS_FIN_INSTRUMENTS_CRU_V24.UPDATE_GIFT_CERTIFICATE(
10:28:45 2537  	   in_gift_certificate_id	 => in_gift_certificate_id,
10:28:45 2538  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
10:28:45 2539  	   in_updated_by		 => in_updated_by
10:28:45 2540  	 );
10:28:45 2541  
10:28:45 2542  	 IF SQL%ROWCOUNT = 0 THEN
10:28:45 2543  	   RAISE BAD_GIFT_CERTIFICATE_ID;
10:28:45 2544  	 END IF;
10:28:45 2545  
10:28:45 2546  EXCEPTION
10:28:45 2547  WHEN BAD_GIFT_CERTIFICATE_ID THEN
10:28:45 2548  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2549  	   SPROC_NAME, 'No such gift certificate');
10:28:45 2550  WHEN BAD_STATUS_ID THEN
10:28:45 2551  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 2552  	   SPROC_NAME, 'Bad paypal status id');
10:28:45 2553  WHEN OTHERS THEN
10:28:45 2554  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2555  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2556  END UPDATE_GIFT_CERTIFICATE_STATUS;
10:28:45 2557  
10:28:45 2558  /******************************************************************************/
10:28:45 2559  
10:28:45 2560  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:28:45 2561  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:45 2562  	 out_result_set OUT SYS_REFCURSOR
10:28:45 2563  ) AS
10:28:45 2564  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
10:28:45 2565  -- VARIABLES
10:28:45 2566  temp_invoice_id NUMBER;
10:28:45 2567  -- EXCEPTIONS
10:28:45 2568  BAD_INVOICE_ID EXCEPTION;
10:28:45 2569  BEGIN
10:28:45 2570  
10:28:45 2571  	 BEGIN
10:28:45 2572  	   SELECT
10:28:45 2573  	     I.ID into temp_invoice_id
10:28:45 2574  	   FROM
10:28:45 2575  	     INVOICE I
10:28:45 2576  	   WHERE
10:28:45 2577  	     I.ID = in_invoice_id;
10:28:45 2578  	   EXCEPTION
10:28:45 2579  	     WHEN NO_DATA_FOUND THEN
10:28:45 2580  	       RAISE BAD_INVOICE_ID;
10:28:45 2581  	 END;
10:28:45 2582  
10:28:45 2583  	 OPEN out_result_set FOR
10:28:45 2584  	   SELECT
10:28:45 2585  	     gc.EXPIRATION_DATE,
10:28:45 2586  	     ch.name,
10:28:45 2587  	     ch.id offer_chain_id,
10:28:45 2588  	     gc.sender_email,
10:28:45 2589  	     gc.sender_name,
10:28:45 2590  	     gc.recipient_email,
10:28:45 2591  	     gc.recipient_name,
10:28:45 2592  	     gc.purchase_date,
10:28:45 2593  	     gc.redemption_date,
10:28:45 2594  	     gc.purchaser_group_id,
10:28:45 2595  	     gc.redeemer_group_id,
10:28:45 2596  	     gc.code,
10:28:45 2597  	     gc.gift_message,
10:28:45 2598  	     gc.recipient_notify_date,
10:28:45 2599  	     gc.id
10:28:45 2600  	   FROM
10:28:45 2601  	     GIFT_CERTIFICATE gc
10:28:45 2602  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
10:28:45 2603  	   WHERE
10:28:45 2604  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
10:28:45 2605  
10:28:45 2606  EXCEPTION
10:28:45 2607  WHEN BAD_INVOICE_ID THEN
10:28:45 2608  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2609  	   SPROC_NAME, 'No such invoice');
10:28:45 2610  WHEN OTHERS THEN
10:28:45 2611  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2612  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2613  END GET_GC_BY_PURCH_INVOICE_ID;
10:28:45 2614  
10:28:45 2615  
10:28:45 2616  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
10:28:45 2617  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:45 2618  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
10:28:45 2619  ) AS
10:28:45 2620  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
10:28:45 2621  -- VARIABLES
10:28:45 2622  temp_invoice_id NUMBER;
10:28:45 2623  -- EXCEPTIONS
10:28:45 2624  BAD_INVOICE_ID EXCEPTION;
10:28:45 2625  BEGIN
10:28:45 2626  
10:28:45 2627  	 BEGIN
10:28:45 2628  	   SELECT
10:28:45 2629  	     I.ID into temp_invoice_id
10:28:45 2630  	   FROM
10:28:45 2631  	     INVOICE I
10:28:45 2632  	   WHERE
10:28:45 2633  	     I.ID = in_invoice_id;
10:28:45 2634  	   EXCEPTION
10:28:45 2635  	     WHEN NO_DATA_FOUND THEN
10:28:45 2636  	       RAISE BAD_INVOICE_ID;
10:28:45 2637  	 END;
10:28:45 2638  
10:28:45 2639  	 BEGIN
10:28:45 2640  	   SELECT
10:28:45 2641  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
10:28:45 2642  	   FROM
10:28:45 2643  	     GIFT_CERTIFICATE
10:28:45 2644  	   WHERE
10:28:45 2645  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
10:28:45 2646  	   EXCEPTION
10:28:45 2647  	     WHEN NO_DATA_FOUND THEN
10:28:45 2648  	       out_gift_certificate_id := NULL;
10:28:45 2649  	 END;
10:28:45 2650  
10:28:45 2651  EXCEPTION
10:28:45 2652  WHEN BAD_INVOICE_ID THEN
10:28:45 2653  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2654  	   SPROC_NAME, 'No such invoice');
10:28:45 2655  WHEN OTHERS THEN
10:28:45 2656  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2658  END GET_GC_ID_BY_PURCH_INVOICE_ID;
10:28:45 2659  
10:28:45 2660  /******************************************************************************/
10:28:45 2661  
10:28:45 2662  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
10:28:45 2663  	 in_old_fin_instrument_id   IN NUMBER,
10:28:45 2664  	 in_old_fin_instrument_type IN NUMBER,
10:28:45 2665  	 in_new_fin_instrument_id   IN NUMBER,
10:28:45 2666  	 in_new_fin_instrument_type IN NUMBER,
10:28:45 2667  	 in_updated_by		    IN VARCHAR2
10:28:45 2668  ) AS
10:28:45 2669  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
10:28:45 2670  -- variables
10:28:45 2671  temp_out_transaction_id NUMBER;
10:28:45 2672  temp_out_charge_id      NUMBER;
10:28:45 2673  var_accounts_count      NUMBER;
10:28:45 2674  var_transaction_type_old  "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
10:28:45 2675  var_transaction_type	 "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
10:28:45 2676  -- EXCEPTIONS
10:28:45 2677  BAD_OLD_CC   EXCEPTION;
10:28:45 2678  BAD_OLD_PP   EXCEPTION;
10:28:45 2679  BAD_OLD_TYPE EXCEPTION;
10:28:45 2680  BAD_NEW_CC   EXCEPTION;
10:28:45 2681  BAD_NEW_PP   EXCEPTION;
10:28:45 2682  BAD_NEW_TYPE EXCEPTION;
10:28:45 2683  DIFFERENT_OWNERS EXCEPTION;
10:28:45 2684  BEGIN
10:28:45 2685  
10:28:45 2686  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD THEN
10:28:45 2687  	   IF PROCS_FIN_INSTRUMENTS_V24.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 2688  	     -- throw exception: bad old credit card
10:28:45 2689  	     RAISE BAD_OLD_CC;
10:28:45 2690  	   END IF;
10:28:45 2691  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL THEN
10:28:45 2692  	   IF PROCS_FIN_INSTRUMENTS_V24.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 2693  	     -- throw exception: bad old paypal
10:28:45 2694  	     RAISE BAD_OLD_PP;
10:28:45 2695  	   END IF;
10:28:45 2696  	 ELSE
10:28:45 2697  	   -- throw exception: bad instrument type
10:28:45 2698  	   RAISE BAD_OLD_TYPE;
10:28:45 2699  	 END IF;
10:28:45 2700  
10:28:45 2701  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD THEN
10:28:45 2702  	   IF PROCS_FIN_INSTRUMENTS_V24.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 2703  	     -- throw exception: bad new credit card
10:28:45 2704  	     RAISE BAD_NEW_CC;
10:28:45 2705  	   END IF;
10:28:45 2706  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL THEN
10:28:45 2707  	   IF PROCS_FIN_INSTRUMENTS_V24.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:45 2708  	     -- throw exception: bad new paypal
10:28:45 2709  	     RAISE BAD_NEW_PP;
10:28:45 2710  	   END IF;
10:28:45 2711  	 ELSE
10:28:45 2712  	   -- throw exception: bad new instrument type
10:28:45 2713  	   RAISE BAD_NEW_TYPE;
10:28:45 2714  	 END IF;
10:28:45 2715  
10:28:45 2716  	 -- Check that owner of both instruments - same man
10:28:45 2717  
10:28:45 2718  	 SELECT count(1) into var_accounts_count FROM (
10:28:45 2719  	   SELECT
10:28:45 2720  	     CC.ACCOUNT_ID
10:28:45 2721  	   FROM
10:28:45 2722  	     CREDIT_CARD CC
10:28:45 2723  	   WHERE
10:28:45 2724  	     (
10:28:45 2725  	       CC.ID = in_old_fin_instrument_id
10:28:45 2726  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD
10:28:45 2727  	     )
10:28:45 2728  	     OR
10:28:45 2729  	     (
10:28:45 2730  	       CC.ID = in_new_fin_instrument_id
10:28:45 2731  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V24.INSTRUMENT_CREDIT_CARD
10:28:45 2732  	     )
10:28:45 2733  	   UNION
10:28:45 2734  	   SELECT
10:28:45 2735  	     PP.ACCOUNT_ID
10:28:45 2736  	   FROM
10:28:45 2737  	     PAYPAL PP
10:28:45 2738  	   WHERE
10:28:45 2739  	     (
10:28:45 2740  	       PP.ID = in_old_fin_instrument_id
10:28:45 2741  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL
10:28:45 2742  	     )
10:28:45 2743  	     OR
10:28:45 2744  	     (
10:28:45 2745  	       PP.ID = in_new_fin_instrument_id
10:28:45 2746  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL
10:28:45 2747  	     )
10:28:45 2748  	 )
10:28:45 2749  	 WHERE
10:28:45 2750  	   account_id IS NOT NULL;
10:28:45 2751  
10:28:45 2752  	 IF (var_accounts_count > 1) THEN
10:28:45 2753  	   -- Throw exception: different owners of instruments
10:28:45 2754  	   RAISE DIFFERENT_OWNERS;
10:28:45 2755  	 END IF;
10:28:45 2756  
10:28:45 2757  	 FOR f_sub IN (
10:28:45 2758  	   select
10:28:45 2759  	     s.id
10:28:45 2760  	   FROM
10:28:45 2761  	     subscription s
10:28:45 2762  	   WHERE
10:28:45 2763  	     (
10:28:45 2764  	       s.subscription_status_id = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE OR
10:28:45 2765  	       s.subscription_status_id = GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED OR
10:28:45 2766  	       s.subscription_status_id = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD
10:28:45 2767  	     )
10:28:45 2768  	     AND
10:28:45 2769  	     s.instrument_type_id = in_old_fin_instrument_type AND
10:28:45 2770  	     s.instrument_id = in_old_fin_instrument_id
10:28:45 2771  	 ) LOOP
10:28:45 2772  	   PROCS_SUBSCRIPTION_CRU_V24.UPDATE_SUBSCRIPTION(
10:28:45 2773  	     in_subscription_id => f_sub.id,
10:28:45 2774  	     in_instrument_type_id => in_new_fin_instrument_type,
10:28:45 2775  	     in_instrument_id => in_new_fin_instrument_id,
10:28:45 2776  	     in_updated_by => in_updated_by
10:28:45 2777  	   );
10:28:45 2778  	 END LOOP;
10:28:45 2779  
10:28:45 2780  	 FOR f_open_charge IN (
10:28:45 2781  	   select
10:28:45 2782  	     ch.id,
10:28:45 2783  	     ch.invoice_id,
10:28:45 2784  	     ch.transaction_id,
10:28:45 2785  	     ch.charge_amount
10:28:45 2786  	   FROM
10:28:45 2787  	     charge ch
10:28:45 2788  	   WHERE
10:28:45 2789  	     ch.instrument_type_id = in_old_fin_instrument_type
10:28:45 2790  	     AND ch.instrument_id = in_old_fin_instrument_id
10:28:45 2791  	     AND ch.charge_status_id = GLOBAL_STATUSES_V24.CHARGE_OPENED
10:28:45 2792  	 ) LOOP
10:28:45 2793  
10:28:45 2794  	   FOR f_pending_transaction IN (
10:28:45 2795  	     select
10:28:45 2796  	       id, transaction_amount, order_id, is_refund
10:28:45 2797  	     from
10:28:45 2798  	       transaction
10:28:45 2799  	     where
10:28:45 2800  	       id = f_open_charge.transaction_id
10:28:45 2801  	       and transaction_status_id = GLOBAL_STATUSES_V24.TRANSACTION_PENDING
10:28:45 2802  	   ) LOOP
10:28:45 2803  
10:28:45 2804  	     SELECT
10:28:45 2805  	       DECODE(TRANSACTION_TYPE_CODE, 'RECURRING_BILLING', 'RECURRING_BILLING_USER_UPDATE',
10:28:45 2806  					     'GRACE_PERIOD_FINAL', 'GRACE_PERIOD_USER_UPDATE',
10:28:45 2807  					     TRANSACTION_TYPE_CODE)
10:28:45 2808  	     INTO var_transaction_type
10:28:45 2809  	     FROM
10:28:45 2810  	       Transaction
10:28:45 2811  	     WHERE
10:28:45 2812  	       id = f_pending_transaction.id
10:28:45 2813  	       AND ROWNUM <= 1;
10:28:45 2814  
10:28:45 2815  	     PROCS_TRANSACTION_V24.CREATE_TRANSACTION (
10:28:45 2816  	       in_transaction_id => NULL,
10:28:45 2817  	       in_status_id  => GLOBAL_STATUSES_V24.TRANSACTION_PENDING,
10:28:45 2818  	       in_amount     => f_pending_transaction.transaction_amount,
10:28:45 2819  	       in_created_by => in_updated_by,
10:28:45 2820  	       in_order_id   => null,
10:28:45 2821  	       in_is_refund  => f_pending_transaction.is_refund,
10:28:45 2822  	       in_transaction_type_code => var_transaction_type,
10:28:45 2823  	       out_transaction_id => temp_out_transaction_id
10:28:45 2824  	     );
10:28:45 2825  
10:28:45 2826  	     PROCS_TRANSACTION_V24.UPDATE_TRANSACTION_STATUS(
10:28:45 2827  	       in_transaction_id => f_pending_transaction.id,
10:28:45 2828  	       in_updated_by	 => in_updated_by,
10:28:45 2829  	       in_transaction_status_id  => GLOBAL_STATUSES_V24.TRANSACTION_CLOSED
10:28:45 2830  	     );
10:28:45 2831  
10:28:45 2832  	     -- Create new charge
10:28:45 2833  	     PROCS_CHARGE_V24.CREATE_CHARGE (
10:28:45 2834  	       in_invoice_id	     => f_open_charge.invoice_id,
10:28:45 2835  	       in_transaction_id     => temp_out_transaction_id,
10:28:45 2836  	       in_instrument_type_id => in_new_fin_instrument_type,
10:28:45 2837  	       in_instrument_id      => in_new_fin_instrument_id,
10:28:45 2838  	       in_charge_amount      => f_open_charge.charge_amount,
10:28:45 2839  	       in_created_by	     => in_updated_by,
10:28:45 2840  	       in_charge_status_id   => GLOBAL_STATUSES_V24.CHARGE_OPENED,
10:28:45 2841  	       out_charge_id	     => temp_out_charge_id
10:28:45 2842  	     );
10:28:45 2843  	     -- Cancel old charge
10:28:45 2844  	     PROCS_CHARGE_V24.UPDATE_CHARGE_STATUS(
10:28:45 2845  	       in_charge_id	   => f_open_charge.id,
10:28:45 2846  	       in_updated_by	   => in_updated_by,
10:28:45 2847  	       in_charge_status_id => GLOBAL_STATUSES_V24.CHARGE_CANCELED
10:28:45 2848  	     );
10:28:45 2849  
10:28:45 2850  	     PROCS_ADJUSTMENTS_V24.UPDATE_INVOICE_ADJUSTMENT(
10:28:45 2851  	       IN_INVOICE_ID => f_open_charge.invoice_id,
10:28:45 2852  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
10:28:45 2853  	       IN_CHARGE_ID => temp_out_charge_id,
10:28:45 2854  	       IN_UPDATED_BY => in_updated_by
10:28:45 2855  	     );
10:28:45 2856  
10:28:45 2857  	   END LOOP;
10:28:45 2858  	 END LOOP;
10:28:45 2859  
10:28:45 2860  EXCEPTION
10:28:45 2861  WHEN BAD_OLD_CC THEN
10:28:45 2862  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2863  	   SPROC_NAME, 'Trying to switch from non existing credit card');
10:28:45 2864  WHEN BAD_OLD_PP THEN
10:28:45 2865  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2866  	   SPROC_NAME, 'Trying to switch from non existing paypal');
10:28:45 2867  WHEN BAD_OLD_TYPE THEN
10:28:45 2868  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2869  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
10:28:45 2870  WHEN BAD_NEW_CC THEN
10:28:45 2871  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2872  	   SPROC_NAME, 'Trying to switch to non existing credit card');
10:28:45 2873  WHEN BAD_NEW_PP THEN
10:28:45 2874  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2875  	   SPROC_NAME, 'Trying to switch to non existing paypal');
10:28:45 2876  WHEN BAD_NEW_TYPE THEN
10:28:45 2877  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 2878  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
10:28:45 2879  WHEN DIFFERENT_OWNERS THEN
10:28:45 2880  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 2881  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
10:28:45 2882  WHEN OTHERS THEN
10:28:45 2883  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 2884  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 2885  END SWITCH_FINANCIAL_INSTRUMENT;
10:28:45 2886  
10:28:45 2887  /******************************************************************************/
10:28:45 2888  
10:28:45 2889  /*
10:28:45 2890  	   Note, this returns paypal records which are in the given window of time
10:28:45 2891  	   based on their creation date, not their expiration date, because we've seen
10:28:45 2892  	   suspicious values in the data for expiration dates. The java layer should
10:28:45 2893  	   inspect the expiration dates and decide whether or not to act on the data.
10:28:45 2894  */
10:28:45 2895  
10:28:45 2896  PROCEDURE GET_EXPIRING_PAYPAL (
10:28:45 2897  	 in_expire_window_days	 IN NUMBER,
10:28:45 2898  	 in_creation_limit_days  IN NUMBER,
10:28:45 2899  	 in_retry_throttle_name  IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
10:28:45 2900  	 out_result_set 	 OUT SYS_REFCURSOR
10:28:45 2901  ) AS
10:28:45 2902  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_EXPIRING_PAYPAL';
10:28:45 2903  var_rows_to_return CONSTANT NUMBER := 1000;
10:28:45 2904  BEGIN
10:28:45 2905  	 OPEN out_result_set FOR
10:28:45 2906  	 SELECT * FROM (
10:28:45 2907  	       SELECT
10:28:45 2908  	       ac.group_id	   AS group_id,
10:28:45 2909  	       pp.id		   AS paypal_id,
10:28:45 2910  	       sb.id		   AS subscription_id,
10:28:45 2911  	       pp.create_date	   AS paypal_creation_date,
10:28:45 2912  	       pp.expiration_date  AS paypal_expiration_date,
10:28:45 2913  	       lc.end_date	   AS license_end_date
10:28:45 2914  	   FROM license lc
10:28:45 2915  	   INNER JOIN subscription sb
10:28:45 2916  	   ON lc.subscription_id = sb.id
10:28:45 2917  	   INNER JOIN paypal pp
10:28:45 2918  	   ON pp.account_id = sb.account_id
10:28:45 2919  	   INNER JOIN account ac
10:28:45 2920  	   ON pp.account_id = ac.id
10:28:45 2921  	   WHERE SYSDATE <= lc.end_date
10:28:45 2922  	     AND SYSDATE + in_expire_window_days > lc.end_date
10:28:45 2923  	     AND pp.paypal_status_id = GLOBAL_STATUSES_V24.PAYPAL_ACTIVE
10:28:45 2924  	     AND lc.license_status_id IN (GLOBAL_STATUSES_V24.LICENSE_ACTIVE,
10:28:45 2925  					  GLOBAL_STATUSES_V24.LICENSE_IN_GRACE_PERIOD)
10:28:45 2926  	     AND pp.id = sb.instrument_id
10:28:45 2927  	     AND sb.instrument_type_id = GLOBAL_ENUMS_V24.INSTRUMENT_PAYPAL
10:28:45 2928  	     AND sb.subscription_status_id IN (GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE,
10:28:45 2929  					       GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD)
10:28:45 2930  	     AND pp.create_date + in_creation_limit_days <= lc.end_date
10:28:45 2931  	     AND NOT EXISTS(
10:28:45 2932  	       SELECT NULL
10:28:45 2933  	       FROM process_retry_throttle rt
10:28:45 2934  	       WHERE rt.process_name = in_retry_throttle_name
10:28:45 2935  		 AND rt.generic_id = pp.id
10:28:45 2936  	     )
10:28:45 2937  	     AND ROWNUM <= 10 * var_rows_to_return
10:28:45 2938  	   ORDER BY dbms_random.value
10:28:45 2939  	 )
10:28:45 2940  	 WHERE ROWNUM <= var_rows_to_return;
10:28:45 2941  END GET_EXPIRING_PAYPAL;
10:28:45 2942  
10:28:45 2943  /******************************************************************************/
10:28:45 2944  
10:28:45 2945  END PROCS_FIN_INSTRUMENTS_V24;
10:28:45 2946  .
10:28:45 SQL> /

Package body created.

Elapsed: 00:00:00.40
10:28:45 SQL> 
10:28:45 SQL> prompt Compiling body for procs_group_account.sql
Compiling body for procs_group_account.sql
10:28:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V24" AS
10:28:45   2  
10:28:45   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
10:28:45   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
10:28:45   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
10:28:45   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:45   7  ) AS
10:28:45   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
10:28:45   9  BEGIN
10:28:45  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V24.UPDATE_SUBSCRIPTION_SHARE (
10:28:45  11  	  in_id 		=> in_sub_share_id,
10:28:45  12  	  in_needs_entitlements => in_need_entitlements,
10:28:45  13  	  in_updated_by 	=> in_updater
10:28:45  14  	);
10:28:45  15  END UPDATE_SS_NEED_ENTITLEMENTS;
10:28:45  16  
10:28:45  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
10:28:45  18  	out_result_set OUT SYS_REFCURSOR
10:28:45  19  ) AS
10:28:45  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
10:28:45  21  BEGIN
10:28:45  22  	OPEN out_result_set FOR
10:28:45  23  	SELECT * FROM (
10:28:45  24  	  SELECT DISTINCT
10:28:45  25  	    ga.Subscription_Id,
10:28:45  26  	    A.Group_Id Borrower_Group_Id,
10:28:45  27  	    L.Offer_Id,
10:28:45  28  	    ss.id Subscription_Share_id
10:28:45  29  	  FROM
10:28:45  30  	    Subscription_Share Ss,
10:28:45  31  	    Group_Account Ga,
10:28:45  32  	    Account A,
10:28:45  33  	    License l
10:28:45  34  	  WHERE
10:28:45  35  	    Ss.Group_Account_Id        = ga.id
10:28:45  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V24.TRUE
10:28:45  37  	    AND Ss.Borrower_Account_Id = A.Id
10:28:45  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
10:28:45  39  	    AND ROWNUM <= 5000
10:28:45  40  	  ORDER BY dbms_random.value
10:28:45  41  ) WHERE
10:28:45  42  	ROWNUM <= 1000;
10:28:45  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
10:28:45  44  
10:28:45  45  PROCEDURE EXPIRE_SUB_SHARE(
10:28:45  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
10:28:45  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:45  48  ) AS
10:28:45  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
10:28:45  50  BEGIN
10:28:45  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V24.UPDATE_SUBSCRIPTION_SHARE (
10:28:45  52  	  in_id 	=> in_sub_share_id,
10:28:45  53  	  in_end_date	=> SYSDATE,
10:28:45  54  	  in_updated_by => in_updater,
10:28:45  55  	  in_needs_entitlements => 1
10:28:45  56  	);
10:28:45  57  END EXPIRE_SUB_SHARE;
10:28:45  58  
10:28:45  59  PROCEDURE EXPIRE_ALL_SHARES (
10:28:45  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
10:28:45  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:45  62  ) AS
10:28:45  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
10:28:45  64  BEGIN
10:28:45  65  	UPDATE SUBSCRIPTION_SHARE SET
10:28:45  66  	  END_DATE = SYSDATE,
10:28:45  67  	  UPDATED_BY = in_updated_by,
10:28:45  68  	  UPDATE_DATE = SYSDATE
10:28:45  69  	WHERE
10:28:45  70  	  GROUP_ACCOUNT_ID = in_group_account_id
10:28:45  71  	AND
10:28:45  72  	  SYSDATE < END_DATE;
10:28:45  73  EXCEPTION
10:28:45  74  	WHEN OTHERS THEN
10:28:45  75  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
10:28:45  77  END EXPIRE_ALL_SHARES;
10:28:45  78  
10:28:45  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
10:28:45  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
10:28:45  81  	in_start	 IN  NUMBER,
10:28:45  82  	in_end		 IN  NUMBER,
10:28:45  83  	in_expired	 IN  NUMBER,
10:28:45  84  	out_result_set	 OUT SYS_REFCURSOR,
10:28:45  85  	out_shares_count OUT NUMBER
10:28:45  86  ) AS
10:28:45  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
10:28:45  88  range_diff NUMBER := 0;
10:28:45  89  upper_bond_diff NUMBER := 0;
10:28:45  90  l_start NUMBER := 0;
10:28:45  91  l_end   NUMBER := 0;
10:28:45  92  BEGIN
10:28:45  93  	--Normalize the end points [START]
10:28:45  94  	IF (in_start IS NULL OR in_start < 0) Then
10:28:45  95  	  l_start := 0;
10:28:45  96  	ELSE
10:28:45  97  	  l_start := in_start;
10:28:45  98  	END IF;
10:28:45  99  
10:28:45 100  	IF (in_end IS NULL) Then
10:28:45 101  	  l_end := 11;
10:28:45 102  	ELSE
10:28:45 103  	  l_end := in_end;
10:28:45 104  	END IF;
10:28:45 105  
10:28:45 106  	l_start := l_start + 1;
10:28:45 107  	l_end	:= l_end   + 1;
10:28:45 108  
10:28:45 109  	range_diff := l_end - l_start;
10:28:45 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V24.MAX_RETURN_COUNT;
10:28:45 111  
10:28:45 112  	IF (upper_bond_diff > 0) Then
10:28:45 113  	  l_end := l_end - upper_bond_diff;
10:28:45 114  	END IF;
10:28:45 115  	--Normalize the end points [END]
10:28:45 116  
10:28:45 117  	BEGIN
10:28:45 118  	  SELECT
10:28:45 119  	    COUNT(1) INTO out_shares_count
10:28:45 120  	  FROM
10:28:45 121  	    GROUP_ACCOUNT ga,
10:28:45 122  	    SUBSCRIPTION_SHARE ss,
10:28:45 123  	    ACCOUNT a
10:28:45 124  	  WHERE
10:28:45 125  	    a.GROUP_ID		= in_group_id AND
10:28:45 126  	    a.Id		= ss.borrower_account_id And
10:28:45 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
10:28:45 128  	END;
10:28:45 129  
10:28:45 130  	IF in_expired > 0 THEN
10:28:45 131  	BEGIN
10:28:45 132  	    OPEN out_result_set FOR
10:28:45 133  	    SELECT
10:28:45 134  	      *
10:28:45 135  	    FROM
10:28:45 136  	      (SELECT rownum rnum, q.*
10:28:45 137  	       FROM
10:28:45 138  		(SELECT
10:28:45 139  		   ga.SUBSCRIPTION_ID,
10:28:45 140  		   ss.START_DATE,
10:28:45 141  		   ss.END_DATE,
10:28:45 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
10:28:45 143  		 FROM
10:28:45 144  		   GROUP_ACCOUNT ga,
10:28:45 145  		   SUBSCRIPTION_SHARE ss,
10:28:45 146  		   ACCOUNT a,
10:28:45 147  		   SUBSCRIPTION s,
10:28:45 148  		   ACCOUNT a2
10:28:45 149  		 WHERE
10:28:45 150  		   a.GROUP_ID	       = in_group_id AND
10:28:45 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
10:28:45 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
10:28:45 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
10:28:45 154  		   s.ACCOUNT_ID        = a2.ID
10:28:45 155  		) Q
10:28:45 156  	      WHERE rownum <= l_end)
10:28:45 157  	    WHERE rnum >= l_Start;
10:28:45 158  	END;
10:28:45 159  	ELSE
10:28:45 160  	BEGIN
10:28:45 161  	    OPEN out_result_set FOR
10:28:45 162  	    SELECT
10:28:45 163  	      *
10:28:45 164  	    FROM
10:28:45 165  	      (SELECT rownum rnum, q.*
10:28:45 166  	       FROM
10:28:45 167  		(SELECT
10:28:45 168  		   ga.SUBSCRIPTION_ID,
10:28:45 169  		   ss.START_DATE,
10:28:45 170  		   ss.END_DATE,
10:28:45 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
10:28:45 172  		 FROM
10:28:45 173  		   GROUP_ACCOUNT ga,
10:28:45 174  		   SUBSCRIPTION_SHARE ss,
10:28:45 175  		   ACCOUNT a,
10:28:45 176  		   SUBSCRIPTION s,
10:28:45 177  		   ACCOUNT a2
10:28:45 178  		 WHERE
10:28:45 179  		   a.GROUP_ID	       = in_group_id AND
10:28:45 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
10:28:45 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
10:28:45 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
10:28:45 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
10:28:45 184  		   s.ACCOUNT_ID        = a2.ID
10:28:45 185  		) Q
10:28:45 186  	      WHERE rownum <= l_end)
10:28:45 187  	    WHERE rnum >= l_start;
10:28:45 188  	  END;
10:28:45 189  	END IF;
10:28:45 190  EXCEPTION
10:28:45 191  WHEN NO_DATA_FOUND THEN
10:28:45 192  	NULL;
10:28:45 193  WHEN OTHERS THEN
10:28:45 194  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
10:28:45 196  END SUB_SHARE_BY_GROUP_ID;
10:28:45 197  
10:28:45 198  PROCEDURE IS_VALID_IP_ADDRESS (
10:28:45 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:45 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:28:45 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:28:45 202  	out_is_valid	    OUT NUMBER
10:28:45 203  ) AS
10:28:45 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
10:28:45 205  BEGIN
10:28:45 206  	SELECT
10:28:45 207  	  COUNT(1) INTO out_is_valid
10:28:45 208  	FROM
10:28:45 209  	  GROUP_ACCOUNT_IP_RANGE,
10:28:45 210  	  GROUP_ACCOUNT,
10:28:45 211  	  SUBSCRIPTION,
10:28:45 212  	  OFFER_CHAIN
10:28:45 213  	WHERE
10:28:45 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
10:28:45 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:28:45 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
10:28:45 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
10:28:45 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
10:28:45 219  	 (
10:28:45 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
10:28:45 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
10:28:45 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
10:28:45 223  	 ) AND
10:28:45 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V24.GROUP_ACC_IP_RNG_ACTIVE;
10:28:45 225  EXCEPTION
10:28:45 226  WHEN OTHERS THEN
10:28:45 227  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
10:28:45 229  END IS_VALID_IP_ADDRESS;
10:28:45 230  
10:28:45 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
10:28:45 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:45 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:28:45 234  	out_is_valid	    OUT NUMBER
10:28:45 235  ) AS
10:28:45 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
10:28:45 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
10:28:45 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
10:28:45 239  BEGIN
10:28:45 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
10:28:45 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
10:28:45 242  
10:28:45 243  	SELECT
10:28:45 244  	  COUNT(1) INTO out_is_valid
10:28:45 245  	FROM
10:28:45 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
10:28:45 247  	  GROUP_ACCOUNT ga,
10:28:45 248  	  SUBSCRIPTION s,
10:28:45 249  	  OFFER_CHAIN oc
10:28:45 250  	WHERE
10:28:45 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
10:28:45 252  	  ga.SUBSCRIPTION_ID = s.ID AND
10:28:45 253  	  s.OFFER_CHAIN_ID = oc.ID AND
10:28:45 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
10:28:45 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
10:28:45 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
10:28:45 257  	  gaed.IS_ACTIVE = 1;
10:28:45 258  EXCEPTION
10:28:45 259  WHEN OTHERS THEN
10:28:45 260  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
10:28:45 262  END IS_VALID_EMAIL_DOMAIN;
10:28:45 263  
10:28:45 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
10:28:45 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
10:28:45 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
10:28:45 267  	out_Result_Set	       OUT Sys_Refcursor
10:28:45 268  ) AS
10:28:45 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
10:28:45 270  BEGIN
10:28:45 271  	BEGIN
10:28:45 272  	   OPEN out_result_set FOR
10:28:45 273  	   SELECT
10:28:45 274  	      ss.ID,
10:28:45 275  	      ss.GROUP_ACCOUNT_ID,
10:28:45 276  	      ss.BORROWER_ACCOUNT_ID,
10:28:45 277  	      ss.IP_ADDRESS,
10:28:45 278  	      ss.START_DATE,
10:28:45 279  	      ss.END_DATE,
10:28:45 280  	      ss.CREATED_BY,
10:28:45 281  	      ss.CREATE_DATE,
10:28:45 282  	      ss.UPDATED_BY,
10:28:45 283  	      ss.UPDATE_DATE,
10:28:45 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
10:28:45 285  	   FROM
10:28:45 286  	     SUBSCRIPTION_SHARE ss,
10:28:45 287  	     ACCOUNT a
10:28:45 288  	   WHERE
10:28:45 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
10:28:45 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
10:28:45 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
10:28:45 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
10:28:45 293  	END;
10:28:45 294  EXCEPTION
10:28:45 295  WHEN OTHERS THEN
10:28:45 296  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
10:28:45 298  END GET_SUBSCRIPTION_SHARE;
10:28:45 299  
10:28:45 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
10:28:45 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
10:28:45 302  	out_result_set	   OUT SYS_REFCURSOR
10:28:45 303  ) As
10:28:45 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
10:28:45 305  BEGIN
10:28:45 306  OPEN out_result_set FOR
10:28:45 307  	SELECT
10:28:45 308  	  ID,
10:28:45 309  	  SUBSCRIPTION_ID,
10:28:45 310  	  GROUP_NAME,
10:28:45 311  	  FIRST_NAME,
10:28:45 312  	  LAST_NAME,
10:28:45 313  	  EMAIL,
10:28:45 314  	  PHONE,
10:28:45 315  	  ORGANIZATION_TYPE,
10:28:45 316  	  SEATS,
10:28:45 317  	  SEAT_TTL_IN_HOURS,
10:28:45 318  	  CREATE_DATE,
10:28:45 319  	  CREATED_BY,
10:28:45 320  	  UPDATE_DATE,
10:28:45 321  	  UPDATED_BY
10:28:45 322  	FROM
10:28:45 323  	  GROUP_ACCOUNT
10:28:45 324  	Where
10:28:45 325  	  Subscription_Id = in_subscription_id;
10:28:45 326  EXCEPTION
10:28:45 327  WHEN OTHERS THEN
10:28:45 328  	Procs_Common_V24.Throw_Exception(APP_EXCEPTION_CODES_V24.Unknown_Error,
10:28:45 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 330  
10:28:45 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
10:28:45 332  
10:28:45 333  PROCEDURE CREATE_GROUP_ACCOUNT (
10:28:45 334  	in_subscription_id	 IN NUMBER,
10:28:45 335  	in_group_name		 IN VARCHAR2,
10:28:45 336  	in_first_name		 IN VARCHAR2,
10:28:45 337  	in_last_name		 IN VARCHAR2,
10:28:45 338  	in_email		 IN VARCHAR2,
10:28:45 339  	in_phone		 IN VARCHAR2,
10:28:45 340  	in_organization_type	 IN VARCHAR2,
10:28:45 341  	in_seats		 IN NUMBER,
10:28:45 342  	in_seat_ttl_in_hours	 IN NUMBER,
10:28:45 343  	in_ip			 IN NUMBER,
10:28:45 344  	in_created_by		 IN VARCHAR2
10:28:45 345  ) AS
10:28:45 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
10:28:45 347  BEGIN
10:28:45 348  
10:28:45 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V24.CREATE_GROUP_ACCOUNT(
10:28:45 350  	  in_subscription_id => in_subscription_id,
10:28:45 351  	  in_group_name => in_group_name,
10:28:45 352  	  in_first_name => in_first_name,
10:28:45 353  	  in_last_name => in_last_name,
10:28:45 354  	  in_email => in_email,
10:28:45 355  	  in_phone => in_phone,
10:28:45 356  	  in_organization_type => in_organization_type,
10:28:45 357  	  in_seats => in_seats,
10:28:45 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
10:28:45 359  	  in_ip => in_ip,
10:28:45 360  	  in_created_by => in_created_by
10:28:45 361  	);
10:28:45 362  
10:28:45 363  END CREATE_GROUP_ACCOUNT;
10:28:45 364  
10:28:45 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
10:28:45 366  	in_group_account_id IN NUMBER,
10:28:45 367  	in_start	    IN NUMBER,
10:28:45 368  	in_end		    IN NUMBER,
10:28:45 369  	out_Result_Set	    OUT Sys_Refcursor
10:28:45 370  ) AS
10:28:45 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
10:28:45 372  range_diff NUMBER := 0;
10:28:45 373  upper_bond_diff NUMBER := 0;
10:28:45 374  l_start NUMBER := 0;
10:28:45 375  l_end   NUMBER := 0;
10:28:45 376  BEGIN
10:28:45 377  	-- Normalize the end points [START]
10:28:45 378  	IF (in_start IS NULL OR in_start < 0) Then
10:28:45 379  	  l_start := 0;
10:28:45 380  	ELSE
10:28:45 381  	  l_start := in_start;
10:28:45 382  	END IF;
10:28:45 383  
10:28:45 384  	IF (in_end IS NULL) Then
10:28:45 385  	  l_end := 11;
10:28:45 386  	ELSE
10:28:45 387  	  l_end := in_end;
10:28:45 388  	END IF;
10:28:45 389  
10:28:45 390  	l_start := l_start + 1;
10:28:45 391  	l_end	:= l_end   + 1;
10:28:45 392  
10:28:45 393  	range_diff := l_end - l_start;
10:28:45 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V24.MAX_RETURN_COUNT;
10:28:45 395  
10:28:45 396  	IF (upper_bond_diff > 0) Then
10:28:45 397  	  l_end := l_end - upper_bond_diff;
10:28:45 398  	END IF;
10:28:45 399  	-- Normalize the end points [END]
10:28:45 400  
10:28:45 401  	BEGIN
10:28:45 402  	   OPEN out_result_set FOR
10:28:45 403  	   SELECT *
10:28:45 404  	   FROM
10:28:45 405  	     (SELECT rownum rnum, Q.*
10:28:45 406  	      FROM
10:28:45 407  	       (SELECT
10:28:45 408  		  ss.ID,
10:28:45 409  		  ss.GROUP_ACCOUNT_ID,
10:28:45 410  		  ss.BORROWER_ACCOUNT_ID,
10:28:45 411  		  ss.IP_ADDRESS,
10:28:45 412  		  ss.START_DATE,
10:28:45 413  		  ss.END_DATE,
10:28:45 414  		  ss.CREATED_BY,
10:28:45 415  		  ss.CREATE_DATE,
10:28:45 416  		  ss.UPDATED_BY,
10:28:45 417  		  ss.UPDATE_DATE,
10:28:45 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
10:28:45 419  		FROM
10:28:45 420  		  SUBSCRIPTION_SHARE ss,
10:28:45 421  		  ACCOUNT a,
10:28:45 422  		  LICENSE l,
10:28:45 423  		  GROUP_ACCOUNT ga
10:28:45 424  		WHERE
10:28:45 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
10:28:45 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
10:28:45 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
10:28:45 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
10:28:45 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
10:28:45 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
10:28:45 431  	      ) Q
10:28:45 432  	    WHERE rownum <= l_end)
10:28:45 433  	  WHERE rnum >= l_start;
10:28:45 434  	END;
10:28:45 435  EXCEPTION
10:28:45 436  WHEN OTHERS THEN
10:28:45 437  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
10:28:45 439  END GET_SUBSCRIPTION_SHARES;
10:28:45 440  
10:28:45 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
10:28:45 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:28:45 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:28:45 444  	out_result_set	      OUT SYS_REFCURSOR
10:28:45 445  ) AS
10:28:45 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
10:28:45 447  BEGIN
10:28:45 448  	BEGIN
10:28:45 449  	  OPEN out_result_set FOR
10:28:45 450  	  SELECT
10:28:45 451  	    ID,
10:28:45 452  	    SUBSCRIPTION_ID,
10:28:45 453  	    GROUP_NAME,
10:28:45 454  	    FIRST_NAME,
10:28:45 455  	    LAST_NAME,
10:28:45 456  	    EMAIL,
10:28:45 457  	    PHONE,
10:28:45 458  	    ORGANIZATION_TYPE,
10:28:45 459  	    SEATS,
10:28:45 460  	    SEAT_TTL_IN_HOURS,
10:28:45 461  	    CREATE_DATE,
10:28:45 462  	    CREATED_BY,
10:28:45 463  	    UPDATE_DATE,
10:28:45 464  	    UPDATED_BY
10:28:45 465  	  FROM
10:28:45 466  	    GROUP_ACCOUNT
10:28:45 467  	  WHERE
10:28:45 468  	    ID IN (
10:28:45 469  	      SELECT
10:28:45 470  		GROUP_ACCOUNT_ID
10:28:45 471  	      FROM
10:28:45 472  		GROUP_ACCOUNT_IP_RANGE,
10:28:45 473  		GROUP_ACCOUNT,
10:28:45 474  		SUBSCRIPTION,
10:28:45 475  		OFFER_CHAIN
10:28:45 476  	      WHERE
10:28:45 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
10:28:45 478  	      AND
10:28:45 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:28:45 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
10:28:45 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
10:28:45 482  	      AND
10:28:45 483  		(
10:28:45 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
10:28:45 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
10:28:45 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
10:28:45 487  		)
10:28:45 488  	      AND
10:28:45 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V24.GROUP_ACC_IP_RNG_ACTIVE
10:28:45 490  	    );
10:28:45 491  	  END;
10:28:45 492  EXCEPTION
10:28:45 493  WHEN OTHERS THEN
10:28:45 494  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 496  END GET_GROUP_ACCOUNT_BY_IP;
10:28:45 497  
10:28:45 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
10:28:45 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:28:45 500  	out_result_set	    OUT SYS_REFCURSOR
10:28:45 501  ) AS
10:28:45 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
10:28:45 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
10:28:45 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
10:28:45 505  BEGIN
10:28:45 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
10:28:45 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
10:28:45 508  	BEGIN
10:28:45 509  	  OPEN out_result_set FOR
10:28:45 510  	  SELECT
10:28:45 511  	    ID,
10:28:45 512  	    SUBSCRIPTION_ID,
10:28:45 513  	    GROUP_NAME,
10:28:45 514  	    FIRST_NAME,
10:28:45 515  	    LAST_NAME,
10:28:45 516  	    EMAIL,
10:28:45 517  	    PHONE,
10:28:45 518  	    ORGANIZATION_TYPE,
10:28:45 519  	    SEATS,
10:28:45 520  	    SEAT_TTL_IN_HOURS,
10:28:45 521  	    CREATE_DATE,
10:28:45 522  	    CREATED_BY,
10:28:45 523  	    UPDATE_DATE,
10:28:45 524  	    UPDATED_BY
10:28:45 525  	  FROM
10:28:45 526  	    GROUP_ACCOUNT
10:28:45 527  	  WHERE
10:28:45 528  	    ID IN (
10:28:45 529  	      SELECT
10:28:45 530  		GROUP_ACCOUNT_ID
10:28:45 531  	      FROM
10:28:45 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
10:28:45 533  		GROUP_ACCOUNT ga,
10:28:45 534  		SUBSCRIPTION s,
10:28:45 535  		OFFER_CHAIN oc
10:28:45 536  	      WHERE
10:28:45 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
10:28:45 538  		ga.SUBSCRIPTION_ID = s.ID AND
10:28:45 539  		s.OFFER_CHAIN_ID = oc.ID AND
10:28:45 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
10:28:45 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
10:28:45 542  		gaed.IS_ACTIVE = 1
10:28:45 543  	    );
10:28:45 544  	  END;
10:28:45 545  EXCEPTION
10:28:45 546  WHEN OTHERS THEN
10:28:45 547  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
10:28:45 550  
10:28:45 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
10:28:45 552  	in_group_account_id   IN NUMBER,
10:28:45 553  	in_start	      IN NUMBER,
10:28:45 554  	in_end		      IN NUMBER,
10:28:45 555  	in_status	      IN NUMBER,
10:28:45 556  	out_record_count      OUT NUMBER,
10:28:45 557  	out_result_set	      OUT SYS_REFCURSOR
10:28:45 558  ) AS
10:28:45 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
10:28:45 560  range_diff NUMBER := 0;
10:28:45 561  upper_bond_diff NUMBER := 0;
10:28:45 562  l_start NUMBER := 0;
10:28:45 563  l_end   NUMBER := 0;
10:28:45 564  BEGIN
10:28:45 565  	--Normalize the end points [START]
10:28:45 566  	IF (in_start IS NULL OR in_start < 0) Then
10:28:45 567  	  l_start := 0;
10:28:45 568  	ELSE
10:28:45 569  	  l_start := in_start;
10:28:45 570  	END IF;
10:28:45 571  
10:28:45 572  	IF (in_end IS NULL) Then
10:28:45 573  	  l_end := 11;
10:28:45 574  	ELSE
10:28:45 575  	  l_end := in_end;
10:28:45 576  	END IF;
10:28:45 577  
10:28:45 578  	l_start := l_start + 1;
10:28:45 579  	l_end	:= l_end   + 1;
10:28:45 580  
10:28:45 581  	range_diff := l_end - l_start;
10:28:45 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V24.MAX_RETURN_COUNT;
10:28:45 583  
10:28:45 584  	IF (upper_bond_diff > 0) Then
10:28:45 585  	  l_end := l_end - upper_bond_diff;
10:28:45 586  	END IF;
10:28:45 587  	--Normalize the end points [END]
10:28:45 588  
10:28:45 589  	--Total count of records [START]
10:28:45 590  	SELECT
10:28:45 591  	  COUNT(1) INTO out_record_count
10:28:45 592  	FROM
10:28:45 593  	  GROUP_ACCOUNT_IP_RANGE
10:28:45 594  	WHERE
10:28:45 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
10:28:45 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
10:28:45 597  	--Total count of records [END]
10:28:45 598  
10:28:45 599  	OPEN out_result_set FOR
10:28:45 600  	SELECT
10:28:45 601  	  *
10:28:45 602  	FROM
10:28:45 603  	  (SELECT rownum rnum, q.*
10:28:45 604  	   FROM
10:28:45 605  	    (SELECT
10:28:45 606  	       ID,
10:28:45 607  	       GROUP_ACCOUNT_ID,
10:28:45 608  	       MINIMUM_IP_STRING,
10:28:45 609  	       MAXIMUM_IP_STRING,
10:28:45 610  	       GROUP_ACC_IP_RNG_STATUS_ID
10:28:45 611  	     FROM
10:28:45 612  	       GROUP_ACCOUNT_IP_RANGE
10:28:45 613  	     WHERE
10:28:45 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
10:28:45 615  	       (in_status IS NULL OR
10:28:45 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
10:28:45 617  	    ) Q
10:28:45 618  	  WHERE rownum <= l_end)
10:28:45 619  	WHERE rnum >= l_Start;
10:28:45 620  EXCEPTION
10:28:45 621  WHEN OTHERS THEN
10:28:45 622  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
10:28:45 624  END GET_GROUP_ACCOUNT_IP_RANGES;
10:28:45 625  
10:28:45 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
10:28:45 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:45 628  	in_start	      IN NUMBER,
10:28:45 629  	in_end		      IN NUMBER,
10:28:45 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
10:28:45 631  	out_record_count      OUT NUMBER,
10:28:45 632  	out_result_set	      OUT SYS_REFCURSOR
10:28:45 633  ) AS
10:28:45 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
10:28:45 635  range_diff NUMBER := 0;
10:28:45 636  upper_bond_diff NUMBER := 0;
10:28:45 637  l_start NUMBER := 0;
10:28:45 638  l_end   NUMBER := 0;
10:28:45 639  BEGIN
10:28:45 640  	--Normalize the end points [START]
10:28:45 641  	IF (in_start IS NULL OR in_start < 0) Then
10:28:45 642  	  l_start := 0;
10:28:45 643  	ELSE
10:28:45 644  	  l_start := in_start;
10:28:45 645  	END IF;
10:28:45 646  
10:28:45 647  	IF (in_end IS NULL) Then
10:28:45 648  	  l_end := 11;
10:28:45 649  	ELSE
10:28:45 650  	  l_end := in_end;
10:28:45 651  	END IF;
10:28:45 652  
10:28:45 653  	l_start := l_start + 1;
10:28:45 654  	l_end	:= l_end   + 1;
10:28:45 655  
10:28:45 656  	range_diff := l_end - l_start;
10:28:45 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V24.MAX_RETURN_COUNT;
10:28:45 658  
10:28:45 659  	IF (upper_bond_diff > 0) Then
10:28:45 660  	  l_end := l_end - upper_bond_diff;
10:28:45 661  	END IF;
10:28:45 662  	--Normalize the end points [END]
10:28:45 663  
10:28:45 664  	--Total count of records [START]
10:28:45 665  	SELECT
10:28:45 666  	  COUNT(1) INTO out_record_count
10:28:45 667  	FROM
10:28:45 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
10:28:45 669  	WHERE
10:28:45 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
10:28:45 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
10:28:45 672  	--Total count of records [END]
10:28:45 673  
10:28:45 674  	OPEN out_result_set FOR
10:28:45 675  	SELECT
10:28:45 676  	  *
10:28:45 677  	FROM
10:28:45 678  	  (SELECT rownum rnum, q.*
10:28:45 679  	   FROM
10:28:45 680  	    (SELECT
10:28:45 681  	      ID,
10:28:45 682  	      GROUP_ACCOUNT_ID,
10:28:45 683  	      EMAIL_DOMAIN,
10:28:45 684  	      IS_ACTIVE
10:28:45 685  	     FROM
10:28:45 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
10:28:45 687  	     WHERE
10:28:45 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
10:28:45 689  	       (in_status IS NULL OR
10:28:45 690  		IS_ACTIVE = in_status)
10:28:45 691  	    ) Q
10:28:45 692  	  WHERE rownum <= l_end)
10:28:45 693  	WHERE rnum >= l_Start;
10:28:45 694  
10:28:45 695  EXCEPTION
10:28:45 696  WHEN OTHERS THEN
10:28:45 697  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
10:28:45 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
10:28:45 700  
10:28:45 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
10:28:45 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:45 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:45 704  ) AS
10:28:45 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
10:28:45 706  BEGIN
10:28:45 707  	  PROCS_GROUP_ACCOUNT_CRU_V24.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
10:28:45 708  	    in_group_account_id => in_group_account_id,
10:28:45 709  	    in_updated_by => in_updated_by
10:28:45 710  	  );
10:28:45 711  EXCEPTION
10:28:45 712  WHEN OTHERS THEN
10:28:45 713  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
10:28:45 716  
10:28:45 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
10:28:45 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:28:45 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:28:45 720  ) AS
10:28:45 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
10:28:45 722  BEGIN
10:28:45 723  	  PROCS_GROUP_ACCOUNT_CRU_V24.DISABLE_EMAIL_DOMAIN_BY_ID(
10:28:45 724  	    in_id => in_id,
10:28:45 725  	    in_updated_by => in_updated_by
10:28:45 726  	  );
10:28:45 727  EXCEPTION
10:28:45 728  WHEN OTHERS THEN
10:28:45 729  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
10:28:45 732  
10:28:45 733  PROCEDURE ADD_EMAIL_DOMAIN (
10:28:45 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:28:45 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:28:45 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
10:28:45 737  ) AS
10:28:45 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
10:28:45 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
10:28:45 740  var_is_dupe NUMBER(1);
10:28:45 741  var_group_account_count NUMBER := 0;
10:28:45 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
10:28:45 743  NOT_GL EXCEPTION;
10:28:45 744  BEGIN
10:28:45 745  
10:28:45 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
10:28:45 747  	  FROM
10:28:45 748  	    GROUP_ACCOUNT,
10:28:45 749  	    SUBSCRIPTION,
10:28:45 750  	    OFFER_CHAIN
10:28:45 751  	  WHERE
10:28:45 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
10:28:45 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:28:45 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:45 755  	  ;
10:28:45 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
10:28:45 757  	    RAISE NOT_GL;
10:28:45 758  	  END IF;
10:28:45 759  
10:28:45 760  	  PROCS_GROUP_ACCOUNT_CRU_V24.ADD_EMAIL_DOMAIN(
10:28:45 761  	     in_group_account_id => in_group_account_id,
10:28:45 762  	     in_email_domain => in_email_domain,
10:28:45 763  	     in_is_active => GLOBAL_STATUSES_V24.GROUP_ACC_EMAIL_DOMAIN_ACT,
10:28:45 764  	     in_created_by => in_created_by
10:28:45 765  	  );
10:28:45 766  
10:28:45 767  EXCEPTION
10:28:45 768  WHEN NOT_GL THEN
10:28:45 769  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 770  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
10:28:45 771  WHEN OTHERS THEN
10:28:45 772  	IF (sqlcode=APP_EXCEPTION_CODES_V24.DUPLICATE_ERROR) THEN
10:28:45 773  	   RAISE;
10:28:45 774  	ELSE
10:28:45 775  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 776  	    SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 777  	END IF;
10:28:45 778  END ADD_EMAIL_DOMAIN;
10:28:45 779  
10:28:45 780  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
10:28:45 781  	in_group_account_id    IN NUMBER,
10:28:45 782  	in_borrower_account_id IN NUMBER,
10:28:45 783  	in_ip_address	       IN VARCHAR2,
10:28:45 784  	in_email_domain        IN VARCHAR2,
10:28:45 785  	in_created_by	       IN VARCHAR2
10:28:45 786  ) AS
10:28:45 787  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
10:28:45 788  ga_ttl_in_hours NUMBER := NULL;
10:28:45 789  start_date DATE := NULL;
10:28:45 790  end_date DATE := NULL;
10:28:45 791  BEGIN
10:28:45 792  	start_date := sysdate;
10:28:45 793  	end_date   := GLOBAL_CONSTANTS_V24.MAX_DATE;
10:28:45 794  
10:28:45 795  	BEGIN
10:28:45 796  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
10:28:45 797  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
10:28:45 798  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
10:28:45 799  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:28:45 800  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
10:28:45 801  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
10:28:45 802  	EXCEPTION
10:28:45 803  	  WHEN no_data_found THEN
10:28:45 804  	    ga_ttl_in_hours := NULL;
10:28:45 805  	END;
10:28:45 806  
10:28:45 807  	IF (ga_ttl_in_hours IS NOT NULL) THEN
10:28:45 808  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
10:28:45 809  	END IF;
10:28:45 810  
10:28:45 811  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V24.CREATE_SUBSCRIPTION_SHARE(
10:28:45 812  	  in_group_account_id => in_group_account_id,
10:28:45 813  	  in_borrower_account_id => in_borrower_account_id,
10:28:45 814  	  in_ip_address => in_ip_address,
10:28:45 815  	  in_email_domain => in_email_domain,
10:28:45 816  	  in_start_date => start_date,
10:28:45 817  	  in_end_date => end_date,
10:28:45 818  	  in_created_by => in_created_by
10:28:45 819  	);
10:28:45 820  END CREATE_SUBSCRIPTION_SHARE;
10:28:45 821  
10:28:45 822  
10:28:45 823  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
10:28:45 824  	in_group_account_id   IN NUMBER,
10:28:45 825  	out_occupied_seats   OUT NUMBER
10:28:45 826  ) AS
10:28:45 827  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
10:28:45 828  BEGIN
10:28:45 829  	SELECT
10:28:45 830  	  PROCS_GROUP_ACCOUNT_V24.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
10:28:45 831  	FROM dual;
10:28:45 832  EXCEPTION
10:28:45 833  WHEN OTHERS THEN
10:28:45 834  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 835  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 836  END GET_NUM_OCCUPIED_GROUP_SEATS;
10:28:45 837  
10:28:45 838  
10:28:45 839  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
10:28:45 840  	in_group_account_id   IN NUMBER
10:28:45 841  ) RETURN NUMBER IS
10:28:45 842  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
10:28:45 843  num_seats NUMBER;
10:28:45 844  BEGIN
10:28:45 845  	SELECT
10:28:45 846  	  COUNT(1) INTO num_seats
10:28:45 847  	FROM
10:28:45 848  	  SUBSCRIPTION_SHARE
10:28:45 849  	WHERE
10:28:45 850  	  GROUP_ACCOUNT_ID = in_group_account_id AND
10:28:45 851  	  SYSDATE BETWEEN START_DATE AND END_DATE;
10:28:45 852  	RETURN num_seats;
10:28:45 853  EXCEPTION
10:28:45 854  WHEN OTHERS THEN
10:28:45 855  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 856  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 857  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
10:28:45 858  
10:28:45 859  -- *********************************************************************
10:28:45 860  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
10:28:45 861  -- *********************************************************************
10:28:45 862  -- I'm debating if this should be in a different package, but right now
10:28:45 863  -- I'm too lazy to move this else where.
10:28:45 864  -- *********************************************************************
10:28:45 865  
10:28:45 866  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
10:28:45 867  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:45 868  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:28:45 869  ) AS
10:28:45 870  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
10:28:45 871  BEGIN
10:28:45 872  	  PROCS_GROUP_ACCOUNT_CRU_V24.DISABLE_IP_RANGES_BY_GA_ID(
10:28:45 873  	    in_group_account_id => in_group_account_id,
10:28:45 874  	    in_updated_by => in_updated_by
10:28:45 875  	  );
10:28:45 876  EXCEPTION
10:28:45 877  WHEN OTHERS THEN
10:28:45 878  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 879  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 880  END DISABLE_IP_RANGES_BY_GA_ID;
10:28:45 881  
10:28:45 882  PROCEDURE DISABLE_IP_RANGE_BY_ID (
10:28:45 883  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
10:28:45 884  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:28:45 885  ) AS
10:28:45 886  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
10:28:45 887  BEGIN
10:28:45 888  	  PROCS_GROUP_ACCOUNT_CRU_V24.DISABLE_IP_RANGE_BY_ID(
10:28:45 889  	    in_id => in_id,
10:28:45 890  	    in_updated_by => in_updated_by
10:28:45 891  	  );
10:28:45 892  EXCEPTION
10:28:45 893  WHEN OTHERS THEN
10:28:45 894  	IF SQLCODE = APP_EXCEPTION_CODES_V24.INVALID_PARAMETER THEN
10:28:45 895  	  RAISE;
10:28:45 896  	ELSE
10:28:45 897  	  PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 899  	END IF;
10:28:45 900  END DISABLE_IP_RANGE_BY_ID;
10:28:45 901  
10:28:45 902  PROCEDURE ADD_IP_RANGE (
10:28:45 903  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:28:45 904  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
10:28:45 905  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:28:45 906  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:28:45 907  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
10:28:45 908  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
10:28:45 909  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
10:28:45 910  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
10:28:45 911  ) AS
10:28:45 912  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
10:28:45 913  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
10:28:45 914  var_is_dupe NUMBER(1);
10:28:45 915  NOT_GL EXCEPTION;
10:28:45 916  DUPE EXCEPTION;
10:28:45 917  BEGIN
10:28:45 918  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
10:28:45 919  	  FROM
10:28:45 920  	    GROUP_ACCOUNT,
10:28:45 921  	    SUBSCRIPTION,
10:28:45 922  	    OFFER_CHAIN
10:28:45 923  	  WHERE
10:28:45 924  	    GROUP_ACCOUNT.ID = in_group_account_id AND
10:28:45 925  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:28:45 926  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:45 927  	  ;
10:28:45 928  	  IF(var_ga_type != 'GL') THEN
10:28:45 929  	    RAISE NOT_GL;
10:28:45 930  	  END IF;
10:28:45 931  
10:28:45 932  	  PROCS_GROUP_ACCOUNT_CRU_V24.ADD_IP_RANGE(
10:28:45 933  	    in_group_account_id => in_group_account_id,
10:28:45 934  	    in_minimum_ip_string => in_minimum_ip_string,
10:28:45 935  	    in_minimum_ip_low => in_minimum_ip_low,
10:28:45 936  	    in_minimum_ip_high => in_minimum_ip_high,
10:28:45 937  	    in_maximum_ip_string => in_maximum_ip_string,
10:28:45 938  	    in_maximum_ip_low => in_maximum_ip_low,
10:28:45 939  	    in_maximum_ip_high => in_maximum_ip_high,
10:28:45 940  	    in_created_by => in_created_by
10:28:45 941  	  );
10:28:45 942  
10:28:45 943  	  -- Check for overlapping ip address range after insert.  Note that if another
10:28:45 944  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
10:28:45 945  	  SELECT count(1) into var_is_dupe
10:28:45 946  	  FROM
10:28:45 947  	    GROUP_ACCOUNT_IP_RANGE
10:28:45 948  	  WHERE
10:28:45 949  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V24.GROUP_ACC_IP_RNG_ACTIVE AND
10:28:45 950  		((
10:28:45 951  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
10:28:45 952  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
10:28:45 953  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
10:28:45 954  		) OR
10:28:45 955  
10:28:45 956  		(
10:28:45 957  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
10:28:45 958  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
10:28:45 959  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
10:28:45 960  		)) AND
10:28:45 961  	    ROWNUM < 3;
10:28:45 962  
10:28:45 963  	  If(var_is_dupe > 1) THEN
10:28:45 964  	    RAISE DUPE;
10:28:45 965  	  END IF;
10:28:45 966  EXCEPTION
10:28:45 967  WHEN NOT_GL THEN
10:28:45 968  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 969  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
10:28:45 970  WHEN DUPE THEN
10:28:45 971  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:45 972  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
10:28:45 973  WHEN OTHERS THEN
10:28:45 974  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 975  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 976  END ADD_IP_RANGE;
10:28:45 977  
10:28:45 978  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
10:28:45 979  	in_group_account_id IN NUMBER,
10:28:45 980  	out_group_id OUT NUMBER
10:28:45 981  ) AS
10:28:45 982  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
10:28:45 983  BEGIN
10:28:45 984  	SELECT
10:28:45 985  	  a.group_id into out_group_id
10:28:45 986  	FROM
10:28:45 987  	  account a,
10:28:45 988  	  subscription s,
10:28:45 989  	  group_account ga
10:28:45 990  	WHERE
10:28:45 991  	  a.id = s.account_id and
10:28:45 992  	  s.id = ga.subscription_id and
10:28:45 993  	  ga.id = in_group_account_id and
10:28:45 994  	  rownum < 2
10:28:45 995  	;
10:28:45 996  EXCEPTION
10:28:45 997  WHEN NO_DATA_FOUND THEN
10:28:45 998  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 999  	  SPROC_NAME, 'Bad group_account_id');
10:28:45 1000  WHEN OTHERS THEN
10:28:45 1001  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1002  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1003  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
10:28:45 1004  
10:28:45 1005  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
10:28:45 1006  	 in_group_account_ip_range_id IN NUMBER,
10:28:45 1007  	 out_group_id OUT NUMBER
10:28:45 1008  ) AS
10:28:45 1009  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
10:28:45 1010  BEGIN
10:28:45 1011  	 SELECT
10:28:45 1012  	   a.group_id into out_group_id
10:28:45 1013  	 FROM
10:28:45 1014  	   account a,
10:28:45 1015  	   subscription s,
10:28:45 1016  	   group_account ga,
10:28:45 1017  	   group_account_ip_range ir
10:28:45 1018  	 WHERE
10:28:45 1019  	   a.id = s.account_id and
10:28:45 1020  	   s.id = ga.subscription_id and
10:28:45 1021  	   ga.id = ir.group_account_id and
10:28:45 1022  	   ir.id = in_group_account_ip_range_id and
10:28:45 1023  	   rownum < 2
10:28:45 1024  	 ;
10:28:45 1025  EXCEPTION
10:28:45 1026  WHEN NO_DATA_FOUND THEN
10:28:45 1027  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1028  	   SPROC_NAME, 'Bad group_account_ip_range_id');
10:28:45 1029  WHEN OTHERS THEN
10:28:45 1030  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1031  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1032  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
10:28:45 1033  
10:28:45 1034  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
10:28:45 1035  	 in_group_account_email_dom_id IN NUMBER,
10:28:45 1036  	 out_group_id OUT NUMBER
10:28:45 1037  ) AS
10:28:45 1038  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
10:28:45 1039  BEGIN
10:28:45 1040  	 SELECT
10:28:45 1041  	   a.group_id into out_group_id
10:28:45 1042  	 FROM
10:28:45 1043  	   account a,
10:28:45 1044  	   subscription s,
10:28:45 1045  	   group_account ga,
10:28:45 1046  	   group_account_email_domain ir
10:28:45 1047  	 WHERE
10:28:45 1048  	   a.id = s.account_id and
10:28:45 1049  	   s.id = ga.subscription_id and
10:28:45 1050  	   ga.id = ir.group_account_id and
10:28:45 1051  	   ir.id = in_group_account_email_dom_id and
10:28:45 1052  	   rownum < 2
10:28:45 1053  	 ;
10:28:45 1054  EXCEPTION
10:28:45 1055  WHEN NO_DATA_FOUND THEN
10:28:45 1056  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:45 1057  	   SPROC_NAME, 'Bad group_account_ip_range_id');
10:28:45 1058  WHEN OTHERS THEN
10:28:45 1059  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:45 1060  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:45 1061  END GET_GRP_ID_BY_EMAIL_DOM_ID;
10:28:45 1062  
10:28:45 1063  PROCEDURE UPDATE_GROUP_ACCOUNT (
10:28:45 1064  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
10:28:45 1065  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
10:28:45 1066  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
10:28:45 1067  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
10:28:45 1068  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
10:28:45 1069  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
10:28:45 1070  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:28:45 1071  ) AS
10:28:45 1072  BEGIN
10:28:45 1073  	 PROCS_GROUP_ACCOUNT_CRU_V24.UPDATE_GROUP_ACCOUNT(
10:28:45 1074  	   in_group_account_id => in_group_account_id,
10:28:45 1075  	   in_group_name => in_group_name,
10:28:45 1076  	   in_first_name => in_first_name,
10:28:45 1077  	   in_last_name => in_last_name,
10:28:45 1078  	   in_email => in_email,
10:28:45 1079  	   in_phone => in_phone,
10:28:45 1080  	   in_updated_by => in_updated_by
10:28:45 1081  	 );
10:28:45 1082  END UPDATE_GROUP_ACCOUNT;
10:28:45 1083  
10:28:45 1084  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
10:28:45 1085  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
10:28:45 1086  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
10:28:45 1087  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:28:45 1088  ) AS
10:28:45 1089  BEGIN
10:28:45 1090  	 PROCS_GROUP_ACCOUNT_CRU_V24.UPDATE_GROUP_ACCOUNT_SEATS(
10:28:45 1091  	   in_group_account_id => in_group_account_id,
10:28:45 1092  	   in_seats => in_seats,
10:28:45 1093  	   in_updated_by => in_updated_by
10:28:45 1094  	 );
10:28:45 1095  END UPDATE_GROUP_ACCOUNT_SEATS;
10:28:45 1096  
10:28:45 1097  END PROCS_GROUP_ACCOUNT_V24;
10:28:45 1098  .
10:28:45 SQL> /

Package body created.

Elapsed: 00:00:00.17
10:28:45 SQL> 
10:28:45 SQL> prompt Compiling body for procs_test.sql
Compiling body for procs_test.sql
10:28:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V24" AS
10:28:45   2  
10:28:45   3  PROCEDURE TEST_CLEAR_ALL IS
10:28:45   4  BEGIN
10:28:45   5  	DELETE FROM TAX_ADJUSTMENT;
10:28:45   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
10:28:45   7  	DELETE FROM INVOICE_ADJUSTMENT;
10:28:45   8  	DELETE FROM LICENSE;
10:28:45   9  	DELETE FROM OFFER_OFFER_CHAIN;
10:28:45  10  	delete from offer_product_offering;
10:28:45  11  	delete from tax;
10:28:45  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
10:28:45  13  	delete from discount_line_item; -- ?
10:28:45  14  	delete from discount; -- ?
10:28:45  15  	DELETE FROM LINE_ITEM;
10:28:45  16  	DELETE FROM PRODUCT_OFFERING;
10:28:45  17  	DELETE FROM PRODUCT;
10:28:45  18  	DELETE FROM INVOICE_NOTE;
10:28:45  19  	DELETE FROM GIFT_CERTIFICATE;
10:28:45  20  	DELETE FROM OFFER;
10:28:45  21  	DELETE FROM OFFER_CHAIN_META_DATA;
10:28:45  22  	DELETE FROM SUBSCRIPTION_NOTE;
10:28:45  23  	DELETE FROM SUBSCRIPTION_META_DATA;
10:28:45  24  	DELETE FROM SUBSCRIPTION;
10:28:45  25  	DELETE FROM CREDIT_CARD;
10:28:45  26  	DELETE FROM FLAGGED_ACCOUNTS;
10:28:45  27  	DELETE FROM ACCOUNT_NOTE;
10:28:45  28  	DELETE FROM ACCOUNT_LOCK;
10:28:45  29  	DELETE FROM ACCOUNT;
10:28:45  30  	DELETE FROM CHARGE;
10:28:45  31  	DELETE FROM TRANSACTION_ATTEMPT;
10:28:45  32  	DELETE FROM CHARGEBACK;
10:28:45  33  	DELETE FROM TRANSACTION;
10:28:45  34  	DELETE FROM INVOICE_NOTE;
10:28:45  35  	DELETE FROM INVOICE;
10:28:45  36  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
10:28:45  37  	DELETE FROM OFFER_CHAIN;
10:28:45  38  END TEST_CLEAR_ALL;
10:28:45  39  
10:28:45  40  PROCEDURE TEST_CLEAR_PRODUCTS AS
10:28:45  41  BEGIN
10:28:45  42  	DELETE FROM OFFER_OFFER_CHAIN;
10:28:45  43  	DELETE FROM OFFER_PRODUCT_OFFERING;
10:28:45  44  	DELETE FROM TAX;
10:28:45  45  	DELETE FROM PRODUCT_OFFERING;
10:28:45  46  	DELETE FROM PRODUCT;
10:28:45  47  	DELETE FROM OFFER;
10:28:45  48  	DELETE FROM OFFER_CHAIN_META_DATA;
10:28:45  49  	DELETE FROM OFFER_CHAIN;
10:28:45  50  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
10:28:45  51  END;
10:28:45  52  
10:28:45  53  /******************************************/
10:28:45  54  
10:28:45  55  PROCEDURE TEST_GET_ACCOUNT (
10:28:45  56  	in_group_id	IN NUMBER,
10:28:45  57  	out_result_set	OUT SYS_REFCURSOR
10:28:45  58  ) AS
10:28:45  59  BEGIN
10:28:45  60  
10:28:45  61  	OPEN out_result_set FOR
10:28:45  62  	SELECT *
10:28:45  63  	FROM
10:28:45  64  	  ACCOUNT
10:28:45  65  	WHERE
10:28:45  66  	  ACCOUNT.GROUP_ID = in_group_id;
10:28:45  67  
10:28:45  68  END TEST_GET_ACCOUNT;
10:28:45  69  
10:28:45  70  /*******************************************/
10:28:45  71  
10:28:45  72  PROCEDURE TEST_GET_SUBSCRIPTION (
10:28:45  73  	in_subscription_id IN NUMBER,
10:28:45  74  	out_result_set	   OUT SYS_REFCURSOR
10:28:45  75  ) AS
10:28:45  76  BEGIN
10:28:45  77  	OPEN out_result_set FOR
10:28:45  78  	SELECT *
10:28:45  79  	FROM
10:28:45  80  	  SUBSCRIPTION
10:28:45  81  	WHERE
10:28:45  82  	  SUBSCRIPTION.ID = in_subscription_id;
10:28:45  83  
10:28:45  84  END TEST_GET_SUBSCRIPTION;
10:28:45  85  
10:28:45  86  /***************************************************/
10:28:45  87  
10:28:45  88  PROCEDURE TEST_DELETE_INVOICE (
10:28:45  89  	in_invoice_id IN NUMBER
10:28:45  90  ) AS
10:28:45  91  var_line_item_id_set SYS_REFCURSOR;
10:28:45  92  var_line_item_id	   NUMBER;
10:28:45  93  
10:28:45  94  var_charge_id_set  SYS_REFCURSOR;
10:28:45  95  var_charge_id	 NUMBER;
10:28:45  96  var_transaction_id NUMBER;
10:28:45  97  BEGIN
10:28:45  98  	-- GET ACCOUNT'S LINE_ITEMS
10:28:45  99  	OPEN var_line_item_id_set FOR
10:28:45 100  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
10:28:45 101  	LOOP
10:28:45 102  	  FETCH var_line_item_id_set into var_line_item_id;
10:28:45 103  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
10:28:45 104  
10:28:45 105  	  -- DELETE ADJUSTMENTS
10:28:45 106  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
10:28:45 107  	  LOOP
10:28:45 108  
10:28:45 109  	    -- DELETE DISCOUNT ADJUSTMENTS
10:28:45 110  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
10:28:45 111  
10:28:45 112  	    -- DELETE TAX ADJUSTMENTS
10:28:45 113  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
10:28:45 114  	  END LOOP;
10:28:45 115  
10:28:45 116  	  -- DELETE LINE ITEM ADJUSTMENTS
10:28:45 117  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
10:28:45 118  
10:28:45 119  	  -- DELETE DISCOUNT_LINE_ITEM
10:28:45 120  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
10:28:45 121  
10:28:45 122  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
10:28:45 123  
10:28:45 124  	  -- DELETE LINE ITEM
10:28:45 125  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
10:28:45 126  
10:28:45 127  	END LOOP;
10:28:45 128  
10:28:45 129  	-- DELETE INVOICE ADJUSTMENTS
10:28:45 130  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
10:28:45 131  
10:28:45 132  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
10:28:45 133  	OPEN var_charge_id_set FOR
10:28:45 134  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
10:28:45 135  	LOOP
10:28:45 136  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
10:28:45 137  	  EXIT WHEN var_charge_id_set%NOTFOUND;
10:28:45 138  	  -- DELETE CHARGEBACK
10:28:45 139  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
10:28:45 140  
10:28:45 141  	  -- DELETE TRANSACTION ATTEMP
10:28:45 142  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
10:28:45 143  
10:28:45 144  	  -- DELETE CHARGE
10:28:45 145  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
10:28:45 146  
10:28:45 147  	  -- DELETE TRANSACTION
10:28:45 148  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
10:28:45 149  	END LOOP;
10:28:45 150  
10:28:45 151  	-- DELETE INVOICE NOTES
10:28:45 152  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
10:28:45 153  
10:28:45 154  	-- DELETE INVOICE
10:28:45 155  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
10:28:45 156  END;
10:28:45 157  
10:28:45 158  PROCEDURE TEST_DELETE_USER_ACCOUNT (
10:28:45 159  	in_group_id IN NUMBER
10:28:45 160  ) AS
10:28:45 161  -- VARIABLES
10:28:45 162  var_account_id NUMBER;
10:28:45 163  
10:28:45 164  -- CURSORS
10:28:45 165  var_subscription_id_set SYS_REFCURSOR;
10:28:45 166  var_subscription_id     NUMBER;
10:28:45 167  
10:28:45 168  var_license_id_set SYS_REFCURSOR;
10:28:45 169  var_license_id	 NUMBER;
10:28:45 170  var_invoice_id	 NUMBER;
10:28:45 171  
10:28:45 172  var_gift_certificate_id_set SYS_REFCURSOR;
10:28:45 173  var_gift_certificate_id	  NUMBER;
10:28:45 174  var_gc_purchase_invoice_id  NUMBER;
10:28:45 175  BEGIN
10:28:45 176  
10:28:45 177   /*FOR f_account in (
10:28:45 178  	  select id from account where group_id = in_group_id
10:28:45 179  	)
10:28:45 180  	loop
10:28:45 181  
10:28:45 182  	  -- delete account
10:28:45 183  	  delete from account where id = f_account.id;
10:28:45 184  
10:28:45 185  	end loop;*/
10:28:45 186  
10:28:45 187  	BEGIN
10:28:45 188  	  SELECT
10:28:45 189  	    ACCOUNT.ID into var_account_id
10:28:45 190  	  FROM
10:28:45 191  	    ACCOUNT
10:28:45 192  	  WHERE
10:28:45 193  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:45 194  	  EXCEPTION
10:28:45 195  	    WHEN NO_DATA_FOUND THEN
10:28:45 196  	      -- Nothing to do
10:28:45 197  	      RETURN;
10:28:45 198  	END;
10:28:45 199  
10:28:45 200  	-- GET ACCOUNT'S SUBSCRIPTIONS
10:28:45 201  	OPEN var_subscription_id_set FOR
10:28:45 202  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
10:28:45 203  	LOOP
10:28:45 204  	  FETCH var_subscription_id_set into var_subscription_id;
10:28:45 205  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
10:28:45 206  
10:28:45 207  	  -- GET ACCOUNT'S LICENSES AND INVOICES
10:28:45 208  	  OPEN var_license_id_set FOR
10:28:45 209  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
10:28:45 210  	  LOOP
10:28:45 211  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
10:28:45 212  	    EXIT WHEN var_license_id_set%NOTFOUND;
10:28:45 213  
10:28:45 214  
10:28:45 215  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
10:28:45 216  	    OPEN var_gift_certificate_id_set FOR
10:28:45 217  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
10:28:45 218  	    LOOP
10:28:45 219  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
10:28:45 220  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
10:28:45 221  
10:28:45 222  	      -- DELETE GIFT_CERTIFICATE
10:28:45 223  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
10:28:45 224  
10:28:45 225  	      -- DELETE LICENSE
10:28:45 226  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
10:28:45 227  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
10:28:45 228  	      END IF;
10:28:45 229  
10:28:45 230  	    END LOOP;
10:28:45 231  
10:28:45 232  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
10:28:45 233  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
10:28:45 234  
10:28:45 235  	    -- DELETE LICENSE
10:28:45 236  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
10:28:45 237  
10:28:45 238  	    -- DELETE INVOICE
10:28:45 239  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
10:28:45 240  	      TEST_DELETE_INVOICE(var_invoice_id);
10:28:45 241  	    END IF;
10:28:45 242  	  END LOOP;
10:28:45 243  
10:28:45 244  	  -- DELETE SUBSCRIPTION_NOTE
10:28:45 245  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
10:28:45 246  
10:28:45 247  	  -- DELETE SUBSCRIPTION META_DATA
10:28:45 248  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
10:28:45 249  
10:28:45 250  	  -- DELETE SUBSCRIPTION
10:28:45 251  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
10:28:45 252  	END LOOP;
10:28:45 253  
10:28:45 254  	-- DELETE CREDIT_CARDS
10:28:45 255  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
10:28:45 256  
10:28:45 257  	-- DELETE PAYPAL
10:28:45 258  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
10:28:45 259  
10:28:45 260  	-- DELETE FLAGS
10:28:45 261  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
10:28:45 262  
10:28:45 263  	-- DELETE ACCOUNT NOTES
10:28:45 264  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
10:28:45 265  
10:28:45 266  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
10:28:45 267  	OPEN var_gift_certificate_id_set FOR
10:28:45 268  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
10:28:45 269  	LOOP
10:28:45 270  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
10:28:45 271  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
10:28:45 272  
10:28:45 273  	  -- DELETE GIFT CERTIFICATE
10:28:45 274  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
10:28:45 275  
10:28:45 276  	  -- DELETE INVOICE
10:28:45 277  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
10:28:45 278  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
10:28:45 279  	  END IF;
10:28:45 280  	END LOOP;
10:28:45 281  
10:28:45 282  	-- DELETE LOCKS
10:28:45 283  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
10:28:45 284  
10:28:45 285  	-- DELETE ACCOUNT
10:28:45 286  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
10:28:45 287  
10:28:45 288  END TEST_DELETE_USER_ACCOUNT;
10:28:45 289  
10:28:45 290  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
10:28:45 291  	in_start_group_id IN NUMBER,
10:28:45 292  	in_end_group_id   IN NUMBER
10:28:45 293  ) IS
10:28:45 294   gid ACCOUNT.GROUP_ID%TYPE;
10:28:45 295   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
10:28:45 296  BEGIN
10:28:45 297  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
10:28:45 298  	/*
10:28:45 299  	FOR var_group_id IN in_start_group_id..in_end_group_id
10:28:45 300  	LOOP
10:28:45 301  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
10:28:45 302  	END LOOP;*/
10:28:45 303  	OPEN c(in_start_group_id, in_end_group_id);
10:28:45 304  	WHILE c%ISOPEN LOOP
10:28:45 305  	  FETCH c INTO gid;
10:28:45 306  	  IF c%NOTFOUND THEN
10:28:45 307  	   CLOSE c;
10:28:45 308  	  END IF;
10:28:45 309  	  TEST_DELETE_USER_ACCOUNT(gid);
10:28:45 310  	END LOOP;
10:28:45 311  END;
10:28:45 312  
10:28:45 313  /**********************************************************/
10:28:45 314  
10:28:45 315  FUNCTION TEST_IS_INVOICE_EXISTS(
10:28:45 316  /*
10:28:45 317  1 - exists
10:28:45 318  0 - not exists
10:28:45 319  */
10:28:45 320  	in_invoice_id IN NUMBER
10:28:45 321  ) RETURN NUMBER AS
10:28:45 322  var_invoice_count NUMBER;
10:28:45 323  BEGIN
10:28:45 324  	SELECT
10:28:45 325  	  COUNT(*) into var_invoice_count
10:28:45 326  	FROM
10:28:45 327  	  INVOICE
10:28:45 328  	WHERE
10:28:45 329  	  INVOICE.ID = in_invoice_id;
10:28:45 330  	IF var_invoice_count = 0 THEN
10:28:45 331  	  RETURN 0;
10:28:45 332  	ELSE
10:28:45 333  	  RETURN 1;
10:28:45 334  	END IF;
10:28:45 335  END;
10:28:45 336  
10:28:45 337  PROCEDURE TEST_GET_INVOICE_INFO (
10:28:45 338  	in_invoice_id  IN NUMBER,
10:28:45 339  	out_result_set OUT SYS_REFCURSOR
10:28:45 340  ) AS
10:28:45 341  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
10:28:45 342  BEGIN
10:28:45 343  
10:28:45 344  	 OPEN out_result_set FOR SELECT
10:28:45 345  	    in_invoice_id AS "INVOICE_ID",
10:28:45 346  	    INVOICE.INVOICE_STATUS_ID,
10:28:45 347  	    PROCS_INVOICE_V24.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
10:28:45 348  	    CHARGE.ID AS "CHARGE_ID",
10:28:45 349  	    CHARGE.CHARGE_AMOUNT,
10:28:45 350  	    CHARGE.TRANSACTION_ID,
10:28:45 351  	    TRANSACTION.TRANSACTION_STATUS_ID
10:28:45 352  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
10:28:45 353  
10:28:45 354  END TEST_GET_INVOICE_INFO;
10:28:45 355  
10:28:45 356  /******************************************************************************/
10:28:45 357  
10:28:45 358  PROCEDURE TEST_DELETE_OFFER_CHAIN(
10:28:45 359  	in_offer_chain_id in number
10:28:45 360  ) as
10:28:45 361  begin
10:28:45 362  
10:28:45 363  	for v_offer_chain in (
10:28:45 364  	  select och.id from offer_chain och where och.id = in_offer_chain_id
10:28:45 365  	)
10:28:45 366  	loop
10:28:45 367  
10:28:45 368  	  for v_offer in (
10:28:45 369  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
10:28:45 370  	  )
10:28:45 371  	  loop
10:28:45 372  
10:28:45 373  	    for v_product_offering in (
10:28:45 374  	      select
10:28:45 375  		product_offering.id,
10:28:45 376  		product_offering.product_id
10:28:45 377  	      from
10:28:45 378  		offer_product_offering
10:28:45 379  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
10:28:45 380  	      where offer_product_offering.offer_id = v_offer.id
10:28:45 381  	    )
10:28:45 382  	    loop
10:28:45 383  
10:28:45 384  	      -- delete product
10:28:45 385  	      delete from product where id = v_product_offering.product_id;
10:28:45 386  
10:28:45 387  	      -- delete product_offering
10:28:45 388  	      delete from product_offering where id = v_product_offering.id;
10:28:45 389  
10:28:45 390  	    end loop;
10:28:45 391  
10:28:45 392  	    -- delete data from offer_product_offering table
10:28:45 393  	    delete from offer_product_offering where offer_id = v_offer.id;
10:28:45 394  
10:28:45 395  	    -- delete data from offer_offer_chain table
10:28:45 396  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
10:28:45 397  
10:28:45 398  	    -- delete offer
10:28:45 399  	    delete from offer where id = v_offer.id;
10:28:45 400  
10:28:45 401  	  end loop;
10:28:45 402  
10:28:45 403  	  -- delete offer_chain_eligibility
10:28:45 404  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
10:28:45 405  
10:28:45 406  	  -- delete metadata
10:28:45 407  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
10:28:45 408  
10:28:45 409  	  -- delete offer chain
10:28:45 410  	  delete from offer_chain where id = v_offer_chain.id;
10:28:45 411  
10:28:45 412  	end loop;
10:28:45 413  
10:28:45 414  end;
10:28:45 415  
10:28:45 416  END PROCS_TEST_V24;
10:28:45 417  .
10:28:45 SQL> /

Package body created.

Elapsed: 00:00:00.12
10:28:46 SQL> 
10:28:46 SQL> prompt Compiling body for procs_account.sql
Compiling body for procs_account.sql
10:28:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V24" AS
10:28:46   2  
10:28:46   3  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
10:28:46   4  	in_group_id    IN  NUMBER,
10:28:46   5  	out_result_set OUT SYS_REFCURSOR
10:28:46   6  ) AS
10:28:46   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'INVOICE_IDS_BY_GROUP_ID';
10:28:46   8  BEGIN
10:28:46   9  	OPEN out_result_set FOR
10:28:46  10  	SELECT
10:28:46  11  	  Invoice.Id
10:28:46  12  	FROM
10:28:46  13  	  LICENSE
10:28:46  14  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:46  15  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:28:46  16  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:46  17  	  INNER JOIN INVOICE_STATUS ON INVOICE.INVOICE_STATUS_ID = INVOICE_STATUS.ID
10:28:46  18  	Where
10:28:46  19  	  SUBSCRIPTION.ACCOUNT_ID IN (SELECT ID FROM ACCOUNT WHERE GROUP_ID = in_group_id) AND
10:28:46  20  	  INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V24.INVOICE_OPEN;
10:28:46  21  END INVOICE_IDS_BY_GROUP_ID;
10:28:46  22  
10:28:46  23  FUNCTION GET_GRACE_START_DATE(
10:28:46  24  	in_subscription_id IN NUMBER
10:28:46  25  ) RETURN DATE AS
10:28:46  26  SPROC_NAME	   CONSTANT VARCHAR2(32) := 'GET_GRACE_START_DATE';
10:28:46  27  grace_start_date_var DATE;
10:28:46  28  BEGIN
10:28:46  29  	SELECT GRACE_START_DATE into grace_start_date_var
10:28:46  30  	FROM
10:28:46  31  	  (
10:28:46  32  	    SELECT
10:28:46  33  	      GRACE_START_DATE
10:28:46  34  	    FROM
10:28:46  35  	      LICENSE
10:28:46  36  	    WHERE
10:28:46  37  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:28:46  38  	    ORDER BY
10:28:46  39  	      LICENSE.END_DATE DESC
10:28:46  40  	  )
10:28:46  41  	WHERE
10:28:46  42  	  ROWNUM <= 1;
10:28:46  43  
10:28:46  44  	RETURN grace_start_date_var;
10:28:46  45  END GET_GRACE_START_DATE;
10:28:46  46  
10:28:46  47  FUNCTION GET_GRACE_END_DATE(
10:28:46  48  	in_subscription_id IN NUMBER
10:28:46  49  ) RETURN DATE AS
10:28:46  50  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'GET_GRACE_END_DATE';
10:28:46  51  grace_end_date_var DATE;
10:28:46  52  BEGIN
10:28:46  53  	SELECT GRACE_END_DATE into grace_end_date_var
10:28:46  54  	FROM
10:28:46  55  	  (
10:28:46  56  	    SELECT
10:28:46  57  	      GRACE_END_DATE
10:28:46  58  	    FROM
10:28:46  59  	      LICENSE
10:28:46  60  	    WHERE
10:28:46  61  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:28:46  62  	    ORDER BY
10:28:46  63  	      LICENSE.END_DATE DESC
10:28:46  64  	  )
10:28:46  65  	WHERE ROWNUM <= 1;
10:28:46  66  
10:28:46  67  	RETURN grace_end_date_var;
10:28:46  68  END GET_GRACE_END_DATE;
10:28:46  69  
10:28:46  70  
10:28:46  71  
10:28:46  72  PROCEDURE ANNOTATE_ACCOUNT (
10:28:46  73  	in_group_id   IN  NUMBER,
10:28:46  74  	in_agent_id   IN  NUMBER,
10:28:46  75  	in_note       IN  VARCHAR2,
10:28:46  76  	in_created_by IN  VARCHAR2
10:28:46  77  ) AS
10:28:46  78  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
10:28:46  79  -- VARIABLES
10:28:46  80  var_account_id	  NUMBER;
10:28:46  81  var_account_note_id NUMBER;
10:28:46  82  -- EXCEPTIONS
10:28:46  83  BAD_ACCOUNT_ID EXCEPTION;
10:28:46  84  BEGIN
10:28:46  85  
10:28:46  86  	-- Get account id
10:28:46  87  	BEGIN
10:28:46  88  	  SELECT
10:28:46  89  	    ACCOUNT.ID into var_account_id
10:28:46  90  	  FROM
10:28:46  91  	    ACCOUNT
10:28:46  92  	  WHERE
10:28:46  93  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46  94  	  EXCEPTION
10:28:46  95  	    WHEN NO_DATA_FOUND THEN
10:28:46  96  	      RAISE BAD_ACCOUNT_ID;
10:28:46  97  	END;
10:28:46  98  
10:28:46  99  	-- Insert new row into ACCOUNT_NOTE table
10:28:46 100  	PROCS_ACCOUNT_CRU_V24.CREATE_ACCOUNT_NOTE(
10:28:46 101  	  inout_account_note_id => var_account_note_id,
10:28:46 102  	  in_agent_id		=> in_agent_id,
10:28:46 103  	  in_account_id 	=> var_account_id,
10:28:46 104  	  in_note		=> in_note,
10:28:46 105  	  in_created_by 	=> in_created_by
10:28:46 106  	);
10:28:46 107  
10:28:46 108  EXCEPTION
10:28:46 109  WHEN BAD_ACCOUNT_ID THEN
10:28:46 110  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 111  	  SPROC_NAME, 'No such group id');
10:28:46 112  WHEN OTHERS THEN
10:28:46 113  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 114  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 115  END ANNOTATE_ACCOUNT;
10:28:46 116  
10:28:46 117  PROCEDURE ASSERT_ACCOUNT_EXISTS (
10:28:46 118  	in_group_id IN	NUMBER,
10:28:46 119  	out_exists  OUT NUMBER
10:28:46 120  ) AS
10:28:46 121  -- VARIABLES
10:28:46 122  var_found_id  NUMBER;
10:28:46 123  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
10:28:46 124  BEGIN
10:28:46 125  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
10:28:46 126  	out_exists := GLOBAL_CONSTANTS_V24.TRUE;
10:28:46 127  EXCEPTION
10:28:46 128  WHEN NO_DATA_FOUND THEN
10:28:46 129  	out_exists := GLOBAL_CONSTANTS_V24.FALSE;
10:28:46 130  WHEN OTHERS THEN
10:28:46 131  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 133  END ASSERT_ACCOUNT_EXISTS;
10:28:46 134  
10:28:46 135  PROCEDURE DISABLE_ACCOUNT (
10:28:46 136  	in_group_id   IN NUMBER,
10:28:46 137  	in_updated_by IN VARCHAR2,
10:28:46 138  	in_note       IN VARCHAR2,
10:28:46 139  	in_agent_id   IN NUMBER
10:28:46 140  ) AS
10:28:46 141  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
10:28:46 142  var_account_id	      NUMBER;
10:28:46 143  current_account_status  NUMBER;
10:28:46 144  
10:28:46 145  var_active_subscriptions_num NUMBER;
10:28:46 146  var_pending_invoices_num	   NUMBER;
10:28:46 147  
10:28:46 148  -- EXCEPTIONS
10:28:46 149  BAD_ACOUNT_ID		EXCEPTION;
10:28:46 150  BAD_CURRENT_ACC_STATUS	EXCEPTION;
10:28:46 151  PENDING_INVOICES_FOUND	EXCEPTION;
10:28:46 152  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
10:28:46 153  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
10:28:46 154  EXCEPTION_MESSAGE 	VARCHAR2(1024);
10:28:46 155  BEGIN
10:28:46 156  
10:28:46 157  	-- Get account's status and id
10:28:46 158  	BEGIN
10:28:46 159  	  SELECT
10:28:46 160  	    ACCOUNT.ACCOUNT_STATUS_ID,
10:28:46 161  	    ACCOUNT.ID
10:28:46 162  	  INTO
10:28:46 163  	    current_account_status,
10:28:46 164  	    var_account_id
10:28:46 165  	  FROM ACCOUNT
10:28:46 166  	  WHERE
10:28:46 167  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 168  	  EXCEPTION
10:28:46 169  	    WHEN NO_DATA_FOUND THEN
10:28:46 170  	      RAISE BAD_ACOUNT_ID;
10:28:46 171  	END;
10:28:46 172  
10:28:46 173  	-- For now, we can disable account whenever
10:28:46 174  	IF current_account_status = GLOBAL_STATUSES_V24.ACCOUNT_DISABLED THEN
10:28:46 175  	  RAISE BAD_CURRENT_ACC_STATUS;
10:28:46 176  	END IF;
10:28:46 177  
10:28:46 178  	-- Checks for out outstanding balances
10:28:46 179  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
10:28:46 180  	SELECT
10:28:46 181  	  COUNT(*) into var_pending_invoices_num
10:28:46 182  	FROM
10:28:46 183  	  LICENSE
10:28:46 184  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:46 185  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:28:46 186  	WHERE
10:28:46 187  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:46 188  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V24.INVOICE_OPEN FROM DUAL );
10:28:46 189  
10:28:46 190  	IF var_pending_invoices_num > 0 THEN
10:28:46 191  	  RAISE PENDING_INVOICES_FOUND;
10:28:46 192  	END IF;
10:28:46 193  
10:28:46 194  	SELECT
10:28:46 195  	  COUNT(*) into var_active_subscriptions_num
10:28:46 196  	FROM
10:28:46 197  	  SUBSCRIPTION
10:28:46 198  	WHERE
10:28:46 199  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:46 200  	  AND (
10:28:46 201  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE
10:28:46 202  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_SUSPENDED
10:28:46 203  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_IN_GRACE_PERIOD);
10:28:46 204  
10:28:46 205  	IF var_active_subscriptions_num > 0 THEN
10:28:46 206  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
10:28:46 207  	END IF;
10:28:46 208  
10:28:46 209  	PROCS_ACCOUNT_V24.UPDATE_ACCOUNT_STATUS(
10:28:46 210  	  in_account_id        => var_account_id,
10:28:46 211  	  in_account_status_id => GLOBAL_STATUSES_V24.ACCOUNT_DISABLED,
10:28:46 212  	  in_updated_by        => in_updated_by
10:28:46 213  	);
10:28:46 214  
10:28:46 215  	-- Annotate account
10:28:46 216  	IF in_note IS NOT NULL THEN
10:28:46 217  	  BEGIN
10:28:46 218  	    PROCS_ACCOUNT_V24.ANNOTATE_ACCOUNT(
10:28:46 219  	      in_group_id   => in_group_id,
10:28:46 220  	      in_agent_id   => in_agent_id,
10:28:46 221  	      in_note	    => in_note,
10:28:46 222  	      in_created_by => in_updated_by
10:28:46 223  	    );
10:28:46 224  	    EXCEPTION
10:28:46 225  	      WHEN OTHERS THEN
10:28:46 226  		EXCEPTION_MESSAGE := SQLERRM;
10:28:46 227  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
10:28:46 228  	  END;
10:28:46 229  	END IF;
10:28:46 230  
10:28:46 231  EXCEPTION
10:28:46 232  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
10:28:46 233  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:46 234  	  SPROC_NAME, 'Account has active or suspended subsciptions');
10:28:46 235  WHEN BAD_CURRENT_ACC_STATUS THEN
10:28:46 236  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:46 237  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
10:28:46 238  WHEN PENDING_INVOICES_FOUND THEN
10:28:46 239  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:46 240  	  SPROC_NAME, 'Opened/Pending invoices founded');
10:28:46 241  WHEN BAD_ACOUNT_ID THEN
10:28:46 242  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 243  	  SPROC_NAME, 'No such account');
10:28:46 244  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
10:28:46 245  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:46 246  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
10:28:46 247  WHEN OTHERS THEN
10:28:46 248  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 249  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 250  END DISABLE_ACCOUNT;
10:28:46 251  
10:28:46 252  PROCEDURE CREATE_ACTIVE_ACCOUNT(
10:28:46 253  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
10:28:46 254  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
10:28:46 255  	out_new_account_id OUT ACCOUNT.ID%TYPE
10:28:46 256  ) AS
10:28:46 257  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_ACTIVE_ACCOUNT';
10:28:46 258  var_count  NUMBER  := 0;
10:28:46 259  BEGIN
10:28:46 260  	SELECT COUNT(1) INTO var_count FROM ACCOUNT WHERE GROUP_ID = in_group_id;
10:28:46 261  
10:28:46 262  	IF (var_count = 0) THEN
10:28:46 263  	  PROCS_ACCOUNT_CRU_V24.CREATE_ACCOUNT(
10:28:46 264  	      out_account_id	    => out_new_account_id,
10:28:46 265  	      in_account_status_id  => GLOBAL_STATUSES_V24.ACCOUNT_ACTIVE,
10:28:46 266  	      in_group_id	    => in_group_id,
10:28:46 267  	      in_created_by	    => in_created_by,
10:28:46 268  	      in_system_category_id => GLOBAL_ENUMS_V24.SYSTEM_CATEGORY_LIVE
10:28:46 269  	  );
10:28:46 270  	ELSE
10:28:46 271  	  out_new_account_id := NULL;
10:28:46 272  	END IF;
10:28:46 273  END CREATE_ACTIVE_ACCOUNT;
10:28:46 274  
10:28:46 275  PROCEDURE REACTIVATE_ACCOUNT (
10:28:46 276  	in_group_id   IN NUMBER,
10:28:46 277  	in_updated_by IN VARCHAR2,
10:28:46 278  	in_note       IN VARCHAR2,
10:28:46 279  	in_agent_id   IN NUMBER
10:28:46 280  ) AS
10:28:46 281  -- VARIABLES
10:28:46 282  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
10:28:46 283  var_account_id	      NUMBER;
10:28:46 284  current_account_status  NUMBER;
10:28:46 285  
10:28:46 286  -- EXCEPTIONS
10:28:46 287  BAD_CURRENT_ACC_STATUS EXCEPTION;
10:28:46 288  CAN_NOT_CREATE_NOTE    EXCEPTION;
10:28:46 289  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:46 290  BEGIN
10:28:46 291  	-- Get account id, status
10:28:46 292  	SELECT
10:28:46 293  	  ACCOUNT.ACCOUNT_STATUS_ID,
10:28:46 294  	  ACCOUNT.ID
10:28:46 295  	INTO
10:28:46 296  	  current_account_status,
10:28:46 297  	  var_account_id
10:28:46 298  	FROM ACCOUNT
10:28:46 299  	WHERE
10:28:46 300  	  ACCOUNT.GROUP_ID = in_group_id;
10:28:46 301  
10:28:46 302  	IF current_account_status != GLOBAL_STATUSES_V24.ACCOUNT_FROZEN THEN
10:28:46 303  	  RAISE BAD_CURRENT_ACC_STATUS;
10:28:46 304  	END IF;
10:28:46 305  
10:28:46 306  	-- Change account status
10:28:46 307  	PROCS_ACCOUNT_V24.UPDATE_ACCOUNT_STATUS(
10:28:46 308  	  in_account_id        => var_account_id,
10:28:46 309  	  in_updated_by        => in_updated_by,
10:28:46 310  	  in_account_status_id => GLOBAL_STATUSES_V24.ACCOUNT_ACTIVE
10:28:46 311  	);
10:28:46 312  
10:28:46 313  	-- Add note
10:28:46 314  	BEGIN
10:28:46 315  	  PROCS_ACCOUNT_V24.ANNOTATE_ACCOUNT(
10:28:46 316  	    in_group_id   => in_group_id,
10:28:46 317  	    in_agent_id   => in_agent_id,
10:28:46 318  	    in_note	  => in_note,
10:28:46 319  	    in_created_by => in_updated_by
10:28:46 320  	  );
10:28:46 321  	  EXCEPTION
10:28:46 322  	    WHEN OTHERS THEN
10:28:46 323  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:46 324  	      RAISE CAN_NOT_CREATE_NOTE;
10:28:46 325  	END;
10:28:46 326  
10:28:46 327  EXCEPTION
10:28:46 328  WHEN BAD_CURRENT_ACC_STATUS THEN
10:28:46 329  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:46 330  	  SPROC_NAME, 'Current account status is not "frozen"');
10:28:46 331  WHEN NO_DATA_FOUND THEN
10:28:46 332  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 333  	  SPROC_NAME, 'Could not find account with given group ID');
10:28:46 334  WHEN CAN_NOT_CREATE_NOTE THEN
10:28:46 335  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:46 336  	  SPROC_NAME, 'Could not annotate account');
10:28:46 337  WHEN OTHERS THEN
10:28:46 338  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 339  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 340  END REACTIVATE_ACCOUNT;
10:28:46 341  
10:28:46 342  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
10:28:46 343  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
10:28:46 344  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V24.CREDIT_CARD_ACTIVE,
10:28:46 345  	out_result_set OUT SYS_REFCURSOR
10:28:46 346  ) AS
10:28:46 347  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_CREDIT_CARDS';
10:28:46 348  BEGIN
10:28:46 349  	OPEN out_result_set FOR
10:28:46 350  	  SELECT
10:28:46 351  	    CREDIT_CARD.ID,
10:28:46 352  	    CREDIT_CARD.ACCOUNT_ID,
10:28:46 353  	    CREDIT_CARD.INSTRUMENT_NAME,
10:28:46 354  	    CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
10:28:46 355  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS,
10:28:46 356  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
10:28:46 357  	    CREDIT_CARD.STATE,
10:28:46 358  	    CREDIT_CARD.CITY,
10:28:46 359  	    CREDIT_CARD.POSTAL_CODE,
10:28:46 360  	    CREDIT_CARD.COUNTRY,
10:28:46 361  	    CREDIT_CARD.LAST_FOUR_CC,
10:28:46 362  	    CREDIT_CARD.EXPIRATION_DATE,
10:28:46 363  	    CREDIT_CARD.CREDIT_CARD_TYPE_ID,
10:28:46 364  	    CREDIT_CARD.SECRET_TOKEN,
10:28:46 365  	    CREDIT_CARD.CREATE_DATE,
10:28:46 366  	    CREDIT_CARD.CREATED_BY,
10:28:46 367  	    CREDIT_CARD.UPDATE_DATE,
10:28:46 368  	    CREDIT_CARD.UPDATED_BY,
10:28:46 369  	    CREDIT_CARD.CREDIT_CARD_STATUS_ID,
10:28:46 370  	    CREDIT_CARD.PRIVATE_FIRST_NAME,
10:28:46 371  	    Credit_Card.Private_Last_Name,
10:28:46 372  	    decode((SELECT Instrument_Id FROM ACCOUNT WHERE group_id = in_group_id and Instrument_Id = CREDIT_CARD.ID),null,'false', 'true') is_default
10:28:46 373  	  From
10:28:46 374  	      CREDIT_CARD left join account on account.id = CREDIT_CARD.Account_Id
10:28:46 375  	  Where
10:28:46 376  	    Account.Group_Id = in_group_id
10:28:46 377  	    AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_status_id;
10:28:46 378  END GET_ACCOUNT_CREDIT_CARDS;
10:28:46 379  
10:28:46 380  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
10:28:46 381  	in_group_id	  IN NUMBER,
10:28:46 382  	out_result_gc_set OUT SYS_REFCURSOR,
10:28:46 383  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.TRUE
10:28:46 384  ) AS
10:28:46 385  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
10:28:46 386  var_account_id NUMBER;
10:28:46 387  
10:28:46 388  -- Exceptions
10:28:46 389  WRONG_INSTR_EXCEPTION	 EXCEPTION;
10:28:46 390  BEGIN
10:28:46 391  
10:28:46 392  	-- Get account id
10:28:46 393  	SELECT
10:28:46 394  	  ACCOUNT.ID INTO var_account_id
10:28:46 395  	FROM
10:28:46 396  	  ACCOUNT
10:28:46 397  	WHERE
10:28:46 398  	  ACCOUNT.GROUP_ID = in_group_id;
10:28:46 399  
10:28:46 400  	-- Check that incoming data is correct
10:28:46 401  	IF in_instr_status != GLOBAL_CONSTANTS_V24.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V24.FALSE THEN
10:28:46 402  	  RAISE WRONG_INSTR_EXCEPTION;
10:28:46 403  	END IF;
10:28:46 404  
10:28:46 405  	OPEN out_result_gc_set FOR
10:28:46 406  	SELECT
10:28:46 407  	  GIFT_CERTIFICATE.ID,
10:28:46 408  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
10:28:46 409  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
10:28:46 410  	  GIFT_CERTIFICATE.PURCHASE_DATE,
10:28:46 411  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
10:28:46 412  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
10:28:46 413  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
10:28:46 414  	  GIFT_CERTIFICATE.CODE,
10:28:46 415  	  GIFT_CERTIFICATE.CREATE_DATE,
10:28:46 416  	  GIFT_CERTIFICATE.CREATED_BY,
10:28:46 417  	  GIFT_CERTIFICATE.UPDATE_DATE,
10:28:46 418  	  GIFT_CERTIFICATE.UPDATED_BY,
10:28:46 419  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
10:28:46 420  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
10:28:46 421  	  GIFT_CERTIFICATE.SENDER_NAME,
10:28:46 422  	  GIFT_CERTIFICATE.SENDER_EMAIL,
10:28:46 423  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
10:28:46 424  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
10:28:46 425  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
10:28:46 426  	  GIFT_CERTIFICATE.GIFT_MESSAGE
10:28:46 427  	FROM
10:28:46 428  	  GIFT_CERTIFICATE
10:28:46 429  	WHERE
10:28:46 430  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
10:28:46 431  	  AND (
10:28:46 432  		( in_instr_status = GLOBAL_CONSTANTS_V24.TRUE AND
10:28:46 433  		  (
10:28:46 434  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
10:28:46 435  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_ACTIVE
10:28:46 436  		  )
10:28:46 437  		)
10:28:46 438  		OR
10:28:46 439  		(
10:28:46 440  		  in_instr_status = GLOBAL_CONSTANTS_V24.FALSE AND
10:28:46 441  		  (
10:28:46 442  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
10:28:46 443  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V24.GIFT_CERTIFICATE_ACTIVE
10:28:46 444  		  )
10:28:46 445  		)
10:28:46 446  	      );
10:28:46 447  
10:28:46 448  EXCEPTION
10:28:46 449  WHEN NO_DATA_FOUND THEN
10:28:46 450  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 451  	  SPROC_NAME, 'Can not find account with given group id');
10:28:46 452  WHEN WRONG_INSTR_EXCEPTION THEN
10:28:46 453  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:46 454  	  SPROC_NAME, 'Wrong gift certificate type');
10:28:46 455  WHEN OTHERS THEN
10:28:46 456  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 457  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 458  END GET_ACCOUNT_GIFT_CERTIFICATES;
10:28:46 459  
10:28:46 460  PROCEDURE GET_ACCOUNT_INFO  (
10:28:46 461  	  in_group_id	    IN	NUMBER,
10:28:46 462  	  out_account_info  OUT SYS_REFCURSOR
10:28:46 463  ) AS
10:28:46 464  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
10:28:46 465  var_account_id  NUMBER;
10:28:46 466  BEGIN
10:28:46 467  
10:28:46 468  	-- Get account id
10:28:46 469  	SELECT
10:28:46 470  	  ACCOUNT.ID INTO var_account_id
10:28:46 471  	FROM
10:28:46 472  	  ACCOUNT
10:28:46 473  	WHERE
10:28:46 474  	  ACCOUNT.GROUP_ID = in_group_id;
10:28:46 475  
10:28:46 476  	-- Get account info
10:28:46 477  	OPEN out_account_info FOR
10:28:46 478  	  SELECT
10:28:46 479  	    ACCOUNT.ACCOUNT_STATUS_ID
10:28:46 480  	  FROM ACCOUNT
10:28:46 481  	  WHERE
10:28:46 482  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 483  
10:28:46 484  EXCEPTION
10:28:46 485  WHEN NO_DATA_FOUND THEN
10:28:46 486  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 487  	  SPROC_NAME, 'No such account');
10:28:46 488  WHEN OTHERS THEN
10:28:46 489  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 490  	  SPROC_NAME, 'Unknown Error', SQLERRM);
10:28:46 491  END GET_ACCOUNT_INFO;
10:28:46 492  
10:28:46 493  PROCEDURE GET_ACCOUNT_NOTES (
10:28:46 494  	  in_group_id	 IN  NUMBER,
10:28:46 495  	  out_result_set OUT SYS_REFCURSOR
10:28:46 496  ) AS
10:28:46 497  -- VARIABLES
10:28:46 498  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
10:28:46 499  var_account_id NUMBER;
10:28:46 500  -- EXCEPTIONS
10:28:46 501  BAD_ACCOUNT_ID EXCEPTION;
10:28:46 502  BEGIN
10:28:46 503  
10:28:46 504  	-- Check that account is exists
10:28:46 505  	BEGIN
10:28:46 506  	  SELECT
10:28:46 507  	    ACCOUNT.ID into var_account_id
10:28:46 508  	  FROM
10:28:46 509  	    ACCOUNT
10:28:46 510  	  WHERE
10:28:46 511  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 512  	  EXCEPTION
10:28:46 513  	    WHEN NO_DATA_FOUND THEN
10:28:46 514  	      RAISE BAD_ACCOUNT_ID;
10:28:46 515  	END;
10:28:46 516  
10:28:46 517  	-- Get account notes
10:28:46 518  	OPEN out_result_set FOR
10:28:46 519  	SELECT
10:28:46 520  	  ACCOUNT_NOTE.ACCOUNT_ID,
10:28:46 521  	  ACCOUNT_NOTE.AGENT_ID,
10:28:46 522  	  ACCOUNT_NOTE.CREATE_DATE,
10:28:46 523  	  ACCOUNT_NOTE.CREATED_BY,
10:28:46 524  	  ACCOUNT_NOTE.ID,
10:28:46 525  	  ACCOUNT_NOTE.NOTE
10:28:46 526  	FROM
10:28:46 527  	  ACCOUNT_NOTE
10:28:46 528  	WHERE
10:28:46 529  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
10:28:46 530  	ORDER BY
10:28:46 531  	  ACCOUNT_NOTE.CREATE_DATE ASC;
10:28:46 532  
10:28:46 533  EXCEPTION
10:28:46 534  WHEN BAD_ACCOUNT_ID THEN
10:28:46 535  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 536  	  SPROC_NAME, 'No such account');
10:28:46 537  WHEN OTHERS THEN
10:28:46 538  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 539  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 540  END GET_ACCOUNT_NOTES;
10:28:46 541  
10:28:46 542  PROCEDURE GET_ACCOUNT_PAYPALS(
10:28:46 543  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
10:28:46 544  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V24.PAYPAL_ACTIVE,
10:28:46 545  	out_result_set OUT SYS_REFCURSOR
10:28:46 546  ) AS
10:28:46 547  SPROC_NAME     CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_PAYPALS';
10:28:46 548  BEGIN
10:28:46 549  	OPEN out_result_set FOR
10:28:46 550  	  SELECT
10:28:46 551  	    DISTINCT
10:28:46 552  	    PAYPAL.ID,
10:28:46 553  	    PAYPAL.ACCOUNT_ID,
10:28:46 554  	    PAYPAL.INSTRUMENT_NAME,
10:28:46 555  	    PAYPAL.PRIVATE_EMAIL_ADDRESS,
10:28:46 556  	    PAYPAL.CREATE_DATE,
10:28:46 557  	    PAYPAL.CREATED_BY,
10:28:46 558  	    PAYPAL.UPDATE_DATE,
10:28:46 559  	    PAYPAL.UPDATED_BY,
10:28:46 560  	    PAYPAL.PAYPAL_STATUS_ID,
10:28:46 561  	    PAYPAL.PRIVATE_STREET_ADDRESS,
10:28:46 562  	    PAYPAL.PRIVATE_STREET_ADDRESS2,
10:28:46 563  	    PAYPAL.STATE,
10:28:46 564  	    PAYPAL.CITY,
10:28:46 565  	    PAYPAL.POSTAL_CODE,
10:28:46 566  	    PAYPAL.COUNTRY,
10:28:46 567  	    Paypal.Expiration_Date,
10:28:46 568  	    Paypal.Secret_Token,
10:28:46 569  	    decode((SELECT
10:28:46 570  	    Instrument_Id
10:28:46 571  		    FROM ACCOUNT
10:28:46 572  		    WHERE group_id = in_group_id AND Instrument_Id = PAYPAL.ID), null, 'false', 'true') is_default
10:28:46 573  	  FROM
10:28:46 574  	      PAYPAL
10:28:46 575  	      LEFT JOIN ACCOUNT ON ACCOUNT.id = PAYPAL.ACCOUNT_ID
10:28:46 576  	  WHERE
10:28:46 577  	    ACCOUNT.GROUP_ID = in_group_id
10:28:46 578  	    AND PAYPAL.PAYPAL_STATUS_ID = in_status_id;
10:28:46 579  END GET_ACCOUNT_PAYPALS;
10:28:46 580  
10:28:46 581  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
10:28:46 582  	  in_group_id	 IN  NUMBER,
10:28:46 583  	  in_start_date  IN DATE,
10:28:46 584  	  in_end_date	 IN DATE,
10:28:46 585  	  in_status	 IN NUMBER,
10:28:46 586  	  in_group_account_type IN VARCHAR2,
10:28:46 587  	  out_result_set OUT SYS_REFCURSOR
10:28:46 588  ) AS
10:28:46 589  -- VARIABLES
10:28:46 590  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
10:28:46 591  var_account_id NUMBER;
10:28:46 592  -- EXCEPTIONS
10:28:46 593  BAD_GROUP_ID	      EXCEPTION;
10:28:46 594  BEGIN
10:28:46 595  	-- Get account id
10:28:46 596  	BEGIN
10:28:46 597  	  SELECT
10:28:46 598  	    ACCOUNT.ID INTO var_account_id
10:28:46 599  	  FROM
10:28:46 600  	    ACCOUNT
10:28:46 601  	  WHERE
10:28:46 602  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 603  	  EXCEPTION
10:28:46 604  	    WHEN NO_DATA_FOUND THEN
10:28:46 605  	      RAISE BAD_GROUP_ID;
10:28:46 606  	END;
10:28:46 607  
10:28:46 608  	-- Get information about account subscriptions
10:28:46 609  	OPEN out_result_set FOR
10:28:46 610  	SELECT
10:28:46 611  	  SUBSCRIPTION.ACCOUNT_ID,
10:28:46 612  	  in_group_id AS "GROUP_ID",
10:28:46 613  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
10:28:46 614  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
10:28:46 615  	  SUBSCRIPTION.PURCHASE_DATE,
10:28:46 616  	  SUBSCRIPTION.SUSPEND_DATE,
10:28:46 617  	  SUBSCRIPTION.REACTIVATION_DATE,
10:28:46 618  	  SUBSCRIPTION.CANCELLATION_DATE,
10:28:46 619  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
10:28:46 620  	  SUBSCRIPTION.INSTRUMENT_ID,
10:28:46 621  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
10:28:46 622  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
10:28:46 623  	  OFFER_CHAIN.NAME,
10:28:46 624  	  OFFER_CHAIN.DESCRIPTION,
10:28:46 625  	  OFFER_CHAIN.PRODUCT_URI,
10:28:46 626  	  PROCS_SUBSCRIPTION_V24.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
10:28:46 627  	  PROCS_SUBSCRIPTION_V24.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
10:28:46 628  	  PROCS_SUBSCRIPTION_V24.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
10:28:46 629  	  PROCS_SUBSCRIPTION_V24.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
10:28:46 630  	  PROCS_SUBSCRIPTION_V24.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
10:28:46 631  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
10:28:46 632  	  (
10:28:46 633  	    SELECT
10:28:46 634  	      MAX(ENTITLEMENT_END_DATE)
10:28:46 635  	      FROM LICENSE
10:28:46 636  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:46 637  	  )
10:28:46 638  	  as "ENT_END_DATE",
10:28:46 639  	  (
10:28:46 640  	    SELECT
10:28:46 641  	      MIN(START_DATE)
10:28:46 642  	      FROM LICENSE
10:28:46 643  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:46 644  	  )
10:28:46 645  	  as "ENT_START_DATE",
10:28:46 646  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
10:28:46 647  	  GROUP_ACCOUNT.ID GA_ID,
10:28:46 648  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
10:28:46 649  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
10:28:46 650  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
10:28:46 651  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
10:28:46 652  	  GROUP_ACCOUNT.PHONE GA_PHONE,
10:28:46 653  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
10:28:46 654  	  GROUP_ACCOUNT.SEATS GA_SEATS,
10:28:46 655  	  PROCS_GROUP_ACCOUNT_V24.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
10:28:46 656  	  GROUP_ACCOUNT.IP GA_IP,
10:28:46 657  	  PROCS_SUBSCRIPTION_V24.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE,
10:28:46 658  	  PROCS_ACCOUNT_V24.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
10:28:46 659  	  PROCS_ACCOUNT_V24.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
10:28:46 660  	FROM
10:28:46 661  	  SUBSCRIPTION
10:28:46 662  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:46 663  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
10:28:46 664  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
10:28:46 665  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
10:28:46 666  	WHERE
10:28:46 667  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:46 668  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V24.REAL_TIME_CANCEL_REASON)
10:28:46 669  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
10:28:46 670  	  AND PROCS_COMMON_V24.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V24.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
10:28:46 671  	  AND PROCS_COMMON_V24.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V24.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
10:28:46 672  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
10:28:46 673  
10:28:46 674  EXCEPTION
10:28:46 675  WHEN BAD_GROUP_ID THEN
10:28:46 676  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 677  	  SPROC_NAME, 'Can not find account with given group id');
10:28:46 678  WHEN OTHERS THEN
10:28:46 679  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 680  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 681  END GET_ACCOUNT_SUBSCRIPTIONS;
10:28:46 682  
10:28:46 683  PROCEDURE FREEZE_ACCOUNT (
10:28:46 684  	in_group_id   IN NUMBER,
10:28:46 685  	in_updated_by IN VARCHAR2,
10:28:46 686  	in_note       IN VARCHAR2,
10:28:46 687  	in_agent_id   IN NUMBER
10:28:46 688  ) AS
10:28:46 689  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
10:28:46 690  -- VARIABLES
10:28:46 691  var_account_id	    NUMBER;
10:28:46 692  var_account_status_id NUMBER;
10:28:46 693  -- EXCEPTIONS
10:28:46 694  BAD_GROUP_ID	    EXCEPTION;
10:28:46 695  BAD_ACCOUNT_STATUS_ID EXCEPTION;
10:28:46 696  CAN_NOT_CREATE_NOTE   EXCEPTION;
10:28:46 697  EXCEPTION_MESSAGE     VARCHAR2(1024);
10:28:46 698  BEGIN
10:28:46 699  
10:28:46 700  	-- Get account status, account id
10:28:46 701  	BEGIN
10:28:46 702  	  SELECT
10:28:46 703  	    ACCOUNT.ID,
10:28:46 704  	    ACCOUNT.ACCOUNT_STATUS_ID
10:28:46 705  	    into
10:28:46 706  	    var_account_id,
10:28:46 707  	    var_account_status_id
10:28:46 708  	  FROM
10:28:46 709  	    ACCOUNT
10:28:46 710  	  WHERE
10:28:46 711  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 712  	  EXCEPTION
10:28:46 713  	    WHEN NO_DATA_FOUND THEN
10:28:46 714  	      RAISE BAD_GROUP_ID;
10:28:46 715  	END;
10:28:46 716  
10:28:46 717  	-- We can freeze only ACTIVE accounts
10:28:46 718  	IF var_account_status_id != GLOBAL_STATUSES_V24.ACCOUNT_ACTIVE
10:28:46 719  	  AND var_account_status_id != GLOBAL_STATUSES_V24.ACCOUNT_FROZEN THEN
10:28:46 720  	  RAISE BAD_ACCOUNT_STATUS_ID;
10:28:46 721  	END IF;
10:28:46 722  
10:28:46 723  	-- Set account status
10:28:46 724  	PROCS_ACCOUNT_V24.UPDATE_ACCOUNT_STATUS(
10:28:46 725  	  in_account_id        => var_account_id,
10:28:46 726  	  in_updated_by        => in_updated_by,
10:28:46 727  	  in_account_status_id => GLOBAL_STATUSES_V24.ACCOUNT_FROZEN
10:28:46 728  	);
10:28:46 729  
10:28:46 730  	-- Annotate account
10:28:46 731  	BEGIN
10:28:46 732  	  PROCS_ACCOUNT_V24.ANNOTATE_ACCOUNT(
10:28:46 733  	    in_group_id   => in_group_id,
10:28:46 734  	    in_agent_id   => in_agent_id,
10:28:46 735  	    in_note	  => in_note,
10:28:46 736  	    in_created_by => in_updated_by
10:28:46 737  	  );
10:28:46 738  	  EXCEPTION
10:28:46 739  	    WHEN OTHERS THEN
10:28:46 740  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:46 741  	      RAISE CAN_NOT_CREATE_NOTE;
10:28:46 742  	END;
10:28:46 743  
10:28:46 744  EXCEPTION
10:28:46 745  WHEN BAD_GROUP_ID THEN
10:28:46 746  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 747  	  SPROC_NAME, 'No such group id');
10:28:46 748  WHEN BAD_ACCOUNT_STATUS_ID THEN
10:28:46 749  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.STATE_ERROR,
10:28:46 750  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
10:28:46 751  WHEN CAN_NOT_CREATE_NOTE THEN
10:28:46 752  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:46 753  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
10:28:46 754  WHEN OTHERS THEN
10:28:46 755  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 757  END FREEZE_ACCOUNT;
10:28:46 758  
10:28:46 759  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
10:28:46 760  	in_group_id	   IN  NUMBER,
10:28:46 761  	in_subscription_id IN NUMBER,
10:28:46 762  	out_result_set	   OUT SYS_REFCURSOR
10:28:46 763  ) AS
10:28:46 764  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
10:28:46 765  -- VARIABLES
10:28:46 766  var_account_id	   NUMBER;
10:28:46 767  temp_subscription_id NUMBER;
10:28:46 768  -- EXCEPTIONS
10:28:46 769  BAD_GROUP_ID	  EXCEPTION;
10:28:46 770  BAD_SUBSCRIPTION_ID EXCEPTION;
10:28:46 771  BEGIN
10:28:46 772  	-- Get account id
10:28:46 773  	BEGIN
10:28:46 774  	  SELECT
10:28:46 775  	    ACCOUNT.ID into var_account_id
10:28:46 776  	  FROM
10:28:46 777  	    ACCOUNT
10:28:46 778  	  WHERE
10:28:46 779  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 780  	  EXCEPTION
10:28:46 781  	    WHEN NO_DATA_FOUND THEN
10:28:46 782  	      RAISE BAD_GROUP_ID;
10:28:46 783  	END;
10:28:46 784  
10:28:46 785  	-- Check that subscription exists
10:28:46 786  	BEGIN
10:28:46 787  	  IF in_subscription_id IS NOT NULL THEN
10:28:46 788  	    SELECT
10:28:46 789  	      SUBSCRIPTION.ID into temp_subscription_id
10:28:46 790  	    FROM
10:28:46 791  	      SUBSCRIPTION
10:28:46 792  	    WHERE
10:28:46 793  	      SUBSCRIPTION.ID = in_subscription_id;
10:28:46 794  	  END IF;
10:28:46 795  	  EXCEPTION
10:28:46 796  	    WHEN NO_DATA_FOUND THEN
10:28:46 797  	      RAISE BAD_SUBSCRIPTION_ID;
10:28:46 798  	END;
10:28:46 799  
10:28:46 800  	OPEN out_result_set FOR
10:28:46 801  	SELECT DISTINCT
10:28:46 802  	  INVOICE.ID as "INVOICE_ID",
10:28:46 803  	  INVOICE.CREATE_DATE,
10:28:46 804  	  INVOICE.INVOICE_STATUS_ID,
10:28:46 805  	  PROCS_INVOICE_V24.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
10:28:46 806  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
10:28:46 807  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
10:28:46 808  	  SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
10:28:46 809  	  NULL as "GC_CODE",
10:28:46 810  	  NULL as "GC_ID"
10:28:46 811  	FROM
10:28:46 812  	  LICENSE
10:28:46 813  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:46 814  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:28:46 815  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:46 816  	WHERE
10:28:46 817  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:46 818  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V24.REAL_TIME_CANCEL_REASON)
10:28:46 819  	  AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
10:28:46 820  
10:28:46 821  EXCEPTION
10:28:46 822  WHEN BAD_GROUP_ID THEN
10:28:46 823  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 824  	  SPROC_NAME, 'No such account');
10:28:46 825  WHEN BAD_SUBSCRIPTION_ID THEN
10:28:46 826  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 827  	  SPROC_NAME, 'No such subscription');
10:28:46 828  WHEN OTHERS THEN
10:28:46 829  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 830  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 831  END GET_ACCOUNT_SUBSCR_INVOICES;
10:28:46 832  
10:28:46 833  PROCEDURE GET_ACCOUNT_GC_INVOICES (
10:28:46 834  	in_group_id    IN  NUMBER,
10:28:46 835  	out_result_set OUT SYS_REFCURSOR
10:28:46 836  ) AS
10:28:46 837  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
10:28:46 838  -- VARIABLES
10:28:46 839  var_account_id NUMBER;
10:28:46 840  -- EXCEPTIONS
10:28:46 841  BAD_GROUP_ID EXCEPTION;
10:28:46 842  BEGIN
10:28:46 843  	-- Get account id
10:28:46 844  	BEGIN
10:28:46 845  	  SELECT
10:28:46 846  	    ACCOUNT.ID into var_account_id
10:28:46 847  	  FROM
10:28:46 848  	    ACCOUNT
10:28:46 849  	  WHERE
10:28:46 850  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 851  	  EXCEPTION
10:28:46 852  	    WHEN NO_DATA_FOUND THEN
10:28:46 853  	      RAISE BAD_GROUP_ID;
10:28:46 854  	END;
10:28:46 855  
10:28:46 856  	-- Get invoices
10:28:46 857  	OPEN out_result_set FOR
10:28:46 858  	SELECT DISTINCT
10:28:46 859  	  INVOICE.ID as "INVOICE_ID",
10:28:46 860  	  INVOICE.CREATE_DATE,
10:28:46 861  	  INVOICE.INVOICE_STATUS_ID,
10:28:46 862  	  PROCS_INVOICE_V24.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
10:28:46 863  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
10:28:46 864  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
10:28:46 865  	  NULL as "SUBSCRIPTION_ID",
10:28:46 866  	  GIFT_CERTIFICATE.CODE as "GC_CODE",
10:28:46 867  	  GIFT_CERTIFICATE.ID as "GC_ID"
10:28:46 868  	FROM
10:28:46 869  	  GIFT_CERTIFICATE
10:28:46 870  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
10:28:46 871  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:46 872  	WHERE
10:28:46 873  	  ROWNUM <= 100 AND
10:28:46 874  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
10:28:46 875  
10:28:46 876  EXCEPTION
10:28:46 877  WHEN BAD_GROUP_ID THEN
10:28:46 878  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 879  	  SPROC_NAME, 'No such account');
10:28:46 880  WHEN OTHERS THEN
10:28:46 881  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 883  END GET_ACCOUNT_GC_INVOICES;
10:28:46 884  
10:28:46 885  -- norlov: #38580
10:28:46 886  PROCEDURE GET_GC_INVOICE (
10:28:46 887  	in_group_id    IN  NUMBER,
10:28:46 888  	in_gc_code     IN  VARCHAR2,
10:28:46 889  	out_result_set OUT SYS_REFCURSOR
10:28:46 890  ) AS
10:28:46 891  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
10:28:46 892  -- VARIABLES
10:28:46 893  var_account_id NUMBER;
10:28:46 894  -- EXCEPTIONS
10:28:46 895  BAD_GROUP_ID EXCEPTION;
10:28:46 896  BEGIN
10:28:46 897  	-- Get account id
10:28:46 898  	BEGIN
10:28:46 899  	  SELECT
10:28:46 900  	    ACCOUNT.ID into var_account_id
10:28:46 901  	  FROM
10:28:46 902  	    ACCOUNT
10:28:46 903  	  WHERE
10:28:46 904  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 905  	  EXCEPTION
10:28:46 906  	    WHEN NO_DATA_FOUND THEN
10:28:46 907  	      RAISE BAD_GROUP_ID;
10:28:46 908  	END;
10:28:46 909  
10:28:46 910  	-- Get invoice for the GC
10:28:46 911  	OPEN out_result_set FOR
10:28:46 912  	SELECT DISTINCT
10:28:46 913  	  INVOICE.ID as "INVOICE_ID",
10:28:46 914  	  INVOICE.CREATE_DATE,
10:28:46 915  	  INVOICE.INVOICE_STATUS_ID,
10:28:46 916  	  PROCS_INVOICE_V24.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
10:28:46 917  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
10:28:46 918  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
10:28:46 919  	  NULL as "SUBSCRIPTION_ID",
10:28:46 920  	  GIFT_CERTIFICATE.CODE as "GC_CODE"
10:28:46 921  	FROM
10:28:46 922  	  GIFT_CERTIFICATE
10:28:46 923  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
10:28:46 924  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:28:46 925  	WHERE
10:28:46 926  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
10:28:46 927  	  AND GIFT_CERTIFICATE.CODE = in_gc_code;
10:28:46 928  
10:28:46 929  EXCEPTION
10:28:46 930  WHEN BAD_GROUP_ID THEN
10:28:46 931  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 932  	  SPROC_NAME, 'No such account');
10:28:46 933  WHEN OTHERS THEN
10:28:46 934  	PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 935  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 936  END GET_GC_INVOICE;
10:28:46 937  
10:28:46 938  PROCEDURE GET_ACCOUNT_PRODUCTS (
10:28:46 939  	in_group_id    IN  NUMBER,
10:28:46 940  	out_result_set OUT SYS_REFCURSOR
10:28:46 941  ) AS
10:28:46 942  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
10:28:46 943  -- VARIABLES
10:28:46 944  var_account_id NUMBER;
10:28:46 945  -- EXCEPTIONS
10:28:46 946  BAD_GROUP_ID EXCEPTION;
10:28:46 947  BEGIN
10:28:46 948  	-- Get account id
10:28:46 949  	BEGIN
10:28:46 950  	  SELECT
10:28:46 951  	    ACCOUNT.ID into var_account_id
10:28:46 952  	  FROM
10:28:46 953  	    ACCOUNT
10:28:46 954  	  WHERE
10:28:46 955  	    ACCOUNT.GROUP_ID = in_group_id;
10:28:46 956  	  EXCEPTION
10:28:46 957  	    WHEN NO_DATA_FOUND THEN
10:28:46 958  	      RAISE BAD_GROUP_ID;
10:28:46 959  	END;
10:28:46 960  
10:28:46 961  	OPEN out_result_set FOR
10:28:46 962  	SELECT DISTINCT
10:28:46 963  	  PRODUCT.ID,
10:28:46 964  	  PRODUCT.NAME
10:28:46 965  	FROM
10:28:46 966  	  PRODUCT
10:28:46 967  	WHERE
10:28:46 968  	  PRODUCT.ID IN (
10:28:46 969  	    SELECT DISTINCT
10:28:46 970  	      PRODUCT_OFFERING.PRODUCT_ID
10:28:46 971  	    FROM
10:28:46 972  	      PRODUCT_OFFERING
10:28:46 973  	    WHERE
10:28:46 974  	      PRODUCT_OFFERING.ID IN (
10:28:46 975  		SELECT DISTINCT
10:28:46 976  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:28:46 977  		FROM
10:28:46 978  		  OFFER_PRODUCT_OFFERING
10:28:46 979  		WHERE
10:28:46 980  		  OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:28:46 981  		    SELECT DISTINCT
10:28:46 982  		      OFFER_OFFER_CHAIN.OFFER_ID
10:28:46 983  		    FROM
10:28:46 984  		      OFFER_OFFER_CHAIN
10:28:46 985  		    WHERE
10:28:46 986  		      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
10:28:46 987  			SELECT DISTINCT
10:28:46 988  			  SUBSCRIPTION.OFFER_CHAIN_ID
10:28:46 989  			FROM
10:28:46 990  			  SUBSCRIPTION
10:28:46 991  			WHERE
10:28:46 992  			  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:46 993  		      )
10:28:46 994  		  )
10:28:46 995  	      )
10:28:46 996  	  );
10:28:46 997  
10:28:46 998  EXCEPTION
10:28:46 999  WHEN BAD_GROUP_ID THEN
10:28:46 1000  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1001  	   SPROC_NAME, 'No such account');
10:28:46 1002  WHEN OTHERS THEN
10:28:46 1003  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1004  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1005  END GET_ACCOUNT_PRODUCTS;
10:28:46 1006  
10:28:46 1007  PROCEDURE UPDATE_ACCOUNT_STATUS (
10:28:46 1008  	 in_account_id	      IN ACCOUNT.ID%TYPE,
10:28:46 1009  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
10:28:46 1010  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
10:28:46 1011  ) AS
10:28:46 1012  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
10:28:46 1013  -- EXCEPTIONS
10:28:46 1014  BAD_ACCOUNT_ID	      EXCEPTION;
10:28:46 1015  BAD_STATUS_ID	      EXCEPTION;
10:28:46 1016  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:28:46 1017  BEGIN
10:28:46 1018  
10:28:46 1019  	 IF in_account_status_id != GLOBAL_STATUSES_V24.ACCOUNT_ACTIVE
10:28:46 1020  	   AND in_account_status_id != GLOBAL_STATUSES_V24.ACCOUNT_FROZEN
10:28:46 1021  	   AND in_account_status_id != GLOBAL_STATUSES_V24.ACCOUNT_DISABLED THEN
10:28:46 1022  	   RAISE BAD_STATUS_ID;
10:28:46 1023  	 END IF;
10:28:46 1024  
10:28:46 1025  	 PROCS_ACCOUNT_CRU_V24.UPDATE_ACCOUNT(
10:28:46 1026  	   in_account_id	=> in_account_id,
10:28:46 1027  	   in_account_status_id => in_account_status_id,
10:28:46 1028  	   in_updated_by	=> in_updated_by
10:28:46 1029  	 );
10:28:46 1030  
10:28:46 1031  	 IF SQL%ROWCOUNT = 0 THEN
10:28:46 1032  	   RAISE BAD_ACCOUNT_ID;
10:28:46 1033  	 END IF;
10:28:46 1034  
10:28:46 1035  EXCEPTION
10:28:46 1036  WHEN BAD_ACCOUNT_ID THEN
10:28:46 1037  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1038  	   SPROC_NAME, 'No such account');
10:28:46 1039  WHEN BAD_STATUS_ID THEN
10:28:46 1040  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:46 1041  	   SPROC_NAME, 'Bad status id');
10:28:46 1042  WHEN OTHERS THEN
10:28:46 1043  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1044  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1045  END UPDATE_ACCOUNT_STATUS;
10:28:46 1046  
10:28:46 1047  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
10:28:46 1048  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
10:28:46 1049  	 out_licenses_num OUT NUMBER
10:28:46 1050  ) AS
10:28:46 1051  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
10:28:46 1052  -- VARIABLES
10:28:46 1053  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
10:28:46 1054  -- EXCEPTIONS
10:28:46 1055  BAD_ACCOUNT_ID EXCEPTION;
10:28:46 1056  BEGIN
10:28:46 1057  
10:28:46 1058  	 BEGIN
10:28:46 1059  	   SELECT
10:28:46 1060  	     ACCOUNT.ID into var_account_id
10:28:46 1061  	   FROM
10:28:46 1062  	     ACCOUNT
10:28:46 1063  	   WHERE
10:28:46 1064  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:46 1065  	   EXCEPTION
10:28:46 1066  	     WHEN NO_DATA_FOUND THEN
10:28:46 1067  	       RAISE BAD_ACCOUNT_ID;
10:28:46 1068  	 END;
10:28:46 1069  
10:28:46 1070  	 SELECT
10:28:46 1071  	   COUNT(LICENSE.ID) into out_licenses_num
10:28:46 1072  	 FROM
10:28:46 1073  	   LICENSE
10:28:46 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:46 1075  	 WHERE
10:28:46 1076  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:28:46 1077  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V24.TRUE;
10:28:46 1078  
10:28:46 1079  EXCEPTION
10:28:46 1080  WHEN BAD_ACCOUNT_ID THEN
10:28:46 1081  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1082  	   SPROC_NAME, 'No such group id');
10:28:46 1083  WHEN OTHERS THEN
10:28:46 1084  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1085  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1086  END GET_NEEDS_ENTTL_LICENSES_NUM;
10:28:46 1087  
10:28:46 1088  PROCEDURE SET_TAX_EXEMPT (
10:28:46 1089  	 in_group_id  IN NUMBER,
10:28:46 1090  	 in_exempt_id IN VARCHAR2
10:28:46 1091  ) AS
10:28:46 1092  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
10:28:46 1093  -- VARIABLES
10:28:46 1094  var_account_id NUMBER;
10:28:46 1095  -- EXCEPTIONS
10:28:46 1096  BAD_GROUP_ID EXCEPTION;
10:28:46 1097  BEGIN
10:28:46 1098  
10:28:46 1099  	 BEGIN
10:28:46 1100  	   SELECT
10:28:46 1101  	     ACCOUNT.ID into var_account_id
10:28:46 1102  	   FROM
10:28:46 1103  	     ACCOUNT
10:28:46 1104  	   WHERE
10:28:46 1105  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:46 1106  	   EXCEPTION
10:28:46 1107  	     WHEN NO_DATA_FOUND THEN
10:28:46 1108  	       RAISE BAD_GROUP_ID;
10:28:46 1109  	 END;
10:28:46 1110  
10:28:46 1111  	 UPDATE
10:28:46 1112  	   ACCOUNT
10:28:46 1113  	 SET
10:28:46 1114  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
10:28:46 1115  	 WHERE
10:28:46 1116  	   ACCOUNT.ID = var_account_id;
10:28:46 1117  
10:28:46 1118  EXCEPTION
10:28:46 1119  WHEN BAD_GROUP_ID THEN
10:28:46 1120  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1121  	   SPROC_NAME, 'No such group id');
10:28:46 1122  WHEN OTHERS THEN
10:28:46 1123  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1124  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1125  END SET_TAX_EXEMPT;
10:28:46 1126  
10:28:46 1127  PROCEDURE IS_TAX_EXEMPT (
10:28:46 1128  	 in_group_id	   IN NUMBER,
10:28:46 1129  	 out_is_tax_exempt OUT NUMBER
10:28:46 1130  ) AS
10:28:46 1131  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
10:28:46 1132  -- VARIABLES
10:28:46 1133  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
10:28:46 1134  -- EXCEPTIONS
10:28:46 1135  BAD_GROUP_ID EXCEPTION;
10:28:46 1136  BEGIN
10:28:46 1137  
10:28:46 1138  	 BEGIN
10:28:46 1139  	   SELECT
10:28:46 1140  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
10:28:46 1141  	   FROM
10:28:46 1142  	     ACCOUNT
10:28:46 1143  	   WHERE
10:28:46 1144  	     ACCOUNT.GROUP_ID = in_group_id;
10:28:46 1145  	   EXCEPTION
10:28:46 1146  	     WHEN NO_DATA_FOUND THEN
10:28:46 1147  	       RAISE BAD_GROUP_ID;
10:28:46 1148  	 END;
10:28:46 1149  
10:28:46 1150  	 IF var_is_tax_exempt IS NULL THEN
10:28:46 1151  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V24.FALSE;
10:28:46 1152  	 ELSE
10:28:46 1153  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V24.TRUE;
10:28:46 1154  	 END IF;
10:28:46 1155  
10:28:46 1156  EXCEPTION
10:28:46 1157  WHEN BAD_GROUP_ID THEN
10:28:46 1158  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1159  	   SPROC_NAME, 'No such group id');
10:28:46 1160  WHEN OTHERS THEN
10:28:46 1161  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1162  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1163  END IS_TAX_EXEMPT;
10:28:46 1164  
10:28:46 1165  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
10:28:46 1166  	 in_account_id IN NUMBER,
10:28:46 1167  	 out_group_id  OUT NUMBER
10:28:46 1168  ) AS
10:28:46 1169  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
10:28:46 1170  BEGIN
10:28:46 1171  
10:28:46 1172  	 SELECT
10:28:46 1173  	   ACCOUNT.GROUP_ID into out_group_id
10:28:46 1174  	 FROM
10:28:46 1175  	   ACCOUNT
10:28:46 1176  	 WHERE
10:28:46 1177  	   ACCOUNT.ID = in_account_id;
10:28:46 1178  
10:28:46 1179  EXCEPTION
10:28:46 1180  WHEN NO_DATA_FOUND THEN
10:28:46 1181  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1182  	   SPROC_NAME, 'No such account');
10:28:46 1183  WHEN OTHERS THEN
10:28:46 1184  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1185  	   SPROC_NAME, 'Unknown error');
10:28:46 1186  END GET_GROUP_ID_BY_ACCOUNT_ID;
10:28:46 1187  
10:28:46 1188  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:28:46 1189  	 in_group_id IN NUMBER,
10:28:46 1190  	 out_account_id  OUT NUMBER
10:28:46 1191  ) AS
10:28:46 1192  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
10:28:46 1193  BEGIN
10:28:46 1194  
10:28:46 1195  	 SELECT
10:28:46 1196  	   ACCOUNT.ID into out_account_id
10:28:46 1197  	 FROM
10:28:46 1198  	   ACCOUNT
10:28:46 1199  	 WHERE
10:28:46 1200  	   ACCOUNT.GROUP_ID = in_group_id;
10:28:46 1201  
10:28:46 1202  EXCEPTION
10:28:46 1203  WHEN NO_DATA_FOUND THEN
10:28:46 1204  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1205  	   SPROC_NAME, 'No such account');
10:28:46 1206  WHEN OTHERS THEN
10:28:46 1207  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1208  	   SPROC_NAME, 'Unknown error');
10:28:46 1209  END GET_ACCOUNT_ID_BY_GROUP_ID;
10:28:46 1210  
10:28:46 1211  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
10:28:46 1212  	 in_invoice_id IN NUMBER,
10:28:46 1213  	 out_group_ids OUT SYS_REFCURSOR
10:28:46 1214  ) AS
10:28:46 1215  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
10:28:46 1216  -- VARIABLES
10:28:46 1217  temp_invoice_id		 NUMBER;
10:28:46 1218  var_subscrib_group_id	 NUMBER;
10:28:46 1219  var_gc_purchaser_group_id NUMBER;
10:28:46 1220  var_gc_redeemer_group_id  NUMBER;
10:28:46 1221  -- EXCEPTIONS
10:28:46 1222  BAD_INVOICE_ID	    EXCEPTION;
10:28:46 1223  CAN_NOT_FIND_ACCOUNT EXCEPTION;
10:28:46 1224  BEGIN
10:28:46 1225  
10:28:46 1226  	 BEGIN
10:28:46 1227  	   SELECT
10:28:46 1228  	     INVOICE.ID into temp_invoice_id
10:28:46 1229  	   FROM
10:28:46 1230  	     INVOICE
10:28:46 1231  	   WHERE
10:28:46 1232  	     INVOICE.ID = in_invoice_id;
10:28:46 1233  	   EXCEPTION
10:28:46 1234  	     WHEN NO_DATA_FOUND THEN
10:28:46 1235  	       RAISE BAD_INVOICE_ID;
10:28:46 1236  	 END;
10:28:46 1237  
10:28:46 1238  	 BEGIN
10:28:46 1239  	   SELECT DISTINCT
10:28:46 1240  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
10:28:46 1241  	   FROM
10:28:46 1242  	     ACCOUNT
10:28:46 1243  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:28:46 1244  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:28:46 1245  	   WHERE
10:28:46 1246  	     LICENSE.INVOICE_ID = in_invoice_id;
10:28:46 1247  	   EXCEPTION
10:28:46 1248  	     WHEN NO_DATA_FOUND THEN
10:28:46 1249  	       var_subscrib_group_id := NULL;
10:28:46 1250  	 END;
10:28:46 1251  
10:28:46 1252  	 IF var_subscrib_group_id IS NULL THEN
10:28:46 1253  	   BEGIN
10:28:46 1254  	     SELECT
10:28:46 1255  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
10:28:46 1256  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
10:28:46 1257  	       into
10:28:46 1258  	       var_gc_purchaser_group_id,
10:28:46 1259  	       var_gc_redeemer_group_id
10:28:46 1260  	     FROM
10:28:46 1261  	       GIFT_CERTIFICATE
10:28:46 1262  	     WHERE
10:28:46 1263  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
10:28:46 1264  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
10:28:46 1265  	     EXCEPTION
10:28:46 1266  	       WHEN NO_DATA_FOUND THEN
10:28:46 1267  		 var_gc_purchaser_group_id := NULL;
10:28:46 1268  		 var_gc_redeemer_group_id  := NULL;
10:28:46 1269  	   END;
10:28:46 1270  	 END IF;
10:28:46 1271  
10:28:46 1272  	 IF var_subscrib_group_id IS NULL
10:28:46 1273  	   AND var_gc_purchaser_group_id IS NULL
10:28:46 1274  	   AND var_gc_redeemer_group_id IS NULL THEN
10:28:46 1275  	     RAISE CAN_NOT_FIND_ACCOUNT;
10:28:46 1276  	 END IF;
10:28:46 1277  
10:28:46 1278  	 OPEN out_group_ids FOR
10:28:46 1279  	 SELECT GROUP_ID FROM (
10:28:46 1280  	   SELECT
10:28:46 1281  	     var_subscrib_group_id as "GROUP_ID"
10:28:46 1282  	   FROM
10:28:46 1283  	     DUAL
10:28:46 1284  	   UNION
10:28:46 1285  	   SELECT
10:28:46 1286  	     var_gc_purchaser_group_id as "GROUP_ID"
10:28:46 1287  	   FROM
10:28:46 1288  	     DUAL
10:28:46 1289  	   UNION
10:28:46 1290  	   SELECT
10:28:46 1291  	     var_gc_redeemer_group_id as "GROUP_ID"
10:28:46 1292  	   FROM
10:28:46 1293  	     DUAL
10:28:46 1294  	 )
10:28:46 1295  	 WHERE
10:28:46 1296  	   GROUP_ID IS NOT NULL;
10:28:46 1297  
10:28:46 1298  EXCEPTION
10:28:46 1299  WHEN BAD_INVOICE_ID THEN
10:28:46 1300  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1301  	   SPROC_NAME, 'No such invoice');
10:28:46 1302  WHEN CAN_NOT_FIND_ACCOUNT THEN
10:28:46 1303  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1304  	   SPROC_NAME, 'Could not find account for given invoice');
10:28:46 1305  WHEN OTHERS THEN
10:28:46 1306  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1307  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1308  END GET_GROUPS_ID_BY_INVOICE_ID;
10:28:46 1309  
10:28:46 1310  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
10:28:46 1311  	 in_group_id	   IN NUMBER,
10:28:46 1312  	 out_tax_exempt_id OUT VARCHAR2
10:28:46 1313  ) AS
10:28:46 1314  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
10:28:46 1315  -- VARIABLES
10:28:46 1316  -- EXCEPTIONS
10:28:46 1317  BEGIN
10:28:46 1318  
10:28:46 1319  	 SELECT
10:28:46 1320  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
10:28:46 1321  	 FROM
10:28:46 1322  	   ACCOUNT
10:28:46 1323  	 WHERE
10:28:46 1324  	   ACCOUNT.GROUP_ID = in_group_id;
10:28:46 1325  
10:28:46 1326  EXCEPTION
10:28:46 1327  WHEN NO_DATA_FOUND THEN
10:28:46 1328  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1329  	   SPROC_NAME, 'No such account');
10:28:46 1330  WHEN OTHERS THEN
10:28:46 1331  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1332  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1333  END GET_ACCOUNT_TAX_EXEMPT_ID;
10:28:46 1334  
10:28:46 1335  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
10:28:46 1336  	 in_group_id	IN NUMBER,
10:28:46 1337  	 out_result_set OUT SYS_REFCURSOR
10:28:46 1338  ) AS
10:28:46 1339  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
10:28:46 1340  -- Variables
10:28:46 1341  var_account_id NUMBER;
10:28:46 1342  -- Exceptions
10:28:46 1343  BAD_GROUP_ID   EXCEPTION;
10:28:46 1344  BEGIN
10:28:46 1345  
10:28:46 1346  	 BEGIN
10:28:46 1347  	   SELECT
10:28:46 1348  	     ID into var_account_id
10:28:46 1349  	   FROM
10:28:46 1350  	     ACCOUNT
10:28:46 1351  	   WHERE
10:28:46 1352  	     GROUP_ID = in_group_id;
10:28:46 1353  	   EXCEPTION
10:28:46 1354  	     WHEN NO_DATA_FOUND THEN
10:28:46 1355  	       RAISE BAD_GROUP_ID;
10:28:46 1356  	 END;
10:28:46 1357  
10:28:46 1358  	 OPEN out_result_set FOR
10:28:46 1359  	 SELECT
10:28:46 1360  	   S.ID as SUBSCRIPTION_ID,
10:28:46 1361  	   OCHMD.OFFER_CHAIN_ID
10:28:46 1362  	 FROM
10:28:46 1363  	   SUBSCRIPTION S
10:28:46 1364  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
10:28:46 1365  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V24.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
10:28:46 1366  	 WHERE
10:28:46 1367  	   S.ACCOUNT_ID = var_account_id;
10:28:46 1368  
10:28:46 1369  EXCEPTION
10:28:46 1370  WHEN BAD_GROUP_ID THEN
10:28:46 1371  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1372  	   SPROC_NAME, 'No such account');
10:28:46 1373  WHEN OTHERS THEN
10:28:46 1374  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1375  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1376  END GET_UPGRADABLE_SUBSCRIPTIONS;
10:28:46 1377  
10:28:46 1378  PROCEDURE GET_USR_ALL_SBSCR_IDS (
10:28:46 1379  	 in_group_id	    IN NUMBER,
10:28:46 1380  	 out_result_set     OUT SYS_REFCURSOR
10:28:46 1381  ) AS
10:28:46 1382  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
10:28:46 1383  -- VARIABLES
10:28:46 1384  var_account_id NUMBER;
10:28:46 1385  -- EXCEPTIONS
10:28:46 1386  BAD_GROUP_ID EXCEPTION;
10:28:46 1387  BEGIN
10:28:46 1388  
10:28:46 1389  	 BEGIN
10:28:46 1390  	   SELECT
10:28:46 1391  	     A.ID INTO var_account_id
10:28:46 1392  	   FROM
10:28:46 1393  	     ACCOUNT A
10:28:46 1394  	   WHERE
10:28:46 1395  	     A.GROUP_ID = in_group_id;
10:28:46 1396  	   EXCEPTION
10:28:46 1397  	     WHEN NO_DATA_FOUND THEN
10:28:46 1398  	       RAISE BAD_GROUP_ID;
10:28:46 1399  	 END;
10:28:46 1400  
10:28:46 1401  	 OPEN out_result_set FOR
10:28:46 1402  	 SELECT
10:28:46 1403  	   S.ID
10:28:46 1404  	 FROM
10:28:46 1405  	   SUBSCRIPTION S
10:28:46 1406  	 WHERE
10:28:46 1407  	   S.ACCOUNT_ID = var_account_id
10:28:46 1408  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE;
10:28:46 1409  
10:28:46 1410  EXCEPTION
10:28:46 1411  WHEN BAD_GROUP_ID THEN
10:28:46 1412  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1413  	   SPROC_NAME, 'No such account');
10:28:46 1414  WHEN OTHERS THEN
10:28:46 1415  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1416  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1417  END GET_USR_ALL_SBSCR_IDS;
10:28:46 1418  
10:28:46 1419  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
10:28:46 1420  	 in_group_id	    IN NUMBER,
10:28:46 1421  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:28:46 1422  	 out_result_set     OUT SYS_REFCURSOR
10:28:46 1423  ) AS
10:28:46 1424  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
10:28:46 1425  -- VARIABLES
10:28:46 1426  var_account_id NUMBER;
10:28:46 1427  -- EXCEPTIONS
10:28:46 1428  BAD_GROUP_ID	   EXCEPTION;
10:28:46 1429  BAD_OFFER_CHAIN_IDS EXCEPTION;
10:28:46 1430  BEGIN
10:28:46 1431  
10:28:46 1432  	 IF in_offer_chain_ids IS NULL THEN
10:28:46 1433  	   RAISE BAD_OFFER_CHAIN_IDS;
10:28:46 1434  	 END IF;
10:28:46 1435  
10:28:46 1436  	 BEGIN
10:28:46 1437  	   SELECT
10:28:46 1438  	     A.ID INTO var_account_id
10:28:46 1439  	   FROM
10:28:46 1440  	     ACCOUNT A
10:28:46 1441  	   WHERE
10:28:46 1442  	     A.GROUP_ID = in_group_id;
10:28:46 1443  	   EXCEPTION
10:28:46 1444  	     WHEN NO_DATA_FOUND THEN
10:28:46 1445  	       RAISE BAD_GROUP_ID;
10:28:46 1446  	 END;
10:28:46 1447  
10:28:46 1448  	 OPEN out_result_set FOR
10:28:46 1449  	 SELECT
10:28:46 1450  	   S.ID
10:28:46 1451  	 FROM
10:28:46 1452  	   SUBSCRIPTION S
10:28:46 1453  	 WHERE
10:28:46 1454  	   S.ACCOUNT_ID = var_account_id
10:28:46 1455  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
10:28:46 1456  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V24.SUBSCRIPTION_ACTIVE;
10:28:46 1457  
10:28:46 1458  EXCEPTION
10:28:46 1459  WHEN BAD_OFFER_CHAIN_IDS THEN
10:28:46 1460  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.INVALID_PARAMETER,
10:28:46 1461  	   SPROC_NAME, 'Offer chains ids parameter is null');
10:28:46 1462  WHEN BAD_GROUP_ID THEN
10:28:46 1463  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 1464  	   SPROC_NAME, 'No such account');
10:28:46 1465  WHEN OTHERS THEN
10:28:46 1466  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1468  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
10:28:46 1469  
10:28:46 1470  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
10:28:46 1471  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:28:46 1472  	 in_expiration_date IN DATE,
10:28:46 1473  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
10:28:46 1474  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
10:28:46 1475  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
10:28:46 1476  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
10:28:46 1477  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
10:28:46 1478  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
10:28:46 1479  	 in_lower_bound IN NUMBER DEFAULT 1,
10:28:46 1480  	 in_upper_bound IN NUMBER DEFAULT 11,
10:28:46 1481  	 out_result_set OUT SYS_REFCURSOR
10:28:46 1482  ) AS
10:28:46 1483  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
10:28:46 1484  BEGIN
10:28:46 1485  
10:28:46 1486  	 OPEN out_result_set FOR
10:28:46 1487  	     SELECT
10:28:46 1488  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
10:28:46 1489  	     FROM
10:28:46 1490  	       account a,
10:28:46 1491  	       credit_card cc
10:28:46 1492  	     WHERE
10:28:46 1493  	       cc.expiration_date = in_expiration_date and
10:28:46 1494  	       cc.last_four_cc = in_last_four_cc and
10:28:46 1495  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
10:28:46 1496  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
10:28:46 1497  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
10:28:46 1498  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
10:28:46 1499  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
10:28:46 1500  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
10:28:46 1501  	       a.id = cc.account_id and
10:28:46 1502  	       rownum >= in_lower_bound and
10:28:46 1503  	       rownum <= in_upper_bound
10:28:46 1504  	   ;
10:28:46 1505  
10:28:46 1506  EXCEPTION
10:28:46 1507  WHEN OTHERS THEN
10:28:46 1508  	 PROCS_COMMON_V24.THROW_EXCEPTION(APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46 1509  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46 1510  END GET_GROUP_IDS_BY_CC_INFO;
10:28:46 1511  
10:28:46 1512  END PROCS_ACCOUNT_V24;
10:28:46 1513  .
10:28:46 SQL> /

Package body created.

Elapsed: 00:00:00.22
10:28:46 SQL> 
10:28:46 SQL> prompt Compiling body for procs_process_retry.sql
Compiling body for procs_process_retry.sql
10:28:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PROCESS_RETRY_V24" AS
10:28:46   2  
10:28:46   3  PROCEDURE LOG_RETRY(
10:28:46   4  	  in_process_name IN VARCHAR2,
10:28:46   5  	  in_generic_id   IN NUMBER,
10:28:46   6  	  in_date	  IN VARCHAR2,
10:28:46   7  	  out_success	   OUT NUMBER
10:28:46   8  ) AS
10:28:46   9  SPROC_NAME CONSTANT VARCHAR2(32) := 'LOG_RETRY_V24';
10:28:46  10  BEGIN
10:28:46  11  
10:28:46  12  	out_success := 1;
10:28:46  13  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
10:28:46  14  	VALUES (in_process_name, in_generic_id, 1, to_date(in_date, 'DD-Mon-YYYY HH24:MI:SS'), sysdate);
10:28:46  15  	commit;
10:28:46  16  EXCEPTION
10:28:46  17  WHEN DUP_VAL_ON_INDEX THEN
10:28:46  18  	rollback;
10:28:46  19  	out_success := 0;
10:28:46  20  WHEN OTHERS THEN
10:28:46  21  	rollback;
10:28:46  22  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46  23  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46  24  
10:28:46  25  END;
10:28:46  26  
10:28:46  27  PROCEDURE LOG_RETRY_DATE(
10:28:46  28  	  in_process_name IN VARCHAR2,
10:28:46  29  	  in_generic_id   IN NUMBER,
10:28:46  30  	  in_date	  IN DATE,
10:28:46  31  	  out_success	   OUT NUMBER
10:28:46  32  ) AS
10:28:46  33  SPROC_NAME CONSTANT VARCHAR2(32) := 'LOG_RETRY_DATE_V24';
10:28:46  34  BEGIN
10:28:46  35  
10:28:46  36  	out_success := 1;
10:28:46  37  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
10:28:46  38  	VALUES (in_process_name, in_generic_id, 1, in_date, sysdate);
10:28:46  39  	commit;
10:28:46  40  EXCEPTION
10:28:46  41  WHEN DUP_VAL_ON_INDEX THEN
10:28:46  42  	rollback;
10:28:46  43  	out_success := 0;
10:28:46  44  WHEN OTHERS THEN
10:28:46  45  	rollback;
10:28:46  46  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR,
10:28:46  47  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:28:46  48  
10:28:46  49  END;
10:28:46  50  
10:28:46  51  PROCEDURE DELETE_RETRY(
10:28:46  52  	  in_process_name IN VARCHAR2,
10:28:46  53  	  in_remove_minutes  IN NUMBER
10:28:46  54  ) AS
10:28:46  55  BEGIN
10:28:46  56  
10:28:46  57  delete from PROCESS_RETRY_THROTTLE
10:28:46  58  where
10:28:46  59  	process_name = in_process_name and
10:28:46  60  	create_date <= sysdate - (in_remove_minutes / (60 * 24));
10:28:46  61  commit;
10:28:46  62  END;
10:28:46  63  
10:28:46  64  PROCEDURE GET_SYSDATE (
10:28:46  65  	out_date  OUT VARCHAR2
10:28:46  66  ) AS
10:28:46  67  BEGIN
10:28:46  68  	SELECT to_char(SYSDATE, 'DD-Mon-YYYY HH24:MI:SS') into out_date from dual;
10:28:46  69  END;
10:28:46  70  
10:28:46  71  END PROCS_PROCESS_RETRY_V24;
10:28:46  72  .
10:28:46 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:46 SQL> 
10:28:46 SQL> prompt Compiling body for procs_notification.sql
Compiling body for procs_notification.sql
10:28:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_NOTIFICATION_V24" AS
10:28:46   2  
10:28:46   3  /******************************************************************/
10:28:46   4  
10:28:46   5  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
10:28:46   6  	in_notification_type_name IN VARCHAR2,
10:28:46   7  	out_notification_type_id  OUT NUMBER
10:28:46   8  ) AS
10:28:46   9  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NOTIFICATION_TYPE_BY_NAME';
10:28:46  10  BEGIN
10:28:46  11  	SELECT
10:28:46  12  	  NOTIFICATION_TYPE.ID into out_notification_type_id
10:28:46  13  	FROM
10:28:46  14  	  NOTIFICATION_TYPE
10:28:46  15  	WHERE
10:28:46  16  	  NOTIFICATION_TYPE.VALUE = in_notification_type_name;
10:28:46  17  EXCEPTION
10:28:46  18  WHEN NO_DATA_FOUND THEN
10:28:46  19  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46  20  	  SPROC_NAME, 'No such type');
10:28:46  21  END GET_NOTIFICATION_TYPE_BY_NAME;
10:28:46  22  
10:28:46  23  /******************************************************************/
10:28:46  24  
10:28:46  25  PROCEDURE ADD_SINGLE_NOTIFICATION_ROW (
10:28:46  26  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:28:46  27  	in_recipient_group_id	 IN NUMBER,
10:28:46  28  	in_notification_type_id  IN NUMBER,
10:28:46  29  	in_date_to_notify	 IN DATE,
10:28:46  30  	in_email_template_params IN CLOB
10:28:46  31  ) AS
10:28:46  32  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION';
10:28:46  33  -- VARIABLES
10:28:46  34  temp_type_count NUMBER;
10:28:46  35  var_create_date DATE := SYSDATE;
10:28:46  36  -- EXCEPTIONS
10:28:46  37  BAD_NOTIFICATION_TYPE_ID EXCEPTION;
10:28:46  38  EXCEPTION_MESSAGE        VARCHAR2(1024);
10:28:46  39  BEGIN
10:28:46  40  
10:28:46  41  	SELECT
10:28:46  42  	  COUNT(*) into temp_type_count
10:28:46  43  	FROM
10:28:46  44  	  NOTIFICATION_TYPE
10:28:46  45  	WHERE
10:28:46  46  	  NOTIFICATION_TYPE.ID = in_notification_type_id;
10:28:46  47  
10:28:46  48  	IF temp_type_count = 0 THEN
10:28:46  49  	  RAISE BAD_NOTIFICATION_TYPE_ID;
10:28:46  50  	END IF;
10:28:46  51  
10:28:46  52  	INSERT INTO NOTIFICATION (
10:28:46  53  	  ID,
10:28:46  54  	  ACCOUNT_ID,
10:28:46  55  	  GROUP_ID,
10:28:46  56  	  NOTIFICATION_TYPE_ID,
10:28:46  57  	  NOTIFICATION_STATUS_ID,
10:28:46  58  	  EMAIL_TEMPLATE_PARAMS,
10:28:46  59  	  UPDATE_DATE,
10:28:46  60  	  CREATE_DATE,
10:28:46  61  	  DATE_TO_NOTIFY
10:28:46  62  	) VALUES (
10:28:46  63  	  NOT_ID_SEQ.nextVal,
10:28:46  64  	  in_sender_account_id,
10:28:46  65  	  in_recipient_group_id,
10:28:46  66  	  in_notification_type_id,
10:28:46  67  	  NOTIFICATION_STATUSES_V24.NOTIFICATION_PENDING,
10:28:46  68  	  in_email_template_params,
10:28:46  69  	  var_create_date,
10:28:46  70  	  var_create_date,
10:28:46  71  	  in_date_to_notify
10:28:46  72  	);
10:28:46  73  
10:28:46  74  EXCEPTION
10:28:46  75  WHEN BAD_NOTIFICATION_TYPE_ID THEN
10:28:46  76  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46  77  	  SPROC_NAME, 'No such notification status');
10:28:46  78  END ADD_SINGLE_NOTIFICATION_ROW;
10:28:46  79  
10:28:46  80  /******************************************************************/
10:28:46  81  
10:28:46  82  PROCEDURE ADD_NOTIFICATION (
10:28:46  83  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:28:46  84  	in_recipient_group_id	 IN NUMBER,
10:28:46  85  	in_notification_type_id  IN NUMBER,
10:28:46  86  	in_date_to_notify	 IN DATE,
10:28:46  87  	in_email_template_params IN CLOB
10:28:46  88  ) AS
10:28:46  89  var_assoc_hermes_id NUMBER;
10:28:46  90  BEGIN
10:28:46  91  	CORE_OWNER.PROCS_NOTIFICATION_V24.ADD_SINGLE_NOTIFICATION_ROW (
10:28:46  92  	  in_sender_account_id	      => in_sender_account_id,
10:28:46  93  	  in_recipient_group_id       => in_recipient_group_id,
10:28:46  94  	  in_notification_type_id     => in_notification_type_id,
10:28:46  95  	  in_date_to_notify	      => in_date_to_notify,
10:28:46  96  	  in_email_template_params    => in_email_template_params
10:28:46  97  	);
10:28:46  98  
10:28:46  99  	SELECT notification_type.assoc_hermes_id INTO var_assoc_hermes_id
10:28:46 100  	FROM notification_type
10:28:46 101  	WHERE notification_type.id = in_notification_type_id;
10:28:46 102  
10:28:46 103  	IF var_assoc_hermes_id IS NOT NULL THEN
10:28:46 104  	  CORE_OWNER.PROCS_NOTIFICATION_V24.ADD_SINGLE_NOTIFICATION_ROW (
10:28:46 105  	    in_sender_account_id	=> in_sender_account_id,
10:28:46 106  	    in_recipient_group_id	=> in_recipient_group_id,
10:28:46 107  	    in_notification_type_id	=> var_assoc_hermes_id,
10:28:46 108  	    in_date_to_notify		=> in_date_to_notify,
10:28:46 109  	    in_email_template_params	=> in_email_template_params
10:28:46 110  	  );
10:28:46 111  	END IF;
10:28:46 112  END ADD_NOTIFICATION;
10:28:46 113  
10:28:46 114  /******************************************************************************/
10:28:46 115  
10:28:46 116  PROCEDURE GET_PENDING_NOTIFICATIONS (
10:28:46 117  	out_result_set OUT SYS_REFCURSOR
10:28:46 118  ) AS
10:28:46 119  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PENDING_NOTIFICATIONS';
10:28:46 120  C_NOTIFICATION_COUNT_LIMIT CONSTANT NUMBER := 500;
10:28:46 121  BEGIN
10:28:46 122  	OPEN out_result_set FOR
10:28:46 123  SELECT * FROM
10:28:46 124  (
10:28:46 125  	SELECT
10:28:46 126  	  NOTIFICATION.ID
10:28:46 127  	FROM
10:28:46 128  	  NOTIFICATION
10:28:46 129  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
10:28:46 130  	WHERE
10:28:46 131  	  ROWNUM <= C_NOTIFICATION_COUNT_LIMIT*10
10:28:46 132  	  AND NOT EXISTS (
10:28:46 133  	    SELECT NULL
10:28:46 134  	    FROM PROCESS_RETRY_THROTTLE
10:28:46 135  	    WHERE GENERIC_ID = NOTIFICATION.ID AND PROCESS_NAME = SPROC_NAME
10:28:46 136  	  )
10:28:46 137  	  AND (
10:28:46 138  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V24.NOTIFICATION_PENDING
10:28:46 139  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V24.NOTIFICATION_FAILED
10:28:46 140  	  )
10:28:46 141  	  AND (
10:28:46 142  	    NOTIFICATION.DATE_TO_NOTIFY IS NULL OR SYSDATE > NOTIFICATION.DATE_TO_NOTIFY
10:28:46 143  	  )ORDER BY dbms_random.value
10:28:46 144  ) WHERE
10:28:46 145  	ROWNUM <= C_NOTIFICATION_COUNT_LIMIT;
10:28:46 146  END GET_PENDING_NOTIFICATIONS;
10:28:46 147  
10:28:46 148  /******************************************************************************/
10:28:46 149  
10:28:46 150  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
10:28:46 151  	in_notification_id IN NUMBER
10:28:46 152  ) AS
10:28:46 153  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_NOTIFICATION_TIMESTAMP';
10:28:46 154  -- VARIABLES
10:28:46 155  temp_notification_id NUMBER;
10:28:46 156  -- EXCEPTIONS
10:28:46 157  BAD_NOTIFICATION_ID EXCEPTION;
10:28:46 158  BEGIN
10:28:46 159  
10:28:46 160  	BEGIN
10:28:46 161  	  SELECT
10:28:46 162  	    NOTIFICATION.ID into temp_notification_id
10:28:46 163  	  FROM
10:28:46 164  	    NOTIFICATION
10:28:46 165  	  WHERE
10:28:46 166  	    NOTIFICATION.ID = in_notification_id;
10:28:46 167  	  EXCEPTION
10:28:46 168  	    WHEN NO_DATA_FOUND THEN
10:28:46 169  	      RAISE BAD_NOTIFICATION_ID;
10:28:46 170  	END;
10:28:46 171  
10:28:46 172  	UPDATE
10:28:46 173  	  NOTIFICATION
10:28:46 174  	SET
10:28:46 175  	  NOTIFICATION.UPDATE_DATE = sysdate
10:28:46 176  	WHERE
10:28:46 177  	  NOTIFICATION.ID = in_notification_id;
10:28:46 178  
10:28:46 179  EXCEPTION
10:28:46 180  WHEN BAD_NOTIFICATION_ID THEN
10:28:46 181  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 182  	  SPROC_NAME, 'No such notification');
10:28:46 183  END UPDATE_NOTIFICATION_TIMESTAMP;
10:28:46 184  
10:28:46 185  /******************************************************************************/
10:28:46 186  
10:28:46 187  PROCEDURE SET_NOTIFICATION_STATUS (
10:28:46 188  	in_notification_id	  IN NUMBER,
10:28:46 189  	in_notification_status_id IN NUMBER,
10:28:46 190  	in_error_message	  IN VARCHAR2
10:28:46 191  ) AS
10:28:46 192  SPROC_NAME CONSTANT VARCHAR2(32) := 'SET_NOTIFICATION_STATUS';
10:28:46 193  -- VARIABLES
10:28:46 194  var_group_id		NUMBER;
10:28:46 195  var_account_id		NUMBER;
10:28:46 196  var_notification_type_id	NUMBER;
10:28:46 197  var_email_template_params CLOB;
10:28:46 198  var_create_history_date	DATE := SYSDATE;
10:28:46 199  var_notification_status_id   NUMBER;
10:28:46 200  var_date_to_notify	DATE;
10:28:46 201  max_fails   NUMBER := 5;
10:28:46 202  num_fails   NUMBER;
10:28:46 203  -- EXCEPTIONS
10:28:46 204  BAD_NOTIFICATION_ID	 EXCEPTION;
10:28:46 205  BAD_NOTIFICATION_STATUS_ID EXCEPTION;
10:28:46 206  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
10:28:46 207  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:28:46 208  BEGIN
10:28:46 209  
10:28:46 210  	IF in_notification_status_id != NOTIFICATION_STATUSES_V24.NOTIFICATION_SENT
10:28:46 211  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V24.NOTIFICATION_PENDING
10:28:46 212  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V24.NOTIFICATION_FAILED THEN
10:28:46 213  	  RAISE BAD_NOTIFICATION_STATUS_ID;
10:28:46 214  	END IF;
10:28:46 215  
10:28:46 216  	BEGIN
10:28:46 217  	  SELECT
10:28:46 218  	    NOTIFICATION.GROUP_ID,
10:28:46 219  	    NOTIFICATION.ACCOUNT_ID,
10:28:46 220  	    NOTIFICATION.NOTIFICATION_TYPE_ID,
10:28:46 221  	    NOTIFICATION.NOTIFICATION_STATUS_ID,
10:28:46 222  	    NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
10:28:46 223  	    NOTIFICATION.DATE_TO_NOTIFY
10:28:46 224  	    into
10:28:46 225  	    var_group_id,
10:28:46 226  	    var_account_id,
10:28:46 227  	    var_notification_type_id,
10:28:46 228  	    var_notification_status_id,
10:28:46 229  	    var_email_template_params,
10:28:46 230  	    var_date_to_notify
10:28:46 231  	  FROM
10:28:46 232  	    NOTIFICATION
10:28:46 233  	  WHERE
10:28:46 234  	    NOTIFICATION.ID = in_notification_id;
10:28:46 235  	  EXCEPTION
10:28:46 236  	    WHEN NO_DATA_FOUND THEN
10:28:46 237  	      RAISE BAD_NOTIFICATION_ID;
10:28:46 238  	END;
10:28:46 239  
10:28:46 240  	BEGIN
10:28:46 241  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_NOTIFICATION_HISTORY (
10:28:46 242  	    in_notification_id		=> in_notification_id,
10:28:46 243  	    in_account_id		=> var_account_id,
10:28:46 244  	    in_group_id 		=> var_group_id,
10:28:46 245  	    notification_reason_type_id => var_notification_type_id,
10:28:46 246  	    notification_status_id	=> var_notification_status_id,
10:28:46 247  	    email_template_params	=> var_email_template_params,
10:28:46 248  	    in_create_date		=> var_create_history_date,
10:28:46 249  	    in_date_to_notify		=> var_date_to_notify
10:28:46 250  	  );
10:28:46 251  	  EXCEPTION
10:28:46 252  	    WHEN OTHERS THEN
10:28:46 253  	      EXCEPTION_MESSAGE := SQLERRM;
10:28:46 254  	      RAISE CAN_NOT_CREATE_HISTORY;
10:28:46 255  	END;
10:28:46 256  
10:28:46 257  	UPDATE
10:28:46 258  	  NOTIFICATION
10:28:46 259  	SET
10:28:46 260  	  NOTIFICATION.NOTIFICATION_STATUS_ID = in_notification_status_id,
10:28:46 261  	  NOTIFICATION.UPDATE_DATE = sysdate
10:28:46 262  	WHERE
10:28:46 263  	  NOTIFICATION.ID = in_notification_id;
10:28:46 264  
10:28:46 265  	IF ( in_error_message IS NOT NULL ) THEN
10:28:46 266  	  ADD_NOTIFICATION_FAILURE(
10:28:46 267  	    in_notification_id => in_notification_id,
10:28:46 268  	    in_error_message => in_error_message
10:28:46 269  	  );
10:28:46 270  	END IF;
10:28:46 271  
10:28:46 272  	SELECT COUNT(1) INTO num_fails
10:28:46 273  	FROM NOTIFICATION_FAILURE
10:28:46 274  	WHERE NOTIFICATION_ID = in_notification_id;
10:28:46 275  
10:28:46 276  	IF (in_notification_status_id = NOTIFICATION_STATUSES_V24.NOTIFICATION_SENT OR num_fails >= max_fails) then
10:28:46 277  	  FOR REC IN (
10:28:46 278  	      SELECT ID, NOTIFICATION_ID, ERROR_MESSAGE, CREATE_DATE
10:28:46 279  	      FROM NOTIFICATION_FAILURE
10:28:46 280  	      WHERE NOTIFICATION_ID = in_notification_id
10:28:46 281  	      ) LOOP
10:28:46 282  	      BEGIN
10:28:46 283  		CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_NOTIF_FAILURE_HISTORY(
10:28:46 284  		  in_error_message	   => REC.ERROR_MESSAGE,
10:28:46 285  		  in_notification_id	   => REC.NOTIFICATION_ID,
10:28:46 286  		  in_create_date	   => REC.CREATE_DATE
10:28:46 287  		);
10:28:46 288  		EXCEPTION
10:28:46 289  		  WHEN OTHERS THEN
10:28:46 290  		    EXCEPTION_MESSAGE := SQLERRM;
10:28:46 291  		    RAISE CAN_NOT_CREATE_HISTORY;
10:28:46 292  	      END;
10:28:46 293  	  END LOOP;
10:28:46 294  	  DELETE FROM NOTIFICATION_FAILURE WHERE NOTIFICATION_ID = in_notification_id;
10:28:46 295  
10:28:46 296  	  BEGIN
10:28:46 297  	    SELECT
10:28:46 298  	      NOTIFICATION.GROUP_ID,
10:28:46 299  	      NOTIFICATION.ACCOUNT_ID,
10:28:46 300  	      NOTIFICATION.NOTIFICATION_TYPE_ID,
10:28:46 301  	      NOTIFICATION.NOTIFICATION_STATUS_ID,
10:28:46 302  	      NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
10:28:46 303  	      NOTIFICATION.DATE_TO_NOTIFY
10:28:46 304  	      into
10:28:46 305  	      var_group_id,
10:28:46 306  	      var_account_id,
10:28:46 307  	      var_notification_type_id,
10:28:46 308  	      var_notification_status_id,
10:28:46 309  	      var_email_template_params,
10:28:46 310  	      var_date_to_notify
10:28:46 311  	    FROM
10:28:46 312  	      NOTIFICATION
10:28:46 313  	    WHERE
10:28:46 314  	      NOTIFICATION.ID = in_notification_id;
10:28:46 315  	    EXCEPTION
10:28:46 316  	      WHEN NO_DATA_FOUND THEN
10:28:46 317  		RAISE BAD_NOTIFICATION_ID;
10:28:46 318  	  END;
10:28:46 319  
10:28:46 320  	  BEGIN
10:28:46 321  	    CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V24.CREATE_NOTIFICATION_HISTORY (
10:28:46 322  	      in_notification_id	  => in_notification_id,
10:28:46 323  	      in_account_id		  => var_account_id,
10:28:46 324  	      in_group_id		  => var_group_id,
10:28:46 325  	      notification_reason_type_id => var_notification_type_id,
10:28:46 326  	      notification_status_id	  => var_notification_status_id,
10:28:46 327  	      email_template_params	  => var_email_template_params,
10:28:46 328  	      in_create_date		  => var_create_history_date,
10:28:46 329  	      in_date_to_notify 	  => var_date_to_notify
10:28:46 330  	    );
10:28:46 331  	    EXCEPTION
10:28:46 332  	      WHEN OTHERS THEN
10:28:46 333  		EXCEPTION_MESSAGE := SQLERRM;
10:28:46 334  		RAISE CAN_NOT_CREATE_HISTORY;
10:28:46 335  	  END;
10:28:46 336  
10:28:46 337  	  DELETE FROM NOTIFICATION WHERE ID = in_notification_id;
10:28:46 338  
10:28:46 339  	END IF;
10:28:46 340  	commit;
10:28:46 341  
10:28:46 342  EXCEPTION
10:28:46 343  WHEN BAD_NOTIFICATION_STATUS_ID THEN
10:28:46 344  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 345  	  SPROC_NAME, 'Bad notification status');
10:28:46 346  WHEN BAD_NOTIFICATION_ID THEN
10:28:46 347  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 348  	  SPROC_NAME, 'No such notification');
10:28:46 349  WHEN CAN_NOT_CREATE_HISTORY THEN
10:28:46 350  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.INTERNAL_ERROR,
10:28:46 351  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:28:46 352  END SET_NOTIFICATION_STATUS;
10:28:46 353  
10:28:46 354  /******************************************************************************/
10:28:46 355  
10:28:46 356  PROCEDURE ADD_NOTIFICATION_FAILURE (
10:28:46 357  	in_notification_id IN NUMBER,
10:28:46 358  	in_error_message   IN VARCHAR2
10:28:46 359  ) AS
10:28:46 360  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION_FAILURE';
10:28:46 361  -- VARIABLES
10:28:46 362  temp_notification_id NUMBER;
10:28:46 363  var_create_date	   DATE := SYSDATE;
10:28:46 364  -- EXCEPTIONS
10:28:46 365  BAD_NOTIFICATION_ID	 EXCEPTION;
10:28:46 366  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
10:28:46 367  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:28:46 368  BEGIN
10:28:46 369  
10:28:46 370  	BEGIN
10:28:46 371  	  SELECT
10:28:46 372  	    NOTIFICATION.ID into temp_notification_id
10:28:46 373  	  FROM
10:28:46 374  	    NOTIFICATION
10:28:46 375  	  WHERE
10:28:46 376  	    NOTIFICATION.ID = in_notification_id;
10:28:46 377  	  EXCEPTION
10:28:46 378  	    WHEN NO_DATA_FOUND THEN
10:28:46 379  	      RAISE BAD_NOTIFICATION_ID;
10:28:46 380  	END;
10:28:46 381  
10:28:46 382  	INSERT INTO NOTIFICATION_FAILURE (
10:28:46 383  	  ID,
10:28:46 384  	  NOTIFICATION_ID,
10:28:46 385  	  ERROR_MESSAGE,
10:28:46 386  	  CREATE_DATE
10:28:46 387  	) VALUES (
10:28:46 388  	  NOTF_ID_SEQ.nextVal,
10:28:46 389  	  in_notification_id,
10:28:46 390  	  in_error_message,
10:28:46 391  	  sysdate
10:28:46 392  	);
10:28:46 393  
10:28:46 394  EXCEPTION
10:28:46 395  WHEN BAD_NOTIFICATION_ID THEN
10:28:46 396  	PROCS_COMMON_V24.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 397  	  SPROC_NAME, 'No such notification');
10:28:46 398  END ADD_NOTIFICATION_FAILURE;
10:28:46 399  
10:28:46 400  /******************************************************************************/
10:28:46 401  
10:28:46 402  PROCEDURE LOCK_PENDING_NOTIFICATION (
10:28:46 403  /*
10:28:46 404  Result: GLOBAL_STATUSES.TRUE if notification locked
10:28:46 405  GLOBA_STATUSES.FALSE - else
10:28:46 406  */
10:28:46 407  	in_notification_id IN NUMBER,
10:28:46 408  	out_lock_status    OUT NUMBER
10:28:46 409  ) AS
10:28:46 410  SPROC_NAME CONSTANT VARCHAR2(25) := 'LOCK_PENDING_NOTIFICATION';
10:28:46 411  -- VARIABLE
10:28:46 412  temp_notification_id NUMBER;
10:28:46 413  BEGIN
10:28:46 414  	SELECT
10:28:46 415  	  NOTIFICATION.ID into temp_notification_id
10:28:46 416  	FROM
10:28:46 417  	  NOTIFICATION
10:28:46 418  	WHERE
10:28:46 419  	  NOTIFICATION.ID = in_notification_id
10:28:46 420  	  AND (
10:28:46 421  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V24.NOTIFICATION_PENDING
10:28:46 422  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V24.NOTIFICATION_FAILED
10:28:46 423  	  )
10:28:46 424  	FOR UPDATE;
10:28:46 425  
10:28:46 426  	out_lock_status := 1;
10:28:46 427  
10:28:46 428  EXCEPTION
10:28:46 429  WHEN NO_DATA_FOUND THEN
10:28:46 430  	out_lock_status := 0;
10:28:46 431  END LOCK_PENDING_NOTIFICATION;
10:28:46 432  
10:28:46 433  /******************************************************************************/
10:28:46 434  
10:28:46 435  PROCEDURE GET_NOTIFICATION_DATA (
10:28:46 436  	in_notification_id IN NUMBER,
10:28:46 437  	out_result_set	   OUT SYS_REFCURSOR
10:28:46 438  ) AS
10:28:46 439  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_NOTIFICATION_DATA';
10:28:46 440  BEGIN
10:28:46 441  	OPEN out_result_set FOR
10:28:46 442  	SELECT
10:28:46 443  	  notification.id,
10:28:46 444  	  notification.group_id,
10:28:46 445  	  notification.email_template_params,
10:28:46 446  	  notification_status.value AS "notification_status",
10:28:46 447  	  notification_type.value AS "notification_type",
10:28:46 448  	  notification_type.template_url,
10:28:46 449  	  notification_hermes_data.copy AS "copy",
10:28:46 450  	  notification_hermes_data.link_ref AS "link_ref",
10:28:46 451  	  notification_hermes_data.link_offset AS "link_offset",
10:28:46 452  	  notification_hermes_data.link_count AS "link_count"
10:28:46 453  	FROM
10:28:46 454  	  notification
10:28:46 455  	  INNER JOIN notification_type
10:28:46 456  	  ON notification.notification_type_id = notification_type.id
10:28:46 457  	  INNER JOIN notification_status
10:28:46 458  	  ON notification.notification_status_id = notification_status.id
10:28:46 459  	  LEFT OUTER JOIN notification_hermes_data
10:28:46 460  	  ON notification_type.notification_hermes_data_id = notification_hermes_data.id
10:28:46 461  	WHERE
10:28:46 462  	  notification.id = in_notification_id;
10:28:46 463  END GET_NOTIFICATION_DATA;
10:28:46 464  
10:28:46 465  END PROCS_NOTIFICATION_V24;
10:28:46 466  .
10:28:46 SQL> /

Package body created.

Elapsed: 00:00:00.05
10:28:46 SQL> 
10:28:46 SQL> prompt Compiling body for public_procs_billing.sql
Compiling body for public_procs_billing.sql
10:28:46 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V24" AS
10:28:46   2  
10:28:46   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:28:46   4  /*
10:28:46   5  Throws exceptions:
10:28:46   6  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46   7  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46   8  */
10:28:46   9  	  in_offer_chain_id IN	 NUMBER,
10:28:46  10  	  out_result_set    OUT  SYS_REFCURSOR
10:28:46  11  ) AS
10:28:46  12  BEGIN
10:28:46  13  	PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_BY_ID (
10:28:46  14  	  in_offer_chain_id => in_offer_chain_id,
10:28:46  15  	  out_result_set => out_result_set
10:28:46  16  	);
10:28:46  17  END GET_OFFER_CHAIN_BY_ID;
10:28:46  18  
10:28:46  19  PROCEDURE GET_PENDING_INVOICES (
10:28:46  20  /*
10:28:46  21  Throws exceptions:
10:28:46  22  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46  23  */
10:28:46  24  	out_result_set	     OUT SYS_REFCURSOR,
10:28:46  25  	in_row_number	     IN NUMBER DEFAULT NULL
10:28:46  26  ) AS
10:28:46  27  BEGIN
10:28:46  28  	PROCS_INVOICE_V24.GET_PENDING_INVOICES(
10:28:46  29  	  out_result_set,
10:28:46  30  	  in_row_number
10:28:46  31  	);
10:28:46  32  END GET_PENDING_INVOICES;
10:28:46  33  
10:28:46  34  /********************************************************/
10:28:46  35  PROCEDURE GET_PENDING_REFUND_CHARGES (
10:28:46  36  /*
10:28:46  37  Throws exceptions:
10:28:46  38  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46  39  */
10:28:46  40  	out_result_set	    OUT SYS_REFCURSOR,
10:28:46  41  	in_row_number	    IN NUMBER DEFAULT NULL
10:28:46  42  ) AS
10:28:46  43  BEGIN
10:28:46  44  	PROCS_CHARGE_V24.GET_PENDING_REFUND_CHARGES(
10:28:46  45  	  out_result_set,
10:28:46  46  	  in_row_number
10:28:46  47  	);
10:28:46  48  END GET_PENDING_REFUND_CHARGES;
10:28:46  49  /********************************************************/
10:28:46  50  
10:28:46  51  PROCEDURE GET_UNPROCESSED_CHARGES (
10:28:46  52  /*
10:28:46  53  Throws exceptions:
10:28:46  54  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46  55  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46  56  */
10:28:46  57  	in_invoice_id  IN NUMBER,
10:28:46  58  	out_result_set OUT SYS_REFCURSOR
10:28:46  59  ) AS
10:28:46  60  BEGIN
10:28:46  61  	PROCS_CHARGE_V24.GET_UNPROCESSED_CHARGES(
10:28:46  62  	  in_invoice_id,
10:28:46  63  	  out_result_set
10:28:46  64  	);
10:28:46  65  END GET_UNPROCESSED_CHARGES;
10:28:46  66  
10:28:46  67  /********************************************************/
10:28:46  68  
10:28:46  69  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
10:28:46  70  /*
10:28:46  71  Throws exceptions:
10:28:46  72  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46  73  */
10:28:46  74  	in_transaction_id	      IN NUMBER,
10:28:46  75  	in_transaction_attempt_status IN NUMBER,
10:28:46  76  	out_result_set		      OUT SYS_REFCURSOR
10:28:46  77  ) AS
10:28:46  78  BEGIN
10:28:46  79  	PROCS_TRANSACTION_V24.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
10:28:46  80  	  in_transaction_id,
10:28:46  81  	  in_transaction_attempt_status,
10:28:46  82  	  out_result_set
10:28:46  83  	);
10:28:46  84  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
10:28:46  85  
10:28:46  86  /********************************************************/
10:28:46  87  
10:28:46  88  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
10:28:46  89  /*
10:28:46  90  Throws exceptions:
10:28:46  91  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46  92  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46  93  */
10:28:46  94  	in_transaction_attempt_id     IN NUMBER,
10:28:46  95  	in_transaction_attempt_status IN NUMBER
10:28:46  96  ) AS
10:28:46  97  BEGIN
10:28:46  98  	PROCS_TRANSACTION_V24.UPDATE_TRNSCTN_ATTEMPT_STATUS(
10:28:46  99  	   in_transaction_attempt_id,
10:28:46 100  	   in_transaction_attempt_status
10:28:46 101  	);
10:28:46 102  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
10:28:46 103  
10:28:46 104  /********************************************************/
10:28:46 105  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
10:28:46 106  /*
10:28:46 107  Throws exceptions:
10:28:46 108  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 109  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 110  */
10:28:46 111  	in_invoice_id	IN  NUMBER,
10:28:46 112  	out_result_set OUT SYS_REFCURSOR
10:28:46 113  ) AS
10:28:46 114  BEGIN
10:28:46 115  	PROCS_TRANSACTION_V24.GET_CLOSED_REFUNDS_BY_INVOICE(
10:28:46 116  	   in_invoice_id,
10:28:46 117  	   out_result_set
10:28:46 118  	);
10:28:46 119  END GET_CLOSED_REFUNDS_BY_INVOICE;
10:28:46 120  
10:28:46 121  /********************************************************/
10:28:46 122  
10:28:46 123  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
10:28:46 124  /*
10:28:46 125  Throws exceptions:
10:28:46 126  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 127  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 128  */
10:28:46 129  	in_transaction_attempt_id IN NUMBER,
10:28:46 130  	in_updated_by		  IN VARCHAR2
10:28:46 131  ) AS
10:28:46 132  BEGIN
10:28:46 133  	PROCS_TRANSACTION_V24.UPDATE_TRNSCTN_ATTEMPT_TIME(
10:28:46 134  	  in_transaction_attempt_id,
10:28:46 135  	  in_updated_by
10:28:46 136  	);
10:28:46 137  END UPDATE_TRNSCTN_ATTEMPT_TIME;
10:28:46 138  
10:28:46 139  /********************************************************/
10:28:46 140  
10:28:46 141  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
10:28:46 142  /*
10:28:46 143  Throws exceptions:
10:28:46 144  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 145  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 146  */
10:28:46 147  	in_transaction_id	   IN NUMBER,
10:28:46 148  	in_trans_attempt_status    IN NUMBER,
10:28:46 149  	in_external_status_code    IN VARCHAR2,
10:28:46 150  	in_external_status_message IN VARCHAR2,
10:28:46 151  	in_created_by		   IN VARCHAR2,
10:28:46 152  	in_ext_transaction_id	   IN VARCHAR2,
10:28:46 153  	out_transaction_attempt_id OUT NUMBER
10:28:46 154  ) AS
10:28:46 155  BEGIN
10:28:46 156  	PROCS_TRANSACTION_V24.CREATE_TRANSACTION_ATTEMPT(
10:28:46 157  	  in_transaction_id,
10:28:46 158  	  in_trans_attempt_status,
10:28:46 159  	  in_external_status_code,
10:28:46 160  	  in_external_status_message,
10:28:46 161  	  in_created_by,
10:28:46 162  	  in_ext_transaction_id,
10:28:46 163  	  out_transaction_attempt_id
10:28:46 164  	);
10:28:46 165  END CREATE_TRANSACTION_ATTEMPT;
10:28:46 166  
10:28:46 167  /********************************************************/
10:28:46 168  
10:28:46 169  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
10:28:46 170  /*
10:28:46 171  Throws exceptions:
10:28:46 172  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 173  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 174  */
10:28:46 175  	in_transaction_attempt_id IN NUMBER,
10:28:46 176  	in_ext_status_code	  IN VARCHAR2,
10:28:46 177  	in_ext_status_message	  IN VARCHAR2,
10:28:46 178  	in_ext_transaction_id	  IN VARCHAR2
10:28:46 179  ) AS
10:28:46 180  BEGIN
10:28:46 181  	PROCS_TRANSACTION_V24.UPDATE_TRANSACTION_ATTEMPT_INF(
10:28:46 182  	  in_transaction_attempt_id,
10:28:46 183  	  in_ext_status_code,
10:28:46 184  	  in_ext_status_message,
10:28:46 185  	  in_ext_transaction_id
10:28:46 186  	);
10:28:46 187  END UPDATE_TRANSACTION_ATTEMPT_INF;
10:28:46 188  
10:28:46 189  /********************************************************/
10:28:46 190  
10:28:46 191  PROCEDURE UPDATE_TRANSACTION_STATUS (
10:28:46 192  /*
10:28:46 193  Throws exceptions:
10:28:46 194  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 195  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 196  */
10:28:46 197  	in_transaction_id	 IN NUMBER,
10:28:46 198  	in_updated_by		 IN VARCHAR2,
10:28:46 199  	in_transaction_status_id IN NUMBER
10:28:46 200  ) AS
10:28:46 201  BEGIN
10:28:46 202  	PROCS_TRANSACTION_V24.UPDATE_TRANSACTION_STATUS(
10:28:46 203  	  in_transaction_id,
10:28:46 204  	  in_updated_by,
10:28:46 205  	  in_transaction_status_id
10:28:46 206  	);
10:28:46 207  END UPDATE_TRANSACTION_STATUS;
10:28:46 208  
10:28:46 209  /********************************************************/
10:28:46 210  
10:28:46 211  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
10:28:46 212  /*
10:28:46 213  Throws exceptions:
10:28:46 214  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 215  */
10:28:46 216  	in_transaction_id IN  NUMBER,
10:28:46 217  	out_attempts_num  OUT NUMBER
10:28:46 218  ) AS
10:28:46 219  BEGIN
10:28:46 220  	PROCS_TRANSACTION_V24.GET_FAILED_ATTEMPTS_NUMBER(
10:28:46 221  	  in_transaction_id,
10:28:46 222  	  out_attempts_num
10:28:46 223  	);
10:28:46 224  END GET_FAILED_ATTEMPTS_NUMBER;
10:28:46 225  
10:28:46 226  /********************************************************/
10:28:46 227  
10:28:46 228  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
10:28:46 229  /*
10:28:46 230  Throws exceptions:
10:28:46 231  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 232  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 233  */
10:28:46 234  	in_transaction_id IN  NUMBER,
10:28:46 235  	out_is_successfull  OUT NUMBER
10:28:46 236  ) AS
10:28:46 237  BEGIN
10:28:46 238  	PROCS_TRANSACTION_V24.IS_TRANSACTION_SUCCESSFULL(
10:28:46 239  	  in_transaction_id,
10:28:46 240  	  out_is_successfull
10:28:46 241  	);
10:28:46 242  END IS_TRANSACTION_SUCCESSFULL;
10:28:46 243  /********************************************************/
10:28:46 244  
10:28:46 245  PROCEDURE UPDATE_INVOICE_STATUS (
10:28:46 246  /*
10:28:46 247  Throws exceptions:
10:28:46 248  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 249  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 250  */
10:28:46 251  	in_invoice_id		       IN NUMBER,
10:28:46 252  	in_invoice_status_id	       IN NUMBER,
10:28:46 253  	in_updated_by		       IN VARCHAR2
10:28:46 254  ) AS
10:28:46 255  BEGIN
10:28:46 256  	PROCS_INVOICE_V24.UPDATE_INVOICE_STATUS(
10:28:46 257  	  in_invoice_id,
10:28:46 258  	  in_invoice_status_id,
10:28:46 259  	  in_updated_by
10:28:46 260  	);
10:28:46 261  END UPDATE_INVOICE_STATUS;
10:28:46 262  
10:28:46 263  /********************************************************/
10:28:46 264  
10:28:46 265  PROCEDURE SUSPEND_SUBSCRIPTION(
10:28:46 266  /*
10:28:46 267  Throws exceptions:
10:28:46 268  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 269  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:46 270  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 271  */
10:28:46 272  	  in_subs_id	IN NUMBER ,
10:28:46 273  	  in_updated_by IN VARCHAR2
10:28:46 274  ) AS
10:28:46 275  BEGIN
10:28:46 276  	PROCS_SUBSCRIPTION_V24.SUSPEND_SUBSCRIPTION(
10:28:46 277  	  in_subs_id,
10:28:46 278  	  in_updated_by
10:28:46 279  	);
10:28:46 280  END SUSPEND_SUBSCRIPTION;
10:28:46 281  
10:28:46 282  /********************************************************/
10:28:46 283  
10:28:46 284  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:28:46 285  /*
10:28:46 286  Throws exceptions:
10:28:46 287  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 288  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 289  */
10:28:46 290  	in_credit_card_id IN  NUMBER,
10:28:46 291  	out_result_set	  OUT SYS_REFCURSOR
10:28:46 292  ) AS
10:28:46 293  BEGIN
10:28:46 294  	PROCS_FIN_INSTRUMENTS_V24.GET_CREDIT_CARD_BY_ID(
10:28:46 295  	  in_credit_card_id,
10:28:46 296  	  out_result_set
10:28:46 297  	);
10:28:46 298  END GET_CREDIT_CARD_BY_ID;
10:28:46 299  
10:28:46 300  /*********************************************************/
10:28:46 301  
10:28:46 302  PROCEDURE GET_TRANSACTION_AMOUNT (
10:28:46 303  /*
10:28:46 304  Throws exceptions:
10:28:46 305  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 306  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 307  */
10:28:46 308  	in_transaction_id      IN  NUMBER,
10:28:46 309  	out_transaction_amount OUT NUMBER
10:28:46 310  ) AS
10:28:46 311  BEGIN
10:28:46 312  	PROCS_TRANSACTION_V24.GET_TRANSACTION_AMOUNT(
10:28:46 313  	  in_transaction_id,
10:28:46 314  	  out_transaction_amount
10:28:46 315  	);
10:28:46 316  END GET_TRANSACTION_AMOUNT;
10:28:46 317  
10:28:46 318  /***********************************************************/
10:28:46 319  
10:28:46 320  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
10:28:46 321  /*
10:28:46 322  Throws exceptions:
10:28:46 323  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 324  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 325  */
10:28:46 326  	in_invoice_id  IN  NUMBER,
10:28:46 327  	out_account_id OUT NUMBER
10:28:46 328  ) AS
10:28:46 329  BEGIN
10:28:46 330  	PROCS_INVOICE_V24.GET_ACCOUNT_BY_INVOICE_ID(
10:28:46 331  	  in_invoice_id,
10:28:46 332  	  out_account_id
10:28:46 333  	);
10:28:46 334  END GET_ACCOUNT_BY_INVOICE_ID;
10:28:46 335  
10:28:46 336  /************************************************************/
10:28:46 337  
10:28:46 338  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
10:28:46 339  /*
10:28:46 340  Throws exceptions:
10:28:46 341  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 342  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 343  */
10:28:46 344  	in_gift_certificate_id IN NUMBER,
10:28:46 345  	out_result_set	       OUT SYS_REFCURSOR
10:28:46 346  ) AS
10:28:46 347  BEGIN
10:28:46 348  	PROCS_FIN_INSTRUMENTS_V24.GET_GIFT_CERTIFICATE_BY_ID (
10:28:46 349  	  in_gift_certificate_id,
10:28:46 350  	  out_result_set
10:28:46 351  	);
10:28:46 352  END GET_GIFT_CERTIFICATE_BY_ID;
10:28:46 353  
10:28:46 354  /**************************************************************/
10:28:46 355  
10:28:46 356  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
10:28:46 357  /*
10:28:46 358  Throws exceptions:
10:28:46 359  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 360  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 361  */
10:28:46 362  	in_charge_id	    IN NUMBER,
10:28:46 363  	out_subscription_id OUT NUMBER
10:28:46 364  ) AS
10:28:46 365  BEGIN
10:28:46 366  	PROCS_CHARGE_V24.GET_SUBSCR_ID_BY_CHARGE_ID(
10:28:46 367  	  in_charge_id,
10:28:46 368  	  out_subscription_id
10:28:46 369  	);
10:28:46 370  END GET_SUBSCR_ID_BY_CHARGE_ID;
10:28:46 371  
10:28:46 372  /**************************************************************/
10:28:46 373  
10:28:46 374  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
10:28:46 375  /*
10:28:46 376  Throws exceptions:
10:28:46 377  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 378  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 379  */
10:28:46 380  	in_gift_certificate_id IN NUMBER,
10:28:46 381  	in_charge_id	       IN NUMBER,
10:28:46 382  	out_result	       OUT NUMBER
10:28:46 383  ) AS
10:28:46 384  BEGIN
10:28:46 385  	PROCS_FIN_INSTRUMENTS_V24.IS_GCERT_FOR_PROPER_OFFER (
10:28:46 386  	  in_gift_certificate_id,
10:28:46 387  	  in_charge_id,
10:28:46 388  	  out_result
10:28:46 389  	);
10:28:46 390  END IS_GCERT_FOR_PROPER_OFFER;
10:28:46 391  
10:28:46 392  /**************************************************************/
10:28:46 393  
10:28:46 394  PROCEDURE GET_SUBSCRIPTION_INFO (
10:28:46 395  /*
10:28:46 396  Throws exceptions:
10:28:46 397  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 398  */
10:28:46 399  	  in_subscription_id IN  NUMBER,
10:28:46 400  	  out_result_set      OUT SYS_REFCURSOR
10:28:46 401  ) AS
10:28:46 402  BEGIN
10:28:46 403  	PROCS_SUBSCRIPTION_V24.GET_SUBSCRIPTION_INFO (
10:28:46 404  	  in_subscription_id,
10:28:46 405  	  out_result_set
10:28:46 406  	);
10:28:46 407  END GET_SUBSCRIPTION_INFO;
10:28:46 408  
10:28:46 409  /****************************************************************/
10:28:46 410  
10:28:46 411  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:28:46 412  /*
10:28:46 413  Throws exceptions:
10:28:46 414  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 415  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 416  */
10:28:46 417  	in_invoice_id IN  NUMBER,
10:28:46 418  	out_amount    OUT NUMBER
10:28:46 419  ) AS
10:28:46 420  BEGIN
10:28:46 421  	PROCS_INVOICE_V24.CALCULATE_INVOICE_AMOUNT (
10:28:46 422  	  in_invoice_id,
10:28:46 423  	  out_amount
10:28:46 424  	);
10:28:46 425  END CALCULATE_INVOICE_AMOUNT;
10:28:46 426  
10:28:46 427  /****************************************************************/
10:28:46 428  
10:28:46 429  PROCEDURE GET_TRANSACTION_BY_ID (
10:28:46 430  /*
10:28:46 431  Throws exceptions:
10:28:46 432  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 433  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 434  */
10:28:46 435  	in_transaction_id IN NUMBER,
10:28:46 436  	out_result_set	  OUT SYS_REFCURSOR
10:28:46 437  ) AS
10:28:46 438  BEGIN
10:28:46 439  	PROCS_TRANSACTION_V24.GET_TRANSACTION_BY_ID(
10:28:46 440  	  in_transaction_id,
10:28:46 441  	  out_result_set
10:28:46 442  	);
10:28:46 443  END GET_TRANSACTION_BY_ID;
10:28:46 444  
10:28:46 445  /****************************************************************/
10:28:46 446  
10:28:46 447  PROCEDURE UPDATE_CHARGE_STATUS (
10:28:46 448  /*
10:28:46 449  Throws exceptions:
10:28:46 450  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 451  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 452  */
10:28:46 453  	in_charge_id	    IN CHARGE.ID%TYPE,
10:28:46 454  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:28:46 455  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
10:28:46 456  ) AS
10:28:46 457  BEGIN
10:28:46 458  	PROCS_CHARGE_V24.UPDATE_CHARGE_STATUS(
10:28:46 459  	  in_charge_id,
10:28:46 460  	  in_charge_status_id,
10:28:46 461  	  in_updated_by
10:28:46 462  	);
10:28:46 463  END UPDATE_CHARGE_STATUS;
10:28:46 464  
10:28:46 465  /****************************************************************/
10:28:46 466  
10:28:46 467  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:28:46 468  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:46 469  	out_result_set OUT SYS_REFCURSOR
10:28:46 470  ) AS
10:28:46 471  BEGIN
10:28:46 472  	PROCS_FIN_INSTRUMENTS_V24.GET_GC_BY_PURCH_INVOICE_ID(
10:28:46 473  	  in_invoice_id,
10:28:46 474  	  out_result_set
10:28:46 475  	);
10:28:46 476  END GET_GC_BY_PURCH_INVOICE_ID;
10:28:46 477  
10:28:46 478  /****************************************************************/
10:28:46 479  
10:28:46 480  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:28:46 481  /*
10:28:46 482  Throws exceptions:
10:28:46 483  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 484  APP_EXCEPTION_CODES_V24.INTRNAL_ERROR
10:28:46 485  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 486  */
10:28:46 487  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:28:46 488  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:28:46 489  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:28:46 490  ) AS
10:28:46 491  BEGIN
10:28:46 492  	PROCS_TRANSACTION_V24.UPDATE_TRANSACTION_ORDER_ID(
10:28:46 493  	  in_transaction_id,
10:28:46 494  	  in_order_id,
10:28:46 495  	  in_updated_by
10:28:46 496  	);
10:28:46 497  END UPDATE_TRANSACTION_ORDER_ID;
10:28:46 498  
10:28:46 499  /****************************************************************/
10:28:46 500  
10:28:46 501  PROCEDURE GET_ACTIVE_INVOICES_IDS (
10:28:46 502  /*
10:28:46 503  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 504  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 505  */
10:28:46 506  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
10:28:46 507  	in_subscription_id IN NUMBER,
10:28:46 508  	out_result_set	   OUT SYS_REFCURSOR
10:28:46 509  ) AS
10:28:46 510  BEGIN
10:28:46 511  	PROCS_SUBSCRIPTION_V24.GET_ACTIVE_INVOICES_IDS(
10:28:46 512  	  in_subscription_id,
10:28:46 513  	  out_result_set
10:28:46 514  	);
10:28:46 515  END GET_ACTIVE_INVOICES_IDS;
10:28:46 516  
10:28:46 517  /****************************************************************/
10:28:46 518  
10:28:46 519  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
10:28:46 520  /*
10:28:46 521  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 522  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 523  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:46 524  */
10:28:46 525  --  in_invoice_id        IN INVOICE.ID%TYPE,
10:28:46 526  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
10:28:46 527  -- norlov: in_refundable	      IN refund enabled
10:28:46 528  	in_invoice_id	     IN NUMBER,
10:28:46 529  	in_updated_by	     IN VARCHAR2,
10:28:46 530  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V24.FALSE
10:28:46 531  --  in_cancellation_date IN DATE DEFAULT current_timestamp
10:28:46 532  ) AS
10:28:46 533  BEGIN
10:28:46 534  	PROCS_SUBSCRIPTION_V24.CANCEL_SUBSCRIPTION_INVOICE(
10:28:46 535  	  in_invoice_id,
10:28:46 536  	  in_updated_by,
10:28:46 537  	  in_refundable
10:28:46 538  	);
10:28:46 539  END CANCEL_SUBSCRIPTION_INVOICE;
10:28:46 540  
10:28:46 541  /****************************************************************/
10:28:46 542  
10:28:46 543  PROCEDURE FINALIZE_CANCELATION (
10:28:46 544  /*
10:28:46 545  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 546  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 547  APP_EXCEPTION_CODES_V24.INTERNAL_ERROR
10:28:46 548  */
10:28:46 549  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
10:28:46 550  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
10:28:46 551  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
10:28:46 552  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:28:46 553  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:28:46 554  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
10:28:46 555  	in_subscription_id    IN NUMBER,
10:28:46 556  	in_cancelation_reason IN VARCHAR2,
10:28:46 557  	in_cancelation_date   IN DATE,
10:28:46 558  	in_note 	      IN VARCHAR2,
10:28:46 559  	in_agent_id	      IN NUMBER,
10:28:46 560  	in_updated_by	      IN VARCHAR2
10:28:46 561  ) AS
10:28:46 562  BEGIN
10:28:46 563  	PROCS_SUBSCRIPTION_V24.FINALIZE_CANCELATION(
10:28:46 564  	  in_subscription_id,
10:28:46 565  	  in_cancelation_reason,
10:28:46 566  	  in_cancelation_date,
10:28:46 567  	  in_note,
10:28:46 568  	  in_agent_id,
10:28:46 569  	  in_updated_by
10:28:46 570  	);
10:28:46 571  END FINALIZE_CANCELATION;
10:28:46 572  
10:28:46 573  /****************************************************************/
10:28:46 574  
10:28:46 575  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
10:28:46 576  /*
10:28:46 577  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 578  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 579  */
10:28:46 580  	in_subscription_id IN NUMBER,
10:28:46 581  	out_result_set	   OUT SYS_REFCURSOR
10:28:46 582  ) AS
10:28:46 583  BEGIN
10:28:46 584  	PROCS_SUBSCRIPTION_V24.GET_SUBSCR_PROD_OFFERRINGS(
10:28:46 585  	  in_subscription_id,
10:28:46 586  	  out_result_set
10:28:46 587  	);
10:28:46 588  END GET_SUBSCR_PROD_OFFERRINGS;
10:28:46 589  
10:28:46 590  /****************************************************************/
10:28:46 591  
10:28:46 592  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:28:46 593  /*
10:28:46 594  Throws exceptions (codes):
10:28:46 595  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 596  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 597  */
10:28:46 598  	in_offer_chain_id IN NUMBER,
10:28:46 599  	in_meta_data_name IN VARCHAR2,
10:28:46 600  	out_result_set	  OUT SYS_REFCURSOR
10:28:46 601  )AS
10:28:46 602  BEGIN
10:28:46 603  	PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_META_DATA(
10:28:46 604  	  in_offer_chain_id,
10:28:46 605  	  in_meta_data_name,
10:28:46 606  	  out_result_set
10:28:46 607  	);
10:28:46 608  END GET_OFFER_CHAIN_META_DATA;
10:28:46 609  
10:28:46 610  /****************************************************************/
10:28:46 611  
10:28:46 612  PROCEDURE READ_ACCOUNT (
10:28:46 613  	in_account_id  IN ACCOUNT.ID%TYPE,
10:28:46 614  	out_result_set OUT SYS_REFCURSOR
10:28:46 615  )AS
10:28:46 616  BEGIN
10:28:46 617  	PROCS_ACCOUNT_CRU_V24.READ_ACCOUNT(
10:28:46 618  	  in_account_id,
10:28:46 619  	  out_result_set
10:28:46 620  	);
10:28:46 621  END READ_ACCOUNT;
10:28:46 622  
10:28:46 623  /****************************************************************/
10:28:46 624  
10:28:46 625  PROCEDURE GET_COLLECTED_CHARGES (
10:28:46 626  /*
10:28:46 627  Throws exceptions:
10:28:46 628  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 629  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 630  */
10:28:46 631  	in_invoice_id  IN NUMBER,
10:28:46 632  	out_result_set OUT SYS_REFCURSOR
10:28:46 633  ) AS
10:28:46 634  BEGIN
10:28:46 635  	PROCS_CHARGE_V24.GET_COLLECTED_CHARGES(
10:28:46 636  	  in_invoice_id,
10:28:46 637  	  out_result_set
10:28:46 638  	);
10:28:46 639  END GET_COLLECTED_CHARGES;
10:28:46 640  
10:28:46 641  /****************************************************************/
10:28:46 642  
10:28:46 643  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
10:28:46 644  /*
10:28:46 645  Throws exceptions:
10:28:46 646  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 647  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 648  */
10:28:46 649  	in_invoice_id IN NUMBER,
10:28:46 650  	out_group_ids OUT SYS_REFCURSOR
10:28:46 651  ) AS
10:28:46 652  BEGIN
10:28:46 653  
10:28:46 654  	PROCS_ACCOUNT_V24.GET_GROUPS_ID_BY_INVOICE_ID(
10:28:46 655  	  in_invoice_id,
10:28:46 656  	  out_group_ids
10:28:46 657  	);
10:28:46 658  
10:28:46 659  END GET_GROUPS_ID_BY_INVOICE_ID;
10:28:46 660  
10:28:46 661  /****************************************************************/
10:28:46 662  
10:28:46 663  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:28:46 664  /*
10:28:46 665  Throws exceptions:
10:28:46 666  APP_EXCEPTION_CODES_V24.NOT_FOUND,
10:28:46 667  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 668  */
10:28:46 669  	in_group_id IN NUMBER,
10:28:46 670  	out_account_id	OUT NUMBER
10:28:46 671  ) AS
10:28:46 672  BEGIN
10:28:46 673  
10:28:46 674  	PROCS_ACCOUNT_V24.GET_ACCOUNT_ID_BY_GROUP_ID(
10:28:46 675  	  in_group_id,
10:28:46 676  	  out_account_id
10:28:46 677  	);
10:28:46 678  
10:28:46 679  END GET_ACCOUNT_ID_BY_GROUP_ID;
10:28:46 680  
10:28:46 681  /****************************************************************/
10:28:46 682  
10:28:46 683  PROCEDURE LOCK_ACCOUNT (
10:28:46 684  	in_group_id    IN NUMBER,
10:28:46 685  	in_lock_key    IN VARCHAR2,
10:28:46 686  	in_seconds_num IN NUMBER,
10:28:46 687  	in_created_by  IN VARCHAR2,
10:28:46 688  	in_reason      IN VARCHAR2
10:28:46 689  ) AS
10:28:46 690  BEGIN
10:28:46 691  	PROCS_LOCKING_V24.LOCK_ACCOUNT(
10:28:46 692  	  in_group_id,
10:28:46 693  	  in_lock_key,
10:28:46 694  	  in_seconds_num,
10:28:46 695  	  in_created_by,
10:28:46 696  	  in_reason
10:28:46 697  	);
10:28:46 698  END LOCK_ACCOUNT;
10:28:46 699  
10:28:46 700  /****************************************************************/
10:28:46 701  
10:28:46 702  PROCEDURE RELEASE_LOCK (
10:28:46 703  	in_group_id IN NUMBER,
10:28:46 704  	in_lock_key IN VARCHAR2
10:28:46 705  ) AS
10:28:46 706  BEGIN
10:28:46 707  	PROCS_LOCKING_V24.RELEASE_LOCK(
10:28:46 708  	  in_group_id,
10:28:46 709  	  in_lock_key
10:28:46 710  	);
10:28:46 711  END RELEASE_LOCK;
10:28:46 712  
10:28:46 713  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
10:28:46 714  	in_invoice_id		    IN NUMBER,
10:28:46 715  	out_order_id		    OUT VARCHAR2,
10:28:46 716  	out_external_transaction_id OUT VARCHAR2
10:28:46 717  ) AS
10:28:46 718  BEGIN
10:28:46 719  	PROCS_INVOICE_V24.GET_PAYMENT_INFO_BY_INVOICE_ID(
10:28:46 720  	  in_invoice_id,
10:28:46 721  	  out_order_id,
10:28:46 722  	  out_external_transaction_id
10:28:46 723  	);
10:28:46 724  END GET_PAYMENT_INFO_BY_INVOICE_ID;
10:28:46 725  
10:28:46 726  /******************************************************************************/
10:28:46 727  
10:28:46 728  PROCEDURE GET_PAYPAL_BY_ID (
10:28:46 729  	in_paypal_id   IN  NUMBER,
10:28:46 730  	out_result_set OUT SYS_REFCURSOR
10:28:46 731  ) AS
10:28:46 732  BEGIN
10:28:46 733  	PROCS_FIN_INSTRUMENTS_V24.GET_PAYPAL_BY_ID(
10:28:46 734  	  in_paypal_id,
10:28:46 735  	  out_result_set
10:28:46 736  	);
10:28:46 737  END GET_PAYPAL_BY_ID;
10:28:46 738  
10:28:46 739  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
10:28:46 740  /*
10:28:46 741  Throws exceptions:
10:28:46 742  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 743  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 744  */
10:28:46 745  	in_charge_id   in  number,
10:28:46 746  	out_attempt_count out number
10:28:46 747  ) as
10:28:46 748  begin
10:28:46 749  	PROCS_TRANSACTION_V24.GET_NEXT_ATTEMPT_NUMBER(
10:28:46 750  	  in_charge_id,
10:28:46 751  	  out_attempt_count
10:28:46 752  	);
10:28:46 753  end GET_NEXT_ATTEMPT_NUMBER;
10:28:46 754  
10:28:46 755  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:28:46 756  	in_offer_chain_id	 IN NUMBER,
10:28:46 757  	in_action_name		 IN VARCHAR2,
10:28:46 758  	out_notification_type_id out number
10:28:46 759  ) as
10:28:46 760  begin
10:28:46 761  	PROCS_OFFER_CHAIN_V24.GET_NOTIFICATION_TYPE_ID(
10:28:46 762  	  in_offer_chain_id,
10:28:46 763  	  in_action_name,
10:28:46 764  	  out_notification_type_id
10:28:46 765  	);
10:28:46 766  end GET_NOTIFICATION_TYPE_ID;
10:28:46 767  
10:28:46 768  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
10:28:46 769  /*
10:28:46 770  Throws exceptions:
10:28:46 771  APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46 772  APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46 773  */
10:28:46 774  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:46 775  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
10:28:46 776  ) AS
10:28:46 777  BEGIN
10:28:46 778  PROCS_FIN_INSTRUMENTS_V24.GET_GC_ID_BY_PURCH_INVOICE_ID(
10:28:46 779  in_invoice_id,
10:28:46 780  out_gift_certificate_id
10:28:46 781  );
10:28:46 782  END GET_GC_ID_BY_PURCH_INVOICE_ID;
10:28:46 783  
10:28:46 784  /****************************************************************************/
10:28:46 785  
10:28:46 786  PROCEDURE SHOULD_MOVE_TO_GRACE(
10:28:46 787  	in_invoice_id  IN INVOICE.ID%TYPE,
10:28:46 788  	out_result     OUT NUMBER
10:28:46 789  ) AS
10:28:46 790  BEGIN
10:28:46 791  	-- if the invoice preceding the given invoice has no transaction attempts, then
10:28:46 792  	-- it is not billed out of Sartre. if so, then the associated subscription
10:28:46 793  	-- should be canceled after a final failed billing attempt--not moved to grace.
10:28:46 794  	SELECT DECODE(COUNT(1), 0, 0, 1) INTO out_result
10:28:46 795  	FROM CHARGE c
10:28:46 796  	INNER JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
10:28:46 797  	INNER JOIN TRANSACTION_ATTEMPT ta ON ta.TRANSACTION_ID = t.ID
10:28:46 798  	WHERE c.INVOICE_ID = (
10:28:46 799  	  -- select previous invoice_id, or -1 if there is none
10:28:46 800  	  SELECT PREV_INVOICE_ID FROM (
10:28:46 801  	    SELECT i.ID, LAG(i.ID, 1, -1) OVER (ORDER BY i.CREATE_DATE) AS PREV_INVOICE_ID
10:28:46 802  	    FROM INVOICE i
10:28:46 803  	    INNER JOIN LICENSE l ON i.ID = l.INVOICE_ID
10:28:46 804  	    WHERE l.SUBSCRIPTION_ID = (
10:28:46 805  	      SELECT SUBSCRIPTION_ID FROM LICENSE WHERE INVOICE_ID = in_invoice_id
10:28:46 806  	    )
10:28:46 807  	  ) WHERE ID = in_invoice_id
10:28:46 808  	);
10:28:46 809  END SHOULD_MOVE_TO_GRACE;
10:28:46 810  
10:28:46 811  /****************************************************************************/
10:28:46 812  
10:28:46 813  PROCEDURE MOVE_TO_GRACE(
10:28:46 814  	in_invoice_id		      IN INVOICE.ID%TYPE,
10:28:46 815  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
10:28:46 816  	in_grace_period_length_hours  IN NUMBER
10:28:46 817  ) AS
10:28:46 818  BEGIN
10:28:46 819  	PROCS_SUBSCRIPTION_V24.START_GRACE_BY_INVOICE_ID(
10:28:46 820  	  in_invoice_id        => in_invoice_id,
10:28:46 821  	  in_updater	       => in_updated_by,
10:28:46 822  	  in_duration_in_hours => in_grace_period_length_hours
10:28:46 823  	);
10:28:46 824  END MOVE_TO_GRACE;
10:28:46 825  
10:28:46 826  /****************************************************************************/
10:28:46 827  
10:28:46 828  PROCEDURE MOVE_OUT_OF_GRACE(
10:28:46 829  	in_invoice_id	IN INVOICE.ID%TYPE,
10:28:46 830  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
10:28:46 831  ) AS
10:28:46 832  BEGIN
10:28:46 833  	PROCS_SUBSCRIPTION_V24.STOP_GRACE_BY_INVOICE_ID(
10:28:46 834  	  in_invoice_id => in_invoice_id,
10:28:46 835  	  in_updater	=> in_updated_by
10:28:46 836  	);
10:28:46 837  END MOVE_OUT_OF_GRACE;
10:28:46 838  
10:28:46 839  END PUBLIC_PROCS_BILLING_V24;
10:28:46 840  .
10:28:46 SQL> /

Package body created.

Elapsed: 00:00:00.06
10:28:46 SQL> 
10:28:46 SQL> prompt Compiling body for public_procs_notification.sql
Compiling body for public_procs_notification.sql
10:28:46 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V24" AS
10:28:46   2  
10:28:46   3  PROCEDURE LOCK_ACCOUNT (
10:28:46   4  	in_group_id    IN NUMBER,
10:28:46   5  	in_lock_key    IN VARCHAR2,
10:28:46   6  	in_seconds_num IN NUMBER,
10:28:46   7  	in_created_by  IN VARCHAR2,
10:28:46   8  	in_reason      IN VARCHAR2
10:28:46   9  ) AS
10:28:46  10  BEGIN
10:28:46  11  	PROCS_LOCKING_V24.LOCK_ACCOUNT(
10:28:46  12  	  in_group_id,
10:28:46  13  	  in_lock_key,
10:28:46  14  	  in_seconds_num,
10:28:46  15  	  in_created_by,
10:28:46  16  	  in_reason
10:28:46  17  	);
10:28:46  18  END LOCK_ACCOUNT;
10:28:46  19  
10:28:46  20  /******************************************************************************/
10:28:46  21  
10:28:46  22  PROCEDURE RELEASE_LOCK (
10:28:46  23  	in_group_id IN NUMBER,
10:28:46  24  	in_lock_key IN VARCHAR2
10:28:46  25  ) AS
10:28:46  26  BEGIN
10:28:46  27  	PROCS_LOCKING_V24.RELEASE_LOCK(
10:28:46  28  	  in_group_id,
10:28:46  29  	  in_lock_key
10:28:46  30  	);
10:28:46  31  END RELEASE_LOCK;
10:28:46  32  
10:28:46  33  END PUBLIC_PROCS_NOTIFICATION_V24;
10:28:46  34  .
10:28:46 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:28:46 SQL> 
10:28:46 SQL> prompt Compiling body for public_procs_renewal.sql
Compiling body for public_procs_renewal.sql
10:28:46 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V24" AS
10:28:46   2  
10:28:46   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
10:28:46   4  	out_result_set OUT SYS_REFCURSOR
10:28:46   5  ) AS
10:28:46   6  BEGIN
10:28:46   7  	PROCS_GROUP_ACCOUNT_V24.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
10:28:46   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
10:28:46   9  
10:28:46  10  /*******************************************************/
10:28:46  11  
10:28:46  12  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
10:28:46  13  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
10:28:46  14  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
10:28:46  15  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:28:46  16  ) AS
10:28:46  17  BEGIN
10:28:46  18  	PROCS_GROUP_ACCOUNT_V24.UPDATE_SS_NEED_ENTITLEMENTS(
10:28:46  19  	  in_sub_share_id => in_sub_share_id,
10:28:46  20  	  in_need_entitlements => in_need_entitlements,
10:28:46  21  	  in_updater => in_updater
10:28:46  22  	);
10:28:46  23  END UPDATE_SS_NEED_ENTITLEMENTS;
10:28:46  24  
10:28:46  25  /*******************************************************/
10:28:46  26  
10:28:46  27  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:28:46  28  	  in_offer_chain_id IN	 NUMBER,
10:28:46  29  	  out_result_set    OUT  SYS_REFCURSOR
10:28:46  30  ) AS
10:28:46  31  BEGIN
10:28:46  32  	PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_BY_ID (
10:28:46  33  	  in_offer_chain_id => in_offer_chain_id,
10:28:46  34  	  out_result_set => out_result_set
10:28:46  35  	);
10:28:46  36  END GET_OFFER_CHAIN_BY_ID;
10:28:46  37  
10:28:46  38  /*******************************************************/
10:28:46  39  
10:28:46  40  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:28:46  41  	in_offer_chain_id IN NUMBER,
10:28:46  42  	in_meta_data_name IN VARCHAR2,
10:28:46  43  	out_result_set	  OUT SYS_REFCURSOR
10:28:46  44  )AS
10:28:46  45  BEGIN
10:28:46  46  	PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_META_DATA(
10:28:46  47  	  in_offer_chain_id,
10:28:46  48  	  in_meta_data_name,
10:28:46  49  	  out_result_set
10:28:46  50  	);
10:28:46  51  END GET_OFFER_CHAIN_META_DATA;
10:28:46  52  
10:28:46  53  /*******************************************************/
10:28:46  54  
10:28:46  55  PROCEDURE GET_ENDING_LICENSES (
10:28:46  56  	in_hours_number IN NUMBER,
10:28:46  57  	out_result_set OUT SYS_REFCURSOR
10:28:46  58  ) AS
10:28:46  59  BEGIN
10:28:46  60  	PROCS_LICENSE_V24.GET_ENDING_LICENSES(in_hours_number,out_result_set);
10:28:46  61  END GET_ENDING_LICENSES;
10:28:46  62  
10:28:46  63  /*******************************************************/
10:28:46  64  
10:28:46  65  PROCEDURE GET_ENDING_LICENSES_CC (
10:28:46  66  	in_hours_number IN NUMBER,
10:28:46  67  	out_result_set OUT SYS_REFCURSOR,
10:28:46  68  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:46  69  ) AS
10:28:46  70  BEGIN
10:28:46  71  	PROCS_LICENSE_V24.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
10:28:46  72  END GET_ENDING_LICENSES_CC;
10:28:46  73  
10:28:46  74  /*******************************************************/
10:28:46  75  
10:28:46  76  PROCEDURE GET_RECURRING_OFFER (
10:28:46  77  	in_license_id  IN NUMBER,
10:28:46  78  	out_result_set OUT SYS_REFCURSOR
10:28:46  79  ) AS
10:28:46  80  BEGIN
10:28:46  81  	PROCS_LICENSE_V24.GET_RECURRING_OFFER (
10:28:46  82  	  in_license_id,
10:28:46  83  	  out_result_set
10:28:46  84  	);
10:28:46  85  END GET_RECURRING_OFFER;
10:28:46  86  
10:28:46  87  /********************************************************/
10:28:46  88  
10:28:46  89  PROCEDURE GET_NEXT_OFFER (
10:28:46  90  	in_license_id  IN NUMBER,
10:28:46  91  	out_result_set OUT SYS_REFCURSOR
10:28:46  92  ) AS
10:28:46  93  BEGIN
10:28:46  94  	PROCS_LICENSE_V24.GET_NEXT_OFFER (
10:28:46  95  	  in_license_id,
10:28:46  96  	  out_result_set
10:28:46  97  	);
10:28:46  98  END GET_NEXT_OFFER;
10:28:46  99  
10:28:46 100  /*********************************************************/
10:28:46 101  
10:28:46 102  PROCEDURE UPDATE_LICENSE_STATUS(
10:28:46 103  	  in_license_id     IN NUMBER,
10:28:46 104  	  in_license_status IN NUMBER,
10:28:46 105  	  in_updated_by     IN VARCHAR2
10:28:46 106  ) AS
10:28:46 107  BEGIN
10:28:46 108  	PROCS_LICENSE_V24.UPDATE_LICENSE_STATUS (
10:28:46 109  	  in_license_id,
10:28:46 110  	  in_license_status,
10:28:46 111  	  in_updated_by
10:28:46 112  	);
10:28:46 113  END UPDATE_LICENSE_STATUS;
10:28:46 114  
10:28:46 115  /**********************************************************/
10:28:46 116  
10:28:46 117  PROCEDURE UPDATE_INVOICE_STATUS (
10:28:46 118  	in_invoice_id		       IN NUMBER,
10:28:46 119  	in_invoice_status_id	       IN NUMBER,
10:28:46 120  	in_updated_by		       IN VARCHAR2
10:28:46 121  ) AS
10:28:46 122  BEGIN
10:28:46 123  	PROCS_INVOICE_V24.UPDATE_INVOICE_STATUS(
10:28:46 124  	  in_invoice_id,
10:28:46 125  	  in_invoice_status_id,
10:28:46 126  	  in_updated_by
10:28:46 127  	);
10:28:46 128  END UPDATE_INVOICE_STATUS;
10:28:46 129  
10:28:46 130  /***********************************************************/
10:28:46 131  
10:28:46 132  PROCEDURE CREATE_LICENSE(
10:28:46 133  	in_status_id		    IN NUMBER,
10:28:46 134  	in_needs_entitlements	    IN NUMBER,
10:28:46 135  	in_start_date		    IN DATE,
10:28:46 136  	in_end_date		    IN DATE,
10:28:46 137  	in_offer_id		    IN NUMBER,
10:28:46 138  	in_subscription_id	    IN NUMBER,
10:28:46 139  	in_invoice_id		    IN NUMBER,
10:28:46 140  	in_created_by		    IN VARCHAR2,
10:28:46 141  	in_is_extension 	    IN NUMBER,
10:28:46 142  	in_current_offer_index	    IN NUMBER,
10:28:46 143  	in_current_offer_recurr_num IN NUMBER,
10:28:46 144  	out_license_id		    OUT NUMBER
10:28:46 145  ) AS
10:28:46 146  BEGIN
10:28:46 147  	PROCS_LICENSE_V24.CREATE_LICENSE (
10:28:46 148  	  in_status_id,
10:28:46 149  	  in_needs_entitlements,
10:28:46 150  	  in_start_date,
10:28:46 151  	  in_end_date,
10:28:46 152  	  in_offer_id,
10:28:46 153  	  in_subscription_id,
10:28:46 154  	  in_invoice_id,
10:28:46 155  	  in_created_by,
10:28:46 156  	  in_is_extension,
10:28:46 157  	  in_current_offer_index,
10:28:46 158  	  in_current_offer_recurr_num,
10:28:46 159  	  out_license_id
10:28:46 160  	);
10:28:46 161  END CREATE_LICENSE;
10:28:46 162  
10:28:46 163  /******************************************************/
10:28:46 164  
10:28:46 165  PROCEDURE CREATE_INVOICE(
10:28:46 166  	  in_invoice_status IN NUMBER,
10:28:46 167  	  in_created_by     IN VARCHAR2,
10:28:46 168  	  in_tax_exempt_id  IN VARCHAR2,
10:28:46 169  	  out_invoice_id    OUT NUMBER
10:28:46 170  ) AS
10:28:46 171  BEGIN
10:28:46 172  	PROCS_INVOICE_V24.CREATE_INVOICE (
10:28:46 173  	  in_invoice_status,
10:28:46 174  	  in_created_by,
10:28:46 175  	  in_tax_exempt_id,
10:28:46 176  	  out_invoice_id
10:28:46 177  	);
10:28:46 178  END CREATE_INVOICE;
10:28:46 179  
10:28:46 180  /*******************************************************/
10:28:46 181  
10:28:46 182  PROCEDURE CREATE_CHARGE(
10:28:46 183  	in_invoice_id	      IN NUMBER,
10:28:46 184  	in_transaction_id     IN NUMBER,
10:28:46 185  	in_instrument_type_id IN NUMBER,
10:28:46 186  	in_instrument_id      IN NUMBER,
10:28:46 187  	in_charge_amount      IN NUMBER,
10:28:46 188  	in_created_by	      IN VARCHAR2,
10:28:46 189  	in_charge_status_id   IN NUMBER,
10:28:46 190  	out_charge_id	      OUT NUMBER
10:28:46 191  ) AS
10:28:46 192  BEGIN
10:28:46 193  	PROCS_CHARGE_V24.CREATE_CHARGE (
10:28:46 194  	  in_invoice_id,
10:28:46 195  	  in_transaction_id,
10:28:46 196  	  in_instrument_type_id,
10:28:46 197  	  in_instrument_id,
10:28:46 198  	  in_charge_amount,
10:28:46 199  	  in_created_by,
10:28:46 200  	  in_charge_status_id,
10:28:46 201  	  out_charge_id
10:28:46 202  	);
10:28:46 203  END CREATE_CHARGE;
10:28:46 204  
10:28:46 205  /**********************************************************/
10:28:46 206  
10:28:46 207  PROCEDURE HAS_FUTURE_LICENSE (
10:28:46 208  	in_license_id IN NUMBER,
10:28:46 209  	out_result	   OUT NUMBER
10:28:46 210  ) AS
10:28:46 211  BEGIN
10:28:46 212  	PROCS_SUBSCRIPTION_V24.HAS_FUTURE_LICENSE (
10:28:46 213  	  in_license_id,
10:28:46 214  	  out_result
10:28:46 215  	);
10:28:46 216  END HAS_FUTURE_LICENSE;
10:28:46 217  
10:28:46 218  /***********************************************************/
10:28:46 219  
10:28:46 220  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
10:28:46 221  	in_license_id IN NUMBER,
10:28:46 222  	out_group_id  OUT NUMBER
10:28:46 223  ) AS
10:28:46 224  BEGIN
10:28:46 225  	PROCS_LICENSE_V24.GET_GROUP_ID_BY_LICENSE_ID (
10:28:46 226  	  in_license_id,
10:28:46 227  	  out_group_id
10:28:46 228  	);
10:28:46 229  END GET_GROUP_ID_BY_LICENSE_ID;
10:28:46 230  
10:28:46 231  /**********************************************************/
10:28:46 232  
10:28:46 233  PROCEDURE GET_OFFER_PRODUCTS (
10:28:46 234  	in_offer_id    IN NUMBER,
10:28:46 235  	out_result_set OUT SYS_REFCURSOR
10:28:46 236  ) AS
10:28:46 237  BEGIN
10:28:46 238  	PROCS_OFFER_CHAIN_V24.GET_OFFER_PRODUCTS (
10:28:46 239  	  in_offer_id,
10:28:46 240  	  out_result_set
10:28:46 241  	);
10:28:46 242  END GET_OFFER_PRODUCTS;
10:28:46 243  
10:28:46 244  /***********************************************************/
10:28:46 245  
10:28:46 246  PROCEDURE CREATE_TRANSACTION (
10:28:46 247  	in_transaction_id	  IN NUMBER,
10:28:46 248  	in_status_id		  IN NUMBER,
10:28:46 249  	in_amount		  IN NUMBER,
10:28:46 250  	in_created_by		  IN VARCHAR2,
10:28:46 251  	in_order_id		  IN VARCHAR2,
10:28:46 252  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
10:28:46 253  	out_transaction_id	  OUT NUMBER
10:28:46 254  ) AS
10:28:46 255  BEGIN
10:28:46 256  	PROCS_TRANSACTION_V24.CREATE_TRANSACTION(
10:28:46 257  	  in_transaction_id,
10:28:46 258  	  in_status_id,
10:28:46 259  	  in_amount,
10:28:46 260  	  in_created_by,
10:28:46 261  	  in_order_id,
10:28:46 262  	  GLOBAL_CONSTANTS_V24.FALSE, -- is_refund should be false in renewal
10:28:46 263  	  in_transaction_type_code,
10:28:46 264  	  out_transaction_id
10:28:46 265  	);
10:28:46 266  END CREATE_TRANSACTION;
10:28:46 267  
10:28:46 268  /************************************************************/
10:28:46 269  
10:28:46 270  PROCEDURE ADD_LINE_ITEMS(
10:28:46 271  	in_invoice_id IN NUMBER,
10:28:46 272  	in_offer_id   IN NUMBER,
10:28:46 273  	in_created_by IN VARCHAR2
10:28:46 274  ) AS
10:28:46 275  BEGIN
10:28:46 276  	PROCS_LINE_ITEMS_V24.ADD_LINE_ITEMS(
10:28:46 277  	  in_invoice_id,
10:28:46 278  	  in_offer_id,
10:28:46 279  	  in_created_by
10:28:46 280  	);
10:28:46 281  END ADD_LINE_ITEMS;
10:28:46 282  
10:28:46 283  /************************************************************/
10:28:46 284  
10:28:46 285  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:28:46 286  	in_invoice_id IN  NUMBER,
10:28:46 287  	out_amount    OUT NUMBER
10:28:46 288  ) AS
10:28:46 289  BEGIN
10:28:46 290  	PROCS_INVOICE_V24.CALCULATE_INVOICE_AMOUNT (
10:28:46 291  	  in_invoice_id,
10:28:46 292  	  out_amount
10:28:46 293  	);
10:28:46 294  END CALCULATE_INVOICE_AMOUNT;
10:28:46 295  
10:28:46 296  /*************************************************************/
10:28:46 297  
10:28:46 298  PROCEDURE RESERVE_TRANSACTION_ID (
10:28:46 299  	out_transaction_id OUT NUMBER
10:28:46 300  ) AS
10:28:46 301  BEGIN
10:28:46 302  	PROCS_TRANSACTION_V24.RESERVE_TRANSACTION_ID (
10:28:46 303  	  out_transaction_id
10:28:46 304  	);
10:28:46 305  END RESERVE_TRANSACTION_ID;
10:28:46 306  
10:28:46 307  /***************************************************************/
10:28:46 308  
10:28:46 309  PROCEDURE P_GET_NEXT_OFFER_INDEX (
10:28:46 310  	in_offer_chain_id	     IN NUMBER,
10:28:46 311  	in_offer_chain_current_index IN NUMBER,
10:28:46 312  	out_next_offer_index	     OUT NUMBER
10:28:46 313  ) AS
10:28:46 314  BEGIN
10:28:46 315  	PROCS_OFFER_CHAIN_V24.P_GET_NEXT_OFFER_INDEX(
10:28:46 316  	  in_offer_chain_id,
10:28:46 317  	  in_offer_chain_current_index,
10:28:46 318  	  out_next_offer_index
10:28:46 319  	);
10:28:46 320  END P_GET_NEXT_OFFER_INDEX;
10:28:46 321  
10:28:46 322  /***************************************************************/
10:28:46 323  
10:28:46 324  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
10:28:46 325  	in_license_id		     IN NUMBER,
10:28:46 326  	in_offer_chain_current_index IN NUMBER,
10:28:46 327  	out_next_offer_index	     OUT NUMBER
10:28:46 328  ) AS
10:28:46 329  BEGIN
10:28:46 330  	PROCS_OFFER_CHAIN_V24.GET_NEXT_OFFER_INDEX_BY_LCNS(
10:28:46 331  	  in_license_id,
10:28:46 332  	  in_offer_chain_current_index,
10:28:46 333  	  out_next_offer_index
10:28:46 334  	);
10:28:46 335  END GET_NEXT_OFFER_INDEX_BY_LCNS;
10:28:46 336  
10:28:46 337  /******************************************************************/
10:28:46 338  
10:28:46 339  PROCEDURE GET_SUBSCRIPTION_INFO (
10:28:46 340  	  in_subscription_id IN  NUMBER,
10:28:46 341  	  out_result_set      OUT SYS_REFCURSOR
10:28:46 342  ) AS
10:28:46 343  BEGIN
10:28:46 344  	PROCS_SUBSCRIPTION_V24.GET_SUBSCRIPTION_INFO(
10:28:46 345  	  in_subscription_id,
10:28:46 346  	  out_result_set
10:28:46 347  	);
10:28:46 348  END GET_SUBSCRIPTION_INFO;
10:28:46 349  
10:28:46 350  /*******************************************************************/
10:28:46 351  
10:28:46 352  PROCEDURE CLOSE_SUBSCRIPTION (
10:28:46 353  	in_subscription_id IN NUMBER,
10:28:46 354  	in_updated_by	   IN VARCHAR2
10:28:46 355  ) AS
10:28:46 356  BEGIN
10:28:46 357  	PROCS_SUBSCRIPTION_V24.CLOSE_SUBSCRIPTION(
10:28:46 358  	  in_subscription_id,
10:28:46 359  	  in_updated_by
10:28:46 360  	);
10:28:46 361  END CLOSE_SUBSCRIPTION;
10:28:46 362  
10:28:46 363  /*******************************************************************/
10:28:46 364  
10:28:46 365  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
10:28:46 366  	out_result_set OUT SYS_REFCURSOR
10:28:46 367  ) AS
10:28:46 368  BEGIN
10:28:46 369  	PROCS_LICENSE_V24.GET_NEED_ENTITLEMENTS_LICENSES(
10:28:46 370  	  out_result_set
10:28:46 371  	);
10:28:46 372  END GET_NEED_ENTITLEMENTS_LICENSES;
10:28:46 373  
10:28:46 374  /*******************************************************************/
10:28:46 375  
10:28:46 376  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
10:28:46 377  	in_license_id	      IN NUMBER,
10:28:46 378  	in_needs_entitlements IN NUMBER,
10:28:46 379  	in_updated_by	      IN VARCHAR2
10:28:46 380  ) AS
10:28:46 381  BEGIN
10:28:46 382  	PROCS_LICENSE_V24.UPDATE_NEED_ENTITLEMENTS_FLAG(
10:28:46 383  	  in_license_id,
10:28:46 384  	  in_needs_entitlements,
10:28:46 385  	  in_updated_by
10:28:46 386  	);
10:28:46 387  END UPDATE_NEED_ENTITLEMENTS_FLAG;
10:28:46 388  
10:28:46 389  /*******************************************************/
10:28:46 390  
10:28:46 391  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
10:28:46 392  	in_offer_id    IN NUMBER,
10:28:46 393  	out_result_set OUT SYS_REFCURSOR
10:28:46 394  ) AS
10:28:46 395  BEGIN
10:28:46 396  	PROCS_OFFER_CHAIN_V24.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
10:28:46 397  END GET_PROD_OFFERINGS_BY_OFFER_ID;
10:28:46 398  
10:28:46 399  /*******************************************************/
10:28:46 400  
10:28:46 401  PROCEDURE LOCK_ACCOUNT (
10:28:46 402  	in_group_id    IN NUMBER,
10:28:46 403  	in_lock_key    IN VARCHAR2,
10:28:46 404  	in_seconds_num IN NUMBER,
10:28:46 405  	in_created_by  IN VARCHAR2,
10:28:46 406  	in_reason      IN VARCHAR2
10:28:46 407  ) AS
10:28:46 408  BEGIN
10:28:46 409  	PROCS_LOCKING_V24.LOCK_ACCOUNT(
10:28:46 410  	  in_group_id,
10:28:46 411  	  in_lock_key,
10:28:46 412  	  in_seconds_num,
10:28:46 413  	  in_created_by,
10:28:46 414  	  in_reason
10:28:46 415  	);
10:28:46 416  END LOCK_ACCOUNT;
10:28:46 417  
10:28:46 418  /****************************************************************/
10:28:46 419  
10:28:46 420  PROCEDURE RELEASE_LOCK (
10:28:46 421  	in_group_id IN NUMBER,
10:28:46 422  	in_lock_key IN VARCHAR2
10:28:46 423  ) AS
10:28:46 424  BEGIN
10:28:46 425  	PROCS_LOCKING_V24.RELEASE_LOCK(
10:28:46 426  	  in_group_id,
10:28:46 427  	  in_lock_key
10:28:46 428  	);
10:28:46 429  END RELEASE_LOCK;
10:28:46 430  
10:28:46 431  /******************************************************************************/
10:28:46 432  
10:28:46 433  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:28:46 434  	in_invoice_id  IN NUMBER,
10:28:46 435  	out_result_set OUT SYS_REFCURSOR
10:28:46 436  ) AS
10:28:46 437  BEGIN
10:28:46 438  	PROCS_INVOICE_V24.GET_INVOICE_LINE_ITEMS(
10:28:46 439  	  in_invoice_id,
10:28:46 440  	  out_result_set
10:28:46 441  	);
10:28:46 442  END GET_INVOICE_LINE_ITEMS;
10:28:46 443  
10:28:46 444  /******************************************************************************/
10:28:46 445  
10:28:46 446  PROCEDURE ADD_TAX (
10:28:46 447  	in_tax_type_id		 IN NUMBER,
10:28:46 448  	in_calculated_amount	 IN NUMBER,
10:28:46 449  	in_created_by		 IN VARCHAR2,
10:28:46 450  	in_line_item_id 	 IN NUMBER,
10:28:46 451  	in_effective_rate	 IN VARCHAR2,
10:28:46 452  	in_taxable_amount	 IN NUMBER,
10:28:46 453  	in_tax_rule_id		 IN NUMBER,
10:28:46 454  	in_jurisdiction_level_id IN NUMBER,
10:28:46 455  	in_jurisdiction_name	 IN VARCHAR2,
10:28:46 456  	in_jurisdiction_id	 IN VARCHAR2,
10:28:46 457  	in_ext_tax_type 	 IN VARCHAR2,
10:28:46 458  	in_ext_result		 IN VARCHAR2,
10:28:46 459  	in_imposition_type	 IN VARCHAR2,
10:28:46 460  	in_imposition		 IN VARCHAR2
10:28:46 461  ) AS
10:28:46 462  BEGIN
10:28:46 463  	PROCS_TAXES_V24.ADD_TAX(
10:28:46 464  	  in_tax_type_id,
10:28:46 465  	  in_calculated_amount,
10:28:46 466  	  in_created_by,
10:28:46 467  	  in_line_item_id,
10:28:46 468  	  in_effective_rate,
10:28:46 469  	  in_taxable_amount,
10:28:46 470  	  in_tax_rule_id,
10:28:46 471  	  in_jurisdiction_level_id,
10:28:46 472  	  in_jurisdiction_name,
10:28:46 473  	  in_jurisdiction_id,
10:28:46 474  	  in_ext_tax_type,
10:28:46 475  	  in_ext_result,
10:28:46 476  	  in_imposition_type,
10:28:46 477  	  in_imposition
10:28:46 478  	);
10:28:46 479  END ADD_TAX;
10:28:46 480  
10:28:46 481  /******************************************************************************/
10:28:46 482  
10:28:46 483  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:28:46 484  	in_credit_card_id IN  NUMBER,
10:28:46 485  	out_result_set	  OUT SYS_REFCURSOR
10:28:46 486  ) AS
10:28:46 487  BEGIN
10:28:46 488  	PROCS_FIN_INSTRUMENTS_V24.GET_CREDIT_CARD_BY_ID(
10:28:46 489  	  in_credit_card_id,
10:28:46 490  	  out_result_set
10:28:46 491  	);
10:28:46 492  END GET_CREDIT_CARD_BY_ID;
10:28:46 493  
10:28:46 494  /******************************************************************************/
10:28:46 495  
10:28:46 496  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
10:28:46 497  	in_line_item_id IN NUMBER,
10:28:46 498  	out_result_set	OUT SYS_REFCURSOR
10:28:46 499  ) AS
10:28:46 500  BEGIN
10:28:46 501  	PROCS_PRODUCT_V24.GET_PRD_OFFERING_BY_LINE_IT_ID(
10:28:46 502  	  in_line_item_id,
10:28:46 503  	  out_result_set
10:28:46 504  	);
10:28:46 505  END GET_PRD_OFFERING_BY_LINE_IT_ID;
10:28:46 506  
10:28:46 507  /******************************************************************************/
10:28:46 508  
10:28:46 509  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:28:46 510  	in_group_id IN NUMBER,
10:28:46 511  	out_account_id	OUT NUMBER
10:28:46 512  ) AS
10:28:46 513  BEGIN
10:28:46 514  	PROCS_ACCOUNT_V24.GET_ACCOUNT_ID_BY_GROUP_ID(
10:28:46 515  	  in_group_id,
10:28:46 516  	  out_account_id
10:28:46 517  	);
10:28:46 518  END GET_ACCOUNT_ID_BY_GROUP_ID;
10:28:46 519  
10:28:46 520  /******************************************************************************/
10:28:46 521  
10:28:46 522  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
10:28:46 523  	in_line_item_id IN  NUMBER,
10:28:46 524  	out_result_set	OUT SYS_REFCURSOR
10:28:46 525  ) AS
10:28:46 526  BEGIN
10:28:46 527  	PROCS_LINE_ITEMS_V24.GET_LINE_ITEM_DISCOUNTS(
10:28:46 528  	  in_line_item_id,
10:28:46 529  	  out_result_set
10:28:46 530  	);
10:28:46 531  END GET_LINE_ITEM_DISCOUNTS;
10:28:46 532  
10:28:46 533  /******************************************************************************/
10:28:46 534  
10:28:46 535  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
10:28:46 536  	in_line_item_id    IN NUMBER,
10:28:46 537  	in_amount	   IN NUMBER,
10:28:46 538  	in_discount_amount IN NUMBER,
10:28:46 539  	in_taxes_amount    IN NUMBER
10:28:46 540  ) AS
10:28:46 541  BEGIN
10:28:46 542  	PROCS_LINE_ITEMS_V24.UPDATE_LINE_ITEM_AMOUNT(
10:28:46 543  	  in_line_item_id,
10:28:46 544  	  in_amount,
10:28:46 545  	  in_discount_amount,
10:28:46 546  	  in_taxes_amount
10:28:46 547  	);
10:28:46 548  END UPDATE_LINE_ITEM_AMOUNT;
10:28:46 549  
10:28:46 550  /******************************************************************************/
10:28:46 551  
10:28:46 552  PROCEDURE GET_PAYPAL_BY_ID (
10:28:46 553  	in_paypal_id   IN  NUMBER,
10:28:46 554  	out_result_set OUT SYS_REFCURSOR
10:28:46 555  ) AS
10:28:46 556  BEGIN
10:28:46 557  	PROCS_FIN_INSTRUMENTS_V24.GET_PAYPAL_BY_ID(
10:28:46 558  	  in_paypal_id,
10:28:46 559  	  out_result_set
10:28:46 560  	);
10:28:46 561  END GET_PAYPAL_BY_ID;
10:28:46 562  
10:28:46 563  /******************************************************************************/
10:28:46 564  
10:28:46 565  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:28:46 566  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:28:46 567  	out_result_set OUT SYS_REFCURSOR
10:28:46 568  ) AS
10:28:46 569  BEGIN
10:28:46 570  	PROCS_FIN_INSTRUMENTS_V24.GET_GC_BY_PURCH_INVOICE_ID (
10:28:46 571  	  in_invoice_id,
10:28:46 572  	  out_result_set
10:28:46 573  	);
10:28:46 574  END GET_GC_BY_PURCH_INVOICE_ID;
10:28:46 575  
10:28:46 576  /******************************************************************************/
10:28:46 577  
10:28:46 578  PROCEDURE GET_LICENSE_BY_ID (
10:28:46 579  	in_license_id  IN NUMBER,
10:28:46 580  	out_result_set OUT SYS_REFCURSOR
10:28:46 581  ) AS
10:28:46 582  BEGIN
10:28:46 583  	PROCS_LICENSE_V24.GET_LICENSE_BY_ID (
10:28:46 584  	  in_license_id,
10:28:46 585  	  out_result_set
10:28:46 586  	);
10:28:46 587  END GET_LICENSE_BY_ID;
10:28:46 588  
10:28:46 589  /******************************************************************************/
10:28:46 590  
10:28:46 591  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:28:46 592  	in_offer_chain_id	 IN NUMBER,
10:28:46 593  	in_action_name		 IN VARCHAR2,
10:28:46 594  	out_notification_type_id OUT NUMBER
10:28:46 595  ) AS
10:28:46 596  BEGIN
10:28:46 597  	PROCS_OFFER_CHAIN_V24.GET_NOTIFICATION_TYPE_ID(
10:28:46 598  	  in_offer_chain_id,
10:28:46 599  	  in_action_name,
10:28:46 600  	  out_notification_type_id
10:28:46 601  	);
10:28:46 602  END GET_NOTIFICATION_TYPE_ID;
10:28:46 603  
10:28:46 604  /******************************************************************************/
10:28:46 605  
10:28:46 606  PROCEDURE GET_ALL_OCH_META_DATA (
10:28:46 607  	in_offer_chain_id IN NUMBER,
10:28:46 608  	out_result_set	  OUT SYS_REFCURSOR
10:28:46 609  ) AS
10:28:46 610  BEGIN
10:28:46 611  	PROCS_OFFER_CHAIN_V24.GET_ALL_META_DATA (
10:28:46 612  	  in_offer_chain_id,
10:28:46 613  	  out_result_set
10:28:46 614  	);
10:28:46 615  END GET_ALL_OCH_META_DATA;
10:28:46 616  
10:28:46 617  /******************************************************************************/
10:28:46 618  
10:28:46 619  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
10:28:46 620  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
10:28:46 621  	out_result_set	     OUT SYS_REFCURSOR
10:28:46 622  ) AS
10:28:46 623  BEGIN
10:28:46 624  	PROCS_SUBSCRIPTION_V24.GET_SUBSCRIPTIONS_META_DATA(
10:28:46 625  	  in_subscriptions_ids,
10:28:46 626  	  out_result_set
10:28:46 627  	);
10:28:46 628  END GET_SUBSCRIPTIONS_META_DATA;
10:28:46 629  
10:28:46 630  /******************************************************************************/
10:28:46 631  
10:28:46 632  PROCEDURE GET_UNREDEEMED_GCS (
10:28:46 633  	out_result_set		OUT SYS_REFCURSOR,
10:28:46 634  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:28:46 635  	in_num_rows		IN NUMBER DEFAULT 10000,
10:28:46 636  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:28:46 637  ) AS
10:28:46 638  BEGIN
10:28:46 639  	PROCS_FIN_INSTRUMENTS_V24.GET_UNREDEEMED_GCS(
10:28:46 640  	  out_result_set => out_result_set,
10:28:46 641  	  in_hours_number => in_hours_number,
10:28:46 642  	  in_num_rows => in_num_rows,
10:28:46 643  	  in_process_name => in_process_name
10:28:46 644  	);
10:28:46 645  END GET_UNREDEEMED_GCS;
10:28:46 646  
10:28:46 647  /******************************************************************************/
10:28:46 648  
10:28:46 649  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
10:28:46 650  	in_offer_chain_id IN NUMBER,
10:28:46 651  	in_meta_data_name IN VARCHAR2,
10:28:46 652  	out_value	  OUT VARCHAR2
10:28:46 653  ) AS
10:28:46 654  BEGIN
10:28:46 655  	PROCS_OFFER_CHAIN_V24.GET_OFFER_CHAIN_MD_VALUE(
10:28:46 656  	  in_offer_chain_id => in_offer_chain_id,
10:28:46 657  	  in_meta_data_name => in_meta_data_name,
10:28:46 658  	  out_value => out_value
10:28:46 659  	);
10:28:46 660  END GET_OFFER_CHAIN_MD_VALUE;
10:28:46 661  
10:28:46 662  /******************************************************************************/
10:28:46 663  
10:28:46 664  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
10:28:46 665  	out_result_set	    OUT SYS_REFCURSOR
10:28:46 666  )
10:28:46 667  AS
10:28:46 668  BEGIN
10:28:46 669  	PROCS_SUBSCRIPTION_V24.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
10:28:46 670  	  out_result_set => out_result_set
10:28:46 671  	);
10:28:46 672  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
10:28:46 673  
10:28:46 674  /******************************************************************************/
10:28:46 675  
10:28:46 676  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
10:28:46 677  	out_result_set	    OUT SYS_REFCURSOR
10:28:46 678  )
10:28:46 679  AS
10:28:46 680  BEGIN
10:28:46 681  	PROCS_SUBSCRIPTION_V24.GET_ACT_SUBS_W_PP_CHARGEBACKS(
10:28:46 682  	  out_result_set => out_result_set
10:28:46 683  	);
10:28:46 684  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
10:28:46 685  
10:28:46 686  /******************************************************************************/
10:28:46 687  
10:28:46 688  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
10:28:46 689  	in_max_days_until_close IN NUMBER,
10:28:46 690  	in_num_subs_to_fetch	IN NUMBER,
10:28:46 691  	out_result_set		OUT SYS_REFCURSOR
10:28:46 692  )
10:28:46 693  AS
10:28:46 694  BEGIN
10:28:46 695  	PROCS_SUBSCRIPTION_V24.GET_GRACE_PERIOD_SUB_REGIS(
10:28:46 696  	  in_max_days_until_close => in_max_days_until_close,
10:28:46 697  	  in_num_subs_to_fetch => in_num_subs_to_fetch,
10:28:46 698  	  out_result_set => out_result_set
10:28:46 699  	);
10:28:46 700  END GET_GRACE_PERIOD_SUB_REGIS;
10:28:46 701  
10:28:46 702  /******************************************************************************/
10:28:46 703  
10:28:46 704  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
10:28:46 705  	out_result_set	    OUT SYS_REFCURSOR
10:28:46 706  )
10:28:46 707  AS
10:28:46 708  BEGIN
10:28:46 709  	PROCS_SUBSCRIPTION_V24.GET_ACT_SUBS_W_AMEX_CB(
10:28:46 710  	  out_result_set => out_result_set
10:28:46 711  	);
10:28:46 712  END GET_ACT_SUBS_W_AMEX_CB;
10:28:46 713  
10:28:46 714  /******************************************************************************/
10:28:46 715  
10:28:46 716  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
10:28:46 717  	in_days_before_close	 IN NUMBER,
10:28:46 718  	in_num_licenses_to_fetch IN NUMBER,
10:28:46 719  	out_result_set		 OUT SYS_REFCURSOR
10:28:46 720  ) AS
10:28:46 721  BEGIN
10:28:46 722  	PROCS_LICENSE_V24.GET_GRACE_LICE_FOR_FINAL_TRANS(
10:28:46 723  	  in_days_before_close => in_days_before_close,
10:28:46 724  	  in_num_licenses_to_fetch => in_num_licenses_to_fetch,
10:28:46 725  	  out_result_set => out_result_set
10:28:46 726  	);
10:28:46 727  END GET_GRACE_LICE_FOR_FINAL_TRANS;
10:28:46 728  
10:28:46 729  /******************************************************************************/
10:28:46 730  
10:28:46 731  PROCEDURE GET_EXPIRING_PAYPAL (
10:28:46 732  	in_expire_window_days	  IN NUMBER,
10:28:46 733  	in_creation_limit_days	  IN NUMBER,
10:28:46 734  	in_retry_throttle_name	  IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
10:28:46 735  	out_result_set		  OUT SYS_REFCURSOR
10:28:46 736  ) AS
10:28:46 737  BEGIN
10:28:46 738  	PROCS_FIN_INSTRUMENTS_V24.GET_EXPIRING_PAYPAL(
10:28:46 739  	  in_expire_window_days   => in_expire_window_days,
10:28:46 740  	  in_creation_limit_days  => in_creation_limit_days,
10:28:46 741  	  in_retry_throttle_name  => in_retry_throttle_name,
10:28:46 742  	  out_result_set	  => out_result_set
10:28:46 743  	);
10:28:46 744  END GET_EXPIRING_PAYPAL;
10:28:46 745  
10:28:46 746  END PUBLIC_PROCS_RENEWAL_V24;
10:28:46 747  .
10:28:46 SQL> /

Package body created.

Elapsed: 00:00:00.06
10:28:46 SQL> 
10:28:46 SQL> prompt Compiling body for public_procs_client.sql
Compiling body for public_procs_client.sql
10:28:46 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_CLIENT_V24" AS
10:28:46   2  
10:28:46   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
10:28:46   4  /*
10:28:46   5  Throws exceptions:
10:28:46   6  CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46   7  CORE_OWNER.APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46   8  */
10:28:46   9  	in_notification_type_name IN VARCHAR2,
10:28:46  10  	out_notification_type_id  OUT NUMBER
10:28:46  11  ) AS
10:28:46  12  BEGIN
10:28:46  13  	PROCS_NOTIFICATION_V24.GET_NOTIFICATION_TYPE_BY_NAME (
10:28:46  14  	  in_notification_type_name,
10:28:46  15  	  out_notification_type_id
10:28:46  16  	);
10:28:46  17  END;
10:28:46  18  
10:28:46  19  /*****************************************************************/
10:28:46  20  
10:28:46  21  PROCEDURE ADD_NOTIFICATION (
10:28:46  22  /*
10:28:46  23  Throws exceptions:
10:28:46  24  CORE_OWNER.APP_EXCEPTION_CODES_V24.NOT_FOUND
10:28:46  25  CORE_OWNER.APP_EXCEPTION_CODES_V24.UNKNOWN_ERROR
10:28:46  26  */
10:28:46  27  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:28:46  28  	in_recipient_group_id	 IN NUMBER,
10:28:46  29  	in_notification_type_id  IN NUMBER,
10:28:46  30  	in_date_to_notify	 IN DATE,
10:28:46  31  	in_email_template_params IN CLOB
10:28:46  32  ) AS
10:28:46  33  BEGIN
10:28:46  34  	PROCS_NOTIFICATION_V24.ADD_NOTIFICATION (
10:28:46  35  	  in_sender_account_id,
10:28:46  36  	  in_recipient_group_id,
10:28:46  37  	  in_notification_type_id,
10:28:46  38  	  in_date_to_notify,
10:28:46  39  	  in_email_template_params
10:28:46  40  	);
10:28:46  41  END;
10:28:46  42  
10:28:46  43  END PUBLIC_PROCS_CLIENT_V24;
10:28:46  44  .
10:28:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:46 SQL> 
10:28:46 SQL> prompt Compiling body for procs_ar_bal_applies.sql
Compiling body for procs_ar_bal_applies.sql
10:28:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AR_BAL_APPLIES_V24" AS
10:28:46   2  
10:28:46   3  
10:28:46   4  PROCEDURE APPLY_BALANCE (
10:28:46   5  	in_invoice_id  IN AR_BALANCE_APPLIES.INVOICE_ID%TYPE,
10:28:46   6  	in_charge_id IN AR_BALANCE_APPLIES.CHARGE_ID%TYPE,
10:28:46   7  	in_amount IN AR_BALANCE_APPLIES.AMOUNT%TYPE,
10:28:46   8  	in_created_by	    IN AR_BALANCE_APPLIES.CREATED_BY%TYPE
10:28:46   9  ) AS
10:28:46  10  SPROC_NAME      CONSTANT VARCHAR2(25) := 'APPLY_BALANCE';
10:28:46  11  BEGIN
10:28:46  12  
10:28:46  13  	  INSERT INTO  AR_BALANCE_APPLIES(
10:28:46  14  	      INVOICE_ID,
10:28:46  15  	      CHARGE_ID,
10:28:46  16  	      AMOUNT,
10:28:46  17  	      CREATED_BY,
10:28:46  18  	      CREATE_DATE
10:28:46  19  	  ) VALUES (
10:28:46  20  	      in_invoice_id,
10:28:46  21  	      in_charge_id,
10:28:46  22  	      in_amount,
10:28:46  23  	      in_created_by,
10:28:46  24  	      sysdate
10:28:46  25  	  );
10:28:46  26  
10:28:46  27  
10:28:46  28  END APPLY_BALANCE;
10:28:46  29  
10:28:46  30  
10:28:46  31  END PROCS_AR_BAL_APPLIES_V24;
10:28:46  32  .
10:28:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ADX_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_TEST_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V24 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V24 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V24 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V24 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V24 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V24 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V24 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.02
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V24 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V24 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V24 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V24 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V24 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V24 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V24 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V24 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V24 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V24 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V24 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V24 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V24 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V24 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V24 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V24 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V24 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V24 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V24 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V24 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> grant select, insert, update, delete ON CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant select ON CORE_OWNER.NOTTID_SEQ to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> Grant Execute On Core_Owner.App_Exception_Codes_V24 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> 
10:28:46 SQL> Grant Execute On Core_Owner.GLOBAL_ENUMS_V24 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> Grant Execute On Core_Owner.Global_Statuses_V24 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> GRANT EXECUTE ON CORE_OWNER.PROCS_AR_BAL_APPLIES_V24 TO core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> GRANT EXECUTE ON CORE_OWNER.PROCS_AR_BAL_APPLIES_V24 TO core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:28:46 SQL> grant execute on core_owner.procs_entitlement_V24 to lire_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> grant execute on core_owner.procs_adx_V24 to lire_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:28:46 SQL> 
10:28:46 SQL> COMMENT ON TABLE SYS_VERSION IS 'Bulk SQL generated by ruben.cepeda@nytimes.com on Wed Aug 14 16:09:29 EDT 2013';

Comment created.

Elapsed: 00:00:00.01
10:28:46 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
10:28:46 SQL> spool off;
