15:35:41 SQL> @/dbbackups/ECPR/migrations/core_owner/20.5-release-1.11.1-all/upgrade.sql
15:35:41 SQL> 
15:35:41 SQL> .
15:35:41 SQL> /
SP2-0103: Nothing in SQL buffer to run.
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_ACCOUNT
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE ANNOTATE_ACCOUNT (
15:35:41   4  /*
15:35:41   5  Throws exceptions:
15:35:41   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41   8  */
15:35:41   9  	in_group_id   IN  NUMBER,
15:35:41  10  	in_agent_id   IN  NUMBER,
15:35:41  11  	in_note       IN  VARCHAR2,
15:35:41  12  	in_created_by IN  VARCHAR2
15:35:41  13  );
15:35:41  14  
15:35:41  15  PROCEDURE ASSERT_ACCOUNT_EXISTS (
15:35:41  16  /*
15:35:41  17  Throws exceptions:
15:35:41  18  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  19  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  20  */
15:35:41  21  	in_group_id IN	NUMBER,
15:35:41  22  	out_exists  OUT NUMBER
15:35:41  23  );
15:35:41  24  
15:35:41  25  PROCEDURE DISABLE_ACCOUNT (
15:35:41  26  /*
15:35:41  27  Throws exceptions:
15:35:41  28  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:41  29  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:41  30  */
15:35:41  31  	in_group_id   IN NUMBER,
15:35:41  32  	in_updated_by IN VARCHAR2,
15:35:41  33  	in_note       IN VARCHAR2,
15:35:41  34  	in_agent_id   IN NUMBER
15:35:41  35  );
15:35:41  36  
15:35:41  37  PROCEDURE CREATE_ACTIVE_ACCOUNT(
15:35:41  38  /*
15:35:41  39  Throws exceptions:
15:35:41  40  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:41  41  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  42  */
15:35:41  43  	in_created_by	       IN VARCHAR2,
15:35:41  44  	in_group_id	       IN NUMBER
15:35:41  45  );
15:35:41  46  
15:35:41  47  PROCEDURE REACTIVATE_ACCOUNT (
15:35:41  48  /*
15:35:41  49  Throws exceptions:
15:35:41  50  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:41  51  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:41  52  */
15:35:41  53  	in_group_id	  IN NUMBER,
15:35:41  54  	in_updated_by	  IN VARCHAR2,
15:35:41  55  	in_note 	  IN VARCHAR2,
15:35:41  56  	in_agent_id	  IN NUMBER
15:35:41  57  );
15:35:41  58  
15:35:41  59  /*
15:35:41  60  
15:35:41  61  THERE ARE NO ACCOUNT STATUS "SUSPENDED"
15:35:41  62  Waiting for new instructions.
15:35:41  63  
15:35:41  64  PROCEDURE SUSPEND_ACCOUNT (
15:35:41  65  /*
15:35:41  66  Throws exceptions:
15:35:41  67  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:41  68  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:41  69  
15:35:41  70  	  in_group_id	 IN  NUMBER,
15:35:41  71  	  in_updated_by  IN  VARCHAR2
15:35:41  72  )
15:35:41  73  */
15:35:41  74  
15:35:41  75  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
15:35:41  76  /*
15:35:41  77  IN:
15:35:41  78  instr_status:
15:35:41  79  1 - get active instruments only (default)
15:35:41  80  0 - get inactive instruments only
15:35:41  81  
15:35:41  82  Throws exceptions:
15:35:41  83  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41  84  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  85  */
15:35:41  86  	in_group_id	  IN NUMBER,
15:35:41  87  	out_result_cc_set OUT SYS_REFCURSOR,
15:35:41  88  	out_default_id	  OUT NUMBER,
15:35:41  89  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V17.CREDIT_CARD_ACTIVE
15:35:41  90  );
15:35:41  91  
15:35:41  92  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
15:35:41  93  /*
15:35:41  94  IN:
15:35:41  95  instr_status:
15:35:41  96  GLOBAL_CONSTANTS_V17.TRUE - get active instruments only (default)
15:35:41  97  GLOBAL_CONSTANTS_V17.FALSE - get inactive instruments only
15:35:41  98  
15:35:41  99  Throws exceptions:
15:35:41 100  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 101  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 102  */
15:35:41 103  	in_group_id	  IN NUMBER,
15:35:41 104  	out_result_gc_set OUT SYS_REFCURSOR,
15:35:41 105  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.TRUE
15:35:41 106  );
15:35:41 107  
15:35:41 108  PROCEDURE GET_ACCOUNT_INFO  (
15:35:41 109  /*
15:35:41 110  Throws exceptions:
15:35:41 111  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 112  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 113  */
15:35:41 114  	  in_group_id	    IN	NUMBER,
15:35:41 115  	  out_account_info  OUT SYS_REFCURSOR
15:35:41 116  );
15:35:41 117  
15:35:41 118  PROCEDURE GET_ACCOUNT_NOTES (
15:35:41 119  /*
15:35:41 120  Throws exceptions:
15:35:41 121  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 122  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41 123  */
15:35:41 124  	  in_group_id	 IN  NUMBER,
15:35:41 125  	  out_result_set OUT SYS_REFCURSOR
15:35:41 126  );
15:35:41 127  
15:35:41 128  PROCEDURE GET_ACCOUNT_PAYPALS(
15:35:41 129  /*
15:35:41 130  IN:
15:35:41 131  instr_status:
15:35:41 132  1 - get active instruments only (default)
15:35:41 133  0 - get inactive instruments only
15:35:41 134  
15:35:41 135  Throws exceptions:
15:35:41 136  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 137  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 138  */
15:35:41 139  	in_group_id	  IN NUMBER,
15:35:41 140  	out_result_pp_set OUT SYS_REFCURSOR,
15:35:41 141  	out_default_id	  OUT NUMBER,
15:35:41 142  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V17.PAYPAL_ACTIVE
15:35:41 143  );
15:35:41 144  
15:35:41 145  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
15:35:41 146  /*
15:35:41 147  Throws exceptions:
15:35:41 148  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 149  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:41 150  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 151  */
15:35:41 152  	  in_group_id	 IN  NUMBER,
15:35:41 153  	  in_start_date  IN DATE,
15:35:41 154  	  in_end_date	 IN DATE,
15:35:41 155  	  in_status	 IN NUMBER,
15:35:41 156  	  in_group_account_type IN VARCHAR2,
15:35:41 157  	  out_result_set  OUT SYS_REFCURSOR
15:35:41 158  );
15:35:41 159  
15:35:41 160  PROCEDURE FREEZE_ACCOUNT (
15:35:41 161  /*
15:35:41 162  Throws exceptions:
15:35:41 163  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 164  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 165  */
15:35:41 166  	in_group_id   IN NUMBER,
15:35:41 167  	in_updated_by IN VARCHAR2,
15:35:41 168  	in_note       IN VARCHAR2,
15:35:41 169  	in_agent_id   IN NUMBER
15:35:41 170  );
15:35:41 171  
15:35:41 172  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
15:35:41 173  /*
15:35:41 174  Throws exceptions:
15:35:41 175  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 176  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 177  */
15:35:41 178  	in_group_id	   IN  NUMBER,
15:35:41 179  	in_subscription_id IN NUMBER,
15:35:41 180  	out_result_set	   OUT SYS_REFCURSOR
15:35:41 181  );
15:35:41 182  
15:35:41 183  PROCEDURE GET_ACCOUNT_GC_INVOICES (
15:35:41 184  /*
15:35:41 185  Throws exceptions:
15:35:41 186  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 187  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 188  */
15:35:41 189  	in_group_id    IN  NUMBER,
15:35:41 190  	out_result_set OUT SYS_REFCURSOR
15:35:41 191  );
15:35:41 192  
15:35:41 193  PROCEDURE GET_GC_INVOICE (
15:35:41 194  /*
15:35:41 195  Throws exceptions:
15:35:41 196  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 197  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 198  */
15:35:41 199  	in_group_id    IN  NUMBER,
15:35:41 200  	in_gc_code     IN  VARCHAR2,
15:35:41 201  	out_result_set OUT SYS_REFCURSOR
15:35:41 202  );
15:35:41 203  
15:35:41 204  PROCEDURE GET_ACCOUNT_PRODUCTS (
15:35:41 205  /*
15:35:41 206  Throws exceptions:
15:35:41 207  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 208  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 209  */
15:35:41 210  	in_group_id    IN  NUMBER,
15:35:41 211  	out_result_set OUT SYS_REFCURSOR
15:35:41 212  );
15:35:41 213  
15:35:41 214  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
15:35:41 215  /*
15:35:41 216  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41 217  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 218  */
15:35:41 219  	in_group_id IN NUMBER,
15:35:41 220  	out_result_set	   OUT SYS_REFCURSOR
15:35:41 221  );
15:35:41 222  
15:35:41 223  PROCEDURE UPDATE_ACCOUNT_STATUS (
15:35:41 224  /*
15:35:41 225  Throws exceptions:
15:35:41 226  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 227  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 228  */
15:35:41 229  	in_account_id	     IN ACCOUNT.ID%TYPE,
15:35:41 230  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
15:35:41 231  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
15:35:41 232  );
15:35:41 233  
15:35:41 234  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
15:35:41 235  /*
15:35:41 236  Throws exceptions:
15:35:41 237  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 238  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 239  */
15:35:41 240  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
15:35:41 241  	out_licenses_num OUT NUMBER
15:35:41 242  );
15:35:41 243  
15:35:41 244  PROCEDURE SET_TAX_EXEMPT (
15:35:41 245  /*
15:35:41 246  Throws exceptions:
15:35:41 247  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 248  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 249  */
15:35:41 250  	in_group_id  IN NUMBER,
15:35:41 251  	in_exempt_id IN VARCHAR2
15:35:41 252  );
15:35:41 253  
15:35:41 254  PROCEDURE IS_TAX_EXEMPT (
15:35:41 255  /*
15:35:41 256  Throws exceptions:
15:35:41 257  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 258  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 259  Return:
15:35:41 260  	GLOBAL_CONSTANTS_V17.TRUE if ACCOUNT.EXEMPT_ID is not null
15:35:41 261  	GLOBAL_CONSTANTS_V17.FALSE else
15:35:41 262  */
15:35:41 263  	in_group_id	  IN NUMBER,
15:35:41 264  	out_is_tax_exempt OUT NUMBER
15:35:41 265  );
15:35:41 266  
15:35:41 267  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
15:35:41 268  /*
15:35:41 269  Throws exceptions:
15:35:41 270  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 271  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 272  */
15:35:41 273  	in_account_id IN NUMBER,
15:35:41 274  	out_group_id  OUT NUMBER
15:35:41 275  );
15:35:41 276  
15:35:41 277  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:35:41 278  /*
15:35:41 279  Throws exceptions:
15:35:41 280  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 281  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 282  */
15:35:41 283  	in_group_id IN NUMBER,
15:35:41 284  	out_account_id	OUT NUMBER
15:35:41 285  );
15:35:41 286  
15:35:41 287  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
15:35:41 288  /*
15:35:41 289  Throws exceptions:
15:35:41 290  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 291  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 292  */
15:35:41 293  	in_invoice_id IN NUMBER,
15:35:41 294  	out_group_ids OUT SYS_REFCURSOR
15:35:41 295  );
15:35:41 296  
15:35:41 297  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
15:35:41 298  /*
15:35:41 299  Throws exceptions:
15:35:41 300  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 301  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 302  */
15:35:41 303  	in_group_id	  IN NUMBER,
15:35:41 304  	out_tax_exempt_id OUT VARCHAR2
15:35:41 305  );
15:35:41 306  
15:35:41 307  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
15:35:41 308  /*
15:35:41 309  Throws exceptions:
15:35:41 310  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 311  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 312  
15:35:41 313  Result has two columns:
15:35:41 314  subscription_id and offer_chain_id
15:35:41 315  */
15:35:41 316  	in_group_id    IN NUMBER,
15:35:41 317  	out_result_set OUT SYS_REFCURSOR
15:35:41 318  );
15:35:41 319  
15:35:41 320  PROCEDURE GET_USR_ALL_SBSCR_IDS (
15:35:41 321  /*
15:35:41 322  Throws exceptions:
15:35:41 323  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 324  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 325  
15:35:41 326  Result has two columns:
15:35:41 327  subscription_id and offer_chain_id
15:35:41 328  */
15:35:41 329  	in_group_id	   IN NUMBER,
15:35:41 330  	out_result_set	   OUT SYS_REFCURSOR
15:35:41 331  );
15:35:41 332  
15:35:41 333  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
15:35:41 334  /*
15:35:41 335  Throws exceptions:
15:35:41 336  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41 337  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:41 338  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:41 339  
15:35:41 340  Result has two columns:
15:35:41 341  subscription_id and offer_chain_id
15:35:41 342  */
15:35:41 343  	in_group_id	   IN NUMBER,
15:35:41 344  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:35:41 345  	out_result_set	   OUT SYS_REFCURSOR
15:35:41 346  );
15:35:41 347  
15:35:41 348  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
15:35:41 349  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:35:41 350  	in_expiration_date IN DATE,
15:35:41 351  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
15:35:41 352  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:41 353  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
15:35:41 354  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
15:35:41 355  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
15:35:41 356  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
15:35:41 357  	in_lower_bound IN NUMBER DEFAULT 1,
15:35:41 358  	in_upper_bound IN NUMBER DEFAULT 11,
15:35:41 359  	out_result_set OUT SYS_REFCURSOR
15:35:41 360  );
15:35:41 361  
15:35:41 362  END PROCS_ACCOUNT_V17;
15:35:41 363  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.09
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_ACCOUNT_CRU
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_ACCOUNT (
15:35:41   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
15:35:41   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
15:35:41   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
15:35:41   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
15:35:41   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
15:35:41   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
15:35:41  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:35:41  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
15:35:41  12  );
15:35:41  13  
15:35:41  14  PROCEDURE UPDATE_ACCOUNT (
15:35:41  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
15:35:41  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
15:35:41  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
15:35:41  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
15:35:41  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
15:35:41  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:35:41  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
15:35:41  22  );
15:35:41  23  
15:35:41  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
15:35:41  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
15:35:41  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
15:35:41  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
15:35:41  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
15:35:41  29  );
15:35:41  30  
15:35:41  31  PROCEDURE READ_ACCOUNT (
15:35:41  32  	in_account_id  IN ACCOUNT.ID%TYPE,
15:35:41  33  	out_result_set OUT SYS_REFCURSOR
15:35:41  34  );
15:35:41  35  
15:35:41  36  PROCEDURE CREATE_ACCOUNT_NOTE (
15:35:41  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
15:35:41  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
15:35:41  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
15:35:41  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
15:35:41  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
15:35:41  42  );
15:35:41  43  
15:35:41  44  END PROCS_ACCOUNT_CRU_V17;
15:35:41  45  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_ADDRESS(
15:35:41   4  /*
15:35:41   5  Throws exceptions:
15:35:41   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41   7  */
15:35:41   8  	  out_address_id	OUT NUMBER,
15:35:41   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:35:41  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:35:41  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:35:41  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:35:41  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:41  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:35:41  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
15:35:41  16  );
15:35:41  17  
15:35:41  18  PROCEDURE UPDATE_ADDRESS(
15:35:41  19  /*
15:35:41  20  Throws exceptions:
15:35:41  21  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  22  */
15:35:41  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
15:35:41  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:35:41  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:35:41  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:35:41  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:35:41  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:41  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:35:41  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
15:35:41  31  );
15:35:41  32  
15:35:41  33  PROCEDURE GET_ADDRESS (
15:35:41  34  /*
15:35:41  35  Throws exceptions:
15:35:41  36  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  37  */
15:35:41  38  	  in_id 		IN ADDRESS.ID%TYPE,
15:35:41  39  	  out_result_set	OUT SYS_REFCURSOR
15:35:41  40  );
15:35:41  41  
15:35:41  42  END PROCS_ADDRESS_V17;
15:35:41  43  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_ADDRESS_CRU
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_ADDRESS(
15:35:41   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
15:35:41   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
15:35:41   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:35:41   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:35:41   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:35:41   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:35:41  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:41  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:35:41  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
15:35:41  13  );
15:35:41  14  
15:35:41  15  PROCEDURE UPDATE_ADDRESS(
15:35:41  16  	in_address_id	      IN ADDRESS.ID%TYPE,
15:35:41  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:35:41  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:35:41  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:35:41  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:35:41  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:41  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:35:41  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
15:35:41  24  );
15:35:41  25  
15:35:41  26  END PROCS_ADDRESS_CRU_V17;
15:35:41  27  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_ADJUSTMENTS
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
15:35:41   4  	in_invoice_id		  IN NUMBER,
15:35:41   5  	in_adjustment_reason	  IN VARCHAR2,
15:35:41   6  	in_is_credit		  IN NUMBER,
15:35:41   7  	in_charge_id		  IN NUMBER,
15:35:41   8  	in_business_date	  IN DATE,
15:35:41   9  	in_created_by		  IN VARCHAR2,
15:35:41  10  	out_invoice_adjustment_id OUT NUMBER
15:35:41  11  );
15:35:41  12  
15:35:41  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
15:35:41  14  	in_invoice_id		  IN NUMBER,
15:35:41  15  	in_original_charge_id	  IN NUMBER,
15:35:41  16  	in_charge_id		  IN NUMBER,
15:35:41  17  	in_updated_by		  IN VARCHAR2
15:35:41  18  );
15:35:41  19  
15:35:41  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
15:35:41  21  	in_line_item_id 	    IN NUMBER,
15:35:41  22  	in_invoice_adjustment_id    IN NUMBER,
15:35:41  23  	in_amount		    IN NUMBER,
15:35:41  24  	in_tax			    IN NUMBER,
15:35:41  25  	in_discount		    IN NUMBER,
15:35:41  26  	in_created_by		    IN VARCHAR2,
15:35:41  27  	out_line_item_adjustment_id OUT NUMBER
15:35:41  28  );
15:35:41  29  
15:35:41  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
15:35:41  31  	in_tax_id		   IN NUMBER,
15:35:41  32  	in_line_item_adjustment_id IN NUMBER,
15:35:41  33  	in_amount		   IN NUMBER,
15:35:41  34  	in_created_by		   IN VARCHAR2,
15:35:41  35  	out_tax_adjustment_id	   OUT NUMBER
15:35:41  36  );
15:35:41  37  
15:35:41  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
15:35:41  39  	in_discount_id		   NUMBER,
15:35:41  40  	in_line_item_id 	   NUMBER,
15:35:41  41  	in_line_item_adjustment_id IN NUMBER,
15:35:41  42  	in_amount		   IN NUMBER,
15:35:41  43  	in_created_by		   IN VARCHAR2,
15:35:41  44  	out_discount_li_id	   OUT NUMBER
15:35:41  45  );
15:35:41  46  
15:35:41  47  END PROCS_ADJUSTMENTS_V17;
15:35:41  48  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE GET_SUB_ADX_INFO (
15:35:41   4  /*
15:35:41   5  Throws exceptions:
15:35:41   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41   7  */
15:35:41   8  	out_result_set	    OUT SYS_REFCURSOR,
15:35:41   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
15:35:41  10  );
15:35:41  11  
15:35:41  12  END PROCS_ADX_V17;
15:35:41  13  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_AMAZON_SUB(
15:35:41   4  /*
15:35:41   5  Throws exceptions:
15:35:41   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41   7  */
15:35:41   8  	  out_id	      OUT NUMBER,
15:35:41   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
15:35:41  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
15:35:41  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
15:35:41  12  );
15:35:41  13  
15:35:41  14  PROCEDURE GET_ACTIVE_SUB_IDS (
15:35:41  15  /*
15:35:41  16  Throws exceptions:
15:35:41  17  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  18  */
15:35:41  19  	out_result_set	    OUT SYS_REFCURSOR,
15:35:41  20  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
15:35:41  21  );
15:35:41  22  
15:35:41  23  PROCEDURE GET_ACTIVE_GROUP_IDS (
15:35:41  24  /*
15:35:41  25  Throws exceptions:
15:35:41  26  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  27  */
15:35:41  28  	out_result_set	    OUT SYS_REFCURSOR,
15:35:41  29  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
15:35:41  30  );
15:35:41  31  
15:35:41  32  END PROCS_AMAZON_V17;
15:35:41  33  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.05
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_AMAZON_SUB(
15:35:41   4  /*
15:35:41   5  Throws exceptions:
15:35:41   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41   7  */
15:35:41   8  	  out_id	      OUT NUMBER,
15:35:41   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
15:35:41  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
15:35:41  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
15:35:41  12  );
15:35:41  13  
15:35:41  14  END PROCS_AMAZON_CRU_V17;
15:35:41  15  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.01
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_CHARGE
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_CHARGE(
15:35:41   4  /*
15:35:41   5  Throws exceptions:
15:35:41   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41   8  */
15:35:41   9  	in_invoice_id	      IN NUMBER,
15:35:41  10  	in_transaction_id     IN NUMBER,
15:35:41  11  	in_instrument_type_id IN NUMBER,
15:35:41  12  	in_instrument_id      IN NUMBER,
15:35:41  13  	in_charge_amount      IN NUMBER,
15:35:41  14  	in_created_by	      IN VARCHAR2,
15:35:41  15  	in_charge_status_id   IN NUMBER,
15:35:41  16  	out_charge_id	      OUT NUMBER
15:35:41  17  );
15:35:41  18  
15:35:41  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
15:35:41  20  /*
15:35:41  21  Throws exceptions:
15:35:41  22  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  23  */
15:35:41  24  	out_result_set	    OUT SYS_REFCURSOR,
15:35:41  25  	in_row_number	    IN NUMBER DEFAULT NULL
15:35:41  26  );
15:35:41  27  
15:35:41  28  PROCEDURE GET_UNPROCESSED_CHARGES (
15:35:41  29  /*
15:35:41  30  Throws exceptions:
15:35:41  31  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  32  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  33  */
15:35:41  34  	in_invoice_id  IN NUMBER,
15:35:41  35  	out_result_set OUT SYS_REFCURSOR
15:35:41  36  );
15:35:41  37  
15:35:41  38  PROCEDURE GET_PROCESSED_CHARGES (
15:35:41  39  /*
15:35:41  40  Throws exceptions:
15:35:41  41  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  42  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  43  */
15:35:41  44  	in_invoice_id  IN NUMBER,
15:35:41  45  	out_result_set OUT SYS_REFCURSOR
15:35:41  46  );
15:35:41  47  
15:35:41  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
15:35:41  49  /*
15:35:41  50  Throws exceptions:
15:35:41  51  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  52  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  53  */
15:35:41  54  	in_charge_id	    IN NUMBER,
15:35:41  55  	out_subscription_id OUT NUMBER
15:35:41  56  );
15:35:41  57  
15:35:41  58  PROCEDURE UPDATE_CHARGE_STATUS (
15:35:41  59  /*
15:35:41  60  Throws exceptions:
15:35:41  61  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  62  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  63  */
15:35:41  64  	in_charge_id	    IN CHARGE.ID%TYPE,
15:35:41  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:35:41  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
15:35:41  67  );
15:35:41  68  
15:35:41  69  FUNCTION IS_CHARGE_COLLECTED (
15:35:41  70  /*
15:35:41  71  Throws:
15:35:41  72  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  73  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  74  Returns:
15:35:41  75  GLOBAL_CONST.TRUE if transaction collected,
15:35:41  76  GLOBAL_CONST.FALSE else
15:35:41  77  */
15:35:41  78  	in_charge_id IN NUMBER
15:35:41  79  ) RETURN NUMBER;
15:35:41  80  
15:35:41  81  PROCEDURE GET_COLLECTED_CHARGES (
15:35:41  82  /*
15:35:41  83  Throws exceptions:
15:35:41  84  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  85  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  86  */
15:35:41  87  	in_invoice_id  IN NUMBER,
15:35:41  88  	out_result_set OUT SYS_REFCURSOR
15:35:41  89  );
15:35:41  90  
15:35:41  91  END PROCS_CHARGE_V17;
15:35:41  92  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_CHARGE_CRU
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_CHARGE(
15:35:41   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
15:35:41   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
15:35:41   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
15:35:41   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
15:35:41   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
15:35:41   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
15:35:41  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
15:35:41  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:35:41  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
15:35:41  13  );
15:35:41  14  
15:35:41  15  PROCEDURE UPDATE_CHARGE(
15:35:41  16  	in_charge_id	      IN CHARGE.ID%TYPE,
15:35:41  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:35:41  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
15:35:41  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
15:35:41  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
15:35:41  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
15:35:41  22  );
15:35:41  23  
15:35:41  24  END PROCS_CHARGE_CRU_V17;
15:35:41  25  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
15:35:41   2  
15:35:41   3  	PROCEDURE POPULATE_REQUEST_INFO(
15:35:41   4  	  in_hours_prior    IN	NUMBER,
15:35:41   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
15:35:41   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
15:35:41   7  	);
15:35:41   8  
15:35:41   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
15:35:41  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:35:41  11  	  in_start	     IN NUMBER,
15:35:41  12  	  in_end	     IN NUMBER,
15:35:41  13  	  out_result_set     OUT SYS_REFCURSOR
15:35:41  14  	);
15:35:41  15  
15:35:41  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
15:35:41  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
15:35:41  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
15:35:41  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
15:35:41  20  	);
15:35:41  21  
15:35:41  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
15:35:41  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:35:41  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:35:41  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
15:35:41  26  	);
15:35:41  27  
15:35:41  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
15:35:41  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
15:35:41  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
15:35:41  31  	  out_request_files   OUT SYS_REFCURSOR
15:35:41  32  	);
15:35:41  33  
15:35:41  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
15:35:41  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:35:41  36  	  out_count OUT NUMBER
15:35:41  37  	);
15:35:41  38  
15:35:41  39  	PROCEDURE GET_CREDIT_CARD_LICENSE (
15:35:41  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
15:35:41  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
15:35:41  42  	  out_card_license     OUT SYS_REFCURSOR
15:35:41  43  	);
15:35:41  44  
15:35:41  45  	PROCEDURE UPDATE_CC_UPDATE(
15:35:41  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
15:35:41  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:35:41  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
15:35:41  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
15:35:41  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
15:35:41  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:35:41  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
15:35:41  53  	);
15:35:41  54  
15:35:41  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
15:35:41  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
15:35:41  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:35:41  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
15:35:41  59  	);
15:35:41  60  
15:35:41  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
15:35:41  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
15:35:41  63  	  out_request_file     OUT SYS_REFCURSOR
15:35:41  64  	);
15:35:41  65  
15:35:41  66  	PROCEDURE SUSPEND_CREDIT_CARD (
15:35:41  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
15:35:41  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
15:35:41  69  	);
15:35:41  70  
15:35:41  71  	PROCEDURE UPDATE_CREDIT_CARD (
15:35:41  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
15:35:41  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:35:41  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
15:35:41  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
15:35:41  76  	);
15:35:41  77  
15:35:41  78  	PROCEDURE COMPLETABLE_REQUESTS (
15:35:41  79  	  out_request_files OUT SYS_REFCURSOR
15:35:41  80  	);
15:35:41  81  
15:35:41  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
15:35:41  83  	  in_max_hours_before_report IN  NUMBER,
15:35:41  84  	  out_request_files	     OUT SYS_REFCURSOR
15:35:41  85  	);
15:35:41  86  
15:35:41  87  END PROCS_CUPY;
15:35:41  88  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.08
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE
15:35:41   2  PACKAGE PROCS_ENTITLEMENT_V17 AS
15:35:41   3  
15:35:41   4  PROCEDURE GET_ALL_ENTITLEMENTS(
15:35:41   5  	in_group_id IN NUMBER,
15:35:41   6  	out_result_set OUT SYS_REFCURSOR);
15:35:41   7  
15:35:41   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
15:35:41   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:41  10  	out_result_set OUT SYS_REFCURSOR);
15:35:41  11  
15:35:41  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
15:35:41  13  	in_subscription_id IN NUMBER,
15:35:41  14  	out_uri OUT VARCHAR2);
15:35:41  15  
15:35:41  16  END PROCS_ENTITLEMENT_V17;
15:35:41  17  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.03
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
15:35:41   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:41   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
15:35:41   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
15:35:41   7  );
15:35:41   8  
15:35:41   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
15:35:41  10  	in_invoice_id		     IN NUMBER,
15:35:41  11  	out_is_invoice_for_redeem_gc OUT NUMBER
15:35:41  12  );
15:35:41  13  
15:35:41  14  PROCEDURE GET_UNREDEEMED_GCS (
15:35:41  15  	out_result_set		OUT SYS_REFCURSOR,
15:35:41  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:35:41  17  	in_num_rows		IN NUMBER DEFAULT 10000,
15:35:41  18  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:41  19  );
15:35:41  20  
15:35:41  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
15:35:41  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:41  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
15:35:41  24  );
15:35:41  25  
15:35:41  26  PROCEDURE ADD_CREDIT_CARD (
15:35:41  27  /*
15:35:41  28  Throws exceptions:
15:35:41  29  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  30  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  31  */
15:35:41  32  	in_group_id		  IN NUMBER,
15:35:41  33  	in_updated_by		  IN VARCHAR2,
15:35:41  34  	in_instrument_name	  IN VARCHAR2,
15:35:41  35  	in_card_holder_name	  IN VARCHAR2,
15:35:41  36  	in_street_address	  IN VARCHAR2,
15:35:41  37  	in_street_address2	  IN VARCHAR2,
15:35:41  38  	in_state		  IN VARCHAR2,
15:35:41  39  	in_city 		  IN VARCHAR2,
15:35:41  40  	in_postal_code		  IN VARCHAR2,
15:35:41  41  	in_country		  IN CHAR,
15:35:41  42  	in_last_four_cc 	  IN VARCHAR2,
15:35:41  43  	in_expiration_date	  IN DATE,
15:35:41  44  	in_credit_card_type_id	  IN NUMBER,
15:35:41  45  	in_token		  IN VARCHAR2,
15:35:41  46  	in_chase_profile_id	  IN VARCHAR2,
15:35:41  47  	in_credit_card_status_id  IN NUMBER,
15:35:41  48  	in_private_first_name	  IN VARCHAR2,
15:35:41  49  	in_private_last_name	  IN VARCHAR2,
15:35:41  50  	out_credit_card_id	  OUT NUMBER
15:35:41  51  );
15:35:41  52  
15:35:41  53  /******************************************************************************/
15:35:41  54  
15:35:41  55  PROCEDURE ADD_PAYPAL (
15:35:41  56  /*
15:35:41  57  Throws exceptions:
15:35:41  58  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41  59  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  60  */
15:35:41  61  	in_group_id			IN NUMBER,
15:35:41  62  	in_instrument_name		IN VARCHAR2,
15:35:41  63  	in_private_email_address	IN VARCHAR2,
15:35:41  64  	in_created_by			IN VARCHAR2,
15:35:41  65  	in_paypal_status_id		IN NUMBER,
15:35:41  66  	in_paypal_prvt_street_address	IN VARCHAR2,
15:35:41  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
15:35:41  68  	in_state			IN VARCHAR2,
15:35:41  69  	in_city 			IN VARCHAR2,
15:35:41  70  	in_postal_code			IN VARCHAR2,
15:35:41  71  	in_country			IN CHAR,
15:35:41  72  	in_expiration_date		IN DATE,
15:35:41  73  	in_secret_token 		IN VARCHAR2,
15:35:41  74  	out_paypal_id			OUT NUMBER
15:35:41  75  );
15:35:41  76  
15:35:41  77  /********************************************/
15:35:41  78  
15:35:41  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
15:35:41  80  /*
15:35:41  81  Throws exceptions:
15:35:41  82  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41  83  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  84  */
15:35:41  85  	in_code       IN VARCHAR,
15:35:41  86  	out_result_set OUT SYS_REFCURSOR
15:35:41  87  );
15:35:41  88  
15:35:41  89  /********************************************/
15:35:41  90  
15:35:41  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
15:35:41  92  /*
15:35:41  93  Throws exceptions:
15:35:41  94  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:41  95  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41  96  */
15:35:41  97  	in_gift_certificate_id IN NUMBER,
15:35:41  98  	out_result_set	       OUT SYS_REFCURSOR
15:35:41  99  );
15:35:41 100  
15:35:41 101  /********************************************/
15:35:41 102  
15:35:41 103  PROCEDURE DISABLE_CREDIT_CARD (
15:35:41 104  /*
15:35:41 105  Throws exceptions:
15:35:41 106  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41 107  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 108  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:41 109  */
15:35:41 110  	in_credit_card_id IN NUMBER,
15:35:41 111  	in_updated_by	  IN VARCHAR2
15:35:41 112  );
15:35:41 113  
15:35:41 114  /********************************************/
15:35:41 115  
15:35:41 116  PROCEDURE DISABLE_PAYPAL (
15:35:41 117  /*
15:35:41 118  Throws exceptions:
15:35:41 119  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41 120  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 121  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:41 122  */
15:35:41 123  	in_paypal_id  IN NUMBER,
15:35:41 124  	in_updated_by IN VARCHAR2
15:35:41 125  );
15:35:41 126  
15:35:41 127  /********************************************/
15:35:41 128  
15:35:41 129  PROCEDURE UPDATE_CREDIT_CARD (
15:35:41 130  /*
15:35:41 131  Throws exceptions:
15:35:41 132  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:41 133  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:41 134  */
15:35:41 135  	in_credit_card_id	  IN NUMBER,
15:35:41 136  	in_updated_by		  IN VARCHAR2,
15:35:41 137  	in_instrument_name	  IN VARCHAR2,
15:35:41 138  	in_is_default		  IN NUMBER
15:35:41 139  );
15:35:41 140  
15:35:41 141  /********************************************/
15:35:41 142  
15:35:41 143  PROCEDURE START_GC_PURCHASING (
15:35:41 144  	in_group_id		  IN NUMBER,
15:35:41 145  	in_offer_chain_id	  IN VARCHAR2,
15:35:41 146  	in_gift_certificate_code  IN  VARCHAR2,
15:35:41 147  	in_created_by		  IN  VARCHAR2,
15:35:41 148  	in_recipient_name	  IN  VARCHAR2,
15:35:41 149  	in_recipient_email	  IN  VARCHAR2,
15:35:41 150  	in_recipient_address_id   IN NUMBER,
15:35:41 151  	in_recipient_notify_date  IN DATE,
15:35:41 152  	in_sender_name		  IN VARCHAR2,
15:35:41 153  	in_sender_email 	  IN VARCHAR2,
15:35:41 154  	in_gift_message 	  IN  VARCHAR2,
15:35:41 155  	in_expiration_date	  IN DATE,
15:35:41 156  	out_gift_certificate_id   OUT NUMBER,
15:35:41 157  	out_invoice_id		  OUT NUMBER
15:35:41 158  );
15:35:41 159  
15:35:41 160  PROCEDURE FINALIZE_GC_PURCHASING (
15:35:41 161  	in_invoice_id	      IN NUMBER,
15:35:41 162  	in_created_by	      IN VARCHAR2,
15:35:41 163  	in_instrument_id      IN NUMBER,
15:35:41 164  	in_instrument_type_id IN NUMBER,
15:35:41 165  	in_order_id	      IN VARCHAR2,
15:35:41 166  	in_transaction_id     IN NUMBER,
15:35:41 167  	out_charge_amount     OUT NUMBER
15:35:41 168  );
15:35:41 169  
15:35:41 170  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
15:35:41 171  	in_group_id	  IN NUMBER,
15:35:41 172  	in_offer_chain_id IN VARCHAR2,
15:35:41 173  	in_gift_certificate_code  IN  VARCHAR2,
15:35:41 174  	in_created_by IN  VARCHAR2,
15:35:41 175  	in_recipient_name IN  VARCHAR2,
15:35:41 176  	in_recipient_email IN  VARCHAR2,
15:35:41 177  	in_sender_name IN VARCHAR2,
15:35:41 178  	in_sender_email IN VARCHAR2,
15:35:41 179  	in_gift_message IN  VARCHAR2,
15:35:41 180  	in_instrument_id  IN  NUMBER,
15:35:41 181  	in_instrument_type_id IN NUMBER,
15:35:41 182  	in_expiration_date IN DATE,
15:35:41 183  	in_order_id IN VARCHAR2,
15:35:41 184  	in_transaction_id IN NUMBER
15:35:41 185  );
15:35:41 186  
15:35:41 187  /*********************************************/
15:35:41 188  
15:35:41 189  PROCEDURE REDEEM_GIFT_CERTIFICATE (
15:35:41 190  	in_group_id			IN NUMBER,
15:35:41 191  	in_gift_certificate_code	IN VARCHAR2,
15:35:41 192  	in_created_by			IN VARCHAR2,
15:35:41 193  	in_redeemer_address_id		IN NUMBER,
15:35:41 194  	in_fin_instrument_id		IN NUMBER,
15:35:41 195  	in_fin_instrument_type_id	IN NUMBER,
15:35:41 196  	in_redemption_offer_chain_id	IN NUMBER,
15:35:41 197  	out_subscription_id		OUT NUMBER,
15:35:41 198  	out_license_id			OUT NUMBER
15:35:41 199  );
15:35:41 200  
15:35:41 201  /********************************************/
15:35:41 202  
15:35:41 203  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
15:35:41 204  	in_group_id	       IN  NUMBER,
15:35:41 205  	out_instrument_type_id OUT NUMBER,
15:35:41 206  	out_instrument_id      OUT NUMBER
15:35:41 207  );
15:35:41 208  
15:35:41 209  /************************************************/
15:35:41 210  
15:35:41 211  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
15:35:41 212  	in_group_id	      IN NUMBER,
15:35:41 213  	in_instrument_type_id IN NUMBER,
15:35:41 214  	in_instrument_id      IN NUMBER,
15:35:41 215  	in_updated_by	      IN VARCHAR2
15:35:41 216  );
15:35:41 217  
15:35:41 218  /***************************************************/
15:35:41 219  
15:35:41 220  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
15:35:41 221  	in_group_id	      IN NUMBER
15:35:41 222  );
15:35:41 223  
15:35:41 224  /****************************************************/
15:35:41 225  
15:35:41 226  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:35:41 227  	in_credit_card_id IN  NUMBER,
15:35:41 228  	out_result_set	  OUT SYS_REFCURSOR
15:35:41 229  );
15:35:41 230  
15:35:41 231  /****************************************************/
15:35:41 232  
15:35:41 233  PROCEDURE GET_PAYPAL_BY_ID (
15:35:41 234  	in_paypal_id   IN  NUMBER,
15:35:41 235  	out_result_set OUT SYS_REFCURSOR
15:35:41 236  );
15:35:41 237  
15:35:41 238  /***********************************************/
15:35:41 239  
15:35:41 240  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
15:35:41 241  	in_credit_card_id NUMBER
15:35:41 242  ) RETURN NUMBER;
15:35:41 243  
15:35:41 244  /*************************************************/
15:35:41 245  
15:35:41 246  PROCEDURE GET_PURCHASED_GCERTIFICATES (
15:35:41 247  	in_group_id    IN NUMBER,
15:35:41 248  	out_result_set OUT SYS_REFCURSOR
15:35:41 249  );
15:35:41 250  
15:35:41 251  /*************************************************/
15:35:41 252  
15:35:41 253  -- isGiftCertificateForProperOffer
15:35:41 254  
15:35:41 255  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
15:35:41 256  	in_gift_certificate_id IN NUMBER,
15:35:41 257  	in_charge_id	       IN NUMBER,
15:35:41 258  	out_result	       OUT NUMBER
15:35:41 259  );
15:35:41 260  
15:35:41 261  FUNCTION IS_CREDIT_CARD_EXISTS (
15:35:41 262  /*
15:35:41 263  1 - if instrument exists
15:35:41 264  0 - else
15:35:41 265  */
15:35:41 266  	in_credit_card_id IN NUMBER
15:35:41 267  ) RETURN NUMBER;
15:35:41 268  
15:35:41 269  FUNCTION IS_PAYPAL_EXISTS (
15:35:41 270  /*
15:35:41 271  1 - if instrument exists
15:35:41 272  0 - else
15:35:41 273  */
15:35:41 274  	in_paypal_id IN NUMBER
15:35:41 275  ) RETURN NUMBER;
15:35:41 276  
15:35:41 277  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
15:35:41 278  /*
15:35:41 279  1 - if instrument exists
15:35:41 280  0 - else
15:35:41 281  */
15:35:41 282  	in_gift_certificate_id IN NUMBER
15:35:41 283  ) RETURN NUMBER;
15:35:41 284  
15:35:41 285  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
15:35:41 286  	in_credit_card_id IN NUMBER,
15:35:41 287  	out_group_id	  OUT NUMBER
15:35:41 288  );
15:35:41 289  
15:35:41 290  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
15:35:41 291  	in_paypal_id IN NUMBER,
15:35:41 292  	out_group_id	  OUT NUMBER
15:35:41 293  );
15:35:41 294  
15:35:41 295  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
15:35:41 296  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
15:35:41 297  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
15:35:41 298  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
15:35:41 299  );
15:35:41 300  
15:35:41 301  PROCEDURE UPDATE_PAYPAL_STATUS (
15:35:41 302  	in_paypal_id	    IN PAYPAL.ID%TYPE,
15:35:41 303  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
15:35:41 304  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
15:35:41 305  );
15:35:41 306  
15:35:41 307  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
15:35:41 308  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
15:35:41 309  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
15:35:41 310  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
15:35:41 311  );
15:35:41 312  
15:35:41 313  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:35:41 314  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:41 315  	out_result_set OUT SYS_REFCURSOR
15:35:41 316  );
15:35:41 317  
15:35:41 318  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
15:35:41 319  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
15:35:41 320  	in_old_fin_instrument_id   IN NUMBER,
15:35:41 321  	in_old_fin_instrument_type IN NUMBER,
15:35:41 322  	in_new_fin_instrument_id   IN NUMBER,
15:35:41 323  	in_new_fin_instrument_type IN NUMBER,
15:35:41 324  	in_updated_by		   IN VARCHAR2
15:35:41 325  );
15:35:41 326  
15:35:41 327  END PROCS_FIN_INSTRUMENTS_V17;
15:35:41 328  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.06
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V17" AS
15:35:41   2  
15:35:41   3  PROCEDURE CREATE_CREDIT_CARD(
15:35:41   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
15:35:41   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
15:35:41   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
15:35:41   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
15:35:41   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
15:35:41   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
15:35:41  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
15:35:41  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
15:35:41  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
15:35:41  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
15:35:41  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
15:35:41  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:35:41  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
15:35:41  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
15:35:41  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
15:35:41  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
15:35:41  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
15:35:41  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
15:35:41  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
15:35:41  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
15:35:41  24  );
15:35:41  25  
15:35:41  26  PROCEDURE UPDATE_CREDIT_CARD(
15:35:41  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
15:35:41  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:35:41  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
15:35:41  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:35:41  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
15:35:41  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
15:35:41  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
15:35:41  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:41  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
15:35:41  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
15:35:41  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:35:41  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
15:35:41  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
15:35:41  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
15:35:41  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
15:35:41  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
15:35:41  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
15:35:41  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
15:35:41  45  );
15:35:41  46  
15:35:41  47  PROCEDURE CREATE_PAYPAL(
15:35:41  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
15:35:41  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
15:35:41  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
15:35:41  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:35:41  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
15:35:41  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
15:35:41  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
15:35:41  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
15:35:41  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
15:35:41  57  	in_state			IN PAYPAL.STATE%TYPE,
15:35:41  58  	in_city 			IN PAYPAL.CITY%TYPE,
15:35:41  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
15:35:41  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
15:35:41  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
15:35:41  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
15:35:41  63  );
15:35:41  64  
15:35:41  65  PROCEDURE UPDATE_PAYPAL(
15:35:41  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
15:35:41  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:35:41  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
15:35:41  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
15:35:41  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
15:35:41  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:35:41  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:35:41  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
15:35:41  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
15:35:41  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:41  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
15:35:41  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:35:41  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
15:35:41  79  );
15:35:41  80  
15:35:41  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
15:35:41  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
15:35:41  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
15:35:41  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
15:35:41  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:41  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
15:35:41  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:35:41  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
15:35:41  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
15:35:41  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
15:35:41  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
15:35:41  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
15:35:41  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
15:35:41  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
15:35:41  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
15:35:41  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
15:35:41  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
15:35:41  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
15:35:41  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
15:35:41 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
15:35:41 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
15:35:41 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
15:35:41 103  );
15:35:41 104  
15:35:41 105  PROCEDURE UPDATE_GIFT_CERTIFICATE(
15:35:41 106  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
15:35:41 107  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:35:41 108  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
15:35:41 109  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
15:35:41 110  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
15:35:41 111  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
15:35:41 112  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
15:35:41 113  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
15:35:41 114  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
15:35:41 115  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
15:35:41 116  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
15:35:41 117  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
15:35:41 118  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
15:35:41 119  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
15:35:41 120  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
15:35:41 121  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
15:35:41 122  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
15:35:41 123  );
15:35:41 124  
15:35:41 125  END PROCS_FIN_INSTRUMENTS_CRU_V17;
15:35:41 126  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.05
15:35:41 SQL> 
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
15:35:41 SQL> --------------------------------------------------------------------------------
15:35:41 SQL> 
15:35:41 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V17" As
15:35:41   2  
15:35:41   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
15:35:41   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
15:35:41   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
15:35:41   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:41   7  );
15:35:41   8  
15:35:41   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
15:35:41  10  	out_result_set OUT SYS_REFCURSOR
15:35:41  11  );
15:35:41  12  
15:35:41  13  PROCEDURE EXPIRE_SUB_SHARE (
15:35:41  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
15:35:41  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:41  16  );
15:35:41  17  
15:35:41  18  PROCEDURE EXPIRE_ALL_SHARES (
15:35:41  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
15:35:41  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:41  21  );
15:35:41  22  
15:35:41  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
15:35:41  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
15:35:41  25  	in_start	 IN  NUMBER,
15:35:41  26  	in_end		 IN  NUMBER,
15:35:41  27  	in_expired	 IN  NUMBER,
15:35:41  28  	out_result_set	 OUT SYS_REFCURSOR,
15:35:41  29  	out_shares_count OUT NUMBER
15:35:41  30  );
15:35:41  31  
15:35:41  32  PROCEDURE IS_VALID_IP_ADDRESS (
15:35:41  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:41  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:35:41  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:35:41  36  	out_is_valid	    OUT NUMBER
15:35:41  37  );
15:35:41  38  
15:35:41  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
15:35:41  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:41  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:35:41  42  	out_is_valid	    OUT NUMBER
15:35:41  43  );
15:35:41  44  
15:35:41  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
15:35:41  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
15:35:41  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
15:35:41  48  	Out_Result_Set	       Out Sys_Refcursor
15:35:41  49  );
15:35:41  50  
15:35:41  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
15:35:41  52  	in_group_account_id IN NUMBER,
15:35:41  53  	in_start	    IN NUMBER,
15:35:41  54  	in_end		    IN NUMBER,
15:35:41  55  	Out_Result_Set	    OUT Sys_Refcursor
15:35:41  56  );
15:35:41  57  
15:35:41  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
15:35:41  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
15:35:41  60  	Out_Result_Set	   Out Sys_Refcursor
15:35:41  61  );
15:35:41  62  
15:35:41  63  PROCEDURE CREATE_GROUP_ACCOUNT (
15:35:41  64  	in_subscription_id	 IN NUMBER,
15:35:41  65  	in_group_name		 IN VARCHAR2,
15:35:41  66  	in_first_name		 IN VARCHAR2,
15:35:41  67  	in_last_name		 IN VARCHAR2,
15:35:41  68  	in_email		 IN VARCHAR2,
15:35:41  69  	in_phone		 IN VARCHAR2,
15:35:41  70  	in_organization_type	 IN VARCHAR2,
15:35:41  71  	in_seats		 IN NUMBER,
15:35:41  72  	in_seat_ttl_in_hours	 IN NUMBER,
15:35:41  73  	in_ip			 IN NUMBER,
15:35:41  74  	in_created_by		 IN VARCHAR2
15:35:41  75  );
15:35:41  76  
15:35:41  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
15:35:41  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:35:41  79  	out_result_set	    OUT SYS_REFCURSOR
15:35:41  80  );
15:35:41  81  
15:35:41  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
15:35:41  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:35:41  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:35:41  85  	out_result_set	    OUT SYS_REFCURSOR
15:35:41  86  );
15:35:41  87  
15:35:41  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
15:35:41  89  	in_group_account_id   IN NUMBER,
15:35:41  90  	in_start	      IN NUMBER,
15:35:41  91  	in_end		      IN NUMBER,
15:35:41  92  	in_status	      IN NUMBER,
15:35:41  93  	out_record_count      OUT NUMBER,
15:35:41  94  	out_result_set	      OUT SYS_REFCURSOR
15:35:41  95  );
15:35:41  96  
15:35:41  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
15:35:41  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:41  99  	in_start	      IN NUMBER,
15:35:41 100  	in_end		      IN NUMBER,
15:35:41 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
15:35:41 102  	out_record_count      OUT NUMBER,
15:35:41 103  	out_result_set	      OUT SYS_REFCURSOR
15:35:41 104  );
15:35:41 105  
15:35:41 106  PROCEDURE ADD_EMAIL_DOMAIN (
15:35:41 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:41 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:35:41 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
15:35:41 110  );
15:35:41 111  
15:35:41 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
15:35:41 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:41 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:41 115  );
15:35:41 116  
15:35:41 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
15:35:41 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:35:41 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:41 120  );
15:35:41 121  
15:35:41 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
15:35:41 123  	in_group_account_id    IN NUMBER,
15:35:41 124  	in_borrower_account_id IN NUMBER,
15:35:41 125  	in_ip_address	       IN VARCHAR2,
15:35:41 126  	in_email_domain        IN VARCHAR2,
15:35:41 127  	in_created_by	       IN VARCHAR2
15:35:41 128  );
15:35:41 129  
15:35:41 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
15:35:41 131  	in_group_account_id   IN NUMBER,
15:35:41 132  	out_occupied_seats   OUT NUMBER
15:35:41 133  );
15:35:41 134  
15:35:41 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
15:35:41 136  	in_group_account_id   IN NUMBER
15:35:41 137  ) RETURN NUMBER;
15:35:41 138  
15:35:41 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
15:35:41 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:41 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:35:41 142  );
15:35:41 143  
15:35:41 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
15:35:41 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
15:35:41 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:35:41 147  );
15:35:41 148  
15:35:41 149  PROCEDURE ADD_IP_RANGE (
15:35:41 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:41 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
15:35:41 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:35:41 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:35:41 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
15:35:41 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
15:35:41 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
15:35:41 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
15:35:41 158  );
15:35:41 159  
15:35:41 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
15:35:41 161  	in_group_account_id IN NUMBER,
15:35:41 162  	out_group_id OUT NUMBER
15:35:41 163  );
15:35:41 164  
15:35:41 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
15:35:41 166  	in_group_account_ip_range_id IN NUMBER,
15:35:41 167  	out_group_id OUT NUMBER
15:35:41 168  );
15:35:41 169  
15:35:41 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
15:35:41 171  	in_group_account_email_dom_id IN NUMBER,
15:35:41 172  	out_group_id OUT NUMBER
15:35:41 173  );
15:35:41 174  
15:35:41 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
15:35:41 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:35:41 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
15:35:41 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
15:35:41 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
15:35:41 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
15:35:41 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
15:35:41 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:35:41 183  );
15:35:41 184  
15:35:41 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
15:35:41 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:35:41 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
15:35:41 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:35:41 189  );
15:35:41 190  
15:35:41 191  END PROCS_GROUP_ACCOUNT_V17;
15:35:41 192  .
15:35:41 SQL> /

Package created.

Elapsed: 00:00:00.05
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
15:35:42   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
15:35:42   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
15:35:42   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
15:35:42   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
15:35:42   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
15:35:42   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
15:35:42  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
15:35:42  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:42  12  );
15:35:42  13  
15:35:42  14  PROCEDURE CREATE_GROUP_ACCOUNT (
15:35:42  15  	in_subscription_id	 IN NUMBER,
15:35:42  16  	in_group_name		 IN VARCHAR2,
15:35:42  17  	in_first_name		 IN VARCHAR2,
15:35:42  18  	in_last_name		 IN VARCHAR2,
15:35:42  19  	in_email		 IN VARCHAR2,
15:35:42  20  	in_phone		 IN VARCHAR2,
15:35:42  21  	in_organization_type	 IN VARCHAR2,
15:35:42  22  	in_seats		 IN NUMBER,
15:35:42  23  	in_seat_ttl_in_hours	 IN NUMBER,
15:35:42  24  	in_ip			 IN NUMBER,
15:35:42  25  	in_created_by		 IN VARCHAR2
15:35:42  26  );
15:35:42  27  
15:35:42  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
15:35:42  29  	in_group_account_id    IN NUMBER,
15:35:42  30  	in_borrower_account_id IN NUMBER,
15:35:42  31  	in_ip_address	       IN VARCHAR2,
15:35:42  32  	in_email_domain        IN VARCHAR2,
15:35:42  33  	in_start_date	       IN DATE,
15:35:42  34  	in_end_date	       IN DATE,
15:35:42  35  	in_created_by	       IN VARCHAR2
15:35:42  36  );
15:35:42  37  
15:35:42  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
15:35:42  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:42  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:35:42  41  );
15:35:42  42  
15:35:42  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
15:35:42  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
15:35:42  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:35:42  46  );
15:35:42  47  
15:35:42  48  PROCEDURE ADD_IP_RANGE (
15:35:42  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:42  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
15:35:42  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:35:42  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:35:42  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
15:35:42  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
15:35:42  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
15:35:42  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
15:35:42  57  );
15:35:42  58  
15:35:42  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
15:35:42  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:42  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:42  62  );
15:35:42  63  
15:35:42  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
15:35:42  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:35:42  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:42  67  );
15:35:42  68  
15:35:42  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
15:35:42  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:35:42  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:42  72  );
15:35:42  73  
15:35:42  74  PROCEDURE ADD_EMAIL_DOMAIN (
15:35:42  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:42  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:35:42  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
15:35:42  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
15:35:42  79  );
15:35:42  80  
15:35:42  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
15:35:42  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:35:42  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
15:35:42  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
15:35:42  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
15:35:42  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
15:35:42  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
15:35:42  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:35:42  89  );
15:35:42  90  
15:35:42  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
15:35:42  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:35:42  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
15:35:42  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:35:42  95  );
15:35:42  96  END PROCS_GROUP_ACCOUNT_CRU_V17;
15:35:42  97  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.04
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_HISTORY
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE CREATE_ADDRESS_HISTORY(
15:35:42   4  /*
15:35:42   5  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42   7  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42   8  */
15:35:42   9  	in_address_id		     IN NUMBER,
15:35:42  10  	in_system_activity_reason_id IN NUMBER
15:35:42  11  );
15:35:42  12  
15:35:42  13  PROCEDURE CREATE_ACCOUNT_HISTORY(
15:35:42  14  /*
15:35:42  15  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  16  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  17  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  18  */
15:35:42  19  	in_account_id		     IN NUMBER,
15:35:42  20  	in_system_activity_reason_id IN NUMBER
15:35:42  21  );
15:35:42  22  
15:35:42  23  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
15:35:42  24  /*
15:35:42  25  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  26  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  27  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  28  */
15:35:42  29  	in_subscription_id	     IN NUMBER,
15:35:42  30  	in_system_activity_reason_id IN NUMBER
15:35:42  31  );
15:35:42  32  
15:35:42  33  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
15:35:42  34  /*
15:35:42  35  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  36  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  37  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  38  */
15:35:42  39  	in_credit_card_id	      IN NUMBER,
15:35:42  40  	in_system_activity_reason_id  IN  NUMBER
15:35:42  41  );
15:35:42  42  
15:35:42  43  PROCEDURE CREATE_PAYPAL_HISTORY(
15:35:42  44  /*
15:35:42  45  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  46  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  47  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  48  */
15:35:42  49  	in_paypal_id		      IN NUMBER,
15:35:42  50  	in_system_activity_reason_id  IN NUMBER
15:35:42  51  );
15:35:42  52  
15:35:42  53  PROCEDURE CREATE_GIFT_CERT_HISTORY(
15:35:42  54  /*
15:35:42  55  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  56  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  57  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  58  */
15:35:42  59  	in_gift_certificate_id	      IN NUMBER,
15:35:42  60  	in_system_activity_reason_id  IN  NUMBER
15:35:42  61  );
15:35:42  62  
15:35:42  63  PROCEDURE CREATE_TRANSACTION_HISTORY (
15:35:42  64  /*
15:35:42  65  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  66  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  67  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  68  */
15:35:42  69  	in_transaction_id	     IN NUMBER,
15:35:42  70  	in_system_activity_reason_id IN NUMBER
15:35:42  71  );
15:35:42  72  
15:35:42  73  PROCEDURE CREATE_INVOICE_HISTORY (
15:35:42  74  /*
15:35:42  75  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  76  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  77  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  78  */
15:35:42  79  	in_invoice_id		     IN NUMBER,
15:35:42  80  	in_system_activity_reason_id IN NUMBER
15:35:42  81  );
15:35:42  82  
15:35:42  83  PROCEDURE CREATE_LICENSE_HISTORY (
15:35:42  84  /*
15:35:42  85  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  86  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  87  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  88  */
15:35:42  89  	in_license_id		     IN NUMBER,
15:35:42  90  	in_system_activity_reason_id IN NUMBER
15:35:42  91  );
15:35:42  92  
15:35:42  93  PROCEDURE CREATE_CHARGE_HISTORY (
15:35:42  94  /*
15:35:42  95  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  96  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  97  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42  98  */
15:35:42  99  	in_charge_id		    IN NUMBER,
15:35:42 100  	in_system_activity_reason_id IN NUMBER
15:35:42 101  );
15:35:42 102  
15:35:42 103  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
15:35:42 104  /*
15:35:42 105  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42 106  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 107  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42 108  */
15:35:42 109  	in_invoice_adjustment_id     IN NUMBER,
15:35:42 110  	in_system_activity_reason_id IN NUMBER
15:35:42 111  );
15:35:42 112  
15:35:42 113  
15:35:42 114  END PROCS_HISTORY_V17;
15:35:42 115  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_INVOICE
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE IS_INVOICE_FOR_GC (
15:35:42   4  	in_invoice_id  IN NUMBER,
15:35:42   5  	out_result     OUT NUMBER
15:35:42   6  );
15:35:42   7  
15:35:42   8  PROCEDURE CREATE_INVOICE(
15:35:42   9  /*
15:35:42  10  Throws exceptions:
15:35:42  11  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  12  */
15:35:42  13  	  in_invoice_status IN NUMBER,
15:35:42  14  	  in_created_by     IN VARCHAR2,
15:35:42  15  	  in_tax_exempt_id  IN VARCHAR2,
15:35:42  16  	  out_invoice_id    OUT NUMBER
15:35:42  17  );
15:35:42  18  
15:35:42  19  PROCEDURE GET_PENDING_INVOICES (
15:35:42  20  /*
15:35:42  21  Throws exceptions:
15:35:42  22  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  23  */
15:35:42  24  	out_result_set1      OUT SYS_REFCURSOR,
15:35:42  25  	out_result_set2      OUT SYS_REFCURSOR,
15:35:42  26  	out_result_set3      OUT SYS_REFCURSOR,
15:35:42  27  	in_row_number	     IN NUMBER DEFAULT NULL
15:35:42  28  );
15:35:42  29  
15:35:42  30  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:35:42  31  /*
15:35:42  32  Throws exceptions:
15:35:42  33  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  34  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  35  */
15:35:42  36  	in_invoice_id IN  NUMBER,
15:35:42  37  	out_amount    OUT NUMBER
15:35:42  38  );
15:35:42  39  
15:35:42  40  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
15:35:42  41  	in_invoice_id IN  NUMBER
15:35:42  42  ) RETURN NUMBER;
15:35:42  43  
15:35:42  44  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
15:35:42  45  /*
15:35:42  46  Throws exceptions:
15:35:42  47  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  48  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  49  */
15:35:42  50  	in_invoice_id  IN  NUMBER,
15:35:42  51  	out_account_id OUT NUMBER
15:35:42  52  );
15:35:42  53  
15:35:42  54  PROCEDURE GET_INVOICE_DETAILS (
15:35:42  55  /*
15:35:42  56  Throws exceptions:
15:35:42  57  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  58  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  59  */
15:35:42  60  	in_invoice_id	   IN  NUMBER,
15:35:42  61  	out_group_id	   OUT NUMBER,
15:35:42  62  	out_status_id	   OUT NUMBER,
15:35:42  63  	out_line_items_set OUT SYS_REFCURSOR,
15:35:42  64  	out_pp_charges_set OUT SYS_REFCURSOR,
15:35:42  65  	out_cc_charges_set OUT SYS_REFCURSOR,
15:35:42  66  	out_gc_charges_set OUT SYS_REFCURSOR
15:35:42  67  );
15:35:42  68  -- norlov: #38796
15:35:42  69  PROCEDURE GET_TRANSACTION_INVOICE (
15:35:42  70  /*
15:35:42  71  Throws exceptions:
15:35:42  72  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  73  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  74  */
15:35:42  75  	in_transaction_id  IN  NUMBER,
15:35:42  76  	out_result_set	      OUT SYS_REFCURSOR
15:35:42  77  );
15:35:42  78  
15:35:42  79  PROCEDURE UPDATE_INVOICE_STATUS (
15:35:42  80  /*
15:35:42  81  Throws exceptions:
15:35:42  82  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  83  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  84  */
15:35:42  85  	in_invoice_id		       IN NUMBER,
15:35:42  86  	in_invoice_status_id	       IN NUMBER,
15:35:42  87  	in_updated_by		       IN VARCHAR2
15:35:42  88  );
15:35:42  89  
15:35:42  90  FUNCTION IS_INVOICE_PAYING_STARTED (
15:35:42  91  /*
15:35:42  92  Throws exceptions:
15:35:42  93  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  94  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  95  */
15:35:42  96  	in_invoice_id IN NUMBER
15:35:42  97  ) RETURN NUMBER;
15:35:42  98  
15:35:42  99  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
15:35:42 100  	in_invoice_id  IN NUMBER,
15:35:42 101  	out_is_started OUT NUMBER
15:35:42 102  );
15:35:42 103  
15:35:42 104  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
15:35:42 105  	in_invoice_id	      IN NUMBER,
15:35:42 106  	in_chargeback_date    IN DATE,
15:35:42 107  	out_chargeback_amount OUT NUMBER
15:35:42 108  );
15:35:42 109  
15:35:42 110  PROCEDURE APPLY_REFUND (
15:35:42 111  	in_invoice_id	     IN NUMBER,
15:35:42 112  	in_chargeback_amount IN NUMBER,
15:35:42 113  	in_created_by	     IN VARCHAR2,
15:35:42 114  	out_charge_id	     OUT NUMBER
15:35:42 115  );
15:35:42 116  
15:35:42 117  PROCEDURE GET_MAX_REFUND (
15:35:42 118  	in_invoice_id IN NUMBER,
15:35:42 119  	out_amount    OUT NUMBER
15:35:42 120  );
15:35:42 121  
15:35:42 122  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
15:35:42 123  	in_invoice_id	    IN NUMBER,
15:35:42 124  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
15:35:42 125  	out_days_num	    OUT NUMBER
15:35:42 126  );
15:35:42 127  
15:35:42 128  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:35:42 129  	in_invoice_id  IN NUMBER,
15:35:42 130  	out_result_set OUT SYS_REFCURSOR
15:35:42 131  );
15:35:42 132  
15:35:42 133  PROCEDURE GET_INVOICE_LICENSES (
15:35:42 134  	in_invoice_id  IN NUMBER,
15:35:42 135  	out_result_set OUT SYS_REFCURSOR
15:35:42 136  );
15:35:42 137  
15:35:42 138  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
15:35:42 139  	in_invoice_id	   IN NUMBER,
15:35:42 140  	out_offer_chain_id OUT NUMBER
15:35:42 141  );
15:35:42 142  
15:35:42 143  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
15:35:42 144  -- Closing invoice without refund
15:35:42 145  	in_invoice_id IN NUMBER,
15:35:42 146  	in_updated_by IN VARCHAR2
15:35:42 147  );
15:35:42 148  
15:35:42 149  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
15:35:42 150  	in_invoice_id	    IN NUMBER,
15:35:42 151  	out_subscription_id OUT NUMBER
15:35:42 152  );
15:35:42 153  
15:35:42 154  PROCEDURE IS_INVOICE_TAX_EXEMPT (
15:35:42 155  /*
15:35:42 156  Throws exceptions:
15:35:42 157  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:42 158  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 159  Return:
15:35:42 160  	GLOBAL_CONSTANTS_V17.TRUE if ACCOUNT.EXEMPT_ID is not null
15:35:42 161  	GLOBAL_CONSTANTS_V17.FALSE else
15:35:42 162  */
15:35:42 163  	in_invoice_id	  IN NUMBER,
15:35:42 164  	out_is_tax_exempt OUT NUMBER
15:35:42 165  );
15:35:42 166  
15:35:42 167  PROCEDURE GET_INVOICE_BY_ID (
15:35:42 168  	in_invoice_id  IN NUMBER,
15:35:42 169  	out_result_set OUT SYS_REFCURSOR
15:35:42 170  );
15:35:42 171  
15:35:42 172  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
15:35:42 173  	in_invoice_id		      IN NUMBER,
15:35:42 174  	out_is_tax_calculation_needed OUT NUMBER
15:35:42 175  );
15:35:42 176  
15:35:42 177  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
15:35:42 178  	in_invoice_id		     IN NUMBER,
15:35:42 179  	in_updated_by		     IN VARCHAR2,
15:35:42 180  	in_is_tax_calculation_needed IN NUMBER
15:35:42 181  );
15:35:42 182  
15:35:42 183  PROCEDURE REFUND_INVOICE (
15:35:42 184  	in_invoice_id	   IN NUMBER,
15:35:42 185  	in_refund_amount   IN NUMBER,
15:35:42 186  	in_note 	   IN VARCHAR2,
15:35:42 187  	in_created_by	   IN VARCHAR2,
15:35:42 188  	out_charge_id	   OUT NUMBER
15:35:42 189  );
15:35:42 190  
15:35:42 191  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
15:35:42 192  	in_invoice_id		    IN NUMBER,
15:35:42 193  	out_order_id		    OUT VARCHAR2,
15:35:42 194  	out_external_transaction_id OUT VARCHAR2
15:35:42 195  );
15:35:42 196  
15:35:42 197  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
15:35:42 198  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
15:35:42 199  	out_result_set OUT SYS_REFCURSOR
15:35:42 200  );
15:35:42 201  
15:35:42 202  PROCEDURE IS_REVOKE_ENTITLEMENTS(
15:35:42 203  	in_invoice_id IN NUMBER,
15:35:42 204  	out_is_revoke OUT NUMBER
15:35:42 205  );
15:35:42 206  
15:35:42 207  END PROCS_INVOICE_V17;
15:35:42 208  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.08
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_INVOICE_CRU
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE CREATE_INVOICE (
15:35:42   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
15:35:42   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
15:35:42   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
15:35:42   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
15:35:42   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
15:35:42   9  );
15:35:42  10  
15:35:42  11  PROCEDURE UPDATE_INVOICE (
15:35:42  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
15:35:42  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
15:35:42  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
15:35:42  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
15:35:42  16  );
15:35:42  17  
15:35:42  18  END PROCS_INVOICE_CRU_V17;
15:35:42  19  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.04
15:35:42 SQL> 
15:35:42 SQL> /*
15:35:42 SQL> CREATE TABLE ITUNES_RECEIPT (
15:35:42 SQL> 	id NUMBER NOT NULL ENABLE,
15:35:42 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
15:35:42 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
15:35:42 SQL> 	status NUMBER,
15:35:42 SQL> 	quantity NUMBER,
15:35:42 SQL> 	product_id VARCHAR(1024),
15:35:42 SQL> 	transaction_id VARCHAR(1024),
15:35:42 SQL> 	purchase_date TIMESTAMP,
15:35:42 SQL> 	original_transaction_id VARCHAR(1024),
15:35:42 SQL> 	original_purchase_date TIMESTAMP,
15:35:42 SQL> 	app_item_id VARCHAR(1024),
15:35:42 SQL> 	version_external_id NUMBER,
15:35:42 SQL> 	bid VARCHAR(1024),
15:35:42 SQL> 	bvrs VARCHAR(255),
15:35:42 SQL> 	expires_date TIMESTAMP,
15:35:42 SQL> 	create_date DATE NOT NULL,
15:35:42 SQL> 	created_by VARCHAR(255) NOT NULL,
15:35:42 SQL> 	update_date DATE NOT NULL,
15:35:42 SQL> 	updated_by VARCHAR(255) NOT NULL,
15:35:42 SQL> 	last_check_date DATE NOT NULL,
15:35:42 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:35:42 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:35:42 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:35:42 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
15:35:42 SQL> )
15:35:42 SQL> TABLESPACE CORE;
15:35:42 SQL> */
15:35:42 SQL> 
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
15:35:42   4  	      /*
15:35:42   5  	      Throws exceptions:
15:35:42   6  	      APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42   7  	      */
15:35:42   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:42   9  	      out_result_set	  OUT SYS_REFCURSOR
15:35:42  10  );
15:35:42  11  
15:35:42  12  PROCEDURE CREATE_RECEIPT(
15:35:42  13  /*
15:35:42  14  Throws exceptions:
15:35:42  15  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  16  */
15:35:42  17  	  out_id	      OUT NUMBER,
15:35:42  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:35:42  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
15:35:42  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
15:35:42  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
15:35:42  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:42  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:35:42  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:35:42  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:42  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:35:42  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:35:42  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:35:42  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
15:35:42  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
15:35:42  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:35:42  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
15:35:42  33  );
15:35:42  34  
15:35:42  35  PROCEDURE UPDATE_RECEIPT(
15:35:42  36  /*
15:35:42  37  Throws exceptions:
15:35:42  38  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  39  */
15:35:42  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
15:35:42  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
15:35:42  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
15:35:42  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
15:35:42  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:42  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:35:42  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:35:42  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:42  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:35:42  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:35:42  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:35:42  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
15:35:42  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
15:35:42  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:35:42  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
15:35:42  55  	  in_is_expired       IN NUMBER
15:35:42  56  );
15:35:42  57  
15:35:42  58  PROCEDURE LINK_ITUNES_RECEIPT(
15:35:42  59  /*
15:35:42  60  Throws exceptions:
15:35:42  61  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  62  */
15:35:42  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
15:35:42  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:35:42  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
15:35:42  66  );
15:35:42  67  
15:35:42  68  PROCEDURE MARK_RECEIPT_CHECKED(
15:35:42  69  /*
15:35:42  70  Throws exceptions:
15:35:42  71  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  72  */
15:35:42  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
15:35:42  74  );
15:35:42  75  
15:35:42  76  PROCEDURE GET_ITUNES_RECEIPTS (
15:35:42  77  /*
15:35:42  78  Throws exceptions:
15:35:42  79  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  80  */
15:35:42  81  	out_result_set	    OUT SYS_REFCURSOR,
15:35:42  82  	in_row_number	    IN NUMBER DEFAULT 500
15:35:42  83  );
15:35:42  84  
15:35:42  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
15:35:42  86  /*
15:35:42  87  Throws exceptions:
15:35:42  88  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  89  */
15:35:42  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
15:35:42  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
15:35:42  92  );
15:35:42  93  
15:35:42  94  END PROCS_ITUNES_RECEIPT_V17;
15:35:42  95  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> /*
15:35:42 SQL> CREATE TABLE ITUNES_RECEIPT (
15:35:42 SQL> 	id NUMBER NOT NULL ENABLE,
15:35:42 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
15:35:42 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
15:35:42 SQL> 	status NUMBER,
15:35:42 SQL> 	quantity NUMBER,
15:35:42 SQL> 	product_id VARCHAR(1024),
15:35:42 SQL> 	transaction_id VARCHAR(1024),
15:35:42 SQL> 	purchase_date TIMESTAMP,
15:35:42 SQL> 	original_transaction_id VARCHAR(1024),
15:35:42 SQL> 	original_purchase_date TIMESTAMP,
15:35:42 SQL> 	app_item_id VARCHAR(1024),
15:35:42 SQL> 	version_external_id NUMBER,
15:35:42 SQL> 	bid VARCHAR(1024),
15:35:42 SQL> 	bvrs VARCHAR(255),
15:35:42 SQL> 	expires_date TIMESTAMP,
15:35:42 SQL> 	create_date DATE NOT NULL,
15:35:42 SQL> 	created_by VARCHAR(255) NOT NULL,
15:35:42 SQL> 	update_date DATE NOT NULL,
15:35:42 SQL> 	updated_by VARCHAR(255) NOT NULL,
15:35:42 SQL> 	last_check_date DATE NOT NULL,
15:35:42 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:35:42 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:35:42 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:35:42 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
15:35:42 SQL> )
15:35:42 SQL> TABLESPACE CORE;
15:35:42 SQL> */
15:35:42 SQL> 
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE CREATE_RECEIPT(
15:35:42   4  /*
15:35:42   5  Throws exceptions:
15:35:42   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42   7  */
15:35:42   8  	  out_id	      OUT NUMBER,
15:35:42   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:35:42  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
15:35:42  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
15:35:42  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
15:35:42  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:42  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:35:42  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:35:42  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:42  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:35:42  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:35:42  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:35:42  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
15:35:42  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
15:35:42  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:35:42  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
15:35:42  24  );
15:35:42  25  
15:35:42  26  PROCEDURE UPDATE_RECEIPT(
15:35:42  27  /*
15:35:42  28  Throws exceptions:
15:35:42  29  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  30  */
15:35:42  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
15:35:42  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
15:35:42  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
15:35:42  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
15:35:42  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:42  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:35:42  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:35:42  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:42  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:35:42  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:35:42  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:35:42  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
15:35:42  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
15:35:42  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:35:42  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
15:35:42  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
15:35:42  47  );
15:35:42  48  
15:35:42  49  PROCEDURE LINK_ITUNES_RECEIPT(
15:35:42  50  /*
15:35:42  51  Throws exceptions:
15:35:42  52  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  53  */
15:35:42  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
15:35:42  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:35:42  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
15:35:42  57  );
15:35:42  58  
15:35:42  59  PROCEDURE MARK_RECEIPT_CHECKED(
15:35:42  60  /*
15:35:42  61  Throws exceptions:
15:35:42  62  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  63  */
15:35:42  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
15:35:42  65  );
15:35:42  66  
15:35:42  67  END PROCS_ITUNES_RECEIPT_CRU_V17;
15:35:42  68  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_LICENSE
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE CREATE_LICENSE(
15:35:42   4  /*
15:35:42   5  Throws exceptions:
15:35:42   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42   8  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:42   9  */
15:35:42  10  	in_status_id		    IN NUMBER,
15:35:42  11  	in_needs_entitlements	    IN NUMBER,
15:35:42  12  	in_start_date		    IN DATE,
15:35:42  13  	in_end_date		    IN DATE,
15:35:42  14  	in_offer_id		    IN NUMBER,
15:35:42  15  	in_subscription_id	    IN NUMBER,
15:35:42  16  	in_invoice_id		    IN NUMBER,
15:35:42  17  	in_created_by		    IN VARCHAR2,
15:35:42  18  	in_is_extension 	    IN NUMBER,
15:35:42  19  	in_current_offer_index	    IN NUMBER,
15:35:42  20  	in_current_offer_recurr_num IN NUMBER,
15:35:42  21  	out_license_id		    OUT NUMBER
15:35:42  22  );
15:35:42  23  
15:35:42  24  /*********************************************/
15:35:42  25  
15:35:42  26  PROCEDURE UPDATE_LICENSE_STATUS(
15:35:42  27  /*
15:35:42  28  Throws exceptions:
15:35:42  29  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  30  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  31  */
15:35:42  32  	  in_license_id     IN NUMBER,
15:35:42  33  	  in_license_status IN NUMBER,
15:35:42  34  	  in_updated_by     IN VARCHAR2,
15:35:42  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:42  36  );
15:35:42  37  
15:35:42  38  /*********************************************/
15:35:42  39  
15:35:42  40  PROCEDURE GET_ENDING_LICENSES (
15:35:42  41  	in_hours_number IN NUMBER,
15:35:42  42  	out_result_set OUT SYS_REFCURSOR
15:35:42  43  );
15:35:42  44  
15:35:42  45  /*********************************************/
15:35:42  46  
15:35:42  47  PROCEDURE GET_ENDING_LICENSES_CC (
15:35:42  48  	in_hours_number IN NUMBER,
15:35:42  49  	out_result_set OUT SYS_REFCURSOR,
15:35:42  50  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:42  51  );
15:35:42  52  
15:35:42  53  /**********************************************/
15:35:42  54  
15:35:42  55  PROCEDURE GET_RECURRING_OFFER (
15:35:42  56  	in_license_id  IN NUMBER,
15:35:42  57  	out_result_set OUT SYS_REFCURSOR
15:35:42  58  );
15:35:42  59  
15:35:42  60  /**********************************************/
15:35:42  61  
15:35:42  62  PROCEDURE GET_NEXT_OFFER (
15:35:42  63  	in_license_id  IN NUMBER,
15:35:42  64  	out_result_set OUT SYS_REFCURSOR
15:35:42  65  );
15:35:42  66  
15:35:42  67  /**********************************************/
15:35:42  68  
15:35:42  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
15:35:42  70  	in_license_id IN NUMBER,
15:35:42  71  	out_group_id  OUT NUMBER
15:35:42  72  );
15:35:42  73  
15:35:42  74  /**************************************************/
15:35:42  75  
15:35:42  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
15:35:42  77  	out_result_set OUT SYS_REFCURSOR
15:35:42  78  );
15:35:42  79  
15:35:42  80  /**************************************************/
15:35:42  81  
15:35:42  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
15:35:42  83  	in_license_id	      IN NUMBER,
15:35:42  84  	in_needs_entitlements IN NUMBER,
15:35:42  85  	in_updated_by	      IN VARCHAR2
15:35:42  86  );
15:35:42  87  
15:35:42  88  PROCEDURE GET_ENDED_GC_LICENSES (
15:35:42  89  	out_result_set		OUT SYS_REFCURSOR,
15:35:42  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:35:42  91  	in_num_rows		IN NUMBER DEFAULT 10000,
15:35:42  92  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:42  93  );
15:35:42  94  
15:35:42  95  PROCEDURE GET_LICENSE_BY_ID (
15:35:42  96  
15:35:42  97  	in_license_id  IN NUMBER,
15:35:42  98  
15:35:42  99  	out_result_set OUT SYS_REFCURSOR
15:35:42 100  
15:35:42 101  );
15:35:42 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
15:35:42 103  	in_subscription_id IN NUMBER,
15:35:42 104  	in_end_date IN DATE,
15:35:42 105  	in_updated_by IN VARCHAR2
15:35:42 106  );
15:35:42 107  END PROCS_LICENSE_V17;
15:35:42 108  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.03
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_LICENSE_CRU
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE CREATE_LICENSE(
15:35:42   4  	out_license_id		    OUT LICENSE.ID%TYPE,
15:35:42   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
15:35:42   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
15:35:42   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
15:35:42   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
15:35:42   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
15:35:42  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
15:35:42  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
15:35:42  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
15:35:42  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
15:35:42  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
15:35:42  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
15:35:42  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
15:35:42  17  );
15:35:42  18  
15:35:42  19  PROCEDURE UPDATE_LICENSE (
15:35:42  20  	in_license_id		    IN LICENSE.ID%TYPE,
15:35:42  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
15:35:42  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
15:35:42  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
15:35:42  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
15:35:42  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
15:35:42  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
15:35:42  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
15:35:42  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
15:35:42  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
15:35:42  30  );
15:35:42  31  
15:35:42  32  END PROCS_LICENSE_CRU_V17;
15:35:42  33  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_LINE_ITEMS
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE ADD_LINE_ITEMS(
15:35:42   4  /*
15:35:42   5  Throws exceptions:
15:35:42   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42   8  */
15:35:42   9  	in_invoice_id IN NUMBER,
15:35:42  10  	in_offer_id   IN NUMBER,
15:35:42  11  	in_created_by IN VARCHAR2
15:35:42  12  );
15:35:42  13  
15:35:42  14  /****************************************************/
15:35:42  15  
15:35:42  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
15:35:42  17  	in_line_item_id    IN NUMBER,
15:35:42  18  	in_amount	   IN NUMBER,
15:35:42  19  	in_discount_amount IN NUMBER,
15:35:42  20  	in_taxes_amount    IN NUMBER
15:35:42  21  );
15:35:42  22  
15:35:42  23  /****************************************************/
15:35:42  24  
15:35:42  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:35:42  26  /*
15:35:42  27  Throws exceptions:
15:35:42  28  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  29  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  30  */
15:35:42  31  	in_invoice_id  IN NUMBER,
15:35:42  32  	out_result_set OUT SYS_REFCURSOR
15:35:42  33  );
15:35:42  34  
15:35:42  35  /****************************************************/
15:35:42  36  
15:35:42  37  PROCEDURE GET_LINE_ITEM_TAXES (
15:35:42  38  /*
15:35:42  39  Throws exceptions:
15:35:42  40  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  41  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  42  */
15:35:42  43  	in_line_item_id IN  NUMBER,
15:35:42  44  	out_result_set	OUT SYS_REFCURSOR
15:35:42  45  );
15:35:42  46  /****************************************************/
15:35:42  47  
15:35:42  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
15:35:42  49  /*
15:35:42  50  Throws exceptions:
15:35:42  51  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  52  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  53  */
15:35:42  54  	in_line_item_id IN  NUMBER,
15:35:42  55  	out_result_set	OUT SYS_REFCURSOR
15:35:42  56  );
15:35:42  57  
15:35:42  58  /****************************************************/
15:35:42  59  
15:35:42  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
15:35:42  61  /*
15:35:42  62  Throws exceptions:
15:35:42  63  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  64  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  65  */
15:35:42  66  	in_line_item_id     IN	NUMBER,
15:35:42  67  	out_amount	    OUT NUMBER
15:35:42  68  );
15:35:42  69  
15:35:42  70  /****************************************************/
15:35:42  71  
15:35:42  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
15:35:42  73  /*
15:35:42  74  Throws exceptions:
15:35:42  75  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  76  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  77  */
15:35:42  78  	in_line_item_id     IN	NUMBER
15:35:42  79  ) RETURN NUMBER;
15:35:42  80  
15:35:42  81  END PROCS_LINE_ITEMS_V17;
15:35:42  82  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE CREATE_LINE_ITEM (
15:35:42   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
15:35:42   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
15:35:42   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
15:35:42   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
15:35:42   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
15:35:42   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
15:35:42  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
15:35:42  11  );
15:35:42  12  
15:35:42  13  PROCEDURE UPDATE_LINE_ITEM (
15:35:42  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
15:35:42  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
15:35:42  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
15:35:42  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
15:35:42  18  );
15:35:42  19  
15:35:42  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
15:35:42  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
15:35:42  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
15:35:42  23  );
15:35:42  24  
15:35:42  25  END PROCS_LINE_ITEMS_CRU_V17;
15:35:42  26  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_LOCKING
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V17" AS
15:35:42   2  
15:35:42   3  /*
15:35:42   4  Removed by Sergey
15:35:42   5  10.12.2010
15:35:42   6  PROCEDURE INITIALIZE_SYSTEM;
15:35:42   7  
15:35:42   8  PROCEDURE INITIALIZE_ACCOUNT (
15:35:42   9  	in_account_id IN NUMBER
15:35:42  10  );
15:35:42  11  
15:35:42  12  PROCEDURE INITIALIZE_GROUP (
15:35:42  13  	in_group_id IN NUMBER
15:35:42  14  );
15:35:42  15  */
15:35:42  16  
15:35:42  17  PROCEDURE LOCK_ACCOUNT (
15:35:42  18  	in_group_id    IN NUMBER,
15:35:42  19  	in_lock_key    IN VARCHAR2,
15:35:42  20  	in_seconds_num IN NUMBER,
15:35:42  21  	in_created_by  IN VARCHAR2,
15:35:42  22  	in_reason      IN VARCHAR2
15:35:42  23  );
15:35:42  24  
15:35:42  25  PROCEDURE RELEASE_LOCK (
15:35:42  26  	in_group_id IN NUMBER,
15:35:42  27  	in_lock_key IN VARCHAR2
15:35:42  28  );
15:35:42  29  
15:35:42  30  END PROCS_LOCKING_V17;
15:35:42  31  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_NOTIFICATION
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_NOTIFICATION_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
15:35:42   4  /*
15:35:42   5  Throws exceptions:
15:35:42   6  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42   7  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42   8  */
15:35:42   9  	in_notification_type_name IN VARCHAR2,
15:35:42  10  	out_notification_type_id  OUT NUMBER
15:35:42  11  );
15:35:42  12  
15:35:42  13  PROCEDURE ADD_NOTIFICATION (
15:35:42  14  /*
15:35:42  15  Throws exceptions:
15:35:42  16  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  17  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  18  */
15:35:42  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
15:35:42  20  	in_recipient_group_id	 IN NUMBER,
15:35:42  21  	in_notification_type_id  IN NUMBER,
15:35:42  22  	in_date_to_notify	 IN DATE,
15:35:42  23  	in_email_template_params IN CLOB
15:35:42  24  );
15:35:42  25  
15:35:42  26  PROCEDURE GET_PENDING_NOTIFICATIONS (
15:35:42  27  /*
15:35:42  28  Throws exceptions:
15:35:42  29  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  30  */
15:35:42  31  	out_result_set OUT SYS_REFCURSOR
15:35:42  32  );
15:35:42  33  
15:35:42  34  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
15:35:42  35  /*
15:35:42  36  Throws exceptions:
15:35:42  37  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  38  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  39  */
15:35:42  40  	in_notification_id IN NUMBER
15:35:42  41  );
15:35:42  42  
15:35:42  43  PROCEDURE SET_NOTIFICATION_STATUS (
15:35:42  44  /*
15:35:42  45  Throws exceptions:
15:35:42  46  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  47  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  48  */
15:35:42  49  	in_notification_id	  IN NUMBER,
15:35:42  50  	in_notification_status_id IN NUMBER,
15:35:42  51  	in_error_message	  IN VARCHAR2
15:35:42  52  );
15:35:42  53  
15:35:42  54  PROCEDURE ADD_NOTIFICATION_FAILURE (
15:35:42  55  /*
15:35:42  56  Throws exceptions:
15:35:42  57  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  58  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  59  */
15:35:42  60  	in_notification_id IN NUMBER,
15:35:42  61  	in_error_message   IN VARCHAR2
15:35:42  62  );
15:35:42  63  
15:35:42  64  PROCEDURE LOCK_PENDING_NOTIFICATION (
15:35:42  65  /*
15:35:42  66  Result: 1 if notification locked
15:35:42  67  2 - else
15:35:42  68  */
15:35:42  69  	in_notification_id IN NUMBER,
15:35:42  70  	out_lock_status    OUT NUMBER
15:35:42  71  );
15:35:42  72  
15:35:42  73  PROCEDURE GET_NOTIFICATION_DATA (
15:35:42  74  	in_notification_id IN NUMBER,
15:35:42  75  	out_result_set	   OUT SYS_REFCURSOR
15:35:42  76  );
15:35:42  77  
15:35:42  78  END PROCS_NOTIFICATION_V17;
15:35:42  79  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.03
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_OFFER_CHAIN
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:35:42   4  /*
15:35:42   5  Throws exceptions:
15:35:42   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42   8  */
15:35:42   9  	  in_offer_chain_id IN	 NUMBER,
15:35:42  10  	  out_result_set    OUT  SYS_REFCURSOR
15:35:42  11  );
15:35:42  12  
15:35:42  13  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
15:35:42  14  /*
15:35:42  15  Throws exceptions:
15:35:42  16  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:42  17  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:42  18  */
15:35:42  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:35:42  20  	out_result_set	   OUT SYS_REFCURSOR
15:35:42  21  );
15:35:42  22  
15:35:42  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
15:35:42  24  /*
15:35:42  25  Throws exceptions:
15:35:42  26  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:42  27  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:42  28  */
15:35:42  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:35:42  30  	out_result_set	   OUT SYS_REFCURSOR
15:35:42  31  );
15:35:42  32  
15:35:42  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
15:35:42  34  /*
15:35:42  35  Throws exceptions:
15:35:42  36  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:42  37  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:42  38  */
15:35:42  39  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:35:42  40  	out_result_set	   OUT SYS_REFCURSOR
15:35:42  41  );
15:35:42  42  
15:35:42  43  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
15:35:42  44  /*
15:35:42  45  Throws exceptions (codes):
15:35:42  46  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  47  */
15:35:42  48  	in_product_id  IN  NUMBER,
15:35:42  49  	out_result_set OUT SYS_REFCURSOR
15:35:42  50  );
15:35:42  51  
15:35:42  52  PROCEDURE GET_OFFER_CHAIN_PRICE (
15:35:42  53  /*
15:35:42  54  Throws exceptions (codes):
15:35:42  55  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  56  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  57  */
15:35:42  58  	in_offer_chain_id IN NUMBER,
15:35:42  59  	out_price	  OUT NUMBER
15:35:42  60  );
15:35:42  61  
15:35:42  62  PROCEDURE GET_FIRST_OFFER(
15:35:42  63  /*
15:35:42  64  Throws exceptions (codes):
15:35:42  65  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  66  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  67  */
15:35:42  68  	in_offer_chain_id IN  NUMBER,
15:35:42  69  	out_offer_id	  OUT NUMBER
15:35:42  70  );
15:35:42  71  
15:35:42  72  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
15:35:42  73  /*
15:35:42  74  Throws exceptions (codes):
15:35:42  75  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  76  */
15:35:42  77  	out_result_set OUT SYS_REFCURSOR
15:35:42  78  );
15:35:42  79  
15:35:42  80  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
15:35:42  81  /*
15:35:42  82  Throws exceptions (codes):
15:35:42  83  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  84  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  85  */
15:35:42  86  	in_offer_chain_id IN NUMBER,
15:35:42  87  	out_result_set	  OUT SYS_REFCURSOR
15:35:42  88  );
15:35:42  89  
15:35:42  90  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
15:35:42  91  /*
15:35:42  92  Throws exceptions (codes):
15:35:42  93  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  94  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  95  */
15:35:42  96  	in_offer_chain_id	  IN NUMBER,
15:35:42  97  	in_offer_chain_start_date IN DATE
15:35:42  98  ) RETURN DATE;
15:35:42  99  
15:35:42 100  FUNCTION CALCULATE_OFFER_AMOUNT (
15:35:42 101  	in_offer_id IN NUMBER
15:35:42 102  ) RETURN NUMBER;
15:35:42 103  
15:35:42 104  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
15:35:42 105  	in_offer_chain_id IN NUMBER
15:35:42 106  ) RETURN NUMBER;
15:35:42 107  
15:35:42 108  FUNCTION GET_FIRST_OFFER_INDEX (
15:35:42 109  	in_offer_chain_id IN NUMBER
15:35:42 110  ) RETURN NUMBER;
15:35:42 111  
15:35:42 112  FUNCTION GET_NEXT_OFFER_INDEX (
15:35:42 113  /*
15:35:42 114  NULL, if not exists
15:35:42 115  */
15:35:42 116  	in_offer_chain_id	     IN NUMBER,
15:35:42 117  	in_offer_chain_current_index IN NUMBER
15:35:42 118  ) RETURN NUMBER;
15:35:42 119  
15:35:42 120  PROCEDURE P_GET_NEXT_OFFER_INDEX (
15:35:42 121  	in_offer_chain_id	     IN NUMBER,
15:35:42 122  	in_offer_chain_current_index IN NUMBER,
15:35:42 123  	out_next_offer_index	     OUT NUMBER
15:35:42 124  );
15:35:42 125  
15:35:42 126  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
15:35:42 127  	in_license_id		     IN NUMBER,
15:35:42 128  	in_offer_chain_current_index IN NUMBER,
15:35:42 129  	out_next_offer_index	     OUT NUMBER
15:35:42 130  );
15:35:42 131  
15:35:42 132  FUNCTION IS_OFFER_INDEX_EXISTS (
15:35:42 133  /*
15:35:42 134  1 - exists
15:35:42 135  0 - not exists
15:35:42 136  */
15:35:42 137  	in_offer_chain_id	   IN NUMBER,
15:35:42 138  	in_offer_chain_offer_index IN NUMBER
15:35:42 139  ) RETURN NUMBER;
15:35:42 140  
15:35:42 141  PROCEDURE GET_OFFER_LENGTH (
15:35:42 142  	in_offer_id IN NUMBER,
15:35:42 143  	out_years   OUT NUMBER,
15:35:42 144  	out_months  OUT NUMBER,
15:35:42 145  	out_days    OUT NUMBER
15:35:42 146  );
15:35:42 147  
15:35:42 148  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
15:35:42 149  	in_offer_id   IN NUMBER,
15:35:42 150  	in_start_date IN DATE DEFAULT SYSDATE,
15:35:42 151  	out_days      OUT NUMBER
15:35:42 152  );
15:35:42 153  
15:35:42 154  PROCEDURE GET_OFFER_PRODUCTS (
15:35:42 155  /*
15:35:42 156  Throws exceptions (codes):
15:35:42 157  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42 158  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 159  */
15:35:42 160  	in_offer_id    IN NUMBER,
15:35:42 161  	out_result_set OUT SYS_REFCURSOR
15:35:42 162  );
15:35:42 163  
15:35:42 164  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
15:35:42 165  /*
15:35:42 166  Throws exceptions (codes):
15:35:42 167  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42 168  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 169  */
15:35:42 170  	in_offer_chain_id IN NUMBER,
15:35:42 171  	out_result_set	  OUT SYS_REFCURSOR
15:35:42 172  );
15:35:42 173  
15:35:42 174  FUNCTION CHECK_FOR_SAME_PRODUCTS (
15:35:42 175  /*
15:35:42 176  Throws exceptions (codes):
15:35:42 177  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42 178  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 179  Returns:
15:35:42 180  GLOBAL_CONSTANTS_V17.TRUE if there are at least one same product
15:35:42 181  GLOBAL_CONSTANTS_V17.FALSE else
15:35:42 182  */
15:35:42 183  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
15:35:42 184  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
15:35:42 185  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:42 186  ) RETURN NUMBER;
15:35:42 187  
15:35:42 188  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
15:35:42 189  /*
15:35:42 190  Throws exceptions (codes):
15:35:42 191  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 192  Returns:
15:35:42 193  GLOBAL_CONSTANTS_V17.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
15:35:42 194  GLOBAL_CONSTANTS_V17.FALSE else
15:35:42 195  */
15:35:42 196  	in_offer_chain_id IN NUMBER
15:35:42 197  ) RETURN NUMBER;
15:35:42 198  
15:35:42 199  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
15:35:42 200  /*
15:35:42 201  Throws exceptions (codes):
15:35:42 202  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 203  */
15:35:42 204  	in_offer_chain_id IN NUMBER
15:35:42 205  ) RETURN NUMBER;
15:35:42 206  
15:35:42 207  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
15:35:42 208  /*
15:35:42 209  Throws exceptions (codes):
15:35:42 210  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42 211  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 212  */
15:35:42 213  	in_offer_chain_id   IN NUMBER,
15:35:42 214  	in_eligibility_name IN VARCHAR2,
15:35:42 215  	out_result_set	    OUT SYS_REFCURSOR
15:35:42 216  );
15:35:42 217  
15:35:42 218  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
15:35:42 219  /*
15:35:42 220  Throws exceptions (codes):
15:35:42 221  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 222  */
15:35:42 223  	in_offer_chain_ids  IN VARCHAR2,
15:35:42 224  	in_eligibility_name IN VARCHAR2,
15:35:42 225  	out_result_set	    OUT SYS_REFCURSOR
15:35:42 226  );
15:35:42 227  
15:35:42 228  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:35:42 229  /*
15:35:42 230  Throws exceptions (codes):
15:35:42 231  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42 232  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 233  */
15:35:42 234  	in_offer_chain_id IN NUMBER,
15:35:42 235  	in_meta_data_name IN VARCHAR2,
15:35:42 236  	out_result_set	  OUT SYS_REFCURSOR
15:35:42 237  );
15:35:42 238  
15:35:42 239  PROCEDURE GET_OFFER_CHAINS_META_DATA (
15:35:42 240  /*
15:35:42 241  Throws exceptions (codes):
15:35:42 242  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 243  */
15:35:42 244  	in_offer_chain_ids IN VARCHAR2,
15:35:42 245  	in_meta_data_name  IN VARCHAR2,
15:35:42 246  	out_result_set	   OUT SYS_REFCURSOR
15:35:42 247  );
15:35:42 248  
15:35:42 249  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
15:35:42 250  /*
15:35:42 251  Throws exceptions (codes):
15:35:42 252  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42 253  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 254  */
15:35:42 255  	in_offer_id    IN NUMBER,
15:35:42 256  	out_result_set OUT SYS_REFCURSOR
15:35:42 257  );
15:35:42 258  
15:35:42 259  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
15:35:42 260  /*
15:35:42 261  Throws exceptions (codes):
15:35:42 262  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42 263  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 264  */
15:35:42 265  	in_product_offering_id IN NUMBER,
15:35:42 266  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
15:35:42 267  	out_result_set	       OUT SYS_REFCURSOR
15:35:42 268  );
15:35:42 269  
15:35:42 270  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
15:35:42 271  /*
15:35:42 272  Throws exceptions (codes):
15:35:42 273  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42 274  */
15:35:42 275  	in_offer_chain_1 IN NUMBER,
15:35:42 276  	in_offer_chain_2 IN NUMBER,
15:35:42 277  	out_result_set	OUT SYS_REFCURSOR
15:35:42 278  );
15:35:42 279  
15:35:42 280  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
15:35:42 281  	in_offer_chain_id IN NUMBER,
15:35:42 282  	in_meta_data_name IN VARCHAR2,
15:35:42 283  	out_value	  OUT VARCHAR2
15:35:42 284  );
15:35:42 285  
15:35:42 286  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
15:35:42 287  	in_offer_chain_id   IN NUMBER,
15:35:42 288  	in_eligibility_name IN VARCHAR2,
15:35:42 289  	out_value	    OUT VARCHAR2
15:35:42 290  );
15:35:42 291  
15:35:42 292  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
15:35:42 293  	in_offer_id    IN NUMBER,
15:35:42 294  	out_result_set OUT SYS_REFCURSOR
15:35:42 295  );
15:35:42 296  
15:35:42 297  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
15:35:42 298  	in_meta_data_name  IN VARCHAR2,
15:35:42 299  	in_meta_data_value IN VARCHAR2,
15:35:42 300  	out_result_set	   OUT SYS_REFCURSOR
15:35:42 301  );
15:35:42 302  
15:35:42 303  PROCEDURE GET_ALL_META_DATA (
15:35:42 304  	in_offer_chain_id IN NUMBER,
15:35:42 305  	out_result_set	  OUT SYS_REFCURSOR
15:35:42 306  );
15:35:42 307  
15:35:42 308  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
15:35:42 309  	in_group_id	  IN NUMBER,
15:35:42 310  	in_offer_chain_id IN NUMBER,
15:35:42 311  	out_is_eligible   OUT NUMBER,
15:35:42 312  	out_concurrent_subscription_id OUT NUMBER
15:35:42 313  );
15:35:42 314  
15:35:42 315  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:35:42 316  	in_offer_chain_id	 IN NUMBER,
15:35:42 317  	in_action_name		 IN VARCHAR2,
15:35:42 318  	out_notification_type_id OUT NUMBER
15:35:42 319  );
15:35:42 320  
15:35:42 321  END PROCS_OFFER_CHAIN_V17;
15:35:42 322  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.05
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
15:35:42   2  AS
15:35:42   3  
15:35:42   4  ----
15:35:42   5  --------------------------------------------------------------------------------
15:35:42   6  ----
15:35:42   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
15:35:42   8  	      returned from the previous call and store the result for the
15:35:42   9  	      next call.
15:35:42  10  	     This method will identify and create new Sync Events from trigger activity data */
15:35:42  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
15:35:42  12  ----
15:35:42  13  --------------------------------------------------------------------------------
15:35:42  14  ----
15:35:42  15  	  /* Internal logic call may need to be used to fix poller data */
15:35:42  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
15:35:42  17  ----
15:35:42  18  --------------------------------------------------------------------------------
15:35:42  19  ----
15:35:42  20  	  /* User request for sync events. Params should be hard-coded in the application
15:35:42  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
15:35:42  22  	      skipped. Last read time is logged.
15:35:42  23  	     Params:
15:35:42  24  		  set_maximum: Size of each transfer set
15:35:42  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
15:35:42  26  	     Returns:
15:35:42  27  		  set_id: Transfer set id, duplicated for all entries
15:35:42  28  		  group_id: regi_id value
15:35:42  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
15:35:42  30  	  */
15:35:42  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
15:35:42  32  ----
15:35:42  33  --------------------------------------------------------------------------------
15:35:42  34  ----
15:35:42  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
15:35:42  36  	      single confirmation per transfer set.
15:35:42  37  	  */
15:35:42  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
15:35:42  39  ----
15:35:42  40  --------------------------------------------------------------------------------
15:35:42  41  ----
15:35:42  42  	  procedure SET_LAST_RUN(ts in timestamp);
15:35:42  43  	  procedure GET_LAST_RUN(ts out timestamp);
15:35:42  44  END PROCS_POLLING_SYNC;
15:35:42  45  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.01
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_PROCESS_RETRY_THROTTLE
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_PROCESS_RETRY_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE LOG_RETRY(
15:35:42   4  	  in_process_name IN VARCHAR2,
15:35:42   5  	  in_generic_id   IN NUMBER,
15:35:42   6  	  in_date	  IN VARCHAR2,
15:35:42   7  	  out_success	   OUT NUMBER
15:35:42   8  );
15:35:42   9  
15:35:42  10  PROCEDURE LOG_RETRY_DATE(
15:35:42  11  	  in_process_name IN VARCHAR2,
15:35:42  12  	  in_generic_id   IN NUMBER,
15:35:42  13  	  in_date	  IN DATE,
15:35:42  14  	  out_success	   OUT NUMBER
15:35:42  15  );
15:35:42  16  
15:35:42  17  PROCEDURE DELETE_RETRY(
15:35:42  18  	  in_process_name IN VARCHAR2,
15:35:42  19  	  in_remove_minutes  IN NUMBER
15:35:42  20  );
15:35:42  21  
15:35:42  22  PROCEDURE GET_SYSDATE (
15:35:42  23  	  out_date OUT VARCHAR2
15:35:42  24  );
15:35:42  25  
15:35:42  26  END PROCS_PROCESS_RETRY_V17;
15:35:42  27  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_PRODUCT
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE GET_PRODUCTS (
15:35:42   4  /*
15:35:42   5  Throws exceptions:
15:35:42   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42   7  */
15:35:42   8  	in_status_id   IN  NUMBER,
15:35:42   9  	out_result_set OUT SYS_REFCURSOR
15:35:42  10  );
15:35:42  11  
15:35:42  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
15:35:42  13  /*
15:35:42  14  Throws exceptions:
15:35:42  15  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  16  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  17  */
15:35:42  18  	in_product_offering_id	IN NUMBER,
15:35:42  19  	out_result_set OUT SYS_REFCURSOR
15:35:42  20  );
15:35:42  21  
15:35:42  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
15:35:42  23  /*
15:35:42  24  Throws exceptions:
15:35:42  25  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:42  26  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:42  27  */
15:35:42  28  	in_product_id	    IN NUMBER,
15:35:42  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
15:35:42  30  	out_result_set	    OUT SYS_REFCURSOR
15:35:42  31  );
15:35:42  32  
15:35:42  33  PROCEDURE GET_PRODUCT_BY_ID (
15:35:42  34  	in_product_id  IN NUMBER,
15:35:42  35  	out_result_set OUT SYS_REFCURSOR
15:35:42  36  );
15:35:42  37  
15:35:42  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
15:35:42  39  	in_line_item_id IN NUMBER,
15:35:42  40  	out_result_set	OUT SYS_REFCURSOR
15:35:42  41  );
15:35:42  42  
15:35:42  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
15:35:42  44  	in_product_offering_id IN NUMBER,
15:35:42  45  	out_result_set	OUT SYS_REFCURSOR
15:35:42  46  );
15:35:42  47  
15:35:42  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
15:35:42  49  	in_product_offering_id IN NUMBER,
15:35:42  50  	out_result_set	       OUT SYS_REFCURSOR
15:35:42  51  );
15:35:42  52  
15:35:42  53  END PROCS_PRODUCT_V17;
15:35:42  54  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:42 SQL> 
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
15:35:42 SQL> --------------------------------------------------------------------------------
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V17" AS
15:35:42   2  
15:35:42   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
15:35:42   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
15:35:42   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
15:35:42   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:42   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
15:35:42   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
15:35:42   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
15:35:42  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
15:35:42  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
15:35:42  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:35:42  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
15:35:42  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
15:35:42  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
15:35:42  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:35:42  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
15:35:42  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
15:35:42  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
15:35:42  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
15:35:42  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
15:35:42  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
15:35:42  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
15:35:42  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
15:35:42  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
15:35:42  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
15:35:42  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
15:35:42  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
15:35:42  29  );
15:35:42  30  
15:35:42  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
15:35:42  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
15:35:42  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
15:35:42  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
15:35:42  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
15:35:42  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
15:35:42  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:35:42  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
15:35:42  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
15:35:42  40  );
15:35:42  41  
15:35:42  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
15:35:42  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
15:35:42  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
15:35:42  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:42  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
15:35:42  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
15:35:42  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
15:35:42  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
15:35:42  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
15:35:42  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
15:35:42  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
15:35:42  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
15:35:42  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
15:35:42  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
15:35:42  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
15:35:42  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
15:35:42  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
15:35:42  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
15:35:42  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
15:35:42  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
15:35:42  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
15:35:42  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
15:35:42  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
15:35:42  65  );
15:35:42  66  
15:35:42  67  PROCEDURE CREATE_CPT_EXCEPTION (
15:35:42  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
15:35:42  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
15:35:42  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:42  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
15:35:42  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
15:35:42  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
15:35:42  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
15:35:42  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
15:35:42  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
15:35:42  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
15:35:42  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
15:35:42  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:35:42  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:35:42  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
15:35:42  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
15:35:42  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
15:35:42  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
15:35:42  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
15:35:42  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
15:35:42  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
15:35:42  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
15:35:42  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
15:35:42  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
15:35:42  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
15:35:42  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
15:35:42  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
15:35:42  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
15:35:42  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
15:35:42  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
15:35:42  97  );
15:35:42  98  
15:35:42  99  PROCEDURE CREATE_CPT_DEPOSIT (
15:35:42 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
15:35:42 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
15:35:42 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:42 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
15:35:42 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
15:35:42 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
15:35:42 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
15:35:42 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
15:35:42 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
15:35:42 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
15:35:42 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
15:35:42 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:35:42 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:35:42 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
15:35:42 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
15:35:42 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
15:35:42 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
15:35:42 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
15:35:42 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
15:35:42 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
15:35:42 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
15:35:42 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
15:35:42 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
15:35:42 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
15:35:42 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
15:35:42 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
15:35:42 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
15:35:42 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
15:35:42 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
15:35:42 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
15:35:42 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
15:35:42 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
15:35:42 132  );
15:35:42 133  
15:35:42 134  PROCEDURE CREATE_PP_SETTLEMENT (
15:35:42 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
15:35:42 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
15:35:42 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:42 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
15:35:42 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
15:35:42 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
15:35:42 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
15:35:42 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
15:35:42 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
15:35:42 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
15:35:42 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
15:35:42 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
15:35:42 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
15:35:42 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
15:35:42 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
15:35:42 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
15:35:42 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
15:35:42 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
15:35:42 153  );
15:35:42 154  
15:35:42 155  PROCEDURE CREATE_PP_DISPUTE (
15:35:42 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
15:35:42 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
15:35:42 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:42 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
15:35:42 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
15:35:42 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
15:35:42 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
15:35:42 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
15:35:42 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
15:35:42 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
15:35:42 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
15:35:42 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
15:35:42 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
15:35:42 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
15:35:42 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
15:35:42 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
15:35:42 172  );
15:35:42 173  
15:35:42 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
15:35:42 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
15:35:42 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
15:35:42 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:42 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
15:35:42 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
15:35:42 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
15:35:42 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
15:35:42 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
15:35:42 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
15:35:42 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
15:35:42 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
15:35:42 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
15:35:42 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
15:35:42 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
15:35:42 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
15:35:42 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
15:35:42 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
15:35:42 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
15:35:42 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
15:35:42 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
15:35:42 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
15:35:42 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
15:35:42 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
15:35:42 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
15:35:42 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
15:35:42 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
15:35:42 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
15:35:42 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
15:35:42 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
15:35:42 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
15:35:42 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
15:35:42 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
15:35:42 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
15:35:42 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
15:35:42 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
15:35:42 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
15:35:42 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
15:35:42 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
15:35:42 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
15:35:42 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
15:35:42 215  );
15:35:42 216  
15:35:42 217  PROCEDURE GET_EXT_SOURCE_LOG (
15:35:42 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:35:42 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
15:35:42 220  	out_result_set		 OUT SYS_REFCURSOR
15:35:42 221  );
15:35:42 222  
15:35:42 223  FUNCTION CHECK_EXT_SOURCE_LOG (
15:35:42 224  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:35:42 225  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
15:35:42 226  ) RETURN NUMBER;
15:35:42 227  
15:35:42 228  PROCEDURE CREATE_AMEX_CHARGEBACK (
15:35:42 229  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
15:35:42 230  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
15:35:42 231  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
15:35:42 232  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
15:35:42 233  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
15:35:42 234  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
15:35:42 235  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
15:35:42 236  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
15:35:42 237  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
15:35:42 238  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
15:35:42 239  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
15:35:42 240  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
15:35:42 241  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
15:35:42 242  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
15:35:42 243  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
15:35:42 244  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
15:35:42 245  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
15:35:42 246  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
15:35:42 247  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
15:35:42 248  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
15:35:42 249  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
15:35:42 250  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
15:35:42 251  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
15:35:42 252  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
15:35:42 253  );
15:35:42 254  
15:35:42 255  END PROCS_RECONCILIATION_CRU_V17;
15:35:42 256  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.05
15:35:42 SQL> 
15:35:42 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
15:35:42   2  
15:35:42   3  ----
15:35:42   4  --------------------------------------------------------------------------------
15:35:42   5  ----
15:35:42   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42   7  ----
15:35:42   8  --------------------------------------------------------------------------------
15:35:42   9  ----
15:35:42  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  11  ----
15:35:42  12  --------------------------------------------------------------------------------
15:35:42  13  ----
15:35:42  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  15  ----
15:35:42  16  --------------------------------------------------------------------------------
15:35:42  17  ----
15:35:42  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  19  ----
15:35:42  20  --------------------------------------------------------------------------------
15:35:42  21  ----
15:35:42  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  23  ----
15:35:42  24  --------------------------------------------------------------------------------
15:35:42  25  ----
15:35:42  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  27  ----
15:35:42  28  --------------------------------------------------------------------------------
15:35:42  29  ----
15:35:42  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  31  ----
15:35:42  32  --------------------------------------------------------------------------------
15:35:42  33  ----
15:35:42  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  35  ----
15:35:42  36  --------------------------------------------------------------------------------
15:35:42  37  ----
15:35:42  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  39  ----
15:35:42  40  --------------------------------------------------------------------------------
15:35:42  41  ----
15:35:42  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  43  ----
15:35:42  44  --------------------------------------------------------------------------------
15:35:42  45  ----
15:35:42  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  47  ----
15:35:42  48  --------------------------------------------------------------------------------
15:35:42  49  ----
15:35:42  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  51  ----
15:35:42  52  --------------------------------------------------------------------------------
15:35:42  53  ----
15:35:42  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  55  ----
15:35:42  56  --------------------------------------------------------------------------------
15:35:42  57  ----
15:35:42  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  59  ----
15:35:42  60  --------------------------------------------------------------------------------
15:35:42  61  ----
15:35:42  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  63  ----
15:35:42  64  --------------------------------------------------------------------------------
15:35:42  65  ----
15:35:42  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  67  ----
15:35:42  68  --------------------------------------------------------------------------------
15:35:42  69  ----
15:35:42  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  71  ----
15:35:42  72  --------------------------------------------------------------------------------
15:35:42  73  ----
15:35:42  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  75  ----
15:35:42  76  --------------------------------------------------------------------------------
15:35:42  77  ----
15:35:42  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  79  ----
15:35:42  80  --------------------------------------------------------------------------------
15:35:42  81  ----
15:35:42  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  83  ----
15:35:42  84  --------------------------------------------------------------------------------
15:35:42  85  ----
15:35:42  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  87  ----
15:35:42  88  --------------------------------------------------------------------------------
15:35:42  89  ----
15:35:42  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  91  ----
15:35:42  92  --------------------------------------------------------------------------------
15:35:42  93  ----
15:35:42  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  95  ----
15:35:42  96  --------------------------------------------------------------------------------
15:35:42  97  ----
15:35:42  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42  99  ----
15:35:42 100  --------------------------------------------------------------------------------
15:35:42 101  ----
15:35:42 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 103  ----
15:35:42 104  --------------------------------------------------------------------------------
15:35:42 105  ----
15:35:42 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 107  ----
15:35:42 108  --------------------------------------------------------------------------------
15:35:42 109  ----
15:35:42 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 111  ----
15:35:42 112  --------------------------------------------------------------------------------
15:35:42 113  ----
15:35:42 114  /**/
15:35:42 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 116  ----
15:35:42 117  --------------------------------------------------------------------------------
15:35:42 118  ----
15:35:42 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 120  ----
15:35:42 121  --------------------------------------------------------------------------------
15:35:42 122  ----
15:35:42 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 124  ----
15:35:42 125  --------------------------------------------------------------------------------
15:35:42 126  ----
15:35:42 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 128  ----
15:35:42 129  --------------------------------------------------------------------------------
15:35:42 130  ----
15:35:42 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 132  ----
15:35:42 133  --------------------------------------------------------------------------------
15:35:42 134  ----
15:35:42 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 136  ----
15:35:42 137  --------------------------------------------------------------------------------
15:35:42 138  ----
15:35:42 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 140  ----
15:35:42 141  --------------------------------------------------------------------------------
15:35:42 142  ----
15:35:42 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 144  ----
15:35:42 145  --------------------------------------------------------------------------------
15:35:42 146  ----
15:35:42 147  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 148  ----
15:35:42 149  --------------------------------------------------------------------------------
15:35:42 150  ----
15:35:42 151  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 152  ----
15:35:42 153  --------------------------------------------------------------------------------
15:35:42 154  ----
15:35:42 155  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:35:42 156  ----
15:35:42 157  --------------------------------------------------------------------------------
15:35:42 158  ----
15:35:42 159  /**/
15:35:42 160  END PROCS_REPORTING;
15:35:42 161  .
15:35:42 SQL> /

Package created.

Elapsed: 00:00:00.59
15:35:43 SQL> 
15:35:43 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
15:35:43 SQL> 
15:35:43 SQL> whenever sqlerror exit failure
15:35:43 SQL> 
15:35:43 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
15:35:43   2  
15:35:43   3  ----
15:35:43   4  --------------------------------------------------------------------------------
15:35:43   5  ----
15:35:43   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
15:35:43   7  	      return line_item.amount%type;
15:35:43   8  ----
15:35:43   9  --------------------------------------------------------------------------------
15:35:43  10  ----
15:35:43  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
15:35:43  12  	      return line_item.amount%type;
15:35:43  13  ----
15:35:43  14  --------------------------------------------------------------------------------
15:35:43  15  ----
15:35:43  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
15:35:43  17  	      in_lower_date_bound DATE,
15:35:43  18  	      in_upper_date_bound DATE,
15:35:43  19  	      out_lic_cur OUT sys_refcursor
15:35:43  20  	  );
15:35:43  21  ----
15:35:43  22  --------------------------------------------------------------------------------
15:35:43  23  ----
15:35:43  24  END PROCS_REPORTING_1A;
15:35:43  25  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.04
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_REPORTS
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V5" AS
15:35:43   2  
15:35:43   3  FUNCTION GET_PRODUCT_NAMES(
15:35:43   4  	in_offer_id IN NUMBER
15:35:43   5  ) RETURN VARCHAR2;
15:35:43   6  
15:35:43   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
15:35:43   8  	in_start_date  IN DATE,
15:35:43   9  	in_end_date    IN DATE,
15:35:43  10  	out_result_set OUT SYS_REFCURSOR
15:35:43  11  );
15:35:43  12  
15:35:43  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
15:35:43  14  	in_offer_id	       IN NUMBER,
15:35:43  15  	in_start_date	       IN DATE,
15:35:43  16  	in_end_date	       IN DATE,
15:35:43  17  	out_new_purchasers_num OUT NUMBER,
15:35:43  18  	out_renewals_num       OUT NUMBER,
15:35:43  19  	out_product_names      OUT VARCHAR2,
15:35:43  20  	out_total_dollar_value OUT NUMBER,
15:35:43  21  	out_unique_purchasers  OUT NUMBER
15:35:43  22  );
15:35:43  23  
15:35:43  24  /*
15:35:43  25  FUNCTIONS FOR THE FLASH REPORT
15:35:43  26  */
15:35:43  27  
15:35:43  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
15:35:43  29  	in_offer_id	       IN NUMBER,
15:35:43  30  	in_start_date	       IN DATE,
15:35:43  31  	in_end_date	       IN DATE
15:35:43  32  ) RETURN NUMBER;
15:35:43  33  
15:35:43  34  FUNCTION FLR_RENEWALS_NUM (
15:35:43  35  	in_offer_id	       IN NUMBER,
15:35:43  36  	in_start_date	       IN DATE,
15:35:43  37  	in_end_date	       IN DATE
15:35:43  38  ) RETURN NUMBER;
15:35:43  39  
15:35:43  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
15:35:43  41  	in_offer_id	       IN NUMBER,
15:35:43  42  	in_start_date	       IN DATE,
15:35:43  43  	in_end_date	       IN DATE
15:35:43  44  ) RETURN NUMBER;
15:35:43  45  
15:35:43  46  FUNCTION FLR_UNIQUE_PURCHASERS (
15:35:43  47  	in_offer_id	       IN NUMBER,
15:35:43  48  	in_start_date	       IN DATE,
15:35:43  49  	in_end_date	       IN DATE
15:35:43  50  ) RETURN NUMBER;
15:35:43  51  
15:35:43  52  END PROCS_REPORTS_V5;
15:35:43  53  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.06
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_SUBSCRIPTION
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE START_SUBSCRIPTION_CREATION (
15:35:43   4  	in_group_id	      IN NUMBER,
15:35:43   5  	in_created_by	      IN VARCHAR2,
15:35:43   6  	in_offer_chain_id     IN NUMBER,
15:35:43   7  	in_instrument_type_id IN NUMBER,
15:35:43   8  	in_instrument_id      IN NUMBER,
15:35:43   9  	in_agent_id	      IN NUMBER,
15:35:43  10  	in_note 	      IN VARCHAR2,
15:35:43  11  	out_subscription_id   OUT NUMBER,
15:35:43  12  	out_invoice_id	      OUT NUMBER,
15:35:43  13  	out_new_license_id    OUT NUMBER,
15:35:43  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.TRUE
15:35:43  15  );
15:35:43  16  
15:35:43  17  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
15:35:43  18  	in_subscription_id    IN NUMBER,
15:35:43  19  	in_invoice_id	      IN NUMBER,
15:35:43  20  	in_instrument_type_id IN NUMBER,
15:35:43  21  	in_instrument_id      IN NUMBER,
15:35:43  22  	in_created_by	      IN VARCHAR2
15:35:43  23  );
15:35:43  24  
15:35:43  25  PROCEDURE SUSPEND_SUBSCRIPTION(
15:35:43  26  /*
15:35:43  27  Throws exceptions:
15:35:43  28  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  29  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43  30  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  31  */
15:35:43  32  	  in_subs_id	IN NUMBER ,
15:35:43  33  	  in_updated_by IN VARCHAR2
15:35:43  34  );
15:35:43  35  
15:35:43  36  PROCEDURE REACTIVATE_SUBSCRIPTION (
15:35:43  37  	in_subscription_id IN  NUMBER,
15:35:43  38  	in_updated_by	   IN  VARCHAR2
15:35:43  39  );
15:35:43  40  
15:35:43  41  PROCEDURE GET_SUBSCRIPTION_INFO (
15:35:43  42  /*
15:35:43  43  Throws exceptions:
15:35:43  44  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  45  */
15:35:43  46  	  in_subscription_id IN  NUMBER,
15:35:43  47  	  out_result_set      OUT SYS_REFCURSOR
15:35:43  48  );
15:35:43  49  
15:35:43  50  PROCEDURE GET_SUBSCRIPTION_INVOICES (
15:35:43  51  /*
15:35:43  52  Throws exceptions:
15:35:43  53  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43  54  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  55  */
15:35:43  56  	in_subscription_id  IN	NUMBER,
15:35:43  57  	out_result_set	    OUT SYS_REFCURSOR
15:35:43  58  );
15:35:43  59  
15:35:43  60  PROCEDURE GET_SUBSCRIPTION_NOTES (
15:35:43  61  /*
15:35:43  62  Throws exceptions:
15:35:43  63  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  64  */
15:35:43  65  	in_subscription_id  IN	NUMBER,
15:35:43  66  	out_result_set	    OUT SYS_REFCURSOR
15:35:43  67  );
15:35:43  68  
15:35:43  69  PROCEDURE ANNOTATE_SUBSCRIPTION (
15:35:43  70  /*
15:35:43  71  Throws exceptions:
15:35:43  72  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43  73  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  74  */
15:35:43  75  	in_subscription_id IN  NUMBER,
15:35:43  76  	in_agent_id	   IN  NUMBER,
15:35:43  77  	in_note 	   IN  VARCHAR2,
15:35:43  78  	in_created_by	   IN  VARCHAR2
15:35:43  79  );
15:35:43  80  
15:35:43  81  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
15:35:43  82  /*
15:35:43  83  Throws exceptions:
15:35:43  84  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  85  */
15:35:43  86  	out_result_set OUT SYS_REFCURSOR
15:35:43  87  );
15:35:43  88  
15:35:43  89  FUNCTION GET_RENEWAL_DATE (
15:35:43  90  /*
15:35:43  91  Throws exceptions:
15:35:43  92  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  93  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  94  */
15:35:43  95  	in_subscription_id in NUMBER
15:35:43  96  ) RETURN DATE;
15:35:43  97  
15:35:43  98  FUNCTION GET_RECENT_CHARGE (
15:35:43  99  /*
15:35:43 100  Throws exceptions:
15:35:43 101  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 102  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 103  */
15:35:43 104  	in_subscription_id IN NUMBER
15:35:43 105  ) RETURN NUMBER;
15:35:43 106  
15:35:43 107  FUNCTION GET_BILLING_CYCLE (
15:35:43 108  /*
15:35:43 109  Throws exceptions:
15:35:43 110  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 111  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 112  */
15:35:43 113  	in_subscription_id IN NUMBER
15:35:43 114  ) RETURN VARCHAR2;
15:35:43 115  
15:35:43 116  PROCEDURE REFUND_SUBSCRIPTION (
15:35:43 117  /*
15:35:43 118  Throws exceptions:
15:35:43 119  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 120  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 121  */
15:35:43 122  	in_subscription_id IN NUMBER,
15:35:43 123  	in_invoice_id	   IN NUMBER,
15:35:43 124  	in_refund_amount   IN NUMBER,
15:35:43 125  	in_note 	   IN VARCHAR2,
15:35:43 126  	in_created_by	   IN VARCHAR2,
15:35:43 127  	out_charge_id	   OUT NUMBER
15:35:43 128  );
15:35:43 129  
15:35:43 130  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
15:35:43 131  /*
15:35:43 132  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 133  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 134  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 135  */
15:35:43 136  	in_subscription_id	IN NUMBER,
15:35:43 137  	in_effective_start_date IN DATE,
15:35:43 138  	in_effective_end_date	IN DATE,
15:35:43 139  	in_note 		IN VARCHAR2,
15:35:43 140  	in_updated_by		IN VARCHAR2
15:35:43 141  );
15:35:43 142  
15:35:43 143  FUNCTION CALC_SUBSCRIPTION_END_DATE (
15:35:43 144  /*
15:35:43 145  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 146  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 147  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 148  Returns:
15:35:43 149  NULL if it is impossible to calculate end date (for example,
15:35:43 150  	offer chain includes offer with infinity recurrences number)
15:35:43 151  DATE else
15:35:43 152  */
15:35:43 153  	in_subscription_id IN NUMBER
15:35:43 154  ) RETURN DATE;
15:35:43 155  
15:35:43 156  PROCEDURE HAS_FUTURE_LICENSE (
15:35:43 157  /*
15:35:43 158  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 159  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 160  */
15:35:43 161  	in_license_id IN  NUMBER,
15:35:43 162  	out_result    OUT NUMBER
15:35:43 163  );
15:35:43 164  
15:35:43 165  PROCEDURE CLOSE_SUBSCRIPTION (
15:35:43 166  	in_subscription_id IN NUMBER,
15:35:43 167  	in_updated_by	   IN VARCHAR2
15:35:43 168  );
15:35:43 169  
15:35:43 170  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
15:35:43 171  	in_subscription_id IN NUMBER,
15:35:43 172  	out_group_id	   OUT NUMBER
15:35:43 173  );
15:35:43 174  
15:35:43 175  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
15:35:43 176  /*
15:35:43 177  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 178  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 179  */
15:35:43 180  	in_subscription_id IN NUMBER,
15:35:43 181  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 182  );
15:35:43 183  
15:35:43 184  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
15:35:43 185  /*
15:35:43 186  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 187  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 188  */
15:35:43 189  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
15:35:43 190  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
15:35:43 191  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
15:35:43 192  );
15:35:43 193  
15:35:43 194  PROCEDURE GET_ACTIVE_INVOICES_IDS (
15:35:43 195  /*
15:35:43 196  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 197  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 198  */
15:35:43 199  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
15:35:43 200  	in_subscription_id IN NUMBER,
15:35:43 201  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 202  );
15:35:43 203  
15:35:43 204  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
15:35:43 205  /*
15:35:43 206  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 207  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 208  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 209  */
15:35:43 210  	in_invoice_id	     IN NUMBER,
15:35:43 211  	in_updated_by	     IN VARCHAR2,
15:35:43 212  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:43 213  );
15:35:43 214  
15:35:43 215  PROCEDURE FINALIZE_CANCELATION (
15:35:43 216  /*
15:35:43 217  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 218  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 219  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 220  */
15:35:43 221  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
15:35:43 222  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
15:35:43 223  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
15:35:43 224  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:35:43 225  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:35:43 226  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
15:35:43 227  	in_subscription_id    IN NUMBER,
15:35:43 228  	in_cancelation_reason IN VARCHAR2,
15:35:43 229  	in_cancelation_date   IN DATE,
15:35:43 230  	in_note 	      IN VARCHAR2,
15:35:43 231  	in_agent_id	      IN NUMBER,
15:35:43 232  	in_updated_by	      IN VARCHAR2
15:35:43 233  );
15:35:43 234  
15:35:43 235  PROCEDURE FINALIZE_FALSE_START (
15:35:43 236  /*
15:35:43 237  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 238  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 239  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 240  */
15:35:43 241  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
15:35:43 242  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
15:35:43 243  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:35:43 244  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:35:43 245  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
15:35:43 246  	in_subscription_id    IN NUMBER,
15:35:43 247  	in_cancelation_date   IN DATE,
15:35:43 248  	in_note 	      IN VARCHAR2,
15:35:43 249  	in_agent_id	      IN NUMBER,
15:35:43 250  	in_updated_by	      IN VARCHAR2
15:35:43 251  );
15:35:43 252  
15:35:43 253  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
15:35:43 254  	in_subscription_id IN NUMBER
15:35:43 255  ) RETURN NUMBER;
15:35:43 256  
15:35:43 257  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
15:35:43 258  /*
15:35:43 259  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 260  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 261  */
15:35:43 262  	in_subscription_id IN NUMBER,
15:35:43 263  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 264  );
15:35:43 265  
15:35:43 266  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
15:35:43 267  /*
15:35:43 268  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 269  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 270  */
15:35:43 271  	in_subscription_id IN NUMBER,
15:35:43 272  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 273  );
15:35:43 274  
15:35:43 275  PROCEDURE GET_SUBSCR_LIC_OFFER (
15:35:43 276  /*
15:35:43 277  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 278  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 279  */
15:35:43 280  	in_subscription_id IN NUMBER,
15:35:43 281  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 282  );
15:35:43 283  
15:35:43 284  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
15:35:43 285  /*
15:35:43 286  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 287  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 288  */
15:35:43 289  	in_subscription_id IN NUMBER,
15:35:43 290  	out_result	   OUT NUMBER
15:35:43 291  );
15:35:43 292  
15:35:43 293  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
15:35:43 294  /*
15:35:43 295  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 296  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 297  */
15:35:43 298  	in_group_id	   IN NUMBER,
15:35:43 299  	in_offer_chain_id  IN NUMBER,
15:35:43 300  	out_result	   out number
15:35:43 301  );
15:35:43 302  
15:35:43 303  PROCEDURE GET_EXISTING_SUBSCR_IDS (
15:35:43 304  /*
15:35:43 305  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 306  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 307  */
15:35:43 308  	in_group_id	   IN NUMBER,
15:35:43 309  	in_offer_chain_id  IN NUMBER,
15:35:43 310  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 311  );
15:35:43 312  
15:35:43 313  PROCEDURE ADD_META_DATA (
15:35:43 314  /*
15:35:43 315  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 316  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 317  */
15:35:43 318  	in_subscription_id IN NUMBER,
15:35:43 319  	in_name 	   IN VARCHAR2,
15:35:43 320  	in_value	   IN VARCHAR2,
15:35:43 321  	in_created_by	   IN VARCHAR2
15:35:43 322  );
15:35:43 323  
15:35:43 324  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
15:35:43 325  /*
15:35:43 326  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:43 327  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 328  */
15:35:43 329  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
15:35:43 330  	out_result_set	     OUT SYS_REFCURSOR
15:35:43 331  );
15:35:43 332  
15:35:43 333  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
15:35:43 334  /*
15:35:43 335  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 336  */
15:35:43 337  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
15:35:43 338  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 339  );
15:35:43 340  
15:35:43 341  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
15:35:43 342   (
15:35:43 343  /*
15:35:43 344  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 345  */
15:35:43 346  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:35:43 347  	out_result_set	    OUT SYS_REFCURSOR
15:35:43 348  );
15:35:43 349  
15:35:43 350  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
15:35:43 351  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
15:35:43 352  ) RETURN NUMBER;
15:35:43 353  
15:35:43 354  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
15:35:43 355  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
15:35:43 356  ) RETURN VARCHAR2;
15:35:43 357  
15:35:43 358  
15:35:43 359  
15:35:43 360  PROCEDURE GET_ACTIVE_MEU_SUBS (
15:35:43 361  	out_result_set	    OUT SYS_REFCURSOR
15:35:43 362  );
15:35:43 363  
15:35:43 364  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
15:35:43 365  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:35:43 366  	out_offer_id	    OUT NUMBER
15:35:43 367  );
15:35:43 368  
15:35:43 369  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
15:35:43 370  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:35:43 371  	out_license_id	    OUT NUMBER
15:35:43 372  );
15:35:43 373  
15:35:43 374  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
15:35:43 375  	out_result_set	    OUT SYS_REFCURSOR
15:35:43 376  );
15:35:43 377  
15:35:43 378  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
15:35:43 379  	out_result_set	    OUT SYS_REFCURSOR
15:35:43 380  );
15:35:43 381  
15:35:43 382  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
15:35:43 383  	out_result_set	    OUT SYS_REFCURSOR
15:35:43 384  );
15:35:43 385  
15:35:43 386  END PROCS_SUBSCRIPTION_V17;
15:35:43 387  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.05
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_SUBSCRIPTION(
15:35:43   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
15:35:43   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
15:35:43   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
15:35:43   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
15:35:43   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
15:35:43  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
15:35:43  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
15:35:43  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
15:35:43  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
15:35:43  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
15:35:43  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
15:35:43  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
15:35:43  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
15:35:43  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
15:35:43  19  );
15:35:43  20  
15:35:43  21  PROCEDURE UPDATE_SUBSCRIPTION(
15:35:43  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
15:35:43  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
15:35:43  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
15:35:43  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
15:35:43  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
15:35:43  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
15:35:43  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
15:35:43  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:35:43  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
15:35:43  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
15:35:43  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
15:35:43  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
15:35:43  34  );
15:35:43  35  
15:35:43  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
15:35:43  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
15:35:43  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:35:43  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
15:35:43  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:35:43  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
15:35:43  42  );
15:35:43  43  
15:35:43  44  END PROCS_SUBSCRIPTION_CRU_V17;
15:35:43  45  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.03
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_SYSTEM
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE INCREMENT_VERSION;
15:35:43   4  
15:35:43   5  PROCEDURE CHECK_VERSION(
15:35:43   6  	  in_vers    IN NUMBER,
15:35:43   7  	  out_result OUT NUMBER
15:35:43   8  );
15:35:43   9  
15:35:43  10  END PROCS_SYSTEM_V17;
15:35:43  11  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_TAXES
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE ADD_TAX (
15:35:43   4  	in_tax_type_id		 IN NUMBER,
15:35:43   5  	in_calculated_amount	 IN NUMBER,
15:35:43   6  	in_created_by		 IN VARCHAR2,
15:35:43   7  	in_line_item_id 	 IN NUMBER,
15:35:43   8  	in_effective_rate	 IN VARCHAR2,
15:35:43   9  	in_taxable_amount	 IN NUMBER,
15:35:43  10  	in_tax_rule_id		 IN NUMBER,
15:35:43  11  	in_jurisdiction_level_id IN NUMBER,
15:35:43  12  	in_jurisdiction_name	 IN VARCHAR2,
15:35:43  13  	in_jurisdiction_id	 IN VARCHAR2,
15:35:43  14  	in_ext_tax_type 	 IN VARCHAR2,
15:35:43  15  	in_ext_result		 IN VARCHAR2,
15:35:43  16  	in_imposition_type	 IN VARCHAR2,
15:35:43  17  	in_imposition		 IN VARCHAR2
15:35:43  18  );
15:35:43  19  
15:35:43  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
15:35:43  21  	in_country_code IN CHAR,
15:35:43  22  	in_check_date IN DATE,
15:35:43  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V17.FALSE
15:35:43  24  );
15:35:43  25  
15:35:43  26  PROCEDURE GET_TAX_CATEGORY (
15:35:43  27  	in_tax_category_id IN NUMBER,
15:35:43  28  	out_result_set	   OUT SYS_REFCURSOR
15:35:43  29  );
15:35:43  30  
15:35:43  31  END PROCS_TAXES_V17;
15:35:43  32  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_TAXES_CRU
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_TAX (
15:35:43   4  	inout_tax_id		 IN OUT NUMBER,
15:35:43   5  	in_tax_type_id		 IN NUMBER,
15:35:43   6  	in_calculated_amount	 IN NUMBER,
15:35:43   7  	in_created_by		 IN VARCHAR2,
15:35:43   8  	in_line_item_id 	 IN NUMBER,
15:35:43   9  	in_effective_rate	 IN VARCHAR2,
15:35:43  10  	in_taxable_amount	 IN NUMBER,
15:35:43  11  	in_tax_rule_id		 IN NUMBER,
15:35:43  12  	in_jurisdiction_level_id IN NUMBER,
15:35:43  13  	in_jurisdiction_name	 IN VARCHAR2,
15:35:43  14  	in_jurisdiction_id	 IN VARCHAR2,
15:35:43  15  	in_ext_tax_type 	 IN VARCHAR2,
15:35:43  16  	in_ext_result		 IN VARCHAR2,
15:35:43  17  	in_imposition_type	 IN VARCHAR2,
15:35:43  18  	in_imposition		 IN VARCHAR2
15:35:43  19  );
15:35:43  20  
15:35:43  21  END PROCS_TAXES_CRU_V17;
15:35:43  22  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.01
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_TEST
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE TEST_CLEAR_ALL;
15:35:43   4  PROCEDURE TEST_CLEAR_PRODUCTS;
15:35:43   5  
15:35:43   6  /********************************************/
15:35:43   7  
15:35:43   8  PROCEDURE TEST_GET_ACCOUNT (
15:35:43   9  	in_group_id	IN NUMBER,
15:35:43  10  	out_result_set	OUT SYS_REFCURSOR
15:35:43  11  );
15:35:43  12  
15:35:43  13  /********************************************/
15:35:43  14  
15:35:43  15  PROCEDURE TEST_GET_SUBSCRIPTION (
15:35:43  16  	in_subscription_id IN NUMBER,
15:35:43  17  	out_result_set	   OUT SYS_REFCURSOR
15:35:43  18  );
15:35:43  19  
15:35:43  20  /*********************************************/
15:35:43  21  
15:35:43  22  PROCEDURE TEST_DELETE_INVOICE (
15:35:43  23  	in_invoice_id IN NUMBER
15:35:43  24  );
15:35:43  25  
15:35:43  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
15:35:43  27  	in_group_id IN NUMBER
15:35:43  28  );
15:35:43  29  
15:35:43  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
15:35:43  31  	in_start_group_id IN NUMBER,
15:35:43  32  	in_end_group_id   IN NUMBER
15:35:43  33  );
15:35:43  34  
15:35:43  35  /**********************************************/
15:35:43  36  
15:35:43  37  FUNCTION TEST_IS_INVOICE_EXISTS(
15:35:43  38  /*
15:35:43  39  1 - exists
15:35:43  40  0 - not exists
15:35:43  41  */
15:35:43  42  	in_invoice_id IN NUMBER
15:35:43  43  ) RETURN NUMBER;
15:35:43  44  
15:35:43  45  PROCEDURE TEST_GET_INVOICE_INFO (
15:35:43  46  	in_invoice_id  IN NUMBER,
15:35:43  47  	out_result_set OUT SYS_REFCURSOR
15:35:43  48  );
15:35:43  49  
15:35:43  50  /******************************************************************************/
15:35:43  51  
15:35:43  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
15:35:43  53  	in_offer_chain_id in number
15:35:43  54  );
15:35:43  55  
15:35:43  56  END PROCS_TEST_V17;
15:35:43  57  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.03
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_TRANSACTION
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_TRANSACTION (
15:35:43   4  /*
15:35:43   5  Throws exceptions:
15:35:43   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43   8  */
15:35:43   9  	in_transaction_id  IN NUMBER,
15:35:43  10  	in_status_id	   IN NUMBER,
15:35:43  11  	in_amount	   IN NUMBER,
15:35:43  12  	in_created_by	   IN VARCHAR2,
15:35:43  13  	in_order_id	   IN VARCHAR2,
15:35:43  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE,
15:35:43  15  	out_transaction_id OUT NUMBER
15:35:43  16  );
15:35:43  17  
15:35:43  18  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
15:35:43  19  /*
15:35:43  20  Throws exceptions:
15:35:43  21  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  22  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  23  */
15:35:43  24  	in_transaction_id	   IN NUMBER,
15:35:43  25  	in_trans_attempt_status    IN NUMBER,
15:35:43  26  	in_external_status_code    IN VARCHAR2,
15:35:43  27  	in_external_status_message IN VARCHAR2,
15:35:43  28  	in_created_by		   IN VARCHAR2,
15:35:43  29  	in_ext_transaction_id	   IN VARCHAR2,
15:35:43  30  	out_transaction_attempt_id OUT NUMBER
15:35:43  31  );
15:35:43  32  
15:35:43  33  PROCEDURE UPDATE_TRANSACTION_STATUS (
15:35:43  34  /*
15:35:43  35  Throws exceptions:
15:35:43  36  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  37  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  38  */
15:35:43  39  	in_transaction_id	 IN NUMBER,
15:35:43  40  	in_updated_by		 IN VARCHAR2,
15:35:43  41  	in_transaction_status_id IN NUMBER
15:35:43  42  );
15:35:43  43  
15:35:43  44  PROCEDURE UPDATE_TRANSACTION_SETTLED (
15:35:43  45  /*
15:35:43  46  Throws exceptions:
15:35:43  47  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  48  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  49  */
15:35:43  50  	in_transaction_id	 IN NUMBER,
15:35:43  51  	in_updated_by		 IN VARCHAR2,
15:35:43  52  	in_is_settled		 IN NUMBER
15:35:43  53  );
15:35:43  54  
15:35:43  55  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
15:35:43  56  /*
15:35:43  57  Throws exceptions:
15:35:43  58  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  59  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  60  */
15:35:43  61  	in_transaction_attempt_id IN NUMBER,
15:35:43  62  	in_updated_by		  IN VARCHAR2
15:35:43  63  );
15:35:43  64  
15:35:43  65  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
15:35:43  66  /*
15:35:43  67  Throws exceptions:
15:35:43  68  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  69  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  70  */
15:35:43  71  	in_transaction_attempt_id     IN NUMBER,
15:35:43  72  	in_transaction_attempt_status IN NUMBER
15:35:43  73  );
15:35:43  74  
15:35:43  75  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
15:35:43  76  /*
15:35:43  77  Throws exceptions:
15:35:43  78  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  79  */
15:35:43  80  	in_transaction_id	      IN NUMBER,
15:35:43  81  	in_transaction_attempt_status IN NUMBER,
15:35:43  82  	out_result_set		      OUT SYS_REFCURSOR
15:35:43  83  );
15:35:43  84  
15:35:43  85  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
15:35:43  86  /*
15:35:43  87  Throws exceptions:
15:35:43  88  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  89  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  90  */
15:35:43  91  	in_transaction_attempt_id IN NUMBER,
15:35:43  92  	in_ext_status_code	  IN VARCHAR2,
15:35:43  93  	in_ext_status_message	  IN VARCHAR2,
15:35:43  94  	in_ext_transaction_id	  IN VARCHAR2
15:35:43  95  );
15:35:43  96  
15:35:43  97  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
15:35:43  98  /*
15:35:43  99  Throws exceptions:
15:35:43 100  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 101  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 102  */
15:35:43 103  	in_transaction_id IN  NUMBER,
15:35:43 104  	out_attempts_num  OUT NUMBER
15:35:43 105  );
15:35:43 106  
15:35:43 107  PROCEDURE GET_TRANSACTION_AMOUNT (
15:35:43 108  /*
15:35:43 109  Throws exceptions:
15:35:43 110  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 111  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 112  */
15:35:43 113  	in_transaction_id      IN  NUMBER,
15:35:43 114  	out_transaction_amount OUT NUMBER
15:35:43 115  );
15:35:43 116  
15:35:43 117  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
15:35:43 118  /*
15:35:43 119  Throws exceptions:
15:35:43 120  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 121  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 122  */
15:35:43 123  	in_charge_id   IN  NUMBER,
15:35:43 124  	out_result_set OUT SYS_REFCURSOR
15:35:43 125  );
15:35:43 126  
15:35:43 127  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
15:35:43 128  /*
15:35:43 129  Throws exceptions:
15:35:43 130  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 131  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 132  */
15:35:43 133  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
15:35:43 134  	out_result_set OUT SYS_REFCURSOR
15:35:43 135  );
15:35:43 136  
15:35:43 137  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
15:35:43 138  /*
15:35:43 139  Throws exceptions:
15:35:43 140  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 141  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 142  */
15:35:43 143  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
15:35:43 144  	out_result_set OUT SYS_REFCURSOR
15:35:43 145  );
15:35:43 146  
15:35:43 147  PROCEDURE GET_TRANSACTION_ATTEMPTS (
15:35:43 148  /*
15:35:43 149  Throws exceptions:
15:35:43 150  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 151  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 152  */
15:35:43 153  	in_transaction_id IN  NUMBER,
15:35:43 154  	out_result_set	  OUT SYS_REFCURSOR
15:35:43 155  );
15:35:43 156  
15:35:43 157  PROCEDURE RESERVE_TRANSACTION_ID (
15:35:43 158  /*
15:35:43 159  Throws exceptions:
15:35:43 160  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 161  */
15:35:43 162  	out_transaction_id OUT NUMBER
15:35:43 163  );
15:35:43 164  
15:35:43 165  PROCEDURE GET_TRANSACTION_BY_ID (
15:35:43 166  /*
15:35:43 167  Throws exceptions:
15:35:43 168  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 169  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 170  */
15:35:43 171  	in_transaction_id IN NUMBER,
15:35:43 172  	out_result_set	  OUT SYS_REFCURSOR
15:35:43 173  );
15:35:43 174  
15:35:43 175  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:35:43 176  /*
15:35:43 177  Throws exceptions:
15:35:43 178  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 179  APP_EXCEPTION_CODES_V17.INTRNAL_ERROR
15:35:43 180  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 181  */
15:35:43 182  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:35:43 183  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:35:43 184  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:35:43 185  );
15:35:43 186  
15:35:43 187  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
15:35:43 188  /*
15:35:43 189  Throws exceptions:
15:35:43 190  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 191  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 192  */
15:35:43 193  	in_invoice_id	IN  NUMBER,
15:35:43 194  	out_result_set OUT SYS_REFCURSOR
15:35:43 195  );
15:35:43 196  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
15:35:43 197  /*
15:35:43 198  Throws exceptions:
15:35:43 199  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 200  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 201  */
15:35:43 202  	in_transaction_id IN  NUMBER,
15:35:43 203  	out_is_successfull  OUT NUMBER
15:35:43 204  );
15:35:43 205  
15:35:43 206  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
15:35:43 207  	in_transaction_id IN NUMBER
15:35:43 208  ) RETURN NUMBER;
15:35:43 209  
15:35:43 210  FUNCTION GET_TRANSACTION_INTRL_TAXES (
15:35:43 211  	in_transaction_id IN NUMBER
15:35:43 212  ) RETURN NUMBER;
15:35:43 213  
15:35:43 214  -- norlov: #38796
15:35:43 215  PROCEDURE GET_TRANSACTIONS (
15:35:43 216  /*
15:35:43 217  Throws exceptions:
15:35:43 218  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 219  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 220  */
15:35:43 221  	in_group_id	      IN  NUMBER,
15:35:43 222  	in_invoice_id	      IN NUMBER DEFAULT NULL,
15:35:43 223  	in_subscription_id    IN NUMBER DEFAULT NULL,
15:35:43 224  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
15:35:43 225  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
15:35:43 226  	in_transaction_status IN NUMBER DEFAULT NULL,
15:35:43 227  	out_result_set	      OUT SYS_REFCURSOR
15:35:43 228  );
15:35:43 229  
15:35:43 230  FUNCTION IS_TRANSACTION_COLLECTED (
15:35:43 231  /*
15:35:43 232  Throws:
15:35:43 233  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 234  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 235  Returns:
15:35:43 236  GLOBAL_CONST.TRUE if transaction collected,
15:35:43 237  GLOBAL_CONST.FALSE else
15:35:43 238  */
15:35:43 239  	in_transaction_id IN NUMBER
15:35:43 240  ) RETURN NUMBER;
15:35:43 241  
15:35:43 242  PROCEDURE GET_ATTEMPT_NUMBER (
15:35:43 243  /*
15:35:43 244  Throws exceptions:
15:35:43 245  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 246  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 247  */
15:35:43 248  	in_charge_id   in  number,
15:35:43 249  	out_attempt_count out number
15:35:43 250  );
15:35:43 251  
15:35:43 252  END PROCS_TRANSACTION_V17;
15:35:43 253  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.03
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PROCS_TRANSACTION_CRU
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_TRANSACTION (
15:35:43   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
15:35:43   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
15:35:43   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
15:35:43   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
15:35:43   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
15:35:43  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:43  11  );
15:35:43  12  
15:35:43  13  PROCEDURE UPDATE_TRANSACTION (
15:35:43  14  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
15:35:43  15  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
15:35:43  16  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
15:35:43  17  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
15:35:43  18  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
15:35:43  19  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
15:35:43  20  );
15:35:43  21  
15:35:43  22  PROCEDURE READ_TRANSACTION (
15:35:43  23  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:35:43  24  	out_result_set	  OUT SYS_REFCURSOR
15:35:43  25  );
15:35:43  26  
15:35:43  27  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
15:35:43  28  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
15:35:43  29  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
15:35:43  30  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
15:35:43  31  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:35:43  32  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
15:35:43  33  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
15:35:43  34  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
15:35:43  35  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
15:35:43  36  );
15:35:43  37  
15:35:43  38  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:35:43  39  /*
15:35:43  40  Throws exceptions:
15:35:43  41  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  42  APP_EXCEPTION_CODES_V17.INTRNAL_ERROR
15:35:43  43  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  44  */
15:35:43  45  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:35:43  46  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:35:43  47  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:35:43  48  );
15:35:43  49  
15:35:43  50  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
15:35:43  51  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
15:35:43  52  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
15:35:43  53  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:35:43  54  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
15:35:43  55  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
15:35:43  56  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
15:35:43  57  );
15:35:43  58  
15:35:43  59  END PROCS_TRANSACTION_CRU_V17;
15:35:43  60  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PUBLIC_PROCS_BILLING
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:35:43   4  /*
15:35:43   5  Throws exceptions:
15:35:43   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43   8  */
15:35:43   9  	  in_offer_chain_id IN	 NUMBER,
15:35:43  10  	  out_result_set    OUT  SYS_REFCURSOR
15:35:43  11  );
15:35:43  12  
15:35:43  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
15:35:43  14  /*
15:35:43  15  Throws exceptions:
15:35:43  16  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  17  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  18  */
15:35:43  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:43  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
15:35:43  21  );
15:35:43  22  
15:35:43  23  PROCEDURE GET_PENDING_INVOICES (
15:35:43  24  /*
15:35:43  25  Throws exceptions:
15:35:43  26  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  27  */
15:35:43  28  	out_result_set1      OUT SYS_REFCURSOR,
15:35:43  29  	out_result_set2      OUT SYS_REFCURSOR,
15:35:43  30  	out_result_set3      OUT SYS_REFCURSOR,
15:35:43  31  	in_row_number	     IN NUMBER DEFAULT NULL
15:35:43  32  );
15:35:43  33  
15:35:43  34  PROCEDURE GET_PENDING_REFUND_CHARGES (
15:35:43  35  /*
15:35:43  36  Throws exceptions:
15:35:43  37  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  38  */
15:35:43  39  	out_result_set	    OUT SYS_REFCURSOR,
15:35:43  40  	in_row_number	    IN NUMBER DEFAULT NULL
15:35:43  41  );
15:35:43  42  
15:35:43  43  PROCEDURE GET_UNPROCESSED_CHARGES (
15:35:43  44  /*
15:35:43  45  Throws exceptions:
15:35:43  46  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  47  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  48  */
15:35:43  49  	in_invoice_id  IN NUMBER,
15:35:43  50  	out_result_set OUT SYS_REFCURSOR
15:35:43  51  );
15:35:43  52  
15:35:43  53  PROCEDURE GET_PROCESSED_CHARGES (
15:35:43  54  /*
15:35:43  55  Throws exceptions:
15:35:43  56  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  57  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  58  */
15:35:43  59  	in_invoice_id  IN NUMBER,
15:35:43  60  	out_result_set OUT SYS_REFCURSOR
15:35:43  61  );
15:35:43  62  
15:35:43  63  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
15:35:43  64  /*
15:35:43  65  Throws exceptions:
15:35:43  66  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  67  */
15:35:43  68  	in_transaction_id	      IN NUMBER,
15:35:43  69  	in_transaction_attempt_status IN NUMBER,
15:35:43  70  	out_result_set		      OUT SYS_REFCURSOR
15:35:43  71  );
15:35:43  72  
15:35:43  73  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
15:35:43  74  /*
15:35:43  75  Throws exceptions:
15:35:43  76  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  77  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  78  */
15:35:43  79  	in_transaction_attempt_id     IN NUMBER,
15:35:43  80  	in_transaction_attempt_status IN NUMBER
15:35:43  81  );
15:35:43  82  
15:35:43  83  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
15:35:43  84  /*
15:35:43  85  Throws exceptions:
15:35:43  86  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  87  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  88  */
15:35:43  89  	in_transaction_attempt_id IN NUMBER,
15:35:43  90  	in_updated_by		  IN VARCHAR2
15:35:43  91  );
15:35:43  92  
15:35:43  93  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
15:35:43  94  /*
15:35:43  95  Throws exceptions:
15:35:43  96  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  97  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  98  */
15:35:43  99  	in_transaction_id	   IN NUMBER,
15:35:43 100  	in_trans_attempt_status    IN NUMBER,
15:35:43 101  	in_external_status_code    IN VARCHAR2,
15:35:43 102  	in_external_status_message IN VARCHAR2,
15:35:43 103  	in_created_by		   IN VARCHAR2,
15:35:43 104  	in_ext_transaction_id	   IN VARCHAR2,
15:35:43 105  	out_transaction_attempt_id OUT NUMBER
15:35:43 106  );
15:35:43 107  
15:35:43 108  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
15:35:43 109  /*
15:35:43 110  Throws exceptions:
15:35:43 111  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 112  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 113  */
15:35:43 114  	in_transaction_attempt_id IN NUMBER,
15:35:43 115  	in_ext_status_code	  IN VARCHAR2,
15:35:43 116  	in_ext_status_message	  IN VARCHAR2,
15:35:43 117  	in_ext_transaction_id	  IN VARCHAR2
15:35:43 118  );
15:35:43 119  
15:35:43 120  PROCEDURE UPDATE_TRANSACTION_STATUS (
15:35:43 121  /*
15:35:43 122  Throws exceptions:
15:35:43 123  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 124  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 125  */
15:35:43 126  	in_transaction_id	 IN NUMBER,
15:35:43 127  	in_updated_by		 IN VARCHAR2,
15:35:43 128  	in_transaction_status_id IN NUMBER
15:35:43 129  );
15:35:43 130  
15:35:43 131  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
15:35:43 132  /*
15:35:43 133  Throws exceptions:
15:35:43 134  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 135  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 136  */
15:35:43 137  	in_transaction_id IN  NUMBER,
15:35:43 138  	out_attempts_num  OUT NUMBER
15:35:43 139  );
15:35:43 140  
15:35:43 141  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
15:35:43 142  /*
15:35:43 143  Throws exceptions:
15:35:43 144  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 145  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 146  */
15:35:43 147  	in_transaction_id IN  NUMBER,
15:35:43 148  	out_is_successfull  OUT NUMBER
15:35:43 149  );
15:35:43 150  
15:35:43 151  PROCEDURE UPDATE_INVOICE_STATUS (
15:35:43 152  /*
15:35:43 153  Throws exceptions:
15:35:43 154  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 155  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 156  */
15:35:43 157  	in_invoice_id		       IN NUMBER,
15:35:43 158  	in_invoice_status_id	       IN NUMBER,
15:35:43 159  	in_updated_by		       IN VARCHAR2
15:35:43 160  );
15:35:43 161  
15:35:43 162  PROCEDURE SUSPEND_SUBSCRIPTION(
15:35:43 163  /*
15:35:43 164  Throws exceptions:
15:35:43 165  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 166  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 167  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 168  */
15:35:43 169  	  in_subs_id	IN NUMBER ,
15:35:43 170  	  in_updated_by IN VARCHAR2
15:35:43 171  );
15:35:43 172  
15:35:43 173  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:35:43 174  /*
15:35:43 175  Throws exceptions:
15:35:43 176  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 177  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 178  */
15:35:43 179  	in_credit_card_id IN  NUMBER,
15:35:43 180  	out_result_set	  OUT SYS_REFCURSOR
15:35:43 181  );
15:35:43 182  
15:35:43 183  PROCEDURE GET_TRANSACTION_AMOUNT (
15:35:43 184  /*
15:35:43 185  Throws exceptions:
15:35:43 186  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 187  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 188  */
15:35:43 189  	in_transaction_id      IN  NUMBER,
15:35:43 190  	out_transaction_amount OUT NUMBER
15:35:43 191  );
15:35:43 192  
15:35:43 193  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
15:35:43 194  /*
15:35:43 195  Throws exceptions:
15:35:43 196  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 197  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 198  */
15:35:43 199  	in_invoice_id  IN  NUMBER,
15:35:43 200  	out_account_id OUT NUMBER
15:35:43 201  );
15:35:43 202  
15:35:43 203  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
15:35:43 204  /*
15:35:43 205  Throws exceptions:
15:35:43 206  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43 207  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 208  */
15:35:43 209  	in_gift_certificate_id IN NUMBER,
15:35:43 210  	out_result_set	       OUT SYS_REFCURSOR
15:35:43 211  );
15:35:43 212  
15:35:43 213  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
15:35:43 214  /*
15:35:43 215  Throws exceptions:
15:35:43 216  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 217  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 218  */
15:35:43 219  	in_charge_id	    IN NUMBER,
15:35:43 220  	out_subscription_id OUT NUMBER
15:35:43 221  );
15:35:43 222  
15:35:43 223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
15:35:43 224  /*
15:35:43 225  Throws exceptions:
15:35:43 226  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 227  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 228  */
15:35:43 229  	in_gift_certificate_id IN NUMBER,
15:35:43 230  	in_charge_id	       IN NUMBER,
15:35:43 231  	out_result	       OUT NUMBER
15:35:43 232  );
15:35:43 233  
15:35:43 234  PROCEDURE GET_SUBSCRIPTION_INFO (
15:35:43 235  /*
15:35:43 236  Throws exceptions:
15:35:43 237  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 238  */
15:35:43 239  	  in_subscription_id IN  NUMBER,
15:35:43 240  	  out_result_set      OUT SYS_REFCURSOR
15:35:43 241  );
15:35:43 242  
15:35:43 243  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:35:43 244  /*
15:35:43 245  Throws exceptions:
15:35:43 246  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 247  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 248  */
15:35:43 249  	in_invoice_id IN  NUMBER,
15:35:43 250  	out_amount    OUT NUMBER
15:35:43 251  );
15:35:43 252  
15:35:43 253  PROCEDURE GET_TRANSACTION_BY_ID (
15:35:43 254  /*
15:35:43 255  Throws exceptions:
15:35:43 256  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 257  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 258  */
15:35:43 259  	in_transaction_id IN NUMBER,
15:35:43 260  	out_result_set	  OUT SYS_REFCURSOR
15:35:43 261  );
15:35:43 262  
15:35:43 263  PROCEDURE UPDATE_CHARGE_STATUS (
15:35:43 264  /*
15:35:43 265  Throws exceptions:
15:35:43 266  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 267  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 268  */
15:35:43 269  	in_charge_id	    IN CHARGE.ID%TYPE,
15:35:43 270  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:35:43 271  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
15:35:43 272  );
15:35:43 273  
15:35:43 274  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:35:43 275  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:43 276  	out_result_set OUT SYS_REFCURSOR
15:35:43 277  );
15:35:43 278  
15:35:43 279  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:35:43 280  /*
15:35:43 281  Throws exceptions:
15:35:43 282  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 283  APP_EXCEPTION_CODES_V17.INTRNAL_ERROR
15:35:43 284  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 285  */
15:35:43 286  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:35:43 287  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:35:43 288  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:35:43 289  );
15:35:43 290  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
15:35:43 291  /*
15:35:43 292  Throws exceptions:
15:35:43 293  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 294  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 295  */
15:35:43 296  	in_invoice_id	IN  NUMBER,
15:35:43 297  	out_result_set OUT SYS_REFCURSOR
15:35:43 298  );
15:35:43 299  PROCEDURE GET_ACTIVE_INVOICES_IDS (
15:35:43 300  /*
15:35:43 301  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 302  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 303  */
15:35:43 304  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
15:35:43 305  	in_subscription_id IN NUMBER,
15:35:43 306  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 307  );
15:35:43 308  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
15:35:43 309  /*
15:35:43 310  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 311  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 312  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 313  */
15:35:43 314  --  in_invoice_id        IN INVOICE.ID%TYPE,
15:35:43 315  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
15:35:43 316  -- norlov: in_refundable	      IN refund enabled
15:35:43 317  	in_invoice_id	     IN NUMBER,
15:35:43 318  	in_updated_by	     IN VARCHAR2,
15:35:43 319  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:43 320  --  in_cancellation_date IN DATE DEFAULT current_timestamp
15:35:43 321  );
15:35:43 322  
15:35:43 323  PROCEDURE FINALIZE_CANCELATION (
15:35:43 324  /*
15:35:43 325  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 326  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 327  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 328  */
15:35:43 329  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
15:35:43 330  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
15:35:43 331  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
15:35:43 332  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:35:43 333  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:35:43 334  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
15:35:43 335  	in_subscription_id    IN NUMBER,
15:35:43 336  	in_cancelation_reason IN VARCHAR2,
15:35:43 337  	in_cancelation_date   IN DATE,
15:35:43 338  	in_note 	      IN VARCHAR2,
15:35:43 339  	in_agent_id	      IN NUMBER,
15:35:43 340  	in_updated_by	      IN VARCHAR2
15:35:43 341  );
15:35:43 342  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
15:35:43 343  /*
15:35:43 344  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 345  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 346  */
15:35:43 347  	in_subscription_id IN NUMBER,
15:35:43 348  	out_result_set	   OUT SYS_REFCURSOR
15:35:43 349  );
15:35:43 350  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:35:43 351  /*
15:35:43 352  Throws exceptions (codes):
15:35:43 353  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 354  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 355  */
15:35:43 356  	in_offer_chain_id IN NUMBER,
15:35:43 357  	in_meta_data_name IN VARCHAR2,
15:35:43 358  	out_result_set	  OUT SYS_REFCURSOR
15:35:43 359  );
15:35:43 360  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
15:35:43 361  /*
15:35:43 362  Throws exceptions (codes):
15:35:43 363  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 364  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 365  */
15:35:43 366  	in_product_offering_id IN NUMBER,
15:35:43 367  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
15:35:43 368  	out_result_set	       OUT SYS_REFCURSOR
15:35:43 369  );
15:35:43 370  PROCEDURE READ_ACCOUNT (
15:35:43 371  	in_account_id  IN ACCOUNT.ID%TYPE,
15:35:43 372  	out_result_set OUT SYS_REFCURSOR
15:35:43 373  );
15:35:43 374  
15:35:43 375  PROCEDURE GET_COLLECTED_CHARGES (
15:35:43 376  /*
15:35:43 377  Throws exceptions:
15:35:43 378  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 379  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 380  */
15:35:43 381  	in_invoice_id  IN NUMBER,
15:35:43 382  	out_result_set OUT SYS_REFCURSOR
15:35:43 383  );
15:35:43 384  
15:35:43 385  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
15:35:43 386  /*
15:35:43 387  Throws exceptions:
15:35:43 388  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43 389  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 390  */
15:35:43 391  	in_invoice_id IN NUMBER,
15:35:43 392  	out_group_ids OUT SYS_REFCURSOR
15:35:43 393  );
15:35:43 394  
15:35:43 395  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:35:43 396  /*
15:35:43 397  Throws exceptions:
15:35:43 398  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43 399  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 400  */
15:35:43 401  	in_group_id IN NUMBER,
15:35:43 402  	out_account_id	OUT NUMBER
15:35:43 403  );
15:35:43 404  
15:35:43 405  PROCEDURE LOCK_ACCOUNT (
15:35:43 406  	in_group_id    IN NUMBER,
15:35:43 407  	in_lock_key    IN VARCHAR2,
15:35:43 408  	in_seconds_num IN NUMBER,
15:35:43 409  	in_created_by  IN VARCHAR2,
15:35:43 410  	in_reason      IN VARCHAR2
15:35:43 411  );
15:35:43 412  
15:35:43 413  PROCEDURE RELEASE_LOCK (
15:35:43 414  	in_group_id IN NUMBER,
15:35:43 415  	in_lock_key IN VARCHAR2
15:35:43 416  );
15:35:43 417  
15:35:43 418  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
15:35:43 419  	in_invoice_id		    IN NUMBER,
15:35:43 420  	out_order_id		    OUT VARCHAR2,
15:35:43 421  	out_external_transaction_id OUT VARCHAR2
15:35:43 422  );
15:35:43 423  
15:35:43 424  PROCEDURE GET_PAYPAL_BY_ID (
15:35:43 425  	in_paypal_id   IN  NUMBER,
15:35:43 426  	out_result_set OUT SYS_REFCURSOR
15:35:43 427  );
15:35:43 428  
15:35:43 429  PROCEDURE GET_ATTEMPT_NUMBER (
15:35:43 430  /*
15:35:43 431  Throws exceptions:
15:35:43 432  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 433  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 434  */
15:35:43 435  	in_charge_id   in  number,
15:35:43 436  	out_attempt_count out number
15:35:43 437  );
15:35:43 438  
15:35:43 439  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:35:43 440  	in_offer_chain_id	 IN NUMBER,
15:35:43 441  	in_action_name		 IN VARCHAR2,
15:35:43 442  	out_notification_type_id out number
15:35:43 443  );
15:35:43 444  
15:35:43 445  END PUBLIC_PROCS_BILLING_V17;
15:35:43 446  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.04
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PUBLIC_PROCS_CLIENT
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_CLIENT_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
15:35:43   4  /*
15:35:43   5  Throws exceptions:
15:35:43   6  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43   7  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43   8  */
15:35:43   9  	in_notification_type_name IN VARCHAR2,
15:35:43  10  	out_notification_type_id  OUT NUMBER
15:35:43  11  );
15:35:43  12  
15:35:43  13  PROCEDURE ADD_NOTIFICATION (
15:35:43  14  /*
15:35:43  15  Throws exceptions:
15:35:43  16  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  17  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  18  */
15:35:43  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
15:35:43  20  	in_recipient_group_id	 IN NUMBER,
15:35:43  21  	in_notification_type_id  IN NUMBER,
15:35:43  22  	in_date_to_notify	 IN DATE,
15:35:43  23  	in_email_template_params IN CLOB
15:35:43  24  );
15:35:43  25  
15:35:43  26  END PUBLIC_PROCS_CLIENT_V17;
15:35:43  27  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE LOCK_ACCOUNT (
15:35:43   4  	in_group_id    IN NUMBER,
15:35:43   5  	in_lock_key    IN VARCHAR2,
15:35:43   6  	in_seconds_num IN NUMBER,
15:35:43   7  	in_created_by  IN VARCHAR2,
15:35:43   8  	in_reason      IN VARCHAR2
15:35:43   9  );
15:35:43  10  
15:35:43  11  PROCEDURE RELEASE_LOCK (
15:35:43  12  	in_group_id IN NUMBER,
15:35:43  13  	in_lock_key IN VARCHAR2
15:35:43  14  );
15:35:43  15  
15:35:43  16  END PUBLIC_PROCS_NOTIFICATION_V17;
15:35:43  17  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.01
15:35:43 SQL> 
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
15:35:43 SQL> --------------------------------------------------------------------------------
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
15:35:43   4  	out_result_set OUT SYS_REFCURSOR
15:35:43   5  );
15:35:43   6  
15:35:43   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
15:35:43   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
15:35:43   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
15:35:43  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:43  11  );
15:35:43  12  
15:35:43  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:35:43  14  /*
15:35:43  15  Throws exceptions:
15:35:43  16  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  17  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  18  */
15:35:43  19  	  in_offer_chain_id IN	 NUMBER,
15:35:43  20  	  out_result_set    OUT  SYS_REFCURSOR
15:35:43  21  );
15:35:43  22  
15:35:43  23  PROCEDURE GET_UNREDEEMED_GCS (
15:35:43  24  	out_result_set		OUT SYS_REFCURSOR,
15:35:43  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:35:43  26  	in_num_rows		IN NUMBER DEFAULT 10000,
15:35:43  27  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:43  28  );
15:35:43  29  
15:35:43  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
15:35:43  31  /*
15:35:43  32  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:43  33  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  34  */
15:35:43  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
15:35:43  36  	out_result_set	     OUT SYS_REFCURSOR
15:35:43  37  );
15:35:43  38  
15:35:43  39  PROCEDURE GET_ALL_OCH_META_DATA (
15:35:43  40  	in_offer_chain_id IN NUMBER,
15:35:43  41  	out_result_set	  OUT SYS_REFCURSOR
15:35:43  42  );
15:35:43  43  
15:35:43  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:35:43  45  /*
15:35:43  46  Throws exceptions (codes):
15:35:43  47  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  48  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  49  */
15:35:43  50  	in_offer_chain_id IN NUMBER,
15:35:43  51  	in_meta_data_name IN VARCHAR2,
15:35:43  52  	out_result_set	  OUT SYS_REFCURSOR
15:35:43  53  );
15:35:43  54  
15:35:43  55  PROCEDURE GET_ENDING_LICENSES (
15:35:43  56  /*
15:35:43  57  Throws exceptions:
15:35:43  58  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  59  */
15:35:43  60  	in_hours_number IN NUMBER,
15:35:43  61  	out_result_set OUT SYS_REFCURSOR
15:35:43  62  );
15:35:43  63  
15:35:43  64  PROCEDURE GET_ENDING_LICENSES_CC (
15:35:43  65  /*
15:35:43  66  Throws exceptions:
15:35:43  67  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  68  */
15:35:43  69  	in_hours_number IN NUMBER,
15:35:43  70  	out_result_set OUT SYS_REFCURSOR,
15:35:43  71  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:43  72  );
15:35:43  73  
15:35:43  74  /************************************************/
15:35:43  75  
15:35:43  76  PROCEDURE GET_RECURRING_OFFER (
15:35:43  77  /*
15:35:43  78  Throws exceptions:
15:35:43  79  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  80  */
15:35:43  81  	in_license_id  IN NUMBER,
15:35:43  82  	out_result_set OUT SYS_REFCURSOR
15:35:43  83  );
15:35:43  84  
15:35:43  85  /*************************************************/
15:35:43  86  
15:35:43  87  PROCEDURE GET_NEXT_OFFER (
15:35:43  88  /*
15:35:43  89  Throws exceptions:
15:35:43  90  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43  91  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43  92  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43  93  */
15:35:43  94  	in_license_id  IN NUMBER,
15:35:43  95  	out_result_set OUT SYS_REFCURSOR
15:35:43  96  );
15:35:43  97  
15:35:43  98  /**************************************************/
15:35:43  99  
15:35:43 100  PROCEDURE UPDATE_LICENSE_STATUS(
15:35:43 101  /*
15:35:43 102  Throws exceptions:
15:35:43 103  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 104  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 105  */
15:35:43 106  	  in_license_id     IN NUMBER,
15:35:43 107  	  in_license_status IN NUMBER,
15:35:43 108  	  in_updated_by     IN VARCHAR2
15:35:43 109  );
15:35:43 110  
15:35:43 111  /***************************************************/
15:35:43 112  
15:35:43 113  PROCEDURE UPDATE_INVOICE_STATUS (
15:35:43 114  /*
15:35:43 115  Throws exceptions:
15:35:43 116  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 117  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 118  */
15:35:43 119  	in_invoice_id		       IN NUMBER,
15:35:43 120  	in_invoice_status_id	       IN NUMBER,
15:35:43 121  	in_updated_by		       IN VARCHAR2
15:35:43 122  );
15:35:43 123  
15:35:43 124  /***************************************************/
15:35:43 125  
15:35:43 126  PROCEDURE CREATE_LICENSE(
15:35:43 127  /*
15:35:43 128  Throws exceptions:
15:35:43 129  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 130  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 131  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:43 132  */
15:35:43 133  	in_status_id		    IN NUMBER,
15:35:43 134  	in_needs_entitlements	    IN NUMBER,
15:35:43 135  	in_start_date		    IN DATE,
15:35:43 136  	in_end_date		    IN DATE,
15:35:43 137  	in_offer_id		    IN NUMBER,
15:35:43 138  	in_subscription_id	    IN NUMBER,
15:35:43 139  	in_invoice_id		    IN NUMBER,
15:35:43 140  	in_created_by		    IN VARCHAR2,
15:35:43 141  	in_is_extension 	    IN NUMBER,
15:35:43 142  	in_current_offer_index	    IN NUMBER,
15:35:43 143  	in_current_offer_recurr_num IN NUMBER,
15:35:43 144  	out_license_id		    OUT NUMBER
15:35:43 145  );
15:35:43 146  
15:35:43 147  /**************************************************/
15:35:43 148  
15:35:43 149  PROCEDURE CREATE_INVOICE(
15:35:43 150  /*
15:35:43 151  Throws exceptions:
15:35:43 152  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 153  */
15:35:43 154  	  in_invoice_status IN NUMBER,
15:35:43 155  	  in_created_by     IN VARCHAR2,
15:35:43 156  	  in_tax_exempt_id  IN VARCHAR2,
15:35:43 157  	  out_invoice_id    OUT NUMBER
15:35:43 158  );
15:35:43 159  
15:35:43 160  /*****************************************************/
15:35:43 161  
15:35:43 162  PROCEDURE CREATE_CHARGE(
15:35:43 163  /*
15:35:43 164  Throws exceptions:
15:35:43 165  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 166  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 167  */
15:35:43 168  	in_invoice_id	      IN NUMBER,
15:35:43 169  	in_transaction_id     IN NUMBER,
15:35:43 170  	in_instrument_type_id IN NUMBER,
15:35:43 171  	in_instrument_id      IN NUMBER,
15:35:43 172  	in_charge_amount      IN NUMBER,
15:35:43 173  	in_created_by	      IN VARCHAR2,
15:35:43 174  	in_charge_status_id   IN NUMBER,
15:35:43 175  	out_charge_id	      OUT NUMBER
15:35:43 176  );
15:35:43 177  
15:35:43 178  /*****************************************************/
15:35:43 179  
15:35:43 180  PROCEDURE HAS_FUTURE_LICENSE (
15:35:43 181  /*
15:35:43 182  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 183  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 184  --
15:35:43 185  RETURNS:
15:35:43 186  1 - if has,
15:35:43 187  0 - else
15:35:43 188  */
15:35:43 189  	in_license_id IN NUMBER,
15:35:43 190  	out_result	   OUT NUMBER
15:35:43 191  );
15:35:43 192  
15:35:43 193  /*****************************************************/
15:35:43 194  
15:35:43 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
15:35:43 196  /*
15:35:43 197  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 198  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 199  */
15:35:43 200  	in_license_id IN NUMBER,
15:35:43 201  	out_group_id  OUT NUMBER
15:35:43 202  );
15:35:43 203  
15:35:43 204  /*****************************************************/
15:35:43 205  
15:35:43 206  PROCEDURE GET_OFFER_PRODUCTS (
15:35:43 207  /*
15:35:43 208  Throws exceptions (codes):
15:35:43 209  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 210  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 211  */
15:35:43 212  	in_offer_id    IN NUMBER,
15:35:43 213  	out_result_set OUT SYS_REFCURSOR
15:35:43 214  );
15:35:43 215  
15:35:43 216  /*******************************************************/
15:35:43 217  
15:35:43 218  PROCEDURE CREATE_TRANSACTION (
15:35:43 219  /*
15:35:43 220  Throws exceptions:
15:35:43 221  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 222  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 223  */
15:35:43 224  	in_transaction_id  IN NUMBER,
15:35:43 225  	in_status_id	   IN NUMBER,
15:35:43 226  	in_amount	   IN NUMBER,
15:35:43 227  	in_created_by	   IN VARCHAR2,
15:35:43 228  	in_order_id	   IN VARCHAR2,
15:35:43 229  	out_transaction_id OUT NUMBER
15:35:43 230  );
15:35:43 231  
15:35:43 232  /*********************************************************/
15:35:43 233  
15:35:43 234  PROCEDURE ADD_LINE_ITEMS(
15:35:43 235  /*
15:35:43 236  Throws exceptions:
15:35:43 237  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 238  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 239  */
15:35:43 240  	in_invoice_id IN NUMBER,
15:35:43 241  	in_offer_id   IN NUMBER,
15:35:43 242  	in_created_by IN VARCHAR2
15:35:43 243  );
15:35:43 244  
15:35:43 245  /**********************************************************/
15:35:43 246  
15:35:43 247  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:35:43 248  /*
15:35:43 249  Throws exceptions:
15:35:43 250  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 251  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 252  */
15:35:43 253  	in_invoice_id IN  NUMBER,
15:35:43 254  	out_amount    OUT NUMBER
15:35:43 255  );
15:35:43 256  
15:35:43 257  /*********************************************************/
15:35:43 258  
15:35:43 259  PROCEDURE RESERVE_TRANSACTION_ID (
15:35:43 260  /*
15:35:43 261  Throws exceptions:
15:35:43 262  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 263  */
15:35:43 264  	out_transaction_id OUT NUMBER
15:35:43 265  );
15:35:43 266  
15:35:43 267  /**********************************************************/
15:35:43 268  
15:35:43 269  PROCEDURE P_GET_NEXT_OFFER_INDEX (
15:35:43 270  	in_offer_chain_id	     IN NUMBER,
15:35:43 271  	in_offer_chain_current_index IN NUMBER,
15:35:43 272  	out_next_offer_index	     OUT NUMBER
15:35:43 273  );
15:35:43 274  
15:35:43 275  /***********************************************************/
15:35:43 276  
15:35:43 277  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
15:35:43 278  	in_license_id		     IN NUMBER,
15:35:43 279  	in_offer_chain_current_index IN NUMBER,
15:35:43 280  	out_next_offer_index	     OUT NUMBER
15:35:43 281  );
15:35:43 282  
15:35:43 283  /**********************************************************/
15:35:43 284  
15:35:43 285  PROCEDURE GET_SUBSCRIPTION_INFO (
15:35:43 286  /*
15:35:43 287  Throws exceptions:
15:35:43 288  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 289  */
15:35:43 290  	  in_subscription_id IN  NUMBER,
15:35:43 291  	  out_result_set      OUT SYS_REFCURSOR
15:35:43 292  );
15:35:43 293  
15:35:43 294  /***********************************************************/
15:35:43 295  
15:35:43 296  PROCEDURE CLOSE_SUBSCRIPTION (
15:35:43 297  	in_subscription_id IN NUMBER,
15:35:43 298  	in_updated_by	   IN VARCHAR2
15:35:43 299  );
15:35:43 300  
15:35:43 301  /***********************************************************/
15:35:43 302  
15:35:43 303  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
15:35:43 304  	out_result_set OUT SYS_REFCURSOR
15:35:43 305  );
15:35:43 306  
15:35:43 307  /***********************************************************/
15:35:43 308  
15:35:43 309  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
15:35:43 310  	in_license_id	      IN NUMBER,
15:35:43 311  	in_needs_entitlements IN NUMBER,
15:35:43 312  	in_updated_by	      IN VARCHAR2
15:35:43 313  );
15:35:43 314  /***********************************************************/
15:35:43 315  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
15:35:43 316  	in_offer_id    IN NUMBER,
15:35:43 317  	out_result_set OUT SYS_REFCURSOR
15:35:43 318  );
15:35:43 319  /***********************************************************/
15:35:43 320  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
15:35:43 321  	in_product_offering_id IN NUMBER,
15:35:43 322  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
15:35:43 323  	out_result_set	       OUT SYS_REFCURSOR
15:35:43 324  );
15:35:43 325  
15:35:43 326  PROCEDURE LOCK_ACCOUNT (
15:35:43 327  	in_group_id    IN NUMBER,
15:35:43 328  	in_lock_key    IN VARCHAR2,
15:35:43 329  	in_seconds_num IN NUMBER,
15:35:43 330  	in_created_by  IN VARCHAR2,
15:35:43 331  	in_reason      IN VARCHAR2
15:35:43 332  );
15:35:43 333  
15:35:43 334  PROCEDURE RELEASE_LOCK (
15:35:43 335  	in_group_id IN NUMBER,
15:35:43 336  	in_lock_key IN VARCHAR2
15:35:43 337  );
15:35:43 338  
15:35:43 339  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:35:43 340  	in_invoice_id  IN NUMBER,
15:35:43 341  	out_result_set OUT SYS_REFCURSOR
15:35:43 342  );
15:35:43 343  
15:35:43 344  PROCEDURE ADD_TAX (
15:35:43 345  	in_tax_type_id		 IN NUMBER,
15:35:43 346  	in_calculated_amount	 IN NUMBER,
15:35:43 347  	in_created_by		 IN VARCHAR2,
15:35:43 348  	in_line_item_id 	 IN NUMBER,
15:35:43 349  	in_effective_rate	 IN VARCHAR2,
15:35:43 350  	in_taxable_amount	 IN NUMBER,
15:35:43 351  	in_tax_rule_id		 IN NUMBER,
15:35:43 352  	in_jurisdiction_level_id IN NUMBER,
15:35:43 353  	in_jurisdiction_name	 IN VARCHAR2,
15:35:43 354  	in_jurisdiction_id	 IN VARCHAR2,
15:35:43 355  	in_ext_tax_type 	 IN VARCHAR2,
15:35:43 356  	in_ext_result		 IN VARCHAR2,
15:35:43 357  	in_imposition_type	 IN VARCHAR2,
15:35:43 358  	in_imposition		 IN VARCHAR2
15:35:43 359  );
15:35:43 360  
15:35:43 361  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:35:43 362  	in_credit_card_id IN  NUMBER,
15:35:43 363  	out_result_set	  OUT SYS_REFCURSOR
15:35:43 364  );
15:35:43 365  
15:35:43 366  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
15:35:43 367  	in_line_item_id IN NUMBER,
15:35:43 368  	out_result_set	OUT SYS_REFCURSOR
15:35:43 369  );
15:35:43 370  
15:35:43 371  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:35:43 372  /*
15:35:43 373  Throws exceptions:
15:35:43 374  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43 375  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 376  */
15:35:43 377  	in_group_id IN NUMBER,
15:35:43 378  	out_account_id	OUT NUMBER
15:35:43 379  );
15:35:43 380  
15:35:43 381  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
15:35:43 382  /*
15:35:43 383  Throws exceptions:
15:35:43 384  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:43 385  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 386  */
15:35:43 387  	in_line_item_id IN  NUMBER,
15:35:43 388  	out_result_set	OUT SYS_REFCURSOR
15:35:43 389  );
15:35:43 390  
15:35:43 391  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
15:35:43 392  	in_line_item_id    IN NUMBER,
15:35:43 393  	in_amount	   IN NUMBER,
15:35:43 394  	in_discount_amount IN NUMBER,
15:35:43 395  	in_taxes_amount    IN NUMBER
15:35:43 396  );
15:35:43 397  
15:35:43 398  PROCEDURE GET_PAYPAL_BY_ID (
15:35:43 399  	in_paypal_id   IN  NUMBER,
15:35:43 400  	out_result_set OUT SYS_REFCURSOR
15:35:43 401  );
15:35:43 402  
15:35:43 403  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:35:43 404  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:43 405  	out_result_set OUT SYS_REFCURSOR
15:35:43 406  );
15:35:43 407  
15:35:43 408  PROCEDURE GET_LICENSE_BY_ID (
15:35:43 409  	in_license_id  IN NUMBER,
15:35:43 410  	out_result_set OUT SYS_REFCURSOR
15:35:43 411  );
15:35:43 412  
15:35:43 413  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:35:43 414  	in_offer_chain_id	 IN NUMBER,
15:35:43 415  	in_action_name		 IN VARCHAR2,
15:35:43 416  	out_notification_type_id OUT NUMBER
15:35:43 417  );
15:35:43 418  
15:35:43 419  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
15:35:43 420  	in_offer_chain_id IN NUMBER,
15:35:43 421  	in_meta_data_name IN VARCHAR2,
15:35:43 422  	out_value	  OUT VARCHAR2
15:35:43 423  );
15:35:43 424  
15:35:43 425  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
15:35:43 426  	out_result_set	    OUT SYS_REFCURSOR
15:35:43 427  );
15:35:43 428  
15:35:43 429  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
15:35:43 430  	out_result_set	    OUT SYS_REFCURSOR
15:35:43 431  );
15:35:43 432  
15:35:43 433  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
15:35:43 434  	out_result_set	    OUT SYS_REFCURSOR
15:35:43 435  );
15:35:43 436  
15:35:43 437  END PUBLIC_PROCS_RENEWAL_V17;
15:35:43 438  .
15:35:43 SQL> /

Package created.

Elapsed: 00:00:00.04
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_ACCOUNT (
15:35:43   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
15:35:43   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
15:35:43   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
15:35:43   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
15:35:43   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
15:35:43   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
15:35:43  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:35:43  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
15:35:43  12  ) AS
15:35:43  13  -- VARIABLES
15:35:43  14  var_new_account_id ACCOUNT.ID%TYPE;
15:35:43  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:43  16  var_date DATE := SYSDATE;
15:35:43  17  BEGIN
15:35:43  18  	SELECT
15:35:43  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
15:35:43  20  	FROM DUAL;
15:35:43  21  	INSERT INTO ACCOUNT (
15:35:43  22  	  ID,
15:35:43  23  	  ACCOUNT_STATUS_ID,
15:35:43  24  	  SUSPEND_DATE,
15:35:43  25  	  GROUP_ID,
15:35:43  26  	  CREATE_DATE,
15:35:43  27  	  CREATED_BY,
15:35:43  28  	  UPDATE_DATE,
15:35:43  29  	  UPDATED_BY,
15:35:43  30  	  SYSTEM_CATEGORY_ID,
15:35:43  31  	  INSTRUMENT_TYPE_ID,
15:35:43  32  	  INSTRUMENT_ID,
15:35:43  33  	  TAX_EXEMPT_ID
15:35:43  34  	) VALUES (
15:35:43  35  	  var_new_account_id,
15:35:43  36  	  in_account_status_id,
15:35:43  37  	  in_suspend_date,
15:35:43  38  	  in_group_id,
15:35:43  39  	  var_date,
15:35:43  40  	  in_created_by,
15:35:43  41  	  var_date,
15:35:43  42  	  in_created_by,
15:35:43  43  	  in_system_category_id,
15:35:43  44  	  in_instrument_type_id,
15:35:43  45  	  in_instrument_id,
15:35:43  46  	  NULL
15:35:43  47  	);
15:35:43  48  
15:35:43  49  	out_account_id := var_new_account_id;
15:35:43  50  END CREATE_ACCOUNT;
15:35:43  51  
15:35:43  52  /*************************************************************/
15:35:43  53  
15:35:43  54  PROCEDURE UPDATE_ACCOUNT (
15:35:43  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
15:35:43  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
15:35:43  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
15:35:43  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
15:35:43  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
15:35:43  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:35:43  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
15:35:43  62  ) AS
15:35:43  63  BEGIN
15:35:43  64  
15:35:43  65  	-- CREATE HISTORY
15:35:43  66  	PROCS_HISTORY_V17.CREATE_ACCOUNT_HISTORY(
15:35:43  67  	  in_account_id 	       => in_account_id,
15:35:43  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43  69  	);
15:35:43  70  
15:35:43  71  	UPDATE ACCOUNT SET
15:35:43  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
15:35:43  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
15:35:43  74  	  UPDATED_BY	     = in_updated_by,
15:35:43  75  	  UPDATE_DATE	     = SYSDATE,
15:35:43  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
15:35:43  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
15:35:43  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
15:35:43  79  	WHERE
15:35:43  80  	  ACCOUNT.ID = in_account_id;
15:35:43  81  
15:35:43  82  END UPDATE_ACCOUNT;
15:35:43  83  
15:35:43  84  /*************************************************************/
15:35:43  85  
15:35:43  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
15:35:43  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
15:35:43  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
15:35:43  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
15:35:43  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
15:35:43  91  ) AS
15:35:43  92  BEGIN
15:35:43  93  
15:35:43  94  	-- CREATE HISTORY
15:35:43  95  	PROCS_HISTORY_V17.CREATE_ACCOUNT_HISTORY(
15:35:43  96  	  in_account_id 	       => in_account_id,
15:35:43  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43  98  	);
15:35:43  99  
15:35:43 100  	UPDATE ACCOUNT SET
15:35:43 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
15:35:43 102  	  INSTRUMENT_ID      = in_instrument_id
15:35:43 103  	WHERE
15:35:43 104  	  ACCOUNT.ID = in_account_id;
15:35:43 105  
15:35:43 106  END;
15:35:43 107  
15:35:43 108  /*************************************************************/
15:35:43 109  
15:35:43 110  PROCEDURE READ_ACCOUNT (
15:35:43 111  	in_account_id  IN ACCOUNT.ID%TYPE,
15:35:43 112  	out_result_set OUT SYS_REFCURSOR
15:35:43 113  ) AS
15:35:43 114  BEGIN
15:35:43 115  	OPEN out_result_set FOR
15:35:43 116  	SELECT
15:35:43 117  	  ACCOUNT_STATUS_ID,
15:35:43 118  	  SUSPEND_DATE,
15:35:43 119  	  GROUP_ID
15:35:43 120  	FROM
15:35:43 121  	  ACCOUNT
15:35:43 122  	WHERE
15:35:43 123  	  ID = in_account_id;
15:35:43 124  END READ_ACCOUNT;
15:35:43 125  
15:35:43 126  /*************************************************************/
15:35:43 127  
15:35:43 128  PROCEDURE CREATE_ACCOUNT_NOTE (
15:35:43 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
15:35:43 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
15:35:43 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
15:35:43 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
15:35:43 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
15:35:43 134  ) AS
15:35:43 135  BEGIN
15:35:43 136  	IF inout_account_note_id IS NULL THEN
15:35:43 137  	  SELECT
15:35:43 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
15:35:43 139  	  FROM DUAL;
15:35:43 140  	END IF;
15:35:43 141  	INSERT INTO ACCOUNT_NOTE(
15:35:43 142  	  ID,
15:35:43 143  	  AGENT_ID,
15:35:43 144  	  ACCOUNT_ID,
15:35:43 145  	  NOTE,
15:35:43 146  	  CREATE_DATE,
15:35:43 147  	  CREATED_BY
15:35:43 148  	) VALUES (
15:35:43 149  	  inout_account_note_id,
15:35:43 150  	  in_agent_id,
15:35:43 151  	  in_account_id,
15:35:43 152  	  in_note,
15:35:43 153  	  SYSDATE,
15:35:43 154  	  in_created_by
15:35:43 155  	);
15:35:43 156  END CREATE_ACCOUNT_NOTE;
15:35:43 157  
15:35:43 158  END PROCS_ACCOUNT_CRU_V17;
15:35:43 159  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_ADDRESS(
15:35:43   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
15:35:43   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:35:43   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:35:43   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:35:43   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:35:43  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:43  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:35:43  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
15:35:43  13  ) AS
15:35:43  14  -- VARIABLES
15:35:43  15  var_address_id ADDRESS.ID%TYPE;
15:35:43  16  var_date DATE := SYSDATE;
15:35:43  17  BEGIN
15:35:43  18  	IF in_address_id IS NULL THEN
15:35:43  19  	  SELECT
15:35:43  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
15:35:43  21  	  FROM DUAL;
15:35:43  22  	ELSE
15:35:43  23  	  var_address_id := in_address_id;
15:35:43  24  	END IF;
15:35:43  25  	INSERT INTO
15:35:43  26  	  ADDRESS (
15:35:43  27  	    ID,
15:35:43  28  	    ADDRESS1,
15:35:43  29  	    ADDRESS2,
15:35:43  30  	    CITY,
15:35:43  31  	    STATE,
15:35:43  32  	    POSTAL_CODE,
15:35:43  33  	    COUNTRY,
15:35:43  34  	    CREATE_DATE,
15:35:43  35  	    CREATED_BY,
15:35:43  36  	    UPDATE_DATE,
15:35:43  37  	    UPDATED_BY
15:35:43  38  	  ) VALUES (
15:35:43  39  	    var_address_id,
15:35:43  40  	    in_address1,
15:35:43  41  	    in_address2,
15:35:43  42  	    in_city,
15:35:43  43  	    in_state,
15:35:43  44  	    in_postal_code,
15:35:43  45  	    in_country,
15:35:43  46  	    var_date,
15:35:43  47  	    in_created_by,
15:35:43  48  	    var_date,
15:35:43  49  	    in_created_by
15:35:43  50  	  );
15:35:43  51  
15:35:43  52  	out_address_id := var_address_id;
15:35:43  53  END CREATE_ADDRESS;
15:35:43  54  
15:35:43  55  PROCEDURE UPDATE_ADDRESS(
15:35:43  56  	in_address_id	      IN ADDRESS.ID%TYPE,
15:35:43  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:35:43  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:35:43  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:35:43  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:35:43  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:43  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:35:43  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
15:35:43  64  ) AS
15:35:43  65  BEGIN
15:35:43  66  
15:35:43  67  	-- Create history
15:35:43  68  	PROCS_HISTORY_V17.CREATE_ADDRESS_HISTORY(
15:35:43  69  	  in_address_id 		=> in_address_id,
15:35:43  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43  71  	);
15:35:43  72  
15:35:43  73  	UPDATE
15:35:43  74  	  ADDRESS
15:35:43  75  	SET
15:35:43  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
15:35:43  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
15:35:43  78  	  CITY = NVL(in_city, CITY),
15:35:43  79  	  STATE = NVL(in_state, STATE),
15:35:43  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
15:35:43  81  	  COUNTRY = NVL(in_country, COUNTRY),
15:35:43  82  	  UPDATE_DATE = SYSDATE,
15:35:43  83  	  UPDATED_BY = in_updated_by
15:35:43  84  	WHERE
15:35:43  85  	  ID = in_address_id;
15:35:43  86  
15:35:43  87  END UPDATE_ADDRESS;
15:35:43  88  
15:35:43  89  END PROCS_ADDRESS_CRU_V17;
15:35:43  90  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_AMAZON_SUB(
15:35:43   4  /*
15:35:43   5  Throws exceptions:
15:35:43   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43   7  */
15:35:43   8  	  out_id	      OUT NUMBER,
15:35:43   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
15:35:43  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
15:35:43  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
15:35:43  12  ) AS
15:35:43  13  -- VARIABLES
15:35:43  14  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
15:35:43  15  var_current_date	DATE;
15:35:43  16  var_count 	NUMBER;
15:35:43  17  AMAZON_SUB_USED	EXCEPTION;
15:35:43  18  BEGIN
15:35:43  19  
15:35:43  20  	SELECT COUNT(1) INTO var_count
15:35:43  21  	FROM SUBSCRIPTION s, AMAZON_SUB am
15:35:43  22  	WHERE
15:35:43  23  	  am.AMAZON_ID = in_amazon_id
15:35:43  24  	  and am.subscription_id = s.id
15:35:43  25  	  and s.subscription_status_id = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE;
15:35:43  26  
15:35:43  27  	if var_count > 0 then
15:35:43  28  	  raise AMAZON_SUB_USED;
15:35:43  29  	end if;
15:35:43  30  
15:35:43  31  	SELECT
15:35:43  32  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
15:35:43  33  	INTO
15:35:43  34  	  out_id
15:35:43  35  	FROM
15:35:43  36  	  dual
15:35:43  37  	;
15:35:43  38  
15:35:43  39  	SELECT
15:35:43  40  	  sysdate
15:35:43  41  	INTO
15:35:43  42  	  var_current_date
15:35:43  43  	FROM
15:35:43  44  	  dual
15:35:43  45  	;
15:35:43  46  
15:35:43  47  	INSERT INTO CORE_OWNER.AMAZON_SUB
15:35:43  48  	(
15:35:43  49  	  id,
15:35:43  50  	  subscription_id,
15:35:43  51  	  amazon_id,
15:35:43  52  	  create_date,
15:35:43  53  	  created_by,
15:35:43  54  	  update_date,
15:35:43  55  	  updated_by
15:35:43  56  	)
15:35:43  57  	VALUES
15:35:43  58  	(
15:35:43  59  	  out_id,
15:35:43  60  	  in_subscription_id,
15:35:43  61  	  in_amazon_id,
15:35:43  62  	  var_current_date,
15:35:43  63  	  in_created_by,
15:35:43  64  	  var_current_date,
15:35:43  65  	  in_created_by
15:35:43  66  	);
15:35:43  67  
15:35:43  68  EXCEPTION
15:35:43  69  WHEN AMAZON_SUB_USED THEN
15:35:43  70  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:43  71  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
15:35:43  72  WHEN DUP_VAL_ON_INDEX THEN
15:35:43  73  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:43  74  	  SPROC_NAME, 'Duplicate value', SQLERRM);
15:35:43  75  WHEN OTHERS THEN
15:35:43  76  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:43  78  END CREATE_AMAZON_SUB;
15:35:43  79  
15:35:43  80  END PROCS_AMAZON_CRU_V17;
15:35:43  81  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.05
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_CHARGE(
15:35:43   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
15:35:43   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
15:35:43   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
15:35:43   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
15:35:43   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
15:35:43  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
15:35:43  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:35:43  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
15:35:43  13  ) AS
15:35:43  14  -- VARIABLES
15:35:43  15  var_charge_id CHARGE.ID%TYPE;
15:35:43  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:43  17  var_date DATE := SYSDATE;
15:35:43  18  BEGIN
15:35:43  19  	IF in_charge_id IS NULL THEN
15:35:43  20  	  SELECT
15:35:43  21  	    CRG_ID_SEQ.nextVal into var_charge_id
15:35:43  22  	  FROM DUAL;
15:35:43  23  	ELSE
15:35:43  24  	  var_charge_id := in_charge_id;
15:35:43  25  	END IF;
15:35:43  26  	INSERT INTO
15:35:43  27  	  CHARGE (
15:35:43  28  	    ID,
15:35:43  29  	    INVOICE_ID,
15:35:43  30  	    TRANSACTION_ID,
15:35:43  31  	    INSTRUMENT_TYPE_ID,
15:35:43  32  	    INSTRUMENT_ID,
15:35:43  33  	    CHARGE_AMOUNT,
15:35:43  34  	    CHARGE_STATUS_ID,
15:35:43  35  	    CREATE_DATE,
15:35:43  36  	    CREATED_BY,
15:35:43  37  	    UPDATE_DATE,
15:35:43  38  	    UPDATED_BY
15:35:43  39  	  ) VALUES (
15:35:43  40  	    var_charge_id,
15:35:43  41  	    in_invoice_id,
15:35:43  42  	    in_transaction_id,
15:35:43  43  	    in_instrument_type_id,
15:35:43  44  	    in_instrument_id,
15:35:43  45  	    in_charge_amount,
15:35:43  46  	    in_charge_status_id,
15:35:43  47  	    var_date,
15:35:43  48  	    in_created_by,
15:35:43  49  	    var_date,
15:35:43  50  	    in_created_by
15:35:43  51  	  );
15:35:43  52  
15:35:43  53  	out_charge_id := var_charge_id;
15:35:43  54  END CREATE_CHARGE;
15:35:43  55  
15:35:43  56  PROCEDURE UPDATE_CHARGE(
15:35:43  57  	in_charge_id	      IN CHARGE.ID%TYPE,
15:35:43  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:35:43  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
15:35:43  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
15:35:43  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
15:35:43  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
15:35:43  63  ) AS
15:35:43  64  BEGIN
15:35:43  65  
15:35:43  66  	-- Create history
15:35:43  67  	PROCS_HISTORY_V17.CREATE_CHARGE_HISTORY(
15:35:43  68  	  in_charge_id		       => in_charge_id,
15:35:43  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43  70  	);
15:35:43  71  
15:35:43  72  	UPDATE
15:35:43  73  	  CHARGE
15:35:43  74  	SET
15:35:43  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
15:35:43  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
15:35:43  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
15:35:43  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
15:35:43  79  	  UPDATE_DATE	     = SYSDATE,
15:35:43  80  	  UPDATED_BY	     = in_updated_by
15:35:43  81  	WHERE
15:35:43  82  	  ID = in_charge_id;
15:35:43  83  
15:35:43  84  END UPDATE_CHARGE;
15:35:43  85  
15:35:43  86  END PROCS_CHARGE_CRU_V17;
15:35:43  87  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_CREDIT_CARD(
15:35:43   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
15:35:43   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
15:35:43   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
15:35:43   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
15:35:43   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
15:35:43  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
15:35:43  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
15:35:43  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
15:35:43  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
15:35:43  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
15:35:43  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:35:43  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
15:35:43  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
15:35:43  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
15:35:43  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
15:35:43  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
15:35:43  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
15:35:43  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
15:35:43  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
15:35:43  24  ) AS
15:35:43  25  -- VARIABLES
15:35:43  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
15:35:43  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:43  28  var_date DATE := SYSDATE;
15:35:43  29  BEGIN
15:35:43  30  	IF in_credit_card_id IS NULL THEN
15:35:43  31  	  SELECT
15:35:43  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
15:35:43  33  	  FROM DUAL;
15:35:43  34  	ELSE
15:35:43  35  	  var_credit_card_id := in_credit_card_id;
15:35:43  36  	END IF;
15:35:43  37  	INSERT INTO CREDIT_CARD(
15:35:43  38  	    ID,
15:35:43  39  	    ACCOUNT_ID,
15:35:43  40  	    INSTRUMENT_NAME,
15:35:43  41  	    PRIVATE_CARD_HOLDER_NAME,
15:35:43  42  	    PRIVATE_STREET_ADDRESS,
15:35:43  43  	    PRIVATE_STREET_ADDRESS2,
15:35:43  44  	    STATE,
15:35:43  45  	    CITY,
15:35:43  46  	    POSTAL_CODE,
15:35:43  47  	    COUNTRY,
15:35:43  48  	    LAST_FOUR_CC,
15:35:43  49  	    EXPIRATION_DATE,
15:35:43  50  	    CREDIT_CARD_TYPE_ID,
15:35:43  51  	    SECRET_TOKEN,
15:35:43  52  	    CHASE_PROFILE_ID,
15:35:43  53  	    CREATE_DATE,
15:35:43  54  	    CREATED_BY,
15:35:43  55  	    UPDATE_DATE,
15:35:43  56  	    UPDATED_BY,
15:35:43  57  	    CREDIT_CARD_STATUS_ID,
15:35:43  58  	    PRIVATE_FIRST_NAME,
15:35:43  59  	    PRIVATE_LAST_NAME
15:35:43  60  	  ) VALUES (
15:35:43  61  	    var_credit_card_id,
15:35:43  62  	    in_account_id,
15:35:43  63  	    in_instrument_name,
15:35:43  64  	    in_private_card_holder_name,
15:35:43  65  	    in_private_street_address,
15:35:43  66  	    in_private_street_address2,
15:35:43  67  	    in_state,
15:35:43  68  	    in_city,
15:35:43  69  	    in_postal_code,
15:35:43  70  	    in_country,
15:35:43  71  	    in_last_four_cc,
15:35:43  72  	    in_expiration_date,
15:35:43  73  	    in_credit_card_type_id,
15:35:43  74  	    in_secret_token,
15:35:43  75  	    in_chase_profile_id,
15:35:43  76  	    var_date,
15:35:43  77  	    in_created_by,
15:35:43  78  	    var_date,
15:35:43  79  	    in_created_by,
15:35:43  80  	    in_credit_card_status_id,
15:35:43  81  	    in_private_first_name,
15:35:43  82  	    in_private_last_name
15:35:43  83  	  );
15:35:43  84  
15:35:43  85  	out_credit_card_id := var_credit_card_id;
15:35:43  86  END CREATE_CREDIT_CARD;
15:35:43  87  
15:35:43  88  /******************************************************************************/
15:35:43  89  
15:35:43  90  PROCEDURE UPDATE_CREDIT_CARD(
15:35:43  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
15:35:43  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:35:43  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
15:35:43  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:35:43  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
15:35:43  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
15:35:43  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
15:35:43  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:43  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
15:35:43 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
15:35:43 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:35:43 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
15:35:43 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
15:35:43 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
15:35:43 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
15:35:43 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
15:35:43 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
15:35:43 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
15:35:43 109  ) AS
15:35:43 110  BEGIN
15:35:43 111  
15:35:43 112  	-- Create history
15:35:43 113  	PROCS_HISTORY_V17.CREATE_CREDIT_CARD_HISTORY(
15:35:43 114  	  in_credit_card_id	       => in_credit_card_id,
15:35:43 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43 116  	);
15:35:43 117  
15:35:43 118  	UPDATE CREDIT_CARD SET
15:35:43 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
15:35:43 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
15:35:43 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
15:35:43 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
15:35:43 123  	  STATE 		   = NVL(in_state, STATE),
15:35:43 124  	  CITY			   = NVL(in_city, CITY),
15:35:43 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
15:35:43 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
15:35:43 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
15:35:43 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
15:35:43 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
15:35:43 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
15:35:43 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
15:35:43 132  	  UPDATE_DATE		   = SYSDATE,
15:35:43 133  	  UPDATED_BY		   = in_updated_by,
15:35:43 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
15:35:43 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
15:35:43 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
15:35:43 137  	WHERE
15:35:43 138  	  ID = in_credit_card_id;
15:35:43 139  
15:35:43 140  END UPDATE_CREDIT_CARD;
15:35:43 141  
15:35:43 142  /******************************************************************************/
15:35:43 143  
15:35:43 144  PROCEDURE CREATE_PAYPAL(
15:35:43 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
15:35:43 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
15:35:43 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
15:35:43 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:35:43 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
15:35:43 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
15:35:43 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
15:35:43 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
15:35:43 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
15:35:43 154  	in_state			IN PAYPAL.STATE%TYPE,
15:35:43 155  	in_city 			IN PAYPAL.CITY%TYPE,
15:35:43 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
15:35:43 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
15:35:43 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
15:35:43 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
15:35:43 160  ) AS
15:35:43 161  -- VARIABLES
15:35:43 162  var_paypal_id PAYPAL.ID%TYPE;
15:35:43 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:43 164  var_date DATE := SYSDATE;
15:35:43 165  BEGIN
15:35:43 166  	IF in_paypal_id IS NULL THEN
15:35:43 167  	  SELECT
15:35:43 168  	    PP_ID_SEQ.nextVal into var_paypal_id
15:35:43 169  	  FROM DUAL;
15:35:43 170  	ELSE
15:35:43 171  	  var_paypal_id := in_paypal_id;
15:35:43 172  	END IF;
15:35:43 173  	INSERT INTO PAYPAL(
15:35:43 174  	    ID,
15:35:43 175  	    ACCOUNT_ID,
15:35:43 176  	    INSTRUMENT_NAME,
15:35:43 177  	    PRIVATE_EMAIL_ADDRESS,
15:35:43 178  	    CREATE_DATE,
15:35:43 179  	    CREATED_BY,
15:35:43 180  	    UPDATE_DATE,
15:35:43 181  	    UPDATED_BY,
15:35:43 182  	    PAYPAL_STATUS_ID,
15:35:43 183  	    PRIVATE_STREET_ADDRESS,
15:35:43 184  	    PRIVATE_STREET_ADDRESS2,
15:35:43 185  	    STATE,
15:35:43 186  	    CITY,
15:35:43 187  	    POSTAL_CODE,
15:35:43 188  	    COUNTRY,
15:35:43 189  	    EXPIRATION_DATE,
15:35:43 190  	    SECRET_TOKEN
15:35:43 191  	  ) VALUES (
15:35:43 192  	    var_paypal_id,
15:35:43 193  	    in_account_id,
15:35:43 194  	    in_instrument_name,
15:35:43 195  	    in_private_email_address,
15:35:43 196  	    var_date,
15:35:43 197  	    in_created_by,
15:35:43 198  	    var_date,
15:35:43 199  	    in_created_by,
15:35:43 200  	    in_paypal_status_id,
15:35:43 201  	    in_paypal_prvt_street_address,
15:35:43 202  	    in_paypal_prvt_street_address2,
15:35:43 203  	    in_state,
15:35:43 204  	    in_city,
15:35:43 205  	    in_postal_code,
15:35:43 206  	    in_country,
15:35:43 207  	    in_expiration_date,
15:35:43 208  	    in_secret_token
15:35:43 209  	  );
15:35:43 210  	out_paypal_id := var_paypal_id;
15:35:43 211  END CREATE_PAYPAL;
15:35:43 212  
15:35:43 213  /******************************************************************************/
15:35:43 214  
15:35:43 215  PROCEDURE UPDATE_PAYPAL(
15:35:43 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
15:35:43 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:35:43 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
15:35:43 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
15:35:43 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
15:35:43 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:35:43 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:35:43 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
15:35:43 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
15:35:43 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:43 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
15:35:43 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:35:43 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
15:35:43 229  ) AS
15:35:43 230  BEGIN
15:35:43 231  	-- Create history
15:35:43 232  	PROCS_HISTORY_V17.CREATE_PAYPAL_HISTORY(
15:35:43 233  	  in_paypal_id		       => in_paypal_id,
15:35:43 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43 235  	);
15:35:43 236  
15:35:43 237  	UPDATE PAYPAL SET
15:35:43 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
15:35:43 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
15:35:43 240  	  UPDATE_DATE	   = SYSDATE,
15:35:43 241  	  UPDATED_BY	   = in_updated_by,
15:35:43 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
15:35:43 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
15:35:43 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
15:35:43 245  	  STATE 		  = NVL(in_state, STATE),
15:35:43 246  	  CITY			  = NVL(in_city, CITY),
15:35:43 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
15:35:43 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
15:35:43 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
15:35:43 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
15:35:43 251  	WHERE
15:35:43 252  	  ID = in_paypal_id;
15:35:43 253  END UPDATE_PAYPAL;
15:35:43 254  
15:35:43 255  /******************************************************************************/
15:35:43 256  
15:35:43 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
15:35:43 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
15:35:43 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
15:35:43 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
15:35:43 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:43 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
15:35:43 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:35:43 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
15:35:43 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
15:35:43 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
15:35:43 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
15:35:43 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
15:35:43 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
15:35:43 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
15:35:43 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
15:35:43 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
15:35:43 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
15:35:43 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
15:35:43 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
15:35:43 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
15:35:43 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
15:35:43 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
15:35:43 279  ) AS
15:35:43 280  -- VARIABLES
15:35:43 281  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
15:35:43 282  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:43 283  var_date DATE := SYSDATE;
15:35:43 284  BEGIN
15:35:43 285  	IF in_gift_certificate_id IS NULL THEN
15:35:43 286  	  SELECT
15:35:43 287  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
15:35:43 288  	  FROM DUAL;
15:35:43 289  	ELSE
15:35:43 290  	  var_gift_certificate_id := in_gift_certificate_id;
15:35:43 291  	END IF;
15:35:43 292  	INSERT INTO GIFT_CERTIFICATE (
15:35:43 293  	    ID,
15:35:43 294  	    PURCHASER_GROUP_ID,
15:35:43 295  	    PURCHASE_INVOICE_ID,
15:35:43 296  	    OFFER_CHAIN_ID,
15:35:43 297  	    EXPIRATION_DATE,
15:35:43 298  	    PURCHASE_DATE,
15:35:43 299  	    GIFT_CERTIFICATE_STATUS_ID,
15:35:43 300  	    CODE,
15:35:43 301  	    CREATE_DATE,
15:35:43 302  	    CREATED_BY,
15:35:43 303  	    UPDATE_DATE,
15:35:43 304  	    UPDATED_BY,
15:35:43 305  	    RECIPIENT_NAME,
15:35:43 306  	    GIFT_MESSAGE,
15:35:43 307  	    RECIPIENT_EMAIL,
15:35:43 308  	    FINALIZED_INVOICE_ID,
15:35:43 309  	    SENDER_EMAIL,
15:35:43 310  	    SENDER_NAME,
15:35:43 311  	    REDEMPTION_DATE,
15:35:43 312  	    CANCELATION_DATE,
15:35:43 313  	    REDEEMER_GROUP_ID,
15:35:43 314  	    RECIPIENT_ADDRESS_ID,
15:35:43 315  	    RECIPIENT_NOTIFY_DATE
15:35:43 316  	  ) VALUES(
15:35:43 317  	    var_gift_certificate_id,
15:35:43 318  	    in_purchaser_group_id,
15:35:43 319  	    in_purchaser_invoice_id,
15:35:43 320  	    in_offer_chain_id,
15:35:43 321  	    in_expiration_date,
15:35:43 322  	    in_purchase_date,
15:35:43 323  	    in_gift_certificate_status_id,
15:35:43 324  	    in_code,
15:35:43 325  	    var_date,
15:35:43 326  	    in_created_by,
15:35:43 327  	    var_date,
15:35:43 328  	    in_created_by,
15:35:43 329  	    in_recipient_name,
15:35:43 330  	    in_gift_message,
15:35:43 331  	    in_recipient_email,
15:35:43 332  	    in_finalized_invoice_id,
15:35:43 333  	    in_sender_email,
15:35:43 334  	    in_sender_name,
15:35:43 335  	    in_redemption_date,
15:35:43 336  	    in_cancelation_date,
15:35:43 337  	    in_redeemer_group_id,
15:35:43 338  	    in_recipient_address_id,
15:35:43 339  	    in_recipient_notify_date
15:35:43 340  	  );
15:35:43 341  
15:35:43 342  	out_gift_certificate_id := var_gift_certificate_id;
15:35:43 343  END CREATE_GIFT_CERTIFICATE;
15:35:43 344  
15:35:43 345  /******************************************************************************/
15:35:43 346  
15:35:43 347  PROCEDURE UPDATE_GIFT_CERTIFICATE(
15:35:43 348  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
15:35:43 349  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:35:43 350  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
15:35:43 351  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
15:35:43 352  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
15:35:43 353  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
15:35:43 354  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
15:35:43 355  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
15:35:43 356  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
15:35:43 357  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
15:35:43 358  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
15:35:43 359  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
15:35:43 360  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
15:35:43 361  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
15:35:43 362  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
15:35:43 363  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
15:35:43 364  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
15:35:43 365  ) AS
15:35:43 366  BEGIN
15:35:43 367  
15:35:43 368  	-- Create history
15:35:43 369  	PROCS_HISTORY_V17.CREATE_GIFT_CERT_HISTORY(
15:35:43 370  	  in_gift_certificate_id       => in_gift_certificate_id,
15:35:43 371  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43 372  	);
15:35:43 373  
15:35:43 374  	UPDATE GIFT_CERTIFICATE SET
15:35:43 375  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
15:35:43 376  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
15:35:43 377  	  CODE			     = NVL(in_code, CODE),
15:35:43 378  	  UPDATE_DATE		     = SYSDATE,
15:35:43 379  	  UPDATED_BY		     = in_updated_by,
15:35:43 380  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
15:35:43 381  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
15:35:43 382  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
15:35:43 383  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
15:35:43 384  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
15:35:43 385  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
15:35:43 386  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
15:35:43 387  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
15:35:43 388  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
15:35:43 389  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
15:35:43 390  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
15:35:43 391  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
15:35:43 392  	WHERE
15:35:43 393  	  ID = in_gift_certificate_id;
15:35:43 394  
15:35:43 395  END UPDATE_GIFT_CERTIFICATE;
15:35:43 396  
15:35:43 397  END PROCS_FIN_INSTRUMENTS_CRU_V17;
15:35:43 398  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
15:35:43   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
15:35:43   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
15:35:43   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
15:35:43   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
15:35:43   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
15:35:43   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
15:35:43  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
15:35:43  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:43  12  ) AS
15:35:43  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
15:35:43  14  BEGIN
15:35:43  15  	UPDATE SUBSCRIPTION_SHARE SET
15:35:43  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
15:35:43  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
15:35:43  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
15:35:43  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
15:35:43  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
15:35:43  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
15:35:43  22  	  UPDATED_BY	       = in_updated_by,
15:35:43  23  	  UPDATE_DATE	       = SYSDATE
15:35:43  24  	WHERE
15:35:43  25  	  SUBSCRIPTION_SHARE.ID = in_id;
15:35:43  26  EXCEPTION
15:35:43  27  	WHEN OTHERS THEN
15:35:43  28  	  Procs_Common_V17.Throw_Exception(APP_EXCEPTION_CODES_V17.Internal_Error,
15:35:43  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
15:35:43  30  END UPDATE_SUBSCRIPTION_SHARE;
15:35:43  31  
15:35:43  32  PROCEDURE CREATE_GROUP_ACCOUNT (
15:35:43  33  	in_subscription_id	 IN NUMBER,
15:35:43  34  	in_group_name		 IN VARCHAR2,
15:35:43  35  	in_first_name		 IN VARCHAR2,
15:35:43  36  	in_last_name		 IN VARCHAR2,
15:35:43  37  	in_email		 IN VARCHAR2,
15:35:43  38  	in_phone		 IN VARCHAR2,
15:35:43  39  	in_organization_type	 IN VARCHAR2,
15:35:43  40  	in_seats		 IN NUMBER,
15:35:43  41  	in_seat_ttl_in_hours	 IN NUMBER,
15:35:43  42  	in_ip			 IN NUMBER,
15:35:43  43  	in_created_by		 IN VARCHAR2
15:35:43  44  ) AS
15:35:43  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
15:35:43  46  var_now DATE;
15:35:43  47  BEGIN
15:35:43  48  
15:35:43  49  	SELECT
15:35:43  50  	  SYSDATE INTO var_now
15:35:43  51  	FROM dual;
15:35:43  52  
15:35:43  53  	INSERT INTO GROUP_ACCOUNT (
15:35:43  54  	  id,
15:35:43  55  	  subscription_id,
15:35:43  56  	  group_name,
15:35:43  57  	  first_name,
15:35:43  58  	  last_name,
15:35:43  59  	  email,
15:35:43  60  	  phone,
15:35:43  61  	  organization_type,
15:35:43  62  	  seats,
15:35:43  63  	  seat_ttl_in_hours,
15:35:43  64  	  ip,
15:35:43  65  	  create_date,
15:35:43  66  	  created_by,
15:35:43  67  	  update_date,
15:35:43  68  	  updated_by
15:35:43  69  	) VALUES (
15:35:43  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
15:35:43  71  	  in_subscription_id,
15:35:43  72  	  in_group_name,
15:35:43  73  	  in_first_name,
15:35:43  74  	  in_last_name,
15:35:43  75  	  in_email,
15:35:43  76  	  in_phone,
15:35:43  77  	  in_organization_type,
15:35:43  78  	  in_seats,
15:35:43  79  	  in_seat_ttl_in_hours,
15:35:43  80  	  in_ip,
15:35:43  81  	  var_now,
15:35:43  82  	  in_created_by,
15:35:43  83  	  var_now,
15:35:43  84  	  in_created_by
15:35:43  85  	);
15:35:43  86  
15:35:43  87  EXCEPTION
15:35:43  88  	WHEN PROGRAM_ERROR THEN
15:35:43  89  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:43  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
15:35:43  91  	WHEN OTHERS THEN
15:35:43  92  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
15:35:43  94  END CREATE_GROUP_ACCOUNT;
15:35:43  95  
15:35:43  96  
15:35:43  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
15:35:43  98  	in_group_account_id    IN NUMBER,
15:35:43  99  	in_borrower_account_id IN NUMBER,
15:35:43 100  	in_ip_address	       IN VARCHAR2,
15:35:43 101  	in_email_domain        IN VARCHAR2,
15:35:43 102  	in_start_date	       IN DATE,
15:35:43 103  	in_end_date	       IN DATE,
15:35:43 104  	in_created_by	       IN VARCHAR2
15:35:43 105  ) AS
15:35:43 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
15:35:43 107  var_now DATE;
15:35:43 108  BEGIN
15:35:43 109  
15:35:43 110  	SELECT
15:35:43 111  	  SYSDATE INTO var_now
15:35:43 112  	FROM dual;
15:35:43 113  
15:35:43 114  	INSERT INTO SUBSCRIPTION_SHARE (
15:35:43 115  	  id,
15:35:43 116  	  group_account_id,
15:35:43 117  	  borrower_account_id,
15:35:43 118  	  ip_address,
15:35:43 119  	  email_domain,
15:35:43 120  	  start_date,
15:35:43 121  	  end_date,
15:35:43 122  	  create_date,
15:35:43 123  	  created_by,
15:35:43 124  	  update_date,
15:35:43 125  	  updated_by
15:35:43 126  	) VALUES (
15:35:43 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
15:35:43 128  	  in_group_account_id,
15:35:43 129  	  in_borrower_account_id,
15:35:43 130  	  in_ip_address,
15:35:43 131  	  in_email_domain,
15:35:43 132  	  in_start_date,
15:35:43 133  	  in_end_date,
15:35:43 134  	  var_now,
15:35:43 135  	  in_created_by,
15:35:43 136  	  var_now,
15:35:43 137  	  in_created_by
15:35:43 138  	);
15:35:43 139  
15:35:43 140  EXCEPTION
15:35:43 141  	WHEN PROGRAM_ERROR THEN
15:35:43 142  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:43 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
15:35:43 144  END CREATE_SUBSCRIPTION_SHARE;
15:35:43 145  
15:35:43 146  -- Eh, I don't like the cru packages at all
15:35:43 147  -- the idea of code reuse in PL/SQL is still lost on me
15:35:43 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
15:35:43 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:43 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:35:43 151  ) AS
15:35:43 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
15:35:43 153  BEGIN
15:35:43 154  	update
15:35:43 155  	  GROUP_ACCOUNT_IP_RANGE IR
15:35:43 156  	set
15:35:43 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V17.GROUP_ACC_IP_RNG_INACTIVE,
15:35:43 158  	  IR.UPDATED_BY = in_updated_by,
15:35:43 159  	  IR.UPDATE_DATE = sysdate
15:35:43 160  	where
15:35:43 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
15:35:43 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V17.GROUP_ACC_IP_RNG_ACTIVE
15:35:43 163  	;
15:35:43 164  EXCEPTION
15:35:43 165  WHEN OTHERS THEN
15:35:43 166  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:43 168  END DISABLE_IP_RANGES_BY_GA_ID;
15:35:43 169  
15:35:43 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
15:35:43 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
15:35:43 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:35:43 173  ) AS
15:35:43 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
15:35:43 175  BEGIN
15:35:43 176  	update
15:35:43 177  	  GROUP_ACCOUNT_IP_RANGE IR
15:35:43 178  	set
15:35:43 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V17.GROUP_ACC_IP_RNG_INACTIVE,
15:35:43 180  	  IR.UPDATED_BY = in_updated_by,
15:35:43 181  	  IR.UPDATE_DATE = sysdate
15:35:43 182  	where
15:35:43 183  	  IR.ID = in_id and
15:35:43 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V17.GROUP_ACC_IP_RNG_ACTIVE
15:35:43 185  	;
15:35:43 186  raise no_data_found;
15:35:43 187  EXCEPTION
15:35:43 188  WHEN OTHERS THEN
15:35:43 189  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 190  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
15:35:43 191  END DISABLE_IP_RANGE_BY_ID;
15:35:43 192  
15:35:43 193  PROCEDURE ADD_IP_RANGE (
15:35:43 194  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:43 195  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
15:35:43 196  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:35:43 197  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:35:43 198  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
15:35:43 199  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
15:35:43 200  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
15:35:43 201  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
15:35:43 202  ) AS
15:35:43 203  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
15:35:43 204  BEGIN
15:35:43 205  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
15:35:43 206  	    ID,
15:35:43 207  	    GROUP_ACCOUNT_ID,
15:35:43 208  	    MINIMUM_IP_STRING,
15:35:43 209  	    MINIMUM_IP_LOW,
15:35:43 210  	    MINIMUM_IP_HIGH,
15:35:43 211  	    MAXIMUM_IP_STRING,
15:35:43 212  	    MAXIMUM_IP_LOW,
15:35:43 213  	    MAXIMUM_IP_HIGH,
15:35:43 214  	    CREATED_BY,
15:35:43 215  	    CREATE_DATE,
15:35:43 216  	    UPDATED_BY,
15:35:43 217  	    UPDATE_DATE,
15:35:43 218  	    GROUP_ACC_IP_RNG_STATUS_ID
15:35:43 219  	  )
15:35:43 220  	  VALUES (
15:35:43 221  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
15:35:43 222  	    in_group_account_id,
15:35:43 223  	    in_minimum_ip_string,
15:35:43 224  	    in_minimum_ip_low,
15:35:43 225  	    in_minimum_ip_high,
15:35:43 226  	    in_maximum_ip_string,
15:35:43 227  	    in_maximum_ip_low,
15:35:43 228  	    in_maximum_ip_high,
15:35:43 229  	    in_created_by,
15:35:43 230  	    sysdate,
15:35:43 231  	    in_created_by,
15:35:43 232  	    sysdate,
15:35:43 233  	    GLOBAL_STATUSES_V17.GROUP_ACC_IP_RNG_ACTIVE
15:35:43 234  	  );
15:35:43 235  EXCEPTION
15:35:43 236  WHEN OTHERS THEN
15:35:43 237  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:43 239  END ADD_IP_RANGE;
15:35:43 240  
15:35:43 241  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
15:35:43 242  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:43 243  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:43 244  ) AS
15:35:43 245  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
15:35:43 246  BEGIN
15:35:43 247  	update
15:35:43 248  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
15:35:43 249  	set
15:35:43 250  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V17.GROUP_ACC_EMAIL_DOMAIN_INACT,
15:35:43 251  	  ED.UPDATED_BY = in_updated_by,
15:35:43 252  	  ED.UPDATE_DATE = sysdate
15:35:43 253  	where
15:35:43 254  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
15:35:43 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V17.GROUP_ACC_EMAIL_DOMAIN_ACT
15:35:43 256  	;
15:35:43 257  EXCEPTION
15:35:43 258  WHEN OTHERS THEN
15:35:43 259  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 260  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:43 261  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
15:35:43 262  
15:35:43 263  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
15:35:43 264  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:35:43 265  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:43 266  ) AS
15:35:43 267  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
15:35:43 268  BEGIN
15:35:43 269  	update
15:35:43 270  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
15:35:43 271  	set
15:35:43 272  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V17.GROUP_ACC_EMAIL_DOMAIN_INACT,
15:35:43 273  	  ED.UPDATED_BY = in_updated_by,
15:35:43 274  	  ED.UPDATE_DATE = sysdate
15:35:43 275  	where
15:35:43 276  	  ED.ID = in_id and
15:35:43 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V17.GROUP_ACC_EMAIL_DOMAIN_ACT
15:35:43 278  	;
15:35:43 279  EXCEPTION
15:35:43 280  WHEN OTHERS THEN
15:35:43 281  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 282  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
15:35:43 283  END DISABLE_EMAIL_DOMAIN_BY_ID;
15:35:43 284  
15:35:43 285  
15:35:43 286  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
15:35:43 287  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:35:43 288  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:43 289  ) AS
15:35:43 290  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
15:35:43 291  BEGIN
15:35:43 292  	update
15:35:43 293  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
15:35:43 294  	set
15:35:43 295  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V17.GROUP_ACC_EMAIL_DOMAIN_ACT,
15:35:43 296  	  ED.UPDATED_BY = in_updated_by,
15:35:43 297  	  ED.UPDATE_DATE = sysdate
15:35:43 298  	where
15:35:43 299  	  ED.ID = in_id and
15:35:43 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V17.GROUP_ACC_EMAIL_DOMAIN_INACT
15:35:43 301  	;
15:35:43 302  EXCEPTION
15:35:43 303  WHEN OTHERS THEN
15:35:43 304  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 305  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
15:35:43 306  END ENABLE_EMAIL_DOMAIN_BY_ID;
15:35:43 307  
15:35:43 308  
15:35:43 309  PROCEDURE ADD_EMAIL_DOMAIN (
15:35:43 310  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:43 311  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:35:43 312  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
15:35:43 313  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
15:35:43 314  ) AS
15:35:43 315  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
15:35:43 316  BEGIN
15:35:43 317  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
15:35:43 318  	    ID,
15:35:43 319  	    GROUP_ACCOUNT_ID,
15:35:43 320  	    EMAIL_DOMAIN,
15:35:43 321  		IS_ACTIVE,
15:35:43 322  	    CREATED_BY,
15:35:43 323  	    CREATE_DATE,
15:35:43 324  	    UPDATED_BY,
15:35:43 325  	    UPDATE_DATE
15:35:43 326  	  )
15:35:43 327  	  VALUES (
15:35:43 328  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
15:35:43 329  	    in_group_account_id,
15:35:43 330  		in_email_domain,
15:35:43 331  		in_is_active,
15:35:43 332  		in_created_by,
15:35:43 333  	    sysdate,
15:35:43 334  	    in_created_by,
15:35:43 335  	    sysdate
15:35:43 336  	  );
15:35:43 337  EXCEPTION
15:35:43 338  WHEN DUP_VAL_ON_INDEX THEN
15:35:43 339  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:43 340  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
15:35:43 341  WHEN OTHERS THEN
15:35:43 342  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 343  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
15:35:43 344  END ADD_EMAIL_DOMAIN;
15:35:43 345  
15:35:43 346  PROCEDURE UPDATE_GROUP_ACCOUNT (
15:35:43 347  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:35:43 348  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
15:35:43 349  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
15:35:43 350  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
15:35:43 351  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
15:35:43 352  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
15:35:43 353  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:35:43 354  ) AS
15:35:43 355  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
15:35:43 356  BEGIN
15:35:43 357  	update
15:35:43 358  	  group_account
15:35:43 359  	set
15:35:43 360  	  group_name = nvl(in_group_name, group_name),
15:35:43 361  	  first_name = nvl(in_first_name, first_name),
15:35:43 362  	  last_name = nvl(in_last_name, last_name),
15:35:43 363  	  email = nvl(in_email, email),
15:35:43 364  	  phone = nvl(in_phone, phone),
15:35:43 365  	  updated_by = in_updated_by,
15:35:43 366  	  update_date = sysdate
15:35:43 367  	where
15:35:43 368  	  id = in_group_account_id;
15:35:43 369  
15:35:43 370  	if(sql%rowcount = 0) then
15:35:43 371  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43 372  	  SPROC_NAME, 'Group Account not found', SQLERRM);
15:35:43 373  	end if;
15:35:43 374  EXCEPTION
15:35:43 375  	WHEN OTHERS THEN
15:35:43 376  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:43 377  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
15:35:43 378  END UPDATE_GROUP_ACCOUNT;
15:35:43 379  
15:35:43 380  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
15:35:43 381  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:35:43 382  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
15:35:43 383  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:35:43 384  ) AS
15:35:43 385  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
15:35:43 386  var_subscription_id NUMBER;
15:35:43 387  var_seats NUMBER;
15:35:43 388  BEGIN
15:35:43 389  	select subscription_id, seats into var_subscription_id, var_seats
15:35:43 390  	from group_account
15:35:43 391  	where id = in_group_account_id;
15:35:43 392  
15:35:43 393  	update
15:35:43 394  	  group_account
15:35:43 395  	set
15:35:43 396  	  seats = in_seats,
15:35:43 397  	  updated_by = in_updated_by,
15:35:43 398  	  update_date = sysdate
15:35:43 399  	where
15:35:43 400  	  id = in_group_account_id;
15:35:43 401  
15:35:43 402  	if(sql%rowcount = 0) then
15:35:43 403  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43 404  	  SPROC_NAME, 'Group Account not found', SQLERRM);
15:35:43 405  	end if;
15:35:43 406  
15:35:43 407  	PROCS_SUBSCRIPTION_V17.ANNOTATE_SUBSCRIPTION(
15:35:43 408  	  in_subscription_id => var_subscription_id,
15:35:43 409  	  in_agent_id	     => 0,
15:35:43 410  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
15:35:43 411  	  in_created_by      => in_updated_by
15:35:43 412  	);
15:35:43 413  EXCEPTION
15:35:43 414  	WHEN NO_DATA_FOUND THEN
15:35:43 415  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:43 416  	  SPROC_NAME, 'Group Account not found', SQLERRM);
15:35:43 417  	WHEN OTHERS THEN
15:35:43 418  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:43 419  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
15:35:43 420  END UPDATE_GROUP_ACCOUNT_SEATS;
15:35:43 421  
15:35:43 422  END PROCS_GROUP_ACCOUNT_CRU_V17;
15:35:43 423  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.04
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_INVOICE (
15:35:43   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
15:35:43   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
15:35:43   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
15:35:43   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
15:35:43   9  ) AS
15:35:43  10  -- VARIABLES
15:35:43  11  var_invoice_id INVOICE.ID%TYPE;
15:35:43  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:43  13  var_date DATE := SYSDATE;
15:35:43  14  BEGIN
15:35:43  15  	IF in_invoice_id IS NULL THEN
15:35:43  16  	  SELECT
15:35:43  17  	    INV_ID_SEQ.nextVal into var_invoice_id
15:35:43  18  	  FROM DUAL;
15:35:43  19  	ELSE
15:35:43  20  	  var_invoice_id := in_invoice_id;
15:35:43  21  	END IF;
15:35:43  22  	INSERT INTO
15:35:43  23  	  INVOICE (
15:35:43  24  	    ID,
15:35:43  25  	    INVOICE_STATUS_ID,
15:35:43  26  	    CREATE_DATE,
15:35:43  27  	    CREATED_BY,
15:35:43  28  	    UPDATE_DATE,
15:35:43  29  	    UPDATED_BY,
15:35:43  30  	    TAX_EXEMPT_ID,
15:35:43  31  	    IS_TAX_CALCULATION_NEEDED
15:35:43  32  	  ) VALUES (
15:35:43  33  	    var_invoice_id,
15:35:43  34  	    in_invoice_status_id,
15:35:43  35  	    var_date,
15:35:43  36  	    in_created_by,
15:35:43  37  	    var_date,
15:35:43  38  	    in_created_by,
15:35:43  39  	    in_tax_exempt_id,
15:35:43  40  	    0 -- DEFAULT VALUE
15:35:43  41  	  );
15:35:43  42  
15:35:43  43  	out_invoice_id := var_invoice_id;
15:35:43  44  END;
15:35:43  45  
15:35:43  46  /*****************************************************************/
15:35:43  47  
15:35:43  48  PROCEDURE UPDATE_INVOICE (
15:35:43  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
15:35:43  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
15:35:43  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
15:35:43  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
15:35:43  53  ) AS
15:35:43  54  BEGIN
15:35:43  55  	-- Create history
15:35:43  56  	PROCS_HISTORY_V17.CREATE_INVOICE_HISTORY(
15:35:43  57  	  in_invoice_id 	       => in_invoice_id,
15:35:43  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43  59  	);
15:35:43  60  
15:35:43  61  	UPDATE
15:35:43  62  	  INVOICE
15:35:43  63  	SET
15:35:43  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
15:35:43  65  	  UPDATE_DATE		    = SYSDATE,
15:35:43  66  	  UPDATED_BY		    = in_updated_by,
15:35:43  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
15:35:43  68  	WHERE
15:35:43  69  	  ID = in_invoice_id;
15:35:43  70  END;
15:35:43  71  
15:35:43  72  END PROCS_INVOICE_CRU_V17;
15:35:43  73  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_RECEIPT(
15:35:43   4  /*
15:35:43   5  Throws exceptions:
15:35:43   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43   7  */
15:35:43   8  	  out_id	      OUT NUMBER,
15:35:43   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:35:43  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
15:35:43  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
15:35:43  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
15:35:43  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:43  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:35:43  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:35:43  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:43  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:35:43  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:35:43  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:35:43  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
15:35:43  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
15:35:43  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:35:43  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
15:35:43  24  ) AS
15:35:43  25  -- VARIABLES
15:35:43  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
15:35:43  27  var_current_date	    DATE;
15:35:43  28  var_count 	    NUMBER;
15:35:43  29  ITUNES_ORG_TNX_USED   EXCEPTION;
15:35:43  30  BEGIN
15:35:43  31  	SELECT COUNT(1) into var_count
15:35:43  32  	FROM
15:35:43  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
15:35:43  34  	WHERE
15:35:43  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
15:35:43  36  	  IR.SUBSCRIPTION_ID = S.ID AND
15:35:43  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE;
15:35:43  38  
15:35:43  39  	if var_count > 0 then
15:35:43  40  	  raise ITUNES_ORG_TNX_USED;
15:35:43  41  	end if;
15:35:43  42  
15:35:43  43  	SELECT
15:35:43  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
15:35:43  45  	INTO
15:35:43  46  	  out_id
15:35:43  47  	FROM
15:35:43  48  	  dual
15:35:43  49  	;
15:35:43  50  
15:35:43  51  	SELECT
15:35:43  52  	  sysdate
15:35:43  53  	INTO
15:35:43  54  	  var_current_date
15:35:43  55  	FROM
15:35:43  56  	  dual
15:35:43  57  	;
15:35:43  58  
15:35:43  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
15:35:43  60  	(
15:35:43  61  	  id,
15:35:43  62  	  subscription_id,
15:35:43  63  	  receipt,
15:35:43  64  	  status,
15:35:43  65  	  quantity,
15:35:43  66  	  product_id,
15:35:43  67  	  transaction_id,
15:35:43  68  	  purchase_date,
15:35:43  69  	  original_transaction_id,
15:35:43  70  	  original_purchase_date,
15:35:43  71  	  app_item_id,
15:35:43  72  	  version_external_id,
15:35:43  73  	  bid,
15:35:43  74  	  bvrs,
15:35:43  75  	  expires_date,
15:35:43  76  	  create_date,
15:35:43  77  	  created_by,
15:35:43  78  	  update_date,
15:35:43  79  	  updated_by,
15:35:43  80  	  last_check_date
15:35:43  81  	)
15:35:43  82  	VALUES
15:35:43  83  	(
15:35:43  84  	  out_id,
15:35:43  85  	  in_subscription_id,
15:35:43  86  	  in_receipt,
15:35:43  87  	  in_status,
15:35:43  88  	  in_quantity,
15:35:43  89  	  in_product_id,
15:35:43  90  	  in_transaction_id,
15:35:43  91  	  in_purchase_date,
15:35:43  92  	  in_original_transaction_id,
15:35:43  93  	  in_original_purchase_date,
15:35:43  94  	  in_app_item_id,
15:35:43  95  	  in_version_external_id,
15:35:43  96  	  in_bid,
15:35:43  97  	  in_bvrs,
15:35:43  98  	  in_expires_date,
15:35:43  99  	  var_current_date,
15:35:43 100  	  in_created_by,
15:35:43 101  	  var_current_date,
15:35:43 102  	  in_created_by,
15:35:43 103  	  var_current_date
15:35:43 104  	);
15:35:43 105  
15:35:43 106  EXCEPTION
15:35:43 107  WHEN ITUNES_ORG_TNX_USED THEN
15:35:43 108  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:43 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
15:35:43 110  WHEN DUP_VAL_ON_INDEX THEN
15:35:43 111  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:43 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
15:35:43 113  WHEN OTHERS THEN
15:35:43 114  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:43 116  END CREATE_RECEIPT;
15:35:43 117  
15:35:43 118  PROCEDURE UPDATE_RECEIPT(
15:35:43 119  /*
15:35:43 120  Throws exceptions:
15:35:43 121  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 122  */
15:35:43 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
15:35:43 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
15:35:43 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
15:35:43 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
15:35:43 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:43 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:35:43 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:35:43 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:43 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:35:43 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:35:43 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:35:43 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
15:35:43 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
15:35:43 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:35:43 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
15:35:43 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
15:35:43 139  ) AS
15:35:43 140  -- VARIABLES
15:35:43 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
15:35:43 142  var_current_date	    DATE;
15:35:43 143  BEGIN
15:35:43 144  
15:35:43 145  	SELECT
15:35:43 146  	  sysdate
15:35:43 147  	INTO
15:35:43 148  	  var_current_date
15:35:43 149  	FROM
15:35:43 150  	  dual
15:35:43 151  	;
15:35:43 152  
15:35:43 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
15:35:43 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_ITUNES_RECEIPT_HISTORY
15:35:43 155  	  (
15:35:43 156  	      rec.id,
15:35:43 157  	      rec.subscription_id,
15:35:43 158  	      rec.receipt,
15:35:43 159  	      rec.status,
15:35:43 160  	      rec.quantity,
15:35:43 161  	      rec.product_id,
15:35:43 162  	      rec.transaction_id,
15:35:43 163  	      rec.purchase_date,
15:35:43 164  	      rec.original_transaction_id,
15:35:43 165  	      rec.original_purchase_date,
15:35:43 166  	      rec.app_item_id,
15:35:43 167  	      rec.version_external_id,
15:35:43 168  	      rec.bid,
15:35:43 169  	      rec.bvrs,
15:35:43 170  	      rec.expires_date,
15:35:43 171  	      rec.create_date,
15:35:43 172  	      rec.created_by,
15:35:43 173  	      rec.update_date,
15:35:43 174  	      rec.updated_by,
15:35:43 175  	      rec.last_check_date,
15:35:43 176  	      rec.cancel_date
15:35:43 177  	  );
15:35:43 178  	END LOOP;
15:35:43 179  
15:35:43 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
15:35:43 181  	SET
15:35:43 182  	  receipt = in_receipt,
15:35:43 183  	  status = in_status,
15:35:43 184  	  quantity = in_quantity,
15:35:43 185  	  product_id = in_product_id,
15:35:43 186  	  transaction_id = in_transaction_id,
15:35:43 187  	  purchase_date = in_purchase_date,
15:35:43 188  	  original_transaction_id = in_original_transaction_id,
15:35:43 189  	  original_purchase_date = in_original_purchase_date,
15:35:43 190  	  app_item_id = in_app_item_id,
15:35:43 191  	  version_external_id = in_version_external_id,
15:35:43 192  	  bid = in_bid,
15:35:43 193  	  bvrs = in_bvrs,
15:35:43 194  	  expires_date = in_expires_date,
15:35:43 195  	  update_date = var_current_date,
15:35:43 196  	  updated_by = in_updated_by,
15:35:43 197  	  last_check_date = var_current_date,
15:35:43 198  	  cancel_date = in_cancel_date
15:35:43 199  	WHERE
15:35:43 200  	  id = in_id
15:35:43 201  	;
15:35:43 202  
15:35:43 203  EXCEPTION
15:35:43 204  WHEN DUP_VAL_ON_INDEX THEN
15:35:43 205  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:43 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
15:35:43 207  WHEN OTHERS THEN
15:35:43 208  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:43 210  
15:35:43 211  END UPDATE_RECEIPT;
15:35:43 212  
15:35:43 213  PROCEDURE LINK_ITUNES_RECEIPT(
15:35:43 214  /*
15:35:43 215  Throws exceptions:
15:35:43 216  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 217  */
15:35:43 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
15:35:43 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:35:43 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
15:35:43 221  ) AS
15:35:43 222  -- VARIABLES
15:35:43 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
15:35:43 224  var_current_date	    DATE;
15:35:43 225  BEGIN
15:35:43 226  
15:35:43 227  	      SELECT
15:35:43 228  	  sysdate
15:35:43 229  	      INTO
15:35:43 230  	  var_current_date
15:35:43 231  	      FROM
15:35:43 232  	  dual
15:35:43 233  	      ;
15:35:43 234  
15:35:43 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
15:35:43 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_ITUNES_RECEIPT_HISTORY
15:35:43 237  	      (
15:35:43 238  	    rec.id,
15:35:43 239  	    rec.subscription_id,
15:35:43 240  	    rec.receipt,
15:35:43 241  	    rec.status,
15:35:43 242  	    rec.quantity,
15:35:43 243  	    rec.product_id,
15:35:43 244  	    rec.transaction_id,
15:35:43 245  	    rec.purchase_date,
15:35:43 246  	    rec.original_transaction_id,
15:35:43 247  	    rec.original_purchase_date,
15:35:43 248  	    rec.app_item_id,
15:35:43 249  	    rec.version_external_id,
15:35:43 250  	    rec.bid,
15:35:43 251  	    rec.bvrs,
15:35:43 252  	    rec.expires_date,
15:35:43 253  	    rec.create_date,
15:35:43 254  	    rec.created_by,
15:35:43 255  	    rec.update_date,
15:35:43 256  	    rec.updated_by,
15:35:43 257  	    rec.last_check_date,
15:35:43 258  	    rec.cancel_date
15:35:43 259  	      );
15:35:43 260  	      END LOOP;
15:35:43 261  
15:35:43 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
15:35:43 263  		SET
15:35:43 264  		      subscription_id = in_subscription_id,
15:35:43 265  		      update_date = var_current_date,
15:35:43 266  	      updated_by = in_updated_by,
15:35:43 267  	      last_check_date = var_current_date
15:35:43 268  	      WHERE
15:35:43 269  		  id = in_id
15:35:43 270  	      ;
15:35:43 271  
15:35:43 272  	      EXCEPTION
15:35:43 273  	      WHEN DUP_VAL_ON_INDEX THEN
15:35:43 274  		PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:43 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
15:35:43 276  	      WHEN OTHERS THEN
15:35:43 277  		PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:43 279  END LINK_ITUNES_RECEIPT;
15:35:43 280  
15:35:43 281  
15:35:43 282  PROCEDURE MARK_RECEIPT_CHECKED(
15:35:43 283  /*
15:35:43 284  Throws exceptions:
15:35:43 285  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:43 286  */
15:35:43 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
15:35:43 288  ) AS
15:35:43 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
15:35:43 290  BEGIN
15:35:43 291  	UPDATE
15:35:43 292  	  CORE_OWNER.ITUNES_RECEIPT
15:35:43 293  	SET
15:35:43 294  	  last_check_date = sysdate
15:35:43 295  	WHERE
15:35:43 296  	  id = in_id
15:35:43 297  	;
15:35:43 298  EXCEPTION
15:35:43 299  WHEN OTHERS THEN
15:35:43 300  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:43 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:43 302  END MARK_RECEIPT_CHECKED;
15:35:43 303  
15:35:43 304  END PROCS_ITUNES_RECEIPT_CRU_V17;
15:35:43 305  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.04
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_LICENSE(
15:35:43   4  	out_license_id		    OUT LICENSE.ID%TYPE,
15:35:43   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
15:35:43   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
15:35:43   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
15:35:43   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
15:35:43  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
15:35:43  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
15:35:43  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
15:35:43  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
15:35:43  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
15:35:43  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
15:35:43  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
15:35:43  17  ) AS
15:35:43  18  -- VARIABLES
15:35:43  19  var_license_id LICENSE.ID%TYPE;
15:35:43  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:43  21  var_date DATE := SYSDATE;
15:35:43  22  BEGIN
15:35:43  23  	IF in_license_id IS NULL THEN
15:35:43  24  	  SELECT
15:35:43  25  	    LCN_ID_SEQ.nextVal into var_license_id
15:35:43  26  	  FROM DUAL;
15:35:43  27  	ELSE
15:35:43  28  	  var_license_id := in_license_id;
15:35:43  29  	END IF;
15:35:43  30  	INSERT INTO
15:35:43  31  	  LICENSE (
15:35:43  32  	    ID,
15:35:43  33  	    LICENSE_STATUS_ID,
15:35:43  34  	    NEEDS_ENTITLEMENTS,
15:35:43  35  	    START_DATE,
15:35:43  36  	    OFFER_ID,
15:35:43  37  	    SUBSCRIPTION_ID,
15:35:43  38  	    INVOICE_ID,
15:35:43  39  	    END_DATE,
15:35:43  40  	    CREATE_DATE,
15:35:43  41  	    CREATED_BY,
15:35:43  42  	    UPDATE_DATE,
15:35:43  43  	    UPDATED_BY,
15:35:43  44  	    IS_EXTENSION,
15:35:43  45  	    CURRENT_OFFER_INDEX,
15:35:43  46  	    CURRENT_OFFER_RECURR_NUM,
15:35:43  47  	    ENTITLEMENT_END_DATE
15:35:43  48  	  ) VALUES (
15:35:43  49  	    var_license_id,
15:35:43  50  	    in_license_status_id,
15:35:43  51  	    in_needs_entitlements,
15:35:43  52  	    in_start_date,
15:35:43  53  	    in_offer_id,
15:35:43  54  	    in_subscription_id,
15:35:43  55  	    in_invoice_id,
15:35:43  56  	    in_end_date,
15:35:43  57  	    var_date,
15:35:43  58  	    in_created_by,
15:35:43  59  	    var_date,
15:35:43  60  	    in_created_by,
15:35:43  61  	    in_is_extension,
15:35:43  62  	    in_current_offer_index,
15:35:43  63  	    in_current_offer_recurr_num,
15:35:43  64  	    in_end_date
15:35:43  65  	  );
15:35:43  66  
15:35:43  67  	out_license_id := var_license_id;
15:35:43  68  END CREATE_LICENSE;
15:35:43  69  
15:35:43  70  /********************************************************************/
15:35:43  71  
15:35:43  72  PROCEDURE UPDATE_LICENSE (
15:35:43  73  	in_license_id		    IN LICENSE.ID%TYPE,
15:35:43  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
15:35:43  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
15:35:43  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
15:35:43  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
15:35:43  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
15:35:43  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
15:35:43  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
15:35:43  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
15:35:43  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
15:35:43  83  ) AS
15:35:43  84  BEGIN
15:35:43  85  	-- Create history
15:35:43  86  	PROCS_HISTORY_V17.CREATE_LICENSE_HISTORY(
15:35:43  87  	  in_license_id 	       => in_license_id,
15:35:43  88  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43  89  	);
15:35:43  90  
15:35:43  91  	UPDATE
15:35:43  92  	  LICENSE
15:35:43  93  	SET
15:35:43  94  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
15:35:43  95  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
15:35:43  96  	  START_DATE		   = NVL(in_start_date, START_DATE),
15:35:43  97  	  END_DATE		   = NVL(in_end_date, END_DATE),
15:35:43  98  	  UPDATE_DATE		   = SYSDATE,
15:35:43  99  	  UPDATED_BY		   = in_updated_by,
15:35:43 100  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
15:35:43 101  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
15:35:43 102  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
15:35:43 103  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE)
15:35:43 104  	WHERE
15:35:43 105  	  LICENSE.ID = in_license_id;
15:35:43 106  END UPDATE_LICENSE;
15:35:43 107  
15:35:43 108  END PROCS_LICENSE_CRU_V17;
15:35:43 109  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_LINE_ITEM (
15:35:43   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
15:35:43   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
15:35:43   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
15:35:43   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
15:35:43   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
15:35:43   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
15:35:43  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
15:35:43  11  ) AS
15:35:43  12  BEGIN
15:35:43  13  	IF inout_line_item_id IS NULL THEN
15:35:43  14  	  SELECT
15:35:43  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
15:35:43  16  	  FROM DUAL;
15:35:43  17  	END IF;
15:35:43  18  	INSERT INTO LINE_ITEM (
15:35:43  19  	  ID,
15:35:43  20  	  PRODUCT_OFFER_ID,
15:35:43  21  	  INVOICE_ID,
15:35:43  22  	  AMOUNT,
15:35:43  23  	  QUANTITY,
15:35:43  24  	  CREATE_DATE,
15:35:43  25  	  CREATED_BY,
15:35:43  26  	  DISCOUNT_AMOUNT,
15:35:43  27  	  TAXES_AMOUNT
15:35:43  28  	) VALUES (
15:35:43  29  	  inout_line_item_id,
15:35:43  30  	  in_product_offer_id,
15:35:43  31  	  in_invoice_id,
15:35:43  32  	  in_amount,
15:35:43  33  	  1, -- [REVU]: Deprecated. Ignore this field
15:35:43  34  	  SYSDATE,
15:35:43  35  	  in_created_by,
15:35:43  36  	  in_discount_amount,
15:35:43  37  	  in_taxes_amount
15:35:43  38  	);
15:35:43  39  END CREATE_LINE_ITEM;
15:35:43  40  
15:35:43  41  /******************************************************************************/
15:35:43  42  
15:35:43  43  PROCEDURE UPDATE_LINE_ITEM (
15:35:43  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
15:35:43  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
15:35:43  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
15:35:43  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
15:35:43  48  ) AS
15:35:43  49  BEGIN
15:35:43  50  	UPDATE
15:35:43  51  	  LINE_ITEM
15:35:43  52  	SET
15:35:43  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
15:35:43  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
15:35:43  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
15:35:43  56  	WHERE
15:35:43  57  	  LINE_ITEM.ID = in_line_item_id;
15:35:43  58  END UPDATE_LINE_ITEM;
15:35:43  59  
15:35:43  60  /******************************************************************************/
15:35:43  61  
15:35:43  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
15:35:43  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
15:35:43  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
15:35:43  65  ) AS
15:35:43  66  BEGIN
15:35:43  67  	INSERT INTO DISCOUNT_LINE_ITEM(
15:35:43  68  	  DISCOUNT_ID,
15:35:43  69  	  LINE_ITEM_ID
15:35:43  70  	) VALUES (
15:35:43  71  	  in_discount_id,
15:35:43  72  	  in_line_item_id
15:35:43  73  	);
15:35:43  74  END CREATE_DISCOUNT_LINE_ITEM;
15:35:43  75  
15:35:43  76  END PROCS_LINE_ITEMS_CRU_V17;
15:35:43  77  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
15:35:43   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
15:35:43   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:43   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
15:35:43   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
15:35:43   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
15:35:43  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
15:35:43  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
15:35:43  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:35:43  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
15:35:43  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
15:35:43  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
15:35:43  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:35:43  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
15:35:43  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
15:35:43  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
15:35:43  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
15:35:43  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
15:35:43  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
15:35:43  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
15:35:43  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
15:35:43  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
15:35:43  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
15:35:43  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
15:35:43  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
15:35:43  29  ) AS
15:35:43  30  -- VARIABLES
15:35:43  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
15:35:43  32  var_date DATE := SYSDATE;
15:35:43  33  BEGIN
15:35:43  34  	IF in_cpt_chargeback_act_id IS NULL THEN
15:35:43  35  	  SELECT
15:35:43  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
15:35:43  37  	  FROM DUAL;
15:35:43  38  	ELSE
15:35:43  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
15:35:43  40  	END IF;
15:35:43  41  	INSERT INTO
15:35:43  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
15:35:43  43  	    id,
15:35:43  44  	    rcn_ext_source_log_id,
15:35:43  45  	    record_type,
15:35:43  46  	    entity_type,
15:35:43  47  	    entity_number,
15:35:43  48  	    chargeback_amount_issuer,
15:35:43  49  	    prev_partial_representment,
15:35:43  50  	    presentment_currency,
15:35:43  51  	    chargeback_category,
15:35:43  52  	    status_flag,
15:35:43  53  	    sequence_number,
15:35:43  54  	    merchant_order_number,
15:35:43  55  	    account_number,
15:35:43  56  	    reason_code,
15:35:43  57  	    transaction_date,
15:35:43  58  	    chargeback_date,
15:35:43  59  	    activity_date,
15:35:43  60  	    chargeback_amount_action,
15:35:43  61  	    fee_amount,
15:35:43  62  	    usage_code,
15:35:43  63  	    mop_code,
15:35:43  64  	    authorization_date,
15:35:43  65  	    chargeback_due_date,
15:35:43  66  	    create_date,
15:35:43  67  	    created_by
15:35:43  68  	  ) VALUES (
15:35:43  69  	    var_cpt_chargeback_act_id,
15:35:43  70  	    in_ext_source_log_id,
15:35:43  71  	    in_record_type,
15:35:43  72  	    in_entity_type,
15:35:43  73  	    in_entity_number,
15:35:43  74  	    in_chargeback_amount_issuer,
15:35:43  75  	    in_prev_partial_repres,
15:35:43  76  	    in_presentment_currency,
15:35:43  77  	    in_chargeback_category,
15:35:43  78  	    in_status_flag,
15:35:43  79  	    in_sequence_number,
15:35:43  80  	    in_merchant_order_number,
15:35:43  81  	    in_account_number,
15:35:43  82  	    in_reason_code,
15:35:43  83  	    in_transaction_date,
15:35:43  84  	    in_chargeback_date,
15:35:43  85  	    in_activity_date,
15:35:43  86  	    in_chargeback_amount_action,
15:35:43  87  	    in_fee_amount,
15:35:43  88  	    in_usage_code,
15:35:43  89  	    in_mop_code,
15:35:43  90  	    in_authorization_date,
15:35:43  91  	    in_chargeback_due_date,
15:35:43  92  	    var_date,
15:35:43  93  	    in_created_by
15:35:43  94  	  );
15:35:43  95  
15:35:43  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
15:35:43  97  END CREATE_CPT_CHARGEBACK_ACT;
15:35:43  98  
15:35:43  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
15:35:43 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
15:35:43 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
15:35:43 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
15:35:43 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
15:35:43 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
15:35:43 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:35:43 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
15:35:43 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
15:35:43 108  ) AS
15:35:43 109  -- VARIABLES
15:35:43 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
15:35:43 111  var_date DATE := SYSDATE;
15:35:43 112  BEGIN
15:35:43 113  	IF in_ext_source_log_id IS NULL THEN
15:35:43 114  	  SELECT
15:35:43 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
15:35:43 116  	  FROM DUAL;
15:35:43 117  	ELSE
15:35:43 118  	  var_ext_source_log_id := in_ext_source_log_id;
15:35:43 119  	END IF;
15:35:43 120  	INSERT INTO
15:35:43 121  	  RCN_EXT_SOURCE_LOG (
15:35:43 122  	    id,
15:35:43 123  	    extraction_timestamp,
15:35:43 124  	    report_date,
15:35:43 125  	    report_generation_datetime,
15:35:43 126  	    record_type,
15:35:43 127  	    report_file_name,
15:35:43 128  	    create_date,
15:35:43 129  	    created_by
15:35:43 130  	  ) VALUES (
15:35:43 131  	    var_ext_source_log_id,
15:35:43 132  	    in_extraction_timestamp,
15:35:43 133  	    in_report_date,
15:35:43 134  	    in_report_gen_datetime,
15:35:43 135  	    in_record_type,
15:35:43 136  	    in_report_file_name,
15:35:43 137  	    var_date,
15:35:43 138  	    in_created_by
15:35:43 139  	  );
15:35:43 140  
15:35:43 141  	out_ext_source_log_id := var_ext_source_log_id;
15:35:43 142  END CREATE_EXT_SOURCE_LOG;
15:35:43 143  
15:35:43 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
15:35:43 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
15:35:43 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
15:35:43 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:43 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
15:35:43 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
15:35:43 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
15:35:43 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
15:35:43 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
15:35:43 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
15:35:43 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
15:35:43 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
15:35:43 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
15:35:43 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
15:35:43 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
15:35:43 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
15:35:43 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
15:35:43 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
15:35:43 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
15:35:43 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
15:35:43 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
15:35:43 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
15:35:43 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
15:35:43 167  ) AS
15:35:43 168  -- VARIABLES
15:35:43 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
15:35:43 170  var_date DATE := SYSDATE;
15:35:43 171  BEGIN
15:35:43 172  	IF in_cpt_service_charge_id IS NULL THEN
15:35:43 173  	  SELECT
15:35:43 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
15:35:43 175  	  FROM DUAL;
15:35:43 176  	ELSE
15:35:43 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
15:35:43 178  	END IF;
15:35:43 179  	INSERT INTO
15:35:43 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
15:35:43 181  	    id,
15:35:43 182  	    rcn_ext_source_log_id,
15:35:43 183  	    record_type,
15:35:43 184  	    category,
15:35:43 185  	    sub_category,
15:35:43 186  	    entity_type,
15:35:43 187  	    entity_number,
15:35:43 188  	    funds_transfer_inst_number,
15:35:43 189  	    secure_ba_number,
15:35:43 190  	    settlement_currency,
15:35:43 191  	    fee_schedule,
15:35:43 192  	    mop,
15:35:43 193  	    interchange_qualification,
15:35:43 194  	    fee_type_description,
15:35:43 195  	    action_type,
15:35:43 196  	    unit_quantity,
15:35:43 197  	    unit_fee,
15:35:43 198  	    amount,
15:35:43 199  	    percentage_rate,
15:35:43 200  	    total_charge,
15:35:43 201  	    create_date,
15:35:43 202  	    created_by
15:35:43 203  	  ) VALUES (
15:35:43 204  	    var_cpt_service_charge_id,
15:35:43 205  	    in_ext_source_log_id,
15:35:43 206  	    in_record_type,
15:35:43 207  	    in_category,
15:35:43 208  	    in_sub_category,
15:35:43 209  	    in_entity_type,
15:35:43 210  	    in_entity_number,
15:35:43 211  	    in_funds_trans_inst_number,
15:35:43 212  	    in_secure_ba_number,
15:35:43 213  	    in_settlement_currency,
15:35:43 214  	    in_fee_schedule,
15:35:43 215  	    in_mop,
15:35:43 216  	    in_interchange_qual,
15:35:43 217  	    in_fee_type_description,
15:35:43 218  	    in_action_type,
15:35:43 219  	    in_unit_quantity,
15:35:43 220  	    in_unit_fee,
15:35:43 221  	    in_amount,
15:35:43 222  	    in_percentage_rate,
15:35:43 223  	    in_total_charge,
15:35:43 224  	    var_date,
15:35:43 225  	    in_created_by
15:35:43 226  	  );
15:35:43 227  
15:35:43 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
15:35:43 229  END CREATE_CPT_SERVICE_CHARGE;
15:35:43 230  
15:35:43 231  PROCEDURE CREATE_CPT_EXCEPTION (
15:35:43 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
15:35:43 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
15:35:43 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:43 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
15:35:43 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
15:35:43 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
15:35:43 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
15:35:43 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
15:35:43 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
15:35:43 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
15:35:43 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
15:35:43 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:35:43 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:35:43 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
15:35:43 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
15:35:43 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
15:35:43 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
15:35:43 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
15:35:43 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
15:35:43 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
15:35:43 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
15:35:43 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
15:35:43 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
15:35:43 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
15:35:43 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
15:35:43 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
15:35:43 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
15:35:43 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
15:35:43 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
15:35:43 261  ) AS
15:35:43 262  -- VARIABLES
15:35:43 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
15:35:43 264  var_date DATE := SYSDATE;
15:35:43 265  BEGIN
15:35:43 266  	IF in_cpt_exception_id IS NULL THEN
15:35:43 267  	  SELECT
15:35:43 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
15:35:43 269  	  FROM DUAL;
15:35:43 270  	ELSE
15:35:43 271  	  var_cpt_exception_id := in_cpt_exception_id;
15:35:43 272  	END IF;
15:35:43 273  	INSERT INTO
15:35:43 274  	  RCN_CPT_EXCEPTION_DETAIL (
15:35:43 275  	    id,
15:35:43 276  	    rcn_ext_source_log_id,
15:35:43 277  	    record_type,
15:35:43 278  	    submission_date,
15:35:43 279  	    pid_number,
15:35:43 280  	    pid_short_name,
15:35:43 281  	    submission_number,
15:35:43 282  	    record_number,
15:35:43 283  	    entity_type,
15:35:43 284  	    entity_number,
15:35:43 285  	    presentment_currency,
15:35:43 286  	    merchant_order_number,
15:35:43 287  	    rdfi_number,
15:35:43 288  	    account_number,
15:35:43 289  	    expiration_date,
15:35:43 290  	    amount,
15:35:43 291  	    mop,
15:35:43 292  	    action_code,
15:35:43 293  	    auth_date,
15:35:43 294  	    auth_code,
15:35:43 295  	    auth_response_code,
15:35:43 296  	    trace_number,
15:35:43 297  	    consumer_country_code,
15:35:43 298  	    category,
15:35:43 299  	    mcc,
15:35:43 300  	    reject_code,
15:35:43 301  	    submission_status,
15:35:43 302  	    create_date,
15:35:43 303  	    created_by
15:35:43 304  	  ) VALUES (
15:35:43 305  	    var_cpt_exception_id,
15:35:43 306  	    in_ext_source_log_id,
15:35:43 307  	    in_record_type,
15:35:43 308  	    in_submission_date,
15:35:43 309  	    in_pid_number,
15:35:43 310  	    in_pid_short_name,
15:35:43 311  	    in_submission_number,
15:35:43 312  	    in_record_number,
15:35:43 313  	    in_entity_type,
15:35:43 314  	    in_entity_number,
15:35:43 315  	    in_presentment_currency,
15:35:43 316  	    in_merchant_order_number,
15:35:43 317  	    in_rdfi_number,
15:35:43 318  	    in_account_number,
15:35:43 319  	    in_expiration_date,
15:35:43 320  	    in_amount,
15:35:43 321  	    in_mop,
15:35:43 322  	    in_action_code,
15:35:43 323  	    in_auth_date,
15:35:43 324  	    in_auth_code,
15:35:43 325  	    in_auth_response_code,
15:35:43 326  	    in_trace_number,
15:35:43 327  	    in_consumer_country_code,
15:35:43 328  	    in_category,
15:35:43 329  	    in_mcc,
15:35:43 330  	    in_reject_code,
15:35:43 331  	    in_submission_status,
15:35:43 332  	    var_date,
15:35:43 333  	    in_created_by
15:35:43 334  	  );
15:35:43 335  
15:35:43 336  	out_cpt_exception_id := var_cpt_exception_id;
15:35:43 337  END CREATE_CPT_EXCEPTION;
15:35:43 338  
15:35:43 339  PROCEDURE CREATE_CPT_DEPOSIT (
15:35:43 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
15:35:43 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
15:35:43 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:43 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
15:35:43 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
15:35:43 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
15:35:43 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
15:35:43 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
15:35:43 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
15:35:43 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
15:35:43 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
15:35:43 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:35:43 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:35:43 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
15:35:43 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
15:35:43 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
15:35:43 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
15:35:43 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
15:35:43 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
15:35:43 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
15:35:43 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
15:35:43 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
15:35:43 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
15:35:43 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
15:35:43 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
15:35:43 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
15:35:43 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
15:35:43 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
15:35:43 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
15:35:43 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
15:35:43 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
15:35:43 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
15:35:43 372  ) AS
15:35:43 373  -- VARIABLES
15:35:43 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
15:35:43 375  var_date DATE := SYSDATE;
15:35:43 376  BEGIN
15:35:43 377  	IF in_cpt_deposit_id IS NULL THEN
15:35:43 378  	  SELECT
15:35:43 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
15:35:43 380  	  FROM DUAL;
15:35:43 381  	ELSE
15:35:43 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
15:35:43 383  	END IF;
15:35:43 384  	INSERT INTO
15:35:43 385  	  RCN_CPT_DEPOSIT_DETAIL (
15:35:43 386  	    id,
15:35:43 387  	    rcn_ext_source_log_id,
15:35:43 388  	    record_type,
15:35:43 389  	    submission_date,
15:35:43 390  	    pid_number,
15:35:43 391  	    pid_short_name,
15:35:43 392  	    submission_number,
15:35:43 393  	    record_number,
15:35:43 394  	    entity_type,
15:35:43 395  	    entity_number,
15:35:43 396  	    presentment_currency,
15:35:43 397  	    merchant_order_number,
15:35:43 398  	    rdfi_number,
15:35:43 399  	    account_number,
15:35:43 400  	    expiration_date,
15:35:43 401  	    amount,
15:35:43 402  	    mop,
15:35:43 403  	    action_code,
15:35:43 404  	    auth_date,
15:35:43 405  	    auth_code,
15:35:43 406  	    auth_response_code,
15:35:43 407  	    trace_number,
15:35:43 408  	    consumer_country_code,
15:35:43 409  	    mcc,
15:35:43 410  	    fee_code,
15:35:43 411  	    unit_fee,
15:35:43 412  	    percent_fee,
15:35:43 413  	    total_interchange_fee,
15:35:43 414  	    total_assessment_fee,
15:35:43 415  	    other_fee,
15:35:43 416  	    create_date,
15:35:43 417  	    created_by
15:35:43 418  	  ) VALUES (
15:35:43 419  	    var_cpt_deposit_id,
15:35:43 420  	    in_ext_source_log_id,
15:35:43 421  	    in_record_type,
15:35:43 422  	    in_submission_date,
15:35:43 423  	    in_pid_number,
15:35:43 424  	    in_pid_short_name,
15:35:43 425  	    in_submission_number,
15:35:43 426  	    in_record_number,
15:35:43 427  	    in_entity_type,
15:35:43 428  	    in_entity_number,
15:35:43 429  	    in_presentment_currency,
15:35:43 430  	    in_merchant_order_number,
15:35:43 431  	    in_rdfi_number,
15:35:43 432  	    in_account_number,
15:35:43 433  	    in_expiration_date,
15:35:43 434  	    in_amount,
15:35:43 435  	    in_mop,
15:35:43 436  	    in_action_code,
15:35:43 437  	    in_auth_date,
15:35:43 438  	    in_auth_code,
15:35:43 439  	    in_auth_response_code,
15:35:43 440  	    in_trace_number,
15:35:43 441  	    in_consumer_country_code,
15:35:43 442  	    in_mcc,
15:35:43 443  	    in_fee_code,
15:35:43 444  	    in_unit_fee,
15:35:43 445  	    in_percent_fee,
15:35:43 446  	    in_total_interchange_fee,
15:35:43 447  	    in_total_assessment_fee,
15:35:43 448  	    in_other_fee,
15:35:43 449  	    var_date,
15:35:43 450  	    in_created_by
15:35:43 451  	  );
15:35:43 452  
15:35:43 453  	out_cpt_deposit_id := var_cpt_deposit_id;
15:35:43 454  END CREATE_CPT_DEPOSIT;
15:35:43 455  
15:35:43 456  PROCEDURE CREATE_PP_SETTLEMENT (
15:35:43 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
15:35:43 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
15:35:43 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:43 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
15:35:43 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
15:35:43 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
15:35:43 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
15:35:43 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
15:35:43 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
15:35:43 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
15:35:43 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
15:35:43 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
15:35:43 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
15:35:43 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
15:35:43 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
15:35:43 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
15:35:43 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
15:35:43 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
15:35:43 475  ) AS
15:35:43 476  -- VARIABLES
15:35:43 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
15:35:43 478  var_date DATE := SYSDATE;
15:35:43 479  BEGIN
15:35:43 480  	IF in_pp_settlement_id IS NULL THEN
15:35:43 481  	  SELECT
15:35:43 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
15:35:43 483  	  FROM DUAL;
15:35:43 484  	ELSE
15:35:43 485  	  var_pp_settlement_id := in_pp_settlement_id;
15:35:43 486  	END IF;
15:35:43 487  	INSERT INTO
15:35:43 488  	  RCN_PP_SETTLEMENT (
15:35:43 489  	    id,
15:35:43 490  	    rcn_ext_source_log_id,
15:35:43 491  	    transaction_id,
15:35:43 492  	    invoice_id,
15:35:43 493  	    pp_ref_id,
15:35:43 494  	    pp_ref_id_type,
15:35:43 495  	    trans_event_code,
15:35:43 496  	    trans_init_date,
15:35:43 497  	    trans_comp_date,
15:35:43 498  	    trans_deb_or_cred,
15:35:43 499  	    gross_trans_amount,
15:35:43 500  	    gross_trans_currency,
15:35:43 501  	    fee_deb_or_cred,
15:35:43 502  	    fee_amount,
15:35:43 503  	    fee_currency,
15:35:43 504  	    custom_field,
15:35:43 505  	    create_date,
15:35:43 506  	    created_by
15:35:43 507  	  ) VALUES (
15:35:43 508  	    var_pp_settlement_id,
15:35:43 509  	    in_ext_source_log_id,
15:35:43 510  	    in_transaction_id,
15:35:43 511  	    in_invoice_id,
15:35:43 512  	    in_pp_ref_id,
15:35:43 513  	    in_pp_ref_id_type,
15:35:43 514  	    in_trans_event_code,
15:35:43 515  	    in_trans_init_date,
15:35:43 516  	    in_trans_comp_date,
15:35:43 517  	    in_trans_deb_or_cred,
15:35:43 518  	    in_gross_trans_amount,
15:35:43 519  	    in_gross_trans_currency,
15:35:43 520  	    in_fee_deb_or_cred,
15:35:43 521  	    in_fee_amount,
15:35:43 522  	    in_fee_currency,
15:35:43 523  	    in_custom_field,
15:35:43 524  	    var_date,
15:35:43 525  	    in_created_by
15:35:43 526  	  );
15:35:43 527  
15:35:43 528  	out_pp_settlement_id := var_pp_settlement_id;
15:35:43 529  END CREATE_PP_SETTLEMENT;
15:35:43 530  
15:35:43 531  PROCEDURE CREATE_PP_DISPUTE (
15:35:43 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
15:35:43 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
15:35:43 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:43 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
15:35:43 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
15:35:43 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
15:35:43 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
15:35:43 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
15:35:43 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
15:35:43 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
15:35:43 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
15:35:43 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
15:35:43 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
15:35:43 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
15:35:43 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
15:35:43 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
15:35:43 548  ) AS
15:35:43 549  -- VARIABLES
15:35:43 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
15:35:43 551  var_date DATE := SYSDATE;
15:35:43 552  BEGIN
15:35:43 553  	IF in_pp_dispute_id IS NULL THEN
15:35:43 554  	  SELECT
15:35:43 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
15:35:43 556  	  FROM DUAL;
15:35:43 557  	ELSE
15:35:43 558  	  var_pp_dispute_id := in_pp_dispute_id;
15:35:43 559  	END IF;
15:35:43 560  	INSERT INTO
15:35:43 561  	  RCN_PP_DISPUTE (
15:35:43 562  	    id,
15:35:43 563  	    rcn_ext_source_log_id,
15:35:43 564  	    dispute_type,
15:35:43 565  	    claimant_name,
15:35:43 566  	    claimant_email,
15:35:43 567  	    transaction_id,
15:35:43 568  	    trans_date,
15:35:43 569  	    disputed_amount,
15:35:43 570  	    disputed_amount_currency,
15:35:43 571  	    dispute_reason,
15:35:43 572  	    dispute_filing_date,
15:35:43 573  	    dispute_status,
15:35:43 574  	    dispute_case_id,
15:35:43 575  	    invoice_id,
15:35:43 576  	    create_date,
15:35:43 577  	    created_by
15:35:43 578  	  ) VALUES (
15:35:43 579  	    var_pp_dispute_id,
15:35:43 580  	    in_ext_source_log_id,
15:35:43 581  	    in_dispute_type,
15:35:43 582  	    in_claimant_name,
15:35:43 583  	    in_claimant_email,
15:35:43 584  	    in_transaction_id,
15:35:43 585  	    in_trans_date,
15:35:43 586  	    in_disputed_amount,
15:35:43 587  	    in_disputed_amount_currency,
15:35:43 588  	    in_dispute_reason,
15:35:43 589  	    in_dispute_filing_date,
15:35:43 590  	    in_dispute_status,
15:35:43 591  	    in_dispute_case_id,
15:35:43 592  	    in_invoice_id,
15:35:43 593  	    var_date,
15:35:43 594  	    in_created_by
15:35:43 595  	  );
15:35:43 596  
15:35:43 597  	out_pp_dispute_id := var_pp_dispute_id;
15:35:43 598  END CREATE_PP_DISPUTE;
15:35:43 599  
15:35:43 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
15:35:43 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
15:35:43 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
15:35:43 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:35:43 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
15:35:43 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
15:35:43 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
15:35:43 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
15:35:43 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
15:35:43 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
15:35:43 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
15:35:43 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
15:35:43 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
15:35:43 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
15:35:43 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
15:35:43 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
15:35:43 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
15:35:43 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
15:35:43 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
15:35:43 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
15:35:43 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
15:35:43 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
15:35:43 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
15:35:43 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
15:35:43 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
15:35:43 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
15:35:43 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
15:35:43 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
15:35:43 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
15:35:43 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
15:35:43 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
15:35:43 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
15:35:43 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
15:35:43 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
15:35:43 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
15:35:43 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
15:35:43 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
15:35:43 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
15:35:43 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
15:35:43 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
15:35:43 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
15:35:43 641  ) AS
15:35:43 642  -- VARIABLES
15:35:43 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
15:35:43 644  var_date DATE := SYSDATE;
15:35:43 645  BEGIN
15:35:43 646  	IF in_pp_trans_detail_id IS NULL THEN
15:35:43 647  	  SELECT
15:35:43 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
15:35:43 649  	  FROM DUAL;
15:35:43 650  	ELSE
15:35:43 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
15:35:43 652  	END IF;
15:35:43 653  	INSERT INTO
15:35:43 654  	  RCN_PP_TRANS_DETAIL (
15:35:43 655  	    id,
15:35:43 656  	    rcn_ext_source_log_id,
15:35:43 657  	    transaction_id,
15:35:43 658  	    invoice_id,
15:35:43 659  	    pp_ref_id,
15:35:43 660  	    trans_event_code,
15:35:43 661  	    trans_init_date,
15:35:43 662  	    trans_comp_date,
15:35:43 663  	    trans_deb_or_cred,
15:35:43 664  	    gross_trans_amount,
15:35:43 665  	    gross_trans_currency,
15:35:43 666  	    fee_deb_or_cred,
15:35:43 667  	    fee_amount,
15:35:43 668  	    fee_currency,
15:35:43 669  	    trans_status,
15:35:43 670  	    insurance_amount,
15:35:43 671  	    sales_tax_amount,
15:35:43 672  	    shipping_amount,
15:35:43 673  	    trans_subject,
15:35:43 674  	    trans_note,
15:35:43 675  	    payer_acct_id,
15:35:43 676  	    payer_addr_status,
15:35:43 677  	    item_name,
15:35:43 678  	    item_id,
15:35:43 679  	    option_1_name,
15:35:43 680  	    option_1_value,
15:35:43 681  	    option_2_name,
15:35:43 682  	    option_2_value,
15:35:43 683  	    auction_site,
15:35:43 684  	    auction_buyer_id,
15:35:43 685  	    auction_closing_date,
15:35:43 686  	    shipping_addr_line_1,
15:35:43 687  	    shipping_addr_line_2,
15:35:43 688  	    shipping_addr_city,
15:35:43 689  	    shipping_addr_state,
15:35:43 690  	    shipping_addr_zip,
15:35:43 691  	    shipping_addr_country,
15:35:43 692  	    custom_field,
15:35:43 693  	    create_date,
15:35:43 694  	    created_by
15:35:43 695  	  ) VALUES (
15:35:43 696  	    var_pp_trans_detail_id,
15:35:43 697  	    in_ext_source_log_id,
15:35:43 698  	    in_transaction_id,
15:35:43 699  	    in_invoice_id,
15:35:43 700  	    in_pp_ref_id,
15:35:43 701  	    in_trans_event_code,
15:35:43 702  	    in_trans_init_date,
15:35:43 703  	    in_trans_comp_date,
15:35:43 704  	    in_trans_deb_or_cred,
15:35:43 705  	    in_gross_trans_amount,
15:35:43 706  	    in_gross_trans_currency,
15:35:43 707  	    in_fee_deb_or_cred,
15:35:43 708  	    in_fee_amount,
15:35:43 709  	    in_fee_currency,
15:35:43 710  	    in_trans_status,
15:35:43 711  	    in_insurance_amount,
15:35:43 712  	    in_sales_tax_amount,
15:35:43 713  	    in_shipping_amount,
15:35:43 714  	    in_trans_subject,
15:35:43 715  	    in_trans_note,
15:35:43 716  	    in_payer_acct_id,
15:35:43 717  	    in_payer_addr_status,
15:35:43 718  	    in_item_name,
15:35:43 719  	    in_item_id,
15:35:43 720  	    in_option_1_name,
15:35:43 721  	    in_option_1_value,
15:35:43 722  	    in_option_2_name,
15:35:43 723  	    in_option_2_value,
15:35:43 724  	    in_auction_site,
15:35:43 725  	    in_auction_buyer_id,
15:35:43 726  	    in_auction_closing_date,
15:35:43 727  	    in_shipping_addr_line_1,
15:35:43 728  	    in_shipping_addr_line_2,
15:35:43 729  	    in_shipping_addr_city,
15:35:43 730  	    in_shipping_addr_state,
15:35:43 731  	    in_shipping_addr_zip,
15:35:43 732  	    in_shipping_addr_country,
15:35:43 733  	    in_custom_field,
15:35:43 734  	    var_date,
15:35:43 735  	    in_created_by
15:35:43 736  	  );
15:35:43 737  
15:35:43 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
15:35:43 739  END CREATE_PP_TRANS_DETAIL;
15:35:43 740  
15:35:43 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
15:35:43 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:35:43 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
15:35:43 744  ) AS
15:35:43 745  BEGIN
15:35:43 746  	DELETE FROM
15:35:43 747  	  RCN_EXT_SOURCE_LOG
15:35:43 748  	WHERE
15:35:43 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
15:35:43 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
15:35:43 751  END DELETE_EXT_SOURCE_LOG;
15:35:43 752  
15:35:43 753  PROCEDURE GET_EXT_SOURCE_LOG (
15:35:43 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:35:43 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
15:35:43 756  	out_result_set		 OUT SYS_REFCURSOR
15:35:43 757  ) AS
15:35:43 758  BEGIN
15:35:43 759  	OPEN out_result_set FOR
15:35:43 760  	SELECT * FROM
15:35:43 761  	  RCN_EXT_SOURCE_LOG
15:35:43 762  	WHERE
15:35:43 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
15:35:43 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
15:35:43 765  END GET_EXT_SOURCE_LOG;
15:35:43 766  
15:35:43 767  FUNCTION CHECK_EXT_SOURCE_LOG (
15:35:43 768  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:35:43 769  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
15:35:43 770  ) RETURN NUMBER AS
15:35:43 771  var_exists NUMBER;
15:35:43 772  BEGIN
15:35:43 773  	SELECT count(1) INTO var_exists
15:35:43 774  	FROM
15:35:43 775  	  RCN_EXT_SOURCE_LOG
15:35:43 776  	WHERE
15:35:43 777  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
15:35:43 778  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
15:35:43 779  
15:35:43 780  	IF var_exists > 1 THEN
15:35:43 781  	  var_exists := 1;
15:35:43 782  	END IF;
15:35:43 783  
15:35:43 784  	RETURN var_exists;
15:35:43 785  END;
15:35:43 786  
15:35:43 787  PROCEDURE CREATE_AMEX_CHARGEBACK (
15:35:43 788  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
15:35:43 789  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
15:35:43 790  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
15:35:43 791  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
15:35:43 792  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
15:35:43 793  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
15:35:43 794  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
15:35:43 795  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
15:35:43 796  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
15:35:43 797  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
15:35:43 798  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
15:35:43 799  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
15:35:43 800  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
15:35:43 801  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
15:35:43 802  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
15:35:43 803  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
15:35:43 804  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
15:35:43 805  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
15:35:43 806  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
15:35:43 807  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
15:35:43 808  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
15:35:43 809  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
15:35:43 810  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
15:35:43 811  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
15:35:43 812  ) AS
15:35:43 813  var_amex_chargeback_id RCN_AMEX_CHARGEBACK.ID%TYPE;
15:35:43 814  var_date DATE := SYSDATE;
15:35:43 815  BEGIN
15:35:43 816  	SELECT
15:35:43 817  	  RCNAMEXCB_ID_SEQ.nextVal into var_amex_chargeback_id
15:35:43 818  	FROM DUAL;
15:35:43 819  
15:35:43 820  	INSERT INTO
15:35:43 821  	  RCN_AMEX_CHARGEBACK (
15:35:43 822  	    id,
15:35:43 823  	    rcn_ext_source_log_id,
15:35:43 824  	    resolution,
15:35:43 825  	    from_system,
15:35:43 826  	    rejects_to_system,
15:35:43 827  	    disputes_to_system,
15:35:43 828  	    date_of_adjustment,
15:35:43 829  	    date_of_charge,
15:35:43 830  	    case_type,
15:35:43 831  	    cb_reas_code,
15:35:43 832  	    cb_amount,
15:35:43 833  	    cb_adjustment_number,
15:35:43 834  	    billed_amount,
15:35:43 835  	    soc_amount,
15:35:43 836  	    foreign_amount,
15:35:43 837  	    currency,
15:35:43 838  	    note1,
15:35:43 839  	    note2,
15:35:43 840  	    note3,
15:35:43 841  	    note4,
15:35:43 842  	    note5,
15:35:43 843  	    note6,
15:35:43 844  	    note7,
15:35:43 845  	    ind_ref_number,
15:35:43 846  	    create_date,
15:35:43 847  	    created_by,
15:35:43 848  	    update_date,
15:35:43 849  	    updated_by
15:35:43 850  	  ) VALUES (
15:35:43 851  	    var_amex_chargeback_id,
15:35:43 852  	    in_rcn_ext_source_log_id,
15:35:43 853  	    in_resolution,
15:35:43 854  	    in_from_system,
15:35:43 855  	    in_rejects_to_system,
15:35:43 856  	    in_disputes_to_system,
15:35:43 857  	    in_date_of_adjustment,
15:35:43 858  	    in_date_of_charge,
15:35:43 859  	    in_case_type,
15:35:43 860  	    in_cb_reas_code,
15:35:43 861  	    in_cb_amount,
15:35:43 862  	    in_cb_adjustment_number,
15:35:43 863  	    in_billed_amount,
15:35:43 864  	    in_soc_amount,
15:35:43 865  	    in_foreign_amount,
15:35:43 866  	    in_currency,
15:35:43 867  	    in_note1,
15:35:43 868  	    in_note2,
15:35:43 869  	    in_note3,
15:35:43 870  	    in_note4,
15:35:43 871  	    in_note5,
15:35:43 872  	    in_note6,
15:35:43 873  	    in_note7,
15:35:43 874  	    in_ind_ref_number,
15:35:43 875  	    var_date,
15:35:43 876  	    in_created_by,
15:35:43 877  	    var_date,
15:35:43 878  	    in_created_by
15:35:43 879  	  );
15:35:43 880  
15:35:43 881  END CREATE_AMEX_CHARGEBACK;
15:35:43 882  
15:35:43 883  END PROCS_RECONCILIATION_CRU_V17;
15:35:43 884  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:35:43 SQL> 
15:35:43 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V17" AS
15:35:43   2  
15:35:43   3  PROCEDURE CREATE_SUBSCRIPTION(
15:35:43   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
15:35:43   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
15:35:43   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
15:35:43   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
15:35:43   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
15:35:43   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
15:35:43  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
15:35:43  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
15:35:43  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
15:35:43  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
15:35:43  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
15:35:43  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
15:35:43  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
15:35:43  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
15:35:43  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
15:35:43  19  ) AS
15:35:43  20  -- VARIABLES
15:35:43  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
15:35:43  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:43  23  var_date DATE := SYSDATE;
15:35:43  24  BEGIN
15:35:43  25  	IF in_subscription_id IS NULL THEN
15:35:43  26  	  SELECT
15:35:43  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
15:35:43  28  	  FROM DUAL;
15:35:43  29  	ELSE
15:35:43  30  	  var_new_subscription_id := in_subscription_id;
15:35:43  31  	END IF;
15:35:43  32  	INSERT INTO SUBSCRIPTION (
15:35:43  33  	  ID,
15:35:43  34  	  SUSPEND_DATE,
15:35:43  35  	  ACCOUNT_ID,
15:35:43  36  	  PURCHASE_DATE,
15:35:43  37  	  OFFER_CHAIN_ID,
15:35:43  38  	  TERMINATION_DATE,
15:35:43  39  	  DAYS_REMAINING_ADJUSTMENT,
15:35:43  40  	  SCT_ID,
15:35:43  41  	  CREATE_DATE,
15:35:43  42  	  CREATED_BY,
15:35:43  43  	  UPDATE_DATE,
15:35:43  44  	  UPDATED_BY,
15:35:43  45  	  INSTRUMENT_TYPE_ID,
15:35:43  46  	  INSTRUMENT_ID,
15:35:43  47  	  SUBSCRIPTION_STATUS_ID,
15:35:43  48  	  CANCELLATION_DATE,
15:35:43  49  	  REACTIVATION_DATE
15:35:43  50  	) VALUES (
15:35:43  51  	  var_new_subscription_id,
15:35:43  52  	  in_suspend_date,
15:35:43  53  	  in_account_id,
15:35:43  54  	  in_purchase_date,
15:35:43  55  	  in_offer_chain_id,
15:35:43  56  	  in_termination_date,
15:35:43  57  	  in_days_remainning_ajustment,
15:35:43  58  	  in_sct_id,
15:35:43  59  	  var_date,
15:35:43  60  	  in_created_by,
15:35:43  61  	  var_date,
15:35:43  62  	  in_created_by,
15:35:43  63  	  in_instrument_type_id,
15:35:43  64  	  in_instrument_id,
15:35:43  65  	  in_subscription_status_id,
15:35:43  66  	  in_cancelation_date,
15:35:43  67  	  in_reactivation_date
15:35:43  68  	);
15:35:43  69  
15:35:43  70  	out_subscription_id := var_new_subscription_id;
15:35:43  71  END CREATE_SUBSCRIPTION;
15:35:43  72  
15:35:43  73  /******************************************************************************/
15:35:43  74  
15:35:43  75  PROCEDURE UPDATE_SUBSCRIPTION(
15:35:43  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
15:35:43  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
15:35:43  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
15:35:43  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
15:35:43  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
15:35:43  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
15:35:43  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
15:35:43  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:35:43  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
15:35:43  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
15:35:43  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
15:35:43  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
15:35:43  88  ) AS
15:35:43  89  BEGIN
15:35:43  90  	-- Create history
15:35:43  91  	PROCS_HISTORY_V17.CREATE_SUBSCRIPTION_HISTORY(
15:35:43  92  	  in_subscription_id	       => in_subscription_id,
15:35:43  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:43  94  	);
15:35:43  95  
15:35:43  96  	UPDATE SUBSCRIPTION SET
15:35:43  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
15:35:43  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
15:35:43  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
15:35:43 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
15:35:43 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
15:35:43 102  	  UPDATE_DATE		    = SYSDATE,
15:35:43 103  	  UPDATED_BY		    = in_updated_by,
15:35:43 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
15:35:43 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
15:35:43 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
15:35:43 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
15:35:43 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
15:35:43 109  	WHERE
15:35:43 110  	  ID = in_subscription_id;
15:35:43 111  END UPDATE_SUBSCRIPTION;
15:35:43 112  
15:35:43 113  /******************************************************************************/
15:35:43 114  
15:35:43 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
15:35:43 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
15:35:43 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:35:43 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
15:35:43 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:35:43 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
15:35:43 121  ) AS
15:35:43 122  BEGIN
15:35:43 123  	IF inout_subscription_note_id IS NULL THEN
15:35:43 124  	  SELECT
15:35:43 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
15:35:43 126  	  FROM DUAL;
15:35:43 127  	END IF;
15:35:43 128  	INSERT INTO SUBSCRIPTION_NOTE (
15:35:43 129  	  ID,
15:35:43 130  	  AGENT_ID,
15:35:43 131  	  SUBSCRIPTION_ID,
15:35:43 132  	  NOTE,
15:35:43 133  	  CREATE_DATE,
15:35:43 134  	  CREATED_BY
15:35:43 135  	) VALUES (
15:35:43 136  	  inout_subscription_note_id,
15:35:43 137  	  in_agent_id,
15:35:43 138  	  in_subscription_id,
15:35:43 139  	  in_note,
15:35:43 140  	  SYSDATE,
15:35:43 141  	  in_created_by
15:35:43 142  	);
15:35:43 143  END CREATE_SUBSCRIPTION_NOTE;
15:35:43 144  
15:35:43 145  END PROCS_SUBSCRIPTION_CRU_V17;
15:35:43 146  .
15:35:43 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE CREATE_TAX (
15:35:44   4  	inout_tax_id		 IN OUT NUMBER,
15:35:44   5  	in_tax_type_id		 IN NUMBER,
15:35:44   6  	in_calculated_amount	 IN NUMBER,
15:35:44   7  	in_created_by		 IN VARCHAR2,
15:35:44   8  	in_line_item_id 	 IN NUMBER,
15:35:44   9  	in_effective_rate	 IN VARCHAR2,
15:35:44  10  	in_taxable_amount	 IN NUMBER,
15:35:44  11  	in_tax_rule_id		 IN NUMBER,
15:35:44  12  	in_jurisdiction_level_id IN NUMBER,
15:35:44  13  	in_jurisdiction_name	 IN VARCHAR2,
15:35:44  14  	in_jurisdiction_id	 IN VARCHAR2,
15:35:44  15  	in_ext_tax_type 	 IN VARCHAR2,
15:35:44  16  	in_ext_result		 IN VARCHAR2,
15:35:44  17  	in_imposition_type	 IN VARCHAR2,
15:35:44  18  	in_imposition		 IN VARCHAR2
15:35:44  19  ) AS
15:35:44  20  var_date DATE := SYSDATE;
15:35:44  21  BEGIN
15:35:44  22  
15:35:44  23  	IF inout_tax_id IS NULL THEN
15:35:44  24  	  SELECT
15:35:44  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
15:35:44  26  	  FROM DUAL;
15:35:44  27  	END IF;
15:35:44  28  
15:35:44  29  	INSERT INTO TAX (
15:35:44  30  	  ID,
15:35:44  31  	  TAX_TYPE_ID,
15:35:44  32  	  CALCULATED_AMOUNT,
15:35:44  33  	  CREATE_DATE,
15:35:44  34  	  CREATED_BY,
15:35:44  35  	  LINE_ITEM_ID,
15:35:44  36  	  EFFECTIVE_RATE,
15:35:44  37  	  TAXABLE_AMOUNT,
15:35:44  38  	  TAX_RULE_ID,
15:35:44  39  	  JURISDICTION_LEVEL_ID,
15:35:44  40  	  JURISDICTION_NAME,
15:35:44  41  	  JURISDICTION_ID,
15:35:44  42  	  EXT_TAX_TYPE,
15:35:44  43  	  EXT_RESULT,
15:35:44  44  	  IMPOSITION_TYPE,
15:35:44  45  	  IMPOSITION
15:35:44  46  	) VALUES (
15:35:44  47  	  inout_tax_id,
15:35:44  48  	  in_tax_type_id,
15:35:44  49  	  in_calculated_amount,
15:35:44  50  	  var_date,
15:35:44  51  	  in_created_by,
15:35:44  52  	  in_line_item_id,
15:35:44  53  	  in_effective_rate,
15:35:44  54  	  in_taxable_amount,
15:35:44  55  	  in_tax_rule_id,
15:35:44  56  	  in_jurisdiction_level_id,
15:35:44  57  	  in_jurisdiction_name,
15:35:44  58  	  in_jurisdiction_id,
15:35:44  59  	  in_ext_tax_type,
15:35:44  60  	  in_ext_result,
15:35:44  61  	  in_imposition_type,
15:35:44  62  	  in_imposition
15:35:44  63  	);
15:35:44  64  
15:35:44  65  END CREATE_TAX;
15:35:44  66  
15:35:44  67  END PROCS_TAXES_CRU_V17;
15:35:44  68  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE CREATE_TRANSACTION (
15:35:44   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
15:35:44   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
15:35:44   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
15:35:44   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
15:35:44   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
15:35:44   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
15:35:44  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:44  11  ) AS
15:35:44  12  -- VARIABLES
15:35:44  13  var_transaction_id TRANSACTION.ID%TYPE;
15:35:44  14  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:44  15  var_date DATE := SYSDATE;
15:35:44  16  BEGIN
15:35:44  17  	IF in_transaction_id IS NULL THEN
15:35:44  18  	  SELECT
15:35:44  19  	    TRN_ID_SEQ.nextVal into var_transaction_id
15:35:44  20  	  FROM DUAL;
15:35:44  21  	ELSE
15:35:44  22  	  var_transaction_id := in_transaction_id;
15:35:44  23  	END IF;
15:35:44  24  	INSERT INTO
15:35:44  25  	  TRANSACTION (
15:35:44  26  	    ID,
15:35:44  27  	    TRANSACTION_STATUS_ID,
15:35:44  28  	    TRANSACTION_AMOUNT,
15:35:44  29  	    CREATE_DATE,
15:35:44  30  	    CREATED_BY,
15:35:44  31  	    UPDATE_DATE,
15:35:44  32  	    UPDATED_BY,
15:35:44  33  	    ORDER_ID,
15:35:44  34  	    IS_REFUND
15:35:44  35  	  ) VALUES (
15:35:44  36  	    var_transaction_id,
15:35:44  37  	    in_transaction_status_id,
15:35:44  38  	    in_transaction_amount,
15:35:44  39  	    var_date,
15:35:44  40  	    in_created_by,
15:35:44  41  	    var_date,
15:35:44  42  	    in_created_by,
15:35:44  43  	    in_order_id,
15:35:44  44  	    in_is_refund
15:35:44  45  	  );
15:35:44  46  
15:35:44  47  	out_transaction_id := var_transaction_id;
15:35:44  48  END CREATE_TRANSACTION;
15:35:44  49  
15:35:44  50  /*******************************************************************/
15:35:44  51  
15:35:44  52  PROCEDURE UPDATE_TRANSACTION (
15:35:44  53  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
15:35:44  54  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
15:35:44  55  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
15:35:44  56  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
15:35:44  57  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
15:35:44  58  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
15:35:44  59  ) AS
15:35:44  60  BEGIN
15:35:44  61  	-- Create history
15:35:44  62  	PROCS_HISTORY_V17.CREATE_TRANSACTION_HISTORY(
15:35:44  63  	  in_transaction_id	       => in_transaction_id,
15:35:44  64  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:44  65  	);
15:35:44  66  	UPDATE
15:35:44  67  	  TRANSACTION
15:35:44  68  	SET
15:35:44  69  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
15:35:44  70  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
15:35:44  71  	  UPDATE_DATE		= SYSDATE,
15:35:44  72  	  UPDATED_BY		= in_updated_by,
15:35:44  73  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
15:35:44  74  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
15:35:44  75  	WHERE
15:35:44  76  	  ID = in_transaction_id;
15:35:44  77  END UPDATE_TRANSACTION;
15:35:44  78  
15:35:44  79  /*******************************************************************/
15:35:44  80  
15:35:44  81  PROCEDURE READ_TRANSACTION (
15:35:44  82  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:35:44  83  	out_result_set	  OUT SYS_REFCURSOR
15:35:44  84  ) AS
15:35:44  85  BEGIN
15:35:44  86  	OPEN out_result_set FOR
15:35:44  87  	SELECT
15:35:44  88  	  ID,
15:35:44  89  	  TRANSACTION_STATUS_ID,
15:35:44  90  	  TRANSACTION_AMOUNT,
15:35:44  91  	  CREATE_DATE,
15:35:44  92  	  CREATED_BY,
15:35:44  93  	  UPDATE_DATE,
15:35:44  94  	  UPDATED_BY,
15:35:44  95  	  ORDER_ID,
15:35:44  96  	  IS_REFUND,
15:35:44  97  	  IS_SETTLED
15:35:44  98  	FROM
15:35:44  99  	  TRANSACTION
15:35:44 100  	WHERE
15:35:44 101  	  ID = in_transaction_id;
15:35:44 102  END READ_TRANSACTION;
15:35:44 103  
15:35:44 104  /*******************************************************************/
15:35:44 105  
15:35:44 106  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
15:35:44 107  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
15:35:44 108  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
15:35:44 109  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
15:35:44 110  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:35:44 111  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
15:35:44 112  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
15:35:44 113  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
15:35:44 114  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
15:35:44 115  ) AS
15:35:44 116  BEGIN
15:35:44 117  	IF inout_transaction_attempt_id IS NULL THEN
15:35:44 118  	  SELECT
15:35:44 119  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
15:35:44 120  	  FROM DUAL;
15:35:44 121  	END IF;
15:35:44 122  	INSERT INTO TRANSACTION_ATTEMPT (
15:35:44 123  	  ID,
15:35:44 124  	  TRANSACTION_ID,
15:35:44 125  	  EXTERNAL_STATUS_CODE,
15:35:44 126  	  EXTERNAL_STATUS_MESSAGE,
15:35:44 127  	  CREATE_DATE,
15:35:44 128  	  CREATED_BY,
15:35:44 129  	  EXTERNAL_TRANSACTION_ID,
15:35:44 130  	  TRANSACTION_START_TIME,
15:35:44 131  	  TRANSACTION_ATTEMPT_STATUS_ID
15:35:44 132  	) VALUES (
15:35:44 133  	  inout_transaction_attempt_id,
15:35:44 134  	  in_transaction_id,
15:35:44 135  	  in_external_status_code,
15:35:44 136  	  in_external_status_message,
15:35:44 137  	  SYSDATE,
15:35:44 138  	  in_created_by,
15:35:44 139  	  in_external_transaction_id,
15:35:44 140  	  in_transaction_start_time,
15:35:44 141  	  in_status_id
15:35:44 142  	);
15:35:44 143  END;
15:35:44 144  
15:35:44 145  /*******************************************************************/
15:35:44 146  
15:35:44 147  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
15:35:44 148  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
15:35:44 149  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
15:35:44 150  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:35:44 151  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
15:35:44 152  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
15:35:44 153  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
15:35:44 154  ) AS
15:35:44 155  BEGIN
15:35:44 156  	UPDATE
15:35:44 157  	  TRANSACTION_ATTEMPT
15:35:44 158  	SET
15:35:44 159  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
15:35:44 160  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
15:35:44 161  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
15:35:44 162  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
15:35:44 163  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
15:35:44 164  	WHERE
15:35:44 165  	  ID = in_transaction_attempt_id;
15:35:44 166  END;
15:35:44 167  
15:35:44 168  /*******************************************************************/
15:35:44 169  
15:35:44 170  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:35:44 171  /*
15:35:44 172  Throws exceptions:
15:35:44 173  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 174  APP_EXCEPTION_CODES_V17.INTRNAL_ERROR
15:35:44 175  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 176  */
15:35:44 177  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:35:44 178  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:35:44 179  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:35:44 180  ) AS
15:35:44 181  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
15:35:44 182  -- EXCEPTIONS
15:35:44 183  BAD_TRANSACTION_ID EXCEPTION;
15:35:44 184  BEGIN
15:35:44 185  
15:35:44 186  	PROCS_HISTORY_V17.CREATE_TRANSACTION_HISTORY(
15:35:44 187  	  in_transaction_id	       => in_transaction_id,
15:35:44 188  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:44 189  	);
15:35:44 190  
15:35:44 191  	UPDATE
15:35:44 192  	  TRANSACTION
15:35:44 193  	SET
15:35:44 194  	  TRANSACTION.ORDER_ID	 = in_order_id,
15:35:44 195  	  TRANSACTION.UPDATED_BY = in_updated_by,
15:35:44 196  	  TRANSACTION.UPDATE_DATE= SYSDATE
15:35:44 197  	WHERE
15:35:44 198  	  TRANSACTION.ID = in_transaction_id
15:35:44 199  	  AND TRANSACTION.ORDER_ID IS NULL;
15:35:44 200  
15:35:44 201  	IF SQL%ROWCOUNT = 0 THEN
15:35:44 202  	  RAISE BAD_TRANSACTION_ID;
15:35:44 203  	END IF;
15:35:44 204  EXCEPTION
15:35:44 205  WHEN BAD_TRANSACTION_ID THEN
15:35:44 206  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 207  	  SPROC_NAME, 'No such transaction');
15:35:44 208  END UPDATE_TRANSACTION_ORDER_ID;
15:35:44 209  
15:35:44 210  END PROCS_TRANSACTION_CRU_V17;
15:35:44 211  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE CREATE_ADDRESS(
15:35:44   4  /*
15:35:44   5  Throws exceptions:
15:35:44   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44   7  */
15:35:44   8  	  out_address_id	OUT NUMBER,
15:35:44   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:35:44  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:35:44  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:35:44  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:35:44  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:44  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:35:44  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
15:35:44  16  ) AS
15:35:44  17  -- VARIABLES
15:35:44  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
15:35:44  19  -- EXCEPTIONS
15:35:44  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44  21  BEGIN
15:35:44  22  
15:35:44  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V17.CREATE_ADDRESS(
15:35:44  24  	  out_address_id      => out_address_id,
15:35:44  25  	  in_address_id       => null,
15:35:44  26  	  in_address1	      => in_address1,
15:35:44  27  	  in_address2	      => in_address2,
15:35:44  28  	  in_city	      => in_city,
15:35:44  29  	  in_state	      => in_state,
15:35:44  30  	  in_postal_code      => in_postal_code,
15:35:44  31  	  in_country	      => in_country,
15:35:44  32  	  in_created_by       => in_created_by
15:35:44  33  	);
15:35:44  34  
15:35:44  35  END CREATE_ADDRESS;
15:35:44  36  
15:35:44  37  PROCEDURE UPDATE_ADDRESS(
15:35:44  38  /*
15:35:44  39  Throws exceptions:
15:35:44  40  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44  41  */
15:35:44  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
15:35:44  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:35:44  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:35:44  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:35:44  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:35:44  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:44  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:35:44  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
15:35:44  50  ) AS
15:35:44  51  BEGIN
15:35:44  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V17.UPDATE_ADDRESS(
15:35:44  53  	  in_address_id 	=> in_address_id,
15:35:44  54  	  in_address1		=> in_address1,
15:35:44  55  	  in_address2		=> in_address2,
15:35:44  56  	  in_city		=> in_city,
15:35:44  57  	  in_state		=> in_state,
15:35:44  58  	  in_postal_code	=> in_postal_code,
15:35:44  59  	  in_country		=> in_country,
15:35:44  60  	  in_updated_by 	=> in_updated_by
15:35:44  61  	);
15:35:44  62  END UPDATE_ADDRESS;
15:35:44  63  
15:35:44  64  PROCEDURE GET_ADDRESS (
15:35:44  65  /*
15:35:44  66  Throws exceptions:
15:35:44  67  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44  68  */
15:35:44  69  	  in_id 		IN ADDRESS.ID%TYPE,
15:35:44  70  	  out_result_set	OUT SYS_REFCURSOR
15:35:44  71  ) AS
15:35:44  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
15:35:44  73  BEGIN
15:35:44  74  
15:35:44  75  OPEN out_result_set FOR
15:35:44  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
15:35:44  77  
15:35:44  78  END GET_ADDRESS;
15:35:44  79  
15:35:44  80  END PROCS_ADDRESS_V17;
15:35:44  81  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.01
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
15:35:44   4  	in_invoice_id		  IN NUMBER,
15:35:44   5  	in_adjustment_reason	  IN VARCHAR2,
15:35:44   6  	in_is_credit		  IN NUMBER,
15:35:44   7  	in_charge_id		  IN NUMBER,
15:35:44   8  	in_business_date	  IN DATE,
15:35:44   9  	in_created_by		  IN VARCHAR2,
15:35:44  10  	out_invoice_adjustment_id OUT NUMBER
15:35:44  11  ) AS
15:35:44  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
15:35:44  13  -- VARIABLES
15:35:44  14  var_current_date	    DATE := SYSDATE;
15:35:44  15  var_new_entity_id     NUMBER;
15:35:44  16  var_inv_adj_reason_id NUMBER;
15:35:44  17  -- EXCEPTIONS
15:35:44  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
15:35:44  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
15:35:44  20  BEGIN
15:35:44  21  
15:35:44  22  	IF in_is_credit != GLOBAL_CONSTANTS_V17.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:44  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
15:35:44  24  	END IF;
15:35:44  25  
15:35:44  26  	BEGIN
15:35:44  27  	  SELECT
15:35:44  28  	    ID into var_inv_adj_reason_id
15:35:44  29  	  FROM
15:35:44  30  	    INVOICE_ADJUSTMENT_REASON
15:35:44  31  	  WHERE
15:35:44  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
15:35:44  33  	  EXCEPTION
15:35:44  34  	    WHEN NO_DATA_FOUND THEN
15:35:44  35  	      RAISE DAB_ADJUSTMENT_REASON;
15:35:44  36  	END;
15:35:44  37  
15:35:44  38  	SELECT
15:35:44  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
15:35:44  40  	FROM
15:35:44  41  	  DUAL;
15:35:44  42  
15:35:44  43  	INSERT INTO INVOICE_ADJUSTMENT (
15:35:44  44  	  ID,
15:35:44  45  	  INVOICE_ID,
15:35:44  46  	  INVOICE_ADJUSTMENT_REASON_ID,
15:35:44  47  	  IS_CREDIT,
15:35:44  48  	  CHARGE_ID,
15:35:44  49  	  ADJUSTMENT_DATE,
15:35:44  50  	  CREATE_DATE,
15:35:44  51  	  CREATED_BY,
15:35:44  52  	  UPDATE_DATE,
15:35:44  53  	  UPDATED_BY
15:35:44  54  	)
15:35:44  55  	VALUES (
15:35:44  56  	  var_new_entity_id,
15:35:44  57  	  in_invoice_id,
15:35:44  58  	  var_inv_adj_reason_id,
15:35:44  59  	  in_is_credit,
15:35:44  60  	  in_charge_id,
15:35:44  61  	  in_business_date,
15:35:44  62  	  var_current_date,
15:35:44  63  	  in_created_by,
15:35:44  64  	  var_current_date,
15:35:44  65  	  in_created_by
15:35:44  66  	);
15:35:44  67  
15:35:44  68  	out_invoice_adjustment_id := var_new_entity_id;
15:35:44  69  
15:35:44  70  EXCEPTION
15:35:44  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
15:35:44  72  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:44  73  	  SPROC_NAME, 'Bad in_is_credit value');
15:35:44  74  WHEN DAB_ADJUSTMENT_REASON THEN
15:35:44  75  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:44  76  	  SPROC_NAME, 'Bad adjustment reason');
15:35:44  77  WHEN OTHERS THEN
15:35:44  78  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44  80  END CREATE_INVOICE_ADJUSTMENT;
15:35:44  81  
15:35:44  82  /******************************************************************************/
15:35:44  83  
15:35:44  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
15:35:44  85  	  in_invoice_id 	    IN NUMBER,
15:35:44  86  	  in_original_charge_id     IN NUMBER,
15:35:44  87  	  in_charge_id		    IN NUMBER,
15:35:44  88  	  in_updated_by 	    IN VARCHAR2
15:35:44  89  ) AS
15:35:44  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
15:35:44  91  var_invoice_adjustment_id NUMBER;
15:35:44  92  BEGIN
15:35:44  93  	SELECT
15:35:44  94  	  id into var_invoice_adjustment_id
15:35:44  95  	FROM
15:35:44  96  	  INVOICE_ADJUSTMENT
15:35:44  97  	WHERE INVOICE_ID = in_invoice_id
15:35:44  98  	      AND CHARGE_ID = in_original_charge_id;
15:35:44  99  
15:35:44 100  	--create history
15:35:44 101  	PROCS_HISTORY_V17.CREATE_INVOICE_ADJ_HISTORY(
15:35:44 102  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
15:35:44 103  	  in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:44 104  	);
15:35:44 105  
15:35:44 106  	UPDATE INVOICE_ADJUSTMENT
15:35:44 107  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
15:35:44 108  	WHERE ID = var_invoice_adjustment_id;
15:35:44 109  
15:35:44 110  EXCEPTION
15:35:44 111  WHEN NO_DATA_FOUND THEN
15:35:44 112  	    NULL;
15:35:44 113  END UPDATE_INVOICE_ADJUSTMENT;
15:35:44 114  
15:35:44 115  /******************************************************************************/
15:35:44 116  
15:35:44 117  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
15:35:44 118  	in_line_item_id 	    IN NUMBER,
15:35:44 119  	in_invoice_adjustment_id    IN NUMBER,
15:35:44 120  	in_amount		    IN NUMBER,
15:35:44 121  	in_tax			    IN NUMBER,
15:35:44 122  	in_discount		    IN NUMBER,
15:35:44 123  	in_created_by		    IN VARCHAR2,
15:35:44 124  	out_line_item_adjustment_id OUT NUMBER
15:35:44 125  ) AS
15:35:44 126  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
15:35:44 127  -- VARIABLES
15:35:44 128  var_current_date DATE := SYSDATE;
15:35:44 129  var_new_entity_id NUMBER;
15:35:44 130  BEGIN
15:35:44 131  
15:35:44 132  	SELECT
15:35:44 133  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
15:35:44 134  	FROM
15:35:44 135  	  DUAL;
15:35:44 136  
15:35:44 137  	INSERT INTO LINE_ITEM_ADJUSTMENT (
15:35:44 138  	  ID,
15:35:44 139  	  LINE_ITEM_ID,
15:35:44 140  	  INVOICE_ADJUSTMENT_ID,
15:35:44 141  	  AMOUNT,
15:35:44 142  	  TAX,
15:35:44 143  	  DISCOUNT,
15:35:44 144  	  CREATE_DATE,
15:35:44 145  	  CREATED_BY
15:35:44 146  	)
15:35:44 147  	VALUES (
15:35:44 148  	  var_new_entity_id,
15:35:44 149  	  in_line_item_id,
15:35:44 150  	  in_invoice_adjustment_id,
15:35:44 151  	  in_amount,
15:35:44 152  	  in_tax,
15:35:44 153  	  in_discount,
15:35:44 154  	  var_current_date,
15:35:44 155  	  in_created_by
15:35:44 156  	);
15:35:44 157  
15:35:44 158  	out_line_item_adjustment_id := var_new_entity_id;
15:35:44 159  
15:35:44 160  EXCEPTION
15:35:44 161  WHEN OTHERS THEN
15:35:44 162  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 163  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 164  END CREATE_LINE_ITEM_ADJUSTMENT;
15:35:44 165  
15:35:44 166  /******************************************************************************/
15:35:44 167  
15:35:44 168  PROCEDURE CREATE_TAX_ADJUSTMENT (
15:35:44 169  	in_tax_id		   IN NUMBER,
15:35:44 170  	in_line_item_adjustment_id IN NUMBER,
15:35:44 171  	in_amount		   IN NUMBER,
15:35:44 172  	in_created_by		   IN VARCHAR2,
15:35:44 173  	out_tax_adjustment_id	   OUT NUMBER
15:35:44 174  ) AS
15:35:44 175  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
15:35:44 176  -- VARIABLES
15:35:44 177  var_current_date DATE := SYSDATE;
15:35:44 178  var_new_entity_id NUMBER;
15:35:44 179  BEGIN
15:35:44 180  
15:35:44 181  	SELECT
15:35:44 182  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
15:35:44 183  	FROM
15:35:44 184  	  DUAL;
15:35:44 185  
15:35:44 186  	INSERT INTO TAX_ADJUSTMENT (
15:35:44 187  	  ID,
15:35:44 188  	  TAX_ID,
15:35:44 189  	  LINE_ITEM_ADJUSTMENT_ID,
15:35:44 190  	  AMOUNT,
15:35:44 191  	  CREATE_DATE,
15:35:44 192  	  CREATED_BY
15:35:44 193  	)
15:35:44 194  	VALUES (
15:35:44 195  	  var_new_entity_id,
15:35:44 196  	  in_tax_id,
15:35:44 197  	  in_line_item_adjustment_id,
15:35:44 198  	  in_amount,
15:35:44 199  	  var_current_date,
15:35:44 200  	  in_created_by
15:35:44 201  	);
15:35:44 202  
15:35:44 203  	out_tax_adjustment_id := var_new_entity_id;
15:35:44 204  
15:35:44 205  EXCEPTION
15:35:44 206  WHEN OTHERS THEN
15:35:44 207  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 208  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 209  END CREATE_TAX_ADJUSTMENT;
15:35:44 210  
15:35:44 211  /******************************************************************************/
15:35:44 212  
15:35:44 213  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
15:35:44 214  	in_discount_id		   NUMBER,
15:35:44 215  	in_line_item_id 	   NUMBER,
15:35:44 216  	in_line_item_adjustment_id IN NUMBER,
15:35:44 217  	in_amount		   IN NUMBER,
15:35:44 218  	in_created_by		   IN VARCHAR2,
15:35:44 219  	out_discount_li_id	   OUT NUMBER
15:35:44 220  ) AS
15:35:44 221  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
15:35:44 222  -- VARIABLES
15:35:44 223  var_current_date DATE := SYSDATE;
15:35:44 224  var_new_entity_id NUMBER;
15:35:44 225  BEGIN
15:35:44 226  
15:35:44 227  	SELECT
15:35:44 228  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
15:35:44 229  	FROM
15:35:44 230  	  DUAL;
15:35:44 231  
15:35:44 232  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
15:35:44 233  	  ID,
15:35:44 234  	  DISCOUNT_ID,
15:35:44 235  	  LINE_ITEM_ID,
15:35:44 236  	  LINE_ITEM_ADJUSTMENT_ID,
15:35:44 237  	  AMOUNT,
15:35:44 238  	  CREATE_DATE,
15:35:44 239  	  CREATED_BY
15:35:44 240  	)
15:35:44 241  	VALUES (
15:35:44 242  	  var_new_entity_id,
15:35:44 243  	  in_discount_id,
15:35:44 244  	  in_line_item_id,
15:35:44 245  	  in_line_item_adjustment_id,
15:35:44 246  	  in_amount,
15:35:44 247  	  var_current_date,
15:35:44 248  	  in_created_by
15:35:44 249  	);
15:35:44 250  
15:35:44 251  	out_discount_li_id := var_new_entity_id;
15:35:44 252  
15:35:44 253  EXCEPTION
15:35:44 254  WHEN OTHERS THEN
15:35:44 255  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 256  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 257  END CREATE_DISCOUNT_LI_ADJUSTMENT;
15:35:44 258  
15:35:44 259  END PROCS_ADJUSTMENTS_V17;
15:35:44 260  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE GET_SUB_ADX_INFO (
15:35:44   4  /*
15:35:44   5  Throws exceptions:
15:35:44   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44   7  */
15:35:44   8  	out_result_set	    OUT SYS_REFCURSOR,
15:35:44   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
15:35:44  10  ) AS
15:35:44  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
15:35:44  12  BEGIN
15:35:44  13  OPEN out_result_set FOR
15:35:44  14  SELECT /*+ FIRST_ROWS(5) */
15:35:44  15  	s.offer_chain_id,
15:35:44  16  	s.create_date,
15:35:44  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
15:35:44  18  	ocmd.value,
15:35:44  19  	a.group_id,
15:35:44  20  	s.id subscription_id
15:35:44  21  FROM
15:35:44  22  	account a,
15:35:44  23  	subscription s,
15:35:44  24  	offer_chain_meta_data ocmd,
15:35:44  25  	group_account g,
15:35:44  26  	subscription_share ss,
15:35:44  27  	account a2
15:35:44  28  WHERE
15:35:44  29  	s.account_id = a.id and
15:35:44  30  	s.offer_chain_id = ocmd.offer_chain_id and
15:35:44  31  	g.id = ss.group_account_id and
15:35:44  32  	ss.borrower_account_id = a2.id and
15:35:44  33  	s.id = g.subscription_id and
15:35:44  34  	ocmd.name = 'ADX_BUNDLE' and
15:35:44  35  	a2.group_id = in_group_id and
15:35:44  36  	rownum < 5
15:35:44  37  union all
15:35:44  38  SELECT /*+ FIRST_ROWS(5) */
15:35:44  39  	s.offer_chain_id,
15:35:44  40  	s.create_date,
15:35:44  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
15:35:44  42  	ocmd.value,
15:35:44  43  	a.group_id,
15:35:44  44  	s.id subscription_id
15:35:44  45  FROM
15:35:44  46  	account a,
15:35:44  47  	subscription s,
15:35:44  48  	offer_chain_meta_data ocmd
15:35:44  49  WHERE
15:35:44  50  	s.account_id = a.id and
15:35:44  51  	s.offer_chain_id = ocmd.offer_chain_id and
15:35:44  52  	ocmd.name = 'ADX_BUNDLE' and
15:35:44  53  	a.group_id = in_group_id and
15:35:44  54  	rownum < 5
15:35:44  55  ;
15:35:44  56  
15:35:44  57  END GET_SUB_ADX_INFO;
15:35:44  58  
15:35:44  59  END PROCS_ADX_V17;
15:35:44  60  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE CREATE_AMAZON_SUB(
15:35:44   4  /*
15:35:44   5  Throws exceptions:
15:35:44   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44   7  */
15:35:44   8  	  out_id	      OUT NUMBER,
15:35:44   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
15:35:44  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
15:35:44  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
15:35:44  12  ) AS
15:35:44  13  -- VARIABLES
15:35:44  14  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
15:35:44  15  -- EXCEPTIONS
15:35:44  16  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44  17  BEGIN
15:35:44  18  
15:35:44  19  	CORE_OWNER.PROCS_AMAZON_CRU_V17.CREATE_AMAZON_SUB(
15:35:44  20  	  out_id	      =>  out_id,
15:35:44  21  	  in_subscription_id  =>  in_subscription_id,
15:35:44  22  	  in_amazon_id	      =>  in_amazon_id,
15:35:44  23  	  in_created_by       =>  in_created_by
15:35:44  24  	);
15:35:44  25  
15:35:44  26  END CREATE_AMAZON_SUB;
15:35:44  27  
15:35:44  28  PROCEDURE GET_ACTIVE_SUB_IDS (
15:35:44  29  /*
15:35:44  30  Throws exceptions:
15:35:44  31  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44  32  */
15:35:44  33  	out_result_set	    OUT SYS_REFCURSOR,
15:35:44  34  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
15:35:44  35  ) AS
15:35:44  36  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
15:35:44  37  BEGIN
15:35:44  38  OPEN out_result_set FOR
15:35:44  39  SELECT s.id
15:35:44  40  FROM subscription s, amazon_sub am
15:35:44  41  WHERE
15:35:44  42  	s.id = am.subscription_id
15:35:44  43  	and s.subscription_status_id = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:44  44  	and am.amazon_id = in_amazon_id
15:35:44  45  ;
15:35:44  46  
15:35:44  47  END GET_ACTIVE_SUB_IDS;
15:35:44  48  
15:35:44  49  PROCEDURE GET_ACTIVE_GROUP_IDS (
15:35:44  50  /*
15:35:44  51  Throws exceptions:
15:35:44  52  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44  53  */
15:35:44  54  	out_result_set	    OUT SYS_REFCURSOR,
15:35:44  55  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
15:35:44  56  ) AS
15:35:44  57  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
15:35:44  58  BEGIN
15:35:44  59  OPEN out_result_set FOR
15:35:44  60  SELECT distinct a.group_id id
15:35:44  61  FROM subscription s, amazon_sub am, account a
15:35:44  62  WHERE
15:35:44  63  	s.id = am.subscription_id
15:35:44  64  	and a.id = s.account_id
15:35:44  65  	and s.subscription_status_id = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:44  66  	and am.amazon_id = in_amazon_id
15:35:44  67  ;
15:35:44  68  
15:35:44  69  END GET_ACTIVE_GROUP_IDS;
15:35:44  70  
15:35:44  71  END PROCS_AMAZON_V17;
15:35:44  72  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
15:35:44   2  
15:35:44   3  	/****************************************************************************/
15:35:44   4  
15:35:44   5  	PROCEDURE POPULATE_REQUEST_INFO(
15:35:44   6  	  in_hours_prior    IN	NUMBER,
15:35:44   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
15:35:44   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
15:35:44   9  	) AS
15:35:44  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
15:35:44  11  	var_start_date	    DATE := SYSDATE;
15:35:44  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
15:35:44  13  	var_request_file_id NUMBER := 0;
15:35:44  14  	var_license_count   NUMBER := 0;
15:35:44  15  	var_cc_update_count NUMBER := 0;
15:35:44  16  	BEGIN
15:35:44  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
15:35:44  18  	    INSERT INTO CC_REQUEST_FILE (ID,
15:35:44  19  					 FILE_NAME,
15:35:44  20  					 CC_REQUEST_FILE_STATUS,
15:35:44  21  					 CREATE_DATE,
15:35:44  22  					 CREATED_BY,
15:35:44  23  					 UPDATE_DATE,
15:35:44  24  					 UPDATED_BY)
15:35:44  25  					 VALUES (
15:35:44  26  					 var_request_file_id,
15:35:44  27  					 in_filename,
15:35:44  28  					 'NOT_CREATED',
15:35:44  29  					 var_start_date,
15:35:44  30  					 in_creator,
15:35:44  31  					 var_start_date,
15:35:44  32  					 in_creator);
15:35:44  33  
15:35:44  34  	   FOR record IN (SELECT
15:35:44  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
15:35:44  36  			  FROM
15:35:44  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
15:35:44  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
15:35:44  39  			  WHERE
15:35:44  40  			    s.INSTRUMENT_TYPE_ID	 = 1
15:35:44  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
15:35:44  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
15:35:44  43  			    AND l.LICENSE_STATUS_ID	 = 2
15:35:44  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
15:35:44  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
15:35:44  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
15:35:44  47  	   LOOP
15:35:44  48  	     var_license_count := 0;
15:35:44  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
15:35:44  50  
15:35:44  51  	     IF var_license_count = 0 THEN
15:35:44  52  		INSERT INTO CC_UPDATE (ID,
15:35:44  53  				       CREDIT_CARD_ID,
15:35:44  54  				       LICENSE_ID,
15:35:44  55  				       CC_UPDATE_STATUS,
15:35:44  56  				       CC_REQUEST_FILE_ID,
15:35:44  57  				       CREATE_DATE,
15:35:44  58  				       UPDATE_DATE,
15:35:44  59  				       CREATED_BY,
15:35:44  60  				       UPDATED_BY
15:35:44  61  				       ) VALUES (
15:35:44  62  				       CC_UPDATE_SEQ.NEXTVAL,
15:35:44  63  				       record.CREDIT_CARD_ID,
15:35:44  64  				       record.LICENSE_ID,
15:35:44  65  				       'NOT_ADDED_TO_FILE',
15:35:44  66  				       var_request_file_id,
15:35:44  67  				       var_start_date,
15:35:44  68  				       var_start_date,
15:35:44  69  				       in_creator,
15:35:44  70  				       in_creator
15:35:44  71  				       );
15:35:44  72  	     END IF;
15:35:44  73  	   END LOOP;
15:35:44  74  
15:35:44  75  	   SELECT COUNT(1) INTO var_cc_update_count
15:35:44  76  	   FROM CC_UPDATE
15:35:44  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
15:35:44  78  	   IF var_cc_update_count <= 0 THEN
15:35:44  79  	     UPDATE CC_REQUEST_FILE
15:35:44  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
15:35:44  81  	     WHERE ID = var_request_file_id;
15:35:44  82  	   END IF;
15:35:44  83  
15:35:44  84  	END POPULATE_REQUEST_INFO;
15:35:44  85  
15:35:44  86  	/****************************************************************************/
15:35:44  87  
15:35:44  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
15:35:44  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:35:44  90  	  in_start	     IN NUMBER,
15:35:44  91  	  in_end	     IN NUMBER,
15:35:44  92  	  out_result_set     OUT SYS_REFCURSOR
15:35:44  93  	) AS
15:35:44  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
15:35:44  95  	var_range_diff	    NUMBER := 0;
15:35:44  96  	var_upper_bond_diff NUMBER := 0;
15:35:44  97  	var_l_start	    NUMBER := 0;
15:35:44  98  	var_l_end	    NUMBER := 0;
15:35:44  99  	BEGIN
15:35:44 100  	  --Normalize the end points [START]
15:35:44 101  	  IF (in_start IS NULL OR in_start < 0) Then
15:35:44 102  	    var_l_start := 0;
15:35:44 103  	  ELSE
15:35:44 104  	    var_l_start := in_start;
15:35:44 105  	  END IF;
15:35:44 106  
15:35:44 107  	  IF (in_end IS NULL) Then
15:35:44 108  	    var_l_end := 500;
15:35:44 109  	  ELSE
15:35:44 110  	    var_l_end := in_end;
15:35:44 111  	  END IF;
15:35:44 112  
15:35:44 113  	  var_l_start := var_l_start + 1;
15:35:44 114  	  var_l_end   := var_l_end   + 1;
15:35:44 115  
15:35:44 116  	  var_range_diff  := var_l_end - var_l_start;
15:35:44 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
15:35:44 118  
15:35:44 119  	  IF (var_upper_bond_diff > 0) Then
15:35:44 120  	    var_l_end := var_l_end - var_upper_bond_diff;
15:35:44 121  	  END IF;
15:35:44 122  	  --Normalize the end points [END]
15:35:44 123  
15:35:44 124  	  OPEN out_result_set FOR
15:35:44 125  	    SELECT CHASE_PROFILE_ID FROM
15:35:44 126  	      (SELECT rownum rnum, q.* FROM
15:35:44 127  		 (SELECT
15:35:44 128  		    cc.CHASE_PROFILE_ID
15:35:44 129  		  FROM
15:35:44 130  		    CREDIT_CARD cc,
15:35:44 131  		    CC_UPDATE ccu
15:35:44 132  		  WHERE
15:35:44 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
15:35:44 134  		    AND ccu.CREDIT_CARD_ID = cc.id
15:35:44 135  		) Q
15:35:44 136  	      WHERE rownum <= var_l_end)
15:35:44 137  	    WHERE rnum >= var_l_Start;
15:35:44 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
15:35:44 139  
15:35:44 140  	/****************************************************************************/
15:35:44 141  
15:35:44 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
15:35:44 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
15:35:44 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
15:35:44 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
15:35:44 146  	)AS
15:35:44 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
15:35:44 148  	BEGIN
15:35:44 149  	  UPDATE CC_REQUEST_FILE
15:35:44 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
15:35:44 151  	      UPDATE_DATE = SYSDATE,
15:35:44 152  	      UPDATED_BY  = in_updated_by
15:35:44 153  	  WHERE ID = in_request_file_id;
15:35:44 154  	END UPDATE_REQUEST_FILE_STATUS;
15:35:44 155  
15:35:44 156  	/****************************************************************************/
15:35:44 157  
15:35:44 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
15:35:44 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:35:44 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:35:44 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
15:35:44 162  	) AS
15:35:44 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
15:35:44 164  	BEGIN
15:35:44 165  	  UPDATE CC_UPDATE
15:35:44 166  	  SET CC_UPDATE_STATUS = in_status,
15:35:44 167  	      UPDATE_DATE      = SYSDATE,
15:35:44 168  	      UPDATED_BY       = in_updated_by
15:35:44 169  	  WHERE
15:35:44 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
15:35:44 171  	END UPDATE_CC_REQUEST_STATUS;
15:35:44 172  
15:35:44 173  	/****************************************************************************/
15:35:44 174  
15:35:44 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
15:35:44 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
15:35:44 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
15:35:44 178  	  out_request_files   OUT SYS_REFCURSOR
15:35:44 179  	) AS
15:35:44 180  	var_older_than_hours NUMBER := in_older_than_hours;
15:35:44 181  	BEGIN
15:35:44 182  	 IF (var_older_than_hours IS NULL) THEN
15:35:44 183  	   var_older_than_hours := -288;
15:35:44 184  	 END IF;
15:35:44 185  
15:35:44 186  	 OPEN out_request_files FOR
15:35:44 187  	 SELECT
15:35:44 188  	   ID,
15:35:44 189  	   FILE_NAME
15:35:44 190  	 FROM
15:35:44 191  	   CC_REQUEST_FILE
15:35:44 192  	 WHERE
15:35:44 193  	   CC_REQUEST_FILE_STATUS = in_status
15:35:44 194  	 AND
15:35:44 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
15:35:44 196  	END REQUEST_FILES_BY_STATUS;
15:35:44 197  
15:35:44 198  	/****************************************************************************/
15:35:44 199  
15:35:44 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
15:35:44 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:35:44 202  	  out_count OUT NUMBER
15:35:44 203  	) AS
15:35:44 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
15:35:44 205  	BEGIN
15:35:44 206  	  SELECT COUNT(1) INTO out_count
15:35:44 207  	  FROM CC_UPDATE
15:35:44 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
15:35:44 209  	END COUNT_BY_REQUEST_FILE_ID;
15:35:44 210  
15:35:44 211  	/****************************************************************************/
15:35:44 212  
15:35:44 213  	PROCEDURE GET_CREDIT_CARD_LICENSE (
15:35:44 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
15:35:44 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
15:35:44 216  	  out_card_license     OUT SYS_REFCURSOR
15:35:44 217  	) AS
15:35:44 218  	BEGIN
15:35:44 219  	  OPEN out_card_license FOR
15:35:44 220  	  SELECT
15:35:44 221  	    cc.ID CREDIT_CARD_ID,
15:35:44 222  	    cc.CHASE_PROFILE_ID,
15:35:44 223  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
15:35:44 224  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
15:35:44 225  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
15:35:44 226  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
15:35:44 227  	    a.GROUP_ID,
15:35:44 228  	    u.LICENSE_ID,
15:35:44 229  	    u.ID CC_UPDATE_ID,
15:35:44 230  	    l.END_DATE LICENSE_END_DATE,
15:35:44 231  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
15:35:44 232  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf, ACCOUNT a, LICENSE l
15:35:44 233  	  WHERE cc.ID = u.CREDIT_CARD_ID
15:35:44 234  	  AND u.CC_REQUEST_FILE_ID = rf.ID
15:35:44 235  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
15:35:44 236  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
15:35:44 237  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
15:35:44 238  	  AND cc.ACCOUNT_ID = a.ID
15:35:44 239  	  AND u.LICENSE_ID = l.ID
15:35:44 240  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
15:35:44 241  	  AND SYSDATE BETWEEN l.START_DATE and l.END_DATE
15:35:44 242  	  ORDER BY cc.UPDATE_DATE DESC;
15:35:44 243  	END GET_CREDIT_CARD_LICENSE;
15:35:44 244  
15:35:44 245  	/****************************************************************************/
15:35:44 246  
15:35:44 247  	PROCEDURE UPDATE_CC_UPDATE(
15:35:44 248  	  in_id 	     IN CC_UPDATE.ID%TYPE,
15:35:44 249  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:35:44 250  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
15:35:44 251  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
15:35:44 252  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
15:35:44 253  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:35:44 254  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
15:35:44 255  	) AS
15:35:44 256  	BEGIN
15:35:44 257  	  UPDATE CC_UPDATE
15:35:44 258  	  SET CC_UPDATE_STATUS = in_status,
15:35:44 259  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
15:35:44 260  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
15:35:44 261  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
15:35:44 262  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
15:35:44 263  	  UPDATE_DATE = SYSDATE,
15:35:44 264  	  UPDATED_BY = in_updated_by
15:35:44 265  	  WHERE ID = in_id;
15:35:44 266  	END UPDATE_CC_UPDATE;
15:35:44 267  
15:35:44 268  	/****************************************************************************/
15:35:44 269  
15:35:44 270  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
15:35:44 271  	  in_id 	IN CC_UPDATE.ID%TYPE,
15:35:44 272  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:35:44 273  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
15:35:44 274  	) AS
15:35:44 275  	BEGIN
15:35:44 276  	  UPDATE CC_UPDATE
15:35:44 277  	  SET CC_UPDATE_STATUS = in_status,
15:35:44 278  	  UPDATE_DATE = SYSDATE,
15:35:44 279  	  UPDATED_BY = in_updated_by
15:35:44 280  	  WHERE ID = in_id;
15:35:44 281  	END UPDATE_CC_UPDATE_STATUS;
15:35:44 282  
15:35:44 283  	/****************************************************************************/
15:35:44 284  
15:35:44 285  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
15:35:44 286  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
15:35:44 287  	  out_request_file     OUT SYS_REFCURSOR
15:35:44 288  	) AS
15:35:44 289  	BEGIN
15:35:44 290  	  OPEN out_request_file FOR
15:35:44 291  	  SELECT ID, FILE_NAME
15:35:44 292  	  FROM CC_REQUEST_FILE
15:35:44 293  	  WHERE FILE_NAME = in_request_filename;
15:35:44 294  	END GET_REQUEST_FILE_BY_FILENAME;
15:35:44 295  
15:35:44 296  	/****************************************************************************/
15:35:44 297  
15:35:44 298  	PROCEDURE SUSPEND_CREDIT_CARD (
15:35:44 299  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
15:35:44 300  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
15:35:44 301  	) AS
15:35:44 302  	BEGIN
15:35:44 303  	  -- Create history
15:35:44 304  	  PROCS_HISTORY_V17.CREATE_CREDIT_CARD_HISTORY(
15:35:44 305  	      in_credit_card_id 	   => in_credit_card_id,
15:35:44 306  	      in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:44 307  	  );
15:35:44 308  
15:35:44 309  	  UPDATE CREDIT_CARD
15:35:44 310  	  SET UPDATE_DATE = SYSDATE,
15:35:44 311  	  UPDATED_BY = in_updated_by,
15:35:44 312  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V17.CREDIT_CARD_DISABLED
15:35:44 313  	  WHERE ID = in_credit_card_id;
15:35:44 314  	END SUSPEND_CREDIT_CARD;
15:35:44 315  
15:35:44 316  	/****************************************************************************/
15:35:44 317  
15:35:44 318  	PROCEDURE UPDATE_CREDIT_CARD (
15:35:44 319  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
15:35:44 320  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:35:44 321  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
15:35:44 322  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
15:35:44 323  	) AS
15:35:44 324  	BEGIN
15:35:44 325  	  -- Create history
15:35:44 326  	  PROCS_HISTORY_V17.CREATE_CREDIT_CARD_HISTORY(
15:35:44 327  	      in_credit_card_id 	   => in_credit_card_id,
15:35:44 328  	      in_system_activity_reason_id => GLOBAL_ENUMS_V17.SAC_SYSTEM_APPLIED_RULE
15:35:44 329  	  );
15:35:44 330  
15:35:44 331  	  UPDATE CREDIT_CARD
15:35:44 332  	  SET UPDATE_DATE = SYSDATE,
15:35:44 333  	  UPDATED_BY = in_updated_by,
15:35:44 334  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
15:35:44 335  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
15:35:44 336  	  WHERE ID = in_credit_card_id;
15:35:44 337  	END UPDATE_CREDIT_CARD;
15:35:44 338  
15:35:44 339  	/****************************************************************************/
15:35:44 340  
15:35:44 341  	PROCEDURE COMPLETABLE_REQUESTS (
15:35:44 342  	  out_request_files OUT SYS_REFCURSOR
15:35:44 343  	) AS
15:35:44 344  	BEGIN
15:35:44 345  	  OPEN out_request_files FOR
15:35:44 346  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
15:35:44 347  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
15:35:44 348  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
15:35:44 349  	  AND rf.ID = u.CC_REQUEST_FILE_ID
15:35:44 350  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
15:35:44 351  	  MINUS
15:35:44 352  	  SELECT rf.ID, rf.FILE_NAME
15:35:44 353  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
15:35:44 354  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
15:35:44 355  	  AND rf.ID = u.CC_REQUEST_FILE_ID
15:35:44 356  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
15:35:44 357  	END COMPLETABLE_REQUESTS;
15:35:44 358  
15:35:44 359  	/****************************************************************************/
15:35:44 360  
15:35:44 361  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
15:35:44 362  	  in_max_hours_before_report IN  NUMBER,
15:35:44 363  	  out_request_files	     OUT SYS_REFCURSOR
15:35:44 364  	) AS
15:35:44 365  	BEGIN
15:35:44 366  	  OPEN out_request_files FOR
15:35:44 367  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
15:35:44 368  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
15:35:44 369  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
15:35:44 370  	  AND rf.ID = u.CC_REQUEST_FILE_ID
15:35:44 371  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
15:35:44 372  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
15:35:44 373  	  MINUS
15:35:44 374  	  SELECT rf.ID, rf.FILE_NAME
15:35:44 375  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
15:35:44 376  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
15:35:44 377  	  AND rf.ID = u.CC_REQUEST_FILE_ID
15:35:44 378  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
15:35:44 379  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
15:35:44 380  	END COMPLETABLE_REQUESTS_W_FAILS;
15:35:44 381  
15:35:44 382  END PROCS_CUPY;
15:35:44 383  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.25
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE
15:35:44   2  PACKAGE BODY PROCS_ENTITLEMENT_V17 AS
15:35:44   3  
15:35:44   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
15:35:44   5  	  in_subscription_id IN NUMBER,
15:35:44   6  	  out_uri OUT VARCHAR2)
15:35:44   7  	AS
15:35:44   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
15:35:44   9  	  UNKNOWN_ERROR   EXCEPTION;
15:35:44  10  	BEGIN
15:35:44  11  	  SELECT
15:35:44  12  	    POMD.VALUE INTO out_uri
15:35:44  13  	  FROM
15:35:44  14  	     OFFER_PRODUCT_OFFERING OPO,
15:35:44  15  	     PRODUCT_OFFERING PO,
15:35:44  16  	     OFFER_OFFER_CHAIN OOC,
15:35:44  17  	     SUBSCRIPTION S,
15:35:44  18  	     LICENSE LL,
15:35:44  19  	     PRODUCT_OFFERING_META_DATA POMD
15:35:44  20  	  WHERE
15:35:44  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
15:35:44  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
15:35:44  23  	     S.ID = in_subscription_id AND
15:35:44  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
15:35:44  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
15:35:44  26  	     PO.CAPABILITY_ID = 1 AND
15:35:44  27  	     S.ID = LL.SUBSCRIPTION_ID AND
15:35:44  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
15:35:44  29  	     NAME = 'entitlement_uri' AND
15:35:44  30  	     rownum < 2;
15:35:44  31  	EXCEPTION
15:35:44  32  	  WHEN OTHERS THEN
15:35:44  33  	    PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
15:35:44  36  
15:35:44  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
15:35:44  38  	  in_group_id	 IN  NUMBER,
15:35:44  39  	  out_result_set OUT SYS_REFCURSOR)
15:35:44  40  	AS
15:35:44  41  	  -- CONSTANTS
15:35:44  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
15:35:44  43  	  -- EXCEPTIONS
15:35:44  44  	  NOT_FOUND	  EXCEPTION;
15:35:44  45  	  UNKNOWN_ERROR   EXCEPTION;
15:35:44  46  	  -- VARIABLES
15:35:44  47  	  var_subs	  SYS_REFCURSOR;
15:35:44  48  	BEGIN
15:35:44  49  	  OPEN out_result_set FOR
15:35:44  50  
15:35:44  51  	SELECT
15:35:44  52  	  C.CODE NAME,
15:35:44  53  	  C.DESCRIPTION,
15:35:44  54  	  0 INHERITED,
15:35:44  55  	  C.SHAREABLE,
15:35:44  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
15:35:44  57  	FROM
15:35:44  58  	  SUBSCRIPTION SB
15:35:44  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
15:35:44  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
15:35:44  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
15:35:44  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
15:35:44  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
15:35:44  64  	WHERE
15:35:44  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
15:35:44  66  	  AND LIC.START_DATE <= SYSDATE
15:35:44  67  	  AND AC.GROUP_ID = in_group_id
15:35:44  68  	GROUP BY
15:35:44  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
15:35:44  70  UNION ALL
15:35:44  71  	SELECT
15:35:44  72  	  C.CODE NAME,
15:35:44  73  	  C.DESCRIPTION,
15:35:44  74  	  1 INHERITED,
15:35:44  75  	  C.SHAREABLE,
15:35:44  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
15:35:44  77  	FROM
15:35:44  78  	  ACCOUNT BORROWER,
15:35:44  79  	  SUBSCRIPTION S,
15:35:44  80  	  LICENSE LIC,
15:35:44  81  	  OFFER_PRODUCT_OFFERING OPO,
15:35:44  82  	  PRODUCT_OFFERING PO,
15:35:44  83  	  CAPABILITY C,
15:35:44  84  	  GROUP_ACCOUNT GA,
15:35:44  85  	  SUBSCRIPTION_SHARE SS
15:35:44  86  	WHERE
15:35:44  87  	  BORROWER.GROUP_ID = in_group_id
15:35:44  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
15:35:44  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
15:35:44  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
15:35:44  91  	  AND PO.CAPABILITY_ID = C.ID
15:35:44  92  	  AND GA.SUBSCRIPTION_ID = S.ID
15:35:44  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
15:35:44  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
15:35:44  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
15:35:44  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
15:35:44  97  	  AND C.SHAREABLE = 1
15:35:44  98  	GROUP BY
15:35:44  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
15:35:44 100  
15:35:44 101  	EXCEPTION
15:35:44 102  	  WHEN OTHERS THEN
15:35:44 103  	    PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 105  	END GET_ALL_ENTITLEMENTS;
15:35:44 106  
15:35:44 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
15:35:44 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:44 109  	  out_result_set OUT SYS_REFCURSOR)
15:35:44 110  	AS
15:35:44 111  	  -- CONSTANTS
15:35:44 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
15:35:44 113  	  -- EXCEPTIONS
15:35:44 114  	  NOT_FOUND	  EXCEPTION;
15:35:44 115  	  UNKNOWN_ERROR   EXCEPTION;
15:35:44 116  	  -- VARIABLES
15:35:44 117  	  var_subs	  SYS_REFCURSOR;
15:35:44 118  	BEGIN
15:35:44 119  	  OPEN out_result_set FOR
15:35:44 120  
15:35:44 121  	      SELECT
15:35:44 122  		c.code NAME,
15:35:44 123  		C.DESCRIPTION,
15:35:44 124  		0 INHERITED,
15:35:44 125  		C.SHAREABLE,
15:35:44 126  		sysdate as EXPIRES
15:35:44 127  	      FROM
15:35:44 128  		offer_offer_chain ooc,
15:35:44 129  		offer o,
15:35:44 130  		offer_product_offering opo,
15:35:44 131  		product_offering po,
15:35:44 132  		capability c
15:35:44 133  	      WHERE
15:35:44 134  		o.id = ooc.offer_id AND
15:35:44 135  		opo.offer_id = o.id AND
15:35:44 136  		po.id = opo.product_offering_id AND
15:35:44 137  		c.id = po.capability_id AND
15:35:44 138  		c.id !=0 AND
15:35:44 139  		ooc.offer_chain_id =
15:35:44 140  		(SELECT
15:35:44 141  		    ocmd.offer_chain_id
15:35:44 142  		  FROM
15:35:44 143  		      offer_chain_meta_data ocmd
15:35:44 144  		  WHERE
15:35:44 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
15:35:44 146  		      ocmd.value = in_product_id AND
15:35:44 147  		      rownum < 2
15:35:44 148  		)
15:35:44 149  	      ;
15:35:44 150  
15:35:44 151  	EXCEPTION
15:35:44 152  	  WHEN OTHERS THEN
15:35:44 153  	    PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 155  	END GET_ITUNES_ENTITLEMENTS;
15:35:44 156  
15:35:44 157  END PROCS_ENTITLEMENT_V17;
15:35:44 158  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE CREATE_ADDRESS_HISTORY(
15:35:44   4  	in_address_id		     IN NUMBER,
15:35:44   5  	in_system_activity_reason_id IN NUMBER
15:35:44   6  ) AS
15:35:44   7  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
15:35:44   8  -- VARIABLES
15:35:44   9  var_address1    ADDRESS.ADDRESS1%TYPE;
15:35:44  10  var_address2    ADDRESS.ADDRESS2%TYPE;
15:35:44  11  var_city	      ADDRESS.CITY%TYPE;
15:35:44  12  var_state       ADDRESS.STATE%TYPE;
15:35:44  13  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
15:35:44  14  var_country     ADDRESS.COUNTRY%TYPE;
15:35:44  15  var_created_by  ADDRESS.CREATED_BY%TYPE;
15:35:44  16  var_create_date ADDRESS.CREATE_DATE%TYPE;
15:35:44  17  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
15:35:44  18  var_update_date ADDRESS.UPDATE_DATE%TYPE;
15:35:44  19  -- EXCEPTIONS
15:35:44  20  BAD_ADDRESS_ID	     EXCEPTION;
15:35:44  21  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:35:44  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44  23  BEGIN
15:35:44  24  
15:35:44  25  	BEGIN
15:35:44  26  	  SELECT
15:35:44  27  	    ADDRESS.ADDRESS1,
15:35:44  28  	    ADDRESS.ADDRESS2,
15:35:44  29  	    ADDRESS.CITY,
15:35:44  30  	    ADDRESS.STATE,
15:35:44  31  	    ADDRESS.POSTAL_CODE,
15:35:44  32  	    ADDRESS.COUNTRY,
15:35:44  33  	    ADDRESS.CREATED_BY,
15:35:44  34  	    ADDRESS.CREATE_DATE,
15:35:44  35  	    ADDRESS.UPDATED_BY,
15:35:44  36  	    ADDRESS.UPDATE_DATE
15:35:44  37  	    into
15:35:44  38  	    var_address1,
15:35:44  39  	    var_address2,
15:35:44  40  	    var_city,
15:35:44  41  	    var_state,
15:35:44  42  	    var_postal_code,
15:35:44  43  	    var_country,
15:35:44  44  	    var_created_by,
15:35:44  45  	    var_create_date,
15:35:44  46  	    var_updated_by,
15:35:44  47  	    var_update_date
15:35:44  48  	  FROM
15:35:44  49  	    ADDRESS
15:35:44  50  	  WHERE
15:35:44  51  	    ADDRESS.ID = in_address_id;
15:35:44  52  	  EXCEPTION
15:35:44  53  	    WHEN NO_DATA_FOUND THEN
15:35:44  54  	      RAISE BAD_ADDRESS_ID;
15:35:44  55  	END;
15:35:44  56  
15:35:44  57  	BEGIN
15:35:44  58  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_ADDRESS_HISTORY(
15:35:44  59  	    in_address_id,
15:35:44  60  	    in_system_activity_reason_id,
15:35:44  61  	    var_address1,
15:35:44  62  	    var_address2,
15:35:44  63  	    var_city,
15:35:44  64  	    var_state,
15:35:44  65  	    var_postal_code,
15:35:44  66  	    var_country,
15:35:44  67  	    var_created_by,
15:35:44  68  	    var_create_date,
15:35:44  69  	    var_updated_by,
15:35:44  70  	    var_update_date
15:35:44  71  	  );
15:35:44  72  	  EXCEPTION
15:35:44  73  	    WHEN OTHERS THEN
15:35:44  74  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44  75  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44  76  	END;
15:35:44  77  
15:35:44  78  EXCEPTION
15:35:44  79  WHEN BAD_ADDRESS_ID THEN
15:35:44  80  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44  81  	  SPROC_NAME, 'Bad recipientAddress id');
15:35:44  82  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44  83  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44  84  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44  85  WHEN OTHERS THEN
15:35:44  86  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  87  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44  88  END CREATE_ADDRESS_HISTORY;
15:35:44  89  
15:35:44  90  /********************************************************************/
15:35:44  91  
15:35:44  92  PROCEDURE CREATE_ACCOUNT_HISTORY(
15:35:44  93  	in_account_id		     IN NUMBER,
15:35:44  94  	in_system_activity_reason_id IN NUMBER
15:35:44  95  ) AS
15:35:44  96  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
15:35:44  97  -- VARIABLES
15:35:44  98  var_account_status_id  NUMBER;
15:35:44  99  var_suspend_date	     DATE;
15:35:44 100  var_group_id	     NUMBER;
15:35:44 101  var_instrument_type_id NUMBER;
15:35:44 102  var_instrument_id      NUMBER;
15:35:44 103  var_updated_by	     VARCHAR2(255);
15:35:44 104  var_update_date	     DATE;
15:35:44 105  -- EXCEPTIONS
15:35:44 106  BAD_ACCOUNT_ID	     EXCEPTION;
15:35:44 107  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:35:44 108  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44 109  BEGIN
15:35:44 110  
15:35:44 111  	BEGIN
15:35:44 112  	  SELECT
15:35:44 113  	    ACCOUNT.ACCOUNT_STATUS_ID,
15:35:44 114  	    ACCOUNT.GROUP_ID,
15:35:44 115  	    ACCOUNT.INSTRUMENT_TYPE_ID,
15:35:44 116  	    ACCOUNT.INSTRUMENT_TYPE_ID,
15:35:44 117  	    ACCOUNT.UPDATED_BY,
15:35:44 118  	    ACCOUNT.UPDATE_DATE
15:35:44 119  	    into
15:35:44 120  	    var_account_status_id,
15:35:44 121  	    var_group_id,
15:35:44 122  	    var_instrument_type_id,
15:35:44 123  	    var_instrument_id,
15:35:44 124  	    var_updated_by,
15:35:44 125  	    var_update_date
15:35:44 126  	  FROM
15:35:44 127  	    ACCOUNT
15:35:44 128  	  WHERE
15:35:44 129  	    ACCOUNT.ID = in_account_id;
15:35:44 130  	  EXCEPTION
15:35:44 131  	    WHEN NO_DATA_FOUND THEN
15:35:44 132  	      RAISE BAD_ACCOUNT_ID;
15:35:44 133  	END;
15:35:44 134  
15:35:44 135  	BEGIN
15:35:44 136  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_ACCOUNT_HISTORY(
15:35:44 137  	    in_account_id,
15:35:44 138  	    var_suspend_date,
15:35:44 139  	    var_group_id,
15:35:44 140  	    var_updated_by,
15:35:44 141  	    var_update_date,
15:35:44 142  	    in_system_activity_reason_id,
15:35:44 143  	    var_account_status_id,
15:35:44 144  	    var_instrument_type_id,
15:35:44 145  	    var_instrument_id
15:35:44 146  	  );
15:35:44 147  	  EXCEPTION
15:35:44 148  	    WHEN OTHERS THEN
15:35:44 149  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 150  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 151  	END;
15:35:44 152  
15:35:44 153  EXCEPTION
15:35:44 154  WHEN BAD_ACCOUNT_ID THEN
15:35:44 155  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 156  	  SPROC_NAME, 'Bad account id');
15:35:44 157  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 158  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 159  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 160  WHEN OTHERS THEN
15:35:44 161  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 163  END CREATE_ACCOUNT_HISTORY;
15:35:44 164  
15:35:44 165  /********************************************************************/
15:35:44 166  
15:35:44 167  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
15:35:44 168  /*
15:35:44 169  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 170  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 171  */
15:35:44 172  	in_subscription_id	     IN NUMBER,
15:35:44 173  	in_system_activity_reason_id IN NUMBER
15:35:44 174  ) AS
15:35:44 175  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
15:35:44 176  -- VARIABLES
15:35:44 177  var_account_id		    NUMBER;
15:35:44 178  var_purchase_date 	    DATE;
15:35:44 179  var_offer_chain_id	    NUMBER;
15:35:44 180  var_suspend_date		    DATE;
15:35:44 181  var_termination_date	    DATE;
15:35:44 182  var_days_ramaining_adjustment NUMBER;
15:35:44 183  var_sct_id		    NUMBER;
15:35:44 184  var_updated_by		    VARCHAR2(255);
15:35:44 185  var_update_date		    DATE;
15:35:44 186  -- EXCEPTIONS
15:35:44 187  BAD_SUBSCRIPTION_ID    EXCEPTION;
15:35:44 188  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:35:44 189  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44 190  BEGIN
15:35:44 191  
15:35:44 192  	BEGIN
15:35:44 193  	  SELECT
15:35:44 194  	    SUBSCRIPTION.account_id,
15:35:44 195  	    SUBSCRIPTION.PURCHASE_DATE,
15:35:44 196  	    SUBSCRIPTION.OFFER_CHAIN_ID,
15:35:44 197  	    SUBSCRIPTION.SUSPEND_DATE,
15:35:44 198  	    SUBSCRIPTION.TERMINATION_DATE,
15:35:44 199  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
15:35:44 200  	    SUBSCRIPTION.SCT_ID,
15:35:44 201  	    SUBSCRIPTION.UPDATED_BY,
15:35:44 202  	    SUBSCRIPTION.UPDATE_DATE
15:35:44 203  	    into
15:35:44 204  	    var_account_id,
15:35:44 205  	    var_purchase_date,
15:35:44 206  	    var_offer_chain_id,
15:35:44 207  	    var_suspend_date,
15:35:44 208  	    var_termination_date,
15:35:44 209  	    var_days_ramaining_adjustment,
15:35:44 210  	    var_sct_id,
15:35:44 211  	    var_updated_by,
15:35:44 212  	    var_update_date
15:35:44 213  	  FROM
15:35:44 214  	    SUBSCRIPTION
15:35:44 215  	  WHERE
15:35:44 216  	    SUBSCRIPTION.ID = in_subscription_id;
15:35:44 217  	  EXCEPTION
15:35:44 218  	    WHEN NO_DATA_FOUND THEN
15:35:44 219  	      RAISE BAD_SUBSCRIPTION_ID;
15:35:44 220  	END;
15:35:44 221  
15:35:44 222  	BEGIN
15:35:44 223  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_SUBSCRIPTION_HISTORY(
15:35:44 224  	    in_subscription_id,
15:35:44 225  	    var_account_id,
15:35:44 226  	    var_purchase_date,
15:35:44 227  	    var_offer_chain_id,
15:35:44 228  	    var_suspend_date,
15:35:44 229  	    var_termination_date,
15:35:44 230  	    var_days_ramaining_adjustment,
15:35:44 231  	    var_sct_id,
15:35:44 232  	    var_updated_by,
15:35:44 233  	    var_update_date,
15:35:44 234  	    in_system_activity_reason_id
15:35:44 235  	  );
15:35:44 236  	  EXCEPTION
15:35:44 237  	    WHEN OTHERS THEN
15:35:44 238  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 239  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 240  	END;
15:35:44 241  
15:35:44 242  EXCEPTION
15:35:44 243  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:44 244  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 245  	  SPROC_NAME, 'No such subscription');
15:35:44 246  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 247  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 248  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 249  WHEN OTHERS THEN
15:35:44 250  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 251  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 252  END CREATE_SUBSCRIPTION_HISTORY;
15:35:44 253  
15:35:44 254  /********************************************************************/
15:35:44 255  
15:35:44 256  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
15:35:44 257  	in_credit_card_id	      IN NUMBER,
15:35:44 258  	in_system_activity_reason_id  IN NUMBER
15:35:44 259  ) AS
15:35:44 260  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
15:35:44 261  -- VARIABLES
15:35:44 262  var_account_id		     NUMBER;
15:35:44 263  var_instrument_name	     VARCHAR2(255);
15:35:44 264  var_private_card_holder_name   VARCHAR2(256);
15:35:44 265  var_private_street_address     VARCHAR2(256);
15:35:44 266  var_private_street_address2    VARCHAR2(256);
15:35:44 267  var_state 		     VARCHAR2(50);
15:35:44 268  var_city			     VARCHAR2(50);
15:35:44 269  var_postal_code		     VARCHAR2(20);
15:35:44 270  var_country		     CHAR(2);
15:35:44 271  var_last_four_cc		     VARCHAR2(4);
15:35:44 272  var_expiration_date	     DATE;
15:35:44 273  var_credit_card_type_id	     NUMBER;
15:35:44 274  var_secret_token		     VARCHAR2(255);
15:35:44 275  var_chase_profile_id	     VARCHAR2(255);
15:35:44 276  var_credit_card_status_id      NUMBER;
15:35:44 277  var_updated_by		     VARCHAR2(255);
15:35:44 278  var_update_date		     DATE;
15:35:44 279  -- EXCEPTIONS
15:35:44 280  BAD_CREDIT_CARD_ID     EXCEPTION;
15:35:44 281  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:35:44 282  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44 283  BEGIN
15:35:44 284  
15:35:44 285  	BEGIN
15:35:44 286  	  SELECT
15:35:44 287  	    ACCOUNT_ID,
15:35:44 288  	    INSTRUMENT_NAME,
15:35:44 289  	    PRIVATE_CARD_HOLDER_NAME,
15:35:44 290  	    PRIVATE_STREET_ADDRESS,
15:35:44 291  	    PRIVATE_STREET_ADDRESS2,
15:35:44 292  	    STATE,
15:35:44 293  	    CITY,
15:35:44 294  	    POSTAL_CODE,
15:35:44 295  	    COUNTRY,
15:35:44 296  	    LAST_FOUR_CC,
15:35:44 297  	    EXPIRATION_DATE,
15:35:44 298  	    CREDIT_CARD_TYPE_ID,
15:35:44 299  	    SECRET_TOKEN,
15:35:44 300  	    CHASE_PROFILE_ID,
15:35:44 301  	    CREDIT_CARD_STATUS_ID,
15:35:44 302  	    UPDATED_BY,
15:35:44 303  	    UPDATE_DATE
15:35:44 304  	    into
15:35:44 305  	    var_account_id,
15:35:44 306  	    var_instrument_name,
15:35:44 307  	    var_private_card_holder_name,
15:35:44 308  	    var_private_street_address,
15:35:44 309  	    var_private_street_address2,
15:35:44 310  	    var_state,
15:35:44 311  	    var_city,
15:35:44 312  	    var_postal_code,
15:35:44 313  	    var_country,
15:35:44 314  	    var_last_four_cc,
15:35:44 315  	    var_expiration_date,
15:35:44 316  	    var_credit_card_type_id,
15:35:44 317  	    var_secret_token,
15:35:44 318  	    var_chase_profile_id,
15:35:44 319  	    var_credit_card_status_id,
15:35:44 320  	    var_updated_by,
15:35:44 321  	    var_update_date
15:35:44 322  	  FROM
15:35:44 323  	    CREDIT_CARD
15:35:44 324  	  WHERE
15:35:44 325  	    CREDIT_CARD.ID = in_credit_card_id;
15:35:44 326  	  EXCEPTION
15:35:44 327  	    WHEN NO_DATA_FOUND THEN
15:35:44 328  	      RAISE BAD_CREDIT_CARD_ID;
15:35:44 329  	END;
15:35:44 330  
15:35:44 331  	BEGIN
15:35:44 332  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_CREDIT_CARD_HISTORY(
15:35:44 333  	    in_credit_card_id,
15:35:44 334  	    var_account_id,
15:35:44 335  	    var_instrument_name,
15:35:44 336  	    var_private_card_holder_name,
15:35:44 337  	    var_private_street_address,
15:35:44 338  	    var_private_street_address2,
15:35:44 339  	    var_state,
15:35:44 340  	    var_city,
15:35:44 341  	    var_postal_code,
15:35:44 342  	    var_country,
15:35:44 343  	    var_last_four_cc,
15:35:44 344  	    var_expiration_date,
15:35:44 345  	    var_credit_card_type_id,
15:35:44 346  	    var_secret_token,
15:35:44 347  	    var_chase_profile_id,
15:35:44 348  	    var_credit_card_status_id,
15:35:44 349  	    var_updated_by,
15:35:44 350  	    var_update_date,
15:35:44 351  	    in_system_activity_reason_id
15:35:44 352  	  );
15:35:44 353  	  EXCEPTION
15:35:44 354  	    WHEN OTHERS THEN
15:35:44 355  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 356  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 357  	END;
15:35:44 358  
15:35:44 359  EXCEPTION
15:35:44 360  WHEN BAD_CREDIT_CARD_ID THEN
15:35:44 361  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 362  	  SPROC_NAME, 'No such credit card');
15:35:44 363  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 364  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 365  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 366  WHEN OTHERS THEN
15:35:44 367  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 368  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 369  END CREATE_CREDIT_CARD_HISTORY;
15:35:44 370  
15:35:44 371  /********************************************************************/
15:35:44 372  
15:35:44 373  PROCEDURE CREATE_PAYPAL_HISTORY(
15:35:44 374  /*
15:35:44 375  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 376  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 377  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:44 378  */
15:35:44 379  	in_paypal_id		      IN NUMBER,
15:35:44 380  	in_system_activity_reason_id  IN NUMBER
15:35:44 381  ) AS
15:35:44 382  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
15:35:44 383  -- VARIABLES
15:35:44 384  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
15:35:44 385  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
15:35:44 386  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
15:35:44 387  var_created_by		   PAYPAL.CREATED_BY%TYPE;
15:35:44 388  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
15:35:44 389  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
15:35:44 390  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
15:35:44 391  var_state 		   PAYPAL.STATE%TYPE;
15:35:44 392  var_city			   PAYPAL.CITY%TYPE;
15:35:44 393  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
15:35:44 394  var_country		   PAYPAL.COUNTRY%TYPE;
15:35:44 395  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
15:35:44 396  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
15:35:44 397  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
15:35:44 398  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
15:35:44 399  -- EXCEPTION
15:35:44 400  BAD_PAYPAL_ID	  EXCEPTION;
15:35:44 401  CAN_NOT_ADD_HISTORY EXCEPTION;
15:35:44 402  EXCEPTION_MESSAGE   VARCHAR2(1024);
15:35:44 403  BEGIN
15:35:44 404  
15:35:44 405  	BEGIN
15:35:44 406  	  SELECT
15:35:44 407  	    ACCOUNT_ID,
15:35:44 408  	    INSTRUMENT_NAME,
15:35:44 409  	    PRIVATE_EMAIL_ADDRESS,
15:35:44 410  	    UPDATE_DATE,
15:35:44 411  	    UPDATED_BY,
15:35:44 412  	    PAYPAL_STATUS_ID,
15:35:44 413  	    PRIVATE_STREET_ADDRESS,
15:35:44 414  	    PRIVATE_STREET_ADDRESS2,
15:35:44 415  	    STATE,
15:35:44 416  	    CITY,
15:35:44 417  	    POSTAL_CODE,
15:35:44 418  	    COUNTRY,
15:35:44 419  	    EXPIRATION_DATE,
15:35:44 420  	    SECRET_TOKEN
15:35:44 421  	  INTO
15:35:44 422  	    var_account_id,
15:35:44 423  	    var_instrument_name,
15:35:44 424  	    var_private_email_address,
15:35:44 425  	    var_update_date,
15:35:44 426  	    var_updated_by,
15:35:44 427  	    var_paypal_status_id,
15:35:44 428  	    var_paypal_prvt_street_addr,
15:35:44 429  	    var_paypal_prvt_street_addr2,
15:35:44 430  	    var_state,
15:35:44 431  	    var_city,
15:35:44 432  	    var_postal_code,
15:35:44 433  	    var_country,
15:35:44 434  	    var_expiration_date,
15:35:44 435  	    var_secret_token
15:35:44 436  	  FROM
15:35:44 437  	    PAYPAL
15:35:44 438  	  WHERE
15:35:44 439  	    ID = in_paypal_id;
15:35:44 440  	  EXCEPTION
15:35:44 441  	    WHEN NO_DATA_FOUND THEN
15:35:44 442  	      RAISE BAD_PAYPAL_ID;
15:35:44 443  	END;
15:35:44 444  
15:35:44 445  	BEGIN
15:35:44 446  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_PAYPAL_HISTORY(
15:35:44 447  	    in_paypal_id,
15:35:44 448  	    var_account_id,
15:35:44 449  	    var_instrument_name,
15:35:44 450  	    var_private_email_address,
15:35:44 451  	    var_updated_by,
15:35:44 452  	    var_update_date,
15:35:44 453  	    var_paypal_status_id,
15:35:44 454  	    var_paypal_prvt_street_addr,
15:35:44 455  	    var_paypal_prvt_street_addr2,
15:35:44 456  	    var_state,
15:35:44 457  	    var_city,
15:35:44 458  	    var_postal_code,
15:35:44 459  	    var_country,
15:35:44 460  	    var_expiration_date,
15:35:44 461  	    in_system_activity_reason_id,
15:35:44 462  	    var_secret_token
15:35:44 463  	  );
15:35:44 464  	  EXCEPTION
15:35:44 465  	    WHEN OTHERS THEN
15:35:44 466  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 467  	      RAISE CAN_NOT_ADD_HISTORY;
15:35:44 468  	END;
15:35:44 469  
15:35:44 470  EXCEPTION
15:35:44 471  WHEN BAD_PAYPAL_ID THEN
15:35:44 472  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 473  	  SPROC_NAME, 'No such paypal');
15:35:44 474  WHEN CAN_NOT_ADD_HISTORY THEN
15:35:44 475  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 476  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
15:35:44 477  WHEN OTHERS THEN
15:35:44 478  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 479  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 480  END CREATE_PAYPAL_HISTORY;
15:35:44 481  
15:35:44 482  /********************************************************************/
15:35:44 483  
15:35:44 484  PROCEDURE CREATE_GIFT_CERT_HISTORY(
15:35:44 485  	in_gift_certificate_id	      IN NUMBER,
15:35:44 486  	in_system_activity_reason_id  IN NUMBER
15:35:44 487  ) AS
15:35:44 488  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
15:35:44 489  -- VARIABLES
15:35:44 490  var_purchaser_group_id	     NUMBER;
15:35:44 491  var_purchase_invoice_id	     NUMBER;
15:35:44 492  var_offer_chain_id	     NUMBER;
15:35:44 493  var_expiration_date	     DATE;
15:35:44 494  var_purchase_date 	     DATE;
15:35:44 495  var_gift_certificate_status_id NUMBER;
15:35:44 496  var_code			     VARCHAR2(255);
15:35:44 497  var_recipient_name	     VARCHAR2(255);
15:35:44 498  var_gift_message		     VARCHAR2(500);
15:35:44 499  var_recipient_email	     VARCHAR2(255);
15:35:44 500  var_finalized_invoice_id	     NUMBER;
15:35:44 501  var_sender_email		     VARCHAR2(50);
15:35:44 502  var_sender_name		     VARCHAR2(50);
15:35:44 503  var_redemption_date	     DATE;
15:35:44 504  var_redeemer_group_id	     NUMBER;
15:35:44 505  var_cancelation_date	     DATE;
15:35:44 506  var_updated_by		     VARCHAR2(255);
15:35:44 507  var_update_date		     DATE;
15:35:44 508  var_recipient_address_id	     NUMBER;
15:35:44 509  var_redeemer_address_id	     NUMBER;
15:35:44 510  var_recipient_notify_date      DATE;
15:35:44 511  -- EXCEPTIONS
15:35:44 512  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
15:35:44 513  CAN_NOT_CREATE_HISTORY  EXCEPTION;
15:35:44 514  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:35:44 515  BEGIN
15:35:44 516  
15:35:44 517  	BEGIN
15:35:44 518  	  SELECT
15:35:44 519  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
15:35:44 520  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
15:35:44 521  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
15:35:44 522  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
15:35:44 523  	    GIFT_CERTIFICATE.PURCHASE_DATE,
15:35:44 524  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
15:35:44 525  	    GIFT_CERTIFICATE.CODE,
15:35:44 526  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
15:35:44 527  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
15:35:44 528  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
15:35:44 529  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
15:35:44 530  	    GIFT_CERTIFICATE.SENDER_EMAIL,
15:35:44 531  	    GIFT_CERTIFICATE.SENDER_NAME,
15:35:44 532  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
15:35:44 533  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
15:35:44 534  	    GIFT_CERTIFICATE.CANCELATION_DATE,
15:35:44 535  	    GIFT_CERTIFICATE.UPDATED_BY,
15:35:44 536  	    GIFT_CERTIFICATE.UPDATE_DATE,
15:35:44 537  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
15:35:44 538  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
15:35:44 539  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
15:35:44 540  	    into
15:35:44 541  	    var_purchaser_group_id,
15:35:44 542  	    var_purchase_invoice_id,
15:35:44 543  	    var_offer_chain_id,
15:35:44 544  	    var_expiration_date,
15:35:44 545  	    var_purchase_date,
15:35:44 546  	    var_gift_certificate_status_id,
15:35:44 547  	    var_code,
15:35:44 548  	    var_recipient_name,
15:35:44 549  	    var_gift_message,
15:35:44 550  	    var_recipient_email,
15:35:44 551  	    var_finalized_invoice_id,
15:35:44 552  	    var_sender_email,
15:35:44 553  	    var_sender_name,
15:35:44 554  	    var_redemption_date,
15:35:44 555  	    var_redeemer_group_id,
15:35:44 556  	    var_cancelation_date,
15:35:44 557  	    var_updated_by,
15:35:44 558  	    var_update_date,
15:35:44 559  	    var_recipient_address_id,
15:35:44 560  	    var_redeemer_address_id,
15:35:44 561  	    var_recipient_notify_date
15:35:44 562  	  FROM
15:35:44 563  	    GIFT_CERTIFICATE
15:35:44 564  	  WHERE
15:35:44 565  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
15:35:44 566  	END;
15:35:44 567  
15:35:44 568  	BEGIN
15:35:44 569  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_GIFT_CERT_HISTORY(
15:35:44 570  	    in_gift_certificate_id,
15:35:44 571  	    var_purchaser_group_id,
15:35:44 572  	    var_purchase_invoice_id,
15:35:44 573  	    var_offer_chain_id,
15:35:44 574  	    var_expiration_date,
15:35:44 575  	    var_purchase_date,
15:35:44 576  	    var_gift_certificate_status_id,
15:35:44 577  	    var_code,
15:35:44 578  	    var_updated_by,
15:35:44 579  	    var_update_date,
15:35:44 580  	    in_system_activity_reason_id,
15:35:44 581  	    var_recipient_name,
15:35:44 582  	    var_gift_message,
15:35:44 583  	    var_recipient_email,
15:35:44 584  	    var_finalized_invoice_id,
15:35:44 585  	    var_sender_email,
15:35:44 586  	    var_sender_name,
15:35:44 587  	    var_redemption_date,
15:35:44 588  	    var_redeemer_group_id,
15:35:44 589  	    var_cancelation_date,
15:35:44 590  	    var_recipient_address_id,
15:35:44 591  	    var_redeemer_address_id,
15:35:44 592  	    var_recipient_notify_date
15:35:44 593  	  );
15:35:44 594  	  EXCEPTION
15:35:44 595  	    WHEN OTHERS THEN
15:35:44 596  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 597  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 598  	END;
15:35:44 599  
15:35:44 600  EXCEPTION
15:35:44 601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
15:35:44 602  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 603  	  SPROC_NAME, 'No such gift certificate');
15:35:44 604  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 605  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 606  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 607  WHEN OTHERS THEN
15:35:44 608  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 609  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 610  END CREATE_GIFT_CERT_HISTORY;
15:35:44 611  
15:35:44 612  /********************************************************************/
15:35:44 613  
15:35:44 614  PROCEDURE CREATE_TRANSACTION_HISTORY (
15:35:44 615  	in_transaction_id	     IN NUMBER,
15:35:44 616  	in_system_activity_reason_id IN NUMBER
15:35:44 617  ) AS
15:35:44 618  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
15:35:44 619  -- VARIABLES
15:35:44 620  var_transaction_status_id NUMBER;
15:35:44 621  var_transaction_amount	NUMBER(10,2);
15:35:44 622  var_updated_by		VARCHAR2(255);
15:35:44 623  var_update_date		DATE;
15:35:44 624  -- EXCEPTIONS
15:35:44 625  BAD_TRANSACTION_ID     EXCEPTION;
15:35:44 626  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:35:44 627  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44 628  BEGIN
15:35:44 629  
15:35:44 630  	BEGIN
15:35:44 631  	  SELECT
15:35:44 632  	    TRANSACTION.TRANSACTION_STATUS_ID,
15:35:44 633  	    TRANSACTION.TRANSACTION_AMOUNT,
15:35:44 634  	    TRANSACTION.UPDATED_BY,
15:35:44 635  	    TRANSACTION.UPDATE_DATE
15:35:44 636  	    into
15:35:44 637  	    var_transaction_status_id,
15:35:44 638  	    var_transaction_amount,
15:35:44 639  	    var_updated_by,
15:35:44 640  	    var_update_date
15:35:44 641  	  FROM
15:35:44 642  	    TRANSACTION
15:35:44 643  	  WHERE
15:35:44 644  	    TRANSACTION.ID = in_transaction_id;
15:35:44 645  	  EXCEPTION
15:35:44 646  	    WHEN NO_DATA_FOUND THEN
15:35:44 647  	      RAISE BAD_TRANSACTION_ID;
15:35:44 648  	END;
15:35:44 649  
15:35:44 650  	BEGIN
15:35:44 651  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_TRANSACTION_HISTORY(
15:35:44 652  	    in_transaction_id,
15:35:44 653  	    var_transaction_status_id,
15:35:44 654  	    var_transaction_amount,
15:35:44 655  	    var_updated_by,
15:35:44 656  	    var_update_date,
15:35:44 657  	    in_system_activity_reason_id
15:35:44 658  	  );
15:35:44 659  	  EXCEPTION
15:35:44 660  	    WHEN OTHERS THEN
15:35:44 661  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 662  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 663  	END;
15:35:44 664  
15:35:44 665  EXCEPTION
15:35:44 666  WHEN BAD_TRANSACTION_ID THEN
15:35:44 667  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 668  	  SPROC_NAME, 'No such transaction');
15:35:44 669  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 670  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 671  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 672  WHEN OTHERS THEN
15:35:44 673  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 674  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 675  END CREATE_TRANSACTION_HISTORY;
15:35:44 676  
15:35:44 677  /********************************************************************/
15:35:44 678  
15:35:44 679  PROCEDURE CREATE_INVOICE_HISTORY (
15:35:44 680  /*
15:35:44 681  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 682  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 683  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:44 684  */
15:35:44 685  	in_invoice_id		     IN NUMBER,
15:35:44 686  	in_system_activity_reason_id IN NUMBER
15:35:44 687  ) AS
15:35:44 688  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
15:35:44 689  -- VARIABLES
15:35:44 690  var_invoice_status_id NUMBER;
15:35:44 691  var_updated_by	    VARCHAR2(255);
15:35:44 692  var_update_date	    DATE;
15:35:44 693  -- EXCEPTIONS
15:35:44 694  BAD_INVOICE_ID	     EXCEPTION;
15:35:44 695  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:35:44 696  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44 697  BEGIN
15:35:44 698  
15:35:44 699  	BEGIN
15:35:44 700  	  SELECT
15:35:44 701  	    INVOICE.INVOICE_STATUS_ID,
15:35:44 702  	    INVOICE.UPDATED_BY,
15:35:44 703  	    INVOICE.UPDATE_DATE
15:35:44 704  	    into
15:35:44 705  	    var_invoice_status_id,
15:35:44 706  	    var_updated_by,
15:35:44 707  	    var_update_date
15:35:44 708  	  FROM
15:35:44 709  	    INVOICE
15:35:44 710  	  WHERE
15:35:44 711  	    INVOICE.ID = in_invoice_id;
15:35:44 712  	  EXCEPTION
15:35:44 713  	    WHEN NO_DATA_FOUND THEN
15:35:44 714  	      RAISE BAD_INVOICE_ID;
15:35:44 715  	END;
15:35:44 716  
15:35:44 717  	BEGIN
15:35:44 718  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_INVOICE_HISTORY(
15:35:44 719  	    in_invoice_id,
15:35:44 720  	    var_invoice_status_id,
15:35:44 721  	    var_updated_by,
15:35:44 722  	    var_update_date,
15:35:44 723  	    in_system_activity_reason_id
15:35:44 724  	  );
15:35:44 725  	  EXCEPTION
15:35:44 726  	    WHEN OTHERS THEN
15:35:44 727  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 728  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 729  	END;
15:35:44 730  
15:35:44 731  EXCEPTION
15:35:44 732  WHEN BAD_INVOICE_ID THEN
15:35:44 733  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 734  	  SPROC_NAME, 'No such invoice');
15:35:44 735  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 736  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 737  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 738  WHEN OTHERS THEN
15:35:44 739  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 740  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 741  END CREATE_INVOICE_HISTORY;
15:35:44 742  
15:35:44 743  /********************************************************************/
15:35:44 744  
15:35:44 745  PROCEDURE CREATE_LICENSE_HISTORY (
15:35:44 746  /*
15:35:44 747  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 748  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 749  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:44 750  */
15:35:44 751  	in_license_id		     IN NUMBER,
15:35:44 752  	in_system_activity_reason_id IN NUMBER
15:35:44 753  ) AS
15:35:44 754  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
15:35:44 755  -- VARIABLES
15:35:44 756  var_license_status_id	    NUMBER;
15:35:44 757  var_needs_entitlements	    NUMBER;
15:35:44 758  var_start_date		    DATE;
15:35:44 759  var_offer_id		    NUMBER;
15:35:44 760  var_subscription_id	    NUMBER;
15:35:44 761  var_invoice_id		    NUMBER;
15:35:44 762  var_end_date		    DATE;
15:35:44 763  var_is_extension		    NUMBER;
15:35:44 764  var_current_offer_index	    NUMBER;
15:35:44 765  var_current_offer_recurr_num  NUMBER;
15:35:44 766  var_updated_by		    VARCHAR2(255);
15:35:44 767  var_update_date		    DATE;
15:35:44 768  var_entitlement_end_date	    DATE;
15:35:44 769  -- EXCEPTIONS
15:35:44 770  BAD_LICENSE_ID	     EXCEPTION;
15:35:44 771  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:35:44 772  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44 773  BEGIN
15:35:44 774  
15:35:44 775  	BEGIN
15:35:44 776  	  SELECT
15:35:44 777  	    LICENSE.LICENSE_STATUS_ID,
15:35:44 778  	    LICENSE.NEEDS_ENTITLEMENTS,
15:35:44 779  	    LICENSE.START_DATE,
15:35:44 780  	    LICENSE.OFFER_ID,
15:35:44 781  	    LICENSE.SUBSCRIPTION_ID,
15:35:44 782  	    LICENSE.INVOICE_ID,
15:35:44 783  	    LICENSE.END_DATE,
15:35:44 784  	    LICENSE.IS_EXTENSION,
15:35:44 785  	    LICENSE.CURRENT_OFFER_INDEX,
15:35:44 786  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
15:35:44 787  	    LICENSE.UPDATED_BY,
15:35:44 788  	    LICENSE.UPDATE_DATE,
15:35:44 789  	    LICENSE.ENTITLEMENT_END_DATE
15:35:44 790  	    into
15:35:44 791  	    var_license_status_id,
15:35:44 792  	    var_needs_entitlements,
15:35:44 793  	    var_start_date,
15:35:44 794  	    var_offer_id,
15:35:44 795  	    var_subscription_id,
15:35:44 796  	    var_invoice_id,
15:35:44 797  	    var_end_date,
15:35:44 798  	    var_is_extension,
15:35:44 799  	    var_current_offer_index,
15:35:44 800  	    var_current_offer_recurr_num,
15:35:44 801  	    var_updated_by,
15:35:44 802  	    var_update_date,
15:35:44 803  	    var_entitlement_end_date
15:35:44 804  	  FROM
15:35:44 805  	    LICENSE
15:35:44 806  	  WHERE
15:35:44 807  	    LICENSE.ID = in_license_id;
15:35:44 808  	  EXCEPTION
15:35:44 809  	    WHEN NO_DATA_FOUND THEN
15:35:44 810  	      RAISE BAD_LICENSE_ID;
15:35:44 811  	END;
15:35:44 812  
15:35:44 813  	BEGIN
15:35:44 814  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_LICENSE_HISTORY(
15:35:44 815  	    in_license_id,
15:35:44 816  	    var_license_status_id,
15:35:44 817  	    var_needs_entitlements,
15:35:44 818  	    var_start_date,
15:35:44 819  	    var_offer_id,
15:35:44 820  	    var_subscription_id,
15:35:44 821  	    var_invoice_id,
15:35:44 822  	    var_end_date,
15:35:44 823  	    var_updated_by,
15:35:44 824  	    var_update_date,
15:35:44 825  	    var_is_extension,
15:35:44 826  	    var_current_offer_index,
15:35:44 827  	    var_current_offer_recurr_num,
15:35:44 828  	    in_system_activity_reason_id,
15:35:44 829  	    var_entitlement_end_date
15:35:44 830  	  );
15:35:44 831  	  EXCEPTION
15:35:44 832  	    WHEN OTHERS THEN
15:35:44 833  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 834  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 835  	END;
15:35:44 836  
15:35:44 837  EXCEPTION
15:35:44 838  WHEN BAD_LICENSE_ID THEN
15:35:44 839  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 840  	  SPROC_NAME, 'No such license');
15:35:44 841  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 842  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 843  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 844  WHEN OTHERS THEN
15:35:44 845  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 846  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 847  END CREATE_LICENSE_HISTORY;
15:35:44 848  
15:35:44 849  /********************************************************************/
15:35:44 850  
15:35:44 851  PROCEDURE CREATE_CHARGE_HISTORY (
15:35:44 852  /*
15:35:44 853  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 854  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 855  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:44 856  */
15:35:44 857  	in_charge_id		    IN NUMBER,
15:35:44 858  	in_system_activity_reason_id IN NUMBER
15:35:44 859  ) AS
15:35:44 860  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
15:35:44 861  -- VARIABLES
15:35:44 862  var_invoice_id	     NUMBER;
15:35:44 863  var_transaction_id     NUMBER;
15:35:44 864  var_instrument_type_id NUMBER;
15:35:44 865  var_instrument_id      NUMBER;
15:35:44 866  var_charge_amount      NUMBER;
15:35:44 867  var_charge_status_id   NUMBER;
15:35:44 868  var_updated_by	     VARCHAR2(255);
15:35:44 869  var_update_date	     DATE;
15:35:44 870  -- EXCEPTIONS
15:35:44 871  BAD_CHARGE_ID	     EXCEPTION;
15:35:44 872  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:35:44 873  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44 874  BEGIN
15:35:44 875  
15:35:44 876  	BEGIN
15:35:44 877  	  SELECT
15:35:44 878  	    CHARGE.INVOICE_ID,
15:35:44 879  	    CHARGE.TRANSACTION_ID,
15:35:44 880  	    CHARGE.INSTRUMENT_TYPE_ID,
15:35:44 881  	    CHARGE.INSTRUMENT_ID,
15:35:44 882  	    CHARGE.CHARGE_AMOUNT,
15:35:44 883  	    CHARGE.CHARGE_STATUS_ID,
15:35:44 884  	    CHARGE.UPDATED_BY,
15:35:44 885  	    CHARGE.UPDATE_DATE
15:35:44 886  	    into
15:35:44 887  	    var_invoice_id,
15:35:44 888  	    var_transaction_id,
15:35:44 889  	    var_instrument_type_id,
15:35:44 890  	    var_instrument_id,
15:35:44 891  	    var_charge_amount,
15:35:44 892  	    var_charge_status_id,
15:35:44 893  	    var_updated_by,
15:35:44 894  	    var_update_date
15:35:44 895  	  FROM
15:35:44 896  	    CHARGE
15:35:44 897  	  WHERE
15:35:44 898  	    CHARGE.ID = in_charge_id;
15:35:44 899  	  EXCEPTION
15:35:44 900  	    WHEN NO_DATA_FOUND THEN
15:35:44 901  	      RAISE BAD_CHARGE_ID;
15:35:44 902  	END;
15:35:44 903  
15:35:44 904  	BEGIN
15:35:44 905  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_CHARGE_HISTORY (
15:35:44 906  	    in_charge_id,
15:35:44 907  	    var_invoice_id,
15:35:44 908  	    var_transaction_id,
15:35:44 909  	    var_instrument_type_id,
15:35:44 910  	    var_instrument_id,
15:35:44 911  	    var_charge_amount,
15:35:44 912  	    var_updated_by,
15:35:44 913  	    var_update_date,
15:35:44 914  	    var_charge_status_id,
15:35:44 915  	    in_system_activity_reason_id
15:35:44 916  	  );
15:35:44 917  	  EXCEPTION
15:35:44 918  	    WHEN OTHERS THEN
15:35:44 919  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 920  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 921  	END;
15:35:44 922  
15:35:44 923  EXCEPTION
15:35:44 924  WHEN BAD_CHARGE_ID THEN
15:35:44 925  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 926  	  SPROC_NAME, 'No such license');
15:35:44 927  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 928  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 929  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 930  WHEN OTHERS THEN
15:35:44 931  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 933  END CREATE_CHARGE_HISTORY;
15:35:44 934  
15:35:44 935  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
15:35:44 936  /*
15:35:44 937  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 938  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 939  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:44 940  */
15:35:44 941  	in_invoice_adjustment_id  IN NUMBER,
15:35:44 942  	in_system_activity_reason_id IN NUMBER
15:35:44 943  ) AS
15:35:44 944  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
15:35:44 945  --VARIABLED
15:35:44 946  var_invoice_adj_id	  INVOICE_ADJUSTMENT.ID%TYPE;
15:35:44 947  var_invoice_id		  INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
15:35:44 948  var_is_credit		  INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
15:35:44 949  var_charge_id		  INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
15:35:44 950  var_adjustment_date	  INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
15:35:44 951  var_create_date		  INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
15:35:44 952  var_created_by		  INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
15:35:44 953  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
15:35:44 954  var_update_date		  INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
15:35:44 955  var_updated_by		  INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
15:35:44 956  BAD_INVOICE_ADJ_ID	  EXCEPTION;
15:35:44 957  CAN_NOT_CREATE_HISTORY	  EXCEPTION;
15:35:44 958  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44 959  BEGIN
15:35:44 960  
15:35:44 961  	BEGIN
15:35:44 962  	  SELECT
15:35:44 963  	    INVOICE_ADJUSTMENT.ID,
15:35:44 964  	    INVOICE_ADJUSTMENT.INVOICE_ID,
15:35:44 965  	    INVOICE_ADJUSTMENT.IS_CREDIT,
15:35:44 966  	    INVOICE_ADJUSTMENT.CHARGE_ID,
15:35:44 967  	    INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
15:35:44 968  	    INVOICE_ADJUSTMENT.CREATE_DATE,
15:35:44 969  	    INVOICE_ADJUSTMENT.CREATED_BY,
15:35:44 970  	    INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
15:35:44 971  	    INVOICE_ADJUSTMENT.UPDATE_DATE,
15:35:44 972  	    INVOICE_ADJUSTMENT.UPDATED_BY
15:35:44 973  	    into
15:35:44 974  	    var_invoice_adj_id,
15:35:44 975  	    var_invoice_id,
15:35:44 976  	    var_is_credit,
15:35:44 977  	    var_charge_id,
15:35:44 978  	    var_adjustment_date,
15:35:44 979  	    var_create_date,
15:35:44 980  	    var_created_by,
15:35:44 981  	    var_invoice_adj_reason_id,
15:35:44 982  	    var_update_date,
15:35:44 983  	    var_updated_by
15:35:44 984  	  FROM
15:35:44 985  	    INVOICE_ADJUSTMENT
15:35:44 986  	  WHERE
15:35:44 987  	    INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
15:35:44 988  	  EXCEPTION
15:35:44 989  	    WHEN NO_DATA_FOUND THEN
15:35:44 990  	      RAISE BAD_INVOICE_ADJ_ID;
15:35:44 991  	END;
15:35:44 992  
15:35:44 993  	BEGIN
15:35:44 994  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_INVOICE_ADJ_HISTORY (
15:35:44 995  	    var_invoice_adj_id,
15:35:44 996  	    var_invoice_id,
15:35:44 997  	    var_is_credit,
15:35:44 998  	    var_charge_id,
15:35:44 999  	    var_adjustment_date,
15:35:44 1000  	     var_create_date,
15:35:44 1001  	     var_created_by,
15:35:44 1002  	     var_invoice_adj_reason_id,
15:35:44 1003  	     var_update_date,
15:35:44 1004  	     var_updated_by
15:35:44 1005  	   );
15:35:44 1006  	   EXCEPTION
15:35:44 1007  	     WHEN OTHERS THEN
15:35:44 1008  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:44 1009  	       RAISE CAN_NOT_CREATE_HISTORY;
15:35:44 1010  	 END;
15:35:44 1011  
15:35:44 1012  EXCEPTION
15:35:44 1013  WHEN BAD_INVOICE_ADJ_ID THEN
15:35:44 1014  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1015  	   SPROC_NAME, 'No such invoice adjustment');
15:35:44 1016  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:44 1017  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 1018  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:44 1019  WHEN OTHERS THEN
15:35:44 1020  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1021  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1022  END CREATE_INVOICE_ADJ_HISTORY;
15:35:44 1023  
15:35:44 1024  END PROCS_HISTORY_V17;
15:35:44 1025  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
15:35:44   4  /*
15:35:44   5  Throws exceptions:
15:35:44   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44   7  */
15:35:44   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:44   9  	out_result_set	    OUT SYS_REFCURSOR
15:35:44  10  ) AS
15:35:44  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
15:35:44  12  BEGIN
15:35:44  13  OPEN out_result_set FOR
15:35:44  14  	      SELECT
15:35:44  15  	      i.id as ITUNES_RECEIPT_ID,
15:35:44  16  	      s.id as SUBSCRIPTION_ID,
15:35:44  17  	      s.SUBSCRIPTION_STATUS_ID,
15:35:44  18  	      i.STATUS,
15:35:44  19  	      a.GROUP_ID
15:35:44  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
15:35:44  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
15:35:44  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
15:35:44  23  	      AND a.ID(+) = s.ACCOUNT_ID;
15:35:44  24  END ITUNES_RECEIPT_SUBSCRIPTION;
15:35:44  25  
15:35:44  26  
15:35:44  27  PROCEDURE CREATE_RECEIPT(
15:35:44  28  /*
15:35:44  29  Throws exceptions:
15:35:44  30  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44  31  */
15:35:44  32  	  out_id      OUT NUMBER,
15:35:44  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:35:44  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
15:35:44  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
15:35:44  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
15:35:44  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:44  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:35:44  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:35:44  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:44  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:35:44  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:35:44  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:35:44  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
15:35:44  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
15:35:44  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:35:44  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
15:35:44  48  ) AS
15:35:44  49  -- VARIABLES
15:35:44  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
15:35:44  51  -- EXCEPTIONS
15:35:44  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:44  53  BEGIN
15:35:44  54  
15:35:44  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V17.CREATE_RECEIPT(
15:35:44  56  	  out_id	      =>  out_id,
15:35:44  57  	  in_subscription_id  =>  in_subscription_id,
15:35:44  58  	  in_receipt	      =>  in_receipt,
15:35:44  59  	  in_status	      =>  in_status,
15:35:44  60  	  in_quantity	      =>  in_quantity,
15:35:44  61  	  in_product_id       =>  in_product_id,
15:35:44  62  	  in_transaction_id   =>  in_transaction_id,
15:35:44  63  	  in_purchase_date    =>  in_purchase_date,
15:35:44  64  	  in_original_transaction_id  =>  in_original_transaction_id,
15:35:44  65  	  in_original_purchase_date => in_original_purchase_date,
15:35:44  66  	  in_app_item_id      =>  in_app_item_id,
15:35:44  67  	  in_version_external_id  =>  in_version_external_id,
15:35:44  68  	  in_bid	      =>  in_bid,
15:35:44  69  	  in_bvrs	      =>  in_bvrs,
15:35:44  70  	  in_expires_date     =>  in_expires_date,
15:35:44  71  	  in_created_by       =>  in_created_by
15:35:44  72  	);
15:35:44  73  
15:35:44  74  END CREATE_RECEIPT;
15:35:44  75  
15:35:44  76  PROCEDURE UPDATE_RECEIPT(
15:35:44  77  /*
15:35:44  78  Throws exceptions:
15:35:44  79  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44  80  */
15:35:44  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
15:35:44  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
15:35:44  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
15:35:44  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
15:35:44  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:35:44  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:35:44  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:35:44  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:35:44  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:35:44  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:35:44  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:35:44  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
15:35:44  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
15:35:44  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:35:44  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
15:35:44  96  	  in_is_expired       IN NUMBER
15:35:44  97  ) AS
15:35:44  98  CANCEL_DATE DATE;
15:35:44  99  BEGIN
15:35:44 100  	-- see if cancel date is already set
15:35:44 101  	BEGIN
15:35:44 102  	  SELECT
15:35:44 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
15:35:44 104  	  FROM
15:35:44 105  	    ITUNES_RECEIPT IR
15:35:44 106  	  WHERE
15:35:44 107  	    IR.ID = in_id;
15:35:44 108  	EXCEPTION
15:35:44 109  	  WHEN NO_DATA_FOUND THEN
15:35:44 110  	    CANCEL_DATE := NULL;
15:35:44 111  	END;
15:35:44 112  
15:35:44 113  	-- only update cancel date if it isn't already set and the receipt is expired
15:35:44 114  	IF in_is_expired = 1 THEN
15:35:44 115  	  IF CANCEL_DATE IS NULL THEN
15:35:44 116  	    CANCEL_DATE := SYSDATE;
15:35:44 117  	  END IF;
15:35:44 118  	ELSE
15:35:44 119  	  CANCEL_DATE := NULL;
15:35:44 120  	END IF;
15:35:44 121  
15:35:44 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V17.UPDATE_RECEIPT(
15:35:44 123  	  in_id => in_id,
15:35:44 124  	  in_receipt => in_receipt,
15:35:44 125  	  in_status => in_status,
15:35:44 126  	  in_quantity => in_quantity,
15:35:44 127  	  in_product_id => in_product_id,
15:35:44 128  	  in_transaction_id => in_transaction_id,
15:35:44 129  	  in_purchase_date => in_purchase_date,
15:35:44 130  	  in_original_transaction_id => in_original_transaction_id,
15:35:44 131  	  in_original_purchase_date => in_original_purchase_date,
15:35:44 132  	  in_app_item_id => in_app_item_id,
15:35:44 133  	  in_version_external_id => in_version_external_id,
15:35:44 134  	  in_bid => in_bid,
15:35:44 135  	  in_bvrs => in_bvrs,
15:35:44 136  	  in_expires_date => in_expires_date,
15:35:44 137  	  in_updated_by => in_updated_by,
15:35:44 138  	  in_cancel_date => CANCEL_DATE
15:35:44 139  	);
15:35:44 140  END UPDATE_RECEIPT;
15:35:44 141  
15:35:44 142  PROCEDURE LINK_ITUNES_RECEIPT(
15:35:44 143  /*
15:35:44 144  Throws exceptions:
15:35:44 145  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 146  */
15:35:44 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
15:35:44 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:35:44 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
15:35:44 150  ) AS
15:35:44 151  BEGIN
15:35:44 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V17.LINK_ITUNES_RECEIPT(
15:35:44 153  		      in_id => in_id,
15:35:44 154  		      in_subscription_id => in_subscription_id,
15:35:44 155  		      in_updated_by => in_updated_by
15:35:44 156  		      );
15:35:44 157  END LINK_ITUNES_RECEIPT;
15:35:44 158  
15:35:44 159  PROCEDURE MARK_RECEIPT_CHECKED(
15:35:44 160  /*
15:35:44 161  Throws exceptions:
15:35:44 162  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 163  */
15:35:44 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
15:35:44 165  ) AS
15:35:44 166  BEGIN
15:35:44 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V17.MARK_RECEIPT_CHECKED(
15:35:44 168  	  in_id => in_id
15:35:44 169  	);
15:35:44 170  END MARK_RECEIPT_CHECKED;
15:35:44 171  
15:35:44 172  PROCEDURE GET_ITUNES_RECEIPTS (
15:35:44 173  /*
15:35:44 174  Throws exceptions:
15:35:44 175  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 176  */
15:35:44 177  	out_result_set	    OUT SYS_REFCURSOR,
15:35:44 178  	in_row_number	    IN NUMBER DEFAULT 500
15:35:44 179  ) AS
15:35:44 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
15:35:44 181  BEGIN
15:35:44 182  OPEN out_result_set FOR
15:35:44 183  SELECT * FROM
15:35:44 184  (
15:35:44 185  	SELECT * FROM
15:35:44 186  	(
15:35:44 187  	  SELECT
15:35:44 188  	    IR.ID,
15:35:44 189  	    IR.SUBSCRIPTION_ID,
15:35:44 190  	    IR.RECEIPT,
15:35:44 191  	    IR.STATUS,
15:35:44 192  	    IR.QUANTITY,
15:35:44 193  	    IR.PRODUCT_ID,
15:35:44 194  	    IR.TRANSACTION_ID,
15:35:44 195  	    IR.PURCHASE_DATE,
15:35:44 196  	    IR.ORIGINAL_TRANSACTION_ID,
15:35:44 197  	    IR.ORIGINAL_PURCHASE_DATE,
15:35:44 198  	    IR.APP_ITEM_ID,
15:35:44 199  	    IR.VERSION_EXTERNAL_ID,
15:35:44 200  	    IR.BID,
15:35:44 201  	    IR.BVRS,
15:35:44 202  	    IR.EXPIRES_DATE,
15:35:44 203  	    IR.CREATE_DATe,
15:35:44 204  	    IR.CREATED_BY,
15:35:44 205  	    IR.UPDATE_DATE,
15:35:44 206  	    IR.UPDATED_BY,
15:35:44 207  	    IR.LAST_CHECK_DATE,
15:35:44 208  	    OC.VENDOR_SOURCE_ID
15:35:44 209  	  FROM
15:35:44 210  	    CORE_OWNER.ITUNES_RECEIPT IR
15:35:44 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
15:35:44 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
15:35:44 213  	  WHERE
15:35:44 214  	    NOT EXISTS
15:35:44 215  	    (
15:35:44 216  	      SELECT NULL
15:35:44 217  	      FROM PROCESS_RETRY_THROTTLE
15:35:44 218  	      WHERE PROCESS_NAME = SPROC_NAME
15:35:44 219  		AND GENERIC_ID = IR.ID
15:35:44 220  	    ) AND
15:35:44 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
15:35:44 222  	    ROWNUM <= in_row_number*10
15:35:44 223  	)
15:35:44 224  	ORDER BY dbms_random.value
15:35:44 225  )
15:35:44 226  WHERE
15:35:44 227  	ROWNUM <= in_row_number;
15:35:44 228  
15:35:44 229  END GET_ITUNES_RECEIPTS;
15:35:44 230  
15:35:44 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
15:35:44 232  /*
15:35:44 233  Throws exceptions:
15:35:44 234  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 235  */
15:35:44 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
15:35:44 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
15:35:44 238  ) AS
15:35:44 239  BEGIN
15:35:44 240  
15:35:44 241  SELECT
15:35:44 242  	  oc.vendor_source_id
15:35:44 243  INTO
15:35:44 244  	  out_vendor_source_id
15:35:44 245  FROM
15:35:44 246  	  offer_chain_meta_data ocmd
15:35:44 247  JOIN
15:35:44 248  	  offer_chain oc
15:35:44 249  ON
15:35:44 250  	  ocmd.offer_chain_id = oc.id
15:35:44 251  WHERE
15:35:44 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
15:35:44 253  AND ocmd.value = in_itunes_pid
15:35:44 254  AND rownum <= 1;
15:35:44 255  
15:35:44 256  END GET_VENDOR_FROM_ITUNES_PID;
15:35:44 257  
15:35:44 258  END PROCS_ITUNES_RECEIPT_V17;
15:35:44 259  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE ADD_LINE_ITEMS(
15:35:44   4  /*
15:35:44   5  Throws exceptions:
15:35:44   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44   8  */
15:35:44   9  	in_invoice_id IN NUMBER,
15:35:44  10  	in_offer_id   IN NUMBER,
15:35:44  11  	in_created_by IN VARCHAR2
15:35:44  12  ) AS
15:35:44  13  -- VARIABLES
15:35:44  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
15:35:44  15  temp_invoice_id NUMBER;
15:35:44  16  temp_offer_id   NUMBER;
15:35:44  17  
15:35:44  18  var_line_item_data SYS_REFCURSOR;
15:35:44  19  var_new_line_item_id NUMBER;
15:35:44  20  var_product_unit_price NUMBER (10,6);
15:35:44  21  var_product_offering_price NUMBER(10,6);
15:35:44  22  var_product_offering_oprice NUMBER(10,6);
15:35:44  23  var_product_quantity NUMBER;
15:35:44  24  var_product_offering_id NUMBER;
15:35:44  25  
15:35:44  26  var_line_item_price	  NUMBER(10,2);
15:35:44  27  var_discount_fixed_amount   NUMBER(10,6);
15:35:44  28  var_discount_percent_amount NUMBER(10,2);
15:35:44  29  
15:35:44  30  
15:35:44  31  -- EXCEPTIONS
15:35:44  32  BAD_INVOICE_ID EXCEPTION;
15:35:44  33  BAD_OFFER_ID EXCEPTION;
15:35:44  34  BAD_DISCOUNT EXCEPTION;
15:35:44  35  BEGIN
15:35:44  36  
15:35:44  37  	-- Check that given invoice exists
15:35:44  38  	BEGIN
15:35:44  39  	  SELECT
15:35:44  40  	    INVOICE.ID into temp_invoice_id
15:35:44  41  	  FROM
15:35:44  42  	    INVOICE
15:35:44  43  	  WHERE
15:35:44  44  	    INVOICE.ID = in_invoice_id;
15:35:44  45  
15:35:44  46  	  EXCEPTION
15:35:44  47  	    WHEN NO_DATA_FOUND THEN
15:35:44  48  	      RAISE BAD_INVOICE_ID;
15:35:44  49  	END;
15:35:44  50  
15:35:44  51  	-- Check that given offer exists
15:35:44  52  	BEGIN
15:35:44  53  	  SELECT
15:35:44  54  	    OFFER.ID into temp_offer_id
15:35:44  55  	  FROM
15:35:44  56  	    OFFER
15:35:44  57  	  WHERE
15:35:44  58  	    OFFER.ID = in_offer_id;
15:35:44  59  
15:35:44  60  	  EXCEPTION
15:35:44  61  	    WHEN NO_DATA_FOUND THEN
15:35:44  62  	      RAISE BAD_OFFER_ID;
15:35:44  63  	END;
15:35:44  64  
15:35:44  65  	-- Get product_offering data
15:35:44  66  	OPEN var_line_item_data FOR
15:35:44  67  	SELECT
15:35:44  68  	  PRODUCT_OFFERING.ID,
15:35:44  69  	  PRODUCT_OFFERING.UNIT_PRICE,
15:35:44  70  	  PRODUCT_OFFERING.QUANTITY
15:35:44  71  	FROM
15:35:44  72  	  OFFER_PRODUCT_OFFERING
15:35:44  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:35:44  74  	WHERE
15:35:44  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
15:35:44  76  
15:35:44  77  	-- insert line items
15:35:44  78  	-- add discounts to line items
15:35:44  79  	LOOP
15:35:44  80  	  FETCH var_line_item_data INTO
15:35:44  81  	    var_product_offering_id,
15:35:44  82  	    var_product_unit_price,
15:35:44  83  	    var_product_quantity;
15:35:44  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
15:35:44  85  
15:35:44  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
15:35:44  87  	  var_product_offering_price := var_product_offering_oprice;
15:35:44  88  
15:35:44  89  	  -- Apply discounts to line_item
15:35:44  90  	  BEGIN
15:35:44  91  	    SELECT
15:35:44  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
15:35:44  93  	    FROM
15:35:44  94  	      DISCOUNT_PRODUCT_OFFERING
15:35:44  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:35:44  96  	    WHERE
15:35:44  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:35:44  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
15:35:44  99  	    EXCEPTION
15:35:44 100  	    WHEN NO_DATA_FOUND THEN
15:35:44 101  	      var_discount_fixed_amount := NULL;
15:35:44 102  	  END;
15:35:44 103  
15:35:44 104  	  BEGIN
15:35:44 105  	    SELECT
15:35:44 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
15:35:44 107  	    FROM
15:35:44 108  	      DISCOUNT_PRODUCT_OFFERING
15:35:44 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:35:44 110  	    WHERE
15:35:44 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:35:44 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
15:35:44 113  	    EXCEPTION
15:35:44 114  	    WHEN NO_DATA_FOUND THEN
15:35:44 115  	      var_discount_percent_amount := NULL;
15:35:44 116  	  END;
15:35:44 117  
15:35:44 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
15:35:44 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
15:35:44 120  	  END IF;
15:35:44 121  
15:35:44 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
15:35:44 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
15:35:44 124  	  END IF;
15:35:44 125  
15:35:44 126  	  var_line_item_price := PROCS_COMMON_V17.ROUND_10_6_TO_10_2(var_product_offering_price);
15:35:44 127  
15:35:44 128  	  IF (var_line_item_price < 0) THEN
15:35:44 129  	      RAISE BAD_DISCOUNT;
15:35:44 130  	  END IF;
15:35:44 131  
15:35:44 132  	  var_new_line_item_id := NULL;
15:35:44 133  	  PROCS_LINE_ITEMS_CRU_V17.CREATE_LINE_ITEM(
15:35:44 134  	    inout_line_item_id	=> var_new_line_item_id,
15:35:44 135  	    in_product_offer_id => var_product_offering_id,
15:35:44 136  	    in_invoice_id	=> in_invoice_id,
15:35:44 137  	    in_amount		=> var_line_item_price,
15:35:44 138  	    in_created_by	=> in_created_by,
15:35:44 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
15:35:44 140  	    in_taxes_amount	=> NULL
15:35:44 141  	  );
15:35:44 142  
15:35:44 143  	  FOR f_discount IN (
15:35:44 144  	    SELECT
15:35:44 145  	      DISCOUNT.ID
15:35:44 146  	    FROM
15:35:44 147  	      DISCOUNT_PRODUCT_OFFERING
15:35:44 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:35:44 149  	    WHERE
15:35:44 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:35:44 151  	  )
15:35:44 152  	  LOOP
15:35:44 153  	    PROCS_LINE_ITEMS_CRU_V17.CREATE_DISCOUNT_LINE_ITEM(
15:35:44 154  	      in_discount_id =>  f_discount.ID,
15:35:44 155  	      in_line_item_id => var_new_line_item_id
15:35:44 156  	    );
15:35:44 157  	  END LOOP;
15:35:44 158  	END LOOP;
15:35:44 159  
15:35:44 160  EXCEPTION
15:35:44 161  WHEN BAD_INVOICE_ID THEN
15:35:44 162  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 163  	  SPROC_NAME, 'No such license');
15:35:44 164  WHEN BAD_OFFER_ID THEN
15:35:44 165  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 166  	  SPROC_NAME, 'No such offer');
15:35:44 167  WHEN BAD_DISCOUNT THEN
15:35:44 168  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 169  	  SPROC_NAME, 'Bad Discount');
15:35:44 170  WHEN OTHERS THEN
15:35:44 171  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 173  END ADD_LINE_ITEMS;
15:35:44 174  
15:35:44 175  /******************************************************************************/
15:35:44 176  
15:35:44 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
15:35:44 178  	in_line_item_id    IN NUMBER,
15:35:44 179  	in_amount	   IN NUMBER,
15:35:44 180  	in_discount_amount IN NUMBER,
15:35:44 181  	in_taxes_amount    IN NUMBER
15:35:44 182  ) AS
15:35:44 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
15:35:44 184  -- VARIABLES
15:35:44 185  temp_line_item_id NUMBER;
15:35:44 186  -- EXCEPTIONS
15:35:44 187  BAD_LINE_ITEM_ID EXCEPTION;
15:35:44 188  BEGIN
15:35:44 189  
15:35:44 190  	-- Check that line item exists
15:35:44 191  	BEGIN
15:35:44 192  	  SELECT
15:35:44 193  	    LINE_ITEM.ID into temp_line_item_id
15:35:44 194  	  FROM
15:35:44 195  	    LINE_ITEM
15:35:44 196  	  WHERE
15:35:44 197  	    LINE_ITEM.ID = in_line_item_id;
15:35:44 198  	  EXCEPTION
15:35:44 199  	    WHEN NO_DATA_FOUND THEN
15:35:44 200  	      RAISE BAD_LINE_ITEM_ID;
15:35:44 201  	END;
15:35:44 202  
15:35:44 203  	-- Update line item
15:35:44 204  	PROCS_LINE_ITEMS_CRU_V17.UPDATE_LINE_ITEM(
15:35:44 205  	  in_line_item_id    => in_line_item_id,
15:35:44 206  	  in_amount	     => in_amount,
15:35:44 207  	  in_discount_amount => in_discount_amount,
15:35:44 208  	  in_taxes_amount    => in_taxes_amount
15:35:44 209  	);
15:35:44 210  
15:35:44 211  EXCEPTION
15:35:44 212  WHEN BAD_LINE_ITEM_ID THEN
15:35:44 213  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 214  	  SPROC_NAME, 'No such line item');
15:35:44 215  WHEN OTHERS THEN
15:35:44 216  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 218  END UPDATE_LINE_ITEM_AMOUNT;
15:35:44 219  
15:35:44 220  /******************************************************************************/
15:35:44 221  
15:35:44 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:35:44 223  /*
15:35:44 224  Throws exceptions:
15:35:44 225  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 226  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 227  */
15:35:44 228  	in_invoice_id  IN NUMBER,
15:35:44 229  	out_result_set OUT SYS_REFCURSOR
15:35:44 230  ) AS
15:35:44 231  -- VARIABLES
15:35:44 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
15:35:44 233  temp_invoice_id NUMBER;
15:35:44 234  
15:35:44 235  -- EXCEPTIONS
15:35:44 236  BAD_INVOICE_ID EXCEPTION;
15:35:44 237  BEGIN
15:35:44 238  
15:35:44 239  	-- Check that given invoice exists
15:35:44 240  	BEGIN
15:35:44 241  	  SELECT
15:35:44 242  	    INVOICE.ID into temp_invoice_id
15:35:44 243  	  FROM
15:35:44 244  	    INVOICE
15:35:44 245  	  WHERE
15:35:44 246  	    INVOICE.ID = in_invoice_id;
15:35:44 247  	  EXCEPTION
15:35:44 248  	    WHEN NO_DATA_FOUND THEN
15:35:44 249  	      RAISE BAD_INVOICE_ID;
15:35:44 250  	END;
15:35:44 251  
15:35:44 252  	-- Select line items
15:35:44 253  	OPEN out_result_set FOR
15:35:44 254  	SELECT
15:35:44 255  	  LINE_ITEM.ID,
15:35:44 256  	  LINE_ITEM.AMOUNT,
15:35:44 257  	  LINE_ITEM.CREATE_DATE,
15:35:44 258  	  LINE_ITEM.CREATED_BY,
15:35:44 259  	  LINE_ITEM.INVOICE_ID,
15:35:44 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
15:35:44 261  	  LINE_ITEM.TAXES_AMOUNT,
15:35:44 262  	  LINE_ITEM.PRODUCT_OFFER_ID
15:35:44 263  	FROM
15:35:44 264  	  LINE_ITEM
15:35:44 265  	WHERE
15:35:44 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
15:35:44 267  
15:35:44 268  EXCEPTION
15:35:44 269  WHEN BAD_INVOICE_ID THEN
15:35:44 270  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 271  	  SPROC_NAME, 'No such invoice');
15:35:44 272  WHEN OTHERS THEN
15:35:44 273  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 275  END GET_INVOICE_LINE_ITEMS;
15:35:44 276  
15:35:44 277  /******************************************************************************/
15:35:44 278  
15:35:44 279  PROCEDURE GET_LINE_ITEM_TAXES (
15:35:44 280  /*
15:35:44 281  Throws exceptions:
15:35:44 282  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 283  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 284  */
15:35:44 285  	in_line_item_id IN  NUMBER,
15:35:44 286  	out_result_set	OUT SYS_REFCURSOR
15:35:44 287  ) AS
15:35:44 288  -- VARIABLES
15:35:44 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
15:35:44 290  temp_line_item_id NUMBER;
15:35:44 291  -- EXCEPTIONS
15:35:44 292  BAD_LINE_ITEM_ID EXCEPTION;
15:35:44 293  BEGIN
15:35:44 294  
15:35:44 295  	-- Check that line item exists
15:35:44 296  	BEGIN
15:35:44 297  	  SELECT
15:35:44 298  	    LINE_ITEM.ID into temp_line_item_id
15:35:44 299  	  FROM
15:35:44 300  	    LINE_ITEM
15:35:44 301  	  WHERE
15:35:44 302  	    LINE_ITEM.ID = in_line_item_id;
15:35:44 303  	  EXCEPTION
15:35:44 304  	    WHEN NO_DATA_FOUND THEN
15:35:44 305  	      RAISE BAD_LINE_ITEM_ID;
15:35:44 306  	END;
15:35:44 307  
15:35:44 308  	-- Get all taxes for given line item
15:35:44 309  	OPEN out_result_set FOR
15:35:44 310  	SELECT
15:35:44 311  	  TAX.ID,
15:35:44 312  	  TAX.CALCULATED_AMOUNT,
15:35:44 313  	  TAX.CREATE_DATE,
15:35:44 314  	  TAX.CREATED_BY,
15:35:44 315  	  TAX.EFFECTIVE_RATE,
15:35:44 316  	  TAX.EXT_RESULT,
15:35:44 317  	  TAX.EXT_TAX_TYPE,
15:35:44 318  	  TAX.IMPOSITION,
15:35:44 319  	  TAX.IMPOSITION_TYPE,
15:35:44 320  	  TAX.JURISDICTION_ID,
15:35:44 321  	  TAX.JURISDICTION_LEVEL_ID,
15:35:44 322  	  TAX.JURISDICTION_NAME,
15:35:44 323  	  TAX.LINE_ITEM_ID,
15:35:44 324  	  TAX.TAX_RULE_ID,
15:35:44 325  	  TAX.TAX_TYPE_ID,
15:35:44 326  	  TAX.TAXABLE_AMOUNT
15:35:44 327  	FROM
15:35:44 328  	  TAX
15:35:44 329  	WHERE
15:35:44 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
15:35:44 331  
15:35:44 332  EXCEPTION
15:35:44 333  WHEN BAD_LINE_ITEM_ID THEN
15:35:44 334  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 335  	  SPROC_NAME, 'No such line item');
15:35:44 336  WHEN OTHERS THEN
15:35:44 337  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 339  END GET_LINE_ITEM_TAXES;
15:35:44 340  
15:35:44 341  -- norlov: #38770
15:35:44 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
15:35:44 343  /*
15:35:44 344  Throws exceptions:
15:35:44 345  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 346  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 347  */
15:35:44 348  	in_line_item_id IN  NUMBER,
15:35:44 349  	out_result_set	OUT SYS_REFCURSOR
15:35:44 350  ) AS
15:35:44 351  -- VARIABLES
15:35:44 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
15:35:44 353  temp_line_item_id NUMBER;
15:35:44 354  -- EXCEPTIONS
15:35:44 355  BAD_LINE_ITEM_ID EXCEPTION;
15:35:44 356  BEGIN
15:35:44 357  
15:35:44 358  	-- Check that line item exists
15:35:44 359  	BEGIN
15:35:44 360  	  SELECT
15:35:44 361  	    LINE_ITEM.ID into temp_line_item_id
15:35:44 362  	  FROM
15:35:44 363  	    LINE_ITEM
15:35:44 364  	  WHERE
15:35:44 365  	    LINE_ITEM.ID = in_line_item_id;
15:35:44 366  	  EXCEPTION
15:35:44 367  	    WHEN NO_DATA_FOUND THEN
15:35:44 368  	      RAISE BAD_LINE_ITEM_ID;
15:35:44 369  	END;
15:35:44 370  
15:35:44 371  	-- Get all discounts for given line item
15:35:44 372  	OPEN out_result_set FOR
15:35:44 373  	SELECT
15:35:44 374  	  DISCOUNT.FIXED_AMOUNT,
15:35:44 375  	  DISCOUNT.NAME,
15:35:44 376  	  DISCOUNT.ID,
15:35:44 377  	  DISCOUNT.PERCENT_AMOUNT
15:35:44 378  	FROM
15:35:44 379  	  DISCOUNT_LINE_ITEM
15:35:44 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
15:35:44 381  	WHERE
15:35:44 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
15:35:44 383  
15:35:44 384  EXCEPTION
15:35:44 385  WHEN BAD_LINE_ITEM_ID THEN
15:35:44 386  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 387  	  SPROC_NAME, 'No such line item');
15:35:44 388  WHEN OTHERS THEN
15:35:44 389  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 391  END GET_LINE_ITEM_DISCOUNTS;
15:35:44 392  /******************************************************************************/
15:35:44 393  
15:35:44 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
15:35:44 395  /*
15:35:44 396  Throws exceptions:
15:35:44 397  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 398  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 399  */
15:35:44 400  	in_line_item_id     IN	NUMBER,
15:35:44 401  	out_amount	    OUT NUMBER
15:35:44 402  ) AS
15:35:44 403  -- VARIABLES
15:35:44 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
15:35:44 405  -- EXCEPTIONS
15:35:44 406  BAD_LINE_ITEM_ID EXCEPTION;
15:35:44 407  BEGIN
15:35:44 408  
15:35:44 409  	BEGIN
15:35:44 410  	  SELECT
15:35:44 411  	    LINE_ITEM.AMOUNT into out_amount
15:35:44 412  	  FROM
15:35:44 413  	    LINE_ITEM
15:35:44 414  	  WHERE
15:35:44 415  	    LINE_ITEM.ID = in_line_item_id;
15:35:44 416  	  EXCEPTION
15:35:44 417  	    WHEN NO_DATA_FOUND THEN
15:35:44 418  	      RAISE BAD_LINE_ITEM_ID;
15:35:44 419  	END;
15:35:44 420  
15:35:44 421  EXCEPTION
15:35:44 422  WHEN BAD_LINE_ITEM_ID THEN
15:35:44 423  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 424  	  SPROC_NAME, 'No such line item');
15:35:44 425  WHEN OTHERS THEN
15:35:44 426  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 428  END CALCULATE_LINE_ITEM_AMOUNT;
15:35:44 429  
15:35:44 430  /******************************************************************************/
15:35:44 431  
15:35:44 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
15:35:44 433  /*
15:35:44 434  Throws exceptions:
15:35:44 435  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 436  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 437  */
15:35:44 438  	in_line_item_id     IN	NUMBER
15:35:44 439  ) RETURN NUMBER AS
15:35:44 440  var_invoice_amount NUMBER(10, 2);
15:35:44 441  BEGIN
15:35:44 442  	PROCS_LINE_ITEMS_V17.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
15:35:44 443  	RETURN var_invoice_amount;
15:35:44 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
15:35:44 445  
15:35:44 446  END PROCS_LINE_ITEMS_V17;
15:35:44 447  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V17" AS
15:35:44   2  
15:35:44   3  /*
15:35:44   4  PROCEDURE INITIALIZE_SYSTEM AS
15:35:44   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
15:35:44   6  -- VARIABLES
15:35:44   7  var_account_ids SYS_REFCURSOR;
15:35:44   8  var_account_id  NUMBER;
15:35:44   9  BEGIN
15:35:44  10  
15:35:44  11  	OPEN var_account_ids FOR
15:35:44  12  	SELECT
15:35:44  13  	  ACCOUNT.ID
15:35:44  14  	FROM
15:35:44  15  	  ACCOUNT;
15:35:44  16  
15:35:44  17  	LOOP
15:35:44  18  	  FETCH var_account_ids into var_account_id;
15:35:44  19  	  EXIT WHEN var_account_ids%NOTFOUND;
15:35:44  20  	  BEGIN
15:35:44  21  	    INITIALIZE_ACCOUNT(var_account_id);
15:35:44  22  	    EXCEPTION
15:35:44  23  	      WHEN OTHERS THEN
15:35:44  24  		NULL;
15:35:44  25  	  END;
15:35:44  26  	END LOOP;
15:35:44  27  
15:35:44  28  END INITIALIZE_SYSTEM;
15:35:44  29  
15:35:44  30  PROCEDURE INITIALIZE_ACCOUNT (
15:35:44  31  	in_account_id IN NUMBER
15:35:44  32  ) AS
15:35:44  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
15:35:44  34  -- EXCEPTIONS
15:35:44  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
15:35:44  36  BEGIN
15:35:44  37  
15:35:44  38  	BEGIN
15:35:44  39  	  INSERT INTO ACCOUNT_LOCK(
15:35:44  40  	    ACCOUNT_ID,
15:35:44  41  	    LOCK_KEY,
15:35:44  42  	    END_DATE,
15:35:44  43  	    CREATED_BY,
15:35:44  44  	    REASON
15:35:44  45  	  ) VALUES (
15:35:44  46  	    in_account_id,
15:35:44  47  	    'initialization key',
15:35:44  48  	    SYSDATE,
15:35:44  49  	    'system',
15:35:44  50  	    'initialization'
15:35:44  51  	  );
15:35:44  52  	  EXCEPTION
15:35:44  53  	    WHEN DUP_VAL_ON_INDEX THEN
15:35:44  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
15:35:44  55  	END;
15:35:44  56  
15:35:44  57  EXCEPTION
15:35:44  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
15:35:44  59  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:44  60  	  SPROC_NAME, 'Account already initialized');
15:35:44  61  WHEN OTHERS THEN
15:35:44  62  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44  64  END;
15:35:44  65  
15:35:44  66  PROCEDURE INITIALIZE_GROUP (
15:35:44  67  	in_group_id IN NUMBER
15:35:44  68  ) AS
15:35:44  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
15:35:44  70  -- VARIABLES
15:35:44  71  var_account_id NUMBER;
15:35:44  72  -- EXCEPTIONS
15:35:44  73  BAD_GROUP_ID		EXCEPTION;
15:35:44  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
15:35:44  75  BEGIN
15:35:44  76  
15:35:44  77  	BEGIN
15:35:44  78  	  SELECT
15:35:44  79  	    ACCOUNT.ID into var_account_id
15:35:44  80  	  FROM
15:35:44  81  	    ACCOUNT
15:35:44  82  	  WHERE
15:35:44  83  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:44  84  	  EXCEPTION
15:35:44  85  	    WHEN NO_DATA_FOUND THEN
15:35:44  86  	     RAISE BAD_GROUP_ID;
15:35:44  87  	END;
15:35:44  88  
15:35:44  89  	BEGIN
15:35:44  90  	  INSERT INTO ACCOUNT_LOCK (
15:35:44  91  	    ACCOUNT_ID,
15:35:44  92  	    LOCK_KEY,
15:35:44  93  	    END_DATE,
15:35:44  94  	    CREATED_BY,
15:35:44  95  	    REASON
15:35:44  96  	  ) VALUES (
15:35:44  97  	    var_account_id,
15:35:44  98  	    'initialization key',
15:35:44  99  	    SYSDATE,
15:35:44 100  	    'system',
15:35:44 101  	    'initialization'
15:35:44 102  	  );
15:35:44 103  	  EXCEPTION
15:35:44 104  	    WHEN DUP_VAL_ON_INDEX THEN
15:35:44 105  	      RAISE GROUP_ALREADY_INITIALIZED;
15:35:44 106  	END;
15:35:44 107  
15:35:44 108  EXCEPTION
15:35:44 109  WHEN BAD_GROUP_ID THEN
15:35:44 110  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 111  	  SPROC_NAME, 'No such account with given group id');
15:35:44 112  WHEN GROUP_ALREADY_INITIALIZED THEN
15:35:44 113  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:44 114  	  SPROC_NAME, 'Group already initialized');
15:35:44 115  WHEN OTHERS THEN
15:35:44 116  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 118  END INITIALIZE_GROUP;
15:35:44 119  */
15:35:44 120  
15:35:44 121  PROCEDURE LOCK_ACCOUNT (
15:35:44 122  	in_group_id    IN NUMBER,
15:35:44 123  	in_lock_key    IN VARCHAR2,
15:35:44 124  	in_seconds_num IN NUMBER,
15:35:44 125  	in_created_by  IN VARCHAR2,
15:35:44 126  	in_reason      IN VARCHAR2
15:35:44 127  ) AS
15:35:44 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
15:35:44 129  -- CONSTANTS
15:35:44 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
15:35:44 131  -- VARIABLES
15:35:44 132  var_account_id NUMBER;
15:35:44 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:44 134  var_date		DATE := SYSDATE;
15:35:44 135  var_lock_end_date DATE;
15:35:44 136  -- EXCEPTIONS
15:35:44 137  BAD_GROUP_ID   EXCEPTION;
15:35:44 138  ALREADY_LOCKED EXCEPTION;
15:35:44 139  BEGIN
15:35:44 140  
15:35:44 141  	BEGIN
15:35:44 142  	  SELECT
15:35:44 143  	    ACCOUNT.ID into var_account_id
15:35:44 144  	  FROM
15:35:44 145  	    ACCOUNT
15:35:44 146  	  WHERE
15:35:44 147  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:44 148  	  EXCEPTION
15:35:44 149  	    WHEN NO_DATA_FOUND THEN
15:35:44 150  	      RAISE BAD_GROUP_ID;
15:35:44 151  	END;
15:35:44 152  
15:35:44 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
15:35:44 154  
15:35:44 155  	BEGIN
15:35:44 156  
15:35:44 157  	  INSERT INTO ACCOUNT_LOCK (
15:35:44 158  	    ACCOUNT_ID,
15:35:44 159  	    LOCK_KEY,
15:35:44 160  	    END_DATE,
15:35:44 161  	    CREATED_BY,
15:35:44 162  	    REASON
15:35:44 163  	  ) VALUES (
15:35:44 164  	    var_account_id,
15:35:44 165  	    in_lock_key,
15:35:44 166  	    var_lock_end_date,
15:35:44 167  	    in_created_by,
15:35:44 168  	    in_reason
15:35:44 169  	  );
15:35:44 170  
15:35:44 171  	  EXCEPTION
15:35:44 172  	    WHEN DUP_VAL_ON_INDEX THEN
15:35:44 173  	      -- This rows was created before... I will try to update it
15:35:44 174  	      BEGIN
15:35:44 175  
15:35:44 176  		UPDATE
15:35:44 177  		  ACCOUNT_LOCK
15:35:44 178  		SET
15:35:44 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
15:35:44 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
15:35:44 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
15:35:44 182  		  ACCOUNT_LOCK.REASON = in_reason
15:35:44 183  		WHERE
15:35:44 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
15:35:44 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
15:35:44 186  
15:35:44 187  		IF SQL%ROWCOUNT = 0 THEN
15:35:44 188  		  RAISE ALREADY_LOCKED;
15:35:44 189  		END IF;
15:35:44 190  
15:35:44 191  	      END;
15:35:44 192  	END;
15:35:44 193  
15:35:44 194  EXCEPTION
15:35:44 195  WHEN BAD_GROUP_ID THEN
15:35:44 196  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 197  	  SPROC_NAME, 'No such group id');
15:35:44 198  WHEN ALREADY_LOCKED THEN
15:35:44 199  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:44 200  	  SPROC_NAME, 'Account already locked');
15:35:44 201  WHEN OTHERS THEN
15:35:44 202  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 204  END LOCK_ACCOUNT;
15:35:44 205  
15:35:44 206  /******************************************************************************/
15:35:44 207  
15:35:44 208  PROCEDURE RELEASE_LOCK (
15:35:44 209  	in_group_id IN NUMBER,
15:35:44 210  	in_lock_key IN VARCHAR2
15:35:44 211  ) AS
15:35:44 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
15:35:44 213  -- VARIABLES
15:35:44 214  var_account_id NUMBER;
15:35:44 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:35:44 216  var_date DATE := SYSDATE;
15:35:44 217  -- EXCEPTIONS
15:35:44 218  BAD_GROUP_ID		EXCEPTION;
15:35:44 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
15:35:44 220  BEGIN
15:35:44 221  
15:35:44 222  	BEGIN
15:35:44 223  	  SELECT
15:35:44 224  	    ACCOUNT.ID into var_account_id
15:35:44 225  	  FROM
15:35:44 226  	    ACCOUNT
15:35:44 227  	  WHERE
15:35:44 228  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:44 229  	  EXCEPTION
15:35:44 230  	    WHEN NO_DATA_FOUND THEN
15:35:44 231  	      RAISE BAD_GROUP_ID;
15:35:44 232  	END;
15:35:44 233  
15:35:44 234  	UPDATE
15:35:44 235  	  ACCOUNT_LOCK
15:35:44 236  	SET
15:35:44 237  	  ACCOUNT_LOCK.END_DATE = var_date
15:35:44 238  	WHERE
15:35:44 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
15:35:44 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
15:35:44 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
15:35:44 242  
15:35:44 243  	IF SQL%ROWCOUNT = 0 THEN
15:35:44 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
15:35:44 245  	END IF;
15:35:44 246  
15:35:44 247  EXCEPTION
15:35:44 248  WHEN BAD_GROUP_ID THEN
15:35:44 249  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 250  	  SPROC_NAME, 'No such group id');
15:35:44 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
15:35:44 252  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:44 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
15:35:44 254  WHEN OTHERS THEN
15:35:44 255  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 256  	  SPROC_NAME, 'Unknown error');
15:35:44 257  END RELEASE_LOCK;
15:35:44 258  
15:35:44 259  END PROCS_LOCKING_V17;
15:35:44 260  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:35:44   4  /*
15:35:44   5  Throws exceptions:
15:35:44   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44   8  */
15:35:44   9  	  in_offer_chain_id IN	 NUMBER,
15:35:44  10  	  out_result_set    OUT  SYS_REFCURSOR
15:35:44  11  ) AS
15:35:44  12  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_BY_ID';
15:35:44  13  BEGIN
15:35:44  14  
15:35:44  15  	-- Get offer chain informations
15:35:44  16  	OPEN out_result_set FOR
15:35:44  17  	  SELECT
15:35:44  18  	    OC.ID,
15:35:44  19  	    OC.NAME,
15:35:44  20  	    OC.ADOPTABILITY_WINDOW_START_DATE,
15:35:44  21  	    OC.ADOPTABILITY_WINDOW_END_DATE,
15:35:44  22  	    OC.DESCRIPTION,
15:35:44  23  	    OC.IS_GIFT_CERTIFICATE,
15:35:44  24  	    OC.OFFER_CHAIN_STATUS_ID,
15:35:44  25  	    OC.PRODUCT_URI,
15:35:44  26  	    OC.BILLING_SOURCE_ID,
15:35:44  27  	    OC.VENDOR_SOURCE_ID,
15:35:44  28  	    OC.GROUP_ACCOUNT_TYPE_ID,
15:35:44  29  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
15:35:44  30  	  FROM
15:35:44  31  	    OFFER_CHAIN OC
15:35:44  32  	  WHERE
15:35:44  33  	    OC.ID = in_offer_chain_id
15:35:44  34  	    AND ROWNUM <= 1;
15:35:44  35  
15:35:44  36  EXCEPTION
15:35:44  37  WHEN OTHERS THEN
15:35:44  38  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  39  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44  40  END GET_OFFER_CHAIN_BY_ID;
15:35:44  41  
15:35:44  42  /******************************************************************************/
15:35:44  43  
15:35:44  44  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
15:35:44  45  /*
15:35:44  46  Throws exceptions:
15:35:44  47  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  48  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:44  49  */
15:35:44  50  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:35:44  51  	out_result_set	   OUT SYS_REFCURSOR
15:35:44  52  ) AS
15:35:44  53  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
15:35:44  54  -- EXCEPTIONS
15:35:44  55  BAD_OFFER_CHAINS_IDS EXCEPTION;
15:35:44  56  BEGIN
15:35:44  57  
15:35:44  58  	IF (in_offer_chain_ids IS NULL) THEN
15:35:44  59  	  RAISE BAD_OFFER_CHAINS_IDS;
15:35:44  60  	END IF;
15:35:44  61  
15:35:44  62  	OPEN out_result_set FOR
15:35:44  63  	SELECT
15:35:44  64  	  OCH.ID,
15:35:44  65  	  OCH.NAME,
15:35:44  66  	  OCH.DESCRIPTION,
15:35:44  67  	  OCH.OFFER_CHAIN_STATUS_ID,
15:35:44  68  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
15:35:44  69  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
15:35:44  70  	  OCH.IS_GIFT_CERTIFICATE,
15:35:44  71  	  PROCS_OFFER_CHAIN_V17.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
15:35:44  72  	  PROCS_OFFER_CHAIN_V17.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
15:35:44  73  	  OCH.VENDOR_SOURCE_ID,
15:35:44  74  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
15:35:44  75  	FROM
15:35:44  76  	  OFFER_CHAIN OCH
15:35:44  77  	WHERE
15:35:44  78  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
15:35:44  79  
15:35:44  80  EXCEPTION
15:35:44  81  WHEN BAD_OFFER_CHAINS_IDS THEN
15:35:44  82  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:44  83  	  SPROC_NAME, 'Invalid offer chains ids');
15:35:44  84  WHEN OTHERS THEN
15:35:44  85  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  86  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44  87  END GET_OFFER_CHAINS_BY_IDS;
15:35:44  88  
15:35:44  89  /******************************************************************************/
15:35:44  90  
15:35:44  91  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
15:35:44  92  /*
15:35:44  93  Throws exceptions:
15:35:44  94  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  95  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:44  96  */
15:35:44  97  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:35:44  98  	out_result_set	   OUT SYS_REFCURSOR
15:35:44  99  ) AS
15:35:44 100  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
15:35:44 101  -- EXCEPTIONS
15:35:44 102  BAD_OFFER_CHAINS_IDS EXCEPTION;
15:35:44 103  BEGIN
15:35:44 104  
15:35:44 105  	IF (in_offer_chain_ids IS NULL) THEN
15:35:44 106  	  RAISE BAD_OFFER_CHAINS_IDS;
15:35:44 107  	END IF;
15:35:44 108  
15:35:44 109  	OPEN out_result_set FOR
15:35:44 110  	SELECT
15:35:44 111  	  OOCH.OFFER_CHAIN_ID,
15:35:44 112  	  PO.PRODUCT_ID
15:35:44 113  	FROM
15:35:44 114  	  PRODUCT_OFFERING PO
15:35:44 115  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
15:35:44 116  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
15:35:44 117  	WHERE
15:35:44 118  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
15:35:44 119  
15:35:44 120  EXCEPTION
15:35:44 121  WHEN BAD_OFFER_CHAINS_IDS THEN
15:35:44 122  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:44 123  	  SPROC_NAME, 'Invalid offer chains ids');
15:35:44 124  WHEN OTHERS THEN
15:35:44 125  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 127  END GET_OFFER_CHAINS_PRODUCTS;
15:35:44 128  
15:35:44 129  /******************************************************************************/
15:35:44 130  
15:35:44 131  PROCEDURE GET_OFFER_CHAINS_OFFERS (
15:35:44 132  /*
15:35:44 133  Throws exceptions:
15:35:44 134  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 135  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:44 136  */
15:35:44 137  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:35:44 138  	out_result_set	   OUT SYS_REFCURSOR
15:35:44 139  ) AS
15:35:44 140  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
15:35:44 141  -- EXCEPTIONS
15:35:44 142  BAD_OFFER_CHAINS_IDS EXCEPTION;
15:35:44 143  BEGIN
15:35:44 144  
15:35:44 145  	IF (in_offer_chain_ids IS NULL) THEN
15:35:44 146  	  RAISE BAD_OFFER_CHAINS_IDS;
15:35:44 147  	END IF;
15:35:44 148  
15:35:44 149  	OPEN out_result_set FOR
15:35:44 150  	SELECT
15:35:44 151  	  OOCH.OFFER_CHAIN_ID,
15:35:44 152  	  OOCH.OFFER_ID,
15:35:44 153  	  OOCH.INDEX_VALUE,
15:35:44 154  	  OOCH.NUM_RECURRENCES,
15:35:44 155  	  O.ENTITLEMENT_DURATION,
15:35:44 156  	  PROCS_OFFER_CHAIN_V17.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
15:35:44 157  	FROM
15:35:44 158  	  OFFER O
15:35:44 159  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
15:35:44 160  	WHERE
15:35:44 161  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
15:35:44 162  
15:35:44 163  EXCEPTION
15:35:44 164  WHEN BAD_OFFER_CHAINS_IDS THEN
15:35:44 165  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:44 166  	  SPROC_NAME, 'Invalid offer chains ids');
15:35:44 167  WHEN OTHERS THEN
15:35:44 168  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 169  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 170  END GET_OFFER_CHAINS_OFFERS;
15:35:44 171  
15:35:44 172  /******************************************************************************/
15:35:44 173  
15:35:44 174  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
15:35:44 175  /*
15:35:44 176  Throws exceptions (codes):
15:35:44 177  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 178  */
15:35:44 179  	in_product_id  IN  NUMBER,
15:35:44 180  	out_result_set OUT SYS_REFCURSOR
15:35:44 181  )AS
15:35:44 182  -- VARIBLES
15:35:44 183  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
15:35:44 184  temp_product_id NUMBER;
15:35:44 185  
15:35:44 186  -- EXCEPTIONS
15:35:44 187  BAD_PRODUCT_ID EXCEPTION;
15:35:44 188  BEGIN
15:35:44 189  
15:35:44 190  	-- Check that given product exists
15:35:44 191  	BEGIN
15:35:44 192  	  SELECT
15:35:44 193  	    PRODUCT.ID into temp_product_id
15:35:44 194  	  FROM
15:35:44 195  	    PRODUCT
15:35:44 196  	  WHERE
15:35:44 197  	    PRODUCT.ID = in_product_id;
15:35:44 198  	  EXCEPTION
15:35:44 199  	    WHEN NO_DATA_FOUND THEN
15:35:44 200  	      RAISE BAD_PRODUCT_ID;
15:35:44 201  	END;
15:35:44 202  
15:35:44 203  	-- Select all offer chains that contains given product
15:35:44 204  	OPEN out_result_set FOR
15:35:44 205  	SELECT
15:35:44 206  	  OFFER_CHAIN.ID,
15:35:44 207  	  OFFER_CHAIN.NAME,
15:35:44 208  	  OFFER_CHAIN.DESCRIPTION,
15:35:44 209  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
15:35:44 210  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
15:35:44 211  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
15:35:44 212  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
15:35:44 213  	FROM
15:35:44 214  	  OFFER_CHAIN
15:35:44 215  	WHERE
15:35:44 216  	  OFFER_CHAIN.ID IN (
15:35:44 217  	    SELECT DISTINCT
15:35:44 218  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
15:35:44 219  	    FROM
15:35:44 220  	      OFFER_OFFER_CHAIN
15:35:44 221  	    WHERE
15:35:44 222  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
15:35:44 223  		SELECT DISTINCT
15:35:44 224  		  OFFER_PRODUCT_OFFERING.OFFER_ID
15:35:44 225  		FROM
15:35:44 226  		  OFFER_PRODUCT_OFFERING
15:35:44 227  		WHERE
15:35:44 228  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
15:35:44 229  	      )
15:35:44 230  	  );
15:35:44 231  
15:35:44 232  EXCEPTION
15:35:44 233  WHEN BAD_PRODUCT_ID THEN
15:35:44 234  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 235  	  SPROC_NAME, 'No such product');
15:35:44 236  WHEN OTHERS THEN
15:35:44 237  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 239  END GET_OFFER_CHAINS_BY_PRODUCT;
15:35:44 240  
15:35:44 241  /******************************************************************************/
15:35:44 242  
15:35:44 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
15:35:44 244  /*
15:35:44 245  Throws exceptions (codes):
15:35:44 246  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 247  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 248  */
15:35:44 249  	in_offer_chain_id IN NUMBER,
15:35:44 250  	out_price	  OUT NUMBER
15:35:44 251  ) AS
15:35:44 252  -- VARIABLES
15:35:44 253  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
15:35:44 254  temp_offer_chain_id NUMBER;
15:35:44 255  
15:35:44 256  -- EXCEPTION
15:35:44 257  BAD_OFFER_CHAIN_ID       EXCEPTION;
15:35:44 258  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
15:35:44 259  EXCEPTION_MESSAGE        VARCHAR2(1024);
15:35:44 260  BEGIN
15:35:44 261  
15:35:44 262  	-- Check that given offer chain exists
15:35:44 263  	BEGIN
15:35:44 264  	  SELECT
15:35:44 265  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 266  	  FROM
15:35:44 267  	    OFFER_CHAIN
15:35:44 268  	  WHERE
15:35:44 269  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:35:44 270  
15:35:44 271  	  EXCEPTION
15:35:44 272  	  WHEN NO_DATA_FOUND THEN
15:35:44 273  	    RAISE BAD_OFFER_CHAIN_ID;
15:35:44 274  	END;
15:35:44 275  
15:35:44 276  	BEGIN
15:35:44 277  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
15:35:44 278  	  EXCEPTION
15:35:44 279  	    WHEN OTHERS THEN
15:35:44 280  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 281  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
15:35:44 282  	END;
15:35:44 283  
15:35:44 284  EXCEPTION
15:35:44 285  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:44 286  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 287  	  SPROC_NAME, 'Bad offer chain id');
15:35:44 288  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
15:35:44 289  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 290  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
15:35:44 291  WHEN OTHERS THEN
15:35:44 292  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 293  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 294  END GET_OFFER_CHAIN_PRICE;
15:35:44 295  
15:35:44 296  /******************************************************************************/
15:35:44 297  
15:35:44 298  PROCEDURE GET_FIRST_OFFER(
15:35:44 299  /*
15:35:44 300  Throws exceptions (codes):
15:35:44 301  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 302  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 303  */
15:35:44 304  	in_offer_chain_id IN  NUMBER,
15:35:44 305  	out_offer_id	  OUT NUMBER
15:35:44 306  ) AS
15:35:44 307  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
15:35:44 308  BEGIN
15:35:44 309  	-- Seect first offer in offer chain
15:35:44 310  	SELECT
15:35:44 311  	  OFFER_ID into out_offer_id
15:35:44 312  	FROM (
15:35:44 313  	  SELECT
15:35:44 314  	    OFFER_OFFER_CHAIN.OFFER_ID
15:35:44 315  	  FROM
15:35:44 316  	    OFFER_OFFER_CHAIN
15:35:44 317  	  WHERE
15:35:44 318  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 319  	  ORDER BY
15:35:44 320  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
15:35:44 321  	)
15:35:44 322  	WHERE
15:35:44 323  	  ROWNUM <= 1;
15:35:44 324  
15:35:44 325  EXCEPTION
15:35:44 326  WHEN NO_DATA_FOUND THEN
15:35:44 327  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 328  	  SPROC_NAME, 'No such offer chain');
15:35:44 329  WHEN OTHERS THEN
15:35:44 330  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 332  END GET_FIRST_OFFER;
15:35:44 333  
15:35:44 334  /******************************************************************************/
15:35:44 335  
15:35:44 336  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
15:35:44 337  /*
15:35:44 338  Throws exceptions (codes):
15:35:44 339  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 340  */
15:35:44 341  	out_result_set OUT SYS_REFCURSOR
15:35:44 342  ) AS
15:35:44 343  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
15:35:44 344  BEGIN
15:35:44 345  	OPEN out_result_set FOR
15:35:44 346  	SELECT
15:35:44 347  	  OFFER_CHAIN.ID,
15:35:44 348  	  OFFER_CHAIN.NAME,
15:35:44 349  	  OFFER_CHAIN.DESCRIPTION,
15:35:44 350  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
15:35:44 351  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
15:35:44 352  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
15:35:44 353  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
15:35:44 354  	  PROCS_OFFER_CHAIN_V17.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
15:35:44 355  	  PRODUCT_OFFERING.PRODUCT_ID
15:35:44 356  	FROM
15:35:44 357  	  OFFER_CHAIN,
15:35:44 358  	  OFFER_OFFER_CHAIN,
15:35:44 359  	  OFFER_PRODUCT_OFFERING,
15:35:44 360  	  PRODUCT_OFFERING
15:35:44 361  	WHERE
15:35:44 362  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
15:35:44 363  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
15:35:44 364  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:35:44 365  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V17.OFFER_CHAIN_ACTIVE;
15:35:44 366  
15:35:44 367  EXCEPTION
15:35:44 368  WHEN OTHERS THEN
15:35:44 369  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 370  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 371  END GET_ACTIVE_OFFER_CHAINS;
15:35:44 372  
15:35:44 373  /******************************************************************************/
15:35:44 374  
15:35:44 375  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
15:35:44 376  /*
15:35:44 377  Throws exceptions (codes):
15:35:44 378  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 379  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 380  */
15:35:44 381  	in_offer_chain_id IN NUMBER,
15:35:44 382  	out_result_set	  OUT SYS_REFCURSOR
15:35:44 383  ) AS
15:35:44 384  -- VARIABLES
15:35:44 385  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
15:35:44 386  temp_offer_chain_id NUMBER;
15:35:44 387  
15:35:44 388  -- EXCEPTIONS
15:35:44 389  BAD_OFFER_CHAIN EXCEPTION;
15:35:44 390  BEGIN
15:35:44 391  
15:35:44 392  	-- Check that offer chain exists
15:35:44 393  	BEGIN
15:35:44 394  	  SELECT
15:35:44 395  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 396  	  FROM
15:35:44 397  	    OFFER_CHAIN
15:35:44 398  	  WHERE
15:35:44 399  	    OFFER_CHAIN.ID = in_offer_chain_id
15:35:44 400  	    AND ROWNUM <= 1;
15:35:44 401  
15:35:44 402  	  EXCEPTION
15:35:44 403  	    WHEN OTHERS THEN
15:35:44 404  	      RAISE BAD_OFFER_CHAIN;
15:35:44 405  	END;
15:35:44 406  
15:35:44 407  	-- Select all products for given offer chain
15:35:44 408  	OPEN out_result_set FOR
15:35:44 409  	SELECT DISTINCT
15:35:44 410  	  PRODUCT_OFFERING.PRODUCT_ID
15:35:44 411  	FROM
15:35:44 412  	  PRODUCT_OFFERING
15:35:44 413  	WHERE
15:35:44 414  	  PRODUCT_OFFERING.ID IN (
15:35:44 415  	    SELECT DISTINCT
15:35:44 416  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:35:44 417  	    FROM
15:35:44 418  	      OFFER_PRODUCT_OFFERING
15:35:44 419  	    WHERE
15:35:44 420  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:35:44 421  		SELECT
15:35:44 422  		  OFFER_OFFER_CHAIN.OFFER_ID
15:35:44 423  		FROM
15:35:44 424  		  OFFER_OFFER_CHAIN
15:35:44 425  		WHERE
15:35:44 426  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 427  	      )
15:35:44 428  	  );
15:35:44 429  
15:35:44 430  EXCEPTION
15:35:44 431  WHEN BAD_OFFER_CHAIN THEN
15:35:44 432  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 433  	  SPROC_NAME, 'No such offer chain');
15:35:44 434  WHEN OTHERS THEN
15:35:44 435  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 437  END GET_OFFER_CHAIN_PRODUCTS;
15:35:44 438  
15:35:44 439  /******************************************************************************/
15:35:44 440  
15:35:44 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
15:35:44 442  /*
15:35:44 443  Throws exceptions (codes):
15:35:44 444  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 445  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 446  */
15:35:44 447  	in_offer_chain_id	  IN NUMBER,
15:35:44 448  	in_offer_chain_start_date IN DATE
15:35:44 449  ) RETURN DATE AS
15:35:44 450  -- VARIABLES
15:35:44 451  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
15:35:44 452  temp_offer_chain_id    NUMBER;
15:35:44 453  var_offer_chain_length NUMBER;
15:35:44 454  var_offer_duration     VARCHAR2(30);
15:35:44 455  var_offer_recurrences  NUMBER;
15:35:44 456  var_end_date	     DATE;
15:35:44 457  
15:35:44 458  var_offer_ym_interval INTERVAL YEAR TO MONTH;
15:35:44 459  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
15:35:44 460  var_offer_years	    NUMBER;
15:35:44 461  var_offer_months	    NUMBER;
15:35:44 462  var_offer_days	    NUMBER;
15:35:44 463  var_infinity_offers_count NUMBER;
15:35:44 464  
15:35:44 465  var_offers_set SYS_REFCURSOR;
15:35:44 466  
15:35:44 467  -- EXCEPTIONS
15:35:44 468  BAD_OFFER_CHAIN_ID EXCEPTION;
15:35:44 469  BEGIN
15:35:44 470  
15:35:44 471  	var_end_date := in_offer_chain_start_date;
15:35:44 472  
15:35:44 473  	-- Check that offer chain exists
15:35:44 474  	BEGIN
15:35:44 475  	  SELECT
15:35:44 476  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 477  	  FROM
15:35:44 478  	    OFFER_CHAIN
15:35:44 479  	  WHERE
15:35:44 480  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:35:44 481  	  EXCEPTION
15:35:44 482  	    WHEN NO_DATA_FOUND
15:35:44 483  	      THEN RAISE BAD_OFFER_CHAIN_ID;
15:35:44 484  	END;
15:35:44 485  
15:35:44 486  	SELECT
15:35:44 487  	  COUNT(*) into var_infinity_offers_count
15:35:44 488  	FROM
15:35:44 489  	  OFFER_OFFER_CHAIN
15:35:44 490  	WHERE
15:35:44 491  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 492  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V17.OFFER_REC_INFINITY;
15:35:44 493  
15:35:44 494  	IF var_infinity_offers_count > 0 THEN
15:35:44 495  	  -- Offer chain contains offers with infinity num of recurrences
15:35:44 496  	  RETURN NULL;
15:35:44 497  	END IF;
15:35:44 498  
15:35:44 499  	-- Select offers durations
15:35:44 500  	OPEN var_offers_set FOR
15:35:44 501  	SELECT
15:35:44 502  	  OFFER.ENTITLEMENT_DURATION,
15:35:44 503  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
15:35:44 504  	FROM
15:35:44 505  	  OFFER_OFFER_CHAIN
15:35:44 506  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:35:44 507  	WHERE
15:35:44 508  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
15:35:44 509  
15:35:44 510  	-- Calculate sum of offers durations
15:35:44 511  	LOOP
15:35:44 512  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
15:35:44 513  	  EXIT WHEN var_offers_set%NOTFOUND;
15:35:44 514  	  PROCS_COMMON_V17.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
15:35:44 515  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
15:35:44 516  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
15:35:44 517  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
15:35:44 518  	END LOOP;
15:35:44 519  
15:35:44 520  	RETURN var_end_date;
15:35:44 521  
15:35:44 522  EXCEPTION
15:35:44 523  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:44 524  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 525  	  SPROC_NAME, 'No such offer chain');
15:35:44 526  WHEN OTHERS THEN
15:35:44 527  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 528  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 529  END CALCULATE_OFFER_CHAIN_END_DATE;
15:35:44 530  
15:35:44 531  /******************************************************************************/
15:35:44 532  
15:35:44 533  FUNCTION CALCULATE_OFFER_AMOUNT (
15:35:44 534  	in_offer_id IN NUMBER
15:35:44 535  ) RETURN NUMBER AS
15:35:44 536  -- VARIABLES
15:35:44 537  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
15:35:44 538  temp_offer_id NUMBER;
15:35:44 539  
15:35:44 540  var_product_offering_set	    SYS_REFCURSOR;
15:35:44 541  var_product_offering_id	    NUMBER;
15:35:44 542  var_product_offering_price    NUMBER(10,6);
15:35:44 543  var_product_offering_t_amount NUMBER(10,6);
15:35:44 544  var_product_offering_quantity NUMBER;
15:35:44 545  
15:35:44 546  var_total_amount NUMBER(10,6);
15:35:44 547  var_final_amount NUMBER(10,2);
15:35:44 548  
15:35:44 549  var_percent_discount NUMBER(10,2);
15:35:44 550  var_fixed_discount NUMBER(10,6);
15:35:44 551  
15:35:44 552  -- EXCEPTIONS
15:35:44 553  BAD_OFFER_ID EXCEPTION;
15:35:44 554  BEGIN
15:35:44 555  
15:35:44 556  	BEGIN
15:35:44 557  	  SELECT
15:35:44 558  	    OFFER.ID into temp_offer_id
15:35:44 559  	  FROM
15:35:44 560  	    OFFER
15:35:44 561  	  WHERE
15:35:44 562  	    OFFER.ID = in_offer_id;
15:35:44 563  	  EXCEPTION
15:35:44 564  	    WHEN NO_DATA_FOUND THEN
15:35:44 565  	      RAISE BAD_OFFER_ID;
15:35:44 566  	END;
15:35:44 567  
15:35:44 568  	OPEN var_product_offering_set FOR
15:35:44 569  	SELECT
15:35:44 570  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
15:35:44 571  	  PRODUCT_OFFERING.UNIT_PRICE,
15:35:44 572  	  PRODUCT_OFFERING.QUANTITY
15:35:44 573  	FROM
15:35:44 574  	  OFFER_PRODUCT_OFFERING
15:35:44 575  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:35:44 576  	WHERE
15:35:44 577  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
15:35:44 578  
15:35:44 579  	var_total_amount := 0;
15:35:44 580  
15:35:44 581  	LOOP
15:35:44 582  	  FETCH var_product_offering_set into
15:35:44 583  	    var_product_offering_id,
15:35:44 584  	    var_product_offering_price,
15:35:44 585  	    var_product_offering_quantity;
15:35:44 586  	  EXIT WHEN var_product_offering_set%NOTFOUND;
15:35:44 587  
15:35:44 588  	  SELECT
15:35:44 589  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
15:35:44 590  	  FROM
15:35:44 591  	    DISCOUNT_PRODUCT_OFFERING
15:35:44 592  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:35:44 593  	  WHERE
15:35:44 594  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:35:44 595  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
15:35:44 596  
15:35:44 597  	  SELECT
15:35:44 598  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
15:35:44 599  	  FROM
15:35:44 600  	    DISCOUNT_PRODUCT_OFFERING
15:35:44 601  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:35:44 602  	  WHERE
15:35:44 603  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:35:44 604  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
15:35:44 605  
15:35:44 606  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
15:35:44 607  
15:35:44 608  	  IF var_percent_discount IS NOT NULL THEN
15:35:44 609  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
15:35:44 610  	  END IF;
15:35:44 611  
15:35:44 612  	  IF var_fixed_discount IS NOT NULL THEN
15:35:44 613  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
15:35:44 614  	  END IF;
15:35:44 615  
15:35:44 616  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
15:35:44 617  	END LOOP;
15:35:44 618  	var_final_amount := var_total_amount;
15:35:44 619  	RETURN var_final_amount;
15:35:44 620  
15:35:44 621  EXCEPTION
15:35:44 622  WHEN BAD_OFFER_ID THEN
15:35:44 623  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 624  	  SPROC_NAME, 'No such offer');
15:35:44 625  WHEN OTHERS THEN
15:35:44 626  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 627  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 628  END CALCULATE_OFFER_AMOUNT;
15:35:44 629  
15:35:44 630  /******************************************************************************/
15:35:44 631  
15:35:44 632  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
15:35:44 633  	in_offer_chain_id IN NUMBER
15:35:44 634  ) RETURN NUMBER AS
15:35:44 635  -- VARIABLES
15:35:44 636  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
15:35:44 637  temp_offer_chain_id    NUMBER;
15:35:44 638  var_first_offer_id     NUMBER;
15:35:44 639  -- EXCEPTIONS
15:35:44 640  BAD_OFFER_CHAIN_ID      EXCEPTION;
15:35:44 641  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
15:35:44 642  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:35:44 643  BEGIN
15:35:44 644  
15:35:44 645  	BEGIN
15:35:44 646  	  SELECT
15:35:44 647  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 648  	  FROM
15:35:44 649  	    OFFER_CHAIN
15:35:44 650  	  WHERE
15:35:44 651  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:35:44 652  	  EXCEPTION
15:35:44 653  	    WHEN NO_DATA_FOUND THEN
15:35:44 654  	      RAISE BAD_OFFER_CHAIN_ID;
15:35:44 655  	END;
15:35:44 656  
15:35:44 657  	BEGIN
15:35:44 658  	  PROCS_OFFER_CHAIN_V17.GET_FIRST_OFFER(
15:35:44 659  	    in_offer_chain_id => in_offer_chain_id,
15:35:44 660  	    out_offer_id      => var_first_offer_id
15:35:44 661  	  );
15:35:44 662  	  EXCEPTION
15:35:44 663  	    WHEN OTHERS THEN
15:35:44 664  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 665  	      RAISE CAN_NOT_GET_FIRST_OFFER;
15:35:44 666  	END;
15:35:44 667  
15:35:44 668  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
15:35:44 669  
15:35:44 670  EXCEPTION
15:35:44 671  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:44 672  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 673  	  SPROC_NAME, 'No such offer chain');
15:35:44 674  WHEN CAN_NOT_GET_FIRST_OFFER THEN
15:35:44 675  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 676  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
15:35:44 677  WHEN OTHERS THEN
15:35:44 678  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 680  END CALCULATE_OFFER_CHAIN_AMOUNT;
15:35:44 681  
15:35:44 682  /******************************************************************************/
15:35:44 683  
15:35:44 684  FUNCTION GET_FIRST_OFFER_INDEX (
15:35:44 685  	in_offer_chain_id IN NUMBER
15:35:44 686  ) RETURN NUMBER AS
15:35:44 687  -- VARIABLES
15:35:44 688  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
15:35:44 689  var_first_offer_index NUMBER;
15:35:44 690  BEGIN
15:35:44 691  
15:35:44 692  	SELECT
15:35:44 693  	  INDEX_VALUE into var_first_offer_index
15:35:44 694  	FROM (
15:35:44 695  	  SELECT
15:35:44 696  	    OFFER_OFFER_CHAIN.INDEX_VALUE
15:35:44 697  	  FROM
15:35:44 698  	    OFFER_OFFER_CHAIN
15:35:44 699  	  WHERE
15:35:44 700  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 701  	  ORDER BY
15:35:44 702  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
15:35:44 703  	)
15:35:44 704  	WHERE
15:35:44 705  	  ROWNUM <= 1;
15:35:44 706  
15:35:44 707  	RETURN var_first_offer_index;
15:35:44 708  
15:35:44 709  EXCEPTION
15:35:44 710  WHEN NO_DATA_FOUND THEN
15:35:44 711  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 712  	  SPROC_NAME, 'No such offer chain');
15:35:44 713  WHEN OTHERS THEN
15:35:44 714  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 715  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 716  END GET_FIRST_OFFER_INDEX;
15:35:44 717  
15:35:44 718  /******************************************************************************/
15:35:44 719  
15:35:44 720  FUNCTION GET_NEXT_OFFER_INDEX (
15:35:44 721  /*
15:35:44 722  NULL, if not exists
15:35:44 723  */
15:35:44 724  	in_offer_chain_id	     IN NUMBER,
15:35:44 725  	in_offer_chain_current_index IN NUMBER
15:35:44 726  ) RETURN NUMBER AS
15:35:44 727  -- VARIABLES
15:35:44 728  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
15:35:44 729  temp_offer_chain_id	     NUMBER;
15:35:44 730  temp_offer_chain_current_index NUMBER;
15:35:44 731  var_result		     NUMBER;
15:35:44 732  -- EXCEPTIONS
15:35:44 733  BAD_OFFER_CHAIN_ID      EXCEPTION;
15:35:44 734  BAD_CURRENT_INDEX_VALUE EXCEPTION;
15:35:44 735  BEGIN
15:35:44 736  
15:35:44 737  	-- Check that offer chain exists
15:35:44 738  	BEGIN
15:35:44 739  	  SELECT
15:35:44 740  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 741  	  FROM
15:35:44 742  	    OFFER_CHAIN
15:35:44 743  	  WHERE
15:35:44 744  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:35:44 745  	  EXCEPTION
15:35:44 746  	    WHEN NO_DATA_FOUND THEN
15:35:44 747  	      RAISE BAD_OFFER_CHAIN_ID;
15:35:44 748  	END;
15:35:44 749  
15:35:44 750  	-- Check that current offer index exists
15:35:44 751  	BEGIN
15:35:44 752  	  SELECT
15:35:44 753  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
15:35:44 754  	  FROM
15:35:44 755  	    OFFER_OFFER_CHAIN
15:35:44 756  	  WHERE
15:35:44 757  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 758  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
15:35:44 759  	    -- TODO: delete next line
15:35:44 760  	    AND ROWNUM <= 1;
15:35:44 761  	  EXCEPTION
15:35:44 762  	    WHEN NO_DATA_FOUND THEN
15:35:44 763  	      RAISE BAD_CURRENT_INDEX_VALUE;
15:35:44 764  	END;
15:35:44 765  
15:35:44 766  	-- Get next offer index
15:35:44 767  	BEGIN
15:35:44 768  	  SELECT
15:35:44 769  	    INDEX_VALUE into var_result
15:35:44 770  	  FROM (
15:35:44 771  	    SELECT
15:35:44 772  	      OFFER_OFFER_CHAIN.INDEX_VALUE
15:35:44 773  	    FROM
15:35:44 774  	      OFFER_OFFER_CHAIN
15:35:44 775  	    WHERE
15:35:44 776  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 777  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
15:35:44 778  	    ORDER BY
15:35:44 779  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
15:35:44 780  	  )
15:35:44 781  	  WHERE
15:35:44 782  	    ROWNUM <= 1;
15:35:44 783  	  EXCEPTION
15:35:44 784  	    WHEN NO_DATA_FOUND THEN
15:35:44 785  	      var_result := NULL;
15:35:44 786  	END;
15:35:44 787  
15:35:44 788  	RETURN var_result;
15:35:44 789  
15:35:44 790  EXCEPTION
15:35:44 791  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:44 792  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 793  	  SPROC_NAME, 'No such offer chain');
15:35:44 794  WHEN BAD_CURRENT_INDEX_VALUE THEN
15:35:44 795  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 796  	  SPROC_NAME, 'Bad current index value');
15:35:44 797  WHEN OTHERS THEN
15:35:44 798  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 799  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 800  END GET_NEXT_OFFER_INDEX;
15:35:44 801  
15:35:44 802  /******************************************************************************/
15:35:44 803  
15:35:44 804  PROCEDURE P_GET_NEXT_OFFER_INDEX (
15:35:44 805  	in_offer_chain_id	     IN NUMBER,
15:35:44 806  	in_offer_chain_current_index IN NUMBER,
15:35:44 807  	out_next_offer_index	     OUT NUMBER
15:35:44 808  ) AS
15:35:44 809  BEGIN
15:35:44 810  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
15:35:44 811  	  in_offer_chain_id,
15:35:44 812  	  in_offer_chain_current_index
15:35:44 813  	);
15:35:44 814  END P_GET_NEXT_OFFER_INDEX;
15:35:44 815  
15:35:44 816  /******************************************************************************/
15:35:44 817  
15:35:44 818  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
15:35:44 819  	in_license_id		     IN NUMBER,
15:35:44 820  	in_offer_chain_current_index IN NUMBER,
15:35:44 821  	out_next_offer_index	     OUT NUMBER
15:35:44 822  ) AS
15:35:44 823  -- VARIABLES
15:35:44 824  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
15:35:44 825  var_offer_chain_id NUMBER;
15:35:44 826  -- EXCEPTIONS
15:35:44 827  BAD_LICENSE_ID		   EXCEPTION;
15:35:44 828  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
15:35:44 829  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
15:35:44 830  BEGIN
15:35:44 831  
15:35:44 832  	BEGIN
15:35:44 833  	  SELECT
15:35:44 834  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
15:35:44 835  	  FROM
15:35:44 836  	    SUBSCRIPTION
15:35:44 837  	  WHERE
15:35:44 838  	    SUBSCRIPTION.ID = (
15:35:44 839  	      SELECT
15:35:44 840  		LICENSE.SUBSCRIPTION_ID
15:35:44 841  	      FROM
15:35:44 842  		LICENSE
15:35:44 843  	      WHERE
15:35:44 844  		LICENSE.ID = in_license_id
15:35:44 845  	    );
15:35:44 846  	  EXCEPTION
15:35:44 847  	    WHEN NO_DATA_FOUND THEN
15:35:44 848  	      RAISE BAD_LICENSE_ID;
15:35:44 849  	END;
15:35:44 850  
15:35:44 851  	BEGIN
15:35:44 852  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
15:35:44 853  	    var_offer_chain_id,
15:35:44 854  	    in_offer_chain_current_index
15:35:44 855  	  );
15:35:44 856  	  EXCEPTION
15:35:44 857  	    WHEN OTHERS THEN
15:35:44 858  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 859  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
15:35:44 860  	END;
15:35:44 861  
15:35:44 862  EXCEPTION
15:35:44 863  WHEN BAD_LICENSE_ID THEN
15:35:44 864  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 865  	  SPROC_NAME, 'No such license');
15:35:44 866  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
15:35:44 867  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 868  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
15:35:44 869  WHEN OTHERS THEN
15:35:44 870  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 871  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 872  END GET_NEXT_OFFER_INDEX_BY_LCNS;
15:35:44 873  
15:35:44 874  /******************************************************************************/
15:35:44 875  
15:35:44 876  FUNCTION IS_OFFER_INDEX_EXISTS (
15:35:44 877  /*
15:35:44 878  GLOBAL_CONSTANTS_V17.TRUE - exists
15:35:44 879  GLOBAL_CONSTANTS_V17.FALSE - not exists
15:35:44 880  */
15:35:44 881  	in_offer_chain_id	   IN NUMBER,
15:35:44 882  	in_offer_chain_offer_index IN NUMBER
15:35:44 883  ) RETURN NUMBER AS
15:35:44 884  -- VARIABLES
15:35:44 885  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
15:35:44 886  temp_count NUMBER;
15:35:44 887  BEGIN
15:35:44 888  
15:35:44 889  	SELECT
15:35:44 890  	  COUNT(*) into temp_count
15:35:44 891  	FROM
15:35:44 892  	  OFFER_OFFER_CHAIN
15:35:44 893  	WHERE
15:35:44 894  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 895  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
15:35:44 896  
15:35:44 897  	IF temp_count > 0 THEN
15:35:44 898  	  RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:44 899  	ELSE
15:35:44 900  	  RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:44 901  	END IF;
15:35:44 902  
15:35:44 903  EXCEPTION
15:35:44 904  WHEN OTHERS THEN
15:35:44 905  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 906  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 907  END IS_OFFER_INDEX_EXISTS;
15:35:44 908  
15:35:44 909  /******************************************************************************/
15:35:44 910  
15:35:44 911  PROCEDURE GET_OFFER_LENGTH (
15:35:44 912  	in_offer_id IN NUMBER,
15:35:44 913  	out_years   OUT NUMBER,
15:35:44 914  	out_months  OUT NUMBER,
15:35:44 915  	out_days    OUT NUMBER
15:35:44 916  ) AS
15:35:44 917  -- VARIABLES
15:35:44 918  var_offer_duration VARCHAR2(30);
15:35:44 919  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
15:35:44 920  -- EXCEPTIONS
15:35:44 921  BAD_OFFER_ID	     EXCEPTION;
15:35:44 922  CAN_NOT_PARSE_DURATION EXCEPTION;
15:35:44 923  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:35:44 924  BEGIN
15:35:44 925  
15:35:44 926  	BEGIN
15:35:44 927  	  SELECT
15:35:44 928  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
15:35:44 929  	  FROM
15:35:44 930  	    OFFER
15:35:44 931  	  WHERE
15:35:44 932  	    OFFER.ID = in_offer_id;
15:35:44 933  	  EXCEPTION
15:35:44 934  	    WHEN NO_DATA_FOUND THEN
15:35:44 935  	      RAISE BAD_OFFER_ID;
15:35:44 936  	END;
15:35:44 937  
15:35:44 938  	BEGIN
15:35:44 939  	  PROCS_COMMON_V17.ISO8601DURATION_TO_INTERVALS(
15:35:44 940  	    var_offer_duration,
15:35:44 941  	    out_years,
15:35:44 942  	    out_months,
15:35:44 943  	    out_days
15:35:44 944  	  );
15:35:44 945  	  EXCEPTION
15:35:44 946  	    WHEN OTHERS THEN
15:35:44 947  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:44 948  	      RAISE CAN_NOT_PARSE_DURATION;
15:35:44 949  	END;
15:35:44 950  
15:35:44 951  EXCEPTION
15:35:44 952  WHEN BAD_OFFER_ID THEN
15:35:44 953  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 954  	  SPROC_NAME, 'No such offer');
15:35:44 955  WHEN CAN_NOT_PARSE_DURATION THEN
15:35:44 956  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 957  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
15:35:44 958  WHEN OTHERS THEN
15:35:44 959  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 960  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 961  END GET_OFFER_LENGTH;
15:35:44 962  
15:35:44 963  /******************************************************************************/
15:35:44 964  
15:35:44 965  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
15:35:44 966  	in_offer_id   IN NUMBER,
15:35:44 967  	in_start_date IN DATE DEFAULT SYSDATE,
15:35:44 968  	out_days      OUT NUMBER
15:35:44 969  ) AS
15:35:44 970  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
15:35:44 971  -- VARIABLES
15:35:44 972  var_offer_duration VARCHAR2(30);
15:35:44 973  var_offer_years	 NUMBER;
15:35:44 974  var_offer_months	 NUMBER;
15:35:44 975  var_offer_days	 NUMBER;
15:35:44 976  var_offer_end_date DATE;
15:35:44 977  -- EXCEPTIONS
15:35:44 978  BAD_OFFER_ID EXCEPTION;
15:35:44 979  BEGIN
15:35:44 980  
15:35:44 981  	BEGIN
15:35:44 982  	  SELECT
15:35:44 983  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
15:35:44 984  	  FROM
15:35:44 985  	    OFFER
15:35:44 986  	  WHERE
15:35:44 987  	    OFFER.ID = in_offer_id;
15:35:44 988  	  EXCEPTION
15:35:44 989  	    WHEN NO_DATA_FOUND THEN
15:35:44 990  	      RAISE BAD_OFFER_ID;
15:35:44 991  	END;
15:35:44 992  
15:35:44 993  	PROCS_COMMON_V17.ISO8601DURATION_TO_INTERVALS (
15:35:44 994  	  var_offer_duration,
15:35:44 995  	  var_offer_years,
15:35:44 996  	  var_offer_months,
15:35:44 997  	  var_offer_days
15:35:44 998  	);
15:35:44 999  
15:35:44 1000  	 var_offer_end_date := ( ( in_start_date
15:35:44 1001  	   + GLOBAL_CONSTANTS_V17.ONE_DAY_INTERVAL * var_offer_days )
15:35:44 1002  	   + GLOBAL_CONSTANTS_V17.ONE_MONTH_INTERVAL * var_offer_months )
15:35:44 1003  	   + GLOBAL_CONSTANTS_V17.ONE_YEAR_INTERVAL * var_offer_years;
15:35:44 1004  
15:35:44 1005  	 out_days := var_offer_end_date - in_start_date;
15:35:44 1006  
15:35:44 1007  EXCEPTION
15:35:44 1008  WHEN BAD_OFFER_ID THEN
15:35:44 1009  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1010  	   SPROC_NAME, 'No such offer');
15:35:44 1011  WHEN OTHERS THEN
15:35:44 1012  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1013  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1014  END GET_OFFER_LENGTH_IN_DAYS;
15:35:44 1015  
15:35:44 1016  /******************************************************************************/
15:35:44 1017  
15:35:44 1018  PROCEDURE GET_OFFER_PRODUCTS (
15:35:44 1019  /*
15:35:44 1020  Throws exceptions (codes):
15:35:44 1021  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 1022  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1023  */
15:35:44 1024  	 in_offer_id	IN NUMBER,
15:35:44 1025  	 out_result_set OUT SYS_REFCURSOR
15:35:44 1026  ) AS
15:35:44 1027  -- VARIABLES
15:35:44 1028  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
15:35:44 1029  temp_offerr_id NUMBER;
15:35:44 1030  -- EXCEPTIONS
15:35:44 1031  BAD_OFFER_ID EXCEPTION;
15:35:44 1032  BEGIN
15:35:44 1033  
15:35:44 1034  	 BEGIN
15:35:44 1035  	   SELECT
15:35:44 1036  	     OFFER.ID into temp_offerr_id
15:35:44 1037  	   FROM
15:35:44 1038  	     OFFER
15:35:44 1039  	   WHERE
15:35:44 1040  	     OFFER.ID = in_offer_id;
15:35:44 1041  	   EXCEPTION
15:35:44 1042  	     WHEN NO_DATA_FOUND THEN
15:35:44 1043  	       RAISE BAD_OFFER_ID;
15:35:44 1044  	 END;
15:35:44 1045  
15:35:44 1046  	 OPEN out_result_set FOR
15:35:44 1047  	 SELECT DISTINCT
15:35:44 1048  	   PRODUCT.ID,
15:35:44 1049  	   PRODUCT.NAME
15:35:44 1050  	 FROM
15:35:44 1051  	   PRODUCT
15:35:44 1052  	 WHERE
15:35:44 1053  	   PRODUCT.ID IN (
15:35:44 1054  	       SELECT
15:35:44 1055  		 PRODUCT_OFFERING.PRODUCT_ID
15:35:44 1056  	       FROM
15:35:44 1057  		 OFFER_PRODUCT_OFFERING
15:35:44 1058  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:35:44 1059  	       WHERE
15:35:44 1060  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
15:35:44 1061  	     );
15:35:44 1062  
15:35:44 1063  EXCEPTION
15:35:44 1064  WHEN BAD_OFFER_ID THEN
15:35:44 1065  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1066  	   SPROC_NAME, 'No such offer');
15:35:44 1067  WHEN OTHERS THEN
15:35:44 1068  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1070  END GET_OFFER_PRODUCTS;
15:35:44 1071  
15:35:44 1072  /******************************************************************************/
15:35:44 1073  
15:35:44 1074  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
15:35:44 1075  /*
15:35:44 1076  Throws exceptions (codes):
15:35:44 1077  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 1078  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1079  */
15:35:44 1080  	 in_offer_chain_id IN NUMBER,
15:35:44 1081  	 out_result_set    OUT SYS_REFCURSOR
15:35:44 1082  ) AS
15:35:44 1083  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
15:35:44 1084  -- VARIABLES
15:35:44 1085  temp_offer_chain_id NUMBER;
15:35:44 1086  -- EXCEPTIONS
15:35:44 1087  BAD_OFFER_CHAIN_ID EXCEPTION;
15:35:44 1088  BEGIN
15:35:44 1089  
15:35:44 1090  	 BEGIN
15:35:44 1091  	   SELECT
15:35:44 1092  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 1093  	   FROM
15:35:44 1094  	     OFFER_CHAIN
15:35:44 1095  	   WHERE
15:35:44 1096  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:35:44 1097  	   EXCEPTION
15:35:44 1098  	     WHEN NO_DATA_FOUND THEN
15:35:44 1099  	       RAISE BAD_OFFER_CHAIN_ID;
15:35:44 1100  	 END;
15:35:44 1101  
15:35:44 1102  	 OPEN out_result_set FOR
15:35:44 1103  	 SELECT
15:35:44 1104  	   PRODUCT_OFFERING.ID,
15:35:44 1105  	   PRODUCT_OFFERING.PRODUCT_ID,
15:35:44 1106  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
15:35:44 1107  	   PRODUCT_OFFERING.UNIT_PRICE,
15:35:44 1108  	   PRODUCT_OFFERING.QUANTITY,
15:35:44 1109  	   PRODUCT_OFFERING.CREATE_DATE,
15:35:44 1110  	   PRODUCT_OFFERING.CREATED_BY,
15:35:44 1111  	   PRODUCT.NAME,
15:35:44 1112  	   PRODUCT.PRODUCT_URI,
15:35:44 1113  	   CAPABILITY.ID CAP_ID,
15:35:44 1114  	   CAPABILITY.CODE CAP_CODE,
15:35:44 1115  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
15:35:44 1116  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
15:35:44 1117  	 FROM
15:35:44 1118  	   PRODUCT_OFFERING
15:35:44 1119  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:35:44 1120  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
15:35:44 1121  	 WHERE
15:35:44 1122  	   PRODUCT_OFFERING.ID IN (
15:35:44 1123  	     SELECT DISTINCT
15:35:44 1124  	       PRODUCT_OFFERING_ID
15:35:44 1125  	     FROM
15:35:44 1126  	       OFFER_PRODUCT_OFFERING
15:35:44 1127  	     WHERE
15:35:44 1128  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:35:44 1129  		 SELECT DISTINCT
15:35:44 1130  		   OFFER_ID
15:35:44 1131  		 FROM
15:35:44 1132  		   OFFER_OFFER_CHAIN
15:35:44 1133  		 WHERE
15:35:44 1134  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 1135  	       )
15:35:44 1136  	   );
15:35:44 1137  
15:35:44 1138  EXCEPTION
15:35:44 1139  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:44 1140  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1141  	   SPROC_NAME, 'Bad offer chain id');
15:35:44 1142  WHEN OTHERS THEN
15:35:44 1143  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1144  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1145  END GET_OFFER_CHAIN_PROD_OFFERINGS;
15:35:44 1146  
15:35:44 1147  /******************************************************************************/
15:35:44 1148  
15:35:44 1149  FUNCTION CHECK_FOR_SAME_PRODUCTS (
15:35:44 1150  /*
15:35:44 1151  Throws exceptions (codes):
15:35:44 1152  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 1153  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1154  Returns:
15:35:44 1155  GLOBAL_CONSTANTS_V17.TRUE if there are at least one same product
15:35:44 1156  GLOBAL_CONSTANTS_V17.FALSE else
15:35:44 1157  */
15:35:44 1158  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
15:35:44 1159  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
15:35:44 1160  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:44 1161  ) RETURN NUMBER AS
15:35:44 1162  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
15:35:44 1163  -- CONSTANTS
15:35:44 1164  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
15:35:44 1165  -- VARIABLES
15:35:44 1166  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
15:35:44 1167  var_same_products	SYS_REFCURSOR;
15:35:44 1168  var_same_product_id	NUMBER;
15:35:44 1169  same_product_count	NUMBER;
15:35:44 1170  var_product_eligibility_limit NUMBER;
15:35:44 1171  s_product_eligibility_limit   VARCHAR2(100);
15:35:44 1172  -- EXCEPTIONS
15:35:44 1173  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
15:35:44 1174  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
15:35:44 1175  BEGIN
15:35:44 1176  
15:35:44 1177  	 -- Check that first offer chain exists
15:35:44 1178  	 BEGIN
15:35:44 1179  	   SELECT
15:35:44 1180  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 1181  	   FROM
15:35:44 1182  	     OFFER_CHAIN
15:35:44 1183  	   WHERE
15:35:44 1184  	     OFFER_CHAIN.ID = in_offer_chain_1;
15:35:44 1185  	   EXCEPTION
15:35:44 1186  	     WHEN NO_DATA_FOUND THEN
15:35:44 1187  	       RAISE BAD_FIRST_OFFER_CHAIN;
15:35:44 1188  	 END;
15:35:44 1189  
15:35:44 1190  	 -- Check that second offer chain exists
15:35:44 1191  	 BEGIN
15:35:44 1192  	   SELECT
15:35:44 1193  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 1194  	   FROM
15:35:44 1195  	     OFFER_CHAIN
15:35:44 1196  	   WHERE
15:35:44 1197  	     OFFER_CHAIN.ID = in_offer_chain_2;
15:35:44 1198  	   EXCEPTION
15:35:44 1199  	     WHEN NO_DATA_FOUND THEN
15:35:44 1200  	       RAISE BAD_SECOND_OFFER_CHAIN;
15:35:44 1201  	 END;
15:35:44 1202  
15:35:44 1203  	 PROCS_OFFER_CHAIN_V17.GET_OFF_CHAINS_SAME_PRODUCTS(
15:35:44 1204  	   in_offer_chain_1 => in_offer_chain_1,
15:35:44 1205  	   in_offer_chain_2 => in_offer_chain_2,
15:35:44 1206  	   out_result_set   => var_same_products
15:35:44 1207  	 );
15:35:44 1208  
15:35:44 1209  	 LOOP
15:35:44 1210  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
15:35:44 1211  	   EXIT WHEN var_same_products%NOTFOUND;
15:35:44 1212  
15:35:44 1213  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:44 1214  	     -- Return false because this offer chains having same products
15:35:44 1215  	     RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:44 1216  	   ELSE
15:35:44 1217  
15:35:44 1218  	     -- Get eligibility rule for given product
15:35:44 1219  	     BEGIN
15:35:44 1220  	       SELECT
15:35:44 1221  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
15:35:44 1222  	       FROM
15:35:44 1223  		 PRODUCT_ELIGIBILITY
15:35:44 1224  	       WHERE
15:35:44 1225  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
15:35:44 1226  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
15:35:44 1227  
15:35:44 1228  	       -- REVU: What should to be here? 1?
15:35:44 1229  	       EXCEPTION
15:35:44 1230  		 WHEN NO_DATA_FOUND THEN
15:35:44 1231  		   s_product_eligibility_limit := '1';
15:35:44 1232  	     END;
15:35:44 1233  
15:35:44 1234  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V17.MAX_CONSURRENT_PRD_UNLIM THEN
15:35:44 1235  	       RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:44 1236  	     END IF;
15:35:44 1237  
15:35:44 1238  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
15:35:44 1239  
15:35:44 1240  	     -- Check for limit
15:35:44 1241  	     IF var_product_eligibility_limit < same_product_count THEN
15:35:44 1242  	       RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:44 1243  	     END IF;
15:35:44 1244  
15:35:44 1245  	   END IF;
15:35:44 1246  	 END LOOP;
15:35:44 1247  
15:35:44 1248  	 RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:44 1249  
15:35:44 1250  EXCEPTION
15:35:44 1251  WHEN BAD_FIRST_OFFER_CHAIN THEN
15:35:44 1252  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1253  	   SPROC_NAME, 'First offer chain not found');
15:35:44 1254  WHEN BAD_SECOND_OFFER_CHAIN THEN
15:35:44 1255  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1256  	   SPROC_NAME, 'Second offer chain not found');
15:35:44 1257  WHEN OTHERS THEN
15:35:44 1258  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1259  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1260  END CHECK_FOR_SAME_PRODUCTS;
15:35:44 1261  
15:35:44 1262  /******************************************************************************/
15:35:44 1263  
15:35:44 1264  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
15:35:44 1265  /*
15:35:44 1266  Throws exceptions (codes):
15:35:44 1267  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1268  Returns:
15:35:44 1269  GLOBAL_CONSTANTS_V17.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
15:35:44 1270  GLOBAL_CONSTANTS_V17.FALSE else
15:35:44 1271  */
15:35:44 1272  	 in_offer_chain_id IN NUMBER
15:35:44 1273  ) RETURN NUMBER AS
15:35:44 1274  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
15:35:44 1275  -- VARIABLES
15:35:44 1276  var_is_cancelable_str VARCHAR2(1);
15:35:44 1277  var_is_cancelable     NUMBER;
15:35:44 1278  BEGIN
15:35:44 1279  
15:35:44 1280  	 BEGIN
15:35:44 1281  	   SELECT
15:35:44 1282  	     VALUE INTO var_is_cancelable_str
15:35:44 1283  	   FROM (
15:35:44 1284  	     SELECT
15:35:44 1285  	       VALUE, NAME
15:35:44 1286  	     FROM
15:35:44 1287  	       OFFER_CHAIN_META_DATA
15:35:44 1288  	     WHERE
15:35:44 1289  	       OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 1290  	     )
15:35:44 1291  	   WHERE
15:35:44 1292  	     UPPER(NAME) = 'CANCELABLE';
15:35:44 1293  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
15:35:44 1294  	   EXCEPTION
15:35:44 1295  	     WHEN NO_DATA_FOUND THEN
15:35:44 1296  	       var_is_cancelable := GLOBAL_CONSTANTS_V17.FALSE;
15:35:44 1297  	 END;
15:35:44 1298  
15:35:44 1299  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:44 1300  	   RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:44 1301  	 END IF;
15:35:44 1302  
15:35:44 1303  	 RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:44 1304  
15:35:44 1305  EXCEPTION
15:35:44 1306  WHEN OTHERS THEN
15:35:44 1307  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1308  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1309  END IS_OFFER_CHAIN_CANCELABLE;
15:35:44 1310  
15:35:44 1311  /******************************************************************************/
15:35:44 1312  
15:35:44 1313  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
15:35:44 1314  /*
15:35:44 1315  Throws exceptions (codes):
15:35:44 1316  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1317  */
15:35:44 1318  	 in_offer_chain_id IN NUMBER
15:35:44 1319  ) RETURN NUMBER AS
15:35:44 1320  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
15:35:44 1321  -- VARIABLES
15:35:44 1322  var_max_concurrent_subs_str VARCHAR2(100);
15:35:44 1323  var_max_concurrent_subs	   NUMBER;
15:35:44 1324  BEGIN
15:35:44 1325  
15:35:44 1326  	 BEGIN
15:35:44 1327  	   SELECT
15:35:44 1328  	     VALUE into var_max_concurrent_subs_str
15:35:44 1329  	   FROM
15:35:44 1330  	     (
15:35:44 1331  	       SELECT
15:35:44 1332  		 NAME,
15:35:44 1333  		 VALUE
15:35:44 1334  	       FROM
15:35:44 1335  		 OFFER_CHAIN_ELIGIBILITY
15:35:44 1336  	       WHERE
15:35:44 1337  		 OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 1338  	     )
15:35:44 1339  	   WHERE
15:35:44 1340  	     NAME LIKE GLOBAL_CONSTANTS_V17.MAX_CONCURRENT_SUBS;
15:35:44 1341  
15:35:44 1342  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V17.MAX_CONCURRENT_SUBS_UNLIM THEN
15:35:44 1343  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V17.INFINITY;
15:35:44 1344  	   ELSE
15:35:44 1345  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
15:35:44 1346  	   END IF;
15:35:44 1347  
15:35:44 1348  	   EXCEPTION
15:35:44 1349  	     WHEN NO_DATA_FOUND THEN
15:35:44 1350  	       var_max_concurrent_subs := 1;
15:35:44 1351  	 END;
15:35:44 1352  
15:35:44 1353  	 RETURN var_max_concurrent_subs;
15:35:44 1354  
15:35:44 1355  EXCEPTION
15:35:44 1356  WHEN OTHERS THEN
15:35:44 1357  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1358  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1359  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
15:35:44 1360  
15:35:44 1361  /******************************************************************************/
15:35:44 1362  
15:35:44 1363  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
15:35:44 1364  /*
15:35:44 1365  Throws exceptions (codes):
15:35:44 1366  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 1367  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1368  */
15:35:44 1369  	 in_offer_chain_id   IN NUMBER,
15:35:44 1370  	 in_eligibility_name IN VARCHAR2,
15:35:44 1371  	 out_result_set      OUT SYS_REFCURSOR
15:35:44 1372  ) AS
15:35:44 1373  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
15:35:44 1374  -- VARIABLES
15:35:44 1375  temp_offer_chain_id NUMBER;
15:35:44 1376  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
15:35:44 1377  -- EXCEPTIONS
15:35:44 1378  BAD_OFFER_CHAIN_ID EXCEPTION;
15:35:44 1379  BEGIN
15:35:44 1380  
15:35:44 1381  	 BEGIN
15:35:44 1382  	   SELECT
15:35:44 1383  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 1384  	   FROM
15:35:44 1385  	     OFFER_CHAIN
15:35:44 1386  	   WHERE
15:35:44 1387  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:35:44 1388  	   EXCEPTION
15:35:44 1389  	     WHEN NO_DATA_FOUND THEN
15:35:44 1390  	       RAISE BAD_OFFER_CHAIN_ID;
15:35:44 1391  	 END;
15:35:44 1392  
15:35:44 1393  	 var_eligibility_name := UPPER(in_eligibility_name);
15:35:44 1394  
15:35:44 1395  	 OPEN out_result_set FOR
15:35:44 1396  	 SELECT
15:35:44 1397  	   OFFER_CHAIN_ELIGIBILITY.ID,
15:35:44 1398  	   OFFER_CHAIN_ELIGIBILITY.NAME,
15:35:44 1399  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
15:35:44 1400  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
15:35:44 1401  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
15:35:44 1402  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
15:35:44 1403  	 FROM
15:35:44 1404  	   OFFER_CHAIN_ELIGIBILITY
15:35:44 1405  	 WHERE
15:35:44 1406  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 1407  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
15:35:44 1408  
15:35:44 1409  EXCEPTION
15:35:44 1410  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:44 1411  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1412  	   SPROC_NAME, 'No such offer chain');
15:35:44 1413  WHEN OTHERS THEN
15:35:44 1414  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1415  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1416  END GET_OFFER_CHAIN_ELIGIBILITY;
15:35:44 1417  
15:35:44 1418  /******************************************************************************/
15:35:44 1419  
15:35:44 1420  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
15:35:44 1421  /*
15:35:44 1422  Throws exceptions (codes):
15:35:44 1423  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1424  */
15:35:44 1425  	 in_offer_chain_ids  IN VARCHAR2,
15:35:44 1426  	 in_eligibility_name IN VARCHAR2,
15:35:44 1427  	 out_result_set      OUT SYS_REFCURSOR
15:35:44 1428  ) AS
15:35:44 1429  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
15:35:44 1430  -- VARIABLES
15:35:44 1431  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
15:35:44 1432  BEGIN
15:35:44 1433  
15:35:44 1434  	 var_eligibility_name := UPPER(in_eligibility_name);
15:35:44 1435  
15:35:44 1436  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
15:35:44 1437  
15:35:44 1438  	 open out_result_set for
15:35:44 1439  	 'SELECT
15:35:44 1440  	   ID,
15:35:44 1441  	   NAME,
15:35:44 1442  	   VALUE,
15:35:44 1443  	   OFFER_CHAIN_ID,
15:35:44 1444  	   CREATE_DATE,
15:35:44 1445  	   CREATED_BY
15:35:44 1446  	 FROM
15:35:44 1447  	   OFFER_CHAIN_ELIGIBILITY
15:35:44 1448  	 WHERE
15:35:44 1449  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
15:35:44 1450  	   AND UPPER(NAME) = :1'
15:35:44 1451  	 using var_eligibility_name;
15:35:44 1452  
15:35:44 1453  EXCEPTION
15:35:44 1454  WHEN OTHERS THEN
15:35:44 1455  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1456  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1457  END GET_OFFER_CHAINS_ELIGIBILITY;
15:35:44 1458  
15:35:44 1459  /******************************************************************************/
15:35:44 1460  
15:35:44 1461  PROCEDURE GET_OFFER_CHAINS_META_DATA (
15:35:44 1462  	 in_offer_chain_ids IN VARCHAR2,
15:35:44 1463  	 in_meta_data_name  IN VARCHAR2,
15:35:44 1464  	 out_result_set     OUT SYS_REFCURSOR
15:35:44 1465  ) AS
15:35:44 1466  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
15:35:44 1467  -- VARIABLES
15:35:44 1468  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
15:35:44 1469  BEGIN
15:35:44 1470  
15:35:44 1471  	 var_meta_data_name := UPPER(in_meta_data_name);
15:35:44 1472  
15:35:44 1473  	 open out_result_set for
15:35:44 1474  	 'select
15:35:44 1475  	   ID,
15:35:44 1476  	   NAME,
15:35:44 1477  	   VALUE,
15:35:44 1478  	   OFFER_CHAIN_ID,
15:35:44 1479  	   CREATED_BY,
15:35:44 1480  	   CREATE_DATE
15:35:44 1481  	 from
15:35:44 1482  	   OFFER_CHAIN_META_DATA
15:35:44 1483  	 where
15:35:44 1484  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
15:35:44 1485  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
15:35:44 1486  	 using var_meta_data_name;
15:35:44 1487  
15:35:44 1488  EXCEPTION
15:35:44 1489  WHEN OTHERS THEN
15:35:44 1490  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1491  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1492  END GET_OFFER_CHAINS_META_DATA;
15:35:44 1493  
15:35:44 1494  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:35:44 1495  /*
15:35:44 1496  Throws exceptions (codes):
15:35:44 1497  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 1498  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1499  */
15:35:44 1500  	 in_offer_chain_id IN NUMBER,
15:35:44 1501  	 in_meta_data_name IN VARCHAR2,
15:35:44 1502  	 out_result_set    OUT SYS_REFCURSOR
15:35:44 1503  ) AS
15:35:44 1504  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
15:35:44 1505  -- VARIABLES
15:35:44 1506  temp_offer_chain_id NUMBER;
15:35:44 1507  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
15:35:44 1508  -- EXCEPTIONS
15:35:44 1509  BAD_OFFER_CHAIN_ID EXCEPTION;
15:35:44 1510  BEGIN
15:35:44 1511  
15:35:44 1512  	 BEGIN
15:35:44 1513  	   SELECT
15:35:44 1514  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:35:44 1515  	   FROM
15:35:44 1516  	     OFFER_CHAIN
15:35:44 1517  	   WHERE
15:35:44 1518  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:35:44 1519  	   EXCEPTION
15:35:44 1520  	     WHEN NO_DATA_FOUND THEN
15:35:44 1521  	       RAISE BAD_OFFER_CHAIN_ID;
15:35:44 1522  	 END;
15:35:44 1523  
15:35:44 1524  	 var_meta_data_name := UPPER(in_meta_data_name);
15:35:44 1525  
15:35:44 1526  	 OPEN out_result_set FOR
15:35:44 1527  	 SELECT
15:35:44 1528  	   OFFER_CHAIN_META_DATA.ID,
15:35:44 1529  	   OFFER_CHAIN_META_DATA.NAME,
15:35:44 1530  	   OFFER_CHAIN_META_DATA.VALUE,
15:35:44 1531  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
15:35:44 1532  	   OFFER_CHAIN_META_DATA.CREATED_BY,
15:35:44 1533  	   OFFER_CHAIN_META_DATA.CREATE_DATE
15:35:44 1534  	 FROM
15:35:44 1535  	   OFFER_CHAIN_META_DATA
15:35:44 1536  	 WHERE
15:35:44 1537  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 1538  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
15:35:44 1539  
15:35:44 1540  EXCEPTION
15:35:44 1541  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:44 1542  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1543  	   SPROC_NAME, 'No such offer chain');
15:35:44 1544  WHEN OTHERS THEN
15:35:44 1545  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1546  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1547  END GET_OFFER_CHAIN_META_DATA;
15:35:44 1548  
15:35:44 1549  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
15:35:44 1550  /*
15:35:44 1551  Throws exceptions (codes):
15:35:44 1552  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 1553  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1554  */
15:35:44 1555  	 in_offer_id	IN NUMBER,
15:35:44 1556  	 out_result_set OUT SYS_REFCURSOR
15:35:44 1557  ) AS
15:35:44 1558  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
15:35:44 1559  -- VARIABLES
15:35:44 1560  temp_offer_id NUMBER;
15:35:44 1561  -- EXCEPTIONS
15:35:44 1562  BAD_OFFER_ID EXCEPTION;
15:35:44 1563  BEGIN
15:35:44 1564  
15:35:44 1565  	 BEGIN
15:35:44 1566  	   SELECT
15:35:44 1567  	     OFFER.ID into temp_offer_id
15:35:44 1568  	   FROM
15:35:44 1569  	     OFFER
15:35:44 1570  	   WHERE
15:35:44 1571  	     OFFER.ID = in_offer_id;
15:35:44 1572  	   EXCEPTION
15:35:44 1573  	     WHEN NO_DATA_FOUND THEN
15:35:44 1574  	       RAISE BAD_OFFER_ID;
15:35:44 1575  	 END;
15:35:44 1576  
15:35:44 1577  	 OPEN out_result_set FOR
15:35:44 1578  	 SELECT DISTINCT
15:35:44 1579  	   PRODUCT_OFFERING.ID,
15:35:44 1580  	   PRODUCT_OFFERING.PRODUCT_ID,
15:35:44 1581  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
15:35:44 1582  	   PRODUCT_OFFERING.UNIT_PRICE,
15:35:44 1583  	   PRODUCT_OFFERING.QUANTITY,
15:35:44 1584  	   PRODUCT_OFFERING.CREATE_DATE,
15:35:44 1585  	   PRODUCT_OFFERING.CREATED_BY,
15:35:44 1586  	   CAPABILITY.ID CAP_ID,
15:35:44 1587  	   CAPABILITY.CODE CAP_CODE,
15:35:44 1588  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
15:35:44 1589  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
15:35:44 1590  	 FROM
15:35:44 1591  	   OFFER_PRODUCT_OFFERING
15:35:44 1592  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:35:44 1593  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
15:35:44 1594  	 WHERE
15:35:44 1595  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
15:35:44 1596  
15:35:44 1597  EXCEPTION
15:35:44 1598  WHEN BAD_OFFER_ID THEN
15:35:44 1599  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1600  	   SPROC_NAME, 'No such offer');
15:35:44 1601  WHEN OTHERS THEN
15:35:44 1602  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1603  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1604  END GET_PROD_OFFERINGS_BY_OFFER_ID;
15:35:44 1605  
15:35:44 1606  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
15:35:44 1607  /*
15:35:44 1608  Throws exceptions (codes):
15:35:44 1609  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44 1610  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1611  */
15:35:44 1612  	 in_product_offering_id IN NUMBER,
15:35:44 1613  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
15:35:44 1614  	 out_result_set 	OUT SYS_REFCURSOR
15:35:44 1615  ) AS
15:35:44 1616  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
15:35:44 1617  -- VARIABLES
15:35:44 1618  temp_product_offering_id NUMBER;
15:35:44 1619  -- EXCEPTIONS
15:35:44 1620  BAD_PRODUCT_OFFERING_ID EXCEPTION;
15:35:44 1621  BEGIN
15:35:44 1622  
15:35:44 1623  	 BEGIN
15:35:44 1624  	   SELECT
15:35:44 1625  	     PRODUCT_OFFERING.ID into temp_product_offering_id
15:35:44 1626  	   FROM
15:35:44 1627  	     PRODUCT_OFFERING
15:35:44 1628  	   WHERE
15:35:44 1629  	     PRODUCT_OFFERING.ID = in_product_offering_id;
15:35:44 1630  	   EXCEPTION
15:35:44 1631  	     WHEN NO_DATA_FOUND THEN
15:35:44 1632  	       RAISE BAD_PRODUCT_OFFERING_ID;
15:35:44 1633  	 END;
15:35:44 1634  
15:35:44 1635  	 OPEN out_result_set FOR
15:35:44 1636  	 SELECT
15:35:44 1637  	   PRODUCT_OFFERING_META_DATA.ID,
15:35:44 1638  	   PRODUCT_OFFERING_META_DATA.NAME,
15:35:44 1639  	   PRODUCT_OFFERING_META_DATA.VALUE,
15:35:44 1640  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
15:35:44 1641  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
15:35:44 1642  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
15:35:44 1643  	 FROM
15:35:44 1644  	   PRODUCT_OFFERING_META_DATA
15:35:44 1645  	 WHERE
15:35:44 1646  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
15:35:44 1647  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
15:35:44 1648  
15:35:44 1649  EXCEPTION
15:35:44 1650  WHEN BAD_PRODUCT_OFFERING_ID THEN
15:35:44 1651  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1652  	   SPROC_NAME, 'No such product offering');
15:35:44 1653  END GET_PRODUCT_OFFERING_META_DATA;
15:35:44 1654  
15:35:44 1655  /******************************************************************************/
15:35:44 1656  
15:35:44 1657  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
15:35:44 1658  /*
15:35:44 1659  Throws exceptions (codes):
15:35:44 1660  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44 1661  */
15:35:44 1662  	 in_offer_chain_1 IN NUMBER,
15:35:44 1663  	 in_offer_chain_2 IN NUMBER,
15:35:44 1664  	 out_result_set   OUT SYS_REFCURSOR
15:35:44 1665  ) AS
15:35:44 1666  BEGIN
15:35:44 1667  
15:35:44 1668  	 OPEN out_result_set FOR
15:35:44 1669  	 SELECT
15:35:44 1670  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
15:35:44 1671  	   COUNT_1 + COUNT_2	    AS "COUNT"
15:35:44 1672  	 FROM
15:35:44 1673  	   (
15:35:44 1674  	     SELECT
15:35:44 1675  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
15:35:44 1676  	       COUNT(*) 		   as "COUNT_1"
15:35:44 1677  	     FROM
15:35:44 1678  	       (
15:35:44 1679  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
15:35:44 1680  	       )
15:35:44 1681  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
15:35:44 1682  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:35:44 1683  	     GROUP BY
15:35:44 1684  	       PRODUCT_OFFERING.PRODUCT_ID
15:35:44 1685  	   )
15:35:44 1686  	   INNER JOIN
15:35:44 1687  	   (
15:35:44 1688  	     SELECT
15:35:44 1689  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
15:35:44 1690  	       COUNT(*) 		   as "COUNT_2"
15:35:44 1691  	     FROM
15:35:44 1692  	       (
15:35:44 1693  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
15:35:44 1694  	       )
15:35:44 1695  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
15:35:44 1696  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:35:44 1697  	     GROUP BY
15:35:44 1698  	       PRODUCT_OFFERING.PRODUCT_ID
15:35:44 1699  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
15:35:44 1700  
15:35:44 1701  END GET_OFF_CHAINS_SAME_PRODUCTS;
15:35:44 1702  
15:35:44 1703  /******************************************************************************/
15:35:44 1704  
15:35:44 1705  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
15:35:44 1706  	 in_offer_chain_id IN NUMBER,
15:35:44 1707  	 in_meta_data_name IN VARCHAR2,
15:35:44 1708  	 out_value	   OUT VARCHAR2
15:35:44 1709  ) AS
15:35:44 1710  BEGIN
15:35:44 1711  	 BEGIN
15:35:44 1712  	   SELECT
15:35:44 1713  	     OFFER_CHAIN_META_DATA.VALUE into out_value
15:35:44 1714  	   FROM
15:35:44 1715  	     OFFER_CHAIN_META_DATA
15:35:44 1716  	   WHERE
15:35:44 1717  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 1718  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
15:35:44 1719  
15:35:44 1720  	   EXCEPTION
15:35:44 1721  	     WHEN NO_DATA_FOUND THEN
15:35:44 1722  	       out_value := NULL;
15:35:44 1723  	 END;
15:35:44 1724  END GET_OFFER_CHAIN_MD_VALUE;
15:35:44 1725  
15:35:44 1726  /******************************************************************************/
15:35:44 1727  
15:35:44 1728  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
15:35:44 1729  	 in_offer_chain_id   IN NUMBER,
15:35:44 1730  	 in_eligibility_name IN VARCHAR2,
15:35:44 1731  	 out_value	     OUT VARCHAR2
15:35:44 1732  ) AS
15:35:44 1733  BEGIN
15:35:44 1734  	 BEGIN
15:35:44 1735  	   SELECT
15:35:44 1736  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
15:35:44 1737  	   FROM
15:35:44 1738  	     OFFER_CHAIN_ELIGIBILITY
15:35:44 1739  	   WHERE
15:35:44 1740  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 1741  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
15:35:44 1742  
15:35:44 1743  	   EXCEPTION
15:35:44 1744  	     WHEN NO_DATA_FOUND THEN
15:35:44 1745  	       out_value := NULL;
15:35:44 1746  	 END;
15:35:44 1747  END GET_OFFER_CHAIN_EL_VALUE;
15:35:44 1748  
15:35:44 1749  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
15:35:44 1750  	 in_offer_id	IN NUMBER,
15:35:44 1751  	 out_result_set OUT SYS_REFCURSOR
15:35:44 1752  ) AS
15:35:44 1753  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
15:35:44 1754  -- VARIABLES
15:35:44 1755  temp_offer_id NUMBER;
15:35:44 1756  -- EXCEPTIONS
15:35:44 1757  BAD_OFFER_ID EXCEPTION;
15:35:44 1758  BEGIN
15:35:44 1759  
15:35:44 1760  	 BEGIN
15:35:44 1761  	   SELECT
15:35:44 1762  	     OFFER.ID into temp_offer_id
15:35:44 1763  	   FROM
15:35:44 1764  	     OFFER
15:35:44 1765  	   WHERE
15:35:44 1766  	     OFFER.ID = in_offer_id;
15:35:44 1767  	   EXCEPTION
15:35:44 1768  	     WHEN NO_DATA_FOUND THEN
15:35:44 1769  	       RAISE BAD_OFFER_ID;
15:35:44 1770  	 END;
15:35:44 1771  
15:35:44 1772  	 OPEN out_result_set FOR
15:35:44 1773  	 SELECT
15:35:44 1774  	   PRODUCT_OFFERING.ID,
15:35:44 1775  	   PRODUCT_OFFERING.PRODUCT_ID,
15:35:44 1776  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
15:35:44 1777  	   PRODUCT_OFFERING.UNIT_PRICE,
15:35:44 1778  	   PRODUCT_OFFERING.QUANTITY,
15:35:44 1779  	   PRODUCT_OFFERING.CREATE_DATE,
15:35:44 1780  	   PRODUCT_OFFERING.CREATED_BY,
15:35:44 1781  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
15:35:44 1782  	 FROM
15:35:44 1783  	   PRODUCT_OFFERING
15:35:44 1784  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:35:44 1785  	 WHERE
15:35:44 1786  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
15:35:44 1787  
15:35:44 1788  EXCEPTION
15:35:44 1789  WHEN BAD_OFFER_ID THEN
15:35:44 1790  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1791  	   SPROC_NAME, 'No such offer');
15:35:44 1792  WHEN OTHERS THEN
15:35:44 1793  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1794  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1795  END GET_OFFER_PRODUCT_OFFERINGS;
15:35:44 1796  
15:35:44 1797  /******************************************************************************/
15:35:44 1798  
15:35:44 1799  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
15:35:44 1800  	 in_meta_data_name  IN VARCHAR2,
15:35:44 1801  	 in_meta_data_value IN VARCHAR2,
15:35:44 1802  	 out_result_set     OUT SYS_REFCURSOR
15:35:44 1803  ) AS
15:35:44 1804  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
15:35:44 1805  -- VARIABLES
15:35:44 1806  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
15:35:44 1807  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
15:35:44 1808  BEGIN
15:35:44 1809  
15:35:44 1810  	 OPEN out_result_set FOR
15:35:44 1811  	 SELECT
15:35:44 1812  	   och.ID,
15:35:44 1813  	   och.NAME,
15:35:44 1814  	   och.DESCRIPTION,
15:35:44 1815  	   och.OFFER_CHAIN_STATUS_ID,
15:35:44 1816  	   PROCS_OFFER_CHAIN_V17.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
15:35:44 1817  	   och.ADOPTABILITY_WINDOW_START_DATE,
15:35:44 1818  	   och.ADOPTABILITY_WINDOW_END_DATE,
15:35:44 1819  	   PROCS_OFFER_CHAIN_V17.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
15:35:44 1820  	   och.IS_GIFT_CERTIFICATE,
15:35:44 1821  	   'false' as comf_offer_chain, -- TODO
15:35:44 1822  	   po.PRODUCT_ID,
15:35:44 1823  	   och.GROUP_ACCOUNT_TYPE_ID
15:35:44 1824  	 FROM
15:35:44 1825  	   OFFER_CHAIN och,
15:35:44 1826  	   OFFER_OFFER_CHAIN ooch,
15:35:44 1827  	   OFFER_PRODUCT_OFFERING opo,
15:35:44 1828  	   PRODUCT_OFFERING po
15:35:44 1829  	 WHERE
15:35:44 1830  	   och.ID = ooch.OFFER_CHAIN_ID
15:35:44 1831  	   and ooch.OFFER_ID = opo.OFFER_ID
15:35:44 1832  	   and opo.PRODUCT_OFFERING_ID = po.ID
15:35:44 1833  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V17.OFFER_CHAIN_ACTIVE
15:35:44 1834  	   and och.id in (
15:35:44 1835  	     SELECT DISTINCT
15:35:44 1836  	       och2.id
15:35:44 1837  	     from
15:35:44 1838  	       offer_chain och2
15:35:44 1839  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
15:35:44 1840  	     where
15:35:44 1841  	       UPPER(ochmd.name) = v_meta_data_name
15:35:44 1842  	       AND UPPER(ochmd.value) = v_meta_data_value
15:35:44 1843  	   );
15:35:44 1844  
15:35:44 1845  EXCEPTION
15:35:44 1846  WHEN OTHERS THEN
15:35:44 1847  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1848  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1849  END GET_OFFER_CHAINS_BY_META_DATA;
15:35:44 1850  
15:35:44 1851  /******************************************************************************/
15:35:44 1852  
15:35:44 1853  PROCEDURE GET_ALL_META_DATA (
15:35:44 1854  	 in_offer_chain_id IN NUMBER,
15:35:44 1855  	 out_result_set    OUT SYS_REFCURSOR
15:35:44 1856  ) AS
15:35:44 1857  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
15:35:44 1858  -- Variables
15:35:44 1859  temp_offer_chain_id NUMBER;
15:35:44 1860  -- Exceptions
15:35:44 1861  BAD_OFFER_CHAIN_ID EXCEPTION;
15:35:44 1862  BEGIN
15:35:44 1863  
15:35:44 1864  	 BEGIN
15:35:44 1865  	   SELECT
15:35:44 1866  	     OCH.ID into temp_offer_chain_id
15:35:44 1867  	   FROM
15:35:44 1868  	     OFFER_CHAIN OCH
15:35:44 1869  	   WHERE
15:35:44 1870  	     OCH.ID = in_offer_chain_id;
15:35:44 1871  	   EXCEPTION
15:35:44 1872  	     WHEN NO_DATA_FOUND THEN
15:35:44 1873  	       RAISE BAD_OFFER_CHAIN_ID;
15:35:44 1874  	 END;
15:35:44 1875  
15:35:44 1876  	 OPEN out_result_set FOR
15:35:44 1877  	 SELECT
15:35:44 1878  	   OCHMD.ID,
15:35:44 1879  	   OCHMD.OFFER_CHAIN_ID,
15:35:44 1880  	   OCHMD.NAME,
15:35:44 1881  	   OCHMD.VALUE,
15:35:44 1882  	   OCHMD.CREATE_DATE,
15:35:44 1883  	   OCHMD.CREATED_BY
15:35:44 1884  	 FROM
15:35:44 1885  	   OFFER_CHAIN_META_DATA OCHMD
15:35:44 1886  	 WHERE
15:35:44 1887  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
15:35:44 1888  
15:35:44 1889  EXCEPTION
15:35:44 1890  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:44 1891  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1892  	   SPROC_NAME, 'No such offer chain', SQLERRM);
15:35:44 1893  WHEN OTHERS THEN
15:35:44 1894  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1895  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1896  END GET_ALL_META_DATA;
15:35:44 1897  
15:35:44 1898  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
15:35:44 1899  	 in_group_id	   IN NUMBER,
15:35:44 1900  	 in_offer_chain_id IN NUMBER,
15:35:44 1901  	 out_is_eligible   OUT NUMBER,
15:35:44 1902  	 out_concurrent_subscription_id OUT NUMBER
15:35:44 1903  ) AS
15:35:44 1904  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
15:35:44 1905  -- Variables
15:35:44 1906  var_account_id  NUMBER;
15:35:44 1907  var_is_eligible NUMBER;
15:35:44 1908  var_is_gc       NUMBER;
15:35:44 1909  -- Exceptions
15:35:44 1910  BAD_GROUP_ID		   EXCEPTION;
15:35:44 1911  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
15:35:44 1912  BAD_OC_ID		   EXCEPTION;
15:35:44 1913  EXCEPTION_MESSAGE	   VARCHAR(1024);
15:35:44 1914  BEGIN
15:35:44 1915  
15:35:44 1916  	 var_is_eligible := GLOBAL_CONSTANTS_V17.TRUE;
15:35:44 1917  
15:35:44 1918  	 out_concurrent_subscription_id := NULL;
15:35:44 1919  
15:35:44 1920  	 BEGIN
15:35:44 1921  	   SELECT
15:35:44 1922  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
15:35:44 1923  	   FROM
15:35:44 1924  	     OFFER_CHAIN OC
15:35:44 1925  	   WHERE
15:35:44 1926  	     OC.ID = in_offer_chain_id;
15:35:44 1927  	   EXCEPTION
15:35:44 1928  	     WHEN NO_DATA_FOUND THEN
15:35:44 1929  	       RAISE BAD_OC_ID;
15:35:44 1930  	 END;
15:35:44 1931  
15:35:44 1932  	 -- only check eligibility if this is not a gift certificate
15:35:44 1933  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
15:35:44 1934  	   BEGIN
15:35:44 1935  	     SELECT
15:35:44 1936  	       A.ID into var_account_id
15:35:44 1937  	     FROM
15:35:44 1938  	       ACCOUNT A
15:35:44 1939  	     WHERE
15:35:44 1940  	       A.GROUP_ID = in_group_id;
15:35:44 1941  	     EXCEPTION
15:35:44 1942  	       WHEN NO_DATA_FOUND THEN
15:35:44 1943  		 RAISE BAD_GROUP_ID;
15:35:44 1944  	   END;
15:35:44 1945  
15:35:44 1946  
15:35:44 1947  	   FOR f_offer_chain IN (
15:35:44 1948  	       SELECT
15:35:44 1949  		 S.ID as SUBSCRIPTION_ID,
15:35:44 1950  		 S.OFFER_CHAIN_ID
15:35:44 1951  	       FROM
15:35:44 1952  		 SUBSCRIPTION S
15:35:44 1953  	       WHERE
15:35:44 1954  		 S.ACCOUNT_ID = var_account_id
15:35:44 1955  		 AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:44 1956  	   )
15:35:44 1957  	   LOOP
15:35:44 1958  	     BEGIN
15:35:44 1959  	       IF (
15:35:44 1960  		 PROCS_OFFER_CHAIN_V17.CHECK_FOR_SAME_PRODUCTS(
15:35:44 1961  		   in_offer_chain_id,
15:35:44 1962  		   f_offer_chain.offer_chain_id,
15:35:44 1963  		   GLOBAL_CONSTANTS_V17.TRUE
15:35:44 1964  		 ) = GLOBAL_CONSTANTS_V17.TRUE
15:35:44 1965  	       ) THEN
15:35:44 1966  		 var_is_eligible := GLOBAL_CONSTANTS_V17.FALSE;
15:35:44 1967  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
15:35:44 1968  	       END IF;
15:35:44 1969  	       EXCEPTION
15:35:44 1970  		 WHEN OTHERS THEN
15:35:44 1971  		   EXCEPTION_MESSAGE := SQLERRM;
15:35:44 1972  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
15:35:44 1973  	     END;
15:35:44 1974  	   END LOOP;
15:35:44 1975  	 END IF;
15:35:44 1976  	 out_is_eligible := var_is_eligible;
15:35:44 1977  
15:35:44 1978  EXCEPTION
15:35:44 1979  WHEN BAD_GROUP_ID THEN
15:35:44 1980  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1981  	   SPROC_NAME, 'No such offer chain', SQLERRM);
15:35:44 1982  WHEN BAD_OC_ID THEN
15:35:44 1983  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 1984  	   SPROC_NAME, 'No such offer chain', SQLERRM);
15:35:44 1985  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
15:35:44 1986  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 1987  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
15:35:44 1988  WHEN OTHERS THEN
15:35:44 1989  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 1990  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 1991  END CHECK_PRODUCT_ELIGIBILITY;
15:35:44 1992  
15:35:44 1993  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:35:44 1994  	 in_offer_chain_id	  IN NUMBER,
15:35:44 1995  	 in_action_name 	  IN VARCHAR2,
15:35:44 1996  	 out_notification_type_id OUT NUMBER
15:35:44 1997  ) AS
15:35:44 1998  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
15:35:44 1999  -- Variables
15:35:44 2000  var_action_id NUMBER;
15:35:44 2001  -- Exceptions
15:35:44 2002  BAD_ACTION_NAME	      EXCEPTION;
15:35:44 2003  MULTIPLY_ACTIONS_FOUND EXCEPTION;
15:35:44 2004  BEGIN
15:35:44 2005  
15:35:44 2006  	 BEGIN
15:35:44 2007  	   SELECT
15:35:44 2008  	     A.ID into var_action_id
15:35:44 2009  	   FROM
15:35:44 2010  	     ACTION A
15:35:44 2011  	   WHERE
15:35:44 2012  	     UPPER(A.NAME) = UPPER(in_action_name);
15:35:44 2013  	   EXCEPTION
15:35:44 2014  	     WHEN NO_DATA_FOUND THEN
15:35:44 2015  	       RAISE BAD_ACTION_NAME;
15:35:44 2016  	     WHEN TOO_MANY_ROWS THEN
15:35:44 2017  	       RAISE MULTIPLY_ACTIONS_FOUND;
15:35:44 2018  	 END;
15:35:44 2019  
15:35:44 2020  	 SELECT
15:35:44 2021  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
15:35:44 2022  	 FROM
15:35:44 2023  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
15:35:44 2024  	 WHERE
15:35:44 2025  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
15:35:44 2026  	   AND OCNT.ACTION_ID = var_action_id;
15:35:44 2027  
15:35:44 2028  EXCEPTION
15:35:44 2029  WHEN NO_DATA_FOUND THEN
15:35:44 2030  	 out_notification_type_id := NULL;
15:35:44 2031  WHEN BAD_ACTION_NAME THEN
15:35:44 2032  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:44 2033  	   SPROC_NAME, 'Bad action name', SQLERRM);
15:35:44 2034  WHEN MULTIPLY_ACTIONS_FOUND THEN
15:35:44 2035  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:44 2036  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
15:35:44 2037  WHEN OTHERS THEN
15:35:44 2038  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 2039  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 2040  END GET_NOTIFICATION_TYPE_ID;
15:35:44 2041  
15:35:44 2042  END PROCS_OFFER_CHAIN_V17;
15:35:44 2043  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.16
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
15:35:44   2  AS
15:35:44   3  	  --------------------------------------------------------------------------------
15:35:44   4  PROCEDURE GATHER_SYNC_EVENTS
15:35:44   5  	  (
15:35:44   6  	      in_last_timestamp TIMESTAMP,
15:35:44   7  	      out_new_timestamp OUT TIMESTAMP)
15:35:44   8  IS
15:35:44   9  BEGIN
15:35:44  10  	  out_new_timestamp := systimestamp;
15:35:44  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
15:35:44  12  END;
15:35:44  13  	  --------------------------------------------------------------------------------
15:35:44  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
15:35:44  15  IS
15:35:44  16  BEGIN
15:35:44  17  	  INSERT
15:35:44  18  	  INTO
15:35:44  19  	      core_owner.polling_sync
15:35:44  20  	      (
15:35:44  21  		  account_id,
15:35:44  22  		  group_id,
15:35:44  23  		  event_type,
15:35:44  24  		  event_date
15:35:44  25  	      )
15:35:44  26  	  select id, group_id, event_type, event_date from (
15:35:44  27  	      SELECT
15:35:44  28  		  a.id,
15:35:44  29  		  a.group_id,
15:35:44  30  		  'I' event_type,
15:35:44  31  		  in_end_ts event_date,
15:35:44  32  		  max(cl.change_time) last_change_time
15:35:44  33  	      FROM
15:35:44  34  		  core_hist_owner.change_log cl,
15:35:44  35  		  core_owner.credit_card cc,
15:35:44  36  		  core_owner.account a
15:35:44  37  	      WHERE
15:35:44  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
15:35:44  39  	      AND cl.item = 'CREDIT_CARD'
15:35:44  40  	      AND cl.id = cc.id
15:35:44  41  	      AND cc.account_id = a.id
15:35:44  42  	      GROUP BY a.id, a.group_id
15:35:44  43  	      UNION ALL
15:35:44  44  	      SELECT
15:35:44  45  		  a.id,
15:35:44  46  		  a.group_id,
15:35:44  47  		  'I',
15:35:44  48  		  in_end_ts,
15:35:44  49  		  max(cl.change_time) last_change_time
15:35:44  50  	      FROM
15:35:44  51  		  core_hist_owner.change_log cl,
15:35:44  52  		  core_owner.paypal p,
15:35:44  53  		  core_owner.account a
15:35:44  54  	      WHERE
15:35:44  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
15:35:44  56  	      AND cl.item = 'PAYPAL'
15:35:44  57  	      AND cl.id = p.id
15:35:44  58  	      AND p.account_id = a.id
15:35:44  59  	      GROUP BY a.id, a.group_id
15:35:44  60  	      UNION ALL
15:35:44  61  	      SELECT
15:35:44  62  		  a.id,
15:35:44  63  		  a.group_id,
15:35:44  64  		  'S',
15:35:44  65  		  in_end_ts,
15:35:44  66  		  max(cl.change_time) last_change_time
15:35:44  67  	      FROM
15:35:44  68  		  core_hist_owner.change_log cl,
15:35:44  69  		  core_owner.subscription s,
15:35:44  70  		  core_owner.account a
15:35:44  71  	      WHERE
15:35:44  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
15:35:44  73  	      AND cl.item = 'SUBSCRIPTION'
15:35:44  74  	      AND cl.id = s.id
15:35:44  75  	      AND s.account_id = a.id
15:35:44  76  	      GROUP BY a.id, a.group_id
15:35:44  77  	      UNION ALL
15:35:44  78  	      SELECT
15:35:44  79  		  a.id,
15:35:44  80  		  a.group_id,
15:35:44  81  		  'G',
15:35:44  82  		  in_end_ts,
15:35:44  83  		  max(cl.change_time) last_change_time
15:35:44  84  	      FROM
15:35:44  85  		  core_hist_owner.change_log cl,
15:35:44  86  		  core_owner.gift_certificate gc,
15:35:44  87  		  core_owner.account a
15:35:44  88  	      WHERE
15:35:44  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
15:35:44  90  	      AND cl.item = 'GIFT_CERTIFICATE'
15:35:44  91  	      AND cl.id = gc.id
15:35:44  92  	      AND gc.purchaser_group_id = a.group_id
15:35:44  93  	      GROUP BY a.id, a.group_id
15:35:44  94  	  ) t
15:35:44  95  	  where not exists (
15:35:44  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
15:35:44  97  	      from polling_sync ps
15:35:44  98  	      where ps.account_id = t.id
15:35:44  99  		and ps.group_id = t.group_id
15:35:44 100  		and ps.event_type = t.event_type
15:35:44 101  		and ps.event_date >= t.last_change_time
15:35:44 102  	  )
15:35:44 103  	  ;
15:35:44 104  END;
15:35:44 105  --------------------------------------------------------------------------------
15:35:44 106  FUNCTION CREATE_NEW_TRANSFER_SET
15:35:44 107  	  (
15:35:44 108  	      in_set_maximum NUMBER)
15:35:44 109  	  RETURN core_owner.polling_sync.set_id%type
15:35:44 110  IS
15:35:44 111  	  pragma autonomous_transaction;
15:35:44 112  	  v_set_id core_owner.polling_sync.set_id%type;
15:35:44 113  BEGIN
15:35:44 114  	  SELECT
15:35:44 115  	      pollsync_setid_seq.nextval
15:35:44 116  	  INTO
15:35:44 117  	      v_set_id
15:35:44 118  	  FROM
15:35:44 119  	      dual;
15:35:44 120  	  update
15:35:44 121  	    core_owner.polling_sync ps
15:35:44 122  	  set
15:35:44 123  	    ps.set_id = v_set_id
15:35:44 124  	  where
15:35:44 125  	    ps.set_id IS NULL and
15:35:44 126  	    rownum <= in_set_maximum
15:35:44 127  	  ;
15:35:44 128  	  COMMIT;
15:35:44 129  	  RETURN v_set_id;
15:35:44 130  END;
15:35:44 131  --------------------------------------------------------------------------------
15:35:44 132  FUNCTION RETREIVE_TRANSFER_SET
15:35:44 133  	  (
15:35:44 134  	      in_set_id core_owner.polling_sync.set_id%type)
15:35:44 135  	  RETURN sys_refcursor
15:35:44 136  IS
15:35:44 137  	  v_refcursor sys_refcursor;
15:35:44 138  BEGIN
15:35:44 139  	  UPDATE
15:35:44 140  	      core_owner.polling_sync ps
15:35:44 141  	  SET
15:35:44 142  	      ps.last_send_date = sysdate,
15:35:44 143  	      ps.num_calls = ps.num_calls + 1
15:35:44 144  	  WHERE
15:35:44 145  	      ps.set_id = in_set_id ;
15:35:44 146  	  OPEN v_refcursor FOR
15:35:44 147  	  SELECT
15:35:44 148  	      ps.set_id,
15:35:44 149  	      ps.group_id,
15:35:44 150  	      ps.event_type,
15:35:44 151  	      ps.event_date
15:35:44 152  	  FROM
15:35:44 153  	      core_owner.polling_sync ps
15:35:44 154  	  WHERE
15:35:44 155  	      ps.set_id = in_set_id
15:35:44 156  	  AND ps.group_id IS NOT NULL ;
15:35:44 157  	  RETURN v_refcursor;
15:35:44 158  END;
15:35:44 159  --------------------------------------------------------------------------------
15:35:44 160  PROCEDURE GET_TRANSFER_SET
15:35:44 161  	  (
15:35:44 162  	      in_set_maximum NUMBER,
15:35:44 163  	      in_max_retries NUMBER,
15:35:44 164  	      out_refcursor OUT sys_refcursor)
15:35:44 165  IS
15:35:44 166  	  v_set_id core_owner.polling_sync.set_id%type;
15:35:44 167  BEGIN
15:35:44 168  	  /* Look for previously sent but unconfirmed sets and
15:35:44 169  	  send again until max_retries calls */
15:35:44 170  	  FOR x IN
15:35:44 171  	  (
15:35:44 172  	      SELECT
15:35:44 173  		  ps.set_id,
15:35:44 174  		  COUNT( *) set_size
15:35:44 175  	      FROM
15:35:44 176  		  core_owner.polling_sync ps
15:35:44 177  	      WHERE
15:35:44 178  		  ps.event_date > sysdate - 14
15:35:44 179  	      AND ps.confirm_date IS NULL
15:35:44 180  	      AND ps.last_send_date IS NOT NULL
15:35:44 181  	      AND ps.num_calls < in_max_retries
15:35:44 182  	      GROUP BY
15:35:44 183  		  ps.set_id
15:35:44 184  	      ORDER BY
15:35:44 185  		  ps.set_id
15:35:44 186  	  )
15:35:44 187  	  LOOP
15:35:44 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
15:35:44 189  	      RETURN;
15:35:44 190  	  END LOOP;
15:35:44 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
15:35:44 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
15:35:44 193  	  RETURN;
15:35:44 194  END;
15:35:44 195  --------------------------------------------------------------------------------
15:35:44 196  PROCEDURE CONFIRM_TRANSFER_SET
15:35:44 197  	  (
15:35:44 198  	      in_set_id core_owner.polling_sync.set_id%type)
15:35:44 199  IS
15:35:44 200  	  v_unconfirmable EXCEPTION;
15:35:44 201  BEGIN
15:35:44 202  	  UPDATE
15:35:44 203  	      core_owner.polling_sync ps
15:35:44 204  	  SET
15:35:44 205  	      ps.confirm_date = systimestamp
15:35:44 206  	  WHERE
15:35:44 207  	      ps.set_id = in_set_id
15:35:44 208  	  AND ps.confirm_date IS NULL ;
15:35:44 209  	  IF(sql%rowcount < 1) THEN
15:35:44 210  	      raise v_unconfirmable;
15:35:44 211  	  END IF;
15:35:44 212  END;
15:35:44 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
15:35:44 214  IS
15:35:44 215  BEGIN
15:35:44 216  	  UPDATE POLLING_SYNC_LASTRUN
15:35:44 217  	  SET last_run = current_timestamp;
15:35:44 218  	  IF ( sql%rowcount = 0 )
15:35:44 219  	  THEN
15:35:44 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
15:35:44 221  	  END if;
15:35:44 222  	  COMMIT;
15:35:44 223  END;
15:35:44 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
15:35:44 225  IS
15:35:44 226  BEGIN
15:35:44 227  	  SELECT LAST_RUN INTO ts
15:35:44 228  	  FROM POLLING_SYNC_LASTRUN
15:35:44 229  	  WHERE ROWNUM < 2;
15:35:44 230  EXCEPTION
15:35:44 231  	WHEN NO_DATA_FOUND
15:35:44 232  	THEN
15:35:44 233  	  ts := current_timestamp;
15:35:44 234  END;
15:35:44 235  END PROCS_POLLING_SYNC;
15:35:44 236  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V17" AS
15:35:44   2  
15:35:44   3  PROCEDURE GET_PRODUCTS (
15:35:44   4  /*
15:35:44   5  Throws exceptions:
15:35:44   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44   7  */
15:35:44   8  	in_status_id   IN  NUMBER,
15:35:44   9  	out_result_set OUT SYS_REFCURSOR
15:35:44  10  ) AS
15:35:44  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
15:35:44  12  BEGIN
15:35:44  13  	OPEN out_result_set FOR
15:35:44  14  	SELECT
15:35:44  15  	  PRODUCT.ID,
15:35:44  16  	  PRODUCT.NAME,
15:35:44  17  	  PRODUCT.UNIT_PRICE,
15:35:44  18  	  PRODUCT.PRODUCTION_COST,
15:35:44  19  	  PRODUCT.CREATE_DATE,
15:35:44  20  	  PRODUCT.CREATED_BY,
15:35:44  21  	  PRODUCT.PRODUCT_STATUS_ID,
15:35:44  22  	  PRODUCT.PRODUCT_URI
15:35:44  23  	FROM
15:35:44  24  	  PRODUCT
15:35:44  25   WHERE
15:35:44  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
15:35:44  27  EXCEPTION
15:35:44  28  WHEN OTHERS THEN
15:35:44  29  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44  31  END GET_PRODUCTS;
15:35:44  32  
15:35:44  33  /******************************************************************************/
15:35:44  34  
15:35:44  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
15:35:44  36  	in_product_offering_id	IN NUMBER,
15:35:44  37  	out_result_set OUT SYS_REFCURSOR
15:35:44  38  ) AS
15:35:44  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
15:35:44  40  -- VARIABLES
15:35:44  41  temp_product_offering_id NUMBER;
15:35:44  42  -- EXCEPTIONS
15:35:44  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
15:35:44  44  BEGIN
15:35:44  45  
15:35:44  46  	-- Check that product offering exists
15:35:44  47  	BEGIN
15:35:44  48  	  SELECT
15:35:44  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
15:35:44  50  	  FROM
15:35:44  51  	    PRODUCT_OFFERING
15:35:44  52  	  WHERE
15:35:44  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
15:35:44  54  	  EXCEPTION
15:35:44  55  	    WHEN NO_DATA_FOUND THEN
15:35:44  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
15:35:44  57  	END;
15:35:44  58  
15:35:44  59  	OPEN out_result_set FOR
15:35:44  60  	SELECT
15:35:44  61  	  PRODUCT_OFFERING_META_DATA.ID,
15:35:44  62  	  PRODUCT_OFFERING_META_DATA.NAME,
15:35:44  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
15:35:44  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
15:35:44  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
15:35:44  66  	FROM
15:35:44  67  	  PRODUCT_OFFERING_META_DATA
15:35:44  68  	WHERE
15:35:44  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
15:35:44  70  
15:35:44  71  EXCEPTION
15:35:44  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
15:35:44  73  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44  74  	  SPROC_NAME, 'No such product offering id');
15:35:44  75  WHEN OTHERS THEN
15:35:44  76  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44  78  END GET_PRODUCT_OFFERING_META_DATA;
15:35:44  79  
15:35:44  80  /******************************************************************************/
15:35:44  81  
15:35:44  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
15:35:44  83  /*
15:35:44  84  Throws exceptions:
15:35:44  85  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:44  86  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:44  87  */
15:35:44  88  	in_product_id	    IN NUMBER,
15:35:44  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
15:35:44  90  	out_result_set	    OUT SYS_REFCURSOR
15:35:44  91  ) AS
15:35:44  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
15:35:44  93  -- VARIABLES
15:35:44  94  temp_product_id NUMBER;
15:35:44  95  -- EXCEPTIONS
15:35:44  96  BAD_PRODUCT_ID EXCEPTION;
15:35:44  97  BEGIN
15:35:44  98  
15:35:44  99  	BEGIN
15:35:44 100  	  SELECT
15:35:44 101  	    PRODUCT.ID into temp_product_id
15:35:44 102  	  FROM
15:35:44 103  	    PRODUCT
15:35:44 104  	  WHERE
15:35:44 105  	    PRODUCT.ID = in_product_id;
15:35:44 106  	  EXCEPTION
15:35:44 107  	    WHEN NO_DATA_FOUND THEN
15:35:44 108  	      RAISE BAD_PRODUCT_ID;
15:35:44 109  	END;
15:35:44 110  
15:35:44 111  	OPEN out_result_set FOR
15:35:44 112  	SELECT
15:35:44 113  	  PRODUCT_ELIGIBILITY.ID
15:35:44 114  	FROM
15:35:44 115  	  PRODUCT_ELIGIBILITY
15:35:44 116  	WHERE
15:35:44 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
15:35:44 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
15:35:44 119  
15:35:44 120  EXCEPTION
15:35:44 121  WHEN BAD_PRODUCT_ID THEN
15:35:44 122  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 123  	  SPROC_NAME, 'No such product');
15:35:44 124  WHEN OTHERS THEN
15:35:44 125  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
15:35:44 128  
15:35:44 129  /******************************************************************************/
15:35:44 130  
15:35:44 131  PROCEDURE GET_PRODUCT_BY_ID (
15:35:44 132  	in_product_id  IN NUMBER,
15:35:44 133  	out_result_set OUT SYS_REFCURSOR
15:35:44 134  ) AS
15:35:44 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
15:35:44 136  -- VARIABLES
15:35:44 137  temp_product_id NUMBER;
15:35:44 138  -- EXCEPTIONS
15:35:44 139  BAD_PRODUCT_ID EXCEPTION;
15:35:44 140  BEGIN
15:35:44 141  
15:35:44 142  	BEGIN
15:35:44 143  	  SELECT
15:35:44 144  	    PRODUCT.ID into temp_product_id
15:35:44 145  	  FROM
15:35:44 146  	    PRODUCT
15:35:44 147  	  WHERE
15:35:44 148  	    PRODUCT.ID = in_product_id;
15:35:44 149  	  EXCEPTION
15:35:44 150  	    WHEN NO_DATA_FOUND THEN
15:35:44 151  	      RAISE BAD_PRODUCT_ID;
15:35:44 152  	END;
15:35:44 153  
15:35:44 154  	OPEN out_result_set FOR
15:35:44 155  	SELECT
15:35:44 156  	  PRODUCT.ID,
15:35:44 157  	  PRODUCT.NAME,
15:35:44 158  	  PRODUCT.PRODUCT_STATUS_ID,
15:35:44 159  	  PRODUCT.PRODUCT_URI,
15:35:44 160  	  PRODUCT.PRODUCTION_COST,
15:35:44 161  	  PRODUCT.UNIT_PRICE,
15:35:44 162  	  PRODUCT.CREATE_DATE,
15:35:44 163  	  PRODUCT.CREATED_BY
15:35:44 164  	FROM
15:35:44 165  	  PRODUCT
15:35:44 166  	WHERE
15:35:44 167  	  PRODUCT.ID = in_product_id;
15:35:44 168  
15:35:44 169  EXCEPTION
15:35:44 170  WHEN BAD_PRODUCT_ID THEN
15:35:44 171  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 172  	  SPROC_NAME, 'No such product');
15:35:44 173  WHEN OTHERS THEN
15:35:44 174  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 176  END GET_PRODUCT_BY_ID;
15:35:44 177  
15:35:44 178  /******************************************************************************/
15:35:44 179  
15:35:44 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
15:35:44 181  	in_line_item_id IN NUMBER,
15:35:44 182  	out_result_set	OUT SYS_REFCURSOR
15:35:44 183  ) AS
15:35:44 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
15:35:44 185  -- VARIABLES
15:35:44 186  temp_line_item_id NUMBER;
15:35:44 187  -- EXCEPTIONS
15:35:44 188  BAD_LINE_ITEM_ID EXCEPTION;
15:35:44 189  BEGIN
15:35:44 190  
15:35:44 191  	BEGIN
15:35:44 192  	  SELECT
15:35:44 193  	    LINE_ITEM.ID into temp_line_item_id
15:35:44 194  	  FROM
15:35:44 195  	    LINE_ITEM
15:35:44 196  	  WHERE
15:35:44 197  	    LINE_ITEM.ID = in_line_item_id;
15:35:44 198  	  EXCEPTION
15:35:44 199  	    WHEN NO_DATA_FOUND THEN
15:35:44 200  	      RAISE BAD_LINE_ITEM_ID;
15:35:44 201  	END;
15:35:44 202  
15:35:44 203  	OPEN out_result_set FOR
15:35:44 204  	SELECT
15:35:44 205  	  PRODUCT_OFFERING.ID,
15:35:44 206  	  PRODUCT_OFFERING.PRODUCT_ID,
15:35:44 207  	  PRODUCT_OFFERING.QUANTITY,
15:35:44 208  	  PRODUCT_OFFERING.UNIT_PRICE,
15:35:44 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
15:35:44 210  	  PRODUCT_OFFERING.CREATE_DATE,
15:35:44 211  	  PRODUCT_OFFERING.CREATED_BY,
15:35:44 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
15:35:44 213  	  CAPABILITY.ID CAP_ID,
15:35:44 214  	  CAPABILITY.CODE CAP_CODE,
15:35:44 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
15:35:44 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
15:35:44 217  	FROM
15:35:44 218  	  PRODUCT_OFFERING
15:35:44 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
15:35:44 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
15:35:44 221  	WHERE
15:35:44 222  	  LINE_ITEM.ID = in_line_item_id;
15:35:44 223  
15:35:44 224  EXCEPTION
15:35:44 225  WHEN BAD_LINE_ITEM_ID THEN
15:35:44 226  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 227  	  SPROC_NAME, 'No such line item');
15:35:44 228  WHEN OTHERS THEN
15:35:44 229  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
15:35:44 232  
15:35:44 233  /******************************************************************************/
15:35:44 234  
15:35:44 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
15:35:44 236  	in_product_offering_id IN NUMBER,
15:35:44 237  	out_result_set	OUT SYS_REFCURSOR
15:35:44 238  ) AS
15:35:44 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
15:35:44 240  BEGIN
15:35:44 241  	OPEN out_result_set FOR
15:35:44 242  	SELECT
15:35:44 243  	  PRODUCT_OFFERING.ID,
15:35:44 244  	  PRODUCT_OFFERING.PRODUCT_ID,
15:35:44 245  	  PRODUCT_OFFERING.QUANTITY,
15:35:44 246  	  PRODUCT_OFFERING.UNIT_PRICE,
15:35:44 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
15:35:44 248  	  PRODUCT_OFFERING.CREATE_DATE,
15:35:44 249  	  PRODUCT_OFFERING.CREATED_BY,
15:35:44 250  	  CAPABILITY.ID CAP_ID,
15:35:44 251  	  CAPABILITY.CODE CAP_CODE,
15:35:44 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
15:35:44 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
15:35:44 254  	FROM
15:35:44 255  	  PRODUCT_OFFERING
15:35:44 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
15:35:44 257  	WHERE
15:35:44 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
15:35:44 259  
15:35:44 260  EXCEPTION
15:35:44 261  WHEN OTHERS THEN
15:35:44 262  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 264  END GET_PRD_OFFERING_BY_ID;
15:35:44 265  
15:35:44 266  /******************************************************************************/
15:35:44 267  
15:35:44 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
15:35:44 269  	in_product_offering_id IN NUMBER,
15:35:44 270  	out_result_set	       OUT SYS_REFCURSOR
15:35:44 271  ) AS
15:35:44 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
15:35:44 273  -- VARIABLES
15:35:44 274  temp_product_offering_id NUMBER;
15:35:44 275  -- EXCEPTIONS
15:35:44 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
15:35:44 277  BEGIN
15:35:44 278  
15:35:44 279  	BEGIN
15:35:44 280  	  SELECT
15:35:44 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
15:35:44 282  	  FROM
15:35:44 283  	    PRODUCT_OFFERING
15:35:44 284  	  WHERE
15:35:44 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
15:35:44 286  	  EXCEPTION
15:35:44 287  	    WHEN NO_DATA_FOUND THEN
15:35:44 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
15:35:44 289  	END;
15:35:44 290  
15:35:44 291  	OPEN out_result_set FOR
15:35:44 292  	SELECT
15:35:44 293  	  DISCOUNT.ID,
15:35:44 294  	  DISCOUNT.NAME,
15:35:44 295  	  DISCOUNT.FIXED_AMOUNT,
15:35:44 296  	  DISCOUNT.PERCENT_AMOUNT,
15:35:44 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
15:35:44 298  	  DISCOUNT.CREATE_DATE,
15:35:44 299  	  DISCOUNT.CREATED_BY,
15:35:44 300  	  DISCOUNT.DESCRIPTION
15:35:44 301  	FROM
15:35:44 302  	  DISCOUNT
15:35:44 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
15:35:44 304  	WHERE
15:35:44 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
15:35:44 306  
15:35:44 307  EXCEPTION
15:35:44 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
15:35:44 309  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:44 310  	  SPROC_NAME, 'No such product offering');
15:35:44 311  WHEN OTHERS THEN
15:35:44 312  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:44 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:44 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
15:35:44 315  
15:35:44 316  END PROCS_PRODUCT_V17;
15:35:44 317  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:35:44 SQL> 
15:35:44 SQL> CREATE OR REPLACE
15:35:44   2  PACKAGE BODY PROCS_REPORTING AS
15:35:44   3  
15:35:44   4  ----
15:35:44   5  --------------------------------------------------------------------------------
15:35:44   6  ----
15:35:44   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44   8  	  is
15:35:44   9  	  begin
15:35:44  10  	      open out_cursor for
15:35:44  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
15:35:44  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
15:35:44  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
15:35:44  14  			,c.create_date, c.update_date
15:35:44  15  		  from charge c
15:35:44  16  		      ,charge_status cs
15:35:44  17  		      ,instrument_type it
15:35:44  18  		      ,ids
15:35:44  19  		  where c.id = ids.id
15:35:44  20  		    and c.charge_status_id = cs.id
15:35:44  21  		    and c.instrument_type_id = it.id
15:35:44  22  	      ;
15:35:44  23  	  end;
15:35:44  24  ----
15:35:44  25  --------------------------------------------------------------------------------
15:35:44  26  ----
15:35:44  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44  28  	  is
15:35:44  29  	  begin
15:35:44  30  	      open out_cursor for
15:35:44  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
15:35:44  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
15:35:44  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date
15:35:44  35  		  from license l
15:35:44  36  		      ,license_status ls
15:35:44  37  		      ,ids
15:35:44  38  		  where l.id = ids.id
15:35:44  39  		    and l.license_status_id = ls.id
15:35:44  40  	      ;
15:35:44  41  	  end;
15:35:44  42  ----
15:35:44  43  --------------------------------------------------------------------------------
15:35:44  44  ----
15:35:44  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44  46  	  is
15:35:44  47  	  begin
15:35:44  48  	      open out_cursor for
15:35:44  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
15:35:44  50  		  select
15:35:44  51  		    i.id invoice_id,
15:35:44  52  		    i.create_date,
15:35:44  53  		    i.update_date,
15:35:44  54  		    i.invoice_status_id,
15:35:44  55  		    istat.value invoice_status,
15:35:44  56  		    NVL(
15:35:44  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
15:35:44  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
15:35:44  59  		    ) offer_chain_id
15:35:44  60  		  from	   invoice i
15:35:44  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
15:35:44  62  		      join ids			on ids.id = i.id
15:35:44  63  		  where 1 = 1
15:35:44  64  	      ;
15:35:44  65  	  end;
15:35:44  66  ----
15:35:44  67  --------------------------------------------------------------------------------
15:35:44  68  ----
15:35:44  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44  70  	  is
15:35:44  71  	  begin
15:35:44  72  	      open out_cursor for
15:35:44  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
15:35:44  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
15:35:44  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
15:35:44  76  		  from line_item li
15:35:44  77  		    , ids
15:35:44  78  		  where li.id = ids.id
15:35:44  79  	      ;
15:35:44  80  	  end;
15:35:44  81  ----
15:35:44  82  --------------------------------------------------------------------------------
15:35:44  83  ----
15:35:44  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44  85  	  is
15:35:44  86  	  begin
15:35:44  87  	      open out_cursor for
15:35:44  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
15:35:44  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
15:35:44  91  			,a.instrument_id, a.tax_exempt_id
15:35:44  92  			-- need system category??
15:35:44  93  		  from account a
15:35:44  94  		      ,account_status astat
15:35:44  95  		      ,instrument_type it
15:35:44  96  		      , ids
15:35:44  97  		  where a.id = ids.id
15:35:44  98  		    and astat.id = a.account_status_id
15:35:44  99  		    and a.instrument_type_id = it.id(+)
15:35:44 100  	      ;
15:35:44 101  	  end;
15:35:44 102  ----
15:35:44 103  --------------------------------------------------------------------------------
15:35:44 104  ----
15:35:44 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 106  	  is
15:35:44 107  	  begin
15:35:44 108  	      open out_cursor for
15:35:44 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
15:35:44 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
15:35:44 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
15:35:44 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
15:35:44 114  		  from subscription s
15:35:44 115  		      ,subscription_status ss
15:35:44 116  		      ,subscription_cancel_reason sct
15:35:44 117  		      ,instrument_type it
15:35:44 118  		      , ids
15:35:44 119  		  where s.id = ids.id
15:35:44 120  		    and ss.id = s.subscription_status_id
15:35:44 121  		    and s.instrument_type_id = it.id
15:35:44 122  		    and sct.id(+) = s.sct_id
15:35:44 123  	      ;
15:35:44 124  	  end;
15:35:44 125  ----
15:35:44 126  --------------------------------------------------------------------------------
15:35:44 127  ----
15:35:44 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 129  	  is
15:35:44 130  	  begin
15:35:44 131  	      open out_cursor for
15:35:44 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 133  		  select t.id transaction_id, t.transaction_amount
15:35:44 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
15:35:44 135  			,t.create_date, t.update_date, t.is_settled
15:35:44 136  		  from transaction t
15:35:44 137  		      ,transaction_status ts
15:35:44 138  		      , ids
15:35:44 139  		  where t.id = ids.id
15:35:44 140  		    and t.transaction_status_id = ts.id
15:35:44 141  	      ;
15:35:44 142  	  end;
15:35:44 143  ----
15:35:44 144  --------------------------------------------------------------------------------
15:35:44 145  ----
15:35:44 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 147  	  is
15:35:44 148  	  begin
15:35:44 149  	      open out_cursor for
15:35:44 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
15:35:44 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
15:35:44 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
15:35:44 154  			,oc.billing_source_id, bs.name billing_source_name
15:35:44 155  			,oc.is_seat_license,oc.group_account_type_id
15:35:44 156  		  from offer_chain oc
15:35:44 157  		      , offer_chain_status ocs
15:35:44 158  		      , ids
15:35:44 159  		      , vendor_source vs
15:35:44 160  		      , billing_source bs
15:35:44 161  		  where oc.id = ids.id
15:35:44 162  		    and oc.offer_chain_status_id = ocs.id
15:35:44 163  		    and oc.vendor_source_id = vs.id
15:35:44 164  		    and oc.billing_source_id = bs.id
15:35:44 165  	      ;
15:35:44 166  	  end;
15:35:44 167  ----
15:35:44 168  --------------------------------------------------------------------------------
15:35:44 169  ----
15:35:44 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 171  	  is
15:35:44 172  	  begin
15:35:44 173  	      open out_cursor for
15:35:44 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
15:35:44 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
15:35:44 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
15:35:44 177  		  from offer_offer_chain ooc
15:35:44 178  		  , ids
15:35:44 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
15:35:44 180  	      ;
15:35:44 181  	  end;
15:35:44 182  ----
15:35:44 183  --------------------------------------------------------------------------------
15:35:44 184  ----
15:35:44 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 186  	  is
15:35:44 187  	  begin
15:35:44 188  	      open out_cursor for
15:35:44 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
15:35:44 191  		  from offer o
15:35:44 192  		      ,offer_status os
15:35:44 193  		      , ids
15:35:44 194  		  where o.id = ids.id
15:35:44 195  		    and o.offer_status_id = os.id
15:35:44 196  	      ;
15:35:44 197  	  end;
15:35:44 198  ----
15:35:44 199  --------------------------------------------------------------------------------
15:35:44 200  ----
15:35:44 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 202  	  is
15:35:44 203  	  begin
15:35:44 204  	      open out_cursor for
15:35:44 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
15:35:44 207  			 ,gc.expiration_date, gc.purchase_date
15:35:44 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
15:35:44 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
15:35:44 210  			 ,recipient_address_id
15:35:44 211  			 ,redeemer_address_id
15:35:44 212  			 ,recipient_notify_date
15:35:44 213  			 ,recipient_name
15:35:44 214  			 ,redemption_date
15:35:44 215  			 ,recipient_email
15:35:44 216  		  from gift_certificate gc
15:35:44 217  		      ,gift_certificate_status gcs
15:35:44 218  		      , ids
15:35:44 219  		  where gc.id = ids.id
15:35:44 220  		    and gc.gift_certificate_status_id = gcs.id
15:35:44 221  	      ;
15:35:44 222  	  end;
15:35:44 223  ----
15:35:44 224  --------------------------------------------------------------------------------
15:35:44 225  ----
15:35:44 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 227  	  is
15:35:44 228  	  begin
15:35:44 229  	      open out_cursor for
15:35:44 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
15:35:44 232  		  from product_offering po
15:35:44 233  		  , ids
15:35:44 234  		  where po.id = ids.id
15:35:44 235  	      ;
15:35:44 236  	  end;
15:35:44 237  ----
15:35:44 238  --------------------------------------------------------------------------------
15:35:44 239  ----
15:35:44 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 241  	  is
15:35:44 242  	  begin
15:35:44 243  	      open out_cursor for
15:35:44 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
15:35:44 246  			,product_uri, p.create_date
15:35:44 247  		  from product p
15:35:44 248  		      ,product_status ps
15:35:44 249  		      , ids
15:35:44 250  		  where p.id = ids.id
15:35:44 251  		    and p.product_status_id = ps.id
15:35:44 252  	      ;
15:35:44 253  	  end;
15:35:44 254  ----
15:35:44 255  --------------------------------------------------------------------------------
15:35:44 256  ----
15:35:44 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 258  	  is
15:35:44 259  	  begin
15:35:44 260  	      open out_cursor for
15:35:44 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
15:35:44 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
15:35:44 263  		  from offer_product_offering opo
15:35:44 264  		  , ids
15:35:44 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
15:35:44 266  	      ;
15:35:44 267  	  end;
15:35:44 268  ----
15:35:44 269  --------------------------------------------------------------------------------
15:35:44 270  ----
15:35:44 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 272  	  is
15:35:44 273  	  begin
15:35:44 274  	      open out_cursor for
15:35:44 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
15:35:44 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
15:35:44 277  		  from discount_product_offering dpo
15:35:44 278  		  , ids
15:35:44 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
15:35:44 280  	      ;
15:35:44 281  	  end;
15:35:44 282  ----
15:35:44 283  --------------------------------------------------------------------------------
15:35:44 284  ----
15:35:44 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 286  	  is
15:35:44 287  	  begin
15:35:44 288  	      open out_cursor for
15:35:44 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
15:35:44 291  			,d.discount_type_id, dt.value discount_type, d.create_date
15:35:44 292  		  from discount d
15:35:44 293  		      ,discount_type dt
15:35:44 294  		      , ids
15:35:44 295  		  where d.id = ids.id
15:35:44 296  		    and d.discount_type_id = dt.id
15:35:44 297  	      ;
15:35:44 298  	  end;
15:35:44 299  ----
15:35:44 300  --------------------------------------------------------------------------------
15:35:44 301  ----
15:35:44 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 303  	  is
15:35:44 304  	  begin
15:35:44 305  	      open out_cursor for
15:35:44 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
15:35:44 308  		  from product_eligibility pg
15:35:44 309  		  , ids
15:35:44 310  		  where pg.id = ids.id
15:35:44 311  	      ;
15:35:44 312  	  end;
15:35:44 313  ----
15:35:44 314  --------------------------------------------------------------------------------
15:35:44 315  ----
15:35:44 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 317  	  is
15:35:44 318  	  begin
15:35:44 319  	      open out_cursor for
15:35:44 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
15:35:44 322  		  from offer_chain_eligibility oce
15:35:44 323  		  , ids
15:35:44 324  		  where oce.id = ids.id
15:35:44 325  	      ;
15:35:44 326  	  end;
15:35:44 327  ----
15:35:44 328  --------------------------------------------------------------------------------
15:35:44 329  ----
15:35:44 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 331  	  is
15:35:44 332  	  begin
15:35:44 333  	      open out_cursor for
15:35:44 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
15:35:44 336  		  from offer_chain_meta_data ocm
15:35:44 337  		  , ids
15:35:44 338  		  where ocm.id = ids.id
15:35:44 339  	      ;
15:35:44 340  	  end;
15:35:44 341  ----
15:35:44 342  --------------------------------------------------------------------------------
15:35:44 343  ----
15:35:44 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 345  	  is
15:35:44 346  	  begin
15:35:44 347  	      open out_cursor for
15:35:44 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
15:35:44 350  		  from product_offering_meta_data pom
15:35:44 351  		  , ids
15:35:44 352  		  where pom.id = ids.id
15:35:44 353  	      ;
15:35:44 354  	  end;
15:35:44 355  ----
15:35:44 356  --------------------------------------------------------------------------------
15:35:44 357  ----
15:35:44 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 359  	  is
15:35:44 360  	  begin
15:35:44 361  	      open out_cursor for
15:35:44 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
15:35:44 364  		  from subscription_meta_data sm
15:35:44 365  		  , ids
15:35:44 366  		  where sm.id = ids.id
15:35:44 367  	      ;
15:35:44 368  	  end;
15:35:44 369  ----
15:35:44 370  --------------------------------------------------------------------------------
15:35:44 371  ----
15:35:44 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 373  	  is
15:35:44 374  	  begin
15:35:44 375  	      open out_cursor for
15:35:44 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
15:35:44 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
15:35:44 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
15:35:44 380  		  from credit_card cc
15:35:44 381  		      ,credit_card_type cct
15:35:44 382  		      ,credit_card_status ccs
15:35:44 383  		      , ids
15:35:44 384  		  where cc.id = ids.id
15:35:44 385  		    and cc.credit_card_type_id = cct.id(+)
15:35:44 386  		    and cc.credit_card_status_id = ccs.id
15:35:44 387  	      ;
15:35:44 388  	  end;
15:35:44 389  ----
15:35:44 390  --------------------------------------------------------------------------------
15:35:44 391  ----
15:35:44 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 393  	  is
15:35:44 394  	  begin
15:35:44 395  	      open out_cursor for
15:35:44 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
15:35:44 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
15:35:44 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
15:35:44 400  			,ta.create_date
15:35:44 401  		  from transaction_attempt ta
15:35:44 402  		      ,transaction_attempt_status tas
15:35:44 403  		      , ids
15:35:44 404  		  where ta.id = ids.id
15:35:44 405  		    and ta.transaction_attempt_status_id = tas.id
15:35:44 406  	      ;
15:35:44 407  	  end;
15:35:44 408  ----
15:35:44 409  --------------------------------------------------------------------------------
15:35:44 410  ----
15:35:44 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 412  	  is
15:35:44 413  	  begin
15:35:44 414  	      open out_cursor for
15:35:44 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
15:35:44 417  			,ia.adjustment_date, ia.create_date
15:35:44 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
15:35:44 419  		  , ids
15:35:44 420  		  where ia.id = ids.id
15:35:44 421  		  and ir.id = ia.invoice_adjustment_reason_id
15:35:44 422  	      ;
15:35:44 423  	  end;
15:35:44 424  ----
15:35:44 425  --------------------------------------------------------------------------------
15:35:44 426  ----
15:35:44 427  
15:35:44 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 429  	  is
15:35:44 430  	  begin
15:35:44 431  	      open out_cursor for
15:35:44 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
15:35:44 434  		  from line_item_adjustment lia
15:35:44 435  		  , ids
15:35:44 436  		  where lia.id = ids.id
15:35:44 437  	      ;
15:35:44 438  	  end;
15:35:44 439  ----
15:35:44 440  --------------------------------------------------------------------------------
15:35:44 441  ----
15:35:44 442  
15:35:44 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 444  	  is
15:35:44 445  	  begin
15:35:44 446  	      open out_cursor for
15:35:44 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 448  		  select
15:35:44 449  		    tax.id tax_id,
15:35:44 450  		    ttype.code tax_type,
15:35:44 451  		    tax.calculated_amount,
15:35:44 452  		    tax.create_date,
15:35:44 453  		    tax.line_item_id,
15:35:44 454  		    tax.effective_rate,
15:35:44 455  		    tax.taxable_amount,
15:35:44 456  		    tax.tax_rule_id,
15:35:44 457  		    j.name jurisdiction_level,
15:35:44 458  		    tax.jurisdiction_name,
15:35:44 459  		    tax.jurisdiction_id,
15:35:44 460  		    tax.ext_tax_type,
15:35:44 461  		    tax.ext_result,
15:35:44 462  		    tax.imposition_type,
15:35:44 463  		    tax.imposition
15:35:44 464  		  from tax
15:35:44 465  		  , tax_type ttype
15:35:44 466  		  , jurisdiction_level j
15:35:44 467  		  , ids
15:35:44 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
15:35:44 469  	      ;
15:35:44 470  	  end;
15:35:44 471  ----
15:35:44 472  --------------------------------------------------------------------------------
15:35:44 473  ----
15:35:44 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:35:44 475  	  is
15:35:44 476  	  begin
15:35:44 477  	      open out_cursor for
15:35:44 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
15:35:44 479  		  select
15:35:44 480  		    tax.id tad_adjustment_id,
15:35:44 481  		    tax.tax_id tax_id,
15:35:44 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
15:35:44 483  		    tax.amount tax_amount,
15:35:44 484  		    tax.create_date create_date
15:35:44 485  		  from tax_adjustment tax
15:35:44 486  		  , ids
15:35:44 487  		  where tax.id = ids.id
15:35:44 488  	      ;
15:35:44 489  	  end;
15:35:44 490  ----
15:35:44 491  --------------------------------------------------------------------------------
15:35:44 492  ----
15:35:44 493  /**/
15:35:44 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 495  	  BEGIN
15:35:44 496  	    OPEN OUT_CURSOR FOR
15:35:44 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 498  	    SELECT
15:35:44 499  		t.id rcn_ext_source_log_id
15:35:44 500  	      , t.extraction_timestamp
15:35:44 501  	      , t.report_date
15:35:44 502  	      , t.report_generation_datetime
15:35:44 503  	      , t.record_type
15:35:44 504  	      , t.report_file_name
15:35:44 505  	      , t.create_date
15:35:44 506  	      , t.created_by
15:35:44 507  	    FROM rcn_ext_source_log t, ids
15:35:44 508  	    WHERE ids.id = t.id;
15:35:44 509  	  END;
15:35:44 510  
15:35:44 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 512  	  BEGIN
15:35:44 513  	    OPEN OUT_CURSOR FOR
15:35:44 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 515  	    SELECT
15:35:44 516  		t.id rcn_cpt_svc_chg_dtl_id
15:35:44 517  	      , t.rcn_ext_source_log_id
15:35:44 518  	      , t.record_type
15:35:44 519  	      , t.category
15:35:44 520  	      , t.sub_category
15:35:44 521  	      , t.entity_type
15:35:44 522  	      , t.entity_number
15:35:44 523  	      , t.funds_transfer_inst_number
15:35:44 524  	      , t.secure_ba_number
15:35:44 525  	      , t.settlement_currency
15:35:44 526  	      , t.fee_schedule
15:35:44 527  	      , t.mop
15:35:44 528  	      , t.interchange_qualification
15:35:44 529  	      , t.fee_type_description
15:35:44 530  	      , t.action_type
15:35:44 531  	      , t.unit_quantity
15:35:44 532  	      , t.unit_fee
15:35:44 533  	      , t.amount
15:35:44 534  	      , t.percentage_rate
15:35:44 535  	      , t.total_charge
15:35:44 536  	      , t.create_date
15:35:44 537  	      , t.created_by
15:35:44 538  	    FROM rcn_cpt_service_charge_detail t, ids
15:35:44 539  	    WHERE ids.id = t.id;
15:35:44 540  	  END;
15:35:44 541  ----
15:35:44 542  --------------------------------------------------------------------------------
15:35:44 543  ----
15:35:44 544  
15:35:44 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 546  	  BEGIN
15:35:44 547  	    OPEN OUT_CURSOR FOR
15:35:44 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 549  	    SELECT
15:35:44 550  		t.id rcn_cpt_excp_dtl_id
15:35:44 551  	      , t.rcn_ext_source_log_id
15:35:44 552  	      , t.record_type
15:35:44 553  	      , t.submission_date
15:35:44 554  	      , t.pid_number
15:35:44 555  	      , t.pid_short_name
15:35:44 556  	      , t.submission_number
15:35:44 557  	      , t.record_number
15:35:44 558  	      , t.entity_type
15:35:44 559  	      , t.entity_number
15:35:44 560  	      , t.presentment_currency
15:35:44 561  	      , t.merchant_order_number
15:35:44 562  	      , t.rdfi_number
15:35:44 563  	      , t.account_number
15:35:44 564  	      , t.expiration_date
15:35:44 565  	      , t.amount
15:35:44 566  	      , t.mop
15:35:44 567  	      , t.action_code
15:35:44 568  	      , t.auth_date
15:35:44 569  	      , t.auth_code
15:35:44 570  	      , t.auth_response_code
15:35:44 571  	      , t.trace_number
15:35:44 572  	      , t.consumer_country_code
15:35:44 573  	      , t.category
15:35:44 574  	      , t.mcc
15:35:44 575  	      , t.reject_code
15:35:44 576  	      , t.submission_status
15:35:44 577  	      , t.create_date
15:35:44 578  	      , t.created_by
15:35:44 579  	    FROM rcn_cpt_exception_detail t, ids
15:35:44 580  	    WHERE ids.id = t.id;
15:35:44 581  	  END;
15:35:44 582  ----
15:35:44 583  --------------------------------------------------------------------------------
15:35:44 584  ----
15:35:44 585  
15:35:44 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 587  	  BEGIN
15:35:44 588  	    OPEN OUT_CURSOR FOR
15:35:44 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 590  	      SELECT
15:35:44 591  		t.id rcn_cpt_deposit_dtl_id
15:35:44 592  	      , t.rcn_ext_source_log_id
15:35:44 593  	      , t.record_type
15:35:44 594  	      , t.submission_date
15:35:44 595  	      , t.pid_number
15:35:44 596  	      , t.pid_short_name
15:35:44 597  	      , t.submission_number
15:35:44 598  	      , t.record_number
15:35:44 599  	      , t.entity_type
15:35:44 600  	      , t.entity_number
15:35:44 601  	      , t.presentment_currency
15:35:44 602  	      , t.merchant_order_number
15:35:44 603  	      , t.rdfi_number
15:35:44 604  	      , t.account_number
15:35:44 605  	      , t.expiration_date
15:35:44 606  	      , t.amount
15:35:44 607  	      , t.mop
15:35:44 608  	      , t.action_code
15:35:44 609  	      , t.auth_date
15:35:44 610  	      , t.auth_code
15:35:44 611  	      , t.auth_response_code
15:35:44 612  	      , t.trace_number
15:35:44 613  	      , t.consumer_country_code
15:35:44 614  	      , t.mcc
15:35:44 615  	      , t.create_date
15:35:44 616  	      , t.created_by
15:35:44 617  	      , t.fee_code
15:35:44 618  	      , t.unit_fee
15:35:44 619  	      , t.percent_fee
15:35:44 620  	      , t.total_interchange_fee
15:35:44 621  	      , t.total_assessment_fee
15:35:44 622  	      , t.other_fee
15:35:44 623  	    FROM rcn_cpt_deposit_detail t, ids
15:35:44 624  	    WHERE ids.id = t.id;
15:35:44 625  	  END;
15:35:44 626  ----
15:35:44 627  --------------------------------------------------------------------------------
15:35:44 628  ----
15:35:44 629  
15:35:44 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 631  	  BEGIN
15:35:44 632  	    OPEN OUT_CURSOR FOR
15:35:44 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 634  	    SELECT
15:35:44 635  		t.id rcn_cpt_chgbk_act_dtl_id
15:35:44 636  	      , t.rcn_ext_source_log_id
15:35:44 637  	      , t.record_type
15:35:44 638  	      , t.entity_type
15:35:44 639  	      , t.entity_number
15:35:44 640  	      , t.chargeback_amount_issuer
15:35:44 641  	      , t.prev_partial_representment
15:35:44 642  	      , t.presentment_currency
15:35:44 643  	      , t.chargeback_category
15:35:44 644  	      , t.status_flag
15:35:44 645  	      , t.sequence_number
15:35:44 646  	      , t.merchant_order_number
15:35:44 647  	      , t.account_number
15:35:44 648  	      , t.reason_code
15:35:44 649  	      , t.transaction_date
15:35:44 650  	      , t.chargeback_date
15:35:44 651  	      , t.activity_date
15:35:44 652  	      , t.chargeback_amount_action
15:35:44 653  	      , t.fee_amount
15:35:44 654  	      , t.usage_code
15:35:44 655  	      , t.mop_code
15:35:44 656  	      , t.authorization_date
15:35:44 657  	      , t.chargeback_due_date
15:35:44 658  	      , t.create_date
15:35:44 659  	      , t.created_by
15:35:44 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
15:35:44 661  	    WHERE ids.id = t.id;
15:35:44 662  	  END;
15:35:44 663  ----
15:35:44 664  --------------------------------------------------------------------------------
15:35:44 665  ----
15:35:44 666  
15:35:44 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 668  	  BEGIN
15:35:44 669  	    OPEN OUT_CURSOR FOR
15:35:44 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 671  	    SELECT
15:35:44 672  		t.id rcn_pp_settlement_id
15:35:44 673  	      , t.rcn_ext_source_log_id
15:35:44 674  	      , t.transaction_id
15:35:44 675  	      , t.invoice_id
15:35:44 676  	      , t.pp_ref_id
15:35:44 677  	      , t.pp_ref_id_type
15:35:44 678  	      , t.trans_event_code
15:35:44 679  	      , t.trans_init_date
15:35:44 680  	      , t.trans_comp_date
15:35:44 681  	      , t.trans_deb_or_cred
15:35:44 682  	      , t.gross_trans_amount
15:35:44 683  	      , t.gross_trans_currency
15:35:44 684  	      , t.fee_deb_or_cred
15:35:44 685  	      , t.fee_amount
15:35:44 686  	      , t.fee_currency
15:35:44 687  	      , t.custom_field
15:35:44 688  	      , t.create_date
15:35:44 689  	      , t.created_by
15:35:44 690  	    FROM rcn_pp_settlement t, ids
15:35:44 691  	    WHERE ids.id = t.id;
15:35:44 692  	  END;
15:35:44 693  ----
15:35:44 694  --------------------------------------------------------------------------------
15:35:44 695  ----
15:35:44 696  
15:35:44 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 698  	  BEGIN
15:35:44 699  	    OPEN OUT_CURSOR FOR
15:35:44 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 701  	    SELECT
15:35:44 702  		t.id rcn_pp_dispute_id
15:35:44 703  	      , t.rcn_ext_source_log_id
15:35:44 704  	      , t.dispute_type
15:35:44 705  	      , t.claimant_name
15:35:44 706  	      , t.claimant_email
15:35:44 707  	      , t.transaction_id
15:35:44 708  	      , t.trans_date
15:35:44 709  	      , t.disputed_amount
15:35:44 710  	      , t.disputed_amount_currency
15:35:44 711  	      , t.dispute_reason
15:35:44 712  	      , t.dispute_filing_date
15:35:44 713  	      , t.dispute_status
15:35:44 714  	      , t.dispute_case_id
15:35:44 715  	      , t.invoice_id
15:35:44 716  	      , t.create_date
15:35:44 717  	      , t.created_by
15:35:44 718  	    FROM
15:35:44 719  	    rcn_pp_dispute t, ids
15:35:44 720  	    WHERE ids.id = t.id;
15:35:44 721  	  END;
15:35:44 722  ----
15:35:44 723  --------------------------------------------------------------------------------
15:35:44 724  ----
15:35:44 725  
15:35:44 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 727  	  BEGIN
15:35:44 728  	    OPEN OUT_CURSOR FOR
15:35:44 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 730  	    SELECT
15:35:44 731  		t.id rcn_pp_trans_dtl_id
15:35:44 732  	      , t.rcn_ext_source_log_id
15:35:44 733  	      , t.transaction_id
15:35:44 734  	      , t.invoice_id
15:35:44 735  	      , t.pp_ref_id
15:35:44 736  	      , t.trans_event_code
15:35:44 737  	      , t.trans_init_date
15:35:44 738  	      , t.trans_comp_date
15:35:44 739  	      , t.trans_deb_or_cred
15:35:44 740  	      , t.gross_trans_amount
15:35:44 741  	      , t.gross_trans_currency
15:35:44 742  	      , t.fee_deb_or_cred
15:35:44 743  	      , t.fee_amount
15:35:44 744  	      , t.fee_currency
15:35:44 745  	      , t.trans_status
15:35:44 746  	      , t.insurance_amount
15:35:44 747  	      , t.sales_tax_amount
15:35:44 748  	      , t.shipping_amount
15:35:44 749  	      , t.trans_subject
15:35:44 750  	      , t.trans_note
15:35:44 751  	      , t.payer_acct_id
15:35:44 752  	      , t.payer_addr_status
15:35:44 753  	      , t.item_name
15:35:44 754  	      , t.item_id
15:35:44 755  	      , t.option_1_name
15:35:44 756  	      , t.option_1_value
15:35:44 757  	      , t.option_2_name
15:35:44 758  	      , t.option_2_value
15:35:44 759  	      , t.auction_site
15:35:44 760  	      , t.auction_buyer_id
15:35:44 761  	      , t.auction_closing_date
15:35:44 762  	      , t.shipping_addr_line_1
15:35:44 763  	      , t.shipping_addr_line_2
15:35:44 764  	      , t.shipping_addr_city
15:35:44 765  	      , t.shipping_addr_state
15:35:44 766  	      , t.shipping_addr_zip
15:35:44 767  	      , t.shipping_addr_country
15:35:44 768  	      , t.custom_field
15:35:44 769  	      , t.create_date
15:35:44 770  	      , t.created_by
15:35:44 771  	    FROM rcn_pp_trans_detail t, ids
15:35:44 772  	    WHERE ids.id = t.id;
15:35:44 773  	  END;
15:35:44 774  ----
15:35:44 775  --------------------------------------------------------------------------------
15:35:44 776  ----
15:35:44 777  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 778  	  BEGIN
15:35:44 779  	    OPEN OUT_CURSOR FOR
15:35:44 780  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_AMEX_CHARGEBACK' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 781  	    SELECT
15:35:44 782  	      rac.id
15:35:44 783  	    , rac.rcn_ext_source_log_id
15:35:44 784  	    , rac.resolution
15:35:44 785  	    , rac.from_system
15:35:44 786  	    , rac.rejects_to_system
15:35:44 787  	    , rac.disputes_to_system
15:35:44 788  	    , rac.date_of_adjustment
15:35:44 789  	    , rac.date_of_charge
15:35:44 790  	    , rac.case_type
15:35:44 791  	    , rac.cb_reas_code
15:35:44 792  	    , rac.cb_amount
15:35:44 793  	    , rac.cb_adjustment_number
15:35:44 794  	    , rac.billed_amount
15:35:44 795  	    , rac.soc_amount
15:35:44 796  	    , rac.foreign_amount
15:35:44 797  	    , rac.currency
15:35:44 798  	    , rac.note1
15:35:44 799  	    , rac.note2
15:35:44 800  	    , rac.note3
15:35:44 801  	    , rac.note4
15:35:44 802  	    , rac.note5
15:35:44 803  	    , rac.note6
15:35:44 804  	    , rac.note7
15:35:44 805  	    , rac.ind_ref_number
15:35:44 806  	    , rac.create_date
15:35:44 807  	    , rac.created_by
15:35:44 808  	    , rac.update_date
15:35:44 809  	    , rac.updated_by
15:35:44 810  	    FROM rcn_amex_chargeback rac, ids
15:35:44 811  	    WHERE ids.id = rac.id;
15:35:44 812  	  END;
15:35:44 813  ----
15:35:44 814  --------------------------------------------------------------------------------
15:35:44 815  ----
15:35:44 816  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 817  	  BEGIN
15:35:44 818  	    OPEN OUT_CURSOR FOR
15:35:44 819  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 820  	    SELECT
15:35:44 821  		t.ID PAYPAL_ID
15:35:44 822  	      , ACCOUNT_ID
15:35:44 823  	      , INSTRUMENT_NAME
15:35:44 824  	      , CREATE_DATE
15:35:44 825  	      , CREATED_BY
15:35:44 826  	      , UPDATE_DATE
15:35:44 827  	      , UPDATED_BY
15:35:44 828  	      , s.value PAYPAL_STATUS
15:35:44 829  	      , STATE
15:35:44 830  	      , CITY
15:35:44 831  	      , POSTAL_CODE
15:35:44 832  	      , COUNTRY
15:35:44 833  	      , EXPIRATION_DATE
15:35:44 834  	    FROM paypal t, paypal_status s, ids
15:35:44 835  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
15:35:44 836  	  END;
15:35:44 837  ----
15:35:44 838  --------------------------------------------------------------------------------
15:35:44 839  ----
15:35:44 840  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:35:44 841  	  BEGIN
15:35:44 842  	    OPEN OUT_CURSOR FOR
15:35:44 843  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
15:35:44 844  	    SELECT
15:35:44 845  	      a.id ADDRESS_ID,
15:35:44 846  	      address1,
15:35:44 847  	      address2,
15:35:44 848  	      city,
15:35:44 849  	      state,
15:35:44 850  	      postal_code,
15:35:44 851  	      country,
15:35:44 852  	      create_date,
15:35:44 853  	      created_by,
15:35:44 854  	      update_date,
15:35:44 855  	      updated_by
15:35:44 856  	    FROM address a, ids
15:35:44 857  	    WHERE ids.id = a.id;
15:35:44 858  	  END;
15:35:44 859  ----
15:35:44 860  --------------------------------------------------------------------------------
15:35:44 861  ----
15:35:44 862  /**/
15:35:44 863  END PROCS_REPORTING;
15:35:44 864  .
15:35:44 SQL> /

Package body created.

Elapsed: 00:00:00.39
15:35:45 SQL> 
15:35:45 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
15:35:45   2  
15:35:45   3  ----
15:35:45   4  --------------------------------------------------------------------------------
15:35:45   5  ----
15:35:45   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
15:35:45   7  	      return line_item.amount%type
15:35:45   8  	  is
15:35:45   9  	      v_discount  line_item.amount%type := 0;
15:35:45  10  	  begin
15:35:45  11  	      for x in (
15:35:45  12  		  select d.id discount_id
15:35:45  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
15:35:45  14  		  from discount d
15:35:45  15  		      join discount_line_item dli	      on dli.discount_id = d.id
15:35:45  16  		      join discount_product_offering dop      on dop.discount_id = d.id
15:35:45  17  		      join product_offering po		      on po.id = dop.product_offering_id
15:35:45  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
15:35:45  19  		  where dli.line_item_id = in_line_item_id
15:35:45  20  	      )
15:35:45  21  	      loop
15:35:45  22  		  v_discount := v_discount + x.discount_amount;
15:35:45  23  	      end loop;
15:35:45  24  
15:35:45  25  	      return v_discount;
15:35:45  26  	  end;
15:35:45  27  ----
15:35:45  28  --------------------------------------------------------------------------------
15:35:45  29  ----
15:35:45  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
15:35:45  31  	      return line_item.amount%type
15:35:45  32  	  is
15:35:45  33  	      v_li_total  line_item.amount%type;
15:35:45  34  	      v_inv_total line_item.amount%type;
15:35:45  35  	      v_ref_total line_item.amount%type;
15:35:45  36  	  begin
15:35:45  37  
15:35:45  38  	      for li in (
15:35:45  39  		  select li.invoice_id, po.*
15:35:45  40  		  from line_item li
15:35:45  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
15:35:45  42  		  where li.id = in_line_item_id
15:35:45  43  	      )
15:35:45  44  	      loop
15:35:45  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
15:35:45  46  
15:35:45  47  		  v_inv_total := 0;
15:35:45  48  		  v_ref_total := 0;
15:35:45  49  		  for x in (
15:35:45  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
15:35:45  51  		      from charge c
15:35:45  52  		      where c.invoice_id = li.invoice_id
15:35:45  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
15:35:45  54  		  )
15:35:45  55  		  loop
15:35:45  56  		      if (x.type = 1) then
15:35:45  57  			  v_inv_total := x.total;
15:35:45  58  		      else
15:35:45  59  			  v_ref_total := x.total;
15:35:45  60  		      end if;
15:35:45  61  		  end loop;
15:35:45  62  
15:35:45  63  		  if (v_inv_total > 0) then
15:35:45  64  		      return (v_ref_total / v_inv_total) * v_li_total;
15:35:45  65  		  else
15:35:45  66  		      return 0;
15:35:45  67  		  end if;
15:35:45  68  
15:35:45  69  	      end loop;
15:35:45  70  
15:35:45  71  	      return 0;
15:35:45  72  	  end;
15:35:45  73  ----
15:35:45  74  --------------------------------------------------------------------------------
15:35:45  75  ----
15:35:45  76  	PROCEDURE EXTRACT_LINE_ITEMS(
15:35:45  77  	  in_lower_date_bound DATE,
15:35:45  78  	  in_upper_date_bound DATE,
15:35:45  79  	  out_lic_cur OUT sys_refcursor
15:35:45  80  	) AS
15:35:45  81  	BEGIN
15:35:45  82  	  OPEN out_lic_cur FOR
15:35:45  83  	  with liq as (
15:35:45  84  		SELECT li2.id
15:35:45  85  		      FROM
15:35:45  86  			   line_item li2
15:35:45  87  		      WHERE
15:35:45  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
15:35:45  89  		UNION
15:35:45  90  		SELECT li2.id
15:35:45  91  		      FROM
15:35:45  92  			   line_item li2
15:35:45  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
15:35:45  94  		      WHERE
15:35:45  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
15:35:45  96  		UNION
15:35:45  97  		SELECT li2.id
15:35:45  98  		      FROM
15:35:45  99  			   line_item li2
15:35:45 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
15:35:45 101  		      WHERE
15:35:45 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
15:35:45 103  		UNION
15:35:45 104  		SELECT li2.id
15:35:45 105  		      FROM
15:35:45 106  			   line_item li2
15:35:45 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
15:35:45 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
15:35:45 109  		      WHERE
15:35:45 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
15:35:45 111  		UNION
15:35:45 112  		SELECT li2.id
15:35:45 113  		      FROM
15:35:45 114  			   line_item li2
15:35:45 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
15:35:45 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
15:35:45 117  		      WHERE
15:35:45 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
15:35:45 119  		UNION
15:35:45 120  		SELECT li2.id
15:35:45 121  		      FROM
15:35:45 122  			   line_item li2
15:35:45 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
15:35:45 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
15:35:45 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
15:35:45 126  		      WHERE
15:35:45 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
15:35:45 128  	  )
15:35:45 129  	  SELECT distinct
15:35:45 130  	    line_item.id				 line_item_id
15:35:45 131  	  , product.name				 product_name
15:35:45 132  	  , product.unit_price				 product_unit_price
15:35:45 133  	  , product.production_cost			 product_production_cost
15:35:45 134  	  , offer_chain.name				 offer_chain_name
15:35:45 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
15:35:45 136  	  , gclicense.purchase_date			 subscription_start_date
15:35:45 137  	  , gclicense.start_date			 license_start_date
15:35:45 138  	  , gclicense.end_date				 license_end_date
15:35:45 139  	  , credit_card.city				 cc_city
15:35:45 140  	  , credit_card.state				 cc_state
15:35:45 141  	  , credit_card.postal_code			 cc_postal_code
15:35:45 142  	  , line_item.create_date			 line_item_purchase_date
15:35:45 143  	  , gclicense.account_regi_id
15:35:45 144  	  , product_offering.quantity			 purchase_quantity
15:35:45 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
15:35:45 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
15:35:45 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
15:35:45 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
15:35:45 149  	  , 0						 purchase_tax_amount
15:35:45 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
15:35:45 151  	  , invoice.id					 invoice_number
15:35:45 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
15:35:45 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
15:35:45 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
15:35:45 155  	  FROM
15:35:45 156  	       line_item
15:35:45 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
15:35:45 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
15:35:45 159  	  JOIN product				ON product.id	       = product_offering.product_id
15:35:45 160  	  join (
15:35:45 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
15:35:45 162  		      ,subscription.sct_id, license.start_date, license.end_date
15:35:45 163  		      ,account.group_id account_regi_id
15:35:45 164  		from	 license
15:35:45 165  		    join subscription ON subscription.id = license.subscription_id
15:35:45 166  		    join account      ON account.id	 = subscription.account_id
15:35:45 167  		union all
15:35:45 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
15:35:45 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
15:35:45 170  		      ,gc.purchaser_group_id account_regi_id
15:35:45 171  		from	 gift_certificate gc
15:35:45 172  		where
15:35:45 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
15:35:45 174  
15:35:45 175  	  ) gclicense
15:35:45 176  						on gclicense.invoice_id = invoice.id
15:35:45 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
15:35:45 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
15:35:45 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
15:35:45 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
15:35:45 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
15:35:45 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
15:35:45 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
15:35:45 184  	  join liq				on line_item.id 	= liq.id
15:35:45 185  	    ;
15:35:45 186  	END EXTRACT_LINE_ITEMS;
15:35:45 187  ----
15:35:45 188  --------------------------------------------------------------------------------
15:35:45 189  ----
15:35:45 190  END PROCS_REPORTING_1A;
15:35:45 191  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.01
15:35:45 SQL> 
15:35:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V5" AS
15:35:45   2  
15:35:45   3  FUNCTION GET_PRODUCT_NAMES(
15:35:45   4  	in_offer_id IN NUMBER
15:35:45   5  ) RETURN VARCHAR2 AS
15:35:45   6  var_result_names VARCHAR2(1024);
15:35:45   7  BEGIN
15:35:45   8  
15:35:45   9  	var_result_names := NULL;
15:35:45  10  
15:35:45  11  	FOR f_product IN (
15:35:45  12  	  SELECT
15:35:45  13  	    PRODUCT.NAME
15:35:45  14  	  FROM
15:35:45  15  	    PRODUCT
15:35:45  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:35:45  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:35:45  18  	  WHERE
15:35:45  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
15:35:45  20  	)
15:35:45  21  	LOOP
15:35:45  22  
15:35:45  23  	  IF var_result_names IS NULL THEN
15:35:45  24  	    var_result_names := f_product.NAME;
15:35:45  25  	  ELSE
15:35:45  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
15:35:45  27  	  END IF;
15:35:45  28  
15:35:45  29  	END LOOP;
15:35:45  30  
15:35:45  31  	RETURN var_result_names;
15:35:45  32  
15:35:45  33  END GET_PRODUCT_NAMES;
15:35:45  34  
15:35:45  35  /******************************************************************************/
15:35:45  36  
15:35:45  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
15:35:45  38  	in_start_date  IN DATE,
15:35:45  39  	in_end_date    IN DATE,
15:35:45  40  	out_result_set OUT SYS_REFCURSOR
15:35:45  41  ) AS
15:35:45  42  -- CONSTANTS
15:35:45  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:35:45  44  BEGIN
15:35:45  45  
15:35:45  46  	OPEN out_result_set FOR
15:35:45  47  	SELECT
15:35:45  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
15:35:45  49  	  "Offer_Id",
15:35:45  50  	  "New_Purchases_Num",
15:35:45  51  	  "Number_Of_renewals",
15:35:45  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
15:35:45  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
15:35:45  54  	FROM (
15:35:45  55  	  SELECT
15:35:45  56  	    "Offer_Id",
15:35:45  57  	    "Number_Of_renewals",
15:35:45  58  	    "New_Purchases_Num"
15:35:45  59  	  FROM (
15:35:45  60  	    SELECT
15:35:45  61  	      OFFER.ID as "Offer_Id",
15:35:45  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
15:35:45  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
15:35:45  64  	    FROM
15:35:45  65  	      OFFER
15:35:45  66  	  )
15:35:45  67  	  WHERE
15:35:45  68  	    "New_Purchases_Num" > 0
15:35:45  69  	    OR "Number_Of_renewals" > 0
15:35:45  70  	);
15:35:45  71  
15:35:45  72  	/*
15:35:45  73  	OPEN out_result_set FOR
15:35:45  74  	SELECT
15:35:45  75  	  "Product_Names",
15:35:45  76  	  "Offer_Id",
15:35:45  77  	  "New_Purchases_Num",
15:35:45  78  	  "Number_Of_renewals",
15:35:45  79  	  "Total_Dollar_Value",
15:35:45  80  	  "Unique_Purchasers_num"
15:35:45  81  	FROM (
15:35:45  82  	  SELECT
15:35:45  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
15:35:45  84  	    offer.id as "Offer_Id",
15:35:45  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
15:35:45  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
15:35:45  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
15:35:45  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
15:35:45  89  	  FROM
15:35:45  90  	    OFFER
15:35:45  91  	)
15:35:45  92  	WHERE
15:35:45  93  	  "New_Purchases_Num" > 0
15:35:45  94  	  OR "Number_Of_renewals" > 0
15:35:45  95  	  OR "Total_Dollar_Value" > 0
15:35:45  96  	  OR "Unique_Purchasers_num" > 0;
15:35:45  97  	*/
15:35:45  98  
15:35:45  99  END GET_FULL_FLASH_REPORT_PURCH;
15:35:45 100  
15:35:45 101  /******************************************************************************/
15:35:45 102  
15:35:45 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
15:35:45 104  	in_offer_id	       IN NUMBER,
15:35:45 105  	in_start_date	       IN DATE,
15:35:45 106  	in_end_date	       IN DATE,
15:35:45 107  	out_new_purchasers_num OUT NUMBER,
15:35:45 108  	out_renewals_num       OUT NUMBER,
15:35:45 109  	out_product_names      OUT VARCHAR2,
15:35:45 110  	out_total_dollar_value OUT NUMBER,
15:35:45 111  	out_unique_purchasers  OUT NUMBER
15:35:45 112  ) AS
15:35:45 113  -- CONSTANTS
15:35:45 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:35:45 115  BEGIN
15:35:45 116  
15:35:45 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
15:35:45 118  
15:35:45 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
15:35:45 120  	  in_offer_id,
15:35:45 121  	  in_start_date,
15:35:45 122  	  in_end_date
15:35:45 123  	);
15:35:45 124  
15:35:45 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
15:35:45 126  	  in_offer_id,
15:35:45 127  	  in_start_date,
15:35:45 128  	  in_end_date
15:35:45 129  	);
15:35:45 130  
15:35:45 131  	out_renewals_num := FLR_RENEWALS_NUM(
15:35:45 132  	  in_offer_id,
15:35:45 133  	  in_start_date,
15:35:45 134  	  in_end_date
15:35:45 135  	);
15:35:45 136  
15:35:45 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
15:35:45 138  	  in_offer_id,
15:35:45 139  	  in_start_date,
15:35:45 140  	  in_end_date
15:35:45 141  	);
15:35:45 142  
15:35:45 143  END GET_FLASH_REPORT_PURCHASES;
15:35:45 144  
15:35:45 145  /******************************************************************************/
15:35:45 146  
15:35:45 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
15:35:45 148  	in_offer_id	       IN NUMBER,
15:35:45 149  	in_start_date	       IN DATE,
15:35:45 150  	in_end_date	       IN DATE
15:35:45 151  ) RETURN NUMBER AS
15:35:45 152  -- CONSTANTS
15:35:45 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:35:45 154  -- VARIABLES
15:35:45 155  var_new_purchases_num NUMBER;
15:35:45 156  BEGIN
15:35:45 157  	SELECT
15:35:45 158  	  COUNT(LICENSE.ID)
15:35:45 159  	  into
15:35:45 160  	  var_new_purchases_num
15:35:45 161  	FROM
15:35:45 162  	  LICENSE
15:35:45 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
15:35:45 164  	WHERE
15:35:45 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
15:35:45 166  	  AND LICENSE.OFFER_ID = in_offer_id
15:35:45 167  	  AND CHARGE.CHARGE_AMOUNT > 0
15:35:45 168  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
15:35:45 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
15:35:45 170  
15:35:45 171  	RETURN var_new_purchases_num;
15:35:45 172  END FLR_NEW_PURCHASERS_NUM;
15:35:45 173  
15:35:45 174  /******************************************************************************/
15:35:45 175  
15:35:45 176  FUNCTION FLR_RENEWALS_NUM (
15:35:45 177  	in_offer_id	       IN NUMBER,
15:35:45 178  	in_start_date	       IN DATE,
15:35:45 179  	in_end_date	       IN DATE
15:35:45 180  ) RETURN NUMBER AS
15:35:45 181  -- CONSTANTS
15:35:45 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:35:45 183  -- VARIABLES
15:35:45 184  var_renewals_num NUMBER;
15:35:45 185  BEGIN
15:35:45 186  	SELECT
15:35:45 187  	  COUNT(LICENSE.ID)
15:35:45 188  	  into
15:35:45 189  	  var_renewals_num
15:35:45 190  	FROM
15:35:45 191  	  LICENSE
15:35:45 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
15:35:45 193  	WHERE
15:35:45 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
15:35:45 195  	  AND LICENSE.OFFER_ID = in_offer_id
15:35:45 196  	  AND CHARGE.CHARGE_AMOUNT > 0
15:35:45 197  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
15:35:45 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
15:35:45 199  
15:35:45 200  	RETURN var_renewals_num;
15:35:45 201  END FLR_RENEWALS_NUM;
15:35:45 202  
15:35:45 203  /******************************************************************************/
15:35:45 204  
15:35:45 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
15:35:45 206  	in_offer_id	       IN NUMBER,
15:35:45 207  	in_start_date	       IN DATE,
15:35:45 208  	in_end_date	       IN DATE
15:35:45 209  ) RETURN NUMBER AS
15:35:45 210  var_dollar_value NUMBER(10,2);
15:35:45 211  BEGIN
15:35:45 212  	SELECT
15:35:45 213  	  SUM(CHARGE.CHARGE_AMOUNT)
15:35:45 214  	  into
15:35:45 215  	  var_dollar_value
15:35:45 216  	FROM
15:35:45 217  	  LICENSE
15:35:45 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
15:35:45 219  	WHERE
15:35:45 220  	  LICENSE.OFFER_ID = in_offer_id
15:35:45 221  	  AND CHARGE.CHARGE_AMOUNT > 0
15:35:45 222  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
15:35:45 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
15:35:45 224  
15:35:45 225  	RETURN var_dollar_value;
15:35:45 226  END FLR_TOTAL_DOLLAR_VALUE;
15:35:45 227  
15:35:45 228  /******************************************************************************/
15:35:45 229  
15:35:45 230  FUNCTION FLR_UNIQUE_PURCHASERS (
15:35:45 231  	in_offer_id	       IN NUMBER,
15:35:45 232  	in_start_date	       IN DATE,
15:35:45 233  	in_end_date	       IN DATE
15:35:45 234  ) RETURN NUMBER AS
15:35:45 235  -- CONSTANTS
15:35:45 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:35:45 237  -- VARIABLES
15:35:45 238  var_unique_purchasers NUMBER;
15:35:45 239  BEGIN
15:35:45 240  	SELECT
15:35:45 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
15:35:45 242  	FROM
15:35:45 243  	  LICENSE
15:35:45 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
15:35:45 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 246  	WHERE
15:35:45 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
15:35:45 248  	  AND LICENSE.OFFER_ID = in_offer_id
15:35:45 249  	  AND CHARGE.CHARGE_AMOUNT > 0
15:35:45 250  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
15:35:45 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
15:35:45 252  
15:35:45 253  	RETURN var_unique_purchasers;
15:35:45 254  END;
15:35:45 255  
15:35:45 256  END PROCS_REPORTS_V5;
15:35:45 257  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:35:45 SQL> 
15:35:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V17" AS
15:35:45   2  
15:35:45   3  PROCEDURE INCREMENT_VERSION
15:35:45   4  /*
15:35:45   5  Throws exceptions:
15:35:45   6  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45   7  */
15:35:45   8  AS
15:35:45   9  BEGIN
15:35:45  10  
15:35:45  11  	UPDATE SYS_VERSION SET version=version+1;
15:35:45  12  
15:35:45  13  END INCREMENT_VERSION;
15:35:45  14  
15:35:45  15  /*************************************************************/
15:35:45  16  
15:35:45  17  PROCEDURE CHECK_VERSION(
15:35:45  18  	  in_vers    IN NUMBER,
15:35:45  19  	  out_result OUT NUMBER
15:35:45  20  ) AS
15:35:45  21  	current_version NUMBER;
15:35:45  22  BEGIN
15:35:45  23  	SELECT version INTO current_version FROM SYS_VERSION;
15:35:45  24  	IF(current_version != in_vers) THEN
15:35:45  25  	  out_result := 1;
15:35:45  26  	ELSE
15:35:45  27  	  out_result := 0;
15:35:45  28  	END IF;
15:35:45  29  END CHECK_VERSION;
15:35:45  30  
15:35:45  31  END PROCS_SYSTEM_V17;
15:35:45  32  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:45 SQL> 
15:35:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V17" AS
15:35:45   2  
15:35:45   3  PROCEDURE ADD_TAX (
15:35:45   4  	in_tax_type_id		 IN NUMBER,
15:35:45   5  	in_calculated_amount	 IN NUMBER,
15:35:45   6  	in_created_by		 IN VARCHAR2,
15:35:45   7  	in_line_item_id 	 IN NUMBER,
15:35:45   8  	in_effective_rate	 IN VARCHAR2,
15:35:45   9  	in_taxable_amount	 IN NUMBER,
15:35:45  10  	in_tax_rule_id		 IN NUMBER,
15:35:45  11  	in_jurisdiction_level_id IN NUMBER,
15:35:45  12  	in_jurisdiction_name	 IN VARCHAR2,
15:35:45  13  	in_jurisdiction_id	 IN VARCHAR2,
15:35:45  14  	in_ext_tax_type 	 IN VARCHAR2,
15:35:45  15  	in_ext_result		 IN VARCHAR2,
15:35:45  16  	in_imposition_type	 IN VARCHAR2,
15:35:45  17  	in_imposition		 IN VARCHAR2
15:35:45  18  ) AS
15:35:45  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
15:35:45  20  -- VARIABLES
15:35:45  21  var_new_tax_id	NUMBER;
15:35:45  22  temp_line_item_id NUMBER;
15:35:45  23  -- EXCEPTIONS
15:35:45  24  BAD_LINE_ITEM_ID EXCEPTION;
15:35:45  25  BEGIN
15:35:45  26  
15:35:45  27  	BEGIN
15:35:45  28  	  SELECT
15:35:45  29  	    LINE_ITEM.ID into temp_line_item_id
15:35:45  30  	  FROM
15:35:45  31  	    LINE_ITEM
15:35:45  32  	  WHERE
15:35:45  33  	    LINE_ITEM.ID = in_line_item_id;
15:35:45  34  	  EXCEPTION
15:35:45  35  	    WHEN NO_DATA_FOUND THEN
15:35:45  36  	      RAISE BAD_LINE_ITEM_ID;
15:35:45  37  	END;
15:35:45  38  
15:35:45  39  	var_new_tax_id := NULL;
15:35:45  40  
15:35:45  41  	PROCS_TAXES_CRU_V17.CREATE_TAX(
15:35:45  42  	  var_new_tax_id,
15:35:45  43  	  in_tax_type_id,
15:35:45  44  	  in_calculated_amount,
15:35:45  45  	  in_created_by,
15:35:45  46  	  in_line_item_id,
15:35:45  47  	  in_effective_rate,
15:35:45  48  	  in_taxable_amount,
15:35:45  49  	  in_tax_rule_id,
15:35:45  50  	  in_jurisdiction_level_id,
15:35:45  51  	  in_jurisdiction_name,
15:35:45  52  	  in_jurisdiction_id,
15:35:45  53  	  in_ext_tax_type,
15:35:45  54  	  in_ext_result,
15:35:45  55  	  in_imposition_type,
15:35:45  56  	  in_imposition
15:35:45  57  	);
15:35:45  58  
15:35:45  59  EXCEPTION
15:35:45  60  WHEN BAD_LINE_ITEM_ID THEN
15:35:45  61  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45  62  	  SPROC_NAME, 'No such line item');
15:35:45  63  WHEN OTHERS THEN
15:35:45  64  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45  66  END ADD_TAX;
15:35:45  67  
15:35:45  68  /******************************************************************************/
15:35:45  69  
15:35:45  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
15:35:45  71  	in_country_code IN CHAR,
15:35:45  72  	in_check_date IN DATE,
15:35:45  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V17.FALSE
15:35:45  74  ) AS
15:35:45  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
15:35:45  76  -- VARIABLES
15:35:45  77  var_countries_count NUMBER;
15:35:45  78  var_result	  NUMBER;
15:35:45  79  BEGIN
15:35:45  80  
15:35:45  81  	SELECT
15:35:45  82  	  COUNT(1) into var_countries_count
15:35:45  83  	FROM
15:35:45  84  	  TAX_COUNTRY_EXCLUSION_LIST
15:35:45  85  	WHERE
15:35:45  86  	  country_code = in_country_code
15:35:45  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
15:35:45  88  	  AND (
15:35:45  89  	    end_date is null
15:35:45  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
15:35:45  91  	  );
15:35:45  92  
15:35:45  93  	IF var_countries_count > 1 THEN
15:35:45  94  	  -- [REVU] Should not happen. DB structure error
15:35:45  95  	  var_result := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45  96  	ELSIF var_countries_count = 1 THEN
15:35:45  97  	  var_result := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45  98  	ELSE
15:35:45  99  	  var_result := GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 100  	END IF;
15:35:45 101  
15:35:45 102  	out_is_founded := var_result;
15:35:45 103  
15:35:45 104  EXCEPTION
15:35:45 105  WHEN OTHERS THEN
15:35:45 106  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 108  END CHECK_COUNTRY_FOR_EXCLUSION;
15:35:45 109  
15:35:45 110  /******************************************************************************/
15:35:45 111  
15:35:45 112  PROCEDURE GET_TAX_CATEGORY (
15:35:45 113  	in_tax_category_id IN NUMBER,
15:35:45 114  	out_result_set	   OUT SYS_REFCURSOR
15:35:45 115  ) AS
15:35:45 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
15:35:45 117  BEGIN
15:35:45 118  
15:35:45 119  	OPEN out_result_set FOR
15:35:45 120  	SELECT
15:35:45 121  	  ID,
15:35:45 122  	  CODE,
15:35:45 123  	  DESCRIPTION
15:35:45 124  	FROM
15:35:45 125  	  TAX_CATEGORY
15:35:45 126  	WHERE
15:35:45 127  	  ID = in_tax_category_id;
15:35:45 128  
15:35:45 129  EXCEPTION
15:35:45 130  WHEN OTHERS THEN
15:35:45 131  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 133  END GET_TAX_CATEGORY;
15:35:45 134  
15:35:45 135  END PROCS_TAXES_V17;
15:35:45 136  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:35:45 SQL> 
15:35:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V17" AS
15:35:45   2  
15:35:45   3  PROCEDURE CREATE_TRANSACTION (
15:35:45   4  /*
15:35:45   5  Throws exceptions:
15:35:45   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45   8  */
15:35:45   9  	in_transaction_id  IN NUMBER,
15:35:45  10  	in_status_id	   IN NUMBER,
15:35:45  11  	in_amount	   IN NUMBER,
15:35:45  12  	in_created_by	   IN VARCHAR2,
15:35:45  13  	in_order_id	   IN VARCHAR2,
15:35:45  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE,
15:35:45  15  	out_transaction_id OUT NUMBER
15:35:45  16  ) AS
15:35:45  17  -- VARIABLES
15:35:45  18  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
15:35:45  19  var_transaction_count  NUMBER;
15:35:45  20  -- EXCEPTIONS
15:35:45  21  BAD_TRANSACTION_ID     EXCEPTION;
15:35:45  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45  23  BEGIN
15:35:45  24  
15:35:45  25  	IF in_transaction_id IS NOT NULL THEN
15:35:45  26  	  SELECT
15:35:45  27  	    COUNT(*) into var_transaction_count
15:35:45  28  	  FROM
15:35:45  29  	    TRANSACTION
15:35:45  30  	  WHERE
15:35:45  31  	    TRANSACTION.ID = in_transaction_id;
15:35:45  32  	  IF var_transaction_count > 0 THEN
15:35:45  33  	    RAISE BAD_TRANSACTION_ID;
15:35:45  34  	  END IF;
15:35:45  35  	END IF;
15:35:45  36  
15:35:45  37  	PROCS_TRANSACTION_CRU_V17.CREATE_TRANSACTION(
15:35:45  38  	  out_transaction_id	   => out_transaction_id,
15:35:45  39  	  in_transaction_id	   => in_transaction_id,
15:35:45  40  	  in_transaction_status_id => in_status_id,
15:35:45  41  	  in_transaction_amount    => in_amount,
15:35:45  42  	  in_created_by 	   => in_created_by,
15:35:45  43  	  in_order_id		   => in_order_id,
15:35:45  44  	  in_is_refund		   => in_is_refund
15:35:45  45  	);
15:35:45  46  
15:35:45  47  EXCEPTION
15:35:45  48  WHEN BAD_TRANSACTION_ID THEN
15:35:45  49  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:45  50  	  SPROC_NAME, 'Transaction with given id already exists');
15:35:45  51  WHEN OTHERS THEN
15:35:45  52  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45  53  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45  54  END CREATE_TRANSACTION;
15:35:45  55  
15:35:45  56  /******************************************************************************/
15:35:45  57  
15:35:45  58  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
15:35:45  59  /*
15:35:45  60  Throws exceptions:
15:35:45  61  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45  62  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45  63  */
15:35:45  64  	in_transaction_id	   IN NUMBER,
15:35:45  65  	in_trans_attempt_status    IN NUMBER,
15:35:45  66  	in_external_status_code    IN VARCHAR2,
15:35:45  67  	in_external_status_message IN VARCHAR2,
15:35:45  68  	in_created_by		   IN VARCHAR2,
15:35:45  69  	in_ext_transaction_id	   IN VARCHAR2,
15:35:45  70  	out_transaction_attempt_id OUT NUMBER
15:35:45  71  ) AS
15:35:45  72  -- VARIABLES
15:35:45  73  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
15:35:45  74  var_transaction_create_date DATE;
15:35:45  75  var_transaction_attempt_id  NUMBER;
15:35:45  76  
15:35:45  77  -- EXCEPTIONS
15:35:45  78  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
15:35:45  79  BAD_TRANSACTION_ID       EXCEPTION;
15:35:45  80  BEGIN
15:35:45  81  
15:35:45  82  	-- Check that transaction exists
15:35:45  83  	BEGIN
15:35:45  84  	  SELECT
15:35:45  85  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
15:35:45  86  	  FROM
15:35:45  87  	    TRANSACTION
15:35:45  88  	  WHERE
15:35:45  89  	    TRANSACTION.ID = in_transaction_id;
15:35:45  90  	  EXCEPTION
15:35:45  91  	    WHEN OTHERS THEN
15:35:45  92  	      RAISE BAD_TRANSACTION_ID;
15:35:45  93  	END;
15:35:45  94  
15:35:45  95  	-- Check that transaction status is correct
15:35:45  96  	IF in_trans_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_IN_PROGRESS
15:35:45  97  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS
15:35:45  98  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_FAILED THEN
15:35:45  99  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
15:35:45 100  	END IF;
15:35:45 101  
15:35:45 102  	var_transaction_attempt_id := NULL;
15:35:45 103  	PROCS_TRANSACTION_CRU_V17.CREATE_TRANSACTION_ATTEMPT(
15:35:45 104  	  inout_transaction_attempt_id => var_transaction_attempt_id,
15:35:45 105  	  in_transaction_id	       => in_transaction_id,
15:35:45 106  	  in_external_status_code      => in_external_status_code,
15:35:45 107  	  in_external_status_message   => in_external_status_message,
15:35:45 108  	  in_created_by 	       => in_created_by,
15:35:45 109  	  in_external_transaction_id   => in_ext_transaction_id,
15:35:45 110  	  in_transaction_start_time    => var_transaction_create_date,
15:35:45 111  	  in_status_id		       => in_trans_attempt_status
15:35:45 112  	);
15:35:45 113  
15:35:45 114  	PROCS_TRANSACTION_CRU_V17.UPDATE_TRANSACTION(
15:35:45 115  	  in_transaction_id => in_transaction_id,
15:35:45 116  	  in_updated_by     => in_created_by
15:35:45 117  	);
15:35:45 118  
15:35:45 119  	out_transaction_attempt_id := var_transaction_attempt_id;
15:35:45 120  
15:35:45 121  EXCEPTION
15:35:45 122  WHEN BAD_TRANSACTION_ID THEN
15:35:45 123  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 124  	  SPROC_NAME, 'No such transaction');
15:35:45 125  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
15:35:45 126  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 127  	  SPROC_NAME, 'Bad transaction attempt status');
15:35:45 128  WHEN OTHERS THEN
15:35:45 129  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 130  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 131  END CREATE_TRANSACTION_ATTEMPT;
15:35:45 132  
15:35:45 133  /******************************************************************************/
15:35:45 134  
15:35:45 135  PROCEDURE UPDATE_TRANSACTION_STATUS (
15:35:45 136  /*
15:35:45 137  Throws exceptions:
15:35:45 138  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 139  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 140  */
15:35:45 141  	in_transaction_id	 IN NUMBER,
15:35:45 142  	in_updated_by		 IN VARCHAR2,
15:35:45 143  	in_transaction_status_id IN NUMBER
15:35:45 144  ) AS
15:35:45 145  -- VARIABLES
15:35:45 146  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
15:35:45 147  temp_transaction_id NUMBER;
15:35:45 148  
15:35:45 149  -- EXCEPTIONS
15:35:45 150  BAD_TRANSACTION_ID     EXCEPTION;
15:35:45 151  BAD_TRANSACTION_STATUS EXCEPTION;
15:35:45 152  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 153  BEGIN
15:35:45 154  
15:35:45 155  	-- Check that transaction exists
15:35:45 156  	BEGIN
15:35:45 157  	  SELECT
15:35:45 158  	    TRANSACTION.ID into temp_transaction_id
15:35:45 159  	  FROM
15:35:45 160  	    TRANSACTION
15:35:45 161  	  WHERE
15:35:45 162  	    TRANSACTION.ID = in_transaction_id;
15:35:45 163  	  EXCEPTION
15:35:45 164  	    WHEN OTHERS THEN
15:35:45 165  	      RAISE BAD_TRANSACTION_ID;
15:35:45 166  	END;
15:35:45 167  
15:35:45 168  	-- Check that transaction status is correct
15:35:45 169  	IF    in_transaction_status_id != GLOBAL_STATUSES_V17.TRANSACTION_PENDING
15:35:45 170  	  AND in_transaction_status_id != GLOBAL_STATUSES_V17.TRANSACTION_CLOSED
15:35:45 171  	  AND in_transaction_status_id != GLOBAL_STATUSES_V17.TRANSACTION_CHARGEBACK
15:35:45 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V17.TRANSACTION_DECLINED THEN
15:35:45 173  	  RAISE BAD_TRANSACTION_STATUS;
15:35:45 174  	END IF;
15:35:45 175  
15:35:45 176  	PROCS_TRANSACTION_CRU_V17.UPDATE_TRANSACTION(
15:35:45 177  	  in_transaction_id	   => in_transaction_id,
15:35:45 178  	  in_updated_by 	   => in_updated_by,
15:35:45 179  	  in_transaction_status_id => in_transaction_status_id
15:35:45 180  	);
15:35:45 181  
15:35:45 182  EXCEPTION
15:35:45 183  WHEN BAD_TRANSACTION_ID THEN
15:35:45 184  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 185  	  SPROC_NAME, 'No such transaction');
15:35:45 186  WHEN BAD_TRANSACTION_STATUS THEN
15:35:45 187  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 188  	  SPROC_NAME, 'Bad transaction status');
15:35:45 189  WHEN OTHERS THEN
15:35:45 190  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 191  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 192  END UPDATE_TRANSACTION_STATUS;
15:35:45 193  
15:35:45 194  /******************************************************************************/
15:35:45 195  
15:35:45 196  PROCEDURE UPDATE_TRANSACTION_SETTLED (
15:35:45 197  /*
15:35:45 198  Throws exceptions:
15:35:45 199  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 200  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 201  */
15:35:45 202  	in_transaction_id	 IN NUMBER,
15:35:45 203  	in_updated_by		 IN VARCHAR2,
15:35:45 204  	in_is_settled		 IN NUMBER
15:35:45 205  ) AS
15:35:45 206  -- VARIABLES
15:35:45 207  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
15:35:45 208  temp_transaction_id NUMBER;
15:35:45 209  
15:35:45 210  -- EXCEPTIONS
15:35:45 211  BAD_TRANSACTION_ID     EXCEPTION;
15:35:45 212  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 213  BEGIN
15:35:45 214  
15:35:45 215  	-- Check that transaction exists
15:35:45 216  	BEGIN
15:35:45 217  	  SELECT
15:35:45 218  	    TRANSACTION.ID into temp_transaction_id
15:35:45 219  	  FROM
15:35:45 220  	    TRANSACTION
15:35:45 221  	  WHERE
15:35:45 222  	    TRANSACTION.ID = in_transaction_id;
15:35:45 223  	  EXCEPTION
15:35:45 224  	    WHEN OTHERS THEN
15:35:45 225  	      RAISE BAD_TRANSACTION_ID;
15:35:45 226  	END;
15:35:45 227  
15:35:45 228  	PROCS_TRANSACTION_CRU_V17.UPDATE_TRANSACTION(
15:35:45 229  	  in_transaction_id	   => in_transaction_id,
15:35:45 230  	  in_updated_by 	   => in_updated_by,
15:35:45 231  	  in_is_settled 	   => in_is_settled
15:35:45 232  	);
15:35:45 233  
15:35:45 234  EXCEPTION
15:35:45 235  WHEN BAD_TRANSACTION_ID THEN
15:35:45 236  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 237  	  SPROC_NAME, 'No such transaction');
15:35:45 238  WHEN OTHERS THEN
15:35:45 239  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 241  END UPDATE_TRANSACTION_SETTLED;
15:35:45 242  
15:35:45 243  /******************************************************************************/
15:35:45 244  
15:35:45 245  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
15:35:45 246  /*
15:35:45 247  Throws exceptions:
15:35:45 248  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 249  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 250  */
15:35:45 251  	in_transaction_attempt_id IN NUMBER,
15:35:45 252  	in_updated_by		  IN VARCHAR2
15:35:45 253  ) AS
15:35:45 254  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
15:35:45 255  -- VARIABLES
15:35:45 256  var_transaction_id NUMBER;
15:35:45 257  -- EXCEPTION
15:35:45 258  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
15:35:45 259  BEGIN
15:35:45 260  
15:35:45 261  	BEGIN
15:35:45 262  	  SELECT
15:35:45 263  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
15:35:45 264  	  FROM
15:35:45 265  	    TRANSACTION_ATTEMPT
15:35:45 266  	  WHERE
15:35:45 267  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
15:35:45 268  	  EXCEPTION
15:35:45 269  	    WHEN NO_DATA_FOUND THEN
15:35:45 270  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
15:35:45 271  	END;
15:35:45 272  
15:35:45 273  	PROCS_TRANSACTION_CRU_V17.UPDATE_TRANSACTION(
15:35:45 274  	  in_transaction_id => var_transaction_id,
15:35:45 275  	  in_updated_by     => in_updated_by
15:35:45 276  	);
15:35:45 277  
15:35:45 278  EXCEPTION
15:35:45 279  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
15:35:45 280  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 281  	  SPROC_NAME, 'No such transaction attempt');
15:35:45 282  WHEN OTHERS THEN
15:35:45 283  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 284  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 285  END UPDATE_TRNSCTN_ATTEMPT_TIME;
15:35:45 286  
15:35:45 287  /******************************************************************************/
15:35:45 288  
15:35:45 289  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
15:35:45 290  /*
15:35:45 291  Throws exceptions:
15:35:45 292  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 293  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 294  */
15:35:45 295  	in_transaction_attempt_id     IN NUMBER,
15:35:45 296  	in_transaction_attempt_status IN NUMBER
15:35:45 297  ) AS
15:35:45 298  -- VARIABLES
15:35:45 299  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
15:35:45 300  temp_transaction_attempt_id NUMBER;
15:35:45 301  
15:35:45 302  -- EXCEPTION
15:35:45 303  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
15:35:45 304  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
15:35:45 305  BEGIN
15:35:45 306  
15:35:45 307  	-- Check that transaction attempt exists
15:35:45 308  	BEGIN
15:35:45 309  	  SELECT
15:35:45 310  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
15:35:45 311  	  FROM
15:35:45 312  	    TRANSACTION_ATTEMPT
15:35:45 313  	  WHERE
15:35:45 314  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
15:35:45 315  	  EXCEPTION
15:35:45 316  	    WHEN NO_DATA_FOUND THEN
15:35:45 317  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
15:35:45 318  	END;
15:35:45 319  
15:35:45 320  	-- Check that transaction attempt is correct
15:35:45 321  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_IN_PROGRESS
15:35:45 322  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS
15:35:45 323  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_FAILED THEN
15:35:45 324  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
15:35:45 325  	END IF;
15:35:45 326  
15:35:45 327  	PROCS_TRANSACTION_CRU_V17.UPDATE_TRANSACTION_ATTEMPT(
15:35:45 328  	  in_transaction_attempt_id => in_transaction_attempt_id,
15:35:45 329  	  in_status_id		    => in_transaction_attempt_status
15:35:45 330  	);
15:35:45 331  
15:35:45 332  EXCEPTION
15:35:45 333  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
15:35:45 334  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 335  	  SPROC_NAME, 'No such transaction attempt');
15:35:45 336  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
15:35:45 337  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 338  	  SPROC_NAME, 'Bad transaction attempt status');
15:35:45 339  WHEN OTHERS THEN
15:35:45 340  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 341  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 342  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
15:35:45 343  
15:35:45 344  /******************************************************************************/
15:35:45 345  
15:35:45 346  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
15:35:45 347  /*
15:35:45 348  Throws exceptions:
15:35:45 349  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 350  */
15:35:45 351  	in_transaction_id	      IN NUMBER,
15:35:45 352  	in_transaction_attempt_status IN NUMBER,
15:35:45 353  	out_result_set		      OUT SYS_REFCURSOR
15:35:45 354  ) AS
15:35:45 355  -- VARIABLES
15:35:45 356  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
15:35:45 357  temp_transaction_id NUMBER;
15:35:45 358  -- EXCEPTIONS
15:35:45 359  BAD_TRANSACTION_ID       EXCEPTION;
15:35:45 360  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
15:35:45 361  BEGIN
15:35:45 362  
15:35:45 363  	-- Check that transaction exists
15:35:45 364  	BEGIN
15:35:45 365  	  SELECT
15:35:45 366  	    TRANSACTION.ID into temp_transaction_id
15:35:45 367  	  FROM
15:35:45 368  	    TRANSACTION
15:35:45 369  	  WHERE
15:35:45 370  	    TRANSACTION.ID = in_transaction_id;
15:35:45 371  	  EXCEPTION
15:35:45 372  	    WHEN OTHERS THEN
15:35:45 373  	      RAISE BAD_TRANSACTION_ID;
15:35:45 374  	END;
15:35:45 375  
15:35:45 376  	-- Check that transaction attempt status is correct
15:35:45 377  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_IN_PROGRESS
15:35:45 378  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS
15:35:45 379  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V17.TRANS_ATTEMPT_FAILED THEN
15:35:45 380  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
15:35:45 381  	END IF;
15:35:45 382  
15:35:45 383  	OPEN out_result_set FOR
15:35:45 384  	SELECT
15:35:45 385  	  TRANSACTION_ATTEMPT.ID,
15:35:45 386  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
15:35:45 387  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
15:35:45 388  	  TRANSACTION_ATTEMPT.CREATE_DATE,
15:35:45 389  	  TRANSACTION_ATTEMPT.CREATED_BY,
15:35:45 390  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
15:35:45 391  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
15:35:45 392  	  TRANSACTION.TRANSACTION_AMOUNT,
15:35:45 393  	  TRANSACTION.ID as "TRANSACTION_ID",
15:35:45 394  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
15:35:45 395  	FROM
15:35:45 396  	  TRANSACTION_ATTEMPT
15:35:45 397  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
15:35:45 398  	WHERE
15:35:45 399  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
15:35:45 400  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
15:35:45 401  
15:35:45 402  EXCEPTION
15:35:45 403  WHEN BAD_TRANSACTION_ID THEN
15:35:45 404  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 405  	  SPROC_NAME, 'No such transaction');
15:35:45 406  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
15:35:45 407  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 408  	  SPROC_NAME, 'Bad transaction attempt status');
15:35:45 409  WHEN OTHERS THEN
15:35:45 410  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 412  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
15:35:45 413  
15:35:45 414  /******************************************************************************/
15:35:45 415  
15:35:45 416  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
15:35:45 417  /*
15:35:45 418  Throws exceptions:
15:35:45 419  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 420  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 421  */
15:35:45 422  	in_transaction_attempt_id IN NUMBER,
15:35:45 423  	in_ext_status_code	  IN VARCHAR2,
15:35:45 424  	in_ext_status_message	  IN VARCHAR2,
15:35:45 425  	in_ext_transaction_id	  IN VARCHAR2
15:35:45 426  ) AS
15:35:45 427  -- VARIABLES
15:35:45 428  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
15:35:45 429  temp_trans_attempt_count NUMBER;
15:35:45 430  -- EXCEPTIONS
15:35:45 431  BAD_ATTEMPT_ID EXCEPTION;
15:35:45 432  BEGIN
15:35:45 433  
15:35:45 434  	SELECT
15:35:45 435  	  COUNT(*) into temp_trans_attempt_count
15:35:45 436  	FROM
15:35:45 437  	  TRANSACTION_ATTEMPT
15:35:45 438  	WHERE
15:35:45 439  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
15:35:45 440  
15:35:45 441  	IF temp_trans_attempt_count = 0 THEN
15:35:45 442  	  RAISE BAD_ATTEMPT_ID;
15:35:45 443  	END IF;
15:35:45 444  
15:35:45 445  	PROCS_TRANSACTION_CRU_V17.UPDATE_TRANSACTION_ATTEMPT(
15:35:45 446  	  in_transaction_attempt_id  => in_transaction_attempt_id,
15:35:45 447  	  in_external_status_code    => in_ext_status_code,
15:35:45 448  	  in_external_status_message => in_ext_status_message,
15:35:45 449  	  in_external_transaction_id => in_ext_transaction_id
15:35:45 450  	);
15:35:45 451  
15:35:45 452  EXCEPTION
15:35:45 453  WHEN BAD_ATTEMPT_ID THEN
15:35:45 454  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 455  	  SPROC_NAME, 'No such attempt');
15:35:45 456  WHEN OTHERS THEN
15:35:45 457  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 458  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 459  END UPDATE_TRANSACTION_ATTEMPT_INF;
15:35:45 460  
15:35:45 461  /******************************************************************************/
15:35:45 462  
15:35:45 463  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
15:35:45 464  /*
15:35:45 465  Throws exceptions:
15:35:45 466  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 467  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 468  */
15:35:45 469  	in_transaction_id IN  NUMBER,
15:35:45 470  	out_attempts_num  OUT NUMBER
15:35:45 471  ) AS
15:35:45 472  -- VARIABLES
15:35:45 473  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
15:35:45 474  temp_transaction_count NUMBER;
15:35:45 475  
15:35:45 476  -- EXCEPTIONS
15:35:45 477  BAD_TRANSACTION_ID EXCEPTION;
15:35:45 478  BEGIN
15:35:45 479  
15:35:45 480  	SELECT
15:35:45 481  	  COUNT(*) into temp_transaction_count
15:35:45 482  	FROM
15:35:45 483  	  TRANSACTION
15:35:45 484  	WHERE
15:35:45 485  	  TRANSACTION.ID = in_transaction_id;
15:35:45 486  
15:35:45 487  	IF temp_transaction_count = 0 THEN
15:35:45 488  	  RAISE BAD_TRANSACTION_ID;
15:35:45 489  	END IF;
15:35:45 490  
15:35:45 491  	SELECT
15:35:45 492  	  COUNT(*) into out_attempts_num
15:35:45 493  	FROM
15:35:45 494  	  TRANSACTION_ATTEMPT
15:35:45 495  	WHERE
15:35:45 496  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
15:35:45 497  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_FAILED;
15:35:45 498  
15:35:45 499  EXCEPTION
15:35:45 500  WHEN BAD_TRANSACTION_ID THEN
15:35:45 501  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 502  	  SPROC_NAME, 'No such transaction');
15:35:45 503  WHEN OTHERS THEN
15:35:45 504  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 505  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 506  END GET_FAILED_ATTEMPTS_NUMBER;
15:35:45 507  /******************************************************************************/
15:35:45 508  
15:35:45 509  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
15:35:45 510  /*
15:35:45 511  Throws exceptions:
15:35:45 512  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 513  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 514  */
15:35:45 515  	in_transaction_id IN  NUMBER,
15:35:45 516  	out_is_successfull  OUT NUMBER
15:35:45 517  ) AS
15:35:45 518  -- VARIABLES
15:35:45 519  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
15:35:45 520  temp_transaction_count NUMBER;
15:35:45 521  
15:35:45 522  -- EXCEPTIONS
15:35:45 523  BAD_TRANSACTION_ID EXCEPTION;
15:35:45 524  BEGIN
15:35:45 525  
15:35:45 526  	SELECT
15:35:45 527  	  COUNT(*) into temp_transaction_count
15:35:45 528  	FROM
15:35:45 529  	  TRANSACTION
15:35:45 530  	WHERE
15:35:45 531  	  TRANSACTION.ID = in_transaction_id;
15:35:45 532  
15:35:45 533  	IF temp_transaction_count = 0 THEN
15:35:45 534  	  RAISE BAD_TRANSACTION_ID;
15:35:45 535  	END IF;
15:35:45 536  
15:35:45 537  	SELECT
15:35:45 538  	  COUNT(*) into out_is_successfull
15:35:45 539  	FROM
15:35:45 540  	  TRANSACTION_ATTEMPT
15:35:45 541  	WHERE
15:35:45 542  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
15:35:45 543  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS;
15:35:45 544  
15:35:45 545  EXCEPTION
15:35:45 546  WHEN BAD_TRANSACTION_ID THEN
15:35:45 547  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 548  	  SPROC_NAME, 'No such transaction');
15:35:45 549  WHEN OTHERS THEN
15:35:45 550  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 551  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 552  END IS_TRANSACTION_SUCCESSFULL;
15:35:45 553  /******************************************************************************/
15:35:45 554  
15:35:45 555  PROCEDURE GET_TRANSACTION_AMOUNT (
15:35:45 556  /*
15:35:45 557  Throws exceptions:
15:35:45 558  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 559  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 560  */
15:35:45 561  	in_transaction_id      IN  NUMBER,
15:35:45 562  	out_transaction_amount OUT NUMBER
15:35:45 563  ) AS
15:35:45 564  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
15:35:45 565  BEGIN
15:35:45 566  
15:35:45 567  	SELECT
15:35:45 568  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
15:35:45 569  	FROM
15:35:45 570  	  TRANSACTION
15:35:45 571  	WHERE
15:35:45 572  	  TRANSACTION.ID = in_transaction_id;
15:35:45 573  
15:35:45 574  EXCEPTION
15:35:45 575  WHEN NO_DATA_FOUND THEN
15:35:45 576  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 577  	  SPROC_NAME, 'No such transaction');
15:35:45 578  WHEN OTHERS THEN
15:35:45 579  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 580  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 581  END GET_TRANSACTION_AMOUNT;
15:35:45 582  
15:35:45 583  /******************************************************************************/
15:35:45 584  
15:35:45 585  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
15:35:45 586  /*
15:35:45 587  Throws exceptions:
15:35:45 588  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 589  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 590  */
15:35:45 591  	in_charge_id   IN  NUMBER,
15:35:45 592  	out_result_set OUT SYS_REFCURSOR
15:35:45 593  ) AS
15:35:45 594  -- VARIABLES
15:35:45 595  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
15:35:45 596  temp_charge_id NUMBER;
15:35:45 597  -- EXCEPTIONS
15:35:45 598  BAD_CHARGE_ID EXCEPTION;
15:35:45 599  BEGIN
15:35:45 600  
15:35:45 601  	BEGIN
15:35:45 602  	  SELECT
15:35:45 603  	    CHARGE.ID into temp_charge_id
15:35:45 604  	  FROM
15:35:45 605  	    CHARGE
15:35:45 606  	  WHERE
15:35:45 607  	    CHARGE.ID = in_charge_id;
15:35:45 608  	  EXCEPTION
15:35:45 609  	    WHEN NO_DATA_FOUND THEN
15:35:45 610  	      RAISE BAD_CHARGE_ID;
15:35:45 611  	END;
15:35:45 612  
15:35:45 613  	OPEN out_result_set FOR
15:35:45 614  	SELECT DISTINCT
15:35:45 615  	  TRANSACTION.ID,
15:35:45 616  	  TRANSACTION.TRANSACTION_STATUS_ID,
15:35:45 617  	  TRANSACTION.CREATE_DATE,
15:35:45 618  	  TRANSACTION.TRANSACTION_AMOUNT,
15:35:45 619  	  TRANSACTION.IS_REFUND,
15:35:45 620  	  TRANSACTION.ORDER_ID
15:35:45 621  	FROM
15:35:45 622  	  CHARGE INNER JOIN TRANSACTION ON
15:35:45 623  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:35:45 624  	WHERE
15:35:45 625  	  CHARGE.ID = in_charge_id;
15:35:45 626  
15:35:45 627  EXCEPTION
15:35:45 628  WHEN BAD_CHARGE_ID THEN
15:35:45 629  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 630  	  SPROC_NAME, 'No such charge');
15:35:45 631  WHEN OTHERS THEN
15:35:45 632  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 633  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 634  END GET_TRANSACTIONS_BY_CHARGE_ID;
15:35:45 635  /******************************************************************************/
15:35:45 636  
15:35:45 637  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
15:35:45 638  /*
15:35:45 639  Throws exceptions:
15:35:45 640  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 641  */
15:35:45 642  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
15:35:45 643  	out_result_set OUT SYS_REFCURSOR
15:35:45 644  ) AS
15:35:45 645  -- VARIABLES
15:35:45 646  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
15:35:45 647  BEGIN
15:35:45 648  	OPEN out_result_set FOR
15:35:45 649  	SELECT DISTINCT
15:35:45 650  	  TRANSACTION.ID
15:35:45 651  	FROM
15:35:45 652  	  TRANSACTION
15:35:45 653  	WHERE
15:35:45 654  	  TRANSACTION.ORDER_ID = in_order_id;
15:35:45 655  
15:35:45 656  EXCEPTION
15:35:45 657  WHEN OTHERS THEN
15:35:45 658  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 659  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 660  END GET_TRANSACTION_BY_ORDER_ID;
15:35:45 661  /******************************************************************************/
15:35:45 662  
15:35:45 663  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
15:35:45 664  /*
15:35:45 665  Throws exceptions:
15:35:45 666  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 667  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 668  */
15:35:45 669  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
15:35:45 670  	out_result_set OUT SYS_REFCURSOR
15:35:45 671  ) AS
15:35:45 672  -- VARIABLES
15:35:45 673  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
15:35:45 674  temp_order_id TRANSACTION.ORDER_ID%TYPE;
15:35:45 675  -- EXCEPTIONS
15:35:45 676  BAD_ORDER_ID EXCEPTION;
15:35:45 677  BEGIN
15:35:45 678  
15:35:45 679  	--TODO BOO, REMOVE ME
15:35:45 680  	BEGIN
15:35:45 681  	  SELECT
15:35:45 682  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
15:35:45 683  	  FROM
15:35:45 684  	    TRANSACTION
15:35:45 685  	  WHERE
15:35:45 686  	    TRANSACTION.ORDER_ID = in_order_id;
15:35:45 687  	  EXCEPTION
15:35:45 688  	    WHEN NO_DATA_FOUND THEN
15:35:45 689  	      RAISE BAD_ORDER_ID;
15:35:45 690  	END;
15:35:45 691  
15:35:45 692  	OPEN out_result_set FOR
15:35:45 693  	SELECT c.ID CHARGE_ID,
15:35:45 694  	  c.CHARGE_AMOUNT,
15:35:45 695  	  c.CHARGE_STATUS_ID,
15:35:45 696  	  c.INSTRUMENT_ID,
15:35:45 697  	  c.INSTRUMENT_TYPE_ID,
15:35:45 698  	  c.INVOICE_ID,
15:35:45 699  	  t.ID TRANSACTION_ID,
15:35:45 700  	  t.IS_REFUND,
15:35:45 701  	  t.IS_SETTLED,
15:35:45 702  	  t.ORDER_ID,
15:35:45 703  	  t.TRANSACTION_AMOUNT,
15:35:45 704  	  t.TRANSACTION_STATUS_ID,
15:35:45 705  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
15:35:45 706  	  t.CREATED_BY TRANSACTION_CREATED_BY,
15:35:45 707  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
15:35:45 708  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
15:35:45 709  	FROM CHARGE c
15:35:45 710  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
15:35:45 711  	WHERE TRANSACTION_ID IN (
15:35:45 712  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
15:35:45 713  	);
15:35:45 714  
15:35:45 715  EXCEPTION
15:35:45 716  WHEN BAD_ORDER_ID THEN
15:35:45 717  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 718  	  SPROC_NAME, 'No such order');
15:35:45 719  WHEN OTHERS THEN
15:35:45 720  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 721  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 722  END GET_TRANSACTIONS_BY_ORDER_ID;
15:35:45 723  /******************************************************************************/
15:35:45 724  
15:35:45 725  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
15:35:45 726  /*
15:35:45 727  Throws exceptions:
15:35:45 728  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 729  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 730  */
15:35:45 731  	in_invoice_id	IN  NUMBER,
15:35:45 732  	out_result_set OUT SYS_REFCURSOR
15:35:45 733  ) AS
15:35:45 734  -- VARIABLES
15:35:45 735  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
15:35:45 736  temp_invoice_id NUMBER;
15:35:45 737  -- EXCEPTIONS
15:35:45 738  BAD_INVOICE_ID EXCEPTION;
15:35:45 739  BEGIN
15:35:45 740  
15:35:45 741  	BEGIN
15:35:45 742  	  SELECT
15:35:45 743  	    INVOICE.ID into temp_invoice_id
15:35:45 744  	  FROM
15:35:45 745  	    INVOICE
15:35:45 746  	  WHERE
15:35:45 747  	    INVOICE.ID = in_invoice_id;
15:35:45 748  	  EXCEPTION
15:35:45 749  	    WHEN NO_DATA_FOUND THEN
15:35:45 750  	      RAISE BAD_INVOICE_ID;
15:35:45 751  	END;
15:35:45 752  
15:35:45 753  	OPEN out_result_set FOR
15:35:45 754  	SELECT DISTINCT
15:35:45 755  	  TRANSACTION.ID,
15:35:45 756  	  TRANSACTION.TRANSACTION_STATUS_ID,
15:35:45 757  	  TRANSACTION.CREATE_DATE,
15:35:45 758  	  TRANSACTION.UPDATE_DATE,
15:35:45 759  	  TRANSACTION.ORDER_ID,
15:35:45 760  	  TRANSACTION.TRANSACTION_AMOUNT
15:35:45 761  	FROM
15:35:45 762  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
15:35:45 763  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
15:35:45 764  	WHERE
15:35:45 765  	  INVOICE.ID = in_invoice_id
15:35:45 766  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V17.TRUE
15:35:45 767  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
15:35:45 768  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V17.TRANSACTION_CLOSED;
15:35:45 769  
15:35:45 770  EXCEPTION
15:35:45 771  WHEN BAD_INVOICE_ID THEN
15:35:45 772  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 773  	  SPROC_NAME, 'No such invoice');
15:35:45 774  WHEN OTHERS THEN
15:35:45 775  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 776  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 777  END GET_CLOSED_REFUNDS_BY_INVOICE;
15:35:45 778  
15:35:45 779  /******************************************************************************/
15:35:45 780  
15:35:45 781  PROCEDURE GET_TRANSACTION_ATTEMPTS (
15:35:45 782  /*
15:35:45 783  Throws exceptions:
15:35:45 784  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 785  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 786  */
15:35:45 787  	in_transaction_id IN  NUMBER,
15:35:45 788  	out_result_set	  OUT SYS_REFCURSOR
15:35:45 789  ) AS
15:35:45 790  -- VARIABLES
15:35:45 791  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
15:35:45 792  temp_transaction_id NUMBER;
15:35:45 793  -- EXCEPTIONS
15:35:45 794  BAD_TRANSACTION_ID EXCEPTION;
15:35:45 795  BEGIN
15:35:45 796  
15:35:45 797  	BEGIN
15:35:45 798  	  SELECT
15:35:45 799  	    TRANSACTION.ID into temp_transaction_id
15:35:45 800  	  FROM
15:35:45 801  	    TRANSACTION
15:35:45 802  	  WHERE
15:35:45 803  	    TRANSACTION.ID = in_transaction_id;
15:35:45 804  	  EXCEPTION
15:35:45 805  	    WHEN NO_DATA_FOUND THEN
15:35:45 806  	      RAISE BAD_TRANSACTION_ID;
15:35:45 807  	END;
15:35:45 808  
15:35:45 809  	OPEN out_result_set FOR
15:35:45 810  	SELECT
15:35:45 811  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
15:35:45 812  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
15:35:45 813  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
15:35:45 814  	  TRANSACTION_ATTEMPT.CREATE_DATE,
15:35:45 815  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
15:35:45 816  	FROM
15:35:45 817  	  TRANSACTION_ATTEMPT
15:35:45 818  	WHERE
15:35:45 819  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
15:35:45 820  
15:35:45 821  EXCEPTION
15:35:45 822  WHEN BAD_TRANSACTION_ID THEN
15:35:45 823  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 824  	  SPROC_NAME, 'No such transaction');
15:35:45 825  WHEN OTHERS THEN
15:35:45 826  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 827  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 828  END GET_TRANSACTION_ATTEMPTS;
15:35:45 829  
15:35:45 830  /******************************************************************************/
15:35:45 831  
15:35:45 832  PROCEDURE RESERVE_TRANSACTION_ID (
15:35:45 833  /*
15:35:45 834  Throws exceptions:
15:35:45 835  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 836  */
15:35:45 837  	out_transaction_id OUT NUMBER
15:35:45 838  ) AS
15:35:45 839  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
15:35:45 840  BEGIN
15:35:45 841  	SELECT
15:35:45 842  	  TRN_ID_SEQ.nextVal into out_transaction_id
15:35:45 843  	FROM DUAL;
15:35:45 844  EXCEPTION
15:35:45 845  WHEN OTHERS THEN
15:35:45 846  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 847  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 848  END RESERVE_TRANSACTION_ID;
15:35:45 849  
15:35:45 850  /******************************************************************************/
15:35:45 851  
15:35:45 852  PROCEDURE GET_TRANSACTION_BY_ID (
15:35:45 853  /*
15:35:45 854  Throws exceptions:
15:35:45 855  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 856  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 857  */
15:35:45 858  	in_transaction_id IN NUMBER,
15:35:45 859  	out_result_set	  OUT SYS_REFCURSOR
15:35:45 860  ) AS
15:35:45 861  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
15:35:45 862  -- VARIABLES
15:35:45 863  temp_transaction_id NUMBER;
15:35:45 864  -- EXCPTIONS
15:35:45 865  BAD_TRANSACTION_ID EXCEPTION;
15:35:45 866  BEGIN
15:35:45 867  	BEGIN
15:35:45 868  	  SELECT
15:35:45 869  	    TRANSACTION.ID into temp_transaction_id
15:35:45 870  	  FROM
15:35:45 871  	    TRANSACTION
15:35:45 872  	  WHERE
15:35:45 873  	    TRANSACTION.ID = in_transaction_id;
15:35:45 874  	  EXCEPTION
15:35:45 875  	    WHEN NO_DATA_FOUND THEN
15:35:45 876  	      RAISE BAD_TRANSACTION_ID;
15:35:45 877  	END;
15:35:45 878  
15:35:45 879  	PROCS_TRANSACTION_CRU_V17.READ_TRANSACTION(
15:35:45 880  	  in_transaction_id => in_transaction_id,
15:35:45 881  	  out_result_set    => out_result_set
15:35:45 882  	);
15:35:45 883  
15:35:45 884  EXCEPTION
15:35:45 885  WHEN NO_DATA_FOUND THEN
15:35:45 886  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 887  	  SPROC_NAME, 'No such transaction');
15:35:45 888  WHEN OTHERS THEN
15:35:45 889  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 890  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 891  END GET_TRANSACTION_BY_ID;
15:35:45 892  
15:35:45 893  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:35:45 894  /*
15:35:45 895  Throws exceptions:
15:35:45 896  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 897  APP_EXCEPTION_CODES_V17.INTRNAL_ERROR
15:35:45 898  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 899  */
15:35:45 900  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:35:45 901  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:35:45 902  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:35:45 903  ) AS
15:35:45 904  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
15:35:45 905  -- VARIABLES
15:35:45 906  temp_transaction_id TRANSACTION.ID%TYPE;
15:35:45 907  -- EXCEPTIONS
15:35:45 908  BAD_TRANSACTION_ID   EXCEPTION;
15:35:45 909  ORDER_ID_IS_NOT_NULL EXCEPTION;
15:35:45 910  CRU_UNKNOWN_ERROR    EXCEPTION;
15:35:45 911  EXCEPTION_MESSAGE VARCHAR2(1024);
15:35:45 912  BEGIN
15:35:45 913  	BEGIN
15:35:45 914  	  SELECT
15:35:45 915  	    TRANSACTION.ID into temp_transaction_id
15:35:45 916  	  FROM
15:35:45 917  	    TRANSACTION
15:35:45 918  	  WHERE
15:35:45 919  	    TRANSACTION.ID = in_transaction_id;
15:35:45 920  	  EXCEPTION
15:35:45 921  	    WHEN NO_DATA_FOUND THEN
15:35:45 922  	      RAISE BAD_TRANSACTION_ID;
15:35:45 923  	END;
15:35:45 924  
15:35:45 925  	BEGIN
15:35:45 926  	  PROCS_TRANSACTION_CRU_V17.UPDATE_TRANSACTION_ORDER_ID(
15:35:45 927  	    in_transaction_id => in_transaction_id,
15:35:45 928  	    in_order_id       => in_order_id,
15:35:45 929  	    in_updated_by     => in_updated_by
15:35:45 930  	  );
15:35:45 931  	  EXCEPTION
15:35:45 932  	    WHEN OTHERS THEN
15:35:45 933  	      IF SQLCODE = APP_EXCEPTION_CODES_V17.NOT_FOUND THEN
15:35:45 934  		RAISE ORDER_ID_IS_NOT_NULL;
15:35:45 935  	      ELSE
15:35:45 936  		EXCEPTION_MESSAGE := SQLERRM;
15:35:45 937  		RAISE CRU_UNKNOWN_ERROR;
15:35:45 938  	      END IF;
15:35:45 939  	END;
15:35:45 940  
15:35:45 941  EXCEPTION
15:35:45 942  WHEN BAD_TRANSACTION_ID THEN
15:35:45 943  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 944  	  SPROC_NAME, 'No such transaction');
15:35:45 945  WHEN ORDER_ID_IS_NOT_NULL THEN
15:35:45 946  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 947  	  SPROC_NAME, 'Order id is not null');
15:35:45 948  WHEN CRU_UNKNOWN_ERROR THEN
15:35:45 949  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 950  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
15:35:45 951  WHEN OTHERS THEN
15:35:45 952  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 953  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 954  END UPDATE_TRANSACTION_ORDER_ID;
15:35:45 955  
15:35:45 956  /******************************************************************************/
15:35:45 957  
15:35:45 958  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
15:35:45 959  	in_transaction_id IN NUMBER
15:35:45 960  ) RETURN NUMBER AS
15:35:45 961  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
15:35:45 962  -- Variables
15:35:45 963  var_tax_amount NUMBER(10,2);
15:35:45 964  BEGIN
15:35:45 965  
15:35:45 966  	SELECT
15:35:45 967  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
15:35:45 968  	FROM
15:35:45 969  	  LINE_ITEM LI
15:35:45 970  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
15:35:45 971  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
15:35:45 972  	WHERE
15:35:45 973  	  CH.TRANSACTION_ID = in_transaction_id;
15:35:45 974  
15:35:45 975  	IF var_tax_amount IS NULL THEN
15:35:45 976  	  var_tax_amount := 0;
15:35:45 977  	END IF;
15:35:45 978  
15:35:45 979  	RETURN var_tax_amount;
15:35:45 980  
15:35:45 981  END GET_TRANSACTION_TAX_AMOUNT;
15:35:45 982  
15:35:45 983  /******************************************************************************/
15:35:45 984  
15:35:45 985  FUNCTION GET_TRANSACTION_INTRL_TAXES (
15:35:45 986  	in_transaction_id IN NUMBER
15:35:45 987  ) RETURN NUMBER AS
15:35:45 988  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
15:35:45 989  -- Variables
15:35:45 990  var_intrl_tax_amount NUMBER(10, 2);
15:35:45 991  BEGIN
15:35:45 992  
15:35:45 993  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
15:35:45 994  	FROM
15:35:45 995  	  LINE_ITEM LI
15:35:45 996  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
15:35:45 997  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
15:35:45 998  	  INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
15:35:45 999  	WHERE
15:35:45 1000  	   CH.TRANSACTION_ID = in_transaction_id
15:35:45 1001  	   AND T.TAX_TYPE_ID IN (
15:35:45 1002  	     SELECT GLOBAL_ENUMS_V17.TAX_TYPE_VAT FROM DUAL
15:35:45 1003  	   );
15:35:45 1004  
15:35:45 1005  	 IF var_intrl_tax_amount IS NULL THEN
15:35:45 1006  	   var_intrl_tax_amount := 0;
15:35:45 1007  	 END IF;
15:35:45 1008  
15:35:45 1009  	 RETURN var_intrl_tax_amount;
15:35:45 1010  
15:35:45 1011  END GET_TRANSACTION_INTRL_TAXES;
15:35:45 1012  
15:35:45 1013  /******************************************************************************/
15:35:45 1014  -- norlov: #38796
15:35:45 1015  PROCEDURE GET_TRANSACTIONS (
15:35:45 1016  /*
15:35:45 1017  Throws exceptions:
15:35:45 1018  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1019  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1020  */
15:35:45 1021  	 in_group_id	       IN  NUMBER,
15:35:45 1022  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
15:35:45 1023  	 in_subscription_id    IN NUMBER DEFAULT NULL,
15:35:45 1024  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
15:35:45 1025  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
15:35:45 1026  	 in_transaction_status IN NUMBER DEFAULT NULL,
15:35:45 1027  	 out_result_set        OUT SYS_REFCURSOR
15:35:45 1028  ) AS
15:35:45 1029  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
15:35:45 1030  -- VARIABLES
15:35:45 1031  var_account_id ACCOUNT.ID%TYPE;
15:35:45 1032  statement VARCHAR2(2000);
15:35:45 1033  -- EXCEPTIONS
15:35:45 1034  BAD_GROUP_ID   EXCEPTION;
15:35:45 1035  BEGIN
15:35:45 1036  	-- check group id
15:35:45 1037  	BEGIN
15:35:45 1038  	   SELECT
15:35:45 1039  	     ACCOUNT.ID into var_account_id
15:35:45 1040  	   FROM
15:35:45 1041  	     ACCOUNT
15:35:45 1042  	   WHERE
15:35:45 1043  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:45 1044  	   EXCEPTION
15:35:45 1045  	     WHEN NO_DATA_FOUND THEN
15:35:45 1046  	       RAISE BAD_GROUP_ID;
15:35:45 1047  	 END;
15:35:45 1048  
15:35:45 1049  	 OPEN out_result_set FOR
15:35:45 1050  	 SELECT
15:35:45 1051  	   TRANSACTION.ID,
15:35:45 1052  	   TRANSACTION.TRANSACTION_STATUS_ID,
15:35:45 1053  	   TRANSACTION.TRANSACTION_AMOUNT,
15:35:45 1054  	   TRANSACTION.CREATE_DATE,
15:35:45 1055  	   TRANSACTION.CREATED_BY,
15:35:45 1056  	   TRANSACTION.IS_REFUND,
15:35:45 1057  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
15:35:45 1058  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
15:35:45 1059  	 FROM
15:35:45 1060  	   TRANSACTION
15:35:45 1061  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
15:35:45 1062  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
15:35:45 1063  	 WHERE
15:35:45 1064  	   -- Filter by invoice ID
15:35:45 1065  	   (
15:35:45 1066  	     INVOICE.ID IN (
15:35:45 1067  	       -- Gift certificate invoices
15:35:45 1068  	       SELECT
15:35:45 1069  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
15:35:45 1070  	       FROM
15:35:45 1071  		 GIFT_CERTIFICATE
15:35:45 1072  	       WHERE
15:35:45 1073  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
15:35:45 1074  		 -- If subscription_id is set then return nothing
15:35:45 1075  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
15:35:45 1076  	     )
15:35:45 1077  	     OR
15:35:45 1078  	     INVOICE.ID IN (
15:35:45 1079  	       SELECT
15:35:45 1080  		 LICENSE.INVOICE_ID
15:35:45 1081  	       FROM
15:35:45 1082  		 LICENSE
15:35:45 1083  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 1084  	       WHERE
15:35:45 1085  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:45 1086  		 -- Filter by subscription id
15:35:45 1087  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
15:35:45 1088  	     )
15:35:45 1089  	   )
15:35:45 1090  	   -- Filter by invoice id
15:35:45 1091  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
15:35:45 1092  	   -- Filter by start date
15:35:45 1093  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
15:35:45 1094  	   -- Filter by end date
15:35:45 1095  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
15:35:45 1096  	   -- Filter by transaction status
15:35:45 1097  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
15:35:45 1098  
15:35:45 1099  /*
15:35:45 1100  
15:35:45 1101  statement :=  'select distinct '||CHR(10)
15:35:45 1102  || ' TRANSACTION.ID,'||CHR(10)
15:35:45 1103  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
15:35:45 1104  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
15:35:45 1105  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
15:35:45 1106  || ' TRANSACTION.CREATED_BY, '||CHR(10)
15:35:45 1107  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
15:35:45 1108  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
15:35:45 1109  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
15:35:45 1110  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
15:35:45 1111  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
15:35:45 1112  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
15:35:45 1113  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
15:35:45 1114  
15:35:45 1115  IF (in_transaction_status IS NOT NULL) THEN
15:35:45 1116  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
15:35:45 1117  END IF;
15:35:45 1118  
15:35:45 1119  IF (in_invoice_id IS NOT NULL) THEN
15:35:45 1120  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
15:35:45 1121  END IF;
15:35:45 1122  
15:35:45 1123  IF (in_subscription_id IS NOT NULL) THEN
15:35:45 1124  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
15:35:45 1125  END IF;
15:35:45 1126  
15:35:45 1127  IF (in_start_date IS NOT NULL) THEN
15:35:45 1128  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
15:35:45 1129  END IF;
15:35:45 1130  
15:35:45 1131  IF (in_end_date IS NOT NULL) THEN
15:35:45 1132  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
15:35:45 1133  END IF;
15:35:45 1134  dbms_output.put_line(statement);
15:35:45 1135  OPEN out_result_set FOR statement;
15:35:45 1136  
15:35:45 1137  */
15:35:45 1138  
15:35:45 1139  EXCEPTION
15:35:45 1140  WHEN BAD_GROUP_ID THEN
15:35:45 1141  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1142  	   SPROC_NAME, 'No such group');
15:35:45 1143  WHEN OTHERS THEN
15:35:45 1144  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1145  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1146  END GET_TRANSACTIONS;
15:35:45 1147  
15:35:45 1148  FUNCTION IS_TRANSACTION_COLLECTED (
15:35:45 1149  /*
15:35:45 1150  Throws:
15:35:45 1151  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1152  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1153  Returns:
15:35:45 1154  GLOBAL_CONST.TRUE if transaction collected,
15:35:45 1155  GLOBAL_CONST.FALSE else
15:35:45 1156  */
15:35:45 1157  	 in_transaction_id IN NUMBER
15:35:45 1158  ) RETURN NUMBER AS
15:35:45 1159  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
15:35:45 1160  -- VARIABLES
15:35:45 1161  temp_transaction_id     NUMBER;
15:35:45 1162  var_success_attemps_num NUMBER;
15:35:45 1163  -- EXCEPTIONS
15:35:45 1164  BAD_TRANSACTION_ID EXCEPTION;
15:35:45 1165  BEGIN
15:35:45 1166  
15:35:45 1167  	 BEGIN
15:35:45 1168  	   SELECT
15:35:45 1169  	     TRANSACTION.ID into temp_transaction_id
15:35:45 1170  	   FROM
15:35:45 1171  	     TRANSACTION
15:35:45 1172  	   WHERE
15:35:45 1173  	     TRANSACTION.ID = in_transaction_id;
15:35:45 1174  	   EXCEPTION
15:35:45 1175  	     WHEN NO_DATA_FOUND THEN
15:35:45 1176  	       RAISE BAD_TRANSACTION_ID;
15:35:45 1177  	 END;
15:35:45 1178  
15:35:45 1179  	 SELECT
15:35:45 1180  	   COUNT(*) into var_success_attemps_num
15:35:45 1181  	 FROM
15:35:45 1182  	   TRANSACTION_ATTEMPT
15:35:45 1183  	 WHERE
15:35:45 1184  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
15:35:45 1185  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS FROM DUAL );
15:35:45 1186  
15:35:45 1187  	 IF var_success_attemps_num > 0 THEN
15:35:45 1188  	   RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 1189  	 ELSE
15:35:45 1190  	   RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 1191  	 END IF;
15:35:45 1192  
15:35:45 1193  EXCEPTION
15:35:45 1194  WHEN BAD_TRANSACTION_ID THEN
15:35:45 1195  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1196  	   SPROC_NAME, 'No such transaction');
15:35:45 1197  WHEN OTHERS THEN
15:35:45 1198  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1199  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1200  END IS_TRANSACTION_COLLECTED;
15:35:45 1201  
15:35:45 1202  
15:35:45 1203  /******************************************************************************/
15:35:45 1204  PROCEDURE GET_ATTEMPT_NUMBER (
15:35:45 1205  /*
15:35:45 1206  Throws exceptions:
15:35:45 1207  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1208  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1209  */
15:35:45 1210  	 in_charge_id	in  number,
15:35:45 1211  	 out_attempt_count OUT NUMBER
15:35:45 1212  ) AS
15:35:45 1213  -- VARIABLES
15:35:45 1214  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ATTEMPT_NUMBER';
15:35:45 1215  temp_transaction_id NUMBER;
15:35:45 1216  -- EXCEPTIONS
15:35:45 1217  BAD_CHARGE_ID EXCEPTION;
15:35:45 1218  BEGIN
15:35:45 1219  
15:35:45 1220  	 BEGIN
15:35:45 1221  	   SELECT
15:35:45 1222  	     TRANSACTION_ID into temp_transaction_id
15:35:45 1223  	   FROM
15:35:45 1224  	     CHARGE
15:35:45 1225  	   WHERE
15:35:45 1226  	     CHARGE.ID = in_charge_id;
15:35:45 1227  	   EXCEPTION
15:35:45 1228  	     WHEN NO_DATA_FOUND THEN
15:35:45 1229  	       RAISE BAD_CHARGE_ID;
15:35:45 1230  	 END;
15:35:45 1231  
15:35:45 1232  	 select
15:35:45 1233  	   count(1)
15:35:45 1234  	 into
15:35:45 1235  	   out_attempt_count
15:35:45 1236  	 from
15:35:45 1237  	   transaction tr
15:35:45 1238  	 inner join
15:35:45 1239  	   transaction_attempt ta
15:35:45 1240  	 on (tr.id = ta.transaction_id)
15:35:45 1241  	 where
15:35:45 1242  	   tr.ID = temp_transaction_id;
15:35:45 1243  
15:35:45 1244  	 out_attempt_count := out_attempt_count + 1;
15:35:45 1245  
15:35:45 1246  EXCEPTION
15:35:45 1247  WHEN BAD_CHARGE_ID THEN
15:35:45 1248  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1249  	   SPROC_NAME, 'No such charge');
15:35:45 1250  WHEN OTHERS THEN
15:35:45 1251  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1252  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1253  end GET_ATTEMPT_NUMBER;
15:35:45 1254  /******************************************************************************/
15:35:45 1255  
15:35:45 1256  END PROCS_TRANSACTION_V17;
15:35:45 1257  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.08
15:35:45 SQL> 
15:35:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V17" AS
15:35:45   2  
15:35:45   3  PROCEDURE CREATE_LICENSE(
15:35:45   4  /*
15:35:45   5  Throws exceptions:
15:35:45   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45   8  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:45   9  */
15:35:45  10  	in_status_id		    IN NUMBER,
15:35:45  11  	in_needs_entitlements	    IN NUMBER,
15:35:45  12  	in_start_date		    IN DATE,
15:35:45  13  	in_end_date		    IN DATE,
15:35:45  14  	in_offer_id		    IN NUMBER,
15:35:45  15  	in_subscription_id	    IN NUMBER,
15:35:45  16  	in_invoice_id		    IN NUMBER,
15:35:45  17  	in_created_by		    IN VARCHAR2,
15:35:45  18  	in_is_extension 	    IN NUMBER,
15:35:45  19  	in_current_offer_index	    IN NUMBER,
15:35:45  20  	in_current_offer_recurr_num IN NUMBER,
15:35:45  21  	out_license_id		    OUT NUMBER
15:35:45  22  ) AS
15:35:45  23  -- VARIABLES
15:35:45  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
15:35:45  25  temp_offer_id	   NUMBER;
15:35:45  26  temp_subscription_id NUMBER;
15:35:45  27  temp_invoice_id	   NUMBER;
15:35:45  28  
15:35:45  29  var_new_license_id NUMBER;
15:35:45  30  var_offer_duration VARCHAR2(30);
15:35:45  31  
15:35:45  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
15:35:45  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
15:35:45  34  var_offer_years	    NUMBER;
15:35:45  35  var_offer_months	    NUMBER;
15:35:45  36  var_offer_days	    NUMBER;
15:35:45  37  
15:35:45  38  -- EXCEPTIONS
15:35:45  39  BAD_OFFER_ID	     EXCEPTION;
15:35:45  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
15:35:45  41  BAD_INVOICE_ID	     EXCEPTION;
15:35:45  42  BAD_OFFER_DURATION     EXCEPTION;
15:35:45  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45  44  BEGIN
15:35:45  45  
15:35:45  46  	-- TODO:
15:35:45  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
15:35:45  48  
15:35:45  49  	out_license_id := NULL;
15:35:45  50  
15:35:45  51  	-- get offer id and offer entitlement duration
15:35:45  52  	BEGIN
15:35:45  53  	  SELECT
15:35:45  54  	    OFFER.ID,
15:35:45  55  	    OFFER.ENTITLEMENT_DURATION
15:35:45  56  	    into
15:35:45  57  	    temp_offer_id,
15:35:45  58  	    var_offer_duration
15:35:45  59  	  FROM
15:35:45  60  	    OFFER
15:35:45  61  	  WHERE
15:35:45  62  	    OFFER.ID = in_offer_id;
15:35:45  63  	  EXCEPTION
15:35:45  64  	  WHEN NO_DATA_FOUND THEN
15:35:45  65  	    RAISE BAD_OFFER_ID;
15:35:45  66  	END;
15:35:45  67  
15:35:45  68  	-- Check that subscription exists
15:35:45  69  	BEGIN
15:35:45  70  	  SELECT
15:35:45  71  	    SUBSCRIPTION.ID into temp_subscription_id
15:35:45  72  	  FROM
15:35:45  73  	    SUBSCRIPTION
15:35:45  74  	  WHERE
15:35:45  75  	    SUBSCRIPTION.ID = in_subscription_id;
15:35:45  76  	  EXCEPTION
15:35:45  77  	  WHEN NO_DATA_FOUND THEN
15:35:45  78  	    RAISE BAD_SUBSCRIPTION_ID;
15:35:45  79  	END;
15:35:45  80  
15:35:45  81  	-- Check that invoice exists
15:35:45  82  	BEGIN
15:35:45  83  	  SELECT
15:35:45  84  	    INVOICE.ID into temp_invoice_id
15:35:45  85  	  FROM
15:35:45  86  	    INVOICE
15:35:45  87  	  WHERE
15:35:45  88  	    INVOICE.ID = in_invoice_id;
15:35:45  89  	  EXCEPTION
15:35:45  90  	  WHEN NO_DATA_FOUND THEN
15:35:45  91  	    RAISE BAD_INVOICE_ID;
15:35:45  92  	END;
15:35:45  93  
15:35:45  94  	-- convert offer duration into intervals
15:35:45  95  	BEGIN
15:35:45  96  	  PROCS_COMMON_V17.ISO8601DURATION_TO_INTERVALS(
15:35:45  97  	    var_offer_duration,
15:35:45  98  	    var_offer_years,
15:35:45  99  	    var_offer_months,
15:35:45 100  	    var_offer_days);
15:35:45 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
15:35:45 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
15:35:45 103  	  EXCEPTION
15:35:45 104  	    WHEN OTHERS THEN
15:35:45 105  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 106  	      RAISE BAD_OFFER_DURATION;
15:35:45 107  	END;
15:35:45 108  
15:35:45 109  	-- insert new row into license table
15:35:45 110  	PROCS_LICENSE_CRU_V17.CREATE_LICENSE(
15:35:45 111  	  out_license_id	      => var_new_license_id,
15:35:45 112  	  in_license_status_id	      => in_status_id,
15:35:45 113  	  in_needs_entitlements       => in_needs_entitlements,
15:35:45 114  	  in_start_date 	      => in_start_date,
15:35:45 115  	  in_offer_id		      => in_offer_id,
15:35:45 116  	  in_subscription_id	      => in_subscription_id,
15:35:45 117  	  in_invoice_id 	      => in_invoice_id,
15:35:45 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
15:35:45 119  	  in_created_by 	      => in_created_by,
15:35:45 120  	  in_is_extension	      => in_is_extension,
15:35:45 121  	  in_current_offer_index      => in_current_offer_index,
15:35:45 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
15:35:45 123  	);
15:35:45 124  
15:35:45 125  	out_license_id := var_new_license_id;
15:35:45 126  
15:35:45 127  EXCEPTION
15:35:45 128  WHEN BAD_OFFER_DURATION THEN
15:35:45 129  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
15:35:45 131  WHEN BAD_OFFER_ID THEN
15:35:45 132  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 133  	  SPROC_NAME, 'No such offer');
15:35:45 134  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 135  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 136  	  SPROC_NAME, 'No such subscription');
15:35:45 137  WHEN BAD_INVOICE_ID THEN
15:35:45 138  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 139  	  SPROC_NAME, 'No such invoice');
15:35:45 140  WHEN OTHERS THEN
15:35:45 141  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 143  END;
15:35:45 144  
15:35:45 145  /******************************************************************************/
15:35:45 146  
15:35:45 147  PROCEDURE UPDATE_LICENSE_STATUS(
15:35:45 148  	  in_license_id     IN NUMBER,
15:35:45 149  	  in_license_status IN NUMBER,
15:35:45 150  	  in_updated_by     IN VARCHAR2,
15:35:45 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:45 152  ) AS
15:35:45 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
15:35:45 154  -- VARIABLES
15:35:45 155  temp_license_id NUMBER;
15:35:45 156  -- EXCEPTIONS
15:35:45 157  BAD_LICENSE_ID	     EXCEPTION;
15:35:45 158  BAD_LICENSE_STATUS     EXCEPTION;
15:35:45 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 160  BEGIN
15:35:45 161  
15:35:45 162  	BEGIN
15:35:45 163  	  SELECT
15:35:45 164  	    ID into temp_license_id
15:35:45 165  	  FROM
15:35:45 166  	    LICENSE
15:35:45 167  	  WHERE
15:35:45 168  	    LICENSE.ID = in_license_id;
15:35:45 169  	  EXCEPTION
15:35:45 170  	    WHEN NO_DATA_FOUND THEN
15:35:45 171  	      RAISE BAD_LICENSE_ID;
15:35:45 172  	END;
15:35:45 173  
15:35:45 174  	IF in_license_status != GLOBAL_STATUSES_V17.LICENSE_CLOSED
15:35:45 175  	   AND in_license_status != GLOBAL_STATUSES_V17.LICENSE_ACTIVE THEN
15:35:45 176  	  RAISE BAD_LICENSE_STATUS;
15:35:45 177  	END IF;
15:35:45 178  
15:35:45 179  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V17.TRUE) then
15:35:45 180  	  PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 181  	    in_license_id	 => in_license_id,
15:35:45 182  	    in_updated_by	 => in_updated_by,
15:35:45 183  	    in_license_status_id => in_license_status,
15:35:45 184  	    in_entitlement_end_date	 => sysdate
15:35:45 185  	  );
15:35:45 186  	ELSE
15:35:45 187  	  PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 188  	    in_license_id	 => in_license_id,
15:35:45 189  	    in_updated_by	 => in_updated_by,
15:35:45 190  	    in_license_status_id => in_license_status
15:35:45 191  	  );
15:35:45 192  	END IF;
15:35:45 193  
15:35:45 194  EXCEPTION
15:35:45 195  WHEN BAD_LICENSE_STATUS THEN
15:35:45 196  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 197  	  SPROC_NAME, 'Bad status id');
15:35:45 198  WHEN BAD_LICENSE_ID THEN
15:35:45 199  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 200  	  SPROC_NAME, 'No such license');
15:35:45 201  WHEN OTHERS THEN
15:35:45 202  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 204  END UPDATE_LICENSE_STATUS;
15:35:45 205  
15:35:45 206  /******************************************************************************/
15:35:45 207  
15:35:45 208  PROCEDURE GET_ENDING_LICENSES (
15:35:45 209  	in_hours_number IN NUMBER,
15:35:45 210  	out_result_set	OUT SYS_REFCURSOR
15:35:45 211  ) AS
15:35:45 212  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
15:35:45 213  -- VARIABLES
15:35:45 214  var_days		NUMBER;
15:35:45 215  var_hours 	NUMBER;
15:35:45 216  var_time_interval INTERVAL DAY (3) TO SECOND;
15:35:45 217  BEGIN
15:35:45 218  
15:35:45 219  	var_hours := mod(in_hours_number,24);
15:35:45 220  	var_days := (in_hours_number - var_hours) / 24;
15:35:45 221  	var_time_interval := var_days||' '||var_hours||':0:0';
15:35:45 222  
15:35:45 223  	OPEN out_result_set FOR
15:35:45 224  SELECT * FROM
15:35:45 225  (
15:35:45 226  	SELECT
15:35:45 227  	  LICENSE.ID,
15:35:45 228  	  LICENSE.CREATE_DATE,
15:35:45 229  	  LICENSE.CREATED_BY,
15:35:45 230  	  LICENSE.CURRENT_OFFER_INDEX,
15:35:45 231  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
15:35:45 232  	  LICENSE.END_DATE,
15:35:45 233  	  LICENSE.ENTITLEMENT_END_DATE,
15:35:45 234  	  LICENSE.INVOICE_ID,
15:35:45 235  	  LICENSE.IS_EXTENSION,
15:35:45 236  	  LICENSE.LICENSE_STATUS_ID,
15:35:45 237  	  LICENSE.OFFER_ID,
15:35:45 238  	  LICENSE.START_DATE,
15:35:45 239  	  LICENSE.SUBSCRIPTION_ID,
15:35:45 240  	  LICENSE.UPDATE_DATE,
15:35:45 241  	  LICENSE.UPDATED_BY
15:35:45 242  	FROM
15:35:45 243  	  LICENSE
15:35:45 244  	WHERE
15:35:45 245  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
15:35:45 246  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 247  	  AND NOT EXISTS
15:35:45 248  	  (
15:35:45 249  	    SELECT NULL
15:35:45 250  	    FROM PROCESS_RETRY_THROTTLE
15:35:45 251  	    WHERE PROCESS_NAME = SPROC_NAME
15:35:45 252  	      AND GENERIC_ID = LICENSE.ID
15:35:45 253  	  )
15:35:45 254  	  AND ROWNUM <= 10000
15:35:45 255  	  ORDER BY dbms_random.value
15:35:45 256  ) WHERE
15:35:45 257  	  ROWNUM <= 1000
15:35:45 258  	  ;
15:35:45 259  EXCEPTION
15:35:45 260  WHEN OTHERS THEN
15:35:45 261  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 263  END GET_ENDING_LICENSES;
15:35:45 264  
15:35:45 265  
15:35:45 266  /******************************************************************************/
15:35:45 267  
15:35:45 268  PROCEDURE GET_ENDING_LICENSES_CC (
15:35:45 269  	in_hours_number IN NUMBER,
15:35:45 270  	out_result_set	OUT SYS_REFCURSOR,
15:35:45 271  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:45 272  ) AS
15:35:45 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
15:35:45 274  -- VARIABLES
15:35:45 275  var_days		NUMBER;
15:35:45 276  var_hours 	NUMBER;
15:35:45 277  var_time_interval INTERVAL DAY (3) TO SECOND;
15:35:45 278  BEGIN
15:35:45 279  
15:35:45 280  	var_hours := mod(in_hours_number,24);
15:35:45 281  	var_days := (in_hours_number - var_hours) / 24;
15:35:45 282  	var_time_interval := var_days||' '||var_hours||':0:0';
15:35:45 283  
15:35:45 284  	OPEN out_result_set FOR
15:35:45 285  SELECT * FROM
15:35:45 286  (
15:35:45 287  	SELECT
15:35:45 288  	  LICENSE.ID,
15:35:45 289  	  LICENSE.CREATE_DATE,
15:35:45 290  	  LICENSE.CREATED_BY,
15:35:45 291  	  LICENSE.CURRENT_OFFER_INDEX,
15:35:45 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
15:35:45 293  	  LICENSE.END_DATE,
15:35:45 294  	  LICENSE.ENTITLEMENT_END_DATE,
15:35:45 295  	  LICENSE.INVOICE_ID,
15:35:45 296  	  LICENSE.IS_EXTENSION,
15:35:45 297  	  LICENSE.LICENSE_STATUS_ID,
15:35:45 298  	  LICENSE.OFFER_ID,
15:35:45 299  	  LICENSE.START_DATE,
15:35:45 300  	  LICENSE.SUBSCRIPTION_ID,
15:35:45 301  	  LICENSE.UPDATE_DATE,
15:35:45 302  	  LICENSE.UPDATED_BY
15:35:45 303  	FROM
15:35:45 304  	  LICENSE
15:35:45 305  	WHERE
15:35:45 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
15:35:45 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 308  	  AND NOT EXISTS
15:35:45 309  	  (
15:35:45 310  	    SELECT NULL
15:35:45 311  	    FROM PROCESS_RETRY_THROTTLE
15:35:45 312  	    WHERE PROCESS_NAME = in_process_name
15:35:45 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
15:35:45 314  	  )
15:35:45 315  	  AND ROWNUM <= 10000
15:35:45 316  	  ORDER BY dbms_random.value
15:35:45 317  ) WHERE
15:35:45 318  	  ROWNUM <= 1000
15:35:45 319  	  ;
15:35:45 320  EXCEPTION
15:35:45 321  WHEN OTHERS THEN
15:35:45 322  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 324  END GET_ENDING_LICENSES_CC;
15:35:45 325  
15:35:45 326  /******************************************************************************/
15:35:45 327  
15:35:45 328  PROCEDURE GET_RECURRING_OFFER (
15:35:45 329  	in_license_id  IN NUMBER,
15:35:45 330  	out_result_set OUT SYS_REFCURSOR
15:35:45 331  ) AS
15:35:45 332  -- VARIABLES
15:35:45 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
15:35:45 334  var_offer_chain_id	    NUMBER;
15:35:45 335  var_offer_id		    NUMBER;
15:35:45 336  var_offer_num_recurrences     NUMBER;
15:35:45 337  var_license_cur_offer_rec_num NUMBER;
15:35:45 338  var_offer_index		    NUMBER;
15:35:45 339  -- EXCEPTIONS
15:35:45 340  BAD_LICENSE_ID	     EXCEPTION;
15:35:45 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
15:35:45 342  BEGIN
15:35:45 343  
15:35:45 344  	BEGIN
15:35:45 345  	  SELECT
15:35:45 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
15:35:45 347  	    LICENSE.OFFER_ID,
15:35:45 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
15:35:45 349  	    into
15:35:45 350  	    var_offer_chain_id,
15:35:45 351  	    var_offer_id,
15:35:45 352  	    var_license_cur_offer_rec_num
15:35:45 353  	  FROM
15:35:45 354  	    LICENSE
15:35:45 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 356  	  WHERE
15:35:45 357  	    LICENSE.ID = in_license_id;
15:35:45 358  	  EXCEPTION
15:35:45 359  	    WHEN NO_DATA_FOUND THEN
15:35:45 360  	      RAISE BAD_LICENSE_ID;
15:35:45 361  	END;
15:35:45 362  
15:35:45 363  	BEGIN
15:35:45 364  	  SELECT
15:35:45 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
15:35:45 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
15:35:45 367  	    into
15:35:45 368  	    var_offer_num_recurrences,
15:35:45 369  	    var_offer_index
15:35:45 370  	  FROM
15:35:45 371  	    OFFER_OFFER_CHAIN
15:35:45 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:35:45 373  	  WHERE
15:35:45 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:35:45 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
15:35:45 376  	  EXCEPTION
15:35:45 377  	    WHEN NO_DATA_FOUND THEN
15:35:45 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
15:35:45 379  	END;
15:35:45 380  
15:35:45 381  	IF var_offer_num_recurrences = 0 THEN
15:35:45 382  	  --out_result_set := NULL;
15:35:45 383  	  -- TODO: Remove this hardcode
15:35:45 384  	  OPEN out_result_set FOR
15:35:45 385  	  SELECT
15:35:45 386  	    OFFER.ID,
15:35:45 387  	    OFFER.OFFER_STATUS_ID,
15:35:45 388  	    OFFER.ENTITLEMENT_DURATION,
15:35:45 389  	    OFFER.CREATED_BY,
15:35:45 390  	    OFFER.CREATE_DATE,
15:35:45 391  	    OFFER.UPDATED_BY,
15:35:45 392  	    OFFER.UPDATE_DATE,
15:35:45 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
15:35:45 394  	    var_offer_index as "OFFER_INDEX"
15:35:45 395  	  FROM
15:35:45 396  	    OFFER_OFFER_CHAIN
15:35:45 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:35:45 398  	  WHERE ROWNUM = 0;
15:35:45 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
15:35:45 400  	  --out_result_set := NULL;
15:35:45 401  	  -- TODO: Remove this hardcode
15:35:45 402  	  OPEN out_result_set FOR
15:35:45 403  	  SELECT
15:35:45 404  	    OFFER.ID,
15:35:45 405  	    OFFER.OFFER_STATUS_ID,
15:35:45 406  	    OFFER.ENTITLEMENT_DURATION,
15:35:45 407  	    OFFER.CREATED_BY,
15:35:45 408  	    OFFER.CREATE_DATE,
15:35:45 409  	    OFFER.UPDATED_BY,
15:35:45 410  	    OFFER.UPDATE_DATE,
15:35:45 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
15:35:45 412  	    var_offer_index as "OFFER_INDEX"
15:35:45 413  	  FROM
15:35:45 414  	    OFFER_OFFER_CHAIN
15:35:45 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:35:45 416  	  WHERE ROWNUM = 0;
15:35:45 417  	ELSE
15:35:45 418  	  OPEN out_result_set FOR
15:35:45 419  	  SELECT
15:35:45 420  	    OFFER.ID,
15:35:45 421  	    OFFER.OFFER_STATUS_ID,
15:35:45 422  	    OFFER.ENTITLEMENT_DURATION,
15:35:45 423  	    OFFER.CREATED_BY,
15:35:45 424  	    OFFER.CREATE_DATE,
15:35:45 425  	    OFFER.UPDATED_BY,
15:35:45 426  	    OFFER.UPDATE_DATE,
15:35:45 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
15:35:45 428  	    var_offer_index as "OFFER_INDEX"
15:35:45 429  	  FROM
15:35:45 430  	    OFFER
15:35:45 431  	  WHERE
15:35:45 432  	    OFFER.ID = var_offer_id;
15:35:45 433  	END IF;
15:35:45 434  
15:35:45 435  EXCEPTION
15:35:45 436  WHEN BAD_LICENSE_ID THEN
15:35:45 437  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 438  	  SPROC_NAME, 'No such license');
15:35:45 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
15:35:45 440  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
15:35:45 442  WHEN OTHERS THEN
15:35:45 443  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 445  END GET_RECURRING_OFFER;
15:35:45 446  
15:35:45 447  /******************************************************************************/
15:35:45 448  
15:35:45 449  PROCEDURE GET_NEXT_OFFER (
15:35:45 450  /*
15:35:45 451  Throws exceptions:
15:35:45 452  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 453  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 454  */
15:35:45 455  	in_license_id  IN NUMBER,
15:35:45 456  	out_result_set OUT SYS_REFCURSOR
15:35:45 457  ) AS
15:35:45 458  -- VARIABLES
15:35:45 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
15:35:45 460  var_offer_chain_id	NUMBER;
15:35:45 461  var_offer_id		NUMBER;
15:35:45 462  var_license_current_index NUMBER;
15:35:45 463  var_next_offer_index	NUMBER;
15:35:45 464  -- EXCEPTIONS
15:35:45 465  BAD_LICENSE_ID	      EXCEPTION;
15:35:45 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
15:35:45 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:35:45 468  BEGIN
15:35:45 469  
15:35:45 470  	BEGIN
15:35:45 471  	  SELECT
15:35:45 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
15:35:45 473  	    LICENSE.OFFER_ID,
15:35:45 474  	    LICENSE.CURRENT_OFFER_INDEX
15:35:45 475  	    into
15:35:45 476  	    var_offer_chain_id,
15:35:45 477  	    var_offer_id,
15:35:45 478  	    var_license_current_index
15:35:45 479  	  FROM
15:35:45 480  	    LICENSE
15:35:45 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 482  	  WHERE
15:35:45 483  	    LICENSE.ID = in_license_id;
15:35:45 484  	  EXCEPTION
15:35:45 485  	    WHEN NO_DATA_FOUND THEN
15:35:45 486  	      RAISE BAD_LICENSE_ID;
15:35:45 487  	END;
15:35:45 488  
15:35:45 489  	BEGIN
15:35:45 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V17.GET_NEXT_OFFER_INDEX(
15:35:45 491  	    var_offer_chain_id,
15:35:45 492  	    var_license_current_index
15:35:45 493  	  );
15:35:45 494  	  EXCEPTION
15:35:45 495  	    WHEN OTHERS THEN
15:35:45 496  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
15:35:45 498  	END;
15:35:45 499  
15:35:45 500  	IF var_next_offer_index IS NULL THEN
15:35:45 501  	  -- RETURN NULL;
15:35:45 502  	  -- TODO: Remove this hardcode
15:35:45 503  	  OPEN out_result_set FOR
15:35:45 504  	  SELECT
15:35:45 505  	    OFFER.ID,
15:35:45 506  	    OFFER.OFFER_STATUS_ID,
15:35:45 507  	    OFFER.ENTITLEMENT_DURATION,
15:35:45 508  	    OFFER.CREATED_BY,
15:35:45 509  	    OFFER.CREATE_DATE,
15:35:45 510  	    OFFER.UPDATED_BY,
15:35:45 511  	    OFFER.UPDATE_DATE,
15:35:45 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
15:35:45 513  	  FROM
15:35:45 514  	    OFFER_OFFER_CHAIN
15:35:45 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:35:45 516  	  WHERE
15:35:45 517  	    1=2;
15:35:45 518  	ELSE
15:35:45 519  	  OPEN out_result_set FOR
15:35:45 520  	  SELECT
15:35:45 521  	    OFFER.ID,
15:35:45 522  	    OFFER.OFFER_STATUS_ID,
15:35:45 523  	    OFFER.ENTITLEMENT_DURATION,
15:35:45 524  	    OFFER.CREATED_BY,
15:35:45 525  	    OFFER.CREATE_DATE,
15:35:45 526  	    OFFER.UPDATED_BY,
15:35:45 527  	    OFFER.UPDATE_DATE,
15:35:45 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
15:35:45 529  	  FROM
15:35:45 530  	    OFFER_OFFER_CHAIN
15:35:45 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:35:45 532  	  WHERE
15:35:45 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:35:45 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
15:35:45 535  	END IF;
15:35:45 536  
15:35:45 537  EXCEPTION
15:35:45 538  WHEN BAD_LICENSE_ID THEN
15:35:45 539  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 540  	  SPROC_NAME, 'No such license');
15:35:45 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
15:35:45 542  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
15:35:45 544  WHEN OTHERS THEN
15:35:45 545  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 547  END GET_NEXT_OFFER;
15:35:45 548  
15:35:45 549  /******************************************************************************/
15:35:45 550  
15:35:45 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
15:35:45 552  	in_license_id IN NUMBER,
15:35:45 553  	out_group_id  OUT NUMBER
15:35:45 554  ) AS
15:35:45 555  -- VARIABLES
15:35:45 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
15:35:45 557  var_subscription_id NUMBER;
15:35:45 558  var_group_id	  NUMBER;
15:35:45 559  -- EXCEPTIONS
15:35:45 560  BAD_LICENSE_ID	   EXCEPTION;
15:35:45 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
15:35:45 562  BEGIN
15:35:45 563  
15:35:45 564  	-- Get subscription id
15:35:45 565  	BEGIN
15:35:45 566  	  SELECT
15:35:45 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
15:35:45 568  	  FROM
15:35:45 569  	    LICENSE
15:35:45 570  	  WHERE
15:35:45 571  	    LICENSE.ID = in_license_id;
15:35:45 572  	  EXCEPTION
15:35:45 573  	    WHEN NO_DATA_FOUND THEN
15:35:45 574  	      RAISE BAD_LICENSE_ID;
15:35:45 575  	END;
15:35:45 576  
15:35:45 577  	-- Get group id
15:35:45 578  	BEGIN
15:35:45 579  	  SELECT
15:35:45 580  	    ACCOUNT.GROUP_ID into var_group_id
15:35:45 581  	  FROM
15:35:45 582  	    SUBSCRIPTION
15:35:45 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:35:45 584  	  WHERE
15:35:45 585  	    SUBSCRIPTION.ID = var_subscription_id;
15:35:45 586  	  EXCEPTION
15:35:45 587  	    WHEN NO_DATA_FOUND THEN
15:35:45 588  	      RAISE CAN_NOT_GET_GROUP_ID;
15:35:45 589  	END;
15:35:45 590  
15:35:45 591  	out_group_id := var_group_id;
15:35:45 592  
15:35:45 593  EXCEPTION
15:35:45 594  WHEN BAD_LICENSE_ID THEN
15:35:45 595  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 596  	  SPROC_NAME, 'No such license');
15:35:45 597  WHEN CAN_NOT_GET_GROUP_ID THEN
15:35:45 598  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 599  	  SPROC_NAME, 'Could not get group id');
15:35:45 600  WHEN OTHERS THEN
15:35:45 601  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 603  END GET_GROUP_ID_BY_LICENSE_ID;
15:35:45 604  
15:35:45 605  /******************************************************************************/
15:35:45 606  
15:35:45 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
15:35:45 608  	out_result_set OUT SYS_REFCURSOR
15:35:45 609  ) AS
15:35:45 610  BEGIN
15:35:45 611  	OPEN out_result_set FOR
15:35:45 612  SELECT * FROM
15:35:45 613  (
15:35:45 614  	SELECT
15:35:45 615  	  LICENSE.ID,
15:35:45 616  	  LICENSE.INVOICE_ID,
15:35:45 617  	  LICENSE.IS_EXTENSION,
15:35:45 618  	  LICENSE.START_DATE,
15:35:45 619  	  LICENSE.END_DATE,
15:35:45 620  	  LICENSE.ENTITLEMENT_END_DATE,
15:35:45 621  	  LICENSE.CURRENT_OFFER_INDEX,
15:35:45 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
15:35:45 623  	  LICENSE.CREATE_DATE,
15:35:45 624  	  LICENSE.CREATED_BY,
15:35:45 625  	  LICENSE.LICENSE_STATUS_ID,
15:35:45 626  	  LICENSE.OFFER_ID,
15:35:45 627  	  LICENSE.SUBSCRIPTION_ID,
15:35:45 628  	  LICENSE.UPDATE_DATE,
15:35:45 629  	  LICENSE.UPDATED_BY,
15:35:45 630  	  LICENSE.NEEDS_ENTITLEMENTS
15:35:45 631  	FROM
15:35:45 632  	  LICENSE
15:35:45 633  	WHERE
15:35:45 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V17.TRUE
15:35:45 635  	AND ROWNUM <= 5000
15:35:45 636  	ORDER BY dbms_random.value
15:35:45 637  ) WHERE
15:35:45 638  	ROWNUM <= 500;
15:35:45 639  
15:35:45 640  END GET_NEED_ENTITLEMENTS_LICENSES;
15:35:45 641  
15:35:45 642  /******************************************************************************/
15:35:45 643  
15:35:45 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
15:35:45 645  	in_license_id	      IN NUMBER,
15:35:45 646  	in_needs_entitlements IN NUMBER,
15:35:45 647  	in_updated_by	      IN VARCHAR2
15:35:45 648  ) AS
15:35:45 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
15:35:45 650  -- VARIABLES
15:35:45 651  temp_license_id NUMBER;
15:35:45 652  -- EXCEPTIONS
15:35:45 653  BAD_LICENSE_ID	     EXCEPTION;
15:35:45 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
15:35:45 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 656  BEGIN
15:35:45 657  
15:35:45 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V17.TRUE
15:35:45 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:45 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
15:35:45 661  	END IF;
15:35:45 662  
15:35:45 663  	BEGIN
15:35:45 664  	  SELECT
15:35:45 665  	    LICENSE.ID into temp_license_id
15:35:45 666  	  FROM
15:35:45 667  	    LICENSE
15:35:45 668  	  WHERE
15:35:45 669  	    LICENSE.ID = in_license_id;
15:35:45 670  	  EXCEPTION
15:35:45 671  	    WHEN NO_DATA_FOUND THEN
15:35:45 672  	      RAISE BAD_LICENSE_ID;
15:35:45 673  	END;
15:35:45 674  
15:35:45 675  	PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 676  	  in_license_id 	=> in_license_id,
15:35:45 677  	  in_needs_entitlements => in_needs_entitlements,
15:35:45 678  	  in_updated_by 	=> in_updated_by
15:35:45 679  	);
15:35:45 680  
15:35:45 681  EXCEPTION
15:35:45 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
15:35:45 683  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 684  	  SPROC_NAME, 'Bad entitlements flag value');
15:35:45 685  WHEN BAD_LICENSE_ID THEN
15:35:45 686  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 687  	  SPROC_NAME, 'No such license');
15:35:45 688  WHEN OTHERS THEN
15:35:45 689  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
15:35:45 692  
15:35:45 693  
15:35:45 694  /******************************************************************************/
15:35:45 695  
15:35:45 696  PROCEDURE GET_ENDED_GC_LICENSES (
15:35:45 697  	out_result_set		OUT SYS_REFCURSOR,
15:35:45 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:35:45 699  	in_num_rows		IN NUMBER DEFAULT 10000,
15:35:45 700  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:45 701  ) AS
15:35:45 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
15:35:45 703  var_days		NUMBER;
15:35:45 704  var_hours 	NUMBER;
15:35:45 705  var_time_interval INTERVAL DAY (3) TO SECOND;
15:35:45 706  BEGIN
15:35:45 707  	var_hours := mod(in_hours_number,24);
15:35:45 708  	var_days := (in_hours_number - var_hours) / 24;
15:35:45 709  	var_time_interval := var_days||' '||var_hours||':0:0';
15:35:45 710  	OPEN out_result_set FOR
15:35:45 711  SELECT * FROM
15:35:45 712  (
15:35:45 713  	SELECT
15:35:45 714  	  l.ID,
15:35:45 715  	  l.CREATE_DATE,
15:35:45 716  	  l.CREATED_BY,
15:35:45 717  	  l.CURRENT_OFFER_INDEX,
15:35:45 718  	  l.CURRENT_OFFER_RECURR_NUM,
15:35:45 719  	  l.END_DATE,
15:35:45 720  	  l.ENTITLEMENT_END_DATE,
15:35:45 721  	  l.INVOICE_ID,
15:35:45 722  	  l.IS_EXTENSION,
15:35:45 723  	  l.LICENSE_STATUS_ID,
15:35:45 724  	  l.OFFER_ID,
15:35:45 725  	  l.START_DATE,
15:35:45 726  	  l.SUBSCRIPTION_ID,
15:35:45 727  	  l.UPDATE_DATE,
15:35:45 728  	  l.UPDATED_BY
15:35:45 729  	FROM
15:35:45 730  	  GIFT_CERTIFICATE gc
15:35:45 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
15:35:45 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
15:35:45 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
15:35:45 734  	WHERE
15:35:45 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
15:35:45 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
15:35:45 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V17.SUBSCRIPTION_CLOSED
15:35:45 739  	  AND NOT EXISTS (
15:35:45 740  	    SELECT NULL
15:35:45 741  	    FROM PROCESS_RETRY_THROTTLE
15:35:45 742  	    WHERE PROCESS_NAME = in_process_name
15:35:45 743  	      AND GENERIC_ID = l.ID
15:35:45 744  	  )
15:35:45 745  	  AND ROWNUM <= in_num_rows*10
15:35:45 746  	  ORDER BY dbms_random.value
15:35:45 747  ) WHERE
15:35:45 748  	  ROWNUM <= in_num_rows
15:35:45 749  	  GROUP BY SUBSCRIPTION_ID;
15:35:45 750  EXCEPTION
15:35:45 751  WHEN OTHERS THEN
15:35:45 752  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 754  END GET_ENDED_GC_LICENSES;
15:35:45 755  
15:35:45 756  PROCEDURE GET_LICENSE_BY_ID (
15:35:45 757  	in_license_id  IN NUMBER,
15:35:45 758  	out_result_set OUT SYS_REFCURSOR
15:35:45 759  ) AS
15:35:45 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
15:35:45 761  -- VARIABLES
15:35:45 762  temp_license_id NUMBER;
15:35:45 763  -- EXCEPTIONS
15:35:45 764  BAD_LICENSE_ID EXCEPTION;
15:35:45 765  BEGIN
15:35:45 766  
15:35:45 767  	BEGIN
15:35:45 768  	  SELECT
15:35:45 769  	    l.id into temp_license_id
15:35:45 770  	  FROM
15:35:45 771  	    license l
15:35:45 772  	  WHERE
15:35:45 773  	    l.id = in_license_id;
15:35:45 774  	  EXCEPTION
15:35:45 775  	    WHEN NO_DATA_FOUND THEN
15:35:45 776  	      RAISE BAD_LICENSE_ID;
15:35:45 777  	END;
15:35:45 778  
15:35:45 779  	OPEN out_result_set FOR
15:35:45 780  	SELECT
15:35:45 781  	  l.id,
15:35:45 782  	  l.license_status_id,
15:35:45 783  	  l.subscription_id,
15:35:45 784  	  l.invoice_id,
15:35:45 785  	  l.offer_id,
15:35:45 786  	  l.start_date,
15:35:45 787  	  l.end_date,
15:35:45 788  	  l.entitlement_end_date,
15:35:45 789  	  l.is_extension,
15:35:45 790  	  l.create_date,
15:35:45 791  	  l.created_by,
15:35:45 792  	  l.update_date,
15:35:45 793  	  l.updated_by,
15:35:45 794  	  l.current_offer_index,
15:35:45 795  	  l.current_offer_recurr_num,
15:35:45 796  	  l.needs_entitlements
15:35:45 797  	FROM
15:35:45 798  	  LICENSE l
15:35:45 799  	WHERE
15:35:45 800  	  l.id = in_license_id;
15:35:45 801  
15:35:45 802  EXCEPTION
15:35:45 803  WHEN BAD_LICENSE_ID THEN
15:35:45 804  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 805  	  SPROC_NAME, 'No such license');
15:35:45 806  WHEN OTHERS THEN
15:35:45 807  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 809  END GET_LICENSE_BY_ID;
15:35:45 810  
15:35:45 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
15:35:45 812  	in_subscription_id IN NUMBER,
15:35:45 813  	in_end_date IN DATE,
15:35:45 814  	in_updated_by IN VARCHAR2
15:35:45 815  ) AS
15:35:45 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
15:35:45 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 818  var_latest_lice NUMBER;
15:35:45 819  BEGIN
15:35:45 820  	SELECT max(id)
15:35:45 821  	INTO  var_latest_lice
15:35:45 822  	FROM LICENSE
15:35:45 823  	WHERE
15:35:45 824  	  subscription_id = in_subscription_id
15:35:45 825  	;
15:35:45 826  
15:35:45 827  	PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 828  	  in_license_id        => var_latest_lice,
15:35:45 829  	  in_updated_by        => in_updated_by,
15:35:45 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 831  	  in_end_date	       => in_end_date,
15:35:45 832  	  in_entitlement_end_date => in_end_date
15:35:45 833  	);
15:35:45 834  
15:35:45 835  EXCEPTION
15:35:45 836  WHEN NO_DATA_FOUND THEN
15:35:45 837  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
15:35:45 839  WHEN OTHERS THEN
15:35:45 840  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 842  END UP_LATEST_LICE_END_BY_SUBID;
15:35:45 843  
15:35:45 844  END PROCS_LICENSE_V17;
15:35:45 845  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:35:45 SQL> 
15:35:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V17" AS
15:35:45   2  
15:35:45   3  PROCEDURE CREATE_CHARGE(
15:35:45   4  /*
15:35:45   5  Throws exceptions:
15:35:45   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45   8  */
15:35:45   9  	in_invoice_id	      IN NUMBER,
15:35:45  10  	in_transaction_id     IN NUMBER,
15:35:45  11  	in_instrument_type_id IN NUMBER,
15:35:45  12  	in_instrument_id      IN NUMBER,
15:35:45  13  	in_charge_amount      IN NUMBER,
15:35:45  14  	in_created_by	      IN VARCHAR2,
15:35:45  15  	in_charge_status_id   IN NUMBER,
15:35:45  16  	out_charge_id	      OUT NUMBER
15:35:45  17  ) AS
15:35:45  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
15:35:45  19  -- VARIABLES
15:35:45  20  temp_invoice_id	  NUMBER;
15:35:45  21  temp_transaction_id NUMBER;
15:35:45  22  var_new_charge_id   NUMBER;
15:35:45  23  -- EXCEPTIONS
15:35:45  24  BAD_INVOICE_ID	     EXCEPTION;
15:35:45  25  BAD_TRANSACTION_ID     EXCEPTION;
15:35:45  26  BAD_PAYPAL_ID	     EXCEPTION;
15:35:45  27  BAD_CREDIT_CARD_ID     EXCEPTION;
15:35:45  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
15:35:45  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
15:35:45  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45  31  BEGIN
15:35:45  32  	-- Check that incoming data is correct
15:35:45  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD
15:35:45  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL THEN
15:35:45  35  	  RAISE BAD_INSTRUMENT_TYPE;
15:35:45  36  	END IF;
15:35:45  37  
15:35:45  38  	-- Check that status is correct
15:35:45  39  	IF in_charge_status_id != GLOBAL_STATUSES_V17.CHARGE_OPENED
15:35:45  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V17.CHARGE_PROCESSED
15:35:45  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V17.CHARGE_CANCELED THEN
15:35:45  42  	  RAISE BAD_CHARGE_STATUS_ID;
15:35:45  43  	END IF;
15:35:45  44  
15:35:45  45  	-- Check that invoice exists
15:35:45  46  	BEGIN
15:35:45  47  	  SELECT
15:35:45  48  	    INVOICE.ID into temp_invoice_id
15:35:45  49  	  FROM
15:35:45  50  	    INVOICE
15:35:45  51  	  WHERE
15:35:45  52  	    INVOICE.ID = in_invoice_id;
15:35:45  53  	  EXCEPTION
15:35:45  54  	    WHEN NO_DATA_FOUND THEN
15:35:45  55  	      RAISE BAD_INVOICE_ID;
15:35:45  56  	END;
15:35:45  57  
15:35:45  58  	-- Check that transaction exists
15:35:45  59  	BEGIN
15:35:45  60  	  SELECT
15:35:45  61  	    TRANSACTION.ID into temp_transaction_id
15:35:45  62  	  FROM
15:35:45  63  	    TRANSACTION
15:35:45  64  	  WHERE
15:35:45  65  	    TRANSACTION.ID = in_transaction_id;
15:35:45  66  	  EXCEPTION
15:35:45  67  	    WHEN NO_DATA_FOUND THEN
15:35:45  68  	      RAISE BAD_TRANSACTION_ID;
15:35:45  69  	END;
15:35:45  70  
15:35:45  71  	-- Check that instrument exists
15:35:45  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD THEN
15:35:45  73  	  IF PROCS_FIN_INSTRUMENTS_V17.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:45  74  	    RAISE BAD_CREDIT_CARD_ID;
15:35:45  75  	  END IF;
15:35:45  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL THEN
15:35:45  77  	  IF PROCS_FIN_INSTRUMENTS_V17.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:45  78  	    RAISE BAD_PAYPAL_ID;
15:35:45  79  	  END IF;
15:35:45  80  	END IF;
15:35:45  81  
15:35:45  82  	-- Create new charge
15:35:45  83  	PROCS_CHARGE_CRU_V17.CREATE_CHARGE(
15:35:45  84  	  out_charge_id 	=> var_new_charge_id,
15:35:45  85  	  in_invoice_id 	=> in_invoice_id,
15:35:45  86  	  in_transaction_id	=> in_transaction_id,
15:35:45  87  	  in_instrument_type_id => in_instrument_type_id,
15:35:45  88  	  in_instrument_id	=> in_instrument_id,
15:35:45  89  	  in_charge_amount	=> in_charge_amount,
15:35:45  90  	  in_charge_status_id	=> in_charge_status_id,
15:35:45  91  	  in_created_by 	=> in_created_by
15:35:45  92  	);
15:35:45  93  
15:35:45  94  	out_charge_id := var_new_charge_id;
15:35:45  95  
15:35:45  96  EXCEPTION
15:35:45  97  WHEN BAD_CHARGE_STATUS_ID THEN
15:35:45  98  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
15:35:45 100  WHEN BAD_INSTRUMENT_TYPE THEN
15:35:45 101  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 102  	  PROCS_NAME, 'Bad instrument type id');
15:35:45 103  WHEN BAD_INVOICE_ID THEN
15:35:45 104  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 105  	  PROCS_NAME, 'No such invoice');
15:35:45 106  WHEN BAD_TRANSACTION_ID THEN
15:35:45 107  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 108  	  PROCS_NAME, 'No such transaction');
15:35:45 109  WHEN BAD_PAYPAL_ID THEN
15:35:45 110  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 111  	  PROCS_NAME, 'No such paypal');
15:35:45 112  WHEN BAD_CREDIT_CARD_ID THEN
15:35:45 113  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 114  	  PROCS_NAME, 'No such credit card');
15:35:45 115  WHEN OTHERS THEN
15:35:45 116  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
15:35:45 118  END CREATE_CHARGE;
15:35:45 119  
15:35:45 120  /********************************************************/
15:35:45 121  -- norlov #38562 :
15:35:45 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
15:35:45 123  /*
15:35:45 124  Throws exceptions:
15:35:45 125  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 126  */
15:35:45 127  	out_result_set	    OUT SYS_REFCURSOR,
15:35:45 128  	in_row_number	    IN NUMBER DEFAULT NULL
15:35:45 129  ) AS
15:35:45 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
15:35:45 131  -- COMSTANTS
15:35:45 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
15:35:45 133  -- VARIABLES
15:35:45 134  var_row_number NUMBER;
15:35:45 135  BEGIN
15:35:45 136  	IF in_row_number IS NULL THEN
15:35:45 137  	  var_row_number := DEFAULT_ROW_NUMBER;
15:35:45 138  	ELSE
15:35:45 139  	  var_row_number := in_row_number;
15:35:45 140  	END IF;
15:35:45 141  
15:35:45 142  	-- Select charges
15:35:45 143  	OPEN out_result_set FOR
15:35:45 144  SELECT * FROM
15:35:45 145  (
15:35:45 146  	SELECT
15:35:45 147  	  CHARGE.ID,
15:35:45 148  	  CHARGE.TRANSACTION_ID,
15:35:45 149  	  CHARGE.INSTRUMENT_ID,
15:35:45 150  	  CHARGE.INSTRUMENT_TYPE_ID,
15:35:45 151  	  CHARGE.CHARGE_AMOUNT,
15:35:45 152  	  CHARGE.CREATE_DATE,
15:35:45 153  	  CHARGE.CREATED_BY,
15:35:45 154  	  CHARGE.INVOICE_ID
15:35:45 155  	FROM
15:35:45 156  	  CHARGE
15:35:45 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:35:45 158  	WHERE
15:35:45 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V17.TRANSACTION_PENDING
15:35:45 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V17.TRUE
15:35:45 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
15:35:45 162  	  AND NOT EXISTS
15:35:45 163  	  (
15:35:45 164  	    SELECT NULL
15:35:45 165  	    FROM PROCESS_RETRY_THROTTLE
15:35:45 166  	    WHERE PROCESS_NAME = SPROC_NAME
15:35:45 167  	      AND GENERIC_ID = CHARGE.ID
15:35:45 168  	  )
15:35:45 169  	  AND ROWNUM <= var_row_number*10
15:35:45 170  	  ORDER BY dbms_random.value
15:35:45 171  ) WHERE
15:35:45 172  	  ROWNUM <= var_row_number;
15:35:45 173  
15:35:45 174  END GET_PENDING_REFUND_CHARGES;
15:35:45 175  /******************************************************************************/
15:35:45 176  
15:35:45 177  PROCEDURE GET_UNPROCESSED_CHARGES (
15:35:45 178  /*
15:35:45 179  Throws exceptions:
15:35:45 180  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 181  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 182  */
15:35:45 183  	in_invoice_id  IN NUMBER,
15:35:45 184  	out_result_set OUT SYS_REFCURSOR
15:35:45 185  ) AS
15:35:45 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
15:35:45 187  -- VARIABLES
15:35:45 188  temp_invoice_id NUMBER;
15:35:45 189  -- EXCEPTIONS
15:35:45 190  BAD_INVOICE_ID EXCEPTION;
15:35:45 191  BEGIN
15:35:45 192  
15:35:45 193  	-- Check that invoice exists
15:35:45 194  	BEGIN
15:35:45 195  	  SELECT
15:35:45 196  	    INVOICE.ID into temp_invoice_id
15:35:45 197  	  FROM
15:35:45 198  	    INVOICE
15:35:45 199  	  WHERE
15:35:45 200  	    INVOICE.ID = in_invoice_id;
15:35:45 201  	  EXCEPTION
15:35:45 202  	    WHEN NO_DATA_FOUND THEN
15:35:45 203  	      RAISE BAD_INVOICE_ID;
15:35:45 204  	END;
15:35:45 205  
15:35:45 206  	-- Select charges
15:35:45 207  	OPEN out_result_set FOR
15:35:45 208  	SELECT
15:35:45 209  	  CHARGE.ID,
15:35:45 210  	  CHARGE.TRANSACTION_ID,
15:35:45 211  	  CHARGE.INSTRUMENT_ID,
15:35:45 212  	  CHARGE.INSTRUMENT_TYPE_ID,
15:35:45 213  	  CHARGE.CHARGE_AMOUNT,
15:35:45 214  	  CHARGE.CREATE_DATE,
15:35:45 215  	  CHARGE.CREATED_BY,
15:35:45 216  	  CHARGE.INVOICE_ID
15:35:45 217  	FROM
15:35:45 218  	  CHARGE
15:35:45 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:35:45 220  	WHERE
15:35:45 221  	  CHARGE.INVOICE_ID = in_invoice_id
15:35:45 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_OPENED
15:35:45 223  	  AND
15:35:45 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V17.TRANSACTION_PENDING;
15:35:45 225  
15:35:45 226  EXCEPTION
15:35:45 227  WHEN BAD_INVOICE_ID THEN
15:35:45 228  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 229  	  SPROC_NAME, 'No such invoice');
15:35:45 230  WHEN OTHERS THEN
15:35:45 231  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 233  END GET_UNPROCESSED_CHARGES;
15:35:45 234  
15:35:45 235  /******************************************************************************/
15:35:45 236  
15:35:45 237  PROCEDURE GET_PROCESSED_CHARGES (
15:35:45 238  /*
15:35:45 239  Throws exceptions:
15:35:45 240  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 241  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 242  */
15:35:45 243  	in_invoice_id  IN NUMBER,
15:35:45 244  	out_result_set OUT SYS_REFCURSOR
15:35:45 245  ) AS
15:35:45 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
15:35:45 247  -- VARIABLES
15:35:45 248  temp_invoice_id NUMBER;
15:35:45 249  -- EXCEPTIONS
15:35:45 250  BAD_INVOICE_ID  EXCEPTION;
15:35:45 251  BEGIN
15:35:45 252  
15:35:45 253  	-- Check that invoice exists
15:35:45 254  	BEGIN
15:35:45 255  	  SELECT
15:35:45 256  	    INVOICE.ID into temp_invoice_id
15:35:45 257  	  FROM
15:35:45 258  	    INVOICE
15:35:45 259  	  WHERE
15:35:45 260  	    INVOICE.ID = in_invoice_id;
15:35:45 261  	  EXCEPTION
15:35:45 262  	    WHEN NO_DATA_FOUND THEN
15:35:45 263  	      RAISE BAD_INVOICE_ID;
15:35:45 264  	END;
15:35:45 265  
15:35:45 266  	-- Select charges
15:35:45 267  	OPEN out_result_set FOR
15:35:45 268  	SELECT /*+ STAR_TRANSFORMATION */
15:35:45 269  	  CHARGE.ID,
15:35:45 270  	  CHARGE.TRANSACTION_ID,
15:35:45 271  	  CHARGE.INSTRUMENT_ID,
15:35:45 272  	  CHARGE.INSTRUMENT_TYPE_ID,
15:35:45 273  	  CHARGE.CHARGE_AMOUNT,
15:35:45 274  	  CHARGE.CREATE_DATE,
15:35:45 275  	  CHARGE.CREATED_BY,
15:35:45 276  	  CHARGE.INVOICE_ID
15:35:45 277  	FROM
15:35:45 278  	  CHARGE
15:35:45 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:35:45 280  	WHERE
15:35:45 281  	  CHARGE.INVOICE_ID = in_invoice_id
15:35:45 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_PROCESSED
15:35:45 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V17.TRANSACTION_CLOSED;
15:35:45 284  
15:35:45 285  EXCEPTION
15:35:45 286  WHEN BAD_INVOICE_ID THEN
15:35:45 287  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 288  	  SPROC_NAME, 'No such invoice');
15:35:45 289  WHEN OTHERS THEN
15:35:45 290  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 292  END GET_PROCESSED_CHARGES;
15:35:45 293  
15:35:45 294  /******************************************************************************/
15:35:45 295  
15:35:45 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
15:35:45 297  /*
15:35:45 298  Throws exceptions:
15:35:45 299  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 300  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 301  */
15:35:45 302  	in_charge_id	    IN NUMBER,
15:35:45 303  	out_subscription_id OUT NUMBER
15:35:45 304  ) AS
15:35:45 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
15:35:45 306  -- VARIABLES
15:35:45 307  var_invoice_id	  NUMBER;
15:35:45 308  var_subscription_id NUMBER;
15:35:45 309  -- EXCEPTIONS
15:35:45 310  BAD_CHARGE_ID		EXCEPTION;
15:35:45 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
15:35:45 312  BEGIN
15:35:45 313  
15:35:45 314  	BEGIN
15:35:45 315  	  SELECT
15:35:45 316  	    CHARGE.INVOICE_ID into var_invoice_id
15:35:45 317  	  FROM
15:35:45 318  	    CHARGE
15:35:45 319  	  WHERE
15:35:45 320  	    CHARGE.ID = in_charge_id;
15:35:45 321  	  EXCEPTION
15:35:45 322  	    WHEN NO_DATA_FOUND THEN
15:35:45 323  	      RAISE BAD_CHARGE_ID;
15:35:45 324  	END;
15:35:45 325  
15:35:45 326  	BEGIN
15:35:45 327  	  SELECT
15:35:45 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
15:35:45 329  	  FROM
15:35:45 330  	    LICENSE
15:35:45 331  	  WHERE
15:35:45 332  	    LICENSE.INVOICE_ID = var_invoice_id
15:35:45 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
15:35:45 334  	  EXCEPTION
15:35:45 335  	    WHEN NO_DATA_FOUND THEN
15:35:45 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
15:35:45 337  	END;
15:35:45 338  
15:35:45 339  	out_subscription_id := var_subscription_id;
15:35:45 340  
15:35:45 341  EXCEPTION
15:35:45 342  WHEN BAD_CHARGE_ID THEN
15:35:45 343  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 344  	  SPROC_NAME, 'No such charge');
15:35:45 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
15:35:45 346  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 347  	  SPROC_NAME, 'Could not find subscription for given charge');
15:35:45 348  WHEN OTHERS THEN
15:35:45 349  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
15:35:45 352  
15:35:45 353  /******************************************************************************/
15:35:45 354  
15:35:45 355  PROCEDURE UPDATE_CHARGE_STATUS (
15:35:45 356  /*
15:35:45 357  Throws exceptions:
15:35:45 358  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 359  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 360  */
15:35:45 361  	in_charge_id	    IN CHARGE.ID%TYPE,
15:35:45 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:35:45 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
15:35:45 364  ) AS
15:35:45 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
15:35:45 366  -- EXCEPTIONS
15:35:45 367  BAD_CHARGE_ID	     EXCEPTION;
15:35:45 368  BAD_STATUS_ID	     EXCEPTION;
15:35:45 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 370  BEGIN
15:35:45 371  
15:35:45 372  	IF in_charge_status_id != GLOBAL_STATUSES_V17.CHARGE_OPENED
15:35:45 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V17.CHARGE_PROCESSED
15:35:45 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V17.CHARGE_CANCELED THEN
15:35:45 375  	  RAISE BAD_STATUS_ID;
15:35:45 376  	END IF;
15:35:45 377  
15:35:45 378  	PROCS_CHARGE_CRU_V17.UPDATE_CHARGE(
15:35:45 379  	  in_charge_id	      => in_charge_id,
15:35:45 380  	  in_charge_status_id => in_charge_status_id,
15:35:45 381  	  in_updated_by       => in_updated_by
15:35:45 382  	);
15:35:45 383  
15:35:45 384  	IF SQL%ROWCOUNT = 0 THEN
15:35:45 385  	  RAISE BAD_CHARGE_ID;
15:35:45 386  	END IF;
15:35:45 387  
15:35:45 388  EXCEPTION
15:35:45 389  WHEN BAD_CHARGE_ID THEN
15:35:45 390  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 391  	  SPROC_NAME, 'No such charge');
15:35:45 392  WHEN BAD_STATUS_ID THEN
15:35:45 393  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 394  	  SPROC_NAME, 'Bad status id');
15:35:45 395  WHEN OTHERS THEN
15:35:45 396  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 398  END UPDATE_CHARGE_STATUS;
15:35:45 399  
15:35:45 400  FUNCTION IS_CHARGE_COLLECTED (
15:35:45 401  /*
15:35:45 402  Throws:
15:35:45 403  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 404  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 405  Returns:
15:35:45 406  GLOBAL_CONST.TRUE if transaction collected,
15:35:45 407  GLOBAL_CONST.FALSE else
15:35:45 408  */
15:35:45 409  	in_charge_id IN NUMBER
15:35:45 410  ) RETURN NUMBER AS
15:35:45 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
15:35:45 412  -- VARIABLES
15:35:45 413  var_transaction_id NUMBER;
15:35:45 414  is_transaction_collected NUMBER;
15:35:45 415  -- EXCEPTIONS
15:35:45 416  BAD_CHARGE_ID	       EXCEPTION;
15:35:45 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
15:35:45 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
15:35:45 419  BEGIN
15:35:45 420  
15:35:45 421  	BEGIN
15:35:45 422  	  SELECT
15:35:45 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
15:35:45 424  	  FROM
15:35:45 425  	    CHARGE
15:35:45 426  	  WHERE
15:35:45 427  	    CHARGE.ID = in_charge_id;
15:35:45 428  	  EXCEPTION
15:35:45 429  	    WHEN NO_DATA_FOUND THEN
15:35:45 430  	      RAISE BAD_CHARGE_ID;
15:35:45 431  	END;
15:35:45 432  
15:35:45 433  	BEGIN
15:35:45 434  	  is_transaction_collected := PROCS_TRANSACTION_V17.IS_TRANSACTION_COLLECTED(var_transaction_id);
15:35:45 435  	  EXCEPTION
15:35:45 436  	    WHEN OTHERS THEN
15:35:45 437  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
15:35:45 439  	END;
15:35:45 440  
15:35:45 441  	RETURN is_transaction_collected;
15:35:45 442  
15:35:45 443  EXCEPTION
15:35:45 444  WHEN BAD_CHARGE_ID THEN
15:35:45 445  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 446  	  SPROC_NAME, 'No such charge');
15:35:45 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
15:35:45 448  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
15:35:45 450  WHEN OTHERS THEN
15:35:45 451  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 453  END;
15:35:45 454  
15:35:45 455  PROCEDURE GET_COLLECTED_CHARGES (
15:35:45 456  /*
15:35:45 457  Throws exceptions:
15:35:45 458  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 459  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 460  */
15:35:45 461  	in_invoice_id  IN NUMBER,
15:35:45 462  	out_result_set OUT SYS_REFCURSOR
15:35:45 463  ) AS
15:35:45 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
15:35:45 465  -- VARIABLES
15:35:45 466  temp_invoice_id NUMBER;
15:35:45 467  -- EXCEPTIONS
15:35:45 468  BAD_INVOICE_ID  EXCEPTION;
15:35:45 469  BEGIN
15:35:45 470  
15:35:45 471  	-- Check that invoice exists
15:35:45 472  	BEGIN
15:35:45 473  	  SELECT
15:35:45 474  	    INVOICE.ID into temp_invoice_id
15:35:45 475  	  FROM
15:35:45 476  	    INVOICE
15:35:45 477  	  WHERE
15:35:45 478  	    INVOICE.ID = in_invoice_id;
15:35:45 479  	  EXCEPTION
15:35:45 480  	    WHEN NO_DATA_FOUND THEN
15:35:45 481  	      RAISE BAD_INVOICE_ID;
15:35:45 482  	END;
15:35:45 483  
15:35:45 484  	-- Select charges
15:35:45 485  	OPEN out_result_set FOR
15:35:45 486  	SELECT
15:35:45 487  	  CHARGE.ID,
15:35:45 488  	  CHARGE.TRANSACTION_ID,
15:35:45 489  	  CHARGE.INSTRUMENT_ID,
15:35:45 490  	  CHARGE.INSTRUMENT_TYPE_ID,
15:35:45 491  	  CHARGE.CHARGE_AMOUNT,
15:35:45 492  	  CHARGE.CREATE_DATE,
15:35:45 493  	  CHARGE.CREATED_BY,
15:35:45 494  	  CHARGE.INVOICE_ID
15:35:45 495  	FROM
15:35:45 496  	  CHARGE
15:35:45 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:35:45 498  	WHERE
15:35:45 499  	  CHARGE.INVOICE_ID = in_invoice_id
15:35:45 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V17.CHARGE_PROCESSED FROM DUAL)
15:35:45 501  	  AND PROCS_CHARGE_V17.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 502  
15:35:45 503  EXCEPTION
15:35:45 504  WHEN BAD_INVOICE_ID THEN
15:35:45 505  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 506  	  SPROC_NAME, 'No such invoice');
15:35:45 507  WHEN OTHERS THEN
15:35:45 508  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 510  END GET_COLLECTED_CHARGES;
15:35:45 511  
15:35:45 512  END PROCS_CHARGE_V17;
15:35:45 513  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.05
15:35:45 SQL> 
15:35:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V17" AS
15:35:45   2  
15:35:45   3  PROCEDURE START_SUBSCRIPTION_CREATION (
15:35:45   4  	in_group_id	      IN NUMBER,
15:35:45   5  	in_created_by	      IN VARCHAR2,
15:35:45   6  	in_offer_chain_id     IN NUMBER,
15:35:45   7  	in_instrument_type_id IN NUMBER,
15:35:45   8  	in_instrument_id      IN NUMBER,
15:35:45   9  	in_agent_id	      IN NUMBER,
15:35:45  10  	in_note 	      IN VARCHAR2,
15:35:45  11  	out_subscription_id   OUT NUMBER,
15:35:45  12  	out_invoice_id	      OUT NUMBER,
15:35:45  13  	out_new_license_id    OUT NUMBER,
15:35:45  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.TRUE
15:35:45  15  ) AS
15:35:45  16  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
15:35:45  17  -- VARIABLES
15:35:45  18  var_account_id		 NUMBER;
15:35:45  19  var_account_status	 NUMBER;
15:35:45  20  var_offer_chain_status_id  NUMBER;
15:35:45  21  var_is_gift_certificate	 NUMBER;
15:35:45  22  var_is_for_redemption	 NUMBER;
15:35:45  23  var_same_offer_chains_num  NUMBER;
15:35:45  24  var_max_concurrent_subscrs NUMBER;
15:35:45  25  var_first_offer_id	 NUMBER;
15:35:45  26  var_new_invoice_id	 NUMBER;
15:35:45  27  var_new_subscription_id	 NUMBER;
15:35:45  28  var_date			 DATE := SYSDATE;
15:35:45  29  var_account_tax_exempt_id  VARCHAR2(255);
15:35:45  30  var_concur_subscription_id NUMBER;
15:35:45  31  -- EXCEPTIONS
15:35:45  32  BAD_GROUP_ID		    EXCEPTION;
15:35:45  33  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
15:35:45  34  BAD_OFFER_CHAIN		    EXCEPTION;
15:35:45  35  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
15:35:45  36  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
15:35:45  37  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
15:35:45  38  LIMIT_REACHED		    EXCEPTION;
15:35:45  39  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
15:35:45  40  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
15:35:45  41  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
15:35:45  42  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
15:35:45  43  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
15:35:45  44  CAN_NOT_CREATE_NOTE	    EXCEPTION;
15:35:45  45  
15:35:45  46  EXCEPTION_MESSAGE VARCHAR2(1024);
15:35:45  47  BEGIN
15:35:45  48  
15:35:45  49  	-- Get account id and status
15:35:45  50  	BEGIN
15:35:45  51  	  SELECT
15:35:45  52  	    ACCOUNT.ID,
15:35:45  53  	    ACCOUNT.ACCOUNT_STATUS_ID,
15:35:45  54  	    ACCOUNT.TAX_EXEMPT_ID
15:35:45  55  	    into
15:35:45  56  	    var_account_id,
15:35:45  57  	    var_account_status,
15:35:45  58  	    var_account_tax_exempt_id
15:35:45  59  	  FROM
15:35:45  60  	    ACCOUNT
15:35:45  61  	  WHERE
15:35:45  62  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:45  63  	  EXCEPTION
15:35:45  64  	  WHEN NO_DATA_FOUND THEN
15:35:45  65  	    RAISE BAD_GROUP_ID;
15:35:45  66  	END;
15:35:45  67  
15:35:45  68  	-- Could not create subscription for disabled account
15:35:45  69  	IF var_account_status = GLOBAL_STATUSES_V17.ACCOUNT_DISABLED THEN
15:35:45  70  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
15:35:45  71  	END IF;
15:35:45  72  
15:35:45  73  	-- Get offer chain status
15:35:45  74  	BEGIN
15:35:45  75  	  SELECT
15:35:45  76  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
15:35:45  77  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
15:35:45  78  	    into
15:35:45  79  	    var_offer_chain_status_id,
15:35:45  80  	    var_is_gift_certificate
15:35:45  81  	  FROM
15:35:45  82  	    OFFER_CHAIN
15:35:45  83  	  WHERE
15:35:45  84  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:35:45  85  
15:35:45  86  	  EXCEPTION
15:35:45  87  	    WHEN NO_DATA_FOUND THEN
15:35:45  88  	      RAISE BAD_OFFER_CHAIN;
15:35:45  89  	END;
15:35:45  90  
15:35:45  91  	-- Could not subscribe to inactive/disabled offer chain
15:35:45  92  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V17.OFFER_CHAIN_ACTIVE THEN
15:35:45  93  	  RAISE BAD_OFFER_CHAIN_STATUS;
15:35:45  94  	END IF;
15:35:45  95  
15:35:45  96  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
15:35:45  97  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V17.TRUE THEN
15:35:45  98  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
15:35:45  99  	END IF;
15:35:45 100  
15:35:45 101  	-- check if the OC is for Redemption:
15:35:45 102  	SELECT
15:35:45 103  	  COUNT(*) into var_is_for_redemption
15:35:45 104  	FROM
15:35:45 105  	  OFFER_CHAIN_ELIGIBILITY
15:35:45 106  	WHERE
15:35:45 107  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:35:45 108  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V17.GIFT_CERTIFICATE_REQUIRED
15:35:45 109  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V17.ELIGIBILITY_FLAG_SET;
15:35:45 110  
15:35:45 111  	IF var_is_for_redemption > 0 THEN
15:35:45 112  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
15:35:45 113  	END IF;
15:35:45 114  
15:35:45 115  	SELECT
15:35:45 116  	  COUNT(*) into var_same_offer_chains_num
15:35:45 117  	FROM
15:35:45 118  	  SUBSCRIPTION
15:35:45 119  	WHERE
15:35:45 120  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:45 121  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
15:35:45 122  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE;
15:35:45 123  
15:35:45 124  	-- ELIGIBILITY LOGIC CHANGED TO:
15:35:45 125  	-- FOR EACH offer chain eligibility rule in OC:
15:35:45 126  	--   IF offer chain eligibility rule fails:
15:35:45 127  	--     deny purchase;
15:35:45 128  	--   END IF
15:35:45 129  	-- END FOR
15:35:45 130  	-- FOR EACH product eligibility rule in OC:
15:35:45 131  	--   IF product eligibilty rule fails:
15:35:45 132  	--     deny purchase;
15:35:45 133  	--   END IF
15:35:45 134  	-- END FOR
15:35:45 135  	-- allow purchase;
15:35:45 136  
15:35:45 137  	-- if user have any active existing subscriptions to the offer chain
15:35:45 138  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
15:35:45 139  	-- then deny purchase
15:35:45 140  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
15:35:45 141  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V17.INFINITY
15:35:45 142  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
15:35:45 143  	  -- Find first concurrent subscription id:
15:35:45 144  	  SELECT
15:35:45 145  	    ID into var_concur_subscription_id
15:35:45 146  	  FROM (
15:35:45 147  	    SELECT
15:35:45 148  	      ID
15:35:45 149  	    FROM
15:35:45 150  	      SUBSCRIPTION
15:35:45 151  	    WHERE
15:35:45 152  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:45 153  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
15:35:45 154  	      AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 155  	    ORDER BY
15:35:45 156  	      ID
15:35:45 157  	  )
15:35:45 158  	  WHERE
15:35:45 159  	    ROWNUM <= 1;
15:35:45 160  	  RAISE LIMIT_REACHED;
15:35:45 161  	END IF;
15:35:45 162  
15:35:45 163  	-- if user does not have any active existing subscriptions to the offer chain
15:35:45 164  	-- and if product from the offer chain is already owned from another offer chain
15:35:45 165  	-- then deny purchase
15:35:45 166  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V17.FALSE) THEN
15:35:45 167  	  FOR f_account_offer_chains IN (
15:35:45 168  	    SELECT DISTINCT
15:35:45 169  	      OFFER_CHAIN_ID
15:35:45 170  	    FROM
15:35:45 171  	      SUBSCRIPTION
15:35:45 172  	    WHERE
15:35:45 173  	      ACCOUNT_ID = var_account_id
15:35:45 174  	      AND (
15:35:45 175  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 176  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED)
15:35:45 177  	  )
15:35:45 178  	  LOOP
15:35:45 179  	    IF PROCS_OFFER_CHAIN_V17.CHECK_FOR_SAME_PRODUCTS(
15:35:45 180  	      in_offer_chain_1	       => in_offer_chain_id,
15:35:45 181  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
15:35:45 182  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V17.TRUE
15:35:45 183  	    ) = GLOBAL_CONSTANTS_V17.TRUE THEN
15:35:45 184  
15:35:45 185  	      -- Find first concurrent subscription id:
15:35:45 186  	      SELECT
15:35:45 187  		ID into var_concur_subscription_id
15:35:45 188  	      FROM (
15:35:45 189  		SELECT
15:35:45 190  		  ID
15:35:45 191  		FROM
15:35:45 192  		  SUBSCRIPTION
15:35:45 193  		WHERE
15:35:45 194  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:45 195  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
15:35:45 196  		  AND (
15:35:45 197  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 198  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED
15:35:45 199  		  )
15:35:45 200  		ORDER BY
15:35:45 201  		  ID
15:35:45 202  	      )
15:35:45 203  	      WHERE
15:35:45 204  		ROWNUM <= 1;
15:35:45 205  
15:35:45 206  	      RAISE PRODUCT_ALREADY_PURCHASED;
15:35:45 207  	    END IF;
15:35:45 208  	  END LOOP;
15:35:45 209  	END IF;
15:35:45 210  
15:35:45 211  	BEGIN
15:35:45 212  	  PROCS_OFFER_CHAIN_V17.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
15:35:45 213  	  EXCEPTION
15:35:45 214  	    WHEN OTHERS THEN
15:35:45 215  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 216  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
15:35:45 217  	END;
15:35:45 218  
15:35:45 219  	BEGIN
15:35:45 220  	  PROCS_INVOICE_V17.CREATE_INVOICE(
15:35:45 221  	    in_invoice_status => GLOBAL_STATUSES_V17.INVOICE_OPEN,
15:35:45 222  	    in_created_by     => in_created_by,
15:35:45 223  	    in_tax_exempt_id  => var_account_tax_exempt_id,
15:35:45 224  	    out_invoice_id    => var_new_invoice_id
15:35:45 225  	  );
15:35:45 226  	  EXCEPTION
15:35:45 227  	    WHEN OTHERS THEN
15:35:45 228  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 229  	      RAISE CAN_NOT_CREATE_INVOICE;
15:35:45 230  	END;
15:35:45 231  
15:35:45 232  	BEGIN
15:35:45 233  	  PROCS_LINE_ITEMS_V17.ADD_LINE_ITEMS(
15:35:45 234  	    in_invoice_id => var_new_invoice_id,
15:35:45 235  	    in_offer_id   => var_first_offer_id,
15:35:45 236  	    in_created_by => in_created_by
15:35:45 237  	  );
15:35:45 238  	  EXCEPTION
15:35:45 239  	    WHEN OTHERS THEN
15:35:45 240  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 241  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
15:35:45 242  	END;
15:35:45 243  
15:35:45 244  	PROCS_SUBSCRIPTION_CRU_V17.CREATE_SUBSCRIPTION(
15:35:45 245  	  out_subscription_id	    => var_new_subscription_id,
15:35:45 246  	  in_account_id 	    => var_account_id,
15:35:45 247  	  in_purchase_date	    => var_date,
15:35:45 248  	  in_offer_chain_id	    => in_offer_chain_id,
15:35:45 249  	  in_created_by 	    => in_created_by,
15:35:45 250  	  in_instrument_type_id     => in_instrument_type_id,
15:35:45 251  	  in_instrument_id	    => in_instrument_id,
15:35:45 252  	  in_subscription_status_id => GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 253  	);
15:35:45 254  
15:35:45 255  	BEGIN
15:35:45 256  	  PROCS_SUBSCRIPTION_V17.ANNOTATE_SUBSCRIPTION(
15:35:45 257  	    in_subscription_id => var_new_subscription_id,
15:35:45 258  	    in_agent_id        => in_agent_id,
15:35:45 259  	    in_note	       => in_note,
15:35:45 260  	    in_created_by      => in_created_by
15:35:45 261  	  );
15:35:45 262  	  EXCEPTION
15:35:45 263  	   WHEN OTHERS THEN
15:35:45 264  	     EXCEPTION_MESSAGE := SQLERRM;
15:35:45 265  	     RAISE CAN_NOT_CREATE_NOTE;
15:35:45 266  	END;
15:35:45 267  
15:35:45 268  	BEGIN
15:35:45 269  	  PROCS_LICENSE_V17.CREATE_LICENSE(
15:35:45 270  	    in_status_id		=> GLOBAL_STATUSES_V17.LICENSE_ACTIVE,
15:35:45 271  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 272  	    in_start_date		=> var_date,
15:35:45 273  	    in_end_date 		=> NULL, -- Will be calculated automatically
15:35:45 274  	    in_offer_id 		=> var_first_offer_id,
15:35:45 275  	    in_subscription_id		=> var_new_subscription_id,
15:35:45 276  	    in_invoice_id		=> var_new_invoice_id,
15:35:45 277  	    in_created_by		=> in_created_by,
15:35:45 278  	    in_is_extension		=> GLOBAL_CONSTANTS_V17.FALSE,
15:35:45 279  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V17.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
15:35:45 280  	    in_current_offer_recurr_num => 1,
15:35:45 281  	    out_license_id		=> out_new_license_id
15:35:45 282  	  );
15:35:45 283  	  EXCEPTION
15:35:45 284  	    WHEN OTHERS THEN
15:35:45 285  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 286  	      RAISE CAN_NOT_CREATE_LICENSE;
15:35:45 287  	END;
15:35:45 288  
15:35:45 289  	out_subscription_id := var_new_subscription_id;
15:35:45 290  	out_invoice_id := var_new_invoice_id;
15:35:45 291  
15:35:45 292  EXCEPTION
15:35:45 293  WHEN BAD_OFFER_CHAIN_STATUS THEN
15:35:45 294  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 295  	  SPROC_NAME, 'Offer chain is not active');
15:35:45 296  WHEN LIMIT_REACHED THEN
15:35:45 297  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.CONFLICT_ERROR,
15:35:45 298  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
15:35:45 299  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
15:35:45 300  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 301  	  SPROC_NAME, 'Can not create subsscription for disabled account');
15:35:45 302  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
15:35:45 303  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 304  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
15:35:45 305  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
15:35:45 306  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 307  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
15:35:45 308  WHEN BAD_OFFER_CHAIN THEN
15:35:45 309  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 310  	  SPROC_NAME, 'No such offer chain');
15:35:45 311  WHEN PRODUCT_ALREADY_PURCHASED THEN
15:35:45 312  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.CONFLICT_ERROR,
15:35:45 313  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
15:35:45 314  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
15:35:45 315  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 316  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
15:35:45 317  WHEN CAN_NOT_CREATE_INVOICE THEN
15:35:45 318  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 319  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
15:35:45 320  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
15:35:45 321  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 322  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
15:35:45 323  WHEN CAN_NOT_CREATE_LICENSE THEN
15:35:45 324  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 325  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
15:35:45 326  WHEN BAD_GROUP_ID THEN
15:35:45 327  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 328  	  SPROC_NAME, 'Bad group id');
15:35:45 329  WHEN CAN_NOT_CREATE_NOTE THEN
15:35:45 330  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 331  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:35:45 332  WHEN OTHERS THEN
15:35:45 333  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 334  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 335  END START_SUBSCRIPTION_CREATION;
15:35:45 336  
15:35:45 337  /******************************************************************************/
15:35:45 338  
15:35:45 339  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
15:35:45 340  	in_subscription_id    IN NUMBER,
15:35:45 341  	in_invoice_id	      IN NUMBER,
15:35:45 342  	in_instrument_type_id IN NUMBER,
15:35:45 343  	in_instrument_id      IN NUMBER,
15:35:45 344  	in_created_by	      IN VARCHAR2
15:35:45 345  ) AS
15:35:45 346  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
15:35:45 347  -- VARIABLES
15:35:45 348  var_invoice_amount     NUMBER(10, 2);
15:35:45 349  var_new_transaction_id NUMBER;
15:35:45 350  var_new_charge_id      NUMBER;
15:35:45 351  -- EXCEPTIONS
15:35:45 352  CAN_NOT_USE_FCINSTR	  EXCEPTION;
15:35:45 353  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
15:35:45 354  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
15:35:45 355  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
15:35:45 356  
15:35:45 357  EXCEPTION_MESSAGE VARCHAR2(1024);
15:35:45 358  BEGIN
15:35:45 359  
15:35:45 360  	-- Calculate invoice amount ( + discounts, taxes)
15:35:45 361  	BEGIN
15:35:45 362  	  PROCS_INVOICE_V17.CALCULATE_INVOICE_AMOUNT(
15:35:45 363  	    in_invoice_id => in_invoice_id,
15:35:45 364  	    out_amount	  => var_invoice_amount
15:35:45 365  	  );
15:35:45 366  	  EXCEPTION
15:35:45 367  	   WHEN OTHERS THEN
15:35:45 368  	     EXCEPTION_MESSAGE := SQLERRM;
15:35:45 369  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:35:45 370  	END;
15:35:45 371  
15:35:45 372  	IF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_ZCI_INSTRUMENT
15:35:45 373  	  AND var_invoice_amount > 0 THEN
15:35:45 374  	  RAISE CAN_NOT_USE_FCINSTR;
15:35:45 375  	END IF;
15:35:45 376  
15:35:45 377  	IF var_invoice_amount = 0 THEN
15:35:45 378  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
15:35:45 379  	  PROCS_INVOICE_CRU_V17.UPDATE_INVOICE(
15:35:45 380  	    in_invoice_id		   => in_invoice_id,
15:35:45 381  	    in_updated_by		   => in_created_by,
15:35:45 382  	    in_invoice_status_id	   => GLOBAL_STATUSES_V17.INVOICE_CLOSED
15:35:45 383  	  );
15:35:45 384  	ELSE
15:35:45 385  	  -- Create transaction and charge
15:35:45 386  	  BEGIN
15:35:45 387  	    PROCS_TRANSACTION_V17.CREATE_TRANSACTION(
15:35:45 388  	      in_transaction_id  => NULL,
15:35:45 389  	      in_status_id	 => GLOBAL_STATUSES_V17.TRANSACTION_PENDING,
15:35:45 390  	      in_amount 	 => var_invoice_amount,
15:35:45 391  	      in_created_by	 => in_created_by,
15:35:45 392  	      in_order_id	 => NULL,
15:35:45 393  	      out_transaction_id => var_new_transaction_id
15:35:45 394  	    );
15:35:45 395  	    EXCEPTION
15:35:45 396  	      WHEN OTHERS THEN
15:35:45 397  		EXCEPTION_MESSAGE := SQLERRM;
15:35:45 398  		RAISE CAN_NOT_CREATE_TRANSACTION;
15:35:45 399  	  END;
15:35:45 400  
15:35:45 401  	  BEGIN
15:35:45 402  	    PROCS_CHARGE_V17.CREATE_CHARGE(
15:35:45 403  	      in_invoice_id	    => in_invoice_id,
15:35:45 404  	      in_transaction_id     => var_new_transaction_id,
15:35:45 405  	      in_instrument_type_id => in_instrument_type_id,
15:35:45 406  	      in_instrument_id	    => in_instrument_id,
15:35:45 407  	      in_charge_amount	    => var_invoice_amount,
15:35:45 408  	      in_created_by	    => in_created_by,
15:35:45 409  	      in_charge_status_id   => GLOBAL_STATUSES_V17.CHARGE_OPENED,
15:35:45 410  	      out_charge_id	    => var_new_charge_id
15:35:45 411  	    );
15:35:45 412  	    EXCEPTION
15:35:45 413  	      WHEN OTHERS THEN
15:35:45 414  		EXCEPTION_MESSAGE := SQLERRM;
15:35:45 415  		RAISE CAN_NOT_CREATE_CHARGE;
15:35:45 416  	  END;
15:35:45 417  	END IF;
15:35:45 418  
15:35:45 419  EXCEPTION
15:35:45 420  WHEN CAN_NOT_USE_FCINSTR THEN
15:35:45 421  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 422  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
15:35:45 423  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:35:45 424  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 425  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
15:35:45 426  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:35:45 427  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 428  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:35:45 429  WHEN CAN_NOT_CREATE_CHARGE THEN
15:35:45 430  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 431  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:35:45 432  WHEN OTHERS THEN
15:35:45 433  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 434  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 435  END FINALIZE_SUBSCRIPTION_CREATION;
15:35:45 436  
15:35:45 437  /******************************************************************************/
15:35:45 438  
15:35:45 439  PROCEDURE SUSPEND_SUBSCRIPTION(
15:35:45 440  /*
15:35:45 441  Throws exceptions:
15:35:45 442  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 443  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:45 444  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 445  */
15:35:45 446  	  in_subs_id	IN NUMBER,
15:35:45 447  	  in_updated_by IN VARCHAR2
15:35:45 448  ) AS
15:35:45 449  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
15:35:45 450  var_subscription_status_id  NUMBER;
15:35:45 451  var_license_id		  NUMBER;
15:35:45 452  var_offer_id		  NUMBER;
15:35:45 453  var_license_start_date	  DATE;
15:35:45 454  var_license_end_date	  DATE;
15:35:45 455  
15:35:45 456  var_entitlement_dupration   VARCHAR2(30);
15:35:45 457  var_d_entitlement_dupration NUMBER;
15:35:45 458  
15:35:45 459  var_ym_interval INTERVAL YEAR TO MONTH;
15:35:45 460  var_ds_interval INTERVAL DAY(3) TO SECOND;
15:35:45 461  
15:35:45 462  -- EXCEPTIONS
15:35:45 463  BAD_SUBSCRIPTION_ID     EXCEPTION;
15:35:45 464  BAD_SUBSCRIPTION_STATUS EXCEPTION;
15:35:45 465  NO_LICENSE_FOUND	      EXCEPTION;
15:35:45 466  NO_OFFER_FOUND	      EXCEPTION;
15:35:45 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:35:45 468  BEGIN
15:35:45 469  	-- TODO: Finish this prcedure (in Phase II)
15:35:45 470  
15:35:45 471  	-- Get subscription by id. FAULT if no such subscription.
15:35:45 472  	-- begin TX
15:35:45 473  	--   Get for update associated license (subscription.license_id). FAULT if not found.
15:35:45 474  	--   Set status to PROCESSED.
15:35:45 475  	--   updated record.
15:35:45 476  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
15:35:45 477  	--   new subscription status is SUSPENDED.
15:35:45 478  	--   suspend_date is now.
15:35:45 479  	--   update subscription record.
15:35:45 480  	-- end TX
15:35:45 481  
15:35:45 482  	BEGIN
15:35:45 483  	  SELECT
15:35:45 484  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
15:35:45 485  	  FROM
15:35:45 486  	    SUBSCRIPTION
15:35:45 487  	  WHERE
15:35:45 488  	    SUBSCRIPTION.ID = in_subs_id;
15:35:45 489  	  EXCEPTION
15:35:45 490  	  WHEN NO_DATA_FOUND THEN
15:35:45 491  	    RAISE BAD_SUBSCRIPTION_ID;
15:35:45 492  	END;
15:35:45 493  
15:35:45 494  	IF var_subscription_status_id != GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE THEN
15:35:45 495  	  RAISE BAD_SUBSCRIPTION_STATUS;
15:35:45 496  	END IF;
15:35:45 497  
15:35:45 498  	BEGIN
15:35:45 499  	  SELECT
15:35:45 500  	    LICENSE.ID,
15:35:45 501  	    LICENSE.OFFER_ID,
15:35:45 502  	    LICENSE.START_DATE
15:35:45 503  	    into
15:35:45 504  	    var_license_id,
15:35:45 505  	    var_offer_id,
15:35:45 506  	    var_license_start_date
15:35:45 507  	  FROM
15:35:45 508  	    LICENSE
15:35:45 509  	  WHERE
15:35:45 510  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
15:35:45 511  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE;
15:35:45 512  	  EXCEPTION
15:35:45 513  	  WHEN NO_DATA_FOUND THEN
15:35:45 514  	    RAISE NO_LICENSE_FOUND;
15:35:45 515  	END;
15:35:45 516  
15:35:45 517  	PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 518  	  in_license_id        => var_license_id,
15:35:45 519  	  in_updated_by        => in_updated_by,
15:35:45 520  	  in_license_status_id => GLOBAL_STATUSES_V17.LICENSE_CLOSED
15:35:45 521  	);
15:35:45 522  
15:35:45 523  	BEGIN
15:35:45 524  	  SELECT
15:35:45 525  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
15:35:45 526  	  FROM
15:35:45 527  	    OFFER
15:35:45 528  	  WHERE
15:35:45 529  	    OFFER.ID = var_offer_id;
15:35:45 530  	  EXCEPTION
15:35:45 531  	  WHEN NO_DATA_FOUND THEN
15:35:45 532  	    RAISE NO_OFFER_FOUND;
15:35:45 533  	END;
15:35:45 534  
15:35:45 535  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
15:35:45 536  	var_ds_interval := substr(var_entitlement_dupration, 4);
15:35:45 537  
15:35:45 538  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
15:35:45 539  
15:35:45 540  	var_d_entitlement_dupration := var_license_end_date - current_date;
15:35:45 541  
15:35:45 542  	PROCS_SUBSCRIPTION_CRU_V17.UPDATE_SUBSCRIPTION(
15:35:45 543  	  in_subscription_id	       => in_subs_id,
15:35:45 544  	  in_updated_by 	       => in_updated_by,
15:35:45 545  	  in_suspend_date	       => SYSDATE,
15:35:45 546  	  in_subscription_status_id    => GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED,
15:35:45 547  	  in_days_remainning_ajustment => var_d_entitlement_dupration
15:35:45 548  	);
15:35:45 549  
15:35:45 550  EXCEPTION
15:35:45 551  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 552  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 553  	  SPROC_NAME, 'No such subscription');
15:35:45 554  WHEN BAD_SUBSCRIPTION_STATUS THEN
15:35:45 555  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 556  	  SPROC_NAME, 'Subscription is not active');
15:35:45 557  WHEN NO_LICENSE_FOUND THEN
15:35:45 558  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 559  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
15:35:45 560  WHEN NO_OFFER_FOUND THEN
15:35:45 561  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 562  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
15:35:45 563  WHEN OTHERS THEN
15:35:45 564  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 565  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 566  END SUSPEND_SUBSCRIPTION;
15:35:45 567  
15:35:45 568  /******************************************************************************/
15:35:45 569  
15:35:45 570  PROCEDURE REACTIVATE_SUBSCRIPTION (
15:35:45 571  	in_subscription_id IN  NUMBER,
15:35:45 572  	in_updated_by	   IN  VARCHAR2
15:35:45 573  ) AS
15:35:45 574  BEGIN
15:35:45 575  	-- TODO: finish this function (in Phase II)
15:35:45 576  	NULL;
15:35:45 577  END REACTIVATE_SUBSCRIPTION;
15:35:45 578  
15:35:45 579  /******************************************************************************/
15:35:45 580  
15:35:45 581  PROCEDURE GET_SUBSCRIPTION_INFO (
15:35:45 582  /*
15:35:45 583  Throws exceptions:
15:35:45 584  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 585  */
15:35:45 586  	  in_subscription_id  IN  NUMBER,
15:35:45 587  	  out_result_set      OUT SYS_REFCURSOR
15:35:45 588  ) AS
15:35:45 589  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
15:35:45 590  -- VARIABLES
15:35:45 591  temp_subscription_id NUMBER;
15:35:45 592  -- EXCEPTIONS
15:35:45 593  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 594  BEGIN
15:35:45 595  	-- Find subscription by id
15:35:45 596  	-- Return its details
15:35:45 597  
15:35:45 598  	BEGIN
15:35:45 599  	  SELECT
15:35:45 600  	    SUBSCRIPTION.ID into temp_subscription_id
15:35:45 601  	  FROM
15:35:45 602  	    SUBSCRIPTION
15:35:45 603  	  WHERE
15:35:45 604  	    SUBSCRIPTION.ID = in_subscription_id;
15:35:45 605  	  EXCEPTION
15:35:45 606  	    WHEN NO_DATA_FOUND THEN
15:35:45 607  	      RAISE BAD_SUBSCRIPTION_ID;
15:35:45 608  	END;
15:35:45 609  
15:35:45 610  	OPEN out_result_set FOR
15:35:45 611  	SELECT
15:35:45 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
15:35:45 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
15:35:45 614  	  SUBSCRIPTION.PURCHASE_DATE,
15:35:45 615  	  SUBSCRIPTION.SUSPEND_DATE,
15:35:45 616  	  SUBSCRIPTION.REACTIVATION_DATE,
15:35:45 617  	  SUBSCRIPTION.CANCELLATION_DATE,
15:35:45 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
15:35:45 619  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
15:35:45 620  	  OFFER_CHAIN.NAME,
15:35:45 621  	  OFFER_CHAIN.DESCRIPTION,
15:35:45 622  	  OFFER_CHAIN.PRODUCT_URI,
15:35:45 623  	  SUBSCRIPTION.INSTRUMENT_ID,
15:35:45 624  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
15:35:45 625  	  --PROCS_OFFER_CHAIN_V17.CALCULATE_OFFER_CHAIN_END_DATE(OFFER_CHAIN.ID, SUBSCRIPTION.PURCHASE_DATE) as "END_DATE",
15:35:45 626  	  PROCS_SUBSCRIPTION_V17.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
15:35:45 627  	  PROCS_SUBSCRIPTION_V17.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
15:35:45 628  	  PROCS_SUBSCRIPTION_V17.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
15:35:45 629  	  PROCS_SUBSCRIPTION_V17.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
15:35:45 630  	  (
15:35:45 631  	    SELECT
15:35:45 632  	      ACCOUNT.GROUP_ID
15:35:45 633  	      FROM ACCOUNT
15:35:45 634  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
15:35:45 635  	  ) as "GROUP_ID",
15:35:45 636  	  (
15:35:45 637  	    SELECT
15:35:45 638  	      MAX(ENTITLEMENT_END_DATE)
15:35:45 639  	      FROM LICENSE
15:35:45 640  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 641  	  )
15:35:45 642  	  as "ENT_END_DATE",
15:35:45 643  	  (
15:35:45 644  	    SELECT
15:35:45 645  	      MIN(START_DATE)
15:35:45 646  	      FROM LICENSE
15:35:45 647  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 648  	  )
15:35:45 649  	  as "ENT_START_DATE",
15:35:45 650  	  PROCS_SUBSCRIPTION_V17.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
15:35:45 651  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
15:35:45 652  	  GROUP_ACCOUNT.ID GA_ID,
15:35:45 653  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
15:35:45 654  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
15:35:45 655  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
15:35:45 656  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
15:35:45 657  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
15:35:45 658  	  GROUP_ACCOUNT.PHONE GA_PHONE,
15:35:45 659  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
15:35:45 660  	  GROUP_ACCOUNT.SEATS GA_SEATS,
15:35:45 661  	  PROCS_GROUP_ACCOUNT_V17.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
15:35:45 662  	  GROUP_ACCOUNT.IP GA_IP,
15:35:45 663  	  PROCS_SUBSCRIPTION_V17.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code
15:35:45 664  	FROM
15:35:45 665  	  SUBSCRIPTION
15:35:45 666  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:45 667  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
15:35:45 668  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
15:35:45 669  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
15:35:45 670  	WHERE
15:35:45 671  	  SUBSCRIPTION.ID = in_subscription_id;
15:35:45 672  
15:35:45 673  EXCEPTION
15:35:45 674  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 675  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 676  	  SPROC_NAME, 'No such subscription');
15:35:45 677  WHEN OTHERS THEN
15:35:45 678  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 680  END GET_SUBSCRIPTION_INFO;
15:35:45 681  
15:35:45 682  /******************************************************************************/
15:35:45 683  
15:35:45 684  PROCEDURE GET_SUBSCRIPTION_INVOICES (
15:35:45 685  /*
15:35:45 686  Throws exceptions:
15:35:45 687  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 688  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 689  */
15:35:45 690  	in_subscription_id  IN	NUMBER,
15:35:45 691  	out_result_set	    OUT SYS_REFCURSOR
15:35:45 692  ) AS
15:35:45 693  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
15:35:45 694  temp_subscription_id NUMBER;
15:35:45 695  BEGIN
15:35:45 696  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
15:35:45 697  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
15:35:45 698  	--   for each license
15:35:45 699  	--     get associated invoice
15:35:45 700  	--     add to results list
15:35:45 701  	--   end loop
15:35:45 702  	-- end
15:35:45 703  
15:35:45 704  	SELECT
15:35:45 705  	  SUBSCRIPTION.ID into temp_subscription_id
15:35:45 706  	FROM
15:35:45 707  	  SUBSCRIPTION
15:35:45 708  	WHERE
15:35:45 709  	  SUBSCRIPTION.ID = in_subscription_id;
15:35:45 710  
15:35:45 711  	OPEN out_result_set FOR
15:35:45 712  	SELECT
15:35:45 713  	  INVOICE.ID,
15:35:45 714  	  INVOICE.INVOICE_STATUS_ID,
15:35:45 715  	  INVOICE.CREATE_DATE,
15:35:45 716  	  INVOICE.CREATED_BY,
15:35:45 717  	  INVOICE.UPDATE_DATE,
15:35:45 718  	  INVOICE.UPDATED_BY,
15:35:45 719  	  INVOICE.TAX_EXEMPT_ID
15:35:45 720  	FROM
15:35:45 721  	  LICENSE
15:35:45 722  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:35:45 723  	WHERE
15:35:45 724  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
15:35:45 725  
15:35:45 726  EXCEPTION
15:35:45 727  WHEN NO_DATA_FOUND THEN
15:35:45 728  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 729  	  SPROC_NAME, 'Could not find subscription with given ID');
15:35:45 730  WHEN OTHERS THEN
15:35:45 731  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 732  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 733  END GET_SUBSCRIPTION_INVOICES;
15:35:45 734  
15:35:45 735  /******************************************************************************/
15:35:45 736  
15:35:45 737  PROCEDURE GET_SUBSCRIPTION_NOTES (
15:35:45 738  /*
15:35:45 739  Throws exceptions:
15:35:45 740  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 741  */
15:35:45 742  	in_subscription_id  IN	NUMBER,
15:35:45 743  	out_result_set	    OUT SYS_REFCURSOR
15:35:45 744  ) AS
15:35:45 745  -- VARIABLES
15:35:45 746  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
15:35:45 747  temp_subscription_id NUMBER;
15:35:45 748  -- EXCEPTIONS
15:35:45 749  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 750  BEGIN
15:35:45 751  
15:35:45 752  	-- Check that subscription exists
15:35:45 753  	BEGIN
15:35:45 754  	  SELECT
15:35:45 755  	    SUBSCRIPTION.ID into temp_subscription_id
15:35:45 756  	  FROM
15:35:45 757  	    SUBSCRIPTION
15:35:45 758  	  WHERE
15:35:45 759  	    SUBSCRIPTION.ID = in_subscription_id;
15:35:45 760  	  EXCEPTION
15:35:45 761  	    WHEN NO_DATA_FOUND THEN
15:35:45 762  	      RAISE BAD_SUBSCRIPTION_ID;
15:35:45 763  	END;
15:35:45 764  
15:35:45 765  	OPEN out_result_set FOR
15:35:45 766  	SELECT
15:35:45 767  	  SUBSCRIPTION_NOTE.NOTE,
15:35:45 768  	  SUBSCRIPTION_NOTE.CREATED_BY,
15:35:45 769  	  SUBSCRIPTION_NOTE.CREATE_DATE
15:35:45 770  	FROM
15:35:45 771  	  SUBSCRIPTION_NOTE
15:35:45 772  	WHERE
15:35:45 773  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
15:35:45 774  	ORDER BY
15:35:45 775  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
15:35:45 776  
15:35:45 777  EXCEPTION
15:35:45 778  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 779  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 780  	  SPROC_NAME, 'No such subscription');
15:35:45 781  WHEN OTHERS THEN
15:35:45 782  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 784  END GET_SUBSCRIPTION_NOTES;
15:35:45 785  
15:35:45 786  /******************************************************************************/
15:35:45 787  
15:35:45 788  PROCEDURE ANNOTATE_SUBSCRIPTION (
15:35:45 789  /*
15:35:45 790  Throws exceptions:
15:35:45 791  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 792  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 793  */
15:35:45 794  	in_subscription_id IN  NUMBER,
15:35:45 795  	in_agent_id	   IN  NUMBER,
15:35:45 796  	in_note 	   IN  VARCHAR2,
15:35:45 797  	in_created_by	   IN  VARCHAR2
15:35:45 798  ) AS
15:35:45 799  -- VARIABLES
15:35:45 800  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
15:35:45 801  temp_subscription_id     NUMBER;
15:35:45 802  var_subscription_note_id NUMBER;
15:35:45 803  -- EXCEPTIONS
15:35:45 804  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 805  BEGIN
15:35:45 806  
15:35:45 807  	-- Check that subscription exists
15:35:45 808  	BEGIN
15:35:45 809  	  SELECT
15:35:45 810  	    SUBSCRIPTION.ID into temp_subscription_id
15:35:45 811  	  FROM
15:35:45 812  	    SUBSCRIPTION
15:35:45 813  	  WHERE
15:35:45 814  	    SUBSCRIPTION.ID = in_subscription_id;
15:35:45 815  	  EXCEPTION
15:35:45 816  	    WHEN NO_DATA_FOUND THEN
15:35:45 817  	      RAISE BAD_SUBSCRIPTION_ID;
15:35:45 818  	END;
15:35:45 819  
15:35:45 820  	PROCS_SUBSCRIPTION_CRU_V17.CREATE_SUBSCRIPTION_NOTE(
15:35:45 821  	  inout_subscription_note_id => var_subscription_note_id,
15:35:45 822  	  in_agent_id		     => in_agent_id,
15:35:45 823  	  in_subscription_id	     => in_subscription_id,
15:35:45 824  	  in_note		     => in_note,
15:35:45 825  	  in_created_by 	     => in_created_by
15:35:45 826  	);
15:35:45 827  
15:35:45 828  EXCEPTION
15:35:45 829  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 830  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 831  	  SPROC_NAME, 'No such subscription');
15:35:45 832  WHEN OTHERS THEN
15:35:45 833  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 834  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 835  END ANNOTATE_SUBSCRIPTION;
15:35:45 836  
15:35:45 837  /******************************************************************************/
15:35:45 838  
15:35:45 839  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
15:35:45 840  /*
15:35:45 841  Throws exceptions:
15:35:45 842  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 843  */
15:35:45 844  	out_result_set OUT SYS_REFCURSOR
15:35:45 845  ) AS
15:35:45 846  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCELLING_SSCRPTN_REASONS';
15:35:45 847  BEGIN
15:35:45 848  
15:35:45 849  	OPEN out_result_set FOR
15:35:45 850  	SELECT
15:35:45 851  	  SUBSCRIPTION_CANCEL_REASON.ID,
15:35:45 852  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
15:35:45 853  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION
15:35:45 854  	FROM
15:35:45 855  	  SUBSCRIPTION_CANCEL_REASON
15:35:45 856  	WHERE
15:35:45 857  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCR_CANC_REASON_ACTIVE;
15:35:45 858  
15:35:45 859  EXCEPTION
15:35:45 860  WHEN OTHERS THEN
15:35:45 861  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 862  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 863  END GET_CANCELLING_SSCRPTN_REASONS;
15:35:45 864  
15:35:45 865  /******************************************************************************/
15:35:45 866  
15:35:45 867  FUNCTION GET_RENEWAL_DATE (
15:35:45 868  /*
15:35:45 869  Throws exceptions:
15:35:45 870  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 871  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 872  */
15:35:45 873  	in_subscription_id in NUMBER
15:35:45 874  ) RETURN DATE AS
15:35:45 875  -- VARIABLES
15:35:45 876  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
15:35:45 877  var_subscription_status NUMBER;
15:35:45 878  var_licenses_count      NUMBER;
15:35:45 879  var_license_end_date    DATE;
15:35:45 880  var_last_offer_id       NUMBER;
15:35:45 881  var_offer_chain_id      NUMBER;
15:35:45 882  var_last_license_id     NUMBER;
15:35:45 883  var_current_offer_index NUMBER;
15:35:45 884  var_current_offer_recurr_num NUMBER;
15:35:45 885  var_offer_recurr_num    NUMBER;
15:35:45 886  -- EXCEPTIONS
15:35:45 887  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 888  NO_LICENSES_FOUND EXCEPTION;
15:35:45 889  BEGIN
15:35:45 890  
15:35:45 891  	-- Get subscription id and offer chain id
15:35:45 892  	BEGIN
15:35:45 893  	  SELECT
15:35:45 894  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
15:35:45 895  	    SUBSCRIPTION.OFFER_CHAIN_ID
15:35:45 896  	    into
15:35:45 897  	    var_subscription_status,
15:35:45 898  	    var_offer_chain_id
15:35:45 899  	  FROM
15:35:45 900  	    SUBSCRIPTION
15:35:45 901  	  WHERE
15:35:45 902  	    SUBSCRIPTION.ID = in_subscription_id;
15:35:45 903  	  EXCEPTION
15:35:45 904  	    WHEN NO_DATA_FOUND THEN
15:35:45 905  	      RAISE BAD_SUBSCRIPTION_ID;
15:35:45 906  	END;
15:35:45 907  
15:35:45 908  	IF var_subscription_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE THEN
15:35:45 909  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
15:35:45 910  	  -- AND var_subscription_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED THEN
15:35:45 911  	  RETURN NULL;
15:35:45 912  	END IF;
15:35:45 913  
15:35:45 914  	BEGIN
15:35:45 915  	  SELECT
15:35:45 916  	    LICENSE_ID,
15:35:45 917  	    END_DATE,
15:35:45 918  	    OFFER_ID,
15:35:45 919  	    CURRENT_OFFER_INDEX,
15:35:45 920  	    CURRENT_OFFER_RECURR_NUM
15:35:45 921  	    into
15:35:45 922  	    var_last_license_id,
15:35:45 923  	    var_license_end_date,
15:35:45 924  	    var_last_offer_id,
15:35:45 925  	    var_current_offer_index,
15:35:45 926  	    var_current_offer_recurr_num
15:35:45 927  	  FROM
15:35:45 928  	    (
15:35:45 929  	      SELECT
15:35:45 930  		LICENSE.ID as "LICENSE_ID",
15:35:45 931  		LICENSE.END_DATE,
15:35:45 932  		LICENSE.OFFER_ID,
15:35:45 933  		LICENSE.CURRENT_OFFER_INDEX,
15:35:45 934  		LICENSE.CURRENT_OFFER_RECURR_NUM
15:35:45 935  	      FROM
15:35:45 936  		LICENSE
15:35:45 937  	      WHERE
15:35:45 938  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 939  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:35:45 940  	      ORDER BY END_DATE DESC
15:35:45 941  	    )
15:35:45 942  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
15:35:45 943  	  WHERE
15:35:45 944  	    ROWNUM <= 1;
15:35:45 945  
15:35:45 946  	  EXCEPTION
15:35:45 947  	    WHEN NO_DATA_FOUND THEN
15:35:45 948  	      -- RAISE NO_LICENSES_FOUND;
15:35:45 949  	      RETURN NULL;
15:35:45 950  	END;
15:35:45 951  
15:35:45 952  	SELECT
15:35:45 953  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
15:35:45 954  	FROM
15:35:45 955  	  OFFER_OFFER_CHAIN
15:35:45 956  	WHERE
15:35:45 957  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:35:45 958  	  AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
15:35:45 959  
15:35:45 960  	IF PROCS_OFFER_CHAIN_V17.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
15:35:45 961  	  AND var_offer_recurr_num = var_current_offer_recurr_num THEN
15:35:45 962  	  -- There is no next offer for this subscription
15:35:45 963  	  RETURN NULL;
15:35:45 964  	END IF;
15:35:45 965  
15:35:45 966  	RETURN var_license_end_date;
15:35:45 967  
15:35:45 968  EXCEPTION
15:35:45 969  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 970  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 971  	  SPROC_NAME, 'No such subscription');
15:35:45 972  WHEN NO_LICENSES_FOUND THEN
15:35:45 973  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 974  	  SPROC_NAME, 'No licenses found');
15:35:45 975  WHEN OTHERS THEN
15:35:45 976  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 977  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 978  END GET_RENEWAL_DATE;
15:35:45 979  
15:35:45 980  /******************************************************************************/
15:35:45 981  
15:35:45 982  FUNCTION GET_RECENT_CHARGE (
15:35:45 983  /*
15:35:45 984  Throws exceptions:
15:35:45 985  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 986  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 987  */
15:35:45 988  	in_subscription_id IN NUMBER
15:35:45 989  ) RETURN NUMBER AS
15:35:45 990  -- VARIABLES
15:35:45 991  SPROC_NAME	   CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
15:35:45 992  temp_subscription_id NUMBER;
15:35:45 993  var_recent_charge    NUMBER(10,2);
15:35:45 994  
15:35:45 995  -- EXCEPTIONS
15:35:45 996  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 997  BEGIN
15:35:45 998  
15:35:45 999  	BEGIN
15:35:45 1000  	   SELECT
15:35:45 1001  	     SUBSCRIPTION.ID into temp_subscription_id
15:35:45 1002  	   FROM
15:35:45 1003  	     SUBSCRIPTION
15:35:45 1004  	   WHERE
15:35:45 1005  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1006  	   EXCEPTION
15:35:45 1007  	     WHEN NO_DATA_FOUND THEN
15:35:45 1008  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 1009  	 END;
15:35:45 1010  
15:35:45 1011  	 BEGIN
15:35:45 1012  	   SELECT
15:35:45 1013  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
15:35:45 1014  	   FROM
15:35:45 1015  	     LICENSE
15:35:45 1016  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 1017  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:35:45 1018  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
15:35:45 1019  	   WHERE
15:35:45 1020  	     -- TODO: Review
15:35:45 1021  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_PROCESSED
15:35:45 1022  	     -- AND
15:35:45 1023  	     SUBSCRIPTION.ID = in_subscription_id
15:35:45 1024  	     AND CHARGE.CHARGE_AMOUNT >= 0
15:35:45 1025  	     AND ROWNUM <= 1
15:35:45 1026  	   ORDER BY
15:35:45 1027  	     LICENSE.ID ASC, CHARGE.ID DESC;
15:35:45 1028  	   EXCEPTION
15:35:45 1029  	     WHEN NO_DATA_FOUND THEN
15:35:45 1030  	       var_recent_charge := 0;
15:35:45 1031  	 END;
15:35:45 1032  
15:35:45 1033  	 RETURN var_recent_charge;
15:35:45 1034  
15:35:45 1035  EXCEPTION
15:35:45 1036  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 1037  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1038  	   SPROC_NAME, 'No such subscription');
15:35:45 1039  WHEN OTHERS THEN
15:35:45 1040  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1041  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1042  END GET_RECENT_CHARGE;
15:35:45 1043  
15:35:45 1044  /******************************************************************************/
15:35:45 1045  
15:35:45 1046  FUNCTION GET_BILLING_CYCLE (
15:35:45 1047  	 in_subscription_id IN NUMBER
15:35:45 1048  ) RETURN VARCHAR2 AS
15:35:45 1049  -- VARIABLES
15:35:45 1050  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
15:35:45 1051  temp_subscription_id NUMBER;
15:35:45 1052  var_offer_duration   VARCHAR2(30);
15:35:45 1053  
15:35:45 1054  -- EXCEPTIONS
15:35:45 1055  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 1056  BEGIN
15:35:45 1057  
15:35:45 1058  	 BEGIN
15:35:45 1059  	   SELECT
15:35:45 1060  	     SUBSCRIPTION.ID into temp_subscription_id
15:35:45 1061  	   FROM
15:35:45 1062  	     SUBSCRIPTION
15:35:45 1063  	   WHERE
15:35:45 1064  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1065  	   EXCEPTION
15:35:45 1066  	     WHEN NO_DATA_FOUND THEN
15:35:45 1067  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 1068  	 END;
15:35:45 1069  
15:35:45 1070  	 SELECT
15:35:45 1071  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
15:35:45 1072  	 FROM
15:35:45 1073  	   LICENSE
15:35:45 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 1075  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
15:35:45 1076  	 WHERE
15:35:45 1077  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_PROCESSED
15:35:45 1078  	   --AND
15:35:45 1079  	   SUBSCRIPTION.ID = in_subscription_id
15:35:45 1080  	   AND ROWNUM <= 1
15:35:45 1081  	 ORDER BY
15:35:45 1082  	   LICENSE.ID ASC;
15:35:45 1083  
15:35:45 1084  	 RETURN var_offer_duration;
15:35:45 1085  
15:35:45 1086  EXCEPTION
15:35:45 1087  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 1088  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1089  	   SPROC_NAME, 'No such subscription');
15:35:45 1090  WHEN OTHERS THEN
15:35:45 1091  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1092  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1093  END GET_BILLING_CYCLE;
15:35:45 1094  
15:35:45 1095  /******************************************************************************/
15:35:45 1096  
15:35:45 1097  PROCEDURE REFUND_SUBSCRIPTION (
15:35:45 1098  /*
15:35:45 1099  Throws exceptions:
15:35:45 1100  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1101  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1102  */
15:35:45 1103  	 in_subscription_id IN NUMBER,
15:35:45 1104  	 in_invoice_id	    IN NUMBER,
15:35:45 1105  	 in_refund_amount   IN NUMBER,
15:35:45 1106  	 in_note	    IN VARCHAR2,
15:35:45 1107  	 in_created_by	    IN VARCHAR2,
15:35:45 1108  	 out_charge_id	    OUT NUMBER
15:35:45 1109  ) AS
15:35:45 1110  -- VARIABLES
15:35:45 1111  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
15:35:45 1112  var_invoice_status_id  NUMBER;
15:35:45 1113  var_account_id	      NUMBER;
15:35:45 1114  var_account_status_id  NUMBER;
15:35:45 1115  var_new_transaction_id NUMBER;
15:35:45 1116  var_instrument_type_id NUMBER;
15:35:45 1117  var_instrument_id      NUMBER;
15:35:45 1118  var_new_charge_id      NUMBER;
15:35:45 1119  var_invoice_amount     NUMBER(10,2);
15:35:45 1120  var_refunds_before     NUMBER(10,2);
15:35:45 1121  var_charges_amount     NUMBER(10,2);
15:35:45 1122  -- EXCEPTIONS
15:35:45 1123  BAD_SUBSCRIPTION_ID	     EXCEPTION;
15:35:45 1124  ACCOUNT_IS_FROZEN	     EXCEPTION;
15:35:45 1125  BAD_INVOICE_ID		     EXCEPTION;
15:35:45 1126  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
15:35:45 1127  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
15:35:45 1128  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
15:35:45 1129  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
15:35:45 1130  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
15:35:45 1131  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
15:35:45 1132  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
15:35:45 1133  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
15:35:45 1134  EXCEPTION_MESSAGE	      VARCHAR2(1024);
15:35:45 1135  BEGIN
15:35:45 1136  
15:35:45 1137  	 BEGIN
15:35:45 1138  	   SELECT
15:35:45 1139  	     SUBSCRIPTION.INSTRUMENT_ID,
15:35:45 1140  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
15:35:45 1141  	     SUBSCRIPTION.ACCOUNT_ID
15:35:45 1142  	     into
15:35:45 1143  	     var_instrument_id,
15:35:45 1144  	     var_instrument_type_id,
15:35:45 1145  	     var_account_id
15:35:45 1146  	   FROM
15:35:45 1147  	     SUBSCRIPTION
15:35:45 1148  	   WHERE
15:35:45 1149  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1150  	   EXCEPTION
15:35:45 1151  	     WHEN NO_DATA_FOUND THEN
15:35:45 1152  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 1153  	 END;
15:35:45 1154  
15:35:45 1155  	 -- Check account status. It should not to be frozen
15:35:45 1156  	 SELECT
15:35:45 1157  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
15:35:45 1158  	 FROM
15:35:45 1159  	   ACCOUNT
15:35:45 1160  	 WHERE
15:35:45 1161  	   ACCOUNT.ID = var_account_id;
15:35:45 1162  
15:35:45 1163  	 IF var_account_status_id = GLOBAL_STATUSES_V17.ACCOUNT_FROZEN THEN
15:35:45 1164  	   RAISE ACCOUNT_IS_FROZEN;
15:35:45 1165  	 END IF;
15:35:45 1166  
15:35:45 1167  	 BEGIN
15:35:45 1168  	   SELECT
15:35:45 1169  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
15:35:45 1170  	   FROM
15:35:45 1171  	     INVOICE
15:35:45 1172  	   WHERE
15:35:45 1173  	     INVOICE.ID = in_invoice_id;
15:35:45 1174  	   EXCEPTION
15:35:45 1175  	     WHEN NO_DATA_FOUND THEN
15:35:45 1176  	       RAISE BAD_INVOICE_ID;
15:35:45 1177  	 END;
15:35:45 1178  
15:35:45 1179  	 IF var_invoice_status_id != GLOBAL_STATUSES_V17.INVOICE_CLOSED THEN
15:35:45 1180  	   RAISE INVOICE_IS_NOT_CLOSED;
15:35:45 1181  	 END IF;
15:35:45 1182  
15:35:45 1183  	 BEGIN
15:35:45 1184  	   PROCS_INVOICE_V17.CALCULATE_INVOICE_AMOUNT (
15:35:45 1185  	     in_invoice_id => in_invoice_id,
15:35:45 1186  	     out_amount    => var_invoice_amount
15:35:45 1187  	   );
15:35:45 1188  	   EXCEPTION
15:35:45 1189  	     WHEN OTHERS THEN
15:35:45 1190  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1191  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:35:45 1192  	 END;
15:35:45 1193  
15:35:45 1194  	 IF ( in_refund_amount > var_invoice_amount ) THEN
15:35:45 1195  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
15:35:45 1196  	 END IF;
15:35:45 1197  
15:35:45 1198  	 SELECT /*+ STAR_TRANSFORMATION */
15:35:45 1199  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
15:35:45 1200  	 FROM
15:35:45 1201  	   CHARGE
15:35:45 1202  	 WHERE
15:35:45 1203  	   CHARGE.INVOICE_ID = in_invoice_id
15:35:45 1204  	   AND (
15:35:45 1205  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_OPENED
15:35:45 1206  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_PROCESSED
15:35:45 1207  	   )
15:35:45 1208  	   AND CHARGE.CHARGE_AMOUNT < 0;
15:35:45 1209  
15:35:45 1210  	 -- Refunds are negative
15:35:45 1211  	 var_refunds_before := -var_refunds_before;
15:35:45 1212  
15:35:45 1213  	 var_charges_amount := 0;
15:35:45 1214  
15:35:45 1215  	 FOR f_processed_charges IN (
15:35:45 1216  	   SELECT
15:35:45 1217  	     CHARGE.CHARGE_AMOUNT
15:35:45 1218  	   FROM
15:35:45 1219  	     CHARGE
15:35:45 1220  	   WHERE
15:35:45 1221  	     CHARGE.INVOICE_ID = in_invoice_id
15:35:45 1222  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V17.CHARGE_PROCESSED FROM DUAL)
15:35:45 1223  	 )
15:35:45 1224  	 LOOP
15:35:45 1225  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
15:35:45 1226  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
15:35:45 1227  	   END IF;
15:35:45 1228  	 END LOOP;
15:35:45 1229  
15:35:45 1230  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
15:35:45 1231  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
15:35:45 1232  	 END IF;
15:35:45 1233  
15:35:45 1234  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
15:35:45 1235  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
15:35:45 1236  	 END IF;
15:35:45 1237  
15:35:45 1238  	 BEGIN
15:35:45 1239  	   PROCS_TRANSACTION_V17.CREATE_TRANSACTION(
15:35:45 1240  	     in_transaction_id	=> NULL,
15:35:45 1241  	     in_status_id	=> GLOBAL_STATUSES_V17.TRANSACTION_PREPARE,
15:35:45 1242  	     in_amount		=> -in_refund_amount,
15:35:45 1243  	     in_created_by	=> in_created_by,
15:35:45 1244  	     in_order_id	=> NULL,
15:35:45 1245  	     in_is_refund	=> GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 1246  	     out_transaction_id => var_new_transaction_id
15:35:45 1247  	   );
15:35:45 1248  	   EXCEPTION
15:35:45 1249  	     WHEN OTHERS THEN
15:35:45 1250  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1251  	       RAISE CAN_NOT_CREATE_TRANSACTION;
15:35:45 1252  	 END;
15:35:45 1253  
15:35:45 1254  	 BEGIN
15:35:45 1255  	   PROCS_CHARGE_V17.CREATE_CHARGE(
15:35:45 1256  	     in_invoice_id	   => in_invoice_id,
15:35:45 1257  	     in_transaction_id	   => var_new_transaction_id,
15:35:45 1258  	     in_instrument_type_id => var_instrument_type_id,
15:35:45 1259  	     in_instrument_id	   => var_instrument_id,
15:35:45 1260  	     in_charge_amount	   => -in_refund_amount,
15:35:45 1261  	     in_created_by	   => in_created_by,
15:35:45 1262  	     in_charge_status_id   => GLOBAL_STATUSES_V17.CHARGE_OPENED,
15:35:45 1263  	     out_charge_id	   => var_new_charge_id
15:35:45 1264  	   );
15:35:45 1265  	   EXCEPTION
15:35:45 1266  	     WHEN OTHERS THEN
15:35:45 1267  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1268  	       RAISE CAN_NOT_CREATE_CHARGE;
15:35:45 1269  	 END;
15:35:45 1270  
15:35:45 1271  	 IF in_note IS NOT NULL THEN
15:35:45 1272  	   BEGIN
15:35:45 1273  	     PROCS_SUBSCRIPTION_V17.ANNOTATE_SUBSCRIPTION(
15:35:45 1274  	       in_subscription_id => in_subscription_id,
15:35:45 1275  	       in_agent_id	  => 0, -- AGENT_ID??
15:35:45 1276  	       in_note		  => in_note,
15:35:45 1277  	       in_created_by	  => in_created_by
15:35:45 1278  	     );
15:35:45 1279  	     EXCEPTION
15:35:45 1280  	       WHEN OTHERS THEN
15:35:45 1281  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1282  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
15:35:45 1283  	   END;
15:35:45 1284  	 END IF;
15:35:45 1285  
15:35:45 1286  	 out_charge_id := var_new_charge_id;
15:35:45 1287  
15:35:45 1288  EXCEPTION
15:35:45 1289  WHEN INVOICE_IS_NOT_CLOSED THEN
15:35:45 1290  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 1291  	   SPROC_NAME, 'Invoice is not closed');
15:35:45 1292  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 1293  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1294  	   SPROC_NAME, 'No such subscription');
15:35:45 1295  WHEN ACCOUNT_IS_FROZEN THEN
15:35:45 1296  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 1297  	   SPROC_NAME, 'Could not refund subscription for frozen account');
15:35:45 1298  WHEN BAD_INVOICE_ID THEN
15:35:45 1299  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1300  	   SPROC_NAME, 'No such invoice');
15:35:45 1301  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:35:45 1302  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1303  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
15:35:45 1304  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
15:35:45 1305  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1306  	   SPROC_NAME, 'Refund is greater than amount');
15:35:45 1307  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
15:35:45 1308  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1309  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
15:35:45 1310  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
15:35:45 1311  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1312  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
15:35:45 1313  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:35:45 1314  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1315  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:35:45 1316  WHEN CAN_NOT_CREATE_CHARGE THEN
15:35:45 1317  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1318  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:35:45 1319  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
15:35:45 1320  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1321  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:35:45 1322  WHEN OTHERS THEN
15:35:45 1323  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1324  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1325  END REFUND_SUBSCRIPTION;
15:35:45 1326  
15:35:45 1327  /******************************************************************************/
15:35:45 1328  
15:35:45 1329  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
15:35:45 1330  /*
15:35:45 1331  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1332  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:45 1333  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1334  */
15:35:45 1335  	 in_subscription_id	 IN NUMBER,
15:35:45 1336  	 in_effective_start_date IN DATE,
15:35:45 1337  	 in_effective_end_date	 IN DATE,
15:35:45 1338  	 in_note		 IN VARCHAR2,
15:35:45 1339  	 in_updated_by		 IN VARCHAR2
15:35:45 1340  ) AS
15:35:45 1341  -- VARIABLES
15:35:45 1342  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
15:35:45 1343  temp_subscription_id	    NUMBER;
15:35:45 1344  var_current_license_id	    NUMBER;
15:35:45 1345  var_current_license_start_date DATE;
15:35:45 1346  var_current_license_end_date DATE;
15:35:45 1347  var_current_offer_id	    NUMBER;
15:35:45 1348  var_current_invoice_id	    NUMBER;
15:35:45 1349  var_current_date 	    DATE;
15:35:45 1350  var_current_offer_index	    NUMBER;
15:35:45 1351  var_current_offer_recurr_num NUMBER;
15:35:45 1352  var_account_tax_exempt_id    VARCHAR2(255);
15:35:45 1353  
15:35:45 1354  var_free_invoice_id NUMBER;
15:35:45 1355  var_free_license_id NUMBER;
15:35:45 1356  var_new_license_id  NUMBER;
15:35:45 1357  var_ext_license_id  NUMBER;
15:35:45 1358  -- EXCEPTIONS
15:35:45 1359  BAD_SUBSCRIPTION_ID	     EXCEPTION;
15:35:45 1360  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
15:35:45 1361  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
15:35:45 1362  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
15:35:45 1363  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
15:35:45 1364  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
15:35:45 1365  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
15:35:45 1366  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
15:35:45 1367  EXT_START_DATE_LATER_THEN_END EXCEPTION;
15:35:45 1368  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
15:35:45 1369  EXCEPTION_MESSAGE	     VARCHAR2(1024);
15:35:45 1370  BEGIN
15:35:45 1371  
15:35:45 1372  	 var_current_date := PROCS_COMMON_V17.NORMALIZE_DATE(SYSDATE);
15:35:45 1373  
15:35:45 1374  	 -- Check that subscription exists
15:35:45 1375  	 BEGIN
15:35:45 1376  	   SELECT
15:35:45 1377  	     SUBSCRIPTION.ID into temp_subscription_id
15:35:45 1378  	   FROM
15:35:45 1379  	     SUBSCRIPTION
15:35:45 1380  	   WHERE
15:35:45 1381  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1382  	   EXCEPTION
15:35:45 1383  	     WHEN NO_DATA_FOUND THEN
15:35:45 1384  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 1385  	 END;
15:35:45 1386  
15:35:45 1387  	 -- Get account tax exempt id
15:35:45 1388  	 SELECT DISTINCT
15:35:45 1389  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
15:35:45 1390  	 FROM
15:35:45 1391  	   ACCOUNT
15:35:45 1392  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:35:45 1393  	 WHERE
15:35:45 1394  	   SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1395  
15:35:45 1396  	 -- Select current data
15:35:45 1397  	 BEGIN
15:35:45 1398  	   SELECT
15:35:45 1399  	     LICENSE.ID,
15:35:45 1400  	     LICENSE.START_DATE,
15:35:45 1401  	     LICENSE.END_DATE,
15:35:45 1402  	     LICENSE.CURRENT_OFFER_INDEX,
15:35:45 1403  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
15:35:45 1404  	     OFFER.ID,
15:35:45 1405  	     INVOICE.ID
15:35:45 1406  	   INTO
15:35:45 1407  	     var_current_license_id,
15:35:45 1408  	     var_current_license_start_date,
15:35:45 1409  	     var_current_license_end_date,
15:35:45 1410  	     var_current_offer_index,
15:35:45 1411  	     var_current_offer_recurr_num,
15:35:45 1412  	     var_current_offer_id,
15:35:45 1413  	     var_current_invoice_id
15:35:45 1414  	   FROM
15:35:45 1415  	     LICENSE
15:35:45 1416  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 1417  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
15:35:45 1418  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:35:45 1419  	   WHERE
15:35:45 1420  	     SUBSCRIPTION.ID = in_subscription_id
15:35:45 1421  	     AND PROCS_COMMON_V17.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
15:35:45 1422  	     AND PROCS_COMMON_V17.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
15:35:45 1423  	     AND ROWNUM <= 1
15:35:45 1424  	   ORDER BY
15:35:45 1425  	     LICENSE.ID DESC;
15:35:45 1426  	   EXCEPTION
15:35:45 1427  	     WHEN NO_DATA_FOUND THEN
15:35:45 1428  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
15:35:45 1429  	 END;
15:35:45 1430  
15:35:45 1431  	 IF var_current_license_end_date < in_effective_start_date THEN
15:35:45 1432  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
15:35:45 1433  	 END IF;
15:35:45 1434  
15:35:45 1435  	 IF var_current_license_start_date > in_effective_start_date THEN
15:35:45 1436  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
15:35:45 1437  	 END IF;
15:35:45 1438  
15:35:45 1439  	 IF in_effective_start_date > in_effective_end_date THEN
15:35:45 1440  	   RAISE EXT_START_DATE_LATER_THEN_END;
15:35:45 1441  	 END IF;
15:35:45 1442  
15:35:45 1443  	 -- Closing curent license
15:35:45 1444  	 BEGIN
15:35:45 1445  	   PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 1446  	     in_license_id	   => var_current_license_id,
15:35:45 1447  	     in_updated_by	   => in_updated_by,
15:35:45 1448  	     in_license_status_id  => GLOBAL_STATUSES_V17.LICENSE_CLOSED,
15:35:45 1449  	     in_end_date	   => in_effective_start_date,
15:35:45 1450  	     in_needs_entitlements => GLOBAL_CONSTANTS_V17.TRUE
15:35:45 1451  	   );
15:35:45 1452  	   EXCEPTION
15:35:45 1453  	     WHEN OTHERS THEN
15:35:45 1454  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1455  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
15:35:45 1456  	 END;
15:35:45 1457  
15:35:45 1458  	 -- Creating new "free" invoice
15:35:45 1459  	 BEGIN
15:35:45 1460  	   PROCS_INVOICE_V17.CREATE_INVOICE(
15:35:45 1461  	     in_invoice_status => GLOBAL_STATUSES_V17.INVOICE_CLOSED,
15:35:45 1462  	     in_created_by     => in_updated_by,
15:35:45 1463  	     in_tax_exempt_id  => var_account_tax_exempt_id,
15:35:45 1464  	     out_invoice_id    => var_free_invoice_id
15:35:45 1465  	   );
15:35:45 1466  	   EXCEPTION
15:35:45 1467  	     WHEN OTHERS THEN
15:35:45 1468  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1469  	       RAISE CAN_NOT_CREATE_INVOICE;
15:35:45 1470  	 END;
15:35:45 1471  
15:35:45 1472  	 -- Creating new "free" license
15:35:45 1473  	 BEGIN
15:35:45 1474  	   PROCS_LICENSE_V17.CREATE_LICENSE (
15:35:45 1475  	     in_status_id		 => GLOBAL_STATUSES_V17.LICENSE_ACTIVE,
15:35:45 1476  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 1477  	     in_start_date		 => in_effective_start_date,
15:35:45 1478  	     in_end_date		 => in_effective_end_date,
15:35:45 1479  	     in_offer_id		 => var_current_offer_id,
15:35:45 1480  	     in_subscription_id 	 => in_subscription_id,
15:35:45 1481  	     in_invoice_id		 => var_free_invoice_id,
15:35:45 1482  	     in_created_by		 => in_updated_by,
15:35:45 1483  	     in_is_extension		 => GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 1484  	     in_current_offer_index	 => var_current_offer_index,
15:35:45 1485  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
15:35:45 1486  	     out_license_id		 => var_free_license_id
15:35:45 1487  	   );
15:35:45 1488  	   EXCEPTION
15:35:45 1489  	     WHEN OTHERS THEN
15:35:45 1490  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1491  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
15:35:45 1492  	 END;
15:35:45 1493  
15:35:45 1494  	 -- Creating new license
15:35:45 1495  	 IF PROCS_COMMON_V17.NORMALIZE_DATE(var_current_license_end_date) >
15:35:45 1496  	    PROCS_COMMON_V17.NORMALIZE_DATE(in_effective_start_date) THEN
15:35:45 1497  	   BEGIN
15:35:45 1498  	     PROCS_LICENSE_V17.CREATE_LICENSE (
15:35:45 1499  	       in_status_id		   => GLOBAL_STATUSES_V17.LICENSE_ACTIVE,
15:35:45 1500  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 1501  	       in_start_date		   => in_effective_end_date,
15:35:45 1502  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
15:35:45 1503  	       in_offer_id		   => var_current_offer_id,
15:35:45 1504  	       in_subscription_id	   => in_subscription_id,
15:35:45 1505  	       in_invoice_id		   => var_current_invoice_id,
15:35:45 1506  	       in_created_by		   => in_updated_by,
15:35:45 1507  	       in_is_extension		   => GLOBAL_CONSTANTS_V17.FALSE,
15:35:45 1508  	       in_current_offer_index	   => var_current_offer_index,
15:35:45 1509  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
15:35:45 1510  	       out_license_id		   => var_ext_license_id
15:35:45 1511  	     );
15:35:45 1512  	     EXCEPTION
15:35:45 1513  	       WHEN OTHERS THEN
15:35:45 1514  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1515  		 RAISE CAN_NOT_CREATE_END_LICENSE;
15:35:45 1516  	   END;
15:35:45 1517  	 END IF;
15:35:45 1518  
15:35:45 1519  	 -- Create new note for subscription
15:35:45 1520  	 BEGIN
15:35:45 1521  	   PROCS_SUBSCRIPTION_V17.ANNOTATE_SUBSCRIPTION (
15:35:45 1522  	     in_subscription_id => in_subscription_id,
15:35:45 1523  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
15:35:45 1524  	     in_note		=> in_note,
15:35:45 1525  	     in_created_by	=> in_updated_by
15:35:45 1526  	   );
15:35:45 1527  	   EXCEPTION
15:35:45 1528  	     WHEN OTHERS THEN
15:35:45 1529  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1530  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
15:35:45 1531  	 END;
15:35:45 1532  
15:35:45 1533  EXCEPTION
15:35:45 1534  WHEN EXT_START_DATE_LATER_THEN_END THEN
15:35:45 1535  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1536  	   SPROC_NAME, 'Extension start date is bigger then end date');
15:35:45 1537  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
15:35:45 1538  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1539  	   SPROC_NAME, 'Extension start date is too far');
15:35:45 1540  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
15:35:45 1541  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1542  	   SPROC_NAME, 'Extension start date is too small');
15:35:45 1543  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 1544  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1545  	   SPROC_NAME, 'No such subscription');
15:35:45 1546  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
15:35:45 1547  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1548  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
15:35:45 1549  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
15:35:45 1550  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1551  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
15:35:45 1552  WHEN CAN_NOT_CREATE_INVOICE THEN
15:35:45 1553  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1554  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
15:35:45 1555  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
15:35:45 1556  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1557  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
15:35:45 1558  WHEN CAN_NOT_CREATE_END_LICENSE THEN
15:35:45 1559  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1560  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
15:35:45 1561  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
15:35:45 1562  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1563  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
15:35:45 1564  WHEN OTHERS THEN
15:35:45 1565  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1566  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1567  END ADD_SUBSCRIPTION_EXTENSION;
15:35:45 1568  
15:35:45 1569  /******************************************************************************/
15:35:45 1570  
15:35:45 1571  FUNCTION CALC_SUBSCRIPTION_END_DATE (
15:35:45 1572  /*
15:35:45 1573  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1574  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:45 1575  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1576  Returns:
15:35:45 1577  NULL if it is impossible to calculate end date (for example,
15:35:45 1578  	 offer chain includes offer with infinity recurrences number)
15:35:45 1579  DATE else
15:35:45 1580  */
15:35:45 1581  	 in_subscription_id IN NUMBER
15:35:45 1582  ) RETURN DATE AS
15:35:45 1583  -- VARIABLES
15:35:45 1584  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
15:35:45 1585  last_license_id		     NUMBER;
15:35:45 1586  last_license_end_date	     DATE;
15:35:45 1587  last_license_offer_id	     NUMBER;
15:35:45 1588  last_license_offer_index      NUMBER;
15:35:45 1589  last_license_offer_recurr_num NUMBER;
15:35:45 1590  var_last_license_id	     NUMBER;
15:35:45 1591  var_offer_chain_id	     NUMBER;
15:35:45 1592  var_current_offer_rec_number  NUMBER;
15:35:45 1593  var_next_offers_set	     SYS_REFCURSOR;
15:35:45 1594  var_next_offer_duration	     VARCHAR2(30);
15:35:45 1595  var_next_offer_recur	     NUMBER;
15:35:45 1596  var_infinity_offers_number    NUMBER;
15:35:45 1597  
15:35:45 1598  var_result_date DATE;
15:35:45 1599  
15:35:45 1600  var_ym_interval	INTERVAL YEAR TO MONTH;
15:35:45 1601  var_ds_interval	INTERVAL DAY(3) TO SECOND;
15:35:45 1602  var_offer_years	NUMBER;
15:35:45 1603  var_offer_months NUMBER;
15:35:45 1604  var_offer_days	NUMBER;
15:35:45 1605  
15:35:45 1606  -- EXCEPTIONS
15:35:45 1607  BAD_SUBSCRIPTION_ID	  EXCEPTION;
15:35:45 1608  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
15:35:45 1609  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
15:35:45 1610  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
15:35:45 1611  EXCEPTION_MESSAGE	  VARCHAR2(1024);
15:35:45 1612  BEGIN
15:35:45 1613  
15:35:45 1614  	 BEGIN
15:35:45 1615  	   SELECT
15:35:45 1616  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
15:35:45 1617  	   FROM
15:35:45 1618  	     SUBSCRIPTION
15:35:45 1619  	   WHERE
15:35:45 1620  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1621  	   EXCEPTION
15:35:45 1622  	     WHEN NO_DATA_FOUND THEN
15:35:45 1623  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 1624  	 END;
15:35:45 1625  
15:35:45 1626  	 BEGIN
15:35:45 1627  	   SELECT
15:35:45 1628  	     ID into var_last_license_id
15:35:45 1629  	   FROM
15:35:45 1630  	     (
15:35:45 1631  	       SELECT
15:35:45 1632  		 LICENSE.ID
15:35:45 1633  	       FROM
15:35:45 1634  		 LICENSE
15:35:45 1635  	       WHERE
15:35:45 1636  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:35:45 1637  	       ORDER BY
15:35:45 1638  		 LICENSE.END_DATE DESC
15:35:45 1639  	     )
15:35:45 1640  	   WHERE
15:35:45 1641  	     ROWNUM <= 1;
15:35:45 1642  	   EXCEPTION
15:35:45 1643  	     WHEN NO_DATA_FOUND THEN
15:35:45 1644  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
15:35:45 1645  	 END;
15:35:45 1646  
15:35:45 1647  	 SELECT
15:35:45 1648  	   COUNT(*) into var_infinity_offers_number
15:35:45 1649  	 FROM
15:35:45 1650  	   OFFER_OFFER_CHAIN
15:35:45 1651  	 WHERE
15:35:45 1652  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:35:45 1653  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V17.OFFER_REC_INFINITY;
15:35:45 1654  
15:35:45 1655  	 IF var_infinity_offers_number > 0 THEN
15:35:45 1656  	   RETURN NULL;
15:35:45 1657  	 END IF;
15:35:45 1658  
15:35:45 1659  	 BEGIN
15:35:45 1660  	   SELECT
15:35:45 1661  	     LICENSE.ID,
15:35:45 1662  	     LICENSE.END_DATE,
15:35:45 1663  	     LICENSE.CURRENT_OFFER_INDEX,
15:35:45 1664  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
15:35:45 1665  	     LICENSE.OFFER_ID
15:35:45 1666  	     into
15:35:45 1667  	     last_license_id,
15:35:45 1668  	     last_license_end_date,
15:35:45 1669  	     last_license_offer_index,
15:35:45 1670  	     last_license_offer_recurr_num,
15:35:45 1671  	     last_license_offer_id
15:35:45 1672  	   FROM
15:35:45 1673  	     LICENSE
15:35:45 1674  	   WHERE
15:35:45 1675  	     LICENSE.ID = var_last_license_id;
15:35:45 1676  	   EXCEPTION
15:35:45 1677  	     WHEN NO_DATA_FOUND THEN
15:35:45 1678  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
15:35:45 1679  	 END;
15:35:45 1680  
15:35:45 1681  	 var_result_date := last_license_end_date;
15:35:45 1682  
15:35:45 1683  	 -- Find current recurrence number
15:35:45 1684  	 SELECT
15:35:45 1685  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
15:35:45 1686  	 FROM
15:35:45 1687  	   OFFER_OFFER_CHAIN
15:35:45 1688  	 WHERE
15:35:45 1689  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:35:45 1690  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
15:35:45 1691  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
15:35:45 1692  
15:35:45 1693  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
15:35:45 1694  	   BEGIN
15:35:45 1695  	     PROCS_OFFER_CHAIN_V17.GET_OFFER_LENGTH(
15:35:45 1696  	       last_license_offer_id,
15:35:45 1697  	       var_offer_years,
15:35:45 1698  	       var_offer_months,
15:35:45 1699  	       var_offer_days
15:35:45 1700  	     );
15:35:45 1701  
15:35:45 1702  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
15:35:45 1703  	     var_ds_interval := var_offer_days||' 0:0:0';
15:35:45 1704  
15:35:45 1705  	     var_result_date := var_result_date
15:35:45 1706  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
15:35:45 1707  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
15:35:45 1708  	     EXCEPTION
15:35:45 1709  	       WHEN OTHERS THEN
15:35:45 1710  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1711  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
15:35:45 1712  	   END;
15:35:45 1713  	 END IF;
15:35:45 1714  
15:35:45 1715  	 OPEN var_next_offers_set FOR
15:35:45 1716  	 SELECT
15:35:45 1717  	   OFFER.ENTITLEMENT_DURATION,
15:35:45 1718  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
15:35:45 1719  	 FROM
15:35:45 1720  	   OFFER_OFFER_CHAIN
15:35:45 1721  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:35:45 1722  	 WHERE
15:35:45 1723  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
15:35:45 1724  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
15:35:45 1725  
15:35:45 1726  	 LOOP
15:35:45 1727  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
15:35:45 1728  	   EXIT WHEN var_next_offers_set%NOTFOUND;
15:35:45 1729  	   BEGIN
15:35:45 1730  	     PROCS_COMMON_V17.ISO8601DURATION_TO_INTERVALS(
15:35:45 1731  	       var_next_offer_duration,
15:35:45 1732  	       var_offer_years,
15:35:45 1733  	       var_offer_months,
15:35:45 1734  	       var_offer_days
15:35:45 1735  	     );
15:35:45 1736  
15:35:45 1737  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
15:35:45 1738  	     var_ds_interval := var_offer_days||' 0:0:0';
15:35:45 1739  
15:35:45 1740  	     var_result_date := var_result_date
15:35:45 1741  	       + ( var_ym_interval * var_next_offer_recur )
15:35:45 1742  	       + ( var_ds_interval * var_next_offer_recur );
15:35:45 1743  	     EXCEPTION
15:35:45 1744  	       WHEN OTHERS THEN
15:35:45 1745  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1746  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
15:35:45 1747  	   END;
15:35:45 1748  	 END LOOP;
15:35:45 1749  
15:35:45 1750  	 RETURN var_result_date;
15:35:45 1751  
15:35:45 1752  EXCEPTION
15:35:45 1753  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 1754  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1755  	   SPROC_NAME, 'No such subscription');
15:35:45 1756  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
15:35:45 1757  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1758  	   SPROC_NAME, 'Could not find last license for given subscription');
15:35:45 1759  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
15:35:45 1760  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1761  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
15:35:45 1762  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
15:35:45 1763  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1764  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
15:35:45 1765  WHEN OTHERS THEN
15:35:45 1766  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1767  	   SPROC_NAME, 'Unkown error', SQLERRM);
15:35:45 1768  END CALC_SUBSCRIPTION_END_DATE;
15:35:45 1769  
15:35:45 1770  /******************************************************************************/
15:35:45 1771  
15:35:45 1772  PROCEDURE HAS_FUTURE_LICENSE (
15:35:45 1773  /*
15:35:45 1774  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1775  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1776  --
15:35:45 1777  RETURNS:
15:35:45 1778  GLOBAL_CONSTANTS_V17.TRUE - if has,
15:35:45 1779  GLOBAL_CONSTANTS_V17.FALSE - else
15:35:45 1780  */
15:35:45 1781  	 in_license_id IN  NUMBER,
15:35:45 1782  	 out_result    OUT NUMBER
15:35:45 1783  ) AS
15:35:45 1784  -- VARIABLES
15:35:45 1785  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
15:35:45 1786  var_subscription_id	 NUMBER;
15:35:45 1787  var_future_licenses_count NUMBER;
15:35:45 1788  -- EXCEPTIONS
15:35:45 1789  BAD_LICENSE_ID	    EXCEPTION;
15:35:45 1790  BEGIN
15:35:45 1791  
15:35:45 1792  	 BEGIN
15:35:45 1793  	   SELECT
15:35:45 1794  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
15:35:45 1795  	   FROM
15:35:45 1796  	     LICENSE
15:35:45 1797  	   WHERE
15:35:45 1798  	     LICENSE.ID = in_license_id;
15:35:45 1799  	   EXCEPTION
15:35:45 1800  	     WHEN NO_DATA_FOUND THEN
15:35:45 1801  	       RAISE BAD_LICENSE_ID;
15:35:45 1802  	 END;
15:35:45 1803  
15:35:45 1804  	 SELECT
15:35:45 1805  	   COUNT(*) into var_future_licenses_count
15:35:45 1806  	 FROM
15:35:45 1807  	   LICENSE
15:35:45 1808  	 WHERE
15:35:45 1809  	   LICENSE.ID != in_license_id
15:35:45 1810  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
15:35:45 1811  	   AND LICENSE.END_DATE > sysdate;
15:35:45 1812  
15:35:45 1813  	 IF var_future_licenses_count > 0 THEN
15:35:45 1814  	   out_result := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 1815  	 ELSE
15:35:45 1816  	   out_result := GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 1817  	 END IF;
15:35:45 1818  
15:35:45 1819  EXCEPTION
15:35:45 1820  WHEN BAD_LICENSE_ID THEN
15:35:45 1821  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1822  	   SPROC_NAME, 'No such license');
15:35:45 1823  WHEN OTHERS THEN
15:35:45 1824  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1825  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1826  END HAS_FUTURE_LICENSE;
15:35:45 1827  
15:35:45 1828  /******************************************************************************/
15:35:45 1829  
15:35:45 1830  PROCEDURE CLOSE_SUBSCRIPTION (
15:35:45 1831  	 in_subscription_id IN NUMBER,
15:35:45 1832  	 in_updated_by	    IN VARCHAR2
15:35:45 1833  ) AS
15:35:45 1834  -- VARIABLES
15:35:45 1835  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
15:35:45 1836  temp_subscription_id NUMBER;
15:35:45 1837  var_licenses_count   NUMBER;
15:35:45 1838  -- EXCEPTIONS
15:35:45 1839  BAD_SUBSCRIPTION_ID    EXCEPTION;
15:35:45 1840  ACTIVE_LICENSES_FOUND  EXCEPTION;
15:35:45 1841  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 1842  BEGIN
15:35:45 1843  
15:35:45 1844  	 BEGIN
15:35:45 1845  	   SELECT
15:35:45 1846  	     SUBSCRIPTION.ID into temp_subscription_id
15:35:45 1847  	   FROM
15:35:45 1848  	     SUBSCRIPTION
15:35:45 1849  	   WHERE
15:35:45 1850  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1851  	   EXCEPTION
15:35:45 1852  	     WHEN NO_DATA_FOUND THEN
15:35:45 1853  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 1854  	 END;
15:35:45 1855  
15:35:45 1856  	 SELECT
15:35:45 1857  	   COUNT(*) into var_licenses_count
15:35:45 1858  	 FROM
15:35:45 1859  	   LICENSE
15:35:45 1860  	 WHERE
15:35:45 1861  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:35:45 1862  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE;
15:35:45 1863  
15:35:45 1864  	 IF var_licenses_count > 0 THEN
15:35:45 1865  	   RAISE ACTIVE_LICENSES_FOUND;
15:35:45 1866  	 END IF;
15:35:45 1867  
15:35:45 1868  	 PROCS_SUBSCRIPTION_V17.UPDATE_SUBSCRIPTION_STATUS(
15:35:45 1869  	   in_subscription_id	     => in_subscription_id,
15:35:45 1870  	   in_updated_by	     => in_updated_by,
15:35:45 1871  	   in_subscription_status_id => GLOBAL_STATUSES_V17.SUBSCRIPTION_CLOSED
15:35:45 1872  	 );
15:35:45 1873  
15:35:45 1874  EXCEPTION
15:35:45 1875  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 1876  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1877  	   SPROC_NAME, 'No such subscription');
15:35:45 1878  WHEN ACTIVE_LICENSES_FOUND THEN
15:35:45 1879  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 1880  	   SPROC_NAME, 'Active licenses found');
15:35:45 1881  WHEN OTHERS THEN
15:35:45 1882  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1883  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1884  END CLOSE_SUBSCRIPTION;
15:35:45 1885  
15:35:45 1886  /******************************************************************************/
15:35:45 1887  
15:35:45 1888  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
15:35:45 1889  	 in_subscription_id IN NUMBER,
15:35:45 1890  	 out_group_id	    OUT NUMBER
15:35:45 1891  ) AS
15:35:45 1892  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
15:35:45 1893  BEGIN
15:35:45 1894  	 SELECT
15:35:45 1895  	   ACCOUNT.GROUP_ID into out_group_id
15:35:45 1896  	 FROM
15:35:45 1897  	   SUBSCRIPTION
15:35:45 1898  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:35:45 1899  	 WHERE
15:35:45 1900  	   SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1901  EXCEPTION
15:35:45 1902  WHEN NO_DATA_FOUND THEN
15:35:45 1903  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1904  	   SPROC_NAME, 'No such subscription');
15:35:45 1905  WHEN OTHERS THEN
15:35:45 1906  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1907  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1908  END GET_GROUP_ID_BY_SBSCRPTN_ID;
15:35:45 1909  
15:35:45 1910  /******************************************************************************/
15:35:45 1911  
15:35:45 1912  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
15:35:45 1913  /*
15:35:45 1914  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1915  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1916  */
15:35:45 1917  	 in_subscription_id IN NUMBER,
15:35:45 1918  	 out_result_set     OUT SYS_REFCURSOR
15:35:45 1919  ) AS
15:35:45 1920  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
15:35:45 1921  -- VARIABLES
15:35:45 1922  var_offer_chain NUMBER;
15:35:45 1923  -- EXCEPTIONS
15:35:45 1924  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 1925  BEGIN
15:35:45 1926  	 BEGIN
15:35:45 1927  	   SELECT
15:35:45 1928  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
15:35:45 1929  	   FROM
15:35:45 1930  	     SUBSCRIPTION
15:35:45 1931  	   WHERE
15:35:45 1932  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 1933  	   EXCEPTION
15:35:45 1934  	     WHEN NO_DATA_FOUND THEN
15:35:45 1935  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 1936  	 END;
15:35:45 1937  
15:35:45 1938  	 OPEN out_result_set FOR
15:35:45 1939  	 SELECT DISTINCT
15:35:45 1940  	   PRODUCT.ID,
15:35:45 1941  	   PRODUCT.NAME
15:35:45 1942  	 FROM
15:35:45 1943  	   PRODUCT
15:35:45 1944  	 WHERE
15:35:45 1945  	   PRODUCT.ID IN (
15:35:45 1946  	     SELECT DISTINCT
15:35:45 1947  	       PRODUCT_OFFERING.PRODUCT_ID
15:35:45 1948  	     FROM
15:35:45 1949  	       PRODUCT_OFFERING
15:35:45 1950  	     WHERE
15:35:45 1951  	       PRODUCT_OFFERING.ID IN (
15:35:45 1952  		 SELECT DISTINCT
15:35:45 1953  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:35:45 1954  		 FROM
15:35:45 1955  		   OFFER_PRODUCT_OFFERING
15:35:45 1956  		 WHERE
15:35:45 1957  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:35:45 1958  		     SELECT DISTINCT
15:35:45 1959  		       OFFER_OFFER_CHAIN.OFFER_ID
15:35:45 1960  		     FROM
15:35:45 1961  		       OFFER_OFFER_CHAIN
15:35:45 1962  		     WHERE
15:35:45 1963  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
15:35:45 1964  		   )
15:35:45 1965  	       )
15:35:45 1966  	   );
15:35:45 1967  
15:35:45 1968  EXCEPTION
15:35:45 1969  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 1970  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1971  	   SPROC_NAME, 'No such subscription');
15:35:45 1972  WHEN OTHERS THEN
15:35:45 1973  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1974  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1975  END GET_SUBSCRIPTION_PRODUCTS;
15:35:45 1976  
15:35:45 1977  /******************************************************************************/
15:35:45 1978  
15:35:45 1979  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
15:35:45 1980  /*
15:35:45 1981  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 1982  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1983  */
15:35:45 1984  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
15:35:45 1985  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
15:35:45 1986  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
15:35:45 1987  ) AS
15:35:45 1988  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
15:35:45 1989  -- VARIABLES
15:35:45 1990  temp_charge_id CHARGE.ID%TYPE;
15:35:45 1991  -- EXCEPTIONS
15:35:45 1992  BAD_SUBSCRIPTION_ID    EXCEPTION;
15:35:45 1993  BAD_STATUS_ID	      EXCEPTION;
15:35:45 1994  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 1995  BEGIN
15:35:45 1996  
15:35:45 1997  	 IF in_subscription_status_id != GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 1998  	   AND in_subscription_status_id != GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED
15:35:45 1999  	   AND in_subscription_status_id != GLOBAL_STATUSES_V17.SUBSCRIPTION_CANCELED
15:35:45 2000  	   AND in_subscription_status_id != GLOBAL_STATUSES_V17.SUBSCRIPTION_CLOSED THEN
15:35:45 2001  	   RAISE BAD_STATUS_ID;
15:35:45 2002  	 END IF;
15:35:45 2003  
15:35:45 2004  	 PROCS_SUBSCRIPTION_CRU_V17.UPDATE_SUBSCRIPTION(
15:35:45 2005  	   in_subscription_id	     => in_subscription_id,
15:35:45 2006  	   in_subscription_status_id => in_subscription_status_id,
15:35:45 2007  	   in_updated_by	     => in_updated_by
15:35:45 2008  	 );
15:35:45 2009  
15:35:45 2010  	 IF SQL%ROWCOUNT = 0 THEN
15:35:45 2011  	   RAISE BAD_SUBSCRIPTION_ID;
15:35:45 2012  	 END IF;
15:35:45 2013  
15:35:45 2014  EXCEPTION
15:35:45 2015  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2016  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2017  	   SPROC_NAME, 'No such subscription');
15:35:45 2018  WHEN BAD_STATUS_ID THEN
15:35:45 2019  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 2020  	   SPROC_NAME, 'Bad status id');
15:35:45 2021  WHEN OTHERS THEN
15:35:45 2022  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2023  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2024  END UPDATE_SUBSCRIPTION_STATUS;
15:35:45 2025  
15:35:45 2026  /******************************************************************************/
15:35:45 2027  
15:35:45 2028  PROCEDURE GET_ACTIVE_INVOICES_IDS (
15:35:45 2029  /*
15:35:45 2030  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2031  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2032  */
15:35:45 2033  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
15:35:45 2034  	 in_subscription_id IN NUMBER,
15:35:45 2035  	 out_result_set     OUT SYS_REFCURSOR
15:35:45 2036  ) AS
15:35:45 2037  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
15:35:45 2038  -- VARIABLES
15:35:45 2039  temp_subscription_id SUBSCRIPTION.ID%TYPE;
15:35:45 2040  -- EXCEPTIONS
15:35:45 2041  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 2042  BEGIN
15:35:45 2043  
15:35:45 2044  	 BEGIN
15:35:45 2045  	   SELECT
15:35:45 2046  	     SUBSCRIPTION.ID into temp_subscription_id
15:35:45 2047  	   FROM
15:35:45 2048  	     SUBSCRIPTION
15:35:45 2049  	   WHERE
15:35:45 2050  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 2051  	   EXCEPTION
15:35:45 2052  	     WHEN NO_DATA_FOUND THEN
15:35:45 2053  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 2054  	 END;
15:35:45 2055  
15:35:45 2056  	 OPEN out_result_set FOR
15:35:45 2057  	 SELECT DISTINCT
15:35:45 2058  	   LICENSE.INVOICE_ID as "ID"
15:35:45 2059  	 FROM
15:35:45 2060  	   LICENSE
15:35:45 2061  	 WHERE
15:35:45 2062  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 2063  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
15:35:45 2064  
15:35:45 2065  EXCEPTION
15:35:45 2066  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2067  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2068  	   SPROC_NAME, 'No such subscription');
15:35:45 2069  WHEN OTHERS THEN
15:35:45 2070  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2071  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2072  END GET_ACTIVE_INVOICES_IDS;
15:35:45 2073  
15:35:45 2074  /******************************************************************************/
15:35:45 2075  
15:35:45 2076  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
15:35:45 2077  /*
15:35:45 2078  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2079  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2080  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:45 2081  */
15:35:45 2082  	 in_invoice_id	      IN NUMBER,
15:35:45 2083  	 in_updated_by	      IN VARCHAR2,
15:35:45 2084  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:45 2085  ) AS
15:35:45 2086  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
15:35:45 2087  -- VARIABLES
15:35:45 2088  temp_invoice_id	      INVOICE.ID%TYPE;
15:35:45 2089  var_chargeback_amount  NUMBER(10,2);
15:35:45 2090  ver_refund_charge_id   NUMBER;
15:35:45 2091  -- EXCEPTIONS
15:35:45 2092  BAD_INVOICE_ID		    EXCEPTION;
15:35:45 2093  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
15:35:45 2094  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
15:35:45 2095  EXCEPTION_MESSAGE	    VARCHAR2(1024);
15:35:45 2096  -- STUB
15:35:45 2097  var_now DATE;
15:35:45 2098  var_revoke NUMBER;
15:35:45 2099  var_refund NUMBER;
15:35:45 2100  var_billed NUMBER;
15:35:45 2101  BEGIN
15:35:45 2102  
15:35:45 2103  	 var_now := sysdate;
15:35:45 2104  
15:35:45 2105  	 -- Check that invoice exists
15:35:45 2106  	 BEGIN
15:35:45 2107  	   SELECT
15:35:45 2108  	     INVOICE.ID into temp_invoice_id
15:35:45 2109  	   FROM
15:35:45 2110  	     INVOICE
15:35:45 2111  	   WHERE
15:35:45 2112  	     INVOICE.ID = in_invoice_id;
15:35:45 2113  	   EXCEPTION
15:35:45 2114  	     WHEN NO_DATA_FOUND THEN
15:35:45 2115  	       RAISE BAD_INVOICE_ID;
15:35:45 2116  	 END;
15:35:45 2117  
15:35:45 2118  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V17.FALSE, GLOBAL_CONSTANTS_V17.TRUE) into var_revoke
15:35:45 2119  	 from license l, subscription s, offer_chain oc
15:35:45 2120  	 where
15:35:45 2121  	   l.subscription_id = s.id and
15:35:45 2122  	   s.offer_chain_id = oc.id and
15:35:45 2123  	   l.invoice_id = in_invoice_id and
15:35:45 2124  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V17.TRUE and
15:35:45 2125  	   rownum < 2;
15:35:45 2126  
15:35:45 2127  	 var_billed := PROCS_INVOICE_V17.IS_INVOICE_PAYING_STARTED(in_invoice_id);
15:35:45 2128  	 var_refund := GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 2129  
15:35:45 2130  	 -- Check that transaction for given invoice not started
15:35:45 2131  	 -- if refund enabled calculate and apply chargeback
15:35:45 2132  	 IF (
15:35:45 2133  	     var_billed = GLOBAL_CONSTANTS_V17.TRUE
15:35:45 2134  	   )THEN
15:35:45 2135  	   if (in_refundable = GLOBAL_CONSTANTS_V17.TRUE) then
15:35:45 2136  	     -- If started then we need to calculate refund
15:35:45 2137  	     BEGIN
15:35:45 2138  	       PROCS_INVOICE_V17.CALCULATE_INVOICE_CHARGEBACK(
15:35:45 2139  		 in_invoice_id,
15:35:45 2140  		 var_now,
15:35:45 2141  		 var_chargeback_amount
15:35:45 2142  	       );
15:35:45 2143  	       EXCEPTION
15:35:45 2144  		 WHEN OTHERS THEN
15:35:45 2145  		   EXCEPTION_MESSAGE := SQLERRM;
15:35:45 2146  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
15:35:45 2147  	     END;
15:35:45 2148  	     IF var_chargeback_amount > 0 THEN
15:35:45 2149  	       BEGIN
15:35:45 2150  		 PROCS_INVOICE_V17.APPLY_REFUND(
15:35:45 2151  		   in_invoice_id,
15:35:45 2152  		   var_chargeback_amount,
15:35:45 2153  		   in_updated_by,
15:35:45 2154  		   ver_refund_charge_id
15:35:45 2155  		 );
15:35:45 2156  		 EXCEPTION
15:35:45 2157  		   WHEN OTHERS THEN
15:35:45 2158  		     EXCEPTION_MESSAGE := SQLERRM;
15:35:45 2159  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
15:35:45 2160  	       END;
15:35:45 2161  	       var_refund := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 2162  	     END IF;
15:35:45 2163  	   end if;
15:35:45 2164  	 ELSE
15:35:45 2165  
15:35:45 2166  	   FOR f_transaction_to_close IN (
15:35:45 2167  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_OPENED
15:35:45 2168  	   )
15:35:45 2169  	   LOOP
15:35:45 2170  	     PROCS_TRANSACTION_V17.UPDATE_TRANSACTION_STATUS(
15:35:45 2171  	       in_transaction_id	=> f_transaction_to_close.ID,
15:35:45 2172  	       in_updated_by		=> in_updated_by,
15:35:45 2173  	       in_transaction_status_id => GLOBAL_STATUSES_V17.TRANSACTION_CLOSED
15:35:45 2174  	     );
15:35:45 2175  	   END LOOP;
15:35:45 2176  	   -- Needs to close charges. No refund.
15:35:45 2177  	   FOR f_charge_to_close IN (
15:35:45 2178  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_OPENED
15:35:45 2179  	   )
15:35:45 2180  	   LOOP
15:35:45 2181  	     PROCS_CHARGE_V17.UPDATE_CHARGE_STATUS(
15:35:45 2182  	       in_charge_id	   => f_charge_to_close.ID,
15:35:45 2183  	       in_updated_by	   => in_updated_by,
15:35:45 2184  	       in_charge_status_id => GLOBAL_STATUSES_V17.CHARGE_CANCELED
15:35:45 2185  	     );
15:35:45 2186  	   END LOOP;
15:35:45 2187  
15:35:45 2188  	   PROCS_INVOICE_V17.UPDATE_INVOICE_STATUS(
15:35:45 2189  	     in_invoice_id		    => in_invoice_id,
15:35:45 2190  	     in_updated_by		    => in_updated_by,
15:35:45 2191  	     in_invoice_status_id	    => GLOBAL_STATUSES_V17.INVOICE_CLOSED
15:35:45 2192  	   );
15:35:45 2193  
15:35:45 2194  	 END IF;
15:35:45 2195  	 -- update licenses
15:35:45 2196  	 IF(var_revoke = GLOBAL_CONSTANTS_V17.TRUE OR var_chargeback_amount > 0 OR var_billed = GLOBAL_CONSTANTS_V17.FALSE) THEN
15:35:45 2197  	   FOR f_license_to_cancel IN (
15:35:45 2198  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 2199  	   )
15:35:45 2200  	   LOOP
15:35:45 2201  	     PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 2202  	       in_license_id	     => f_license_to_cancel.ID,
15:35:45 2203  	       in_license_status_id  => GLOBAL_STATUSES_V17.LICENSE_CLOSED,
15:35:45 2204  	       in_needs_entitlements => GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 2205  	       in_updated_by	     => in_updated_by,
15:35:45 2206  	       in_entitlement_end_date => var_now
15:35:45 2207  	     );
15:35:45 2208  	   END LOOP;
15:35:45 2209  	 ELSE
15:35:45 2210  	   FOR f_license_to_cancel IN (
15:35:45 2211  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 2212  	   )
15:35:45 2213  	   LOOP
15:35:45 2214  	     PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 2215  	       in_license_id	     => f_license_to_cancel.ID,
15:35:45 2216  	       in_license_status_id  => GLOBAL_STATUSES_V17.LICENSE_CLOSED,
15:35:45 2217  	       in_updated_by	     => in_updated_by
15:35:45 2218  	     );
15:35:45 2219  	   END LOOP;
15:35:45 2220  	 END IF;
15:35:45 2221  
15:35:45 2222  
15:35:45 2223  EXCEPTION
15:35:45 2224  WHEN BAD_INVOICE_ID THEN
15:35:45 2225  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2226  	   SPROC_NAME, 'No such invoice');
15:35:45 2227  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
15:35:45 2228  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 2229  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
15:35:45 2230  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
15:35:45 2231  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 2232  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
15:35:45 2233  WHEN OTHERS THEN
15:35:45 2234  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2235  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2236  END CANCEL_SUBSCRIPTION_INVOICE;
15:35:45 2237  
15:35:45 2238  /******************************************************************************/
15:35:45 2239  
15:35:45 2240  PROCEDURE FINALIZE_CANCELATION (
15:35:45 2241  /*
15:35:45 2242  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2243  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2244  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:45 2245  */
15:35:45 2246  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
15:35:45 2247  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
15:35:45 2248  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
15:35:45 2249  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:35:45 2250  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:35:45 2251  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
15:35:45 2252  	 in_subscription_id    IN NUMBER,
15:35:45 2253  	 in_cancelation_reason IN VARCHAR2,
15:35:45 2254  	 in_cancelation_date   IN DATE,
15:35:45 2255  	 in_note	       IN VARCHAR2,
15:35:45 2256  	 in_agent_id	       IN NUMBER,
15:35:45 2257  	 in_updated_by	       IN VARCHAR2
15:35:45 2258  ) AS
15:35:45 2259  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
15:35:45 2260  -- VARIABLES
15:35:45 2261  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
15:35:45 2262  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
15:35:45 2263  var_active_invoices_count NUMBER;
15:35:45 2264  -- EXCEPTIONS
15:35:45 2265  BAD_SUBSCRIPTION_ID	   EXCEPTION;
15:35:45 2266  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
15:35:45 2267  BAD_CANCELATION_REASON	   EXCEPTION;
15:35:45 2268  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
15:35:45 2269  ACTIVE_INVOICES_FOUND	   EXCEPTION;
15:35:45 2270  CAN_NOT_CREATE_NOTE	   EXCEPTION;
15:35:45 2271  EXCEPTION_MESSAGE	   VARCHAR2(1024);
15:35:45 2272  BEGIN
15:35:45 2273  
15:35:45 2274  	 -- Get current subscription status
15:35:45 2275  	 BEGIN
15:35:45 2276  	   SELECT
15:35:45 2277  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
15:35:45 2278  	   FROM
15:35:45 2279  	     SUBSCRIPTION
15:35:45 2280  	   WHERE
15:35:45 2281  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 2282  	   EXCEPTION
15:35:45 2283  	     WHEN NO_DATA_FOUND THEN
15:35:45 2284  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 2285  	 END;
15:35:45 2286  
15:35:45 2287  	 -- Check that subscription reason is correct
15:35:45 2288  	 BEGIN
15:35:45 2289  	   SELECT
15:35:45 2290  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
15:35:45 2291  	   FROM
15:35:45 2292  	     SUBSCRIPTION_CANCEL_REASON
15:35:45 2293  	   WHERE
15:35:45 2294  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
15:35:45 2295  	     AND ROWNUM <= 1;
15:35:45 2296  	   EXCEPTION
15:35:45 2297  	     WHEN NO_DATA_FOUND THEN
15:35:45 2298  	       RAISE BAD_CANCELATION_REASON;
15:35:45 2299  	 END;
15:35:45 2300  
15:35:45 2301  	 -- Check for invoices with active licenses
15:35:45 2302  	 SELECT
15:35:45 2303  	   COUNT(*) into var_active_invoices_count
15:35:45 2304  	 FROM
15:35:45 2305  	   LICENSE
15:35:45 2306  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:35:45 2307  	 WHERE
15:35:45 2308  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 2309  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
15:35:45 2310  
15:35:45 2311  	 IF var_active_invoices_count > 0 THEN
15:35:45 2312  	   RAISE ACTIVE_INVOICES_FOUND;
15:35:45 2313  	 END IF;
15:35:45 2314  
15:35:45 2315  	 -- Check that subscription is active
15:35:45 2316  	 IF var_current_subscr_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 2317  	    AND var_current_subscr_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED THEN
15:35:45 2318  	   RAISE BAD_SUBSCRIPTION_STATUS;
15:35:45 2319  	 END IF;
15:35:45 2320  
15:35:45 2321  	 -- Update subscription data
15:35:45 2322  	 BEGIN
15:35:45 2323  	   PROCS_SUBSCRIPTION_CRU_V17.UPDATE_SUBSCRIPTION(
15:35:45 2324  	     in_subscription_id        => in_subscription_id,
15:35:45 2325  	     in_subscription_status_id => GLOBAL_STATUSES_V17.SUBSCRIPTION_CANCELED,
15:35:45 2326  	     in_cancelation_date       => in_cancelation_date,
15:35:45 2327  	     in_updated_by	       => in_updated_by,
15:35:45 2328  	     in_sct_id		       => var_sct_id
15:35:45 2329  	   );
15:35:45 2330  	   EXCEPTION
15:35:45 2331  	     WHEN OTHERS THEN
15:35:45 2332  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 2333  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
15:35:45 2334  	 END;
15:35:45 2335  
15:35:45 2336  	 -- Annotate subscription
15:35:45 2337  	 IF in_note IS NOT NULL THEN
15:35:45 2338  	   BEGIN
15:35:45 2339  	     PROCS_SUBSCRIPTION_V17.ANNOTATE_SUBSCRIPTION(
15:35:45 2340  	       in_subscription_id,
15:35:45 2341  	       in_agent_id,
15:35:45 2342  	       in_note,
15:35:45 2343  	       in_updated_by
15:35:45 2344  	     );
15:35:45 2345  	     EXCEPTION
15:35:45 2346  	      WHEN OTHERS THEN
15:35:45 2347  		EXCEPTION_MESSAGE := SQLERRM;
15:35:45 2348  		RAISE CAN_NOT_CREATE_NOTE;
15:35:45 2349  	   END;
15:35:45 2350  	 END IF;
15:35:45 2351  
15:35:45 2352  EXCEPTION
15:35:45 2353  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2354  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2355  	   SPROC_NAME, 'No such subscription');
15:35:45 2356  WHEN BAD_SUBSCRIPTION_STATUS THEN
15:35:45 2357  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 2358  	   SPROC_NAME, 'Bad current subscription status');
15:35:45 2359  WHEN BAD_CANCELATION_REASON THEN
15:35:45 2360  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 2361  	   SPROC_NAME, 'Bad cancellation reason');
15:35:45 2362  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
15:35:45 2363  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 2364  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
15:35:45 2365  WHEN ACTIVE_INVOICES_FOUND THEN
15:35:45 2366  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 2367  	   SPROC_NAME, 'Invoices with active licenses found');
15:35:45 2368  WHEN CAN_NOT_CREATE_NOTE THEN
15:35:45 2369  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 2370  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:35:45 2371  WHEN OTHERS THEN
15:35:45 2372  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2373  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2374  END FINALIZE_CANCELATION;
15:35:45 2375  
15:35:45 2376  /******************************************************************************/
15:35:45 2377  
15:35:45 2378  PROCEDURE FINALIZE_FALSE_START (
15:35:45 2379  /*
15:35:45 2380  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2381  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2382  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:45 2383  */
15:35:45 2384  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
15:35:45 2385  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
15:35:45 2386  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:35:45 2387  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:35:45 2388  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
15:35:45 2389  	 in_subscription_id    IN NUMBER,
15:35:45 2390  	 in_cancelation_date   IN DATE,
15:35:45 2391  	 in_note	       IN VARCHAR2,
15:35:45 2392  	 in_agent_id	       IN NUMBER,
15:35:45 2393  	 in_updated_by	       IN VARCHAR2
15:35:45 2394  ) AS
15:35:45 2395  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
15:35:45 2396  FALSE_START_REASON CONSTANT NUMBER := 41;
15:35:45 2397  -- VARIABLES
15:35:45 2398  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
15:35:45 2399  var_active_invoices_count NUMBER;
15:35:45 2400  -- EXCEPTIONS
15:35:45 2401  BAD_SUBSCRIPTION_ID	   EXCEPTION;
15:35:45 2402  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
15:35:45 2403  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
15:35:45 2404  ACTIVE_INVOICES_FOUND	   EXCEPTION;
15:35:45 2405  CAN_NOT_CREATE_NOTE	   EXCEPTION;
15:35:45 2406  EXCEPTION_MESSAGE	   VARCHAR2(1024);
15:35:45 2407  BEGIN
15:35:45 2408  
15:35:45 2409  	 -- Get current subscription status
15:35:45 2410  	 BEGIN
15:35:45 2411  	   SELECT
15:35:45 2412  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
15:35:45 2413  	   FROM
15:35:45 2414  	     SUBSCRIPTION
15:35:45 2415  	   WHERE
15:35:45 2416  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 2417  	   EXCEPTION
15:35:45 2418  	     WHEN NO_DATA_FOUND THEN
15:35:45 2419  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 2420  	 END;
15:35:45 2421  
15:35:45 2422  	 -- Check for invoices with active licenses
15:35:45 2423  	 SELECT
15:35:45 2424  	   COUNT(*) into var_active_invoices_count
15:35:45 2425  	 FROM
15:35:45 2426  	   LICENSE
15:35:45 2427  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:35:45 2428  	 WHERE
15:35:45 2429  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 2430  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
15:35:45 2431  
15:35:45 2432  	 IF var_active_invoices_count > 0 THEN
15:35:45 2433  	   RAISE ACTIVE_INVOICES_FOUND;
15:35:45 2434  	 END IF;
15:35:45 2435  
15:35:45 2436  	 -- Check that subscription is active
15:35:45 2437  	 IF var_current_subscr_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 2438  	    AND var_current_subscr_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED THEN
15:35:45 2439  	   RAISE BAD_SUBSCRIPTION_STATUS;
15:35:45 2440  	 END IF;
15:35:45 2441  
15:35:45 2442  	 -- Update subscription data
15:35:45 2443  	 BEGIN
15:35:45 2444  	   PROCS_SUBSCRIPTION_CRU_V17.UPDATE_SUBSCRIPTION(
15:35:45 2445  	     in_subscription_id        => in_subscription_id,
15:35:45 2446  	     in_subscription_status_id => GLOBAL_STATUSES_V17.SUBSCRIPTION_FALSE_START,
15:35:45 2447  	     in_cancelation_date       => in_cancelation_date,
15:35:45 2448  	     in_updated_by	       => in_updated_by,
15:35:45 2449  	     in_sct_id		       => FALSE_START_REASON
15:35:45 2450  	   );
15:35:45 2451  	   EXCEPTION
15:35:45 2452  	     WHEN OTHERS THEN
15:35:45 2453  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 2454  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
15:35:45 2455  	 END;
15:35:45 2456  
15:35:45 2457  	 -- Annotate subscription
15:35:45 2458  	 IF in_note IS NOT NULL THEN
15:35:45 2459  	   BEGIN
15:35:45 2460  	     PROCS_SUBSCRIPTION_V17.ANNOTATE_SUBSCRIPTION(
15:35:45 2461  	       in_subscription_id,
15:35:45 2462  	       in_agent_id,
15:35:45 2463  	       in_note,
15:35:45 2464  	       in_updated_by
15:35:45 2465  	     );
15:35:45 2466  	     EXCEPTION
15:35:45 2467  	      WHEN OTHERS THEN
15:35:45 2468  		EXCEPTION_MESSAGE := SQLERRM;
15:35:45 2469  		RAISE CAN_NOT_CREATE_NOTE;
15:35:45 2470  	   END;
15:35:45 2471  	 END IF;
15:35:45 2472  
15:35:45 2473  EXCEPTION
15:35:45 2474  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2475  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2476  	   SPROC_NAME, 'No such subscription');
15:35:45 2477  WHEN BAD_SUBSCRIPTION_STATUS THEN
15:35:45 2478  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 2479  	   SPROC_NAME, 'Bad current subscription status');
15:35:45 2480  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
15:35:45 2481  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 2482  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
15:35:45 2483  WHEN ACTIVE_INVOICES_FOUND THEN
15:35:45 2484  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 2485  	   SPROC_NAME, 'Invoices with active licenses found');
15:35:45 2486  WHEN CAN_NOT_CREATE_NOTE THEN
15:35:45 2487  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 2488  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:35:45 2489  WHEN OTHERS THEN
15:35:45 2490  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2491  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2492  END FINALIZE_FALSE_START;
15:35:45 2493  
15:35:45 2494  /******************************************************************************/
15:35:45 2495  
15:35:45 2496  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
15:35:45 2497  	 in_subscription_id IN NUMBER
15:35:45 2498  ) RETURN NUMBER AS
15:35:45 2499  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
15:35:45 2500  -- VARIABLES
15:35:45 2501  var_is_offer_chain_cancelable NUMBER;
15:35:45 2502  --64603
15:35:45 2503  var_end_date date;
15:35:45 2504  today_date date := current_date;
15:35:45 2505  offer_id number;
15:35:45 2506  -- EXCEPTIONS
15:35:45 2507  COULD_NOT_CHECK	   EXCEPTION;
15:35:45 2508  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 2509  EXCEPTION_MESSAGE   VARCHAR2(1024);
15:35:45 2510  BEGIN
15:35:45 2511  
15:35:45 2512  	 BEGIN
15:35:45 2513  	   -- find offer_chain_id for given in_subscription_id
15:35:45 2514  	   SELECT OFFER_CHAIN_ID into offer_id
15:35:45 2515  	   FROM SUBSCRIPTION
15:35:45 2516  	   WHERE ID = in_subscription_id;
15:35:45 2517  	   EXCEPTION
15:35:45 2518  	     WHEN NO_DATA_FOUND THEN
15:35:45 2519  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 2520  	     WHEN OTHERS THEN
15:35:45 2521  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 2522  	       RAISE COULD_NOT_CHECK;
15:35:45 2523  	 END;
15:35:45 2524  
15:35:45 2525  	 -- find if it was redeemed from a gift certificate
15:35:45 2526  	 BEGIN
15:35:45 2527  	   SELECT l.end_date INTO var_end_date
15:35:45 2528  	   FROM LICENSE l, GIFT_CERTIFICATE g
15:35:45 2529  	   WHERE l.invoice_id = g.finalized_invoice_id
15:35:45 2530  	   AND l.subscription_id = in_subscription_id;
15:35:45 2531  
15:35:45 2532  	   -- if the license end_date is bigger than today, we are in the
15:35:45 2533  	   -- first period, so we cannot cancel; otherwise can cancel
15:35:45 2534  	   IF var_end_date > today_date THEN
15:35:45 2535  	       RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 2536  	   ELSE
15:35:45 2537  	       RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 2538  	   END IF;
15:35:45 2539  
15:35:45 2540  	   EXCEPTION
15:35:45 2541  	       -- not coming from a gift certificate,
15:35:45 2542  	       -- use old logic
15:35:45 2543  	       WHEN NO_DATA_FOUND THEN
15:35:45 2544  		   SELECT
15:35:45 2545  		       PROCS_OFFER_CHAIN_V17.IS_OFFER_CHAIN_CANCELABLE(offer_id)
15:35:45 2546  		       INTO var_is_offer_chain_cancelable
15:35:45 2547  		   FROM DUAL;
15:35:45 2548  		   RETURN var_is_offer_chain_cancelable;
15:35:45 2549  	 END;
15:35:45 2550  
15:35:45 2551  EXCEPTION
15:35:45 2552  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2553  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2554  	   SPROC_NAME, 'No such subscription');
15:35:45 2555  WHEN COULD_NOT_CHECK THEN
15:35:45 2556  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 2557  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
15:35:45 2558  WHEN OTHERS THEN
15:35:45 2559  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2560  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2561  
15:35:45 2562  END IS_SUBSCRIPTION_CANCELABLE;
15:35:45 2563  /******************************************************************************/
15:35:45 2564  
15:35:45 2565  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
15:35:45 2566  /*
15:35:45 2567  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2568  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2569  */
15:35:45 2570  	 in_subscription_id IN NUMBER,
15:35:45 2571  	 out_result_set     OUT SYS_REFCURSOR
15:35:45 2572  ) AS
15:35:45 2573  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
15:35:45 2574  -- VARIABLES
15:35:45 2575  var_offer NUMBER;
15:35:45 2576  -- EXCEPTIONS
15:35:45 2577  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 2578  BEGIN
15:35:45 2579  
15:35:45 2580  	 OPEN out_result_set FOR
15:35:45 2581  	 SELECT DISTINCT
15:35:45 2582  	   PRODUCT_OFFERING.ID,
15:35:45 2583  	   PRODUCT_OFFERING.PRODUCT_ID,
15:35:45 2584  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
15:35:45 2585  	   PRODUCT_OFFERING.UNIT_PRICE,
15:35:45 2586  	   PRODUCT_OFFERING.QUANTITY,
15:35:45 2587  	   PRODUCT_OFFERING.CREATE_DATE,
15:35:45 2588  	   PRODUCT_OFFERING.CREATED_BY,
15:35:45 2589  	   CAPABILITY.ID CAP_ID,
15:35:45 2590  	   CAPABILITY.CODE CAP_CODE,
15:35:45 2591  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
15:35:45 2592  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
15:35:45 2593  	 FROM
15:35:45 2594  	   OFFER_PRODUCT_OFFERING
15:35:45 2595  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:35:45 2596  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
15:35:45 2597  	 WHERE
15:35:45 2598  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:35:45 2599  	     SELECT
15:35:45 2600  	       LICENSE.OFFER_ID
15:35:45 2601  	     FROM
15:35:45 2602  	       SUBSCRIPTION
15:35:45 2603  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V17.TRUE
15:35:45 2604  	     WHERE
15:35:45 2605  	       SUBSCRIPTION.ID = in_subscription_id
15:35:45 2606  	   );
15:35:45 2607  
15:35:45 2608  EXCEPTION
15:35:45 2609  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2610  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2611  	   SPROC_NAME, 'No such subscription');
15:35:45 2612  WHEN OTHERS THEN
15:35:45 2613  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2614  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2615  END GET_SUBSCR_PROD_OFFERRINGS;
15:35:45 2616  
15:35:45 2617  
15:35:45 2618  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
15:35:45 2619  /*
15:35:45 2620  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2621  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2622  */
15:35:45 2623  	 in_subscription_id IN NUMBER,
15:35:45 2624  	 out_result_set     OUT SYS_REFCURSOR
15:35:45 2625  ) AS
15:35:45 2626  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
15:35:45 2627  -- VARIABLES
15:35:45 2628  var_offer NUMBER;
15:35:45 2629  -- EXCEPTIONS
15:35:45 2630  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 2631  BEGIN
15:35:45 2632  
15:35:45 2633  	 OPEN out_result_set FOR
15:35:45 2634  	 SELECT DISTINCT
15:35:45 2635  	   PRODUCT_OFFERING.ID,
15:35:45 2636  	   PRODUCT_OFFERING.PRODUCT_ID,
15:35:45 2637  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
15:35:45 2638  	   PRODUCT_OFFERING.UNIT_PRICE,
15:35:45 2639  	   PRODUCT_OFFERING.QUANTITY,
15:35:45 2640  	   PRODUCT_OFFERING.CREATE_DATE,
15:35:45 2641  	   PRODUCT_OFFERING.CREATED_BY,
15:35:45 2642  	   CAPABILITY.ID CAP_ID,
15:35:45 2643  	   CAPABILITY.CODE CAP_CODE,
15:35:45 2644  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
15:35:45 2645  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
15:35:45 2646  	 FROM
15:35:45 2647  	   OFFER_PRODUCT_OFFERING
15:35:45 2648  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:35:45 2649  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
15:35:45 2650  	 WHERE
15:35:45 2651  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:35:45 2652  	     SELECT
15:35:45 2653  	       LICENSE.OFFER_ID
15:35:45 2654  	     FROM
15:35:45 2655  	       SUBSCRIPTION
15:35:45 2656  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 2657  	     WHERE
15:35:45 2658  	       SUBSCRIPTION.ID = in_subscription_id
15:35:45 2659  	   );
15:35:45 2660  
15:35:45 2661  EXCEPTION
15:35:45 2662  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2663  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2664  	   SPROC_NAME, 'No such subscription');
15:35:45 2665  WHEN OTHERS THEN
15:35:45 2666  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2667  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2668  END RETRIEVE_SUB_PROD_OFFER;
15:35:45 2669  /******************************************************************************/
15:35:45 2670  
15:35:45 2671  
15:35:45 2672  
15:35:45 2673  
15:35:45 2674  PROCEDURE GET_SUBSCR_LIC_OFFER(
15:35:45 2675  /*
15:35:45 2676  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2677  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2678  */
15:35:45 2679  	 in_subscription_id IN NUMBER,
15:35:45 2680  	 out_result_set     OUT SYS_REFCURSOR
15:35:45 2681  ) AS
15:35:45 2682  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
15:35:45 2683  -- VARIABLES
15:35:45 2684  var_offer_chain NUMBER;
15:35:45 2685  -- EXCEPTIONS
15:35:45 2686  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 2687  BEGIN
15:35:45 2688  	 BEGIN
15:35:45 2689  	   SELECT
15:35:45 2690  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
15:35:45 2691  	   FROM
15:35:45 2692  	     SUBSCRIPTION
15:35:45 2693  	   WHERE
15:35:45 2694  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 2695  	   EXCEPTION
15:35:45 2696  	     WHEN NO_DATA_FOUND THEN
15:35:45 2697  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 2698  	 END;
15:35:45 2699  
15:35:45 2700  	 OPEN out_result_set FOR
15:35:45 2701  	 SELECT DISTINCT
15:35:45 2702  	   po.ID po_id,
15:35:45 2703  	   po.PRODUCT_ID po_product_id,
15:35:45 2704  	   po.TAX_CATEGORY_ID po_tax_category_id,
15:35:45 2705  	   po.UNIT_PRICE po_unit_price,
15:35:45 2706  	   po.QUANTITY po_quantity,
15:35:45 2707  	   po.CREATE_DATE po_create_date,
15:35:45 2708  	   po.CREATED_BY po_created_by,
15:35:45 2709  	   l.ID l_id,
15:35:45 2710  	   l.license_status_id l_license_status_id,
15:35:45 2711  	   l.start_date l_start_date,
15:35:45 2712  	   l.offer_id l_offer_id,
15:35:45 2713  	   l.subscription_id l_subscription_id,
15:35:45 2714  	   l.invoice_id l_invoice_id,
15:35:45 2715  	   l.end_date l_end_date,
15:35:45 2716  	   l.entitlement_end_date l_entitlement_end_date,
15:35:45 2717  	   l.create_date l_create_date,
15:35:45 2718  	   l.created_by l_created_by,
15:35:45 2719  	   l.is_extension l_is_extension,
15:35:45 2720  	   l.current_offer_index l_current_offer_index,
15:35:45 2721  	   l.current_offer_recurr_num l_current_offer_recurr_num,
15:35:45 2722  	   l.needs_entitlements l_needs_entitlements
15:35:45 2723  	 FROM
15:35:45 2724  	   OFFER_PRODUCT_OFFERING opo,
15:35:45 2725  	   PRODUCT_OFFERING po,
15:35:45 2726  	   SUBSCRIPTION s,
15:35:45 2727  	   LICENSE l
15:35:45 2728  	 WHERE
15:35:45 2729  	   opo.product_offering_id = po.id
15:35:45 2730  	   and po.id = l.offer_id
15:35:45 2731  	   and l.subscription_id = s.id
15:35:45 2732  	   and l.license_status_id = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 2733  	   and s.id = in_subscription_id
15:35:45 2734  	 ;
15:35:45 2735  EXCEPTION
15:35:45 2736  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2737  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2738  	   SPROC_NAME, 'No such subscription');
15:35:45 2739  WHEN OTHERS THEN
15:35:45 2740  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2741  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2742  END GET_SUBSCR_LIC_OFFER;
15:35:45 2743  
15:35:45 2744  /******************************************************************************/
15:35:45 2745  
15:35:45 2746  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
15:35:45 2747  /*
15:35:45 2748  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2749  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2750  */
15:35:45 2751  	 in_subscription_id IN NUMBER,
15:35:45 2752  	 out_result	    OUT NUMBER
15:35:45 2753  ) AS
15:35:45 2754  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
15:35:45 2755  -- VARIABLES
15:35:45 2756  temp_subscription_id NUMBER;
15:35:45 2757  var_local_result     NUMBER;
15:35:45 2758  -- EXCEPTIONS
15:35:45 2759  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:45 2760  BEGIN
15:35:45 2761  
15:35:45 2762  	 -- Check that subscription exists
15:35:45 2763  	 BEGIN
15:35:45 2764  	   SELECT
15:35:45 2765  	     SUBSCRIPTION.ID into temp_subscription_id
15:35:45 2766  	   FROM
15:35:45 2767  	     SUBSCRIPTION
15:35:45 2768  	   WHERE
15:35:45 2769  	     SUBSCRIPTION.ID = in_subscription_id;
15:35:45 2770  	   EXCEPTION
15:35:45 2771  	     WHEN NO_DATA_FOUND THEN
15:35:45 2772  	       RAISE BAD_SUBSCRIPTION_ID;
15:35:45 2773  	 END;
15:35:45 2774  
15:35:45 2775  	 var_local_result := NULL;
15:35:45 2776  
15:35:45 2777  	 -- Check charges for each invoice associated with gived subscription
15:35:45 2778  	 FOR f_invoice IN (
15:35:45 2779  	   SELECT DISTINCT
15:35:45 2780  	     LICENSE.INVOICE_ID as "ID"
15:35:45 2781  	   FROM
15:35:45 2782  	     LICENSE
15:35:45 2783  	   WHERE
15:35:45 2784  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:35:45 2785  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V17.LICENSE_ACTIVE FROM DUAL )
15:35:45 2786  	 )
15:35:45 2787  	 LOOP
15:35:45 2788  
15:35:45 2789  	   -- Check each charge in invoice
15:35:45 2790  	   FOR f_charge IN (
15:35:45 2791  	     SELECT
15:35:45 2792  	       CHARGE.ID,
15:35:45 2793  	       CHARGE.CHARGE_STATUS_ID,
15:35:45 2794  	       CHARGE.CHARGE_AMOUNT
15:35:45 2795  	     FROM
15:35:45 2796  	       CHARGE
15:35:45 2797  	     WHERE
15:35:45 2798  	       CHARGE.INVOICE_ID = f_invoice.ID
15:35:45 2799  	   )
15:35:45 2800  	   LOOP
15:35:45 2801  
15:35:45 2802  	     -- Charge amount < 0     => it is a refund
15:35:45 2803  	     -- Charge status is OPEN => means that it is not processed yet
15:35:45 2804  	     IF f_charge.CHARGE_AMOUNT < 0
15:35:45 2805  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_OPENED THEN
15:35:45 2806  	       var_local_result := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 2807  	     END IF;
15:35:45 2808  
15:35:45 2809  	   END LOOP;
15:35:45 2810  
15:35:45 2811  	 END LOOP;
15:35:45 2812  
15:35:45 2813  	 IF var_local_result IS NULL THEN
15:35:45 2814  	   out_result := GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 2815  	 ELSE
15:35:45 2816  	   out_result := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 2817  	 END IF;
15:35:45 2818  
15:35:45 2819  EXCEPTION
15:35:45 2820  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:45 2821  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2822  	   SPROC_NAME, 'No such transaction id');
15:35:45 2823  WHEN OTHERS THEN
15:35:45 2824  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2825  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2826  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
15:35:45 2827  
15:35:45 2828  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
15:35:45 2829  /*
15:35:45 2830  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2831  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2832  */
15:35:45 2833  	 in_group_id	    IN NUMBER,
15:35:45 2834  	 in_offer_chain_id  IN NUMBER,
15:35:45 2835  	 out_result	    OUT NUMBER
15:35:45 2836  ) AS
15:35:45 2837  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
15:35:45 2838  -- VARIABLES
15:35:45 2839  temp_acct_id	    NUMBER;
15:35:45 2840  temp_oc_id	    NUMBER;
15:35:45 2841  -- EXCEPTIONS
15:35:45 2842  BAD_GROUP_ID EXCEPTION;
15:35:45 2843  BAD_OFFER_CHAIN_ID EXCEPTION;
15:35:45 2844  BEGIN
15:35:45 2845  	 -- Check that group id exists
15:35:45 2846  	 BEGIN
15:35:45 2847  	   SELECT
15:35:45 2848  	     ACCOUNT.ID into temp_acct_id
15:35:45 2849  	   FROM
15:35:45 2850  	     ACCOUNT
15:35:45 2851  	   WHERE
15:35:45 2852  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:45 2853  	   EXCEPTION
15:35:45 2854  	     WHEN NO_DATA_FOUND THEN
15:35:45 2855  	       RAISE BAD_GROUP_ID;
15:35:45 2856  	 END;
15:35:45 2857  	 -- Check that offer chain id exists
15:35:45 2858  	 BEGIN
15:35:45 2859  	   SELECT
15:35:45 2860  	     OFFER_CHAIN.ID into temp_oc_id
15:35:45 2861  	   FROM
15:35:45 2862  	     OFFER_CHAIN
15:35:45 2863  	   WHERE
15:35:45 2864  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:35:45 2865  	   EXCEPTION
15:35:45 2866  	     WHEN NO_DATA_FOUND THEN
15:35:45 2867  	       RAISE BAD_OFFER_CHAIN_ID;
15:35:45 2868  	 END;
15:35:45 2869  	 SELECT
15:35:45 2870  	   COUNT(*) into out_result
15:35:45 2871  	 FROM
15:35:45 2872  	   SUBSCRIPTION
15:35:45 2873  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:35:45 2874  	 WHERE
15:35:45 2875  	   ACCOUNT.GROUP_ID = in_group_id
15:35:45 2876  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
15:35:45 2877  	   AND (
15:35:45 2878  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 2879  	   );
15:35:45 2880  
15:35:45 2881  EXCEPTION
15:35:45 2882  WHEN BAD_GROUP_ID THEN
15:35:45 2883  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2884  	   SPROC_NAME, 'No such transaction id');
15:35:45 2885  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:45 2886  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2887  	   SPROC_NAME, 'No such offer chain id');
15:35:45 2888  WHEN OTHERS THEN
15:35:45 2889  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2890  	   sproc_name, 'Unknown error', sqlerrm);
15:35:45 2891  END GET_EXISTING_SUBSCR_NUMBER;
15:35:45 2892  
15:35:45 2893  PROCEDURE GET_EXISTING_SUBSCR_IDS (
15:35:45 2894  /*
15:35:45 2895  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2896  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2897  */
15:35:45 2898  	 in_group_id	    IN NUMBER,
15:35:45 2899  	 in_offer_chain_id  IN NUMBER,
15:35:45 2900  	 out_result_set     OUT SYS_REFCURSOR
15:35:45 2901  ) AS
15:35:45 2902  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
15:35:45 2903  -- VARIABLES
15:35:45 2904  temp_acct_id	    NUMBER;
15:35:45 2905  temp_oc_id	    NUMBER;
15:35:45 2906  -- EXCEPTIONS
15:35:45 2907  BAD_GROUP_ID EXCEPTION;
15:35:45 2908  BAD_OFFER_CHAIN_ID EXCEPTION;
15:35:45 2909  BEGIN
15:35:45 2910  
15:35:45 2911  	 -- Check that group id exists
15:35:45 2912  	 BEGIN
15:35:45 2913  	   SELECT
15:35:45 2914  	     ACCOUNT.ID into temp_acct_id
15:35:45 2915  	   FROM
15:35:45 2916  	     ACCOUNT
15:35:45 2917  	   WHERE
15:35:45 2918  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:45 2919  	   EXCEPTION
15:35:45 2920  	     WHEN NO_DATA_FOUND THEN
15:35:45 2921  	       RAISE BAD_GROUP_ID;
15:35:45 2922  	 END;
15:35:45 2923  	 -- Check that offer chain id exists
15:35:45 2924  	 BEGIN
15:35:45 2925  	   SELECT
15:35:45 2926  	     OFFER_CHAIN.ID into temp_oc_id
15:35:45 2927  	   FROM
15:35:45 2928  	     OFFER_CHAIN
15:35:45 2929  	   WHERE
15:35:45 2930  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:35:45 2931  	   EXCEPTION
15:35:45 2932  	     WHEN NO_DATA_FOUND THEN
15:35:45 2933  	       RAISE BAD_OFFER_CHAIN_ID;
15:35:45 2934  	 END;
15:35:45 2935  
15:35:45 2936  	 OPEN out_result_set FOR
15:35:45 2937  	 SELECT
15:35:45 2938  	   SUBSCRIPTION.ID
15:35:45 2939  	 FROM
15:35:45 2940  	   SUBSCRIPTION
15:35:45 2941  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:35:45 2942  	 WHERE
15:35:45 2943  	   ACCOUNT.GROUP_ID = in_group_id
15:35:45 2944  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
15:35:45 2945  	   AND (
15:35:45 2946  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:45 2947  	   );
15:35:45 2948  
15:35:45 2949  EXCEPTION
15:35:45 2950  WHEN BAD_GROUP_ID THEN
15:35:45 2951  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2952  	   SPROC_NAME, 'No such transaction id');
15:35:45 2953  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:45 2954  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2955  	   SPROC_NAME, 'No such offer chain id');
15:35:45 2956  WHEN OTHERS THEN
15:35:45 2957  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2958  	   sproc_name, 'Unknown error', sqlerrm);
15:35:45 2959  END GET_EXISTING_SUBSCR_IDS;
15:35:45 2960  
15:35:45 2961  PROCEDURE ADD_META_DATA (
15:35:45 2962  /*
15:35:45 2963  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 2964  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 2965  */
15:35:45 2966  	 in_subscription_id IN NUMBER,
15:35:45 2967  	 in_name	    IN VARCHAR2,
15:35:45 2968  	 in_value	    IN VARCHAR2,
15:35:45 2969  	 in_created_by	    IN VARCHAR2
15:35:45 2970  ) AS
15:35:45 2971  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
15:35:45 2972  BEGIN
15:35:45 2973  
15:35:45 2974  	 INSERT INTO SUBSCRIPTION_META_DATA (
15:35:45 2975  	   ID,
15:35:45 2976  	   SUBSCRIPTION_ID,
15:35:45 2977  	   NAME,
15:35:45 2978  	   VALUE,
15:35:45 2979  	   CREATE_DATE,
15:35:45 2980  	   CREATED_BY
15:35:45 2981  	 ) VALUES (
15:35:45 2982  	   SUBMD_ID_SEQ.nextVal,
15:35:45 2983  	   in_subscription_id,
15:35:45 2984  	   in_name,
15:35:45 2985  	   in_value,
15:35:45 2986  	   sysdate,
15:35:45 2987  	   in_created_by
15:35:45 2988  	 );
15:35:45 2989  
15:35:45 2990  EXCEPTION
15:35:45 2991  WHEN OTHERS THEN
15:35:45 2992  	 IF SQLCODE = -2291 THEN
15:35:45 2993  	   PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2994  	     SPROC_NAME, 'No such subscription');
15:35:45 2995  	 ELSE
15:35:45 2996  	   PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2997  	     SPROC_NAME, 'Unknown error', sqlerrm);
15:35:45 2998  	 END IF;
15:35:45 2999  END ADD_META_DATA;
15:35:45 3000  
15:35:45 3001  /******************************************************************************/
15:35:45 3002  
15:35:45 3003  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
15:35:45 3004  /*
15:35:45 3005  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:45 3006  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 3007  */
15:35:45 3008  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
15:35:45 3009  	 out_result_set       OUT SYS_REFCURSOR
15:35:45 3010  ) AS
15:35:45 3011  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
15:35:45 3012  -- Exceptions
15:35:45 3013  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
15:35:45 3014  BEGIN
15:35:45 3015  
15:35:45 3016  	 IF in_subscriptions_ids IS NULL THEN
15:35:45 3017  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
15:35:45 3018  	 END IF;
15:35:45 3019  
15:35:45 3020  	 OPEN out_result_set FOR
15:35:45 3021  	 SELECT
15:35:45 3022  	   SMD.SUBSCRIPTION_ID,
15:35:45 3023  	   SMD.NAME,
15:35:45 3024  	   SMD.VALUE
15:35:45 3025  	 FROM
15:35:45 3026  	   SUBSCRIPTION_META_DATA SMD
15:35:45 3027  	 WHERE
15:35:45 3028  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
15:35:45 3029  
15:35:45 3030  EXCEPTION
15:35:45 3031  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
15:35:45 3032  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 3033  	   SPROC_NAME, 'Bad subscription ids parameter');
15:35:45 3034  WHEN OTHERS THEN
15:35:45 3035  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 3036  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 3037  END GET_SUBSCRIPTIONS_META_DATA;
15:35:45 3038  
15:35:45 3039  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
15:35:45 3040  /*
15:35:45 3041  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 3042  */
15:35:45 3043  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
15:35:45 3044  	 out_result_set     OUT SYS_REFCURSOR
15:35:45 3045  ) AS
15:35:45 3046  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
15:35:45 3047  BEGIN
15:35:45 3048  	 OPEN out_result_set FOR
15:35:45 3049  	 SELECT subscription.id FROM
15:35:45 3050  	   subscription
15:35:45 3051  	 INNER JOIN license ON license.subscription_id = subscription.id
15:35:45 3052  	 INNER JOIN invoice ON invoice.id = license.invoice_id
15:35:45 3053  	 INNER JOIN charge ON invoice.id = charge.invoice_id
15:35:45 3054  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
15:35:45 3055  	 WHERE transaction.order_id = in_order_id;
15:35:45 3056  EXCEPTION
15:35:45 3057  WHEN OTHERS THEN
15:35:45 3058  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 3059  	   SPROC_NAME, 'Unknown error', sqlerrm);
15:35:45 3060  END GET_SUBS_BY_TRNS_ORDER_ID;
15:35:45 3061  
15:35:45 3062  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
15:35:45 3063  	(
15:35:45 3064  /*
15:35:45 3065  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 3066  */
15:35:45 3067  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:35:45 3068  	 out_result_set      OUT SYS_REFCURSOR
15:35:45 3069  )
15:35:45 3070  AS
15:35:45 3071  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
15:35:45 3072  BEGIN
15:35:45 3073  	 OPEN out_result_set FOR
15:35:45 3074  	 SELECT
15:35:45 3075  	   c.ID,
15:35:45 3076  	   c.TRANSACTION_ID,
15:35:45 3077  	   c.INSTRUMENT_ID,
15:35:45 3078  	   c.INSTRUMENT_TYPE_ID,
15:35:45 3079  	   c.CHARGE_AMOUNT,
15:35:45 3080  	   c.CREATE_DATE,
15:35:45 3081  	   c.CREATED_BY,
15:35:45 3082  	   c.INVOICE_ID
15:35:45 3083  	  FROM
15:35:45 3084  	   subscription s,
15:35:45 3085  	   license l,
15:35:45 3086  	   charge c
15:35:45 3087  	 WHERE
15:35:45 3088  	   s.id = l.subscription_id and
15:35:45 3089  	   l.invoice_id = c.invoice_id and
15:35:45 3090  	   c.charge_status_id = GLOBAL_STATUSES_V17.CHARGE_OPENED and
15:35:45 3091  	   exists (
15:35:45 3092  	     select null
15:35:45 3093  	     from transaction t
15:35:45 3094  	     where
15:35:45 3095  	       t.id = c.transaction_id
15:35:45 3096  	   ) and
15:35:45 3097  	   s.id = in_subscription_id;
15:35:45 3098  EXCEPTION
15:35:45 3099  WHEN OTHERS THEN
15:35:45 3100  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 3101  	   SPROC_NAME, 'Unknown error', sqlerrm);
15:35:45 3102  END GET_OPEN_CHARGES_BY_SUBID;
15:35:45 3103  
15:35:45 3104  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
15:35:45 3105  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
15:35:45 3106  ) RETURN NUMBER
15:35:45 3107  AS
15:35:45 3108  var_gift_certificate_id NUMBER;
15:35:45 3109  BEGIN
15:35:45 3110  	     SELECT id INTO var_gift_certificate_id
15:35:45 3111  	     FROM
15:35:45 3112  	       gift_certificate gc
15:35:45 3113  	     WHERE
15:35:45 3114  	       gc.finalized_invoice_id in (
15:35:45 3115  		 SELECT invoice_id
15:35:45 3116  		 FROM (
15:35:45 3117  		   SELECT l.invoice_id
15:35:45 3118  		   FROM
15:35:45 3119  		     license l
15:35:45 3120  		   WHERE
15:35:45 3121  		     l.subscription_id = in_subscription_id
15:35:45 3122  		   ORDER BY l.create_date asc
15:35:45 3123  		 )
15:35:45 3124  	       )
15:35:45 3125  	       and rownum <= 1;
15:35:45 3126  	     return var_gift_certificate_id;
15:35:45 3127  END GET_GIFT_CERT_ID_BY_SUB_ID;
15:35:45 3128  
15:35:45 3129  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
15:35:45 3130  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
15:35:45 3131  ) RETURN VARCHAR2
15:35:45 3132  AS
15:35:45 3133  var_gift_certificate_code VARCHAR2(255 BYTE);
15:35:45 3134  BEGIN
15:35:45 3135  	     SELECT code INTO var_gift_certificate_code
15:35:45 3136  	     FROM
15:35:45 3137  	       gift_certificate gc
15:35:45 3138  	     WHERE
15:35:45 3139  	       gc.finalized_invoice_id in (
15:35:45 3140  		 SELECT invoice_id
15:35:45 3141  		 FROM (
15:35:45 3142  		   SELECT l.invoice_id
15:35:45 3143  		   FROM
15:35:45 3144  		     license l
15:35:45 3145  		   WHERE
15:35:45 3146  		     l.subscription_id = in_subscription_id
15:35:45 3147  		 )
15:35:45 3148  	       )
15:35:45 3149  	       and rownum <= 1;
15:35:45 3150  	     return var_gift_certificate_code;
15:35:45 3151  END GET_GIFT_CERT_CODE_BY_SUB_ID;
15:35:45 3152  
15:35:45 3153  
15:35:45 3154  
15:35:45 3155  PROCEDURE GET_ACTIVE_MEU_SUBS (
15:35:45 3156  	 out_result_set      OUT SYS_REFCURSOR
15:35:45 3157  )
15:35:45 3158  AS
15:35:45 3159  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
15:35:45 3160  BEGIN
15:35:45 3161  	 OPEN out_result_set FOR
15:35:45 3162  	       SELECT
15:35:45 3163  		   s.id,
15:35:45 3164  		   s.instrument_type_id,
15:35:45 3165  		   s.instrument_id,
15:35:45 3166  		   a.group_id,
15:35:45 3167  		   s.offer_chain_id
15:35:45 3168  	       FROM
15:35:45 3169  		   core_owner.subscription s,
15:35:45 3170  		   core_owner.account a
15:35:45 3171  	       WHERE
15:35:45 3172  		   a.id = s.account_id AND(
15:35:45 3173  		       s.offer_chain_id = 1745992781 OR
15:35:45 3174  		       s.offer_chain_id = 3902149773 OR
15:35:45 3175  		       s.offer_chain_id = 2240201337) AND
15:35:45 3176  		   NOT EXISTS
15:35:45 3177  		   (
15:35:45 3178  		       SELECT
15:35:45 3179  			   1
15:35:45 3180  		       FROM
15:35:45 3181  			   core_owner.subscription ss
15:35:45 3182  		       WHERE
15:35:45 3183  			   ss.account_id = a.id AND(
15:35:45 3184  			       ss.offer_chain_id = 2794122734 OR
15:35:45 3185  			       ss.offer_chain_id = 3564368005 OR
15:35:45 3186  			       ss.offer_chain_id = 757934392)) AND
15:35:45 3187  		   rownum < 5000;
15:35:45 3188  END GET_ACTIVE_MEU_SUBS;
15:35:45 3189  
15:35:45 3190  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
15:35:45 3191  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:35:45 3192  	 out_offer_id	     OUT NUMBER
15:35:45 3193  )
15:35:45 3194  AS
15:35:45 3195  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
15:35:45 3196  BEGIN
15:35:45 3197  	 SELECT OFFER_ID INTO out_offer_id
15:35:45 3198  	 FROM LICENSE L,
15:35:45 3199  	 (
15:35:45 3200  	   SELECT MIN(ID) ID FROM LICENSE
15:35:45 3201  	   WHERE SUBSCRIPTION_ID = in_subscription_id
15:35:45 3202  	   AND LICENSE_STATUS_ID = 2
15:35:45 3203  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
15:35:45 3204  	 ) EARLIEST_ACTIVE_LICENSE
15:35:45 3205  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
15:35:45 3206  END GET_EARLIEST_ACTIVE_OFFER_ID;
15:35:45 3207  
15:35:45 3208  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
15:35:45 3209  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:35:45 3210  	 out_license_id        OUT NUMBER
15:35:45 3211  )
15:35:45 3212  AS
15:35:45 3213  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
15:35:45 3214  BEGIN
15:35:45 3215  	 SELECT MIN(ID) into out_license_id
15:35:45 3216  	 FROM LICENSE
15:35:45 3217  	 WHERE SUBSCRIPTION_ID = in_subscription_id
15:35:45 3218  	 AND LICENSE_STATUS_ID = 2
15:35:45 3219  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
15:35:45 3220  END GET_EARLIEST_ACTIVE_LICENSE_ID;
15:35:45 3221  
15:35:45 3222  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
15:35:45 3223  	 out_result_set      OUT SYS_REFCURSOR
15:35:45 3224  )
15:35:45 3225  AS
15:35:45 3226  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
15:35:45 3227  BEGIN
15:35:45 3228  	 OPEN out_result_set FOR
15:35:45 3229  	   SELECT
15:35:45 3230  	     s.id
15:35:45 3231  	   FROM
15:35:45 3232  	     core_owner.transaction t
15:35:45 3233  	   INNER JOIN
15:35:45 3234  	     core_owner.charge c
15:35:45 3235  	   ON
15:35:45 3236  	     c.transaction_id = t.id
15:35:45 3237  	   INNER JOIN
15:35:45 3238  	     core_owner.invoice i
15:35:45 3239  	   ON
15:35:45 3240  	     i.id = c.invoice_id
15:35:45 3241  	   INNER JOIN
15:35:45 3242  	     core_owner.license l
15:35:45 3243  	   ON
15:35:45 3244  	     i.id = l.invoice_id
15:35:45 3245  	   INNER JOIN
15:35:45 3246  	     core_owner.subscription s
15:35:45 3247  	   ON
15:35:45 3248  	     l.subscription_id = s.id
15:35:45 3249  	   INNER JOIN
15:35:45 3250  	     core_owner.account a
15:35:45 3251  	   ON
15:35:45 3252  	     s.account_id = a.id
15:35:45 3253  	   JOIN
15:35:45 3254  	     core_owner.rcn_cpt_chargeback_act_detail ccad
15:35:45 3255  	   ON
15:35:45 3256  	     t.order_id = ccad.merchant_order_number
15:35:45 3257  	   WHERE
15:35:45 3258  	     ccad.chargeback_category = 'RECD'
15:35:45 3259  	   AND s.subscription_status_id = 1;
15:35:45 3260  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
15:35:45 3261  
15:35:45 3262  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
15:35:45 3263  	 out_result_set      OUT SYS_REFCURSOR
15:35:45 3264  )
15:35:45 3265  AS
15:35:45 3266  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
15:35:45 3267  BEGIN
15:35:45 3268  	 OPEN out_result_set FOR
15:35:45 3269  	   SELECT
15:35:45 3270  	     s.id
15:35:45 3271  	   FROM
15:35:45 3272  	     core_owner.transaction t
15:35:45 3273  	   INNER JOIN
15:35:45 3274  	     core_owner.charge c
15:35:45 3275  	   ON
15:35:45 3276  	     c.transaction_id = t.id
15:35:45 3277  	   INNER JOIN
15:35:45 3278  	     core_owner.invoice i
15:35:45 3279  	   ON
15:35:45 3280  	     i.id = c.invoice_id
15:35:45 3281  	   INNER JOIN
15:35:45 3282  	     core_owner.license l
15:35:45 3283  	   ON
15:35:45 3284  	     i.id = l.invoice_id
15:35:45 3285  	   INNER JOIN
15:35:45 3286  	     core_owner.subscription s
15:35:45 3287  	   ON
15:35:45 3288  	     l.subscription_id = s.id
15:35:45 3289  	   INNER JOIN
15:35:45 3290  	     core_owner.account a
15:35:45 3291  	   ON
15:35:45 3292  	     s.account_id = a.id
15:35:45 3293  	   INNER JOIN
15:35:45 3294  	     core_owner.rcn_pp_trans_detail ptd
15:35:45 3295  	   ON
15:35:45 3296  	     t.order_id = ptd.invoice_id
15:35:45 3297  	   WHERE
15:35:45 3298  	     ptd.trans_status = 'D'
15:35:45 3299  	   AND s.subscription_status_id = 1;
15:35:45 3300  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
15:35:45 3301  
15:35:45 3302  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
15:35:45 3303  	 out_result_set      OUT SYS_REFCURSOR
15:35:45 3304  )
15:35:45 3305  AS
15:35:45 3306  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_AMEX_CB';
15:35:45 3307  BEGIN
15:35:45 3308  	 OPEN out_result_set FOR
15:35:45 3309  	   SELECT
15:35:45 3310  	     s.id
15:35:45 3311  	   FROM
15:35:45 3312  	     core_owner.transaction t
15:35:45 3313  	   INNER JOIN
15:35:45 3314  	     core_owner.charge c
15:35:45 3315  	   ON
15:35:45 3316  	     c.transaction_id = t.id
15:35:45 3317  	   INNER JOIN
15:35:45 3318  	     core_owner.invoice i
15:35:45 3319  	   ON
15:35:45 3320  	     i.id = c.invoice_id
15:35:45 3321  	   INNER JOIN
15:35:45 3322  	     core_owner.license l
15:35:45 3323  	   ON
15:35:45 3324  	     i.id = l.invoice_id
15:35:45 3325  	   INNER JOIN
15:35:45 3326  	     core_owner.subscription s
15:35:45 3327  	   ON
15:35:45 3328  	     l.subscription_id = s.id
15:35:45 3329  	   INNER JOIN
15:35:45 3330  	     core_owner.account a
15:35:45 3331  	   ON
15:35:45 3332  	     s.account_id = a.id
15:35:45 3333  	   INNER JOIN
15:35:45 3334  	     core_owner.rcn_amex_chargeback ac
15:35:45 3335  	   ON
15:35:45 3336  	     t.order_id = lower(ac.ind_ref_number)
15:35:45 3337  	   WHERE
15:35:45 3338  	     s.subscription_status_id = 1;
15:35:45 3339  END GET_ACT_SUBS_W_AMEX_CB;
15:35:45 3340  
15:35:45 3341  END PROCS_SUBSCRIPTION_V17;
15:35:45 3342  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.24
15:35:45 SQL> 
15:35:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V17" AS
15:35:45   2  
15:35:45   3  PROCEDURE IS_INVOICE_FOR_GC (
15:35:45   4  	in_invoice_id IN NUMBER,
15:35:45   5  	out_result    OUT NUMBER
15:35:45   6  ) AS
15:35:45   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
15:35:45   8  var_is_for_gc NUMBER;
15:35:45   9  BEGIN
15:35:45  10  	SELECT
15:35:45  11  	  count(1) into var_is_for_gc
15:35:45  12  	FROM GIFT_CERTIFICATE GC
15:35:45  13  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
15:35:45  14  
15:35:45  15  	IF var_is_for_gc > 0 THEN
15:35:45  16  	  out_result := 1;
15:35:45  17  	ELSE
15:35:45  18  	  out_result := 0;
15:35:45  19  	END IF;
15:35:45  20  END IS_INVOICE_FOR_GC;
15:35:45  21  
15:35:45  22  PROCEDURE CREATE_INVOICE(
15:35:45  23  /*
15:35:45  24  Throws exceptions:
15:35:45  25  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45  26  */
15:35:45  27  	  in_invoice_status IN NUMBER,
15:35:45  28  	  in_created_by     IN VARCHAR2,
15:35:45  29  	  in_tax_exempt_id  IN VARCHAR2,
15:35:45  30  	  out_invoice_id    OUT NUMBER
15:35:45  31  ) AS
15:35:45  32  -- VARIABLES
15:35:45  33  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
15:35:45  34  var_new_invoice_id NUMBER;
15:35:45  35  -- EXCEPTIONS
15:35:45  36  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45  37  BEGIN
15:35:45  38  
15:35:45  39  	PROCS_INVOICE_CRU_V17.CREATE_INVOICE(
15:35:45  40  	  out_invoice_id		 => var_new_invoice_id,
15:35:45  41  	  in_created_by 		 => in_created_by,
15:35:45  42  	  in_invoice_status_id		 => in_invoice_status,
15:35:45  43  	  in_tax_exempt_id		 => in_tax_exempt_id
15:35:45  44  	);
15:35:45  45  
15:35:45  46  	out_invoice_id := var_new_invoice_id;
15:35:45  47  
15:35:45  48  EXCEPTION
15:35:45  49  WHEN OTHERS THEN
15:35:45  50  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45  51  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45  52  END CREATE_INVOICE;
15:35:45  53  
15:35:45  54  /************************************************************/
15:35:45  55  
15:35:45  56  PROCEDURE GET_PENDING_INVOICES (
15:35:45  57  /*
15:35:45  58  Throws exceptions:
15:35:45  59  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45  60  */
15:35:45  61  	out_result_set1      OUT SYS_REFCURSOR,
15:35:45  62  	out_result_set2      OUT SYS_REFCURSOR,
15:35:45  63  	out_result_set3      OUT SYS_REFCURSOR,
15:35:45  64  	in_row_number	     IN NUMBER DEFAULT NULL
15:35:45  65  ) AS
15:35:45  66  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
15:35:45  67  -- COMSTANTS
15:35:45  68  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
15:35:45  69  -- VARIABLES
15:35:45  70  var_row_number NUMBER;
15:35:45  71  BEGIN
15:35:45  72  
15:35:45  73  	IF in_row_number IS NULL THEN
15:35:45  74  	  var_row_number := DEFAULT_ROW_NUMBER;
15:35:45  75  	ELSE
15:35:45  76  	  var_row_number := in_row_number;
15:35:45  77  	END IF;
15:35:45  78  
15:35:45  79  	-- Invoices with one or more payments(charges) with transaction status PENDING
15:35:45  80  	OPEN out_result_set1 FOR
15:35:45  81  SELECT * FROM
15:35:45  82  (
15:35:45  83  	SELECT
15:35:45  84  	  INVOICE.ID
15:35:45  85  	FROM
15:35:45  86  	  CHARGE
15:35:45  87  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
15:35:45  88  	WHERE
15:35:45  89  	  EXISTS(
15:35:45  90  	    SELECT NULL
15:35:45  91  	    FROM TRANSACTION
15:35:45  92  	    WHERE
15:35:45  93  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V17.TRANSACTION_PENDING
15:35:45  94  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
15:35:45  95  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V17.TRUE
15:35:45  96  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
15:35:45  97  	  )
15:35:45  98  	  AND
15:35:45  99  	  NOT EXISTS(
15:35:45 100  	    SELECT NULL
15:35:45 101  	    FROM PROCESS_RETRY_THROTTLE
15:35:45 102  	    WHERE PROCESS_NAME = SPROC_NAME
15:35:45 103  	      AND GENERIC_ID = INVOICE.ID
15:35:45 104  	  )
15:35:45 105  	  AND ROWNUM <= var_row_number*10
15:35:45 106  	  ORDER BY dbms_random.value
15:35:45 107  ) WHERE
15:35:45 108  	  ROWNUM <= var_row_number;
15:35:45 109  
15:35:45 110  	-- Invoices not marked as CLOSED but are fully paid (shouldn't happen).
15:35:45 111  	OPEN out_result_set2 FOR
15:35:45 112  	SELECT
15:35:45 113  	  INVOICE.ID
15:35:45 114  	FROM
15:35:45 115  	  INVOICE
15:35:45 116  	WHERE
15:35:45 117  	  1 = 2 AND
15:35:45 118  	  (
15:35:45 119  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V17.INVOICE_OPEN
15:35:45 120  	  )
15:35:45 121  	  AND NOT EXISTS(
15:35:45 122  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_OPENED AND ROWNUM <= 1
15:35:45 123  	  )
15:35:45 124  	  AND EXISTS (
15:35:45 125  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID != GLOBAL_STATUSES_V17.CHARGE_OPENED AND ROWNUM <= 1
15:35:45 126  	  )
15:35:45 127  	  AND INVOICE.ID NOT IN
15:35:45 128  	    (
15:35:45 129  	      SELECT GENERIC_ID
15:35:45 130  	      FROM PROCESS_RETRY_THROTTLE
15:35:45 131  	      WHERE
15:35:45 132  		PROCESS_NAME = SPROC_NAME
15:35:45 133  	    )
15:35:45 134  	  AND ROWNUM <= var_row_number;
15:35:45 135  
15:35:45 136  	-- Invoices not marked as CLOSED with no payments(charges).
15:35:45 137  	OPEN out_result_set3 FOR
15:35:45 138  	SELECT
15:35:45 139  	  INVOICE.ID
15:35:45 140  	FROM
15:35:45 141  	  INVOICE
15:35:45 142  	WHERE
15:35:45 143  	  1 = 2 AND
15:35:45 144  	  (
15:35:45 145  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V17.INVOICE_OPEN
15:35:45 146  	  )
15:35:45 147  	  AND NOT EXISTS (
15:35:45 148  	    SELECT 1 FROM CHARGE WHERE CHARGE.INVOICE_ID = INVOICE.ID AND ROWNUM <= 1
15:35:45 149  	  )
15:35:45 150  	  AND INVOICE.ID NOT IN
15:35:45 151  	    (
15:35:45 152  	      SELECT GENERIC_ID
15:35:45 153  	      FROM PROCESS_RETRY_THROTTLE
15:35:45 154  	      WHERE
15:35:45 155  		PROCESS_NAME = SPROC_NAME
15:35:45 156  	    )
15:35:45 157  	  AND ROWNUM <= var_row_number;
15:35:45 158  
15:35:45 159  EXCEPTION
15:35:45 160  WHEN OTHERS THEN
15:35:45 161  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 163  END GET_PENDING_INVOICES;
15:35:45 164  
15:35:45 165  /************************************************************/
15:35:45 166  
15:35:45 167  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
15:35:45 168  	in_invoice_id IN  NUMBER
15:35:45 169  ) RETURN NUMBER AS
15:35:45 170  var_amount NUMBER;
15:35:45 171  BEGIN
15:35:45 172  
15:35:45 173  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
15:35:45 174  	RETURN var_amount;
15:35:45 175  
15:35:45 176  END;
15:35:45 177  
15:35:45 178  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:35:45 179  /*
15:35:45 180  Throws exceptions:
15:35:45 181  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 182  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 183  */
15:35:45 184  	in_invoice_id IN  NUMBER,
15:35:45 185  	out_amount    OUT NUMBER
15:35:45 186  ) AS
15:35:45 187  -- VARIABLES
15:35:45 188  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
15:35:45 189  temp_invoice_id	     NUMBER;
15:35:45 190  var_total_amount	     NUMBER(10,6);
15:35:45 191  var_final_amount	     NUMBER(10,2);
15:35:45 192  var_line_item_amount   NUMBER(10,6);
15:35:45 193  
15:35:45 194  var_line_items_set     SYS_REFCURSOR;
15:35:45 195  var_line_item_id	     NUMBER;
15:35:45 196  var_line_item_quantity NUMBER;
15:35:45 197  var_line_item_price    NUMBER (10,2);
15:35:45 198  
15:35:45 199  var_discount_fixed_amount NUMBER (10,2);
15:35:45 200  var_discount_percent_amount NUMBER (10,2);
15:35:45 201  
15:35:45 202  -- EXCEPTIONS
15:35:45 203  BAD_INVOICE_ID		    EXCEPTION;
15:35:45 204  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
15:35:45 205  EXCEPTION_MESSAGE VARCHAR2(1024);
15:35:45 206  BEGIN
15:35:45 207  
15:35:45 208  	var_total_amount := 0;
15:35:45 209  
15:35:45 210  	-- Check that given invoice exists
15:35:45 211  	BEGIN
15:35:45 212  	  SELECT
15:35:45 213  	    INVOICE.ID into temp_invoice_id
15:35:45 214  	  FROM
15:35:45 215  	    INVOICE
15:35:45 216  	  WHERE
15:35:45 217  	    INVOICE.ID = in_invoice_id
15:35:45 218  	    AND ROWNUM <= 1;
15:35:45 219  	  EXCEPTION
15:35:45 220  	    WHEN NO_DATA_FOUND THEN
15:35:45 221  	      RAISE BAD_INVOICE_ID;
15:35:45 222  	END;
15:35:45 223  
15:35:45 224  	-- Calculate amount for each line item in invoice
15:35:45 225  	FOR f_line_item IN (
15:35:45 226  	  SELECT
15:35:45 227  	    LINE_ITEM.ID
15:35:45 228  	  FROM
15:35:45 229  	    LINE_ITEM
15:35:45 230  	  WHERE
15:35:45 231  	    LINE_ITEM.INVOICE_ID = in_invoice_id
15:35:45 232  	)
15:35:45 233  	LOOP
15:35:45 234  	  BEGIN
15:35:45 235  	    PROCS_LINE_ITEMS_V17.CALCULATE_LINE_ITEM_AMOUNT(
15:35:45 236  	      in_line_item_id => f_line_item.ID,
15:35:45 237  	      out_amount      => var_line_item_amount
15:35:45 238  	    );
15:35:45 239  	    var_total_amount := var_total_amount + var_line_item_amount;
15:35:45 240  	    EXCEPTION
15:35:45 241  	      WHEN OTHERS THEN
15:35:45 242  		EXCEPTION_MESSAGE := SQLERRM;
15:35:45 243  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
15:35:45 244  	  END;
15:35:45 245  	END LOOP;
15:35:45 246  	var_final_amount := var_total_amount;
15:35:45 247  	out_amount := var_final_amount;
15:35:45 248  
15:35:45 249  EXCEPTION
15:35:45 250  WHEN BAD_INVOICE_ID THEN
15:35:45 251  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 252  	  SPROC_NAME, 'No such invoice');
15:35:45 253  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
15:35:45 254  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 255  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
15:35:45 256  WHEN OTHERS THEN
15:35:45 257  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 258  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 259  END;
15:35:45 260  
15:35:45 261  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
15:35:45 262  /*
15:35:45 263  Throws exceptions:
15:35:45 264  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 265  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 266  */
15:35:45 267  	in_invoice_id  IN  NUMBER,
15:35:45 268  	out_account_id OUT NUMBER
15:35:45 269  ) AS
15:35:45 270  -- VARIABLES
15:35:45 271  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
15:35:45 272  temp_gc_account_id NUMBER;
15:35:45 273  temp_ss_account_id NUMBER;
15:35:45 274  temp_invoice_id	 NUMBER;
15:35:45 275  -- EXCEPTIONS
15:35:45 276  BAD_INVOICE_ID	   EXCEPTION;
15:35:45 277  CAN_NOT_FIND_ACCOUNT EXCEPTION;
15:35:45 278  BEGIN
15:35:45 279  
15:35:45 280  	-- Check that given invoice exists
15:35:45 281  	BEGIN
15:35:45 282  	  SELECT
15:35:45 283  	    INVOICE.ID into temp_invoice_id
15:35:45 284  	  FROM
15:35:45 285  	    INVOICE
15:35:45 286  	  WHERE
15:35:45 287  	    INVOICE.ID = in_invoice_id;
15:35:45 288  	  EXCEPTION
15:35:45 289  	    WHEN NO_DATA_FOUND THEN
15:35:45 290  	      RAISE BAD_INVOICE_ID;
15:35:45 291  	END;
15:35:45 292  
15:35:45 293  	-- Try to find gift certificate with given invoice
15:35:45 294  	BEGIN
15:35:45 295  	  SELECT
15:35:45 296  	    ACCOUNT.GROUP_ID into temp_gc_account_id
15:35:45 297  	  FROM
15:35:45 298  	    GIFT_CERTIFICATE
15:35:45 299  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
15:35:45 300  	  WHERE
15:35:45 301  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
15:35:45 302  	    AND ROWNUM <= 1;
15:35:45 303  	  EXCEPTION
15:35:45 304  	    WHEN NO_DATA_FOUND THEN
15:35:45 305  	      temp_gc_account_id := NULL;
15:35:45 306  	END;
15:35:45 307  
15:35:45 308  	-- check subscriptions for given invoice
15:35:45 309  	IF temp_gc_account_id IS NOT NULL THEN
15:35:45 310  	  out_account_id := temp_gc_account_id;
15:35:45 311  	ELSE
15:35:45 312  	  BEGIN
15:35:45 313  	    SELECT
15:35:45 314  	      ACCOUNT.GROUP_ID into temp_ss_account_id
15:35:45 315  	    FROM
15:35:45 316  	      LICENSE
15:35:45 317  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 318  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:35:45 319  	    WHERE
15:35:45 320  	      LICENSE.INVOICE_ID = in_invoice_id
15:35:45 321  	      AND ROWNUM <= 1;
15:35:45 322  	    EXCEPTION
15:35:45 323  	      WHEN NO_DATA_FOUND THEN
15:35:45 324  		temp_ss_account_id := NULL;
15:35:45 325  	  END;
15:35:45 326  	  IF temp_ss_account_id IS NULL THEN
15:35:45 327  	    RAISE CAN_NOT_FIND_ACCOUNT;
15:35:45 328  	  ELSE
15:35:45 329  	    out_account_id := temp_ss_account_id;
15:35:45 330  	  END IF;
15:35:45 331  	END IF;
15:35:45 332  
15:35:45 333  EXCEPTION
15:35:45 334  WHEN BAD_INVOICE_ID THEN
15:35:45 335  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 336  	  SPROC_NAME, 'No such invoice');
15:35:45 337  WHEN CAN_NOT_FIND_ACCOUNT THEN
15:35:45 338  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 339  	  SPROC_NAME, 'Could not find account by given invoice id');
15:35:45 340  WHEN OTHERS THEN
15:35:45 341  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 342  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 343  END GET_ACCOUNT_BY_INVOICE_ID;
15:35:45 344  
15:35:45 345  /*****************************************************************/
15:35:45 346  
15:35:45 347  PROCEDURE GET_INVOICE_DETAILS (
15:35:45 348  /*
15:35:45 349  Throws exceptions:
15:35:45 350  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 351  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 352  */
15:35:45 353  	in_invoice_id	   IN  NUMBER,
15:35:45 354  	out_group_id	   OUT NUMBER,
15:35:45 355  	out_status_id	   OUT NUMBER,
15:35:45 356  	out_line_items_set OUT SYS_REFCURSOR,
15:35:45 357  	out_pp_charges_set OUT SYS_REFCURSOR,
15:35:45 358  	out_cc_charges_set OUT SYS_REFCURSOR,
15:35:45 359  	out_gc_charges_set OUT SYS_REFCURSOR
15:35:45 360  ) AS
15:35:45 361  -- VARIABLES
15:35:45 362  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
15:35:45 363  
15:35:45 364  -- EXCEPTIONS
15:35:45 365  BAD_INVOICE_ID	     EXCEPTION;
15:35:45 366  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
15:35:45 367  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 368  BEGIN
15:35:45 369  
15:35:45 370  	-- get invoice status
15:35:45 371  	BEGIN
15:35:45 372  	  SELECT
15:35:45 373  	    INVOICE.INVOICE_STATUS_ID into out_status_id
15:35:45 374  	  FROM
15:35:45 375  	    INVOICE
15:35:45 376  	  WHERE
15:35:45 377  	    INVOICE.ID = in_invoice_id;
15:35:45 378  	  EXCEPTION
15:35:45 379  	    WHEN NO_DATA_FOUND THEN
15:35:45 380  	      RAISE BAD_INVOICE_ID;
15:35:45 381  	END;
15:35:45 382  
15:35:45 383  	-- get group id
15:35:45 384  	BEGIN
15:35:45 385  	  PROCS_INVOICE_V17.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
15:35:45 386  	  EXCEPTION
15:35:45 387  	    WHEN OTHERS THEN
15:35:45 388  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 389  	      RAISE CAN_NOT_FIND_ACCOUNT;
15:35:45 390  	END;
15:35:45 391  
15:35:45 392  	-- get all line items for given invoice
15:35:45 393  	OPEN out_line_items_set FOR
15:35:45 394  	SELECT
15:35:45 395  	  LINE_ITEM.AMOUNT,
15:35:45 396  	  LINE_ITEM.ID,
15:35:45 397  	  LINE_ITEM.CREATED_BY,
15:35:45 398  	  LINE_ITEM.CREATE_DATE,
15:35:45 399  	  LINE_ITEM.DISCOUNT_AMOUNT,
15:35:45 400  	  LINE_ITEM.TAXES_AMOUNT,
15:35:45 401  	  LINE_ITEM.PRODUCT_OFFER_ID,
15:35:45 402  	  LINE_ITEM.INVOICE_ID
15:35:45 403  	FROM
15:35:45 404  	  LINE_ITEM
15:35:45 405  	WHERE
15:35:45 406  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
15:35:45 407  
15:35:45 408  	-- get all pp charges for given invoice
15:35:45 409  	OPEN out_pp_charges_set FOR
15:35:45 410  	SELECT
15:35:45 411  	  CHARGE.ID as "CHARGE_ID",
15:35:45 412  	  CHARGE_AMOUNT,
15:35:45 413  	  CHARGE.INSTRUMENT_ID,
15:35:45 414  	  CHARGE.CHARGE_STATUS_ID
15:35:45 415  	FROM
15:35:45 416  	  CHARGE
15:35:45 417  	WHERE
15:35:45 418  	  CHARGE.INVOICE_ID = in_invoice_id
15:35:45 419  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL;
15:35:45 420  
15:35:45 421  	-- get all credir cards for given invoice
15:35:45 422  	OPEN out_cc_charges_set FOR
15:35:45 423  	SELECT
15:35:45 424  	  CHARGE.ID as "CHARGE_ID",
15:35:45 425  	  CHARGE.CHARGE_AMOUNT,
15:35:45 426  	  CHARGE.INSTRUMENT_ID,
15:35:45 427  	  CHARGE.CHARGE_STATUS_ID
15:35:45 428  	FROM
15:35:45 429  	  CHARGE
15:35:45 430  	WHERE
15:35:45 431  	  CHARGE.INVOICE_ID = in_invoice_id
15:35:45 432  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD;
15:35:45 433  
15:35:45 434  	OPEN out_gc_charges_set FOR
15:35:45 435  	SELECT
15:35:45 436  	  CHARGE.ID as "CHARGE_ID",
15:35:45 437  	  CHARGE.CHARGE_AMOUNT,
15:35:45 438  	  CHARGE.INSTRUMENT_ID,
15:35:45 439  	  CHARGE.CHARGE_STATUS_ID
15:35:45 440  	FROM
15:35:45 441  	  CHARGE
15:35:45 442  	WHERE
15:35:45 443  	  CHARGE.INVOICE_ID = in_invoice_id
15:35:45 444  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V17.INSTRUMENT_GIFT_CERTIFICATE;
15:35:45 445  
15:35:45 446  EXCEPTION
15:35:45 447  WHEN BAD_INVOICE_ID THEN
15:35:45 448  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 449  	  SPROC_NAME, 'No such invoice');
15:35:45 450  WHEN CAN_NOT_FIND_ACCOUNT THEN
15:35:45 451  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 452  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
15:35:45 453  WHEN OTHERS THEN
15:35:45 454  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 455  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 456  END GET_INVOICE_DETAILS;
15:35:45 457  
15:35:45 458  /******************************************************/
15:35:45 459  -- norlov: #38796
15:35:45 460  PROCEDURE GET_TRANSACTION_INVOICE (
15:35:45 461  /*
15:35:45 462  Throws exceptions:
15:35:45 463  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 464  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 465  */
15:35:45 466  	in_transaction_id  IN  NUMBER,
15:35:45 467  	out_result_set	      OUT SYS_REFCURSOR
15:35:45 468  ) AS
15:35:45 469  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
15:35:45 470  -- VARIABLES
15:35:45 471  temp_transaction_id  NUMBER;
15:35:45 472  var_invoice_id	   NUMBER;
15:35:45 473  var_subscription_id  NUMBER;
15:35:45 474  var_offer_chain_id   NUMBER;
15:35:45 475  var_offer_chain_name VARCHAR2(255);
15:35:45 476  -- EXCEPTIONS
15:35:45 477  BAD_TRANSACTION_ID     EXCEPTION;
15:35:45 478  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 479  BEGIN
15:35:45 480   -- check if there is the transaction
15:35:45 481  	BEGIN
15:35:45 482  	  SELECT
15:35:45 483  	    TRANSACTION.ID into temp_transaction_id
15:35:45 484  	  FROM
15:35:45 485  	    TRANSACTION
15:35:45 486  	  WHERE
15:35:45 487  	    TRANSACTION.ID = in_transaction_id;
15:35:45 488  	  EXCEPTION
15:35:45 489  	    WHEN NO_DATA_FOUND THEN
15:35:45 490  	      RAISE BAD_TRANSACTION_ID;
15:35:45 491  	END;
15:35:45 492  
15:35:45 493  	-- Get invoice id
15:35:45 494  	SELECT DISTINCT
15:35:45 495  	  CHARGE.INVOICE_ID into var_invoice_id
15:35:45 496  	FROM
15:35:45 497  	  CHARGE
15:35:45 498  	WHERE
15:35:45 499  	  CHARGE.TRANSACTION_ID = in_transaction_id;
15:35:45 500  
15:35:45 501  	-- Get subscription id if exists
15:35:45 502  	BEGIN
15:35:45 503  	  SELECT DISTINCT
15:35:45 504  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
15:35:45 505  	  FROM
15:35:45 506  	    LICENSE
15:35:45 507  	  WHERE
15:35:45 508  	    LICENSE.INVOICE_ID = var_invoice_id;
15:35:45 509  	  EXCEPTION
15:35:45 510  	    WHEN NO_DATA_FOUND THEN
15:35:45 511  	      var_subscription_id := NULL;
15:35:45 512  	END;
15:35:45 513  
15:35:45 514  	IF var_subscription_id IS NOT NULL THEN
15:35:45 515  	  -- Fetch offer chain from subscription
15:35:45 516  	  SELECT
15:35:45 517  	    OFFER_CHAIN.ID,
15:35:45 518  	    OFFER_CHAIN.NAME
15:35:45 519  	    into
15:35:45 520  	    var_offer_chain_id,
15:35:45 521  	    var_offer_chain_name
15:35:45 522  	  FROM
15:35:45 523  	    OFFER_CHAIN
15:35:45 524  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:45 525  	  WHERE
15:35:45 526  	    SUBSCRIPTION.ID = var_subscription_id;
15:35:45 527  	ELSE
15:35:45 528  	  -- Fetch offer chain from GC
15:35:45 529  	  SELECT
15:35:45 530  	    OFFER_CHAIN.ID,
15:35:45 531  	    OFFER_CHAIN.NAME
15:35:45 532  	    into
15:35:45 533  	    var_offer_chain_id,
15:35:45 534  	    var_offer_chain_name
15:35:45 535  	  FROM
15:35:45 536  	    OFFER_CHAIN
15:35:45 537  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:45 538  	  WHERE
15:35:45 539  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
15:35:45 540  	END IF;
15:35:45 541  
15:35:45 542  	OPEN out_result_set FOR
15:35:45 543  	SELECT DISTINCT
15:35:45 544  	  var_invoice_id       AS "INVOICE_ID",
15:35:45 545  	  var_subscription_id  AS "SUBSCRIPTION_ID",
15:35:45 546  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
15:35:45 547  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
15:35:45 548  	FROM
15:35:45 549  	  DUAL;
15:35:45 550  
15:35:45 551  EXCEPTION
15:35:45 552  WHEN BAD_TRANSACTION_ID THEN
15:35:45 553  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 554  	  SPROC_NAME, 'No such transaction');
15:35:45 555  WHEN OTHERS THEN
15:35:45 556  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 557  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 558  END GET_TRANSACTION_INVOICE;
15:35:45 559  
15:35:45 560  /******************************************************/
15:35:45 561  
15:35:45 562  PROCEDURE UPDATE_INVOICE_STATUS (
15:35:45 563  /*
15:35:45 564  Throws exceptions:
15:35:45 565  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 566  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 567  */
15:35:45 568  	in_invoice_id		       IN NUMBER,
15:35:45 569  	in_invoice_status_id	       IN NUMBER,
15:35:45 570  	in_updated_by		       IN VARCHAR2
15:35:45 571  ) AS
15:35:45 572  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
15:35:45 573  -- VARIABLES
15:35:45 574  temp_invoice_id NUMBER;
15:35:45 575  -- EXCEPTIONS
15:35:45 576  BAD_INVOICE_ID		      EXCEPTION;
15:35:45 577  BAD_INVOICE_STATUS_ID	      EXCEPTION;
15:35:45 578  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
15:35:45 579  BEGIN
15:35:45 580  
15:35:45 581  	-- Check if invoice exists
15:35:45 582  	BEGIN
15:35:45 583  	  SELECT
15:35:45 584  	    INVOICE.ID into temp_invoice_id
15:35:45 585  	  FROM
15:35:45 586  	    INVOICE
15:35:45 587  	  WHERE
15:35:45 588  	    INVOICE.ID = in_invoice_id;
15:35:45 589  	  EXCEPTION
15:35:45 590  	    WHEN NO_DATA_FOUND THEN
15:35:45 591  	      RAISE BAD_INVOICE_ID;
15:35:45 592  	END;
15:35:45 593  
15:35:45 594  	IF in_invoice_status_id != GLOBAL_STATUSES_V17.INVOICE_OPEN
15:35:45 595  	  AND in_invoice_status_id != GLOBAL_STATUSES_V17.INVOICE_CLOSED THEN
15:35:45 596  	  RAISE BAD_INVOICE_STATUS_ID;
15:35:45 597  	END IF;
15:35:45 598  
15:35:45 599  	PROCS_INVOICE_CRU_V17.UPDATE_INVOICE(
15:35:45 600  	  in_invoice_id 		 => in_invoice_id,
15:35:45 601  	  in_invoice_status_id		 => in_invoice_status_id,
15:35:45 602  	  in_updated_by 		 => in_updated_by
15:35:45 603  	);
15:35:45 604  
15:35:45 605  EXCEPTION
15:35:45 606  WHEN BAD_INVOICE_STATUS_ID THEN
15:35:45 607  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 608  	  SPROC_NAME, 'Bad invoice status id');
15:35:45 609  WHEN BAD_INVOICE_ID THEN
15:35:45 610  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 611  	  SPROC_NAME, 'No such invoice');
15:35:45 612  WHEN OTHERS THEN
15:35:45 613  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 614  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 615  END UPDATE_INVOICE_STATUS;
15:35:45 616  
15:35:45 617  /****************************************************************/
15:35:45 618  
15:35:45 619  FUNCTION IS_INVOICE_PAYING_STARTED (
15:35:45 620  /*
15:35:45 621  Throws exceptions:
15:35:45 622  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:45 623  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 624  */
15:35:45 625  	in_invoice_id IN NUMBER
15:35:45 626  ) RETURN NUMBER AS
15:35:45 627  -- VARIABLES
15:35:45 628  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
15:35:45 629  temp_invoice_id		 NUMBER;
15:35:45 630  var_processed_charges_num  NUMBER;
15:35:45 631  var_processed_transac_num  NUMBER;
15:35:45 632  var_success_attempts_num	 NUMBER;
15:35:45 633  var_is_gc 		 NUMBER;
15:35:45 634  -- EXCEPTIONS
15:35:45 635  BAD_INVOICE_ID EXCEPTION;
15:35:45 636  BEGIN
15:35:45 637  
15:35:45 638  	-- Check that invoice exists
15:35:45 639  	BEGIN
15:35:45 640  	  SELECT
15:35:45 641  	    INVOICE.ID into temp_invoice_id
15:35:45 642  	  FROM
15:35:45 643  	    INVOICE
15:35:45 644  	  WHERE
15:35:45 645  	    INVOICE.ID = in_invoice_id;
15:35:45 646  	  EXCEPTION
15:35:45 647  	   WHEN NO_DATA_FOUND THEN
15:35:45 648  	     RAISE BAD_INVOICE_ID;
15:35:45 649  	END;
15:35:45 650  
15:35:45 651  	-- Check that there are tansaction attempts with status success
15:35:45 652  	SELECT
15:35:45 653  	  COUNT(1) into var_success_attempts_num
15:35:45 654  	FROM
15:35:45 655  	  TRANSACTION_ATTEMPT ta,
15:35:45 656  	  TRANSACTION t,
15:35:45 657  	  CHARGE c
15:35:45 658  	WHERE
15:35:45 659  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS and
15:35:45 660  	  ta.transaction_id = t.id and
15:35:45 661  	  c.transaction_id = t.id and
15:35:45 662  	  t.is_refund = GLOBAL_CONSTANTS_V17.FALSE and
15:35:45 663  	  c.invoice_id = in_invoice_id
15:35:45 664  	;
15:35:45 665  
15:35:45 666  	IF var_success_attempts_num > 0 THEN
15:35:45 667  	  RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 668  	END IF;
15:35:45 669  
15:35:45 670  	SELECT
15:35:45 671  	  COUNT(1) into var_success_attempts_num
15:35:45 672  	FROM
15:35:45 673  	  TRANSACTION t,
15:35:45 674  	  CHARGE c
15:35:45 675  	WHERE
15:35:45 676  	  c.transaction_id = t.id and
15:35:45 677  	  t.is_refund = GLOBAL_CONSTANTS_V17.FALSE and
15:35:45 678  	  t.is_settled = GLOBAL_CONSTANTS_V17.TRUE and
15:35:45 679  	  c.invoice_id = in_invoice_id
15:35:45 680  	;
15:35:45 681  
15:35:45 682  	IF var_success_attempts_num > 0 THEN
15:35:45 683  	  RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 684  	END IF;
15:35:45 685  
15:35:45 686  	SELECT
15:35:45 687  	  COUNT(1) into var_is_gc
15:35:45 688  	FROM
15:35:45 689  	  gift_certificate gc
15:35:45 690  	WHERE
15:35:45 691  	  gc.finalized_invoice_id = in_invoice_id
15:35:45 692  	;
15:35:45 693  
15:35:45 694  	IF var_is_gc > 0 THEN
15:35:45 695  	  RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 696  	END IF;
15:35:45 697  
15:35:45 698  	RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 699  
15:35:45 700  EXCEPTION
15:35:45 701  WHEN BAD_INVOICE_ID THEN
15:35:45 702  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 703  	  SPROC_NAME, 'No such invoice');
15:35:45 704  WHEN OTHERS THEN
15:35:45 705  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 706  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 707  END IS_INVOICE_PAYING_STARTED;
15:35:45 708  
15:35:45 709  /******************************************************************************/
15:35:45 710  
15:35:45 711  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
15:35:45 712  	in_invoice_id  IN NUMBER,
15:35:45 713  	out_is_started OUT NUMBER
15:35:45 714  ) AS
15:35:45 715  BEGIN
15:35:45 716  	-- Just a wrapper
15:35:45 717  	out_is_started := PROCS_INVOICE_V17.IS_INVOICE_PAYING_STARTED(in_invoice_id);
15:35:45 718  END P_IS_INVOICE_PAYING_STARTED;
15:35:45 719  
15:35:45 720  /******************************************************************************/
15:35:45 721  
15:35:45 722  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
15:35:45 723  	in_invoice_id	      IN NUMBER,
15:35:45 724  	in_chargeback_date    IN DATE,
15:35:45 725  	out_chargeback_amount OUT NUMBER
15:35:45 726  ) AS
15:35:45 727  -- VARIABLES
15:35:45 728  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
15:35:45 729  var_chargeback_date    DATE;
15:35:45 730  temp_invoice_id	     NUMBER;
15:35:45 731  var_licenses_number    NUMBER;
15:35:45 732  var_invoice_start_date DATE;
15:35:45 733  var_invoice_end_date   DATE;
15:35:45 734  var_offer_id	     NUMBER;
15:35:45 735  var_offer_days_interval NUMBER;
15:35:45 736  var_license_days_used  NUMBER;
15:35:45 737  var_invoice_amount     NUMBER(10,2);
15:35:45 738  var_offer_chain_id     NUMBER;
15:35:45 739  var_offer_chain_meta_data_val VARCHAR2(1024);
15:35:45 740  var_offer_chain_full_refund   NUMBER;
15:35:45 741  var_offer_chain_prorated_ref  NUMBER;
15:35:45 742  var_chargeback_calculated NUMBER;
15:35:45 743  var_max_invoice_refund	NUMBER;
15:35:45 744  -- EXCEPTIONS
15:35:45 745  BAD_INVOICE_ID		  EXCEPTION;
15:35:45 746  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
15:35:45 747  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
15:35:45 748  BEGIN
15:35:45 749  
15:35:45 750  	IF in_chargeback_date IS NULL THEN
15:35:45 751  	  var_chargeback_date := PROCS_COMMON_V17.NORMALIZE_DATE(current_date);
15:35:45 752  	ELSE
15:35:45 753  	  var_chargeback_date := PROCS_COMMON_V17.NORMALIZE_DATE(in_chargeback_date);
15:35:45 754  	END IF;
15:35:45 755  
15:35:45 756  	-- Check that invoice exists
15:35:45 757  	BEGIN
15:35:45 758  	  SELECT
15:35:45 759  	    INVOICE.ID into temp_invoice_id
15:35:45 760  	  FROM
15:35:45 761  	    INVOICE
15:35:45 762  	  WHERE
15:35:45 763  	    INVOICE.ID = in_invoice_id;
15:35:45 764  	  EXCEPTION
15:35:45 765  	    WHEN NO_DATA_FOUND THEN
15:35:45 766  	      RAISE BAD_INVOICE_ID;
15:35:45 767  	END;
15:35:45 768  
15:35:45 769  	-- Check that invoice has at least one license
15:35:45 770  	SELECT
15:35:45 771  	  COUNT(*) into var_licenses_number
15:35:45 772  	FROM
15:35:45 773  	  LICENSE
15:35:45 774  	WHERE
15:35:45 775  	  LICENSE.INVOICE_ID = in_invoice_id;
15:35:45 776  
15:35:45 777  	IF var_licenses_number = 0 THEN
15:35:45 778  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
15:35:45 779  	END IF;
15:35:45 780  
15:35:45 781  	SELECT
15:35:45 782  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
15:35:45 783  	FROM
15:35:45 784  	  LICENSE
15:35:45 785  	WHERE
15:35:45 786  	  LICENSE.INVOICE_ID = in_invoice_id;
15:35:45 787  
15:35:45 788  	var_invoice_start_date := PROCS_COMMON_V17.NORMALIZE_DATE(var_invoice_start_date);
15:35:45 789  
15:35:45 790  	SELECT DISTINCT
15:35:45 791  	  LICENSE.OFFER_ID into var_offer_id
15:35:45 792  	FROM
15:35:45 793  	  LICENSE
15:35:45 794  	WHERE
15:35:45 795  	  LICENSE.INVOICE_ID = in_invoice_id;
15:35:45 796  
15:35:45 797  	SELECT
15:35:45 798  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
15:35:45 799  	FROM
15:35:45 800  	  LICENSE
15:35:45 801  	WHERE
15:35:45 802  	  LICENSE.INVOICE_ID = in_invoice_id;
15:35:45 803  
15:35:45 804  	-- All licenses for given invoice should point into the same offer
15:35:45 805  
15:35:45 806  	PROCS_OFFER_CHAIN_V17.GET_OFFER_LENGTH_IN_DAYS(
15:35:45 807  	  in_offer_id	=> var_offer_id,
15:35:45 808  	  in_start_date => var_invoice_start_date,
15:35:45 809  	  out_days	=> var_offer_days_interval
15:35:45 810  	);
15:35:45 811  
15:35:45 812  	IF var_offer_days_interval = 0 THEN
15:35:45 813  	  RAISE OFFER_LENGTH_IS_ZERO;
15:35:45 814  	END IF;
15:35:45 815  
15:35:45 816  	PROCS_INVOICE_V17.GET_INVOICE_DAYS_USED_NUMBER(
15:35:45 817  	  in_invoice_id      => in_invoice_id,
15:35:45 818  	  in_chargeback_date => var_chargeback_date,
15:35:45 819  	  out_days_num	     => var_license_days_used
15:35:45 820  	);
15:35:45 821  
15:35:45 822  	PROCS_INVOICE_V17.CALCULATE_INVOICE_AMOUNT(
15:35:45 823  	  in_invoice_id => in_invoice_id,
15:35:45 824  	  out_amount	=> var_invoice_amount
15:35:45 825  	);
15:35:45 826  
15:35:45 827  	-- 39437
15:35:45 828  	-- Get offer chain id by invoice id
15:35:45 829  	SELECT DISTINCT
15:35:45 830  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
15:35:45 831  	FROM
15:35:45 832  	  SUBSCRIPTION
15:35:45 833  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 834  	WHERE
15:35:45 835  	  LICENSE.INVOICE_ID = in_invoice_id;
15:35:45 836  
15:35:45 837  	-- Get offer chain's meta data full amount value
15:35:45 838  	PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_MD_VALUE(
15:35:45 839  	  in_offer_chain_id => var_offer_chain_id,
15:35:45 840  	  in_meta_data_name => GLOBAL_CONSTANTS_V17.OFFER_CHAIN_FULL_REFUND,
15:35:45 841  	  out_value	    => var_offer_chain_meta_data_val
15:35:45 842  	);
15:35:45 843  	IF var_offer_chain_meta_data_val IS NULL THEN
15:35:45 844  	  var_offer_chain_full_refund := NULL;
15:35:45 845  	ELSE
15:35:45 846  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
15:35:45 847  	END IF;
15:35:45 848  
15:35:45 849  	-- Get offer chain's meta data prorated amount value
15:35:45 850  	PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_MD_VALUE(
15:35:45 851  	  in_offer_chain_id => var_offer_chain_id,
15:35:45 852  	  in_meta_data_name => GLOBAL_CONSTANTS_V17.OFFER_CHAIN_PRORATED_REFUND,
15:35:45 853  	  out_value	    => var_offer_chain_meta_data_val
15:35:45 854  	);
15:35:45 855  	IF var_offer_chain_meta_data_val IS NULL THEN
15:35:45 856  	  var_offer_chain_prorated_ref := NULL;
15:35:45 857  	ELSE
15:35:45 858  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
15:35:45 859  	END IF;
15:35:45 860  
15:35:45 861  	var_chargeback_calculated := GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 862  
15:35:45 863  	IF var_offer_chain_full_refund IS NOT NULL
15:35:45 864  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:45 865  	  IF var_license_days_used < var_offer_chain_full_refund THEN
15:35:45 866  	    out_chargeback_amount := var_invoice_amount;
15:35:45 867  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 868  	  END IF;
15:35:45 869  	END IF;
15:35:45 870  
15:35:45 871  	IF var_offer_chain_prorated_ref IS NOT NULL
15:35:45 872  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:45 873  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
15:35:45 874  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
15:35:45 875  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 876  	  END IF;
15:35:45 877  	END IF;
15:35:45 878  
15:35:45 879  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V17.TRUE THEN
15:35:45 880  	  PROCS_INVOICE_V17.GET_MAX_REFUND(
15:35:45 881  	    in_invoice_id => in_invoice_id,
15:35:45 882  	    out_amount	  => var_max_invoice_refund
15:35:45 883  	  );
15:35:45 884  	  IF var_max_invoice_refund < out_chargeback_amount THEN
15:35:45 885  	    out_chargeback_amount := var_max_invoice_refund;
15:35:45 886  	  END IF;
15:35:45 887  	END IF;
15:35:45 888  
15:35:45 889  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:45 890  	  out_chargeback_amount := 0;
15:35:45 891  	END IF;
15:35:45 892  
15:35:45 893  EXCEPTION
15:35:45 894  WHEN BAD_INVOICE_ID THEN
15:35:45 895  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 896  	  SPROC_NAME, 'No such invoice');
15:35:45 897  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
15:35:45 898  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 899  	  SPROC_NAME, 'No licenses found');
15:35:45 900  WHEN OFFER_LENGTH_IS_ZERO THEN
15:35:45 901  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 902  	  SPROC_NAME, 'Offer length is zero');
15:35:45 903  WHEN OTHERS THEN
15:35:45 904  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 906  END CALCULATE_INVOICE_CHARGEBACK;
15:35:45 907  
15:35:45 908  /********************************************************************/
15:35:45 909  
15:35:45 910  PROCEDURE APPLY_REFUND (
15:35:45 911  	in_invoice_id	     IN NUMBER,
15:35:45 912  	in_chargeback_amount IN NUMBER,
15:35:45 913  	in_created_by	     IN VARCHAR2,
15:35:45 914  	out_charge_id	     OUT NUMBER
15:35:45 915  ) AS
15:35:45 916  -- VARIABLES
15:35:45 917  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
15:35:45 918  temp_invoice_id		 NUMBER;
15:35:45 919  var_total_charges_amount	 NUMBER(10,2);
15:35:45 920  var_charge_amount_to_apply NUMBER(10,2);
15:35:45 921  var_transaction_id	 NUMBER;
15:35:45 922  var_instrument_type_id	 NUMBER;
15:35:45 923  var_instrument_id 	 NUMBER;
15:35:45 924  var_charge_id		 NUMBER;
15:35:45 925  -- EXCEPTIONS
15:35:45 926  BAD_INVOICE_ID		 EXCEPTION;
15:35:45 927  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
15:35:45 928  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
15:35:45 929  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
15:35:45 930  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:35:45 931  BEGIN
15:35:45 932  
15:35:45 933  	BEGIN
15:35:45 934  	  SELECT
15:35:45 935  	    INVOICE.ID into temp_invoice_id
15:35:45 936  	  FROM
15:35:45 937  	    INVOICE
15:35:45 938  	  WHERE
15:35:45 939  	    INVOICE.ID = in_invoice_id;
15:35:45 940  	  EXCEPTION
15:35:45 941  	    WHEN NO_DATA_FOUND THEN
15:35:45 942  	      RAISE BAD_INVOICE_ID;
15:35:45 943  	END;
15:35:45 944  
15:35:45 945  	SELECT
15:35:45 946  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
15:35:45 947  	FROM
15:35:45 948  	  CHARGE
15:35:45 949  	WHERE
15:35:45 950  	  CHARGE.INVOICE_ID = in_invoice_id
15:35:45 951  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_PROCESSED
15:35:45 952  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V17.INSTRUMENT_GIFT_CERTIFICATE;
15:35:45 953  
15:35:45 954  	-- FIXME: Maybe whe should throw exception here?
15:35:45 955  	IF var_total_charges_amount < in_chargeback_amount THEN
15:35:45 956  	  var_charge_amount_to_apply := var_total_charges_amount;
15:35:45 957  	ELSE
15:35:45 958  	  var_charge_amount_to_apply := in_chargeback_amount;
15:35:45 959  	END IF;
15:35:45 960  
15:35:45 961  	BEGIN
15:35:45 962  	  PROCS_TRANSACTION_V17.CREATE_TRANSACTION(
15:35:45 963  	    in_transaction_id  => NULL,
15:35:45 964  	    in_status_id       => GLOBAL_STATUSES_V17.TRANSACTION_PREPARE,
15:35:45 965  	    in_amount	       => -var_charge_amount_to_apply,
15:35:45 966  	    in_created_by      => in_created_by,
15:35:45 967  	    in_order_id        => NULL,
15:35:45 968  	    in_is_refund       => GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 969  	    out_transaction_id => var_transaction_id
15:35:45 970  	  );
15:35:45 971  	  EXCEPTION
15:35:45 972  	    WHEN OTHERS THEN
15:35:45 973  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:45 974  	      RAISE CAN_NOT_CREATE_TRANSACTION;
15:35:45 975  	END;
15:35:45 976  
15:35:45 977  	BEGIN
15:35:45 978  	  SELECT
15:35:45 979  	    C.INSTRUMENT_TYPE_ID,
15:35:45 980  	    C.INSTRUMENT_ID
15:35:45 981  	    into
15:35:45 982  	    var_instrument_type_id,
15:35:45 983  	    var_instrument_id
15:35:45 984  	  FROM
15:35:45 985  	    CHARGE C,
15:35:45 986  	    TRANSACTION_ATTEMPT TA,
15:35:45 987  	    TRANSACTION T
15:35:45 988  	  WHERE
15:35:45 989  	    C.INVOICE_ID = in_invoice_id and
15:35:45 990  	    C.TRANSACTION_ID = T.ID and
15:35:45 991  	    TA.TRANSACTION_ID = T.ID and
15:35:45 992  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS and
15:35:45 993  	    T.IS_REFUND = GLOBAL_CONSTANTS_V17.FALSE and
15:35:45 994  	    T.TRANSACTION_AMOUNT >= 0 and
15:35:45 995  	    rownum < 2;
15:35:45 996  	EXCEPTION
15:35:45 997  	    WHEN NO_DATA_FOUND THEN
15:35:45 998  	      RAISE CAN_NOT_FIND_INSTRUMENT;
15:35:45 999  	END;
15:35:45 1000  	 BEGIN
15:35:45 1001  	   PROCS_CHARGE_V17.CREATE_CHARGE(
15:35:45 1002  	     in_invoice_id	   => in_invoice_id,
15:35:45 1003  	     in_transaction_id	   => var_transaction_id,
15:35:45 1004  	     in_instrument_type_id => var_instrument_type_id,
15:35:45 1005  	     in_instrument_id	   => var_instrument_id,
15:35:45 1006  	     in_charge_amount	   => -var_charge_amount_to_apply,
15:35:45 1007  	     in_created_by	   => in_created_by,
15:35:45 1008  	     in_charge_status_id   => GLOBAL_STATUSES_V17.CHARGE_OPENED,
15:35:45 1009  	     out_charge_id	   => var_charge_id
15:35:45 1010  	   );
15:35:45 1011  	   EXCEPTION
15:35:45 1012  	     WHEN OTHERS THEN
15:35:45 1013  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1014  	       RAISE CAN_NOT_CREATE_CHARGE;
15:35:45 1015  	 END;
15:35:45 1016  
15:35:45 1017  	 out_charge_id := var_charge_id;
15:35:45 1018  
15:35:45 1019  EXCEPTION
15:35:45 1020  WHEN BAD_INVOICE_ID THEN
15:35:45 1021  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1022  	   SPROC_NAME, 'No such invoice');
15:35:45 1023  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:35:45 1024  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1025  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:35:45 1026  WHEN CAN_NOT_FIND_INSTRUMENT THEN
15:35:45 1027  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1028  	   SPROC_NAME, 'Could not find financial instrument');
15:35:45 1029  WHEN CAN_NOT_CREATE_CHARGE THEN
15:35:45 1030  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1031  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:35:45 1032  WHEN OTHERS THEN
15:35:45 1033  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1034  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1035  END APPLY_REFUND;
15:35:45 1036  
15:35:45 1037  /******************************************************************************/
15:35:45 1038  
15:35:45 1039  PROCEDURE GET_MAX_REFUND (
15:35:45 1040  	 in_invoice_id IN NUMBER,
15:35:45 1041  	 out_amount    OUT NUMBER
15:35:45 1042  ) AS
15:35:45 1043  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
15:35:45 1044  -- VARIABLES
15:35:45 1045  temp_invoice_id	       NUMBER;
15:35:45 1046  var_invoice_refunds_sum NUMBER(10,2);
15:35:45 1047  var_invoice_charges_sum NUMBER(10,2);
15:35:45 1048  -- EXCEPTIONS
15:35:45 1049  BAD_INVOICE_ID EXCEPTION;
15:35:45 1050  BEGIN
15:35:45 1051  
15:35:45 1052  	 BEGIN
15:35:45 1053  	   SELECT
15:35:45 1054  	     INVOICE.ID into temp_invoice_id
15:35:45 1055  	   FROM
15:35:45 1056  	     INVOICE
15:35:45 1057  	   WHERE
15:35:45 1058  	     INVOICE.ID = in_invoice_id;
15:35:45 1059  	   EXCEPTION
15:35:45 1060  	     WHEN NO_DATA_FOUND THEN
15:35:45 1061  	       RAISE BAD_INVOICE_ID;
15:35:45 1062  	 END;
15:35:45 1063  
15:35:45 1064  	 var_invoice_refunds_sum := 0;
15:35:45 1065  	 var_invoice_charges_sum := 0;
15:35:45 1066  
15:35:45 1067  	 FOR f_charge IN (
15:35:45 1068  	   SELECT
15:35:45 1069  	     CHARGE.ID,
15:35:45 1070  	     CHARGE.CHARGE_STATUS_ID,
15:35:45 1071  	     CHARGE.CHARGE_AMOUNT,
15:35:45 1072  	     CHARGE.TRANSACTION_ID
15:35:45 1073  	   FROM
15:35:45 1074  	     CHARGE
15:35:45 1075  	   WHERE
15:35:45 1076  	     CHARGE.INVOICE_ID = in_invoice_id
15:35:45 1077  	 )
15:35:45 1078  	 LOOP
15:35:45 1079  	   -- If charge.status = canceled then continue
15:35:45 1080  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V17.CHARGE_CANCELED THEN
15:35:45 1081  
15:35:45 1082  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
15:35:45 1083  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_PROCESSED
15:35:45 1084  		  AND PROCS_TRANSACTION_V17.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V17.TRUE THEN
15:35:45 1085  		 -- Transaction collected
15:35:45 1086  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
15:35:45 1087  	       ELSE
15:35:45 1088  		 -- Transaction is not collected. Do nothing
15:35:45 1089  		 NULL;
15:35:45 1090  	       END IF;
15:35:45 1091  	     ELSE
15:35:45 1092  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_PROCESSED
15:35:45 1093  		  AND PROCS_TRANSACTION_V17.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:45 1094  		 -- If charge is processed transaction is not collected then do nothing
15:35:45 1095  		 NULL;
15:35:45 1096  	       ELSE
15:35:45 1097  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
15:35:45 1098  	       END IF;
15:35:45 1099  	     END IF;
15:35:45 1100  
15:35:45 1101  	   END IF;
15:35:45 1102  	 END LOOP;
15:35:45 1103  
15:35:45 1104  	 -- Refunds are negative
15:35:45 1105  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
15:35:45 1106  
15:35:45 1107  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
15:35:45 1108  
15:35:45 1109  EXCEPTION
15:35:45 1110  WHEN BAD_INVOICE_ID THEN
15:35:45 1111  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1112  	   SPROC_NAME, 'No such invoice');
15:35:45 1113  WHEN OTHERS THEN
15:35:45 1114  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1115  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1116  END GET_MAX_REFUND;
15:35:45 1117  
15:35:45 1118  /******************************************************************************/
15:35:45 1119  
15:35:45 1120  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
15:35:45 1121  	 in_invoice_id	     IN NUMBER,
15:35:45 1122  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
15:35:45 1123  	 out_days_num	     OUT NUMBER
15:35:45 1124  ) AS
15:35:45 1125  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
15:35:45 1126  -- VARIABLES
15:35:45 1127  temp_invoice_id	      NUMBER;
15:35:45 1128  var_license_start_date DATE;
15:35:45 1129  var_license_end_date   DATE;
15:35:45 1130  var_chargeback_date    DATE;
15:35:45 1131  var_invoice_days_used  NUMBER;
15:35:45 1132  -- EXCEPTIONS
15:35:45 1133  BAD_INVOICE_ID EXCEPTION;
15:35:45 1134  BEGIN
15:35:45 1135  
15:35:45 1136  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
15:35:45 1137  
15:35:45 1138  	 BEGIN
15:35:45 1139  	   SELECT
15:35:45 1140  	     INVOICE.ID into temp_invoice_id
15:35:45 1141  	   FROM
15:35:45 1142  	     INVOICE
15:35:45 1143  	   WHERE
15:35:45 1144  	     INVOICE.ID = in_invoice_id;
15:35:45 1145  	   EXCEPTION
15:35:45 1146  	     WHEN NO_DATA_FOUND THEN
15:35:45 1147  	       RAISE BAD_INVOICE_ID;
15:35:45 1148  	 END;
15:35:45 1149  
15:35:45 1150  	 var_invoice_days_used := 0;
15:35:45 1151  
15:35:45 1152  	 FOR f_license IN (
15:35:45 1153  	   SELECT
15:35:45 1154  	     LICENSE.START_DATE,
15:35:45 1155  	     LICENSE.END_DATE
15:35:45 1156  	   FROM
15:35:45 1157  	     LICENSE
15:35:45 1158  	   WHERE
15:35:45 1159  	     LICENSE.INVOICE_ID = in_invoice_id
15:35:45 1160  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V17.FALSE
15:35:45 1161  	 )
15:35:45 1162  	 LOOP
15:35:45 1163  	   var_license_start_date := PROCS_COMMON_V17.NORMALIZE_DATE(f_license.START_DATE);
15:35:45 1164  	   var_license_end_date := PROCS_COMMON_V17.NORMALIZE_DATE(f_license.END_DATE);
15:35:45 1165  
15:35:45 1166  	   IF var_license_start_date <= var_chargeback_date THEN
15:35:45 1167  	     IF var_license_end_date <= var_chargeback_date THEN
15:35:45 1168  	       -- License is passed
15:35:45 1169  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
15:35:45 1170  	     ELSE
15:35:45 1171  	       -- This is current license
15:35:45 1172  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
15:35:45 1173  	     END IF;
15:35:45 1174  	   ELSE
15:35:45 1175  	     -- if var_license_start_date > in_chargeback_date then do nothing
15:35:45 1176  	     NULL;
15:35:45 1177  	   END IF;
15:35:45 1178  	 END LOOP;
15:35:45 1179  
15:35:45 1180  	 out_days_num := var_invoice_days_used;
15:35:45 1181  
15:35:45 1182  EXCEPTION
15:35:45 1183  WHEN BAD_INVOICE_ID THEN
15:35:45 1184  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1185  	   SPROC_NAME, 'No such invoice');
15:35:45 1186  WHEN OTHERS THEN
15:35:45 1187  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1188  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1189  END GET_INVOICE_DAYS_USED_NUMBER;
15:35:45 1190  
15:35:45 1191  /******************************************************************************/
15:35:45 1192  
15:35:45 1193  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:35:45 1194  	 in_invoice_id	IN NUMBER,
15:35:45 1195  	 out_result_set OUT SYS_REFCURSOR
15:35:45 1196  ) AS
15:35:45 1197  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
15:35:45 1198  -- VARIABLES
15:35:45 1199  temp_invoice_id NUMBER;
15:35:45 1200  -- EXCEPTIONS
15:35:45 1201  BAD_INVOICE_ID EXCEPTION;
15:35:45 1202  BEGIN
15:35:45 1203  
15:35:45 1204  	 BEGIN
15:35:45 1205  	   SELECT
15:35:45 1206  	     INVOICE.ID into temp_invoice_id
15:35:45 1207  	   FROM
15:35:45 1208  	     INVOICE
15:35:45 1209  	   WHERE
15:35:45 1210  	     INVOICE.ID = in_invoice_id;
15:35:45 1211  	   EXCEPTION
15:35:45 1212  	     WHEN NO_DATA_FOUND THEN
15:35:45 1213  	       RAISE BAD_INVOICE_ID;
15:35:45 1214  	 END;
15:35:45 1215  
15:35:45 1216  	 OPEN out_result_set FOR
15:35:45 1217  	 SELECT
15:35:45 1218  	   LINE_ITEM.ID,
15:35:45 1219  	   LINE_ITEM.PRODUCT_OFFER_ID,
15:35:45 1220  	   LINE_ITEM.INVOICE_ID,
15:35:45 1221  	   LINE_ITEM.AMOUNT,
15:35:45 1222  	   LINE_ITEM.DISCOUNT_AMOUNT,
15:35:45 1223  	   LINE_ITEM.TAXES_AMOUNT,
15:35:45 1224  	   LINE_ITEM.CREATE_DATE,
15:35:45 1225  	   LINE_ITEM.CREATED_BY
15:35:45 1226  	 FROM
15:35:45 1227  	   LINE_ITEM
15:35:45 1228  	 WHERE
15:35:45 1229  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
15:35:45 1230  
15:35:45 1231  EXCEPTION
15:35:45 1232  WHEN BAD_INVOICE_ID THEN
15:35:45 1233  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1234  	   SPROC_NAME, 'No such invoice');
15:35:45 1235  WHEN OTHERS THEN
15:35:45 1236  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1237  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1238  END GET_INVOICE_LINE_ITEMS;
15:35:45 1239  
15:35:45 1240  /******************************************************************************/
15:35:45 1241  
15:35:45 1242  PROCEDURE GET_INVOICE_LICENSES (
15:35:45 1243  	 in_invoice_id	IN NUMBER,
15:35:45 1244  	 out_result_set OUT SYS_REFCURSOR
15:35:45 1245  ) AS
15:35:45 1246  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
15:35:45 1247  -- VARIABLES
15:35:45 1248  temp_invoice_id NUMBER;
15:35:45 1249  -- EXCEPTIONS
15:35:45 1250  BAD_INVOICE_ID EXCEPTION;
15:35:45 1251  BEGIN
15:35:45 1252  
15:35:45 1253  	 BEGIN
15:35:45 1254  	   SELECT
15:35:45 1255  	     INVOICE.ID into temp_invoice_id
15:35:45 1256  	   FROM
15:35:45 1257  	     INVOICE
15:35:45 1258  	   WHERE
15:35:45 1259  	     INVOICE.ID = in_invoice_id;
15:35:45 1260  	   EXCEPTION
15:35:45 1261  	     WHEN NO_DATA_FOUND THEN
15:35:45 1262  	       RAISE BAD_INVOICE_ID;
15:35:45 1263  	 END;
15:35:45 1264  
15:35:45 1265  	 OPEN out_result_set FOR
15:35:45 1266  	 SELECT
15:35:45 1267  	   LICENSE.ID,
15:35:45 1268  	   LICENSE.INVOICE_ID,
15:35:45 1269  	   LICENSE.CREATE_DATE,
15:35:45 1270  	   LICENSE.CREATED_BY,
15:35:45 1271  	   LICENSE.CURRENT_OFFER_INDEX,
15:35:45 1272  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
15:35:45 1273  	   LICENSE.END_DATE,
15:35:45 1274  	   LICENSE.ENTITLEMENT_END_DATE,
15:35:45 1275  	   LICENSE.IS_EXTENSION,
15:35:45 1276  	   LICENSE.LICENSE_STATUS_ID,
15:35:45 1277  	   LICENSE.NEEDS_ENTITLEMENTS,
15:35:45 1278  	   LICENSE.OFFER_ID,
15:35:45 1279  	   LICENSE.START_DATE,
15:35:45 1280  	   LICENSE.SUBSCRIPTION_ID,
15:35:45 1281  	   LICENSE.UPDATE_DATE,
15:35:45 1282  	   LICENSE.UPDATED_BY
15:35:45 1283  	 FROM
15:35:45 1284  	   LICENSE
15:35:45 1285  	 WHERE
15:35:45 1286  	   LICENSE.INVOICE_ID = in_invoice_id;
15:35:45 1287  
15:35:45 1288  EXCEPTION
15:35:45 1289  WHEN BAD_INVOICE_ID THEN
15:35:45 1290  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1291  	   SPROC_NAME, 'No such invoice');
15:35:45 1292  WHEN OTHERS THEN
15:35:45 1293  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1294  	   SPROC_NAME, 'Unknown error');
15:35:45 1295  END GET_INVOICE_LICENSES;
15:35:45 1296  
15:35:45 1297  /******************************************************************************/
15:35:45 1298  
15:35:45 1299  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
15:35:45 1300  	 in_invoice_id	    IN NUMBER,
15:35:45 1301  	 out_offer_chain_id OUT NUMBER
15:35:45 1302  ) AS
15:35:45 1303  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
15:35:45 1304  -- VARIABLES
15:35:45 1305  temp_invoice_id NUMBER;
15:35:45 1306  -- EXCEPTIONS
15:35:45 1307  BAD_INVOICE_ID EXCEPTION;
15:35:45 1308  BEGIN
15:35:45 1309  
15:35:45 1310  	 BEGIN
15:35:45 1311  	   SELECT
15:35:45 1312  	     INVOICE.ID into temp_invoice_id
15:35:45 1313  	   FROM
15:35:45 1314  	     INVOICE
15:35:45 1315  	   WHERE
15:35:45 1316  	     INVOICE.ID = in_invoice_id;
15:35:45 1317  	   EXCEPTION
15:35:45 1318  	     WHEN NO_DATA_FOUND THEN
15:35:45 1319  	       RAISE BAD_INVOICE_ID;
15:35:45 1320  	 END;
15:35:45 1321  
15:35:45 1322  	 BEGIN
15:35:45 1323  	   SELECT DISTINCT
15:35:45 1324  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
15:35:45 1325  	   FROM
15:35:45 1326  	     LICENSE
15:35:45 1327  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:45 1328  	   WHERE
15:35:45 1329  	     LICENSE.INVOICE_ID = in_invoice_id;
15:35:45 1330  	   EXCEPTION
15:35:45 1331  	     WHEN NO_DATA_FOUND THEN
15:35:45 1332  	       out_offer_chain_id := NULL;
15:35:45 1333  	 END;
15:35:45 1334  
15:35:45 1335  EXCEPTION
15:35:45 1336  WHEN BAD_INVOICE_ID THEN
15:35:45 1337  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1338  	   SPROC_NAME, 'No such invoice');
15:35:45 1339  WHEN OTHERS THEN
15:35:45 1340  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1341  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1342  END GET_OFFER_CH_ID_BY_INVOICE_ID;
15:35:45 1343  
15:35:45 1344  /******************************************************************************/
15:35:45 1345  
15:35:45 1346  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
15:35:45 1347  -- Closing invoice without refund
15:35:45 1348  	 in_invoice_id IN NUMBER,
15:35:45 1349  	 in_updated_by IN VARCHAR2
15:35:45 1350  ) AS
15:35:45 1351  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
15:35:45 1352  -- VARIABLES
15:35:45 1353  temp_invoice_id NUMBER;
15:35:45 1354  -- EXCEPTIONS
15:35:45 1355  BAD_INVOICE_ID EXCEPTION;
15:35:45 1356  BEGIN
15:35:45 1357  
15:35:45 1358  	 BEGIN
15:35:45 1359  	   SELECT
15:35:45 1360  	     INVOICE.ID into temp_invoice_id
15:35:45 1361  	   FROM
15:35:45 1362  	     INVOICE
15:35:45 1363  	   WHERE
15:35:45 1364  	     INVOICE.ID = in_invoice_id;
15:35:45 1365  	   EXCEPTION
15:35:45 1366  	     WHEN NO_DATA_FOUND THEN
15:35:45 1367  	       RAISE BAD_INVOICE_ID;
15:35:45 1368  	 END;
15:35:45 1369  
15:35:45 1370  	 -- Needs to close charges. No refund.
15:35:45 1371  	 FOR f_charge_to_close IN (
15:35:45 1372  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
15:35:45 1373  	 )
15:35:45 1374  	 LOOP
15:35:45 1375  	   PROCS_CHARGE_V17.UPDATE_CHARGE_STATUS(
15:35:45 1376  	     in_charge_id	 => f_charge_to_close.ID,
15:35:45 1377  	     in_updated_by	 => in_updated_by,
15:35:45 1378  	     in_charge_status_id => GLOBAL_STATUSES_V17.CHARGE_CANCELED
15:35:45 1379  	   );
15:35:45 1380  	 END LOOP;
15:35:45 1381  
15:35:45 1382  	 --FOR f_license_to_cancel IN (
15:35:45 1383  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V17.LICENSE_ACTIVE
15:35:45 1384  	 --)
15:35:45 1385  	 --LOOP
15:35:45 1386  	 --  PROCS_LICENSE_CRU_V17.UPDATE_LICENSE(
15:35:45 1387  	 --    in_license_id	     => f_license_to_cancel.ID,
15:35:45 1388  	 --    in_license_status_id  => GLOBAL_STATUSES_V17.LICENSE_CLOSED,
15:35:45 1389  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V17.FALSE,
15:35:45 1390  	 --    in_updated_by	     => in_updated_by
15:35:45 1391  	 --  );
15:35:45 1392  	 --END LOOP;
15:35:45 1393  
15:35:45 1394  	 PROCS_INVOICE_V17.UPDATE_INVOICE_STATUS(
15:35:45 1395  	   in_invoice_id		  => in_invoice_id,
15:35:45 1396  	   in_updated_by		  => in_updated_by,
15:35:45 1397  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V17.INVOICE_CLOSED
15:35:45 1398  	 );
15:35:45 1399  
15:35:45 1400  	 FOR f_transaction_to_close IN (
15:35:45 1401  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
15:35:45 1402  	 )
15:35:45 1403  	 LOOP
15:35:45 1404  	   PROCS_TRANSACTION_V17.UPDATE_TRANSACTION_STATUS(
15:35:45 1405  	     in_transaction_id	      => f_transaction_to_close.ID,
15:35:45 1406  	     in_updated_by	      => in_updated_by,
15:35:45 1407  	     in_transaction_status_id => GLOBAL_STATUSES_V17.TRANSACTION_CLOSED
15:35:45 1408  	   );
15:35:45 1409  	 END LOOP;
15:35:45 1410  
15:35:45 1411  EXCEPTION
15:35:45 1412  WHEN BAD_INVOICE_ID THEN
15:35:45 1413  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1414  	   SPROC_NAME, 'No such invoice');
15:35:45 1415  WHEN OTHERS THEN
15:35:45 1416  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1417  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1418  END CLOSE_INVOICE_AS_NOT_COLLECTED;
15:35:45 1419  
15:35:45 1420  /******************************************************************************/
15:35:45 1421  
15:35:45 1422  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
15:35:45 1423  	 in_invoice_id	     IN NUMBER,
15:35:45 1424  	 out_subscription_id OUT NUMBER
15:35:45 1425  ) AS
15:35:45 1426  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
15:35:45 1427  -- VARIABLES
15:35:45 1428  temp_invoice_id NUMBER;
15:35:45 1429  -- EXCEPTIONS
15:35:45 1430  BAD_INVOICE_ID		 EXCEPTION;
15:35:45 1431  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
15:35:45 1432  BEGIN
15:35:45 1433  
15:35:45 1434  	 BEGIN
15:35:45 1435  	   SELECT
15:35:45 1436  	     INVOICE.ID into temp_invoice_id
15:35:45 1437  	   FROM
15:35:45 1438  	     INVOICE
15:35:45 1439  	   WHERE
15:35:45 1440  	     INVOICE.ID = in_invoice_id;
15:35:45 1441  	   EXCEPTION
15:35:45 1442  	     WHEN NO_DATA_FOUND THEN
15:35:45 1443  	       RAISE BAD_INVOICE_ID;
15:35:45 1444  	 END;
15:35:45 1445  
15:35:45 1446  	 BEGIN
15:35:45 1447  	   SELECT DISTINCT
15:35:45 1448  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
15:35:45 1449  	   FROM
15:35:45 1450  	     LICENSE
15:35:45 1451  	   WHERE
15:35:45 1452  	     LICENSE.INVOICE_ID = in_invoice_id;
15:35:45 1453  	   EXCEPTION
15:35:45 1454  	     WHEN NO_DATA_FOUND THEN
15:35:45 1455  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
15:35:45 1456  	 END;
15:35:45 1457  
15:35:45 1458  EXCEPTION
15:35:45 1459  WHEN BAD_INVOICE_ID THEN
15:35:45 1460  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1461  	   SPROC_NAME, 'No such invoice');
15:35:45 1462  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
15:35:45 1463  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1464  	   SPROC_NAME, 'Could not find subscription for given invoice');
15:35:45 1465  WHEN OTHERS THEN
15:35:45 1466  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1468  END GET_SUBSCR_ID_BY_INVOICE_ID;
15:35:45 1469  
15:35:45 1470  /******************************************************************************/
15:35:45 1471  
15:35:45 1472  PROCEDURE IS_INVOICE_TAX_EXEMPT (
15:35:45 1473  /*
15:35:45 1474  Throws exceptions:
15:35:45 1475  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1476  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:45 1477  Return:
15:35:45 1478  	 GLOBAL_CONSTANTS_V17.TRUE if ACCOUNT.EXEMPT_ID is not null
15:35:45 1479  	 GLOBAL_CONSTANTS_V17.FALSE else
15:35:45 1480  */
15:35:45 1481  	 in_invoice_id	   IN NUMBER,
15:35:45 1482  	 out_is_tax_exempt OUT NUMBER
15:35:45 1483  ) AS
15:35:45 1484  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
15:35:45 1485  -- VARIABLES
15:35:45 1486  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
15:35:45 1487  -- EXCEPTIONS
15:35:45 1488  BAD_INVOICE_ID EXCEPTION;
15:35:45 1489  BEGIN
15:35:45 1490  
15:35:45 1491  	 BEGIN
15:35:45 1492  	   SELECT
15:35:45 1493  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
15:35:45 1494  	   FROM
15:35:45 1495  	     INVOICE
15:35:45 1496  	   WHERE
15:35:45 1497  	     INVOICE.ID = in_invoice_id;
15:35:45 1498  	   EXCEPTION
15:35:45 1499  	     WHEN NO_DATA_FOUND THEN
15:35:45 1500  	       RAISE BAD_INVOICE_ID;
15:35:45 1501  	 END;
15:35:45 1502  
15:35:45 1503  	 IF var_is_tax_exempt IS NULL THEN
15:35:45 1504  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V17.FALSE;
15:35:45 1505  	 ELSE
15:35:45 1506  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V17.TRUE;
15:35:45 1507  	 END IF;
15:35:45 1508  
15:35:45 1509  EXCEPTION
15:35:45 1510  WHEN BAD_INVOICE_ID THEN
15:35:45 1511  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1512  	   SPROC_NAME, 'No such invoice');
15:35:45 1513  WHEN OTHERS THEN
15:35:45 1514  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1515  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1516  END IS_INVOICE_TAX_EXEMPT;
15:35:45 1517  
15:35:45 1518  /******************************************************************************/
15:35:45 1519  
15:35:45 1520  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
15:35:45 1521  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
15:35:45 1522  	 out_result_set OUT SYS_REFCURSOR
15:35:45 1523  ) AS
15:35:45 1524  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
15:35:45 1525  -- VARIABLE
15:35:45 1526  temp_order_id TRANSACTION.ORDER_ID%TYPE;
15:35:45 1527  -- EXCEPTIONS
15:35:45 1528  BAD_ORDER_ID EXCEPTION;
15:35:45 1529  CAN_NOT_FIND_INVOICE EXCEPTION;
15:35:45 1530  BEGIN
15:35:45 1531  
15:35:45 1532  	 OPEN out_result_set FOR
15:35:45 1533  	   SELECT DISTINCT
15:35:45 1534  	     CHARGE.INVOICE_ID
15:35:45 1535  	   FROM
15:35:45 1536  	     CHARGE
15:35:45 1537  	   INNER JOIN
15:35:45 1538  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
15:35:45 1539  	   WHERE
15:35:45 1540  	     TRANSACTION.ORDER_ID = in_order_id;
15:35:45 1541  
15:35:45 1542  EXCEPTION
15:35:45 1543  WHEN BAD_ORDER_ID THEN
15:35:45 1544  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1545  	   SPROC_NAME, 'No such transaction');
15:35:45 1546  WHEN CAN_NOT_FIND_INVOICE THEN
15:35:45 1547  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1548  	   SPROC_NAME, 'Could not find invoice for given order id');
15:35:45 1549  WHEN OTHERS THEN
15:35:45 1550  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1551  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1552  END GET_INVOICE_BY_TRNS_ORDER_ID;
15:35:45 1553  
15:35:45 1554  /******************************************************************************/
15:35:45 1555  
15:35:45 1556  PROCEDURE GET_INVOICE_BY_ID (
15:35:45 1557  	 in_invoice_id	IN NUMBER,
15:35:45 1558  	 out_result_set OUT SYS_REFCURSOR
15:35:45 1559  ) AS
15:35:45 1560  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
15:35:45 1561  -- VARIABLE
15:35:45 1562  temp_invoice_id NUMBER;
15:35:45 1563  -- EXCEPTIONS
15:35:45 1564  BAD_INVOCIE_ID EXCEPTION;
15:35:45 1565  BEGIN
15:35:45 1566  
15:35:45 1567  	 BEGIN
15:35:45 1568  	   SELECT
15:35:45 1569  	     INVOICE.ID into temp_invoice_id
15:35:45 1570  	   FROM
15:35:45 1571  	     INVOICE
15:35:45 1572  	   WHERE
15:35:45 1573  	     INVOICE.ID = in_invoice_id;
15:35:45 1574  	   EXCEPTION
15:35:45 1575  	     WHEN NO_DATA_FOUND THEN
15:35:45 1576  	       RAISE BAD_INVOCIE_ID;
15:35:45 1577  	 END;
15:35:45 1578  
15:35:45 1579  	 OPEN out_result_set FOR
15:35:45 1580  	 SELECT
15:35:45 1581  	   INVOICE.ID,
15:35:45 1582  	   INVOICE.INVOICE_STATUS_ID,
15:35:45 1583  	   INVOICE.TAX_EXEMPT_ID,
15:35:45 1584  	   INVOICE.UPDATE_DATE,
15:35:45 1585  	   INVOICE.UPDATED_BY,
15:35:45 1586  	   INVOICE.CREATE_DATE,
15:35:45 1587  	   INVOICE.CREATED_BY
15:35:45 1588  	 FROM
15:35:45 1589  	   INVOICE
15:35:45 1590  	 WHERE
15:35:45 1591  	   INVOICE.ID = in_invoice_id;
15:35:45 1592  
15:35:45 1593  EXCEPTION
15:35:45 1594  WHEN BAD_INVOCIE_ID THEN
15:35:45 1595  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1596  	   SPROC_NAME, 'No such invoice');
15:35:45 1597  WHEN OTHERS THEN
15:35:45 1598  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1599  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1600  END GET_INVOICE_BY_ID;
15:35:45 1601  
15:35:45 1602  /******************************************************************************/
15:35:45 1603  
15:35:45 1604  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
15:35:45 1605  	 in_invoice_id		       IN NUMBER,
15:35:45 1606  	 out_is_tax_calculation_needed OUT NUMBER
15:35:45 1607  ) AS
15:35:45 1608  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
15:35:45 1609  BEGIN
15:35:45 1610  
15:35:45 1611  	 SELECT
15:35:45 1612  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
15:35:45 1613  	 FROM
15:35:45 1614  	   INVOICE I
15:35:45 1615  	 WHERE
15:35:45 1616  	   I.ID = in_invoice_id;
15:35:45 1617  
15:35:45 1618  EXCEPTION
15:35:45 1619  WHEN NO_DATA_FOUND THEN
15:35:45 1620  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1621  	   SPROC_NAME, 'No such invoice');
15:35:45 1622  WHEN OTHERS THEN
15:35:45 1623  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1624  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1625  END GET_IS_TAX_CALCULATION_NEEDED;
15:35:45 1626  
15:35:45 1627  /******************************************************************************/
15:35:45 1628  
15:35:45 1629  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
15:35:45 1630  	 in_invoice_id		      IN NUMBER,
15:35:45 1631  	 in_updated_by		      IN VARCHAR2,
15:35:45 1632  	 in_is_tax_calculation_needed IN NUMBER
15:35:45 1633  ) AS
15:35:45 1634  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
15:35:45 1635  -- VARIABLES
15:35:45 1636  temp_invoice_id	      NUMBER;
15:35:45 1637  -- EXCEPTIONS
15:35:45 1638  BAD_INVOICE_ID	      EXCEPTION;
15:35:45 1639  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
15:35:45 1640  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:45 1641  BEGIN
15:35:45 1642  
15:35:45 1643  	 BEGIN
15:35:45 1644  	   SELECT
15:35:45 1645  	     i.id into temp_invoice_id
15:35:45 1646  	   FROM
15:35:45 1647  	     invoice i
15:35:45 1648  	   WHERE
15:35:45 1649  	     i.id = in_invoice_id;
15:35:45 1650  	   EXCEPTION
15:35:45 1651  	     WHEN NO_DATA_FOUND THEN
15:35:45 1652  	       RAISE BAD_INVOICE_ID;
15:35:45 1653  	 END;
15:35:45 1654  
15:35:45 1655  	 BEGIN
15:35:45 1656  	   PROCS_INVOICE_CRU_V17.UPDATE_INVOICE(
15:35:45 1657  	     in_invoice_id => in_invoice_id,
15:35:45 1658  	     in_updated_by => in_updated_by,
15:35:45 1659  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
15:35:45 1660  	   );
15:35:45 1661  	   EXCEPTION
15:35:45 1662  	     WHEN OTHERS THEN
15:35:45 1663  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1664  	       RAISE CAN_NOT_UPDATE_INVOCIE;
15:35:45 1665  	 END;
15:35:45 1666  
15:35:45 1667  EXCEPTION
15:35:45 1668  WHEN BAD_INVOICE_ID THEN
15:35:45 1669  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1670  	   SPROC_NAME, 'No such invoice');
15:35:45 1671  WHEN CAN_NOT_UPDATE_INVOCIE THEN
15:35:45 1672  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1673  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
15:35:45 1674  WHEN OTHERS THEN
15:35:45 1675  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1676  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1677  END SET_IS_TAX_CALCULATION_NEEDED;
15:35:45 1678  
15:35:45 1679  /******************************************************************************/
15:35:45 1680  
15:35:45 1681  PROCEDURE REFUND_INVOICE (
15:35:45 1682  	 in_invoice_id	    IN NUMBER,
15:35:45 1683  	 in_refund_amount   IN NUMBER,
15:35:45 1684  	 in_note	    IN VARCHAR2,
15:35:45 1685  	 in_created_by	    IN VARCHAR2,
15:35:45 1686  	 out_charge_id	    OUT NUMBER
15:35:45 1687  ) AS
15:35:45 1688  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
15:35:45 1689  -- VARIABLES
15:35:45 1690  var_invoice_status_id  NUMBER;
15:35:45 1691  var_subscription_id    NUMBER;
15:35:45 1692  var_account_id	      NUMBER;
15:35:45 1693  var_group_id	      NUMBER;
15:35:45 1694  var_account_status_id  NUMBER;
15:35:45 1695  var_new_transaction_id NUMBER;
15:35:45 1696  var_instrument_type_id NUMBER;
15:35:45 1697  var_instrument_id      NUMBER;
15:35:45 1698  var_new_charge_id      NUMBER;
15:35:45 1699  var_invoice_amount     NUMBER(10,2);
15:35:45 1700  var_refunds_before     NUMBER(10,2);
15:35:45 1701  var_charges_amount     NUMBER(10,2);
15:35:45 1702  -- EXCEPTIONS
15:35:45 1703  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
15:35:45 1704  ACCOUNT_IS_FROZEN	     EXCEPTION;
15:35:45 1705  BAD_INVOICE_ID		     EXCEPTION;
15:35:45 1706  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
15:35:45 1707  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
15:35:45 1708  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
15:35:45 1709  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
15:35:45 1710  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
15:35:45 1711  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
15:35:45 1712  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
15:35:45 1713  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
15:35:45 1714  EXCEPTION_MESSAGE	      VARCHAR2(1024);
15:35:45 1715  BEGIN
15:35:45 1716  
15:35:45 1717  	 BEGIN
15:35:45 1718  	   SELECT
15:35:45 1719  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
15:35:45 1720  	   FROM
15:35:45 1721  	     INVOICE
15:35:45 1722  	   WHERE
15:35:45 1723  	     INVOICE.ID = in_invoice_id;
15:35:45 1724  	   EXCEPTION
15:35:45 1725  	     WHEN NO_DATA_FOUND THEN
15:35:45 1726  	       RAISE BAD_INVOICE_ID;
15:35:45 1727  	 END;
15:35:45 1728  
15:35:45 1729  	 -- Get instrument and subscription id if exists
15:35:45 1730  	 BEGIN
15:35:45 1731  	   SELECT
15:35:45 1732  	     SUBSCRIPTION.INSTRUMENT_ID,
15:35:45 1733  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
15:35:45 1734  	     SUBSCRIPTION.ACCOUNT_ID,
15:35:45 1735  	     SUBSCRIPTION.ID
15:35:45 1736  	     into
15:35:45 1737  	     var_instrument_id,
15:35:45 1738  	     var_instrument_type_id,
15:35:45 1739  	     var_account_id,
15:35:45 1740  	     var_subscription_id
15:35:45 1741  	   FROM
15:35:45 1742  	     SUBSCRIPTION
15:35:45 1743  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
15:35:45 1744  	   WHERE
15:35:45 1745  	     LICENSE.INVOICE_ID = in_invoice_id
15:35:45 1746  	     AND ROWNUM <= 1;
15:35:45 1747  	   EXCEPTION
15:35:45 1748  	     WHEN NO_DATA_FOUND THEN
15:35:45 1749  	       BEGIN
15:35:45 1750  
15:35:45 1751  		 var_subscription_id := NULL;
15:35:45 1752  
15:35:45 1753  		 SELECT
15:35:45 1754  		   CHARGE.INSTRUMENT_ID,
15:35:45 1755  		   CHARGE.INSTRUMENT_TYPE_ID,
15:35:45 1756  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
15:35:45 1757  		   into
15:35:45 1758  		   var_instrument_id,
15:35:45 1759  		   var_instrument_type_id,
15:35:45 1760  		   var_group_id
15:35:45 1761  		 FROM
15:35:45 1762  		   INVOICE
15:35:45 1763  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
15:35:45 1764  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
15:35:45 1765  		 WHERE
15:35:45 1766  		   INVOICE.ID = in_invoice_id
15:35:45 1767  		   AND ROWNUM <= 1;
15:35:45 1768  
15:35:45 1769  		 SELECT
15:35:45 1770  		   ACCOUNT.ID into var_account_id
15:35:45 1771  		 FROM
15:35:45 1772  		   ACCOUNT
15:35:45 1773  		 WHERE
15:35:45 1774  		   ACCOUNT.GROUP_ID = var_group_id;
15:35:45 1775  
15:35:45 1776  		 EXCEPTION
15:35:45 1777  		   WHEN NO_DATA_FOUND THEN
15:35:45 1778  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
15:35:45 1779  	       END;
15:35:45 1780  	 END;
15:35:45 1781  
15:35:45 1782  	 -- Check account status. It should not to be frozen
15:35:45 1783  	 SELECT
15:35:45 1784  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
15:35:45 1785  	 FROM
15:35:45 1786  	   ACCOUNT
15:35:45 1787  	 WHERE
15:35:45 1788  	   ACCOUNT.ID = var_account_id;
15:35:45 1789  
15:35:45 1790  	 IF var_account_status_id = GLOBAL_STATUSES_V17.ACCOUNT_FROZEN THEN
15:35:45 1791  	   RAISE ACCOUNT_IS_FROZEN;
15:35:45 1792  	 END IF;
15:35:45 1793  
15:35:45 1794  	 IF var_invoice_status_id != GLOBAL_STATUSES_V17.INVOICE_CLOSED THEN
15:35:45 1795  	   RAISE INVOICE_IS_NOT_CLOSED;
15:35:45 1796  	 END IF;
15:35:45 1797  
15:35:45 1798  	 BEGIN
15:35:45 1799  	   PROCS_INVOICE_V17.CALCULATE_INVOICE_AMOUNT (
15:35:45 1800  	     in_invoice_id => in_invoice_id,
15:35:45 1801  	     out_amount    => var_invoice_amount
15:35:45 1802  	   );
15:35:45 1803  	   EXCEPTION
15:35:45 1804  	     WHEN OTHERS THEN
15:35:45 1805  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1806  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:35:45 1807  	 END;
15:35:45 1808  
15:35:45 1809  	 IF ( in_refund_amount > var_invoice_amount ) THEN
15:35:45 1810  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
15:35:45 1811  	 END IF;
15:35:45 1812  
15:35:45 1813  	 SELECT /*+ STAR_TRANSFORMATION */
15:35:45 1814  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
15:35:45 1815  	 FROM
15:35:45 1816  	   CHARGE
15:35:45 1817  	 WHERE
15:35:45 1818  	   CHARGE.INVOICE_ID = in_invoice_id
15:35:45 1819  	   AND (
15:35:45 1820  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_OPENED
15:35:45 1821  	     OR (
15:35:45 1822  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V17.CHARGE_PROCESSED
15:35:45 1823  	       AND EXISTS (
15:35:45 1824  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS
15:35:45 1825  	       )
15:35:45 1826  	     )
15:35:45 1827  	   )
15:35:45 1828  	   AND CHARGE.CHARGE_AMOUNT < 0;
15:35:45 1829  
15:35:45 1830  	 -- Refunds are negative
15:35:45 1831  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
15:35:45 1832  	 var_refunds_before := 0 - var_refunds_before;
15:35:45 1833  
15:35:45 1834  	 var_charges_amount := 0;
15:35:45 1835  
15:35:45 1836  	 FOR f_processed_charges IN (
15:35:45 1837  	   SELECT
15:35:45 1838  	     CHARGE.CHARGE_AMOUNT
15:35:45 1839  	   FROM
15:35:45 1840  	     CHARGE
15:35:45 1841  	   WHERE
15:35:45 1842  	     CHARGE.INVOICE_ID = in_invoice_id
15:35:45 1843  	     AND CHARGE.CHARGE_AMOUNT > 0
15:35:45 1844  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V17.CHARGE_PROCESSED FROM DUAL)
15:35:45 1845  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS)
15:35:45 1846  	 )
15:35:45 1847  	 LOOP
15:35:45 1848  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
15:35:45 1849  	 END LOOP;
15:35:45 1850  
15:35:45 1851  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
15:35:45 1852  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
15:35:45 1853  	 END IF;
15:35:45 1854  
15:35:45 1855  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
15:35:45 1856  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
15:35:45 1857  	 END IF;
15:35:45 1858  
15:35:45 1859  	 BEGIN
15:35:45 1860  	   PROCS_TRANSACTION_V17.CREATE_TRANSACTION(
15:35:45 1861  	     in_transaction_id	=> NULL,
15:35:45 1862  	     in_status_id	=> GLOBAL_STATUSES_V17.TRANSACTION_PREPARE,
15:35:45 1863  	     in_amount		=> -in_refund_amount,
15:35:45 1864  	     in_created_by	=> in_created_by,
15:35:45 1865  	     in_order_id	=> NULL,
15:35:45 1866  	     in_is_refund	=> GLOBAL_CONSTANTS_V17.TRUE,
15:35:45 1867  	     out_transaction_id => var_new_transaction_id
15:35:45 1868  	   );
15:35:45 1869  	   EXCEPTION
15:35:45 1870  	     WHEN OTHERS THEN
15:35:45 1871  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1872  	       RAISE CAN_NOT_CREATE_TRANSACTION;
15:35:45 1873  	 END;
15:35:45 1874  
15:35:45 1875  	 BEGIN
15:35:45 1876  	   PROCS_CHARGE_V17.CREATE_CHARGE(
15:35:45 1877  	     in_invoice_id	   => in_invoice_id,
15:35:45 1878  	     in_transaction_id	   => var_new_transaction_id,
15:35:45 1879  	     in_instrument_type_id => var_instrument_type_id,
15:35:45 1880  	     in_instrument_id	   => var_instrument_id,
15:35:45 1881  	     in_charge_amount	   => -in_refund_amount,
15:35:45 1882  	     in_created_by	   => in_created_by,
15:35:45 1883  	     in_charge_status_id   => GLOBAL_STATUSES_V17.CHARGE_OPENED,
15:35:45 1884  	     out_charge_id	   => var_new_charge_id
15:35:45 1885  	   );
15:35:45 1886  	   EXCEPTION
15:35:45 1887  	     WHEN OTHERS THEN
15:35:45 1888  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1889  	       RAISE CAN_NOT_CREATE_CHARGE;
15:35:45 1890  	 END;
15:35:45 1891  
15:35:45 1892  	 out_charge_id := var_new_charge_id;
15:35:45 1893  
15:35:45 1894  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
15:35:45 1895  	   BEGIN
15:35:45 1896  	     PROCS_SUBSCRIPTION_V17.ANNOTATE_SUBSCRIPTION(
15:35:45 1897  	       in_subscription_id => var_subscription_id,
15:35:45 1898  	       in_agent_id	  => 0, -- AGENT_ID??
15:35:45 1899  	       in_note		  => in_note,
15:35:45 1900  	       in_created_by	  => in_created_by
15:35:45 1901  	     );
15:35:45 1902  	     EXCEPTION
15:35:45 1903  	       WHEN OTHERS THEN
15:35:45 1904  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:45 1905  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
15:35:45 1906  	   END;
15:35:45 1907  	 END IF;
15:35:45 1908  
15:35:45 1909  EXCEPTION
15:35:45 1910  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
15:35:45 1911  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1912  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
15:35:45 1913  WHEN INVOICE_IS_NOT_CLOSED THEN
15:35:45 1914  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 1915  	   SPROC_NAME, 'Invoice is not closed');
15:35:45 1916  WHEN ACCOUNT_IS_FROZEN THEN
15:35:45 1917  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:45 1918  	   SPROC_NAME, 'Could not refund subscription for frozen account');
15:35:45 1919  WHEN BAD_INVOICE_ID THEN
15:35:45 1920  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 1921  	   SPROC_NAME, 'No such invoice');
15:35:45 1922  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:35:45 1923  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1924  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
15:35:45 1925  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
15:35:45 1926  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1927  	   SPROC_NAME, 'Refund is greater than amount');
15:35:45 1928  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
15:35:45 1929  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1930  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
15:35:45 1931  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
15:35:45 1932  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:45 1933  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
15:35:45 1934  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:35:45 1935  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1936  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:35:45 1937  WHEN CAN_NOT_CREATE_CHARGE THEN
15:35:45 1938  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1939  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:35:45 1940  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
15:35:45 1941  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:45 1942  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:35:45 1943  WHEN OTHERS THEN
15:35:45 1944  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 1945  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 1946  END REFUND_INVOICE;
15:35:45 1947  
15:35:45 1948  /******************************************************************************/
15:35:45 1949  
15:35:45 1950  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
15:35:45 1951  	 in_invoice_id		     IN NUMBER,
15:35:45 1952  	 out_order_id		     OUT VARCHAR2,
15:35:45 1953  	 out_external_transaction_id OUT VARCHAR2
15:35:45 1954  ) AS
15:35:45 1955  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
15:35:45 1956  -- VARIABLES
15:35:45 1957  temp_invoice_id number;
15:35:45 1958  cnt_matched_instr number := 0;
15:35:45 1959  -- EXCEPTIONS
15:35:45 1960  BAD_INVOICE_ID EXCEPTION;
15:35:45 1961  BEGIN
15:35:45 1962  
15:35:45 1963  	 BEGIN
15:35:45 1964  	   SELECT
15:35:45 1965  	     i.id into temp_invoice_id
15:35:45 1966  	   from
15:35:45 1967  	     invoice i
15:35:45 1968  	   where
15:35:45 1969  	     i.id = in_invoice_id;
15:35:45 1970  	   EXCEPTION
15:35:45 1971  	     WHEN NO_DATA_FOUND THEN
15:35:45 1972  	       RAISE BAD_INVOICE_ID;
15:35:45 1973  	 END;
15:35:45 1974  
15:35:45 1975  	 select
15:35:45 1976  	   count(1) into cnt_matched_instr
15:35:45 1977  	 from
15:35:45 1978  	   charge ch
15:35:45 1979  	 inner join
15:35:45 1980  	   subscription s
15:35:45 1981  	 on
15:35:45 1982  	   s.instrument_id = ch.instrument_id
15:35:45 1983  	 where
15:35:45 1984  	   ch.invoice_id = in_invoice_id;
15:35:45 1985  
15:35:45 1986  	 if cnt_matched_instr = 0 then
15:35:45 1987  	   out_external_transaction_id := null;
15:35:45 1988  	   out_order_id := null;
15:35:45 1989  	   return;
15:35:45 1990  	 end if;
15:35:45 1991  
15:35:45 1992  	 SELECT
15:35:45 1993  	   t.order_id,
15:35:45 1994  	   ta.external_transaction_id
15:35:45 1995  	   into
15:35:45 1996  	   out_order_id,
15:35:45 1997  	   out_external_transaction_id
15:35:45 1998  	 from
15:35:45 1999  	   charge ch
15:35:45 2000  	   inner join transaction t on ch.transaction_id = t.id
15:35:45 2001  	   inner join transaction_attempt ta on ta.transaction_id = t.id
15:35:45 2002  	 where
15:35:45 2003  	   ch.invoice_id = in_invoice_id
15:35:45 2004  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS
15:35:45 2005  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
15:35:45 2006  
15:35:45 2007  EXCEPTION
15:35:45 2008  WHEN BAD_INVOICE_ID THEN
15:35:45 2009  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2010  	   SPROC_NAME, 'No such invoice');
15:35:45 2011  WHEN NO_DATA_FOUND THEN
15:35:45 2012  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:45 2013  	   SPROC_NAME, 'No payment data found');
15:35:45 2014  WHEN OTHERS THEN
15:35:45 2015  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:45 2016  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:45 2017  END GET_PAYMENT_INFO_BY_INVOICE_ID;
15:35:45 2018  
15:35:45 2019  PROCEDURE IS_REVOKE_ENTITLEMENTS(
15:35:45 2020  	 in_invoice_id IN NUMBER,
15:35:45 2021  	 out_is_revoke OUT NUMBER
15:35:45 2022  ) AS
15:35:45 2023  BEGIN
15:35:45 2024  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V17.FALSE, GLOBAL_CONSTANTS_V17.TRUE)
15:35:45 2025  	   into out_is_revoke
15:35:45 2026  	 FROM
15:35:45 2027  	   offer_chain oc,
15:35:45 2028  	   subscription s,
15:35:45 2029  	   license l,
15:35:45 2030  	   invoice i
15:35:45 2031  	 where
15:35:45 2032  	   oc.id = s.offer_chain_id and
15:35:45 2033  	   s.id = l.subscription_id and
15:35:45 2034  	   l.invoice_id = i.id and
15:35:45 2035  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V17.TRUE and
15:35:45 2036  	   i.id = in_invoice_id and
15:35:45 2037  	   rownum < 2
15:35:45 2038  	 ;
15:35:45 2039  END IS_REVOKE_ENTITLEMENTS;
15:35:45 2040  
15:35:45 2041  END PROCS_INVOICE_V17;
15:35:45 2042  .
15:35:45 SQL> /

Package body created.

Elapsed: 00:00:00.13
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
15:35:46   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:46   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
15:35:46   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
15:35:46   7  AS
15:35:46   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
15:35:46   9  BEGIN
15:35:46  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
15:35:46  11  	  PROCS_FIN_INSTRUMENTS_CRU_V17.UPDATE_GIFT_CERTIFICATE (
15:35:46  12  	    in_gift_certificate_id	  => rec.Id,
15:35:46  13  	    in_gift_certificate_status_id => in_status_id,
15:35:46  14  	    in_updated_by		  => in_updater
15:35:46  15  	  );
15:35:46  16  	END LOOP;
15:35:46  17  END UPDATE_GC_STATUS_BY_INVOICE;
15:35:46  18  
15:35:46  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
15:35:46  20  	in_invoice_id		     IN NUMBER,
15:35:46  21  	out_is_invoice_for_redeem_gc OUT NUMBER
15:35:46  22  ) AS
15:35:46  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
15:35:46  24  var_is_for_gc NUMBER;
15:35:46  25  BEGIN
15:35:46  26  	SELECT
15:35:46  27  	  count(1) into var_is_for_gc
15:35:46  28  	FROM GIFT_CERTIFICATE GC
15:35:46  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
15:35:46  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
15:35:46  31  
15:35:46  32  	IF var_is_for_gc > 0 THEN
15:35:46  33  	  out_is_invoice_for_redeem_gc := 1;
15:35:46  34  	ELSE
15:35:46  35  	  out_is_invoice_for_redeem_gc := 0;
15:35:46  36  	END IF;
15:35:46  37  END IS_INVOICE_FOR_REDEEMED_GC;
15:35:46  38  
15:35:46  39  PROCEDURE GET_UNREDEEMED_GCS (
15:35:46  40  	out_result_set		OUT SYS_REFCURSOR,
15:35:46  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:35:46  42  	in_num_rows		IN NUMBER DEFAULT 10000,
15:35:46  43  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:46  44  ) AS
15:35:46  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
15:35:46  46  BEGIN
15:35:46  47  	OPEN out_result_set FOR
15:35:46  48  SELECT * FROM
15:35:46  49  (
15:35:46  50  	SELECT
15:35:46  51  	  gc.EXPIRATION_DATE,
15:35:46  52  	  ch.name,
15:35:46  53  	  ch.id offer_chain_id,
15:35:46  54  	  gc.sender_email,
15:35:46  55  	  gc.sender_name,
15:35:46  56  	  gc.recipient_email,
15:35:46  57  	  gc.recipient_name,
15:35:46  58  	  gc.purchase_date,
15:35:46  59  	  gc.redemption_date,
15:35:46  60  	  gc.purchaser_group_id,
15:35:46  61  	  gc.redeemer_group_id,
15:35:46  62  	  gc.code,
15:35:46  63  	  gc.gift_message,
15:35:46  64  	  gc.recipient_notify_date,
15:35:46  65  	  gc.id
15:35:46  66  	FROM
15:35:46  67  	  GIFT_CERTIFICATE gc,
15:35:46  68  	  OFFER_CHAIN ch
15:35:46  69  	WHERE
15:35:46  70  	  ch.id = gc.offer_chain_id
15:35:46  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
15:35:46  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
15:35:46  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
15:35:46  74  	  AND gc.redeemer_group_id is null
15:35:46  75  	  AND NOT EXISTS(
15:35:46  76  	    SELECT NULL
15:35:46  77  	    FROM PROCESS_RETRY_THROTTLE
15:35:46  78  	    WHERE PROCESS_NAME = in_process_name
15:35:46  79  	      AND GENERIC_ID = gc.id
15:35:46  80  	  ) AND EXISTS(
15:35:46  81  	    SELECT NULL
15:35:46  82  	    FROM
15:35:46  83  	      charge c,
15:35:46  84  	      transaction_attempt ta,
15:35:46  85  	      transaction t
15:35:46  86  	    WHERE
15:35:46  87  	      c.invoice_id = gc.purchase_invoice_id and
15:35:46  88  	      c.transaction_id = t.id and
15:35:46  89  	      t.id = ta.transaction_id and
15:35:46  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS
15:35:46  91  	  ) AND NOT EXISTS (
15:35:46  92  	    SELECT NULL
15:35:46  93  	    FROM
15:35:46  94  	      charge c,
15:35:46  95  	      transaction t
15:35:46  96  	    WHERE
15:35:46  97  	      c.invoice_id = gc.purchase_invoice_id and
15:35:46  98  	      c.transaction_id = t.id and
15:35:46  99  	      t.is_refund = GLOBAL_CONSTANTS_V17.TRUE
15:35:46 100  	  )
15:35:46 101  	  AND ROWNUM <= in_num_rows*10
15:35:46 102  	  ORDER BY dbms_random.value
15:35:46 103  ) WHERE
15:35:46 104  	  ROWNUM <= in_num_rows;
15:35:46 105  EXCEPTION
15:35:46 106  WHEN OTHERS THEN
15:35:46 107  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 109  END GET_UNREDEEMED_GCS;
15:35:46 110  
15:35:46 111  PROCEDURE ADD_CREDIT_CARD (
15:35:46 112  /*
15:35:46 113  Throws exceptions:
15:35:46 114  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 115  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 116  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:46 117  */
15:35:46 118  	in_group_id		  IN NUMBER,
15:35:46 119  	in_updated_by		  IN VARCHAR2,
15:35:46 120  	in_instrument_name	  IN VARCHAR2,
15:35:46 121  	in_card_holder_name	  IN VARCHAR2,
15:35:46 122  	in_street_address	  IN VARCHAR2,
15:35:46 123  	in_street_address2	  IN VARCHAR2,
15:35:46 124  	in_state		  IN VARCHAR2,
15:35:46 125  	in_city 		  IN VARCHAR2,
15:35:46 126  	in_postal_code		  IN VARCHAR2,
15:35:46 127  	in_country		  IN CHAR,
15:35:46 128  	in_last_four_cc 	  IN VARCHAR2,
15:35:46 129  	in_expiration_date	  IN DATE,
15:35:46 130  	in_credit_card_type_id	  IN NUMBER,
15:35:46 131  	in_token		  IN VARCHAR2,
15:35:46 132  	in_chase_profile_id	  IN VARCHAR2,
15:35:46 133  	in_credit_card_status_id  IN NUMBER,
15:35:46 134  	in_private_first_name	  IN VARCHAR2,
15:35:46 135  	in_private_last_name	  IN VARCHAR2,
15:35:46 136  	out_credit_card_id	  OUT NUMBER
15:35:46 137  ) AS
15:35:46 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
15:35:46 139  -- VARIABLES
15:35:46 140  var_account_id	      NUMBER;
15:35:46 141  var_account_status      NUMBER;
15:35:46 142  var_credit_card_id      NUMBER;
15:35:46 143  temp_old_credit_card_id NUMBER;
15:35:46 144  -- EXCEPTIONS
15:35:46 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
15:35:46 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
15:35:46 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
15:35:46 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
15:35:46 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:35:46 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
15:35:46 151  var_charges_set		SYS_REFCURSOR;
15:35:46 152  var_charge_id		NUMBER;
15:35:46 153  var_charge_invoice_id	NUMBER;
15:35:46 154  var_charge_transaction_id NUMBER;
15:35:46 155  var_charge_amount 	NUMBER(10,2);
15:35:46 156  temp_out_charge_id	NUMBER;
15:35:46 157  temp_out_transaction_id	NUMBER;
15:35:46 158  var_order_id			VARCHAR2(1024);
15:35:46 159  BEGIN
15:35:46 160  
15:35:46 161  	-- Get account id
15:35:46 162  	-- Get account status
15:35:46 163  	SELECT
15:35:46 164  	  ACCOUNT.ID,
15:35:46 165  	  ACCOUNT.ACCOUNT_STATUS_ID
15:35:46 166  	  into
15:35:46 167  	  var_account_id,
15:35:46 168  	  var_account_status
15:35:46 169  	FROM
15:35:46 170  	  ACCOUNT
15:35:46 171  	WHERE
15:35:46 172  	  ACCOUNT.GROUP_ID = in_group_id;
15:35:46 173  
15:35:46 174  	SELECT
15:35:46 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
15:35:46 176  	FROM DUAL;
15:35:46 177  
15:35:46 178  	-- Insert new row in CREDIT_CARD table
15:35:46 179  	PROCS_FIN_INSTRUMENTS_CRU_V17.CREATE_CREDIT_CARD(
15:35:46 180  	  out_credit_card_id	      => var_credit_card_id,
15:35:46 181  	  in_account_id 	      => var_account_id,
15:35:46 182  	  in_instrument_name	      => in_instrument_name,
15:35:46 183  	  in_private_card_holder_name => in_card_holder_name,
15:35:46 184  	  in_private_street_address   => in_street_address,
15:35:46 185  	  in_private_street_address2  => in_street_address2,
15:35:46 186  	  in_state		      => in_state,
15:35:46 187  	  in_city		      => in_city,
15:35:46 188  	  in_postal_code	      => in_postal_code,
15:35:46 189  	  in_country		      => in_country,
15:35:46 190  	  in_last_four_cc	      => in_last_four_cc,
15:35:46 191  	  in_expiration_date	      => in_expiration_date,
15:35:46 192  	  in_credit_card_type_id      => in_credit_card_type_id,
15:35:46 193  	  in_secret_token	      => in_token,
15:35:46 194  	  in_chase_profile_id	      => in_chase_profile_id,
15:35:46 195  	  in_created_by 	      => in_updated_by,
15:35:46 196  	  in_credit_card_status_id    => in_credit_card_status_id,
15:35:46 197  	  in_private_first_name       => in_private_first_name,
15:35:46 198  	  in_private_last_name	      => in_private_last_name
15:35:46 199  	);
15:35:46 200  
15:35:46 201  	out_credit_card_id := var_credit_card_id;
15:35:46 202  
15:35:46 203  EXCEPTION
15:35:46 204  WHEN NO_DATA_FOUND THEN
15:35:46 205  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 206  	  SPROC_NAME, 'No such account');
15:35:46 207  WHEN BAD_OLD_CREDIT_CARD THEN
15:35:46 208  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 209  	  SPROC_NAME, 'Bad old credit card id');
15:35:46 210  WHEN BAD_IS_DEFAULT_VALUE THEN
15:35:46 211  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 212  	  SPROC_NAME, 'Bad is_default value');
15:35:46 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
15:35:46 214  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
15:35:46 216  WHEN BAD_ACCOUNT_STATUS THEN
15:35:46 217  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 218  	  SPROC_NAME, 'Account is not active');
15:35:46 219  WHEN OTHERS THEN
15:35:46 220  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 222  END ADD_CREDIT_CARD;
15:35:46 223  
15:35:46 224  /******************************************************************************/
15:35:46 225  
15:35:46 226  PROCEDURE ADD_PAYPAL (
15:35:46 227  /*
15:35:46 228  Throws exceptions:
15:35:46 229  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 230  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 231  */
15:35:46 232  	in_group_id			IN NUMBER,
15:35:46 233  	in_instrument_name		IN VARCHAR2,
15:35:46 234  	in_private_email_address	IN VARCHAR2,
15:35:46 235  	in_created_by			IN VARCHAR2,
15:35:46 236  	in_paypal_status_id		IN NUMBER,
15:35:46 237  	in_paypal_prvt_street_address	IN VARCHAR2,
15:35:46 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
15:35:46 239  	in_state			IN VARCHAR2,
15:35:46 240  	in_city 			IN VARCHAR2,
15:35:46 241  	in_postal_code			IN VARCHAR2,
15:35:46 242  	in_country			IN CHAR,
15:35:46 243  	in_expiration_date		IN DATE,
15:35:46 244  	in_secret_token 		IN VARCHAR2,
15:35:46 245  	out_paypal_id			OUT NUMBER
15:35:46 246  ) AS
15:35:46 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
15:35:46 248  var_paypal_id NUMBER;
15:35:46 249  var_account_id  NUMBER;
15:35:46 250  -- EXCEPTIONS
15:35:46 251  BAD_GROUP_ID	    EXCEPTION;
15:35:46 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
15:35:46 253  BAD_PAYPAL_STATUS     EXCEPTION;
15:35:46 254  EXCEPTION_MESSAGE VARCHAR2(1024);
15:35:46 255  BEGIN
15:35:46 256  
15:35:46 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V17.PAYPAL_ACTIVE
15:35:46 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V17.PAYPAL_INACTIVE
15:35:46 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V17.PAYPAL_FROZEN THEN
15:35:46 260  	  RAISE BAD_PAYPAL_STATUS;
15:35:46 261  	END IF;
15:35:46 262  
15:35:46 263  	BEGIN
15:35:46 264  	  SELECT
15:35:46 265  	    a.id into var_account_id
15:35:46 266  	  from
15:35:46 267  	    account a
15:35:46 268  	  where
15:35:46 269  	    a.group_id = in_group_id;
15:35:46 270  	  EXCEPTION
15:35:46 271  	    WHEN NO_DATA_FOUND THEN
15:35:46 272  	      RAISE BAD_GROUP_ID;
15:35:46 273  	END;
15:35:46 274  
15:35:46 275  	BEGIN
15:35:46 276  	  PROCS_FIN_INSTRUMENTS_CRU_V17.CREATE_PAYPAL(
15:35:46 277  	    out_paypal_id		   => var_paypal_id,
15:35:46 278  	    in_paypal_id		   => NULL,
15:35:46 279  	    in_account_id		   => var_account_id,
15:35:46 280  	    in_instrument_name		   => in_instrument_name,
15:35:46 281  	    in_private_email_address	   => in_private_email_address,
15:35:46 282  	    in_created_by		   => in_created_by,
15:35:46 283  	    in_paypal_status_id 	   => in_paypal_status_id,
15:35:46 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
15:35:46 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
15:35:46 286  	    in_state			   => in_state,
15:35:46 287  	    in_city			   => in_city,
15:35:46 288  	    in_postal_code		   => in_postal_code,
15:35:46 289  	    in_country			   => in_country,
15:35:46 290  	    in_expiration_date		   => in_expiration_date,
15:35:46 291  	    in_secret_token		   => in_secret_token
15:35:46 292  	  );
15:35:46 293  	  EXCEPTION
15:35:46 294  	    WHEN OTHERS THEN
15:35:46 295  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
15:35:46 297  	END;
15:35:46 298  
15:35:46 299  	out_paypal_id := var_paypal_id;
15:35:46 300  
15:35:46 301  EXCEPTION
15:35:46 302  WHEN BAD_GROUP_ID THEN
15:35:46 303  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 304  	  SPROC_NAME, 'No such group id');
15:35:46 305  WHEN BAD_PAYPAL_STATUS THEN
15:35:46 306  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 307  	  SPROC_NAME, 'Bad paypal status');
15:35:46 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
15:35:46 309  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
15:35:46 311  WHEN OTHERS THEN
15:35:46 312  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 314  END ADD_PAYPAL;
15:35:46 315  
15:35:46 316  /******************************************************************************/
15:35:46 317  
15:35:46 318  PROCEDURE DISABLE_CREDIT_CARD (
15:35:46 319  /*
15:35:46 320  Throws exceptions:
15:35:46 321  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 322  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 323  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:46 324  */
15:35:46 325  	in_credit_card_id IN NUMBER,
15:35:46 326  	in_updated_by	  IN VARCHAR2
15:35:46 327  ) AS
15:35:46 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
15:35:46 329  -- VARIBLES
15:35:46 330  var_account_id		     NUMBER;
15:35:46 331  var_group_id		     NUMBER;
15:35:46 332  var_credit_card_status	     NUMBER;
15:35:46 333  var_pending_transactions_num   NUMBER;
15:35:46 334  var_pending_invoices_num	     NUMBER;
15:35:46 335  current_def_instrument_type_id NUMBER;
15:35:46 336  current_def_instrument_id      NUMBER;
15:35:46 337  -- EXCEPTIONS
15:35:46 338  BAD_CC_STATUS		   EXCEPTION;
15:35:46 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
15:35:46 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
15:35:46 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
15:35:46 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
15:35:46 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
15:35:46 344  BEGIN
15:35:46 345  
15:35:46 346  	-- Get credit card status
15:35:46 347  	-- Get account id
15:35:46 348  	SELECT
15:35:46 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
15:35:46 350  	  CREDIT_CARD.ACCOUNT_ID
15:35:46 351  	  into
15:35:46 352  	  var_credit_card_status,
15:35:46 353  	  var_account_id
15:35:46 354  	FROM
15:35:46 355  	  CREDIT_CARD
15:35:46 356  	WHERE
15:35:46 357  	  CREDIT_CARD.ID = in_credit_card_id;
15:35:46 358  
15:35:46 359  	-- Check that we can disable this credit card (STUB)
15:35:46 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
15:35:46 362  	END IF;
15:35:46 363  
15:35:46 364  	-- Get account id
15:35:46 365  	SELECT
15:35:46 366  	  ACCOUNT.GROUP_ID into var_group_id
15:35:46 367  	FROM
15:35:46 368  	  ACCOUNT
15:35:46 369  	WHERE
15:35:46 370  	  ACCOUNT.ID = var_account_id;
15:35:46 371  
15:35:46 372  	-- Card should to be active
15:35:46 373  	IF var_credit_card_status != GLOBAL_STATUSES_V17.CREDIT_CARD_ACTIVE THEN
15:35:46 374  	  RAISE BAD_CC_STATUS;
15:35:46 375  	END IF;
15:35:46 376  
15:35:46 377  	-- Looking for pending transactions associated with given credit card
15:35:46 378  	SELECT
15:35:46 379  	  COUNT(*) into var_pending_invoices_num
15:35:46 380  	FROM
15:35:46 381  	  CHARGE
15:35:46 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:35:46 383  	WHERE
15:35:46 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD
15:35:46 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
15:35:46 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V17.TRANSACTION_PENDING;
15:35:46 387  
15:35:46 388  	IF var_pending_invoices_num > 0 THEN
15:35:46 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
15:35:46 390  	END IF;
15:35:46 391  
15:35:46 392  	-- Getting current default financial instrument
15:35:46 393  	BEGIN
15:35:46 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
15:35:46 395  	    in_group_id 	   => var_group_id,
15:35:46 396  	    out_instrument_type_id => current_def_instrument_type_id,
15:35:46 397  	    out_instrument_id	   => current_def_instrument_id
15:35:46 398  	  );
15:35:46 399  	  EXCEPTION
15:35:46 400  	    WHEN OTHERS THEN
15:35:46 401  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
15:35:46 403  	END;
15:35:46 404  
15:35:46 405  	-- Checking that credit card is not default
15:35:46 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD
15:35:46 407  	  AND current_def_instrument_id = in_credit_card_id THEN
15:35:46 408  	  BEGIN
15:35:46 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
15:35:46 410  	      in_group_id => var_group_id
15:35:46 411  	    );
15:35:46 412  	  EXCEPTION
15:35:46 413  	    WHEN OTHERS THEN
15:35:46 414  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
15:35:46 416  	  END;
15:35:46 417  	END IF;
15:35:46 418  
15:35:46 419  	-- Update credit card status
15:35:46 420  	PROCS_FIN_INSTRUMENTS_V17.UPDATE_CREDIT_CARD_STATUS(
15:35:46 421  	  in_credit_card_id	   => in_credit_card_id,
15:35:46 422  	  in_updated_by 	   => in_updated_by,
15:35:46 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V17.CREDIT_CARD_DISABLED
15:35:46 424  	);
15:35:46 425  
15:35:46 426  EXCEPTION
15:35:46 427  WHEN NO_DATA_FOUND THEN
15:35:46 428  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 429  	  SPROC_NAME, 'No such credit card');
15:35:46 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
15:35:46 431  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
15:35:46 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
15:35:46 434  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
15:35:46 436  WHEN BAD_CC_STATUS THEN
15:35:46 437  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 438  	  SPROC_NAME, 'Credit card is not active');
15:35:46 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
15:35:46 440  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
15:35:46 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
15:35:46 443  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
15:35:46 445  WHEN OTHERS THEN
15:35:46 446  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 448  END DISABLE_CREDIT_CARD;
15:35:46 449  
15:35:46 450  /******************************************************************************/
15:35:46 451  
15:35:46 452  PROCEDURE DISABLE_PAYPAL (
15:35:46 453  /*
15:35:46 454  Throws exceptions:
15:35:46 455  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 456  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 457  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:46 458  */
15:35:46 459  	in_paypal_id  IN NUMBER,
15:35:46 460  	in_updated_by IN VARCHAR2
15:35:46 461  ) AS
15:35:46 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
15:35:46 463  -- VARIABLES
15:35:46 464  var_paypal_status_id NUMBER;
15:35:46 465  var_account_id	   NUMBER;
15:35:46 466  var_group_id	   NUMBER;
15:35:46 467  var_pending_invoices_num NUMBER;
15:35:46 468  current_def_instrument_type_id NUMBER;
15:35:46 469  current_def_instrument_id NUMBER;
15:35:46 470  -- EXCEPTIONS
15:35:46 471  BAD_PAYPAL_ID EXCEPTION;
15:35:46 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
15:35:46 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
15:35:46 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
15:35:46 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
15:35:46 476  EXCEPTION_MESSAGE VARCHAR2(1024);
15:35:46 477  BEGIN
15:35:46 478  
15:35:46 479  	-- Get Paypal status
15:35:46 480  	-- Get account
15:35:46 481  	BEGIN
15:35:46 482  	  SELECT
15:35:46 483  	    PAYPAL.PAYPAL_STATUS_ID,
15:35:46 484  	    PAYPAL.ACCOUNT_ID
15:35:46 485  	    into
15:35:46 486  	    var_paypal_status_id,
15:35:46 487  	    var_account_id
15:35:46 488  	  FROM
15:35:46 489  	    PAYPAL
15:35:46 490  	  WHERE
15:35:46 491  	    PAYPAL.ID = in_paypal_id;
15:35:46 492  	  EXCEPTION
15:35:46 493  	    WHEN NO_DATA_FOUND THEN
15:35:46 494  	      RAISE BAD_PAYPAL_ID;
15:35:46 495  	END;
15:35:46 496  
15:35:46 497  	-- Get group id
15:35:46 498  	SELECT
15:35:46 499  	  ACCOUNT.GROUP_ID into var_group_id
15:35:46 500  	FROM
15:35:46 501  	  ACCOUNT
15:35:46 502  	WHERE
15:35:46 503  	  ACCOUNT.ID = var_account_id;
15:35:46 504  
15:35:46 505  	-- Card should not be disabled
15:35:46 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V17.PAYPAL_INACTIVE THEN
15:35:46 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
15:35:46 508  	END IF;
15:35:46 509  
15:35:46 510  	-- Looking for pending transactions associated with given credit card
15:35:46 511  	SELECT
15:35:46 512  	  COUNT(*) into var_pending_invoices_num
15:35:46 513  	FROM
15:35:46 514  	  CHARGE
15:35:46 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:35:46 516  	WHERE
15:35:46 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL
15:35:46 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
15:35:46 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V17.TRANSACTION_PENDING;
15:35:46 520  
15:35:46 521  	IF var_pending_invoices_num > 0 THEN
15:35:46 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
15:35:46 523  	END IF;
15:35:46 524  
15:35:46 525  	-- Getting current default financial instrument
15:35:46 526  	BEGIN
15:35:46 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
15:35:46 528  	    in_group_id 	   => var_group_id,
15:35:46 529  	    out_instrument_type_id => current_def_instrument_type_id,
15:35:46 530  	    out_instrument_id	   => current_def_instrument_id
15:35:46 531  	  );
15:35:46 532  	  EXCEPTION
15:35:46 533  	    WHEN OTHERS THEN
15:35:46 534  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
15:35:46 536  	END;
15:35:46 537  
15:35:46 538  	-- Checking that credit card is not default
15:35:46 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL
15:35:46 540  	  AND current_def_instrument_id = in_paypal_id THEN
15:35:46 541  	  BEGIN
15:35:46 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
15:35:46 543  	      in_group_id => var_group_id
15:35:46 544  	    );
15:35:46 545  	  EXCEPTION
15:35:46 546  	    WHEN OTHERS THEN
15:35:46 547  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
15:35:46 549  	  END;
15:35:46 550  	END IF;
15:35:46 551  
15:35:46 552  	PROCS_FIN_INSTRUMENTS_V17.UPDATE_PAYPAL_STATUS(
15:35:46 553  	  in_paypal_id	      => in_paypal_id,
15:35:46 554  	  in_updated_by       => in_updated_by,
15:35:46 555  	  in_paypal_status_id => GLOBAL_STATUSES_V17.PAYPAL_INACTIVE
15:35:46 556  	);
15:35:46 557  
15:35:46 558  EXCEPTION
15:35:46 559  WHEN BAD_PAYPAL_ID THEN
15:35:46 560  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 561  	  SPROC_NAME, 'No such paypal');
15:35:46 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
15:35:46 563  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 564  	  SPROC_NAME, 'Paypal already inactive');
15:35:46 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
15:35:46 566  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
15:35:46 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
15:35:46 569  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
15:35:46 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
15:35:46 572  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
15:35:46 574  WHEN OTHERS THEN
15:35:46 575  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 577  END DISABLE_PAYPAL;
15:35:46 578  
15:35:46 579  /******************************************************************************/
15:35:46 580  
15:35:46 581  PROCEDURE UPDATE_CREDIT_CARD (
15:35:46 582  /*
15:35:46 583  Throws exceptions:
15:35:46 584  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 585  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 586  */
15:35:46 587  	in_credit_card_id	  IN NUMBER,
15:35:46 588  	in_updated_by		  IN VARCHAR2,
15:35:46 589  	in_instrument_name	  IN VARCHAR2,
15:35:46 590  	in_is_default		  IN NUMBER
15:35:46 591  ) AS
15:35:46 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
15:35:46 593  -- VARIABLES
15:35:46 594  var_account_id NUMBER;
15:35:46 595  var_group_id   NUMBER;
15:35:46 596  temp_cc_rownum NUMBER;
15:35:46 597  current_def_instrument_type_id NUMBER;
15:35:46 598  current_def_instrument_id      NUMBER;
15:35:46 599  -- EXCEPTION
15:35:46 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
15:35:46 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
15:35:46 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
15:35:46 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
15:35:46 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:35:46 605  BEGIN
15:35:46 606  
15:35:46 607  	-- Get account id
15:35:46 608  	SELECT
15:35:46 609  	  CREDIT_CARD.ACCOUNT_ID
15:35:46 610  	  into
15:35:46 611  	  var_account_id
15:35:46 612  	FROM
15:35:46 613  	  CREDIT_CARD
15:35:46 614  	WHERE
15:35:46 615  	  CREDIT_CARD.ID = in_credit_card_id;
15:35:46 616  
15:35:46 617  	-- Get group id
15:35:46 618  	SELECT
15:35:46 619  	  ACCOUNT.GROUP_ID into var_group_id
15:35:46 620  	FROM
15:35:46 621  	  ACCOUNT
15:35:46 622  	WHERE
15:35:46 623  	  ACCOUNT.ID = var_account_id;
15:35:46 624  
15:35:46 625  	-- Check that passed data is correct
15:35:46 626  	IF in_is_default != GLOBAL_CONSTANTS_V17.TRUE
15:35:46 627  	  AND in_is_default != GLOBAL_CONSTANTS_V17.FALSE
15:35:46 628  	  AND in_is_default IS NOT NULL THEN
15:35:46 629  	  RAISE BAD_IS_DEFAULT_VALUE;
15:35:46 630  	END IF;
15:35:46 631  
15:35:46 632  	-- Update credit card
15:35:46 633  	IF in_instrument_name IS NOT NULL THEN
15:35:46 634  	  PROCS_FIN_INSTRUMENTS_CRU_V17.UPDATE_CREDIT_CARD(
15:35:46 635  	    in_credit_card_id  => in_credit_card_id,
15:35:46 636  	    in_updated_by      => in_updated_by,
15:35:46 637  	    in_instrument_name => in_instrument_name
15:35:46 638  	  );
15:35:46 639  	END IF;
15:35:46 640  
15:35:46 641  	-- Set default financial instrument
15:35:46 642  	IF in_is_default = GLOBAL_CONSTANTS_V17.TRUE THEN
15:35:46 643  	  BEGIN
15:35:46 644  	    PROCS_FIN_INSTRUMENTS_V17.SET_DEF_FINANCIAL_INSTRUMENT(
15:35:46 645  	      in_group_id	    => var_group_id,
15:35:46 646  	      in_instrument_type_id => GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD,
15:35:46 647  	      in_instrument_id	    => in_credit_card_id,
15:35:46 648  	      in_updated_by	    => in_updated_by
15:35:46 649  	    );
15:35:46 650  	    EXCEPTION
15:35:46 651  	      WHEN OTHERS THEN
15:35:46 652  		EXCEPTION_MESSAGE := SQLERRM;
15:35:46 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
15:35:46 654  	  END;
15:35:46 655  	END IF;
15:35:46 656  
15:35:46 657  	-- Set default financial instrument
15:35:46 658  	IF in_is_default = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 659  	  BEGIN
15:35:46 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
15:35:46 661  	      in_group_id	     => var_group_id,
15:35:46 662  	      out_instrument_type_id => current_def_instrument_type_id,
15:35:46 663  	      out_instrument_id      => current_def_instrument_id
15:35:46 664  	    );
15:35:46 665  	  EXCEPTION
15:35:46 666  	    WHEN OTHERS THEN
15:35:46 667  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
15:35:46 669  	  END;
15:35:46 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD
15:35:46 671  	    AND current_def_instrument_id = in_credit_card_id THEN
15:35:46 672  	    BEGIN
15:35:46 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
15:35:46 674  		in_group_id => var_group_id
15:35:46 675  	      );
15:35:46 676  	      EXCEPTION
15:35:46 677  		WHEN OTHERS THEN
15:35:46 678  		  EXCEPTION_MESSAGE := SQLERRM;
15:35:46 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
15:35:46 680  	    END;
15:35:46 681  	  END IF;
15:35:46 682  	END IF;
15:35:46 683  
15:35:46 684  EXCEPTION
15:35:46 685  WHEN NO_DATA_FOUND THEN
15:35:46 686  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 687  	  SPROC_NAME, 'No such credit card');
15:35:46 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
15:35:46 689  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
15:35:46 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
15:35:46 692  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
15:35:46 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
15:35:46 695  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
15:35:46 697  WHEN OTHERS THEN
15:35:46 698  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 700  END UPDATE_CREDIT_CARD;
15:35:46 701  
15:35:46 702  /******************************************************************************/
15:35:46 703  
15:35:46 704  PROCEDURE START_GC_PURCHASING (
15:35:46 705  	in_group_id		  IN NUMBER,
15:35:46 706  	in_offer_chain_id	  IN VARCHAR2,
15:35:46 707  	in_gift_certificate_code  IN  VARCHAR2,
15:35:46 708  	in_created_by		  IN  VARCHAR2,
15:35:46 709  	in_recipient_name	  IN  VARCHAR2,
15:35:46 710  	in_recipient_email	  IN  VARCHAR2,
15:35:46 711  	in_recipient_address_id   IN NUMBER,
15:35:46 712  	in_recipient_notify_date  IN DATE,
15:35:46 713  	in_sender_name		  IN VARCHAR2,
15:35:46 714  	in_sender_email 	  IN VARCHAR2,
15:35:46 715  	in_gift_message 	  IN  VARCHAR2,
15:35:46 716  	in_expiration_date	  IN DATE,
15:35:46 717  	out_gift_certificate_id   OUT NUMBER,
15:35:46 718  	out_invoice_id		  OUT NUMBER
15:35:46 719  ) AS
15:35:46 720  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
15:35:46 721  -- VARIABLES
15:35:46 722  var_account_id		NUMBER;
15:35:46 723  temp_gc_code		GIFT_CERTIFICATE.CODE%TYPE;
15:35:46 724  var_och_is_gc		NUMBER;
15:35:46 725  var_offer_chain_status_id NUMBER;
15:35:46 726  var_is_for_redemption	NUMBER;
15:35:46 727  var_new_invoice_id	NUMBER;
15:35:46 728  var_gift_cert_id		NUMBER;
15:35:46 729  var_account_tax_exempt_id VARCHAR2(255);
15:35:46 730  -- EXCEPTIONS
15:35:46 731  BAD_GROUP_ID		    EXCEPTION;
15:35:46 732  GC_CODE_ALREADY_EXISTS	    EXCEPTION;
15:35:46 733  BAD_OFFER_CHAIN_ID	    EXCEPTION;
15:35:46 734  OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
15:35:46 735  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
15:35:46 736  CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
15:35:46 737  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
15:35:46 738  OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
15:35:46 739  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
15:35:46 740  
15:35:46 741  EXCEPTION_MESSAGE VARCHAR2(1024);
15:35:46 742  BEGIN
15:35:46 743  	-- Get account id
15:35:46 744  	BEGIN
15:35:46 745  	  SELECT
15:35:46 746  	    ACCOUNT.ID,
15:35:46 747  	    ACCOUNT.TAX_EXEMPT_ID
15:35:46 748  	    into
15:35:46 749  	    var_account_id,
15:35:46 750  	    var_account_tax_exempt_id
15:35:46 751  	  FROM
15:35:46 752  	    ACCOUNT
15:35:46 753  	  WHERE
15:35:46 754  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46 755  	  EXCEPTION
15:35:46 756  	  WHEN NO_DATA_FOUND THEN
15:35:46 757  	    RAISE BAD_GROUP_ID;
15:35:46 758  	END;
15:35:46 759  
15:35:46 760  	-- Check for the same code
15:35:46 761  	BEGIN
15:35:46 762  	  SELECT
15:35:46 763  	    GIFT_CERTIFICATE.CODE into temp_gc_code
15:35:46 764  	  FROM
15:35:46 765  	    GIFT_CERTIFICATE
15:35:46 766  	  WHERE
15:35:46 767  	    GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
15:35:46 768  
15:35:46 769  	  RAISE GC_CODE_ALREADY_EXISTS;
15:35:46 770  
15:35:46 771  	  EXCEPTION
15:35:46 772  	    WHEN NO_DATA_FOUND THEN
15:35:46 773  	      NULL;
15:35:46 774  	END;
15:35:46 775  
15:35:46 776  	-- Get offer chain flag "is_gift_certificate"
15:35:46 777  	BEGIN
15:35:46 778  	  SELECT
15:35:46 779  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE,
15:35:46 780  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
15:35:46 781  	    into
15:35:46 782  	    var_och_is_gc,
15:35:46 783  	    var_offer_chain_status_id
15:35:46 784  	  FROM
15:35:46 785  	    OFFER_CHAIN
15:35:46 786  	  WHERE
15:35:46 787  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:35:46 788  	  EXCEPTION
15:35:46 789  	  WHEN NO_DATA_FOUND THEN
15:35:46 790  	    RAISE BAD_OFFER_CHAIN_ID;
15:35:46 791  	END;
15:35:46 792  
15:35:46 793  	IF var_och_is_gc != GLOBAL_CONSTANTS_V17.TRUE
15:35:46 794  	  OR var_och_is_gc IS NULL THEN
15:35:46 795  	  RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
15:35:46 796  	END IF;
15:35:46 797  
15:35:46 798  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V17.OFFER_CHAIN_ACTIVE THEN
15:35:46 799  	  RAISE BAD_OFFER_CHAIN_STATUS;
15:35:46 800  	END IF;
15:35:46 801  
15:35:46 802  	-- norlov: #38151 check if the OC is for Redemption:
15:35:46 803  	SELECT
15:35:46 804  	  COUNT(*) into var_is_for_redemption
15:35:46 805  	FROM
15:35:46 806  	  OFFER_CHAIN_ELIGIBILITY
15:35:46 807  	WHERE
15:35:46 808  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:35:46 809  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V17.GIFT_CERTIFICATE_REQUIRED
15:35:46 810  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V17.ELIGIBILITY_FLAG_SET;
15:35:46 811  
15:35:46 812  	IF var_is_for_redemption > 0 THEN
15:35:46 813  	  RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
15:35:46 814  	END IF;
15:35:46 815  
15:35:46 816  	-- Create new invoice
15:35:46 817  	BEGIN
15:35:46 818  	  PROCS_INVOICE_V17.CREATE_INVOICE(
15:35:46 819  	    in_invoice_status => GLOBAL_STATUSES_V17.INVOICE_OPEN,
15:35:46 820  	    in_created_by     => in_created_by,
15:35:46 821  	    in_tax_exempt_id  => var_account_tax_exempt_id,
15:35:46 822  	    out_invoice_id    => var_new_invoice_id
15:35:46 823  	  );
15:35:46 824  	  EXCEPTION
15:35:46 825  	    WHEN OTHERS THEN
15:35:46 826  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 827  	      RAISE CAN_NOT_CREATE_INVOICE;
15:35:46 828  	END;
15:35:46 829  
15:35:46 830  	-- Add line items for new invoice
15:35:46 831  	BEGIN
15:35:46 832  	  FOR f_offer_data IN (
15:35:46 833  	    SELECT
15:35:46 834  	      OFFER_ID,
15:35:46 835  	      NUM_RECURRENCES
15:35:46 836  	    FROM
15:35:46 837  	      OFFER_OFFER_CHAIN
15:35:46 838  	    WHERE
15:35:46 839  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:46 840  	  )
15:35:46 841  	  LOOP
15:35:46 842  	    IF f_offer_data.NUM_RECURRENCES < 1 THEN
15:35:46 843  	      RAISE OFFER_REC_NUM_LESS_THAN_ONE;
15:35:46 844  	    END IF;
15:35:46 845  	    FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
15:35:46 846  	    LOOP
15:35:46 847  	      PROCS_LINE_ITEMS_V17.ADD_LINE_ITEMS(
15:35:46 848  		in_invoice_id => var_new_invoice_id,
15:35:46 849  		in_offer_id   => f_offer_data.OFFER_ID,
15:35:46 850  		in_created_by => in_created_by
15:35:46 851  	      );
15:35:46 852  	    END LOOP;
15:35:46 853  	  END LOOP;
15:35:46 854  
15:35:46 855  	  EXCEPTION
15:35:46 856  	    WHEN OTHERS THEN
15:35:46 857  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 858  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
15:35:46 859  	END;
15:35:46 860  
15:35:46 861  	PROCS_FIN_INSTRUMENTS_CRU_V17.CREATE_GIFT_CERTIFICATE(
15:35:46 862  	  out_gift_certificate_id	=> var_gift_cert_id,
15:35:46 863  	  in_purchaser_group_id 	=> in_group_id,
15:35:46 864  	  in_purchaser_invoice_id	=> var_new_invoice_id,
15:35:46 865  	  in_offer_chain_id		=> in_offer_chain_id,
15:35:46 866  	  in_expiration_date		=> in_expiration_date,
15:35:46 867  	  in_purchase_date		=> SYSDATE,
15:35:46 868  	  in_gift_certificate_status_id => GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_ACTIVE,
15:35:46 869  	  in_code			=> in_gift_certificate_code,
15:35:46 870  	  in_created_by 		=> in_created_by,
15:35:46 871  	  in_recipient_name		=> in_recipient_name,
15:35:46 872  	  in_gift_message		=> in_gift_message,
15:35:46 873  	  in_recipient_email		=> in_recipient_email,
15:35:46 874  	  in_sender_email		=> in_sender_email,
15:35:46 875  	  in_sender_name		=> in_sender_name,
15:35:46 876  	  in_recipient_address_id	=> in_recipient_address_id,
15:35:46 877  	  in_recipient_notify_date	=> in_recipient_notify_date
15:35:46 878  	);
15:35:46 879  
15:35:46 880  	out_gift_certificate_id := var_gift_cert_id;
15:35:46 881  	out_invoice_id := var_new_invoice_id;
15:35:46 882  
15:35:46 883  EXCEPTION
15:35:46 884  WHEN BAD_OFFER_CHAIN_STATUS THEN
15:35:46 885  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 886  	  SPROC_NAME, 'Offer chain is not active');
15:35:46 887  WHEN GC_CODE_ALREADY_EXISTS THEN
15:35:46 888  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:46 889  	  SPROC_NAME, 'Gift certificate with same code already exists');
15:35:46 890  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
15:35:46 891  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 892  	  SPROC_NAME, 'This offer chain can not be used for gift certificate');
15:35:46 893  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
15:35:46 894  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 895  	  SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
15:35:46 896  WHEN CAN_NOT_CREATE_INVOICE THEN
15:35:46 897  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 898  	  SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
15:35:46 899  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
15:35:46 900  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 901  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
15:35:46 902  WHEN BAD_GROUP_ID THEN
15:35:46 903  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 904  	  SPROC_NAME, 'No such group id');
15:35:46 905  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:46 906  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 907  	  SPROC_NAME, 'No such offer chain');
15:35:46 908  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
15:35:46 909  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 910  	  SPROC_NAME, 'Some offer has recurrences number less than 1');
15:35:46 911  WHEN OTHERS THEN
15:35:46 912  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 913  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 914  END START_GC_PURCHASING;
15:35:46 915  
15:35:46 916  /******************************************************************************/
15:35:46 917  
15:35:46 918  PROCEDURE FINALIZE_GC_PURCHASING (
15:35:46 919  	in_invoice_id	      IN NUMBER,
15:35:46 920  	in_created_by	      IN VARCHAR2,
15:35:46 921  	in_instrument_id      IN NUMBER,
15:35:46 922  	in_instrument_type_id IN NUMBER,
15:35:46 923  	in_order_id	      IN VARCHAR2,
15:35:46 924  	in_transaction_id     IN NUMBER,
15:35:46 925  	out_charge_amount     OUT NUMBER
15:35:46 926  ) AS
15:35:46 927  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
15:35:46 928  -- VARIABLES
15:35:46 929  temp_transaction_id_count NUMBER;
15:35:46 930  var_invoice_amount	NUMBER(10,2);
15:35:46 931  var_transaction_id	NUMBER;
15:35:46 932  var_new_charge_id 	NUMBER;
15:35:46 933  -- EXCEPTIONS
15:35:46 934  BAD_CREDIT_CARD_ID	  EXCEPTION;
15:35:46 935  BAD_PAYPAL_ID		  EXCEPTION;
15:35:46 936  BAD_INSTRUMENT_TYPE	  EXCEPTION;
15:35:46 937  TRANSACTION_EXISTS	  EXCEPTION;
15:35:46 938  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
15:35:46 939  CAN_NOT_USE_FCINSTR	  EXCEPTION;
15:35:46 940  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
15:35:46 941  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
15:35:46 942  EXCEPTION_MESSAGE   VARCHAR2(1024);
15:35:46 943  BEGIN
15:35:46 944  
15:35:46 945  	-- Check that instrument exists
15:35:46 946  	IF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD THEN
15:35:46 947  	  IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 948  	    RAISE BAD_CREDIT_CARD_ID;
15:35:46 949  	  END IF;
15:35:46 950  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL THEN
15:35:46 951  	  IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 952  	    RAISE BAD_PAYPAL_ID;
15:35:46 953  	  END IF;
15:35:46 954  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_ZCI_INSTRUMENT THEN
15:35:46 955  	  NULL;
15:35:46 956  	ELSE
15:35:46 957  	  RAISE BAD_INSTRUMENT_TYPE;
15:35:46 958  	END IF;
15:35:46 959  
15:35:46 960  	-- Check that transaction with given id do not exists
15:35:46 961  	SELECT
15:35:46 962  	  COUNT(*) into temp_transaction_id_count
15:35:46 963  	FROM
15:35:46 964  	  TRANSACTION
15:35:46 965  	WHERE
15:35:46 966  	  TRANSACTION.ID = in_transaction_id;
15:35:46 967  
15:35:46 968  	IF temp_transaction_id_count > 0 THEN
15:35:46 969  	  RAISE TRANSACTION_EXISTS;
15:35:46 970  	END IF;
15:35:46 971  
15:35:46 972  	-- Calculate new invoice amount
15:35:46 973  	BEGIN
15:35:46 974  	  PROCS_INVOICE_V17.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
15:35:46 975  	  EXCEPTION
15:35:46 976  	    WHEN OTHERS THEN
15:35:46 977  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 978  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:35:46 979  	END;
15:35:46 980  
15:35:46 981  	IF var_invoice_amount > 0
15:35:46 982  	  AND in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_ZCI_INSTRUMENT THEN
15:35:46 983  	  RAISE CAN_NOT_USE_FCINSTR;
15:35:46 984  	END IF;
15:35:46 985  
15:35:46 986  	-- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
15:35:46 987  	IF var_invoice_amount = 0 THEN
15:35:46 988  	  PROCS_INVOICE_CRU_V17.UPDATE_INVOICE(
15:35:46 989  	    in_invoice_id		   => in_invoice_id,
15:35:46 990  	    in_updated_by		   => in_created_by,
15:35:46 991  	    in_invoice_status_id	   => GLOBAL_STATUSES_V17.INVOICE_CLOSED
15:35:46 992  	  );
15:35:46 993  	END IF;
15:35:46 994  
15:35:46 995  	IF var_invoice_amount > 0 THEN
15:35:46 996  	  -- Create transaction
15:35:46 997  	  BEGIN
15:35:46 998  	    PROCS_TRANSACTION_V17.CREATE_TRANSACTION(
15:35:46 999  	      in_transaction_id  => in_transaction_id,
15:35:46 1000  	       in_status_id	  => GLOBAL_STATUSES_V17.TRANSACTION_PENDING,
15:35:46 1001  	       in_amount	  => var_invoice_amount,
15:35:46 1002  	       in_created_by	  => in_created_by,
15:35:46 1003  	       in_order_id	  => in_order_id,
15:35:46 1004  	       out_transaction_id => var_transaction_id
15:35:46 1005  	     );
15:35:46 1006  	     EXCEPTION
15:35:46 1007  	       WHEN OTHERS THEN
15:35:46 1008  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1009  		 RAISE CAN_NOT_CREATE_TRANSACTION;
15:35:46 1010  	   END;
15:35:46 1011  
15:35:46 1012  	   -- Create charge
15:35:46 1013  	   BEGIN
15:35:46 1014  	     PROCS_CHARGE_V17.CREATE_CHARGE(
15:35:46 1015  	       in_invoice_id	     => in_invoice_id,
15:35:46 1016  	       in_transaction_id     => var_transaction_id,
15:35:46 1017  	       in_instrument_type_id => in_instrument_type_id,
15:35:46 1018  	       in_instrument_id      => in_instrument_id,
15:35:46 1019  	       in_charge_amount      => var_invoice_amount,
15:35:46 1020  	       in_created_by	     => in_created_by,
15:35:46 1021  	       in_charge_status_id   => GLOBAL_STATUSES_V17.CHARGE_OPENED,
15:35:46 1022  	       out_charge_id	     => var_new_charge_id
15:35:46 1023  	     );
15:35:46 1024  	     out_charge_amount := var_invoice_amount;
15:35:46 1025  	     EXCEPTION
15:35:46 1026  	       WHEN OTHERS THEN
15:35:46 1027  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1028  		 RAISE CAN_NOT_CREATE_CHARGE;
15:35:46 1029  	   END;
15:35:46 1030  	 ELSE
15:35:46 1031  	   out_charge_amount := 0;
15:35:46 1032  	 END IF;
15:35:46 1033  
15:35:46 1034  EXCEPTION
15:35:46 1035  WHEN CAN_NOT_USE_FCINSTR THEN
15:35:46 1036  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 1037  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
15:35:46 1038  WHEN BAD_CREDIT_CARD_ID THEN
15:35:46 1039  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1040  	   SPROC_NAME, 'Bad credit card id');
15:35:46 1041  WHEN BAD_PAYPAL_ID THEN
15:35:46 1042  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1043  	   SPROC_NAME, 'Bad paypal id');
15:35:46 1044  WHEN BAD_INSTRUMENT_TYPE THEN
15:35:46 1045  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 1046  	   SPROC_NAME, 'Bad instrument type');
15:35:46 1047  WHEN TRANSACTION_EXISTS THEN
15:35:46 1048  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:46 1049  	   SPROC_NAME, 'Transaction with given id already exists');
15:35:46 1050  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:35:46 1051  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1052  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:35:46 1053  WHEN CAN_NOT_CREATE_CHARGE THEN
15:35:46 1054  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1055  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:35:46 1056  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:35:46 1057  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1058  	   SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
15:35:46 1059  WHEN OTHERS THEN
15:35:46 1060  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1061  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1062  END FINALIZE_GC_PURCHASING;
15:35:46 1063  
15:35:46 1064  /******************************************************************************/
15:35:46 1065  
15:35:46 1066  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
15:35:46 1067  	 in_group_id		   IN NUMBER,
15:35:46 1068  	 in_offer_chain_id	   IN VARCHAR2,
15:35:46 1069  	 in_gift_certificate_code  IN VARCHAR2,
15:35:46 1070  	 in_created_by		   IN VARCHAR2,
15:35:46 1071  	 in_recipient_name	   IN VARCHAR2,
15:35:46 1072  	 in_recipient_email	   IN VARCHAR2,
15:35:46 1073  	 in_sender_name 	   IN VARCHAR2,
15:35:46 1074  	 in_sender_email	   IN VARCHAR2,
15:35:46 1075  	 in_gift_message	   IN VARCHAR2,
15:35:46 1076  	 in_instrument_id	   IN NUMBER,
15:35:46 1077  	 in_instrument_type_id	   IN NUMBER,
15:35:46 1078  	 in_expiration_date	   IN DATE,
15:35:46 1079  	 in_order_id		   IN VARCHAR2,
15:35:46 1080  	 in_transaction_id	   IN NUMBER
15:35:46 1081  ) AS
15:35:46 1082  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
15:35:46 1083  -- VARIABLES
15:35:46 1084  var_gift_cert_id   NUMBER;
15:35:46 1085  var_account_id	  NUMBER;
15:35:46 1086  var_invoice_amount NUMBER (10,2);
15:35:46 1087  var_new_invoice_id NUMBER;
15:35:46 1088  var_new_charge_id  NUMBER;
15:35:46 1089  var_och_is_gc	  NUMBER;
15:35:46 1090  var_offer_chain_status_id NUMBER;
15:35:46 1091  var_is_for_redemption	 NUMBER;
15:35:46 1092  var_account_tax_exempt_id VARCHAR2(255);
15:35:46 1093  
15:35:46 1094  temp_transaction_id_count NUMBER;
15:35:46 1095  var_transaction_id	 NUMBER;
15:35:46 1096  temp_gc_code VARCHAR2(255);
15:35:46 1097  
15:35:46 1098  var_invoice_status_id NUMBER;
15:35:46 1099  -- EXCEPTIONS
15:35:46 1100  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
15:35:46 1101  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
15:35:46 1102  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
15:35:46 1103  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
15:35:46 1104  BAD_GROUP_ID			   EXCEPTION;
15:35:46 1105  BAD_OFFER_CHAIN_ID		   EXCEPTION;
15:35:46 1106  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
15:35:46 1107  TRANSACTION_EXISTS		   EXCEPTION;
15:35:46 1108  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
15:35:46 1109  BAD_INSTRUMENT_TYPE		   EXCEPTION;
15:35:46 1110  BAD_CREDIT_CARD_ID		   EXCEPTION;
15:35:46 1111  BAD_PAYPAL_ID			   EXCEPTION;
15:35:46 1112  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
15:35:46 1113  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
15:35:46 1114  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
15:35:46 1115  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
15:35:46 1116  CAN_NOT_USE_FCINSTR		   EXCEPTION;
15:35:46 1117  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
15:35:46 1118  EXCEPTION_MESSAGE		   VARCHAR2(1024);
15:35:46 1119  BEGIN
15:35:46 1120  
15:35:46 1121  	 -- Get account id
15:35:46 1122  	 BEGIN
15:35:46 1123  	   SELECT
15:35:46 1124  	     ACCOUNT.ID,
15:35:46 1125  	     ACCOUNT.TAX_EXEMPT_ID
15:35:46 1126  	     into
15:35:46 1127  	     var_account_id,
15:35:46 1128  	     var_account_tax_exempt_id
15:35:46 1129  	   FROM
15:35:46 1130  	     ACCOUNT
15:35:46 1131  	   WHERE
15:35:46 1132  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1133  	   EXCEPTION
15:35:46 1134  	   WHEN NO_DATA_FOUND THEN
15:35:46 1135  	     RAISE BAD_GROUP_ID;
15:35:46 1136  	 END;
15:35:46 1137  
15:35:46 1138  	 -- Check that instrument exists
15:35:46 1139  	 IF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD THEN
15:35:46 1140  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 1141  	     RAISE BAD_CREDIT_CARD_ID;
15:35:46 1142  	   END IF;
15:35:46 1143  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL THEN
15:35:46 1144  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 1145  	     RAISE BAD_PAYPAL_ID;
15:35:46 1146  	   END IF;
15:35:46 1147  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_ZCI_INSTRUMENT THEN
15:35:46 1148  	   NULL;
15:35:46 1149  	 ELSE
15:35:46 1150  	   RAISE BAD_INSTRUMENT_TYPE;
15:35:46 1151  	 END IF;
15:35:46 1152  
15:35:46 1153  	 -- Check for the same code
15:35:46 1154  	 BEGIN
15:35:46 1155  	   SELECT
15:35:46 1156  	     GIFT_CERTIFICATE.CODE into temp_gc_code
15:35:46 1157  	   FROM
15:35:46 1158  	     GIFT_CERTIFICATE
15:35:46 1159  	   WHERE
15:35:46 1160  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
15:35:46 1161  
15:35:46 1162  	   RAISE GC_CODE_ALREADY_EXISTS;
15:35:46 1163  
15:35:46 1164  	   EXCEPTION
15:35:46 1165  	     WHEN NO_DATA_FOUND THEN
15:35:46 1166  	       NULL;
15:35:46 1167  	 END;
15:35:46 1168  
15:35:46 1169  	 -- Get offer chain flag "is_gift_certificate"
15:35:46 1170  	 BEGIN
15:35:46 1171  	   SELECT
15:35:46 1172  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
15:35:46 1173  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
15:35:46 1174  	     into
15:35:46 1175  	     var_och_is_gc,
15:35:46 1176  	     var_offer_chain_status_id
15:35:46 1177  	   FROM
15:35:46 1178  	     OFFER_CHAIN
15:35:46 1179  	   WHERE
15:35:46 1180  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:35:46 1181  	   EXCEPTION
15:35:46 1182  	   WHEN NO_DATA_FOUND THEN
15:35:46 1183  	     RAISE BAD_OFFER_CHAIN_ID;
15:35:46 1184  	 END;
15:35:46 1185  
15:35:46 1186  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V17.TRUE
15:35:46 1187  	   OR var_och_is_gc IS NULL THEN
15:35:46 1188  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
15:35:46 1189  	 END IF;
15:35:46 1190  
15:35:46 1191  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V17.OFFER_CHAIN_ACTIVE THEN
15:35:46 1192  	   RAISE BAD_OFFER_CHAIN_STATUS;
15:35:46 1193  	 END IF;
15:35:46 1194  
15:35:46 1195  	 -- norlov: #38151 check if the OC is for Redemption:
15:35:46 1196  	 SELECT
15:35:46 1197  	   COUNT(*) into var_is_for_redemption
15:35:46 1198  	 FROM
15:35:46 1199  	   OFFER_CHAIN_ELIGIBILITY
15:35:46 1200  	 WHERE
15:35:46 1201  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:35:46 1202  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V17.GIFT_CERTIFICATE_REQUIRED
15:35:46 1203  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V17.ELIGIBILITY_FLAG_SET;
15:35:46 1204  
15:35:46 1205  	 IF var_is_for_redemption > 0 THEN
15:35:46 1206  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
15:35:46 1207  	 END IF;
15:35:46 1208  
15:35:46 1209  	 -- Check that transaction with given id do not exists
15:35:46 1210  	 SELECT
15:35:46 1211  	   COUNT(*) into temp_transaction_id_count
15:35:46 1212  	 FROM
15:35:46 1213  	   TRANSACTION
15:35:46 1214  	 WHERE
15:35:46 1215  	   TRANSACTION.ID = in_transaction_id;
15:35:46 1216  
15:35:46 1217  	 IF temp_transaction_id_count > 0 THEN
15:35:46 1218  	   RAISE TRANSACTION_EXISTS;
15:35:46 1219  	 END IF;
15:35:46 1220  
15:35:46 1221  	 -- Create new invoice
15:35:46 1222  	 BEGIN
15:35:46 1223  	   PROCS_INVOICE_V17.CREATE_INVOICE(
15:35:46 1224  	     in_invoice_status => GLOBAL_STATUSES_V17.INVOICE_OPEN,
15:35:46 1225  	     in_created_by     => in_created_by,
15:35:46 1226  	     in_tax_exempt_id  => var_account_tax_exempt_id,
15:35:46 1227  	     out_invoice_id    => var_new_invoice_id
15:35:46 1228  	   );
15:35:46 1229  	   EXCEPTION
15:35:46 1230  	     WHEN OTHERS THEN
15:35:46 1231  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1232  	       RAISE CAN_NOT_CREATE_INVOICE;
15:35:46 1233  	 END;
15:35:46 1234  
15:35:46 1235  	 -- Add line items for new invoice
15:35:46 1236  	 BEGIN
15:35:46 1237  	   FOR f_offer_data IN (
15:35:46 1238  	     SELECT
15:35:46 1239  	       OFFER_ID,
15:35:46 1240  	       NUM_RECURRENCES
15:35:46 1241  	     FROM
15:35:46 1242  	       OFFER_OFFER_CHAIN
15:35:46 1243  	     WHERE
15:35:46 1244  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:35:46 1245  	   )
15:35:46 1246  	   LOOP
15:35:46 1247  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
15:35:46 1248  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
15:35:46 1249  	     END IF;
15:35:46 1250  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
15:35:46 1251  	     LOOP
15:35:46 1252  	       PROCS_LINE_ITEMS_V17.ADD_LINE_ITEMS(
15:35:46 1253  		 in_invoice_id => var_new_invoice_id,
15:35:46 1254  		 in_offer_id   => f_offer_data.OFFER_ID,
15:35:46 1255  		 in_created_by => in_created_by
15:35:46 1256  	       );
15:35:46 1257  	     END LOOP;
15:35:46 1258  	   END LOOP;
15:35:46 1259  
15:35:46 1260  	   EXCEPTION
15:35:46 1261  	     WHEN OTHERS THEN
15:35:46 1262  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1263  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
15:35:46 1264  	 END;
15:35:46 1265  
15:35:46 1266  	 -- Calculate new invoice amount
15:35:46 1267  	 BEGIN
15:35:46 1268  	   PROCS_INVOICE_V17.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
15:35:46 1269  	   EXCEPTION
15:35:46 1270  	     WHEN OTHERS THEN
15:35:46 1271  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1272  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:35:46 1273  	 END;
15:35:46 1274  
15:35:46 1275  	 IF var_invoice_amount > 0
15:35:46 1276  	   AND in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_ZCI_INSTRUMENT THEN
15:35:46 1277  	   RAISE CAN_NOT_USE_FCINSTR;
15:35:46 1278  	 END IF;
15:35:46 1279  
15:35:46 1280  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
15:35:46 1281  	 IF var_invoice_amount = 0 THEN
15:35:46 1282  	   PROCS_INVOICE_CRU_V17.UPDATE_INVOICE(
15:35:46 1283  	     in_invoice_id		    => var_new_invoice_id,
15:35:46 1284  	     in_updated_by		    => in_created_by,
15:35:46 1285  	     in_invoice_status_id	    => GLOBAL_STATUSES_V17.INVOICE_CLOSED
15:35:46 1286  	   );
15:35:46 1287  	 END IF;
15:35:46 1288  
15:35:46 1289  	 IF var_invoice_amount > 0 THEN
15:35:46 1290  	   -- Create transaction
15:35:46 1291  	   BEGIN
15:35:46 1292  	     PROCS_TRANSACTION_V17.CREATE_TRANSACTION(
15:35:46 1293  	       in_transaction_id  => in_transaction_id,
15:35:46 1294  	       in_status_id	  => GLOBAL_STATUSES_V17.TRANSACTION_PENDING,
15:35:46 1295  	       in_amount	  => var_invoice_amount,
15:35:46 1296  	       in_created_by	  => in_created_by,
15:35:46 1297  	       in_order_id	  => in_order_id,
15:35:46 1298  	       out_transaction_id => var_transaction_id
15:35:46 1299  	     );
15:35:46 1300  	     EXCEPTION
15:35:46 1301  	       WHEN OTHERS THEN
15:35:46 1302  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1303  		 RAISE CAN_NOT_CREATE_TRANSACTION;
15:35:46 1304  	   END;
15:35:46 1305  
15:35:46 1306  	   -- Create charge
15:35:46 1307  	   BEGIN
15:35:46 1308  	     PROCS_CHARGE_V17.CREATE_CHARGE(
15:35:46 1309  	       in_invoice_id	     => var_new_invoice_id,
15:35:46 1310  	       in_transaction_id     => var_transaction_id,
15:35:46 1311  	       in_instrument_type_id => in_instrument_type_id,
15:35:46 1312  	       in_instrument_id      => in_instrument_id,
15:35:46 1313  	       in_charge_amount      => var_invoice_amount,
15:35:46 1314  	       in_created_by	     => in_created_by,
15:35:46 1315  	       in_charge_status_id   => GLOBAL_STATUSES_V17.CHARGE_OPENED,
15:35:46 1316  	       out_charge_id	     => var_new_charge_id
15:35:46 1317  	     );
15:35:46 1318  	     EXCEPTION
15:35:46 1319  	       WHEN OTHERS THEN
15:35:46 1320  		 EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1321  		 RAISE CAN_NOT_CREATE_CHARGE;
15:35:46 1322  	   END;
15:35:46 1323  	 END IF;
15:35:46 1324  
15:35:46 1325  	 -- Create new row in GIFT_CERTIFICATE table
15:35:46 1326  	 PROCS_FIN_INSTRUMENTS_CRU_V17.CREATE_GIFT_CERTIFICATE(
15:35:46 1327  	   out_gift_certificate_id	 => var_gift_cert_id,
15:35:46 1328  	   in_purchaser_group_id	 => in_group_id,
15:35:46 1329  	   in_purchaser_invoice_id	 => var_new_invoice_id,
15:35:46 1330  	   in_offer_chain_id		 => in_offer_chain_id,
15:35:46 1331  	   in_expiration_date		 => in_expiration_date,
15:35:46 1332  	   in_purchase_date		 => SYSDATE,
15:35:46 1333  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_ACTIVE,
15:35:46 1334  	   in_code			 => in_gift_certificate_code,
15:35:46 1335  	   in_created_by		 => in_created_by,
15:35:46 1336  	   in_recipient_name		 => in_recipient_name,
15:35:46 1337  	   in_gift_message		 => in_gift_message,
15:35:46 1338  	   in_recipient_email		 => in_recipient_email,
15:35:46 1339  	   in_sender_email		 => in_sender_email,
15:35:46 1340  	   in_sender_name		 => in_sender_name
15:35:46 1341  	 );
15:35:46 1342  
15:35:46 1343  EXCEPTION
15:35:46 1344  WHEN CAN_NOT_USE_FCINSTR THEN
15:35:46 1345  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 1346  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
15:35:46 1347  WHEN BAD_OFFER_CHAIN_STATUS THEN
15:35:46 1348  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 1349  	   SPROC_NAME, 'Offer chain is not active');
15:35:46 1350  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
15:35:46 1351  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1352  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
15:35:46 1353  WHEN BAD_CREDIT_CARD_ID THEN
15:35:46 1354  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1355  	   SPROC_NAME, 'Bad credit card id');
15:35:46 1356  WHEN BAD_PAYPAL_ID THEN
15:35:46 1357  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1358  	   SPROC_NAME, 'Bad paypal id');
15:35:46 1359  WHEN BAD_INSTRUMENT_TYPE THEN
15:35:46 1360  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 1361  	   SPROC_NAME, 'Bad instrument type');
15:35:46 1362  WHEN GC_CODE_ALREADY_EXISTS THEN
15:35:46 1363  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:46 1364  	   SPROC_NAME, 'Gift certificate with same code already exists');
15:35:46 1365  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
15:35:46 1366  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 1367  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
15:35:46 1368  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
15:35:46 1369  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 1370  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
15:35:46 1371  WHEN TRANSACTION_EXISTS THEN
15:35:46 1372  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:46 1373  	   SPROC_NAME, 'Transaction with given id already exists');
15:35:46 1374  WHEN CAN_NOT_CREATE_INVOICE THEN
15:35:46 1375  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1376  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
15:35:46 1377  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:35:46 1378  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1379  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:35:46 1380  WHEN CAN_NOT_CREATE_CHARGE THEN
15:35:46 1381  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1382  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:35:46 1383  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
15:35:46 1384  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1385  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
15:35:46 1386  WHEN BAD_GROUP_ID THEN
15:35:46 1387  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1388  	   SPROC_NAME, 'No such group id');
15:35:46 1389  WHEN BAD_OFFER_CHAIN_ID THEN
15:35:46 1390  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1391  	   SPROC_NAME, 'No such offer chain');
15:35:46 1392  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
15:35:46 1393  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1394  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
15:35:46 1395  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:35:46 1396  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1397  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
15:35:46 1398  WHEN OTHERS THEN
15:35:46 1399  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1400  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1401  END PURCHASE_GIFT_CERTIFICATE;
15:35:46 1402  
15:35:46 1403  /******************************************************************************/
15:35:46 1404  
15:35:46 1405  PROCEDURE REDEEM_GIFT_CERTIFICATE (
15:35:46 1406  	 in_group_id			 IN NUMBER,
15:35:46 1407  	 in_gift_certificate_code	 IN VARCHAR2,
15:35:46 1408  	 in_created_by			 IN VARCHAR2,
15:35:46 1409  	 in_redeemer_address_id 	 IN NUMBER,
15:35:46 1410  	 in_fin_instrument_id		 IN NUMBER,
15:35:46 1411  	 in_fin_instrument_type_id	 IN NUMBER,
15:35:46 1412  	 in_redemption_offer_chain_id	 IN NUMBER,
15:35:46 1413  	 out_subscription_id		 OUT NUMBER,
15:35:46 1414  	 out_license_id 		 OUT NUMBER
15:35:46 1415  ) AS
15:35:46 1416  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
15:35:46 1417  -- VARIABLES
15:35:46 1418  var_gift_certificate_id NUMBER;
15:35:46 1419  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
15:35:46 1420  var_purchased_oc_id     NUMBER;
15:35:46 1421  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
15:35:46 1422  var_offer_duration      VARCHAR2(30);
15:35:46 1423  var_invoice_id	       NUMBER;
15:35:46 1424  var_succ_purch_attempts_num NUMBER;
15:35:46 1425  var_subscription_id     NUMBER;
15:35:46 1426  var_license_id	       NUMBER;
15:35:46 1427  var_account_id	       NUMBER;
15:35:46 1428  var_gc_status_id        NUMBER;
15:35:46 1429  var_gc_charges_amount   NUMBER;
15:35:46 1430  var_gc_expiration_date  DATE;
15:35:46 1431  var_gc_redeemer_group_id NUMBER;
15:35:46 1432  var_gc_purchase_invoice_id NUMBER;
15:35:46 1433  var_gc_purchase_inv_status_id NUMBER;
15:35:46 1434  var_offer_index		     NUMBER;
15:35:46 1435  var_purchaser_group_id	     NUMBER;
15:35:46 1436  temp_license_id		     NUMBER;
15:35:46 1437  var_same_offer_chains_num     NUMBER;
15:35:46 1438  var_max_concurrent_subscrs    NUMBER;
15:35:46 1439  var_account_tax_exempt_id     VARCHAR2(255);
15:35:46 1440  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
15:35:46 1441  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
15:35:46 1442  var_first_offer_id	  NUMBER;
15:35:46 1443  var_date 	     DATE := SYSDATE;
15:35:46 1444  
15:35:46 1445  var_offers SYS_REFCURSOR;
15:35:46 1446  
15:35:46 1447  -- EXCEPTIONS
15:35:46 1448  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
15:35:46 1449  BAD_GROUP_ID		      EXCEPTION;
15:35:46 1450  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
15:35:46 1451  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
15:35:46 1452  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
15:35:46 1453  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
15:35:46 1454  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
15:35:46 1455  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
15:35:46 1456  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
15:35:46 1457  LIMIT_REACHED		      EXCEPTION;
15:35:46 1458  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
15:35:46 1459  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
15:35:46 1460  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
15:35:46 1461  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
15:35:46 1462  EXCEPTION_MESSAGE	      VARCHAR2(1024);
15:35:46 1463  BEGIN
15:35:46 1464  
15:35:46 1465  	 -- Get account id
15:35:46 1466  	 BEGIN
15:35:46 1467  	   SELECT
15:35:46 1468  	     ACCOUNT.ID,
15:35:46 1469  	     ACCOUNT.TAX_EXEMPT_ID
15:35:46 1470  	     into
15:35:46 1471  	     var_account_id,
15:35:46 1472  	     var_account_tax_exempt_id
15:35:46 1473  	   FROM
15:35:46 1474  	     ACCOUNT
15:35:46 1475  	   WHERE
15:35:46 1476  	     ACCOUNT.GROUP_ID = in_group_id
15:35:46 1477  	     AND ROWNUM <= 1;
15:35:46 1478  
15:35:46 1479  	   EXCEPTION
15:35:46 1480  	   WHEN NO_DATA_FOUND THEN
15:35:46 1481  	     RAISE BAD_GROUP_ID;
15:35:46 1482  	 END;
15:35:46 1483  
15:35:46 1484  	 -- Get gift certificate data
15:35:46 1485  	 BEGIN
15:35:46 1486  	   SELECT
15:35:46 1487  	     GIFT_CERTIFICATE.ID,
15:35:46 1488  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
15:35:46 1489  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
15:35:46 1490  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
15:35:46 1491  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
15:35:46 1492  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
15:35:46 1493  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
15:35:46 1494  	     into
15:35:46 1495  	     var_gift_certificate_id,
15:35:46 1496  	     var_purchased_oc_id,
15:35:46 1497  	     var_gc_status_id,
15:35:46 1498  	     var_purchaser_group_id,
15:35:46 1499  	     var_gc_expiration_date,
15:35:46 1500  	     var_gc_redeemer_group_id,
15:35:46 1501  	     var_gc_purchase_invoice_id
15:35:46 1502  	   FROM
15:35:46 1503  	     GIFT_CERTIFICATE
15:35:46 1504  	   WHERE
15:35:46 1505  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
15:35:46 1506  	     AND ROWNUM <= 1;
15:35:46 1507  
15:35:46 1508  	   EXCEPTION
15:35:46 1509  	   WHEN NO_DATA_FOUND THEN
15:35:46 1510  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
15:35:46 1511  	 END;
15:35:46 1512  
15:35:46 1513  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
15:35:46 1514  	 -- but in that case a redemption offer chain id should always be passed in
15:35:46 1515  	 IF var_oc_id_to_redeem IS NULL THEN
15:35:46 1516  	   BEGIN
15:35:46 1517  	     SELECT
15:35:46 1518  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
15:35:46 1519  	       into
15:35:46 1520  	       var_oc_id_to_redeem
15:35:46 1521  	     FROM
15:35:46 1522  	       OFFER_CHAIN_META_DATA
15:35:46 1523  	     WHERE
15:35:46 1524  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
15:35:46 1525  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V17.REDEMPTION_OC_ID
15:35:46 1526  	       AND ROWNUM = 1;
15:35:46 1527  -- requested by ticket so (but above is correct for the actual migrated data):
15:35:46 1528  --  SELECT
15:35:46 1529  --      OFFER_CHAIN.ID
15:35:46 1530  --      into
15:35:46 1531  --      var_oc_id_to_redeem
15:35:46 1532  --    FROM
15:35:46 1533  --      OFFER_CHAIN
15:35:46 1534  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
15:35:46 1535  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
15:35:46 1536  --    WHERE
15:35:46 1537  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 1538  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V17.GIFT_CERTIFICATE_REQUIRED
15:35:46 1539  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V17.ELIGIBILITY_FLAG_SET
15:35:46 1540  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 1541  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V17.REDEMPTION_OC_ID
15:35:46 1542  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
15:35:46 1543  --      AND ROWNUM = 1;
15:35:46 1544  
15:35:46 1545  	     EXCEPTION
15:35:46 1546  	     WHEN NO_DATA_FOUND THEN
15:35:46 1547  	       RAISE OC_TO_REDEEM_NOT_FOUND;
15:35:46 1548  	   END;
15:35:46 1549  	 END IF;
15:35:46 1550  
15:35:46 1551  	 -- Check that purchase invoice for this GC was closed
15:35:46 1552  	 SELECT
15:35:46 1553  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
15:35:46 1554  	 FROM
15:35:46 1555  	   INVOICE
15:35:46 1556  	 WHERE
15:35:46 1557  	   INVOICE.ID = var_gc_purchase_invoice_id;
15:35:46 1558  
15:35:46 1559  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V17.INVOICE_CLOSED THEN
15:35:46 1560  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
15:35:46 1561  	 END IF;
15:35:46 1562  
15:35:46 1563  	 -- Check that this invoice was successfully processed by billing
15:35:46 1564  	 SELECT
15:35:46 1565  	   COUNT(1) into var_succ_purch_attempts_num
15:35:46 1566  	 FROM
15:35:46 1567  	   TRANSACTION_ATTEMPT TA
15:35:46 1568  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
15:35:46 1569  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
15:35:46 1570  	 WHERE
15:35:46 1571  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
15:35:46 1572  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V17.TRANS_ATTEMPT_SUCCESS;
15:35:46 1573  
15:35:46 1574  	 IF var_succ_purch_attempts_num = 0 THEN
15:35:46 1575  	   SELECT
15:35:46 1576  	     COUNT(1) into var_succ_purch_attempts_num
15:35:46 1577  	   FROM
15:35:46 1578  	     DUAL
15:35:46 1579  	   WHERE
15:35:46 1580  	     PROCS_INVOICE_V17.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
15:35:46 1581  	 END IF;
15:35:46 1582  
15:35:46 1583  	 IF var_succ_purch_attempts_num = 0 THEN
15:35:46 1584  	   RAISE PURCHASE_INVOICES_NOT_PAID;
15:35:46 1585  	 END IF;
15:35:46 1586  
15:35:46 1587  	 -- Check limit for gc's offer chain
15:35:46 1588  	 SELECT
15:35:46 1589  	   COUNT(*) into var_same_offer_chains_num
15:35:46 1590  	 FROM
15:35:46 1591  	   SUBSCRIPTION
15:35:46 1592  	 WHERE
15:35:46 1593  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:46 1594  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
15:35:46 1595  	   AND (
15:35:46 1596  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:46 1597  	     -- TODO: Does we need next line?
15:35:46 1598  	     -- OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED
15:35:46 1599  	   );
15:35:46 1600  -- norlov: #38414 the same checking as on OC purchase (just copypasted from CREATE_SUBSCRIPTION - TODO: refactor it not to keep the same code twice)
15:35:46 1601  --  IF PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem) = var_same_offer_chains_num THEN
15:35:46 1602  --    RAISE LIMIT_REACHED;
15:35:46 1603  --  END IF;
15:35:46 1604  IF var_same_offer_chains_num = 0 THEN
15:35:46 1605  	   -- if user does not have any active existing subscriptions to the offer chain
15:35:46 1606  	   -- and if product from the offer chain is already owned from another offer chain
15:35:46 1607  	   -- then deny purchase
15:35:46 1608  	   FOR f_account_offer_chains IN (
15:35:46 1609  	     SELECT DISTINCT
15:35:46 1610  	       OFFER_CHAIN_ID
15:35:46 1611  	     FROM
15:35:46 1612  	       SUBSCRIPTION
15:35:46 1613  	     WHERE
15:35:46 1614  	       ACCOUNT_ID = var_account_id
15:35:46 1615  	       AND (
15:35:46 1616  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:46 1617  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED)
15:35:46 1618  	   )
15:35:46 1619  	   LOOP
15:35:46 1620  	     IF PROCS_OFFER_CHAIN_V17.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V17.TRUE THEN
15:35:46 1621  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
15:35:46 1622  	     END IF;
15:35:46 1623  	   END LOOP;
15:35:46 1624  	 ELSE
15:35:46 1625  
15:35:46 1626  	   -- if user have any active existing subscriptions to the offer chain
15:35:46 1627  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
15:35:46 1628  	   -- then deny purchase
15:35:46 1629  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
15:35:46 1630  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V17.INFINITY
15:35:46 1631  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
15:35:46 1632  	     RAISE LIMIT_REACHED;
15:35:46 1633  	   END IF;
15:35:46 1634  	 END IF;
15:35:46 1635  -- norlov: END OF TODO
15:35:46 1636  
15:35:46 1637  
15:35:46 1638  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
15:35:46 1639  	   RAISE GIFT_CERTIFICATE_REDEEMED;
15:35:46 1640  	 END IF;
15:35:46 1641  
15:35:46 1642  	 IF var_gc_expiration_date < sysdate THEN
15:35:46 1643  	   RAISE GIFT_CERTIFICATE_EXPIRED;
15:35:46 1644  	 END IF;
15:35:46 1645  
15:35:46 1646  	  IF var_gc_status_id = GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_REFUNDED THEN
15:35:46 1647  	   RAISE GIFT_CERT_IS_REFUNDED;
15:35:46 1648  	 END IF;
15:35:46 1649  
15:35:46 1650  	 IF var_gc_status_id = GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_FINALIZED THEN
15:35:46 1651  	   RAISE GIFT_CERT_IS_FINALIZED;
15:35:46 1652  	 END IF;
15:35:46 1653  
15:35:46 1654  	 -- Check that user did not subscribed to same product already
15:35:46 1655  	 -- norlov: get rid of this since there is already the check?
15:35:46 1656  	 FOR f_user_offer_chain IN (
15:35:46 1657  	   SELECT DISTINCT
15:35:46 1658  	     OFFER_CHAIN_ID
15:35:46 1659  	   FROM
15:35:46 1660  	     SUBSCRIPTION
15:35:46 1661  	   WHERE
15:35:46 1662  	     ACCOUNT_ID=var_account_id
15:35:46 1663  	     AND (
15:35:46 1664  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:46 1665  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED
15:35:46 1666  	     )
15:35:46 1667  	 )
15:35:46 1668  	 LOOP
15:35:46 1669  	   IF PROCS_OFFER_CHAIN_V17.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V17.TRUE THEN
15:35:46 1670  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
15:35:46 1671  	   END IF;
15:35:46 1672  	 END LOOP;
15:35:46 1673  
15:35:46 1674  	 -- Check for gift certificate amount
15:35:46 1675  	 SELECT
15:35:46 1676  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
15:35:46 1677  	 FROM
15:35:46 1678  	   CHARGE
15:35:46 1679  	 WHERE
15:35:46 1680  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
15:35:46 1681  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V17.INSTRUMENT_GIFT_CERTIFICATE;
15:35:46 1682  
15:35:46 1683  	 -- Create new invoice
15:35:46 1684  	 PROCS_INVOICE_V17.CREATE_INVOICE(
15:35:46 1685  	   out_invoice_id    => var_invoice_id,
15:35:46 1686  	   in_invoice_status => GLOBAL_STATUSES_V17.INVOICE_CLOSED,
15:35:46 1687  	   in_tax_exempt_id  => var_account_tax_exempt_id,
15:35:46 1688  	   in_created_by     => in_created_by
15:35:46 1689  	 );
15:35:46 1690  
15:35:46 1691  	 -- If a financial instrument wasn't passed in, use the gift certificate id
15:35:46 1692  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
15:35:46 1693  	 IF var_fin_instrument_id is null THEN
15:35:46 1694  	   var_fin_instrument_id := var_gift_certificate_id;
15:35:46 1695  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V17.INSTRUMENT_GIFT_CERTIFICATE;
15:35:46 1696  	 END IF;
15:35:46 1697  
15:35:46 1698  	 -- Insert new row into subscription table
15:35:46 1699  	 PROCS_SUBSCRIPTION_CRU_V17.CREATE_SUBSCRIPTION(
15:35:46 1700  	   out_subscription_id	     => var_subscription_id,
15:35:46 1701  	   in_account_id	     => var_account_id,
15:35:46 1702  	   in_purchase_date	     => var_date,
15:35:46 1703  	   in_offer_chain_id	     => var_oc_id_to_redeem,
15:35:46 1704  	   in_created_by	     => in_created_by,
15:35:46 1705  	   in_instrument_type_id     => var_fin_instrument_type_id,
15:35:46 1706  	   in_instrument_id	     => var_fin_instrument_id,
15:35:46 1707  	   in_subscription_status_id => GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:46 1708  	 );
15:35:46 1709  
15:35:46 1710  	 out_subscription_id := var_subscription_id;
15:35:46 1711  
15:35:46 1712  	 BEGIN
15:35:46 1713  	   PROCS_OFFER_CHAIN_V17.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
15:35:46 1714  	   EXCEPTION
15:35:46 1715  	     WHEN OTHERS THEN
15:35:46 1716  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1717  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
15:35:46 1718  	 END;
15:35:46 1719  
15:35:46 1720  	 BEGIN
15:35:46 1721  	   PROCS_LICENSE_V17.CREATE_LICENSE (
15:35:46 1722  	     out_license_id		 => out_license_id,
15:35:46 1723  	     in_status_id		 => GLOBAL_STATUSES_V17.LICENSE_ACTIVE,
15:35:46 1724  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V17.TRUE,
15:35:46 1725  	     in_start_date		 => var_date,
15:35:46 1726  	     in_offer_id		 => var_first_offer_id,
15:35:46 1727  	     in_subscription_id 	 => var_subscription_id,
15:35:46 1728  	     in_invoice_id		 => var_invoice_id,
15:35:46 1729  	     in_created_by		 => in_created_by,
15:35:46 1730  	     in_end_date		 => NULL, -- Will be calculated automatically
15:35:46 1731  	     in_is_extension		 => GLOBAL_CONSTANTS_V17.FALSE,
15:35:46 1732  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V17.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
15:35:46 1733  	     in_current_offer_recurr_num => 1
15:35:46 1734  	   );
15:35:46 1735  
15:35:46 1736  	   EXCEPTION
15:35:46 1737  	     WHEN OTHERS THEN
15:35:46 1738  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1739  	       RAISE CAN_NOT_CREATE_LICENSE;
15:35:46 1740  	 END;
15:35:46 1741  
15:35:46 1742  	 -- Update original gift certificate
15:35:46 1743  	 BEGIN
15:35:46 1744  	   PROCS_FIN_INSTRUMENTS_CRU_V17.UPDATE_GIFT_CERTIFICATE(
15:35:46 1745  	     in_gift_certificate_id	   => var_gift_certificate_id,
15:35:46 1746  	     in_updated_by		   => in_created_by,
15:35:46 1747  	     in_redeemer_group_id	   => in_group_id,
15:35:46 1748  	     in_finalized_invoice_id	   => var_invoice_id,
15:35:46 1749  	     in_redemption_date 	   => var_date,
15:35:46 1750  	     in_redeemer_address_id	   => in_redeemer_address_id,
15:35:46 1751  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_FINALIZED
15:35:46 1752  	   );
15:35:46 1753  	   EXCEPTION
15:35:46 1754  	     WHEN OTHERS THEN
15:35:46 1755  	       EXCEPTION_MESSAGE := SQLERRM;
15:35:46 1756  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
15:35:46 1757  	 END;
15:35:46 1758  
15:35:46 1759  EXCEPTION
15:35:46 1760  WHEN LIMIT_REACHED THEN
15:35:46 1761  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.CONFLICT_ERROR,
15:35:46 1762  	   SPROC_NAME, 'Limit reached for given offer chain');
15:35:46 1763  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
15:35:46 1764  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.CONFLICT_ERROR,
15:35:46 1765  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
15:35:46 1766  WHEN GIFT_CERTIFICATE_REDEEMED THEN
15:35:46 1767  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 1768  	   SPROC_NAME, 'Gift certificate already redeemed');
15:35:46 1769  WHEN GIFT_CERTIFICATE_EXPIRED THEN
15:35:46 1770  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 1771  	   SPROC_NAME, 'Gift certificate expired');
15:35:46 1772  WHEN GIFT_CERT_IS_FINALIZED THEN
15:35:46 1773  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 1774  	   SPROC_NAME, 'Gift certificate is finalized');
15:35:46 1775  WHEN GIFT_CERT_IS_REFUNDED THEN
15:35:46 1776  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 1777  	   SPROC_NAME, 'Gift certificate has been refunded');
15:35:46 1778  WHEN BAD_GROUP_ID THEN
15:35:46 1779  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1780  	   SPROC_NAME, 'No such account with given group id');
15:35:46 1781  WHEN OC_TO_REDEEM_NOT_FOUND THEN
15:35:46 1782  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1783  	   SPROC_NAME, 'Offer chain to redeem not found');
15:35:46 1784  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
15:35:46 1785  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1786  	   SPROC_NAME, 'No such gift certificate code');
15:35:46 1787  WHEN CAN_NOT_CREATE_LICENSE THEN
15:35:46 1788  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1789  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
15:35:46 1790  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
15:35:46 1791  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 1792  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
15:35:46 1793  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
15:35:46 1794  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 1795  	   SPROC_NAME, 'Purchase invoice is not closed');
15:35:46 1796  WHEN PURCHASE_INVOICES_NOT_PAID THEN
15:35:46 1797  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 1798  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
15:35:46 1799  WHEN OTHERS THEN
15:35:46 1800  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1801  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1802  END;
15:35:46 1803  
15:35:46 1804  /******************************************************************************/
15:35:46 1805  
15:35:46 1806  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
15:35:46 1807  /*
15:35:46 1808  Throws exceptions:
15:35:46 1809  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1810  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1811  */
15:35:46 1812  	 in_code	IN VARCHAR,
15:35:46 1813  	 out_result_set OUT SYS_REFCURSOR
15:35:46 1814  ) AS
15:35:46 1815  -- VARIABLES
15:35:46 1816  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
15:35:46 1817  temp_gift_certificate_id NUMBER;
15:35:46 1818  -- EXCEPTIONS
15:35:46 1819  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
15:35:46 1820  BEGIN
15:35:46 1821  
15:35:46 1822  	 BEGIN
15:35:46 1823  	   SELECT
15:35:46 1824  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
15:35:46 1825  	   FROM
15:35:46 1826  	     GIFT_CERTIFICATE
15:35:46 1827  	   WHERE
15:35:46 1828  	     GIFT_CERTIFICATE.CODE = in_code;
15:35:46 1829  	   EXCEPTION
15:35:46 1830  	     WHEN NO_DATA_FOUND THEN
15:35:46 1831  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
15:35:46 1832  	 END;
15:35:46 1833  
15:35:46 1834  	 -- Select all gift certificates with given code
15:35:46 1835  	 OPEN out_result_set FOR
15:35:46 1836  	 SELECT
15:35:46 1837  	   gc.EXPIRATION_DATE,
15:35:46 1838  	   ch.name,
15:35:46 1839  	   ch.id,
15:35:46 1840  	   gc.sender_email,
15:35:46 1841  	   gc.sender_name,
15:35:46 1842  	   gc.recipient_email,
15:35:46 1843  	   gc.recipient_name,
15:35:46 1844  	   gc.purchase_date,
15:35:46 1845  	   gc.redemption_date,
15:35:46 1846  	   gc.purchaser_group_id,
15:35:46 1847  	   gc.redeemer_group_id,
15:35:46 1848  	   gc.gift_message,
15:35:46 1849  	   ocmd.value redemption_offer_chain_ids,
15:35:46 1850  	   s.offer_chain_id redeemed_offer_chain_id,
15:35:46 1851  	   gc.recipient_notify_date,
15:35:46 1852  	   gc.gift_certificate_status_id,
15:35:46 1853  	   gc.purchase_invoice_id,
15:35:46 1854  	   gc.finalized_invoice_id
15:35:46 1855  	 FROM
15:35:46 1856  	   GIFT_CERTIFICATE gc
15:35:46 1857  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
15:35:46 1858  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
15:35:46 1859  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
15:35:46 1860  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
15:35:46 1861  	 WHERE
15:35:46 1862  	   gc.code = in_code;
15:35:46 1863  
15:35:46 1864  EXCEPTION
15:35:46 1865  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
15:35:46 1866  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1867  	   SPROC_NAME, 'No such gift certificate');
15:35:46 1868  WHEN OTHERS THEN
15:35:46 1869  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1870  	   SPROC_NAME, 'Unknown Error', SQLERRM);
15:35:46 1871  END;
15:35:46 1872  
15:35:46 1873  /******************************************************************************/
15:35:46 1874  
15:35:46 1875  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
15:35:46 1876  /*
15:35:46 1877  Throws exceptions:
15:35:46 1878  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1879  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1880  */
15:35:46 1881  	 in_gift_certificate_id IN NUMBER,
15:35:46 1882  	 out_result_set 	OUT SYS_REFCURSOR
15:35:46 1883  ) AS
15:35:46 1884  -- VARIABLES
15:35:46 1885  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
15:35:46 1886  temp_gift_certificate_id NUMBER;
15:35:46 1887  -- EXCEPTIONS
15:35:46 1888  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
15:35:46 1889  BEGIN
15:35:46 1890  
15:35:46 1891  	 BEGIN
15:35:46 1892  	   SELECT
15:35:46 1893  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
15:35:46 1894  	   FROM
15:35:46 1895  	     GIFT_CERTIFICATE
15:35:46 1896  	   WHERE
15:35:46 1897  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
15:35:46 1898  	   EXCEPTION
15:35:46 1899  	     WHEN NO_DATA_FOUND THEN
15:35:46 1900  	       RAISE BAD_GIFT_CERTIFICATE_ID;
15:35:46 1901  	 END;
15:35:46 1902  
15:35:46 1903  	 -- Select all gift certificates with given code
15:35:46 1904  	 OPEN out_result_set FOR
15:35:46 1905  	 SELECT
15:35:46 1906  	   gc.EXPIRATION_DATE,
15:35:46 1907  	   ch.name,
15:35:46 1908  	   ch.id,
15:35:46 1909  	   gc.sender_email,
15:35:46 1910  	   gc.sender_name,
15:35:46 1911  	   gc.recipient_email,
15:35:46 1912  	   gc.recipient_name,
15:35:46 1913  	   gc.purchase_date,
15:35:46 1914  	   gc.redemption_date,
15:35:46 1915  	   gc.purchaser_group_id,
15:35:46 1916  	   gc.redeemer_group_id,
15:35:46 1917  	   gc.code,
15:35:46 1918  	   gc.gift_message,
15:35:46 1919  	   gc.recipient_notify_date
15:35:46 1920  	 FROM
15:35:46 1921  	   GIFT_CERTIFICATE gc
15:35:46 1922  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
15:35:46 1923  	 WHERE
15:35:46 1924  	   gc.id = in_gift_certificate_id;
15:35:46 1925  
15:35:46 1926  EXCEPTION
15:35:46 1927  WHEN BAD_GIFT_CERTIFICATE_ID THEN
15:35:46 1928  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1929  	   SPROC_NAME, 'No such gift certificate');
15:35:46 1930  WHEN OTHERS THEN
15:35:46 1931  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1932  	   SPROC_NAME, 'Unknown Error', SQLERRM);
15:35:46 1933  END GET_GIFT_CERTIFICATE_BY_ID;
15:35:46 1934  
15:35:46 1935  /******************************************************************************/
15:35:46 1936  
15:35:46 1937  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
15:35:46 1938  	 in_group_id		IN  NUMBER,
15:35:46 1939  	 out_instrument_type_id OUT NUMBER,
15:35:46 1940  	 out_instrument_id	OUT NUMBER
15:35:46 1941  ) AS
15:35:46 1942  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
15:35:46 1943  BEGIN
15:35:46 1944  
15:35:46 1945  	 SELECT
15:35:46 1946  	   ACCOUNT.INSTRUMENT_TYPE_ID,
15:35:46 1947  	   ACCOUNT.INSTRUMENT_ID
15:35:46 1948  	   into
15:35:46 1949  	   out_instrument_type_id,
15:35:46 1950  	   out_instrument_id
15:35:46 1951  	 FROM
15:35:46 1952  	   ACCOUNT
15:35:46 1953  	 WHERE
15:35:46 1954  	   ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1955  
15:35:46 1956  EXCEPTION
15:35:46 1957  WHEN NO_DATA_FOUND THEN
15:35:46 1958  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1959  	   SPROC_NAME, 'Bad group id');
15:35:46 1960  WHEN OTHERS THEN
15:35:46 1961  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1962  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1963  END GET_DEF_FINANCIAL_INSTRUMENT;
15:35:46 1964  
15:35:46 1965  /******************************************************************************/
15:35:46 1966  
15:35:46 1967  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
15:35:46 1968  	 in_group_id	       IN NUMBER,
15:35:46 1969  	 in_instrument_type_id IN NUMBER,
15:35:46 1970  	 in_instrument_id      IN NUMBER,
15:35:46 1971  	 in_updated_by	       IN VARCHAR2
15:35:46 1972  ) AS
15:35:46 1973  -- VARIABLES
15:35:46 1974  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
15:35:46 1975  var_account_id	      NUMBER;
15:35:46 1976  -- EXCEPTIONS
15:35:46 1977  BAD_GROUP_ID	      EXCEPTION;
15:35:46 1978  BAD_CREDIT_CARD	      EXCEPTION;
15:35:46 1979  BAD_PAYPAL	      EXCEPTION;
15:35:46 1980  BAD_INSTRUMENT_TYPE    EXCEPTION;
15:35:46 1981  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:46 1982  BEGIN
15:35:46 1983  
15:35:46 1984  	 -- get account id
15:35:46 1985  	 BEGIN
15:35:46 1986  	   SELECT
15:35:46 1987  	     ACCOUNT.ID into var_account_id
15:35:46 1988  	   FROM
15:35:46 1989  	     ACCOUNT
15:35:46 1990  	   WHERE
15:35:46 1991  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1992  	   EXCEPTION
15:35:46 1993  	     WHEN NO_DATA_FOUND THEN
15:35:46 1994  	       RAISE BAD_GROUP_ID;
15:35:46 1995  	 END;
15:35:46 1996  
15:35:46 1997  	 -- Chech that given instrument exists
15:35:46 1998  	 IF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD THEN
15:35:46 1999  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 2000  	     RAISE BAD_CREDIT_CARD;
15:35:46 2001  	   END IF;
15:35:46 2002  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL THEN
15:35:46 2003  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 2004  	     RAISE BAD_PAYPAL;
15:35:46 2005  	   END IF;
15:35:46 2006  	 ELSE
15:35:46 2007  	   RAISE BAD_INSTRUMENT_TYPE;
15:35:46 2008  	 END IF;
15:35:46 2009  
15:35:46 2010  	 -- update account information
15:35:46 2011  	 PROCS_ACCOUNT_CRU_V17.UPDATE_ACCOUNT(
15:35:46 2012  	   in_account_id	 => var_account_id,
15:35:46 2013  	   in_updated_by	 => in_updated_by,
15:35:46 2014  	   in_instrument_type_id => in_instrument_type_id,
15:35:46 2015  	   in_instrument_id	 => in_instrument_id
15:35:46 2016  	 );
15:35:46 2017  
15:35:46 2018  EXCEPTION
15:35:46 2019  WHEN BAD_GROUP_ID THEN
15:35:46 2020  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2021  	   SPROC_NAME, 'No such account');
15:35:46 2022  WHEN BAD_CREDIT_CARD THEN
15:35:46 2023  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2024  	   SPROC_NAME, 'Could not find credit card with given ID');
15:35:46 2025  WHEN BAD_PAYPAL THEN
15:35:46 2026  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2027  	   SPROC_NAME, 'Could not find paypal with given ID');
15:35:46 2028  WHEN BAD_INSTRUMENT_TYPE THEN
15:35:46 2029  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 2030  	   SPROC_NAME, 'Bad instrument type id');
15:35:46 2031  WHEN OTHERS THEN
15:35:46 2032  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2033  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2034  END SET_DEF_FINANCIAL_INSTRUMENT;
15:35:46 2035  
15:35:46 2036  /******************************************************************************/
15:35:46 2037  
15:35:46 2038  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
15:35:46 2039  	 in_group_id IN NUMBER
15:35:46 2040  ) AS
15:35:46 2041  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
15:35:46 2042  -- VARIABLES
15:35:46 2043  var_account_id NUMBER;
15:35:46 2044  -- EXCEPTIONS
15:35:46 2045  BAD_GROUP_ID	 EXCEPTION;
15:35:46 2046  EXCEPTION_MESSAGE VARCHAR2(1024);
15:35:46 2047  BEGIN
15:35:46 2048  
15:35:46 2049  	 BEGIN
15:35:46 2050  	   SELECT
15:35:46 2051  	     ACCOUNT.ID into var_account_id
15:35:46 2052  	   FROM
15:35:46 2053  	     ACCOUNT
15:35:46 2054  	   WHERE
15:35:46 2055  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 2056  	   EXCEPTION
15:35:46 2057  	     WHEN NO_DATA_FOUND THEN
15:35:46 2058  	       RAISE BAD_GROUP_ID;
15:35:46 2059  	 END;
15:35:46 2060  
15:35:46 2061  	 PROCS_ACCOUNT_CRU_V17.UPDATE_DEF_FIN_INSTRUMENT(
15:35:46 2062  	   in_account_id => var_account_id,
15:35:46 2063  	   in_instrument_type_id => NULL,
15:35:46 2064  	   in_instrument_id => NULL,
15:35:46 2065  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
15:35:46 2066  	 );
15:35:46 2067  
15:35:46 2068  EXCEPTION
15:35:46 2069  WHEN BAD_GROUP_ID THEN
15:35:46 2070  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2071  	   SPROC_NAME, 'No such group id');
15:35:46 2072  WHEN OTHERS THEN
15:35:46 2073  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2074  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2075  END DEL_DEF_FINANCIAL_INSTRUMENT;
15:35:46 2076  
15:35:46 2077  /******************************************************************************/
15:35:46 2078  
15:35:46 2079  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:35:46 2080  	 in_credit_card_id IN  NUMBER,
15:35:46 2081  	 out_result_set    OUT SYS_REFCURSOR
15:35:46 2082  ) AS
15:35:46 2083  -- VARIABLES
15:35:46 2084  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
15:35:46 2085  temp_cc_count NUMBER;
15:35:46 2086  
15:35:46 2087  -- EXCEPTIONS
15:35:46 2088  BAD_CREDIT_CARD_ID EXCEPTION;
15:35:46 2089  BEGIN
15:35:46 2090  
15:35:46 2091  	 -- Check that credit card exists
15:35:46 2092  	 SELECT
15:35:46 2093  	   COUNT(*) into temp_cc_count
15:35:46 2094  	 FROM
15:35:46 2095  	   CREDIT_CARD
15:35:46 2096  	 WHERE
15:35:46 2097  	   CREDIT_CARD.ID = in_credit_card_id;
15:35:46 2098  	 IF temp_cc_count = 0 THEN
15:35:46 2099  	   RAISE BAD_CREDIT_CARD_ID;
15:35:46 2100  	 END IF;
15:35:46 2101  
15:35:46 2102  	 -- Get data
15:35:46 2103  	 OPEN out_result_set FOR
15:35:46 2104  	 SELECT
15:35:46 2105  	   CREDIT_CARD.ID,
15:35:46 2106  	   CREDIT_CARD.ACCOUNT_ID,
15:35:46 2107  	   CREDIT_CARD.INSTRUMENT_NAME,
15:35:46 2108  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
15:35:46 2109  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
15:35:46 2110  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
15:35:46 2111  	   CREDIT_CARD.STATE,
15:35:46 2112  	   CREDIT_CARD.CITY,
15:35:46 2113  	   CREDIT_CARD.POSTAL_CODE,
15:35:46 2114  	   CREDIT_CARD.COUNTRY,
15:35:46 2115  	   CREDIT_CARD.LAST_FOUR_CC,
15:35:46 2116  	   CREDIT_CARD.EXPIRATION_DATE,
15:35:46 2117  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
15:35:46 2118  	   CREDIT_CARD.SECRET_TOKEN,
15:35:46 2119  	   CREDIT_CARD.CREATE_DATE,
15:35:46 2120  	   CREDIT_CARD.CREATED_BY,
15:35:46 2121  	   CREDIT_CARD.UPDATE_DATE,
15:35:46 2122  	   CREDIT_CARD.UPDATED_BY,
15:35:46 2123  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
15:35:46 2124  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
15:35:46 2125  	   CREDIT_CARD.PRIVATE_LAST_NAME,
15:35:46 2126  	       CREDIT_CARD.CHASE_PROFILE_ID
15:35:46 2127  	 FROM
15:35:46 2128  	   CREDIT_CARD
15:35:46 2129  	 WHERE
15:35:46 2130  	   CREDIT_CARD.ID = in_credit_card_id;
15:35:46 2131  
15:35:46 2132  EXCEPTION
15:35:46 2133  WHEN BAD_CREDIT_CARD_ID THEN
15:35:46 2134  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2135  	   SPROC_NAME, 'No such credit card');
15:35:46 2136  WHEN OTHERS THEN
15:35:46 2137  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2138  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2139  END GET_CREDIT_CARD_BY_ID;
15:35:46 2140  
15:35:46 2141  /******************************************************************************/
15:35:46 2142  
15:35:46 2143  PROCEDURE GET_PAYPAL_BY_ID (
15:35:46 2144  	 in_paypal_id	IN  NUMBER,
15:35:46 2145  	 out_result_set OUT SYS_REFCURSOR
15:35:46 2146  ) AS
15:35:46 2147  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
15:35:46 2148  -- VARIABLES
15:35:46 2149  temp_pp_count NUMBER;
15:35:46 2150  -- EXCEPTIONS
15:35:46 2151  BAD_PAYPAL_ID EXCEPTION;
15:35:46 2152  BEGIN
15:35:46 2153  
15:35:46 2154  	 -- Check that credit card exists
15:35:46 2155  	 SELECT
15:35:46 2156  	   COUNT(*) into temp_pp_count
15:35:46 2157  	 FROM
15:35:46 2158  	   PAYPAL
15:35:46 2159  	 WHERE
15:35:46 2160  	   PAYPAL.ID = in_paypal_id;
15:35:46 2161  	 IF temp_pp_count = 0 THEN
15:35:46 2162  	   RAISE BAD_PAYPAL_ID;
15:35:46 2163  	 END IF;
15:35:46 2164  
15:35:46 2165  	 OPEN out_result_set FOR
15:35:46 2166  	 SELECT
15:35:46 2167  	   ID,
15:35:46 2168  	   ACCOUNT_ID,
15:35:46 2169  	   INSTRUMENT_NAME,
15:35:46 2170  	   PRIVATE_EMAIL_ADDRESS,
15:35:46 2171  	   CREATE_DATE,
15:35:46 2172  	   CREATED_BY,
15:35:46 2173  	   UPDATE_DATE,
15:35:46 2174  	   UPDATED_BY,
15:35:46 2175  	   PAYPAL_STATUS_ID,
15:35:46 2176  	   PRIVATE_STREET_ADDRESS,
15:35:46 2177  	   PRIVATE_STREET_ADDRESS2,
15:35:46 2178  	   STATE,
15:35:46 2179  	   CITY,
15:35:46 2180  	   POSTAL_CODE,
15:35:46 2181  	   COUNTRY,
15:35:46 2182  	   EXPIRATION_DATE,
15:35:46 2183  	   SECRET_TOKEN
15:35:46 2184  	 FROM
15:35:46 2185  	   PAYPAL
15:35:46 2186  	 WHERE
15:35:46 2187  	   ID = in_paypal_id;
15:35:46 2188  
15:35:46 2189  EXCEPTION
15:35:46 2190  WHEN BAD_PAYPAL_ID THEN
15:35:46 2191  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2192  	   SPROC_NAME, 'No such paypal');
15:35:46 2193  WHEN OTHERS THEN
15:35:46 2194  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2195  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2196  END GET_PAYPAL_BY_ID;
15:35:46 2197  
15:35:46 2198  /******************************************************************************/
15:35:46 2199  
15:35:46 2200  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
15:35:46 2201  /*
15:35:46 2202  	 Returns GLOBAL_CONSTANTS_V17.TRUE if system can disable credit card
15:35:46 2203  	 GLOBAL_CONSTANTS_V17.FALSE else
15:35:46 2204  */
15:35:46 2205  	 in_credit_card_id NUMBER
15:35:46 2206  ) RETURN NUMBER AS
15:35:46 2207  BEGIN
15:35:46 2208  	 -- STUB
15:35:46 2209  	 RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:46 2210  END F_CAN_DISABLE_CREDIT_CARD;
15:35:46 2211  
15:35:46 2212  /******************************************************************************/
15:35:46 2213  
15:35:46 2214  PROCEDURE GET_PURCHASED_GCERTIFICATES (
15:35:46 2215  	 in_group_id	IN NUMBER,
15:35:46 2216  	 out_result_set OUT SYS_REFCURSOR
15:35:46 2217  ) AS
15:35:46 2218  -- VARIABLES
15:35:46 2219  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
15:35:46 2220  var_account_id NUMBER;
15:35:46 2221  -- EXCEPTIONS
15:35:46 2222  BAD_GROUP_ID EXCEPTION;
15:35:46 2223  BEGIN
15:35:46 2224  
15:35:46 2225  	 BEGIN
15:35:46 2226  	   SELECT
15:35:46 2227  	     ACCOUNT.ID into var_account_id
15:35:46 2228  	   FROM
15:35:46 2229  	     ACCOUNT
15:35:46 2230  	   WHERE
15:35:46 2231  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 2232  	   EXCEPTION
15:35:46 2233  	     WHEN NO_DATA_FOUND THEN
15:35:46 2234  	       RAISE BAD_GROUP_ID;
15:35:46 2235  	 END;
15:35:46 2236  
15:35:46 2237  	 OPEN out_result_set FOR
15:35:46 2238  	 SELECT
15:35:46 2239  	   GIFT_CERTIFICATE.CODE,
15:35:46 2240  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
15:35:46 2241  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
15:35:46 2242  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
15:35:46 2243  	   GIFT_CERTIFICATE.SENDER_EMAIL,
15:35:46 2244  	   GIFT_CERTIFICATE.SENDER_NAME,
15:35:46 2245  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
15:35:46 2246  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
15:35:46 2247  	   GIFT_CERTIFICATE.PURCHASE_DATE,
15:35:46 2248  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
15:35:46 2249  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
15:35:46 2250  	 FROM
15:35:46 2251  	   GIFT_CERTIFICATE
15:35:46 2252  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 2253  	 WHERE
15:35:46 2254  	   ROWNUM <= 100 AND
15:35:46 2255  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
15:35:46 2256  
15:35:46 2257  EXCEPTION
15:35:46 2258  WHEN BAD_GROUP_ID THEN
15:35:46 2259  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2260  	   SPROC_NAME, 'No such group id');
15:35:46 2261  WHEN OTHERS THEN
15:35:46 2262  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2263  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2264  END GET_PURCHASED_GCERTIFICATES;
15:35:46 2265  
15:35:46 2266  /******************************************************************************/
15:35:46 2267  
15:35:46 2268  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
15:35:46 2269  	 in_gift_certificate_id IN NUMBER,
15:35:46 2270  	 in_charge_id		IN NUMBER,
15:35:46 2271  	 out_result		OUT NUMBER
15:35:46 2272  ) AS
15:35:46 2273  -- VARIABLES
15:35:46 2274  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
15:35:46 2275  var_invoice_id	    NUMBER;
15:35:46 2276  var_offer_chain_id   NUMBER;
15:35:46 2277  var_offer_chain_s_id NUMBER;
15:35:46 2278  -- EXCEPTIONS
15:35:46 2279  BAD_CHARGE_ID		 EXCEPTION;
15:35:46 2280  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
15:35:46 2281  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
15:35:46 2282  BEGIN
15:35:46 2283  
15:35:46 2284  	 BEGIN
15:35:46 2285  	   SELECT
15:35:46 2286  	     CHARGE.INVOICE_ID into var_invoice_id
15:35:46 2287  	   FROM
15:35:46 2288  	     CHARGE
15:35:46 2289  	   WHERE
15:35:46 2290  	     CHARGE.ID = in_charge_id;
15:35:46 2291  	   EXCEPTION
15:35:46 2292  	     WHEN NO_DATA_FOUND THEN
15:35:46 2293  	       RAISE BAD_CHARGE_ID;
15:35:46 2294  	 END;
15:35:46 2295  
15:35:46 2296  	 BEGIN
15:35:46 2297  	   SELECT
15:35:46 2298  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
15:35:46 2299  	   FROM
15:35:46 2300  	     GIFT_CERTIFICATE
15:35:46 2301  	   WHERE
15:35:46 2302  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
15:35:46 2303  	   EXCEPTION
15:35:46 2304  	     WHEN NO_DATA_FOUND THEN
15:35:46 2305  	       RAISE BAD_GIFT_CERTIFICATE_ID;
15:35:46 2306  	 END;
15:35:46 2307  
15:35:46 2308  	 BEGIN
15:35:46 2309  	   SELECT
15:35:46 2310  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
15:35:46 2311  	   FROM
15:35:46 2312  	     SUBSCRIPTION
15:35:46 2313  	   WHERE
15:35:46 2314  	     SUBSCRIPTION.ID IN (
15:35:46 2315  	       SELECT DISTINCT
15:35:46 2316  		 LICENSE.SUBSCRIPTION_ID
15:35:46 2317  	       FROM
15:35:46 2318  		 LICENSE
15:35:46 2319  	       WHERE
15:35:46 2320  		 LICENSE.INVOICE_ID = var_invoice_id
15:35:46 2321  	     );
15:35:46 2322  	   EXCEPTION
15:35:46 2323  	     WHEN NO_DATA_FOUND THEN
15:35:46 2324  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
15:35:46 2325  	 END;
15:35:46 2326  
15:35:46 2327  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
15:35:46 2328  	   out_result := GLOBAL_CONSTANTS_V17.TRUE;
15:35:46 2329  	 ELSE
15:35:46 2330  	   out_result := GLOBAL_CONSTANTS_V17.FALSE;
15:35:46 2331  	 END IF;
15:35:46 2332  
15:35:46 2333  EXCEPTION
15:35:46 2334  WHEN BAD_CHARGE_ID THEN
15:35:46 2335  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2336  	   SPROC_NAME, 'No such charge');
15:35:46 2337  WHEN BAD_GIFT_CERTIFICATE_ID THEN
15:35:46 2338  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2339  	   SPROC_NAME, 'No such gift certificate');
15:35:46 2340  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
15:35:46 2341  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2342  	   SPROC_NAME, 'Could not find subscription for given charge');
15:35:46 2343  WHEN OTHERS THEN
15:35:46 2344  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2345  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2346  END IS_GCERT_FOR_PROPER_OFFER;
15:35:46 2347  
15:35:46 2348  /******************************************************************************/
15:35:46 2349  
15:35:46 2350  FUNCTION IS_CREDIT_CARD_EXISTS (
15:35:46 2351  /*
15:35:46 2352  GLOBAL_CONSTANTS_V17.TRUE - if instrument exists
15:35:46 2353  GLOBAL_CONSTANTS_V17.FALSE - else
15:35:46 2354  */
15:35:46 2355  	 in_credit_card_id IN NUMBER
15:35:46 2356  ) RETURN NUMBER AS
15:35:46 2357  -- VARIABLES
15:35:46 2358  var_cc_count NUMBER;
15:35:46 2359  BEGIN
15:35:46 2360  	 SELECT
15:35:46 2361  	   COUNT(*) into var_cc_count
15:35:46 2362  	 FROM
15:35:46 2363  	   CREDIT_CARD
15:35:46 2364  	 WHERE
15:35:46 2365  	   CREDIT_CARD.ID = in_credit_card_id;
15:35:46 2366  
15:35:46 2367  	 IF var_cc_count = 0 THEN
15:35:46 2368  	   RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:46 2369  	 ELSE
15:35:46 2370  	   RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:46 2371  	 END IF;
15:35:46 2372  
15:35:46 2373  END IS_CREDIT_CARD_EXISTS;
15:35:46 2374  
15:35:46 2375  /******************************************************************************/
15:35:46 2376  
15:35:46 2377  FUNCTION IS_PAYPAL_EXISTS (
15:35:46 2378  /*
15:35:46 2379  GLOBAL_CONSTANTS_V17.TRUE - if instrument exists
15:35:46 2380  GLOBAL_CONSTANTS_V17.FALSE - else
15:35:46 2381  */
15:35:46 2382  	 in_paypal_id IN NUMBER
15:35:46 2383  ) RETURN NUMBER AS
15:35:46 2384  -- VARIABLES
15:35:46 2385  var_pp_count NUMBER;
15:35:46 2386  BEGIN
15:35:46 2387  	 SELECT
15:35:46 2388  	   COUNT(*) into var_pp_count
15:35:46 2389  	 FROM
15:35:46 2390  	   PAYPAL
15:35:46 2391  	 WHERE
15:35:46 2392  	   PAYPAL.ID = in_paypal_id;
15:35:46 2393  
15:35:46 2394  	 IF var_pp_count = 0 THEN
15:35:46 2395  	   RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:46 2396  	 ELSE
15:35:46 2397  	   RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:46 2398  	 END IF;
15:35:46 2399  
15:35:46 2400  END IS_PAYPAL_EXISTS;
15:35:46 2401  
15:35:46 2402  /******************************************************************************/
15:35:46 2403  
15:35:46 2404  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
15:35:46 2405  /*
15:35:46 2406  GLOBAL_CONSTANTS_V17.TRUE - if instrument exists
15:35:46 2407  GLOBAL_CONSTANTS_V17.FALSE - else
15:35:46 2408  */
15:35:46 2409  	 in_gift_certificate_id IN NUMBER
15:35:46 2410  ) RETURN NUMBER AS
15:35:46 2411  -- VARIABLES
15:35:46 2412  var_gc_count NUMBER;
15:35:46 2413  BEGIN
15:35:46 2414  	 SELECT
15:35:46 2415  	   COUNT(*) into var_gc_count
15:35:46 2416  	 FROM
15:35:46 2417  	   GIFT_CERTIFICATE
15:35:46 2418  	 WHERE
15:35:46 2419  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
15:35:46 2420  
15:35:46 2421  	 IF var_gc_count = 0 THEN
15:35:46 2422  	   RETURN GLOBAL_CONSTANTS_V17.FALSE;
15:35:46 2423  	 ELSE
15:35:46 2424  	   RETURN GLOBAL_CONSTANTS_V17.TRUE;
15:35:46 2425  	 END IF;
15:35:46 2426  
15:35:46 2427  END IS_GIFT_CERTIFICATE_EXISTS;
15:35:46 2428  
15:35:46 2429  /******************************************************************************/
15:35:46 2430  
15:35:46 2431  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
15:35:46 2432  	 in_credit_card_id IN NUMBER,
15:35:46 2433  	 out_group_id	   OUT NUMBER
15:35:46 2434  ) AS
15:35:46 2435  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
15:35:46 2436  BEGIN
15:35:46 2437  	 SELECT
15:35:46 2438  	   ACCOUNT.GROUP_ID into out_group_id
15:35:46 2439  	 FROM
15:35:46 2440  	   CREDIT_CARD
15:35:46 2441  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
15:35:46 2442  	 WHERE
15:35:46 2443  	   CREDIT_CARD.ID = in_credit_card_id;
15:35:46 2444  EXCEPTION
15:35:46 2445  WHEN NO_DATA_FOUND THEN
15:35:46 2446  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2447  	   SPROC_NAME, 'No such credit card');
15:35:46 2448  WHEN OTHERS THEN
15:35:46 2449  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2450  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2451  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
15:35:46 2452  
15:35:46 2453  /******************************************************************************/
15:35:46 2454  
15:35:46 2455  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
15:35:46 2456  	 in_paypal_id IN NUMBER,
15:35:46 2457  	 out_group_id OUT NUMBER
15:35:46 2458  ) AS
15:35:46 2459  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
15:35:46 2460  BEGIN
15:35:46 2461  	 SELECT
15:35:46 2462  	   ACCOUNT.GROUP_ID into out_group_id
15:35:46 2463  	 FROM
15:35:46 2464  	   PAYPAL
15:35:46 2465  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
15:35:46 2466  	 WHERE
15:35:46 2467  	   PAYPAL.ID = in_paypal_id;
15:35:46 2468  EXCEPTION
15:35:46 2469  WHEN NO_DATA_FOUND THEN
15:35:46 2470  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2471  	   SPROC_NAME, 'No such paypal');
15:35:46 2472  WHEN OTHERS THEN
15:35:46 2473  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2474  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2475  END GET_GROUP_ID_BY_PAYPAL_ID;
15:35:46 2476  
15:35:46 2477  /******************************************************************************/
15:35:46 2478  
15:35:46 2479  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
15:35:46 2480  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
15:35:46 2481  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
15:35:46 2482  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
15:35:46 2483  ) AS
15:35:46 2484  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
15:35:46 2485  -- EXCEPTIONS
15:35:46 2486  BAD_CREDIT_CARD_ID     EXCEPTION;
15:35:46 2487  BAD_STATUS_ID	      EXCEPTION;
15:35:46 2488  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:46 2489  BEGIN
15:35:46 2490  
15:35:46 2491  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V17.CREDIT_CARD_ACTIVE
15:35:46 2492  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V17.CREDIT_CARD_INVALID
15:35:46 2493  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V17.CREDIT_CARD_DISABLED
15:35:46 2494  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V17.CREDIT_CARD_EXPIRED THEN
15:35:46 2495  	   RAISE BAD_STATUS_ID;
15:35:46 2496  	 END IF;
15:35:46 2497  
15:35:46 2498  	 PROCS_FIN_INSTRUMENTS_CRU_V17.UPDATE_CREDIT_CARD(
15:35:46 2499  	   in_credit_card_id	    => in_credit_card_id,
15:35:46 2500  	   in_updated_by	    => in_updated_by,
15:35:46 2501  	   in_credit_card_status_id => in_credit_card_status_id
15:35:46 2502  	 );
15:35:46 2503  
15:35:46 2504  	 IF SQL%ROWCOUNT = 0 THEN
15:35:46 2505  	   RAISE BAD_CREDIT_CARD_ID;
15:35:46 2506  	 END IF;
15:35:46 2507  
15:35:46 2508  EXCEPTION
15:35:46 2509  WHEN BAD_CREDIT_CARD_ID THEN
15:35:46 2510  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2511  	   SPROC_NAME, 'No such credit card');
15:35:46 2512  WHEN BAD_STATUS_ID THEN
15:35:46 2513  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 2514  	   SPROC_NAME, 'Bad credit card status id');
15:35:46 2515  WHEN OTHERS THEN
15:35:46 2516  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2517  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2518  END UPDATE_CREDIT_CARD_STATUS;
15:35:46 2519  
15:35:46 2520  /******************************************************************************/
15:35:46 2521  
15:35:46 2522  PROCEDURE UPDATE_PAYPAL_STATUS (
15:35:46 2523  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
15:35:46 2524  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
15:35:46 2525  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
15:35:46 2526  ) AS
15:35:46 2527  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
15:35:46 2528  -- EXCEPTIONS
15:35:46 2529  BAD_PAYPAL_ID	      EXCEPTION;
15:35:46 2530  BAD_STATUS_ID	      EXCEPTION;
15:35:46 2531  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:46 2532  BEGIN
15:35:46 2533  
15:35:46 2534  	 IF in_paypal_status_id != GLOBAL_STATUSES_V17.PAYPAL_ACTIVE
15:35:46 2535  	   AND in_paypal_status_id != GLOBAL_STATUSES_V17.PAYPAL_INACTIVE
15:35:46 2536  	   AND in_paypal_status_id != GLOBAL_STATUSES_V17.PAYPAL_FROZEN THEN
15:35:46 2537  	   RAISE BAD_STATUS_ID;
15:35:46 2538  	 END IF;
15:35:46 2539  
15:35:46 2540  	 PROCS_FIN_INSTRUMENTS_CRU_V17.UPDATE_PAYPAL(
15:35:46 2541  	   in_paypal_id        => in_paypal_id,
15:35:46 2542  	   in_paypal_status_id => in_paypal_status_id,
15:35:46 2543  	   in_updated_by       => in_updated_by
15:35:46 2544  	 );
15:35:46 2545  
15:35:46 2546  	 IF SQL%ROWCOUNT = 0 THEN
15:35:46 2547  	   RAISE BAD_PAYPAL_ID;
15:35:46 2548  	 END IF;
15:35:46 2549  
15:35:46 2550  EXCEPTION
15:35:46 2551  WHEN BAD_PAYPAL_ID THEN
15:35:46 2552  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2553  	   SPROC_NAME, 'No such paypal');
15:35:46 2554  WHEN BAD_STATUS_ID THEN
15:35:46 2555  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 2556  	   SPROC_NAME, 'Bad paypal status id');
15:35:46 2557  WHEN OTHERS THEN
15:35:46 2558  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2559  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2560  END UPDATE_PAYPAL_STATUS;
15:35:46 2561  
15:35:46 2562  /******************************************************************************/
15:35:46 2563  
15:35:46 2564  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
15:35:46 2565  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
15:35:46 2566  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
15:35:46 2567  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
15:35:46 2568  ) AS
15:35:46 2569  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
15:35:46 2570  -- EXCEPTIONS
15:35:46 2571  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
15:35:46 2572  BAD_STATUS_ID	       EXCEPTION;
15:35:46 2573  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:35:46 2574  BEGIN
15:35:46 2575  
15:35:46 2576  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_ACTIVE
15:35:46 2577  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_FINALIZED THEN
15:35:46 2578  	   RAISE BAD_STATUS_ID;
15:35:46 2579  	 END IF;
15:35:46 2580  
15:35:46 2581  	 PROCS_FIN_INSTRUMENTS_CRU_V17.UPDATE_GIFT_CERTIFICATE(
15:35:46 2582  	   in_gift_certificate_id	 => in_gift_certificate_id,
15:35:46 2583  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
15:35:46 2584  	   in_updated_by		 => in_updated_by
15:35:46 2585  	 );
15:35:46 2586  
15:35:46 2587  	 IF SQL%ROWCOUNT = 0 THEN
15:35:46 2588  	   RAISE BAD_GIFT_CERTIFICATE_ID;
15:35:46 2589  	 END IF;
15:35:46 2590  
15:35:46 2591  EXCEPTION
15:35:46 2592  WHEN BAD_GIFT_CERTIFICATE_ID THEN
15:35:46 2593  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2594  	   SPROC_NAME, 'No such gift certificate');
15:35:46 2595  WHEN BAD_STATUS_ID THEN
15:35:46 2596  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 2597  	   SPROC_NAME, 'Bad paypal status id');
15:35:46 2598  WHEN OTHERS THEN
15:35:46 2599  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2600  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2601  END UPDATE_GIFT_CERTIFICATE_STATUS;
15:35:46 2602  
15:35:46 2603  /******************************************************************************/
15:35:46 2604  
15:35:46 2605  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:35:46 2606  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:46 2607  	 out_result_set OUT SYS_REFCURSOR
15:35:46 2608  ) AS
15:35:46 2609  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
15:35:46 2610  -- VARIABLES
15:35:46 2611  temp_invoice_id NUMBER;
15:35:46 2612  -- EXCEPTIONS
15:35:46 2613  BAD_INVOICE_ID EXCEPTION;
15:35:46 2614  BEGIN
15:35:46 2615  
15:35:46 2616  	 BEGIN
15:35:46 2617  	   SELECT
15:35:46 2618  	     I.ID into temp_invoice_id
15:35:46 2619  	   FROM
15:35:46 2620  	     INVOICE I
15:35:46 2621  	   WHERE
15:35:46 2622  	     I.ID = in_invoice_id;
15:35:46 2623  	   EXCEPTION
15:35:46 2624  	     WHEN NO_DATA_FOUND THEN
15:35:46 2625  	       RAISE BAD_INVOICE_ID;
15:35:46 2626  	 END;
15:35:46 2627  
15:35:46 2628  	 OPEN out_result_set FOR
15:35:46 2629  	   SELECT
15:35:46 2630  	     gc.EXPIRATION_DATE,
15:35:46 2631  	     ch.name,
15:35:46 2632  	     ch.id offer_chain_id,
15:35:46 2633  	     gc.sender_email,
15:35:46 2634  	     gc.sender_name,
15:35:46 2635  	     gc.recipient_email,
15:35:46 2636  	     gc.recipient_name,
15:35:46 2637  	     gc.purchase_date,
15:35:46 2638  	     gc.redemption_date,
15:35:46 2639  	     gc.purchaser_group_id,
15:35:46 2640  	     gc.redeemer_group_id,
15:35:46 2641  	     gc.code,
15:35:46 2642  	     gc.gift_message,
15:35:46 2643  	     gc.recipient_notify_date,
15:35:46 2644  	     gc.id
15:35:46 2645  	   FROM
15:35:46 2646  	     GIFT_CERTIFICATE gc
15:35:46 2647  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
15:35:46 2648  	   WHERE
15:35:46 2649  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
15:35:46 2650  
15:35:46 2651  EXCEPTION
15:35:46 2652  WHEN BAD_INVOICE_ID THEN
15:35:46 2653  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2654  	   SPROC_NAME, 'No such invoice');
15:35:46 2655  WHEN OTHERS THEN
15:35:46 2656  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2658  END GET_GC_BY_PURCH_INVOICE_ID;
15:35:46 2659  
15:35:46 2660  
15:35:46 2661  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
15:35:46 2662  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:46 2663  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
15:35:46 2664  ) AS
15:35:46 2665  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
15:35:46 2666  -- VARIABLES
15:35:46 2667  temp_invoice_id NUMBER;
15:35:46 2668  -- EXCEPTIONS
15:35:46 2669  BAD_INVOICE_ID EXCEPTION;
15:35:46 2670  BEGIN
15:35:46 2671  
15:35:46 2672  	 BEGIN
15:35:46 2673  	   SELECT
15:35:46 2674  	     I.ID into temp_invoice_id
15:35:46 2675  	   FROM
15:35:46 2676  	     INVOICE I
15:35:46 2677  	   WHERE
15:35:46 2678  	     I.ID = in_invoice_id;
15:35:46 2679  	   EXCEPTION
15:35:46 2680  	     WHEN NO_DATA_FOUND THEN
15:35:46 2681  	       RAISE BAD_INVOICE_ID;
15:35:46 2682  	 END;
15:35:46 2683  
15:35:46 2684  	 BEGIN
15:35:46 2685  	   SELECT
15:35:46 2686  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
15:35:46 2687  	   FROM
15:35:46 2688  	     GIFT_CERTIFICATE
15:35:46 2689  	   WHERE
15:35:46 2690  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
15:35:46 2691  	   EXCEPTION
15:35:46 2692  	     WHEN NO_DATA_FOUND THEN
15:35:46 2693  	       out_gift_certificate_id := NULL;
15:35:46 2694  	 END;
15:35:46 2695  
15:35:46 2696  EXCEPTION
15:35:46 2697  WHEN BAD_INVOICE_ID THEN
15:35:46 2698  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2699  	   SPROC_NAME, 'No such invoice');
15:35:46 2700  WHEN OTHERS THEN
15:35:46 2701  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2702  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2703  END GET_GC_ID_BY_PURCH_INVOICE_ID;
15:35:46 2704  
15:35:46 2705  /******************************************************************************/
15:35:46 2706  
15:35:46 2707  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
15:35:46 2708  	 /*in_group_id		      IN NUMBER  -- TODO: should we pass group_id here?*/
15:35:46 2709  	 in_old_fin_instrument_id   IN NUMBER,
15:35:46 2710  	 in_old_fin_instrument_type IN NUMBER,
15:35:46 2711  	 in_new_fin_instrument_id   IN NUMBER,
15:35:46 2712  	 in_new_fin_instrument_type IN NUMBER,
15:35:46 2713  	 in_updated_by		    IN VARCHAR2
15:35:46 2714  ) AS
15:35:46 2715  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
15:35:46 2716  -- variables
15:35:46 2717  temp_out_transaction_id NUMBER;
15:35:46 2718  temp_out_charge_id      NUMBER;
15:35:46 2719  var_accounts_count      NUMBER;
15:35:46 2720  -- EXCEPTIONS
15:35:46 2721  BAD_OLD_CC   EXCEPTION;
15:35:46 2722  BAD_OLD_PP   EXCEPTION;
15:35:46 2723  BAD_OLD_TYPE EXCEPTION;
15:35:46 2724  BAD_NEW_CC   EXCEPTION;
15:35:46 2725  BAD_NEW_PP   EXCEPTION;
15:35:46 2726  BAD_NEW_TYPE EXCEPTION;
15:35:46 2727  DIFFERENT_OWNERS EXCEPTION;
15:35:46 2728  BEGIN
15:35:46 2729  
15:35:46 2730  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD THEN
15:35:46 2731  	   IF PROCS_FIN_INSTRUMENTS_V17.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 2732  	     -- throw exception: bad old credit card
15:35:46 2733  	     RAISE BAD_OLD_CC;
15:35:46 2734  	   END IF;
15:35:46 2735  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL THEN
15:35:46 2736  	   IF PROCS_FIN_INSTRUMENTS_V17.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 2737  	     -- throw exception: bad old paypal
15:35:46 2738  	     RAISE BAD_OLD_PP;
15:35:46 2739  	   END IF;
15:35:46 2740  	 ELSE
15:35:46 2741  	   -- throw exception: bad instrument type
15:35:46 2742  	   RAISE BAD_OLD_TYPE;
15:35:46 2743  	 END IF;
15:35:46 2744  
15:35:46 2745  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD THEN
15:35:46 2746  	   IF PROCS_FIN_INSTRUMENTS_V17.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 2747  	     -- throw exception: bad new credit card
15:35:46 2748  	     RAISE BAD_NEW_CC;
15:35:46 2749  	   END IF;
15:35:46 2750  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL THEN
15:35:46 2751  	   IF PROCS_FIN_INSTRUMENTS_V17.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 2752  	     -- throw exception: bad new paypal
15:35:46 2753  	     RAISE BAD_NEW_PP;
15:35:46 2754  	   END IF;
15:35:46 2755  	 ELSE
15:35:46 2756  	   -- throw exception: bad new instrument type
15:35:46 2757  	   RAISE BAD_NEW_TYPE;
15:35:46 2758  	 END IF;
15:35:46 2759  
15:35:46 2760  	 -- Check that owner of both instruments - same man
15:35:46 2761  
15:35:46 2762  	 SELECT count(1) into var_accounts_count FROM (
15:35:46 2763  	   SELECT
15:35:46 2764  	     CC.ACCOUNT_ID
15:35:46 2765  	   FROM
15:35:46 2766  	     CREDIT_CARD CC
15:35:46 2767  	   WHERE
15:35:46 2768  	     (
15:35:46 2769  	       CC.ID = in_old_fin_instrument_id
15:35:46 2770  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD
15:35:46 2771  	     )
15:35:46 2772  	     OR
15:35:46 2773  	     (
15:35:46 2774  	       CC.ID = in_new_fin_instrument_id
15:35:46 2775  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD
15:35:46 2776  	     )
15:35:46 2777  	   UNION
15:35:46 2778  	   SELECT
15:35:46 2779  	     PP.ACCOUNT_ID
15:35:46 2780  	   FROM
15:35:46 2781  	     PAYPAL PP
15:35:46 2782  	   WHERE
15:35:46 2783  	     (
15:35:46 2784  	       PP.ID = in_old_fin_instrument_id
15:35:46 2785  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL
15:35:46 2786  	     )
15:35:46 2787  	     OR
15:35:46 2788  	     (
15:35:46 2789  	       PP.ID = in_new_fin_instrument_id
15:35:46 2790  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL
15:35:46 2791  	     )
15:35:46 2792  	 )
15:35:46 2793  	 WHERE
15:35:46 2794  	   account_id IS NOT NULL;
15:35:46 2795  
15:35:46 2796  	 IF (var_accounts_count > 1) THEN
15:35:46 2797  	   -- Throw exception: different owners of instruments
15:35:46 2798  	   RAISE DIFFERENT_OWNERS;
15:35:46 2799  	 END IF;
15:35:46 2800  
15:35:46 2801  	 FOR f_sub IN (
15:35:46 2802  	   select
15:35:46 2803  	     s.id
15:35:46 2804  	   FROM
15:35:46 2805  	     subscription s
15:35:46 2806  	   WHERE
15:35:46 2807  	     (
15:35:46 2808  	       s.subscription_status_id = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE OR
15:35:46 2809  	       s.subscription_status_id = GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED
15:35:46 2810  	     )
15:35:46 2811  	     AND
15:35:46 2812  	     s.instrument_type_id = in_old_fin_instrument_type AND
15:35:46 2813  	     s.instrument_id = in_old_fin_instrument_id
15:35:46 2814  	 ) LOOP
15:35:46 2815  	   PROCS_SUBSCRIPTION_CRU_V17.UPDATE_SUBSCRIPTION(
15:35:46 2816  	     in_subscription_id => f_sub.id,
15:35:46 2817  	     in_instrument_type_id => in_new_fin_instrument_type,
15:35:46 2818  	     in_instrument_id => in_new_fin_instrument_id,
15:35:46 2819  	     in_updated_by => in_updated_by
15:35:46 2820  	   );
15:35:46 2821  	 END LOOP;
15:35:46 2822  
15:35:46 2823  	 FOR f_open_charge IN (
15:35:46 2824  	   select
15:35:46 2825  	     ch.id,
15:35:46 2826  	     ch.invoice_id,
15:35:46 2827  	     ch.transaction_id,
15:35:46 2828  	     ch.charge_amount
15:35:46 2829  	   FROM
15:35:46 2830  	     charge ch
15:35:46 2831  	   WHERE
15:35:46 2832  	     ch.instrument_type_id = in_old_fin_instrument_type
15:35:46 2833  	     AND ch.instrument_id = in_old_fin_instrument_id
15:35:46 2834  	     AND ch.charge_status_id = GLOBAL_STATUSES_V17.CHARGE_OPENED
15:35:46 2835  	 ) LOOP
15:35:46 2836  
15:35:46 2837  	   FOR f_pending_transaction IN (
15:35:46 2838  	     select
15:35:46 2839  	       id, transaction_amount, order_id, is_refund
15:35:46 2840  	     from
15:35:46 2841  	       transaction
15:35:46 2842  	     where
15:35:46 2843  	       id = f_open_charge.transaction_id
15:35:46 2844  	       and transaction_status_id = GLOBAL_STATUSES_V17.TRANSACTION_PENDING
15:35:46 2845  	   ) LOOP
15:35:46 2846  	     PROCS_TRANSACTION_V17.CREATE_TRANSACTION (
15:35:46 2847  	       in_transaction_id => NULL,
15:35:46 2848  	       in_status_id  => GLOBAL_STATUSES_V17.TRANSACTION_PENDING,
15:35:46 2849  	       in_amount     => f_pending_transaction.transaction_amount,
15:35:46 2850  	       in_created_by => in_updated_by,
15:35:46 2851  	       in_order_id   => null,
15:35:46 2852  	       in_is_refund  => f_pending_transaction.is_refund,
15:35:46 2853  	       out_transaction_id => temp_out_transaction_id
15:35:46 2854  	     );
15:35:46 2855  
15:35:46 2856  	     PROCS_TRANSACTION_V17.UPDATE_TRANSACTION_STATUS(
15:35:46 2857  	       in_transaction_id => f_pending_transaction.id,
15:35:46 2858  	       in_updated_by	 => in_updated_by,
15:35:46 2859  	       in_transaction_status_id  => GLOBAL_STATUSES_V17.TRANSACTION_CLOSED
15:35:46 2860  	     );
15:35:46 2861  
15:35:46 2862  	     -- Create new charge
15:35:46 2863  	     PROCS_CHARGE_V17.CREATE_CHARGE (
15:35:46 2864  	       in_invoice_id	     => f_open_charge.invoice_id,
15:35:46 2865  	       in_transaction_id     => temp_out_transaction_id,
15:35:46 2866  	       in_instrument_type_id => in_new_fin_instrument_type,
15:35:46 2867  	       in_instrument_id      => in_new_fin_instrument_id,
15:35:46 2868  	       in_charge_amount      => f_open_charge.charge_amount,
15:35:46 2869  	       in_created_by	     => in_updated_by,
15:35:46 2870  	       in_charge_status_id   => GLOBAL_STATUSES_V17.CHARGE_OPENED,
15:35:46 2871  	       out_charge_id	     => temp_out_charge_id
15:35:46 2872  	     );
15:35:46 2873  	     -- Cancel old charge
15:35:46 2874  	     PROCS_CHARGE_V17.UPDATE_CHARGE_STATUS(
15:35:46 2875  	       in_charge_id	   => f_open_charge.id,
15:35:46 2876  	       in_updated_by	   => in_updated_by,
15:35:46 2877  	       in_charge_status_id => GLOBAL_STATUSES_V17.CHARGE_CANCELED
15:35:46 2878  	     );
15:35:46 2879  
15:35:46 2880  	     PROCS_ADJUSTMENTS_V17.UPDATE_INVOICE_ADJUSTMENT(
15:35:46 2881  	       IN_INVOICE_ID => f_open_charge.invoice_id,
15:35:46 2882  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
15:35:46 2883  	       IN_CHARGE_ID => temp_out_charge_id,
15:35:46 2884  	       IN_UPDATED_BY => in_updated_by
15:35:46 2885  	     );
15:35:46 2886  
15:35:46 2887  	   END LOOP;
15:35:46 2888  	 END LOOP;
15:35:46 2889  
15:35:46 2890  EXCEPTION
15:35:46 2891  WHEN BAD_OLD_CC THEN
15:35:46 2892  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2893  	   SPROC_NAME, 'Trying to switch from non existing credit card');
15:35:46 2894  WHEN BAD_OLD_PP THEN
15:35:46 2895  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2896  	   SPROC_NAME, 'Trying to switch from non existing paypal');
15:35:46 2897  WHEN BAD_OLD_TYPE THEN
15:35:46 2898  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2899  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
15:35:46 2900  WHEN BAD_NEW_CC THEN
15:35:46 2901  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2902  	   SPROC_NAME, 'Trying to switch to non existing credit card');
15:35:46 2903  WHEN BAD_NEW_PP THEN
15:35:46 2904  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2905  	   SPROC_NAME, 'Trying to switch to non existing paypal');
15:35:46 2906  WHEN BAD_NEW_TYPE THEN
15:35:46 2907  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 2908  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
15:35:46 2909  WHEN DIFFERENT_OWNERS THEN
15:35:46 2910  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 2911  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
15:35:46 2912  WHEN OTHERS THEN
15:35:46 2913  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 2914  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 2915  END SWITCH_FINANCIAL_INSTRUMENT;
15:35:46 2916  
15:35:46 2917  END PROCS_FIN_INSTRUMENTS_V17;
15:35:46 2918  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.22
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
15:35:46   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
15:35:46   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
15:35:46   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:46   7  ) AS
15:35:46   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
15:35:46   9  BEGIN
15:35:46  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V17.UPDATE_SUBSCRIPTION_SHARE (
15:35:46  11  	  in_id 		=> in_sub_share_id,
15:35:46  12  	  in_needs_entitlements => in_need_entitlements,
15:35:46  13  	  in_updated_by 	=> in_updater
15:35:46  14  	);
15:35:46  15  END UPDATE_SS_NEED_ENTITLEMENTS;
15:35:46  16  
15:35:46  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
15:35:46  18  	out_result_set OUT SYS_REFCURSOR
15:35:46  19  ) AS
15:35:46  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
15:35:46  21  BEGIN
15:35:46  22  	OPEN out_result_set FOR
15:35:46  23  	SELECT * FROM (
15:35:46  24  	  SELECT DISTINCT
15:35:46  25  	    ga.Subscription_Id,
15:35:46  26  	    A.Group_Id Borrower_Group_Id,
15:35:46  27  	    L.Offer_Id,
15:35:46  28  	    ss.id Subscription_Share_id
15:35:46  29  	  FROM
15:35:46  30  	    Subscription_Share Ss,
15:35:46  31  	    Group_Account Ga,
15:35:46  32  	    Account A,
15:35:46  33  	    License l
15:35:46  34  	  WHERE
15:35:46  35  	    Ss.Group_Account_Id        = ga.id
15:35:46  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V17.TRUE
15:35:46  37  	    AND Ss.Borrower_Account_Id = A.Id
15:35:46  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
15:35:46  39  	    AND ROWNUM <= 5000
15:35:46  40  	  ORDER BY dbms_random.value
15:35:46  41  ) WHERE
15:35:46  42  	ROWNUM <= 1000;
15:35:46  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
15:35:46  44  
15:35:46  45  PROCEDURE EXPIRE_SUB_SHARE(
15:35:46  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
15:35:46  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:46  48  ) AS
15:35:46  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
15:35:46  50  BEGIN
15:35:46  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V17.UPDATE_SUBSCRIPTION_SHARE (
15:35:46  52  	  in_id 	=> in_sub_share_id,
15:35:46  53  	  in_end_date	=> SYSDATE,
15:35:46  54  	  in_updated_by => in_updater,
15:35:46  55  	  in_needs_entitlements => 1
15:35:46  56  	);
15:35:46  57  END EXPIRE_SUB_SHARE;
15:35:46  58  
15:35:46  59  PROCEDURE EXPIRE_ALL_SHARES (
15:35:46  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
15:35:46  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:46  62  ) AS
15:35:46  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
15:35:46  64  BEGIN
15:35:46  65  	UPDATE SUBSCRIPTION_SHARE SET
15:35:46  66  	  END_DATE = SYSDATE,
15:35:46  67  	  UPDATED_BY = in_updated_by,
15:35:46  68  	  UPDATE_DATE = SYSDATE
15:35:46  69  	WHERE
15:35:46  70  	  GROUP_ACCOUNT_ID = in_group_account_id
15:35:46  71  	AND
15:35:46  72  	  SYSDATE < END_DATE;
15:35:46  73  EXCEPTION
15:35:46  74  	WHEN OTHERS THEN
15:35:46  75  	  PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
15:35:46  77  END EXPIRE_ALL_SHARES;
15:35:46  78  
15:35:46  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
15:35:46  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
15:35:46  81  	in_start	 IN  NUMBER,
15:35:46  82  	in_end		 IN  NUMBER,
15:35:46  83  	in_expired	 IN  NUMBER,
15:35:46  84  	out_result_set	 OUT SYS_REFCURSOR,
15:35:46  85  	out_shares_count OUT NUMBER
15:35:46  86  ) AS
15:35:46  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
15:35:46  88  range_diff NUMBER := 0;
15:35:46  89  upper_bond_diff NUMBER := 0;
15:35:46  90  l_start NUMBER := 0;
15:35:46  91  l_end   NUMBER := 0;
15:35:46  92  BEGIN
15:35:46  93  	--Normalize the end points [START]
15:35:46  94  	IF (in_start IS NULL OR in_start < 0) Then
15:35:46  95  	  l_start := 0;
15:35:46  96  	ELSE
15:35:46  97  	  l_start := in_start;
15:35:46  98  	END IF;
15:35:46  99  
15:35:46 100  	IF (in_end IS NULL) Then
15:35:46 101  	  l_end := 11;
15:35:46 102  	ELSE
15:35:46 103  	  l_end := in_end;
15:35:46 104  	END IF;
15:35:46 105  
15:35:46 106  	l_start := l_start + 1;
15:35:46 107  	l_end	:= l_end   + 1;
15:35:46 108  
15:35:46 109  	range_diff := l_end - l_start;
15:35:46 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V17.MAX_RETURN_COUNT;
15:35:46 111  
15:35:46 112  	IF (upper_bond_diff > 0) Then
15:35:46 113  	  l_end := l_end - upper_bond_diff;
15:35:46 114  	END IF;
15:35:46 115  	--Normalize the end points [END]
15:35:46 116  
15:35:46 117  	BEGIN
15:35:46 118  	  SELECT
15:35:46 119  	    COUNT(1) INTO out_shares_count
15:35:46 120  	  FROM
15:35:46 121  	    GROUP_ACCOUNT ga,
15:35:46 122  	    SUBSCRIPTION_SHARE ss,
15:35:46 123  	    ACCOUNT a
15:35:46 124  	  WHERE
15:35:46 125  	    a.GROUP_ID		= in_group_id AND
15:35:46 126  	    a.Id		= ss.borrower_account_id And
15:35:46 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
15:35:46 128  	END;
15:35:46 129  
15:35:46 130  	IF in_expired > 0 THEN
15:35:46 131  	BEGIN
15:35:46 132  	    OPEN out_result_set FOR
15:35:46 133  	    SELECT
15:35:46 134  	      *
15:35:46 135  	    FROM
15:35:46 136  	      (SELECT rownum rnum, q.*
15:35:46 137  	       FROM
15:35:46 138  		(SELECT
15:35:46 139  		   ga.SUBSCRIPTION_ID,
15:35:46 140  		   ss.START_DATE,
15:35:46 141  		   ss.END_DATE,
15:35:46 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
15:35:46 143  		 FROM
15:35:46 144  		   GROUP_ACCOUNT ga,
15:35:46 145  		   SUBSCRIPTION_SHARE ss,
15:35:46 146  		   ACCOUNT a,
15:35:46 147  		   SUBSCRIPTION s,
15:35:46 148  		   ACCOUNT a2
15:35:46 149  		 WHERE
15:35:46 150  		   a.GROUP_ID	       = in_group_id AND
15:35:46 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
15:35:46 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
15:35:46 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
15:35:46 154  		   s.ACCOUNT_ID        = a2.ID
15:35:46 155  		) Q
15:35:46 156  	      WHERE rownum <= l_end)
15:35:46 157  	    WHERE rnum >= l_Start;
15:35:46 158  	END;
15:35:46 159  	ELSE
15:35:46 160  	BEGIN
15:35:46 161  	    OPEN out_result_set FOR
15:35:46 162  	    SELECT
15:35:46 163  	      *
15:35:46 164  	    FROM
15:35:46 165  	      (SELECT rownum rnum, q.*
15:35:46 166  	       FROM
15:35:46 167  		(SELECT
15:35:46 168  		   ga.SUBSCRIPTION_ID,
15:35:46 169  		   ss.START_DATE,
15:35:46 170  		   ss.END_DATE,
15:35:46 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
15:35:46 172  		 FROM
15:35:46 173  		   GROUP_ACCOUNT ga,
15:35:46 174  		   SUBSCRIPTION_SHARE ss,
15:35:46 175  		   ACCOUNT a,
15:35:46 176  		   SUBSCRIPTION s,
15:35:46 177  		   ACCOUNT a2
15:35:46 178  		 WHERE
15:35:46 179  		   a.GROUP_ID	       = in_group_id AND
15:35:46 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
15:35:46 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
15:35:46 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
15:35:46 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
15:35:46 184  		   s.ACCOUNT_ID        = a2.ID
15:35:46 185  		) Q
15:35:46 186  	      WHERE rownum <= l_end)
15:35:46 187  	    WHERE rnum >= l_start;
15:35:46 188  	  END;
15:35:46 189  	END IF;
15:35:46 190  EXCEPTION
15:35:46 191  WHEN NO_DATA_FOUND THEN
15:35:46 192  	NULL;
15:35:46 193  WHEN OTHERS THEN
15:35:46 194  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
15:35:46 196  END SUB_SHARE_BY_GROUP_ID;
15:35:46 197  
15:35:46 198  PROCEDURE IS_VALID_IP_ADDRESS (
15:35:46 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:46 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:35:46 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:35:46 202  	out_is_valid	    OUT NUMBER
15:35:46 203  ) AS
15:35:46 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
15:35:46 205  BEGIN
15:35:46 206  	SELECT
15:35:46 207  	  COUNT(1) INTO out_is_valid
15:35:46 208  	FROM
15:35:46 209  	  GROUP_ACCOUNT_IP_RANGE,
15:35:46 210  	  GROUP_ACCOUNT,
15:35:46 211  	  SUBSCRIPTION,
15:35:46 212  	  OFFER_CHAIN
15:35:46 213  	WHERE
15:35:46 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
15:35:46 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:35:46 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
15:35:46 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
15:35:46 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
15:35:46 219  	 (
15:35:46 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
15:35:46 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
15:35:46 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
15:35:46 223  	 ) AND
15:35:46 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V17.GROUP_ACC_IP_RNG_ACTIVE;
15:35:46 225  EXCEPTION
15:35:46 226  WHEN OTHERS THEN
15:35:46 227  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
15:35:46 229  END IS_VALID_IP_ADDRESS;
15:35:46 230  
15:35:46 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
15:35:46 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:46 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:35:46 234  	out_is_valid	    OUT NUMBER
15:35:46 235  ) AS
15:35:46 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
15:35:46 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
15:35:46 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
15:35:46 239  BEGIN
15:35:46 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
15:35:46 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
15:35:46 242  
15:35:46 243  	SELECT
15:35:46 244  	  COUNT(1) INTO out_is_valid
15:35:46 245  	FROM
15:35:46 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
15:35:46 247  	  GROUP_ACCOUNT ga,
15:35:46 248  	  SUBSCRIPTION s,
15:35:46 249  	  OFFER_CHAIN oc
15:35:46 250  	WHERE
15:35:46 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
15:35:46 252  	  ga.SUBSCRIPTION_ID = s.ID AND
15:35:46 253  	  s.OFFER_CHAIN_ID = oc.ID AND
15:35:46 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
15:35:46 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
15:35:46 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
15:35:46 257  	  gaed.IS_ACTIVE = 1;
15:35:46 258  EXCEPTION
15:35:46 259  WHEN OTHERS THEN
15:35:46 260  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
15:35:46 262  END IS_VALID_EMAIL_DOMAIN;
15:35:46 263  
15:35:46 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
15:35:46 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
15:35:46 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
15:35:46 267  	out_Result_Set	       OUT Sys_Refcursor
15:35:46 268  ) AS
15:35:46 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
15:35:46 270  BEGIN
15:35:46 271  	BEGIN
15:35:46 272  	   OPEN out_result_set FOR
15:35:46 273  	   SELECT
15:35:46 274  	      ss.ID,
15:35:46 275  	      ss.GROUP_ACCOUNT_ID,
15:35:46 276  	      ss.BORROWER_ACCOUNT_ID,
15:35:46 277  	      ss.IP_ADDRESS,
15:35:46 278  	      ss.START_DATE,
15:35:46 279  	      ss.END_DATE,
15:35:46 280  	      ss.CREATED_BY,
15:35:46 281  	      ss.CREATE_DATE,
15:35:46 282  	      ss.UPDATED_BY,
15:35:46 283  	      ss.UPDATE_DATE,
15:35:46 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
15:35:46 285  	   FROM
15:35:46 286  	     SUBSCRIPTION_SHARE ss,
15:35:46 287  	     ACCOUNT a
15:35:46 288  	   WHERE
15:35:46 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
15:35:46 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
15:35:46 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
15:35:46 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
15:35:46 293  	END;
15:35:46 294  EXCEPTION
15:35:46 295  WHEN OTHERS THEN
15:35:46 296  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
15:35:46 298  END GET_SUBSCRIPTION_SHARE;
15:35:46 299  
15:35:46 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
15:35:46 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
15:35:46 302  	out_result_set	   OUT SYS_REFCURSOR
15:35:46 303  ) As
15:35:46 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
15:35:46 305  BEGIN
15:35:46 306  OPEN out_result_set FOR
15:35:46 307  	SELECT
15:35:46 308  	  ID,
15:35:46 309  	  SUBSCRIPTION_ID,
15:35:46 310  	  GROUP_NAME,
15:35:46 311  	  FIRST_NAME,
15:35:46 312  	  LAST_NAME,
15:35:46 313  	  EMAIL,
15:35:46 314  	  PHONE,
15:35:46 315  	  ORGANIZATION_TYPE,
15:35:46 316  	  SEATS,
15:35:46 317  	  SEAT_TTL_IN_HOURS,
15:35:46 318  	  CREATE_DATE,
15:35:46 319  	  CREATED_BY,
15:35:46 320  	  UPDATE_DATE,
15:35:46 321  	  UPDATED_BY
15:35:46 322  	FROM
15:35:46 323  	  GROUP_ACCOUNT
15:35:46 324  	Where
15:35:46 325  	  Subscription_Id = in_subscription_id;
15:35:46 326  EXCEPTION
15:35:46 327  WHEN OTHERS THEN
15:35:46 328  	Procs_Common_V17.Throw_Exception(APP_EXCEPTION_CODES_V17.Unknown_Error,
15:35:46 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 330  
15:35:46 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
15:35:46 332  
15:35:46 333  PROCEDURE CREATE_GROUP_ACCOUNT (
15:35:46 334  	in_subscription_id	 IN NUMBER,
15:35:46 335  	in_group_name		 IN VARCHAR2,
15:35:46 336  	in_first_name		 IN VARCHAR2,
15:35:46 337  	in_last_name		 IN VARCHAR2,
15:35:46 338  	in_email		 IN VARCHAR2,
15:35:46 339  	in_phone		 IN VARCHAR2,
15:35:46 340  	in_organization_type	 IN VARCHAR2,
15:35:46 341  	in_seats		 IN NUMBER,
15:35:46 342  	in_seat_ttl_in_hours	 IN NUMBER,
15:35:46 343  	in_ip			 IN NUMBER,
15:35:46 344  	in_created_by		 IN VARCHAR2
15:35:46 345  ) AS
15:35:46 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
15:35:46 347  BEGIN
15:35:46 348  
15:35:46 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V17.CREATE_GROUP_ACCOUNT(
15:35:46 350  	  in_subscription_id => in_subscription_id,
15:35:46 351  	  in_group_name => in_group_name,
15:35:46 352  	  in_first_name => in_first_name,
15:35:46 353  	  in_last_name => in_last_name,
15:35:46 354  	  in_email => in_email,
15:35:46 355  	  in_phone => in_phone,
15:35:46 356  	  in_organization_type => in_organization_type,
15:35:46 357  	  in_seats => in_seats,
15:35:46 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
15:35:46 359  	  in_ip => in_ip,
15:35:46 360  	  in_created_by => in_created_by
15:35:46 361  	);
15:35:46 362  
15:35:46 363  END CREATE_GROUP_ACCOUNT;
15:35:46 364  
15:35:46 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
15:35:46 366  	in_group_account_id IN NUMBER,
15:35:46 367  	in_start	    IN NUMBER,
15:35:46 368  	in_end		    IN NUMBER,
15:35:46 369  	out_Result_Set	    OUT Sys_Refcursor
15:35:46 370  ) AS
15:35:46 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
15:35:46 372  range_diff NUMBER := 0;
15:35:46 373  upper_bond_diff NUMBER := 0;
15:35:46 374  l_start NUMBER := 0;
15:35:46 375  l_end   NUMBER := 0;
15:35:46 376  BEGIN
15:35:46 377  	-- Normalize the end points [START]
15:35:46 378  	IF (in_start IS NULL OR in_start < 0) Then
15:35:46 379  	  l_start := 0;
15:35:46 380  	ELSE
15:35:46 381  	  l_start := in_start;
15:35:46 382  	END IF;
15:35:46 383  
15:35:46 384  	IF (in_end IS NULL) Then
15:35:46 385  	  l_end := 11;
15:35:46 386  	ELSE
15:35:46 387  	  l_end := in_end;
15:35:46 388  	END IF;
15:35:46 389  
15:35:46 390  	l_start := l_start + 1;
15:35:46 391  	l_end	:= l_end   + 1;
15:35:46 392  
15:35:46 393  	range_diff := l_end - l_start;
15:35:46 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V17.MAX_RETURN_COUNT;
15:35:46 395  
15:35:46 396  	IF (upper_bond_diff > 0) Then
15:35:46 397  	  l_end := l_end - upper_bond_diff;
15:35:46 398  	END IF;
15:35:46 399  	-- Normalize the end points [END]
15:35:46 400  
15:35:46 401  	BEGIN
15:35:46 402  	   OPEN out_result_set FOR
15:35:46 403  	   SELECT *
15:35:46 404  	   FROM
15:35:46 405  	     (SELECT rownum rnum, Q.*
15:35:46 406  	      FROM
15:35:46 407  	       (SELECT
15:35:46 408  		  ss.ID,
15:35:46 409  		  ss.GROUP_ACCOUNT_ID,
15:35:46 410  		  ss.BORROWER_ACCOUNT_ID,
15:35:46 411  		  ss.IP_ADDRESS,
15:35:46 412  		  ss.START_DATE,
15:35:46 413  		  ss.END_DATE,
15:35:46 414  		  ss.CREATED_BY,
15:35:46 415  		  ss.CREATE_DATE,
15:35:46 416  		  ss.UPDATED_BY,
15:35:46 417  		  ss.UPDATE_DATE,
15:35:46 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
15:35:46 419  		FROM
15:35:46 420  		  SUBSCRIPTION_SHARE ss,
15:35:46 421  		  ACCOUNT a,
15:35:46 422  		  LICENSE l,
15:35:46 423  		  GROUP_ACCOUNT ga
15:35:46 424  		WHERE
15:35:46 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
15:35:46 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
15:35:46 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
15:35:46 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
15:35:46 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
15:35:46 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
15:35:46 431  	      ) Q
15:35:46 432  	    WHERE rownum <= l_end)
15:35:46 433  	  WHERE rnum >= l_start;
15:35:46 434  	END;
15:35:46 435  EXCEPTION
15:35:46 436  WHEN OTHERS THEN
15:35:46 437  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
15:35:46 439  END GET_SUBSCRIPTION_SHARES;
15:35:46 440  
15:35:46 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
15:35:46 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:35:46 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:35:46 444  	out_result_set	      OUT SYS_REFCURSOR
15:35:46 445  ) AS
15:35:46 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
15:35:46 447  BEGIN
15:35:46 448  	BEGIN
15:35:46 449  	  OPEN out_result_set FOR
15:35:46 450  	  SELECT
15:35:46 451  	    ID,
15:35:46 452  	    SUBSCRIPTION_ID,
15:35:46 453  	    GROUP_NAME,
15:35:46 454  	    FIRST_NAME,
15:35:46 455  	    LAST_NAME,
15:35:46 456  	    EMAIL,
15:35:46 457  	    PHONE,
15:35:46 458  	    ORGANIZATION_TYPE,
15:35:46 459  	    SEATS,
15:35:46 460  	    SEAT_TTL_IN_HOURS,
15:35:46 461  	    CREATE_DATE,
15:35:46 462  	    CREATED_BY,
15:35:46 463  	    UPDATE_DATE,
15:35:46 464  	    UPDATED_BY
15:35:46 465  	  FROM
15:35:46 466  	    GROUP_ACCOUNT
15:35:46 467  	  WHERE
15:35:46 468  	    ID IN (
15:35:46 469  	      SELECT
15:35:46 470  		GROUP_ACCOUNT_ID
15:35:46 471  	      FROM
15:35:46 472  		GROUP_ACCOUNT_IP_RANGE,
15:35:46 473  		GROUP_ACCOUNT,
15:35:46 474  		SUBSCRIPTION,
15:35:46 475  		OFFER_CHAIN
15:35:46 476  	      WHERE
15:35:46 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
15:35:46 478  	      AND
15:35:46 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:35:46 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
15:35:46 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
15:35:46 482  	      AND
15:35:46 483  		(
15:35:46 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
15:35:46 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
15:35:46 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
15:35:46 487  		)
15:35:46 488  	      AND
15:35:46 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V17.GROUP_ACC_IP_RNG_ACTIVE
15:35:46 490  	    );
15:35:46 491  	  END;
15:35:46 492  EXCEPTION
15:35:46 493  WHEN OTHERS THEN
15:35:46 494  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 496  END GET_GROUP_ACCOUNT_BY_IP;
15:35:46 497  
15:35:46 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
15:35:46 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:35:46 500  	out_result_set	    OUT SYS_REFCURSOR
15:35:46 501  ) AS
15:35:46 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
15:35:46 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
15:35:46 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
15:35:46 505  BEGIN
15:35:46 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
15:35:46 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
15:35:46 508  	BEGIN
15:35:46 509  	  OPEN out_result_set FOR
15:35:46 510  	  SELECT
15:35:46 511  	    ID,
15:35:46 512  	    SUBSCRIPTION_ID,
15:35:46 513  	    GROUP_NAME,
15:35:46 514  	    FIRST_NAME,
15:35:46 515  	    LAST_NAME,
15:35:46 516  	    EMAIL,
15:35:46 517  	    PHONE,
15:35:46 518  	    ORGANIZATION_TYPE,
15:35:46 519  	    SEATS,
15:35:46 520  	    SEAT_TTL_IN_HOURS,
15:35:46 521  	    CREATE_DATE,
15:35:46 522  	    CREATED_BY,
15:35:46 523  	    UPDATE_DATE,
15:35:46 524  	    UPDATED_BY
15:35:46 525  	  FROM
15:35:46 526  	    GROUP_ACCOUNT
15:35:46 527  	  WHERE
15:35:46 528  	    ID IN (
15:35:46 529  	      SELECT
15:35:46 530  		GROUP_ACCOUNT_ID
15:35:46 531  	      FROM
15:35:46 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
15:35:46 533  		GROUP_ACCOUNT ga,
15:35:46 534  		SUBSCRIPTION s,
15:35:46 535  		OFFER_CHAIN oc
15:35:46 536  	      WHERE
15:35:46 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
15:35:46 538  		ga.SUBSCRIPTION_ID = s.ID AND
15:35:46 539  		s.OFFER_CHAIN_ID = oc.ID AND
15:35:46 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
15:35:46 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
15:35:46 542  		gaed.IS_ACTIVE = 1
15:35:46 543  	    );
15:35:46 544  	  END;
15:35:46 545  EXCEPTION
15:35:46 546  WHEN OTHERS THEN
15:35:46 547  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
15:35:46 550  
15:35:46 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
15:35:46 552  	in_group_account_id   IN NUMBER,
15:35:46 553  	in_start	      IN NUMBER,
15:35:46 554  	in_end		      IN NUMBER,
15:35:46 555  	in_status	      IN NUMBER,
15:35:46 556  	out_record_count      OUT NUMBER,
15:35:46 557  	out_result_set	      OUT SYS_REFCURSOR
15:35:46 558  ) AS
15:35:46 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
15:35:46 560  range_diff NUMBER := 0;
15:35:46 561  upper_bond_diff NUMBER := 0;
15:35:46 562  l_start NUMBER := 0;
15:35:46 563  l_end   NUMBER := 0;
15:35:46 564  BEGIN
15:35:46 565  	--Normalize the end points [START]
15:35:46 566  	IF (in_start IS NULL OR in_start < 0) Then
15:35:46 567  	  l_start := 0;
15:35:46 568  	ELSE
15:35:46 569  	  l_start := in_start;
15:35:46 570  	END IF;
15:35:46 571  
15:35:46 572  	IF (in_end IS NULL) Then
15:35:46 573  	  l_end := 11;
15:35:46 574  	ELSE
15:35:46 575  	  l_end := in_end;
15:35:46 576  	END IF;
15:35:46 577  
15:35:46 578  	l_start := l_start + 1;
15:35:46 579  	l_end	:= l_end   + 1;
15:35:46 580  
15:35:46 581  	range_diff := l_end - l_start;
15:35:46 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V17.MAX_RETURN_COUNT;
15:35:46 583  
15:35:46 584  	IF (upper_bond_diff > 0) Then
15:35:46 585  	  l_end := l_end - upper_bond_diff;
15:35:46 586  	END IF;
15:35:46 587  	--Normalize the end points [END]
15:35:46 588  
15:35:46 589  	--Total count of records [START]
15:35:46 590  	SELECT
15:35:46 591  	  COUNT(1) INTO out_record_count
15:35:46 592  	FROM
15:35:46 593  	  GROUP_ACCOUNT_IP_RANGE
15:35:46 594  	WHERE
15:35:46 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
15:35:46 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
15:35:46 597  	--Total count of records [END]
15:35:46 598  
15:35:46 599  	OPEN out_result_set FOR
15:35:46 600  	SELECT
15:35:46 601  	  *
15:35:46 602  	FROM
15:35:46 603  	  (SELECT rownum rnum, q.*
15:35:46 604  	   FROM
15:35:46 605  	    (SELECT
15:35:46 606  	       ID,
15:35:46 607  	       GROUP_ACCOUNT_ID,
15:35:46 608  	       MINIMUM_IP_STRING,
15:35:46 609  	       MAXIMUM_IP_STRING,
15:35:46 610  	       GROUP_ACC_IP_RNG_STATUS_ID
15:35:46 611  	     FROM
15:35:46 612  	       GROUP_ACCOUNT_IP_RANGE
15:35:46 613  	     WHERE
15:35:46 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
15:35:46 615  	       (in_status IS NULL OR
15:35:46 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
15:35:46 617  	    ) Q
15:35:46 618  	  WHERE rownum <= l_end)
15:35:46 619  	WHERE rnum >= l_Start;
15:35:46 620  EXCEPTION
15:35:46 621  WHEN OTHERS THEN
15:35:46 622  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
15:35:46 624  END GET_GROUP_ACCOUNT_IP_RANGES;
15:35:46 625  
15:35:46 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
15:35:46 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:46 628  	in_start	      IN NUMBER,
15:35:46 629  	in_end		      IN NUMBER,
15:35:46 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
15:35:46 631  	out_record_count      OUT NUMBER,
15:35:46 632  	out_result_set	      OUT SYS_REFCURSOR
15:35:46 633  ) AS
15:35:46 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
15:35:46 635  range_diff NUMBER := 0;
15:35:46 636  upper_bond_diff NUMBER := 0;
15:35:46 637  l_start NUMBER := 0;
15:35:46 638  l_end   NUMBER := 0;
15:35:46 639  BEGIN
15:35:46 640  	--Normalize the end points [START]
15:35:46 641  	IF (in_start IS NULL OR in_start < 0) Then
15:35:46 642  	  l_start := 0;
15:35:46 643  	ELSE
15:35:46 644  	  l_start := in_start;
15:35:46 645  	END IF;
15:35:46 646  
15:35:46 647  	IF (in_end IS NULL) Then
15:35:46 648  	  l_end := 11;
15:35:46 649  	ELSE
15:35:46 650  	  l_end := in_end;
15:35:46 651  	END IF;
15:35:46 652  
15:35:46 653  	l_start := l_start + 1;
15:35:46 654  	l_end	:= l_end   + 1;
15:35:46 655  
15:35:46 656  	range_diff := l_end - l_start;
15:35:46 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V17.MAX_RETURN_COUNT;
15:35:46 658  
15:35:46 659  	IF (upper_bond_diff > 0) Then
15:35:46 660  	  l_end := l_end - upper_bond_diff;
15:35:46 661  	END IF;
15:35:46 662  	--Normalize the end points [END]
15:35:46 663  
15:35:46 664  	--Total count of records [START]
15:35:46 665  	SELECT
15:35:46 666  	  COUNT(1) INTO out_record_count
15:35:46 667  	FROM
15:35:46 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
15:35:46 669  	WHERE
15:35:46 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
15:35:46 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
15:35:46 672  	--Total count of records [END]
15:35:46 673  
15:35:46 674  	OPEN out_result_set FOR
15:35:46 675  	SELECT
15:35:46 676  	  *
15:35:46 677  	FROM
15:35:46 678  	  (SELECT rownum rnum, q.*
15:35:46 679  	   FROM
15:35:46 680  	    (SELECT
15:35:46 681  	      ID,
15:35:46 682  	      GROUP_ACCOUNT_ID,
15:35:46 683  	      EMAIL_DOMAIN,
15:35:46 684  	      IS_ACTIVE
15:35:46 685  	     FROM
15:35:46 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
15:35:46 687  	     WHERE
15:35:46 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
15:35:46 689  	       (in_status IS NULL OR
15:35:46 690  		IS_ACTIVE = in_status)
15:35:46 691  	    ) Q
15:35:46 692  	  WHERE rownum <= l_end)
15:35:46 693  	WHERE rnum >= l_Start;
15:35:46 694  
15:35:46 695  EXCEPTION
15:35:46 696  WHEN OTHERS THEN
15:35:46 697  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
15:35:46 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
15:35:46 700  
15:35:46 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
15:35:46 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:46 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:46 704  ) AS
15:35:46 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
15:35:46 706  BEGIN
15:35:46 707  	  PROCS_GROUP_ACCOUNT_CRU_V17.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
15:35:46 708  	    in_group_account_id => in_group_account_id,
15:35:46 709  	    in_updated_by => in_updated_by
15:35:46 710  	  );
15:35:46 711  EXCEPTION
15:35:46 712  WHEN OTHERS THEN
15:35:46 713  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
15:35:46 716  
15:35:46 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
15:35:46 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:35:46 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:35:46 720  ) AS
15:35:46 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
15:35:46 722  BEGIN
15:35:46 723  	  PROCS_GROUP_ACCOUNT_CRU_V17.DISABLE_EMAIL_DOMAIN_BY_ID(
15:35:46 724  	    in_id => in_id,
15:35:46 725  	    in_updated_by => in_updated_by
15:35:46 726  	  );
15:35:46 727  EXCEPTION
15:35:46 728  WHEN OTHERS THEN
15:35:46 729  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
15:35:46 732  
15:35:46 733  PROCEDURE ADD_EMAIL_DOMAIN (
15:35:46 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:35:46 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:35:46 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
15:35:46 737  ) AS
15:35:46 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
15:35:46 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
15:35:46 740  var_is_dupe NUMBER(1);
15:35:46 741  var_group_account_count NUMBER := 0;
15:35:46 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
15:35:46 743  NOT_GL EXCEPTION;
15:35:46 744  DUPE EXCEPTION;
15:35:46 745  BEGIN
15:35:46 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
15:35:46 747  	  FROM
15:35:46 748  	    GROUP_ACCOUNT,
15:35:46 749  	    SUBSCRIPTION,
15:35:46 750  	    OFFER_CHAIN
15:35:46 751  	  WHERE
15:35:46 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
15:35:46 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:35:46 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 755  	  ;
15:35:46 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
15:35:46 757  	    RAISE NOT_GL;
15:35:46 758  	  END IF;
15:35:46 759  
15:35:46 760  	  --check if email domain already exists
15:35:46 761  	  SELECT count(1) into var_group_account_count
15:35:46 762  	  FROM
15:35:46 763  	      GROUP_ACCOUNT_EMAIL_DOMAIN
15:35:46 764  	  WHERE
15:35:46 765  	      GROUP_ACCOUNT_ID= in_group_account_id AND
15:35:46 766  	      EMAIL_DOMAIN = in_email_domain
15:35:46 767  	  ;
15:35:46 768  
15:35:46 769  	  IF(var_group_account_count > 0) THEN
15:35:46 770  	      SELECT ID into var_id
15:35:46 771  	      FROM
15:35:46 772  		  GROUP_ACCOUNT_EMAIL_DOMAIN
15:35:46 773  	      WHERE
15:35:46 774  		  GROUP_ACCOUNT_ID= in_group_account_id AND
15:35:46 775  		  EMAIL_DOMAIN = in_email_domain AND
15:35:46 776  		  rownum <= 1;
15:35:46 777  	      PROCS_GROUP_ACCOUNT_CRU_V17.ENABLE_EMAIL_DOMAIN_BY_ID(
15:35:46 778  		  in_id => var_id,
15:35:46 779  		  in_updated_by => in_created_by
15:35:46 780  		  );
15:35:46 781  	  ELSE
15:35:46 782  	      PROCS_GROUP_ACCOUNT_CRU_V17.ADD_EMAIL_DOMAIN(
15:35:46 783  		  in_group_account_id => in_group_account_id,
15:35:46 784  		  in_email_domain => in_email_domain,
15:35:46 785  		      in_is_active => GLOBAL_STATUSES_V17.GROUP_ACC_EMAIL_DOMAIN_ACT,
15:35:46 786  		  in_created_by => in_created_by
15:35:46 787  	      );
15:35:46 788  	  END IF;
15:35:46 789  
15:35:46 790  EXCEPTION
15:35:46 791  WHEN NOT_GL THEN
15:35:46 792  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 793  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
15:35:46 794  WHEN OTHERS THEN
15:35:46 795  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 796  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 797  END ADD_EMAIL_DOMAIN;
15:35:46 798  
15:35:46 799  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
15:35:46 800  	in_group_account_id    IN NUMBER,
15:35:46 801  	in_borrower_account_id IN NUMBER,
15:35:46 802  	in_ip_address	       IN VARCHAR2,
15:35:46 803  	in_email_domain        IN VARCHAR2,
15:35:46 804  	in_created_by	       IN VARCHAR2
15:35:46 805  ) AS
15:35:46 806  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
15:35:46 807  ga_ttl_in_hours NUMBER := NULL;
15:35:46 808  start_date DATE := NULL;
15:35:46 809  end_date DATE := NULL;
15:35:46 810  BEGIN
15:35:46 811  	start_date := sysdate;
15:35:46 812  	end_date   := GLOBAL_CONSTANTS_V17.MAX_DATE;
15:35:46 813  
15:35:46 814  	BEGIN
15:35:46 815  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
15:35:46 816  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
15:35:46 817  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
15:35:46 818  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:35:46 819  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
15:35:46 820  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
15:35:46 821  	EXCEPTION
15:35:46 822  	  WHEN no_data_found THEN
15:35:46 823  	    ga_ttl_in_hours := NULL;
15:35:46 824  	END;
15:35:46 825  
15:35:46 826  	IF (ga_ttl_in_hours IS NOT NULL) THEN
15:35:46 827  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
15:35:46 828  	END IF;
15:35:46 829  
15:35:46 830  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V17.CREATE_SUBSCRIPTION_SHARE(
15:35:46 831  	  in_group_account_id => in_group_account_id,
15:35:46 832  	  in_borrower_account_id => in_borrower_account_id,
15:35:46 833  	  in_ip_address => in_ip_address,
15:35:46 834  	  in_email_domain => in_email_domain,
15:35:46 835  	  in_start_date => start_date,
15:35:46 836  	  in_end_date => end_date,
15:35:46 837  	  in_created_by => in_created_by
15:35:46 838  	);
15:35:46 839  END CREATE_SUBSCRIPTION_SHARE;
15:35:46 840  
15:35:46 841  
15:35:46 842  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
15:35:46 843  	in_group_account_id   IN NUMBER,
15:35:46 844  	out_occupied_seats   OUT NUMBER
15:35:46 845  ) AS
15:35:46 846  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
15:35:46 847  BEGIN
15:35:46 848  	SELECT
15:35:46 849  	  PROCS_GROUP_ACCOUNT_V17.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
15:35:46 850  	FROM dual;
15:35:46 851  EXCEPTION
15:35:46 852  WHEN OTHERS THEN
15:35:46 853  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 854  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 855  END GET_NUM_OCCUPIED_GROUP_SEATS;
15:35:46 856  
15:35:46 857  
15:35:46 858  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
15:35:46 859  	in_group_account_id   IN NUMBER
15:35:46 860  ) RETURN NUMBER IS
15:35:46 861  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
15:35:46 862  num_seats NUMBER;
15:35:46 863  BEGIN
15:35:46 864  	SELECT
15:35:46 865  	  COUNT(1) INTO num_seats
15:35:46 866  	FROM
15:35:46 867  	  SUBSCRIPTION_SHARE
15:35:46 868  	WHERE
15:35:46 869  	  GROUP_ACCOUNT_ID = in_group_account_id AND
15:35:46 870  	  SYSDATE BETWEEN START_DATE AND END_DATE;
15:35:46 871  	RETURN num_seats;
15:35:46 872  EXCEPTION
15:35:46 873  WHEN OTHERS THEN
15:35:46 874  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 875  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 876  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
15:35:46 877  
15:35:46 878  -- *********************************************************************
15:35:46 879  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
15:35:46 880  -- *********************************************************************
15:35:46 881  -- I'm debating if this should be in a different package, but right now
15:35:46 882  -- I'm too lazy to move this else where.
15:35:46 883  -- *********************************************************************
15:35:46 884  
15:35:46 885  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
15:35:46 886  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:46 887  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:35:46 888  ) AS
15:35:46 889  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
15:35:46 890  BEGIN
15:35:46 891  	  PROCS_GROUP_ACCOUNT_CRU_V17.DISABLE_IP_RANGES_BY_GA_ID(
15:35:46 892  	    in_group_account_id => in_group_account_id,
15:35:46 893  	    in_updated_by => in_updated_by
15:35:46 894  	  );
15:35:46 895  EXCEPTION
15:35:46 896  WHEN OTHERS THEN
15:35:46 897  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 899  END DISABLE_IP_RANGES_BY_GA_ID;
15:35:46 900  
15:35:46 901  PROCEDURE DISABLE_IP_RANGE_BY_ID (
15:35:46 902  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
15:35:46 903  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:35:46 904  ) AS
15:35:46 905  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
15:35:46 906  BEGIN
15:35:46 907  	  PROCS_GROUP_ACCOUNT_CRU_V17.DISABLE_IP_RANGE_BY_ID(
15:35:46 908  	    in_id => in_id,
15:35:46 909  	    in_updated_by => in_updated_by
15:35:46 910  	  );
15:35:46 911  EXCEPTION
15:35:46 912  WHEN OTHERS THEN
15:35:46 913  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 915  END DISABLE_IP_RANGE_BY_ID;
15:35:46 916  
15:35:46 917  PROCEDURE ADD_IP_RANGE (
15:35:46 918  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:35:46 919  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
15:35:46 920  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:35:46 921  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:35:46 922  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
15:35:46 923  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
15:35:46 924  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
15:35:46 925  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
15:35:46 926  ) AS
15:35:46 927  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
15:35:46 928  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
15:35:46 929  var_is_dupe NUMBER(1);
15:35:46 930  NOT_GL EXCEPTION;
15:35:46 931  DUPE EXCEPTION;
15:35:46 932  BEGIN
15:35:46 933  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
15:35:46 934  	  FROM
15:35:46 935  	    GROUP_ACCOUNT,
15:35:46 936  	    SUBSCRIPTION,
15:35:46 937  	    OFFER_CHAIN
15:35:46 938  	  WHERE
15:35:46 939  	    GROUP_ACCOUNT.ID = in_group_account_id AND
15:35:46 940  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:35:46 941  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 942  	  ;
15:35:46 943  	  IF(var_ga_type != 'GL') THEN
15:35:46 944  	    RAISE NOT_GL;
15:35:46 945  	  END IF;
15:35:46 946  
15:35:46 947  	  PROCS_GROUP_ACCOUNT_CRU_V17.ADD_IP_RANGE(
15:35:46 948  	    in_group_account_id => in_group_account_id,
15:35:46 949  	    in_minimum_ip_string => in_minimum_ip_string,
15:35:46 950  	    in_minimum_ip_low => in_minimum_ip_low,
15:35:46 951  	    in_minimum_ip_high => in_minimum_ip_high,
15:35:46 952  	    in_maximum_ip_string => in_maximum_ip_string,
15:35:46 953  	    in_maximum_ip_low => in_maximum_ip_low,
15:35:46 954  	    in_maximum_ip_high => in_maximum_ip_high,
15:35:46 955  	    in_created_by => in_created_by
15:35:46 956  	  );
15:35:46 957  
15:35:46 958  	  -- Check for overlapping ip address range after insert.  Note that if another
15:35:46 959  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
15:35:46 960  	  SELECT count(1) into var_is_dupe
15:35:46 961  	  FROM
15:35:46 962  	    GROUP_ACCOUNT_IP_RANGE
15:35:46 963  	  WHERE
15:35:46 964  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V17.GROUP_ACC_IP_RNG_ACTIVE AND
15:35:46 965  		((
15:35:46 966  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
15:35:46 967  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
15:35:46 968  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
15:35:46 969  		) OR
15:35:46 970  
15:35:46 971  		(
15:35:46 972  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
15:35:46 973  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
15:35:46 974  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
15:35:46 975  		)) AND
15:35:46 976  	    ROWNUM < 3;
15:35:46 977  
15:35:46 978  	  If(var_is_dupe > 1) THEN
15:35:46 979  	    RAISE DUPE;
15:35:46 980  	  END IF;
15:35:46 981  EXCEPTION
15:35:46 982  WHEN NOT_GL THEN
15:35:46 983  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 984  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
15:35:46 985  WHEN DUPE THEN
15:35:46 986  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 987  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
15:35:46 988  WHEN OTHERS THEN
15:35:46 989  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 990  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 991  END ADD_IP_RANGE;
15:35:46 992  
15:35:46 993  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
15:35:46 994  	in_group_account_id IN NUMBER,
15:35:46 995  	out_group_id OUT NUMBER
15:35:46 996  ) AS
15:35:46 997  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
15:35:46 998  BEGIN
15:35:46 999  	SELECT
15:35:46 1000  	   a.group_id into out_group_id
15:35:46 1001  	 FROM
15:35:46 1002  	   account a,
15:35:46 1003  	   subscription s,
15:35:46 1004  	   group_account ga
15:35:46 1005  	 WHERE
15:35:46 1006  	   a.id = s.account_id and
15:35:46 1007  	   s.id = ga.subscription_id and
15:35:46 1008  	   ga.id = in_group_account_id and
15:35:46 1009  	   rownum < 2
15:35:46 1010  	 ;
15:35:46 1011  EXCEPTION
15:35:46 1012  WHEN NO_DATA_FOUND THEN
15:35:46 1013  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1014  	   SPROC_NAME, 'Bad group_account_id');
15:35:46 1015  WHEN OTHERS THEN
15:35:46 1016  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1017  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1018  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
15:35:46 1019  
15:35:46 1020  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
15:35:46 1021  	 in_group_account_ip_range_id IN NUMBER,
15:35:46 1022  	 out_group_id OUT NUMBER
15:35:46 1023  ) AS
15:35:46 1024  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
15:35:46 1025  BEGIN
15:35:46 1026  	 SELECT
15:35:46 1027  	   a.group_id into out_group_id
15:35:46 1028  	 FROM
15:35:46 1029  	   account a,
15:35:46 1030  	   subscription s,
15:35:46 1031  	   group_account ga,
15:35:46 1032  	   group_account_ip_range ir
15:35:46 1033  	 WHERE
15:35:46 1034  	   a.id = s.account_id and
15:35:46 1035  	   s.id = ga.subscription_id and
15:35:46 1036  	   ga.id = ir.group_account_id and
15:35:46 1037  	   ir.id = in_group_account_ip_range_id and
15:35:46 1038  	   rownum < 2
15:35:46 1039  	 ;
15:35:46 1040  EXCEPTION
15:35:46 1041  WHEN NO_DATA_FOUND THEN
15:35:46 1042  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1043  	   SPROC_NAME, 'Bad group_account_ip_range_id');
15:35:46 1044  WHEN OTHERS THEN
15:35:46 1045  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1046  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1047  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
15:35:46 1048  
15:35:46 1049  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
15:35:46 1050  	 in_group_account_email_dom_id IN NUMBER,
15:35:46 1051  	 out_group_id OUT NUMBER
15:35:46 1052  ) AS
15:35:46 1053  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
15:35:46 1054  BEGIN
15:35:46 1055  	 SELECT
15:35:46 1056  	   a.group_id into out_group_id
15:35:46 1057  	 FROM
15:35:46 1058  	   account a,
15:35:46 1059  	   subscription s,
15:35:46 1060  	   group_account ga,
15:35:46 1061  	   group_account_email_domain ir
15:35:46 1062  	 WHERE
15:35:46 1063  	   a.id = s.account_id and
15:35:46 1064  	   s.id = ga.subscription_id and
15:35:46 1065  	   ga.id = ir.group_account_id and
15:35:46 1066  	   ir.id = in_group_account_email_dom_id and
15:35:46 1067  	   rownum < 2
15:35:46 1068  	 ;
15:35:46 1069  EXCEPTION
15:35:46 1070  WHEN NO_DATA_FOUND THEN
15:35:46 1071  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1072  	   SPROC_NAME, 'Bad group_account_ip_range_id');
15:35:46 1073  WHEN OTHERS THEN
15:35:46 1074  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1075  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1076  END GET_GRP_ID_BY_EMAIL_DOM_ID;
15:35:46 1077  
15:35:46 1078  PROCEDURE UPDATE_GROUP_ACCOUNT (
15:35:46 1079  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
15:35:46 1080  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
15:35:46 1081  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
15:35:46 1082  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
15:35:46 1083  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
15:35:46 1084  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
15:35:46 1085  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:35:46 1086  ) AS
15:35:46 1087  BEGIN
15:35:46 1088  	 PROCS_GROUP_ACCOUNT_CRU_V17.UPDATE_GROUP_ACCOUNT(
15:35:46 1089  	   in_group_account_id => in_group_account_id,
15:35:46 1090  	   in_group_name => in_group_name,
15:35:46 1091  	   in_first_name => in_first_name,
15:35:46 1092  	   in_last_name => in_last_name,
15:35:46 1093  	   in_email => in_email,
15:35:46 1094  	   in_phone => in_phone,
15:35:46 1095  	   in_updated_by => in_updated_by
15:35:46 1096  	 );
15:35:46 1097  END UPDATE_GROUP_ACCOUNT;
15:35:46 1098  
15:35:46 1099  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
15:35:46 1100  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
15:35:46 1101  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
15:35:46 1102  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:35:46 1103  ) AS
15:35:46 1104  BEGIN
15:35:46 1105  	 PROCS_GROUP_ACCOUNT_CRU_V17.UPDATE_GROUP_ACCOUNT_SEATS(
15:35:46 1106  	   in_group_account_id => in_group_account_id,
15:35:46 1107  	   in_seats => in_seats,
15:35:46 1108  	   in_updated_by => in_updated_by
15:35:46 1109  	 );
15:35:46 1110  END UPDATE_GROUP_ACCOUNT_SEATS;
15:35:46 1111  
15:35:46 1112  END PROCS_GROUP_ACCOUNT_V17;
15:35:46 1113  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE TEST_CLEAR_ALL IS
15:35:46   4  BEGIN
15:35:46   5  	DELETE FROM TAX_ADJUSTMENT;
15:35:46   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
15:35:46   7  	DELETE FROM INVOICE_ADJUSTMENT;
15:35:46   8  	DELETE FROM LICENSE;
15:35:46   9  	DELETE FROM OFFER_OFFER_CHAIN;
15:35:46  10  	delete from offer_product_offering;
15:35:46  11  	delete from tax;
15:35:46  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
15:35:46  13  	delete from discount_line_item; -- ?
15:35:46  14  	delete from discount; -- ?
15:35:46  15  	DELETE FROM LINE_ITEM;
15:35:46  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
15:35:46  17  	DELETE FROM PRODUCT_OFFERING;
15:35:46  18  	DELETE FROM PRODUCT;
15:35:46  19  	DELETE FROM INVOICE_NOTE;
15:35:46  20  	DELETE FROM GIFT_CERTIFICATE;
15:35:46  21  	DELETE FROM OFFER;
15:35:46  22  	DELETE FROM OFFER_CHAIN_META_DATA;
15:35:46  23  	DELETE FROM SUBSCRIPTION_NOTE;
15:35:46  24  	DELETE FROM SUBSCRIPTION_META_DATA;
15:35:46  25  	DELETE FROM SUBSCRIPTION;
15:35:46  26  	DELETE FROM CREDIT_CARD;
15:35:46  27  	DELETE FROM FLAGGED_ACCOUNTS;
15:35:46  28  	DELETE FROM ACCOUNT_NOTE;
15:35:46  29  	DELETE FROM ACCOUNT_LOCK;
15:35:46  30  	DELETE FROM ACCOUNT;
15:35:46  31  	DELETE FROM CHARGE;
15:35:46  32  	DELETE FROM TRANSACTION_ATTEMPT;
15:35:46  33  	DELETE FROM CHARGEBACK;
15:35:46  34  	DELETE FROM TRANSACTION;
15:35:46  35  	DELETE FROM INVOICE_NOTE;
15:35:46  36  	DELETE FROM INVOICE;
15:35:46  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
15:35:46  38  	DELETE FROM OFFER_CHAIN;
15:35:46  39  END TEST_CLEAR_ALL;
15:35:46  40  
15:35:46  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
15:35:46  42  BEGIN
15:35:46  43  	DELETE FROM OFFER_OFFER_CHAIN;
15:35:46  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
15:35:46  45  	DELETE FROM TAX;
15:35:46  46  	DELETE FROM PRODUCT_OFFERING;
15:35:46  47  	DELETE FROM PRODUCT;
15:35:46  48  	DELETE FROM OFFER;
15:35:46  49  	DELETE FROM OFFER_CHAIN_META_DATA;
15:35:46  50  	DELETE FROM OFFER_CHAIN;
15:35:46  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
15:35:46  52  END;
15:35:46  53  
15:35:46  54  /******************************************/
15:35:46  55  
15:35:46  56  PROCEDURE TEST_GET_ACCOUNT (
15:35:46  57  	in_group_id	IN NUMBER,
15:35:46  58  	out_result_set	OUT SYS_REFCURSOR
15:35:46  59  ) AS
15:35:46  60  BEGIN
15:35:46  61  
15:35:46  62  	OPEN out_result_set FOR
15:35:46  63  	SELECT *
15:35:46  64  	FROM
15:35:46  65  	  ACCOUNT
15:35:46  66  	WHERE
15:35:46  67  	  ACCOUNT.GROUP_ID = in_group_id;
15:35:46  68  
15:35:46  69  END TEST_GET_ACCOUNT;
15:35:46  70  
15:35:46  71  /*******************************************/
15:35:46  72  
15:35:46  73  PROCEDURE TEST_GET_SUBSCRIPTION (
15:35:46  74  	in_subscription_id IN NUMBER,
15:35:46  75  	out_result_set	   OUT SYS_REFCURSOR
15:35:46  76  ) AS
15:35:46  77  BEGIN
15:35:46  78  	OPEN out_result_set FOR
15:35:46  79  	SELECT *
15:35:46  80  	FROM
15:35:46  81  	  SUBSCRIPTION
15:35:46  82  	WHERE
15:35:46  83  	  SUBSCRIPTION.ID = in_subscription_id;
15:35:46  84  
15:35:46  85  END TEST_GET_SUBSCRIPTION;
15:35:46  86  
15:35:46  87  /***************************************************/
15:35:46  88  
15:35:46  89  PROCEDURE TEST_DELETE_INVOICE (
15:35:46  90  	in_invoice_id IN NUMBER
15:35:46  91  ) AS
15:35:46  92  var_line_item_id_set SYS_REFCURSOR;
15:35:46  93  var_line_item_id	   NUMBER;
15:35:46  94  
15:35:46  95  var_charge_id_set  SYS_REFCURSOR;
15:35:46  96  var_charge_id	 NUMBER;
15:35:46  97  var_transaction_id NUMBER;
15:35:46  98  BEGIN
15:35:46  99  	-- GET ACCOUNT'S LINE_ITEMS
15:35:46 100  	OPEN var_line_item_id_set FOR
15:35:46 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
15:35:46 102  	LOOP
15:35:46 103  	  FETCH var_line_item_id_set into var_line_item_id;
15:35:46 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
15:35:46 105  
15:35:46 106  	  -- DELETE ADJUSTMENTS
15:35:46 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
15:35:46 108  	  LOOP
15:35:46 109  
15:35:46 110  	    -- DELETE DISCOUNT ADJUSTMENTS
15:35:46 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
15:35:46 112  
15:35:46 113  	    -- DELETE TAX ADJUSTMENTS
15:35:46 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
15:35:46 115  	  END LOOP;
15:35:46 116  
15:35:46 117  	  -- DELETE LINE ITEM ADJUSTMENTS
15:35:46 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
15:35:46 119  
15:35:46 120  	  -- DELETE DISCOUNT_LINE_ITEM
15:35:46 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
15:35:46 122  
15:35:46 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
15:35:46 124  
15:35:46 125  	  -- DELETE LINE ITEM
15:35:46 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
15:35:46 127  
15:35:46 128  	END LOOP;
15:35:46 129  
15:35:46 130  	-- DELETE INVOICE ADJUSTMENTS
15:35:46 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
15:35:46 132  
15:35:46 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
15:35:46 134  	OPEN var_charge_id_set FOR
15:35:46 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
15:35:46 136  	LOOP
15:35:46 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
15:35:46 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
15:35:46 139  	  -- DELETE CHARGEBACK
15:35:46 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
15:35:46 141  
15:35:46 142  	  -- DELETE TRANSACTION ATTEMP
15:35:46 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
15:35:46 144  
15:35:46 145  	  -- DELETE CHARGE
15:35:46 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
15:35:46 147  
15:35:46 148  	  -- DELETE TRANSACTION
15:35:46 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
15:35:46 150  	END LOOP;
15:35:46 151  
15:35:46 152  	-- DELETE INVOICE NOTES
15:35:46 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
15:35:46 154  
15:35:46 155  	-- DELETE INVOICE
15:35:46 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
15:35:46 157  END;
15:35:46 158  
15:35:46 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
15:35:46 160  	in_group_id IN NUMBER
15:35:46 161  ) AS
15:35:46 162  -- VARIABLES
15:35:46 163  var_account_id NUMBER;
15:35:46 164  
15:35:46 165  -- CURSORS
15:35:46 166  var_subscription_id_set SYS_REFCURSOR;
15:35:46 167  var_subscription_id     NUMBER;
15:35:46 168  
15:35:46 169  var_license_id_set SYS_REFCURSOR;
15:35:46 170  var_license_id	 NUMBER;
15:35:46 171  var_invoice_id	 NUMBER;
15:35:46 172  
15:35:46 173  var_gift_certificate_id_set SYS_REFCURSOR;
15:35:46 174  var_gift_certificate_id	  NUMBER;
15:35:46 175  var_gc_purchase_invoice_id  NUMBER;
15:35:46 176  BEGIN
15:35:46 177  
15:35:46 178   /*FOR f_account in (
15:35:46 179  	  select id from account where group_id = in_group_id
15:35:46 180  	)
15:35:46 181  	loop
15:35:46 182  
15:35:46 183  	  -- delete account
15:35:46 184  	  delete from account where id = f_account.id;
15:35:46 185  
15:35:46 186  	end loop;*/
15:35:46 187  
15:35:46 188  	BEGIN
15:35:46 189  	  SELECT
15:35:46 190  	    ACCOUNT.ID into var_account_id
15:35:46 191  	  FROM
15:35:46 192  	    ACCOUNT
15:35:46 193  	  WHERE
15:35:46 194  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46 195  	  EXCEPTION
15:35:46 196  	    WHEN NO_DATA_FOUND THEN
15:35:46 197  	      -- Nothing to do
15:35:46 198  	      RETURN;
15:35:46 199  	END;
15:35:46 200  
15:35:46 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
15:35:46 202  	OPEN var_subscription_id_set FOR
15:35:46 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
15:35:46 204  	LOOP
15:35:46 205  	  FETCH var_subscription_id_set into var_subscription_id;
15:35:46 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
15:35:46 207  
15:35:46 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
15:35:46 209  	  OPEN var_license_id_set FOR
15:35:46 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
15:35:46 211  	  LOOP
15:35:46 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
15:35:46 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
15:35:46 214  
15:35:46 215  
15:35:46 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
15:35:46 217  	    OPEN var_gift_certificate_id_set FOR
15:35:46 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
15:35:46 219  	    LOOP
15:35:46 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
15:35:46 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
15:35:46 222  
15:35:46 223  	      -- DELETE GIFT_CERTIFICATE
15:35:46 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
15:35:46 225  
15:35:46 226  	      -- DELETE LICENSE
15:35:46 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
15:35:46 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
15:35:46 229  	      END IF;
15:35:46 230  
15:35:46 231  	    END LOOP;
15:35:46 232  
15:35:46 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
15:35:46 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
15:35:46 235  
15:35:46 236  	    -- DELETE LICENSE
15:35:46 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
15:35:46 238  
15:35:46 239  	    -- DELETE INVOICE
15:35:46 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
15:35:46 241  	      TEST_DELETE_INVOICE(var_invoice_id);
15:35:46 242  	    END IF;
15:35:46 243  	  END LOOP;
15:35:46 244  
15:35:46 245  	  -- DELETE SUBSCRIPTION_NOTE
15:35:46 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
15:35:46 247  
15:35:46 248  	  -- DELETE SUBSCRIPTION META_DATA
15:35:46 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
15:35:46 250  
15:35:46 251  	  -- DELETE SUBSCRIPTION
15:35:46 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
15:35:46 253  	END LOOP;
15:35:46 254  
15:35:46 255  	-- DELETE CREDIT_CARDS
15:35:46 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
15:35:46 257  
15:35:46 258  	-- DELETE PAYPAL
15:35:46 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
15:35:46 260  
15:35:46 261  	-- DELETE FLAGS
15:35:46 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
15:35:46 263  
15:35:46 264  	-- DELETE ACCOUNT NOTES
15:35:46 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
15:35:46 266  
15:35:46 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
15:35:46 268  	OPEN var_gift_certificate_id_set FOR
15:35:46 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
15:35:46 270  	LOOP
15:35:46 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
15:35:46 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
15:35:46 273  
15:35:46 274  	  -- DELETE GIFT CERTIFICATE
15:35:46 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
15:35:46 276  
15:35:46 277  	  -- DELETE INVOICE
15:35:46 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
15:35:46 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
15:35:46 280  	  END IF;
15:35:46 281  	END LOOP;
15:35:46 282  
15:35:46 283  	-- DELETE LOCKS
15:35:46 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
15:35:46 285  
15:35:46 286  	-- DELETE ACCOUNT
15:35:46 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
15:35:46 288  
15:35:46 289  END TEST_DELETE_USER_ACCOUNT;
15:35:46 290  
15:35:46 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
15:35:46 292  	in_start_group_id IN NUMBER,
15:35:46 293  	in_end_group_id   IN NUMBER
15:35:46 294  ) IS
15:35:46 295   gid ACCOUNT.GROUP_ID%TYPE;
15:35:46 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
15:35:46 297  BEGIN
15:35:46 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
15:35:46 299  	/*
15:35:46 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
15:35:46 301  	LOOP
15:35:46 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
15:35:46 303  	END LOOP;*/
15:35:46 304  	OPEN c(in_start_group_id, in_end_group_id);
15:35:46 305  	WHILE c%ISOPEN LOOP
15:35:46 306  	  FETCH c INTO gid;
15:35:46 307  	  IF c%NOTFOUND THEN
15:35:46 308  	   CLOSE c;
15:35:46 309  	  END IF;
15:35:46 310  	  TEST_DELETE_USER_ACCOUNT(gid);
15:35:46 311  	END LOOP;
15:35:46 312  END;
15:35:46 313  
15:35:46 314  /**********************************************************/
15:35:46 315  
15:35:46 316  FUNCTION TEST_IS_INVOICE_EXISTS(
15:35:46 317  /*
15:35:46 318  1 - exists
15:35:46 319  0 - not exists
15:35:46 320  */
15:35:46 321  	in_invoice_id IN NUMBER
15:35:46 322  ) RETURN NUMBER AS
15:35:46 323  var_invoice_count NUMBER;
15:35:46 324  BEGIN
15:35:46 325  	SELECT
15:35:46 326  	  COUNT(*) into var_invoice_count
15:35:46 327  	FROM
15:35:46 328  	  INVOICE
15:35:46 329  	WHERE
15:35:46 330  	  INVOICE.ID = in_invoice_id;
15:35:46 331  	IF var_invoice_count = 0 THEN
15:35:46 332  	  RETURN 0;
15:35:46 333  	ELSE
15:35:46 334  	  RETURN 1;
15:35:46 335  	END IF;
15:35:46 336  END;
15:35:46 337  
15:35:46 338  PROCEDURE TEST_GET_INVOICE_INFO (
15:35:46 339  	in_invoice_id  IN NUMBER,
15:35:46 340  	out_result_set OUT SYS_REFCURSOR
15:35:46 341  ) AS
15:35:46 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
15:35:46 343  BEGIN
15:35:46 344  
15:35:46 345  	 OPEN out_result_set FOR SELECT
15:35:46 346  	    in_invoice_id AS "INVOICE_ID",
15:35:46 347  	    INVOICE.INVOICE_STATUS_ID,
15:35:46 348  	    PROCS_INVOICE_V17.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
15:35:46 349  	    CHARGE.ID AS "CHARGE_ID",
15:35:46 350  	    CHARGE.CHARGE_AMOUNT,
15:35:46 351  	    CHARGE.TRANSACTION_ID,
15:35:46 352  	    TRANSACTION.TRANSACTION_STATUS_ID
15:35:46 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
15:35:46 354  
15:35:46 355  END TEST_GET_INVOICE_INFO;
15:35:46 356  
15:35:46 357  /******************************************************************************/
15:35:46 358  
15:35:46 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
15:35:46 360  	in_offer_chain_id in number
15:35:46 361  ) as
15:35:46 362  begin
15:35:46 363  
15:35:46 364  	for v_offer_chain in (
15:35:46 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
15:35:46 366  	)
15:35:46 367  	loop
15:35:46 368  
15:35:46 369  	  for v_offer in (
15:35:46 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
15:35:46 371  	  )
15:35:46 372  	  loop
15:35:46 373  
15:35:46 374  	    for v_product_offering in (
15:35:46 375  	      select
15:35:46 376  		product_offering.id,
15:35:46 377  		product_offering.product_id
15:35:46 378  	      from
15:35:46 379  		offer_product_offering
15:35:46 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
15:35:46 381  	      where offer_product_offering.offer_id = v_offer.id
15:35:46 382  	    )
15:35:46 383  	    loop
15:35:46 384  
15:35:46 385  	      -- delete product eligibility
15:35:46 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
15:35:46 387  
15:35:46 388  	      -- delete meta data
15:35:46 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
15:35:46 390  
15:35:46 391  	      -- delete product
15:35:46 392  	      delete from product where id = v_product_offering.product_id;
15:35:46 393  
15:35:46 394  	      -- delete product_offering
15:35:46 395  	      delete from product_offering where id = v_product_offering.id;
15:35:46 396  
15:35:46 397  	    end loop;
15:35:46 398  
15:35:46 399  	    -- delete data from offer_product_offering table
15:35:46 400  	    delete from offer_product_offering where offer_id = v_offer.id;
15:35:46 401  
15:35:46 402  	    -- delete data from offer_offer_chain table
15:35:46 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
15:35:46 404  
15:35:46 405  	    -- delete offer
15:35:46 406  	    delete from offer where id = v_offer.id;
15:35:46 407  
15:35:46 408  	  end loop;
15:35:46 409  
15:35:46 410  	  -- delete offer_chain_eligibility
15:35:46 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
15:35:46 412  
15:35:46 413  	  -- delete metadata
15:35:46 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
15:35:46 415  
15:35:46 416  	  -- delete offer chain
15:35:46 417  	  delete from offer_chain where id = v_offer_chain.id;
15:35:46 418  
15:35:46 419  	end loop;
15:35:46 420  
15:35:46 421  end;
15:35:46 422  
15:35:46 423  END PROCS_TEST_V17;
15:35:46 424  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.05
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V17" AS
15:35:46   2  
15:35:46   3  REAL_TIME_CANCEL_REASON CONSTANT NUMBER := 41;
15:35:46   4  
15:35:46   5  PROCEDURE ANNOTATE_ACCOUNT (
15:35:46   6  /*
15:35:46   7  Throws exceptions:
15:35:46   8  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46   9  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  10  */
15:35:46  11  	in_group_id   IN  NUMBER,
15:35:46  12  	in_agent_id   IN  NUMBER,
15:35:46  13  	in_note       IN  VARCHAR2,
15:35:46  14  	in_created_by IN  VARCHAR2
15:35:46  15  ) AS
15:35:46  16  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
15:35:46  17  -- VARIABLES
15:35:46  18  var_account_id	  NUMBER;
15:35:46  19  var_account_note_id NUMBER;
15:35:46  20  -- EXCEPTIONS
15:35:46  21  BAD_ACCOUNT_ID EXCEPTION;
15:35:46  22  BEGIN
15:35:46  23  
15:35:46  24  	-- Get account id
15:35:46  25  	BEGIN
15:35:46  26  	  SELECT
15:35:46  27  	    ACCOUNT.ID into var_account_id
15:35:46  28  	  FROM
15:35:46  29  	    ACCOUNT
15:35:46  30  	  WHERE
15:35:46  31  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46  32  	  EXCEPTION
15:35:46  33  	    WHEN NO_DATA_FOUND THEN
15:35:46  34  	      RAISE BAD_ACCOUNT_ID;
15:35:46  35  	END;
15:35:46  36  
15:35:46  37  	-- Insert new row into ACCOUNT_NOTE table
15:35:46  38  	PROCS_ACCOUNT_CRU_V17.CREATE_ACCOUNT_NOTE(
15:35:46  39  	  inout_account_note_id => var_account_note_id,
15:35:46  40  	  in_agent_id		=> in_agent_id,
15:35:46  41  	  in_account_id 	=> var_account_id,
15:35:46  42  	  in_note		=> in_note,
15:35:46  43  	  in_created_by 	=> in_created_by
15:35:46  44  	);
15:35:46  45  
15:35:46  46  EXCEPTION
15:35:46  47  WHEN BAD_ACCOUNT_ID THEN
15:35:46  48  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46  49  	  SPROC_NAME, 'No such group id');
15:35:46  50  WHEN OTHERS THEN
15:35:46  51  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46  52  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46  53  END ANNOTATE_ACCOUNT;
15:35:46  54  
15:35:46  55  /******************************************************************************/
15:35:46  56  
15:35:46  57  PROCEDURE ASSERT_ACCOUNT_EXISTS (
15:35:46  58  /*
15:35:46  59  Throws exceptions:
15:35:46  60  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46  61  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  62  */
15:35:46  63  	in_group_id IN	NUMBER,
15:35:46  64  	out_exists  OUT NUMBER
15:35:46  65  ) AS
15:35:46  66  -- VARIABLES
15:35:46  67  var_found_id  NUMBER;
15:35:46  68  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
15:35:46  69  BEGIN
15:35:46  70  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
15:35:46  71  	out_exists := GLOBAL_CONSTANTS_V17.TRUE;
15:35:46  72  EXCEPTION
15:35:46  73  WHEN NO_DATA_FOUND THEN
15:35:46  74  	out_exists := GLOBAL_CONSTANTS_V17.FALSE;
15:35:46  75  WHEN OTHERS THEN
15:35:46  76  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46  78  END ASSERT_ACCOUNT_EXISTS;
15:35:46  79  
15:35:46  80  /******************************************************************************/
15:35:46  81  
15:35:46  82  PROCEDURE DISABLE_ACCOUNT (
15:35:46  83  /*
15:35:46  84  Throws exceptions:
15:35:46  85  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46  86  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46  87  */
15:35:46  88  	in_group_id   IN NUMBER,
15:35:46  89  	in_updated_by IN VARCHAR2,
15:35:46  90  	in_note       IN VARCHAR2,
15:35:46  91  	in_agent_id   IN NUMBER
15:35:46  92  ) AS
15:35:46  93  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
15:35:46  94  var_account_id	      NUMBER;
15:35:46  95  current_account_status  NUMBER;
15:35:46  96  
15:35:46  97  var_active_subscriptions_num NUMBER;
15:35:46  98  var_pending_invoices_num	   NUMBER;
15:35:46  99  
15:35:46 100  -- EXCEPTIONS
15:35:46 101  BAD_ACOUNT_ID		EXCEPTION;
15:35:46 102  BAD_CURRENT_ACC_STATUS	EXCEPTION;
15:35:46 103  PENDING_INVOICES_FOUND	EXCEPTION;
15:35:46 104  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
15:35:46 105  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
15:35:46 106  EXCEPTION_MESSAGE 	VARCHAR2(1024);
15:35:46 107  BEGIN
15:35:46 108  
15:35:46 109  	-- Get account's status and id
15:35:46 110  	BEGIN
15:35:46 111  	  SELECT
15:35:46 112  	    ACCOUNT.ACCOUNT_STATUS_ID,
15:35:46 113  	    ACCOUNT.ID
15:35:46 114  	  INTO
15:35:46 115  	    current_account_status,
15:35:46 116  	    var_account_id
15:35:46 117  	  FROM ACCOUNT
15:35:46 118  	  WHERE
15:35:46 119  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46 120  	  EXCEPTION
15:35:46 121  	    WHEN NO_DATA_FOUND THEN
15:35:46 122  	      RAISE BAD_ACOUNT_ID;
15:35:46 123  	END;
15:35:46 124  
15:35:46 125  	-- For now, we can disable account whenever
15:35:46 126  	IF current_account_status = GLOBAL_STATUSES_V17.ACCOUNT_DISABLED THEN
15:35:46 127  	  RAISE BAD_CURRENT_ACC_STATUS;
15:35:46 128  	END IF;
15:35:46 129  
15:35:46 130  	-- Checks for out outstanding balances
15:35:46 131  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
15:35:46 132  	SELECT
15:35:46 133  	  COUNT(*) into var_pending_invoices_num
15:35:46 134  	FROM
15:35:46 135  	  LICENSE
15:35:46 136  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:46 137  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:35:46 138  	WHERE
15:35:46 139  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:46 140  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V17.INVOICE_OPEN FROM DUAL );
15:35:46 141  
15:35:46 142  	IF var_pending_invoices_num > 0 THEN
15:35:46 143  	  RAISE PENDING_INVOICES_FOUND;
15:35:46 144  	END IF;
15:35:46 145  
15:35:46 146  	SELECT
15:35:46 147  	  COUNT(*) into var_active_subscriptions_num
15:35:46 148  	FROM
15:35:46 149  	  SUBSCRIPTION
15:35:46 150  	WHERE
15:35:46 151  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:46 152  	  AND (
15:35:46 153  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:46 154  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED
15:35:46 155  	  );
15:35:46 156  
15:35:46 157  	IF var_active_subscriptions_num > 0 THEN
15:35:46 158  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
15:35:46 159  	END IF;
15:35:46 160  
15:35:46 161  	PROCS_ACCOUNT_V17.UPDATE_ACCOUNT_STATUS(
15:35:46 162  	  in_account_id        => var_account_id,
15:35:46 163  	  in_account_status_id => GLOBAL_STATUSES_V17.ACCOUNT_DISABLED,
15:35:46 164  	  in_updated_by        => in_updated_by
15:35:46 165  	);
15:35:46 166  
15:35:46 167  	-- Annotate account
15:35:46 168  	IF in_note IS NOT NULL THEN
15:35:46 169  	  BEGIN
15:35:46 170  	    PROCS_ACCOUNT_V17.ANNOTATE_ACCOUNT(
15:35:46 171  	      in_group_id   => in_group_id,
15:35:46 172  	      in_agent_id   => in_agent_id,
15:35:46 173  	      in_note	    => in_note,
15:35:46 174  	      in_created_by => in_updated_by
15:35:46 175  	    );
15:35:46 176  	    EXCEPTION
15:35:46 177  	      WHEN OTHERS THEN
15:35:46 178  		EXCEPTION_MESSAGE := SQLERRM;
15:35:46 179  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
15:35:46 180  	  END;
15:35:46 181  	END IF;
15:35:46 182  
15:35:46 183  EXCEPTION
15:35:46 184  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
15:35:46 185  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 186  	  SPROC_NAME, 'Account has active or suspended subsciptions');
15:35:46 187  WHEN BAD_CURRENT_ACC_STATUS THEN
15:35:46 188  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 189  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
15:35:46 190  WHEN PENDING_INVOICES_FOUND THEN
15:35:46 191  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 192  	  SPROC_NAME, 'Opened/Pending invoices founded');
15:35:46 193  WHEN BAD_ACOUNT_ID THEN
15:35:46 194  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 195  	  SPROC_NAME, 'No such account');
15:35:46 196  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
15:35:46 197  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 198  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
15:35:46 199  WHEN OTHERS THEN
15:35:46 200  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 201  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 202  END DISABLE_ACCOUNT;
15:35:46 203  
15:35:46 204  /******************************************************************************/
15:35:46 205  
15:35:46 206  PROCEDURE CREATE_ACTIVE_ACCOUNT(
15:35:46 207  /*
15:35:46 208  Throws exceptions:
15:35:46 209  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 210  APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR
15:35:46 211  */
15:35:46 212  	  in_created_by IN VARCHAR2,
15:35:46 213  	  in_group_id	IN NUMBER
15:35:46 214  ) AS
15:35:46 215  -- VARIABLES
15:35:46 216  SPROC_NAME      CONSTANT VARCHAR2(21) := 'CREATE_ACTIVE_ACCOUNT';
15:35:46 217  new_account_id  NUMBER;
15:35:46 218  temp_group_id   NUMBER;
15:35:46 219  -- EXCEPTIONS
15:35:46 220  GROUP_EXISTS_EXCEPTION EXCEPTION;
15:35:46 221  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:46 222  BEGIN
15:35:46 223  	-- Check if account already exists
15:35:46 224  	BEGIN
15:35:46 225  	  SELECT
15:35:46 226  	    ACCOUNT.GROUP_ID into temp_group_id
15:35:46 227  	  FROM
15:35:46 228  	    ACCOUNT
15:35:46 229  	  WHERE
15:35:46 230  	    ACCOUNT.GROUP_ID = in_group_id
15:35:46 231  	    AND ROWNUM <= 1;
15:35:46 232  
15:35:46 233  	  IF SQL%ROWCOUNT = 1 THEN
15:35:46 234  	    RAISE GROUP_EXISTS_EXCEPTION;
15:35:46 235  	  END IF;
15:35:46 236  
15:35:46 237  	  EXCEPTION
15:35:46 238  	    WHEN NO_DATA_FOUND THEN
15:35:46 239  	      NULL;
15:35:46 240  	END;
15:35:46 241  
15:35:46 242  	-- Insert new row into ACCOUNT table
15:35:46 243  	PROCS_ACCOUNT_CRU_V17.CREATE_ACCOUNT(
15:35:46 244  	  out_account_id	=> new_account_id,
15:35:46 245  	  in_account_status_id	=> GLOBAL_STATUSES_V17.ACCOUNT_ACTIVE,
15:35:46 246  	  in_group_id		=> in_group_id,
15:35:46 247  	  in_created_by 	=> in_created_by,
15:35:46 248  	  in_system_category_id => GLOBAL_ENUMS_V17.SYSTEM_CATEGORY_LIVE
15:35:46 249  	);
15:35:46 250  
15:35:46 251  EXCEPTION
15:35:46 252  WHEN GROUP_EXISTS_EXCEPTION THEN
15:35:46 253  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.DUPLICATE_ERROR,
15:35:46 254  	  SPROC_NAME, 'Group already exists');
15:35:46 255  WHEN OTHERS THEN
15:35:46 256  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 257  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 258  END CREATE_ACTIVE_ACCOUNT;
15:35:46 259  
15:35:46 260  /******************************************************************************/
15:35:46 261  
15:35:46 262  PROCEDURE REACTIVATE_ACCOUNT (
15:35:46 263  /*
15:35:46 264  Throws exceptions:
15:35:46 265  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 266  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 267  */
15:35:46 268  	in_group_id   IN NUMBER,
15:35:46 269  	in_updated_by IN VARCHAR2,
15:35:46 270  	in_note       IN VARCHAR2,
15:35:46 271  	in_agent_id   IN NUMBER
15:35:46 272  ) AS
15:35:46 273  -- VARIABLES
15:35:46 274  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
15:35:46 275  var_account_id	      NUMBER;
15:35:46 276  current_account_status  NUMBER;
15:35:46 277  
15:35:46 278  -- EXCEPTIONS
15:35:46 279  BAD_CURRENT_ACC_STATUS EXCEPTION;
15:35:46 280  CAN_NOT_CREATE_NOTE    EXCEPTION;
15:35:46 281  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:46 282  BEGIN
15:35:46 283  	-- Get account id, status
15:35:46 284  	SELECT
15:35:46 285  	  ACCOUNT.ACCOUNT_STATUS_ID,
15:35:46 286  	  ACCOUNT.ID
15:35:46 287  	INTO
15:35:46 288  	  current_account_status,
15:35:46 289  	  var_account_id
15:35:46 290  	FROM ACCOUNT
15:35:46 291  	WHERE
15:35:46 292  	  ACCOUNT.GROUP_ID = in_group_id;
15:35:46 293  
15:35:46 294  	IF current_account_status != GLOBAL_STATUSES_V17.ACCOUNT_FROZEN THEN
15:35:46 295  	  RAISE BAD_CURRENT_ACC_STATUS;
15:35:46 296  	END IF;
15:35:46 297  
15:35:46 298  	-- Change account status
15:35:46 299  	PROCS_ACCOUNT_V17.UPDATE_ACCOUNT_STATUS(
15:35:46 300  	  in_account_id        => var_account_id,
15:35:46 301  	  in_updated_by        => in_updated_by,
15:35:46 302  	  in_account_status_id => GLOBAL_STATUSES_V17.ACCOUNT_ACTIVE
15:35:46 303  	);
15:35:46 304  
15:35:46 305  	-- Add note
15:35:46 306  	BEGIN
15:35:46 307  	  PROCS_ACCOUNT_V17.ANNOTATE_ACCOUNT(
15:35:46 308  	    in_group_id   => in_group_id,
15:35:46 309  	    in_agent_id   => in_agent_id,
15:35:46 310  	    in_note	  => in_note,
15:35:46 311  	    in_created_by => in_updated_by
15:35:46 312  	  );
15:35:46 313  	  EXCEPTION
15:35:46 314  	    WHEN OTHERS THEN
15:35:46 315  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 316  	      RAISE CAN_NOT_CREATE_NOTE;
15:35:46 317  	END;
15:35:46 318  
15:35:46 319  EXCEPTION
15:35:46 320  WHEN BAD_CURRENT_ACC_STATUS THEN
15:35:46 321  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 322  	  SPROC_NAME, 'Current account status is not "frozen"');
15:35:46 323  WHEN NO_DATA_FOUND THEN
15:35:46 324  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 325  	  SPROC_NAME, 'Could not find account with given group ID');
15:35:46 326  WHEN CAN_NOT_CREATE_NOTE THEN
15:35:46 327  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 328  	  SPROC_NAME, 'Could not annotate account');
15:35:46 329  WHEN OTHERS THEN
15:35:46 330  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 332  END REACTIVATE_ACCOUNT;
15:35:46 333  
15:35:46 334  /******************************************************************************/
15:35:46 335  
15:35:46 336  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
15:35:46 337  /*
15:35:46 338  IN:
15:35:46 339  instr_status:
15:35:46 340  1 - get active instruments only (default)
15:35:46 341  0 - get inactive instruments only
15:35:46 342  
15:35:46 343  Throws exceptions:
15:35:46 344  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 345  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 346  */
15:35:46 347  	in_group_id	  IN NUMBER,
15:35:46 348  	out_result_cc_set OUT SYS_REFCURSOR,
15:35:46 349  	out_default_id	  OUT NUMBER,
15:35:46 350  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V17.CREDIT_CARD_ACTIVE
15:35:46 351  ) AS
15:35:46 352  SPROC_NAME		 CONSTANT VARCHAR2(24) := 'GET_ACCOUNT_CREDIT_CARDS';
15:35:46 353  var_account_id		 NUMBER;
15:35:46 354  var_def_instrument_type_id NUMBER;
15:35:46 355  var_def_instrument_id	 NUMBER;
15:35:46 356  temp_cc_status_id 	 NUMBER;
15:35:46 357  
15:35:46 358  -- Exceptions
15:35:46 359  WRONG_INSTR_EXCEPTION	     EXCEPTION;
15:35:46 360  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
15:35:46 361  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
15:35:46 362  BEGIN
15:35:46 363  
15:35:46 364  	-- Get group id
15:35:46 365  	SELECT
15:35:46 366  	  ACCOUNT.ID INTO var_account_id
15:35:46 367  	FROM
15:35:46 368  	  ACCOUNT
15:35:46 369  	WHERE
15:35:46 370  	  ACCOUNT.GROUP_ID = in_group_id;
15:35:46 371  
15:35:46 372  	-- Check that incoming parameter is correct
15:35:46 373  	BEGIN
15:35:46 374  	  SELECT
15:35:46 375  	    CREDIT_CARD_STATUS.ID into temp_cc_status_id
15:35:46 376  	  FROM
15:35:46 377  	    CREDIT_CARD_STATUS
15:35:46 378  	  WHERE
15:35:46 379  	    CREDIT_CARD_STATUS.ID = in_instr_status;
15:35:46 380  	  EXCEPTION
15:35:46 381  	    WHEN NO_DATA_FOUND THEN
15:35:46 382  	      RAISE WRONG_INSTR_EXCEPTION;
15:35:46 383  	END;
15:35:46 384  
15:35:46 385  	-- Select all crdit cards for given account
15:35:46 386  	OPEN out_result_cc_set FOR
15:35:46 387  	SELECT
15:35:46 388  	  CREDIT_CARD.ID,
15:35:46 389  	  CREDIT_CARD.ACCOUNT_ID,
15:35:46 390  	  CREDIT_CARD.INSTRUMENT_NAME,
15:35:46 391  	  CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
15:35:46 392  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS,
15:35:46 393  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
15:35:46 394  	  CREDIT_CARD.STATE,
15:35:46 395  	  CREDIT_CARD.CITY,
15:35:46 396  	  CREDIT_CARD.POSTAL_CODE,
15:35:46 397  	  CREDIT_CARD.COUNTRY,
15:35:46 398  	  CREDIT_CARD.LAST_FOUR_CC,
15:35:46 399  	  CREDIT_CARD.EXPIRATION_DATE,
15:35:46 400  	  CREDIT_CARD.CREDIT_CARD_TYPE_ID,
15:35:46 401  	  CREDIT_CARD.SECRET_TOKEN,
15:35:46 402  	  CREDIT_CARD.CREATE_DATE,
15:35:46 403  	  CREDIT_CARD.CREATED_BY,
15:35:46 404  	  CREDIT_CARD.UPDATE_DATE,
15:35:46 405  	  CREDIT_CARD.UPDATED_BY,
15:35:46 406  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
15:35:46 407  	  CREDIT_CARD.PRIVATE_FIRST_NAME,
15:35:46 408  	  CREDIT_CARD.PRIVATE_LAST_NAME
15:35:46 409  	FROM
15:35:46 410  	  CREDIT_CARD
15:35:46 411  	WHERE
15:35:46 412  	  CREDIT_CARD.ACCOUNT_ID = var_account_id
15:35:46 413  	  AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_instr_status;
15:35:46 414  
15:35:46 415  	-- Get default credit card if exists
15:35:46 416  	BEGIN
15:35:46 417  	  PROCS_FIN_INSTRUMENTS_V17.GET_DEF_FINANCIAL_INSTRUMENT(
15:35:46 418  	    in_group_id 	   => in_group_id,
15:35:46 419  	    out_instrument_type_id => var_def_instrument_type_id,
15:35:46 420  	    out_instrument_id	   => var_def_instrument_id
15:35:46 421  	  );
15:35:46 422  	  EXCEPTION
15:35:46 423  	    WHEN OTHERS THEN
15:35:46 424  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 425  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
15:35:46 426  	END;
15:35:46 427  
15:35:46 428  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_CREDIT_CARD THEN
15:35:46 429  	  out_default_id := var_def_instrument_id;
15:35:46 430  	ELSE
15:35:46 431  	  out_default_id := 0;
15:35:46 432  	END IF;
15:35:46 433  
15:35:46 434  EXCEPTION
15:35:46 435  WHEN NO_DATA_FOUND THEN
15:35:46 436  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 437  	  SPROC_NAME, 'No such account');
15:35:46 438  WHEN WRONG_INSTR_EXCEPTION THEN
15:35:46 439  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 440  	  SPROC_NAME, 'Wrong instrument status');
15:35:46 441  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
15:35:46 442  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 443  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
15:35:46 444  WHEN OTHERS THEN
15:35:46 445  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 446  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 447  END GET_ACCOUNT_CREDIT_CARDS;
15:35:46 448  
15:35:46 449  /******************************************************************************/
15:35:46 450  
15:35:46 451  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
15:35:46 452  /*
15:35:46 453  IN:
15:35:46 454  instr_status:
15:35:46 455  GLOBAL_CONSTANTS_V17.TRUE - get active instruments only (default)
15:35:46 456  GLOBAL_CONSTANTS_V17.FALSE - get inactive instruments only
15:35:46 457  
15:35:46 458  Throws exceptions:
15:35:46 459  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 460  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 461  */
15:35:46 462  	in_group_id	  IN NUMBER,
15:35:46 463  	out_result_gc_set OUT SYS_REFCURSOR,
15:35:46 464  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.TRUE
15:35:46 465  ) AS
15:35:46 466  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
15:35:46 467  var_account_id NUMBER;
15:35:46 468  
15:35:46 469  -- Exceptions
15:35:46 470  WRONG_INSTR_EXCEPTION	 EXCEPTION;
15:35:46 471  BEGIN
15:35:46 472  
15:35:46 473  	-- Get account id
15:35:46 474  	SELECT
15:35:46 475  	  ACCOUNT.ID INTO var_account_id
15:35:46 476  	FROM
15:35:46 477  	  ACCOUNT
15:35:46 478  	WHERE
15:35:46 479  	  ACCOUNT.GROUP_ID = in_group_id;
15:35:46 480  
15:35:46 481  	-- Check that incoming data is correct
15:35:46 482  	IF in_instr_status != GLOBAL_CONSTANTS_V17.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V17.FALSE THEN
15:35:46 483  	  RAISE WRONG_INSTR_EXCEPTION;
15:35:46 484  	END IF;
15:35:46 485  
15:35:46 486  	OPEN out_result_gc_set FOR
15:35:46 487  	SELECT
15:35:46 488  	  GIFT_CERTIFICATE.ID,
15:35:46 489  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
15:35:46 490  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
15:35:46 491  	  GIFT_CERTIFICATE.PURCHASE_DATE,
15:35:46 492  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
15:35:46 493  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
15:35:46 494  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
15:35:46 495  	  GIFT_CERTIFICATE.CODE,
15:35:46 496  	  GIFT_CERTIFICATE.CREATE_DATE,
15:35:46 497  	  GIFT_CERTIFICATE.CREATED_BY,
15:35:46 498  	  GIFT_CERTIFICATE.UPDATE_DATE,
15:35:46 499  	  GIFT_CERTIFICATE.UPDATED_BY,
15:35:46 500  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
15:35:46 501  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
15:35:46 502  	  GIFT_CERTIFICATE.SENDER_NAME,
15:35:46 503  	  GIFT_CERTIFICATE.SENDER_EMAIL,
15:35:46 504  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
15:35:46 505  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
15:35:46 506  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
15:35:46 507  	  GIFT_CERTIFICATE.GIFT_MESSAGE
15:35:46 508  	FROM
15:35:46 509  	  GIFT_CERTIFICATE
15:35:46 510  	WHERE
15:35:46 511  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
15:35:46 512  	  AND (
15:35:46 513  		( in_instr_status = GLOBAL_CONSTANTS_V17.TRUE AND
15:35:46 514  		  (
15:35:46 515  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
15:35:46 516  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_ACTIVE
15:35:46 517  		  )
15:35:46 518  		)
15:35:46 519  		OR
15:35:46 520  		(
15:35:46 521  		  in_instr_status = GLOBAL_CONSTANTS_V17.FALSE AND
15:35:46 522  		  (
15:35:46 523  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
15:35:46 524  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V17.GIFT_CERTIFICATE_ACTIVE
15:35:46 525  		  )
15:35:46 526  		)
15:35:46 527  	      );
15:35:46 528  
15:35:46 529  EXCEPTION
15:35:46 530  WHEN NO_DATA_FOUND THEN
15:35:46 531  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 532  	  SPROC_NAME, 'Can not find account with given group id');
15:35:46 533  WHEN WRONG_INSTR_EXCEPTION THEN
15:35:46 534  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 535  	  SPROC_NAME, 'Wrong gift certificate type');
15:35:46 536  WHEN OTHERS THEN
15:35:46 537  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 538  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 539  END GET_ACCOUNT_GIFT_CERTIFICATES;
15:35:46 540  
15:35:46 541  /******************************************************************************/
15:35:46 542  
15:35:46 543  PROCEDURE GET_ACCOUNT_INFO  (
15:35:46 544  /*
15:35:46 545  Throws exceptions:
15:35:46 546  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 547  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 548  */
15:35:46 549  	  in_group_id	    IN	NUMBER,
15:35:46 550  	  out_account_info  OUT SYS_REFCURSOR
15:35:46 551  ) AS
15:35:46 552  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
15:35:46 553  var_account_id  NUMBER;
15:35:46 554  BEGIN
15:35:46 555  
15:35:46 556  	-- Get account id
15:35:46 557  	SELECT
15:35:46 558  	  ACCOUNT.ID INTO var_account_id
15:35:46 559  	FROM
15:35:46 560  	  ACCOUNT
15:35:46 561  	WHERE
15:35:46 562  	  ACCOUNT.GROUP_ID = in_group_id;
15:35:46 563  
15:35:46 564  	-- Get account info
15:35:46 565  	OPEN out_account_info FOR
15:35:46 566  	  SELECT
15:35:46 567  	    ACCOUNT.ACCOUNT_STATUS_ID
15:35:46 568  	  FROM ACCOUNT
15:35:46 569  	  WHERE
15:35:46 570  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46 571  
15:35:46 572  EXCEPTION
15:35:46 573  WHEN NO_DATA_FOUND THEN
15:35:46 574  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 575  	  SPROC_NAME, 'No such account');
15:35:46 576  WHEN OTHERS THEN
15:35:46 577  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 578  	  SPROC_NAME, 'Unknown Error', SQLERRM);
15:35:46 579  END GET_ACCOUNT_INFO;
15:35:46 580  
15:35:46 581  /******************************************************************************/
15:35:46 582  
15:35:46 583  PROCEDURE GET_ACCOUNT_NOTES (
15:35:46 584  /*
15:35:46 585  Throws exceptions:
15:35:46 586  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 587  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 588  */
15:35:46 589  	  in_group_id	 IN  NUMBER,
15:35:46 590  	  out_result_set OUT SYS_REFCURSOR
15:35:46 591  ) AS
15:35:46 592  -- VARIABLES
15:35:46 593  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
15:35:46 594  var_account_id NUMBER;
15:35:46 595  -- EXCEPTIONS
15:35:46 596  BAD_ACCOUNT_ID EXCEPTION;
15:35:46 597  BEGIN
15:35:46 598  
15:35:46 599  	-- Check that account is exists
15:35:46 600  	BEGIN
15:35:46 601  	  SELECT
15:35:46 602  	    ACCOUNT.ID into var_account_id
15:35:46 603  	  FROM
15:35:46 604  	    ACCOUNT
15:35:46 605  	  WHERE
15:35:46 606  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46 607  	  EXCEPTION
15:35:46 608  	    WHEN NO_DATA_FOUND THEN
15:35:46 609  	      RAISE BAD_ACCOUNT_ID;
15:35:46 610  	END;
15:35:46 611  
15:35:46 612  	-- Get account notes
15:35:46 613  	OPEN out_result_set FOR
15:35:46 614  	SELECT
15:35:46 615  	  ACCOUNT_NOTE.ACCOUNT_ID,
15:35:46 616  	  ACCOUNT_NOTE.AGENT_ID,
15:35:46 617  	  ACCOUNT_NOTE.CREATE_DATE,
15:35:46 618  	  ACCOUNT_NOTE.CREATED_BY,
15:35:46 619  	  ACCOUNT_NOTE.ID,
15:35:46 620  	  ACCOUNT_NOTE.NOTE
15:35:46 621  	FROM
15:35:46 622  	  ACCOUNT_NOTE
15:35:46 623  	WHERE
15:35:46 624  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
15:35:46 625  	ORDER BY
15:35:46 626  	  ACCOUNT_NOTE.CREATE_DATE ASC;
15:35:46 627  
15:35:46 628  EXCEPTION
15:35:46 629  WHEN BAD_ACCOUNT_ID THEN
15:35:46 630  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 631  	  SPROC_NAME, 'No such account');
15:35:46 632  WHEN OTHERS THEN
15:35:46 633  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 634  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 635  END GET_ACCOUNT_NOTES;
15:35:46 636  
15:35:46 637  /******************************************************************************/
15:35:46 638  
15:35:46 639  PROCEDURE GET_ACCOUNT_PAYPALS(
15:35:46 640  /*
15:35:46 641  IN:
15:35:46 642  instr_status:
15:35:46 643  1 - get active instruments only (default)
15:35:46 644  0 - get inactive instruments only
15:35:46 645  
15:35:46 646  Throws exceptions:
15:35:46 647  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 648  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 649  */
15:35:46 650  	in_group_id	  IN  NUMBER,
15:35:46 651  	out_result_pp_set OUT SYS_REFCURSOR,
15:35:46 652  	out_default_id	  OUT NUMBER,
15:35:46 653  	in_instr_status   IN  NUMBER DEFAULT GLOBAL_STATUSES_V17.PAYPAL_ACTIVE
15:35:46 654  ) AS
15:35:46 655  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACCOUNT_PAYPALS';
15:35:46 656  -- VARIABLES
15:35:46 657  var_account_id NUMBER;
15:35:46 658  var_def_instrument_type_id NUMBER;
15:35:46 659  var_def_instrument_id	 NUMBER;
15:35:46 660  -- EXCEPTIONS
15:35:46 661  WRONG_INSTR_EXCEPTION	 EXCEPTION;
15:35:46 662  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
15:35:46 663  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
15:35:46 664  BEGIN
15:35:46 665  
15:35:46 666  	-- Get account id
15:35:46 667  	SELECT
15:35:46 668  	  ACCOUNT.ID INTO var_account_id
15:35:46 669  	FROM
15:35:46 670  	  ACCOUNT
15:35:46 671  	WHERE
15:35:46 672  	  ACCOUNT.GROUP_ID = in_group_id;
15:35:46 673  
15:35:46 674  	-- Check that all passed agruments are valid
15:35:46 675  	IF in_instr_status != GLOBAL_STATUSES_V17.PAYPAL_ACTIVE
15:35:46 676  	  AND in_instr_status != GLOBAL_STATUSES_V17.PAYPAL_INACTIVE
15:35:46 677  	  AND in_instr_status != GLOBAL_STATUSES_V17.PAYPAL_FROZEN THEN
15:35:46 678  	  RAISE WRONG_INSTR_EXCEPTION;
15:35:46 679  	END IF;
15:35:46 680  
15:35:46 681  	-- Retreiving information about paypals
15:35:46 682  	OPEN out_result_pp_set FOR
15:35:46 683  	SELECT
15:35:46 684  	  PAYPAL.ID,
15:35:46 685  	  PAYPAL.ACCOUNT_ID,
15:35:46 686  	  PAYPAL.INSTRUMENT_NAME,
15:35:46 687  	  PAYPAL.PRIVATE_EMAIL_ADDRESS,
15:35:46 688  	  PAYPAL.CREATE_DATE,
15:35:46 689  	  PAYPAL.CREATED_BY,
15:35:46 690  	  PAYPAL.UPDATE_DATE,
15:35:46 691  	  PAYPAL.UPDATED_BY,
15:35:46 692  	  PAYPAL.PAYPAL_STATUS_ID,
15:35:46 693  	  PAYPAL.PRIVATE_STREET_ADDRESS,
15:35:46 694  	  PAYPAL.PRIVATE_STREET_ADDRESS2,
15:35:46 695  	  PAYPAL.STATE,
15:35:46 696  	  PAYPAL.CITY,
15:35:46 697  	  PAYPAL.POSTAL_CODE,
15:35:46 698  	  PAYPAL.COUNTRY,
15:35:46 699  	  PAYPAL.EXPIRATION_DATE,
15:35:46 700  	  PAYPAL.SECRET_TOKEN
15:35:46 701  	FROM
15:35:46 702  	  PAYPAL
15:35:46 703  	WHERE
15:35:46 704  	  PAYPAL.ACCOUNT_ID = var_account_id
15:35:46 705  	  AND PAYPAL.PAYPAL_STATUS_ID = in_instr_status;
15:35:46 706  
15:35:46 707  	-- Get default credit card if exists
15:35:46 708  	BEGIN
15:35:46 709  	  PROCS_FIN_INSTRUMENTS_V17.GET_DEF_FINANCIAL_INSTRUMENT(
15:35:46 710  	    in_group_id 	   => in_group_id,
15:35:46 711  	    out_instrument_type_id => var_def_instrument_type_id,
15:35:46 712  	    out_instrument_id	   => var_def_instrument_id
15:35:46 713  	  );
15:35:46 714  	  EXCEPTION
15:35:46 715  	    WHEN OTHERS THEN
15:35:46 716  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 717  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
15:35:46 718  	END;
15:35:46 719  
15:35:46 720  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V17.INSTRUMENT_PAYPAL THEN
15:35:46 721  	  out_default_id := var_def_instrument_id;
15:35:46 722  	ELSE
15:35:46 723  	  out_default_id := 0;
15:35:46 724  	END IF;
15:35:46 725  
15:35:46 726  EXCEPTION
15:35:46 727  WHEN NO_DATA_FOUND THEN
15:35:46 728  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 729  	  SPROC_NAME, 'Could not find account with given group id');
15:35:46 730  WHEN WRONG_INSTR_EXCEPTION THEN
15:35:46 731  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 732  	  SPROC_NAME, 'Bad paypal status id');
15:35:46 733  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
15:35:46 734  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 735  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
15:35:46 736  WHEN OTHERS THEN
15:35:46 737  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 738  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 739  END GET_ACCOUNT_PAYPALS;
15:35:46 740  
15:35:46 741  /******************************************************************************/
15:35:46 742  
15:35:46 743  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
15:35:46 744  /*
15:35:46 745  Throws exceptions:
15:35:46 746  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 747  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 748  */
15:35:46 749  	  in_group_id	 IN  NUMBER,
15:35:46 750  	  in_start_date  IN DATE,
15:35:46 751  	  in_end_date	 IN DATE,
15:35:46 752  	  in_status	 IN NUMBER,
15:35:46 753  	  in_group_account_type IN VARCHAR2,
15:35:46 754  	  out_result_set OUT SYS_REFCURSOR
15:35:46 755  ) AS
15:35:46 756  -- VARIABLES
15:35:46 757  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
15:35:46 758  var_account_id NUMBER;
15:35:46 759  -- EXCEPTIONS
15:35:46 760  BAD_GROUP_ID	      EXCEPTION;
15:35:46 761  BAD_SUBSCRIPTION_STATUS EXCEPTION;
15:35:46 762  BEGIN
15:35:46 763  	-- Check that all passed data is correct
15:35:46 764  	IF in_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE
15:35:46 765  	  AND in_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_SUSPENDED
15:35:46 766  	  AND in_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_CANCELED
15:35:46 767  	  AND in_status != GLOBAL_STATUSES_V17.SUBSCRIPTION_CLOSED
15:35:46 768  	THEN
15:35:46 769  	  RAISE BAD_SUBSCRIPTION_STATUS;
15:35:46 770  	END IF;
15:35:46 771  
15:35:46 772  	-- Get account id
15:35:46 773  	BEGIN
15:35:46 774  	  SELECT
15:35:46 775  	    ACCOUNT.ID INTO var_account_id
15:35:46 776  	  FROM
15:35:46 777  	    ACCOUNT
15:35:46 778  	  WHERE
15:35:46 779  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46 780  	  EXCEPTION
15:35:46 781  	    WHEN NO_DATA_FOUND THEN
15:35:46 782  	      RAISE BAD_GROUP_ID;
15:35:46 783  	END;
15:35:46 784  
15:35:46 785  	-- Get information about account subscriptions
15:35:46 786  	OPEN out_result_set FOR
15:35:46 787  	SELECT
15:35:46 788  	  in_group_id AS "GROUP_ID",
15:35:46 789  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
15:35:46 790  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
15:35:46 791  	  SUBSCRIPTION.PURCHASE_DATE,
15:35:46 792  	  SUBSCRIPTION.SUSPEND_DATE,
15:35:46 793  	  SUBSCRIPTION.REACTIVATION_DATE,
15:35:46 794  	  SUBSCRIPTION.CANCELLATION_DATE,
15:35:46 795  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
15:35:46 796  	  SUBSCRIPTION.INSTRUMENT_ID,
15:35:46 797  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
15:35:46 798  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
15:35:46 799  	  OFFER_CHAIN.NAME,
15:35:46 800  	  OFFER_CHAIN.DESCRIPTION,
15:35:46 801  	  OFFER_CHAIN.PRODUCT_URI,
15:35:46 802  	  PROCS_SUBSCRIPTION_V17.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
15:35:46 803  	  PROCS_SUBSCRIPTION_V17.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
15:35:46 804  	  PROCS_SUBSCRIPTION_V17.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
15:35:46 805  	  PROCS_SUBSCRIPTION_V17.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
15:35:46 806  	  PROCS_SUBSCRIPTION_V17.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
15:35:46 807  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
15:35:46 808  	  (
15:35:46 809  	    SELECT
15:35:46 810  	      MAX(ENTITLEMENT_END_DATE)
15:35:46 811  	      FROM LICENSE
15:35:46 812  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:46 813  	  )
15:35:46 814  	  as "ENT_END_DATE",
15:35:46 815  	  (
15:35:46 816  	    SELECT
15:35:46 817  	      MIN(START_DATE)
15:35:46 818  	      FROM LICENSE
15:35:46 819  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:46 820  	  )
15:35:46 821  	  as "ENT_START_DATE",
15:35:46 822  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
15:35:46 823  	  GROUP_ACCOUNT.ID GA_ID,
15:35:46 824  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
15:35:46 825  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
15:35:46 826  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
15:35:46 827  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
15:35:46 828  	  GROUP_ACCOUNT.PHONE GA_PHONE,
15:35:46 829  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
15:35:46 830  	  GROUP_ACCOUNT.SEATS GA_SEATS,
15:35:46 831  	  PROCS_GROUP_ACCOUNT_V17.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
15:35:46 832  	  GROUP_ACCOUNT.IP GA_IP,
15:35:46 833  	  PROCS_SUBSCRIPTION_V17.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE
15:35:46 834  	FROM
15:35:46 835  	  SUBSCRIPTION
15:35:46 836  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 837  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
15:35:46 838  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
15:35:46 839  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
15:35:46 840  	WHERE
15:35:46 841  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:46 842  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
15:35:46 843  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
15:35:46 844  	  AND PROCS_COMMON_V17.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V17.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
15:35:46 845  	  AND PROCS_COMMON_V17.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V17.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
15:35:46 846  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
15:35:46 847  
15:35:46 848  EXCEPTION
15:35:46 849  WHEN BAD_SUBSCRIPTION_STATUS THEN
15:35:46 850  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 851  	  SPROC_NAME, 'Bad subscription status');
15:35:46 852  WHEN BAD_GROUP_ID THEN
15:35:46 853  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 854  	  SPROC_NAME, 'Can not find account with given group id');
15:35:46 855  WHEN OTHERS THEN
15:35:46 856  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 857  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 858  END GET_ACCOUNT_SUBSCRIPTIONS;
15:35:46 859  
15:35:46 860  /******************************************************************************/
15:35:46 861  
15:35:46 862  PROCEDURE FREEZE_ACCOUNT (
15:35:46 863  /*
15:35:46 864  Throws exceptions:
15:35:46 865  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 866  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 867  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 868  */
15:35:46 869  	in_group_id   IN NUMBER,
15:35:46 870  	in_updated_by IN VARCHAR2,
15:35:46 871  	in_note       IN VARCHAR2,
15:35:46 872  	in_agent_id   IN NUMBER
15:35:46 873  ) AS
15:35:46 874  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
15:35:46 875  -- VARIABLES
15:35:46 876  var_account_id	    NUMBER;
15:35:46 877  var_account_status_id NUMBER;
15:35:46 878  -- EXCEPTIONS
15:35:46 879  BAD_GROUP_ID	    EXCEPTION;
15:35:46 880  BAD_ACCOUNT_STATUS_ID EXCEPTION;
15:35:46 881  CAN_NOT_CREATE_NOTE   EXCEPTION;
15:35:46 882  EXCEPTION_MESSAGE     VARCHAR2(1024);
15:35:46 883  BEGIN
15:35:46 884  
15:35:46 885  	-- Get account status, account id
15:35:46 886  	BEGIN
15:35:46 887  	  SELECT
15:35:46 888  	    ACCOUNT.ID,
15:35:46 889  	    ACCOUNT.ACCOUNT_STATUS_ID
15:35:46 890  	    into
15:35:46 891  	    var_account_id,
15:35:46 892  	    var_account_status_id
15:35:46 893  	  FROM
15:35:46 894  	    ACCOUNT
15:35:46 895  	  WHERE
15:35:46 896  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46 897  	  EXCEPTION
15:35:46 898  	    WHEN NO_DATA_FOUND THEN
15:35:46 899  	      RAISE BAD_GROUP_ID;
15:35:46 900  	END;
15:35:46 901  
15:35:46 902  	-- We can freeze only ACTIVE accounts
15:35:46 903  	IF var_account_status_id != GLOBAL_STATUSES_V17.ACCOUNT_ACTIVE
15:35:46 904  	  AND var_account_status_id != GLOBAL_STATUSES_V17.ACCOUNT_FROZEN THEN
15:35:46 905  	  RAISE BAD_ACCOUNT_STATUS_ID;
15:35:46 906  	END IF;
15:35:46 907  
15:35:46 908  	-- Set account status
15:35:46 909  	PROCS_ACCOUNT_V17.UPDATE_ACCOUNT_STATUS(
15:35:46 910  	  in_account_id        => var_account_id,
15:35:46 911  	  in_updated_by        => in_updated_by,
15:35:46 912  	  in_account_status_id => GLOBAL_STATUSES_V17.ACCOUNT_FROZEN
15:35:46 913  	);
15:35:46 914  
15:35:46 915  	-- Annotate account
15:35:46 916  	BEGIN
15:35:46 917  	  PROCS_ACCOUNT_V17.ANNOTATE_ACCOUNT(
15:35:46 918  	    in_group_id   => in_group_id,
15:35:46 919  	    in_agent_id   => in_agent_id,
15:35:46 920  	    in_note	  => in_note,
15:35:46 921  	    in_created_by => in_updated_by
15:35:46 922  	  );
15:35:46 923  	  EXCEPTION
15:35:46 924  	    WHEN OTHERS THEN
15:35:46 925  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 926  	      RAISE CAN_NOT_CREATE_NOTE;
15:35:46 927  	END;
15:35:46 928  
15:35:46 929  EXCEPTION
15:35:46 930  WHEN BAD_GROUP_ID THEN
15:35:46 931  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 932  	  SPROC_NAME, 'No such group id');
15:35:46 933  WHEN BAD_ACCOUNT_STATUS_ID THEN
15:35:46 934  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.STATE_ERROR,
15:35:46 935  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
15:35:46 936  WHEN CAN_NOT_CREATE_NOTE THEN
15:35:46 937  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 938  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
15:35:46 939  WHEN OTHERS THEN
15:35:46 940  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 941  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 942  END FREEZE_ACCOUNT;
15:35:46 943  
15:35:46 944  /******************************************************************************/
15:35:46 945  
15:35:46 946  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
15:35:46 947  /*
15:35:46 948  Throws exceptions:
15:35:46 949  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 950  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 951  */
15:35:46 952  	in_group_id	   IN  NUMBER,
15:35:46 953  	in_subscription_id IN NUMBER,
15:35:46 954  	out_result_set	   OUT SYS_REFCURSOR
15:35:46 955  ) AS
15:35:46 956  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
15:35:46 957  -- VARIABLES
15:35:46 958  var_account_id	   NUMBER;
15:35:46 959  temp_subscription_id NUMBER;
15:35:46 960  -- EXCEPTIONS
15:35:46 961  BAD_GROUP_ID	  EXCEPTION;
15:35:46 962  BAD_SUBSCRIPTION_ID EXCEPTION;
15:35:46 963  BEGIN
15:35:46 964  	-- Get account id
15:35:46 965  	BEGIN
15:35:46 966  	  SELECT
15:35:46 967  	    ACCOUNT.ID into var_account_id
15:35:46 968  	  FROM
15:35:46 969  	    ACCOUNT
15:35:46 970  	  WHERE
15:35:46 971  	    ACCOUNT.GROUP_ID = in_group_id;
15:35:46 972  	  EXCEPTION
15:35:46 973  	    WHEN NO_DATA_FOUND THEN
15:35:46 974  	      RAISE BAD_GROUP_ID;
15:35:46 975  	END;
15:35:46 976  
15:35:46 977  	-- Check that subscription exists
15:35:46 978  	BEGIN
15:35:46 979  	  IF in_subscription_id IS NOT NULL THEN
15:35:46 980  	    SELECT
15:35:46 981  	      SUBSCRIPTION.ID into temp_subscription_id
15:35:46 982  	    FROM
15:35:46 983  	      SUBSCRIPTION
15:35:46 984  	    WHERE
15:35:46 985  	      SUBSCRIPTION.ID = in_subscription_id;
15:35:46 986  	  END IF;
15:35:46 987  	  EXCEPTION
15:35:46 988  	    WHEN NO_DATA_FOUND THEN
15:35:46 989  	      RAISE BAD_SUBSCRIPTION_ID;
15:35:46 990  	END;
15:35:46 991  
15:35:46 992  	OPEN out_result_set FOR
15:35:46 993  	SELECT DISTINCT
15:35:46 994  	  INVOICE.ID as "INVOICE_ID",
15:35:46 995  	  INVOICE.CREATE_DATE,
15:35:46 996  	  INVOICE.INVOICE_STATUS_ID,
15:35:46 997  	  PROCS_INVOICE_V17.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
15:35:46 998  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
15:35:46 999  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
15:35:46 1000  	   SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
15:35:46 1001  	   NULL as "GC_CODE",
15:35:46 1002  	   NULL as "GC_ID"
15:35:46 1003  	 FROM
15:35:46 1004  	   LICENSE
15:35:46 1005  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:46 1006  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:35:46 1007  	   INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 1008  	 WHERE
15:35:46 1009  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:46 1010  	   AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
15:35:46 1011  	   AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
15:35:46 1012  
15:35:46 1013  EXCEPTION
15:35:46 1014  WHEN BAD_GROUP_ID THEN
15:35:46 1015  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1016  	   SPROC_NAME, 'No such account');
15:35:46 1017  WHEN BAD_SUBSCRIPTION_ID THEN
15:35:46 1018  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1019  	   SPROC_NAME, 'No such subscription');
15:35:46 1020  WHEN OTHERS THEN
15:35:46 1021  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1022  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1023  END GET_ACCOUNT_SUBSCR_INVOICES;
15:35:46 1024  
15:35:46 1025  /******************************************************************************/
15:35:46 1026  
15:35:46 1027  PROCEDURE GET_ACCOUNT_GC_INVOICES (
15:35:46 1028  /*
15:35:46 1029  Throws exceptions:
15:35:46 1030  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1031  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1032  */
15:35:46 1033  	 in_group_id	IN  NUMBER,
15:35:46 1034  	 out_result_set OUT SYS_REFCURSOR
15:35:46 1035  ) AS
15:35:46 1036  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
15:35:46 1037  -- VARIABLES
15:35:46 1038  var_account_id NUMBER;
15:35:46 1039  -- EXCEPTIONS
15:35:46 1040  BAD_GROUP_ID EXCEPTION;
15:35:46 1041  BEGIN
15:35:46 1042  	 -- Get account id
15:35:46 1043  	 BEGIN
15:35:46 1044  	   SELECT
15:35:46 1045  	     ACCOUNT.ID into var_account_id
15:35:46 1046  	   FROM
15:35:46 1047  	     ACCOUNT
15:35:46 1048  	   WHERE
15:35:46 1049  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1050  	   EXCEPTION
15:35:46 1051  	     WHEN NO_DATA_FOUND THEN
15:35:46 1052  	       RAISE BAD_GROUP_ID;
15:35:46 1053  	 END;
15:35:46 1054  
15:35:46 1055  	 -- Get invoices
15:35:46 1056  	 OPEN out_result_set FOR
15:35:46 1057  	 SELECT DISTINCT
15:35:46 1058  	   INVOICE.ID as "INVOICE_ID",
15:35:46 1059  	   INVOICE.CREATE_DATE,
15:35:46 1060  	   INVOICE.INVOICE_STATUS_ID,
15:35:46 1061  	   PROCS_INVOICE_V17.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
15:35:46 1062  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
15:35:46 1063  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
15:35:46 1064  	   NULL as "SUBSCRIPTION_ID",
15:35:46 1065  	   GIFT_CERTIFICATE.CODE as "GC_CODE",
15:35:46 1066  	   GIFT_CERTIFICATE.ID as "GC_ID"
15:35:46 1067  	 FROM
15:35:46 1068  	   GIFT_CERTIFICATE
15:35:46 1069  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
15:35:46 1070  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 1071  	 WHERE
15:35:46 1072  	   ROWNUM <= 100 AND
15:35:46 1073  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
15:35:46 1074  
15:35:46 1075  EXCEPTION
15:35:46 1076  WHEN BAD_GROUP_ID THEN
15:35:46 1077  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1078  	   SPROC_NAME, 'No such account');
15:35:46 1079  WHEN OTHERS THEN
15:35:46 1080  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1081  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1082  END GET_ACCOUNT_GC_INVOICES;
15:35:46 1083  
15:35:46 1084  /******************************************************************************/
15:35:46 1085  -- norlov: #38580
15:35:46 1086  PROCEDURE GET_GC_INVOICE (
15:35:46 1087  /*
15:35:46 1088  Throws exceptions:
15:35:46 1089  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1090  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1091  */
15:35:46 1092  	 in_group_id	IN  NUMBER,
15:35:46 1093  	 in_gc_code	IN  VARCHAR2,
15:35:46 1094  	 out_result_set OUT SYS_REFCURSOR
15:35:46 1095  ) AS
15:35:46 1096  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
15:35:46 1097  -- VARIABLES
15:35:46 1098  var_account_id NUMBER;
15:35:46 1099  -- EXCEPTIONS
15:35:46 1100  BAD_GROUP_ID EXCEPTION;
15:35:46 1101  BEGIN
15:35:46 1102  	 -- Get account id
15:35:46 1103  	 BEGIN
15:35:46 1104  	   SELECT
15:35:46 1105  	     ACCOUNT.ID into var_account_id
15:35:46 1106  	   FROM
15:35:46 1107  	     ACCOUNT
15:35:46 1108  	   WHERE
15:35:46 1109  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1110  	   EXCEPTION
15:35:46 1111  	     WHEN NO_DATA_FOUND THEN
15:35:46 1112  	       RAISE BAD_GROUP_ID;
15:35:46 1113  	 END;
15:35:46 1114  
15:35:46 1115  	 -- Get invoice for the GC
15:35:46 1116  	 OPEN out_result_set FOR
15:35:46 1117  	 SELECT DISTINCT
15:35:46 1118  	   INVOICE.ID as "INVOICE_ID",
15:35:46 1119  	   INVOICE.CREATE_DATE,
15:35:46 1120  	   INVOICE.INVOICE_STATUS_ID,
15:35:46 1121  	   PROCS_INVOICE_V17.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
15:35:46 1122  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
15:35:46 1123  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
15:35:46 1124  	   NULL as "SUBSCRIPTION_ID",
15:35:46 1125  	   GIFT_CERTIFICATE.CODE as "GC_CODE"
15:35:46 1126  	 FROM
15:35:46 1127  	   GIFT_CERTIFICATE
15:35:46 1128  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
15:35:46 1129  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:35:46 1130  	 WHERE
15:35:46 1131  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
15:35:46 1132  	   AND GIFT_CERTIFICATE.CODE = in_gc_code;
15:35:46 1133  
15:35:46 1134  EXCEPTION
15:35:46 1135  WHEN BAD_GROUP_ID THEN
15:35:46 1136  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1137  	   SPROC_NAME, 'No such account');
15:35:46 1138  WHEN OTHERS THEN
15:35:46 1139  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1140  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1141  END GET_GC_INVOICE;
15:35:46 1142  /******************************************************************************/
15:35:46 1143  
15:35:46 1144  PROCEDURE GET_ACCOUNT_PRODUCTS (
15:35:46 1145  /*
15:35:46 1146  Throws exceptions:
15:35:46 1147  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1148  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1149  */
15:35:46 1150  	 in_group_id	IN  NUMBER,
15:35:46 1151  	 out_result_set OUT SYS_REFCURSOR
15:35:46 1152  ) AS
15:35:46 1153  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
15:35:46 1154  -- VARIABLES
15:35:46 1155  var_account_id NUMBER;
15:35:46 1156  -- EXCEPTIONS
15:35:46 1157  BAD_GROUP_ID EXCEPTION;
15:35:46 1158  BEGIN
15:35:46 1159  	 -- Get account id
15:35:46 1160  	 BEGIN
15:35:46 1161  	   SELECT
15:35:46 1162  	     ACCOUNT.ID into var_account_id
15:35:46 1163  	   FROM
15:35:46 1164  	     ACCOUNT
15:35:46 1165  	   WHERE
15:35:46 1166  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1167  	   EXCEPTION
15:35:46 1168  	     WHEN NO_DATA_FOUND THEN
15:35:46 1169  	       RAISE BAD_GROUP_ID;
15:35:46 1170  	 END;
15:35:46 1171  
15:35:46 1172  	 OPEN out_result_set FOR
15:35:46 1173  	 SELECT DISTINCT
15:35:46 1174  	   PRODUCT.ID,
15:35:46 1175  	   PRODUCT.NAME
15:35:46 1176  	 FROM
15:35:46 1177  	   PRODUCT
15:35:46 1178  	 WHERE
15:35:46 1179  	   PRODUCT.ID IN (
15:35:46 1180  	     SELECT DISTINCT
15:35:46 1181  	       PRODUCT_OFFERING.PRODUCT_ID
15:35:46 1182  	     FROM
15:35:46 1183  	       PRODUCT_OFFERING
15:35:46 1184  	     WHERE
15:35:46 1185  	       PRODUCT_OFFERING.ID IN (
15:35:46 1186  		 SELECT DISTINCT
15:35:46 1187  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:35:46 1188  		 FROM
15:35:46 1189  		   OFFER_PRODUCT_OFFERING
15:35:46 1190  		 WHERE
15:35:46 1191  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:35:46 1192  		     SELECT DISTINCT
15:35:46 1193  		       OFFER_OFFER_CHAIN.OFFER_ID
15:35:46 1194  		     FROM
15:35:46 1195  		       OFFER_OFFER_CHAIN
15:35:46 1196  		     WHERE
15:35:46 1197  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
15:35:46 1198  			 SELECT DISTINCT
15:35:46 1199  			   SUBSCRIPTION.OFFER_CHAIN_ID
15:35:46 1200  			 FROM
15:35:46 1201  			   SUBSCRIPTION
15:35:46 1202  			 WHERE
15:35:46 1203  			   SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:46 1204  		       )
15:35:46 1205  		   )
15:35:46 1206  	       )
15:35:46 1207  	   );
15:35:46 1208  
15:35:46 1209  EXCEPTION
15:35:46 1210  WHEN BAD_GROUP_ID THEN
15:35:46 1211  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1212  	   SPROC_NAME, 'No such account');
15:35:46 1213  WHEN OTHERS THEN
15:35:46 1214  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1216  END GET_ACCOUNT_PRODUCTS;
15:35:46 1217  
15:35:46 1218  /******************************************************************************/
15:35:46 1219  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
15:35:46 1220  /*
15:35:46 1221  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 1222  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1223  */
15:35:46 1224  	 in_group_id IN NUMBER,
15:35:46 1225  	 out_result_set     OUT SYS_REFCURSOR
15:35:46 1226  ) AS
15:35:46 1227  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
15:35:46 1228  -- VARIABLES
15:35:46 1229  var_account_id NUMBER;
15:35:46 1230  -- EXCEPTIONS
15:35:46 1231  BAD_GROUP_ID EXCEPTION;
15:35:46 1232  BEGIN
15:35:46 1233  	  -- Get account id
15:35:46 1234  	 BEGIN
15:35:46 1235  	   SELECT
15:35:46 1236  	     ACCOUNT.ID into var_account_id
15:35:46 1237  	   FROM
15:35:46 1238  	     ACCOUNT
15:35:46 1239  	   WHERE
15:35:46 1240  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1241  	   EXCEPTION
15:35:46 1242  	     WHEN NO_DATA_FOUND THEN
15:35:46 1243  	       RAISE BAD_GROUP_ID;
15:35:46 1244  	 END;
15:35:46 1245  
15:35:46 1246  	 OPEN out_result_set FOR
15:35:46 1247  	 SELECT DISTINCT
15:35:46 1248  	   PRODUCT_OFFERING.ID,
15:35:46 1249  	   PRODUCT_OFFERING.PRODUCT_ID,
15:35:46 1250  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
15:35:46 1251  	   PRODUCT_OFFERING.UNIT_PRICE,
15:35:46 1252  	   PRODUCT_OFFERING.QUANTITY,
15:35:46 1253  	   PRODUCT_OFFERING.CREATE_DATE,
15:35:46 1254  	   PRODUCT_OFFERING.CREATED_BY,
15:35:46 1255  	   CAPABILITY.ID CAP_ID,
15:35:46 1256  	   CAPABILITY.CODE CAP_CODE,
15:35:46 1257  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
15:35:46 1258  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
15:35:46 1259  	 FROM
15:35:46 1260  	   OFFER_PRODUCT_OFFERING
15:35:46 1261  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:35:46 1262  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
15:35:46 1263  	 WHERE
15:35:46 1264  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:35:46 1265  	     SELECT DISTINCT
15:35:46 1266  	       OFFER_OFFER_CHAIN.OFFER_ID
15:35:46 1267  	     FROM
15:35:46 1268  	       OFFER_OFFER_CHAIN
15:35:46 1269  	     WHERE
15:35:46 1270  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
15:35:46 1271  		 SELECT DISTINCT
15:35:46 1272  		   SUBSCRIPTION.OFFER_CHAIN_ID
15:35:46 1273  		 FROM
15:35:46 1274  		   SUBSCRIPTION
15:35:46 1275  		 WHERE
15:35:46 1276  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:46 1277  	       )
15:35:46 1278  	   );
15:35:46 1279  
15:35:46 1280  EXCEPTION
15:35:46 1281  WHEN BAD_GROUP_ID THEN
15:35:46 1282  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1283  	   SPROC_NAME, 'No such account');
15:35:46 1284  WHEN OTHERS THEN
15:35:46 1285  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1286  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1287  END GET_ACCOUNT_PROD_OFFERRINGS;
15:35:46 1288  
15:35:46 1289  /******************************************************************************/
15:35:46 1290  
15:35:46 1291  PROCEDURE UPDATE_ACCOUNT_STATUS (
15:35:46 1292  /*
15:35:46 1293  Throws exceptions:
15:35:46 1294  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1295  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1296  */
15:35:46 1297  	 in_account_id	      IN ACCOUNT.ID%TYPE,
15:35:46 1298  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
15:35:46 1299  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
15:35:46 1300  ) AS
15:35:46 1301  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
15:35:46 1302  -- EXCEPTIONS
15:35:46 1303  BAD_ACCOUNT_ID	      EXCEPTION;
15:35:46 1304  BAD_STATUS_ID	      EXCEPTION;
15:35:46 1305  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:35:46 1306  BEGIN
15:35:46 1307  
15:35:46 1308  	 IF in_account_status_id != GLOBAL_STATUSES_V17.ACCOUNT_ACTIVE
15:35:46 1309  	   AND in_account_status_id != GLOBAL_STATUSES_V17.ACCOUNT_FROZEN
15:35:46 1310  	   AND in_account_status_id != GLOBAL_STATUSES_V17.ACCOUNT_DISABLED THEN
15:35:46 1311  	   RAISE BAD_STATUS_ID;
15:35:46 1312  	 END IF;
15:35:46 1313  
15:35:46 1314  	 PROCS_ACCOUNT_CRU_V17.UPDATE_ACCOUNT(
15:35:46 1315  	   in_account_id	=> in_account_id,
15:35:46 1316  	   in_account_status_id => in_account_status_id,
15:35:46 1317  	   in_updated_by	=> in_updated_by
15:35:46 1318  	 );
15:35:46 1319  
15:35:46 1320  	 IF SQL%ROWCOUNT = 0 THEN
15:35:46 1321  	   RAISE BAD_ACCOUNT_ID;
15:35:46 1322  	 END IF;
15:35:46 1323  
15:35:46 1324  EXCEPTION
15:35:46 1325  WHEN BAD_ACCOUNT_ID THEN
15:35:46 1326  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1327  	   SPROC_NAME, 'No such account');
15:35:46 1328  WHEN BAD_STATUS_ID THEN
15:35:46 1329  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 1330  	   SPROC_NAME, 'Bad status id');
15:35:46 1331  WHEN OTHERS THEN
15:35:46 1332  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1333  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1334  END UPDATE_ACCOUNT_STATUS;
15:35:46 1335  
15:35:46 1336  /******************************************************************************/
15:35:46 1337  
15:35:46 1338  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
15:35:46 1339  /*
15:35:46 1340  Throws exceptions:
15:35:46 1341  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1342  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1343  */
15:35:46 1344  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
15:35:46 1345  	 out_licenses_num OUT NUMBER
15:35:46 1346  ) AS
15:35:46 1347  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
15:35:46 1348  -- VARIABLES
15:35:46 1349  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
15:35:46 1350  -- EXCEPTIONS
15:35:46 1351  BAD_ACCOUNT_ID EXCEPTION;
15:35:46 1352  BEGIN
15:35:46 1353  
15:35:46 1354  	 BEGIN
15:35:46 1355  	   SELECT
15:35:46 1356  	     ACCOUNT.ID into var_account_id
15:35:46 1357  	   FROM
15:35:46 1358  	     ACCOUNT
15:35:46 1359  	   WHERE
15:35:46 1360  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1361  	   EXCEPTION
15:35:46 1362  	     WHEN NO_DATA_FOUND THEN
15:35:46 1363  	       RAISE BAD_ACCOUNT_ID;
15:35:46 1364  	 END;
15:35:46 1365  
15:35:46 1366  	 SELECT
15:35:46 1367  	   COUNT(LICENSE.ID) into out_licenses_num
15:35:46 1368  	 FROM
15:35:46 1369  	   LICENSE
15:35:46 1370  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:46 1371  	 WHERE
15:35:46 1372  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:35:46 1373  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V17.TRUE;
15:35:46 1374  
15:35:46 1375  EXCEPTION
15:35:46 1376  WHEN BAD_ACCOUNT_ID THEN
15:35:46 1377  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1378  	   SPROC_NAME, 'No such group id');
15:35:46 1379  WHEN OTHERS THEN
15:35:46 1380  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1381  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1382  END GET_NEEDS_ENTTL_LICENSES_NUM;
15:35:46 1383  
15:35:46 1384  /******************************************************************************/
15:35:46 1385  
15:35:46 1386  PROCEDURE SET_TAX_EXEMPT (
15:35:46 1387  /*
15:35:46 1388  Throws exceptions:
15:35:46 1389  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1390  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1391  */
15:35:46 1392  	 in_group_id  IN NUMBER,
15:35:46 1393  	 in_exempt_id IN VARCHAR2
15:35:46 1394  ) AS
15:35:46 1395  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
15:35:46 1396  -- VARIABLES
15:35:46 1397  var_account_id NUMBER;
15:35:46 1398  -- EXCEPTIONS
15:35:46 1399  BAD_GROUP_ID EXCEPTION;
15:35:46 1400  BEGIN
15:35:46 1401  
15:35:46 1402  	 BEGIN
15:35:46 1403  	   SELECT
15:35:46 1404  	     ACCOUNT.ID into var_account_id
15:35:46 1405  	   FROM
15:35:46 1406  	     ACCOUNT
15:35:46 1407  	   WHERE
15:35:46 1408  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1409  	   EXCEPTION
15:35:46 1410  	     WHEN NO_DATA_FOUND THEN
15:35:46 1411  	       RAISE BAD_GROUP_ID;
15:35:46 1412  	 END;
15:35:46 1413  
15:35:46 1414  	 UPDATE
15:35:46 1415  	   ACCOUNT
15:35:46 1416  	 SET
15:35:46 1417  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
15:35:46 1418  	 WHERE
15:35:46 1419  	   ACCOUNT.ID = var_account_id;
15:35:46 1420  
15:35:46 1421  EXCEPTION
15:35:46 1422  WHEN BAD_GROUP_ID THEN
15:35:46 1423  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1424  	   SPROC_NAME, 'No such group id');
15:35:46 1425  WHEN OTHERS THEN
15:35:46 1426  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1427  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1428  END SET_TAX_EXEMPT;
15:35:46 1429  
15:35:46 1430  /******************************************************************************/
15:35:46 1431  
15:35:46 1432  PROCEDURE IS_TAX_EXEMPT (
15:35:46 1433  /*
15:35:46 1434  Throws exceptions:
15:35:46 1435  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1436  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1437  Return:
15:35:46 1438  	 GLOBAL_CONSTANTS_V17.TRUE if ACCOUNT.EXEMPT_ID is not null
15:35:46 1439  	 GLOBAL_CONSTANTS_V17.FALSE else
15:35:46 1440  */
15:35:46 1441  	 in_group_id	   IN NUMBER,
15:35:46 1442  	 out_is_tax_exempt OUT NUMBER
15:35:46 1443  ) AS
15:35:46 1444  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
15:35:46 1445  -- VARIABLES
15:35:46 1446  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
15:35:46 1447  -- EXCEPTIONS
15:35:46 1448  BAD_GROUP_ID EXCEPTION;
15:35:46 1449  BEGIN
15:35:46 1450  
15:35:46 1451  	 BEGIN
15:35:46 1452  	   SELECT
15:35:46 1453  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
15:35:46 1454  	   FROM
15:35:46 1455  	     ACCOUNT
15:35:46 1456  	   WHERE
15:35:46 1457  	     ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1458  	   EXCEPTION
15:35:46 1459  	     WHEN NO_DATA_FOUND THEN
15:35:46 1460  	       RAISE BAD_GROUP_ID;
15:35:46 1461  	 END;
15:35:46 1462  
15:35:46 1463  	 IF var_is_tax_exempt IS NULL THEN
15:35:46 1464  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V17.FALSE;
15:35:46 1465  	 ELSE
15:35:46 1466  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V17.TRUE;
15:35:46 1467  	 END IF;
15:35:46 1468  
15:35:46 1469  EXCEPTION
15:35:46 1470  WHEN BAD_GROUP_ID THEN
15:35:46 1471  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1472  	   SPROC_NAME, 'No such group id');
15:35:46 1473  WHEN OTHERS THEN
15:35:46 1474  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1475  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1476  END IS_TAX_EXEMPT;
15:35:46 1477  
15:35:46 1478  /******************************************************************************/
15:35:46 1479  
15:35:46 1480  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
15:35:46 1481  /*
15:35:46 1482  Throws exceptions:
15:35:46 1483  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1484  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1485  */
15:35:46 1486  	 in_account_id IN NUMBER,
15:35:46 1487  	 out_group_id  OUT NUMBER
15:35:46 1488  ) AS
15:35:46 1489  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
15:35:46 1490  BEGIN
15:35:46 1491  
15:35:46 1492  	 SELECT
15:35:46 1493  	   ACCOUNT.GROUP_ID into out_group_id
15:35:46 1494  	 FROM
15:35:46 1495  	   ACCOUNT
15:35:46 1496  	 WHERE
15:35:46 1497  	   ACCOUNT.ID = in_account_id;
15:35:46 1498  
15:35:46 1499  EXCEPTION
15:35:46 1500  WHEN NO_DATA_FOUND THEN
15:35:46 1501  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1502  	   SPROC_NAME, 'No such account');
15:35:46 1503  WHEN OTHERS THEN
15:35:46 1504  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1505  	   SPROC_NAME, 'Unknown error');
15:35:46 1506  END GET_GROUP_ID_BY_ACCOUNT_ID;
15:35:46 1507  
15:35:46 1508  /******************************************************************************/
15:35:46 1509  
15:35:46 1510  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:35:46 1511  /*
15:35:46 1512  Throws exceptions:
15:35:46 1513  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1514  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1515  */
15:35:46 1516  	 in_group_id IN NUMBER,
15:35:46 1517  	 out_account_id  OUT NUMBER
15:35:46 1518  ) AS
15:35:46 1519  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
15:35:46 1520  BEGIN
15:35:46 1521  
15:35:46 1522  	 SELECT
15:35:46 1523  	   ACCOUNT.ID into out_account_id
15:35:46 1524  	 FROM
15:35:46 1525  	   ACCOUNT
15:35:46 1526  	 WHERE
15:35:46 1527  	   ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1528  
15:35:46 1529  EXCEPTION
15:35:46 1530  WHEN NO_DATA_FOUND THEN
15:35:46 1531  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1532  	   SPROC_NAME, 'No such account');
15:35:46 1533  WHEN OTHERS THEN
15:35:46 1534  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1535  	   SPROC_NAME, 'Unknown error');
15:35:46 1536  END GET_ACCOUNT_ID_BY_GROUP_ID;
15:35:46 1537  
15:35:46 1538  /******************************************************************************/
15:35:46 1539  
15:35:46 1540  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
15:35:46 1541  /*
15:35:46 1542  This procedure is using for LOCKING only
15:35:46 1543  
15:35:46 1544  Throws exceptions:
15:35:46 1545  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1546  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1547  */
15:35:46 1548  	 in_invoice_id IN NUMBER,
15:35:46 1549  	 out_group_ids OUT SYS_REFCURSOR
15:35:46 1550  ) AS
15:35:46 1551  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
15:35:46 1552  -- VARIABLES
15:35:46 1553  temp_invoice_id		 NUMBER;
15:35:46 1554  var_subscrib_group_id	 NUMBER;
15:35:46 1555  var_gc_purchaser_group_id NUMBER;
15:35:46 1556  var_gc_redeemer_group_id  NUMBER;
15:35:46 1557  -- EXCEPTIONS
15:35:46 1558  BAD_INVOICE_ID	    EXCEPTION;
15:35:46 1559  CAN_NOT_FIND_ACCOUNT EXCEPTION;
15:35:46 1560  BEGIN
15:35:46 1561  
15:35:46 1562  	 BEGIN
15:35:46 1563  	   SELECT
15:35:46 1564  	     INVOICE.ID into temp_invoice_id
15:35:46 1565  	   FROM
15:35:46 1566  	     INVOICE
15:35:46 1567  	   WHERE
15:35:46 1568  	     INVOICE.ID = in_invoice_id;
15:35:46 1569  	   EXCEPTION
15:35:46 1570  	     WHEN NO_DATA_FOUND THEN
15:35:46 1571  	       RAISE BAD_INVOICE_ID;
15:35:46 1572  	 END;
15:35:46 1573  
15:35:46 1574  	 BEGIN
15:35:46 1575  	   SELECT DISTINCT
15:35:46 1576  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
15:35:46 1577  	   FROM
15:35:46 1578  	     ACCOUNT
15:35:46 1579  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:35:46 1580  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:35:46 1581  	   WHERE
15:35:46 1582  	     LICENSE.INVOICE_ID = in_invoice_id;
15:35:46 1583  	   EXCEPTION
15:35:46 1584  	     WHEN NO_DATA_FOUND THEN
15:35:46 1585  	       var_subscrib_group_id := NULL;
15:35:46 1586  	 END;
15:35:46 1587  
15:35:46 1588  	 IF var_subscrib_group_id IS NULL THEN
15:35:46 1589  	   BEGIN
15:35:46 1590  	     SELECT
15:35:46 1591  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
15:35:46 1592  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
15:35:46 1593  	       into
15:35:46 1594  	       var_gc_purchaser_group_id,
15:35:46 1595  	       var_gc_redeemer_group_id
15:35:46 1596  	     FROM
15:35:46 1597  	       GIFT_CERTIFICATE
15:35:46 1598  	     WHERE
15:35:46 1599  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
15:35:46 1600  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
15:35:46 1601  	     EXCEPTION
15:35:46 1602  	       WHEN NO_DATA_FOUND THEN
15:35:46 1603  		 var_gc_purchaser_group_id := NULL;
15:35:46 1604  		 var_gc_redeemer_group_id  := NULL;
15:35:46 1605  	   END;
15:35:46 1606  	 END IF;
15:35:46 1607  
15:35:46 1608  	 IF var_subscrib_group_id IS NULL
15:35:46 1609  	   AND var_gc_purchaser_group_id IS NULL
15:35:46 1610  	   AND var_gc_redeemer_group_id IS NULL THEN
15:35:46 1611  	     RAISE CAN_NOT_FIND_ACCOUNT;
15:35:46 1612  	 END IF;
15:35:46 1613  
15:35:46 1614  	 OPEN out_group_ids FOR
15:35:46 1615  	 SELECT GROUP_ID FROM (
15:35:46 1616  	   SELECT
15:35:46 1617  	     var_subscrib_group_id as "GROUP_ID"
15:35:46 1618  	   FROM
15:35:46 1619  	     DUAL
15:35:46 1620  	   UNION
15:35:46 1621  	   SELECT
15:35:46 1622  	     var_gc_purchaser_group_id as "GROUP_ID"
15:35:46 1623  	   FROM
15:35:46 1624  	     DUAL
15:35:46 1625  	   UNION
15:35:46 1626  	   SELECT
15:35:46 1627  	     var_gc_redeemer_group_id as "GROUP_ID"
15:35:46 1628  	   FROM
15:35:46 1629  	     DUAL
15:35:46 1630  	 )
15:35:46 1631  	 WHERE
15:35:46 1632  	   GROUP_ID IS NOT NULL;
15:35:46 1633  
15:35:46 1634  EXCEPTION
15:35:46 1635  WHEN BAD_INVOICE_ID THEN
15:35:46 1636  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1637  	   SPROC_NAME, 'No such invoice');
15:35:46 1638  WHEN CAN_NOT_FIND_ACCOUNT THEN
15:35:46 1639  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1640  	   SPROC_NAME, 'Could not find account for given invoice');
15:35:46 1641  WHEN OTHERS THEN
15:35:46 1642  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1643  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1644  END GET_GROUPS_ID_BY_INVOICE_ID;
15:35:46 1645  
15:35:46 1646  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
15:35:46 1647  /*
15:35:46 1648  Throws exceptions:
15:35:46 1649  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1650  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1651  */
15:35:46 1652  	 in_group_id	   IN NUMBER,
15:35:46 1653  	 out_tax_exempt_id OUT VARCHAR2
15:35:46 1654  ) AS
15:35:46 1655  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
15:35:46 1656  -- VARIABLES
15:35:46 1657  -- EXCEPTIONS
15:35:46 1658  BEGIN
15:35:46 1659  
15:35:46 1660  	 SELECT
15:35:46 1661  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
15:35:46 1662  	 FROM
15:35:46 1663  	   ACCOUNT
15:35:46 1664  	 WHERE
15:35:46 1665  	   ACCOUNT.GROUP_ID = in_group_id;
15:35:46 1666  
15:35:46 1667  EXCEPTION
15:35:46 1668  WHEN NO_DATA_FOUND THEN
15:35:46 1669  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1670  	   SPROC_NAME, 'No such account');
15:35:46 1671  WHEN OTHERS THEN
15:35:46 1672  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1673  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1674  END GET_ACCOUNT_TAX_EXEMPT_ID;
15:35:46 1675  
15:35:46 1676  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
15:35:46 1677  /*
15:35:46 1678  Throws exceptions:
15:35:46 1679  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1680  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1681  
15:35:46 1682  Result has two columns:
15:35:46 1683  subscription_id and offer_chain_id
15:35:46 1684  */
15:35:46 1685  	 in_group_id	IN NUMBER,
15:35:46 1686  	 out_result_set OUT SYS_REFCURSOR
15:35:46 1687  ) AS
15:35:46 1688  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
15:35:46 1689  -- Variables
15:35:46 1690  var_account_id NUMBER;
15:35:46 1691  -- Exceptions
15:35:46 1692  BAD_GROUP_ID   EXCEPTION;
15:35:46 1693  BEGIN
15:35:46 1694  
15:35:46 1695  	 BEGIN
15:35:46 1696  	   SELECT
15:35:46 1697  	     ID into var_account_id
15:35:46 1698  	   FROM
15:35:46 1699  	     ACCOUNT
15:35:46 1700  	   WHERE
15:35:46 1701  	     GROUP_ID = in_group_id;
15:35:46 1702  	   EXCEPTION
15:35:46 1703  	     WHEN NO_DATA_FOUND THEN
15:35:46 1704  	       RAISE BAD_GROUP_ID;
15:35:46 1705  	 END;
15:35:46 1706  
15:35:46 1707  	 OPEN out_result_set FOR
15:35:46 1708  	 SELECT
15:35:46 1709  	   S.ID as SUBSCRIPTION_ID,
15:35:46 1710  	   OCHMD.OFFER_CHAIN_ID
15:35:46 1711  	 FROM
15:35:46 1712  	   SUBSCRIPTION S
15:35:46 1713  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
15:35:46 1714  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V17.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
15:35:46 1715  	 WHERE
15:35:46 1716  	   S.ACCOUNT_ID = var_account_id;
15:35:46 1717  
15:35:46 1718  EXCEPTION
15:35:46 1719  WHEN BAD_GROUP_ID THEN
15:35:46 1720  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1721  	   SPROC_NAME, 'No such account');
15:35:46 1722  WHEN OTHERS THEN
15:35:46 1723  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1724  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1725  END GET_UPGRADABLE_SUBSCRIPTIONS;
15:35:46 1726  
15:35:46 1727  /******************************************************************************/
15:35:46 1728  
15:35:46 1729  PROCEDURE GET_USR_ALL_SBSCR_IDS (
15:35:46 1730  /*
15:35:46 1731  Throws exceptions:
15:35:46 1732  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1733  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 1734  
15:35:46 1735  Result has two columns:
15:35:46 1736  subscription_id and offer_chain_id
15:35:46 1737  */
15:35:46 1738  	 in_group_id	    IN NUMBER,
15:35:46 1739  	 out_result_set     OUT SYS_REFCURSOR
15:35:46 1740  ) AS
15:35:46 1741  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
15:35:46 1742  -- VARIABLES
15:35:46 1743  var_account_id NUMBER;
15:35:46 1744  -- EXCEPTIONS
15:35:46 1745  BAD_GROUP_ID EXCEPTION;
15:35:46 1746  BEGIN
15:35:46 1747  
15:35:46 1748  	 BEGIN
15:35:46 1749  	   SELECT
15:35:46 1750  	     A.ID INTO var_account_id
15:35:46 1751  	   FROM
15:35:46 1752  	     ACCOUNT A
15:35:46 1753  	   WHERE
15:35:46 1754  	     A.GROUP_ID = in_group_id;
15:35:46 1755  	   EXCEPTION
15:35:46 1756  	     WHEN NO_DATA_FOUND THEN
15:35:46 1757  	       RAISE BAD_GROUP_ID;
15:35:46 1758  	 END;
15:35:46 1759  
15:35:46 1760  	 OPEN out_result_set FOR
15:35:46 1761  	 SELECT
15:35:46 1762  	   S.ID
15:35:46 1763  	 FROM
15:35:46 1764  	   SUBSCRIPTION S
15:35:46 1765  	 WHERE
15:35:46 1766  	   S.ACCOUNT_ID = var_account_id
15:35:46 1767  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE;
15:35:46 1768  
15:35:46 1769  EXCEPTION
15:35:46 1770  WHEN BAD_GROUP_ID THEN
15:35:46 1771  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1772  	   SPROC_NAME, 'No such account');
15:35:46 1773  WHEN OTHERS THEN
15:35:46 1774  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1775  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1776  END GET_USR_ALL_SBSCR_IDS;
15:35:46 1777  
15:35:46 1778  /******************************************************************************/
15:35:46 1779  
15:35:46 1780  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
15:35:46 1781  /*
15:35:46 1782  Throws exceptions:
15:35:46 1783  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1784  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1785  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:46 1786  
15:35:46 1787  Result has two columns:
15:35:46 1788  subscription_id and offer_chain_id
15:35:46 1789  */
15:35:46 1790  	 in_group_id	    IN NUMBER,
15:35:46 1791  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:35:46 1792  	 out_result_set     OUT SYS_REFCURSOR
15:35:46 1793  ) AS
15:35:46 1794  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
15:35:46 1795  -- VARIABLES
15:35:46 1796  var_account_id NUMBER;
15:35:46 1797  -- EXCEPTIONS
15:35:46 1798  BAD_GROUP_ID	   EXCEPTION;
15:35:46 1799  BAD_OFFER_CHAIN_IDS EXCEPTION;
15:35:46 1800  BEGIN
15:35:46 1801  
15:35:46 1802  	 IF in_offer_chain_ids IS NULL THEN
15:35:46 1803  	   RAISE BAD_OFFER_CHAIN_IDS;
15:35:46 1804  	 END IF;
15:35:46 1805  
15:35:46 1806  	 BEGIN
15:35:46 1807  	   SELECT
15:35:46 1808  	     A.ID INTO var_account_id
15:35:46 1809  	   FROM
15:35:46 1810  	     ACCOUNT A
15:35:46 1811  	   WHERE
15:35:46 1812  	     A.GROUP_ID = in_group_id;
15:35:46 1813  	   EXCEPTION
15:35:46 1814  	     WHEN NO_DATA_FOUND THEN
15:35:46 1815  	       RAISE BAD_GROUP_ID;
15:35:46 1816  	 END;
15:35:46 1817  
15:35:46 1818  	 OPEN out_result_set FOR
15:35:46 1819  	 SELECT
15:35:46 1820  	   S.ID
15:35:46 1821  	 FROM
15:35:46 1822  	   SUBSCRIPTION S
15:35:46 1823  	 WHERE
15:35:46 1824  	   S.ACCOUNT_ID = var_account_id
15:35:46 1825  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
15:35:46 1826  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V17.SUBSCRIPTION_ACTIVE;
15:35:46 1827  
15:35:46 1828  EXCEPTION
15:35:46 1829  WHEN BAD_OFFER_CHAIN_IDS THEN
15:35:46 1830  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INVALID_PARAMETER,
15:35:46 1831  	   SPROC_NAME, 'Offer chains ids parameter is null');
15:35:46 1832  WHEN BAD_GROUP_ID THEN
15:35:46 1833  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 1834  	   SPROC_NAME, 'No such account');
15:35:46 1835  WHEN OTHERS THEN
15:35:46 1836  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1837  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1838  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
15:35:46 1839  
15:35:46 1840  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
15:35:46 1841  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:35:46 1842  	 in_expiration_date IN DATE,
15:35:46 1843  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
15:35:46 1844  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
15:35:46 1845  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
15:35:46 1846  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
15:35:46 1847  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
15:35:46 1848  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
15:35:46 1849  	 in_lower_bound IN NUMBER DEFAULT 1,
15:35:46 1850  	 in_upper_bound IN NUMBER DEFAULT 11,
15:35:46 1851  	 out_result_set OUT SYS_REFCURSOR
15:35:46 1852  ) AS
15:35:46 1853  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
15:35:46 1854  BEGIN
15:35:46 1855  
15:35:46 1856  	 OPEN out_result_set FOR
15:35:46 1857  	     SELECT
15:35:46 1858  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
15:35:46 1859  	     FROM
15:35:46 1860  	       account a,
15:35:46 1861  	       credit_card cc
15:35:46 1862  	     WHERE
15:35:46 1863  	       cc.expiration_date = in_expiration_date and
15:35:46 1864  	       cc.last_four_cc = in_last_four_cc and
15:35:46 1865  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
15:35:46 1866  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
15:35:46 1867  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
15:35:46 1868  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
15:35:46 1869  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
15:35:46 1870  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
15:35:46 1871  	       a.id = cc.account_id and
15:35:46 1872  	       rownum >= in_lower_bound and
15:35:46 1873  	       rownum <= in_upper_bound
15:35:46 1874  	   ;
15:35:46 1875  
15:35:46 1876  EXCEPTION
15:35:46 1877  WHEN OTHERS THEN
15:35:46 1878  	 PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 1879  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 1880  END GET_GROUP_IDS_BY_CC_INFO;
15:35:46 1881  
15:35:46 1882  END PROCS_ACCOUNT_V17;
15:35:46 1883  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.13
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PROCESS_RETRY_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE LOG_RETRY(
15:35:46   4  	  in_process_name IN VARCHAR2,
15:35:46   5  	  in_generic_id   IN NUMBER,
15:35:46   6  	  in_date	  IN VARCHAR2,
15:35:46   7  	  out_success	   OUT NUMBER
15:35:46   8  ) AS
15:35:46   9  SPROC_NAME CONSTANT VARCHAR2(32) := 'PROCS_PROCESS_RETRY_V17';
15:35:46  10  BEGIN
15:35:46  11  
15:35:46  12  	out_success := 1;
15:35:46  13  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
15:35:46  14  	VALUES (in_process_name, in_generic_id, 1, to_date(in_date, 'DD-Mon-YYYY HH24:MI:SS'), sysdate);
15:35:46  15  	commit;
15:35:46  16  EXCEPTION
15:35:46  17  WHEN DUP_VAL_ON_INDEX THEN
15:35:46  18  	rollback;
15:35:46  19  	out_success := 0;
15:35:46  20  WHEN OTHERS THEN
15:35:46  21  	rollback;
15:35:46  22  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46  23  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46  24  
15:35:46  25  END;
15:35:46  26  
15:35:46  27  PROCEDURE LOG_RETRY_DATE(
15:35:46  28  	  in_process_name IN VARCHAR2,
15:35:46  29  	  in_generic_id   IN NUMBER,
15:35:46  30  	  in_date	  IN DATE,
15:35:46  31  	  out_success	   OUT NUMBER
15:35:46  32  ) AS
15:35:46  33  SPROC_NAME CONSTANT VARCHAR2(32) := 'PROCS_PROCESS_RETRY_V17';
15:35:46  34  BEGIN
15:35:46  35  
15:35:46  36  	out_success := 1;
15:35:46  37  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
15:35:46  38  	VALUES (in_process_name, in_generic_id, 1, in_date, sysdate);
15:35:46  39  	commit;
15:35:46  40  EXCEPTION
15:35:46  41  WHEN DUP_VAL_ON_INDEX THEN
15:35:46  42  	rollback;
15:35:46  43  	out_success := 0;
15:35:46  44  WHEN OTHERS THEN
15:35:46  45  	rollback;
15:35:46  46  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46  47  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46  48  
15:35:46  49  END;
15:35:46  50  
15:35:46  51  PROCEDURE DELETE_RETRY(
15:35:46  52  	  in_process_name IN VARCHAR2,
15:35:46  53  	  in_remove_minutes  IN NUMBER
15:35:46  54  ) AS
15:35:46  55  BEGIN
15:35:46  56  
15:35:46  57  delete from PROCESS_RETRY_THROTTLE
15:35:46  58  where
15:35:46  59  	process_name = in_process_name and
15:35:46  60  	create_date <= sysdate-in_remove_minutes/1440;
15:35:46  61  commit;
15:35:46  62  END;
15:35:46  63  
15:35:46  64  PROCEDURE GET_SYSDATE (
15:35:46  65  	out_date  OUT VARCHAR2
15:35:46  66  ) AS
15:35:46  67  BEGIN
15:35:46  68  	SELECT to_char(SYSDATE, 'DD-Mon-YYYY HH24:MI:SS') into out_date from dual;
15:35:46  69  END;
15:35:46  70  
15:35:46  71  END PROCS_PROCESS_RETRY_V17;
15:35:46  72  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_NOTIFICATION_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
15:35:46   4  /*
15:35:46   5  Throws exceptions:
15:35:46   6  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46   7  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46   8  */
15:35:46   9  	in_notification_type_name IN VARCHAR2,
15:35:46  10  	out_notification_type_id  OUT NUMBER
15:35:46  11  ) AS
15:35:46  12  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NOTIFICATION_TYPE_BY_NAME';
15:35:46  13  BEGIN
15:35:46  14  	SELECT
15:35:46  15  	  NOTIFICATION_TYPE.ID into out_notification_type_id
15:35:46  16  	FROM
15:35:46  17  	  NOTIFICATION_TYPE
15:35:46  18  	WHERE
15:35:46  19  	  NOTIFICATION_TYPE.VALUE = in_notification_type_name;
15:35:46  20  EXCEPTION
15:35:46  21  WHEN NO_DATA_FOUND THEN
15:35:46  22  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46  23  	  SPROC_NAME, 'No such type');
15:35:46  24  WHEN OTHERS THEN
15:35:46  25  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46  26  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46  27  END GET_NOTIFICATION_TYPE_BY_NAME;
15:35:46  28  
15:35:46  29  /******************************************************************/
15:35:46  30  
15:35:46  31  PROCEDURE ADD_NOTIFICATION (
15:35:46  32  /*
15:35:46  33  Throws exceptions:
15:35:46  34  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46  35  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  36  */
15:35:46  37  	in_sender_account_id	 IN NUMBER DEFAULT 0,
15:35:46  38  	in_recipient_group_id	 IN NUMBER,
15:35:46  39  	in_notification_type_id  IN NUMBER,
15:35:46  40  	in_date_to_notify	 IN DATE,
15:35:46  41  	in_email_template_params IN CLOB
15:35:46  42  ) AS
15:35:46  43  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION';
15:35:46  44  -- VARIABLES
15:35:46  45  temp_type_count NUMBER;
15:35:46  46  var_create_date DATE := SYSDATE;
15:35:46  47  -- EXCEPTIONS
15:35:46  48  BAD_NOTIFICATION_TYPE_ID EXCEPTION;
15:35:46  49  CAN_NOT_CREATE_HISTORY   EXCEPTION;
15:35:46  50  EXCEPTION_MESSAGE        VARCHAR2(1024);
15:35:46  51  BEGIN
15:35:46  52  
15:35:46  53  	SELECT
15:35:46  54  	  COUNT(*) into temp_type_count
15:35:46  55  	FROM
15:35:46  56  	  NOTIFICATION_TYPE
15:35:46  57  	WHERE
15:35:46  58  	  NOTIFICATION_TYPE.ID = in_notification_type_id;
15:35:46  59  
15:35:46  60  	IF temp_type_count = 0 THEN
15:35:46  61  	  RAISE BAD_NOTIFICATION_TYPE_ID;
15:35:46  62  	END IF;
15:35:46  63  
15:35:46  64  	INSERT INTO NOTIFICATION (
15:35:46  65  	  ID,
15:35:46  66  	  ACCOUNT_ID,
15:35:46  67  	  GROUP_ID,
15:35:46  68  	  NOTIFICATION_TYPE_ID,
15:35:46  69  	  NOTIFICATION_STATUS_ID,
15:35:46  70  	  EMAIL_TEMPLATE_PARAMS,
15:35:46  71  	  UPDATE_DATE,
15:35:46  72  	  CREATE_DATE,
15:35:46  73  	  DATE_TO_NOTIFY
15:35:46  74  	) VALUES (
15:35:46  75  	  NOT_ID_SEQ.nextVal,
15:35:46  76  	  in_sender_account_id,
15:35:46  77  	  in_recipient_group_id,
15:35:46  78  	  in_notification_type_id,
15:35:46  79  	  NOTIFICATION_STATUSES_V17.NOTIFICATION_PENDING,
15:35:46  80  	  in_email_template_params,
15:35:46  81  	  var_create_date,
15:35:46  82  	  var_create_date,
15:35:46  83  	  in_date_to_notify
15:35:46  84  	);
15:35:46  85  
15:35:46  86  	--BEGIN
15:35:46  87  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V17.CREATE_NOTIFICATION_HISTORY (
15:35:46  88  	--    in_account_id		  => 0, -- ACCOUNT_ID. Can we delete it?
15:35:46  89  	--    in_group_id		  => in_recipient_group_id,
15:35:46  90  	--    notification_reason_type_id => in_notification_type_id,
15:35:46  91  	--    notification_status_id	  => NOTIFICATION_STATUSES_V17.NOTIFICATION_PENDING,
15:35:46  92  	--    email_template_params	  => in_email_template_params,
15:35:46  93  	--    in_create_date		  => var_create_date
15:35:46  94  	--  );
15:35:46  95  	--  EXCEPTION
15:35:46  96  	--    WHEN OTHERS THEN
15:35:46  97  	--	EXCEPTION_MESSAGE := SQLERRM;
15:35:46  98  	--	RAISE CAN_NOT_CREATE_HISTORY;
15:35:46  99  	--END;
15:35:46 100  
15:35:46 101  EXCEPTION
15:35:46 102  WHEN BAD_NOTIFICATION_TYPE_ID THEN
15:35:46 103  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 104  	  SPROC_NAME, 'No such notification status');
15:35:46 105  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:46 106  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 107  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:46 108  WHEN OTHERS THEN
15:35:46 109  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 110  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 111  END ADD_NOTIFICATION;
15:35:46 112  
15:35:46 113  /******************************************************************************/
15:35:46 114  
15:35:46 115  PROCEDURE GET_PENDING_NOTIFICATIONS (
15:35:46 116  /*
15:35:46 117  Throws exceptions:
15:35:46 118  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 119  */
15:35:46 120  	out_result_set OUT SYS_REFCURSOR
15:35:46 121  ) AS
15:35:46 122  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PENDING_NOTIFICATIONS';
15:35:46 123  -- CONSTANTS
15:35:46 124  C_NOTIFICATION_COUNT_LIMIT CONSTANT NUMBER := 500;
15:35:46 125  BEGIN
15:35:46 126  	OPEN out_result_set FOR
15:35:46 127  SELECT * FROM
15:35:46 128  (
15:35:46 129  	SELECT
15:35:46 130  	  NOTIFICATION.ID
15:35:46 131  	FROM
15:35:46 132  	  NOTIFICATION
15:35:46 133  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
15:35:46 134  	WHERE
15:35:46 135  	  ROWNUM <= C_NOTIFICATION_COUNT_LIMIT*10
15:35:46 136  	  AND NOT EXISTS (
15:35:46 137  	    SELECT NULL
15:35:46 138  	    FROM PROCESS_RETRY_THROTTLE
15:35:46 139  	    WHERE GENERIC_ID = NOTIFICATION.ID AND PROCESS_NAME = SPROC_NAME
15:35:46 140  	  )
15:35:46 141  	  AND (
15:35:46 142  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V17.NOTIFICATION_PENDING
15:35:46 143  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V17.NOTIFICATION_FAILED
15:35:46 144  	  )
15:35:46 145  	  AND (
15:35:46 146  	    NOTIFICATION.DATE_TO_NOTIFY IS NULL OR SYSDATE > NOTIFICATION.DATE_TO_NOTIFY
15:35:46 147  	  )ORDER BY dbms_random.value
15:35:46 148  ) WHERE
15:35:46 149  	ROWNUM <= C_NOTIFICATION_COUNT_LIMIT;
15:35:46 150  
15:35:46 151  EXCEPTION
15:35:46 152  WHEN OTHERS THEN
15:35:46 153  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 155  END GET_PENDING_NOTIFICATIONS;
15:35:46 156  
15:35:46 157  /******************************************************************************/
15:35:46 158  
15:35:46 159  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
15:35:46 160  /*
15:35:46 161  Throws exceptions:
15:35:46 162  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 163  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 164  */
15:35:46 165  	in_notification_id IN NUMBER
15:35:46 166  ) AS
15:35:46 167  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_NOTIFICATION_TIMESTAMP';
15:35:46 168  -- VARIABLES
15:35:46 169  temp_notification_id NUMBER;
15:35:46 170  -- EXCEPTIONS
15:35:46 171  BAD_NOTIFICATION_ID EXCEPTION;
15:35:46 172  BEGIN
15:35:46 173  
15:35:46 174  	BEGIN
15:35:46 175  	  SELECT
15:35:46 176  	    NOTIFICATION.ID into temp_notification_id
15:35:46 177  	  FROM
15:35:46 178  	    NOTIFICATION
15:35:46 179  	  WHERE
15:35:46 180  	    NOTIFICATION.ID = in_notification_id;
15:35:46 181  	  EXCEPTION
15:35:46 182  	    WHEN NO_DATA_FOUND THEN
15:35:46 183  	      RAISE BAD_NOTIFICATION_ID;
15:35:46 184  	END;
15:35:46 185  
15:35:46 186  	UPDATE
15:35:46 187  	  NOTIFICATION
15:35:46 188  	SET
15:35:46 189  	  NOTIFICATION.UPDATE_DATE = sysdate
15:35:46 190  	WHERE
15:35:46 191  	  NOTIFICATION.ID = in_notification_id;
15:35:46 192  
15:35:46 193  EXCEPTION
15:35:46 194  WHEN BAD_NOTIFICATION_ID THEN
15:35:46 195  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 196  	  SPROC_NAME, 'No such notification');
15:35:46 197  WHEN OTHERS THEN
15:35:46 198  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 199  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 200  END UPDATE_NOTIFICATION_TIMESTAMP;
15:35:46 201  
15:35:46 202  /******************************************************************************/
15:35:46 203  
15:35:46 204  PROCEDURE SET_NOTIFICATION_STATUS (
15:35:46 205  /*
15:35:46 206  Throws exceptions:
15:35:46 207  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 208  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 209  */
15:35:46 210  	in_notification_id	  IN NUMBER,
15:35:46 211  	in_notification_status_id IN NUMBER,
15:35:46 212  	in_error_message	  IN VARCHAR2
15:35:46 213  ) AS
15:35:46 214  SPROC_NAME CONSTANT VARCHAR2(32) := 'SET_NOTIFICATION_STATUS';
15:35:46 215  -- VARIABLES
15:35:46 216  var_group_id		NUMBER;
15:35:46 217  var_account_id		NUMBER;
15:35:46 218  var_notification_type_id	NUMBER;
15:35:46 219  var_email_template_params CLOB;
15:35:46 220  var_create_history_date	DATE := SYSDATE;
15:35:46 221  var_notification_status_id   NUMBER;
15:35:46 222  var_date_to_notify	DATE;
15:35:46 223  max_fails   NUMBER := 5;
15:35:46 224  num_fails   NUMBER;
15:35:46 225  -- EXCEPTIONS
15:35:46 226  BAD_NOTIFICATION_ID	 EXCEPTION;
15:35:46 227  BAD_NOTIFICATION_STATUS_ID EXCEPTION;
15:35:46 228  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
15:35:46 229  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:35:46 230  BEGIN
15:35:46 231  
15:35:46 232  	IF in_notification_status_id != NOTIFICATION_STATUSES_V17.NOTIFICATION_SENT
15:35:46 233  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V17.NOTIFICATION_PENDING
15:35:46 234  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V17.NOTIFICATION_FAILED THEN
15:35:46 235  	  RAISE BAD_NOTIFICATION_STATUS_ID;
15:35:46 236  	END IF;
15:35:46 237  
15:35:46 238  	BEGIN
15:35:46 239  	  SELECT
15:35:46 240  	    NOTIFICATION.GROUP_ID,
15:35:46 241  	    NOTIFICATION.ACCOUNT_ID,
15:35:46 242  	    NOTIFICATION.NOTIFICATION_TYPE_ID,
15:35:46 243  	    NOTIFICATION.NOTIFICATION_STATUS_ID,
15:35:46 244  	    NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
15:35:46 245  	    NOTIFICATION.DATE_TO_NOTIFY
15:35:46 246  	    into
15:35:46 247  	    var_group_id,
15:35:46 248  	    var_account_id,
15:35:46 249  	    var_notification_type_id,
15:35:46 250  	    var_notification_status_id,
15:35:46 251  	    var_email_template_params,
15:35:46 252  	    var_date_to_notify
15:35:46 253  	  FROM
15:35:46 254  	    NOTIFICATION
15:35:46 255  	  WHERE
15:35:46 256  	    NOTIFICATION.ID = in_notification_id;
15:35:46 257  	  EXCEPTION
15:35:46 258  	    WHEN NO_DATA_FOUND THEN
15:35:46 259  	      RAISE BAD_NOTIFICATION_ID;
15:35:46 260  	END;
15:35:46 261  
15:35:46 262  	BEGIN
15:35:46 263  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_NOTIFICATION_HISTORY (
15:35:46 264  	    in_notification_id		=> in_notification_id,
15:35:46 265  	    in_account_id		=> var_account_id,
15:35:46 266  	    in_group_id 		=> var_group_id,
15:35:46 267  	    notification_reason_type_id => var_notification_type_id,
15:35:46 268  	    notification_status_id	=> var_notification_status_id,
15:35:46 269  	    email_template_params	=> var_email_template_params,
15:35:46 270  	    in_create_date		=> var_create_history_date,
15:35:46 271  	    in_date_to_notify		=> var_date_to_notify
15:35:46 272  	  );
15:35:46 273  	  EXCEPTION
15:35:46 274  	    WHEN OTHERS THEN
15:35:46 275  	      EXCEPTION_MESSAGE := SQLERRM;
15:35:46 276  	      RAISE CAN_NOT_CREATE_HISTORY;
15:35:46 277  	END;
15:35:46 278  
15:35:46 279  	UPDATE
15:35:46 280  	  NOTIFICATION
15:35:46 281  	SET
15:35:46 282  	  NOTIFICATION.NOTIFICATION_STATUS_ID = in_notification_status_id,
15:35:46 283  	  NOTIFICATION.UPDATE_DATE = sysdate
15:35:46 284  	WHERE
15:35:46 285  	  NOTIFICATION.ID = in_notification_id;
15:35:46 286  
15:35:46 287  	IF ( in_error_message IS NOT NULL ) THEN
15:35:46 288  	  ADD_NOTIFICATION_FAILURE(
15:35:46 289  	    in_notification_id => in_notification_id,
15:35:46 290  	    in_error_message => in_error_message
15:35:46 291  	  );
15:35:46 292  	END IF;
15:35:46 293  
15:35:46 294  	SELECT COUNT(1) INTO num_fails
15:35:46 295  	FROM NOTIFICATION_FAILURE
15:35:46 296  	WHERE NOTIFICATION_ID = in_notification_id;
15:35:46 297  
15:35:46 298  	IF (in_notification_status_id = NOTIFICATION_STATUSES_V17.NOTIFICATION_SENT OR num_fails >= max_fails) then
15:35:46 299  	  FOR REC IN (
15:35:46 300  	      SELECT ID, NOTIFICATION_ID, ERROR_MESSAGE, CREATE_DATE
15:35:46 301  	      FROM NOTIFICATION_FAILURE
15:35:46 302  	      WHERE NOTIFICATION_ID = in_notification_id
15:35:46 303  	      ) LOOP
15:35:46 304  	      BEGIN
15:35:46 305  		CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_NOTIF_FAILURE_HISTORY(
15:35:46 306  		  in_error_message	   => REC.ERROR_MESSAGE,
15:35:46 307  		  in_notification_id	   => REC.NOTIFICATION_ID,
15:35:46 308  		  in_create_date	   => REC.CREATE_DATE
15:35:46 309  		);
15:35:46 310  		EXCEPTION
15:35:46 311  		  WHEN OTHERS THEN
15:35:46 312  		    EXCEPTION_MESSAGE := SQLERRM;
15:35:46 313  		    RAISE CAN_NOT_CREATE_HISTORY;
15:35:46 314  	      END;
15:35:46 315  	  END LOOP;
15:35:46 316  	  DELETE FROM NOTIFICATION_FAILURE WHERE NOTIFICATION_ID = in_notification_id;
15:35:46 317  
15:35:46 318  	  BEGIN
15:35:46 319  	    SELECT
15:35:46 320  	      NOTIFICATION.GROUP_ID,
15:35:46 321  	      NOTIFICATION.ACCOUNT_ID,
15:35:46 322  	      NOTIFICATION.NOTIFICATION_TYPE_ID,
15:35:46 323  	      NOTIFICATION.NOTIFICATION_STATUS_ID,
15:35:46 324  	      NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
15:35:46 325  	      NOTIFICATION.DATE_TO_NOTIFY
15:35:46 326  	      into
15:35:46 327  	      var_group_id,
15:35:46 328  	      var_account_id,
15:35:46 329  	      var_notification_type_id,
15:35:46 330  	      var_notification_status_id,
15:35:46 331  	      var_email_template_params,
15:35:46 332  	      var_date_to_notify
15:35:46 333  	    FROM
15:35:46 334  	      NOTIFICATION
15:35:46 335  	    WHERE
15:35:46 336  	      NOTIFICATION.ID = in_notification_id;
15:35:46 337  	    EXCEPTION
15:35:46 338  	      WHEN NO_DATA_FOUND THEN
15:35:46 339  		RAISE BAD_NOTIFICATION_ID;
15:35:46 340  	  END;
15:35:46 341  
15:35:46 342  	  BEGIN
15:35:46 343  	    CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V17.CREATE_NOTIFICATION_HISTORY (
15:35:46 344  	      in_notification_id	  => in_notification_id,
15:35:46 345  	      in_account_id		  => var_account_id,
15:35:46 346  	      in_group_id		  => var_group_id,
15:35:46 347  	      notification_reason_type_id => var_notification_type_id,
15:35:46 348  	      notification_status_id	  => var_notification_status_id,
15:35:46 349  	      email_template_params	  => var_email_template_params,
15:35:46 350  	      in_create_date		  => var_create_history_date,
15:35:46 351  	      in_date_to_notify 	  => var_date_to_notify
15:35:46 352  	    );
15:35:46 353  	    EXCEPTION
15:35:46 354  	      WHEN OTHERS THEN
15:35:46 355  		EXCEPTION_MESSAGE := SQLERRM;
15:35:46 356  		RAISE CAN_NOT_CREATE_HISTORY;
15:35:46 357  	  END;
15:35:46 358  
15:35:46 359  	  DELETE FROM NOTIFICATION WHERE ID = in_notification_id;
15:35:46 360  
15:35:46 361  	END IF;
15:35:46 362  	commit;
15:35:46 363  
15:35:46 364  EXCEPTION
15:35:46 365  WHEN BAD_NOTIFICATION_STATUS_ID THEN
15:35:46 366  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 367  	  SPROC_NAME, 'Bad notification status');
15:35:46 368  WHEN BAD_NOTIFICATION_ID THEN
15:35:46 369  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 370  	  SPROC_NAME, 'No such notification');
15:35:46 371  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:46 372  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 373  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:46 374  WHEN OTHERS THEN
15:35:46 375  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 376  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 377  END SET_NOTIFICATION_STATUS;
15:35:46 378  
15:35:46 379  /******************************************************************************/
15:35:46 380  
15:35:46 381  PROCEDURE ADD_NOTIFICATION_FAILURE (
15:35:46 382  /*
15:35:46 383  Throws exceptions:
15:35:46 384  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 385  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 386  */
15:35:46 387  	in_notification_id IN NUMBER,
15:35:46 388  	in_error_message   IN VARCHAR2
15:35:46 389  ) AS
15:35:46 390  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION_FAILURE';
15:35:46 391  -- VARIABLES
15:35:46 392  temp_notification_id NUMBER;
15:35:46 393  var_create_date	   DATE := SYSDATE;
15:35:46 394  -- EXCEPTIONS
15:35:46 395  BAD_NOTIFICATION_ID	 EXCEPTION;
15:35:46 396  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
15:35:46 397  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:35:46 398  BEGIN
15:35:46 399  
15:35:46 400  	BEGIN
15:35:46 401  	  SELECT
15:35:46 402  	    NOTIFICATION.ID into temp_notification_id
15:35:46 403  	  FROM
15:35:46 404  	    NOTIFICATION
15:35:46 405  	  WHERE
15:35:46 406  	    NOTIFICATION.ID = in_notification_id;
15:35:46 407  	  EXCEPTION
15:35:46 408  	    WHEN NO_DATA_FOUND THEN
15:35:46 409  	      RAISE BAD_NOTIFICATION_ID;
15:35:46 410  	END;
15:35:46 411  
15:35:46 412  	INSERT INTO NOTIFICATION_FAILURE (
15:35:46 413  	  ID,
15:35:46 414  	  NOTIFICATION_ID,
15:35:46 415  	  ERROR_MESSAGE,
15:35:46 416  	  CREATE_DATE
15:35:46 417  	) VALUES (
15:35:46 418  	  NOTF_ID_SEQ.nextVal,
15:35:46 419  	  in_notification_id,
15:35:46 420  	  in_error_message,
15:35:46 421  	  sysdate
15:35:46 422  	);
15:35:46 423  
15:35:46 424  	--BEGIN
15:35:46 425  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V17.CREATE_NOTIF_FAILURE_HISTORY(
15:35:46 426  	--    in_error_message	       => in_error_message,
15:35:46 427  	--    in_notification_queue_id => in_notification_id,
15:35:46 428  	--    in_create_date	       => var_create_date
15:35:46 429  	--  );
15:35:46 430  	--  EXCEPTION
15:35:46 431  	--    WHEN OTHERS THEN
15:35:46 432  	--	EXCEPTION_MESSAGE := SQLERRM;
15:35:46 433  	--	RAISE CAN_NOT_CREATE_HISTORY;
15:35:46 434  	--END;
15:35:46 435  
15:35:46 436  EXCEPTION
15:35:46 437  WHEN BAD_NOTIFICATION_ID THEN
15:35:46 438  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 439  	  SPROC_NAME, 'No such notification');
15:35:46 440  WHEN CAN_NOT_CREATE_HISTORY THEN
15:35:46 441  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:35:46 442  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:35:46 443  WHEN OTHERS THEN
15:35:46 444  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 445  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 446  END ADD_NOTIFICATION_FAILURE;
15:35:46 447  
15:35:46 448  /******************************************************************************/
15:35:46 449  
15:35:46 450  PROCEDURE LOCK_PENDING_NOTIFICATION (
15:35:46 451  /*
15:35:46 452  Result: GLOBAL_STATUSES.TRUE if notification locked
15:35:46 453  GLOBA_STATUSES.FALSE - else
15:35:46 454  */
15:35:46 455  	in_notification_id IN NUMBER,
15:35:46 456  	out_lock_status    OUT NUMBER
15:35:46 457  ) AS
15:35:46 458  SPROC_NAME CONSTANT VARCHAR2(25) := 'LOCK_PENDING_NOTIFICATION';
15:35:46 459  -- VARIABLE
15:35:46 460  temp_notification_id NUMBER;
15:35:46 461  BEGIN
15:35:46 462  	SELECT
15:35:46 463  	  NOTIFICATION.ID into temp_notification_id
15:35:46 464  	FROM
15:35:46 465  	  NOTIFICATION
15:35:46 466  	WHERE
15:35:46 467  	  NOTIFICATION.ID = in_notification_id
15:35:46 468  	  AND (
15:35:46 469  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V17.NOTIFICATION_PENDING
15:35:46 470  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V17.NOTIFICATION_FAILED
15:35:46 471  	  )
15:35:46 472  	FOR UPDATE;
15:35:46 473  
15:35:46 474  	out_lock_status := 1;
15:35:46 475  
15:35:46 476  EXCEPTION
15:35:46 477  WHEN NO_DATA_FOUND THEN
15:35:46 478  	out_lock_status := 0;
15:35:46 479  WHEN OTHERS THEN
15:35:46 480  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 481  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 482  END LOCK_PENDING_NOTIFICATION;
15:35:46 483  
15:35:46 484  /******************************************************************************/
15:35:46 485  
15:35:46 486  PROCEDURE GET_NOTIFICATION_DATA (
15:35:46 487  	in_notification_id IN NUMBER,
15:35:46 488  	out_result_set	   OUT SYS_REFCURSOR
15:35:46 489  ) AS
15:35:46 490  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_NOTIFICATION_DATA';
15:35:46 491  BEGIN
15:35:46 492  	OPEN out_result_set FOR
15:35:46 493  	SELECT
15:35:46 494  	  NOTIFICATION.ID,
15:35:46 495  	  NOTIFICATION.GROUP_ID,
15:35:46 496  	  NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
15:35:46 497  	  NOTIFICATION.NOTIFICATION_STATUS_ID,
15:35:46 498  	  NOTIFICATION.CREATE_DATE,
15:35:46 499  	  NOTIFICATION.UPDATE_DATE,
15:35:46 500  	  NOTIFICATION.NOTIFICATION_TYPE_ID,
15:35:46 501  	  NOTIFICATION_TYPE.VALUE as "TYPE_VALUE",
15:35:46 502  	  NOTIFICATION_TYPE.TEMPLATE_URL
15:35:46 503  	FROM
15:35:46 504  	  NOTIFICATION
15:35:46 505  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
15:35:46 506  	WHERE
15:35:46 507  	  NOTIFICATION.ID = in_notification_id;
15:35:46 508  
15:35:46 509  EXCEPTION
15:35:46 510  WHEN OTHERS THEN
15:35:46 511  	PROCS_COMMON_V17.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:35:46 512  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:46 513  END GET_NOTIFICATION_DATA;
15:35:46 514  
15:35:46 515  END PROCS_NOTIFICATION_V17;
15:35:46 516  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:35:46   4  /*
15:35:46   5  Throws exceptions:
15:35:46   6  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46   7  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46   8  */
15:35:46   9  	  in_offer_chain_id IN	 NUMBER,
15:35:46  10  	  out_result_set    OUT  SYS_REFCURSOR
15:35:46  11  ) AS
15:35:46  12  BEGIN
15:35:46  13  	PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_BY_ID (
15:35:46  14  	  in_offer_chain_id => in_offer_chain_id,
15:35:46  15  	  out_result_set => out_result_set
15:35:46  16  	);
15:35:46  17  END GET_OFFER_CHAIN_BY_ID;
15:35:46  18  
15:35:46  19  PROCEDURE GET_PENDING_INVOICES (
15:35:46  20  /*
15:35:46  21  Throws exceptions:
15:35:46  22  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  23  */
15:35:46  24  	out_result_set1      OUT SYS_REFCURSOR,
15:35:46  25  	out_result_set2      OUT SYS_REFCURSOR,
15:35:46  26  	out_result_set3      OUT SYS_REFCURSOR,
15:35:46  27  	in_row_number	     IN NUMBER DEFAULT NULL
15:35:46  28  ) AS
15:35:46  29  BEGIN
15:35:46  30  	PROCS_INVOICE_V17.GET_PENDING_INVOICES(
15:35:46  31  	  out_result_set1,
15:35:46  32  	  out_result_set2,
15:35:46  33  	  out_result_set3,
15:35:46  34  	  in_row_number
15:35:46  35  	);
15:35:46  36  END GET_PENDING_INVOICES;
15:35:46  37  
15:35:46  38  /********************************************************/
15:35:46  39  PROCEDURE GET_PENDING_REFUND_CHARGES (
15:35:46  40  /*
15:35:46  41  Throws exceptions:
15:35:46  42  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  43  */
15:35:46  44  	out_result_set	    OUT SYS_REFCURSOR,
15:35:46  45  	in_row_number	    IN NUMBER DEFAULT NULL
15:35:46  46  ) AS
15:35:46  47  BEGIN
15:35:46  48  	PROCS_CHARGE_V17.GET_PENDING_REFUND_CHARGES(
15:35:46  49  	  out_result_set,
15:35:46  50  	  in_row_number
15:35:46  51  	);
15:35:46  52  END GET_PENDING_REFUND_CHARGES;
15:35:46  53  /********************************************************/
15:35:46  54  
15:35:46  55  PROCEDURE GET_UNPROCESSED_CHARGES (
15:35:46  56  /*
15:35:46  57  Throws exceptions:
15:35:46  58  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46  59  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  60  */
15:35:46  61  	in_invoice_id  IN NUMBER,
15:35:46  62  	out_result_set OUT SYS_REFCURSOR
15:35:46  63  ) AS
15:35:46  64  BEGIN
15:35:46  65  	PROCS_CHARGE_V17.GET_UNPROCESSED_CHARGES(
15:35:46  66  	  in_invoice_id,
15:35:46  67  	  out_result_set
15:35:46  68  	);
15:35:46  69  END GET_UNPROCESSED_CHARGES;
15:35:46  70  
15:35:46  71  /********************************************************/
15:35:46  72  
15:35:46  73  PROCEDURE GET_PROCESSED_CHARGES (
15:35:46  74  /*
15:35:46  75  Throws exceptions:
15:35:46  76  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46  77  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  78  */
15:35:46  79  	in_invoice_id  IN NUMBER,
15:35:46  80  	out_result_set OUT SYS_REFCURSOR
15:35:46  81  ) AS
15:35:46  82  BEGIN
15:35:46  83  	PROCS_CHARGE_V17.GET_PROCESSED_CHARGES(
15:35:46  84  	  in_invoice_id,
15:35:46  85  	  out_result_set
15:35:46  86  	);
15:35:46  87  END GET_PROCESSED_CHARGES;
15:35:46  88  
15:35:46  89  /********************************************************/
15:35:46  90  
15:35:46  91  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
15:35:46  92  /*
15:35:46  93  Throws exceptions:
15:35:46  94  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  95  */
15:35:46  96  	in_transaction_id	      IN NUMBER,
15:35:46  97  	in_transaction_attempt_status IN NUMBER,
15:35:46  98  	out_result_set		      OUT SYS_REFCURSOR
15:35:46  99  ) AS
15:35:46 100  BEGIN
15:35:46 101  	PROCS_TRANSACTION_V17.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
15:35:46 102  	  in_transaction_id,
15:35:46 103  	  in_transaction_attempt_status,
15:35:46 104  	  out_result_set
15:35:46 105  	);
15:35:46 106  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
15:35:46 107  
15:35:46 108  /********************************************************/
15:35:46 109  
15:35:46 110  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
15:35:46 111  /*
15:35:46 112  Throws exceptions:
15:35:46 113  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 114  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 115  */
15:35:46 116  	in_transaction_attempt_id     IN NUMBER,
15:35:46 117  	in_transaction_attempt_status IN NUMBER
15:35:46 118  ) AS
15:35:46 119  BEGIN
15:35:46 120  	PROCS_TRANSACTION_V17.UPDATE_TRNSCTN_ATTEMPT_STATUS(
15:35:46 121  	   in_transaction_attempt_id,
15:35:46 122  	   in_transaction_attempt_status
15:35:46 123  	);
15:35:46 124  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
15:35:46 125  
15:35:46 126  /********************************************************/
15:35:46 127  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
15:35:46 128  /*
15:35:46 129  Throws exceptions:
15:35:46 130  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 131  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 132  */
15:35:46 133  	in_invoice_id	IN  NUMBER,
15:35:46 134  	out_result_set OUT SYS_REFCURSOR
15:35:46 135  ) AS
15:35:46 136  BEGIN
15:35:46 137  	PROCS_TRANSACTION_V17.GET_CLOSED_REFUNDS_BY_INVOICE(
15:35:46 138  	   in_invoice_id,
15:35:46 139  	   out_result_set
15:35:46 140  	);
15:35:46 141  END GET_CLOSED_REFUNDS_BY_INVOICE;
15:35:46 142  
15:35:46 143  /********************************************************/
15:35:46 144  
15:35:46 145  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
15:35:46 146  /*
15:35:46 147  Throws exceptions:
15:35:46 148  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 149  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 150  */
15:35:46 151  	in_transaction_attempt_id IN NUMBER,
15:35:46 152  	in_updated_by		  IN VARCHAR2
15:35:46 153  ) AS
15:35:46 154  BEGIN
15:35:46 155  	PROCS_TRANSACTION_V17.UPDATE_TRNSCTN_ATTEMPT_TIME(
15:35:46 156  	  in_transaction_attempt_id,
15:35:46 157  	  in_updated_by
15:35:46 158  	);
15:35:46 159  END UPDATE_TRNSCTN_ATTEMPT_TIME;
15:35:46 160  
15:35:46 161  /********************************************************/
15:35:46 162  
15:35:46 163  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
15:35:46 164  /*
15:35:46 165  Throws exceptions:
15:35:46 166  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 167  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 168  */
15:35:46 169  	in_transaction_id	   IN NUMBER,
15:35:46 170  	in_trans_attempt_status    IN NUMBER,
15:35:46 171  	in_external_status_code    IN VARCHAR2,
15:35:46 172  	in_external_status_message IN VARCHAR2,
15:35:46 173  	in_created_by		   IN VARCHAR2,
15:35:46 174  	in_ext_transaction_id	   IN VARCHAR2,
15:35:46 175  	out_transaction_attempt_id OUT NUMBER
15:35:46 176  ) AS
15:35:46 177  BEGIN
15:35:46 178  	PROCS_TRANSACTION_V17.CREATE_TRANSACTION_ATTEMPT(
15:35:46 179  	  in_transaction_id,
15:35:46 180  	  in_trans_attempt_status,
15:35:46 181  	  in_external_status_code,
15:35:46 182  	  in_external_status_message,
15:35:46 183  	  in_created_by,
15:35:46 184  	  in_ext_transaction_id,
15:35:46 185  	  out_transaction_attempt_id
15:35:46 186  	);
15:35:46 187  END CREATE_TRANSACTION_ATTEMPT;
15:35:46 188  
15:35:46 189  /********************************************************/
15:35:46 190  
15:35:46 191  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
15:35:46 192  /*
15:35:46 193  Throws exceptions:
15:35:46 194  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 195  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 196  */
15:35:46 197  	in_transaction_attempt_id IN NUMBER,
15:35:46 198  	in_ext_status_code	  IN VARCHAR2,
15:35:46 199  	in_ext_status_message	  IN VARCHAR2,
15:35:46 200  	in_ext_transaction_id	  IN VARCHAR2
15:35:46 201  ) AS
15:35:46 202  BEGIN
15:35:46 203  	PROCS_TRANSACTION_V17.UPDATE_TRANSACTION_ATTEMPT_INF(
15:35:46 204  	  in_transaction_attempt_id,
15:35:46 205  	  in_ext_status_code,
15:35:46 206  	  in_ext_status_message,
15:35:46 207  	  in_ext_transaction_id
15:35:46 208  	);
15:35:46 209  END UPDATE_TRANSACTION_ATTEMPT_INF;
15:35:46 210  
15:35:46 211  /********************************************************/
15:35:46 212  
15:35:46 213  PROCEDURE UPDATE_TRANSACTION_STATUS (
15:35:46 214  /*
15:35:46 215  Throws exceptions:
15:35:46 216  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 217  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 218  */
15:35:46 219  	in_transaction_id	 IN NUMBER,
15:35:46 220  	in_updated_by		 IN VARCHAR2,
15:35:46 221  	in_transaction_status_id IN NUMBER
15:35:46 222  ) AS
15:35:46 223  BEGIN
15:35:46 224  	PROCS_TRANSACTION_V17.UPDATE_TRANSACTION_STATUS(
15:35:46 225  	  in_transaction_id,
15:35:46 226  	  in_updated_by,
15:35:46 227  	  in_transaction_status_id
15:35:46 228  	);
15:35:46 229  END UPDATE_TRANSACTION_STATUS;
15:35:46 230  
15:35:46 231  /********************************************************/
15:35:46 232  
15:35:46 233  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
15:35:46 234  /*
15:35:46 235  Throws exceptions:
15:35:46 236  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 237  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 238  */
15:35:46 239  	in_transaction_id IN  NUMBER,
15:35:46 240  	out_attempts_num  OUT NUMBER
15:35:46 241  ) AS
15:35:46 242  BEGIN
15:35:46 243  	PROCS_TRANSACTION_V17.GET_FAILED_ATTEMPTS_NUMBER(
15:35:46 244  	  in_transaction_id,
15:35:46 245  	  out_attempts_num
15:35:46 246  	);
15:35:46 247  END GET_FAILED_ATTEMPTS_NUMBER;
15:35:46 248  
15:35:46 249  /********************************************************/
15:35:46 250  
15:35:46 251  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
15:35:46 252  /*
15:35:46 253  Throws exceptions:
15:35:46 254  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 255  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 256  */
15:35:46 257  	in_transaction_id IN  NUMBER,
15:35:46 258  	out_is_successfull  OUT NUMBER
15:35:46 259  ) AS
15:35:46 260  BEGIN
15:35:46 261  	PROCS_TRANSACTION_V17.IS_TRANSACTION_SUCCESSFULL(
15:35:46 262  	  in_transaction_id,
15:35:46 263  	  out_is_successfull
15:35:46 264  	);
15:35:46 265  END IS_TRANSACTION_SUCCESSFULL;
15:35:46 266  /********************************************************/
15:35:46 267  
15:35:46 268  PROCEDURE UPDATE_INVOICE_STATUS (
15:35:46 269  /*
15:35:46 270  Throws exceptions:
15:35:46 271  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 272  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 273  */
15:35:46 274  	in_invoice_id		       IN NUMBER,
15:35:46 275  	in_invoice_status_id	       IN NUMBER,
15:35:46 276  	in_updated_by		       IN VARCHAR2
15:35:46 277  ) AS
15:35:46 278  BEGIN
15:35:46 279  	PROCS_INVOICE_V17.UPDATE_INVOICE_STATUS(
15:35:46 280  	  in_invoice_id,
15:35:46 281  	  in_invoice_status_id,
15:35:46 282  	  in_updated_by
15:35:46 283  	);
15:35:46 284  END UPDATE_INVOICE_STATUS;
15:35:46 285  
15:35:46 286  /********************************************************/
15:35:46 287  
15:35:46 288  PROCEDURE SUSPEND_SUBSCRIPTION(
15:35:46 289  /*
15:35:46 290  Throws exceptions:
15:35:46 291  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 292  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:46 293  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 294  */
15:35:46 295  	  in_subs_id	IN NUMBER ,
15:35:46 296  	  in_updated_by IN VARCHAR2
15:35:46 297  ) AS
15:35:46 298  BEGIN
15:35:46 299  	PROCS_SUBSCRIPTION_V17.SUSPEND_SUBSCRIPTION(
15:35:46 300  	  in_subs_id,
15:35:46 301  	  in_updated_by
15:35:46 302  	);
15:35:46 303  END SUSPEND_SUBSCRIPTION;
15:35:46 304  
15:35:46 305  /********************************************************/
15:35:46 306  
15:35:46 307  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:35:46 308  /*
15:35:46 309  Throws exceptions:
15:35:46 310  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 311  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 312  */
15:35:46 313  	in_credit_card_id IN  NUMBER,
15:35:46 314  	out_result_set	  OUT SYS_REFCURSOR
15:35:46 315  ) AS
15:35:46 316  BEGIN
15:35:46 317  	PROCS_FIN_INSTRUMENTS_V17.GET_CREDIT_CARD_BY_ID(
15:35:46 318  	  in_credit_card_id,
15:35:46 319  	  out_result_set
15:35:46 320  	);
15:35:46 321  END GET_CREDIT_CARD_BY_ID;
15:35:46 322  
15:35:46 323  /*********************************************************/
15:35:46 324  
15:35:46 325  PROCEDURE GET_TRANSACTION_AMOUNT (
15:35:46 326  /*
15:35:46 327  Throws exceptions:
15:35:46 328  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 329  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 330  */
15:35:46 331  	in_transaction_id      IN  NUMBER,
15:35:46 332  	out_transaction_amount OUT NUMBER
15:35:46 333  ) AS
15:35:46 334  BEGIN
15:35:46 335  	PROCS_TRANSACTION_V17.GET_TRANSACTION_AMOUNT(
15:35:46 336  	  in_transaction_id,
15:35:46 337  	  out_transaction_amount
15:35:46 338  	);
15:35:46 339  END GET_TRANSACTION_AMOUNT;
15:35:46 340  
15:35:46 341  /***********************************************************/
15:35:46 342  
15:35:46 343  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
15:35:46 344  /*
15:35:46 345  Throws exceptions:
15:35:46 346  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 347  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 348  */
15:35:46 349  	in_invoice_id  IN  NUMBER,
15:35:46 350  	out_account_id OUT NUMBER
15:35:46 351  ) AS
15:35:46 352  BEGIN
15:35:46 353  	PROCS_INVOICE_V17.GET_ACCOUNT_BY_INVOICE_ID(
15:35:46 354  	  in_invoice_id,
15:35:46 355  	  out_account_id
15:35:46 356  	);
15:35:46 357  END GET_ACCOUNT_BY_INVOICE_ID;
15:35:46 358  
15:35:46 359  /************************************************************/
15:35:46 360  
15:35:46 361  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
15:35:46 362  /*
15:35:46 363  Throws exceptions:
15:35:46 364  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 365  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 366  */
15:35:46 367  	in_gift_certificate_id IN NUMBER,
15:35:46 368  	out_result_set	       OUT SYS_REFCURSOR
15:35:46 369  ) AS
15:35:46 370  BEGIN
15:35:46 371  	PROCS_FIN_INSTRUMENTS_V17.GET_GIFT_CERTIFICATE_BY_ID (
15:35:46 372  	  in_gift_certificate_id,
15:35:46 373  	  out_result_set
15:35:46 374  	);
15:35:46 375  END GET_GIFT_CERTIFICATE_BY_ID;
15:35:46 376  
15:35:46 377  /**************************************************************/
15:35:46 378  
15:35:46 379  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
15:35:46 380  /*
15:35:46 381  Throws exceptions:
15:35:46 382  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 383  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 384  */
15:35:46 385  	in_charge_id	    IN NUMBER,
15:35:46 386  	out_subscription_id OUT NUMBER
15:35:46 387  ) AS
15:35:46 388  BEGIN
15:35:46 389  	PROCS_CHARGE_V17.GET_SUBSCR_ID_BY_CHARGE_ID(
15:35:46 390  	  in_charge_id,
15:35:46 391  	  out_subscription_id
15:35:46 392  	);
15:35:46 393  END GET_SUBSCR_ID_BY_CHARGE_ID;
15:35:46 394  
15:35:46 395  /**************************************************************/
15:35:46 396  
15:35:46 397  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
15:35:46 398  /*
15:35:46 399  Throws exceptions:
15:35:46 400  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 401  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 402  */
15:35:46 403  	in_gift_certificate_id IN NUMBER,
15:35:46 404  	in_charge_id	       IN NUMBER,
15:35:46 405  	out_result	       OUT NUMBER
15:35:46 406  ) AS
15:35:46 407  BEGIN
15:35:46 408  	PROCS_FIN_INSTRUMENTS_V17.IS_GCERT_FOR_PROPER_OFFER (
15:35:46 409  	  in_gift_certificate_id,
15:35:46 410  	  in_charge_id,
15:35:46 411  	  out_result
15:35:46 412  	);
15:35:46 413  END IS_GCERT_FOR_PROPER_OFFER;
15:35:46 414  
15:35:46 415  /**************************************************************/
15:35:46 416  
15:35:46 417  PROCEDURE GET_SUBSCRIPTION_INFO (
15:35:46 418  /*
15:35:46 419  Throws exceptions:
15:35:46 420  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 421  */
15:35:46 422  	  in_subscription_id IN  NUMBER,
15:35:46 423  	  out_result_set      OUT SYS_REFCURSOR
15:35:46 424  ) AS
15:35:46 425  BEGIN
15:35:46 426  	PROCS_SUBSCRIPTION_V17.GET_SUBSCRIPTION_INFO (
15:35:46 427  	  in_subscription_id,
15:35:46 428  	  out_result_set
15:35:46 429  	);
15:35:46 430  END GET_SUBSCRIPTION_INFO;
15:35:46 431  
15:35:46 432  /****************************************************************/
15:35:46 433  
15:35:46 434  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:35:46 435  /*
15:35:46 436  Throws exceptions:
15:35:46 437  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 438  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 439  */
15:35:46 440  	in_invoice_id IN  NUMBER,
15:35:46 441  	out_amount    OUT NUMBER
15:35:46 442  ) AS
15:35:46 443  BEGIN
15:35:46 444  	PROCS_INVOICE_V17.CALCULATE_INVOICE_AMOUNT (
15:35:46 445  	  in_invoice_id,
15:35:46 446  	  out_amount
15:35:46 447  	);
15:35:46 448  END CALCULATE_INVOICE_AMOUNT;
15:35:46 449  
15:35:46 450  /****************************************************************/
15:35:46 451  
15:35:46 452  PROCEDURE GET_TRANSACTION_BY_ID (
15:35:46 453  /*
15:35:46 454  Throws exceptions:
15:35:46 455  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 456  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 457  */
15:35:46 458  	in_transaction_id IN NUMBER,
15:35:46 459  	out_result_set	  OUT SYS_REFCURSOR
15:35:46 460  ) AS
15:35:46 461  BEGIN
15:35:46 462  	PROCS_TRANSACTION_V17.GET_TRANSACTION_BY_ID(
15:35:46 463  	  in_transaction_id,
15:35:46 464  	  out_result_set
15:35:46 465  	);
15:35:46 466  END GET_TRANSACTION_BY_ID;
15:35:46 467  
15:35:46 468  /****************************************************************/
15:35:46 469  
15:35:46 470  PROCEDURE UPDATE_CHARGE_STATUS (
15:35:46 471  /*
15:35:46 472  Throws exceptions:
15:35:46 473  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 474  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 475  */
15:35:46 476  	in_charge_id	    IN CHARGE.ID%TYPE,
15:35:46 477  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:35:46 478  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
15:35:46 479  ) AS
15:35:46 480  BEGIN
15:35:46 481  	PROCS_CHARGE_V17.UPDATE_CHARGE_STATUS(
15:35:46 482  	  in_charge_id,
15:35:46 483  	  in_charge_status_id,
15:35:46 484  	  in_updated_by
15:35:46 485  	);
15:35:46 486  END UPDATE_CHARGE_STATUS;
15:35:46 487  
15:35:46 488  /****************************************************************/
15:35:46 489  
15:35:46 490  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:35:46 491  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:46 492  	out_result_set OUT SYS_REFCURSOR
15:35:46 493  ) AS
15:35:46 494  BEGIN
15:35:46 495  	PROCS_FIN_INSTRUMENTS_V17.GET_GC_BY_PURCH_INVOICE_ID(
15:35:46 496  	  in_invoice_id,
15:35:46 497  	  out_result_set
15:35:46 498  	);
15:35:46 499  END GET_GC_BY_PURCH_INVOICE_ID;
15:35:46 500  
15:35:46 501  /****************************************************************/
15:35:46 502  
15:35:46 503  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:35:46 504  /*
15:35:46 505  Throws exceptions:
15:35:46 506  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 507  APP_EXCEPTION_CODES_V17.INTRNAL_ERROR
15:35:46 508  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 509  */
15:35:46 510  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:35:46 511  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:35:46 512  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:35:46 513  ) AS
15:35:46 514  BEGIN
15:35:46 515  	PROCS_TRANSACTION_V17.UPDATE_TRANSACTION_ORDER_ID(
15:35:46 516  	  in_transaction_id,
15:35:46 517  	  in_order_id,
15:35:46 518  	  in_updated_by
15:35:46 519  	);
15:35:46 520  END UPDATE_TRANSACTION_ORDER_ID;
15:35:46 521  
15:35:46 522  /****************************************************************/
15:35:46 523  
15:35:46 524  PROCEDURE GET_ACTIVE_INVOICES_IDS (
15:35:46 525  /*
15:35:46 526  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 527  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 528  */
15:35:46 529  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
15:35:46 530  	in_subscription_id IN NUMBER,
15:35:46 531  	out_result_set	   OUT SYS_REFCURSOR
15:35:46 532  ) AS
15:35:46 533  BEGIN
15:35:46 534  	PROCS_SUBSCRIPTION_V17.GET_ACTIVE_INVOICES_IDS(
15:35:46 535  	  in_subscription_id,
15:35:46 536  	  out_result_set
15:35:46 537  	);
15:35:46 538  END GET_ACTIVE_INVOICES_IDS;
15:35:46 539  
15:35:46 540  /****************************************************************/
15:35:46 541  
15:35:46 542  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
15:35:46 543  /*
15:35:46 544  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 545  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 546  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:46 547  */
15:35:46 548  --  in_invoice_id        IN INVOICE.ID%TYPE,
15:35:46 549  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
15:35:46 550  -- norlov: in_refundable	      IN refund enabled
15:35:46 551  	in_invoice_id	     IN NUMBER,
15:35:46 552  	in_updated_by	     IN VARCHAR2,
15:35:46 553  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V17.FALSE
15:35:46 554  --  in_cancellation_date IN DATE DEFAULT current_timestamp
15:35:46 555  ) AS
15:35:46 556  BEGIN
15:35:46 557  	PROCS_SUBSCRIPTION_V17.CANCEL_SUBSCRIPTION_INVOICE(
15:35:46 558  	  in_invoice_id,
15:35:46 559  	  in_updated_by,
15:35:46 560  	  in_refundable
15:35:46 561  	);
15:35:46 562  END CANCEL_SUBSCRIPTION_INVOICE;
15:35:46 563  
15:35:46 564  /****************************************************************/
15:35:46 565  
15:35:46 566  PROCEDURE FINALIZE_CANCELATION (
15:35:46 567  /*
15:35:46 568  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 569  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 570  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:46 571  */
15:35:46 572  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
15:35:46 573  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
15:35:46 574  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
15:35:46 575  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:35:46 576  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:35:46 577  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
15:35:46 578  	in_subscription_id    IN NUMBER,
15:35:46 579  	in_cancelation_reason IN VARCHAR2,
15:35:46 580  	in_cancelation_date   IN DATE,
15:35:46 581  	in_note 	      IN VARCHAR2,
15:35:46 582  	in_agent_id	      IN NUMBER,
15:35:46 583  	in_updated_by	      IN VARCHAR2
15:35:46 584  ) AS
15:35:46 585  BEGIN
15:35:46 586  	PROCS_SUBSCRIPTION_V17.FINALIZE_CANCELATION(
15:35:46 587  	  in_subscription_id,
15:35:46 588  	  in_cancelation_reason,
15:35:46 589  	  in_cancelation_date,
15:35:46 590  	  in_note,
15:35:46 591  	  in_agent_id,
15:35:46 592  	  in_updated_by
15:35:46 593  	);
15:35:46 594  END FINALIZE_CANCELATION;
15:35:46 595  
15:35:46 596  /****************************************************************/
15:35:46 597  
15:35:46 598  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
15:35:46 599  /*
15:35:46 600  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 601  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 602  */
15:35:46 603  	in_subscription_id IN NUMBER,
15:35:46 604  	out_result_set	   OUT SYS_REFCURSOR
15:35:46 605  ) AS
15:35:46 606  BEGIN
15:35:46 607  	PROCS_SUBSCRIPTION_V17.GET_SUBSCR_PROD_OFFERRINGS(
15:35:46 608  	  in_subscription_id,
15:35:46 609  	  out_result_set
15:35:46 610  	);
15:35:46 611  END GET_SUBSCR_PROD_OFFERRINGS;
15:35:46 612  
15:35:46 613  /****************************************************************/
15:35:46 614  
15:35:46 615  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:35:46 616  /*
15:35:46 617  Throws exceptions (codes):
15:35:46 618  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 619  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 620  */
15:35:46 621  	in_offer_chain_id IN NUMBER,
15:35:46 622  	in_meta_data_name IN VARCHAR2,
15:35:46 623  	out_result_set	  OUT SYS_REFCURSOR
15:35:46 624  )AS
15:35:46 625  BEGIN
15:35:46 626  	PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_META_DATA(
15:35:46 627  	  in_offer_chain_id,
15:35:46 628  	  in_meta_data_name,
15:35:46 629  	  out_result_set
15:35:46 630  	);
15:35:46 631  END GET_OFFER_CHAIN_META_DATA;
15:35:46 632  
15:35:46 633  /****************************************************************/
15:35:46 634  
15:35:46 635  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
15:35:46 636  /*
15:35:46 637  Throws exceptions (codes):
15:35:46 638  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 639  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 640  */
15:35:46 641  	in_product_offering_id IN NUMBER,
15:35:46 642  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
15:35:46 643  	out_result_set	       OUT SYS_REFCURSOR
15:35:46 644  )AS
15:35:46 645  BEGIN
15:35:46 646  	PROCS_OFFER_CHAIN_V17.GET_PRODUCT_OFFERING_META_DATA(
15:35:46 647  	  in_product_offering_id,
15:35:46 648  	  in_meta_data_name,
15:35:46 649  	  out_result_set
15:35:46 650  	);
15:35:46 651  END GET_PRODUCT_OFFERING_META_DATA;
15:35:46 652  
15:35:46 653  /****************************************************************/
15:35:46 654  
15:35:46 655  PROCEDURE READ_ACCOUNT (
15:35:46 656  	in_account_id  IN ACCOUNT.ID%TYPE,
15:35:46 657  	out_result_set OUT SYS_REFCURSOR
15:35:46 658  )AS
15:35:46 659  BEGIN
15:35:46 660  	PROCS_ACCOUNT_CRU_V17.READ_ACCOUNT(
15:35:46 661  	  in_account_id,
15:35:46 662  	  out_result_set
15:35:46 663  	);
15:35:46 664  END READ_ACCOUNT;
15:35:46 665  
15:35:46 666  /****************************************************************/
15:35:46 667  
15:35:46 668  PROCEDURE GET_COLLECTED_CHARGES (
15:35:46 669  /*
15:35:46 670  Throws exceptions:
15:35:46 671  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 672  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 673  */
15:35:46 674  	in_invoice_id  IN NUMBER,
15:35:46 675  	out_result_set OUT SYS_REFCURSOR
15:35:46 676  ) AS
15:35:46 677  BEGIN
15:35:46 678  	PROCS_CHARGE_V17.GET_COLLECTED_CHARGES(
15:35:46 679  	  in_invoice_id,
15:35:46 680  	  out_result_set
15:35:46 681  	);
15:35:46 682  END GET_COLLECTED_CHARGES;
15:35:46 683  
15:35:46 684  /****************************************************************/
15:35:46 685  
15:35:46 686  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
15:35:46 687  /*
15:35:46 688  Throws exceptions:
15:35:46 689  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 690  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 691  */
15:35:46 692  	in_invoice_id IN NUMBER,
15:35:46 693  	out_group_ids OUT SYS_REFCURSOR
15:35:46 694  ) AS
15:35:46 695  BEGIN
15:35:46 696  
15:35:46 697  	PROCS_ACCOUNT_V17.GET_GROUPS_ID_BY_INVOICE_ID(
15:35:46 698  	  in_invoice_id,
15:35:46 699  	  out_group_ids
15:35:46 700  	);
15:35:46 701  
15:35:46 702  END GET_GROUPS_ID_BY_INVOICE_ID;
15:35:46 703  
15:35:46 704  /****************************************************************/
15:35:46 705  
15:35:46 706  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:35:46 707  /*
15:35:46 708  Throws exceptions:
15:35:46 709  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 710  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 711  */
15:35:46 712  	in_group_id IN NUMBER,
15:35:46 713  	out_account_id	OUT NUMBER
15:35:46 714  ) AS
15:35:46 715  BEGIN
15:35:46 716  
15:35:46 717  	PROCS_ACCOUNT_V17.GET_ACCOUNT_ID_BY_GROUP_ID(
15:35:46 718  	  in_group_id,
15:35:46 719  	  out_account_id
15:35:46 720  	);
15:35:46 721  
15:35:46 722  END GET_ACCOUNT_ID_BY_GROUP_ID;
15:35:46 723  
15:35:46 724  /****************************************************************/
15:35:46 725  
15:35:46 726  PROCEDURE LOCK_ACCOUNT (
15:35:46 727  	in_group_id    IN NUMBER,
15:35:46 728  	in_lock_key    IN VARCHAR2,
15:35:46 729  	in_seconds_num IN NUMBER,
15:35:46 730  	in_created_by  IN VARCHAR2,
15:35:46 731  	in_reason      IN VARCHAR2
15:35:46 732  ) AS
15:35:46 733  BEGIN
15:35:46 734  	PROCS_LOCKING_V17.LOCK_ACCOUNT(
15:35:46 735  	  in_group_id,
15:35:46 736  	  in_lock_key,
15:35:46 737  	  in_seconds_num,
15:35:46 738  	  in_created_by,
15:35:46 739  	  in_reason
15:35:46 740  	);
15:35:46 741  END LOCK_ACCOUNT;
15:35:46 742  
15:35:46 743  /****************************************************************/
15:35:46 744  
15:35:46 745  PROCEDURE RELEASE_LOCK (
15:35:46 746  	in_group_id IN NUMBER,
15:35:46 747  	in_lock_key IN VARCHAR2
15:35:46 748  ) AS
15:35:46 749  BEGIN
15:35:46 750  	PROCS_LOCKING_V17.RELEASE_LOCK(
15:35:46 751  	  in_group_id,
15:35:46 752  	  in_lock_key
15:35:46 753  	);
15:35:46 754  END RELEASE_LOCK;
15:35:46 755  
15:35:46 756  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
15:35:46 757  	in_invoice_id		    IN NUMBER,
15:35:46 758  	out_order_id		    OUT VARCHAR2,
15:35:46 759  	out_external_transaction_id OUT VARCHAR2
15:35:46 760  ) AS
15:35:46 761  BEGIN
15:35:46 762  	PROCS_INVOICE_V17.GET_PAYMENT_INFO_BY_INVOICE_ID(
15:35:46 763  	  in_invoice_id,
15:35:46 764  	  out_order_id,
15:35:46 765  	  out_external_transaction_id
15:35:46 766  	);
15:35:46 767  END GET_PAYMENT_INFO_BY_INVOICE_ID;
15:35:46 768  
15:35:46 769  /******************************************************************************/
15:35:46 770  
15:35:46 771  PROCEDURE GET_PAYPAL_BY_ID (
15:35:46 772  	in_paypal_id   IN  NUMBER,
15:35:46 773  	out_result_set OUT SYS_REFCURSOR
15:35:46 774  ) AS
15:35:46 775  BEGIN
15:35:46 776  	PROCS_FIN_INSTRUMENTS_V17.GET_PAYPAL_BY_ID(
15:35:46 777  	  in_paypal_id,
15:35:46 778  	  out_result_set
15:35:46 779  	);
15:35:46 780  END GET_PAYPAL_BY_ID;
15:35:46 781  
15:35:46 782  PROCEDURE GET_ATTEMPT_NUMBER (
15:35:46 783  /*
15:35:46 784  Throws exceptions:
15:35:46 785  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 786  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 787  */
15:35:46 788  	in_charge_id   in  number,
15:35:46 789  	out_attempt_count out number
15:35:46 790  ) as
15:35:46 791  begin
15:35:46 792  	PROCS_TRANSACTION_V17.GET_ATTEMPT_NUMBER(
15:35:46 793  	  in_charge_id,
15:35:46 794  	  out_attempt_count
15:35:46 795  	);
15:35:46 796  end get_attempt_number;
15:35:46 797  
15:35:46 798  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:35:46 799  	in_offer_chain_id	 IN NUMBER,
15:35:46 800  	in_action_name		 IN VARCHAR2,
15:35:46 801  	out_notification_type_id out number
15:35:46 802  ) as
15:35:46 803  begin
15:35:46 804  	PROCS_OFFER_CHAIN_V17.GET_NOTIFICATION_TYPE_ID(
15:35:46 805  	  in_offer_chain_id,
15:35:46 806  	  in_action_name,
15:35:46 807  	  out_notification_type_id
15:35:46 808  	);
15:35:46 809  end GET_NOTIFICATION_TYPE_ID;
15:35:46 810  
15:35:46 811  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
15:35:46 812  /*
15:35:46 813  Throws exceptions:
15:35:46 814  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 815  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 816  */
15:35:46 817  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:46 818  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
15:35:46 819  ) AS
15:35:46 820  BEGIN
15:35:46 821  PROCS_FIN_INSTRUMENTS_V17.GET_GC_ID_BY_PURCH_INVOICE_ID(
15:35:46 822  in_invoice_id,
15:35:46 823  out_gift_certificate_id
15:35:46 824  );
15:35:46 825  END GET_GC_ID_BY_PURCH_INVOICE_ID;
15:35:46 826  
15:35:46 827  END PUBLIC_PROCS_BILLING_V17;
15:35:46 828  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.05
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE LOCK_ACCOUNT (
15:35:46   4  	in_group_id    IN NUMBER,
15:35:46   5  	in_lock_key    IN VARCHAR2,
15:35:46   6  	in_seconds_num IN NUMBER,
15:35:46   7  	in_created_by  IN VARCHAR2,
15:35:46   8  	in_reason      IN VARCHAR2
15:35:46   9  ) AS
15:35:46  10  BEGIN
15:35:46  11  	PROCS_LOCKING_V17.LOCK_ACCOUNT(
15:35:46  12  	  in_group_id,
15:35:46  13  	  in_lock_key,
15:35:46  14  	  in_seconds_num,
15:35:46  15  	  in_created_by,
15:35:46  16  	  in_reason
15:35:46  17  	);
15:35:46  18  END LOCK_ACCOUNT;
15:35:46  19  
15:35:46  20  /******************************************************************************/
15:35:46  21  
15:35:46  22  PROCEDURE RELEASE_LOCK (
15:35:46  23  	in_group_id IN NUMBER,
15:35:46  24  	in_lock_key IN VARCHAR2
15:35:46  25  ) AS
15:35:46  26  BEGIN
15:35:46  27  	PROCS_LOCKING_V17.RELEASE_LOCK(
15:35:46  28  	  in_group_id,
15:35:46  29  	  in_lock_key
15:35:46  30  	);
15:35:46  31  END RELEASE_LOCK;
15:35:46  32  
15:35:46  33  END PUBLIC_PROCS_NOTIFICATION_V17;
15:35:46  34  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
15:35:46   4  	out_result_set OUT SYS_REFCURSOR
15:35:46   5  ) AS
15:35:46   6  BEGIN
15:35:46   7  	PROCS_GROUP_ACCOUNT_V17.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
15:35:46   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
15:35:46   9  
15:35:46  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
15:35:46  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
15:35:46  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
15:35:46  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:35:46  14  ) AS
15:35:46  15  BEGIN
15:35:46  16  	PROCS_GROUP_ACCOUNT_V17.UPDATE_SS_NEED_ENTITLEMENTS(
15:35:46  17  	  in_sub_share_id => in_sub_share_id,
15:35:46  18  	  in_need_entitlements => in_need_entitlements,
15:35:46  19  	  in_updater => in_updater
15:35:46  20  	);
15:35:46  21  END UPDATE_SS_NEED_ENTITLEMENTS;
15:35:46  22  
15:35:46  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:35:46  24  /*
15:35:46  25  Throws exceptions:
15:35:46  26  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46  27  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  28  */
15:35:46  29  	  in_offer_chain_id IN	 NUMBER,
15:35:46  30  	  out_result_set    OUT  SYS_REFCURSOR
15:35:46  31  ) AS
15:35:46  32  BEGIN
15:35:46  33  	PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_BY_ID (
15:35:46  34  	  in_offer_chain_id => in_offer_chain_id,
15:35:46  35  	  out_result_set => out_result_set
15:35:46  36  	);
15:35:46  37  END GET_OFFER_CHAIN_BY_ID;
15:35:46  38  
15:35:46  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:35:46  40  /*
15:35:46  41  Throws exceptions (codes):
15:35:46  42  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46  43  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  44  */
15:35:46  45  	in_offer_chain_id IN NUMBER,
15:35:46  46  	in_meta_data_name IN VARCHAR2,
15:35:46  47  	out_result_set	  OUT SYS_REFCURSOR
15:35:46  48  )AS
15:35:46  49  BEGIN
15:35:46  50  	PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_META_DATA(
15:35:46  51  	  in_offer_chain_id,
15:35:46  52  	  in_meta_data_name,
15:35:46  53  	  out_result_set
15:35:46  54  	);
15:35:46  55  END GET_OFFER_CHAIN_META_DATA;
15:35:46  56  
15:35:46  57  PROCEDURE GET_ENDING_LICENSES (
15:35:46  58  /*
15:35:46  59  Throws exceptions:
15:35:46  60  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  61  */
15:35:46  62  	in_hours_number IN NUMBER,
15:35:46  63  	out_result_set OUT SYS_REFCURSOR
15:35:46  64  ) AS
15:35:46  65  BEGIN
15:35:46  66  	PROCS_LICENSE_V17.GET_ENDING_LICENSES(in_hours_number,out_result_set);
15:35:46  67  END GET_ENDING_LICENSES;
15:35:46  68  
15:35:46  69  PROCEDURE GET_ENDING_LICENSES_CC (
15:35:46  70  /*
15:35:46  71  Throws exceptions:
15:35:46  72  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  73  */
15:35:46  74  	in_hours_number IN NUMBER,
15:35:46  75  	out_result_set OUT SYS_REFCURSOR,
15:35:46  76  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:46  77  ) AS
15:35:46  78  BEGIN
15:35:46  79  	PROCS_LICENSE_V17.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
15:35:46  80  END GET_ENDING_LICENSES_CC;
15:35:46  81  
15:35:46  82  /*******************************************************/
15:35:46  83  
15:35:46  84  PROCEDURE GET_RECURRING_OFFER (
15:35:46  85  /*
15:35:46  86  Throws exceptions:
15:35:46  87  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  88  */
15:35:46  89  	in_license_id  IN NUMBER,
15:35:46  90  	out_result_set OUT SYS_REFCURSOR
15:35:46  91  ) AS
15:35:46  92  BEGIN
15:35:46  93  	PROCS_LICENSE_V17.GET_RECURRING_OFFER (
15:35:46  94  	  in_license_id,
15:35:46  95  	  out_result_set
15:35:46  96  	);
15:35:46  97  END GET_RECURRING_OFFER;
15:35:46  98  
15:35:46  99  /********************************************************/
15:35:46 100  
15:35:46 101  PROCEDURE GET_NEXT_OFFER (
15:35:46 102  /*
15:35:46 103  Throws exceptions:
15:35:46 104  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 105  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:46 106  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 107  */
15:35:46 108  	in_license_id  IN NUMBER,
15:35:46 109  	out_result_set OUT SYS_REFCURSOR
15:35:46 110  ) AS
15:35:46 111  BEGIN
15:35:46 112  	PROCS_LICENSE_V17.GET_NEXT_OFFER (
15:35:46 113  	  in_license_id,
15:35:46 114  	  out_result_set
15:35:46 115  	);
15:35:46 116  END GET_NEXT_OFFER;
15:35:46 117  
15:35:46 118  /*********************************************************/
15:35:46 119  
15:35:46 120  PROCEDURE UPDATE_LICENSE_STATUS(
15:35:46 121  /*
15:35:46 122  Throws exceptions:
15:35:46 123  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 124  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 125  */
15:35:46 126  	  in_license_id     IN NUMBER,
15:35:46 127  	  in_license_status IN NUMBER,
15:35:46 128  	  in_updated_by     IN VARCHAR2
15:35:46 129  ) AS
15:35:46 130  BEGIN
15:35:46 131  	PROCS_LICENSE_V17.UPDATE_LICENSE_STATUS (
15:35:46 132  	  in_license_id,
15:35:46 133  	  in_license_status,
15:35:46 134  	  in_updated_by
15:35:46 135  	);
15:35:46 136  END UPDATE_LICENSE_STATUS;
15:35:46 137  
15:35:46 138  /**********************************************************/
15:35:46 139  
15:35:46 140  PROCEDURE UPDATE_INVOICE_STATUS (
15:35:46 141  /*
15:35:46 142  Throws exceptions:
15:35:46 143  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 144  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 145  */
15:35:46 146  	in_invoice_id		       IN NUMBER,
15:35:46 147  	in_invoice_status_id	       IN NUMBER,
15:35:46 148  	in_updated_by		       IN VARCHAR2
15:35:46 149  ) AS
15:35:46 150  BEGIN
15:35:46 151  	PROCS_INVOICE_V17.UPDATE_INVOICE_STATUS(
15:35:46 152  	  in_invoice_id,
15:35:46 153  	  in_invoice_status_id,
15:35:46 154  	  in_updated_by
15:35:46 155  	);
15:35:46 156  END UPDATE_INVOICE_STATUS;
15:35:46 157  
15:35:46 158  /***********************************************************/
15:35:46 159  
15:35:46 160  PROCEDURE CREATE_LICENSE(
15:35:46 161  /*
15:35:46 162  Throws exceptions:
15:35:46 163  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 164  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 165  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:35:46 166  */
15:35:46 167  	in_status_id		    IN NUMBER,
15:35:46 168  	in_needs_entitlements	    IN NUMBER,
15:35:46 169  	in_start_date		    IN DATE,
15:35:46 170  	in_end_date		    IN DATE,
15:35:46 171  	in_offer_id		    IN NUMBER,
15:35:46 172  	in_subscription_id	    IN NUMBER,
15:35:46 173  	in_invoice_id		    IN NUMBER,
15:35:46 174  	in_created_by		    IN VARCHAR2,
15:35:46 175  	in_is_extension 	    IN NUMBER,
15:35:46 176  	in_current_offer_index	    IN NUMBER,
15:35:46 177  	in_current_offer_recurr_num IN NUMBER,
15:35:46 178  	out_license_id		    OUT NUMBER
15:35:46 179  ) AS
15:35:46 180  BEGIN
15:35:46 181  	PROCS_LICENSE_V17.CREATE_LICENSE (
15:35:46 182  	  in_status_id,
15:35:46 183  	  in_needs_entitlements,
15:35:46 184  	  in_start_date,
15:35:46 185  	  in_end_date,
15:35:46 186  	  in_offer_id,
15:35:46 187  	  in_subscription_id,
15:35:46 188  	  in_invoice_id,
15:35:46 189  	  in_created_by,
15:35:46 190  	  in_is_extension,
15:35:46 191  	  in_current_offer_index,
15:35:46 192  	  in_current_offer_recurr_num,
15:35:46 193  	  out_license_id
15:35:46 194  	);
15:35:46 195  END CREATE_LICENSE;
15:35:46 196  
15:35:46 197  /******************************************************/
15:35:46 198  
15:35:46 199  PROCEDURE CREATE_INVOICE(
15:35:46 200  /*
15:35:46 201  Throws exceptions:
15:35:46 202  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 203  */
15:35:46 204  	  in_invoice_status IN NUMBER,
15:35:46 205  	  in_created_by     IN VARCHAR2,
15:35:46 206  	  in_tax_exempt_id  IN VARCHAR2,
15:35:46 207  	  out_invoice_id    OUT NUMBER
15:35:46 208  ) AS
15:35:46 209  BEGIN
15:35:46 210  	PROCS_INVOICE_V17.CREATE_INVOICE (
15:35:46 211  	  in_invoice_status,
15:35:46 212  	  in_created_by,
15:35:46 213  	  in_tax_exempt_id,
15:35:46 214  	  out_invoice_id
15:35:46 215  	);
15:35:46 216  END CREATE_INVOICE;
15:35:46 217  
15:35:46 218  /*******************************************************/
15:35:46 219  
15:35:46 220  PROCEDURE CREATE_CHARGE(
15:35:46 221  /*
15:35:46 222  Throws exceptions:
15:35:46 223  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 224  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 225  */
15:35:46 226  	in_invoice_id	      IN NUMBER,
15:35:46 227  	in_transaction_id     IN NUMBER,
15:35:46 228  	in_instrument_type_id IN NUMBER,
15:35:46 229  	in_instrument_id      IN NUMBER,
15:35:46 230  	in_charge_amount      IN NUMBER,
15:35:46 231  	in_created_by	      IN VARCHAR2,
15:35:46 232  	in_charge_status_id   IN NUMBER,
15:35:46 233  	out_charge_id	      OUT NUMBER
15:35:46 234  ) AS
15:35:46 235  BEGIN
15:35:46 236  	PROCS_CHARGE_V17.CREATE_CHARGE (
15:35:46 237  	  in_invoice_id,
15:35:46 238  	  in_transaction_id,
15:35:46 239  	  in_instrument_type_id,
15:35:46 240  	  in_instrument_id,
15:35:46 241  	  in_charge_amount,
15:35:46 242  	  in_created_by,
15:35:46 243  	  in_charge_status_id,
15:35:46 244  	  out_charge_id
15:35:46 245  	);
15:35:46 246  END CREATE_CHARGE;
15:35:46 247  
15:35:46 248  /**********************************************************/
15:35:46 249  
15:35:46 250  PROCEDURE HAS_FUTURE_LICENSE (
15:35:46 251  /*
15:35:46 252  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 253  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 254  --
15:35:46 255  RETURNS:
15:35:46 256  1 - if has,
15:35:46 257  0 - else
15:35:46 258  */
15:35:46 259  	in_license_id IN NUMBER,
15:35:46 260  	out_result	   OUT NUMBER
15:35:46 261  ) AS
15:35:46 262  BEGIN
15:35:46 263  	PROCS_SUBSCRIPTION_V17.HAS_FUTURE_LICENSE (
15:35:46 264  	  in_license_id,
15:35:46 265  	  out_result
15:35:46 266  	);
15:35:46 267  END HAS_FUTURE_LICENSE;
15:35:46 268  
15:35:46 269  /***********************************************************/
15:35:46 270  
15:35:46 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
15:35:46 272  /*
15:35:46 273  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 274  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 275  */
15:35:46 276  	in_license_id IN NUMBER,
15:35:46 277  	out_group_id  OUT NUMBER
15:35:46 278  ) AS
15:35:46 279  BEGIN
15:35:46 280  	PROCS_LICENSE_V17.GET_GROUP_ID_BY_LICENSE_ID (
15:35:46 281  	  in_license_id,
15:35:46 282  	  out_group_id
15:35:46 283  	);
15:35:46 284  END GET_GROUP_ID_BY_LICENSE_ID;
15:35:46 285  
15:35:46 286  /**********************************************************/
15:35:46 287  
15:35:46 288  PROCEDURE GET_OFFER_PRODUCTS (
15:35:46 289  /*
15:35:46 290  Throws exceptions (codes):
15:35:46 291  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 292  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 293  */
15:35:46 294  	in_offer_id    IN NUMBER,
15:35:46 295  	out_result_set OUT SYS_REFCURSOR
15:35:46 296  ) AS
15:35:46 297  BEGIN
15:35:46 298  	PROCS_OFFER_CHAIN_V17.GET_OFFER_PRODUCTS (
15:35:46 299  	  in_offer_id,
15:35:46 300  	  out_result_set
15:35:46 301  	);
15:35:46 302  END GET_OFFER_PRODUCTS;
15:35:46 303  
15:35:46 304  /***********************************************************/
15:35:46 305  
15:35:46 306  PROCEDURE CREATE_TRANSACTION (
15:35:46 307  /*
15:35:46 308  Throws exceptions:
15:35:46 309  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 310  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 311  */
15:35:46 312  	in_transaction_id  IN NUMBER,
15:35:46 313  	in_status_id	   IN NUMBER,
15:35:46 314  	in_amount	   IN NUMBER,
15:35:46 315  	in_created_by	   IN VARCHAR2,
15:35:46 316  	in_order_id	   IN VARCHAR2,
15:35:46 317  	out_transaction_id OUT NUMBER
15:35:46 318  ) AS
15:35:46 319  BEGIN
15:35:46 320  	PROCS_TRANSACTION_V17.CREATE_TRANSACTION(
15:35:46 321  	  in_transaction_id,
15:35:46 322  	  in_status_id,
15:35:46 323  	  in_amount,
15:35:46 324  	  in_created_by,
15:35:46 325  	  in_order_id,
15:35:46 326  	  GLOBAL_CONSTANTS_V17.FALSE, -- is_refund should be false in renewal
15:35:46 327  	  out_transaction_id
15:35:46 328  	);
15:35:46 329  END CREATE_TRANSACTION;
15:35:46 330  
15:35:46 331  /************************************************************/
15:35:46 332  
15:35:46 333  PROCEDURE ADD_LINE_ITEMS(
15:35:46 334  /*
15:35:46 335  Throws exceptions:
15:35:46 336  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 337  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 338  */
15:35:46 339  	in_invoice_id IN NUMBER,
15:35:46 340  	in_offer_id   IN NUMBER,
15:35:46 341  	in_created_by IN VARCHAR2
15:35:46 342  ) AS
15:35:46 343  BEGIN
15:35:46 344  	PROCS_LINE_ITEMS_V17.ADD_LINE_ITEMS(
15:35:46 345  	  in_invoice_id,
15:35:46 346  	  in_offer_id,
15:35:46 347  	  in_created_by
15:35:46 348  	);
15:35:46 349  END ADD_LINE_ITEMS;
15:35:46 350  
15:35:46 351  /************************************************************/
15:35:46 352  
15:35:46 353  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:35:46 354  /*
15:35:46 355  Throws exceptions:
15:35:46 356  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 357  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 358  */
15:35:46 359  	in_invoice_id IN  NUMBER,
15:35:46 360  	out_amount    OUT NUMBER
15:35:46 361  ) AS
15:35:46 362  BEGIN
15:35:46 363  	PROCS_INVOICE_V17.CALCULATE_INVOICE_AMOUNT (
15:35:46 364  	  in_invoice_id,
15:35:46 365  	  out_amount
15:35:46 366  	);
15:35:46 367  END CALCULATE_INVOICE_AMOUNT;
15:35:46 368  
15:35:46 369  /*************************************************************/
15:35:46 370  
15:35:46 371  PROCEDURE RESERVE_TRANSACTION_ID (
15:35:46 372  /*
15:35:46 373  Throws exceptions:
15:35:46 374  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 375  */
15:35:46 376  	out_transaction_id OUT NUMBER
15:35:46 377  ) AS
15:35:46 378  BEGIN
15:35:46 379  	PROCS_TRANSACTION_V17.RESERVE_TRANSACTION_ID (
15:35:46 380  	  out_transaction_id
15:35:46 381  	);
15:35:46 382  END RESERVE_TRANSACTION_ID;
15:35:46 383  
15:35:46 384  /***************************************************************/
15:35:46 385  
15:35:46 386  PROCEDURE P_GET_NEXT_OFFER_INDEX (
15:35:46 387  	in_offer_chain_id	     IN NUMBER,
15:35:46 388  	in_offer_chain_current_index IN NUMBER,
15:35:46 389  	out_next_offer_index	     OUT NUMBER
15:35:46 390  ) AS
15:35:46 391  BEGIN
15:35:46 392  	PROCS_OFFER_CHAIN_V17.P_GET_NEXT_OFFER_INDEX(
15:35:46 393  	  in_offer_chain_id,
15:35:46 394  	  in_offer_chain_current_index,
15:35:46 395  	  out_next_offer_index
15:35:46 396  	);
15:35:46 397  END P_GET_NEXT_OFFER_INDEX;
15:35:46 398  
15:35:46 399  /***************************************************************/
15:35:46 400  
15:35:46 401  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
15:35:46 402  	in_license_id		     IN NUMBER,
15:35:46 403  	in_offer_chain_current_index IN NUMBER,
15:35:46 404  	out_next_offer_index	     OUT NUMBER
15:35:46 405  ) AS
15:35:46 406  BEGIN
15:35:46 407  	PROCS_OFFER_CHAIN_V17.GET_NEXT_OFFER_INDEX_BY_LCNS(
15:35:46 408  	  in_license_id,
15:35:46 409  	  in_offer_chain_current_index,
15:35:46 410  	  out_next_offer_index
15:35:46 411  	);
15:35:46 412  END GET_NEXT_OFFER_INDEX_BY_LCNS;
15:35:46 413  
15:35:46 414  /******************************************************************/
15:35:46 415  
15:35:46 416  PROCEDURE GET_SUBSCRIPTION_INFO (
15:35:46 417  /*
15:35:46 418  Throws exceptions:
15:35:46 419  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 420  */
15:35:46 421  	  in_subscription_id IN  NUMBER,
15:35:46 422  	  out_result_set      OUT SYS_REFCURSOR
15:35:46 423  ) AS
15:35:46 424  BEGIN
15:35:46 425  	PROCS_SUBSCRIPTION_V17.GET_SUBSCRIPTION_INFO(
15:35:46 426  	  in_subscription_id,
15:35:46 427  	  out_result_set
15:35:46 428  	);
15:35:46 429  END GET_SUBSCRIPTION_INFO;
15:35:46 430  
15:35:46 431  /*******************************************************************/
15:35:46 432  
15:35:46 433  PROCEDURE CLOSE_SUBSCRIPTION (
15:35:46 434  	in_subscription_id IN NUMBER,
15:35:46 435  	in_updated_by	   IN VARCHAR2
15:35:46 436  ) AS
15:35:46 437  BEGIN
15:35:46 438  	PROCS_SUBSCRIPTION_V17.CLOSE_SUBSCRIPTION(
15:35:46 439  	  in_subscription_id,
15:35:46 440  	  in_updated_by
15:35:46 441  	);
15:35:46 442  END CLOSE_SUBSCRIPTION;
15:35:46 443  
15:35:46 444  /*******************************************************************/
15:35:46 445  
15:35:46 446  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
15:35:46 447  	out_result_set OUT SYS_REFCURSOR
15:35:46 448  ) AS
15:35:46 449  BEGIN
15:35:46 450  	PROCS_LICENSE_V17.GET_NEED_ENTITLEMENTS_LICENSES(
15:35:46 451  	  out_result_set
15:35:46 452  	);
15:35:46 453  END GET_NEED_ENTITLEMENTS_LICENSES;
15:35:46 454  
15:35:46 455  /*******************************************************************/
15:35:46 456  
15:35:46 457  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
15:35:46 458  	in_license_id	      IN NUMBER,
15:35:46 459  	in_needs_entitlements IN NUMBER,
15:35:46 460  	in_updated_by	      IN VARCHAR2
15:35:46 461  ) AS
15:35:46 462  BEGIN
15:35:46 463  	PROCS_LICENSE_V17.UPDATE_NEED_ENTITLEMENTS_FLAG(
15:35:46 464  	  in_license_id,
15:35:46 465  	  in_needs_entitlements,
15:35:46 466  	  in_updated_by
15:35:46 467  	);
15:35:46 468  END UPDATE_NEED_ENTITLEMENTS_FLAG;
15:35:46 469  
15:35:46 470  /*******************************************************/
15:35:46 471  
15:35:46 472  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
15:35:46 473  /*
15:35:46 474  Throws exceptions (codes):
15:35:46 475  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 476  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 477  */
15:35:46 478  	in_offer_id    IN NUMBER,
15:35:46 479  	out_result_set OUT SYS_REFCURSOR
15:35:46 480  ) AS
15:35:46 481  BEGIN
15:35:46 482  	PROCS_OFFER_CHAIN_V17.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
15:35:46 483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
15:35:46 484  
15:35:46 485  /*******************************************************/
15:35:46 486  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
15:35:46 487  /*
15:35:46 488  Throws exceptions (codes):
15:35:46 489  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 490  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 491  */
15:35:46 492  	in_product_offering_id IN NUMBER,
15:35:46 493  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
15:35:46 494  	out_result_set	       OUT SYS_REFCURSOR
15:35:46 495  ) AS
15:35:46 496  BEGIN
15:35:46 497  	PROCS_OFFER_CHAIN_V17.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
15:35:46 498  END GET_PRODUCT_OFFERING_META_DATA;
15:35:46 499  
15:35:46 500  /*******************************************************/
15:35:46 501  
15:35:46 502  PROCEDURE LOCK_ACCOUNT (
15:35:46 503  	in_group_id    IN NUMBER,
15:35:46 504  	in_lock_key    IN VARCHAR2,
15:35:46 505  	in_seconds_num IN NUMBER,
15:35:46 506  	in_created_by  IN VARCHAR2,
15:35:46 507  	in_reason      IN VARCHAR2
15:35:46 508  ) AS
15:35:46 509  BEGIN
15:35:46 510  	PROCS_LOCKING_V17.LOCK_ACCOUNT(
15:35:46 511  	  in_group_id,
15:35:46 512  	  in_lock_key,
15:35:46 513  	  in_seconds_num,
15:35:46 514  	  in_created_by,
15:35:46 515  	  in_reason
15:35:46 516  	);
15:35:46 517  END LOCK_ACCOUNT;
15:35:46 518  
15:35:46 519  /****************************************************************/
15:35:46 520  
15:35:46 521  PROCEDURE RELEASE_LOCK (
15:35:46 522  	in_group_id IN NUMBER,
15:35:46 523  	in_lock_key IN VARCHAR2
15:35:46 524  ) AS
15:35:46 525  BEGIN
15:35:46 526  	PROCS_LOCKING_V17.RELEASE_LOCK(
15:35:46 527  	  in_group_id,
15:35:46 528  	  in_lock_key
15:35:46 529  	);
15:35:46 530  END RELEASE_LOCK;
15:35:46 531  
15:35:46 532  /******************************************************************************/
15:35:46 533  
15:35:46 534  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:35:46 535  	in_invoice_id  IN NUMBER,
15:35:46 536  	out_result_set OUT SYS_REFCURSOR
15:35:46 537  ) AS
15:35:46 538  BEGIN
15:35:46 539  	PROCS_INVOICE_V17.GET_INVOICE_LINE_ITEMS(
15:35:46 540  	  in_invoice_id,
15:35:46 541  	  out_result_set
15:35:46 542  	);
15:35:46 543  END GET_INVOICE_LINE_ITEMS;
15:35:46 544  
15:35:46 545  /******************************************************************************/
15:35:46 546  
15:35:46 547  PROCEDURE ADD_TAX (
15:35:46 548  	in_tax_type_id		 IN NUMBER,
15:35:46 549  	in_calculated_amount	 IN NUMBER,
15:35:46 550  	in_created_by		 IN VARCHAR2,
15:35:46 551  	in_line_item_id 	 IN NUMBER,
15:35:46 552  	in_effective_rate	 IN VARCHAR2,
15:35:46 553  	in_taxable_amount	 IN NUMBER,
15:35:46 554  	in_tax_rule_id		 IN NUMBER,
15:35:46 555  	in_jurisdiction_level_id IN NUMBER,
15:35:46 556  	in_jurisdiction_name	 IN VARCHAR2,
15:35:46 557  	in_jurisdiction_id	 IN VARCHAR2,
15:35:46 558  	in_ext_tax_type 	 IN VARCHAR2,
15:35:46 559  	in_ext_result		 IN VARCHAR2,
15:35:46 560  	in_imposition_type	 IN VARCHAR2,
15:35:46 561  	in_imposition		 IN VARCHAR2
15:35:46 562  ) AS
15:35:46 563  BEGIN
15:35:46 564  	PROCS_TAXES_V17.ADD_TAX(
15:35:46 565  	  in_tax_type_id,
15:35:46 566  	  in_calculated_amount,
15:35:46 567  	  in_created_by,
15:35:46 568  	  in_line_item_id,
15:35:46 569  	  in_effective_rate,
15:35:46 570  	  in_taxable_amount,
15:35:46 571  	  in_tax_rule_id,
15:35:46 572  	  in_jurisdiction_level_id,
15:35:46 573  	  in_jurisdiction_name,
15:35:46 574  	  in_jurisdiction_id,
15:35:46 575  	  in_ext_tax_type,
15:35:46 576  	  in_ext_result,
15:35:46 577  	  in_imposition_type,
15:35:46 578  	  in_imposition
15:35:46 579  	);
15:35:46 580  END ADD_TAX;
15:35:46 581  
15:35:46 582  /******************************************************************************/
15:35:46 583  
15:35:46 584  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:35:46 585  	in_credit_card_id IN  NUMBER,
15:35:46 586  	out_result_set	  OUT SYS_REFCURSOR
15:35:46 587  ) AS
15:35:46 588  BEGIN
15:35:46 589  	PROCS_FIN_INSTRUMENTS_V17.GET_CREDIT_CARD_BY_ID(
15:35:46 590  	  in_credit_card_id,
15:35:46 591  	  out_result_set
15:35:46 592  	);
15:35:46 593  END GET_CREDIT_CARD_BY_ID;
15:35:46 594  
15:35:46 595  /******************************************************************************/
15:35:46 596  
15:35:46 597  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
15:35:46 598  	in_line_item_id IN NUMBER,
15:35:46 599  	out_result_set	OUT SYS_REFCURSOR
15:35:46 600  ) AS
15:35:46 601  BEGIN
15:35:46 602  	PROCS_PRODUCT_V17.GET_PRD_OFFERING_BY_LINE_IT_ID(
15:35:46 603  	  in_line_item_id,
15:35:46 604  	  out_result_set
15:35:46 605  	);
15:35:46 606  END GET_PRD_OFFERING_BY_LINE_IT_ID;
15:35:46 607  
15:35:46 608  /******************************************************************************/
15:35:46 609  
15:35:46 610  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:35:46 611  /*
15:35:46 612  Throws exceptions:
15:35:46 613  APP_EXCEPTION_CODES_V17.NOT_FOUND,
15:35:46 614  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 615  */
15:35:46 616  	in_group_id IN NUMBER,
15:35:46 617  	out_account_id	OUT NUMBER
15:35:46 618  ) AS
15:35:46 619  BEGIN
15:35:46 620  	PROCS_ACCOUNT_V17.GET_ACCOUNT_ID_BY_GROUP_ID(
15:35:46 621  	  in_group_id,
15:35:46 622  	  out_account_id
15:35:46 623  	);
15:35:46 624  END GET_ACCOUNT_ID_BY_GROUP_ID;
15:35:46 625  
15:35:46 626  /******************************************************************************/
15:35:46 627  
15:35:46 628  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
15:35:46 629  /*
15:35:46 630  Throws exceptions:
15:35:46 631  APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46 632  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 633  */
15:35:46 634  	in_line_item_id IN  NUMBER,
15:35:46 635  	out_result_set	OUT SYS_REFCURSOR
15:35:46 636  ) AS
15:35:46 637  BEGIN
15:35:46 638  	PROCS_LINE_ITEMS_V17.GET_LINE_ITEM_DISCOUNTS(
15:35:46 639  	  in_line_item_id,
15:35:46 640  	  out_result_set
15:35:46 641  	);
15:35:46 642  END GET_LINE_ITEM_DISCOUNTS;
15:35:46 643  
15:35:46 644  /******************************************************************************/
15:35:46 645  
15:35:46 646  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
15:35:46 647  	in_line_item_id    IN NUMBER,
15:35:46 648  	in_amount	   IN NUMBER,
15:35:46 649  	in_discount_amount IN NUMBER,
15:35:46 650  	in_taxes_amount    IN NUMBER
15:35:46 651  ) AS
15:35:46 652  BEGIN
15:35:46 653  	PROCS_LINE_ITEMS_V17.UPDATE_LINE_ITEM_AMOUNT(
15:35:46 654  	  in_line_item_id,
15:35:46 655  	  in_amount,
15:35:46 656  	  in_discount_amount,
15:35:46 657  	  in_taxes_amount
15:35:46 658  	);
15:35:46 659  END UPDATE_LINE_ITEM_AMOUNT;
15:35:46 660  
15:35:46 661  /******************************************************************************/
15:35:46 662  
15:35:46 663  PROCEDURE GET_PAYPAL_BY_ID (
15:35:46 664  	in_paypal_id   IN  NUMBER,
15:35:46 665  	out_result_set OUT SYS_REFCURSOR
15:35:46 666  ) AS
15:35:46 667  BEGIN
15:35:46 668  	PROCS_FIN_INSTRUMENTS_V17.GET_PAYPAL_BY_ID(
15:35:46 669  	  in_paypal_id,
15:35:46 670  	  out_result_set
15:35:46 671  	);
15:35:46 672  END GET_PAYPAL_BY_ID;
15:35:46 673  
15:35:46 674  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:35:46 675  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:35:46 676  	out_result_set OUT SYS_REFCURSOR
15:35:46 677  ) AS
15:35:46 678  BEGIN
15:35:46 679  	PROCS_FIN_INSTRUMENTS_V17.GET_GC_BY_PURCH_INVOICE_ID (
15:35:46 680  	  in_invoice_id,
15:35:46 681  	  out_result_set
15:35:46 682  	);
15:35:46 683  END GET_GC_BY_PURCH_INVOICE_ID;
15:35:46 684  
15:35:46 685  PROCEDURE GET_LICENSE_BY_ID (
15:35:46 686  	in_license_id  IN NUMBER,
15:35:46 687  	out_result_set OUT SYS_REFCURSOR
15:35:46 688  ) AS
15:35:46 689  BEGIN
15:35:46 690  	PROCS_LICENSE_V17.GET_LICENSE_BY_ID (
15:35:46 691  	  in_license_id,
15:35:46 692  	  out_result_set
15:35:46 693  	);
15:35:46 694  END GET_LICENSE_BY_ID;
15:35:46 695  
15:35:46 696  /******************************************************************************/
15:35:46 697  
15:35:46 698  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:35:46 699  	in_offer_chain_id	 IN NUMBER,
15:35:46 700  	in_action_name		 IN VARCHAR2,
15:35:46 701  	out_notification_type_id OUT NUMBER
15:35:46 702  ) AS
15:35:46 703  BEGIN
15:35:46 704  	PROCS_OFFER_CHAIN_V17.GET_NOTIFICATION_TYPE_ID(
15:35:46 705  	  in_offer_chain_id,
15:35:46 706  	  in_action_name,
15:35:46 707  	  out_notification_type_id
15:35:46 708  	);
15:35:46 709  END GET_NOTIFICATION_TYPE_ID;
15:35:46 710  
15:35:46 711  /******************************************************************************/
15:35:46 712  
15:35:46 713  PROCEDURE GET_ALL_OCH_META_DATA (
15:35:46 714  	in_offer_chain_id IN NUMBER,
15:35:46 715  	out_result_set	  OUT SYS_REFCURSOR
15:35:46 716  ) AS
15:35:46 717  BEGIN
15:35:46 718  	PROCS_OFFER_CHAIN_V17.GET_ALL_META_DATA (
15:35:46 719  	  in_offer_chain_id,
15:35:46 720  	  out_result_set
15:35:46 721  	);
15:35:46 722  END GET_ALL_OCH_META_DATA;
15:35:46 723  
15:35:46 724  /******************************************************************************/
15:35:46 725  
15:35:46 726  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
15:35:46 727  /*
15:35:46 728  APP_EXCEPTION_CODES_V17.INVALID_PARAMETER
15:35:46 729  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46 730  */
15:35:46 731  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
15:35:46 732  	out_result_set	     OUT SYS_REFCURSOR
15:35:46 733  ) AS
15:35:46 734  BEGIN
15:35:46 735  	PROCS_SUBSCRIPTION_V17.GET_SUBSCRIPTIONS_META_DATA(
15:35:46 736  	  in_subscriptions_ids,
15:35:46 737  	  out_result_set
15:35:46 738  	);
15:35:46 739  END GET_SUBSCRIPTIONS_META_DATA;
15:35:46 740  
15:35:46 741  PROCEDURE GET_UNREDEEMED_GCS (
15:35:46 742  	out_result_set		OUT SYS_REFCURSOR,
15:35:46 743  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:35:46 744  	in_num_rows		IN NUMBER DEFAULT 10000,
15:35:46 745  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:35:46 746  ) AS
15:35:46 747  BEGIN
15:35:46 748  	PROCS_FIN_INSTRUMENTS_V17.GET_UNREDEEMED_GCS(
15:35:46 749  	  out_result_set => out_result_set,
15:35:46 750  	  in_hours_number => in_hours_number,
15:35:46 751  	  in_num_rows => in_num_rows,
15:35:46 752  	  in_process_name => in_process_name
15:35:46 753  	);
15:35:46 754  END GET_UNREDEEMED_GCS;
15:35:46 755  
15:35:46 756  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
15:35:46 757  	in_offer_chain_id IN NUMBER,
15:35:46 758  	in_meta_data_name IN VARCHAR2,
15:35:46 759  	out_value	  OUT VARCHAR2
15:35:46 760  ) AS
15:35:46 761  BEGIN
15:35:46 762  	PROCS_OFFER_CHAIN_V17.GET_OFFER_CHAIN_MD_VALUE(
15:35:46 763  	  in_offer_chain_id => in_offer_chain_id,
15:35:46 764  	  in_meta_data_name => in_meta_data_name,
15:35:46 765  	  out_value => out_value
15:35:46 766  	);
15:35:46 767  END GET_OFFER_CHAIN_MD_VALUE;
15:35:46 768  
15:35:46 769  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
15:35:46 770  	out_result_set	    OUT SYS_REFCURSOR
15:35:46 771  )
15:35:46 772  AS
15:35:46 773  BEGIN
15:35:46 774  	PROCS_SUBSCRIPTION_V17.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
15:35:46 775  	  out_result_set => out_result_set
15:35:46 776  	);
15:35:46 777  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
15:35:46 778  
15:35:46 779  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
15:35:46 780  	out_result_set	    OUT SYS_REFCURSOR
15:35:46 781  )
15:35:46 782  AS
15:35:46 783  BEGIN
15:35:46 784  	PROCS_SUBSCRIPTION_V17.GET_ACT_SUBS_W_PP_CHARGEBACKS(
15:35:46 785  	  out_result_set => out_result_set
15:35:46 786  	);
15:35:46 787  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
15:35:46 788  
15:35:46 789  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
15:35:46 790  	out_result_set	    OUT SYS_REFCURSOR
15:35:46 791  )
15:35:46 792  AS
15:35:46 793  BEGIN
15:35:46 794  	PROCS_SUBSCRIPTION_V17.GET_ACT_SUBS_W_AMEX_CB(
15:35:46 795  	  out_result_set => out_result_set
15:35:46 796  	);
15:35:46 797  END GET_ACT_SUBS_W_AMEX_CB;
15:35:46 798  
15:35:46 799  END PUBLIC_PROCS_RENEWAL_V17;
15:35:46 800  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.04
15:35:46 SQL> 
15:35:46 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_CLIENT_V17" AS
15:35:46   2  
15:35:46   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
15:35:46   4  /*
15:35:46   5  Throws exceptions:
15:35:46   6  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46   7  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46   8  */
15:35:46   9  	in_notification_type_name IN VARCHAR2,
15:35:46  10  	out_notification_type_id  OUT NUMBER
15:35:46  11  ) AS
15:35:46  12  BEGIN
15:35:46  13  	PROCS_NOTIFICATION_V17.GET_NOTIFICATION_TYPE_BY_NAME (
15:35:46  14  	  in_notification_type_name,
15:35:46  15  	  out_notification_type_id
15:35:46  16  	);
15:35:46  17  END;
15:35:46  18  
15:35:46  19  /*****************************************************************/
15:35:46  20  
15:35:46  21  PROCEDURE ADD_NOTIFICATION (
15:35:46  22  /*
15:35:46  23  Throws exceptions:
15:35:46  24  CORE_OWNER.APP_EXCEPTION_CODES_V17.NOT_FOUND
15:35:46  25  CORE_OWNER.APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:35:46  26  */
15:35:46  27  	in_sender_account_id	 IN NUMBER DEFAULT 0,
15:35:46  28  	in_recipient_group_id	 IN NUMBER,
15:35:46  29  	in_notification_type_id  IN NUMBER,
15:35:46  30  	in_date_to_notify	 IN DATE,
15:35:46  31  	in_email_template_params IN CLOB
15:35:46  32  ) AS
15:35:46  33  BEGIN
15:35:46  34  	PROCS_NOTIFICATION_V17.ADD_NOTIFICATION (
15:35:46  35  	  in_sender_account_id,
15:35:46  36  	  in_recipient_group_id,
15:35:46  37  	  in_notification_type_id,
15:35:46  38  	  in_date_to_notify,
15:35:46  39  	  in_email_template_params
15:35:46  40  	);
15:35:46  41  END;
15:35:46  42  
15:35:46  43  END PUBLIC_PROCS_CLIENT_V17;
15:35:46  44  .
15:35:46 SQL> /

Package body created.

Elapsed: 00:00:00.01
15:35:46 SQL> 
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_ADX_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_TEST_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> 
15:35:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V17 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V17 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V17 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V17 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> 
15:35:46 SQL> 
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V17 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V17 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V17 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:46 SQL> 
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.02
15:35:46 SQL> 
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V17 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V17 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:46 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V17 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V17 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V17 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V17 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> 
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V17 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V17 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V17 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V17 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> 
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V17 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> 
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V17 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> 
15:35:47 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V17 to ops_aaa_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V17 to ops_aaa_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V17 to ops_aaa_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> 
15:35:47 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V17 to ops_payment_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V17 to ops_payment_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V17 to ops_payment_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> 
15:35:47 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V17 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V17 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V17 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> 
15:35:47 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V17 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V17 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> 
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V17 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> 
15:35:47 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> 
15:35:47 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> 
15:35:47 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> 
15:35:47 SQL> grant select, insert, update, delete ON CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:47 SQL> grant select ON CORE_OWNER.NOTTID_SEQ to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:47 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
15:35:47 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECPR@rac01.prd.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: nytd_oracledba@nytimes.com
Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.prd.ewr1.nytimes.com
        SID: ECPR
        Schema: core_owner
        Migration: 20.5-release-1.11.1-all
        SVN Revision: 10443
        Duration: 6 sec.
        Service Request: https://jira.em.nytimes.com/browse/ORA-348