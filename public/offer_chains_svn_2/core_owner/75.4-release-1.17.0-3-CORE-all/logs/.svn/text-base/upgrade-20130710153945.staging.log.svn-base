15:39:57 SQL> @/dbbackups/ECST/migrations/core_owner/75.4-release-1.17.0-3-CORE-all/upgrade.sql
15:39:57 SQL> prompt Compiling header for notification_statuses.sql
Compiling header for notification_statuses.sql
15:39:57 SQL> 
15:39:57 SQL> .
15:39:57 SQL> /
SP2-0103: Nothing in SQL buffer to run.
15:39:57 SQL> 
15:39:57 SQL> prompt Compiling header for procs_account_cru.sql
Compiling header for procs_account_cru.sql
15:39:57 SQL> --------------------------------------------------------------------------------
15:39:57 SQL> -- DDL for package PROCS_ACCOUNT_CRU
15:39:57 SQL> --------------------------------------------------------------------------------
15:39:57 SQL> 
15:39:57 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V23" AS
15:39:57   2  
15:39:57   3  PROCEDURE CREATE_ACCOUNT (
15:39:57   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
15:39:57   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
15:39:57   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
15:39:57   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
15:39:57   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
15:39:57   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
15:39:57  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:39:57  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
15:39:57  12  );
15:39:57  13  
15:39:57  14  PROCEDURE UPDATE_ACCOUNT (
15:39:57  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
15:39:57  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
15:39:57  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
15:39:57  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
15:39:57  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
15:39:57  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:39:57  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
15:39:57  22  );
15:39:57  23  
15:39:57  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
15:39:57  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
15:39:57  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
15:39:57  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
15:39:57  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
15:39:57  29  );
15:39:57  30  
15:39:57  31  PROCEDURE READ_ACCOUNT (
15:39:57  32  	in_account_id  IN ACCOUNT.ID%TYPE,
15:39:57  33  	out_result_set OUT SYS_REFCURSOR
15:39:57  34  );
15:39:57  35  
15:39:57  36  PROCEDURE CREATE_ACCOUNT_NOTE (
15:39:57  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
15:39:57  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
15:39:57  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
15:39:57  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
15:39:57  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
15:39:57  42  );
15:39:57  43  
15:39:57  44  END PROCS_ACCOUNT_CRU_V23;
15:39:57  45  .
15:39:57 SQL> /

Package created.

Elapsed: 00:00:00.05
15:39:57 SQL> 
15:39:57 SQL> prompt Compiling header for procs_account.sql
Compiling header for procs_account.sql
15:39:57 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V23" AS
15:39:57   2  
15:39:57   3  FUNCTION GET_GRACE_START_DATE(
15:39:57   4  	in_subscription_id IN NUMBER
15:39:57   5  ) RETURN DATE;
15:39:57   6  
15:39:57   7  FUNCTION GET_GRACE_END_DATE(
15:39:57   8  	in_subscription_id IN NUMBER
15:39:57   9  ) RETURN DATE;
15:39:57  10  
15:39:57  11  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
15:39:57  12  	in_group_id    IN  NUMBER,
15:39:57  13  	out_result_set OUT SYS_REFCURSOR
15:39:57  14  );
15:39:57  15  
15:39:57  16  PROCEDURE ANNOTATE_ACCOUNT (
15:39:57  17  	in_group_id   IN  NUMBER,
15:39:57  18  	in_agent_id   IN  NUMBER,
15:39:57  19  	in_note       IN  VARCHAR2,
15:39:57  20  	in_created_by IN  VARCHAR2
15:39:57  21  );
15:39:57  22  
15:39:57  23  PROCEDURE ASSERT_ACCOUNT_EXISTS (
15:39:57  24  	in_group_id IN	NUMBER,
15:39:57  25  	out_exists  OUT NUMBER
15:39:57  26  );
15:39:57  27  
15:39:57  28  PROCEDURE DISABLE_ACCOUNT (
15:39:57  29  	in_group_id   IN NUMBER,
15:39:57  30  	in_updated_by IN VARCHAR2,
15:39:57  31  	in_note       IN VARCHAR2,
15:39:57  32  	in_agent_id   IN NUMBER
15:39:57  33  );
15:39:57  34  
15:39:57  35  PROCEDURE CREATE_ACTIVE_ACCOUNT(
15:39:57  36  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
15:39:57  37  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
15:39:57  38  	out_new_account_id OUT ACCOUNT.ID%TYPE
15:39:57  39  );
15:39:57  40  
15:39:57  41  PROCEDURE REACTIVATE_ACCOUNT (
15:39:57  42  	in_group_id	  IN NUMBER,
15:39:57  43  	in_updated_by	  IN VARCHAR2,
15:39:57  44  	in_note 	  IN VARCHAR2,
15:39:57  45  	in_agent_id	  IN NUMBER
15:39:57  46  );
15:39:57  47  
15:39:57  48  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
15:39:57  49  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
15:39:57  50  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V23.CREDIT_CARD_ACTIVE,
15:39:57  51  	out_result_set OUT SYS_REFCURSOR
15:39:57  52  );
15:39:57  53  
15:39:57  54  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
15:39:57  55  	in_group_id	  IN NUMBER,
15:39:57  56  	out_result_gc_set OUT SYS_REFCURSOR,
15:39:57  57  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.TRUE
15:39:57  58  );
15:39:57  59  
15:39:57  60  PROCEDURE GET_ACCOUNT_INFO  (
15:39:57  61  	  in_group_id	    IN	NUMBER,
15:39:57  62  	  out_account_info  OUT SYS_REFCURSOR
15:39:57  63  );
15:39:57  64  
15:39:57  65  PROCEDURE GET_ACCOUNT_NOTES (
15:39:57  66  	  in_group_id	 IN  NUMBER,
15:39:57  67  	  out_result_set OUT SYS_REFCURSOR
15:39:57  68  );
15:39:57  69  
15:39:57  70  PROCEDURE GET_ACCOUNT_PAYPALS(
15:39:57  71  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
15:39:57  72  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V23.PAYPAL_ACTIVE,
15:39:57  73  	out_result_set OUT SYS_REFCURSOR
15:39:57  74  );
15:39:57  75  
15:39:57  76  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
15:39:57  77  	  in_group_id	 IN  NUMBER,
15:39:57  78  	  in_start_date  IN DATE,
15:39:57  79  	  in_end_date	 IN DATE,
15:39:57  80  	  in_status	 IN NUMBER,
15:39:57  81  	  in_group_account_type IN VARCHAR2,
15:39:57  82  	  out_result_set  OUT SYS_REFCURSOR
15:39:57  83  );
15:39:57  84  
15:39:57  85  PROCEDURE FREEZE_ACCOUNT (
15:39:57  86  	in_group_id   IN NUMBER,
15:39:57  87  	in_updated_by IN VARCHAR2,
15:39:57  88  	in_note       IN VARCHAR2,
15:39:57  89  	in_agent_id   IN NUMBER
15:39:57  90  );
15:39:57  91  
15:39:57  92  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
15:39:57  93  	in_group_id	   IN  NUMBER,
15:39:57  94  	in_subscription_id IN NUMBER,
15:39:57  95  	out_result_set	   OUT SYS_REFCURSOR
15:39:57  96  );
15:39:57  97  
15:39:57  98  PROCEDURE GET_ACCOUNT_GC_INVOICES (
15:39:57  99  	in_group_id    IN  NUMBER,
15:39:57 100  	out_result_set OUT SYS_REFCURSOR
15:39:57 101  );
15:39:57 102  
15:39:57 103  PROCEDURE GET_GC_INVOICE (
15:39:57 104  	in_group_id    IN  NUMBER,
15:39:57 105  	in_gc_code     IN  VARCHAR2,
15:39:57 106  	out_result_set OUT SYS_REFCURSOR
15:39:57 107  );
15:39:57 108  
15:39:57 109  PROCEDURE GET_ACCOUNT_PRODUCTS (
15:39:57 110  	in_group_id    IN  NUMBER,
15:39:57 111  	out_result_set OUT SYS_REFCURSOR
15:39:57 112  );
15:39:57 113  
15:39:57 114  PROCEDURE UPDATE_ACCOUNT_STATUS (
15:39:57 115  	in_account_id	     IN ACCOUNT.ID%TYPE,
15:39:57 116  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
15:39:57 117  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
15:39:57 118  );
15:39:57 119  
15:39:57 120  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
15:39:57 121  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
15:39:57 122  	out_licenses_num OUT NUMBER
15:39:57 123  );
15:39:57 124  
15:39:57 125  PROCEDURE SET_TAX_EXEMPT (
15:39:57 126  	in_group_id  IN NUMBER,
15:39:57 127  	in_exempt_id IN VARCHAR2
15:39:57 128  );
15:39:57 129  
15:39:57 130  PROCEDURE IS_TAX_EXEMPT (
15:39:57 131  	in_group_id	  IN NUMBER,
15:39:57 132  	out_is_tax_exempt OUT NUMBER
15:39:57 133  );
15:39:57 134  
15:39:57 135  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
15:39:57 136  	in_account_id IN NUMBER,
15:39:57 137  	out_group_id  OUT NUMBER
15:39:57 138  );
15:39:57 139  
15:39:57 140  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:39:57 141  	in_group_id IN NUMBER,
15:39:57 142  	out_account_id	OUT NUMBER
15:39:57 143  );
15:39:57 144  
15:39:57 145  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
15:39:57 146  	in_invoice_id IN NUMBER,
15:39:57 147  	out_group_ids OUT SYS_REFCURSOR
15:39:57 148  );
15:39:57 149  
15:39:57 150  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
15:39:57 151  	in_group_id	  IN NUMBER,
15:39:57 152  	out_tax_exempt_id OUT VARCHAR2
15:39:57 153  );
15:39:57 154  
15:39:57 155  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
15:39:57 156  	in_group_id    IN NUMBER,
15:39:57 157  	out_result_set OUT SYS_REFCURSOR
15:39:57 158  );
15:39:57 159  
15:39:57 160  PROCEDURE GET_USR_ALL_SBSCR_IDS (
15:39:57 161  	in_group_id	   IN NUMBER,
15:39:57 162  	out_result_set	   OUT SYS_REFCURSOR
15:39:57 163  );
15:39:57 164  
15:39:57 165  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
15:39:57 166  	in_group_id	   IN NUMBER,
15:39:57 167  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:39:57 168  	out_result_set	   OUT SYS_REFCURSOR
15:39:57 169  );
15:39:57 170  
15:39:57 171  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
15:39:57 172  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:39:57 173  	in_expiration_date IN DATE,
15:39:57 174  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
15:39:57 175  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
15:39:57 176  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
15:39:57 177  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
15:39:57 178  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
15:39:57 179  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
15:39:57 180  	in_lower_bound IN NUMBER DEFAULT 1,
15:39:57 181  	in_upper_bound IN NUMBER DEFAULT 11,
15:39:57 182  	out_result_set OUT SYS_REFCURSOR
15:39:57 183  );
15:39:57 184  
15:39:57 185  END PROCS_ACCOUNT_V23;
15:39:57 186  .
15:39:57 SQL> /

Package created.

Elapsed: 00:00:00.13
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_address_cru.sql
Compiling header for procs_address_cru.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_ADDRESS_CRU
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE CREATE_ADDRESS(
15:39:58   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
15:39:58   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
15:39:58   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:39:58   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:39:58   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:39:58   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:39:58  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:39:58  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:39:58  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
15:39:58  13  );
15:39:58  14  
15:39:58  15  PROCEDURE UPDATE_ADDRESS(
15:39:58  16  	in_address_id	      IN ADDRESS.ID%TYPE,
15:39:58  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:39:58  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:39:58  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:39:58  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:39:58  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:39:58  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:39:58  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
15:39:58  24  );
15:39:58  25  
15:39:58  26  END PROCS_ADDRESS_CRU_V23;
15:39:58  27  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.05
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_address.sql
Compiling header for procs_address.sql
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE CREATE_ADDRESS(
15:39:58   4  /*
15:39:58   5  Throws exceptions:
15:39:58   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58   7  */
15:39:58   8  	  out_address_id	OUT NUMBER,
15:39:58   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:39:58  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:39:58  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:39:58  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:39:58  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:39:58  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:39:58  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
15:39:58  16  );
15:39:58  17  
15:39:58  18  PROCEDURE UPDATE_ADDRESS(
15:39:58  19  /*
15:39:58  20  Throws exceptions:
15:39:58  21  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  22  */
15:39:58  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
15:39:58  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:39:58  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:39:58  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:39:58  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:39:58  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:39:58  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:39:58  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
15:39:58  31  );
15:39:58  32  
15:39:58  33  PROCEDURE GET_ADDRESS (
15:39:58  34  /*
15:39:58  35  Throws exceptions:
15:39:58  36  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  37  */
15:39:58  38  	  in_id 		IN ADDRESS.ID%TYPE,
15:39:58  39  	  out_result_set	OUT SYS_REFCURSOR
15:39:58  40  );
15:39:58  41  
15:39:58  42  END PROCS_ADDRESS_V23;
15:39:58  43  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.03
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_adjustments.sql
Compiling header for procs_adjustments.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_ADJUSTMENTS
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
15:39:58   4  	in_invoice_id		  IN NUMBER,
15:39:58   5  	in_adjustment_reason	  IN VARCHAR2,
15:39:58   6  	in_is_credit		  IN NUMBER,
15:39:58   7  	in_charge_id		  IN NUMBER,
15:39:58   8  	in_business_date	  IN DATE,
15:39:58   9  	in_created_by		  IN VARCHAR2,
15:39:58  10  	out_invoice_adjustment_id OUT NUMBER
15:39:58  11  );
15:39:58  12  
15:39:58  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
15:39:58  14  	in_invoice_id		  IN NUMBER,
15:39:58  15  	in_original_charge_id	  IN NUMBER,
15:39:58  16  	in_charge_id		  IN NUMBER,
15:39:58  17  	in_updated_by		  IN VARCHAR2
15:39:58  18  );
15:39:58  19  
15:39:58  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
15:39:58  21  	in_line_item_id 	    IN NUMBER,
15:39:58  22  	in_invoice_adjustment_id    IN NUMBER,
15:39:58  23  	in_amount		    IN NUMBER,
15:39:58  24  	in_tax			    IN NUMBER,
15:39:58  25  	in_discount		    IN NUMBER,
15:39:58  26  	in_created_by		    IN VARCHAR2,
15:39:58  27  	out_line_item_adjustment_id OUT NUMBER
15:39:58  28  );
15:39:58  29  
15:39:58  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
15:39:58  31  	in_tax_id		   IN NUMBER,
15:39:58  32  	in_line_item_adjustment_id IN NUMBER,
15:39:58  33  	in_amount		   IN NUMBER,
15:39:58  34  	in_created_by		   IN VARCHAR2,
15:39:58  35  	out_tax_adjustment_id	   OUT NUMBER
15:39:58  36  );
15:39:58  37  
15:39:58  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
15:39:58  39  	in_discount_id		   NUMBER,
15:39:58  40  	in_line_item_id 	   NUMBER,
15:39:58  41  	in_line_item_adjustment_id IN NUMBER,
15:39:58  42  	in_amount		   IN NUMBER,
15:39:58  43  	in_created_by		   IN VARCHAR2,
15:39:58  44  	out_discount_li_id	   OUT NUMBER
15:39:58  45  );
15:39:58  46  
15:39:58  47  END PROCS_ADJUSTMENTS_V23;
15:39:58  48  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.03
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_adx.sql
Compiling header for procs_adx.sql
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE GET_SUB_ADX_INFO (
15:39:58   4  /*
15:39:58   5  Throws exceptions:
15:39:58   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58   7  */
15:39:58   8  	out_result_set	    OUT SYS_REFCURSOR,
15:39:58   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
15:39:58  10  );
15:39:58  11  
15:39:58  12  END PROCS_ADX_V23;
15:39:58  13  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.02
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_amazon_cru.sql
Compiling header for procs_amazon_cru.sql
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE UPDATE_AMAZON_APPSTORE_RECEIPT(
15:39:58   4  	in_id		   IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:39:58   5  	in_updated_by	   IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE,
15:39:58   6  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE DEFAULT NULL,
15:39:58   7  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE DEFAULT NULL,
15:39:58   8  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE DEFAULT NULL,
15:39:58   9  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE DEFAULT NULL,
15:39:58  10  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
15:39:58  11  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE DEFAULT NULL,
15:39:58  12  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE DEFAULT NULL,
15:39:58  13  	in_last_check_date IN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE DEFAULT NULL
15:39:58  14  );
15:39:58  15  
15:39:58  16  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
15:39:58  17  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:39:58  18  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
15:39:58  19  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
15:39:58  20  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
15:39:58  21  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
15:39:58  22  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
15:39:58  23  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
15:39:58  24  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
15:39:58  25  );
15:39:58  26  
15:39:58  27  PROCEDURE CREATE_AMAZON_SUB(
15:39:58  28  	  out_id	      OUT NUMBER,
15:39:58  29  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
15:39:58  30  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
15:39:58  31  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
15:39:58  32  );
15:39:58  33  
15:39:58  34  END PROCS_AMAZON_CRU_V23;
15:39:58  35  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.09
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_amazon.sql
Compiling header for procs_amazon.sql
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE AASR_PURCHASE_TOKEN_USED(
15:39:58   4  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
15:39:58   5  	out_data	  OUT NUMBER
15:39:58   6  );
15:39:58   7  
15:39:58   8  PROCEDURE UPDATE_AASR_LAST_CHECK_DATE(
15:39:58   9  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:39:58  10  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
15:39:58  11  );
15:39:58  12  
15:39:58  13  PROCEDURE EXPIRED_AASR_SUB_IDS(
15:39:58  14  	out_data   OUT SYS_REFCURSOR
15:39:58  15  );
15:39:58  16  
15:39:58  17  PROCEDURE UPDATE_AASR_PURCHASE_TOKEN(
15:39:58  18  	in_id		  IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:39:58  19  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
15:39:58  20  	in_updated_by	  IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
15:39:58  21  );
15:39:58  22  
15:39:58  23  PROCEDURE UPDATE_AASR_END_DATE(
15:39:58  24  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:39:58  25  	in_end_date   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE,
15:39:58  26  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
15:39:58  27  );
15:39:58  28  
15:39:58  29  PROCEDURE AASR_RECEIPTS_WITH_ACTIVE_SUBS(
15:39:58  30  	out_data   OUT SYS_REFCURSOR,
15:39:58  31  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:39:58  32  );
15:39:58  33  
15:39:58  34  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
15:39:58  35  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:39:58  36  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
15:39:58  37  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
15:39:58  38  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
15:39:58  39  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
15:39:58  40  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
15:39:58  41  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
15:39:58  42  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
15:39:58  43  );
15:39:58  44  
15:39:58  45  PROCEDURE AMAZON_APPSTORE_RECEIPTS(
15:39:58  46  	in_user_id IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
15:39:58  47  	in_sku	   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
15:39:58  48  	out_data   OUT SYS_REFCURSOR
15:39:58  49  );
15:39:58  50  
15:39:58  51  PROCEDURE CREATE_AMAZON_SUB(
15:39:58  52  	  out_id	      OUT NUMBER,
15:39:58  53  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
15:39:58  54  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
15:39:58  55  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
15:39:58  56  );
15:39:58  57  
15:39:58  58  PROCEDURE GET_ACTIVE_SUB_IDS (
15:39:58  59  	out_result_set	    OUT SYS_REFCURSOR,
15:39:58  60  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
15:39:58  61  );
15:39:58  62  
15:39:58  63  PROCEDURE GET_ACTIVE_GROUP_IDS (
15:39:58  64  	out_result_set	    OUT SYS_REFCURSOR,
15:39:58  65  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
15:39:58  66  );
15:39:58  67  
15:39:58  68  END PROCS_AMAZON_V23;
15:39:58  69  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.08
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_charge_cru.sql
Compiling header for procs_charge_cru.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_CHARGE_CRU
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE CREATE_CHARGE(
15:39:58   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
15:39:58   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
15:39:58   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
15:39:58   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
15:39:58   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
15:39:58   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
15:39:58  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
15:39:58  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:39:58  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
15:39:58  13  );
15:39:58  14  
15:39:58  15  PROCEDURE UPDATE_CHARGE(
15:39:58  16  	in_charge_id	      IN CHARGE.ID%TYPE,
15:39:58  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:39:58  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
15:39:58  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
15:39:58  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
15:39:58  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
15:39:58  22  );
15:39:58  23  
15:39:58  24  END PROCS_CHARGE_CRU_V23;
15:39:58  25  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.02
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_charge.sql
Compiling header for procs_charge.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_CHARGE
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE CREATE_CHARGE(
15:39:58   4  /*
15:39:58   5  Throws exceptions:
15:39:58   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58   8  */
15:39:58   9  	in_invoice_id	      IN NUMBER,
15:39:58  10  	in_transaction_id     IN NUMBER,
15:39:58  11  	in_instrument_type_id IN NUMBER,
15:39:58  12  	in_instrument_id      IN NUMBER,
15:39:58  13  	in_charge_amount      IN NUMBER,
15:39:58  14  	in_created_by	      IN VARCHAR2,
15:39:58  15  	in_charge_status_id   IN NUMBER,
15:39:58  16  	out_charge_id	      OUT NUMBER
15:39:58  17  );
15:39:58  18  
15:39:58  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
15:39:58  20  /*
15:39:58  21  Throws exceptions:
15:39:58  22  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  23  */
15:39:58  24  	out_result_set	    OUT SYS_REFCURSOR,
15:39:58  25  	in_row_number	    IN NUMBER DEFAULT NULL
15:39:58  26  );
15:39:58  27  
15:39:58  28  PROCEDURE GET_UNPROCESSED_CHARGES (
15:39:58  29  /*
15:39:58  30  Throws exceptions:
15:39:58  31  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  32  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  33  */
15:39:58  34  	in_invoice_id  IN NUMBER,
15:39:58  35  	out_result_set OUT SYS_REFCURSOR
15:39:58  36  );
15:39:58  37  
15:39:58  38  PROCEDURE GET_PROCESSED_CHARGES (
15:39:58  39  /*
15:39:58  40  Throws exceptions:
15:39:58  41  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  42  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  43  */
15:39:58  44  	in_invoice_id  IN NUMBER,
15:39:58  45  	out_result_set OUT SYS_REFCURSOR
15:39:58  46  );
15:39:58  47  
15:39:58  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
15:39:58  49  /*
15:39:58  50  Throws exceptions:
15:39:58  51  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  52  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  53  */
15:39:58  54  	in_charge_id	    IN NUMBER,
15:39:58  55  	out_subscription_id OUT NUMBER
15:39:58  56  );
15:39:58  57  
15:39:58  58  PROCEDURE UPDATE_CHARGE_STATUS (
15:39:58  59  /*
15:39:58  60  Throws exceptions:
15:39:58  61  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  62  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  63  */
15:39:58  64  	in_charge_id	    IN CHARGE.ID%TYPE,
15:39:58  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:39:58  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
15:39:58  67  );
15:39:58  68  
15:39:58  69  FUNCTION IS_CHARGE_COLLECTED (
15:39:58  70  /*
15:39:58  71  Throws:
15:39:58  72  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  73  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  74  Returns:
15:39:58  75  GLOBAL_CONST.TRUE if transaction collected,
15:39:58  76  GLOBAL_CONST.FALSE else
15:39:58  77  */
15:39:58  78  	in_charge_id IN NUMBER
15:39:58  79  ) RETURN NUMBER;
15:39:58  80  
15:39:58  81  PROCEDURE GET_COLLECTED_CHARGES (
15:39:58  82  /*
15:39:58  83  Throws exceptions:
15:39:58  84  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  85  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  86  */
15:39:58  87  	in_invoice_id  IN NUMBER,
15:39:58  88  	out_result_set OUT SYS_REFCURSOR
15:39:58  89  );
15:39:58  90  
15:39:58  91  END PROCS_CHARGE_V23;
15:39:58  92  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.09
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_cupy.sql
Compiling header for procs_cupy.sql
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
15:39:58   2  
15:39:58   3  	PROCEDURE POPULATE_REQUEST_INFO(
15:39:58   4  	  in_hours_prior    IN	NUMBER,
15:39:58   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
15:39:58   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
15:39:58   7  	);
15:39:58   8  
15:39:58   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
15:39:58  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:39:58  11  	  in_start	     IN NUMBER,
15:39:58  12  	  in_end	     IN NUMBER,
15:39:58  13  	  out_result_set     OUT SYS_REFCURSOR
15:39:58  14  	);
15:39:58  15  
15:39:58  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
15:39:58  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
15:39:58  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
15:39:58  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
15:39:58  20  	);
15:39:58  21  
15:39:58  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
15:39:58  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:39:58  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:39:58  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
15:39:58  26  	);
15:39:58  27  
15:39:58  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
15:39:58  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
15:39:58  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
15:39:58  31  	  out_request_files   OUT SYS_REFCURSOR
15:39:58  32  	);
15:39:58  33  
15:39:58  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
15:39:58  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:39:58  36  	  out_count OUT NUMBER
15:39:58  37  	);
15:39:58  38  
15:39:58  39  	PROCEDURE GET_CREDIT_CARD_INFO (
15:39:58  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
15:39:58  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
15:39:58  42  	  out_card_info        OUT SYS_REFCURSOR
15:39:58  43  	);
15:39:58  44  
15:39:58  45  	PROCEDURE UPDATE_CC_UPDATE(
15:39:58  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
15:39:58  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:39:58  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
15:39:58  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
15:39:58  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
15:39:58  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:39:58  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
15:39:58  53  	);
15:39:58  54  
15:39:58  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
15:39:58  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
15:39:58  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:39:58  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
15:39:58  59  	);
15:39:58  60  
15:39:58  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
15:39:58  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
15:39:58  63  	  out_request_file     OUT SYS_REFCURSOR
15:39:58  64  	);
15:39:58  65  
15:39:58  66  	PROCEDURE SUSPEND_CREDIT_CARD (
15:39:58  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
15:39:58  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
15:39:58  69  	);
15:39:58  70  
15:39:58  71  	PROCEDURE UPDATE_CREDIT_CARD (
15:39:58  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
15:39:58  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:39:58  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
15:39:58  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
15:39:58  76  	);
15:39:58  77  
15:39:58  78  	PROCEDURE COMPLETABLE_REQUESTS (
15:39:58  79  	  out_request_files OUT SYS_REFCURSOR
15:39:58  80  	);
15:39:58  81  
15:39:58  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
15:39:58  83  	  in_max_hours_before_report IN  NUMBER,
15:39:58  84  	  out_request_files	     OUT SYS_REFCURSOR
15:39:58  85  	);
15:39:58  86  
15:39:58  87  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
15:39:58  88  	  in_account_id IN NUMBER,
15:39:58  89  	  out_group_id	OUT NUMBER
15:39:58  90  	);
15:39:58  91  
15:39:58  92  	PROCEDURE GET_LICENSE_BY_ID (
15:39:58  93  	  in_license_id  IN NUMBER,
15:39:58  94  	  out_result_set OUT SYS_REFCURSOR
15:39:58  95  	);
15:39:58  96  
15:39:58  97  END PROCS_CUPY;
15:39:58  98  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.07
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_entitlement.sql
Compiling header for procs_entitlement.sql
15:39:58 SQL> CREATE OR REPLACE
15:39:58   2  PACKAGE PROCS_ENTITLEMENT_V23 AS
15:39:58   3  
15:39:58   4  PROCEDURE GET_ALL_ENTITLEMENTS(
15:39:58   5  	in_group_id IN NUMBER,
15:39:58   6  	out_result_set OUT SYS_REFCURSOR);
15:39:58   7  
15:39:58   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
15:39:58   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:39:58  10  	out_result_set OUT SYS_REFCURSOR);
15:39:58  11  
15:39:58  12  END PROCS_ENTITLEMENT_V23;
15:39:58  13  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.02
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_fin_instruments_cru.sql
Compiling header for procs_fin_instruments_cru.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE CREATE_CREDIT_CARD(
15:39:58   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
15:39:58   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
15:39:58   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
15:39:58   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
15:39:58   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
15:39:58   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
15:39:58  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
15:39:58  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
15:39:58  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
15:39:58  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
15:39:58  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
15:39:58  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:39:58  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
15:39:58  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
15:39:58  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
15:39:58  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
15:39:58  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
15:39:58  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
15:39:58  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
15:39:58  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
15:39:58  24  );
15:39:58  25  
15:39:58  26  PROCEDURE UPDATE_CREDIT_CARD(
15:39:58  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
15:39:58  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:39:58  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
15:39:58  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:39:58  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
15:39:58  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
15:39:58  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
15:39:58  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
15:39:58  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
15:39:58  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
15:39:58  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:39:58  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
15:39:58  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
15:39:58  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
15:39:58  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
15:39:58  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
15:39:58  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
15:39:58  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
15:39:58  45  );
15:39:58  46  
15:39:58  47  PROCEDURE CREATE_PAYPAL(
15:39:58  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
15:39:58  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
15:39:58  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
15:39:58  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:39:58  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
15:39:58  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
15:39:58  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
15:39:58  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
15:39:58  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
15:39:58  57  	in_state			IN PAYPAL.STATE%TYPE,
15:39:58  58  	in_city 			IN PAYPAL.CITY%TYPE,
15:39:58  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
15:39:58  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
15:39:58  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
15:39:58  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
15:39:58  63  );
15:39:58  64  
15:39:58  65  PROCEDURE UPDATE_PAYPAL(
15:39:58  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
15:39:58  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:39:58  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
15:39:58  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
15:39:58  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
15:39:58  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:39:58  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:39:58  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
15:39:58  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
15:39:58  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
15:39:58  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
15:39:58  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:39:58  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
15:39:58  79  );
15:39:58  80  
15:39:58  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
15:39:58  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
15:39:58  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
15:39:58  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
15:39:58  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:39:58  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
15:39:58  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:39:58  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
15:39:58  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
15:39:58  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
15:39:58  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
15:39:58  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
15:39:58  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
15:39:58  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
15:39:58  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
15:39:58  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
15:39:58  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
15:39:58  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
15:39:58  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
15:39:58 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
15:39:58 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
15:39:58 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL,
15:39:58 103  	in_campaign		      IN GC_CAMPAIGN_AND_REF.CAMPAIGN%TYPE DEFAULT NULL,
15:39:58 104  	in_reference_code	      IN GC_CAMPAIGN_AND_REF.REFERENCE_CODE%TYPE DEFAULT NULL
15:39:58 105  );
15:39:58 106  
15:39:58 107  PROCEDURE UPDATE_GIFT_CERTIFICATE(
15:39:58 108  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
15:39:58 109  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:39:58 110  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
15:39:58 111  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
15:39:58 112  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
15:39:58 113  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
15:39:58 114  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
15:39:58 115  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
15:39:58 116  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
15:39:58 117  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
15:39:58 118  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
15:39:58 119  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
15:39:58 120  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
15:39:58 121  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
15:39:58 122  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
15:39:58 123  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
15:39:58 124  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
15:39:58 125  );
15:39:58 126  
15:39:58 127  END PROCS_FIN_INSTRUMENTS_CRU_V23;
15:39:58 128  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.13
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_fin_instruments.sql
Compiling header for procs_fin_instruments.sql
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
15:39:58   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:39:58   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
15:39:58   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
15:39:58   7  );
15:39:58   8  
15:39:58   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
15:39:58  10  	in_invoice_id		     IN NUMBER,
15:39:58  11  	out_is_invoice_for_redeem_gc OUT NUMBER
15:39:58  12  );
15:39:58  13  
15:39:58  14  PROCEDURE GET_UNREDEEMED_GCS (
15:39:58  15  	out_result_set		OUT SYS_REFCURSOR,
15:39:58  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:39:58  17  	in_num_rows		IN NUMBER DEFAULT 10000,
15:39:58  18  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:39:58  19  );
15:39:58  20  
15:39:58  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
15:39:58  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:39:58  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
15:39:58  24  );
15:39:58  25  
15:39:58  26  PROCEDURE ADD_CREDIT_CARD (
15:39:58  27  	in_group_id		  IN NUMBER,
15:39:58  28  	in_updated_by		  IN VARCHAR2,
15:39:58  29  	in_instrument_name	  IN VARCHAR2,
15:39:58  30  	in_card_holder_name	  IN VARCHAR2,
15:39:58  31  	in_street_address	  IN VARCHAR2,
15:39:58  32  	in_street_address2	  IN VARCHAR2,
15:39:58  33  	in_state		  IN VARCHAR2,
15:39:58  34  	in_city 		  IN VARCHAR2,
15:39:58  35  	in_postal_code		  IN VARCHAR2,
15:39:58  36  	in_country		  IN CHAR,
15:39:58  37  	in_last_four_cc 	  IN VARCHAR2,
15:39:58  38  	in_expiration_date	  IN DATE,
15:39:58  39  	in_credit_card_type_id	  IN NUMBER,
15:39:58  40  	in_token		  IN VARCHAR2,
15:39:58  41  	in_chase_profile_id	  IN VARCHAR2,
15:39:58  42  	in_credit_card_status_id  IN NUMBER,
15:39:58  43  	in_private_first_name	  IN VARCHAR2,
15:39:58  44  	in_private_last_name	  IN VARCHAR2,
15:39:58  45  	out_credit_card_id	  OUT NUMBER
15:39:58  46  );
15:39:58  47  
15:39:58  48  /******************************************************************************/
15:39:58  49  
15:39:58  50  PROCEDURE ADD_PAYPAL (
15:39:58  51  	in_group_id			IN NUMBER,
15:39:58  52  	in_instrument_name		IN VARCHAR2,
15:39:58  53  	in_private_email_address	IN VARCHAR2,
15:39:58  54  	in_created_by			IN VARCHAR2,
15:39:58  55  	in_paypal_status_id		IN NUMBER,
15:39:58  56  	in_paypal_prvt_street_address	IN VARCHAR2,
15:39:58  57  	in_paypal_prvt_street_address2	IN VARCHAR2,
15:39:58  58  	in_state			IN VARCHAR2,
15:39:58  59  	in_city 			IN VARCHAR2,
15:39:58  60  	in_postal_code			IN VARCHAR2,
15:39:58  61  	in_country			IN CHAR,
15:39:58  62  	in_expiration_date		IN DATE,
15:39:58  63  	in_secret_token 		IN VARCHAR2,
15:39:58  64  	out_paypal_id			OUT NUMBER
15:39:58  65  );
15:39:58  66  
15:39:58  67  /********************************************/
15:39:58  68  
15:39:58  69  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
15:39:58  70  	in_code       IN VARCHAR,
15:39:58  71  	out_result_set OUT SYS_REFCURSOR
15:39:58  72  );
15:39:58  73  
15:39:58  74  /********************************************/
15:39:58  75  
15:39:58  76  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
15:39:58  77  	in_gift_certificate_id IN NUMBER,
15:39:58  78  	out_result_set	       OUT SYS_REFCURSOR
15:39:58  79  );
15:39:58  80  
15:39:58  81  /********************************************/
15:39:58  82  
15:39:58  83  PROCEDURE DISABLE_CREDIT_CARD (
15:39:58  84  	in_credit_card_id IN NUMBER,
15:39:58  85  	in_updated_by	  IN VARCHAR2
15:39:58  86  );
15:39:58  87  
15:39:58  88  /********************************************/
15:39:58  89  
15:39:58  90  PROCEDURE DISABLE_PAYPAL (
15:39:58  91  	in_paypal_id  IN NUMBER,
15:39:58  92  	in_updated_by IN VARCHAR2
15:39:58  93  );
15:39:58  94  
15:39:58  95  /********************************************/
15:39:58  96  
15:39:58  97  PROCEDURE UPDATE_CREDIT_CARD (
15:39:58  98  	in_credit_card_id	  IN NUMBER,
15:39:58  99  	in_updated_by		  IN VARCHAR2,
15:39:58 100  	in_instrument_name	  IN VARCHAR2,
15:39:58 101  	in_is_default		  IN NUMBER
15:39:58 102  );
15:39:58 103  
15:39:58 104  /********************************************/
15:39:58 105  
15:39:58 106  PROCEDURE START_GC_PURCHASING (
15:39:58 107  	in_group_id		  IN NUMBER,
15:39:58 108  	in_offer_chain_id	  IN VARCHAR2,
15:39:58 109  	in_gift_certificate_code  IN  VARCHAR2,
15:39:58 110  	in_created_by		  IN  VARCHAR2,
15:39:58 111  	in_recipient_name	  IN  VARCHAR2,
15:39:58 112  	in_recipient_email	  IN  VARCHAR2,
15:39:58 113  	in_recipient_address_id   IN NUMBER,
15:39:58 114  	in_recipient_notify_date  IN DATE,
15:39:58 115  	in_sender_name		  IN VARCHAR2,
15:39:58 116  	in_sender_email 	  IN VARCHAR2,
15:39:58 117  	in_gift_message 	  IN  VARCHAR2,
15:39:58 118  	in_expiration_date	  IN DATE,
15:39:58 119  	in_campaign		  IN VARCHAR2,
15:39:58 120  	in_reference_code	  IN VARCHAR2,
15:39:58 121  	out_gift_certificate_id   OUT NUMBER,
15:39:58 122  	out_invoice_id		  OUT NUMBER
15:39:58 123  );
15:39:58 124  
15:39:58 125  PROCEDURE FINALIZE_GC_PURCHASING (
15:39:58 126  	in_invoice_id	      IN NUMBER,
15:39:58 127  	in_created_by	      IN VARCHAR2,
15:39:58 128  	in_instrument_id      IN NUMBER,
15:39:58 129  	in_instrument_type_id IN NUMBER,
15:39:58 130  	in_order_id	      IN VARCHAR2,
15:39:58 131  	in_transaction_id     IN NUMBER,
15:39:58 132  	out_charge_amount     OUT NUMBER
15:39:58 133  );
15:39:58 134  
15:39:58 135  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
15:39:58 136  	in_group_id	  IN NUMBER,
15:39:58 137  	in_offer_chain_id IN VARCHAR2,
15:39:58 138  	in_gift_certificate_code  IN  VARCHAR2,
15:39:58 139  	in_created_by IN  VARCHAR2,
15:39:58 140  	in_recipient_name IN  VARCHAR2,
15:39:58 141  	in_recipient_email IN  VARCHAR2,
15:39:58 142  	in_sender_name IN VARCHAR2,
15:39:58 143  	in_sender_email IN VARCHAR2,
15:39:58 144  	in_gift_message IN  VARCHAR2,
15:39:58 145  	in_instrument_id  IN  NUMBER,
15:39:58 146  	in_instrument_type_id IN NUMBER,
15:39:58 147  	in_expiration_date IN DATE,
15:39:58 148  	in_order_id IN VARCHAR2,
15:39:58 149  	in_transaction_id IN NUMBER
15:39:58 150  );
15:39:58 151  
15:39:58 152  /*********************************************/
15:39:58 153  
15:39:58 154  PROCEDURE REDEEM_GIFT_CERTIFICATE (
15:39:58 155  	in_group_id			IN NUMBER,
15:39:58 156  	in_gift_certificate_code	IN VARCHAR2,
15:39:58 157  	in_created_by			IN VARCHAR2,
15:39:58 158  	in_redeemer_address_id		IN NUMBER,
15:39:58 159  	in_fin_instrument_id		IN NUMBER,
15:39:58 160  	in_fin_instrument_type_id	IN NUMBER,
15:39:58 161  	in_redemption_offer_chain_id	IN NUMBER,
15:39:58 162  	out_subscription_id		OUT NUMBER,
15:39:58 163  	out_license_id			OUT NUMBER
15:39:58 164  );
15:39:58 165  
15:39:58 166  /********************************************/
15:39:58 167  
15:39:58 168  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
15:39:58 169  	in_group_id	       IN  NUMBER,
15:39:58 170  	out_instrument_type_id OUT NUMBER,
15:39:58 171  	out_instrument_id      OUT NUMBER
15:39:58 172  );
15:39:58 173  
15:39:58 174  /************************************************/
15:39:58 175  
15:39:58 176  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
15:39:58 177  	in_group_id	      IN NUMBER,
15:39:58 178  	in_instrument_type_id IN NUMBER,
15:39:58 179  	in_instrument_id      IN NUMBER,
15:39:58 180  	in_updated_by	      IN VARCHAR2
15:39:58 181  );
15:39:58 182  
15:39:58 183  /***************************************************/
15:39:58 184  
15:39:58 185  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
15:39:58 186  	in_group_id	      IN NUMBER
15:39:58 187  );
15:39:58 188  
15:39:58 189  /****************************************************/
15:39:58 190  
15:39:58 191  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:39:58 192  	in_credit_card_id IN  NUMBER,
15:39:58 193  	out_result_set	  OUT SYS_REFCURSOR
15:39:58 194  );
15:39:58 195  
15:39:58 196  /****************************************************/
15:39:58 197  
15:39:58 198  PROCEDURE GET_PAYPAL_BY_ID (
15:39:58 199  	in_paypal_id   IN  NUMBER,
15:39:58 200  	out_result_set OUT SYS_REFCURSOR
15:39:58 201  );
15:39:58 202  
15:39:58 203  /***********************************************/
15:39:58 204  
15:39:58 205  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
15:39:58 206  	in_credit_card_id NUMBER
15:39:58 207  ) RETURN NUMBER;
15:39:58 208  
15:39:58 209  /*************************************************/
15:39:58 210  
15:39:58 211  PROCEDURE GET_PURCHASED_GCERTIFICATES (
15:39:58 212  	in_group_id    IN NUMBER,
15:39:58 213  	out_result_set OUT SYS_REFCURSOR
15:39:58 214  );
15:39:58 215  
15:39:58 216  /*************************************************/
15:39:58 217  
15:39:58 218  -- isGiftCertificateForProperOffer
15:39:58 219  
15:39:58 220  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
15:39:58 221  	in_gift_certificate_id IN NUMBER,
15:39:58 222  	in_charge_id	       IN NUMBER,
15:39:58 223  	out_result	       OUT NUMBER
15:39:58 224  );
15:39:58 225  
15:39:58 226  FUNCTION IS_CREDIT_CARD_EXISTS (
15:39:58 227  /*
15:39:58 228  1 - if instrument exists
15:39:58 229  0 - else
15:39:58 230  */
15:39:58 231  	in_credit_card_id IN NUMBER
15:39:58 232  ) RETURN NUMBER;
15:39:58 233  
15:39:58 234  FUNCTION IS_PAYPAL_EXISTS (
15:39:58 235  /*
15:39:58 236  1 - if instrument exists
15:39:58 237  0 - else
15:39:58 238  */
15:39:58 239  	in_paypal_id IN NUMBER
15:39:58 240  ) RETURN NUMBER;
15:39:58 241  
15:39:58 242  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
15:39:58 243  /*
15:39:58 244  1 - if instrument exists
15:39:58 245  0 - else
15:39:58 246  */
15:39:58 247  	in_gift_certificate_id IN NUMBER
15:39:58 248  ) RETURN NUMBER;
15:39:58 249  
15:39:58 250  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
15:39:58 251  	in_credit_card_id IN NUMBER,
15:39:58 252  	out_group_id	  OUT NUMBER
15:39:58 253  );
15:39:58 254  
15:39:58 255  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
15:39:58 256  	in_paypal_id IN NUMBER,
15:39:58 257  	out_group_id	  OUT NUMBER
15:39:58 258  );
15:39:58 259  
15:39:58 260  PROCEDURE GET_EXPIRING_PAYPAL (
15:39:58 261  	in_expire_window_days	IN NUMBER,
15:39:58 262  	in_creation_limit_days	IN NUMBER,
15:39:58 263  	in_retry_throttle_name	PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
15:39:58 264  	out_result_set		OUT SYS_REFCURSOR
15:39:58 265  );
15:39:58 266  
15:39:58 267  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
15:39:58 268  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
15:39:58 269  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
15:39:58 270  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
15:39:58 271  );
15:39:58 272  
15:39:58 273  PROCEDURE UPDATE_PAYPAL_STATUS (
15:39:58 274  	in_paypal_id	    IN PAYPAL.ID%TYPE,
15:39:58 275  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
15:39:58 276  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
15:39:58 277  );
15:39:58 278  
15:39:58 279  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
15:39:58 280  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
15:39:58 281  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
15:39:58 282  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
15:39:58 283  );
15:39:58 284  
15:39:58 285  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:39:58 286  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:39:58 287  	out_result_set OUT SYS_REFCURSOR
15:39:58 288  );
15:39:58 289  
15:39:58 290  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
15:39:58 291  	in_old_fin_instrument_id   IN NUMBER,
15:39:58 292  	in_old_fin_instrument_type IN NUMBER,
15:39:58 293  	in_new_fin_instrument_id   IN NUMBER,
15:39:58 294  	in_new_fin_instrument_type IN NUMBER,
15:39:58 295  	in_updated_by		   IN VARCHAR2
15:39:58 296  );
15:39:58 297  
15:39:58 298  END PROCS_FIN_INSTRUMENTS_V23;
15:39:58 299  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.10
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_group_account_cru.sql
Compiling header for procs_group_account_cru.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
15:39:58   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
15:39:58   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
15:39:58   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
15:39:58   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
15:39:58   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
15:39:58   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
15:39:58  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
15:39:58  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:39:58  12  );
15:39:58  13  
15:39:58  14  PROCEDURE CREATE_GROUP_ACCOUNT (
15:39:58  15  	in_subscription_id	 IN NUMBER,
15:39:58  16  	in_group_name		 IN VARCHAR2,
15:39:58  17  	in_first_name		 IN VARCHAR2,
15:39:58  18  	in_last_name		 IN VARCHAR2,
15:39:58  19  	in_email		 IN VARCHAR2,
15:39:58  20  	in_phone		 IN VARCHAR2,
15:39:58  21  	in_organization_type	 IN VARCHAR2,
15:39:58  22  	in_seats		 IN NUMBER,
15:39:58  23  	in_seat_ttl_in_hours	 IN NUMBER,
15:39:58  24  	in_ip			 IN NUMBER,
15:39:58  25  	in_created_by		 IN VARCHAR2
15:39:58  26  );
15:39:58  27  
15:39:58  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
15:39:58  29  	in_group_account_id    IN NUMBER,
15:39:58  30  	in_borrower_account_id IN NUMBER,
15:39:58  31  	in_ip_address	       IN VARCHAR2,
15:39:58  32  	in_email_domain        IN VARCHAR2,
15:39:58  33  	in_start_date	       IN DATE,
15:39:58  34  	in_end_date	       IN DATE,
15:39:58  35  	in_created_by	       IN VARCHAR2
15:39:58  36  );
15:39:58  37  
15:39:58  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
15:39:58  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:39:58  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:39:58  41  );
15:39:58  42  
15:39:58  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
15:39:58  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
15:39:58  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:39:58  46  );
15:39:58  47  
15:39:58  48  PROCEDURE ADD_IP_RANGE (
15:39:58  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:39:58  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
15:39:58  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:39:58  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:39:58  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
15:39:58  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
15:39:58  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
15:39:58  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
15:39:58  57  );
15:39:58  58  
15:39:58  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
15:39:58  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:39:58  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:39:58  62  );
15:39:58  63  
15:39:58  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
15:39:58  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:39:58  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:39:58  67  );
15:39:58  68  
15:39:58  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
15:39:58  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:39:58  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:39:58  72  );
15:39:58  73  
15:39:58  74  PROCEDURE ADD_EMAIL_DOMAIN (
15:39:58  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:39:58  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:39:58  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
15:39:58  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
15:39:58  79  );
15:39:58  80  
15:39:58  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
15:39:58  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:39:58  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
15:39:58  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
15:39:58  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
15:39:58  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
15:39:58  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
15:39:58  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:39:58  89  );
15:39:58  90  
15:39:58  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
15:39:58  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:39:58  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
15:39:58  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:39:58  95  );
15:39:58  96  END PROCS_GROUP_ACCOUNT_CRU_V23;
15:39:58  97  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.06
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_group_account.sql
Compiling header for procs_group_account.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V23" As
15:39:58   2  
15:39:58   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
15:39:58   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
15:39:58   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
15:39:58   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:39:58   7  );
15:39:58   8  
15:39:58   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
15:39:58  10  	out_result_set OUT SYS_REFCURSOR
15:39:58  11  );
15:39:58  12  
15:39:58  13  PROCEDURE EXPIRE_SUB_SHARE (
15:39:58  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
15:39:58  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:39:58  16  );
15:39:58  17  
15:39:58  18  PROCEDURE EXPIRE_ALL_SHARES (
15:39:58  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
15:39:58  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:39:58  21  );
15:39:58  22  
15:39:58  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
15:39:58  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
15:39:58  25  	in_start	 IN  NUMBER,
15:39:58  26  	in_end		 IN  NUMBER,
15:39:58  27  	in_expired	 IN  NUMBER,
15:39:58  28  	out_result_set	 OUT SYS_REFCURSOR,
15:39:58  29  	out_shares_count OUT NUMBER
15:39:58  30  );
15:39:58  31  
15:39:58  32  PROCEDURE IS_VALID_IP_ADDRESS (
15:39:58  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:39:58  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:39:58  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:39:58  36  	out_is_valid	    OUT NUMBER
15:39:58  37  );
15:39:58  38  
15:39:58  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
15:39:58  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:39:58  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:39:58  42  	out_is_valid	    OUT NUMBER
15:39:58  43  );
15:39:58  44  
15:39:58  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
15:39:58  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
15:39:58  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
15:39:58  48  	Out_Result_Set	       Out Sys_Refcursor
15:39:58  49  );
15:39:58  50  
15:39:58  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
15:39:58  52  	in_group_account_id IN NUMBER,
15:39:58  53  	in_start	    IN NUMBER,
15:39:58  54  	in_end		    IN NUMBER,
15:39:58  55  	Out_Result_Set	    OUT Sys_Refcursor
15:39:58  56  );
15:39:58  57  
15:39:58  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
15:39:58  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
15:39:58  60  	Out_Result_Set	   Out Sys_Refcursor
15:39:58  61  );
15:39:58  62  
15:39:58  63  PROCEDURE CREATE_GROUP_ACCOUNT (
15:39:58  64  	in_subscription_id	 IN NUMBER,
15:39:58  65  	in_group_name		 IN VARCHAR2,
15:39:58  66  	in_first_name		 IN VARCHAR2,
15:39:58  67  	in_last_name		 IN VARCHAR2,
15:39:58  68  	in_email		 IN VARCHAR2,
15:39:58  69  	in_phone		 IN VARCHAR2,
15:39:58  70  	in_organization_type	 IN VARCHAR2,
15:39:58  71  	in_seats		 IN NUMBER,
15:39:58  72  	in_seat_ttl_in_hours	 IN NUMBER,
15:39:58  73  	in_ip			 IN NUMBER,
15:39:58  74  	in_created_by		 IN VARCHAR2
15:39:58  75  );
15:39:58  76  
15:39:58  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
15:39:58  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:39:58  79  	out_result_set	    OUT SYS_REFCURSOR
15:39:58  80  );
15:39:58  81  
15:39:58  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
15:39:58  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:39:58  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:39:58  85  	out_result_set	    OUT SYS_REFCURSOR
15:39:58  86  );
15:39:58  87  
15:39:58  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
15:39:58  89  	in_group_account_id   IN NUMBER,
15:39:58  90  	in_start	      IN NUMBER,
15:39:58  91  	in_end		      IN NUMBER,
15:39:58  92  	in_status	      IN NUMBER,
15:39:58  93  	out_record_count      OUT NUMBER,
15:39:58  94  	out_result_set	      OUT SYS_REFCURSOR
15:39:58  95  );
15:39:58  96  
15:39:58  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
15:39:58  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:39:58  99  	in_start	      IN NUMBER,
15:39:58 100  	in_end		      IN NUMBER,
15:39:58 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
15:39:58 102  	out_record_count      OUT NUMBER,
15:39:58 103  	out_result_set	      OUT SYS_REFCURSOR
15:39:58 104  );
15:39:58 105  
15:39:58 106  PROCEDURE ADD_EMAIL_DOMAIN (
15:39:58 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:39:58 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:39:58 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
15:39:58 110  );
15:39:58 111  
15:39:58 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
15:39:58 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:39:58 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:39:58 115  );
15:39:58 116  
15:39:58 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
15:39:58 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:39:58 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:39:58 120  );
15:39:58 121  
15:39:58 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
15:39:58 123  	in_group_account_id    IN NUMBER,
15:39:58 124  	in_borrower_account_id IN NUMBER,
15:39:58 125  	in_ip_address	       IN VARCHAR2,
15:39:58 126  	in_email_domain        IN VARCHAR2,
15:39:58 127  	in_created_by	       IN VARCHAR2
15:39:58 128  );
15:39:58 129  
15:39:58 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
15:39:58 131  	in_group_account_id   IN NUMBER,
15:39:58 132  	out_occupied_seats   OUT NUMBER
15:39:58 133  );
15:39:58 134  
15:39:58 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
15:39:58 136  	in_group_account_id   IN NUMBER
15:39:58 137  ) RETURN NUMBER;
15:39:58 138  
15:39:58 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
15:39:58 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:39:58 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:39:58 142  );
15:39:58 143  
15:39:58 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
15:39:58 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
15:39:58 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:39:58 147  );
15:39:58 148  
15:39:58 149  PROCEDURE ADD_IP_RANGE (
15:39:58 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:39:58 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
15:39:58 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:39:58 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:39:58 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
15:39:58 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
15:39:58 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
15:39:58 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
15:39:58 158  );
15:39:58 159  
15:39:58 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
15:39:58 161  	in_group_account_id IN NUMBER,
15:39:58 162  	out_group_id OUT NUMBER
15:39:58 163  );
15:39:58 164  
15:39:58 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
15:39:58 166  	in_group_account_ip_range_id IN NUMBER,
15:39:58 167  	out_group_id OUT NUMBER
15:39:58 168  );
15:39:58 169  
15:39:58 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
15:39:58 171  	in_group_account_email_dom_id IN NUMBER,
15:39:58 172  	out_group_id OUT NUMBER
15:39:58 173  );
15:39:58 174  
15:39:58 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
15:39:58 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:39:58 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
15:39:58 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
15:39:58 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
15:39:58 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
15:39:58 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
15:39:58 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:39:58 183  );
15:39:58 184  
15:39:58 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
15:39:58 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:39:58 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
15:39:58 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:39:58 189  );
15:39:58 190  
15:39:58 191  END PROCS_GROUP_ACCOUNT_V23;
15:39:58 192  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.06
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_history.sql
Compiling header for procs_history.sql
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE CREATE_AASR_HISTORY(
15:39:58   4  	in_id			     IN CORE_OWNER.AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:39:58   5  	in_system_activity_reason_id IN NUMBER,
15:39:58   6  	in_created_by		     IN VARCHAR2
15:39:58   7  );
15:39:58   8  
15:39:58   9  PROCEDURE CREATE_ADDRESS_HISTORY(
15:39:58  10  	in_address_id		     IN NUMBER,
15:39:58  11  	in_system_activity_reason_id IN NUMBER
15:39:58  12  );
15:39:58  13  
15:39:58  14  PROCEDURE CREATE_ACCOUNT_HISTORY(
15:39:58  15  	in_account_id		     IN NUMBER,
15:39:58  16  	in_system_activity_reason_id IN NUMBER
15:39:58  17  );
15:39:58  18  
15:39:58  19  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
15:39:58  20  	in_subscription_id	     IN NUMBER,
15:39:58  21  	in_system_activity_reason_id IN NUMBER
15:39:58  22  );
15:39:58  23  
15:39:58  24  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
15:39:58  25  	in_credit_card_id	      IN NUMBER,
15:39:58  26  	in_system_activity_reason_id  IN  NUMBER
15:39:58  27  );
15:39:58  28  
15:39:58  29  PROCEDURE CREATE_PAYPAL_HISTORY(
15:39:58  30  	in_paypal_id		      IN NUMBER,
15:39:58  31  	in_system_activity_reason_id  IN NUMBER
15:39:58  32  );
15:39:58  33  
15:39:58  34  PROCEDURE CREATE_GIFT_CERT_HISTORY(
15:39:58  35  	in_gift_certificate_id	      IN NUMBER,
15:39:58  36  	in_system_activity_reason_id  IN  NUMBER
15:39:58  37  );
15:39:58  38  
15:39:58  39  PROCEDURE CREATE_TRANSACTION_HISTORY (
15:39:58  40  	in_transaction_id	     IN NUMBER,
15:39:58  41  	in_system_activity_reason_id IN NUMBER
15:39:58  42  );
15:39:58  43  
15:39:58  44  PROCEDURE CREATE_INVOICE_HISTORY (
15:39:58  45  	in_invoice_id		     IN NUMBER,
15:39:58  46  	in_system_activity_reason_id IN NUMBER
15:39:58  47  );
15:39:58  48  
15:39:58  49  PROCEDURE CREATE_LICENSE_HISTORY (
15:39:58  50  	in_license_id		     IN NUMBER,
15:39:58  51  	in_system_activity_reason_id IN NUMBER
15:39:58  52  );
15:39:58  53  
15:39:58  54  PROCEDURE CREATE_CHARGE_HISTORY (
15:39:58  55  	in_charge_id		    IN NUMBER,
15:39:58  56  	in_system_activity_reason_id IN NUMBER
15:39:58  57  );
15:39:58  58  
15:39:58  59  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
15:39:58  60  	in_invoice_adjustment_id     IN NUMBER,
15:39:58  61  	in_system_activity_reason_id IN NUMBER
15:39:58  62  );
15:39:58  63  
15:39:58  64  
15:39:58  65  END PROCS_HISTORY_V23;
15:39:58  66  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.03
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_invoice_cru.sql
Compiling header for procs_invoice_cru.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_INVOICE_CRU
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE CREATE_INVOICE (
15:39:58   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
15:39:58   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
15:39:58   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
15:39:58   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
15:39:58   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
15:39:58   9  );
15:39:58  10  
15:39:58  11  PROCEDURE UPDATE_INVOICE (
15:39:58  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
15:39:58  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
15:39:58  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
15:39:58  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
15:39:58  16  );
15:39:58  17  
15:39:58  18  END PROCS_INVOICE_CRU_V23;
15:39:58  19  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.02
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_invoice.sql
Compiling header for procs_invoice.sql
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> -- DDL for package PROCS_INVOICE
15:39:58 SQL> --------------------------------------------------------------------------------
15:39:58 SQL> 
15:39:58 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V23" AS
15:39:58   2  
15:39:58   3  PROCEDURE GET_INVOICE_IDS(
15:39:58   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
15:39:58   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
15:39:58   6  	out_result_set OUT SYS_REFCURSOR
15:39:58   7  );
15:39:58   8  
15:39:58   9  PROCEDURE IS_INVOICE_FOR_GC (
15:39:58  10  	in_invoice_id  IN NUMBER,
15:39:58  11  	out_result     OUT NUMBER
15:39:58  12  );
15:39:58  13  
15:39:58  14  PROCEDURE CREATE_INVOICE(
15:39:58  15  /*
15:39:58  16  Throws exceptions:
15:39:58  17  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  18  */
15:39:58  19  	  in_invoice_status IN NUMBER,
15:39:58  20  	  in_created_by     IN VARCHAR2,
15:39:58  21  	  in_tax_exempt_id  IN VARCHAR2,
15:39:58  22  	  out_invoice_id    OUT NUMBER
15:39:58  23  );
15:39:58  24  
15:39:58  25  PROCEDURE GET_PENDING_INVOICES (
15:39:58  26  /*
15:39:58  27  Throws exceptions:
15:39:58  28  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  29  */
15:39:58  30  	out_result_set	     OUT SYS_REFCURSOR,
15:39:58  31  	in_row_number	     IN NUMBER DEFAULT NULL
15:39:58  32  );
15:39:58  33  
15:39:58  34  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:39:58  35  /*
15:39:58  36  Throws exceptions:
15:39:58  37  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  38  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  39  */
15:39:58  40  	in_invoice_id IN  NUMBER,
15:39:58  41  	out_amount    OUT NUMBER
15:39:58  42  );
15:39:58  43  
15:39:58  44  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
15:39:58  45  	in_invoice_id IN  NUMBER
15:39:58  46  ) RETURN NUMBER;
15:39:58  47  
15:39:58  48  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
15:39:58  49  /*
15:39:58  50  Throws exceptions:
15:39:58  51  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  52  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  53  */
15:39:58  54  	in_invoice_id  IN  NUMBER,
15:39:58  55  	out_account_id OUT NUMBER
15:39:58  56  );
15:39:58  57  
15:39:58  58  PROCEDURE GET_INVOICE_DETAILS (
15:39:58  59  /*
15:39:58  60  Throws exceptions:
15:39:58  61  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  62  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  63  */
15:39:58  64  	in_invoice_id	   IN  NUMBER,
15:39:58  65  	out_group_id	   OUT NUMBER,
15:39:58  66  	out_status_id	   OUT NUMBER,
15:39:58  67  	out_line_items_set OUT SYS_REFCURSOR,
15:39:58  68  	out_pp_charges_set OUT SYS_REFCURSOR,
15:39:58  69  	out_cc_charges_set OUT SYS_REFCURSOR,
15:39:58  70  	out_gc_charges_set OUT SYS_REFCURSOR
15:39:58  71  );
15:39:58  72  -- norlov: #38796
15:39:58  73  PROCEDURE GET_TRANSACTION_INVOICE (
15:39:58  74  /*
15:39:58  75  Throws exceptions:
15:39:58  76  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  77  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  78  */
15:39:58  79  	in_transaction_id  IN  NUMBER,
15:39:58  80  	out_result_set	      OUT SYS_REFCURSOR
15:39:58  81  );
15:39:58  82  
15:39:58  83  PROCEDURE UPDATE_INVOICE_STATUS (
15:39:58  84  /*
15:39:58  85  Throws exceptions:
15:39:58  86  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  87  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  88  */
15:39:58  89  	in_invoice_id		       IN NUMBER,
15:39:58  90  	in_invoice_status_id	       IN NUMBER,
15:39:58  91  	in_updated_by		       IN VARCHAR2
15:39:58  92  );
15:39:58  93  
15:39:58  94  FUNCTION IS_INVOICE_PAYING_STARTED (
15:39:58  95  /*
15:39:58  96  Throws exceptions:
15:39:58  97  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:58  98  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58  99  */
15:39:58 100  	in_invoice_id IN NUMBER
15:39:58 101  ) RETURN NUMBER;
15:39:58 102  
15:39:58 103  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
15:39:58 104  	in_invoice_id  IN NUMBER,
15:39:58 105  	out_is_started OUT NUMBER
15:39:58 106  );
15:39:58 107  
15:39:58 108  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
15:39:58 109  	in_invoice_id	      IN NUMBER,
15:39:58 110  	in_chargeback_date    IN DATE,
15:39:58 111  	out_chargeback_amount OUT NUMBER
15:39:58 112  );
15:39:58 113  
15:39:58 114  PROCEDURE APPLY_REFUND (
15:39:58 115  	in_invoice_id	     IN NUMBER,
15:39:58 116  	in_chargeback_amount IN NUMBER,
15:39:58 117  	in_created_by	     IN VARCHAR2,
15:39:58 118  	out_charge_id	     OUT NUMBER
15:39:58 119  );
15:39:58 120  
15:39:58 121  PROCEDURE GET_MAX_REFUND (
15:39:58 122  	in_invoice_id IN NUMBER,
15:39:58 123  	out_amount    OUT NUMBER
15:39:58 124  );
15:39:58 125  
15:39:58 126  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
15:39:58 127  	in_invoice_id	    IN NUMBER,
15:39:58 128  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
15:39:58 129  	out_days_num	    OUT NUMBER
15:39:58 130  );
15:39:58 131  
15:39:58 132  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:39:58 133  	in_invoice_id  IN NUMBER,
15:39:58 134  	out_result_set OUT SYS_REFCURSOR
15:39:58 135  );
15:39:58 136  
15:39:58 137  PROCEDURE GET_INVOICE_LICENSES (
15:39:58 138  	in_invoice_id  IN NUMBER,
15:39:58 139  	out_result_set OUT SYS_REFCURSOR
15:39:58 140  );
15:39:58 141  
15:39:58 142  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
15:39:58 143  	in_invoice_id	   IN NUMBER,
15:39:58 144  	out_offer_chain_id OUT NUMBER
15:39:58 145  );
15:39:58 146  
15:39:58 147  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
15:39:58 148  -- Closing invoice without refund
15:39:58 149  	in_invoice_id IN NUMBER,
15:39:58 150  	in_updated_by IN VARCHAR2
15:39:58 151  );
15:39:58 152  
15:39:58 153  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
15:39:58 154  	in_invoice_id	    IN NUMBER,
15:39:58 155  	out_subscription_id OUT NUMBER
15:39:58 156  );
15:39:58 157  
15:39:58 158  PROCEDURE IS_INVOICE_TAX_EXEMPT (
15:39:58 159  /*
15:39:58 160  Throws exceptions:
15:39:58 161  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:39:58 162  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:58 163  Return:
15:39:58 164  	GLOBAL_CONSTANTS_V23.TRUE if ACCOUNT.EXEMPT_ID is not null
15:39:58 165  	GLOBAL_CONSTANTS_V23.FALSE else
15:39:58 166  */
15:39:58 167  	in_invoice_id	  IN NUMBER,
15:39:58 168  	out_is_tax_exempt OUT NUMBER
15:39:58 169  );
15:39:58 170  
15:39:58 171  PROCEDURE GET_INVOICE_BY_ID (
15:39:58 172  	in_invoice_id  IN NUMBER,
15:39:58 173  	out_result_set OUT SYS_REFCURSOR
15:39:58 174  );
15:39:58 175  
15:39:58 176  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
15:39:58 177  	in_invoice_id		      IN NUMBER,
15:39:58 178  	out_is_tax_calculation_needed OUT NUMBER
15:39:58 179  );
15:39:58 180  
15:39:58 181  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
15:39:58 182  	in_invoice_id		     IN NUMBER,
15:39:58 183  	in_updated_by		     IN VARCHAR2,
15:39:58 184  	in_is_tax_calculation_needed IN NUMBER
15:39:58 185  );
15:39:58 186  
15:39:58 187  PROCEDURE REFUND_INVOICE (
15:39:58 188  	in_invoice_id	   IN NUMBER,
15:39:58 189  	in_refund_amount   IN NUMBER,
15:39:58 190  	in_note 	   IN VARCHAR2,
15:39:58 191  	in_created_by	   IN VARCHAR2,
15:39:58 192  	out_charge_id	   OUT NUMBER
15:39:58 193  );
15:39:58 194  
15:39:58 195  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
15:39:58 196  	in_invoice_id		    IN NUMBER,
15:39:58 197  	out_order_id		    OUT VARCHAR2,
15:39:58 198  	out_external_transaction_id OUT VARCHAR2
15:39:58 199  );
15:39:58 200  
15:39:58 201  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
15:39:58 202  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
15:39:58 203  	out_result_set OUT SYS_REFCURSOR
15:39:58 204  );
15:39:58 205  
15:39:58 206  PROCEDURE IS_REVOKE_ENTITLEMENTS(
15:39:58 207  	in_invoice_id IN NUMBER,
15:39:58 208  	out_is_revoke OUT NUMBER
15:39:58 209  );
15:39:58 210  
15:39:58 211  END PROCS_INVOICE_V23;
15:39:58 212  .
15:39:58 SQL> /

Package created.

Elapsed: 00:00:00.04
15:39:58 SQL> 
15:39:58 SQL> prompt Compiling header for procs_itunes_receipt_cru.sql
Compiling header for procs_itunes_receipt_cru.sql
15:39:58 SQL> /*
15:39:59 SQL> CREATE TABLE ITUNES_RECEIPT (
15:39:59 SQL> 	id NUMBER NOT NULL ENABLE,
15:39:59 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
15:39:59 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
15:39:59 SQL> 	status NUMBER,
15:39:59 SQL> 	quantity NUMBER,
15:39:59 SQL> 	product_id VARCHAR(1024),
15:39:59 SQL> 	transaction_id VARCHAR(1024),
15:39:59 SQL> 	purchase_date TIMESTAMP,
15:39:59 SQL> 	original_transaction_id VARCHAR(1024),
15:39:59 SQL> 	original_purchase_date TIMESTAMP,
15:39:59 SQL> 	app_item_id VARCHAR(1024),
15:39:59 SQL> 	version_external_id NUMBER,
15:39:59 SQL> 	bid VARCHAR(1024),
15:39:59 SQL> 	bvrs VARCHAR(255),
15:39:59 SQL> 	expires_date TIMESTAMP,
15:39:59 SQL> 	create_date DATE NOT NULL,
15:39:59 SQL> 	created_by VARCHAR(255) NOT NULL,
15:39:59 SQL> 	update_date DATE NOT NULL,
15:39:59 SQL> 	updated_by VARCHAR(255) NOT NULL,
15:39:59 SQL> 	last_check_date DATE NOT NULL,
15:39:59 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:39:59 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:39:59 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:39:59 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
15:39:59 SQL> )
15:39:59 SQL> TABLESPACE CORE;
15:39:59 SQL> */
15:39:59 SQL> 
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE CREATE_RECEIPT(
15:39:59   4  /*
15:39:59   5  Throws exceptions:
15:39:59   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59   7  */
15:39:59   8  	  out_id	      OUT NUMBER,
15:39:59   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:39:59  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
15:39:59  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
15:39:59  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
15:39:59  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:39:59  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:39:59  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:39:59  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:39:59  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:39:59  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:39:59  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:39:59  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
15:39:59  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
15:39:59  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:39:59  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
15:39:59  24  );
15:39:59  25  
15:39:59  26  PROCEDURE UPDATE_RECEIPT(
15:39:59  27  /*
15:39:59  28  Throws exceptions:
15:39:59  29  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  30  */
15:39:59  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
15:39:59  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
15:39:59  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
15:39:59  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
15:39:59  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:39:59  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:39:59  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:39:59  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:39:59  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:39:59  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:39:59  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:39:59  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
15:39:59  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
15:39:59  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:39:59  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
15:39:59  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
15:39:59  47  );
15:39:59  48  
15:39:59  49  PROCEDURE LINK_ITUNES_RECEIPT(
15:39:59  50  /*
15:39:59  51  Throws exceptions:
15:39:59  52  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  53  */
15:39:59  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
15:39:59  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:39:59  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
15:39:59  57  );
15:39:59  58  
15:39:59  59  PROCEDURE MARK_RECEIPT_CHECKED(
15:39:59  60  /*
15:39:59  61  Throws exceptions:
15:39:59  62  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  63  */
15:39:59  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
15:39:59  65  );
15:39:59  66  
15:39:59  67  END PROCS_ITUNES_RECEIPT_CRU_V23;
15:39:59  68  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.04
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_itunes_receipt.sql
Compiling header for procs_itunes_receipt.sql
15:39:59 SQL> /*
15:39:59 SQL> CREATE TABLE ITUNES_RECEIPT (
15:39:59 SQL> 	id NUMBER NOT NULL ENABLE,
15:39:59 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
15:39:59 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
15:39:59 SQL> 	status NUMBER,
15:39:59 SQL> 	quantity NUMBER,
15:39:59 SQL> 	product_id VARCHAR(1024),
15:39:59 SQL> 	transaction_id VARCHAR(1024),
15:39:59 SQL> 	purchase_date TIMESTAMP,
15:39:59 SQL> 	original_transaction_id VARCHAR(1024),
15:39:59 SQL> 	original_purchase_date TIMESTAMP,
15:39:59 SQL> 	app_item_id VARCHAR(1024),
15:39:59 SQL> 	version_external_id NUMBER,
15:39:59 SQL> 	bid VARCHAR(1024),
15:39:59 SQL> 	bvrs VARCHAR(255),
15:39:59 SQL> 	expires_date TIMESTAMP,
15:39:59 SQL> 	create_date DATE NOT NULL,
15:39:59 SQL> 	created_by VARCHAR(255) NOT NULL,
15:39:59 SQL> 	update_date DATE NOT NULL,
15:39:59 SQL> 	updated_by VARCHAR(255) NOT NULL,
15:39:59 SQL> 	last_check_date DATE NOT NULL,
15:39:59 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:39:59 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:39:59 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
15:39:59 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
15:39:59 SQL> )
15:39:59 SQL> TABLESPACE CORE;
15:39:59 SQL> */
15:39:59 SQL> 
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
15:39:59   4  	      /*
15:39:59   5  	      Throws exceptions:
15:39:59   6  	      APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59   7  	      */
15:39:59   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:39:59   9  	      out_result_set	  OUT SYS_REFCURSOR
15:39:59  10  );
15:39:59  11  
15:39:59  12  PROCEDURE CREATE_RECEIPT(
15:39:59  13  /*
15:39:59  14  Throws exceptions:
15:39:59  15  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  16  */
15:39:59  17  	  out_id	      OUT NUMBER,
15:39:59  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:39:59  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
15:39:59  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
15:39:59  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
15:39:59  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:39:59  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:39:59  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:39:59  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:39:59  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:39:59  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:39:59  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:39:59  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
15:39:59  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
15:39:59  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:39:59  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
15:39:59  33  );
15:39:59  34  
15:39:59  35  PROCEDURE UPDATE_RECEIPT(
15:39:59  36  /*
15:39:59  37  Throws exceptions:
15:39:59  38  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  39  */
15:39:59  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
15:39:59  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
15:39:59  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
15:39:59  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
15:39:59  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:39:59  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:39:59  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:39:59  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:39:59  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:39:59  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:39:59  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:39:59  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
15:39:59  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
15:39:59  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:39:59  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
15:39:59  55  	  in_is_expired       IN NUMBER
15:39:59  56  );
15:39:59  57  
15:39:59  58  PROCEDURE LINK_ITUNES_RECEIPT(
15:39:59  59  /*
15:39:59  60  Throws exceptions:
15:39:59  61  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  62  */
15:39:59  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
15:39:59  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:39:59  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
15:39:59  66  );
15:39:59  67  
15:39:59  68  PROCEDURE MARK_RECEIPT_CHECKED(
15:39:59  69  /*
15:39:59  70  Throws exceptions:
15:39:59  71  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  72  */
15:39:59  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
15:39:59  74  );
15:39:59  75  
15:39:59  76  PROCEDURE GET_ITUNES_RECEIPTS (
15:39:59  77  /*
15:39:59  78  Throws exceptions:
15:39:59  79  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  80  */
15:39:59  81  	out_result_set	    OUT SYS_REFCURSOR,
15:39:59  82  	in_row_number	    IN NUMBER DEFAULT 500
15:39:59  83  );
15:39:59  84  
15:39:59  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
15:39:59  86  /*
15:39:59  87  Throws exceptions:
15:39:59  88  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  89  */
15:39:59  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
15:39:59  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
15:39:59  92  );
15:39:59  93  
15:39:59  94  END PROCS_ITUNES_RECEIPT_V23;
15:39:59  95  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.04
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_license_cru.sql
Compiling header for procs_license_cru.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_LICENSE_CRU
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE CREATE_LICENSE(
15:39:59   4  	out_license_id		    OUT LICENSE.ID%TYPE,
15:39:59   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
15:39:59   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
15:39:59   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
15:39:59   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
15:39:59   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
15:39:59  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
15:39:59  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
15:39:59  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
15:39:59  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
15:39:59  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
15:39:59  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
15:39:59  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
15:39:59  17  );
15:39:59  18  
15:39:59  19  PROCEDURE UPDATE_LICENSE (
15:39:59  20  	in_license_id		    IN LICENSE.ID%TYPE,
15:39:59  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
15:39:59  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
15:39:59  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
15:39:59  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
15:39:59  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
15:39:59  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
15:39:59  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
15:39:59  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
15:39:59  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
15:39:59  30  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
15:39:59  31  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
15:39:59  32  );
15:39:59  33  
15:39:59  34  END PROCS_LICENSE_CRU_V23;
15:39:59  35  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.03
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_license.sql
Compiling header for procs_license.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_LICENSE
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE CREATE_LICENSE(
15:39:59   4  /*
15:39:59   5  Throws exceptions:
15:39:59   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59   8  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:39:59   9  */
15:39:59  10  	in_status_id		    IN NUMBER,
15:39:59  11  	in_needs_entitlements	    IN NUMBER,
15:39:59  12  	in_start_date		    IN DATE,
15:39:59  13  	in_end_date		    IN DATE,
15:39:59  14  	in_offer_id		    IN NUMBER,
15:39:59  15  	in_subscription_id	    IN NUMBER,
15:39:59  16  	in_invoice_id		    IN NUMBER,
15:39:59  17  	in_created_by		    IN VARCHAR2,
15:39:59  18  	in_is_extension 	    IN NUMBER,
15:39:59  19  	in_current_offer_index	    IN NUMBER,
15:39:59  20  	in_current_offer_recurr_num IN NUMBER,
15:39:59  21  	out_license_id		    OUT NUMBER
15:39:59  22  );
15:39:59  23  
15:39:59  24  /*********************************************/
15:39:59  25  
15:39:59  26  PROCEDURE UPDATE_LICENSE_STATUS(
15:39:59  27  /*
15:39:59  28  Throws exceptions:
15:39:59  29  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  30  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  31  */
15:39:59  32  	  in_license_id     IN NUMBER,
15:39:59  33  	  in_license_status IN NUMBER,
15:39:59  34  	  in_updated_by     IN VARCHAR2,
15:39:59  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
15:39:59  36  );
15:39:59  37  
15:39:59  38  /*********************************************/
15:39:59  39  
15:39:59  40  PROCEDURE GET_ENDING_LICENSES (
15:39:59  41  	in_hours_number IN NUMBER,
15:39:59  42  	out_result_set OUT SYS_REFCURSOR
15:39:59  43  );
15:39:59  44  
15:39:59  45  /*********************************************/
15:39:59  46  
15:39:59  47  PROCEDURE GET_ENDING_LICENSES_CC (
15:39:59  48  	in_hours_number IN NUMBER,
15:39:59  49  	out_result_set OUT SYS_REFCURSOR,
15:39:59  50  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:39:59  51  );
15:39:59  52  
15:39:59  53  /**********************************************/
15:39:59  54  
15:39:59  55  PROCEDURE GET_RECURRING_OFFER (
15:39:59  56  	in_license_id  IN NUMBER,
15:39:59  57  	out_result_set OUT SYS_REFCURSOR
15:39:59  58  );
15:39:59  59  
15:39:59  60  /**********************************************/
15:39:59  61  
15:39:59  62  PROCEDURE GET_NEXT_OFFER (
15:39:59  63  	in_license_id  IN NUMBER,
15:39:59  64  	out_result_set OUT SYS_REFCURSOR
15:39:59  65  );
15:39:59  66  
15:39:59  67  /**********************************************/
15:39:59  68  
15:39:59  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
15:39:59  70  	in_license_id IN NUMBER,
15:39:59  71  	out_group_id  OUT NUMBER
15:39:59  72  );
15:39:59  73  
15:39:59  74  /**************************************************/
15:39:59  75  
15:39:59  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
15:39:59  77  	out_result_set OUT SYS_REFCURSOR
15:39:59  78  );
15:39:59  79  
15:39:59  80  /**************************************************/
15:39:59  81  
15:39:59  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
15:39:59  83  	in_license_id	      IN NUMBER,
15:39:59  84  	in_needs_entitlements IN NUMBER,
15:39:59  85  	in_updated_by	      IN VARCHAR2
15:39:59  86  );
15:39:59  87  
15:39:59  88  PROCEDURE GET_ENDED_GC_LICENSES (
15:39:59  89  	out_result_set		OUT SYS_REFCURSOR,
15:39:59  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:39:59  91  	in_num_rows		IN NUMBER DEFAULT 10000,
15:39:59  92  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:39:59  93  );
15:39:59  94  
15:39:59  95  PROCEDURE GET_LICENSE_BY_ID (
15:39:59  96  
15:39:59  97  	in_license_id  IN NUMBER,
15:39:59  98  
15:39:59  99  	out_result_set OUT SYS_REFCURSOR
15:39:59 100  
15:39:59 101  );
15:39:59 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
15:39:59 103  	in_subscription_id IN NUMBER,
15:39:59 104  	in_end_date IN DATE,
15:39:59 105  	in_updated_by IN VARCHAR2
15:39:59 106  );
15:39:59 107  
15:39:59 108  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
15:39:59 109  	in_days_before_close	 IN NUMBER,
15:39:59 110  	in_num_licenses_to_fetch IN NUMBER,
15:39:59 111  	out_result_set		 OUT SYS_REFCURSOR
15:39:59 112  );
15:39:59 113  
15:39:59 114  END PROCS_LICENSE_V23;
15:39:59 115  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.03
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_line_items_cru.sql
Compiling header for procs_line_items_cru.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE CREATE_LINE_ITEM (
15:39:59   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
15:39:59   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
15:39:59   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
15:39:59   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
15:39:59   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
15:39:59   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
15:39:59  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
15:39:59  11  );
15:39:59  12  
15:39:59  13  PROCEDURE UPDATE_LINE_ITEM (
15:39:59  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
15:39:59  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
15:39:59  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
15:39:59  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
15:39:59  18  );
15:39:59  19  
15:39:59  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
15:39:59  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
15:39:59  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
15:39:59  23  );
15:39:59  24  
15:39:59  25  END PROCS_LINE_ITEMS_CRU_V23;
15:39:59  26  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.05
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_line_items.sql
Compiling header for procs_line_items.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_LINE_ITEMS
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE ADD_LINE_ITEMS(
15:39:59   4  /*
15:39:59   5  Throws exceptions:
15:39:59   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59   8  */
15:39:59   9  	in_invoice_id IN NUMBER,
15:39:59  10  	in_offer_id   IN NUMBER,
15:39:59  11  	in_created_by IN VARCHAR2
15:39:59  12  );
15:39:59  13  
15:39:59  14  /****************************************************/
15:39:59  15  
15:39:59  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
15:39:59  17  	in_line_item_id    IN NUMBER,
15:39:59  18  	in_amount	   IN NUMBER,
15:39:59  19  	in_discount_amount IN NUMBER,
15:39:59  20  	in_taxes_amount    IN NUMBER
15:39:59  21  );
15:39:59  22  
15:39:59  23  /****************************************************/
15:39:59  24  
15:39:59  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:39:59  26  /*
15:39:59  27  Throws exceptions:
15:39:59  28  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  29  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  30  */
15:39:59  31  	in_invoice_id  IN NUMBER,
15:39:59  32  	out_result_set OUT SYS_REFCURSOR
15:39:59  33  );
15:39:59  34  
15:39:59  35  /****************************************************/
15:39:59  36  
15:39:59  37  PROCEDURE GET_LINE_ITEM_TAXES (
15:39:59  38  /*
15:39:59  39  Throws exceptions:
15:39:59  40  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  41  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  42  */
15:39:59  43  	in_line_item_id IN  NUMBER,
15:39:59  44  	out_result_set	OUT SYS_REFCURSOR
15:39:59  45  );
15:39:59  46  /****************************************************/
15:39:59  47  
15:39:59  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
15:39:59  49  /*
15:39:59  50  Throws exceptions:
15:39:59  51  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  52  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  53  */
15:39:59  54  	in_line_item_id IN  NUMBER,
15:39:59  55  	out_result_set	OUT SYS_REFCURSOR
15:39:59  56  );
15:39:59  57  
15:39:59  58  /****************************************************/
15:39:59  59  
15:39:59  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
15:39:59  61  /*
15:39:59  62  Throws exceptions:
15:39:59  63  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  64  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  65  */
15:39:59  66  	in_line_item_id     IN	NUMBER,
15:39:59  67  	out_amount	    OUT NUMBER
15:39:59  68  );
15:39:59  69  
15:39:59  70  /****************************************************/
15:39:59  71  
15:39:59  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
15:39:59  73  /*
15:39:59  74  Throws exceptions:
15:39:59  75  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  76  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  77  */
15:39:59  78  	in_line_item_id     IN	NUMBER
15:39:59  79  ) RETURN NUMBER;
15:39:59  80  
15:39:59  81  END PROCS_LINE_ITEMS_V23;
15:39:59  82  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.03
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_locking.sql
Compiling header for procs_locking.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_LOCKING
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V23" AS
15:39:59   2  
15:39:59   3  /*
15:39:59   4  Removed by Sergey
15:39:59   5  10.12.2010
15:39:59   6  PROCEDURE INITIALIZE_SYSTEM;
15:39:59   7  
15:39:59   8  PROCEDURE INITIALIZE_ACCOUNT (
15:39:59   9  	in_account_id IN NUMBER
15:39:59  10  );
15:39:59  11  
15:39:59  12  PROCEDURE INITIALIZE_GROUP (
15:39:59  13  	in_group_id IN NUMBER
15:39:59  14  );
15:39:59  15  */
15:39:59  16  
15:39:59  17  PROCEDURE LOCK_ACCOUNT (
15:39:59  18  	in_group_id    IN NUMBER,
15:39:59  19  	in_lock_key    IN VARCHAR2,
15:39:59  20  	in_seconds_num IN NUMBER,
15:39:59  21  	in_created_by  IN VARCHAR2,
15:39:59  22  	in_reason      IN VARCHAR2
15:39:59  23  );
15:39:59  24  
15:39:59  25  PROCEDURE RELEASE_LOCK (
15:39:59  26  	in_group_id IN NUMBER,
15:39:59  27  	in_lock_key IN VARCHAR2
15:39:59  28  );
15:39:59  29  
15:39:59  30  END PROCS_LOCKING_V23;
15:39:59  31  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.02
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_notification.sql
Compiling header for procs_notification.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_NOTIFICATION
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_NOTIFICATION_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
15:39:59   4  /*
15:39:59   5  Throws exceptions:
15:39:59   6  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59   7  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59   8  */
15:39:59   9  	in_notification_type_name IN VARCHAR2,
15:39:59  10  	out_notification_type_id  OUT NUMBER
15:39:59  11  );
15:39:59  12  
15:39:59  13  PROCEDURE ADD_NOTIFICATION (
15:39:59  14  /*
15:39:59  15  Throws exceptions:
15:39:59  16  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  17  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  18  */
15:39:59  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
15:39:59  20  	in_recipient_group_id	 IN NUMBER,
15:39:59  21  	in_notification_type_id  IN NUMBER,
15:39:59  22  	in_date_to_notify	 IN DATE,
15:39:59  23  	in_email_template_params IN CLOB
15:39:59  24  );
15:39:59  25  
15:39:59  26  PROCEDURE GET_PENDING_NOTIFICATIONS (
15:39:59  27  /*
15:39:59  28  Throws exceptions:
15:39:59  29  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  30  */
15:39:59  31  	out_result_set OUT SYS_REFCURSOR
15:39:59  32  );
15:39:59  33  
15:39:59  34  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
15:39:59  35  /*
15:39:59  36  Throws exceptions:
15:39:59  37  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  38  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  39  */
15:39:59  40  	in_notification_id IN NUMBER
15:39:59  41  );
15:39:59  42  
15:39:59  43  PROCEDURE SET_NOTIFICATION_STATUS (
15:39:59  44  /*
15:39:59  45  Throws exceptions:
15:39:59  46  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  47  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  48  */
15:39:59  49  	in_notification_id	  IN NUMBER,
15:39:59  50  	in_notification_status_id IN NUMBER,
15:39:59  51  	in_error_message	  IN VARCHAR2
15:39:59  52  );
15:39:59  53  
15:39:59  54  PROCEDURE ADD_NOTIFICATION_FAILURE (
15:39:59  55  /*
15:39:59  56  Throws exceptions:
15:39:59  57  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:39:59  58  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59  59  */
15:39:59  60  	in_notification_id IN NUMBER,
15:39:59  61  	in_error_message   IN VARCHAR2
15:39:59  62  );
15:39:59  63  
15:39:59  64  PROCEDURE LOCK_PENDING_NOTIFICATION (
15:39:59  65  /*
15:39:59  66  Result: 1 if notification locked
15:39:59  67  2 - else
15:39:59  68  */
15:39:59  69  	in_notification_id IN NUMBER,
15:39:59  70  	out_lock_status    OUT NUMBER
15:39:59  71  );
15:39:59  72  
15:39:59  73  PROCEDURE GET_NOTIFICATION_DATA (
15:39:59  74  	in_notification_id IN NUMBER,
15:39:59  75  	out_result_set	   OUT SYS_REFCURSOR
15:39:59  76  );
15:39:59  77  
15:39:59  78  END PROCS_NOTIFICATION_V23;
15:39:59  79  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.05
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_offer_chain.sql
Compiling header for procs_offer_chain.sql
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE IS_GC_OFFER_CHAIN(
15:39:59   4  	in_offer_chain_id IN OFFER_CHAIN.ID%TYPE,
15:39:59   5  	out_data OUT NUMBER
15:39:59   6  );
15:39:59   7  
15:39:59   8  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
15:39:59   9  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
15:39:59  10  	out_data	     OUT OFFER_CHAIN.ID%TYPE
15:39:59  11  );
15:39:59  12  
15:39:59  13  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
15:39:59  14  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
15:39:59  15  	out_data	       OUT OFFER_CHAIN.ID%TYPE
15:39:59  16  );
15:39:59  17  
15:39:59  18  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:39:59  19  	  in_offer_chain_id IN	 NUMBER,
15:39:59  20  	  out_result_set    OUT  SYS_REFCURSOR
15:39:59  21  );
15:39:59  22  
15:39:59  23  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
15:39:59  24  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:39:59  25  	out_result_set	   OUT SYS_REFCURSOR
15:39:59  26  );
15:39:59  27  
15:39:59  28  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
15:39:59  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:39:59  30  	out_result_set	   OUT SYS_REFCURSOR
15:39:59  31  );
15:39:59  32  
15:39:59  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
15:39:59  34  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:39:59  35  	out_result_set	   OUT SYS_REFCURSOR
15:39:59  36  );
15:39:59  37  
15:39:59  38  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
15:39:59  39  	in_product_id  IN  NUMBER,
15:39:59  40  	out_result_set OUT SYS_REFCURSOR
15:39:59  41  );
15:39:59  42  
15:39:59  43  PROCEDURE GET_OFFER_CHAIN_PRICE (
15:39:59  44  	in_offer_chain_id IN NUMBER,
15:39:59  45  	out_price	  OUT NUMBER
15:39:59  46  );
15:39:59  47  
15:39:59  48  PROCEDURE GET_FIRST_OFFER(
15:39:59  49  	in_offer_chain_id IN  NUMBER,
15:39:59  50  	out_offer_id	  OUT NUMBER
15:39:59  51  );
15:39:59  52  
15:39:59  53  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
15:39:59  54  	out_result_set OUT SYS_REFCURSOR
15:39:59  55  );
15:39:59  56  
15:39:59  57  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
15:39:59  58  	in_offer_chain_id IN NUMBER,
15:39:59  59  	out_result_set	  OUT SYS_REFCURSOR
15:39:59  60  );
15:39:59  61  
15:39:59  62  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
15:39:59  63  	in_offer_chain_id	  IN NUMBER,
15:39:59  64  	in_offer_chain_start_date IN DATE
15:39:59  65  ) RETURN DATE;
15:39:59  66  
15:39:59  67  FUNCTION CALCULATE_OFFER_AMOUNT (
15:39:59  68  	in_offer_id IN NUMBER
15:39:59  69  ) RETURN NUMBER;
15:39:59  70  
15:39:59  71  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
15:39:59  72  	in_offer_chain_id IN NUMBER
15:39:59  73  ) RETURN NUMBER;
15:39:59  74  
15:39:59  75  FUNCTION GET_FIRST_OFFER_INDEX (
15:39:59  76  	in_offer_chain_id IN NUMBER
15:39:59  77  ) RETURN NUMBER;
15:39:59  78  
15:39:59  79  FUNCTION GET_NEXT_OFFER_INDEX (
15:39:59  80  	in_offer_chain_id	     IN NUMBER,
15:39:59  81  	in_offer_chain_current_index IN NUMBER
15:39:59  82  ) RETURN NUMBER;
15:39:59  83  
15:39:59  84  PROCEDURE P_GET_NEXT_OFFER_INDEX (
15:39:59  85  	in_offer_chain_id	     IN NUMBER,
15:39:59  86  	in_offer_chain_current_index IN NUMBER,
15:39:59  87  	out_next_offer_index	     OUT NUMBER
15:39:59  88  );
15:39:59  89  
15:39:59  90  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
15:39:59  91  	in_license_id		     IN NUMBER,
15:39:59  92  	in_offer_chain_current_index IN NUMBER,
15:39:59  93  	out_next_offer_index	     OUT NUMBER
15:39:59  94  );
15:39:59  95  
15:39:59  96  FUNCTION IS_OFFER_INDEX_EXISTS (
15:39:59  97  	in_offer_chain_id	   IN NUMBER,
15:39:59  98  	in_offer_chain_offer_index IN NUMBER
15:39:59  99  ) RETURN NUMBER;
15:39:59 100  
15:39:59 101  PROCEDURE GET_OFFER_LENGTH (
15:39:59 102  	in_offer_id IN NUMBER,
15:39:59 103  	out_years   OUT NUMBER,
15:39:59 104  	out_months  OUT NUMBER,
15:39:59 105  	out_days    OUT NUMBER
15:39:59 106  );
15:39:59 107  
15:39:59 108  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
15:39:59 109  	in_offer_id   IN NUMBER,
15:39:59 110  	in_start_date IN DATE DEFAULT SYSDATE,
15:39:59 111  	out_days      OUT NUMBER
15:39:59 112  );
15:39:59 113  
15:39:59 114  PROCEDURE GET_OFFER_PRODUCTS (
15:39:59 115  	in_offer_id    IN NUMBER,
15:39:59 116  	out_result_set OUT SYS_REFCURSOR
15:39:59 117  );
15:39:59 118  
15:39:59 119  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
15:39:59 120  	in_offer_chain_id IN NUMBER,
15:39:59 121  	out_result_set	  OUT SYS_REFCURSOR
15:39:59 122  );
15:39:59 123  
15:39:59 124  FUNCTION CHECK_FOR_SAME_PRODUCTS (
15:39:59 125  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
15:39:59 126  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
15:39:59 127  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
15:39:59 128  ) RETURN NUMBER;
15:39:59 129  
15:39:59 130  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
15:39:59 131  	in_offer_chain_id IN NUMBER
15:39:59 132  ) RETURN NUMBER;
15:39:59 133  
15:39:59 134  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
15:39:59 135  	in_offer_chain_id IN NUMBER
15:39:59 136  ) RETURN NUMBER;
15:39:59 137  
15:39:59 138  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
15:39:59 139  	in_offer_chain_id   IN NUMBER,
15:39:59 140  	in_eligibility_name IN VARCHAR2,
15:39:59 141  	out_result_set	    OUT SYS_REFCURSOR
15:39:59 142  );
15:39:59 143  
15:39:59 144  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
15:39:59 145  	in_offer_chain_ids  IN VARCHAR2,
15:39:59 146  	in_eligibility_name IN VARCHAR2,
15:39:59 147  	out_result_set	    OUT SYS_REFCURSOR
15:39:59 148  );
15:39:59 149  
15:39:59 150  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:39:59 151  	in_offer_chain_id IN NUMBER,
15:39:59 152  	in_meta_data_name IN VARCHAR2,
15:39:59 153  	out_result_set	  OUT SYS_REFCURSOR
15:39:59 154  );
15:39:59 155  
15:39:59 156  PROCEDURE GET_OFFER_CHAINS_META_DATA (
15:39:59 157  	in_offer_chain_ids IN VARCHAR2,
15:39:59 158  	in_meta_data_name  IN VARCHAR2,
15:39:59 159  	out_result_set	   OUT SYS_REFCURSOR
15:39:59 160  );
15:39:59 161  
15:39:59 162  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
15:39:59 163  	in_offer_id    IN NUMBER,
15:39:59 164  	out_result_set OUT SYS_REFCURSOR
15:39:59 165  );
15:39:59 166  
15:39:59 167  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
15:39:59 168  	in_offer_chain_1 IN NUMBER,
15:39:59 169  	in_offer_chain_2 IN NUMBER,
15:39:59 170  	out_result_set	OUT SYS_REFCURSOR
15:39:59 171  );
15:39:59 172  
15:39:59 173  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
15:39:59 174  	in_offer_chain_id IN NUMBER,
15:39:59 175  	in_meta_data_name IN VARCHAR2,
15:39:59 176  	out_value	  OUT VARCHAR2
15:39:59 177  );
15:39:59 178  
15:39:59 179  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
15:39:59 180  	in_offer_chain_id   IN NUMBER,
15:39:59 181  	in_eligibility_name IN VARCHAR2,
15:39:59 182  	out_value	    OUT VARCHAR2
15:39:59 183  );
15:39:59 184  
15:39:59 185  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
15:39:59 186  	in_offer_id    IN NUMBER,
15:39:59 187  	out_result_set OUT SYS_REFCURSOR
15:39:59 188  );
15:39:59 189  
15:39:59 190  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
15:39:59 191  	in_meta_data_name  IN VARCHAR2,
15:39:59 192  	in_meta_data_value IN VARCHAR2,
15:39:59 193  	out_result_set	   OUT SYS_REFCURSOR
15:39:59 194  );
15:39:59 195  
15:39:59 196  PROCEDURE GET_ALL_META_DATA (
15:39:59 197  	in_offer_chain_id IN NUMBER,
15:39:59 198  	out_result_set	  OUT SYS_REFCURSOR
15:39:59 199  );
15:39:59 200  
15:39:59 201  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
15:39:59 202  	in_group_id	  IN NUMBER,
15:39:59 203  	in_offer_chain_id IN NUMBER,
15:39:59 204  	out_is_eligible   OUT NUMBER,
15:39:59 205  	out_concurrent_subscription_id OUT NUMBER
15:39:59 206  );
15:39:59 207  
15:39:59 208  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:39:59 209  	in_offer_chain_id	 IN NUMBER,
15:39:59 210  	in_action_name		 IN VARCHAR2,
15:39:59 211  	out_notification_type_id OUT NUMBER
15:39:59 212  );
15:39:59 213  
15:39:59 214  END PROCS_OFFER_CHAIN_V23;
15:39:59 215  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.05
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_polling_sync.sql
Compiling header for procs_polling_sync.sql
15:39:59 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
15:39:59   2  AS
15:39:59   3  
15:39:59   4  ----
15:39:59   5  --------------------------------------------------------------------------------
15:39:59   6  ----
15:39:59   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
15:39:59   8  	      returned from the previous call and store the result for the
15:39:59   9  	      next call.
15:39:59  10  	     This method will identify and create new Sync Events from trigger activity data */
15:39:59  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
15:39:59  12  ----
15:39:59  13  --------------------------------------------------------------------------------
15:39:59  14  ----
15:39:59  15  	  /* Internal logic call may need to be used to fix poller data */
15:39:59  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
15:39:59  17  ----
15:39:59  18  --------------------------------------------------------------------------------
15:39:59  19  ----
15:39:59  20  	  /* User request for sync events. Params should be hard-coded in the application
15:39:59  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
15:39:59  22  	      skipped. Last read time is logged.
15:39:59  23  	     Params:
15:39:59  24  		  set_maximum: Size of each transfer set
15:39:59  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
15:39:59  26  	     Returns:
15:39:59  27  		  set_id: Transfer set id, duplicated for all entries
15:39:59  28  		  group_id: regi_id value
15:39:59  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
15:39:59  30  	  */
15:39:59  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
15:39:59  32  ----
15:39:59  33  --------------------------------------------------------------------------------
15:39:59  34  ----
15:39:59  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
15:39:59  36  	      single confirmation per transfer set.
15:39:59  37  	  */
15:39:59  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
15:39:59  39  ----
15:39:59  40  --------------------------------------------------------------------------------
15:39:59  41  ----
15:39:59  42  	  procedure SET_LAST_RUN(ts in timestamp);
15:39:59  43  	  procedure GET_LAST_RUN(ts out timestamp);
15:39:59  44  END PROCS_POLLING_SYNC;
15:39:59  45  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.06
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_process_retry.sql
Compiling header for procs_process_retry.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_PROCESS_RETRY_THROTTLE
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_PROCESS_RETRY_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE LOG_RETRY(
15:39:59   4  	  in_process_name IN VARCHAR2,
15:39:59   5  	  in_generic_id   IN NUMBER,
15:39:59   6  	  in_date	  IN VARCHAR2,
15:39:59   7  	  out_success	   OUT NUMBER
15:39:59   8  );
15:39:59   9  
15:39:59  10  PROCEDURE LOG_RETRY_DATE(
15:39:59  11  	  in_process_name IN VARCHAR2,
15:39:59  12  	  in_generic_id   IN NUMBER,
15:39:59  13  	  in_date	  IN DATE,
15:39:59  14  	  out_success	   OUT NUMBER
15:39:59  15  );
15:39:59  16  
15:39:59  17  PROCEDURE DELETE_RETRY(
15:39:59  18  	  in_process_name IN VARCHAR2,
15:39:59  19  	  in_remove_minutes  IN NUMBER
15:39:59  20  );
15:39:59  21  
15:39:59  22  PROCEDURE GET_SYSDATE (
15:39:59  23  	  out_date OUT VARCHAR2
15:39:59  24  );
15:39:59  25  
15:39:59  26  END PROCS_PROCESS_RETRY_V23;
15:39:59  27  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.06
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_product.sql
Compiling header for procs_product.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_PRODUCT
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE GET_PRODUCTS (
15:39:59   4  /*
15:39:59   5  Throws exceptions:
15:39:59   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:39:59   7  */
15:39:59   8  	in_status_id   IN  NUMBER,
15:39:59   9  	out_result_set OUT SYS_REFCURSOR
15:39:59  10  );
15:39:59  11  
15:39:59  12  PROCEDURE GET_PRODUCT_BY_ID (
15:39:59  13  	in_product_id  IN NUMBER,
15:39:59  14  	out_result_set OUT SYS_REFCURSOR
15:39:59  15  );
15:39:59  16  
15:39:59  17  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
15:39:59  18  	in_line_item_id IN NUMBER,
15:39:59  19  	out_result_set	OUT SYS_REFCURSOR
15:39:59  20  );
15:39:59  21  
15:39:59  22  PROCEDURE GET_PRD_OFFERING_BY_ID (
15:39:59  23  	in_product_offering_id IN NUMBER,
15:39:59  24  	out_result_set	OUT SYS_REFCURSOR
15:39:59  25  );
15:39:59  26  
15:39:59  27  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
15:39:59  28  	in_product_offering_id IN NUMBER,
15:39:59  29  	out_result_set	       OUT SYS_REFCURSOR
15:39:59  30  );
15:39:59  31  
15:39:59  32  END PROCS_PRODUCT_V23;
15:39:59  33  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.03
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_reconciliation_cru.sql
Compiling header for procs_reconciliation_cru.sql
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
15:39:59 SQL> --------------------------------------------------------------------------------
15:39:59 SQL> 
15:39:59 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V23" AS
15:39:59   2  
15:39:59   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
15:39:59   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
15:39:59   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
15:39:59   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:39:59   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
15:39:59   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
15:39:59   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
15:39:59  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
15:39:59  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
15:39:59  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:39:59  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
15:39:59  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
15:39:59  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
15:39:59  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:39:59  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
15:39:59  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
15:39:59  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
15:39:59  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
15:39:59  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
15:39:59  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
15:39:59  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
15:39:59  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
15:39:59  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
15:39:59  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
15:39:59  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
15:39:59  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
15:39:59  29  );
15:39:59  30  
15:39:59  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
15:39:59  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
15:39:59  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
15:39:59  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
15:39:59  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
15:39:59  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
15:39:59  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:39:59  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
15:39:59  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
15:39:59  40  );
15:39:59  41  
15:39:59  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
15:39:59  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
15:39:59  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
15:39:59  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:39:59  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
15:39:59  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
15:39:59  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
15:39:59  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
15:39:59  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
15:39:59  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
15:39:59  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
15:39:59  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
15:39:59  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
15:39:59  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
15:39:59  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
15:39:59  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
15:39:59  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
15:39:59  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
15:39:59  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
15:39:59  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
15:39:59  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
15:39:59  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
15:39:59  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
15:39:59  65  );
15:39:59  66  
15:39:59  67  PROCEDURE CREATE_CPT_EXCEPTION (
15:39:59  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
15:39:59  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
15:39:59  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:39:59  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
15:39:59  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
15:39:59  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
15:39:59  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
15:39:59  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
15:39:59  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
15:39:59  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
15:39:59  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
15:39:59  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:39:59  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:39:59  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
15:39:59  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
15:39:59  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
15:39:59  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
15:39:59  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
15:39:59  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
15:39:59  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
15:39:59  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
15:39:59  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
15:39:59  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
15:39:59  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
15:39:59  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
15:39:59  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
15:39:59  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
15:39:59  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
15:39:59  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
15:39:59  97  );
15:39:59  98  
15:39:59  99  PROCEDURE CREATE_CPT_DEPOSIT (
15:39:59 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
15:39:59 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
15:39:59 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:39:59 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
15:39:59 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
15:39:59 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
15:39:59 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
15:39:59 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
15:39:59 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
15:39:59 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
15:39:59 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
15:39:59 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:39:59 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:39:59 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
15:39:59 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
15:39:59 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
15:39:59 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
15:39:59 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
15:39:59 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
15:39:59 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
15:39:59 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
15:39:59 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
15:39:59 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
15:39:59 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
15:39:59 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
15:39:59 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
15:39:59 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
15:39:59 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
15:39:59 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
15:39:59 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
15:39:59 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
15:39:59 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
15:39:59 132  );
15:39:59 133  
15:39:59 134  PROCEDURE CREATE_PP_SETTLEMENT (
15:39:59 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
15:39:59 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
15:39:59 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:39:59 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
15:39:59 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
15:39:59 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
15:39:59 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
15:39:59 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
15:39:59 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
15:39:59 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
15:39:59 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
15:39:59 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
15:39:59 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
15:39:59 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
15:39:59 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
15:39:59 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
15:39:59 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
15:39:59 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
15:39:59 153  );
15:39:59 154  
15:39:59 155  PROCEDURE CREATE_PP_DISPUTE (
15:39:59 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
15:39:59 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
15:39:59 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:39:59 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
15:39:59 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
15:39:59 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
15:39:59 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
15:39:59 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
15:39:59 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
15:39:59 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
15:39:59 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
15:39:59 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
15:39:59 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
15:39:59 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
15:39:59 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
15:39:59 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
15:39:59 172  );
15:39:59 173  
15:39:59 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
15:39:59 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
15:39:59 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
15:39:59 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:39:59 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
15:39:59 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
15:39:59 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
15:39:59 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
15:39:59 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
15:39:59 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
15:39:59 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
15:39:59 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
15:39:59 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
15:39:59 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
15:39:59 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
15:39:59 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
15:39:59 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
15:39:59 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
15:39:59 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
15:39:59 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
15:39:59 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
15:39:59 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
15:39:59 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
15:39:59 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
15:39:59 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
15:39:59 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
15:39:59 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
15:39:59 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
15:39:59 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
15:39:59 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
15:39:59 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
15:39:59 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
15:39:59 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
15:39:59 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
15:39:59 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
15:39:59 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
15:39:59 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
15:39:59 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
15:39:59 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
15:39:59 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
15:39:59 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
15:39:59 215  );
15:39:59 216  
15:39:59 217  PROCEDURE GET_EXT_SOURCE_LOG (
15:39:59 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:39:59 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
15:39:59 220  	out_result_set		 OUT SYS_REFCURSOR
15:39:59 221  );
15:39:59 222  
15:39:59 223  FUNCTION CHECK_EXT_SOURCE_LOG (
15:39:59 224  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:39:59 225  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
15:39:59 226  ) RETURN NUMBER;
15:39:59 227  
15:39:59 228  PROCEDURE CREATE_AMEX_CHARGEBACK (
15:39:59 229  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
15:39:59 230  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
15:39:59 231  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
15:39:59 232  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
15:39:59 233  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
15:39:59 234  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
15:39:59 235  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
15:39:59 236  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
15:39:59 237  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
15:39:59 238  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
15:39:59 239  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
15:39:59 240  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
15:39:59 241  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
15:39:59 242  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
15:39:59 243  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
15:39:59 244  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
15:39:59 245  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
15:39:59 246  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
15:39:59 247  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
15:39:59 248  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
15:39:59 249  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
15:39:59 250  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
15:39:59 251  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
15:39:59 252  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
15:39:59 253  );
15:39:59 254  
15:39:59 255  END PROCS_RECONCILIATION_CRU_V23;
15:39:59 256  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.13
15:39:59 SQL> 
15:39:59 SQL> prompt Compiling header for procs_reporting.sql
Compiling header for procs_reporting.sql
15:39:59 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
15:39:59   2  
15:39:59   3  ----
15:39:59   4  --------------------------------------------------------------------------------
15:39:59   5  ----
15:39:59   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59   7  ----
15:39:59   8  --------------------------------------------------------------------------------
15:39:59   9  ----
15:39:59  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  11  ----
15:39:59  12  --------------------------------------------------------------------------------
15:39:59  13  ----
15:39:59  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  15  ----
15:39:59  16  --------------------------------------------------------------------------------
15:39:59  17  ----
15:39:59  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  19  ----
15:39:59  20  --------------------------------------------------------------------------------
15:39:59  21  ----
15:39:59  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  23  ----
15:39:59  24  --------------------------------------------------------------------------------
15:39:59  25  ----
15:39:59  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  27  ----
15:39:59  28  --------------------------------------------------------------------------------
15:39:59  29  ----
15:39:59  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  31  ----
15:39:59  32  --------------------------------------------------------------------------------
15:39:59  33  ----
15:39:59  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  35  ----
15:39:59  36  --------------------------------------------------------------------------------
15:39:59  37  ----
15:39:59  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  39  ----
15:39:59  40  --------------------------------------------------------------------------------
15:39:59  41  ----
15:39:59  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  43  ----
15:39:59  44  --------------------------------------------------------------------------------
15:39:59  45  ----
15:39:59  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  47  ----
15:39:59  48  --------------------------------------------------------------------------------
15:39:59  49  ----
15:39:59  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  51  ----
15:39:59  52  --------------------------------------------------------------------------------
15:39:59  53  ----
15:39:59  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  55  ----
15:39:59  56  --------------------------------------------------------------------------------
15:39:59  57  ----
15:39:59  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  59  ----
15:39:59  60  --------------------------------------------------------------------------------
15:39:59  61  ----
15:39:59  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  63  ----
15:39:59  64  --------------------------------------------------------------------------------
15:39:59  65  ----
15:39:59  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  67  ----
15:39:59  68  --------------------------------------------------------------------------------
15:39:59  69  ----
15:39:59  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  71  ----
15:39:59  72  --------------------------------------------------------------------------------
15:39:59  73  ----
15:39:59  74  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  75  ----
15:39:59  76  --------------------------------------------------------------------------------
15:39:59  77  ----
15:39:59  78  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  79  ----
15:39:59  80  --------------------------------------------------------------------------------
15:39:59  81  ----
15:39:59  82  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  83  ----
15:39:59  84  --------------------------------------------------------------------------------
15:39:59  85  ----
15:39:59  86  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  87  ----
15:39:59  88  --------------------------------------------------------------------------------
15:39:59  89  ----
15:39:59  90  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  91  ----
15:39:59  92  --------------------------------------------------------------------------------
15:39:59  93  ----
15:39:59  94  
15:39:59  95  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59  96  ----
15:39:59  97  --------------------------------------------------------------------------------
15:39:59  98  ----
15:39:59  99  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 100  ----
15:39:59 101  --------------------------------------------------------------------------------
15:39:59 102  ----
15:39:59 103  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 104  ----
15:39:59 105  --------------------------------------------------------------------------------
15:39:59 106  ----
15:39:59 107  /**/
15:39:59 108  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 109  ----
15:39:59 110  --------------------------------------------------------------------------------
15:39:59 111  ----
15:39:59 112  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 113  ----
15:39:59 114  --------------------------------------------------------------------------------
15:39:59 115  ----
15:39:59 116  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 117  ----
15:39:59 118  --------------------------------------------------------------------------------
15:39:59 119  ----
15:39:59 120  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 121  ----
15:39:59 122  --------------------------------------------------------------------------------
15:39:59 123  ----
15:39:59 124  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 125  ----
15:39:59 126  --------------------------------------------------------------------------------
15:39:59 127  ----
15:39:59 128  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 129  ----
15:39:59 130  --------------------------------------------------------------------------------
15:39:59 131  ----
15:39:59 132  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 133  ----
15:39:59 134  --------------------------------------------------------------------------------
15:39:59 135  ----
15:39:59 136  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 137  ----
15:39:59 138  --------------------------------------------------------------------------------
15:39:59 139  ----
15:39:59 140  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 141  ----
15:39:59 142  --------------------------------------------------------------------------------
15:39:59 143  ----
15:39:59 144  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 145  ----
15:39:59 146  --------------------------------------------------------------------------------
15:39:59 147  ----
15:39:59 148  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
15:39:59 149  ----
15:39:59 150  --------------------------------------------------------------------------------
15:39:59 151  ----
15:39:59 152  /**/
15:39:59 153  END PROCS_REPORTING;
15:39:59 154  .
15:39:59 SQL> /

Package created.

Elapsed: 00:00:00.23
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_reports.sql
Compiling header for procs_reports.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PROCS_REPORTS
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V23" AS
15:40:00   2  
15:40:00   3  FUNCTION GET_PRODUCT_NAMES(
15:40:00   4  	in_offer_id IN NUMBER
15:40:00   5  ) RETURN VARCHAR2;
15:40:00   6  
15:40:00   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
15:40:00   8  	in_start_date  IN DATE,
15:40:00   9  	in_end_date    IN DATE,
15:40:00  10  	out_result_set OUT SYS_REFCURSOR
15:40:00  11  );
15:40:00  12  
15:40:00  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
15:40:00  14  	in_offer_id	       IN NUMBER,
15:40:00  15  	in_start_date	       IN DATE,
15:40:00  16  	in_end_date	       IN DATE,
15:40:00  17  	out_new_purchasers_num OUT NUMBER,
15:40:00  18  	out_renewals_num       OUT NUMBER,
15:40:00  19  	out_product_names      OUT VARCHAR2,
15:40:00  20  	out_total_dollar_value OUT NUMBER,
15:40:00  21  	out_unique_purchasers  OUT NUMBER
15:40:00  22  );
15:40:00  23  
15:40:00  24  /*
15:40:00  25  FUNCTIONS FOR THE FLASH REPORT
15:40:00  26  */
15:40:00  27  
15:40:00  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
15:40:00  29  	in_offer_id	       IN NUMBER,
15:40:00  30  	in_start_date	       IN DATE,
15:40:00  31  	in_end_date	       IN DATE
15:40:00  32  ) RETURN NUMBER;
15:40:00  33  
15:40:00  34  FUNCTION FLR_RENEWALS_NUM (
15:40:00  35  	in_offer_id	       IN NUMBER,
15:40:00  36  	in_start_date	       IN DATE,
15:40:00  37  	in_end_date	       IN DATE
15:40:00  38  ) RETURN NUMBER;
15:40:00  39  
15:40:00  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
15:40:00  41  	in_offer_id	       IN NUMBER,
15:40:00  42  	in_start_date	       IN DATE,
15:40:00  43  	in_end_date	       IN DATE
15:40:00  44  ) RETURN NUMBER;
15:40:00  45  
15:40:00  46  FUNCTION FLR_UNIQUE_PURCHASERS (
15:40:00  47  	in_offer_id	       IN NUMBER,
15:40:00  48  	in_start_date	       IN DATE,
15:40:00  49  	in_end_date	       IN DATE
15:40:00  50  ) RETURN NUMBER;
15:40:00  51  
15:40:00  52  END PROCS_REPORTS_V23;
15:40:00  53  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.07
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_subscription_cru.sql
Compiling header for procs_subscription_cru.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE CREATE_SUBSCRIPTION(
15:40:00   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
15:40:00   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
15:40:00   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
15:40:00   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
15:40:00   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
15:40:00   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
15:40:00  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
15:40:00  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
15:40:00  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
15:40:00  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
15:40:00  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
15:40:00  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
15:40:00  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
15:40:00  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
15:40:00  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
15:40:00  19  );
15:40:00  20  
15:40:00  21  PROCEDURE UPDATE_SUBSCRIPTION(
15:40:00  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
15:40:00  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
15:40:00  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
15:40:00  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
15:40:00  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
15:40:00  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
15:40:00  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
15:40:00  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:40:00  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
15:40:00  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
15:40:00  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
15:40:00  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
15:40:00  34  );
15:40:00  35  
15:40:00  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
15:40:00  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
15:40:00  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:40:00  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
15:40:00  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:40:00  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
15:40:00  42  );
15:40:00  43  
15:40:00  44  END PROCS_SUBSCRIPTION_CRU_V23;
15:40:00  45  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.06
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_subscription.sql
Compiling header for procs_subscription.sql
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
15:40:00   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
15:40:00   5  	in_updater	     IN VARCHAR2,
15:40:00   6  	in_duration_in_hours IN NUMBER
15:40:00   7  );
15:40:00   8  
15:40:00   9  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
15:40:00  10  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
15:40:00  11  	in_updater    IN VARCHAR2
15:40:00  12  );
15:40:00  13  
15:40:00  14  PROCEDURE START_SUBSCRIPTION_CREATION (
15:40:00  15  	in_group_id	      IN NUMBER,
15:40:00  16  	in_created_by	      IN VARCHAR2,
15:40:00  17  	in_offer_chain_id     IN NUMBER,
15:40:00  18  	in_instrument_type_id IN NUMBER,
15:40:00  19  	in_instrument_id      IN NUMBER,
15:40:00  20  	in_agent_id	      IN NUMBER,
15:40:00  21  	in_note 	      IN VARCHAR2,
15:40:00  22  	out_subscription_id   OUT NUMBER,
15:40:00  23  	out_invoice_id	      OUT NUMBER,
15:40:00  24  	out_new_license_id    OUT NUMBER,
15:40:00  25  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.TRUE
15:40:00  26  );
15:40:00  27  
15:40:00  28  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
15:40:00  29  	in_subscription_id    IN NUMBER,
15:40:00  30  	in_invoice_id	      IN NUMBER,
15:40:00  31  	in_instrument_type_id IN NUMBER,
15:40:00  32  	in_instrument_id      IN NUMBER,
15:40:00  33  	in_created_by	      IN VARCHAR2
15:40:00  34  );
15:40:00  35  
15:40:00  36  PROCEDURE SUSPEND_SUBSCRIPTION(
15:40:00  37  	  in_subs_id	IN NUMBER ,
15:40:00  38  	  in_updated_by IN VARCHAR2
15:40:00  39  );
15:40:00  40  
15:40:00  41  PROCEDURE REACTIVATE_SUBSCRIPTION (
15:40:00  42  	in_subscription_id IN  NUMBER,
15:40:00  43  	in_updated_by	   IN  VARCHAR2
15:40:00  44  );
15:40:00  45  
15:40:00  46  PROCEDURE GET_SUBSCRIPTION_INFO (
15:40:00  47  	  in_subscription_id IN  NUMBER,
15:40:00  48  	  out_result_set      OUT SYS_REFCURSOR
15:40:00  49  );
15:40:00  50  
15:40:00  51  PROCEDURE GET_SUBSCRIPTION_INVOICES (
15:40:00  52  	in_subscription_id  IN	NUMBER,
15:40:00  53  	out_result_set	    OUT SYS_REFCURSOR
15:40:00  54  );
15:40:00  55  
15:40:00  56  PROCEDURE GET_SUBSCRIPTION_NOTES (
15:40:00  57  	in_subscription_id  IN	NUMBER,
15:40:00  58  	out_result_set	    OUT SYS_REFCURSOR
15:40:00  59  );
15:40:00  60  
15:40:00  61  PROCEDURE ANNOTATE_SUBSCRIPTION (
15:40:00  62  	in_subscription_id IN  NUMBER,
15:40:00  63  	in_agent_id	   IN  NUMBER,
15:40:00  64  	in_note 	   IN  VARCHAR2,
15:40:00  65  	in_created_by	   IN  VARCHAR2
15:40:00  66  );
15:40:00  67  
15:40:00  68  PROCEDURE GET_CANCEL_REASONS (
15:40:00  69  	out_result_set OUT    SYS_REFCURSOR
15:40:00  70  );
15:40:00  71  
15:40:00  72  FUNCTION GET_RENEWAL_DATE (
15:40:00  73  	in_subscription_id in NUMBER
15:40:00  74  ) RETURN DATE;
15:40:00  75  
15:40:00  76  FUNCTION GET_RECENT_CHARGE (
15:40:00  77  	in_subscription_id IN NUMBER
15:40:00  78  ) RETURN NUMBER;
15:40:00  79  
15:40:00  80  FUNCTION GET_BILLING_CYCLE (
15:40:00  81  	in_subscription_id IN NUMBER
15:40:00  82  ) RETURN VARCHAR2;
15:40:00  83  
15:40:00  84  PROCEDURE REFUND_SUBSCRIPTION (
15:40:00  85  	in_subscription_id IN NUMBER,
15:40:00  86  	in_invoice_id	   IN NUMBER,
15:40:00  87  	in_refund_amount   IN NUMBER,
15:40:00  88  	in_note 	   IN VARCHAR2,
15:40:00  89  	in_created_by	   IN VARCHAR2,
15:40:00  90  	out_charge_id	   OUT NUMBER
15:40:00  91  );
15:40:00  92  
15:40:00  93  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
15:40:00  94  	in_subscription_id	IN NUMBER,
15:40:00  95  	in_effective_start_date IN DATE,
15:40:00  96  	in_effective_end_date	IN DATE,
15:40:00  97  	in_note 		IN VARCHAR2,
15:40:00  98  	in_updated_by		IN VARCHAR2
15:40:00  99  );
15:40:00 100  
15:40:00 101  FUNCTION CALC_SUBSCRIPTION_END_DATE (
15:40:00 102  	in_subscription_id IN NUMBER
15:40:00 103  ) RETURN DATE;
15:40:00 104  
15:40:00 105  PROCEDURE HAS_FUTURE_LICENSE (
15:40:00 106  	in_license_id IN  NUMBER,
15:40:00 107  	out_result    OUT NUMBER
15:40:00 108  );
15:40:00 109  
15:40:00 110  PROCEDURE CLOSE_SUBSCRIPTION (
15:40:00 111  	in_subscription_id IN NUMBER,
15:40:00 112  	in_updated_by	   IN VARCHAR2
15:40:00 113  );
15:40:00 114  
15:40:00 115  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
15:40:00 116  	in_subscription_id IN NUMBER,
15:40:00 117  	out_group_id	   OUT NUMBER
15:40:00 118  );
15:40:00 119  
15:40:00 120  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
15:40:00 121  	in_subscription_id IN NUMBER,
15:40:00 122  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 123  );
15:40:00 124  
15:40:00 125  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
15:40:00 126  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
15:40:00 127  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
15:40:00 128  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
15:40:00 129  );
15:40:00 130  
15:40:00 131  PROCEDURE GET_ACTIVE_INVOICES_IDS (
15:40:00 132  	in_subscription_id IN NUMBER,
15:40:00 133  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 134  );
15:40:00 135  
15:40:00 136  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
15:40:00 137  	in_invoice_id	     IN NUMBER,
15:40:00 138  	in_updated_by	     IN VARCHAR2,
15:40:00 139  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
15:40:00 140  );
15:40:00 141  
15:40:00 142  PROCEDURE FINALIZE_CANCELATION (
15:40:00 143  	in_subscription_id    IN NUMBER,
15:40:00 144  	in_cancelation_reason IN VARCHAR2,
15:40:00 145  	in_cancelation_date   IN DATE,
15:40:00 146  	in_note 	      IN VARCHAR2,
15:40:00 147  	in_agent_id	      IN NUMBER,
15:40:00 148  	in_updated_by	      IN VARCHAR2
15:40:00 149  );
15:40:00 150  
15:40:00 151  PROCEDURE FINALIZE_FALSE_START (
15:40:00 152  	in_subscription_id    IN NUMBER,
15:40:00 153  	in_cancelation_date   IN DATE,
15:40:00 154  	in_note 	      IN VARCHAR2,
15:40:00 155  	in_agent_id	      IN NUMBER,
15:40:00 156  	in_updated_by	      IN VARCHAR2
15:40:00 157  );
15:40:00 158  
15:40:00 159  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
15:40:00 160  	in_subscription_id IN NUMBER
15:40:00 161  ) RETURN NUMBER;
15:40:00 162  
15:40:00 163  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
15:40:00 164  	in_subscription_id IN NUMBER,
15:40:00 165  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 166  );
15:40:00 167  
15:40:00 168  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
15:40:00 169  	in_subscription_id IN NUMBER,
15:40:00 170  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 171  );
15:40:00 172  
15:40:00 173  PROCEDURE GET_SUBSCR_LIC_OFFER (
15:40:00 174  	in_subscription_id IN NUMBER,
15:40:00 175  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 176  );
15:40:00 177  
15:40:00 178  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
15:40:00 179  	in_subscription_id IN NUMBER,
15:40:00 180  	out_result	   OUT NUMBER
15:40:00 181  );
15:40:00 182  
15:40:00 183  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
15:40:00 184  	in_group_id	   IN NUMBER,
15:40:00 185  	in_offer_chain_id  IN NUMBER,
15:40:00 186  	out_result	   out number
15:40:00 187  );
15:40:00 188  
15:40:00 189  PROCEDURE GET_EXISTING_SUBSCR_IDS (
15:40:00 190  	in_group_id	   IN NUMBER,
15:40:00 191  	in_offer_chain_id  IN NUMBER,
15:40:00 192  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 193  );
15:40:00 194  
15:40:00 195  PROCEDURE ADD_META_DATA (
15:40:00 196  	in_subscription_id IN NUMBER,
15:40:00 197  	in_name 	   IN VARCHAR2,
15:40:00 198  	in_value	   IN VARCHAR2,
15:40:00 199  	in_created_by	   IN VARCHAR2
15:40:00 200  );
15:40:00 201  
15:40:00 202  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
15:40:00 203  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
15:40:00 204  	out_result_set	     OUT SYS_REFCURSOR
15:40:00 205  );
15:40:00 206  
15:40:00 207  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
15:40:00 208  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
15:40:00 209  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 210  );
15:40:00 211  
15:40:00 212  PROCEDURE GET_OPEN_CHARGES_BY_SUBID (
15:40:00 213  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:40:00 214  	out_result_set	    OUT SYS_REFCURSOR
15:40:00 215  );
15:40:00 216  
15:40:00 217  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
15:40:00 218  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
15:40:00 219  ) RETURN NUMBER;
15:40:00 220  
15:40:00 221  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
15:40:00 222  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
15:40:00 223  ) RETURN VARCHAR2;
15:40:00 224  
15:40:00 225  PROCEDURE GET_ACTIVE_MEU_SUBS (
15:40:00 226  	out_result_set	    OUT SYS_REFCURSOR
15:40:00 227  );
15:40:00 228  
15:40:00 229  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
15:40:00 230  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:40:00 231  	out_offer_id	    OUT LICENSE.ID%TYPE
15:40:00 232  );
15:40:00 233  
15:40:00 234  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
15:40:00 235  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:40:00 236  	out_license_id	    OUT LICENSE.ID%TYPE
15:40:00 237  );
15:40:00 238  
15:40:00 239  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
15:40:00 240  	out_result_set	    OUT SYS_REFCURSOR
15:40:00 241  );
15:40:00 242  
15:40:00 243  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
15:40:00 244  	out_result_set	    OUT SYS_REFCURSOR
15:40:00 245  );
15:40:00 246  
15:40:00 247  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
15:40:00 248  	out_result_set	    OUT SYS_REFCURSOR
15:40:00 249  );
15:40:00 250  
15:40:00 251  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
15:40:00 252  	in_max_days_until_close IN NUMBER,
15:40:00 253  	in_num_subs_to_fetch	IN NUMBER,
15:40:00 254  	out_result_set		OUT SYS_REFCURSOR
15:40:00 255  );
15:40:00 256  
15:40:00 257  
15:40:00 258  END PROCS_SUBSCRIPTION_V23;
15:40:00 259  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.07
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_system.sql
Compiling header for procs_system.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PROCS_SYSTEM
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE INCREMENT_VERSION;
15:40:00   4  
15:40:00   5  PROCEDURE CHECK_VERSION(
15:40:00   6  	  in_vers    IN NUMBER,
15:40:00   7  	  out_result OUT NUMBER
15:40:00   8  );
15:40:00   9  
15:40:00  10  END PROCS_SYSTEM_V23;
15:40:00  11  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.04
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_taxes_cru.sql
Compiling header for procs_taxes_cru.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PROCS_TAXES_CRU
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE CREATE_TAX (
15:40:00   4  	inout_tax_id		 IN OUT NUMBER,
15:40:00   5  	in_tax_type_id		 IN NUMBER,
15:40:00   6  	in_calculated_amount	 IN NUMBER,
15:40:00   7  	in_created_by		 IN VARCHAR2,
15:40:00   8  	in_line_item_id 	 IN NUMBER,
15:40:00   9  	in_effective_rate	 IN VARCHAR2,
15:40:00  10  	in_taxable_amount	 IN NUMBER,
15:40:00  11  	in_tax_rule_id		 IN NUMBER,
15:40:00  12  	in_jurisdiction_level_id IN NUMBER,
15:40:00  13  	in_jurisdiction_name	 IN VARCHAR2,
15:40:00  14  	in_jurisdiction_id	 IN VARCHAR2,
15:40:00  15  	in_ext_tax_type 	 IN VARCHAR2,
15:40:00  16  	in_ext_result		 IN VARCHAR2,
15:40:00  17  	in_imposition_type	 IN VARCHAR2,
15:40:00  18  	in_imposition		 IN VARCHAR2
15:40:00  19  );
15:40:00  20  
15:40:00  21  END PROCS_TAXES_CRU_V23;
15:40:00  22  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.05
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_taxes.sql
Compiling header for procs_taxes.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PROCS_TAXES
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE ADD_TAX (
15:40:00   4  	in_tax_type_id		 IN NUMBER,
15:40:00   5  	in_calculated_amount	 IN NUMBER,
15:40:00   6  	in_created_by		 IN VARCHAR2,
15:40:00   7  	in_line_item_id 	 IN NUMBER,
15:40:00   8  	in_effective_rate	 IN VARCHAR2,
15:40:00   9  	in_taxable_amount	 IN NUMBER,
15:40:00  10  	in_tax_rule_id		 IN NUMBER,
15:40:00  11  	in_jurisdiction_level_id IN NUMBER,
15:40:00  12  	in_jurisdiction_name	 IN VARCHAR2,
15:40:00  13  	in_jurisdiction_id	 IN VARCHAR2,
15:40:00  14  	in_ext_tax_type 	 IN VARCHAR2,
15:40:00  15  	in_ext_result		 IN VARCHAR2,
15:40:00  16  	in_imposition_type	 IN VARCHAR2,
15:40:00  17  	in_imposition		 IN VARCHAR2
15:40:00  18  );
15:40:00  19  
15:40:00  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
15:40:00  21  	in_country_code IN CHAR,
15:40:00  22  	in_check_date IN DATE,
15:40:00  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V23.FALSE
15:40:00  24  );
15:40:00  25  
15:40:00  26  PROCEDURE GET_TAX_CATEGORY (
15:40:00  27  	in_tax_category_id IN NUMBER,
15:40:00  28  	out_result_set	   OUT SYS_REFCURSOR
15:40:00  29  );
15:40:00  30  
15:40:00  31  END PROCS_TAXES_V23;
15:40:00  32  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.06
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_test.sql
Compiling header for procs_test.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PROCS_TEST
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE TEST_CLEAR_ALL;
15:40:00   4  PROCEDURE TEST_CLEAR_PRODUCTS;
15:40:00   5  
15:40:00   6  /********************************************/
15:40:00   7  
15:40:00   8  PROCEDURE TEST_GET_ACCOUNT (
15:40:00   9  	in_group_id	IN NUMBER,
15:40:00  10  	out_result_set	OUT SYS_REFCURSOR
15:40:00  11  );
15:40:00  12  
15:40:00  13  /********************************************/
15:40:00  14  
15:40:00  15  PROCEDURE TEST_GET_SUBSCRIPTION (
15:40:00  16  	in_subscription_id IN NUMBER,
15:40:00  17  	out_result_set	   OUT SYS_REFCURSOR
15:40:00  18  );
15:40:00  19  
15:40:00  20  /*********************************************/
15:40:00  21  
15:40:00  22  PROCEDURE TEST_DELETE_INVOICE (
15:40:00  23  	in_invoice_id IN NUMBER
15:40:00  24  );
15:40:00  25  
15:40:00  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
15:40:00  27  	in_group_id IN NUMBER
15:40:00  28  );
15:40:00  29  
15:40:00  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
15:40:00  31  	in_start_group_id IN NUMBER,
15:40:00  32  	in_end_group_id   IN NUMBER
15:40:00  33  );
15:40:00  34  
15:40:00  35  /**********************************************/
15:40:00  36  
15:40:00  37  FUNCTION TEST_IS_INVOICE_EXISTS(
15:40:00  38  /*
15:40:00  39  1 - exists
15:40:00  40  0 - not exists
15:40:00  41  */
15:40:00  42  	in_invoice_id IN NUMBER
15:40:00  43  ) RETURN NUMBER;
15:40:00  44  
15:40:00  45  PROCEDURE TEST_GET_INVOICE_INFO (
15:40:00  46  	in_invoice_id  IN NUMBER,
15:40:00  47  	out_result_set OUT SYS_REFCURSOR
15:40:00  48  );
15:40:00  49  
15:40:00  50  /******************************************************************************/
15:40:00  51  
15:40:00  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
15:40:00  53  	in_offer_chain_id in number
15:40:00  54  );
15:40:00  55  
15:40:00  56  END PROCS_TEST_V23;
15:40:00  57  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.10
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_transaction_cru.sql
Compiling header for procs_transaction_cru.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PROCS_TRANSACTION_CRU
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE CREATE_TRANSACTION (
15:40:00   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
15:40:00   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
15:40:00   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
15:40:00   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
15:40:00   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
15:40:00   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
15:40:00  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V23.FALSE,
15:40:00  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
15:40:00  12  );
15:40:00  13  
15:40:00  14  PROCEDURE UPDATE_TRANSACTION (
15:40:00  15  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
15:40:00  16  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
15:40:00  17  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
15:40:00  18  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
15:40:00  19  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
15:40:00  20  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
15:40:00  21  );
15:40:00  22  
15:40:00  23  PROCEDURE READ_TRANSACTION (
15:40:00  24  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:40:00  25  	out_result_set	  OUT SYS_REFCURSOR
15:40:00  26  );
15:40:00  27  
15:40:00  28  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
15:40:00  29  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
15:40:00  30  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
15:40:00  31  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
15:40:00  32  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:40:00  33  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
15:40:00  34  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
15:40:00  35  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
15:40:00  36  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
15:40:00  37  );
15:40:00  38  
15:40:00  39  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:40:00  40  /*
15:40:00  41  Throws exceptions:
15:40:00  42  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  43  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
15:40:00  44  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  45  */
15:40:00  46  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:40:00  47  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:40:00  48  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:40:00  49  );
15:40:00  50  
15:40:00  51  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
15:40:00  52  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
15:40:00  53  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
15:40:00  54  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:40:00  55  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
15:40:00  56  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
15:40:00  57  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
15:40:00  58  );
15:40:00  59  
15:40:00  60  END PROCS_TRANSACTION_CRU_V23;
15:40:00  61  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.09
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for procs_transaction.sql
Compiling header for procs_transaction.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PROCS_TRANSACTION
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE CREATE_TRANSACTION (
15:40:00   4  /*
15:40:00   5  Throws exceptions:
15:40:00   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00   8  */
15:40:00   9  	in_transaction_id	  IN NUMBER,
15:40:00  10  	in_status_id		  IN NUMBER,
15:40:00  11  	in_amount		  IN NUMBER,
15:40:00  12  	in_created_by		  IN VARCHAR2,
15:40:00  13  	in_order_id		  IN VARCHAR2,
15:40:00  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE,
15:40:00  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
15:40:00  16  	out_transaction_id	  OUT NUMBER
15:40:00  17  );
15:40:00  18  
15:40:00  19  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
15:40:00  20  /*
15:40:00  21  Throws exceptions:
15:40:00  22  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  23  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  24  */
15:40:00  25  	in_transaction_id	   IN NUMBER,
15:40:00  26  	in_trans_attempt_status    IN NUMBER,
15:40:00  27  	in_external_status_code    IN VARCHAR2,
15:40:00  28  	in_external_status_message IN VARCHAR2,
15:40:00  29  	in_created_by		   IN VARCHAR2,
15:40:00  30  	in_ext_transaction_id	   IN VARCHAR2,
15:40:00  31  	out_transaction_attempt_id OUT NUMBER
15:40:00  32  );
15:40:00  33  
15:40:00  34  PROCEDURE UPDATE_TRANSACTION_STATUS (
15:40:00  35  /*
15:40:00  36  Throws exceptions:
15:40:00  37  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  38  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  39  */
15:40:00  40  	in_transaction_id	 IN NUMBER,
15:40:00  41  	in_updated_by		 IN VARCHAR2,
15:40:00  42  	in_transaction_status_id IN NUMBER
15:40:00  43  );
15:40:00  44  
15:40:00  45  PROCEDURE UPDATE_TRANSACTION_SETTLED (
15:40:00  46  /*
15:40:00  47  Throws exceptions:
15:40:00  48  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  49  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  50  */
15:40:00  51  	in_transaction_id	 IN NUMBER,
15:40:00  52  	in_updated_by		 IN VARCHAR2,
15:40:00  53  	in_is_settled		 IN NUMBER
15:40:00  54  );
15:40:00  55  
15:40:00  56  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
15:40:00  57  /*
15:40:00  58  Throws exceptions:
15:40:00  59  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  60  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  61  */
15:40:00  62  	in_transaction_attempt_id IN NUMBER,
15:40:00  63  	in_updated_by		  IN VARCHAR2
15:40:00  64  );
15:40:00  65  
15:40:00  66  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
15:40:00  67  /*
15:40:00  68  Throws exceptions:
15:40:00  69  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  70  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  71  */
15:40:00  72  	in_transaction_attempt_id     IN NUMBER,
15:40:00  73  	in_transaction_attempt_status IN NUMBER
15:40:00  74  );
15:40:00  75  
15:40:00  76  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
15:40:00  77  /*
15:40:00  78  Throws exceptions:
15:40:00  79  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  80  */
15:40:00  81  	in_transaction_id	      IN NUMBER,
15:40:00  82  	in_transaction_attempt_status IN NUMBER,
15:40:00  83  	out_result_set		      OUT SYS_REFCURSOR
15:40:00  84  );
15:40:00  85  
15:40:00  86  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
15:40:00  87  /*
15:40:00  88  Throws exceptions:
15:40:00  89  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  90  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  91  */
15:40:00  92  	in_transaction_attempt_id IN NUMBER,
15:40:00  93  	in_ext_status_code	  IN VARCHAR2,
15:40:00  94  	in_ext_status_message	  IN VARCHAR2,
15:40:00  95  	in_ext_transaction_id	  IN VARCHAR2
15:40:00  96  );
15:40:00  97  
15:40:00  98  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
15:40:00  99  /*
15:40:00 100  Throws exceptions:
15:40:00 101  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 102  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 103  */
15:40:00 104  	in_transaction_id IN  NUMBER,
15:40:00 105  	out_attempts_num  OUT NUMBER
15:40:00 106  );
15:40:00 107  
15:40:00 108  PROCEDURE GET_TRANSACTION_AMOUNT (
15:40:00 109  /*
15:40:00 110  Throws exceptions:
15:40:00 111  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 112  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 113  */
15:40:00 114  	in_transaction_id      IN  NUMBER,
15:40:00 115  	out_transaction_amount OUT NUMBER
15:40:00 116  );
15:40:00 117  
15:40:00 118  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
15:40:00 119  /*
15:40:00 120  Throws exceptions:
15:40:00 121  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 122  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 123  */
15:40:00 124  	in_charge_id   IN  NUMBER,
15:40:00 125  	out_result_set OUT SYS_REFCURSOR
15:40:00 126  );
15:40:00 127  
15:40:00 128  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
15:40:00 129  /*
15:40:00 130  Throws exceptions:
15:40:00 131  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 132  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 133  */
15:40:00 134  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
15:40:00 135  	out_result_set OUT SYS_REFCURSOR
15:40:00 136  );
15:40:00 137  
15:40:00 138  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
15:40:00 139  /*
15:40:00 140  Throws exceptions:
15:40:00 141  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 142  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 143  */
15:40:00 144  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
15:40:00 145  	out_result_set OUT SYS_REFCURSOR
15:40:00 146  );
15:40:00 147  
15:40:00 148  PROCEDURE GET_TRANSACTION_ATTEMPTS (
15:40:00 149  /*
15:40:00 150  Throws exceptions:
15:40:00 151  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 152  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 153  */
15:40:00 154  	in_transaction_id IN  NUMBER,
15:40:00 155  	out_result_set	  OUT SYS_REFCURSOR
15:40:00 156  );
15:40:00 157  
15:40:00 158  PROCEDURE RESERVE_TRANSACTION_ID (
15:40:00 159  /*
15:40:00 160  Throws exceptions:
15:40:00 161  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 162  */
15:40:00 163  	out_transaction_id OUT NUMBER
15:40:00 164  );
15:40:00 165  
15:40:00 166  PROCEDURE GET_TRANSACTION_BY_ID (
15:40:00 167  /*
15:40:00 168  Throws exceptions:
15:40:00 169  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 170  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 171  */
15:40:00 172  	in_transaction_id IN NUMBER,
15:40:00 173  	out_result_set	  OUT SYS_REFCURSOR
15:40:00 174  );
15:40:00 175  
15:40:00 176  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:40:00 177  /*
15:40:00 178  Throws exceptions:
15:40:00 179  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 180  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
15:40:00 181  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 182  */
15:40:00 183  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:40:00 184  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:40:00 185  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:40:00 186  );
15:40:00 187  
15:40:00 188  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
15:40:00 189  /*
15:40:00 190  Throws exceptions:
15:40:00 191  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 192  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 193  */
15:40:00 194  	in_invoice_id	IN  NUMBER,
15:40:00 195  	out_result_set OUT SYS_REFCURSOR
15:40:00 196  );
15:40:00 197  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
15:40:00 198  /*
15:40:00 199  Throws exceptions:
15:40:00 200  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 201  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 202  */
15:40:00 203  	in_transaction_id IN  NUMBER,
15:40:00 204  	out_is_successfull  OUT NUMBER
15:40:00 205  );
15:40:00 206  
15:40:00 207  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
15:40:00 208  	in_transaction_id IN NUMBER
15:40:00 209  ) RETURN NUMBER;
15:40:00 210  
15:40:00 211  FUNCTION GET_TRANSACTION_INTRL_TAXES (
15:40:00 212  	in_transaction_id IN NUMBER
15:40:00 213  ) RETURN NUMBER;
15:40:00 214  
15:40:00 215  -- norlov: #38796
15:40:00 216  PROCEDURE GET_TRANSACTIONS (
15:40:00 217  /*
15:40:00 218  Throws exceptions:
15:40:00 219  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 220  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 221  */
15:40:00 222  	in_group_id	      IN  NUMBER,
15:40:00 223  	in_invoice_id	      IN NUMBER DEFAULT NULL,
15:40:00 224  	in_subscription_id    IN NUMBER DEFAULT NULL,
15:40:00 225  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
15:40:00 226  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
15:40:00 227  	in_transaction_status IN NUMBER DEFAULT NULL,
15:40:00 228  	out_result_set	      OUT SYS_REFCURSOR
15:40:00 229  );
15:40:00 230  
15:40:00 231  FUNCTION IS_TRANSACTION_COLLECTED (
15:40:00 232  /*
15:40:00 233  Throws:
15:40:00 234  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 235  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 236  Returns:
15:40:00 237  GLOBAL_CONST.TRUE if transaction collected,
15:40:00 238  GLOBAL_CONST.FALSE else
15:40:00 239  */
15:40:00 240  	in_transaction_id IN NUMBER
15:40:00 241  ) RETURN NUMBER;
15:40:00 242  
15:40:00 243  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
15:40:00 244  /*
15:40:00 245  Throws exceptions:
15:40:00 246  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 247  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 248  */
15:40:00 249  	in_charge_id   in  number,
15:40:00 250  	out_attempt_count out number
15:40:00 251  );
15:40:00 252  
15:40:00 253  END PROCS_TRANSACTION_V23;
15:40:00 254  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.04
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for public_procs_billing.sql
Compiling header for public_procs_billing.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PUBLIC_PROCS_BILLING
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:40:00   4  /*
15:40:00   5  Throws exceptions:
15:40:00   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00   8  */
15:40:00   9  	  in_offer_chain_id IN	 NUMBER,
15:40:00  10  	  out_result_set    OUT  SYS_REFCURSOR
15:40:00  11  );
15:40:00  12  
15:40:00  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
15:40:00  14  /*
15:40:00  15  Throws exceptions:
15:40:00  16  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  17  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  18  */
15:40:00  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:00  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
15:40:00  21  );
15:40:00  22  
15:40:00  23  PROCEDURE GET_PENDING_INVOICES (
15:40:00  24  /*
15:40:00  25  Throws exceptions:
15:40:00  26  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  27  */
15:40:00  28  	out_result_set	     OUT SYS_REFCURSOR,
15:40:00  29  	in_row_number	     IN NUMBER DEFAULT NULL
15:40:00  30  );
15:40:00  31  
15:40:00  32  PROCEDURE GET_PENDING_REFUND_CHARGES (
15:40:00  33  /*
15:40:00  34  Throws exceptions:
15:40:00  35  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  36  */
15:40:00  37  	out_result_set	    OUT SYS_REFCURSOR,
15:40:00  38  	in_row_number	    IN NUMBER DEFAULT NULL
15:40:00  39  );
15:40:00  40  
15:40:00  41  PROCEDURE GET_UNPROCESSED_CHARGES (
15:40:00  42  /*
15:40:00  43  Throws exceptions:
15:40:00  44  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  45  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  46  */
15:40:00  47  	in_invoice_id  IN NUMBER,
15:40:00  48  	out_result_set OUT SYS_REFCURSOR
15:40:00  49  );
15:40:00  50  
15:40:00  51  PROCEDURE GET_PROCESSED_CHARGES (
15:40:00  52  /*
15:40:00  53  Throws exceptions:
15:40:00  54  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  55  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  56  */
15:40:00  57  	in_invoice_id  IN NUMBER,
15:40:00  58  	out_result_set OUT SYS_REFCURSOR
15:40:00  59  );
15:40:00  60  
15:40:00  61  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
15:40:00  62  /*
15:40:00  63  Throws exceptions:
15:40:00  64  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  65  */
15:40:00  66  	in_transaction_id	      IN NUMBER,
15:40:00  67  	in_transaction_attempt_status IN NUMBER,
15:40:00  68  	out_result_set		      OUT SYS_REFCURSOR
15:40:00  69  );
15:40:00  70  
15:40:00  71  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
15:40:00  72  /*
15:40:00  73  Throws exceptions:
15:40:00  74  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  75  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  76  */
15:40:00  77  	in_transaction_attempt_id     IN NUMBER,
15:40:00  78  	in_transaction_attempt_status IN NUMBER
15:40:00  79  );
15:40:00  80  
15:40:00  81  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
15:40:00  82  /*
15:40:00  83  Throws exceptions:
15:40:00  84  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  85  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  86  */
15:40:00  87  	in_transaction_attempt_id IN NUMBER,
15:40:00  88  	in_updated_by		  IN VARCHAR2
15:40:00  89  );
15:40:00  90  
15:40:00  91  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
15:40:00  92  /*
15:40:00  93  Throws exceptions:
15:40:00  94  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  95  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  96  */
15:40:00  97  	in_transaction_id	   IN NUMBER,
15:40:00  98  	in_trans_attempt_status    IN NUMBER,
15:40:00  99  	in_external_status_code    IN VARCHAR2,
15:40:00 100  	in_external_status_message IN VARCHAR2,
15:40:00 101  	in_created_by		   IN VARCHAR2,
15:40:00 102  	in_ext_transaction_id	   IN VARCHAR2,
15:40:00 103  	out_transaction_attempt_id OUT NUMBER
15:40:00 104  );
15:40:00 105  
15:40:00 106  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
15:40:00 107  /*
15:40:00 108  Throws exceptions:
15:40:00 109  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 110  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 111  */
15:40:00 112  	in_transaction_attempt_id IN NUMBER,
15:40:00 113  	in_ext_status_code	  IN VARCHAR2,
15:40:00 114  	in_ext_status_message	  IN VARCHAR2,
15:40:00 115  	in_ext_transaction_id	  IN VARCHAR2
15:40:00 116  );
15:40:00 117  
15:40:00 118  PROCEDURE UPDATE_TRANSACTION_STATUS (
15:40:00 119  /*
15:40:00 120  Throws exceptions:
15:40:00 121  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 122  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 123  */
15:40:00 124  	in_transaction_id	 IN NUMBER,
15:40:00 125  	in_updated_by		 IN VARCHAR2,
15:40:00 126  	in_transaction_status_id IN NUMBER
15:40:00 127  );
15:40:00 128  
15:40:00 129  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
15:40:00 130  /*
15:40:00 131  Throws exceptions:
15:40:00 132  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 133  */
15:40:00 134  	in_transaction_id IN  NUMBER,
15:40:00 135  	out_attempts_num  OUT NUMBER
15:40:00 136  );
15:40:00 137  
15:40:00 138  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
15:40:00 139  /*
15:40:00 140  Throws exceptions:
15:40:00 141  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 142  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 143  */
15:40:00 144  	in_transaction_id IN  NUMBER,
15:40:00 145  	out_is_successfull  OUT NUMBER
15:40:00 146  );
15:40:00 147  
15:40:00 148  PROCEDURE UPDATE_INVOICE_STATUS (
15:40:00 149  /*
15:40:00 150  Throws exceptions:
15:40:00 151  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 152  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 153  */
15:40:00 154  	in_invoice_id		       IN NUMBER,
15:40:00 155  	in_invoice_status_id	       IN NUMBER,
15:40:00 156  	in_updated_by		       IN VARCHAR2
15:40:00 157  );
15:40:00 158  
15:40:00 159  PROCEDURE SUSPEND_SUBSCRIPTION(
15:40:00 160  /*
15:40:00 161  Throws exceptions:
15:40:00 162  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 163  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:00 164  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 165  */
15:40:00 166  	  in_subs_id	IN NUMBER ,
15:40:00 167  	  in_updated_by IN VARCHAR2
15:40:00 168  );
15:40:00 169  
15:40:00 170  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:40:00 171  /*
15:40:00 172  Throws exceptions:
15:40:00 173  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 174  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 175  */
15:40:00 176  	in_credit_card_id IN  NUMBER,
15:40:00 177  	out_result_set	  OUT SYS_REFCURSOR
15:40:00 178  );
15:40:00 179  
15:40:00 180  PROCEDURE GET_TRANSACTION_AMOUNT (
15:40:00 181  /*
15:40:00 182  Throws exceptions:
15:40:00 183  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 184  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 185  */
15:40:00 186  	in_transaction_id      IN  NUMBER,
15:40:00 187  	out_transaction_amount OUT NUMBER
15:40:00 188  );
15:40:00 189  
15:40:00 190  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
15:40:00 191  /*
15:40:00 192  Throws exceptions:
15:40:00 193  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 194  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 195  */
15:40:00 196  	in_invoice_id  IN  NUMBER,
15:40:00 197  	out_account_id OUT NUMBER
15:40:00 198  );
15:40:00 199  
15:40:00 200  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
15:40:00 201  /*
15:40:00 202  Throws exceptions:
15:40:00 203  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:00 204  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 205  */
15:40:00 206  	in_gift_certificate_id IN NUMBER,
15:40:00 207  	out_result_set	       OUT SYS_REFCURSOR
15:40:00 208  );
15:40:00 209  
15:40:00 210  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
15:40:00 211  /*
15:40:00 212  Throws exceptions:
15:40:00 213  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 214  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 215  */
15:40:00 216  	in_charge_id	    IN NUMBER,
15:40:00 217  	out_subscription_id OUT NUMBER
15:40:00 218  );
15:40:00 219  
15:40:00 220  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
15:40:00 221  /*
15:40:00 222  Throws exceptions:
15:40:00 223  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 224  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 225  */
15:40:00 226  	in_gift_certificate_id IN NUMBER,
15:40:00 227  	in_charge_id	       IN NUMBER,
15:40:00 228  	out_result	       OUT NUMBER
15:40:00 229  );
15:40:00 230  
15:40:00 231  PROCEDURE GET_SUBSCRIPTION_INFO (
15:40:00 232  /*
15:40:00 233  Throws exceptions:
15:40:00 234  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 235  */
15:40:00 236  	  in_subscription_id IN  NUMBER,
15:40:00 237  	  out_result_set      OUT SYS_REFCURSOR
15:40:00 238  );
15:40:00 239  
15:40:00 240  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:40:00 241  /*
15:40:00 242  Throws exceptions:
15:40:00 243  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 244  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 245  */
15:40:00 246  	in_invoice_id IN  NUMBER,
15:40:00 247  	out_amount    OUT NUMBER
15:40:00 248  );
15:40:00 249  
15:40:00 250  PROCEDURE GET_TRANSACTION_BY_ID (
15:40:00 251  /*
15:40:00 252  Throws exceptions:
15:40:00 253  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 254  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 255  */
15:40:00 256  	in_transaction_id IN NUMBER,
15:40:00 257  	out_result_set	  OUT SYS_REFCURSOR
15:40:00 258  );
15:40:00 259  
15:40:00 260  PROCEDURE UPDATE_CHARGE_STATUS (
15:40:00 261  /*
15:40:00 262  Throws exceptions:
15:40:00 263  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 264  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 265  */
15:40:00 266  	in_charge_id	    IN CHARGE.ID%TYPE,
15:40:00 267  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:40:00 268  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
15:40:00 269  );
15:40:00 270  
15:40:00 271  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:40:00 272  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:00 273  	out_result_set OUT SYS_REFCURSOR
15:40:00 274  );
15:40:00 275  
15:40:00 276  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:40:00 277  /*
15:40:00 278  Throws exceptions:
15:40:00 279  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 280  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
15:40:00 281  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 282  */
15:40:00 283  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:40:00 284  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:40:00 285  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:40:00 286  );
15:40:00 287  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
15:40:00 288  /*
15:40:00 289  Throws exceptions:
15:40:00 290  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 291  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 292  */
15:40:00 293  	in_invoice_id	IN  NUMBER,
15:40:00 294  	out_result_set OUT SYS_REFCURSOR
15:40:00 295  );
15:40:00 296  PROCEDURE GET_ACTIVE_INVOICES_IDS (
15:40:00 297  /*
15:40:00 298  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 299  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 300  */
15:40:00 301  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
15:40:00 302  	in_subscription_id IN NUMBER,
15:40:00 303  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 304  );
15:40:00 305  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
15:40:00 306  /*
15:40:00 307  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 308  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 309  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:00 310  */
15:40:00 311  --  in_invoice_id        IN INVOICE.ID%TYPE,
15:40:00 312  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
15:40:00 313  -- norlov: in_refundable	      IN refund enabled
15:40:00 314  	in_invoice_id	     IN NUMBER,
15:40:00 315  	in_updated_by	     IN VARCHAR2,
15:40:00 316  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
15:40:00 317  --  in_cancellation_date IN DATE DEFAULT current_timestamp
15:40:00 318  );
15:40:00 319  
15:40:00 320  PROCEDURE FINALIZE_CANCELATION (
15:40:00 321  /*
15:40:00 322  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 323  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 324  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:00 325  */
15:40:00 326  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
15:40:00 327  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
15:40:00 328  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
15:40:00 329  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:40:00 330  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:40:00 331  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
15:40:00 332  	in_subscription_id    IN NUMBER,
15:40:00 333  	in_cancelation_reason IN VARCHAR2,
15:40:00 334  	in_cancelation_date   IN DATE,
15:40:00 335  	in_note 	      IN VARCHAR2,
15:40:00 336  	in_agent_id	      IN NUMBER,
15:40:00 337  	in_updated_by	      IN VARCHAR2
15:40:00 338  );
15:40:00 339  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
15:40:00 340  /*
15:40:00 341  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 342  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 343  */
15:40:00 344  	in_subscription_id IN NUMBER,
15:40:00 345  	out_result_set	   OUT SYS_REFCURSOR
15:40:00 346  );
15:40:00 347  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:40:00 348  /*
15:40:00 349  Throws exceptions (codes):
15:40:00 350  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 351  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 352  */
15:40:00 353  	in_offer_chain_id IN NUMBER,
15:40:00 354  	in_meta_data_name IN VARCHAR2,
15:40:00 355  	out_result_set	  OUT SYS_REFCURSOR
15:40:00 356  );
15:40:00 357  
15:40:00 358  PROCEDURE READ_ACCOUNT (
15:40:00 359  	in_account_id  IN ACCOUNT.ID%TYPE,
15:40:00 360  	out_result_set OUT SYS_REFCURSOR
15:40:00 361  );
15:40:00 362  
15:40:00 363  PROCEDURE GET_COLLECTED_CHARGES (
15:40:00 364  /*
15:40:00 365  Throws exceptions:
15:40:00 366  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 367  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 368  */
15:40:00 369  	in_invoice_id  IN NUMBER,
15:40:00 370  	out_result_set OUT SYS_REFCURSOR
15:40:00 371  );
15:40:00 372  
15:40:00 373  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
15:40:00 374  /*
15:40:00 375  Throws exceptions:
15:40:00 376  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:00 377  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 378  */
15:40:00 379  	in_invoice_id IN NUMBER,
15:40:00 380  	out_group_ids OUT SYS_REFCURSOR
15:40:00 381  );
15:40:00 382  
15:40:00 383  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:40:00 384  /*
15:40:00 385  Throws exceptions:
15:40:00 386  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:00 387  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 388  */
15:40:00 389  	in_group_id IN NUMBER,
15:40:00 390  	out_account_id	OUT NUMBER
15:40:00 391  );
15:40:00 392  
15:40:00 393  PROCEDURE LOCK_ACCOUNT (
15:40:00 394  	in_group_id    IN NUMBER,
15:40:00 395  	in_lock_key    IN VARCHAR2,
15:40:00 396  	in_seconds_num IN NUMBER,
15:40:00 397  	in_created_by  IN VARCHAR2,
15:40:00 398  	in_reason      IN VARCHAR2
15:40:00 399  );
15:40:00 400  
15:40:00 401  PROCEDURE RELEASE_LOCK (
15:40:00 402  	in_group_id IN NUMBER,
15:40:00 403  	in_lock_key IN VARCHAR2
15:40:00 404  );
15:40:00 405  
15:40:00 406  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
15:40:00 407  	in_invoice_id		    IN NUMBER,
15:40:00 408  	out_order_id		    OUT VARCHAR2,
15:40:00 409  	out_external_transaction_id OUT VARCHAR2
15:40:00 410  );
15:40:00 411  
15:40:00 412  PROCEDURE GET_PAYPAL_BY_ID (
15:40:00 413  	in_paypal_id   IN  NUMBER,
15:40:00 414  	out_result_set OUT SYS_REFCURSOR
15:40:00 415  );
15:40:00 416  
15:40:00 417  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
15:40:00 418  /*
15:40:00 419  Throws exceptions:
15:40:00 420  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 421  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 422  */
15:40:00 423  	in_charge_id   in  number,
15:40:00 424  	out_attempt_count out number
15:40:00 425  );
15:40:00 426  
15:40:00 427  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:40:00 428  	in_offer_chain_id	 IN NUMBER,
15:40:00 429  	in_action_name		 IN VARCHAR2,
15:40:00 430  	out_notification_type_id out number
15:40:00 431  );
15:40:00 432  
15:40:00 433  PROCEDURE SHOULD_MOVE_TO_GRACE(
15:40:00 434  	in_invoice_id  IN INVOICE.ID%TYPE,
15:40:00 435  	out_result     OUT NUMBER
15:40:00 436  );
15:40:00 437  
15:40:00 438  PROCEDURE MOVE_TO_GRACE(
15:40:00 439  	in_invoice_id		      IN INVOICE.ID%TYPE,
15:40:00 440  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
15:40:00 441  	in_grace_period_length_hours  IN NUMBER
15:40:00 442  );
15:40:00 443  
15:40:00 444  PROCEDURE MOVE_OUT_OF_GRACE(
15:40:00 445  	in_invoice_id	IN INVOICE.ID%TYPE,
15:40:00 446  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
15:40:00 447  );
15:40:00 448  
15:40:00 449  END PUBLIC_PROCS_BILLING_V23;
15:40:00 450  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.06
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for public_procs_client.sql
Compiling header for public_procs_client.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PUBLIC_PROCS_CLIENT
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_CLIENT_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
15:40:00   4  /*
15:40:00   5  Throws exceptions:
15:40:00   6  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00   7  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00   8  */
15:40:00   9  	in_notification_type_name IN VARCHAR2,
15:40:00  10  	out_notification_type_id  OUT NUMBER
15:40:00  11  );
15:40:00  12  
15:40:00  13  PROCEDURE ADD_NOTIFICATION (
15:40:00  14  /*
15:40:00  15  Throws exceptions:
15:40:00  16  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  17  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  18  */
15:40:00  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
15:40:00  20  	in_recipient_group_id	 IN NUMBER,
15:40:00  21  	in_notification_type_id  IN NUMBER,
15:40:00  22  	in_date_to_notify	 IN DATE,
15:40:00  23  	in_email_template_params IN CLOB
15:40:00  24  );
15:40:00  25  
15:40:00  26  END PUBLIC_PROCS_CLIENT_V23;
15:40:00  27  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.03
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for public_procs_notification.sql
Compiling header for public_procs_notification.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE LOCK_ACCOUNT (
15:40:00   4  	in_group_id    IN NUMBER,
15:40:00   5  	in_lock_key    IN VARCHAR2,
15:40:00   6  	in_seconds_num IN NUMBER,
15:40:00   7  	in_created_by  IN VARCHAR2,
15:40:00   8  	in_reason      IN VARCHAR2
15:40:00   9  );
15:40:00  10  
15:40:00  11  PROCEDURE RELEASE_LOCK (
15:40:00  12  	in_group_id IN NUMBER,
15:40:00  13  	in_lock_key IN VARCHAR2
15:40:00  14  );
15:40:00  15  
15:40:00  16  END PUBLIC_PROCS_NOTIFICATION_V23;
15:40:00  17  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.04
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling header for public_procs_renewal.sql
Compiling header for public_procs_renewal.sql
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
15:40:00 SQL> --------------------------------------------------------------------------------
15:40:00 SQL> 
15:40:00 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
15:40:00   4  	out_result_set OUT SYS_REFCURSOR
15:40:00   5  );
15:40:00   6  
15:40:00   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
15:40:00   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
15:40:00   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
15:40:00  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:40:00  11  );
15:40:00  12  
15:40:00  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:40:00  14  /*
15:40:00  15  Throws exceptions:
15:40:00  16  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  17  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  18  */
15:40:00  19  	  in_offer_chain_id IN	 NUMBER,
15:40:00  20  	  out_result_set    OUT  SYS_REFCURSOR
15:40:00  21  );
15:40:00  22  
15:40:00  23  PROCEDURE GET_UNREDEEMED_GCS (
15:40:00  24  	out_result_set		OUT SYS_REFCURSOR,
15:40:00  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:40:00  26  	in_num_rows		IN NUMBER DEFAULT 10000,
15:40:00  27  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:40:00  28  );
15:40:00  29  
15:40:00  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
15:40:00  31  /*
15:40:00  32  APP_EXCEPTION_CODES_V23.INVALID_PARAMETER
15:40:00  33  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  34  */
15:40:00  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
15:40:00  36  	out_result_set	     OUT SYS_REFCURSOR
15:40:00  37  );
15:40:00  38  
15:40:00  39  PROCEDURE GET_ALL_OCH_META_DATA (
15:40:00  40  	in_offer_chain_id IN NUMBER,
15:40:00  41  	out_result_set	  OUT SYS_REFCURSOR
15:40:00  42  );
15:40:00  43  
15:40:00  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:40:00  45  /*
15:40:00  46  Throws exceptions (codes):
15:40:00  47  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  48  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  49  */
15:40:00  50  	in_offer_chain_id IN NUMBER,
15:40:00  51  	in_meta_data_name IN VARCHAR2,
15:40:00  52  	out_result_set	  OUT SYS_REFCURSOR
15:40:00  53  );
15:40:00  54  
15:40:00  55  PROCEDURE GET_ENDING_LICENSES (
15:40:00  56  /*
15:40:00  57  Throws exceptions:
15:40:00  58  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  59  */
15:40:00  60  	in_hours_number IN NUMBER,
15:40:00  61  	out_result_set OUT SYS_REFCURSOR
15:40:00  62  );
15:40:00  63  
15:40:00  64  PROCEDURE GET_ENDING_LICENSES_CC (
15:40:00  65  /*
15:40:00  66  Throws exceptions:
15:40:00  67  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  68  */
15:40:00  69  	in_hours_number IN NUMBER,
15:40:00  70  	out_result_set OUT SYS_REFCURSOR,
15:40:00  71  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:40:00  72  );
15:40:00  73  
15:40:00  74  /************************************************/
15:40:00  75  
15:40:00  76  PROCEDURE GET_RECURRING_OFFER (
15:40:00  77  /*
15:40:00  78  Throws exceptions:
15:40:00  79  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  80  */
15:40:00  81  	in_license_id  IN NUMBER,
15:40:00  82  	out_result_set OUT SYS_REFCURSOR
15:40:00  83  );
15:40:00  84  
15:40:00  85  /*************************************************/
15:40:00  86  
15:40:00  87  PROCEDURE GET_NEXT_OFFER (
15:40:00  88  /*
15:40:00  89  Throws exceptions:
15:40:00  90  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00  91  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:00  92  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  93  */
15:40:00  94  	in_license_id  IN NUMBER,
15:40:00  95  	out_result_set OUT SYS_REFCURSOR
15:40:00  96  );
15:40:00  97  
15:40:00  98  /**************************************************/
15:40:00  99  
15:40:00 100  PROCEDURE UPDATE_LICENSE_STATUS(
15:40:00 101  /*
15:40:00 102  Throws exceptions:
15:40:00 103  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 104  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 105  */
15:40:00 106  	  in_license_id     IN NUMBER,
15:40:00 107  	  in_license_status IN NUMBER,
15:40:00 108  	  in_updated_by     IN VARCHAR2
15:40:00 109  );
15:40:00 110  
15:40:00 111  /***************************************************/
15:40:00 112  
15:40:00 113  PROCEDURE UPDATE_INVOICE_STATUS (
15:40:00 114  /*
15:40:00 115  Throws exceptions:
15:40:00 116  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 117  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 118  */
15:40:00 119  	in_invoice_id		       IN NUMBER,
15:40:00 120  	in_invoice_status_id	       IN NUMBER,
15:40:00 121  	in_updated_by		       IN VARCHAR2
15:40:00 122  );
15:40:00 123  
15:40:00 124  /***************************************************/
15:40:00 125  
15:40:00 126  PROCEDURE CREATE_LICENSE(
15:40:00 127  /*
15:40:00 128  Throws exceptions:
15:40:00 129  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 130  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 131  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:00 132  */
15:40:00 133  	in_status_id		    IN NUMBER,
15:40:00 134  	in_needs_entitlements	    IN NUMBER,
15:40:00 135  	in_start_date		    IN DATE,
15:40:00 136  	in_end_date		    IN DATE,
15:40:00 137  	in_offer_id		    IN NUMBER,
15:40:00 138  	in_subscription_id	    IN NUMBER,
15:40:00 139  	in_invoice_id		    IN NUMBER,
15:40:00 140  	in_created_by		    IN VARCHAR2,
15:40:00 141  	in_is_extension 	    IN NUMBER,
15:40:00 142  	in_current_offer_index	    IN NUMBER,
15:40:00 143  	in_current_offer_recurr_num IN NUMBER,
15:40:00 144  	out_license_id		    OUT NUMBER
15:40:00 145  );
15:40:00 146  
15:40:00 147  /**************************************************/
15:40:00 148  
15:40:00 149  PROCEDURE CREATE_INVOICE(
15:40:00 150  /*
15:40:00 151  Throws exceptions:
15:40:00 152  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 153  */
15:40:00 154  	  in_invoice_status IN NUMBER,
15:40:00 155  	  in_created_by     IN VARCHAR2,
15:40:00 156  	  in_tax_exempt_id  IN VARCHAR2,
15:40:00 157  	  out_invoice_id    OUT NUMBER
15:40:00 158  );
15:40:00 159  
15:40:00 160  /*****************************************************/
15:40:00 161  
15:40:00 162  PROCEDURE CREATE_CHARGE(
15:40:00 163  /*
15:40:00 164  Throws exceptions:
15:40:00 165  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 166  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 167  */
15:40:00 168  	in_invoice_id	      IN NUMBER,
15:40:00 169  	in_transaction_id     IN NUMBER,
15:40:00 170  	in_instrument_type_id IN NUMBER,
15:40:00 171  	in_instrument_id      IN NUMBER,
15:40:00 172  	in_charge_amount      IN NUMBER,
15:40:00 173  	in_created_by	      IN VARCHAR2,
15:40:00 174  	in_charge_status_id   IN NUMBER,
15:40:00 175  	out_charge_id	      OUT NUMBER
15:40:00 176  );
15:40:00 177  
15:40:00 178  /*****************************************************/
15:40:00 179  
15:40:00 180  PROCEDURE HAS_FUTURE_LICENSE (
15:40:00 181  /*
15:40:00 182  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 183  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 184  --
15:40:00 185  RETURNS:
15:40:00 186  1 - if has,
15:40:00 187  0 - else
15:40:00 188  */
15:40:00 189  	in_license_id IN NUMBER,
15:40:00 190  	out_result	   OUT NUMBER
15:40:00 191  );
15:40:00 192  
15:40:00 193  /*****************************************************/
15:40:00 194  
15:40:00 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
15:40:00 196  /*
15:40:00 197  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 198  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 199  */
15:40:00 200  	in_license_id IN NUMBER,
15:40:00 201  	out_group_id  OUT NUMBER
15:40:00 202  );
15:40:00 203  
15:40:00 204  /*****************************************************/
15:40:00 205  
15:40:00 206  PROCEDURE GET_OFFER_PRODUCTS (
15:40:00 207  /*
15:40:00 208  Throws exceptions (codes):
15:40:00 209  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 210  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 211  */
15:40:00 212  	in_offer_id    IN NUMBER,
15:40:00 213  	out_result_set OUT SYS_REFCURSOR
15:40:00 214  );
15:40:00 215  
15:40:00 216  /*******************************************************/
15:40:00 217  
15:40:00 218  PROCEDURE CREATE_TRANSACTION (
15:40:00 219  /*
15:40:00 220  Throws exceptions:
15:40:00 221  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 222  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 223  */
15:40:00 224  	in_transaction_id	  IN NUMBER,
15:40:00 225  	in_status_id		  IN NUMBER,
15:40:00 226  	in_amount		  IN NUMBER,
15:40:00 227  	in_created_by		  IN VARCHAR2,
15:40:00 228  	in_order_id		  IN VARCHAR2,
15:40:00 229  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
15:40:00 230  	out_transaction_id	  OUT NUMBER
15:40:00 231  );
15:40:00 232  
15:40:00 233  /*********************************************************/
15:40:00 234  
15:40:00 235  PROCEDURE ADD_LINE_ITEMS(
15:40:00 236  /*
15:40:00 237  Throws exceptions:
15:40:00 238  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 239  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 240  */
15:40:00 241  	in_invoice_id IN NUMBER,
15:40:00 242  	in_offer_id   IN NUMBER,
15:40:00 243  	in_created_by IN VARCHAR2
15:40:00 244  );
15:40:00 245  
15:40:00 246  /**********************************************************/
15:40:00 247  
15:40:00 248  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:40:00 249  /*
15:40:00 250  Throws exceptions:
15:40:00 251  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 252  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 253  */
15:40:00 254  	in_invoice_id IN  NUMBER,
15:40:00 255  	out_amount    OUT NUMBER
15:40:00 256  );
15:40:00 257  
15:40:00 258  /*********************************************************/
15:40:00 259  
15:40:00 260  PROCEDURE RESERVE_TRANSACTION_ID (
15:40:00 261  /*
15:40:00 262  Throws exceptions:
15:40:00 263  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 264  */
15:40:00 265  	out_transaction_id OUT NUMBER
15:40:00 266  );
15:40:00 267  
15:40:00 268  /**********************************************************/
15:40:00 269  
15:40:00 270  PROCEDURE P_GET_NEXT_OFFER_INDEX (
15:40:00 271  	in_offer_chain_id	     IN NUMBER,
15:40:00 272  	in_offer_chain_current_index IN NUMBER,
15:40:00 273  	out_next_offer_index	     OUT NUMBER
15:40:00 274  );
15:40:00 275  
15:40:00 276  /***********************************************************/
15:40:00 277  
15:40:00 278  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
15:40:00 279  	in_license_id		     IN NUMBER,
15:40:00 280  	in_offer_chain_current_index IN NUMBER,
15:40:00 281  	out_next_offer_index	     OUT NUMBER
15:40:00 282  );
15:40:00 283  
15:40:00 284  /**********************************************************/
15:40:00 285  
15:40:00 286  PROCEDURE GET_SUBSCRIPTION_INFO (
15:40:00 287  /*
15:40:00 288  Throws exceptions:
15:40:00 289  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 290  */
15:40:00 291  	  in_subscription_id IN  NUMBER,
15:40:00 292  	  out_result_set      OUT SYS_REFCURSOR
15:40:00 293  );
15:40:00 294  
15:40:00 295  /***********************************************************/
15:40:00 296  
15:40:00 297  PROCEDURE CLOSE_SUBSCRIPTION (
15:40:00 298  	in_subscription_id IN NUMBER,
15:40:00 299  	in_updated_by	   IN VARCHAR2
15:40:00 300  );
15:40:00 301  
15:40:00 302  /***********************************************************/
15:40:00 303  
15:40:00 304  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
15:40:00 305  	out_result_set OUT SYS_REFCURSOR
15:40:00 306  );
15:40:00 307  
15:40:00 308  /***********************************************************/
15:40:00 309  
15:40:00 310  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
15:40:00 311  	in_license_id	      IN NUMBER,
15:40:00 312  	in_needs_entitlements IN NUMBER,
15:40:00 313  	in_updated_by	      IN VARCHAR2
15:40:00 314  );
15:40:00 315  /***********************************************************/
15:40:00 316  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
15:40:00 317  	in_offer_id    IN NUMBER,
15:40:00 318  	out_result_set OUT SYS_REFCURSOR
15:40:00 319  );
15:40:00 320  
15:40:00 321  PROCEDURE LOCK_ACCOUNT (
15:40:00 322  	in_group_id    IN NUMBER,
15:40:00 323  	in_lock_key    IN VARCHAR2,
15:40:00 324  	in_seconds_num IN NUMBER,
15:40:00 325  	in_created_by  IN VARCHAR2,
15:40:00 326  	in_reason      IN VARCHAR2
15:40:00 327  );
15:40:00 328  
15:40:00 329  PROCEDURE RELEASE_LOCK (
15:40:00 330  	in_group_id IN NUMBER,
15:40:00 331  	in_lock_key IN VARCHAR2
15:40:00 332  );
15:40:00 333  
15:40:00 334  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:40:00 335  	in_invoice_id  IN NUMBER,
15:40:00 336  	out_result_set OUT SYS_REFCURSOR
15:40:00 337  );
15:40:00 338  
15:40:00 339  PROCEDURE ADD_TAX (
15:40:00 340  	in_tax_type_id		 IN NUMBER,
15:40:00 341  	in_calculated_amount	 IN NUMBER,
15:40:00 342  	in_created_by		 IN VARCHAR2,
15:40:00 343  	in_line_item_id 	 IN NUMBER,
15:40:00 344  	in_effective_rate	 IN VARCHAR2,
15:40:00 345  	in_taxable_amount	 IN NUMBER,
15:40:00 346  	in_tax_rule_id		 IN NUMBER,
15:40:00 347  	in_jurisdiction_level_id IN NUMBER,
15:40:00 348  	in_jurisdiction_name	 IN VARCHAR2,
15:40:00 349  	in_jurisdiction_id	 IN VARCHAR2,
15:40:00 350  	in_ext_tax_type 	 IN VARCHAR2,
15:40:00 351  	in_ext_result		 IN VARCHAR2,
15:40:00 352  	in_imposition_type	 IN VARCHAR2,
15:40:00 353  	in_imposition		 IN VARCHAR2
15:40:00 354  );
15:40:00 355  
15:40:00 356  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:40:00 357  	in_credit_card_id IN  NUMBER,
15:40:00 358  	out_result_set	  OUT SYS_REFCURSOR
15:40:00 359  );
15:40:00 360  
15:40:00 361  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
15:40:00 362  	in_line_item_id IN NUMBER,
15:40:00 363  	out_result_set	OUT SYS_REFCURSOR
15:40:00 364  );
15:40:00 365  
15:40:00 366  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:40:00 367  /*
15:40:00 368  Throws exceptions:
15:40:00 369  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:00 370  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 371  */
15:40:00 372  	in_group_id IN NUMBER,
15:40:00 373  	out_account_id	OUT NUMBER
15:40:00 374  );
15:40:00 375  
15:40:00 376  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
15:40:00 377  /*
15:40:00 378  Throws exceptions:
15:40:00 379  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:00 380  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00 381  */
15:40:00 382  	in_line_item_id IN  NUMBER,
15:40:00 383  	out_result_set	OUT SYS_REFCURSOR
15:40:00 384  );
15:40:00 385  
15:40:00 386  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
15:40:00 387  	in_line_item_id    IN NUMBER,
15:40:00 388  	in_amount	   IN NUMBER,
15:40:00 389  	in_discount_amount IN NUMBER,
15:40:00 390  	in_taxes_amount    IN NUMBER
15:40:00 391  );
15:40:00 392  
15:40:00 393  PROCEDURE GET_PAYPAL_BY_ID (
15:40:00 394  	in_paypal_id   IN  NUMBER,
15:40:00 395  	out_result_set OUT SYS_REFCURSOR
15:40:00 396  );
15:40:00 397  
15:40:00 398  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:40:00 399  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:00 400  	out_result_set OUT SYS_REFCURSOR
15:40:00 401  );
15:40:00 402  
15:40:00 403  PROCEDURE GET_LICENSE_BY_ID (
15:40:00 404  	in_license_id  IN NUMBER,
15:40:00 405  	out_result_set OUT SYS_REFCURSOR
15:40:00 406  );
15:40:00 407  
15:40:00 408  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:40:00 409  	in_offer_chain_id	 IN NUMBER,
15:40:00 410  	in_action_name		 IN VARCHAR2,
15:40:00 411  	out_notification_type_id OUT NUMBER
15:40:00 412  );
15:40:00 413  
15:40:00 414  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
15:40:00 415  	in_offer_chain_id IN NUMBER,
15:40:00 416  	in_meta_data_name IN VARCHAR2,
15:40:00 417  	out_value	  OUT VARCHAR2
15:40:00 418  );
15:40:00 419  
15:40:00 420  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
15:40:00 421  	out_result_set	    OUT SYS_REFCURSOR
15:40:00 422  );
15:40:00 423  
15:40:00 424  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
15:40:00 425  	out_result_set	    OUT SYS_REFCURSOR
15:40:00 426  );
15:40:00 427  
15:40:00 428  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
15:40:00 429  	out_result_set	    OUT SYS_REFCURSOR
15:40:00 430  );
15:40:00 431  
15:40:00 432  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
15:40:00 433  	in_max_days_until_close IN NUMBER,
15:40:00 434  	in_num_subs_to_fetch	IN NUMBER,
15:40:00 435  	out_result_set		OUT SYS_REFCURSOR
15:40:00 436  );
15:40:00 437  
15:40:00 438  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
15:40:00 439  	in_days_before_close	 IN NUMBER,
15:40:00 440  	in_num_licenses_to_fetch IN NUMBER,
15:40:00 441  	out_result_set		 OUT SYS_REFCURSOR
15:40:00 442  );
15:40:00 443  
15:40:00 444  PROCEDURE GET_EXPIRING_PAYPAL (
15:40:00 445  	in_expire_window_days	IN NUMBER,
15:40:00 446  	in_creation_limit_days	IN NUMBER,
15:40:00 447  	in_retry_throttle_name	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
15:40:00 448  	out_result_set		OUT SYS_REFCURSOR
15:40:00 449  );
15:40:00 450  
15:40:00 451  END PUBLIC_PROCS_RENEWAL_V23;
15:40:00 452  .
15:40:00 SQL> /

Package created.

Elapsed: 00:00:00.06
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling body for procs_account_cru.sql
Compiling body for procs_account_cru.sql
15:40:00 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE CREATE_ACCOUNT (
15:40:00   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
15:40:00   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
15:40:00   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
15:40:00   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
15:40:00   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
15:40:00   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
15:40:00  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:40:00  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
15:40:00  12  ) AS
15:40:00  13  -- VARIABLES
15:40:00  14  var_new_account_id ACCOUNT.ID%TYPE;
15:40:00  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:00  16  var_date DATE := SYSDATE;
15:40:00  17  BEGIN
15:40:00  18  	SELECT
15:40:00  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
15:40:00  20  	FROM DUAL;
15:40:00  21  	INSERT INTO ACCOUNT (
15:40:00  22  	  ID,
15:40:00  23  	  ACCOUNT_STATUS_ID,
15:40:00  24  	  SUSPEND_DATE,
15:40:00  25  	  GROUP_ID,
15:40:00  26  	  CREATE_DATE,
15:40:00  27  	  CREATED_BY,
15:40:00  28  	  UPDATE_DATE,
15:40:00  29  	  UPDATED_BY,
15:40:00  30  	  SYSTEM_CATEGORY_ID,
15:40:00  31  	  INSTRUMENT_TYPE_ID,
15:40:00  32  	  INSTRUMENT_ID,
15:40:00  33  	  TAX_EXEMPT_ID
15:40:00  34  	) VALUES (
15:40:00  35  	  var_new_account_id,
15:40:00  36  	  in_account_status_id,
15:40:00  37  	  in_suspend_date,
15:40:00  38  	  in_group_id,
15:40:00  39  	  var_date,
15:40:00  40  	  in_created_by,
15:40:00  41  	  var_date,
15:40:00  42  	  in_created_by,
15:40:00  43  	  in_system_category_id,
15:40:00  44  	  in_instrument_type_id,
15:40:00  45  	  in_instrument_id,
15:40:00  46  	  NULL
15:40:00  47  	);
15:40:00  48  
15:40:00  49  	out_account_id := var_new_account_id;
15:40:00  50  END CREATE_ACCOUNT;
15:40:00  51  
15:40:00  52  /*************************************************************/
15:40:00  53  
15:40:00  54  PROCEDURE UPDATE_ACCOUNT (
15:40:00  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
15:40:00  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
15:40:00  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
15:40:00  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
15:40:00  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
15:40:00  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:40:00  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
15:40:00  62  ) AS
15:40:00  63  BEGIN
15:40:00  64  
15:40:00  65  	-- CREATE HISTORY
15:40:00  66  	PROCS_HISTORY_V23.CREATE_ACCOUNT_HISTORY(
15:40:00  67  	  in_account_id 	       => in_account_id,
15:40:00  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:00  69  	);
15:40:00  70  
15:40:00  71  	UPDATE ACCOUNT SET
15:40:00  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
15:40:00  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
15:40:00  74  	  UPDATED_BY	     = in_updated_by,
15:40:00  75  	  UPDATE_DATE	     = SYSDATE,
15:40:00  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
15:40:00  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
15:40:00  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
15:40:00  79  	WHERE
15:40:00  80  	  ACCOUNT.ID = in_account_id;
15:40:00  81  
15:40:00  82  END UPDATE_ACCOUNT;
15:40:00  83  
15:40:00  84  /*************************************************************/
15:40:00  85  
15:40:00  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
15:40:00  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
15:40:00  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
15:40:00  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
15:40:00  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
15:40:00  91  ) AS
15:40:00  92  BEGIN
15:40:00  93  
15:40:00  94  	-- CREATE HISTORY
15:40:00  95  	PROCS_HISTORY_V23.CREATE_ACCOUNT_HISTORY(
15:40:00  96  	  in_account_id 	       => in_account_id,
15:40:00  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:00  98  	);
15:40:00  99  
15:40:00 100  	UPDATE ACCOUNT SET
15:40:00 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
15:40:00 102  	  INSTRUMENT_ID      = in_instrument_id
15:40:00 103  	WHERE
15:40:00 104  	  ACCOUNT.ID = in_account_id;
15:40:00 105  
15:40:00 106  END;
15:40:00 107  
15:40:00 108  /*************************************************************/
15:40:00 109  
15:40:00 110  PROCEDURE READ_ACCOUNT (
15:40:00 111  	in_account_id  IN ACCOUNT.ID%TYPE,
15:40:00 112  	out_result_set OUT SYS_REFCURSOR
15:40:00 113  ) AS
15:40:00 114  BEGIN
15:40:00 115  	OPEN out_result_set FOR
15:40:00 116  	SELECT
15:40:00 117  	  ACCOUNT_STATUS_ID,
15:40:00 118  	  SUSPEND_DATE,
15:40:00 119  	  GROUP_ID
15:40:00 120  	FROM
15:40:00 121  	  ACCOUNT
15:40:00 122  	WHERE
15:40:00 123  	  ID = in_account_id;
15:40:00 124  END READ_ACCOUNT;
15:40:00 125  
15:40:00 126  /*************************************************************/
15:40:00 127  
15:40:00 128  PROCEDURE CREATE_ACCOUNT_NOTE (
15:40:00 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
15:40:00 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
15:40:00 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
15:40:00 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
15:40:00 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
15:40:00 134  ) AS
15:40:00 135  BEGIN
15:40:00 136  	IF inout_account_note_id IS NULL THEN
15:40:00 137  	  SELECT
15:40:00 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
15:40:00 139  	  FROM DUAL;
15:40:00 140  	END IF;
15:40:00 141  	INSERT INTO ACCOUNT_NOTE(
15:40:00 142  	  ID,
15:40:00 143  	  AGENT_ID,
15:40:00 144  	  ACCOUNT_ID,
15:40:00 145  	  NOTE,
15:40:00 146  	  CREATE_DATE,
15:40:00 147  	  CREATED_BY
15:40:00 148  	) VALUES (
15:40:00 149  	  inout_account_note_id,
15:40:00 150  	  in_agent_id,
15:40:00 151  	  in_account_id,
15:40:00 152  	  in_note,
15:40:00 153  	  SYSDATE,
15:40:00 154  	  in_created_by
15:40:00 155  	);
15:40:00 156  END CREATE_ACCOUNT_NOTE;
15:40:00 157  
15:40:00 158  END PROCS_ACCOUNT_CRU_V23;
15:40:00 159  .
15:40:00 SQL> /

Package body created.

Elapsed: 00:00:00.04
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling body for procs_address_cru.sql
Compiling body for procs_address_cru.sql
15:40:00 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE CREATE_ADDRESS(
15:40:00   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
15:40:00   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
15:40:00   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:40:00   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:40:00   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:40:00   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:40:00  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:40:00  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:40:00  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
15:40:00  13  ) AS
15:40:00  14  -- VARIABLES
15:40:00  15  var_address_id ADDRESS.ID%TYPE;
15:40:00  16  var_date DATE := SYSDATE;
15:40:00  17  BEGIN
15:40:00  18  	IF in_address_id IS NULL THEN
15:40:00  19  	  SELECT
15:40:00  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
15:40:00  21  	  FROM DUAL;
15:40:00  22  	ELSE
15:40:00  23  	  var_address_id := in_address_id;
15:40:00  24  	END IF;
15:40:00  25  	INSERT INTO
15:40:00  26  	  ADDRESS (
15:40:00  27  	    ID,
15:40:00  28  	    ADDRESS1,
15:40:00  29  	    ADDRESS2,
15:40:00  30  	    CITY,
15:40:00  31  	    STATE,
15:40:00  32  	    POSTAL_CODE,
15:40:00  33  	    COUNTRY,
15:40:00  34  	    CREATE_DATE,
15:40:00  35  	    CREATED_BY,
15:40:00  36  	    UPDATE_DATE,
15:40:00  37  	    UPDATED_BY
15:40:00  38  	  ) VALUES (
15:40:00  39  	    var_address_id,
15:40:00  40  	    in_address1,
15:40:00  41  	    in_address2,
15:40:00  42  	    in_city,
15:40:00  43  	    in_state,
15:40:00  44  	    in_postal_code,
15:40:00  45  	    in_country,
15:40:00  46  	    var_date,
15:40:00  47  	    in_created_by,
15:40:00  48  	    var_date,
15:40:00  49  	    in_created_by
15:40:00  50  	  );
15:40:00  51  
15:40:00  52  	out_address_id := var_address_id;
15:40:00  53  END CREATE_ADDRESS;
15:40:00  54  
15:40:00  55  PROCEDURE UPDATE_ADDRESS(
15:40:00  56  	in_address_id	      IN ADDRESS.ID%TYPE,
15:40:00  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:40:00  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:40:00  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:40:00  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:40:00  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:40:00  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:40:00  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
15:40:00  64  ) AS
15:40:00  65  BEGIN
15:40:00  66  
15:40:00  67  	-- Create history
15:40:00  68  	PROCS_HISTORY_V23.CREATE_ADDRESS_HISTORY(
15:40:00  69  	  in_address_id 		=> in_address_id,
15:40:00  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:00  71  	);
15:40:00  72  
15:40:00  73  	UPDATE
15:40:00  74  	  ADDRESS
15:40:00  75  	SET
15:40:00  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
15:40:00  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
15:40:00  78  	  CITY = NVL(in_city, CITY),
15:40:00  79  	  STATE = NVL(in_state, STATE),
15:40:00  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
15:40:00  81  	  COUNTRY = NVL(in_country, COUNTRY),
15:40:00  82  	  UPDATE_DATE = SYSDATE,
15:40:00  83  	  UPDATED_BY = in_updated_by
15:40:00  84  	WHERE
15:40:00  85  	  ID = in_address_id;
15:40:00  86  
15:40:00  87  END UPDATE_ADDRESS;
15:40:00  88  
15:40:00  89  END PROCS_ADDRESS_CRU_V23;
15:40:00  90  .
15:40:00 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling body for procs_amazon_cru.sql
Compiling body for procs_amazon_cru.sql
15:40:00 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE UPDATE_AMAZON_APPSTORE_RECEIPT(
15:40:00   4  	in_id		   IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:40:00   5  	in_updated_by	   IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE,
15:40:00   6  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE DEFAULT NULL,
15:40:00   7  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE DEFAULT NULL,
15:40:00   8  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE DEFAULT NULL,
15:40:00   9  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE DEFAULT NULL,
15:40:00  10  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
15:40:00  11  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE DEFAULT NULL,
15:40:00  12  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE DEFAULT NULL,
15:40:00  13  	in_last_check_date IN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE DEFAULT NULL
15:40:00  14  ) AS
15:40:00  15  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AMAZON_APPSTORE_RECEIPT';
15:40:00  16  BEGIN
15:40:00  17  	CORE_OWNER.PROCS_HISTORY_V23.CREATE_AASR_HISTORY(
15:40:00  18  	    in_id => in_id,
15:40:00  19  	    in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE,
15:40:00  20  	    in_created_by => in_updated_by
15:40:00  21  	);
15:40:00  22  
15:40:00  23  	UPDATE AMAZON_APPSTORE_RECEIPT SET
15:40:00  24  	  SUBSCRIPTION_ID = NVL(in_subscription_id,SUBSCRIPTION_ID),
15:40:00  25  	  USER_ID	  = NVL(in_user_id,USER_ID),
15:40:00  26  	  ITEM_TYPE	  = NVL(in_item_type,ITEM_TYPE),
15:40:00  27  	  START_DATE	  = NVL(in_start_date,START_DATE),
15:40:00  28  	  END_DATE	  = NVL(in_end_date,END_DATE),
15:40:00  29  	  SKU		  = NVL(in_sku,SKU),
15:40:00  30  	  PURCHASE_TOKEN  = NVL(in_purchase_token,PURCHASE_TOKEN),
15:40:00  31  	  LAST_CHECK_DATE = NVL(in_last_check_date,LAST_CHECK_DATE),
15:40:00  32  	  UPDATE_DATE	  = SYSDATE,
15:40:00  33  	  UPDATED_BY	  = in_updated_by
15:40:00  34  	WHERE
15:40:00  35  	  ID = in_id;
15:40:00  36  END UPDATE_AMAZON_APPSTORE_RECEIPT;
15:40:00  37  
15:40:00  38  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
15:40:00  39  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:40:00  40  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
15:40:00  41  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
15:40:00  42  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
15:40:00  43  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
15:40:00  44  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
15:40:00  45  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
15:40:00  46  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
15:40:00  47  ) AS
15:40:00  48  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE_RECEIPT';
15:40:00  49  var_now	 DATE := SYSDATE;
15:40:00  50  BEGIN
15:40:00  51  	INSERT INTO CORE_OWNER.AMAZON_APPSTORE_RECEIPT (
15:40:00  52  	  ID,
15:40:00  53  	  SUBSCRIPTION_ID,
15:40:00  54  	  USER_ID,
15:40:00  55  	  ITEM_TYPE,
15:40:00  56  	  START_DATE,
15:40:00  57  	  END_DATE,
15:40:00  58  	  SKU,
15:40:00  59  	  PURCHASE_TOKEN,
15:40:00  60  	  CREATE_DATE,
15:40:00  61  	  CREATED_BY,
15:40:00  62  	  UPDATE_DATE,
15:40:00  63  	  UPDATED_BY
15:40:00  64  	) VALUES (
15:40:00  65  	  CORE_OWNER.AAS_RECEIPT_ID_SEQ.nextval,
15:40:00  66  	  in_subscription_id,
15:40:00  67  	  in_user_id,
15:40:00  68  	  in_item_type,
15:40:00  69  	  in_start_date,
15:40:00  70  	  in_end_date,
15:40:00  71  	  in_sku,
15:40:00  72  	  in_purchase_token,
15:40:00  73  	  var_now,
15:40:00  74  	  in_created_by,
15:40:00  75  	  var_now,
15:40:00  76  	  in_created_by
15:40:00  77  	);
15:40:00  78  END ADD_AMAZON_APPSTORE_RECEIPT;
15:40:00  79  
15:40:00  80  	PROCEDURE CREATE_AMAZON_SUB(
15:40:00  81  /*
15:40:00  82  Throws exceptions:
15:40:00  83  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:00  84  */
15:40:00  85  	  out_id	      OUT NUMBER,
15:40:00  86  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
15:40:00  87  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
15:40:00  88  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
15:40:00  89  ) AS
15:40:00  90  -- VARIABLES
15:40:00  91  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
15:40:00  92  var_current_date	DATE;
15:40:00  93  var_count 	NUMBER;
15:40:00  94  AMAZON_SUB_USED	EXCEPTION;
15:40:00  95  BEGIN
15:40:00  96  
15:40:00  97  	SELECT COUNT(1) INTO var_count
15:40:00  98  	FROM SUBSCRIPTION s, AMAZON_SUB am
15:40:00  99  	WHERE
15:40:00 100  	  am.AMAZON_ID = in_amazon_id
15:40:00 101  	  and am.subscription_id = s.id
15:40:00 102  	  and s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
15:40:00 103  
15:40:00 104  	if var_count > 0 then
15:40:00 105  	  raise AMAZON_SUB_USED;
15:40:00 106  	end if;
15:40:00 107  
15:40:00 108  	SELECT
15:40:00 109  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
15:40:00 110  	INTO
15:40:00 111  	  out_id
15:40:00 112  	FROM
15:40:00 113  	  dual
15:40:00 114  	;
15:40:00 115  
15:40:00 116  	SELECT
15:40:00 117  	  sysdate
15:40:00 118  	INTO
15:40:00 119  	  var_current_date
15:40:00 120  	FROM
15:40:00 121  	  dual
15:40:00 122  	;
15:40:00 123  
15:40:00 124  	INSERT INTO CORE_OWNER.AMAZON_SUB
15:40:00 125  	(
15:40:00 126  	  id,
15:40:00 127  	  subscription_id,
15:40:00 128  	  amazon_id,
15:40:00 129  	  create_date,
15:40:00 130  	  created_by,
15:40:00 131  	  update_date,
15:40:00 132  	  updated_by
15:40:00 133  	)
15:40:00 134  	VALUES
15:40:00 135  	(
15:40:00 136  	  out_id,
15:40:00 137  	  in_subscription_id,
15:40:00 138  	  in_amazon_id,
15:40:00 139  	  var_current_date,
15:40:00 140  	  in_created_by,
15:40:00 141  	  var_current_date,
15:40:00 142  	  in_created_by
15:40:00 143  	);
15:40:00 144  
15:40:00 145  EXCEPTION
15:40:00 146  WHEN AMAZON_SUB_USED THEN
15:40:00 147  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:00 148  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
15:40:00 149  WHEN DUP_VAL_ON_INDEX THEN
15:40:00 150  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:00 151  	  SPROC_NAME, 'Duplicate value', SQLERRM);
15:40:00 152  WHEN OTHERS THEN
15:40:00 153  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:00 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:00 155  END CREATE_AMAZON_SUB;
15:40:00 156  
15:40:00 157  END PROCS_AMAZON_CRU_V23;
15:40:00 158  .
15:40:00 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling body for procs_charge_cru.sql
Compiling body for procs_charge_cru.sql
15:40:00 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE CREATE_CHARGE(
15:40:00   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
15:40:00   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
15:40:00   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
15:40:00   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
15:40:00   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
15:40:00   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
15:40:00  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
15:40:00  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:40:00  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
15:40:00  13  ) AS
15:40:00  14  -- VARIABLES
15:40:00  15  var_charge_id CHARGE.ID%TYPE;
15:40:00  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:00  17  var_date DATE := SYSDATE;
15:40:00  18  BEGIN
15:40:00  19  	IF in_charge_id IS NULL THEN
15:40:00  20  	  SELECT
15:40:00  21  	    CRG_ID_SEQ.nextVal into var_charge_id
15:40:00  22  	  FROM DUAL;
15:40:00  23  	ELSE
15:40:00  24  	  var_charge_id := in_charge_id;
15:40:00  25  	END IF;
15:40:00  26  	INSERT INTO
15:40:00  27  	  CHARGE (
15:40:00  28  	    ID,
15:40:00  29  	    INVOICE_ID,
15:40:00  30  	    TRANSACTION_ID,
15:40:00  31  	    INSTRUMENT_TYPE_ID,
15:40:00  32  	    INSTRUMENT_ID,
15:40:00  33  	    CHARGE_AMOUNT,
15:40:00  34  	    CHARGE_STATUS_ID,
15:40:00  35  	    CREATE_DATE,
15:40:00  36  	    CREATED_BY,
15:40:00  37  	    UPDATE_DATE,
15:40:00  38  	    UPDATED_BY
15:40:00  39  	  ) VALUES (
15:40:00  40  	    var_charge_id,
15:40:00  41  	    in_invoice_id,
15:40:00  42  	    in_transaction_id,
15:40:00  43  	    in_instrument_type_id,
15:40:00  44  	    in_instrument_id,
15:40:00  45  	    in_charge_amount,
15:40:00  46  	    in_charge_status_id,
15:40:00  47  	    var_date,
15:40:00  48  	    in_created_by,
15:40:00  49  	    var_date,
15:40:00  50  	    in_created_by
15:40:00  51  	  );
15:40:00  52  
15:40:00  53  	out_charge_id := var_charge_id;
15:40:00  54  END CREATE_CHARGE;
15:40:00  55  
15:40:00  56  PROCEDURE UPDATE_CHARGE(
15:40:00  57  	in_charge_id	      IN CHARGE.ID%TYPE,
15:40:00  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:40:00  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
15:40:00  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
15:40:00  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
15:40:00  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
15:40:00  63  ) AS
15:40:00  64  BEGIN
15:40:00  65  
15:40:00  66  	-- Create history
15:40:00  67  	PROCS_HISTORY_V23.CREATE_CHARGE_HISTORY(
15:40:00  68  	  in_charge_id		       => in_charge_id,
15:40:00  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:00  70  	);
15:40:00  71  
15:40:00  72  	UPDATE
15:40:00  73  	  CHARGE
15:40:00  74  	SET
15:40:00  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
15:40:00  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
15:40:00  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
15:40:00  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
15:40:00  79  	  UPDATE_DATE	     = SYSDATE,
15:40:00  80  	  UPDATED_BY	     = in_updated_by
15:40:00  81  	WHERE
15:40:00  82  	  ID = in_charge_id;
15:40:00  83  
15:40:00  84  END UPDATE_CHARGE;
15:40:00  85  
15:40:00  86  END PROCS_CHARGE_CRU_V23;
15:40:00  87  .
15:40:00 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling body for procs_fin_instruments_cru.sql
Compiling body for procs_fin_instruments_cru.sql
15:40:00 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE CREATE_CREDIT_CARD(
15:40:00   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
15:40:00   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
15:40:00   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
15:40:00   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
15:40:00   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
15:40:00   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
15:40:00  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
15:40:00  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
15:40:00  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
15:40:00  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
15:40:00  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
15:40:00  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:40:00  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
15:40:00  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
15:40:00  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
15:40:00  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
15:40:00  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
15:40:00  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
15:40:00  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
15:40:00  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
15:40:00  24  ) AS
15:40:00  25  -- VARIABLES
15:40:00  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
15:40:00  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:00  28  var_date DATE := SYSDATE;
15:40:00  29  BEGIN
15:40:00  30  	IF in_credit_card_id IS NULL THEN
15:40:00  31  	  SELECT
15:40:00  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
15:40:00  33  	  FROM DUAL;
15:40:00  34  	ELSE
15:40:00  35  	  var_credit_card_id := in_credit_card_id;
15:40:00  36  	END IF;
15:40:00  37  	INSERT INTO CREDIT_CARD(
15:40:00  38  	    ID,
15:40:00  39  	    ACCOUNT_ID,
15:40:00  40  	    INSTRUMENT_NAME,
15:40:00  41  	    PRIVATE_CARD_HOLDER_NAME,
15:40:00  42  	    PRIVATE_STREET_ADDRESS,
15:40:00  43  	    PRIVATE_STREET_ADDRESS2,
15:40:00  44  	    STATE,
15:40:00  45  	    CITY,
15:40:00  46  	    POSTAL_CODE,
15:40:00  47  	    COUNTRY,
15:40:00  48  	    LAST_FOUR_CC,
15:40:00  49  	    EXPIRATION_DATE,
15:40:00  50  	    CREDIT_CARD_TYPE_ID,
15:40:00  51  	    SECRET_TOKEN,
15:40:00  52  	    CHASE_PROFILE_ID,
15:40:00  53  	    CREATE_DATE,
15:40:00  54  	    CREATED_BY,
15:40:00  55  	    UPDATE_DATE,
15:40:00  56  	    UPDATED_BY,
15:40:00  57  	    CREDIT_CARD_STATUS_ID,
15:40:00  58  	    PRIVATE_FIRST_NAME,
15:40:00  59  	    PRIVATE_LAST_NAME
15:40:00  60  	  ) VALUES (
15:40:00  61  	    var_credit_card_id,
15:40:00  62  	    in_account_id,
15:40:00  63  	    in_instrument_name,
15:40:00  64  	    in_private_card_holder_name,
15:40:00  65  	    in_private_street_address,
15:40:00  66  	    in_private_street_address2,
15:40:00  67  	    in_state,
15:40:00  68  	    in_city,
15:40:00  69  	    in_postal_code,
15:40:00  70  	    in_country,
15:40:00  71  	    in_last_four_cc,
15:40:00  72  	    in_expiration_date,
15:40:00  73  	    in_credit_card_type_id,
15:40:00  74  	    in_secret_token,
15:40:00  75  	    in_chase_profile_id,
15:40:00  76  	    var_date,
15:40:00  77  	    in_created_by,
15:40:00  78  	    var_date,
15:40:00  79  	    in_created_by,
15:40:00  80  	    in_credit_card_status_id,
15:40:00  81  	    in_private_first_name,
15:40:00  82  	    in_private_last_name
15:40:00  83  	  );
15:40:00  84  
15:40:00  85  	out_credit_card_id := var_credit_card_id;
15:40:00  86  END CREATE_CREDIT_CARD;
15:40:00  87  
15:40:00  88  /******************************************************************************/
15:40:00  89  
15:40:00  90  PROCEDURE UPDATE_CREDIT_CARD(
15:40:00  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
15:40:00  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:40:00  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
15:40:00  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:40:00  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
15:40:00  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
15:40:00  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
15:40:00  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
15:40:00  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
15:40:00 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
15:40:00 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:40:00 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
15:40:00 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
15:40:00 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
15:40:00 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
15:40:00 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
15:40:00 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
15:40:00 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
15:40:00 109  ) AS
15:40:00 110  BEGIN
15:40:00 111  
15:40:00 112  	-- Create history
15:40:00 113  	PROCS_HISTORY_V23.CREATE_CREDIT_CARD_HISTORY(
15:40:00 114  	  in_credit_card_id	       => in_credit_card_id,
15:40:00 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:00 116  	);
15:40:00 117  
15:40:00 118  	UPDATE CREDIT_CARD SET
15:40:00 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
15:40:00 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
15:40:00 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
15:40:00 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
15:40:00 123  	  STATE 		   = NVL(in_state, STATE),
15:40:00 124  	  CITY			   = NVL(in_city, CITY),
15:40:00 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
15:40:00 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
15:40:00 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
15:40:00 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
15:40:00 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
15:40:00 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
15:40:00 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
15:40:00 132  	  UPDATE_DATE		   = SYSDATE,
15:40:00 133  	  UPDATED_BY		   = in_updated_by,
15:40:00 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
15:40:00 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
15:40:00 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
15:40:00 137  	WHERE
15:40:00 138  	  ID = in_credit_card_id;
15:40:00 139  
15:40:00 140  END UPDATE_CREDIT_CARD;
15:40:00 141  
15:40:00 142  /******************************************************************************/
15:40:00 143  
15:40:00 144  PROCEDURE CREATE_PAYPAL(
15:40:00 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
15:40:00 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
15:40:00 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
15:40:00 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:40:00 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
15:40:00 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
15:40:00 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
15:40:00 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
15:40:00 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
15:40:00 154  	in_state			IN PAYPAL.STATE%TYPE,
15:40:00 155  	in_city 			IN PAYPAL.CITY%TYPE,
15:40:00 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
15:40:00 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
15:40:00 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
15:40:00 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
15:40:00 160  ) AS
15:40:00 161  -- VARIABLES
15:40:00 162  var_paypal_id PAYPAL.ID%TYPE;
15:40:00 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:00 164  var_date DATE := SYSDATE;
15:40:00 165  BEGIN
15:40:00 166  	IF in_paypal_id IS NULL THEN
15:40:00 167  	  SELECT
15:40:00 168  	    PP_ID_SEQ.nextVal into var_paypal_id
15:40:00 169  	  FROM DUAL;
15:40:00 170  	ELSE
15:40:00 171  	  var_paypal_id := in_paypal_id;
15:40:00 172  	END IF;
15:40:00 173  	INSERT INTO PAYPAL(
15:40:00 174  	    ID,
15:40:00 175  	    ACCOUNT_ID,
15:40:00 176  	    INSTRUMENT_NAME,
15:40:00 177  	    PRIVATE_EMAIL_ADDRESS,
15:40:00 178  	    CREATE_DATE,
15:40:00 179  	    CREATED_BY,
15:40:00 180  	    UPDATE_DATE,
15:40:00 181  	    UPDATED_BY,
15:40:00 182  	    PAYPAL_STATUS_ID,
15:40:00 183  	    PRIVATE_STREET_ADDRESS,
15:40:00 184  	    PRIVATE_STREET_ADDRESS2,
15:40:00 185  	    STATE,
15:40:00 186  	    CITY,
15:40:00 187  	    POSTAL_CODE,
15:40:00 188  	    COUNTRY,
15:40:00 189  	    EXPIRATION_DATE,
15:40:00 190  	    SECRET_TOKEN
15:40:00 191  	  ) VALUES (
15:40:00 192  	    var_paypal_id,
15:40:00 193  	    in_account_id,
15:40:00 194  	    in_instrument_name,
15:40:00 195  	    in_private_email_address,
15:40:00 196  	    var_date,
15:40:00 197  	    in_created_by,
15:40:00 198  	    var_date,
15:40:00 199  	    in_created_by,
15:40:00 200  	    in_paypal_status_id,
15:40:00 201  	    in_paypal_prvt_street_address,
15:40:00 202  	    in_paypal_prvt_street_address2,
15:40:00 203  	    in_state,
15:40:00 204  	    in_city,
15:40:00 205  	    in_postal_code,
15:40:00 206  	    in_country,
15:40:00 207  	    in_expiration_date,
15:40:00 208  	    in_secret_token
15:40:00 209  	  );
15:40:00 210  	out_paypal_id := var_paypal_id;
15:40:00 211  END CREATE_PAYPAL;
15:40:00 212  
15:40:00 213  /******************************************************************************/
15:40:00 214  
15:40:00 215  PROCEDURE UPDATE_PAYPAL(
15:40:00 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
15:40:00 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
15:40:00 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
15:40:00 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
15:40:00 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
15:40:00 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:40:00 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
15:40:00 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
15:40:00 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
15:40:00 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
15:40:00 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
15:40:00 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:40:00 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
15:40:00 229  ) AS
15:40:00 230  BEGIN
15:40:00 231  	-- Create history
15:40:00 232  	PROCS_HISTORY_V23.CREATE_PAYPAL_HISTORY(
15:40:00 233  	  in_paypal_id		       => in_paypal_id,
15:40:00 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:00 235  	);
15:40:00 236  
15:40:00 237  	UPDATE PAYPAL SET
15:40:00 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
15:40:00 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
15:40:00 240  	  UPDATE_DATE	   = SYSDATE,
15:40:00 241  	  UPDATED_BY	   = in_updated_by,
15:40:00 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
15:40:00 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
15:40:00 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
15:40:00 245  	  STATE 		  = NVL(in_state, STATE),
15:40:00 246  	  CITY			  = NVL(in_city, CITY),
15:40:00 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
15:40:00 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
15:40:00 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
15:40:00 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
15:40:00 251  	WHERE
15:40:00 252  	  ID = in_paypal_id;
15:40:00 253  END UPDATE_PAYPAL;
15:40:00 254  
15:40:00 255  /******************************************************************************/
15:40:00 256  
15:40:00 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
15:40:00 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
15:40:00 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
15:40:00 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
15:40:00 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:00 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
15:40:00 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:40:00 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
15:40:00 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
15:40:00 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
15:40:00 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
15:40:00 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
15:40:00 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
15:40:00 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
15:40:00 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
15:40:00 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
15:40:00 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
15:40:00 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
15:40:00 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
15:40:00 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
15:40:00 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
15:40:00 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL,
15:40:00 279  	in_campaign		      IN GC_CAMPAIGN_AND_REF.CAMPAIGN%TYPE DEFAULT NULL,
15:40:00 280  	in_reference_code	      IN GC_CAMPAIGN_AND_REF.REFERENCE_CODE%TYPE DEFAULT NULL
15:40:00 281  ) AS
15:40:00 282  -- VARIABLES
15:40:00 283  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
15:40:00 284  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:00 285  var_date DATE := SYSDATE;
15:40:00 286  BEGIN
15:40:00 287  	IF in_gift_certificate_id IS NULL THEN
15:40:00 288  	  SELECT
15:40:00 289  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
15:40:00 290  	  FROM DUAL;
15:40:00 291  	ELSE
15:40:00 292  	  var_gift_certificate_id := in_gift_certificate_id;
15:40:00 293  	END IF;
15:40:00 294  
15:40:00 295  	INSERT INTO GIFT_CERTIFICATE (
15:40:00 296  	    ID,
15:40:00 297  	    PURCHASER_GROUP_ID,
15:40:00 298  	    PURCHASE_INVOICE_ID,
15:40:00 299  	    OFFER_CHAIN_ID,
15:40:00 300  	    EXPIRATION_DATE,
15:40:00 301  	    PURCHASE_DATE,
15:40:00 302  	    GIFT_CERTIFICATE_STATUS_ID,
15:40:00 303  	    CODE,
15:40:00 304  	    CREATE_DATE,
15:40:00 305  	    CREATED_BY,
15:40:00 306  	    UPDATE_DATE,
15:40:00 307  	    UPDATED_BY,
15:40:00 308  	    RECIPIENT_NAME,
15:40:00 309  	    GIFT_MESSAGE,
15:40:00 310  	    RECIPIENT_EMAIL,
15:40:00 311  	    FINALIZED_INVOICE_ID,
15:40:00 312  	    SENDER_EMAIL,
15:40:00 313  	    SENDER_NAME,
15:40:00 314  	    REDEMPTION_DATE,
15:40:00 315  	    CANCELATION_DATE,
15:40:00 316  	    REDEEMER_GROUP_ID,
15:40:00 317  	    RECIPIENT_ADDRESS_ID,
15:40:00 318  	    RECIPIENT_NOTIFY_DATE
15:40:00 319  	  ) VALUES(
15:40:00 320  	    var_gift_certificate_id,
15:40:00 321  	    in_purchaser_group_id,
15:40:00 322  	    in_purchaser_invoice_id,
15:40:00 323  	    in_offer_chain_id,
15:40:00 324  	    in_expiration_date,
15:40:00 325  	    in_purchase_date,
15:40:00 326  	    in_gift_certificate_status_id,
15:40:00 327  	    in_code,
15:40:00 328  	    var_date,
15:40:00 329  	    in_created_by,
15:40:00 330  	    var_date,
15:40:00 331  	    in_created_by,
15:40:00 332  	    in_recipient_name,
15:40:00 333  	    in_gift_message,
15:40:00 334  	    in_recipient_email,
15:40:00 335  	    in_finalized_invoice_id,
15:40:00 336  	    in_sender_email,
15:40:00 337  	    in_sender_name,
15:40:00 338  	    in_redemption_date,
15:40:00 339  	    in_cancelation_date,
15:40:00 340  	    in_redeemer_group_id,
15:40:00 341  	    in_recipient_address_id,
15:40:00 342  	    in_recipient_notify_date
15:40:00 343  	  );
15:40:00 344  
15:40:00 345  	  IF in_campaign IS NOT NULL THEN
15:40:00 346  	    INSERT INTO GC_CAMPAIGN_AND_REF(GC_ID, CAMPAIGN, REFERENCE_CODE)
15:40:00 347  	      VALUES(var_gift_certificate_id, in_campaign, in_reference_code);
15:40:00 348  	  END IF;
15:40:00 349  
15:40:00 350  	out_gift_certificate_id := var_gift_certificate_id;
15:40:00 351  END CREATE_GIFT_CERTIFICATE;
15:40:00 352  
15:40:00 353  /******************************************************************************/
15:40:00 354  
15:40:00 355  PROCEDURE UPDATE_GIFT_CERTIFICATE(
15:40:00 356  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
15:40:00 357  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
15:40:00 358  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
15:40:00 359  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
15:40:00 360  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
15:40:00 361  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
15:40:00 362  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
15:40:00 363  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
15:40:00 364  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
15:40:00 365  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
15:40:00 366  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
15:40:00 367  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
15:40:00 368  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
15:40:00 369  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
15:40:00 370  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
15:40:00 371  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
15:40:00 372  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
15:40:00 373  ) AS
15:40:00 374  BEGIN
15:40:00 375  
15:40:00 376  	-- Create history
15:40:00 377  	PROCS_HISTORY_V23.CREATE_GIFT_CERT_HISTORY(
15:40:00 378  	  in_gift_certificate_id       => in_gift_certificate_id,
15:40:00 379  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:00 380  	);
15:40:00 381  
15:40:00 382  	UPDATE GIFT_CERTIFICATE SET
15:40:00 383  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
15:40:00 384  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
15:40:00 385  	  CODE			     = NVL(in_code, CODE),
15:40:00 386  	  UPDATE_DATE		     = SYSDATE,
15:40:00 387  	  UPDATED_BY		     = in_updated_by,
15:40:00 388  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
15:40:00 389  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
15:40:00 390  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
15:40:00 391  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
15:40:00 392  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
15:40:00 393  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
15:40:00 394  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
15:40:00 395  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
15:40:00 396  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
15:40:00 397  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
15:40:00 398  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
15:40:00 399  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
15:40:00 400  	WHERE
15:40:00 401  	  ID = in_gift_certificate_id;
15:40:00 402  
15:40:00 403  END UPDATE_GIFT_CERTIFICATE;
15:40:00 404  
15:40:00 405  END PROCS_FIN_INSTRUMENTS_CRU_V23;
15:40:00 406  .
15:40:00 SQL> /

Package body created.

Elapsed: 00:00:00.04
15:40:00 SQL> 
15:40:00 SQL> prompt Compiling body for procs_group_account_cru.sql
Compiling body for procs_group_account_cru.sql
15:40:00 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V23" AS
15:40:00   2  
15:40:00   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
15:40:00   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
15:40:00   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
15:40:00   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
15:40:00   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
15:40:00   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
15:40:00   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
15:40:00  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
15:40:00  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:40:00  12  ) AS
15:40:00  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
15:40:00  14  BEGIN
15:40:00  15  	UPDATE SUBSCRIPTION_SHARE SET
15:40:00  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
15:40:00  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
15:40:00  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
15:40:00  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
15:40:00  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
15:40:00  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
15:40:00  22  	  UPDATED_BY	       = in_updated_by,
15:40:00  23  	  UPDATE_DATE	       = SYSDATE
15:40:00  24  	WHERE
15:40:00  25  	  SUBSCRIPTION_SHARE.ID = in_id;
15:40:00  26  EXCEPTION
15:40:00  27  	WHEN OTHERS THEN
15:40:00  28  	  Procs_Common_V23.Throw_Exception(APP_EXCEPTION_CODES_V23.Internal_Error,
15:40:00  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
15:40:00  30  END UPDATE_SUBSCRIPTION_SHARE;
15:40:00  31  
15:40:00  32  PROCEDURE CREATE_GROUP_ACCOUNT (
15:40:00  33  	in_subscription_id	 IN NUMBER,
15:40:00  34  	in_group_name		 IN VARCHAR2,
15:40:00  35  	in_first_name		 IN VARCHAR2,
15:40:00  36  	in_last_name		 IN VARCHAR2,
15:40:00  37  	in_email		 IN VARCHAR2,
15:40:00  38  	in_phone		 IN VARCHAR2,
15:40:00  39  	in_organization_type	 IN VARCHAR2,
15:40:00  40  	in_seats		 IN NUMBER,
15:40:00  41  	in_seat_ttl_in_hours	 IN NUMBER,
15:40:00  42  	in_ip			 IN NUMBER,
15:40:00  43  	in_created_by		 IN VARCHAR2
15:40:00  44  ) AS
15:40:00  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
15:40:00  46  var_now DATE;
15:40:00  47  BEGIN
15:40:00  48  
15:40:00  49  	SELECT
15:40:00  50  	  SYSDATE INTO var_now
15:40:00  51  	FROM dual;
15:40:00  52  
15:40:00  53  	INSERT INTO GROUP_ACCOUNT (
15:40:00  54  	  id,
15:40:00  55  	  subscription_id,
15:40:00  56  	  group_name,
15:40:00  57  	  first_name,
15:40:00  58  	  last_name,
15:40:00  59  	  email,
15:40:00  60  	  phone,
15:40:00  61  	  organization_type,
15:40:00  62  	  seats,
15:40:00  63  	  seat_ttl_in_hours,
15:40:00  64  	  ip,
15:40:00  65  	  create_date,
15:40:00  66  	  created_by,
15:40:00  67  	  update_date,
15:40:00  68  	  updated_by
15:40:00  69  	) VALUES (
15:40:00  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
15:40:00  71  	  in_subscription_id,
15:40:00  72  	  in_group_name,
15:40:00  73  	  in_first_name,
15:40:00  74  	  in_last_name,
15:40:00  75  	  in_email,
15:40:00  76  	  in_phone,
15:40:00  77  	  in_organization_type,
15:40:00  78  	  in_seats,
15:40:00  79  	  in_seat_ttl_in_hours,
15:40:00  80  	  in_ip,
15:40:00  81  	  var_now,
15:40:00  82  	  in_created_by,
15:40:00  83  	  var_now,
15:40:00  84  	  in_created_by
15:40:00  85  	);
15:40:00  86  
15:40:00  87  EXCEPTION
15:40:00  88  	WHEN PROGRAM_ERROR THEN
15:40:00  89  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:00  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
15:40:00  91  	WHEN OTHERS THEN
15:40:00  92  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:00  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
15:40:00  94  END CREATE_GROUP_ACCOUNT;
15:40:00  95  
15:40:00  96  
15:40:00  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
15:40:00  98  	in_group_account_id    IN NUMBER,
15:40:00  99  	in_borrower_account_id IN NUMBER,
15:40:00 100  	in_ip_address	       IN VARCHAR2,
15:40:00 101  	in_email_domain        IN VARCHAR2,
15:40:00 102  	in_start_date	       IN DATE,
15:40:00 103  	in_end_date	       IN DATE,
15:40:00 104  	in_created_by	       IN VARCHAR2
15:40:00 105  ) AS
15:40:00 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
15:40:00 107  var_now DATE;
15:40:00 108  BEGIN
15:40:00 109  
15:40:00 110  	SELECT
15:40:00 111  	  SYSDATE INTO var_now
15:40:00 112  	FROM dual;
15:40:00 113  
15:40:00 114  	INSERT INTO SUBSCRIPTION_SHARE (
15:40:00 115  	  id,
15:40:00 116  	  group_account_id,
15:40:00 117  	  borrower_account_id,
15:40:00 118  	  ip_address,
15:40:00 119  	  email_domain,
15:40:00 120  	  start_date,
15:40:00 121  	  end_date,
15:40:00 122  	  create_date,
15:40:00 123  	  created_by,
15:40:00 124  	  update_date,
15:40:00 125  	  updated_by
15:40:00 126  	) VALUES (
15:40:00 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
15:40:00 128  	  in_group_account_id,
15:40:00 129  	  in_borrower_account_id,
15:40:00 130  	  in_ip_address,
15:40:00 131  	  in_email_domain,
15:40:00 132  	  in_start_date,
15:40:00 133  	  in_end_date,
15:40:00 134  	  var_now,
15:40:00 135  	  in_created_by,
15:40:00 136  	  var_now,
15:40:00 137  	  in_created_by
15:40:00 138  	);
15:40:00 139  
15:40:00 140  EXCEPTION
15:40:00 141  	WHEN PROGRAM_ERROR THEN
15:40:00 142  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:00 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
15:40:00 144  END CREATE_SUBSCRIPTION_SHARE;
15:40:00 145  
15:40:00 146  -- Eh, I don't like the cru packages at all
15:40:00 147  -- the idea of code reuse in PL/SQL is still lost on me
15:40:00 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
15:40:00 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:40:00 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:40:00 151  ) AS
15:40:00 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
15:40:00 153  BEGIN
15:40:00 154  	update
15:40:00 155  	  GROUP_ACCOUNT_IP_RANGE IR
15:40:00 156  	set
15:40:00 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_INACTIVE,
15:40:00 158  	  IR.UPDATED_BY = in_updated_by,
15:40:00 159  	  IR.UPDATE_DATE = sysdate
15:40:00 160  	where
15:40:00 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
15:40:00 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE
15:40:00 163  	;
15:40:00 164  EXCEPTION
15:40:00 165  WHEN OTHERS THEN
15:40:00 166  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:00 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:00 168  END DISABLE_IP_RANGES_BY_GA_ID;
15:40:00 169  
15:40:00 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
15:40:00 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
15:40:00 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:40:00 173  ) AS
15:40:00 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
15:40:00 175  BEGIN
15:40:00 176  	update
15:40:00 177  	  GROUP_ACCOUNT_IP_RANGE IR
15:40:00 178  	set
15:40:00 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_INACTIVE,
15:40:00 180  	  IR.UPDATED_BY = in_updated_by,
15:40:00 181  	  IR.UPDATE_DATE = sysdate
15:40:00 182  	where
15:40:00 183  	  IR.ID = in_id and
15:40:00 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE
15:40:00 185  	;
15:40:00 186  	if sql%rowcount = 0 then
15:40:00 187  	  raise NO_DATA_FOUND ;
15:40:00 188  	end if;
15:40:00 189  EXCEPTION
15:40:00 190  WHEN NO_DATA_FOUND THEN
15:40:00 191  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:00 192  	  SPROC_NAME, 'Missing or invalid group_account_ip_range_id '||in_id, SQLERRM);
15:40:00 193  WHEN OTHERS THEN
15:40:00 194  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:00 195  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
15:40:00 196  END DISABLE_IP_RANGE_BY_ID;
15:40:00 197  
15:40:00 198  PROCEDURE ADD_IP_RANGE (
15:40:00 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:40:00 200  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
15:40:00 201  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:40:00 202  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:40:00 203  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
15:40:00 204  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
15:40:00 205  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
15:40:00 206  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
15:40:00 207  ) AS
15:40:00 208  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
15:40:00 209  BEGIN
15:40:00 210  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
15:40:00 211  	    ID,
15:40:00 212  	    GROUP_ACCOUNT_ID,
15:40:00 213  	    MINIMUM_IP_STRING,
15:40:00 214  	    MINIMUM_IP_LOW,
15:40:00 215  	    MINIMUM_IP_HIGH,
15:40:00 216  	    MAXIMUM_IP_STRING,
15:40:00 217  	    MAXIMUM_IP_LOW,
15:40:00 218  	    MAXIMUM_IP_HIGH,
15:40:00 219  	    CREATED_BY,
15:40:00 220  	    CREATE_DATE,
15:40:00 221  	    UPDATED_BY,
15:40:00 222  	    UPDATE_DATE,
15:40:00 223  	    GROUP_ACC_IP_RNG_STATUS_ID
15:40:00 224  	  )
15:40:00 225  	  VALUES (
15:40:00 226  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
15:40:00 227  	    in_group_account_id,
15:40:00 228  	    in_minimum_ip_string,
15:40:00 229  	    in_minimum_ip_low,
15:40:01 230  	    in_minimum_ip_high,
15:40:01 231  	    in_maximum_ip_string,
15:40:01 232  	    in_maximum_ip_low,
15:40:01 233  	    in_maximum_ip_high,
15:40:01 234  	    in_created_by,
15:40:01 235  	    sysdate,
15:40:01 236  	    in_created_by,
15:40:01 237  	    sysdate,
15:40:01 238  	    GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE
15:40:01 239  	  );
15:40:01 240  EXCEPTION
15:40:01 241  WHEN OTHERS THEN
15:40:01 242  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 243  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:01 244  END ADD_IP_RANGE;
15:40:01 245  
15:40:01 246  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
15:40:01 247  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:40:01 248  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:40:01 249  ) AS
15:40:01 250  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
15:40:01 251  BEGIN
15:40:01 252  	update
15:40:01 253  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
15:40:01 254  	set
15:40:01 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_INACT,
15:40:01 256  	  ED.UPDATED_BY = in_updated_by,
15:40:01 257  	  ED.UPDATE_DATE = sysdate
15:40:01 258  	where
15:40:01 259  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
15:40:01 260  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_ACT
15:40:01 261  	;
15:40:01 262  EXCEPTION
15:40:01 263  WHEN OTHERS THEN
15:40:01 264  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 265  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:01 266  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
15:40:01 267  
15:40:01 268  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
15:40:01 269  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:40:01 270  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:40:01 271  ) AS
15:40:01 272  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
15:40:01 273  BEGIN
15:40:01 274  	update
15:40:01 275  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
15:40:01 276  	set
15:40:01 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_INACT,
15:40:01 278  	  ED.UPDATED_BY = in_updated_by,
15:40:01 279  	  ED.UPDATE_DATE = sysdate
15:40:01 280  	where
15:40:01 281  	  ED.ID = in_id and
15:40:01 282  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_ACT
15:40:01 283  	;
15:40:01 284  EXCEPTION
15:40:01 285  WHEN OTHERS THEN
15:40:01 286  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 287  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
15:40:01 288  END DISABLE_EMAIL_DOMAIN_BY_ID;
15:40:01 289  
15:40:01 290  
15:40:01 291  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
15:40:01 292  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:40:01 293  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:40:01 294  ) AS
15:40:01 295  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
15:40:01 296  BEGIN
15:40:01 297  	update
15:40:01 298  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
15:40:01 299  	set
15:40:01 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_ACT,
15:40:01 301  	  ED.UPDATED_BY = in_updated_by,
15:40:01 302  	  ED.UPDATE_DATE = sysdate
15:40:01 303  	where
15:40:01 304  	  ED.ID = in_id and
15:40:01 305  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_INACT
15:40:01 306  	;
15:40:01 307  EXCEPTION
15:40:01 308  WHEN DUP_VAL_ON_INDEX THEN
15:40:01 309  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:01 310  		SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
15:40:01 311  WHEN OTHERS THEN
15:40:01 312  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 313  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
15:40:01 314  END ENABLE_EMAIL_DOMAIN_BY_ID;
15:40:01 315  
15:40:01 316  
15:40:01 317  PROCEDURE ADD_EMAIL_DOMAIN (
15:40:01 318  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:40:01 319  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:40:01 320  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
15:40:01 321  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
15:40:01 322  ) AS
15:40:01 323  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
15:40:01 324  BEGIN
15:40:01 325  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
15:40:01 326  	    ID,
15:40:01 327  	    GROUP_ACCOUNT_ID,
15:40:01 328  	    EMAIL_DOMAIN,
15:40:01 329  		IS_ACTIVE,
15:40:01 330  	    CREATED_BY,
15:40:01 331  	    CREATE_DATE,
15:40:01 332  	    UPDATED_BY,
15:40:01 333  	    UPDATE_DATE
15:40:01 334  	  )
15:40:01 335  	  VALUES (
15:40:01 336  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
15:40:01 337  	    in_group_account_id,
15:40:01 338  		in_email_domain,
15:40:01 339  		in_is_active,
15:40:01 340  		in_created_by,
15:40:01 341  	    sysdate,
15:40:01 342  	    in_created_by,
15:40:01 343  	    sysdate
15:40:01 344  	  );
15:40:01 345  EXCEPTION
15:40:01 346  WHEN DUP_VAL_ON_INDEX THEN
15:40:01 347  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:01 348  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
15:40:01 349  WHEN OTHERS THEN
15:40:01 350  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 351  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
15:40:01 352  END ADD_EMAIL_DOMAIN;
15:40:01 353  
15:40:01 354  PROCEDURE UPDATE_GROUP_ACCOUNT (
15:40:01 355  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:40:01 356  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
15:40:01 357  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
15:40:01 358  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
15:40:01 359  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
15:40:01 360  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
15:40:01 361  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:40:01 362  ) AS
15:40:01 363  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
15:40:01 364  BEGIN
15:40:01 365  	update
15:40:01 366  	  group_account
15:40:01 367  	set
15:40:01 368  	  group_name = nvl(in_group_name, group_name),
15:40:01 369  	  first_name = nvl(in_first_name, first_name),
15:40:01 370  	  last_name = nvl(in_last_name, last_name),
15:40:01 371  	  email = nvl(in_email, email),
15:40:01 372  	  phone = nvl(in_phone, phone),
15:40:01 373  	  updated_by = in_updated_by,
15:40:01 374  	  update_date = sysdate
15:40:01 375  	where
15:40:01 376  	  id = in_group_account_id;
15:40:01 377  
15:40:01 378  	if(sql%rowcount = 0) then
15:40:01 379  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:01 380  	  SPROC_NAME, 'Group Account not found', SQLERRM);
15:40:01 381  	end if;
15:40:01 382  EXCEPTION
15:40:01 383  	WHEN OTHERS THEN
15:40:01 384  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:01 385  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
15:40:01 386  END UPDATE_GROUP_ACCOUNT;
15:40:01 387  
15:40:01 388  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
15:40:01 389  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
15:40:01 390  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
15:40:01 391  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:40:01 392  ) AS
15:40:01 393  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
15:40:01 394  var_subscription_id NUMBER;
15:40:01 395  var_seats NUMBER;
15:40:01 396  BEGIN
15:40:01 397  	select subscription_id, seats into var_subscription_id, var_seats
15:40:01 398  	from group_account
15:40:01 399  	where id = in_group_account_id;
15:40:01 400  
15:40:01 401  	update
15:40:01 402  	  group_account
15:40:01 403  	set
15:40:01 404  	  seats = in_seats,
15:40:01 405  	  updated_by = in_updated_by,
15:40:01 406  	  update_date = sysdate
15:40:01 407  	where
15:40:01 408  	  id = in_group_account_id;
15:40:01 409  
15:40:01 410  	if(sql%rowcount = 0) then
15:40:01 411  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:01 412  	  SPROC_NAME, 'Group Account not found', SQLERRM);
15:40:01 413  	end if;
15:40:01 414  
15:40:01 415  	PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
15:40:01 416  	  in_subscription_id => var_subscription_id,
15:40:01 417  	  in_agent_id	     => 0,
15:40:01 418  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
15:40:01 419  	  in_created_by      => in_updated_by
15:40:01 420  	);
15:40:01 421  EXCEPTION
15:40:01 422  	WHEN NO_DATA_FOUND THEN
15:40:01 423  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:01 424  	  SPROC_NAME, 'Group Account not found', SQLERRM);
15:40:01 425  	WHEN OTHERS THEN
15:40:01 426  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:01 427  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
15:40:01 428  END UPDATE_GROUP_ACCOUNT_SEATS;
15:40:01 429  
15:40:01 430  END PROCS_GROUP_ACCOUNT_CRU_V23;
15:40:01 431  .
15:40:01 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:40:01 SQL> 
15:40:01 SQL> prompt Compiling body for procs_invoice_cru.sql
Compiling body for procs_invoice_cru.sql
15:40:01 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V23" AS
15:40:01   2  
15:40:01   3  PROCEDURE CREATE_INVOICE (
15:40:01   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
15:40:01   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
15:40:01   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
15:40:01   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
15:40:01   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
15:40:01   9  ) AS
15:40:01  10  -- VARIABLES
15:40:01  11  var_invoice_id INVOICE.ID%TYPE;
15:40:01  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:01  13  var_date DATE := SYSDATE;
15:40:01  14  BEGIN
15:40:01  15  	IF in_invoice_id IS NULL THEN
15:40:01  16  	  SELECT
15:40:01  17  	    INV_ID_SEQ.nextVal into var_invoice_id
15:40:01  18  	  FROM DUAL;
15:40:01  19  	ELSE
15:40:01  20  	  var_invoice_id := in_invoice_id;
15:40:01  21  	END IF;
15:40:01  22  	INSERT INTO
15:40:01  23  	  INVOICE (
15:40:01  24  	    ID,
15:40:01  25  	    INVOICE_STATUS_ID,
15:40:01  26  	    CREATE_DATE,
15:40:01  27  	    CREATED_BY,
15:40:01  28  	    UPDATE_DATE,
15:40:01  29  	    UPDATED_BY,
15:40:01  30  	    TAX_EXEMPT_ID,
15:40:01  31  	    IS_TAX_CALCULATION_NEEDED
15:40:01  32  	  ) VALUES (
15:40:01  33  	    var_invoice_id,
15:40:01  34  	    in_invoice_status_id,
15:40:01  35  	    var_date,
15:40:01  36  	    in_created_by,
15:40:01  37  	    var_date,
15:40:01  38  	    in_created_by,
15:40:01  39  	    in_tax_exempt_id,
15:40:01  40  	    0 -- DEFAULT VALUE
15:40:01  41  	  );
15:40:01  42  
15:40:01  43  	out_invoice_id := var_invoice_id;
15:40:01  44  END;
15:40:01  45  
15:40:01  46  /*****************************************************************/
15:40:01  47  
15:40:01  48  PROCEDURE UPDATE_INVOICE (
15:40:01  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
15:40:01  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
15:40:01  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
15:40:01  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
15:40:01  53  ) AS
15:40:01  54  BEGIN
15:40:01  55  	-- Create history
15:40:01  56  	PROCS_HISTORY_V23.CREATE_INVOICE_HISTORY(
15:40:01  57  	  in_invoice_id 	       => in_invoice_id,
15:40:01  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:01  59  	);
15:40:01  60  
15:40:01  61  	UPDATE
15:40:01  62  	  INVOICE
15:40:01  63  	SET
15:40:01  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
15:40:01  65  	  UPDATE_DATE		    = SYSDATE,
15:40:01  66  	  UPDATED_BY		    = in_updated_by,
15:40:01  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
15:40:01  68  	WHERE
15:40:01  69  	  ID = in_invoice_id;
15:40:01  70  END;
15:40:01  71  
15:40:01  72  END PROCS_INVOICE_CRU_V23;
15:40:01  73  .
15:40:01 SQL> /

Package body created.

Elapsed: 00:00:00.11
15:40:01 SQL> 
15:40:01 SQL> prompt Compiling body for procs_itunes_receipt_cru.sql
Compiling body for procs_itunes_receipt_cru.sql
15:40:01 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V23" AS
15:40:01   2  
15:40:01   3  PROCEDURE CREATE_RECEIPT(
15:40:01   4  /*
15:40:01   5  Throws exceptions:
15:40:01   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:01   7  */
15:40:01   8  	  out_id	      OUT NUMBER,
15:40:01   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:40:01  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
15:40:01  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
15:40:01  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
15:40:01  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:40:01  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:40:01  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:40:01  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:40:01  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:40:01  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:40:01  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:40:01  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
15:40:01  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
15:40:01  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:40:01  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
15:40:01  24  ) AS
15:40:01  25  -- VARIABLES
15:40:01  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
15:40:01  27  var_current_date	    DATE;
15:40:01  28  var_count 	    NUMBER;
15:40:01  29  ITUNES_ORG_TNX_USED   EXCEPTION;
15:40:01  30  BEGIN
15:40:01  31  	SELECT COUNT(1) into var_count
15:40:01  32  	FROM
15:40:01  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
15:40:01  34  	WHERE
15:40:01  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
15:40:01  36  	  IR.SUBSCRIPTION_ID = S.ID AND
15:40:01  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
15:40:01  38  
15:40:01  39  	if var_count > 0 then
15:40:01  40  	  raise ITUNES_ORG_TNX_USED;
15:40:01  41  	end if;
15:40:01  42  
15:40:01  43  	SELECT
15:40:01  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
15:40:01  45  	INTO
15:40:01  46  	  out_id
15:40:01  47  	FROM
15:40:01  48  	  dual
15:40:01  49  	;
15:40:01  50  
15:40:01  51  	SELECT
15:40:01  52  	  sysdate
15:40:01  53  	INTO
15:40:01  54  	  var_current_date
15:40:01  55  	FROM
15:40:01  56  	  dual
15:40:01  57  	;
15:40:01  58  
15:40:01  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
15:40:01  60  	(
15:40:01  61  	  id,
15:40:01  62  	  subscription_id,
15:40:01  63  	  receipt,
15:40:01  64  	  status,
15:40:01  65  	  quantity,
15:40:01  66  	  product_id,
15:40:01  67  	  transaction_id,
15:40:01  68  	  purchase_date,
15:40:01  69  	  original_transaction_id,
15:40:01  70  	  original_purchase_date,
15:40:01  71  	  app_item_id,
15:40:01  72  	  version_external_id,
15:40:01  73  	  bid,
15:40:01  74  	  bvrs,
15:40:01  75  	  expires_date,
15:40:01  76  	  create_date,
15:40:01  77  	  created_by,
15:40:01  78  	  update_date,
15:40:01  79  	  updated_by,
15:40:01  80  	  last_check_date
15:40:01  81  	)
15:40:01  82  	VALUES
15:40:01  83  	(
15:40:01  84  	  out_id,
15:40:01  85  	  in_subscription_id,
15:40:01  86  	  in_receipt,
15:40:01  87  	  in_status,
15:40:01  88  	  in_quantity,
15:40:01  89  	  in_product_id,
15:40:01  90  	  in_transaction_id,
15:40:01  91  	  in_purchase_date,
15:40:01  92  	  in_original_transaction_id,
15:40:01  93  	  in_original_purchase_date,
15:40:01  94  	  in_app_item_id,
15:40:01  95  	  in_version_external_id,
15:40:01  96  	  in_bid,
15:40:01  97  	  in_bvrs,
15:40:01  98  	  in_expires_date,
15:40:01  99  	  var_current_date,
15:40:01 100  	  in_created_by,
15:40:01 101  	  var_current_date,
15:40:01 102  	  in_created_by,
15:40:01 103  	  var_current_date
15:40:01 104  	);
15:40:01 105  
15:40:01 106  EXCEPTION
15:40:01 107  WHEN ITUNES_ORG_TNX_USED THEN
15:40:01 108  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:01 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
15:40:01 110  WHEN DUP_VAL_ON_INDEX THEN
15:40:01 111  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:01 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
15:40:01 113  WHEN OTHERS THEN
15:40:01 114  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:01 116  END CREATE_RECEIPT;
15:40:01 117  
15:40:01 118  PROCEDURE UPDATE_RECEIPT(
15:40:01 119  /*
15:40:01 120  Throws exceptions:
15:40:01 121  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:01 122  */
15:40:01 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
15:40:01 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
15:40:01 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
15:40:01 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
15:40:01 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:40:01 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:40:01 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:40:01 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:40:01 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:40:01 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:40:01 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:40:01 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
15:40:01 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
15:40:01 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:40:01 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
15:40:01 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
15:40:01 139  ) AS
15:40:01 140  -- VARIABLES
15:40:01 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
15:40:01 142  var_current_date	    DATE;
15:40:01 143  BEGIN
15:40:01 144  
15:40:01 145  	SELECT
15:40:01 146  	  sysdate
15:40:01 147  	INTO
15:40:01 148  	  var_current_date
15:40:01 149  	FROM
15:40:01 150  	  dual
15:40:01 151  	;
15:40:01 152  
15:40:01 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
15:40:01 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_ITUNES_RECEIPT_HISTORY
15:40:01 155  	  (
15:40:01 156  	      rec.id,
15:40:01 157  	      rec.subscription_id,
15:40:01 158  	      rec.receipt,
15:40:01 159  	      rec.status,
15:40:01 160  	      rec.quantity,
15:40:01 161  	      rec.product_id,
15:40:01 162  	      rec.transaction_id,
15:40:01 163  	      rec.purchase_date,
15:40:01 164  	      rec.original_transaction_id,
15:40:01 165  	      rec.original_purchase_date,
15:40:01 166  	      rec.app_item_id,
15:40:01 167  	      rec.version_external_id,
15:40:01 168  	      rec.bid,
15:40:01 169  	      rec.bvrs,
15:40:01 170  	      rec.expires_date,
15:40:01 171  	      rec.create_date,
15:40:01 172  	      rec.created_by,
15:40:01 173  	      rec.update_date,
15:40:01 174  	      rec.updated_by,
15:40:01 175  	      rec.last_check_date,
15:40:01 176  	      rec.cancel_date
15:40:01 177  	  );
15:40:01 178  	END LOOP;
15:40:01 179  
15:40:01 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
15:40:01 181  	SET
15:40:01 182  	  receipt = in_receipt,
15:40:01 183  	  status = in_status,
15:40:01 184  	  quantity = in_quantity,
15:40:01 185  	  product_id = in_product_id,
15:40:01 186  	  transaction_id = in_transaction_id,
15:40:01 187  	  purchase_date = in_purchase_date,
15:40:01 188  	  original_transaction_id = in_original_transaction_id,
15:40:01 189  	  original_purchase_date = in_original_purchase_date,
15:40:01 190  	  app_item_id = in_app_item_id,
15:40:01 191  	  version_external_id = in_version_external_id,
15:40:01 192  	  bid = in_bid,
15:40:01 193  	  bvrs = in_bvrs,
15:40:01 194  	  expires_date = in_expires_date,
15:40:01 195  	  update_date = var_current_date,
15:40:01 196  	  updated_by = in_updated_by,
15:40:01 197  	  last_check_date = var_current_date,
15:40:01 198  	  cancel_date = in_cancel_date
15:40:01 199  	WHERE
15:40:01 200  	  id = in_id
15:40:01 201  	;
15:40:01 202  
15:40:01 203  EXCEPTION
15:40:01 204  WHEN DUP_VAL_ON_INDEX THEN
15:40:01 205  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:01 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
15:40:01 207  WHEN OTHERS THEN
15:40:01 208  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:01 210  
15:40:01 211  END UPDATE_RECEIPT;
15:40:01 212  
15:40:01 213  PROCEDURE LINK_ITUNES_RECEIPT(
15:40:01 214  /*
15:40:01 215  Throws exceptions:
15:40:01 216  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:01 217  */
15:40:01 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
15:40:01 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:40:01 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
15:40:01 221  ) AS
15:40:01 222  -- VARIABLES
15:40:01 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
15:40:01 224  var_current_date	    DATE;
15:40:01 225  BEGIN
15:40:01 226  
15:40:01 227  	      SELECT
15:40:01 228  	  sysdate
15:40:01 229  	      INTO
15:40:01 230  	  var_current_date
15:40:01 231  	      FROM
15:40:01 232  	  dual
15:40:01 233  	      ;
15:40:01 234  
15:40:01 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
15:40:01 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_ITUNES_RECEIPT_HISTORY
15:40:01 237  	      (
15:40:01 238  	    rec.id,
15:40:01 239  	    rec.subscription_id,
15:40:01 240  	    rec.receipt,
15:40:01 241  	    rec.status,
15:40:01 242  	    rec.quantity,
15:40:01 243  	    rec.product_id,
15:40:01 244  	    rec.transaction_id,
15:40:01 245  	    rec.purchase_date,
15:40:01 246  	    rec.original_transaction_id,
15:40:01 247  	    rec.original_purchase_date,
15:40:01 248  	    rec.app_item_id,
15:40:01 249  	    rec.version_external_id,
15:40:01 250  	    rec.bid,
15:40:01 251  	    rec.bvrs,
15:40:01 252  	    rec.expires_date,
15:40:01 253  	    rec.create_date,
15:40:01 254  	    rec.created_by,
15:40:01 255  	    rec.update_date,
15:40:01 256  	    rec.updated_by,
15:40:01 257  	    rec.last_check_date,
15:40:01 258  	    rec.cancel_date
15:40:01 259  	      );
15:40:01 260  	      END LOOP;
15:40:01 261  
15:40:01 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
15:40:01 263  		SET
15:40:01 264  		      subscription_id = in_subscription_id,
15:40:01 265  		      update_date = var_current_date,
15:40:01 266  	      updated_by = in_updated_by,
15:40:01 267  	      last_check_date = var_current_date
15:40:01 268  	      WHERE
15:40:01 269  		  id = in_id
15:40:01 270  	      ;
15:40:01 271  
15:40:01 272  	      EXCEPTION
15:40:01 273  	      WHEN DUP_VAL_ON_INDEX THEN
15:40:01 274  		PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:01 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
15:40:01 276  	      WHEN OTHERS THEN
15:40:01 277  		PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:01 279  END LINK_ITUNES_RECEIPT;
15:40:01 280  
15:40:01 281  
15:40:01 282  PROCEDURE MARK_RECEIPT_CHECKED(
15:40:01 283  /*
15:40:01 284  Throws exceptions:
15:40:01 285  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:01 286  */
15:40:01 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
15:40:01 288  ) AS
15:40:01 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
15:40:01 290  BEGIN
15:40:01 291  	UPDATE
15:40:01 292  	  CORE_OWNER.ITUNES_RECEIPT
15:40:01 293  	SET
15:40:01 294  	  last_check_date = sysdate
15:40:01 295  	WHERE
15:40:01 296  	  id = in_id
15:40:01 297  	;
15:40:01 298  EXCEPTION
15:40:01 299  WHEN OTHERS THEN
15:40:01 300  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:01 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:01 302  END MARK_RECEIPT_CHECKED;
15:40:01 303  
15:40:01 304  END PROCS_ITUNES_RECEIPT_CRU_V23;
15:40:01 305  .
15:40:01 SQL> /

Warning: Package Body created with compilation errors.

Elapsed: 00:00:00.21
15:40:01 SQL> 
15:40:01 SQL> prompt Compiling body for procs_license_cru.sql
Compiling body for procs_license_cru.sql
15:40:01 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V23" AS
15:40:01   2  
15:40:01   3  PROCEDURE CREATE_LICENSE(
15:40:01   4  	out_license_id		    OUT LICENSE.ID%TYPE,
15:40:01   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
15:40:01   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
15:40:01   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
15:40:01   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
15:40:01   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
15:40:01  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
15:40:01  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
15:40:01  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
15:40:01  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
15:40:01  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
15:40:01  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
15:40:01  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
15:40:01  17  ) AS
15:40:01  18  -- VARIABLES
15:40:01  19  var_license_id LICENSE.ID%TYPE;
15:40:01  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:01  21  var_date DATE := SYSDATE;
15:40:01  22  BEGIN
15:40:01  23  	IF in_license_id IS NULL THEN
15:40:01  24  	  SELECT
15:40:01  25  	    LCN_ID_SEQ.nextVal into var_license_id
15:40:01  26  	  FROM DUAL;
15:40:01  27  	ELSE
15:40:01  28  	  var_license_id := in_license_id;
15:40:01  29  	END IF;
15:40:01  30  	INSERT INTO
15:40:01  31  	  LICENSE (
15:40:01  32  	    ID,
15:40:01  33  	    LICENSE_STATUS_ID,
15:40:01  34  	    NEEDS_ENTITLEMENTS,
15:40:01  35  	    START_DATE,
15:40:01  36  	    OFFER_ID,
15:40:01  37  	    SUBSCRIPTION_ID,
15:40:01  38  	    INVOICE_ID,
15:40:01  39  	    END_DATE,
15:40:01  40  	    CREATE_DATE,
15:40:01  41  	    CREATED_BY,
15:40:01  42  	    UPDATE_DATE,
15:40:01  43  	    UPDATED_BY,
15:40:01  44  	    IS_EXTENSION,
15:40:01  45  	    CURRENT_OFFER_INDEX,
15:40:01  46  	    CURRENT_OFFER_RECURR_NUM,
15:40:01  47  	    ENTITLEMENT_END_DATE
15:40:01  48  	  ) VALUES (
15:40:01  49  	    var_license_id,
15:40:01  50  	    in_license_status_id,
15:40:01  51  	    in_needs_entitlements,
15:40:01  52  	    in_start_date,
15:40:01  53  	    in_offer_id,
15:40:01  54  	    in_subscription_id,
15:40:01  55  	    in_invoice_id,
15:40:01  56  	    in_end_date,
15:40:01  57  	    var_date,
15:40:01  58  	    in_created_by,
15:40:01  59  	    var_date,
15:40:01  60  	    in_created_by,
15:40:01  61  	    in_is_extension,
15:40:01  62  	    in_current_offer_index,
15:40:01  63  	    in_current_offer_recurr_num,
15:40:01  64  	    in_end_date
15:40:01  65  	  );
15:40:01  66  
15:40:01  67  	out_license_id := var_license_id;
15:40:01  68  END CREATE_LICENSE;
15:40:01  69  
15:40:01  70  /********************************************************************/
15:40:01  71  
15:40:01  72  PROCEDURE UPDATE_LICENSE (
15:40:01  73  	in_license_id		    IN LICENSE.ID%TYPE,
15:40:01  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
15:40:01  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
15:40:01  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
15:40:01  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
15:40:01  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
15:40:01  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
15:40:01  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
15:40:01  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
15:40:01  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
15:40:01  83  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
15:40:01  84  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
15:40:01  85  ) AS
15:40:01  86  BEGIN
15:40:01  87  	-- Create history
15:40:01  88  	PROCS_HISTORY_V23.CREATE_LICENSE_HISTORY(
15:40:01  89  	  in_license_id 	       => in_license_id,
15:40:01  90  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:01  91  	);
15:40:01  92  
15:40:01  93  	UPDATE
15:40:01  94  	  LICENSE
15:40:01  95  	SET
15:40:01  96  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
15:40:01  97  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
15:40:01  98  	  START_DATE		   = NVL(in_start_date, START_DATE),
15:40:01  99  	  END_DATE		   = NVL(in_end_date, END_DATE),
15:40:01 100  	  UPDATE_DATE		   = SYSDATE,
15:40:01 101  	  UPDATED_BY		   = in_updated_by,
15:40:01 102  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
15:40:01 103  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
15:40:01 104  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
15:40:01 105  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE),
15:40:01 106  	  GRACE_START_DATE	   = NVL(in_grace_start_date, GRACE_START_DATE),
15:40:01 107  	  GRACE_END_DATE	   = NVL(in_grace_end_date, GRACE_END_DATE)
15:40:01 108  	WHERE
15:40:01 109  	  LICENSE.ID = in_license_id;
15:40:01 110  END UPDATE_LICENSE;
15:40:01 111  
15:40:01 112  END PROCS_LICENSE_CRU_V23;
15:40:01 113  .
15:40:01 SQL> /

Package body created.

Elapsed: 00:00:00.08
15:40:01 SQL> 
15:40:01 SQL> prompt Compiling body for procs_line_items_cru.sql
Compiling body for procs_line_items_cru.sql
15:40:01 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V23" AS
15:40:01   2  
15:40:01   3  PROCEDURE CREATE_LINE_ITEM (
15:40:01   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
15:40:01   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
15:40:01   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
15:40:01   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
15:40:01   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
15:40:01   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
15:40:01  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
15:40:01  11  ) AS
15:40:01  12  BEGIN
15:40:01  13  	IF inout_line_item_id IS NULL THEN
15:40:01  14  	  SELECT
15:40:01  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
15:40:01  16  	  FROM DUAL;
15:40:01  17  	END IF;
15:40:01  18  	INSERT INTO LINE_ITEM (
15:40:01  19  	  ID,
15:40:01  20  	  PRODUCT_OFFER_ID,
15:40:01  21  	  INVOICE_ID,
15:40:01  22  	  AMOUNT,
15:40:01  23  	  QUANTITY,
15:40:01  24  	  CREATE_DATE,
15:40:01  25  	  CREATED_BY,
15:40:01  26  	  DISCOUNT_AMOUNT,
15:40:01  27  	  TAXES_AMOUNT
15:40:01  28  	) VALUES (
15:40:01  29  	  inout_line_item_id,
15:40:01  30  	  in_product_offer_id,
15:40:01  31  	  in_invoice_id,
15:40:01  32  	  in_amount,
15:40:01  33  	  1, -- [REVU]: Deprecated. Ignore this field
15:40:01  34  	  SYSDATE,
15:40:01  35  	  in_created_by,
15:40:01  36  	  in_discount_amount,
15:40:01  37  	  in_taxes_amount
15:40:01  38  	);
15:40:01  39  END CREATE_LINE_ITEM;
15:40:01  40  
15:40:01  41  /******************************************************************************/
15:40:01  42  
15:40:01  43  PROCEDURE UPDATE_LINE_ITEM (
15:40:01  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
15:40:01  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
15:40:01  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
15:40:01  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
15:40:01  48  ) AS
15:40:01  49  BEGIN
15:40:01  50  	UPDATE
15:40:01  51  	  LINE_ITEM
15:40:01  52  	SET
15:40:01  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
15:40:01  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
15:40:01  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
15:40:01  56  	WHERE
15:40:01  57  	  LINE_ITEM.ID = in_line_item_id;
15:40:01  58  END UPDATE_LINE_ITEM;
15:40:01  59  
15:40:01  60  /******************************************************************************/
15:40:01  61  
15:40:01  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
15:40:01  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
15:40:01  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
15:40:01  65  ) AS
15:40:01  66  BEGIN
15:40:01  67  	INSERT INTO DISCOUNT_LINE_ITEM(
15:40:01  68  	  DISCOUNT_ID,
15:40:01  69  	  LINE_ITEM_ID
15:40:01  70  	) VALUES (
15:40:01  71  	  in_discount_id,
15:40:01  72  	  in_line_item_id
15:40:01  73  	);
15:40:01  74  END CREATE_DISCOUNT_LINE_ITEM;
15:40:01  75  
15:40:01  76  END PROCS_LINE_ITEMS_CRU_V23;
15:40:01  77  .
15:40:01 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:40:01 SQL> 
15:40:01 SQL> prompt Compiling body for procs_reconciliation_cru.sql
Compiling body for procs_reconciliation_cru.sql
15:40:01 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V23" AS
15:40:01   2  
15:40:01   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
15:40:01   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
15:40:01   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
15:40:01   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:40:01   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
15:40:01   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
15:40:01   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
15:40:01  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
15:40:01  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
15:40:01  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:40:01  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
15:40:01  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
15:40:01  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
15:40:01  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:40:01  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
15:40:01  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
15:40:01  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
15:40:01  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
15:40:01  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
15:40:01  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
15:40:01  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
15:40:01  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
15:40:01  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
15:40:01  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
15:40:01  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
15:40:01  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
15:40:01  29  ) AS
15:40:01  30  -- VARIABLES
15:40:01  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
15:40:01  32  var_date DATE := SYSDATE;
15:40:01  33  BEGIN
15:40:01  34  	IF in_cpt_chargeback_act_id IS NULL THEN
15:40:01  35  	  SELECT
15:40:01  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
15:40:01  37  	  FROM DUAL;
15:40:01  38  	ELSE
15:40:01  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
15:40:01  40  	END IF;
15:40:01  41  	INSERT INTO
15:40:01  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
15:40:01  43  	    id,
15:40:01  44  	    rcn_ext_source_log_id,
15:40:01  45  	    record_type,
15:40:01  46  	    entity_type,
15:40:01  47  	    entity_number,
15:40:01  48  	    chargeback_amount_issuer,
15:40:01  49  	    prev_partial_representment,
15:40:01  50  	    presentment_currency,
15:40:01  51  	    chargeback_category,
15:40:01  52  	    status_flag,
15:40:01  53  	    sequence_number,
15:40:01  54  	    merchant_order_number,
15:40:01  55  	    account_number,
15:40:01  56  	    reason_code,
15:40:01  57  	    transaction_date,
15:40:01  58  	    chargeback_date,
15:40:01  59  	    activity_date,
15:40:01  60  	    chargeback_amount_action,
15:40:01  61  	    fee_amount,
15:40:01  62  	    usage_code,
15:40:01  63  	    mop_code,
15:40:01  64  	    authorization_date,
15:40:01  65  	    chargeback_due_date,
15:40:01  66  	    create_date,
15:40:01  67  	    created_by
15:40:01  68  	  ) VALUES (
15:40:01  69  	    var_cpt_chargeback_act_id,
15:40:01  70  	    in_ext_source_log_id,
15:40:01  71  	    in_record_type,
15:40:01  72  	    in_entity_type,
15:40:01  73  	    in_entity_number,
15:40:01  74  	    in_chargeback_amount_issuer,
15:40:01  75  	    in_prev_partial_repres,
15:40:01  76  	    in_presentment_currency,
15:40:01  77  	    in_chargeback_category,
15:40:01  78  	    in_status_flag,
15:40:01  79  	    in_sequence_number,
15:40:01  80  	    in_merchant_order_number,
15:40:01  81  	    in_account_number,
15:40:01  82  	    in_reason_code,
15:40:01  83  	    in_transaction_date,
15:40:01  84  	    in_chargeback_date,
15:40:01  85  	    in_activity_date,
15:40:01  86  	    in_chargeback_amount_action,
15:40:01  87  	    in_fee_amount,
15:40:01  88  	    in_usage_code,
15:40:01  89  	    in_mop_code,
15:40:01  90  	    in_authorization_date,
15:40:01  91  	    in_chargeback_due_date,
15:40:01  92  	    var_date,
15:40:01  93  	    in_created_by
15:40:01  94  	  );
15:40:01  95  
15:40:01  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
15:40:01  97  END CREATE_CPT_CHARGEBACK_ACT;
15:40:01  98  
15:40:01  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
15:40:01 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
15:40:01 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
15:40:01 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
15:40:01 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
15:40:01 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
15:40:01 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:40:01 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
15:40:01 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
15:40:01 108  ) AS
15:40:01 109  -- VARIABLES
15:40:01 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
15:40:01 111  var_date DATE := SYSDATE;
15:40:01 112  BEGIN
15:40:01 113  	IF in_ext_source_log_id IS NULL THEN
15:40:01 114  	  SELECT
15:40:01 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
15:40:01 116  	  FROM DUAL;
15:40:01 117  	ELSE
15:40:01 118  	  var_ext_source_log_id := in_ext_source_log_id;
15:40:01 119  	END IF;
15:40:01 120  	INSERT INTO
15:40:01 121  	  RCN_EXT_SOURCE_LOG (
15:40:01 122  	    id,
15:40:01 123  	    extraction_timestamp,
15:40:01 124  	    report_date,
15:40:01 125  	    report_generation_datetime,
15:40:01 126  	    record_type,
15:40:01 127  	    report_file_name,
15:40:01 128  	    create_date,
15:40:01 129  	    created_by
15:40:01 130  	  ) VALUES (
15:40:01 131  	    var_ext_source_log_id,
15:40:01 132  	    in_extraction_timestamp,
15:40:01 133  	    in_report_date,
15:40:01 134  	    in_report_gen_datetime,
15:40:01 135  	    in_record_type,
15:40:01 136  	    in_report_file_name,
15:40:01 137  	    var_date,
15:40:01 138  	    in_created_by
15:40:01 139  	  );
15:40:01 140  
15:40:01 141  	out_ext_source_log_id := var_ext_source_log_id;
15:40:01 142  END CREATE_EXT_SOURCE_LOG;
15:40:01 143  
15:40:01 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
15:40:01 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
15:40:01 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
15:40:01 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:40:01 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
15:40:01 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
15:40:01 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
15:40:01 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
15:40:01 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
15:40:01 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
15:40:01 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
15:40:01 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
15:40:01 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
15:40:01 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
15:40:01 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
15:40:01 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
15:40:01 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
15:40:01 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
15:40:01 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
15:40:01 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
15:40:01 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
15:40:01 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
15:40:01 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
15:40:01 167  ) AS
15:40:01 168  -- VARIABLES
15:40:01 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
15:40:01 170  var_date DATE := SYSDATE;
15:40:01 171  BEGIN
15:40:01 172  	IF in_cpt_service_charge_id IS NULL THEN
15:40:01 173  	  SELECT
15:40:01 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
15:40:01 175  	  FROM DUAL;
15:40:01 176  	ELSE
15:40:01 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
15:40:01 178  	END IF;
15:40:01 179  	INSERT INTO
15:40:01 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
15:40:01 181  	    id,
15:40:01 182  	    rcn_ext_source_log_id,
15:40:01 183  	    record_type,
15:40:01 184  	    category,
15:40:01 185  	    sub_category,
15:40:01 186  	    entity_type,
15:40:01 187  	    entity_number,
15:40:01 188  	    funds_transfer_inst_number,
15:40:01 189  	    secure_ba_number,
15:40:01 190  	    settlement_currency,
15:40:01 191  	    fee_schedule,
15:40:01 192  	    mop,
15:40:01 193  	    interchange_qualification,
15:40:01 194  	    fee_type_description,
15:40:01 195  	    action_type,
15:40:01 196  	    unit_quantity,
15:40:01 197  	    unit_fee,
15:40:01 198  	    amount,
15:40:01 199  	    percentage_rate,
15:40:01 200  	    total_charge,
15:40:01 201  	    create_date,
15:40:01 202  	    created_by
15:40:01 203  	  ) VALUES (
15:40:01 204  	    var_cpt_service_charge_id,
15:40:01 205  	    in_ext_source_log_id,
15:40:01 206  	    in_record_type,
15:40:01 207  	    in_category,
15:40:01 208  	    in_sub_category,
15:40:01 209  	    in_entity_type,
15:40:01 210  	    in_entity_number,
15:40:01 211  	    in_funds_trans_inst_number,
15:40:01 212  	    in_secure_ba_number,
15:40:01 213  	    in_settlement_currency,
15:40:01 214  	    in_fee_schedule,
15:40:01 215  	    in_mop,
15:40:01 216  	    in_interchange_qual,
15:40:01 217  	    in_fee_type_description,
15:40:01 218  	    in_action_type,
15:40:01 219  	    in_unit_quantity,
15:40:01 220  	    in_unit_fee,
15:40:01 221  	    in_amount,
15:40:01 222  	    in_percentage_rate,
15:40:01 223  	    in_total_charge,
15:40:01 224  	    var_date,
15:40:01 225  	    in_created_by
15:40:01 226  	  );
15:40:01 227  
15:40:01 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
15:40:01 229  END CREATE_CPT_SERVICE_CHARGE;
15:40:01 230  
15:40:01 231  PROCEDURE CREATE_CPT_EXCEPTION (
15:40:01 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
15:40:01 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
15:40:01 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:40:01 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
15:40:01 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
15:40:01 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
15:40:01 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
15:40:01 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
15:40:01 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
15:40:01 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
15:40:01 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
15:40:01 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:40:01 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:40:01 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
15:40:01 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
15:40:01 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
15:40:01 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
15:40:01 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
15:40:01 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
15:40:01 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
15:40:01 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
15:40:01 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
15:40:01 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
15:40:01 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
15:40:01 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
15:40:01 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
15:40:01 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
15:40:01 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
15:40:01 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
15:40:01 261  ) AS
15:40:01 262  -- VARIABLES
15:40:01 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
15:40:01 264  var_date DATE := SYSDATE;
15:40:01 265  BEGIN
15:40:01 266  	IF in_cpt_exception_id IS NULL THEN
15:40:01 267  	  SELECT
15:40:01 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
15:40:01 269  	  FROM DUAL;
15:40:01 270  	ELSE
15:40:01 271  	  var_cpt_exception_id := in_cpt_exception_id;
15:40:01 272  	END IF;
15:40:01 273  	INSERT INTO
15:40:01 274  	  RCN_CPT_EXCEPTION_DETAIL (
15:40:01 275  	    id,
15:40:01 276  	    rcn_ext_source_log_id,
15:40:01 277  	    record_type,
15:40:01 278  	    submission_date,
15:40:01 279  	    pid_number,
15:40:01 280  	    pid_short_name,
15:40:01 281  	    submission_number,
15:40:01 282  	    record_number,
15:40:01 283  	    entity_type,
15:40:01 284  	    entity_number,
15:40:01 285  	    presentment_currency,
15:40:01 286  	    merchant_order_number,
15:40:01 287  	    rdfi_number,
15:40:01 288  	    account_number,
15:40:01 289  	    expiration_date,
15:40:01 290  	    amount,
15:40:01 291  	    mop,
15:40:01 292  	    action_code,
15:40:01 293  	    auth_date,
15:40:01 294  	    auth_code,
15:40:01 295  	    auth_response_code,
15:40:01 296  	    trace_number,
15:40:01 297  	    consumer_country_code,
15:40:01 298  	    category,
15:40:01 299  	    mcc,
15:40:01 300  	    reject_code,
15:40:01 301  	    submission_status,
15:40:01 302  	    create_date,
15:40:01 303  	    created_by
15:40:01 304  	  ) VALUES (
15:40:01 305  	    var_cpt_exception_id,
15:40:01 306  	    in_ext_source_log_id,
15:40:01 307  	    in_record_type,
15:40:01 308  	    in_submission_date,
15:40:01 309  	    in_pid_number,
15:40:01 310  	    in_pid_short_name,
15:40:01 311  	    in_submission_number,
15:40:01 312  	    in_record_number,
15:40:01 313  	    in_entity_type,
15:40:01 314  	    in_entity_number,
15:40:01 315  	    in_presentment_currency,
15:40:01 316  	    in_merchant_order_number,
15:40:01 317  	    in_rdfi_number,
15:40:01 318  	    in_account_number,
15:40:01 319  	    in_expiration_date,
15:40:01 320  	    in_amount,
15:40:01 321  	    in_mop,
15:40:01 322  	    in_action_code,
15:40:01 323  	    in_auth_date,
15:40:01 324  	    in_auth_code,
15:40:01 325  	    in_auth_response_code,
15:40:01 326  	    in_trace_number,
15:40:01 327  	    in_consumer_country_code,
15:40:01 328  	    in_category,
15:40:01 329  	    in_mcc,
15:40:01 330  	    in_reject_code,
15:40:01 331  	    in_submission_status,
15:40:01 332  	    var_date,
15:40:01 333  	    in_created_by
15:40:01 334  	  );
15:40:01 335  
15:40:01 336  	out_cpt_exception_id := var_cpt_exception_id;
15:40:01 337  END CREATE_CPT_EXCEPTION;
15:40:01 338  
15:40:01 339  PROCEDURE CREATE_CPT_DEPOSIT (
15:40:01 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
15:40:01 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
15:40:01 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:40:01 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
15:40:01 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
15:40:01 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
15:40:01 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
15:40:01 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
15:40:01 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
15:40:01 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
15:40:01 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
15:40:01 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
15:40:01 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
15:40:01 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
15:40:01 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
15:40:01 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
15:40:01 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
15:40:01 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
15:40:01 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
15:40:01 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
15:40:01 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
15:40:01 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
15:40:01 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
15:40:01 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
15:40:01 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
15:40:01 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
15:40:01 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
15:40:01 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
15:40:01 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
15:40:01 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
15:40:01 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
15:40:01 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
15:40:01 372  ) AS
15:40:01 373  -- VARIABLES
15:40:01 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
15:40:01 375  var_date DATE := SYSDATE;
15:40:01 376  BEGIN
15:40:01 377  	IF in_cpt_deposit_id IS NULL THEN
15:40:01 378  	  SELECT
15:40:01 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
15:40:01 380  	  FROM DUAL;
15:40:01 381  	ELSE
15:40:01 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
15:40:01 383  	END IF;
15:40:01 384  	INSERT INTO
15:40:01 385  	  RCN_CPT_DEPOSIT_DETAIL (
15:40:01 386  	    id,
15:40:01 387  	    rcn_ext_source_log_id,
15:40:01 388  	    record_type,
15:40:01 389  	    submission_date,
15:40:01 390  	    pid_number,
15:40:01 391  	    pid_short_name,
15:40:01 392  	    submission_number,
15:40:01 393  	    record_number,
15:40:01 394  	    entity_type,
15:40:01 395  	    entity_number,
15:40:01 396  	    presentment_currency,
15:40:01 397  	    merchant_order_number,
15:40:01 398  	    rdfi_number,
15:40:01 399  	    account_number,
15:40:01 400  	    expiration_date,
15:40:01 401  	    amount,
15:40:01 402  	    mop,
15:40:01 403  	    action_code,
15:40:01 404  	    auth_date,
15:40:01 405  	    auth_code,
15:40:01 406  	    auth_response_code,
15:40:01 407  	    trace_number,
15:40:01 408  	    consumer_country_code,
15:40:01 409  	    mcc,
15:40:01 410  	    fee_code,
15:40:01 411  	    unit_fee,
15:40:01 412  	    percent_fee,
15:40:01 413  	    total_interchange_fee,
15:40:01 414  	    total_assessment_fee,
15:40:01 415  	    other_fee,
15:40:01 416  	    create_date,
15:40:01 417  	    created_by
15:40:01 418  	  ) VALUES (
15:40:01 419  	    var_cpt_deposit_id,
15:40:01 420  	    in_ext_source_log_id,
15:40:01 421  	    in_record_type,
15:40:01 422  	    in_submission_date,
15:40:01 423  	    in_pid_number,
15:40:01 424  	    in_pid_short_name,
15:40:01 425  	    in_submission_number,
15:40:01 426  	    in_record_number,
15:40:01 427  	    in_entity_type,
15:40:01 428  	    in_entity_number,
15:40:01 429  	    in_presentment_currency,
15:40:01 430  	    in_merchant_order_number,
15:40:01 431  	    in_rdfi_number,
15:40:01 432  	    in_account_number,
15:40:01 433  	    in_expiration_date,
15:40:01 434  	    in_amount,
15:40:01 435  	    in_mop,
15:40:01 436  	    in_action_code,
15:40:01 437  	    in_auth_date,
15:40:01 438  	    in_auth_code,
15:40:01 439  	    in_auth_response_code,
15:40:01 440  	    in_trace_number,
15:40:01 441  	    in_consumer_country_code,
15:40:01 442  	    in_mcc,
15:40:01 443  	    in_fee_code,
15:40:01 444  	    in_unit_fee,
15:40:01 445  	    in_percent_fee,
15:40:01 446  	    in_total_interchange_fee,
15:40:01 447  	    in_total_assessment_fee,
15:40:01 448  	    in_other_fee,
15:40:01 449  	    var_date,
15:40:01 450  	    in_created_by
15:40:01 451  	  );
15:40:01 452  
15:40:01 453  	out_cpt_deposit_id := var_cpt_deposit_id;
15:40:01 454  END CREATE_CPT_DEPOSIT;
15:40:01 455  
15:40:01 456  PROCEDURE CREATE_PP_SETTLEMENT (
15:40:01 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
15:40:01 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
15:40:01 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:40:01 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
15:40:01 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
15:40:01 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
15:40:01 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
15:40:01 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
15:40:01 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
15:40:01 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
15:40:01 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
15:40:01 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
15:40:01 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
15:40:01 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
15:40:01 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
15:40:01 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
15:40:01 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
15:40:01 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
15:40:01 475  ) AS
15:40:01 476  -- VARIABLES
15:40:01 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
15:40:01 478  var_date DATE := SYSDATE;
15:40:01 479  BEGIN
15:40:01 480  	IF in_pp_settlement_id IS NULL THEN
15:40:01 481  	  SELECT
15:40:01 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
15:40:01 483  	  FROM DUAL;
15:40:01 484  	ELSE
15:40:01 485  	  var_pp_settlement_id := in_pp_settlement_id;
15:40:01 486  	END IF;
15:40:01 487  	INSERT INTO
15:40:01 488  	  RCN_PP_SETTLEMENT (
15:40:01 489  	    id,
15:40:01 490  	    rcn_ext_source_log_id,
15:40:01 491  	    transaction_id,
15:40:01 492  	    invoice_id,
15:40:01 493  	    pp_ref_id,
15:40:01 494  	    pp_ref_id_type,
15:40:01 495  	    trans_event_code,
15:40:01 496  	    trans_init_date,
15:40:01 497  	    trans_comp_date,
15:40:01 498  	    trans_deb_or_cred,
15:40:01 499  	    gross_trans_amount,
15:40:01 500  	    gross_trans_currency,
15:40:01 501  	    fee_deb_or_cred,
15:40:01 502  	    fee_amount,
15:40:01 503  	    fee_currency,
15:40:01 504  	    custom_field,
15:40:01 505  	    create_date,
15:40:01 506  	    created_by
15:40:01 507  	  ) VALUES (
15:40:01 508  	    var_pp_settlement_id,
15:40:01 509  	    in_ext_source_log_id,
15:40:01 510  	    in_transaction_id,
15:40:01 511  	    in_invoice_id,
15:40:01 512  	    in_pp_ref_id,
15:40:01 513  	    in_pp_ref_id_type,
15:40:01 514  	    in_trans_event_code,
15:40:01 515  	    in_trans_init_date,
15:40:01 516  	    in_trans_comp_date,
15:40:01 517  	    in_trans_deb_or_cred,
15:40:01 518  	    in_gross_trans_amount,
15:40:01 519  	    in_gross_trans_currency,
15:40:01 520  	    in_fee_deb_or_cred,
15:40:01 521  	    in_fee_amount,
15:40:01 522  	    in_fee_currency,
15:40:01 523  	    in_custom_field,
15:40:01 524  	    var_date,
15:40:01 525  	    in_created_by
15:40:01 526  	  );
15:40:01 527  
15:40:01 528  	out_pp_settlement_id := var_pp_settlement_id;
15:40:01 529  END CREATE_PP_SETTLEMENT;
15:40:01 530  
15:40:01 531  PROCEDURE CREATE_PP_DISPUTE (
15:40:01 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
15:40:01 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
15:40:01 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:40:01 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
15:40:01 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
15:40:01 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
15:40:01 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
15:40:01 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
15:40:01 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
15:40:01 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
15:40:01 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
15:40:01 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
15:40:01 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
15:40:01 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
15:40:01 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
15:40:01 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
15:40:01 548  ) AS
15:40:01 549  -- VARIABLES
15:40:01 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
15:40:01 551  var_date DATE := SYSDATE;
15:40:01 552  BEGIN
15:40:01 553  	IF in_pp_dispute_id IS NULL THEN
15:40:01 554  	  SELECT
15:40:01 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
15:40:01 556  	  FROM DUAL;
15:40:01 557  	ELSE
15:40:01 558  	  var_pp_dispute_id := in_pp_dispute_id;
15:40:01 559  	END IF;
15:40:01 560  	INSERT INTO
15:40:01 561  	  RCN_PP_DISPUTE (
15:40:01 562  	    id,
15:40:01 563  	    rcn_ext_source_log_id,
15:40:01 564  	    dispute_type,
15:40:01 565  	    claimant_name,
15:40:01 566  	    claimant_email,
15:40:01 567  	    transaction_id,
15:40:01 568  	    trans_date,
15:40:01 569  	    disputed_amount,
15:40:01 570  	    disputed_amount_currency,
15:40:01 571  	    dispute_reason,
15:40:01 572  	    dispute_filing_date,
15:40:01 573  	    dispute_status,
15:40:01 574  	    dispute_case_id,
15:40:01 575  	    invoice_id,
15:40:01 576  	    create_date,
15:40:01 577  	    created_by
15:40:01 578  	  ) VALUES (
15:40:01 579  	    var_pp_dispute_id,
15:40:01 580  	    in_ext_source_log_id,
15:40:01 581  	    in_dispute_type,
15:40:01 582  	    in_claimant_name,
15:40:01 583  	    in_claimant_email,
15:40:01 584  	    in_transaction_id,
15:40:01 585  	    in_trans_date,
15:40:01 586  	    in_disputed_amount,
15:40:01 587  	    in_disputed_amount_currency,
15:40:01 588  	    in_dispute_reason,
15:40:01 589  	    in_dispute_filing_date,
15:40:01 590  	    in_dispute_status,
15:40:01 591  	    in_dispute_case_id,
15:40:01 592  	    in_invoice_id,
15:40:01 593  	    var_date,
15:40:01 594  	    in_created_by
15:40:01 595  	  );
15:40:01 596  
15:40:01 597  	out_pp_dispute_id := var_pp_dispute_id;
15:40:01 598  END CREATE_PP_DISPUTE;
15:40:01 599  
15:40:01 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
15:40:01 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
15:40:01 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
15:40:01 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
15:40:01 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
15:40:01 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
15:40:01 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
15:40:01 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
15:40:01 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
15:40:01 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
15:40:01 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
15:40:01 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
15:40:01 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
15:40:01 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
15:40:01 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
15:40:01 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
15:40:01 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
15:40:01 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
15:40:01 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
15:40:01 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
15:40:01 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
15:40:01 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
15:40:01 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
15:40:01 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
15:40:01 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
15:40:01 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
15:40:01 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
15:40:01 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
15:40:01 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
15:40:01 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
15:40:01 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
15:40:01 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
15:40:01 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
15:40:01 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
15:40:01 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
15:40:01 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
15:40:01 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
15:40:01 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
15:40:01 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
15:40:01 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
15:40:01 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
15:40:01 641  ) AS
15:40:01 642  -- VARIABLES
15:40:01 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
15:40:01 644  var_date DATE := SYSDATE;
15:40:01 645  BEGIN
15:40:01 646  	IF in_pp_trans_detail_id IS NULL THEN
15:40:01 647  	  SELECT
15:40:01 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
15:40:01 649  	  FROM DUAL;
15:40:01 650  	ELSE
15:40:01 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
15:40:01 652  	END IF;
15:40:01 653  	INSERT INTO
15:40:01 654  	  RCN_PP_TRANS_DETAIL (
15:40:01 655  	    id,
15:40:01 656  	    rcn_ext_source_log_id,
15:40:01 657  	    transaction_id,
15:40:01 658  	    invoice_id,
15:40:01 659  	    pp_ref_id,
15:40:01 660  	    trans_event_code,
15:40:01 661  	    trans_init_date,
15:40:01 662  	    trans_comp_date,
15:40:01 663  	    trans_deb_or_cred,
15:40:01 664  	    gross_trans_amount,
15:40:01 665  	    gross_trans_currency,
15:40:01 666  	    fee_deb_or_cred,
15:40:01 667  	    fee_amount,
15:40:01 668  	    fee_currency,
15:40:01 669  	    trans_status,
15:40:01 670  	    insurance_amount,
15:40:01 671  	    sales_tax_amount,
15:40:01 672  	    shipping_amount,
15:40:01 673  	    trans_subject,
15:40:01 674  	    trans_note,
15:40:01 675  	    payer_acct_id,
15:40:01 676  	    payer_addr_status,
15:40:01 677  	    item_name,
15:40:01 678  	    item_id,
15:40:01 679  	    option_1_name,
15:40:01 680  	    option_1_value,
15:40:01 681  	    option_2_name,
15:40:01 682  	    option_2_value,
15:40:01 683  	    auction_site,
15:40:01 684  	    auction_buyer_id,
15:40:01 685  	    auction_closing_date,
15:40:01 686  	    shipping_addr_line_1,
15:40:01 687  	    shipping_addr_line_2,
15:40:01 688  	    shipping_addr_city,
15:40:01 689  	    shipping_addr_state,
15:40:01 690  	    shipping_addr_zip,
15:40:01 691  	    shipping_addr_country,
15:40:01 692  	    custom_field,
15:40:01 693  	    create_date,
15:40:01 694  	    created_by
15:40:01 695  	  ) VALUES (
15:40:01 696  	    var_pp_trans_detail_id,
15:40:01 697  	    in_ext_source_log_id,
15:40:01 698  	    in_transaction_id,
15:40:01 699  	    in_invoice_id,
15:40:01 700  	    in_pp_ref_id,
15:40:01 701  	    in_trans_event_code,
15:40:01 702  	    in_trans_init_date,
15:40:01 703  	    in_trans_comp_date,
15:40:01 704  	    in_trans_deb_or_cred,
15:40:01 705  	    in_gross_trans_amount,
15:40:01 706  	    in_gross_trans_currency,
15:40:01 707  	    in_fee_deb_or_cred,
15:40:01 708  	    in_fee_amount,
15:40:01 709  	    in_fee_currency,
15:40:01 710  	    in_trans_status,
15:40:01 711  	    in_insurance_amount,
15:40:01 712  	    in_sales_tax_amount,
15:40:01 713  	    in_shipping_amount,
15:40:01 714  	    in_trans_subject,
15:40:01 715  	    in_trans_note,
15:40:01 716  	    in_payer_acct_id,
15:40:01 717  	    in_payer_addr_status,
15:40:01 718  	    in_item_name,
15:40:01 719  	    in_item_id,
15:40:01 720  	    in_option_1_name,
15:40:01 721  	    in_option_1_value,
15:40:01 722  	    in_option_2_name,
15:40:01 723  	    in_option_2_value,
15:40:01 724  	    in_auction_site,
15:40:01 725  	    in_auction_buyer_id,
15:40:01 726  	    in_auction_closing_date,
15:40:01 727  	    in_shipping_addr_line_1,
15:40:01 728  	    in_shipping_addr_line_2,
15:40:01 729  	    in_shipping_addr_city,
15:40:01 730  	    in_shipping_addr_state,
15:40:01 731  	    in_shipping_addr_zip,
15:40:01 732  	    in_shipping_addr_country,
15:40:01 733  	    in_custom_field,
15:40:01 734  	    var_date,
15:40:01 735  	    in_created_by
15:40:01 736  	  );
15:40:01 737  
15:40:01 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
15:40:01 739  END CREATE_PP_TRANS_DETAIL;
15:40:01 740  
15:40:01 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
15:40:01 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:40:01 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
15:40:01 744  ) AS
15:40:01 745  BEGIN
15:40:01 746  	DELETE FROM
15:40:01 747  	  RCN_EXT_SOURCE_LOG
15:40:01 748  	WHERE
15:40:01 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
15:40:01 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
15:40:01 751  END DELETE_EXT_SOURCE_LOG;
15:40:01 752  
15:40:01 753  PROCEDURE GET_EXT_SOURCE_LOG (
15:40:01 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:40:01 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
15:40:01 756  	out_result_set		 OUT SYS_REFCURSOR
15:40:01 757  ) AS
15:40:01 758  BEGIN
15:40:01 759  	OPEN out_result_set FOR
15:40:01 760  	SELECT * FROM
15:40:01 761  	  RCN_EXT_SOURCE_LOG
15:40:01 762  	WHERE
15:40:01 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
15:40:01 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
15:40:01 765  END GET_EXT_SOURCE_LOG;
15:40:01 766  
15:40:01 767  FUNCTION CHECK_EXT_SOURCE_LOG (
15:40:01 768  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
15:40:01 769  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
15:40:01 770  ) RETURN NUMBER AS
15:40:01 771  var_exists NUMBER;
15:40:01 772  BEGIN
15:40:01 773  	SELECT count(1) INTO var_exists
15:40:01 774  	FROM
15:40:01 775  	  RCN_EXT_SOURCE_LOG
15:40:01 776  	WHERE
15:40:01 777  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
15:40:01 778  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
15:40:01 779  
15:40:01 780  	IF var_exists > 1 THEN
15:40:01 781  	  var_exists := 1;
15:40:01 782  	END IF;
15:40:01 783  
15:40:01 784  	RETURN var_exists;
15:40:01 785  END;
15:40:01 786  
15:40:01 787  PROCEDURE CREATE_AMEX_CHARGEBACK (
15:40:01 788  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
15:40:01 789  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
15:40:01 790  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
15:40:01 791  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
15:40:01 792  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
15:40:01 793  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
15:40:01 794  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
15:40:01 795  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
15:40:01 796  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
15:40:01 797  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
15:40:01 798  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
15:40:01 799  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
15:40:01 800  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
15:40:01 801  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
15:40:01 802  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
15:40:01 803  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
15:40:01 804  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
15:40:01 805  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
15:40:01 806  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
15:40:01 807  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
15:40:01 808  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
15:40:01 809  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
15:40:01 810  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
15:40:01 811  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
15:40:01 812  ) AS
15:40:01 813  var_amex_chargeback_id RCN_AMEX_CHARGEBACK.ID%TYPE;
15:40:01 814  var_date DATE := SYSDATE;
15:40:01 815  BEGIN
15:40:01 816  	SELECT
15:40:01 817  	  RCNAMEXCB_ID_SEQ.nextVal into var_amex_chargeback_id
15:40:01 818  	FROM DUAL;
15:40:01 819  
15:40:01 820  	INSERT INTO
15:40:01 821  	  RCN_AMEX_CHARGEBACK (
15:40:01 822  	    id,
15:40:01 823  	    rcn_ext_source_log_id,
15:40:01 824  	    resolution,
15:40:01 825  	    from_system,
15:40:01 826  	    rejects_to_system,
15:40:01 827  	    disputes_to_system,
15:40:01 828  	    date_of_adjustment,
15:40:01 829  	    date_of_charge,
15:40:01 830  	    case_type,
15:40:01 831  	    cb_reas_code,
15:40:01 832  	    cb_amount,
15:40:01 833  	    cb_adjustment_number,
15:40:01 834  	    billed_amount,
15:40:01 835  	    soc_amount,
15:40:01 836  	    foreign_amount,
15:40:01 837  	    currency,
15:40:01 838  	    note1,
15:40:01 839  	    note2,
15:40:01 840  	    note3,
15:40:01 841  	    note4,
15:40:01 842  	    note5,
15:40:01 843  	    note6,
15:40:01 844  	    note7,
15:40:01 845  	    ind_ref_number,
15:40:01 846  	    create_date,
15:40:01 847  	    created_by,
15:40:01 848  	    update_date,
15:40:01 849  	    updated_by
15:40:01 850  	  ) VALUES (
15:40:01 851  	    var_amex_chargeback_id,
15:40:01 852  	    in_rcn_ext_source_log_id,
15:40:01 853  	    in_resolution,
15:40:01 854  	    in_from_system,
15:40:01 855  	    in_rejects_to_system,
15:40:01 856  	    in_disputes_to_system,
15:40:01 857  	    in_date_of_adjustment,
15:40:01 858  	    in_date_of_charge,
15:40:01 859  	    in_case_type,
15:40:01 860  	    in_cb_reas_code,
15:40:01 861  	    in_cb_amount,
15:40:01 862  	    in_cb_adjustment_number,
15:40:01 863  	    in_billed_amount,
15:40:01 864  	    in_soc_amount,
15:40:01 865  	    in_foreign_amount,
15:40:01 866  	    in_currency,
15:40:01 867  	    in_note1,
15:40:01 868  	    in_note2,
15:40:01 869  	    in_note3,
15:40:01 870  	    in_note4,
15:40:01 871  	    in_note5,
15:40:01 872  	    in_note6,
15:40:01 873  	    in_note7,
15:40:01 874  	    in_ind_ref_number,
15:40:01 875  	    var_date,
15:40:01 876  	    in_created_by,
15:40:01 877  	    var_date,
15:40:01 878  	    in_created_by
15:40:01 879  	  );
15:40:01 880  
15:40:01 881  END CREATE_AMEX_CHARGEBACK;
15:40:01 882  
15:40:01 883  END PROCS_RECONCILIATION_CRU_V23;
15:40:01 884  .
15:40:01 SQL> /

Package body created.

Elapsed: 00:00:00.15
15:40:01 SQL> 
15:40:01 SQL> prompt Compiling body for procs_subscription_cru.sql
Compiling body for procs_subscription_cru.sql
15:40:01 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V23" AS
15:40:01   2  
15:40:01   3  PROCEDURE CREATE_SUBSCRIPTION(
15:40:01   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
15:40:01   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
15:40:01   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
15:40:01   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
15:40:01   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
15:40:01   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
15:40:01  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
15:40:01  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
15:40:01  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
15:40:01  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
15:40:01  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
15:40:01  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
15:40:01  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
15:40:01  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
15:40:01  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
15:40:01  19  ) AS
15:40:01  20  -- VARIABLES
15:40:01  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
15:40:01  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:01  23  var_date DATE := SYSDATE;
15:40:01  24  BEGIN
15:40:01  25  	IF in_subscription_id IS NULL THEN
15:40:01  26  	  SELECT
15:40:01  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
15:40:01  28  	  FROM DUAL;
15:40:01  29  	ELSE
15:40:01  30  	  var_new_subscription_id := in_subscription_id;
15:40:01  31  	END IF;
15:40:01  32  	INSERT INTO SUBSCRIPTION (
15:40:01  33  	  ID,
15:40:01  34  	  SUSPEND_DATE,
15:40:01  35  	  ACCOUNT_ID,
15:40:01  36  	  PURCHASE_DATE,
15:40:01  37  	  OFFER_CHAIN_ID,
15:40:01  38  	  TERMINATION_DATE,
15:40:01  39  	  DAYS_REMAINING_ADJUSTMENT,
15:40:01  40  	  SCT_ID,
15:40:01  41  	  CREATE_DATE,
15:40:01  42  	  CREATED_BY,
15:40:01  43  	  UPDATE_DATE,
15:40:01  44  	  UPDATED_BY,
15:40:01  45  	  INSTRUMENT_TYPE_ID,
15:40:01  46  	  INSTRUMENT_ID,
15:40:01  47  	  SUBSCRIPTION_STATUS_ID,
15:40:01  48  	  CANCELLATION_DATE,
15:40:01  49  	  REACTIVATION_DATE
15:40:01  50  	) VALUES (
15:40:01  51  	  var_new_subscription_id,
15:40:01  52  	  in_suspend_date,
15:40:01  53  	  in_account_id,
15:40:01  54  	  in_purchase_date,
15:40:01  55  	  in_offer_chain_id,
15:40:01  56  	  in_termination_date,
15:40:01  57  	  in_days_remainning_ajustment,
15:40:01  58  	  in_sct_id,
15:40:01  59  	  var_date,
15:40:01  60  	  in_created_by,
15:40:01  61  	  var_date,
15:40:01  62  	  in_created_by,
15:40:01  63  	  in_instrument_type_id,
15:40:01  64  	  in_instrument_id,
15:40:01  65  	  in_subscription_status_id,
15:40:01  66  	  in_cancelation_date,
15:40:01  67  	  in_reactivation_date
15:40:01  68  	);
15:40:01  69  
15:40:01  70  	out_subscription_id := var_new_subscription_id;
15:40:01  71  END CREATE_SUBSCRIPTION;
15:40:01  72  
15:40:01  73  /******************************************************************************/
15:40:01  74  
15:40:01  75  PROCEDURE UPDATE_SUBSCRIPTION(
15:40:01  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
15:40:01  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
15:40:01  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
15:40:01  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
15:40:01  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
15:40:01  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
15:40:01  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
15:40:01  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
15:40:01  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
15:40:01  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
15:40:01  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
15:40:01  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
15:40:01  88  ) AS
15:40:01  89  BEGIN
15:40:01  90  	-- Create history
15:40:01  91  	PROCS_HISTORY_V23.CREATE_SUBSCRIPTION_HISTORY(
15:40:01  92  	  in_subscription_id	       => in_subscription_id,
15:40:01  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:01  94  	);
15:40:01  95  
15:40:01  96  	UPDATE SUBSCRIPTION SET
15:40:01  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
15:40:01  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
15:40:01  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
15:40:01 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
15:40:01 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
15:40:01 102  	  UPDATE_DATE		    = SYSDATE,
15:40:01 103  	  UPDATED_BY		    = in_updated_by,
15:40:01 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
15:40:01 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
15:40:01 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
15:40:01 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
15:40:01 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
15:40:01 109  	WHERE
15:40:01 110  	  ID = in_subscription_id;
15:40:01 111  END UPDATE_SUBSCRIPTION;
15:40:01 112  
15:40:01 113  /******************************************************************************/
15:40:01 114  
15:40:01 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
15:40:01 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
15:40:01 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:40:01 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
15:40:01 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:40:01 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
15:40:01 121  ) AS
15:40:01 122  BEGIN
15:40:01 123  	IF inout_subscription_note_id IS NULL THEN
15:40:01 124  	  SELECT
15:40:01 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
15:40:01 126  	  FROM DUAL;
15:40:01 127  	END IF;
15:40:01 128  	INSERT INTO SUBSCRIPTION_NOTE (
15:40:01 129  	  ID,
15:40:01 130  	  AGENT_ID,
15:40:01 131  	  SUBSCRIPTION_ID,
15:40:01 132  	  NOTE,
15:40:01 133  	  CREATE_DATE,
15:40:01 134  	  CREATED_BY
15:40:01 135  	) VALUES (
15:40:01 136  	  inout_subscription_note_id,
15:40:01 137  	  in_agent_id,
15:40:01 138  	  in_subscription_id,
15:40:01 139  	  in_note,
15:40:01 140  	  SYSDATE,
15:40:01 141  	  in_created_by
15:40:01 142  	);
15:40:01 143  END CREATE_SUBSCRIPTION_NOTE;
15:40:01 144  
15:40:01 145  END PROCS_SUBSCRIPTION_CRU_V23;
15:40:01 146  .
15:40:01 SQL> /

Package body created.

Elapsed: 00:00:00.34
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_taxes_cru.sql
Compiling body for procs_taxes_cru.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V23" AS
15:40:02   2  
15:40:02   3  PROCEDURE CREATE_TAX (
15:40:02   4  	inout_tax_id		 IN OUT NUMBER,
15:40:02   5  	in_tax_type_id		 IN NUMBER,
15:40:02   6  	in_calculated_amount	 IN NUMBER,
15:40:02   7  	in_created_by		 IN VARCHAR2,
15:40:02   8  	in_line_item_id 	 IN NUMBER,
15:40:02   9  	in_effective_rate	 IN VARCHAR2,
15:40:02  10  	in_taxable_amount	 IN NUMBER,
15:40:02  11  	in_tax_rule_id		 IN NUMBER,
15:40:02  12  	in_jurisdiction_level_id IN NUMBER,
15:40:02  13  	in_jurisdiction_name	 IN VARCHAR2,
15:40:02  14  	in_jurisdiction_id	 IN VARCHAR2,
15:40:02  15  	in_ext_tax_type 	 IN VARCHAR2,
15:40:02  16  	in_ext_result		 IN VARCHAR2,
15:40:02  17  	in_imposition_type	 IN VARCHAR2,
15:40:02  18  	in_imposition		 IN VARCHAR2
15:40:02  19  ) AS
15:40:02  20  var_date DATE := SYSDATE;
15:40:02  21  BEGIN
15:40:02  22  
15:40:02  23  	IF inout_tax_id IS NULL THEN
15:40:02  24  	  SELECT
15:40:02  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
15:40:02  26  	  FROM DUAL;
15:40:02  27  	END IF;
15:40:02  28  
15:40:02  29  	INSERT INTO TAX (
15:40:02  30  	  ID,
15:40:02  31  	  TAX_TYPE_ID,
15:40:02  32  	  CALCULATED_AMOUNT,
15:40:02  33  	  CREATE_DATE,
15:40:02  34  	  CREATED_BY,
15:40:02  35  	  LINE_ITEM_ID,
15:40:02  36  	  EFFECTIVE_RATE,
15:40:02  37  	  TAXABLE_AMOUNT,
15:40:02  38  	  TAX_RULE_ID,
15:40:02  39  	  JURISDICTION_LEVEL_ID,
15:40:02  40  	  JURISDICTION_NAME,
15:40:02  41  	  JURISDICTION_ID,
15:40:02  42  	  EXT_TAX_TYPE,
15:40:02  43  	  EXT_RESULT,
15:40:02  44  	  IMPOSITION_TYPE,
15:40:02  45  	  IMPOSITION
15:40:02  46  	) VALUES (
15:40:02  47  	  inout_tax_id,
15:40:02  48  	  in_tax_type_id,
15:40:02  49  	  in_calculated_amount,
15:40:02  50  	  var_date,
15:40:02  51  	  in_created_by,
15:40:02  52  	  in_line_item_id,
15:40:02  53  	  in_effective_rate,
15:40:02  54  	  in_taxable_amount,
15:40:02  55  	  in_tax_rule_id,
15:40:02  56  	  in_jurisdiction_level_id,
15:40:02  57  	  in_jurisdiction_name,
15:40:02  58  	  in_jurisdiction_id,
15:40:02  59  	  in_ext_tax_type,
15:40:02  60  	  in_ext_result,
15:40:02  61  	  in_imposition_type,
15:40:02  62  	  in_imposition
15:40:02  63  	);
15:40:02  64  
15:40:02  65  END CREATE_TAX;
15:40:02  66  
15:40:02  67  END PROCS_TAXES_CRU_V23;
15:40:02  68  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_transaction_cru.sql
Compiling body for procs_transaction_cru.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V23" AS
15:40:02   2  
15:40:02   3  PROCEDURE CREATE_TRANSACTION (
15:40:02   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
15:40:02   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
15:40:02   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
15:40:02   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
15:40:02   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
15:40:02   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
15:40:02  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V23.FALSE,
15:40:02  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
15:40:02  12  ) AS
15:40:02  13  -- VARIABLES
15:40:02  14  var_transaction_id TRANSACTION.ID%TYPE;
15:40:02  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:02  16  var_date DATE := SYSDATE;
15:40:02  17  BEGIN
15:40:02  18  	IF in_transaction_id IS NULL THEN
15:40:02  19  	  SELECT
15:40:02  20  	    TRN_ID_SEQ.nextVal into var_transaction_id
15:40:02  21  	  FROM DUAL;
15:40:02  22  	ELSE
15:40:02  23  	  var_transaction_id := in_transaction_id;
15:40:02  24  	END IF;
15:40:02  25  	INSERT INTO
15:40:02  26  	  TRANSACTION (
15:40:02  27  	    ID,
15:40:02  28  	    TRANSACTION_STATUS_ID,
15:40:02  29  	    TRANSACTION_AMOUNT,
15:40:02  30  	    CREATE_DATE,
15:40:02  31  	    CREATED_BY,
15:40:02  32  	    UPDATE_DATE,
15:40:02  33  	    UPDATED_BY,
15:40:02  34  	    ORDER_ID,
15:40:02  35  	    IS_REFUND,
15:40:02  36  	    TRANSACTION_TYPE_CODE
15:40:02  37  	  ) VALUES (
15:40:02  38  	    var_transaction_id,
15:40:02  39  	    in_transaction_status_id,
15:40:02  40  	    in_transaction_amount,
15:40:02  41  	    var_date,
15:40:02  42  	    in_created_by,
15:40:02  43  	    var_date,
15:40:02  44  	    in_created_by,
15:40:02  45  	    in_order_id,
15:40:02  46  	    in_is_refund,
15:40:02  47  	    in_transaction_type_code
15:40:02  48  	  );
15:40:02  49  
15:40:02  50  	out_transaction_id := var_transaction_id;
15:40:02  51  END CREATE_TRANSACTION;
15:40:02  52  
15:40:02  53  /*******************************************************************/
15:40:02  54  
15:40:02  55  PROCEDURE UPDATE_TRANSACTION (
15:40:02  56  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
15:40:02  57  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
15:40:02  58  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
15:40:02  59  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
15:40:02  60  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
15:40:02  61  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
15:40:02  62  ) AS
15:40:02  63  BEGIN
15:40:02  64  	-- Create history
15:40:02  65  	PROCS_HISTORY_V23.CREATE_TRANSACTION_HISTORY(
15:40:02  66  	  in_transaction_id	       => in_transaction_id,
15:40:02  67  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:02  68  	);
15:40:02  69  	UPDATE
15:40:02  70  	  TRANSACTION
15:40:02  71  	SET
15:40:02  72  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
15:40:02  73  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
15:40:02  74  	  UPDATE_DATE		= SYSDATE,
15:40:02  75  	  UPDATED_BY		= in_updated_by,
15:40:02  76  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
15:40:02  77  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
15:40:02  78  	WHERE
15:40:02  79  	  ID = in_transaction_id;
15:40:02  80  END UPDATE_TRANSACTION;
15:40:02  81  
15:40:02  82  /*******************************************************************/
15:40:02  83  
15:40:02  84  PROCEDURE READ_TRANSACTION (
15:40:02  85  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:40:02  86  	out_result_set	  OUT SYS_REFCURSOR
15:40:02  87  ) AS
15:40:02  88  BEGIN
15:40:02  89  	OPEN out_result_set FOR
15:40:02  90  	SELECT
15:40:02  91  	  ID,
15:40:02  92  	  TRANSACTION_STATUS_ID,
15:40:02  93  	  TRANSACTION_TYPE_CODE,
15:40:02  94  	  TRANSACTION_AMOUNT,
15:40:02  95  	  CREATE_DATE,
15:40:02  96  	  CREATED_BY,
15:40:02  97  	  UPDATE_DATE,
15:40:02  98  	  UPDATED_BY,
15:40:02  99  	  ORDER_ID,
15:40:02 100  	  IS_REFUND,
15:40:02 101  	  IS_SETTLED
15:40:02 102  	FROM
15:40:02 103  	  TRANSACTION
15:40:02 104  	WHERE
15:40:02 105  	  ID = in_transaction_id;
15:40:02 106  END READ_TRANSACTION;
15:40:02 107  
15:40:02 108  /*******************************************************************/
15:40:02 109  
15:40:02 110  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
15:40:02 111  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
15:40:02 112  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
15:40:02 113  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
15:40:02 114  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:40:02 115  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
15:40:02 116  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
15:40:02 117  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
15:40:02 118  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
15:40:02 119  ) AS
15:40:02 120  BEGIN
15:40:02 121  	IF inout_transaction_attempt_id IS NULL THEN
15:40:02 122  	  SELECT
15:40:02 123  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
15:40:02 124  	  FROM DUAL;
15:40:02 125  	END IF;
15:40:02 126  	INSERT INTO TRANSACTION_ATTEMPT (
15:40:02 127  	  ID,
15:40:02 128  	  TRANSACTION_ID,
15:40:02 129  	  EXTERNAL_STATUS_CODE,
15:40:02 130  	  EXTERNAL_STATUS_MESSAGE,
15:40:02 131  	  CREATE_DATE,
15:40:02 132  	  CREATED_BY,
15:40:02 133  	  EXTERNAL_TRANSACTION_ID,
15:40:02 134  	  TRANSACTION_START_TIME,
15:40:02 135  	  TRANSACTION_ATTEMPT_STATUS_ID
15:40:02 136  	) VALUES (
15:40:02 137  	  inout_transaction_attempt_id,
15:40:02 138  	  in_transaction_id,
15:40:02 139  	  in_external_status_code,
15:40:02 140  	  in_external_status_message,
15:40:02 141  	  SYSDATE,
15:40:02 142  	  in_created_by,
15:40:02 143  	  in_external_transaction_id,
15:40:02 144  	  in_transaction_start_time,
15:40:02 145  	  in_status_id
15:40:02 146  	);
15:40:02 147  END;
15:40:02 148  
15:40:02 149  /*******************************************************************/
15:40:02 150  
15:40:02 151  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
15:40:02 152  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
15:40:02 153  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
15:40:02 154  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:40:02 155  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
15:40:02 156  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
15:40:02 157  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
15:40:02 158  ) AS
15:40:02 159  BEGIN
15:40:02 160  	UPDATE
15:40:02 161  	  TRANSACTION_ATTEMPT
15:40:02 162  	SET
15:40:02 163  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
15:40:02 164  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
15:40:02 165  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
15:40:02 166  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
15:40:02 167  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
15:40:02 168  	WHERE
15:40:02 169  	  ID = in_transaction_attempt_id;
15:40:02 170  END;
15:40:02 171  
15:40:02 172  /*******************************************************************/
15:40:02 173  
15:40:02 174  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:40:02 175  /*
15:40:02 176  Throws exceptions:
15:40:02 177  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:02 178  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
15:40:02 179  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 180  */
15:40:02 181  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:40:02 182  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:40:02 183  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:40:02 184  ) AS
15:40:02 185  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
15:40:02 186  -- EXCEPTIONS
15:40:02 187  BAD_TRANSACTION_ID EXCEPTION;
15:40:02 188  BEGIN
15:40:02 189  
15:40:02 190  	PROCS_HISTORY_V23.CREATE_TRANSACTION_HISTORY(
15:40:02 191  	  in_transaction_id	       => in_transaction_id,
15:40:02 192  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:02 193  	);
15:40:02 194  
15:40:02 195  	UPDATE
15:40:02 196  	  TRANSACTION
15:40:02 197  	SET
15:40:02 198  	  TRANSACTION.ORDER_ID	 = in_order_id,
15:40:02 199  	  TRANSACTION.UPDATED_BY = in_updated_by,
15:40:02 200  	  TRANSACTION.UPDATE_DATE= SYSDATE
15:40:02 201  	WHERE
15:40:02 202  	  TRANSACTION.ID = in_transaction_id
15:40:02 203  	  AND TRANSACTION.ORDER_ID IS NULL;
15:40:02 204  
15:40:02 205  	IF SQL%ROWCOUNT = 0 THEN
15:40:02 206  	  RAISE BAD_TRANSACTION_ID;
15:40:02 207  	END IF;
15:40:02 208  EXCEPTION
15:40:02 209  WHEN BAD_TRANSACTION_ID THEN
15:40:02 210  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 211  	  SPROC_NAME, 'No such transaction');
15:40:02 212  END UPDATE_TRANSACTION_ORDER_ID;
15:40:02 213  
15:40:02 214  END PROCS_TRANSACTION_CRU_V23;
15:40:02 215  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_address.sql
Compiling body for procs_address.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V23" AS
15:40:02   2  
15:40:02   3  PROCEDURE CREATE_ADDRESS(
15:40:02   4  /*
15:40:02   5  Throws exceptions:
15:40:02   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02   7  */
15:40:02   8  	  out_address_id	OUT NUMBER,
15:40:02   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:40:02  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:40:02  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:40:02  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:40:02  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:40:02  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:40:02  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
15:40:02  16  ) AS
15:40:02  17  -- VARIABLES
15:40:02  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
15:40:02  19  -- EXCEPTIONS
15:40:02  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02  21  BEGIN
15:40:02  22  
15:40:02  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V23.CREATE_ADDRESS(
15:40:02  24  	  out_address_id      => out_address_id,
15:40:02  25  	  in_address_id       => null,
15:40:02  26  	  in_address1	      => in_address1,
15:40:02  27  	  in_address2	      => in_address2,
15:40:02  28  	  in_city	      => in_city,
15:40:02  29  	  in_state	      => in_state,
15:40:02  30  	  in_postal_code      => in_postal_code,
15:40:02  31  	  in_country	      => in_country,
15:40:02  32  	  in_created_by       => in_created_by
15:40:02  33  	);
15:40:02  34  
15:40:02  35  END CREATE_ADDRESS;
15:40:02  36  
15:40:02  37  PROCEDURE UPDATE_ADDRESS(
15:40:02  38  /*
15:40:02  39  Throws exceptions:
15:40:02  40  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02  41  */
15:40:02  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
15:40:02  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
15:40:02  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
15:40:02  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
15:40:02  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
15:40:02  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
15:40:02  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
15:40:02  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
15:40:02  50  ) AS
15:40:02  51  BEGIN
15:40:02  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V23.UPDATE_ADDRESS(
15:40:02  53  	  in_address_id 	=> in_address_id,
15:40:02  54  	  in_address1		=> in_address1,
15:40:02  55  	  in_address2		=> in_address2,
15:40:02  56  	  in_city		=> in_city,
15:40:02  57  	  in_state		=> in_state,
15:40:02  58  	  in_postal_code	=> in_postal_code,
15:40:02  59  	  in_country		=> in_country,
15:40:02  60  	  in_updated_by 	=> in_updated_by
15:40:02  61  	);
15:40:02  62  END UPDATE_ADDRESS;
15:40:02  63  
15:40:02  64  PROCEDURE GET_ADDRESS (
15:40:02  65  /*
15:40:02  66  Throws exceptions:
15:40:02  67  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02  68  */
15:40:02  69  	  in_id 		IN ADDRESS.ID%TYPE,
15:40:02  70  	  out_result_set	OUT SYS_REFCURSOR
15:40:02  71  ) AS
15:40:02  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
15:40:02  73  BEGIN
15:40:02  74  
15:40:02  75  OPEN out_result_set FOR
15:40:02  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
15:40:02  77  
15:40:02  78  END GET_ADDRESS;
15:40:02  79  
15:40:02  80  END PROCS_ADDRESS_V23;
15:40:02  81  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_adjustments.sql
Compiling body for procs_adjustments.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V23" AS
15:40:02   2  
15:40:02   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
15:40:02   4  	in_invoice_id		  IN NUMBER,
15:40:02   5  	in_adjustment_reason	  IN VARCHAR2,
15:40:02   6  	in_is_credit		  IN NUMBER,
15:40:02   7  	in_charge_id		  IN NUMBER,
15:40:02   8  	in_business_date	  IN DATE,
15:40:02   9  	in_created_by		  IN VARCHAR2,
15:40:02  10  	out_invoice_adjustment_id OUT NUMBER
15:40:02  11  ) AS
15:40:02  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
15:40:02  13  -- VARIABLES
15:40:02  14  var_current_date	    DATE := SYSDATE;
15:40:02  15  var_new_entity_id     NUMBER;
15:40:02  16  var_inv_adj_reason_id NUMBER;
15:40:02  17  -- EXCEPTIONS
15:40:02  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
15:40:02  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
15:40:02  20  BEGIN
15:40:02  21  
15:40:02  22  	IF in_is_credit != GLOBAL_CONSTANTS_V23.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:02  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
15:40:02  24  	END IF;
15:40:02  25  
15:40:02  26  	BEGIN
15:40:02  27  	  SELECT
15:40:02  28  	    ID into var_inv_adj_reason_id
15:40:02  29  	  FROM
15:40:02  30  	    INVOICE_ADJUSTMENT_REASON
15:40:02  31  	  WHERE
15:40:02  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
15:40:02  33  	  EXCEPTION
15:40:02  34  	    WHEN NO_DATA_FOUND THEN
15:40:02  35  	      RAISE DAB_ADJUSTMENT_REASON;
15:40:02  36  	END;
15:40:02  37  
15:40:02  38  	SELECT
15:40:02  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
15:40:02  40  	FROM
15:40:02  41  	  DUAL;
15:40:02  42  
15:40:02  43  	INSERT INTO INVOICE_ADJUSTMENT (
15:40:02  44  	  ID,
15:40:02  45  	  INVOICE_ID,
15:40:02  46  	  INVOICE_ADJUSTMENT_REASON_ID,
15:40:02  47  	  IS_CREDIT,
15:40:02  48  	  CHARGE_ID,
15:40:02  49  	  ADJUSTMENT_DATE,
15:40:02  50  	  CREATE_DATE,
15:40:02  51  	  CREATED_BY,
15:40:02  52  	  UPDATE_DATE,
15:40:02  53  	  UPDATED_BY
15:40:02  54  	)
15:40:02  55  	VALUES (
15:40:02  56  	  var_new_entity_id,
15:40:02  57  	  in_invoice_id,
15:40:02  58  	  var_inv_adj_reason_id,
15:40:02  59  	  in_is_credit,
15:40:02  60  	  in_charge_id,
15:40:02  61  	  in_business_date,
15:40:02  62  	  var_current_date,
15:40:02  63  	  in_created_by,
15:40:02  64  	  var_current_date,
15:40:02  65  	  in_created_by
15:40:02  66  	);
15:40:02  67  
15:40:02  68  	out_invoice_adjustment_id := var_new_entity_id;
15:40:02  69  
15:40:02  70  EXCEPTION
15:40:02  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
15:40:02  72  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:02  73  	  SPROC_NAME, 'Bad in_is_credit value');
15:40:02  74  WHEN DAB_ADJUSTMENT_REASON THEN
15:40:02  75  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:02  76  	  SPROC_NAME, 'Bad adjustment reason');
15:40:02  77  WHEN OTHERS THEN
15:40:02  78  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02  80  END CREATE_INVOICE_ADJUSTMENT;
15:40:02  81  
15:40:02  82  /******************************************************************************/
15:40:02  83  
15:40:02  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
15:40:02  85  	  in_invoice_id 	    IN NUMBER,
15:40:02  86  	  in_original_charge_id     IN NUMBER,
15:40:02  87  	  in_charge_id		    IN NUMBER,
15:40:02  88  	  in_updated_by 	    IN VARCHAR2
15:40:02  89  ) AS
15:40:02  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
15:40:02  91  var_invoice_adjustment_id NUMBER;
15:40:02  92  BEGIN
15:40:02  93  	SELECT
15:40:02  94  	  id into var_invoice_adjustment_id
15:40:02  95  	FROM
15:40:02  96  	  INVOICE_ADJUSTMENT
15:40:02  97  	WHERE INVOICE_ID = in_invoice_id
15:40:02  98  	      AND CHARGE_ID = in_original_charge_id;
15:40:02  99  
15:40:02 100  	--create history
15:40:02 101  	PROCS_HISTORY_V23.CREATE_INVOICE_ADJ_HISTORY(
15:40:02 102  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
15:40:02 103  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:02 104  	);
15:40:02 105  
15:40:02 106  	UPDATE INVOICE_ADJUSTMENT
15:40:02 107  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
15:40:02 108  	WHERE ID = var_invoice_adjustment_id;
15:40:02 109  
15:40:02 110  EXCEPTION
15:40:02 111  WHEN NO_DATA_FOUND THEN
15:40:02 112  	    NULL;
15:40:02 113  END UPDATE_INVOICE_ADJUSTMENT;
15:40:02 114  
15:40:02 115  /******************************************************************************/
15:40:02 116  
15:40:02 117  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
15:40:02 118  	in_line_item_id 	    IN NUMBER,
15:40:02 119  	in_invoice_adjustment_id    IN NUMBER,
15:40:02 120  	in_amount		    IN NUMBER,
15:40:02 121  	in_tax			    IN NUMBER,
15:40:02 122  	in_discount		    IN NUMBER,
15:40:02 123  	in_created_by		    IN VARCHAR2,
15:40:02 124  	out_line_item_adjustment_id OUT NUMBER
15:40:02 125  ) AS
15:40:02 126  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
15:40:02 127  -- VARIABLES
15:40:02 128  var_current_date DATE := SYSDATE;
15:40:02 129  var_new_entity_id NUMBER;
15:40:02 130  BEGIN
15:40:02 131  
15:40:02 132  	SELECT
15:40:02 133  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
15:40:02 134  	FROM
15:40:02 135  	  DUAL;
15:40:02 136  
15:40:02 137  	INSERT INTO LINE_ITEM_ADJUSTMENT (
15:40:02 138  	  ID,
15:40:02 139  	  LINE_ITEM_ID,
15:40:02 140  	  INVOICE_ADJUSTMENT_ID,
15:40:02 141  	  AMOUNT,
15:40:02 142  	  TAX,
15:40:02 143  	  DISCOUNT,
15:40:02 144  	  CREATE_DATE,
15:40:02 145  	  CREATED_BY
15:40:02 146  	)
15:40:02 147  	VALUES (
15:40:02 148  	  var_new_entity_id,
15:40:02 149  	  in_line_item_id,
15:40:02 150  	  in_invoice_adjustment_id,
15:40:02 151  	  in_amount,
15:40:02 152  	  in_tax,
15:40:02 153  	  in_discount,
15:40:02 154  	  var_current_date,
15:40:02 155  	  in_created_by
15:40:02 156  	);
15:40:02 157  
15:40:02 158  	out_line_item_adjustment_id := var_new_entity_id;
15:40:02 159  
15:40:02 160  EXCEPTION
15:40:02 161  WHEN OTHERS THEN
15:40:02 162  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 163  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 164  END CREATE_LINE_ITEM_ADJUSTMENT;
15:40:02 165  
15:40:02 166  /******************************************************************************/
15:40:02 167  
15:40:02 168  PROCEDURE CREATE_TAX_ADJUSTMENT (
15:40:02 169  	in_tax_id		   IN NUMBER,
15:40:02 170  	in_line_item_adjustment_id IN NUMBER,
15:40:02 171  	in_amount		   IN NUMBER,
15:40:02 172  	in_created_by		   IN VARCHAR2,
15:40:02 173  	out_tax_adjustment_id	   OUT NUMBER
15:40:02 174  ) AS
15:40:02 175  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
15:40:02 176  -- VARIABLES
15:40:02 177  var_current_date DATE := SYSDATE;
15:40:02 178  var_new_entity_id NUMBER;
15:40:02 179  BEGIN
15:40:02 180  
15:40:02 181  	SELECT
15:40:02 182  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
15:40:02 183  	FROM
15:40:02 184  	  DUAL;
15:40:02 185  
15:40:02 186  	INSERT INTO TAX_ADJUSTMENT (
15:40:02 187  	  ID,
15:40:02 188  	  TAX_ID,
15:40:02 189  	  LINE_ITEM_ADJUSTMENT_ID,
15:40:02 190  	  AMOUNT,
15:40:02 191  	  CREATE_DATE,
15:40:02 192  	  CREATED_BY
15:40:02 193  	)
15:40:02 194  	VALUES (
15:40:02 195  	  var_new_entity_id,
15:40:02 196  	  in_tax_id,
15:40:02 197  	  in_line_item_adjustment_id,
15:40:02 198  	  in_amount,
15:40:02 199  	  var_current_date,
15:40:02 200  	  in_created_by
15:40:02 201  	);
15:40:02 202  
15:40:02 203  	out_tax_adjustment_id := var_new_entity_id;
15:40:02 204  
15:40:02 205  EXCEPTION
15:40:02 206  WHEN OTHERS THEN
15:40:02 207  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 208  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 209  END CREATE_TAX_ADJUSTMENT;
15:40:02 210  
15:40:02 211  /******************************************************************************/
15:40:02 212  
15:40:02 213  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
15:40:02 214  	in_discount_id		   NUMBER,
15:40:02 215  	in_line_item_id 	   NUMBER,
15:40:02 216  	in_line_item_adjustment_id IN NUMBER,
15:40:02 217  	in_amount		   IN NUMBER,
15:40:02 218  	in_created_by		   IN VARCHAR2,
15:40:02 219  	out_discount_li_id	   OUT NUMBER
15:40:02 220  ) AS
15:40:02 221  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
15:40:02 222  -- VARIABLES
15:40:02 223  var_current_date DATE := SYSDATE;
15:40:02 224  var_new_entity_id NUMBER;
15:40:02 225  BEGIN
15:40:02 226  
15:40:02 227  	SELECT
15:40:02 228  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
15:40:02 229  	FROM
15:40:02 230  	  DUAL;
15:40:02 231  
15:40:02 232  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
15:40:02 233  	  ID,
15:40:02 234  	  DISCOUNT_ID,
15:40:02 235  	  LINE_ITEM_ID,
15:40:02 236  	  LINE_ITEM_ADJUSTMENT_ID,
15:40:02 237  	  AMOUNT,
15:40:02 238  	  CREATE_DATE,
15:40:02 239  	  CREATED_BY
15:40:02 240  	)
15:40:02 241  	VALUES (
15:40:02 242  	  var_new_entity_id,
15:40:02 243  	  in_discount_id,
15:40:02 244  	  in_line_item_id,
15:40:02 245  	  in_line_item_adjustment_id,
15:40:02 246  	  in_amount,
15:40:02 247  	  var_current_date,
15:40:02 248  	  in_created_by
15:40:02 249  	);
15:40:02 250  
15:40:02 251  	out_discount_li_id := var_new_entity_id;
15:40:02 252  
15:40:02 253  EXCEPTION
15:40:02 254  WHEN OTHERS THEN
15:40:02 255  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 256  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 257  END CREATE_DISCOUNT_LI_ADJUSTMENT;
15:40:02 258  
15:40:02 259  END PROCS_ADJUSTMENTS_V23;
15:40:02 260  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.21
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_adx.sql
Compiling body for procs_adx.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V23" AS
15:40:02   2  
15:40:02   3  PROCEDURE GET_SUB_ADX_INFO (
15:40:02   4  /*
15:40:02   5  Throws exceptions:
15:40:02   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02   7  */
15:40:02   8  	out_result_set	    OUT SYS_REFCURSOR,
15:40:02   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
15:40:02  10  ) AS
15:40:02  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
15:40:02  12  BEGIN
15:40:02  13  OPEN out_result_set FOR
15:40:02  14  SELECT /*+ FIRST_ROWS(5) */
15:40:02  15  	s.offer_chain_id,
15:40:02  16  	s.create_date,
15:40:02  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
15:40:02  18  	ocmd.value,
15:40:02  19  	a.group_id,
15:40:02  20  	s.id subscription_id
15:40:02  21  FROM
15:40:02  22  	account a,
15:40:02  23  	subscription s,
15:40:02  24  	offer_chain_meta_data ocmd,
15:40:02  25  	group_account g,
15:40:02  26  	subscription_share ss,
15:40:02  27  	account a2
15:40:02  28  WHERE
15:40:02  29  	s.account_id = a.id and
15:40:02  30  	s.offer_chain_id = ocmd.offer_chain_id and
15:40:02  31  	g.id = ss.group_account_id and
15:40:02  32  	ss.borrower_account_id = a2.id and
15:40:02  33  	s.id = g.subscription_id and
15:40:02  34  	ocmd.name = 'ADX_BUNDLE' and
15:40:02  35  	a2.group_id = in_group_id and
15:40:02  36  	rownum < 5
15:40:02  37  union all
15:40:02  38  SELECT /*+ FIRST_ROWS(5) */
15:40:02  39  	s.offer_chain_id,
15:40:02  40  	s.create_date,
15:40:02  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
15:40:02  42  	ocmd.value,
15:40:02  43  	a.group_id,
15:40:02  44  	s.id subscription_id
15:40:02  45  FROM
15:40:02  46  	account a,
15:40:02  47  	subscription s,
15:40:02  48  	offer_chain_meta_data ocmd
15:40:02  49  WHERE
15:40:02  50  	s.account_id = a.id and
15:40:02  51  	s.offer_chain_id = ocmd.offer_chain_id and
15:40:02  52  	ocmd.name = 'ADX_BUNDLE' and
15:40:02  53  	a.group_id = in_group_id and
15:40:02  54  	rownum < 5
15:40:02  55  ;
15:40:02  56  
15:40:02  57  END GET_SUB_ADX_INFO;
15:40:02  58  
15:40:02  59  END PROCS_ADX_V23;
15:40:02  60  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_amazon.sql
Compiling body for procs_amazon.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V23" AS
15:40:02   2  
15:40:02   3  PROCEDURE AASR_PURCHASE_TOKEN_USED(
15:40:02   4  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
15:40:02   5  	out_data	  OUT NUMBER
15:40:02   6  ) AS
15:40:02   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'AASR_PURCHASE_TOKEN_USED';
15:40:02   8  BEGIN
15:40:02   9  	SELECT
15:40:02  10  	  COUNT(1)
15:40:02  11  	INTO OUT_DATA
15:40:02  12  	FROM AMAZON_APPSTORE_RECEIPT
15:40:02  13  	WHERE PURCHASE_TOKEN = in_purchase_token;
15:40:02  14  	EXCEPTION
15:40:02  15  	WHEN NO_DATA_FOUND THEN
15:40:02  16  	out_data := 0;
15:40:02  17  END;
15:40:02  18  
15:40:02  19  PROCEDURE UPDATE_AASR_LAST_CHECK_DATE(
15:40:02  20  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:40:02  21  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
15:40:02  22  ) AS
15:40:02  23  BEGIN
15:40:02  24  	CORE_OWNER.PROCS_AMAZON_CRU_V23.UPDATE_AMAZON_APPSTORE_RECEIPT(
15:40:02  25  	  in_id 	     => in_id,
15:40:02  26  	  in_updated_by      => in_updated_by,
15:40:02  27  	  in_last_check_date => SYSDATE
15:40:02  28  	);
15:40:02  29  END UPDATE_AASR_LAST_CHECK_DATE;
15:40:02  30  
15:40:02  31  PROCEDURE EXPIRED_AASR_SUB_IDS(
15:40:02  32  	out_data   OUT SYS_REFCURSOR
15:40:02  33  ) AS
15:40:02  34  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRED_AASR_SUB_IDS';
15:40:02  35  BEGIN
15:40:02  36  	OPEN out_data FOR
15:40:02  37  	SELECT
15:40:02  38  	  *
15:40:02  39  	FROM
15:40:02  40  	  (
15:40:02  41  	    SELECT
15:40:02  42  	      AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
15:40:02  43  	    FROM AMAZON_APPSTORE_RECEIPT
15:40:02  44  	      INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
15:40:02  45  	    WHERE
15:40:02  46  	      AMAZON_APPSTORE_RECEIPT.END_DATE <= SYSDATE AND
15:40:02  47  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:02  48  	    ORDER BY dbms_random.value
15:40:02  49  	  )
15:40:02  50  	WHERE
15:40:02  51  	  ROWNUM <= 1000;
15:40:02  52  END EXPIRED_AASR_SUB_IDS;
15:40:02  53  
15:40:02  54  PROCEDURE UPDATE_AASR_PURCHASE_TOKEN(
15:40:02  55  	in_id		  IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:40:02  56  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
15:40:02  57  	in_updated_by	  IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
15:40:02  58  ) AS
15:40:02  59  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AASR_PURCHASE_TOKEN';
15:40:02  60  BEGIN
15:40:02  61  	  CORE_OWNER.PROCS_AMAZON_CRU_V23.UPDATE_AMAZON_APPSTORE_RECEIPT(
15:40:02  62  	      in_id		  => in_id,
15:40:02  63  	      in_updated_by	  => in_updated_by,
15:40:02  64  	      in_purchase_token   => in_purchase_token
15:40:02  65  	  );
15:40:02  66  END UPDATE_AASR_PURCHASE_TOKEN;
15:40:02  67  
15:40:02  68  PROCEDURE UPDATE_AASR_END_DATE(
15:40:02  69  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:40:02  70  	in_end_date   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE,
15:40:02  71  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
15:40:02  72  ) AS
15:40:02  73  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AASR_END_DATE';
15:40:02  74  BEGIN
15:40:02  75  	CORE_OWNER.PROCS_AMAZON_CRU_V23.UPDATE_AMAZON_APPSTORE_RECEIPT(
15:40:02  76  	    in_id	  => in_id,
15:40:02  77  	    in_updated_by => in_updated_by,
15:40:02  78  	    in_end_date   => in_end_date
15:40:02  79  	);
15:40:02  80  END UPDATE_AASR_END_DATE;
15:40:02  81  
15:40:02  82  PROCEDURE AASR_RECEIPTS_WITH_ACTIVE_SUBS(
15:40:02  83  	out_data   OUT SYS_REFCURSOR,
15:40:02  84  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:40:02  85  ) AS
15:40:02  86  SPROC_NAME CONSTANT VARCHAR2(32) := 'AASR_RECEIPTS_WITH_ACTIVE_SUBS';
15:40:02  87  BEGIN
15:40:02  88  	OPEN out_data FOR
15:40:02  89  	SELECT
15:40:02  90  	  *
15:40:02  91  	FROM (
15:40:02  92  	  SELECT
15:40:02  93  	    AMAZON_APPSTORE_RECEIPT.ID,
15:40:02  94  	    AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
15:40:02  95  	    AMAZON_APPSTORE_RECEIPT.USER_ID,
15:40:02  96  	    AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
15:40:02  97  	    AMAZON_APPSTORE_RECEIPT.START_DATE,
15:40:02  98  	    AMAZON_APPSTORE_RECEIPT.END_DATE,
15:40:02  99  	    AMAZON_APPSTORE_RECEIPT.SKU,
15:40:02 100  	    AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
15:40:02 101  	    AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
15:40:02 102  	    AMAZON_APPSTORE_RECEIPT.CREATED_BY,
15:40:02 103  	    AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
15:40:02 104  	    AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
15:40:02 105  	    AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
15:40:02 106  	  FROM AMAZON_APPSTORE_RECEIPT
15:40:02 107  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
15:40:02 108  	  WHERE
15:40:02 109  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:02 110  	    AND NOT EXISTS
15:40:02 111  	    (
15:40:02 112  		SELECT
15:40:02 113  		  NULL
15:40:02 114  		FROM PROCESS_RETRY_THROTTLE
15:40:02 115  		WHERE PROCESS_NAME = in_process_name
15:40:02 116  		      AND GENERIC_ID = AMAZON_APPSTORE_RECEIPT.ID
15:40:02 117  	    )
15:40:02 118  	  ORDER BY dbms_random.value
15:40:02 119  	)
15:40:02 120  	WHERE
15:40:02 121  	  ROWNUM <= 1000;
15:40:02 122  END AASR_RECEIPTS_WITH_ACTIVE_SUBS;
15:40:02 123  
15:40:02 124  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
15:40:02 125  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:40:02 126  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
15:40:02 127  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
15:40:02 128  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
15:40:02 129  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
15:40:02 130  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
15:40:02 131  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
15:40:02 132  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
15:40:02 133  ) AS
15:40:02 134  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE_RECEIPT';
15:40:02 135  BEGIN
15:40:02 136  	CORE_OWNER.PROCS_AMAZON_CRU_V23.ADD_AMAZON_APPSTORE_RECEIPT(
15:40:02 137  	    in_subscription_id =>  in_subscription_id,
15:40:02 138  	    in_user_id	       =>  in_user_id,
15:40:02 139  	    in_item_type       =>  in_item_type,
15:40:02 140  	    in_start_date      =>  in_start_date,
15:40:02 141  	    in_end_date        =>  in_end_date,
15:40:02 142  	    in_sku	       =>  in_sku,
15:40:02 143  	    in_purchase_token  =>  in_purchase_token,
15:40:02 144  	    in_created_by      =>  in_created_by
15:40:02 145  	);
15:40:02 146  END ADD_AMAZON_APPSTORE_RECEIPT;
15:40:02 147  
15:40:02 148  PROCEDURE AMAZON_APPSTORE_RECEIPTS(
15:40:02 149  	in_user_id IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
15:40:02 150  	in_sku	   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
15:40:02 151  	out_data   OUT SYS_REFCURSOR
15:40:02 152  ) AS
15:40:02 153  SPROC_NAME CONSTANT VARCHAR2(32) := 'AMAZON_APPSTORE_RECEIPTS';
15:40:02 154  BEGIN
15:40:02 155  	OPEN out_data FOR
15:40:02 156  	SELECT
15:40:02 157  	  AMAZON_APPSTORE_RECEIPT.ID,
15:40:02 158  	  AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
15:40:02 159  	  AMAZON_APPSTORE_RECEIPT.USER_ID,
15:40:02 160  	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
15:40:02 161  	  AMAZON_APPSTORE_RECEIPT.START_DATE,
15:40:02 162  	  AMAZON_APPSTORE_RECEIPT.END_DATE,
15:40:02 163  	  AMAZON_APPSTORE_RECEIPT.SKU,
15:40:02 164  	  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
15:40:02 165  	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
15:40:02 166  	  AMAZON_APPSTORE_RECEIPT.CREATED_BY,
15:40:02 167  	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
15:40:02 168  	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
15:40:02 169  	  AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
15:40:02 170  	FROM AMAZON_APPSTORE_RECEIPT
15:40:02 171  	  INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
15:40:02 172  	WHERE AMAZON_APPSTORE_RECEIPT.USER_ID = in_user_id AND
15:40:02 173  	      AMAZON_APPSTORE_RECEIPT.SKU = in_sku AND
15:40:02 174  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
15:40:02 175  END AMAZON_APPSTORE_RECEIPTS;
15:40:02 176  
15:40:02 177  	PROCEDURE CREATE_AMAZON_SUB(
15:40:02 178  	  out_id	      OUT NUMBER,
15:40:02 179  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
15:40:02 180  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
15:40:02 181  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
15:40:02 182  ) AS
15:40:02 183  -- VARIABLES
15:40:02 184  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
15:40:02 185  -- EXCEPTIONS
15:40:02 186  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 187  BEGIN
15:40:02 188  
15:40:02 189  	CORE_OWNER.PROCS_AMAZON_CRU_V23.CREATE_AMAZON_SUB(
15:40:02 190  	  out_id	      =>  out_id,
15:40:02 191  	  in_subscription_id  =>  in_subscription_id,
15:40:02 192  	  in_amazon_id	      =>  in_amazon_id,
15:40:02 193  	  in_created_by       =>  in_created_by
15:40:02 194  	);
15:40:02 195  
15:40:02 196  END CREATE_AMAZON_SUB;
15:40:02 197  
15:40:02 198  PROCEDURE GET_ACTIVE_SUB_IDS (
15:40:02 199  	out_result_set	    OUT SYS_REFCURSOR,
15:40:02 200  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
15:40:02 201  ) AS
15:40:02 202  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
15:40:02 203  BEGIN
15:40:02 204  OPEN out_result_set FOR
15:40:02 205  SELECT s.id
15:40:02 206  FROM subscription s, amazon_sub am
15:40:02 207  WHERE
15:40:02 208  	s.id = am.subscription_id
15:40:02 209  	and s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:02 210  	and am.amazon_id = in_amazon_id
15:40:02 211  ;
15:40:02 212  
15:40:02 213  END GET_ACTIVE_SUB_IDS;
15:40:02 214  
15:40:02 215  PROCEDURE GET_ACTIVE_GROUP_IDS (
15:40:02 216  	out_result_set	    OUT SYS_REFCURSOR,
15:40:02 217  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
15:40:02 218  ) AS
15:40:02 219  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
15:40:02 220  BEGIN
15:40:02 221  OPEN out_result_set FOR
15:40:02 222  SELECT distinct a.group_id id
15:40:02 223  FROM subscription s, amazon_sub am, account a
15:40:02 224  WHERE
15:40:02 225  	s.id = am.subscription_id
15:40:02 226  	and a.id = s.account_id
15:40:02 227  	and s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:02 228  	and am.amazon_id = in_amazon_id
15:40:02 229  ;
15:40:02 230  
15:40:02 231  END GET_ACTIVE_GROUP_IDS;
15:40:02 232  
15:40:02 233  END PROCS_AMAZON_V23;
15:40:02 234  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_cupy.sql
Compiling body for procs_cupy.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
15:40:02   2  
15:40:02   3  	/****************************************************************************/
15:40:02   4  
15:40:02   5  	PROCEDURE POPULATE_REQUEST_INFO(
15:40:02   6  	  in_hours_prior    IN	NUMBER,
15:40:02   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
15:40:02   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
15:40:02   9  	) AS
15:40:02  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
15:40:02  11  	var_start_date	    DATE := SYSDATE;
15:40:02  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
15:40:02  13  	var_request_file_id NUMBER := 0;
15:40:02  14  	var_license_count   NUMBER := 0;
15:40:02  15  	var_cc_update_count NUMBER := 0;
15:40:02  16  	BEGIN
15:40:02  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
15:40:02  18  	    INSERT INTO CC_REQUEST_FILE (ID,
15:40:02  19  					 FILE_NAME,
15:40:02  20  					 CC_REQUEST_FILE_STATUS,
15:40:02  21  					 CREATE_DATE,
15:40:02  22  					 CREATED_BY,
15:40:02  23  					 UPDATE_DATE,
15:40:02  24  					 UPDATED_BY)
15:40:02  25  					 VALUES (
15:40:02  26  					 var_request_file_id,
15:40:02  27  					 in_filename,
15:40:02  28  					 'NOT_CREATED',
15:40:02  29  					 var_start_date,
15:40:02  30  					 in_creator,
15:40:02  31  					 var_start_date,
15:40:02  32  					 in_creator);
15:40:02  33  
15:40:02  34  	   FOR record IN (SELECT
15:40:02  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
15:40:02  36  			  FROM
15:40:02  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
15:40:02  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
15:40:02  39  			  WHERE
15:40:02  40  			    s.INSTRUMENT_TYPE_ID	 = 1
15:40:02  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
15:40:02  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
15:40:02  43  			    AND l.LICENSE_STATUS_ID	 = 2
15:40:02  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
15:40:02  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
15:40:02  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
15:40:02  47  	   LOOP
15:40:02  48  	     var_license_count := 0;
15:40:02  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
15:40:02  50  
15:40:02  51  	     IF var_license_count = 0 THEN
15:40:02  52  		INSERT INTO CC_UPDATE (ID,
15:40:02  53  				       CREDIT_CARD_ID,
15:40:02  54  				       LICENSE_ID,
15:40:02  55  				       CC_UPDATE_STATUS,
15:40:02  56  				       CC_REQUEST_FILE_ID,
15:40:02  57  				       CREATE_DATE,
15:40:02  58  				       UPDATE_DATE,
15:40:02  59  				       CREATED_BY,
15:40:02  60  				       UPDATED_BY
15:40:02  61  				       ) VALUES (
15:40:02  62  				       CC_UPDATE_SEQ.NEXTVAL,
15:40:02  63  				       record.CREDIT_CARD_ID,
15:40:02  64  				       record.LICENSE_ID,
15:40:02  65  				       'NOT_ADDED_TO_FILE',
15:40:02  66  				       var_request_file_id,
15:40:02  67  				       var_start_date,
15:40:02  68  				       var_start_date,
15:40:02  69  				       in_creator,
15:40:02  70  				       in_creator
15:40:02  71  				       );
15:40:02  72  	     END IF;
15:40:02  73  	   END LOOP;
15:40:02  74  
15:40:02  75  	   SELECT COUNT(1) INTO var_cc_update_count
15:40:02  76  	   FROM CC_UPDATE
15:40:02  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
15:40:02  78  	   IF var_cc_update_count <= 0 THEN
15:40:02  79  	     UPDATE CC_REQUEST_FILE
15:40:02  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
15:40:02  81  	     WHERE ID = var_request_file_id;
15:40:02  82  	   END IF;
15:40:02  83  
15:40:02  84  	END POPULATE_REQUEST_INFO;
15:40:02  85  
15:40:02  86  	/****************************************************************************/
15:40:02  87  
15:40:02  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
15:40:02  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:40:02  90  	  in_start	     IN NUMBER,
15:40:02  91  	  in_end	     IN NUMBER,
15:40:02  92  	  out_result_set     OUT SYS_REFCURSOR
15:40:02  93  	) AS
15:40:02  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
15:40:02  95  	var_range_diff	    NUMBER := 0;
15:40:02  96  	var_upper_bond_diff NUMBER := 0;
15:40:02  97  	var_l_start	    NUMBER := 0;
15:40:02  98  	var_l_end	    NUMBER := 0;
15:40:02  99  	BEGIN
15:40:02 100  	  --Normalize the end points [START]
15:40:02 101  	  IF (in_start IS NULL OR in_start < 0) Then
15:40:02 102  	    var_l_start := 0;
15:40:02 103  	  ELSE
15:40:02 104  	    var_l_start := in_start;
15:40:02 105  	  END IF;
15:40:02 106  
15:40:02 107  	  IF (in_end IS NULL) Then
15:40:02 108  	    var_l_end := 500;
15:40:02 109  	  ELSE
15:40:02 110  	    var_l_end := in_end;
15:40:02 111  	  END IF;
15:40:02 112  
15:40:02 113  	  var_l_start := var_l_start + 1;
15:40:02 114  	  var_l_end   := var_l_end   + 1;
15:40:02 115  
15:40:02 116  	  var_range_diff  := var_l_end - var_l_start;
15:40:02 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
15:40:02 118  
15:40:02 119  	  IF (var_upper_bond_diff > 0) Then
15:40:02 120  	    var_l_end := var_l_end - var_upper_bond_diff;
15:40:02 121  	  END IF;
15:40:02 122  	  --Normalize the end points [END]
15:40:02 123  
15:40:02 124  	  OPEN out_result_set FOR
15:40:02 125  	    SELECT CHASE_PROFILE_ID FROM
15:40:02 126  	      (SELECT rownum rnum, q.* FROM
15:40:02 127  		 (SELECT
15:40:02 128  		    cc.CHASE_PROFILE_ID
15:40:02 129  		  FROM
15:40:02 130  		    CREDIT_CARD cc,
15:40:02 131  		    CC_UPDATE ccu
15:40:02 132  		  WHERE
15:40:02 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
15:40:02 134  		    AND ccu.CREDIT_CARD_ID = cc.id
15:40:02 135  		) Q
15:40:02 136  	      WHERE rownum <= var_l_end)
15:40:02 137  	    WHERE rnum >= var_l_Start;
15:40:02 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
15:40:02 139  
15:40:02 140  	/****************************************************************************/
15:40:02 141  
15:40:02 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
15:40:02 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
15:40:02 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
15:40:02 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
15:40:02 146  	)AS
15:40:02 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
15:40:02 148  	BEGIN
15:40:02 149  	  UPDATE CC_REQUEST_FILE
15:40:02 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
15:40:02 151  	      UPDATE_DATE = SYSDATE,
15:40:02 152  	      UPDATED_BY  = in_updated_by
15:40:02 153  	  WHERE ID = in_request_file_id;
15:40:02 154  	END UPDATE_REQUEST_FILE_STATUS;
15:40:02 155  
15:40:02 156  	/****************************************************************************/
15:40:02 157  
15:40:02 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
15:40:02 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:40:02 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:40:02 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
15:40:02 162  	) AS
15:40:02 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
15:40:02 164  	BEGIN
15:40:02 165  	  UPDATE CC_UPDATE
15:40:02 166  	  SET CC_UPDATE_STATUS = in_status,
15:40:02 167  	      UPDATE_DATE      = SYSDATE,
15:40:02 168  	      UPDATED_BY       = in_updated_by
15:40:02 169  	  WHERE
15:40:02 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
15:40:02 171  	END UPDATE_CC_REQUEST_STATUS;
15:40:02 172  
15:40:02 173  	/****************************************************************************/
15:40:02 174  
15:40:02 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
15:40:02 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
15:40:02 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
15:40:02 178  	  out_request_files   OUT SYS_REFCURSOR
15:40:02 179  	) AS
15:40:02 180  	var_older_than_hours NUMBER := in_older_than_hours;
15:40:02 181  	BEGIN
15:40:02 182  	 IF (var_older_than_hours IS NULL) THEN
15:40:02 183  	   var_older_than_hours := -288;
15:40:02 184  	 END IF;
15:40:02 185  
15:40:02 186  	 OPEN out_request_files FOR
15:40:02 187  	 SELECT
15:40:02 188  	   ID,
15:40:02 189  	   FILE_NAME
15:40:02 190  	 FROM
15:40:02 191  	   CC_REQUEST_FILE
15:40:02 192  	 WHERE
15:40:02 193  	   CC_REQUEST_FILE_STATUS = in_status
15:40:02 194  	 AND
15:40:02 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
15:40:02 196  	END REQUEST_FILES_BY_STATUS;
15:40:02 197  
15:40:02 198  	/****************************************************************************/
15:40:02 199  
15:40:02 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
15:40:02 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
15:40:02 202  	  out_count OUT NUMBER
15:40:02 203  	) AS
15:40:02 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
15:40:02 205  	BEGIN
15:40:02 206  	  SELECT COUNT(1) INTO out_count
15:40:02 207  	  FROM CC_UPDATE
15:40:02 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
15:40:02 209  	END COUNT_BY_REQUEST_FILE_ID;
15:40:02 210  
15:40:02 211  	/****************************************************************************/
15:40:02 212  
15:40:02 213  	PROCEDURE GET_CREDIT_CARD_INFO (
15:40:02 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
15:40:02 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
15:40:02 216  	  out_card_info        OUT SYS_REFCURSOR
15:40:02 217  	) AS
15:40:02 218  	BEGIN
15:40:02 219  	  OPEN out_card_info FOR
15:40:02 220  	  SELECT
15:40:02 221  	    u.LICENSE_ID,
15:40:02 222  	    cc.ACCOUNT_ID,
15:40:02 223  	    cc.ID CREDIT_CARD_ID,
15:40:02 224  	    cc.CHASE_PROFILE_ID,
15:40:02 225  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
15:40:02 226  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
15:40:02 227  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
15:40:02 228  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
15:40:02 229  	    u.ID CC_UPDATE_ID,
15:40:02 230  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
15:40:02 231  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf
15:40:02 232  	  WHERE cc.ID = u.CREDIT_CARD_ID
15:40:02 233  	  AND u.CC_REQUEST_FILE_ID = rf.ID
15:40:02 234  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
15:40:02 235  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
15:40:02 236  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
15:40:02 237  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
15:40:02 238  	  ORDER BY cc.UPDATE_DATE DESC;
15:40:02 239  	END GET_CREDIT_CARD_INFO;
15:40:02 240  
15:40:02 241  	/****************************************************************************/
15:40:02 242  
15:40:02 243  	PROCEDURE UPDATE_CC_UPDATE(
15:40:02 244  	  in_id 	     IN CC_UPDATE.ID%TYPE,
15:40:02 245  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:40:02 246  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
15:40:02 247  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
15:40:02 248  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
15:40:02 249  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
15:40:02 250  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
15:40:02 251  	) AS
15:40:02 252  	BEGIN
15:40:02 253  	  UPDATE CC_UPDATE
15:40:02 254  	  SET CC_UPDATE_STATUS = in_status,
15:40:02 255  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
15:40:02 256  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
15:40:02 257  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
15:40:02 258  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
15:40:02 259  	  UPDATE_DATE = SYSDATE,
15:40:02 260  	  UPDATED_BY = in_updated_by
15:40:02 261  	  WHERE ID = in_id;
15:40:02 262  	END UPDATE_CC_UPDATE;
15:40:02 263  
15:40:02 264  	/****************************************************************************/
15:40:02 265  
15:40:02 266  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
15:40:02 267  	  in_id 	IN CC_UPDATE.ID%TYPE,
15:40:02 268  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
15:40:02 269  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
15:40:02 270  	) AS
15:40:02 271  	BEGIN
15:40:02 272  	  UPDATE CC_UPDATE
15:40:02 273  	  SET CC_UPDATE_STATUS = in_status,
15:40:02 274  	  UPDATE_DATE = SYSDATE,
15:40:02 275  	  UPDATED_BY = in_updated_by
15:40:02 276  	  WHERE ID = in_id;
15:40:02 277  	END UPDATE_CC_UPDATE_STATUS;
15:40:02 278  
15:40:02 279  	/****************************************************************************/
15:40:02 280  
15:40:02 281  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
15:40:02 282  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
15:40:02 283  	  out_request_file     OUT SYS_REFCURSOR
15:40:02 284  	) AS
15:40:02 285  	BEGIN
15:40:02 286  	  OPEN out_request_file FOR
15:40:02 287  	  SELECT ID, FILE_NAME
15:40:02 288  	  FROM CC_REQUEST_FILE
15:40:02 289  	  WHERE FILE_NAME = in_request_filename;
15:40:02 290  	END GET_REQUEST_FILE_BY_FILENAME;
15:40:02 291  
15:40:02 292  	/****************************************************************************/
15:40:02 293  
15:40:02 294  	PROCEDURE SUSPEND_CREDIT_CARD (
15:40:02 295  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
15:40:02 296  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
15:40:02 297  	) AS
15:40:02 298  	BEGIN
15:40:02 299  	  -- Create history
15:40:02 300  	  PROCS_HISTORY_V23.CREATE_CREDIT_CARD_HISTORY(
15:40:02 301  	      in_credit_card_id 	   => in_credit_card_id,
15:40:02 302  	      in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:02 303  	  );
15:40:02 304  
15:40:02 305  	  UPDATE CREDIT_CARD
15:40:02 306  	  SET UPDATE_DATE = SYSDATE,
15:40:02 307  	  UPDATED_BY = in_updated_by,
15:40:02 308  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V23.CREDIT_CARD_DISABLED
15:40:02 309  	  WHERE ID = in_credit_card_id;
15:40:02 310  	END SUSPEND_CREDIT_CARD;
15:40:02 311  
15:40:02 312  	/****************************************************************************/
15:40:02 313  
15:40:02 314  	PROCEDURE UPDATE_CREDIT_CARD (
15:40:02 315  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
15:40:02 316  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:40:02 317  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
15:40:02 318  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
15:40:02 319  	) AS
15:40:02 320  	BEGIN
15:40:02 321  	  -- Create history
15:40:02 322  	  PROCS_HISTORY_V23.CREATE_CREDIT_CARD_HISTORY(
15:40:02 323  	      in_credit_card_id 	   => in_credit_card_id,
15:40:02 324  	      in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
15:40:02 325  	  );
15:40:02 326  
15:40:02 327  	  UPDATE CREDIT_CARD
15:40:02 328  	  SET UPDATE_DATE = SYSDATE,
15:40:02 329  	  UPDATED_BY = in_updated_by,
15:40:02 330  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
15:40:02 331  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
15:40:02 332  	  WHERE ID = in_credit_card_id;
15:40:02 333  	END UPDATE_CREDIT_CARD;
15:40:02 334  
15:40:02 335  	/****************************************************************************/
15:40:02 336  
15:40:02 337  	PROCEDURE COMPLETABLE_REQUESTS (
15:40:02 338  	  out_request_files OUT SYS_REFCURSOR
15:40:02 339  	) AS
15:40:02 340  	BEGIN
15:40:02 341  	  OPEN out_request_files FOR
15:40:02 342  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
15:40:02 343  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
15:40:02 344  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
15:40:02 345  	  AND rf.ID = u.CC_REQUEST_FILE_ID
15:40:02 346  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
15:40:02 347  	  MINUS
15:40:02 348  	  SELECT rf.ID, rf.FILE_NAME
15:40:02 349  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
15:40:02 350  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
15:40:02 351  	  AND rf.ID = u.CC_REQUEST_FILE_ID
15:40:02 352  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
15:40:02 353  	END COMPLETABLE_REQUESTS;
15:40:02 354  
15:40:02 355  	/****************************************************************************/
15:40:02 356  
15:40:02 357  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
15:40:02 358  	  in_max_hours_before_report IN  NUMBER,
15:40:02 359  	  out_request_files	     OUT SYS_REFCURSOR
15:40:02 360  	) AS
15:40:02 361  	BEGIN
15:40:02 362  	  OPEN out_request_files FOR
15:40:02 363  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
15:40:02 364  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
15:40:02 365  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
15:40:02 366  	  AND rf.ID = u.CC_REQUEST_FILE_ID
15:40:02 367  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
15:40:02 368  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
15:40:02 369  	  MINUS
15:40:02 370  	  SELECT rf.ID, rf.FILE_NAME
15:40:02 371  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
15:40:02 372  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
15:40:02 373  	  AND rf.ID = u.CC_REQUEST_FILE_ID
15:40:02 374  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
15:40:02 375  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
15:40:02 376  	END COMPLETABLE_REQUESTS_W_FAILS;
15:40:02 377  
15:40:02 378  	/****************************************************************************/
15:40:02 379  
15:40:02 380  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
15:40:02 381  	  in_account_id IN NUMBER,
15:40:02 382  	  out_group_id	OUT NUMBER
15:40:02 383  	) AS
15:40:02 384  	BEGIN
15:40:02 385  	  PROCS_ACCOUNT_V23.GET_GROUP_ID_BY_ACCOUNT_ID(
15:40:02 386  	    in_account_id => in_account_id,
15:40:02 387  	    out_group_id => out_group_id
15:40:02 388  	  );
15:40:02 389  	END GET_GROUP_ID_BY_ACCOUNT_ID;
15:40:02 390  
15:40:02 391  	/****************************************************************************/
15:40:02 392  
15:40:02 393  	PROCEDURE GET_LICENSE_BY_ID (
15:40:02 394  	  in_license_id  IN NUMBER,
15:40:02 395  	  out_result_set OUT SYS_REFCURSOR
15:40:02 396  	) AS
15:40:02 397  	BEGIN
15:40:02 398  	  PROCS_LICENSE_V23.GET_LICENSE_BY_ID(
15:40:02 399  	    in_license_id => in_license_id,
15:40:02 400  	    out_result_set => out_result_set
15:40:02 401  	  );
15:40:02 402  	END GET_LICENSE_BY_ID;
15:40:02 403  
15:40:02 404  END PROCS_CUPY;
15:40:02 405  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.22
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_entitlement.sql
Compiling body for procs_entitlement.sql
15:40:02 SQL> CREATE OR REPLACE
15:40:02   2  PACKAGE BODY PROCS_ENTITLEMENT_V23 AS
15:40:02   3  
15:40:02   4  	PROCEDURE GET_ALL_ENTITLEMENTS(
15:40:02   5  	  in_group_id	 IN  NUMBER,
15:40:02   6  	  out_result_set OUT SYS_REFCURSOR)
15:40:02   7  	AS
15:40:02   8  	  -- CONSTANTS
15:40:02   9  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
15:40:02  10  	  -- EXCEPTIONS
15:40:02  11  	  NOT_FOUND	  EXCEPTION;
15:40:02  12  	  UNKNOWN_ERROR   EXCEPTION;
15:40:02  13  	  -- VARIABLES
15:40:02  14  	  var_subs	  SYS_REFCURSOR;
15:40:02  15  	BEGIN
15:40:02  16  	  OPEN out_result_set FOR
15:40:02  17  
15:40:02  18  	SELECT
15:40:02  19  	  P.ENTITLEMENT,
15:40:02  20  	  P.NAME,
15:40:02  21  	  0 INHERITED,
15:40:02  22  	  P.IS_SHAREABLE,
15:40:02  23  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
15:40:02  24  	FROM
15:40:02  25  	  SUBSCRIPTION SB
15:40:02  26  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
15:40:02  27  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
15:40:02  28  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
15:40:02  29  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
15:40:02  30  	  INNER JOIN PRODUCT P ON P.ID = PO.PRODUCT_ID
15:40:02  31  	WHERE
15:40:02  32  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
15:40:02  33  	  AND LIC.START_DATE <= SYSDATE
15:40:02  34  	  AND AC.GROUP_ID = in_group_id
15:40:02  35  	GROUP BY
15:40:02  36  	  P.ENTITLEMENT, 0, P.IS_SHAREABLE, P.NAME
15:40:02  37  UNION ALL
15:40:02  38  	SELECT
15:40:02  39  	  P.ENTITLEMENT,
15:40:02  40  	  P.NAME,
15:40:02  41  	  1 INHERITED,
15:40:02  42  	  P.IS_SHAREABLE,
15:40:02  43  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
15:40:02  44  	FROM
15:40:02  45  	  ACCOUNT BORROWER,
15:40:02  46  	  SUBSCRIPTION S,
15:40:02  47  	  LICENSE LIC,
15:40:02  48  	  OFFER_PRODUCT_OFFERING OPO,
15:40:02  49  	  PRODUCT_OFFERING PO,
15:40:02  50  	  PRODUCT P,
15:40:02  51  	  GROUP_ACCOUNT GA,
15:40:02  52  	  SUBSCRIPTION_SHARE SS
15:40:02  53  	WHERE
15:40:02  54  	  BORROWER.GROUP_ID = in_group_id
15:40:02  55  	  AND LIC.SUBSCRIPTION_ID = S.ID
15:40:02  56  	  AND OPO.OFFER_ID = LIC.OFFER_ID
15:40:02  57  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
15:40:02  58  	  AND PO.PRODUCT_ID = P.ID
15:40:02  59  	  AND GA.SUBSCRIPTION_ID = S.ID
15:40:02  60  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
15:40:02  61  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
15:40:02  62  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
15:40:02  63  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
15:40:02  64  	  AND P.IS_SHAREABLE = 1
15:40:02  65  	GROUP BY
15:40:02  66  	  P.ENTITLEMENT, 0, P.IS_SHAREABLE, P.NAME;
15:40:02  67  
15:40:02  68  	EXCEPTION
15:40:02  69  	  WHEN OTHERS THEN
15:40:02  70  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02  71  	      SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02  72  	END GET_ALL_ENTITLEMENTS;
15:40:02  73  
15:40:02  74  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
15:40:02  75  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:40:02  76  	  out_result_set OUT SYS_REFCURSOR)
15:40:02  77  	AS
15:40:02  78  	  -- CONSTANTS
15:40:02  79  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
15:40:02  80  	  -- EXCEPTIONS
15:40:02  81  	  NOT_FOUND	  EXCEPTION;
15:40:02  82  	  UNKNOWN_ERROR   EXCEPTION;
15:40:02  83  	  -- VARIABLES
15:40:02  84  	  var_subs	  SYS_REFCURSOR;
15:40:02  85  	BEGIN
15:40:02  86  	  OPEN out_result_set FOR
15:40:02  87  
15:40:02  88  	      SELECT
15:40:02  89  		p.entitlement,
15:40:02  90  		p.name,
15:40:02  91  		0 INHERITED,
15:40:02  92  		p.IS_SHAREABLE,
15:40:02  93  		sysdate as EXPIRES
15:40:02  94  	      FROM
15:40:02  95  		offer_offer_chain ooc,
15:40:02  96  		offer o,
15:40:02  97  		offer_product_offering opo,
15:40:02  98  		product_offering po,
15:40:02  99  		product p
15:40:02 100  	      WHERE
15:40:02 101  		o.id = ooc.offer_id AND
15:40:02 102  		opo.offer_id = o.id AND
15:40:02 103  		po.id = opo.product_offering_id AND
15:40:02 104  		p.id = po.product_id AND
15:40:02 105  		ooc.offer_chain_id =
15:40:02 106  		(SELECT
15:40:02 107  		    ocmd.offer_chain_id
15:40:02 108  		  FROM
15:40:02 109  		      offer_chain_meta_data ocmd
15:40:02 110  		  WHERE
15:40:02 111  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
15:40:02 112  		      ocmd.value = in_product_id AND
15:40:02 113  		      rownum < 2
15:40:02 114  		)
15:40:02 115  	      ;
15:40:02 116  
15:40:02 117  	EXCEPTION
15:40:02 118  	  WHEN OTHERS THEN
15:40:02 119  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 120  	      SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 121  	END GET_ITUNES_ENTITLEMENTS;
15:40:02 122  
15:40:02 123  END PROCS_ENTITLEMENT_V23;
15:40:02 124  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_history.sql
Compiling body for procs_history.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V23" AS
15:40:02   2  
15:40:02   3  PROCEDURE CREATE_AASR_HISTORY(
15:40:02   4  	in_id			     IN CORE_OWNER.AMAZON_APPSTORE_RECEIPT.ID%TYPE,
15:40:02   5  	in_system_activity_reason_id IN NUMBER,
15:40:02   6  	in_created_by		     IN VARCHAR2
15:40:02   7  ) AS
15:40:02   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_AASR_HISTORY';
15:40:02   9  var_id		  AMAZON_APPSTORE_RECEIPT.ID%TYPE;
15:40:02  10  var_subscription_id AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE;
15:40:02  11  var_user_id	  AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE;
15:40:02  12  var_item_type	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE;
15:40:02  13  var_start_date	  AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE;
15:40:02  14  var_end_date	  AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE;
15:40:02  15  var_sku		  AMAZON_APPSTORE_RECEIPT.SKU%TYPE;
15:40:02  16  var_purchase_token  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE;
15:40:02  17  var_create_date	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE%TYPE;
15:40:02  18  var_created_by	  AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE;
15:40:02  19  var_update_date	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE%TYPE;
15:40:02  20  var_updated_by	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE;
15:40:02  21  var_last_check_date AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE;
15:40:02  22  BEGIN
15:40:02  23  	SELECT
15:40:02  24  	  AMAZON_APPSTORE_RECEIPT.ID,
15:40:02  25  	  AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
15:40:02  26  	  AMAZON_APPSTORE_RECEIPT.USER_ID,
15:40:02  27  	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
15:40:02  28  	  AMAZON_APPSTORE_RECEIPT.START_DATE,
15:40:02  29  	  AMAZON_APPSTORE_RECEIPT.END_DATE,
15:40:02  30  	  AMAZON_APPSTORE_RECEIPT.SKU,
15:40:02  31  	  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
15:40:02  32  	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
15:40:02  33  	  AMAZON_APPSTORE_RECEIPT.CREATED_BY,
15:40:02  34  	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
15:40:02  35  	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
15:40:02  36  	  AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
15:40:02  37  	INTO
15:40:02  38  	  var_id,
15:40:02  39  	  var_subscription_id,
15:40:02  40  	  var_user_id,
15:40:02  41  	  var_item_type,
15:40:02  42  	  var_start_date,
15:40:02  43  	  var_end_date,
15:40:02  44  	  var_sku,
15:40:02  45  	  var_purchase_token,
15:40:02  46  	  var_create_date,
15:40:02  47  	  var_created_by,
15:40:02  48  	  var_update_date,
15:40:02  49  	  var_updated_by,
15:40:02  50  	  var_last_check_date
15:40:02  51  	FROM
15:40:02  52  	  AMAZON_APPSTORE_RECEIPT
15:40:02  53  	WHERE
15:40:02  54  	  AMAZON_APPSTORE_RECEIPT.ID = in_id;
15:40:02  55  
15:40:02  56  	CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_AASR_HISTORY(
15:40:02  57  	    var_id,
15:40:02  58  	    var_subscription_id,
15:40:02  59  	    var_user_id,
15:40:02  60  	    var_item_type,
15:40:02  61  	    var_start_date,
15:40:02  62  	    var_end_date,
15:40:02  63  	    var_sku,
15:40:02  64  	    var_purchase_token,
15:40:02  65  	    var_create_date,
15:40:02  66  	    var_created_by,
15:40:02  67  	    var_update_date,
15:40:02  68  	    var_updated_by,
15:40:02  69  	    in_system_activity_reason_id,
15:40:02  70  	    in_created_by,
15:40:02  71  	    var_last_check_date
15:40:02  72  	);
15:40:02  73  END CREATE_AASR_HISTORY;
15:40:02  74  
15:40:02  75  PROCEDURE CREATE_ADDRESS_HISTORY(
15:40:02  76  	in_address_id		     IN NUMBER,
15:40:02  77  	in_system_activity_reason_id IN NUMBER
15:40:02  78  ) AS
15:40:02  79  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
15:40:02  80  -- VARIABLES
15:40:02  81  var_address1    ADDRESS.ADDRESS1%TYPE;
15:40:02  82  var_address2    ADDRESS.ADDRESS2%TYPE;
15:40:02  83  var_city	      ADDRESS.CITY%TYPE;
15:40:02  84  var_state       ADDRESS.STATE%TYPE;
15:40:02  85  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
15:40:02  86  var_country     ADDRESS.COUNTRY%TYPE;
15:40:02  87  var_created_by  ADDRESS.CREATED_BY%TYPE;
15:40:02  88  var_create_date ADDRESS.CREATE_DATE%TYPE;
15:40:02  89  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
15:40:02  90  var_update_date ADDRESS.UPDATE_DATE%TYPE;
15:40:02  91  -- EXCEPTIONS
15:40:02  92  BAD_ADDRESS_ID	     EXCEPTION;
15:40:02  93  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:40:02  94  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02  95  BEGIN
15:40:02  96  
15:40:02  97  	BEGIN
15:40:02  98  	  SELECT
15:40:02  99  	    ADDRESS.ADDRESS1,
15:40:02 100  	    ADDRESS.ADDRESS2,
15:40:02 101  	    ADDRESS.CITY,
15:40:02 102  	    ADDRESS.STATE,
15:40:02 103  	    ADDRESS.POSTAL_CODE,
15:40:02 104  	    ADDRESS.COUNTRY,
15:40:02 105  	    ADDRESS.CREATED_BY,
15:40:02 106  	    ADDRESS.CREATE_DATE,
15:40:02 107  	    ADDRESS.UPDATED_BY,
15:40:02 108  	    ADDRESS.UPDATE_DATE
15:40:02 109  	    into
15:40:02 110  	    var_address1,
15:40:02 111  	    var_address2,
15:40:02 112  	    var_city,
15:40:02 113  	    var_state,
15:40:02 114  	    var_postal_code,
15:40:02 115  	    var_country,
15:40:02 116  	    var_created_by,
15:40:02 117  	    var_create_date,
15:40:02 118  	    var_updated_by,
15:40:02 119  	    var_update_date
15:40:02 120  	  FROM
15:40:02 121  	    ADDRESS
15:40:02 122  	  WHERE
15:40:02 123  	    ADDRESS.ID = in_address_id;
15:40:02 124  	  EXCEPTION
15:40:02 125  	    WHEN NO_DATA_FOUND THEN
15:40:02 126  	      RAISE BAD_ADDRESS_ID;
15:40:02 127  	END;
15:40:02 128  
15:40:02 129  	BEGIN
15:40:02 130  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_ADDRESS_HISTORY(
15:40:02 131  	    in_address_id,
15:40:02 132  	    in_system_activity_reason_id,
15:40:02 133  	    var_address1,
15:40:02 134  	    var_address2,
15:40:02 135  	    var_city,
15:40:02 136  	    var_state,
15:40:02 137  	    var_postal_code,
15:40:02 138  	    var_country,
15:40:02 139  	    var_created_by,
15:40:02 140  	    var_create_date,
15:40:02 141  	    var_updated_by,
15:40:02 142  	    var_update_date
15:40:02 143  	  );
15:40:02 144  	  EXCEPTION
15:40:02 145  	    WHEN OTHERS THEN
15:40:02 146  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 147  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 148  	END;
15:40:02 149  
15:40:02 150  EXCEPTION
15:40:02 151  WHEN BAD_ADDRESS_ID THEN
15:40:02 152  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 153  	  SPROC_NAME, 'Bad recipientAddress id');
15:40:02 154  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 155  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 156  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 157  WHEN OTHERS THEN
15:40:02 158  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 159  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 160  END CREATE_ADDRESS_HISTORY;
15:40:02 161  
15:40:02 162  /********************************************************************/
15:40:02 163  
15:40:02 164  PROCEDURE CREATE_ACCOUNT_HISTORY(
15:40:02 165  	in_account_id		     IN NUMBER,
15:40:02 166  	in_system_activity_reason_id IN NUMBER
15:40:02 167  ) AS
15:40:02 168  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
15:40:02 169  -- VARIABLES
15:40:02 170  var_account_status_id  NUMBER;
15:40:02 171  var_suspend_date	     DATE;
15:40:02 172  var_group_id	     NUMBER;
15:40:02 173  var_instrument_type_id NUMBER;
15:40:02 174  var_instrument_id      NUMBER;
15:40:02 175  var_updated_by	     VARCHAR2(255);
15:40:02 176  var_update_date	     DATE;
15:40:02 177  -- EXCEPTIONS
15:40:02 178  BAD_ACCOUNT_ID	     EXCEPTION;
15:40:02 179  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:40:02 180  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 181  BEGIN
15:40:02 182  
15:40:02 183  	BEGIN
15:40:02 184  	  SELECT
15:40:02 185  	    ACCOUNT.ACCOUNT_STATUS_ID,
15:40:02 186  	    ACCOUNT.GROUP_ID,
15:40:02 187  	    ACCOUNT.INSTRUMENT_TYPE_ID,
15:40:02 188  	    ACCOUNT.INSTRUMENT_ID,
15:40:02 189  	    ACCOUNT.UPDATED_BY,
15:40:02 190  	    ACCOUNT.UPDATE_DATE
15:40:02 191  	    into
15:40:02 192  	    var_account_status_id,
15:40:02 193  	    var_group_id,
15:40:02 194  	    var_instrument_type_id,
15:40:02 195  	    var_instrument_id,
15:40:02 196  	    var_updated_by,
15:40:02 197  	    var_update_date
15:40:02 198  	  FROM
15:40:02 199  	    ACCOUNT
15:40:02 200  	  WHERE
15:40:02 201  	    ACCOUNT.ID = in_account_id;
15:40:02 202  	  EXCEPTION
15:40:02 203  	    WHEN NO_DATA_FOUND THEN
15:40:02 204  	      RAISE BAD_ACCOUNT_ID;
15:40:02 205  	END;
15:40:02 206  
15:40:02 207  	BEGIN
15:40:02 208  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_ACCOUNT_HISTORY(
15:40:02 209  	    in_account_id,
15:40:02 210  	    var_suspend_date,
15:40:02 211  	    var_group_id,
15:40:02 212  	    var_updated_by,
15:40:02 213  	    var_update_date,
15:40:02 214  	    in_system_activity_reason_id,
15:40:02 215  	    var_account_status_id,
15:40:02 216  	    var_instrument_type_id,
15:40:02 217  	    var_instrument_id
15:40:02 218  	  );
15:40:02 219  	  EXCEPTION
15:40:02 220  	    WHEN OTHERS THEN
15:40:02 221  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 222  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 223  	END;
15:40:02 224  
15:40:02 225  EXCEPTION
15:40:02 226  WHEN BAD_ACCOUNT_ID THEN
15:40:02 227  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 228  	  SPROC_NAME, 'Bad account id');
15:40:02 229  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 230  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 231  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 232  WHEN OTHERS THEN
15:40:02 233  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 234  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 235  END CREATE_ACCOUNT_HISTORY;
15:40:02 236  
15:40:02 237  /********************************************************************/
15:40:02 238  
15:40:02 239  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
15:40:02 240  	in_subscription_id	     IN NUMBER,
15:40:02 241  	in_system_activity_reason_id IN NUMBER
15:40:02 242  ) AS
15:40:02 243  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
15:40:02 244  -- VARIABLES
15:40:02 245  var_account_id		    NUMBER;
15:40:02 246  var_purchase_date 	    DATE;
15:40:02 247  var_offer_chain_id	    NUMBER;
15:40:02 248  var_suspend_date		    DATE;
15:40:02 249  var_termination_date	    DATE;
15:40:02 250  var_days_ramaining_adjustment NUMBER;
15:40:02 251  var_sct_id		    NUMBER;
15:40:02 252  var_updated_by		    VARCHAR2(255);
15:40:02 253  var_update_date		    DATE;
15:40:02 254  -- EXCEPTIONS
15:40:02 255  BAD_SUBSCRIPTION_ID    EXCEPTION;
15:40:02 256  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:40:02 257  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 258  BEGIN
15:40:02 259  
15:40:02 260  	BEGIN
15:40:02 261  	  SELECT
15:40:02 262  	    SUBSCRIPTION.account_id,
15:40:02 263  	    SUBSCRIPTION.PURCHASE_DATE,
15:40:02 264  	    SUBSCRIPTION.OFFER_CHAIN_ID,
15:40:02 265  	    SUBSCRIPTION.SUSPEND_DATE,
15:40:02 266  	    SUBSCRIPTION.TERMINATION_DATE,
15:40:02 267  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
15:40:02 268  	    SUBSCRIPTION.SCT_ID,
15:40:02 269  	    SUBSCRIPTION.UPDATED_BY,
15:40:02 270  	    SUBSCRIPTION.UPDATE_DATE
15:40:02 271  	    into
15:40:02 272  	    var_account_id,
15:40:02 273  	    var_purchase_date,
15:40:02 274  	    var_offer_chain_id,
15:40:02 275  	    var_suspend_date,
15:40:02 276  	    var_termination_date,
15:40:02 277  	    var_days_ramaining_adjustment,
15:40:02 278  	    var_sct_id,
15:40:02 279  	    var_updated_by,
15:40:02 280  	    var_update_date
15:40:02 281  	  FROM
15:40:02 282  	    SUBSCRIPTION
15:40:02 283  	  WHERE
15:40:02 284  	    SUBSCRIPTION.ID = in_subscription_id;
15:40:02 285  	  EXCEPTION
15:40:02 286  	    WHEN NO_DATA_FOUND THEN
15:40:02 287  	      RAISE BAD_SUBSCRIPTION_ID;
15:40:02 288  	END;
15:40:02 289  
15:40:02 290  	BEGIN
15:40:02 291  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_SUBSCRIPTION_HISTORY(
15:40:02 292  	    in_subscription_id,
15:40:02 293  	    var_account_id,
15:40:02 294  	    var_purchase_date,
15:40:02 295  	    var_offer_chain_id,
15:40:02 296  	    var_suspend_date,
15:40:02 297  	    var_termination_date,
15:40:02 298  	    var_days_ramaining_adjustment,
15:40:02 299  	    var_sct_id,
15:40:02 300  	    var_updated_by,
15:40:02 301  	    var_update_date,
15:40:02 302  	    in_system_activity_reason_id
15:40:02 303  	  );
15:40:02 304  	  EXCEPTION
15:40:02 305  	    WHEN OTHERS THEN
15:40:02 306  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 307  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 308  	END;
15:40:02 309  
15:40:02 310  EXCEPTION
15:40:02 311  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:02 312  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 313  	  SPROC_NAME, 'No such subscription');
15:40:02 314  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 315  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 316  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 317  WHEN OTHERS THEN
15:40:02 318  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 320  END CREATE_SUBSCRIPTION_HISTORY;
15:40:02 321  
15:40:02 322  /********************************************************************/
15:40:02 323  
15:40:02 324  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
15:40:02 325  	in_credit_card_id	      IN NUMBER,
15:40:02 326  	in_system_activity_reason_id  IN NUMBER
15:40:02 327  ) AS
15:40:02 328  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
15:40:02 329  -- VARIABLES
15:40:02 330  var_account_id		     NUMBER;
15:40:02 331  var_instrument_name	     VARCHAR2(255);
15:40:02 332  var_private_card_holder_name   VARCHAR2(256);
15:40:02 333  var_private_street_address     VARCHAR2(256);
15:40:02 334  var_private_street_address2    VARCHAR2(256);
15:40:02 335  var_state 		     VARCHAR2(50);
15:40:02 336  var_city			     VARCHAR2(50);
15:40:02 337  var_postal_code		     VARCHAR2(20);
15:40:02 338  var_country		     CHAR(2);
15:40:02 339  var_last_four_cc		     VARCHAR2(4);
15:40:02 340  var_expiration_date	     DATE;
15:40:02 341  var_credit_card_type_id	     NUMBER;
15:40:02 342  var_secret_token		     VARCHAR2(255);
15:40:02 343  var_chase_profile_id	     VARCHAR2(255);
15:40:02 344  var_credit_card_status_id      NUMBER;
15:40:02 345  var_updated_by		     VARCHAR2(255);
15:40:02 346  var_update_date		     DATE;
15:40:02 347  -- EXCEPTIONS
15:40:02 348  BAD_CREDIT_CARD_ID     EXCEPTION;
15:40:02 349  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:40:02 350  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 351  BEGIN
15:40:02 352  
15:40:02 353  	BEGIN
15:40:02 354  	  SELECT
15:40:02 355  	    ACCOUNT_ID,
15:40:02 356  	    INSTRUMENT_NAME,
15:40:02 357  	    PRIVATE_CARD_HOLDER_NAME,
15:40:02 358  	    PRIVATE_STREET_ADDRESS,
15:40:02 359  	    PRIVATE_STREET_ADDRESS2,
15:40:02 360  	    STATE,
15:40:02 361  	    CITY,
15:40:02 362  	    POSTAL_CODE,
15:40:02 363  	    COUNTRY,
15:40:02 364  	    LAST_FOUR_CC,
15:40:02 365  	    EXPIRATION_DATE,
15:40:02 366  	    CREDIT_CARD_TYPE_ID,
15:40:02 367  	    SECRET_TOKEN,
15:40:02 368  	    CHASE_PROFILE_ID,
15:40:02 369  	    CREDIT_CARD_STATUS_ID,
15:40:02 370  	    UPDATED_BY,
15:40:02 371  	    UPDATE_DATE
15:40:02 372  	    into
15:40:02 373  	    var_account_id,
15:40:02 374  	    var_instrument_name,
15:40:02 375  	    var_private_card_holder_name,
15:40:02 376  	    var_private_street_address,
15:40:02 377  	    var_private_street_address2,
15:40:02 378  	    var_state,
15:40:02 379  	    var_city,
15:40:02 380  	    var_postal_code,
15:40:02 381  	    var_country,
15:40:02 382  	    var_last_four_cc,
15:40:02 383  	    var_expiration_date,
15:40:02 384  	    var_credit_card_type_id,
15:40:02 385  	    var_secret_token,
15:40:02 386  	    var_chase_profile_id,
15:40:02 387  	    var_credit_card_status_id,
15:40:02 388  	    var_updated_by,
15:40:02 389  	    var_update_date
15:40:02 390  	  FROM
15:40:02 391  	    CREDIT_CARD
15:40:02 392  	  WHERE
15:40:02 393  	    CREDIT_CARD.ID = in_credit_card_id;
15:40:02 394  	  EXCEPTION
15:40:02 395  	    WHEN NO_DATA_FOUND THEN
15:40:02 396  	      RAISE BAD_CREDIT_CARD_ID;
15:40:02 397  	END;
15:40:02 398  
15:40:02 399  	BEGIN
15:40:02 400  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_CREDIT_CARD_HISTORY(
15:40:02 401  	    in_credit_card_id,
15:40:02 402  	    var_account_id,
15:40:02 403  	    var_instrument_name,
15:40:02 404  	    var_private_card_holder_name,
15:40:02 405  	    var_private_street_address,
15:40:02 406  	    var_private_street_address2,
15:40:02 407  	    var_state,
15:40:02 408  	    var_city,
15:40:02 409  	    var_postal_code,
15:40:02 410  	    var_country,
15:40:02 411  	    var_last_four_cc,
15:40:02 412  	    var_expiration_date,
15:40:02 413  	    var_credit_card_type_id,
15:40:02 414  	    var_secret_token,
15:40:02 415  	    var_chase_profile_id,
15:40:02 416  	    var_credit_card_status_id,
15:40:02 417  	    var_updated_by,
15:40:02 418  	    var_update_date,
15:40:02 419  	    in_system_activity_reason_id
15:40:02 420  	  );
15:40:02 421  	  EXCEPTION
15:40:02 422  	    WHEN OTHERS THEN
15:40:02 423  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 424  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 425  	END;
15:40:02 426  
15:40:02 427  EXCEPTION
15:40:02 428  WHEN BAD_CREDIT_CARD_ID THEN
15:40:02 429  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 430  	  SPROC_NAME, 'No such credit card');
15:40:02 431  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 432  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 433  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 434  WHEN OTHERS THEN
15:40:02 435  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 437  END CREATE_CREDIT_CARD_HISTORY;
15:40:02 438  
15:40:02 439  /********************************************************************/
15:40:02 440  
15:40:02 441  PROCEDURE CREATE_PAYPAL_HISTORY(
15:40:02 442  /*
15:40:02 443  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:02 444  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 445  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:02 446  */
15:40:02 447  	in_paypal_id		      IN NUMBER,
15:40:02 448  	in_system_activity_reason_id  IN NUMBER
15:40:02 449  ) AS
15:40:02 450  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
15:40:02 451  -- VARIABLES
15:40:02 452  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
15:40:02 453  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
15:40:02 454  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
15:40:02 455  var_created_by		   PAYPAL.CREATED_BY%TYPE;
15:40:02 456  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
15:40:02 457  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
15:40:02 458  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
15:40:02 459  var_state 		   PAYPAL.STATE%TYPE;
15:40:02 460  var_city			   PAYPAL.CITY%TYPE;
15:40:02 461  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
15:40:02 462  var_country		   PAYPAL.COUNTRY%TYPE;
15:40:02 463  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
15:40:02 464  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
15:40:02 465  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
15:40:02 466  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
15:40:02 467  -- EXCEPTION
15:40:02 468  BAD_PAYPAL_ID	  EXCEPTION;
15:40:02 469  CAN_NOT_ADD_HISTORY EXCEPTION;
15:40:02 470  EXCEPTION_MESSAGE   VARCHAR2(1024);
15:40:02 471  BEGIN
15:40:02 472  
15:40:02 473  	BEGIN
15:40:02 474  	  SELECT
15:40:02 475  	    ACCOUNT_ID,
15:40:02 476  	    INSTRUMENT_NAME,
15:40:02 477  	    PRIVATE_EMAIL_ADDRESS,
15:40:02 478  	    UPDATE_DATE,
15:40:02 479  	    UPDATED_BY,
15:40:02 480  	    PAYPAL_STATUS_ID,
15:40:02 481  	    PRIVATE_STREET_ADDRESS,
15:40:02 482  	    PRIVATE_STREET_ADDRESS2,
15:40:02 483  	    STATE,
15:40:02 484  	    CITY,
15:40:02 485  	    POSTAL_CODE,
15:40:02 486  	    COUNTRY,
15:40:02 487  	    EXPIRATION_DATE,
15:40:02 488  	    SECRET_TOKEN
15:40:02 489  	  INTO
15:40:02 490  	    var_account_id,
15:40:02 491  	    var_instrument_name,
15:40:02 492  	    var_private_email_address,
15:40:02 493  	    var_update_date,
15:40:02 494  	    var_updated_by,
15:40:02 495  	    var_paypal_status_id,
15:40:02 496  	    var_paypal_prvt_street_addr,
15:40:02 497  	    var_paypal_prvt_street_addr2,
15:40:02 498  	    var_state,
15:40:02 499  	    var_city,
15:40:02 500  	    var_postal_code,
15:40:02 501  	    var_country,
15:40:02 502  	    var_expiration_date,
15:40:02 503  	    var_secret_token
15:40:02 504  	  FROM
15:40:02 505  	    PAYPAL
15:40:02 506  	  WHERE
15:40:02 507  	    ID = in_paypal_id;
15:40:02 508  	  EXCEPTION
15:40:02 509  	    WHEN NO_DATA_FOUND THEN
15:40:02 510  	      RAISE BAD_PAYPAL_ID;
15:40:02 511  	END;
15:40:02 512  
15:40:02 513  	BEGIN
15:40:02 514  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_PAYPAL_HISTORY(
15:40:02 515  	    in_paypal_id,
15:40:02 516  	    var_account_id,
15:40:02 517  	    var_instrument_name,
15:40:02 518  	    var_private_email_address,
15:40:02 519  	    var_updated_by,
15:40:02 520  	    var_update_date,
15:40:02 521  	    var_paypal_status_id,
15:40:02 522  	    var_paypal_prvt_street_addr,
15:40:02 523  	    var_paypal_prvt_street_addr2,
15:40:02 524  	    var_state,
15:40:02 525  	    var_city,
15:40:02 526  	    var_postal_code,
15:40:02 527  	    var_country,
15:40:02 528  	    var_expiration_date,
15:40:02 529  	    in_system_activity_reason_id,
15:40:02 530  	    var_secret_token
15:40:02 531  	  );
15:40:02 532  	  EXCEPTION
15:40:02 533  	    WHEN OTHERS THEN
15:40:02 534  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 535  	      RAISE CAN_NOT_ADD_HISTORY;
15:40:02 536  	END;
15:40:02 537  
15:40:02 538  EXCEPTION
15:40:02 539  WHEN BAD_PAYPAL_ID THEN
15:40:02 540  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 541  	  SPROC_NAME, 'No such paypal');
15:40:02 542  WHEN CAN_NOT_ADD_HISTORY THEN
15:40:02 543  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 544  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
15:40:02 545  WHEN OTHERS THEN
15:40:02 546  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 547  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 548  END CREATE_PAYPAL_HISTORY;
15:40:02 549  
15:40:02 550  /********************************************************************/
15:40:02 551  
15:40:02 552  PROCEDURE CREATE_GIFT_CERT_HISTORY(
15:40:02 553  	in_gift_certificate_id	      IN NUMBER,
15:40:02 554  	in_system_activity_reason_id  IN NUMBER
15:40:02 555  ) AS
15:40:02 556  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
15:40:02 557  -- VARIABLES
15:40:02 558  var_purchaser_group_id	     NUMBER;
15:40:02 559  var_purchase_invoice_id	     NUMBER;
15:40:02 560  var_offer_chain_id	     NUMBER;
15:40:02 561  var_expiration_date	     DATE;
15:40:02 562  var_purchase_date 	     DATE;
15:40:02 563  var_gift_certificate_status_id NUMBER;
15:40:02 564  var_code			     VARCHAR2(255);
15:40:02 565  var_recipient_name	     VARCHAR2(255);
15:40:02 566  var_gift_message		     VARCHAR2(500);
15:40:02 567  var_recipient_email	     VARCHAR2(255);
15:40:02 568  var_finalized_invoice_id	     NUMBER;
15:40:02 569  var_sender_email		     VARCHAR2(50);
15:40:02 570  var_sender_name		     VARCHAR2(50);
15:40:02 571  var_redemption_date	     DATE;
15:40:02 572  var_redeemer_group_id	     NUMBER;
15:40:02 573  var_cancelation_date	     DATE;
15:40:02 574  var_updated_by		     VARCHAR2(255);
15:40:02 575  var_update_date		     DATE;
15:40:02 576  var_recipient_address_id	     NUMBER;
15:40:02 577  var_redeemer_address_id	     NUMBER;
15:40:02 578  var_recipient_notify_date      DATE;
15:40:02 579  -- EXCEPTIONS
15:40:02 580  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
15:40:02 581  CAN_NOT_CREATE_HISTORY  EXCEPTION;
15:40:02 582  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:40:02 583  BEGIN
15:40:02 584  
15:40:02 585  	BEGIN
15:40:02 586  	  SELECT
15:40:02 587  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
15:40:02 588  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
15:40:02 589  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
15:40:02 590  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
15:40:02 591  	    GIFT_CERTIFICATE.PURCHASE_DATE,
15:40:02 592  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
15:40:02 593  	    GIFT_CERTIFICATE.CODE,
15:40:02 594  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
15:40:02 595  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
15:40:02 596  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
15:40:02 597  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
15:40:02 598  	    GIFT_CERTIFICATE.SENDER_EMAIL,
15:40:02 599  	    GIFT_CERTIFICATE.SENDER_NAME,
15:40:02 600  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
15:40:02 601  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
15:40:02 602  	    GIFT_CERTIFICATE.CANCELATION_DATE,
15:40:02 603  	    GIFT_CERTIFICATE.UPDATED_BY,
15:40:02 604  	    GIFT_CERTIFICATE.UPDATE_DATE,
15:40:02 605  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
15:40:02 606  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
15:40:02 607  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
15:40:02 608  	    into
15:40:02 609  	    var_purchaser_group_id,
15:40:02 610  	    var_purchase_invoice_id,
15:40:02 611  	    var_offer_chain_id,
15:40:02 612  	    var_expiration_date,
15:40:02 613  	    var_purchase_date,
15:40:02 614  	    var_gift_certificate_status_id,
15:40:02 615  	    var_code,
15:40:02 616  	    var_recipient_name,
15:40:02 617  	    var_gift_message,
15:40:02 618  	    var_recipient_email,
15:40:02 619  	    var_finalized_invoice_id,
15:40:02 620  	    var_sender_email,
15:40:02 621  	    var_sender_name,
15:40:02 622  	    var_redemption_date,
15:40:02 623  	    var_redeemer_group_id,
15:40:02 624  	    var_cancelation_date,
15:40:02 625  	    var_updated_by,
15:40:02 626  	    var_update_date,
15:40:02 627  	    var_recipient_address_id,
15:40:02 628  	    var_redeemer_address_id,
15:40:02 629  	    var_recipient_notify_date
15:40:02 630  	  FROM
15:40:02 631  	    GIFT_CERTIFICATE
15:40:02 632  	  WHERE
15:40:02 633  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
15:40:02 634  	END;
15:40:02 635  
15:40:02 636  	BEGIN
15:40:02 637  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_GIFT_CERT_HISTORY(
15:40:02 638  	    in_gift_certificate_id,
15:40:02 639  	    var_purchaser_group_id,
15:40:02 640  	    var_purchase_invoice_id,
15:40:02 641  	    var_offer_chain_id,
15:40:02 642  	    var_expiration_date,
15:40:02 643  	    var_purchase_date,
15:40:02 644  	    var_gift_certificate_status_id,
15:40:02 645  	    var_code,
15:40:02 646  	    var_updated_by,
15:40:02 647  	    var_update_date,
15:40:02 648  	    in_system_activity_reason_id,
15:40:02 649  	    var_recipient_name,
15:40:02 650  	    var_gift_message,
15:40:02 651  	    var_recipient_email,
15:40:02 652  	    var_finalized_invoice_id,
15:40:02 653  	    var_sender_email,
15:40:02 654  	    var_sender_name,
15:40:02 655  	    var_redemption_date,
15:40:02 656  	    var_redeemer_group_id,
15:40:02 657  	    var_cancelation_date,
15:40:02 658  	    var_recipient_address_id,
15:40:02 659  	    var_redeemer_address_id,
15:40:02 660  	    var_recipient_notify_date
15:40:02 661  	  );
15:40:02 662  	  EXCEPTION
15:40:02 663  	    WHEN OTHERS THEN
15:40:02 664  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 665  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 666  	END;
15:40:02 667  
15:40:02 668  EXCEPTION
15:40:02 669  WHEN BAD_GIFT_CERTIFICATE_ID THEN
15:40:02 670  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 671  	  SPROC_NAME, 'No such gift certificate');
15:40:02 672  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 673  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 674  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 675  WHEN OTHERS THEN
15:40:02 676  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 677  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 678  END CREATE_GIFT_CERT_HISTORY;
15:40:02 679  
15:40:02 680  /********************************************************************/
15:40:02 681  
15:40:02 682  PROCEDURE CREATE_TRANSACTION_HISTORY (
15:40:02 683  	in_transaction_id	     IN NUMBER,
15:40:02 684  	in_system_activity_reason_id IN NUMBER
15:40:02 685  ) AS
15:40:02 686  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
15:40:02 687  -- VARIABLES
15:40:02 688  var_transaction_status_id  TRANSACTION.TRANSACTION_STATUS_ID%TYPE;
15:40:02 689  var_transaction_amount	 TRANSACTION.TRANSACTION_AMOUNT%TYPE;
15:40:02 690  var_updated_by		 TRANSACTION.UPDATED_BY%TYPE;
15:40:02 691  var_update_date		 TRANSACTION.UPDATE_DATE%TYPE;
15:40:02 692  var_order_id		 TRANSACTION.ORDER_ID%TYPE;
15:40:02 693  var_charge_id		 TRANSACTION.CHARGE_ID%TYPE;
15:40:02 694  var_is_refund		 TRANSACTION.IS_REFUND%TYPE;
15:40:02 695  var_is_settled		 TRANSACTION.IS_SETTLED%TYPE;
15:40:02 696  var_transaction_type_code  TRANSACTION.TRANSACTION_TYPE_CODE%TYPE;
15:40:02 697  -- EXCEPTIONS
15:40:02 698  BAD_TRANSACTION_ID     EXCEPTION;
15:40:02 699  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:40:02 700  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 701  BEGIN
15:40:02 702  
15:40:02 703  	BEGIN
15:40:02 704  	  SELECT
15:40:02 705  	    TRANSACTION.TRANSACTION_STATUS_ID,
15:40:02 706  	    TRANSACTION.TRANSACTION_AMOUNT,
15:40:02 707  	    TRANSACTION.UPDATED_BY,
15:40:02 708  	    TRANSACTION.UPDATE_DATE,
15:40:02 709  	    TRANSACTION.ORDER_ID,
15:40:02 710  	    TRANSACTION.CHARGE_ID,
15:40:02 711  	    TRANSACTION.IS_REFUND,
15:40:02 712  	    TRANSACTION.IS_SETTLED,
15:40:02 713  	    TRANSACTION.TRANSACTION_TYPE_CODE
15:40:02 714  	    into
15:40:02 715  	    var_transaction_status_id,
15:40:02 716  	    var_transaction_amount,
15:40:02 717  	    var_updated_by,
15:40:02 718  	    var_update_date,
15:40:02 719  	    var_order_id,
15:40:02 720  	    var_charge_id,
15:40:02 721  	    var_is_refund,
15:40:02 722  	    var_is_settled,
15:40:02 723  	    var_transaction_type_code
15:40:02 724  	  FROM
15:40:02 725  	    TRANSACTION
15:40:02 726  	  WHERE
15:40:02 727  	    TRANSACTION.ID = in_transaction_id;
15:40:02 728  	  EXCEPTION
15:40:02 729  	    WHEN NO_DATA_FOUND THEN
15:40:02 730  	      RAISE BAD_TRANSACTION_ID;
15:40:02 731  	END;
15:40:02 732  
15:40:02 733  	BEGIN
15:40:02 734  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_TRANSACTION_HISTORY(
15:40:02 735  	    in_transaction_id,
15:40:02 736  	    var_transaction_status_id,
15:40:02 737  	    var_transaction_amount,
15:40:02 738  	    var_updated_by,
15:40:02 739  	    var_update_date,
15:40:02 740  	    var_order_id,
15:40:02 741  	    var_charge_id,
15:40:02 742  	    var_is_refund,
15:40:02 743  	    var_is_settled,
15:40:02 744  	    var_transaction_type_code,
15:40:02 745  	    in_system_activity_reason_id
15:40:02 746  	  );
15:40:02 747  	  EXCEPTION
15:40:02 748  	    WHEN OTHERS THEN
15:40:02 749  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 750  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 751  	END;
15:40:02 752  
15:40:02 753  EXCEPTION
15:40:02 754  WHEN BAD_TRANSACTION_ID THEN
15:40:02 755  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 756  	  SPROC_NAME, 'No such transaction');
15:40:02 757  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 758  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 759  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 760  WHEN OTHERS THEN
15:40:02 761  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 762  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 763  END CREATE_TRANSACTION_HISTORY;
15:40:02 764  
15:40:02 765  /********************************************************************/
15:40:02 766  
15:40:02 767  PROCEDURE CREATE_INVOICE_HISTORY (
15:40:02 768  /*
15:40:02 769  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:02 770  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 771  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:02 772  */
15:40:02 773  	in_invoice_id		     IN NUMBER,
15:40:02 774  	in_system_activity_reason_id IN NUMBER
15:40:02 775  ) AS
15:40:02 776  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
15:40:02 777  -- VARIABLES
15:40:02 778  var_invoice_status_id NUMBER;
15:40:02 779  var_updated_by	    VARCHAR2(255);
15:40:02 780  var_update_date	    DATE;
15:40:02 781  -- EXCEPTIONS
15:40:02 782  BAD_INVOICE_ID	     EXCEPTION;
15:40:02 783  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:40:02 784  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 785  BEGIN
15:40:02 786  
15:40:02 787  	BEGIN
15:40:02 788  	  SELECT
15:40:02 789  	    INVOICE.INVOICE_STATUS_ID,
15:40:02 790  	    INVOICE.UPDATED_BY,
15:40:02 791  	    INVOICE.UPDATE_DATE
15:40:02 792  	    into
15:40:02 793  	    var_invoice_status_id,
15:40:02 794  	    var_updated_by,
15:40:02 795  	    var_update_date
15:40:02 796  	  FROM
15:40:02 797  	    INVOICE
15:40:02 798  	  WHERE
15:40:02 799  	    INVOICE.ID = in_invoice_id;
15:40:02 800  	  EXCEPTION
15:40:02 801  	    WHEN NO_DATA_FOUND THEN
15:40:02 802  	      RAISE BAD_INVOICE_ID;
15:40:02 803  	END;
15:40:02 804  
15:40:02 805  	BEGIN
15:40:02 806  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_INVOICE_HISTORY(
15:40:02 807  	    in_invoice_id,
15:40:02 808  	    var_invoice_status_id,
15:40:02 809  	    var_updated_by,
15:40:02 810  	    var_update_date,
15:40:02 811  	    in_system_activity_reason_id
15:40:02 812  	  );
15:40:02 813  	  EXCEPTION
15:40:02 814  	    WHEN OTHERS THEN
15:40:02 815  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 816  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 817  	END;
15:40:02 818  
15:40:02 819  EXCEPTION
15:40:02 820  WHEN BAD_INVOICE_ID THEN
15:40:02 821  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 822  	  SPROC_NAME, 'No such invoice');
15:40:02 823  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 824  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 825  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 826  WHEN OTHERS THEN
15:40:02 827  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 828  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 829  END CREATE_INVOICE_HISTORY;
15:40:02 830  
15:40:02 831  /********************************************************************/
15:40:02 832  
15:40:02 833  PROCEDURE CREATE_LICENSE_HISTORY (
15:40:02 834  /*
15:40:02 835  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:02 836  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 837  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:02 838  */
15:40:02 839  	in_license_id		     IN NUMBER,
15:40:02 840  	in_system_activity_reason_id IN NUMBER
15:40:02 841  ) AS
15:40:02 842  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
15:40:02 843  -- VARIABLES
15:40:02 844  var_license_status_id	    NUMBER;
15:40:02 845  var_needs_entitlements	    NUMBER;
15:40:02 846  var_start_date		    DATE;
15:40:02 847  var_offer_id		    NUMBER;
15:40:02 848  var_subscription_id	    NUMBER;
15:40:02 849  var_invoice_id		    NUMBER;
15:40:02 850  var_end_date		    DATE;
15:40:02 851  var_is_extension		    NUMBER;
15:40:02 852  var_current_offer_index	    NUMBER;
15:40:02 853  var_current_offer_recurr_num  NUMBER;
15:40:02 854  var_updated_by		    VARCHAR2(255);
15:40:02 855  var_update_date		    DATE;
15:40:02 856  var_entitlement_end_date	    DATE;
15:40:02 857  var_grace_start_date	    DATE;
15:40:02 858  var_grace_end_date	    DATE;
15:40:02 859  -- EXCEPTIONS
15:40:02 860  BAD_LICENSE_ID	     EXCEPTION;
15:40:02 861  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:40:02 862  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 863  BEGIN
15:40:02 864  
15:40:02 865  	BEGIN
15:40:02 866  	  SELECT
15:40:02 867  	    LICENSE.LICENSE_STATUS_ID,
15:40:02 868  	    LICENSE.NEEDS_ENTITLEMENTS,
15:40:02 869  	    LICENSE.START_DATE,
15:40:02 870  	    LICENSE.OFFER_ID,
15:40:02 871  	    LICENSE.SUBSCRIPTION_ID,
15:40:02 872  	    LICENSE.INVOICE_ID,
15:40:02 873  	    LICENSE.END_DATE,
15:40:02 874  	    LICENSE.IS_EXTENSION,
15:40:02 875  	    LICENSE.CURRENT_OFFER_INDEX,
15:40:02 876  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
15:40:02 877  	    LICENSE.UPDATED_BY,
15:40:02 878  	    LICENSE.UPDATE_DATE,
15:40:02 879  	    LICENSE.ENTITLEMENT_END_DATE,
15:40:02 880  	    LICENSE.GRACE_START_DATE,
15:40:02 881  	    LICENSE.GRACE_END_DATE
15:40:02 882  	    into
15:40:02 883  	    var_license_status_id,
15:40:02 884  	    var_needs_entitlements,
15:40:02 885  	    var_start_date,
15:40:02 886  	    var_offer_id,
15:40:02 887  	    var_subscription_id,
15:40:02 888  	    var_invoice_id,
15:40:02 889  	    var_end_date,
15:40:02 890  	    var_is_extension,
15:40:02 891  	    var_current_offer_index,
15:40:02 892  	    var_current_offer_recurr_num,
15:40:02 893  	    var_updated_by,
15:40:02 894  	    var_update_date,
15:40:02 895  	    var_entitlement_end_date,
15:40:02 896  	    var_grace_start_date,
15:40:02 897  	    var_grace_end_date
15:40:02 898  	  FROM
15:40:02 899  	    LICENSE
15:40:02 900  	  WHERE
15:40:02 901  	    LICENSE.ID = in_license_id;
15:40:02 902  	  EXCEPTION
15:40:02 903  	    WHEN NO_DATA_FOUND THEN
15:40:02 904  	      RAISE BAD_LICENSE_ID;
15:40:02 905  	END;
15:40:02 906  
15:40:02 907  	BEGIN
15:40:02 908  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_LICENSE_HISTORY(
15:40:02 909  	    in_license_id,
15:40:02 910  	    var_license_status_id,
15:40:02 911  	    var_needs_entitlements,
15:40:02 912  	    var_start_date,
15:40:02 913  	    var_offer_id,
15:40:02 914  	    var_subscription_id,
15:40:02 915  	    var_invoice_id,
15:40:02 916  	    var_end_date,
15:40:02 917  	    var_updated_by,
15:40:02 918  	    var_update_date,
15:40:02 919  	    var_is_extension,
15:40:02 920  	    var_current_offer_index,
15:40:02 921  	    var_current_offer_recurr_num,
15:40:02 922  	    in_system_activity_reason_id,
15:40:02 923  	    var_entitlement_end_date,
15:40:02 924  	    var_grace_start_date,
15:40:02 925  	    var_grace_end_date
15:40:02 926  	  );
15:40:02 927  	  EXCEPTION
15:40:02 928  	    WHEN OTHERS THEN
15:40:02 929  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:02 930  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 931  	END;
15:40:02 932  
15:40:02 933  EXCEPTION
15:40:02 934  WHEN BAD_LICENSE_ID THEN
15:40:02 935  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 936  	  SPROC_NAME, 'No such license');
15:40:02 937  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 938  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 939  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 940  WHEN OTHERS THEN
15:40:02 941  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 942  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 943  END CREATE_LICENSE_HISTORY;
15:40:02 944  
15:40:02 945  /********************************************************************/
15:40:02 946  
15:40:02 947  PROCEDURE CREATE_CHARGE_HISTORY (
15:40:02 948  /*
15:40:02 949  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:02 950  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 951  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:02 952  */
15:40:02 953  	in_charge_id		    IN NUMBER,
15:40:02 954  	in_system_activity_reason_id IN NUMBER
15:40:02 955  ) AS
15:40:02 956  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
15:40:02 957  -- VARIABLES
15:40:02 958  var_invoice_id	     NUMBER;
15:40:02 959  var_transaction_id     NUMBER;
15:40:02 960  var_instrument_type_id NUMBER;
15:40:02 961  var_instrument_id      NUMBER;
15:40:02 962  var_charge_amount      NUMBER;
15:40:02 963  var_charge_status_id   NUMBER;
15:40:02 964  var_updated_by	     VARCHAR2(255);
15:40:02 965  var_update_date	     DATE;
15:40:02 966  -- EXCEPTIONS
15:40:02 967  BAD_CHARGE_ID	     EXCEPTION;
15:40:02 968  CAN_NOT_CREATE_HISTORY EXCEPTION;
15:40:02 969  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 970  BEGIN
15:40:02 971  
15:40:02 972  	BEGIN
15:40:02 973  	  SELECT
15:40:02 974  	    CHARGE.INVOICE_ID,
15:40:02 975  	    CHARGE.TRANSACTION_ID,
15:40:02 976  	    CHARGE.INSTRUMENT_TYPE_ID,
15:40:02 977  	    CHARGE.INSTRUMENT_ID,
15:40:02 978  	    CHARGE.CHARGE_AMOUNT,
15:40:02 979  	    CHARGE.CHARGE_STATUS_ID,
15:40:02 980  	    CHARGE.UPDATED_BY,
15:40:02 981  	    CHARGE.UPDATE_DATE
15:40:02 982  	    into
15:40:02 983  	    var_invoice_id,
15:40:02 984  	    var_transaction_id,
15:40:02 985  	    var_instrument_type_id,
15:40:02 986  	    var_instrument_id,
15:40:02 987  	    var_charge_amount,
15:40:02 988  	    var_charge_status_id,
15:40:02 989  	    var_updated_by,
15:40:02 990  	    var_update_date
15:40:02 991  	  FROM
15:40:02 992  	    CHARGE
15:40:02 993  	  WHERE
15:40:02 994  	    CHARGE.ID = in_charge_id;
15:40:02 995  	  EXCEPTION
15:40:02 996  	    WHEN NO_DATA_FOUND THEN
15:40:02 997  	      RAISE BAD_CHARGE_ID;
15:40:02 998  	END;
15:40:02 999  
15:40:02 1000  	 BEGIN
15:40:02 1001  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_CHARGE_HISTORY (
15:40:02 1002  	     in_charge_id,
15:40:02 1003  	     var_invoice_id,
15:40:02 1004  	     var_transaction_id,
15:40:02 1005  	     var_instrument_type_id,
15:40:02 1006  	     var_instrument_id,
15:40:02 1007  	     var_charge_amount,
15:40:02 1008  	     var_updated_by,
15:40:02 1009  	     var_update_date,
15:40:02 1010  	     var_charge_status_id,
15:40:02 1011  	     in_system_activity_reason_id
15:40:02 1012  	   );
15:40:02 1013  	   EXCEPTION
15:40:02 1014  	     WHEN OTHERS THEN
15:40:02 1015  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:02 1016  	       RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 1017  	 END;
15:40:02 1018  
15:40:02 1019  EXCEPTION
15:40:02 1020  WHEN BAD_CHARGE_ID THEN
15:40:02 1021  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 1022  	   SPROC_NAME, 'No such license');
15:40:02 1023  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 1024  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 1025  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 1026  WHEN OTHERS THEN
15:40:02 1027  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 1028  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 1029  END CREATE_CHARGE_HISTORY;
15:40:02 1030  
15:40:02 1031  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
15:40:02 1032  /*
15:40:02 1033  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:02 1034  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 1035  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:02 1036  */
15:40:02 1037  	 in_invoice_adjustment_id  IN NUMBER,
15:40:02 1038  	 in_system_activity_reason_id IN NUMBER
15:40:02 1039  ) AS
15:40:02 1040  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
15:40:02 1041  --VARIABLED
15:40:02 1042  var_invoice_adj_id	   INVOICE_ADJUSTMENT.ID%TYPE;
15:40:02 1043  var_invoice_id		   INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
15:40:02 1044  var_is_credit		   INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
15:40:02 1045  var_charge_id		   INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
15:40:02 1046  var_adjustment_date	   INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
15:40:02 1047  var_create_date		   INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
15:40:02 1048  var_created_by		   INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
15:40:02 1049  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
15:40:02 1050  var_update_date		   INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
15:40:02 1051  var_updated_by		   INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
15:40:02 1052  BAD_INVOICE_ADJ_ID	   EXCEPTION;
15:40:02 1053  CAN_NOT_CREATE_HISTORY	   EXCEPTION;
15:40:02 1054  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02 1055  BEGIN
15:40:02 1056  
15:40:02 1057  	 BEGIN
15:40:02 1058  	   SELECT
15:40:02 1059  	     INVOICE_ADJUSTMENT.ID,
15:40:02 1060  	     INVOICE_ADJUSTMENT.INVOICE_ID,
15:40:02 1061  	     INVOICE_ADJUSTMENT.IS_CREDIT,
15:40:02 1062  	     INVOICE_ADJUSTMENT.CHARGE_ID,
15:40:02 1063  	     INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
15:40:02 1064  	     INVOICE_ADJUSTMENT.CREATE_DATE,
15:40:02 1065  	     INVOICE_ADJUSTMENT.CREATED_BY,
15:40:02 1066  	     INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
15:40:02 1067  	     INVOICE_ADJUSTMENT.UPDATE_DATE,
15:40:02 1068  	     INVOICE_ADJUSTMENT.UPDATED_BY
15:40:02 1069  	     into
15:40:02 1070  	     var_invoice_adj_id,
15:40:02 1071  	     var_invoice_id,
15:40:02 1072  	     var_is_credit,
15:40:02 1073  	     var_charge_id,
15:40:02 1074  	     var_adjustment_date,
15:40:02 1075  	     var_create_date,
15:40:02 1076  	     var_created_by,
15:40:02 1077  	     var_invoice_adj_reason_id,
15:40:02 1078  	     var_update_date,
15:40:02 1079  	     var_updated_by
15:40:02 1080  	   FROM
15:40:02 1081  	     INVOICE_ADJUSTMENT
15:40:02 1082  	   WHERE
15:40:02 1083  	     INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
15:40:02 1084  	   EXCEPTION
15:40:02 1085  	     WHEN NO_DATA_FOUND THEN
15:40:02 1086  	       RAISE BAD_INVOICE_ADJ_ID;
15:40:02 1087  	 END;
15:40:02 1088  
15:40:02 1089  	 BEGIN
15:40:02 1090  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_INVOICE_ADJ_HISTORY (
15:40:02 1091  	     var_invoice_adj_id,
15:40:02 1092  	     var_invoice_id,
15:40:02 1093  	     var_is_credit,
15:40:02 1094  	     var_charge_id,
15:40:02 1095  	     var_adjustment_date,
15:40:02 1096  	     var_create_date,
15:40:02 1097  	     var_created_by,
15:40:02 1098  	     var_invoice_adj_reason_id,
15:40:02 1099  	     var_update_date,
15:40:02 1100  	     var_updated_by
15:40:02 1101  	   );
15:40:02 1102  	   EXCEPTION
15:40:02 1103  	     WHEN OTHERS THEN
15:40:02 1104  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:02 1105  	       RAISE CAN_NOT_CREATE_HISTORY;
15:40:02 1106  	 END;
15:40:02 1107  
15:40:02 1108  EXCEPTION
15:40:02 1109  WHEN BAD_INVOICE_ADJ_ID THEN
15:40:02 1110  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:02 1111  	   SPROC_NAME, 'No such invoice adjustment');
15:40:02 1112  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:02 1113  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:02 1114  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:02 1115  WHEN OTHERS THEN
15:40:02 1116  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:02 1117  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:02 1118  END CREATE_INVOICE_ADJ_HISTORY;
15:40:02 1119  
15:40:02 1120  END PROCS_HISTORY_V23;
15:40:02 1121  .
15:40:02 SQL> /

Warning: Package Body created with compilation errors.

Elapsed: 00:00:00.10
15:40:02 SQL> 
15:40:02 SQL> prompt Compiling body for procs_itunes_receipt.sql
Compiling body for procs_itunes_receipt.sql
15:40:02 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V23" AS
15:40:02   2  
15:40:02   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
15:40:02   4  /*
15:40:02   5  Throws exceptions:
15:40:02   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02   7  */
15:40:02   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:40:02   9  	out_result_set	    OUT SYS_REFCURSOR
15:40:02  10  ) AS
15:40:02  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
15:40:02  12  BEGIN
15:40:02  13  OPEN out_result_set FOR
15:40:02  14  	      SELECT
15:40:02  15  	      i.id as ITUNES_RECEIPT_ID,
15:40:02  16  	      s.id as SUBSCRIPTION_ID,
15:40:02  17  	      s.SUBSCRIPTION_STATUS_ID,
15:40:02  18  	      i.STATUS,
15:40:02  19  	      a.GROUP_ID
15:40:02  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
15:40:02  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
15:40:02  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
15:40:02  23  	      AND a.ID(+) = s.ACCOUNT_ID;
15:40:02  24  END ITUNES_RECEIPT_SUBSCRIPTION;
15:40:02  25  
15:40:02  26  
15:40:02  27  PROCEDURE CREATE_RECEIPT(
15:40:02  28  /*
15:40:02  29  Throws exceptions:
15:40:02  30  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02  31  */
15:40:02  32  	  out_id      OUT NUMBER,
15:40:02  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:40:02  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
15:40:02  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
15:40:02  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
15:40:02  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:40:02  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:40:02  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:40:02  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:40:02  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:40:02  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:40:02  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:40:02  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
15:40:02  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
15:40:02  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:40:02  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
15:40:02  48  ) AS
15:40:02  49  -- VARIABLES
15:40:02  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
15:40:02  51  -- EXCEPTIONS
15:40:02  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:02  53  BEGIN
15:40:02  54  
15:40:02  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V23.CREATE_RECEIPT(
15:40:02  56  	  out_id	      =>  out_id,
15:40:02  57  	  in_subscription_id  =>  in_subscription_id,
15:40:02  58  	  in_receipt	      =>  in_receipt,
15:40:02  59  	  in_status	      =>  in_status,
15:40:02  60  	  in_quantity	      =>  in_quantity,
15:40:02  61  	  in_product_id       =>  in_product_id,
15:40:02  62  	  in_transaction_id   =>  in_transaction_id,
15:40:02  63  	  in_purchase_date    =>  in_purchase_date,
15:40:02  64  	  in_original_transaction_id  =>  in_original_transaction_id,
15:40:02  65  	  in_original_purchase_date => in_original_purchase_date,
15:40:02  66  	  in_app_item_id      =>  in_app_item_id,
15:40:02  67  	  in_version_external_id  =>  in_version_external_id,
15:40:02  68  	  in_bid	      =>  in_bid,
15:40:02  69  	  in_bvrs	      =>  in_bvrs,
15:40:02  70  	  in_expires_date     =>  in_expires_date,
15:40:02  71  	  in_created_by       =>  in_created_by
15:40:02  72  	);
15:40:02  73  
15:40:02  74  END CREATE_RECEIPT;
15:40:02  75  
15:40:02  76  PROCEDURE UPDATE_RECEIPT(
15:40:02  77  /*
15:40:02  78  Throws exceptions:
15:40:02  79  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02  80  */
15:40:02  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
15:40:02  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
15:40:02  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
15:40:02  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
15:40:02  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
15:40:02  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
15:40:02  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
15:40:02  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
15:40:02  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
15:40:02  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
15:40:02  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
15:40:02  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
15:40:02  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
15:40:02  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
15:40:02  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
15:40:02  96  	  in_is_expired       IN NUMBER
15:40:02  97  ) AS
15:40:02  98  CANCEL_DATE DATE;
15:40:02  99  BEGIN
15:40:02 100  	-- see if cancel date is already set
15:40:02 101  	BEGIN
15:40:02 102  	  SELECT
15:40:02 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
15:40:02 104  	  FROM
15:40:02 105  	    ITUNES_RECEIPT IR
15:40:02 106  	  WHERE
15:40:02 107  	    IR.ID = in_id;
15:40:02 108  	EXCEPTION
15:40:02 109  	  WHEN NO_DATA_FOUND THEN
15:40:02 110  	    CANCEL_DATE := NULL;
15:40:02 111  	END;
15:40:02 112  
15:40:02 113  	-- only update cancel date if it isn't already set and the receipt is expired
15:40:02 114  	IF in_is_expired = 1 THEN
15:40:02 115  	  IF CANCEL_DATE IS NULL THEN
15:40:02 116  	    CANCEL_DATE := SYSDATE;
15:40:02 117  	  END IF;
15:40:02 118  	ELSE
15:40:02 119  	  CANCEL_DATE := NULL;
15:40:02 120  	END IF;
15:40:02 121  
15:40:02 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V23.UPDATE_RECEIPT(
15:40:02 123  	  in_id => in_id,
15:40:02 124  	  in_receipt => in_receipt,
15:40:02 125  	  in_status => in_status,
15:40:02 126  	  in_quantity => in_quantity,
15:40:02 127  	  in_product_id => in_product_id,
15:40:02 128  	  in_transaction_id => in_transaction_id,
15:40:02 129  	  in_purchase_date => in_purchase_date,
15:40:02 130  	  in_original_transaction_id => in_original_transaction_id,
15:40:02 131  	  in_original_purchase_date => in_original_purchase_date,
15:40:02 132  	  in_app_item_id => in_app_item_id,
15:40:02 133  	  in_version_external_id => in_version_external_id,
15:40:02 134  	  in_bid => in_bid,
15:40:02 135  	  in_bvrs => in_bvrs,
15:40:02 136  	  in_expires_date => in_expires_date,
15:40:02 137  	  in_updated_by => in_updated_by,
15:40:02 138  	  in_cancel_date => CANCEL_DATE
15:40:02 139  	);
15:40:02 140  END UPDATE_RECEIPT;
15:40:02 141  
15:40:02 142  PROCEDURE LINK_ITUNES_RECEIPT(
15:40:02 143  /*
15:40:02 144  Throws exceptions:
15:40:02 145  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 146  */
15:40:02 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
15:40:02 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
15:40:02 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
15:40:02 150  ) AS
15:40:02 151  BEGIN
15:40:02 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V23.LINK_ITUNES_RECEIPT(
15:40:02 153  		      in_id => in_id,
15:40:02 154  		      in_subscription_id => in_subscription_id,
15:40:02 155  		      in_updated_by => in_updated_by
15:40:02 156  		      );
15:40:02 157  END LINK_ITUNES_RECEIPT;
15:40:02 158  
15:40:02 159  PROCEDURE MARK_RECEIPT_CHECKED(
15:40:02 160  /*
15:40:02 161  Throws exceptions:
15:40:02 162  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 163  */
15:40:02 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
15:40:02 165  ) AS
15:40:02 166  BEGIN
15:40:02 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V23.MARK_RECEIPT_CHECKED(
15:40:02 168  	  in_id => in_id
15:40:02 169  	);
15:40:02 170  END MARK_RECEIPT_CHECKED;
15:40:02 171  
15:40:02 172  PROCEDURE GET_ITUNES_RECEIPTS (
15:40:02 173  /*
15:40:02 174  Throws exceptions:
15:40:02 175  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 176  */
15:40:02 177  	out_result_set	    OUT SYS_REFCURSOR,
15:40:02 178  	in_row_number	    IN NUMBER DEFAULT 500
15:40:02 179  ) AS
15:40:02 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
15:40:02 181  BEGIN
15:40:02 182  OPEN out_result_set FOR
15:40:02 183  SELECT * FROM
15:40:02 184  (
15:40:02 185  	SELECT * FROM
15:40:02 186  	(
15:40:02 187  	  SELECT
15:40:02 188  	    IR.ID,
15:40:02 189  	    IR.SUBSCRIPTION_ID,
15:40:02 190  	    IR.RECEIPT,
15:40:02 191  	    IR.STATUS,
15:40:02 192  	    IR.QUANTITY,
15:40:02 193  	    IR.PRODUCT_ID,
15:40:02 194  	    IR.TRANSACTION_ID,
15:40:02 195  	    IR.PURCHASE_DATE,
15:40:02 196  	    IR.ORIGINAL_TRANSACTION_ID,
15:40:02 197  	    IR.ORIGINAL_PURCHASE_DATE,
15:40:02 198  	    IR.APP_ITEM_ID,
15:40:02 199  	    IR.VERSION_EXTERNAL_ID,
15:40:02 200  	    IR.BID,
15:40:02 201  	    IR.BVRS,
15:40:02 202  	    IR.EXPIRES_DATE,
15:40:02 203  	    IR.CREATE_DATe,
15:40:02 204  	    IR.CREATED_BY,
15:40:02 205  	    IR.UPDATE_DATE,
15:40:02 206  	    IR.UPDATED_BY,
15:40:02 207  	    IR.LAST_CHECK_DATE,
15:40:02 208  	    OC.VENDOR_SOURCE_ID
15:40:02 209  	  FROM
15:40:02 210  	    CORE_OWNER.ITUNES_RECEIPT IR
15:40:02 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
15:40:02 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
15:40:02 213  	  WHERE
15:40:02 214  	    NOT EXISTS
15:40:02 215  	    (
15:40:02 216  	      SELECT NULL
15:40:02 217  	      FROM PROCESS_RETRY_THROTTLE
15:40:02 218  	      WHERE PROCESS_NAME = SPROC_NAME
15:40:02 219  		AND GENERIC_ID = IR.ID
15:40:02 220  	    ) AND
15:40:02 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
15:40:02 222  	    ROWNUM <= in_row_number*10
15:40:02 223  	)
15:40:02 224  	ORDER BY dbms_random.value
15:40:02 225  )
15:40:02 226  WHERE
15:40:02 227  	ROWNUM <= in_row_number;
15:40:02 228  
15:40:02 229  END GET_ITUNES_RECEIPTS;
15:40:02 230  
15:40:02 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
15:40:02 232  /*
15:40:02 233  Throws exceptions:
15:40:02 234  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:02 235  */
15:40:02 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
15:40:02 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
15:40:02 238  ) AS
15:40:02 239  BEGIN
15:40:02 240  
15:40:02 241  SELECT
15:40:02 242  	  oc.vendor_source_id
15:40:02 243  INTO
15:40:02 244  	  out_vendor_source_id
15:40:02 245  FROM
15:40:02 246  	  offer_chain_meta_data ocmd
15:40:02 247  JOIN
15:40:02 248  	  offer_chain oc
15:40:02 249  ON
15:40:02 250  	  ocmd.offer_chain_id = oc.id
15:40:02 251  WHERE
15:40:02 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
15:40:02 253  AND ocmd.value = in_itunes_pid
15:40:02 254  AND rownum <= 1;
15:40:02 255  
15:40:02 256  END GET_VENDOR_FROM_ITUNES_PID;
15:40:02 257  
15:40:02 258  END PROCS_ITUNES_RECEIPT_V23;
15:40:02 259  .
15:40:02 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:40:03 SQL> 
15:40:03 SQL> prompt Compiling body for procs_line_items.sql
Compiling body for procs_line_items.sql
15:40:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V23" AS
15:40:03   2  
15:40:03   3  PROCEDURE ADD_LINE_ITEMS(
15:40:03   4  /*
15:40:03   5  Throws exceptions:
15:40:03   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:03   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:03   8  */
15:40:03   9  	in_invoice_id IN NUMBER,
15:40:03  10  	in_offer_id   IN NUMBER,
15:40:03  11  	in_created_by IN VARCHAR2
15:40:03  12  ) AS
15:40:03  13  -- VARIABLES
15:40:03  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
15:40:03  15  temp_invoice_id NUMBER;
15:40:03  16  temp_offer_id   NUMBER;
15:40:03  17  
15:40:03  18  var_line_item_data SYS_REFCURSOR;
15:40:03  19  var_new_line_item_id NUMBER;
15:40:03  20  var_product_unit_price NUMBER (10,6);
15:40:03  21  var_product_offering_price NUMBER(10,6);
15:40:03  22  var_product_offering_oprice NUMBER(10,6);
15:40:03  23  var_product_quantity NUMBER;
15:40:03  24  var_product_offering_id NUMBER;
15:40:03  25  
15:40:03  26  var_line_item_price	  NUMBER(10,2);
15:40:03  27  var_discount_fixed_amount   NUMBER(10,6);
15:40:03  28  var_discount_percent_amount NUMBER(10,2);
15:40:03  29  
15:40:03  30  
15:40:03  31  -- EXCEPTIONS
15:40:03  32  BAD_INVOICE_ID EXCEPTION;
15:40:03  33  BAD_OFFER_ID EXCEPTION;
15:40:03  34  BAD_DISCOUNT EXCEPTION;
15:40:03  35  BEGIN
15:40:03  36  
15:40:03  37  	-- Check that given invoice exists
15:40:03  38  	BEGIN
15:40:03  39  	  SELECT
15:40:03  40  	    INVOICE.ID into temp_invoice_id
15:40:03  41  	  FROM
15:40:03  42  	    INVOICE
15:40:03  43  	  WHERE
15:40:03  44  	    INVOICE.ID = in_invoice_id;
15:40:03  45  
15:40:03  46  	  EXCEPTION
15:40:03  47  	    WHEN NO_DATA_FOUND THEN
15:40:03  48  	      RAISE BAD_INVOICE_ID;
15:40:03  49  	END;
15:40:03  50  
15:40:03  51  	-- Check that given offer exists
15:40:03  52  	BEGIN
15:40:03  53  	  SELECT
15:40:03  54  	    OFFER.ID into temp_offer_id
15:40:03  55  	  FROM
15:40:03  56  	    OFFER
15:40:03  57  	  WHERE
15:40:03  58  	    OFFER.ID = in_offer_id;
15:40:03  59  
15:40:03  60  	  EXCEPTION
15:40:03  61  	    WHEN NO_DATA_FOUND THEN
15:40:03  62  	      RAISE BAD_OFFER_ID;
15:40:03  63  	END;
15:40:03  64  
15:40:03  65  	-- Get product_offering data
15:40:03  66  	OPEN var_line_item_data FOR
15:40:03  67  	SELECT
15:40:03  68  	  PRODUCT_OFFERING.ID,
15:40:03  69  	  PRODUCT_OFFERING.UNIT_PRICE,
15:40:03  70  	  PRODUCT_OFFERING.QUANTITY
15:40:03  71  	FROM
15:40:03  72  	  OFFER_PRODUCT_OFFERING
15:40:03  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:40:03  74  	WHERE
15:40:03  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
15:40:03  76  
15:40:03  77  	-- insert line items
15:40:03  78  	-- add discounts to line items
15:40:03  79  	LOOP
15:40:03  80  	  FETCH var_line_item_data INTO
15:40:03  81  	    var_product_offering_id,
15:40:03  82  	    var_product_unit_price,
15:40:03  83  	    var_product_quantity;
15:40:03  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
15:40:03  85  
15:40:03  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
15:40:03  87  	  var_product_offering_price := var_product_offering_oprice;
15:40:03  88  
15:40:03  89  	  -- Apply discounts to line_item
15:40:03  90  	  BEGIN
15:40:03  91  	    SELECT
15:40:03  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
15:40:03  93  	    FROM
15:40:03  94  	      DISCOUNT_PRODUCT_OFFERING
15:40:03  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:40:03  96  	    WHERE
15:40:03  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:40:03  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
15:40:03  99  	    EXCEPTION
15:40:03 100  	    WHEN NO_DATA_FOUND THEN
15:40:03 101  	      var_discount_fixed_amount := NULL;
15:40:03 102  	  END;
15:40:03 103  
15:40:03 104  	  BEGIN
15:40:03 105  	    SELECT
15:40:03 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
15:40:03 107  	    FROM
15:40:03 108  	      DISCOUNT_PRODUCT_OFFERING
15:40:03 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:40:03 110  	    WHERE
15:40:03 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:40:03 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
15:40:03 113  	    EXCEPTION
15:40:03 114  	    WHEN NO_DATA_FOUND THEN
15:40:03 115  	      var_discount_percent_amount := NULL;
15:40:03 116  	  END;
15:40:03 117  
15:40:03 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
15:40:03 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
15:40:03 120  	  END IF;
15:40:03 121  
15:40:03 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
15:40:03 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
15:40:03 124  	  END IF;
15:40:03 125  
15:40:03 126  	  var_line_item_price := PROCS_COMMON_V23.ROUND_10_6_TO_10_2(var_product_offering_price);
15:40:03 127  
15:40:03 128  	  IF (var_line_item_price < 0) THEN
15:40:03 129  	      RAISE BAD_DISCOUNT;
15:40:03 130  	  END IF;
15:40:03 131  
15:40:03 132  	  var_new_line_item_id := NULL;
15:40:03 133  	  PROCS_LINE_ITEMS_CRU_V23.CREATE_LINE_ITEM(
15:40:03 134  	    inout_line_item_id	=> var_new_line_item_id,
15:40:03 135  	    in_product_offer_id => var_product_offering_id,
15:40:03 136  	    in_invoice_id	=> in_invoice_id,
15:40:03 137  	    in_amount		=> var_line_item_price,
15:40:03 138  	    in_created_by	=> in_created_by,
15:40:03 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
15:40:03 140  	    in_taxes_amount	=> NULL
15:40:03 141  	  );
15:40:03 142  
15:40:03 143  	  FOR f_discount IN (
15:40:03 144  	    SELECT
15:40:03 145  	      DISCOUNT.ID
15:40:03 146  	    FROM
15:40:03 147  	      DISCOUNT_PRODUCT_OFFERING
15:40:03 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:40:03 149  	    WHERE
15:40:03 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:40:03 151  	  )
15:40:03 152  	  LOOP
15:40:03 153  	    PROCS_LINE_ITEMS_CRU_V23.CREATE_DISCOUNT_LINE_ITEM(
15:40:03 154  	      in_discount_id =>  f_discount.ID,
15:40:03 155  	      in_line_item_id => var_new_line_item_id
15:40:03 156  	    );
15:40:03 157  	  END LOOP;
15:40:03 158  	END LOOP;
15:40:03 159  
15:40:03 160  EXCEPTION
15:40:03 161  WHEN BAD_INVOICE_ID THEN
15:40:03 162  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 163  	  SPROC_NAME, 'No such license');
15:40:03 164  WHEN BAD_OFFER_ID THEN
15:40:03 165  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 166  	  SPROC_NAME, 'No such offer');
15:40:03 167  WHEN BAD_DISCOUNT THEN
15:40:03 168  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 169  	  SPROC_NAME, 'Bad Discount');
15:40:03 170  WHEN OTHERS THEN
15:40:03 171  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 173  END ADD_LINE_ITEMS;
15:40:03 174  
15:40:03 175  /******************************************************************************/
15:40:03 176  
15:40:03 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
15:40:03 178  	in_line_item_id    IN NUMBER,
15:40:03 179  	in_amount	   IN NUMBER,
15:40:03 180  	in_discount_amount IN NUMBER,
15:40:03 181  	in_taxes_amount    IN NUMBER
15:40:03 182  ) AS
15:40:03 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
15:40:03 184  -- VARIABLES
15:40:03 185  temp_line_item_id NUMBER;
15:40:03 186  -- EXCEPTIONS
15:40:03 187  BAD_LINE_ITEM_ID EXCEPTION;
15:40:03 188  BEGIN
15:40:03 189  
15:40:03 190  	-- Check that line item exists
15:40:03 191  	BEGIN
15:40:03 192  	  SELECT
15:40:03 193  	    LINE_ITEM.ID into temp_line_item_id
15:40:03 194  	  FROM
15:40:03 195  	    LINE_ITEM
15:40:03 196  	  WHERE
15:40:03 197  	    LINE_ITEM.ID = in_line_item_id;
15:40:03 198  	  EXCEPTION
15:40:03 199  	    WHEN NO_DATA_FOUND THEN
15:40:03 200  	      RAISE BAD_LINE_ITEM_ID;
15:40:03 201  	END;
15:40:03 202  
15:40:03 203  	-- Update line item
15:40:03 204  	PROCS_LINE_ITEMS_CRU_V23.UPDATE_LINE_ITEM(
15:40:03 205  	  in_line_item_id    => in_line_item_id,
15:40:03 206  	  in_amount	     => in_amount,
15:40:03 207  	  in_discount_amount => in_discount_amount,
15:40:03 208  	  in_taxes_amount    => in_taxes_amount
15:40:03 209  	);
15:40:03 210  
15:40:03 211  EXCEPTION
15:40:03 212  WHEN BAD_LINE_ITEM_ID THEN
15:40:03 213  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 214  	  SPROC_NAME, 'No such line item');
15:40:03 215  WHEN OTHERS THEN
15:40:03 216  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 218  END UPDATE_LINE_ITEM_AMOUNT;
15:40:03 219  
15:40:03 220  /******************************************************************************/
15:40:03 221  
15:40:03 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:40:03 223  /*
15:40:03 224  Throws exceptions:
15:40:03 225  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:03 226  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:03 227  */
15:40:03 228  	in_invoice_id  IN NUMBER,
15:40:03 229  	out_result_set OUT SYS_REFCURSOR
15:40:03 230  ) AS
15:40:03 231  -- VARIABLES
15:40:03 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
15:40:03 233  temp_invoice_id NUMBER;
15:40:03 234  
15:40:03 235  -- EXCEPTIONS
15:40:03 236  BAD_INVOICE_ID EXCEPTION;
15:40:03 237  BEGIN
15:40:03 238  
15:40:03 239  	-- Check that given invoice exists
15:40:03 240  	BEGIN
15:40:03 241  	  SELECT
15:40:03 242  	    INVOICE.ID into temp_invoice_id
15:40:03 243  	  FROM
15:40:03 244  	    INVOICE
15:40:03 245  	  WHERE
15:40:03 246  	    INVOICE.ID = in_invoice_id;
15:40:03 247  	  EXCEPTION
15:40:03 248  	    WHEN NO_DATA_FOUND THEN
15:40:03 249  	      RAISE BAD_INVOICE_ID;
15:40:03 250  	END;
15:40:03 251  
15:40:03 252  	-- Select line items
15:40:03 253  	OPEN out_result_set FOR
15:40:03 254  	SELECT
15:40:03 255  	  LINE_ITEM.ID,
15:40:03 256  	  LINE_ITEM.AMOUNT,
15:40:03 257  	  LINE_ITEM.CREATE_DATE,
15:40:03 258  	  LINE_ITEM.CREATED_BY,
15:40:03 259  	  LINE_ITEM.INVOICE_ID,
15:40:03 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
15:40:03 261  	  LINE_ITEM.TAXES_AMOUNT,
15:40:03 262  	  LINE_ITEM.PRODUCT_OFFER_ID
15:40:03 263  	FROM
15:40:03 264  	  LINE_ITEM
15:40:03 265  	WHERE
15:40:03 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
15:40:03 267  
15:40:03 268  EXCEPTION
15:40:03 269  WHEN BAD_INVOICE_ID THEN
15:40:03 270  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 271  	  SPROC_NAME, 'No such invoice');
15:40:03 272  WHEN OTHERS THEN
15:40:03 273  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 275  END GET_INVOICE_LINE_ITEMS;
15:40:03 276  
15:40:03 277  /******************************************************************************/
15:40:03 278  
15:40:03 279  PROCEDURE GET_LINE_ITEM_TAXES (
15:40:03 280  /*
15:40:03 281  Throws exceptions:
15:40:03 282  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:03 283  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:03 284  */
15:40:03 285  	in_line_item_id IN  NUMBER,
15:40:03 286  	out_result_set	OUT SYS_REFCURSOR
15:40:03 287  ) AS
15:40:03 288  -- VARIABLES
15:40:03 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
15:40:03 290  temp_line_item_id NUMBER;
15:40:03 291  -- EXCEPTIONS
15:40:03 292  BAD_LINE_ITEM_ID EXCEPTION;
15:40:03 293  BEGIN
15:40:03 294  
15:40:03 295  	-- Check that line item exists
15:40:03 296  	BEGIN
15:40:03 297  	  SELECT
15:40:03 298  	    LINE_ITEM.ID into temp_line_item_id
15:40:03 299  	  FROM
15:40:03 300  	    LINE_ITEM
15:40:03 301  	  WHERE
15:40:03 302  	    LINE_ITEM.ID = in_line_item_id;
15:40:03 303  	  EXCEPTION
15:40:03 304  	    WHEN NO_DATA_FOUND THEN
15:40:03 305  	      RAISE BAD_LINE_ITEM_ID;
15:40:03 306  	END;
15:40:03 307  
15:40:03 308  	-- Get all taxes for given line item
15:40:03 309  	OPEN out_result_set FOR
15:40:03 310  	SELECT
15:40:03 311  	  TAX.ID,
15:40:03 312  	  TAX.CALCULATED_AMOUNT,
15:40:03 313  	  TAX.CREATE_DATE,
15:40:03 314  	  TAX.CREATED_BY,
15:40:03 315  	  TAX.EFFECTIVE_RATE,
15:40:03 316  	  TAX.EXT_RESULT,
15:40:03 317  	  TAX.EXT_TAX_TYPE,
15:40:03 318  	  TAX.IMPOSITION,
15:40:03 319  	  TAX.IMPOSITION_TYPE,
15:40:03 320  	  TAX.JURISDICTION_ID,
15:40:03 321  	  TAX.JURISDICTION_LEVEL_ID,
15:40:03 322  	  TAX.JURISDICTION_NAME,
15:40:03 323  	  TAX.LINE_ITEM_ID,
15:40:03 324  	  TAX.TAX_RULE_ID,
15:40:03 325  	  TAX.TAX_TYPE_ID,
15:40:03 326  	  TAX.TAXABLE_AMOUNT
15:40:03 327  	FROM
15:40:03 328  	  TAX
15:40:03 329  	WHERE
15:40:03 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
15:40:03 331  
15:40:03 332  EXCEPTION
15:40:03 333  WHEN BAD_LINE_ITEM_ID THEN
15:40:03 334  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 335  	  SPROC_NAME, 'No such line item');
15:40:03 336  WHEN OTHERS THEN
15:40:03 337  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 339  END GET_LINE_ITEM_TAXES;
15:40:03 340  
15:40:03 341  -- norlov: #38770
15:40:03 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
15:40:03 343  /*
15:40:03 344  Throws exceptions:
15:40:03 345  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:03 346  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:03 347  */
15:40:03 348  	in_line_item_id IN  NUMBER,
15:40:03 349  	out_result_set	OUT SYS_REFCURSOR
15:40:03 350  ) AS
15:40:03 351  -- VARIABLES
15:40:03 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
15:40:03 353  temp_line_item_id NUMBER;
15:40:03 354  -- EXCEPTIONS
15:40:03 355  BAD_LINE_ITEM_ID EXCEPTION;
15:40:03 356  BEGIN
15:40:03 357  
15:40:03 358  	-- Check that line item exists
15:40:03 359  	BEGIN
15:40:03 360  	  SELECT
15:40:03 361  	    LINE_ITEM.ID into temp_line_item_id
15:40:03 362  	  FROM
15:40:03 363  	    LINE_ITEM
15:40:03 364  	  WHERE
15:40:03 365  	    LINE_ITEM.ID = in_line_item_id;
15:40:03 366  	  EXCEPTION
15:40:03 367  	    WHEN NO_DATA_FOUND THEN
15:40:03 368  	      RAISE BAD_LINE_ITEM_ID;
15:40:03 369  	END;
15:40:03 370  
15:40:03 371  	-- Get all discounts for given line item
15:40:03 372  	OPEN out_result_set FOR
15:40:03 373  	SELECT
15:40:03 374  	  DISCOUNT.FIXED_AMOUNT,
15:40:03 375  	  DISCOUNT.NAME,
15:40:03 376  	  DISCOUNT.ID,
15:40:03 377  	  DISCOUNT.PERCENT_AMOUNT
15:40:03 378  	FROM
15:40:03 379  	  DISCOUNT_LINE_ITEM
15:40:03 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
15:40:03 381  	WHERE
15:40:03 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
15:40:03 383  
15:40:03 384  EXCEPTION
15:40:03 385  WHEN BAD_LINE_ITEM_ID THEN
15:40:03 386  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 387  	  SPROC_NAME, 'No such line item');
15:40:03 388  WHEN OTHERS THEN
15:40:03 389  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 391  END GET_LINE_ITEM_DISCOUNTS;
15:40:03 392  /******************************************************************************/
15:40:03 393  
15:40:03 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
15:40:03 395  /*
15:40:03 396  Throws exceptions:
15:40:03 397  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:03 398  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:03 399  */
15:40:03 400  	in_line_item_id     IN	NUMBER,
15:40:03 401  	out_amount	    OUT NUMBER
15:40:03 402  ) AS
15:40:03 403  -- VARIABLES
15:40:03 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
15:40:03 405  -- EXCEPTIONS
15:40:03 406  BAD_LINE_ITEM_ID EXCEPTION;
15:40:03 407  BEGIN
15:40:03 408  
15:40:03 409  	BEGIN
15:40:03 410  	  SELECT
15:40:03 411  	    LINE_ITEM.AMOUNT into out_amount
15:40:03 412  	  FROM
15:40:03 413  	    LINE_ITEM
15:40:03 414  	  WHERE
15:40:03 415  	    LINE_ITEM.ID = in_line_item_id;
15:40:03 416  	  EXCEPTION
15:40:03 417  	    WHEN NO_DATA_FOUND THEN
15:40:03 418  	      RAISE BAD_LINE_ITEM_ID;
15:40:03 419  	END;
15:40:03 420  
15:40:03 421  EXCEPTION
15:40:03 422  WHEN BAD_LINE_ITEM_ID THEN
15:40:03 423  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 424  	  SPROC_NAME, 'No such line item');
15:40:03 425  WHEN OTHERS THEN
15:40:03 426  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 428  END CALCULATE_LINE_ITEM_AMOUNT;
15:40:03 429  
15:40:03 430  /******************************************************************************/
15:40:03 431  
15:40:03 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
15:40:03 433  /*
15:40:03 434  Throws exceptions:
15:40:03 435  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:03 436  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:03 437  */
15:40:03 438  	in_line_item_id     IN	NUMBER
15:40:03 439  ) RETURN NUMBER AS
15:40:03 440  var_invoice_amount NUMBER(10, 2);
15:40:03 441  BEGIN
15:40:03 442  	PROCS_LINE_ITEMS_V23.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
15:40:03 443  	RETURN var_invoice_amount;
15:40:03 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
15:40:03 445  
15:40:03 446  END PROCS_LINE_ITEMS_V23;
15:40:03 447  .
15:40:03 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:40:03 SQL> 
15:40:03 SQL> prompt Compiling body for procs_locking.sql
Compiling body for procs_locking.sql
15:40:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V23" AS
15:40:03   2  
15:40:03   3  /*
15:40:03   4  PROCEDURE INITIALIZE_SYSTEM AS
15:40:03   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
15:40:03   6  -- VARIABLES
15:40:03   7  var_account_ids SYS_REFCURSOR;
15:40:03   8  var_account_id  NUMBER;
15:40:03   9  BEGIN
15:40:03  10  
15:40:03  11  	OPEN var_account_ids FOR
15:40:03  12  	SELECT
15:40:03  13  	  ACCOUNT.ID
15:40:03  14  	FROM
15:40:03  15  	  ACCOUNT;
15:40:03  16  
15:40:03  17  	LOOP
15:40:03  18  	  FETCH var_account_ids into var_account_id;
15:40:03  19  	  EXIT WHEN var_account_ids%NOTFOUND;
15:40:03  20  	  BEGIN
15:40:03  21  	    INITIALIZE_ACCOUNT(var_account_id);
15:40:03  22  	    EXCEPTION
15:40:03  23  	      WHEN OTHERS THEN
15:40:03  24  		NULL;
15:40:03  25  	  END;
15:40:03  26  	END LOOP;
15:40:03  27  
15:40:03  28  END INITIALIZE_SYSTEM;
15:40:03  29  
15:40:03  30  PROCEDURE INITIALIZE_ACCOUNT (
15:40:03  31  	in_account_id IN NUMBER
15:40:03  32  ) AS
15:40:03  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
15:40:03  34  -- EXCEPTIONS
15:40:03  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
15:40:03  36  BEGIN
15:40:03  37  
15:40:03  38  	BEGIN
15:40:03  39  	  INSERT INTO ACCOUNT_LOCK(
15:40:03  40  	    ACCOUNT_ID,
15:40:03  41  	    LOCK_KEY,
15:40:03  42  	    END_DATE,
15:40:03  43  	    CREATED_BY,
15:40:03  44  	    REASON
15:40:03  45  	  ) VALUES (
15:40:03  46  	    in_account_id,
15:40:03  47  	    'initialization key',
15:40:03  48  	    SYSDATE,
15:40:03  49  	    'system',
15:40:03  50  	    'initialization'
15:40:03  51  	  );
15:40:03  52  	  EXCEPTION
15:40:03  53  	    WHEN DUP_VAL_ON_INDEX THEN
15:40:03  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
15:40:03  55  	END;
15:40:03  56  
15:40:03  57  EXCEPTION
15:40:03  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
15:40:03  59  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:03  60  	  SPROC_NAME, 'Account already initialized');
15:40:03  61  WHEN OTHERS THEN
15:40:03  62  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03  64  END;
15:40:03  65  
15:40:03  66  PROCEDURE INITIALIZE_GROUP (
15:40:03  67  	in_group_id IN NUMBER
15:40:03  68  ) AS
15:40:03  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
15:40:03  70  -- VARIABLES
15:40:03  71  var_account_id NUMBER;
15:40:03  72  -- EXCEPTIONS
15:40:03  73  BAD_GROUP_ID		EXCEPTION;
15:40:03  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
15:40:03  75  BEGIN
15:40:03  76  
15:40:03  77  	BEGIN
15:40:03  78  	  SELECT
15:40:03  79  	    ACCOUNT.ID into var_account_id
15:40:03  80  	  FROM
15:40:03  81  	    ACCOUNT
15:40:03  82  	  WHERE
15:40:03  83  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:03  84  	  EXCEPTION
15:40:03  85  	    WHEN NO_DATA_FOUND THEN
15:40:03  86  	     RAISE BAD_GROUP_ID;
15:40:03  87  	END;
15:40:03  88  
15:40:03  89  	BEGIN
15:40:03  90  	  INSERT INTO ACCOUNT_LOCK (
15:40:03  91  	    ACCOUNT_ID,
15:40:03  92  	    LOCK_KEY,
15:40:03  93  	    END_DATE,
15:40:03  94  	    CREATED_BY,
15:40:03  95  	    REASON
15:40:03  96  	  ) VALUES (
15:40:03  97  	    var_account_id,
15:40:03  98  	    'initialization key',
15:40:03  99  	    SYSDATE,
15:40:03 100  	    'system',
15:40:03 101  	    'initialization'
15:40:03 102  	  );
15:40:03 103  	  EXCEPTION
15:40:03 104  	    WHEN DUP_VAL_ON_INDEX THEN
15:40:03 105  	      RAISE GROUP_ALREADY_INITIALIZED;
15:40:03 106  	END;
15:40:03 107  
15:40:03 108  EXCEPTION
15:40:03 109  WHEN BAD_GROUP_ID THEN
15:40:03 110  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 111  	  SPROC_NAME, 'No such account with given group id');
15:40:03 112  WHEN GROUP_ALREADY_INITIALIZED THEN
15:40:03 113  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:03 114  	  SPROC_NAME, 'Group already initialized');
15:40:03 115  WHEN OTHERS THEN
15:40:03 116  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 118  END INITIALIZE_GROUP;
15:40:03 119  */
15:40:03 120  
15:40:03 121  PROCEDURE LOCK_ACCOUNT (
15:40:03 122  	in_group_id    IN NUMBER,
15:40:03 123  	in_lock_key    IN VARCHAR2,
15:40:03 124  	in_seconds_num IN NUMBER,
15:40:03 125  	in_created_by  IN VARCHAR2,
15:40:03 126  	in_reason      IN VARCHAR2
15:40:03 127  ) AS
15:40:03 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
15:40:03 129  -- CONSTANTS
15:40:03 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
15:40:03 131  -- VARIABLES
15:40:03 132  var_account_id NUMBER;
15:40:03 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:03 134  var_date		DATE := SYSDATE;
15:40:03 135  var_lock_end_date DATE;
15:40:03 136  -- EXCEPTIONS
15:40:03 137  BAD_GROUP_ID   EXCEPTION;
15:40:03 138  ALREADY_LOCKED EXCEPTION;
15:40:03 139  BEGIN
15:40:03 140  
15:40:03 141  	BEGIN
15:40:03 142  	  SELECT
15:40:03 143  	    ACCOUNT.ID into var_account_id
15:40:03 144  	  FROM
15:40:03 145  	    ACCOUNT
15:40:03 146  	  WHERE
15:40:03 147  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:03 148  	  EXCEPTION
15:40:03 149  	    WHEN NO_DATA_FOUND THEN
15:40:03 150  	      RAISE BAD_GROUP_ID;
15:40:03 151  	END;
15:40:03 152  
15:40:03 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
15:40:03 154  
15:40:03 155  	BEGIN
15:40:03 156  
15:40:03 157  	  INSERT INTO ACCOUNT_LOCK (
15:40:03 158  	    ACCOUNT_ID,
15:40:03 159  	    LOCK_KEY,
15:40:03 160  	    END_DATE,
15:40:03 161  	    CREATED_BY,
15:40:03 162  	    REASON
15:40:03 163  	  ) VALUES (
15:40:03 164  	    var_account_id,
15:40:03 165  	    in_lock_key,
15:40:03 166  	    var_lock_end_date,
15:40:03 167  	    in_created_by,
15:40:03 168  	    in_reason
15:40:03 169  	  );
15:40:03 170  
15:40:03 171  	  EXCEPTION
15:40:03 172  	    WHEN DUP_VAL_ON_INDEX THEN
15:40:03 173  	      -- This rows was created before... I will try to update it
15:40:03 174  	      BEGIN
15:40:03 175  
15:40:03 176  		UPDATE
15:40:03 177  		  ACCOUNT_LOCK
15:40:03 178  		SET
15:40:03 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
15:40:03 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
15:40:03 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
15:40:03 182  		  ACCOUNT_LOCK.REASON = in_reason
15:40:03 183  		WHERE
15:40:03 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
15:40:03 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
15:40:03 186  
15:40:03 187  		IF SQL%ROWCOUNT = 0 THEN
15:40:03 188  		  RAISE ALREADY_LOCKED;
15:40:03 189  		END IF;
15:40:03 190  
15:40:03 191  	      END;
15:40:03 192  	END;
15:40:03 193  
15:40:03 194  EXCEPTION
15:40:03 195  WHEN BAD_GROUP_ID THEN
15:40:03 196  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 197  	  SPROC_NAME, 'No such group id');
15:40:03 198  WHEN ALREADY_LOCKED THEN
15:40:03 199  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:03 200  	  SPROC_NAME, 'Account already locked');
15:40:03 201  WHEN OTHERS THEN
15:40:03 202  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 204  END LOCK_ACCOUNT;
15:40:03 205  
15:40:03 206  /******************************************************************************/
15:40:03 207  
15:40:03 208  PROCEDURE RELEASE_LOCK (
15:40:03 209  	in_group_id IN NUMBER,
15:40:03 210  	in_lock_key IN VARCHAR2
15:40:03 211  ) AS
15:40:03 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
15:40:03 213  -- VARIABLES
15:40:03 214  var_account_id NUMBER;
15:40:03 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
15:40:03 216  var_date DATE := SYSDATE;
15:40:03 217  -- EXCEPTIONS
15:40:03 218  BAD_GROUP_ID		EXCEPTION;
15:40:03 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
15:40:03 220  BEGIN
15:40:03 221  
15:40:03 222  	BEGIN
15:40:03 223  	  SELECT
15:40:03 224  	    ACCOUNT.ID into var_account_id
15:40:03 225  	  FROM
15:40:03 226  	    ACCOUNT
15:40:03 227  	  WHERE
15:40:03 228  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:03 229  	  EXCEPTION
15:40:03 230  	    WHEN NO_DATA_FOUND THEN
15:40:03 231  	      RAISE BAD_GROUP_ID;
15:40:03 232  	END;
15:40:03 233  
15:40:03 234  	UPDATE
15:40:03 235  	  ACCOUNT_LOCK
15:40:03 236  	SET
15:40:03 237  	  ACCOUNT_LOCK.END_DATE = var_date
15:40:03 238  	WHERE
15:40:03 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
15:40:03 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
15:40:03 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
15:40:03 242  
15:40:03 243  	IF SQL%ROWCOUNT = 0 THEN
15:40:03 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
15:40:03 245  	END IF;
15:40:03 246  
15:40:03 247  EXCEPTION
15:40:03 248  WHEN BAD_GROUP_ID THEN
15:40:03 249  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 250  	  SPROC_NAME, 'No such group id');
15:40:03 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
15:40:03 252  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:03 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
15:40:03 254  WHEN OTHERS THEN
15:40:03 255  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 256  	  SPROC_NAME, 'Unknown error');
15:40:03 257  END RELEASE_LOCK;
15:40:03 258  
15:40:03 259  END PROCS_LOCKING_V23;
15:40:03 260  .
15:40:03 SQL> /

Package body created.

Elapsed: 00:00:00.14
15:40:03 SQL> 
15:40:03 SQL> prompt Compiling body for procs_offer_chain.sql
Compiling body for procs_offer_chain.sql
15:40:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V23" AS
15:40:03   2  
15:40:03   3  PROCEDURE IS_GC_OFFER_CHAIN(
15:40:03   4  	in_offer_chain_id IN OFFER_CHAIN.ID%TYPE,
15:40:03   5  	out_data OUT NUMBER
15:40:03   6  ) AS
15:40:03   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_GC_OFFER_CHAIN';
15:40:03   8  var_purchase_oc NUMBER := 0;
15:40:03   9  var_redeem_oc   NUMBER := 0;
15:40:03  10  BEGIN
15:40:03  11  	SELECT
15:40:03  12  	  COUNT(1) INTO var_purchase_oc
15:40:03  13  	FROM
15:40:03  14  	  Offer_Chain
15:40:03  15  	WHERE
15:40:03  16  	  Offer_Chain.Id		      = in_offer_chain_id
15:40:03  17  	  AND Offer_Chain.Is_Gift_Certificate = GLOBAL_CONSTANTS_V23.TRUE;
15:40:03  18  
15:40:03  19  	SELECT
15:40:03  20  	  COUNT(1) INTO var_redeem_oc
15:40:03  21  	FROM
15:40:03  22  	  Offer_Chain_Meta_Data
15:40:03  23  	WHERE
15:40:03  24  	  Offer_Chain_Meta_Data.Name = 'redemption offer chain id'
15:40:03  25  	  AND REGEXP_LIKE(Offer_Chain_Meta_Data.Value,'(^|\s|,)' || TO_CHAR(in_offer_chain_id) || '(,|\s|$)');
15:40:03  26  
15:40:03  27  	out_data := var_purchase_oc + var_redeem_oc;
15:40:03  28  END;
15:40:03  29  
15:40:03  30  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
15:40:03  31  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
15:40:03  32  	out_data	     OUT OFFER_CHAIN.ID%TYPE
15:40:03  33  ) AS
15:40:03  34  	SPROC_NAME CONSTANT VARCHAR2(32) := 'OC_ID_BY_ITUNES_PRODUCT_ID';
15:40:03  35  BEGIN
15:40:03  36  	SELECT
15:40:03  37  	  ID INTO out_data
15:40:03  38  	FROM
15:40:03  39  	  OFFER_CHAIN
15:40:03  40  	WHERE
15:40:03  41  	  ITUNES_PRODUCT_ID = in_itunes_product_id;
15:40:03  42  EXCEPTION
15:40:03  43  	WHEN NO_DATA_FOUND THEN NULL;
15:40:03  44  END OC_ID_BY_ITUNES_PRODUCT_ID;
15:40:03  45  
15:40:03  46  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
15:40:03  47  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
15:40:03  48  	out_data	       OUT OFFER_CHAIN.ID%TYPE
15:40:03  49  ) AS
15:40:03  50  SPROC_NAME CONSTANT VARCHAR2(32) := 'OFFER_CHAIN_ID_BY_AMAZON_SKU';
15:40:03  51  BEGIN
15:40:03  52  	SELECT
15:40:03  53  	  ID INTO out_data
15:40:03  54  	FROM
15:40:03  55  	  OFFER_CHAIN
15:40:03  56  	WHERE
15:40:03  57  	  AMAZON_APPSTORE_SKU = in_amazon_appstore_sku;
15:40:03  58  EXCEPTION
15:40:03  59  	WHEN NO_DATA_FOUND THEN NULL;
15:40:03  60  END OFFER_CHAIN_ID_BY_AMAZON_SKU;
15:40:03  61  
15:40:03  62  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:40:03  63  	in_offer_chain_id IN   NUMBER,
15:40:03  64  	out_result_set	  OUT  SYS_REFCURSOR
15:40:03  65  ) AS
15:40:03  66  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OFFER_CHAIN_BY_ID';
15:40:03  67  BEGIN
15:40:03  68  
15:40:03  69  	-- Get offer chain informations
15:40:03  70  	OPEN out_result_set FOR
15:40:03  71  	  SELECT
15:40:03  72  	    OC.ID,
15:40:03  73  	    OC.NAME,
15:40:03  74  	    OC.ADOPTABILITY_WINDOW_START_DATE,
15:40:03  75  	    OC.ADOPTABILITY_WINDOW_END_DATE,
15:40:03  76  	    OC.DESCRIPTION,
15:40:03  77  	    OC.IS_GIFT_CERTIFICATE,
15:40:03  78  	    OC.OFFER_CHAIN_STATUS_ID,
15:40:03  79  	    OC.PRODUCT_URI,
15:40:03  80  	    OC.BILLING_SOURCE_ID,
15:40:03  81  	    OC.VENDOR_SOURCE_ID,
15:40:03  82  	    OC.GROUP_ACCOUNT_TYPE_ID,
15:40:03  83  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED,
15:40:03  84  	    OC.AMAZON_APPSTORE_SKU,
15:40:03  85  	    OC.ITUNES_PRODUCT_ID
15:40:03  86  	  FROM
15:40:03  87  	    OFFER_CHAIN OC
15:40:03  88  	  WHERE
15:40:03  89  	    OC.ID = in_offer_chain_id
15:40:03  90  	    AND ROWNUM <= 1;
15:40:03  91  
15:40:03  92  EXCEPTION
15:40:03  93  WHEN OTHERS THEN
15:40:03  94  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03  95  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03  96  END GET_OFFER_CHAIN_BY_ID;
15:40:03  97  
15:40:03  98  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
15:40:03  99  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:40:03 100  	out_result_set	   OUT SYS_REFCURSOR
15:40:03 101  ) AS
15:40:03 102  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
15:40:03 103  -- EXCEPTIONS
15:40:03 104  BAD_OFFER_CHAINS_IDS EXCEPTION;
15:40:03 105  BEGIN
15:40:03 106  
15:40:03 107  	IF (in_offer_chain_ids IS NULL) THEN
15:40:03 108  	  RAISE BAD_OFFER_CHAINS_IDS;
15:40:03 109  	END IF;
15:40:03 110  
15:40:03 111  	OPEN out_result_set FOR
15:40:03 112  	SELECT
15:40:03 113  	  OCH.ID,
15:40:03 114  	  OCH.NAME,
15:40:03 115  	  OCH.DESCRIPTION,
15:40:03 116  	  OCH.OFFER_CHAIN_STATUS_ID,
15:40:03 117  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
15:40:03 118  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
15:40:03 119  	  OCH.IS_GIFT_CERTIFICATE,
15:40:03 120  	  PROCS_OFFER_CHAIN_V23.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
15:40:03 121  	  PROCS_OFFER_CHAIN_V23.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
15:40:03 122  	  OCH.VENDOR_SOURCE_ID,
15:40:03 123  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
15:40:03 124  	FROM
15:40:03 125  	  OFFER_CHAIN OCH
15:40:03 126  	WHERE
15:40:03 127  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
15:40:03 128  
15:40:03 129  EXCEPTION
15:40:03 130  WHEN BAD_OFFER_CHAINS_IDS THEN
15:40:03 131  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:03 132  	  SPROC_NAME, 'Invalid offer chains ids');
15:40:03 133  WHEN OTHERS THEN
15:40:03 134  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 135  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 136  END GET_OFFER_CHAINS_BY_IDS;
15:40:03 137  
15:40:03 138  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
15:40:03 139  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:40:03 140  	out_result_set	   OUT SYS_REFCURSOR
15:40:03 141  ) AS
15:40:03 142  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
15:40:03 143  -- EXCEPTIONS
15:40:03 144  BAD_OFFER_CHAINS_IDS EXCEPTION;
15:40:03 145  BEGIN
15:40:03 146  
15:40:03 147  	IF (in_offer_chain_ids IS NULL) THEN
15:40:03 148  	  RAISE BAD_OFFER_CHAINS_IDS;
15:40:03 149  	END IF;
15:40:03 150  
15:40:03 151  	OPEN out_result_set FOR
15:40:03 152  	SELECT
15:40:03 153  	  OOCH.OFFER_CHAIN_ID,
15:40:03 154  	  PO.PRODUCT_ID
15:40:03 155  	FROM
15:40:03 156  	  PRODUCT_OFFERING PO
15:40:03 157  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
15:40:03 158  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
15:40:03 159  	WHERE
15:40:03 160  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
15:40:03 161  
15:40:03 162  EXCEPTION
15:40:03 163  WHEN BAD_OFFER_CHAINS_IDS THEN
15:40:03 164  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:03 165  	  SPROC_NAME, 'Invalid offer chains ids');
15:40:03 166  WHEN OTHERS THEN
15:40:03 167  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 168  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 169  END GET_OFFER_CHAINS_PRODUCTS;
15:40:03 170  
15:40:03 171  PROCEDURE GET_OFFER_CHAINS_OFFERS (
15:40:03 172  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:40:03 173  	out_result_set	   OUT SYS_REFCURSOR
15:40:03 174  ) AS
15:40:03 175  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
15:40:03 176  -- EXCEPTIONS
15:40:03 177  BAD_OFFER_CHAINS_IDS EXCEPTION;
15:40:03 178  BEGIN
15:40:03 179  
15:40:03 180  	IF (in_offer_chain_ids IS NULL) THEN
15:40:03 181  	  RAISE BAD_OFFER_CHAINS_IDS;
15:40:03 182  	END IF;
15:40:03 183  
15:40:03 184  	OPEN out_result_set FOR
15:40:03 185  	SELECT
15:40:03 186  	  OOCH.OFFER_CHAIN_ID,
15:40:03 187  	  OOCH.OFFER_ID,
15:40:03 188  	  OOCH.INDEX_VALUE,
15:40:03 189  	  OOCH.NUM_RECURRENCES,
15:40:03 190  	  O.ENTITLEMENT_DURATION,
15:40:03 191  	  PROCS_OFFER_CHAIN_V23.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
15:40:03 192  	FROM
15:40:03 193  	  OFFER O
15:40:03 194  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
15:40:03 195  	WHERE
15:40:03 196  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
15:40:03 197  
15:40:03 198  EXCEPTION
15:40:03 199  WHEN BAD_OFFER_CHAINS_IDS THEN
15:40:03 200  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:03 201  	  SPROC_NAME, 'Invalid offer chains ids');
15:40:03 202  WHEN OTHERS THEN
15:40:03 203  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 204  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 205  END GET_OFFER_CHAINS_OFFERS;
15:40:03 206  
15:40:03 207  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
15:40:03 208  	in_product_id  IN  NUMBER,
15:40:03 209  	out_result_set OUT SYS_REFCURSOR
15:40:03 210  )AS
15:40:03 211  -- VARIBLES
15:40:03 212  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
15:40:03 213  temp_product_id NUMBER;
15:40:03 214  
15:40:03 215  -- EXCEPTIONS
15:40:03 216  BAD_PRODUCT_ID EXCEPTION;
15:40:03 217  BEGIN
15:40:03 218  
15:40:03 219  	-- Check that given product exists
15:40:03 220  	BEGIN
15:40:03 221  	  SELECT
15:40:03 222  	    PRODUCT.ID into temp_product_id
15:40:03 223  	  FROM
15:40:03 224  	    PRODUCT
15:40:03 225  	  WHERE
15:40:03 226  	    PRODUCT.ID = in_product_id;
15:40:03 227  	  EXCEPTION
15:40:03 228  	    WHEN NO_DATA_FOUND THEN
15:40:03 229  	      RAISE BAD_PRODUCT_ID;
15:40:03 230  	END;
15:40:03 231  
15:40:03 232  	-- Select all offer chains that contains given product
15:40:03 233  	OPEN out_result_set FOR
15:40:03 234  	SELECT
15:40:03 235  	  OFFER_CHAIN.ID,
15:40:03 236  	  OFFER_CHAIN.NAME,
15:40:03 237  	  OFFER_CHAIN.DESCRIPTION,
15:40:03 238  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
15:40:03 239  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
15:40:03 240  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
15:40:03 241  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
15:40:03 242  	FROM
15:40:03 243  	  OFFER_CHAIN
15:40:03 244  	WHERE
15:40:03 245  	  OFFER_CHAIN.ID IN (
15:40:03 246  	    SELECT DISTINCT
15:40:03 247  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
15:40:03 248  	    FROM
15:40:03 249  	      OFFER_OFFER_CHAIN
15:40:03 250  	    WHERE
15:40:03 251  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
15:40:03 252  		SELECT DISTINCT
15:40:03 253  		  OFFER_PRODUCT_OFFERING.OFFER_ID
15:40:03 254  		FROM
15:40:03 255  		  OFFER_PRODUCT_OFFERING
15:40:03 256  		WHERE
15:40:03 257  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
15:40:03 258  	      )
15:40:03 259  	  );
15:40:03 260  
15:40:03 261  EXCEPTION
15:40:03 262  WHEN BAD_PRODUCT_ID THEN
15:40:03 263  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 264  	  SPROC_NAME, 'No such product');
15:40:03 265  WHEN OTHERS THEN
15:40:03 266  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 267  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 268  END GET_OFFER_CHAINS_BY_PRODUCT;
15:40:03 269  
15:40:03 270  PROCEDURE GET_OFFER_CHAIN_PRICE (
15:40:03 271  	in_offer_chain_id IN NUMBER,
15:40:03 272  	out_price	  OUT NUMBER
15:40:03 273  ) AS
15:40:03 274  -- VARIABLES
15:40:03 275  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
15:40:03 276  temp_offer_chain_id NUMBER;
15:40:03 277  
15:40:03 278  -- EXCEPTION
15:40:03 279  BAD_OFFER_CHAIN_ID       EXCEPTION;
15:40:03 280  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
15:40:03 281  EXCEPTION_MESSAGE        VARCHAR2(1024);
15:40:03 282  BEGIN
15:40:03 283  
15:40:03 284  	-- Check that given offer chain exists
15:40:03 285  	BEGIN
15:40:03 286  	  SELECT
15:40:03 287  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 288  	  FROM
15:40:03 289  	    OFFER_CHAIN
15:40:03 290  	  WHERE
15:40:03 291  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:40:03 292  
15:40:03 293  	  EXCEPTION
15:40:03 294  	  WHEN NO_DATA_FOUND THEN
15:40:03 295  	    RAISE BAD_OFFER_CHAIN_ID;
15:40:03 296  	END;
15:40:03 297  
15:40:03 298  	BEGIN
15:40:03 299  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
15:40:03 300  	  EXCEPTION
15:40:03 301  	    WHEN OTHERS THEN
15:40:03 302  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:03 303  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
15:40:03 304  	END;
15:40:03 305  
15:40:03 306  EXCEPTION
15:40:03 307  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:03 308  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 309  	  SPROC_NAME, 'Bad offer chain id');
15:40:03 310  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
15:40:03 311  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:03 312  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
15:40:03 313  WHEN OTHERS THEN
15:40:03 314  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 315  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 316  END GET_OFFER_CHAIN_PRICE;
15:40:03 317  
15:40:03 318  PROCEDURE GET_FIRST_OFFER(
15:40:03 319  	in_offer_chain_id IN  NUMBER,
15:40:03 320  	out_offer_id	  OUT NUMBER
15:40:03 321  ) AS
15:40:03 322  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
15:40:03 323  BEGIN
15:40:03 324  	-- Seect first offer in offer chain
15:40:03 325  	SELECT
15:40:03 326  	  OFFER_ID into out_offer_id
15:40:03 327  	FROM (
15:40:03 328  	  SELECT
15:40:03 329  	    OFFER_OFFER_CHAIN.OFFER_ID
15:40:03 330  	  FROM
15:40:03 331  	    OFFER_OFFER_CHAIN
15:40:03 332  	  WHERE
15:40:03 333  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 334  	  ORDER BY
15:40:03 335  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
15:40:03 336  	)
15:40:03 337  	WHERE
15:40:03 338  	  ROWNUM <= 1;
15:40:03 339  
15:40:03 340  EXCEPTION
15:40:03 341  WHEN NO_DATA_FOUND THEN
15:40:03 342  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 343  	  SPROC_NAME, 'No such offer chain');
15:40:03 344  WHEN OTHERS THEN
15:40:03 345  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 346  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 347  END GET_FIRST_OFFER;
15:40:03 348  
15:40:03 349  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
15:40:03 350  	out_result_set OUT SYS_REFCURSOR
15:40:03 351  ) AS
15:40:03 352  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
15:40:03 353  BEGIN
15:40:03 354  	OPEN out_result_set FOR
15:40:03 355  	SELECT
15:40:03 356  	  OFFER_CHAIN.ID,
15:40:03 357  	  OFFER_CHAIN.NAME,
15:40:03 358  	  OFFER_CHAIN.DESCRIPTION,
15:40:03 359  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
15:40:03 360  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
15:40:03 361  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
15:40:03 362  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
15:40:03 363  	  PROCS_OFFER_CHAIN_V23.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
15:40:03 364  	  PRODUCT_OFFERING.PRODUCT_ID
15:40:03 365  	FROM
15:40:03 366  	  OFFER_CHAIN,
15:40:03 367  	  OFFER_OFFER_CHAIN,
15:40:03 368  	  OFFER_PRODUCT_OFFERING,
15:40:03 369  	  PRODUCT_OFFERING
15:40:03 370  	WHERE
15:40:03 371  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
15:40:03 372  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
15:40:03 373  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:40:03 374  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE;
15:40:03 375  
15:40:03 376  EXCEPTION
15:40:03 377  WHEN OTHERS THEN
15:40:03 378  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 379  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 380  END GET_ACTIVE_OFFER_CHAINS;
15:40:03 381  
15:40:03 382  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
15:40:03 383  	in_offer_chain_id IN NUMBER,
15:40:03 384  	out_result_set	  OUT SYS_REFCURSOR
15:40:03 385  ) AS
15:40:03 386  -- VARIABLES
15:40:03 387  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
15:40:03 388  temp_offer_chain_id NUMBER;
15:40:03 389  
15:40:03 390  -- EXCEPTIONS
15:40:03 391  BAD_OFFER_CHAIN EXCEPTION;
15:40:03 392  BEGIN
15:40:03 393  
15:40:03 394  	-- Check that offer chain exists
15:40:03 395  	BEGIN
15:40:03 396  	  SELECT
15:40:03 397  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 398  	  FROM
15:40:03 399  	    OFFER_CHAIN
15:40:03 400  	  WHERE
15:40:03 401  	    OFFER_CHAIN.ID = in_offer_chain_id
15:40:03 402  	    AND ROWNUM <= 1;
15:40:03 403  
15:40:03 404  	  EXCEPTION
15:40:03 405  	    WHEN OTHERS THEN
15:40:03 406  	      RAISE BAD_OFFER_CHAIN;
15:40:03 407  	END;
15:40:03 408  
15:40:03 409  	-- Select all products for given offer chain
15:40:03 410  	OPEN out_result_set FOR
15:40:03 411  	SELECT DISTINCT
15:40:03 412  	  PRODUCT_OFFERING.PRODUCT_ID
15:40:03 413  	FROM
15:40:03 414  	  PRODUCT_OFFERING
15:40:03 415  	WHERE
15:40:03 416  	  PRODUCT_OFFERING.ID IN (
15:40:03 417  	    SELECT DISTINCT
15:40:03 418  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:40:03 419  	    FROM
15:40:03 420  	      OFFER_PRODUCT_OFFERING
15:40:03 421  	    WHERE
15:40:03 422  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:40:03 423  		SELECT
15:40:03 424  		  OFFER_OFFER_CHAIN.OFFER_ID
15:40:03 425  		FROM
15:40:03 426  		  OFFER_OFFER_CHAIN
15:40:03 427  		WHERE
15:40:03 428  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 429  	      )
15:40:03 430  	  );
15:40:03 431  
15:40:03 432  EXCEPTION
15:40:03 433  WHEN BAD_OFFER_CHAIN THEN
15:40:03 434  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 435  	  SPROC_NAME, 'No such offer chain');
15:40:03 436  WHEN OTHERS THEN
15:40:03 437  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 438  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 439  END GET_OFFER_CHAIN_PRODUCTS;
15:40:03 440  
15:40:03 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
15:40:03 442  	in_offer_chain_id	  IN NUMBER,
15:40:03 443  	in_offer_chain_start_date IN DATE
15:40:03 444  ) RETURN DATE AS
15:40:03 445  -- VARIABLES
15:40:03 446  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
15:40:03 447  temp_offer_chain_id    NUMBER;
15:40:03 448  var_offer_chain_length NUMBER;
15:40:03 449  var_offer_duration     VARCHAR2(30);
15:40:03 450  var_offer_recurrences  NUMBER;
15:40:03 451  var_end_date	     DATE;
15:40:03 452  
15:40:03 453  var_offer_ym_interval INTERVAL YEAR TO MONTH;
15:40:03 454  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
15:40:03 455  var_offer_years	    NUMBER;
15:40:03 456  var_offer_months	    NUMBER;
15:40:03 457  var_offer_days	    NUMBER;
15:40:03 458  var_infinity_offers_count NUMBER;
15:40:03 459  
15:40:03 460  var_offers_set SYS_REFCURSOR;
15:40:03 461  
15:40:03 462  -- EXCEPTIONS
15:40:03 463  BAD_OFFER_CHAIN_ID EXCEPTION;
15:40:03 464  BEGIN
15:40:03 465  
15:40:03 466  	var_end_date := in_offer_chain_start_date;
15:40:03 467  
15:40:03 468  	-- Check that offer chain exists
15:40:03 469  	BEGIN
15:40:03 470  	  SELECT
15:40:03 471  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 472  	  FROM
15:40:03 473  	    OFFER_CHAIN
15:40:03 474  	  WHERE
15:40:03 475  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:40:03 476  	  EXCEPTION
15:40:03 477  	    WHEN NO_DATA_FOUND
15:40:03 478  	      THEN RAISE BAD_OFFER_CHAIN_ID;
15:40:03 479  	END;
15:40:03 480  
15:40:03 481  	SELECT
15:40:03 482  	  COUNT(*) into var_infinity_offers_count
15:40:03 483  	FROM
15:40:03 484  	  OFFER_OFFER_CHAIN
15:40:03 485  	WHERE
15:40:03 486  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 487  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V23.OFFER_REC_INFINITY;
15:40:03 488  
15:40:03 489  	IF var_infinity_offers_count > 0 THEN
15:40:03 490  	  -- Offer chain contains offers with infinity num of recurrences
15:40:03 491  	  RETURN NULL;
15:40:03 492  	END IF;
15:40:03 493  
15:40:03 494  	-- Select offers durations
15:40:03 495  	OPEN var_offers_set FOR
15:40:03 496  	SELECT
15:40:03 497  	  OFFER.ENTITLEMENT_DURATION,
15:40:03 498  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
15:40:03 499  	FROM
15:40:03 500  	  OFFER_OFFER_CHAIN
15:40:03 501  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:40:03 502  	WHERE
15:40:03 503  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
15:40:03 504  
15:40:03 505  	-- Calculate sum of offers durations
15:40:03 506  	LOOP
15:40:03 507  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
15:40:03 508  	  EXIT WHEN var_offers_set%NOTFOUND;
15:40:03 509  	  PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
15:40:03 510  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
15:40:03 511  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
15:40:03 512  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
15:40:03 513  	END LOOP;
15:40:03 514  
15:40:03 515  	RETURN var_end_date;
15:40:03 516  
15:40:03 517  EXCEPTION
15:40:03 518  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:03 519  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 520  	  SPROC_NAME, 'No such offer chain');
15:40:03 521  WHEN OTHERS THEN
15:40:03 522  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 523  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 524  END CALCULATE_OFFER_CHAIN_END_DATE;
15:40:03 525  
15:40:03 526  FUNCTION CALCULATE_OFFER_AMOUNT (
15:40:03 527  	in_offer_id IN NUMBER
15:40:03 528  ) RETURN NUMBER AS
15:40:03 529  -- VARIABLES
15:40:03 530  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
15:40:03 531  temp_offer_id NUMBER;
15:40:03 532  
15:40:03 533  var_product_offering_set	    SYS_REFCURSOR;
15:40:03 534  var_product_offering_id	    NUMBER;
15:40:03 535  var_product_offering_price    NUMBER(10,6);
15:40:03 536  var_product_offering_t_amount NUMBER(10,6);
15:40:03 537  var_product_offering_quantity NUMBER;
15:40:03 538  
15:40:03 539  var_total_amount NUMBER(10,6);
15:40:03 540  var_final_amount NUMBER(10,2);
15:40:03 541  
15:40:03 542  var_percent_discount NUMBER(10,2);
15:40:03 543  var_fixed_discount NUMBER(10,6);
15:40:03 544  
15:40:03 545  -- EXCEPTIONS
15:40:03 546  BAD_OFFER_ID EXCEPTION;
15:40:03 547  BEGIN
15:40:03 548  
15:40:03 549  	BEGIN
15:40:03 550  	  SELECT
15:40:03 551  	    OFFER.ID into temp_offer_id
15:40:03 552  	  FROM
15:40:03 553  	    OFFER
15:40:03 554  	  WHERE
15:40:03 555  	    OFFER.ID = in_offer_id;
15:40:03 556  	  EXCEPTION
15:40:03 557  	    WHEN NO_DATA_FOUND THEN
15:40:03 558  	      RAISE BAD_OFFER_ID;
15:40:03 559  	END;
15:40:03 560  
15:40:03 561  	OPEN var_product_offering_set FOR
15:40:03 562  	SELECT
15:40:03 563  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
15:40:03 564  	  PRODUCT_OFFERING.UNIT_PRICE,
15:40:03 565  	  PRODUCT_OFFERING.QUANTITY
15:40:03 566  	FROM
15:40:03 567  	  OFFER_PRODUCT_OFFERING
15:40:03 568  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:40:03 569  	WHERE
15:40:03 570  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
15:40:03 571  
15:40:03 572  	var_total_amount := 0;
15:40:03 573  
15:40:03 574  	LOOP
15:40:03 575  	  FETCH var_product_offering_set into
15:40:03 576  	    var_product_offering_id,
15:40:03 577  	    var_product_offering_price,
15:40:03 578  	    var_product_offering_quantity;
15:40:03 579  	  EXIT WHEN var_product_offering_set%NOTFOUND;
15:40:03 580  
15:40:03 581  	  SELECT
15:40:03 582  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
15:40:03 583  	  FROM
15:40:03 584  	    DISCOUNT_PRODUCT_OFFERING
15:40:03 585  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:40:03 586  	  WHERE
15:40:03 587  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:40:03 588  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
15:40:03 589  
15:40:03 590  	  SELECT
15:40:03 591  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
15:40:03 592  	  FROM
15:40:03 593  	    DISCOUNT_PRODUCT_OFFERING
15:40:03 594  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
15:40:03 595  	  WHERE
15:40:03 596  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
15:40:03 597  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
15:40:03 598  
15:40:03 599  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
15:40:03 600  
15:40:03 601  	  IF var_percent_discount IS NOT NULL THEN
15:40:03 602  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
15:40:03 603  	  END IF;
15:40:03 604  
15:40:03 605  	  IF var_fixed_discount IS NOT NULL THEN
15:40:03 606  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
15:40:03 607  	  END IF;
15:40:03 608  
15:40:03 609  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
15:40:03 610  	END LOOP;
15:40:03 611  	var_final_amount := var_total_amount;
15:40:03 612  	RETURN var_final_amount;
15:40:03 613  
15:40:03 614  EXCEPTION
15:40:03 615  WHEN BAD_OFFER_ID THEN
15:40:03 616  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 617  	  SPROC_NAME, 'No such offer');
15:40:03 618  WHEN OTHERS THEN
15:40:03 619  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 620  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 621  END CALCULATE_OFFER_AMOUNT;
15:40:03 622  
15:40:03 623  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
15:40:03 624  	in_offer_chain_id IN NUMBER
15:40:03 625  ) RETURN NUMBER AS
15:40:03 626  -- VARIABLES
15:40:03 627  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
15:40:03 628  temp_offer_chain_id    NUMBER;
15:40:03 629  var_first_offer_id     NUMBER;
15:40:03 630  -- EXCEPTIONS
15:40:03 631  BAD_OFFER_CHAIN_ID      EXCEPTION;
15:40:03 632  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
15:40:03 633  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:40:03 634  BEGIN
15:40:03 635  
15:40:03 636  	BEGIN
15:40:03 637  	  SELECT
15:40:03 638  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 639  	  FROM
15:40:03 640  	    OFFER_CHAIN
15:40:03 641  	  WHERE
15:40:03 642  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:40:03 643  	  EXCEPTION
15:40:03 644  	    WHEN NO_DATA_FOUND THEN
15:40:03 645  	      RAISE BAD_OFFER_CHAIN_ID;
15:40:03 646  	END;
15:40:03 647  
15:40:03 648  	BEGIN
15:40:03 649  	  PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER(
15:40:03 650  	    in_offer_chain_id => in_offer_chain_id,
15:40:03 651  	    out_offer_id      => var_first_offer_id
15:40:03 652  	  );
15:40:03 653  	  EXCEPTION
15:40:03 654  	    WHEN OTHERS THEN
15:40:03 655  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:03 656  	      RAISE CAN_NOT_GET_FIRST_OFFER;
15:40:03 657  	END;
15:40:03 658  
15:40:03 659  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
15:40:03 660  
15:40:03 661  EXCEPTION
15:40:03 662  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:03 663  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 664  	  SPROC_NAME, 'No such offer chain');
15:40:03 665  WHEN CAN_NOT_GET_FIRST_OFFER THEN
15:40:03 666  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 667  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
15:40:03 668  WHEN OTHERS THEN
15:40:03 669  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 670  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 671  END CALCULATE_OFFER_CHAIN_AMOUNT;
15:40:03 672  
15:40:03 673  FUNCTION GET_FIRST_OFFER_INDEX (
15:40:03 674  	in_offer_chain_id IN NUMBER
15:40:03 675  ) RETURN NUMBER AS
15:40:03 676  -- VARIABLES
15:40:03 677  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
15:40:03 678  var_first_offer_index NUMBER;
15:40:03 679  BEGIN
15:40:03 680  
15:40:03 681  	SELECT
15:40:03 682  	  INDEX_VALUE into var_first_offer_index
15:40:03 683  	FROM (
15:40:03 684  	  SELECT
15:40:03 685  	    OFFER_OFFER_CHAIN.INDEX_VALUE
15:40:03 686  	  FROM
15:40:03 687  	    OFFER_OFFER_CHAIN
15:40:03 688  	  WHERE
15:40:03 689  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 690  	  ORDER BY
15:40:03 691  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
15:40:03 692  	)
15:40:03 693  	WHERE
15:40:03 694  	  ROWNUM <= 1;
15:40:03 695  
15:40:03 696  	RETURN var_first_offer_index;
15:40:03 697  
15:40:03 698  EXCEPTION
15:40:03 699  WHEN NO_DATA_FOUND THEN
15:40:03 700  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 701  	  SPROC_NAME, 'No such offer chain');
15:40:03 702  WHEN OTHERS THEN
15:40:03 703  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 704  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 705  END GET_FIRST_OFFER_INDEX;
15:40:03 706  
15:40:03 707  FUNCTION GET_NEXT_OFFER_INDEX (
15:40:03 708  	in_offer_chain_id	     IN NUMBER,
15:40:03 709  	in_offer_chain_current_index IN NUMBER
15:40:03 710  ) RETURN NUMBER AS
15:40:03 711  -- VARIABLES
15:40:03 712  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
15:40:03 713  temp_offer_chain_id	     NUMBER;
15:40:03 714  temp_offer_chain_current_index NUMBER;
15:40:03 715  var_result		     NUMBER;
15:40:03 716  -- EXCEPTIONS
15:40:03 717  BAD_OFFER_CHAIN_ID      EXCEPTION;
15:40:03 718  BAD_CURRENT_INDEX_VALUE EXCEPTION;
15:40:03 719  BEGIN
15:40:03 720  
15:40:03 721  	-- Check that offer chain exists
15:40:03 722  	BEGIN
15:40:03 723  	  SELECT
15:40:03 724  	    OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 725  	  FROM
15:40:03 726  	    OFFER_CHAIN
15:40:03 727  	  WHERE
15:40:03 728  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:40:03 729  	  EXCEPTION
15:40:03 730  	    WHEN NO_DATA_FOUND THEN
15:40:03 731  	      RAISE BAD_OFFER_CHAIN_ID;
15:40:03 732  	END;
15:40:03 733  
15:40:03 734  	-- Check that current offer index exists
15:40:03 735  	BEGIN
15:40:03 736  	  SELECT
15:40:03 737  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
15:40:03 738  	  FROM
15:40:03 739  	    OFFER_OFFER_CHAIN
15:40:03 740  	  WHERE
15:40:03 741  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 742  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
15:40:03 743  	    -- TODO: delete next line
15:40:03 744  	    AND ROWNUM <= 1;
15:40:03 745  	  EXCEPTION
15:40:03 746  	    WHEN NO_DATA_FOUND THEN
15:40:03 747  	      RAISE BAD_CURRENT_INDEX_VALUE;
15:40:03 748  	END;
15:40:03 749  
15:40:03 750  	-- Get next offer index
15:40:03 751  	BEGIN
15:40:03 752  	  SELECT
15:40:03 753  	    INDEX_VALUE into var_result
15:40:03 754  	  FROM (
15:40:03 755  	    SELECT
15:40:03 756  	      OFFER_OFFER_CHAIN.INDEX_VALUE
15:40:03 757  	    FROM
15:40:03 758  	      OFFER_OFFER_CHAIN
15:40:03 759  	    WHERE
15:40:03 760  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 761  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
15:40:03 762  	    ORDER BY
15:40:03 763  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
15:40:03 764  	  )
15:40:03 765  	  WHERE
15:40:03 766  	    ROWNUM <= 1;
15:40:03 767  	  EXCEPTION
15:40:03 768  	    WHEN NO_DATA_FOUND THEN
15:40:03 769  	      var_result := NULL;
15:40:03 770  	END;
15:40:03 771  
15:40:03 772  	RETURN var_result;
15:40:03 773  
15:40:03 774  EXCEPTION
15:40:03 775  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:03 776  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 777  	  SPROC_NAME, 'No such offer chain');
15:40:03 778  WHEN BAD_CURRENT_INDEX_VALUE THEN
15:40:03 779  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:03 780  	  SPROC_NAME, 'Bad current index value');
15:40:03 781  WHEN OTHERS THEN
15:40:03 782  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 784  END GET_NEXT_OFFER_INDEX;
15:40:03 785  
15:40:03 786  PROCEDURE P_GET_NEXT_OFFER_INDEX (
15:40:03 787  	in_offer_chain_id	     IN NUMBER,
15:40:03 788  	in_offer_chain_current_index IN NUMBER,
15:40:03 789  	out_next_offer_index	     OUT NUMBER
15:40:03 790  ) AS
15:40:03 791  BEGIN
15:40:03 792  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
15:40:03 793  	  in_offer_chain_id,
15:40:03 794  	  in_offer_chain_current_index
15:40:03 795  	);
15:40:03 796  END P_GET_NEXT_OFFER_INDEX;
15:40:03 797  
15:40:03 798  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
15:40:03 799  	in_license_id		     IN NUMBER,
15:40:03 800  	in_offer_chain_current_index IN NUMBER,
15:40:03 801  	out_next_offer_index	     OUT NUMBER
15:40:03 802  ) AS
15:40:03 803  -- VARIABLES
15:40:03 804  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
15:40:03 805  var_offer_chain_id NUMBER;
15:40:03 806  -- EXCEPTIONS
15:40:03 807  BAD_LICENSE_ID		   EXCEPTION;
15:40:03 808  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
15:40:03 809  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
15:40:03 810  BEGIN
15:40:03 811  
15:40:03 812  	BEGIN
15:40:03 813  	  SELECT
15:40:03 814  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
15:40:03 815  	  FROM
15:40:03 816  	    SUBSCRIPTION
15:40:03 817  	  WHERE
15:40:03 818  	    SUBSCRIPTION.ID = (
15:40:03 819  	      SELECT
15:40:03 820  		LICENSE.SUBSCRIPTION_ID
15:40:03 821  	      FROM
15:40:03 822  		LICENSE
15:40:03 823  	      WHERE
15:40:03 824  		LICENSE.ID = in_license_id
15:40:03 825  	    );
15:40:03 826  	  EXCEPTION
15:40:03 827  	    WHEN NO_DATA_FOUND THEN
15:40:03 828  	      RAISE BAD_LICENSE_ID;
15:40:03 829  	END;
15:40:03 830  
15:40:03 831  	BEGIN
15:40:03 832  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
15:40:03 833  	    var_offer_chain_id,
15:40:03 834  	    in_offer_chain_current_index
15:40:03 835  	  );
15:40:03 836  	  EXCEPTION
15:40:03 837  	    WHEN OTHERS THEN
15:40:03 838  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:03 839  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
15:40:03 840  	END;
15:40:03 841  
15:40:03 842  EXCEPTION
15:40:03 843  WHEN BAD_LICENSE_ID THEN
15:40:03 844  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 845  	  SPROC_NAME, 'No such license');
15:40:03 846  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
15:40:03 847  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:03 848  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
15:40:03 849  WHEN OTHERS THEN
15:40:03 850  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 851  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 852  END GET_NEXT_OFFER_INDEX_BY_LCNS;
15:40:03 853  
15:40:03 854  FUNCTION IS_OFFER_INDEX_EXISTS (
15:40:03 855  	in_offer_chain_id	   IN NUMBER,
15:40:03 856  	in_offer_chain_offer_index IN NUMBER
15:40:03 857  ) RETURN NUMBER AS
15:40:03 858  -- VARIABLES
15:40:03 859  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
15:40:03 860  temp_count NUMBER;
15:40:03 861  BEGIN
15:40:03 862  
15:40:03 863  	SELECT
15:40:03 864  	  COUNT(*) into temp_count
15:40:03 865  	FROM
15:40:03 866  	  OFFER_OFFER_CHAIN
15:40:03 867  	WHERE
15:40:03 868  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 869  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
15:40:03 870  
15:40:03 871  	IF temp_count > 0 THEN
15:40:03 872  	  RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:03 873  	ELSE
15:40:03 874  	  RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:03 875  	END IF;
15:40:03 876  
15:40:03 877  EXCEPTION
15:40:03 878  WHEN OTHERS THEN
15:40:03 879  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 880  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 881  END IS_OFFER_INDEX_EXISTS;
15:40:03 882  
15:40:03 883  PROCEDURE GET_OFFER_LENGTH (
15:40:03 884  	in_offer_id IN NUMBER,
15:40:03 885  	out_years   OUT NUMBER,
15:40:03 886  	out_months  OUT NUMBER,
15:40:03 887  	out_days    OUT NUMBER
15:40:03 888  ) AS
15:40:03 889  -- VARIABLES
15:40:03 890  var_offer_duration VARCHAR2(30);
15:40:03 891  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
15:40:03 892  -- EXCEPTIONS
15:40:03 893  BAD_OFFER_ID	     EXCEPTION;
15:40:03 894  CAN_NOT_PARSE_DURATION EXCEPTION;
15:40:03 895  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:40:03 896  BEGIN
15:40:03 897  
15:40:03 898  	BEGIN
15:40:03 899  	  SELECT
15:40:03 900  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
15:40:03 901  	  FROM
15:40:03 902  	    OFFER
15:40:03 903  	  WHERE
15:40:03 904  	    OFFER.ID = in_offer_id;
15:40:03 905  	  EXCEPTION
15:40:03 906  	    WHEN NO_DATA_FOUND THEN
15:40:03 907  	      RAISE BAD_OFFER_ID;
15:40:03 908  	END;
15:40:03 909  
15:40:03 910  	BEGIN
15:40:03 911  	  PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(
15:40:03 912  	    var_offer_duration,
15:40:03 913  	    out_years,
15:40:03 914  	    out_months,
15:40:03 915  	    out_days
15:40:03 916  	  );
15:40:03 917  	  EXCEPTION
15:40:03 918  	    WHEN OTHERS THEN
15:40:03 919  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:03 920  	      RAISE CAN_NOT_PARSE_DURATION;
15:40:03 921  	END;
15:40:03 922  
15:40:03 923  EXCEPTION
15:40:03 924  WHEN BAD_OFFER_ID THEN
15:40:03 925  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 926  	  SPROC_NAME, 'No such offer');
15:40:03 927  WHEN CAN_NOT_PARSE_DURATION THEN
15:40:03 928  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:03 929  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
15:40:03 930  WHEN OTHERS THEN
15:40:03 931  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 933  END GET_OFFER_LENGTH;
15:40:03 934  
15:40:03 935  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
15:40:03 936  	in_offer_id   IN NUMBER,
15:40:03 937  	in_start_date IN DATE DEFAULT SYSDATE,
15:40:03 938  	out_days      OUT NUMBER
15:40:03 939  ) AS
15:40:03 940  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
15:40:03 941  -- VARIABLES
15:40:03 942  var_offer_duration VARCHAR2(30);
15:40:03 943  var_offer_years	 NUMBER;
15:40:03 944  var_offer_months	 NUMBER;
15:40:03 945  var_offer_days	 NUMBER;
15:40:03 946  var_offer_end_date DATE;
15:40:03 947  -- EXCEPTIONS
15:40:03 948  BAD_OFFER_ID EXCEPTION;
15:40:03 949  BEGIN
15:40:03 950  
15:40:03 951  	BEGIN
15:40:03 952  	  SELECT
15:40:03 953  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
15:40:03 954  	  FROM
15:40:03 955  	    OFFER
15:40:03 956  	  WHERE
15:40:03 957  	    OFFER.ID = in_offer_id;
15:40:03 958  	  EXCEPTION
15:40:03 959  	    WHEN NO_DATA_FOUND THEN
15:40:03 960  	      RAISE BAD_OFFER_ID;
15:40:03 961  	END;
15:40:03 962  
15:40:03 963  	PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS (
15:40:03 964  	  var_offer_duration,
15:40:03 965  	  var_offer_years,
15:40:03 966  	  var_offer_months,
15:40:03 967  	  var_offer_days
15:40:03 968  	);
15:40:03 969  
15:40:03 970  	var_offer_end_date := ( ( in_start_date
15:40:03 971  	  + GLOBAL_CONSTANTS_V23.ONE_DAY_INTERVAL * var_offer_days )
15:40:03 972  	  + GLOBAL_CONSTANTS_V23.ONE_MONTH_INTERVAL * var_offer_months )
15:40:03 973  	  + GLOBAL_CONSTANTS_V23.ONE_YEAR_INTERVAL * var_offer_years;
15:40:03 974  
15:40:03 975  	out_days := var_offer_end_date - in_start_date;
15:40:03 976  
15:40:03 977  EXCEPTION
15:40:03 978  WHEN BAD_OFFER_ID THEN
15:40:03 979  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 980  	  SPROC_NAME, 'No such offer');
15:40:03 981  WHEN OTHERS THEN
15:40:03 982  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 983  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 984  END GET_OFFER_LENGTH_IN_DAYS;
15:40:03 985  
15:40:03 986  PROCEDURE GET_OFFER_PRODUCTS (
15:40:03 987  	in_offer_id    IN NUMBER,
15:40:03 988  	out_result_set OUT SYS_REFCURSOR
15:40:03 989  ) AS
15:40:03 990  -- VARIABLES
15:40:03 991  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
15:40:03 992  temp_offerr_id NUMBER;
15:40:03 993  -- EXCEPTIONS
15:40:03 994  BAD_OFFER_ID EXCEPTION;
15:40:03 995  BEGIN
15:40:03 996  
15:40:03 997  	BEGIN
15:40:03 998  	  SELECT
15:40:03 999  	    OFFER.ID into temp_offerr_id
15:40:03 1000  	   FROM
15:40:03 1001  	     OFFER
15:40:03 1002  	   WHERE
15:40:03 1003  	     OFFER.ID = in_offer_id;
15:40:03 1004  	   EXCEPTION
15:40:03 1005  	     WHEN NO_DATA_FOUND THEN
15:40:03 1006  	       RAISE BAD_OFFER_ID;
15:40:03 1007  	 END;
15:40:03 1008  
15:40:03 1009  	 OPEN out_result_set FOR
15:40:03 1010  	 SELECT DISTINCT
15:40:03 1011  	   PRODUCT.ID,
15:40:03 1012  	   PRODUCT.NAME
15:40:03 1013  	 FROM
15:40:03 1014  	   PRODUCT
15:40:03 1015  	 WHERE
15:40:03 1016  	   PRODUCT.ID IN (
15:40:03 1017  	       SELECT
15:40:03 1018  		 PRODUCT_OFFERING.PRODUCT_ID
15:40:03 1019  	       FROM
15:40:03 1020  		 OFFER_PRODUCT_OFFERING
15:40:03 1021  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:40:03 1022  	       WHERE
15:40:03 1023  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
15:40:03 1024  	     );
15:40:03 1025  
15:40:03 1026  EXCEPTION
15:40:03 1027  WHEN BAD_OFFER_ID THEN
15:40:03 1028  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1029  	   SPROC_NAME, 'No such offer');
15:40:03 1030  WHEN OTHERS THEN
15:40:03 1031  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1032  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1033  END GET_OFFER_PRODUCTS;
15:40:03 1034  
15:40:03 1035  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
15:40:03 1036  	 in_offer_chain_id IN NUMBER,
15:40:03 1037  	 out_result_set    OUT SYS_REFCURSOR
15:40:03 1038  ) AS
15:40:03 1039  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
15:40:03 1040  -- VARIABLES
15:40:03 1041  temp_offer_chain_id NUMBER;
15:40:03 1042  -- EXCEPTIONS
15:40:03 1043  BAD_OFFER_CHAIN_ID EXCEPTION;
15:40:03 1044  BEGIN
15:40:03 1045  
15:40:03 1046  	 BEGIN
15:40:03 1047  	   SELECT
15:40:03 1048  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 1049  	   FROM
15:40:03 1050  	     OFFER_CHAIN
15:40:03 1051  	   WHERE
15:40:03 1052  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:40:03 1053  	   EXCEPTION
15:40:03 1054  	     WHEN NO_DATA_FOUND THEN
15:40:03 1055  	       RAISE BAD_OFFER_CHAIN_ID;
15:40:03 1056  	 END;
15:40:03 1057  
15:40:03 1058  	 OPEN out_result_set FOR
15:40:03 1059  	 SELECT
15:40:03 1060  	   PRODUCT_OFFERING.ID,
15:40:03 1061  	   PRODUCT_OFFERING.PRODUCT_ID,
15:40:03 1062  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
15:40:03 1063  	   PRODUCT_OFFERING.UNIT_PRICE,
15:40:03 1064  	   PRODUCT_OFFERING.QUANTITY,
15:40:03 1065  	   PRODUCT_OFFERING.CREATE_DATE,
15:40:03 1066  	   PRODUCT_OFFERING.CREATED_BY,
15:40:03 1067  	   PRODUCT.ID P_ID,
15:40:03 1068  	   PRODUCT.NAME,
15:40:03 1069  	   PRODUCT.TAX_CATEGORY_ID,
15:40:03 1070  	   PRODUCT.ENTITLEMENT,
15:40:03 1071  	   PRODUCT.IS_SHAREABLE,
15:40:03 1072  	   PRODUCT.PRODUCT_STATUS_ID,
15:40:03 1073  	   PRODUCT.DEFAULT_VAT_RATE
15:40:03 1074  	 FROM
15:40:03 1075  	   PRODUCT_OFFERING
15:40:03 1076  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:40:03 1077  	 WHERE
15:40:03 1078  	   PRODUCT_OFFERING.ID IN (
15:40:03 1079  	     SELECT DISTINCT
15:40:03 1080  	       PRODUCT_OFFERING_ID
15:40:03 1081  	     FROM
15:40:03 1082  	       OFFER_PRODUCT_OFFERING
15:40:03 1083  	     WHERE
15:40:03 1084  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:40:03 1085  		 SELECT DISTINCT
15:40:03 1086  		   OFFER_ID
15:40:03 1087  		 FROM
15:40:03 1088  		   OFFER_OFFER_CHAIN
15:40:03 1089  		 WHERE
15:40:03 1090  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 1091  	       )
15:40:03 1092  	   );
15:40:03 1093  
15:40:03 1094  EXCEPTION
15:40:03 1095  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:03 1096  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1097  	   SPROC_NAME, 'Bad offer chain id');
15:40:03 1098  WHEN OTHERS THEN
15:40:03 1099  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1100  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1101  END GET_OFFER_CHAIN_PROD_OFFERINGS;
15:40:03 1102  
15:40:03 1103  FUNCTION CHECK_FOR_SAME_PRODUCTS (
15:40:03 1104  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
15:40:03 1105  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
15:40:03 1106  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
15:40:03 1107  ) RETURN NUMBER AS
15:40:03 1108  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
15:40:03 1109  -- CONSTANTS
15:40:03 1110  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
15:40:03 1111  -- VARIABLES
15:40:03 1112  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
15:40:03 1113  var_same_products	SYS_REFCURSOR;
15:40:03 1114  var_same_product_id	NUMBER;
15:40:03 1115  same_product_count	NUMBER;
15:40:03 1116  var_product_eligibility_limit NUMBER := 1;
15:40:03 1117  -- EXCEPTIONS
15:40:03 1118  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
15:40:03 1119  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
15:40:03 1120  BEGIN
15:40:03 1121  
15:40:03 1122  	 -- Check that first offer chain exists
15:40:03 1123  	 BEGIN
15:40:03 1124  	   SELECT
15:40:03 1125  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 1126  	   FROM
15:40:03 1127  	     OFFER_CHAIN
15:40:03 1128  	   WHERE
15:40:03 1129  	     OFFER_CHAIN.ID = in_offer_chain_1;
15:40:03 1130  	   EXCEPTION
15:40:03 1131  	     WHEN NO_DATA_FOUND THEN
15:40:03 1132  	       RAISE BAD_FIRST_OFFER_CHAIN;
15:40:03 1133  	 END;
15:40:03 1134  
15:40:03 1135  	 -- Check that second offer chain exists
15:40:03 1136  	 BEGIN
15:40:03 1137  	   SELECT
15:40:03 1138  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 1139  	   FROM
15:40:03 1140  	     OFFER_CHAIN
15:40:03 1141  	   WHERE
15:40:03 1142  	     OFFER_CHAIN.ID = in_offer_chain_2;
15:40:03 1143  	   EXCEPTION
15:40:03 1144  	     WHEN NO_DATA_FOUND THEN
15:40:03 1145  	       RAISE BAD_SECOND_OFFER_CHAIN;
15:40:03 1146  	 END;
15:40:03 1147  
15:40:03 1148  	 PROCS_OFFER_CHAIN_V23.GET_OFF_CHAINS_SAME_PRODUCTS(
15:40:03 1149  	   in_offer_chain_1 => in_offer_chain_1,
15:40:03 1150  	   in_offer_chain_2 => in_offer_chain_2,
15:40:03 1151  	   out_result_set   => var_same_products
15:40:03 1152  	 );
15:40:03 1153  
15:40:03 1154  	 LOOP
15:40:03 1155  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
15:40:03 1156  	   EXIT WHEN var_same_products%NOTFOUND;
15:40:03 1157  
15:40:03 1158  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:03 1159  	     -- Return false because this offer chains having same products
15:40:03 1160  	     RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:03 1161  	   ELSE
15:40:03 1162  	     -- Check for limit
15:40:03 1163  	     IF var_product_eligibility_limit < same_product_count THEN
15:40:03 1164  	       RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:03 1165  	     END IF;
15:40:03 1166  
15:40:03 1167  	   END IF;
15:40:03 1168  	 END LOOP;
15:40:03 1169  
15:40:03 1170  	 RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:03 1171  
15:40:03 1172  EXCEPTION
15:40:03 1173  WHEN BAD_FIRST_OFFER_CHAIN THEN
15:40:03 1174  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1175  	   SPROC_NAME, 'First offer chain not found');
15:40:03 1176  WHEN BAD_SECOND_OFFER_CHAIN THEN
15:40:03 1177  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1178  	   SPROC_NAME, 'Second offer chain not found');
15:40:03 1179  WHEN OTHERS THEN
15:40:03 1180  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1181  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1182  END CHECK_FOR_SAME_PRODUCTS;
15:40:03 1183  
15:40:03 1184  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
15:40:03 1185  	 in_offer_chain_id IN NUMBER
15:40:03 1186  ) RETURN NUMBER AS
15:40:03 1187  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
15:40:03 1188  -- VARIABLES
15:40:03 1189  var_is_cancelable_str VARCHAR2(1);
15:40:03 1190  var_is_cancelable     NUMBER;
15:40:03 1191  BEGIN
15:40:03 1192  
15:40:03 1193  	 BEGIN
15:40:03 1194  	   SELECT
15:40:03 1195  	     VALUE INTO var_is_cancelable_str
15:40:03 1196  	   FROM (
15:40:03 1197  	     SELECT
15:40:03 1198  	       VALUE, NAME
15:40:03 1199  	     FROM
15:40:03 1200  	       OFFER_CHAIN_META_DATA
15:40:03 1201  	     WHERE
15:40:03 1202  	       OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 1203  	     )
15:40:03 1204  	   WHERE
15:40:03 1205  	     UPPER(NAME) = 'CANCELABLE';
15:40:03 1206  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
15:40:03 1207  	   EXCEPTION
15:40:03 1208  	     WHEN NO_DATA_FOUND THEN
15:40:03 1209  	       var_is_cancelable := GLOBAL_CONSTANTS_V23.FALSE;
15:40:03 1210  	 END;
15:40:03 1211  
15:40:03 1212  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:03 1213  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:03 1214  	 END IF;
15:40:03 1215  
15:40:03 1216  	 RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:03 1217  
15:40:03 1218  EXCEPTION
15:40:03 1219  WHEN OTHERS THEN
15:40:03 1220  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1221  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1222  END IS_OFFER_CHAIN_CANCELABLE;
15:40:03 1223  
15:40:03 1224  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
15:40:03 1225  	 in_offer_chain_id IN NUMBER
15:40:03 1226  ) RETURN NUMBER AS
15:40:03 1227  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
15:40:03 1228  -- VARIABLES
15:40:03 1229  var_max_concurrent_subs_str VARCHAR2(100);
15:40:03 1230  var_max_concurrent_subs	   NUMBER;
15:40:03 1231  BEGIN
15:40:03 1232  
15:40:03 1233  	 BEGIN
15:40:03 1234  	   SELECT
15:40:03 1235  	     VALUE into var_max_concurrent_subs_str
15:40:03 1236  	   FROM
15:40:03 1237  	     (
15:40:03 1238  	       SELECT
15:40:03 1239  		 NAME,
15:40:03 1240  		 VALUE
15:40:03 1241  	       FROM
15:40:03 1242  		 OFFER_CHAIN_ELIGIBILITY
15:40:03 1243  	       WHERE
15:40:03 1244  		 OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 1245  	     )
15:40:03 1246  	   WHERE
15:40:03 1247  	     NAME LIKE GLOBAL_CONSTANTS_V23.MAX_CONCURRENT_SUBS;
15:40:03 1248  
15:40:03 1249  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V23.MAX_CONCURRENT_SUBS_UNLIM THEN
15:40:03 1250  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V23.INFINITY;
15:40:03 1251  	   ELSE
15:40:03 1252  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
15:40:03 1253  	   END IF;
15:40:03 1254  
15:40:03 1255  	   EXCEPTION
15:40:03 1256  	     WHEN NO_DATA_FOUND THEN
15:40:03 1257  	       var_max_concurrent_subs := 1;
15:40:03 1258  	 END;
15:40:03 1259  
15:40:03 1260  	 RETURN var_max_concurrent_subs;
15:40:03 1261  
15:40:03 1262  EXCEPTION
15:40:03 1263  WHEN OTHERS THEN
15:40:03 1264  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1265  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1266  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
15:40:03 1267  
15:40:03 1268  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
15:40:03 1269  	 in_offer_chain_id   IN NUMBER,
15:40:03 1270  	 in_eligibility_name IN VARCHAR2,
15:40:03 1271  	 out_result_set      OUT SYS_REFCURSOR
15:40:03 1272  ) AS
15:40:03 1273  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
15:40:03 1274  -- VARIABLES
15:40:03 1275  temp_offer_chain_id NUMBER;
15:40:03 1276  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
15:40:03 1277  -- EXCEPTIONS
15:40:03 1278  BAD_OFFER_CHAIN_ID EXCEPTION;
15:40:03 1279  BEGIN
15:40:03 1280  
15:40:03 1281  	 BEGIN
15:40:03 1282  	   SELECT
15:40:03 1283  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 1284  	   FROM
15:40:03 1285  	     OFFER_CHAIN
15:40:03 1286  	   WHERE
15:40:03 1287  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:40:03 1288  	   EXCEPTION
15:40:03 1289  	     WHEN NO_DATA_FOUND THEN
15:40:03 1290  	       RAISE BAD_OFFER_CHAIN_ID;
15:40:03 1291  	 END;
15:40:03 1292  
15:40:03 1293  	 var_eligibility_name := UPPER(in_eligibility_name);
15:40:03 1294  
15:40:03 1295  	 OPEN out_result_set FOR
15:40:03 1296  	 SELECT
15:40:03 1297  	   OFFER_CHAIN_ELIGIBILITY.ID,
15:40:03 1298  	   OFFER_CHAIN_ELIGIBILITY.NAME,
15:40:03 1299  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
15:40:03 1300  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
15:40:03 1301  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
15:40:03 1302  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
15:40:03 1303  	 FROM
15:40:03 1304  	   OFFER_CHAIN_ELIGIBILITY
15:40:03 1305  	 WHERE
15:40:03 1306  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 1307  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
15:40:03 1308  
15:40:03 1309  EXCEPTION
15:40:03 1310  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:03 1311  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1312  	   SPROC_NAME, 'No such offer chain');
15:40:03 1313  WHEN OTHERS THEN
15:40:03 1314  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1315  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1316  END GET_OFFER_CHAIN_ELIGIBILITY;
15:40:03 1317  
15:40:03 1318  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
15:40:03 1319  	 in_offer_chain_ids  IN VARCHAR2,
15:40:03 1320  	 in_eligibility_name IN VARCHAR2,
15:40:03 1321  	 out_result_set      OUT SYS_REFCURSOR
15:40:03 1322  ) AS
15:40:03 1323  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
15:40:03 1324  -- VARIABLES
15:40:03 1325  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
15:40:03 1326  BEGIN
15:40:03 1327  
15:40:03 1328  	 var_eligibility_name := UPPER(in_eligibility_name);
15:40:03 1329  
15:40:03 1330  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
15:40:03 1331  
15:40:03 1332  	 open out_result_set for
15:40:03 1333  	 'SELECT
15:40:03 1334  	   ID,
15:40:03 1335  	   NAME,
15:40:03 1336  	   VALUE,
15:40:03 1337  	   OFFER_CHAIN_ID,
15:40:03 1338  	   CREATE_DATE,
15:40:03 1339  	   CREATED_BY
15:40:03 1340  	 FROM
15:40:03 1341  	   OFFER_CHAIN_ELIGIBILITY
15:40:03 1342  	 WHERE
15:40:03 1343  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
15:40:03 1344  	   AND UPPER(NAME) = :1'
15:40:03 1345  	 using var_eligibility_name;
15:40:03 1346  
15:40:03 1347  EXCEPTION
15:40:03 1348  WHEN OTHERS THEN
15:40:03 1349  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1350  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1351  END GET_OFFER_CHAINS_ELIGIBILITY;
15:40:03 1352  
15:40:03 1353  PROCEDURE GET_OFFER_CHAINS_META_DATA (
15:40:03 1354  	 in_offer_chain_ids IN VARCHAR2,
15:40:03 1355  	 in_meta_data_name  IN VARCHAR2,
15:40:03 1356  	 out_result_set     OUT SYS_REFCURSOR
15:40:03 1357  ) AS
15:40:03 1358  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
15:40:03 1359  -- VARIABLES
15:40:03 1360  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
15:40:03 1361  BEGIN
15:40:03 1362  
15:40:03 1363  	 var_meta_data_name := UPPER(in_meta_data_name);
15:40:03 1364  
15:40:03 1365  	 open out_result_set for
15:40:03 1366  	 'select
15:40:03 1367  	   ID,
15:40:03 1368  	   NAME,
15:40:03 1369  	   VALUE,
15:40:03 1370  	   OFFER_CHAIN_ID,
15:40:03 1371  	   CREATED_BY,
15:40:03 1372  	   CREATE_DATE
15:40:03 1373  	 from
15:40:03 1374  	   OFFER_CHAIN_META_DATA
15:40:03 1375  	 where
15:40:03 1376  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
15:40:03 1377  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
15:40:03 1378  	 using var_meta_data_name;
15:40:03 1379  
15:40:03 1380  EXCEPTION
15:40:03 1381  WHEN OTHERS THEN
15:40:03 1382  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1383  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1384  END GET_OFFER_CHAINS_META_DATA;
15:40:03 1385  
15:40:03 1386  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:40:03 1387  	 in_offer_chain_id IN NUMBER,
15:40:03 1388  	 in_meta_data_name IN VARCHAR2,
15:40:03 1389  	 out_result_set    OUT SYS_REFCURSOR
15:40:03 1390  ) AS
15:40:03 1391  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
15:40:03 1392  -- VARIABLES
15:40:03 1393  temp_offer_chain_id NUMBER;
15:40:03 1394  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
15:40:03 1395  -- EXCEPTIONS
15:40:03 1396  BAD_OFFER_CHAIN_ID EXCEPTION;
15:40:03 1397  BEGIN
15:40:03 1398  
15:40:03 1399  	 BEGIN
15:40:03 1400  	   SELECT
15:40:03 1401  	     OFFER_CHAIN.ID into temp_offer_chain_id
15:40:03 1402  	   FROM
15:40:03 1403  	     OFFER_CHAIN
15:40:03 1404  	   WHERE
15:40:03 1405  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:40:03 1406  	   EXCEPTION
15:40:03 1407  	     WHEN NO_DATA_FOUND THEN
15:40:03 1408  	       RAISE BAD_OFFER_CHAIN_ID;
15:40:03 1409  	 END;
15:40:03 1410  
15:40:03 1411  	 var_meta_data_name := UPPER(in_meta_data_name);
15:40:03 1412  
15:40:03 1413  	 OPEN out_result_set FOR
15:40:03 1414  	 SELECT
15:40:03 1415  	   OFFER_CHAIN_META_DATA.ID,
15:40:03 1416  	   OFFER_CHAIN_META_DATA.NAME,
15:40:03 1417  	   OFFER_CHAIN_META_DATA.VALUE,
15:40:03 1418  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
15:40:03 1419  	   OFFER_CHAIN_META_DATA.CREATED_BY,
15:40:03 1420  	   OFFER_CHAIN_META_DATA.CREATE_DATE
15:40:03 1421  	 FROM
15:40:03 1422  	   OFFER_CHAIN_META_DATA
15:40:03 1423  	 WHERE
15:40:03 1424  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 1425  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
15:40:03 1426  
15:40:03 1427  EXCEPTION
15:40:03 1428  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:03 1429  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1430  	   SPROC_NAME, 'No such offer chain');
15:40:03 1431  WHEN OTHERS THEN
15:40:03 1432  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1433  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1434  END GET_OFFER_CHAIN_META_DATA;
15:40:03 1435  
15:40:03 1436  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
15:40:03 1437  	 in_offer_id	IN NUMBER,
15:40:03 1438  	 out_result_set OUT SYS_REFCURSOR
15:40:03 1439  ) AS
15:40:03 1440  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
15:40:03 1441  -- VARIABLES
15:40:03 1442  temp_offer_id NUMBER;
15:40:03 1443  -- EXCEPTIONS
15:40:03 1444  BAD_OFFER_ID EXCEPTION;
15:40:03 1445  BEGIN
15:40:03 1446  
15:40:03 1447  	 BEGIN
15:40:03 1448  	   SELECT
15:40:03 1449  	     OFFER.ID into temp_offer_id
15:40:03 1450  	   FROM
15:40:03 1451  	     OFFER
15:40:03 1452  	   WHERE
15:40:03 1453  	     OFFER.ID = in_offer_id;
15:40:03 1454  	   EXCEPTION
15:40:03 1455  	     WHEN NO_DATA_FOUND THEN
15:40:03 1456  	       RAISE BAD_OFFER_ID;
15:40:03 1457  	 END;
15:40:03 1458  
15:40:03 1459  	 OPEN out_result_set FOR
15:40:03 1460  	 SELECT DISTINCT
15:40:03 1461  	   PRODUCT_OFFERING.ID,
15:40:03 1462  	   PRODUCT_OFFERING.PRODUCT_ID,
15:40:03 1463  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
15:40:03 1464  	   PRODUCT_OFFERING.UNIT_PRICE,
15:40:03 1465  	   PRODUCT_OFFERING.QUANTITY,
15:40:03 1466  	   PRODUCT_OFFERING.CREATE_DATE,
15:40:03 1467  	   PRODUCT_OFFERING.CREATED_BY,
15:40:03 1468  	   PRODUCT.ID P_ID,
15:40:03 1469  	   PRODUCT.NAME,
15:40:03 1470  	   PRODUCT.TAX_CATEGORY_ID,
15:40:03 1471  	   PRODUCT.ENTITLEMENT,
15:40:03 1472  	   PRODUCT.IS_SHAREABLE,
15:40:03 1473  	   PRODUCT.PRODUCT_STATUS_ID,
15:40:03 1474  	   PRODUCT.DEFAULT_VAT_RATE
15:40:03 1475  	 FROM
15:40:03 1476  	   OFFER_PRODUCT_OFFERING
15:40:03 1477  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:40:03 1478  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:40:03 1479  	 WHERE
15:40:03 1480  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
15:40:03 1481  
15:40:03 1482  EXCEPTION
15:40:03 1483  WHEN BAD_OFFER_ID THEN
15:40:03 1484  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1485  	   SPROC_NAME, 'No such offer');
15:40:03 1486  WHEN OTHERS THEN
15:40:03 1487  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1488  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1489  END GET_PROD_OFFERINGS_BY_OFFER_ID;
15:40:03 1490  
15:40:03 1491  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
15:40:03 1492  	 in_offer_chain_1 IN NUMBER,
15:40:03 1493  	 in_offer_chain_2 IN NUMBER,
15:40:03 1494  	 out_result_set   OUT SYS_REFCURSOR
15:40:03 1495  ) AS
15:40:03 1496  BEGIN
15:40:03 1497  
15:40:03 1498  	 OPEN out_result_set FOR
15:40:03 1499  	 SELECT
15:40:03 1500  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
15:40:03 1501  	   COUNT_1 + COUNT_2	    AS "COUNT"
15:40:03 1502  	 FROM
15:40:03 1503  	   (
15:40:03 1504  	     SELECT
15:40:03 1505  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
15:40:03 1506  	       COUNT(*) 		   as "COUNT_1"
15:40:03 1507  	     FROM
15:40:03 1508  	       (
15:40:03 1509  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
15:40:03 1510  	       )
15:40:03 1511  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
15:40:03 1512  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:40:03 1513  	     GROUP BY
15:40:03 1514  	       PRODUCT_OFFERING.PRODUCT_ID
15:40:03 1515  	   )
15:40:03 1516  	   INNER JOIN
15:40:03 1517  	   (
15:40:03 1518  	     SELECT
15:40:03 1519  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
15:40:03 1520  	       COUNT(*) 		   as "COUNT_2"
15:40:03 1521  	     FROM
15:40:03 1522  	       (
15:40:03 1523  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
15:40:03 1524  	       )
15:40:03 1525  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
15:40:03 1526  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:40:03 1527  	     GROUP BY
15:40:03 1528  	       PRODUCT_OFFERING.PRODUCT_ID
15:40:03 1529  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
15:40:03 1530  
15:40:03 1531  END GET_OFF_CHAINS_SAME_PRODUCTS;
15:40:03 1532  
15:40:03 1533  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
15:40:03 1534  	 in_offer_chain_id IN NUMBER,
15:40:03 1535  	 in_meta_data_name IN VARCHAR2,
15:40:03 1536  	 out_value	   OUT VARCHAR2
15:40:03 1537  ) AS
15:40:03 1538  BEGIN
15:40:03 1539  	 BEGIN
15:40:03 1540  	   SELECT
15:40:03 1541  	     OFFER_CHAIN_META_DATA.VALUE into out_value
15:40:03 1542  	   FROM
15:40:03 1543  	     OFFER_CHAIN_META_DATA
15:40:03 1544  	   WHERE
15:40:03 1545  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 1546  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
15:40:03 1547  
15:40:03 1548  	   EXCEPTION
15:40:03 1549  	     WHEN NO_DATA_FOUND THEN
15:40:03 1550  	       out_value := NULL;
15:40:03 1551  	 END;
15:40:03 1552  END GET_OFFER_CHAIN_MD_VALUE;
15:40:03 1553  
15:40:03 1554  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
15:40:03 1555  	 in_offer_chain_id   IN NUMBER,
15:40:03 1556  	 in_eligibility_name IN VARCHAR2,
15:40:03 1557  	 out_value	     OUT VARCHAR2
15:40:03 1558  ) AS
15:40:03 1559  BEGIN
15:40:03 1560  	 BEGIN
15:40:03 1561  	   SELECT
15:40:03 1562  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
15:40:03 1563  	   FROM
15:40:03 1564  	     OFFER_CHAIN_ELIGIBILITY
15:40:03 1565  	   WHERE
15:40:03 1566  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 1567  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
15:40:03 1568  
15:40:03 1569  	   EXCEPTION
15:40:03 1570  	     WHEN NO_DATA_FOUND THEN
15:40:03 1571  	       out_value := NULL;
15:40:03 1572  	 END;
15:40:03 1573  END GET_OFFER_CHAIN_EL_VALUE;
15:40:03 1574  
15:40:03 1575  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
15:40:03 1576  	 in_offer_id	IN NUMBER,
15:40:03 1577  	 out_result_set OUT SYS_REFCURSOR
15:40:03 1578  ) AS
15:40:03 1579  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
15:40:03 1580  -- VARIABLES
15:40:03 1581  temp_offer_id NUMBER;
15:40:03 1582  -- EXCEPTIONS
15:40:03 1583  BAD_OFFER_ID EXCEPTION;
15:40:03 1584  BEGIN
15:40:03 1585  
15:40:03 1586  	 BEGIN
15:40:03 1587  	   SELECT
15:40:03 1588  	     OFFER.ID into temp_offer_id
15:40:03 1589  	   FROM
15:40:03 1590  	     OFFER
15:40:03 1591  	   WHERE
15:40:03 1592  	     OFFER.ID = in_offer_id;
15:40:03 1593  	   EXCEPTION
15:40:03 1594  	     WHEN NO_DATA_FOUND THEN
15:40:03 1595  	       RAISE BAD_OFFER_ID;
15:40:03 1596  	 END;
15:40:03 1597  
15:40:03 1598  	 OPEN out_result_set FOR
15:40:03 1599  	 SELECT
15:40:03 1600  	   PRODUCT_OFFERING.ID,
15:40:03 1601  	   PRODUCT_OFFERING.PRODUCT_ID,
15:40:03 1602  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
15:40:03 1603  	   PRODUCT_OFFERING.UNIT_PRICE,
15:40:03 1604  	   PRODUCT_OFFERING.QUANTITY,
15:40:03 1605  	   PRODUCT_OFFERING.CREATE_DATE,
15:40:03 1606  	   PRODUCT_OFFERING.CREATED_BY,
15:40:03 1607  	   PRODUCT.ID P_ID,
15:40:03 1608  	   PRODUCT.NAME,
15:40:03 1609  	   PRODUCT.TAX_CATEGORY_ID,
15:40:03 1610  	   PRODUCT.ENTITLEMENT,
15:40:03 1611  	   PRODUCT.IS_SHAREABLE,
15:40:03 1612  	   PRODUCT.PRODUCT_STATUS_ID,
15:40:03 1613  	   PRODUCT.DEFAULT_VAT_RATE
15:40:03 1614  	 FROM
15:40:03 1615  	   PRODUCT_OFFERING
15:40:03 1616  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:40:03 1617  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:40:03 1618  	 WHERE
15:40:03 1619  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
15:40:03 1620  
15:40:03 1621  EXCEPTION
15:40:03 1622  WHEN BAD_OFFER_ID THEN
15:40:03 1623  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1624  	   SPROC_NAME, 'No such offer');
15:40:03 1625  WHEN OTHERS THEN
15:40:03 1626  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1627  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1628  END GET_OFFER_PRODUCT_OFFERINGS;
15:40:03 1629  
15:40:03 1630  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
15:40:03 1631  	 in_meta_data_name  IN VARCHAR2,
15:40:03 1632  	 in_meta_data_value IN VARCHAR2,
15:40:03 1633  	 out_result_set     OUT SYS_REFCURSOR
15:40:03 1634  ) AS
15:40:03 1635  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
15:40:03 1636  -- VARIABLES
15:40:03 1637  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
15:40:03 1638  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
15:40:03 1639  BEGIN
15:40:03 1640  
15:40:03 1641  	 OPEN out_result_set FOR
15:40:03 1642  	 SELECT
15:40:03 1643  	   och.ID,
15:40:03 1644  	   och.NAME,
15:40:03 1645  	   och.DESCRIPTION,
15:40:03 1646  	   och.OFFER_CHAIN_STATUS_ID,
15:40:03 1647  	   PROCS_OFFER_CHAIN_V23.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
15:40:03 1648  	   och.ADOPTABILITY_WINDOW_START_DATE,
15:40:03 1649  	   och.ADOPTABILITY_WINDOW_END_DATE,
15:40:03 1650  	   PROCS_OFFER_CHAIN_V23.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
15:40:03 1651  	   och.IS_GIFT_CERTIFICATE,
15:40:03 1652  	   'false' as comf_offer_chain, -- TODO
15:40:03 1653  	   po.PRODUCT_ID,
15:40:03 1654  	   och.GROUP_ACCOUNT_TYPE_ID
15:40:03 1655  	 FROM
15:40:03 1656  	   OFFER_CHAIN och,
15:40:03 1657  	   OFFER_OFFER_CHAIN ooch,
15:40:03 1658  	   OFFER_PRODUCT_OFFERING opo,
15:40:03 1659  	   PRODUCT_OFFERING po
15:40:03 1660  	 WHERE
15:40:03 1661  	   och.ID = ooch.OFFER_CHAIN_ID
15:40:03 1662  	   and ooch.OFFER_ID = opo.OFFER_ID
15:40:03 1663  	   and opo.PRODUCT_OFFERING_ID = po.ID
15:40:03 1664  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE
15:40:03 1665  	   and och.id in (
15:40:03 1666  	     SELECT DISTINCT
15:40:03 1667  	       och2.id
15:40:03 1668  	     from
15:40:03 1669  	       offer_chain och2
15:40:03 1670  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
15:40:03 1671  	     where
15:40:03 1672  	       UPPER(ochmd.name) = v_meta_data_name
15:40:03 1673  	       AND UPPER(ochmd.value) = v_meta_data_value
15:40:03 1674  	   );
15:40:03 1675  
15:40:03 1676  EXCEPTION
15:40:03 1677  WHEN OTHERS THEN
15:40:03 1678  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1679  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1680  END GET_OFFER_CHAINS_BY_META_DATA;
15:40:03 1681  
15:40:03 1682  PROCEDURE GET_ALL_META_DATA (
15:40:03 1683  	 in_offer_chain_id IN NUMBER,
15:40:03 1684  	 out_result_set    OUT SYS_REFCURSOR
15:40:03 1685  ) AS
15:40:03 1686  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
15:40:03 1687  -- Variables
15:40:03 1688  temp_offer_chain_id NUMBER;
15:40:03 1689  -- Exceptions
15:40:03 1690  BAD_OFFER_CHAIN_ID EXCEPTION;
15:40:03 1691  BEGIN
15:40:03 1692  
15:40:03 1693  	 BEGIN
15:40:03 1694  	   SELECT
15:40:03 1695  	     OCH.ID into temp_offer_chain_id
15:40:03 1696  	   FROM
15:40:03 1697  	     OFFER_CHAIN OCH
15:40:03 1698  	   WHERE
15:40:03 1699  	     OCH.ID = in_offer_chain_id;
15:40:03 1700  	   EXCEPTION
15:40:03 1701  	     WHEN NO_DATA_FOUND THEN
15:40:03 1702  	       RAISE BAD_OFFER_CHAIN_ID;
15:40:03 1703  	 END;
15:40:03 1704  
15:40:03 1705  	 OPEN out_result_set FOR
15:40:03 1706  	 SELECT
15:40:03 1707  	   OCHMD.ID,
15:40:03 1708  	   OCHMD.OFFER_CHAIN_ID,
15:40:03 1709  	   OCHMD.NAME,
15:40:03 1710  	   OCHMD.VALUE,
15:40:03 1711  	   OCHMD.CREATE_DATE,
15:40:03 1712  	   OCHMD.CREATED_BY
15:40:03 1713  	 FROM
15:40:03 1714  	   OFFER_CHAIN_META_DATA OCHMD
15:40:03 1715  	 WHERE
15:40:03 1716  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
15:40:03 1717  
15:40:03 1718  EXCEPTION
15:40:03 1719  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:03 1720  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1721  	   SPROC_NAME, 'No such offer chain', SQLERRM);
15:40:03 1722  WHEN OTHERS THEN
15:40:03 1723  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1724  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1725  END GET_ALL_META_DATA;
15:40:03 1726  
15:40:03 1727  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
15:40:03 1728  	 in_group_id	   IN NUMBER,
15:40:03 1729  	 in_offer_chain_id IN NUMBER,
15:40:03 1730  	 out_is_eligible   OUT NUMBER,
15:40:03 1731  	 out_concurrent_subscription_id OUT NUMBER
15:40:03 1732  ) AS
15:40:03 1733  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
15:40:03 1734  -- Variables
15:40:03 1735  var_account_id  NUMBER;
15:40:03 1736  var_is_eligible NUMBER;
15:40:03 1737  var_is_gc       NUMBER;
15:40:03 1738  -- Exceptions
15:40:03 1739  BAD_GROUP_ID		   EXCEPTION;
15:40:03 1740  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
15:40:03 1741  BAD_OC_ID		   EXCEPTION;
15:40:03 1742  EXCEPTION_MESSAGE	   VARCHAR(1024);
15:40:03 1743  BEGIN
15:40:03 1744  
15:40:03 1745  	 var_is_eligible := GLOBAL_CONSTANTS_V23.TRUE;
15:40:03 1746  
15:40:03 1747  	 out_concurrent_subscription_id := NULL;
15:40:03 1748  
15:40:03 1749  	 BEGIN
15:40:03 1750  	   SELECT
15:40:03 1751  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
15:40:03 1752  	   FROM
15:40:03 1753  	     OFFER_CHAIN OC
15:40:03 1754  	   WHERE
15:40:03 1755  	     OC.ID = in_offer_chain_id;
15:40:03 1756  	   EXCEPTION
15:40:03 1757  	     WHEN NO_DATA_FOUND THEN
15:40:03 1758  	       RAISE BAD_OC_ID;
15:40:03 1759  	 END;
15:40:03 1760  
15:40:03 1761  	 -- only check eligibility if this is not a gift certificate
15:40:03 1762  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
15:40:03 1763  	   BEGIN
15:40:03 1764  	     SELECT
15:40:03 1765  	       A.ID into var_account_id
15:40:03 1766  	     FROM
15:40:03 1767  	       ACCOUNT A
15:40:03 1768  	     WHERE
15:40:03 1769  	       A.GROUP_ID = in_group_id;
15:40:03 1770  	     EXCEPTION
15:40:03 1771  	       WHEN NO_DATA_FOUND THEN
15:40:03 1772  		 RAISE BAD_GROUP_ID;
15:40:03 1773  	   END;
15:40:03 1774  
15:40:03 1775  
15:40:03 1776  	   FOR f_offer_chain IN (
15:40:03 1777  	       SELECT
15:40:03 1778  		 S.ID as SUBSCRIPTION_ID,
15:40:03 1779  		 S.OFFER_CHAIN_ID
15:40:03 1780  	       FROM
15:40:03 1781  		 SUBSCRIPTION S
15:40:03 1782  	       WHERE
15:40:03 1783  		 S.ACCOUNT_ID = var_account_id
15:40:03 1784  		 AND (S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:03 1785  		      OR S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
15:40:03 1786  	   )
15:40:03 1787  	   LOOP
15:40:03 1788  	     BEGIN
15:40:03 1789  	       IF (
15:40:03 1790  		 PROCS_OFFER_CHAIN_V23.CHECK_FOR_SAME_PRODUCTS(
15:40:03 1791  		   in_offer_chain_id,
15:40:03 1792  		   f_offer_chain.offer_chain_id,
15:40:03 1793  		   GLOBAL_CONSTANTS_V23.TRUE
15:40:03 1794  		 ) = GLOBAL_CONSTANTS_V23.TRUE
15:40:03 1795  	       ) THEN
15:40:03 1796  		 var_is_eligible := GLOBAL_CONSTANTS_V23.FALSE;
15:40:03 1797  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
15:40:03 1798  	       END IF;
15:40:03 1799  	       EXCEPTION
15:40:03 1800  		 WHEN OTHERS THEN
15:40:03 1801  		   EXCEPTION_MESSAGE := SQLERRM;
15:40:03 1802  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
15:40:03 1803  	     END;
15:40:03 1804  	   END LOOP;
15:40:03 1805  	 END IF;
15:40:03 1806  	 out_is_eligible := var_is_eligible;
15:40:03 1807  
15:40:03 1808  EXCEPTION
15:40:03 1809  WHEN BAD_GROUP_ID THEN
15:40:03 1810  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1811  	   SPROC_NAME, 'No such offer chain', SQLERRM);
15:40:03 1812  WHEN BAD_OC_ID THEN
15:40:03 1813  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 1814  	   SPROC_NAME, 'No such offer chain', SQLERRM);
15:40:03 1815  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
15:40:03 1816  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:03 1817  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
15:40:03 1818  WHEN OTHERS THEN
15:40:03 1819  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1820  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1821  END CHECK_PRODUCT_ELIGIBILITY;
15:40:03 1822  
15:40:03 1823  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:40:03 1824  	 in_offer_chain_id	  IN NUMBER,
15:40:03 1825  	 in_action_name 	  IN VARCHAR2,
15:40:03 1826  	 out_notification_type_id OUT NUMBER
15:40:03 1827  ) AS
15:40:03 1828  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
15:40:03 1829  -- Variables
15:40:03 1830  var_action_id NUMBER;
15:40:03 1831  -- Exceptions
15:40:03 1832  BAD_ACTION_NAME	      EXCEPTION;
15:40:03 1833  MULTIPLY_ACTIONS_FOUND EXCEPTION;
15:40:03 1834  BEGIN
15:40:03 1835  
15:40:03 1836  	 BEGIN
15:40:03 1837  	   SELECT
15:40:03 1838  	     A.ID into var_action_id
15:40:03 1839  	   FROM
15:40:03 1840  	     ACTION A
15:40:03 1841  	   WHERE
15:40:03 1842  	     UPPER(A.NAME) = UPPER(in_action_name);
15:40:03 1843  	   EXCEPTION
15:40:03 1844  	     WHEN NO_DATA_FOUND THEN
15:40:03 1845  	       RAISE BAD_ACTION_NAME;
15:40:03 1846  	     WHEN TOO_MANY_ROWS THEN
15:40:03 1847  	       RAISE MULTIPLY_ACTIONS_FOUND;
15:40:03 1848  	 END;
15:40:03 1849  
15:40:03 1850  	 SELECT
15:40:03 1851  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
15:40:03 1852  	 FROM
15:40:03 1853  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
15:40:03 1854  	 WHERE
15:40:03 1855  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
15:40:03 1856  	   AND OCNT.ACTION_ID = var_action_id;
15:40:03 1857  
15:40:03 1858  EXCEPTION
15:40:03 1859  WHEN NO_DATA_FOUND THEN
15:40:03 1860  	 out_notification_type_id := NULL;
15:40:03 1861  WHEN BAD_ACTION_NAME THEN
15:40:03 1862  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:03 1863  	   SPROC_NAME, 'Bad action name', SQLERRM);
15:40:03 1864  WHEN MULTIPLY_ACTIONS_FOUND THEN
15:40:03 1865  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:03 1866  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
15:40:03 1867  WHEN OTHERS THEN
15:40:03 1868  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 1869  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 1870  END GET_NOTIFICATION_TYPE_ID;
15:40:03 1871  
15:40:03 1872  END PROCS_OFFER_CHAIN_V23;
15:40:03 1873  .
15:40:03 SQL> /

Package body created.

Elapsed: 00:00:00.17
15:40:03 SQL> 
15:40:03 SQL> prompt Compiling body for procs_polling_sync.sql
Compiling body for procs_polling_sync.sql
15:40:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
15:40:03   2  AS
15:40:03   3  	  --------------------------------------------------------------------------------
15:40:03   4  PROCEDURE GATHER_SYNC_EVENTS
15:40:03   5  	  (
15:40:03   6  	      in_last_timestamp TIMESTAMP,
15:40:03   7  	      out_new_timestamp OUT TIMESTAMP)
15:40:03   8  IS
15:40:03   9  BEGIN
15:40:03  10  	  out_new_timestamp := systimestamp;
15:40:03  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
15:40:03  12  END;
15:40:03  13  	  --------------------------------------------------------------------------------
15:40:03  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
15:40:03  15  IS
15:40:03  16  BEGIN
15:40:03  17  	  INSERT
15:40:03  18  	  INTO
15:40:03  19  	      core_owner.polling_sync
15:40:03  20  	      (
15:40:03  21  		  account_id,
15:40:03  22  		  group_id,
15:40:03  23  		  event_type,
15:40:03  24  		  event_date
15:40:03  25  	      )
15:40:03  26  	  select id, group_id, event_type, event_date from (
15:40:03  27  	      SELECT
15:40:03  28  		  a.id,
15:40:03  29  		  a.group_id,
15:40:03  30  		  'I' event_type,
15:40:03  31  		  in_end_ts event_date,
15:40:03  32  		  max(cl.change_time) last_change_time
15:40:03  33  	      FROM
15:40:03  34  		  core_hist_owner.change_log cl,
15:40:03  35  		  core_owner.credit_card cc,
15:40:03  36  		  core_owner.account a
15:40:03  37  	      WHERE
15:40:03  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
15:40:03  39  	      AND cl.item = 'CREDIT_CARD'
15:40:03  40  	      AND cl.id = cc.id
15:40:03  41  	      AND cc.account_id = a.id
15:40:03  42  	      GROUP BY a.id, a.group_id
15:40:03  43  	      UNION ALL
15:40:03  44  	      SELECT
15:40:03  45  		  a.id,
15:40:03  46  		  a.group_id,
15:40:03  47  		  'I',
15:40:03  48  		  in_end_ts,
15:40:03  49  		  max(cl.change_time) last_change_time
15:40:03  50  	      FROM
15:40:03  51  		  core_hist_owner.change_log cl,
15:40:03  52  		  core_owner.paypal p,
15:40:03  53  		  core_owner.account a
15:40:03  54  	      WHERE
15:40:03  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
15:40:03  56  	      AND cl.item = 'PAYPAL'
15:40:03  57  	      AND cl.id = p.id
15:40:03  58  	      AND p.account_id = a.id
15:40:03  59  	      GROUP BY a.id, a.group_id
15:40:03  60  	      UNION ALL
15:40:03  61  	      SELECT
15:40:03  62  		  a.id,
15:40:03  63  		  a.group_id,
15:40:03  64  		  'S',
15:40:03  65  		  in_end_ts,
15:40:03  66  		  max(cl.change_time) last_change_time
15:40:03  67  	      FROM
15:40:03  68  		  core_hist_owner.change_log cl,
15:40:03  69  		  core_owner.subscription s,
15:40:03  70  		  core_owner.account a
15:40:03  71  	      WHERE
15:40:03  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
15:40:03  73  	      AND cl.item = 'SUBSCRIPTION'
15:40:03  74  	      AND cl.id = s.id
15:40:03  75  	      AND s.account_id = a.id
15:40:03  76  	      GROUP BY a.id, a.group_id
15:40:03  77  	      UNION ALL
15:40:03  78  	      SELECT
15:40:03  79  		  a.id,
15:40:03  80  		  a.group_id,
15:40:03  81  		  'G',
15:40:03  82  		  in_end_ts,
15:40:03  83  		  max(cl.change_time) last_change_time
15:40:03  84  	      FROM
15:40:03  85  		  core_hist_owner.change_log cl,
15:40:03  86  		  core_owner.gift_certificate gc,
15:40:03  87  		  core_owner.account a
15:40:03  88  	      WHERE
15:40:03  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
15:40:03  90  	      AND cl.item = 'GIFT_CERTIFICATE'
15:40:03  91  	      AND cl.id = gc.id
15:40:03  92  	      AND gc.purchaser_group_id = a.group_id
15:40:03  93  	      GROUP BY a.id, a.group_id
15:40:03  94  	  ) t
15:40:03  95  	  where not exists (
15:40:03  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
15:40:03  97  	      from polling_sync ps
15:40:03  98  	      where ps.account_id = t.id
15:40:03  99  		and ps.group_id = t.group_id
15:40:03 100  		and ps.event_type = t.event_type
15:40:03 101  		and ps.event_date >= t.last_change_time
15:40:03 102  	  )
15:40:03 103  	  ;
15:40:03 104  END;
15:40:03 105  --------------------------------------------------------------------------------
15:40:03 106  FUNCTION CREATE_NEW_TRANSFER_SET
15:40:03 107  	  (
15:40:03 108  	      in_set_maximum NUMBER)
15:40:03 109  	  RETURN core_owner.polling_sync.set_id%type
15:40:03 110  IS
15:40:03 111  	  pragma autonomous_transaction;
15:40:03 112  	  v_set_id core_owner.polling_sync.set_id%type;
15:40:03 113  BEGIN
15:40:03 114  	  SELECT
15:40:03 115  	      pollsync_setid_seq.nextval
15:40:03 116  	  INTO
15:40:03 117  	      v_set_id
15:40:03 118  	  FROM
15:40:03 119  	      dual;
15:40:03 120  	  update
15:40:03 121  	    core_owner.polling_sync ps
15:40:03 122  	  set
15:40:03 123  	    ps.set_id = v_set_id
15:40:03 124  	  where
15:40:03 125  	    ps.set_id IS NULL and
15:40:03 126  	    rownum <= in_set_maximum
15:40:03 127  	  ;
15:40:03 128  	  COMMIT;
15:40:03 129  	  RETURN v_set_id;
15:40:03 130  END;
15:40:03 131  --------------------------------------------------------------------------------
15:40:03 132  FUNCTION RETREIVE_TRANSFER_SET
15:40:03 133  	  (
15:40:03 134  	      in_set_id core_owner.polling_sync.set_id%type)
15:40:03 135  	  RETURN sys_refcursor
15:40:03 136  IS
15:40:03 137  	  v_refcursor sys_refcursor;
15:40:03 138  BEGIN
15:40:03 139  	  UPDATE
15:40:03 140  	      core_owner.polling_sync ps
15:40:03 141  	  SET
15:40:03 142  	      ps.last_send_date = sysdate,
15:40:03 143  	      ps.num_calls = ps.num_calls + 1
15:40:03 144  	  WHERE
15:40:03 145  	      ps.set_id = in_set_id ;
15:40:03 146  	  OPEN v_refcursor FOR
15:40:03 147  	  SELECT
15:40:03 148  	      ps.set_id,
15:40:03 149  	      ps.group_id,
15:40:03 150  	      ps.event_type,
15:40:03 151  	      ps.event_date
15:40:03 152  	  FROM
15:40:03 153  	      core_owner.polling_sync ps
15:40:03 154  	  WHERE
15:40:03 155  	      ps.set_id = in_set_id
15:40:03 156  	  AND ps.group_id IS NOT NULL ;
15:40:03 157  	  RETURN v_refcursor;
15:40:03 158  END;
15:40:03 159  --------------------------------------------------------------------------------
15:40:03 160  PROCEDURE GET_TRANSFER_SET
15:40:03 161  	  (
15:40:03 162  	      in_set_maximum NUMBER,
15:40:03 163  	      in_max_retries NUMBER,
15:40:03 164  	      out_refcursor OUT sys_refcursor)
15:40:03 165  IS
15:40:03 166  	  v_set_id core_owner.polling_sync.set_id%type;
15:40:03 167  BEGIN
15:40:03 168  	  /* Look for previously sent but unconfirmed sets and
15:40:03 169  	  send again until max_retries calls */
15:40:03 170  	  FOR x IN
15:40:03 171  	  (
15:40:03 172  	      SELECT
15:40:03 173  		  ps.set_id,
15:40:03 174  		  COUNT( *) set_size
15:40:03 175  	      FROM
15:40:03 176  		  core_owner.polling_sync ps
15:40:03 177  	      WHERE
15:40:03 178  		  ps.event_date > sysdate - 14
15:40:03 179  	      AND ps.confirm_date IS NULL
15:40:03 180  	      AND ps.last_send_date IS NOT NULL
15:40:03 181  	      AND ps.num_calls < in_max_retries
15:40:03 182  	      GROUP BY
15:40:03 183  		  ps.set_id
15:40:03 184  	      ORDER BY
15:40:03 185  		  ps.set_id
15:40:03 186  	  )
15:40:03 187  	  LOOP
15:40:03 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
15:40:03 189  	      RETURN;
15:40:03 190  	  END LOOP;
15:40:03 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
15:40:03 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
15:40:03 193  	  RETURN;
15:40:03 194  END;
15:40:03 195  --------------------------------------------------------------------------------
15:40:03 196  PROCEDURE CONFIRM_TRANSFER_SET
15:40:03 197  	  (
15:40:03 198  	      in_set_id core_owner.polling_sync.set_id%type)
15:40:03 199  IS
15:40:03 200  	  v_unconfirmable EXCEPTION;
15:40:03 201  BEGIN
15:40:03 202  	  UPDATE
15:40:03 203  	      core_owner.polling_sync ps
15:40:03 204  	  SET
15:40:03 205  	      ps.confirm_date = systimestamp
15:40:03 206  	  WHERE
15:40:03 207  	      ps.set_id = in_set_id
15:40:03 208  	  AND ps.confirm_date IS NULL ;
15:40:03 209  	  IF(sql%rowcount < 1) THEN
15:40:03 210  	      raise v_unconfirmable;
15:40:03 211  	  END IF;
15:40:03 212  END;
15:40:03 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
15:40:03 214  IS
15:40:03 215  BEGIN
15:40:03 216  	  UPDATE POLLING_SYNC_LASTRUN
15:40:03 217  	  SET last_run = current_timestamp;
15:40:03 218  	  IF ( sql%rowcount = 0 )
15:40:03 219  	  THEN
15:40:03 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
15:40:03 221  	  END if;
15:40:03 222  	  COMMIT;
15:40:03 223  END;
15:40:03 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
15:40:03 225  IS
15:40:03 226  BEGIN
15:40:03 227  	  SELECT LAST_RUN INTO ts
15:40:03 228  	  FROM POLLING_SYNC_LASTRUN
15:40:03 229  	  WHERE ROWNUM < 2;
15:40:03 230  EXCEPTION
15:40:03 231  	WHEN NO_DATA_FOUND
15:40:03 232  	THEN
15:40:03 233  	  ts := current_timestamp;
15:40:03 234  END;
15:40:03 235  END PROCS_POLLING_SYNC;
15:40:03 236  .
15:40:03 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:40:03 SQL> 
15:40:03 SQL> prompt Compiling body for procs_product.sql
Compiling body for procs_product.sql
15:40:03 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V23" AS
15:40:03   2  
15:40:03   3  PROCEDURE GET_PRODUCTS (
15:40:03   4  /*
15:40:03   5  Throws exceptions:
15:40:03   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:03   7  */
15:40:03   8  	in_status_id   IN  NUMBER,
15:40:03   9  	out_result_set OUT SYS_REFCURSOR
15:40:03  10  ) AS
15:40:03  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
15:40:03  12  BEGIN
15:40:03  13  	OPEN out_result_set FOR
15:40:03  14  	SELECT
15:40:03  15  	  PRODUCT.ID,
15:40:03  16  	  PRODUCT.NAME,
15:40:03  17  	  PRODUCT.TAX_CATEGORY_ID,
15:40:03  18  	  PRODUCT.ENTITLEMENT,
15:40:03  19  	  PRODUCT.IS_SHAREABLE,
15:40:03  20  	  PRODUCT.CREATE_DATE,
15:40:03  21  	  PRODUCT.CREATED_BY,
15:40:03  22  	  PRODUCT.PRODUCT_STATUS_ID,
15:40:03  23  	  PRODUCT.DEFAULT_VAT_RATE
15:40:03  24  	FROM
15:40:03  25  	  PRODUCT
15:40:03  26  	WHERE
15:40:03  27  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
15:40:03  28  EXCEPTION
15:40:03  29  WHEN OTHERS THEN
15:40:03  30  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03  31  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03  32  END GET_PRODUCTS;
15:40:03  33  
15:40:03  34  /******************************************************************************/
15:40:03  35  
15:40:03  36  PROCEDURE GET_PRODUCT_BY_ID (
15:40:03  37  	in_product_id  IN NUMBER,
15:40:03  38  	out_result_set OUT SYS_REFCURSOR
15:40:03  39  ) AS
15:40:03  40  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
15:40:03  41  -- VARIABLES
15:40:03  42  temp_product_id NUMBER;
15:40:03  43  -- EXCEPTIONS
15:40:03  44  BAD_PRODUCT_ID EXCEPTION;
15:40:03  45  BEGIN
15:40:03  46  
15:40:03  47  	BEGIN
15:40:03  48  	  SELECT
15:40:03  49  	    PRODUCT.ID into temp_product_id
15:40:03  50  	  FROM
15:40:03  51  	    PRODUCT
15:40:03  52  	  WHERE
15:40:03  53  	    PRODUCT.ID = in_product_id;
15:40:03  54  	  EXCEPTION
15:40:03  55  	    WHEN NO_DATA_FOUND THEN
15:40:03  56  	      RAISE BAD_PRODUCT_ID;
15:40:03  57  	END;
15:40:03  58  
15:40:03  59  	OPEN out_result_set FOR
15:40:03  60  	SELECT
15:40:03  61  	  PRODUCT.ID,
15:40:03  62  	  PRODUCT.NAME,
15:40:03  63  	  PRODUCT.TAX_CATEGORY_ID,
15:40:03  64  	  PRODUCT.ENTITLEMENT,
15:40:03  65  	  PRODUCT.IS_SHAREABLE,
15:40:03  66  	  PRODUCT.CREATE_DATE,
15:40:03  67  	  PRODUCT.CREATED_BY,
15:40:03  68  	  PRODUCT.PRODUCT_STATUS_ID,
15:40:03  69  	  PRODUCT.DEFAULT_VAT_RATE
15:40:03  70  	FROM
15:40:03  71  	  PRODUCT
15:40:03  72  	WHERE
15:40:03  73  	  PRODUCT.ID = in_product_id;
15:40:03  74  
15:40:03  75  EXCEPTION
15:40:03  76  WHEN BAD_PRODUCT_ID THEN
15:40:03  77  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03  78  	  SPROC_NAME, 'No such product');
15:40:03  79  WHEN OTHERS THEN
15:40:03  80  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03  81  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03  82  END GET_PRODUCT_BY_ID;
15:40:03  83  
15:40:03  84  /******************************************************************************/
15:40:03  85  
15:40:03  86  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
15:40:03  87  	in_line_item_id IN NUMBER,
15:40:03  88  	out_result_set	OUT SYS_REFCURSOR
15:40:03  89  ) AS
15:40:03  90  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
15:40:03  91  -- VARIABLES
15:40:03  92  temp_line_item_id NUMBER;
15:40:03  93  -- EXCEPTIONS
15:40:03  94  BAD_LINE_ITEM_ID EXCEPTION;
15:40:03  95  BEGIN
15:40:03  96  
15:40:03  97  	BEGIN
15:40:03  98  	  SELECT
15:40:03  99  	    LINE_ITEM.ID into temp_line_item_id
15:40:03 100  	  FROM
15:40:03 101  	    LINE_ITEM
15:40:03 102  	  WHERE
15:40:03 103  	    LINE_ITEM.ID = in_line_item_id;
15:40:03 104  	  EXCEPTION
15:40:03 105  	    WHEN NO_DATA_FOUND THEN
15:40:03 106  	      RAISE BAD_LINE_ITEM_ID;
15:40:03 107  	END;
15:40:03 108  
15:40:03 109  	OPEN out_result_set FOR
15:40:03 110  	SELECT
15:40:03 111  	  PRODUCT_OFFERING.ID,
15:40:03 112  	  PRODUCT_OFFERING.PRODUCT_ID,
15:40:03 113  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
15:40:03 114  	  PRODUCT_OFFERING.UNIT_PRICE,
15:40:03 115  	  PRODUCT_OFFERING.QUANTITY,
15:40:03 116  	  PRODUCT_OFFERING.CREATE_DATE,
15:40:03 117  	  PRODUCT_OFFERING.CREATED_BY,
15:40:03 118  	  PRODUCT.ID P_ID,
15:40:03 119  	  PRODUCT.NAME,
15:40:03 120  	  PRODUCT.TAX_CATEGORY_ID,
15:40:03 121  	  PRODUCT.ENTITLEMENT,
15:40:03 122  	  PRODUCT.IS_SHAREABLE,
15:40:03 123  	  PRODUCT.PRODUCT_STATUS_ID,
15:40:03 124  	  PRODUCT.DEFAULT_VAT_RATE
15:40:03 125  	FROM
15:40:03 126  	  PRODUCT_OFFERING
15:40:03 127  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
15:40:03 128  	  INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:40:03 129  	WHERE
15:40:03 130  	  LINE_ITEM.ID = in_line_item_id;
15:40:03 131  
15:40:03 132  EXCEPTION
15:40:03 133  WHEN BAD_LINE_ITEM_ID THEN
15:40:03 134  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 135  	  SPROC_NAME, 'No such line item');
15:40:03 136  WHEN OTHERS THEN
15:40:03 137  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 138  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 139  END GET_PRD_OFFERING_BY_LINE_IT_ID;
15:40:03 140  
15:40:03 141  
15:40:03 142  /******************************************************************************/
15:40:03 143  
15:40:03 144  PROCEDURE GET_PRD_OFFERING_BY_ID (
15:40:03 145  	in_product_offering_id IN NUMBER,
15:40:03 146  	out_result_set	OUT SYS_REFCURSOR
15:40:03 147  ) AS
15:40:03 148  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
15:40:03 149  BEGIN
15:40:03 150  	OPEN out_result_set FOR
15:40:03 151  	SELECT
15:40:03 152  	  PRODUCT_OFFERING.ID,
15:40:03 153  	  PRODUCT_OFFERING.PRODUCT_ID,
15:40:03 154  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
15:40:03 155  	  PRODUCT_OFFERING.UNIT_PRICE,
15:40:03 156  	  PRODUCT_OFFERING.QUANTITY,
15:40:03 157  	  PRODUCT_OFFERING.CREATE_DATE,
15:40:03 158  	  PRODUCT_OFFERING.CREATED_BY,
15:40:03 159  	  PRODUCT.ID P_ID,
15:40:03 160  	  PRODUCT.NAME,
15:40:03 161  	  PRODUCT.TAX_CATEGORY_ID,
15:40:03 162  	  PRODUCT.ENTITLEMENT,
15:40:03 163  	  PRODUCT.IS_SHAREABLE,
15:40:03 164  	  PRODUCT.DEFAULT_VAT_RATE,
15:40:03 165  	  PRODUCT.PRODUCT_STATUS_ID,
15:40:03 166  	  PRODUCT.DEFAULT_VAT_RATE
15:40:03 167  	FROM
15:40:03 168  	    PRODUCT_OFFERING
15:40:03 169  	    INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:40:03 170  	WHERE
15:40:03 171  	  PRODUCT_OFFERING.ID = in_product_offering_id;
15:40:03 172  
15:40:03 173  EXCEPTION
15:40:03 174  WHEN OTHERS THEN
15:40:03 175  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 176  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 177  END GET_PRD_OFFERING_BY_ID;
15:40:03 178  
15:40:03 179  /******************************************************************************/
15:40:03 180  
15:40:03 181  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
15:40:03 182  	in_product_offering_id IN NUMBER,
15:40:03 183  	out_result_set	       OUT SYS_REFCURSOR
15:40:03 184  ) AS
15:40:03 185  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
15:40:03 186  -- VARIABLES
15:40:03 187  temp_product_offering_id NUMBER;
15:40:03 188  -- EXCEPTIONS
15:40:03 189  BAD_PRODUCT_OFFERING_ID EXCEPTION;
15:40:03 190  BEGIN
15:40:03 191  
15:40:03 192  	BEGIN
15:40:03 193  	  SELECT
15:40:03 194  	    PRODUCT_OFFERING.ID into temp_product_offering_id
15:40:03 195  	  FROM
15:40:03 196  	    PRODUCT_OFFERING
15:40:03 197  	  WHERE
15:40:03 198  	    PRODUCT_OFFERING.ID = in_product_offering_id;
15:40:03 199  	  EXCEPTION
15:40:03 200  	    WHEN NO_DATA_FOUND THEN
15:40:03 201  	      RAISE BAD_PRODUCT_OFFERING_ID;
15:40:03 202  	END;
15:40:03 203  
15:40:03 204  	OPEN out_result_set FOR
15:40:03 205  	SELECT
15:40:03 206  	  DISCOUNT.ID,
15:40:03 207  	  DISCOUNT.NAME,
15:40:03 208  	  DISCOUNT.FIXED_AMOUNT,
15:40:03 209  	  DISCOUNT.PERCENT_AMOUNT,
15:40:03 210  	  DISCOUNT.DISCOUNT_TYPE_ID,
15:40:03 211  	  DISCOUNT.CREATE_DATE,
15:40:03 212  	  DISCOUNT.CREATED_BY,
15:40:03 213  	  DISCOUNT.DESCRIPTION
15:40:03 214  	FROM
15:40:03 215  	  DISCOUNT
15:40:03 216  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
15:40:03 217  	WHERE
15:40:03 218  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
15:40:03 219  
15:40:03 220  EXCEPTION
15:40:03 221  WHEN BAD_PRODUCT_OFFERING_ID THEN
15:40:03 222  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:03 223  	  SPROC_NAME, 'No such product offering');
15:40:03 224  WHEN OTHERS THEN
15:40:03 225  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:03 226  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:03 227  END GET_PRODUCT_OFFERING_DISCOUNTS;
15:40:03 228  
15:40:03 229  END PROCS_PRODUCT_V23;
15:40:03 230  .
15:40:03 SQL> /

Package body created.

Elapsed: 00:00:00.04
15:40:03 SQL> 
15:40:03 SQL> prompt Compiling body for procs_reporting.sql
Compiling body for procs_reporting.sql
15:40:03 SQL> CREATE OR REPLACE
15:40:03   2  PACKAGE BODY PROCS_REPORTING AS
15:40:03   3  
15:40:03   4  ----
15:40:03   5  --------------------------------------------------------------------------------
15:40:03   6  ----
15:40:03   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03   8  	  is
15:40:03   9  	  begin
15:40:03  10  	      open out_cursor for
15:40:03  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
15:40:03  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
15:40:03  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
15:40:03  14  			,c.create_date, c.update_date
15:40:03  15  		  from charge c
15:40:03  16  		      ,charge_status cs
15:40:03  17  		      ,instrument_type it
15:40:03  18  		      ,ids
15:40:03  19  		  where c.id = ids.id
15:40:03  20  		    and c.charge_status_id = cs.id
15:40:03  21  		    and c.instrument_type_id = it.id
15:40:03  22  	      ;
15:40:03  23  	  end;
15:40:03  24  ----
15:40:03  25  --------------------------------------------------------------------------------
15:40:03  26  ----
15:40:03  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03  28  	  is
15:40:03  29  	  begin
15:40:03  30  	      open out_cursor for
15:40:03  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
15:40:03  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
15:40:03  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date, l.grace_start_date, l.grace_end_date
15:40:03  35  		  from license l
15:40:03  36  		      ,license_status ls
15:40:03  37  		      ,ids
15:40:03  38  		  where l.id = ids.id
15:40:03  39  		    and l.license_status_id = ls.id
15:40:03  40  	      ;
15:40:03  41  	  end;
15:40:03  42  ----
15:40:03  43  --------------------------------------------------------------------------------
15:40:03  44  ----
15:40:03  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03  46  	  is
15:40:03  47  	  begin
15:40:03  48  	      open out_cursor for
15:40:03  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
15:40:03  50  		  select
15:40:03  51  		    i.id invoice_id,
15:40:03  52  		    i.create_date,
15:40:03  53  		    i.update_date,
15:40:03  54  		    i.invoice_status_id,
15:40:03  55  		    istat.value invoice_status,
15:40:03  56  		    NVL(
15:40:03  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
15:40:03  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
15:40:03  59  		    ) offer_chain_id
15:40:03  60  		  from	   invoice i
15:40:03  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
15:40:03  62  		      join ids			on ids.id = i.id
15:40:03  63  		  where 1 = 1
15:40:03  64  	      ;
15:40:03  65  	  end;
15:40:03  66  ----
15:40:03  67  --------------------------------------------------------------------------------
15:40:03  68  ----
15:40:03  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03  70  	  is
15:40:03  71  	  begin
15:40:03  72  	      open out_cursor for
15:40:03  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
15:40:03  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
15:40:03  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
15:40:03  76  		  from line_item li
15:40:03  77  		    , ids
15:40:03  78  		  where li.id = ids.id
15:40:03  79  	      ;
15:40:03  80  	  end;
15:40:03  81  ----
15:40:03  82  --------------------------------------------------------------------------------
15:40:03  83  ----
15:40:03  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03  85  	  is
15:40:03  86  	  begin
15:40:03  87  	      open out_cursor for
15:40:03  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
15:40:03  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
15:40:03  91  			,a.instrument_id, a.tax_exempt_id
15:40:03  92  			-- need system category??
15:40:03  93  		  from account a
15:40:03  94  		      ,account_status astat
15:40:03  95  		      ,instrument_type it
15:40:03  96  		      , ids
15:40:03  97  		  where a.id = ids.id
15:40:03  98  		    and astat.id = a.account_status_id
15:40:03  99  		    and a.instrument_type_id = it.id(+)
15:40:03 100  	      ;
15:40:03 101  	  end;
15:40:03 102  ----
15:40:03 103  --------------------------------------------------------------------------------
15:40:03 104  ----
15:40:03 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 106  	  is
15:40:03 107  	  begin
15:40:03 108  	      open out_cursor for
15:40:03 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
15:40:03 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
15:40:03 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
15:40:03 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
15:40:03 114  		  from subscription s
15:40:03 115  		      ,subscription_status ss
15:40:03 116  		      ,subscription_cancel_reason sct
15:40:03 117  		      ,instrument_type it
15:40:03 118  		      , ids
15:40:03 119  		  where s.id = ids.id
15:40:03 120  		    and ss.id = s.subscription_status_id
15:40:03 121  		    and s.instrument_type_id = it.id
15:40:03 122  		    and sct.id(+) = s.sct_id
15:40:03 123  	      ;
15:40:03 124  	  end;
15:40:03 125  ----
15:40:03 126  --------------------------------------------------------------------------------
15:40:03 127  ----
15:40:03 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 129  	  is
15:40:03 130  	  begin
15:40:03 131  	      open out_cursor for
15:40:03 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 133  		  select t.id transaction_id, t.transaction_amount
15:40:03 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
15:40:03 135  			,t.create_date, t.update_date, t.is_settled
15:40:03 136  		  from transaction t
15:40:03 137  		      ,transaction_status ts
15:40:03 138  		      , ids
15:40:03 139  		  where t.id = ids.id
15:40:03 140  		    and t.transaction_status_id = ts.id
15:40:03 141  	      ;
15:40:03 142  	  end;
15:40:03 143  ----
15:40:03 144  --------------------------------------------------------------------------------
15:40:03 145  ----
15:40:03 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 147  	  is
15:40:03 148  	  begin
15:40:03 149  	      open out_cursor for
15:40:03 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
15:40:03 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
15:40:03 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
15:40:03 154  			,oc.billing_source_id, bs.name billing_source_name
15:40:03 155  			,oc.is_seat_license,oc.group_account_type_id
15:40:03 156  		  from offer_chain oc
15:40:03 157  		      , offer_chain_status ocs
15:40:03 158  		      , ids
15:40:03 159  		      , vendor_source vs
15:40:03 160  		      , billing_source bs
15:40:03 161  		  where oc.id = ids.id
15:40:03 162  		    and oc.offer_chain_status_id = ocs.id
15:40:03 163  		    and oc.vendor_source_id = vs.id
15:40:03 164  		    and oc.billing_source_id = bs.id
15:40:03 165  	      ;
15:40:03 166  	  end;
15:40:03 167  ----
15:40:03 168  --------------------------------------------------------------------------------
15:40:03 169  ----
15:40:03 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 171  	  is
15:40:03 172  	  begin
15:40:03 173  	      open out_cursor for
15:40:03 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
15:40:03 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
15:40:03 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
15:40:03 177  		  from offer_offer_chain ooc
15:40:03 178  		  , ids
15:40:03 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
15:40:03 180  	      ;
15:40:03 181  	  end;
15:40:03 182  ----
15:40:03 183  --------------------------------------------------------------------------------
15:40:03 184  ----
15:40:03 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 186  	  is
15:40:03 187  	  begin
15:40:03 188  	      open out_cursor for
15:40:03 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
15:40:03 191  		  from offer o
15:40:03 192  		      ,offer_status os
15:40:03 193  		      , ids
15:40:03 194  		  where o.id = ids.id
15:40:03 195  		    and o.offer_status_id = os.id
15:40:03 196  	      ;
15:40:03 197  	  end;
15:40:03 198  ----
15:40:03 199  --------------------------------------------------------------------------------
15:40:03 200  ----
15:40:03 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 202  	  is
15:40:03 203  	  begin
15:40:03 204  	      open out_cursor for
15:40:03 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
15:40:03 207  			 ,gc.expiration_date, gc.purchase_date
15:40:03 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
15:40:03 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
15:40:03 210  			 ,recipient_address_id
15:40:03 211  			 ,redeemer_address_id
15:40:03 212  			 ,recipient_notify_date
15:40:03 213  			 ,recipient_name
15:40:03 214  			 ,redemption_date
15:40:03 215  			 ,recipient_email
15:40:03 216  		  from gift_certificate gc
15:40:03 217  		      ,gift_certificate_status gcs
15:40:03 218  		      , ids
15:40:03 219  		  where gc.id = ids.id
15:40:03 220  		    and gc.gift_certificate_status_id = gcs.id
15:40:03 221  	      ;
15:40:03 222  	  end;
15:40:03 223  ----
15:40:03 224  --------------------------------------------------------------------------------
15:40:03 225  ----
15:40:03 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 227  	  is
15:40:03 228  	  begin
15:40:03 229  	      open out_cursor for
15:40:03 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
15:40:03 232  		  from product_offering po
15:40:03 233  		  , ids
15:40:03 234  		  where po.id = ids.id
15:40:03 235  	      ;
15:40:03 236  	  end;
15:40:03 237  ----
15:40:03 238  --------------------------------------------------------------------------------
15:40:03 239  ----
15:40:03 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 241  	  is
15:40:03 242  	  begin
15:40:03 243  	      open out_cursor for
15:40:03 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 245  		  select p.id product_id, p.name, p.entitlement, p.is_shareable, p.tax_category_id, p.product_status_id, ps.value product_status
15:40:03 246  			,p.create_date
15:40:03 247  		  from product p
15:40:03 248  		      ,product_status ps
15:40:03 249  		      , ids
15:40:03 250  		  where p.id = ids.id
15:40:03 251  		    and p.product_status_id = ps.id
15:40:03 252  	      ;
15:40:03 253  	  end;
15:40:03 254  
15:40:03 255  
15:40:03 256  ----
15:40:03 257  --------------------------------------------------------------------------------
15:40:03 258  ----
15:40:03 259  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 260  	  is
15:40:03 261  	  begin
15:40:03 262  	      open out_cursor for
15:40:03 263  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
15:40:03 264  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
15:40:03 265  		  from offer_product_offering opo
15:40:03 266  		  , ids
15:40:03 267  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
15:40:03 268  	      ;
15:40:03 269  	  end;
15:40:03 270  ----
15:40:03 271  --------------------------------------------------------------------------------
15:40:03 272  ----
15:40:03 273  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 274  	  is
15:40:03 275  	  begin
15:40:03 276  	      open out_cursor for
15:40:03 277  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
15:40:03 278  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
15:40:03 279  		  from discount_product_offering dpo
15:40:03 280  		  , ids
15:40:03 281  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
15:40:03 282  	      ;
15:40:03 283  	  end;
15:40:03 284  ----
15:40:03 285  --------------------------------------------------------------------------------
15:40:03 286  ----
15:40:03 287  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 288  	  is
15:40:03 289  	  begin
15:40:03 290  	      open out_cursor for
15:40:03 291  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 292  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
15:40:03 293  			,d.discount_type_id, dt.value discount_type, d.create_date
15:40:03 294  		  from discount d
15:40:03 295  		      ,discount_type dt
15:40:03 296  		      , ids
15:40:03 297  		  where d.id = ids.id
15:40:03 298  		    and d.discount_type_id = dt.id
15:40:03 299  	      ;
15:40:03 300  	  end;
15:40:03 301  ----
15:40:03 302  --------------------------------------------------------------------------------
15:40:03 303  ----
15:40:03 304  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 305  	  is
15:40:03 306  	  begin
15:40:03 307  	      open out_cursor for
15:40:03 308  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 309  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
15:40:03 310  		  from offer_chain_eligibility oce
15:40:03 311  		  , ids
15:40:03 312  		  where oce.id = ids.id
15:40:03 313  	      ;
15:40:03 314  	  end;
15:40:03 315  ----
15:40:03 316  --------------------------------------------------------------------------------
15:40:03 317  ----
15:40:03 318  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 319  	  is
15:40:03 320  	  begin
15:40:03 321  	      open out_cursor for
15:40:03 322  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 323  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
15:40:03 324  		  from offer_chain_meta_data ocm
15:40:03 325  		  , ids
15:40:03 326  		  where ocm.id = ids.id
15:40:03 327  	      ;
15:40:03 328  	  end;
15:40:03 329  ----
15:40:03 330  --------------------------------------------------------------------------------
15:40:03 331  ----
15:40:03 332  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 333  	  is
15:40:03 334  	  begin
15:40:03 335  	      open out_cursor for
15:40:03 336  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 337  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
15:40:03 338  		  from subscription_meta_data sm
15:40:03 339  		  , ids
15:40:03 340  		  where sm.id = ids.id
15:40:03 341  	      ;
15:40:03 342  	  end;
15:40:03 343  ----
15:40:03 344  --------------------------------------------------------------------------------
15:40:03 345  ----
15:40:03 346  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 347  	  is
15:40:03 348  	  begin
15:40:03 349  	      open out_cursor for
15:40:03 350  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 351  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
15:40:03 352  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
15:40:03 353  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
15:40:03 354  		  from credit_card cc
15:40:03 355  		      ,credit_card_type cct
15:40:03 356  		      ,credit_card_status ccs
15:40:03 357  		      , ids
15:40:03 358  		  where cc.id = ids.id
15:40:03 359  		    and cc.credit_card_type_id = cct.id(+)
15:40:03 360  		    and cc.credit_card_status_id = ccs.id
15:40:03 361  	      ;
15:40:03 362  	  end;
15:40:03 363  ----
15:40:03 364  --------------------------------------------------------------------------------
15:40:03 365  ----
15:40:03 366  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 367  	  is
15:40:03 368  	  begin
15:40:03 369  	      open out_cursor for
15:40:03 370  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 371  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
15:40:03 372  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
15:40:03 373  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
15:40:03 374  			,ta.create_date
15:40:03 375  		  from transaction_attempt ta
15:40:03 376  		      ,transaction_attempt_status tas
15:40:03 377  		      , ids
15:40:03 378  		  where ta.id = ids.id
15:40:03 379  		    and ta.transaction_attempt_status_id = tas.id
15:40:03 380  	      ;
15:40:03 381  	  end;
15:40:03 382  ----
15:40:03 383  --------------------------------------------------------------------------------
15:40:03 384  ----
15:40:03 385  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 386  	  is
15:40:03 387  	  begin
15:40:03 388  	      open out_cursor for
15:40:03 389  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 390  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
15:40:03 391  			,ia.adjustment_date, ia.create_date
15:40:03 392  		  from invoice_adjustment ia, invoice_adjustment_reason ir
15:40:03 393  		  , ids
15:40:03 394  		  where ia.id = ids.id
15:40:03 395  		  and ir.id = ia.invoice_adjustment_reason_id
15:40:03 396  	      ;
15:40:03 397  	  end;
15:40:03 398  ----
15:40:03 399  --------------------------------------------------------------------------------
15:40:03 400  ----
15:40:03 401  
15:40:03 402  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 403  	  is
15:40:03 404  	  begin
15:40:03 405  	      open out_cursor for
15:40:03 406  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 407  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
15:40:03 408  		  from line_item_adjustment lia
15:40:03 409  		  , ids
15:40:03 410  		  where lia.id = ids.id
15:40:03 411  	      ;
15:40:03 412  	  end;
15:40:03 413  ----
15:40:03 414  --------------------------------------------------------------------------------
15:40:03 415  ----
15:40:03 416  
15:40:03 417  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 418  	  is
15:40:03 419  	  begin
15:40:03 420  	      open out_cursor for
15:40:03 421  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 422  		  select
15:40:03 423  		    tax.id tax_id,
15:40:03 424  		    ttype.code tax_type,
15:40:03 425  		    tax.calculated_amount,
15:40:03 426  		    tax.create_date,
15:40:03 427  		    tax.line_item_id,
15:40:03 428  		    tax.effective_rate,
15:40:03 429  		    tax.taxable_amount,
15:40:03 430  		    tax.tax_rule_id,
15:40:03 431  		    j.name jurisdiction_level,
15:40:03 432  		    tax.jurisdiction_name,
15:40:03 433  		    tax.jurisdiction_id,
15:40:03 434  		    tax.ext_tax_type,
15:40:03 435  		    tax.ext_result,
15:40:03 436  		    tax.imposition_type,
15:40:03 437  		    tax.imposition
15:40:03 438  		  from tax
15:40:03 439  		  , tax_type ttype
15:40:03 440  		  , jurisdiction_level j
15:40:03 441  		  , ids
15:40:03 442  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
15:40:03 443  	      ;
15:40:03 444  	  end;
15:40:03 445  ----
15:40:03 446  --------------------------------------------------------------------------------
15:40:03 447  ----
15:40:03 448  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
15:40:03 449  	  is
15:40:03 450  	  begin
15:40:03 451  	      open out_cursor for
15:40:03 452  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
15:40:03 453  		  select
15:40:03 454  		    tax.id tad_adjustment_id,
15:40:03 455  		    tax.tax_id tax_id,
15:40:03 456  		    tax.line_item_adjustment_id line_item_adjustment_id,
15:40:03 457  		    tax.amount tax_amount,
15:40:03 458  		    tax.create_date create_date
15:40:03 459  		  from tax_adjustment tax
15:40:03 460  		  , ids
15:40:03 461  		  where tax.id = ids.id
15:40:03 462  	      ;
15:40:03 463  	  end;
15:40:03 464  ----
15:40:03 465  --------------------------------------------------------------------------------
15:40:03 466  ----
15:40:03 467  /**/
15:40:03 468  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 469  	  BEGIN
15:40:03 470  	    OPEN OUT_CURSOR FOR
15:40:03 471  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 472  	    SELECT
15:40:03 473  		t.id rcn_ext_source_log_id
15:40:03 474  	      , t.extraction_timestamp
15:40:03 475  	      , t.report_date
15:40:03 476  	      , t.report_generation_datetime
15:40:03 477  	      , t.record_type
15:40:03 478  	      , t.report_file_name
15:40:03 479  	      , t.create_date
15:40:03 480  	      , t.created_by
15:40:03 481  	    FROM rcn_ext_source_log t, ids
15:40:03 482  	    WHERE ids.id = t.id;
15:40:03 483  	  END;
15:40:03 484  
15:40:03 485  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 486  	  BEGIN
15:40:03 487  	    OPEN OUT_CURSOR FOR
15:40:03 488  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 489  	    SELECT
15:40:03 490  		t.id rcn_cpt_svc_chg_dtl_id
15:40:03 491  	      , t.rcn_ext_source_log_id
15:40:03 492  	      , t.record_type
15:40:03 493  	      , t.category
15:40:03 494  	      , t.sub_category
15:40:03 495  	      , t.entity_type
15:40:03 496  	      , t.entity_number
15:40:03 497  	      , t.funds_transfer_inst_number
15:40:03 498  	      , t.secure_ba_number
15:40:03 499  	      , t.settlement_currency
15:40:03 500  	      , t.fee_schedule
15:40:03 501  	      , t.mop
15:40:03 502  	      , t.interchange_qualification
15:40:03 503  	      , t.fee_type_description
15:40:03 504  	      , t.action_type
15:40:03 505  	      , t.unit_quantity
15:40:03 506  	      , t.unit_fee
15:40:03 507  	      , t.amount
15:40:03 508  	      , t.percentage_rate
15:40:03 509  	      , t.total_charge
15:40:03 510  	      , t.create_date
15:40:03 511  	      , t.created_by
15:40:03 512  	    FROM rcn_cpt_service_charge_detail t, ids
15:40:03 513  	    WHERE ids.id = t.id;
15:40:03 514  	  END;
15:40:03 515  ----
15:40:03 516  --------------------------------------------------------------------------------
15:40:03 517  ----
15:40:03 518  
15:40:03 519  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 520  	  BEGIN
15:40:03 521  	    OPEN OUT_CURSOR FOR
15:40:03 522  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 523  	    SELECT
15:40:03 524  		t.id rcn_cpt_excp_dtl_id
15:40:03 525  	      , t.rcn_ext_source_log_id
15:40:03 526  	      , t.record_type
15:40:03 527  	      , t.submission_date
15:40:03 528  	      , t.pid_number
15:40:03 529  	      , t.pid_short_name
15:40:03 530  	      , t.submission_number
15:40:03 531  	      , t.record_number
15:40:03 532  	      , t.entity_type
15:40:03 533  	      , t.entity_number
15:40:03 534  	      , t.presentment_currency
15:40:03 535  	      , t.merchant_order_number
15:40:03 536  	      , t.rdfi_number
15:40:03 537  	      , t.account_number
15:40:03 538  	      , t.expiration_date
15:40:03 539  	      , t.amount
15:40:03 540  	      , t.mop
15:40:03 541  	      , t.action_code
15:40:03 542  	      , t.auth_date
15:40:03 543  	      , t.auth_code
15:40:03 544  	      , t.auth_response_code
15:40:03 545  	      , t.trace_number
15:40:03 546  	      , t.consumer_country_code
15:40:03 547  	      , t.category
15:40:03 548  	      , t.mcc
15:40:03 549  	      , t.reject_code
15:40:03 550  	      , t.submission_status
15:40:03 551  	      , t.create_date
15:40:03 552  	      , t.created_by
15:40:03 553  	    FROM rcn_cpt_exception_detail t, ids
15:40:03 554  	    WHERE ids.id = t.id;
15:40:03 555  	  END;
15:40:03 556  ----
15:40:03 557  --------------------------------------------------------------------------------
15:40:03 558  ----
15:40:03 559  
15:40:03 560  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 561  	  BEGIN
15:40:03 562  	    OPEN OUT_CURSOR FOR
15:40:03 563  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 564  	      SELECT
15:40:03 565  		t.id rcn_cpt_deposit_dtl_id
15:40:03 566  	      , t.rcn_ext_source_log_id
15:40:03 567  	      , t.record_type
15:40:03 568  	      , t.submission_date
15:40:03 569  	      , t.pid_number
15:40:03 570  	      , t.pid_short_name
15:40:03 571  	      , t.submission_number
15:40:03 572  	      , t.record_number
15:40:03 573  	      , t.entity_type
15:40:03 574  	      , t.entity_number
15:40:03 575  	      , t.presentment_currency
15:40:03 576  	      , t.merchant_order_number
15:40:03 577  	      , t.rdfi_number
15:40:03 578  	      , t.account_number
15:40:03 579  	      , t.expiration_date
15:40:03 580  	      , t.amount
15:40:03 581  	      , t.mop
15:40:03 582  	      , t.action_code
15:40:03 583  	      , t.auth_date
15:40:03 584  	      , t.auth_code
15:40:03 585  	      , t.auth_response_code
15:40:03 586  	      , t.trace_number
15:40:03 587  	      , t.consumer_country_code
15:40:03 588  	      , t.mcc
15:40:03 589  	      , t.create_date
15:40:03 590  	      , t.created_by
15:40:03 591  	      , t.fee_code
15:40:03 592  	      , t.unit_fee
15:40:03 593  	      , t.percent_fee
15:40:03 594  	      , t.total_interchange_fee
15:40:03 595  	      , t.total_assessment_fee
15:40:03 596  	      , t.other_fee
15:40:03 597  	    FROM rcn_cpt_deposit_detail t, ids
15:40:03 598  	    WHERE ids.id = t.id;
15:40:03 599  	  END;
15:40:03 600  ----
15:40:03 601  --------------------------------------------------------------------------------
15:40:03 602  ----
15:40:03 603  
15:40:03 604  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 605  	  BEGIN
15:40:03 606  	    OPEN OUT_CURSOR FOR
15:40:03 607  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 608  	    SELECT
15:40:03 609  		t.id rcn_cpt_chgbk_act_dtl_id
15:40:03 610  	      , t.rcn_ext_source_log_id
15:40:03 611  	      , t.record_type
15:40:03 612  	      , t.entity_type
15:40:03 613  	      , t.entity_number
15:40:03 614  	      , t.chargeback_amount_issuer
15:40:03 615  	      , t.prev_partial_representment
15:40:03 616  	      , t.presentment_currency
15:40:03 617  	      , t.chargeback_category
15:40:03 618  	      , t.status_flag
15:40:03 619  	      , t.sequence_number
15:40:03 620  	      , t.merchant_order_number
15:40:03 621  	      , t.account_number
15:40:03 622  	      , t.reason_code
15:40:03 623  	      , t.transaction_date
15:40:03 624  	      , t.chargeback_date
15:40:03 625  	      , t.activity_date
15:40:03 626  	      , t.chargeback_amount_action
15:40:03 627  	      , t.fee_amount
15:40:03 628  	      , t.usage_code
15:40:03 629  	      , t.mop_code
15:40:03 630  	      , t.authorization_date
15:40:03 631  	      , t.chargeback_due_date
15:40:03 632  	      , t.create_date
15:40:03 633  	      , t.created_by
15:40:03 634  	    FROM rcn_cpt_chargeback_act_detail t, ids
15:40:03 635  	    WHERE ids.id = t.id;
15:40:03 636  	  END;
15:40:03 637  ----
15:40:03 638  --------------------------------------------------------------------------------
15:40:03 639  ----
15:40:03 640  
15:40:03 641  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 642  	  BEGIN
15:40:03 643  	    OPEN OUT_CURSOR FOR
15:40:03 644  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 645  	    SELECT
15:40:03 646  		t.id rcn_pp_settlement_id
15:40:03 647  	      , t.rcn_ext_source_log_id
15:40:03 648  	      , t.transaction_id
15:40:03 649  	      , t.invoice_id
15:40:03 650  	      , t.pp_ref_id
15:40:03 651  	      , t.pp_ref_id_type
15:40:03 652  	      , t.trans_event_code
15:40:03 653  	      , t.trans_init_date
15:40:03 654  	      , t.trans_comp_date
15:40:03 655  	      , t.trans_deb_or_cred
15:40:03 656  	      , t.gross_trans_amount
15:40:03 657  	      , t.gross_trans_currency
15:40:03 658  	      , t.fee_deb_or_cred
15:40:03 659  	      , t.fee_amount
15:40:03 660  	      , t.fee_currency
15:40:03 661  	      , t.custom_field
15:40:03 662  	      , t.create_date
15:40:03 663  	      , t.created_by
15:40:03 664  	    FROM rcn_pp_settlement t, ids
15:40:03 665  	    WHERE ids.id = t.id;
15:40:03 666  	  END;
15:40:03 667  ----
15:40:03 668  --------------------------------------------------------------------------------
15:40:03 669  ----
15:40:03 670  
15:40:03 671  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 672  	  BEGIN
15:40:03 673  	    OPEN OUT_CURSOR FOR
15:40:03 674  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 675  	    SELECT
15:40:03 676  		t.id rcn_pp_dispute_id
15:40:03 677  	      , t.rcn_ext_source_log_id
15:40:03 678  	      , t.dispute_type
15:40:03 679  	      , t.claimant_name
15:40:03 680  	      , t.claimant_email
15:40:03 681  	      , t.transaction_id
15:40:03 682  	      , t.trans_date
15:40:03 683  	      , t.disputed_amount
15:40:03 684  	      , t.disputed_amount_currency
15:40:03 685  	      , t.dispute_reason
15:40:03 686  	      , t.dispute_filing_date
15:40:03 687  	      , t.dispute_status
15:40:03 688  	      , t.dispute_case_id
15:40:03 689  	      , t.invoice_id
15:40:03 690  	      , t.create_date
15:40:03 691  	      , t.created_by
15:40:03 692  	    FROM
15:40:03 693  	    rcn_pp_dispute t, ids
15:40:03 694  	    WHERE ids.id = t.id;
15:40:03 695  	  END;
15:40:03 696  ----
15:40:03 697  --------------------------------------------------------------------------------
15:40:03 698  ----
15:40:03 699  
15:40:03 700  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 701  	  BEGIN
15:40:03 702  	    OPEN OUT_CURSOR FOR
15:40:03 703  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 704  	    SELECT
15:40:03 705  		t.id rcn_pp_trans_dtl_id
15:40:03 706  	      , t.rcn_ext_source_log_id
15:40:03 707  	      , t.transaction_id
15:40:03 708  	      , t.invoice_id
15:40:03 709  	      , t.pp_ref_id
15:40:03 710  	      , t.trans_event_code
15:40:03 711  	      , t.trans_init_date
15:40:03 712  	      , t.trans_comp_date
15:40:03 713  	      , t.trans_deb_or_cred
15:40:03 714  	      , t.gross_trans_amount
15:40:03 715  	      , t.gross_trans_currency
15:40:03 716  	      , t.fee_deb_or_cred
15:40:03 717  	      , t.fee_amount
15:40:03 718  	      , t.fee_currency
15:40:03 719  	      , t.trans_status
15:40:03 720  	      , t.insurance_amount
15:40:03 721  	      , t.sales_tax_amount
15:40:03 722  	      , t.shipping_amount
15:40:03 723  	      , t.trans_subject
15:40:03 724  	      , t.trans_note
15:40:03 725  	      , t.payer_acct_id
15:40:03 726  	      , t.payer_addr_status
15:40:03 727  	      , t.item_name
15:40:03 728  	      , t.item_id
15:40:03 729  	      , t.option_1_name
15:40:03 730  	      , t.option_1_value
15:40:03 731  	      , t.option_2_name
15:40:03 732  	      , t.option_2_value
15:40:03 733  	      , t.auction_site
15:40:03 734  	      , t.auction_buyer_id
15:40:03 735  	      , t.auction_closing_date
15:40:03 736  	      , t.shipping_addr_line_1
15:40:03 737  	      , t.shipping_addr_line_2
15:40:03 738  	      , t.shipping_addr_city
15:40:03 739  	      , t.shipping_addr_state
15:40:03 740  	      , t.shipping_addr_zip
15:40:03 741  	      , t.shipping_addr_country
15:40:03 742  	      , t.custom_field
15:40:03 743  	      , t.create_date
15:40:03 744  	      , t.created_by
15:40:03 745  	    FROM rcn_pp_trans_detail t, ids
15:40:03 746  	    WHERE ids.id = t.id;
15:40:03 747  	  END;
15:40:03 748  ----
15:40:03 749  --------------------------------------------------------------------------------
15:40:03 750  ----
15:40:03 751  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 752  	  BEGIN
15:40:03 753  	    OPEN OUT_CURSOR FOR
15:40:03 754  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_AMEX_CHARGEBACK' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 755  	    SELECT
15:40:03 756  	      rac.id
15:40:03 757  	    , rac.rcn_ext_source_log_id
15:40:03 758  	    , rac.resolution
15:40:03 759  	    , rac.from_system
15:40:03 760  	    , rac.rejects_to_system
15:40:03 761  	    , rac.disputes_to_system
15:40:03 762  	    , rac.date_of_adjustment
15:40:03 763  	    , rac.date_of_charge
15:40:03 764  	    , rac.case_type
15:40:03 765  	    , rac.cb_reas_code
15:40:03 766  	    , rac.cb_amount
15:40:03 767  	    , rac.cb_adjustment_number
15:40:03 768  	    , rac.billed_amount
15:40:03 769  	    , rac.soc_amount
15:40:03 770  	    , rac.foreign_amount
15:40:03 771  	    , rac.currency
15:40:03 772  	    , rac.note1
15:40:03 773  	    , rac.note2
15:40:03 774  	    , rac.note3
15:40:03 775  	    , rac.note4
15:40:03 776  	    , rac.note5
15:40:03 777  	    , rac.note6
15:40:03 778  	    , rac.note7
15:40:03 779  	    , rac.ind_ref_number
15:40:03 780  	    , rac.create_date
15:40:03 781  	    , rac.created_by
15:40:03 782  	    , rac.update_date
15:40:03 783  	    , rac.updated_by
15:40:03 784  	    FROM rcn_amex_chargeback rac, ids
15:40:03 785  	    WHERE ids.id = rac.id;
15:40:03 786  	  END;
15:40:03 787  ----
15:40:03 788  --------------------------------------------------------------------------------
15:40:03 789  ----
15:40:03 790  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 791  	  BEGIN
15:40:03 792  	    OPEN OUT_CURSOR FOR
15:40:03 793  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 794  	    SELECT
15:40:03 795  		t.ID PAYPAL_ID
15:40:03 796  	      , ACCOUNT_ID
15:40:03 797  	      , INSTRUMENT_NAME
15:40:03 798  	      , CREATE_DATE
15:40:03 799  	      , CREATED_BY
15:40:03 800  	      , UPDATE_DATE
15:40:03 801  	      , UPDATED_BY
15:40:03 802  	      , s.value PAYPAL_STATUS
15:40:03 803  	      , STATE
15:40:03 804  	      , CITY
15:40:03 805  	      , POSTAL_CODE
15:40:03 806  	      , COUNTRY
15:40:03 807  	      , EXPIRATION_DATE
15:40:03 808  	    FROM paypal t, paypal_status s, ids
15:40:03 809  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
15:40:03 810  	  END;
15:40:03 811  ----
15:40:03 812  --------------------------------------------------------------------------------
15:40:03 813  ----
15:40:03 814  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
15:40:03 815  	  BEGIN
15:40:03 816  	    OPEN OUT_CURSOR FOR
15:40:03 817  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
15:40:03 818  	    SELECT
15:40:03 819  	      a.id ADDRESS_ID,
15:40:03 820  	      address1,
15:40:03 821  	      address2,
15:40:03 822  	      city,
15:40:03 823  	      state,
15:40:03 824  	      postal_code,
15:40:03 825  	      country,
15:40:03 826  	      create_date,
15:40:03 827  	      created_by,
15:40:03 828  	      update_date,
15:40:03 829  	      updated_by
15:40:03 830  	    FROM address a, ids
15:40:03 831  	    WHERE ids.id = a.id;
15:40:03 832  	  END;
15:40:03 833  ----
15:40:03 834  --------------------------------------------------------------------------------
15:40:03 835  ----
15:40:03 836  /**/
15:40:03 837  END PROCS_REPORTING;
15:40:03 838  .
15:40:03 SQL> /

Package body created.

Elapsed: 00:00:00.47
15:40:04 SQL> 
15:40:04 SQL> prompt Compiling body for procs_reports.sql
Compiling body for procs_reports.sql
15:40:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V23" AS
15:40:04   2  
15:40:04   3  FUNCTION GET_PRODUCT_NAMES(
15:40:04   4  	in_offer_id IN NUMBER
15:40:04   5  ) RETURN VARCHAR2 AS
15:40:04   6  var_result_names VARCHAR2(1024);
15:40:04   7  BEGIN
15:40:04   8  
15:40:04   9  	var_result_names := NULL;
15:40:04  10  
15:40:04  11  	FOR f_product IN (
15:40:04  12  	  SELECT
15:40:04  13  	    PRODUCT.NAME
15:40:04  14  	  FROM
15:40:04  15  	    PRODUCT
15:40:04  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:40:04  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
15:40:04  18  	  WHERE
15:40:04  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
15:40:04  20  	)
15:40:04  21  	LOOP
15:40:04  22  
15:40:04  23  	  IF var_result_names IS NULL THEN
15:40:04  24  	    var_result_names := f_product.NAME;
15:40:04  25  	  ELSE
15:40:04  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
15:40:04  27  	  END IF;
15:40:04  28  
15:40:04  29  	END LOOP;
15:40:04  30  
15:40:04  31  	RETURN var_result_names;
15:40:04  32  
15:40:04  33  END GET_PRODUCT_NAMES;
15:40:04  34  
15:40:04  35  /******************************************************************************/
15:40:04  36  
15:40:04  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
15:40:04  38  	in_start_date  IN DATE,
15:40:04  39  	in_end_date    IN DATE,
15:40:04  40  	out_result_set OUT SYS_REFCURSOR
15:40:04  41  ) AS
15:40:04  42  -- CONSTANTS
15:40:04  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:40:04  44  BEGIN
15:40:04  45  
15:40:04  46  	OPEN out_result_set FOR
15:40:04  47  	SELECT
15:40:04  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
15:40:04  49  	  "Offer_Id",
15:40:04  50  	  "New_Purchases_Num",
15:40:04  51  	  "Number_Of_renewals",
15:40:04  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
15:40:04  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
15:40:04  54  	FROM (
15:40:04  55  	  SELECT
15:40:04  56  	    "Offer_Id",
15:40:04  57  	    "Number_Of_renewals",
15:40:04  58  	    "New_Purchases_Num"
15:40:04  59  	  FROM (
15:40:04  60  	    SELECT
15:40:04  61  	      OFFER.ID as "Offer_Id",
15:40:04  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
15:40:04  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
15:40:04  64  	    FROM
15:40:04  65  	      OFFER
15:40:04  66  	  )
15:40:04  67  	  WHERE
15:40:04  68  	    "New_Purchases_Num" > 0
15:40:04  69  	    OR "Number_Of_renewals" > 0
15:40:04  70  	);
15:40:04  71  
15:40:04  72  	/*
15:40:04  73  	OPEN out_result_set FOR
15:40:04  74  	SELECT
15:40:04  75  	  "Product_Names",
15:40:04  76  	  "Offer_Id",
15:40:04  77  	  "New_Purchases_Num",
15:40:04  78  	  "Number_Of_renewals",
15:40:04  79  	  "Total_Dollar_Value",
15:40:04  80  	  "Unique_Purchasers_num"
15:40:04  81  	FROM (
15:40:04  82  	  SELECT
15:40:04  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
15:40:04  84  	    offer.id as "Offer_Id",
15:40:04  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
15:40:04  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
15:40:04  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
15:40:04  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
15:40:04  89  	  FROM
15:40:04  90  	    OFFER
15:40:04  91  	)
15:40:04  92  	WHERE
15:40:04  93  	  "New_Purchases_Num" > 0
15:40:04  94  	  OR "Number_Of_renewals" > 0
15:40:04  95  	  OR "Total_Dollar_Value" > 0
15:40:04  96  	  OR "Unique_Purchasers_num" > 0;
15:40:04  97  	*/
15:40:04  98  
15:40:04  99  END GET_FULL_FLASH_REPORT_PURCH;
15:40:04 100  
15:40:04 101  /******************************************************************************/
15:40:04 102  
15:40:04 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
15:40:04 104  	in_offer_id	       IN NUMBER,
15:40:04 105  	in_start_date	       IN DATE,
15:40:04 106  	in_end_date	       IN DATE,
15:40:04 107  	out_new_purchasers_num OUT NUMBER,
15:40:04 108  	out_renewals_num       OUT NUMBER,
15:40:04 109  	out_product_names      OUT VARCHAR2,
15:40:04 110  	out_total_dollar_value OUT NUMBER,
15:40:04 111  	out_unique_purchasers  OUT NUMBER
15:40:04 112  ) AS
15:40:04 113  -- CONSTANTS
15:40:04 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:40:04 115  BEGIN
15:40:04 116  
15:40:04 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
15:40:04 118  
15:40:04 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
15:40:04 120  	  in_offer_id,
15:40:04 121  	  in_start_date,
15:40:04 122  	  in_end_date
15:40:04 123  	);
15:40:04 124  
15:40:04 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
15:40:04 126  	  in_offer_id,
15:40:04 127  	  in_start_date,
15:40:04 128  	  in_end_date
15:40:04 129  	);
15:40:04 130  
15:40:04 131  	out_renewals_num := FLR_RENEWALS_NUM(
15:40:04 132  	  in_offer_id,
15:40:04 133  	  in_start_date,
15:40:04 134  	  in_end_date
15:40:04 135  	);
15:40:04 136  
15:40:04 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
15:40:04 138  	  in_offer_id,
15:40:04 139  	  in_start_date,
15:40:04 140  	  in_end_date
15:40:04 141  	);
15:40:04 142  
15:40:04 143  END GET_FLASH_REPORT_PURCHASES;
15:40:04 144  
15:40:04 145  /******************************************************************************/
15:40:04 146  
15:40:04 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
15:40:04 148  	in_offer_id	       IN NUMBER,
15:40:04 149  	in_start_date	       IN DATE,
15:40:04 150  	in_end_date	       IN DATE
15:40:04 151  ) RETURN NUMBER AS
15:40:04 152  -- CONSTANTS
15:40:04 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:40:04 154  -- VARIABLES
15:40:04 155  var_new_purchases_num NUMBER;
15:40:04 156  BEGIN
15:40:04 157  	SELECT
15:40:04 158  	  COUNT(LICENSE.ID)
15:40:04 159  	  into
15:40:04 160  	  var_new_purchases_num
15:40:04 161  	FROM
15:40:04 162  	  LICENSE
15:40:04 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
15:40:04 164  	WHERE
15:40:04 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
15:40:04 166  	  AND LICENSE.OFFER_ID = in_offer_id
15:40:04 167  	  AND CHARGE.CHARGE_AMOUNT > 0
15:40:04 168  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V23.TRUE
15:40:04 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
15:40:04 170  
15:40:04 171  	RETURN var_new_purchases_num;
15:40:04 172  END FLR_NEW_PURCHASERS_NUM;
15:40:04 173  
15:40:04 174  /******************************************************************************/
15:40:04 175  
15:40:04 176  FUNCTION FLR_RENEWALS_NUM (
15:40:04 177  	in_offer_id	       IN NUMBER,
15:40:04 178  	in_start_date	       IN DATE,
15:40:04 179  	in_end_date	       IN DATE
15:40:04 180  ) RETURN NUMBER AS
15:40:04 181  -- CONSTANTS
15:40:04 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:40:04 183  -- VARIABLES
15:40:04 184  var_renewals_num NUMBER;
15:40:04 185  BEGIN
15:40:04 186  	SELECT
15:40:04 187  	  COUNT(LICENSE.ID)
15:40:04 188  	  into
15:40:04 189  	  var_renewals_num
15:40:04 190  	FROM
15:40:04 191  	  LICENSE
15:40:04 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
15:40:04 193  	WHERE
15:40:04 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
15:40:04 195  	  AND LICENSE.OFFER_ID = in_offer_id
15:40:04 196  	  AND CHARGE.CHARGE_AMOUNT > 0
15:40:04 197  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V23.TRUE
15:40:04 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
15:40:04 199  
15:40:04 200  	RETURN var_renewals_num;
15:40:04 201  END FLR_RENEWALS_NUM;
15:40:04 202  
15:40:04 203  /******************************************************************************/
15:40:04 204  
15:40:04 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
15:40:04 206  	in_offer_id	       IN NUMBER,
15:40:04 207  	in_start_date	       IN DATE,
15:40:04 208  	in_end_date	       IN DATE
15:40:04 209  ) RETURN NUMBER AS
15:40:04 210  var_dollar_value NUMBER(10,2);
15:40:04 211  BEGIN
15:40:04 212  	SELECT
15:40:04 213  	  SUM(CHARGE.CHARGE_AMOUNT)
15:40:04 214  	  into
15:40:04 215  	  var_dollar_value
15:40:04 216  	FROM
15:40:04 217  	  LICENSE
15:40:04 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
15:40:04 219  	WHERE
15:40:04 220  	  LICENSE.OFFER_ID = in_offer_id
15:40:04 221  	  AND CHARGE.CHARGE_AMOUNT > 0
15:40:04 222  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V23.TRUE
15:40:04 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
15:40:04 224  
15:40:04 225  	RETURN var_dollar_value;
15:40:04 226  END FLR_TOTAL_DOLLAR_VALUE;
15:40:04 227  
15:40:04 228  /******************************************************************************/
15:40:04 229  
15:40:04 230  FUNCTION FLR_UNIQUE_PURCHASERS (
15:40:04 231  	in_offer_id	       IN NUMBER,
15:40:04 232  	in_start_date	       IN DATE,
15:40:04 233  	in_end_date	       IN DATE
15:40:04 234  ) RETURN NUMBER AS
15:40:04 235  -- CONSTANTS
15:40:04 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
15:40:04 237  -- VARIABLES
15:40:04 238  var_unique_purchasers NUMBER;
15:40:04 239  BEGIN
15:40:04 240  	SELECT
15:40:04 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
15:40:04 242  	FROM
15:40:04 243  	  LICENSE
15:40:04 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
15:40:04 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 246  	WHERE
15:40:04 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
15:40:04 248  	  AND LICENSE.OFFER_ID = in_offer_id
15:40:04 249  	  AND CHARGE.CHARGE_AMOUNT > 0
15:40:04 250  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V23.TRUE
15:40:04 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
15:40:04 252  
15:40:04 253  	RETURN var_unique_purchasers;
15:40:04 254  END;
15:40:04 255  
15:40:04 256  END PROCS_REPORTS_V23;
15:40:04 257  .
15:40:04 SQL> /

Package body created.

Elapsed: 00:00:00.06
15:40:04 SQL> 
15:40:04 SQL> prompt Compiling body for procs_system.sql
Compiling body for procs_system.sql
15:40:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V23" AS
15:40:04   2  
15:40:04   3  PROCEDURE INCREMENT_VERSION
15:40:04   4  /*
15:40:04   5  Throws exceptions:
15:40:04   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04   7  */
15:40:04   8  AS
15:40:04   9  BEGIN
15:40:04  10  
15:40:04  11  	UPDATE SYS_VERSION SET version=version+1;
15:40:04  12  
15:40:04  13  END INCREMENT_VERSION;
15:40:04  14  
15:40:04  15  /*************************************************************/
15:40:04  16  
15:40:04  17  PROCEDURE CHECK_VERSION(
15:40:04  18  	  in_vers    IN NUMBER,
15:40:04  19  	  out_result OUT NUMBER
15:40:04  20  ) AS
15:40:04  21  	current_version NUMBER;
15:40:04  22  BEGIN
15:40:04  23  	SELECT version INTO current_version FROM SYS_VERSION;
15:40:04  24  	IF(current_version != in_vers) THEN
15:40:04  25  	  out_result := 1;
15:40:04  26  	ELSE
15:40:04  27  	  out_result := 0;
15:40:04  28  	END IF;
15:40:04  29  END CHECK_VERSION;
15:40:04  30  
15:40:04  31  END PROCS_SYSTEM_V23;
15:40:04  32  .
15:40:04 SQL> /

Package body created.

Elapsed: 00:00:00.04
15:40:04 SQL> 
15:40:04 SQL> prompt Compiling body for procs_taxes.sql
Compiling body for procs_taxes.sql
15:40:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V23" AS
15:40:04   2  
15:40:04   3  PROCEDURE ADD_TAX (
15:40:04   4  	in_tax_type_id		 IN NUMBER,
15:40:04   5  	in_calculated_amount	 IN NUMBER,
15:40:04   6  	in_created_by		 IN VARCHAR2,
15:40:04   7  	in_line_item_id 	 IN NUMBER,
15:40:04   8  	in_effective_rate	 IN VARCHAR2,
15:40:04   9  	in_taxable_amount	 IN NUMBER,
15:40:04  10  	in_tax_rule_id		 IN NUMBER,
15:40:04  11  	in_jurisdiction_level_id IN NUMBER,
15:40:04  12  	in_jurisdiction_name	 IN VARCHAR2,
15:40:04  13  	in_jurisdiction_id	 IN VARCHAR2,
15:40:04  14  	in_ext_tax_type 	 IN VARCHAR2,
15:40:04  15  	in_ext_result		 IN VARCHAR2,
15:40:04  16  	in_imposition_type	 IN VARCHAR2,
15:40:04  17  	in_imposition		 IN VARCHAR2
15:40:04  18  ) AS
15:40:04  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
15:40:04  20  -- VARIABLES
15:40:04  21  var_new_tax_id	NUMBER;
15:40:04  22  temp_line_item_id NUMBER;
15:40:04  23  -- EXCEPTIONS
15:40:04  24  BAD_LINE_ITEM_ID EXCEPTION;
15:40:04  25  BEGIN
15:40:04  26  
15:40:04  27  	BEGIN
15:40:04  28  	  SELECT
15:40:04  29  	    LINE_ITEM.ID into temp_line_item_id
15:40:04  30  	  FROM
15:40:04  31  	    LINE_ITEM
15:40:04  32  	  WHERE
15:40:04  33  	    LINE_ITEM.ID = in_line_item_id;
15:40:04  34  	  EXCEPTION
15:40:04  35  	    WHEN NO_DATA_FOUND THEN
15:40:04  36  	      RAISE BAD_LINE_ITEM_ID;
15:40:04  37  	END;
15:40:04  38  
15:40:04  39  	var_new_tax_id := NULL;
15:40:04  40  
15:40:04  41  	PROCS_TAXES_CRU_V23.CREATE_TAX(
15:40:04  42  	  var_new_tax_id,
15:40:04  43  	  in_tax_type_id,
15:40:04  44  	  in_calculated_amount,
15:40:04  45  	  in_created_by,
15:40:04  46  	  in_line_item_id,
15:40:04  47  	  in_effective_rate,
15:40:04  48  	  in_taxable_amount,
15:40:04  49  	  in_tax_rule_id,
15:40:04  50  	  in_jurisdiction_level_id,
15:40:04  51  	  in_jurisdiction_name,
15:40:04  52  	  in_jurisdiction_id,
15:40:04  53  	  in_ext_tax_type,
15:40:04  54  	  in_ext_result,
15:40:04  55  	  in_imposition_type,
15:40:04  56  	  in_imposition
15:40:04  57  	);
15:40:04  58  
15:40:04  59  EXCEPTION
15:40:04  60  WHEN BAD_LINE_ITEM_ID THEN
15:40:04  61  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04  62  	  SPROC_NAME, 'No such line item');
15:40:04  63  WHEN OTHERS THEN
15:40:04  64  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04  66  END ADD_TAX;
15:40:04  67  
15:40:04  68  /******************************************************************************/
15:40:04  69  
15:40:04  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
15:40:04  71  	in_country_code IN CHAR,
15:40:04  72  	in_check_date IN DATE,
15:40:04  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V23.FALSE
15:40:04  74  ) AS
15:40:04  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
15:40:04  76  -- VARIABLES
15:40:04  77  var_countries_count NUMBER;
15:40:04  78  var_result	  NUMBER;
15:40:04  79  BEGIN
15:40:04  80  
15:40:04  81  	SELECT
15:40:04  82  	  COUNT(1) into var_countries_count
15:40:04  83  	FROM
15:40:04  84  	  TAX_COUNTRY_EXCLUSION_LIST
15:40:04  85  	WHERE
15:40:04  86  	  country_code = in_country_code
15:40:04  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
15:40:04  88  	  AND (
15:40:04  89  	    end_date is null
15:40:04  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
15:40:04  91  	  );
15:40:04  92  
15:40:04  93  	IF var_countries_count > 1 THEN
15:40:04  94  	  -- [REVU] Should not happen. DB structure error
15:40:04  95  	  var_result := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04  96  	ELSIF var_countries_count = 1 THEN
15:40:04  97  	  var_result := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04  98  	ELSE
15:40:04  99  	  var_result := GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 100  	END IF;
15:40:04 101  
15:40:04 102  	out_is_founded := var_result;
15:40:04 103  
15:40:04 104  EXCEPTION
15:40:04 105  WHEN OTHERS THEN
15:40:04 106  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 108  END CHECK_COUNTRY_FOR_EXCLUSION;
15:40:04 109  
15:40:04 110  /******************************************************************************/
15:40:04 111  
15:40:04 112  PROCEDURE GET_TAX_CATEGORY (
15:40:04 113  	in_tax_category_id IN NUMBER,
15:40:04 114  	out_result_set	   OUT SYS_REFCURSOR
15:40:04 115  ) AS
15:40:04 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
15:40:04 117  BEGIN
15:40:04 118  
15:40:04 119  	OPEN out_result_set FOR
15:40:04 120  	SELECT
15:40:04 121  	  ID,
15:40:04 122  	  CODE,
15:40:04 123  	  DESCRIPTION
15:40:04 124  	FROM
15:40:04 125  	  TAX_CATEGORY
15:40:04 126  	WHERE
15:40:04 127  	  ID = in_tax_category_id;
15:40:04 128  
15:40:04 129  EXCEPTION
15:40:04 130  WHEN OTHERS THEN
15:40:04 131  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 133  END GET_TAX_CATEGORY;
15:40:04 134  
15:40:04 135  END PROCS_TAXES_V23;
15:40:04 136  .
15:40:04 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:40:04 SQL> 
15:40:04 SQL> prompt Compiling body for procs_transaction.sql
Compiling body for procs_transaction.sql
15:40:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V23" AS
15:40:04   2  
15:40:04   3  PROCEDURE CREATE_TRANSACTION (
15:40:04   4  /*
15:40:04   5  Throws exceptions:
15:40:04   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04   8  */
15:40:04   9  	in_transaction_id	  IN NUMBER,
15:40:04  10  	in_status_id		  IN NUMBER,
15:40:04  11  	in_amount		  IN NUMBER,
15:40:04  12  	in_created_by		  IN VARCHAR2,
15:40:04  13  	in_order_id		  IN VARCHAR2,
15:40:04  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE,
15:40:04  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
15:40:04  16  	out_transaction_id	  OUT NUMBER
15:40:04  17  ) AS
15:40:04  18  -- VARIABLES
15:40:04  19  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
15:40:04  20  var_transaction_count  NUMBER;
15:40:04  21  -- EXCEPTIONS
15:40:04  22  BAD_TRANSACTION_ID     EXCEPTION;
15:40:04  23  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04  24  BEGIN
15:40:04  25  
15:40:04  26  	IF in_transaction_id IS NOT NULL THEN
15:40:04  27  	  SELECT
15:40:04  28  	    COUNT(*) into var_transaction_count
15:40:04  29  	  FROM
15:40:04  30  	    TRANSACTION
15:40:04  31  	  WHERE
15:40:04  32  	    TRANSACTION.ID = in_transaction_id;
15:40:04  33  	  IF var_transaction_count > 0 THEN
15:40:04  34  	    RAISE BAD_TRANSACTION_ID;
15:40:04  35  	  END IF;
15:40:04  36  	END IF;
15:40:04  37  
15:40:04  38  	PROCS_TRANSACTION_CRU_V23.CREATE_TRANSACTION(
15:40:04  39  	  out_transaction_id	   => out_transaction_id,
15:40:04  40  	  in_transaction_id	   => in_transaction_id,
15:40:04  41  	  in_transaction_status_id => in_status_id,
15:40:04  42  	  in_transaction_amount    => in_amount,
15:40:04  43  	  in_created_by 	   => in_created_by,
15:40:04  44  	  in_order_id		   => in_order_id,
15:40:04  45  	  in_is_refund		   => in_is_refund,
15:40:04  46  	  in_transaction_type_code => in_transaction_type_code
15:40:04  47  	);
15:40:04  48  
15:40:04  49  EXCEPTION
15:40:04  50  WHEN BAD_TRANSACTION_ID THEN
15:40:04  51  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:04  52  	  SPROC_NAME, 'Transaction with given id already exists');
15:40:04  53  WHEN OTHERS THEN
15:40:04  54  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04  55  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04  56  END CREATE_TRANSACTION;
15:40:04  57  
15:40:04  58  /******************************************************************************/
15:40:04  59  
15:40:04  60  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
15:40:04  61  /*
15:40:04  62  Throws exceptions:
15:40:04  63  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04  64  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04  65  */
15:40:04  66  	in_transaction_id	   IN NUMBER,
15:40:04  67  	in_trans_attempt_status    IN NUMBER,
15:40:04  68  	in_external_status_code    IN VARCHAR2,
15:40:04  69  	in_external_status_message IN VARCHAR2,
15:40:04  70  	in_created_by		   IN VARCHAR2,
15:40:04  71  	in_ext_transaction_id	   IN VARCHAR2,
15:40:04  72  	out_transaction_attempt_id OUT NUMBER
15:40:04  73  ) AS
15:40:04  74  -- VARIABLES
15:40:04  75  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
15:40:04  76  var_transaction_create_date DATE;
15:40:04  77  var_transaction_attempt_id  NUMBER;
15:40:04  78  
15:40:04  79  -- EXCEPTIONS
15:40:04  80  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
15:40:04  81  BAD_TRANSACTION_ID       EXCEPTION;
15:40:04  82  BEGIN
15:40:04  83  
15:40:04  84  	-- Check that transaction exists
15:40:04  85  	BEGIN
15:40:04  86  	  SELECT
15:40:04  87  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
15:40:04  88  	  FROM
15:40:04  89  	    TRANSACTION
15:40:04  90  	  WHERE
15:40:04  91  	    TRANSACTION.ID = in_transaction_id;
15:40:04  92  	  EXCEPTION
15:40:04  93  	    WHEN OTHERS THEN
15:40:04  94  	      RAISE BAD_TRANSACTION_ID;
15:40:04  95  	END;
15:40:04  96  
15:40:04  97  	-- Check that transaction status is correct
15:40:04  98  	IF in_trans_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_IN_PROGRESS
15:40:04  99  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
15:40:04 100  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_FAILED THEN
15:40:04 101  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
15:40:04 102  	END IF;
15:40:04 103  
15:40:04 104  	var_transaction_attempt_id := NULL;
15:40:04 105  	PROCS_TRANSACTION_CRU_V23.CREATE_TRANSACTION_ATTEMPT(
15:40:04 106  	  inout_transaction_attempt_id => var_transaction_attempt_id,
15:40:04 107  	  in_transaction_id	       => in_transaction_id,
15:40:04 108  	  in_external_status_code      => in_external_status_code,
15:40:04 109  	  in_external_status_message   => in_external_status_message,
15:40:04 110  	  in_created_by 	       => in_created_by,
15:40:04 111  	  in_external_transaction_id   => in_ext_transaction_id,
15:40:04 112  	  in_transaction_start_time    => var_transaction_create_date,
15:40:04 113  	  in_status_id		       => in_trans_attempt_status
15:40:04 114  	);
15:40:04 115  
15:40:04 116  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION(
15:40:04 117  	  in_transaction_id => in_transaction_id,
15:40:04 118  	  in_updated_by     => in_created_by
15:40:04 119  	);
15:40:04 120  
15:40:04 121  	out_transaction_attempt_id := var_transaction_attempt_id;
15:40:04 122  
15:40:04 123  EXCEPTION
15:40:04 124  WHEN BAD_TRANSACTION_ID THEN
15:40:04 125  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 126  	  SPROC_NAME, 'No such transaction');
15:40:04 127  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
15:40:04 128  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 129  	  SPROC_NAME, 'Bad transaction attempt status');
15:40:04 130  WHEN OTHERS THEN
15:40:04 131  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 133  END CREATE_TRANSACTION_ATTEMPT;
15:40:04 134  
15:40:04 135  /******************************************************************************/
15:40:04 136  
15:40:04 137  PROCEDURE UPDATE_TRANSACTION_STATUS (
15:40:04 138  /*
15:40:04 139  Throws exceptions:
15:40:04 140  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 141  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 142  */
15:40:04 143  	in_transaction_id	 IN NUMBER,
15:40:04 144  	in_updated_by		 IN VARCHAR2,
15:40:04 145  	in_transaction_status_id IN NUMBER
15:40:04 146  ) AS
15:40:04 147  -- VARIABLES
15:40:04 148  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
15:40:04 149  temp_transaction_id NUMBER;
15:40:04 150  
15:40:04 151  -- EXCEPTIONS
15:40:04 152  BAD_TRANSACTION_ID     EXCEPTION;
15:40:04 153  BAD_TRANSACTION_STATUS EXCEPTION;
15:40:04 154  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 155  BEGIN
15:40:04 156  
15:40:04 157  	-- Check that transaction exists
15:40:04 158  	BEGIN
15:40:04 159  	  SELECT
15:40:04 160  	    TRANSACTION.ID into temp_transaction_id
15:40:04 161  	  FROM
15:40:04 162  	    TRANSACTION
15:40:04 163  	  WHERE
15:40:04 164  	    TRANSACTION.ID = in_transaction_id;
15:40:04 165  	  EXCEPTION
15:40:04 166  	    WHEN OTHERS THEN
15:40:04 167  	      RAISE BAD_TRANSACTION_ID;
15:40:04 168  	END;
15:40:04 169  
15:40:04 170  	-- Check that transaction status is correct
15:40:04 171  	IF    in_transaction_status_id != GLOBAL_STATUSES_V23.TRANSACTION_PENDING
15:40:04 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V23.TRANSACTION_CLOSED
15:40:04 173  	  AND in_transaction_status_id != GLOBAL_STATUSES_V23.TRANSACTION_CHARGEBACK
15:40:04 174  	  AND in_transaction_status_id != GLOBAL_STATUSES_V23.TRANSACTION_DECLINED THEN
15:40:04 175  	  RAISE BAD_TRANSACTION_STATUS;
15:40:04 176  	END IF;
15:40:04 177  
15:40:04 178  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION(
15:40:04 179  	  in_transaction_id	   => in_transaction_id,
15:40:04 180  	  in_updated_by 	   => in_updated_by,
15:40:04 181  	  in_transaction_status_id => in_transaction_status_id
15:40:04 182  	);
15:40:04 183  
15:40:04 184  EXCEPTION
15:40:04 185  WHEN BAD_TRANSACTION_ID THEN
15:40:04 186  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 187  	  SPROC_NAME, 'No such transaction');
15:40:04 188  WHEN BAD_TRANSACTION_STATUS THEN
15:40:04 189  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 190  	  SPROC_NAME, 'Bad transaction status');
15:40:04 191  WHEN OTHERS THEN
15:40:04 192  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 193  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 194  END UPDATE_TRANSACTION_STATUS;
15:40:04 195  
15:40:04 196  /******************************************************************************/
15:40:04 197  
15:40:04 198  PROCEDURE UPDATE_TRANSACTION_SETTLED (
15:40:04 199  /*
15:40:04 200  Throws exceptions:
15:40:04 201  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 202  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 203  */
15:40:04 204  	in_transaction_id	 IN NUMBER,
15:40:04 205  	in_updated_by		 IN VARCHAR2,
15:40:04 206  	in_is_settled		 IN NUMBER
15:40:04 207  ) AS
15:40:04 208  -- VARIABLES
15:40:04 209  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
15:40:04 210  temp_transaction_id NUMBER;
15:40:04 211  
15:40:04 212  -- EXCEPTIONS
15:40:04 213  BAD_TRANSACTION_ID     EXCEPTION;
15:40:04 214  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 215  BEGIN
15:40:04 216  
15:40:04 217  	-- Check that transaction exists
15:40:04 218  	BEGIN
15:40:04 219  	  SELECT
15:40:04 220  	    TRANSACTION.ID into temp_transaction_id
15:40:04 221  	  FROM
15:40:04 222  	    TRANSACTION
15:40:04 223  	  WHERE
15:40:04 224  	    TRANSACTION.ID = in_transaction_id;
15:40:04 225  	  EXCEPTION
15:40:04 226  	    WHEN OTHERS THEN
15:40:04 227  	      RAISE BAD_TRANSACTION_ID;
15:40:04 228  	END;
15:40:04 229  
15:40:04 230  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION(
15:40:04 231  	  in_transaction_id	   => in_transaction_id,
15:40:04 232  	  in_updated_by 	   => in_updated_by,
15:40:04 233  	  in_is_settled 	   => in_is_settled
15:40:04 234  	);
15:40:04 235  
15:40:04 236  EXCEPTION
15:40:04 237  WHEN BAD_TRANSACTION_ID THEN
15:40:04 238  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 239  	  SPROC_NAME, 'No such transaction');
15:40:04 240  WHEN OTHERS THEN
15:40:04 241  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 242  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 243  END UPDATE_TRANSACTION_SETTLED;
15:40:04 244  
15:40:04 245  /******************************************************************************/
15:40:04 246  
15:40:04 247  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
15:40:04 248  /*
15:40:04 249  Throws exceptions:
15:40:04 250  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 251  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 252  */
15:40:04 253  	in_transaction_attempt_id IN NUMBER,
15:40:04 254  	in_updated_by		  IN VARCHAR2
15:40:04 255  ) AS
15:40:04 256  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
15:40:04 257  -- VARIABLES
15:40:04 258  var_transaction_id NUMBER;
15:40:04 259  -- EXCEPTION
15:40:04 260  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
15:40:04 261  BEGIN
15:40:04 262  
15:40:04 263  	BEGIN
15:40:04 264  	  SELECT
15:40:04 265  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
15:40:04 266  	  FROM
15:40:04 267  	    TRANSACTION_ATTEMPT
15:40:04 268  	  WHERE
15:40:04 269  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
15:40:04 270  	  EXCEPTION
15:40:04 271  	    WHEN NO_DATA_FOUND THEN
15:40:04 272  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
15:40:04 273  	END;
15:40:04 274  
15:40:04 275  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION(
15:40:04 276  	  in_transaction_id => var_transaction_id,
15:40:04 277  	  in_updated_by     => in_updated_by
15:40:04 278  	);
15:40:04 279  
15:40:04 280  EXCEPTION
15:40:04 281  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
15:40:04 282  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 283  	  SPROC_NAME, 'No such transaction attempt');
15:40:04 284  WHEN OTHERS THEN
15:40:04 285  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 286  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 287  END UPDATE_TRNSCTN_ATTEMPT_TIME;
15:40:04 288  
15:40:04 289  /******************************************************************************/
15:40:04 290  
15:40:04 291  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
15:40:04 292  /*
15:40:04 293  Throws exceptions:
15:40:04 294  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 295  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 296  */
15:40:04 297  	in_transaction_attempt_id     IN NUMBER,
15:40:04 298  	in_transaction_attempt_status IN NUMBER
15:40:04 299  ) AS
15:40:04 300  -- VARIABLES
15:40:04 301  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
15:40:04 302  temp_transaction_attempt_id NUMBER;
15:40:04 303  
15:40:04 304  -- EXCEPTION
15:40:04 305  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
15:40:04 306  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
15:40:04 307  BEGIN
15:40:04 308  
15:40:04 309  	-- Check that transaction attempt exists
15:40:04 310  	BEGIN
15:40:04 311  	  SELECT
15:40:04 312  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
15:40:04 313  	  FROM
15:40:04 314  	    TRANSACTION_ATTEMPT
15:40:04 315  	  WHERE
15:40:04 316  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
15:40:04 317  	  EXCEPTION
15:40:04 318  	    WHEN NO_DATA_FOUND THEN
15:40:04 319  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
15:40:04 320  	END;
15:40:04 321  
15:40:04 322  	-- Check that transaction attempt is correct
15:40:04 323  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_IN_PROGRESS
15:40:04 324  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
15:40:04 325  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_FAILED THEN
15:40:04 326  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
15:40:04 327  	END IF;
15:40:04 328  
15:40:04 329  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION_ATTEMPT(
15:40:04 330  	  in_transaction_attempt_id => in_transaction_attempt_id,
15:40:04 331  	  in_status_id		    => in_transaction_attempt_status
15:40:04 332  	);
15:40:04 333  
15:40:04 334  EXCEPTION
15:40:04 335  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
15:40:04 336  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 337  	  SPROC_NAME, 'No such transaction attempt');
15:40:04 338  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
15:40:04 339  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 340  	  SPROC_NAME, 'Bad transaction attempt status');
15:40:04 341  WHEN OTHERS THEN
15:40:04 342  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 343  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 344  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
15:40:04 345  
15:40:04 346  /******************************************************************************/
15:40:04 347  
15:40:04 348  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
15:40:04 349  /*
15:40:04 350  Throws exceptions:
15:40:04 351  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 352  */
15:40:04 353  	in_transaction_id	      IN NUMBER,
15:40:04 354  	in_transaction_attempt_status IN NUMBER,
15:40:04 355  	out_result_set		      OUT SYS_REFCURSOR
15:40:04 356  ) AS
15:40:04 357  -- VARIABLES
15:40:04 358  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
15:40:04 359  temp_transaction_id NUMBER;
15:40:04 360  -- EXCEPTIONS
15:40:04 361  BAD_TRANSACTION_ID       EXCEPTION;
15:40:04 362  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
15:40:04 363  BEGIN
15:40:04 364  
15:40:04 365  	-- Check that transaction exists
15:40:04 366  	BEGIN
15:40:04 367  	  SELECT
15:40:04 368  	    TRANSACTION.ID into temp_transaction_id
15:40:04 369  	  FROM
15:40:04 370  	    TRANSACTION
15:40:04 371  	  WHERE
15:40:04 372  	    TRANSACTION.ID = in_transaction_id;
15:40:04 373  	  EXCEPTION
15:40:04 374  	    WHEN OTHERS THEN
15:40:04 375  	      RAISE BAD_TRANSACTION_ID;
15:40:04 376  	END;
15:40:04 377  
15:40:04 378  	-- Check that transaction attempt status is correct
15:40:04 379  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_IN_PROGRESS
15:40:04 380  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
15:40:04 381  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_FAILED THEN
15:40:04 382  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
15:40:04 383  	END IF;
15:40:04 384  
15:40:04 385  	OPEN out_result_set FOR
15:40:04 386  	SELECT
15:40:04 387  	  TRANSACTION_ATTEMPT.ID,
15:40:04 388  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
15:40:04 389  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
15:40:04 390  	  TRANSACTION_ATTEMPT.CREATE_DATE,
15:40:04 391  	  TRANSACTION_ATTEMPT.CREATED_BY,
15:40:04 392  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
15:40:04 393  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
15:40:04 394  	  TRANSACTION.TRANSACTION_AMOUNT,
15:40:04 395  	  TRANSACTION.ID as "TRANSACTION_ID",
15:40:04 396  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
15:40:04 397  	FROM
15:40:04 398  	  TRANSACTION_ATTEMPT
15:40:04 399  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
15:40:04 400  	WHERE
15:40:04 401  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
15:40:04 402  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
15:40:04 403  
15:40:04 404  EXCEPTION
15:40:04 405  WHEN BAD_TRANSACTION_ID THEN
15:40:04 406  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 407  	  SPROC_NAME, 'No such transaction');
15:40:04 408  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
15:40:04 409  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 410  	  SPROC_NAME, 'Bad transaction attempt status');
15:40:04 411  WHEN OTHERS THEN
15:40:04 412  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 413  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 414  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
15:40:04 415  
15:40:04 416  /******************************************************************************/
15:40:04 417  
15:40:04 418  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
15:40:04 419  /*
15:40:04 420  Throws exceptions:
15:40:04 421  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 422  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 423  */
15:40:04 424  	in_transaction_attempt_id IN NUMBER,
15:40:04 425  	in_ext_status_code	  IN VARCHAR2,
15:40:04 426  	in_ext_status_message	  IN VARCHAR2,
15:40:04 427  	in_ext_transaction_id	  IN VARCHAR2
15:40:04 428  ) AS
15:40:04 429  -- VARIABLES
15:40:04 430  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
15:40:04 431  temp_trans_attempt_count NUMBER;
15:40:04 432  -- EXCEPTIONS
15:40:04 433  BAD_ATTEMPT_ID EXCEPTION;
15:40:04 434  BEGIN
15:40:04 435  
15:40:04 436  	SELECT
15:40:04 437  	  COUNT(*) into temp_trans_attempt_count
15:40:04 438  	FROM
15:40:04 439  	  TRANSACTION_ATTEMPT
15:40:04 440  	WHERE
15:40:04 441  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
15:40:04 442  
15:40:04 443  	IF temp_trans_attempt_count = 0 THEN
15:40:04 444  	  RAISE BAD_ATTEMPT_ID;
15:40:04 445  	END IF;
15:40:04 446  
15:40:04 447  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION_ATTEMPT(
15:40:04 448  	  in_transaction_attempt_id  => in_transaction_attempt_id,
15:40:04 449  	  in_external_status_code    => in_ext_status_code,
15:40:04 450  	  in_external_status_message => in_ext_status_message,
15:40:04 451  	  in_external_transaction_id => in_ext_transaction_id
15:40:04 452  	);
15:40:04 453  
15:40:04 454  EXCEPTION
15:40:04 455  WHEN BAD_ATTEMPT_ID THEN
15:40:04 456  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 457  	  SPROC_NAME, 'No such attempt');
15:40:04 458  WHEN OTHERS THEN
15:40:04 459  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 460  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 461  END UPDATE_TRANSACTION_ATTEMPT_INF;
15:40:04 462  
15:40:04 463  /******************************************************************************/
15:40:04 464  
15:40:04 465  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
15:40:04 466  /*
15:40:04 467  Throws exceptions:
15:40:04 468  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 469  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 470  */
15:40:04 471  	in_transaction_id IN  NUMBER,
15:40:04 472  	out_attempts_num  OUT NUMBER
15:40:04 473  ) AS
15:40:04 474  -- VARIABLES
15:40:04 475  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
15:40:04 476  temp_transaction_count NUMBER;
15:40:04 477  
15:40:04 478  -- EXCEPTIONS
15:40:04 479  BAD_TRANSACTION_ID EXCEPTION;
15:40:04 480  BEGIN
15:40:04 481  
15:40:04 482  	SELECT
15:40:04 483  	  COUNT(*) into temp_transaction_count
15:40:04 484  	FROM
15:40:04 485  	  TRANSACTION
15:40:04 486  	WHERE
15:40:04 487  	  TRANSACTION.ID = in_transaction_id;
15:40:04 488  
15:40:04 489  	IF temp_transaction_count = 0 THEN
15:40:04 490  	  RAISE BAD_TRANSACTION_ID;
15:40:04 491  	END IF;
15:40:04 492  
15:40:04 493  	SELECT
15:40:04 494  	  COUNT(*) into out_attempts_num
15:40:04 495  	FROM
15:40:04 496  	  TRANSACTION_ATTEMPT
15:40:04 497  	WHERE
15:40:04 498  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
15:40:04 499  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_FAILED;
15:40:04 500  
15:40:04 501  EXCEPTION
15:40:04 502  WHEN BAD_TRANSACTION_ID THEN
15:40:04 503  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 504  	  SPROC_NAME, 'No such transaction');
15:40:04 505  WHEN OTHERS THEN
15:40:04 506  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 507  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 508  END GET_FAILED_ATTEMPTS_NUMBER;
15:40:04 509  /******************************************************************************/
15:40:04 510  
15:40:04 511  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
15:40:04 512  /*
15:40:04 513  Throws exceptions:
15:40:04 514  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 515  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 516  */
15:40:04 517  	in_transaction_id IN  NUMBER,
15:40:04 518  	out_is_successfull  OUT NUMBER
15:40:04 519  ) AS
15:40:04 520  -- VARIABLES
15:40:04 521  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
15:40:04 522  temp_transaction_count NUMBER;
15:40:04 523  
15:40:04 524  -- EXCEPTIONS
15:40:04 525  BAD_TRANSACTION_ID EXCEPTION;
15:40:04 526  BEGIN
15:40:04 527  
15:40:04 528  	SELECT
15:40:04 529  	  COUNT(*) into temp_transaction_count
15:40:04 530  	FROM
15:40:04 531  	  TRANSACTION
15:40:04 532  	WHERE
15:40:04 533  	  TRANSACTION.ID = in_transaction_id;
15:40:04 534  
15:40:04 535  	IF temp_transaction_count = 0 THEN
15:40:04 536  	  RAISE BAD_TRANSACTION_ID;
15:40:04 537  	END IF;
15:40:04 538  
15:40:04 539  	SELECT
15:40:04 540  	  COUNT(*) into out_is_successfull
15:40:04 541  	FROM
15:40:04 542  	  TRANSACTION_ATTEMPT
15:40:04 543  	WHERE
15:40:04 544  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
15:40:04 545  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS;
15:40:04 546  
15:40:04 547  EXCEPTION
15:40:04 548  WHEN BAD_TRANSACTION_ID THEN
15:40:04 549  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 550  	  SPROC_NAME, 'No such transaction');
15:40:04 551  WHEN OTHERS THEN
15:40:04 552  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 553  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 554  END IS_TRANSACTION_SUCCESSFULL;
15:40:04 555  /******************************************************************************/
15:40:04 556  
15:40:04 557  PROCEDURE GET_TRANSACTION_AMOUNT (
15:40:04 558  /*
15:40:04 559  Throws exceptions:
15:40:04 560  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 561  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 562  */
15:40:04 563  	in_transaction_id      IN  NUMBER,
15:40:04 564  	out_transaction_amount OUT NUMBER
15:40:04 565  ) AS
15:40:04 566  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
15:40:04 567  BEGIN
15:40:04 568  
15:40:04 569  	SELECT
15:40:04 570  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
15:40:04 571  	FROM
15:40:04 572  	  TRANSACTION
15:40:04 573  	WHERE
15:40:04 574  	  TRANSACTION.ID = in_transaction_id;
15:40:04 575  
15:40:04 576  EXCEPTION
15:40:04 577  WHEN NO_DATA_FOUND THEN
15:40:04 578  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 579  	  SPROC_NAME, 'No such transaction');
15:40:04 580  WHEN OTHERS THEN
15:40:04 581  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 582  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 583  END GET_TRANSACTION_AMOUNT;
15:40:04 584  
15:40:04 585  /******************************************************************************/
15:40:04 586  
15:40:04 587  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
15:40:04 588  /*
15:40:04 589  Throws exceptions:
15:40:04 590  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 591  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 592  */
15:40:04 593  	in_charge_id   IN  NUMBER,
15:40:04 594  	out_result_set OUT SYS_REFCURSOR
15:40:04 595  ) AS
15:40:04 596  -- VARIABLES
15:40:04 597  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
15:40:04 598  temp_charge_id NUMBER;
15:40:04 599  -- EXCEPTIONS
15:40:04 600  BAD_CHARGE_ID EXCEPTION;
15:40:04 601  BEGIN
15:40:04 602  
15:40:04 603  	BEGIN
15:40:04 604  	  SELECT
15:40:04 605  	    CHARGE.ID into temp_charge_id
15:40:04 606  	  FROM
15:40:04 607  	    CHARGE
15:40:04 608  	  WHERE
15:40:04 609  	    CHARGE.ID = in_charge_id;
15:40:04 610  	  EXCEPTION
15:40:04 611  	    WHEN NO_DATA_FOUND THEN
15:40:04 612  	      RAISE BAD_CHARGE_ID;
15:40:04 613  	END;
15:40:04 614  
15:40:04 615  	OPEN out_result_set FOR
15:40:04 616  	SELECT DISTINCT
15:40:04 617  	  TRANSACTION.ID,
15:40:04 618  	  TRANSACTION.TRANSACTION_STATUS_ID,
15:40:04 619  	  TRANSACTION.CREATE_DATE,
15:40:04 620  	  TRANSACTION.TRANSACTION_AMOUNT,
15:40:04 621  	  TRANSACTION.IS_REFUND,
15:40:04 622  	  TRANSACTION.ORDER_ID
15:40:04 623  	FROM
15:40:04 624  	  CHARGE INNER JOIN TRANSACTION ON
15:40:04 625  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:40:04 626  	WHERE
15:40:04 627  	  CHARGE.ID = in_charge_id;
15:40:04 628  
15:40:04 629  EXCEPTION
15:40:04 630  WHEN BAD_CHARGE_ID THEN
15:40:04 631  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 632  	  SPROC_NAME, 'No such charge');
15:40:04 633  WHEN OTHERS THEN
15:40:04 634  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 635  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 636  END GET_TRANSACTIONS_BY_CHARGE_ID;
15:40:04 637  /******************************************************************************/
15:40:04 638  
15:40:04 639  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
15:40:04 640  /*
15:40:04 641  Throws exceptions:
15:40:04 642  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 643  */
15:40:04 644  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
15:40:04 645  	out_result_set OUT SYS_REFCURSOR
15:40:04 646  ) AS
15:40:04 647  -- VARIABLES
15:40:04 648  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
15:40:04 649  BEGIN
15:40:04 650  	OPEN out_result_set FOR
15:40:04 651  	SELECT DISTINCT
15:40:04 652  	  TRANSACTION.ID
15:40:04 653  	FROM
15:40:04 654  	  TRANSACTION
15:40:04 655  	WHERE
15:40:04 656  	  TRANSACTION.ORDER_ID = in_order_id;
15:40:04 657  
15:40:04 658  EXCEPTION
15:40:04 659  WHEN OTHERS THEN
15:40:04 660  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 661  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 662  END GET_TRANSACTION_BY_ORDER_ID;
15:40:04 663  /******************************************************************************/
15:40:04 664  
15:40:04 665  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
15:40:04 666  /*
15:40:04 667  Throws exceptions:
15:40:04 668  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 669  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 670  */
15:40:04 671  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
15:40:04 672  	out_result_set OUT SYS_REFCURSOR
15:40:04 673  ) AS
15:40:04 674  -- VARIABLES
15:40:04 675  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
15:40:04 676  temp_order_id TRANSACTION.ORDER_ID%TYPE;
15:40:04 677  -- EXCEPTIONS
15:40:04 678  BAD_ORDER_ID EXCEPTION;
15:40:04 679  BEGIN
15:40:04 680  
15:40:04 681  	--TODO BOO, REMOVE ME
15:40:04 682  	BEGIN
15:40:04 683  	  SELECT
15:40:04 684  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
15:40:04 685  	  FROM
15:40:04 686  	    TRANSACTION
15:40:04 687  	  WHERE
15:40:04 688  	    TRANSACTION.ORDER_ID = in_order_id;
15:40:04 689  	  EXCEPTION
15:40:04 690  	    WHEN NO_DATA_FOUND THEN
15:40:04 691  	      RAISE BAD_ORDER_ID;
15:40:04 692  	END;
15:40:04 693  
15:40:04 694  	OPEN out_result_set FOR
15:40:04 695  	SELECT c.ID CHARGE_ID,
15:40:04 696  	  c.CHARGE_AMOUNT,
15:40:04 697  	  c.CHARGE_STATUS_ID,
15:40:04 698  	  c.INSTRUMENT_ID,
15:40:04 699  	  c.INSTRUMENT_TYPE_ID,
15:40:04 700  	  c.INVOICE_ID,
15:40:04 701  	  t.ID TRANSACTION_ID,
15:40:04 702  	  t.IS_REFUND,
15:40:04 703  	  t.IS_SETTLED,
15:40:04 704  	  t.ORDER_ID,
15:40:04 705  	  t.TRANSACTION_AMOUNT,
15:40:04 706  	  t.TRANSACTION_STATUS_ID,
15:40:04 707  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
15:40:04 708  	  t.CREATED_BY TRANSACTION_CREATED_BY,
15:40:04 709  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
15:40:04 710  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
15:40:04 711  	FROM CHARGE c
15:40:04 712  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
15:40:04 713  	WHERE TRANSACTION_ID IN (
15:40:04 714  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
15:40:04 715  	);
15:40:04 716  
15:40:04 717  EXCEPTION
15:40:04 718  WHEN BAD_ORDER_ID THEN
15:40:04 719  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 720  	  SPROC_NAME, 'No such order');
15:40:04 721  WHEN OTHERS THEN
15:40:04 722  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 723  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 724  END GET_TRANSACTIONS_BY_ORDER_ID;
15:40:04 725  /******************************************************************************/
15:40:04 726  
15:40:04 727  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
15:40:04 728  /*
15:40:04 729  Throws exceptions:
15:40:04 730  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 731  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 732  */
15:40:04 733  	in_invoice_id	IN  NUMBER,
15:40:04 734  	out_result_set OUT SYS_REFCURSOR
15:40:04 735  ) AS
15:40:04 736  -- VARIABLES
15:40:04 737  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
15:40:04 738  temp_invoice_id NUMBER;
15:40:04 739  -- EXCEPTIONS
15:40:04 740  BAD_INVOICE_ID EXCEPTION;
15:40:04 741  BEGIN
15:40:04 742  
15:40:04 743  	BEGIN
15:40:04 744  	  SELECT
15:40:04 745  	    INVOICE.ID into temp_invoice_id
15:40:04 746  	  FROM
15:40:04 747  	    INVOICE
15:40:04 748  	  WHERE
15:40:04 749  	    INVOICE.ID = in_invoice_id;
15:40:04 750  	  EXCEPTION
15:40:04 751  	    WHEN NO_DATA_FOUND THEN
15:40:04 752  	      RAISE BAD_INVOICE_ID;
15:40:04 753  	END;
15:40:04 754  
15:40:04 755  	OPEN out_result_set FOR
15:40:04 756  	SELECT DISTINCT
15:40:04 757  	  TRANSACTION.ID,
15:40:04 758  	  TRANSACTION.TRANSACTION_STATUS_ID,
15:40:04 759  	  TRANSACTION.CREATE_DATE,
15:40:04 760  	  TRANSACTION.UPDATE_DATE,
15:40:04 761  	  TRANSACTION.ORDER_ID,
15:40:04 762  	  TRANSACTION.TRANSACTION_AMOUNT
15:40:04 763  	FROM
15:40:04 764  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
15:40:04 765  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
15:40:04 766  	WHERE
15:40:04 767  	  INVOICE.ID = in_invoice_id
15:40:04 768  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V23.TRUE
15:40:04 769  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
15:40:04 770  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_CLOSED;
15:40:04 771  
15:40:04 772  EXCEPTION
15:40:04 773  WHEN BAD_INVOICE_ID THEN
15:40:04 774  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 775  	  SPROC_NAME, 'No such invoice');
15:40:04 776  WHEN OTHERS THEN
15:40:04 777  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 778  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 779  END GET_CLOSED_REFUNDS_BY_INVOICE;
15:40:04 780  
15:40:04 781  /******************************************************************************/
15:40:04 782  
15:40:04 783  PROCEDURE GET_TRANSACTION_ATTEMPTS (
15:40:04 784  /*
15:40:04 785  Throws exceptions:
15:40:04 786  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 787  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 788  */
15:40:04 789  	in_transaction_id IN  NUMBER,
15:40:04 790  	out_result_set	  OUT SYS_REFCURSOR
15:40:04 791  ) AS
15:40:04 792  -- VARIABLES
15:40:04 793  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
15:40:04 794  temp_transaction_id NUMBER;
15:40:04 795  -- EXCEPTIONS
15:40:04 796  BAD_TRANSACTION_ID EXCEPTION;
15:40:04 797  BEGIN
15:40:04 798  
15:40:04 799  	BEGIN
15:40:04 800  	  SELECT
15:40:04 801  	    TRANSACTION.ID into temp_transaction_id
15:40:04 802  	  FROM
15:40:04 803  	    TRANSACTION
15:40:04 804  	  WHERE
15:40:04 805  	    TRANSACTION.ID = in_transaction_id;
15:40:04 806  	  EXCEPTION
15:40:04 807  	    WHEN NO_DATA_FOUND THEN
15:40:04 808  	      RAISE BAD_TRANSACTION_ID;
15:40:04 809  	END;
15:40:04 810  
15:40:04 811  	OPEN out_result_set FOR
15:40:04 812  	SELECT
15:40:04 813  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
15:40:04 814  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
15:40:04 815  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
15:40:04 816  	  TRANSACTION_ATTEMPT.CREATE_DATE,
15:40:04 817  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
15:40:04 818  	FROM
15:40:04 819  	  TRANSACTION_ATTEMPT
15:40:04 820  	WHERE
15:40:04 821  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
15:40:04 822  
15:40:04 823  EXCEPTION
15:40:04 824  WHEN BAD_TRANSACTION_ID THEN
15:40:04 825  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 826  	  SPROC_NAME, 'No such transaction');
15:40:04 827  WHEN OTHERS THEN
15:40:04 828  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 829  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 830  END GET_TRANSACTION_ATTEMPTS;
15:40:04 831  
15:40:04 832  /******************************************************************************/
15:40:04 833  
15:40:04 834  PROCEDURE RESERVE_TRANSACTION_ID (
15:40:04 835  /*
15:40:04 836  Throws exceptions:
15:40:04 837  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 838  */
15:40:04 839  	out_transaction_id OUT NUMBER
15:40:04 840  ) AS
15:40:04 841  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
15:40:04 842  BEGIN
15:40:04 843  	SELECT
15:40:04 844  	  TRN_ID_SEQ.nextVal into out_transaction_id
15:40:04 845  	FROM DUAL;
15:40:04 846  EXCEPTION
15:40:04 847  WHEN OTHERS THEN
15:40:04 848  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 849  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 850  END RESERVE_TRANSACTION_ID;
15:40:04 851  
15:40:04 852  /******************************************************************************/
15:40:04 853  
15:40:04 854  PROCEDURE GET_TRANSACTION_BY_ID (
15:40:04 855  /*
15:40:04 856  Throws exceptions:
15:40:04 857  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 858  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 859  */
15:40:04 860  	in_transaction_id IN NUMBER,
15:40:04 861  	out_result_set	  OUT SYS_REFCURSOR
15:40:04 862  ) AS
15:40:04 863  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
15:40:04 864  -- VARIABLES
15:40:04 865  temp_transaction_id NUMBER;
15:40:04 866  -- EXCPTIONS
15:40:04 867  BAD_TRANSACTION_ID EXCEPTION;
15:40:04 868  BEGIN
15:40:04 869  	BEGIN
15:40:04 870  	  SELECT
15:40:04 871  	    TRANSACTION.ID into temp_transaction_id
15:40:04 872  	  FROM
15:40:04 873  	    TRANSACTION
15:40:04 874  	  WHERE
15:40:04 875  	    TRANSACTION.ID = in_transaction_id;
15:40:04 876  	  EXCEPTION
15:40:04 877  	    WHEN NO_DATA_FOUND THEN
15:40:04 878  	      RAISE BAD_TRANSACTION_ID;
15:40:04 879  	END;
15:40:04 880  
15:40:04 881  	PROCS_TRANSACTION_CRU_V23.READ_TRANSACTION(
15:40:04 882  	  in_transaction_id => in_transaction_id,
15:40:04 883  	  out_result_set    => out_result_set
15:40:04 884  	);
15:40:04 885  
15:40:04 886  EXCEPTION
15:40:04 887  WHEN NO_DATA_FOUND THEN
15:40:04 888  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 889  	  SPROC_NAME, 'No such transaction');
15:40:04 890  WHEN OTHERS THEN
15:40:04 891  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 892  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 893  END GET_TRANSACTION_BY_ID;
15:40:04 894  
15:40:04 895  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:40:04 896  /*
15:40:04 897  Throws exceptions:
15:40:04 898  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 899  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
15:40:04 900  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 901  */
15:40:04 902  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:40:04 903  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:40:04 904  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:40:04 905  ) AS
15:40:04 906  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
15:40:04 907  -- VARIABLES
15:40:04 908  temp_transaction_id TRANSACTION.ID%TYPE;
15:40:04 909  -- EXCEPTIONS
15:40:04 910  BAD_TRANSACTION_ID   EXCEPTION;
15:40:04 911  ORDER_ID_IS_NOT_NULL EXCEPTION;
15:40:04 912  CRU_UNKNOWN_ERROR    EXCEPTION;
15:40:04 913  EXCEPTION_MESSAGE VARCHAR2(1024);
15:40:04 914  BEGIN
15:40:04 915  	BEGIN
15:40:04 916  	  SELECT
15:40:04 917  	    TRANSACTION.ID into temp_transaction_id
15:40:04 918  	  FROM
15:40:04 919  	    TRANSACTION
15:40:04 920  	  WHERE
15:40:04 921  	    TRANSACTION.ID = in_transaction_id;
15:40:04 922  	  EXCEPTION
15:40:04 923  	    WHEN NO_DATA_FOUND THEN
15:40:04 924  	      RAISE BAD_TRANSACTION_ID;
15:40:04 925  	END;
15:40:04 926  
15:40:04 927  	BEGIN
15:40:04 928  	  PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION_ORDER_ID(
15:40:04 929  	    in_transaction_id => in_transaction_id,
15:40:04 930  	    in_order_id       => in_order_id,
15:40:04 931  	    in_updated_by     => in_updated_by
15:40:04 932  	  );
15:40:04 933  	  EXCEPTION
15:40:04 934  	    WHEN OTHERS THEN
15:40:04 935  	      IF SQLCODE = APP_EXCEPTION_CODES_V23.NOT_FOUND THEN
15:40:04 936  		RAISE ORDER_ID_IS_NOT_NULL;
15:40:04 937  	      ELSE
15:40:04 938  		EXCEPTION_MESSAGE := SQLERRM;
15:40:04 939  		RAISE CRU_UNKNOWN_ERROR;
15:40:04 940  	      END IF;
15:40:04 941  	END;
15:40:04 942  
15:40:04 943  EXCEPTION
15:40:04 944  WHEN BAD_TRANSACTION_ID THEN
15:40:04 945  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 946  	  SPROC_NAME, 'No such transaction');
15:40:04 947  WHEN ORDER_ID_IS_NOT_NULL THEN
15:40:04 948  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 949  	  SPROC_NAME, 'Order id is not null');
15:40:04 950  WHEN CRU_UNKNOWN_ERROR THEN
15:40:04 951  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 952  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
15:40:04 953  WHEN OTHERS THEN
15:40:04 954  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 955  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 956  END UPDATE_TRANSACTION_ORDER_ID;
15:40:04 957  
15:40:04 958  /******************************************************************************/
15:40:04 959  
15:40:04 960  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
15:40:04 961  	in_transaction_id IN NUMBER
15:40:04 962  ) RETURN NUMBER AS
15:40:04 963  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
15:40:04 964  -- Variables
15:40:04 965  var_tax_amount NUMBER(10,2);
15:40:04 966  BEGIN
15:40:04 967  
15:40:04 968  	SELECT
15:40:04 969  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
15:40:04 970  	FROM
15:40:04 971  	  LINE_ITEM LI
15:40:04 972  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
15:40:04 973  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
15:40:04 974  	WHERE
15:40:04 975  	  CH.TRANSACTION_ID = in_transaction_id;
15:40:04 976  
15:40:04 977  	IF var_tax_amount IS NULL THEN
15:40:04 978  	  var_tax_amount := 0;
15:40:04 979  	END IF;
15:40:04 980  
15:40:04 981  	RETURN var_tax_amount;
15:40:04 982  
15:40:04 983  END GET_TRANSACTION_TAX_AMOUNT;
15:40:04 984  
15:40:04 985  /******************************************************************************/
15:40:04 986  
15:40:04 987  FUNCTION GET_TRANSACTION_INTRL_TAXES (
15:40:04 988  	in_transaction_id IN NUMBER
15:40:04 989  ) RETURN NUMBER AS
15:40:04 990  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
15:40:04 991  -- Variables
15:40:04 992  var_intrl_tax_amount NUMBER(10, 2);
15:40:04 993  BEGIN
15:40:04 994  
15:40:04 995  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
15:40:04 996  	FROM
15:40:04 997  	  LINE_ITEM LI
15:40:04 998  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
15:40:04 999  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
15:40:04 1000  	   INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
15:40:04 1001  	 WHERE
15:40:04 1002  	   CH.TRANSACTION_ID = in_transaction_id
15:40:04 1003  	   AND T.TAX_TYPE_ID IN (
15:40:04 1004  	     SELECT GLOBAL_ENUMS_V23.TAX_TYPE_VAT FROM DUAL
15:40:04 1005  	   );
15:40:04 1006  
15:40:04 1007  	 IF var_intrl_tax_amount IS NULL THEN
15:40:04 1008  	   var_intrl_tax_amount := 0;
15:40:04 1009  	 END IF;
15:40:04 1010  
15:40:04 1011  	 RETURN var_intrl_tax_amount;
15:40:04 1012  
15:40:04 1013  END GET_TRANSACTION_INTRL_TAXES;
15:40:04 1014  
15:40:04 1015  /******************************************************************************/
15:40:04 1016  -- norlov: #38796
15:40:04 1017  PROCEDURE GET_TRANSACTIONS (
15:40:04 1018  /*
15:40:04 1019  Throws exceptions:
15:40:04 1020  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 1021  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 1022  */
15:40:04 1023  	 in_group_id	       IN  NUMBER,
15:40:04 1024  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
15:40:04 1025  	 in_subscription_id    IN NUMBER DEFAULT NULL,
15:40:04 1026  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
15:40:04 1027  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
15:40:04 1028  	 in_transaction_status IN NUMBER DEFAULT NULL,
15:40:04 1029  	 out_result_set        OUT SYS_REFCURSOR
15:40:04 1030  ) AS
15:40:04 1031  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
15:40:04 1032  -- VARIABLES
15:40:04 1033  var_account_id ACCOUNT.ID%TYPE;
15:40:04 1034  statement VARCHAR2(2000);
15:40:04 1035  -- EXCEPTIONS
15:40:04 1036  BAD_GROUP_ID   EXCEPTION;
15:40:04 1037  BEGIN
15:40:04 1038  	-- check group id
15:40:04 1039  	BEGIN
15:40:04 1040  	   SELECT
15:40:04 1041  	     ACCOUNT.ID into var_account_id
15:40:04 1042  	   FROM
15:40:04 1043  	     ACCOUNT
15:40:04 1044  	   WHERE
15:40:04 1045  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:04 1046  	   EXCEPTION
15:40:04 1047  	     WHEN NO_DATA_FOUND THEN
15:40:04 1048  	       RAISE BAD_GROUP_ID;
15:40:04 1049  	 END;
15:40:04 1050  
15:40:04 1051  	 OPEN out_result_set FOR
15:40:04 1052  	 SELECT
15:40:04 1053  	   TRANSACTION.ID,
15:40:04 1054  	   TRANSACTION.TRANSACTION_STATUS_ID,
15:40:04 1055  	   TRANSACTION.TRANSACTION_AMOUNT,
15:40:04 1056  	   TRANSACTION.CREATE_DATE,
15:40:04 1057  	   TRANSACTION.CREATED_BY,
15:40:04 1058  	   TRANSACTION.IS_REFUND,
15:40:04 1059  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
15:40:04 1060  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
15:40:04 1061  	 FROM
15:40:04 1062  	   TRANSACTION
15:40:04 1063  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
15:40:04 1064  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
15:40:04 1065  	 WHERE
15:40:04 1066  	   -- Filter by invoice ID
15:40:04 1067  	   (
15:40:04 1068  	     INVOICE.ID IN (
15:40:04 1069  	       -- Gift certificate invoices
15:40:04 1070  	       SELECT
15:40:04 1071  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
15:40:04 1072  	       FROM
15:40:04 1073  		 GIFT_CERTIFICATE
15:40:04 1074  	       WHERE
15:40:04 1075  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
15:40:04 1076  		 -- If subscription_id is set then return nothing
15:40:04 1077  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
15:40:04 1078  	     )
15:40:04 1079  	     OR
15:40:04 1080  	     INVOICE.ID IN (
15:40:04 1081  	       SELECT
15:40:04 1082  		 LICENSE.INVOICE_ID
15:40:04 1083  	       FROM
15:40:04 1084  		 LICENSE
15:40:04 1085  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 1086  	       WHERE
15:40:04 1087  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:04 1088  		 -- Filter by subscription id
15:40:04 1089  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
15:40:04 1090  	     )
15:40:04 1091  	   )
15:40:04 1092  	   -- Filter by invoice id
15:40:04 1093  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
15:40:04 1094  	   -- Filter by start date
15:40:04 1095  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
15:40:04 1096  	   -- Filter by end date
15:40:04 1097  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
15:40:04 1098  	   -- Filter by transaction status
15:40:04 1099  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
15:40:04 1100  
15:40:04 1101  /*
15:40:04 1102  
15:40:04 1103  statement :=  'select distinct '||CHR(10)
15:40:04 1104  || ' TRANSACTION.ID,'||CHR(10)
15:40:04 1105  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
15:40:04 1106  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
15:40:04 1107  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
15:40:04 1108  || ' TRANSACTION.CREATED_BY, '||CHR(10)
15:40:04 1109  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
15:40:04 1110  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
15:40:04 1111  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
15:40:04 1112  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
15:40:04 1113  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
15:40:04 1114  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
15:40:04 1115  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
15:40:04 1116  
15:40:04 1117  IF (in_transaction_status IS NOT NULL) THEN
15:40:04 1118  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
15:40:04 1119  END IF;
15:40:04 1120  
15:40:04 1121  IF (in_invoice_id IS NOT NULL) THEN
15:40:04 1122  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
15:40:04 1123  END IF;
15:40:04 1124  
15:40:04 1125  IF (in_subscription_id IS NOT NULL) THEN
15:40:04 1126  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
15:40:04 1127  END IF;
15:40:04 1128  
15:40:04 1129  IF (in_start_date IS NOT NULL) THEN
15:40:04 1130  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
15:40:04 1131  END IF;
15:40:04 1132  
15:40:04 1133  IF (in_end_date IS NOT NULL) THEN
15:40:04 1134  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
15:40:04 1135  END IF;
15:40:04 1136  dbms_output.put_line(statement);
15:40:04 1137  OPEN out_result_set FOR statement;
15:40:04 1138  
15:40:04 1139  */
15:40:04 1140  
15:40:04 1141  EXCEPTION
15:40:04 1142  WHEN BAD_GROUP_ID THEN
15:40:04 1143  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1144  	   SPROC_NAME, 'No such group');
15:40:04 1145  WHEN OTHERS THEN
15:40:04 1146  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1147  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1148  END GET_TRANSACTIONS;
15:40:04 1149  
15:40:04 1150  FUNCTION IS_TRANSACTION_COLLECTED (
15:40:04 1151  /*
15:40:04 1152  Throws:
15:40:04 1153  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 1154  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 1155  Returns:
15:40:04 1156  GLOBAL_CONST.TRUE if transaction collected,
15:40:04 1157  GLOBAL_CONST.FALSE else
15:40:04 1158  */
15:40:04 1159  	 in_transaction_id IN NUMBER
15:40:04 1160  ) RETURN NUMBER AS
15:40:04 1161  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
15:40:04 1162  -- VARIABLES
15:40:04 1163  temp_transaction_id     NUMBER;
15:40:04 1164  var_success_attemps_num NUMBER;
15:40:04 1165  -- EXCEPTIONS
15:40:04 1166  BAD_TRANSACTION_ID EXCEPTION;
15:40:04 1167  BEGIN
15:40:04 1168  
15:40:04 1169  	 BEGIN
15:40:04 1170  	   SELECT
15:40:04 1171  	     TRANSACTION.ID into temp_transaction_id
15:40:04 1172  	   FROM
15:40:04 1173  	     TRANSACTION
15:40:04 1174  	   WHERE
15:40:04 1175  	     TRANSACTION.ID = in_transaction_id;
15:40:04 1176  	   EXCEPTION
15:40:04 1177  	     WHEN NO_DATA_FOUND THEN
15:40:04 1178  	       RAISE BAD_TRANSACTION_ID;
15:40:04 1179  	 END;
15:40:04 1180  
15:40:04 1181  	 SELECT
15:40:04 1182  	   COUNT(*) into var_success_attemps_num
15:40:04 1183  	 FROM
15:40:04 1184  	   TRANSACTION_ATTEMPT
15:40:04 1185  	 WHERE
15:40:04 1186  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
15:40:04 1187  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS FROM DUAL );
15:40:04 1188  
15:40:04 1189  	 IF var_success_attemps_num > 0 THEN
15:40:04 1190  	   RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 1191  	 ELSE
15:40:04 1192  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 1193  	 END IF;
15:40:04 1194  
15:40:04 1195  EXCEPTION
15:40:04 1196  WHEN BAD_TRANSACTION_ID THEN
15:40:04 1197  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1198  	   SPROC_NAME, 'No such transaction');
15:40:04 1199  WHEN OTHERS THEN
15:40:04 1200  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1201  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1202  END IS_TRANSACTION_COLLECTED;
15:40:04 1203  
15:40:04 1204  
15:40:04 1205  /******************************************************************************/
15:40:04 1206  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
15:40:04 1207  /*
15:40:04 1208  Throws exceptions:
15:40:04 1209  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 1210  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 1211  */
15:40:04 1212  	 in_charge_id	in  number,
15:40:04 1213  	 out_attempt_count OUT NUMBER
15:40:04 1214  ) AS
15:40:04 1215  -- VARIABLES
15:40:04 1216  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_NEXT_ATTEMPT_NUMBER';
15:40:04 1217  temp_transaction_id NUMBER;
15:40:04 1218  -- EXCEPTIONS
15:40:04 1219  BAD_CHARGE_ID EXCEPTION;
15:40:04 1220  BEGIN
15:40:04 1221  
15:40:04 1222  	 BEGIN
15:40:04 1223  	   SELECT
15:40:04 1224  	     TRANSACTION_ID into temp_transaction_id
15:40:04 1225  	   FROM
15:40:04 1226  	     CHARGE
15:40:04 1227  	   WHERE
15:40:04 1228  	     CHARGE.ID = in_charge_id;
15:40:04 1229  	   EXCEPTION
15:40:04 1230  	     WHEN NO_DATA_FOUND THEN
15:40:04 1231  	       RAISE BAD_CHARGE_ID;
15:40:04 1232  	 END;
15:40:04 1233  
15:40:04 1234  	 select
15:40:04 1235  	   count(1)
15:40:04 1236  	 into
15:40:04 1237  	   out_attempt_count
15:40:04 1238  	 from
15:40:04 1239  	   transaction tr
15:40:04 1240  	 inner join
15:40:04 1241  	   transaction_attempt ta
15:40:04 1242  	 on (tr.id = ta.transaction_id)
15:40:04 1243  	 where
15:40:04 1244  	   tr.ID = temp_transaction_id;
15:40:04 1245  
15:40:04 1246  	 out_attempt_count := out_attempt_count + 1;
15:40:04 1247  
15:40:04 1248  EXCEPTION
15:40:04 1249  WHEN BAD_CHARGE_ID THEN
15:40:04 1250  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1251  	   SPROC_NAME, 'No such charge');
15:40:04 1252  WHEN OTHERS THEN
15:40:04 1253  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1254  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1255  end GET_NEXT_ATTEMPT_NUMBER;
15:40:04 1256  /******************************************************************************/
15:40:04 1257  
15:40:04 1258  END PROCS_TRANSACTION_V23;
15:40:04 1259  .
15:40:04 SQL> /

Package body created.

Elapsed: 00:00:00.11
15:40:04 SQL> 
15:40:04 SQL> prompt Compiling body for procs_license.sql
Compiling body for procs_license.sql
15:40:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V23" AS
15:40:04   2  
15:40:04   3  PROCEDURE CREATE_LICENSE(
15:40:04   4  /*
15:40:04   5  Throws exceptions:
15:40:04   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04   8  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:04   9  */
15:40:04  10  	in_status_id		    IN NUMBER,
15:40:04  11  	in_needs_entitlements	    IN NUMBER,
15:40:04  12  	in_start_date		    IN DATE,
15:40:04  13  	in_end_date		    IN DATE,
15:40:04  14  	in_offer_id		    IN NUMBER,
15:40:04  15  	in_subscription_id	    IN NUMBER,
15:40:04  16  	in_invoice_id		    IN NUMBER,
15:40:04  17  	in_created_by		    IN VARCHAR2,
15:40:04  18  	in_is_extension 	    IN NUMBER,
15:40:04  19  	in_current_offer_index	    IN NUMBER,
15:40:04  20  	in_current_offer_recurr_num IN NUMBER,
15:40:04  21  	out_license_id		    OUT NUMBER
15:40:04  22  ) AS
15:40:04  23  -- VARIABLES
15:40:04  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
15:40:04  25  temp_offer_id	   NUMBER;
15:40:04  26  temp_subscription_id NUMBER;
15:40:04  27  temp_invoice_id	   NUMBER;
15:40:04  28  
15:40:04  29  var_new_license_id NUMBER;
15:40:04  30  var_offer_duration VARCHAR2(30);
15:40:04  31  
15:40:04  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
15:40:04  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
15:40:04  34  var_offer_years	    NUMBER;
15:40:04  35  var_offer_months	    NUMBER;
15:40:04  36  var_offer_days	    NUMBER;
15:40:04  37  
15:40:04  38  -- EXCEPTIONS
15:40:04  39  BAD_OFFER_ID	     EXCEPTION;
15:40:04  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
15:40:04  41  BAD_INVOICE_ID	     EXCEPTION;
15:40:04  42  BAD_OFFER_DURATION     EXCEPTION;
15:40:04  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04  44  BEGIN
15:40:04  45  
15:40:04  46  	-- TODO:
15:40:04  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
15:40:04  48  
15:40:04  49  	out_license_id := NULL;
15:40:04  50  
15:40:04  51  	-- get offer id and offer entitlement duration
15:40:04  52  	BEGIN
15:40:04  53  	  SELECT
15:40:04  54  	    OFFER.ID,
15:40:04  55  	    OFFER.ENTITLEMENT_DURATION
15:40:04  56  	    into
15:40:04  57  	    temp_offer_id,
15:40:04  58  	    var_offer_duration
15:40:04  59  	  FROM
15:40:04  60  	    OFFER
15:40:04  61  	  WHERE
15:40:04  62  	    OFFER.ID = in_offer_id;
15:40:04  63  	  EXCEPTION
15:40:04  64  	  WHEN NO_DATA_FOUND THEN
15:40:04  65  	    RAISE BAD_OFFER_ID;
15:40:04  66  	END;
15:40:04  67  
15:40:04  68  	-- Check that subscription exists
15:40:04  69  	BEGIN
15:40:04  70  	  SELECT
15:40:04  71  	    SUBSCRIPTION.ID into temp_subscription_id
15:40:04  72  	  FROM
15:40:04  73  	    SUBSCRIPTION
15:40:04  74  	  WHERE
15:40:04  75  	    SUBSCRIPTION.ID = in_subscription_id;
15:40:04  76  	  EXCEPTION
15:40:04  77  	  WHEN NO_DATA_FOUND THEN
15:40:04  78  	    RAISE BAD_SUBSCRIPTION_ID;
15:40:04  79  	END;
15:40:04  80  
15:40:04  81  	-- Check that invoice exists
15:40:04  82  	BEGIN
15:40:04  83  	  SELECT
15:40:04  84  	    INVOICE.ID into temp_invoice_id
15:40:04  85  	  FROM
15:40:04  86  	    INVOICE
15:40:04  87  	  WHERE
15:40:04  88  	    INVOICE.ID = in_invoice_id;
15:40:04  89  	  EXCEPTION
15:40:04  90  	  WHEN NO_DATA_FOUND THEN
15:40:04  91  	    RAISE BAD_INVOICE_ID;
15:40:04  92  	END;
15:40:04  93  
15:40:04  94  	-- convert offer duration into intervals
15:40:04  95  	BEGIN
15:40:04  96  	  PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(
15:40:04  97  	    var_offer_duration,
15:40:04  98  	    var_offer_years,
15:40:04  99  	    var_offer_months,
15:40:04 100  	    var_offer_days);
15:40:04 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
15:40:04 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
15:40:04 103  	  EXCEPTION
15:40:04 104  	    WHEN OTHERS THEN
15:40:04 105  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 106  	      RAISE BAD_OFFER_DURATION;
15:40:04 107  	END;
15:40:04 108  
15:40:04 109  	-- insert new row into license table
15:40:04 110  	PROCS_LICENSE_CRU_V23.CREATE_LICENSE(
15:40:04 111  	  out_license_id	      => var_new_license_id,
15:40:04 112  	  in_license_status_id	      => in_status_id,
15:40:04 113  	  in_needs_entitlements       => in_needs_entitlements,
15:40:04 114  	  in_start_date 	      => in_start_date,
15:40:04 115  	  in_offer_id		      => in_offer_id,
15:40:04 116  	  in_subscription_id	      => in_subscription_id,
15:40:04 117  	  in_invoice_id 	      => in_invoice_id,
15:40:04 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
15:40:04 119  	  in_created_by 	      => in_created_by,
15:40:04 120  	  in_is_extension	      => in_is_extension,
15:40:04 121  	  in_current_offer_index      => in_current_offer_index,
15:40:04 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
15:40:04 123  	);
15:40:04 124  
15:40:04 125  	out_license_id := var_new_license_id;
15:40:04 126  
15:40:04 127  EXCEPTION
15:40:04 128  WHEN BAD_OFFER_DURATION THEN
15:40:04 129  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
15:40:04 131  WHEN BAD_OFFER_ID THEN
15:40:04 132  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 133  	  SPROC_NAME, 'No such offer');
15:40:04 134  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 135  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 136  	  SPROC_NAME, 'No such subscription');
15:40:04 137  WHEN BAD_INVOICE_ID THEN
15:40:04 138  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 139  	  SPROC_NAME, 'No such invoice');
15:40:04 140  WHEN OTHERS THEN
15:40:04 141  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 143  END;
15:40:04 144  
15:40:04 145  /******************************************************************************/
15:40:04 146  
15:40:04 147  PROCEDURE UPDATE_LICENSE_STATUS(
15:40:04 148  	  in_license_id     IN NUMBER,
15:40:04 149  	  in_license_status IN NUMBER,
15:40:04 150  	  in_updated_by     IN VARCHAR2,
15:40:04 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
15:40:04 152  ) AS
15:40:04 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
15:40:04 154  -- VARIABLES
15:40:04 155  temp_license_id NUMBER;
15:40:04 156  -- EXCEPTIONS
15:40:04 157  BAD_LICENSE_ID	     EXCEPTION;
15:40:04 158  BAD_LICENSE_STATUS     EXCEPTION;
15:40:04 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 160  BEGIN
15:40:04 161  
15:40:04 162  	BEGIN
15:40:04 163  	  SELECT
15:40:04 164  	    ID into temp_license_id
15:40:04 165  	  FROM
15:40:04 166  	    LICENSE
15:40:04 167  	  WHERE
15:40:04 168  	    LICENSE.ID = in_license_id;
15:40:04 169  	  EXCEPTION
15:40:04 170  	    WHEN NO_DATA_FOUND THEN
15:40:04 171  	      RAISE BAD_LICENSE_ID;
15:40:04 172  	END;
15:40:04 173  
15:40:04 174  	IF in_license_status != GLOBAL_STATUSES_V23.LICENSE_CLOSED
15:40:04 175  	   AND in_license_status != GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 176  	   AND in_license_status != GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD THEN
15:40:04 177  	  RAISE BAD_LICENSE_STATUS;
15:40:04 178  	END IF;
15:40:04 179  
15:40:04 180  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V23.TRUE) then
15:40:04 181  	  PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 182  	    in_license_id	 => in_license_id,
15:40:04 183  	    in_updated_by	 => in_updated_by,
15:40:04 184  	    in_license_status_id => in_license_status,
15:40:04 185  	    in_entitlement_end_date	 => sysdate
15:40:04 186  	  );
15:40:04 187  	ELSE
15:40:04 188  	  PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 189  	    in_license_id	 => in_license_id,
15:40:04 190  	    in_updated_by	 => in_updated_by,
15:40:04 191  	    in_license_status_id => in_license_status
15:40:04 192  	  );
15:40:04 193  	END IF;
15:40:04 194  
15:40:04 195  EXCEPTION
15:40:04 196  WHEN BAD_LICENSE_STATUS THEN
15:40:04 197  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 198  	  SPROC_NAME, 'Bad status id');
15:40:04 199  WHEN BAD_LICENSE_ID THEN
15:40:04 200  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 201  	  SPROC_NAME, 'No such license');
15:40:04 202  WHEN OTHERS THEN
15:40:04 203  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 204  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 205  END UPDATE_LICENSE_STATUS;
15:40:04 206  
15:40:04 207  /******************************************************************************/
15:40:04 208  
15:40:04 209  PROCEDURE GET_ENDING_LICENSES (
15:40:04 210  	in_hours_number IN NUMBER,
15:40:04 211  	out_result_set	OUT SYS_REFCURSOR
15:40:04 212  ) AS
15:40:04 213  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
15:40:04 214  -- VARIABLES
15:40:04 215  var_days		NUMBER;
15:40:04 216  var_hours 	NUMBER;
15:40:04 217  var_time_interval INTERVAL DAY (3) TO SECOND;
15:40:04 218  BEGIN
15:40:04 219  
15:40:04 220  	var_hours := mod(in_hours_number,24);
15:40:04 221  	var_days := (in_hours_number - var_hours) / 24;
15:40:04 222  	var_time_interval := var_days||' '||var_hours||':0:0';
15:40:04 223  
15:40:04 224  	OPEN out_result_set FOR
15:40:04 225  SELECT * FROM
15:40:04 226  (
15:40:04 227  	SELECT
15:40:04 228  	  LICENSE.ID,
15:40:04 229  	  LICENSE.CREATE_DATE,
15:40:04 230  	  LICENSE.CREATED_BY,
15:40:04 231  	  LICENSE.CURRENT_OFFER_INDEX,
15:40:04 232  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
15:40:04 233  	  LICENSE.END_DATE,
15:40:04 234  	  LICENSE.ENTITLEMENT_END_DATE,
15:40:04 235  	  LICENSE.INVOICE_ID,
15:40:04 236  	  LICENSE.IS_EXTENSION,
15:40:04 237  	  LICENSE.LICENSE_STATUS_ID,
15:40:04 238  	  LICENSE.OFFER_ID,
15:40:04 239  	  LICENSE.START_DATE,
15:40:04 240  	  LICENSE.SUBSCRIPTION_ID,
15:40:04 241  	  LICENSE.UPDATE_DATE,
15:40:04 242  	  LICENSE.UPDATED_BY
15:40:04 243  	FROM
15:40:04 244  	  LICENSE
15:40:04 245  	WHERE
15:40:04 246  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
15:40:04 247  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 248  	  AND NOT EXISTS
15:40:04 249  	  (
15:40:04 250  	    SELECT NULL
15:40:04 251  	    FROM PROCESS_RETRY_THROTTLE
15:40:04 252  	    WHERE PROCESS_NAME = SPROC_NAME
15:40:04 253  	      AND GENERIC_ID = LICENSE.ID
15:40:04 254  	  )
15:40:04 255  	  AND ROWNUM <= 40000
15:40:04 256  	  ORDER BY dbms_random.value
15:40:04 257  ) WHERE
15:40:04 258  	  ROWNUM <= 4000;
15:40:04 259  EXCEPTION
15:40:04 260  WHEN OTHERS THEN
15:40:04 261  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 263  END GET_ENDING_LICENSES;
15:40:04 264  
15:40:04 265  
15:40:04 266  /******************************************************************************/
15:40:04 267  
15:40:04 268  PROCEDURE GET_ENDING_LICENSES_CC (
15:40:04 269  	in_hours_number IN NUMBER,
15:40:04 270  	out_result_set	OUT SYS_REFCURSOR,
15:40:04 271  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:40:04 272  ) AS
15:40:04 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
15:40:04 274  -- VARIABLES
15:40:04 275  var_days		NUMBER;
15:40:04 276  var_hours 	NUMBER;
15:40:04 277  var_time_interval INTERVAL DAY (3) TO SECOND;
15:40:04 278  BEGIN
15:40:04 279  
15:40:04 280  	var_hours := mod(in_hours_number,24);
15:40:04 281  	var_days := (in_hours_number - var_hours) / 24;
15:40:04 282  	var_time_interval := var_days||' '||var_hours||':0:0';
15:40:04 283  
15:40:04 284  	OPEN out_result_set FOR
15:40:04 285  SELECT * FROM
15:40:04 286  (
15:40:04 287  	SELECT
15:40:04 288  	  LICENSE.ID,
15:40:04 289  	  LICENSE.CREATE_DATE,
15:40:04 290  	  LICENSE.CREATED_BY,
15:40:04 291  	  LICENSE.CURRENT_OFFER_INDEX,
15:40:04 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
15:40:04 293  	  LICENSE.END_DATE,
15:40:04 294  	  LICENSE.ENTITLEMENT_END_DATE,
15:40:04 295  	  LICENSE.INVOICE_ID,
15:40:04 296  	  LICENSE.IS_EXTENSION,
15:40:04 297  	  LICENSE.LICENSE_STATUS_ID,
15:40:04 298  	  LICENSE.OFFER_ID,
15:40:04 299  	  LICENSE.START_DATE,
15:40:04 300  	  LICENSE.SUBSCRIPTION_ID,
15:40:04 301  	  LICENSE.UPDATE_DATE,
15:40:04 302  	  LICENSE.UPDATED_BY
15:40:04 303  	FROM
15:40:04 304  	  LICENSE
15:40:04 305  	WHERE
15:40:04 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
15:40:04 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 308  	  AND NOT EXISTS
15:40:04 309  	  (
15:40:04 310  	    SELECT NULL
15:40:04 311  	    FROM PROCESS_RETRY_THROTTLE
15:40:04 312  	    WHERE PROCESS_NAME = in_process_name
15:40:04 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
15:40:04 314  	  )
15:40:04 315  	  AND ROWNUM <= 10000
15:40:04 316  	  ORDER BY dbms_random.value
15:40:04 317  ) WHERE
15:40:04 318  	  ROWNUM <= 1000
15:40:04 319  	  ;
15:40:04 320  EXCEPTION
15:40:04 321  WHEN OTHERS THEN
15:40:04 322  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 324  END GET_ENDING_LICENSES_CC;
15:40:04 325  
15:40:04 326  /******************************************************************************/
15:40:04 327  
15:40:04 328  PROCEDURE GET_RECURRING_OFFER (
15:40:04 329  	in_license_id  IN NUMBER,
15:40:04 330  	out_result_set OUT SYS_REFCURSOR
15:40:04 331  ) AS
15:40:04 332  -- VARIABLES
15:40:04 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
15:40:04 334  var_offer_chain_id	    NUMBER;
15:40:04 335  var_offer_id		    NUMBER;
15:40:04 336  var_offer_num_recurrences     NUMBER;
15:40:04 337  var_license_cur_offer_rec_num NUMBER;
15:40:04 338  var_offer_index		    NUMBER;
15:40:04 339  -- EXCEPTIONS
15:40:04 340  BAD_LICENSE_ID	     EXCEPTION;
15:40:04 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
15:40:04 342  BEGIN
15:40:04 343  
15:40:04 344  	BEGIN
15:40:04 345  	  SELECT
15:40:04 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
15:40:04 347  	    LICENSE.OFFER_ID,
15:40:04 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
15:40:04 349  	    into
15:40:04 350  	    var_offer_chain_id,
15:40:04 351  	    var_offer_id,
15:40:04 352  	    var_license_cur_offer_rec_num
15:40:04 353  	  FROM
15:40:04 354  	    LICENSE
15:40:04 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 356  	  WHERE
15:40:04 357  	    LICENSE.ID = in_license_id;
15:40:04 358  	  EXCEPTION
15:40:04 359  	    WHEN NO_DATA_FOUND THEN
15:40:04 360  	      RAISE BAD_LICENSE_ID;
15:40:04 361  	END;
15:40:04 362  
15:40:04 363  	BEGIN
15:40:04 364  	  SELECT
15:40:04 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
15:40:04 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
15:40:04 367  	    into
15:40:04 368  	    var_offer_num_recurrences,
15:40:04 369  	    var_offer_index
15:40:04 370  	  FROM
15:40:04 371  	    OFFER_OFFER_CHAIN
15:40:04 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:40:04 373  	  WHERE
15:40:04 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:40:04 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
15:40:04 376  	  EXCEPTION
15:40:04 377  	    WHEN NO_DATA_FOUND THEN
15:40:04 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
15:40:04 379  	END;
15:40:04 380  
15:40:04 381  	IF var_offer_num_recurrences = 0 THEN
15:40:04 382  	  --out_result_set := NULL;
15:40:04 383  	  -- TODO: Remove this hardcode
15:40:04 384  	  OPEN out_result_set FOR
15:40:04 385  	  SELECT
15:40:04 386  	    OFFER.ID,
15:40:04 387  	    OFFER.OFFER_STATUS_ID,
15:40:04 388  	    OFFER.ENTITLEMENT_DURATION,
15:40:04 389  	    OFFER.CREATED_BY,
15:40:04 390  	    OFFER.CREATE_DATE,
15:40:04 391  	    OFFER.UPDATED_BY,
15:40:04 392  	    OFFER.UPDATE_DATE,
15:40:04 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
15:40:04 394  	    var_offer_index as "OFFER_INDEX"
15:40:04 395  	  FROM
15:40:04 396  	    OFFER_OFFER_CHAIN
15:40:04 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:40:04 398  	  WHERE ROWNUM = 0;
15:40:04 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
15:40:04 400  	  --out_result_set := NULL;
15:40:04 401  	  -- TODO: Remove this hardcode
15:40:04 402  	  OPEN out_result_set FOR
15:40:04 403  	  SELECT
15:40:04 404  	    OFFER.ID,
15:40:04 405  	    OFFER.OFFER_STATUS_ID,
15:40:04 406  	    OFFER.ENTITLEMENT_DURATION,
15:40:04 407  	    OFFER.CREATED_BY,
15:40:04 408  	    OFFER.CREATE_DATE,
15:40:04 409  	    OFFER.UPDATED_BY,
15:40:04 410  	    OFFER.UPDATE_DATE,
15:40:04 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
15:40:04 412  	    var_offer_index as "OFFER_INDEX"
15:40:04 413  	  FROM
15:40:04 414  	    OFFER_OFFER_CHAIN
15:40:04 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:40:04 416  	  WHERE ROWNUM = 0;
15:40:04 417  	ELSE
15:40:04 418  	  OPEN out_result_set FOR
15:40:04 419  	  SELECT
15:40:04 420  	    OFFER.ID,
15:40:04 421  	    OFFER.OFFER_STATUS_ID,
15:40:04 422  	    OFFER.ENTITLEMENT_DURATION,
15:40:04 423  	    OFFER.CREATED_BY,
15:40:04 424  	    OFFER.CREATE_DATE,
15:40:04 425  	    OFFER.UPDATED_BY,
15:40:04 426  	    OFFER.UPDATE_DATE,
15:40:04 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
15:40:04 428  	    var_offer_index as "OFFER_INDEX"
15:40:04 429  	  FROM
15:40:04 430  	    OFFER
15:40:04 431  	  WHERE
15:40:04 432  	    OFFER.ID = var_offer_id;
15:40:04 433  	END IF;
15:40:04 434  
15:40:04 435  EXCEPTION
15:40:04 436  WHEN BAD_LICENSE_ID THEN
15:40:04 437  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 438  	  SPROC_NAME, 'No such license');
15:40:04 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
15:40:04 440  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
15:40:04 442  WHEN OTHERS THEN
15:40:04 443  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 445  END GET_RECURRING_OFFER;
15:40:04 446  
15:40:04 447  /******************************************************************************/
15:40:04 448  
15:40:04 449  PROCEDURE GET_NEXT_OFFER (
15:40:04 450  /*
15:40:04 451  Throws exceptions:
15:40:04 452  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 453  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 454  */
15:40:04 455  	in_license_id  IN NUMBER,
15:40:04 456  	out_result_set OUT SYS_REFCURSOR
15:40:04 457  ) AS
15:40:04 458  -- VARIABLES
15:40:04 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
15:40:04 460  var_offer_chain_id	NUMBER;
15:40:04 461  var_offer_id		NUMBER;
15:40:04 462  var_license_current_index NUMBER;
15:40:04 463  var_next_offer_index	NUMBER;
15:40:04 464  -- EXCEPTIONS
15:40:04 465  BAD_LICENSE_ID	      EXCEPTION;
15:40:04 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
15:40:04 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:40:04 468  BEGIN
15:40:04 469  
15:40:04 470  	BEGIN
15:40:04 471  	  SELECT
15:40:04 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
15:40:04 473  	    LICENSE.OFFER_ID,
15:40:04 474  	    LICENSE.CURRENT_OFFER_INDEX
15:40:04 475  	    into
15:40:04 476  	    var_offer_chain_id,
15:40:04 477  	    var_offer_id,
15:40:04 478  	    var_license_current_index
15:40:04 479  	  FROM
15:40:04 480  	    LICENSE
15:40:04 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 482  	  WHERE
15:40:04 483  	    LICENSE.ID = in_license_id;
15:40:04 484  	  EXCEPTION
15:40:04 485  	    WHEN NO_DATA_FOUND THEN
15:40:04 486  	      RAISE BAD_LICENSE_ID;
15:40:04 487  	END;
15:40:04 488  
15:40:04 489  	BEGIN
15:40:04 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V23.GET_NEXT_OFFER_INDEX(
15:40:04 491  	    var_offer_chain_id,
15:40:04 492  	    var_license_current_index
15:40:04 493  	  );
15:40:04 494  	  EXCEPTION
15:40:04 495  	    WHEN OTHERS THEN
15:40:04 496  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
15:40:04 498  	END;
15:40:04 499  
15:40:04 500  	IF var_next_offer_index IS NULL THEN
15:40:04 501  	  -- RETURN NULL;
15:40:04 502  	  -- TODO: Remove this hardcode
15:40:04 503  	  OPEN out_result_set FOR
15:40:04 504  	  SELECT
15:40:04 505  	    OFFER.ID,
15:40:04 506  	    OFFER.OFFER_STATUS_ID,
15:40:04 507  	    OFFER.ENTITLEMENT_DURATION,
15:40:04 508  	    OFFER.CREATED_BY,
15:40:04 509  	    OFFER.CREATE_DATE,
15:40:04 510  	    OFFER.UPDATED_BY,
15:40:04 511  	    OFFER.UPDATE_DATE,
15:40:04 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
15:40:04 513  	  FROM
15:40:04 514  	    OFFER_OFFER_CHAIN
15:40:04 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:40:04 516  	  WHERE
15:40:04 517  	    1=2;
15:40:04 518  	ELSE
15:40:04 519  	  OPEN out_result_set FOR
15:40:04 520  	  SELECT
15:40:04 521  	    OFFER.ID,
15:40:04 522  	    OFFER.OFFER_STATUS_ID,
15:40:04 523  	    OFFER.ENTITLEMENT_DURATION,
15:40:04 524  	    OFFER.CREATED_BY,
15:40:04 525  	    OFFER.CREATE_DATE,
15:40:04 526  	    OFFER.UPDATED_BY,
15:40:04 527  	    OFFER.UPDATE_DATE,
15:40:04 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
15:40:04 529  	  FROM
15:40:04 530  	    OFFER_OFFER_CHAIN
15:40:04 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:40:04 532  	  WHERE
15:40:04 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:40:04 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
15:40:04 535  	END IF;
15:40:04 536  
15:40:04 537  EXCEPTION
15:40:04 538  WHEN BAD_LICENSE_ID THEN
15:40:04 539  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 540  	  SPROC_NAME, 'No such license');
15:40:04 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
15:40:04 542  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
15:40:04 544  WHEN OTHERS THEN
15:40:04 545  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 547  END GET_NEXT_OFFER;
15:40:04 548  
15:40:04 549  /******************************************************************************/
15:40:04 550  
15:40:04 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
15:40:04 552  	in_license_id IN NUMBER,
15:40:04 553  	out_group_id  OUT NUMBER
15:40:04 554  ) AS
15:40:04 555  -- VARIABLES
15:40:04 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
15:40:04 557  var_subscription_id NUMBER;
15:40:04 558  var_group_id	  NUMBER;
15:40:04 559  -- EXCEPTIONS
15:40:04 560  BAD_LICENSE_ID	   EXCEPTION;
15:40:04 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
15:40:04 562  BEGIN
15:40:04 563  
15:40:04 564  	-- Get subscription id
15:40:04 565  	BEGIN
15:40:04 566  	  SELECT
15:40:04 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
15:40:04 568  	  FROM
15:40:04 569  	    LICENSE
15:40:04 570  	  WHERE
15:40:04 571  	    LICENSE.ID = in_license_id;
15:40:04 572  	  EXCEPTION
15:40:04 573  	    WHEN NO_DATA_FOUND THEN
15:40:04 574  	      RAISE BAD_LICENSE_ID;
15:40:04 575  	END;
15:40:04 576  
15:40:04 577  	-- Get group id
15:40:04 578  	BEGIN
15:40:04 579  	  SELECT
15:40:04 580  	    ACCOUNT.GROUP_ID into var_group_id
15:40:04 581  	  FROM
15:40:04 582  	    SUBSCRIPTION
15:40:04 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:40:04 584  	  WHERE
15:40:04 585  	    SUBSCRIPTION.ID = var_subscription_id;
15:40:04 586  	  EXCEPTION
15:40:04 587  	    WHEN NO_DATA_FOUND THEN
15:40:04 588  	      RAISE CAN_NOT_GET_GROUP_ID;
15:40:04 589  	END;
15:40:04 590  
15:40:04 591  	out_group_id := var_group_id;
15:40:04 592  
15:40:04 593  EXCEPTION
15:40:04 594  WHEN BAD_LICENSE_ID THEN
15:40:04 595  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 596  	  SPROC_NAME, 'No such license');
15:40:04 597  WHEN CAN_NOT_GET_GROUP_ID THEN
15:40:04 598  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 599  	  SPROC_NAME, 'Could not get group id');
15:40:04 600  WHEN OTHERS THEN
15:40:04 601  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 603  END GET_GROUP_ID_BY_LICENSE_ID;
15:40:04 604  
15:40:04 605  /******************************************************************************/
15:40:04 606  
15:40:04 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
15:40:04 608  	out_result_set OUT SYS_REFCURSOR
15:40:04 609  ) AS
15:40:04 610  BEGIN
15:40:04 611  	OPEN out_result_set FOR
15:40:04 612  SELECT * FROM
15:40:04 613  (
15:40:04 614  	SELECT
15:40:04 615  	  LICENSE.ID,
15:40:04 616  	  LICENSE.INVOICE_ID,
15:40:04 617  	  LICENSE.IS_EXTENSION,
15:40:04 618  	  LICENSE.START_DATE,
15:40:04 619  	  LICENSE.END_DATE,
15:40:04 620  	  LICENSE.ENTITLEMENT_END_DATE,
15:40:04 621  	  LICENSE.CURRENT_OFFER_INDEX,
15:40:04 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
15:40:04 623  	  LICENSE.CREATE_DATE,
15:40:04 624  	  LICENSE.CREATED_BY,
15:40:04 625  	  LICENSE.LICENSE_STATUS_ID,
15:40:04 626  	  LICENSE.OFFER_ID,
15:40:04 627  	  LICENSE.SUBSCRIPTION_ID,
15:40:04 628  	  LICENSE.UPDATE_DATE,
15:40:04 629  	  LICENSE.UPDATED_BY,
15:40:04 630  	  LICENSE.NEEDS_ENTITLEMENTS
15:40:04 631  	FROM
15:40:04 632  	  LICENSE
15:40:04 633  	WHERE
15:40:04 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V23.TRUE
15:40:04 635  	AND ROWNUM <= 5000
15:40:04 636  	ORDER BY dbms_random.value
15:40:04 637  ) WHERE
15:40:04 638  	ROWNUM <= 500;
15:40:04 639  
15:40:04 640  END GET_NEED_ENTITLEMENTS_LICENSES;
15:40:04 641  
15:40:04 642  /******************************************************************************/
15:40:04 643  
15:40:04 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
15:40:04 645  	in_license_id	      IN NUMBER,
15:40:04 646  	in_needs_entitlements IN NUMBER,
15:40:04 647  	in_updated_by	      IN VARCHAR2
15:40:04 648  ) AS
15:40:04 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
15:40:04 650  -- VARIABLES
15:40:04 651  temp_license_id NUMBER;
15:40:04 652  -- EXCEPTIONS
15:40:04 653  BAD_LICENSE_ID	     EXCEPTION;
15:40:04 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
15:40:04 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 656  BEGIN
15:40:04 657  
15:40:04 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V23.TRUE
15:40:04 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:04 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
15:40:04 661  	END IF;
15:40:04 662  
15:40:04 663  	BEGIN
15:40:04 664  	  SELECT
15:40:04 665  	    LICENSE.ID into temp_license_id
15:40:04 666  	  FROM
15:40:04 667  	    LICENSE
15:40:04 668  	  WHERE
15:40:04 669  	    LICENSE.ID = in_license_id;
15:40:04 670  	  EXCEPTION
15:40:04 671  	    WHEN NO_DATA_FOUND THEN
15:40:04 672  	      RAISE BAD_LICENSE_ID;
15:40:04 673  	END;
15:40:04 674  
15:40:04 675  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 676  	  in_license_id 	=> in_license_id,
15:40:04 677  	  in_needs_entitlements => in_needs_entitlements,
15:40:04 678  	  in_updated_by 	=> in_updated_by
15:40:04 679  	);
15:40:04 680  
15:40:04 681  EXCEPTION
15:40:04 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
15:40:04 683  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 684  	  SPROC_NAME, 'Bad entitlements flag value');
15:40:04 685  WHEN BAD_LICENSE_ID THEN
15:40:04 686  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 687  	  SPROC_NAME, 'No such license');
15:40:04 688  WHEN OTHERS THEN
15:40:04 689  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
15:40:04 692  
15:40:04 693  
15:40:04 694  /******************************************************************************/
15:40:04 695  
15:40:04 696  PROCEDURE GET_ENDED_GC_LICENSES (
15:40:04 697  	out_result_set		OUT SYS_REFCURSOR,
15:40:04 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:40:04 699  	in_num_rows		IN NUMBER DEFAULT 10000,
15:40:04 700  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:40:04 701  ) AS
15:40:04 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
15:40:04 703  var_days		NUMBER;
15:40:04 704  var_hours 	NUMBER;
15:40:04 705  var_time_interval INTERVAL DAY (3) TO SECOND;
15:40:04 706  BEGIN
15:40:04 707  	var_hours := mod(in_hours_number,24);
15:40:04 708  	var_days := (in_hours_number - var_hours) / 24;
15:40:04 709  	var_time_interval := var_days||' '||var_hours||':0:0';
15:40:04 710  	OPEN out_result_set FOR
15:40:04 711  SELECT * FROM
15:40:04 712  (
15:40:04 713  	SELECT
15:40:04 714  	  l.ID,
15:40:04 715  	  l.CREATE_DATE,
15:40:04 716  	  l.CREATED_BY,
15:40:04 717  	  l.CURRENT_OFFER_INDEX,
15:40:04 718  	  l.CURRENT_OFFER_RECURR_NUM,
15:40:04 719  	  l.END_DATE,
15:40:04 720  	  l.ENTITLEMENT_END_DATE,
15:40:04 721  	  l.INVOICE_ID,
15:40:04 722  	  l.IS_EXTENSION,
15:40:04 723  	  l.LICENSE_STATUS_ID,
15:40:04 724  	  l.OFFER_ID,
15:40:04 725  	  l.START_DATE,
15:40:04 726  	  l.SUBSCRIPTION_ID,
15:40:04 727  	  l.UPDATE_DATE,
15:40:04 728  	  l.UPDATED_BY
15:40:04 729  	FROM
15:40:04 730  	  GIFT_CERTIFICATE gc
15:40:04 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
15:40:04 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
15:40:04 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
15:40:04 734  	WHERE
15:40:04 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
15:40:04 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
15:40:04 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_CLOSED
15:40:04 739  	  AND NOT EXISTS (
15:40:04 740  	    SELECT NULL
15:40:04 741  	    FROM PROCESS_RETRY_THROTTLE
15:40:04 742  	    WHERE PROCESS_NAME = in_process_name
15:40:04 743  	      AND GENERIC_ID = l.ID
15:40:04 744  	  )
15:40:04 745  	  AND ROWNUM <= in_num_rows*10
15:40:04 746  	  ORDER BY dbms_random.value
15:40:04 747  ) WHERE
15:40:04 748  	  ROWNUM <= in_num_rows
15:40:04 749  	  GROUP BY SUBSCRIPTION_ID;
15:40:04 750  EXCEPTION
15:40:04 751  WHEN OTHERS THEN
15:40:04 752  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 754  END GET_ENDED_GC_LICENSES;
15:40:04 755  
15:40:04 756  PROCEDURE GET_LICENSE_BY_ID (
15:40:04 757  	in_license_id  IN NUMBER,
15:40:04 758  	out_result_set OUT SYS_REFCURSOR
15:40:04 759  ) AS
15:40:04 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
15:40:04 761  -- VARIABLES
15:40:04 762  temp_license_id NUMBER;
15:40:04 763  -- EXCEPTIONS
15:40:04 764  BAD_LICENSE_ID EXCEPTION;
15:40:04 765  BEGIN
15:40:04 766  
15:40:04 767  	BEGIN
15:40:04 768  	  SELECT
15:40:04 769  	    l.id into temp_license_id
15:40:04 770  	  FROM
15:40:04 771  	    license l
15:40:04 772  	  WHERE
15:40:04 773  	    l.id = in_license_id;
15:40:04 774  	  EXCEPTION
15:40:04 775  	    WHEN NO_DATA_FOUND THEN
15:40:04 776  	      RAISE BAD_LICENSE_ID;
15:40:04 777  	END;
15:40:04 778  
15:40:04 779  	OPEN out_result_set FOR
15:40:04 780  	SELECT
15:40:04 781  	  l.id,
15:40:04 782  	  l.license_status_id,
15:40:04 783  	  l.subscription_id,
15:40:04 784  	  l.invoice_id,
15:40:04 785  	  l.offer_id,
15:40:04 786  	  l.start_date,
15:40:04 787  	  l.end_date,
15:40:04 788  	  l.entitlement_end_date,
15:40:04 789  	  l.is_extension,
15:40:04 790  	  l.create_date,
15:40:04 791  	  l.created_by,
15:40:04 792  	  l.update_date,
15:40:04 793  	  l.updated_by,
15:40:04 794  	  l.current_offer_index,
15:40:04 795  	  l.current_offer_recurr_num,
15:40:04 796  	  l.needs_entitlements
15:40:04 797  	FROM
15:40:04 798  	  LICENSE l
15:40:04 799  	WHERE
15:40:04 800  	  l.id = in_license_id;
15:40:04 801  
15:40:04 802  EXCEPTION
15:40:04 803  WHEN BAD_LICENSE_ID THEN
15:40:04 804  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 805  	  SPROC_NAME, 'No such license');
15:40:04 806  WHEN OTHERS THEN
15:40:04 807  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 809  END GET_LICENSE_BY_ID;
15:40:04 810  
15:40:04 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
15:40:04 812  	in_subscription_id IN NUMBER,
15:40:04 813  	in_end_date IN DATE,
15:40:04 814  	in_updated_by IN VARCHAR2
15:40:04 815  ) AS
15:40:04 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
15:40:04 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 818  var_latest_lice NUMBER;
15:40:04 819  BEGIN
15:40:04 820  	SELECT max(id)
15:40:04 821  	INTO  var_latest_lice
15:40:04 822  	FROM LICENSE
15:40:04 823  	WHERE
15:40:04 824  	  subscription_id = in_subscription_id
15:40:04 825  	;
15:40:04 826  
15:40:04 827  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 828  	  in_license_id        => var_latest_lice,
15:40:04 829  	  in_updated_by        => in_updated_by,
15:40:04 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 831  	  in_end_date	       => in_end_date,
15:40:04 832  	  in_entitlement_end_date => in_end_date
15:40:04 833  	);
15:40:04 834  
15:40:04 835  EXCEPTION
15:40:04 836  WHEN NO_DATA_FOUND THEN
15:40:04 837  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
15:40:04 839  WHEN OTHERS THEN
15:40:04 840  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 842  END UP_LATEST_LICE_END_BY_SUBID;
15:40:04 843  
15:40:04 844  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
15:40:04 845  	in_days_before_close	 IN NUMBER,
15:40:04 846  	in_num_licenses_to_fetch IN NUMBER,
15:40:04 847  	out_result_set		 OUT SYS_REFCURSOR
15:40:04 848  ) AS
15:40:04 849  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRACE_LICE_FOR_FINAL_TRANS';
15:40:04 850  BEGIN
15:40:04 851  	OPEN out_result_set FOR
15:40:04 852  	SELECT
15:40:04 853  	    *
15:40:04 854  	FROM
15:40:04 855  	    (
15:40:04 856  		SELECT
15:40:04 857  		    l.id
15:40:04 858  		FROM
15:40:04 859  		    license l
15:40:04 860  		JOIN
15:40:04 861  		    invoice i
15:40:04 862  		ON
15:40:04 863  		    l.invoice_id = i.id
15:40:04 864  		WHERE
15:40:04 865  		    i.invoice_status_id = GLOBAL_STATUSES_V23.INVOICE_OPEN
15:40:04 866  		AND l.license_status_id = GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD
15:40:04 867  		AND SYSDATE + in_days_before_close >= l.grace_end_date
15:40:04 868  		AND NOT EXISTS
15:40:04 869  		    (
15:40:04 870  			SELECT
15:40:04 871  			    1
15:40:04 872  			FROM
15:40:04 873  			    charge c
15:40:04 874  			WHERE
15:40:04 875  			    c.invoice_id = i.id
15:40:04 876  			AND c.charge_status_id = GLOBAL_STATUSES_V23.CHARGE_OPENED)
15:40:04 877  		AND rownum <= in_num_licenses_to_fetch * 10
15:40:04 878  		ORDER BY
15:40:04 879  		    dbms_random.value)
15:40:04 880  	WHERE
15:40:04 881  	    rownum <= in_num_licenses_to_fetch;
15:40:04 882  END GET_GRACE_LICE_FOR_FINAL_TRANS;
15:40:04 883  
15:40:04 884  END PROCS_LICENSE_V23;
15:40:04 885  .
15:40:04 SQL> /

Package body created.

Elapsed: 00:00:00.09
15:40:04 SQL> 
15:40:04 SQL> prompt Compiling body for procs_charge.sql
Compiling body for procs_charge.sql
15:40:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V23" AS
15:40:04   2  
15:40:04   3  PROCEDURE CREATE_CHARGE(
15:40:04   4  /*
15:40:04   5  Throws exceptions:
15:40:04   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04   8  */
15:40:04   9  	in_invoice_id	      IN NUMBER,
15:40:04  10  	in_transaction_id     IN NUMBER,
15:40:04  11  	in_instrument_type_id IN NUMBER,
15:40:04  12  	in_instrument_id      IN NUMBER,
15:40:04  13  	in_charge_amount      IN NUMBER,
15:40:04  14  	in_created_by	      IN VARCHAR2,
15:40:04  15  	in_charge_status_id   IN NUMBER,
15:40:04  16  	out_charge_id	      OUT NUMBER
15:40:04  17  ) AS
15:40:04  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
15:40:04  19  -- VARIABLES
15:40:04  20  temp_invoice_id	  NUMBER;
15:40:04  21  temp_transaction_id NUMBER;
15:40:04  22  var_new_charge_id   NUMBER;
15:40:04  23  -- EXCEPTIONS
15:40:04  24  BAD_INVOICE_ID	     EXCEPTION;
15:40:04  25  BAD_TRANSACTION_ID     EXCEPTION;
15:40:04  26  BAD_PAYPAL_ID	     EXCEPTION;
15:40:04  27  BAD_CREDIT_CARD_ID     EXCEPTION;
15:40:04  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
15:40:04  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
15:40:04  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04  31  BEGIN
15:40:04  32  	-- Check that incoming data is correct
15:40:04  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
15:40:04  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
15:40:04  35  	  RAISE BAD_INSTRUMENT_TYPE;
15:40:04  36  	END IF;
15:40:04  37  
15:40:04  38  	-- Check that status is correct
15:40:04  39  	IF in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_OPENED
15:40:04  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_PROCESSED
15:40:04  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_CANCELED THEN
15:40:04  42  	  RAISE BAD_CHARGE_STATUS_ID;
15:40:04  43  	END IF;
15:40:04  44  
15:40:04  45  	-- Check that invoice exists
15:40:04  46  	BEGIN
15:40:04  47  	  SELECT
15:40:04  48  	    INVOICE.ID into temp_invoice_id
15:40:04  49  	  FROM
15:40:04  50  	    INVOICE
15:40:04  51  	  WHERE
15:40:04  52  	    INVOICE.ID = in_invoice_id;
15:40:04  53  	  EXCEPTION
15:40:04  54  	    WHEN NO_DATA_FOUND THEN
15:40:04  55  	      RAISE BAD_INVOICE_ID;
15:40:04  56  	END;
15:40:04  57  
15:40:04  58  	-- Check that transaction exists
15:40:04  59  	BEGIN
15:40:04  60  	  SELECT
15:40:04  61  	    TRANSACTION.ID into temp_transaction_id
15:40:04  62  	  FROM
15:40:04  63  	    TRANSACTION
15:40:04  64  	  WHERE
15:40:04  65  	    TRANSACTION.ID = in_transaction_id;
15:40:04  66  	  EXCEPTION
15:40:04  67  	    WHEN NO_DATA_FOUND THEN
15:40:04  68  	      RAISE BAD_TRANSACTION_ID;
15:40:04  69  	END;
15:40:04  70  
15:40:04  71  	-- Check that instrument exists
15:40:04  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
15:40:04  73  	  IF PROCS_FIN_INSTRUMENTS_V23.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:04  74  	    RAISE BAD_CREDIT_CARD_ID;
15:40:04  75  	  END IF;
15:40:04  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
15:40:04  77  	  IF PROCS_FIN_INSTRUMENTS_V23.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:04  78  	    RAISE BAD_PAYPAL_ID;
15:40:04  79  	  END IF;
15:40:04  80  	END IF;
15:40:04  81  
15:40:04  82  	-- Create new charge
15:40:04  83  	PROCS_CHARGE_CRU_V23.CREATE_CHARGE(
15:40:04  84  	  out_charge_id 	=> var_new_charge_id,
15:40:04  85  	  in_invoice_id 	=> in_invoice_id,
15:40:04  86  	  in_transaction_id	=> in_transaction_id,
15:40:04  87  	  in_instrument_type_id => in_instrument_type_id,
15:40:04  88  	  in_instrument_id	=> in_instrument_id,
15:40:04  89  	  in_charge_amount	=> in_charge_amount,
15:40:04  90  	  in_charge_status_id	=> in_charge_status_id,
15:40:04  91  	  in_created_by 	=> in_created_by
15:40:04  92  	);
15:40:04  93  
15:40:04  94  	out_charge_id := var_new_charge_id;
15:40:04  95  
15:40:04  96  EXCEPTION
15:40:04  97  WHEN BAD_CHARGE_STATUS_ID THEN
15:40:04  98  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
15:40:04 100  WHEN BAD_INSTRUMENT_TYPE THEN
15:40:04 101  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 102  	  PROCS_NAME, 'Bad instrument type id');
15:40:04 103  WHEN BAD_INVOICE_ID THEN
15:40:04 104  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 105  	  PROCS_NAME, 'No such invoice');
15:40:04 106  WHEN BAD_TRANSACTION_ID THEN
15:40:04 107  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 108  	  PROCS_NAME, 'No such transaction');
15:40:04 109  WHEN BAD_PAYPAL_ID THEN
15:40:04 110  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 111  	  PROCS_NAME, 'No such paypal');
15:40:04 112  WHEN BAD_CREDIT_CARD_ID THEN
15:40:04 113  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 114  	  PROCS_NAME, 'No such credit card');
15:40:04 115  WHEN OTHERS THEN
15:40:04 116  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
15:40:04 118  END CREATE_CHARGE;
15:40:04 119  
15:40:04 120  /********************************************************/
15:40:04 121  -- norlov #38562 :
15:40:04 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
15:40:04 123  /*
15:40:04 124  Throws exceptions:
15:40:04 125  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 126  */
15:40:04 127  	out_result_set	    OUT SYS_REFCURSOR,
15:40:04 128  	in_row_number	    IN NUMBER DEFAULT NULL
15:40:04 129  ) AS
15:40:04 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
15:40:04 131  -- COMSTANTS
15:40:04 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
15:40:04 133  -- VARIABLES
15:40:04 134  var_row_number NUMBER;
15:40:04 135  BEGIN
15:40:04 136  	IF in_row_number IS NULL THEN
15:40:04 137  	  var_row_number := DEFAULT_ROW_NUMBER;
15:40:04 138  	ELSE
15:40:04 139  	  var_row_number := in_row_number;
15:40:04 140  	END IF;
15:40:04 141  
15:40:04 142  	-- Select charges
15:40:04 143  	OPEN out_result_set FOR
15:40:04 144  SELECT * FROM
15:40:04 145  (
15:40:04 146  	SELECT
15:40:04 147  	  CHARGE.ID,
15:40:04 148  	  CHARGE.TRANSACTION_ID,
15:40:04 149  	  CHARGE.INSTRUMENT_ID,
15:40:04 150  	  CHARGE.INSTRUMENT_TYPE_ID,
15:40:04 151  	  CHARGE.CHARGE_AMOUNT,
15:40:04 152  	  CHARGE.CREATE_DATE,
15:40:04 153  	  CHARGE.CREATED_BY,
15:40:04 154  	  CHARGE.INVOICE_ID
15:40:04 155  	FROM
15:40:04 156  	  CHARGE
15:40:04 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:40:04 158  	WHERE
15:40:04 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING
15:40:04 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V23.TRUE
15:40:04 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
15:40:04 162  	  AND NOT EXISTS
15:40:04 163  	  (
15:40:04 164  	    SELECT NULL
15:40:04 165  	    FROM PROCESS_RETRY_THROTTLE
15:40:04 166  	    WHERE PROCESS_NAME = SPROC_NAME
15:40:04 167  	      AND GENERIC_ID = CHARGE.ID
15:40:04 168  	  )
15:40:04 169  	  AND ROWNUM <= var_row_number*10
15:40:04 170  	  ORDER BY dbms_random.value
15:40:04 171  ) WHERE
15:40:04 172  	  ROWNUM <= var_row_number;
15:40:04 173  
15:40:04 174  END GET_PENDING_REFUND_CHARGES;
15:40:04 175  /******************************************************************************/
15:40:04 176  
15:40:04 177  PROCEDURE GET_UNPROCESSED_CHARGES (
15:40:04 178  /*
15:40:04 179  Throws exceptions:
15:40:04 180  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 181  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 182  */
15:40:04 183  	in_invoice_id  IN NUMBER,
15:40:04 184  	out_result_set OUT SYS_REFCURSOR
15:40:04 185  ) AS
15:40:04 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
15:40:04 187  -- VARIABLES
15:40:04 188  temp_invoice_id NUMBER;
15:40:04 189  -- EXCEPTIONS
15:40:04 190  BAD_INVOICE_ID EXCEPTION;
15:40:04 191  BEGIN
15:40:04 192  
15:40:04 193  	-- Check that invoice exists
15:40:04 194  	BEGIN
15:40:04 195  	  SELECT
15:40:04 196  	    INVOICE.ID into temp_invoice_id
15:40:04 197  	  FROM
15:40:04 198  	    INVOICE
15:40:04 199  	  WHERE
15:40:04 200  	    INVOICE.ID = in_invoice_id;
15:40:04 201  	  EXCEPTION
15:40:04 202  	    WHEN NO_DATA_FOUND THEN
15:40:04 203  	      RAISE BAD_INVOICE_ID;
15:40:04 204  	END;
15:40:04 205  
15:40:04 206  	-- Select charges
15:40:04 207  	OPEN out_result_set FOR
15:40:04 208  	SELECT
15:40:04 209  	  CHARGE.ID,
15:40:04 210  	  CHARGE.TRANSACTION_ID,
15:40:04 211  	  CHARGE.INSTRUMENT_ID,
15:40:04 212  	  CHARGE.INSTRUMENT_TYPE_ID,
15:40:04 213  	  CHARGE.CHARGE_AMOUNT,
15:40:04 214  	  CHARGE.CREATE_DATE,
15:40:04 215  	  CHARGE.CREATED_BY,
15:40:04 216  	  CHARGE.INVOICE_ID
15:40:04 217  	FROM
15:40:04 218  	  CHARGE
15:40:04 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:40:04 220  	WHERE
15:40:04 221  	  CHARGE.INVOICE_ID = in_invoice_id
15:40:04 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
15:40:04 223  	  AND
15:40:04 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING;
15:40:04 225  
15:40:04 226  EXCEPTION
15:40:04 227  WHEN BAD_INVOICE_ID THEN
15:40:04 228  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 229  	  SPROC_NAME, 'No such invoice');
15:40:04 230  WHEN OTHERS THEN
15:40:04 231  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 233  END GET_UNPROCESSED_CHARGES;
15:40:04 234  
15:40:04 235  /******************************************************************************/
15:40:04 236  
15:40:04 237  PROCEDURE GET_PROCESSED_CHARGES (
15:40:04 238  /*
15:40:04 239  Throws exceptions:
15:40:04 240  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 241  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 242  */
15:40:04 243  	in_invoice_id  IN NUMBER,
15:40:04 244  	out_result_set OUT SYS_REFCURSOR
15:40:04 245  ) AS
15:40:04 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
15:40:04 247  -- VARIABLES
15:40:04 248  temp_invoice_id NUMBER;
15:40:04 249  -- EXCEPTIONS
15:40:04 250  BAD_INVOICE_ID  EXCEPTION;
15:40:04 251  BEGIN
15:40:04 252  
15:40:04 253  	-- Check that invoice exists
15:40:04 254  	BEGIN
15:40:04 255  	  SELECT
15:40:04 256  	    INVOICE.ID into temp_invoice_id
15:40:04 257  	  FROM
15:40:04 258  	    INVOICE
15:40:04 259  	  WHERE
15:40:04 260  	    INVOICE.ID = in_invoice_id;
15:40:04 261  	  EXCEPTION
15:40:04 262  	    WHEN NO_DATA_FOUND THEN
15:40:04 263  	      RAISE BAD_INVOICE_ID;
15:40:04 264  	END;
15:40:04 265  
15:40:04 266  	-- Select charges
15:40:04 267  	OPEN out_result_set FOR
15:40:04 268  	SELECT /*+ STAR_TRANSFORMATION */
15:40:04 269  	  CHARGE.ID,
15:40:04 270  	  CHARGE.TRANSACTION_ID,
15:40:04 271  	  CHARGE.INSTRUMENT_ID,
15:40:04 272  	  CHARGE.INSTRUMENT_TYPE_ID,
15:40:04 273  	  CHARGE.CHARGE_AMOUNT,
15:40:04 274  	  CHARGE.CREATE_DATE,
15:40:04 275  	  CHARGE.CREATED_BY,
15:40:04 276  	  CHARGE.INVOICE_ID
15:40:04 277  	FROM
15:40:04 278  	  CHARGE
15:40:04 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:40:04 280  	WHERE
15:40:04 281  	  CHARGE.INVOICE_ID = in_invoice_id
15:40:04 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
15:40:04 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_CLOSED;
15:40:04 284  
15:40:04 285  EXCEPTION
15:40:04 286  WHEN BAD_INVOICE_ID THEN
15:40:04 287  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 288  	  SPROC_NAME, 'No such invoice');
15:40:04 289  WHEN OTHERS THEN
15:40:04 290  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 292  END GET_PROCESSED_CHARGES;
15:40:04 293  
15:40:04 294  /******************************************************************************/
15:40:04 295  
15:40:04 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
15:40:04 297  /*
15:40:04 298  Throws exceptions:
15:40:04 299  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 300  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 301  */
15:40:04 302  	in_charge_id	    IN NUMBER,
15:40:04 303  	out_subscription_id OUT NUMBER
15:40:04 304  ) AS
15:40:04 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
15:40:04 306  -- VARIABLES
15:40:04 307  var_invoice_id	  NUMBER;
15:40:04 308  var_subscription_id NUMBER;
15:40:04 309  -- EXCEPTIONS
15:40:04 310  BAD_CHARGE_ID		EXCEPTION;
15:40:04 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
15:40:04 312  BEGIN
15:40:04 313  
15:40:04 314  	BEGIN
15:40:04 315  	  SELECT
15:40:04 316  	    CHARGE.INVOICE_ID into var_invoice_id
15:40:04 317  	  FROM
15:40:04 318  	    CHARGE
15:40:04 319  	  WHERE
15:40:04 320  	    CHARGE.ID = in_charge_id;
15:40:04 321  	  EXCEPTION
15:40:04 322  	    WHEN NO_DATA_FOUND THEN
15:40:04 323  	      RAISE BAD_CHARGE_ID;
15:40:04 324  	END;
15:40:04 325  
15:40:04 326  	BEGIN
15:40:04 327  	  SELECT
15:40:04 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
15:40:04 329  	  FROM
15:40:04 330  	    LICENSE
15:40:04 331  	  WHERE
15:40:04 332  	    LICENSE.INVOICE_ID = var_invoice_id
15:40:04 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
15:40:04 334  	  EXCEPTION
15:40:04 335  	    WHEN NO_DATA_FOUND THEN
15:40:04 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
15:40:04 337  	END;
15:40:04 338  
15:40:04 339  	out_subscription_id := var_subscription_id;
15:40:04 340  
15:40:04 341  EXCEPTION
15:40:04 342  WHEN BAD_CHARGE_ID THEN
15:40:04 343  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 344  	  SPROC_NAME, 'No such charge');
15:40:04 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
15:40:04 346  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 347  	  SPROC_NAME, 'Could not find subscription for given charge');
15:40:04 348  WHEN OTHERS THEN
15:40:04 349  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
15:40:04 352  
15:40:04 353  /******************************************************************************/
15:40:04 354  
15:40:04 355  PROCEDURE UPDATE_CHARGE_STATUS (
15:40:04 356  /*
15:40:04 357  Throws exceptions:
15:40:04 358  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 359  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 360  */
15:40:04 361  	in_charge_id	    IN CHARGE.ID%TYPE,
15:40:04 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:40:04 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
15:40:04 364  ) AS
15:40:04 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
15:40:04 366  -- EXCEPTIONS
15:40:04 367  BAD_CHARGE_ID	     EXCEPTION;
15:40:04 368  BAD_STATUS_ID	     EXCEPTION;
15:40:04 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 370  BEGIN
15:40:04 371  
15:40:04 372  	IF in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_OPENED
15:40:04 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_PROCESSED
15:40:04 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_CANCELED THEN
15:40:04 375  	  RAISE BAD_STATUS_ID;
15:40:04 376  	END IF;
15:40:04 377  
15:40:04 378  	PROCS_CHARGE_CRU_V23.UPDATE_CHARGE(
15:40:04 379  	  in_charge_id	      => in_charge_id,
15:40:04 380  	  in_charge_status_id => in_charge_status_id,
15:40:04 381  	  in_updated_by       => in_updated_by
15:40:04 382  	);
15:40:04 383  
15:40:04 384  	IF SQL%ROWCOUNT = 0 THEN
15:40:04 385  	  RAISE BAD_CHARGE_ID;
15:40:04 386  	END IF;
15:40:04 387  
15:40:04 388  EXCEPTION
15:40:04 389  WHEN BAD_CHARGE_ID THEN
15:40:04 390  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 391  	  SPROC_NAME, 'No such charge');
15:40:04 392  WHEN BAD_STATUS_ID THEN
15:40:04 393  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 394  	  SPROC_NAME, 'Bad status id');
15:40:04 395  WHEN OTHERS THEN
15:40:04 396  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 398  END UPDATE_CHARGE_STATUS;
15:40:04 399  
15:40:04 400  FUNCTION IS_CHARGE_COLLECTED (
15:40:04 401  /*
15:40:04 402  Throws:
15:40:04 403  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 404  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 405  Returns:
15:40:04 406  GLOBAL_CONST.TRUE if transaction collected,
15:40:04 407  GLOBAL_CONST.FALSE else
15:40:04 408  */
15:40:04 409  	in_charge_id IN NUMBER
15:40:04 410  ) RETURN NUMBER AS
15:40:04 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
15:40:04 412  -- VARIABLES
15:40:04 413  var_transaction_id NUMBER;
15:40:04 414  is_transaction_collected NUMBER;
15:40:04 415  -- EXCEPTIONS
15:40:04 416  BAD_CHARGE_ID	       EXCEPTION;
15:40:04 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
15:40:04 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
15:40:04 419  BEGIN
15:40:04 420  
15:40:04 421  	BEGIN
15:40:04 422  	  SELECT
15:40:04 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
15:40:04 424  	  FROM
15:40:04 425  	    CHARGE
15:40:04 426  	  WHERE
15:40:04 427  	    CHARGE.ID = in_charge_id;
15:40:04 428  	  EXCEPTION
15:40:04 429  	    WHEN NO_DATA_FOUND THEN
15:40:04 430  	      RAISE BAD_CHARGE_ID;
15:40:04 431  	END;
15:40:04 432  
15:40:04 433  	BEGIN
15:40:04 434  	  is_transaction_collected := PROCS_TRANSACTION_V23.IS_TRANSACTION_COLLECTED(var_transaction_id);
15:40:04 435  	  EXCEPTION
15:40:04 436  	    WHEN OTHERS THEN
15:40:04 437  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
15:40:04 439  	END;
15:40:04 440  
15:40:04 441  	RETURN is_transaction_collected;
15:40:04 442  
15:40:04 443  EXCEPTION
15:40:04 444  WHEN BAD_CHARGE_ID THEN
15:40:04 445  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 446  	  SPROC_NAME, 'No such charge');
15:40:04 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
15:40:04 448  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
15:40:04 450  WHEN OTHERS THEN
15:40:04 451  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 453  END;
15:40:04 454  
15:40:04 455  PROCEDURE GET_COLLECTED_CHARGES (
15:40:04 456  /*
15:40:04 457  Throws exceptions:
15:40:04 458  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 459  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 460  */
15:40:04 461  	in_invoice_id  IN NUMBER,
15:40:04 462  	out_result_set OUT SYS_REFCURSOR
15:40:04 463  ) AS
15:40:04 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
15:40:04 465  -- VARIABLES
15:40:04 466  temp_invoice_id NUMBER;
15:40:04 467  -- EXCEPTIONS
15:40:04 468  BAD_INVOICE_ID  EXCEPTION;
15:40:04 469  BEGIN
15:40:04 470  
15:40:04 471  	-- Check that invoice exists
15:40:04 472  	BEGIN
15:40:04 473  	  SELECT
15:40:04 474  	    INVOICE.ID into temp_invoice_id
15:40:04 475  	  FROM
15:40:04 476  	    INVOICE
15:40:04 477  	  WHERE
15:40:04 478  	    INVOICE.ID = in_invoice_id;
15:40:04 479  	  EXCEPTION
15:40:04 480  	    WHEN NO_DATA_FOUND THEN
15:40:04 481  	      RAISE BAD_INVOICE_ID;
15:40:04 482  	END;
15:40:04 483  
15:40:04 484  	-- Select charges
15:40:04 485  	OPEN out_result_set FOR
15:40:04 486  	SELECT
15:40:04 487  	  CHARGE.ID,
15:40:04 488  	  CHARGE.TRANSACTION_ID,
15:40:04 489  	  CHARGE.INSTRUMENT_ID,
15:40:04 490  	  CHARGE.INSTRUMENT_TYPE_ID,
15:40:04 491  	  CHARGE.CHARGE_AMOUNT,
15:40:04 492  	  CHARGE.CREATE_DATE,
15:40:04 493  	  CHARGE.CREATED_BY,
15:40:04 494  	  CHARGE.INVOICE_ID
15:40:04 495  	FROM
15:40:04 496  	  CHARGE
15:40:04 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:40:04 498  	WHERE
15:40:04 499  	  CHARGE.INVOICE_ID = in_invoice_id
15:40:04 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V23.CHARGE_PROCESSED FROM DUAL)
15:40:04 501  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 502  
15:40:04 503  EXCEPTION
15:40:04 504  WHEN BAD_INVOICE_ID THEN
15:40:04 505  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 506  	  SPROC_NAME, 'No such invoice');
15:40:04 507  WHEN OTHERS THEN
15:40:04 508  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 510  END GET_COLLECTED_CHARGES;
15:40:04 511  
15:40:04 512  END PROCS_CHARGE_V23;
15:40:04 513  .
15:40:04 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:40:04 SQL> 
15:40:04 SQL> prompt Compiling body for procs_subscription.sql
Compiling body for procs_subscription.sql
15:40:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V23" AS
15:40:04   2  
15:40:04   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
15:40:04   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
15:40:04   5  	in_updater	     IN VARCHAR2,
15:40:04   6  	in_duration_in_hours IN NUMBER
15:40:04   7  ) AS
15:40:04   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
15:40:04   9  var_subs_id	  SUBSCRIPTION.ID%TYPE;
15:40:04  10  var_lic_id	  LICENSE.ID%TYPE;
15:40:04  11  var_grace_start	  DATE;
15:40:04  12  var_grace_end	  DATE;
15:40:04  13  BEGIN
15:40:04  14  	SELECT
15:40:04  15  	  ID,
15:40:04  16  	  SUBSCRIPTION_ID,
15:40:04  17  	  START_DATE,
15:40:04  18  	  START_DATE + (in_duration_in_hours / 24)
15:40:04  19  	INTO var_lic_id, var_subs_id, var_grace_start, var_grace_end
15:40:04  20  	FROM
15:40:04  21  	  LICENSE
15:40:04  22  	WHERE
15:40:04  23  	  INVOICE_ID = in_invoice_id
15:40:04  24  	  AND ROWNUM <= 1;
15:40:04  25  
15:40:04  26  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04  27  	    in_license_id	    => var_lic_id,
15:40:04  28  	    in_updated_by	    => in_updater,
15:40:04  29  	    in_grace_start_date     => var_grace_start,
15:40:04  30  	    in_grace_end_date	    => var_grace_end,
15:40:04  31  	    in_entitlement_end_date => var_grace_end,
15:40:04  32  	    in_license_status_id    => GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD
15:40:04  33  	);
15:40:04  34  
15:40:04  35  	PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
15:40:04  36  	    in_subscription_id	      => var_subs_id,
15:40:04  37  	    in_updated_by	      => in_updater,
15:40:04  38  	    in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD
15:40:04  39  	  );
15:40:04  40  END START_GRACE_BY_INVOICE_ID;
15:40:04  41  
15:40:04  42  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
15:40:04  43  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
15:40:04  44  	in_updater    IN VARCHAR2
15:40:04  45  ) AS
15:40:04  46  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
15:40:04  47  var_subs_id	  SUBSCRIPTION.ID%TYPE;
15:40:04  48  var_lic_id	  LICENSE.ID%TYPE;
15:40:04  49  var_lic_end_date	  DATE;
15:40:04  50  BEGIN
15:40:04  51  	SELECT
15:40:04  52  	  ID,
15:40:04  53  	  SUBSCRIPTION_ID,
15:40:04  54  	  END_DATE
15:40:04  55  	INTO var_lic_id, var_subs_id, var_lic_end_date
15:40:04  56  	FROM
15:40:04  57  	  LICENSE
15:40:04  58  	WHERE
15:40:04  59  	  INVOICE_ID = in_invoice_id
15:40:04  60  	  AND ROWNUM <= 1;
15:40:04  61  
15:40:04  62  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04  63  	    in_license_id	    => var_lic_id,
15:40:04  64  	    in_updated_by	    => in_updater,
15:40:04  65  	    in_grace_end_date	    => SYSDATE,
15:40:04  66  	    in_entitlement_end_date => var_lic_end_date,
15:40:04  67  	    in_license_status_id    => GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04  68  	);
15:40:04  69  
15:40:04  70  	PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
15:40:04  71  	    in_subscription_id	      => var_subs_id,
15:40:04  72  	    in_updated_by	      => in_updater,
15:40:04  73  	    in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04  74  	);
15:40:04  75  END STOP_GRACE_BY_INVOICE_ID;
15:40:04  76  
15:40:04  77  
15:40:04  78  PROCEDURE START_SUBSCRIPTION_CREATION (
15:40:04  79  	in_group_id	      IN NUMBER,
15:40:04  80  	in_created_by	      IN VARCHAR2,
15:40:04  81  	in_offer_chain_id     IN NUMBER,
15:40:04  82  	in_instrument_type_id IN NUMBER,
15:40:04  83  	in_instrument_id      IN NUMBER,
15:40:04  84  	in_agent_id	      IN NUMBER,
15:40:04  85  	in_note 	      IN VARCHAR2,
15:40:04  86  	out_subscription_id   OUT NUMBER,
15:40:04  87  	out_invoice_id	      OUT NUMBER,
15:40:04  88  	out_new_license_id    OUT NUMBER,
15:40:04  89  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.TRUE
15:40:04  90  ) AS
15:40:04  91  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
15:40:04  92  -- VARIABLES
15:40:04  93  var_account_id		 NUMBER;
15:40:04  94  var_account_status	 NUMBER;
15:40:04  95  var_offer_chain_status_id  NUMBER;
15:40:04  96  var_is_gift_certificate	 NUMBER;
15:40:04  97  var_is_for_redemption	 NUMBER;
15:40:04  98  var_same_offer_chains_num  NUMBER;
15:40:04  99  var_max_concurrent_subscrs NUMBER;
15:40:04 100  var_first_offer_id	 NUMBER;
15:40:04 101  var_new_invoice_id	 NUMBER;
15:40:04 102  var_new_subscription_id	 NUMBER;
15:40:04 103  var_date			 DATE := SYSDATE;
15:40:04 104  var_account_tax_exempt_id  VARCHAR2(255);
15:40:04 105  var_concur_subscription_id NUMBER;
15:40:04 106  -- EXCEPTIONS
15:40:04 107  BAD_GROUP_ID		    EXCEPTION;
15:40:04 108  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
15:40:04 109  BAD_OFFER_CHAIN		    EXCEPTION;
15:40:04 110  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
15:40:04 111  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
15:40:04 112  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
15:40:04 113  LIMIT_REACHED		    EXCEPTION;
15:40:04 114  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
15:40:04 115  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
15:40:04 116  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
15:40:04 117  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
15:40:04 118  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
15:40:04 119  CAN_NOT_CREATE_NOTE	    EXCEPTION;
15:40:04 120  
15:40:04 121  EXCEPTION_MESSAGE VARCHAR2(1024);
15:40:04 122  BEGIN
15:40:04 123  
15:40:04 124  	-- Get account id and status
15:40:04 125  	BEGIN
15:40:04 126  	  SELECT
15:40:04 127  	    ACCOUNT.ID,
15:40:04 128  	    ACCOUNT.ACCOUNT_STATUS_ID,
15:40:04 129  	    ACCOUNT.TAX_EXEMPT_ID
15:40:04 130  	    into
15:40:04 131  	    var_account_id,
15:40:04 132  	    var_account_status,
15:40:04 133  	    var_account_tax_exempt_id
15:40:04 134  	  FROM
15:40:04 135  	    ACCOUNT
15:40:04 136  	  WHERE
15:40:04 137  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:04 138  	  EXCEPTION
15:40:04 139  	  WHEN NO_DATA_FOUND THEN
15:40:04 140  	    RAISE BAD_GROUP_ID;
15:40:04 141  	END;
15:40:04 142  
15:40:04 143  	-- Could not create subscription for disabled account
15:40:04 144  	IF var_account_status = GLOBAL_STATUSES_V23.ACCOUNT_DISABLED THEN
15:40:04 145  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
15:40:04 146  	END IF;
15:40:04 147  
15:40:04 148  	-- Get offer chain status
15:40:04 149  	BEGIN
15:40:04 150  	  SELECT
15:40:04 151  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
15:40:04 152  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
15:40:04 153  	    into
15:40:04 154  	    var_offer_chain_status_id,
15:40:04 155  	    var_is_gift_certificate
15:40:04 156  	  FROM
15:40:04 157  	    OFFER_CHAIN
15:40:04 158  	  WHERE
15:40:04 159  	    OFFER_CHAIN.ID = in_offer_chain_id;
15:40:04 160  
15:40:04 161  	  EXCEPTION
15:40:04 162  	    WHEN NO_DATA_FOUND THEN
15:40:04 163  	      RAISE BAD_OFFER_CHAIN;
15:40:04 164  	END;
15:40:04 165  
15:40:04 166  	-- Could not subscribe to inactive/disabled offer chain
15:40:04 167  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE THEN
15:40:04 168  	  RAISE BAD_OFFER_CHAIN_STATUS;
15:40:04 169  	END IF;
15:40:04 170  
15:40:04 171  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
15:40:04 172  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V23.TRUE THEN
15:40:04 173  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
15:40:04 174  	END IF;
15:40:04 175  
15:40:04 176  	-- check if the OC is for Redemption:
15:40:04 177  	SELECT
15:40:04 178  	  COUNT(*) into var_is_for_redemption
15:40:04 179  	FROM
15:40:04 180  	  OFFER_CHAIN_ELIGIBILITY
15:40:04 181  	WHERE
15:40:04 182  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:40:04 183  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V23.GIFT_CERTIFICATE_REQUIRED
15:40:04 184  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V23.ELIGIBILITY_FLAG_SET;
15:40:04 185  
15:40:04 186  	IF var_is_for_redemption > 0 THEN
15:40:04 187  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
15:40:04 188  	END IF;
15:40:04 189  
15:40:04 190  	SELECT
15:40:04 191  	  COUNT(*) into var_same_offer_chains_num
15:40:04 192  	FROM
15:40:04 193  	  SUBSCRIPTION
15:40:04 194  	WHERE
15:40:04 195  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:04 196  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
15:40:04 197  	  AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04 198  	       OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
15:40:04 199  
15:40:04 200  	-- ELIGIBILITY LOGIC CHANGED TO:
15:40:04 201  	-- FOR EACH offer chain eligibility rule in OC:
15:40:04 202  	--   IF offer chain eligibility rule fails:
15:40:04 203  	--     deny purchase;
15:40:04 204  	--   END IF
15:40:04 205  	-- END FOR
15:40:04 206  	-- FOR EACH product eligibility rule in OC:
15:40:04 207  	--   IF product eligibilty rule fails:
15:40:04 208  	--     deny purchase;
15:40:04 209  	--   END IF
15:40:04 210  	-- END FOR
15:40:04 211  	-- allow purchase;
15:40:04 212  
15:40:04 213  	-- if user have any active existing subscriptions to the offer chain
15:40:04 214  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
15:40:04 215  	-- then deny purchase
15:40:04 216  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
15:40:04 217  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V23.INFINITY
15:40:04 218  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
15:40:04 219  	  -- Find first concurrent subscription id:
15:40:04 220  	  SELECT
15:40:04 221  	    ID into var_concur_subscription_id
15:40:04 222  	  FROM (
15:40:04 223  	    SELECT
15:40:04 224  	      ID
15:40:04 225  	    FROM
15:40:04 226  	      SUBSCRIPTION
15:40:04 227  	    WHERE
15:40:04 228  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:04 229  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
15:40:04 230  	      AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04 231  		   OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
15:40:04 232  	    ORDER BY
15:40:04 233  	      ID
15:40:04 234  	  )
15:40:04 235  	  WHERE
15:40:04 236  	    ROWNUM <= 1;
15:40:04 237  	  RAISE LIMIT_REACHED;
15:40:04 238  	END IF;
15:40:04 239  
15:40:04 240  	-- if user does not have any active existing subscriptions to the offer chain
15:40:04 241  	-- and if product from the offer chain is already owned from another offer chain
15:40:04 242  	-- then deny purchase
15:40:04 243  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V23.FALSE) THEN
15:40:04 244  	  FOR f_account_offer_chains IN (
15:40:04 245  	    SELECT DISTINCT
15:40:04 246  	      OFFER_CHAIN_ID
15:40:04 247  	    FROM
15:40:04 248  	      SUBSCRIPTION
15:40:04 249  	    WHERE
15:40:04 250  	      ACCOUNT_ID = var_account_id
15:40:04 251  	      AND (
15:40:04 252  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04 253  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
15:40:04 254  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
15:40:04 255  	  )
15:40:04 256  	  LOOP
15:40:04 257  	    IF PROCS_OFFER_CHAIN_V23.CHECK_FOR_SAME_PRODUCTS(
15:40:04 258  	      in_offer_chain_1	       => in_offer_chain_id,
15:40:04 259  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
15:40:04 260  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V23.TRUE
15:40:04 261  	    ) = GLOBAL_CONSTANTS_V23.TRUE THEN
15:40:04 262  
15:40:04 263  	      -- Find first concurrent subscription id:
15:40:04 264  	      SELECT
15:40:04 265  		ID into var_concur_subscription_id
15:40:04 266  	      FROM (
15:40:04 267  		SELECT
15:40:04 268  		  ID
15:40:04 269  		FROM
15:40:04 270  		  SUBSCRIPTION
15:40:04 271  		WHERE
15:40:04 272  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:04 273  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
15:40:04 274  		  AND (
15:40:04 275  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04 276  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
15:40:04 277  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
15:40:04 278  		ORDER BY
15:40:04 279  		  ID
15:40:04 280  	      )
15:40:04 281  	      WHERE
15:40:04 282  		ROWNUM <= 1;
15:40:04 283  
15:40:04 284  	      RAISE PRODUCT_ALREADY_PURCHASED;
15:40:04 285  	    END IF;
15:40:04 286  	  END LOOP;
15:40:04 287  	END IF;
15:40:04 288  
15:40:04 289  	BEGIN
15:40:04 290  	  PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
15:40:04 291  	  EXCEPTION
15:40:04 292  	    WHEN OTHERS THEN
15:40:04 293  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 294  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
15:40:04 295  	END;
15:40:04 296  
15:40:04 297  	BEGIN
15:40:04 298  	  PROCS_INVOICE_V23.CREATE_INVOICE(
15:40:04 299  	    in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_OPEN,
15:40:04 300  	    in_created_by     => in_created_by,
15:40:04 301  	    in_tax_exempt_id  => var_account_tax_exempt_id,
15:40:04 302  	    out_invoice_id    => var_new_invoice_id
15:40:04 303  	  );
15:40:04 304  	  EXCEPTION
15:40:04 305  	    WHEN OTHERS THEN
15:40:04 306  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 307  	      RAISE CAN_NOT_CREATE_INVOICE;
15:40:04 308  	END;
15:40:04 309  
15:40:04 310  	BEGIN
15:40:04 311  	  PROCS_LINE_ITEMS_V23.ADD_LINE_ITEMS(
15:40:04 312  	    in_invoice_id => var_new_invoice_id,
15:40:04 313  	    in_offer_id   => var_first_offer_id,
15:40:04 314  	    in_created_by => in_created_by
15:40:04 315  	  );
15:40:04 316  	  EXCEPTION
15:40:04 317  	    WHEN OTHERS THEN
15:40:04 318  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 319  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
15:40:04 320  	END;
15:40:04 321  
15:40:04 322  	PROCS_SUBSCRIPTION_CRU_V23.CREATE_SUBSCRIPTION(
15:40:04 323  	  out_subscription_id	    => var_new_subscription_id,
15:40:04 324  	  in_account_id 	    => var_account_id,
15:40:04 325  	  in_purchase_date	    => var_date,
15:40:04 326  	  in_offer_chain_id	    => in_offer_chain_id,
15:40:04 327  	  in_created_by 	    => in_created_by,
15:40:04 328  	  in_instrument_type_id     => in_instrument_type_id,
15:40:04 329  	  in_instrument_id	    => in_instrument_id,
15:40:04 330  	  in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04 331  	);
15:40:04 332  
15:40:04 333  	BEGIN
15:40:04 334  	  PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
15:40:04 335  	    in_subscription_id => var_new_subscription_id,
15:40:04 336  	    in_agent_id        => in_agent_id,
15:40:04 337  	    in_note	       => in_note,
15:40:04 338  	    in_created_by      => in_created_by
15:40:04 339  	  );
15:40:04 340  	  EXCEPTION
15:40:04 341  	   WHEN OTHERS THEN
15:40:04 342  	     EXCEPTION_MESSAGE := SQLERRM;
15:40:04 343  	     RAISE CAN_NOT_CREATE_NOTE;
15:40:04 344  	END;
15:40:04 345  
15:40:04 346  	BEGIN
15:40:04 347  	  PROCS_LICENSE_V23.CREATE_LICENSE(
15:40:04 348  	    in_status_id		=> GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
15:40:04 349  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 350  	    in_start_date		=> var_date,
15:40:04 351  	    in_end_date 		=> NULL, -- Will be calculated automatically
15:40:04 352  	    in_offer_id 		=> var_first_offer_id,
15:40:04 353  	    in_subscription_id		=> var_new_subscription_id,
15:40:04 354  	    in_invoice_id		=> var_new_invoice_id,
15:40:04 355  	    in_created_by		=> in_created_by,
15:40:04 356  	    in_is_extension		=> GLOBAL_CONSTANTS_V23.FALSE,
15:40:04 357  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
15:40:04 358  	    in_current_offer_recurr_num => 1,
15:40:04 359  	    out_license_id		=> out_new_license_id
15:40:04 360  	  );
15:40:04 361  	  EXCEPTION
15:40:04 362  	    WHEN OTHERS THEN
15:40:04 363  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 364  	      RAISE CAN_NOT_CREATE_LICENSE;
15:40:04 365  	END;
15:40:04 366  
15:40:04 367  	out_subscription_id := var_new_subscription_id;
15:40:04 368  	out_invoice_id := var_new_invoice_id;
15:40:04 369  
15:40:04 370  EXCEPTION
15:40:04 371  WHEN BAD_OFFER_CHAIN_STATUS THEN
15:40:04 372  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 373  	  SPROC_NAME, 'Offer chain is not active');
15:40:04 374  WHEN LIMIT_REACHED THEN
15:40:04 375  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.CONFLICT_ERROR,
15:40:04 376  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
15:40:04 377  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
15:40:04 378  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 379  	  SPROC_NAME, 'Can not create subsscription for disabled account');
15:40:04 380  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
15:40:04 381  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 382  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
15:40:04 383  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
15:40:04 384  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 385  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
15:40:04 386  WHEN BAD_OFFER_CHAIN THEN
15:40:04 387  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 388  	  SPROC_NAME, 'No such offer chain');
15:40:04 389  WHEN PRODUCT_ALREADY_PURCHASED THEN
15:40:04 390  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.CONFLICT_ERROR,
15:40:04 391  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
15:40:04 392  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
15:40:04 393  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 394  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
15:40:04 395  WHEN CAN_NOT_CREATE_INVOICE THEN
15:40:04 396  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 397  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
15:40:04 398  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
15:40:04 399  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 400  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
15:40:04 401  WHEN CAN_NOT_CREATE_LICENSE THEN
15:40:04 402  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 403  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
15:40:04 404  WHEN BAD_GROUP_ID THEN
15:40:04 405  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 406  	  SPROC_NAME, 'Bad group id');
15:40:04 407  WHEN CAN_NOT_CREATE_NOTE THEN
15:40:04 408  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 409  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:40:04 410  WHEN OTHERS THEN
15:40:04 411  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 412  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 413  END START_SUBSCRIPTION_CREATION;
15:40:04 414  
15:40:04 415  /******************************************************************************/
15:40:04 416  
15:40:04 417  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
15:40:04 418  	in_subscription_id    IN NUMBER,
15:40:04 419  	in_invoice_id	      IN NUMBER,
15:40:04 420  	in_instrument_type_id IN NUMBER,
15:40:04 421  	in_instrument_id      IN NUMBER,
15:40:04 422  	in_created_by	      IN VARCHAR2
15:40:04 423  ) AS
15:40:04 424  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
15:40:04 425  -- VARIABLES
15:40:04 426  var_invoice_amount     NUMBER(10, 2);
15:40:04 427  var_new_transaction_id NUMBER;
15:40:04 428  var_new_charge_id      NUMBER;
15:40:04 429  -- EXCEPTIONS
15:40:04 430  CAN_NOT_USE_FCINSTR	  EXCEPTION;
15:40:04 431  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
15:40:04 432  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
15:40:04 433  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
15:40:04 434  
15:40:04 435  EXCEPTION_MESSAGE VARCHAR2(1024);
15:40:04 436  BEGIN
15:40:04 437  
15:40:04 438  	-- Calculate invoice amount ( + discounts, taxes)
15:40:04 439  	BEGIN
15:40:04 440  	  PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT(
15:40:04 441  	    in_invoice_id => in_invoice_id,
15:40:04 442  	    out_amount	  => var_invoice_amount
15:40:04 443  	  );
15:40:04 444  	  EXCEPTION
15:40:04 445  	   WHEN OTHERS THEN
15:40:04 446  	     EXCEPTION_MESSAGE := SQLERRM;
15:40:04 447  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:40:04 448  	END;
15:40:04 449  
15:40:04 450  	IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT
15:40:04 451  	  AND var_invoice_amount > 0 THEN
15:40:04 452  	  RAISE CAN_NOT_USE_FCINSTR;
15:40:04 453  	END IF;
15:40:04 454  
15:40:04 455  	IF var_invoice_amount = 0 THEN
15:40:04 456  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
15:40:04 457  	  PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
15:40:04 458  	    in_invoice_id		   => in_invoice_id,
15:40:04 459  	    in_updated_by		   => in_created_by,
15:40:04 460  	    in_invoice_status_id	   => GLOBAL_STATUSES_V23.INVOICE_CLOSED
15:40:04 461  	  );
15:40:04 462  	ELSE
15:40:04 463  	  -- Create transaction and charge
15:40:04 464  	  BEGIN
15:40:04 465  	    PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
15:40:04 466  	      in_transaction_id 	=> NULL,
15:40:04 467  	      in_status_id		=> GLOBAL_STATUSES_V23.TRANSACTION_PENDING,
15:40:04 468  	      in_amount 		=> var_invoice_amount,
15:40:04 469  	      in_created_by		=> in_created_by,
15:40:04 470  	      in_order_id		=> NULL,
15:40:04 471  	      in_transaction_type_code	=> 'START_SUBSCRIPTION',
15:40:04 472  	      out_transaction_id	=> var_new_transaction_id
15:40:04 473  	    );
15:40:04 474  	    EXCEPTION
15:40:04 475  	      WHEN OTHERS THEN
15:40:04 476  		EXCEPTION_MESSAGE := SQLERRM;
15:40:04 477  		RAISE CAN_NOT_CREATE_TRANSACTION;
15:40:04 478  	  END;
15:40:04 479  
15:40:04 480  	  BEGIN
15:40:04 481  	    PROCS_CHARGE_V23.CREATE_CHARGE(
15:40:04 482  	      in_invoice_id	    => in_invoice_id,
15:40:04 483  	      in_transaction_id     => var_new_transaction_id,
15:40:04 484  	      in_instrument_type_id => in_instrument_type_id,
15:40:04 485  	      in_instrument_id	    => in_instrument_id,
15:40:04 486  	      in_charge_amount	    => var_invoice_amount,
15:40:04 487  	      in_created_by	    => in_created_by,
15:40:04 488  	      in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
15:40:04 489  	      out_charge_id	    => var_new_charge_id
15:40:04 490  	    );
15:40:04 491  	    EXCEPTION
15:40:04 492  	      WHEN OTHERS THEN
15:40:04 493  		EXCEPTION_MESSAGE := SQLERRM;
15:40:04 494  		RAISE CAN_NOT_CREATE_CHARGE;
15:40:04 495  	  END;
15:40:04 496  	END IF;
15:40:04 497  
15:40:04 498  EXCEPTION
15:40:04 499  WHEN CAN_NOT_USE_FCINSTR THEN
15:40:04 500  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 501  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
15:40:04 502  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:40:04 503  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 504  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
15:40:04 505  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:40:04 506  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 507  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:40:04 508  WHEN CAN_NOT_CREATE_CHARGE THEN
15:40:04 509  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 510  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:40:04 511  WHEN OTHERS THEN
15:40:04 512  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 513  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 514  END FINALIZE_SUBSCRIPTION_CREATION;
15:40:04 515  
15:40:04 516  /******************************************************************************/
15:40:04 517  
15:40:04 518  PROCEDURE SUSPEND_SUBSCRIPTION(
15:40:04 519  /*
15:40:04 520  Throws exceptions:
15:40:04 521  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 522  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:04 523  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 524  */
15:40:04 525  	  in_subs_id	IN NUMBER,
15:40:04 526  	  in_updated_by IN VARCHAR2
15:40:04 527  ) AS
15:40:04 528  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
15:40:04 529  var_subscription_status_id  NUMBER;
15:40:04 530  var_license_id		  NUMBER;
15:40:04 531  var_offer_id		  NUMBER;
15:40:04 532  var_license_start_date	  DATE;
15:40:04 533  var_license_end_date	  DATE;
15:40:04 534  
15:40:04 535  var_entitlement_dupration   VARCHAR2(30);
15:40:04 536  var_d_entitlement_dupration NUMBER;
15:40:04 537  
15:40:04 538  var_ym_interval INTERVAL YEAR TO MONTH;
15:40:04 539  var_ds_interval INTERVAL DAY(3) TO SECOND;
15:40:04 540  
15:40:04 541  -- EXCEPTIONS
15:40:04 542  BAD_SUBSCRIPTION_ID     EXCEPTION;
15:40:04 543  BAD_SUBSCRIPTION_STATUS EXCEPTION;
15:40:04 544  NO_LICENSE_FOUND	      EXCEPTION;
15:40:04 545  NO_OFFER_FOUND	      EXCEPTION;
15:40:04 546  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:40:04 547  BEGIN
15:40:04 548  	-- TODO: Finish this prcedure (in Phase II)
15:40:04 549  
15:40:04 550  	-- Get subscription by id. FAULT if no such subscription.
15:40:04 551  	-- begin TX
15:40:04 552  	--   Get for update associated license (subscription.license_id). FAULT if not found.
15:40:04 553  	--   Set status to PROCESSED.
15:40:04 554  	--   updated record.
15:40:04 555  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
15:40:04 556  	--   new subscription status is SUSPENDED.
15:40:04 557  	--   suspend_date is now.
15:40:04 558  	--   update subscription record.
15:40:04 559  	-- end TX
15:40:04 560  
15:40:04 561  	BEGIN
15:40:04 562  	  SELECT
15:40:04 563  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
15:40:04 564  	  FROM
15:40:04 565  	    SUBSCRIPTION
15:40:04 566  	  WHERE
15:40:04 567  	    SUBSCRIPTION.ID = in_subs_id;
15:40:04 568  	  EXCEPTION
15:40:04 569  	  WHEN NO_DATA_FOUND THEN
15:40:04 570  	    RAISE BAD_SUBSCRIPTION_ID;
15:40:04 571  	END;
15:40:04 572  
15:40:04 573  	IF var_subscription_status_id != GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE THEN
15:40:04 574  	  RAISE BAD_SUBSCRIPTION_STATUS;
15:40:04 575  	END IF;
15:40:04 576  
15:40:04 577  	BEGIN
15:40:04 578  	  SELECT
15:40:04 579  	    LICENSE.ID,
15:40:04 580  	    LICENSE.OFFER_ID,
15:40:04 581  	    LICENSE.START_DATE
15:40:04 582  	    into
15:40:04 583  	    var_license_id,
15:40:04 584  	    var_offer_id,
15:40:04 585  	    var_license_start_date
15:40:04 586  	  FROM
15:40:04 587  	    LICENSE
15:40:04 588  	  WHERE
15:40:04 589  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
15:40:04 590  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE;
15:40:04 591  	  EXCEPTION
15:40:04 592  	  WHEN NO_DATA_FOUND THEN
15:40:04 593  	    RAISE NO_LICENSE_FOUND;
15:40:04 594  	END;
15:40:04 595  
15:40:04 596  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 597  	  in_license_id        => var_license_id,
15:40:04 598  	  in_updated_by        => in_updated_by,
15:40:04 599  	  in_license_status_id => GLOBAL_STATUSES_V23.LICENSE_CLOSED
15:40:04 600  	);
15:40:04 601  
15:40:04 602  	BEGIN
15:40:04 603  	  SELECT
15:40:04 604  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
15:40:04 605  	  FROM
15:40:04 606  	    OFFER
15:40:04 607  	  WHERE
15:40:04 608  	    OFFER.ID = var_offer_id;
15:40:04 609  	  EXCEPTION
15:40:04 610  	  WHEN NO_DATA_FOUND THEN
15:40:04 611  	    RAISE NO_OFFER_FOUND;
15:40:04 612  	END;
15:40:04 613  
15:40:04 614  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
15:40:04 615  	var_ds_interval := substr(var_entitlement_dupration, 4);
15:40:04 616  
15:40:04 617  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
15:40:04 618  
15:40:04 619  	var_d_entitlement_dupration := var_license_end_date - current_date;
15:40:04 620  
15:40:04 621  	PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
15:40:04 622  	  in_subscription_id	       => in_subs_id,
15:40:04 623  	  in_updated_by 	       => in_updated_by,
15:40:04 624  	  in_suspend_date	       => SYSDATE,
15:40:04 625  	  in_subscription_status_id    => GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED,
15:40:04 626  	  in_days_remainning_ajustment => var_d_entitlement_dupration
15:40:04 627  	);
15:40:04 628  
15:40:04 629  EXCEPTION
15:40:04 630  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 631  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 632  	  SPROC_NAME, 'No such subscription');
15:40:04 633  WHEN BAD_SUBSCRIPTION_STATUS THEN
15:40:04 634  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 635  	  SPROC_NAME, 'Subscription is not active');
15:40:04 636  WHEN NO_LICENSE_FOUND THEN
15:40:04 637  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 638  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
15:40:04 639  WHEN NO_OFFER_FOUND THEN
15:40:04 640  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 641  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
15:40:04 642  WHEN OTHERS THEN
15:40:04 643  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 644  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 645  END SUSPEND_SUBSCRIPTION;
15:40:04 646  
15:40:04 647  /******************************************************************************/
15:40:04 648  
15:40:04 649  PROCEDURE REACTIVATE_SUBSCRIPTION (
15:40:04 650  	in_subscription_id IN  NUMBER,
15:40:04 651  	in_updated_by	   IN  VARCHAR2
15:40:04 652  ) AS
15:40:04 653  BEGIN
15:40:04 654  	-- TODO: finish this function (in Phase II)
15:40:04 655  	NULL;
15:40:04 656  END REACTIVATE_SUBSCRIPTION;
15:40:04 657  
15:40:04 658  /******************************************************************************/
15:40:04 659  
15:40:04 660  PROCEDURE GET_SUBSCRIPTION_INFO (
15:40:04 661  	  in_subscription_id  IN  NUMBER,
15:40:04 662  	  out_result_set      OUT SYS_REFCURSOR
15:40:04 663  ) AS
15:40:04 664  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
15:40:04 665  -- VARIABLES
15:40:04 666  temp_subscription_id NUMBER;
15:40:04 667  -- EXCEPTIONS
15:40:04 668  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 669  BEGIN
15:40:04 670  	-- Find subscription by id
15:40:04 671  	-- Return its details
15:40:04 672  
15:40:04 673  	BEGIN
15:40:04 674  	  SELECT
15:40:04 675  	    SUBSCRIPTION.ID into temp_subscription_id
15:40:04 676  	  FROM
15:40:04 677  	    SUBSCRIPTION
15:40:04 678  	  WHERE
15:40:04 679  	    SUBSCRIPTION.ID = in_subscription_id;
15:40:04 680  	  EXCEPTION
15:40:04 681  	    WHEN NO_DATA_FOUND THEN
15:40:04 682  	      RAISE BAD_SUBSCRIPTION_ID;
15:40:04 683  	END;
15:40:04 684  
15:40:04 685  	OPEN out_result_set FOR
15:40:04 686  	SELECT
15:40:04 687  	  SUBSCRIPTION.ACCOUNT_ID,
15:40:04 688  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
15:40:04 689  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
15:40:04 690  	  SUBSCRIPTION.PURCHASE_DATE,
15:40:04 691  	  SUBSCRIPTION.SUSPEND_DATE,
15:40:04 692  	  SUBSCRIPTION.REACTIVATION_DATE,
15:40:04 693  	  SUBSCRIPTION.CANCELLATION_DATE,
15:40:04 694  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
15:40:04 695  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
15:40:04 696  	  OFFER_CHAIN.NAME,
15:40:04 697  	  OFFER_CHAIN.DESCRIPTION,
15:40:04 698  	  OFFER_CHAIN.PRODUCT_URI,
15:40:04 699  	  SUBSCRIPTION.INSTRUMENT_ID,
15:40:04 700  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
15:40:04 701  	  PROCS_SUBSCRIPTION_V23.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
15:40:04 702  	  PROCS_SUBSCRIPTION_V23.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
15:40:04 703  	  PROCS_SUBSCRIPTION_V23.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
15:40:04 704  	  PROCS_SUBSCRIPTION_V23.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
15:40:04 705  	  (
15:40:04 706  	    SELECT
15:40:04 707  	      ACCOUNT.GROUP_ID
15:40:04 708  	      FROM ACCOUNT
15:40:04 709  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
15:40:04 710  	  ) as "GROUP_ID",
15:40:04 711  	  (
15:40:04 712  	    SELECT
15:40:04 713  	      MAX(ENTITLEMENT_END_DATE)
15:40:04 714  	      FROM LICENSE
15:40:04 715  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 716  	  )
15:40:04 717  	  as "ENT_END_DATE",
15:40:04 718  	  (
15:40:04 719  	    SELECT
15:40:04 720  	      MIN(START_DATE)
15:40:04 721  	      FROM LICENSE
15:40:04 722  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 723  	  )
15:40:04 724  	  as "ENT_START_DATE",
15:40:04 725  	  PROCS_SUBSCRIPTION_V23.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
15:40:04 726  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
15:40:04 727  	  GROUP_ACCOUNT.ID GA_ID,
15:40:04 728  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
15:40:04 729  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
15:40:04 730  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
15:40:04 731  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
15:40:04 732  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
15:40:04 733  	  GROUP_ACCOUNT.PHONE GA_PHONE,
15:40:04 734  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
15:40:04 735  	  GROUP_ACCOUNT.SEATS GA_SEATS,
15:40:04 736  	  PROCS_GROUP_ACCOUNT_V23.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
15:40:04 737  	  GROUP_ACCOUNT.IP GA_IP,
15:40:04 738  	  PROCS_SUBSCRIPTION_V23.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code,
15:40:04 739  	  PROCS_ACCOUNT_V23.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
15:40:04 740  	  PROCS_ACCOUNT_V23.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
15:40:04 741  	FROM
15:40:04 742  	  SUBSCRIPTION
15:40:04 743  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:04 744  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
15:40:04 745  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
15:40:04 746  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
15:40:04 747  	WHERE
15:40:04 748  	  SUBSCRIPTION.ID = in_subscription_id;
15:40:04 749  
15:40:04 750  EXCEPTION
15:40:04 751  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 752  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 753  	  SPROC_NAME, 'No such subscription');
15:40:04 754  WHEN OTHERS THEN
15:40:04 755  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 757  END GET_SUBSCRIPTION_INFO;
15:40:04 758  
15:40:04 759  /******************************************************************************/
15:40:04 760  
15:40:04 761  PROCEDURE GET_SUBSCRIPTION_INVOICES (
15:40:04 762  	in_subscription_id  IN	NUMBER,
15:40:04 763  	out_result_set	    OUT SYS_REFCURSOR
15:40:04 764  ) AS
15:40:04 765  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
15:40:04 766  temp_subscription_id NUMBER;
15:40:04 767  BEGIN
15:40:04 768  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
15:40:04 769  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
15:40:04 770  	--   for each license
15:40:04 771  	--     get associated invoice
15:40:04 772  	--     add to results list
15:40:04 773  	--   end loop
15:40:04 774  	-- end
15:40:04 775  
15:40:04 776  	SELECT
15:40:04 777  	  SUBSCRIPTION.ID into temp_subscription_id
15:40:04 778  	FROM
15:40:04 779  	  SUBSCRIPTION
15:40:04 780  	WHERE
15:40:04 781  	  SUBSCRIPTION.ID = in_subscription_id;
15:40:04 782  
15:40:04 783  	OPEN out_result_set FOR
15:40:04 784  	SELECT
15:40:04 785  	  INVOICE.ID,
15:40:04 786  	  INVOICE.INVOICE_STATUS_ID,
15:40:04 787  	  INVOICE.CREATE_DATE,
15:40:04 788  	  INVOICE.CREATED_BY,
15:40:04 789  	  INVOICE.UPDATE_DATE,
15:40:04 790  	  INVOICE.UPDATED_BY,
15:40:04 791  	  INVOICE.TAX_EXEMPT_ID
15:40:04 792  	FROM
15:40:04 793  	  LICENSE
15:40:04 794  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:40:04 795  	WHERE
15:40:04 796  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
15:40:04 797  
15:40:04 798  EXCEPTION
15:40:04 799  WHEN NO_DATA_FOUND THEN
15:40:04 800  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 801  	  SPROC_NAME, 'Could not find subscription with given ID');
15:40:04 802  WHEN OTHERS THEN
15:40:04 803  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 804  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 805  END GET_SUBSCRIPTION_INVOICES;
15:40:04 806  
15:40:04 807  /******************************************************************************/
15:40:04 808  
15:40:04 809  PROCEDURE GET_SUBSCRIPTION_NOTES (
15:40:04 810  	in_subscription_id  IN	NUMBER,
15:40:04 811  	out_result_set	    OUT SYS_REFCURSOR
15:40:04 812  ) AS
15:40:04 813  -- VARIABLES
15:40:04 814  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
15:40:04 815  temp_subscription_id NUMBER;
15:40:04 816  -- EXCEPTIONS
15:40:04 817  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 818  BEGIN
15:40:04 819  
15:40:04 820  	-- Check that subscription exists
15:40:04 821  	BEGIN
15:40:04 822  	  SELECT
15:40:04 823  	    SUBSCRIPTION.ID into temp_subscription_id
15:40:04 824  	  FROM
15:40:04 825  	    SUBSCRIPTION
15:40:04 826  	  WHERE
15:40:04 827  	    SUBSCRIPTION.ID = in_subscription_id;
15:40:04 828  	  EXCEPTION
15:40:04 829  	    WHEN NO_DATA_FOUND THEN
15:40:04 830  	      RAISE BAD_SUBSCRIPTION_ID;
15:40:04 831  	END;
15:40:04 832  
15:40:04 833  	OPEN out_result_set FOR
15:40:04 834  	SELECT
15:40:04 835  	  SUBSCRIPTION_NOTE.NOTE,
15:40:04 836  	  SUBSCRIPTION_NOTE.CREATED_BY,
15:40:04 837  	  SUBSCRIPTION_NOTE.CREATE_DATE
15:40:04 838  	FROM
15:40:04 839  	  SUBSCRIPTION_NOTE
15:40:04 840  	WHERE
15:40:04 841  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
15:40:04 842  	ORDER BY
15:40:04 843  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
15:40:04 844  
15:40:04 845  EXCEPTION
15:40:04 846  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 847  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 848  	  SPROC_NAME, 'No such subscription');
15:40:04 849  WHEN OTHERS THEN
15:40:04 850  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 851  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 852  END GET_SUBSCRIPTION_NOTES;
15:40:04 853  
15:40:04 854  /******************************************************************************/
15:40:04 855  
15:40:04 856  PROCEDURE ANNOTATE_SUBSCRIPTION (
15:40:04 857  	in_subscription_id IN  NUMBER,
15:40:04 858  	in_agent_id	   IN  NUMBER,
15:40:04 859  	in_note 	   IN  VARCHAR2,
15:40:04 860  	in_created_by	   IN  VARCHAR2
15:40:04 861  ) AS
15:40:04 862  -- VARIABLES
15:40:04 863  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
15:40:04 864  temp_subscription_id     NUMBER;
15:40:04 865  var_subscription_note_id NUMBER;
15:40:04 866  -- EXCEPTIONS
15:40:04 867  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 868  BEGIN
15:40:04 869  
15:40:04 870  	-- Check that subscription exists
15:40:04 871  	BEGIN
15:40:04 872  	  SELECT
15:40:04 873  	    SUBSCRIPTION.ID into temp_subscription_id
15:40:04 874  	  FROM
15:40:04 875  	    SUBSCRIPTION
15:40:04 876  	  WHERE
15:40:04 877  	    SUBSCRIPTION.ID = in_subscription_id;
15:40:04 878  	  EXCEPTION
15:40:04 879  	    WHEN NO_DATA_FOUND THEN
15:40:04 880  	      RAISE BAD_SUBSCRIPTION_ID;
15:40:04 881  	END;
15:40:04 882  
15:40:04 883  	PROCS_SUBSCRIPTION_CRU_V23.CREATE_SUBSCRIPTION_NOTE(
15:40:04 884  	  inout_subscription_note_id => var_subscription_note_id,
15:40:04 885  	  in_agent_id		     => in_agent_id,
15:40:04 886  	  in_subscription_id	     => in_subscription_id,
15:40:04 887  	  in_note		     => in_note,
15:40:04 888  	  in_created_by 	     => in_created_by
15:40:04 889  	);
15:40:04 890  
15:40:04 891  EXCEPTION
15:40:04 892  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 893  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 894  	  SPROC_NAME, 'No such subscription');
15:40:04 895  WHEN OTHERS THEN
15:40:04 896  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 897  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 898  END ANNOTATE_SUBSCRIPTION;
15:40:04 899  
15:40:04 900  /******************************************************************************/
15:40:04 901  
15:40:04 902  PROCEDURE GET_CANCEL_REASONS (
15:40:04 903  	out_result_set	  OUT SYS_REFCURSOR
15:40:04 904  ) AS
15:40:04 905  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCEL_REASONS';
15:40:04 906  BEGIN
15:40:04 907  	OPEN out_result_set FOR
15:40:04 908  	SELECT
15:40:04 909  	  SUBSCRIPTION_CANCEL_REASON.ID,
15:40:04 910  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
15:40:04 911  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION,
15:40:04 912  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID AS STATUS_ID
15:40:04 913  	FROM
15:40:04 914  	  SUBSCRIPTION_CANCEL_REASON;
15:40:04 915  
15:40:04 916  END GET_CANCEL_REASONS;
15:40:04 917  
15:40:04 918  /******************************************************************************/
15:40:04 919  
15:40:04 920  FUNCTION GET_RENEWAL_DATE (
15:40:04 921  	in_subscription_id in NUMBER
15:40:04 922  ) RETURN DATE AS
15:40:04 923  -- VARIABLES
15:40:04 924  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
15:40:04 925  var_subscription_status NUMBER;
15:40:04 926  var_licenses_count      NUMBER;
15:40:04 927  var_license_end_date    DATE;
15:40:04 928  var_last_offer_id       NUMBER;
15:40:04 929  var_offer_chain_id      NUMBER;
15:40:04 930  var_last_license_id     NUMBER;
15:40:04 931  var_current_offer_index NUMBER;
15:40:04 932  var_current_offer_recurr_num NUMBER;
15:40:04 933  var_offer_recurr_num    NUMBER;
15:40:04 934  -- EXCEPTIONS
15:40:04 935  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 936  NO_LICENSES_FOUND EXCEPTION;
15:40:04 937  BEGIN
15:40:04 938  
15:40:04 939  	-- Get subscription id and offer chain id
15:40:04 940  	BEGIN
15:40:04 941  	  SELECT
15:40:04 942  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
15:40:04 943  	    SUBSCRIPTION.OFFER_CHAIN_ID
15:40:04 944  	    into
15:40:04 945  	    var_subscription_status,
15:40:04 946  	    var_offer_chain_id
15:40:04 947  	  FROM
15:40:04 948  	    SUBSCRIPTION
15:40:04 949  	  WHERE
15:40:04 950  	    SUBSCRIPTION.ID = in_subscription_id;
15:40:04 951  	  EXCEPTION
15:40:04 952  	    WHEN NO_DATA_FOUND THEN
15:40:04 953  	      RAISE BAD_SUBSCRIPTION_ID;
15:40:04 954  	END;
15:40:04 955  
15:40:04 956  	IF var_subscription_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE THEN
15:40:04 957  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
15:40:04 958  	  -- AND var_subscription_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED THEN
15:40:04 959  	  RETURN NULL;
15:40:04 960  	END IF;
15:40:04 961  
15:40:04 962  	BEGIN
15:40:04 963  	  SELECT
15:40:04 964  	    LICENSE_ID,
15:40:04 965  	    END_DATE,
15:40:04 966  	    OFFER_ID,
15:40:04 967  	    CURRENT_OFFER_INDEX,
15:40:04 968  	    CURRENT_OFFER_RECURR_NUM
15:40:04 969  	    into
15:40:04 970  	    var_last_license_id,
15:40:04 971  	    var_license_end_date,
15:40:04 972  	    var_last_offer_id,
15:40:04 973  	    var_current_offer_index,
15:40:04 974  	    var_current_offer_recurr_num
15:40:04 975  	  FROM
15:40:04 976  	    (
15:40:04 977  	      SELECT
15:40:04 978  		LICENSE.ID as "LICENSE_ID",
15:40:04 979  		LICENSE.END_DATE,
15:40:04 980  		LICENSE.OFFER_ID,
15:40:04 981  		LICENSE.CURRENT_OFFER_INDEX,
15:40:04 982  		LICENSE.CURRENT_OFFER_RECURR_NUM
15:40:04 983  	      FROM
15:40:04 984  		LICENSE
15:40:04 985  	      WHERE
15:40:04 986  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 987  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:40:04 988  	      ORDER BY END_DATE DESC
15:40:04 989  	    )
15:40:04 990  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
15:40:04 991  	  WHERE
15:40:04 992  	    ROWNUM <= 1;
15:40:04 993  
15:40:04 994  	  EXCEPTION
15:40:04 995  	    WHEN NO_DATA_FOUND THEN
15:40:04 996  	      -- RAISE NO_LICENSES_FOUND;
15:40:04 997  	      RETURN NULL;
15:40:04 998  	END;
15:40:04 999  
15:40:04 1000  	 SELECT
15:40:04 1001  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
15:40:04 1002  	 FROM
15:40:04 1003  	   OFFER_OFFER_CHAIN
15:40:04 1004  	 WHERE
15:40:04 1005  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:40:04 1006  	   AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
15:40:04 1007  
15:40:04 1008  	 IF PROCS_OFFER_CHAIN_V23.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
15:40:04 1009  	   AND var_offer_recurr_num = var_current_offer_recurr_num THEN
15:40:04 1010  	   -- There is no next offer for this subscription
15:40:04 1011  	   RETURN NULL;
15:40:04 1012  	 END IF;
15:40:04 1013  
15:40:04 1014  	 RETURN var_license_end_date;
15:40:04 1015  
15:40:04 1016  EXCEPTION
15:40:04 1017  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 1018  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1019  	   SPROC_NAME, 'No such subscription');
15:40:04 1020  WHEN NO_LICENSES_FOUND THEN
15:40:04 1021  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1022  	   SPROC_NAME, 'No licenses found');
15:40:04 1023  WHEN OTHERS THEN
15:40:04 1024  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1025  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1026  END GET_RENEWAL_DATE;
15:40:04 1027  
15:40:04 1028  /******************************************************************************/
15:40:04 1029  
15:40:04 1030  FUNCTION GET_RECENT_CHARGE (
15:40:04 1031  	 in_subscription_id IN NUMBER
15:40:04 1032  ) RETURN NUMBER AS
15:40:04 1033  -- VARIABLES
15:40:04 1034  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
15:40:04 1035  temp_subscription_id NUMBER;
15:40:04 1036  var_recent_charge    NUMBER(10,2);
15:40:04 1037  
15:40:04 1038  -- EXCEPTIONS
15:40:04 1039  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 1040  BEGIN
15:40:04 1041  
15:40:04 1042  	 BEGIN
15:40:04 1043  	   SELECT
15:40:04 1044  	     SUBSCRIPTION.ID into temp_subscription_id
15:40:04 1045  	   FROM
15:40:04 1046  	     SUBSCRIPTION
15:40:04 1047  	   WHERE
15:40:04 1048  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1049  	   EXCEPTION
15:40:04 1050  	     WHEN NO_DATA_FOUND THEN
15:40:04 1051  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 1052  	 END;
15:40:04 1053  
15:40:04 1054  	 BEGIN
15:40:04 1055  	   SELECT
15:40:04 1056  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
15:40:04 1057  	   FROM
15:40:04 1058  	     LICENSE
15:40:04 1059  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 1060  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:40:04 1061  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
15:40:04 1062  	   WHERE
15:40:04 1063  	     -- TODO: Review
15:40:04 1064  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_PROCESSED
15:40:04 1065  	     -- AND
15:40:04 1066  	     SUBSCRIPTION.ID = in_subscription_id
15:40:04 1067  	     AND CHARGE.CHARGE_AMOUNT >= 0
15:40:04 1068  	     AND ROWNUM <= 1
15:40:04 1069  	   ORDER BY
15:40:04 1070  	     LICENSE.ID ASC, CHARGE.ID DESC;
15:40:04 1071  	   EXCEPTION
15:40:04 1072  	     WHEN NO_DATA_FOUND THEN
15:40:04 1073  	       var_recent_charge := 0;
15:40:04 1074  	 END;
15:40:04 1075  
15:40:04 1076  	 RETURN var_recent_charge;
15:40:04 1077  
15:40:04 1078  EXCEPTION
15:40:04 1079  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 1080  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1081  	   SPROC_NAME, 'No such subscription');
15:40:04 1082  WHEN OTHERS THEN
15:40:04 1083  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1084  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1085  END GET_RECENT_CHARGE;
15:40:04 1086  
15:40:04 1087  /******************************************************************************/
15:40:04 1088  
15:40:04 1089  FUNCTION GET_BILLING_CYCLE (
15:40:04 1090  	 in_subscription_id IN NUMBER
15:40:04 1091  ) RETURN VARCHAR2 AS
15:40:04 1092  -- VARIABLES
15:40:04 1093  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
15:40:04 1094  temp_subscription_id NUMBER;
15:40:04 1095  var_offer_duration   VARCHAR2(30);
15:40:04 1096  
15:40:04 1097  -- EXCEPTIONS
15:40:04 1098  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 1099  BEGIN
15:40:04 1100  
15:40:04 1101  	 BEGIN
15:40:04 1102  	   SELECT
15:40:04 1103  	     SUBSCRIPTION.ID into temp_subscription_id
15:40:04 1104  	   FROM
15:40:04 1105  	     SUBSCRIPTION
15:40:04 1106  	   WHERE
15:40:04 1107  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1108  	   EXCEPTION
15:40:04 1109  	     WHEN NO_DATA_FOUND THEN
15:40:04 1110  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 1111  	 END;
15:40:04 1112  
15:40:04 1113  	 SELECT
15:40:04 1114  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
15:40:04 1115  	 FROM
15:40:04 1116  	   LICENSE
15:40:04 1117  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 1118  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
15:40:04 1119  	 WHERE
15:40:04 1120  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_PROCESSED
15:40:04 1121  	   --AND
15:40:04 1122  	   SUBSCRIPTION.ID = in_subscription_id
15:40:04 1123  	   AND ROWNUM <= 1
15:40:04 1124  	 ORDER BY
15:40:04 1125  	   LICENSE.ID ASC;
15:40:04 1126  
15:40:04 1127  	 RETURN var_offer_duration;
15:40:04 1128  
15:40:04 1129  EXCEPTION
15:40:04 1130  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 1131  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1132  	   SPROC_NAME, 'No such subscription');
15:40:04 1133  WHEN OTHERS THEN
15:40:04 1134  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1135  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1136  END GET_BILLING_CYCLE;
15:40:04 1137  
15:40:04 1138  /******************************************************************************/
15:40:04 1139  
15:40:04 1140  PROCEDURE REFUND_SUBSCRIPTION (
15:40:04 1141  	 in_subscription_id IN NUMBER,
15:40:04 1142  	 in_invoice_id	    IN NUMBER,
15:40:04 1143  	 in_refund_amount   IN NUMBER,
15:40:04 1144  	 in_note	    IN VARCHAR2,
15:40:04 1145  	 in_created_by	    IN VARCHAR2,
15:40:04 1146  	 out_charge_id	    OUT NUMBER
15:40:04 1147  ) AS
15:40:04 1148  -- VARIABLES
15:40:04 1149  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
15:40:04 1150  var_invoice_status_id  NUMBER;
15:40:04 1151  var_account_id	      NUMBER;
15:40:04 1152  var_account_status_id  NUMBER;
15:40:04 1153  var_new_transaction_id NUMBER;
15:40:04 1154  var_instrument_type_id NUMBER;
15:40:04 1155  var_instrument_id      NUMBER;
15:40:04 1156  var_new_charge_id      NUMBER;
15:40:04 1157  var_invoice_amount     NUMBER(10,2);
15:40:04 1158  var_refunds_before     NUMBER(10,2);
15:40:04 1159  var_charges_amount     NUMBER(10,2);
15:40:04 1160  -- EXCEPTIONS
15:40:04 1161  BAD_SUBSCRIPTION_ID	     EXCEPTION;
15:40:04 1162  ACCOUNT_IS_FROZEN	     EXCEPTION;
15:40:04 1163  BAD_INVOICE_ID		     EXCEPTION;
15:40:04 1164  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
15:40:04 1165  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
15:40:04 1166  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
15:40:04 1167  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
15:40:04 1168  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
15:40:04 1169  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
15:40:04 1170  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
15:40:04 1171  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
15:40:04 1172  EXCEPTION_MESSAGE	      VARCHAR2(1024);
15:40:04 1173  BEGIN
15:40:04 1174  
15:40:04 1175  	 BEGIN
15:40:04 1176  	   SELECT
15:40:04 1177  	     SUBSCRIPTION.INSTRUMENT_ID,
15:40:04 1178  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
15:40:04 1179  	     SUBSCRIPTION.ACCOUNT_ID
15:40:04 1180  	     into
15:40:04 1181  	     var_instrument_id,
15:40:04 1182  	     var_instrument_type_id,
15:40:04 1183  	     var_account_id
15:40:04 1184  	   FROM
15:40:04 1185  	     SUBSCRIPTION
15:40:04 1186  	   WHERE
15:40:04 1187  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1188  	   EXCEPTION
15:40:04 1189  	     WHEN NO_DATA_FOUND THEN
15:40:04 1190  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 1191  	 END;
15:40:04 1192  
15:40:04 1193  	 -- Check account status. It should not to be frozen
15:40:04 1194  	 SELECT
15:40:04 1195  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
15:40:04 1196  	 FROM
15:40:04 1197  	   ACCOUNT
15:40:04 1198  	 WHERE
15:40:04 1199  	   ACCOUNT.ID = var_account_id;
15:40:04 1200  
15:40:04 1201  	 IF var_account_status_id = GLOBAL_STATUSES_V23.ACCOUNT_FROZEN THEN
15:40:04 1202  	   RAISE ACCOUNT_IS_FROZEN;
15:40:04 1203  	 END IF;
15:40:04 1204  
15:40:04 1205  	 BEGIN
15:40:04 1206  	   SELECT
15:40:04 1207  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
15:40:04 1208  	   FROM
15:40:04 1209  	     INVOICE
15:40:04 1210  	   WHERE
15:40:04 1211  	     INVOICE.ID = in_invoice_id;
15:40:04 1212  	   EXCEPTION
15:40:04 1213  	     WHEN NO_DATA_FOUND THEN
15:40:04 1214  	       RAISE BAD_INVOICE_ID;
15:40:04 1215  	 END;
15:40:04 1216  
15:40:04 1217  	 IF var_invoice_status_id != GLOBAL_STATUSES_V23.INVOICE_CLOSED THEN
15:40:04 1218  	   RAISE INVOICE_IS_NOT_CLOSED;
15:40:04 1219  	 END IF;
15:40:04 1220  
15:40:04 1221  	 BEGIN
15:40:04 1222  	   PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT (
15:40:04 1223  	     in_invoice_id => in_invoice_id,
15:40:04 1224  	     out_amount    => var_invoice_amount
15:40:04 1225  	   );
15:40:04 1226  	   EXCEPTION
15:40:04 1227  	     WHEN OTHERS THEN
15:40:04 1228  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1229  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:40:04 1230  	 END;
15:40:04 1231  
15:40:04 1232  	 IF ( in_refund_amount > var_invoice_amount ) THEN
15:40:04 1233  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
15:40:04 1234  	 END IF;
15:40:04 1235  
15:40:04 1236  	 SELECT /*+ STAR_TRANSFORMATION */
15:40:04 1237  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
15:40:04 1238  	 FROM
15:40:04 1239  	   CHARGE
15:40:04 1240  	 WHERE
15:40:04 1241  	   CHARGE.INVOICE_ID = in_invoice_id
15:40:04 1242  	   AND (
15:40:04 1243  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
15:40:04 1244  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
15:40:04 1245  	   )
15:40:04 1246  	   AND CHARGE.CHARGE_AMOUNT < 0;
15:40:04 1247  
15:40:04 1248  	 -- Refunds are negative
15:40:04 1249  	 var_refunds_before := -var_refunds_before;
15:40:04 1250  
15:40:04 1251  	 var_charges_amount := 0;
15:40:04 1252  
15:40:04 1253  	 FOR f_processed_charges IN (
15:40:04 1254  	   SELECT
15:40:04 1255  	     CHARGE.CHARGE_AMOUNT
15:40:04 1256  	   FROM
15:40:04 1257  	     CHARGE
15:40:04 1258  	   WHERE
15:40:04 1259  	     CHARGE.INVOICE_ID = in_invoice_id
15:40:04 1260  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V23.CHARGE_PROCESSED FROM DUAL)
15:40:04 1261  	 )
15:40:04 1262  	 LOOP
15:40:04 1263  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
15:40:04 1264  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
15:40:04 1265  	   END IF;
15:40:04 1266  	 END LOOP;
15:40:04 1267  
15:40:04 1268  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
15:40:04 1269  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
15:40:04 1270  	 END IF;
15:40:04 1271  
15:40:04 1272  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
15:40:04 1273  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
15:40:04 1274  	 END IF;
15:40:04 1275  
15:40:04 1276  	 BEGIN
15:40:04 1277  	   PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
15:40:04 1278  	     in_transaction_id	       => NULL,
15:40:04 1279  	     in_status_id	       => GLOBAL_STATUSES_V23.TRANSACTION_PREPARE,
15:40:04 1280  	     in_amount		       => -in_refund_amount,
15:40:04 1281  	     in_created_by	       => in_created_by,
15:40:04 1282  	     in_order_id	       => NULL,
15:40:04 1283  	     in_is_refund	       => GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 1284  	     in_transaction_type_code  => 'REFUND',
15:40:04 1285  	     out_transaction_id        => var_new_transaction_id
15:40:04 1286  	   );
15:40:04 1287  	   EXCEPTION
15:40:04 1288  	     WHEN OTHERS THEN
15:40:04 1289  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1290  	       RAISE CAN_NOT_CREATE_TRANSACTION;
15:40:04 1291  	 END;
15:40:04 1292  
15:40:04 1293  	 BEGIN
15:40:04 1294  	   PROCS_CHARGE_V23.CREATE_CHARGE(
15:40:04 1295  	     in_invoice_id	   => in_invoice_id,
15:40:04 1296  	     in_transaction_id	   => var_new_transaction_id,
15:40:04 1297  	     in_instrument_type_id => var_instrument_type_id,
15:40:04 1298  	     in_instrument_id	   => var_instrument_id,
15:40:04 1299  	     in_charge_amount	   => -in_refund_amount,
15:40:04 1300  	     in_created_by	   => in_created_by,
15:40:04 1301  	     in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
15:40:04 1302  	     out_charge_id	   => var_new_charge_id
15:40:04 1303  	   );
15:40:04 1304  	   EXCEPTION
15:40:04 1305  	     WHEN OTHERS THEN
15:40:04 1306  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1307  	       RAISE CAN_NOT_CREATE_CHARGE;
15:40:04 1308  	 END;
15:40:04 1309  
15:40:04 1310  	 IF in_note IS NOT NULL THEN
15:40:04 1311  	   BEGIN
15:40:04 1312  	     PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
15:40:04 1313  	       in_subscription_id => in_subscription_id,
15:40:04 1314  	       in_agent_id	  => 0, -- AGENT_ID??
15:40:04 1315  	       in_note		  => in_note,
15:40:04 1316  	       in_created_by	  => in_created_by
15:40:04 1317  	     );
15:40:04 1318  	     EXCEPTION
15:40:04 1319  	       WHEN OTHERS THEN
15:40:04 1320  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1321  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
15:40:04 1322  	   END;
15:40:04 1323  	 END IF;
15:40:04 1324  
15:40:04 1325  	 out_charge_id := var_new_charge_id;
15:40:04 1326  
15:40:04 1327  EXCEPTION
15:40:04 1328  WHEN INVOICE_IS_NOT_CLOSED THEN
15:40:04 1329  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 1330  	   SPROC_NAME, 'Invoice is not closed');
15:40:04 1331  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 1332  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1333  	   SPROC_NAME, 'No such subscription');
15:40:04 1334  WHEN ACCOUNT_IS_FROZEN THEN
15:40:04 1335  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 1336  	   SPROC_NAME, 'Could not refund subscription for frozen account');
15:40:04 1337  WHEN BAD_INVOICE_ID THEN
15:40:04 1338  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1339  	   SPROC_NAME, 'No such invoice');
15:40:04 1340  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:40:04 1341  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1342  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
15:40:04 1343  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
15:40:04 1344  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1345  	   SPROC_NAME, 'Refund is greater than amount');
15:40:04 1346  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
15:40:04 1347  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1348  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
15:40:04 1349  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
15:40:04 1350  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1351  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
15:40:04 1352  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:40:04 1353  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1354  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:40:04 1355  WHEN CAN_NOT_CREATE_CHARGE THEN
15:40:04 1356  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1357  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:40:04 1358  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
15:40:04 1359  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1360  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:40:04 1361  WHEN OTHERS THEN
15:40:04 1362  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1363  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1364  END REFUND_SUBSCRIPTION;
15:40:04 1365  
15:40:04 1366  /******************************************************************************/
15:40:04 1367  
15:40:04 1368  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
15:40:04 1369  	 in_subscription_id	 IN NUMBER,
15:40:04 1370  	 in_effective_start_date IN DATE,
15:40:04 1371  	 in_effective_end_date	 IN DATE,
15:40:04 1372  	 in_note		 IN VARCHAR2,
15:40:04 1373  	 in_updated_by		 IN VARCHAR2
15:40:04 1374  ) AS
15:40:04 1375  -- VARIABLES
15:40:04 1376  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
15:40:04 1377  temp_subscription_id	    NUMBER;
15:40:04 1378  var_current_license_id	    NUMBER;
15:40:04 1379  var_current_license_start_date DATE;
15:40:04 1380  var_current_license_end_date DATE;
15:40:04 1381  var_current_offer_id	    NUMBER;
15:40:04 1382  var_current_invoice_id	    NUMBER;
15:40:04 1383  var_current_date 	    DATE;
15:40:04 1384  var_current_offer_index	    NUMBER;
15:40:04 1385  var_current_offer_recurr_num NUMBER;
15:40:04 1386  var_account_tax_exempt_id    VARCHAR2(255);
15:40:04 1387  
15:40:04 1388  var_free_invoice_id NUMBER;
15:40:04 1389  var_free_license_id NUMBER;
15:40:04 1390  var_new_license_id  NUMBER;
15:40:04 1391  var_ext_license_id  NUMBER;
15:40:04 1392  -- EXCEPTIONS
15:40:04 1393  BAD_SUBSCRIPTION_ID	     EXCEPTION;
15:40:04 1394  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
15:40:04 1395  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
15:40:04 1396  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
15:40:04 1397  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
15:40:04 1398  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
15:40:04 1399  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
15:40:04 1400  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
15:40:04 1401  EXT_START_DATE_LATER_THEN_END EXCEPTION;
15:40:04 1402  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
15:40:04 1403  EXCEPTION_MESSAGE	     VARCHAR2(1024);
15:40:04 1404  BEGIN
15:40:04 1405  
15:40:04 1406  	 var_current_date := PROCS_COMMON_V23.NORMALIZE_DATE(SYSDATE);
15:40:04 1407  
15:40:04 1408  	 -- Check that subscription exists
15:40:04 1409  	 BEGIN
15:40:04 1410  	   SELECT
15:40:04 1411  	     SUBSCRIPTION.ID into temp_subscription_id
15:40:04 1412  	   FROM
15:40:04 1413  	     SUBSCRIPTION
15:40:04 1414  	   WHERE
15:40:04 1415  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1416  	   EXCEPTION
15:40:04 1417  	     WHEN NO_DATA_FOUND THEN
15:40:04 1418  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 1419  	 END;
15:40:04 1420  
15:40:04 1421  	 -- Get account tax exempt id
15:40:04 1422  	 SELECT DISTINCT
15:40:04 1423  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
15:40:04 1424  	 FROM
15:40:04 1425  	   ACCOUNT
15:40:04 1426  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:40:04 1427  	 WHERE
15:40:04 1428  	   SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1429  
15:40:04 1430  	 -- Select current data
15:40:04 1431  	 BEGIN
15:40:04 1432  	   SELECT
15:40:04 1433  	     LICENSE.ID,
15:40:04 1434  	     LICENSE.START_DATE,
15:40:04 1435  	     LICENSE.END_DATE,
15:40:04 1436  	     LICENSE.CURRENT_OFFER_INDEX,
15:40:04 1437  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
15:40:04 1438  	     OFFER.ID,
15:40:04 1439  	     INVOICE.ID
15:40:04 1440  	   INTO
15:40:04 1441  	     var_current_license_id,
15:40:04 1442  	     var_current_license_start_date,
15:40:04 1443  	     var_current_license_end_date,
15:40:04 1444  	     var_current_offer_index,
15:40:04 1445  	     var_current_offer_recurr_num,
15:40:04 1446  	     var_current_offer_id,
15:40:04 1447  	     var_current_invoice_id
15:40:04 1448  	   FROM
15:40:04 1449  	     LICENSE
15:40:04 1450  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 1451  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
15:40:04 1452  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:40:04 1453  	   WHERE
15:40:04 1454  	     SUBSCRIPTION.ID = in_subscription_id
15:40:04 1455  	     AND PROCS_COMMON_V23.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
15:40:04 1456  	     AND PROCS_COMMON_V23.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
15:40:04 1457  	     AND ROWNUM <= 1
15:40:04 1458  	   ORDER BY
15:40:04 1459  	     LICENSE.ID DESC;
15:40:04 1460  	   EXCEPTION
15:40:04 1461  	     WHEN NO_DATA_FOUND THEN
15:40:04 1462  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
15:40:04 1463  	 END;
15:40:04 1464  
15:40:04 1465  	 IF var_current_license_end_date < in_effective_start_date THEN
15:40:04 1466  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
15:40:04 1467  	 END IF;
15:40:04 1468  
15:40:04 1469  	 IF var_current_license_start_date > in_effective_start_date THEN
15:40:04 1470  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
15:40:04 1471  	 END IF;
15:40:04 1472  
15:40:04 1473  	 IF in_effective_start_date > in_effective_end_date THEN
15:40:04 1474  	   RAISE EXT_START_DATE_LATER_THEN_END;
15:40:04 1475  	 END IF;
15:40:04 1476  
15:40:04 1477  	 -- Closing curent license
15:40:04 1478  	 BEGIN
15:40:04 1479  	   PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 1480  	     in_license_id	   => var_current_license_id,
15:40:04 1481  	     in_updated_by	   => in_updated_by,
15:40:04 1482  	     in_license_status_id  => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
15:40:04 1483  	     in_end_date	   => in_effective_start_date,
15:40:04 1484  	     in_needs_entitlements => GLOBAL_CONSTANTS_V23.TRUE
15:40:04 1485  	   );
15:40:04 1486  	   EXCEPTION
15:40:04 1487  	     WHEN OTHERS THEN
15:40:04 1488  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1489  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
15:40:04 1490  	 END;
15:40:04 1491  
15:40:04 1492  	 -- Creating new "free" invoice
15:40:04 1493  	 BEGIN
15:40:04 1494  	   PROCS_INVOICE_V23.CREATE_INVOICE(
15:40:04 1495  	     in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_CLOSED,
15:40:04 1496  	     in_created_by     => in_updated_by,
15:40:04 1497  	     in_tax_exempt_id  => var_account_tax_exempt_id,
15:40:04 1498  	     out_invoice_id    => var_free_invoice_id
15:40:04 1499  	   );
15:40:04 1500  	   EXCEPTION
15:40:04 1501  	     WHEN OTHERS THEN
15:40:04 1502  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1503  	       RAISE CAN_NOT_CREATE_INVOICE;
15:40:04 1504  	 END;
15:40:04 1505  
15:40:04 1506  	 -- Creating new "free" license
15:40:04 1507  	 BEGIN
15:40:04 1508  	   PROCS_LICENSE_V23.CREATE_LICENSE (
15:40:04 1509  	     in_status_id		 => GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
15:40:04 1510  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 1511  	     in_start_date		 => in_effective_start_date,
15:40:04 1512  	     in_end_date		 => in_effective_end_date,
15:40:04 1513  	     in_offer_id		 => var_current_offer_id,
15:40:04 1514  	     in_subscription_id 	 => in_subscription_id,
15:40:04 1515  	     in_invoice_id		 => var_free_invoice_id,
15:40:04 1516  	     in_created_by		 => in_updated_by,
15:40:04 1517  	     in_is_extension		 => GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 1518  	     in_current_offer_index	 => var_current_offer_index,
15:40:04 1519  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
15:40:04 1520  	     out_license_id		 => var_free_license_id
15:40:04 1521  	   );
15:40:04 1522  	   EXCEPTION
15:40:04 1523  	     WHEN OTHERS THEN
15:40:04 1524  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1525  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
15:40:04 1526  	 END;
15:40:04 1527  
15:40:04 1528  	 -- Creating new license
15:40:04 1529  	 IF PROCS_COMMON_V23.NORMALIZE_DATE(var_current_license_end_date) >
15:40:04 1530  	    PROCS_COMMON_V23.NORMALIZE_DATE(in_effective_start_date) THEN
15:40:04 1531  	   BEGIN
15:40:04 1532  	     PROCS_LICENSE_V23.CREATE_LICENSE (
15:40:04 1533  	       in_status_id		   => GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
15:40:04 1534  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 1535  	       in_start_date		   => in_effective_end_date,
15:40:04 1536  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
15:40:04 1537  	       in_offer_id		   => var_current_offer_id,
15:40:04 1538  	       in_subscription_id	   => in_subscription_id,
15:40:04 1539  	       in_invoice_id		   => var_current_invoice_id,
15:40:04 1540  	       in_created_by		   => in_updated_by,
15:40:04 1541  	       in_is_extension		   => GLOBAL_CONSTANTS_V23.FALSE,
15:40:04 1542  	       in_current_offer_index	   => var_current_offer_index,
15:40:04 1543  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
15:40:04 1544  	       out_license_id		   => var_ext_license_id
15:40:04 1545  	     );
15:40:04 1546  	     EXCEPTION
15:40:04 1547  	       WHEN OTHERS THEN
15:40:04 1548  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1549  		 RAISE CAN_NOT_CREATE_END_LICENSE;
15:40:04 1550  	   END;
15:40:04 1551  	 END IF;
15:40:04 1552  
15:40:04 1553  	 -- Create new note for subscription
15:40:04 1554  	 BEGIN
15:40:04 1555  	   PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION (
15:40:04 1556  	     in_subscription_id => in_subscription_id,
15:40:04 1557  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
15:40:04 1558  	     in_note		=> in_note,
15:40:04 1559  	     in_created_by	=> in_updated_by
15:40:04 1560  	   );
15:40:04 1561  	   EXCEPTION
15:40:04 1562  	     WHEN OTHERS THEN
15:40:04 1563  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1564  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
15:40:04 1565  	 END;
15:40:04 1566  
15:40:04 1567  EXCEPTION
15:40:04 1568  WHEN EXT_START_DATE_LATER_THEN_END THEN
15:40:04 1569  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1570  	   SPROC_NAME, 'Extension start date is bigger then end date');
15:40:04 1571  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
15:40:04 1572  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1573  	   SPROC_NAME, 'Extension start date is too far');
15:40:04 1574  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
15:40:04 1575  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1576  	   SPROC_NAME, 'Extension start date is too small');
15:40:04 1577  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 1578  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1579  	   SPROC_NAME, 'No such subscription');
15:40:04 1580  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
15:40:04 1581  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1582  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
15:40:04 1583  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
15:40:04 1584  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1585  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
15:40:04 1586  WHEN CAN_NOT_CREATE_INVOICE THEN
15:40:04 1587  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1588  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
15:40:04 1589  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
15:40:04 1590  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1591  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
15:40:04 1592  WHEN CAN_NOT_CREATE_END_LICENSE THEN
15:40:04 1593  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1594  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
15:40:04 1595  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
15:40:04 1596  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1597  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
15:40:04 1598  WHEN OTHERS THEN
15:40:04 1599  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1600  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1601  END ADD_SUBSCRIPTION_EXTENSION;
15:40:04 1602  
15:40:04 1603  /******************************************************************************/
15:40:04 1604  
15:40:04 1605  FUNCTION CALC_SUBSCRIPTION_END_DATE (
15:40:04 1606  	 in_subscription_id IN NUMBER
15:40:04 1607  ) RETURN DATE AS
15:40:04 1608  -- VARIABLES
15:40:04 1609  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
15:40:04 1610  last_license_id		     NUMBER;
15:40:04 1611  last_license_end_date	     DATE;
15:40:04 1612  last_license_offer_id	     NUMBER;
15:40:04 1613  last_license_offer_index      NUMBER;
15:40:04 1614  last_license_offer_recurr_num NUMBER;
15:40:04 1615  var_last_license_id	     NUMBER;
15:40:04 1616  var_offer_chain_id	     NUMBER;
15:40:04 1617  var_current_offer_rec_number  NUMBER;
15:40:04 1618  var_next_offers_set	     SYS_REFCURSOR;
15:40:04 1619  var_next_offer_duration	     VARCHAR2(30);
15:40:04 1620  var_next_offer_recur	     NUMBER;
15:40:04 1621  var_infinity_offers_number    NUMBER;
15:40:04 1622  
15:40:04 1623  var_result_date DATE;
15:40:04 1624  
15:40:04 1625  var_ym_interval	INTERVAL YEAR TO MONTH;
15:40:04 1626  var_ds_interval	INTERVAL DAY(3) TO SECOND;
15:40:04 1627  var_offer_years	NUMBER;
15:40:04 1628  var_offer_months NUMBER;
15:40:04 1629  var_offer_days	NUMBER;
15:40:04 1630  
15:40:04 1631  -- EXCEPTIONS
15:40:04 1632  BAD_SUBSCRIPTION_ID	  EXCEPTION;
15:40:04 1633  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
15:40:04 1634  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
15:40:04 1635  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
15:40:04 1636  EXCEPTION_MESSAGE	  VARCHAR2(1024);
15:40:04 1637  BEGIN
15:40:04 1638  
15:40:04 1639  	 BEGIN
15:40:04 1640  	   SELECT
15:40:04 1641  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
15:40:04 1642  	   FROM
15:40:04 1643  	     SUBSCRIPTION
15:40:04 1644  	   WHERE
15:40:04 1645  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1646  	   EXCEPTION
15:40:04 1647  	     WHEN NO_DATA_FOUND THEN
15:40:04 1648  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 1649  	 END;
15:40:04 1650  
15:40:04 1651  	 BEGIN
15:40:04 1652  	   SELECT
15:40:04 1653  	     ID into var_last_license_id
15:40:04 1654  	   FROM
15:40:04 1655  	     (
15:40:04 1656  	       SELECT
15:40:04 1657  		 LICENSE.ID
15:40:04 1658  	       FROM
15:40:04 1659  		 LICENSE
15:40:04 1660  	       WHERE
15:40:04 1661  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:40:04 1662  	       ORDER BY
15:40:04 1663  		 LICENSE.END_DATE DESC
15:40:04 1664  	     )
15:40:04 1665  	   WHERE
15:40:04 1666  	     ROWNUM <= 1;
15:40:04 1667  	   EXCEPTION
15:40:04 1668  	     WHEN NO_DATA_FOUND THEN
15:40:04 1669  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
15:40:04 1670  	 END;
15:40:04 1671  
15:40:04 1672  	 SELECT
15:40:04 1673  	   COUNT(*) into var_infinity_offers_number
15:40:04 1674  	 FROM
15:40:04 1675  	   OFFER_OFFER_CHAIN
15:40:04 1676  	 WHERE
15:40:04 1677  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:40:04 1678  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V23.OFFER_REC_INFINITY;
15:40:04 1679  
15:40:04 1680  	 IF var_infinity_offers_number > 0 THEN
15:40:04 1681  	   RETURN NULL;
15:40:04 1682  	 END IF;
15:40:04 1683  
15:40:04 1684  	 BEGIN
15:40:04 1685  	   SELECT
15:40:04 1686  	     LICENSE.ID,
15:40:04 1687  	     LICENSE.END_DATE,
15:40:04 1688  	     LICENSE.CURRENT_OFFER_INDEX,
15:40:04 1689  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
15:40:04 1690  	     LICENSE.OFFER_ID
15:40:04 1691  	     into
15:40:04 1692  	     last_license_id,
15:40:04 1693  	     last_license_end_date,
15:40:04 1694  	     last_license_offer_index,
15:40:04 1695  	     last_license_offer_recurr_num,
15:40:04 1696  	     last_license_offer_id
15:40:04 1697  	   FROM
15:40:04 1698  	     LICENSE
15:40:04 1699  	   WHERE
15:40:04 1700  	     LICENSE.ID = var_last_license_id;
15:40:04 1701  	   EXCEPTION
15:40:04 1702  	     WHEN NO_DATA_FOUND THEN
15:40:04 1703  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
15:40:04 1704  	 END;
15:40:04 1705  
15:40:04 1706  	 var_result_date := last_license_end_date;
15:40:04 1707  
15:40:04 1708  	 -- Find current recurrence number
15:40:04 1709  	 SELECT
15:40:04 1710  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
15:40:04 1711  	 FROM
15:40:04 1712  	   OFFER_OFFER_CHAIN
15:40:04 1713  	 WHERE
15:40:04 1714  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
15:40:04 1715  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
15:40:04 1716  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
15:40:04 1717  
15:40:04 1718  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
15:40:04 1719  	   BEGIN
15:40:04 1720  	     PROCS_OFFER_CHAIN_V23.GET_OFFER_LENGTH(
15:40:04 1721  	       last_license_offer_id,
15:40:04 1722  	       var_offer_years,
15:40:04 1723  	       var_offer_months,
15:40:04 1724  	       var_offer_days
15:40:04 1725  	     );
15:40:04 1726  
15:40:04 1727  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
15:40:04 1728  	     var_ds_interval := var_offer_days||' 0:0:0';
15:40:04 1729  
15:40:04 1730  	     var_result_date := var_result_date
15:40:04 1731  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
15:40:04 1732  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
15:40:04 1733  	     EXCEPTION
15:40:04 1734  	       WHEN OTHERS THEN
15:40:04 1735  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1736  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
15:40:04 1737  	   END;
15:40:04 1738  	 END IF;
15:40:04 1739  
15:40:04 1740  	 OPEN var_next_offers_set FOR
15:40:04 1741  	 SELECT
15:40:04 1742  	   OFFER.ENTITLEMENT_DURATION,
15:40:04 1743  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
15:40:04 1744  	 FROM
15:40:04 1745  	   OFFER_OFFER_CHAIN
15:40:04 1746  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
15:40:04 1747  	 WHERE
15:40:04 1748  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
15:40:04 1749  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
15:40:04 1750  
15:40:04 1751  	 LOOP
15:40:04 1752  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
15:40:04 1753  	   EXIT WHEN var_next_offers_set%NOTFOUND;
15:40:04 1754  	   BEGIN
15:40:04 1755  	     PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(
15:40:04 1756  	       var_next_offer_duration,
15:40:04 1757  	       var_offer_years,
15:40:04 1758  	       var_offer_months,
15:40:04 1759  	       var_offer_days
15:40:04 1760  	     );
15:40:04 1761  
15:40:04 1762  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
15:40:04 1763  	     var_ds_interval := var_offer_days||' 0:0:0';
15:40:04 1764  
15:40:04 1765  	     var_result_date := var_result_date
15:40:04 1766  	       + ( var_ym_interval * var_next_offer_recur )
15:40:04 1767  	       + ( var_ds_interval * var_next_offer_recur );
15:40:04 1768  	     EXCEPTION
15:40:04 1769  	       WHEN OTHERS THEN
15:40:04 1770  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1771  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
15:40:04 1772  	   END;
15:40:04 1773  	 END LOOP;
15:40:04 1774  
15:40:04 1775  	 RETURN var_result_date;
15:40:04 1776  
15:40:04 1777  EXCEPTION
15:40:04 1778  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 1779  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1780  	   SPROC_NAME, 'No such subscription');
15:40:04 1781  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
15:40:04 1782  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1783  	   SPROC_NAME, 'Could not find last license for given subscription');
15:40:04 1784  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
15:40:04 1785  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1786  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
15:40:04 1787  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
15:40:04 1788  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1789  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
15:40:04 1790  WHEN OTHERS THEN
15:40:04 1791  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1792  	   SPROC_NAME, 'Unkown error', SQLERRM);
15:40:04 1793  END CALC_SUBSCRIPTION_END_DATE;
15:40:04 1794  
15:40:04 1795  /******************************************************************************/
15:40:04 1796  
15:40:04 1797  PROCEDURE HAS_FUTURE_LICENSE (
15:40:04 1798  	 in_license_id IN  NUMBER,
15:40:04 1799  	 out_result    OUT NUMBER
15:40:04 1800  ) AS
15:40:04 1801  -- VARIABLES
15:40:04 1802  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
15:40:04 1803  var_subscription_id	 NUMBER;
15:40:04 1804  var_future_licenses_count NUMBER;
15:40:04 1805  -- EXCEPTIONS
15:40:04 1806  BAD_LICENSE_ID	    EXCEPTION;
15:40:04 1807  BEGIN
15:40:04 1808  
15:40:04 1809  	 BEGIN
15:40:04 1810  	   SELECT
15:40:04 1811  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
15:40:04 1812  	   FROM
15:40:04 1813  	     LICENSE
15:40:04 1814  	   WHERE
15:40:04 1815  	     LICENSE.ID = in_license_id;
15:40:04 1816  	   EXCEPTION
15:40:04 1817  	     WHEN NO_DATA_FOUND THEN
15:40:04 1818  	       RAISE BAD_LICENSE_ID;
15:40:04 1819  	 END;
15:40:04 1820  
15:40:04 1821  	 SELECT
15:40:04 1822  	   COUNT(*) into var_future_licenses_count
15:40:04 1823  	 FROM
15:40:04 1824  	   LICENSE
15:40:04 1825  	 WHERE
15:40:04 1826  	   LICENSE.ID != in_license_id
15:40:04 1827  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
15:40:04 1828  	   AND LICENSE.END_DATE > sysdate;
15:40:04 1829  
15:40:04 1830  	 IF var_future_licenses_count > 0 THEN
15:40:04 1831  	   out_result := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 1832  	 ELSE
15:40:04 1833  	   out_result := GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 1834  	 END IF;
15:40:04 1835  
15:40:04 1836  EXCEPTION
15:40:04 1837  WHEN BAD_LICENSE_ID THEN
15:40:04 1838  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1839  	   SPROC_NAME, 'No such license');
15:40:04 1840  WHEN OTHERS THEN
15:40:04 1841  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1842  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1843  END HAS_FUTURE_LICENSE;
15:40:04 1844  
15:40:04 1845  /******************************************************************************/
15:40:04 1846  
15:40:04 1847  PROCEDURE CLOSE_SUBSCRIPTION (
15:40:04 1848  	 in_subscription_id IN NUMBER,
15:40:04 1849  	 in_updated_by	    IN VARCHAR2
15:40:04 1850  ) AS
15:40:04 1851  -- VARIABLES
15:40:04 1852  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
15:40:04 1853  temp_subscription_id NUMBER;
15:40:04 1854  var_licenses_count   NUMBER;
15:40:04 1855  -- EXCEPTIONS
15:40:04 1856  BAD_SUBSCRIPTION_ID    EXCEPTION;
15:40:04 1857  ACTIVE_LICENSES_FOUND  EXCEPTION;
15:40:04 1858  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 1859  BEGIN
15:40:04 1860  
15:40:04 1861  	 BEGIN
15:40:04 1862  	   SELECT
15:40:04 1863  	     SUBSCRIPTION.ID into temp_subscription_id
15:40:04 1864  	   FROM
15:40:04 1865  	     SUBSCRIPTION
15:40:04 1866  	   WHERE
15:40:04 1867  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1868  	   EXCEPTION
15:40:04 1869  	     WHEN NO_DATA_FOUND THEN
15:40:04 1870  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 1871  	 END;
15:40:04 1872  
15:40:04 1873  	 SELECT
15:40:04 1874  	   COUNT(*) into var_licenses_count
15:40:04 1875  	 FROM
15:40:04 1876  	   LICENSE
15:40:04 1877  	 WHERE
15:40:04 1878  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:40:04 1879  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE;
15:40:04 1880  
15:40:04 1881  	 IF var_licenses_count > 0 THEN
15:40:04 1882  	   RAISE ACTIVE_LICENSES_FOUND;
15:40:04 1883  	 END IF;
15:40:04 1884  
15:40:04 1885  	 PROCS_SUBSCRIPTION_V23.UPDATE_SUBSCRIPTION_STATUS(
15:40:04 1886  	   in_subscription_id	     => in_subscription_id,
15:40:04 1887  	   in_updated_by	     => in_updated_by,
15:40:04 1888  	   in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_CLOSED
15:40:04 1889  	 );
15:40:04 1890  
15:40:04 1891  EXCEPTION
15:40:04 1892  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 1893  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1894  	   SPROC_NAME, 'No such subscription');
15:40:04 1895  WHEN ACTIVE_LICENSES_FOUND THEN
15:40:04 1896  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 1897  	   SPROC_NAME, 'Active licenses found');
15:40:04 1898  WHEN OTHERS THEN
15:40:04 1899  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1900  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1901  END CLOSE_SUBSCRIPTION;
15:40:04 1902  
15:40:04 1903  /******************************************************************************/
15:40:04 1904  
15:40:04 1905  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
15:40:04 1906  	 in_subscription_id IN NUMBER,
15:40:04 1907  	 out_group_id	    OUT NUMBER
15:40:04 1908  ) AS
15:40:04 1909  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
15:40:04 1910  BEGIN
15:40:04 1911  	 SELECT
15:40:04 1912  	   ACCOUNT.GROUP_ID into out_group_id
15:40:04 1913  	 FROM
15:40:04 1914  	   SUBSCRIPTION
15:40:04 1915  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:40:04 1916  	 WHERE
15:40:04 1917  	   SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1918  EXCEPTION
15:40:04 1919  WHEN NO_DATA_FOUND THEN
15:40:04 1920  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1921  	   SPROC_NAME, 'No such subscription');
15:40:04 1922  WHEN OTHERS THEN
15:40:04 1923  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1924  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1925  END GET_GROUP_ID_BY_SBSCRPTN_ID;
15:40:04 1926  
15:40:04 1927  /******************************************************************************/
15:40:04 1928  
15:40:04 1929  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
15:40:04 1930  	 in_subscription_id IN NUMBER,
15:40:04 1931  	 out_result_set     OUT SYS_REFCURSOR
15:40:04 1932  ) AS
15:40:04 1933  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
15:40:04 1934  -- VARIABLES
15:40:04 1935  var_offer_chain NUMBER;
15:40:04 1936  -- EXCEPTIONS
15:40:04 1937  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 1938  BEGIN
15:40:04 1939  	 BEGIN
15:40:04 1940  	   SELECT
15:40:04 1941  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
15:40:04 1942  	   FROM
15:40:04 1943  	     SUBSCRIPTION
15:40:04 1944  	   WHERE
15:40:04 1945  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 1946  	   EXCEPTION
15:40:04 1947  	     WHEN NO_DATA_FOUND THEN
15:40:04 1948  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 1949  	 END;
15:40:04 1950  
15:40:04 1951  	 OPEN out_result_set FOR
15:40:04 1952  	 SELECT DISTINCT
15:40:04 1953  	   PRODUCT.ID,
15:40:04 1954  	   PRODUCT.NAME
15:40:04 1955  	 FROM
15:40:04 1956  	   PRODUCT
15:40:04 1957  	 WHERE
15:40:04 1958  	   PRODUCT.ID IN (
15:40:04 1959  	     SELECT DISTINCT
15:40:04 1960  	       PRODUCT_OFFERING.PRODUCT_ID
15:40:04 1961  	     FROM
15:40:04 1962  	       PRODUCT_OFFERING
15:40:04 1963  	     WHERE
15:40:04 1964  	       PRODUCT_OFFERING.ID IN (
15:40:04 1965  		 SELECT DISTINCT
15:40:04 1966  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:40:04 1967  		 FROM
15:40:04 1968  		   OFFER_PRODUCT_OFFERING
15:40:04 1969  		 WHERE
15:40:04 1970  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:40:04 1971  		     SELECT DISTINCT
15:40:04 1972  		       OFFER_OFFER_CHAIN.OFFER_ID
15:40:04 1973  		     FROM
15:40:04 1974  		       OFFER_OFFER_CHAIN
15:40:04 1975  		     WHERE
15:40:04 1976  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
15:40:04 1977  		   )
15:40:04 1978  	       )
15:40:04 1979  	   );
15:40:04 1980  
15:40:04 1981  EXCEPTION
15:40:04 1982  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 1983  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1984  	   SPROC_NAME, 'No such subscription');
15:40:04 1985  WHEN OTHERS THEN
15:40:04 1986  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1987  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1988  END GET_SUBSCRIPTION_PRODUCTS;
15:40:04 1989  
15:40:04 1990  /******************************************************************************/
15:40:04 1991  
15:40:04 1992  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
15:40:04 1993  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
15:40:04 1994  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
15:40:04 1995  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
15:40:04 1996  ) AS
15:40:04 1997  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
15:40:04 1998  BEGIN
15:40:04 1999  	 PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
15:40:04 2000  	   in_subscription_id	     => in_subscription_id,
15:40:04 2001  	   in_subscription_status_id => in_subscription_status_id,
15:40:04 2002  	   in_updated_by	     => in_updated_by
15:40:04 2003  	 );
15:40:04 2004  END UPDATE_SUBSCRIPTION_STATUS;
15:40:04 2005  
15:40:04 2006  /******************************************************************************/
15:40:04 2007  
15:40:04 2008  PROCEDURE GET_ACTIVE_INVOICES_IDS (
15:40:04 2009  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
15:40:04 2010  	 in_subscription_id IN NUMBER,
15:40:04 2011  	 out_result_set     OUT SYS_REFCURSOR
15:40:04 2012  ) AS
15:40:04 2013  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
15:40:04 2014  -- VARIABLES
15:40:04 2015  temp_subscription_id SUBSCRIPTION.ID%TYPE;
15:40:04 2016  -- EXCEPTIONS
15:40:04 2017  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 2018  BEGIN
15:40:04 2019  
15:40:04 2020  	 BEGIN
15:40:04 2021  	   SELECT
15:40:04 2022  	     SUBSCRIPTION.ID into temp_subscription_id
15:40:04 2023  	   FROM
15:40:04 2024  	     SUBSCRIPTION
15:40:04 2025  	   WHERE
15:40:04 2026  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 2027  	   EXCEPTION
15:40:04 2028  	     WHEN NO_DATA_FOUND THEN
15:40:04 2029  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 2030  	 END;
15:40:04 2031  
15:40:04 2032  	 OPEN out_result_set FOR
15:40:04 2033  	 SELECT DISTINCT
15:40:04 2034  	   LICENSE.INVOICE_ID as "ID"
15:40:04 2035  	 FROM
15:40:04 2036  	   LICENSE
15:40:04 2037  	 WHERE
15:40:04 2038  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V23.LICENSE_ACTIVE, GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD)
15:40:04 2039  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
15:40:04 2040  
15:40:04 2041  EXCEPTION
15:40:04 2042  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 2043  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2044  	   SPROC_NAME, 'No such subscription');
15:40:04 2045  WHEN OTHERS THEN
15:40:04 2046  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2047  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2048  END GET_ACTIVE_INVOICES_IDS;
15:40:04 2049  
15:40:04 2050  /******************************************************************************/
15:40:04 2051  
15:40:04 2052  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
15:40:04 2053  	 in_invoice_id	      IN NUMBER,
15:40:04 2054  	 in_updated_by	      IN VARCHAR2,
15:40:04 2055  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
15:40:04 2056  ) AS
15:40:04 2057  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
15:40:04 2058  -- VARIABLES
15:40:04 2059  temp_invoice_id	      INVOICE.ID%TYPE;
15:40:04 2060  var_chargeback_amount  NUMBER(10,2);
15:40:04 2061  ver_refund_charge_id   NUMBER;
15:40:04 2062  -- EXCEPTIONS
15:40:04 2063  BAD_INVOICE_ID		    EXCEPTION;
15:40:04 2064  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
15:40:04 2065  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
15:40:04 2066  EXCEPTION_MESSAGE	    VARCHAR2(1024);
15:40:04 2067  -- STUB
15:40:04 2068  var_now DATE;
15:40:04 2069  var_revoke NUMBER;
15:40:04 2070  var_refund NUMBER;
15:40:04 2071  var_billed NUMBER;
15:40:04 2072  var_subscription_in_grace NUMBER;
15:40:04 2073  BEGIN
15:40:04 2074  
15:40:04 2075  	 var_now := sysdate;
15:40:04 2076  
15:40:04 2077  	 -- Check that invoice exists
15:40:04 2078  	 BEGIN
15:40:04 2079  	   SELECT
15:40:04 2080  	     INVOICE.ID into temp_invoice_id
15:40:04 2081  	   FROM
15:40:04 2082  	     INVOICE
15:40:04 2083  	   WHERE
15:40:04 2084  	     INVOICE.ID = in_invoice_id;
15:40:04 2085  	   EXCEPTION
15:40:04 2086  	     WHEN NO_DATA_FOUND THEN
15:40:04 2087  	       RAISE BAD_INVOICE_ID;
15:40:04 2088  	 END;
15:40:04 2089  
15:40:04 2090  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V23.FALSE, GLOBAL_CONSTANTS_V23.TRUE) into var_revoke
15:40:04 2091  	 from license l, subscription s, offer_chain oc
15:40:04 2092  	 where
15:40:04 2093  	   l.subscription_id = s.id and
15:40:04 2094  	   s.offer_chain_id = oc.id and
15:40:04 2095  	   l.invoice_id = in_invoice_id and
15:40:04 2096  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V23.TRUE and
15:40:04 2097  	   rownum < 2;
15:40:04 2098  
15:40:04 2099  	 select
15:40:04 2100  	   decode(s.subscription_status_id, GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD, 1, 0)
15:40:04 2101  	 into
15:40:04 2102  	   var_subscription_in_grace
15:40:04 2103  	 from license l, subscription s
15:40:04 2104  	 where
15:40:04 2105  	   l.subscription_id = s.id and
15:40:04 2106  	   l.invoice_id = in_invoice_id and
15:40:04 2107  	   rownum < 2;
15:40:04 2108  
15:40:04 2109  	 var_billed := PROCS_INVOICE_V23.IS_INVOICE_PAYING_STARTED(in_invoice_id);
15:40:04 2110  	 var_refund := GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 2111  
15:40:04 2112  	 -- Check that transaction for given invoice not started
15:40:04 2113  	 -- if refund enabled calculate and apply chargeback
15:40:04 2114  	 IF (
15:40:04 2115  	     var_billed = GLOBAL_CONSTANTS_V23.TRUE
15:40:04 2116  	   )THEN
15:40:04 2117  	   if (in_refundable = GLOBAL_CONSTANTS_V23.TRUE) then
15:40:04 2118  	     -- If started then we need to calculate refund
15:40:04 2119  	     BEGIN
15:40:04 2120  	       PROCS_INVOICE_V23.CALCULATE_INVOICE_CHARGEBACK(
15:40:04 2121  		 in_invoice_id,
15:40:04 2122  		 var_now,
15:40:04 2123  		 var_chargeback_amount
15:40:04 2124  	       );
15:40:04 2125  	       EXCEPTION
15:40:04 2126  		 WHEN OTHERS THEN
15:40:04 2127  		   EXCEPTION_MESSAGE := SQLERRM;
15:40:04 2128  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
15:40:04 2129  	     END;
15:40:04 2130  	     IF var_chargeback_amount > 0 THEN
15:40:04 2131  	       BEGIN
15:40:04 2132  		 PROCS_INVOICE_V23.APPLY_REFUND(
15:40:04 2133  		   in_invoice_id,
15:40:04 2134  		   var_chargeback_amount,
15:40:04 2135  		   in_updated_by,
15:40:04 2136  		   ver_refund_charge_id
15:40:04 2137  		 );
15:40:04 2138  		 EXCEPTION
15:40:04 2139  		   WHEN OTHERS THEN
15:40:04 2140  		     EXCEPTION_MESSAGE := SQLERRM;
15:40:04 2141  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
15:40:04 2142  	       END;
15:40:04 2143  	       var_refund := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 2144  	     END IF;
15:40:04 2145  	   end if;
15:40:04 2146  	 ELSE
15:40:04 2147  
15:40:04 2148  	   FOR f_transaction_to_close IN (
15:40:04 2149  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
15:40:04 2150  	   )
15:40:04 2151  	   LOOP
15:40:04 2152  	     PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_STATUS(
15:40:04 2153  	       in_transaction_id	=> f_transaction_to_close.ID,
15:40:04 2154  	       in_updated_by		=> in_updated_by,
15:40:04 2155  	       in_transaction_status_id => GLOBAL_STATUSES_V23.TRANSACTION_CLOSED
15:40:04 2156  	     );
15:40:04 2157  	   END LOOP;
15:40:04 2158  	   -- Needs to close charges. No refund.
15:40:04 2159  	   FOR f_charge_to_close IN (
15:40:04 2160  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
15:40:04 2161  	   )
15:40:04 2162  	   LOOP
15:40:04 2163  	     PROCS_CHARGE_V23.UPDATE_CHARGE_STATUS(
15:40:04 2164  	       in_charge_id	   => f_charge_to_close.ID,
15:40:04 2165  	       in_updated_by	   => in_updated_by,
15:40:04 2166  	       in_charge_status_id => GLOBAL_STATUSES_V23.CHARGE_CANCELED
15:40:04 2167  	     );
15:40:04 2168  	   END LOOP;
15:40:04 2169  
15:40:04 2170  	   PROCS_INVOICE_V23.UPDATE_INVOICE_STATUS(
15:40:04 2171  	     in_invoice_id		    => in_invoice_id,
15:40:04 2172  	     in_updated_by		    => in_updated_by,
15:40:04 2173  	     in_invoice_status_id	    => GLOBAL_STATUSES_V23.INVOICE_CLOSED
15:40:04 2174  	   );
15:40:04 2175  
15:40:04 2176  	 END IF;
15:40:04 2177  	 -- update licenses
15:40:04 2178  	 IF(var_revoke = GLOBAL_CONSTANTS_V23.TRUE OR var_chargeback_amount > 0 OR (var_subscription_in_grace = GLOBAL_CONSTANTS_V23.FALSE AND var_billed = GLOBAL_CONSTANTS_V23.FALSE)) THEN
15:40:04 2179  	   FOR f_license_to_cancel IN (
15:40:04 2180  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 2181  	   )
15:40:04 2182  	   LOOP
15:40:04 2183  	     PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 2184  	       in_license_id	     => f_license_to_cancel.ID,
15:40:04 2185  	       in_license_status_id  => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
15:40:04 2186  	       in_needs_entitlements => GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 2187  	       in_updated_by	     => in_updated_by,
15:40:04 2188  	       in_entitlement_end_date => var_now
15:40:04 2189  	     );
15:40:04 2190  	   END LOOP;
15:40:04 2191  	 ELSE
15:40:04 2192  	   FOR f_license_to_cancel IN (
15:40:04 2193  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V23.LICENSE_ACTIVE, GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD)
15:40:04 2194  	   )
15:40:04 2195  	   LOOP
15:40:04 2196  	     PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 2197  	       in_license_id	     => f_license_to_cancel.ID,
15:40:04 2198  	       in_license_status_id  => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
15:40:04 2199  	       in_updated_by	     => in_updated_by
15:40:04 2200  	     );
15:40:04 2201  	   END LOOP;
15:40:04 2202  	 END IF;
15:40:04 2203  
15:40:04 2204  
15:40:04 2205  EXCEPTION
15:40:04 2206  WHEN BAD_INVOICE_ID THEN
15:40:04 2207  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2208  	   SPROC_NAME, 'No such invoice');
15:40:04 2209  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
15:40:04 2210  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 2211  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
15:40:04 2212  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
15:40:04 2213  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 2214  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
15:40:04 2215  WHEN OTHERS THEN
15:40:04 2216  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2217  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2218  END CANCEL_SUBSCRIPTION_INVOICE;
15:40:04 2219  
15:40:04 2220  /******************************************************************************/
15:40:04 2221  
15:40:04 2222  PROCEDURE FINALIZE_CANCELATION (
15:40:04 2223  	 in_subscription_id    IN NUMBER,
15:40:04 2224  	 in_cancelation_reason IN VARCHAR2,
15:40:04 2225  	 in_cancelation_date   IN DATE,
15:40:04 2226  	 in_note	       IN VARCHAR2,
15:40:04 2227  	 in_agent_id	       IN NUMBER,
15:40:04 2228  	 in_updated_by	       IN VARCHAR2
15:40:04 2229  ) AS
15:40:04 2230  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
15:40:04 2231  -- VARIABLES
15:40:04 2232  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
15:40:04 2233  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
15:40:04 2234  var_active_invoices_count NUMBER;
15:40:04 2235  var_license_to_disgrace	 LICENSE.ID%TYPE;
15:40:04 2236  var_now			 DATE := SYSDATE;
15:40:04 2237  -- EXCEPTIONS
15:40:04 2238  BAD_SUBSCRIPTION_ID	   EXCEPTION;
15:40:04 2239  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
15:40:04 2240  BAD_CANCELATION_REASON	   EXCEPTION;
15:40:04 2241  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
15:40:04 2242  ACTIVE_INVOICES_FOUND	   EXCEPTION;
15:40:04 2243  CAN_NOT_CREATE_NOTE	   EXCEPTION;
15:40:04 2244  EXCEPTION_MESSAGE	   VARCHAR2(1024);
15:40:04 2245  BEGIN
15:40:04 2246  
15:40:04 2247  	 -- Get current subscription status
15:40:04 2248  	 BEGIN
15:40:04 2249  	   SELECT
15:40:04 2250  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
15:40:04 2251  	   FROM
15:40:04 2252  	     SUBSCRIPTION
15:40:04 2253  	   WHERE
15:40:04 2254  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 2255  	   EXCEPTION
15:40:04 2256  	     WHEN NO_DATA_FOUND THEN
15:40:04 2257  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 2258  	 END;
15:40:04 2259  
15:40:04 2260  	 -- Check that subscription reason is correct
15:40:04 2261  	 BEGIN
15:40:04 2262  	   SELECT
15:40:04 2263  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
15:40:04 2264  	   FROM
15:40:04 2265  	     SUBSCRIPTION_CANCEL_REASON
15:40:04 2266  	   WHERE
15:40:04 2267  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
15:40:04 2268  	     AND ROWNUM <= 1;
15:40:04 2269  	   EXCEPTION
15:40:04 2270  	     WHEN NO_DATA_FOUND THEN
15:40:04 2271  	       RAISE BAD_CANCELATION_REASON;
15:40:04 2272  	 END;
15:40:04 2273  
15:40:04 2274  	 -- Check for invoices with active licenses
15:40:04 2275  	 SELECT
15:40:04 2276  	   COUNT(*) into var_active_invoices_count
15:40:04 2277  	 FROM
15:40:04 2278  	   LICENSE
15:40:04 2279  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:40:04 2280  	 WHERE
15:40:04 2281  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V23.LICENSE_ACTIVE, GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD)
15:40:04 2282  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
15:40:04 2283  
15:40:04 2284  	 IF var_active_invoices_count > 0 THEN
15:40:04 2285  	   RAISE ACTIVE_INVOICES_FOUND;
15:40:04 2286  	 END IF;
15:40:04 2287  
15:40:04 2288  	 -- Check that subscription is active
15:40:04 2289  	 IF var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE AND
15:40:04 2290  	    var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED AND
15:40:04 2291  	    var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD THEN
15:40:04 2292  	   RAISE BAD_SUBSCRIPTION_STATUS;
15:40:04 2293  	 END IF;
15:40:04 2294  
15:40:04 2295  	 -- Update subscription data
15:40:04 2296  	 BEGIN
15:40:04 2297  	   PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
15:40:04 2298  	     in_subscription_id        => in_subscription_id,
15:40:04 2299  	     in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_CANCELED,
15:40:04 2300  	     in_cancelation_date       => in_cancelation_date,
15:40:04 2301  	     in_updated_by	       => in_updated_by,
15:40:04 2302  	     in_sct_id		       => var_sct_id
15:40:04 2303  	   );
15:40:04 2304  	   EXCEPTION
15:40:04 2305  	     WHEN OTHERS THEN
15:40:04 2306  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 2307  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
15:40:04 2308  	 END;
15:40:04 2309  
15:40:04 2310  	 -- Terminate grace period for licenses in grace [SAR-31]
15:40:04 2311  	 BEGIN
15:40:04 2312  	   SELECT
15:40:04 2313  	     LICENSE.ID into var_license_to_disgrace
15:40:04 2314  	   FROM
15:40:04 2315  	     LICENSE
15:40:04 2316  	   WHERE
15:40:04 2317  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:40:04 2318  	     AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD
15:40:04 2319  	     AND ROWNUM <= 1
15:40:04 2320  	   ORDER BY
15:40:04 2321  	     CREATE_DATE DESC;
15:40:04 2322  	 EXCEPTION
15:40:04 2323  	   WHEN NO_DATA_FOUND THEN
15:40:04 2324  	     var_license_to_disgrace := NULL;
15:40:04 2325  	 END;
15:40:04 2326  
15:40:04 2327  	 IF var_license_to_disgrace IS NOT NULL THEN
15:40:04 2328  	   PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 2329  	     in_license_id	     => var_license_to_disgrace,
15:40:04 2330  	     in_license_status_id    => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
15:40:04 2331  	     in_updated_by	     => in_updated_by
15:40:04 2332  	   );
15:40:04 2333  	 END IF;
15:40:04 2334  
15:40:04 2335  	 -- Annotate subscription
15:40:04 2336  	 IF in_note IS NOT NULL THEN
15:40:04 2337  	   BEGIN
15:40:04 2338  	     PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
15:40:04 2339  	       in_subscription_id,
15:40:04 2340  	       in_agent_id,
15:40:04 2341  	       in_note,
15:40:04 2342  	       in_updated_by
15:40:04 2343  	     );
15:40:04 2344  	     EXCEPTION
15:40:04 2345  	      WHEN OTHERS THEN
15:40:04 2346  		EXCEPTION_MESSAGE := SQLERRM;
15:40:04 2347  		RAISE CAN_NOT_CREATE_NOTE;
15:40:04 2348  	   END;
15:40:04 2349  	 END IF;
15:40:04 2350  
15:40:04 2351  EXCEPTION
15:40:04 2352  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 2353  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2354  	   SPROC_NAME, 'No such subscription');
15:40:04 2355  WHEN BAD_SUBSCRIPTION_STATUS THEN
15:40:04 2356  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 2357  	   SPROC_NAME, 'Bad current subscription status');
15:40:04 2358  WHEN BAD_CANCELATION_REASON THEN
15:40:04 2359  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 2360  	   SPROC_NAME, 'Bad cancellation reason');
15:40:04 2361  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
15:40:04 2362  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 2363  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
15:40:04 2364  WHEN ACTIVE_INVOICES_FOUND THEN
15:40:04 2365  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 2366  	   SPROC_NAME, 'Invoices with active licenses found');
15:40:04 2367  WHEN CAN_NOT_CREATE_NOTE THEN
15:40:04 2368  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 2369  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:40:04 2370  --WHEN OTHERS THEN
15:40:04 2371  --  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2372  --    SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2373  END FINALIZE_CANCELATION;
15:40:04 2374  
15:40:04 2375  /******************************************************************************/
15:40:04 2376  
15:40:04 2377  PROCEDURE FINALIZE_FALSE_START (
15:40:04 2378  	 in_subscription_id    IN NUMBER,
15:40:04 2379  	 in_cancelation_date   IN DATE,
15:40:04 2380  	 in_note	       IN VARCHAR2,
15:40:04 2381  	 in_agent_id	       IN NUMBER,
15:40:04 2382  	 in_updated_by	       IN VARCHAR2
15:40:04 2383  ) AS
15:40:04 2384  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
15:40:04 2385  FALSE_START_REASON CONSTANT NUMBER := 41;
15:40:04 2386  -- VARIABLES
15:40:04 2387  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
15:40:04 2388  var_active_invoices_count NUMBER;
15:40:04 2389  -- EXCEPTIONS
15:40:04 2390  BAD_SUBSCRIPTION_ID	   EXCEPTION;
15:40:04 2391  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
15:40:04 2392  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
15:40:04 2393  ACTIVE_INVOICES_FOUND	   EXCEPTION;
15:40:04 2394  CAN_NOT_CREATE_NOTE	   EXCEPTION;
15:40:04 2395  EXCEPTION_MESSAGE	   VARCHAR2(1024);
15:40:04 2396  BEGIN
15:40:04 2397  
15:40:04 2398  	 -- Get current subscription status
15:40:04 2399  	 BEGIN
15:40:04 2400  	   SELECT
15:40:04 2401  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
15:40:04 2402  	   FROM
15:40:04 2403  	     SUBSCRIPTION
15:40:04 2404  	   WHERE
15:40:04 2405  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 2406  	   EXCEPTION
15:40:04 2407  	     WHEN NO_DATA_FOUND THEN
15:40:04 2408  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 2409  	 END;
15:40:04 2410  
15:40:04 2411  	 -- Check for invoices with active licenses
15:40:04 2412  	 SELECT
15:40:04 2413  	   COUNT(*) into var_active_invoices_count
15:40:04 2414  	 FROM
15:40:04 2415  	   LICENSE
15:40:04 2416  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:40:04 2417  	 WHERE
15:40:04 2418  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 2419  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
15:40:04 2420  
15:40:04 2421  	 IF var_active_invoices_count > 0 THEN
15:40:04 2422  	   RAISE ACTIVE_INVOICES_FOUND;
15:40:04 2423  	 END IF;
15:40:04 2424  
15:40:04 2425  	 -- Check that subscription is active
15:40:04 2426  	 IF var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04 2427  	    AND var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED THEN
15:40:04 2428  	   RAISE BAD_SUBSCRIPTION_STATUS;
15:40:04 2429  	 END IF;
15:40:04 2430  
15:40:04 2431  	 -- Update subscription data
15:40:04 2432  	 BEGIN
15:40:04 2433  	   PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
15:40:04 2434  	     in_subscription_id        => in_subscription_id,
15:40:04 2435  	     in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_FALSE_START,
15:40:04 2436  	     in_cancelation_date       => in_cancelation_date,
15:40:04 2437  	     in_updated_by	       => in_updated_by,
15:40:04 2438  	     in_sct_id		       => FALSE_START_REASON
15:40:04 2439  	   );
15:40:04 2440  	   EXCEPTION
15:40:04 2441  	     WHEN OTHERS THEN
15:40:04 2442  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 2443  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
15:40:04 2444  	 END;
15:40:04 2445  
15:40:04 2446  	 -- Annotate subscription
15:40:04 2447  	 IF in_note IS NOT NULL THEN
15:40:04 2448  	   BEGIN
15:40:04 2449  	     PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
15:40:04 2450  	       in_subscription_id,
15:40:04 2451  	       in_agent_id,
15:40:04 2452  	       in_note,
15:40:04 2453  	       in_updated_by
15:40:04 2454  	     );
15:40:04 2455  	     EXCEPTION
15:40:04 2456  	      WHEN OTHERS THEN
15:40:04 2457  		EXCEPTION_MESSAGE := SQLERRM;
15:40:04 2458  		RAISE CAN_NOT_CREATE_NOTE;
15:40:04 2459  	   END;
15:40:04 2460  	 END IF;
15:40:04 2461  
15:40:04 2462  EXCEPTION
15:40:04 2463  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 2464  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2465  	   SPROC_NAME, 'No such subscription');
15:40:04 2466  WHEN BAD_SUBSCRIPTION_STATUS THEN
15:40:04 2467  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 2468  	   SPROC_NAME, 'Bad current subscription status');
15:40:04 2469  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
15:40:04 2470  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 2471  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
15:40:04 2472  WHEN ACTIVE_INVOICES_FOUND THEN
15:40:04 2473  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 2474  	   SPROC_NAME, 'Invoices with active licenses found');
15:40:04 2475  WHEN CAN_NOT_CREATE_NOTE THEN
15:40:04 2476  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 2477  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:40:04 2478  WHEN OTHERS THEN
15:40:04 2479  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2480  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2481  END FINALIZE_FALSE_START;
15:40:04 2482  
15:40:04 2483  /******************************************************************************/
15:40:04 2484  
15:40:04 2485  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
15:40:04 2486  	 in_subscription_id IN NUMBER
15:40:04 2487  ) RETURN NUMBER AS
15:40:04 2488  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
15:40:04 2489  -- VARIABLES
15:40:04 2490  var_is_offer_chain_cancelable NUMBER;
15:40:04 2491  --64603
15:40:04 2492  var_end_date date;
15:40:04 2493  today_date date := current_date;
15:40:04 2494  offer_id number;
15:40:04 2495  -- EXCEPTIONS
15:40:04 2496  COULD_NOT_CHECK	   EXCEPTION;
15:40:04 2497  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 2498  EXCEPTION_MESSAGE   VARCHAR2(1024);
15:40:04 2499  BEGIN
15:40:04 2500  
15:40:04 2501  	 BEGIN
15:40:04 2502  	   -- find offer_chain_id for given in_subscription_id
15:40:04 2503  	   SELECT OFFER_CHAIN_ID into offer_id
15:40:04 2504  	   FROM SUBSCRIPTION
15:40:04 2505  	   WHERE ID = in_subscription_id;
15:40:04 2506  	   EXCEPTION
15:40:04 2507  	     WHEN NO_DATA_FOUND THEN
15:40:04 2508  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 2509  	     WHEN OTHERS THEN
15:40:04 2510  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 2511  	       RAISE COULD_NOT_CHECK;
15:40:04 2512  	 END;
15:40:04 2513  
15:40:04 2514  	 -- find if it was redeemed from a gift certificate
15:40:04 2515  	 BEGIN
15:40:04 2516  	   SELECT l.end_date INTO var_end_date
15:40:04 2517  	   FROM LICENSE l, GIFT_CERTIFICATE g
15:40:04 2518  	   WHERE l.invoice_id = g.finalized_invoice_id
15:40:04 2519  	   AND l.subscription_id = in_subscription_id;
15:40:04 2520  
15:40:04 2521  	   -- if the license end_date is bigger than today, we are in the
15:40:04 2522  	   -- first period, so we cannot cancel; otherwise can cancel
15:40:04 2523  	   IF var_end_date > today_date THEN
15:40:04 2524  	       RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 2525  	   ELSE
15:40:04 2526  	       RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 2527  	   END IF;
15:40:04 2528  
15:40:04 2529  	   EXCEPTION
15:40:04 2530  	       -- not coming from a gift certificate,
15:40:04 2531  	       -- use old logic
15:40:04 2532  	       WHEN NO_DATA_FOUND THEN
15:40:04 2533  		   SELECT
15:40:04 2534  		       PROCS_OFFER_CHAIN_V23.IS_OFFER_CHAIN_CANCELABLE(offer_id)
15:40:04 2535  		       INTO var_is_offer_chain_cancelable
15:40:04 2536  		   FROM DUAL;
15:40:04 2537  		   RETURN var_is_offer_chain_cancelable;
15:40:04 2538  	 END;
15:40:04 2539  
15:40:04 2540  EXCEPTION
15:40:04 2541  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 2542  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2543  	   SPROC_NAME, 'No such subscription');
15:40:04 2544  WHEN COULD_NOT_CHECK THEN
15:40:04 2545  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 2546  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
15:40:04 2547  WHEN OTHERS THEN
15:40:04 2548  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2549  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2550  
15:40:04 2551  END IS_SUBSCRIPTION_CANCELABLE;
15:40:04 2552  /******************************************************************************/
15:40:04 2553  
15:40:04 2554  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
15:40:04 2555  	 in_subscription_id IN NUMBER,
15:40:04 2556  	 out_result_set     OUT SYS_REFCURSOR
15:40:04 2557  ) AS
15:40:04 2558  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
15:40:04 2559  -- VARIABLES
15:40:04 2560  var_offer NUMBER;
15:40:04 2561  -- EXCEPTIONS
15:40:04 2562  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 2563  BEGIN
15:40:04 2564  
15:40:04 2565  	 OPEN out_result_set FOR
15:40:04 2566  	 SELECT DISTINCT
15:40:04 2567  	   PRODUCT_OFFERING.ID,
15:40:04 2568  	   PRODUCT_OFFERING.PRODUCT_ID,
15:40:04 2569  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
15:40:04 2570  	   PRODUCT_OFFERING.UNIT_PRICE,
15:40:04 2571  	   PRODUCT_OFFERING.QUANTITY,
15:40:04 2572  	   PRODUCT_OFFERING.CREATE_DATE,
15:40:04 2573  	   PRODUCT_OFFERING.CREATED_BY,
15:40:04 2574  	   PRODUCT.ID P_ID,
15:40:04 2575  	   PRODUCT.NAME,
15:40:04 2576  	   PRODUCT.TAX_CATEGORY_ID,
15:40:04 2577  	   PRODUCT.ENTITLEMENT,
15:40:04 2578  	   PRODUCT.IS_SHAREABLE,
15:40:04 2579  	   PRODUCT.PRODUCT_STATUS_ID,
15:40:04 2580  	   PRODUCT.DEFAULT_VAT_RATE
15:40:04 2581  	 FROM
15:40:04 2582  	   OFFER_PRODUCT_OFFERING
15:40:04 2583  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:40:04 2584  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:40:04 2585  	 WHERE
15:40:04 2586  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:40:04 2587  	     SELECT
15:40:04 2588  	       LICENSE.OFFER_ID
15:40:04 2589  	     FROM
15:40:04 2590  	       SUBSCRIPTION
15:40:04 2591  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V23.TRUE
15:40:04 2592  	     WHERE
15:40:04 2593  	       SUBSCRIPTION.ID = in_subscription_id
15:40:04 2594  	   );
15:40:04 2595  
15:40:04 2596  EXCEPTION
15:40:04 2597  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 2598  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2599  	   SPROC_NAME, 'No such subscription');
15:40:04 2600  WHEN OTHERS THEN
15:40:04 2601  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2602  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2603  END GET_SUBSCR_PROD_OFFERRINGS;
15:40:04 2604  
15:40:04 2605  
15:40:04 2606  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
15:40:04 2607  /*
15:40:04 2608  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 2609  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 2610  */
15:40:04 2611  	 in_subscription_id IN NUMBER,
15:40:04 2612  	 out_result_set     OUT SYS_REFCURSOR
15:40:04 2613  ) AS
15:40:04 2614  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
15:40:04 2615  -- VARIABLES
15:40:04 2616  var_offer NUMBER;
15:40:04 2617  -- EXCEPTIONS
15:40:04 2618  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 2619  BEGIN
15:40:04 2620  
15:40:04 2621  	 OPEN out_result_set FOR
15:40:04 2622  	 SELECT DISTINCT
15:40:04 2623  	   PRODUCT_OFFERING.ID,
15:40:04 2624  	   PRODUCT_OFFERING.PRODUCT_ID,
15:40:04 2625  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
15:40:04 2626  	   PRODUCT_OFFERING.UNIT_PRICE,
15:40:04 2627  	   PRODUCT_OFFERING.QUANTITY,
15:40:04 2628  	   PRODUCT_OFFERING.CREATE_DATE,
15:40:04 2629  	   PRODUCT_OFFERING.CREATED_BY,
15:40:04 2630  	   PRODUCT.ID P_ID,
15:40:04 2631  	   PRODUCT.NAME,
15:40:04 2632  	   PRODUCT.TAX_CATEGORY_ID,
15:40:04 2633  	   PRODUCT.ENTITLEMENT,
15:40:04 2634  	   PRODUCT.IS_SHAREABLE,
15:40:04 2635  	   PRODUCT.PRODUCT_STATUS_ID,
15:40:04 2636  	   PRODUCT.DEFAULT_VAT_RATE
15:40:04 2637  	 FROM
15:40:04 2638  	   OFFER_PRODUCT_OFFERING
15:40:04 2639  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:40:04 2640  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
15:40:04 2641  	 WHERE
15:40:04 2642  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:40:04 2643  	     SELECT
15:40:04 2644  	       LICENSE.OFFER_ID
15:40:04 2645  	     FROM
15:40:04 2646  	       SUBSCRIPTION
15:40:04 2647  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 2648  	     WHERE
15:40:04 2649  	       SUBSCRIPTION.ID = in_subscription_id
15:40:04 2650  	   );
15:40:04 2651  
15:40:04 2652  EXCEPTION
15:40:04 2653  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 2654  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2655  	   SPROC_NAME, 'No such subscription');
15:40:04 2656  WHEN OTHERS THEN
15:40:04 2657  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2658  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2659  END RETRIEVE_SUB_PROD_OFFER;
15:40:04 2660  /******************************************************************************/
15:40:04 2661  PROCEDURE GET_SUBSCR_LIC_OFFER(
15:40:04 2662  	 in_subscription_id IN NUMBER,
15:40:04 2663  	 out_result_set     OUT SYS_REFCURSOR
15:40:04 2664  ) AS
15:40:04 2665  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
15:40:04 2666  -- VARIABLES
15:40:04 2667  var_offer_chain NUMBER;
15:40:04 2668  -- EXCEPTIONS
15:40:04 2669  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 2670  BEGIN
15:40:04 2671  	 BEGIN
15:40:04 2672  	   SELECT
15:40:04 2673  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
15:40:04 2674  	   FROM
15:40:04 2675  	     SUBSCRIPTION
15:40:04 2676  	   WHERE
15:40:04 2677  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 2678  	   EXCEPTION
15:40:04 2679  	     WHEN NO_DATA_FOUND THEN
15:40:04 2680  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 2681  	 END;
15:40:04 2682  
15:40:04 2683  	 OPEN out_result_set FOR
15:40:04 2684  	 SELECT DISTINCT
15:40:04 2685  	   po.ID po_id,
15:40:04 2686  	   po.PRODUCT_ID po_product_id,
15:40:04 2687  	   p.TAX_CATEGORY_ID po_tax_category_id,
15:40:04 2688  	   po.UNIT_PRICE po_unit_price,
15:40:04 2689  	   po.QUANTITY po_quantity,
15:40:04 2690  	   po.CREATE_DATE po_create_date,
15:40:04 2691  	   po.CREATED_BY po_created_by,
15:40:04 2692  	   l.ID l_id,
15:40:04 2693  	   l.license_status_id l_license_status_id,
15:40:04 2694  	   l.start_date l_start_date,
15:40:04 2695  	   l.offer_id l_offer_id,
15:40:04 2696  	   l.subscription_id l_subscription_id,
15:40:04 2697  	   l.invoice_id l_invoice_id,
15:40:04 2698  	   l.end_date l_end_date,
15:40:04 2699  	   l.entitlement_end_date l_entitlement_end_date,
15:40:04 2700  	   l.create_date l_create_date,
15:40:04 2701  	   l.created_by l_created_by,
15:40:04 2702  	   l.is_extension l_is_extension,
15:40:04 2703  	   l.current_offer_index l_current_offer_index,
15:40:04 2704  	   l.current_offer_recurr_num l_current_offer_recurr_num,
15:40:04 2705  	   l.needs_entitlements l_needs_entitlements
15:40:04 2706  	 FROM
15:40:04 2707  	   OFFER_PRODUCT_OFFERING opo,
15:40:04 2708  	   PRODUCT_OFFERING po,
15:40:04 2709  	   SUBSCRIPTION s,
15:40:04 2710  	   LICENSE l,
15:40:04 2711  	   PRODUCT p
15:40:04 2712  	 WHERE
15:40:04 2713  	   opo.product_offering_id = po.id
15:40:04 2714  	   and po.id = l.offer_id
15:40:04 2715  	   and l.subscription_id = s.id
15:40:04 2716  	   and po.product_id = p.id
15:40:04 2717  	   and l.license_status_id = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 2718  	   and s.id = in_subscription_id
15:40:04 2719  	 ;
15:40:04 2720  EXCEPTION
15:40:04 2721  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 2722  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2723  	   SPROC_NAME, 'No such subscription');
15:40:04 2724  WHEN OTHERS THEN
15:40:04 2725  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2726  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2727  END GET_SUBSCR_LIC_OFFER;
15:40:04 2728  
15:40:04 2729  /******************************************************************************/
15:40:04 2730  
15:40:04 2731  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
15:40:04 2732  	 in_subscription_id IN NUMBER,
15:40:04 2733  	 out_result	    OUT NUMBER
15:40:04 2734  ) AS
15:40:04 2735  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
15:40:04 2736  -- VARIABLES
15:40:04 2737  temp_subscription_id NUMBER;
15:40:04 2738  var_local_result     NUMBER;
15:40:04 2739  -- EXCEPTIONS
15:40:04 2740  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:04 2741  BEGIN
15:40:04 2742  
15:40:04 2743  	 -- Check that subscription exists
15:40:04 2744  	 BEGIN
15:40:04 2745  	   SELECT
15:40:04 2746  	     SUBSCRIPTION.ID into temp_subscription_id
15:40:04 2747  	   FROM
15:40:04 2748  	     SUBSCRIPTION
15:40:04 2749  	   WHERE
15:40:04 2750  	     SUBSCRIPTION.ID = in_subscription_id;
15:40:04 2751  	   EXCEPTION
15:40:04 2752  	     WHEN NO_DATA_FOUND THEN
15:40:04 2753  	       RAISE BAD_SUBSCRIPTION_ID;
15:40:04 2754  	 END;
15:40:04 2755  
15:40:04 2756  	 var_local_result := NULL;
15:40:04 2757  
15:40:04 2758  	 -- Check charges for each invoice associated with gived subscription
15:40:04 2759  	 FOR f_invoice IN (
15:40:04 2760  	   SELECT DISTINCT
15:40:04 2761  	     LICENSE.INVOICE_ID as "ID"
15:40:04 2762  	   FROM
15:40:04 2763  	     LICENSE
15:40:04 2764  	   WHERE
15:40:04 2765  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:40:04 2766  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V23.LICENSE_ACTIVE FROM DUAL )
15:40:04 2767  	 )
15:40:04 2768  	 LOOP
15:40:04 2769  
15:40:04 2770  	   -- Check each charge in invoice
15:40:04 2771  	   FOR f_charge IN (
15:40:04 2772  	     SELECT
15:40:04 2773  	       CHARGE.ID,
15:40:04 2774  	       CHARGE.CHARGE_STATUS_ID,
15:40:04 2775  	       CHARGE.CHARGE_AMOUNT
15:40:04 2776  	     FROM
15:40:04 2777  	       CHARGE
15:40:04 2778  	     WHERE
15:40:04 2779  	       CHARGE.INVOICE_ID = f_invoice.ID
15:40:04 2780  	   )
15:40:04 2781  	   LOOP
15:40:04 2782  
15:40:04 2783  	     -- Charge amount < 0     => it is a refund
15:40:04 2784  	     -- Charge status is OPEN => means that it is not processed yet
15:40:04 2785  	     IF f_charge.CHARGE_AMOUNT < 0
15:40:04 2786  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED THEN
15:40:04 2787  	       var_local_result := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 2788  	     END IF;
15:40:04 2789  
15:40:04 2790  	   END LOOP;
15:40:04 2791  
15:40:04 2792  	 END LOOP;
15:40:04 2793  
15:40:04 2794  	 IF var_local_result IS NULL THEN
15:40:04 2795  	   out_result := GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 2796  	 ELSE
15:40:04 2797  	   out_result := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 2798  	 END IF;
15:40:04 2799  
15:40:04 2800  EXCEPTION
15:40:04 2801  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:04 2802  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2803  	   SPROC_NAME, 'No such transaction id');
15:40:04 2804  WHEN OTHERS THEN
15:40:04 2805  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2806  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 2807  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
15:40:04 2808  
15:40:04 2809  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
15:40:04 2810  	 in_group_id	    IN NUMBER,
15:40:04 2811  	 in_offer_chain_id  IN NUMBER,
15:40:04 2812  	 out_result	    OUT NUMBER
15:40:04 2813  ) AS
15:40:04 2814  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
15:40:04 2815  -- VARIABLES
15:40:04 2816  temp_acct_id	    NUMBER;
15:40:04 2817  temp_oc_id	    NUMBER;
15:40:04 2818  -- EXCEPTIONS
15:40:04 2819  BAD_GROUP_ID EXCEPTION;
15:40:04 2820  BAD_OFFER_CHAIN_ID EXCEPTION;
15:40:04 2821  BEGIN
15:40:04 2822  	 -- Check that group id exists
15:40:04 2823  	 BEGIN
15:40:04 2824  	   SELECT
15:40:04 2825  	     ACCOUNT.ID into temp_acct_id
15:40:04 2826  	   FROM
15:40:04 2827  	     ACCOUNT
15:40:04 2828  	   WHERE
15:40:04 2829  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:04 2830  	   EXCEPTION
15:40:04 2831  	     WHEN NO_DATA_FOUND THEN
15:40:04 2832  	       RAISE BAD_GROUP_ID;
15:40:04 2833  	 END;
15:40:04 2834  	 -- Check that offer chain id exists
15:40:04 2835  	 BEGIN
15:40:04 2836  	   SELECT
15:40:04 2837  	     OFFER_CHAIN.ID into temp_oc_id
15:40:04 2838  	   FROM
15:40:04 2839  	     OFFER_CHAIN
15:40:04 2840  	   WHERE
15:40:04 2841  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:40:04 2842  	   EXCEPTION
15:40:04 2843  	     WHEN NO_DATA_FOUND THEN
15:40:04 2844  	       RAISE BAD_OFFER_CHAIN_ID;
15:40:04 2845  	 END;
15:40:04 2846  	 SELECT
15:40:04 2847  	   COUNT(*) into out_result
15:40:04 2848  	 FROM
15:40:04 2849  	   SUBSCRIPTION
15:40:04 2850  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:40:04 2851  	 WHERE
15:40:04 2852  	   ACCOUNT.GROUP_ID = in_group_id
15:40:04 2853  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
15:40:04 2854  	   AND (
15:40:04 2855  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04 2856  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
15:40:04 2857  
15:40:04 2858  EXCEPTION
15:40:04 2859  WHEN BAD_GROUP_ID THEN
15:40:04 2860  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2861  	   SPROC_NAME, 'No such transaction id');
15:40:04 2862  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:04 2863  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2864  	   SPROC_NAME, 'No such offer chain id');
15:40:04 2865  WHEN OTHERS THEN
15:40:04 2866  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2867  	   sproc_name, 'Unknown error', sqlerrm);
15:40:04 2868  END GET_EXISTING_SUBSCR_NUMBER;
15:40:04 2869  
15:40:04 2870  PROCEDURE GET_EXISTING_SUBSCR_IDS (
15:40:04 2871  	 in_group_id	    IN NUMBER,
15:40:04 2872  	 in_offer_chain_id  IN NUMBER,
15:40:04 2873  	 out_result_set     OUT SYS_REFCURSOR
15:40:04 2874  ) AS
15:40:04 2875  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
15:40:04 2876  -- VARIABLES
15:40:04 2877  temp_acct_id	    NUMBER;
15:40:04 2878  temp_oc_id	    NUMBER;
15:40:04 2879  -- EXCEPTIONS
15:40:04 2880  BAD_GROUP_ID EXCEPTION;
15:40:04 2881  BAD_OFFER_CHAIN_ID EXCEPTION;
15:40:04 2882  BEGIN
15:40:04 2883  
15:40:04 2884  	 -- Check that group id exists
15:40:04 2885  	 BEGIN
15:40:04 2886  	   SELECT
15:40:04 2887  	     ACCOUNT.ID into temp_acct_id
15:40:04 2888  	   FROM
15:40:04 2889  	     ACCOUNT
15:40:04 2890  	   WHERE
15:40:04 2891  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:04 2892  	   EXCEPTION
15:40:04 2893  	     WHEN NO_DATA_FOUND THEN
15:40:04 2894  	       RAISE BAD_GROUP_ID;
15:40:04 2895  	 END;
15:40:04 2896  	 -- Check that offer chain id exists
15:40:04 2897  	 BEGIN
15:40:04 2898  	   SELECT
15:40:04 2899  	     OFFER_CHAIN.ID into temp_oc_id
15:40:04 2900  	   FROM
15:40:04 2901  	     OFFER_CHAIN
15:40:04 2902  	   WHERE
15:40:04 2903  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:40:04 2904  	   EXCEPTION
15:40:04 2905  	     WHEN NO_DATA_FOUND THEN
15:40:04 2906  	       RAISE BAD_OFFER_CHAIN_ID;
15:40:04 2907  	 END;
15:40:04 2908  
15:40:04 2909  	 OPEN out_result_set FOR
15:40:04 2910  	 SELECT
15:40:04 2911  	   SUBSCRIPTION.ID
15:40:04 2912  	 FROM
15:40:04 2913  	   SUBSCRIPTION
15:40:04 2914  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:40:04 2915  	 WHERE
15:40:04 2916  	   ACCOUNT.GROUP_ID = in_group_id
15:40:04 2917  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
15:40:04 2918  	   AND (
15:40:04 2919  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:04 2920  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
15:40:04 2921  
15:40:04 2922  EXCEPTION
15:40:04 2923  WHEN BAD_GROUP_ID THEN
15:40:04 2924  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2925  	   SPROC_NAME, 'No such transaction id');
15:40:04 2926  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:04 2927  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2928  	   SPROC_NAME, 'No such offer chain id');
15:40:04 2929  WHEN OTHERS THEN
15:40:04 2930  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2931  	   sproc_name, 'Unknown error', sqlerrm);
15:40:04 2932  END GET_EXISTING_SUBSCR_IDS;
15:40:04 2933  
15:40:04 2934  PROCEDURE ADD_META_DATA (
15:40:04 2935  	 in_subscription_id IN NUMBER,
15:40:04 2936  	 in_name	    IN VARCHAR2,
15:40:04 2937  	 in_value	    IN VARCHAR2,
15:40:04 2938  	 in_created_by	    IN VARCHAR2
15:40:04 2939  ) AS
15:40:04 2940  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
15:40:04 2941  BEGIN
15:40:04 2942  
15:40:04 2943  	 INSERT INTO SUBSCRIPTION_META_DATA (
15:40:04 2944  	   ID,
15:40:04 2945  	   SUBSCRIPTION_ID,
15:40:04 2946  	   NAME,
15:40:04 2947  	   VALUE,
15:40:04 2948  	   CREATE_DATE,
15:40:04 2949  	   CREATED_BY
15:40:04 2950  	 ) VALUES (
15:40:04 2951  	   SUBMD_ID_SEQ.nextVal,
15:40:04 2952  	   in_subscription_id,
15:40:04 2953  	   in_name,
15:40:04 2954  	   in_value,
15:40:04 2955  	   sysdate,
15:40:04 2956  	   in_created_by
15:40:04 2957  	 );
15:40:04 2958  
15:40:04 2959  EXCEPTION
15:40:04 2960  WHEN OTHERS THEN
15:40:04 2961  	 IF SQLCODE = -2291 THEN
15:40:04 2962  	   PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 2963  	     SPROC_NAME, 'No such subscription');
15:40:04 2964  	 ELSE
15:40:04 2965  	   PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 2966  	     SPROC_NAME, 'Unknown error', sqlerrm);
15:40:04 2967  	 END IF;
15:40:04 2968  END ADD_META_DATA;
15:40:04 2969  
15:40:04 2970  /******************************************************************************/
15:40:04 2971  
15:40:04 2972  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
15:40:04 2973  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
15:40:04 2974  	 out_result_set       OUT SYS_REFCURSOR
15:40:04 2975  ) AS
15:40:04 2976  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
15:40:04 2977  -- Exceptions
15:40:04 2978  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
15:40:04 2979  BEGIN
15:40:04 2980  
15:40:04 2981  	 IF in_subscriptions_ids IS NULL THEN
15:40:04 2982  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
15:40:04 2983  	 END IF;
15:40:04 2984  
15:40:04 2985  	 OPEN out_result_set FOR
15:40:04 2986  	 SELECT
15:40:04 2987  	   SMD.SUBSCRIPTION_ID,
15:40:04 2988  	   SMD.NAME,
15:40:04 2989  	   SMD.VALUE
15:40:04 2990  	 FROM
15:40:04 2991  	   SUBSCRIPTION_META_DATA SMD
15:40:04 2992  	 WHERE
15:40:04 2993  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
15:40:04 2994  
15:40:04 2995  EXCEPTION
15:40:04 2996  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
15:40:04 2997  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 2998  	   SPROC_NAME, 'Bad subscription ids parameter');
15:40:04 2999  WHEN OTHERS THEN
15:40:04 3000  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 3001  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 3002  END GET_SUBSCRIPTIONS_META_DATA;
15:40:04 3003  
15:40:04 3004  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
15:40:04 3005  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
15:40:04 3006  	 out_result_set     OUT SYS_REFCURSOR
15:40:04 3007  ) AS
15:40:04 3008  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
15:40:04 3009  BEGIN
15:40:04 3010  	 OPEN out_result_set FOR
15:40:04 3011  	 SELECT subscription.id FROM
15:40:04 3012  	   subscription
15:40:04 3013  	 INNER JOIN license ON license.subscription_id = subscription.id
15:40:04 3014  	 INNER JOIN invoice ON invoice.id = license.invoice_id
15:40:04 3015  	 INNER JOIN charge ON invoice.id = charge.invoice_id
15:40:04 3016  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
15:40:04 3017  	 WHERE transaction.order_id = in_order_id;
15:40:04 3018  EXCEPTION
15:40:04 3019  WHEN OTHERS THEN
15:40:04 3020  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 3021  	   SPROC_NAME, 'Unknown error', sqlerrm);
15:40:04 3022  END GET_SUBS_BY_TRNS_ORDER_ID;
15:40:04 3023  
15:40:04 3024  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
15:40:04 3025  	(
15:40:04 3026  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:40:04 3027  	 out_result_set      OUT SYS_REFCURSOR
15:40:04 3028  )
15:40:04 3029  AS
15:40:04 3030  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
15:40:04 3031  BEGIN
15:40:04 3032  	 OPEN out_result_set FOR
15:40:04 3033  	 SELECT
15:40:04 3034  	   c.ID,
15:40:04 3035  	   c.TRANSACTION_ID,
15:40:04 3036  	   c.INSTRUMENT_ID,
15:40:04 3037  	   c.INSTRUMENT_TYPE_ID,
15:40:04 3038  	   c.CHARGE_AMOUNT,
15:40:04 3039  	   c.CREATE_DATE,
15:40:04 3040  	   c.CREATED_BY,
15:40:04 3041  	   c.INVOICE_ID
15:40:04 3042  	  FROM
15:40:04 3043  	   subscription s,
15:40:04 3044  	   license l,
15:40:04 3045  	   charge c
15:40:04 3046  	 WHERE
15:40:04 3047  	   s.id = l.subscription_id and
15:40:04 3048  	   l.invoice_id = c.invoice_id and
15:40:04 3049  	   c.charge_status_id = GLOBAL_STATUSES_V23.CHARGE_OPENED and
15:40:04 3050  	   exists (
15:40:04 3051  	     select null
15:40:04 3052  	     from transaction t
15:40:04 3053  	     where
15:40:04 3054  	       t.id = c.transaction_id
15:40:04 3055  	   ) and
15:40:04 3056  	   s.id = in_subscription_id;
15:40:04 3057  EXCEPTION
15:40:04 3058  WHEN OTHERS THEN
15:40:04 3059  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 3060  	   SPROC_NAME, 'Unknown error', sqlerrm);
15:40:04 3061  END GET_OPEN_CHARGES_BY_SUBID;
15:40:04 3062  
15:40:04 3063  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
15:40:04 3064  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
15:40:04 3065  ) RETURN NUMBER
15:40:04 3066  AS
15:40:04 3067  var_gift_certificate_id NUMBER;
15:40:04 3068  BEGIN
15:40:04 3069  	     SELECT id INTO var_gift_certificate_id
15:40:04 3070  	     FROM
15:40:04 3071  	       gift_certificate gc
15:40:04 3072  	     WHERE
15:40:04 3073  	       gc.finalized_invoice_id in (
15:40:04 3074  		 SELECT invoice_id
15:40:04 3075  		 FROM (
15:40:04 3076  		   SELECT l.invoice_id
15:40:04 3077  		   FROM
15:40:04 3078  		     license l
15:40:04 3079  		   WHERE
15:40:04 3080  		     l.subscription_id = in_subscription_id
15:40:04 3081  		   ORDER BY l.create_date asc
15:40:04 3082  		 )
15:40:04 3083  	       )
15:40:04 3084  	       and rownum <= 1;
15:40:04 3085  	     return var_gift_certificate_id;
15:40:04 3086  END GET_GIFT_CERT_ID_BY_SUB_ID;
15:40:04 3087  
15:40:04 3088  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
15:40:04 3089  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
15:40:04 3090  ) RETURN VARCHAR2
15:40:04 3091  AS
15:40:04 3092  var_gift_certificate_code VARCHAR2(255 BYTE);
15:40:04 3093  BEGIN
15:40:04 3094  	     SELECT code INTO var_gift_certificate_code
15:40:04 3095  	     FROM
15:40:04 3096  	       gift_certificate gc
15:40:04 3097  	     WHERE
15:40:04 3098  	       gc.finalized_invoice_id in (
15:40:04 3099  		 SELECT invoice_id
15:40:04 3100  		 FROM (
15:40:04 3101  		   SELECT l.invoice_id
15:40:04 3102  		   FROM
15:40:04 3103  		     license l
15:40:04 3104  		   WHERE
15:40:04 3105  		     l.subscription_id = in_subscription_id
15:40:04 3106  		 )
15:40:04 3107  	       )
15:40:04 3108  	       and rownum <= 1;
15:40:04 3109  	     return var_gift_certificate_code;
15:40:04 3110  END GET_GIFT_CERT_CODE_BY_SUB_ID;
15:40:04 3111  
15:40:04 3112  PROCEDURE GET_ACTIVE_MEU_SUBS (
15:40:04 3113  	 out_result_set      OUT SYS_REFCURSOR
15:40:04 3114  )
15:40:04 3115  AS
15:40:04 3116  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
15:40:04 3117  BEGIN
15:40:04 3118  	 OPEN out_result_set FOR
15:40:04 3119  	       SELECT
15:40:04 3120  		   s.id,
15:40:04 3121  		   s.instrument_type_id,
15:40:04 3122  		   s.instrument_id,
15:40:04 3123  		   a.group_id,
15:40:04 3124  		   s.offer_chain_id
15:40:04 3125  	       FROM
15:40:04 3126  		   core_owner.subscription s,
15:40:04 3127  		   core_owner.account a
15:40:04 3128  	       WHERE
15:40:04 3129  		   a.id = s.account_id AND(
15:40:04 3130  		       s.offer_chain_id = 1745992781 OR
15:40:04 3131  		       s.offer_chain_id = 3902149773 OR
15:40:04 3132  		       s.offer_chain_id = 2240201337) AND
15:40:04 3133  		   NOT EXISTS
15:40:04 3134  		   (
15:40:04 3135  		       SELECT
15:40:04 3136  			   1
15:40:04 3137  		       FROM
15:40:04 3138  			   core_owner.subscription ss
15:40:04 3139  		       WHERE
15:40:04 3140  			   ss.account_id = a.id AND(
15:40:04 3141  			       ss.offer_chain_id = 2794122734 OR
15:40:04 3142  			       ss.offer_chain_id = 3564368005 OR
15:40:04 3143  			       ss.offer_chain_id = 757934392)) AND
15:40:04 3144  		   rownum < 5000;
15:40:04 3145  END GET_ACTIVE_MEU_SUBS;
15:40:04 3146  
15:40:04 3147  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
15:40:04 3148  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:40:04 3149  	 out_offer_id	     OUT LICENSE.ID%TYPE
15:40:04 3150  )
15:40:04 3151  AS
15:40:04 3152  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
15:40:04 3153  BEGIN
15:40:04 3154  	 SELECT OFFER_ID INTO out_offer_id
15:40:04 3155  	 FROM LICENSE L,
15:40:04 3156  	 (
15:40:04 3157  	   SELECT MIN(ID) ID FROM LICENSE
15:40:04 3158  	   WHERE SUBSCRIPTION_ID = in_subscription_id
15:40:04 3159  	   AND LICENSE_STATUS_ID = 2
15:40:04 3160  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
15:40:04 3161  	 ) EARLIEST_ACTIVE_LICENSE
15:40:04 3162  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
15:40:04 3163  END GET_EARLIEST_ACTIVE_OFFER_ID;
15:40:04 3164  
15:40:04 3165  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
15:40:04 3166  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
15:40:04 3167  	 out_license_id      OUT LICENSE.ID%TYPE
15:40:04 3168  )
15:40:04 3169  AS
15:40:04 3170  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
15:40:04 3171  BEGIN
15:40:04 3172  	 SELECT MIN(ID) into out_license_id
15:40:04 3173  	 FROM LICENSE
15:40:04 3174  	 WHERE SUBSCRIPTION_ID = in_subscription_id
15:40:04 3175  	   AND LICENSE_STATUS_ID = 2
15:40:04 3176  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
15:40:04 3177  END GET_EARLIEST_ACTIVE_LICENSE_ID;
15:40:04 3178  
15:40:04 3179  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
15:40:04 3180  	 out_result_set      OUT SYS_REFCURSOR
15:40:04 3181  )
15:40:04 3182  AS
15:40:04 3183  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
15:40:04 3184  BEGIN
15:40:04 3185  	 OPEN out_result_set FOR
15:40:04 3186  	   SELECT
15:40:04 3187  	     s.id
15:40:04 3188  	   FROM
15:40:04 3189  	     core_owner.transaction t
15:40:04 3190  	   INNER JOIN
15:40:04 3191  	     core_owner.charge c
15:40:04 3192  	   ON
15:40:04 3193  	     c.transaction_id = t.id
15:40:04 3194  	   INNER JOIN
15:40:04 3195  	     core_owner.invoice i
15:40:04 3196  	   ON
15:40:04 3197  	     i.id = c.invoice_id
15:40:04 3198  	   INNER JOIN
15:40:04 3199  	     core_owner.license l
15:40:04 3200  	   ON
15:40:04 3201  	     i.id = l.invoice_id
15:40:04 3202  	   INNER JOIN
15:40:04 3203  	     core_owner.subscription s
15:40:04 3204  	   ON
15:40:04 3205  	     l.subscription_id = s.id
15:40:04 3206  	   INNER JOIN
15:40:04 3207  	     core_owner.account a
15:40:04 3208  	   ON
15:40:04 3209  	     s.account_id = a.id
15:40:04 3210  	   JOIN
15:40:04 3211  	     core_owner.rcn_cpt_chargeback_act_detail ccad
15:40:04 3212  	   ON
15:40:04 3213  	     t.order_id = ccad.merchant_order_number
15:40:04 3214  	   WHERE
15:40:04 3215  	     ccad.chargeback_category = 'RECD'
15:40:04 3216  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
15:40:04 3217  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
15:40:04 3218  
15:40:04 3219  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
15:40:04 3220  	 out_result_set      OUT SYS_REFCURSOR
15:40:04 3221  )
15:40:04 3222  AS
15:40:04 3223  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
15:40:04 3224  BEGIN
15:40:04 3225  	 OPEN out_result_set FOR
15:40:04 3226  	   SELECT
15:40:04 3227  	     s.id
15:40:04 3228  	   FROM
15:40:04 3229  	     core_owner.transaction t
15:40:04 3230  	   INNER JOIN
15:40:04 3231  	     core_owner.charge c
15:40:04 3232  	   ON
15:40:04 3233  	     c.transaction_id = t.id
15:40:04 3234  	   INNER JOIN
15:40:04 3235  	     core_owner.invoice i
15:40:04 3236  	   ON
15:40:04 3237  	     i.id = c.invoice_id
15:40:04 3238  	   INNER JOIN
15:40:04 3239  	     core_owner.license l
15:40:04 3240  	   ON
15:40:04 3241  	     i.id = l.invoice_id
15:40:04 3242  	   INNER JOIN
15:40:04 3243  	     core_owner.subscription s
15:40:04 3244  	   ON
15:40:04 3245  	     l.subscription_id = s.id
15:40:04 3246  	   INNER JOIN
15:40:04 3247  	     core_owner.account a
15:40:04 3248  	   ON
15:40:04 3249  	     s.account_id = a.id
15:40:04 3250  	   INNER JOIN
15:40:04 3251  	     core_owner.rcn_pp_trans_detail ptd
15:40:04 3252  	   ON
15:40:04 3253  	     t.order_id = ptd.invoice_id
15:40:04 3254  	   WHERE
15:40:04 3255  	     ptd.trans_status = 'D'
15:40:04 3256  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
15:40:04 3257  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
15:40:04 3258  
15:40:04 3259  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
15:40:04 3260  	 in_max_days_until_close IN NUMBER,
15:40:04 3261  	 in_num_subs_to_fetch	 IN NUMBER,
15:40:04 3262  	 out_result_set 	 OUT SYS_REFCURSOR
15:40:04 3263  )
15:40:04 3264  AS
15:40:04 3265  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GRACE_PERIOD_SUB_REGIS';
15:40:04 3266  BEGIN
15:40:04 3267  	 OPEN out_result_set FOR
15:40:04 3268  	 SELECT
15:40:04 3269  	     *
15:40:04 3270  	 FROM
15:40:04 3271  	     (
15:40:04 3272  		 SELECT
15:40:04 3273  		     a.group_id group_id,
15:40:04 3274  		     l.grace_end_date grace_end_date
15:40:04 3275  		 FROM
15:40:04 3276  		     license l
15:40:04 3277  		 JOIN
15:40:04 3278  		     subscription s
15:40:04 3279  		 ON
15:40:04 3280  		     s.id = l.subscription_id
15:40:04 3281  		 JOIN
15:40:04 3282  		     account a
15:40:04 3283  		 ON
15:40:04 3284  		     a.id = s.account_id
15:40:04 3285  		 WHERE
15:40:04 3286  		     l.license_status_id = GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD
15:40:04 3287  		 AND l.grace_end_date - SYSDATE <= in_max_days_until_close
15:40:04 3288  		 AND NOT EXISTS
15:40:04 3289  		     (
15:40:04 3290  			 SELECT
15:40:04 3291  			     NULL
15:40:04 3292  			 FROM
15:40:04 3293  			     process_retry_throttle
15:40:04 3294  			 WHERE
15:40:04 3295  			     process_name = sproc_name
15:40:04 3296  			 AND generic_id = a.group_id)
15:40:04 3297  		 AND rownum <= in_num_subs_to_fetch * 10
15:40:04 3298  		 ORDER BY
15:40:04 3299  		     dbms_random.value)
15:40:04 3300  	 WHERE
15:40:04 3301  	     rownum <= in_num_subs_to_fetch;
15:40:04 3302  END GET_GRACE_PERIOD_SUB_REGIS;
15:40:04 3303  
15:40:04 3304  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
15:40:04 3305  	 out_result_set      OUT SYS_REFCURSOR
15:40:04 3306  )
15:40:04 3307  AS
15:40:04 3308  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_AMEX_CB';
15:40:04 3309  BEGIN
15:40:04 3310  	 OPEN out_result_set FOR
15:40:04 3311  	   SELECT
15:40:04 3312  	     s.id
15:40:04 3313  	   FROM
15:40:04 3314  	     core_owner.transaction t
15:40:04 3315  	   INNER JOIN
15:40:04 3316  	     core_owner.charge c
15:40:04 3317  	   ON
15:40:04 3318  	     c.transaction_id = t.id
15:40:04 3319  	   INNER JOIN
15:40:04 3320  	     core_owner.invoice i
15:40:04 3321  	   ON
15:40:04 3322  	     i.id = c.invoice_id
15:40:04 3323  	   INNER JOIN
15:40:04 3324  	     core_owner.license l
15:40:04 3325  	   ON
15:40:04 3326  	     i.id = l.invoice_id
15:40:04 3327  	   INNER JOIN
15:40:04 3328  	     core_owner.subscription s
15:40:04 3329  	   ON
15:40:04 3330  	     l.subscription_id = s.id
15:40:04 3331  	   INNER JOIN
15:40:04 3332  	     core_owner.account a
15:40:04 3333  	   ON
15:40:04 3334  	     s.account_id = a.id
15:40:04 3335  	   INNER JOIN
15:40:04 3336  	     core_owner.rcn_amex_chargeback ac
15:40:04 3337  	   ON
15:40:04 3338  	     t.order_id = lower(ac.ind_ref_number)
15:40:04 3339  	   WHERE
15:40:04 3340  	     s.subscription_status_id in (GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
15:40:04 3341  END GET_ACT_SUBS_W_AMEX_CB;
15:40:04 3342  
15:40:04 3343  END PROCS_SUBSCRIPTION_V23;
15:40:04 3344  .
15:40:04 SQL> /

Package body created.

Elapsed: 00:00:00.32
15:40:04 SQL> 
15:40:04 SQL> prompt Compiling body for procs_invoice.sql
Compiling body for procs_invoice.sql
15:40:04 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V23" AS
15:40:04   2  
15:40:04   3  PROCEDURE GET_INVOICE_IDS(
15:40:04   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
15:40:04   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
15:40:04   6  	out_result_set OUT SYS_REFCURSOR
15:40:04   7  ) AS
15:40:04   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_INVOICE_IDS';
15:40:04   9  BEGIN
15:40:04  10  	OPEN out_result_set FOR
15:40:04  11  	  SELECT
15:40:04  12  	    Invoice.ID
15:40:04  13  	  FROM
15:40:04  14  	      Invoice
15:40:04  15  	      INNER JOIN License
15:40:04  16  		ON
15:40:04  17  		  License.Invoice_Id = Invoice.Id
15:40:04  18  	      INNER JOIN Subscription
15:40:04  19  		ON
15:40:04  20  		  License.Subscription_Id = Subscription.Id
15:40:04  21  	      INNER JOIN account
15:40:04  22  		ON
15:40:04  23  		  Subscription.Account_Id = account.id
15:40:04  24  	  WHERE
15:40:04  25  	    Account.Group_Id = in_group_id
15:40:04  26  	    AND SUBSCRIPTION.INSTRUMENT_ID = in_fin_id
15:40:04  27  	    AND Invoice.Invoice_Status_Id = GLOBAL_STATUSES_V23.INVOICE_OPEN;
15:40:04  28  END GET_INVOICE_IDS;
15:40:04  29  
15:40:04  30  
15:40:04  31  PROCEDURE IS_INVOICE_FOR_GC (
15:40:04  32  	in_invoice_id IN NUMBER,
15:40:04  33  	out_result    OUT NUMBER
15:40:04  34  ) AS
15:40:04  35  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
15:40:04  36  var_is_for_gc NUMBER;
15:40:04  37  BEGIN
15:40:04  38  	SELECT
15:40:04  39  	  count(1) into var_is_for_gc
15:40:04  40  	FROM GIFT_CERTIFICATE GC
15:40:04  41  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
15:40:04  42  
15:40:04  43  	IF var_is_for_gc > 0 THEN
15:40:04  44  	  out_result := 1;
15:40:04  45  	ELSE
15:40:04  46  	  out_result := 0;
15:40:04  47  	END IF;
15:40:04  48  END IS_INVOICE_FOR_GC;
15:40:04  49  
15:40:04  50  PROCEDURE CREATE_INVOICE(
15:40:04  51  /*
15:40:04  52  Throws exceptions:
15:40:04  53  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04  54  */
15:40:04  55  	  in_invoice_status IN NUMBER,
15:40:04  56  	  in_created_by     IN VARCHAR2,
15:40:04  57  	  in_tax_exempt_id  IN VARCHAR2,
15:40:04  58  	  out_invoice_id    OUT NUMBER
15:40:04  59  ) AS
15:40:04  60  -- VARIABLES
15:40:04  61  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
15:40:04  62  var_new_invoice_id NUMBER;
15:40:04  63  -- EXCEPTIONS
15:40:04  64  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04  65  BEGIN
15:40:04  66  
15:40:04  67  	PROCS_INVOICE_CRU_V23.CREATE_INVOICE(
15:40:04  68  	  out_invoice_id		 => var_new_invoice_id,
15:40:04  69  	  in_created_by 		 => in_created_by,
15:40:04  70  	  in_invoice_status_id		 => in_invoice_status,
15:40:04  71  	  in_tax_exempt_id		 => in_tax_exempt_id
15:40:04  72  	);
15:40:04  73  
15:40:04  74  	out_invoice_id := var_new_invoice_id;
15:40:04  75  
15:40:04  76  EXCEPTION
15:40:04  77  WHEN OTHERS THEN
15:40:04  78  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04  80  END CREATE_INVOICE;
15:40:04  81  
15:40:04  82  /************************************************************/
15:40:04  83  
15:40:04  84  PROCEDURE GET_PENDING_INVOICES (
15:40:04  85  /*
15:40:04  86  Throws exceptions:
15:40:04  87  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04  88  */
15:40:04  89  	out_result_set	     OUT SYS_REFCURSOR,
15:40:04  90  	in_row_number	     IN NUMBER DEFAULT NULL
15:40:04  91  ) AS
15:40:04  92  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
15:40:04  93  -- COMSTANTS
15:40:04  94  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
15:40:04  95  -- VARIABLES
15:40:04  96  var_row_number NUMBER;
15:40:04  97  BEGIN
15:40:04  98  
15:40:04  99  	IF in_row_number IS NULL THEN
15:40:04 100  	  var_row_number := DEFAULT_ROW_NUMBER;
15:40:04 101  	ELSE
15:40:04 102  	  var_row_number := in_row_number;
15:40:04 103  	END IF;
15:40:04 104  
15:40:04 105  	-- Invoices with one or more payments(charges) with transaction status PENDING
15:40:04 106  	OPEN out_result_set FOR
15:40:04 107  SELECT * FROM
15:40:04 108  (
15:40:04 109  	SELECT
15:40:04 110  	  INVOICE.ID
15:40:04 111  	FROM
15:40:04 112  	  CHARGE
15:40:04 113  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
15:40:04 114  	WHERE
15:40:04 115  	  EXISTS(
15:40:04 116  	    SELECT NULL
15:40:04 117  	    FROM TRANSACTION
15:40:04 118  	    WHERE
15:40:04 119  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING
15:40:04 120  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
15:40:04 121  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V23.TRUE
15:40:04 122  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
15:40:04 123  	  )
15:40:04 124  	  AND
15:40:04 125  	  NOT EXISTS(
15:40:04 126  	    SELECT NULL
15:40:04 127  	    FROM PROCESS_RETRY_THROTTLE
15:40:04 128  	    WHERE PROCESS_NAME = SPROC_NAME
15:40:04 129  	      AND GENERIC_ID = INVOICE.ID
15:40:04 130  	  )
15:40:04 131  	  AND ROWNUM <= var_row_number*10
15:40:04 132  	  ORDER BY dbms_random.value
15:40:04 133  ) WHERE
15:40:04 134  	  ROWNUM <= var_row_number;
15:40:04 135  
15:40:04 136  EXCEPTION
15:40:04 137  WHEN OTHERS THEN
15:40:04 138  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 139  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 140  END GET_PENDING_INVOICES;
15:40:04 141  
15:40:04 142  /************************************************************/
15:40:04 143  
15:40:04 144  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
15:40:04 145  	in_invoice_id IN  NUMBER
15:40:04 146  ) RETURN NUMBER AS
15:40:04 147  var_amount NUMBER;
15:40:04 148  BEGIN
15:40:04 149  
15:40:04 150  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
15:40:04 151  	RETURN var_amount;
15:40:04 152  
15:40:04 153  END;
15:40:04 154  
15:40:04 155  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:40:04 156  /*
15:40:04 157  Throws exceptions:
15:40:04 158  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 159  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 160  */
15:40:04 161  	in_invoice_id IN  NUMBER,
15:40:04 162  	out_amount    OUT NUMBER
15:40:04 163  ) AS
15:40:04 164  -- VARIABLES
15:40:04 165  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
15:40:04 166  temp_invoice_id	     NUMBER;
15:40:04 167  var_total_amount	     NUMBER(10,6);
15:40:04 168  var_final_amount	     NUMBER(10,2);
15:40:04 169  var_line_item_amount   NUMBER(10,6);
15:40:04 170  
15:40:04 171  var_line_items_set     SYS_REFCURSOR;
15:40:04 172  var_line_item_id	     NUMBER;
15:40:04 173  var_line_item_quantity NUMBER;
15:40:04 174  var_line_item_price    NUMBER (10,2);
15:40:04 175  
15:40:04 176  var_discount_fixed_amount NUMBER (10,2);
15:40:04 177  var_discount_percent_amount NUMBER (10,2);
15:40:04 178  
15:40:04 179  -- EXCEPTIONS
15:40:04 180  BAD_INVOICE_ID		    EXCEPTION;
15:40:04 181  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
15:40:04 182  EXCEPTION_MESSAGE VARCHAR2(1024);
15:40:04 183  BEGIN
15:40:04 184  
15:40:04 185  	var_total_amount := 0;
15:40:04 186  
15:40:04 187  	-- Check that given invoice exists
15:40:04 188  	BEGIN
15:40:04 189  	  SELECT
15:40:04 190  	    INVOICE.ID into temp_invoice_id
15:40:04 191  	  FROM
15:40:04 192  	    INVOICE
15:40:04 193  	  WHERE
15:40:04 194  	    INVOICE.ID = in_invoice_id
15:40:04 195  	    AND ROWNUM <= 1;
15:40:04 196  	  EXCEPTION
15:40:04 197  	    WHEN NO_DATA_FOUND THEN
15:40:04 198  	      RAISE BAD_INVOICE_ID;
15:40:04 199  	END;
15:40:04 200  
15:40:04 201  	-- Calculate amount for each line item in invoice
15:40:04 202  	FOR f_line_item IN (
15:40:04 203  	  SELECT
15:40:04 204  	    LINE_ITEM.ID
15:40:04 205  	  FROM
15:40:04 206  	    LINE_ITEM
15:40:04 207  	  WHERE
15:40:04 208  	    LINE_ITEM.INVOICE_ID = in_invoice_id
15:40:04 209  	)
15:40:04 210  	LOOP
15:40:04 211  	  BEGIN
15:40:04 212  	    PROCS_LINE_ITEMS_V23.CALCULATE_LINE_ITEM_AMOUNT(
15:40:04 213  	      in_line_item_id => f_line_item.ID,
15:40:04 214  	      out_amount      => var_line_item_amount
15:40:04 215  	    );
15:40:04 216  	    var_total_amount := var_total_amount + var_line_item_amount;
15:40:04 217  	    EXCEPTION
15:40:04 218  	      WHEN OTHERS THEN
15:40:04 219  		EXCEPTION_MESSAGE := SQLERRM;
15:40:04 220  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
15:40:04 221  	  END;
15:40:04 222  	END LOOP;
15:40:04 223  	var_final_amount := var_total_amount;
15:40:04 224  	out_amount := var_final_amount;
15:40:04 225  
15:40:04 226  EXCEPTION
15:40:04 227  WHEN BAD_INVOICE_ID THEN
15:40:04 228  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 229  	  SPROC_NAME, 'No such invoice');
15:40:04 230  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
15:40:04 231  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 232  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
15:40:04 233  WHEN OTHERS THEN
15:40:04 234  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 235  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 236  END;
15:40:04 237  
15:40:04 238  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
15:40:04 239  /*
15:40:04 240  Throws exceptions:
15:40:04 241  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 242  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 243  */
15:40:04 244  	in_invoice_id  IN  NUMBER,
15:40:04 245  	out_account_id OUT NUMBER
15:40:04 246  ) AS
15:40:04 247  -- VARIABLES
15:40:04 248  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
15:40:04 249  temp_gc_account_id NUMBER;
15:40:04 250  temp_ss_account_id NUMBER;
15:40:04 251  temp_invoice_id	 NUMBER;
15:40:04 252  -- EXCEPTIONS
15:40:04 253  BAD_INVOICE_ID	   EXCEPTION;
15:40:04 254  CAN_NOT_FIND_ACCOUNT EXCEPTION;
15:40:04 255  BEGIN
15:40:04 256  
15:40:04 257  	-- Check that given invoice exists
15:40:04 258  	BEGIN
15:40:04 259  	  SELECT
15:40:04 260  	    INVOICE.ID into temp_invoice_id
15:40:04 261  	  FROM
15:40:04 262  	    INVOICE
15:40:04 263  	  WHERE
15:40:04 264  	    INVOICE.ID = in_invoice_id;
15:40:04 265  	  EXCEPTION
15:40:04 266  	    WHEN NO_DATA_FOUND THEN
15:40:04 267  	      RAISE BAD_INVOICE_ID;
15:40:04 268  	END;
15:40:04 269  
15:40:04 270  	-- Try to find gift certificate with given invoice
15:40:04 271  	BEGIN
15:40:04 272  	  SELECT
15:40:04 273  	    ACCOUNT.GROUP_ID into temp_gc_account_id
15:40:04 274  	  FROM
15:40:04 275  	    GIFT_CERTIFICATE
15:40:04 276  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
15:40:04 277  	  WHERE
15:40:04 278  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
15:40:04 279  	    AND ROWNUM <= 1;
15:40:04 280  	  EXCEPTION
15:40:04 281  	    WHEN NO_DATA_FOUND THEN
15:40:04 282  	      temp_gc_account_id := NULL;
15:40:04 283  	END;
15:40:04 284  
15:40:04 285  	-- check subscriptions for given invoice
15:40:04 286  	IF temp_gc_account_id IS NOT NULL THEN
15:40:04 287  	  out_account_id := temp_gc_account_id;
15:40:04 288  	ELSE
15:40:04 289  	  BEGIN
15:40:04 290  	    SELECT
15:40:04 291  	      ACCOUNT.GROUP_ID into temp_ss_account_id
15:40:04 292  	    FROM
15:40:04 293  	      LICENSE
15:40:04 294  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 295  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:40:04 296  	    WHERE
15:40:04 297  	      LICENSE.INVOICE_ID = in_invoice_id
15:40:04 298  	      AND ROWNUM <= 1;
15:40:04 299  	    EXCEPTION
15:40:04 300  	      WHEN NO_DATA_FOUND THEN
15:40:04 301  		temp_ss_account_id := NULL;
15:40:04 302  	  END;
15:40:04 303  	  IF temp_ss_account_id IS NULL THEN
15:40:04 304  	    RAISE CAN_NOT_FIND_ACCOUNT;
15:40:04 305  	  ELSE
15:40:04 306  	    out_account_id := temp_ss_account_id;
15:40:04 307  	  END IF;
15:40:04 308  	END IF;
15:40:04 309  
15:40:04 310  EXCEPTION
15:40:04 311  WHEN BAD_INVOICE_ID THEN
15:40:04 312  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 313  	  SPROC_NAME, 'No such invoice');
15:40:04 314  WHEN CAN_NOT_FIND_ACCOUNT THEN
15:40:04 315  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 316  	  SPROC_NAME, 'Could not find account by given invoice id');
15:40:04 317  WHEN OTHERS THEN
15:40:04 318  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 320  END GET_ACCOUNT_BY_INVOICE_ID;
15:40:04 321  
15:40:04 322  /*****************************************************************/
15:40:04 323  
15:40:04 324  PROCEDURE GET_INVOICE_DETAILS (
15:40:04 325  /*
15:40:04 326  Throws exceptions:
15:40:04 327  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 328  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 329  */
15:40:04 330  	in_invoice_id	   IN  NUMBER,
15:40:04 331  	out_group_id	   OUT NUMBER,
15:40:04 332  	out_status_id	   OUT NUMBER,
15:40:04 333  	out_line_items_set OUT SYS_REFCURSOR,
15:40:04 334  	out_pp_charges_set OUT SYS_REFCURSOR,
15:40:04 335  	out_cc_charges_set OUT SYS_REFCURSOR,
15:40:04 336  	out_gc_charges_set OUT SYS_REFCURSOR
15:40:04 337  ) AS
15:40:04 338  -- VARIABLES
15:40:04 339  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
15:40:04 340  
15:40:04 341  -- EXCEPTIONS
15:40:04 342  BAD_INVOICE_ID	     EXCEPTION;
15:40:04 343  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
15:40:04 344  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 345  BEGIN
15:40:04 346  
15:40:04 347  	-- get invoice status
15:40:04 348  	BEGIN
15:40:04 349  	  SELECT
15:40:04 350  	    INVOICE.INVOICE_STATUS_ID into out_status_id
15:40:04 351  	  FROM
15:40:04 352  	    INVOICE
15:40:04 353  	  WHERE
15:40:04 354  	    INVOICE.ID = in_invoice_id;
15:40:04 355  	  EXCEPTION
15:40:04 356  	    WHEN NO_DATA_FOUND THEN
15:40:04 357  	      RAISE BAD_INVOICE_ID;
15:40:04 358  	END;
15:40:04 359  
15:40:04 360  	-- get group id
15:40:04 361  	BEGIN
15:40:04 362  	  PROCS_INVOICE_V23.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
15:40:04 363  	  EXCEPTION
15:40:04 364  	    WHEN OTHERS THEN
15:40:04 365  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 366  	      RAISE CAN_NOT_FIND_ACCOUNT;
15:40:04 367  	END;
15:40:04 368  
15:40:04 369  	-- get all line items for given invoice
15:40:04 370  	OPEN out_line_items_set FOR
15:40:04 371  	SELECT
15:40:04 372  	  LINE_ITEM.AMOUNT,
15:40:04 373  	  LINE_ITEM.ID,
15:40:04 374  	  LINE_ITEM.CREATED_BY,
15:40:04 375  	  LINE_ITEM.CREATE_DATE,
15:40:04 376  	  LINE_ITEM.DISCOUNT_AMOUNT,
15:40:04 377  	  LINE_ITEM.TAXES_AMOUNT,
15:40:04 378  	  LINE_ITEM.PRODUCT_OFFER_ID,
15:40:04 379  	  LINE_ITEM.INVOICE_ID
15:40:04 380  	FROM
15:40:04 381  	  LINE_ITEM
15:40:04 382  	WHERE
15:40:04 383  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
15:40:04 384  
15:40:04 385  	-- get all pp charges for given invoice
15:40:04 386  	OPEN out_pp_charges_set FOR
15:40:04 387  	SELECT
15:40:04 388  	  CHARGE.ID as "CHARGE_ID",
15:40:04 389  	  CHARGE_AMOUNT,
15:40:04 390  	  CHARGE.INSTRUMENT_ID,
15:40:04 391  	  CHARGE.CHARGE_STATUS_ID
15:40:04 392  	FROM
15:40:04 393  	  CHARGE
15:40:04 394  	WHERE
15:40:04 395  	  CHARGE.INVOICE_ID = in_invoice_id
15:40:04 396  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL;
15:40:04 397  
15:40:04 398  	-- get all credir cards for given invoice
15:40:04 399  	OPEN out_cc_charges_set FOR
15:40:04 400  	SELECT
15:40:04 401  	  CHARGE.ID as "CHARGE_ID",
15:40:04 402  	  CHARGE.CHARGE_AMOUNT,
15:40:04 403  	  CHARGE.INSTRUMENT_ID,
15:40:04 404  	  CHARGE.CHARGE_STATUS_ID
15:40:04 405  	FROM
15:40:04 406  	  CHARGE
15:40:04 407  	WHERE
15:40:04 408  	  CHARGE.INVOICE_ID = in_invoice_id
15:40:04 409  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD;
15:40:04 410  
15:40:04 411  	OPEN out_gc_charges_set FOR
15:40:04 412  	SELECT
15:40:04 413  	  CHARGE.ID as "CHARGE_ID",
15:40:04 414  	  CHARGE.CHARGE_AMOUNT,
15:40:04 415  	  CHARGE.INSTRUMENT_ID,
15:40:04 416  	  CHARGE.CHARGE_STATUS_ID
15:40:04 417  	FROM
15:40:04 418  	  CHARGE
15:40:04 419  	WHERE
15:40:04 420  	  CHARGE.INVOICE_ID = in_invoice_id
15:40:04 421  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_GIFT_CERTIFICATE;
15:40:04 422  
15:40:04 423  EXCEPTION
15:40:04 424  WHEN BAD_INVOICE_ID THEN
15:40:04 425  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 426  	  SPROC_NAME, 'No such invoice');
15:40:04 427  WHEN CAN_NOT_FIND_ACCOUNT THEN
15:40:04 428  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 429  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
15:40:04 430  WHEN OTHERS THEN
15:40:04 431  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 432  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 433  END GET_INVOICE_DETAILS;
15:40:04 434  
15:40:04 435  /******************************************************/
15:40:04 436  -- norlov: #38796
15:40:04 437  PROCEDURE GET_TRANSACTION_INVOICE (
15:40:04 438  /*
15:40:04 439  Throws exceptions:
15:40:04 440  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 441  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 442  */
15:40:04 443  	in_transaction_id  IN  NUMBER,
15:40:04 444  	out_result_set	      OUT SYS_REFCURSOR
15:40:04 445  ) AS
15:40:04 446  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
15:40:04 447  -- VARIABLES
15:40:04 448  temp_transaction_id  NUMBER;
15:40:04 449  var_invoice_id	   NUMBER;
15:40:04 450  var_subscription_id  NUMBER;
15:40:04 451  var_offer_chain_id   NUMBER;
15:40:04 452  var_offer_chain_name VARCHAR2(255);
15:40:04 453  -- EXCEPTIONS
15:40:04 454  BAD_TRANSACTION_ID     EXCEPTION;
15:40:04 455  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 456  BEGIN
15:40:04 457   -- check if there is the transaction
15:40:04 458  	BEGIN
15:40:04 459  	  SELECT
15:40:04 460  	    TRANSACTION.ID into temp_transaction_id
15:40:04 461  	  FROM
15:40:04 462  	    TRANSACTION
15:40:04 463  	  WHERE
15:40:04 464  	    TRANSACTION.ID = in_transaction_id;
15:40:04 465  	  EXCEPTION
15:40:04 466  	    WHEN NO_DATA_FOUND THEN
15:40:04 467  	      RAISE BAD_TRANSACTION_ID;
15:40:04 468  	END;
15:40:04 469  
15:40:04 470  	-- Get invoice id
15:40:04 471  	SELECT DISTINCT
15:40:04 472  	  CHARGE.INVOICE_ID into var_invoice_id
15:40:04 473  	FROM
15:40:04 474  	  CHARGE
15:40:04 475  	WHERE
15:40:04 476  	  CHARGE.TRANSACTION_ID = in_transaction_id;
15:40:04 477  
15:40:04 478  	-- Get subscription id if exists
15:40:04 479  	BEGIN
15:40:04 480  	  SELECT DISTINCT
15:40:04 481  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
15:40:04 482  	  FROM
15:40:04 483  	    LICENSE
15:40:04 484  	  WHERE
15:40:04 485  	    LICENSE.INVOICE_ID = var_invoice_id;
15:40:04 486  	  EXCEPTION
15:40:04 487  	    WHEN NO_DATA_FOUND THEN
15:40:04 488  	      var_subscription_id := NULL;
15:40:04 489  	END;
15:40:04 490  
15:40:04 491  	IF var_subscription_id IS NOT NULL THEN
15:40:04 492  	  -- Fetch offer chain from subscription
15:40:04 493  	  SELECT
15:40:04 494  	    OFFER_CHAIN.ID,
15:40:04 495  	    OFFER_CHAIN.NAME
15:40:04 496  	    into
15:40:04 497  	    var_offer_chain_id,
15:40:04 498  	    var_offer_chain_name
15:40:04 499  	  FROM
15:40:04 500  	    OFFER_CHAIN
15:40:04 501  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:04 502  	  WHERE
15:40:04 503  	    SUBSCRIPTION.ID = var_subscription_id;
15:40:04 504  	ELSE
15:40:04 505  	  -- Fetch offer chain from GC
15:40:04 506  	  SELECT
15:40:04 507  	    OFFER_CHAIN.ID,
15:40:04 508  	    OFFER_CHAIN.NAME
15:40:04 509  	    into
15:40:04 510  	    var_offer_chain_id,
15:40:04 511  	    var_offer_chain_name
15:40:04 512  	  FROM
15:40:04 513  	    OFFER_CHAIN
15:40:04 514  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:04 515  	  WHERE
15:40:04 516  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
15:40:04 517  	END IF;
15:40:04 518  
15:40:04 519  	OPEN out_result_set FOR
15:40:04 520  	SELECT DISTINCT
15:40:04 521  	  var_invoice_id       AS "INVOICE_ID",
15:40:04 522  	  var_subscription_id  AS "SUBSCRIPTION_ID",
15:40:04 523  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
15:40:04 524  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
15:40:04 525  	FROM
15:40:04 526  	  DUAL;
15:40:04 527  
15:40:04 528  EXCEPTION
15:40:04 529  WHEN BAD_TRANSACTION_ID THEN
15:40:04 530  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 531  	  SPROC_NAME, 'No such transaction');
15:40:04 532  WHEN OTHERS THEN
15:40:04 533  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 534  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 535  END GET_TRANSACTION_INVOICE;
15:40:04 536  
15:40:04 537  /******************************************************/
15:40:04 538  
15:40:04 539  PROCEDURE UPDATE_INVOICE_STATUS (
15:40:04 540  /*
15:40:04 541  Throws exceptions:
15:40:04 542  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 543  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 544  */
15:40:04 545  	in_invoice_id		       IN NUMBER,
15:40:04 546  	in_invoice_status_id	       IN NUMBER,
15:40:04 547  	in_updated_by		       IN VARCHAR2
15:40:04 548  ) AS
15:40:04 549  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
15:40:04 550  -- VARIABLES
15:40:04 551  temp_invoice_id NUMBER;
15:40:04 552  -- EXCEPTIONS
15:40:04 553  BAD_INVOICE_ID		      EXCEPTION;
15:40:04 554  BAD_INVOICE_STATUS_ID	      EXCEPTION;
15:40:04 555  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
15:40:04 556  BEGIN
15:40:04 557  
15:40:04 558  	-- Check if invoice exists
15:40:04 559  	BEGIN
15:40:04 560  	  SELECT
15:40:04 561  	    INVOICE.ID into temp_invoice_id
15:40:04 562  	  FROM
15:40:04 563  	    INVOICE
15:40:04 564  	  WHERE
15:40:04 565  	    INVOICE.ID = in_invoice_id;
15:40:04 566  	  EXCEPTION
15:40:04 567  	    WHEN NO_DATA_FOUND THEN
15:40:04 568  	      RAISE BAD_INVOICE_ID;
15:40:04 569  	END;
15:40:04 570  
15:40:04 571  	IF in_invoice_status_id != GLOBAL_STATUSES_V23.INVOICE_OPEN
15:40:04 572  	  AND in_invoice_status_id != GLOBAL_STATUSES_V23.INVOICE_CLOSED THEN
15:40:04 573  	  RAISE BAD_INVOICE_STATUS_ID;
15:40:04 574  	END IF;
15:40:04 575  
15:40:04 576  	PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
15:40:04 577  	  in_invoice_id 		 => in_invoice_id,
15:40:04 578  	  in_invoice_status_id		 => in_invoice_status_id,
15:40:04 579  	  in_updated_by 		 => in_updated_by
15:40:04 580  	);
15:40:04 581  
15:40:04 582  EXCEPTION
15:40:04 583  WHEN BAD_INVOICE_STATUS_ID THEN
15:40:04 584  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 585  	  SPROC_NAME, 'Bad invoice status id');
15:40:04 586  WHEN BAD_INVOICE_ID THEN
15:40:04 587  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 588  	  SPROC_NAME, 'No such invoice');
15:40:04 589  WHEN OTHERS THEN
15:40:04 590  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 591  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 592  END UPDATE_INVOICE_STATUS;
15:40:04 593  
15:40:04 594  /****************************************************************/
15:40:04 595  
15:40:04 596  FUNCTION IS_INVOICE_PAYING_STARTED (
15:40:04 597  /*
15:40:04 598  Throws exceptions:
15:40:04 599  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:04 600  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 601  */
15:40:04 602  	in_invoice_id IN NUMBER
15:40:04 603  ) RETURN NUMBER AS
15:40:04 604  -- VARIABLES
15:40:04 605  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
15:40:04 606  temp_invoice_id		 NUMBER;
15:40:04 607  var_processed_charges_num  NUMBER;
15:40:04 608  var_processed_transac_num  NUMBER;
15:40:04 609  var_success_attempts_num	 NUMBER;
15:40:04 610  var_is_gc 		 NUMBER;
15:40:04 611  -- EXCEPTIONS
15:40:04 612  BAD_INVOICE_ID EXCEPTION;
15:40:04 613  BEGIN
15:40:04 614  
15:40:04 615  	-- Check that invoice exists
15:40:04 616  	BEGIN
15:40:04 617  	  SELECT
15:40:04 618  	    INVOICE.ID into temp_invoice_id
15:40:04 619  	  FROM
15:40:04 620  	    INVOICE
15:40:04 621  	  WHERE
15:40:04 622  	    INVOICE.ID = in_invoice_id;
15:40:04 623  	  EXCEPTION
15:40:04 624  	   WHEN NO_DATA_FOUND THEN
15:40:04 625  	     RAISE BAD_INVOICE_ID;
15:40:04 626  	END;
15:40:04 627  
15:40:04 628  	-- Check that there are tansaction attempts with status success
15:40:04 629  	SELECT
15:40:04 630  	  COUNT(1) into var_success_attempts_num
15:40:04 631  	FROM
15:40:04 632  	  TRANSACTION_ATTEMPT ta,
15:40:04 633  	  TRANSACTION t,
15:40:04 634  	  CHARGE c
15:40:04 635  	WHERE
15:40:04 636  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS and
15:40:04 637  	  ta.transaction_id = t.id and
15:40:04 638  	  c.transaction_id = t.id and
15:40:04 639  	  t.is_refund = GLOBAL_CONSTANTS_V23.FALSE and
15:40:04 640  	  c.invoice_id = in_invoice_id
15:40:04 641  	;
15:40:04 642  
15:40:04 643  	IF var_success_attempts_num > 0 THEN
15:40:04 644  	  RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 645  	END IF;
15:40:04 646  
15:40:04 647  	SELECT
15:40:04 648  	  COUNT(1) into var_success_attempts_num
15:40:04 649  	FROM
15:40:04 650  	  TRANSACTION t,
15:40:04 651  	  CHARGE c
15:40:04 652  	WHERE
15:40:04 653  	  c.transaction_id = t.id and
15:40:04 654  	  t.is_refund = GLOBAL_CONSTANTS_V23.FALSE and
15:40:04 655  	  t.is_settled = GLOBAL_CONSTANTS_V23.TRUE and
15:40:04 656  	  c.invoice_id = in_invoice_id
15:40:04 657  	;
15:40:04 658  
15:40:04 659  	IF var_success_attempts_num > 0 THEN
15:40:04 660  	  RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 661  	END IF;
15:40:04 662  
15:40:04 663  	SELECT
15:40:04 664  	  COUNT(1) into var_is_gc
15:40:04 665  	FROM
15:40:04 666  	  gift_certificate gc
15:40:04 667  	WHERE
15:40:04 668  	  gc.finalized_invoice_id = in_invoice_id
15:40:04 669  	;
15:40:04 670  
15:40:04 671  	IF var_is_gc > 0 THEN
15:40:04 672  	  RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 673  	END IF;
15:40:04 674  
15:40:04 675  	RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 676  
15:40:04 677  EXCEPTION
15:40:04 678  WHEN BAD_INVOICE_ID THEN
15:40:04 679  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 680  	  SPROC_NAME, 'No such invoice');
15:40:04 681  WHEN OTHERS THEN
15:40:04 682  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 683  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 684  END IS_INVOICE_PAYING_STARTED;
15:40:04 685  
15:40:04 686  /******************************************************************************/
15:40:04 687  
15:40:04 688  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
15:40:04 689  	in_invoice_id  IN NUMBER,
15:40:04 690  	out_is_started OUT NUMBER
15:40:04 691  ) AS
15:40:04 692  BEGIN
15:40:04 693  	-- Just a wrapper
15:40:04 694  	out_is_started := PROCS_INVOICE_V23.IS_INVOICE_PAYING_STARTED(in_invoice_id);
15:40:04 695  END P_IS_INVOICE_PAYING_STARTED;
15:40:04 696  
15:40:04 697  /******************************************************************************/
15:40:04 698  
15:40:04 699  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
15:40:04 700  	in_invoice_id	      IN NUMBER,
15:40:04 701  	in_chargeback_date    IN DATE,
15:40:04 702  	out_chargeback_amount OUT NUMBER
15:40:04 703  ) AS
15:40:04 704  -- VARIABLES
15:40:04 705  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
15:40:04 706  var_chargeback_date    DATE;
15:40:04 707  temp_invoice_id	     NUMBER;
15:40:04 708  var_licenses_number    NUMBER;
15:40:04 709  var_invoice_start_date DATE;
15:40:04 710  var_invoice_end_date   DATE;
15:40:04 711  var_offer_id	     NUMBER;
15:40:04 712  var_offer_days_interval NUMBER;
15:40:04 713  var_license_days_used  NUMBER;
15:40:04 714  var_invoice_amount     NUMBER(10,2);
15:40:04 715  var_offer_chain_id     NUMBER;
15:40:04 716  var_offer_chain_meta_data_val VARCHAR2(1024);
15:40:04 717  var_offer_chain_full_refund   NUMBER;
15:40:04 718  var_offer_chain_prorated_ref  NUMBER;
15:40:04 719  var_chargeback_calculated NUMBER;
15:40:04 720  var_max_invoice_refund	NUMBER;
15:40:04 721  -- EXCEPTIONS
15:40:04 722  BAD_INVOICE_ID		  EXCEPTION;
15:40:04 723  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
15:40:04 724  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
15:40:04 725  BEGIN
15:40:04 726  
15:40:04 727  	IF in_chargeback_date IS NULL THEN
15:40:04 728  	  var_chargeback_date := PROCS_COMMON_V23.NORMALIZE_DATE(current_date);
15:40:04 729  	ELSE
15:40:04 730  	  var_chargeback_date := PROCS_COMMON_V23.NORMALIZE_DATE(in_chargeback_date);
15:40:04 731  	END IF;
15:40:04 732  
15:40:04 733  	-- Check that invoice exists
15:40:04 734  	BEGIN
15:40:04 735  	  SELECT
15:40:04 736  	    INVOICE.ID into temp_invoice_id
15:40:04 737  	  FROM
15:40:04 738  	    INVOICE
15:40:04 739  	  WHERE
15:40:04 740  	    INVOICE.ID = in_invoice_id;
15:40:04 741  	  EXCEPTION
15:40:04 742  	    WHEN NO_DATA_FOUND THEN
15:40:04 743  	      RAISE BAD_INVOICE_ID;
15:40:04 744  	END;
15:40:04 745  
15:40:04 746  	-- Check that invoice has at least one license
15:40:04 747  	SELECT
15:40:04 748  	  COUNT(*) into var_licenses_number
15:40:04 749  	FROM
15:40:04 750  	  LICENSE
15:40:04 751  	WHERE
15:40:04 752  	  LICENSE.INVOICE_ID = in_invoice_id;
15:40:04 753  
15:40:04 754  	IF var_licenses_number = 0 THEN
15:40:04 755  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
15:40:04 756  	END IF;
15:40:04 757  
15:40:04 758  	SELECT
15:40:04 759  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
15:40:04 760  	FROM
15:40:04 761  	  LICENSE
15:40:04 762  	WHERE
15:40:04 763  	  LICENSE.INVOICE_ID = in_invoice_id;
15:40:04 764  
15:40:04 765  	var_invoice_start_date := PROCS_COMMON_V23.NORMALIZE_DATE(var_invoice_start_date);
15:40:04 766  
15:40:04 767  	SELECT DISTINCT
15:40:04 768  	  LICENSE.OFFER_ID into var_offer_id
15:40:04 769  	FROM
15:40:04 770  	  LICENSE
15:40:04 771  	WHERE
15:40:04 772  	  LICENSE.INVOICE_ID = in_invoice_id;
15:40:04 773  
15:40:04 774  	SELECT
15:40:04 775  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
15:40:04 776  	FROM
15:40:04 777  	  LICENSE
15:40:04 778  	WHERE
15:40:04 779  	  LICENSE.INVOICE_ID = in_invoice_id;
15:40:04 780  
15:40:04 781  	-- All licenses for given invoice should point into the same offer
15:40:04 782  
15:40:04 783  	PROCS_OFFER_CHAIN_V23.GET_OFFER_LENGTH_IN_DAYS(
15:40:04 784  	  in_offer_id	=> var_offer_id,
15:40:04 785  	  in_start_date => var_invoice_start_date,
15:40:04 786  	  out_days	=> var_offer_days_interval
15:40:04 787  	);
15:40:04 788  
15:40:04 789  	IF var_offer_days_interval = 0 THEN
15:40:04 790  	  RAISE OFFER_LENGTH_IS_ZERO;
15:40:04 791  	END IF;
15:40:04 792  
15:40:04 793  	PROCS_INVOICE_V23.GET_INVOICE_DAYS_USED_NUMBER(
15:40:04 794  	  in_invoice_id      => in_invoice_id,
15:40:04 795  	  in_chargeback_date => var_chargeback_date,
15:40:04 796  	  out_days_num	     => var_license_days_used
15:40:04 797  	);
15:40:04 798  
15:40:04 799  	PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT(
15:40:04 800  	  in_invoice_id => in_invoice_id,
15:40:04 801  	  out_amount	=> var_invoice_amount
15:40:04 802  	);
15:40:04 803  
15:40:04 804  	-- 39437
15:40:04 805  	-- Get offer chain id by invoice id
15:40:04 806  	SELECT DISTINCT
15:40:04 807  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
15:40:04 808  	FROM
15:40:04 809  	  SUBSCRIPTION
15:40:04 810  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 811  	WHERE
15:40:04 812  	  LICENSE.INVOICE_ID = in_invoice_id;
15:40:04 813  
15:40:04 814  	-- Get offer chain's meta data full amount value
15:40:04 815  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MD_VALUE(
15:40:04 816  	  in_offer_chain_id => var_offer_chain_id,
15:40:04 817  	  in_meta_data_name => GLOBAL_CONSTANTS_V23.OFFER_CHAIN_FULL_REFUND,
15:40:04 818  	  out_value	    => var_offer_chain_meta_data_val
15:40:04 819  	);
15:40:04 820  	IF var_offer_chain_meta_data_val IS NULL THEN
15:40:04 821  	  var_offer_chain_full_refund := NULL;
15:40:04 822  	ELSE
15:40:04 823  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
15:40:04 824  	END IF;
15:40:04 825  
15:40:04 826  	-- Get offer chain's meta data prorated amount value
15:40:04 827  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MD_VALUE(
15:40:04 828  	  in_offer_chain_id => var_offer_chain_id,
15:40:04 829  	  in_meta_data_name => GLOBAL_CONSTANTS_V23.OFFER_CHAIN_PRORATED_REFUND,
15:40:04 830  	  out_value	    => var_offer_chain_meta_data_val
15:40:04 831  	);
15:40:04 832  	IF var_offer_chain_meta_data_val IS NULL THEN
15:40:04 833  	  var_offer_chain_prorated_ref := NULL;
15:40:04 834  	ELSE
15:40:04 835  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
15:40:04 836  	END IF;
15:40:04 837  
15:40:04 838  	var_chargeback_calculated := GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 839  
15:40:04 840  	IF var_offer_chain_full_refund IS NOT NULL
15:40:04 841  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:04 842  	  IF var_license_days_used < var_offer_chain_full_refund THEN
15:40:04 843  	    out_chargeback_amount := var_invoice_amount;
15:40:04 844  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 845  	  END IF;
15:40:04 846  	END IF;
15:40:04 847  
15:40:04 848  	IF var_offer_chain_prorated_ref IS NOT NULL
15:40:04 849  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:04 850  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
15:40:04 851  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
15:40:04 852  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 853  	  END IF;
15:40:04 854  	END IF;
15:40:04 855  
15:40:04 856  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V23.TRUE THEN
15:40:04 857  	  PROCS_INVOICE_V23.GET_MAX_REFUND(
15:40:04 858  	    in_invoice_id => in_invoice_id,
15:40:04 859  	    out_amount	  => var_max_invoice_refund
15:40:04 860  	  );
15:40:04 861  	  IF var_max_invoice_refund < out_chargeback_amount THEN
15:40:04 862  	    out_chargeback_amount := var_max_invoice_refund;
15:40:04 863  	  END IF;
15:40:04 864  	END IF;
15:40:04 865  
15:40:04 866  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:04 867  	  out_chargeback_amount := 0;
15:40:04 868  	END IF;
15:40:04 869  
15:40:04 870  EXCEPTION
15:40:04 871  WHEN BAD_INVOICE_ID THEN
15:40:04 872  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 873  	  SPROC_NAME, 'No such invoice');
15:40:04 874  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
15:40:04 875  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 876  	  SPROC_NAME, 'No licenses found');
15:40:04 877  WHEN OFFER_LENGTH_IS_ZERO THEN
15:40:04 878  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 879  	  SPROC_NAME, 'Offer length is zero');
15:40:04 880  WHEN OTHERS THEN
15:40:04 881  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 883  END CALCULATE_INVOICE_CHARGEBACK;
15:40:04 884  
15:40:04 885  /********************************************************************/
15:40:04 886  
15:40:04 887  PROCEDURE APPLY_REFUND (
15:40:04 888  	in_invoice_id	     IN NUMBER,
15:40:04 889  	in_chargeback_amount IN NUMBER,
15:40:04 890  	in_created_by	     IN VARCHAR2,
15:40:04 891  	out_charge_id	     OUT NUMBER
15:40:04 892  ) AS
15:40:04 893  -- VARIABLES
15:40:04 894  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
15:40:04 895  temp_invoice_id		 NUMBER;
15:40:04 896  var_total_charges_amount	 NUMBER(10,2);
15:40:04 897  var_charge_amount_to_apply NUMBER(10,2);
15:40:04 898  var_transaction_id	 NUMBER;
15:40:04 899  var_instrument_type_id	 NUMBER;
15:40:04 900  var_instrument_id 	 NUMBER;
15:40:04 901  var_charge_id		 NUMBER;
15:40:04 902  -- EXCEPTIONS
15:40:04 903  BAD_INVOICE_ID		 EXCEPTION;
15:40:04 904  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
15:40:04 905  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
15:40:04 906  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
15:40:04 907  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:40:04 908  BEGIN
15:40:04 909  
15:40:04 910  	BEGIN
15:40:04 911  	  SELECT
15:40:04 912  	    INVOICE.ID into temp_invoice_id
15:40:04 913  	  FROM
15:40:04 914  	    INVOICE
15:40:04 915  	  WHERE
15:40:04 916  	    INVOICE.ID = in_invoice_id;
15:40:04 917  	  EXCEPTION
15:40:04 918  	    WHEN NO_DATA_FOUND THEN
15:40:04 919  	      RAISE BAD_INVOICE_ID;
15:40:04 920  	END;
15:40:04 921  
15:40:04 922  	SELECT
15:40:04 923  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
15:40:04 924  	FROM
15:40:04 925  	  CHARGE
15:40:04 926  	WHERE
15:40:04 927  	  CHARGE.INVOICE_ID = in_invoice_id
15:40:04 928  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
15:40:04 929  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V23.INSTRUMENT_GIFT_CERTIFICATE;
15:40:04 930  
15:40:04 931  	-- FIXME: Maybe whe should throw exception here?
15:40:04 932  	IF var_total_charges_amount < in_chargeback_amount THEN
15:40:04 933  	  var_charge_amount_to_apply := var_total_charges_amount;
15:40:04 934  	ELSE
15:40:04 935  	  var_charge_amount_to_apply := in_chargeback_amount;
15:40:04 936  	END IF;
15:40:04 937  
15:40:04 938  	BEGIN
15:40:04 939  	  PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
15:40:04 940  	    in_transaction_id	      => NULL,
15:40:04 941  	    in_status_id	      => GLOBAL_STATUSES_V23.TRANSACTION_PREPARE,
15:40:04 942  	    in_amount		      => -var_charge_amount_to_apply,
15:40:04 943  	    in_created_by	      => in_created_by,
15:40:04 944  	    in_order_id 	      => NULL,
15:40:04 945  	    in_is_refund	      => GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 946  	    in_transaction_type_code  => 'REFUND',
15:40:04 947  	    out_transaction_id	      => var_transaction_id
15:40:04 948  	  );
15:40:04 949  	  EXCEPTION
15:40:04 950  	    WHEN OTHERS THEN
15:40:04 951  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 952  	      RAISE CAN_NOT_CREATE_TRANSACTION;
15:40:04 953  	END;
15:40:04 954  
15:40:04 955  	BEGIN
15:40:04 956  	  SELECT
15:40:04 957  	    C.INSTRUMENT_TYPE_ID,
15:40:04 958  	    C.INSTRUMENT_ID
15:40:04 959  	    into
15:40:04 960  	    var_instrument_type_id,
15:40:04 961  	    var_instrument_id
15:40:04 962  	  FROM
15:40:04 963  	    CHARGE C,
15:40:04 964  	    TRANSACTION_ATTEMPT TA,
15:40:04 965  	    TRANSACTION T
15:40:04 966  	  WHERE
15:40:04 967  	    C.INVOICE_ID = in_invoice_id and
15:40:04 968  	    C.TRANSACTION_ID = T.ID and
15:40:04 969  	    TA.TRANSACTION_ID = T.ID and
15:40:04 970  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS and
15:40:04 971  	    T.IS_REFUND = GLOBAL_CONSTANTS_V23.FALSE and
15:40:04 972  	    T.TRANSACTION_AMOUNT >= 0 and
15:40:04 973  	    rownum < 2;
15:40:04 974  	EXCEPTION
15:40:04 975  	    WHEN NO_DATA_FOUND THEN
15:40:04 976  	      RAISE CAN_NOT_FIND_INSTRUMENT;
15:40:04 977  	END;
15:40:04 978  	BEGIN
15:40:04 979  	  PROCS_CHARGE_V23.CREATE_CHARGE(
15:40:04 980  	    in_invoice_id	  => in_invoice_id,
15:40:04 981  	    in_transaction_id	  => var_transaction_id,
15:40:04 982  	    in_instrument_type_id => var_instrument_type_id,
15:40:04 983  	    in_instrument_id	  => var_instrument_id,
15:40:04 984  	    in_charge_amount	  => -var_charge_amount_to_apply,
15:40:04 985  	    in_created_by	  => in_created_by,
15:40:04 986  	    in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
15:40:04 987  	    out_charge_id	  => var_charge_id
15:40:04 988  	  );
15:40:04 989  	  EXCEPTION
15:40:04 990  	    WHEN OTHERS THEN
15:40:04 991  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:04 992  	      RAISE CAN_NOT_CREATE_CHARGE;
15:40:04 993  	END;
15:40:04 994  
15:40:04 995  	out_charge_id := var_charge_id;
15:40:04 996  
15:40:04 997  EXCEPTION
15:40:04 998  WHEN BAD_INVOICE_ID THEN
15:40:04 999  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1000  	   SPROC_NAME, 'No such invoice');
15:40:04 1001  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:40:04 1002  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1003  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:40:04 1004  WHEN CAN_NOT_FIND_INSTRUMENT THEN
15:40:04 1005  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1006  	   SPROC_NAME, 'Could not find financial instrument');
15:40:04 1007  WHEN CAN_NOT_CREATE_CHARGE THEN
15:40:04 1008  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1009  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:40:04 1010  WHEN OTHERS THEN
15:40:04 1011  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1012  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1013  END APPLY_REFUND;
15:40:04 1014  
15:40:04 1015  /******************************************************************************/
15:40:04 1016  
15:40:04 1017  PROCEDURE GET_MAX_REFUND (
15:40:04 1018  	 in_invoice_id IN NUMBER,
15:40:04 1019  	 out_amount    OUT NUMBER
15:40:04 1020  ) AS
15:40:04 1021  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
15:40:04 1022  -- VARIABLES
15:40:04 1023  temp_invoice_id	       NUMBER;
15:40:04 1024  var_invoice_refunds_sum NUMBER(10,2);
15:40:04 1025  var_invoice_charges_sum NUMBER(10,2);
15:40:04 1026  -- EXCEPTIONS
15:40:04 1027  BAD_INVOICE_ID EXCEPTION;
15:40:04 1028  BEGIN
15:40:04 1029  
15:40:04 1030  	 BEGIN
15:40:04 1031  	   SELECT
15:40:04 1032  	     INVOICE.ID into temp_invoice_id
15:40:04 1033  	   FROM
15:40:04 1034  	     INVOICE
15:40:04 1035  	   WHERE
15:40:04 1036  	     INVOICE.ID = in_invoice_id;
15:40:04 1037  	   EXCEPTION
15:40:04 1038  	     WHEN NO_DATA_FOUND THEN
15:40:04 1039  	       RAISE BAD_INVOICE_ID;
15:40:04 1040  	 END;
15:40:04 1041  
15:40:04 1042  	 var_invoice_refunds_sum := 0;
15:40:04 1043  	 var_invoice_charges_sum := 0;
15:40:04 1044  
15:40:04 1045  	 FOR f_charge IN (
15:40:04 1046  	   SELECT
15:40:04 1047  	     CHARGE.ID,
15:40:04 1048  	     CHARGE.CHARGE_STATUS_ID,
15:40:04 1049  	     CHARGE.CHARGE_AMOUNT,
15:40:04 1050  	     CHARGE.TRANSACTION_ID
15:40:04 1051  	   FROM
15:40:04 1052  	     CHARGE
15:40:04 1053  	   WHERE
15:40:04 1054  	     CHARGE.INVOICE_ID = in_invoice_id
15:40:04 1055  	 )
15:40:04 1056  	 LOOP
15:40:04 1057  	   -- If charge.status = canceled then continue
15:40:04 1058  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V23.CHARGE_CANCELED THEN
15:40:04 1059  
15:40:04 1060  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
15:40:04 1061  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
15:40:04 1062  		  AND PROCS_TRANSACTION_V23.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V23.TRUE THEN
15:40:04 1063  		 -- Transaction collected
15:40:04 1064  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
15:40:04 1065  	       ELSE
15:40:04 1066  		 -- Transaction is not collected. Do nothing
15:40:04 1067  		 NULL;
15:40:04 1068  	       END IF;
15:40:04 1069  	     ELSE
15:40:04 1070  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
15:40:04 1071  		  AND PROCS_TRANSACTION_V23.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:04 1072  		 -- If charge is processed transaction is not collected then do nothing
15:40:04 1073  		 NULL;
15:40:04 1074  	       ELSE
15:40:04 1075  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
15:40:04 1076  	       END IF;
15:40:04 1077  	     END IF;
15:40:04 1078  
15:40:04 1079  	   END IF;
15:40:04 1080  	 END LOOP;
15:40:04 1081  
15:40:04 1082  	 -- Refunds are negative
15:40:04 1083  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
15:40:04 1084  
15:40:04 1085  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
15:40:04 1086  
15:40:04 1087  EXCEPTION
15:40:04 1088  WHEN BAD_INVOICE_ID THEN
15:40:04 1089  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1090  	   SPROC_NAME, 'No such invoice');
15:40:04 1091  WHEN OTHERS THEN
15:40:04 1092  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1093  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1094  END GET_MAX_REFUND;
15:40:04 1095  
15:40:04 1096  /******************************************************************************/
15:40:04 1097  
15:40:04 1098  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
15:40:04 1099  	 in_invoice_id	     IN NUMBER,
15:40:04 1100  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
15:40:04 1101  	 out_days_num	     OUT NUMBER
15:40:04 1102  ) AS
15:40:04 1103  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
15:40:04 1104  -- VARIABLES
15:40:04 1105  temp_invoice_id	      NUMBER;
15:40:04 1106  var_license_start_date DATE;
15:40:04 1107  var_license_end_date   DATE;
15:40:04 1108  var_chargeback_date    DATE;
15:40:04 1109  var_invoice_days_used  NUMBER;
15:40:04 1110  -- EXCEPTIONS
15:40:04 1111  BAD_INVOICE_ID EXCEPTION;
15:40:04 1112  BEGIN
15:40:04 1113  
15:40:04 1114  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
15:40:04 1115  
15:40:04 1116  	 BEGIN
15:40:04 1117  	   SELECT
15:40:04 1118  	     INVOICE.ID into temp_invoice_id
15:40:04 1119  	   FROM
15:40:04 1120  	     INVOICE
15:40:04 1121  	   WHERE
15:40:04 1122  	     INVOICE.ID = in_invoice_id;
15:40:04 1123  	   EXCEPTION
15:40:04 1124  	     WHEN NO_DATA_FOUND THEN
15:40:04 1125  	       RAISE BAD_INVOICE_ID;
15:40:04 1126  	 END;
15:40:04 1127  
15:40:04 1128  	 var_invoice_days_used := 0;
15:40:04 1129  
15:40:04 1130  	 FOR f_license IN (
15:40:04 1131  	   SELECT
15:40:04 1132  	     LICENSE.START_DATE,
15:40:04 1133  	     LICENSE.END_DATE
15:40:04 1134  	   FROM
15:40:04 1135  	     LICENSE
15:40:04 1136  	   WHERE
15:40:04 1137  	     LICENSE.INVOICE_ID = in_invoice_id
15:40:04 1138  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V23.FALSE
15:40:04 1139  	 )
15:40:04 1140  	 LOOP
15:40:04 1141  	   var_license_start_date := PROCS_COMMON_V23.NORMALIZE_DATE(f_license.START_DATE);
15:40:04 1142  	   var_license_end_date := PROCS_COMMON_V23.NORMALIZE_DATE(f_license.END_DATE);
15:40:04 1143  
15:40:04 1144  	   IF var_license_start_date <= var_chargeback_date THEN
15:40:04 1145  	     IF var_license_end_date <= var_chargeback_date THEN
15:40:04 1146  	       -- License is passed
15:40:04 1147  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
15:40:04 1148  	     ELSE
15:40:04 1149  	       -- This is current license
15:40:04 1150  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
15:40:04 1151  	     END IF;
15:40:04 1152  	   ELSE
15:40:04 1153  	     -- if var_license_start_date > in_chargeback_date then do nothing
15:40:04 1154  	     NULL;
15:40:04 1155  	   END IF;
15:40:04 1156  	 END LOOP;
15:40:04 1157  
15:40:04 1158  	 out_days_num := var_invoice_days_used;
15:40:04 1159  
15:40:04 1160  EXCEPTION
15:40:04 1161  WHEN BAD_INVOICE_ID THEN
15:40:04 1162  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1163  	   SPROC_NAME, 'No such invoice');
15:40:04 1164  WHEN OTHERS THEN
15:40:04 1165  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1166  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1167  END GET_INVOICE_DAYS_USED_NUMBER;
15:40:04 1168  
15:40:04 1169  /******************************************************************************/
15:40:04 1170  
15:40:04 1171  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:40:04 1172  	 in_invoice_id	IN NUMBER,
15:40:04 1173  	 out_result_set OUT SYS_REFCURSOR
15:40:04 1174  ) AS
15:40:04 1175  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
15:40:04 1176  -- VARIABLES
15:40:04 1177  temp_invoice_id NUMBER;
15:40:04 1178  -- EXCEPTIONS
15:40:04 1179  BAD_INVOICE_ID EXCEPTION;
15:40:04 1180  BEGIN
15:40:04 1181  
15:40:04 1182  	 BEGIN
15:40:04 1183  	   SELECT
15:40:04 1184  	     INVOICE.ID into temp_invoice_id
15:40:04 1185  	   FROM
15:40:04 1186  	     INVOICE
15:40:04 1187  	   WHERE
15:40:04 1188  	     INVOICE.ID = in_invoice_id;
15:40:04 1189  	   EXCEPTION
15:40:04 1190  	     WHEN NO_DATA_FOUND THEN
15:40:04 1191  	       RAISE BAD_INVOICE_ID;
15:40:04 1192  	 END;
15:40:04 1193  
15:40:04 1194  	 OPEN out_result_set FOR
15:40:04 1195  	 SELECT
15:40:04 1196  	   LINE_ITEM.ID,
15:40:04 1197  	   LINE_ITEM.PRODUCT_OFFER_ID,
15:40:04 1198  	   LINE_ITEM.INVOICE_ID,
15:40:04 1199  	   LINE_ITEM.AMOUNT,
15:40:04 1200  	   LINE_ITEM.DISCOUNT_AMOUNT,
15:40:04 1201  	   LINE_ITEM.TAXES_AMOUNT,
15:40:04 1202  	   LINE_ITEM.CREATE_DATE,
15:40:04 1203  	   LINE_ITEM.CREATED_BY
15:40:04 1204  	 FROM
15:40:04 1205  	   LINE_ITEM
15:40:04 1206  	 WHERE
15:40:04 1207  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
15:40:04 1208  
15:40:04 1209  EXCEPTION
15:40:04 1210  WHEN BAD_INVOICE_ID THEN
15:40:04 1211  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1212  	   SPROC_NAME, 'No such invoice');
15:40:04 1213  WHEN OTHERS THEN
15:40:04 1214  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1216  END GET_INVOICE_LINE_ITEMS;
15:40:04 1217  
15:40:04 1218  /******************************************************************************/
15:40:04 1219  
15:40:04 1220  PROCEDURE GET_INVOICE_LICENSES (
15:40:04 1221  	 in_invoice_id	IN NUMBER,
15:40:04 1222  	 out_result_set OUT SYS_REFCURSOR
15:40:04 1223  ) AS
15:40:04 1224  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
15:40:04 1225  -- VARIABLES
15:40:04 1226  temp_invoice_id NUMBER;
15:40:04 1227  -- EXCEPTIONS
15:40:04 1228  BAD_INVOICE_ID EXCEPTION;
15:40:04 1229  BEGIN
15:40:04 1230  
15:40:04 1231  	 BEGIN
15:40:04 1232  	   SELECT
15:40:04 1233  	     INVOICE.ID into temp_invoice_id
15:40:04 1234  	   FROM
15:40:04 1235  	     INVOICE
15:40:04 1236  	   WHERE
15:40:04 1237  	     INVOICE.ID = in_invoice_id;
15:40:04 1238  	   EXCEPTION
15:40:04 1239  	     WHEN NO_DATA_FOUND THEN
15:40:04 1240  	       RAISE BAD_INVOICE_ID;
15:40:04 1241  	 END;
15:40:04 1242  
15:40:04 1243  	 OPEN out_result_set FOR
15:40:04 1244  	 SELECT
15:40:04 1245  	   LICENSE.ID,
15:40:04 1246  	   LICENSE.INVOICE_ID,
15:40:04 1247  	   LICENSE.CREATE_DATE,
15:40:04 1248  	   LICENSE.CREATED_BY,
15:40:04 1249  	   LICENSE.CURRENT_OFFER_INDEX,
15:40:04 1250  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
15:40:04 1251  	   LICENSE.END_DATE,
15:40:04 1252  	   LICENSE.ENTITLEMENT_END_DATE,
15:40:04 1253  	   LICENSE.IS_EXTENSION,
15:40:04 1254  	   LICENSE.LICENSE_STATUS_ID,
15:40:04 1255  	   LICENSE.NEEDS_ENTITLEMENTS,
15:40:04 1256  	   LICENSE.OFFER_ID,
15:40:04 1257  	   LICENSE.START_DATE,
15:40:04 1258  	   LICENSE.SUBSCRIPTION_ID,
15:40:04 1259  	   LICENSE.UPDATE_DATE,
15:40:04 1260  	   LICENSE.UPDATED_BY
15:40:04 1261  	 FROM
15:40:04 1262  	   LICENSE
15:40:04 1263  	 WHERE
15:40:04 1264  	   LICENSE.INVOICE_ID = in_invoice_id;
15:40:04 1265  
15:40:04 1266  EXCEPTION
15:40:04 1267  WHEN BAD_INVOICE_ID THEN
15:40:04 1268  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1269  	   SPROC_NAME, 'No such invoice');
15:40:04 1270  WHEN OTHERS THEN
15:40:04 1271  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1272  	   SPROC_NAME, 'Unknown error');
15:40:04 1273  END GET_INVOICE_LICENSES;
15:40:04 1274  
15:40:04 1275  /******************************************************************************/
15:40:04 1276  
15:40:04 1277  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
15:40:04 1278  	 in_invoice_id	    IN NUMBER,
15:40:04 1279  	 out_offer_chain_id OUT NUMBER
15:40:04 1280  ) AS
15:40:04 1281  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
15:40:04 1282  -- VARIABLES
15:40:04 1283  temp_invoice_id NUMBER;
15:40:04 1284  -- EXCEPTIONS
15:40:04 1285  BAD_INVOICE_ID EXCEPTION;
15:40:04 1286  BEGIN
15:40:04 1287  
15:40:04 1288  	 BEGIN
15:40:04 1289  	   SELECT
15:40:04 1290  	     INVOICE.ID into temp_invoice_id
15:40:04 1291  	   FROM
15:40:04 1292  	     INVOICE
15:40:04 1293  	   WHERE
15:40:04 1294  	     INVOICE.ID = in_invoice_id;
15:40:04 1295  	   EXCEPTION
15:40:04 1296  	     WHEN NO_DATA_FOUND THEN
15:40:04 1297  	       RAISE BAD_INVOICE_ID;
15:40:04 1298  	 END;
15:40:04 1299  
15:40:04 1300  	 BEGIN
15:40:04 1301  	   SELECT DISTINCT
15:40:04 1302  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
15:40:04 1303  	   FROM
15:40:04 1304  	     LICENSE
15:40:04 1305  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:04 1306  	   WHERE
15:40:04 1307  	     LICENSE.INVOICE_ID = in_invoice_id;
15:40:04 1308  	   EXCEPTION
15:40:04 1309  	     WHEN NO_DATA_FOUND THEN
15:40:04 1310  	       out_offer_chain_id := NULL;
15:40:04 1311  	 END;
15:40:04 1312  
15:40:04 1313  EXCEPTION
15:40:04 1314  WHEN BAD_INVOICE_ID THEN
15:40:04 1315  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1316  	   SPROC_NAME, 'No such invoice');
15:40:04 1317  WHEN OTHERS THEN
15:40:04 1318  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1319  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1320  END GET_OFFER_CH_ID_BY_INVOICE_ID;
15:40:04 1321  
15:40:04 1322  /******************************************************************************/
15:40:04 1323  
15:40:04 1324  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
15:40:04 1325  -- Closing invoice without refund
15:40:04 1326  	 in_invoice_id IN NUMBER,
15:40:04 1327  	 in_updated_by IN VARCHAR2
15:40:04 1328  ) AS
15:40:04 1329  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
15:40:04 1330  -- VARIABLES
15:40:04 1331  temp_invoice_id NUMBER;
15:40:04 1332  -- EXCEPTIONS
15:40:04 1333  BAD_INVOICE_ID EXCEPTION;
15:40:04 1334  BEGIN
15:40:04 1335  
15:40:04 1336  	 BEGIN
15:40:04 1337  	   SELECT
15:40:04 1338  	     INVOICE.ID into temp_invoice_id
15:40:04 1339  	   FROM
15:40:04 1340  	     INVOICE
15:40:04 1341  	   WHERE
15:40:04 1342  	     INVOICE.ID = in_invoice_id;
15:40:04 1343  	   EXCEPTION
15:40:04 1344  	     WHEN NO_DATA_FOUND THEN
15:40:04 1345  	       RAISE BAD_INVOICE_ID;
15:40:04 1346  	 END;
15:40:04 1347  
15:40:04 1348  	 -- Needs to close charges. No refund.
15:40:04 1349  	 FOR f_charge_to_close IN (
15:40:04 1350  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
15:40:04 1351  	 )
15:40:04 1352  	 LOOP
15:40:04 1353  	   PROCS_CHARGE_V23.UPDATE_CHARGE_STATUS(
15:40:04 1354  	     in_charge_id	 => f_charge_to_close.ID,
15:40:04 1355  	     in_updated_by	 => in_updated_by,
15:40:04 1356  	     in_charge_status_id => GLOBAL_STATUSES_V23.CHARGE_CANCELED
15:40:04 1357  	   );
15:40:04 1358  	 END LOOP;
15:40:04 1359  
15:40:04 1360  	 --FOR f_license_to_cancel IN (
15:40:04 1361  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
15:40:04 1362  	 --)
15:40:04 1363  	 --LOOP
15:40:04 1364  	 --  PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
15:40:04 1365  	 --    in_license_id	     => f_license_to_cancel.ID,
15:40:04 1366  	 --    in_license_status_id  => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
15:40:04 1367  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V23.FALSE,
15:40:04 1368  	 --    in_updated_by	     => in_updated_by
15:40:04 1369  	 --  );
15:40:04 1370  	 --END LOOP;
15:40:04 1371  
15:40:04 1372  	 PROCS_INVOICE_V23.UPDATE_INVOICE_STATUS(
15:40:04 1373  	   in_invoice_id		  => in_invoice_id,
15:40:04 1374  	   in_updated_by		  => in_updated_by,
15:40:04 1375  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V23.INVOICE_CLOSED
15:40:04 1376  	 );
15:40:04 1377  
15:40:04 1378  	 FOR f_transaction_to_close IN (
15:40:04 1379  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
15:40:04 1380  	 )
15:40:04 1381  	 LOOP
15:40:04 1382  	   PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_STATUS(
15:40:04 1383  	     in_transaction_id	      => f_transaction_to_close.ID,
15:40:04 1384  	     in_updated_by	      => in_updated_by,
15:40:04 1385  	     in_transaction_status_id => GLOBAL_STATUSES_V23.TRANSACTION_CLOSED
15:40:04 1386  	   );
15:40:04 1387  	 END LOOP;
15:40:04 1388  
15:40:04 1389  EXCEPTION
15:40:04 1390  WHEN BAD_INVOICE_ID THEN
15:40:04 1391  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1392  	   SPROC_NAME, 'No such invoice');
15:40:04 1393  WHEN OTHERS THEN
15:40:04 1394  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1395  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1396  END CLOSE_INVOICE_AS_NOT_COLLECTED;
15:40:04 1397  
15:40:04 1398  /******************************************************************************/
15:40:04 1399  
15:40:04 1400  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
15:40:04 1401  	 in_invoice_id	     IN NUMBER,
15:40:04 1402  	 out_subscription_id OUT NUMBER
15:40:04 1403  ) AS
15:40:04 1404  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
15:40:04 1405  -- VARIABLES
15:40:04 1406  temp_invoice_id NUMBER;
15:40:04 1407  -- EXCEPTIONS
15:40:04 1408  BAD_INVOICE_ID		 EXCEPTION;
15:40:04 1409  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
15:40:04 1410  BEGIN
15:40:04 1411  
15:40:04 1412  	 BEGIN
15:40:04 1413  	   SELECT
15:40:04 1414  	     INVOICE.ID into temp_invoice_id
15:40:04 1415  	   FROM
15:40:04 1416  	     INVOICE
15:40:04 1417  	   WHERE
15:40:04 1418  	     INVOICE.ID = in_invoice_id;
15:40:04 1419  	   EXCEPTION
15:40:04 1420  	     WHEN NO_DATA_FOUND THEN
15:40:04 1421  	       RAISE BAD_INVOICE_ID;
15:40:04 1422  	 END;
15:40:04 1423  
15:40:04 1424  	 BEGIN
15:40:04 1425  	   SELECT DISTINCT
15:40:04 1426  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
15:40:04 1427  	   FROM
15:40:04 1428  	     LICENSE
15:40:04 1429  	   WHERE
15:40:04 1430  	     LICENSE.INVOICE_ID = in_invoice_id;
15:40:04 1431  	   EXCEPTION
15:40:04 1432  	     WHEN NO_DATA_FOUND THEN
15:40:04 1433  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
15:40:04 1434  	 END;
15:40:04 1435  
15:40:04 1436  EXCEPTION
15:40:04 1437  WHEN BAD_INVOICE_ID THEN
15:40:04 1438  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1439  	   SPROC_NAME, 'No such invoice');
15:40:04 1440  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
15:40:04 1441  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1442  	   SPROC_NAME, 'Could not find subscription for given invoice');
15:40:04 1443  WHEN OTHERS THEN
15:40:04 1444  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1445  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1446  END GET_SUBSCR_ID_BY_INVOICE_ID;
15:40:04 1447  
15:40:04 1448  /******************************************************************************/
15:40:04 1449  
15:40:04 1450  PROCEDURE IS_INVOICE_TAX_EXEMPT (
15:40:04 1451  /*
15:40:04 1452  Throws exceptions:
15:40:04 1453  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1454  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:04 1455  Return:
15:40:04 1456  	 GLOBAL_CONSTANTS_V23.TRUE if ACCOUNT.EXEMPT_ID is not null
15:40:04 1457  	 GLOBAL_CONSTANTS_V23.FALSE else
15:40:04 1458  */
15:40:04 1459  	 in_invoice_id	   IN NUMBER,
15:40:04 1460  	 out_is_tax_exempt OUT NUMBER
15:40:04 1461  ) AS
15:40:04 1462  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
15:40:04 1463  -- VARIABLES
15:40:04 1464  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
15:40:04 1465  -- EXCEPTIONS
15:40:04 1466  BAD_INVOICE_ID EXCEPTION;
15:40:04 1467  BEGIN
15:40:04 1468  
15:40:04 1469  	 BEGIN
15:40:04 1470  	   SELECT
15:40:04 1471  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
15:40:04 1472  	   FROM
15:40:04 1473  	     INVOICE
15:40:04 1474  	   WHERE
15:40:04 1475  	     INVOICE.ID = in_invoice_id;
15:40:04 1476  	   EXCEPTION
15:40:04 1477  	     WHEN NO_DATA_FOUND THEN
15:40:04 1478  	       RAISE BAD_INVOICE_ID;
15:40:04 1479  	 END;
15:40:04 1480  
15:40:04 1481  	 IF var_is_tax_exempt IS NULL THEN
15:40:04 1482  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V23.FALSE;
15:40:04 1483  	 ELSE
15:40:04 1484  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V23.TRUE;
15:40:04 1485  	 END IF;
15:40:04 1486  
15:40:04 1487  EXCEPTION
15:40:04 1488  WHEN BAD_INVOICE_ID THEN
15:40:04 1489  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1490  	   SPROC_NAME, 'No such invoice');
15:40:04 1491  WHEN OTHERS THEN
15:40:04 1492  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1493  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1494  END IS_INVOICE_TAX_EXEMPT;
15:40:04 1495  
15:40:04 1496  /******************************************************************************/
15:40:04 1497  
15:40:04 1498  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
15:40:04 1499  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
15:40:04 1500  	 out_result_set OUT SYS_REFCURSOR
15:40:04 1501  ) AS
15:40:04 1502  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
15:40:04 1503  -- VARIABLE
15:40:04 1504  temp_order_id TRANSACTION.ORDER_ID%TYPE;
15:40:04 1505  -- EXCEPTIONS
15:40:04 1506  BAD_ORDER_ID EXCEPTION;
15:40:04 1507  CAN_NOT_FIND_INVOICE EXCEPTION;
15:40:04 1508  BEGIN
15:40:04 1509  
15:40:04 1510  	 OPEN out_result_set FOR
15:40:04 1511  	   SELECT DISTINCT
15:40:04 1512  	     CHARGE.INVOICE_ID
15:40:04 1513  	   FROM
15:40:04 1514  	     CHARGE
15:40:04 1515  	   INNER JOIN
15:40:04 1516  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
15:40:04 1517  	   WHERE
15:40:04 1518  	     TRANSACTION.ORDER_ID = in_order_id;
15:40:04 1519  
15:40:04 1520  EXCEPTION
15:40:04 1521  WHEN BAD_ORDER_ID THEN
15:40:04 1522  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1523  	   SPROC_NAME, 'No such transaction');
15:40:04 1524  WHEN CAN_NOT_FIND_INVOICE THEN
15:40:04 1525  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1526  	   SPROC_NAME, 'Could not find invoice for given order id');
15:40:04 1527  WHEN OTHERS THEN
15:40:04 1528  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1529  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1530  END GET_INVOICE_BY_TRNS_ORDER_ID;
15:40:04 1531  
15:40:04 1532  /******************************************************************************/
15:40:04 1533  
15:40:04 1534  PROCEDURE GET_INVOICE_BY_ID (
15:40:04 1535  	 in_invoice_id	IN NUMBER,
15:40:04 1536  	 out_result_set OUT SYS_REFCURSOR
15:40:04 1537  ) AS
15:40:04 1538  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
15:40:04 1539  -- VARIABLE
15:40:04 1540  temp_invoice_id NUMBER;
15:40:04 1541  -- EXCEPTIONS
15:40:04 1542  BAD_INVOCIE_ID EXCEPTION;
15:40:04 1543  BEGIN
15:40:04 1544  
15:40:04 1545  	 BEGIN
15:40:04 1546  	   SELECT
15:40:04 1547  	     INVOICE.ID into temp_invoice_id
15:40:04 1548  	   FROM
15:40:04 1549  	     INVOICE
15:40:04 1550  	   WHERE
15:40:04 1551  	     INVOICE.ID = in_invoice_id;
15:40:04 1552  	   EXCEPTION
15:40:04 1553  	     WHEN NO_DATA_FOUND THEN
15:40:04 1554  	       RAISE BAD_INVOCIE_ID;
15:40:04 1555  	 END;
15:40:04 1556  
15:40:04 1557  	 OPEN out_result_set FOR
15:40:04 1558  	 SELECT
15:40:04 1559  	   INVOICE.ID,
15:40:04 1560  	   INVOICE.INVOICE_STATUS_ID,
15:40:04 1561  	   INVOICE.TAX_EXEMPT_ID,
15:40:04 1562  	   INVOICE.UPDATE_DATE,
15:40:04 1563  	   INVOICE.UPDATED_BY,
15:40:04 1564  	   INVOICE.CREATE_DATE,
15:40:04 1565  	   INVOICE.CREATED_BY
15:40:04 1566  	 FROM
15:40:04 1567  	   INVOICE
15:40:04 1568  	 WHERE
15:40:04 1569  	   INVOICE.ID = in_invoice_id;
15:40:04 1570  
15:40:04 1571  EXCEPTION
15:40:04 1572  WHEN BAD_INVOCIE_ID THEN
15:40:04 1573  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1574  	   SPROC_NAME, 'No such invoice');
15:40:04 1575  WHEN OTHERS THEN
15:40:04 1576  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1577  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1578  END GET_INVOICE_BY_ID;
15:40:04 1579  
15:40:04 1580  /******************************************************************************/
15:40:04 1581  
15:40:04 1582  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
15:40:04 1583  	 in_invoice_id		       IN NUMBER,
15:40:04 1584  	 out_is_tax_calculation_needed OUT NUMBER
15:40:04 1585  ) AS
15:40:04 1586  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
15:40:04 1587  BEGIN
15:40:04 1588  
15:40:04 1589  	 SELECT
15:40:04 1590  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
15:40:04 1591  	 FROM
15:40:04 1592  	   INVOICE I
15:40:04 1593  	 WHERE
15:40:04 1594  	   I.ID = in_invoice_id;
15:40:04 1595  
15:40:04 1596  EXCEPTION
15:40:04 1597  WHEN NO_DATA_FOUND THEN
15:40:04 1598  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1599  	   SPROC_NAME, 'No such invoice');
15:40:04 1600  WHEN OTHERS THEN
15:40:04 1601  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1602  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1603  END GET_IS_TAX_CALCULATION_NEEDED;
15:40:04 1604  
15:40:04 1605  /******************************************************************************/
15:40:04 1606  
15:40:04 1607  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
15:40:04 1608  	 in_invoice_id		      IN NUMBER,
15:40:04 1609  	 in_updated_by		      IN VARCHAR2,
15:40:04 1610  	 in_is_tax_calculation_needed IN NUMBER
15:40:04 1611  ) AS
15:40:04 1612  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
15:40:04 1613  -- VARIABLES
15:40:04 1614  temp_invoice_id	      NUMBER;
15:40:04 1615  -- EXCEPTIONS
15:40:04 1616  BAD_INVOICE_ID	      EXCEPTION;
15:40:04 1617  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
15:40:04 1618  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:04 1619  BEGIN
15:40:04 1620  
15:40:04 1621  	 BEGIN
15:40:04 1622  	   SELECT
15:40:04 1623  	     i.id into temp_invoice_id
15:40:04 1624  	   FROM
15:40:04 1625  	     invoice i
15:40:04 1626  	   WHERE
15:40:04 1627  	     i.id = in_invoice_id;
15:40:04 1628  	   EXCEPTION
15:40:04 1629  	     WHEN NO_DATA_FOUND THEN
15:40:04 1630  	       RAISE BAD_INVOICE_ID;
15:40:04 1631  	 END;
15:40:04 1632  
15:40:04 1633  	 BEGIN
15:40:04 1634  	   PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
15:40:04 1635  	     in_invoice_id => in_invoice_id,
15:40:04 1636  	     in_updated_by => in_updated_by,
15:40:04 1637  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
15:40:04 1638  	   );
15:40:04 1639  	   EXCEPTION
15:40:04 1640  	     WHEN OTHERS THEN
15:40:04 1641  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1642  	       RAISE CAN_NOT_UPDATE_INVOCIE;
15:40:04 1643  	 END;
15:40:04 1644  
15:40:04 1645  EXCEPTION
15:40:04 1646  WHEN BAD_INVOICE_ID THEN
15:40:04 1647  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1648  	   SPROC_NAME, 'No such invoice');
15:40:04 1649  WHEN CAN_NOT_UPDATE_INVOCIE THEN
15:40:04 1650  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1651  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
15:40:04 1652  WHEN OTHERS THEN
15:40:04 1653  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1654  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1655  END SET_IS_TAX_CALCULATION_NEEDED;
15:40:04 1656  
15:40:04 1657  /******************************************************************************/
15:40:04 1658  
15:40:04 1659  PROCEDURE REFUND_INVOICE (
15:40:04 1660  	 in_invoice_id	    IN NUMBER,
15:40:04 1661  	 in_refund_amount   IN NUMBER,
15:40:04 1662  	 in_note	    IN VARCHAR2,
15:40:04 1663  	 in_created_by	    IN VARCHAR2,
15:40:04 1664  	 out_charge_id	    OUT NUMBER
15:40:04 1665  ) AS
15:40:04 1666  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
15:40:04 1667  -- VARIABLES
15:40:04 1668  var_invoice_status_id  NUMBER;
15:40:04 1669  var_subscription_id    NUMBER;
15:40:04 1670  var_account_id	      NUMBER;
15:40:04 1671  var_group_id	      NUMBER;
15:40:04 1672  var_account_status_id  NUMBER;
15:40:04 1673  var_new_transaction_id NUMBER;
15:40:04 1674  var_instrument_type_id NUMBER;
15:40:04 1675  var_instrument_id      NUMBER;
15:40:04 1676  var_new_charge_id      NUMBER;
15:40:04 1677  var_invoice_amount     NUMBER(10,2);
15:40:04 1678  var_refunds_before     NUMBER(10,2);
15:40:04 1679  var_charges_amount     NUMBER(10,2);
15:40:04 1680  -- EXCEPTIONS
15:40:04 1681  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
15:40:04 1682  ACCOUNT_IS_FROZEN	     EXCEPTION;
15:40:04 1683  BAD_INVOICE_ID		     EXCEPTION;
15:40:04 1684  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
15:40:04 1685  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
15:40:04 1686  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
15:40:04 1687  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
15:40:04 1688  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
15:40:04 1689  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
15:40:04 1690  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
15:40:04 1691  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
15:40:04 1692  EXCEPTION_MESSAGE	      VARCHAR2(1024);
15:40:04 1693  BEGIN
15:40:04 1694  
15:40:04 1695  	 BEGIN
15:40:04 1696  	   SELECT
15:40:04 1697  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
15:40:04 1698  	   FROM
15:40:04 1699  	     INVOICE
15:40:04 1700  	   WHERE
15:40:04 1701  	     INVOICE.ID = in_invoice_id;
15:40:04 1702  	   EXCEPTION
15:40:04 1703  	     WHEN NO_DATA_FOUND THEN
15:40:04 1704  	       RAISE BAD_INVOICE_ID;
15:40:04 1705  	 END;
15:40:04 1706  
15:40:04 1707  	 -- Get instrument and subscription id if exists
15:40:04 1708  	 BEGIN
15:40:04 1709  	   SELECT
15:40:04 1710  	     SUBSCRIPTION.INSTRUMENT_ID,
15:40:04 1711  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
15:40:04 1712  	     SUBSCRIPTION.ACCOUNT_ID,
15:40:04 1713  	     SUBSCRIPTION.ID
15:40:04 1714  	     into
15:40:04 1715  	     var_instrument_id,
15:40:04 1716  	     var_instrument_type_id,
15:40:04 1717  	     var_account_id,
15:40:04 1718  	     var_subscription_id
15:40:04 1719  	   FROM
15:40:04 1720  	     SUBSCRIPTION
15:40:04 1721  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
15:40:04 1722  	   WHERE
15:40:04 1723  	     LICENSE.INVOICE_ID = in_invoice_id
15:40:04 1724  	     AND ROWNUM <= 1;
15:40:04 1725  	   EXCEPTION
15:40:04 1726  	     WHEN NO_DATA_FOUND THEN
15:40:04 1727  	       BEGIN
15:40:04 1728  
15:40:04 1729  		 var_subscription_id := NULL;
15:40:04 1730  
15:40:04 1731  		 SELECT
15:40:04 1732  		   CHARGE.INSTRUMENT_ID,
15:40:04 1733  		   CHARGE.INSTRUMENT_TYPE_ID,
15:40:04 1734  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
15:40:04 1735  		   into
15:40:04 1736  		   var_instrument_id,
15:40:04 1737  		   var_instrument_type_id,
15:40:04 1738  		   var_group_id
15:40:04 1739  		 FROM
15:40:04 1740  		   INVOICE
15:40:04 1741  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
15:40:04 1742  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
15:40:04 1743  		 WHERE
15:40:04 1744  		   INVOICE.ID = in_invoice_id
15:40:04 1745  		   AND ROWNUM <= 1;
15:40:04 1746  
15:40:04 1747  		 SELECT
15:40:04 1748  		   ACCOUNT.ID into var_account_id
15:40:04 1749  		 FROM
15:40:04 1750  		   ACCOUNT
15:40:04 1751  		 WHERE
15:40:04 1752  		   ACCOUNT.GROUP_ID = var_group_id;
15:40:04 1753  
15:40:04 1754  		 EXCEPTION
15:40:04 1755  		   WHEN NO_DATA_FOUND THEN
15:40:04 1756  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
15:40:04 1757  	       END;
15:40:04 1758  	 END;
15:40:04 1759  
15:40:04 1760  	 -- Check account status. It should not to be frozen
15:40:04 1761  	 SELECT
15:40:04 1762  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
15:40:04 1763  	 FROM
15:40:04 1764  	   ACCOUNT
15:40:04 1765  	 WHERE
15:40:04 1766  	   ACCOUNT.ID = var_account_id;
15:40:04 1767  
15:40:04 1768  	 IF var_account_status_id = GLOBAL_STATUSES_V23.ACCOUNT_FROZEN THEN
15:40:04 1769  	   RAISE ACCOUNT_IS_FROZEN;
15:40:04 1770  	 END IF;
15:40:04 1771  
15:40:04 1772  	 IF var_invoice_status_id != GLOBAL_STATUSES_V23.INVOICE_CLOSED THEN
15:40:04 1773  	   RAISE INVOICE_IS_NOT_CLOSED;
15:40:04 1774  	 END IF;
15:40:04 1775  
15:40:04 1776  	 BEGIN
15:40:04 1777  	   PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT (
15:40:04 1778  	     in_invoice_id => in_invoice_id,
15:40:04 1779  	     out_amount    => var_invoice_amount
15:40:04 1780  	   );
15:40:04 1781  	   EXCEPTION
15:40:04 1782  	     WHEN OTHERS THEN
15:40:04 1783  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1784  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:40:04 1785  	 END;
15:40:04 1786  
15:40:04 1787  	 IF ( in_refund_amount > var_invoice_amount ) THEN
15:40:04 1788  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
15:40:04 1789  	 END IF;
15:40:04 1790  
15:40:04 1791  	 SELECT /*+ STAR_TRANSFORMATION */
15:40:04 1792  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
15:40:04 1793  	 FROM
15:40:04 1794  	   CHARGE
15:40:04 1795  	 WHERE
15:40:04 1796  	   CHARGE.INVOICE_ID = in_invoice_id
15:40:04 1797  	   AND (
15:40:04 1798  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
15:40:04 1799  	     OR (
15:40:04 1800  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
15:40:04 1801  	       AND EXISTS (
15:40:04 1802  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
15:40:04 1803  	       )
15:40:04 1804  	     )
15:40:04 1805  	   )
15:40:04 1806  	   AND CHARGE.CHARGE_AMOUNT < 0;
15:40:04 1807  
15:40:04 1808  	 -- Refunds are negative
15:40:04 1809  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
15:40:04 1810  	 var_refunds_before := 0 - var_refunds_before;
15:40:04 1811  
15:40:04 1812  	 var_charges_amount := 0;
15:40:04 1813  
15:40:04 1814  	 FOR f_processed_charges IN (
15:40:04 1815  	   SELECT
15:40:04 1816  	     CHARGE.CHARGE_AMOUNT
15:40:04 1817  	   FROM
15:40:04 1818  	     CHARGE
15:40:04 1819  	   WHERE
15:40:04 1820  	     CHARGE.INVOICE_ID = in_invoice_id
15:40:04 1821  	     AND CHARGE.CHARGE_AMOUNT > 0
15:40:04 1822  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V23.CHARGE_PROCESSED FROM DUAL)
15:40:04 1823  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS)
15:40:04 1824  	 )
15:40:04 1825  	 LOOP
15:40:04 1826  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
15:40:04 1827  	 END LOOP;
15:40:04 1828  
15:40:04 1829  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
15:40:04 1830  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
15:40:04 1831  	 END IF;
15:40:04 1832  
15:40:04 1833  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
15:40:04 1834  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
15:40:04 1835  	 END IF;
15:40:04 1836  
15:40:04 1837  	 BEGIN
15:40:04 1838  	   PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
15:40:04 1839  	     in_transaction_id	       => NULL,
15:40:04 1840  	     in_status_id	       => GLOBAL_STATUSES_V23.TRANSACTION_PREPARE,
15:40:04 1841  	     in_amount		       => -in_refund_amount,
15:40:04 1842  	     in_created_by	       => in_created_by,
15:40:04 1843  	     in_order_id	       => NULL,
15:40:04 1844  	     in_is_refund	       => GLOBAL_CONSTANTS_V23.TRUE,
15:40:04 1845  	     in_transaction_type_code  => 'REFUND',
15:40:04 1846  	     out_transaction_id        => var_new_transaction_id
15:40:04 1847  	   );
15:40:04 1848  	   EXCEPTION
15:40:04 1849  	     WHEN OTHERS THEN
15:40:04 1850  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1851  	       RAISE CAN_NOT_CREATE_TRANSACTION;
15:40:04 1852  	 END;
15:40:04 1853  
15:40:04 1854  	 BEGIN
15:40:04 1855  	   PROCS_CHARGE_V23.CREATE_CHARGE(
15:40:04 1856  	     in_invoice_id	   => in_invoice_id,
15:40:04 1857  	     in_transaction_id	   => var_new_transaction_id,
15:40:04 1858  	     in_instrument_type_id => var_instrument_type_id,
15:40:04 1859  	     in_instrument_id	   => var_instrument_id,
15:40:04 1860  	     in_charge_amount	   => -in_refund_amount,
15:40:04 1861  	     in_created_by	   => in_created_by,
15:40:04 1862  	     in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
15:40:04 1863  	     out_charge_id	   => var_new_charge_id
15:40:04 1864  	   );
15:40:04 1865  	   EXCEPTION
15:40:04 1866  	     WHEN OTHERS THEN
15:40:04 1867  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1868  	       RAISE CAN_NOT_CREATE_CHARGE;
15:40:04 1869  	 END;
15:40:04 1870  
15:40:04 1871  	 out_charge_id := var_new_charge_id;
15:40:04 1872  
15:40:04 1873  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
15:40:04 1874  	   BEGIN
15:40:04 1875  	     PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
15:40:04 1876  	       in_subscription_id => var_subscription_id,
15:40:04 1877  	       in_agent_id	  => 0, -- AGENT_ID??
15:40:04 1878  	       in_note		  => in_note,
15:40:04 1879  	       in_created_by	  => in_created_by
15:40:04 1880  	     );
15:40:04 1881  	     EXCEPTION
15:40:04 1882  	       WHEN OTHERS THEN
15:40:04 1883  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:04 1884  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
15:40:04 1885  	   END;
15:40:04 1886  	 END IF;
15:40:04 1887  
15:40:04 1888  EXCEPTION
15:40:04 1889  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
15:40:04 1890  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1891  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
15:40:04 1892  WHEN INVOICE_IS_NOT_CLOSED THEN
15:40:04 1893  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 1894  	   SPROC_NAME, 'Invoice is not closed');
15:40:04 1895  WHEN ACCOUNT_IS_FROZEN THEN
15:40:04 1896  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:04 1897  	   SPROC_NAME, 'Could not refund subscription for frozen account');
15:40:04 1898  WHEN BAD_INVOICE_ID THEN
15:40:04 1899  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1900  	   SPROC_NAME, 'No such invoice');
15:40:04 1901  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:40:04 1902  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1903  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
15:40:04 1904  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
15:40:04 1905  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1906  	   SPROC_NAME, 'Refund is greater than amount');
15:40:04 1907  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
15:40:04 1908  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1909  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
15:40:04 1910  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
15:40:04 1911  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:04 1912  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
15:40:04 1913  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:40:04 1914  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1915  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:40:04 1916  WHEN CAN_NOT_CREATE_CHARGE THEN
15:40:04 1917  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1918  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:40:04 1919  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
15:40:04 1920  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:04 1921  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
15:40:04 1922  WHEN OTHERS THEN
15:40:04 1923  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1924  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1925  END REFUND_INVOICE;
15:40:04 1926  
15:40:04 1927  /******************************************************************************/
15:40:04 1928  
15:40:04 1929  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
15:40:04 1930  	 in_invoice_id		     IN NUMBER,
15:40:04 1931  	 out_order_id		     OUT VARCHAR2,
15:40:04 1932  	 out_external_transaction_id OUT VARCHAR2
15:40:04 1933  ) AS
15:40:04 1934  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
15:40:04 1935  -- VARIABLES
15:40:04 1936  temp_invoice_id number;
15:40:04 1937  cnt_matched_instr number := 0;
15:40:04 1938  -- EXCEPTIONS
15:40:04 1939  BAD_INVOICE_ID EXCEPTION;
15:40:04 1940  BEGIN
15:40:04 1941  
15:40:04 1942  	 BEGIN
15:40:04 1943  	   SELECT
15:40:04 1944  	     i.id into temp_invoice_id
15:40:04 1945  	   from
15:40:04 1946  	     invoice i
15:40:04 1947  	   where
15:40:04 1948  	     i.id = in_invoice_id;
15:40:04 1949  	   EXCEPTION
15:40:04 1950  	     WHEN NO_DATA_FOUND THEN
15:40:04 1951  	       RAISE BAD_INVOICE_ID;
15:40:04 1952  	 END;
15:40:04 1953  
15:40:04 1954  	 select
15:40:04 1955  	   count(1) into cnt_matched_instr
15:40:04 1956  	 from
15:40:04 1957  	   charge ch
15:40:04 1958  	 inner join
15:40:04 1959  	   subscription s
15:40:04 1960  	 on
15:40:04 1961  	   s.instrument_id = ch.instrument_id
15:40:04 1962  	 where
15:40:04 1963  	   ch.invoice_id = in_invoice_id;
15:40:04 1964  
15:40:04 1965  	 if cnt_matched_instr = 0 then
15:40:04 1966  	   out_external_transaction_id := null;
15:40:04 1967  	   out_order_id := null;
15:40:04 1968  	   return;
15:40:04 1969  	 end if;
15:40:04 1970  
15:40:04 1971  	 SELECT
15:40:04 1972  	   t.order_id,
15:40:04 1973  	   ta.external_transaction_id
15:40:04 1974  	   into
15:40:04 1975  	   out_order_id,
15:40:04 1976  	   out_external_transaction_id
15:40:04 1977  	 from
15:40:04 1978  	   charge ch
15:40:04 1979  	   inner join transaction t on ch.transaction_id = t.id
15:40:04 1980  	   inner join transaction_attempt ta on ta.transaction_id = t.id
15:40:04 1981  	 where
15:40:04 1982  	   ch.invoice_id = in_invoice_id
15:40:04 1983  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
15:40:04 1984  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
15:40:04 1985  
15:40:04 1986  EXCEPTION
15:40:04 1987  WHEN BAD_INVOICE_ID THEN
15:40:04 1988  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1989  	   SPROC_NAME, 'No such invoice');
15:40:04 1990  WHEN NO_DATA_FOUND THEN
15:40:04 1991  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:04 1992  	   SPROC_NAME, 'No payment data found');
15:40:04 1993  WHEN OTHERS THEN
15:40:04 1994  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:04 1995  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:04 1996  END GET_PAYMENT_INFO_BY_INVOICE_ID;
15:40:04 1997  
15:40:04 1998  PROCEDURE IS_REVOKE_ENTITLEMENTS(
15:40:04 1999  	 in_invoice_id IN NUMBER,
15:40:04 2000  	 out_is_revoke OUT NUMBER
15:40:04 2001  ) AS
15:40:04 2002  BEGIN
15:40:04 2003  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V23.FALSE, GLOBAL_CONSTANTS_V23.TRUE)
15:40:04 2004  	   into out_is_revoke
15:40:04 2005  	 FROM
15:40:04 2006  	   offer_chain oc,
15:40:04 2007  	   subscription s,
15:40:04 2008  	   license l,
15:40:04 2009  	   invoice i
15:40:04 2010  	 where
15:40:04 2011  	   oc.id = s.offer_chain_id and
15:40:04 2012  	   s.id = l.subscription_id and
15:40:04 2013  	   l.invoice_id = i.id and
15:40:04 2014  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V23.TRUE and
15:40:04 2015  	   i.id = in_invoice_id and
15:40:04 2016  	   rownum < 2
15:40:04 2017  	 ;
15:40:04 2018  END IS_REVOKE_ENTITLEMENTS;
15:40:04 2019  
15:40:04 2020  END PROCS_INVOICE_V23;
15:40:04 2021  .
15:40:04 SQL> /

Package body created.

Elapsed: 00:00:00.20
15:40:05 SQL> 
15:40:05 SQL> prompt Compiling body for procs_fin_instruments.sql
Compiling body for procs_fin_instruments.sql
15:40:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V23" AS
15:40:05   2  
15:40:05   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
15:40:05   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:05   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
15:40:05   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
15:40:05   7  AS
15:40:05   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
15:40:05   9  BEGIN
15:40:05  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
15:40:05  11  	  PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_GIFT_CERTIFICATE (
15:40:05  12  	    in_gift_certificate_id	  => rec.Id,
15:40:05  13  	    in_gift_certificate_status_id => in_status_id,
15:40:05  14  	    in_updated_by		  => in_updater
15:40:05  15  	  );
15:40:05  16  	END LOOP;
15:40:05  17  END UPDATE_GC_STATUS_BY_INVOICE;
15:40:05  18  
15:40:05  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
15:40:05  20  	in_invoice_id		     IN NUMBER,
15:40:05  21  	out_is_invoice_for_redeem_gc OUT NUMBER
15:40:05  22  ) AS
15:40:05  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
15:40:05  24  var_is_for_gc NUMBER;
15:40:05  25  BEGIN
15:40:05  26  	SELECT
15:40:05  27  	  count(1) into var_is_for_gc
15:40:05  28  	FROM GIFT_CERTIFICATE GC
15:40:05  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
15:40:05  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
15:40:05  31  
15:40:05  32  	IF var_is_for_gc > 0 THEN
15:40:05  33  	  out_is_invoice_for_redeem_gc := 1;
15:40:05  34  	ELSE
15:40:05  35  	  out_is_invoice_for_redeem_gc := 0;
15:40:05  36  	END IF;
15:40:05  37  END IS_INVOICE_FOR_REDEEMED_GC;
15:40:05  38  
15:40:05  39  PROCEDURE GET_UNREDEEMED_GCS (
15:40:05  40  	out_result_set		OUT SYS_REFCURSOR,
15:40:05  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:40:05  42  	in_num_rows		IN NUMBER DEFAULT 10000,
15:40:05  43  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:40:05  44  ) AS
15:40:05  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
15:40:05  46  BEGIN
15:40:05  47  	OPEN out_result_set FOR
15:40:05  48  SELECT * FROM
15:40:05  49  (
15:40:05  50  	SELECT
15:40:05  51  	  gc.EXPIRATION_DATE,
15:40:05  52  	  ch.name,
15:40:05  53  	  ch.id offer_chain_id,
15:40:05  54  	  gc.sender_email,
15:40:05  55  	  gc.sender_name,
15:40:05  56  	  gc.recipient_email,
15:40:05  57  	  gc.recipient_name,
15:40:05  58  	  gc.purchase_date,
15:40:05  59  	  gc.redemption_date,
15:40:05  60  	  gc.purchaser_group_id,
15:40:05  61  	  gc.redeemer_group_id,
15:40:05  62  	  gc.code,
15:40:05  63  	  gc.gift_message,
15:40:05  64  	  gc.recipient_notify_date,
15:40:05  65  	  gc.id
15:40:05  66  	FROM
15:40:05  67  	  GIFT_CERTIFICATE gc,
15:40:05  68  	  OFFER_CHAIN ch
15:40:05  69  	WHERE
15:40:05  70  	  ch.id = gc.offer_chain_id
15:40:05  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
15:40:05  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
15:40:05  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
15:40:05  74  	  AND gc.redeemer_group_id is null
15:40:05  75  	  AND NOT EXISTS(
15:40:05  76  	    SELECT NULL
15:40:05  77  	    FROM PROCESS_RETRY_THROTTLE
15:40:05  78  	    WHERE PROCESS_NAME = in_process_name
15:40:05  79  	      AND GENERIC_ID = gc.id
15:40:05  80  	  ) AND EXISTS(
15:40:05  81  	    SELECT NULL
15:40:05  82  	    FROM
15:40:05  83  	      charge c,
15:40:05  84  	      transaction_attempt ta,
15:40:05  85  	      transaction t
15:40:05  86  	    WHERE
15:40:05  87  	      c.invoice_id = gc.purchase_invoice_id and
15:40:05  88  	      c.transaction_id = t.id and
15:40:05  89  	      t.id = ta.transaction_id and
15:40:05  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
15:40:05  91  	  ) AND NOT EXISTS (
15:40:05  92  	    SELECT NULL
15:40:05  93  	    FROM
15:40:05  94  	      charge c,
15:40:05  95  	      transaction t
15:40:05  96  	    WHERE
15:40:05  97  	      c.invoice_id = gc.purchase_invoice_id and
15:40:05  98  	      c.transaction_id = t.id and
15:40:05  99  	      t.is_refund = GLOBAL_CONSTANTS_V23.TRUE
15:40:05 100  	  )
15:40:05 101  	  AND ROWNUM <= in_num_rows*10
15:40:05 102  	  ORDER BY dbms_random.value
15:40:05 103  ) WHERE
15:40:05 104  	  ROWNUM <= in_num_rows;
15:40:05 105  EXCEPTION
15:40:05 106  WHEN OTHERS THEN
15:40:05 107  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 109  END GET_UNREDEEMED_GCS;
15:40:05 110  
15:40:05 111  PROCEDURE ADD_CREDIT_CARD (
15:40:05 112  /*
15:40:05 113  Throws exceptions:
15:40:05 114  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 115  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 116  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:05 117  */
15:40:05 118  	in_group_id		  IN NUMBER,
15:40:05 119  	in_updated_by		  IN VARCHAR2,
15:40:05 120  	in_instrument_name	  IN VARCHAR2,
15:40:05 121  	in_card_holder_name	  IN VARCHAR2,
15:40:05 122  	in_street_address	  IN VARCHAR2,
15:40:05 123  	in_street_address2	  IN VARCHAR2,
15:40:05 124  	in_state		  IN VARCHAR2,
15:40:05 125  	in_city 		  IN VARCHAR2,
15:40:05 126  	in_postal_code		  IN VARCHAR2,
15:40:05 127  	in_country		  IN CHAR,
15:40:05 128  	in_last_four_cc 	  IN VARCHAR2,
15:40:05 129  	in_expiration_date	  IN DATE,
15:40:05 130  	in_credit_card_type_id	  IN NUMBER,
15:40:05 131  	in_token		  IN VARCHAR2,
15:40:05 132  	in_chase_profile_id	  IN VARCHAR2,
15:40:05 133  	in_credit_card_status_id  IN NUMBER,
15:40:05 134  	in_private_first_name	  IN VARCHAR2,
15:40:05 135  	in_private_last_name	  IN VARCHAR2,
15:40:05 136  	out_credit_card_id	  OUT NUMBER
15:40:05 137  ) AS
15:40:05 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
15:40:05 139  -- VARIABLES
15:40:05 140  var_account_id	      NUMBER;
15:40:05 141  var_account_status      NUMBER;
15:40:05 142  var_credit_card_id      NUMBER;
15:40:05 143  temp_old_credit_card_id NUMBER;
15:40:05 144  -- EXCEPTIONS
15:40:05 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
15:40:05 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
15:40:05 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
15:40:05 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
15:40:05 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:40:05 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
15:40:05 151  var_charges_set		SYS_REFCURSOR;
15:40:05 152  var_charge_id		NUMBER;
15:40:05 153  var_charge_invoice_id	NUMBER;
15:40:05 154  var_charge_transaction_id NUMBER;
15:40:05 155  var_charge_amount 	NUMBER(10,2);
15:40:05 156  temp_out_charge_id	NUMBER;
15:40:05 157  temp_out_transaction_id	NUMBER;
15:40:05 158  var_order_id			VARCHAR2(1024);
15:40:05 159  BEGIN
15:40:05 160  
15:40:05 161  	-- Get account id
15:40:05 162  	-- Get account status
15:40:05 163  	SELECT
15:40:05 164  	  ACCOUNT.ID,
15:40:05 165  	  ACCOUNT.ACCOUNT_STATUS_ID
15:40:05 166  	  into
15:40:05 167  	  var_account_id,
15:40:05 168  	  var_account_status
15:40:05 169  	FROM
15:40:05 170  	  ACCOUNT
15:40:05 171  	WHERE
15:40:05 172  	  ACCOUNT.GROUP_ID = in_group_id;
15:40:05 173  
15:40:05 174  	SELECT
15:40:05 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
15:40:05 176  	FROM DUAL;
15:40:05 177  
15:40:05 178  	-- Insert new row in CREDIT_CARD table
15:40:05 179  	PROCS_FIN_INSTRUMENTS_CRU_V23.CREATE_CREDIT_CARD(
15:40:05 180  	  out_credit_card_id	      => var_credit_card_id,
15:40:05 181  	  in_account_id 	      => var_account_id,
15:40:05 182  	  in_instrument_name	      => in_instrument_name,
15:40:05 183  	  in_private_card_holder_name => in_card_holder_name,
15:40:05 184  	  in_private_street_address   => in_street_address,
15:40:05 185  	  in_private_street_address2  => in_street_address2,
15:40:05 186  	  in_state		      => in_state,
15:40:05 187  	  in_city		      => in_city,
15:40:05 188  	  in_postal_code	      => in_postal_code,
15:40:05 189  	  in_country		      => in_country,
15:40:05 190  	  in_last_four_cc	      => in_last_four_cc,
15:40:05 191  	  in_expiration_date	      => in_expiration_date,
15:40:05 192  	  in_credit_card_type_id      => in_credit_card_type_id,
15:40:05 193  	  in_secret_token	      => in_token,
15:40:05 194  	  in_chase_profile_id	      => in_chase_profile_id,
15:40:05 195  	  in_created_by 	      => in_updated_by,
15:40:05 196  	  in_credit_card_status_id    => in_credit_card_status_id,
15:40:05 197  	  in_private_first_name       => in_private_first_name,
15:40:05 198  	  in_private_last_name	      => in_private_last_name
15:40:05 199  	);
15:40:05 200  
15:40:05 201  	out_credit_card_id := var_credit_card_id;
15:40:05 202  
15:40:05 203  EXCEPTION
15:40:05 204  WHEN NO_DATA_FOUND THEN
15:40:05 205  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 206  	  SPROC_NAME, 'No such account');
15:40:05 207  WHEN BAD_OLD_CREDIT_CARD THEN
15:40:05 208  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 209  	  SPROC_NAME, 'Bad old credit card id');
15:40:05 210  WHEN BAD_IS_DEFAULT_VALUE THEN
15:40:05 211  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 212  	  SPROC_NAME, 'Bad is_default value');
15:40:05 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
15:40:05 214  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
15:40:05 216  WHEN BAD_ACCOUNT_STATUS THEN
15:40:05 217  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 218  	  SPROC_NAME, 'Account is not active');
15:40:05 219  WHEN OTHERS THEN
15:40:05 220  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 222  END ADD_CREDIT_CARD;
15:40:05 223  
15:40:05 224  /******************************************************************************/
15:40:05 225  
15:40:05 226  PROCEDURE ADD_PAYPAL (
15:40:05 227  /*
15:40:05 228  Throws exceptions:
15:40:05 229  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 230  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 231  */
15:40:05 232  	in_group_id			IN NUMBER,
15:40:05 233  	in_instrument_name		IN VARCHAR2,
15:40:05 234  	in_private_email_address	IN VARCHAR2,
15:40:05 235  	in_created_by			IN VARCHAR2,
15:40:05 236  	in_paypal_status_id		IN NUMBER,
15:40:05 237  	in_paypal_prvt_street_address	IN VARCHAR2,
15:40:05 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
15:40:05 239  	in_state			IN VARCHAR2,
15:40:05 240  	in_city 			IN VARCHAR2,
15:40:05 241  	in_postal_code			IN VARCHAR2,
15:40:05 242  	in_country			IN CHAR,
15:40:05 243  	in_expiration_date		IN DATE,
15:40:05 244  	in_secret_token 		IN VARCHAR2,
15:40:05 245  	out_paypal_id			OUT NUMBER
15:40:05 246  ) AS
15:40:05 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
15:40:05 248  var_paypal_id NUMBER;
15:40:05 249  var_account_id  NUMBER;
15:40:05 250  -- EXCEPTIONS
15:40:05 251  BAD_GROUP_ID	    EXCEPTION;
15:40:05 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
15:40:05 253  BAD_PAYPAL_STATUS     EXCEPTION;
15:40:05 254  EXCEPTION_MESSAGE VARCHAR2(1024);
15:40:05 255  BEGIN
15:40:05 256  
15:40:05 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_ACTIVE
15:40:05 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_INACTIVE
15:40:05 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_FROZEN THEN
15:40:05 260  	  RAISE BAD_PAYPAL_STATUS;
15:40:05 261  	END IF;
15:40:05 262  
15:40:05 263  	BEGIN
15:40:05 264  	  SELECT
15:40:05 265  	    a.id into var_account_id
15:40:05 266  	  from
15:40:05 267  	    account a
15:40:05 268  	  where
15:40:05 269  	    a.group_id = in_group_id;
15:40:05 270  	  EXCEPTION
15:40:05 271  	    WHEN NO_DATA_FOUND THEN
15:40:05 272  	      RAISE BAD_GROUP_ID;
15:40:05 273  	END;
15:40:05 274  
15:40:05 275  	BEGIN
15:40:05 276  	  PROCS_FIN_INSTRUMENTS_CRU_V23.CREATE_PAYPAL(
15:40:05 277  	    out_paypal_id		   => var_paypal_id,
15:40:05 278  	    in_paypal_id		   => NULL,
15:40:05 279  	    in_account_id		   => var_account_id,
15:40:05 280  	    in_instrument_name		   => in_instrument_name,
15:40:05 281  	    in_private_email_address	   => in_private_email_address,
15:40:05 282  	    in_created_by		   => in_created_by,
15:40:05 283  	    in_paypal_status_id 	   => in_paypal_status_id,
15:40:05 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
15:40:05 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
15:40:05 286  	    in_state			   => in_state,
15:40:05 287  	    in_city			   => in_city,
15:40:05 288  	    in_postal_code		   => in_postal_code,
15:40:05 289  	    in_country			   => in_country,
15:40:05 290  	    in_expiration_date		   => in_expiration_date,
15:40:05 291  	    in_secret_token		   => in_secret_token
15:40:05 292  	  );
15:40:05 293  	  EXCEPTION
15:40:05 294  	    WHEN OTHERS THEN
15:40:05 295  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
15:40:05 297  	END;
15:40:05 298  
15:40:05 299  	out_paypal_id := var_paypal_id;
15:40:05 300  
15:40:05 301  EXCEPTION
15:40:05 302  WHEN BAD_GROUP_ID THEN
15:40:05 303  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 304  	  SPROC_NAME, 'No such group id');
15:40:05 305  WHEN BAD_PAYPAL_STATUS THEN
15:40:05 306  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 307  	  SPROC_NAME, 'Bad paypal status');
15:40:05 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
15:40:05 309  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
15:40:05 311  WHEN OTHERS THEN
15:40:05 312  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 314  END ADD_PAYPAL;
15:40:05 315  
15:40:05 316  /******************************************************************************/
15:40:05 317  
15:40:05 318  PROCEDURE DISABLE_CREDIT_CARD (
15:40:05 319  /*
15:40:05 320  Throws exceptions:
15:40:05 321  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 322  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 323  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:05 324  */
15:40:05 325  	in_credit_card_id IN NUMBER,
15:40:05 326  	in_updated_by	  IN VARCHAR2
15:40:05 327  ) AS
15:40:05 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
15:40:05 329  -- VARIBLES
15:40:05 330  var_account_id		     NUMBER;
15:40:05 331  var_group_id		     NUMBER;
15:40:05 332  var_credit_card_status	     NUMBER;
15:40:05 333  var_pending_transactions_num   NUMBER;
15:40:05 334  var_pending_invoices_num	     NUMBER;
15:40:05 335  current_def_instrument_type_id NUMBER;
15:40:05 336  current_def_instrument_id      NUMBER;
15:40:05 337  -- EXCEPTIONS
15:40:05 338  BAD_CC_STATUS		   EXCEPTION;
15:40:05 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
15:40:05 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
15:40:05 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
15:40:05 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
15:40:05 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
15:40:05 344  BEGIN
15:40:05 345  
15:40:05 346  	-- Get credit card status
15:40:05 347  	-- Get account id
15:40:05 348  	SELECT
15:40:05 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
15:40:05 350  	  CREDIT_CARD.ACCOUNT_ID
15:40:05 351  	  into
15:40:05 352  	  var_credit_card_status,
15:40:05 353  	  var_account_id
15:40:05 354  	FROM
15:40:05 355  	  CREDIT_CARD
15:40:05 356  	WHERE
15:40:05 357  	  CREDIT_CARD.ID = in_credit_card_id;
15:40:05 358  
15:40:05 359  	-- Check that we can disable this credit card (STUB)
15:40:05 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
15:40:05 362  	END IF;
15:40:05 363  
15:40:05 364  	-- Get account id
15:40:05 365  	SELECT
15:40:05 366  	  ACCOUNT.GROUP_ID into var_group_id
15:40:05 367  	FROM
15:40:05 368  	  ACCOUNT
15:40:05 369  	WHERE
15:40:05 370  	  ACCOUNT.ID = var_account_id;
15:40:05 371  
15:40:05 372  	-- Card should to be active
15:40:05 373  	IF var_credit_card_status != GLOBAL_STATUSES_V23.CREDIT_CARD_ACTIVE THEN
15:40:05 374  	  RAISE BAD_CC_STATUS;
15:40:05 375  	END IF;
15:40:05 376  
15:40:05 377  	-- Looking for pending transactions associated with given credit card
15:40:05 378  	SELECT
15:40:05 379  	  COUNT(*) into var_pending_invoices_num
15:40:05 380  	FROM
15:40:05 381  	  CHARGE
15:40:05 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:40:05 383  	WHERE
15:40:05 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
15:40:05 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
15:40:05 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING;
15:40:05 387  
15:40:05 388  	IF var_pending_invoices_num > 0 THEN
15:40:05 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
15:40:05 390  	END IF;
15:40:05 391  
15:40:05 392  	-- Getting current default financial instrument
15:40:05 393  	BEGIN
15:40:05 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
15:40:05 395  	    in_group_id 	   => var_group_id,
15:40:05 396  	    out_instrument_type_id => current_def_instrument_type_id,
15:40:05 397  	    out_instrument_id	   => current_def_instrument_id
15:40:05 398  	  );
15:40:05 399  	  EXCEPTION
15:40:05 400  	    WHEN OTHERS THEN
15:40:05 401  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
15:40:05 403  	END;
15:40:05 404  
15:40:05 405  	-- Checking that credit card is not default
15:40:05 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
15:40:05 407  	  AND current_def_instrument_id = in_credit_card_id THEN
15:40:05 408  	  BEGIN
15:40:05 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
15:40:05 410  	      in_group_id => var_group_id
15:40:05 411  	    );
15:40:05 412  	  EXCEPTION
15:40:05 413  	    WHEN OTHERS THEN
15:40:05 414  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
15:40:05 416  	  END;
15:40:05 417  	END IF;
15:40:05 418  
15:40:05 419  	-- Update credit card status
15:40:05 420  	PROCS_FIN_INSTRUMENTS_V23.UPDATE_CREDIT_CARD_STATUS(
15:40:05 421  	  in_credit_card_id	   => in_credit_card_id,
15:40:05 422  	  in_updated_by 	   => in_updated_by,
15:40:05 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V23.CREDIT_CARD_DISABLED
15:40:05 424  	);
15:40:05 425  
15:40:05 426  EXCEPTION
15:40:05 427  WHEN NO_DATA_FOUND THEN
15:40:05 428  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 429  	  SPROC_NAME, 'No such credit card');
15:40:05 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
15:40:05 431  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
15:40:05 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
15:40:05 434  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
15:40:05 436  WHEN BAD_CC_STATUS THEN
15:40:05 437  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 438  	  SPROC_NAME, 'Credit card is not active');
15:40:05 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
15:40:05 440  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
15:40:05 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
15:40:05 443  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
15:40:05 445  WHEN OTHERS THEN
15:40:05 446  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 448  END DISABLE_CREDIT_CARD;
15:40:05 449  
15:40:05 450  /******************************************************************************/
15:40:05 451  
15:40:05 452  PROCEDURE DISABLE_PAYPAL (
15:40:05 453  /*
15:40:05 454  Throws exceptions:
15:40:05 455  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 456  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 457  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:05 458  */
15:40:05 459  	in_paypal_id  IN NUMBER,
15:40:05 460  	in_updated_by IN VARCHAR2
15:40:05 461  ) AS
15:40:05 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
15:40:05 463  -- VARIABLES
15:40:05 464  var_paypal_status_id NUMBER;
15:40:05 465  var_account_id	   NUMBER;
15:40:05 466  var_group_id	   NUMBER;
15:40:05 467  var_pending_invoices_num NUMBER;
15:40:05 468  current_def_instrument_type_id NUMBER;
15:40:05 469  current_def_instrument_id NUMBER;
15:40:05 470  -- EXCEPTIONS
15:40:05 471  BAD_PAYPAL_ID EXCEPTION;
15:40:05 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
15:40:05 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
15:40:05 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
15:40:05 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
15:40:05 476  EXCEPTION_MESSAGE VARCHAR2(1024);
15:40:05 477  BEGIN
15:40:05 478  
15:40:05 479  	-- Get Paypal status
15:40:05 480  	-- Get account
15:40:05 481  	BEGIN
15:40:05 482  	  SELECT
15:40:05 483  	    PAYPAL.PAYPAL_STATUS_ID,
15:40:05 484  	    PAYPAL.ACCOUNT_ID
15:40:05 485  	    into
15:40:05 486  	    var_paypal_status_id,
15:40:05 487  	    var_account_id
15:40:05 488  	  FROM
15:40:05 489  	    PAYPAL
15:40:05 490  	  WHERE
15:40:05 491  	    PAYPAL.ID = in_paypal_id;
15:40:05 492  	  EXCEPTION
15:40:05 493  	    WHEN NO_DATA_FOUND THEN
15:40:05 494  	      RAISE BAD_PAYPAL_ID;
15:40:05 495  	END;
15:40:05 496  
15:40:05 497  	-- Get group id
15:40:05 498  	SELECT
15:40:05 499  	  ACCOUNT.GROUP_ID into var_group_id
15:40:05 500  	FROM
15:40:05 501  	  ACCOUNT
15:40:05 502  	WHERE
15:40:05 503  	  ACCOUNT.ID = var_account_id;
15:40:05 504  
15:40:05 505  	-- Card should not be disabled
15:40:05 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V23.PAYPAL_INACTIVE THEN
15:40:05 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
15:40:05 508  	END IF;
15:40:05 509  
15:40:05 510  	-- Looking for pending transactions associated with given credit card
15:40:05 511  	SELECT
15:40:05 512  	  COUNT(*) into var_pending_invoices_num
15:40:05 513  	FROM
15:40:05 514  	  CHARGE
15:40:05 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
15:40:05 516  	WHERE
15:40:05 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
15:40:05 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
15:40:05 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING;
15:40:05 520  
15:40:05 521  	IF var_pending_invoices_num > 0 THEN
15:40:05 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
15:40:05 523  	END IF;
15:40:05 524  
15:40:05 525  	-- Getting current default financial instrument
15:40:05 526  	BEGIN
15:40:05 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
15:40:05 528  	    in_group_id 	   => var_group_id,
15:40:05 529  	    out_instrument_type_id => current_def_instrument_type_id,
15:40:05 530  	    out_instrument_id	   => current_def_instrument_id
15:40:05 531  	  );
15:40:05 532  	  EXCEPTION
15:40:05 533  	    WHEN OTHERS THEN
15:40:05 534  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
15:40:05 536  	END;
15:40:05 537  
15:40:05 538  	-- Checking that credit card is not default
15:40:05 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
15:40:05 540  	  AND current_def_instrument_id = in_paypal_id THEN
15:40:05 541  	  BEGIN
15:40:05 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
15:40:05 543  	      in_group_id => var_group_id
15:40:05 544  	    );
15:40:05 545  	  EXCEPTION
15:40:05 546  	    WHEN OTHERS THEN
15:40:05 547  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
15:40:05 549  	  END;
15:40:05 550  	END IF;
15:40:05 551  
15:40:05 552  	PROCS_FIN_INSTRUMENTS_V23.UPDATE_PAYPAL_STATUS(
15:40:05 553  	  in_paypal_id	      => in_paypal_id,
15:40:05 554  	  in_updated_by       => in_updated_by,
15:40:05 555  	  in_paypal_status_id => GLOBAL_STATUSES_V23.PAYPAL_INACTIVE
15:40:05 556  	);
15:40:05 557  
15:40:05 558  EXCEPTION
15:40:05 559  WHEN BAD_PAYPAL_ID THEN
15:40:05 560  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 561  	  SPROC_NAME, 'No such paypal');
15:40:05 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
15:40:05 563  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 564  	  SPROC_NAME, 'Paypal already inactive');
15:40:05 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
15:40:05 566  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
15:40:05 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
15:40:05 569  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
15:40:05 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
15:40:05 572  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
15:40:05 574  WHEN OTHERS THEN
15:40:05 575  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 577  END DISABLE_PAYPAL;
15:40:05 578  
15:40:05 579  /******************************************************************************/
15:40:05 580  
15:40:05 581  PROCEDURE UPDATE_CREDIT_CARD (
15:40:05 582  /*
15:40:05 583  Throws exceptions:
15:40:05 584  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 585  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 586  */
15:40:05 587  	in_credit_card_id	  IN NUMBER,
15:40:05 588  	in_updated_by		  IN VARCHAR2,
15:40:05 589  	in_instrument_name	  IN VARCHAR2,
15:40:05 590  	in_is_default		  IN NUMBER
15:40:05 591  ) AS
15:40:05 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
15:40:05 593  -- VARIABLES
15:40:05 594  var_account_id NUMBER;
15:40:05 595  var_group_id   NUMBER;
15:40:05 596  temp_cc_rownum NUMBER;
15:40:05 597  current_def_instrument_type_id NUMBER;
15:40:05 598  current_def_instrument_id      NUMBER;
15:40:05 599  -- EXCEPTION
15:40:05 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
15:40:05 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
15:40:05 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
15:40:05 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
15:40:05 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:40:05 605  BEGIN
15:40:05 606  
15:40:05 607  	-- Get account id
15:40:05 608  	SELECT
15:40:05 609  	  CREDIT_CARD.ACCOUNT_ID
15:40:05 610  	  into
15:40:05 611  	  var_account_id
15:40:05 612  	FROM
15:40:05 613  	  CREDIT_CARD
15:40:05 614  	WHERE
15:40:05 615  	  CREDIT_CARD.ID = in_credit_card_id;
15:40:05 616  
15:40:05 617  	-- Get group id
15:40:05 618  	SELECT
15:40:05 619  	  ACCOUNT.GROUP_ID into var_group_id
15:40:05 620  	FROM
15:40:05 621  	  ACCOUNT
15:40:05 622  	WHERE
15:40:05 623  	  ACCOUNT.ID = var_account_id;
15:40:05 624  
15:40:05 625  	-- Check that passed data is correct
15:40:05 626  	IF in_is_default != GLOBAL_CONSTANTS_V23.TRUE
15:40:05 627  	  AND in_is_default != GLOBAL_CONSTANTS_V23.FALSE
15:40:05 628  	  AND in_is_default IS NOT NULL THEN
15:40:05 629  	  RAISE BAD_IS_DEFAULT_VALUE;
15:40:05 630  	END IF;
15:40:05 631  
15:40:05 632  	-- Update credit card
15:40:05 633  	IF in_instrument_name IS NOT NULL THEN
15:40:05 634  	  PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_CREDIT_CARD(
15:40:05 635  	    in_credit_card_id  => in_credit_card_id,
15:40:05 636  	    in_updated_by      => in_updated_by,
15:40:05 637  	    in_instrument_name => in_instrument_name
15:40:05 638  	  );
15:40:05 639  	END IF;
15:40:05 640  
15:40:05 641  	-- Set default financial instrument
15:40:05 642  	IF in_is_default = GLOBAL_CONSTANTS_V23.TRUE THEN
15:40:05 643  	  BEGIN
15:40:05 644  	    PROCS_FIN_INSTRUMENTS_V23.SET_DEF_FINANCIAL_INSTRUMENT(
15:40:05 645  	      in_group_id	    => var_group_id,
15:40:05 646  	      in_instrument_type_id => GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD,
15:40:05 647  	      in_instrument_id	    => in_credit_card_id,
15:40:05 648  	      in_updated_by	    => in_updated_by
15:40:05 649  	    );
15:40:05 650  	    EXCEPTION
15:40:05 651  	      WHEN OTHERS THEN
15:40:05 652  		EXCEPTION_MESSAGE := SQLERRM;
15:40:05 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
15:40:05 654  	  END;
15:40:05 655  	END IF;
15:40:05 656  
15:40:05 657  	-- Set default financial instrument
15:40:05 658  	IF in_is_default = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 659  	  BEGIN
15:40:05 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
15:40:05 661  	      in_group_id	     => var_group_id,
15:40:05 662  	      out_instrument_type_id => current_def_instrument_type_id,
15:40:05 663  	      out_instrument_id      => current_def_instrument_id
15:40:05 664  	    );
15:40:05 665  	  EXCEPTION
15:40:05 666  	    WHEN OTHERS THEN
15:40:05 667  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
15:40:05 669  	  END;
15:40:05 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
15:40:05 671  	    AND current_def_instrument_id = in_credit_card_id THEN
15:40:05 672  	    BEGIN
15:40:05 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
15:40:05 674  		in_group_id => var_group_id
15:40:05 675  	      );
15:40:05 676  	      EXCEPTION
15:40:05 677  		WHEN OTHERS THEN
15:40:05 678  		  EXCEPTION_MESSAGE := SQLERRM;
15:40:05 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
15:40:05 680  	    END;
15:40:05 681  	  END IF;
15:40:05 682  	END IF;
15:40:05 683  
15:40:05 684  EXCEPTION
15:40:05 685  WHEN NO_DATA_FOUND THEN
15:40:05 686  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 687  	  SPROC_NAME, 'No such credit card');
15:40:05 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
15:40:05 689  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
15:40:05 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
15:40:05 692  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
15:40:05 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
15:40:05 695  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
15:40:05 697  WHEN OTHERS THEN
15:40:05 698  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 700  END UPDATE_CREDIT_CARD;
15:40:05 701  
15:40:05 702  /******************************************************************************/
15:40:05 703  
15:40:05 704  	PROCEDURE START_GC_PURCHASING (
15:40:05 705  	  in_group_id		    IN NUMBER,
15:40:05 706  	  in_offer_chain_id	    IN VARCHAR2,
15:40:05 707  	  in_gift_certificate_code  IN	VARCHAR2,
15:40:05 708  	  in_created_by 	    IN	VARCHAR2,
15:40:05 709  	  in_recipient_name	    IN	VARCHAR2,
15:40:05 710  	  in_recipient_email	    IN	VARCHAR2,
15:40:05 711  	  in_recipient_address_id   IN NUMBER,
15:40:05 712  	  in_recipient_notify_date  IN DATE,
15:40:05 713  	  in_sender_name	    IN VARCHAR2,
15:40:05 714  	  in_sender_email	    IN VARCHAR2,
15:40:05 715  	  in_gift_message	    IN	VARCHAR2,
15:40:05 716  	  in_expiration_date	    IN DATE,
15:40:05 717  	  in_campaign		    IN VARCHAR2,
15:40:05 718  	  in_reference_code	    IN VARCHAR2,
15:40:05 719  	  out_gift_certificate_id   OUT NUMBER,
15:40:05 720  	  out_invoice_id	    OUT NUMBER
15:40:05 721  	) AS
15:40:05 722  	  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
15:40:05 723  -- VARIABLES
15:40:05 724  	  var_account_id	    NUMBER;
15:40:05 725  	  temp_gc_code		    GIFT_CERTIFICATE.CODE%TYPE;
15:40:05 726  	  var_och_is_gc 	    NUMBER;
15:40:05 727  	  var_offer_chain_status_id NUMBER;
15:40:05 728  	  var_is_for_redemption     NUMBER;
15:40:05 729  	  var_new_invoice_id	    NUMBER;
15:40:05 730  	  var_gift_cert_id	    NUMBER;
15:40:05 731  	  var_account_tax_exempt_id VARCHAR2(255);
15:40:05 732  -- EXCEPTIONS
15:40:05 733  	    BAD_GROUP_ID		  EXCEPTION;
15:40:05 734  	    GC_CODE_ALREADY_EXISTS	  EXCEPTION;
15:40:05 735  	    BAD_OFFER_CHAIN_ID		  EXCEPTION;
15:40:05 736  	    OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
15:40:05 737  	    BAD_OFFER_CHAIN_STATUS	  EXCEPTION;
15:40:05 738  	    CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
15:40:05 739  	    CAN_NOT_CREATE_INVOICE	  EXCEPTION;
15:40:05 740  	    OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
15:40:05 741  	    CAN_NOT_CREATE_LINE_ITEMS	  EXCEPTION;
15:40:05 742  	    REF_CODE_ALREADY_EXISTS	  EXCEPTION;
15:40:05 743  
15:40:05 744  	  EXCEPTION_MESSAGE VARCHAR2(1024);
15:40:05 745  	  BEGIN
15:40:05 746  -- Get account id
15:40:05 747  	    BEGIN
15:40:05 748  	      SELECT
15:40:05 749  		ACCOUNT.ID,
15:40:05 750  		ACCOUNT.TAX_EXEMPT_ID
15:40:05 751  	      into
15:40:05 752  		var_account_id,
15:40:05 753  		var_account_tax_exempt_id
15:40:05 754  	      FROM
15:40:05 755  		ACCOUNT
15:40:05 756  	      WHERE
15:40:05 757  		ACCOUNT.GROUP_ID = in_group_id;
15:40:05 758  	      EXCEPTION
15:40:05 759  	      WHEN NO_DATA_FOUND THEN
15:40:05 760  	      RAISE BAD_GROUP_ID;
15:40:05 761  	    END;
15:40:05 762  
15:40:05 763  -- Check for the same code
15:40:05 764  	    BEGIN
15:40:05 765  	      SELECT
15:40:05 766  		GIFT_CERTIFICATE.CODE into temp_gc_code
15:40:05 767  	      FROM
15:40:05 768  		GIFT_CERTIFICATE
15:40:05 769  	      WHERE
15:40:05 770  		GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
15:40:05 771  
15:40:05 772  	      RAISE GC_CODE_ALREADY_EXISTS;
15:40:05 773  
15:40:05 774  	      EXCEPTION
15:40:05 775  	      WHEN NO_DATA_FOUND THEN
15:40:05 776  	      NULL;
15:40:05 777  	    END;
15:40:05 778  
15:40:05 779  -- Get offer chain flag "is_gift_certificate"
15:40:05 780  	    BEGIN
15:40:05 781  	      SELECT
15:40:05 782  		OFFER_CHAIN.IS_GIFT_CERTIFICATE,
15:40:05 783  		OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
15:40:05 784  	      into
15:40:05 785  		var_och_is_gc,
15:40:05 786  		var_offer_chain_status_id
15:40:05 787  	      FROM
15:40:05 788  		OFFER_CHAIN
15:40:05 789  	      WHERE
15:40:05 790  		OFFER_CHAIN.ID = in_offer_chain_id;
15:40:05 791  	      EXCEPTION
15:40:05 792  	      WHEN NO_DATA_FOUND THEN
15:40:05 793  	      RAISE BAD_OFFER_CHAIN_ID;
15:40:05 794  	    END;
15:40:05 795  
15:40:05 796  	    IF var_och_is_gc != GLOBAL_CONSTANTS_V23.TRUE
15:40:05 797  	       OR var_och_is_gc IS NULL THEN
15:40:05 798  	      RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
15:40:05 799  	    END IF;
15:40:05 800  
15:40:05 801  	    IF var_offer_chain_status_id != GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE THEN
15:40:05 802  	      RAISE BAD_OFFER_CHAIN_STATUS;
15:40:05 803  	    END IF;
15:40:05 804  
15:40:05 805  -- norlov: #38151 check if the OC is for Redemption:
15:40:05 806  	    SELECT
15:40:05 807  	      COUNT(*) into var_is_for_redemption
15:40:05 808  	    FROM
15:40:05 809  	      OFFER_CHAIN_ELIGIBILITY
15:40:05 810  	    WHERE
15:40:05 811  	      OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:40:05 812  	      AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V23.GIFT_CERTIFICATE_REQUIRED
15:40:05 813  	      AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V23.ELIGIBILITY_FLAG_SET;
15:40:05 814  
15:40:05 815  	    IF var_is_for_redemption > 0 THEN
15:40:05 816  	      RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
15:40:05 817  	    END IF;
15:40:05 818  
15:40:05 819  -- Create new invoice
15:40:05 820  	    BEGIN
15:40:05 821  	      PROCS_INVOICE_V23.CREATE_INVOICE(
15:40:05 822  		  in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_OPEN,
15:40:05 823  		  in_created_by     => in_created_by,
15:40:05 824  		  in_tax_exempt_id  => var_account_tax_exempt_id,
15:40:05 825  		  out_invoice_id    => var_new_invoice_id
15:40:05 826  	      );
15:40:05 827  	      EXCEPTION
15:40:05 828  	      WHEN OTHERS THEN
15:40:05 829  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 830  	      RAISE CAN_NOT_CREATE_INVOICE;
15:40:05 831  	    END;
15:40:05 832  
15:40:05 833  -- Add line items for new invoice
15:40:05 834  	    BEGIN
15:40:05 835  	      FOR f_offer_data IN (
15:40:05 836  	      SELECT
15:40:05 837  		OFFER_ID,
15:40:05 838  		NUM_RECURRENCES
15:40:05 839  	      FROM
15:40:05 840  		OFFER_OFFER_CHAIN
15:40:05 841  	      WHERE
15:40:05 842  		OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:05 843  	      )
15:40:05 844  	      LOOP
15:40:05 845  	      IF f_offer_data.NUM_RECURRENCES < 1 THEN
15:40:05 846  		RAISE OFFER_REC_NUM_LESS_THAN_ONE;
15:40:05 847  	      END IF;
15:40:05 848  	      FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
15:40:05 849  	      LOOP
15:40:05 850  		PROCS_LINE_ITEMS_V23.ADD_LINE_ITEMS(
15:40:05 851  		    in_invoice_id => var_new_invoice_id,
15:40:05 852  		    in_offer_id   => f_offer_data.OFFER_ID,
15:40:05 853  		    in_created_by => in_created_by
15:40:05 854  		);
15:40:05 855  	      END LOOP;
15:40:05 856  	      END LOOP;
15:40:05 857  
15:40:05 858  	      EXCEPTION
15:40:05 859  	      WHEN OTHERS THEN
15:40:05 860  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 861  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
15:40:05 862  	    END;
15:40:05 863  
15:40:05 864  	    BEGIN
15:40:05 865  	      PROCS_FIN_INSTRUMENTS_CRU_V23.CREATE_GIFT_CERTIFICATE(
15:40:05 866  		  out_gift_certificate_id	=> var_gift_cert_id,
15:40:05 867  		  in_purchaser_group_id 	=> in_group_id,
15:40:05 868  		  in_purchaser_invoice_id	=> var_new_invoice_id,
15:40:05 869  		  in_offer_chain_id		=> in_offer_chain_id,
15:40:05 870  		  in_expiration_date		=> in_expiration_date,
15:40:05 871  		  in_purchase_date		=> SYSDATE,
15:40:05 872  		  in_gift_certificate_status_id => GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE,
15:40:05 873  		  in_code			=> in_gift_certificate_code,
15:40:05 874  		  in_created_by 		=> in_created_by,
15:40:05 875  		  in_recipient_name		=> in_recipient_name,
15:40:05 876  		  in_gift_message		=> in_gift_message,
15:40:05 877  		  in_recipient_email		=> in_recipient_email,
15:40:05 878  		  in_sender_email		=> in_sender_email,
15:40:05 879  		  in_sender_name		=> in_sender_name,
15:40:05 880  		  in_recipient_address_id	=> in_recipient_address_id,
15:40:05 881  		  in_recipient_notify_date	=> in_recipient_notify_date,
15:40:05 882  		  in_campaign			=> in_campaign,
15:40:05 883  		  in_reference_code		=> in_reference_code
15:40:05 884  	      );
15:40:05 885  	      EXCEPTION WHEN DUP_VAL_ON_INDEX THEN RAISE REF_CODE_ALREADY_EXISTS;
15:40:05 886  	    END;
15:40:05 887  
15:40:05 888  	    out_gift_certificate_id := var_gift_cert_id;
15:40:05 889  	    out_invoice_id := var_new_invoice_id;
15:40:05 890  
15:40:05 891  	    EXCEPTION
15:40:05 892  	    WHEN BAD_OFFER_CHAIN_STATUS THEN
15:40:05 893  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 894  					     SPROC_NAME, 'Offer chain is not active');
15:40:05 895  	    WHEN GC_CODE_ALREADY_EXISTS THEN
15:40:05 896  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:05 897  					     SPROC_NAME, 'Gift certificate with same code already exists');
15:40:05 898  	    WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
15:40:05 899  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 900  					     SPROC_NAME, 'This offer chain can not be used for gift certificate');
15:40:05 901  	    WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
15:40:05 902  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 903  					     SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
15:40:05 904  	    WHEN CAN_NOT_CREATE_INVOICE THEN
15:40:05 905  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 906  					     SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
15:40:05 907  	    WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
15:40:05 908  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 909  					     SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
15:40:05 910  	    WHEN BAD_GROUP_ID THEN
15:40:05 911  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 912  					     SPROC_NAME, 'No such group id');
15:40:05 913  	    WHEN BAD_OFFER_CHAIN_ID THEN
15:40:05 914  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 915  					     SPROC_NAME, 'No such offer chain');
15:40:05 916  	    WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
15:40:05 917  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 918  					     SPROC_NAME, 'Some offer has recurrences number less than 1');
15:40:05 919  	    WHEN REF_CODE_ALREADY_EXISTS THEN
15:40:05 920  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 921  					     SPROC_NAME, 'reference_code already used');
15:40:05 922  	    WHEN OTHERS THEN
15:40:05 923  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 924  					     SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 925  	  END START_GC_PURCHASING;
15:40:05 926  /******************************************************************************/
15:40:05 927  
15:40:05 928  	PROCEDURE FINALIZE_GC_PURCHASING (
15:40:05 929  	  in_invoice_id 	IN NUMBER,
15:40:05 930  	  in_created_by 	IN VARCHAR2,
15:40:05 931  	  in_instrument_id	IN NUMBER,
15:40:05 932  	  in_instrument_type_id IN NUMBER,
15:40:05 933  	  in_order_id		IN VARCHAR2,
15:40:05 934  	  in_transaction_id	IN NUMBER,
15:40:05 935  	  out_charge_amount	OUT NUMBER
15:40:05 936  	) AS
15:40:05 937  	  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
15:40:05 938  -- VARIABLES
15:40:05 939  	  temp_transaction_id_count NUMBER;
15:40:05 940  	  var_invoice_amount	    NUMBER(10,2);
15:40:05 941  	  var_transaction_id	    NUMBER;
15:40:05 942  	  var_new_charge_id	    NUMBER;
15:40:05 943  -- EXCEPTIONS
15:40:05 944  	    BAD_CREDIT_CARD_ID		EXCEPTION;
15:40:05 945  	    BAD_PAYPAL_ID		EXCEPTION;
15:40:05 946  	    BAD_INSTRUMENT_TYPE 	EXCEPTION;
15:40:05 947  	    TRANSACTION_EXISTS		EXCEPTION;
15:40:05 948  	    CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
15:40:05 949  	    CAN_NOT_USE_FCINSTR 	EXCEPTION;
15:40:05 950  	    CAN_NOT_CREATE_TRANSACTION	EXCEPTION;
15:40:05 951  	    CAN_NOT_CREATE_CHARGE	EXCEPTION;
15:40:05 952  	  EXCEPTION_MESSAGE   VARCHAR2(1024);
15:40:05 953  	  BEGIN
15:40:05 954  
15:40:05 955  -- Check that instrument exists
15:40:05 956  	    IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
15:40:05 957  	      IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 958  		RAISE BAD_CREDIT_CARD_ID;
15:40:05 959  	      END IF;
15:40:05 960  	    ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
15:40:05 961  	      IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 962  		RAISE BAD_PAYPAL_ID;
15:40:05 963  	      END IF;
15:40:05 964  	    ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT THEN
15:40:05 965  	      NULL;
15:40:05 966  	    ELSE
15:40:05 967  	      RAISE BAD_INSTRUMENT_TYPE;
15:40:05 968  	    END IF;
15:40:05 969  
15:40:05 970  -- Check that transaction with given id do not exists
15:40:05 971  	    SELECT
15:40:05 972  	      COUNT(*) into temp_transaction_id_count
15:40:05 973  	    FROM
15:40:05 974  	      TRANSACTION
15:40:05 975  	    WHERE
15:40:05 976  	      TRANSACTION.ID = in_transaction_id;
15:40:05 977  
15:40:05 978  	    IF temp_transaction_id_count > 0 THEN
15:40:05 979  	      RAISE TRANSACTION_EXISTS;
15:40:05 980  	    END IF;
15:40:05 981  
15:40:05 982  -- Calculate new invoice amount
15:40:05 983  	    BEGIN
15:40:05 984  	      PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
15:40:05 985  	      EXCEPTION
15:40:05 986  	      WHEN OTHERS THEN
15:40:05 987  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 988  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:40:05 989  	    END;
15:40:05 990  
15:40:05 991  	    IF var_invoice_amount > 0
15:40:05 992  	       AND in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT THEN
15:40:05 993  	      RAISE CAN_NOT_USE_FCINSTR;
15:40:05 994  	    END IF;
15:40:05 995  
15:40:05 996  -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
15:40:05 997  	    IF var_invoice_amount = 0 THEN
15:40:05 998  	      PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
15:40:05 999  		  in_invoice_id 		 => in_invoice_id,
15:40:05 1000  		   in_updated_by		  => in_created_by,
15:40:05 1001  		   in_invoice_status_id 	  => GLOBAL_STATUSES_V23.INVOICE_CLOSED
15:40:05 1002  	       );
15:40:05 1003  	     END IF;
15:40:05 1004  
15:40:05 1005  	     IF var_invoice_amount > 0 THEN
15:40:05 1006  -- Create transaction
15:40:05 1007  	       BEGIN
15:40:05 1008  		 PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
15:40:05 1009  		     in_transaction_id	      => in_transaction_id,
15:40:05 1010  		     in_status_id	      => GLOBAL_STATUSES_V23.TRANSACTION_PENDING,
15:40:05 1011  		     in_amount		      => var_invoice_amount,
15:40:05 1012  		     in_created_by	      => in_created_by,
15:40:05 1013  		     in_order_id	      => in_order_id,
15:40:05 1014  		     in_transaction_type_code => 'GIFT_CERTIFICATE_PURCHASE',
15:40:05 1015  		     out_transaction_id       => var_transaction_id
15:40:05 1016  		 );
15:40:05 1017  		 EXCEPTION
15:40:05 1018  		 WHEN OTHERS THEN
15:40:05 1019  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1020  		 RAISE CAN_NOT_CREATE_TRANSACTION;
15:40:05 1021  	       END;
15:40:05 1022  
15:40:05 1023  -- Create charge
15:40:05 1024  	       BEGIN
15:40:05 1025  		 PROCS_CHARGE_V23.CREATE_CHARGE(
15:40:05 1026  		     in_invoice_id	   => in_invoice_id,
15:40:05 1027  		     in_transaction_id	   => var_transaction_id,
15:40:05 1028  		     in_instrument_type_id => in_instrument_type_id,
15:40:05 1029  		     in_instrument_id	   => in_instrument_id,
15:40:05 1030  		     in_charge_amount	   => var_invoice_amount,
15:40:05 1031  		     in_created_by	   => in_created_by,
15:40:05 1032  		     in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
15:40:05 1033  		     out_charge_id	   => var_new_charge_id
15:40:05 1034  		 );
15:40:05 1035  		 out_charge_amount := var_invoice_amount;
15:40:05 1036  		 EXCEPTION
15:40:05 1037  		 WHEN OTHERS THEN
15:40:05 1038  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1039  		 RAISE CAN_NOT_CREATE_CHARGE;
15:40:05 1040  	       END;
15:40:05 1041  	     ELSE
15:40:05 1042  	       out_charge_amount := 0;
15:40:05 1043  	     END IF;
15:40:05 1044  
15:40:05 1045  	     EXCEPTION
15:40:05 1046  	     WHEN CAN_NOT_USE_FCINSTR THEN
15:40:05 1047  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 1048  					      SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
15:40:05 1049  	     WHEN BAD_CREDIT_CARD_ID THEN
15:40:05 1050  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1051  					      SPROC_NAME, 'Bad credit card id');
15:40:05 1052  	     WHEN BAD_PAYPAL_ID THEN
15:40:05 1053  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1054  					      SPROC_NAME, 'Bad paypal id');
15:40:05 1055  	     WHEN BAD_INSTRUMENT_TYPE THEN
15:40:05 1056  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 1057  					      SPROC_NAME, 'Bad instrument type');
15:40:05 1058  	     WHEN TRANSACTION_EXISTS THEN
15:40:05 1059  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:05 1060  					      SPROC_NAME, 'Transaction with given id already exists');
15:40:05 1061  	     WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:40:05 1062  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1063  					      SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:40:05 1064  	     WHEN CAN_NOT_CREATE_CHARGE THEN
15:40:05 1065  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1066  					      SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:40:05 1067  	     WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:40:05 1068  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1069  					      SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
15:40:05 1070  	     WHEN OTHERS THEN
15:40:05 1071  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1072  					      SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1073  	   END FINALIZE_GC_PURCHASING;
15:40:05 1074  
15:40:05 1075  /******************************************************************************/
15:40:05 1076  
15:40:05 1077  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
15:40:05 1078  	 in_group_id		   IN NUMBER,
15:40:05 1079  	 in_offer_chain_id	   IN VARCHAR2,
15:40:05 1080  	 in_gift_certificate_code  IN VARCHAR2,
15:40:05 1081  	 in_created_by		   IN VARCHAR2,
15:40:05 1082  	 in_recipient_name	   IN VARCHAR2,
15:40:05 1083  	 in_recipient_email	   IN VARCHAR2,
15:40:05 1084  	 in_sender_name 	   IN VARCHAR2,
15:40:05 1085  	 in_sender_email	   IN VARCHAR2,
15:40:05 1086  	 in_gift_message	   IN VARCHAR2,
15:40:05 1087  	 in_instrument_id	   IN NUMBER,
15:40:05 1088  	 in_instrument_type_id	   IN NUMBER,
15:40:05 1089  	 in_expiration_date	   IN DATE,
15:40:05 1090  	 in_order_id		   IN VARCHAR2,
15:40:05 1091  	 in_transaction_id	   IN NUMBER
15:40:05 1092  ) AS
15:40:05 1093  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
15:40:05 1094  -- VARIABLES
15:40:05 1095  var_gift_cert_id   NUMBER;
15:40:05 1096  var_account_id	  NUMBER;
15:40:05 1097  var_invoice_amount NUMBER (10,2);
15:40:05 1098  var_new_invoice_id NUMBER;
15:40:05 1099  var_new_charge_id  NUMBER;
15:40:05 1100  var_och_is_gc	  NUMBER;
15:40:05 1101  var_offer_chain_status_id NUMBER;
15:40:05 1102  var_is_for_redemption	 NUMBER;
15:40:05 1103  var_account_tax_exempt_id VARCHAR2(255);
15:40:05 1104  
15:40:05 1105  temp_transaction_id_count NUMBER;
15:40:05 1106  var_transaction_id	 NUMBER;
15:40:05 1107  temp_gc_code VARCHAR2(255);
15:40:05 1108  
15:40:05 1109  var_invoice_status_id NUMBER;
15:40:05 1110  -- EXCEPTIONS
15:40:05 1111  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
15:40:05 1112  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
15:40:05 1113  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
15:40:05 1114  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
15:40:05 1115  BAD_GROUP_ID			   EXCEPTION;
15:40:05 1116  BAD_OFFER_CHAIN_ID		   EXCEPTION;
15:40:05 1117  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
15:40:05 1118  TRANSACTION_EXISTS		   EXCEPTION;
15:40:05 1119  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
15:40:05 1120  BAD_INSTRUMENT_TYPE		   EXCEPTION;
15:40:05 1121  BAD_CREDIT_CARD_ID		   EXCEPTION;
15:40:05 1122  BAD_PAYPAL_ID			   EXCEPTION;
15:40:05 1123  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
15:40:05 1124  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
15:40:05 1125  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
15:40:05 1126  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
15:40:05 1127  CAN_NOT_USE_FCINSTR		   EXCEPTION;
15:40:05 1128  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
15:40:05 1129  EXCEPTION_MESSAGE		   VARCHAR2(1024);
15:40:05 1130  BEGIN
15:40:05 1131  
15:40:05 1132  	 -- Get account id
15:40:05 1133  	 BEGIN
15:40:05 1134  	   SELECT
15:40:05 1135  	     ACCOUNT.ID,
15:40:05 1136  	     ACCOUNT.TAX_EXEMPT_ID
15:40:05 1137  	     into
15:40:05 1138  	     var_account_id,
15:40:05 1139  	     var_account_tax_exempt_id
15:40:05 1140  	   FROM
15:40:05 1141  	     ACCOUNT
15:40:05 1142  	   WHERE
15:40:05 1143  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:05 1144  	   EXCEPTION
15:40:05 1145  	   WHEN NO_DATA_FOUND THEN
15:40:05 1146  	     RAISE BAD_GROUP_ID;
15:40:05 1147  	 END;
15:40:05 1148  
15:40:05 1149  	 -- Check that instrument exists
15:40:05 1150  	 IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
15:40:05 1151  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 1152  	     RAISE BAD_CREDIT_CARD_ID;
15:40:05 1153  	   END IF;
15:40:05 1154  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
15:40:05 1155  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 1156  	     RAISE BAD_PAYPAL_ID;
15:40:05 1157  	   END IF;
15:40:05 1158  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT THEN
15:40:05 1159  	   NULL;
15:40:05 1160  	 ELSE
15:40:05 1161  	   RAISE BAD_INSTRUMENT_TYPE;
15:40:05 1162  	 END IF;
15:40:05 1163  
15:40:05 1164  	 -- Check for the same code
15:40:05 1165  	 BEGIN
15:40:05 1166  	   SELECT
15:40:05 1167  	     GIFT_CERTIFICATE.CODE into temp_gc_code
15:40:05 1168  	   FROM
15:40:05 1169  	     GIFT_CERTIFICATE
15:40:05 1170  	   WHERE
15:40:05 1171  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
15:40:05 1172  
15:40:05 1173  	   RAISE GC_CODE_ALREADY_EXISTS;
15:40:05 1174  
15:40:05 1175  	   EXCEPTION
15:40:05 1176  	     WHEN NO_DATA_FOUND THEN
15:40:05 1177  	       NULL;
15:40:05 1178  	 END;
15:40:05 1179  
15:40:05 1180  	 -- Get offer chain flag "is_gift_certificate"
15:40:05 1181  	 BEGIN
15:40:05 1182  	   SELECT
15:40:05 1183  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
15:40:05 1184  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
15:40:05 1185  	     into
15:40:05 1186  	     var_och_is_gc,
15:40:05 1187  	     var_offer_chain_status_id
15:40:05 1188  	   FROM
15:40:05 1189  	     OFFER_CHAIN
15:40:05 1190  	   WHERE
15:40:05 1191  	     OFFER_CHAIN.ID = in_offer_chain_id;
15:40:05 1192  	   EXCEPTION
15:40:05 1193  	   WHEN NO_DATA_FOUND THEN
15:40:05 1194  	     RAISE BAD_OFFER_CHAIN_ID;
15:40:05 1195  	 END;
15:40:05 1196  
15:40:05 1197  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V23.TRUE
15:40:05 1198  	   OR var_och_is_gc IS NULL THEN
15:40:05 1199  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
15:40:05 1200  	 END IF;
15:40:05 1201  
15:40:05 1202  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE THEN
15:40:05 1203  	   RAISE BAD_OFFER_CHAIN_STATUS;
15:40:05 1204  	 END IF;
15:40:05 1205  
15:40:05 1206  	 -- norlov: #38151 check if the OC is for Redemption:
15:40:05 1207  	 SELECT
15:40:05 1208  	   COUNT(*) into var_is_for_redemption
15:40:05 1209  	 FROM
15:40:05 1210  	   OFFER_CHAIN_ELIGIBILITY
15:40:05 1211  	 WHERE
15:40:05 1212  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
15:40:05 1213  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V23.GIFT_CERTIFICATE_REQUIRED
15:40:05 1214  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V23.ELIGIBILITY_FLAG_SET;
15:40:05 1215  
15:40:05 1216  	 IF var_is_for_redemption > 0 THEN
15:40:05 1217  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
15:40:05 1218  	 END IF;
15:40:05 1219  
15:40:05 1220  	 -- Check that transaction with given id do not exists
15:40:05 1221  	 SELECT
15:40:05 1222  	   COUNT(*) into temp_transaction_id_count
15:40:05 1223  	 FROM
15:40:05 1224  	   TRANSACTION
15:40:05 1225  	 WHERE
15:40:05 1226  	   TRANSACTION.ID = in_transaction_id;
15:40:05 1227  
15:40:05 1228  	 IF temp_transaction_id_count > 0 THEN
15:40:05 1229  	   RAISE TRANSACTION_EXISTS;
15:40:05 1230  	 END IF;
15:40:05 1231  
15:40:05 1232  	 -- Create new invoice
15:40:05 1233  	 BEGIN
15:40:05 1234  	   PROCS_INVOICE_V23.CREATE_INVOICE(
15:40:05 1235  	     in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_OPEN,
15:40:05 1236  	     in_created_by     => in_created_by,
15:40:05 1237  	     in_tax_exempt_id  => var_account_tax_exempt_id,
15:40:05 1238  	     out_invoice_id    => var_new_invoice_id
15:40:05 1239  	   );
15:40:05 1240  	   EXCEPTION
15:40:05 1241  	     WHEN OTHERS THEN
15:40:05 1242  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1243  	       RAISE CAN_NOT_CREATE_INVOICE;
15:40:05 1244  	 END;
15:40:05 1245  
15:40:05 1246  	 -- Add line items for new invoice
15:40:05 1247  	 BEGIN
15:40:05 1248  	   FOR f_offer_data IN (
15:40:05 1249  	     SELECT
15:40:05 1250  	       OFFER_ID,
15:40:05 1251  	       NUM_RECURRENCES
15:40:05 1252  	     FROM
15:40:05 1253  	       OFFER_OFFER_CHAIN
15:40:05 1254  	     WHERE
15:40:05 1255  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
15:40:05 1256  	   )
15:40:05 1257  	   LOOP
15:40:05 1258  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
15:40:05 1259  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
15:40:05 1260  	     END IF;
15:40:05 1261  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
15:40:05 1262  	     LOOP
15:40:05 1263  	       PROCS_LINE_ITEMS_V23.ADD_LINE_ITEMS(
15:40:05 1264  		 in_invoice_id => var_new_invoice_id,
15:40:05 1265  		 in_offer_id   => f_offer_data.OFFER_ID,
15:40:05 1266  		 in_created_by => in_created_by
15:40:05 1267  	       );
15:40:05 1268  	     END LOOP;
15:40:05 1269  	   END LOOP;
15:40:05 1270  
15:40:05 1271  	   EXCEPTION
15:40:05 1272  	     WHEN OTHERS THEN
15:40:05 1273  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1274  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
15:40:05 1275  	 END;
15:40:05 1276  
15:40:05 1277  	 -- Calculate new invoice amount
15:40:05 1278  	 BEGIN
15:40:05 1279  	   PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
15:40:05 1280  	   EXCEPTION
15:40:05 1281  	     WHEN OTHERS THEN
15:40:05 1282  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1283  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
15:40:05 1284  	 END;
15:40:05 1285  
15:40:05 1286  	 IF var_invoice_amount > 0
15:40:05 1287  	   AND in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT THEN
15:40:05 1288  	   RAISE CAN_NOT_USE_FCINSTR;
15:40:05 1289  	 END IF;
15:40:05 1290  
15:40:05 1291  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
15:40:05 1292  	 IF var_invoice_amount = 0 THEN
15:40:05 1293  	   PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
15:40:05 1294  	     in_invoice_id		    => var_new_invoice_id,
15:40:05 1295  	     in_updated_by		    => in_created_by,
15:40:05 1296  	     in_invoice_status_id	    => GLOBAL_STATUSES_V23.INVOICE_CLOSED
15:40:05 1297  	   );
15:40:05 1298  	 END IF;
15:40:05 1299  
15:40:05 1300  	 IF var_invoice_amount > 0 THEN
15:40:05 1301  	   -- Create transaction
15:40:05 1302  	   BEGIN
15:40:05 1303  	     PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
15:40:05 1304  	       in_transaction_id  => in_transaction_id,
15:40:05 1305  	       in_status_id	  => GLOBAL_STATUSES_V23.TRANSACTION_PENDING,
15:40:05 1306  	       in_amount	  => var_invoice_amount,
15:40:05 1307  	       in_created_by	  => in_created_by,
15:40:05 1308  	       in_order_id	  => in_order_id,
15:40:05 1309  	       out_transaction_id => var_transaction_id
15:40:05 1310  	     );
15:40:05 1311  	     EXCEPTION
15:40:05 1312  	       WHEN OTHERS THEN
15:40:05 1313  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1314  		 RAISE CAN_NOT_CREATE_TRANSACTION;
15:40:05 1315  	   END;
15:40:05 1316  
15:40:05 1317  	   -- Create charge
15:40:05 1318  	   BEGIN
15:40:05 1319  	     PROCS_CHARGE_V23.CREATE_CHARGE(
15:40:05 1320  	       in_invoice_id	     => var_new_invoice_id,
15:40:05 1321  	       in_transaction_id     => var_transaction_id,
15:40:05 1322  	       in_instrument_type_id => in_instrument_type_id,
15:40:05 1323  	       in_instrument_id      => in_instrument_id,
15:40:05 1324  	       in_charge_amount      => var_invoice_amount,
15:40:05 1325  	       in_created_by	     => in_created_by,
15:40:05 1326  	       in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
15:40:05 1327  	       out_charge_id	     => var_new_charge_id
15:40:05 1328  	     );
15:40:05 1329  	     EXCEPTION
15:40:05 1330  	       WHEN OTHERS THEN
15:40:05 1331  		 EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1332  		 RAISE CAN_NOT_CREATE_CHARGE;
15:40:05 1333  	   END;
15:40:05 1334  	 END IF;
15:40:05 1335  
15:40:05 1336  	 -- Create new row in GIFT_CERTIFICATE table
15:40:05 1337  	 PROCS_FIN_INSTRUMENTS_CRU_V23.CREATE_GIFT_CERTIFICATE(
15:40:05 1338  	   out_gift_certificate_id	 => var_gift_cert_id,
15:40:05 1339  	   in_purchaser_group_id	 => in_group_id,
15:40:05 1340  	   in_purchaser_invoice_id	 => var_new_invoice_id,
15:40:05 1341  	   in_offer_chain_id		 => in_offer_chain_id,
15:40:05 1342  	   in_expiration_date		 => in_expiration_date,
15:40:05 1343  	   in_purchase_date		 => SYSDATE,
15:40:05 1344  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE,
15:40:05 1345  	   in_code			 => in_gift_certificate_code,
15:40:05 1346  	   in_created_by		 => in_created_by,
15:40:05 1347  	   in_recipient_name		 => in_recipient_name,
15:40:05 1348  	   in_gift_message		 => in_gift_message,
15:40:05 1349  	   in_recipient_email		 => in_recipient_email,
15:40:05 1350  	   in_sender_email		 => in_sender_email,
15:40:05 1351  	   in_sender_name		 => in_sender_name
15:40:05 1352  	 );
15:40:05 1353  
15:40:05 1354  EXCEPTION
15:40:05 1355  WHEN CAN_NOT_USE_FCINSTR THEN
15:40:05 1356  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 1357  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
15:40:05 1358  WHEN BAD_OFFER_CHAIN_STATUS THEN
15:40:05 1359  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 1360  	   SPROC_NAME, 'Offer chain is not active');
15:40:05 1361  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
15:40:05 1362  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1363  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
15:40:05 1364  WHEN BAD_CREDIT_CARD_ID THEN
15:40:05 1365  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1366  	   SPROC_NAME, 'Bad credit card id');
15:40:05 1367  WHEN BAD_PAYPAL_ID THEN
15:40:05 1368  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1369  	   SPROC_NAME, 'Bad paypal id');
15:40:05 1370  WHEN BAD_INSTRUMENT_TYPE THEN
15:40:05 1371  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 1372  	   SPROC_NAME, 'Bad instrument type');
15:40:05 1373  WHEN GC_CODE_ALREADY_EXISTS THEN
15:40:05 1374  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:05 1375  	   SPROC_NAME, 'Gift certificate with same code already exists');
15:40:05 1376  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
15:40:05 1377  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 1378  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
15:40:05 1379  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
15:40:05 1380  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 1381  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
15:40:05 1382  WHEN TRANSACTION_EXISTS THEN
15:40:05 1383  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
15:40:05 1384  	   SPROC_NAME, 'Transaction with given id already exists');
15:40:05 1385  WHEN CAN_NOT_CREATE_INVOICE THEN
15:40:05 1386  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1387  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
15:40:05 1388  WHEN CAN_NOT_CREATE_TRANSACTION THEN
15:40:05 1389  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1390  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
15:40:05 1391  WHEN CAN_NOT_CREATE_CHARGE THEN
15:40:05 1392  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1393  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
15:40:05 1394  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
15:40:05 1395  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1396  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
15:40:05 1397  WHEN BAD_GROUP_ID THEN
15:40:05 1398  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1399  	   SPROC_NAME, 'No such group id');
15:40:05 1400  WHEN BAD_OFFER_CHAIN_ID THEN
15:40:05 1401  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1402  	   SPROC_NAME, 'No such offer chain');
15:40:05 1403  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
15:40:05 1404  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1405  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
15:40:05 1406  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
15:40:05 1407  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1408  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
15:40:05 1409  WHEN OTHERS THEN
15:40:05 1410  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1411  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1412  END PURCHASE_GIFT_CERTIFICATE;
15:40:05 1413  
15:40:05 1414  /******************************************************************************/
15:40:05 1415  
15:40:05 1416  PROCEDURE REDEEM_GIFT_CERTIFICATE (
15:40:05 1417  	 in_group_id			 IN NUMBER,
15:40:05 1418  	 in_gift_certificate_code	 IN VARCHAR2,
15:40:05 1419  	 in_created_by			 IN VARCHAR2,
15:40:05 1420  	 in_redeemer_address_id 	 IN NUMBER,
15:40:05 1421  	 in_fin_instrument_id		 IN NUMBER,
15:40:05 1422  	 in_fin_instrument_type_id	 IN NUMBER,
15:40:05 1423  	 in_redemption_offer_chain_id	 IN NUMBER,
15:40:05 1424  	 out_subscription_id		 OUT NUMBER,
15:40:05 1425  	 out_license_id 		 OUT NUMBER
15:40:05 1426  ) AS
15:40:05 1427  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
15:40:05 1428  -- VARIABLES
15:40:05 1429  var_gift_certificate_id NUMBER;
15:40:05 1430  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
15:40:05 1431  var_purchased_oc_id     NUMBER;
15:40:05 1432  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
15:40:05 1433  var_offer_duration      VARCHAR2(30);
15:40:05 1434  var_invoice_id	       NUMBER;
15:40:05 1435  var_succ_purch_attempts_num NUMBER;
15:40:05 1436  var_subscription_id     NUMBER;
15:40:05 1437  var_license_id	       NUMBER;
15:40:05 1438  var_account_id	       NUMBER;
15:40:05 1439  var_gc_status_id        NUMBER;
15:40:05 1440  var_gc_charges_amount   NUMBER;
15:40:05 1441  var_gc_expiration_date  DATE;
15:40:05 1442  var_gc_redeemer_group_id NUMBER;
15:40:05 1443  var_gc_purchase_invoice_id NUMBER;
15:40:05 1444  var_gc_purchase_inv_status_id NUMBER;
15:40:05 1445  var_offer_index		     NUMBER;
15:40:05 1446  var_purchaser_group_id	     NUMBER;
15:40:05 1447  temp_license_id		     NUMBER;
15:40:05 1448  var_same_offer_chains_num     NUMBER;
15:40:05 1449  var_max_concurrent_subscrs    NUMBER;
15:40:05 1450  var_account_tax_exempt_id     VARCHAR2(255);
15:40:05 1451  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
15:40:05 1452  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
15:40:05 1453  var_first_offer_id	  NUMBER;
15:40:05 1454  var_date 	     DATE := SYSDATE;
15:40:05 1455  
15:40:05 1456  var_offers SYS_REFCURSOR;
15:40:05 1457  
15:40:05 1458  -- EXCEPTIONS
15:40:05 1459  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
15:40:05 1460  BAD_GROUP_ID		      EXCEPTION;
15:40:05 1461  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
15:40:05 1462  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
15:40:05 1463  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
15:40:05 1464  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
15:40:05 1465  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
15:40:05 1466  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
15:40:05 1467  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
15:40:05 1468  LIMIT_REACHED		      EXCEPTION;
15:40:05 1469  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
15:40:05 1470  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
15:40:05 1471  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
15:40:05 1472  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
15:40:05 1473  EXCEPTION_MESSAGE	      VARCHAR2(1024);
15:40:05 1474  BEGIN
15:40:05 1475  
15:40:05 1476  	 -- Get account id
15:40:05 1477  	 BEGIN
15:40:05 1478  	   SELECT
15:40:05 1479  	     ACCOUNT.ID,
15:40:05 1480  	     ACCOUNT.TAX_EXEMPT_ID
15:40:05 1481  	     into
15:40:05 1482  	     var_account_id,
15:40:05 1483  	     var_account_tax_exempt_id
15:40:05 1484  	   FROM
15:40:05 1485  	     ACCOUNT
15:40:05 1486  	   WHERE
15:40:05 1487  	     ACCOUNT.GROUP_ID = in_group_id
15:40:05 1488  	     AND ROWNUM <= 1;
15:40:05 1489  
15:40:05 1490  	   EXCEPTION
15:40:05 1491  	   WHEN NO_DATA_FOUND THEN
15:40:05 1492  	     RAISE BAD_GROUP_ID;
15:40:05 1493  	 END;
15:40:05 1494  
15:40:05 1495  	 -- Get gift certificate data
15:40:05 1496  	 BEGIN
15:40:05 1497  	   SELECT
15:40:05 1498  	     GIFT_CERTIFICATE.ID,
15:40:05 1499  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
15:40:05 1500  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
15:40:05 1501  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
15:40:05 1502  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
15:40:05 1503  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
15:40:05 1504  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
15:40:05 1505  	     into
15:40:05 1506  	     var_gift_certificate_id,
15:40:05 1507  	     var_purchased_oc_id,
15:40:05 1508  	     var_gc_status_id,
15:40:05 1509  	     var_purchaser_group_id,
15:40:05 1510  	     var_gc_expiration_date,
15:40:05 1511  	     var_gc_redeemer_group_id,
15:40:05 1512  	     var_gc_purchase_invoice_id
15:40:05 1513  	   FROM
15:40:05 1514  	     GIFT_CERTIFICATE
15:40:05 1515  	   WHERE
15:40:05 1516  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
15:40:05 1517  	     AND ROWNUM <= 1;
15:40:05 1518  
15:40:05 1519  	   EXCEPTION
15:40:05 1520  	   WHEN NO_DATA_FOUND THEN
15:40:05 1521  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
15:40:05 1522  	 END;
15:40:05 1523  
15:40:05 1524  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
15:40:05 1525  	 -- but in that case a redemption offer chain id should always be passed in
15:40:05 1526  	 IF var_oc_id_to_redeem IS NULL THEN
15:40:05 1527  	   BEGIN
15:40:05 1528  	     SELECT
15:40:05 1529  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
15:40:05 1530  	       into
15:40:05 1531  	       var_oc_id_to_redeem
15:40:05 1532  	     FROM
15:40:05 1533  	       OFFER_CHAIN_META_DATA
15:40:05 1534  	     WHERE
15:40:05 1535  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
15:40:05 1536  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V23.REDEMPTION_OC_ID
15:40:05 1537  	       AND ROWNUM = 1;
15:40:05 1538  -- requested by ticket so (but above is correct for the actual migrated data):
15:40:05 1539  --  SELECT
15:40:05 1540  --      OFFER_CHAIN.ID
15:40:05 1541  --      into
15:40:05 1542  --      var_oc_id_to_redeem
15:40:05 1543  --    FROM
15:40:05 1544  --      OFFER_CHAIN
15:40:05 1545  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
15:40:05 1546  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
15:40:05 1547  --    WHERE
15:40:05 1548  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 1549  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V23.GIFT_CERTIFICATE_REQUIRED
15:40:05 1550  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V23.ELIGIBILITY_FLAG_SET
15:40:05 1551  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 1552  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V23.REDEMPTION_OC_ID
15:40:05 1553  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
15:40:05 1554  --      AND ROWNUM = 1;
15:40:05 1555  
15:40:05 1556  	     EXCEPTION
15:40:05 1557  	     WHEN NO_DATA_FOUND THEN
15:40:05 1558  	       RAISE OC_TO_REDEEM_NOT_FOUND;
15:40:05 1559  	   END;
15:40:05 1560  	 END IF;
15:40:05 1561  
15:40:05 1562  	 -- Check that purchase invoice for this GC was closed
15:40:05 1563  	 SELECT
15:40:05 1564  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
15:40:05 1565  	 FROM
15:40:05 1566  	   INVOICE
15:40:05 1567  	 WHERE
15:40:05 1568  	   INVOICE.ID = var_gc_purchase_invoice_id;
15:40:05 1569  
15:40:05 1570  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V23.INVOICE_CLOSED THEN
15:40:05 1571  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
15:40:05 1572  	 END IF;
15:40:05 1573  
15:40:05 1574  	 -- Check that this invoice was successfully processed by billing
15:40:05 1575  	 SELECT
15:40:05 1576  	   COUNT(1) into var_succ_purch_attempts_num
15:40:05 1577  	 FROM
15:40:05 1578  	   TRANSACTION_ATTEMPT TA
15:40:05 1579  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
15:40:05 1580  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
15:40:05 1581  	 WHERE
15:40:05 1582  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
15:40:05 1583  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS;
15:40:05 1584  
15:40:05 1585  	 IF var_succ_purch_attempts_num = 0 THEN
15:40:05 1586  	   SELECT
15:40:05 1587  	     COUNT(1) into var_succ_purch_attempts_num
15:40:05 1588  	   FROM
15:40:05 1589  	     DUAL
15:40:05 1590  	   WHERE
15:40:05 1591  	     PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
15:40:05 1592  	 END IF;
15:40:05 1593  
15:40:05 1594  	 IF var_succ_purch_attempts_num = 0 THEN
15:40:05 1595  	   RAISE PURCHASE_INVOICES_NOT_PAID;
15:40:05 1596  	 END IF;
15:40:05 1597  
15:40:05 1598  	 -- Check limit for gc's offer chain
15:40:05 1599  	 SELECT
15:40:05 1600  	   COUNT(*) into var_same_offer_chains_num
15:40:05 1601  	 FROM
15:40:05 1602  	   SUBSCRIPTION
15:40:05 1603  	 WHERE
15:40:05 1604  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:05 1605  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
15:40:05 1606  	   AND (
15:40:05 1607  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:05 1608  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
15:40:05 1609  IF var_same_offer_chains_num = 0 THEN
15:40:05 1610  	   -- if user does not have any active existing subscriptions to the offer chain
15:40:05 1611  	   -- and if product from the offer chain is already owned from another offer chain
15:40:05 1612  	   -- then deny purchase
15:40:05 1613  	   FOR f_account_offer_chains IN (
15:40:05 1614  	     SELECT DISTINCT
15:40:05 1615  	       OFFER_CHAIN_ID
15:40:05 1616  	     FROM
15:40:05 1617  	       SUBSCRIPTION
15:40:05 1618  	     WHERE
15:40:05 1619  	       ACCOUNT_ID = var_account_id
15:40:05 1620  	       AND (
15:40:05 1621  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:05 1622  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
15:40:05 1623  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
15:40:05 1624  	   )
15:40:05 1625  	   LOOP
15:40:05 1626  	     IF PROCS_OFFER_CHAIN_V23.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V23.TRUE THEN
15:40:05 1627  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
15:40:05 1628  	     END IF;
15:40:05 1629  	   END LOOP;
15:40:05 1630  	 ELSE
15:40:05 1631  
15:40:05 1632  	   -- if user have any active existing subscriptions to the offer chain
15:40:05 1633  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
15:40:05 1634  	   -- then deny purchase
15:40:05 1635  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
15:40:05 1636  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V23.INFINITY
15:40:05 1637  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
15:40:05 1638  	     RAISE LIMIT_REACHED;
15:40:05 1639  	   END IF;
15:40:05 1640  	 END IF;
15:40:05 1641  -- norlov: END OF TODO
15:40:05 1642  
15:40:05 1643  
15:40:05 1644  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
15:40:05 1645  	   RAISE GIFT_CERTIFICATE_REDEEMED;
15:40:05 1646  	 END IF;
15:40:05 1647  
15:40:05 1648  	 IF var_gc_expiration_date < sysdate THEN
15:40:05 1649  	   RAISE GIFT_CERTIFICATE_EXPIRED;
15:40:05 1650  	 END IF;
15:40:05 1651  
15:40:05 1652  	  IF var_gc_status_id = GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_REFUNDED THEN
15:40:05 1653  	   RAISE GIFT_CERT_IS_REFUNDED;
15:40:05 1654  	 END IF;
15:40:05 1655  
15:40:05 1656  	 IF var_gc_status_id = GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_FINALIZED THEN
15:40:05 1657  	   RAISE GIFT_CERT_IS_FINALIZED;
15:40:05 1658  	 END IF;
15:40:05 1659  
15:40:05 1660  	 -- Check that user did not subscribed to same product already
15:40:05 1661  	 -- norlov: get rid of this since there is already the check?
15:40:05 1662  	 FOR f_user_offer_chain IN (
15:40:05 1663  	   SELECT DISTINCT
15:40:05 1664  	     OFFER_CHAIN_ID
15:40:05 1665  	   FROM
15:40:05 1666  	     SUBSCRIPTION
15:40:05 1667  	   WHERE
15:40:05 1668  	     ACCOUNT_ID=var_account_id
15:40:05 1669  	     AND (
15:40:05 1670  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:05 1671  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
15:40:05 1672  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
15:40:05 1673  	 )
15:40:05 1674  	 LOOP
15:40:05 1675  	   IF PROCS_OFFER_CHAIN_V23.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V23.TRUE THEN
15:40:05 1676  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
15:40:05 1677  	   END IF;
15:40:05 1678  	 END LOOP;
15:40:05 1679  
15:40:05 1680  	 -- Check for gift certificate amount
15:40:05 1681  	 SELECT
15:40:05 1682  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
15:40:05 1683  	 FROM
15:40:05 1684  	   CHARGE
15:40:05 1685  	 WHERE
15:40:05 1686  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
15:40:05 1687  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_GIFT_CERTIFICATE;
15:40:05 1688  
15:40:05 1689  	 -- Create new invoice
15:40:05 1690  	 PROCS_INVOICE_V23.CREATE_INVOICE(
15:40:05 1691  	   out_invoice_id    => var_invoice_id,
15:40:05 1692  	   in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_CLOSED,
15:40:05 1693  	   in_tax_exempt_id  => var_account_tax_exempt_id,
15:40:05 1694  	   in_created_by     => in_created_by
15:40:05 1695  	 );
15:40:05 1696  
15:40:05 1697  	 -- If a financial instrument wasn't passed in, use the gift certificate id
15:40:05 1698  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
15:40:05 1699  	 IF var_fin_instrument_id is null THEN
15:40:05 1700  	   var_fin_instrument_id := var_gift_certificate_id;
15:40:05 1701  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V23.INSTRUMENT_GIFT_CERTIFICATE;
15:40:05 1702  	 END IF;
15:40:05 1703  
15:40:05 1704  	 -- Insert new row into subscription table
15:40:05 1705  	 PROCS_SUBSCRIPTION_CRU_V23.CREATE_SUBSCRIPTION(
15:40:05 1706  	   out_subscription_id	     => var_subscription_id,
15:40:05 1707  	   in_account_id	     => var_account_id,
15:40:05 1708  	   in_purchase_date	     => var_date,
15:40:05 1709  	   in_offer_chain_id	     => var_oc_id_to_redeem,
15:40:05 1710  	   in_created_by	     => in_created_by,
15:40:05 1711  	   in_instrument_type_id     => var_fin_instrument_type_id,
15:40:05 1712  	   in_instrument_id	     => var_fin_instrument_id,
15:40:05 1713  	   in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:05 1714  	 );
15:40:05 1715  
15:40:05 1716  	 out_subscription_id := var_subscription_id;
15:40:05 1717  
15:40:05 1718  	 BEGIN
15:40:05 1719  	   PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
15:40:05 1720  	   EXCEPTION
15:40:05 1721  	     WHEN OTHERS THEN
15:40:05 1722  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1723  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
15:40:05 1724  	 END;
15:40:05 1725  
15:40:05 1726  	 BEGIN
15:40:05 1727  	   PROCS_LICENSE_V23.CREATE_LICENSE (
15:40:05 1728  	     out_license_id		 => out_license_id,
15:40:05 1729  	     in_status_id		 => GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
15:40:05 1730  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V23.TRUE,
15:40:05 1731  	     in_start_date		 => var_date,
15:40:05 1732  	     in_offer_id		 => var_first_offer_id,
15:40:05 1733  	     in_subscription_id 	 => var_subscription_id,
15:40:05 1734  	     in_invoice_id		 => var_invoice_id,
15:40:05 1735  	     in_created_by		 => in_created_by,
15:40:05 1736  	     in_end_date		 => NULL, -- Will be calculated automatically
15:40:05 1737  	     in_is_extension		 => GLOBAL_CONSTANTS_V23.FALSE,
15:40:05 1738  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
15:40:05 1739  	     in_current_offer_recurr_num => 1
15:40:05 1740  	   );
15:40:05 1741  
15:40:05 1742  	   EXCEPTION
15:40:05 1743  	     WHEN OTHERS THEN
15:40:05 1744  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1745  	       RAISE CAN_NOT_CREATE_LICENSE;
15:40:05 1746  	 END;
15:40:05 1747  
15:40:05 1748  	 -- Update original gift certificate
15:40:05 1749  	 BEGIN
15:40:05 1750  	   PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_GIFT_CERTIFICATE(
15:40:05 1751  	     in_gift_certificate_id	   => var_gift_certificate_id,
15:40:05 1752  	     in_updated_by		   => in_created_by,
15:40:05 1753  	     in_redeemer_group_id	   => in_group_id,
15:40:05 1754  	     in_finalized_invoice_id	   => var_invoice_id,
15:40:05 1755  	     in_redemption_date 	   => var_date,
15:40:05 1756  	     in_redeemer_address_id	   => in_redeemer_address_id,
15:40:05 1757  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_FINALIZED
15:40:05 1758  	   );
15:40:05 1759  	   EXCEPTION
15:40:05 1760  	     WHEN OTHERS THEN
15:40:05 1761  	       EXCEPTION_MESSAGE := SQLERRM;
15:40:05 1762  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
15:40:05 1763  	 END;
15:40:05 1764  
15:40:05 1765  EXCEPTION
15:40:05 1766  WHEN LIMIT_REACHED THEN
15:40:05 1767  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.CONFLICT_ERROR,
15:40:05 1768  	   SPROC_NAME, 'Limit reached for given offer chain');
15:40:05 1769  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
15:40:05 1770  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.CONFLICT_ERROR,
15:40:05 1771  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
15:40:05 1772  WHEN GIFT_CERTIFICATE_REDEEMED THEN
15:40:05 1773  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 1774  	   SPROC_NAME, 'Gift certificate already redeemed');
15:40:05 1775  WHEN GIFT_CERTIFICATE_EXPIRED THEN
15:40:05 1776  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 1777  	   SPROC_NAME, 'Gift certificate expired');
15:40:05 1778  WHEN GIFT_CERT_IS_FINALIZED THEN
15:40:05 1779  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 1780  	   SPROC_NAME, 'Gift certificate is finalized');
15:40:05 1781  WHEN GIFT_CERT_IS_REFUNDED THEN
15:40:05 1782  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 1783  	   SPROC_NAME, 'Gift certificate has been refunded');
15:40:05 1784  WHEN BAD_GROUP_ID THEN
15:40:05 1785  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1786  	   SPROC_NAME, 'No such account with given group id');
15:40:05 1787  WHEN OC_TO_REDEEM_NOT_FOUND THEN
15:40:05 1788  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1789  	   SPROC_NAME, 'Offer chain to redeem not found');
15:40:05 1790  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
15:40:05 1791  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1792  	   SPROC_NAME, 'No such gift certificate code');
15:40:05 1793  WHEN CAN_NOT_CREATE_LICENSE THEN
15:40:05 1794  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1795  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
15:40:05 1796  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
15:40:05 1797  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 1798  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
15:40:05 1799  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
15:40:05 1800  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 1801  	   SPROC_NAME, 'Purchase invoice is not closed');
15:40:05 1802  WHEN PURCHASE_INVOICES_NOT_PAID THEN
15:40:05 1803  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 1804  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
15:40:05 1805  WHEN OTHERS THEN
15:40:05 1806  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1807  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1808  END;
15:40:05 1809  
15:40:05 1810  /******************************************************************************/
15:40:05 1811  
15:40:05 1812  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
15:40:05 1813  /*
15:40:05 1814  Throws exceptions:
15:40:05 1815  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1816  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 1817  */
15:40:05 1818  	 in_code	IN VARCHAR,
15:40:05 1819  	 out_result_set OUT SYS_REFCURSOR
15:40:05 1820  ) AS
15:40:05 1821  -- VARIABLES
15:40:05 1822  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
15:40:05 1823  temp_gift_certificate_id NUMBER;
15:40:05 1824  -- EXCEPTIONS
15:40:05 1825  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
15:40:05 1826  BEGIN
15:40:05 1827  
15:40:05 1828  	 BEGIN
15:40:05 1829  	   SELECT
15:40:05 1830  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
15:40:05 1831  	   FROM
15:40:05 1832  	     GIFT_CERTIFICATE
15:40:05 1833  	   WHERE
15:40:05 1834  	     GIFT_CERTIFICATE.CODE = in_code;
15:40:05 1835  	   EXCEPTION
15:40:05 1836  	     WHEN NO_DATA_FOUND THEN
15:40:05 1837  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
15:40:05 1838  	 END;
15:40:05 1839  
15:40:05 1840  	 -- Select all gift certificates with given code
15:40:05 1841  	 OPEN out_result_set FOR
15:40:05 1842  	 SELECT
15:40:05 1843  	   gc.EXPIRATION_DATE,
15:40:05 1844  	   ch.name,
15:40:05 1845  	   ch.id,
15:40:05 1846  	   gc.sender_email,
15:40:05 1847  	   gc.sender_name,
15:40:05 1848  	   gc.recipient_email,
15:40:05 1849  	   gc.recipient_name,
15:40:05 1850  	   gc.purchase_date,
15:40:05 1851  	   gc.redemption_date,
15:40:05 1852  	   gc.purchaser_group_id,
15:40:05 1853  	   gc.redeemer_group_id,
15:40:05 1854  	   gc.gift_message,
15:40:05 1855  	   ocmd.value redemption_offer_chain_ids,
15:40:05 1856  	   s.offer_chain_id redeemed_offer_chain_id,
15:40:05 1857  	   gc.recipient_notify_date,
15:40:05 1858  	   gc.gift_certificate_status_id,
15:40:05 1859  	   gc.purchase_invoice_id,
15:40:05 1860  	   gc.finalized_invoice_id,
15:40:05 1861  	   gccr.reference_code
15:40:05 1862  	 FROM
15:40:05 1863  	   GIFT_CERTIFICATE gc
15:40:05 1864  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
15:40:05 1865  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
15:40:05 1866  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
15:40:05 1867  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
15:40:05 1868  	 LEFT JOIN GC_CAMPAIGN_AND_REF gccr ON gc.id = gccr.GC_ID
15:40:05 1869  	 WHERE
15:40:05 1870  	   gc.code = in_code;
15:40:05 1871  
15:40:05 1872  EXCEPTION
15:40:05 1873  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
15:40:05 1874  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1875  	   SPROC_NAME, 'No such gift certificate');
15:40:05 1876  
15:40:05 1877  WHEN OTHERS THEN
15:40:05 1878  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1879  	   SPROC_NAME, 'Unknown Error', SQLERRM);
15:40:05 1880  END;
15:40:05 1881  
15:40:05 1882  /******************************************************************************/
15:40:05 1883  
15:40:05 1884  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
15:40:05 1885  /*
15:40:05 1886  Throws exceptions:
15:40:05 1887  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1888  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 1889  */
15:40:05 1890  	 in_gift_certificate_id IN NUMBER,
15:40:05 1891  	 out_result_set 	OUT SYS_REFCURSOR
15:40:05 1892  ) AS
15:40:05 1893  -- VARIABLES
15:40:05 1894  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
15:40:05 1895  temp_gift_certificate_id NUMBER;
15:40:05 1896  -- EXCEPTIONS
15:40:05 1897  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
15:40:05 1898  BEGIN
15:40:05 1899  
15:40:05 1900  	 BEGIN
15:40:05 1901  	   SELECT
15:40:05 1902  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
15:40:05 1903  	   FROM
15:40:05 1904  	     GIFT_CERTIFICATE
15:40:05 1905  	   WHERE
15:40:05 1906  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
15:40:05 1907  	   EXCEPTION
15:40:05 1908  	     WHEN NO_DATA_FOUND THEN
15:40:05 1909  	       RAISE BAD_GIFT_CERTIFICATE_ID;
15:40:05 1910  	 END;
15:40:05 1911  
15:40:05 1912  	 -- Select all gift certificates with given code
15:40:05 1913  	 OPEN out_result_set FOR
15:40:05 1914  	 SELECT
15:40:05 1915  	   gc.EXPIRATION_DATE,
15:40:05 1916  	   ch.name,
15:40:05 1917  	   ch.id,
15:40:05 1918  	   gc.sender_email,
15:40:05 1919  	   gc.sender_name,
15:40:05 1920  	   gc.recipient_email,
15:40:05 1921  	   gc.recipient_name,
15:40:05 1922  	   gc.purchase_date,
15:40:05 1923  	   gc.redemption_date,
15:40:05 1924  	   gc.purchaser_group_id,
15:40:05 1925  	   gc.redeemer_group_id,
15:40:05 1926  	   gc.code,
15:40:05 1927  	   gc.gift_message,
15:40:05 1928  	   gc.recipient_notify_date
15:40:05 1929  	 FROM
15:40:05 1930  	   GIFT_CERTIFICATE gc
15:40:05 1931  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
15:40:05 1932  	 WHERE
15:40:05 1933  	   gc.id = in_gift_certificate_id;
15:40:05 1934  
15:40:05 1935  EXCEPTION
15:40:05 1936  WHEN BAD_GIFT_CERTIFICATE_ID THEN
15:40:05 1937  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1938  	   SPROC_NAME, 'No such gift certificate');
15:40:05 1939  WHEN OTHERS THEN
15:40:05 1940  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1941  	   SPROC_NAME, 'Unknown Error', SQLERRM);
15:40:05 1942  END GET_GIFT_CERTIFICATE_BY_ID;
15:40:05 1943  
15:40:05 1944  /******************************************************************************/
15:40:05 1945  
15:40:05 1946  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
15:40:05 1947  	 in_group_id		IN  NUMBER,
15:40:05 1948  	 out_instrument_type_id OUT NUMBER,
15:40:05 1949  	 out_instrument_id	OUT NUMBER
15:40:05 1950  ) AS
15:40:05 1951  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
15:40:05 1952  BEGIN
15:40:05 1953  
15:40:05 1954  	 SELECT
15:40:05 1955  	   ACCOUNT.INSTRUMENT_TYPE_ID,
15:40:05 1956  	   ACCOUNT.INSTRUMENT_ID
15:40:05 1957  	   into
15:40:05 1958  	   out_instrument_type_id,
15:40:05 1959  	   out_instrument_id
15:40:05 1960  	 FROM
15:40:05 1961  	   ACCOUNT
15:40:05 1962  	 WHERE
15:40:05 1963  	   ACCOUNT.GROUP_ID = in_group_id;
15:40:05 1964  
15:40:05 1965  EXCEPTION
15:40:05 1966  WHEN NO_DATA_FOUND THEN
15:40:05 1967  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1968  	   SPROC_NAME, 'Bad group id');
15:40:05 1969  WHEN OTHERS THEN
15:40:05 1970  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1971  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1972  END GET_DEF_FINANCIAL_INSTRUMENT;
15:40:05 1973  
15:40:05 1974  /******************************************************************************/
15:40:05 1975  
15:40:05 1976  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
15:40:05 1977  	 in_group_id	       IN NUMBER,
15:40:05 1978  	 in_instrument_type_id IN NUMBER,
15:40:05 1979  	 in_instrument_id      IN NUMBER,
15:40:05 1980  	 in_updated_by	       IN VARCHAR2
15:40:05 1981  ) AS
15:40:05 1982  -- VARIABLES
15:40:05 1983  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
15:40:05 1984  var_account_id	      NUMBER;
15:40:05 1985  -- EXCEPTIONS
15:40:05 1986  BAD_GROUP_ID	      EXCEPTION;
15:40:05 1987  BAD_CREDIT_CARD	      EXCEPTION;
15:40:05 1988  BAD_PAYPAL	      EXCEPTION;
15:40:05 1989  BAD_INSTRUMENT_TYPE    EXCEPTION;
15:40:05 1990  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:05 1991  BEGIN
15:40:05 1992  
15:40:05 1993  	 -- get account id
15:40:05 1994  	 BEGIN
15:40:05 1995  	   SELECT
15:40:05 1996  	     ACCOUNT.ID into var_account_id
15:40:05 1997  	   FROM
15:40:05 1998  	     ACCOUNT
15:40:05 1999  	   WHERE
15:40:05 2000  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:05 2001  	   EXCEPTION
15:40:05 2002  	     WHEN NO_DATA_FOUND THEN
15:40:05 2003  	       RAISE BAD_GROUP_ID;
15:40:05 2004  	 END;
15:40:05 2005  
15:40:05 2006  	 -- Chech that given instrument exists
15:40:05 2007  	 IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
15:40:05 2008  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 2009  	     RAISE BAD_CREDIT_CARD;
15:40:05 2010  	   END IF;
15:40:05 2011  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
15:40:05 2012  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 2013  	     RAISE BAD_PAYPAL;
15:40:05 2014  	   END IF;
15:40:05 2015  	 ELSE
15:40:05 2016  	   RAISE BAD_INSTRUMENT_TYPE;
15:40:05 2017  	 END IF;
15:40:05 2018  
15:40:05 2019  	 -- update account information
15:40:05 2020  	 PROCS_ACCOUNT_CRU_V23.UPDATE_ACCOUNT(
15:40:05 2021  	   in_account_id	 => var_account_id,
15:40:05 2022  	   in_updated_by	 => in_updated_by,
15:40:05 2023  	   in_instrument_type_id => in_instrument_type_id,
15:40:05 2024  	   in_instrument_id	 => in_instrument_id
15:40:05 2025  	 );
15:40:05 2026  
15:40:05 2027  EXCEPTION
15:40:05 2028  WHEN BAD_GROUP_ID THEN
15:40:05 2029  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2030  	   SPROC_NAME, 'No such account');
15:40:05 2031  WHEN BAD_CREDIT_CARD THEN
15:40:05 2032  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2033  	   SPROC_NAME, 'Could not find credit card with given ID');
15:40:05 2034  WHEN BAD_PAYPAL THEN
15:40:05 2035  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2036  	   SPROC_NAME, 'Could not find paypal with given ID');
15:40:05 2037  WHEN BAD_INSTRUMENT_TYPE THEN
15:40:05 2038  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 2039  	   SPROC_NAME, 'Bad instrument type id');
15:40:05 2040  WHEN OTHERS THEN
15:40:05 2041  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2042  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2043  END SET_DEF_FINANCIAL_INSTRUMENT;
15:40:05 2044  
15:40:05 2045  /******************************************************************************/
15:40:05 2046  
15:40:05 2047  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
15:40:05 2048  	 in_group_id IN NUMBER
15:40:05 2049  ) AS
15:40:05 2050  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
15:40:05 2051  -- VARIABLES
15:40:05 2052  var_account_id NUMBER;
15:40:05 2053  -- EXCEPTIONS
15:40:05 2054  BAD_GROUP_ID	 EXCEPTION;
15:40:05 2055  EXCEPTION_MESSAGE VARCHAR2(1024);
15:40:05 2056  BEGIN
15:40:05 2057  
15:40:05 2058  	 BEGIN
15:40:05 2059  	   SELECT
15:40:05 2060  	     ACCOUNT.ID into var_account_id
15:40:05 2061  	   FROM
15:40:05 2062  	     ACCOUNT
15:40:05 2063  	   WHERE
15:40:05 2064  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:05 2065  	   EXCEPTION
15:40:05 2066  	     WHEN NO_DATA_FOUND THEN
15:40:05 2067  	       RAISE BAD_GROUP_ID;
15:40:05 2068  	 END;
15:40:05 2069  
15:40:05 2070  	 PROCS_ACCOUNT_CRU_V23.UPDATE_DEF_FIN_INSTRUMENT(
15:40:05 2071  	   in_account_id => var_account_id,
15:40:05 2072  	   in_instrument_type_id => NULL,
15:40:05 2073  	   in_instrument_id => NULL,
15:40:05 2074  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
15:40:05 2075  	 );
15:40:05 2076  
15:40:05 2077  EXCEPTION
15:40:05 2078  WHEN BAD_GROUP_ID THEN
15:40:05 2079  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2080  	   SPROC_NAME, 'No such group id');
15:40:05 2081  WHEN OTHERS THEN
15:40:05 2082  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2083  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2084  END DEL_DEF_FINANCIAL_INSTRUMENT;
15:40:05 2085  
15:40:05 2086  /******************************************************************************/
15:40:05 2087  
15:40:05 2088  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:40:05 2089  	 in_credit_card_id IN  NUMBER,
15:40:05 2090  	 out_result_set    OUT SYS_REFCURSOR
15:40:05 2091  ) AS
15:40:05 2092  SPROC_NAME    CONSTANT VARCHAR2(32) := 'GET_CREDIT_CARD_BY_ID';
15:40:05 2093  BEGIN
15:40:05 2094  	 OPEN out_result_set FOR
15:40:05 2095  	 SELECT
15:40:05 2096  	   ID,
15:40:05 2097  	   ACCOUNT_ID,
15:40:05 2098  	   INSTRUMENT_NAME,
15:40:05 2099  	   PRIVATE_CARD_HOLDER_NAME,
15:40:05 2100  	   PRIVATE_STREET_ADDRESS,
15:40:05 2101  	   PRIVATE_STREET_ADDRESS2,
15:40:05 2102  	   STATE,
15:40:05 2103  	   CITY,
15:40:05 2104  	   POSTAL_CODE,
15:40:05 2105  	   COUNTRY,
15:40:05 2106  	   LAST_FOUR_CC,
15:40:05 2107  	   EXPIRATION_DATE,
15:40:05 2108  	   CREDIT_CARD_TYPE_ID,
15:40:05 2109  	   SECRET_TOKEN,
15:40:05 2110  	   CREATE_DATE,
15:40:05 2111  	   CREATED_BY,
15:40:05 2112  	   UPDATE_DATE,
15:40:05 2113  	   UPDATED_BY,
15:40:05 2114  	   CREDIT_CARD_STATUS_ID,
15:40:05 2115  	   PRIVATE_FIRST_NAME,
15:40:05 2116  	   PRIVATE_LAST_NAME,
15:40:05 2117  	   CHASE_PROFILE_ID
15:40:05 2118  	 FROM
15:40:05 2119  	   CREDIT_CARD
15:40:05 2120  	 WHERE
15:40:05 2121  	   ID = in_credit_card_id;
15:40:05 2122  END GET_CREDIT_CARD_BY_ID;
15:40:05 2123  
15:40:05 2124  /******************************************************************************/
15:40:05 2125  
15:40:05 2126  PROCEDURE GET_PAYPAL_BY_ID (
15:40:05 2127  	 in_paypal_id	IN  NUMBER,
15:40:05 2128  	 out_result_set OUT SYS_REFCURSOR
15:40:05 2129  ) AS
15:40:05 2130  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PAYPAL_BY_ID';
15:40:05 2131  BEGIN
15:40:05 2132  	 OPEN out_result_set FOR
15:40:05 2133  	 SELECT
15:40:05 2134  	   ID,
15:40:05 2135  	   ACCOUNT_ID,
15:40:05 2136  	   INSTRUMENT_NAME,
15:40:05 2137  	   PRIVATE_EMAIL_ADDRESS,
15:40:05 2138  	   CREATE_DATE,
15:40:05 2139  	   CREATED_BY,
15:40:05 2140  	   UPDATE_DATE,
15:40:05 2141  	   UPDATED_BY,
15:40:05 2142  	   PAYPAL_STATUS_ID,
15:40:05 2143  	   PRIVATE_STREET_ADDRESS,
15:40:05 2144  	   PRIVATE_STREET_ADDRESS2,
15:40:05 2145  	   STATE,
15:40:05 2146  	   CITY,
15:40:05 2147  	   POSTAL_CODE,
15:40:05 2148  	   COUNTRY,
15:40:05 2149  	   EXPIRATION_DATE,
15:40:05 2150  	   SECRET_TOKEN
15:40:05 2151  	 FROM
15:40:05 2152  	   PAYPAL
15:40:05 2153  	 WHERE
15:40:05 2154  	   ID = in_paypal_id;
15:40:05 2155  END GET_PAYPAL_BY_ID;
15:40:05 2156  
15:40:05 2157  /******************************************************************************/
15:40:05 2158  
15:40:05 2159  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
15:40:05 2160  	 in_credit_card_id NUMBER
15:40:05 2161  ) RETURN NUMBER AS
15:40:05 2162  BEGIN
15:40:05 2163  	 -- STUB
15:40:05 2164  	 RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:05 2165  END F_CAN_DISABLE_CREDIT_CARD;
15:40:05 2166  
15:40:05 2167  /******************************************************************************/
15:40:05 2168  
15:40:05 2169  PROCEDURE GET_PURCHASED_GCERTIFICATES (
15:40:05 2170  	 in_group_id	IN NUMBER,
15:40:05 2171  	 out_result_set OUT SYS_REFCURSOR
15:40:05 2172  ) AS
15:40:05 2173  -- VARIABLES
15:40:05 2174  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
15:40:05 2175  var_account_id NUMBER;
15:40:05 2176  -- EXCEPTIONS
15:40:05 2177  BAD_GROUP_ID EXCEPTION;
15:40:05 2178  BEGIN
15:40:05 2179  
15:40:05 2180  	 BEGIN
15:40:05 2181  	   SELECT
15:40:05 2182  	     ACCOUNT.ID into var_account_id
15:40:05 2183  	   FROM
15:40:05 2184  	     ACCOUNT
15:40:05 2185  	   WHERE
15:40:05 2186  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:05 2187  	   EXCEPTION
15:40:05 2188  	     WHEN NO_DATA_FOUND THEN
15:40:05 2189  	       RAISE BAD_GROUP_ID;
15:40:05 2190  	 END;
15:40:05 2191  
15:40:05 2192  	 OPEN out_result_set FOR
15:40:05 2193  	 SELECT
15:40:05 2194  	   GIFT_CERTIFICATE.CODE,
15:40:05 2195  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
15:40:05 2196  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
15:40:05 2197  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
15:40:05 2198  	   GIFT_CERTIFICATE.SENDER_EMAIL,
15:40:05 2199  	   GIFT_CERTIFICATE.SENDER_NAME,
15:40:05 2200  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
15:40:05 2201  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
15:40:05 2202  	   GIFT_CERTIFICATE.PURCHASE_DATE,
15:40:05 2203  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
15:40:05 2204  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
15:40:05 2205  	 FROM
15:40:05 2206  	   GIFT_CERTIFICATE
15:40:05 2207  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 2208  	 WHERE
15:40:05 2209  	   ROWNUM <= 100 AND
15:40:05 2210  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
15:40:05 2211  
15:40:05 2212  EXCEPTION
15:40:05 2213  WHEN BAD_GROUP_ID THEN
15:40:05 2214  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2215  	   SPROC_NAME, 'No such group id');
15:40:05 2216  WHEN OTHERS THEN
15:40:05 2217  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2218  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2219  END GET_PURCHASED_GCERTIFICATES;
15:40:05 2220  
15:40:05 2221  /******************************************************************************/
15:40:05 2222  
15:40:05 2223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
15:40:05 2224  	 in_gift_certificate_id IN NUMBER,
15:40:05 2225  	 in_charge_id		IN NUMBER,
15:40:05 2226  	 out_result		OUT NUMBER
15:40:05 2227  ) AS
15:40:05 2228  -- VARIABLES
15:40:05 2229  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
15:40:05 2230  var_invoice_id	    NUMBER;
15:40:05 2231  var_offer_chain_id   NUMBER;
15:40:05 2232  var_offer_chain_s_id NUMBER;
15:40:05 2233  -- EXCEPTIONS
15:40:05 2234  BAD_CHARGE_ID		 EXCEPTION;
15:40:05 2235  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
15:40:05 2236  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
15:40:05 2237  BEGIN
15:40:05 2238  
15:40:05 2239  	 BEGIN
15:40:05 2240  	   SELECT
15:40:05 2241  	     CHARGE.INVOICE_ID into var_invoice_id
15:40:05 2242  	   FROM
15:40:05 2243  	     CHARGE
15:40:05 2244  	   WHERE
15:40:05 2245  	     CHARGE.ID = in_charge_id;
15:40:05 2246  	   EXCEPTION
15:40:05 2247  	     WHEN NO_DATA_FOUND THEN
15:40:05 2248  	       RAISE BAD_CHARGE_ID;
15:40:05 2249  	 END;
15:40:05 2250  
15:40:05 2251  	 BEGIN
15:40:05 2252  	   SELECT
15:40:05 2253  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
15:40:05 2254  	   FROM
15:40:05 2255  	     GIFT_CERTIFICATE
15:40:05 2256  	   WHERE
15:40:05 2257  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
15:40:05 2258  	   EXCEPTION
15:40:05 2259  	     WHEN NO_DATA_FOUND THEN
15:40:05 2260  	       RAISE BAD_GIFT_CERTIFICATE_ID;
15:40:05 2261  	 END;
15:40:05 2262  
15:40:05 2263  	 BEGIN
15:40:05 2264  	   SELECT
15:40:05 2265  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
15:40:05 2266  	   FROM
15:40:05 2267  	     SUBSCRIPTION
15:40:05 2268  	   WHERE
15:40:05 2269  	     SUBSCRIPTION.ID IN (
15:40:05 2270  	       SELECT DISTINCT
15:40:05 2271  		 LICENSE.SUBSCRIPTION_ID
15:40:05 2272  	       FROM
15:40:05 2273  		 LICENSE
15:40:05 2274  	       WHERE
15:40:05 2275  		 LICENSE.INVOICE_ID = var_invoice_id
15:40:05 2276  	     );
15:40:05 2277  	   EXCEPTION
15:40:05 2278  	     WHEN NO_DATA_FOUND THEN
15:40:05 2279  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
15:40:05 2280  	 END;
15:40:05 2281  
15:40:05 2282  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
15:40:05 2283  	   out_result := GLOBAL_CONSTANTS_V23.TRUE;
15:40:05 2284  	 ELSE
15:40:05 2285  	   out_result := GLOBAL_CONSTANTS_V23.FALSE;
15:40:05 2286  	 END IF;
15:40:05 2287  
15:40:05 2288  EXCEPTION
15:40:05 2289  WHEN BAD_CHARGE_ID THEN
15:40:05 2290  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2291  	   SPROC_NAME, 'No such charge');
15:40:05 2292  WHEN BAD_GIFT_CERTIFICATE_ID THEN
15:40:05 2293  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2294  	   SPROC_NAME, 'No such gift certificate');
15:40:05 2295  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
15:40:05 2296  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2297  	   SPROC_NAME, 'Could not find subscription for given charge');
15:40:05 2298  WHEN OTHERS THEN
15:40:05 2299  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2300  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2301  END IS_GCERT_FOR_PROPER_OFFER;
15:40:05 2302  
15:40:05 2303  /******************************************************************************/
15:40:05 2304  
15:40:05 2305  FUNCTION IS_CREDIT_CARD_EXISTS (
15:40:05 2306  /*
15:40:05 2307  GLOBAL_CONSTANTS_V23.TRUE - if instrument exists
15:40:05 2308  GLOBAL_CONSTANTS_V23.FALSE - else
15:40:05 2309  */
15:40:05 2310  	 in_credit_card_id IN NUMBER
15:40:05 2311  ) RETURN NUMBER AS
15:40:05 2312  -- VARIABLES
15:40:05 2313  var_cc_count NUMBER;
15:40:05 2314  BEGIN
15:40:05 2315  	 SELECT
15:40:05 2316  	   COUNT(*) into var_cc_count
15:40:05 2317  	 FROM
15:40:05 2318  	   CREDIT_CARD
15:40:05 2319  	 WHERE
15:40:05 2320  	   CREDIT_CARD.ID = in_credit_card_id;
15:40:05 2321  
15:40:05 2322  	 IF var_cc_count = 0 THEN
15:40:05 2323  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:05 2324  	 ELSE
15:40:05 2325  	   RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:05 2326  	 END IF;
15:40:05 2327  
15:40:05 2328  END IS_CREDIT_CARD_EXISTS;
15:40:05 2329  
15:40:05 2330  /******************************************************************************/
15:40:05 2331  
15:40:05 2332  FUNCTION IS_PAYPAL_EXISTS (
15:40:05 2333  /*
15:40:05 2334  GLOBAL_CONSTANTS_V23.TRUE - if instrument exists
15:40:05 2335  GLOBAL_CONSTANTS_V23.FALSE - else
15:40:05 2336  */
15:40:05 2337  	 in_paypal_id IN NUMBER
15:40:05 2338  ) RETURN NUMBER AS
15:40:05 2339  -- VARIABLES
15:40:05 2340  var_pp_count NUMBER;
15:40:05 2341  BEGIN
15:40:05 2342  	 SELECT
15:40:05 2343  	   COUNT(*) into var_pp_count
15:40:05 2344  	 FROM
15:40:05 2345  	   PAYPAL
15:40:05 2346  	 WHERE
15:40:05 2347  	   PAYPAL.ID = in_paypal_id;
15:40:05 2348  
15:40:05 2349  	 IF var_pp_count = 0 THEN
15:40:05 2350  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:05 2351  	 ELSE
15:40:05 2352  	   RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:05 2353  	 END IF;
15:40:05 2354  
15:40:05 2355  END IS_PAYPAL_EXISTS;
15:40:05 2356  
15:40:05 2357  /******************************************************************************/
15:40:05 2358  
15:40:05 2359  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
15:40:05 2360  /*
15:40:05 2361  GLOBAL_CONSTANTS_V23.TRUE - if instrument exists
15:40:05 2362  GLOBAL_CONSTANTS_V23.FALSE - else
15:40:05 2363  */
15:40:05 2364  	 in_gift_certificate_id IN NUMBER
15:40:05 2365  ) RETURN NUMBER AS
15:40:05 2366  -- VARIABLES
15:40:05 2367  var_gc_count NUMBER;
15:40:05 2368  BEGIN
15:40:05 2369  	 SELECT
15:40:05 2370  	   COUNT(*) into var_gc_count
15:40:05 2371  	 FROM
15:40:05 2372  	   GIFT_CERTIFICATE
15:40:05 2373  	 WHERE
15:40:05 2374  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
15:40:05 2375  
15:40:05 2376  	 IF var_gc_count = 0 THEN
15:40:05 2377  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
15:40:05 2378  	 ELSE
15:40:05 2379  	   RETURN GLOBAL_CONSTANTS_V23.TRUE;
15:40:05 2380  	 END IF;
15:40:05 2381  
15:40:05 2382  END IS_GIFT_CERTIFICATE_EXISTS;
15:40:05 2383  
15:40:05 2384  /******************************************************************************/
15:40:05 2385  
15:40:05 2386  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
15:40:05 2387  	 in_credit_card_id IN NUMBER,
15:40:05 2388  	 out_group_id	   OUT NUMBER
15:40:05 2389  ) AS
15:40:05 2390  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
15:40:05 2391  BEGIN
15:40:05 2392  	 SELECT
15:40:05 2393  	   ACCOUNT.GROUP_ID into out_group_id
15:40:05 2394  	 FROM
15:40:05 2395  	   CREDIT_CARD
15:40:05 2396  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
15:40:05 2397  	 WHERE
15:40:05 2398  	   CREDIT_CARD.ID = in_credit_card_id;
15:40:05 2399  EXCEPTION
15:40:05 2400  WHEN NO_DATA_FOUND THEN
15:40:05 2401  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2402  	   SPROC_NAME, 'No such credit card');
15:40:05 2403  WHEN OTHERS THEN
15:40:05 2404  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2405  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2406  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
15:40:05 2407  
15:40:05 2408  /******************************************************************************/
15:40:05 2409  
15:40:05 2410  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
15:40:05 2411  	 in_paypal_id IN NUMBER,
15:40:05 2412  	 out_group_id OUT NUMBER
15:40:05 2413  ) AS
15:40:05 2414  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
15:40:05 2415  BEGIN
15:40:05 2416  	 SELECT
15:40:05 2417  	   ACCOUNT.GROUP_ID into out_group_id
15:40:05 2418  	 FROM
15:40:05 2419  	   PAYPAL
15:40:05 2420  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
15:40:05 2421  	 WHERE
15:40:05 2422  	   PAYPAL.ID = in_paypal_id;
15:40:05 2423  EXCEPTION
15:40:05 2424  WHEN NO_DATA_FOUND THEN
15:40:05 2425  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2426  	   SPROC_NAME, 'No such paypal');
15:40:05 2427  WHEN OTHERS THEN
15:40:05 2428  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2429  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2430  END GET_GROUP_ID_BY_PAYPAL_ID;
15:40:05 2431  
15:40:05 2432  /******************************************************************************/
15:40:05 2433  
15:40:05 2434  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
15:40:05 2435  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
15:40:05 2436  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
15:40:05 2437  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
15:40:05 2438  ) AS
15:40:05 2439  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
15:40:05 2440  -- EXCEPTIONS
15:40:05 2441  BAD_CREDIT_CARD_ID     EXCEPTION;
15:40:05 2442  BAD_STATUS_ID	      EXCEPTION;
15:40:05 2443  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:05 2444  BEGIN
15:40:05 2445  
15:40:05 2446  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V23.CREDIT_CARD_ACTIVE
15:40:05 2447  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V23.CREDIT_CARD_INVALID
15:40:05 2448  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V23.CREDIT_CARD_DISABLED
15:40:05 2449  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V23.CREDIT_CARD_EXPIRED THEN
15:40:05 2450  	   RAISE BAD_STATUS_ID;
15:40:05 2451  	 END IF;
15:40:05 2452  
15:40:05 2453  	 PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_CREDIT_CARD(
15:40:05 2454  	   in_credit_card_id	    => in_credit_card_id,
15:40:05 2455  	   in_updated_by	    => in_updated_by,
15:40:05 2456  	   in_credit_card_status_id => in_credit_card_status_id
15:40:05 2457  	 );
15:40:05 2458  
15:40:05 2459  	 IF SQL%ROWCOUNT = 0 THEN
15:40:05 2460  	   RAISE BAD_CREDIT_CARD_ID;
15:40:05 2461  	 END IF;
15:40:05 2462  
15:40:05 2463  EXCEPTION
15:40:05 2464  WHEN BAD_CREDIT_CARD_ID THEN
15:40:05 2465  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2466  	   SPROC_NAME, 'No such credit card');
15:40:05 2467  WHEN BAD_STATUS_ID THEN
15:40:05 2468  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 2469  	   SPROC_NAME, 'Bad credit card status id');
15:40:05 2470  WHEN OTHERS THEN
15:40:05 2471  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2472  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2473  END UPDATE_CREDIT_CARD_STATUS;
15:40:05 2474  
15:40:05 2475  /******************************************************************************/
15:40:05 2476  
15:40:05 2477  PROCEDURE UPDATE_PAYPAL_STATUS (
15:40:05 2478  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
15:40:05 2479  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
15:40:05 2480  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
15:40:05 2481  ) AS
15:40:05 2482  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
15:40:05 2483  -- EXCEPTIONS
15:40:05 2484  BAD_PAYPAL_ID	      EXCEPTION;
15:40:05 2485  BAD_STATUS_ID	      EXCEPTION;
15:40:05 2486  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:05 2487  BEGIN
15:40:05 2488  
15:40:05 2489  	 IF in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_ACTIVE
15:40:05 2490  	   AND in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_INACTIVE
15:40:05 2491  	   AND in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_FROZEN THEN
15:40:05 2492  	   RAISE BAD_STATUS_ID;
15:40:05 2493  	 END IF;
15:40:05 2494  
15:40:05 2495  	 PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_PAYPAL(
15:40:05 2496  	   in_paypal_id        => in_paypal_id,
15:40:05 2497  	   in_paypal_status_id => in_paypal_status_id,
15:40:05 2498  	   in_updated_by       => in_updated_by
15:40:05 2499  	 );
15:40:05 2500  
15:40:05 2501  	 IF SQL%ROWCOUNT = 0 THEN
15:40:05 2502  	   RAISE BAD_PAYPAL_ID;
15:40:05 2503  	 END IF;
15:40:05 2504  
15:40:05 2505  EXCEPTION
15:40:05 2506  WHEN BAD_PAYPAL_ID THEN
15:40:05 2507  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2508  	   SPROC_NAME, 'No such paypal');
15:40:05 2509  WHEN BAD_STATUS_ID THEN
15:40:05 2510  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 2511  	   SPROC_NAME, 'Bad paypal status id');
15:40:05 2512  WHEN OTHERS THEN
15:40:05 2513  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2514  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2515  END UPDATE_PAYPAL_STATUS;
15:40:05 2516  
15:40:05 2517  /******************************************************************************/
15:40:05 2518  
15:40:05 2519  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
15:40:05 2520  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
15:40:05 2521  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
15:40:05 2522  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
15:40:05 2523  ) AS
15:40:05 2524  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
15:40:05 2525  -- EXCEPTIONS
15:40:05 2526  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
15:40:05 2527  BAD_STATUS_ID	       EXCEPTION;
15:40:05 2528  EXCEPTION_MESSAGE       VARCHAR2(1024);
15:40:05 2529  BEGIN
15:40:05 2530  
15:40:05 2531  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE
15:40:05 2532  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_FINALIZED THEN
15:40:05 2533  	   RAISE BAD_STATUS_ID;
15:40:05 2534  	 END IF;
15:40:05 2535  
15:40:05 2536  	 PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_GIFT_CERTIFICATE(
15:40:05 2537  	   in_gift_certificate_id	 => in_gift_certificate_id,
15:40:05 2538  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
15:40:05 2539  	   in_updated_by		 => in_updated_by
15:40:05 2540  	 );
15:40:05 2541  
15:40:05 2542  	 IF SQL%ROWCOUNT = 0 THEN
15:40:05 2543  	   RAISE BAD_GIFT_CERTIFICATE_ID;
15:40:05 2544  	 END IF;
15:40:05 2545  
15:40:05 2546  EXCEPTION
15:40:05 2547  WHEN BAD_GIFT_CERTIFICATE_ID THEN
15:40:05 2548  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2549  	   SPROC_NAME, 'No such gift certificate');
15:40:05 2550  WHEN BAD_STATUS_ID THEN
15:40:05 2551  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 2552  	   SPROC_NAME, 'Bad paypal status id');
15:40:05 2553  WHEN OTHERS THEN
15:40:05 2554  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2555  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2556  END UPDATE_GIFT_CERTIFICATE_STATUS;
15:40:05 2557  
15:40:05 2558  /******************************************************************************/
15:40:05 2559  
15:40:05 2560  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:40:05 2561  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:05 2562  	 out_result_set OUT SYS_REFCURSOR
15:40:05 2563  ) AS
15:40:05 2564  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
15:40:05 2565  -- VARIABLES
15:40:05 2566  temp_invoice_id NUMBER;
15:40:05 2567  -- EXCEPTIONS
15:40:05 2568  BAD_INVOICE_ID EXCEPTION;
15:40:05 2569  BEGIN
15:40:05 2570  
15:40:05 2571  	 BEGIN
15:40:05 2572  	   SELECT
15:40:05 2573  	     I.ID into temp_invoice_id
15:40:05 2574  	   FROM
15:40:05 2575  	     INVOICE I
15:40:05 2576  	   WHERE
15:40:05 2577  	     I.ID = in_invoice_id;
15:40:05 2578  	   EXCEPTION
15:40:05 2579  	     WHEN NO_DATA_FOUND THEN
15:40:05 2580  	       RAISE BAD_INVOICE_ID;
15:40:05 2581  	 END;
15:40:05 2582  
15:40:05 2583  	 OPEN out_result_set FOR
15:40:05 2584  	   SELECT
15:40:05 2585  	     gc.EXPIRATION_DATE,
15:40:05 2586  	     ch.name,
15:40:05 2587  	     ch.id offer_chain_id,
15:40:05 2588  	     gc.sender_email,
15:40:05 2589  	     gc.sender_name,
15:40:05 2590  	     gc.recipient_email,
15:40:05 2591  	     gc.recipient_name,
15:40:05 2592  	     gc.purchase_date,
15:40:05 2593  	     gc.redemption_date,
15:40:05 2594  	     gc.purchaser_group_id,
15:40:05 2595  	     gc.redeemer_group_id,
15:40:05 2596  	     gc.code,
15:40:05 2597  	     gc.gift_message,
15:40:05 2598  	     gc.recipient_notify_date,
15:40:05 2599  	     gc.id
15:40:05 2600  	   FROM
15:40:05 2601  	     GIFT_CERTIFICATE gc
15:40:05 2602  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
15:40:05 2603  	   WHERE
15:40:05 2604  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
15:40:05 2605  
15:40:05 2606  EXCEPTION
15:40:05 2607  WHEN BAD_INVOICE_ID THEN
15:40:05 2608  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2609  	   SPROC_NAME, 'No such invoice');
15:40:05 2610  WHEN OTHERS THEN
15:40:05 2611  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2612  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2613  END GET_GC_BY_PURCH_INVOICE_ID;
15:40:05 2614  
15:40:05 2615  
15:40:05 2616  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
15:40:05 2617  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:05 2618  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
15:40:05 2619  ) AS
15:40:05 2620  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
15:40:05 2621  -- VARIABLES
15:40:05 2622  temp_invoice_id NUMBER;
15:40:05 2623  -- EXCEPTIONS
15:40:05 2624  BAD_INVOICE_ID EXCEPTION;
15:40:05 2625  BEGIN
15:40:05 2626  
15:40:05 2627  	 BEGIN
15:40:05 2628  	   SELECT
15:40:05 2629  	     I.ID into temp_invoice_id
15:40:05 2630  	   FROM
15:40:05 2631  	     INVOICE I
15:40:05 2632  	   WHERE
15:40:05 2633  	     I.ID = in_invoice_id;
15:40:05 2634  	   EXCEPTION
15:40:05 2635  	     WHEN NO_DATA_FOUND THEN
15:40:05 2636  	       RAISE BAD_INVOICE_ID;
15:40:05 2637  	 END;
15:40:05 2638  
15:40:05 2639  	 BEGIN
15:40:05 2640  	   SELECT
15:40:05 2641  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
15:40:05 2642  	   FROM
15:40:05 2643  	     GIFT_CERTIFICATE
15:40:05 2644  	   WHERE
15:40:05 2645  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
15:40:05 2646  	   EXCEPTION
15:40:05 2647  	     WHEN NO_DATA_FOUND THEN
15:40:05 2648  	       out_gift_certificate_id := NULL;
15:40:05 2649  	 END;
15:40:05 2650  
15:40:05 2651  EXCEPTION
15:40:05 2652  WHEN BAD_INVOICE_ID THEN
15:40:05 2653  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2654  	   SPROC_NAME, 'No such invoice');
15:40:05 2655  WHEN OTHERS THEN
15:40:05 2656  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2658  END GET_GC_ID_BY_PURCH_INVOICE_ID;
15:40:05 2659  
15:40:05 2660  /******************************************************************************/
15:40:05 2661  
15:40:05 2662  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
15:40:05 2663  	 in_old_fin_instrument_id   IN NUMBER,
15:40:05 2664  	 in_old_fin_instrument_type IN NUMBER,
15:40:05 2665  	 in_new_fin_instrument_id   IN NUMBER,
15:40:05 2666  	 in_new_fin_instrument_type IN NUMBER,
15:40:05 2667  	 in_updated_by		    IN VARCHAR2
15:40:05 2668  ) AS
15:40:05 2669  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
15:40:05 2670  -- variables
15:40:05 2671  temp_out_transaction_id NUMBER;
15:40:05 2672  temp_out_charge_id      NUMBER;
15:40:05 2673  var_accounts_count      NUMBER;
15:40:05 2674  var_transaction_type_old  "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
15:40:05 2675  var_transaction_type	 "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
15:40:05 2676  -- EXCEPTIONS
15:40:05 2677  BAD_OLD_CC   EXCEPTION;
15:40:05 2678  BAD_OLD_PP   EXCEPTION;
15:40:05 2679  BAD_OLD_TYPE EXCEPTION;
15:40:05 2680  BAD_NEW_CC   EXCEPTION;
15:40:05 2681  BAD_NEW_PP   EXCEPTION;
15:40:05 2682  BAD_NEW_TYPE EXCEPTION;
15:40:05 2683  DIFFERENT_OWNERS EXCEPTION;
15:40:05 2684  BEGIN
15:40:05 2685  
15:40:05 2686  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
15:40:05 2687  	   IF PROCS_FIN_INSTRUMENTS_V23.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 2688  	     -- throw exception: bad old credit card
15:40:05 2689  	     RAISE BAD_OLD_CC;
15:40:05 2690  	   END IF;
15:40:05 2691  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
15:40:05 2692  	   IF PROCS_FIN_INSTRUMENTS_V23.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 2693  	     -- throw exception: bad old paypal
15:40:05 2694  	     RAISE BAD_OLD_PP;
15:40:05 2695  	   END IF;
15:40:05 2696  	 ELSE
15:40:05 2697  	   -- throw exception: bad instrument type
15:40:05 2698  	   RAISE BAD_OLD_TYPE;
15:40:05 2699  	 END IF;
15:40:05 2700  
15:40:05 2701  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
15:40:05 2702  	   IF PROCS_FIN_INSTRUMENTS_V23.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 2703  	     -- throw exception: bad new credit card
15:40:05 2704  	     RAISE BAD_NEW_CC;
15:40:05 2705  	   END IF;
15:40:05 2706  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
15:40:05 2707  	   IF PROCS_FIN_INSTRUMENTS_V23.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 2708  	     -- throw exception: bad new paypal
15:40:05 2709  	     RAISE BAD_NEW_PP;
15:40:05 2710  	   END IF;
15:40:05 2711  	 ELSE
15:40:05 2712  	   -- throw exception: bad new instrument type
15:40:05 2713  	   RAISE BAD_NEW_TYPE;
15:40:05 2714  	 END IF;
15:40:05 2715  
15:40:05 2716  	 -- Check that owner of both instruments - same man
15:40:05 2717  
15:40:05 2718  	 SELECT count(1) into var_accounts_count FROM (
15:40:05 2719  	   SELECT
15:40:05 2720  	     CC.ACCOUNT_ID
15:40:05 2721  	   FROM
15:40:05 2722  	     CREDIT_CARD CC
15:40:05 2723  	   WHERE
15:40:05 2724  	     (
15:40:05 2725  	       CC.ID = in_old_fin_instrument_id
15:40:05 2726  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
15:40:05 2727  	     )
15:40:05 2728  	     OR
15:40:05 2729  	     (
15:40:05 2730  	       CC.ID = in_new_fin_instrument_id
15:40:05 2731  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
15:40:05 2732  	     )
15:40:05 2733  	   UNION
15:40:05 2734  	   SELECT
15:40:05 2735  	     PP.ACCOUNT_ID
15:40:05 2736  	   FROM
15:40:05 2737  	     PAYPAL PP
15:40:05 2738  	   WHERE
15:40:05 2739  	     (
15:40:05 2740  	       PP.ID = in_old_fin_instrument_id
15:40:05 2741  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
15:40:05 2742  	     )
15:40:05 2743  	     OR
15:40:05 2744  	     (
15:40:05 2745  	       PP.ID = in_new_fin_instrument_id
15:40:05 2746  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
15:40:05 2747  	     )
15:40:05 2748  	 )
15:40:05 2749  	 WHERE
15:40:05 2750  	   account_id IS NOT NULL;
15:40:05 2751  
15:40:05 2752  	 IF (var_accounts_count > 1) THEN
15:40:05 2753  	   -- Throw exception: different owners of instruments
15:40:05 2754  	   RAISE DIFFERENT_OWNERS;
15:40:05 2755  	 END IF;
15:40:05 2756  
15:40:05 2757  	 FOR f_sub IN (
15:40:05 2758  	   select
15:40:05 2759  	     s.id
15:40:05 2760  	   FROM
15:40:05 2761  	     subscription s
15:40:05 2762  	   WHERE
15:40:05 2763  	     (
15:40:05 2764  	       s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE OR
15:40:05 2765  	       s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED OR
15:40:05 2766  	       s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD
15:40:05 2767  	     )
15:40:05 2768  	     AND
15:40:05 2769  	     s.instrument_type_id = in_old_fin_instrument_type AND
15:40:05 2770  	     s.instrument_id = in_old_fin_instrument_id
15:40:05 2771  	 ) LOOP
15:40:05 2772  	   PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
15:40:05 2773  	     in_subscription_id => f_sub.id,
15:40:05 2774  	     in_instrument_type_id => in_new_fin_instrument_type,
15:40:05 2775  	     in_instrument_id => in_new_fin_instrument_id,
15:40:05 2776  	     in_updated_by => in_updated_by
15:40:05 2777  	   );
15:40:05 2778  	 END LOOP;
15:40:05 2779  
15:40:05 2780  	 FOR f_open_charge IN (
15:40:05 2781  	   select
15:40:05 2782  	     ch.id,
15:40:05 2783  	     ch.invoice_id,
15:40:05 2784  	     ch.transaction_id,
15:40:05 2785  	     ch.charge_amount
15:40:05 2786  	   FROM
15:40:05 2787  	     charge ch
15:40:05 2788  	   WHERE
15:40:05 2789  	     ch.instrument_type_id = in_old_fin_instrument_type
15:40:05 2790  	     AND ch.instrument_id = in_old_fin_instrument_id
15:40:05 2791  	     AND ch.charge_status_id = GLOBAL_STATUSES_V23.CHARGE_OPENED
15:40:05 2792  	 ) LOOP
15:40:05 2793  
15:40:05 2794  	   FOR f_pending_transaction IN (
15:40:05 2795  	     select
15:40:05 2796  	       id, transaction_amount, order_id, is_refund
15:40:05 2797  	     from
15:40:05 2798  	       transaction
15:40:05 2799  	     where
15:40:05 2800  	       id = f_open_charge.transaction_id
15:40:05 2801  	       and transaction_status_id = GLOBAL_STATUSES_V23.TRANSACTION_PENDING
15:40:05 2802  	   ) LOOP
15:40:05 2803  
15:40:05 2804  	     SELECT
15:40:05 2805  	       DECODE(TRANSACTION_TYPE_CODE, 'RECURRING_BILLING', 'RECURRING_BILLING_USER_UPDATE',
15:40:05 2806  					     'GRACE_PERIOD_FINAL', 'GRACE_PERIOD_USER_UPDATE',
15:40:05 2807  					     TRANSACTION_TYPE_CODE)
15:40:05 2808  	     INTO var_transaction_type
15:40:05 2809  	     FROM
15:40:05 2810  	       Transaction
15:40:05 2811  	     WHERE
15:40:05 2812  	       id = f_pending_transaction.id
15:40:05 2813  	       AND ROWNUM <= 1;
15:40:05 2814  
15:40:05 2815  	     PROCS_TRANSACTION_V23.CREATE_TRANSACTION (
15:40:05 2816  	       in_transaction_id => NULL,
15:40:05 2817  	       in_status_id  => GLOBAL_STATUSES_V23.TRANSACTION_PENDING,
15:40:05 2818  	       in_amount     => f_pending_transaction.transaction_amount,
15:40:05 2819  	       in_created_by => in_updated_by,
15:40:05 2820  	       in_order_id   => null,
15:40:05 2821  	       in_is_refund  => f_pending_transaction.is_refund,
15:40:05 2822  	       in_transaction_type_code => var_transaction_type,
15:40:05 2823  	       out_transaction_id => temp_out_transaction_id
15:40:05 2824  	     );
15:40:05 2825  
15:40:05 2826  	     PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_STATUS(
15:40:05 2827  	       in_transaction_id => f_pending_transaction.id,
15:40:05 2828  	       in_updated_by	 => in_updated_by,
15:40:05 2829  	       in_transaction_status_id  => GLOBAL_STATUSES_V23.TRANSACTION_CLOSED
15:40:05 2830  	     );
15:40:05 2831  
15:40:05 2832  	     -- Create new charge
15:40:05 2833  	     PROCS_CHARGE_V23.CREATE_CHARGE (
15:40:05 2834  	       in_invoice_id	     => f_open_charge.invoice_id,
15:40:05 2835  	       in_transaction_id     => temp_out_transaction_id,
15:40:05 2836  	       in_instrument_type_id => in_new_fin_instrument_type,
15:40:05 2837  	       in_instrument_id      => in_new_fin_instrument_id,
15:40:05 2838  	       in_charge_amount      => f_open_charge.charge_amount,
15:40:05 2839  	       in_created_by	     => in_updated_by,
15:40:05 2840  	       in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
15:40:05 2841  	       out_charge_id	     => temp_out_charge_id
15:40:05 2842  	     );
15:40:05 2843  	     -- Cancel old charge
15:40:05 2844  	     PROCS_CHARGE_V23.UPDATE_CHARGE_STATUS(
15:40:05 2845  	       in_charge_id	   => f_open_charge.id,
15:40:05 2846  	       in_updated_by	   => in_updated_by,
15:40:05 2847  	       in_charge_status_id => GLOBAL_STATUSES_V23.CHARGE_CANCELED
15:40:05 2848  	     );
15:40:05 2849  
15:40:05 2850  	     PROCS_ADJUSTMENTS_V23.UPDATE_INVOICE_ADJUSTMENT(
15:40:05 2851  	       IN_INVOICE_ID => f_open_charge.invoice_id,
15:40:05 2852  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
15:40:05 2853  	       IN_CHARGE_ID => temp_out_charge_id,
15:40:05 2854  	       IN_UPDATED_BY => in_updated_by
15:40:05 2855  	     );
15:40:05 2856  
15:40:05 2857  	   END LOOP;
15:40:05 2858  	 END LOOP;
15:40:05 2859  
15:40:05 2860  EXCEPTION
15:40:05 2861  WHEN BAD_OLD_CC THEN
15:40:05 2862  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2863  	   SPROC_NAME, 'Trying to switch from non existing credit card');
15:40:05 2864  WHEN BAD_OLD_PP THEN
15:40:05 2865  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2866  	   SPROC_NAME, 'Trying to switch from non existing paypal');
15:40:05 2867  WHEN BAD_OLD_TYPE THEN
15:40:05 2868  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2869  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
15:40:05 2870  WHEN BAD_NEW_CC THEN
15:40:05 2871  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2872  	   SPROC_NAME, 'Trying to switch to non existing credit card');
15:40:05 2873  WHEN BAD_NEW_PP THEN
15:40:05 2874  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2875  	   SPROC_NAME, 'Trying to switch to non existing paypal');
15:40:05 2876  WHEN BAD_NEW_TYPE THEN
15:40:05 2877  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 2878  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
15:40:05 2879  WHEN DIFFERENT_OWNERS THEN
15:40:05 2880  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 2881  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
15:40:05 2882  WHEN OTHERS THEN
15:40:05 2883  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 2884  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 2885  END SWITCH_FINANCIAL_INSTRUMENT;
15:40:05 2886  
15:40:05 2887  /******************************************************************************/
15:40:05 2888  
15:40:05 2889  /*
15:40:05 2890  	   Note, this returns paypal records which are in the given window of time
15:40:05 2891  	   based on their creation date, not their expiration date, because we've seen
15:40:05 2892  	   suspicious values in the data for expiration dates. The java layer should
15:40:05 2893  	   inspect the expiration dates and decide whether or not to act on the data.
15:40:05 2894  */
15:40:05 2895  
15:40:05 2896  PROCEDURE GET_EXPIRING_PAYPAL (
15:40:05 2897  	 in_expire_window_days	 IN NUMBER,
15:40:05 2898  	 in_creation_limit_days  IN NUMBER,
15:40:05 2899  	 in_retry_throttle_name  IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
15:40:05 2900  	 out_result_set 	 OUT SYS_REFCURSOR
15:40:05 2901  ) AS
15:40:05 2902  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_EXPIRING_PAYPAL';
15:40:05 2903  var_rows_to_return CONSTANT NUMBER := 1000;
15:40:05 2904  BEGIN
15:40:05 2905  	 OPEN out_result_set FOR
15:40:05 2906  	 SELECT * FROM (
15:40:05 2907  	       SELECT
15:40:05 2908  	       ac.group_id	   AS group_id,
15:40:05 2909  	       pp.id		   AS paypal_id,
15:40:05 2910  	       sb.id		   AS subscription_id,
15:40:05 2911  	       pp.create_date	   AS paypal_creation_date,
15:40:05 2912  	       pp.expiration_date  AS paypal_expiration_date,
15:40:05 2913  	       lc.end_date	   AS license_end_date
15:40:05 2914  	   FROM license lc
15:40:05 2915  	   INNER JOIN subscription sb
15:40:05 2916  	   ON lc.subscription_id = sb.id
15:40:05 2917  	   INNER JOIN paypal pp
15:40:05 2918  	   ON pp.account_id = sb.account_id
15:40:05 2919  	   INNER JOIN account ac
15:40:05 2920  	   ON pp.account_id = ac.id
15:40:05 2921  	   WHERE SYSDATE <= lc.end_date
15:40:05 2922  	     AND SYSDATE + in_expire_window_days > lc.end_date
15:40:05 2923  	     AND pp.paypal_status_id = GLOBAL_STATUSES_V23.PAYPAL_ACTIVE
15:40:05 2924  	     AND lc.license_status_id IN (GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
15:40:05 2925  					  GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD)
15:40:05 2926  	     AND pp.id = sb.instrument_id
15:40:05 2927  	     AND sb.instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
15:40:05 2928  	     AND sb.subscription_status_id IN (GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE,
15:40:05 2929  					       GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
15:40:05 2930  	     AND pp.create_date + in_creation_limit_days <= lc.end_date
15:40:05 2931  	     AND NOT EXISTS(
15:40:05 2932  	       SELECT NULL
15:40:05 2933  	       FROM process_retry_throttle rt
15:40:05 2934  	       WHERE rt.process_name = in_retry_throttle_name
15:40:05 2935  		 AND rt.generic_id = pp.id
15:40:05 2936  	     )
15:40:05 2937  	     AND ROWNUM <= 10 * var_rows_to_return
15:40:05 2938  	   ORDER BY dbms_random.value
15:40:05 2939  	 )
15:40:05 2940  	 WHERE ROWNUM <= var_rows_to_return;
15:40:05 2941  END GET_EXPIRING_PAYPAL;
15:40:05 2942  
15:40:05 2943  /******************************************************************************/
15:40:05 2944  
15:40:05 2945  END PROCS_FIN_INSTRUMENTS_V23;
15:40:05 2946  .
15:40:05 SQL> /

Package body created.

Elapsed: 00:00:00.34
15:40:05 SQL> 
15:40:05 SQL> prompt Compiling body for procs_group_account.sql
Compiling body for procs_group_account.sql
15:40:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V23" AS
15:40:05   2  
15:40:05   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
15:40:05   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
15:40:05   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
15:40:05   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:40:05   7  ) AS
15:40:05   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
15:40:05   9  BEGIN
15:40:05  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23.UPDATE_SUBSCRIPTION_SHARE (
15:40:05  11  	  in_id 		=> in_sub_share_id,
15:40:05  12  	  in_needs_entitlements => in_need_entitlements,
15:40:05  13  	  in_updated_by 	=> in_updater
15:40:05  14  	);
15:40:05  15  END UPDATE_SS_NEED_ENTITLEMENTS;
15:40:05  16  
15:40:05  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
15:40:05  18  	out_result_set OUT SYS_REFCURSOR
15:40:05  19  ) AS
15:40:05  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
15:40:05  21  BEGIN
15:40:05  22  	OPEN out_result_set FOR
15:40:05  23  	SELECT * FROM (
15:40:05  24  	  SELECT DISTINCT
15:40:05  25  	    ga.Subscription_Id,
15:40:05  26  	    A.Group_Id Borrower_Group_Id,
15:40:05  27  	    L.Offer_Id,
15:40:05  28  	    ss.id Subscription_Share_id
15:40:05  29  	  FROM
15:40:05  30  	    Subscription_Share Ss,
15:40:05  31  	    Group_Account Ga,
15:40:05  32  	    Account A,
15:40:05  33  	    License l
15:40:05  34  	  WHERE
15:40:05  35  	    Ss.Group_Account_Id        = ga.id
15:40:05  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V23.TRUE
15:40:05  37  	    AND Ss.Borrower_Account_Id = A.Id
15:40:05  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
15:40:05  39  	    AND ROWNUM <= 5000
15:40:05  40  	  ORDER BY dbms_random.value
15:40:05  41  ) WHERE
15:40:05  42  	ROWNUM <= 1000;
15:40:05  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
15:40:05  44  
15:40:05  45  PROCEDURE EXPIRE_SUB_SHARE(
15:40:05  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
15:40:05  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:40:05  48  ) AS
15:40:05  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
15:40:05  50  BEGIN
15:40:05  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23.UPDATE_SUBSCRIPTION_SHARE (
15:40:05  52  	  in_id 	=> in_sub_share_id,
15:40:05  53  	  in_end_date	=> SYSDATE,
15:40:05  54  	  in_updated_by => in_updater,
15:40:05  55  	  in_needs_entitlements => 1
15:40:05  56  	);
15:40:05  57  END EXPIRE_SUB_SHARE;
15:40:05  58  
15:40:05  59  PROCEDURE EXPIRE_ALL_SHARES (
15:40:05  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
15:40:05  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:40:05  62  ) AS
15:40:05  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
15:40:05  64  BEGIN
15:40:05  65  	UPDATE SUBSCRIPTION_SHARE SET
15:40:05  66  	  END_DATE = SYSDATE,
15:40:05  67  	  UPDATED_BY = in_updated_by,
15:40:05  68  	  UPDATE_DATE = SYSDATE
15:40:05  69  	WHERE
15:40:05  70  	  GROUP_ACCOUNT_ID = in_group_account_id
15:40:05  71  	AND
15:40:05  72  	  SYSDATE < END_DATE;
15:40:05  73  EXCEPTION
15:40:05  74  	WHEN OTHERS THEN
15:40:05  75  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
15:40:05  77  END EXPIRE_ALL_SHARES;
15:40:05  78  
15:40:05  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
15:40:05  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
15:40:05  81  	in_start	 IN  NUMBER,
15:40:05  82  	in_end		 IN  NUMBER,
15:40:05  83  	in_expired	 IN  NUMBER,
15:40:05  84  	out_result_set	 OUT SYS_REFCURSOR,
15:40:05  85  	out_shares_count OUT NUMBER
15:40:05  86  ) AS
15:40:05  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
15:40:05  88  range_diff NUMBER := 0;
15:40:05  89  upper_bond_diff NUMBER := 0;
15:40:05  90  l_start NUMBER := 0;
15:40:05  91  l_end   NUMBER := 0;
15:40:05  92  BEGIN
15:40:05  93  	--Normalize the end points [START]
15:40:05  94  	IF (in_start IS NULL OR in_start < 0) Then
15:40:05  95  	  l_start := 0;
15:40:05  96  	ELSE
15:40:05  97  	  l_start := in_start;
15:40:05  98  	END IF;
15:40:05  99  
15:40:05 100  	IF (in_end IS NULL) Then
15:40:05 101  	  l_end := 11;
15:40:05 102  	ELSE
15:40:05 103  	  l_end := in_end;
15:40:05 104  	END IF;
15:40:05 105  
15:40:05 106  	l_start := l_start + 1;
15:40:05 107  	l_end	:= l_end   + 1;
15:40:05 108  
15:40:05 109  	range_diff := l_end - l_start;
15:40:05 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V23.MAX_RETURN_COUNT;
15:40:05 111  
15:40:05 112  	IF (upper_bond_diff > 0) Then
15:40:05 113  	  l_end := l_end - upper_bond_diff;
15:40:05 114  	END IF;
15:40:05 115  	--Normalize the end points [END]
15:40:05 116  
15:40:05 117  	BEGIN
15:40:05 118  	  SELECT
15:40:05 119  	    COUNT(1) INTO out_shares_count
15:40:05 120  	  FROM
15:40:05 121  	    GROUP_ACCOUNT ga,
15:40:05 122  	    SUBSCRIPTION_SHARE ss,
15:40:05 123  	    ACCOUNT a
15:40:05 124  	  WHERE
15:40:05 125  	    a.GROUP_ID		= in_group_id AND
15:40:05 126  	    a.Id		= ss.borrower_account_id And
15:40:05 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
15:40:05 128  	END;
15:40:05 129  
15:40:05 130  	IF in_expired > 0 THEN
15:40:05 131  	BEGIN
15:40:05 132  	    OPEN out_result_set FOR
15:40:05 133  	    SELECT
15:40:05 134  	      *
15:40:05 135  	    FROM
15:40:05 136  	      (SELECT rownum rnum, q.*
15:40:05 137  	       FROM
15:40:05 138  		(SELECT
15:40:05 139  		   ga.SUBSCRIPTION_ID,
15:40:05 140  		   ss.START_DATE,
15:40:05 141  		   ss.END_DATE,
15:40:05 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
15:40:05 143  		 FROM
15:40:05 144  		   GROUP_ACCOUNT ga,
15:40:05 145  		   SUBSCRIPTION_SHARE ss,
15:40:05 146  		   ACCOUNT a,
15:40:05 147  		   SUBSCRIPTION s,
15:40:05 148  		   ACCOUNT a2
15:40:05 149  		 WHERE
15:40:05 150  		   a.GROUP_ID	       = in_group_id AND
15:40:05 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
15:40:05 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
15:40:05 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
15:40:05 154  		   s.ACCOUNT_ID        = a2.ID
15:40:05 155  		) Q
15:40:05 156  	      WHERE rownum <= l_end)
15:40:05 157  	    WHERE rnum >= l_Start;
15:40:05 158  	END;
15:40:05 159  	ELSE
15:40:05 160  	BEGIN
15:40:05 161  	    OPEN out_result_set FOR
15:40:05 162  	    SELECT
15:40:05 163  	      *
15:40:05 164  	    FROM
15:40:05 165  	      (SELECT rownum rnum, q.*
15:40:05 166  	       FROM
15:40:05 167  		(SELECT
15:40:05 168  		   ga.SUBSCRIPTION_ID,
15:40:05 169  		   ss.START_DATE,
15:40:05 170  		   ss.END_DATE,
15:40:05 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
15:40:05 172  		 FROM
15:40:05 173  		   GROUP_ACCOUNT ga,
15:40:05 174  		   SUBSCRIPTION_SHARE ss,
15:40:05 175  		   ACCOUNT a,
15:40:05 176  		   SUBSCRIPTION s,
15:40:05 177  		   ACCOUNT a2
15:40:05 178  		 WHERE
15:40:05 179  		   a.GROUP_ID	       = in_group_id AND
15:40:05 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
15:40:05 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
15:40:05 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
15:40:05 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
15:40:05 184  		   s.ACCOUNT_ID        = a2.ID
15:40:05 185  		) Q
15:40:05 186  	      WHERE rownum <= l_end)
15:40:05 187  	    WHERE rnum >= l_start;
15:40:05 188  	  END;
15:40:05 189  	END IF;
15:40:05 190  EXCEPTION
15:40:05 191  WHEN NO_DATA_FOUND THEN
15:40:05 192  	NULL;
15:40:05 193  WHEN OTHERS THEN
15:40:05 194  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
15:40:05 196  END SUB_SHARE_BY_GROUP_ID;
15:40:05 197  
15:40:05 198  PROCEDURE IS_VALID_IP_ADDRESS (
15:40:05 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:40:05 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:40:05 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:40:05 202  	out_is_valid	    OUT NUMBER
15:40:05 203  ) AS
15:40:05 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
15:40:05 205  BEGIN
15:40:05 206  	SELECT
15:40:05 207  	  COUNT(1) INTO out_is_valid
15:40:05 208  	FROM
15:40:05 209  	  GROUP_ACCOUNT_IP_RANGE,
15:40:05 210  	  GROUP_ACCOUNT,
15:40:05 211  	  SUBSCRIPTION,
15:40:05 212  	  OFFER_CHAIN
15:40:05 213  	WHERE
15:40:05 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
15:40:05 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:40:05 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
15:40:05 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
15:40:05 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
15:40:05 219  	 (
15:40:05 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
15:40:05 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
15:40:05 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
15:40:05 223  	 ) AND
15:40:05 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE;
15:40:05 225  EXCEPTION
15:40:05 226  WHEN OTHERS THEN
15:40:05 227  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
15:40:05 229  END IS_VALID_IP_ADDRESS;
15:40:05 230  
15:40:05 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
15:40:05 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:40:05 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:40:05 234  	out_is_valid	    OUT NUMBER
15:40:05 235  ) AS
15:40:05 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
15:40:05 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
15:40:05 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
15:40:05 239  BEGIN
15:40:05 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
15:40:05 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
15:40:05 242  
15:40:05 243  	SELECT
15:40:05 244  	  COUNT(1) INTO out_is_valid
15:40:05 245  	FROM
15:40:05 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
15:40:05 247  	  GROUP_ACCOUNT ga,
15:40:05 248  	  SUBSCRIPTION s,
15:40:05 249  	  OFFER_CHAIN oc
15:40:05 250  	WHERE
15:40:05 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
15:40:05 252  	  ga.SUBSCRIPTION_ID = s.ID AND
15:40:05 253  	  s.OFFER_CHAIN_ID = oc.ID AND
15:40:05 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
15:40:05 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
15:40:05 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
15:40:05 257  	  gaed.IS_ACTIVE = 1;
15:40:05 258  EXCEPTION
15:40:05 259  WHEN OTHERS THEN
15:40:05 260  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
15:40:05 262  END IS_VALID_EMAIL_DOMAIN;
15:40:05 263  
15:40:05 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
15:40:05 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
15:40:05 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
15:40:05 267  	out_Result_Set	       OUT Sys_Refcursor
15:40:05 268  ) AS
15:40:05 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
15:40:05 270  BEGIN
15:40:05 271  	BEGIN
15:40:05 272  	   OPEN out_result_set FOR
15:40:05 273  	   SELECT
15:40:05 274  	      ss.ID,
15:40:05 275  	      ss.GROUP_ACCOUNT_ID,
15:40:05 276  	      ss.BORROWER_ACCOUNT_ID,
15:40:05 277  	      ss.IP_ADDRESS,
15:40:05 278  	      ss.START_DATE,
15:40:05 279  	      ss.END_DATE,
15:40:05 280  	      ss.CREATED_BY,
15:40:05 281  	      ss.CREATE_DATE,
15:40:05 282  	      ss.UPDATED_BY,
15:40:05 283  	      ss.UPDATE_DATE,
15:40:05 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
15:40:05 285  	   FROM
15:40:05 286  	     SUBSCRIPTION_SHARE ss,
15:40:05 287  	     ACCOUNT a
15:40:05 288  	   WHERE
15:40:05 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
15:40:05 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
15:40:05 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
15:40:05 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
15:40:05 293  	END;
15:40:05 294  EXCEPTION
15:40:05 295  WHEN OTHERS THEN
15:40:05 296  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
15:40:05 298  END GET_SUBSCRIPTION_SHARE;
15:40:05 299  
15:40:05 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
15:40:05 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
15:40:05 302  	out_result_set	   OUT SYS_REFCURSOR
15:40:05 303  ) As
15:40:05 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
15:40:05 305  BEGIN
15:40:05 306  OPEN out_result_set FOR
15:40:05 307  	SELECT
15:40:05 308  	  ID,
15:40:05 309  	  SUBSCRIPTION_ID,
15:40:05 310  	  GROUP_NAME,
15:40:05 311  	  FIRST_NAME,
15:40:05 312  	  LAST_NAME,
15:40:05 313  	  EMAIL,
15:40:05 314  	  PHONE,
15:40:05 315  	  ORGANIZATION_TYPE,
15:40:05 316  	  SEATS,
15:40:05 317  	  SEAT_TTL_IN_HOURS,
15:40:05 318  	  CREATE_DATE,
15:40:05 319  	  CREATED_BY,
15:40:05 320  	  UPDATE_DATE,
15:40:05 321  	  UPDATED_BY
15:40:05 322  	FROM
15:40:05 323  	  GROUP_ACCOUNT
15:40:05 324  	Where
15:40:05 325  	  Subscription_Id = in_subscription_id;
15:40:05 326  EXCEPTION
15:40:05 327  WHEN OTHERS THEN
15:40:05 328  	Procs_Common_V23.Throw_Exception(APP_EXCEPTION_CODES_V23.Unknown_Error,
15:40:05 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 330  
15:40:05 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
15:40:05 332  
15:40:05 333  PROCEDURE CREATE_GROUP_ACCOUNT (
15:40:05 334  	in_subscription_id	 IN NUMBER,
15:40:05 335  	in_group_name		 IN VARCHAR2,
15:40:05 336  	in_first_name		 IN VARCHAR2,
15:40:05 337  	in_last_name		 IN VARCHAR2,
15:40:05 338  	in_email		 IN VARCHAR2,
15:40:05 339  	in_phone		 IN VARCHAR2,
15:40:05 340  	in_organization_type	 IN VARCHAR2,
15:40:05 341  	in_seats		 IN NUMBER,
15:40:05 342  	in_seat_ttl_in_hours	 IN NUMBER,
15:40:05 343  	in_ip			 IN NUMBER,
15:40:05 344  	in_created_by		 IN VARCHAR2
15:40:05 345  ) AS
15:40:05 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
15:40:05 347  BEGIN
15:40:05 348  
15:40:05 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23.CREATE_GROUP_ACCOUNT(
15:40:05 350  	  in_subscription_id => in_subscription_id,
15:40:05 351  	  in_group_name => in_group_name,
15:40:05 352  	  in_first_name => in_first_name,
15:40:05 353  	  in_last_name => in_last_name,
15:40:05 354  	  in_email => in_email,
15:40:05 355  	  in_phone => in_phone,
15:40:05 356  	  in_organization_type => in_organization_type,
15:40:05 357  	  in_seats => in_seats,
15:40:05 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
15:40:05 359  	  in_ip => in_ip,
15:40:05 360  	  in_created_by => in_created_by
15:40:05 361  	);
15:40:05 362  
15:40:05 363  END CREATE_GROUP_ACCOUNT;
15:40:05 364  
15:40:05 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
15:40:05 366  	in_group_account_id IN NUMBER,
15:40:05 367  	in_start	    IN NUMBER,
15:40:05 368  	in_end		    IN NUMBER,
15:40:05 369  	out_Result_Set	    OUT Sys_Refcursor
15:40:05 370  ) AS
15:40:05 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
15:40:05 372  range_diff NUMBER := 0;
15:40:05 373  upper_bond_diff NUMBER := 0;
15:40:05 374  l_start NUMBER := 0;
15:40:05 375  l_end   NUMBER := 0;
15:40:05 376  BEGIN
15:40:05 377  	-- Normalize the end points [START]
15:40:05 378  	IF (in_start IS NULL OR in_start < 0) Then
15:40:05 379  	  l_start := 0;
15:40:05 380  	ELSE
15:40:05 381  	  l_start := in_start;
15:40:05 382  	END IF;
15:40:05 383  
15:40:05 384  	IF (in_end IS NULL) Then
15:40:05 385  	  l_end := 11;
15:40:05 386  	ELSE
15:40:05 387  	  l_end := in_end;
15:40:05 388  	END IF;
15:40:05 389  
15:40:05 390  	l_start := l_start + 1;
15:40:05 391  	l_end	:= l_end   + 1;
15:40:05 392  
15:40:05 393  	range_diff := l_end - l_start;
15:40:05 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V23.MAX_RETURN_COUNT;
15:40:05 395  
15:40:05 396  	IF (upper_bond_diff > 0) Then
15:40:05 397  	  l_end := l_end - upper_bond_diff;
15:40:05 398  	END IF;
15:40:05 399  	-- Normalize the end points [END]
15:40:05 400  
15:40:05 401  	BEGIN
15:40:05 402  	   OPEN out_result_set FOR
15:40:05 403  	   SELECT *
15:40:05 404  	   FROM
15:40:05 405  	     (SELECT rownum rnum, Q.*
15:40:05 406  	      FROM
15:40:05 407  	       (SELECT
15:40:05 408  		  ss.ID,
15:40:05 409  		  ss.GROUP_ACCOUNT_ID,
15:40:05 410  		  ss.BORROWER_ACCOUNT_ID,
15:40:05 411  		  ss.IP_ADDRESS,
15:40:05 412  		  ss.START_DATE,
15:40:05 413  		  ss.END_DATE,
15:40:05 414  		  ss.CREATED_BY,
15:40:05 415  		  ss.CREATE_DATE,
15:40:05 416  		  ss.UPDATED_BY,
15:40:05 417  		  ss.UPDATE_DATE,
15:40:05 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
15:40:05 419  		FROM
15:40:05 420  		  SUBSCRIPTION_SHARE ss,
15:40:05 421  		  ACCOUNT a,
15:40:05 422  		  LICENSE l,
15:40:05 423  		  GROUP_ACCOUNT ga
15:40:05 424  		WHERE
15:40:05 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
15:40:05 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
15:40:05 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
15:40:05 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
15:40:05 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
15:40:05 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
15:40:05 431  	      ) Q
15:40:05 432  	    WHERE rownum <= l_end)
15:40:05 433  	  WHERE rnum >= l_start;
15:40:05 434  	END;
15:40:05 435  EXCEPTION
15:40:05 436  WHEN OTHERS THEN
15:40:05 437  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
15:40:05 439  END GET_SUBSCRIPTION_SHARES;
15:40:05 440  
15:40:05 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
15:40:05 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:40:05 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:40:05 444  	out_result_set	      OUT SYS_REFCURSOR
15:40:05 445  ) AS
15:40:05 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
15:40:05 447  BEGIN
15:40:05 448  	BEGIN
15:40:05 449  	  OPEN out_result_set FOR
15:40:05 450  	  SELECT
15:40:05 451  	    ID,
15:40:05 452  	    SUBSCRIPTION_ID,
15:40:05 453  	    GROUP_NAME,
15:40:05 454  	    FIRST_NAME,
15:40:05 455  	    LAST_NAME,
15:40:05 456  	    EMAIL,
15:40:05 457  	    PHONE,
15:40:05 458  	    ORGANIZATION_TYPE,
15:40:05 459  	    SEATS,
15:40:05 460  	    SEAT_TTL_IN_HOURS,
15:40:05 461  	    CREATE_DATE,
15:40:05 462  	    CREATED_BY,
15:40:05 463  	    UPDATE_DATE,
15:40:05 464  	    UPDATED_BY
15:40:05 465  	  FROM
15:40:05 466  	    GROUP_ACCOUNT
15:40:05 467  	  WHERE
15:40:05 468  	    ID IN (
15:40:05 469  	      SELECT
15:40:05 470  		GROUP_ACCOUNT_ID
15:40:05 471  	      FROM
15:40:05 472  		GROUP_ACCOUNT_IP_RANGE,
15:40:05 473  		GROUP_ACCOUNT,
15:40:05 474  		SUBSCRIPTION,
15:40:05 475  		OFFER_CHAIN
15:40:05 476  	      WHERE
15:40:05 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
15:40:05 478  	      AND
15:40:05 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:40:05 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
15:40:05 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
15:40:05 482  	      AND
15:40:05 483  		(
15:40:05 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
15:40:05 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
15:40:05 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
15:40:05 487  		)
15:40:05 488  	      AND
15:40:05 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE
15:40:05 490  	    );
15:40:05 491  	  END;
15:40:05 492  EXCEPTION
15:40:05 493  WHEN OTHERS THEN
15:40:05 494  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 496  END GET_GROUP_ACCOUNT_BY_IP;
15:40:05 497  
15:40:05 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
15:40:05 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:40:05 500  	out_result_set	    OUT SYS_REFCURSOR
15:40:05 501  ) AS
15:40:05 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
15:40:05 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
15:40:05 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
15:40:05 505  BEGIN
15:40:05 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
15:40:05 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
15:40:05 508  	BEGIN
15:40:05 509  	  OPEN out_result_set FOR
15:40:05 510  	  SELECT
15:40:05 511  	    ID,
15:40:05 512  	    SUBSCRIPTION_ID,
15:40:05 513  	    GROUP_NAME,
15:40:05 514  	    FIRST_NAME,
15:40:05 515  	    LAST_NAME,
15:40:05 516  	    EMAIL,
15:40:05 517  	    PHONE,
15:40:05 518  	    ORGANIZATION_TYPE,
15:40:05 519  	    SEATS,
15:40:05 520  	    SEAT_TTL_IN_HOURS,
15:40:05 521  	    CREATE_DATE,
15:40:05 522  	    CREATED_BY,
15:40:05 523  	    UPDATE_DATE,
15:40:05 524  	    UPDATED_BY
15:40:05 525  	  FROM
15:40:05 526  	    GROUP_ACCOUNT
15:40:05 527  	  WHERE
15:40:05 528  	    ID IN (
15:40:05 529  	      SELECT
15:40:05 530  		GROUP_ACCOUNT_ID
15:40:05 531  	      FROM
15:40:05 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
15:40:05 533  		GROUP_ACCOUNT ga,
15:40:05 534  		SUBSCRIPTION s,
15:40:05 535  		OFFER_CHAIN oc
15:40:05 536  	      WHERE
15:40:05 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
15:40:05 538  		ga.SUBSCRIPTION_ID = s.ID AND
15:40:05 539  		s.OFFER_CHAIN_ID = oc.ID AND
15:40:05 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
15:40:05 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
15:40:05 542  		gaed.IS_ACTIVE = 1
15:40:05 543  	    );
15:40:05 544  	  END;
15:40:05 545  EXCEPTION
15:40:05 546  WHEN OTHERS THEN
15:40:05 547  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
15:40:05 550  
15:40:05 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
15:40:05 552  	in_group_account_id   IN NUMBER,
15:40:05 553  	in_start	      IN NUMBER,
15:40:05 554  	in_end		      IN NUMBER,
15:40:05 555  	in_status	      IN NUMBER,
15:40:05 556  	out_record_count      OUT NUMBER,
15:40:05 557  	out_result_set	      OUT SYS_REFCURSOR
15:40:05 558  ) AS
15:40:05 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
15:40:05 560  range_diff NUMBER := 0;
15:40:05 561  upper_bond_diff NUMBER := 0;
15:40:05 562  l_start NUMBER := 0;
15:40:05 563  l_end   NUMBER := 0;
15:40:05 564  BEGIN
15:40:05 565  	--Normalize the end points [START]
15:40:05 566  	IF (in_start IS NULL OR in_start < 0) Then
15:40:05 567  	  l_start := 0;
15:40:05 568  	ELSE
15:40:05 569  	  l_start := in_start;
15:40:05 570  	END IF;
15:40:05 571  
15:40:05 572  	IF (in_end IS NULL) Then
15:40:05 573  	  l_end := 11;
15:40:05 574  	ELSE
15:40:05 575  	  l_end := in_end;
15:40:05 576  	END IF;
15:40:05 577  
15:40:05 578  	l_start := l_start + 1;
15:40:05 579  	l_end	:= l_end   + 1;
15:40:05 580  
15:40:05 581  	range_diff := l_end - l_start;
15:40:05 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V23.MAX_RETURN_COUNT;
15:40:05 583  
15:40:05 584  	IF (upper_bond_diff > 0) Then
15:40:05 585  	  l_end := l_end - upper_bond_diff;
15:40:05 586  	END IF;
15:40:05 587  	--Normalize the end points [END]
15:40:05 588  
15:40:05 589  	--Total count of records [START]
15:40:05 590  	SELECT
15:40:05 591  	  COUNT(1) INTO out_record_count
15:40:05 592  	FROM
15:40:05 593  	  GROUP_ACCOUNT_IP_RANGE
15:40:05 594  	WHERE
15:40:05 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
15:40:05 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
15:40:05 597  	--Total count of records [END]
15:40:05 598  
15:40:05 599  	OPEN out_result_set FOR
15:40:05 600  	SELECT
15:40:05 601  	  *
15:40:05 602  	FROM
15:40:05 603  	  (SELECT rownum rnum, q.*
15:40:05 604  	   FROM
15:40:05 605  	    (SELECT
15:40:05 606  	       ID,
15:40:05 607  	       GROUP_ACCOUNT_ID,
15:40:05 608  	       MINIMUM_IP_STRING,
15:40:05 609  	       MAXIMUM_IP_STRING,
15:40:05 610  	       GROUP_ACC_IP_RNG_STATUS_ID
15:40:05 611  	     FROM
15:40:05 612  	       GROUP_ACCOUNT_IP_RANGE
15:40:05 613  	     WHERE
15:40:05 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
15:40:05 615  	       (in_status IS NULL OR
15:40:05 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
15:40:05 617  	    ) Q
15:40:05 618  	  WHERE rownum <= l_end)
15:40:05 619  	WHERE rnum >= l_Start;
15:40:05 620  EXCEPTION
15:40:05 621  WHEN OTHERS THEN
15:40:05 622  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
15:40:05 624  END GET_GROUP_ACCOUNT_IP_RANGES;
15:40:05 625  
15:40:05 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
15:40:05 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:40:05 628  	in_start	      IN NUMBER,
15:40:05 629  	in_end		      IN NUMBER,
15:40:05 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
15:40:05 631  	out_record_count      OUT NUMBER,
15:40:05 632  	out_result_set	      OUT SYS_REFCURSOR
15:40:05 633  ) AS
15:40:05 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
15:40:05 635  range_diff NUMBER := 0;
15:40:05 636  upper_bond_diff NUMBER := 0;
15:40:05 637  l_start NUMBER := 0;
15:40:05 638  l_end   NUMBER := 0;
15:40:05 639  BEGIN
15:40:05 640  	--Normalize the end points [START]
15:40:05 641  	IF (in_start IS NULL OR in_start < 0) Then
15:40:05 642  	  l_start := 0;
15:40:05 643  	ELSE
15:40:05 644  	  l_start := in_start;
15:40:05 645  	END IF;
15:40:05 646  
15:40:05 647  	IF (in_end IS NULL) Then
15:40:05 648  	  l_end := 11;
15:40:05 649  	ELSE
15:40:05 650  	  l_end := in_end;
15:40:05 651  	END IF;
15:40:05 652  
15:40:05 653  	l_start := l_start + 1;
15:40:05 654  	l_end	:= l_end   + 1;
15:40:05 655  
15:40:05 656  	range_diff := l_end - l_start;
15:40:05 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V23.MAX_RETURN_COUNT;
15:40:05 658  
15:40:05 659  	IF (upper_bond_diff > 0) Then
15:40:05 660  	  l_end := l_end - upper_bond_diff;
15:40:05 661  	END IF;
15:40:05 662  	--Normalize the end points [END]
15:40:05 663  
15:40:05 664  	--Total count of records [START]
15:40:05 665  	SELECT
15:40:05 666  	  COUNT(1) INTO out_record_count
15:40:05 667  	FROM
15:40:05 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
15:40:05 669  	WHERE
15:40:05 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
15:40:05 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
15:40:05 672  	--Total count of records [END]
15:40:05 673  
15:40:05 674  	OPEN out_result_set FOR
15:40:05 675  	SELECT
15:40:05 676  	  *
15:40:05 677  	FROM
15:40:05 678  	  (SELECT rownum rnum, q.*
15:40:05 679  	   FROM
15:40:05 680  	    (SELECT
15:40:05 681  	      ID,
15:40:05 682  	      GROUP_ACCOUNT_ID,
15:40:05 683  	      EMAIL_DOMAIN,
15:40:05 684  	      IS_ACTIVE
15:40:05 685  	     FROM
15:40:05 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
15:40:05 687  	     WHERE
15:40:05 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
15:40:05 689  	       (in_status IS NULL OR
15:40:05 690  		IS_ACTIVE = in_status)
15:40:05 691  	    ) Q
15:40:05 692  	  WHERE rownum <= l_end)
15:40:05 693  	WHERE rnum >= l_Start;
15:40:05 694  
15:40:05 695  EXCEPTION
15:40:05 696  WHEN OTHERS THEN
15:40:05 697  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
15:40:05 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
15:40:05 700  
15:40:05 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
15:40:05 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:40:05 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:40:05 704  ) AS
15:40:05 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
15:40:05 706  BEGIN
15:40:05 707  	  PROCS_GROUP_ACCOUNT_CRU_V23.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
15:40:05 708  	    in_group_account_id => in_group_account_id,
15:40:05 709  	    in_updated_by => in_updated_by
15:40:05 710  	  );
15:40:05 711  EXCEPTION
15:40:05 712  WHEN OTHERS THEN
15:40:05 713  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
15:40:05 716  
15:40:05 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
15:40:05 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
15:40:05 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
15:40:05 720  ) AS
15:40:05 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
15:40:05 722  BEGIN
15:40:05 723  	  PROCS_GROUP_ACCOUNT_CRU_V23.DISABLE_EMAIL_DOMAIN_BY_ID(
15:40:05 724  	    in_id => in_id,
15:40:05 725  	    in_updated_by => in_updated_by
15:40:05 726  	  );
15:40:05 727  EXCEPTION
15:40:05 728  WHEN OTHERS THEN
15:40:05 729  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
15:40:05 732  
15:40:05 733  PROCEDURE ADD_EMAIL_DOMAIN (
15:40:05 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
15:40:05 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
15:40:05 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
15:40:05 737  ) AS
15:40:05 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
15:40:05 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
15:40:05 740  var_is_dupe NUMBER(1);
15:40:05 741  var_group_account_count NUMBER := 0;
15:40:05 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
15:40:05 743  NOT_GL EXCEPTION;
15:40:05 744  BEGIN
15:40:05 745  
15:40:05 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
15:40:05 747  	  FROM
15:40:05 748  	    GROUP_ACCOUNT,
15:40:05 749  	    SUBSCRIPTION,
15:40:05 750  	    OFFER_CHAIN
15:40:05 751  	  WHERE
15:40:05 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
15:40:05 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:40:05 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 755  	  ;
15:40:05 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
15:40:05 757  	    RAISE NOT_GL;
15:40:05 758  	  END IF;
15:40:05 759  
15:40:05 760  	  PROCS_GROUP_ACCOUNT_CRU_V23.ADD_EMAIL_DOMAIN(
15:40:05 761  	     in_group_account_id => in_group_account_id,
15:40:05 762  	     in_email_domain => in_email_domain,
15:40:05 763  	     in_is_active => GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_ACT,
15:40:05 764  	     in_created_by => in_created_by
15:40:05 765  	  );
15:40:05 766  
15:40:05 767  EXCEPTION
15:40:05 768  WHEN NOT_GL THEN
15:40:05 769  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 770  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
15:40:05 771  WHEN OTHERS THEN
15:40:05 772  	IF (sqlcode=APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR) THEN
15:40:05 773  	   RAISE;
15:40:05 774  	ELSE
15:40:05 775  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 776  	    SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 777  	END IF;
15:40:05 778  END ADD_EMAIL_DOMAIN;
15:40:05 779  
15:40:05 780  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
15:40:05 781  	in_group_account_id    IN NUMBER,
15:40:05 782  	in_borrower_account_id IN NUMBER,
15:40:05 783  	in_ip_address	       IN VARCHAR2,
15:40:05 784  	in_email_domain        IN VARCHAR2,
15:40:05 785  	in_created_by	       IN VARCHAR2
15:40:05 786  ) AS
15:40:05 787  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
15:40:05 788  ga_ttl_in_hours NUMBER := NULL;
15:40:05 789  start_date DATE := NULL;
15:40:05 790  end_date DATE := NULL;
15:40:05 791  BEGIN
15:40:05 792  	start_date := sysdate;
15:40:05 793  	end_date   := GLOBAL_CONSTANTS_V23.MAX_DATE;
15:40:05 794  
15:40:05 795  	BEGIN
15:40:05 796  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
15:40:05 797  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
15:40:05 798  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
15:40:05 799  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:40:05 800  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
15:40:05 801  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
15:40:05 802  	EXCEPTION
15:40:05 803  	  WHEN no_data_found THEN
15:40:05 804  	    ga_ttl_in_hours := NULL;
15:40:05 805  	END;
15:40:05 806  
15:40:05 807  	IF (ga_ttl_in_hours IS NOT NULL) THEN
15:40:05 808  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
15:40:05 809  	END IF;
15:40:05 810  
15:40:05 811  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23.CREATE_SUBSCRIPTION_SHARE(
15:40:05 812  	  in_group_account_id => in_group_account_id,
15:40:05 813  	  in_borrower_account_id => in_borrower_account_id,
15:40:05 814  	  in_ip_address => in_ip_address,
15:40:05 815  	  in_email_domain => in_email_domain,
15:40:05 816  	  in_start_date => start_date,
15:40:05 817  	  in_end_date => end_date,
15:40:05 818  	  in_created_by => in_created_by
15:40:05 819  	);
15:40:05 820  END CREATE_SUBSCRIPTION_SHARE;
15:40:05 821  
15:40:05 822  
15:40:05 823  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
15:40:05 824  	in_group_account_id   IN NUMBER,
15:40:05 825  	out_occupied_seats   OUT NUMBER
15:40:05 826  ) AS
15:40:05 827  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
15:40:05 828  BEGIN
15:40:05 829  	SELECT
15:40:05 830  	  PROCS_GROUP_ACCOUNT_V23.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
15:40:05 831  	FROM dual;
15:40:05 832  EXCEPTION
15:40:05 833  WHEN OTHERS THEN
15:40:05 834  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 835  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 836  END GET_NUM_OCCUPIED_GROUP_SEATS;
15:40:05 837  
15:40:05 838  
15:40:05 839  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
15:40:05 840  	in_group_account_id   IN NUMBER
15:40:05 841  ) RETURN NUMBER IS
15:40:05 842  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
15:40:05 843  num_seats NUMBER;
15:40:05 844  BEGIN
15:40:05 845  	SELECT
15:40:05 846  	  COUNT(1) INTO num_seats
15:40:05 847  	FROM
15:40:05 848  	  SUBSCRIPTION_SHARE
15:40:05 849  	WHERE
15:40:05 850  	  GROUP_ACCOUNT_ID = in_group_account_id AND
15:40:05 851  	  SYSDATE BETWEEN START_DATE AND END_DATE;
15:40:05 852  	RETURN num_seats;
15:40:05 853  EXCEPTION
15:40:05 854  WHEN OTHERS THEN
15:40:05 855  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 856  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 857  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
15:40:05 858  
15:40:05 859  -- *********************************************************************
15:40:05 860  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
15:40:05 861  -- *********************************************************************
15:40:05 862  -- I'm debating if this should be in a different package, but right now
15:40:05 863  -- I'm too lazy to move this else where.
15:40:05 864  -- *********************************************************************
15:40:05 865  
15:40:05 866  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
15:40:05 867  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:40:05 868  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:40:05 869  ) AS
15:40:05 870  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
15:40:05 871  BEGIN
15:40:05 872  	  PROCS_GROUP_ACCOUNT_CRU_V23.DISABLE_IP_RANGES_BY_GA_ID(
15:40:05 873  	    in_group_account_id => in_group_account_id,
15:40:05 874  	    in_updated_by => in_updated_by
15:40:05 875  	  );
15:40:05 876  EXCEPTION
15:40:05 877  WHEN OTHERS THEN
15:40:05 878  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 879  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 880  END DISABLE_IP_RANGES_BY_GA_ID;
15:40:05 881  
15:40:05 882  PROCEDURE DISABLE_IP_RANGE_BY_ID (
15:40:05 883  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
15:40:05 884  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
15:40:05 885  ) AS
15:40:05 886  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
15:40:05 887  BEGIN
15:40:05 888  	  PROCS_GROUP_ACCOUNT_CRU_V23.DISABLE_IP_RANGE_BY_ID(
15:40:05 889  	    in_id => in_id,
15:40:05 890  	    in_updated_by => in_updated_by
15:40:05 891  	  );
15:40:05 892  EXCEPTION
15:40:05 893  WHEN OTHERS THEN
15:40:05 894  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 895  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 896  END DISABLE_IP_RANGE_BY_ID;
15:40:05 897  
15:40:05 898  PROCEDURE ADD_IP_RANGE (
15:40:05 899  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
15:40:05 900  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
15:40:05 901  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
15:40:05 902  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
15:40:05 903  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
15:40:05 904  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
15:40:05 905  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
15:40:05 906  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
15:40:05 907  ) AS
15:40:05 908  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
15:40:05 909  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
15:40:05 910  var_is_dupe NUMBER(1);
15:40:05 911  NOT_GL EXCEPTION;
15:40:05 912  DUPE EXCEPTION;
15:40:05 913  BEGIN
15:40:05 914  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
15:40:05 915  	  FROM
15:40:05 916  	    GROUP_ACCOUNT,
15:40:05 917  	    SUBSCRIPTION,
15:40:05 918  	    OFFER_CHAIN
15:40:05 919  	  WHERE
15:40:05 920  	    GROUP_ACCOUNT.ID = in_group_account_id AND
15:40:05 921  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
15:40:05 922  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 923  	  ;
15:40:05 924  	  IF(var_ga_type != 'GL') THEN
15:40:05 925  	    RAISE NOT_GL;
15:40:05 926  	  END IF;
15:40:05 927  
15:40:05 928  	  PROCS_GROUP_ACCOUNT_CRU_V23.ADD_IP_RANGE(
15:40:05 929  	    in_group_account_id => in_group_account_id,
15:40:05 930  	    in_minimum_ip_string => in_minimum_ip_string,
15:40:05 931  	    in_minimum_ip_low => in_minimum_ip_low,
15:40:05 932  	    in_minimum_ip_high => in_minimum_ip_high,
15:40:05 933  	    in_maximum_ip_string => in_maximum_ip_string,
15:40:05 934  	    in_maximum_ip_low => in_maximum_ip_low,
15:40:05 935  	    in_maximum_ip_high => in_maximum_ip_high,
15:40:05 936  	    in_created_by => in_created_by
15:40:05 937  	  );
15:40:05 938  
15:40:05 939  	  -- Check for overlapping ip address range after insert.  Note that if another
15:40:05 940  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
15:40:05 941  	  SELECT count(1) into var_is_dupe
15:40:05 942  	  FROM
15:40:05 943  	    GROUP_ACCOUNT_IP_RANGE
15:40:05 944  	  WHERE
15:40:05 945  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE AND
15:40:05 946  		((
15:40:05 947  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
15:40:05 948  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
15:40:05 949  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
15:40:05 950  		) OR
15:40:05 951  
15:40:05 952  		(
15:40:05 953  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
15:40:05 954  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
15:40:05 955  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
15:40:05 956  		)) AND
15:40:05 957  	    ROWNUM < 3;
15:40:05 958  
15:40:05 959  	  If(var_is_dupe > 1) THEN
15:40:05 960  	    RAISE DUPE;
15:40:05 961  	  END IF;
15:40:05 962  EXCEPTION
15:40:05 963  WHEN NOT_GL THEN
15:40:05 964  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 965  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
15:40:05 966  WHEN DUPE THEN
15:40:05 967  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 968  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
15:40:05 969  WHEN OTHERS THEN
15:40:05 970  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 971  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 972  END ADD_IP_RANGE;
15:40:05 973  
15:40:05 974  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
15:40:05 975  	in_group_account_id IN NUMBER,
15:40:05 976  	out_group_id OUT NUMBER
15:40:05 977  ) AS
15:40:05 978  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
15:40:05 979  BEGIN
15:40:05 980  	SELECT
15:40:05 981  	  a.group_id into out_group_id
15:40:05 982  	FROM
15:40:05 983  	  account a,
15:40:05 984  	  subscription s,
15:40:05 985  	  group_account ga
15:40:05 986  	WHERE
15:40:05 987  	  a.id = s.account_id and
15:40:05 988  	  s.id = ga.subscription_id and
15:40:05 989  	  ga.id = in_group_account_id and
15:40:05 990  	  rownum < 2
15:40:05 991  	;
15:40:05 992  EXCEPTION
15:40:05 993  WHEN NO_DATA_FOUND THEN
15:40:05 994  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 995  	  SPROC_NAME, 'Bad group_account_id');
15:40:05 996  WHEN OTHERS THEN
15:40:05 997  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 998  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 999  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
15:40:05 1000  
15:40:05 1001  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
15:40:05 1002  	 in_group_account_ip_range_id IN NUMBER,
15:40:05 1003  	 out_group_id OUT NUMBER
15:40:05 1004  ) AS
15:40:05 1005  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
15:40:05 1006  BEGIN
15:40:05 1007  	 SELECT
15:40:05 1008  	   a.group_id into out_group_id
15:40:05 1009  	 FROM
15:40:05 1010  	   account a,
15:40:05 1011  	   subscription s,
15:40:05 1012  	   group_account ga,
15:40:05 1013  	   group_account_ip_range ir
15:40:05 1014  	 WHERE
15:40:05 1015  	   a.id = s.account_id and
15:40:05 1016  	   s.id = ga.subscription_id and
15:40:05 1017  	   ga.id = ir.group_account_id and
15:40:05 1018  	   ir.id = in_group_account_ip_range_id and
15:40:05 1019  	   rownum < 2
15:40:05 1020  	 ;
15:40:05 1021  EXCEPTION
15:40:05 1022  WHEN NO_DATA_FOUND THEN
15:40:05 1023  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1024  	   SPROC_NAME, 'Bad group_account_ip_range_id');
15:40:05 1025  WHEN OTHERS THEN
15:40:05 1026  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1027  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1028  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
15:40:05 1029  
15:40:05 1030  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
15:40:05 1031  	 in_group_account_email_dom_id IN NUMBER,
15:40:05 1032  	 out_group_id OUT NUMBER
15:40:05 1033  ) AS
15:40:05 1034  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
15:40:05 1035  BEGIN
15:40:05 1036  	 SELECT
15:40:05 1037  	   a.group_id into out_group_id
15:40:05 1038  	 FROM
15:40:05 1039  	   account a,
15:40:05 1040  	   subscription s,
15:40:05 1041  	   group_account ga,
15:40:05 1042  	   group_account_email_domain ir
15:40:05 1043  	 WHERE
15:40:05 1044  	   a.id = s.account_id and
15:40:05 1045  	   s.id = ga.subscription_id and
15:40:05 1046  	   ga.id = ir.group_account_id and
15:40:05 1047  	   ir.id = in_group_account_email_dom_id and
15:40:05 1048  	   rownum < 2
15:40:05 1049  	 ;
15:40:05 1050  EXCEPTION
15:40:05 1051  WHEN NO_DATA_FOUND THEN
15:40:05 1052  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1053  	   SPROC_NAME, 'Bad group_account_ip_range_id');
15:40:05 1054  WHEN OTHERS THEN
15:40:05 1055  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1056  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1057  END GET_GRP_ID_BY_EMAIL_DOM_ID;
15:40:05 1058  
15:40:05 1059  PROCEDURE UPDATE_GROUP_ACCOUNT (
15:40:05 1060  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
15:40:05 1061  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
15:40:05 1062  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
15:40:05 1063  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
15:40:05 1064  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
15:40:05 1065  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
15:40:05 1066  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:40:05 1067  ) AS
15:40:05 1068  BEGIN
15:40:05 1069  	 PROCS_GROUP_ACCOUNT_CRU_V23.UPDATE_GROUP_ACCOUNT(
15:40:05 1070  	   in_group_account_id => in_group_account_id,
15:40:05 1071  	   in_group_name => in_group_name,
15:40:05 1072  	   in_first_name => in_first_name,
15:40:05 1073  	   in_last_name => in_last_name,
15:40:05 1074  	   in_email => in_email,
15:40:05 1075  	   in_phone => in_phone,
15:40:05 1076  	   in_updated_by => in_updated_by
15:40:05 1077  	 );
15:40:05 1078  END UPDATE_GROUP_ACCOUNT;
15:40:05 1079  
15:40:05 1080  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
15:40:05 1081  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
15:40:05 1082  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
15:40:05 1083  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
15:40:05 1084  ) AS
15:40:05 1085  BEGIN
15:40:05 1086  	 PROCS_GROUP_ACCOUNT_CRU_V23.UPDATE_GROUP_ACCOUNT_SEATS(
15:40:05 1087  	   in_group_account_id => in_group_account_id,
15:40:05 1088  	   in_seats => in_seats,
15:40:05 1089  	   in_updated_by => in_updated_by
15:40:05 1090  	 );
15:40:05 1091  END UPDATE_GROUP_ACCOUNT_SEATS;
15:40:05 1092  
15:40:05 1093  END PROCS_GROUP_ACCOUNT_V23;
15:40:05 1094  .
15:40:05 SQL> /

Package body created.

Elapsed: 00:00:00.14
15:40:05 SQL> 
15:40:05 SQL> prompt Compiling body for procs_test.sql
Compiling body for procs_test.sql
15:40:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V23" AS
15:40:05   2  
15:40:05   3  PROCEDURE TEST_CLEAR_ALL IS
15:40:05   4  BEGIN
15:40:05   5  	DELETE FROM TAX_ADJUSTMENT;
15:40:05   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
15:40:05   7  	DELETE FROM INVOICE_ADJUSTMENT;
15:40:05   8  	DELETE FROM LICENSE;
15:40:05   9  	DELETE FROM OFFER_OFFER_CHAIN;
15:40:05  10  	delete from offer_product_offering;
15:40:05  11  	delete from tax;
15:40:05  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
15:40:05  13  	delete from discount_line_item; -- ?
15:40:05  14  	delete from discount; -- ?
15:40:05  15  	DELETE FROM LINE_ITEM;
15:40:05  16  	DELETE FROM PRODUCT_OFFERING;
15:40:05  17  	DELETE FROM PRODUCT;
15:40:05  18  	DELETE FROM INVOICE_NOTE;
15:40:05  19  	DELETE FROM GIFT_CERTIFICATE;
15:40:05  20  	DELETE FROM OFFER;
15:40:05  21  	DELETE FROM OFFER_CHAIN_META_DATA;
15:40:05  22  	DELETE FROM SUBSCRIPTION_NOTE;
15:40:05  23  	DELETE FROM SUBSCRIPTION_META_DATA;
15:40:05  24  	DELETE FROM SUBSCRIPTION;
15:40:05  25  	DELETE FROM CREDIT_CARD;
15:40:05  26  	DELETE FROM FLAGGED_ACCOUNTS;
15:40:05  27  	DELETE FROM ACCOUNT_NOTE;
15:40:05  28  	DELETE FROM ACCOUNT_LOCK;
15:40:05  29  	DELETE FROM ACCOUNT;
15:40:05  30  	DELETE FROM CHARGE;
15:40:05  31  	DELETE FROM TRANSACTION_ATTEMPT;
15:40:05  32  	DELETE FROM CHARGEBACK;
15:40:05  33  	DELETE FROM TRANSACTION;
15:40:05  34  	DELETE FROM INVOICE_NOTE;
15:40:05  35  	DELETE FROM INVOICE;
15:40:05  36  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
15:40:05  37  	DELETE FROM OFFER_CHAIN;
15:40:05  38  END TEST_CLEAR_ALL;
15:40:05  39  
15:40:05  40  PROCEDURE TEST_CLEAR_PRODUCTS AS
15:40:05  41  BEGIN
15:40:05  42  	DELETE FROM OFFER_OFFER_CHAIN;
15:40:05  43  	DELETE FROM OFFER_PRODUCT_OFFERING;
15:40:05  44  	DELETE FROM TAX;
15:40:05  45  	DELETE FROM PRODUCT_OFFERING;
15:40:05  46  	DELETE FROM PRODUCT;
15:40:05  47  	DELETE FROM OFFER;
15:40:05  48  	DELETE FROM OFFER_CHAIN_META_DATA;
15:40:05  49  	DELETE FROM OFFER_CHAIN;
15:40:05  50  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
15:40:05  51  END;
15:40:05  52  
15:40:05  53  /******************************************/
15:40:05  54  
15:40:05  55  PROCEDURE TEST_GET_ACCOUNT (
15:40:05  56  	in_group_id	IN NUMBER,
15:40:05  57  	out_result_set	OUT SYS_REFCURSOR
15:40:05  58  ) AS
15:40:05  59  BEGIN
15:40:05  60  
15:40:05  61  	OPEN out_result_set FOR
15:40:05  62  	SELECT *
15:40:05  63  	FROM
15:40:05  64  	  ACCOUNT
15:40:05  65  	WHERE
15:40:05  66  	  ACCOUNT.GROUP_ID = in_group_id;
15:40:05  67  
15:40:05  68  END TEST_GET_ACCOUNT;
15:40:05  69  
15:40:05  70  /*******************************************/
15:40:05  71  
15:40:05  72  PROCEDURE TEST_GET_SUBSCRIPTION (
15:40:05  73  	in_subscription_id IN NUMBER,
15:40:05  74  	out_result_set	   OUT SYS_REFCURSOR
15:40:05  75  ) AS
15:40:05  76  BEGIN
15:40:05  77  	OPEN out_result_set FOR
15:40:05  78  	SELECT *
15:40:05  79  	FROM
15:40:05  80  	  SUBSCRIPTION
15:40:05  81  	WHERE
15:40:05  82  	  SUBSCRIPTION.ID = in_subscription_id;
15:40:05  83  
15:40:05  84  END TEST_GET_SUBSCRIPTION;
15:40:05  85  
15:40:05  86  /***************************************************/
15:40:05  87  
15:40:05  88  PROCEDURE TEST_DELETE_INVOICE (
15:40:05  89  	in_invoice_id IN NUMBER
15:40:05  90  ) AS
15:40:05  91  var_line_item_id_set SYS_REFCURSOR;
15:40:05  92  var_line_item_id	   NUMBER;
15:40:05  93  
15:40:05  94  var_charge_id_set  SYS_REFCURSOR;
15:40:05  95  var_charge_id	 NUMBER;
15:40:05  96  var_transaction_id NUMBER;
15:40:05  97  BEGIN
15:40:05  98  	-- GET ACCOUNT'S LINE_ITEMS
15:40:05  99  	OPEN var_line_item_id_set FOR
15:40:05 100  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
15:40:05 101  	LOOP
15:40:05 102  	  FETCH var_line_item_id_set into var_line_item_id;
15:40:05 103  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
15:40:05 104  
15:40:05 105  	  -- DELETE ADJUSTMENTS
15:40:05 106  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
15:40:05 107  	  LOOP
15:40:05 108  
15:40:05 109  	    -- DELETE DISCOUNT ADJUSTMENTS
15:40:05 110  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
15:40:05 111  
15:40:05 112  	    -- DELETE TAX ADJUSTMENTS
15:40:05 113  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
15:40:05 114  	  END LOOP;
15:40:05 115  
15:40:05 116  	  -- DELETE LINE ITEM ADJUSTMENTS
15:40:05 117  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
15:40:05 118  
15:40:05 119  	  -- DELETE DISCOUNT_LINE_ITEM
15:40:05 120  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
15:40:05 121  
15:40:05 122  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
15:40:05 123  
15:40:05 124  	  -- DELETE LINE ITEM
15:40:05 125  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
15:40:05 126  
15:40:05 127  	END LOOP;
15:40:05 128  
15:40:05 129  	-- DELETE INVOICE ADJUSTMENTS
15:40:05 130  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
15:40:05 131  
15:40:05 132  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
15:40:05 133  	OPEN var_charge_id_set FOR
15:40:05 134  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
15:40:05 135  	LOOP
15:40:05 136  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
15:40:05 137  	  EXIT WHEN var_charge_id_set%NOTFOUND;
15:40:05 138  	  -- DELETE CHARGEBACK
15:40:05 139  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
15:40:05 140  
15:40:05 141  	  -- DELETE TRANSACTION ATTEMP
15:40:05 142  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
15:40:05 143  
15:40:05 144  	  -- DELETE CHARGE
15:40:05 145  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
15:40:05 146  
15:40:05 147  	  -- DELETE TRANSACTION
15:40:05 148  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
15:40:05 149  	END LOOP;
15:40:05 150  
15:40:05 151  	-- DELETE INVOICE NOTES
15:40:05 152  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
15:40:05 153  
15:40:05 154  	-- DELETE INVOICE
15:40:05 155  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
15:40:05 156  END;
15:40:05 157  
15:40:05 158  PROCEDURE TEST_DELETE_USER_ACCOUNT (
15:40:05 159  	in_group_id IN NUMBER
15:40:05 160  ) AS
15:40:05 161  -- VARIABLES
15:40:05 162  var_account_id NUMBER;
15:40:05 163  
15:40:05 164  -- CURSORS
15:40:05 165  var_subscription_id_set SYS_REFCURSOR;
15:40:05 166  var_subscription_id     NUMBER;
15:40:05 167  
15:40:05 168  var_license_id_set SYS_REFCURSOR;
15:40:05 169  var_license_id	 NUMBER;
15:40:05 170  var_invoice_id	 NUMBER;
15:40:05 171  
15:40:05 172  var_gift_certificate_id_set SYS_REFCURSOR;
15:40:05 173  var_gift_certificate_id	  NUMBER;
15:40:05 174  var_gc_purchase_invoice_id  NUMBER;
15:40:05 175  BEGIN
15:40:05 176  
15:40:05 177   /*FOR f_account in (
15:40:05 178  	  select id from account where group_id = in_group_id
15:40:05 179  	)
15:40:05 180  	loop
15:40:05 181  
15:40:05 182  	  -- delete account
15:40:05 183  	  delete from account where id = f_account.id;
15:40:05 184  
15:40:05 185  	end loop;*/
15:40:05 186  
15:40:05 187  	BEGIN
15:40:05 188  	  SELECT
15:40:05 189  	    ACCOUNT.ID into var_account_id
15:40:05 190  	  FROM
15:40:05 191  	    ACCOUNT
15:40:05 192  	  WHERE
15:40:05 193  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 194  	  EXCEPTION
15:40:05 195  	    WHEN NO_DATA_FOUND THEN
15:40:05 196  	      -- Nothing to do
15:40:05 197  	      RETURN;
15:40:05 198  	END;
15:40:05 199  
15:40:05 200  	-- GET ACCOUNT'S SUBSCRIPTIONS
15:40:05 201  	OPEN var_subscription_id_set FOR
15:40:05 202  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
15:40:05 203  	LOOP
15:40:05 204  	  FETCH var_subscription_id_set into var_subscription_id;
15:40:05 205  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
15:40:05 206  
15:40:05 207  	  -- GET ACCOUNT'S LICENSES AND INVOICES
15:40:05 208  	  OPEN var_license_id_set FOR
15:40:05 209  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
15:40:05 210  	  LOOP
15:40:05 211  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
15:40:05 212  	    EXIT WHEN var_license_id_set%NOTFOUND;
15:40:05 213  
15:40:05 214  
15:40:05 215  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
15:40:05 216  	    OPEN var_gift_certificate_id_set FOR
15:40:05 217  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
15:40:05 218  	    LOOP
15:40:05 219  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
15:40:05 220  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
15:40:05 221  
15:40:05 222  	      -- DELETE GIFT_CERTIFICATE
15:40:05 223  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
15:40:05 224  
15:40:05 225  	      -- DELETE LICENSE
15:40:05 226  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
15:40:05 227  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
15:40:05 228  	      END IF;
15:40:05 229  
15:40:05 230  	    END LOOP;
15:40:05 231  
15:40:05 232  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
15:40:05 233  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
15:40:05 234  
15:40:05 235  	    -- DELETE LICENSE
15:40:05 236  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
15:40:05 237  
15:40:05 238  	    -- DELETE INVOICE
15:40:05 239  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
15:40:05 240  	      TEST_DELETE_INVOICE(var_invoice_id);
15:40:05 241  	    END IF;
15:40:05 242  	  END LOOP;
15:40:05 243  
15:40:05 244  	  -- DELETE SUBSCRIPTION_NOTE
15:40:05 245  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
15:40:05 246  
15:40:05 247  	  -- DELETE SUBSCRIPTION META_DATA
15:40:05 248  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
15:40:05 249  
15:40:05 250  	  -- DELETE SUBSCRIPTION
15:40:05 251  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
15:40:05 252  	END LOOP;
15:40:05 253  
15:40:05 254  	-- DELETE CREDIT_CARDS
15:40:05 255  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
15:40:05 256  
15:40:05 257  	-- DELETE PAYPAL
15:40:05 258  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
15:40:05 259  
15:40:05 260  	-- DELETE FLAGS
15:40:05 261  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
15:40:05 262  
15:40:05 263  	-- DELETE ACCOUNT NOTES
15:40:05 264  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
15:40:05 265  
15:40:05 266  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
15:40:05 267  	OPEN var_gift_certificate_id_set FOR
15:40:05 268  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
15:40:05 269  	LOOP
15:40:05 270  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
15:40:05 271  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
15:40:05 272  
15:40:05 273  	  -- DELETE GIFT CERTIFICATE
15:40:05 274  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
15:40:05 275  
15:40:05 276  	  -- DELETE INVOICE
15:40:05 277  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
15:40:05 278  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
15:40:05 279  	  END IF;
15:40:05 280  	END LOOP;
15:40:05 281  
15:40:05 282  	-- DELETE LOCKS
15:40:05 283  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
15:40:05 284  
15:40:05 285  	-- DELETE ACCOUNT
15:40:05 286  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
15:40:05 287  
15:40:05 288  END TEST_DELETE_USER_ACCOUNT;
15:40:05 289  
15:40:05 290  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
15:40:05 291  	in_start_group_id IN NUMBER,
15:40:05 292  	in_end_group_id   IN NUMBER
15:40:05 293  ) IS
15:40:05 294   gid ACCOUNT.GROUP_ID%TYPE;
15:40:05 295   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
15:40:05 296  BEGIN
15:40:05 297  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
15:40:05 298  	/*
15:40:05 299  	FOR var_group_id IN in_start_group_id..in_end_group_id
15:40:05 300  	LOOP
15:40:05 301  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
15:40:05 302  	END LOOP;*/
15:40:05 303  	OPEN c(in_start_group_id, in_end_group_id);
15:40:05 304  	WHILE c%ISOPEN LOOP
15:40:05 305  	  FETCH c INTO gid;
15:40:05 306  	  IF c%NOTFOUND THEN
15:40:05 307  	   CLOSE c;
15:40:05 308  	  END IF;
15:40:05 309  	  TEST_DELETE_USER_ACCOUNT(gid);
15:40:05 310  	END LOOP;
15:40:05 311  END;
15:40:05 312  
15:40:05 313  /**********************************************************/
15:40:05 314  
15:40:05 315  FUNCTION TEST_IS_INVOICE_EXISTS(
15:40:05 316  /*
15:40:05 317  1 - exists
15:40:05 318  0 - not exists
15:40:05 319  */
15:40:05 320  	in_invoice_id IN NUMBER
15:40:05 321  ) RETURN NUMBER AS
15:40:05 322  var_invoice_count NUMBER;
15:40:05 323  BEGIN
15:40:05 324  	SELECT
15:40:05 325  	  COUNT(*) into var_invoice_count
15:40:05 326  	FROM
15:40:05 327  	  INVOICE
15:40:05 328  	WHERE
15:40:05 329  	  INVOICE.ID = in_invoice_id;
15:40:05 330  	IF var_invoice_count = 0 THEN
15:40:05 331  	  RETURN 0;
15:40:05 332  	ELSE
15:40:05 333  	  RETURN 1;
15:40:05 334  	END IF;
15:40:05 335  END;
15:40:05 336  
15:40:05 337  PROCEDURE TEST_GET_INVOICE_INFO (
15:40:05 338  	in_invoice_id  IN NUMBER,
15:40:05 339  	out_result_set OUT SYS_REFCURSOR
15:40:05 340  ) AS
15:40:05 341  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
15:40:05 342  BEGIN
15:40:05 343  
15:40:05 344  	 OPEN out_result_set FOR SELECT
15:40:05 345  	    in_invoice_id AS "INVOICE_ID",
15:40:05 346  	    INVOICE.INVOICE_STATUS_ID,
15:40:05 347  	    PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
15:40:05 348  	    CHARGE.ID AS "CHARGE_ID",
15:40:05 349  	    CHARGE.CHARGE_AMOUNT,
15:40:05 350  	    CHARGE.TRANSACTION_ID,
15:40:05 351  	    TRANSACTION.TRANSACTION_STATUS_ID
15:40:05 352  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
15:40:05 353  
15:40:05 354  END TEST_GET_INVOICE_INFO;
15:40:05 355  
15:40:05 356  /******************************************************************************/
15:40:05 357  
15:40:05 358  PROCEDURE TEST_DELETE_OFFER_CHAIN(
15:40:05 359  	in_offer_chain_id in number
15:40:05 360  ) as
15:40:05 361  begin
15:40:05 362  
15:40:05 363  	for v_offer_chain in (
15:40:05 364  	  select och.id from offer_chain och where och.id = in_offer_chain_id
15:40:05 365  	)
15:40:05 366  	loop
15:40:05 367  
15:40:05 368  	  for v_offer in (
15:40:05 369  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
15:40:05 370  	  )
15:40:05 371  	  loop
15:40:05 372  
15:40:05 373  	    for v_product_offering in (
15:40:05 374  	      select
15:40:05 375  		product_offering.id,
15:40:05 376  		product_offering.product_id
15:40:05 377  	      from
15:40:05 378  		offer_product_offering
15:40:05 379  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
15:40:05 380  	      where offer_product_offering.offer_id = v_offer.id
15:40:05 381  	    )
15:40:05 382  	    loop
15:40:05 383  
15:40:05 384  	      -- delete product
15:40:05 385  	      delete from product where id = v_product_offering.product_id;
15:40:05 386  
15:40:05 387  	      -- delete product_offering
15:40:05 388  	      delete from product_offering where id = v_product_offering.id;
15:40:05 389  
15:40:05 390  	    end loop;
15:40:05 391  
15:40:05 392  	    -- delete data from offer_product_offering table
15:40:05 393  	    delete from offer_product_offering where offer_id = v_offer.id;
15:40:05 394  
15:40:05 395  	    -- delete data from offer_offer_chain table
15:40:05 396  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
15:40:05 397  
15:40:05 398  	    -- delete offer
15:40:05 399  	    delete from offer where id = v_offer.id;
15:40:05 400  
15:40:05 401  	  end loop;
15:40:05 402  
15:40:05 403  	  -- delete offer_chain_eligibility
15:40:05 404  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
15:40:05 405  
15:40:05 406  	  -- delete metadata
15:40:05 407  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
15:40:05 408  
15:40:05 409  	  -- delete offer chain
15:40:05 410  	  delete from offer_chain where id = v_offer_chain.id;
15:40:05 411  
15:40:05 412  	end loop;
15:40:05 413  
15:40:05 414  end;
15:40:05 415  
15:40:05 416  END PROCS_TEST_V23;
15:40:05 417  .
15:40:05 SQL> /

Package body created.

Elapsed: 00:00:00.15
15:40:05 SQL> 
15:40:05 SQL> prompt Compiling body for procs_account.sql
Compiling body for procs_account.sql
15:40:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V23" AS
15:40:05   2  
15:40:05   3  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
15:40:05   4  	in_group_id    IN  NUMBER,
15:40:05   5  	out_result_set OUT SYS_REFCURSOR
15:40:05   6  ) AS
15:40:05   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'INVOICE_IDS_BY_GROUP_ID';
15:40:05   8  BEGIN
15:40:05   9  	OPEN out_result_set FOR
15:40:05  10  	SELECT
15:40:05  11  	  Invoice.Id
15:40:05  12  	FROM
15:40:05  13  	  LICENSE
15:40:05  14  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:05  15  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:40:05  16  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05  17  	  INNER JOIN INVOICE_STATUS ON INVOICE.INVOICE_STATUS_ID = INVOICE_STATUS.ID
15:40:05  18  	Where
15:40:05  19  	  SUBSCRIPTION.ACCOUNT_ID IN (SELECT ID FROM ACCOUNT WHERE GROUP_ID = in_group_id) AND
15:40:05  20  	  INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V23.INVOICE_OPEN;
15:40:05  21  END INVOICE_IDS_BY_GROUP_ID;
15:40:05  22  
15:40:05  23  FUNCTION GET_GRACE_START_DATE(
15:40:05  24  	in_subscription_id IN NUMBER
15:40:05  25  ) RETURN DATE AS
15:40:05  26  SPROC_NAME	   CONSTANT VARCHAR2(32) := 'GET_GRACE_START_DATE';
15:40:05  27  grace_start_date_var DATE;
15:40:05  28  BEGIN
15:40:05  29  	SELECT GRACE_START_DATE into grace_start_date_var
15:40:05  30  	FROM
15:40:05  31  	  (
15:40:05  32  	    SELECT
15:40:05  33  	      GRACE_START_DATE
15:40:05  34  	    FROM
15:40:05  35  	      LICENSE
15:40:05  36  	    WHERE
15:40:05  37  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:40:05  38  	    ORDER BY
15:40:05  39  	      LICENSE.END_DATE DESC
15:40:05  40  	  )
15:40:05  41  	WHERE
15:40:05  42  	  ROWNUM <= 1;
15:40:05  43  
15:40:05  44  	RETURN grace_start_date_var;
15:40:05  45  END GET_GRACE_START_DATE;
15:40:05  46  
15:40:05  47  FUNCTION GET_GRACE_END_DATE(
15:40:05  48  	in_subscription_id IN NUMBER
15:40:05  49  ) RETURN DATE AS
15:40:05  50  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'GET_GRACE_END_DATE';
15:40:05  51  grace_end_date_var DATE;
15:40:05  52  BEGIN
15:40:05  53  	SELECT GRACE_END_DATE into grace_end_date_var
15:40:05  54  	FROM
15:40:05  55  	  (
15:40:05  56  	    SELECT
15:40:05  57  	      GRACE_END_DATE
15:40:05  58  	    FROM
15:40:05  59  	      LICENSE
15:40:05  60  	    WHERE
15:40:05  61  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
15:40:05  62  	    ORDER BY
15:40:05  63  	      LICENSE.END_DATE DESC
15:40:05  64  	  )
15:40:05  65  	WHERE ROWNUM <= 1;
15:40:05  66  
15:40:05  67  	RETURN grace_end_date_var;
15:40:05  68  END GET_GRACE_END_DATE;
15:40:05  69  
15:40:05  70  
15:40:05  71  
15:40:05  72  PROCEDURE ANNOTATE_ACCOUNT (
15:40:05  73  	in_group_id   IN  NUMBER,
15:40:05  74  	in_agent_id   IN  NUMBER,
15:40:05  75  	in_note       IN  VARCHAR2,
15:40:05  76  	in_created_by IN  VARCHAR2
15:40:05  77  ) AS
15:40:05  78  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
15:40:05  79  -- VARIABLES
15:40:05  80  var_account_id	  NUMBER;
15:40:05  81  var_account_note_id NUMBER;
15:40:05  82  -- EXCEPTIONS
15:40:05  83  BAD_ACCOUNT_ID EXCEPTION;
15:40:05  84  BEGIN
15:40:05  85  
15:40:05  86  	-- Get account id
15:40:05  87  	BEGIN
15:40:05  88  	  SELECT
15:40:05  89  	    ACCOUNT.ID into var_account_id
15:40:05  90  	  FROM
15:40:05  91  	    ACCOUNT
15:40:05  92  	  WHERE
15:40:05  93  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05  94  	  EXCEPTION
15:40:05  95  	    WHEN NO_DATA_FOUND THEN
15:40:05  96  	      RAISE BAD_ACCOUNT_ID;
15:40:05  97  	END;
15:40:05  98  
15:40:05  99  	-- Insert new row into ACCOUNT_NOTE table
15:40:05 100  	PROCS_ACCOUNT_CRU_V23.CREATE_ACCOUNT_NOTE(
15:40:05 101  	  inout_account_note_id => var_account_note_id,
15:40:05 102  	  in_agent_id		=> in_agent_id,
15:40:05 103  	  in_account_id 	=> var_account_id,
15:40:05 104  	  in_note		=> in_note,
15:40:05 105  	  in_created_by 	=> in_created_by
15:40:05 106  	);
15:40:05 107  
15:40:05 108  EXCEPTION
15:40:05 109  WHEN BAD_ACCOUNT_ID THEN
15:40:05 110  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 111  	  SPROC_NAME, 'No such group id');
15:40:05 112  WHEN OTHERS THEN
15:40:05 113  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 114  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 115  END ANNOTATE_ACCOUNT;
15:40:05 116  
15:40:05 117  PROCEDURE ASSERT_ACCOUNT_EXISTS (
15:40:05 118  	in_group_id IN	NUMBER,
15:40:05 119  	out_exists  OUT NUMBER
15:40:05 120  ) AS
15:40:05 121  -- VARIABLES
15:40:05 122  var_found_id  NUMBER;
15:40:05 123  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
15:40:05 124  BEGIN
15:40:05 125  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
15:40:05 126  	out_exists := GLOBAL_CONSTANTS_V23.TRUE;
15:40:05 127  EXCEPTION
15:40:05 128  WHEN NO_DATA_FOUND THEN
15:40:05 129  	out_exists := GLOBAL_CONSTANTS_V23.FALSE;
15:40:05 130  WHEN OTHERS THEN
15:40:05 131  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 133  END ASSERT_ACCOUNT_EXISTS;
15:40:05 134  
15:40:05 135  PROCEDURE DISABLE_ACCOUNT (
15:40:05 136  	in_group_id   IN NUMBER,
15:40:05 137  	in_updated_by IN VARCHAR2,
15:40:05 138  	in_note       IN VARCHAR2,
15:40:05 139  	in_agent_id   IN NUMBER
15:40:05 140  ) AS
15:40:05 141  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
15:40:05 142  var_account_id	      NUMBER;
15:40:05 143  current_account_status  NUMBER;
15:40:05 144  
15:40:05 145  var_active_subscriptions_num NUMBER;
15:40:05 146  var_pending_invoices_num	   NUMBER;
15:40:05 147  
15:40:05 148  -- EXCEPTIONS
15:40:05 149  BAD_ACOUNT_ID		EXCEPTION;
15:40:05 150  BAD_CURRENT_ACC_STATUS	EXCEPTION;
15:40:05 151  PENDING_INVOICES_FOUND	EXCEPTION;
15:40:05 152  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
15:40:05 153  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
15:40:05 154  EXCEPTION_MESSAGE 	VARCHAR2(1024);
15:40:05 155  BEGIN
15:40:05 156  
15:40:05 157  	-- Get account's status and id
15:40:05 158  	BEGIN
15:40:05 159  	  SELECT
15:40:05 160  	    ACCOUNT.ACCOUNT_STATUS_ID,
15:40:05 161  	    ACCOUNT.ID
15:40:05 162  	  INTO
15:40:05 163  	    current_account_status,
15:40:05 164  	    var_account_id
15:40:05 165  	  FROM ACCOUNT
15:40:05 166  	  WHERE
15:40:05 167  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 168  	  EXCEPTION
15:40:05 169  	    WHEN NO_DATA_FOUND THEN
15:40:05 170  	      RAISE BAD_ACOUNT_ID;
15:40:05 171  	END;
15:40:05 172  
15:40:05 173  	-- For now, we can disable account whenever
15:40:05 174  	IF current_account_status = GLOBAL_STATUSES_V23.ACCOUNT_DISABLED THEN
15:40:05 175  	  RAISE BAD_CURRENT_ACC_STATUS;
15:40:05 176  	END IF;
15:40:05 177  
15:40:05 178  	-- Checks for out outstanding balances
15:40:05 179  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
15:40:05 180  	SELECT
15:40:05 181  	  COUNT(*) into var_pending_invoices_num
15:40:05 182  	FROM
15:40:05 183  	  LICENSE
15:40:05 184  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:05 185  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:40:05 186  	WHERE
15:40:05 187  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:05 188  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V23.INVOICE_OPEN FROM DUAL );
15:40:05 189  
15:40:05 190  	IF var_pending_invoices_num > 0 THEN
15:40:05 191  	  RAISE PENDING_INVOICES_FOUND;
15:40:05 192  	END IF;
15:40:05 193  
15:40:05 194  	SELECT
15:40:05 195  	  COUNT(*) into var_active_subscriptions_num
15:40:05 196  	FROM
15:40:05 197  	  SUBSCRIPTION
15:40:05 198  	WHERE
15:40:05 199  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:05 200  	  AND (
15:40:05 201  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
15:40:05 202  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
15:40:05 203  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
15:40:05 204  
15:40:05 205  	IF var_active_subscriptions_num > 0 THEN
15:40:05 206  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
15:40:05 207  	END IF;
15:40:05 208  
15:40:05 209  	PROCS_ACCOUNT_V23.UPDATE_ACCOUNT_STATUS(
15:40:05 210  	  in_account_id        => var_account_id,
15:40:05 211  	  in_account_status_id => GLOBAL_STATUSES_V23.ACCOUNT_DISABLED,
15:40:05 212  	  in_updated_by        => in_updated_by
15:40:05 213  	);
15:40:05 214  
15:40:05 215  	-- Annotate account
15:40:05 216  	IF in_note IS NOT NULL THEN
15:40:05 217  	  BEGIN
15:40:05 218  	    PROCS_ACCOUNT_V23.ANNOTATE_ACCOUNT(
15:40:05 219  	      in_group_id   => in_group_id,
15:40:05 220  	      in_agent_id   => in_agent_id,
15:40:05 221  	      in_note	    => in_note,
15:40:05 222  	      in_created_by => in_updated_by
15:40:05 223  	    );
15:40:05 224  	    EXCEPTION
15:40:05 225  	      WHEN OTHERS THEN
15:40:05 226  		EXCEPTION_MESSAGE := SQLERRM;
15:40:05 227  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
15:40:05 228  	  END;
15:40:05 229  	END IF;
15:40:05 230  
15:40:05 231  EXCEPTION
15:40:05 232  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
15:40:05 233  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 234  	  SPROC_NAME, 'Account has active or suspended subsciptions');
15:40:05 235  WHEN BAD_CURRENT_ACC_STATUS THEN
15:40:05 236  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 237  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
15:40:05 238  WHEN PENDING_INVOICES_FOUND THEN
15:40:05 239  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 240  	  SPROC_NAME, 'Opened/Pending invoices founded');
15:40:05 241  WHEN BAD_ACOUNT_ID THEN
15:40:05 242  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 243  	  SPROC_NAME, 'No such account');
15:40:05 244  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
15:40:05 245  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 246  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
15:40:05 247  WHEN OTHERS THEN
15:40:05 248  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 249  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 250  END DISABLE_ACCOUNT;
15:40:05 251  
15:40:05 252  PROCEDURE CREATE_ACTIVE_ACCOUNT(
15:40:05 253  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
15:40:05 254  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
15:40:05 255  	out_new_account_id OUT ACCOUNT.ID%TYPE
15:40:05 256  ) AS
15:40:05 257  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_ACTIVE_ACCOUNT';
15:40:05 258  var_count  NUMBER  := 0;
15:40:05 259  BEGIN
15:40:05 260  	SELECT COUNT(1) INTO var_count FROM ACCOUNT WHERE GROUP_ID = in_group_id;
15:40:05 261  
15:40:05 262  	IF (var_count = 0) THEN
15:40:05 263  	  PROCS_ACCOUNT_CRU_V23.CREATE_ACCOUNT(
15:40:05 264  	      out_account_id	    => out_new_account_id,
15:40:05 265  	      in_account_status_id  => GLOBAL_STATUSES_V23.ACCOUNT_ACTIVE,
15:40:05 266  	      in_group_id	    => in_group_id,
15:40:05 267  	      in_created_by	    => in_created_by,
15:40:05 268  	      in_system_category_id => GLOBAL_ENUMS_V23.SYSTEM_CATEGORY_LIVE
15:40:05 269  	  );
15:40:05 270  	ELSE
15:40:05 271  	  out_new_account_id := NULL;
15:40:05 272  	END IF;
15:40:05 273  END CREATE_ACTIVE_ACCOUNT;
15:40:05 274  
15:40:05 275  PROCEDURE REACTIVATE_ACCOUNT (
15:40:05 276  	in_group_id   IN NUMBER,
15:40:05 277  	in_updated_by IN VARCHAR2,
15:40:05 278  	in_note       IN VARCHAR2,
15:40:05 279  	in_agent_id   IN NUMBER
15:40:05 280  ) AS
15:40:05 281  -- VARIABLES
15:40:05 282  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
15:40:05 283  var_account_id	      NUMBER;
15:40:05 284  current_account_status  NUMBER;
15:40:05 285  
15:40:05 286  -- EXCEPTIONS
15:40:05 287  BAD_CURRENT_ACC_STATUS EXCEPTION;
15:40:05 288  CAN_NOT_CREATE_NOTE    EXCEPTION;
15:40:05 289  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:05 290  BEGIN
15:40:05 291  	-- Get account id, status
15:40:05 292  	SELECT
15:40:05 293  	  ACCOUNT.ACCOUNT_STATUS_ID,
15:40:05 294  	  ACCOUNT.ID
15:40:05 295  	INTO
15:40:05 296  	  current_account_status,
15:40:05 297  	  var_account_id
15:40:05 298  	FROM ACCOUNT
15:40:05 299  	WHERE
15:40:05 300  	  ACCOUNT.GROUP_ID = in_group_id;
15:40:05 301  
15:40:05 302  	IF current_account_status != GLOBAL_STATUSES_V23.ACCOUNT_FROZEN THEN
15:40:05 303  	  RAISE BAD_CURRENT_ACC_STATUS;
15:40:05 304  	END IF;
15:40:05 305  
15:40:05 306  	-- Change account status
15:40:05 307  	PROCS_ACCOUNT_V23.UPDATE_ACCOUNT_STATUS(
15:40:05 308  	  in_account_id        => var_account_id,
15:40:05 309  	  in_updated_by        => in_updated_by,
15:40:05 310  	  in_account_status_id => GLOBAL_STATUSES_V23.ACCOUNT_ACTIVE
15:40:05 311  	);
15:40:05 312  
15:40:05 313  	-- Add note
15:40:05 314  	BEGIN
15:40:05 315  	  PROCS_ACCOUNT_V23.ANNOTATE_ACCOUNT(
15:40:05 316  	    in_group_id   => in_group_id,
15:40:05 317  	    in_agent_id   => in_agent_id,
15:40:05 318  	    in_note	  => in_note,
15:40:05 319  	    in_created_by => in_updated_by
15:40:05 320  	  );
15:40:05 321  	  EXCEPTION
15:40:05 322  	    WHEN OTHERS THEN
15:40:05 323  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 324  	      RAISE CAN_NOT_CREATE_NOTE;
15:40:05 325  	END;
15:40:05 326  
15:40:05 327  EXCEPTION
15:40:05 328  WHEN BAD_CURRENT_ACC_STATUS THEN
15:40:05 329  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 330  	  SPROC_NAME, 'Current account status is not "frozen"');
15:40:05 331  WHEN NO_DATA_FOUND THEN
15:40:05 332  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 333  	  SPROC_NAME, 'Could not find account with given group ID');
15:40:05 334  WHEN CAN_NOT_CREATE_NOTE THEN
15:40:05 335  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 336  	  SPROC_NAME, 'Could not annotate account');
15:40:05 337  WHEN OTHERS THEN
15:40:05 338  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 339  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 340  END REACTIVATE_ACCOUNT;
15:40:05 341  
15:40:05 342  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
15:40:05 343  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
15:40:05 344  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V23.CREDIT_CARD_ACTIVE,
15:40:05 345  	out_result_set OUT SYS_REFCURSOR
15:40:05 346  ) AS
15:40:05 347  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_CREDIT_CARDS';
15:40:05 348  BEGIN
15:40:05 349  	OPEN out_result_set FOR
15:40:05 350  	  SELECT
15:40:05 351  	    CREDIT_CARD.ID,
15:40:05 352  	    CREDIT_CARD.ACCOUNT_ID,
15:40:05 353  	    CREDIT_CARD.INSTRUMENT_NAME,
15:40:05 354  	    CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
15:40:05 355  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS,
15:40:05 356  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
15:40:05 357  	    CREDIT_CARD.STATE,
15:40:05 358  	    CREDIT_CARD.CITY,
15:40:05 359  	    CREDIT_CARD.POSTAL_CODE,
15:40:05 360  	    CREDIT_CARD.COUNTRY,
15:40:05 361  	    CREDIT_CARD.LAST_FOUR_CC,
15:40:05 362  	    CREDIT_CARD.EXPIRATION_DATE,
15:40:05 363  	    CREDIT_CARD.CREDIT_CARD_TYPE_ID,
15:40:05 364  	    CREDIT_CARD.SECRET_TOKEN,
15:40:05 365  	    CREDIT_CARD.CREATE_DATE,
15:40:05 366  	    CREDIT_CARD.CREATED_BY,
15:40:05 367  	    CREDIT_CARD.UPDATE_DATE,
15:40:05 368  	    CREDIT_CARD.UPDATED_BY,
15:40:05 369  	    CREDIT_CARD.CREDIT_CARD_STATUS_ID,
15:40:05 370  	    CREDIT_CARD.PRIVATE_FIRST_NAME,
15:40:05 371  	    Credit_Card.Private_Last_Name,
15:40:05 372  	    decode((SELECT Instrument_Id FROM ACCOUNT WHERE group_id = in_group_id and Instrument_Id = CREDIT_CARD.ID),null,'false', 'true') is_default
15:40:05 373  	  From
15:40:05 374  	      CREDIT_CARD left join account on account.id = CREDIT_CARD.Account_Id
15:40:05 375  	  Where
15:40:05 376  	    Account.Group_Id = in_group_id
15:40:05 377  	    AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_status_id;
15:40:05 378  END GET_ACCOUNT_CREDIT_CARDS;
15:40:05 379  
15:40:05 380  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
15:40:05 381  	in_group_id	  IN NUMBER,
15:40:05 382  	out_result_gc_set OUT SYS_REFCURSOR,
15:40:05 383  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.TRUE
15:40:05 384  ) AS
15:40:05 385  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
15:40:05 386  var_account_id NUMBER;
15:40:05 387  
15:40:05 388  -- Exceptions
15:40:05 389  WRONG_INSTR_EXCEPTION	 EXCEPTION;
15:40:05 390  BEGIN
15:40:05 391  
15:40:05 392  	-- Get account id
15:40:05 393  	SELECT
15:40:05 394  	  ACCOUNT.ID INTO var_account_id
15:40:05 395  	FROM
15:40:05 396  	  ACCOUNT
15:40:05 397  	WHERE
15:40:05 398  	  ACCOUNT.GROUP_ID = in_group_id;
15:40:05 399  
15:40:05 400  	-- Check that incoming data is correct
15:40:05 401  	IF in_instr_status != GLOBAL_CONSTANTS_V23.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V23.FALSE THEN
15:40:05 402  	  RAISE WRONG_INSTR_EXCEPTION;
15:40:05 403  	END IF;
15:40:05 404  
15:40:05 405  	OPEN out_result_gc_set FOR
15:40:05 406  	SELECT
15:40:05 407  	  GIFT_CERTIFICATE.ID,
15:40:05 408  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
15:40:05 409  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
15:40:05 410  	  GIFT_CERTIFICATE.PURCHASE_DATE,
15:40:05 411  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
15:40:05 412  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
15:40:05 413  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
15:40:05 414  	  GIFT_CERTIFICATE.CODE,
15:40:05 415  	  GIFT_CERTIFICATE.CREATE_DATE,
15:40:05 416  	  GIFT_CERTIFICATE.CREATED_BY,
15:40:05 417  	  GIFT_CERTIFICATE.UPDATE_DATE,
15:40:05 418  	  GIFT_CERTIFICATE.UPDATED_BY,
15:40:05 419  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
15:40:05 420  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
15:40:05 421  	  GIFT_CERTIFICATE.SENDER_NAME,
15:40:05 422  	  GIFT_CERTIFICATE.SENDER_EMAIL,
15:40:05 423  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
15:40:05 424  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
15:40:05 425  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
15:40:05 426  	  GIFT_CERTIFICATE.GIFT_MESSAGE
15:40:05 427  	FROM
15:40:05 428  	  GIFT_CERTIFICATE
15:40:05 429  	WHERE
15:40:05 430  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
15:40:05 431  	  AND (
15:40:05 432  		( in_instr_status = GLOBAL_CONSTANTS_V23.TRUE AND
15:40:05 433  		  (
15:40:05 434  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
15:40:05 435  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE
15:40:05 436  		  )
15:40:05 437  		)
15:40:05 438  		OR
15:40:05 439  		(
15:40:05 440  		  in_instr_status = GLOBAL_CONSTANTS_V23.FALSE AND
15:40:05 441  		  (
15:40:05 442  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
15:40:05 443  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE
15:40:05 444  		  )
15:40:05 445  		)
15:40:05 446  	      );
15:40:05 447  
15:40:05 448  EXCEPTION
15:40:05 449  WHEN NO_DATA_FOUND THEN
15:40:05 450  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 451  	  SPROC_NAME, 'Can not find account with given group id');
15:40:05 452  WHEN WRONG_INSTR_EXCEPTION THEN
15:40:05 453  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 454  	  SPROC_NAME, 'Wrong gift certificate type');
15:40:05 455  WHEN OTHERS THEN
15:40:05 456  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 457  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 458  END GET_ACCOUNT_GIFT_CERTIFICATES;
15:40:05 459  
15:40:05 460  PROCEDURE GET_ACCOUNT_INFO  (
15:40:05 461  	  in_group_id	    IN	NUMBER,
15:40:05 462  	  out_account_info  OUT SYS_REFCURSOR
15:40:05 463  ) AS
15:40:05 464  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
15:40:05 465  var_account_id  NUMBER;
15:40:05 466  BEGIN
15:40:05 467  
15:40:05 468  	-- Get account id
15:40:05 469  	SELECT
15:40:05 470  	  ACCOUNT.ID INTO var_account_id
15:40:05 471  	FROM
15:40:05 472  	  ACCOUNT
15:40:05 473  	WHERE
15:40:05 474  	  ACCOUNT.GROUP_ID = in_group_id;
15:40:05 475  
15:40:05 476  	-- Get account info
15:40:05 477  	OPEN out_account_info FOR
15:40:05 478  	  SELECT
15:40:05 479  	    ACCOUNT.ACCOUNT_STATUS_ID
15:40:05 480  	  FROM ACCOUNT
15:40:05 481  	  WHERE
15:40:05 482  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 483  
15:40:05 484  EXCEPTION
15:40:05 485  WHEN NO_DATA_FOUND THEN
15:40:05 486  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 487  	  SPROC_NAME, 'No such account');
15:40:05 488  WHEN OTHERS THEN
15:40:05 489  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 490  	  SPROC_NAME, 'Unknown Error', SQLERRM);
15:40:05 491  END GET_ACCOUNT_INFO;
15:40:05 492  
15:40:05 493  PROCEDURE GET_ACCOUNT_NOTES (
15:40:05 494  	  in_group_id	 IN  NUMBER,
15:40:05 495  	  out_result_set OUT SYS_REFCURSOR
15:40:05 496  ) AS
15:40:05 497  -- VARIABLES
15:40:05 498  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
15:40:05 499  var_account_id NUMBER;
15:40:05 500  -- EXCEPTIONS
15:40:05 501  BAD_ACCOUNT_ID EXCEPTION;
15:40:05 502  BEGIN
15:40:05 503  
15:40:05 504  	-- Check that account is exists
15:40:05 505  	BEGIN
15:40:05 506  	  SELECT
15:40:05 507  	    ACCOUNT.ID into var_account_id
15:40:05 508  	  FROM
15:40:05 509  	    ACCOUNT
15:40:05 510  	  WHERE
15:40:05 511  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 512  	  EXCEPTION
15:40:05 513  	    WHEN NO_DATA_FOUND THEN
15:40:05 514  	      RAISE BAD_ACCOUNT_ID;
15:40:05 515  	END;
15:40:05 516  
15:40:05 517  	-- Get account notes
15:40:05 518  	OPEN out_result_set FOR
15:40:05 519  	SELECT
15:40:05 520  	  ACCOUNT_NOTE.ACCOUNT_ID,
15:40:05 521  	  ACCOUNT_NOTE.AGENT_ID,
15:40:05 522  	  ACCOUNT_NOTE.CREATE_DATE,
15:40:05 523  	  ACCOUNT_NOTE.CREATED_BY,
15:40:05 524  	  ACCOUNT_NOTE.ID,
15:40:05 525  	  ACCOUNT_NOTE.NOTE
15:40:05 526  	FROM
15:40:05 527  	  ACCOUNT_NOTE
15:40:05 528  	WHERE
15:40:05 529  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
15:40:05 530  	ORDER BY
15:40:05 531  	  ACCOUNT_NOTE.CREATE_DATE ASC;
15:40:05 532  
15:40:05 533  EXCEPTION
15:40:05 534  WHEN BAD_ACCOUNT_ID THEN
15:40:05 535  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 536  	  SPROC_NAME, 'No such account');
15:40:05 537  WHEN OTHERS THEN
15:40:05 538  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 539  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 540  END GET_ACCOUNT_NOTES;
15:40:05 541  
15:40:05 542  PROCEDURE GET_ACCOUNT_PAYPALS(
15:40:05 543  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
15:40:05 544  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V23.PAYPAL_ACTIVE,
15:40:05 545  	out_result_set OUT SYS_REFCURSOR
15:40:05 546  ) AS
15:40:05 547  SPROC_NAME     CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_PAYPALS';
15:40:05 548  BEGIN
15:40:05 549  	OPEN out_result_set FOR
15:40:05 550  	  SELECT
15:40:05 551  	    DISTINCT
15:40:05 552  	    PAYPAL.ID,
15:40:05 553  	    PAYPAL.ACCOUNT_ID,
15:40:05 554  	    PAYPAL.INSTRUMENT_NAME,
15:40:05 555  	    PAYPAL.PRIVATE_EMAIL_ADDRESS,
15:40:05 556  	    PAYPAL.CREATE_DATE,
15:40:05 557  	    PAYPAL.CREATED_BY,
15:40:05 558  	    PAYPAL.UPDATE_DATE,
15:40:05 559  	    PAYPAL.UPDATED_BY,
15:40:05 560  	    PAYPAL.PAYPAL_STATUS_ID,
15:40:05 561  	    PAYPAL.PRIVATE_STREET_ADDRESS,
15:40:05 562  	    PAYPAL.PRIVATE_STREET_ADDRESS2,
15:40:05 563  	    PAYPAL.STATE,
15:40:05 564  	    PAYPAL.CITY,
15:40:05 565  	    PAYPAL.POSTAL_CODE,
15:40:05 566  	    PAYPAL.COUNTRY,
15:40:05 567  	    Paypal.Expiration_Date,
15:40:05 568  	    Paypal.Secret_Token,
15:40:05 569  	    decode((SELECT
15:40:05 570  	    Instrument_Id
15:40:05 571  		    FROM ACCOUNT
15:40:05 572  		    WHERE group_id = in_group_id AND Instrument_Id = PAYPAL.ID), null, 'false', 'true') is_default
15:40:05 573  	  FROM
15:40:05 574  	      PAYPAL
15:40:05 575  	      LEFT JOIN ACCOUNT ON ACCOUNT.id = PAYPAL.ACCOUNT_ID
15:40:05 576  	  WHERE
15:40:05 577  	    ACCOUNT.GROUP_ID = in_group_id
15:40:05 578  	    AND PAYPAL.PAYPAL_STATUS_ID = in_status_id;
15:40:05 579  END GET_ACCOUNT_PAYPALS;
15:40:05 580  
15:40:05 581  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
15:40:05 582  	  in_group_id	 IN  NUMBER,
15:40:05 583  	  in_start_date  IN DATE,
15:40:05 584  	  in_end_date	 IN DATE,
15:40:05 585  	  in_status	 IN NUMBER,
15:40:05 586  	  in_group_account_type IN VARCHAR2,
15:40:05 587  	  out_result_set OUT SYS_REFCURSOR
15:40:05 588  ) AS
15:40:05 589  -- VARIABLES
15:40:05 590  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
15:40:05 591  var_account_id NUMBER;
15:40:05 592  -- EXCEPTIONS
15:40:05 593  BAD_GROUP_ID	      EXCEPTION;
15:40:05 594  BEGIN
15:40:05 595  	-- Get account id
15:40:05 596  	BEGIN
15:40:05 597  	  SELECT
15:40:05 598  	    ACCOUNT.ID INTO var_account_id
15:40:05 599  	  FROM
15:40:05 600  	    ACCOUNT
15:40:05 601  	  WHERE
15:40:05 602  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 603  	  EXCEPTION
15:40:05 604  	    WHEN NO_DATA_FOUND THEN
15:40:05 605  	      RAISE BAD_GROUP_ID;
15:40:05 606  	END;
15:40:05 607  
15:40:05 608  	-- Get information about account subscriptions
15:40:05 609  	OPEN out_result_set FOR
15:40:05 610  	SELECT
15:40:05 611  	  SUBSCRIPTION.ACCOUNT_ID,
15:40:05 612  	  in_group_id AS "GROUP_ID",
15:40:05 613  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
15:40:05 614  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
15:40:05 615  	  SUBSCRIPTION.PURCHASE_DATE,
15:40:05 616  	  SUBSCRIPTION.SUSPEND_DATE,
15:40:05 617  	  SUBSCRIPTION.REACTIVATION_DATE,
15:40:05 618  	  SUBSCRIPTION.CANCELLATION_DATE,
15:40:05 619  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
15:40:05 620  	  SUBSCRIPTION.INSTRUMENT_ID,
15:40:05 621  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
15:40:05 622  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
15:40:05 623  	  OFFER_CHAIN.NAME,
15:40:05 624  	  OFFER_CHAIN.DESCRIPTION,
15:40:05 625  	  OFFER_CHAIN.PRODUCT_URI,
15:40:05 626  	  PROCS_SUBSCRIPTION_V23.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
15:40:05 627  	  PROCS_SUBSCRIPTION_V23.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
15:40:05 628  	  PROCS_SUBSCRIPTION_V23.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
15:40:05 629  	  PROCS_SUBSCRIPTION_V23.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
15:40:05 630  	  PROCS_SUBSCRIPTION_V23.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
15:40:05 631  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
15:40:05 632  	  (
15:40:05 633  	    SELECT
15:40:05 634  	      MAX(ENTITLEMENT_END_DATE)
15:40:05 635  	      FROM LICENSE
15:40:05 636  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:05 637  	  )
15:40:05 638  	  as "ENT_END_DATE",
15:40:05 639  	  (
15:40:05 640  	    SELECT
15:40:05 641  	      MIN(START_DATE)
15:40:05 642  	      FROM LICENSE
15:40:05 643  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:05 644  	  )
15:40:05 645  	  as "ENT_START_DATE",
15:40:05 646  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
15:40:05 647  	  GROUP_ACCOUNT.ID GA_ID,
15:40:05 648  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
15:40:05 649  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
15:40:05 650  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
15:40:05 651  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
15:40:05 652  	  GROUP_ACCOUNT.PHONE GA_PHONE,
15:40:05 653  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
15:40:05 654  	  GROUP_ACCOUNT.SEATS GA_SEATS,
15:40:05 655  	  PROCS_GROUP_ACCOUNT_V23.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
15:40:05 656  	  GROUP_ACCOUNT.IP GA_IP,
15:40:05 657  	  PROCS_SUBSCRIPTION_V23.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE,
15:40:05 658  	  PROCS_ACCOUNT_V23.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
15:40:05 659  	  PROCS_ACCOUNT_V23.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
15:40:05 660  	FROM
15:40:05 661  	  SUBSCRIPTION
15:40:05 662  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 663  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
15:40:05 664  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
15:40:05 665  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
15:40:05 666  	WHERE
15:40:05 667  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:05 668  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V23.REAL_TIME_CANCEL_REASON)
15:40:05 669  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
15:40:05 670  	  AND PROCS_COMMON_V23.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V23.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
15:40:05 671  	  AND PROCS_COMMON_V23.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V23.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
15:40:05 672  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
15:40:05 673  
15:40:05 674  EXCEPTION
15:40:05 675  WHEN BAD_GROUP_ID THEN
15:40:05 676  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 677  	  SPROC_NAME, 'Can not find account with given group id');
15:40:05 678  WHEN OTHERS THEN
15:40:05 679  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 680  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 681  END GET_ACCOUNT_SUBSCRIPTIONS;
15:40:05 682  
15:40:05 683  PROCEDURE FREEZE_ACCOUNT (
15:40:05 684  	in_group_id   IN NUMBER,
15:40:05 685  	in_updated_by IN VARCHAR2,
15:40:05 686  	in_note       IN VARCHAR2,
15:40:05 687  	in_agent_id   IN NUMBER
15:40:05 688  ) AS
15:40:05 689  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
15:40:05 690  -- VARIABLES
15:40:05 691  var_account_id	    NUMBER;
15:40:05 692  var_account_status_id NUMBER;
15:40:05 693  -- EXCEPTIONS
15:40:05 694  BAD_GROUP_ID	    EXCEPTION;
15:40:05 695  BAD_ACCOUNT_STATUS_ID EXCEPTION;
15:40:05 696  CAN_NOT_CREATE_NOTE   EXCEPTION;
15:40:05 697  EXCEPTION_MESSAGE     VARCHAR2(1024);
15:40:05 698  BEGIN
15:40:05 699  
15:40:05 700  	-- Get account status, account id
15:40:05 701  	BEGIN
15:40:05 702  	  SELECT
15:40:05 703  	    ACCOUNT.ID,
15:40:05 704  	    ACCOUNT.ACCOUNT_STATUS_ID
15:40:05 705  	    into
15:40:05 706  	    var_account_id,
15:40:05 707  	    var_account_status_id
15:40:05 708  	  FROM
15:40:05 709  	    ACCOUNT
15:40:05 710  	  WHERE
15:40:05 711  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 712  	  EXCEPTION
15:40:05 713  	    WHEN NO_DATA_FOUND THEN
15:40:05 714  	      RAISE BAD_GROUP_ID;
15:40:05 715  	END;
15:40:05 716  
15:40:05 717  	-- We can freeze only ACTIVE accounts
15:40:05 718  	IF var_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_ACTIVE
15:40:05 719  	  AND var_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_FROZEN THEN
15:40:05 720  	  RAISE BAD_ACCOUNT_STATUS_ID;
15:40:05 721  	END IF;
15:40:05 722  
15:40:05 723  	-- Set account status
15:40:05 724  	PROCS_ACCOUNT_V23.UPDATE_ACCOUNT_STATUS(
15:40:05 725  	  in_account_id        => var_account_id,
15:40:05 726  	  in_updated_by        => in_updated_by,
15:40:05 727  	  in_account_status_id => GLOBAL_STATUSES_V23.ACCOUNT_FROZEN
15:40:05 728  	);
15:40:05 729  
15:40:05 730  	-- Annotate account
15:40:05 731  	BEGIN
15:40:05 732  	  PROCS_ACCOUNT_V23.ANNOTATE_ACCOUNT(
15:40:05 733  	    in_group_id   => in_group_id,
15:40:05 734  	    in_agent_id   => in_agent_id,
15:40:05 735  	    in_note	  => in_note,
15:40:05 736  	    in_created_by => in_updated_by
15:40:05 737  	  );
15:40:05 738  	  EXCEPTION
15:40:05 739  	    WHEN OTHERS THEN
15:40:05 740  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 741  	      RAISE CAN_NOT_CREATE_NOTE;
15:40:05 742  	END;
15:40:05 743  
15:40:05 744  EXCEPTION
15:40:05 745  WHEN BAD_GROUP_ID THEN
15:40:05 746  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 747  	  SPROC_NAME, 'No such group id');
15:40:05 748  WHEN BAD_ACCOUNT_STATUS_ID THEN
15:40:05 749  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
15:40:05 750  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
15:40:05 751  WHEN CAN_NOT_CREATE_NOTE THEN
15:40:05 752  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 753  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
15:40:05 754  WHEN OTHERS THEN
15:40:05 755  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 757  END FREEZE_ACCOUNT;
15:40:05 758  
15:40:05 759  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
15:40:05 760  	in_group_id	   IN  NUMBER,
15:40:05 761  	in_subscription_id IN NUMBER,
15:40:05 762  	out_result_set	   OUT SYS_REFCURSOR
15:40:05 763  ) AS
15:40:05 764  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
15:40:05 765  -- VARIABLES
15:40:05 766  var_account_id	   NUMBER;
15:40:05 767  temp_subscription_id NUMBER;
15:40:05 768  -- EXCEPTIONS
15:40:05 769  BAD_GROUP_ID	  EXCEPTION;
15:40:05 770  BAD_SUBSCRIPTION_ID EXCEPTION;
15:40:05 771  BEGIN
15:40:05 772  	-- Get account id
15:40:05 773  	BEGIN
15:40:05 774  	  SELECT
15:40:05 775  	    ACCOUNT.ID into var_account_id
15:40:05 776  	  FROM
15:40:05 777  	    ACCOUNT
15:40:05 778  	  WHERE
15:40:05 779  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 780  	  EXCEPTION
15:40:05 781  	    WHEN NO_DATA_FOUND THEN
15:40:05 782  	      RAISE BAD_GROUP_ID;
15:40:05 783  	END;
15:40:05 784  
15:40:05 785  	-- Check that subscription exists
15:40:05 786  	BEGIN
15:40:05 787  	  IF in_subscription_id IS NOT NULL THEN
15:40:05 788  	    SELECT
15:40:05 789  	      SUBSCRIPTION.ID into temp_subscription_id
15:40:05 790  	    FROM
15:40:05 791  	      SUBSCRIPTION
15:40:05 792  	    WHERE
15:40:05 793  	      SUBSCRIPTION.ID = in_subscription_id;
15:40:05 794  	  END IF;
15:40:05 795  	  EXCEPTION
15:40:05 796  	    WHEN NO_DATA_FOUND THEN
15:40:05 797  	      RAISE BAD_SUBSCRIPTION_ID;
15:40:05 798  	END;
15:40:05 799  
15:40:05 800  	OPEN out_result_set FOR
15:40:05 801  	SELECT DISTINCT
15:40:05 802  	  INVOICE.ID as "INVOICE_ID",
15:40:05 803  	  INVOICE.CREATE_DATE,
15:40:05 804  	  INVOICE.INVOICE_STATUS_ID,
15:40:05 805  	  PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
15:40:05 806  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
15:40:05 807  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
15:40:05 808  	  SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
15:40:05 809  	  NULL as "GC_CODE",
15:40:05 810  	  NULL as "GC_ID"
15:40:05 811  	FROM
15:40:05 812  	  LICENSE
15:40:05 813  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:05 814  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
15:40:05 815  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 816  	WHERE
15:40:05 817  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:05 818  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V23.REAL_TIME_CANCEL_REASON)
15:40:05 819  	  AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
15:40:05 820  
15:40:05 821  EXCEPTION
15:40:05 822  WHEN BAD_GROUP_ID THEN
15:40:05 823  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 824  	  SPROC_NAME, 'No such account');
15:40:05 825  WHEN BAD_SUBSCRIPTION_ID THEN
15:40:05 826  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 827  	  SPROC_NAME, 'No such subscription');
15:40:05 828  WHEN OTHERS THEN
15:40:05 829  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 830  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 831  END GET_ACCOUNT_SUBSCR_INVOICES;
15:40:05 832  
15:40:05 833  PROCEDURE GET_ACCOUNT_GC_INVOICES (
15:40:05 834  	in_group_id    IN  NUMBER,
15:40:05 835  	out_result_set OUT SYS_REFCURSOR
15:40:05 836  ) AS
15:40:05 837  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
15:40:05 838  -- VARIABLES
15:40:05 839  var_account_id NUMBER;
15:40:05 840  -- EXCEPTIONS
15:40:05 841  BAD_GROUP_ID EXCEPTION;
15:40:05 842  BEGIN
15:40:05 843  	-- Get account id
15:40:05 844  	BEGIN
15:40:05 845  	  SELECT
15:40:05 846  	    ACCOUNT.ID into var_account_id
15:40:05 847  	  FROM
15:40:05 848  	    ACCOUNT
15:40:05 849  	  WHERE
15:40:05 850  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 851  	  EXCEPTION
15:40:05 852  	    WHEN NO_DATA_FOUND THEN
15:40:05 853  	      RAISE BAD_GROUP_ID;
15:40:05 854  	END;
15:40:05 855  
15:40:05 856  	-- Get invoices
15:40:05 857  	OPEN out_result_set FOR
15:40:05 858  	SELECT DISTINCT
15:40:05 859  	  INVOICE.ID as "INVOICE_ID",
15:40:05 860  	  INVOICE.CREATE_DATE,
15:40:05 861  	  INVOICE.INVOICE_STATUS_ID,
15:40:05 862  	  PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
15:40:05 863  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
15:40:05 864  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
15:40:05 865  	  NULL as "SUBSCRIPTION_ID",
15:40:05 866  	  GIFT_CERTIFICATE.CODE as "GC_CODE",
15:40:05 867  	  GIFT_CERTIFICATE.ID as "GC_ID"
15:40:05 868  	FROM
15:40:05 869  	  GIFT_CERTIFICATE
15:40:05 870  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
15:40:05 871  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 872  	WHERE
15:40:05 873  	  ROWNUM <= 100 AND
15:40:05 874  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
15:40:05 875  
15:40:05 876  EXCEPTION
15:40:05 877  WHEN BAD_GROUP_ID THEN
15:40:05 878  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 879  	  SPROC_NAME, 'No such account');
15:40:05 880  WHEN OTHERS THEN
15:40:05 881  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 883  END GET_ACCOUNT_GC_INVOICES;
15:40:05 884  
15:40:05 885  -- norlov: #38580
15:40:05 886  PROCEDURE GET_GC_INVOICE (
15:40:05 887  	in_group_id    IN  NUMBER,
15:40:05 888  	in_gc_code     IN  VARCHAR2,
15:40:05 889  	out_result_set OUT SYS_REFCURSOR
15:40:05 890  ) AS
15:40:05 891  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
15:40:05 892  -- VARIABLES
15:40:05 893  var_account_id NUMBER;
15:40:05 894  -- EXCEPTIONS
15:40:05 895  BAD_GROUP_ID EXCEPTION;
15:40:05 896  BEGIN
15:40:05 897  	-- Get account id
15:40:05 898  	BEGIN
15:40:05 899  	  SELECT
15:40:05 900  	    ACCOUNT.ID into var_account_id
15:40:05 901  	  FROM
15:40:05 902  	    ACCOUNT
15:40:05 903  	  WHERE
15:40:05 904  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 905  	  EXCEPTION
15:40:05 906  	    WHEN NO_DATA_FOUND THEN
15:40:05 907  	      RAISE BAD_GROUP_ID;
15:40:05 908  	END;
15:40:05 909  
15:40:05 910  	-- Get invoice for the GC
15:40:05 911  	OPEN out_result_set FOR
15:40:05 912  	SELECT DISTINCT
15:40:05 913  	  INVOICE.ID as "INVOICE_ID",
15:40:05 914  	  INVOICE.CREATE_DATE,
15:40:05 915  	  INVOICE.INVOICE_STATUS_ID,
15:40:05 916  	  PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
15:40:05 917  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
15:40:05 918  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
15:40:05 919  	  NULL as "SUBSCRIPTION_ID",
15:40:05 920  	  GIFT_CERTIFICATE.CODE as "GC_CODE"
15:40:05 921  	FROM
15:40:05 922  	  GIFT_CERTIFICATE
15:40:05 923  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
15:40:05 924  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
15:40:05 925  	WHERE
15:40:05 926  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
15:40:05 927  	  AND GIFT_CERTIFICATE.CODE = in_gc_code;
15:40:05 928  
15:40:05 929  EXCEPTION
15:40:05 930  WHEN BAD_GROUP_ID THEN
15:40:05 931  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 932  	  SPROC_NAME, 'No such account');
15:40:05 933  WHEN OTHERS THEN
15:40:05 934  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 935  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 936  END GET_GC_INVOICE;
15:40:05 937  
15:40:05 938  PROCEDURE GET_ACCOUNT_PRODUCTS (
15:40:05 939  	in_group_id    IN  NUMBER,
15:40:05 940  	out_result_set OUT SYS_REFCURSOR
15:40:05 941  ) AS
15:40:05 942  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
15:40:05 943  -- VARIABLES
15:40:05 944  var_account_id NUMBER;
15:40:05 945  -- EXCEPTIONS
15:40:05 946  BAD_GROUP_ID EXCEPTION;
15:40:05 947  BEGIN
15:40:05 948  	-- Get account id
15:40:05 949  	BEGIN
15:40:05 950  	  SELECT
15:40:05 951  	    ACCOUNT.ID into var_account_id
15:40:05 952  	  FROM
15:40:05 953  	    ACCOUNT
15:40:05 954  	  WHERE
15:40:05 955  	    ACCOUNT.GROUP_ID = in_group_id;
15:40:05 956  	  EXCEPTION
15:40:05 957  	    WHEN NO_DATA_FOUND THEN
15:40:05 958  	      RAISE BAD_GROUP_ID;
15:40:05 959  	END;
15:40:05 960  
15:40:05 961  	OPEN out_result_set FOR
15:40:05 962  	SELECT DISTINCT
15:40:05 963  	  PRODUCT.ID,
15:40:05 964  	  PRODUCT.NAME
15:40:05 965  	FROM
15:40:05 966  	  PRODUCT
15:40:05 967  	WHERE
15:40:05 968  	  PRODUCT.ID IN (
15:40:05 969  	    SELECT DISTINCT
15:40:05 970  	      PRODUCT_OFFERING.PRODUCT_ID
15:40:05 971  	    FROM
15:40:05 972  	      PRODUCT_OFFERING
15:40:05 973  	    WHERE
15:40:05 974  	      PRODUCT_OFFERING.ID IN (
15:40:05 975  		SELECT DISTINCT
15:40:05 976  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
15:40:05 977  		FROM
15:40:05 978  		  OFFER_PRODUCT_OFFERING
15:40:05 979  		WHERE
15:40:05 980  		  OFFER_PRODUCT_OFFERING.OFFER_ID IN (
15:40:05 981  		    SELECT DISTINCT
15:40:05 982  		      OFFER_OFFER_CHAIN.OFFER_ID
15:40:05 983  		    FROM
15:40:05 984  		      OFFER_OFFER_CHAIN
15:40:05 985  		    WHERE
15:40:05 986  		      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
15:40:05 987  			SELECT DISTINCT
15:40:05 988  			  SUBSCRIPTION.OFFER_CHAIN_ID
15:40:05 989  			FROM
15:40:05 990  			  SUBSCRIPTION
15:40:05 991  			WHERE
15:40:05 992  			  SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:05 993  		      )
15:40:05 994  		  )
15:40:05 995  	      )
15:40:05 996  	  );
15:40:05 997  
15:40:05 998  EXCEPTION
15:40:05 999  WHEN BAD_GROUP_ID THEN
15:40:05 1000  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1001  	   SPROC_NAME, 'No such account');
15:40:05 1002  WHEN OTHERS THEN
15:40:05 1003  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1004  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1005  END GET_ACCOUNT_PRODUCTS;
15:40:05 1006  
15:40:05 1007  PROCEDURE UPDATE_ACCOUNT_STATUS (
15:40:05 1008  	 in_account_id	      IN ACCOUNT.ID%TYPE,
15:40:05 1009  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
15:40:05 1010  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
15:40:05 1011  ) AS
15:40:05 1012  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
15:40:05 1013  -- EXCEPTIONS
15:40:05 1014  BAD_ACCOUNT_ID	      EXCEPTION;
15:40:05 1015  BAD_STATUS_ID	      EXCEPTION;
15:40:05 1016  EXCEPTION_MESSAGE      VARCHAR2(1024);
15:40:05 1017  BEGIN
15:40:05 1018  
15:40:05 1019  	 IF in_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_ACTIVE
15:40:05 1020  	   AND in_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_FROZEN
15:40:05 1021  	   AND in_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_DISABLED THEN
15:40:05 1022  	   RAISE BAD_STATUS_ID;
15:40:05 1023  	 END IF;
15:40:05 1024  
15:40:05 1025  	 PROCS_ACCOUNT_CRU_V23.UPDATE_ACCOUNT(
15:40:05 1026  	   in_account_id	=> in_account_id,
15:40:05 1027  	   in_account_status_id => in_account_status_id,
15:40:05 1028  	   in_updated_by	=> in_updated_by
15:40:05 1029  	 );
15:40:05 1030  
15:40:05 1031  	 IF SQL%ROWCOUNT = 0 THEN
15:40:05 1032  	   RAISE BAD_ACCOUNT_ID;
15:40:05 1033  	 END IF;
15:40:05 1034  
15:40:05 1035  EXCEPTION
15:40:05 1036  WHEN BAD_ACCOUNT_ID THEN
15:40:05 1037  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1038  	   SPROC_NAME, 'No such account');
15:40:05 1039  WHEN BAD_STATUS_ID THEN
15:40:05 1040  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 1041  	   SPROC_NAME, 'Bad status id');
15:40:05 1042  WHEN OTHERS THEN
15:40:05 1043  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1044  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1045  END UPDATE_ACCOUNT_STATUS;
15:40:05 1046  
15:40:05 1047  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
15:40:05 1048  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
15:40:05 1049  	 out_licenses_num OUT NUMBER
15:40:05 1050  ) AS
15:40:05 1051  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
15:40:05 1052  -- VARIABLES
15:40:05 1053  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
15:40:05 1054  -- EXCEPTIONS
15:40:05 1055  BAD_ACCOUNT_ID EXCEPTION;
15:40:05 1056  BEGIN
15:40:05 1057  
15:40:05 1058  	 BEGIN
15:40:05 1059  	   SELECT
15:40:05 1060  	     ACCOUNT.ID into var_account_id
15:40:05 1061  	   FROM
15:40:05 1062  	     ACCOUNT
15:40:05 1063  	   WHERE
15:40:05 1064  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:05 1065  	   EXCEPTION
15:40:05 1066  	     WHEN NO_DATA_FOUND THEN
15:40:05 1067  	       RAISE BAD_ACCOUNT_ID;
15:40:05 1068  	 END;
15:40:05 1069  
15:40:05 1070  	 SELECT
15:40:05 1071  	   COUNT(LICENSE.ID) into out_licenses_num
15:40:05 1072  	 FROM
15:40:05 1073  	   LICENSE
15:40:05 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:05 1075  	 WHERE
15:40:05 1076  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
15:40:05 1077  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V23.TRUE;
15:40:05 1078  
15:40:05 1079  EXCEPTION
15:40:05 1080  WHEN BAD_ACCOUNT_ID THEN
15:40:05 1081  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1082  	   SPROC_NAME, 'No such group id');
15:40:05 1083  WHEN OTHERS THEN
15:40:05 1084  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1085  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1086  END GET_NEEDS_ENTTL_LICENSES_NUM;
15:40:05 1087  
15:40:05 1088  PROCEDURE SET_TAX_EXEMPT (
15:40:05 1089  	 in_group_id  IN NUMBER,
15:40:05 1090  	 in_exempt_id IN VARCHAR2
15:40:05 1091  ) AS
15:40:05 1092  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
15:40:05 1093  -- VARIABLES
15:40:05 1094  var_account_id NUMBER;
15:40:05 1095  -- EXCEPTIONS
15:40:05 1096  BAD_GROUP_ID EXCEPTION;
15:40:05 1097  BEGIN
15:40:05 1098  
15:40:05 1099  	 BEGIN
15:40:05 1100  	   SELECT
15:40:05 1101  	     ACCOUNT.ID into var_account_id
15:40:05 1102  	   FROM
15:40:05 1103  	     ACCOUNT
15:40:05 1104  	   WHERE
15:40:05 1105  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:05 1106  	   EXCEPTION
15:40:05 1107  	     WHEN NO_DATA_FOUND THEN
15:40:05 1108  	       RAISE BAD_GROUP_ID;
15:40:05 1109  	 END;
15:40:05 1110  
15:40:05 1111  	 UPDATE
15:40:05 1112  	   ACCOUNT
15:40:05 1113  	 SET
15:40:05 1114  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
15:40:05 1115  	 WHERE
15:40:05 1116  	   ACCOUNT.ID = var_account_id;
15:40:05 1117  
15:40:05 1118  EXCEPTION
15:40:05 1119  WHEN BAD_GROUP_ID THEN
15:40:05 1120  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1121  	   SPROC_NAME, 'No such group id');
15:40:05 1122  WHEN OTHERS THEN
15:40:05 1123  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1124  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1125  END SET_TAX_EXEMPT;
15:40:05 1126  
15:40:05 1127  PROCEDURE IS_TAX_EXEMPT (
15:40:05 1128  	 in_group_id	   IN NUMBER,
15:40:05 1129  	 out_is_tax_exempt OUT NUMBER
15:40:05 1130  ) AS
15:40:05 1131  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
15:40:05 1132  -- VARIABLES
15:40:05 1133  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
15:40:05 1134  -- EXCEPTIONS
15:40:05 1135  BAD_GROUP_ID EXCEPTION;
15:40:05 1136  BEGIN
15:40:05 1137  
15:40:05 1138  	 BEGIN
15:40:05 1139  	   SELECT
15:40:05 1140  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
15:40:05 1141  	   FROM
15:40:05 1142  	     ACCOUNT
15:40:05 1143  	   WHERE
15:40:05 1144  	     ACCOUNT.GROUP_ID = in_group_id;
15:40:05 1145  	   EXCEPTION
15:40:05 1146  	     WHEN NO_DATA_FOUND THEN
15:40:05 1147  	       RAISE BAD_GROUP_ID;
15:40:05 1148  	 END;
15:40:05 1149  
15:40:05 1150  	 IF var_is_tax_exempt IS NULL THEN
15:40:05 1151  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V23.FALSE;
15:40:05 1152  	 ELSE
15:40:05 1153  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V23.TRUE;
15:40:05 1154  	 END IF;
15:40:05 1155  
15:40:05 1156  EXCEPTION
15:40:05 1157  WHEN BAD_GROUP_ID THEN
15:40:05 1158  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1159  	   SPROC_NAME, 'No such group id');
15:40:05 1160  WHEN OTHERS THEN
15:40:05 1161  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1162  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1163  END IS_TAX_EXEMPT;
15:40:05 1164  
15:40:05 1165  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
15:40:05 1166  	 in_account_id IN NUMBER,
15:40:05 1167  	 out_group_id  OUT NUMBER
15:40:05 1168  ) AS
15:40:05 1169  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
15:40:05 1170  BEGIN
15:40:05 1171  
15:40:05 1172  	 SELECT
15:40:05 1173  	   ACCOUNT.GROUP_ID into out_group_id
15:40:05 1174  	 FROM
15:40:05 1175  	   ACCOUNT
15:40:05 1176  	 WHERE
15:40:05 1177  	   ACCOUNT.ID = in_account_id;
15:40:05 1178  
15:40:05 1179  EXCEPTION
15:40:05 1180  WHEN NO_DATA_FOUND THEN
15:40:05 1181  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1182  	   SPROC_NAME, 'No such account');
15:40:05 1183  WHEN OTHERS THEN
15:40:05 1184  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1185  	   SPROC_NAME, 'Unknown error');
15:40:05 1186  END GET_GROUP_ID_BY_ACCOUNT_ID;
15:40:05 1187  
15:40:05 1188  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:40:05 1189  	 in_group_id IN NUMBER,
15:40:05 1190  	 out_account_id  OUT NUMBER
15:40:05 1191  ) AS
15:40:05 1192  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
15:40:05 1193  BEGIN
15:40:05 1194  
15:40:05 1195  	 SELECT
15:40:05 1196  	   ACCOUNT.ID into out_account_id
15:40:05 1197  	 FROM
15:40:05 1198  	   ACCOUNT
15:40:05 1199  	 WHERE
15:40:05 1200  	   ACCOUNT.GROUP_ID = in_group_id;
15:40:05 1201  
15:40:05 1202  EXCEPTION
15:40:05 1203  WHEN NO_DATA_FOUND THEN
15:40:05 1204  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1205  	   SPROC_NAME, 'No such account');
15:40:05 1206  WHEN OTHERS THEN
15:40:05 1207  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1208  	   SPROC_NAME, 'Unknown error');
15:40:05 1209  END GET_ACCOUNT_ID_BY_GROUP_ID;
15:40:05 1210  
15:40:05 1211  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
15:40:05 1212  	 in_invoice_id IN NUMBER,
15:40:05 1213  	 out_group_ids OUT SYS_REFCURSOR
15:40:05 1214  ) AS
15:40:05 1215  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
15:40:05 1216  -- VARIABLES
15:40:05 1217  temp_invoice_id		 NUMBER;
15:40:05 1218  var_subscrib_group_id	 NUMBER;
15:40:05 1219  var_gc_purchaser_group_id NUMBER;
15:40:05 1220  var_gc_redeemer_group_id  NUMBER;
15:40:05 1221  -- EXCEPTIONS
15:40:05 1222  BAD_INVOICE_ID	    EXCEPTION;
15:40:05 1223  CAN_NOT_FIND_ACCOUNT EXCEPTION;
15:40:05 1224  BEGIN
15:40:05 1225  
15:40:05 1226  	 BEGIN
15:40:05 1227  	   SELECT
15:40:05 1228  	     INVOICE.ID into temp_invoice_id
15:40:05 1229  	   FROM
15:40:05 1230  	     INVOICE
15:40:05 1231  	   WHERE
15:40:05 1232  	     INVOICE.ID = in_invoice_id;
15:40:05 1233  	   EXCEPTION
15:40:05 1234  	     WHEN NO_DATA_FOUND THEN
15:40:05 1235  	       RAISE BAD_INVOICE_ID;
15:40:05 1236  	 END;
15:40:05 1237  
15:40:05 1238  	 BEGIN
15:40:05 1239  	   SELECT DISTINCT
15:40:05 1240  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
15:40:05 1241  	   FROM
15:40:05 1242  	     ACCOUNT
15:40:05 1243  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
15:40:05 1244  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
15:40:05 1245  	   WHERE
15:40:05 1246  	     LICENSE.INVOICE_ID = in_invoice_id;
15:40:05 1247  	   EXCEPTION
15:40:05 1248  	     WHEN NO_DATA_FOUND THEN
15:40:05 1249  	       var_subscrib_group_id := NULL;
15:40:05 1250  	 END;
15:40:05 1251  
15:40:05 1252  	 IF var_subscrib_group_id IS NULL THEN
15:40:05 1253  	   BEGIN
15:40:05 1254  	     SELECT
15:40:05 1255  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
15:40:05 1256  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
15:40:05 1257  	       into
15:40:05 1258  	       var_gc_purchaser_group_id,
15:40:05 1259  	       var_gc_redeemer_group_id
15:40:05 1260  	     FROM
15:40:05 1261  	       GIFT_CERTIFICATE
15:40:05 1262  	     WHERE
15:40:05 1263  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
15:40:05 1264  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
15:40:05 1265  	     EXCEPTION
15:40:05 1266  	       WHEN NO_DATA_FOUND THEN
15:40:05 1267  		 var_gc_purchaser_group_id := NULL;
15:40:05 1268  		 var_gc_redeemer_group_id  := NULL;
15:40:05 1269  	   END;
15:40:05 1270  	 END IF;
15:40:05 1271  
15:40:05 1272  	 IF var_subscrib_group_id IS NULL
15:40:05 1273  	   AND var_gc_purchaser_group_id IS NULL
15:40:05 1274  	   AND var_gc_redeemer_group_id IS NULL THEN
15:40:05 1275  	     RAISE CAN_NOT_FIND_ACCOUNT;
15:40:05 1276  	 END IF;
15:40:05 1277  
15:40:05 1278  	 OPEN out_group_ids FOR
15:40:05 1279  	 SELECT GROUP_ID FROM (
15:40:05 1280  	   SELECT
15:40:05 1281  	     var_subscrib_group_id as "GROUP_ID"
15:40:05 1282  	   FROM
15:40:05 1283  	     DUAL
15:40:05 1284  	   UNION
15:40:05 1285  	   SELECT
15:40:05 1286  	     var_gc_purchaser_group_id as "GROUP_ID"
15:40:05 1287  	   FROM
15:40:05 1288  	     DUAL
15:40:05 1289  	   UNION
15:40:05 1290  	   SELECT
15:40:05 1291  	     var_gc_redeemer_group_id as "GROUP_ID"
15:40:05 1292  	   FROM
15:40:05 1293  	     DUAL
15:40:05 1294  	 )
15:40:05 1295  	 WHERE
15:40:05 1296  	   GROUP_ID IS NOT NULL;
15:40:05 1297  
15:40:05 1298  EXCEPTION
15:40:05 1299  WHEN BAD_INVOICE_ID THEN
15:40:05 1300  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1301  	   SPROC_NAME, 'No such invoice');
15:40:05 1302  WHEN CAN_NOT_FIND_ACCOUNT THEN
15:40:05 1303  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1304  	   SPROC_NAME, 'Could not find account for given invoice');
15:40:05 1305  WHEN OTHERS THEN
15:40:05 1306  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1307  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1308  END GET_GROUPS_ID_BY_INVOICE_ID;
15:40:05 1309  
15:40:05 1310  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
15:40:05 1311  	 in_group_id	   IN NUMBER,
15:40:05 1312  	 out_tax_exempt_id OUT VARCHAR2
15:40:05 1313  ) AS
15:40:05 1314  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
15:40:05 1315  -- VARIABLES
15:40:05 1316  -- EXCEPTIONS
15:40:05 1317  BEGIN
15:40:05 1318  
15:40:05 1319  	 SELECT
15:40:05 1320  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
15:40:05 1321  	 FROM
15:40:05 1322  	   ACCOUNT
15:40:05 1323  	 WHERE
15:40:05 1324  	   ACCOUNT.GROUP_ID = in_group_id;
15:40:05 1325  
15:40:05 1326  EXCEPTION
15:40:05 1327  WHEN NO_DATA_FOUND THEN
15:40:05 1328  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1329  	   SPROC_NAME, 'No such account');
15:40:05 1330  WHEN OTHERS THEN
15:40:05 1331  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1332  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1333  END GET_ACCOUNT_TAX_EXEMPT_ID;
15:40:05 1334  
15:40:05 1335  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
15:40:05 1336  	 in_group_id	IN NUMBER,
15:40:05 1337  	 out_result_set OUT SYS_REFCURSOR
15:40:05 1338  ) AS
15:40:05 1339  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
15:40:05 1340  -- Variables
15:40:05 1341  var_account_id NUMBER;
15:40:05 1342  -- Exceptions
15:40:05 1343  BAD_GROUP_ID   EXCEPTION;
15:40:05 1344  BEGIN
15:40:05 1345  
15:40:05 1346  	 BEGIN
15:40:05 1347  	   SELECT
15:40:05 1348  	     ID into var_account_id
15:40:05 1349  	   FROM
15:40:05 1350  	     ACCOUNT
15:40:05 1351  	   WHERE
15:40:05 1352  	     GROUP_ID = in_group_id;
15:40:05 1353  	   EXCEPTION
15:40:05 1354  	     WHEN NO_DATA_FOUND THEN
15:40:05 1355  	       RAISE BAD_GROUP_ID;
15:40:05 1356  	 END;
15:40:05 1357  
15:40:05 1358  	 OPEN out_result_set FOR
15:40:05 1359  	 SELECT
15:40:05 1360  	   S.ID as SUBSCRIPTION_ID,
15:40:05 1361  	   OCHMD.OFFER_CHAIN_ID
15:40:05 1362  	 FROM
15:40:05 1363  	   SUBSCRIPTION S
15:40:05 1364  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
15:40:05 1365  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V23.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
15:40:05 1366  	 WHERE
15:40:05 1367  	   S.ACCOUNT_ID = var_account_id;
15:40:05 1368  
15:40:05 1369  EXCEPTION
15:40:05 1370  WHEN BAD_GROUP_ID THEN
15:40:05 1371  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1372  	   SPROC_NAME, 'No such account');
15:40:05 1373  WHEN OTHERS THEN
15:40:05 1374  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1375  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1376  END GET_UPGRADABLE_SUBSCRIPTIONS;
15:40:05 1377  
15:40:05 1378  PROCEDURE GET_USR_ALL_SBSCR_IDS (
15:40:05 1379  	 in_group_id	    IN NUMBER,
15:40:05 1380  	 out_result_set     OUT SYS_REFCURSOR
15:40:05 1381  ) AS
15:40:05 1382  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
15:40:05 1383  -- VARIABLES
15:40:05 1384  var_account_id NUMBER;
15:40:05 1385  -- EXCEPTIONS
15:40:05 1386  BAD_GROUP_ID EXCEPTION;
15:40:05 1387  BEGIN
15:40:05 1388  
15:40:05 1389  	 BEGIN
15:40:05 1390  	   SELECT
15:40:05 1391  	     A.ID INTO var_account_id
15:40:05 1392  	   FROM
15:40:05 1393  	     ACCOUNT A
15:40:05 1394  	   WHERE
15:40:05 1395  	     A.GROUP_ID = in_group_id;
15:40:05 1396  	   EXCEPTION
15:40:05 1397  	     WHEN NO_DATA_FOUND THEN
15:40:05 1398  	       RAISE BAD_GROUP_ID;
15:40:05 1399  	 END;
15:40:05 1400  
15:40:05 1401  	 OPEN out_result_set FOR
15:40:05 1402  	 SELECT
15:40:05 1403  	   S.ID
15:40:05 1404  	 FROM
15:40:05 1405  	   SUBSCRIPTION S
15:40:05 1406  	 WHERE
15:40:05 1407  	   S.ACCOUNT_ID = var_account_id
15:40:05 1408  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
15:40:05 1409  
15:40:05 1410  EXCEPTION
15:40:05 1411  WHEN BAD_GROUP_ID THEN
15:40:05 1412  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1413  	   SPROC_NAME, 'No such account');
15:40:05 1414  WHEN OTHERS THEN
15:40:05 1415  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1416  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1417  END GET_USR_ALL_SBSCR_IDS;
15:40:05 1418  
15:40:05 1419  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
15:40:05 1420  	 in_group_id	    IN NUMBER,
15:40:05 1421  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
15:40:05 1422  	 out_result_set     OUT SYS_REFCURSOR
15:40:05 1423  ) AS
15:40:05 1424  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
15:40:05 1425  -- VARIABLES
15:40:05 1426  var_account_id NUMBER;
15:40:05 1427  -- EXCEPTIONS
15:40:05 1428  BAD_GROUP_ID	   EXCEPTION;
15:40:05 1429  BAD_OFFER_CHAIN_IDS EXCEPTION;
15:40:05 1430  BEGIN
15:40:05 1431  
15:40:05 1432  	 IF in_offer_chain_ids IS NULL THEN
15:40:05 1433  	   RAISE BAD_OFFER_CHAIN_IDS;
15:40:05 1434  	 END IF;
15:40:05 1435  
15:40:05 1436  	 BEGIN
15:40:05 1437  	   SELECT
15:40:05 1438  	     A.ID INTO var_account_id
15:40:05 1439  	   FROM
15:40:05 1440  	     ACCOUNT A
15:40:05 1441  	   WHERE
15:40:05 1442  	     A.GROUP_ID = in_group_id;
15:40:05 1443  	   EXCEPTION
15:40:05 1444  	     WHEN NO_DATA_FOUND THEN
15:40:05 1445  	       RAISE BAD_GROUP_ID;
15:40:05 1446  	 END;
15:40:05 1447  
15:40:05 1448  	 OPEN out_result_set FOR
15:40:05 1449  	 SELECT
15:40:05 1450  	   S.ID
15:40:05 1451  	 FROM
15:40:05 1452  	   SUBSCRIPTION S
15:40:05 1453  	 WHERE
15:40:05 1454  	   S.ACCOUNT_ID = var_account_id
15:40:05 1455  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
15:40:05 1456  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
15:40:05 1457  
15:40:05 1458  EXCEPTION
15:40:05 1459  WHEN BAD_OFFER_CHAIN_IDS THEN
15:40:05 1460  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
15:40:05 1461  	   SPROC_NAME, 'Offer chains ids parameter is null');
15:40:05 1462  WHEN BAD_GROUP_ID THEN
15:40:05 1463  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 1464  	   SPROC_NAME, 'No such account');
15:40:05 1465  WHEN OTHERS THEN
15:40:05 1466  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1468  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
15:40:05 1469  
15:40:05 1470  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
15:40:05 1471  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
15:40:05 1472  	 in_expiration_date IN DATE,
15:40:05 1473  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
15:40:05 1474  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
15:40:05 1475  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
15:40:05 1476  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
15:40:05 1477  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
15:40:05 1478  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
15:40:05 1479  	 in_lower_bound IN NUMBER DEFAULT 1,
15:40:05 1480  	 in_upper_bound IN NUMBER DEFAULT 11,
15:40:05 1481  	 out_result_set OUT SYS_REFCURSOR
15:40:05 1482  ) AS
15:40:05 1483  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
15:40:05 1484  BEGIN
15:40:05 1485  
15:40:05 1486  	 OPEN out_result_set FOR
15:40:05 1487  	     SELECT
15:40:05 1488  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
15:40:05 1489  	     FROM
15:40:05 1490  	       account a,
15:40:05 1491  	       credit_card cc
15:40:05 1492  	     WHERE
15:40:05 1493  	       cc.expiration_date = in_expiration_date and
15:40:05 1494  	       cc.last_four_cc = in_last_four_cc and
15:40:05 1495  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
15:40:05 1496  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
15:40:05 1497  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
15:40:05 1498  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
15:40:05 1499  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
15:40:05 1500  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
15:40:05 1501  	       a.id = cc.account_id and
15:40:05 1502  	       rownum >= in_lower_bound and
15:40:05 1503  	       rownum <= in_upper_bound
15:40:05 1504  	   ;
15:40:05 1505  
15:40:05 1506  EXCEPTION
15:40:05 1507  WHEN OTHERS THEN
15:40:05 1508  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 1509  	   SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 1510  END GET_GROUP_IDS_BY_CC_INFO;
15:40:05 1511  
15:40:05 1512  END PROCS_ACCOUNT_V23;
15:40:05 1513  .
15:40:05 SQL> /

Package body created.

Elapsed: 00:00:00.15
15:40:05 SQL> 
15:40:05 SQL> prompt Compiling body for procs_process_retry.sql
Compiling body for procs_process_retry.sql
15:40:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PROCESS_RETRY_V23" AS
15:40:05   2  
15:40:05   3  PROCEDURE LOG_RETRY(
15:40:05   4  	  in_process_name IN VARCHAR2,
15:40:05   5  	  in_generic_id   IN NUMBER,
15:40:05   6  	  in_date	  IN VARCHAR2,
15:40:05   7  	  out_success	   OUT NUMBER
15:40:05   8  ) AS
15:40:05   9  SPROC_NAME CONSTANT VARCHAR2(32) := 'LOG_RETRY_V23';
15:40:05  10  BEGIN
15:40:05  11  
15:40:05  12  	out_success := 1;
15:40:05  13  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
15:40:05  14  	VALUES (in_process_name, in_generic_id, 1, to_date(in_date, 'DD-Mon-YYYY HH24:MI:SS'), sysdate);
15:40:05  15  	commit;
15:40:05  16  EXCEPTION
15:40:05  17  WHEN DUP_VAL_ON_INDEX THEN
15:40:05  18  	rollback;
15:40:05  19  	out_success := 0;
15:40:05  20  WHEN OTHERS THEN
15:40:05  21  	rollback;
15:40:05  22  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05  23  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05  24  
15:40:05  25  END;
15:40:05  26  
15:40:05  27  PROCEDURE LOG_RETRY_DATE(
15:40:05  28  	  in_process_name IN VARCHAR2,
15:40:05  29  	  in_generic_id   IN NUMBER,
15:40:05  30  	  in_date	  IN DATE,
15:40:05  31  	  out_success	   OUT NUMBER
15:40:05  32  ) AS
15:40:05  33  SPROC_NAME CONSTANT VARCHAR2(32) := 'LOG_RETRY_DATE_V23';
15:40:05  34  BEGIN
15:40:05  35  
15:40:05  36  	out_success := 1;
15:40:05  37  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
15:40:05  38  	VALUES (in_process_name, in_generic_id, 1, in_date, sysdate);
15:40:05  39  	commit;
15:40:05  40  EXCEPTION
15:40:05  41  WHEN DUP_VAL_ON_INDEX THEN
15:40:05  42  	rollback;
15:40:05  43  	out_success := 0;
15:40:05  44  WHEN OTHERS THEN
15:40:05  45  	rollback;
15:40:05  46  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05  47  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05  48  
15:40:05  49  END;
15:40:05  50  
15:40:05  51  PROCEDURE DELETE_RETRY(
15:40:05  52  	  in_process_name IN VARCHAR2,
15:40:05  53  	  in_remove_minutes  IN NUMBER
15:40:05  54  ) AS
15:40:05  55  BEGIN
15:40:05  56  
15:40:05  57  delete from PROCESS_RETRY_THROTTLE
15:40:05  58  where
15:40:05  59  	process_name = in_process_name and
15:40:05  60  	create_date <= sysdate - (in_remove_minutes / (60 * 24));
15:40:05  61  commit;
15:40:05  62  END;
15:40:05  63  
15:40:05  64  PROCEDURE GET_SYSDATE (
15:40:05  65  	out_date  OUT VARCHAR2
15:40:05  66  ) AS
15:40:05  67  BEGIN
15:40:05  68  	SELECT to_char(SYSDATE, 'DD-Mon-YYYY HH24:MI:SS') into out_date from dual;
15:40:05  69  END;
15:40:05  70  
15:40:05  71  END PROCS_PROCESS_RETRY_V23;
15:40:05  72  .
15:40:05 SQL> /

Package body created.

Elapsed: 00:00:00.04
15:40:05 SQL> 
15:40:05 SQL> prompt Compiling body for procs_notification.sql
Compiling body for procs_notification.sql
15:40:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_NOTIFICATION_V23" AS
15:40:05   2  
15:40:05   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
15:40:05   4  /*
15:40:05   5  Throws exceptions:
15:40:05   6  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05   7  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05   8  */
15:40:05   9  	in_notification_type_name IN VARCHAR2,
15:40:05  10  	out_notification_type_id  OUT NUMBER
15:40:05  11  ) AS
15:40:05  12  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NOTIFICATION_TYPE_BY_NAME';
15:40:05  13  BEGIN
15:40:05  14  	SELECT
15:40:05  15  	  NOTIFICATION_TYPE.ID into out_notification_type_id
15:40:05  16  	FROM
15:40:05  17  	  NOTIFICATION_TYPE
15:40:05  18  	WHERE
15:40:05  19  	  NOTIFICATION_TYPE.VALUE = in_notification_type_name;
15:40:05  20  EXCEPTION
15:40:05  21  WHEN NO_DATA_FOUND THEN
15:40:05  22  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05  23  	  SPROC_NAME, 'No such type');
15:40:05  24  WHEN OTHERS THEN
15:40:05  25  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05  26  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05  27  END GET_NOTIFICATION_TYPE_BY_NAME;
15:40:05  28  
15:40:05  29  /******************************************************************/
15:40:05  30  
15:40:05  31  PROCEDURE ADD_NOTIFICATION (
15:40:05  32  /*
15:40:05  33  Throws exceptions:
15:40:05  34  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05  35  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05  36  */
15:40:05  37  	in_sender_account_id	 IN NUMBER DEFAULT 0,
15:40:05  38  	in_recipient_group_id	 IN NUMBER,
15:40:05  39  	in_notification_type_id  IN NUMBER,
15:40:05  40  	in_date_to_notify	 IN DATE,
15:40:05  41  	in_email_template_params IN CLOB
15:40:05  42  ) AS
15:40:05  43  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION';
15:40:05  44  -- VARIABLES
15:40:05  45  temp_type_count NUMBER;
15:40:05  46  var_create_date DATE := SYSDATE;
15:40:05  47  -- EXCEPTIONS
15:40:05  48  BAD_NOTIFICATION_TYPE_ID EXCEPTION;
15:40:05  49  CAN_NOT_CREATE_HISTORY   EXCEPTION;
15:40:05  50  EXCEPTION_MESSAGE        VARCHAR2(1024);
15:40:05  51  BEGIN
15:40:05  52  
15:40:05  53  	SELECT
15:40:05  54  	  COUNT(*) into temp_type_count
15:40:05  55  	FROM
15:40:05  56  	  NOTIFICATION_TYPE
15:40:05  57  	WHERE
15:40:05  58  	  NOTIFICATION_TYPE.ID = in_notification_type_id;
15:40:05  59  
15:40:05  60  	IF temp_type_count = 0 THEN
15:40:05  61  	  RAISE BAD_NOTIFICATION_TYPE_ID;
15:40:05  62  	END IF;
15:40:05  63  
15:40:05  64  	INSERT INTO NOTIFICATION (
15:40:05  65  	  ID,
15:40:05  66  	  ACCOUNT_ID,
15:40:05  67  	  GROUP_ID,
15:40:05  68  	  NOTIFICATION_TYPE_ID,
15:40:05  69  	  NOTIFICATION_STATUS_ID,
15:40:05  70  	  EMAIL_TEMPLATE_PARAMS,
15:40:05  71  	  UPDATE_DATE,
15:40:05  72  	  CREATE_DATE,
15:40:05  73  	  DATE_TO_NOTIFY
15:40:05  74  	) VALUES (
15:40:05  75  	  NOT_ID_SEQ.nextVal,
15:40:05  76  	  in_sender_account_id,
15:40:05  77  	  in_recipient_group_id,
15:40:05  78  	  in_notification_type_id,
15:40:05  79  	  NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING,
15:40:05  80  	  in_email_template_params,
15:40:05  81  	  var_create_date,
15:40:05  82  	  var_create_date,
15:40:05  83  	  in_date_to_notify
15:40:05  84  	);
15:40:05  85  
15:40:05  86  	--BEGIN
15:40:05  87  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V23.CREATE_NOTIFICATION_HISTORY (
15:40:05  88  	--    in_account_id		  => 0, -- ACCOUNT_ID. Can we delete it?
15:40:05  89  	--    in_group_id		  => in_recipient_group_id,
15:40:05  90  	--    notification_reason_type_id => in_notification_type_id,
15:40:05  91  	--    notification_status_id	  => NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING,
15:40:05  92  	--    email_template_params	  => in_email_template_params,
15:40:05  93  	--    in_create_date		  => var_create_date
15:40:05  94  	--  );
15:40:05  95  	--  EXCEPTION
15:40:05  96  	--    WHEN OTHERS THEN
15:40:05  97  	--	EXCEPTION_MESSAGE := SQLERRM;
15:40:05  98  	--	RAISE CAN_NOT_CREATE_HISTORY;
15:40:05  99  	--END;
15:40:05 100  
15:40:05 101  EXCEPTION
15:40:05 102  WHEN BAD_NOTIFICATION_TYPE_ID THEN
15:40:05 103  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 104  	  SPROC_NAME, 'No such notification status');
15:40:05 105  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:05 106  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 107  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:05 108  WHEN OTHERS THEN
15:40:05 109  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 110  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 111  END ADD_NOTIFICATION;
15:40:05 112  
15:40:05 113  /******************************************************************************/
15:40:05 114  
15:40:05 115  PROCEDURE GET_PENDING_NOTIFICATIONS (
15:40:05 116  /*
15:40:05 117  Throws exceptions:
15:40:05 118  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 119  */
15:40:05 120  	out_result_set OUT SYS_REFCURSOR
15:40:05 121  ) AS
15:40:05 122  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PENDING_NOTIFICATIONS';
15:40:05 123  -- CONSTANTS
15:40:05 124  C_NOTIFICATION_COUNT_LIMIT CONSTANT NUMBER := 500;
15:40:05 125  BEGIN
15:40:05 126  	OPEN out_result_set FOR
15:40:05 127  SELECT * FROM
15:40:05 128  (
15:40:05 129  	SELECT
15:40:05 130  	  NOTIFICATION.ID
15:40:05 131  	FROM
15:40:05 132  	  NOTIFICATION
15:40:05 133  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
15:40:05 134  	WHERE
15:40:05 135  	  ROWNUM <= C_NOTIFICATION_COUNT_LIMIT*10
15:40:05 136  	  AND NOT EXISTS (
15:40:05 137  	    SELECT NULL
15:40:05 138  	    FROM PROCESS_RETRY_THROTTLE
15:40:05 139  	    WHERE GENERIC_ID = NOTIFICATION.ID AND PROCESS_NAME = SPROC_NAME
15:40:05 140  	  )
15:40:05 141  	  AND (
15:40:05 142  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING
15:40:05 143  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V23.NOTIFICATION_FAILED
15:40:05 144  	  )
15:40:05 145  	  AND (
15:40:05 146  	    NOTIFICATION.DATE_TO_NOTIFY IS NULL OR SYSDATE > NOTIFICATION.DATE_TO_NOTIFY
15:40:05 147  	  )ORDER BY dbms_random.value
15:40:05 148  ) WHERE
15:40:05 149  	ROWNUM <= C_NOTIFICATION_COUNT_LIMIT;
15:40:05 150  
15:40:05 151  EXCEPTION
15:40:05 152  WHEN OTHERS THEN
15:40:05 153  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 155  END GET_PENDING_NOTIFICATIONS;
15:40:05 156  
15:40:05 157  /******************************************************************************/
15:40:05 158  
15:40:05 159  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
15:40:05 160  /*
15:40:05 161  Throws exceptions:
15:40:05 162  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 163  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 164  */
15:40:05 165  	in_notification_id IN NUMBER
15:40:05 166  ) AS
15:40:05 167  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_NOTIFICATION_TIMESTAMP';
15:40:05 168  -- VARIABLES
15:40:05 169  temp_notification_id NUMBER;
15:40:05 170  -- EXCEPTIONS
15:40:05 171  BAD_NOTIFICATION_ID EXCEPTION;
15:40:05 172  BEGIN
15:40:05 173  
15:40:05 174  	BEGIN
15:40:05 175  	  SELECT
15:40:05 176  	    NOTIFICATION.ID into temp_notification_id
15:40:05 177  	  FROM
15:40:05 178  	    NOTIFICATION
15:40:05 179  	  WHERE
15:40:05 180  	    NOTIFICATION.ID = in_notification_id;
15:40:05 181  	  EXCEPTION
15:40:05 182  	    WHEN NO_DATA_FOUND THEN
15:40:05 183  	      RAISE BAD_NOTIFICATION_ID;
15:40:05 184  	END;
15:40:05 185  
15:40:05 186  	UPDATE
15:40:05 187  	  NOTIFICATION
15:40:05 188  	SET
15:40:05 189  	  NOTIFICATION.UPDATE_DATE = sysdate
15:40:05 190  	WHERE
15:40:05 191  	  NOTIFICATION.ID = in_notification_id;
15:40:05 192  
15:40:05 193  EXCEPTION
15:40:05 194  WHEN BAD_NOTIFICATION_ID THEN
15:40:05 195  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 196  	  SPROC_NAME, 'No such notification');
15:40:05 197  WHEN OTHERS THEN
15:40:05 198  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 199  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 200  END UPDATE_NOTIFICATION_TIMESTAMP;
15:40:05 201  
15:40:05 202  /******************************************************************************/
15:40:05 203  
15:40:05 204  PROCEDURE SET_NOTIFICATION_STATUS (
15:40:05 205  /*
15:40:05 206  Throws exceptions:
15:40:05 207  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 208  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 209  */
15:40:05 210  	in_notification_id	  IN NUMBER,
15:40:05 211  	in_notification_status_id IN NUMBER,
15:40:05 212  	in_error_message	  IN VARCHAR2
15:40:05 213  ) AS
15:40:05 214  SPROC_NAME CONSTANT VARCHAR2(32) := 'SET_NOTIFICATION_STATUS';
15:40:05 215  -- VARIABLES
15:40:05 216  var_group_id		NUMBER;
15:40:05 217  var_account_id		NUMBER;
15:40:05 218  var_notification_type_id	NUMBER;
15:40:05 219  var_email_template_params CLOB;
15:40:05 220  var_create_history_date	DATE := SYSDATE;
15:40:05 221  var_notification_status_id   NUMBER;
15:40:05 222  var_date_to_notify	DATE;
15:40:05 223  max_fails   NUMBER := 5;
15:40:05 224  num_fails   NUMBER;
15:40:05 225  -- EXCEPTIONS
15:40:05 226  BAD_NOTIFICATION_ID	 EXCEPTION;
15:40:05 227  BAD_NOTIFICATION_STATUS_ID EXCEPTION;
15:40:05 228  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
15:40:05 229  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:40:05 230  BEGIN
15:40:05 231  
15:40:05 232  	IF in_notification_status_id != NOTIFICATION_STATUSES_V23.NOTIFICATION_SENT
15:40:05 233  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING
15:40:05 234  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V23.NOTIFICATION_FAILED THEN
15:40:05 235  	  RAISE BAD_NOTIFICATION_STATUS_ID;
15:40:05 236  	END IF;
15:40:05 237  
15:40:05 238  	BEGIN
15:40:05 239  	  SELECT
15:40:05 240  	    NOTIFICATION.GROUP_ID,
15:40:05 241  	    NOTIFICATION.ACCOUNT_ID,
15:40:05 242  	    NOTIFICATION.NOTIFICATION_TYPE_ID,
15:40:05 243  	    NOTIFICATION.NOTIFICATION_STATUS_ID,
15:40:05 244  	    NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
15:40:05 245  	    NOTIFICATION.DATE_TO_NOTIFY
15:40:05 246  	    into
15:40:05 247  	    var_group_id,
15:40:05 248  	    var_account_id,
15:40:05 249  	    var_notification_type_id,
15:40:05 250  	    var_notification_status_id,
15:40:05 251  	    var_email_template_params,
15:40:05 252  	    var_date_to_notify
15:40:05 253  	  FROM
15:40:05 254  	    NOTIFICATION
15:40:05 255  	  WHERE
15:40:05 256  	    NOTIFICATION.ID = in_notification_id;
15:40:05 257  	  EXCEPTION
15:40:05 258  	    WHEN NO_DATA_FOUND THEN
15:40:05 259  	      RAISE BAD_NOTIFICATION_ID;
15:40:05 260  	END;
15:40:05 261  
15:40:05 262  	BEGIN
15:40:05 263  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_NOTIFICATION_HISTORY (
15:40:05 264  	    in_notification_id		=> in_notification_id,
15:40:05 265  	    in_account_id		=> var_account_id,
15:40:05 266  	    in_group_id 		=> var_group_id,
15:40:05 267  	    notification_reason_type_id => var_notification_type_id,
15:40:05 268  	    notification_status_id	=> var_notification_status_id,
15:40:05 269  	    email_template_params	=> var_email_template_params,
15:40:05 270  	    in_create_date		=> var_create_history_date,
15:40:05 271  	    in_date_to_notify		=> var_date_to_notify
15:40:05 272  	  );
15:40:05 273  	  EXCEPTION
15:40:05 274  	    WHEN OTHERS THEN
15:40:05 275  	      EXCEPTION_MESSAGE := SQLERRM;
15:40:05 276  	      RAISE CAN_NOT_CREATE_HISTORY;
15:40:05 277  	END;
15:40:05 278  
15:40:05 279  	UPDATE
15:40:05 280  	  NOTIFICATION
15:40:05 281  	SET
15:40:05 282  	  NOTIFICATION.NOTIFICATION_STATUS_ID = in_notification_status_id,
15:40:05 283  	  NOTIFICATION.UPDATE_DATE = sysdate
15:40:05 284  	WHERE
15:40:05 285  	  NOTIFICATION.ID = in_notification_id;
15:40:05 286  
15:40:05 287  	IF ( in_error_message IS NOT NULL ) THEN
15:40:05 288  	  ADD_NOTIFICATION_FAILURE(
15:40:05 289  	    in_notification_id => in_notification_id,
15:40:05 290  	    in_error_message => in_error_message
15:40:05 291  	  );
15:40:05 292  	END IF;
15:40:05 293  
15:40:05 294  	SELECT COUNT(1) INTO num_fails
15:40:05 295  	FROM NOTIFICATION_FAILURE
15:40:05 296  	WHERE NOTIFICATION_ID = in_notification_id;
15:40:05 297  
15:40:05 298  	IF (in_notification_status_id = NOTIFICATION_STATUSES_V23.NOTIFICATION_SENT OR num_fails >= max_fails) then
15:40:05 299  	  FOR REC IN (
15:40:05 300  	      SELECT ID, NOTIFICATION_ID, ERROR_MESSAGE, CREATE_DATE
15:40:05 301  	      FROM NOTIFICATION_FAILURE
15:40:05 302  	      WHERE NOTIFICATION_ID = in_notification_id
15:40:05 303  	      ) LOOP
15:40:05 304  	      BEGIN
15:40:05 305  		CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_NOTIF_FAILURE_HISTORY(
15:40:05 306  		  in_error_message	   => REC.ERROR_MESSAGE,
15:40:05 307  		  in_notification_id	   => REC.NOTIFICATION_ID,
15:40:05 308  		  in_create_date	   => REC.CREATE_DATE
15:40:05 309  		);
15:40:05 310  		EXCEPTION
15:40:05 311  		  WHEN OTHERS THEN
15:40:05 312  		    EXCEPTION_MESSAGE := SQLERRM;
15:40:05 313  		    RAISE CAN_NOT_CREATE_HISTORY;
15:40:05 314  	      END;
15:40:05 315  	  END LOOP;
15:40:05 316  	  DELETE FROM NOTIFICATION_FAILURE WHERE NOTIFICATION_ID = in_notification_id;
15:40:05 317  
15:40:05 318  	  BEGIN
15:40:05 319  	    SELECT
15:40:05 320  	      NOTIFICATION.GROUP_ID,
15:40:05 321  	      NOTIFICATION.ACCOUNT_ID,
15:40:05 322  	      NOTIFICATION.NOTIFICATION_TYPE_ID,
15:40:05 323  	      NOTIFICATION.NOTIFICATION_STATUS_ID,
15:40:05 324  	      NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
15:40:05 325  	      NOTIFICATION.DATE_TO_NOTIFY
15:40:05 326  	      into
15:40:05 327  	      var_group_id,
15:40:05 328  	      var_account_id,
15:40:05 329  	      var_notification_type_id,
15:40:05 330  	      var_notification_status_id,
15:40:05 331  	      var_email_template_params,
15:40:05 332  	      var_date_to_notify
15:40:05 333  	    FROM
15:40:05 334  	      NOTIFICATION
15:40:05 335  	    WHERE
15:40:05 336  	      NOTIFICATION.ID = in_notification_id;
15:40:05 337  	    EXCEPTION
15:40:05 338  	      WHEN NO_DATA_FOUND THEN
15:40:05 339  		RAISE BAD_NOTIFICATION_ID;
15:40:05 340  	  END;
15:40:05 341  
15:40:05 342  	  BEGIN
15:40:05 343  	    CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_NOTIFICATION_HISTORY (
15:40:05 344  	      in_notification_id	  => in_notification_id,
15:40:05 345  	      in_account_id		  => var_account_id,
15:40:05 346  	      in_group_id		  => var_group_id,
15:40:05 347  	      notification_reason_type_id => var_notification_type_id,
15:40:05 348  	      notification_status_id	  => var_notification_status_id,
15:40:05 349  	      email_template_params	  => var_email_template_params,
15:40:05 350  	      in_create_date		  => var_create_history_date,
15:40:05 351  	      in_date_to_notify 	  => var_date_to_notify
15:40:05 352  	    );
15:40:05 353  	    EXCEPTION
15:40:05 354  	      WHEN OTHERS THEN
15:40:05 355  		EXCEPTION_MESSAGE := SQLERRM;
15:40:05 356  		RAISE CAN_NOT_CREATE_HISTORY;
15:40:05 357  	  END;
15:40:05 358  
15:40:05 359  	  DELETE FROM NOTIFICATION WHERE ID = in_notification_id;
15:40:05 360  
15:40:05 361  	END IF;
15:40:05 362  	commit;
15:40:05 363  
15:40:05 364  EXCEPTION
15:40:05 365  WHEN BAD_NOTIFICATION_STATUS_ID THEN
15:40:05 366  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 367  	  SPROC_NAME, 'Bad notification status');
15:40:05 368  WHEN BAD_NOTIFICATION_ID THEN
15:40:05 369  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 370  	  SPROC_NAME, 'No such notification');
15:40:05 371  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:05 372  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 373  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:05 374  WHEN OTHERS THEN
15:40:05 375  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 376  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 377  END SET_NOTIFICATION_STATUS;
15:40:05 378  
15:40:05 379  /******************************************************************************/
15:40:05 380  
15:40:05 381  PROCEDURE ADD_NOTIFICATION_FAILURE (
15:40:05 382  /*
15:40:05 383  Throws exceptions:
15:40:05 384  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 385  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 386  */
15:40:05 387  	in_notification_id IN NUMBER,
15:40:05 388  	in_error_message   IN VARCHAR2
15:40:05 389  ) AS
15:40:05 390  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION_FAILURE';
15:40:05 391  -- VARIABLES
15:40:05 392  temp_notification_id NUMBER;
15:40:05 393  var_create_date	   DATE := SYSDATE;
15:40:05 394  -- EXCEPTIONS
15:40:05 395  BAD_NOTIFICATION_ID	 EXCEPTION;
15:40:05 396  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
15:40:05 397  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
15:40:05 398  BEGIN
15:40:05 399  
15:40:05 400  	BEGIN
15:40:05 401  	  SELECT
15:40:05 402  	    NOTIFICATION.ID into temp_notification_id
15:40:05 403  	  FROM
15:40:05 404  	    NOTIFICATION
15:40:05 405  	  WHERE
15:40:05 406  	    NOTIFICATION.ID = in_notification_id;
15:40:05 407  	  EXCEPTION
15:40:05 408  	    WHEN NO_DATA_FOUND THEN
15:40:05 409  	      RAISE BAD_NOTIFICATION_ID;
15:40:05 410  	END;
15:40:05 411  
15:40:05 412  	INSERT INTO NOTIFICATION_FAILURE (
15:40:05 413  	  ID,
15:40:05 414  	  NOTIFICATION_ID,
15:40:05 415  	  ERROR_MESSAGE,
15:40:05 416  	  CREATE_DATE
15:40:05 417  	) VALUES (
15:40:05 418  	  NOTF_ID_SEQ.nextVal,
15:40:05 419  	  in_notification_id,
15:40:05 420  	  in_error_message,
15:40:05 421  	  sysdate
15:40:05 422  	);
15:40:05 423  
15:40:05 424  	--BEGIN
15:40:05 425  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V23.CREATE_NOTIF_FAILURE_HISTORY(
15:40:05 426  	--    in_error_message	       => in_error_message,
15:40:05 427  	--    in_notification_queue_id => in_notification_id,
15:40:05 428  	--    in_create_date	       => var_create_date
15:40:05 429  	--  );
15:40:05 430  	--  EXCEPTION
15:40:05 431  	--    WHEN OTHERS THEN
15:40:05 432  	--	EXCEPTION_MESSAGE := SQLERRM;
15:40:05 433  	--	RAISE CAN_NOT_CREATE_HISTORY;
15:40:05 434  	--END;
15:40:05 435  
15:40:05 436  EXCEPTION
15:40:05 437  WHEN BAD_NOTIFICATION_ID THEN
15:40:05 438  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 439  	  SPROC_NAME, 'No such notification');
15:40:05 440  WHEN CAN_NOT_CREATE_HISTORY THEN
15:40:05 441  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:40:05 442  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
15:40:05 443  WHEN OTHERS THEN
15:40:05 444  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 445  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 446  END ADD_NOTIFICATION_FAILURE;
15:40:05 447  
15:40:05 448  /******************************************************************************/
15:40:05 449  
15:40:05 450  PROCEDURE LOCK_PENDING_NOTIFICATION (
15:40:05 451  /*
15:40:05 452  Result: GLOBAL_STATUSES.TRUE if notification locked
15:40:05 453  GLOBA_STATUSES.FALSE - else
15:40:05 454  */
15:40:05 455  	in_notification_id IN NUMBER,
15:40:05 456  	out_lock_status    OUT NUMBER
15:40:05 457  ) AS
15:40:05 458  SPROC_NAME CONSTANT VARCHAR2(25) := 'LOCK_PENDING_NOTIFICATION';
15:40:05 459  -- VARIABLE
15:40:05 460  temp_notification_id NUMBER;
15:40:05 461  BEGIN
15:40:05 462  	SELECT
15:40:05 463  	  NOTIFICATION.ID into temp_notification_id
15:40:05 464  	FROM
15:40:05 465  	  NOTIFICATION
15:40:05 466  	WHERE
15:40:05 467  	  NOTIFICATION.ID = in_notification_id
15:40:05 468  	  AND (
15:40:05 469  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING
15:40:05 470  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V23.NOTIFICATION_FAILED
15:40:05 471  	  )
15:40:05 472  	FOR UPDATE;
15:40:05 473  
15:40:05 474  	out_lock_status := 1;
15:40:05 475  
15:40:05 476  EXCEPTION
15:40:05 477  WHEN NO_DATA_FOUND THEN
15:40:05 478  	out_lock_status := 0;
15:40:05 479  WHEN OTHERS THEN
15:40:05 480  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 481  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 482  END LOCK_PENDING_NOTIFICATION;
15:40:05 483  
15:40:05 484  /******************************************************************************/
15:40:05 485  
15:40:05 486  PROCEDURE GET_NOTIFICATION_DATA (
15:40:05 487  	in_notification_id IN NUMBER,
15:40:05 488  	out_result_set	   OUT SYS_REFCURSOR
15:40:05 489  ) AS
15:40:05 490  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_NOTIFICATION_DATA';
15:40:05 491  BEGIN
15:40:05 492  	OPEN out_result_set FOR
15:40:05 493  	SELECT
15:40:05 494  	  NOTIFICATION.ID,
15:40:05 495  	  NOTIFICATION.GROUP_ID,
15:40:05 496  	  NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
15:40:05 497  	  NOTIFICATION.NOTIFICATION_STATUS_ID,
15:40:05 498  	  NOTIFICATION.CREATE_DATE,
15:40:05 499  	  NOTIFICATION.UPDATE_DATE,
15:40:05 500  	  NOTIFICATION.NOTIFICATION_TYPE_ID,
15:40:05 501  	  NOTIFICATION_TYPE.VALUE as "TYPE_VALUE",
15:40:05 502  	  NOTIFICATION_TYPE.TEMPLATE_URL
15:40:05 503  	FROM
15:40:05 504  	  NOTIFICATION
15:40:05 505  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
15:40:05 506  	WHERE
15:40:05 507  	  NOTIFICATION.ID = in_notification_id;
15:40:05 508  
15:40:05 509  EXCEPTION
15:40:05 510  WHEN OTHERS THEN
15:40:05 511  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:40:05 512  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 513  END GET_NOTIFICATION_DATA;
15:40:05 514  
15:40:05 515  END PROCS_NOTIFICATION_V23;
15:40:05 516  .
15:40:05 SQL> /

Warning: Package Body created with compilation errors.

Elapsed: 00:00:00.06
15:40:05 SQL> 
15:40:05 SQL> prompt Compiling body for public_procs_billing.sql
Compiling body for public_procs_billing.sql
15:40:05 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V23" AS
15:40:05   2  
15:40:05   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:40:05   4  /*
15:40:05   5  Throws exceptions:
15:40:05   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05   8  */
15:40:05   9  	  in_offer_chain_id IN	 NUMBER,
15:40:05  10  	  out_result_set    OUT  SYS_REFCURSOR
15:40:05  11  ) AS
15:40:05  12  BEGIN
15:40:05  13  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_BY_ID (
15:40:05  14  	  in_offer_chain_id => in_offer_chain_id,
15:40:05  15  	  out_result_set => out_result_set
15:40:05  16  	);
15:40:05  17  END GET_OFFER_CHAIN_BY_ID;
15:40:05  18  
15:40:05  19  PROCEDURE GET_PENDING_INVOICES (
15:40:05  20  /*
15:40:05  21  Throws exceptions:
15:40:05  22  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05  23  */
15:40:05  24  	out_result_set	     OUT SYS_REFCURSOR,
15:40:05  25  	in_row_number	     IN NUMBER DEFAULT NULL
15:40:05  26  ) AS
15:40:05  27  BEGIN
15:40:05  28  	PROCS_INVOICE_V23.GET_PENDING_INVOICES(
15:40:05  29  	  out_result_set,
15:40:05  30  	  in_row_number
15:40:05  31  	);
15:40:05  32  END GET_PENDING_INVOICES;
15:40:05  33  
15:40:05  34  /********************************************************/
15:40:05  35  PROCEDURE GET_PENDING_REFUND_CHARGES (
15:40:05  36  /*
15:40:05  37  Throws exceptions:
15:40:05  38  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05  39  */
15:40:05  40  	out_result_set	    OUT SYS_REFCURSOR,
15:40:05  41  	in_row_number	    IN NUMBER DEFAULT NULL
15:40:05  42  ) AS
15:40:05  43  BEGIN
15:40:05  44  	PROCS_CHARGE_V23.GET_PENDING_REFUND_CHARGES(
15:40:05  45  	  out_result_set,
15:40:05  46  	  in_row_number
15:40:05  47  	);
15:40:05  48  END GET_PENDING_REFUND_CHARGES;
15:40:05  49  /********************************************************/
15:40:05  50  
15:40:05  51  PROCEDURE GET_UNPROCESSED_CHARGES (
15:40:05  52  /*
15:40:05  53  Throws exceptions:
15:40:05  54  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05  55  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05  56  */
15:40:05  57  	in_invoice_id  IN NUMBER,
15:40:05  58  	out_result_set OUT SYS_REFCURSOR
15:40:05  59  ) AS
15:40:05  60  BEGIN
15:40:05  61  	PROCS_CHARGE_V23.GET_UNPROCESSED_CHARGES(
15:40:05  62  	  in_invoice_id,
15:40:05  63  	  out_result_set
15:40:05  64  	);
15:40:05  65  END GET_UNPROCESSED_CHARGES;
15:40:05  66  
15:40:05  67  /********************************************************/
15:40:05  68  
15:40:05  69  PROCEDURE GET_PROCESSED_CHARGES (
15:40:05  70  /*
15:40:05  71  Throws exceptions:
15:40:05  72  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05  73  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05  74  */
15:40:05  75  	in_invoice_id  IN NUMBER,
15:40:05  76  	out_result_set OUT SYS_REFCURSOR
15:40:05  77  ) AS
15:40:05  78  BEGIN
15:40:05  79  	PROCS_CHARGE_V23.GET_PROCESSED_CHARGES(
15:40:05  80  	  in_invoice_id,
15:40:05  81  	  out_result_set
15:40:05  82  	);
15:40:05  83  END GET_PROCESSED_CHARGES;
15:40:05  84  
15:40:05  85  /********************************************************/
15:40:05  86  
15:40:05  87  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
15:40:05  88  /*
15:40:05  89  Throws exceptions:
15:40:05  90  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05  91  */
15:40:05  92  	in_transaction_id	      IN NUMBER,
15:40:05  93  	in_transaction_attempt_status IN NUMBER,
15:40:05  94  	out_result_set		      OUT SYS_REFCURSOR
15:40:05  95  ) AS
15:40:05  96  BEGIN
15:40:05  97  	PROCS_TRANSACTION_V23.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
15:40:05  98  	  in_transaction_id,
15:40:05  99  	  in_transaction_attempt_status,
15:40:05 100  	  out_result_set
15:40:05 101  	);
15:40:05 102  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
15:40:05 103  
15:40:05 104  /********************************************************/
15:40:05 105  
15:40:05 106  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
15:40:05 107  /*
15:40:05 108  Throws exceptions:
15:40:05 109  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 110  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 111  */
15:40:05 112  	in_transaction_attempt_id     IN NUMBER,
15:40:05 113  	in_transaction_attempt_status IN NUMBER
15:40:05 114  ) AS
15:40:05 115  BEGIN
15:40:05 116  	PROCS_TRANSACTION_V23.UPDATE_TRNSCTN_ATTEMPT_STATUS(
15:40:05 117  	   in_transaction_attempt_id,
15:40:05 118  	   in_transaction_attempt_status
15:40:05 119  	);
15:40:05 120  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
15:40:05 121  
15:40:05 122  /********************************************************/
15:40:05 123  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
15:40:05 124  /*
15:40:05 125  Throws exceptions:
15:40:05 126  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 127  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 128  */
15:40:05 129  	in_invoice_id	IN  NUMBER,
15:40:05 130  	out_result_set OUT SYS_REFCURSOR
15:40:05 131  ) AS
15:40:05 132  BEGIN
15:40:05 133  	PROCS_TRANSACTION_V23.GET_CLOSED_REFUNDS_BY_INVOICE(
15:40:05 134  	   in_invoice_id,
15:40:05 135  	   out_result_set
15:40:05 136  	);
15:40:05 137  END GET_CLOSED_REFUNDS_BY_INVOICE;
15:40:05 138  
15:40:05 139  /********************************************************/
15:40:05 140  
15:40:05 141  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
15:40:05 142  /*
15:40:05 143  Throws exceptions:
15:40:05 144  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 145  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 146  */
15:40:05 147  	in_transaction_attempt_id IN NUMBER,
15:40:05 148  	in_updated_by		  IN VARCHAR2
15:40:05 149  ) AS
15:40:05 150  BEGIN
15:40:05 151  	PROCS_TRANSACTION_V23.UPDATE_TRNSCTN_ATTEMPT_TIME(
15:40:05 152  	  in_transaction_attempt_id,
15:40:05 153  	  in_updated_by
15:40:05 154  	);
15:40:05 155  END UPDATE_TRNSCTN_ATTEMPT_TIME;
15:40:05 156  
15:40:05 157  /********************************************************/
15:40:05 158  
15:40:05 159  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
15:40:05 160  /*
15:40:05 161  Throws exceptions:
15:40:05 162  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 163  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 164  */
15:40:05 165  	in_transaction_id	   IN NUMBER,
15:40:05 166  	in_trans_attempt_status    IN NUMBER,
15:40:05 167  	in_external_status_code    IN VARCHAR2,
15:40:05 168  	in_external_status_message IN VARCHAR2,
15:40:05 169  	in_created_by		   IN VARCHAR2,
15:40:05 170  	in_ext_transaction_id	   IN VARCHAR2,
15:40:05 171  	out_transaction_attempt_id OUT NUMBER
15:40:05 172  ) AS
15:40:05 173  BEGIN
15:40:05 174  	PROCS_TRANSACTION_V23.CREATE_TRANSACTION_ATTEMPT(
15:40:05 175  	  in_transaction_id,
15:40:05 176  	  in_trans_attempt_status,
15:40:05 177  	  in_external_status_code,
15:40:05 178  	  in_external_status_message,
15:40:05 179  	  in_created_by,
15:40:05 180  	  in_ext_transaction_id,
15:40:05 181  	  out_transaction_attempt_id
15:40:05 182  	);
15:40:05 183  END CREATE_TRANSACTION_ATTEMPT;
15:40:05 184  
15:40:05 185  /********************************************************/
15:40:05 186  
15:40:05 187  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
15:40:05 188  /*
15:40:05 189  Throws exceptions:
15:40:05 190  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 191  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 192  */
15:40:05 193  	in_transaction_attempt_id IN NUMBER,
15:40:05 194  	in_ext_status_code	  IN VARCHAR2,
15:40:05 195  	in_ext_status_message	  IN VARCHAR2,
15:40:05 196  	in_ext_transaction_id	  IN VARCHAR2
15:40:05 197  ) AS
15:40:05 198  BEGIN
15:40:05 199  	PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_ATTEMPT_INF(
15:40:05 200  	  in_transaction_attempt_id,
15:40:05 201  	  in_ext_status_code,
15:40:05 202  	  in_ext_status_message,
15:40:05 203  	  in_ext_transaction_id
15:40:05 204  	);
15:40:05 205  END UPDATE_TRANSACTION_ATTEMPT_INF;
15:40:05 206  
15:40:05 207  /********************************************************/
15:40:05 208  
15:40:05 209  PROCEDURE UPDATE_TRANSACTION_STATUS (
15:40:05 210  /*
15:40:05 211  Throws exceptions:
15:40:05 212  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 213  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 214  */
15:40:05 215  	in_transaction_id	 IN NUMBER,
15:40:05 216  	in_updated_by		 IN VARCHAR2,
15:40:05 217  	in_transaction_status_id IN NUMBER
15:40:05 218  ) AS
15:40:05 219  BEGIN
15:40:05 220  	PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_STATUS(
15:40:05 221  	  in_transaction_id,
15:40:05 222  	  in_updated_by,
15:40:05 223  	  in_transaction_status_id
15:40:05 224  	);
15:40:05 225  END UPDATE_TRANSACTION_STATUS;
15:40:05 226  
15:40:05 227  /********************************************************/
15:40:05 228  
15:40:05 229  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
15:40:05 230  /*
15:40:05 231  Throws exceptions:
15:40:05 232  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 233  */
15:40:05 234  	in_transaction_id IN  NUMBER,
15:40:05 235  	out_attempts_num  OUT NUMBER
15:40:05 236  ) AS
15:40:05 237  BEGIN
15:40:05 238  	PROCS_TRANSACTION_V23.GET_FAILED_ATTEMPTS_NUMBER(
15:40:05 239  	  in_transaction_id,
15:40:05 240  	  out_attempts_num
15:40:05 241  	);
15:40:05 242  END GET_FAILED_ATTEMPTS_NUMBER;
15:40:05 243  
15:40:05 244  /********************************************************/
15:40:05 245  
15:40:05 246  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
15:40:05 247  /*
15:40:05 248  Throws exceptions:
15:40:05 249  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 250  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 251  */
15:40:05 252  	in_transaction_id IN  NUMBER,
15:40:05 253  	out_is_successfull  OUT NUMBER
15:40:05 254  ) AS
15:40:05 255  BEGIN
15:40:05 256  	PROCS_TRANSACTION_V23.IS_TRANSACTION_SUCCESSFULL(
15:40:05 257  	  in_transaction_id,
15:40:05 258  	  out_is_successfull
15:40:05 259  	);
15:40:05 260  END IS_TRANSACTION_SUCCESSFULL;
15:40:05 261  /********************************************************/
15:40:05 262  
15:40:05 263  PROCEDURE UPDATE_INVOICE_STATUS (
15:40:05 264  /*
15:40:05 265  Throws exceptions:
15:40:05 266  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 267  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 268  */
15:40:05 269  	in_invoice_id		       IN NUMBER,
15:40:05 270  	in_invoice_status_id	       IN NUMBER,
15:40:05 271  	in_updated_by		       IN VARCHAR2
15:40:05 272  ) AS
15:40:05 273  BEGIN
15:40:05 274  	PROCS_INVOICE_V23.UPDATE_INVOICE_STATUS(
15:40:05 275  	  in_invoice_id,
15:40:05 276  	  in_invoice_status_id,
15:40:05 277  	  in_updated_by
15:40:05 278  	);
15:40:05 279  END UPDATE_INVOICE_STATUS;
15:40:05 280  
15:40:05 281  /********************************************************/
15:40:05 282  
15:40:05 283  PROCEDURE SUSPEND_SUBSCRIPTION(
15:40:05 284  /*
15:40:05 285  Throws exceptions:
15:40:05 286  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 287  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:05 288  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 289  */
15:40:05 290  	  in_subs_id	IN NUMBER ,
15:40:05 291  	  in_updated_by IN VARCHAR2
15:40:05 292  ) AS
15:40:05 293  BEGIN
15:40:05 294  	PROCS_SUBSCRIPTION_V23.SUSPEND_SUBSCRIPTION(
15:40:05 295  	  in_subs_id,
15:40:05 296  	  in_updated_by
15:40:05 297  	);
15:40:05 298  END SUSPEND_SUBSCRIPTION;
15:40:05 299  
15:40:05 300  /********************************************************/
15:40:05 301  
15:40:05 302  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:40:05 303  /*
15:40:05 304  Throws exceptions:
15:40:05 305  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 306  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 307  */
15:40:05 308  	in_credit_card_id IN  NUMBER,
15:40:05 309  	out_result_set	  OUT SYS_REFCURSOR
15:40:05 310  ) AS
15:40:05 311  BEGIN
15:40:05 312  	PROCS_FIN_INSTRUMENTS_V23.GET_CREDIT_CARD_BY_ID(
15:40:05 313  	  in_credit_card_id,
15:40:05 314  	  out_result_set
15:40:05 315  	);
15:40:05 316  END GET_CREDIT_CARD_BY_ID;
15:40:05 317  
15:40:05 318  /*********************************************************/
15:40:05 319  
15:40:05 320  PROCEDURE GET_TRANSACTION_AMOUNT (
15:40:05 321  /*
15:40:05 322  Throws exceptions:
15:40:05 323  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 324  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 325  */
15:40:05 326  	in_transaction_id      IN  NUMBER,
15:40:05 327  	out_transaction_amount OUT NUMBER
15:40:05 328  ) AS
15:40:05 329  BEGIN
15:40:05 330  	PROCS_TRANSACTION_V23.GET_TRANSACTION_AMOUNT(
15:40:05 331  	  in_transaction_id,
15:40:05 332  	  out_transaction_amount
15:40:05 333  	);
15:40:05 334  END GET_TRANSACTION_AMOUNT;
15:40:05 335  
15:40:05 336  /***********************************************************/
15:40:05 337  
15:40:05 338  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
15:40:05 339  /*
15:40:05 340  Throws exceptions:
15:40:05 341  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 342  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 343  */
15:40:05 344  	in_invoice_id  IN  NUMBER,
15:40:05 345  	out_account_id OUT NUMBER
15:40:05 346  ) AS
15:40:05 347  BEGIN
15:40:05 348  	PROCS_INVOICE_V23.GET_ACCOUNT_BY_INVOICE_ID(
15:40:05 349  	  in_invoice_id,
15:40:05 350  	  out_account_id
15:40:05 351  	);
15:40:05 352  END GET_ACCOUNT_BY_INVOICE_ID;
15:40:05 353  
15:40:05 354  /************************************************************/
15:40:05 355  
15:40:05 356  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
15:40:05 357  /*
15:40:05 358  Throws exceptions:
15:40:05 359  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 360  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 361  */
15:40:05 362  	in_gift_certificate_id IN NUMBER,
15:40:05 363  	out_result_set	       OUT SYS_REFCURSOR
15:40:05 364  ) AS
15:40:05 365  BEGIN
15:40:05 366  	PROCS_FIN_INSTRUMENTS_V23.GET_GIFT_CERTIFICATE_BY_ID (
15:40:05 367  	  in_gift_certificate_id,
15:40:05 368  	  out_result_set
15:40:05 369  	);
15:40:05 370  END GET_GIFT_CERTIFICATE_BY_ID;
15:40:05 371  
15:40:05 372  /**************************************************************/
15:40:05 373  
15:40:05 374  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
15:40:05 375  /*
15:40:05 376  Throws exceptions:
15:40:05 377  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 378  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 379  */
15:40:05 380  	in_charge_id	    IN NUMBER,
15:40:05 381  	out_subscription_id OUT NUMBER
15:40:05 382  ) AS
15:40:05 383  BEGIN
15:40:05 384  	PROCS_CHARGE_V23.GET_SUBSCR_ID_BY_CHARGE_ID(
15:40:05 385  	  in_charge_id,
15:40:05 386  	  out_subscription_id
15:40:05 387  	);
15:40:05 388  END GET_SUBSCR_ID_BY_CHARGE_ID;
15:40:05 389  
15:40:05 390  /**************************************************************/
15:40:05 391  
15:40:05 392  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
15:40:05 393  /*
15:40:05 394  Throws exceptions:
15:40:05 395  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 396  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 397  */
15:40:05 398  	in_gift_certificate_id IN NUMBER,
15:40:05 399  	in_charge_id	       IN NUMBER,
15:40:05 400  	out_result	       OUT NUMBER
15:40:05 401  ) AS
15:40:05 402  BEGIN
15:40:05 403  	PROCS_FIN_INSTRUMENTS_V23.IS_GCERT_FOR_PROPER_OFFER (
15:40:05 404  	  in_gift_certificate_id,
15:40:05 405  	  in_charge_id,
15:40:05 406  	  out_result
15:40:05 407  	);
15:40:05 408  END IS_GCERT_FOR_PROPER_OFFER;
15:40:05 409  
15:40:05 410  /**************************************************************/
15:40:05 411  
15:40:05 412  PROCEDURE GET_SUBSCRIPTION_INFO (
15:40:05 413  /*
15:40:05 414  Throws exceptions:
15:40:05 415  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 416  */
15:40:05 417  	  in_subscription_id IN  NUMBER,
15:40:05 418  	  out_result_set      OUT SYS_REFCURSOR
15:40:05 419  ) AS
15:40:05 420  BEGIN
15:40:05 421  	PROCS_SUBSCRIPTION_V23.GET_SUBSCRIPTION_INFO (
15:40:05 422  	  in_subscription_id,
15:40:05 423  	  out_result_set
15:40:05 424  	);
15:40:05 425  END GET_SUBSCRIPTION_INFO;
15:40:05 426  
15:40:05 427  /****************************************************************/
15:40:05 428  
15:40:05 429  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:40:05 430  /*
15:40:05 431  Throws exceptions:
15:40:05 432  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 433  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 434  */
15:40:05 435  	in_invoice_id IN  NUMBER,
15:40:05 436  	out_amount    OUT NUMBER
15:40:05 437  ) AS
15:40:05 438  BEGIN
15:40:05 439  	PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT (
15:40:05 440  	  in_invoice_id,
15:40:05 441  	  out_amount
15:40:05 442  	);
15:40:05 443  END CALCULATE_INVOICE_AMOUNT;
15:40:05 444  
15:40:05 445  /****************************************************************/
15:40:05 446  
15:40:05 447  PROCEDURE GET_TRANSACTION_BY_ID (
15:40:05 448  /*
15:40:05 449  Throws exceptions:
15:40:05 450  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 451  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 452  */
15:40:05 453  	in_transaction_id IN NUMBER,
15:40:05 454  	out_result_set	  OUT SYS_REFCURSOR
15:40:05 455  ) AS
15:40:05 456  BEGIN
15:40:05 457  	PROCS_TRANSACTION_V23.GET_TRANSACTION_BY_ID(
15:40:05 458  	  in_transaction_id,
15:40:05 459  	  out_result_set
15:40:05 460  	);
15:40:05 461  END GET_TRANSACTION_BY_ID;
15:40:05 462  
15:40:05 463  /****************************************************************/
15:40:05 464  
15:40:05 465  PROCEDURE UPDATE_CHARGE_STATUS (
15:40:05 466  /*
15:40:05 467  Throws exceptions:
15:40:05 468  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 469  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 470  */
15:40:05 471  	in_charge_id	    IN CHARGE.ID%TYPE,
15:40:05 472  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
15:40:05 473  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
15:40:05 474  ) AS
15:40:05 475  BEGIN
15:40:05 476  	PROCS_CHARGE_V23.UPDATE_CHARGE_STATUS(
15:40:05 477  	  in_charge_id,
15:40:05 478  	  in_charge_status_id,
15:40:05 479  	  in_updated_by
15:40:05 480  	);
15:40:05 481  END UPDATE_CHARGE_STATUS;
15:40:05 482  
15:40:05 483  /****************************************************************/
15:40:05 484  
15:40:05 485  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:40:05 486  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:05 487  	out_result_set OUT SYS_REFCURSOR
15:40:05 488  ) AS
15:40:05 489  BEGIN
15:40:05 490  	PROCS_FIN_INSTRUMENTS_V23.GET_GC_BY_PURCH_INVOICE_ID(
15:40:05 491  	  in_invoice_id,
15:40:05 492  	  out_result_set
15:40:05 493  	);
15:40:05 494  END GET_GC_BY_PURCH_INVOICE_ID;
15:40:05 495  
15:40:05 496  /****************************************************************/
15:40:05 497  
15:40:05 498  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
15:40:05 499  /*
15:40:05 500  Throws exceptions:
15:40:05 501  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 502  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
15:40:05 503  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 504  */
15:40:05 505  	in_transaction_id IN TRANSACTION.ID%TYPE,
15:40:05 506  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
15:40:05 507  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
15:40:05 508  ) AS
15:40:05 509  BEGIN
15:40:05 510  	PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_ORDER_ID(
15:40:05 511  	  in_transaction_id,
15:40:05 512  	  in_order_id,
15:40:05 513  	  in_updated_by
15:40:05 514  	);
15:40:05 515  END UPDATE_TRANSACTION_ORDER_ID;
15:40:05 516  
15:40:05 517  /****************************************************************/
15:40:05 518  
15:40:05 519  PROCEDURE GET_ACTIVE_INVOICES_IDS (
15:40:05 520  /*
15:40:05 521  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 522  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 523  */
15:40:05 524  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
15:40:05 525  	in_subscription_id IN NUMBER,
15:40:05 526  	out_result_set	   OUT SYS_REFCURSOR
15:40:05 527  ) AS
15:40:05 528  BEGIN
15:40:05 529  	PROCS_SUBSCRIPTION_V23.GET_ACTIVE_INVOICES_IDS(
15:40:05 530  	  in_subscription_id,
15:40:05 531  	  out_result_set
15:40:05 532  	);
15:40:05 533  END GET_ACTIVE_INVOICES_IDS;
15:40:05 534  
15:40:05 535  /****************************************************************/
15:40:05 536  
15:40:05 537  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
15:40:05 538  /*
15:40:05 539  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 540  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 541  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:05 542  */
15:40:05 543  --  in_invoice_id        IN INVOICE.ID%TYPE,
15:40:05 544  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
15:40:05 545  -- norlov: in_refundable	      IN refund enabled
15:40:05 546  	in_invoice_id	     IN NUMBER,
15:40:05 547  	in_updated_by	     IN VARCHAR2,
15:40:05 548  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
15:40:05 549  --  in_cancellation_date IN DATE DEFAULT current_timestamp
15:40:05 550  ) AS
15:40:05 551  BEGIN
15:40:05 552  	PROCS_SUBSCRIPTION_V23.CANCEL_SUBSCRIPTION_INVOICE(
15:40:05 553  	  in_invoice_id,
15:40:05 554  	  in_updated_by,
15:40:05 555  	  in_refundable
15:40:05 556  	);
15:40:05 557  END CANCEL_SUBSCRIPTION_INVOICE;
15:40:05 558  
15:40:05 559  /****************************************************************/
15:40:05 560  
15:40:05 561  PROCEDURE FINALIZE_CANCELATION (
15:40:05 562  /*
15:40:05 563  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 564  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 565  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:05 566  */
15:40:05 567  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
15:40:05 568  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
15:40:05 569  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
15:40:05 570  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
15:40:05 571  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
15:40:05 572  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
15:40:05 573  	in_subscription_id    IN NUMBER,
15:40:05 574  	in_cancelation_reason IN VARCHAR2,
15:40:05 575  	in_cancelation_date   IN DATE,
15:40:05 576  	in_note 	      IN VARCHAR2,
15:40:05 577  	in_agent_id	      IN NUMBER,
15:40:05 578  	in_updated_by	      IN VARCHAR2
15:40:05 579  ) AS
15:40:05 580  BEGIN
15:40:05 581  	PROCS_SUBSCRIPTION_V23.FINALIZE_CANCELATION(
15:40:05 582  	  in_subscription_id,
15:40:05 583  	  in_cancelation_reason,
15:40:05 584  	  in_cancelation_date,
15:40:05 585  	  in_note,
15:40:05 586  	  in_agent_id,
15:40:05 587  	  in_updated_by
15:40:05 588  	);
15:40:05 589  END FINALIZE_CANCELATION;
15:40:05 590  
15:40:05 591  /****************************************************************/
15:40:05 592  
15:40:05 593  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
15:40:05 594  /*
15:40:05 595  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 596  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 597  */
15:40:05 598  	in_subscription_id IN NUMBER,
15:40:05 599  	out_result_set	   OUT SYS_REFCURSOR
15:40:05 600  ) AS
15:40:05 601  BEGIN
15:40:05 602  	PROCS_SUBSCRIPTION_V23.GET_SUBSCR_PROD_OFFERRINGS(
15:40:05 603  	  in_subscription_id,
15:40:05 604  	  out_result_set
15:40:05 605  	);
15:40:05 606  END GET_SUBSCR_PROD_OFFERRINGS;
15:40:05 607  
15:40:05 608  /****************************************************************/
15:40:05 609  
15:40:05 610  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:40:05 611  /*
15:40:05 612  Throws exceptions (codes):
15:40:05 613  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 614  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 615  */
15:40:05 616  	in_offer_chain_id IN NUMBER,
15:40:05 617  	in_meta_data_name IN VARCHAR2,
15:40:05 618  	out_result_set	  OUT SYS_REFCURSOR
15:40:05 619  )AS
15:40:05 620  BEGIN
15:40:05 621  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_META_DATA(
15:40:05 622  	  in_offer_chain_id,
15:40:05 623  	  in_meta_data_name,
15:40:05 624  	  out_result_set
15:40:05 625  	);
15:40:05 626  END GET_OFFER_CHAIN_META_DATA;
15:40:05 627  
15:40:05 628  /****************************************************************/
15:40:05 629  
15:40:05 630  PROCEDURE READ_ACCOUNT (
15:40:05 631  	in_account_id  IN ACCOUNT.ID%TYPE,
15:40:05 632  	out_result_set OUT SYS_REFCURSOR
15:40:05 633  )AS
15:40:05 634  BEGIN
15:40:05 635  	PROCS_ACCOUNT_CRU_V23.READ_ACCOUNT(
15:40:05 636  	  in_account_id,
15:40:05 637  	  out_result_set
15:40:05 638  	);
15:40:05 639  END READ_ACCOUNT;
15:40:05 640  
15:40:05 641  /****************************************************************/
15:40:05 642  
15:40:05 643  PROCEDURE GET_COLLECTED_CHARGES (
15:40:05 644  /*
15:40:05 645  Throws exceptions:
15:40:05 646  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:05 647  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 648  */
15:40:05 649  	in_invoice_id  IN NUMBER,
15:40:05 650  	out_result_set OUT SYS_REFCURSOR
15:40:05 651  ) AS
15:40:05 652  BEGIN
15:40:05 653  	PROCS_CHARGE_V23.GET_COLLECTED_CHARGES(
15:40:05 654  	  in_invoice_id,
15:40:05 655  	  out_result_set
15:40:05 656  	);
15:40:05 657  END GET_COLLECTED_CHARGES;
15:40:05 658  
15:40:05 659  /****************************************************************/
15:40:05 660  
15:40:05 661  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
15:40:05 662  /*
15:40:05 663  Throws exceptions:
15:40:05 664  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 665  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 666  */
15:40:05 667  	in_invoice_id IN NUMBER,
15:40:05 668  	out_group_ids OUT SYS_REFCURSOR
15:40:05 669  ) AS
15:40:05 670  BEGIN
15:40:05 671  
15:40:05 672  	PROCS_ACCOUNT_V23.GET_GROUPS_ID_BY_INVOICE_ID(
15:40:05 673  	  in_invoice_id,
15:40:05 674  	  out_group_ids
15:40:05 675  	);
15:40:05 676  
15:40:05 677  END GET_GROUPS_ID_BY_INVOICE_ID;
15:40:05 678  
15:40:05 679  /****************************************************************/
15:40:05 680  
15:40:05 681  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:40:05 682  /*
15:40:05 683  Throws exceptions:
15:40:05 684  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:05 685  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:05 686  */
15:40:05 687  	in_group_id IN NUMBER,
15:40:05 688  	out_account_id	OUT NUMBER
15:40:05 689  ) AS
15:40:05 690  BEGIN
15:40:05 691  
15:40:05 692  	PROCS_ACCOUNT_V23.GET_ACCOUNT_ID_BY_GROUP_ID(
15:40:05 693  	  in_group_id,
15:40:05 694  	  out_account_id
15:40:05 695  	);
15:40:05 696  
15:40:05 697  END GET_ACCOUNT_ID_BY_GROUP_ID;
15:40:05 698  
15:40:05 699  /****************************************************************/
15:40:05 700  
15:40:05 701  PROCEDURE LOCK_ACCOUNT (
15:40:05 702  	in_group_id    IN NUMBER,
15:40:05 703  	in_lock_key    IN VARCHAR2,
15:40:05 704  	in_seconds_num IN NUMBER,
15:40:05 705  	in_created_by  IN VARCHAR2,
15:40:05 706  	in_reason      IN VARCHAR2
15:40:05 707  ) AS
15:40:05 708  BEGIN
15:40:05 709  	PROCS_LOCKING_V23.LOCK_ACCOUNT(
15:40:05 710  	  in_group_id,
15:40:05 711  	  in_lock_key,
15:40:05 712  	  in_seconds_num,
15:40:05 713  	  in_created_by,
15:40:05 714  	  in_reason
15:40:05 715  	);
15:40:05 716  END LOCK_ACCOUNT;
15:40:05 717  
15:40:05 718  /****************************************************************/
15:40:05 719  
15:40:05 720  PROCEDURE RELEASE_LOCK (
15:40:05 721  	in_group_id IN NUMBER,
15:40:06 722  	in_lock_key IN VARCHAR2
15:40:06 723  ) AS
15:40:06 724  BEGIN
15:40:06 725  	PROCS_LOCKING_V23.RELEASE_LOCK(
15:40:06 726  	  in_group_id,
15:40:06 727  	  in_lock_key
15:40:06 728  	);
15:40:06 729  END RELEASE_LOCK;
15:40:06 730  
15:40:06 731  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
15:40:06 732  	in_invoice_id		    IN NUMBER,
15:40:06 733  	out_order_id		    OUT VARCHAR2,
15:40:06 734  	out_external_transaction_id OUT VARCHAR2
15:40:06 735  ) AS
15:40:06 736  BEGIN
15:40:06 737  	PROCS_INVOICE_V23.GET_PAYMENT_INFO_BY_INVOICE_ID(
15:40:06 738  	  in_invoice_id,
15:40:06 739  	  out_order_id,
15:40:06 740  	  out_external_transaction_id
15:40:06 741  	);
15:40:06 742  END GET_PAYMENT_INFO_BY_INVOICE_ID;
15:40:06 743  
15:40:06 744  /******************************************************************************/
15:40:06 745  
15:40:06 746  PROCEDURE GET_PAYPAL_BY_ID (
15:40:06 747  	in_paypal_id   IN  NUMBER,
15:40:06 748  	out_result_set OUT SYS_REFCURSOR
15:40:06 749  ) AS
15:40:06 750  BEGIN
15:40:06 751  	PROCS_FIN_INSTRUMENTS_V23.GET_PAYPAL_BY_ID(
15:40:06 752  	  in_paypal_id,
15:40:06 753  	  out_result_set
15:40:06 754  	);
15:40:06 755  END GET_PAYPAL_BY_ID;
15:40:06 756  
15:40:06 757  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
15:40:06 758  /*
15:40:06 759  Throws exceptions:
15:40:06 760  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 761  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 762  */
15:40:06 763  	in_charge_id   in  number,
15:40:06 764  	out_attempt_count out number
15:40:06 765  ) as
15:40:06 766  begin
15:40:06 767  	PROCS_TRANSACTION_V23.GET_NEXT_ATTEMPT_NUMBER(
15:40:06 768  	  in_charge_id,
15:40:06 769  	  out_attempt_count
15:40:06 770  	);
15:40:06 771  end GET_NEXT_ATTEMPT_NUMBER;
15:40:06 772  
15:40:06 773  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:40:06 774  	in_offer_chain_id	 IN NUMBER,
15:40:06 775  	in_action_name		 IN VARCHAR2,
15:40:06 776  	out_notification_type_id out number
15:40:06 777  ) as
15:40:06 778  begin
15:40:06 779  	PROCS_OFFER_CHAIN_V23.GET_NOTIFICATION_TYPE_ID(
15:40:06 780  	  in_offer_chain_id,
15:40:06 781  	  in_action_name,
15:40:06 782  	  out_notification_type_id
15:40:06 783  	);
15:40:06 784  end GET_NOTIFICATION_TYPE_ID;
15:40:06 785  
15:40:06 786  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
15:40:06 787  /*
15:40:06 788  Throws exceptions:
15:40:06 789  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 790  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 791  */
15:40:06 792  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:06 793  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
15:40:06 794  ) AS
15:40:06 795  BEGIN
15:40:06 796  PROCS_FIN_INSTRUMENTS_V23.GET_GC_ID_BY_PURCH_INVOICE_ID(
15:40:06 797  in_invoice_id,
15:40:06 798  out_gift_certificate_id
15:40:06 799  );
15:40:06 800  END GET_GC_ID_BY_PURCH_INVOICE_ID;
15:40:06 801  
15:40:06 802  /****************************************************************************/
15:40:06 803  
15:40:06 804  PROCEDURE SHOULD_MOVE_TO_GRACE(
15:40:06 805  	in_invoice_id  IN INVOICE.ID%TYPE,
15:40:06 806  	out_result     OUT NUMBER
15:40:06 807  ) AS
15:40:06 808  BEGIN
15:40:06 809  	-- if the invoice preceding the given invoice has no transaction attempts, then
15:40:06 810  	-- it is not billed out of Sartre. if so, then the associated subscription
15:40:06 811  	-- should be canceled after a final failed billing attempt--not moved to grace.
15:40:06 812  	SELECT DECODE(COUNT(1), 0, 0, 1) INTO out_result
15:40:06 813  	FROM CHARGE c
15:40:06 814  	INNER JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
15:40:06 815  	INNER JOIN TRANSACTION_ATTEMPT ta ON ta.TRANSACTION_ID = t.ID
15:40:06 816  	WHERE c.INVOICE_ID = (
15:40:06 817  	  -- select previous invoice_id, or -1 if there is none
15:40:06 818  	  SELECT PREV_INVOICE_ID FROM (
15:40:06 819  	    SELECT i.ID, LAG(i.ID, 1, -1) OVER (ORDER BY i.CREATE_DATE) AS PREV_INVOICE_ID
15:40:06 820  	    FROM INVOICE i
15:40:06 821  	    INNER JOIN LICENSE l ON i.ID = l.INVOICE_ID
15:40:06 822  	    WHERE l.SUBSCRIPTION_ID = (
15:40:06 823  	      SELECT SUBSCRIPTION_ID FROM LICENSE WHERE INVOICE_ID = in_invoice_id
15:40:06 824  	    )
15:40:06 825  	  ) WHERE ID = in_invoice_id
15:40:06 826  	);
15:40:06 827  END SHOULD_MOVE_TO_GRACE;
15:40:06 828  
15:40:06 829  /****************************************************************************/
15:40:06 830  
15:40:06 831  PROCEDURE MOVE_TO_GRACE(
15:40:06 832  	in_invoice_id		      IN INVOICE.ID%TYPE,
15:40:06 833  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
15:40:06 834  	in_grace_period_length_hours  IN NUMBER
15:40:06 835  ) AS
15:40:06 836  BEGIN
15:40:06 837  	PROCS_SUBSCRIPTION_V23.START_GRACE_BY_INVOICE_ID(
15:40:06 838  	  in_invoice_id        => in_invoice_id,
15:40:06 839  	  in_updater	       => in_updated_by,
15:40:06 840  	  in_duration_in_hours => in_grace_period_length_hours
15:40:06 841  	);
15:40:06 842  END MOVE_TO_GRACE;
15:40:06 843  
15:40:06 844  /****************************************************************************/
15:40:06 845  
15:40:06 846  PROCEDURE MOVE_OUT_OF_GRACE(
15:40:06 847  	in_invoice_id	IN INVOICE.ID%TYPE,
15:40:06 848  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
15:40:06 849  ) AS
15:40:06 850  BEGIN
15:40:06 851  	PROCS_SUBSCRIPTION_V23.STOP_GRACE_BY_INVOICE_ID(
15:40:06 852  	  in_invoice_id => in_invoice_id,
15:40:06 853  	  in_updater	=> in_updated_by
15:40:06 854  	);
15:40:06 855  END MOVE_OUT_OF_GRACE;
15:40:06 856  
15:40:06 857  END PUBLIC_PROCS_BILLING_V23;
15:40:06 858  .
15:40:06 SQL> /

Package body created.

Elapsed: 00:00:00.07
15:40:06 SQL> 
15:40:06 SQL> prompt Compiling body for public_procs_notification.sql
Compiling body for public_procs_notification.sql
15:40:06 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V23" AS
15:40:06   2  
15:40:06   3  PROCEDURE LOCK_ACCOUNT (
15:40:06   4  	in_group_id    IN NUMBER,
15:40:06   5  	in_lock_key    IN VARCHAR2,
15:40:06   6  	in_seconds_num IN NUMBER,
15:40:06   7  	in_created_by  IN VARCHAR2,
15:40:06   8  	in_reason      IN VARCHAR2
15:40:06   9  ) AS
15:40:06  10  BEGIN
15:40:06  11  	PROCS_LOCKING_V23.LOCK_ACCOUNT(
15:40:06  12  	  in_group_id,
15:40:06  13  	  in_lock_key,
15:40:06  14  	  in_seconds_num,
15:40:06  15  	  in_created_by,
15:40:06  16  	  in_reason
15:40:06  17  	);
15:40:06  18  END LOCK_ACCOUNT;
15:40:06  19  
15:40:06  20  /******************************************************************************/
15:40:06  21  
15:40:06  22  PROCEDURE RELEASE_LOCK (
15:40:06  23  	in_group_id IN NUMBER,
15:40:06  24  	in_lock_key IN VARCHAR2
15:40:06  25  ) AS
15:40:06  26  BEGIN
15:40:06  27  	PROCS_LOCKING_V23.RELEASE_LOCK(
15:40:06  28  	  in_group_id,
15:40:06  29  	  in_lock_key
15:40:06  30  	);
15:40:06  31  END RELEASE_LOCK;
15:40:06  32  
15:40:06  33  END PUBLIC_PROCS_NOTIFICATION_V23;
15:40:06  34  .
15:40:06 SQL> /

Package body created.

Elapsed: 00:00:00.02
15:40:06 SQL> 
15:40:06 SQL> prompt Compiling body for public_procs_renewal.sql
Compiling body for public_procs_renewal.sql
15:40:06 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V23" AS
15:40:06   2  
15:40:06   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
15:40:06   4  	out_result_set OUT SYS_REFCURSOR
15:40:06   5  ) AS
15:40:06   6  BEGIN
15:40:06   7  	PROCS_GROUP_ACCOUNT_V23.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
15:40:06   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
15:40:06   9  
15:40:06  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
15:40:06  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
15:40:06  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
15:40:06  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
15:40:06  14  ) AS
15:40:06  15  BEGIN
15:40:06  16  	PROCS_GROUP_ACCOUNT_V23.UPDATE_SS_NEED_ENTITLEMENTS(
15:40:06  17  	  in_sub_share_id => in_sub_share_id,
15:40:06  18  	  in_need_entitlements => in_need_entitlements,
15:40:06  19  	  in_updater => in_updater
15:40:06  20  	);
15:40:06  21  END UPDATE_SS_NEED_ENTITLEMENTS;
15:40:06  22  
15:40:06  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
15:40:06  24  /*
15:40:06  25  Throws exceptions:
15:40:06  26  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06  27  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06  28  */
15:40:06  29  	  in_offer_chain_id IN	 NUMBER,
15:40:06  30  	  out_result_set    OUT  SYS_REFCURSOR
15:40:06  31  ) AS
15:40:06  32  BEGIN
15:40:06  33  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_BY_ID (
15:40:06  34  	  in_offer_chain_id => in_offer_chain_id,
15:40:06  35  	  out_result_set => out_result_set
15:40:06  36  	);
15:40:06  37  END GET_OFFER_CHAIN_BY_ID;
15:40:06  38  
15:40:06  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
15:40:06  40  /*
15:40:06  41  Throws exceptions (codes):
15:40:06  42  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06  43  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06  44  */
15:40:06  45  	in_offer_chain_id IN NUMBER,
15:40:06  46  	in_meta_data_name IN VARCHAR2,
15:40:06  47  	out_result_set	  OUT SYS_REFCURSOR
15:40:06  48  )AS
15:40:06  49  BEGIN
15:40:06  50  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_META_DATA(
15:40:06  51  	  in_offer_chain_id,
15:40:06  52  	  in_meta_data_name,
15:40:06  53  	  out_result_set
15:40:06  54  	);
15:40:06  55  END GET_OFFER_CHAIN_META_DATA;
15:40:06  56  
15:40:06  57  PROCEDURE GET_ENDING_LICENSES (
15:40:06  58  /*
15:40:06  59  Throws exceptions:
15:40:06  60  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06  61  */
15:40:06  62  	in_hours_number IN NUMBER,
15:40:06  63  	out_result_set OUT SYS_REFCURSOR
15:40:06  64  ) AS
15:40:06  65  BEGIN
15:40:06  66  	PROCS_LICENSE_V23.GET_ENDING_LICENSES(in_hours_number,out_result_set);
15:40:06  67  END GET_ENDING_LICENSES;
15:40:06  68  
15:40:06  69  PROCEDURE GET_ENDING_LICENSES_CC (
15:40:06  70  /*
15:40:06  71  Throws exceptions:
15:40:06  72  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06  73  */
15:40:06  74  	in_hours_number IN NUMBER,
15:40:06  75  	out_result_set OUT SYS_REFCURSOR,
15:40:06  76  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:40:06  77  ) AS
15:40:06  78  BEGIN
15:40:06  79  	PROCS_LICENSE_V23.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
15:40:06  80  END GET_ENDING_LICENSES_CC;
15:40:06  81  
15:40:06  82  /*******************************************************/
15:40:06  83  
15:40:06  84  PROCEDURE GET_RECURRING_OFFER (
15:40:06  85  /*
15:40:06  86  Throws exceptions:
15:40:06  87  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06  88  */
15:40:06  89  	in_license_id  IN NUMBER,
15:40:06  90  	out_result_set OUT SYS_REFCURSOR
15:40:06  91  ) AS
15:40:06  92  BEGIN
15:40:06  93  	PROCS_LICENSE_V23.GET_RECURRING_OFFER (
15:40:06  94  	  in_license_id,
15:40:06  95  	  out_result_set
15:40:06  96  	);
15:40:06  97  END GET_RECURRING_OFFER;
15:40:06  98  
15:40:06  99  /********************************************************/
15:40:06 100  
15:40:06 101  PROCEDURE GET_NEXT_OFFER (
15:40:06 102  /*
15:40:06 103  Throws exceptions:
15:40:06 104  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 105  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:06 106  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 107  */
15:40:06 108  	in_license_id  IN NUMBER,
15:40:06 109  	out_result_set OUT SYS_REFCURSOR
15:40:06 110  ) AS
15:40:06 111  BEGIN
15:40:06 112  	PROCS_LICENSE_V23.GET_NEXT_OFFER (
15:40:06 113  	  in_license_id,
15:40:06 114  	  out_result_set
15:40:06 115  	);
15:40:06 116  END GET_NEXT_OFFER;
15:40:06 117  
15:40:06 118  /*********************************************************/
15:40:06 119  
15:40:06 120  PROCEDURE UPDATE_LICENSE_STATUS(
15:40:06 121  /*
15:40:06 122  Throws exceptions:
15:40:06 123  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 124  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 125  */
15:40:06 126  	  in_license_id     IN NUMBER,
15:40:06 127  	  in_license_status IN NUMBER,
15:40:06 128  	  in_updated_by     IN VARCHAR2
15:40:06 129  ) AS
15:40:06 130  BEGIN
15:40:06 131  	PROCS_LICENSE_V23.UPDATE_LICENSE_STATUS (
15:40:06 132  	  in_license_id,
15:40:06 133  	  in_license_status,
15:40:06 134  	  in_updated_by
15:40:06 135  	);
15:40:06 136  END UPDATE_LICENSE_STATUS;
15:40:06 137  
15:40:06 138  /**********************************************************/
15:40:06 139  
15:40:06 140  PROCEDURE UPDATE_INVOICE_STATUS (
15:40:06 141  /*
15:40:06 142  Throws exceptions:
15:40:06 143  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 144  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 145  */
15:40:06 146  	in_invoice_id		       IN NUMBER,
15:40:06 147  	in_invoice_status_id	       IN NUMBER,
15:40:06 148  	in_updated_by		       IN VARCHAR2
15:40:06 149  ) AS
15:40:06 150  BEGIN
15:40:06 151  	PROCS_INVOICE_V23.UPDATE_INVOICE_STATUS(
15:40:06 152  	  in_invoice_id,
15:40:06 153  	  in_invoice_status_id,
15:40:06 154  	  in_updated_by
15:40:06 155  	);
15:40:06 156  END UPDATE_INVOICE_STATUS;
15:40:06 157  
15:40:06 158  /***********************************************************/
15:40:06 159  
15:40:06 160  PROCEDURE CREATE_LICENSE(
15:40:06 161  /*
15:40:06 162  Throws exceptions:
15:40:06 163  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 164  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 165  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:40:06 166  */
15:40:06 167  	in_status_id		    IN NUMBER,
15:40:06 168  	in_needs_entitlements	    IN NUMBER,
15:40:06 169  	in_start_date		    IN DATE,
15:40:06 170  	in_end_date		    IN DATE,
15:40:06 171  	in_offer_id		    IN NUMBER,
15:40:06 172  	in_subscription_id	    IN NUMBER,
15:40:06 173  	in_invoice_id		    IN NUMBER,
15:40:06 174  	in_created_by		    IN VARCHAR2,
15:40:06 175  	in_is_extension 	    IN NUMBER,
15:40:06 176  	in_current_offer_index	    IN NUMBER,
15:40:06 177  	in_current_offer_recurr_num IN NUMBER,
15:40:06 178  	out_license_id		    OUT NUMBER
15:40:06 179  ) AS
15:40:06 180  BEGIN
15:40:06 181  	PROCS_LICENSE_V23.CREATE_LICENSE (
15:40:06 182  	  in_status_id,
15:40:06 183  	  in_needs_entitlements,
15:40:06 184  	  in_start_date,
15:40:06 185  	  in_end_date,
15:40:06 186  	  in_offer_id,
15:40:06 187  	  in_subscription_id,
15:40:06 188  	  in_invoice_id,
15:40:06 189  	  in_created_by,
15:40:06 190  	  in_is_extension,
15:40:06 191  	  in_current_offer_index,
15:40:06 192  	  in_current_offer_recurr_num,
15:40:06 193  	  out_license_id
15:40:06 194  	);
15:40:06 195  END CREATE_LICENSE;
15:40:06 196  
15:40:06 197  /******************************************************/
15:40:06 198  
15:40:06 199  PROCEDURE CREATE_INVOICE(
15:40:06 200  /*
15:40:06 201  Throws exceptions:
15:40:06 202  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 203  */
15:40:06 204  	  in_invoice_status IN NUMBER,
15:40:06 205  	  in_created_by     IN VARCHAR2,
15:40:06 206  	  in_tax_exempt_id  IN VARCHAR2,
15:40:06 207  	  out_invoice_id    OUT NUMBER
15:40:06 208  ) AS
15:40:06 209  BEGIN
15:40:06 210  	PROCS_INVOICE_V23.CREATE_INVOICE (
15:40:06 211  	  in_invoice_status,
15:40:06 212  	  in_created_by,
15:40:06 213  	  in_tax_exempt_id,
15:40:06 214  	  out_invoice_id
15:40:06 215  	);
15:40:06 216  END CREATE_INVOICE;
15:40:06 217  
15:40:06 218  /*******************************************************/
15:40:06 219  
15:40:06 220  PROCEDURE CREATE_CHARGE(
15:40:06 221  /*
15:40:06 222  Throws exceptions:
15:40:06 223  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 224  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 225  */
15:40:06 226  	in_invoice_id	      IN NUMBER,
15:40:06 227  	in_transaction_id     IN NUMBER,
15:40:06 228  	in_instrument_type_id IN NUMBER,
15:40:06 229  	in_instrument_id      IN NUMBER,
15:40:06 230  	in_charge_amount      IN NUMBER,
15:40:06 231  	in_created_by	      IN VARCHAR2,
15:40:06 232  	in_charge_status_id   IN NUMBER,
15:40:06 233  	out_charge_id	      OUT NUMBER
15:40:06 234  ) AS
15:40:06 235  BEGIN
15:40:06 236  	PROCS_CHARGE_V23.CREATE_CHARGE (
15:40:06 237  	  in_invoice_id,
15:40:06 238  	  in_transaction_id,
15:40:06 239  	  in_instrument_type_id,
15:40:06 240  	  in_instrument_id,
15:40:06 241  	  in_charge_amount,
15:40:06 242  	  in_created_by,
15:40:06 243  	  in_charge_status_id,
15:40:06 244  	  out_charge_id
15:40:06 245  	);
15:40:06 246  END CREATE_CHARGE;
15:40:06 247  
15:40:06 248  /**********************************************************/
15:40:06 249  
15:40:06 250  PROCEDURE HAS_FUTURE_LICENSE (
15:40:06 251  /*
15:40:06 252  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 253  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 254  --
15:40:06 255  RETURNS:
15:40:06 256  1 - if has,
15:40:06 257  0 - else
15:40:06 258  */
15:40:06 259  	in_license_id IN NUMBER,
15:40:06 260  	out_result	   OUT NUMBER
15:40:06 261  ) AS
15:40:06 262  BEGIN
15:40:06 263  	PROCS_SUBSCRIPTION_V23.HAS_FUTURE_LICENSE (
15:40:06 264  	  in_license_id,
15:40:06 265  	  out_result
15:40:06 266  	);
15:40:06 267  END HAS_FUTURE_LICENSE;
15:40:06 268  
15:40:06 269  /***********************************************************/
15:40:06 270  
15:40:06 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
15:40:06 272  /*
15:40:06 273  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 274  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 275  */
15:40:06 276  	in_license_id IN NUMBER,
15:40:06 277  	out_group_id  OUT NUMBER
15:40:06 278  ) AS
15:40:06 279  BEGIN
15:40:06 280  	PROCS_LICENSE_V23.GET_GROUP_ID_BY_LICENSE_ID (
15:40:06 281  	  in_license_id,
15:40:06 282  	  out_group_id
15:40:06 283  	);
15:40:06 284  END GET_GROUP_ID_BY_LICENSE_ID;
15:40:06 285  
15:40:06 286  /**********************************************************/
15:40:06 287  
15:40:06 288  PROCEDURE GET_OFFER_PRODUCTS (
15:40:06 289  /*
15:40:06 290  Throws exceptions (codes):
15:40:06 291  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 292  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 293  */
15:40:06 294  	in_offer_id    IN NUMBER,
15:40:06 295  	out_result_set OUT SYS_REFCURSOR
15:40:06 296  ) AS
15:40:06 297  BEGIN
15:40:06 298  	PROCS_OFFER_CHAIN_V23.GET_OFFER_PRODUCTS (
15:40:06 299  	  in_offer_id,
15:40:06 300  	  out_result_set
15:40:06 301  	);
15:40:06 302  END GET_OFFER_PRODUCTS;
15:40:06 303  
15:40:06 304  /***********************************************************/
15:40:06 305  
15:40:06 306  PROCEDURE CREATE_TRANSACTION (
15:40:06 307  /*
15:40:06 308  Throws exceptions:
15:40:06 309  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 310  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 311  */
15:40:06 312  	in_transaction_id	  IN NUMBER,
15:40:06 313  	in_status_id		  IN NUMBER,
15:40:06 314  	in_amount		  IN NUMBER,
15:40:06 315  	in_created_by		  IN VARCHAR2,
15:40:06 316  	in_order_id		  IN VARCHAR2,
15:40:06 317  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
15:40:06 318  	out_transaction_id	  OUT NUMBER
15:40:06 319  ) AS
15:40:06 320  BEGIN
15:40:06 321  	PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
15:40:06 322  	  in_transaction_id,
15:40:06 323  	  in_status_id,
15:40:06 324  	  in_amount,
15:40:06 325  	  in_created_by,
15:40:06 326  	  in_order_id,
15:40:06 327  	  GLOBAL_CONSTANTS_V23.FALSE, -- is_refund should be false in renewal
15:40:06 328  	  in_transaction_type_code,
15:40:06 329  	  out_transaction_id
15:40:06 330  	);
15:40:06 331  END CREATE_TRANSACTION;
15:40:06 332  
15:40:06 333  /************************************************************/
15:40:06 334  
15:40:06 335  PROCEDURE ADD_LINE_ITEMS(
15:40:06 336  /*
15:40:06 337  Throws exceptions:
15:40:06 338  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 339  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 340  */
15:40:06 341  	in_invoice_id IN NUMBER,
15:40:06 342  	in_offer_id   IN NUMBER,
15:40:06 343  	in_created_by IN VARCHAR2
15:40:06 344  ) AS
15:40:06 345  BEGIN
15:40:06 346  	PROCS_LINE_ITEMS_V23.ADD_LINE_ITEMS(
15:40:06 347  	  in_invoice_id,
15:40:06 348  	  in_offer_id,
15:40:06 349  	  in_created_by
15:40:06 350  	);
15:40:06 351  END ADD_LINE_ITEMS;
15:40:06 352  
15:40:06 353  /************************************************************/
15:40:06 354  
15:40:06 355  PROCEDURE CALCULATE_INVOICE_AMOUNT (
15:40:06 356  /*
15:40:06 357  Throws exceptions:
15:40:06 358  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 359  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 360  */
15:40:06 361  	in_invoice_id IN  NUMBER,
15:40:06 362  	out_amount    OUT NUMBER
15:40:06 363  ) AS
15:40:06 364  BEGIN
15:40:06 365  	PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT (
15:40:06 366  	  in_invoice_id,
15:40:06 367  	  out_amount
15:40:06 368  	);
15:40:06 369  END CALCULATE_INVOICE_AMOUNT;
15:40:06 370  
15:40:06 371  /*************************************************************/
15:40:06 372  
15:40:06 373  PROCEDURE RESERVE_TRANSACTION_ID (
15:40:06 374  /*
15:40:06 375  Throws exceptions:
15:40:06 376  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 377  */
15:40:06 378  	out_transaction_id OUT NUMBER
15:40:06 379  ) AS
15:40:06 380  BEGIN
15:40:06 381  	PROCS_TRANSACTION_V23.RESERVE_TRANSACTION_ID (
15:40:06 382  	  out_transaction_id
15:40:06 383  	);
15:40:06 384  END RESERVE_TRANSACTION_ID;
15:40:06 385  
15:40:06 386  /***************************************************************/
15:40:06 387  
15:40:06 388  PROCEDURE P_GET_NEXT_OFFER_INDEX (
15:40:06 389  	in_offer_chain_id	     IN NUMBER,
15:40:06 390  	in_offer_chain_current_index IN NUMBER,
15:40:06 391  	out_next_offer_index	     OUT NUMBER
15:40:06 392  ) AS
15:40:06 393  BEGIN
15:40:06 394  	PROCS_OFFER_CHAIN_V23.P_GET_NEXT_OFFER_INDEX(
15:40:06 395  	  in_offer_chain_id,
15:40:06 396  	  in_offer_chain_current_index,
15:40:06 397  	  out_next_offer_index
15:40:06 398  	);
15:40:06 399  END P_GET_NEXT_OFFER_INDEX;
15:40:06 400  
15:40:06 401  /***************************************************************/
15:40:06 402  
15:40:06 403  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
15:40:06 404  	in_license_id		     IN NUMBER,
15:40:06 405  	in_offer_chain_current_index IN NUMBER,
15:40:06 406  	out_next_offer_index	     OUT NUMBER
15:40:06 407  ) AS
15:40:06 408  BEGIN
15:40:06 409  	PROCS_OFFER_CHAIN_V23.GET_NEXT_OFFER_INDEX_BY_LCNS(
15:40:06 410  	  in_license_id,
15:40:06 411  	  in_offer_chain_current_index,
15:40:06 412  	  out_next_offer_index
15:40:06 413  	);
15:40:06 414  END GET_NEXT_OFFER_INDEX_BY_LCNS;
15:40:06 415  
15:40:06 416  /******************************************************************/
15:40:06 417  
15:40:06 418  PROCEDURE GET_SUBSCRIPTION_INFO (
15:40:06 419  /*
15:40:06 420  Throws exceptions:
15:40:06 421  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 422  */
15:40:06 423  	  in_subscription_id IN  NUMBER,
15:40:06 424  	  out_result_set      OUT SYS_REFCURSOR
15:40:06 425  ) AS
15:40:06 426  BEGIN
15:40:06 427  	PROCS_SUBSCRIPTION_V23.GET_SUBSCRIPTION_INFO(
15:40:06 428  	  in_subscription_id,
15:40:06 429  	  out_result_set
15:40:06 430  	);
15:40:06 431  END GET_SUBSCRIPTION_INFO;
15:40:06 432  
15:40:06 433  /*******************************************************************/
15:40:06 434  
15:40:06 435  PROCEDURE CLOSE_SUBSCRIPTION (
15:40:06 436  	in_subscription_id IN NUMBER,
15:40:06 437  	in_updated_by	   IN VARCHAR2
15:40:06 438  ) AS
15:40:06 439  BEGIN
15:40:06 440  	PROCS_SUBSCRIPTION_V23.CLOSE_SUBSCRIPTION(
15:40:06 441  	  in_subscription_id,
15:40:06 442  	  in_updated_by
15:40:06 443  	);
15:40:06 444  END CLOSE_SUBSCRIPTION;
15:40:06 445  
15:40:06 446  /*******************************************************************/
15:40:06 447  
15:40:06 448  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
15:40:06 449  	out_result_set OUT SYS_REFCURSOR
15:40:06 450  ) AS
15:40:06 451  BEGIN
15:40:06 452  	PROCS_LICENSE_V23.GET_NEED_ENTITLEMENTS_LICENSES(
15:40:06 453  	  out_result_set
15:40:06 454  	);
15:40:06 455  END GET_NEED_ENTITLEMENTS_LICENSES;
15:40:06 456  
15:40:06 457  /*******************************************************************/
15:40:06 458  
15:40:06 459  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
15:40:06 460  	in_license_id	      IN NUMBER,
15:40:06 461  	in_needs_entitlements IN NUMBER,
15:40:06 462  	in_updated_by	      IN VARCHAR2
15:40:06 463  ) AS
15:40:06 464  BEGIN
15:40:06 465  	PROCS_LICENSE_V23.UPDATE_NEED_ENTITLEMENTS_FLAG(
15:40:06 466  	  in_license_id,
15:40:06 467  	  in_needs_entitlements,
15:40:06 468  	  in_updated_by
15:40:06 469  	);
15:40:06 470  END UPDATE_NEED_ENTITLEMENTS_FLAG;
15:40:06 471  
15:40:06 472  /*******************************************************/
15:40:06 473  
15:40:06 474  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
15:40:06 475  /*
15:40:06 476  Throws exceptions (codes):
15:40:06 477  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 478  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 479  */
15:40:06 480  	in_offer_id    IN NUMBER,
15:40:06 481  	out_result_set OUT SYS_REFCURSOR
15:40:06 482  ) AS
15:40:06 483  BEGIN
15:40:06 484  	PROCS_OFFER_CHAIN_V23.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
15:40:06 485  END GET_PROD_OFFERINGS_BY_OFFER_ID;
15:40:06 486  
15:40:06 487  /*******************************************************/
15:40:06 488  
15:40:06 489  PROCEDURE LOCK_ACCOUNT (
15:40:06 490  	in_group_id    IN NUMBER,
15:40:06 491  	in_lock_key    IN VARCHAR2,
15:40:06 492  	in_seconds_num IN NUMBER,
15:40:06 493  	in_created_by  IN VARCHAR2,
15:40:06 494  	in_reason      IN VARCHAR2
15:40:06 495  ) AS
15:40:06 496  BEGIN
15:40:06 497  	PROCS_LOCKING_V23.LOCK_ACCOUNT(
15:40:06 498  	  in_group_id,
15:40:06 499  	  in_lock_key,
15:40:06 500  	  in_seconds_num,
15:40:06 501  	  in_created_by,
15:40:06 502  	  in_reason
15:40:06 503  	);
15:40:06 504  END LOCK_ACCOUNT;
15:40:06 505  
15:40:06 506  /****************************************************************/
15:40:06 507  
15:40:06 508  PROCEDURE RELEASE_LOCK (
15:40:06 509  	in_group_id IN NUMBER,
15:40:06 510  	in_lock_key IN VARCHAR2
15:40:06 511  ) AS
15:40:06 512  BEGIN
15:40:06 513  	PROCS_LOCKING_V23.RELEASE_LOCK(
15:40:06 514  	  in_group_id,
15:40:06 515  	  in_lock_key
15:40:06 516  	);
15:40:06 517  END RELEASE_LOCK;
15:40:06 518  
15:40:06 519  /******************************************************************************/
15:40:06 520  
15:40:06 521  PROCEDURE GET_INVOICE_LINE_ITEMS (
15:40:06 522  	in_invoice_id  IN NUMBER,
15:40:06 523  	out_result_set OUT SYS_REFCURSOR
15:40:06 524  ) AS
15:40:06 525  BEGIN
15:40:06 526  	PROCS_INVOICE_V23.GET_INVOICE_LINE_ITEMS(
15:40:06 527  	  in_invoice_id,
15:40:06 528  	  out_result_set
15:40:06 529  	);
15:40:06 530  END GET_INVOICE_LINE_ITEMS;
15:40:06 531  
15:40:06 532  /******************************************************************************/
15:40:06 533  
15:40:06 534  PROCEDURE ADD_TAX (
15:40:06 535  	in_tax_type_id		 IN NUMBER,
15:40:06 536  	in_calculated_amount	 IN NUMBER,
15:40:06 537  	in_created_by		 IN VARCHAR2,
15:40:06 538  	in_line_item_id 	 IN NUMBER,
15:40:06 539  	in_effective_rate	 IN VARCHAR2,
15:40:06 540  	in_taxable_amount	 IN NUMBER,
15:40:06 541  	in_tax_rule_id		 IN NUMBER,
15:40:06 542  	in_jurisdiction_level_id IN NUMBER,
15:40:06 543  	in_jurisdiction_name	 IN VARCHAR2,
15:40:06 544  	in_jurisdiction_id	 IN VARCHAR2,
15:40:06 545  	in_ext_tax_type 	 IN VARCHAR2,
15:40:06 546  	in_ext_result		 IN VARCHAR2,
15:40:06 547  	in_imposition_type	 IN VARCHAR2,
15:40:06 548  	in_imposition		 IN VARCHAR2
15:40:06 549  ) AS
15:40:06 550  BEGIN
15:40:06 551  	PROCS_TAXES_V23.ADD_TAX(
15:40:06 552  	  in_tax_type_id,
15:40:06 553  	  in_calculated_amount,
15:40:06 554  	  in_created_by,
15:40:06 555  	  in_line_item_id,
15:40:06 556  	  in_effective_rate,
15:40:06 557  	  in_taxable_amount,
15:40:06 558  	  in_tax_rule_id,
15:40:06 559  	  in_jurisdiction_level_id,
15:40:06 560  	  in_jurisdiction_name,
15:40:06 561  	  in_jurisdiction_id,
15:40:06 562  	  in_ext_tax_type,
15:40:06 563  	  in_ext_result,
15:40:06 564  	  in_imposition_type,
15:40:06 565  	  in_imposition
15:40:06 566  	);
15:40:06 567  END ADD_TAX;
15:40:06 568  
15:40:06 569  /******************************************************************************/
15:40:06 570  
15:40:06 571  PROCEDURE GET_CREDIT_CARD_BY_ID (
15:40:06 572  	in_credit_card_id IN  NUMBER,
15:40:06 573  	out_result_set	  OUT SYS_REFCURSOR
15:40:06 574  ) AS
15:40:06 575  BEGIN
15:40:06 576  	PROCS_FIN_INSTRUMENTS_V23.GET_CREDIT_CARD_BY_ID(
15:40:06 577  	  in_credit_card_id,
15:40:06 578  	  out_result_set
15:40:06 579  	);
15:40:06 580  END GET_CREDIT_CARD_BY_ID;
15:40:06 581  
15:40:06 582  /******************************************************************************/
15:40:06 583  
15:40:06 584  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
15:40:06 585  	in_line_item_id IN NUMBER,
15:40:06 586  	out_result_set	OUT SYS_REFCURSOR
15:40:06 587  ) AS
15:40:06 588  BEGIN
15:40:06 589  	PROCS_PRODUCT_V23.GET_PRD_OFFERING_BY_LINE_IT_ID(
15:40:06 590  	  in_line_item_id,
15:40:06 591  	  out_result_set
15:40:06 592  	);
15:40:06 593  END GET_PRD_OFFERING_BY_LINE_IT_ID;
15:40:06 594  
15:40:06 595  /******************************************************************************/
15:40:06 596  
15:40:06 597  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
15:40:06 598  /*
15:40:06 599  Throws exceptions:
15:40:06 600  APP_EXCEPTION_CODES_V23.NOT_FOUND,
15:40:06 601  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 602  */
15:40:06 603  	in_group_id IN NUMBER,
15:40:06 604  	out_account_id	OUT NUMBER
15:40:06 605  ) AS
15:40:06 606  BEGIN
15:40:06 607  	PROCS_ACCOUNT_V23.GET_ACCOUNT_ID_BY_GROUP_ID(
15:40:06 608  	  in_group_id,
15:40:06 609  	  out_account_id
15:40:06 610  	);
15:40:06 611  END GET_ACCOUNT_ID_BY_GROUP_ID;
15:40:06 612  
15:40:06 613  /******************************************************************************/
15:40:06 614  
15:40:06 615  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
15:40:06 616  /*
15:40:06 617  Throws exceptions:
15:40:06 618  APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06 619  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 620  */
15:40:06 621  	in_line_item_id IN  NUMBER,
15:40:06 622  	out_result_set	OUT SYS_REFCURSOR
15:40:06 623  ) AS
15:40:06 624  BEGIN
15:40:06 625  	PROCS_LINE_ITEMS_V23.GET_LINE_ITEM_DISCOUNTS(
15:40:06 626  	  in_line_item_id,
15:40:06 627  	  out_result_set
15:40:06 628  	);
15:40:06 629  END GET_LINE_ITEM_DISCOUNTS;
15:40:06 630  
15:40:06 631  /******************************************************************************/
15:40:06 632  
15:40:06 633  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
15:40:06 634  	in_line_item_id    IN NUMBER,
15:40:06 635  	in_amount	   IN NUMBER,
15:40:06 636  	in_discount_amount IN NUMBER,
15:40:06 637  	in_taxes_amount    IN NUMBER
15:40:06 638  ) AS
15:40:06 639  BEGIN
15:40:06 640  	PROCS_LINE_ITEMS_V23.UPDATE_LINE_ITEM_AMOUNT(
15:40:06 641  	  in_line_item_id,
15:40:06 642  	  in_amount,
15:40:06 643  	  in_discount_amount,
15:40:06 644  	  in_taxes_amount
15:40:06 645  	);
15:40:06 646  END UPDATE_LINE_ITEM_AMOUNT;
15:40:06 647  
15:40:06 648  /******************************************************************************/
15:40:06 649  
15:40:06 650  PROCEDURE GET_PAYPAL_BY_ID (
15:40:06 651  	in_paypal_id   IN  NUMBER,
15:40:06 652  	out_result_set OUT SYS_REFCURSOR
15:40:06 653  ) AS
15:40:06 654  BEGIN
15:40:06 655  	PROCS_FIN_INSTRUMENTS_V23.GET_PAYPAL_BY_ID(
15:40:06 656  	  in_paypal_id,
15:40:06 657  	  out_result_set
15:40:06 658  	);
15:40:06 659  END GET_PAYPAL_BY_ID;
15:40:06 660  
15:40:06 661  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
15:40:06 662  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
15:40:06 663  	out_result_set OUT SYS_REFCURSOR
15:40:06 664  ) AS
15:40:06 665  BEGIN
15:40:06 666  	PROCS_FIN_INSTRUMENTS_V23.GET_GC_BY_PURCH_INVOICE_ID (
15:40:06 667  	  in_invoice_id,
15:40:06 668  	  out_result_set
15:40:06 669  	);
15:40:06 670  END GET_GC_BY_PURCH_INVOICE_ID;
15:40:06 671  
15:40:06 672  PROCEDURE GET_LICENSE_BY_ID (
15:40:06 673  	in_license_id  IN NUMBER,
15:40:06 674  	out_result_set OUT SYS_REFCURSOR
15:40:06 675  ) AS
15:40:06 676  BEGIN
15:40:06 677  	PROCS_LICENSE_V23.GET_LICENSE_BY_ID (
15:40:06 678  	  in_license_id,
15:40:06 679  	  out_result_set
15:40:06 680  	);
15:40:06 681  END GET_LICENSE_BY_ID;
15:40:06 682  
15:40:06 683  /******************************************************************************/
15:40:06 684  
15:40:06 685  PROCEDURE GET_NOTIFICATION_TYPE_ID (
15:40:06 686  	in_offer_chain_id	 IN NUMBER,
15:40:06 687  	in_action_name		 IN VARCHAR2,
15:40:06 688  	out_notification_type_id OUT NUMBER
15:40:06 689  ) AS
15:40:06 690  BEGIN
15:40:06 691  	PROCS_OFFER_CHAIN_V23.GET_NOTIFICATION_TYPE_ID(
15:40:06 692  	  in_offer_chain_id,
15:40:06 693  	  in_action_name,
15:40:06 694  	  out_notification_type_id
15:40:06 695  	);
15:40:06 696  END GET_NOTIFICATION_TYPE_ID;
15:40:06 697  
15:40:06 698  /******************************************************************************/
15:40:06 699  
15:40:06 700  PROCEDURE GET_ALL_OCH_META_DATA (
15:40:06 701  	in_offer_chain_id IN NUMBER,
15:40:06 702  	out_result_set	  OUT SYS_REFCURSOR
15:40:06 703  ) AS
15:40:06 704  BEGIN
15:40:06 705  	PROCS_OFFER_CHAIN_V23.GET_ALL_META_DATA (
15:40:06 706  	  in_offer_chain_id,
15:40:06 707  	  out_result_set
15:40:06 708  	);
15:40:06 709  END GET_ALL_OCH_META_DATA;
15:40:06 710  
15:40:06 711  /******************************************************************************/
15:40:06 712  
15:40:06 713  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
15:40:06 714  /*
15:40:06 715  APP_EXCEPTION_CODES_V23.INVALID_PARAMETER
15:40:06 716  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06 717  */
15:40:06 718  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
15:40:06 719  	out_result_set	     OUT SYS_REFCURSOR
15:40:06 720  ) AS
15:40:06 721  BEGIN
15:40:06 722  	PROCS_SUBSCRIPTION_V23.GET_SUBSCRIPTIONS_META_DATA(
15:40:06 723  	  in_subscriptions_ids,
15:40:06 724  	  out_result_set
15:40:06 725  	);
15:40:06 726  END GET_SUBSCRIPTIONS_META_DATA;
15:40:06 727  
15:40:06 728  PROCEDURE GET_UNREDEEMED_GCS (
15:40:06 729  	out_result_set		OUT SYS_REFCURSOR,
15:40:06 730  	in_hours_number 	IN NUMBER DEFAULT 14*24,
15:40:06 731  	in_num_rows		IN NUMBER DEFAULT 10000,
15:40:06 732  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
15:40:06 733  ) AS
15:40:06 734  BEGIN
15:40:06 735  	PROCS_FIN_INSTRUMENTS_V23.GET_UNREDEEMED_GCS(
15:40:06 736  	  out_result_set => out_result_set,
15:40:06 737  	  in_hours_number => in_hours_number,
15:40:06 738  	  in_num_rows => in_num_rows,
15:40:06 739  	  in_process_name => in_process_name
15:40:06 740  	);
15:40:06 741  END GET_UNREDEEMED_GCS;
15:40:06 742  
15:40:06 743  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
15:40:06 744  	in_offer_chain_id IN NUMBER,
15:40:06 745  	in_meta_data_name IN VARCHAR2,
15:40:06 746  	out_value	  OUT VARCHAR2
15:40:06 747  ) AS
15:40:06 748  BEGIN
15:40:06 749  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MD_VALUE(
15:40:06 750  	  in_offer_chain_id => in_offer_chain_id,
15:40:06 751  	  in_meta_data_name => in_meta_data_name,
15:40:06 752  	  out_value => out_value
15:40:06 753  	);
15:40:06 754  END GET_OFFER_CHAIN_MD_VALUE;
15:40:06 755  
15:40:06 756  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
15:40:06 757  	out_result_set	    OUT SYS_REFCURSOR
15:40:06 758  )
15:40:06 759  AS
15:40:06 760  BEGIN
15:40:06 761  	PROCS_SUBSCRIPTION_V23.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
15:40:06 762  	  out_result_set => out_result_set
15:40:06 763  	);
15:40:06 764  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
15:40:06 765  
15:40:06 766  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
15:40:06 767  	out_result_set	    OUT SYS_REFCURSOR
15:40:06 768  )
15:40:06 769  AS
15:40:06 770  BEGIN
15:40:06 771  	PROCS_SUBSCRIPTION_V23.GET_ACT_SUBS_W_PP_CHARGEBACKS(
15:40:06 772  	  out_result_set => out_result_set
15:40:06 773  	);
15:40:06 774  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
15:40:06 775  
15:40:06 776  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
15:40:06 777  	in_max_days_until_close IN NUMBER,
15:40:06 778  	in_num_subs_to_fetch	IN NUMBER,
15:40:06 779  	out_result_set		OUT SYS_REFCURSOR
15:40:06 780  )
15:40:06 781  AS
15:40:06 782  BEGIN
15:40:06 783  	PROCS_SUBSCRIPTION_V23.GET_GRACE_PERIOD_SUB_REGIS(
15:40:06 784  	  in_max_days_until_close => in_max_days_until_close,
15:40:06 785  	  in_num_subs_to_fetch => in_num_subs_to_fetch,
15:40:06 786  	  out_result_set => out_result_set
15:40:06 787  	);
15:40:06 788  END GET_GRACE_PERIOD_SUB_REGIS;
15:40:06 789  
15:40:06 790  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
15:40:06 791  	out_result_set	    OUT SYS_REFCURSOR
15:40:06 792  )
15:40:06 793  AS
15:40:06 794  BEGIN
15:40:06 795  	PROCS_SUBSCRIPTION_V23.GET_ACT_SUBS_W_AMEX_CB(
15:40:06 796  	  out_result_set => out_result_set
15:40:06 797  	);
15:40:06 798  END GET_ACT_SUBS_W_AMEX_CB;
15:40:06 799  
15:40:06 800  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
15:40:06 801  	in_days_before_close	 IN NUMBER,
15:40:06 802  	in_num_licenses_to_fetch IN NUMBER,
15:40:06 803  	out_result_set		 OUT SYS_REFCURSOR
15:40:06 804  ) AS
15:40:06 805  BEGIN
15:40:06 806  	PROCS_LICENSE_V23.GET_GRACE_LICE_FOR_FINAL_TRANS(
15:40:06 807  	  in_days_before_close => in_days_before_close,
15:40:06 808  	  in_num_licenses_to_fetch => in_num_licenses_to_fetch,
15:40:06 809  	  out_result_set => out_result_set
15:40:06 810  	);
15:40:06 811  END GET_GRACE_LICE_FOR_FINAL_TRANS;
15:40:06 812  
15:40:06 813  PROCEDURE GET_EXPIRING_PAYPAL (
15:40:06 814  	in_expire_window_days	  IN NUMBER,
15:40:06 815  	in_creation_limit_days	  IN NUMBER,
15:40:06 816  	in_retry_throttle_name	  IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
15:40:06 817  	out_result_set		  OUT SYS_REFCURSOR
15:40:06 818  ) AS
15:40:06 819  BEGIN
15:40:06 820  	PROCS_FIN_INSTRUMENTS_V23.GET_EXPIRING_PAYPAL(
15:40:06 821  	  in_expire_window_days   => in_expire_window_days,
15:40:06 822  	  in_creation_limit_days  => in_creation_limit_days,
15:40:06 823  	  in_retry_throttle_name  => in_retry_throttle_name,
15:40:06 824  	  out_result_set	  => out_result_set
15:40:06 825  	);
15:40:06 826  END GET_EXPIRING_PAYPAL;
15:40:06 827  
15:40:06 828  END PUBLIC_PROCS_RENEWAL_V23;
15:40:06 829  .
15:40:06 SQL> /

Package body created.

Elapsed: 00:00:00.08
15:40:06 SQL> 
15:40:06 SQL> prompt Compiling body for public_procs_client.sql
Compiling body for public_procs_client.sql
15:40:06 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_CLIENT_V23" AS
15:40:06   2  
15:40:06   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
15:40:06   4  /*
15:40:06   5  Throws exceptions:
15:40:06   6  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06   7  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06   8  */
15:40:06   9  	in_notification_type_name IN VARCHAR2,
15:40:06  10  	out_notification_type_id  OUT NUMBER
15:40:06  11  ) AS
15:40:06  12  BEGIN
15:40:06  13  	PROCS_NOTIFICATION_V23.GET_NOTIFICATION_TYPE_BY_NAME (
15:40:06  14  	  in_notification_type_name,
15:40:06  15  	  out_notification_type_id
15:40:06  16  	);
15:40:06  17  END;
15:40:06  18  
15:40:06  19  /*****************************************************************/
15:40:06  20  
15:40:06  21  PROCEDURE ADD_NOTIFICATION (
15:40:06  22  /*
15:40:06  23  Throws exceptions:
15:40:06  24  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
15:40:06  25  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:40:06  26  */
15:40:06  27  	in_sender_account_id	 IN NUMBER DEFAULT 0,
15:40:06  28  	in_recipient_group_id	 IN NUMBER,
15:40:06  29  	in_notification_type_id  IN NUMBER,
15:40:06  30  	in_date_to_notify	 IN DATE,
15:40:06  31  	in_email_template_params IN CLOB
15:40:06  32  ) AS
15:40:06  33  BEGIN
15:40:06  34  	PROCS_NOTIFICATION_V23.ADD_NOTIFICATION (
15:40:06  35  	  in_sender_account_id,
15:40:06  36  	  in_recipient_group_id,
15:40:06  37  	  in_notification_type_id,
15:40:06  38  	  in_date_to_notify,
15:40:06  39  	  in_email_template_params
15:40:06  40  	);
15:40:06  41  END;
15:40:06  42  
15:40:06  43  END PUBLIC_PROCS_CLIENT_V23;
15:40:06  44  .
15:40:06 SQL> /

Package body created.

Elapsed: 00:00:00.03
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ADX_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_TEST_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.05
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V23 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.06
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> 
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V23 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V23 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V23 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.03
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V23 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V23 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V23 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> 
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:06 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.40
15:40:07 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:07 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:07 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:07 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:07 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> 
15:40:07 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.06
15:40:07 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:07 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> 
15:40:07 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:07 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:07 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:07 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> 
15:40:07 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> 
15:40:07 SQL> grant select, insert, update, delete ON CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> grant select ON CORE_OWNER.NOTTID_SEQ to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> 
15:40:07 SQL> Grant Execute On Core_Owner.App_Exception_Codes_V23 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> 
15:40:07 SQL> Grant Execute On Core_Owner.GLOBAL_ENUMS_V23 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:07 SQL> 
15:40:07 SQL> Grant Execute On Core_Owner.Global_Statuses_V23 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:07 SQL> 
15:40:07 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
15:40:07 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECST@rac01.stg.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com
Cc: nytd_oracledba@nytimes.com

Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.stg.ewr1.nytimes.com
        DB Role: PRIMARY
        SID: ECST
        Schema: core_owner
        Migration: 75.4-release-1.17.0-3-CORE-all
        SVN Revision: 13448
        Duration: 10 sec.
        DBA: apathrose
        