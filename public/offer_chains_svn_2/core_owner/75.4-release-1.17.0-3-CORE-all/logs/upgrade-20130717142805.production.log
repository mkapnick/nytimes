14:28:18 SQL> @/dbbackups/ECPR/migrations/core_owner/75.4-release-1.17.0-3-CORE-all/upgrade.sql
14:28:18 SQL> prompt Compiling header for notification_statuses.sql
Compiling header for notification_statuses.sql
14:28:18 SQL> 
14:28:18 SQL> .
14:28:18 SQL> /
SP2-0103: Nothing in SQL buffer to run.
14:28:18 SQL> 
14:28:18 SQL> prompt Compiling header for procs_account_cru.sql
Compiling header for procs_account_cru.sql
14:28:18 SQL> --------------------------------------------------------------------------------
14:28:18 SQL> -- DDL for package PROCS_ACCOUNT_CRU
14:28:18 SQL> --------------------------------------------------------------------------------
14:28:18 SQL> 
14:28:18 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V23" AS
14:28:18   2  
14:28:18   3  PROCEDURE CREATE_ACCOUNT (
14:28:18   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
14:28:18   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
14:28:18   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
14:28:18   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
14:28:18   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
14:28:18   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
14:28:18  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:28:18  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
14:28:18  12  );
14:28:18  13  
14:28:18  14  PROCEDURE UPDATE_ACCOUNT (
14:28:18  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
14:28:18  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
14:28:18  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
14:28:18  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
14:28:18  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
14:28:18  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:28:18  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
14:28:18  22  );
14:28:18  23  
14:28:18  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
14:28:18  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
14:28:18  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
14:28:18  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
14:28:18  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
14:28:18  29  );
14:28:18  30  
14:28:18  31  PROCEDURE READ_ACCOUNT (
14:28:18  32  	in_account_id  IN ACCOUNT.ID%TYPE,
14:28:18  33  	out_result_set OUT SYS_REFCURSOR
14:28:18  34  );
14:28:18  35  
14:28:18  36  PROCEDURE CREATE_ACCOUNT_NOTE (
14:28:18  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
14:28:18  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
14:28:18  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
14:28:18  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
14:28:18  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
14:28:18  42  );
14:28:18  43  
14:28:18  44  END PROCS_ACCOUNT_CRU_V23;
14:28:18  45  .
14:28:18 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:18 SQL> 
14:28:18 SQL> prompt Compiling header for procs_account.sql
Compiling header for procs_account.sql
14:28:18 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V23" AS
14:28:18   2  
14:28:18   3  FUNCTION GET_GRACE_START_DATE(
14:28:18   4  	in_subscription_id IN NUMBER
14:28:18   5  ) RETURN DATE;
14:28:18   6  
14:28:18   7  FUNCTION GET_GRACE_END_DATE(
14:28:18   8  	in_subscription_id IN NUMBER
14:28:18   9  ) RETURN DATE;
14:28:18  10  
14:28:18  11  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
14:28:18  12  	in_group_id    IN  NUMBER,
14:28:18  13  	out_result_set OUT SYS_REFCURSOR
14:28:18  14  );
14:28:18  15  
14:28:18  16  PROCEDURE ANNOTATE_ACCOUNT (
14:28:18  17  	in_group_id   IN  NUMBER,
14:28:18  18  	in_agent_id   IN  NUMBER,
14:28:18  19  	in_note       IN  VARCHAR2,
14:28:18  20  	in_created_by IN  VARCHAR2
14:28:18  21  );
14:28:18  22  
14:28:18  23  PROCEDURE ASSERT_ACCOUNT_EXISTS (
14:28:18  24  	in_group_id IN	NUMBER,
14:28:18  25  	out_exists  OUT NUMBER
14:28:18  26  );
14:28:18  27  
14:28:18  28  PROCEDURE DISABLE_ACCOUNT (
14:28:18  29  	in_group_id   IN NUMBER,
14:28:18  30  	in_updated_by IN VARCHAR2,
14:28:18  31  	in_note       IN VARCHAR2,
14:28:18  32  	in_agent_id   IN NUMBER
14:28:18  33  );
14:28:18  34  
14:28:18  35  PROCEDURE CREATE_ACTIVE_ACCOUNT(
14:28:18  36  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
14:28:18  37  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
14:28:18  38  	out_new_account_id OUT ACCOUNT.ID%TYPE
14:28:18  39  );
14:28:18  40  
14:28:18  41  PROCEDURE REACTIVATE_ACCOUNT (
14:28:18  42  	in_group_id	  IN NUMBER,
14:28:18  43  	in_updated_by	  IN VARCHAR2,
14:28:18  44  	in_note 	  IN VARCHAR2,
14:28:18  45  	in_agent_id	  IN NUMBER
14:28:18  46  );
14:28:18  47  
14:28:18  48  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
14:28:18  49  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
14:28:18  50  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V23.CREDIT_CARD_ACTIVE,
14:28:18  51  	out_result_set OUT SYS_REFCURSOR
14:28:18  52  );
14:28:18  53  
14:28:18  54  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
14:28:18  55  	in_group_id	  IN NUMBER,
14:28:18  56  	out_result_gc_set OUT SYS_REFCURSOR,
14:28:18  57  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.TRUE
14:28:18  58  );
14:28:18  59  
14:28:18  60  PROCEDURE GET_ACCOUNT_INFO  (
14:28:18  61  	  in_group_id	    IN	NUMBER,
14:28:18  62  	  out_account_info  OUT SYS_REFCURSOR
14:28:18  63  );
14:28:18  64  
14:28:18  65  PROCEDURE GET_ACCOUNT_NOTES (
14:28:18  66  	  in_group_id	 IN  NUMBER,
14:28:18  67  	  out_result_set OUT SYS_REFCURSOR
14:28:18  68  );
14:28:18  69  
14:28:18  70  PROCEDURE GET_ACCOUNT_PAYPALS(
14:28:18  71  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
14:28:18  72  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V23.PAYPAL_ACTIVE,
14:28:18  73  	out_result_set OUT SYS_REFCURSOR
14:28:18  74  );
14:28:18  75  
14:28:18  76  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
14:28:18  77  	  in_group_id	 IN  NUMBER,
14:28:18  78  	  in_start_date  IN DATE,
14:28:18  79  	  in_end_date	 IN DATE,
14:28:18  80  	  in_status	 IN NUMBER,
14:28:18  81  	  in_group_account_type IN VARCHAR2,
14:28:18  82  	  out_result_set  OUT SYS_REFCURSOR
14:28:18  83  );
14:28:18  84  
14:28:18  85  PROCEDURE FREEZE_ACCOUNT (
14:28:18  86  	in_group_id   IN NUMBER,
14:28:18  87  	in_updated_by IN VARCHAR2,
14:28:18  88  	in_note       IN VARCHAR2,
14:28:18  89  	in_agent_id   IN NUMBER
14:28:18  90  );
14:28:18  91  
14:28:18  92  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
14:28:18  93  	in_group_id	   IN  NUMBER,
14:28:18  94  	in_subscription_id IN NUMBER,
14:28:18  95  	out_result_set	   OUT SYS_REFCURSOR
14:28:18  96  );
14:28:18  97  
14:28:18  98  PROCEDURE GET_ACCOUNT_GC_INVOICES (
14:28:18  99  	in_group_id    IN  NUMBER,
14:28:18 100  	out_result_set OUT SYS_REFCURSOR
14:28:18 101  );
14:28:18 102  
14:28:18 103  PROCEDURE GET_GC_INVOICE (
14:28:18 104  	in_group_id    IN  NUMBER,
14:28:18 105  	in_gc_code     IN  VARCHAR2,
14:28:18 106  	out_result_set OUT SYS_REFCURSOR
14:28:18 107  );
14:28:18 108  
14:28:18 109  PROCEDURE GET_ACCOUNT_PRODUCTS (
14:28:18 110  	in_group_id    IN  NUMBER,
14:28:18 111  	out_result_set OUT SYS_REFCURSOR
14:28:18 112  );
14:28:18 113  
14:28:18 114  PROCEDURE UPDATE_ACCOUNT_STATUS (
14:28:18 115  	in_account_id	     IN ACCOUNT.ID%TYPE,
14:28:18 116  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
14:28:18 117  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
14:28:18 118  );
14:28:18 119  
14:28:18 120  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
14:28:18 121  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
14:28:18 122  	out_licenses_num OUT NUMBER
14:28:18 123  );
14:28:18 124  
14:28:18 125  PROCEDURE SET_TAX_EXEMPT (
14:28:18 126  	in_group_id  IN NUMBER,
14:28:18 127  	in_exempt_id IN VARCHAR2
14:28:18 128  );
14:28:18 129  
14:28:18 130  PROCEDURE IS_TAX_EXEMPT (
14:28:18 131  	in_group_id	  IN NUMBER,
14:28:18 132  	out_is_tax_exempt OUT NUMBER
14:28:18 133  );
14:28:18 134  
14:28:18 135  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
14:28:18 136  	in_account_id IN NUMBER,
14:28:18 137  	out_group_id  OUT NUMBER
14:28:18 138  );
14:28:18 139  
14:28:18 140  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:28:18 141  	in_group_id IN NUMBER,
14:28:18 142  	out_account_id	OUT NUMBER
14:28:18 143  );
14:28:18 144  
14:28:18 145  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
14:28:18 146  	in_invoice_id IN NUMBER,
14:28:18 147  	out_group_ids OUT SYS_REFCURSOR
14:28:18 148  );
14:28:18 149  
14:28:18 150  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
14:28:18 151  	in_group_id	  IN NUMBER,
14:28:18 152  	out_tax_exempt_id OUT VARCHAR2
14:28:18 153  );
14:28:18 154  
14:28:18 155  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
14:28:18 156  	in_group_id    IN NUMBER,
14:28:18 157  	out_result_set OUT SYS_REFCURSOR
14:28:18 158  );
14:28:18 159  
14:28:18 160  PROCEDURE GET_USR_ALL_SBSCR_IDS (
14:28:18 161  	in_group_id	   IN NUMBER,
14:28:18 162  	out_result_set	   OUT SYS_REFCURSOR
14:28:18 163  );
14:28:18 164  
14:28:18 165  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
14:28:18 166  	in_group_id	   IN NUMBER,
14:28:18 167  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:28:18 168  	out_result_set	   OUT SYS_REFCURSOR
14:28:18 169  );
14:28:18 170  
14:28:18 171  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
14:28:18 172  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:28:18 173  	in_expiration_date IN DATE,
14:28:18 174  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
14:28:18 175  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:18 176  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
14:28:18 177  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
14:28:18 178  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
14:28:18 179  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
14:28:18 180  	in_lower_bound IN NUMBER DEFAULT 1,
14:28:18 181  	in_upper_bound IN NUMBER DEFAULT 11,
14:28:18 182  	out_result_set OUT SYS_REFCURSOR
14:28:18 183  );
14:28:18 184  
14:28:18 185  END PROCS_ACCOUNT_V23;
14:28:18 186  .
14:28:18 SQL> /

Package created.

Elapsed: 00:00:00.05
14:28:18 SQL> 
14:28:18 SQL> prompt Compiling header for procs_address_cru.sql
Compiling header for procs_address_cru.sql
14:28:18 SQL> --------------------------------------------------------------------------------
14:28:18 SQL> -- DDL for package PROCS_ADDRESS_CRU
14:28:18 SQL> --------------------------------------------------------------------------------
14:28:18 SQL> 
14:28:18 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V23" AS
14:28:18   2  
14:28:18   3  PROCEDURE CREATE_ADDRESS(
14:28:18   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
14:28:18   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
14:28:18   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:28:18   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:28:18   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:28:18   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:28:18  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:18  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:28:18  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
14:28:18  13  );
14:28:18  14  
14:28:18  15  PROCEDURE UPDATE_ADDRESS(
14:28:18  16  	in_address_id	      IN ADDRESS.ID%TYPE,
14:28:18  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:28:18  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:28:18  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:28:18  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:28:18  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:18  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:28:18  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
14:28:18  24  );
14:28:18  25  
14:28:18  26  END PROCS_ADDRESS_CRU_V23;
14:28:18  27  .
14:28:18 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:18 SQL> 
14:28:18 SQL> prompt Compiling header for procs_address.sql
Compiling header for procs_address.sql
14:28:18 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V23" AS
14:28:18   2  
14:28:18   3  PROCEDURE CREATE_ADDRESS(
14:28:18   4  /*
14:28:18   5  Throws exceptions:
14:28:18   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:18   7  */
14:28:18   8  	  out_address_id	OUT NUMBER,
14:28:18   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:28:18  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:28:18  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:28:18  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:28:18  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:18  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:28:18  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
14:28:18  16  );
14:28:18  17  
14:28:18  18  PROCEDURE UPDATE_ADDRESS(
14:28:18  19  /*
14:28:18  20  Throws exceptions:
14:28:18  21  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:18  22  */
14:28:18  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
14:28:18  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:28:18  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:28:18  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:28:18  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:28:18  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:18  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:28:18  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
14:28:18  31  );
14:28:18  32  
14:28:18  33  PROCEDURE GET_ADDRESS (
14:28:18  34  /*
14:28:18  35  Throws exceptions:
14:28:18  36  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:18  37  */
14:28:18  38  	  in_id 		IN ADDRESS.ID%TYPE,
14:28:18  39  	  out_result_set	OUT SYS_REFCURSOR
14:28:18  40  );
14:28:18  41  
14:28:18  42  END PROCS_ADDRESS_V23;
14:28:18  43  .
14:28:18 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_adjustments.sql
Compiling header for procs_adjustments.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_ADJUSTMENTS
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
14:28:19   4  	in_invoice_id		  IN NUMBER,
14:28:19   5  	in_adjustment_reason	  IN VARCHAR2,
14:28:19   6  	in_is_credit		  IN NUMBER,
14:28:19   7  	in_charge_id		  IN NUMBER,
14:28:19   8  	in_business_date	  IN DATE,
14:28:19   9  	in_created_by		  IN VARCHAR2,
14:28:19  10  	out_invoice_adjustment_id OUT NUMBER
14:28:19  11  );
14:28:19  12  
14:28:19  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
14:28:19  14  	in_invoice_id		  IN NUMBER,
14:28:19  15  	in_original_charge_id	  IN NUMBER,
14:28:19  16  	in_charge_id		  IN NUMBER,
14:28:19  17  	in_updated_by		  IN VARCHAR2
14:28:19  18  );
14:28:19  19  
14:28:19  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
14:28:19  21  	in_line_item_id 	    IN NUMBER,
14:28:19  22  	in_invoice_adjustment_id    IN NUMBER,
14:28:19  23  	in_amount		    IN NUMBER,
14:28:19  24  	in_tax			    IN NUMBER,
14:28:19  25  	in_discount		    IN NUMBER,
14:28:19  26  	in_created_by		    IN VARCHAR2,
14:28:19  27  	out_line_item_adjustment_id OUT NUMBER
14:28:19  28  );
14:28:19  29  
14:28:19  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
14:28:19  31  	in_tax_id		   IN NUMBER,
14:28:19  32  	in_line_item_adjustment_id IN NUMBER,
14:28:19  33  	in_amount		   IN NUMBER,
14:28:19  34  	in_created_by		   IN VARCHAR2,
14:28:19  35  	out_tax_adjustment_id	   OUT NUMBER
14:28:19  36  );
14:28:19  37  
14:28:19  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
14:28:19  39  	in_discount_id		   NUMBER,
14:28:19  40  	in_line_item_id 	   NUMBER,
14:28:19  41  	in_line_item_adjustment_id IN NUMBER,
14:28:19  42  	in_amount		   IN NUMBER,
14:28:19  43  	in_created_by		   IN VARCHAR2,
14:28:19  44  	out_discount_li_id	   OUT NUMBER
14:28:19  45  );
14:28:19  46  
14:28:19  47  END PROCS_ADJUSTMENTS_V23;
14:28:19  48  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.02
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_adx.sql
Compiling header for procs_adx.sql
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE GET_SUB_ADX_INFO (
14:28:19   4  /*
14:28:19   5  Throws exceptions:
14:28:19   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19   7  */
14:28:19   8  	out_result_set	    OUT SYS_REFCURSOR,
14:28:19   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
14:28:19  10  );
14:28:19  11  
14:28:19  12  END PROCS_ADX_V23;
14:28:19  13  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.02
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_amazon_cru.sql
Compiling header for procs_amazon_cru.sql
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE UPDATE_AMAZON_APPSTORE_RECEIPT(
14:28:19   4  	in_id		   IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:19   5  	in_updated_by	   IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE,
14:28:19   6  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE DEFAULT NULL,
14:28:19   7  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE DEFAULT NULL,
14:28:19   8  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE DEFAULT NULL,
14:28:19   9  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE DEFAULT NULL,
14:28:19  10  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
14:28:19  11  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE DEFAULT NULL,
14:28:19  12  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE DEFAULT NULL,
14:28:19  13  	in_last_check_date IN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE DEFAULT NULL
14:28:19  14  );
14:28:19  15  
14:28:19  16  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
14:28:19  17  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:19  18  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
14:28:19  19  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
14:28:19  20  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
14:28:19  21  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
14:28:19  22  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
14:28:19  23  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
14:28:19  24  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
14:28:19  25  );
14:28:19  26  
14:28:19  27  PROCEDURE CREATE_AMAZON_SUB(
14:28:19  28  	  out_id	      OUT NUMBER,
14:28:19  29  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
14:28:19  30  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
14:28:19  31  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
14:28:19  32  );
14:28:19  33  
14:28:19  34  END PROCS_AMAZON_CRU_V23;
14:28:19  35  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_amazon.sql
Compiling header for procs_amazon.sql
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE AASR_PURCHASE_TOKEN_USED(
14:28:19   4  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
14:28:19   5  	out_data	  OUT NUMBER
14:28:19   6  );
14:28:19   7  
14:28:19   8  PROCEDURE UPDATE_AASR_LAST_CHECK_DATE(
14:28:19   9  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:19  10  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
14:28:19  11  );
14:28:19  12  
14:28:19  13  PROCEDURE EXPIRED_AASR_SUB_IDS(
14:28:19  14  	out_data   OUT SYS_REFCURSOR
14:28:19  15  );
14:28:19  16  
14:28:19  17  PROCEDURE UPDATE_AASR_PURCHASE_TOKEN(
14:28:19  18  	in_id		  IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:19  19  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
14:28:19  20  	in_updated_by	  IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
14:28:19  21  );
14:28:19  22  
14:28:19  23  PROCEDURE UPDATE_AASR_END_DATE(
14:28:19  24  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:19  25  	in_end_date   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE,
14:28:19  26  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
14:28:19  27  );
14:28:19  28  
14:28:19  29  PROCEDURE AASR_RECEIPTS_WITH_ACTIVE_SUBS(
14:28:19  30  	out_data   OUT SYS_REFCURSOR,
14:28:19  31  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:19  32  );
14:28:19  33  
14:28:19  34  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
14:28:19  35  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:19  36  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
14:28:19  37  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
14:28:19  38  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
14:28:19  39  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
14:28:19  40  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
14:28:19  41  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
14:28:19  42  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
14:28:19  43  );
14:28:19  44  
14:28:19  45  PROCEDURE AMAZON_APPSTORE_RECEIPTS(
14:28:19  46  	in_user_id IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
14:28:19  47  	in_sku	   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
14:28:19  48  	out_data   OUT SYS_REFCURSOR
14:28:19  49  );
14:28:19  50  
14:28:19  51  PROCEDURE CREATE_AMAZON_SUB(
14:28:19  52  	  out_id	      OUT NUMBER,
14:28:19  53  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
14:28:19  54  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
14:28:19  55  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
14:28:19  56  );
14:28:19  57  
14:28:19  58  PROCEDURE GET_ACTIVE_SUB_IDS (
14:28:19  59  	out_result_set	    OUT SYS_REFCURSOR,
14:28:19  60  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
14:28:19  61  );
14:28:19  62  
14:28:19  63  PROCEDURE GET_ACTIVE_GROUP_IDS (
14:28:19  64  	out_result_set	    OUT SYS_REFCURSOR,
14:28:19  65  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
14:28:19  66  );
14:28:19  67  
14:28:19  68  END PROCS_AMAZON_V23;
14:28:19  69  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_charge_cru.sql
Compiling header for procs_charge_cru.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_CHARGE_CRU
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_CHARGE(
14:28:19   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
14:28:19   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
14:28:19   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
14:28:19   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
14:28:19   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
14:28:19   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
14:28:19  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
14:28:19  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:28:19  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
14:28:19  13  );
14:28:19  14  
14:28:19  15  PROCEDURE UPDATE_CHARGE(
14:28:19  16  	in_charge_id	      IN CHARGE.ID%TYPE,
14:28:19  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:28:19  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
14:28:19  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
14:28:19  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
14:28:19  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
14:28:19  22  );
14:28:19  23  
14:28:19  24  END PROCS_CHARGE_CRU_V23;
14:28:19  25  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_charge.sql
Compiling header for procs_charge.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_CHARGE
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_CHARGE(
14:28:19   4  /*
14:28:19   5  Throws exceptions:
14:28:19   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19   8  */
14:28:19   9  	in_invoice_id	      IN NUMBER,
14:28:19  10  	in_transaction_id     IN NUMBER,
14:28:19  11  	in_instrument_type_id IN NUMBER,
14:28:19  12  	in_instrument_id      IN NUMBER,
14:28:19  13  	in_charge_amount      IN NUMBER,
14:28:19  14  	in_created_by	      IN VARCHAR2,
14:28:19  15  	in_charge_status_id   IN NUMBER,
14:28:19  16  	out_charge_id	      OUT NUMBER
14:28:19  17  );
14:28:19  18  
14:28:19  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
14:28:19  20  /*
14:28:19  21  Throws exceptions:
14:28:19  22  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  23  */
14:28:19  24  	out_result_set	    OUT SYS_REFCURSOR,
14:28:19  25  	in_row_number	    IN NUMBER DEFAULT NULL
14:28:19  26  );
14:28:19  27  
14:28:19  28  PROCEDURE GET_UNPROCESSED_CHARGES (
14:28:19  29  /*
14:28:19  30  Throws exceptions:
14:28:19  31  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  32  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  33  */
14:28:19  34  	in_invoice_id  IN NUMBER,
14:28:19  35  	out_result_set OUT SYS_REFCURSOR
14:28:19  36  );
14:28:19  37  
14:28:19  38  PROCEDURE GET_PROCESSED_CHARGES (
14:28:19  39  /*
14:28:19  40  Throws exceptions:
14:28:19  41  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  42  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  43  */
14:28:19  44  	in_invoice_id  IN NUMBER,
14:28:19  45  	out_result_set OUT SYS_REFCURSOR
14:28:19  46  );
14:28:19  47  
14:28:19  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
14:28:19  49  /*
14:28:19  50  Throws exceptions:
14:28:19  51  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  52  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  53  */
14:28:19  54  	in_charge_id	    IN NUMBER,
14:28:19  55  	out_subscription_id OUT NUMBER
14:28:19  56  );
14:28:19  57  
14:28:19  58  PROCEDURE UPDATE_CHARGE_STATUS (
14:28:19  59  /*
14:28:19  60  Throws exceptions:
14:28:19  61  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  62  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  63  */
14:28:19  64  	in_charge_id	    IN CHARGE.ID%TYPE,
14:28:19  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:28:19  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
14:28:19  67  );
14:28:19  68  
14:28:19  69  FUNCTION IS_CHARGE_COLLECTED (
14:28:19  70  /*
14:28:19  71  Throws:
14:28:19  72  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  73  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  74  Returns:
14:28:19  75  GLOBAL_CONST.TRUE if transaction collected,
14:28:19  76  GLOBAL_CONST.FALSE else
14:28:19  77  */
14:28:19  78  	in_charge_id IN NUMBER
14:28:19  79  ) RETURN NUMBER;
14:28:19  80  
14:28:19  81  PROCEDURE GET_COLLECTED_CHARGES (
14:28:19  82  /*
14:28:19  83  Throws exceptions:
14:28:19  84  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  85  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  86  */
14:28:19  87  	in_invoice_id  IN NUMBER,
14:28:19  88  	out_result_set OUT SYS_REFCURSOR
14:28:19  89  );
14:28:19  90  
14:28:19  91  END PROCS_CHARGE_V23;
14:28:19  92  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_cupy.sql
Compiling header for procs_cupy.sql
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
14:28:19   2  
14:28:19   3  	PROCEDURE POPULATE_REQUEST_INFO(
14:28:19   4  	  in_hours_prior    IN	NUMBER,
14:28:19   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
14:28:19   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
14:28:19   7  	);
14:28:19   8  
14:28:19   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
14:28:19  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:28:19  11  	  in_start	     IN NUMBER,
14:28:19  12  	  in_end	     IN NUMBER,
14:28:19  13  	  out_result_set     OUT SYS_REFCURSOR
14:28:19  14  	);
14:28:19  15  
14:28:19  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
14:28:19  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
14:28:19  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
14:28:19  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
14:28:19  20  	);
14:28:19  21  
14:28:19  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
14:28:19  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:28:19  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:28:19  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
14:28:19  26  	);
14:28:19  27  
14:28:19  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
14:28:19  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
14:28:19  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
14:28:19  31  	  out_request_files   OUT SYS_REFCURSOR
14:28:19  32  	);
14:28:19  33  
14:28:19  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
14:28:19  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:28:19  36  	  out_count OUT NUMBER
14:28:19  37  	);
14:28:19  38  
14:28:19  39  	PROCEDURE GET_CREDIT_CARD_INFO (
14:28:19  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
14:28:19  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
14:28:19  42  	  out_card_info        OUT SYS_REFCURSOR
14:28:19  43  	);
14:28:19  44  
14:28:19  45  	PROCEDURE UPDATE_CC_UPDATE(
14:28:19  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
14:28:19  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:28:19  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
14:28:19  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
14:28:19  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
14:28:19  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:28:19  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
14:28:19  53  	);
14:28:19  54  
14:28:19  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
14:28:19  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
14:28:19  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:28:19  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
14:28:19  59  	);
14:28:19  60  
14:28:19  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
14:28:19  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
14:28:19  63  	  out_request_file     OUT SYS_REFCURSOR
14:28:19  64  	);
14:28:19  65  
14:28:19  66  	PROCEDURE SUSPEND_CREDIT_CARD (
14:28:19  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
14:28:19  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
14:28:19  69  	);
14:28:19  70  
14:28:19  71  	PROCEDURE UPDATE_CREDIT_CARD (
14:28:19  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
14:28:19  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:28:19  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
14:28:19  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
14:28:19  76  	);
14:28:19  77  
14:28:19  78  	PROCEDURE COMPLETABLE_REQUESTS (
14:28:19  79  	  out_request_files OUT SYS_REFCURSOR
14:28:19  80  	);
14:28:19  81  
14:28:19  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
14:28:19  83  	  in_max_hours_before_report IN  NUMBER,
14:28:19  84  	  out_request_files	     OUT SYS_REFCURSOR
14:28:19  85  	);
14:28:19  86  
14:28:19  87  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
14:28:19  88  	  in_account_id IN NUMBER,
14:28:19  89  	  out_group_id	OUT NUMBER
14:28:19  90  	);
14:28:19  91  
14:28:19  92  	PROCEDURE GET_LICENSE_BY_ID (
14:28:19  93  	  in_license_id  IN NUMBER,
14:28:19  94  	  out_result_set OUT SYS_REFCURSOR
14:28:19  95  	);
14:28:19  96  
14:28:19  97  END PROCS_CUPY;
14:28:19  98  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_entitlement.sql
Compiling header for procs_entitlement.sql
14:28:19 SQL> CREATE OR REPLACE
14:28:19   2  PACKAGE PROCS_ENTITLEMENT_V23 AS
14:28:19   3  
14:28:19   4  PROCEDURE GET_ALL_ENTITLEMENTS(
14:28:19   5  	in_group_id IN NUMBER,
14:28:19   6  	out_result_set OUT SYS_REFCURSOR);
14:28:19   7  
14:28:19   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
14:28:19   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:19  10  	out_result_set OUT SYS_REFCURSOR);
14:28:19  11  
14:28:19  12  END PROCS_ENTITLEMENT_V23;
14:28:19  13  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_fin_instruments_cru.sql
Compiling header for procs_fin_instruments_cru.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_CREDIT_CARD(
14:28:19   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
14:28:19   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
14:28:19   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
14:28:19   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
14:28:19   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
14:28:19   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
14:28:19  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
14:28:19  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
14:28:19  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
14:28:19  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
14:28:19  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
14:28:19  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:28:19  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
14:28:19  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
14:28:19  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
14:28:19  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
14:28:19  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
14:28:19  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
14:28:19  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
14:28:19  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
14:28:19  24  );
14:28:19  25  
14:28:19  26  PROCEDURE UPDATE_CREDIT_CARD(
14:28:19  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
14:28:19  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:28:19  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
14:28:19  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:28:19  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
14:28:19  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
14:28:19  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
14:28:19  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:19  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
14:28:19  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
14:28:19  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:28:19  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
14:28:19  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
14:28:19  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
14:28:19  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
14:28:19  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
14:28:19  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
14:28:19  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
14:28:19  45  );
14:28:19  46  
14:28:19  47  PROCEDURE CREATE_PAYPAL(
14:28:19  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
14:28:19  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
14:28:19  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
14:28:19  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:28:19  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
14:28:19  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
14:28:19  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
14:28:19  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
14:28:19  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
14:28:19  57  	in_state			IN PAYPAL.STATE%TYPE,
14:28:19  58  	in_city 			IN PAYPAL.CITY%TYPE,
14:28:19  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
14:28:19  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
14:28:19  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
14:28:19  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
14:28:19  63  );
14:28:19  64  
14:28:19  65  PROCEDURE UPDATE_PAYPAL(
14:28:19  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
14:28:19  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:28:19  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
14:28:19  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
14:28:19  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
14:28:19  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:28:19  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:28:19  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
14:28:19  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
14:28:19  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:19  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
14:28:19  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:28:19  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
14:28:19  79  );
14:28:19  80  
14:28:19  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
14:28:19  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
14:28:19  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
14:28:19  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
14:28:19  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:19  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
14:28:19  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:28:19  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
14:28:19  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
14:28:19  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
14:28:19  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
14:28:19  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
14:28:19  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
14:28:19  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
14:28:19  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
14:28:19  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
14:28:19  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
14:28:19  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
14:28:19  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
14:28:19 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
14:28:19 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
14:28:19 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL,
14:28:19 103  	in_campaign		      IN GC_CAMPAIGN_AND_REF.CAMPAIGN%TYPE DEFAULT NULL,
14:28:19 104  	in_reference_code	      IN GC_CAMPAIGN_AND_REF.REFERENCE_CODE%TYPE DEFAULT NULL
14:28:19 105  );
14:28:19 106  
14:28:19 107  PROCEDURE UPDATE_GIFT_CERTIFICATE(
14:28:19 108  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
14:28:19 109  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:28:19 110  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
14:28:19 111  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
14:28:19 112  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
14:28:19 113  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
14:28:19 114  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
14:28:19 115  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
14:28:19 116  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
14:28:19 117  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
14:28:19 118  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
14:28:19 119  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
14:28:19 120  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
14:28:19 121  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
14:28:19 122  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
14:28:19 123  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
14:28:19 124  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
14:28:19 125  );
14:28:19 126  
14:28:19 127  END PROCS_FIN_INSTRUMENTS_CRU_V23;
14:28:19 128  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_fin_instruments.sql
Compiling header for procs_fin_instruments.sql
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
14:28:19   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:19   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
14:28:19   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
14:28:19   7  );
14:28:19   8  
14:28:19   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
14:28:19  10  	in_invoice_id		     IN NUMBER,
14:28:19  11  	out_is_invoice_for_redeem_gc OUT NUMBER
14:28:19  12  );
14:28:19  13  
14:28:19  14  PROCEDURE GET_UNREDEEMED_GCS (
14:28:19  15  	out_result_set		OUT SYS_REFCURSOR,
14:28:19  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:28:19  17  	in_num_rows		IN NUMBER DEFAULT 10000,
14:28:19  18  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:19  19  );
14:28:19  20  
14:28:19  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
14:28:19  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:19  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
14:28:19  24  );
14:28:19  25  
14:28:19  26  PROCEDURE ADD_CREDIT_CARD (
14:28:19  27  	in_group_id		  IN NUMBER,
14:28:19  28  	in_updated_by		  IN VARCHAR2,
14:28:19  29  	in_instrument_name	  IN VARCHAR2,
14:28:19  30  	in_card_holder_name	  IN VARCHAR2,
14:28:19  31  	in_street_address	  IN VARCHAR2,
14:28:19  32  	in_street_address2	  IN VARCHAR2,
14:28:19  33  	in_state		  IN VARCHAR2,
14:28:19  34  	in_city 		  IN VARCHAR2,
14:28:19  35  	in_postal_code		  IN VARCHAR2,
14:28:19  36  	in_country		  IN CHAR,
14:28:19  37  	in_last_four_cc 	  IN VARCHAR2,
14:28:19  38  	in_expiration_date	  IN DATE,
14:28:19  39  	in_credit_card_type_id	  IN NUMBER,
14:28:19  40  	in_token		  IN VARCHAR2,
14:28:19  41  	in_chase_profile_id	  IN VARCHAR2,
14:28:19  42  	in_credit_card_status_id  IN NUMBER,
14:28:19  43  	in_private_first_name	  IN VARCHAR2,
14:28:19  44  	in_private_last_name	  IN VARCHAR2,
14:28:19  45  	out_credit_card_id	  OUT NUMBER
14:28:19  46  );
14:28:19  47  
14:28:19  48  /******************************************************************************/
14:28:19  49  
14:28:19  50  PROCEDURE ADD_PAYPAL (
14:28:19  51  	in_group_id			IN NUMBER,
14:28:19  52  	in_instrument_name		IN VARCHAR2,
14:28:19  53  	in_private_email_address	IN VARCHAR2,
14:28:19  54  	in_created_by			IN VARCHAR2,
14:28:19  55  	in_paypal_status_id		IN NUMBER,
14:28:19  56  	in_paypal_prvt_street_address	IN VARCHAR2,
14:28:19  57  	in_paypal_prvt_street_address2	IN VARCHAR2,
14:28:19  58  	in_state			IN VARCHAR2,
14:28:19  59  	in_city 			IN VARCHAR2,
14:28:19  60  	in_postal_code			IN VARCHAR2,
14:28:19  61  	in_country			IN CHAR,
14:28:19  62  	in_expiration_date		IN DATE,
14:28:19  63  	in_secret_token 		IN VARCHAR2,
14:28:19  64  	out_paypal_id			OUT NUMBER
14:28:19  65  );
14:28:19  66  
14:28:19  67  /********************************************/
14:28:19  68  
14:28:19  69  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
14:28:19  70  	in_code       IN VARCHAR,
14:28:19  71  	out_result_set OUT SYS_REFCURSOR
14:28:19  72  );
14:28:19  73  
14:28:19  74  /********************************************/
14:28:19  75  
14:28:19  76  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
14:28:19  77  	in_gift_certificate_id IN NUMBER,
14:28:19  78  	out_result_set	       OUT SYS_REFCURSOR
14:28:19  79  );
14:28:19  80  
14:28:19  81  /********************************************/
14:28:19  82  
14:28:19  83  PROCEDURE DISABLE_CREDIT_CARD (
14:28:19  84  	in_credit_card_id IN NUMBER,
14:28:19  85  	in_updated_by	  IN VARCHAR2
14:28:19  86  );
14:28:19  87  
14:28:19  88  /********************************************/
14:28:19  89  
14:28:19  90  PROCEDURE DISABLE_PAYPAL (
14:28:19  91  	in_paypal_id  IN NUMBER,
14:28:19  92  	in_updated_by IN VARCHAR2
14:28:19  93  );
14:28:19  94  
14:28:19  95  /********************************************/
14:28:19  96  
14:28:19  97  PROCEDURE UPDATE_CREDIT_CARD (
14:28:19  98  	in_credit_card_id	  IN NUMBER,
14:28:19  99  	in_updated_by		  IN VARCHAR2,
14:28:19 100  	in_instrument_name	  IN VARCHAR2,
14:28:19 101  	in_is_default		  IN NUMBER
14:28:19 102  );
14:28:19 103  
14:28:19 104  /********************************************/
14:28:19 105  
14:28:19 106  PROCEDURE START_GC_PURCHASING (
14:28:19 107  	in_group_id		  IN NUMBER,
14:28:19 108  	in_offer_chain_id	  IN VARCHAR2,
14:28:19 109  	in_gift_certificate_code  IN  VARCHAR2,
14:28:19 110  	in_created_by		  IN  VARCHAR2,
14:28:19 111  	in_recipient_name	  IN  VARCHAR2,
14:28:19 112  	in_recipient_email	  IN  VARCHAR2,
14:28:19 113  	in_recipient_address_id   IN NUMBER,
14:28:19 114  	in_recipient_notify_date  IN DATE,
14:28:19 115  	in_sender_name		  IN VARCHAR2,
14:28:19 116  	in_sender_email 	  IN VARCHAR2,
14:28:19 117  	in_gift_message 	  IN  VARCHAR2,
14:28:19 118  	in_expiration_date	  IN DATE,
14:28:19 119  	in_campaign		  IN VARCHAR2,
14:28:19 120  	in_reference_code	  IN VARCHAR2,
14:28:19 121  	out_gift_certificate_id   OUT NUMBER,
14:28:19 122  	out_invoice_id		  OUT NUMBER
14:28:19 123  );
14:28:19 124  
14:28:19 125  PROCEDURE FINALIZE_GC_PURCHASING (
14:28:19 126  	in_invoice_id	      IN NUMBER,
14:28:19 127  	in_created_by	      IN VARCHAR2,
14:28:19 128  	in_instrument_id      IN NUMBER,
14:28:19 129  	in_instrument_type_id IN NUMBER,
14:28:19 130  	in_order_id	      IN VARCHAR2,
14:28:19 131  	in_transaction_id     IN NUMBER,
14:28:19 132  	out_charge_amount     OUT NUMBER
14:28:19 133  );
14:28:19 134  
14:28:19 135  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
14:28:19 136  	in_group_id	  IN NUMBER,
14:28:19 137  	in_offer_chain_id IN VARCHAR2,
14:28:19 138  	in_gift_certificate_code  IN  VARCHAR2,
14:28:19 139  	in_created_by IN  VARCHAR2,
14:28:19 140  	in_recipient_name IN  VARCHAR2,
14:28:19 141  	in_recipient_email IN  VARCHAR2,
14:28:19 142  	in_sender_name IN VARCHAR2,
14:28:19 143  	in_sender_email IN VARCHAR2,
14:28:19 144  	in_gift_message IN  VARCHAR2,
14:28:19 145  	in_instrument_id  IN  NUMBER,
14:28:19 146  	in_instrument_type_id IN NUMBER,
14:28:19 147  	in_expiration_date IN DATE,
14:28:19 148  	in_order_id IN VARCHAR2,
14:28:19 149  	in_transaction_id IN NUMBER
14:28:19 150  );
14:28:19 151  
14:28:19 152  /*********************************************/
14:28:19 153  
14:28:19 154  PROCEDURE REDEEM_GIFT_CERTIFICATE (
14:28:19 155  	in_group_id			IN NUMBER,
14:28:19 156  	in_gift_certificate_code	IN VARCHAR2,
14:28:19 157  	in_created_by			IN VARCHAR2,
14:28:19 158  	in_redeemer_address_id		IN NUMBER,
14:28:19 159  	in_fin_instrument_id		IN NUMBER,
14:28:19 160  	in_fin_instrument_type_id	IN NUMBER,
14:28:19 161  	in_redemption_offer_chain_id	IN NUMBER,
14:28:19 162  	out_subscription_id		OUT NUMBER,
14:28:19 163  	out_license_id			OUT NUMBER
14:28:19 164  );
14:28:19 165  
14:28:19 166  /********************************************/
14:28:19 167  
14:28:19 168  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
14:28:19 169  	in_group_id	       IN  NUMBER,
14:28:19 170  	out_instrument_type_id OUT NUMBER,
14:28:19 171  	out_instrument_id      OUT NUMBER
14:28:19 172  );
14:28:19 173  
14:28:19 174  /************************************************/
14:28:19 175  
14:28:19 176  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
14:28:19 177  	in_group_id	      IN NUMBER,
14:28:19 178  	in_instrument_type_id IN NUMBER,
14:28:19 179  	in_instrument_id      IN NUMBER,
14:28:19 180  	in_updated_by	      IN VARCHAR2
14:28:19 181  );
14:28:19 182  
14:28:19 183  /***************************************************/
14:28:19 184  
14:28:19 185  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
14:28:19 186  	in_group_id	      IN NUMBER
14:28:19 187  );
14:28:19 188  
14:28:19 189  /****************************************************/
14:28:19 190  
14:28:19 191  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:28:19 192  	in_credit_card_id IN  NUMBER,
14:28:19 193  	out_result_set	  OUT SYS_REFCURSOR
14:28:19 194  );
14:28:19 195  
14:28:19 196  /****************************************************/
14:28:19 197  
14:28:19 198  PROCEDURE GET_PAYPAL_BY_ID (
14:28:19 199  	in_paypal_id   IN  NUMBER,
14:28:19 200  	out_result_set OUT SYS_REFCURSOR
14:28:19 201  );
14:28:19 202  
14:28:19 203  /***********************************************/
14:28:19 204  
14:28:19 205  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
14:28:19 206  	in_credit_card_id NUMBER
14:28:19 207  ) RETURN NUMBER;
14:28:19 208  
14:28:19 209  /*************************************************/
14:28:19 210  
14:28:19 211  PROCEDURE GET_PURCHASED_GCERTIFICATES (
14:28:19 212  	in_group_id    IN NUMBER,
14:28:19 213  	out_result_set OUT SYS_REFCURSOR
14:28:19 214  );
14:28:19 215  
14:28:19 216  /*************************************************/
14:28:19 217  
14:28:19 218  -- isGiftCertificateForProperOffer
14:28:19 219  
14:28:19 220  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
14:28:19 221  	in_gift_certificate_id IN NUMBER,
14:28:19 222  	in_charge_id	       IN NUMBER,
14:28:19 223  	out_result	       OUT NUMBER
14:28:19 224  );
14:28:19 225  
14:28:19 226  FUNCTION IS_CREDIT_CARD_EXISTS (
14:28:19 227  /*
14:28:19 228  1 - if instrument exists
14:28:19 229  0 - else
14:28:19 230  */
14:28:19 231  	in_credit_card_id IN NUMBER
14:28:19 232  ) RETURN NUMBER;
14:28:19 233  
14:28:19 234  FUNCTION IS_PAYPAL_EXISTS (
14:28:19 235  /*
14:28:19 236  1 - if instrument exists
14:28:19 237  0 - else
14:28:19 238  */
14:28:19 239  	in_paypal_id IN NUMBER
14:28:19 240  ) RETURN NUMBER;
14:28:19 241  
14:28:19 242  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
14:28:19 243  /*
14:28:19 244  1 - if instrument exists
14:28:19 245  0 - else
14:28:19 246  */
14:28:19 247  	in_gift_certificate_id IN NUMBER
14:28:19 248  ) RETURN NUMBER;
14:28:19 249  
14:28:19 250  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
14:28:19 251  	in_credit_card_id IN NUMBER,
14:28:19 252  	out_group_id	  OUT NUMBER
14:28:19 253  );
14:28:19 254  
14:28:19 255  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
14:28:19 256  	in_paypal_id IN NUMBER,
14:28:19 257  	out_group_id	  OUT NUMBER
14:28:19 258  );
14:28:19 259  
14:28:19 260  PROCEDURE GET_EXPIRING_PAYPAL (
14:28:19 261  	in_expire_window_days	IN NUMBER,
14:28:19 262  	in_creation_limit_days	IN NUMBER,
14:28:19 263  	in_retry_throttle_name	PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
14:28:19 264  	out_result_set		OUT SYS_REFCURSOR
14:28:19 265  );
14:28:19 266  
14:28:19 267  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
14:28:19 268  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
14:28:19 269  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
14:28:19 270  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
14:28:19 271  );
14:28:19 272  
14:28:19 273  PROCEDURE UPDATE_PAYPAL_STATUS (
14:28:19 274  	in_paypal_id	    IN PAYPAL.ID%TYPE,
14:28:19 275  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
14:28:19 276  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
14:28:19 277  );
14:28:19 278  
14:28:19 279  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
14:28:19 280  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
14:28:19 281  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
14:28:19 282  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
14:28:19 283  );
14:28:19 284  
14:28:19 285  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:28:19 286  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:19 287  	out_result_set OUT SYS_REFCURSOR
14:28:19 288  );
14:28:19 289  
14:28:19 290  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
14:28:19 291  	in_old_fin_instrument_id   IN NUMBER,
14:28:19 292  	in_old_fin_instrument_type IN NUMBER,
14:28:19 293  	in_new_fin_instrument_id   IN NUMBER,
14:28:19 294  	in_new_fin_instrument_type IN NUMBER,
14:28:19 295  	in_updated_by		   IN VARCHAR2
14:28:19 296  );
14:28:19 297  
14:28:19 298  END PROCS_FIN_INSTRUMENTS_V23;
14:28:19 299  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_group_account_cru.sql
Compiling header for procs_group_account_cru.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
14:28:19   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
14:28:19   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
14:28:19   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
14:28:19   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
14:28:19   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
14:28:19   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
14:28:19  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
14:28:19  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:19  12  );
14:28:19  13  
14:28:19  14  PROCEDURE CREATE_GROUP_ACCOUNT (
14:28:19  15  	in_subscription_id	 IN NUMBER,
14:28:19  16  	in_group_name		 IN VARCHAR2,
14:28:19  17  	in_first_name		 IN VARCHAR2,
14:28:19  18  	in_last_name		 IN VARCHAR2,
14:28:19  19  	in_email		 IN VARCHAR2,
14:28:19  20  	in_phone		 IN VARCHAR2,
14:28:19  21  	in_organization_type	 IN VARCHAR2,
14:28:19  22  	in_seats		 IN NUMBER,
14:28:19  23  	in_seat_ttl_in_hours	 IN NUMBER,
14:28:19  24  	in_ip			 IN NUMBER,
14:28:19  25  	in_created_by		 IN VARCHAR2
14:28:19  26  );
14:28:19  27  
14:28:19  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
14:28:19  29  	in_group_account_id    IN NUMBER,
14:28:19  30  	in_borrower_account_id IN NUMBER,
14:28:19  31  	in_ip_address	       IN VARCHAR2,
14:28:19  32  	in_email_domain        IN VARCHAR2,
14:28:19  33  	in_start_date	       IN DATE,
14:28:19  34  	in_end_date	       IN DATE,
14:28:19  35  	in_created_by	       IN VARCHAR2
14:28:19  36  );
14:28:19  37  
14:28:19  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
14:28:19  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:19  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:28:19  41  );
14:28:19  42  
14:28:19  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
14:28:19  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
14:28:19  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:28:19  46  );
14:28:19  47  
14:28:19  48  PROCEDURE ADD_IP_RANGE (
14:28:19  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:19  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
14:28:19  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:28:19  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:28:19  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
14:28:19  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
14:28:19  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
14:28:19  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
14:28:19  57  );
14:28:19  58  
14:28:19  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
14:28:19  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:19  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:19  62  );
14:28:19  63  
14:28:19  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
14:28:19  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:28:19  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:19  67  );
14:28:19  68  
14:28:19  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
14:28:19  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:28:19  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:19  72  );
14:28:19  73  
14:28:19  74  PROCEDURE ADD_EMAIL_DOMAIN (
14:28:19  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:19  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:28:19  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
14:28:19  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
14:28:19  79  );
14:28:19  80  
14:28:19  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
14:28:19  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:28:19  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
14:28:19  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
14:28:19  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
14:28:19  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
14:28:19  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
14:28:19  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:28:19  89  );
14:28:19  90  
14:28:19  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
14:28:19  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:28:19  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
14:28:19  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:28:19  95  );
14:28:19  96  END PROCS_GROUP_ACCOUNT_CRU_V23;
14:28:19  97  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.08
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_group_account.sql
Compiling header for procs_group_account.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V23" As
14:28:19   2  
14:28:19   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
14:28:19   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
14:28:19   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
14:28:19   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:19   7  );
14:28:19   8  
14:28:19   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
14:28:19  10  	out_result_set OUT SYS_REFCURSOR
14:28:19  11  );
14:28:19  12  
14:28:19  13  PROCEDURE EXPIRE_SUB_SHARE (
14:28:19  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
14:28:19  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:19  16  );
14:28:19  17  
14:28:19  18  PROCEDURE EXPIRE_ALL_SHARES (
14:28:19  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
14:28:19  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:19  21  );
14:28:19  22  
14:28:19  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
14:28:19  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
14:28:19  25  	in_start	 IN  NUMBER,
14:28:19  26  	in_end		 IN  NUMBER,
14:28:19  27  	in_expired	 IN  NUMBER,
14:28:19  28  	out_result_set	 OUT SYS_REFCURSOR,
14:28:19  29  	out_shares_count OUT NUMBER
14:28:19  30  );
14:28:19  31  
14:28:19  32  PROCEDURE IS_VALID_IP_ADDRESS (
14:28:19  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:19  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:28:19  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:28:19  36  	out_is_valid	    OUT NUMBER
14:28:19  37  );
14:28:19  38  
14:28:19  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
14:28:19  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:19  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:28:19  42  	out_is_valid	    OUT NUMBER
14:28:19  43  );
14:28:19  44  
14:28:19  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
14:28:19  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
14:28:19  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
14:28:19  48  	Out_Result_Set	       Out Sys_Refcursor
14:28:19  49  );
14:28:19  50  
14:28:19  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
14:28:19  52  	in_group_account_id IN NUMBER,
14:28:19  53  	in_start	    IN NUMBER,
14:28:19  54  	in_end		    IN NUMBER,
14:28:19  55  	Out_Result_Set	    OUT Sys_Refcursor
14:28:19  56  );
14:28:19  57  
14:28:19  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
14:28:19  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
14:28:19  60  	Out_Result_Set	   Out Sys_Refcursor
14:28:19  61  );
14:28:19  62  
14:28:19  63  PROCEDURE CREATE_GROUP_ACCOUNT (
14:28:19  64  	in_subscription_id	 IN NUMBER,
14:28:19  65  	in_group_name		 IN VARCHAR2,
14:28:19  66  	in_first_name		 IN VARCHAR2,
14:28:19  67  	in_last_name		 IN VARCHAR2,
14:28:19  68  	in_email		 IN VARCHAR2,
14:28:19  69  	in_phone		 IN VARCHAR2,
14:28:19  70  	in_organization_type	 IN VARCHAR2,
14:28:19  71  	in_seats		 IN NUMBER,
14:28:19  72  	in_seat_ttl_in_hours	 IN NUMBER,
14:28:19  73  	in_ip			 IN NUMBER,
14:28:19  74  	in_created_by		 IN VARCHAR2
14:28:19  75  );
14:28:19  76  
14:28:19  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
14:28:19  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:28:19  79  	out_result_set	    OUT SYS_REFCURSOR
14:28:19  80  );
14:28:19  81  
14:28:19  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
14:28:19  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:28:19  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:28:19  85  	out_result_set	    OUT SYS_REFCURSOR
14:28:19  86  );
14:28:19  87  
14:28:19  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
14:28:19  89  	in_group_account_id   IN NUMBER,
14:28:19  90  	in_start	      IN NUMBER,
14:28:19  91  	in_end		      IN NUMBER,
14:28:19  92  	in_status	      IN NUMBER,
14:28:19  93  	out_record_count      OUT NUMBER,
14:28:19  94  	out_result_set	      OUT SYS_REFCURSOR
14:28:19  95  );
14:28:19  96  
14:28:19  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
14:28:19  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:19  99  	in_start	      IN NUMBER,
14:28:19 100  	in_end		      IN NUMBER,
14:28:19 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
14:28:19 102  	out_record_count      OUT NUMBER,
14:28:19 103  	out_result_set	      OUT SYS_REFCURSOR
14:28:19 104  );
14:28:19 105  
14:28:19 106  PROCEDURE ADD_EMAIL_DOMAIN (
14:28:19 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:19 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:28:19 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
14:28:19 110  );
14:28:19 111  
14:28:19 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
14:28:19 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:19 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:19 115  );
14:28:19 116  
14:28:19 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
14:28:19 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:28:19 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:19 120  );
14:28:19 121  
14:28:19 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
14:28:19 123  	in_group_account_id    IN NUMBER,
14:28:19 124  	in_borrower_account_id IN NUMBER,
14:28:19 125  	in_ip_address	       IN VARCHAR2,
14:28:19 126  	in_email_domain        IN VARCHAR2,
14:28:19 127  	in_created_by	       IN VARCHAR2
14:28:19 128  );
14:28:19 129  
14:28:19 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
14:28:19 131  	in_group_account_id   IN NUMBER,
14:28:19 132  	out_occupied_seats   OUT NUMBER
14:28:19 133  );
14:28:19 134  
14:28:19 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
14:28:19 136  	in_group_account_id   IN NUMBER
14:28:19 137  ) RETURN NUMBER;
14:28:19 138  
14:28:19 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
14:28:19 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:19 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:28:19 142  );
14:28:19 143  
14:28:19 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
14:28:19 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
14:28:19 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:28:19 147  );
14:28:19 148  
14:28:19 149  PROCEDURE ADD_IP_RANGE (
14:28:19 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:19 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
14:28:19 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:28:19 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:28:19 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
14:28:19 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
14:28:19 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
14:28:19 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
14:28:19 158  );
14:28:19 159  
14:28:19 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
14:28:19 161  	in_group_account_id IN NUMBER,
14:28:19 162  	out_group_id OUT NUMBER
14:28:19 163  );
14:28:19 164  
14:28:19 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
14:28:19 166  	in_group_account_ip_range_id IN NUMBER,
14:28:19 167  	out_group_id OUT NUMBER
14:28:19 168  );
14:28:19 169  
14:28:19 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
14:28:19 171  	in_group_account_email_dom_id IN NUMBER,
14:28:19 172  	out_group_id OUT NUMBER
14:28:19 173  );
14:28:19 174  
14:28:19 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
14:28:19 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:28:19 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
14:28:19 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
14:28:19 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
14:28:19 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
14:28:19 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
14:28:19 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:28:19 183  );
14:28:19 184  
14:28:19 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
14:28:19 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:28:19 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
14:28:19 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:28:19 189  );
14:28:19 190  
14:28:19 191  END PROCS_GROUP_ACCOUNT_V23;
14:28:19 192  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_history.sql
Compiling header for procs_history.sql
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_AASR_HISTORY(
14:28:19   4  	in_id			     IN CORE_OWNER.AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:19   5  	in_system_activity_reason_id IN NUMBER,
14:28:19   6  	in_created_by		     IN VARCHAR2
14:28:19   7  );
14:28:19   8  
14:28:19   9  PROCEDURE CREATE_ADDRESS_HISTORY(
14:28:19  10  	in_address_id		     IN NUMBER,
14:28:19  11  	in_system_activity_reason_id IN NUMBER
14:28:19  12  );
14:28:19  13  
14:28:19  14  PROCEDURE CREATE_ACCOUNT_HISTORY(
14:28:19  15  	in_account_id		     IN NUMBER,
14:28:19  16  	in_system_activity_reason_id IN NUMBER
14:28:19  17  );
14:28:19  18  
14:28:19  19  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
14:28:19  20  	in_subscription_id	     IN NUMBER,
14:28:19  21  	in_system_activity_reason_id IN NUMBER
14:28:19  22  );
14:28:19  23  
14:28:19  24  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
14:28:19  25  	in_credit_card_id	      IN NUMBER,
14:28:19  26  	in_system_activity_reason_id  IN  NUMBER
14:28:19  27  );
14:28:19  28  
14:28:19  29  PROCEDURE CREATE_PAYPAL_HISTORY(
14:28:19  30  	in_paypal_id		      IN NUMBER,
14:28:19  31  	in_system_activity_reason_id  IN NUMBER
14:28:19  32  );
14:28:19  33  
14:28:19  34  PROCEDURE CREATE_GIFT_CERT_HISTORY(
14:28:19  35  	in_gift_certificate_id	      IN NUMBER,
14:28:19  36  	in_system_activity_reason_id  IN  NUMBER
14:28:19  37  );
14:28:19  38  
14:28:19  39  PROCEDURE CREATE_TRANSACTION_HISTORY (
14:28:19  40  	in_transaction_id	     IN NUMBER,
14:28:19  41  	in_system_activity_reason_id IN NUMBER
14:28:19  42  );
14:28:19  43  
14:28:19  44  PROCEDURE CREATE_INVOICE_HISTORY (
14:28:19  45  	in_invoice_id		     IN NUMBER,
14:28:19  46  	in_system_activity_reason_id IN NUMBER
14:28:19  47  );
14:28:19  48  
14:28:19  49  PROCEDURE CREATE_LICENSE_HISTORY (
14:28:19  50  	in_license_id		     IN NUMBER,
14:28:19  51  	in_system_activity_reason_id IN NUMBER
14:28:19  52  );
14:28:19  53  
14:28:19  54  PROCEDURE CREATE_CHARGE_HISTORY (
14:28:19  55  	in_charge_id		    IN NUMBER,
14:28:19  56  	in_system_activity_reason_id IN NUMBER
14:28:19  57  );
14:28:19  58  
14:28:19  59  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
14:28:19  60  	in_invoice_adjustment_id     IN NUMBER,
14:28:19  61  	in_system_activity_reason_id IN NUMBER
14:28:19  62  );
14:28:19  63  
14:28:19  64  
14:28:19  65  END PROCS_HISTORY_V23;
14:28:19  66  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_invoice_cru.sql
Compiling header for procs_invoice_cru.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_INVOICE_CRU
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_INVOICE (
14:28:19   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
14:28:19   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
14:28:19   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
14:28:19   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
14:28:19   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
14:28:19   9  );
14:28:19  10  
14:28:19  11  PROCEDURE UPDATE_INVOICE (
14:28:19  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
14:28:19  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
14:28:19  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
14:28:19  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
14:28:19  16  );
14:28:19  17  
14:28:19  18  END PROCS_INVOICE_CRU_V23;
14:28:19  19  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_invoice.sql
Compiling header for procs_invoice.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_INVOICE
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE GET_INVOICE_IDS(
14:28:19   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
14:28:19   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
14:28:19   6  	out_result_set OUT SYS_REFCURSOR
14:28:19   7  );
14:28:19   8  
14:28:19   9  PROCEDURE IS_INVOICE_FOR_GC (
14:28:19  10  	in_invoice_id  IN NUMBER,
14:28:19  11  	out_result     OUT NUMBER
14:28:19  12  );
14:28:19  13  
14:28:19  14  PROCEDURE CREATE_INVOICE(
14:28:19  15  /*
14:28:19  16  Throws exceptions:
14:28:19  17  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  18  */
14:28:19  19  	  in_invoice_status IN NUMBER,
14:28:19  20  	  in_created_by     IN VARCHAR2,
14:28:19  21  	  in_tax_exempt_id  IN VARCHAR2,
14:28:19  22  	  out_invoice_id    OUT NUMBER
14:28:19  23  );
14:28:19  24  
14:28:19  25  PROCEDURE GET_PENDING_INVOICES (
14:28:19  26  /*
14:28:19  27  Throws exceptions:
14:28:19  28  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  29  */
14:28:19  30  	out_result_set	     OUT SYS_REFCURSOR,
14:28:19  31  	in_row_number	     IN NUMBER DEFAULT NULL
14:28:19  32  );
14:28:19  33  
14:28:19  34  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:28:19  35  /*
14:28:19  36  Throws exceptions:
14:28:19  37  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  38  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  39  */
14:28:19  40  	in_invoice_id IN  NUMBER,
14:28:19  41  	out_amount    OUT NUMBER
14:28:19  42  );
14:28:19  43  
14:28:19  44  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
14:28:19  45  	in_invoice_id IN  NUMBER
14:28:19  46  ) RETURN NUMBER;
14:28:19  47  
14:28:19  48  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
14:28:19  49  /*
14:28:19  50  Throws exceptions:
14:28:19  51  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  52  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  53  */
14:28:19  54  	in_invoice_id  IN  NUMBER,
14:28:19  55  	out_account_id OUT NUMBER
14:28:19  56  );
14:28:19  57  
14:28:19  58  PROCEDURE GET_INVOICE_DETAILS (
14:28:19  59  /*
14:28:19  60  Throws exceptions:
14:28:19  61  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  62  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  63  */
14:28:19  64  	in_invoice_id	   IN  NUMBER,
14:28:19  65  	out_group_id	   OUT NUMBER,
14:28:19  66  	out_status_id	   OUT NUMBER,
14:28:19  67  	out_line_items_set OUT SYS_REFCURSOR,
14:28:19  68  	out_pp_charges_set OUT SYS_REFCURSOR,
14:28:19  69  	out_cc_charges_set OUT SYS_REFCURSOR,
14:28:19  70  	out_gc_charges_set OUT SYS_REFCURSOR
14:28:19  71  );
14:28:19  72  -- norlov: #38796
14:28:19  73  PROCEDURE GET_TRANSACTION_INVOICE (
14:28:19  74  /*
14:28:19  75  Throws exceptions:
14:28:19  76  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  77  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  78  */
14:28:19  79  	in_transaction_id  IN  NUMBER,
14:28:19  80  	out_result_set	      OUT SYS_REFCURSOR
14:28:19  81  );
14:28:19  82  
14:28:19  83  PROCEDURE UPDATE_INVOICE_STATUS (
14:28:19  84  /*
14:28:19  85  Throws exceptions:
14:28:19  86  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  87  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  88  */
14:28:19  89  	in_invoice_id		       IN NUMBER,
14:28:19  90  	in_invoice_status_id	       IN NUMBER,
14:28:19  91  	in_updated_by		       IN VARCHAR2
14:28:19  92  );
14:28:19  93  
14:28:19  94  FUNCTION IS_INVOICE_PAYING_STARTED (
14:28:19  95  /*
14:28:19  96  Throws exceptions:
14:28:19  97  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  98  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  99  */
14:28:19 100  	in_invoice_id IN NUMBER
14:28:19 101  ) RETURN NUMBER;
14:28:19 102  
14:28:19 103  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
14:28:19 104  	in_invoice_id  IN NUMBER,
14:28:19 105  	out_is_started OUT NUMBER
14:28:19 106  );
14:28:19 107  
14:28:19 108  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
14:28:19 109  	in_invoice_id	      IN NUMBER,
14:28:19 110  	in_chargeback_date    IN DATE,
14:28:19 111  	out_chargeback_amount OUT NUMBER
14:28:19 112  );
14:28:19 113  
14:28:19 114  PROCEDURE APPLY_REFUND (
14:28:19 115  	in_invoice_id	     IN NUMBER,
14:28:19 116  	in_chargeback_amount IN NUMBER,
14:28:19 117  	in_created_by	     IN VARCHAR2,
14:28:19 118  	out_charge_id	     OUT NUMBER
14:28:19 119  );
14:28:19 120  
14:28:19 121  PROCEDURE GET_MAX_REFUND (
14:28:19 122  	in_invoice_id IN NUMBER,
14:28:19 123  	out_amount    OUT NUMBER
14:28:19 124  );
14:28:19 125  
14:28:19 126  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
14:28:19 127  	in_invoice_id	    IN NUMBER,
14:28:19 128  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
14:28:19 129  	out_days_num	    OUT NUMBER
14:28:19 130  );
14:28:19 131  
14:28:19 132  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:28:19 133  	in_invoice_id  IN NUMBER,
14:28:19 134  	out_result_set OUT SYS_REFCURSOR
14:28:19 135  );
14:28:19 136  
14:28:19 137  PROCEDURE GET_INVOICE_LICENSES (
14:28:19 138  	in_invoice_id  IN NUMBER,
14:28:19 139  	out_result_set OUT SYS_REFCURSOR
14:28:19 140  );
14:28:19 141  
14:28:19 142  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
14:28:19 143  	in_invoice_id	   IN NUMBER,
14:28:19 144  	out_offer_chain_id OUT NUMBER
14:28:19 145  );
14:28:19 146  
14:28:19 147  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
14:28:19 148  -- Closing invoice without refund
14:28:19 149  	in_invoice_id IN NUMBER,
14:28:19 150  	in_updated_by IN VARCHAR2
14:28:19 151  );
14:28:19 152  
14:28:19 153  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
14:28:19 154  	in_invoice_id	    IN NUMBER,
14:28:19 155  	out_subscription_id OUT NUMBER
14:28:19 156  );
14:28:19 157  
14:28:19 158  PROCEDURE IS_INVOICE_TAX_EXEMPT (
14:28:19 159  /*
14:28:19 160  Throws exceptions:
14:28:19 161  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:19 162  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19 163  Return:
14:28:19 164  	GLOBAL_CONSTANTS_V23.TRUE if ACCOUNT.EXEMPT_ID is not null
14:28:19 165  	GLOBAL_CONSTANTS_V23.FALSE else
14:28:19 166  */
14:28:19 167  	in_invoice_id	  IN NUMBER,
14:28:19 168  	out_is_tax_exempt OUT NUMBER
14:28:19 169  );
14:28:19 170  
14:28:19 171  PROCEDURE GET_INVOICE_BY_ID (
14:28:19 172  	in_invoice_id  IN NUMBER,
14:28:19 173  	out_result_set OUT SYS_REFCURSOR
14:28:19 174  );
14:28:19 175  
14:28:19 176  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
14:28:19 177  	in_invoice_id		      IN NUMBER,
14:28:19 178  	out_is_tax_calculation_needed OUT NUMBER
14:28:19 179  );
14:28:19 180  
14:28:19 181  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
14:28:19 182  	in_invoice_id		     IN NUMBER,
14:28:19 183  	in_updated_by		     IN VARCHAR2,
14:28:19 184  	in_is_tax_calculation_needed IN NUMBER
14:28:19 185  );
14:28:19 186  
14:28:19 187  PROCEDURE REFUND_INVOICE (
14:28:19 188  	in_invoice_id	   IN NUMBER,
14:28:19 189  	in_refund_amount   IN NUMBER,
14:28:19 190  	in_note 	   IN VARCHAR2,
14:28:19 191  	in_created_by	   IN VARCHAR2,
14:28:19 192  	out_charge_id	   OUT NUMBER
14:28:19 193  );
14:28:19 194  
14:28:19 195  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
14:28:19 196  	in_invoice_id		    IN NUMBER,
14:28:19 197  	out_order_id		    OUT VARCHAR2,
14:28:19 198  	out_external_transaction_id OUT VARCHAR2
14:28:19 199  );
14:28:19 200  
14:28:19 201  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
14:28:19 202  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
14:28:19 203  	out_result_set OUT SYS_REFCURSOR
14:28:19 204  );
14:28:19 205  
14:28:19 206  PROCEDURE IS_REVOKE_ENTITLEMENTS(
14:28:19 207  	in_invoice_id IN NUMBER,
14:28:19 208  	out_is_revoke OUT NUMBER
14:28:19 209  );
14:28:19 210  
14:28:19 211  END PROCS_INVOICE_V23;
14:28:19 212  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.07
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_itunes_receipt_cru.sql
Compiling header for procs_itunes_receipt_cru.sql
14:28:19 SQL> /*
14:28:19 SQL> CREATE TABLE ITUNES_RECEIPT (
14:28:19 SQL> 	id NUMBER NOT NULL ENABLE,
14:28:19 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
14:28:19 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
14:28:19 SQL> 	status NUMBER,
14:28:19 SQL> 	quantity NUMBER,
14:28:19 SQL> 	product_id VARCHAR(1024),
14:28:19 SQL> 	transaction_id VARCHAR(1024),
14:28:19 SQL> 	purchase_date TIMESTAMP,
14:28:19 SQL> 	original_transaction_id VARCHAR(1024),
14:28:19 SQL> 	original_purchase_date TIMESTAMP,
14:28:19 SQL> 	app_item_id VARCHAR(1024),
14:28:19 SQL> 	version_external_id NUMBER,
14:28:19 SQL> 	bid VARCHAR(1024),
14:28:19 SQL> 	bvrs VARCHAR(255),
14:28:19 SQL> 	expires_date TIMESTAMP,
14:28:19 SQL> 	create_date DATE NOT NULL,
14:28:19 SQL> 	created_by VARCHAR(255) NOT NULL,
14:28:19 SQL> 	update_date DATE NOT NULL,
14:28:19 SQL> 	updated_by VARCHAR(255) NOT NULL,
14:28:19 SQL> 	last_check_date DATE NOT NULL,
14:28:19 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:28:19 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:28:19 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:28:19 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
14:28:19 SQL> )
14:28:19 SQL> TABLESPACE CORE;
14:28:19 SQL> */
14:28:19 SQL> 
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_RECEIPT(
14:28:19   4  /*
14:28:19   5  Throws exceptions:
14:28:19   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19   7  */
14:28:19   8  	  out_id	      OUT NUMBER,
14:28:19   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:19  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
14:28:19  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
14:28:19  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
14:28:19  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:19  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:28:19  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:28:19  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:19  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:28:19  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:28:19  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:28:19  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
14:28:19  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
14:28:19  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:28:19  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
14:28:19  24  );
14:28:19  25  
14:28:19  26  PROCEDURE UPDATE_RECEIPT(
14:28:19  27  /*
14:28:19  28  Throws exceptions:
14:28:19  29  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  30  */
14:28:19  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
14:28:19  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
14:28:19  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
14:28:19  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
14:28:19  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:19  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:28:19  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:28:19  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:19  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:28:19  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:28:19  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:28:19  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
14:28:19  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
14:28:19  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:28:19  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
14:28:19  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
14:28:19  47  );
14:28:19  48  
14:28:19  49  PROCEDURE LINK_ITUNES_RECEIPT(
14:28:19  50  /*
14:28:19  51  Throws exceptions:
14:28:19  52  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  53  */
14:28:19  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
14:28:19  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:19  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
14:28:19  57  );
14:28:19  58  
14:28:19  59  PROCEDURE MARK_RECEIPT_CHECKED(
14:28:19  60  /*
14:28:19  61  Throws exceptions:
14:28:19  62  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  63  */
14:28:19  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
14:28:19  65  );
14:28:19  66  
14:28:19  67  END PROCS_ITUNES_RECEIPT_CRU_V23;
14:28:19  68  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_itunes_receipt.sql
Compiling header for procs_itunes_receipt.sql
14:28:19 SQL> /*
14:28:19 SQL> CREATE TABLE ITUNES_RECEIPT (
14:28:19 SQL> 	id NUMBER NOT NULL ENABLE,
14:28:19 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
14:28:19 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
14:28:19 SQL> 	status NUMBER,
14:28:19 SQL> 	quantity NUMBER,
14:28:19 SQL> 	product_id VARCHAR(1024),
14:28:19 SQL> 	transaction_id VARCHAR(1024),
14:28:19 SQL> 	purchase_date TIMESTAMP,
14:28:19 SQL> 	original_transaction_id VARCHAR(1024),
14:28:19 SQL> 	original_purchase_date TIMESTAMP,
14:28:19 SQL> 	app_item_id VARCHAR(1024),
14:28:19 SQL> 	version_external_id NUMBER,
14:28:19 SQL> 	bid VARCHAR(1024),
14:28:19 SQL> 	bvrs VARCHAR(255),
14:28:19 SQL> 	expires_date TIMESTAMP,
14:28:19 SQL> 	create_date DATE NOT NULL,
14:28:19 SQL> 	created_by VARCHAR(255) NOT NULL,
14:28:19 SQL> 	update_date DATE NOT NULL,
14:28:19 SQL> 	updated_by VARCHAR(255) NOT NULL,
14:28:19 SQL> 	last_check_date DATE NOT NULL,
14:28:19 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:28:19 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:28:19 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
14:28:19 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
14:28:19 SQL> )
14:28:19 SQL> TABLESPACE CORE;
14:28:19 SQL> */
14:28:19 SQL> 
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
14:28:19   4  	      /*
14:28:19   5  	      Throws exceptions:
14:28:19   6  	      APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19   7  	      */
14:28:19   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:19   9  	      out_result_set	  OUT SYS_REFCURSOR
14:28:19  10  );
14:28:19  11  
14:28:19  12  PROCEDURE CREATE_RECEIPT(
14:28:19  13  /*
14:28:19  14  Throws exceptions:
14:28:19  15  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  16  */
14:28:19  17  	  out_id	      OUT NUMBER,
14:28:19  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:19  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
14:28:19  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
14:28:19  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
14:28:19  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:19  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:28:19  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:28:19  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:19  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:28:19  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:28:19  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:28:19  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
14:28:19  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
14:28:19  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:28:19  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
14:28:19  33  );
14:28:19  34  
14:28:19  35  PROCEDURE UPDATE_RECEIPT(
14:28:19  36  /*
14:28:19  37  Throws exceptions:
14:28:19  38  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  39  */
14:28:19  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
14:28:19  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
14:28:19  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
14:28:19  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
14:28:19  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:19  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:28:19  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:28:19  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:19  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:28:19  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:28:19  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:28:19  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
14:28:19  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
14:28:19  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:28:19  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
14:28:19  55  	  in_is_expired       IN NUMBER
14:28:19  56  );
14:28:19  57  
14:28:19  58  PROCEDURE LINK_ITUNES_RECEIPT(
14:28:19  59  /*
14:28:19  60  Throws exceptions:
14:28:19  61  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  62  */
14:28:19  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
14:28:19  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:19  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
14:28:19  66  );
14:28:19  67  
14:28:19  68  PROCEDURE MARK_RECEIPT_CHECKED(
14:28:19  69  /*
14:28:19  70  Throws exceptions:
14:28:19  71  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  72  */
14:28:19  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
14:28:19  74  );
14:28:19  75  
14:28:19  76  PROCEDURE GET_ITUNES_RECEIPTS (
14:28:19  77  /*
14:28:19  78  Throws exceptions:
14:28:19  79  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  80  */
14:28:19  81  	out_result_set	    OUT SYS_REFCURSOR,
14:28:19  82  	in_row_number	    IN NUMBER DEFAULT 500
14:28:19  83  );
14:28:19  84  
14:28:19  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
14:28:19  86  /*
14:28:19  87  Throws exceptions:
14:28:19  88  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  89  */
14:28:19  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
14:28:19  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
14:28:19  92  );
14:28:19  93  
14:28:19  94  END PROCS_ITUNES_RECEIPT_V23;
14:28:19  95  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_license_cru.sql
Compiling header for procs_license_cru.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_LICENSE_CRU
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_LICENSE(
14:28:19   4  	out_license_id		    OUT LICENSE.ID%TYPE,
14:28:19   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
14:28:19   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
14:28:19   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
14:28:19   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
14:28:19   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
14:28:19  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
14:28:19  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
14:28:19  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
14:28:19  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
14:28:19  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
14:28:19  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
14:28:19  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
14:28:19  17  );
14:28:19  18  
14:28:19  19  PROCEDURE UPDATE_LICENSE (
14:28:19  20  	in_license_id		    IN LICENSE.ID%TYPE,
14:28:19  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
14:28:19  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
14:28:19  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
14:28:19  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
14:28:19  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
14:28:19  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
14:28:19  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
14:28:19  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
14:28:19  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
14:28:19  30  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
14:28:19  31  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
14:28:19  32  );
14:28:19  33  
14:28:19  34  END PROCS_LICENSE_CRU_V23;
14:28:19  35  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_license.sql
Compiling header for procs_license.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_LICENSE
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_LICENSE(
14:28:19   4  /*
14:28:19   5  Throws exceptions:
14:28:19   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19   8  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:19   9  */
14:28:19  10  	in_status_id		    IN NUMBER,
14:28:19  11  	in_needs_entitlements	    IN NUMBER,
14:28:19  12  	in_start_date		    IN DATE,
14:28:19  13  	in_end_date		    IN DATE,
14:28:19  14  	in_offer_id		    IN NUMBER,
14:28:19  15  	in_subscription_id	    IN NUMBER,
14:28:19  16  	in_invoice_id		    IN NUMBER,
14:28:19  17  	in_created_by		    IN VARCHAR2,
14:28:19  18  	in_is_extension 	    IN NUMBER,
14:28:19  19  	in_current_offer_index	    IN NUMBER,
14:28:19  20  	in_current_offer_recurr_num IN NUMBER,
14:28:19  21  	out_license_id		    OUT NUMBER
14:28:19  22  );
14:28:19  23  
14:28:19  24  /*********************************************/
14:28:19  25  
14:28:19  26  PROCEDURE UPDATE_LICENSE_STATUS(
14:28:19  27  /*
14:28:19  28  Throws exceptions:
14:28:19  29  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  30  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  31  */
14:28:19  32  	  in_license_id     IN NUMBER,
14:28:19  33  	  in_license_status IN NUMBER,
14:28:19  34  	  in_updated_by     IN VARCHAR2,
14:28:19  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
14:28:19  36  );
14:28:19  37  
14:28:19  38  /*********************************************/
14:28:19  39  
14:28:19  40  PROCEDURE GET_ENDING_LICENSES (
14:28:19  41  	in_hours_number IN NUMBER,
14:28:19  42  	out_result_set OUT SYS_REFCURSOR
14:28:19  43  );
14:28:19  44  
14:28:19  45  /*********************************************/
14:28:19  46  
14:28:19  47  PROCEDURE GET_ENDING_LICENSES_CC (
14:28:19  48  	in_hours_number IN NUMBER,
14:28:19  49  	out_result_set OUT SYS_REFCURSOR,
14:28:19  50  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:19  51  );
14:28:19  52  
14:28:19  53  /**********************************************/
14:28:19  54  
14:28:19  55  PROCEDURE GET_RECURRING_OFFER (
14:28:19  56  	in_license_id  IN NUMBER,
14:28:19  57  	out_result_set OUT SYS_REFCURSOR
14:28:19  58  );
14:28:19  59  
14:28:19  60  /**********************************************/
14:28:19  61  
14:28:19  62  PROCEDURE GET_NEXT_OFFER (
14:28:19  63  	in_license_id  IN NUMBER,
14:28:19  64  	out_result_set OUT SYS_REFCURSOR
14:28:19  65  );
14:28:19  66  
14:28:19  67  /**********************************************/
14:28:19  68  
14:28:19  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
14:28:19  70  	in_license_id IN NUMBER,
14:28:19  71  	out_group_id  OUT NUMBER
14:28:19  72  );
14:28:19  73  
14:28:19  74  /**************************************************/
14:28:19  75  
14:28:19  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
14:28:19  77  	out_result_set OUT SYS_REFCURSOR
14:28:19  78  );
14:28:19  79  
14:28:19  80  /**************************************************/
14:28:19  81  
14:28:19  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
14:28:19  83  	in_license_id	      IN NUMBER,
14:28:19  84  	in_needs_entitlements IN NUMBER,
14:28:19  85  	in_updated_by	      IN VARCHAR2
14:28:19  86  );
14:28:19  87  
14:28:19  88  PROCEDURE GET_ENDED_GC_LICENSES (
14:28:19  89  	out_result_set		OUT SYS_REFCURSOR,
14:28:19  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:28:19  91  	in_num_rows		IN NUMBER DEFAULT 10000,
14:28:19  92  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:19  93  );
14:28:19  94  
14:28:19  95  PROCEDURE GET_LICENSE_BY_ID (
14:28:19  96  
14:28:19  97  	in_license_id  IN NUMBER,
14:28:19  98  
14:28:19  99  	out_result_set OUT SYS_REFCURSOR
14:28:19 100  
14:28:19 101  );
14:28:19 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
14:28:19 103  	in_subscription_id IN NUMBER,
14:28:19 104  	in_end_date IN DATE,
14:28:19 105  	in_updated_by IN VARCHAR2
14:28:19 106  );
14:28:19 107  
14:28:19 108  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
14:28:19 109  	in_days_before_close	 IN NUMBER,
14:28:19 110  	in_num_licenses_to_fetch IN NUMBER,
14:28:19 111  	out_result_set		 OUT SYS_REFCURSOR
14:28:19 112  );
14:28:19 113  
14:28:19 114  END PROCS_LICENSE_V23;
14:28:19 115  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_line_items_cru.sql
Compiling header for procs_line_items_cru.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE CREATE_LINE_ITEM (
14:28:19   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
14:28:19   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
14:28:19   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
14:28:19   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
14:28:19   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
14:28:19   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
14:28:19  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
14:28:19  11  );
14:28:19  12  
14:28:19  13  PROCEDURE UPDATE_LINE_ITEM (
14:28:19  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
14:28:19  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
14:28:19  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
14:28:19  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
14:28:19  18  );
14:28:19  19  
14:28:19  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
14:28:19  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
14:28:19  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
14:28:19  23  );
14:28:19  24  
14:28:19  25  END PROCS_LINE_ITEMS_CRU_V23;
14:28:19  26  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.05
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_line_items.sql
Compiling header for procs_line_items.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_LINE_ITEMS
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V23" AS
14:28:19   2  
14:28:19   3  PROCEDURE ADD_LINE_ITEMS(
14:28:19   4  /*
14:28:19   5  Throws exceptions:
14:28:19   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19   8  */
14:28:19   9  	in_invoice_id IN NUMBER,
14:28:19  10  	in_offer_id   IN NUMBER,
14:28:19  11  	in_created_by IN VARCHAR2
14:28:19  12  );
14:28:19  13  
14:28:19  14  /****************************************************/
14:28:19  15  
14:28:19  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
14:28:19  17  	in_line_item_id    IN NUMBER,
14:28:19  18  	in_amount	   IN NUMBER,
14:28:19  19  	in_discount_amount IN NUMBER,
14:28:19  20  	in_taxes_amount    IN NUMBER
14:28:19  21  );
14:28:19  22  
14:28:19  23  /****************************************************/
14:28:19  24  
14:28:19  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:28:19  26  /*
14:28:19  27  Throws exceptions:
14:28:19  28  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  29  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  30  */
14:28:19  31  	in_invoice_id  IN NUMBER,
14:28:19  32  	out_result_set OUT SYS_REFCURSOR
14:28:19  33  );
14:28:19  34  
14:28:19  35  /****************************************************/
14:28:19  36  
14:28:19  37  PROCEDURE GET_LINE_ITEM_TAXES (
14:28:19  38  /*
14:28:19  39  Throws exceptions:
14:28:19  40  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  41  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  42  */
14:28:19  43  	in_line_item_id IN  NUMBER,
14:28:19  44  	out_result_set	OUT SYS_REFCURSOR
14:28:19  45  );
14:28:19  46  /****************************************************/
14:28:19  47  
14:28:19  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
14:28:19  49  /*
14:28:19  50  Throws exceptions:
14:28:19  51  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  52  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  53  */
14:28:19  54  	in_line_item_id IN  NUMBER,
14:28:19  55  	out_result_set	OUT SYS_REFCURSOR
14:28:19  56  );
14:28:19  57  
14:28:19  58  /****************************************************/
14:28:19  59  
14:28:19  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
14:28:19  61  /*
14:28:19  62  Throws exceptions:
14:28:19  63  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  64  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  65  */
14:28:19  66  	in_line_item_id     IN	NUMBER,
14:28:19  67  	out_amount	    OUT NUMBER
14:28:19  68  );
14:28:19  69  
14:28:19  70  /****************************************************/
14:28:19  71  
14:28:19  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
14:28:19  73  /*
14:28:19  74  Throws exceptions:
14:28:19  75  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:19  76  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:19  77  */
14:28:19  78  	in_line_item_id     IN	NUMBER
14:28:19  79  ) RETURN NUMBER;
14:28:19  80  
14:28:19  81  END PROCS_LINE_ITEMS_V23;
14:28:19  82  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:19 SQL> 
14:28:19 SQL> prompt Compiling header for procs_locking.sql
Compiling header for procs_locking.sql
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> -- DDL for package PROCS_LOCKING
14:28:19 SQL> --------------------------------------------------------------------------------
14:28:19 SQL> 
14:28:19 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V23" AS
14:28:19   2  
14:28:19   3  /*
14:28:19   4  Removed by Sergey
14:28:19   5  10.12.2010
14:28:19   6  PROCEDURE INITIALIZE_SYSTEM;
14:28:19   7  
14:28:19   8  PROCEDURE INITIALIZE_ACCOUNT (
14:28:19   9  	in_account_id IN NUMBER
14:28:19  10  );
14:28:19  11  
14:28:19  12  PROCEDURE INITIALIZE_GROUP (
14:28:19  13  	in_group_id IN NUMBER
14:28:19  14  );
14:28:19  15  */
14:28:19  16  
14:28:19  17  PROCEDURE LOCK_ACCOUNT (
14:28:19  18  	in_group_id    IN NUMBER,
14:28:19  19  	in_lock_key    IN VARCHAR2,
14:28:19  20  	in_seconds_num IN NUMBER,
14:28:19  21  	in_created_by  IN VARCHAR2,
14:28:19  22  	in_reason      IN VARCHAR2
14:28:19  23  );
14:28:19  24  
14:28:19  25  PROCEDURE RELEASE_LOCK (
14:28:19  26  	in_group_id IN NUMBER,
14:28:19  27  	in_lock_key IN VARCHAR2
14:28:19  28  );
14:28:19  29  
14:28:19  30  END PROCS_LOCKING_V23;
14:28:19  31  .
14:28:19 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_notification.sql
Compiling header for procs_notification.sql
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> -- DDL for package PROCS_NOTIFICATION
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> 
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_NOTIFICATION_V23" AS
14:28:20   2  
14:28:20   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
14:28:20   4  /*
14:28:20   5  Throws exceptions:
14:28:20   6  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:20   7  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:20   8  */
14:28:20   9  	in_notification_type_name IN VARCHAR2,
14:28:20  10  	out_notification_type_id  OUT NUMBER
14:28:20  11  );
14:28:20  12  
14:28:20  13  PROCEDURE ADD_NOTIFICATION (
14:28:20  14  /*
14:28:20  15  Throws exceptions:
14:28:20  16  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:20  17  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:20  18  */
14:28:20  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
14:28:20  20  	in_recipient_group_id	 IN NUMBER,
14:28:20  21  	in_notification_type_id  IN NUMBER,
14:28:20  22  	in_date_to_notify	 IN DATE,
14:28:20  23  	in_email_template_params IN CLOB
14:28:20  24  );
14:28:20  25  
14:28:20  26  PROCEDURE GET_PENDING_NOTIFICATIONS (
14:28:20  27  /*
14:28:20  28  Throws exceptions:
14:28:20  29  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:20  30  */
14:28:20  31  	out_result_set OUT SYS_REFCURSOR
14:28:20  32  );
14:28:20  33  
14:28:20  34  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
14:28:20  35  /*
14:28:20  36  Throws exceptions:
14:28:20  37  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:20  38  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:20  39  */
14:28:20  40  	in_notification_id IN NUMBER
14:28:20  41  );
14:28:20  42  
14:28:20  43  PROCEDURE SET_NOTIFICATION_STATUS (
14:28:20  44  /*
14:28:20  45  Throws exceptions:
14:28:20  46  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:20  47  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:20  48  */
14:28:20  49  	in_notification_id	  IN NUMBER,
14:28:20  50  	in_notification_status_id IN NUMBER,
14:28:20  51  	in_error_message	  IN VARCHAR2
14:28:20  52  );
14:28:20  53  
14:28:20  54  PROCEDURE ADD_NOTIFICATION_FAILURE (
14:28:20  55  /*
14:28:20  56  Throws exceptions:
14:28:20  57  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:20  58  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:20  59  */
14:28:20  60  	in_notification_id IN NUMBER,
14:28:20  61  	in_error_message   IN VARCHAR2
14:28:20  62  );
14:28:20  63  
14:28:20  64  PROCEDURE LOCK_PENDING_NOTIFICATION (
14:28:20  65  /*
14:28:20  66  Result: 1 if notification locked
14:28:20  67  2 - else
14:28:20  68  */
14:28:20  69  	in_notification_id IN NUMBER,
14:28:20  70  	out_lock_status    OUT NUMBER
14:28:20  71  );
14:28:20  72  
14:28:20  73  PROCEDURE GET_NOTIFICATION_DATA (
14:28:20  74  	in_notification_id IN NUMBER,
14:28:20  75  	out_result_set	   OUT SYS_REFCURSOR
14:28:20  76  );
14:28:20  77  
14:28:20  78  END PROCS_NOTIFICATION_V23;
14:28:20  79  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.08
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_offer_chain.sql
Compiling header for procs_offer_chain.sql
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V23" AS
14:28:20   2  
14:28:20   3  PROCEDURE IS_GC_OFFER_CHAIN(
14:28:20   4  	in_offer_chain_id IN OFFER_CHAIN.ID%TYPE,
14:28:20   5  	out_data OUT NUMBER
14:28:20   6  );
14:28:20   7  
14:28:20   8  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
14:28:20   9  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
14:28:20  10  	out_data	     OUT OFFER_CHAIN.ID%TYPE
14:28:20  11  );
14:28:20  12  
14:28:20  13  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
14:28:20  14  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
14:28:20  15  	out_data	       OUT OFFER_CHAIN.ID%TYPE
14:28:20  16  );
14:28:20  17  
14:28:20  18  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:28:20  19  	  in_offer_chain_id IN	 NUMBER,
14:28:20  20  	  out_result_set    OUT  SYS_REFCURSOR
14:28:20  21  );
14:28:20  22  
14:28:20  23  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
14:28:20  24  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:28:20  25  	out_result_set	   OUT SYS_REFCURSOR
14:28:20  26  );
14:28:20  27  
14:28:20  28  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
14:28:20  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:28:20  30  	out_result_set	   OUT SYS_REFCURSOR
14:28:20  31  );
14:28:20  32  
14:28:20  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
14:28:20  34  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:28:20  35  	out_result_set	   OUT SYS_REFCURSOR
14:28:20  36  );
14:28:20  37  
14:28:20  38  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
14:28:20  39  	in_product_id  IN  NUMBER,
14:28:20  40  	out_result_set OUT SYS_REFCURSOR
14:28:20  41  );
14:28:20  42  
14:28:20  43  PROCEDURE GET_OFFER_CHAIN_PRICE (
14:28:20  44  	in_offer_chain_id IN NUMBER,
14:28:20  45  	out_price	  OUT NUMBER
14:28:20  46  );
14:28:20  47  
14:28:20  48  PROCEDURE GET_FIRST_OFFER(
14:28:20  49  	in_offer_chain_id IN  NUMBER,
14:28:20  50  	out_offer_id	  OUT NUMBER
14:28:20  51  );
14:28:20  52  
14:28:20  53  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
14:28:20  54  	out_result_set OUT SYS_REFCURSOR
14:28:20  55  );
14:28:20  56  
14:28:20  57  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
14:28:20  58  	in_offer_chain_id IN NUMBER,
14:28:20  59  	out_result_set	  OUT SYS_REFCURSOR
14:28:20  60  );
14:28:20  61  
14:28:20  62  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
14:28:20  63  	in_offer_chain_id	  IN NUMBER,
14:28:20  64  	in_offer_chain_start_date IN DATE
14:28:20  65  ) RETURN DATE;
14:28:20  66  
14:28:20  67  FUNCTION CALCULATE_OFFER_AMOUNT (
14:28:20  68  	in_offer_id IN NUMBER
14:28:20  69  ) RETURN NUMBER;
14:28:20  70  
14:28:20  71  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
14:28:20  72  	in_offer_chain_id IN NUMBER
14:28:20  73  ) RETURN NUMBER;
14:28:20  74  
14:28:20  75  FUNCTION GET_FIRST_OFFER_INDEX (
14:28:20  76  	in_offer_chain_id IN NUMBER
14:28:20  77  ) RETURN NUMBER;
14:28:20  78  
14:28:20  79  FUNCTION GET_NEXT_OFFER_INDEX (
14:28:20  80  	in_offer_chain_id	     IN NUMBER,
14:28:20  81  	in_offer_chain_current_index IN NUMBER
14:28:20  82  ) RETURN NUMBER;
14:28:20  83  
14:28:20  84  PROCEDURE P_GET_NEXT_OFFER_INDEX (
14:28:20  85  	in_offer_chain_id	     IN NUMBER,
14:28:20  86  	in_offer_chain_current_index IN NUMBER,
14:28:20  87  	out_next_offer_index	     OUT NUMBER
14:28:20  88  );
14:28:20  89  
14:28:20  90  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
14:28:20  91  	in_license_id		     IN NUMBER,
14:28:20  92  	in_offer_chain_current_index IN NUMBER,
14:28:20  93  	out_next_offer_index	     OUT NUMBER
14:28:20  94  );
14:28:20  95  
14:28:20  96  FUNCTION IS_OFFER_INDEX_EXISTS (
14:28:20  97  	in_offer_chain_id	   IN NUMBER,
14:28:20  98  	in_offer_chain_offer_index IN NUMBER
14:28:20  99  ) RETURN NUMBER;
14:28:20 100  
14:28:20 101  PROCEDURE GET_OFFER_LENGTH (
14:28:20 102  	in_offer_id IN NUMBER,
14:28:20 103  	out_years   OUT NUMBER,
14:28:20 104  	out_months  OUT NUMBER,
14:28:20 105  	out_days    OUT NUMBER
14:28:20 106  );
14:28:20 107  
14:28:20 108  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
14:28:20 109  	in_offer_id   IN NUMBER,
14:28:20 110  	in_start_date IN DATE DEFAULT SYSDATE,
14:28:20 111  	out_days      OUT NUMBER
14:28:20 112  );
14:28:20 113  
14:28:20 114  PROCEDURE GET_OFFER_PRODUCTS (
14:28:20 115  	in_offer_id    IN NUMBER,
14:28:20 116  	out_result_set OUT SYS_REFCURSOR
14:28:20 117  );
14:28:20 118  
14:28:20 119  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
14:28:20 120  	in_offer_chain_id IN NUMBER,
14:28:20 121  	out_result_set	  OUT SYS_REFCURSOR
14:28:20 122  );
14:28:20 123  
14:28:20 124  FUNCTION CHECK_FOR_SAME_PRODUCTS (
14:28:20 125  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
14:28:20 126  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
14:28:20 127  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
14:28:20 128  ) RETURN NUMBER;
14:28:20 129  
14:28:20 130  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
14:28:20 131  	in_offer_chain_id IN NUMBER
14:28:20 132  ) RETURN NUMBER;
14:28:20 133  
14:28:20 134  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
14:28:20 135  	in_offer_chain_id IN NUMBER
14:28:20 136  ) RETURN NUMBER;
14:28:20 137  
14:28:20 138  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
14:28:20 139  	in_offer_chain_id   IN NUMBER,
14:28:20 140  	in_eligibility_name IN VARCHAR2,
14:28:20 141  	out_result_set	    OUT SYS_REFCURSOR
14:28:20 142  );
14:28:20 143  
14:28:20 144  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
14:28:20 145  	in_offer_chain_ids  IN VARCHAR2,
14:28:20 146  	in_eligibility_name IN VARCHAR2,
14:28:20 147  	out_result_set	    OUT SYS_REFCURSOR
14:28:20 148  );
14:28:20 149  
14:28:20 150  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:28:20 151  	in_offer_chain_id IN NUMBER,
14:28:20 152  	in_meta_data_name IN VARCHAR2,
14:28:20 153  	out_result_set	  OUT SYS_REFCURSOR
14:28:20 154  );
14:28:20 155  
14:28:20 156  PROCEDURE GET_OFFER_CHAINS_META_DATA (
14:28:20 157  	in_offer_chain_ids IN VARCHAR2,
14:28:20 158  	in_meta_data_name  IN VARCHAR2,
14:28:20 159  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 160  );
14:28:20 161  
14:28:20 162  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
14:28:20 163  	in_offer_id    IN NUMBER,
14:28:20 164  	out_result_set OUT SYS_REFCURSOR
14:28:20 165  );
14:28:20 166  
14:28:20 167  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
14:28:20 168  	in_offer_chain_1 IN NUMBER,
14:28:20 169  	in_offer_chain_2 IN NUMBER,
14:28:20 170  	out_result_set	OUT SYS_REFCURSOR
14:28:20 171  );
14:28:20 172  
14:28:20 173  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
14:28:20 174  	in_offer_chain_id IN NUMBER,
14:28:20 175  	in_meta_data_name IN VARCHAR2,
14:28:20 176  	out_value	  OUT VARCHAR2
14:28:20 177  );
14:28:20 178  
14:28:20 179  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
14:28:20 180  	in_offer_chain_id   IN NUMBER,
14:28:20 181  	in_eligibility_name IN VARCHAR2,
14:28:20 182  	out_value	    OUT VARCHAR2
14:28:20 183  );
14:28:20 184  
14:28:20 185  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
14:28:20 186  	in_offer_id    IN NUMBER,
14:28:20 187  	out_result_set OUT SYS_REFCURSOR
14:28:20 188  );
14:28:20 189  
14:28:20 190  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
14:28:20 191  	in_meta_data_name  IN VARCHAR2,
14:28:20 192  	in_meta_data_value IN VARCHAR2,
14:28:20 193  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 194  );
14:28:20 195  
14:28:20 196  PROCEDURE GET_ALL_META_DATA (
14:28:20 197  	in_offer_chain_id IN NUMBER,
14:28:20 198  	out_result_set	  OUT SYS_REFCURSOR
14:28:20 199  );
14:28:20 200  
14:28:20 201  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
14:28:20 202  	in_group_id	  IN NUMBER,
14:28:20 203  	in_offer_chain_id IN NUMBER,
14:28:20 204  	out_is_eligible   OUT NUMBER,
14:28:20 205  	out_concurrent_subscription_id OUT NUMBER
14:28:20 206  );
14:28:20 207  
14:28:20 208  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:28:20 209  	in_offer_chain_id	 IN NUMBER,
14:28:20 210  	in_action_name		 IN VARCHAR2,
14:28:20 211  	out_notification_type_id OUT NUMBER
14:28:20 212  );
14:28:20 213  
14:28:20 214  END PROCS_OFFER_CHAIN_V23;
14:28:20 215  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.08
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_polling_sync.sql
Compiling header for procs_polling_sync.sql
14:28:20 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
14:28:20   2  AS
14:28:20   3  
14:28:20   4  ----
14:28:20   5  --------------------------------------------------------------------------------
14:28:20   6  ----
14:28:20   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
14:28:20   8  	      returned from the previous call and store the result for the
14:28:20   9  	      next call.
14:28:20  10  	     This method will identify and create new Sync Events from trigger activity data */
14:28:20  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
14:28:20  12  ----
14:28:20  13  --------------------------------------------------------------------------------
14:28:20  14  ----
14:28:20  15  	  /* Internal logic call may need to be used to fix poller data */
14:28:20  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
14:28:20  17  ----
14:28:20  18  --------------------------------------------------------------------------------
14:28:20  19  ----
14:28:20  20  	  /* User request for sync events. Params should be hard-coded in the application
14:28:20  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
14:28:20  22  	      skipped. Last read time is logged.
14:28:20  23  	     Params:
14:28:20  24  		  set_maximum: Size of each transfer set
14:28:20  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
14:28:20  26  	     Returns:
14:28:20  27  		  set_id: Transfer set id, duplicated for all entries
14:28:20  28  		  group_id: regi_id value
14:28:20  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
14:28:20  30  	  */
14:28:20  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
14:28:20  32  ----
14:28:20  33  --------------------------------------------------------------------------------
14:28:20  34  ----
14:28:20  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
14:28:20  36  	      single confirmation per transfer set.
14:28:20  37  	  */
14:28:20  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
14:28:20  39  ----
14:28:20  40  --------------------------------------------------------------------------------
14:28:20  41  ----
14:28:20  42  	  procedure SET_LAST_RUN(ts in timestamp);
14:28:20  43  	  procedure GET_LAST_RUN(ts out timestamp);
14:28:20  44  END PROCS_POLLING_SYNC;
14:28:20  45  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.08
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_process_retry.sql
Compiling header for procs_process_retry.sql
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> -- DDL for package PROCS_PROCESS_RETRY_THROTTLE
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> 
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_PROCESS_RETRY_V23" AS
14:28:20   2  
14:28:20   3  PROCEDURE LOG_RETRY(
14:28:20   4  	  in_process_name IN VARCHAR2,
14:28:20   5  	  in_generic_id   IN NUMBER,
14:28:20   6  	  in_date	  IN VARCHAR2,
14:28:20   7  	  out_success	   OUT NUMBER
14:28:20   8  );
14:28:20   9  
14:28:20  10  PROCEDURE LOG_RETRY_DATE(
14:28:20  11  	  in_process_name IN VARCHAR2,
14:28:20  12  	  in_generic_id   IN NUMBER,
14:28:20  13  	  in_date	  IN DATE,
14:28:20  14  	  out_success	   OUT NUMBER
14:28:20  15  );
14:28:20  16  
14:28:20  17  PROCEDURE DELETE_RETRY(
14:28:20  18  	  in_process_name IN VARCHAR2,
14:28:20  19  	  in_remove_minutes  IN NUMBER
14:28:20  20  );
14:28:20  21  
14:28:20  22  PROCEDURE GET_SYSDATE (
14:28:20  23  	  out_date OUT VARCHAR2
14:28:20  24  );
14:28:20  25  
14:28:20  26  END PROCS_PROCESS_RETRY_V23;
14:28:20  27  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_product.sql
Compiling header for procs_product.sql
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> -- DDL for package PROCS_PRODUCT
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> 
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V23" AS
14:28:20   2  
14:28:20   3  PROCEDURE GET_PRODUCTS (
14:28:20   4  /*
14:28:20   5  Throws exceptions:
14:28:20   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:20   7  */
14:28:20   8  	in_status_id   IN  NUMBER,
14:28:20   9  	out_result_set OUT SYS_REFCURSOR
14:28:20  10  );
14:28:20  11  
14:28:20  12  PROCEDURE GET_PRODUCT_BY_ID (
14:28:20  13  	in_product_id  IN NUMBER,
14:28:20  14  	out_result_set OUT SYS_REFCURSOR
14:28:20  15  );
14:28:20  16  
14:28:20  17  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
14:28:20  18  	in_line_item_id IN NUMBER,
14:28:20  19  	out_result_set	OUT SYS_REFCURSOR
14:28:20  20  );
14:28:20  21  
14:28:20  22  PROCEDURE GET_PRD_OFFERING_BY_ID (
14:28:20  23  	in_product_offering_id IN NUMBER,
14:28:20  24  	out_result_set	OUT SYS_REFCURSOR
14:28:20  25  );
14:28:20  26  
14:28:20  27  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
14:28:20  28  	in_product_offering_id IN NUMBER,
14:28:20  29  	out_result_set	       OUT SYS_REFCURSOR
14:28:20  30  );
14:28:20  31  
14:28:20  32  END PROCS_PRODUCT_V23;
14:28:20  33  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_reconciliation_cru.sql
Compiling header for procs_reconciliation_cru.sql
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> 
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V23" AS
14:28:20   2  
14:28:20   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
14:28:20   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
14:28:20   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
14:28:20   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:20   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
14:28:20   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
14:28:20   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
14:28:20  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
14:28:20  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
14:28:20  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:28:20  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
14:28:20  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
14:28:20  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
14:28:20  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:28:20  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
14:28:20  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
14:28:20  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
14:28:20  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
14:28:20  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
14:28:20  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
14:28:20  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
14:28:20  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
14:28:20  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
14:28:20  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
14:28:20  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
14:28:20  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
14:28:20  29  );
14:28:20  30  
14:28:20  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
14:28:20  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
14:28:20  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
14:28:20  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
14:28:20  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
14:28:20  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
14:28:20  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:28:20  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
14:28:20  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
14:28:20  40  );
14:28:20  41  
14:28:20  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
14:28:20  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
14:28:20  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
14:28:20  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:20  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
14:28:20  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
14:28:20  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
14:28:20  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
14:28:20  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
14:28:20  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
14:28:20  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
14:28:20  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
14:28:20  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
14:28:20  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
14:28:20  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
14:28:20  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
14:28:20  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
14:28:20  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
14:28:20  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
14:28:20  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
14:28:20  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
14:28:20  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
14:28:20  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
14:28:20  65  );
14:28:20  66  
14:28:20  67  PROCEDURE CREATE_CPT_EXCEPTION (
14:28:20  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
14:28:20  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
14:28:20  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:20  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
14:28:20  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
14:28:20  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
14:28:20  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
14:28:20  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
14:28:20  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
14:28:20  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
14:28:20  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
14:28:20  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:28:20  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:28:20  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
14:28:20  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
14:28:20  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
14:28:20  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
14:28:20  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
14:28:20  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
14:28:20  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
14:28:20  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
14:28:20  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
14:28:20  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
14:28:20  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
14:28:20  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
14:28:20  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
14:28:20  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
14:28:20  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
14:28:20  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
14:28:20  97  );
14:28:20  98  
14:28:20  99  PROCEDURE CREATE_CPT_DEPOSIT (
14:28:20 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
14:28:20 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
14:28:20 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:20 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
14:28:20 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
14:28:20 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
14:28:20 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
14:28:20 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
14:28:20 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
14:28:20 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
14:28:20 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
14:28:20 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:28:20 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:28:20 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
14:28:20 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
14:28:20 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
14:28:20 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
14:28:20 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
14:28:20 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
14:28:20 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
14:28:20 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
14:28:20 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
14:28:20 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
14:28:20 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
14:28:20 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
14:28:20 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
14:28:20 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
14:28:20 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
14:28:20 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
14:28:20 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
14:28:20 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
14:28:20 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
14:28:20 132  );
14:28:20 133  
14:28:20 134  PROCEDURE CREATE_PP_SETTLEMENT (
14:28:20 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
14:28:20 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
14:28:20 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:20 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
14:28:20 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
14:28:20 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
14:28:20 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
14:28:20 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
14:28:20 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
14:28:20 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
14:28:20 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
14:28:20 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
14:28:20 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
14:28:20 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
14:28:20 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
14:28:20 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
14:28:20 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
14:28:20 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
14:28:20 153  );
14:28:20 154  
14:28:20 155  PROCEDURE CREATE_PP_DISPUTE (
14:28:20 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
14:28:20 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
14:28:20 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:20 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
14:28:20 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
14:28:20 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
14:28:20 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
14:28:20 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
14:28:20 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
14:28:20 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
14:28:20 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
14:28:20 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
14:28:20 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
14:28:20 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
14:28:20 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
14:28:20 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
14:28:20 172  );
14:28:20 173  
14:28:20 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
14:28:20 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
14:28:20 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
14:28:20 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:20 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
14:28:20 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
14:28:20 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
14:28:20 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
14:28:20 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
14:28:20 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
14:28:20 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
14:28:20 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
14:28:20 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
14:28:20 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
14:28:20 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
14:28:20 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
14:28:20 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
14:28:20 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
14:28:20 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
14:28:20 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
14:28:20 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
14:28:20 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
14:28:20 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
14:28:20 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
14:28:20 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
14:28:20 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
14:28:20 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
14:28:20 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
14:28:20 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
14:28:20 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
14:28:20 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
14:28:20 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
14:28:20 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
14:28:20 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
14:28:20 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
14:28:20 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
14:28:20 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
14:28:20 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
14:28:20 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
14:28:20 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
14:28:20 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
14:28:20 215  );
14:28:20 216  
14:28:20 217  PROCEDURE GET_EXT_SOURCE_LOG (
14:28:20 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:28:20 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
14:28:20 220  	out_result_set		 OUT SYS_REFCURSOR
14:28:20 221  );
14:28:20 222  
14:28:20 223  FUNCTION CHECK_EXT_SOURCE_LOG (
14:28:20 224  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:28:20 225  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
14:28:20 226  ) RETURN NUMBER;
14:28:20 227  
14:28:20 228  PROCEDURE CREATE_AMEX_CHARGEBACK (
14:28:20 229  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
14:28:20 230  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
14:28:20 231  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
14:28:20 232  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
14:28:20 233  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
14:28:20 234  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
14:28:20 235  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
14:28:20 236  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
14:28:20 237  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
14:28:20 238  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
14:28:20 239  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
14:28:20 240  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
14:28:20 241  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
14:28:20 242  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
14:28:20 243  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
14:28:20 244  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
14:28:20 245  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
14:28:20 246  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
14:28:20 247  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
14:28:20 248  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
14:28:20 249  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
14:28:20 250  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
14:28:20 251  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
14:28:20 252  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
14:28:20 253  );
14:28:20 254  
14:28:20 255  END PROCS_RECONCILIATION_CRU_V23;
14:28:20 256  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.10
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_reporting.sql
Compiling header for procs_reporting.sql
14:28:20 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
14:28:20   2  
14:28:20   3  ----
14:28:20   4  --------------------------------------------------------------------------------
14:28:20   5  ----
14:28:20   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20   7  ----
14:28:20   8  --------------------------------------------------------------------------------
14:28:20   9  ----
14:28:20  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  11  ----
14:28:20  12  --------------------------------------------------------------------------------
14:28:20  13  ----
14:28:20  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  15  ----
14:28:20  16  --------------------------------------------------------------------------------
14:28:20  17  ----
14:28:20  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  19  ----
14:28:20  20  --------------------------------------------------------------------------------
14:28:20  21  ----
14:28:20  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  23  ----
14:28:20  24  --------------------------------------------------------------------------------
14:28:20  25  ----
14:28:20  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  27  ----
14:28:20  28  --------------------------------------------------------------------------------
14:28:20  29  ----
14:28:20  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  31  ----
14:28:20  32  --------------------------------------------------------------------------------
14:28:20  33  ----
14:28:20  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  35  ----
14:28:20  36  --------------------------------------------------------------------------------
14:28:20  37  ----
14:28:20  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  39  ----
14:28:20  40  --------------------------------------------------------------------------------
14:28:20  41  ----
14:28:20  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  43  ----
14:28:20  44  --------------------------------------------------------------------------------
14:28:20  45  ----
14:28:20  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  47  ----
14:28:20  48  --------------------------------------------------------------------------------
14:28:20  49  ----
14:28:20  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  51  ----
14:28:20  52  --------------------------------------------------------------------------------
14:28:20  53  ----
14:28:20  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  55  ----
14:28:20  56  --------------------------------------------------------------------------------
14:28:20  57  ----
14:28:20  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  59  ----
14:28:20  60  --------------------------------------------------------------------------------
14:28:20  61  ----
14:28:20  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  63  ----
14:28:20  64  --------------------------------------------------------------------------------
14:28:20  65  ----
14:28:20  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  67  ----
14:28:20  68  --------------------------------------------------------------------------------
14:28:20  69  ----
14:28:20  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  71  ----
14:28:20  72  --------------------------------------------------------------------------------
14:28:20  73  ----
14:28:20  74  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  75  ----
14:28:20  76  --------------------------------------------------------------------------------
14:28:20  77  ----
14:28:20  78  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  79  ----
14:28:20  80  --------------------------------------------------------------------------------
14:28:20  81  ----
14:28:20  82  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  83  ----
14:28:20  84  --------------------------------------------------------------------------------
14:28:20  85  ----
14:28:20  86  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  87  ----
14:28:20  88  --------------------------------------------------------------------------------
14:28:20  89  ----
14:28:20  90  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  91  ----
14:28:20  92  --------------------------------------------------------------------------------
14:28:20  93  ----
14:28:20  94  
14:28:20  95  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20  96  ----
14:28:20  97  --------------------------------------------------------------------------------
14:28:20  98  ----
14:28:20  99  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 100  ----
14:28:20 101  --------------------------------------------------------------------------------
14:28:20 102  ----
14:28:20 103  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 104  ----
14:28:20 105  --------------------------------------------------------------------------------
14:28:20 106  ----
14:28:20 107  /**/
14:28:20 108  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 109  ----
14:28:20 110  --------------------------------------------------------------------------------
14:28:20 111  ----
14:28:20 112  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 113  ----
14:28:20 114  --------------------------------------------------------------------------------
14:28:20 115  ----
14:28:20 116  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 117  ----
14:28:20 118  --------------------------------------------------------------------------------
14:28:20 119  ----
14:28:20 120  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 121  ----
14:28:20 122  --------------------------------------------------------------------------------
14:28:20 123  ----
14:28:20 124  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 125  ----
14:28:20 126  --------------------------------------------------------------------------------
14:28:20 127  ----
14:28:20 128  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 129  ----
14:28:20 130  --------------------------------------------------------------------------------
14:28:20 131  ----
14:28:20 132  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 133  ----
14:28:20 134  --------------------------------------------------------------------------------
14:28:20 135  ----
14:28:20 136  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 137  ----
14:28:20 138  --------------------------------------------------------------------------------
14:28:20 139  ----
14:28:20 140  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 141  ----
14:28:20 142  --------------------------------------------------------------------------------
14:28:20 143  ----
14:28:20 144  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 145  ----
14:28:20 146  --------------------------------------------------------------------------------
14:28:20 147  ----
14:28:20 148  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
14:28:20 149  ----
14:28:20 150  --------------------------------------------------------------------------------
14:28:20 151  ----
14:28:20 152  /**/
14:28:20 153  END PROCS_REPORTING;
14:28:20 154  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.41
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_reports.sql
Compiling header for procs_reports.sql
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> -- DDL for package PROCS_REPORTS
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> 
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V23" AS
14:28:20   2  
14:28:20   3  FUNCTION GET_PRODUCT_NAMES(
14:28:20   4  	in_offer_id IN NUMBER
14:28:20   5  ) RETURN VARCHAR2;
14:28:20   6  
14:28:20   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
14:28:20   8  	in_start_date  IN DATE,
14:28:20   9  	in_end_date    IN DATE,
14:28:20  10  	out_result_set OUT SYS_REFCURSOR
14:28:20  11  );
14:28:20  12  
14:28:20  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
14:28:20  14  	in_offer_id	       IN NUMBER,
14:28:20  15  	in_start_date	       IN DATE,
14:28:20  16  	in_end_date	       IN DATE,
14:28:20  17  	out_new_purchasers_num OUT NUMBER,
14:28:20  18  	out_renewals_num       OUT NUMBER,
14:28:20  19  	out_product_names      OUT VARCHAR2,
14:28:20  20  	out_total_dollar_value OUT NUMBER,
14:28:20  21  	out_unique_purchasers  OUT NUMBER
14:28:20  22  );
14:28:20  23  
14:28:20  24  /*
14:28:20  25  FUNCTIONS FOR THE FLASH REPORT
14:28:20  26  */
14:28:20  27  
14:28:20  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
14:28:20  29  	in_offer_id	       IN NUMBER,
14:28:20  30  	in_start_date	       IN DATE,
14:28:20  31  	in_end_date	       IN DATE
14:28:20  32  ) RETURN NUMBER;
14:28:20  33  
14:28:20  34  FUNCTION FLR_RENEWALS_NUM (
14:28:20  35  	in_offer_id	       IN NUMBER,
14:28:20  36  	in_start_date	       IN DATE,
14:28:20  37  	in_end_date	       IN DATE
14:28:20  38  ) RETURN NUMBER;
14:28:20  39  
14:28:20  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
14:28:20  41  	in_offer_id	       IN NUMBER,
14:28:20  42  	in_start_date	       IN DATE,
14:28:20  43  	in_end_date	       IN DATE
14:28:20  44  ) RETURN NUMBER;
14:28:20  45  
14:28:20  46  FUNCTION FLR_UNIQUE_PURCHASERS (
14:28:20  47  	in_offer_id	       IN NUMBER,
14:28:20  48  	in_start_date	       IN DATE,
14:28:20  49  	in_end_date	       IN DATE
14:28:20  50  ) RETURN NUMBER;
14:28:20  51  
14:28:20  52  END PROCS_REPORTS_V23;
14:28:20  53  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_subscription_cru.sql
Compiling header for procs_subscription_cru.sql
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> 
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V23" AS
14:28:20   2  
14:28:20   3  PROCEDURE CREATE_SUBSCRIPTION(
14:28:20   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
14:28:20   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
14:28:20   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
14:28:20   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
14:28:20   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
14:28:20   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
14:28:20  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
14:28:20  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
14:28:20  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
14:28:20  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
14:28:20  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
14:28:20  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
14:28:20  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
14:28:20  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
14:28:20  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
14:28:20  19  );
14:28:20  20  
14:28:20  21  PROCEDURE UPDATE_SUBSCRIPTION(
14:28:20  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
14:28:20  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
14:28:20  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
14:28:20  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
14:28:20  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
14:28:20  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
14:28:20  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
14:28:20  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:28:20  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
14:28:20  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
14:28:20  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
14:28:20  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
14:28:20  34  );
14:28:20  35  
14:28:20  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
14:28:20  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
14:28:20  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:28:20  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
14:28:20  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:28:20  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
14:28:20  42  );
14:28:20  43  
14:28:20  44  END PROCS_SUBSCRIPTION_CRU_V23;
14:28:20  45  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_subscription.sql
Compiling header for procs_subscription.sql
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V23" AS
14:28:20   2  
14:28:20   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
14:28:20   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
14:28:20   5  	in_updater	     IN VARCHAR2,
14:28:20   6  	in_duration_in_hours IN NUMBER
14:28:20   7  );
14:28:20   8  
14:28:20   9  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
14:28:20  10  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
14:28:20  11  	in_updater    IN VARCHAR2
14:28:20  12  );
14:28:20  13  
14:28:20  14  PROCEDURE START_SUBSCRIPTION_CREATION (
14:28:20  15  	in_group_id	      IN NUMBER,
14:28:20  16  	in_created_by	      IN VARCHAR2,
14:28:20  17  	in_offer_chain_id     IN NUMBER,
14:28:20  18  	in_instrument_type_id IN NUMBER,
14:28:20  19  	in_instrument_id      IN NUMBER,
14:28:20  20  	in_agent_id	      IN NUMBER,
14:28:20  21  	in_note 	      IN VARCHAR2,
14:28:20  22  	out_subscription_id   OUT NUMBER,
14:28:20  23  	out_invoice_id	      OUT NUMBER,
14:28:20  24  	out_new_license_id    OUT NUMBER,
14:28:20  25  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.TRUE
14:28:20  26  );
14:28:20  27  
14:28:20  28  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
14:28:20  29  	in_subscription_id    IN NUMBER,
14:28:20  30  	in_invoice_id	      IN NUMBER,
14:28:20  31  	in_instrument_type_id IN NUMBER,
14:28:20  32  	in_instrument_id      IN NUMBER,
14:28:20  33  	in_created_by	      IN VARCHAR2
14:28:20  34  );
14:28:20  35  
14:28:20  36  PROCEDURE SUSPEND_SUBSCRIPTION(
14:28:20  37  	  in_subs_id	IN NUMBER ,
14:28:20  38  	  in_updated_by IN VARCHAR2
14:28:20  39  );
14:28:20  40  
14:28:20  41  PROCEDURE REACTIVATE_SUBSCRIPTION (
14:28:20  42  	in_subscription_id IN  NUMBER,
14:28:20  43  	in_updated_by	   IN  VARCHAR2
14:28:20  44  );
14:28:20  45  
14:28:20  46  PROCEDURE GET_SUBSCRIPTION_INFO (
14:28:20  47  	  in_subscription_id IN  NUMBER,
14:28:20  48  	  out_result_set      OUT SYS_REFCURSOR
14:28:20  49  );
14:28:20  50  
14:28:20  51  PROCEDURE GET_SUBSCRIPTION_INVOICES (
14:28:20  52  	in_subscription_id  IN	NUMBER,
14:28:20  53  	out_result_set	    OUT SYS_REFCURSOR
14:28:20  54  );
14:28:20  55  
14:28:20  56  PROCEDURE GET_SUBSCRIPTION_NOTES (
14:28:20  57  	in_subscription_id  IN	NUMBER,
14:28:20  58  	out_result_set	    OUT SYS_REFCURSOR
14:28:20  59  );
14:28:20  60  
14:28:20  61  PROCEDURE ANNOTATE_SUBSCRIPTION (
14:28:20  62  	in_subscription_id IN  NUMBER,
14:28:20  63  	in_agent_id	   IN  NUMBER,
14:28:20  64  	in_note 	   IN  VARCHAR2,
14:28:20  65  	in_created_by	   IN  VARCHAR2
14:28:20  66  );
14:28:20  67  
14:28:20  68  PROCEDURE GET_CANCEL_REASONS (
14:28:20  69  	out_result_set OUT    SYS_REFCURSOR
14:28:20  70  );
14:28:20  71  
14:28:20  72  FUNCTION GET_RENEWAL_DATE (
14:28:20  73  	in_subscription_id in NUMBER
14:28:20  74  ) RETURN DATE;
14:28:20  75  
14:28:20  76  FUNCTION GET_RECENT_CHARGE (
14:28:20  77  	in_subscription_id IN NUMBER
14:28:20  78  ) RETURN NUMBER;
14:28:20  79  
14:28:20  80  FUNCTION GET_BILLING_CYCLE (
14:28:20  81  	in_subscription_id IN NUMBER
14:28:20  82  ) RETURN VARCHAR2;
14:28:20  83  
14:28:20  84  PROCEDURE REFUND_SUBSCRIPTION (
14:28:20  85  	in_subscription_id IN NUMBER,
14:28:20  86  	in_invoice_id	   IN NUMBER,
14:28:20  87  	in_refund_amount   IN NUMBER,
14:28:20  88  	in_note 	   IN VARCHAR2,
14:28:20  89  	in_created_by	   IN VARCHAR2,
14:28:20  90  	out_charge_id	   OUT NUMBER
14:28:20  91  );
14:28:20  92  
14:28:20  93  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
14:28:20  94  	in_subscription_id	IN NUMBER,
14:28:20  95  	in_effective_start_date IN DATE,
14:28:20  96  	in_effective_end_date	IN DATE,
14:28:20  97  	in_note 		IN VARCHAR2,
14:28:20  98  	in_updated_by		IN VARCHAR2
14:28:20  99  );
14:28:20 100  
14:28:20 101  FUNCTION CALC_SUBSCRIPTION_END_DATE (
14:28:20 102  	in_subscription_id IN NUMBER
14:28:20 103  ) RETURN DATE;
14:28:20 104  
14:28:20 105  PROCEDURE HAS_FUTURE_LICENSE (
14:28:20 106  	in_license_id IN  NUMBER,
14:28:20 107  	out_result    OUT NUMBER
14:28:20 108  );
14:28:20 109  
14:28:20 110  PROCEDURE CLOSE_SUBSCRIPTION (
14:28:20 111  	in_subscription_id IN NUMBER,
14:28:20 112  	in_updated_by	   IN VARCHAR2
14:28:20 113  );
14:28:20 114  
14:28:20 115  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
14:28:20 116  	in_subscription_id IN NUMBER,
14:28:20 117  	out_group_id	   OUT NUMBER
14:28:20 118  );
14:28:20 119  
14:28:20 120  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
14:28:20 121  	in_subscription_id IN NUMBER,
14:28:20 122  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 123  );
14:28:20 124  
14:28:20 125  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
14:28:20 126  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
14:28:20 127  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
14:28:20 128  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
14:28:20 129  );
14:28:20 130  
14:28:20 131  PROCEDURE GET_ACTIVE_INVOICES_IDS (
14:28:20 132  	in_subscription_id IN NUMBER,
14:28:20 133  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 134  );
14:28:20 135  
14:28:20 136  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
14:28:20 137  	in_invoice_id	     IN NUMBER,
14:28:20 138  	in_updated_by	     IN VARCHAR2,
14:28:20 139  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
14:28:20 140  );
14:28:20 141  
14:28:20 142  PROCEDURE FINALIZE_CANCELATION (
14:28:20 143  	in_subscription_id    IN NUMBER,
14:28:20 144  	in_cancelation_reason IN VARCHAR2,
14:28:20 145  	in_cancelation_date   IN DATE,
14:28:20 146  	in_note 	      IN VARCHAR2,
14:28:20 147  	in_agent_id	      IN NUMBER,
14:28:20 148  	in_updated_by	      IN VARCHAR2
14:28:20 149  );
14:28:20 150  
14:28:20 151  PROCEDURE FINALIZE_FALSE_START (
14:28:20 152  	in_subscription_id    IN NUMBER,
14:28:20 153  	in_cancelation_date   IN DATE,
14:28:20 154  	in_note 	      IN VARCHAR2,
14:28:20 155  	in_agent_id	      IN NUMBER,
14:28:20 156  	in_updated_by	      IN VARCHAR2
14:28:20 157  );
14:28:20 158  
14:28:20 159  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
14:28:20 160  	in_subscription_id IN NUMBER
14:28:20 161  ) RETURN NUMBER;
14:28:20 162  
14:28:20 163  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
14:28:20 164  	in_subscription_id IN NUMBER,
14:28:20 165  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 166  );
14:28:20 167  
14:28:20 168  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
14:28:20 169  	in_subscription_id IN NUMBER,
14:28:20 170  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 171  );
14:28:20 172  
14:28:20 173  PROCEDURE GET_SUBSCR_LIC_OFFER (
14:28:20 174  	in_subscription_id IN NUMBER,
14:28:20 175  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 176  );
14:28:20 177  
14:28:20 178  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
14:28:20 179  	in_subscription_id IN NUMBER,
14:28:20 180  	out_result	   OUT NUMBER
14:28:20 181  );
14:28:20 182  
14:28:20 183  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
14:28:20 184  	in_group_id	   IN NUMBER,
14:28:20 185  	in_offer_chain_id  IN NUMBER,
14:28:20 186  	out_result	   out number
14:28:20 187  );
14:28:20 188  
14:28:20 189  PROCEDURE GET_EXISTING_SUBSCR_IDS (
14:28:20 190  	in_group_id	   IN NUMBER,
14:28:20 191  	in_offer_chain_id  IN NUMBER,
14:28:20 192  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 193  );
14:28:20 194  
14:28:20 195  PROCEDURE ADD_META_DATA (
14:28:20 196  	in_subscription_id IN NUMBER,
14:28:20 197  	in_name 	   IN VARCHAR2,
14:28:20 198  	in_value	   IN VARCHAR2,
14:28:20 199  	in_created_by	   IN VARCHAR2
14:28:20 200  );
14:28:20 201  
14:28:20 202  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
14:28:20 203  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
14:28:20 204  	out_result_set	     OUT SYS_REFCURSOR
14:28:20 205  );
14:28:20 206  
14:28:20 207  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
14:28:20 208  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
14:28:20 209  	out_result_set	   OUT SYS_REFCURSOR
14:28:20 210  );
14:28:20 211  
14:28:20 212  PROCEDURE GET_OPEN_CHARGES_BY_SUBID (
14:28:20 213  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:28:20 214  	out_result_set	    OUT SYS_REFCURSOR
14:28:20 215  );
14:28:20 216  
14:28:20 217  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
14:28:20 218  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
14:28:20 219  ) RETURN NUMBER;
14:28:20 220  
14:28:20 221  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
14:28:20 222  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
14:28:20 223  ) RETURN VARCHAR2;
14:28:20 224  
14:28:20 225  PROCEDURE GET_ACTIVE_MEU_SUBS (
14:28:20 226  	out_result_set	    OUT SYS_REFCURSOR
14:28:20 227  );
14:28:20 228  
14:28:20 229  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
14:28:20 230  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:28:20 231  	out_offer_id	    OUT LICENSE.ID%TYPE
14:28:20 232  );
14:28:20 233  
14:28:20 234  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
14:28:20 235  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:28:20 236  	out_license_id	    OUT LICENSE.ID%TYPE
14:28:20 237  );
14:28:20 238  
14:28:20 239  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
14:28:20 240  	out_result_set	    OUT SYS_REFCURSOR
14:28:20 241  );
14:28:20 242  
14:28:20 243  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
14:28:20 244  	out_result_set	    OUT SYS_REFCURSOR
14:28:20 245  );
14:28:20 246  
14:28:20 247  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
14:28:20 248  	out_result_set	    OUT SYS_REFCURSOR
14:28:20 249  );
14:28:20 250  
14:28:20 251  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
14:28:20 252  	in_max_days_until_close IN NUMBER,
14:28:20 253  	in_num_subs_to_fetch	IN NUMBER,
14:28:20 254  	out_result_set		OUT SYS_REFCURSOR
14:28:20 255  );
14:28:20 256  
14:28:20 257  
14:28:20 258  END PROCS_SUBSCRIPTION_V23;
14:28:20 259  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:20 SQL> 
14:28:20 SQL> prompt Compiling header for procs_system.sql
Compiling header for procs_system.sql
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> -- DDL for package PROCS_SYSTEM
14:28:20 SQL> --------------------------------------------------------------------------------
14:28:20 SQL> 
14:28:20 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V23" AS
14:28:20   2  
14:28:20   3  PROCEDURE INCREMENT_VERSION;
14:28:20   4  
14:28:20   5  PROCEDURE CHECK_VERSION(
14:28:20   6  	  in_vers    IN NUMBER,
14:28:20   7  	  out_result OUT NUMBER
14:28:20   8  );
14:28:20   9  
14:28:20  10  END PROCS_SYSTEM_V23;
14:28:20  11  .
14:28:20 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for procs_taxes_cru.sql
Compiling header for procs_taxes_cru.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PROCS_TAXES_CRU
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_TAX (
14:28:21   4  	inout_tax_id		 IN OUT NUMBER,
14:28:21   5  	in_tax_type_id		 IN NUMBER,
14:28:21   6  	in_calculated_amount	 IN NUMBER,
14:28:21   7  	in_created_by		 IN VARCHAR2,
14:28:21   8  	in_line_item_id 	 IN NUMBER,
14:28:21   9  	in_effective_rate	 IN VARCHAR2,
14:28:21  10  	in_taxable_amount	 IN NUMBER,
14:28:21  11  	in_tax_rule_id		 IN NUMBER,
14:28:21  12  	in_jurisdiction_level_id IN NUMBER,
14:28:21  13  	in_jurisdiction_name	 IN VARCHAR2,
14:28:21  14  	in_jurisdiction_id	 IN VARCHAR2,
14:28:21  15  	in_ext_tax_type 	 IN VARCHAR2,
14:28:21  16  	in_ext_result		 IN VARCHAR2,
14:28:21  17  	in_imposition_type	 IN VARCHAR2,
14:28:21  18  	in_imposition		 IN VARCHAR2
14:28:21  19  );
14:28:21  20  
14:28:21  21  END PROCS_TAXES_CRU_V23;
14:28:21  22  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.03
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for procs_taxes.sql
Compiling header for procs_taxes.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PROCS_TAXES
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE ADD_TAX (
14:28:21   4  	in_tax_type_id		 IN NUMBER,
14:28:21   5  	in_calculated_amount	 IN NUMBER,
14:28:21   6  	in_created_by		 IN VARCHAR2,
14:28:21   7  	in_line_item_id 	 IN NUMBER,
14:28:21   8  	in_effective_rate	 IN VARCHAR2,
14:28:21   9  	in_taxable_amount	 IN NUMBER,
14:28:21  10  	in_tax_rule_id		 IN NUMBER,
14:28:21  11  	in_jurisdiction_level_id IN NUMBER,
14:28:21  12  	in_jurisdiction_name	 IN VARCHAR2,
14:28:21  13  	in_jurisdiction_id	 IN VARCHAR2,
14:28:21  14  	in_ext_tax_type 	 IN VARCHAR2,
14:28:21  15  	in_ext_result		 IN VARCHAR2,
14:28:21  16  	in_imposition_type	 IN VARCHAR2,
14:28:21  17  	in_imposition		 IN VARCHAR2
14:28:21  18  );
14:28:21  19  
14:28:21  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
14:28:21  21  	in_country_code IN CHAR,
14:28:21  22  	in_check_date IN DATE,
14:28:21  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V23.FALSE
14:28:21  24  );
14:28:21  25  
14:28:21  26  PROCEDURE GET_TAX_CATEGORY (
14:28:21  27  	in_tax_category_id IN NUMBER,
14:28:21  28  	out_result_set	   OUT SYS_REFCURSOR
14:28:21  29  );
14:28:21  30  
14:28:21  31  END PROCS_TAXES_V23;
14:28:21  32  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for procs_test.sql
Compiling header for procs_test.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PROCS_TEST
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE TEST_CLEAR_ALL;
14:28:21   4  PROCEDURE TEST_CLEAR_PRODUCTS;
14:28:21   5  
14:28:21   6  /********************************************/
14:28:21   7  
14:28:21   8  PROCEDURE TEST_GET_ACCOUNT (
14:28:21   9  	in_group_id	IN NUMBER,
14:28:21  10  	out_result_set	OUT SYS_REFCURSOR
14:28:21  11  );
14:28:21  12  
14:28:21  13  /********************************************/
14:28:21  14  
14:28:21  15  PROCEDURE TEST_GET_SUBSCRIPTION (
14:28:21  16  	in_subscription_id IN NUMBER,
14:28:21  17  	out_result_set	   OUT SYS_REFCURSOR
14:28:21  18  );
14:28:21  19  
14:28:21  20  /*********************************************/
14:28:21  21  
14:28:21  22  PROCEDURE TEST_DELETE_INVOICE (
14:28:21  23  	in_invoice_id IN NUMBER
14:28:21  24  );
14:28:21  25  
14:28:21  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
14:28:21  27  	in_group_id IN NUMBER
14:28:21  28  );
14:28:21  29  
14:28:21  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
14:28:21  31  	in_start_group_id IN NUMBER,
14:28:21  32  	in_end_group_id   IN NUMBER
14:28:21  33  );
14:28:21  34  
14:28:21  35  /**********************************************/
14:28:21  36  
14:28:21  37  FUNCTION TEST_IS_INVOICE_EXISTS(
14:28:21  38  /*
14:28:21  39  1 - exists
14:28:21  40  0 - not exists
14:28:21  41  */
14:28:21  42  	in_invoice_id IN NUMBER
14:28:21  43  ) RETURN NUMBER;
14:28:21  44  
14:28:21  45  PROCEDURE TEST_GET_INVOICE_INFO (
14:28:21  46  	in_invoice_id  IN NUMBER,
14:28:21  47  	out_result_set OUT SYS_REFCURSOR
14:28:21  48  );
14:28:21  49  
14:28:21  50  /******************************************************************************/
14:28:21  51  
14:28:21  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
14:28:21  53  	in_offer_chain_id in number
14:28:21  54  );
14:28:21  55  
14:28:21  56  END PROCS_TEST_V23;
14:28:21  57  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.04
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for procs_transaction_cru.sql
Compiling header for procs_transaction_cru.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PROCS_TRANSACTION_CRU
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_TRANSACTION (
14:28:21   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
14:28:21   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
14:28:21   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
14:28:21   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
14:28:21   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
14:28:21  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V23.FALSE,
14:28:21  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
14:28:21  12  );
14:28:21  13  
14:28:21  14  PROCEDURE UPDATE_TRANSACTION (
14:28:21  15  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
14:28:21  16  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
14:28:21  17  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
14:28:21  18  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
14:28:21  19  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
14:28:21  20  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
14:28:21  21  );
14:28:21  22  
14:28:21  23  PROCEDURE READ_TRANSACTION (
14:28:21  24  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:28:21  25  	out_result_set	  OUT SYS_REFCURSOR
14:28:21  26  );
14:28:21  27  
14:28:21  28  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
14:28:21  29  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
14:28:21  30  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
14:28:21  31  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
14:28:21  32  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:28:21  33  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
14:28:21  34  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
14:28:21  35  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
14:28:21  36  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
14:28:21  37  );
14:28:21  38  
14:28:21  39  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:28:21  40  /*
14:28:21  41  Throws exceptions:
14:28:21  42  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  43  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
14:28:21  44  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  45  */
14:28:21  46  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:28:21  47  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:28:21  48  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:28:21  49  );
14:28:21  50  
14:28:21  51  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
14:28:21  52  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
14:28:21  53  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
14:28:21  54  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:28:21  55  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
14:28:21  56  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
14:28:21  57  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
14:28:21  58  );
14:28:21  59  
14:28:21  60  END PROCS_TRANSACTION_CRU_V23;
14:28:21  61  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.05
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for procs_transaction.sql
Compiling header for procs_transaction.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PROCS_TRANSACTION
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_TRANSACTION (
14:28:21   4  /*
14:28:21   5  Throws exceptions:
14:28:21   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21   8  */
14:28:21   9  	in_transaction_id	  IN NUMBER,
14:28:21  10  	in_status_id		  IN NUMBER,
14:28:21  11  	in_amount		  IN NUMBER,
14:28:21  12  	in_created_by		  IN VARCHAR2,
14:28:21  13  	in_order_id		  IN VARCHAR2,
14:28:21  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE,
14:28:21  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
14:28:21  16  	out_transaction_id	  OUT NUMBER
14:28:21  17  );
14:28:21  18  
14:28:21  19  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
14:28:21  20  /*
14:28:21  21  Throws exceptions:
14:28:21  22  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  23  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  24  */
14:28:21  25  	in_transaction_id	   IN NUMBER,
14:28:21  26  	in_trans_attempt_status    IN NUMBER,
14:28:21  27  	in_external_status_code    IN VARCHAR2,
14:28:21  28  	in_external_status_message IN VARCHAR2,
14:28:21  29  	in_created_by		   IN VARCHAR2,
14:28:21  30  	in_ext_transaction_id	   IN VARCHAR2,
14:28:21  31  	out_transaction_attempt_id OUT NUMBER
14:28:21  32  );
14:28:21  33  
14:28:21  34  PROCEDURE UPDATE_TRANSACTION_STATUS (
14:28:21  35  /*
14:28:21  36  Throws exceptions:
14:28:21  37  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  38  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  39  */
14:28:21  40  	in_transaction_id	 IN NUMBER,
14:28:21  41  	in_updated_by		 IN VARCHAR2,
14:28:21  42  	in_transaction_status_id IN NUMBER
14:28:21  43  );
14:28:21  44  
14:28:21  45  PROCEDURE UPDATE_TRANSACTION_SETTLED (
14:28:21  46  /*
14:28:21  47  Throws exceptions:
14:28:21  48  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  49  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  50  */
14:28:21  51  	in_transaction_id	 IN NUMBER,
14:28:21  52  	in_updated_by		 IN VARCHAR2,
14:28:21  53  	in_is_settled		 IN NUMBER
14:28:21  54  );
14:28:21  55  
14:28:21  56  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
14:28:21  57  /*
14:28:21  58  Throws exceptions:
14:28:21  59  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  60  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  61  */
14:28:21  62  	in_transaction_attempt_id IN NUMBER,
14:28:21  63  	in_updated_by		  IN VARCHAR2
14:28:21  64  );
14:28:21  65  
14:28:21  66  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
14:28:21  67  /*
14:28:21  68  Throws exceptions:
14:28:21  69  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  70  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  71  */
14:28:21  72  	in_transaction_attempt_id     IN NUMBER,
14:28:21  73  	in_transaction_attempt_status IN NUMBER
14:28:21  74  );
14:28:21  75  
14:28:21  76  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
14:28:21  77  /*
14:28:21  78  Throws exceptions:
14:28:21  79  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  80  */
14:28:21  81  	in_transaction_id	      IN NUMBER,
14:28:21  82  	in_transaction_attempt_status IN NUMBER,
14:28:21  83  	out_result_set		      OUT SYS_REFCURSOR
14:28:21  84  );
14:28:21  85  
14:28:21  86  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
14:28:21  87  /*
14:28:21  88  Throws exceptions:
14:28:21  89  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  90  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  91  */
14:28:21  92  	in_transaction_attempt_id IN NUMBER,
14:28:21  93  	in_ext_status_code	  IN VARCHAR2,
14:28:21  94  	in_ext_status_message	  IN VARCHAR2,
14:28:21  95  	in_ext_transaction_id	  IN VARCHAR2
14:28:21  96  );
14:28:21  97  
14:28:21  98  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
14:28:21  99  /*
14:28:21 100  Throws exceptions:
14:28:21 101  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 102  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 103  */
14:28:21 104  	in_transaction_id IN  NUMBER,
14:28:21 105  	out_attempts_num  OUT NUMBER
14:28:21 106  );
14:28:21 107  
14:28:21 108  PROCEDURE GET_TRANSACTION_AMOUNT (
14:28:21 109  /*
14:28:21 110  Throws exceptions:
14:28:21 111  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 112  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 113  */
14:28:21 114  	in_transaction_id      IN  NUMBER,
14:28:21 115  	out_transaction_amount OUT NUMBER
14:28:21 116  );
14:28:21 117  
14:28:21 118  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
14:28:21 119  /*
14:28:21 120  Throws exceptions:
14:28:21 121  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 122  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 123  */
14:28:21 124  	in_charge_id   IN  NUMBER,
14:28:21 125  	out_result_set OUT SYS_REFCURSOR
14:28:21 126  );
14:28:21 127  
14:28:21 128  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
14:28:21 129  /*
14:28:21 130  Throws exceptions:
14:28:21 131  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 132  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 133  */
14:28:21 134  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
14:28:21 135  	out_result_set OUT SYS_REFCURSOR
14:28:21 136  );
14:28:21 137  
14:28:21 138  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
14:28:21 139  /*
14:28:21 140  Throws exceptions:
14:28:21 141  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 142  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 143  */
14:28:21 144  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
14:28:21 145  	out_result_set OUT SYS_REFCURSOR
14:28:21 146  );
14:28:21 147  
14:28:21 148  PROCEDURE GET_TRANSACTION_ATTEMPTS (
14:28:21 149  /*
14:28:21 150  Throws exceptions:
14:28:21 151  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 152  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 153  */
14:28:21 154  	in_transaction_id IN  NUMBER,
14:28:21 155  	out_result_set	  OUT SYS_REFCURSOR
14:28:21 156  );
14:28:21 157  
14:28:21 158  PROCEDURE RESERVE_TRANSACTION_ID (
14:28:21 159  /*
14:28:21 160  Throws exceptions:
14:28:21 161  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 162  */
14:28:21 163  	out_transaction_id OUT NUMBER
14:28:21 164  );
14:28:21 165  
14:28:21 166  PROCEDURE GET_TRANSACTION_BY_ID (
14:28:21 167  /*
14:28:21 168  Throws exceptions:
14:28:21 169  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 170  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 171  */
14:28:21 172  	in_transaction_id IN NUMBER,
14:28:21 173  	out_result_set	  OUT SYS_REFCURSOR
14:28:21 174  );
14:28:21 175  
14:28:21 176  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:28:21 177  /*
14:28:21 178  Throws exceptions:
14:28:21 179  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 180  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
14:28:21 181  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 182  */
14:28:21 183  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:28:21 184  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:28:21 185  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:28:21 186  );
14:28:21 187  
14:28:21 188  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
14:28:21 189  /*
14:28:21 190  Throws exceptions:
14:28:21 191  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 192  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 193  */
14:28:21 194  	in_invoice_id	IN  NUMBER,
14:28:21 195  	out_result_set OUT SYS_REFCURSOR
14:28:21 196  );
14:28:21 197  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
14:28:21 198  /*
14:28:21 199  Throws exceptions:
14:28:21 200  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 201  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 202  */
14:28:21 203  	in_transaction_id IN  NUMBER,
14:28:21 204  	out_is_successfull  OUT NUMBER
14:28:21 205  );
14:28:21 206  
14:28:21 207  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
14:28:21 208  	in_transaction_id IN NUMBER
14:28:21 209  ) RETURN NUMBER;
14:28:21 210  
14:28:21 211  FUNCTION GET_TRANSACTION_INTRL_TAXES (
14:28:21 212  	in_transaction_id IN NUMBER
14:28:21 213  ) RETURN NUMBER;
14:28:21 214  
14:28:21 215  -- norlov: #38796
14:28:21 216  PROCEDURE GET_TRANSACTIONS (
14:28:21 217  /*
14:28:21 218  Throws exceptions:
14:28:21 219  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 220  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 221  */
14:28:21 222  	in_group_id	      IN  NUMBER,
14:28:21 223  	in_invoice_id	      IN NUMBER DEFAULT NULL,
14:28:21 224  	in_subscription_id    IN NUMBER DEFAULT NULL,
14:28:21 225  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
14:28:21 226  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
14:28:21 227  	in_transaction_status IN NUMBER DEFAULT NULL,
14:28:21 228  	out_result_set	      OUT SYS_REFCURSOR
14:28:21 229  );
14:28:21 230  
14:28:21 231  FUNCTION IS_TRANSACTION_COLLECTED (
14:28:21 232  /*
14:28:21 233  Throws:
14:28:21 234  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 235  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 236  Returns:
14:28:21 237  GLOBAL_CONST.TRUE if transaction collected,
14:28:21 238  GLOBAL_CONST.FALSE else
14:28:21 239  */
14:28:21 240  	in_transaction_id IN NUMBER
14:28:21 241  ) RETURN NUMBER;
14:28:21 242  
14:28:21 243  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
14:28:21 244  /*
14:28:21 245  Throws exceptions:
14:28:21 246  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 247  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 248  */
14:28:21 249  	in_charge_id   in  number,
14:28:21 250  	out_attempt_count out number
14:28:21 251  );
14:28:21 252  
14:28:21 253  END PROCS_TRANSACTION_V23;
14:28:21 254  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for public_procs_billing.sql
Compiling header for public_procs_billing.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PUBLIC_PROCS_BILLING
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:28:21   4  /*
14:28:21   5  Throws exceptions:
14:28:21   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21   8  */
14:28:21   9  	  in_offer_chain_id IN	 NUMBER,
14:28:21  10  	  out_result_set    OUT  SYS_REFCURSOR
14:28:21  11  );
14:28:21  12  
14:28:21  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
14:28:21  14  /*
14:28:21  15  Throws exceptions:
14:28:21  16  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  17  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  18  */
14:28:21  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:21  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
14:28:21  21  );
14:28:21  22  
14:28:21  23  PROCEDURE GET_PENDING_INVOICES (
14:28:21  24  /*
14:28:21  25  Throws exceptions:
14:28:21  26  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  27  */
14:28:21  28  	out_result_set	     OUT SYS_REFCURSOR,
14:28:21  29  	in_row_number	     IN NUMBER DEFAULT NULL
14:28:21  30  );
14:28:21  31  
14:28:21  32  PROCEDURE GET_PENDING_REFUND_CHARGES (
14:28:21  33  /*
14:28:21  34  Throws exceptions:
14:28:21  35  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  36  */
14:28:21  37  	out_result_set	    OUT SYS_REFCURSOR,
14:28:21  38  	in_row_number	    IN NUMBER DEFAULT NULL
14:28:21  39  );
14:28:21  40  
14:28:21  41  PROCEDURE GET_UNPROCESSED_CHARGES (
14:28:21  42  /*
14:28:21  43  Throws exceptions:
14:28:21  44  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  45  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  46  */
14:28:21  47  	in_invoice_id  IN NUMBER,
14:28:21  48  	out_result_set OUT SYS_REFCURSOR
14:28:21  49  );
14:28:21  50  
14:28:21  51  PROCEDURE GET_PROCESSED_CHARGES (
14:28:21  52  /*
14:28:21  53  Throws exceptions:
14:28:21  54  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  55  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  56  */
14:28:21  57  	in_invoice_id  IN NUMBER,
14:28:21  58  	out_result_set OUT SYS_REFCURSOR
14:28:21  59  );
14:28:21  60  
14:28:21  61  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
14:28:21  62  /*
14:28:21  63  Throws exceptions:
14:28:21  64  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  65  */
14:28:21  66  	in_transaction_id	      IN NUMBER,
14:28:21  67  	in_transaction_attempt_status IN NUMBER,
14:28:21  68  	out_result_set		      OUT SYS_REFCURSOR
14:28:21  69  );
14:28:21  70  
14:28:21  71  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
14:28:21  72  /*
14:28:21  73  Throws exceptions:
14:28:21  74  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  75  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  76  */
14:28:21  77  	in_transaction_attempt_id     IN NUMBER,
14:28:21  78  	in_transaction_attempt_status IN NUMBER
14:28:21  79  );
14:28:21  80  
14:28:21  81  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
14:28:21  82  /*
14:28:21  83  Throws exceptions:
14:28:21  84  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  85  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  86  */
14:28:21  87  	in_transaction_attempt_id IN NUMBER,
14:28:21  88  	in_updated_by		  IN VARCHAR2
14:28:21  89  );
14:28:21  90  
14:28:21  91  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
14:28:21  92  /*
14:28:21  93  Throws exceptions:
14:28:21  94  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  95  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  96  */
14:28:21  97  	in_transaction_id	   IN NUMBER,
14:28:21  98  	in_trans_attempt_status    IN NUMBER,
14:28:21  99  	in_external_status_code    IN VARCHAR2,
14:28:21 100  	in_external_status_message IN VARCHAR2,
14:28:21 101  	in_created_by		   IN VARCHAR2,
14:28:21 102  	in_ext_transaction_id	   IN VARCHAR2,
14:28:21 103  	out_transaction_attempt_id OUT NUMBER
14:28:21 104  );
14:28:21 105  
14:28:21 106  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
14:28:21 107  /*
14:28:21 108  Throws exceptions:
14:28:21 109  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 110  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 111  */
14:28:21 112  	in_transaction_attempt_id IN NUMBER,
14:28:21 113  	in_ext_status_code	  IN VARCHAR2,
14:28:21 114  	in_ext_status_message	  IN VARCHAR2,
14:28:21 115  	in_ext_transaction_id	  IN VARCHAR2
14:28:21 116  );
14:28:21 117  
14:28:21 118  PROCEDURE UPDATE_TRANSACTION_STATUS (
14:28:21 119  /*
14:28:21 120  Throws exceptions:
14:28:21 121  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 122  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 123  */
14:28:21 124  	in_transaction_id	 IN NUMBER,
14:28:21 125  	in_updated_by		 IN VARCHAR2,
14:28:21 126  	in_transaction_status_id IN NUMBER
14:28:21 127  );
14:28:21 128  
14:28:21 129  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
14:28:21 130  /*
14:28:21 131  Throws exceptions:
14:28:21 132  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 133  */
14:28:21 134  	in_transaction_id IN  NUMBER,
14:28:21 135  	out_attempts_num  OUT NUMBER
14:28:21 136  );
14:28:21 137  
14:28:21 138  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
14:28:21 139  /*
14:28:21 140  Throws exceptions:
14:28:21 141  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 142  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 143  */
14:28:21 144  	in_transaction_id IN  NUMBER,
14:28:21 145  	out_is_successfull  OUT NUMBER
14:28:21 146  );
14:28:21 147  
14:28:21 148  PROCEDURE UPDATE_INVOICE_STATUS (
14:28:21 149  /*
14:28:21 150  Throws exceptions:
14:28:21 151  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 152  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 153  */
14:28:21 154  	in_invoice_id		       IN NUMBER,
14:28:21 155  	in_invoice_status_id	       IN NUMBER,
14:28:21 156  	in_updated_by		       IN VARCHAR2
14:28:21 157  );
14:28:21 158  
14:28:21 159  PROCEDURE SUSPEND_SUBSCRIPTION(
14:28:21 160  /*
14:28:21 161  Throws exceptions:
14:28:21 162  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 163  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:21 164  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 165  */
14:28:21 166  	  in_subs_id	IN NUMBER ,
14:28:21 167  	  in_updated_by IN VARCHAR2
14:28:21 168  );
14:28:21 169  
14:28:21 170  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:28:21 171  /*
14:28:21 172  Throws exceptions:
14:28:21 173  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 174  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 175  */
14:28:21 176  	in_credit_card_id IN  NUMBER,
14:28:21 177  	out_result_set	  OUT SYS_REFCURSOR
14:28:21 178  );
14:28:21 179  
14:28:21 180  PROCEDURE GET_TRANSACTION_AMOUNT (
14:28:21 181  /*
14:28:21 182  Throws exceptions:
14:28:21 183  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 184  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 185  */
14:28:21 186  	in_transaction_id      IN  NUMBER,
14:28:21 187  	out_transaction_amount OUT NUMBER
14:28:21 188  );
14:28:21 189  
14:28:21 190  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
14:28:21 191  /*
14:28:21 192  Throws exceptions:
14:28:21 193  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 194  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 195  */
14:28:21 196  	in_invoice_id  IN  NUMBER,
14:28:21 197  	out_account_id OUT NUMBER
14:28:21 198  );
14:28:21 199  
14:28:21 200  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
14:28:21 201  /*
14:28:21 202  Throws exceptions:
14:28:21 203  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:21 204  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 205  */
14:28:21 206  	in_gift_certificate_id IN NUMBER,
14:28:21 207  	out_result_set	       OUT SYS_REFCURSOR
14:28:21 208  );
14:28:21 209  
14:28:21 210  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
14:28:21 211  /*
14:28:21 212  Throws exceptions:
14:28:21 213  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 214  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 215  */
14:28:21 216  	in_charge_id	    IN NUMBER,
14:28:21 217  	out_subscription_id OUT NUMBER
14:28:21 218  );
14:28:21 219  
14:28:21 220  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
14:28:21 221  /*
14:28:21 222  Throws exceptions:
14:28:21 223  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 224  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 225  */
14:28:21 226  	in_gift_certificate_id IN NUMBER,
14:28:21 227  	in_charge_id	       IN NUMBER,
14:28:21 228  	out_result	       OUT NUMBER
14:28:21 229  );
14:28:21 230  
14:28:21 231  PROCEDURE GET_SUBSCRIPTION_INFO (
14:28:21 232  /*
14:28:21 233  Throws exceptions:
14:28:21 234  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 235  */
14:28:21 236  	  in_subscription_id IN  NUMBER,
14:28:21 237  	  out_result_set      OUT SYS_REFCURSOR
14:28:21 238  );
14:28:21 239  
14:28:21 240  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:28:21 241  /*
14:28:21 242  Throws exceptions:
14:28:21 243  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 244  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 245  */
14:28:21 246  	in_invoice_id IN  NUMBER,
14:28:21 247  	out_amount    OUT NUMBER
14:28:21 248  );
14:28:21 249  
14:28:21 250  PROCEDURE GET_TRANSACTION_BY_ID (
14:28:21 251  /*
14:28:21 252  Throws exceptions:
14:28:21 253  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 254  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 255  */
14:28:21 256  	in_transaction_id IN NUMBER,
14:28:21 257  	out_result_set	  OUT SYS_REFCURSOR
14:28:21 258  );
14:28:21 259  
14:28:21 260  PROCEDURE UPDATE_CHARGE_STATUS (
14:28:21 261  /*
14:28:21 262  Throws exceptions:
14:28:21 263  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 264  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 265  */
14:28:21 266  	in_charge_id	    IN CHARGE.ID%TYPE,
14:28:21 267  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:28:21 268  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
14:28:21 269  );
14:28:21 270  
14:28:21 271  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:28:21 272  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:21 273  	out_result_set OUT SYS_REFCURSOR
14:28:21 274  );
14:28:21 275  
14:28:21 276  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:28:21 277  /*
14:28:21 278  Throws exceptions:
14:28:21 279  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 280  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
14:28:21 281  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 282  */
14:28:21 283  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:28:21 284  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:28:21 285  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:28:21 286  );
14:28:21 287  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
14:28:21 288  /*
14:28:21 289  Throws exceptions:
14:28:21 290  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 291  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 292  */
14:28:21 293  	in_invoice_id	IN  NUMBER,
14:28:21 294  	out_result_set OUT SYS_REFCURSOR
14:28:21 295  );
14:28:21 296  PROCEDURE GET_ACTIVE_INVOICES_IDS (
14:28:21 297  /*
14:28:21 298  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 299  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 300  */
14:28:21 301  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
14:28:21 302  	in_subscription_id IN NUMBER,
14:28:21 303  	out_result_set	   OUT SYS_REFCURSOR
14:28:21 304  );
14:28:21 305  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
14:28:21 306  /*
14:28:21 307  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 308  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 309  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:21 310  */
14:28:21 311  --  in_invoice_id        IN INVOICE.ID%TYPE,
14:28:21 312  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
14:28:21 313  -- norlov: in_refundable	      IN refund enabled
14:28:21 314  	in_invoice_id	     IN NUMBER,
14:28:21 315  	in_updated_by	     IN VARCHAR2,
14:28:21 316  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
14:28:21 317  --  in_cancellation_date IN DATE DEFAULT current_timestamp
14:28:21 318  );
14:28:21 319  
14:28:21 320  PROCEDURE FINALIZE_CANCELATION (
14:28:21 321  /*
14:28:21 322  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 323  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 324  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:21 325  */
14:28:21 326  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
14:28:21 327  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
14:28:21 328  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
14:28:21 329  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:28:21 330  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:28:21 331  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
14:28:21 332  	in_subscription_id    IN NUMBER,
14:28:21 333  	in_cancelation_reason IN VARCHAR2,
14:28:21 334  	in_cancelation_date   IN DATE,
14:28:21 335  	in_note 	      IN VARCHAR2,
14:28:21 336  	in_agent_id	      IN NUMBER,
14:28:21 337  	in_updated_by	      IN VARCHAR2
14:28:21 338  );
14:28:21 339  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
14:28:21 340  /*
14:28:21 341  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 342  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 343  */
14:28:21 344  	in_subscription_id IN NUMBER,
14:28:21 345  	out_result_set	   OUT SYS_REFCURSOR
14:28:21 346  );
14:28:21 347  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:28:21 348  /*
14:28:21 349  Throws exceptions (codes):
14:28:21 350  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 351  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 352  */
14:28:21 353  	in_offer_chain_id IN NUMBER,
14:28:21 354  	in_meta_data_name IN VARCHAR2,
14:28:21 355  	out_result_set	  OUT SYS_REFCURSOR
14:28:21 356  );
14:28:21 357  
14:28:21 358  PROCEDURE READ_ACCOUNT (
14:28:21 359  	in_account_id  IN ACCOUNT.ID%TYPE,
14:28:21 360  	out_result_set OUT SYS_REFCURSOR
14:28:21 361  );
14:28:21 362  
14:28:21 363  PROCEDURE GET_COLLECTED_CHARGES (
14:28:21 364  /*
14:28:21 365  Throws exceptions:
14:28:21 366  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 367  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 368  */
14:28:21 369  	in_invoice_id  IN NUMBER,
14:28:21 370  	out_result_set OUT SYS_REFCURSOR
14:28:21 371  );
14:28:21 372  
14:28:21 373  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
14:28:21 374  /*
14:28:21 375  Throws exceptions:
14:28:21 376  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:21 377  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 378  */
14:28:21 379  	in_invoice_id IN NUMBER,
14:28:21 380  	out_group_ids OUT SYS_REFCURSOR
14:28:21 381  );
14:28:21 382  
14:28:21 383  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:28:21 384  /*
14:28:21 385  Throws exceptions:
14:28:21 386  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:21 387  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 388  */
14:28:21 389  	in_group_id IN NUMBER,
14:28:21 390  	out_account_id	OUT NUMBER
14:28:21 391  );
14:28:21 392  
14:28:21 393  PROCEDURE LOCK_ACCOUNT (
14:28:21 394  	in_group_id    IN NUMBER,
14:28:21 395  	in_lock_key    IN VARCHAR2,
14:28:21 396  	in_seconds_num IN NUMBER,
14:28:21 397  	in_created_by  IN VARCHAR2,
14:28:21 398  	in_reason      IN VARCHAR2
14:28:21 399  );
14:28:21 400  
14:28:21 401  PROCEDURE RELEASE_LOCK (
14:28:21 402  	in_group_id IN NUMBER,
14:28:21 403  	in_lock_key IN VARCHAR2
14:28:21 404  );
14:28:21 405  
14:28:21 406  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
14:28:21 407  	in_invoice_id		    IN NUMBER,
14:28:21 408  	out_order_id		    OUT VARCHAR2,
14:28:21 409  	out_external_transaction_id OUT VARCHAR2
14:28:21 410  );
14:28:21 411  
14:28:21 412  PROCEDURE GET_PAYPAL_BY_ID (
14:28:21 413  	in_paypal_id   IN  NUMBER,
14:28:21 414  	out_result_set OUT SYS_REFCURSOR
14:28:21 415  );
14:28:21 416  
14:28:21 417  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
14:28:21 418  /*
14:28:21 419  Throws exceptions:
14:28:21 420  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 421  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 422  */
14:28:21 423  	in_charge_id   in  number,
14:28:21 424  	out_attempt_count out number
14:28:21 425  );
14:28:21 426  
14:28:21 427  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:28:21 428  	in_offer_chain_id	 IN NUMBER,
14:28:21 429  	in_action_name		 IN VARCHAR2,
14:28:21 430  	out_notification_type_id out number
14:28:21 431  );
14:28:21 432  
14:28:21 433  PROCEDURE SHOULD_MOVE_TO_GRACE(
14:28:21 434  	in_invoice_id  IN INVOICE.ID%TYPE,
14:28:21 435  	out_result     OUT NUMBER
14:28:21 436  );
14:28:21 437  
14:28:21 438  PROCEDURE MOVE_TO_GRACE(
14:28:21 439  	in_invoice_id		      IN INVOICE.ID%TYPE,
14:28:21 440  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
14:28:21 441  	in_grace_period_length_hours  IN NUMBER
14:28:21 442  );
14:28:21 443  
14:28:21 444  PROCEDURE MOVE_OUT_OF_GRACE(
14:28:21 445  	in_invoice_id	IN INVOICE.ID%TYPE,
14:28:21 446  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
14:28:21 447  );
14:28:21 448  
14:28:21 449  END PUBLIC_PROCS_BILLING_V23;
14:28:21 450  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.06
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for public_procs_client.sql
Compiling header for public_procs_client.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PUBLIC_PROCS_CLIENT
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_CLIENT_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
14:28:21   4  /*
14:28:21   5  Throws exceptions:
14:28:21   6  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21   7  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21   8  */
14:28:21   9  	in_notification_type_name IN VARCHAR2,
14:28:21  10  	out_notification_type_id  OUT NUMBER
14:28:21  11  );
14:28:21  12  
14:28:21  13  PROCEDURE ADD_NOTIFICATION (
14:28:21  14  /*
14:28:21  15  Throws exceptions:
14:28:21  16  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  17  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  18  */
14:28:21  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
14:28:21  20  	in_recipient_group_id	 IN NUMBER,
14:28:21  21  	in_notification_type_id  IN NUMBER,
14:28:21  22  	in_date_to_notify	 IN DATE,
14:28:21  23  	in_email_template_params IN CLOB
14:28:21  24  );
14:28:21  25  
14:28:21  26  END PUBLIC_PROCS_CLIENT_V23;
14:28:21  27  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.02
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for public_procs_notification.sql
Compiling header for public_procs_notification.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE LOCK_ACCOUNT (
14:28:21   4  	in_group_id    IN NUMBER,
14:28:21   5  	in_lock_key    IN VARCHAR2,
14:28:21   6  	in_seconds_num IN NUMBER,
14:28:21   7  	in_created_by  IN VARCHAR2,
14:28:21   8  	in_reason      IN VARCHAR2
14:28:21   9  );
14:28:21  10  
14:28:21  11  PROCEDURE RELEASE_LOCK (
14:28:21  12  	in_group_id IN NUMBER,
14:28:21  13  	in_lock_key IN VARCHAR2
14:28:21  14  );
14:28:21  15  
14:28:21  16  END PUBLIC_PROCS_NOTIFICATION_V23;
14:28:21  17  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.02
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling header for public_procs_renewal.sql
Compiling header for public_procs_renewal.sql
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
14:28:21 SQL> --------------------------------------------------------------------------------
14:28:21 SQL> 
14:28:21 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
14:28:21   4  	out_result_set OUT SYS_REFCURSOR
14:28:21   5  );
14:28:21   6  
14:28:21   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
14:28:21   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
14:28:21   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
14:28:21  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:21  11  );
14:28:21  12  
14:28:21  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:28:21  14  /*
14:28:21  15  Throws exceptions:
14:28:21  16  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  17  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  18  */
14:28:21  19  	  in_offer_chain_id IN	 NUMBER,
14:28:21  20  	  out_result_set    OUT  SYS_REFCURSOR
14:28:21  21  );
14:28:21  22  
14:28:21  23  PROCEDURE GET_UNREDEEMED_GCS (
14:28:21  24  	out_result_set		OUT SYS_REFCURSOR,
14:28:21  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:28:21  26  	in_num_rows		IN NUMBER DEFAULT 10000,
14:28:21  27  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:21  28  );
14:28:21  29  
14:28:21  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
14:28:21  31  /*
14:28:21  32  APP_EXCEPTION_CODES_V23.INVALID_PARAMETER
14:28:21  33  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  34  */
14:28:21  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
14:28:21  36  	out_result_set	     OUT SYS_REFCURSOR
14:28:21  37  );
14:28:21  38  
14:28:21  39  PROCEDURE GET_ALL_OCH_META_DATA (
14:28:21  40  	in_offer_chain_id IN NUMBER,
14:28:21  41  	out_result_set	  OUT SYS_REFCURSOR
14:28:21  42  );
14:28:21  43  
14:28:21  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:28:21  45  /*
14:28:21  46  Throws exceptions (codes):
14:28:21  47  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  48  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  49  */
14:28:21  50  	in_offer_chain_id IN NUMBER,
14:28:21  51  	in_meta_data_name IN VARCHAR2,
14:28:21  52  	out_result_set	  OUT SYS_REFCURSOR
14:28:21  53  );
14:28:21  54  
14:28:21  55  PROCEDURE GET_ENDING_LICENSES (
14:28:21  56  /*
14:28:21  57  Throws exceptions:
14:28:21  58  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  59  */
14:28:21  60  	in_hours_number IN NUMBER,
14:28:21  61  	out_result_set OUT SYS_REFCURSOR
14:28:21  62  );
14:28:21  63  
14:28:21  64  PROCEDURE GET_ENDING_LICENSES_CC (
14:28:21  65  /*
14:28:21  66  Throws exceptions:
14:28:21  67  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  68  */
14:28:21  69  	in_hours_number IN NUMBER,
14:28:21  70  	out_result_set OUT SYS_REFCURSOR,
14:28:21  71  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:21  72  );
14:28:21  73  
14:28:21  74  /************************************************/
14:28:21  75  
14:28:21  76  PROCEDURE GET_RECURRING_OFFER (
14:28:21  77  /*
14:28:21  78  Throws exceptions:
14:28:21  79  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  80  */
14:28:21  81  	in_license_id  IN NUMBER,
14:28:21  82  	out_result_set OUT SYS_REFCURSOR
14:28:21  83  );
14:28:21  84  
14:28:21  85  /*************************************************/
14:28:21  86  
14:28:21  87  PROCEDURE GET_NEXT_OFFER (
14:28:21  88  /*
14:28:21  89  Throws exceptions:
14:28:21  90  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21  91  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:21  92  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  93  */
14:28:21  94  	in_license_id  IN NUMBER,
14:28:21  95  	out_result_set OUT SYS_REFCURSOR
14:28:21  96  );
14:28:21  97  
14:28:21  98  /**************************************************/
14:28:21  99  
14:28:21 100  PROCEDURE UPDATE_LICENSE_STATUS(
14:28:21 101  /*
14:28:21 102  Throws exceptions:
14:28:21 103  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 104  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 105  */
14:28:21 106  	  in_license_id     IN NUMBER,
14:28:21 107  	  in_license_status IN NUMBER,
14:28:21 108  	  in_updated_by     IN VARCHAR2
14:28:21 109  );
14:28:21 110  
14:28:21 111  /***************************************************/
14:28:21 112  
14:28:21 113  PROCEDURE UPDATE_INVOICE_STATUS (
14:28:21 114  /*
14:28:21 115  Throws exceptions:
14:28:21 116  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 117  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 118  */
14:28:21 119  	in_invoice_id		       IN NUMBER,
14:28:21 120  	in_invoice_status_id	       IN NUMBER,
14:28:21 121  	in_updated_by		       IN VARCHAR2
14:28:21 122  );
14:28:21 123  
14:28:21 124  /***************************************************/
14:28:21 125  
14:28:21 126  PROCEDURE CREATE_LICENSE(
14:28:21 127  /*
14:28:21 128  Throws exceptions:
14:28:21 129  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 130  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 131  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:21 132  */
14:28:21 133  	in_status_id		    IN NUMBER,
14:28:21 134  	in_needs_entitlements	    IN NUMBER,
14:28:21 135  	in_start_date		    IN DATE,
14:28:21 136  	in_end_date		    IN DATE,
14:28:21 137  	in_offer_id		    IN NUMBER,
14:28:21 138  	in_subscription_id	    IN NUMBER,
14:28:21 139  	in_invoice_id		    IN NUMBER,
14:28:21 140  	in_created_by		    IN VARCHAR2,
14:28:21 141  	in_is_extension 	    IN NUMBER,
14:28:21 142  	in_current_offer_index	    IN NUMBER,
14:28:21 143  	in_current_offer_recurr_num IN NUMBER,
14:28:21 144  	out_license_id		    OUT NUMBER
14:28:21 145  );
14:28:21 146  
14:28:21 147  /**************************************************/
14:28:21 148  
14:28:21 149  PROCEDURE CREATE_INVOICE(
14:28:21 150  /*
14:28:21 151  Throws exceptions:
14:28:21 152  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 153  */
14:28:21 154  	  in_invoice_status IN NUMBER,
14:28:21 155  	  in_created_by     IN VARCHAR2,
14:28:21 156  	  in_tax_exempt_id  IN VARCHAR2,
14:28:21 157  	  out_invoice_id    OUT NUMBER
14:28:21 158  );
14:28:21 159  
14:28:21 160  /*****************************************************/
14:28:21 161  
14:28:21 162  PROCEDURE CREATE_CHARGE(
14:28:21 163  /*
14:28:21 164  Throws exceptions:
14:28:21 165  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 166  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 167  */
14:28:21 168  	in_invoice_id	      IN NUMBER,
14:28:21 169  	in_transaction_id     IN NUMBER,
14:28:21 170  	in_instrument_type_id IN NUMBER,
14:28:21 171  	in_instrument_id      IN NUMBER,
14:28:21 172  	in_charge_amount      IN NUMBER,
14:28:21 173  	in_created_by	      IN VARCHAR2,
14:28:21 174  	in_charge_status_id   IN NUMBER,
14:28:21 175  	out_charge_id	      OUT NUMBER
14:28:21 176  );
14:28:21 177  
14:28:21 178  /*****************************************************/
14:28:21 179  
14:28:21 180  PROCEDURE HAS_FUTURE_LICENSE (
14:28:21 181  /*
14:28:21 182  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 183  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 184  --
14:28:21 185  RETURNS:
14:28:21 186  1 - if has,
14:28:21 187  0 - else
14:28:21 188  */
14:28:21 189  	in_license_id IN NUMBER,
14:28:21 190  	out_result	   OUT NUMBER
14:28:21 191  );
14:28:21 192  
14:28:21 193  /*****************************************************/
14:28:21 194  
14:28:21 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
14:28:21 196  /*
14:28:21 197  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 198  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 199  */
14:28:21 200  	in_license_id IN NUMBER,
14:28:21 201  	out_group_id  OUT NUMBER
14:28:21 202  );
14:28:21 203  
14:28:21 204  /*****************************************************/
14:28:21 205  
14:28:21 206  PROCEDURE GET_OFFER_PRODUCTS (
14:28:21 207  /*
14:28:21 208  Throws exceptions (codes):
14:28:21 209  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 210  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 211  */
14:28:21 212  	in_offer_id    IN NUMBER,
14:28:21 213  	out_result_set OUT SYS_REFCURSOR
14:28:21 214  );
14:28:21 215  
14:28:21 216  /*******************************************************/
14:28:21 217  
14:28:21 218  PROCEDURE CREATE_TRANSACTION (
14:28:21 219  /*
14:28:21 220  Throws exceptions:
14:28:21 221  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 222  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 223  */
14:28:21 224  	in_transaction_id	  IN NUMBER,
14:28:21 225  	in_status_id		  IN NUMBER,
14:28:21 226  	in_amount		  IN NUMBER,
14:28:21 227  	in_created_by		  IN VARCHAR2,
14:28:21 228  	in_order_id		  IN VARCHAR2,
14:28:21 229  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
14:28:21 230  	out_transaction_id	  OUT NUMBER
14:28:21 231  );
14:28:21 232  
14:28:21 233  /*********************************************************/
14:28:21 234  
14:28:21 235  PROCEDURE ADD_LINE_ITEMS(
14:28:21 236  /*
14:28:21 237  Throws exceptions:
14:28:21 238  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 239  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 240  */
14:28:21 241  	in_invoice_id IN NUMBER,
14:28:21 242  	in_offer_id   IN NUMBER,
14:28:21 243  	in_created_by IN VARCHAR2
14:28:21 244  );
14:28:21 245  
14:28:21 246  /**********************************************************/
14:28:21 247  
14:28:21 248  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:28:21 249  /*
14:28:21 250  Throws exceptions:
14:28:21 251  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 252  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 253  */
14:28:21 254  	in_invoice_id IN  NUMBER,
14:28:21 255  	out_amount    OUT NUMBER
14:28:21 256  );
14:28:21 257  
14:28:21 258  /*********************************************************/
14:28:21 259  
14:28:21 260  PROCEDURE RESERVE_TRANSACTION_ID (
14:28:21 261  /*
14:28:21 262  Throws exceptions:
14:28:21 263  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 264  */
14:28:21 265  	out_transaction_id OUT NUMBER
14:28:21 266  );
14:28:21 267  
14:28:21 268  /**********************************************************/
14:28:21 269  
14:28:21 270  PROCEDURE P_GET_NEXT_OFFER_INDEX (
14:28:21 271  	in_offer_chain_id	     IN NUMBER,
14:28:21 272  	in_offer_chain_current_index IN NUMBER,
14:28:21 273  	out_next_offer_index	     OUT NUMBER
14:28:21 274  );
14:28:21 275  
14:28:21 276  /***********************************************************/
14:28:21 277  
14:28:21 278  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
14:28:21 279  	in_license_id		     IN NUMBER,
14:28:21 280  	in_offer_chain_current_index IN NUMBER,
14:28:21 281  	out_next_offer_index	     OUT NUMBER
14:28:21 282  );
14:28:21 283  
14:28:21 284  /**********************************************************/
14:28:21 285  
14:28:21 286  PROCEDURE GET_SUBSCRIPTION_INFO (
14:28:21 287  /*
14:28:21 288  Throws exceptions:
14:28:21 289  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 290  */
14:28:21 291  	  in_subscription_id IN  NUMBER,
14:28:21 292  	  out_result_set      OUT SYS_REFCURSOR
14:28:21 293  );
14:28:21 294  
14:28:21 295  /***********************************************************/
14:28:21 296  
14:28:21 297  PROCEDURE CLOSE_SUBSCRIPTION (
14:28:21 298  	in_subscription_id IN NUMBER,
14:28:21 299  	in_updated_by	   IN VARCHAR2
14:28:21 300  );
14:28:21 301  
14:28:21 302  /***********************************************************/
14:28:21 303  
14:28:21 304  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
14:28:21 305  	out_result_set OUT SYS_REFCURSOR
14:28:21 306  );
14:28:21 307  
14:28:21 308  /***********************************************************/
14:28:21 309  
14:28:21 310  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
14:28:21 311  	in_license_id	      IN NUMBER,
14:28:21 312  	in_needs_entitlements IN NUMBER,
14:28:21 313  	in_updated_by	      IN VARCHAR2
14:28:21 314  );
14:28:21 315  /***********************************************************/
14:28:21 316  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
14:28:21 317  	in_offer_id    IN NUMBER,
14:28:21 318  	out_result_set OUT SYS_REFCURSOR
14:28:21 319  );
14:28:21 320  
14:28:21 321  PROCEDURE LOCK_ACCOUNT (
14:28:21 322  	in_group_id    IN NUMBER,
14:28:21 323  	in_lock_key    IN VARCHAR2,
14:28:21 324  	in_seconds_num IN NUMBER,
14:28:21 325  	in_created_by  IN VARCHAR2,
14:28:21 326  	in_reason      IN VARCHAR2
14:28:21 327  );
14:28:21 328  
14:28:21 329  PROCEDURE RELEASE_LOCK (
14:28:21 330  	in_group_id IN NUMBER,
14:28:21 331  	in_lock_key IN VARCHAR2
14:28:21 332  );
14:28:21 333  
14:28:21 334  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:28:21 335  	in_invoice_id  IN NUMBER,
14:28:21 336  	out_result_set OUT SYS_REFCURSOR
14:28:21 337  );
14:28:21 338  
14:28:21 339  PROCEDURE ADD_TAX (
14:28:21 340  	in_tax_type_id		 IN NUMBER,
14:28:21 341  	in_calculated_amount	 IN NUMBER,
14:28:21 342  	in_created_by		 IN VARCHAR2,
14:28:21 343  	in_line_item_id 	 IN NUMBER,
14:28:21 344  	in_effective_rate	 IN VARCHAR2,
14:28:21 345  	in_taxable_amount	 IN NUMBER,
14:28:21 346  	in_tax_rule_id		 IN NUMBER,
14:28:21 347  	in_jurisdiction_level_id IN NUMBER,
14:28:21 348  	in_jurisdiction_name	 IN VARCHAR2,
14:28:21 349  	in_jurisdiction_id	 IN VARCHAR2,
14:28:21 350  	in_ext_tax_type 	 IN VARCHAR2,
14:28:21 351  	in_ext_result		 IN VARCHAR2,
14:28:21 352  	in_imposition_type	 IN VARCHAR2,
14:28:21 353  	in_imposition		 IN VARCHAR2
14:28:21 354  );
14:28:21 355  
14:28:21 356  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:28:21 357  	in_credit_card_id IN  NUMBER,
14:28:21 358  	out_result_set	  OUT SYS_REFCURSOR
14:28:21 359  );
14:28:21 360  
14:28:21 361  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
14:28:21 362  	in_line_item_id IN NUMBER,
14:28:21 363  	out_result_set	OUT SYS_REFCURSOR
14:28:21 364  );
14:28:21 365  
14:28:21 366  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:28:21 367  /*
14:28:21 368  Throws exceptions:
14:28:21 369  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:21 370  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 371  */
14:28:21 372  	in_group_id IN NUMBER,
14:28:21 373  	out_account_id	OUT NUMBER
14:28:21 374  );
14:28:21 375  
14:28:21 376  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
14:28:21 377  /*
14:28:21 378  Throws exceptions:
14:28:21 379  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 380  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 381  */
14:28:21 382  	in_line_item_id IN  NUMBER,
14:28:21 383  	out_result_set	OUT SYS_REFCURSOR
14:28:21 384  );
14:28:21 385  
14:28:21 386  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
14:28:21 387  	in_line_item_id    IN NUMBER,
14:28:21 388  	in_amount	   IN NUMBER,
14:28:21 389  	in_discount_amount IN NUMBER,
14:28:21 390  	in_taxes_amount    IN NUMBER
14:28:21 391  );
14:28:21 392  
14:28:21 393  PROCEDURE GET_PAYPAL_BY_ID (
14:28:21 394  	in_paypal_id   IN  NUMBER,
14:28:21 395  	out_result_set OUT SYS_REFCURSOR
14:28:21 396  );
14:28:21 397  
14:28:21 398  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:28:21 399  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:21 400  	out_result_set OUT SYS_REFCURSOR
14:28:21 401  );
14:28:21 402  
14:28:21 403  PROCEDURE GET_LICENSE_BY_ID (
14:28:21 404  	in_license_id  IN NUMBER,
14:28:21 405  	out_result_set OUT SYS_REFCURSOR
14:28:21 406  );
14:28:21 407  
14:28:21 408  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:28:21 409  	in_offer_chain_id	 IN NUMBER,
14:28:21 410  	in_action_name		 IN VARCHAR2,
14:28:21 411  	out_notification_type_id OUT NUMBER
14:28:21 412  );
14:28:21 413  
14:28:21 414  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
14:28:21 415  	in_offer_chain_id IN NUMBER,
14:28:21 416  	in_meta_data_name IN VARCHAR2,
14:28:21 417  	out_value	  OUT VARCHAR2
14:28:21 418  );
14:28:21 419  
14:28:21 420  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
14:28:21 421  	out_result_set	    OUT SYS_REFCURSOR
14:28:21 422  );
14:28:21 423  
14:28:21 424  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
14:28:21 425  	out_result_set	    OUT SYS_REFCURSOR
14:28:21 426  );
14:28:21 427  
14:28:21 428  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
14:28:21 429  	out_result_set	    OUT SYS_REFCURSOR
14:28:21 430  );
14:28:21 431  
14:28:21 432  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
14:28:21 433  	in_max_days_until_close IN NUMBER,
14:28:21 434  	in_num_subs_to_fetch	IN NUMBER,
14:28:21 435  	out_result_set		OUT SYS_REFCURSOR
14:28:21 436  );
14:28:21 437  
14:28:21 438  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
14:28:21 439  	in_days_before_close	 IN NUMBER,
14:28:21 440  	in_num_licenses_to_fetch IN NUMBER,
14:28:21 441  	out_result_set		 OUT SYS_REFCURSOR
14:28:21 442  );
14:28:21 443  
14:28:21 444  PROCEDURE GET_EXPIRING_PAYPAL (
14:28:21 445  	in_expire_window_days	IN NUMBER,
14:28:21 446  	in_creation_limit_days	IN NUMBER,
14:28:21 447  	in_retry_throttle_name	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
14:28:21 448  	out_result_set		OUT SYS_REFCURSOR
14:28:21 449  );
14:28:21 450  
14:28:21 451  END PUBLIC_PROCS_RENEWAL_V23;
14:28:21 452  .
14:28:21 SQL> /

Package created.

Elapsed: 00:00:00.05
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_account_cru.sql
Compiling body for procs_account_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_ACCOUNT (
14:28:21   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
14:28:21   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
14:28:21   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
14:28:21   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
14:28:21   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
14:28:21   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
14:28:21  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:28:21  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
14:28:21  12  ) AS
14:28:21  13  -- VARIABLES
14:28:21  14  var_new_account_id ACCOUNT.ID%TYPE;
14:28:21  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21  16  var_date DATE := SYSDATE;
14:28:21  17  BEGIN
14:28:21  18  	SELECT
14:28:21  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
14:28:21  20  	FROM DUAL;
14:28:21  21  	INSERT INTO ACCOUNT (
14:28:21  22  	  ID,
14:28:21  23  	  ACCOUNT_STATUS_ID,
14:28:21  24  	  SUSPEND_DATE,
14:28:21  25  	  GROUP_ID,
14:28:21  26  	  CREATE_DATE,
14:28:21  27  	  CREATED_BY,
14:28:21  28  	  UPDATE_DATE,
14:28:21  29  	  UPDATED_BY,
14:28:21  30  	  SYSTEM_CATEGORY_ID,
14:28:21  31  	  INSTRUMENT_TYPE_ID,
14:28:21  32  	  INSTRUMENT_ID,
14:28:21  33  	  TAX_EXEMPT_ID
14:28:21  34  	) VALUES (
14:28:21  35  	  var_new_account_id,
14:28:21  36  	  in_account_status_id,
14:28:21  37  	  in_suspend_date,
14:28:21  38  	  in_group_id,
14:28:21  39  	  var_date,
14:28:21  40  	  in_created_by,
14:28:21  41  	  var_date,
14:28:21  42  	  in_created_by,
14:28:21  43  	  in_system_category_id,
14:28:21  44  	  in_instrument_type_id,
14:28:21  45  	  in_instrument_id,
14:28:21  46  	  NULL
14:28:21  47  	);
14:28:21  48  
14:28:21  49  	out_account_id := var_new_account_id;
14:28:21  50  END CREATE_ACCOUNT;
14:28:21  51  
14:28:21  52  /*************************************************************/
14:28:21  53  
14:28:21  54  PROCEDURE UPDATE_ACCOUNT (
14:28:21  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
14:28:21  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
14:28:21  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
14:28:21  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
14:28:21  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
14:28:21  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:28:21  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
14:28:21  62  ) AS
14:28:21  63  BEGIN
14:28:21  64  
14:28:21  65  	-- CREATE HISTORY
14:28:21  66  	PROCS_HISTORY_V23.CREATE_ACCOUNT_HISTORY(
14:28:21  67  	  in_account_id 	       => in_account_id,
14:28:21  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21  69  	);
14:28:21  70  
14:28:21  71  	UPDATE ACCOUNT SET
14:28:21  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
14:28:21  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
14:28:21  74  	  UPDATED_BY	     = in_updated_by,
14:28:21  75  	  UPDATE_DATE	     = SYSDATE,
14:28:21  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
14:28:21  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
14:28:21  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
14:28:21  79  	WHERE
14:28:21  80  	  ACCOUNT.ID = in_account_id;
14:28:21  81  
14:28:21  82  END UPDATE_ACCOUNT;
14:28:21  83  
14:28:21  84  /*************************************************************/
14:28:21  85  
14:28:21  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
14:28:21  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
14:28:21  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
14:28:21  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
14:28:21  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
14:28:21  91  ) AS
14:28:21  92  BEGIN
14:28:21  93  
14:28:21  94  	-- CREATE HISTORY
14:28:21  95  	PROCS_HISTORY_V23.CREATE_ACCOUNT_HISTORY(
14:28:21  96  	  in_account_id 	       => in_account_id,
14:28:21  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21  98  	);
14:28:21  99  
14:28:21 100  	UPDATE ACCOUNT SET
14:28:21 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
14:28:21 102  	  INSTRUMENT_ID      = in_instrument_id
14:28:21 103  	WHERE
14:28:21 104  	  ACCOUNT.ID = in_account_id;
14:28:21 105  
14:28:21 106  END;
14:28:21 107  
14:28:21 108  /*************************************************************/
14:28:21 109  
14:28:21 110  PROCEDURE READ_ACCOUNT (
14:28:21 111  	in_account_id  IN ACCOUNT.ID%TYPE,
14:28:21 112  	out_result_set OUT SYS_REFCURSOR
14:28:21 113  ) AS
14:28:21 114  BEGIN
14:28:21 115  	OPEN out_result_set FOR
14:28:21 116  	SELECT
14:28:21 117  	  ACCOUNT_STATUS_ID,
14:28:21 118  	  SUSPEND_DATE,
14:28:21 119  	  GROUP_ID
14:28:21 120  	FROM
14:28:21 121  	  ACCOUNT
14:28:21 122  	WHERE
14:28:21 123  	  ID = in_account_id;
14:28:21 124  END READ_ACCOUNT;
14:28:21 125  
14:28:21 126  /*************************************************************/
14:28:21 127  
14:28:21 128  PROCEDURE CREATE_ACCOUNT_NOTE (
14:28:21 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
14:28:21 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
14:28:21 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
14:28:21 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
14:28:21 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
14:28:21 134  ) AS
14:28:21 135  BEGIN
14:28:21 136  	IF inout_account_note_id IS NULL THEN
14:28:21 137  	  SELECT
14:28:21 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
14:28:21 139  	  FROM DUAL;
14:28:21 140  	END IF;
14:28:21 141  	INSERT INTO ACCOUNT_NOTE(
14:28:21 142  	  ID,
14:28:21 143  	  AGENT_ID,
14:28:21 144  	  ACCOUNT_ID,
14:28:21 145  	  NOTE,
14:28:21 146  	  CREATE_DATE,
14:28:21 147  	  CREATED_BY
14:28:21 148  	) VALUES (
14:28:21 149  	  inout_account_note_id,
14:28:21 150  	  in_agent_id,
14:28:21 151  	  in_account_id,
14:28:21 152  	  in_note,
14:28:21 153  	  SYSDATE,
14:28:21 154  	  in_created_by
14:28:21 155  	);
14:28:21 156  END CREATE_ACCOUNT_NOTE;
14:28:21 157  
14:28:21 158  END PROCS_ACCOUNT_CRU_V23;
14:28:21 159  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.05
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_address_cru.sql
Compiling body for procs_address_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_ADDRESS(
14:28:21   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
14:28:21   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:28:21   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:28:21   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:28:21   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:28:21  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:21  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:28:21  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
14:28:21  13  ) AS
14:28:21  14  -- VARIABLES
14:28:21  15  var_address_id ADDRESS.ID%TYPE;
14:28:21  16  var_date DATE := SYSDATE;
14:28:21  17  BEGIN
14:28:21  18  	IF in_address_id IS NULL THEN
14:28:21  19  	  SELECT
14:28:21  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
14:28:21  21  	  FROM DUAL;
14:28:21  22  	ELSE
14:28:21  23  	  var_address_id := in_address_id;
14:28:21  24  	END IF;
14:28:21  25  	INSERT INTO
14:28:21  26  	  ADDRESS (
14:28:21  27  	    ID,
14:28:21  28  	    ADDRESS1,
14:28:21  29  	    ADDRESS2,
14:28:21  30  	    CITY,
14:28:21  31  	    STATE,
14:28:21  32  	    POSTAL_CODE,
14:28:21  33  	    COUNTRY,
14:28:21  34  	    CREATE_DATE,
14:28:21  35  	    CREATED_BY,
14:28:21  36  	    UPDATE_DATE,
14:28:21  37  	    UPDATED_BY
14:28:21  38  	  ) VALUES (
14:28:21  39  	    var_address_id,
14:28:21  40  	    in_address1,
14:28:21  41  	    in_address2,
14:28:21  42  	    in_city,
14:28:21  43  	    in_state,
14:28:21  44  	    in_postal_code,
14:28:21  45  	    in_country,
14:28:21  46  	    var_date,
14:28:21  47  	    in_created_by,
14:28:21  48  	    var_date,
14:28:21  49  	    in_created_by
14:28:21  50  	  );
14:28:21  51  
14:28:21  52  	out_address_id := var_address_id;
14:28:21  53  END CREATE_ADDRESS;
14:28:21  54  
14:28:21  55  PROCEDURE UPDATE_ADDRESS(
14:28:21  56  	in_address_id	      IN ADDRESS.ID%TYPE,
14:28:21  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:28:21  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:28:21  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:28:21  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:28:21  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:21  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:28:21  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
14:28:21  64  ) AS
14:28:21  65  BEGIN
14:28:21  66  
14:28:21  67  	-- Create history
14:28:21  68  	PROCS_HISTORY_V23.CREATE_ADDRESS_HISTORY(
14:28:21  69  	  in_address_id 		=> in_address_id,
14:28:21  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21  71  	);
14:28:21  72  
14:28:21  73  	UPDATE
14:28:21  74  	  ADDRESS
14:28:21  75  	SET
14:28:21  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
14:28:21  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
14:28:21  78  	  CITY = NVL(in_city, CITY),
14:28:21  79  	  STATE = NVL(in_state, STATE),
14:28:21  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
14:28:21  81  	  COUNTRY = NVL(in_country, COUNTRY),
14:28:21  82  	  UPDATE_DATE = SYSDATE,
14:28:21  83  	  UPDATED_BY = in_updated_by
14:28:21  84  	WHERE
14:28:21  85  	  ID = in_address_id;
14:28:21  86  
14:28:21  87  END UPDATE_ADDRESS;
14:28:21  88  
14:28:21  89  END PROCS_ADDRESS_CRU_V23;
14:28:21  90  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_amazon_cru.sql
Compiling body for procs_amazon_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE UPDATE_AMAZON_APPSTORE_RECEIPT(
14:28:21   4  	in_id		   IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:21   5  	in_updated_by	   IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE,
14:28:21   6  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE DEFAULT NULL,
14:28:21   7  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE DEFAULT NULL,
14:28:21   8  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE DEFAULT NULL,
14:28:21   9  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE DEFAULT NULL,
14:28:21  10  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
14:28:21  11  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE DEFAULT NULL,
14:28:21  12  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE DEFAULT NULL,
14:28:21  13  	in_last_check_date IN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE DEFAULT NULL
14:28:21  14  ) AS
14:28:21  15  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AMAZON_APPSTORE_RECEIPT';
14:28:21  16  BEGIN
14:28:21  17  	CORE_OWNER.PROCS_HISTORY_V23.CREATE_AASR_HISTORY(
14:28:21  18  	    in_id => in_id,
14:28:21  19  	    in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE,
14:28:21  20  	    in_created_by => in_updated_by
14:28:21  21  	);
14:28:21  22  
14:28:21  23  	UPDATE AMAZON_APPSTORE_RECEIPT SET
14:28:21  24  	  SUBSCRIPTION_ID = NVL(in_subscription_id,SUBSCRIPTION_ID),
14:28:21  25  	  USER_ID	  = NVL(in_user_id,USER_ID),
14:28:21  26  	  ITEM_TYPE	  = NVL(in_item_type,ITEM_TYPE),
14:28:21  27  	  START_DATE	  = NVL(in_start_date,START_DATE),
14:28:21  28  	  END_DATE	  = NVL(in_end_date,END_DATE),
14:28:21  29  	  SKU		  = NVL(in_sku,SKU),
14:28:21  30  	  PURCHASE_TOKEN  = NVL(in_purchase_token,PURCHASE_TOKEN),
14:28:21  31  	  LAST_CHECK_DATE = NVL(in_last_check_date,LAST_CHECK_DATE),
14:28:21  32  	  UPDATE_DATE	  = SYSDATE,
14:28:21  33  	  UPDATED_BY	  = in_updated_by
14:28:21  34  	WHERE
14:28:21  35  	  ID = in_id;
14:28:21  36  END UPDATE_AMAZON_APPSTORE_RECEIPT;
14:28:21  37  
14:28:21  38  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
14:28:21  39  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:21  40  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
14:28:21  41  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
14:28:21  42  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
14:28:21  43  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
14:28:21  44  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
14:28:21  45  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
14:28:21  46  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
14:28:21  47  ) AS
14:28:21  48  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE_RECEIPT';
14:28:21  49  var_now	 DATE := SYSDATE;
14:28:21  50  BEGIN
14:28:21  51  	INSERT INTO CORE_OWNER.AMAZON_APPSTORE_RECEIPT (
14:28:21  52  	  ID,
14:28:21  53  	  SUBSCRIPTION_ID,
14:28:21  54  	  USER_ID,
14:28:21  55  	  ITEM_TYPE,
14:28:21  56  	  START_DATE,
14:28:21  57  	  END_DATE,
14:28:21  58  	  SKU,
14:28:21  59  	  PURCHASE_TOKEN,
14:28:21  60  	  CREATE_DATE,
14:28:21  61  	  CREATED_BY,
14:28:21  62  	  UPDATE_DATE,
14:28:21  63  	  UPDATED_BY
14:28:21  64  	) VALUES (
14:28:21  65  	  CORE_OWNER.AAS_RECEIPT_ID_SEQ.nextval,
14:28:21  66  	  in_subscription_id,
14:28:21  67  	  in_user_id,
14:28:21  68  	  in_item_type,
14:28:21  69  	  in_start_date,
14:28:21  70  	  in_end_date,
14:28:21  71  	  in_sku,
14:28:21  72  	  in_purchase_token,
14:28:21  73  	  var_now,
14:28:21  74  	  in_created_by,
14:28:21  75  	  var_now,
14:28:21  76  	  in_created_by
14:28:21  77  	);
14:28:21  78  END ADD_AMAZON_APPSTORE_RECEIPT;
14:28:21  79  
14:28:21  80  	PROCEDURE CREATE_AMAZON_SUB(
14:28:21  81  /*
14:28:21  82  Throws exceptions:
14:28:21  83  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  84  */
14:28:21  85  	  out_id	      OUT NUMBER,
14:28:21  86  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
14:28:21  87  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
14:28:21  88  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
14:28:21  89  ) AS
14:28:21  90  -- VARIABLES
14:28:21  91  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
14:28:21  92  var_current_date	DATE;
14:28:21  93  var_count 	NUMBER;
14:28:21  94  AMAZON_SUB_USED	EXCEPTION;
14:28:21  95  BEGIN
14:28:21  96  
14:28:21  97  	SELECT COUNT(1) INTO var_count
14:28:21  98  	FROM SUBSCRIPTION s, AMAZON_SUB am
14:28:21  99  	WHERE
14:28:21 100  	  am.AMAZON_ID = in_amazon_id
14:28:21 101  	  and am.subscription_id = s.id
14:28:21 102  	  and s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
14:28:21 103  
14:28:21 104  	if var_count > 0 then
14:28:21 105  	  raise AMAZON_SUB_USED;
14:28:21 106  	end if;
14:28:21 107  
14:28:21 108  	SELECT
14:28:21 109  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
14:28:21 110  	INTO
14:28:21 111  	  out_id
14:28:21 112  	FROM
14:28:21 113  	  dual
14:28:21 114  	;
14:28:21 115  
14:28:21 116  	SELECT
14:28:21 117  	  sysdate
14:28:21 118  	INTO
14:28:21 119  	  var_current_date
14:28:21 120  	FROM
14:28:21 121  	  dual
14:28:21 122  	;
14:28:21 123  
14:28:21 124  	INSERT INTO CORE_OWNER.AMAZON_SUB
14:28:21 125  	(
14:28:21 126  	  id,
14:28:21 127  	  subscription_id,
14:28:21 128  	  amazon_id,
14:28:21 129  	  create_date,
14:28:21 130  	  created_by,
14:28:21 131  	  update_date,
14:28:21 132  	  updated_by
14:28:21 133  	)
14:28:21 134  	VALUES
14:28:21 135  	(
14:28:21 136  	  out_id,
14:28:21 137  	  in_subscription_id,
14:28:21 138  	  in_amazon_id,
14:28:21 139  	  var_current_date,
14:28:21 140  	  in_created_by,
14:28:21 141  	  var_current_date,
14:28:21 142  	  in_created_by
14:28:21 143  	);
14:28:21 144  
14:28:21 145  EXCEPTION
14:28:21 146  WHEN AMAZON_SUB_USED THEN
14:28:21 147  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:21 148  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
14:28:21 149  WHEN DUP_VAL_ON_INDEX THEN
14:28:21 150  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:21 151  	  SPROC_NAME, 'Duplicate value', SQLERRM);
14:28:21 152  WHEN OTHERS THEN
14:28:21 153  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 155  END CREATE_AMAZON_SUB;
14:28:21 156  
14:28:21 157  END PROCS_AMAZON_CRU_V23;
14:28:21 158  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.04
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_charge_cru.sql
Compiling body for procs_charge_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_CHARGE(
14:28:21   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
14:28:21   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
14:28:21   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
14:28:21   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
14:28:21   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
14:28:21  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
14:28:21  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:28:21  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
14:28:21  13  ) AS
14:28:21  14  -- VARIABLES
14:28:21  15  var_charge_id CHARGE.ID%TYPE;
14:28:21  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21  17  var_date DATE := SYSDATE;
14:28:21  18  BEGIN
14:28:21  19  	IF in_charge_id IS NULL THEN
14:28:21  20  	  SELECT
14:28:21  21  	    CRG_ID_SEQ.nextVal into var_charge_id
14:28:21  22  	  FROM DUAL;
14:28:21  23  	ELSE
14:28:21  24  	  var_charge_id := in_charge_id;
14:28:21  25  	END IF;
14:28:21  26  	INSERT INTO
14:28:21  27  	  CHARGE (
14:28:21  28  	    ID,
14:28:21  29  	    INVOICE_ID,
14:28:21  30  	    TRANSACTION_ID,
14:28:21  31  	    INSTRUMENT_TYPE_ID,
14:28:21  32  	    INSTRUMENT_ID,
14:28:21  33  	    CHARGE_AMOUNT,
14:28:21  34  	    CHARGE_STATUS_ID,
14:28:21  35  	    CREATE_DATE,
14:28:21  36  	    CREATED_BY,
14:28:21  37  	    UPDATE_DATE,
14:28:21  38  	    UPDATED_BY
14:28:21  39  	  ) VALUES (
14:28:21  40  	    var_charge_id,
14:28:21  41  	    in_invoice_id,
14:28:21  42  	    in_transaction_id,
14:28:21  43  	    in_instrument_type_id,
14:28:21  44  	    in_instrument_id,
14:28:21  45  	    in_charge_amount,
14:28:21  46  	    in_charge_status_id,
14:28:21  47  	    var_date,
14:28:21  48  	    in_created_by,
14:28:21  49  	    var_date,
14:28:21  50  	    in_created_by
14:28:21  51  	  );
14:28:21  52  
14:28:21  53  	out_charge_id := var_charge_id;
14:28:21  54  END CREATE_CHARGE;
14:28:21  55  
14:28:21  56  PROCEDURE UPDATE_CHARGE(
14:28:21  57  	in_charge_id	      IN CHARGE.ID%TYPE,
14:28:21  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:28:21  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
14:28:21  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
14:28:21  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
14:28:21  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
14:28:21  63  ) AS
14:28:21  64  BEGIN
14:28:21  65  
14:28:21  66  	-- Create history
14:28:21  67  	PROCS_HISTORY_V23.CREATE_CHARGE_HISTORY(
14:28:21  68  	  in_charge_id		       => in_charge_id,
14:28:21  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21  70  	);
14:28:21  71  
14:28:21  72  	UPDATE
14:28:21  73  	  CHARGE
14:28:21  74  	SET
14:28:21  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
14:28:21  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
14:28:21  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
14:28:21  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
14:28:21  79  	  UPDATE_DATE	     = SYSDATE,
14:28:21  80  	  UPDATED_BY	     = in_updated_by
14:28:21  81  	WHERE
14:28:21  82  	  ID = in_charge_id;
14:28:21  83  
14:28:21  84  END UPDATE_CHARGE;
14:28:21  85  
14:28:21  86  END PROCS_CHARGE_CRU_V23;
14:28:21  87  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_fin_instruments_cru.sql
Compiling body for procs_fin_instruments_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_CREDIT_CARD(
14:28:21   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
14:28:21   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
14:28:21   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
14:28:21   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
14:28:21   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
14:28:21  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
14:28:21  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
14:28:21  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
14:28:21  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
14:28:21  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
14:28:21  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:28:21  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
14:28:21  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
14:28:21  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
14:28:21  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
14:28:21  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
14:28:21  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
14:28:21  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
14:28:21  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
14:28:21  24  ) AS
14:28:21  25  -- VARIABLES
14:28:21  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
14:28:21  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21  28  var_date DATE := SYSDATE;
14:28:21  29  BEGIN
14:28:21  30  	IF in_credit_card_id IS NULL THEN
14:28:21  31  	  SELECT
14:28:21  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
14:28:21  33  	  FROM DUAL;
14:28:21  34  	ELSE
14:28:21  35  	  var_credit_card_id := in_credit_card_id;
14:28:21  36  	END IF;
14:28:21  37  	INSERT INTO CREDIT_CARD(
14:28:21  38  	    ID,
14:28:21  39  	    ACCOUNT_ID,
14:28:21  40  	    INSTRUMENT_NAME,
14:28:21  41  	    PRIVATE_CARD_HOLDER_NAME,
14:28:21  42  	    PRIVATE_STREET_ADDRESS,
14:28:21  43  	    PRIVATE_STREET_ADDRESS2,
14:28:21  44  	    STATE,
14:28:21  45  	    CITY,
14:28:21  46  	    POSTAL_CODE,
14:28:21  47  	    COUNTRY,
14:28:21  48  	    LAST_FOUR_CC,
14:28:21  49  	    EXPIRATION_DATE,
14:28:21  50  	    CREDIT_CARD_TYPE_ID,
14:28:21  51  	    SECRET_TOKEN,
14:28:21  52  	    CHASE_PROFILE_ID,
14:28:21  53  	    CREATE_DATE,
14:28:21  54  	    CREATED_BY,
14:28:21  55  	    UPDATE_DATE,
14:28:21  56  	    UPDATED_BY,
14:28:21  57  	    CREDIT_CARD_STATUS_ID,
14:28:21  58  	    PRIVATE_FIRST_NAME,
14:28:21  59  	    PRIVATE_LAST_NAME
14:28:21  60  	  ) VALUES (
14:28:21  61  	    var_credit_card_id,
14:28:21  62  	    in_account_id,
14:28:21  63  	    in_instrument_name,
14:28:21  64  	    in_private_card_holder_name,
14:28:21  65  	    in_private_street_address,
14:28:21  66  	    in_private_street_address2,
14:28:21  67  	    in_state,
14:28:21  68  	    in_city,
14:28:21  69  	    in_postal_code,
14:28:21  70  	    in_country,
14:28:21  71  	    in_last_four_cc,
14:28:21  72  	    in_expiration_date,
14:28:21  73  	    in_credit_card_type_id,
14:28:21  74  	    in_secret_token,
14:28:21  75  	    in_chase_profile_id,
14:28:21  76  	    var_date,
14:28:21  77  	    in_created_by,
14:28:21  78  	    var_date,
14:28:21  79  	    in_created_by,
14:28:21  80  	    in_credit_card_status_id,
14:28:21  81  	    in_private_first_name,
14:28:21  82  	    in_private_last_name
14:28:21  83  	  );
14:28:21  84  
14:28:21  85  	out_credit_card_id := var_credit_card_id;
14:28:21  86  END CREATE_CREDIT_CARD;
14:28:21  87  
14:28:21  88  /******************************************************************************/
14:28:21  89  
14:28:21  90  PROCEDURE UPDATE_CREDIT_CARD(
14:28:21  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
14:28:21  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:28:21  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
14:28:21  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:28:21  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
14:28:21  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
14:28:21  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
14:28:21  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:21  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
14:28:21 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
14:28:21 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:28:21 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
14:28:21 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
14:28:21 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
14:28:21 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
14:28:21 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
14:28:21 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
14:28:21 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
14:28:21 109  ) AS
14:28:21 110  BEGIN
14:28:21 111  
14:28:21 112  	-- Create history
14:28:21 113  	PROCS_HISTORY_V23.CREATE_CREDIT_CARD_HISTORY(
14:28:21 114  	  in_credit_card_id	       => in_credit_card_id,
14:28:21 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21 116  	);
14:28:21 117  
14:28:21 118  	UPDATE CREDIT_CARD SET
14:28:21 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
14:28:21 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
14:28:21 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
14:28:21 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
14:28:21 123  	  STATE 		   = NVL(in_state, STATE),
14:28:21 124  	  CITY			   = NVL(in_city, CITY),
14:28:21 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
14:28:21 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
14:28:21 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
14:28:21 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
14:28:21 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
14:28:21 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
14:28:21 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
14:28:21 132  	  UPDATE_DATE		   = SYSDATE,
14:28:21 133  	  UPDATED_BY		   = in_updated_by,
14:28:21 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
14:28:21 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
14:28:21 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
14:28:21 137  	WHERE
14:28:21 138  	  ID = in_credit_card_id;
14:28:21 139  
14:28:21 140  END UPDATE_CREDIT_CARD;
14:28:21 141  
14:28:21 142  /******************************************************************************/
14:28:21 143  
14:28:21 144  PROCEDURE CREATE_PAYPAL(
14:28:21 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
14:28:21 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
14:28:21 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
14:28:21 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:28:21 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
14:28:21 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
14:28:21 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
14:28:21 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
14:28:21 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
14:28:21 154  	in_state			IN PAYPAL.STATE%TYPE,
14:28:21 155  	in_city 			IN PAYPAL.CITY%TYPE,
14:28:21 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
14:28:21 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
14:28:21 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
14:28:21 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
14:28:21 160  ) AS
14:28:21 161  -- VARIABLES
14:28:21 162  var_paypal_id PAYPAL.ID%TYPE;
14:28:21 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21 164  var_date DATE := SYSDATE;
14:28:21 165  BEGIN
14:28:21 166  	IF in_paypal_id IS NULL THEN
14:28:21 167  	  SELECT
14:28:21 168  	    PP_ID_SEQ.nextVal into var_paypal_id
14:28:21 169  	  FROM DUAL;
14:28:21 170  	ELSE
14:28:21 171  	  var_paypal_id := in_paypal_id;
14:28:21 172  	END IF;
14:28:21 173  	INSERT INTO PAYPAL(
14:28:21 174  	    ID,
14:28:21 175  	    ACCOUNT_ID,
14:28:21 176  	    INSTRUMENT_NAME,
14:28:21 177  	    PRIVATE_EMAIL_ADDRESS,
14:28:21 178  	    CREATE_DATE,
14:28:21 179  	    CREATED_BY,
14:28:21 180  	    UPDATE_DATE,
14:28:21 181  	    UPDATED_BY,
14:28:21 182  	    PAYPAL_STATUS_ID,
14:28:21 183  	    PRIVATE_STREET_ADDRESS,
14:28:21 184  	    PRIVATE_STREET_ADDRESS2,
14:28:21 185  	    STATE,
14:28:21 186  	    CITY,
14:28:21 187  	    POSTAL_CODE,
14:28:21 188  	    COUNTRY,
14:28:21 189  	    EXPIRATION_DATE,
14:28:21 190  	    SECRET_TOKEN
14:28:21 191  	  ) VALUES (
14:28:21 192  	    var_paypal_id,
14:28:21 193  	    in_account_id,
14:28:21 194  	    in_instrument_name,
14:28:21 195  	    in_private_email_address,
14:28:21 196  	    var_date,
14:28:21 197  	    in_created_by,
14:28:21 198  	    var_date,
14:28:21 199  	    in_created_by,
14:28:21 200  	    in_paypal_status_id,
14:28:21 201  	    in_paypal_prvt_street_address,
14:28:21 202  	    in_paypal_prvt_street_address2,
14:28:21 203  	    in_state,
14:28:21 204  	    in_city,
14:28:21 205  	    in_postal_code,
14:28:21 206  	    in_country,
14:28:21 207  	    in_expiration_date,
14:28:21 208  	    in_secret_token
14:28:21 209  	  );
14:28:21 210  	out_paypal_id := var_paypal_id;
14:28:21 211  END CREATE_PAYPAL;
14:28:21 212  
14:28:21 213  /******************************************************************************/
14:28:21 214  
14:28:21 215  PROCEDURE UPDATE_PAYPAL(
14:28:21 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
14:28:21 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
14:28:21 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
14:28:21 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
14:28:21 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
14:28:21 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:28:21 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
14:28:21 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
14:28:21 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
14:28:21 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:21 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
14:28:21 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:28:21 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
14:28:21 229  ) AS
14:28:21 230  BEGIN
14:28:21 231  	-- Create history
14:28:21 232  	PROCS_HISTORY_V23.CREATE_PAYPAL_HISTORY(
14:28:21 233  	  in_paypal_id		       => in_paypal_id,
14:28:21 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21 235  	);
14:28:21 236  
14:28:21 237  	UPDATE PAYPAL SET
14:28:21 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
14:28:21 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
14:28:21 240  	  UPDATE_DATE	   = SYSDATE,
14:28:21 241  	  UPDATED_BY	   = in_updated_by,
14:28:21 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
14:28:21 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
14:28:21 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
14:28:21 245  	  STATE 		  = NVL(in_state, STATE),
14:28:21 246  	  CITY			  = NVL(in_city, CITY),
14:28:21 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
14:28:21 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
14:28:21 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
14:28:21 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
14:28:21 251  	WHERE
14:28:21 252  	  ID = in_paypal_id;
14:28:21 253  END UPDATE_PAYPAL;
14:28:21 254  
14:28:21 255  /******************************************************************************/
14:28:21 256  
14:28:21 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
14:28:21 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
14:28:21 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
14:28:21 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
14:28:21 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:21 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
14:28:21 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:28:21 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
14:28:21 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
14:28:21 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
14:28:21 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
14:28:21 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
14:28:21 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
14:28:21 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
14:28:21 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
14:28:21 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
14:28:21 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
14:28:21 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
14:28:21 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
14:28:21 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
14:28:21 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
14:28:21 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL,
14:28:21 279  	in_campaign		      IN GC_CAMPAIGN_AND_REF.CAMPAIGN%TYPE DEFAULT NULL,
14:28:21 280  	in_reference_code	      IN GC_CAMPAIGN_AND_REF.REFERENCE_CODE%TYPE DEFAULT NULL
14:28:21 281  ) AS
14:28:21 282  -- VARIABLES
14:28:21 283  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
14:28:21 284  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21 285  var_date DATE := SYSDATE;
14:28:21 286  BEGIN
14:28:21 287  	IF in_gift_certificate_id IS NULL THEN
14:28:21 288  	  SELECT
14:28:21 289  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
14:28:21 290  	  FROM DUAL;
14:28:21 291  	ELSE
14:28:21 292  	  var_gift_certificate_id := in_gift_certificate_id;
14:28:21 293  	END IF;
14:28:21 294  
14:28:21 295  	INSERT INTO GIFT_CERTIFICATE (
14:28:21 296  	    ID,
14:28:21 297  	    PURCHASER_GROUP_ID,
14:28:21 298  	    PURCHASE_INVOICE_ID,
14:28:21 299  	    OFFER_CHAIN_ID,
14:28:21 300  	    EXPIRATION_DATE,
14:28:21 301  	    PURCHASE_DATE,
14:28:21 302  	    GIFT_CERTIFICATE_STATUS_ID,
14:28:21 303  	    CODE,
14:28:21 304  	    CREATE_DATE,
14:28:21 305  	    CREATED_BY,
14:28:21 306  	    UPDATE_DATE,
14:28:21 307  	    UPDATED_BY,
14:28:21 308  	    RECIPIENT_NAME,
14:28:21 309  	    GIFT_MESSAGE,
14:28:21 310  	    RECIPIENT_EMAIL,
14:28:21 311  	    FINALIZED_INVOICE_ID,
14:28:21 312  	    SENDER_EMAIL,
14:28:21 313  	    SENDER_NAME,
14:28:21 314  	    REDEMPTION_DATE,
14:28:21 315  	    CANCELATION_DATE,
14:28:21 316  	    REDEEMER_GROUP_ID,
14:28:21 317  	    RECIPIENT_ADDRESS_ID,
14:28:21 318  	    RECIPIENT_NOTIFY_DATE
14:28:21 319  	  ) VALUES(
14:28:21 320  	    var_gift_certificate_id,
14:28:21 321  	    in_purchaser_group_id,
14:28:21 322  	    in_purchaser_invoice_id,
14:28:21 323  	    in_offer_chain_id,
14:28:21 324  	    in_expiration_date,
14:28:21 325  	    in_purchase_date,
14:28:21 326  	    in_gift_certificate_status_id,
14:28:21 327  	    in_code,
14:28:21 328  	    var_date,
14:28:21 329  	    in_created_by,
14:28:21 330  	    var_date,
14:28:21 331  	    in_created_by,
14:28:21 332  	    in_recipient_name,
14:28:21 333  	    in_gift_message,
14:28:21 334  	    in_recipient_email,
14:28:21 335  	    in_finalized_invoice_id,
14:28:21 336  	    in_sender_email,
14:28:21 337  	    in_sender_name,
14:28:21 338  	    in_redemption_date,
14:28:21 339  	    in_cancelation_date,
14:28:21 340  	    in_redeemer_group_id,
14:28:21 341  	    in_recipient_address_id,
14:28:21 342  	    in_recipient_notify_date
14:28:21 343  	  );
14:28:21 344  
14:28:21 345  	  IF in_campaign IS NOT NULL THEN
14:28:21 346  	    INSERT INTO GC_CAMPAIGN_AND_REF(GC_ID, CAMPAIGN, REFERENCE_CODE)
14:28:21 347  	      VALUES(var_gift_certificate_id, in_campaign, in_reference_code);
14:28:21 348  	  END IF;
14:28:21 349  
14:28:21 350  	out_gift_certificate_id := var_gift_certificate_id;
14:28:21 351  END CREATE_GIFT_CERTIFICATE;
14:28:21 352  
14:28:21 353  /******************************************************************************/
14:28:21 354  
14:28:21 355  PROCEDURE UPDATE_GIFT_CERTIFICATE(
14:28:21 356  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
14:28:21 357  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
14:28:21 358  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
14:28:21 359  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
14:28:21 360  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
14:28:21 361  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
14:28:21 362  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
14:28:21 363  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
14:28:21 364  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
14:28:21 365  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
14:28:21 366  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
14:28:21 367  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
14:28:21 368  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
14:28:21 369  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
14:28:21 370  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
14:28:21 371  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
14:28:21 372  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
14:28:21 373  ) AS
14:28:21 374  BEGIN
14:28:21 375  
14:28:21 376  	-- Create history
14:28:21 377  	PROCS_HISTORY_V23.CREATE_GIFT_CERT_HISTORY(
14:28:21 378  	  in_gift_certificate_id       => in_gift_certificate_id,
14:28:21 379  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21 380  	);
14:28:21 381  
14:28:21 382  	UPDATE GIFT_CERTIFICATE SET
14:28:21 383  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
14:28:21 384  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
14:28:21 385  	  CODE			     = NVL(in_code, CODE),
14:28:21 386  	  UPDATE_DATE		     = SYSDATE,
14:28:21 387  	  UPDATED_BY		     = in_updated_by,
14:28:21 388  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
14:28:21 389  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
14:28:21 390  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
14:28:21 391  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
14:28:21 392  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
14:28:21 393  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
14:28:21 394  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
14:28:21 395  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
14:28:21 396  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
14:28:21 397  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
14:28:21 398  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
14:28:21 399  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
14:28:21 400  	WHERE
14:28:21 401  	  ID = in_gift_certificate_id;
14:28:21 402  
14:28:21 403  END UPDATE_GIFT_CERTIFICATE;
14:28:21 404  
14:28:21 405  END PROCS_FIN_INSTRUMENTS_CRU_V23;
14:28:21 406  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.04
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_group_account_cru.sql
Compiling body for procs_group_account_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
14:28:21   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
14:28:21   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
14:28:21   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
14:28:21   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
14:28:21   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
14:28:21   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
14:28:21  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
14:28:21  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:21  12  ) AS
14:28:21  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
14:28:21  14  BEGIN
14:28:21  15  	UPDATE SUBSCRIPTION_SHARE SET
14:28:21  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
14:28:21  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
14:28:21  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
14:28:21  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
14:28:21  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
14:28:21  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
14:28:21  22  	  UPDATED_BY	       = in_updated_by,
14:28:21  23  	  UPDATE_DATE	       = SYSDATE
14:28:21  24  	WHERE
14:28:21  25  	  SUBSCRIPTION_SHARE.ID = in_id;
14:28:21  26  EXCEPTION
14:28:21  27  	WHEN OTHERS THEN
14:28:21  28  	  Procs_Common_V23.Throw_Exception(APP_EXCEPTION_CODES_V23.Internal_Error,
14:28:21  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
14:28:21  30  END UPDATE_SUBSCRIPTION_SHARE;
14:28:21  31  
14:28:21  32  PROCEDURE CREATE_GROUP_ACCOUNT (
14:28:21  33  	in_subscription_id	 IN NUMBER,
14:28:21  34  	in_group_name		 IN VARCHAR2,
14:28:21  35  	in_first_name		 IN VARCHAR2,
14:28:21  36  	in_last_name		 IN VARCHAR2,
14:28:21  37  	in_email		 IN VARCHAR2,
14:28:21  38  	in_phone		 IN VARCHAR2,
14:28:21  39  	in_organization_type	 IN VARCHAR2,
14:28:21  40  	in_seats		 IN NUMBER,
14:28:21  41  	in_seat_ttl_in_hours	 IN NUMBER,
14:28:21  42  	in_ip			 IN NUMBER,
14:28:21  43  	in_created_by		 IN VARCHAR2
14:28:21  44  ) AS
14:28:21  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
14:28:21  46  var_now DATE;
14:28:21  47  BEGIN
14:28:21  48  
14:28:21  49  	SELECT
14:28:21  50  	  SYSDATE INTO var_now
14:28:21  51  	FROM dual;
14:28:21  52  
14:28:21  53  	INSERT INTO GROUP_ACCOUNT (
14:28:21  54  	  id,
14:28:21  55  	  subscription_id,
14:28:21  56  	  group_name,
14:28:21  57  	  first_name,
14:28:21  58  	  last_name,
14:28:21  59  	  email,
14:28:21  60  	  phone,
14:28:21  61  	  organization_type,
14:28:21  62  	  seats,
14:28:21  63  	  seat_ttl_in_hours,
14:28:21  64  	  ip,
14:28:21  65  	  create_date,
14:28:21  66  	  created_by,
14:28:21  67  	  update_date,
14:28:21  68  	  updated_by
14:28:21  69  	) VALUES (
14:28:21  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
14:28:21  71  	  in_subscription_id,
14:28:21  72  	  in_group_name,
14:28:21  73  	  in_first_name,
14:28:21  74  	  in_last_name,
14:28:21  75  	  in_email,
14:28:21  76  	  in_phone,
14:28:21  77  	  in_organization_type,
14:28:21  78  	  in_seats,
14:28:21  79  	  in_seat_ttl_in_hours,
14:28:21  80  	  in_ip,
14:28:21  81  	  var_now,
14:28:21  82  	  in_created_by,
14:28:21  83  	  var_now,
14:28:21  84  	  in_created_by
14:28:21  85  	);
14:28:21  86  
14:28:21  87  EXCEPTION
14:28:21  88  	WHEN PROGRAM_ERROR THEN
14:28:21  89  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:21  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
14:28:21  91  	WHEN OTHERS THEN
14:28:21  92  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
14:28:21  94  END CREATE_GROUP_ACCOUNT;
14:28:21  95  
14:28:21  96  
14:28:21  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
14:28:21  98  	in_group_account_id    IN NUMBER,
14:28:21  99  	in_borrower_account_id IN NUMBER,
14:28:21 100  	in_ip_address	       IN VARCHAR2,
14:28:21 101  	in_email_domain        IN VARCHAR2,
14:28:21 102  	in_start_date	       IN DATE,
14:28:21 103  	in_end_date	       IN DATE,
14:28:21 104  	in_created_by	       IN VARCHAR2
14:28:21 105  ) AS
14:28:21 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
14:28:21 107  var_now DATE;
14:28:21 108  BEGIN
14:28:21 109  
14:28:21 110  	SELECT
14:28:21 111  	  SYSDATE INTO var_now
14:28:21 112  	FROM dual;
14:28:21 113  
14:28:21 114  	INSERT INTO SUBSCRIPTION_SHARE (
14:28:21 115  	  id,
14:28:21 116  	  group_account_id,
14:28:21 117  	  borrower_account_id,
14:28:21 118  	  ip_address,
14:28:21 119  	  email_domain,
14:28:21 120  	  start_date,
14:28:21 121  	  end_date,
14:28:21 122  	  create_date,
14:28:21 123  	  created_by,
14:28:21 124  	  update_date,
14:28:21 125  	  updated_by
14:28:21 126  	) VALUES (
14:28:21 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
14:28:21 128  	  in_group_account_id,
14:28:21 129  	  in_borrower_account_id,
14:28:21 130  	  in_ip_address,
14:28:21 131  	  in_email_domain,
14:28:21 132  	  in_start_date,
14:28:21 133  	  in_end_date,
14:28:21 134  	  var_now,
14:28:21 135  	  in_created_by,
14:28:21 136  	  var_now,
14:28:21 137  	  in_created_by
14:28:21 138  	);
14:28:21 139  
14:28:21 140  EXCEPTION
14:28:21 141  	WHEN PROGRAM_ERROR THEN
14:28:21 142  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:21 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
14:28:21 144  END CREATE_SUBSCRIPTION_SHARE;
14:28:21 145  
14:28:21 146  -- Eh, I don't like the cru packages at all
14:28:21 147  -- the idea of code reuse in PL/SQL is still lost on me
14:28:21 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
14:28:21 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:21 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:28:21 151  ) AS
14:28:21 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
14:28:21 153  BEGIN
14:28:21 154  	update
14:28:21 155  	  GROUP_ACCOUNT_IP_RANGE IR
14:28:21 156  	set
14:28:21 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_INACTIVE,
14:28:21 158  	  IR.UPDATED_BY = in_updated_by,
14:28:21 159  	  IR.UPDATE_DATE = sysdate
14:28:21 160  	where
14:28:21 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
14:28:21 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE
14:28:21 163  	;
14:28:21 164  EXCEPTION
14:28:21 165  WHEN OTHERS THEN
14:28:21 166  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 168  END DISABLE_IP_RANGES_BY_GA_ID;
14:28:21 169  
14:28:21 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
14:28:21 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
14:28:21 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:28:21 173  ) AS
14:28:21 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
14:28:21 175  BEGIN
14:28:21 176  	update
14:28:21 177  	  GROUP_ACCOUNT_IP_RANGE IR
14:28:21 178  	set
14:28:21 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_INACTIVE,
14:28:21 180  	  IR.UPDATED_BY = in_updated_by,
14:28:21 181  	  IR.UPDATE_DATE = sysdate
14:28:21 182  	where
14:28:21 183  	  IR.ID = in_id and
14:28:21 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE
14:28:21 185  	;
14:28:21 186  	if sql%rowcount = 0 then
14:28:21 187  	  raise NO_DATA_FOUND ;
14:28:21 188  	end if;
14:28:21 189  EXCEPTION
14:28:21 190  WHEN NO_DATA_FOUND THEN
14:28:21 191  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:21 192  	  SPROC_NAME, 'Missing or invalid group_account_ip_range_id '||in_id, SQLERRM);
14:28:21 193  WHEN OTHERS THEN
14:28:21 194  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 195  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
14:28:21 196  END DISABLE_IP_RANGE_BY_ID;
14:28:21 197  
14:28:21 198  PROCEDURE ADD_IP_RANGE (
14:28:21 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:21 200  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
14:28:21 201  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:28:21 202  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:28:21 203  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
14:28:21 204  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
14:28:21 205  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
14:28:21 206  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
14:28:21 207  ) AS
14:28:21 208  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
14:28:21 209  BEGIN
14:28:21 210  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
14:28:21 211  	    ID,
14:28:21 212  	    GROUP_ACCOUNT_ID,
14:28:21 213  	    MINIMUM_IP_STRING,
14:28:21 214  	    MINIMUM_IP_LOW,
14:28:21 215  	    MINIMUM_IP_HIGH,
14:28:21 216  	    MAXIMUM_IP_STRING,
14:28:21 217  	    MAXIMUM_IP_LOW,
14:28:21 218  	    MAXIMUM_IP_HIGH,
14:28:21 219  	    CREATED_BY,
14:28:21 220  	    CREATE_DATE,
14:28:21 221  	    UPDATED_BY,
14:28:21 222  	    UPDATE_DATE,
14:28:21 223  	    GROUP_ACC_IP_RNG_STATUS_ID
14:28:21 224  	  )
14:28:21 225  	  VALUES (
14:28:21 226  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
14:28:21 227  	    in_group_account_id,
14:28:21 228  	    in_minimum_ip_string,
14:28:21 229  	    in_minimum_ip_low,
14:28:21 230  	    in_minimum_ip_high,
14:28:21 231  	    in_maximum_ip_string,
14:28:21 232  	    in_maximum_ip_low,
14:28:21 233  	    in_maximum_ip_high,
14:28:21 234  	    in_created_by,
14:28:21 235  	    sysdate,
14:28:21 236  	    in_created_by,
14:28:21 237  	    sysdate,
14:28:21 238  	    GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE
14:28:21 239  	  );
14:28:21 240  EXCEPTION
14:28:21 241  WHEN OTHERS THEN
14:28:21 242  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 243  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 244  END ADD_IP_RANGE;
14:28:21 245  
14:28:21 246  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
14:28:21 247  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:21 248  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:21 249  ) AS
14:28:21 250  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
14:28:21 251  BEGIN
14:28:21 252  	update
14:28:21 253  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
14:28:21 254  	set
14:28:21 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_INACT,
14:28:21 256  	  ED.UPDATED_BY = in_updated_by,
14:28:21 257  	  ED.UPDATE_DATE = sysdate
14:28:21 258  	where
14:28:21 259  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
14:28:21 260  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_ACT
14:28:21 261  	;
14:28:21 262  EXCEPTION
14:28:21 263  WHEN OTHERS THEN
14:28:21 264  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 265  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 266  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
14:28:21 267  
14:28:21 268  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
14:28:21 269  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:28:21 270  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:21 271  ) AS
14:28:21 272  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
14:28:21 273  BEGIN
14:28:21 274  	update
14:28:21 275  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
14:28:21 276  	set
14:28:21 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_INACT,
14:28:21 278  	  ED.UPDATED_BY = in_updated_by,
14:28:21 279  	  ED.UPDATE_DATE = sysdate
14:28:21 280  	where
14:28:21 281  	  ED.ID = in_id and
14:28:21 282  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_ACT
14:28:21 283  	;
14:28:21 284  EXCEPTION
14:28:21 285  WHEN OTHERS THEN
14:28:21 286  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 287  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
14:28:21 288  END DISABLE_EMAIL_DOMAIN_BY_ID;
14:28:21 289  
14:28:21 290  
14:28:21 291  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
14:28:21 292  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:28:21 293  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:21 294  ) AS
14:28:21 295  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
14:28:21 296  BEGIN
14:28:21 297  	update
14:28:21 298  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
14:28:21 299  	set
14:28:21 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_ACT,
14:28:21 301  	  ED.UPDATED_BY = in_updated_by,
14:28:21 302  	  ED.UPDATE_DATE = sysdate
14:28:21 303  	where
14:28:21 304  	  ED.ID = in_id and
14:28:21 305  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_INACT
14:28:21 306  	;
14:28:21 307  EXCEPTION
14:28:21 308  WHEN DUP_VAL_ON_INDEX THEN
14:28:21 309  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:21 310  		SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
14:28:21 311  WHEN OTHERS THEN
14:28:21 312  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 313  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
14:28:21 314  END ENABLE_EMAIL_DOMAIN_BY_ID;
14:28:21 315  
14:28:21 316  
14:28:21 317  PROCEDURE ADD_EMAIL_DOMAIN (
14:28:21 318  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:21 319  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:28:21 320  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
14:28:21 321  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
14:28:21 322  ) AS
14:28:21 323  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
14:28:21 324  BEGIN
14:28:21 325  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
14:28:21 326  	    ID,
14:28:21 327  	    GROUP_ACCOUNT_ID,
14:28:21 328  	    EMAIL_DOMAIN,
14:28:21 329  		IS_ACTIVE,
14:28:21 330  	    CREATED_BY,
14:28:21 331  	    CREATE_DATE,
14:28:21 332  	    UPDATED_BY,
14:28:21 333  	    UPDATE_DATE
14:28:21 334  	  )
14:28:21 335  	  VALUES (
14:28:21 336  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
14:28:21 337  	    in_group_account_id,
14:28:21 338  		in_email_domain,
14:28:21 339  		in_is_active,
14:28:21 340  		in_created_by,
14:28:21 341  	    sysdate,
14:28:21 342  	    in_created_by,
14:28:21 343  	    sysdate
14:28:21 344  	  );
14:28:21 345  EXCEPTION
14:28:21 346  WHEN DUP_VAL_ON_INDEX THEN
14:28:21 347  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:21 348  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
14:28:21 349  WHEN OTHERS THEN
14:28:21 350  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 351  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
14:28:21 352  END ADD_EMAIL_DOMAIN;
14:28:21 353  
14:28:21 354  PROCEDURE UPDATE_GROUP_ACCOUNT (
14:28:21 355  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:28:21 356  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
14:28:21 357  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
14:28:21 358  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
14:28:21 359  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
14:28:21 360  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
14:28:21 361  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:28:21 362  ) AS
14:28:21 363  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
14:28:21 364  BEGIN
14:28:21 365  	update
14:28:21 366  	  group_account
14:28:21 367  	set
14:28:21 368  	  group_name = nvl(in_group_name, group_name),
14:28:21 369  	  first_name = nvl(in_first_name, first_name),
14:28:21 370  	  last_name = nvl(in_last_name, last_name),
14:28:21 371  	  email = nvl(in_email, email),
14:28:21 372  	  phone = nvl(in_phone, phone),
14:28:21 373  	  updated_by = in_updated_by,
14:28:21 374  	  update_date = sysdate
14:28:21 375  	where
14:28:21 376  	  id = in_group_account_id;
14:28:21 377  
14:28:21 378  	if(sql%rowcount = 0) then
14:28:21 379  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:21 380  	  SPROC_NAME, 'Group Account not found', SQLERRM);
14:28:21 381  	end if;
14:28:21 382  EXCEPTION
14:28:21 383  	WHEN OTHERS THEN
14:28:21 384  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:21 385  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
14:28:21 386  END UPDATE_GROUP_ACCOUNT;
14:28:21 387  
14:28:21 388  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
14:28:21 389  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
14:28:21 390  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
14:28:21 391  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:28:21 392  ) AS
14:28:21 393  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
14:28:21 394  var_subscription_id NUMBER;
14:28:21 395  var_seats NUMBER;
14:28:21 396  BEGIN
14:28:21 397  	select subscription_id, seats into var_subscription_id, var_seats
14:28:21 398  	from group_account
14:28:21 399  	where id = in_group_account_id;
14:28:21 400  
14:28:21 401  	update
14:28:21 402  	  group_account
14:28:21 403  	set
14:28:21 404  	  seats = in_seats,
14:28:21 405  	  updated_by = in_updated_by,
14:28:21 406  	  update_date = sysdate
14:28:21 407  	where
14:28:21 408  	  id = in_group_account_id;
14:28:21 409  
14:28:21 410  	if(sql%rowcount = 0) then
14:28:21 411  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:21 412  	  SPROC_NAME, 'Group Account not found', SQLERRM);
14:28:21 413  	end if;
14:28:21 414  
14:28:21 415  	PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
14:28:21 416  	  in_subscription_id => var_subscription_id,
14:28:21 417  	  in_agent_id	     => 0,
14:28:21 418  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
14:28:21 419  	  in_created_by      => in_updated_by
14:28:21 420  	);
14:28:21 421  EXCEPTION
14:28:21 422  	WHEN NO_DATA_FOUND THEN
14:28:21 423  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:21 424  	  SPROC_NAME, 'Group Account not found', SQLERRM);
14:28:21 425  	WHEN OTHERS THEN
14:28:21 426  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:21 427  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
14:28:21 428  END UPDATE_GROUP_ACCOUNT_SEATS;
14:28:21 429  
14:28:21 430  END PROCS_GROUP_ACCOUNT_CRU_V23;
14:28:21 431  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.06
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_invoice_cru.sql
Compiling body for procs_invoice_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_INVOICE (
14:28:21   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
14:28:21   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
14:28:21   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
14:28:21   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
14:28:21   9  ) AS
14:28:21  10  -- VARIABLES
14:28:21  11  var_invoice_id INVOICE.ID%TYPE;
14:28:21  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21  13  var_date DATE := SYSDATE;
14:28:21  14  BEGIN
14:28:21  15  	IF in_invoice_id IS NULL THEN
14:28:21  16  	  SELECT
14:28:21  17  	    INV_ID_SEQ.nextVal into var_invoice_id
14:28:21  18  	  FROM DUAL;
14:28:21  19  	ELSE
14:28:21  20  	  var_invoice_id := in_invoice_id;
14:28:21  21  	END IF;
14:28:21  22  	INSERT INTO
14:28:21  23  	  INVOICE (
14:28:21  24  	    ID,
14:28:21  25  	    INVOICE_STATUS_ID,
14:28:21  26  	    CREATE_DATE,
14:28:21  27  	    CREATED_BY,
14:28:21  28  	    UPDATE_DATE,
14:28:21  29  	    UPDATED_BY,
14:28:21  30  	    TAX_EXEMPT_ID,
14:28:21  31  	    IS_TAX_CALCULATION_NEEDED
14:28:21  32  	  ) VALUES (
14:28:21  33  	    var_invoice_id,
14:28:21  34  	    in_invoice_status_id,
14:28:21  35  	    var_date,
14:28:21  36  	    in_created_by,
14:28:21  37  	    var_date,
14:28:21  38  	    in_created_by,
14:28:21  39  	    in_tax_exempt_id,
14:28:21  40  	    0 -- DEFAULT VALUE
14:28:21  41  	  );
14:28:21  42  
14:28:21  43  	out_invoice_id := var_invoice_id;
14:28:21  44  END;
14:28:21  45  
14:28:21  46  /*****************************************************************/
14:28:21  47  
14:28:21  48  PROCEDURE UPDATE_INVOICE (
14:28:21  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
14:28:21  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
14:28:21  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
14:28:21  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
14:28:21  53  ) AS
14:28:21  54  BEGIN
14:28:21  55  	-- Create history
14:28:21  56  	PROCS_HISTORY_V23.CREATE_INVOICE_HISTORY(
14:28:21  57  	  in_invoice_id 	       => in_invoice_id,
14:28:21  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21  59  	);
14:28:21  60  
14:28:21  61  	UPDATE
14:28:21  62  	  INVOICE
14:28:21  63  	SET
14:28:21  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
14:28:21  65  	  UPDATE_DATE		    = SYSDATE,
14:28:21  66  	  UPDATED_BY		    = in_updated_by,
14:28:21  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
14:28:21  68  	WHERE
14:28:21  69  	  ID = in_invoice_id;
14:28:21  70  END;
14:28:21  71  
14:28:21  72  END PROCS_INVOICE_CRU_V23;
14:28:21  73  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_itunes_receipt_cru.sql
Compiling body for procs_itunes_receipt_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_RECEIPT(
14:28:21   4  /*
14:28:21   5  Throws exceptions:
14:28:21   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21   7  */
14:28:21   8  	  out_id	      OUT NUMBER,
14:28:21   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:21  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
14:28:21  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
14:28:21  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
14:28:21  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:21  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:28:21  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:28:21  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:21  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:28:21  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:28:21  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:28:21  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
14:28:21  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
14:28:21  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:28:21  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
14:28:21  24  ) AS
14:28:21  25  -- VARIABLES
14:28:21  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
14:28:21  27  var_current_date	    DATE;
14:28:21  28  var_count 	    NUMBER;
14:28:21  29  ITUNES_ORG_TNX_USED   EXCEPTION;
14:28:21  30  BEGIN
14:28:21  31  	SELECT COUNT(1) into var_count
14:28:21  32  	FROM
14:28:21  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
14:28:21  34  	WHERE
14:28:21  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
14:28:21  36  	  IR.SUBSCRIPTION_ID = S.ID AND
14:28:21  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
14:28:21  38  
14:28:21  39  	if var_count > 0 then
14:28:21  40  	  raise ITUNES_ORG_TNX_USED;
14:28:21  41  	end if;
14:28:21  42  
14:28:21  43  	SELECT
14:28:21  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
14:28:21  45  	INTO
14:28:21  46  	  out_id
14:28:21  47  	FROM
14:28:21  48  	  dual
14:28:21  49  	;
14:28:21  50  
14:28:21  51  	SELECT
14:28:21  52  	  sysdate
14:28:21  53  	INTO
14:28:21  54  	  var_current_date
14:28:21  55  	FROM
14:28:21  56  	  dual
14:28:21  57  	;
14:28:21  58  
14:28:21  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
14:28:21  60  	(
14:28:21  61  	  id,
14:28:21  62  	  subscription_id,
14:28:21  63  	  receipt,
14:28:21  64  	  status,
14:28:21  65  	  quantity,
14:28:21  66  	  product_id,
14:28:21  67  	  transaction_id,
14:28:21  68  	  purchase_date,
14:28:21  69  	  original_transaction_id,
14:28:21  70  	  original_purchase_date,
14:28:21  71  	  app_item_id,
14:28:21  72  	  version_external_id,
14:28:21  73  	  bid,
14:28:21  74  	  bvrs,
14:28:21  75  	  expires_date,
14:28:21  76  	  create_date,
14:28:21  77  	  created_by,
14:28:21  78  	  update_date,
14:28:21  79  	  updated_by,
14:28:21  80  	  last_check_date
14:28:21  81  	)
14:28:21  82  	VALUES
14:28:21  83  	(
14:28:21  84  	  out_id,
14:28:21  85  	  in_subscription_id,
14:28:21  86  	  in_receipt,
14:28:21  87  	  in_status,
14:28:21  88  	  in_quantity,
14:28:21  89  	  in_product_id,
14:28:21  90  	  in_transaction_id,
14:28:21  91  	  in_purchase_date,
14:28:21  92  	  in_original_transaction_id,
14:28:21  93  	  in_original_purchase_date,
14:28:21  94  	  in_app_item_id,
14:28:21  95  	  in_version_external_id,
14:28:21  96  	  in_bid,
14:28:21  97  	  in_bvrs,
14:28:21  98  	  in_expires_date,
14:28:21  99  	  var_current_date,
14:28:21 100  	  in_created_by,
14:28:21 101  	  var_current_date,
14:28:21 102  	  in_created_by,
14:28:21 103  	  var_current_date
14:28:21 104  	);
14:28:21 105  
14:28:21 106  EXCEPTION
14:28:21 107  WHEN ITUNES_ORG_TNX_USED THEN
14:28:21 108  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:21 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
14:28:21 110  WHEN DUP_VAL_ON_INDEX THEN
14:28:21 111  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:21 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
14:28:21 113  WHEN OTHERS THEN
14:28:21 114  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 116  END CREATE_RECEIPT;
14:28:21 117  
14:28:21 118  PROCEDURE UPDATE_RECEIPT(
14:28:21 119  /*
14:28:21 120  Throws exceptions:
14:28:21 121  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 122  */
14:28:21 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
14:28:21 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
14:28:21 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
14:28:21 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
14:28:21 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:21 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:28:21 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:28:21 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:21 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:28:21 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:28:21 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:28:21 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
14:28:21 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
14:28:21 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:28:21 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
14:28:21 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
14:28:21 139  ) AS
14:28:21 140  -- VARIABLES
14:28:21 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
14:28:21 142  var_current_date	    DATE;
14:28:21 143  BEGIN
14:28:21 144  
14:28:21 145  	SELECT
14:28:21 146  	  sysdate
14:28:21 147  	INTO
14:28:21 148  	  var_current_date
14:28:21 149  	FROM
14:28:21 150  	  dual
14:28:21 151  	;
14:28:21 152  
14:28:21 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
14:28:21 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_ITUNES_RECEIPT_HISTORY
14:28:21 155  	  (
14:28:21 156  	      rec.id,
14:28:21 157  	      rec.subscription_id,
14:28:21 158  	      rec.receipt,
14:28:21 159  	      rec.status,
14:28:21 160  	      rec.quantity,
14:28:21 161  	      rec.product_id,
14:28:21 162  	      rec.transaction_id,
14:28:21 163  	      rec.purchase_date,
14:28:21 164  	      rec.original_transaction_id,
14:28:21 165  	      rec.original_purchase_date,
14:28:21 166  	      rec.app_item_id,
14:28:21 167  	      rec.version_external_id,
14:28:21 168  	      rec.bid,
14:28:21 169  	      rec.bvrs,
14:28:21 170  	      rec.expires_date,
14:28:21 171  	      rec.create_date,
14:28:21 172  	      rec.created_by,
14:28:21 173  	      rec.update_date,
14:28:21 174  	      rec.updated_by,
14:28:21 175  	      rec.last_check_date,
14:28:21 176  	      rec.cancel_date
14:28:21 177  	  );
14:28:21 178  	END LOOP;
14:28:21 179  
14:28:21 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
14:28:21 181  	SET
14:28:21 182  	  receipt = in_receipt,
14:28:21 183  	  status = in_status,
14:28:21 184  	  quantity = in_quantity,
14:28:21 185  	  product_id = in_product_id,
14:28:21 186  	  transaction_id = in_transaction_id,
14:28:21 187  	  purchase_date = in_purchase_date,
14:28:21 188  	  original_transaction_id = in_original_transaction_id,
14:28:21 189  	  original_purchase_date = in_original_purchase_date,
14:28:21 190  	  app_item_id = in_app_item_id,
14:28:21 191  	  version_external_id = in_version_external_id,
14:28:21 192  	  bid = in_bid,
14:28:21 193  	  bvrs = in_bvrs,
14:28:21 194  	  expires_date = in_expires_date,
14:28:21 195  	  update_date = var_current_date,
14:28:21 196  	  updated_by = in_updated_by,
14:28:21 197  	  last_check_date = var_current_date,
14:28:21 198  	  cancel_date = in_cancel_date
14:28:21 199  	WHERE
14:28:21 200  	  id = in_id
14:28:21 201  	;
14:28:21 202  
14:28:21 203  EXCEPTION
14:28:21 204  WHEN DUP_VAL_ON_INDEX THEN
14:28:21 205  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:21 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
14:28:21 207  WHEN OTHERS THEN
14:28:21 208  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 210  
14:28:21 211  END UPDATE_RECEIPT;
14:28:21 212  
14:28:21 213  PROCEDURE LINK_ITUNES_RECEIPT(
14:28:21 214  /*
14:28:21 215  Throws exceptions:
14:28:21 216  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 217  */
14:28:21 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
14:28:21 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:21 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
14:28:21 221  ) AS
14:28:21 222  -- VARIABLES
14:28:21 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
14:28:21 224  var_current_date	    DATE;
14:28:21 225  BEGIN
14:28:21 226  
14:28:21 227  	      SELECT
14:28:21 228  	  sysdate
14:28:21 229  	      INTO
14:28:21 230  	  var_current_date
14:28:21 231  	      FROM
14:28:21 232  	  dual
14:28:21 233  	      ;
14:28:21 234  
14:28:21 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
14:28:21 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_ITUNES_RECEIPT_HISTORY
14:28:21 237  	      (
14:28:21 238  	    rec.id,
14:28:21 239  	    rec.subscription_id,
14:28:21 240  	    rec.receipt,
14:28:21 241  	    rec.status,
14:28:21 242  	    rec.quantity,
14:28:21 243  	    rec.product_id,
14:28:21 244  	    rec.transaction_id,
14:28:21 245  	    rec.purchase_date,
14:28:21 246  	    rec.original_transaction_id,
14:28:21 247  	    rec.original_purchase_date,
14:28:21 248  	    rec.app_item_id,
14:28:21 249  	    rec.version_external_id,
14:28:21 250  	    rec.bid,
14:28:21 251  	    rec.bvrs,
14:28:21 252  	    rec.expires_date,
14:28:21 253  	    rec.create_date,
14:28:21 254  	    rec.created_by,
14:28:21 255  	    rec.update_date,
14:28:21 256  	    rec.updated_by,
14:28:21 257  	    rec.last_check_date,
14:28:21 258  	    rec.cancel_date
14:28:21 259  	      );
14:28:21 260  	      END LOOP;
14:28:21 261  
14:28:21 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
14:28:21 263  		SET
14:28:21 264  		      subscription_id = in_subscription_id,
14:28:21 265  		      update_date = var_current_date,
14:28:21 266  	      updated_by = in_updated_by,
14:28:21 267  	      last_check_date = var_current_date
14:28:21 268  	      WHERE
14:28:21 269  		  id = in_id
14:28:21 270  	      ;
14:28:21 271  
14:28:21 272  	      EXCEPTION
14:28:21 273  	      WHEN DUP_VAL_ON_INDEX THEN
14:28:21 274  		PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:21 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
14:28:21 276  	      WHEN OTHERS THEN
14:28:21 277  		PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 279  END LINK_ITUNES_RECEIPT;
14:28:21 280  
14:28:21 281  
14:28:21 282  PROCEDURE MARK_RECEIPT_CHECKED(
14:28:21 283  /*
14:28:21 284  Throws exceptions:
14:28:21 285  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 286  */
14:28:21 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
14:28:21 288  ) AS
14:28:21 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
14:28:21 290  BEGIN
14:28:21 291  	UPDATE
14:28:21 292  	  CORE_OWNER.ITUNES_RECEIPT
14:28:21 293  	SET
14:28:21 294  	  last_check_date = sysdate
14:28:21 295  	WHERE
14:28:21 296  	  id = in_id
14:28:21 297  	;
14:28:21 298  EXCEPTION
14:28:21 299  WHEN OTHERS THEN
14:28:21 300  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 302  END MARK_RECEIPT_CHECKED;
14:28:21 303  
14:28:21 304  END PROCS_ITUNES_RECEIPT_CRU_V23;
14:28:21 305  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.05
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_license_cru.sql
Compiling body for procs_license_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_LICENSE(
14:28:21   4  	out_license_id		    OUT LICENSE.ID%TYPE,
14:28:21   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
14:28:21   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
14:28:21   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
14:28:21   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
14:28:21  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
14:28:21  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
14:28:21  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
14:28:21  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
14:28:21  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
14:28:21  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
14:28:21  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
14:28:21  17  ) AS
14:28:21  18  -- VARIABLES
14:28:21  19  var_license_id LICENSE.ID%TYPE;
14:28:21  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21  21  var_date DATE := SYSDATE;
14:28:21  22  BEGIN
14:28:21  23  	IF in_license_id IS NULL THEN
14:28:21  24  	  SELECT
14:28:21  25  	    LCN_ID_SEQ.nextVal into var_license_id
14:28:21  26  	  FROM DUAL;
14:28:21  27  	ELSE
14:28:21  28  	  var_license_id := in_license_id;
14:28:21  29  	END IF;
14:28:21  30  	INSERT INTO
14:28:21  31  	  LICENSE (
14:28:21  32  	    ID,
14:28:21  33  	    LICENSE_STATUS_ID,
14:28:21  34  	    NEEDS_ENTITLEMENTS,
14:28:21  35  	    START_DATE,
14:28:21  36  	    OFFER_ID,
14:28:21  37  	    SUBSCRIPTION_ID,
14:28:21  38  	    INVOICE_ID,
14:28:21  39  	    END_DATE,
14:28:21  40  	    CREATE_DATE,
14:28:21  41  	    CREATED_BY,
14:28:21  42  	    UPDATE_DATE,
14:28:21  43  	    UPDATED_BY,
14:28:21  44  	    IS_EXTENSION,
14:28:21  45  	    CURRENT_OFFER_INDEX,
14:28:21  46  	    CURRENT_OFFER_RECURR_NUM,
14:28:21  47  	    ENTITLEMENT_END_DATE
14:28:21  48  	  ) VALUES (
14:28:21  49  	    var_license_id,
14:28:21  50  	    in_license_status_id,
14:28:21  51  	    in_needs_entitlements,
14:28:21  52  	    in_start_date,
14:28:21  53  	    in_offer_id,
14:28:21  54  	    in_subscription_id,
14:28:21  55  	    in_invoice_id,
14:28:21  56  	    in_end_date,
14:28:21  57  	    var_date,
14:28:21  58  	    in_created_by,
14:28:21  59  	    var_date,
14:28:21  60  	    in_created_by,
14:28:21  61  	    in_is_extension,
14:28:21  62  	    in_current_offer_index,
14:28:21  63  	    in_current_offer_recurr_num,
14:28:21  64  	    in_end_date
14:28:21  65  	  );
14:28:21  66  
14:28:21  67  	out_license_id := var_license_id;
14:28:21  68  END CREATE_LICENSE;
14:28:21  69  
14:28:21  70  /********************************************************************/
14:28:21  71  
14:28:21  72  PROCEDURE UPDATE_LICENSE (
14:28:21  73  	in_license_id		    IN LICENSE.ID%TYPE,
14:28:21  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
14:28:21  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
14:28:21  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
14:28:21  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
14:28:21  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
14:28:21  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
14:28:21  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
14:28:21  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
14:28:21  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
14:28:21  83  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
14:28:21  84  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
14:28:21  85  ) AS
14:28:21  86  BEGIN
14:28:21  87  	-- Create history
14:28:21  88  	PROCS_HISTORY_V23.CREATE_LICENSE_HISTORY(
14:28:21  89  	  in_license_id 	       => in_license_id,
14:28:21  90  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21  91  	);
14:28:21  92  
14:28:21  93  	UPDATE
14:28:21  94  	  LICENSE
14:28:21  95  	SET
14:28:21  96  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
14:28:21  97  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
14:28:21  98  	  START_DATE		   = NVL(in_start_date, START_DATE),
14:28:21  99  	  END_DATE		   = NVL(in_end_date, END_DATE),
14:28:21 100  	  UPDATE_DATE		   = SYSDATE,
14:28:21 101  	  UPDATED_BY		   = in_updated_by,
14:28:21 102  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
14:28:21 103  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
14:28:21 104  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
14:28:21 105  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE),
14:28:21 106  	  GRACE_START_DATE	   = NVL(in_grace_start_date, GRACE_START_DATE),
14:28:21 107  	  GRACE_END_DATE	   = NVL(in_grace_end_date, GRACE_END_DATE)
14:28:21 108  	WHERE
14:28:21 109  	  LICENSE.ID = in_license_id;
14:28:21 110  END UPDATE_LICENSE;
14:28:21 111  
14:28:21 112  END PROCS_LICENSE_CRU_V23;
14:28:21 113  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_line_items_cru.sql
Compiling body for procs_line_items_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_LINE_ITEM (
14:28:21   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
14:28:21   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
14:28:21   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
14:28:21   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
14:28:21   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
14:28:21   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
14:28:21  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
14:28:21  11  ) AS
14:28:21  12  BEGIN
14:28:21  13  	IF inout_line_item_id IS NULL THEN
14:28:21  14  	  SELECT
14:28:21  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
14:28:21  16  	  FROM DUAL;
14:28:21  17  	END IF;
14:28:21  18  	INSERT INTO LINE_ITEM (
14:28:21  19  	  ID,
14:28:21  20  	  PRODUCT_OFFER_ID,
14:28:21  21  	  INVOICE_ID,
14:28:21  22  	  AMOUNT,
14:28:21  23  	  QUANTITY,
14:28:21  24  	  CREATE_DATE,
14:28:21  25  	  CREATED_BY,
14:28:21  26  	  DISCOUNT_AMOUNT,
14:28:21  27  	  TAXES_AMOUNT
14:28:21  28  	) VALUES (
14:28:21  29  	  inout_line_item_id,
14:28:21  30  	  in_product_offer_id,
14:28:21  31  	  in_invoice_id,
14:28:21  32  	  in_amount,
14:28:21  33  	  1, -- [REVU]: Deprecated. Ignore this field
14:28:21  34  	  SYSDATE,
14:28:21  35  	  in_created_by,
14:28:21  36  	  in_discount_amount,
14:28:21  37  	  in_taxes_amount
14:28:21  38  	);
14:28:21  39  END CREATE_LINE_ITEM;
14:28:21  40  
14:28:21  41  /******************************************************************************/
14:28:21  42  
14:28:21  43  PROCEDURE UPDATE_LINE_ITEM (
14:28:21  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
14:28:21  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
14:28:21  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
14:28:21  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
14:28:21  48  ) AS
14:28:21  49  BEGIN
14:28:21  50  	UPDATE
14:28:21  51  	  LINE_ITEM
14:28:21  52  	SET
14:28:21  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
14:28:21  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
14:28:21  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
14:28:21  56  	WHERE
14:28:21  57  	  LINE_ITEM.ID = in_line_item_id;
14:28:21  58  END UPDATE_LINE_ITEM;
14:28:21  59  
14:28:21  60  /******************************************************************************/
14:28:21  61  
14:28:21  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
14:28:21  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
14:28:21  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
14:28:21  65  ) AS
14:28:21  66  BEGIN
14:28:21  67  	INSERT INTO DISCOUNT_LINE_ITEM(
14:28:21  68  	  DISCOUNT_ID,
14:28:21  69  	  LINE_ITEM_ID
14:28:21  70  	) VALUES (
14:28:21  71  	  in_discount_id,
14:28:21  72  	  in_line_item_id
14:28:21  73  	);
14:28:21  74  END CREATE_DISCOUNT_LINE_ITEM;
14:28:21  75  
14:28:21  76  END PROCS_LINE_ITEMS_CRU_V23;
14:28:21  77  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_reconciliation_cru.sql
Compiling body for procs_reconciliation_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
14:28:21   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
14:28:21   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:21   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
14:28:21   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
14:28:21   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
14:28:21  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
14:28:21  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
14:28:21  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:28:21  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
14:28:21  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
14:28:21  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
14:28:21  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:28:21  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
14:28:21  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
14:28:21  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
14:28:21  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
14:28:21  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
14:28:21  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
14:28:21  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
14:28:21  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
14:28:21  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
14:28:21  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
14:28:21  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
14:28:21  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
14:28:21  29  ) AS
14:28:21  30  -- VARIABLES
14:28:21  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
14:28:21  32  var_date DATE := SYSDATE;
14:28:21  33  BEGIN
14:28:21  34  	IF in_cpt_chargeback_act_id IS NULL THEN
14:28:21  35  	  SELECT
14:28:21  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
14:28:21  37  	  FROM DUAL;
14:28:21  38  	ELSE
14:28:21  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
14:28:21  40  	END IF;
14:28:21  41  	INSERT INTO
14:28:21  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
14:28:21  43  	    id,
14:28:21  44  	    rcn_ext_source_log_id,
14:28:21  45  	    record_type,
14:28:21  46  	    entity_type,
14:28:21  47  	    entity_number,
14:28:21  48  	    chargeback_amount_issuer,
14:28:21  49  	    prev_partial_representment,
14:28:21  50  	    presentment_currency,
14:28:21  51  	    chargeback_category,
14:28:21  52  	    status_flag,
14:28:21  53  	    sequence_number,
14:28:21  54  	    merchant_order_number,
14:28:21  55  	    account_number,
14:28:21  56  	    reason_code,
14:28:21  57  	    transaction_date,
14:28:21  58  	    chargeback_date,
14:28:21  59  	    activity_date,
14:28:21  60  	    chargeback_amount_action,
14:28:21  61  	    fee_amount,
14:28:21  62  	    usage_code,
14:28:21  63  	    mop_code,
14:28:21  64  	    authorization_date,
14:28:21  65  	    chargeback_due_date,
14:28:21  66  	    create_date,
14:28:21  67  	    created_by
14:28:21  68  	  ) VALUES (
14:28:21  69  	    var_cpt_chargeback_act_id,
14:28:21  70  	    in_ext_source_log_id,
14:28:21  71  	    in_record_type,
14:28:21  72  	    in_entity_type,
14:28:21  73  	    in_entity_number,
14:28:21  74  	    in_chargeback_amount_issuer,
14:28:21  75  	    in_prev_partial_repres,
14:28:21  76  	    in_presentment_currency,
14:28:21  77  	    in_chargeback_category,
14:28:21  78  	    in_status_flag,
14:28:21  79  	    in_sequence_number,
14:28:21  80  	    in_merchant_order_number,
14:28:21  81  	    in_account_number,
14:28:21  82  	    in_reason_code,
14:28:21  83  	    in_transaction_date,
14:28:21  84  	    in_chargeback_date,
14:28:21  85  	    in_activity_date,
14:28:21  86  	    in_chargeback_amount_action,
14:28:21  87  	    in_fee_amount,
14:28:21  88  	    in_usage_code,
14:28:21  89  	    in_mop_code,
14:28:21  90  	    in_authorization_date,
14:28:21  91  	    in_chargeback_due_date,
14:28:21  92  	    var_date,
14:28:21  93  	    in_created_by
14:28:21  94  	  );
14:28:21  95  
14:28:21  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
14:28:21  97  END CREATE_CPT_CHARGEBACK_ACT;
14:28:21  98  
14:28:21  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
14:28:21 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
14:28:21 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
14:28:21 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
14:28:21 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
14:28:21 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
14:28:21 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:28:21 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
14:28:21 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
14:28:21 108  ) AS
14:28:21 109  -- VARIABLES
14:28:21 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
14:28:21 111  var_date DATE := SYSDATE;
14:28:21 112  BEGIN
14:28:21 113  	IF in_ext_source_log_id IS NULL THEN
14:28:21 114  	  SELECT
14:28:21 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
14:28:21 116  	  FROM DUAL;
14:28:21 117  	ELSE
14:28:21 118  	  var_ext_source_log_id := in_ext_source_log_id;
14:28:21 119  	END IF;
14:28:21 120  	INSERT INTO
14:28:21 121  	  RCN_EXT_SOURCE_LOG (
14:28:21 122  	    id,
14:28:21 123  	    extraction_timestamp,
14:28:21 124  	    report_date,
14:28:21 125  	    report_generation_datetime,
14:28:21 126  	    record_type,
14:28:21 127  	    report_file_name,
14:28:21 128  	    create_date,
14:28:21 129  	    created_by
14:28:21 130  	  ) VALUES (
14:28:21 131  	    var_ext_source_log_id,
14:28:21 132  	    in_extraction_timestamp,
14:28:21 133  	    in_report_date,
14:28:21 134  	    in_report_gen_datetime,
14:28:21 135  	    in_record_type,
14:28:21 136  	    in_report_file_name,
14:28:21 137  	    var_date,
14:28:21 138  	    in_created_by
14:28:21 139  	  );
14:28:21 140  
14:28:21 141  	out_ext_source_log_id := var_ext_source_log_id;
14:28:21 142  END CREATE_EXT_SOURCE_LOG;
14:28:21 143  
14:28:21 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
14:28:21 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
14:28:21 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
14:28:21 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:21 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
14:28:21 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
14:28:21 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
14:28:21 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
14:28:21 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
14:28:21 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
14:28:21 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
14:28:21 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
14:28:21 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
14:28:21 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
14:28:21 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
14:28:21 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
14:28:21 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
14:28:21 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
14:28:21 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
14:28:21 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
14:28:21 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
14:28:21 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
14:28:21 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
14:28:21 167  ) AS
14:28:21 168  -- VARIABLES
14:28:21 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
14:28:21 170  var_date DATE := SYSDATE;
14:28:21 171  BEGIN
14:28:21 172  	IF in_cpt_service_charge_id IS NULL THEN
14:28:21 173  	  SELECT
14:28:21 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
14:28:21 175  	  FROM DUAL;
14:28:21 176  	ELSE
14:28:21 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
14:28:21 178  	END IF;
14:28:21 179  	INSERT INTO
14:28:21 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
14:28:21 181  	    id,
14:28:21 182  	    rcn_ext_source_log_id,
14:28:21 183  	    record_type,
14:28:21 184  	    category,
14:28:21 185  	    sub_category,
14:28:21 186  	    entity_type,
14:28:21 187  	    entity_number,
14:28:21 188  	    funds_transfer_inst_number,
14:28:21 189  	    secure_ba_number,
14:28:21 190  	    settlement_currency,
14:28:21 191  	    fee_schedule,
14:28:21 192  	    mop,
14:28:21 193  	    interchange_qualification,
14:28:21 194  	    fee_type_description,
14:28:21 195  	    action_type,
14:28:21 196  	    unit_quantity,
14:28:21 197  	    unit_fee,
14:28:21 198  	    amount,
14:28:21 199  	    percentage_rate,
14:28:21 200  	    total_charge,
14:28:21 201  	    create_date,
14:28:21 202  	    created_by
14:28:21 203  	  ) VALUES (
14:28:21 204  	    var_cpt_service_charge_id,
14:28:21 205  	    in_ext_source_log_id,
14:28:21 206  	    in_record_type,
14:28:21 207  	    in_category,
14:28:21 208  	    in_sub_category,
14:28:21 209  	    in_entity_type,
14:28:21 210  	    in_entity_number,
14:28:21 211  	    in_funds_trans_inst_number,
14:28:21 212  	    in_secure_ba_number,
14:28:21 213  	    in_settlement_currency,
14:28:21 214  	    in_fee_schedule,
14:28:21 215  	    in_mop,
14:28:21 216  	    in_interchange_qual,
14:28:21 217  	    in_fee_type_description,
14:28:21 218  	    in_action_type,
14:28:21 219  	    in_unit_quantity,
14:28:21 220  	    in_unit_fee,
14:28:21 221  	    in_amount,
14:28:21 222  	    in_percentage_rate,
14:28:21 223  	    in_total_charge,
14:28:21 224  	    var_date,
14:28:21 225  	    in_created_by
14:28:21 226  	  );
14:28:21 227  
14:28:21 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
14:28:21 229  END CREATE_CPT_SERVICE_CHARGE;
14:28:21 230  
14:28:21 231  PROCEDURE CREATE_CPT_EXCEPTION (
14:28:21 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
14:28:21 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
14:28:21 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:21 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
14:28:21 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
14:28:21 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
14:28:21 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
14:28:21 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
14:28:21 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
14:28:21 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
14:28:21 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
14:28:21 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:28:21 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:28:21 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
14:28:21 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
14:28:21 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
14:28:21 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
14:28:21 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
14:28:21 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
14:28:21 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
14:28:21 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
14:28:21 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
14:28:21 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
14:28:21 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
14:28:21 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
14:28:21 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
14:28:21 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
14:28:21 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
14:28:21 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
14:28:21 261  ) AS
14:28:21 262  -- VARIABLES
14:28:21 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
14:28:21 264  var_date DATE := SYSDATE;
14:28:21 265  BEGIN
14:28:21 266  	IF in_cpt_exception_id IS NULL THEN
14:28:21 267  	  SELECT
14:28:21 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
14:28:21 269  	  FROM DUAL;
14:28:21 270  	ELSE
14:28:21 271  	  var_cpt_exception_id := in_cpt_exception_id;
14:28:21 272  	END IF;
14:28:21 273  	INSERT INTO
14:28:21 274  	  RCN_CPT_EXCEPTION_DETAIL (
14:28:21 275  	    id,
14:28:21 276  	    rcn_ext_source_log_id,
14:28:21 277  	    record_type,
14:28:21 278  	    submission_date,
14:28:21 279  	    pid_number,
14:28:21 280  	    pid_short_name,
14:28:21 281  	    submission_number,
14:28:21 282  	    record_number,
14:28:21 283  	    entity_type,
14:28:21 284  	    entity_number,
14:28:21 285  	    presentment_currency,
14:28:21 286  	    merchant_order_number,
14:28:21 287  	    rdfi_number,
14:28:21 288  	    account_number,
14:28:21 289  	    expiration_date,
14:28:21 290  	    amount,
14:28:21 291  	    mop,
14:28:21 292  	    action_code,
14:28:21 293  	    auth_date,
14:28:21 294  	    auth_code,
14:28:21 295  	    auth_response_code,
14:28:21 296  	    trace_number,
14:28:21 297  	    consumer_country_code,
14:28:21 298  	    category,
14:28:21 299  	    mcc,
14:28:21 300  	    reject_code,
14:28:21 301  	    submission_status,
14:28:21 302  	    create_date,
14:28:21 303  	    created_by
14:28:21 304  	  ) VALUES (
14:28:21 305  	    var_cpt_exception_id,
14:28:21 306  	    in_ext_source_log_id,
14:28:21 307  	    in_record_type,
14:28:21 308  	    in_submission_date,
14:28:21 309  	    in_pid_number,
14:28:21 310  	    in_pid_short_name,
14:28:21 311  	    in_submission_number,
14:28:21 312  	    in_record_number,
14:28:21 313  	    in_entity_type,
14:28:21 314  	    in_entity_number,
14:28:21 315  	    in_presentment_currency,
14:28:21 316  	    in_merchant_order_number,
14:28:21 317  	    in_rdfi_number,
14:28:21 318  	    in_account_number,
14:28:21 319  	    in_expiration_date,
14:28:21 320  	    in_amount,
14:28:21 321  	    in_mop,
14:28:21 322  	    in_action_code,
14:28:21 323  	    in_auth_date,
14:28:21 324  	    in_auth_code,
14:28:21 325  	    in_auth_response_code,
14:28:21 326  	    in_trace_number,
14:28:21 327  	    in_consumer_country_code,
14:28:21 328  	    in_category,
14:28:21 329  	    in_mcc,
14:28:21 330  	    in_reject_code,
14:28:21 331  	    in_submission_status,
14:28:21 332  	    var_date,
14:28:21 333  	    in_created_by
14:28:21 334  	  );
14:28:21 335  
14:28:21 336  	out_cpt_exception_id := var_cpt_exception_id;
14:28:21 337  END CREATE_CPT_EXCEPTION;
14:28:21 338  
14:28:21 339  PROCEDURE CREATE_CPT_DEPOSIT (
14:28:21 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
14:28:21 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
14:28:21 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:21 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
14:28:21 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
14:28:21 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
14:28:21 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
14:28:21 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
14:28:21 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
14:28:21 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
14:28:21 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
14:28:21 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
14:28:21 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
14:28:21 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
14:28:21 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
14:28:21 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
14:28:21 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
14:28:21 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
14:28:21 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
14:28:21 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
14:28:21 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
14:28:21 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
14:28:21 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
14:28:21 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
14:28:21 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
14:28:21 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
14:28:21 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
14:28:21 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
14:28:21 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
14:28:21 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
14:28:21 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
14:28:21 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
14:28:21 372  ) AS
14:28:21 373  -- VARIABLES
14:28:21 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
14:28:21 375  var_date DATE := SYSDATE;
14:28:21 376  BEGIN
14:28:21 377  	IF in_cpt_deposit_id IS NULL THEN
14:28:21 378  	  SELECT
14:28:21 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
14:28:21 380  	  FROM DUAL;
14:28:21 381  	ELSE
14:28:21 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
14:28:21 383  	END IF;
14:28:21 384  	INSERT INTO
14:28:21 385  	  RCN_CPT_DEPOSIT_DETAIL (
14:28:21 386  	    id,
14:28:21 387  	    rcn_ext_source_log_id,
14:28:21 388  	    record_type,
14:28:21 389  	    submission_date,
14:28:21 390  	    pid_number,
14:28:21 391  	    pid_short_name,
14:28:21 392  	    submission_number,
14:28:21 393  	    record_number,
14:28:21 394  	    entity_type,
14:28:21 395  	    entity_number,
14:28:21 396  	    presentment_currency,
14:28:21 397  	    merchant_order_number,
14:28:21 398  	    rdfi_number,
14:28:21 399  	    account_number,
14:28:21 400  	    expiration_date,
14:28:21 401  	    amount,
14:28:21 402  	    mop,
14:28:21 403  	    action_code,
14:28:21 404  	    auth_date,
14:28:21 405  	    auth_code,
14:28:21 406  	    auth_response_code,
14:28:21 407  	    trace_number,
14:28:21 408  	    consumer_country_code,
14:28:21 409  	    mcc,
14:28:21 410  	    fee_code,
14:28:21 411  	    unit_fee,
14:28:21 412  	    percent_fee,
14:28:21 413  	    total_interchange_fee,
14:28:21 414  	    total_assessment_fee,
14:28:21 415  	    other_fee,
14:28:21 416  	    create_date,
14:28:21 417  	    created_by
14:28:21 418  	  ) VALUES (
14:28:21 419  	    var_cpt_deposit_id,
14:28:21 420  	    in_ext_source_log_id,
14:28:21 421  	    in_record_type,
14:28:21 422  	    in_submission_date,
14:28:21 423  	    in_pid_number,
14:28:21 424  	    in_pid_short_name,
14:28:21 425  	    in_submission_number,
14:28:21 426  	    in_record_number,
14:28:21 427  	    in_entity_type,
14:28:21 428  	    in_entity_number,
14:28:21 429  	    in_presentment_currency,
14:28:21 430  	    in_merchant_order_number,
14:28:21 431  	    in_rdfi_number,
14:28:21 432  	    in_account_number,
14:28:21 433  	    in_expiration_date,
14:28:21 434  	    in_amount,
14:28:21 435  	    in_mop,
14:28:21 436  	    in_action_code,
14:28:21 437  	    in_auth_date,
14:28:21 438  	    in_auth_code,
14:28:21 439  	    in_auth_response_code,
14:28:21 440  	    in_trace_number,
14:28:21 441  	    in_consumer_country_code,
14:28:21 442  	    in_mcc,
14:28:21 443  	    in_fee_code,
14:28:21 444  	    in_unit_fee,
14:28:21 445  	    in_percent_fee,
14:28:21 446  	    in_total_interchange_fee,
14:28:21 447  	    in_total_assessment_fee,
14:28:21 448  	    in_other_fee,
14:28:21 449  	    var_date,
14:28:21 450  	    in_created_by
14:28:21 451  	  );
14:28:21 452  
14:28:21 453  	out_cpt_deposit_id := var_cpt_deposit_id;
14:28:21 454  END CREATE_CPT_DEPOSIT;
14:28:21 455  
14:28:21 456  PROCEDURE CREATE_PP_SETTLEMENT (
14:28:21 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
14:28:21 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
14:28:21 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:21 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
14:28:21 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
14:28:21 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
14:28:21 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
14:28:21 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
14:28:21 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
14:28:21 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
14:28:21 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
14:28:21 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
14:28:21 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
14:28:21 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
14:28:21 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
14:28:21 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
14:28:21 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
14:28:21 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
14:28:21 475  ) AS
14:28:21 476  -- VARIABLES
14:28:21 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
14:28:21 478  var_date DATE := SYSDATE;
14:28:21 479  BEGIN
14:28:21 480  	IF in_pp_settlement_id IS NULL THEN
14:28:21 481  	  SELECT
14:28:21 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
14:28:21 483  	  FROM DUAL;
14:28:21 484  	ELSE
14:28:21 485  	  var_pp_settlement_id := in_pp_settlement_id;
14:28:21 486  	END IF;
14:28:21 487  	INSERT INTO
14:28:21 488  	  RCN_PP_SETTLEMENT (
14:28:21 489  	    id,
14:28:21 490  	    rcn_ext_source_log_id,
14:28:21 491  	    transaction_id,
14:28:21 492  	    invoice_id,
14:28:21 493  	    pp_ref_id,
14:28:21 494  	    pp_ref_id_type,
14:28:21 495  	    trans_event_code,
14:28:21 496  	    trans_init_date,
14:28:21 497  	    trans_comp_date,
14:28:21 498  	    trans_deb_or_cred,
14:28:21 499  	    gross_trans_amount,
14:28:21 500  	    gross_trans_currency,
14:28:21 501  	    fee_deb_or_cred,
14:28:21 502  	    fee_amount,
14:28:21 503  	    fee_currency,
14:28:21 504  	    custom_field,
14:28:21 505  	    create_date,
14:28:21 506  	    created_by
14:28:21 507  	  ) VALUES (
14:28:21 508  	    var_pp_settlement_id,
14:28:21 509  	    in_ext_source_log_id,
14:28:21 510  	    in_transaction_id,
14:28:21 511  	    in_invoice_id,
14:28:21 512  	    in_pp_ref_id,
14:28:21 513  	    in_pp_ref_id_type,
14:28:21 514  	    in_trans_event_code,
14:28:21 515  	    in_trans_init_date,
14:28:21 516  	    in_trans_comp_date,
14:28:21 517  	    in_trans_deb_or_cred,
14:28:21 518  	    in_gross_trans_amount,
14:28:21 519  	    in_gross_trans_currency,
14:28:21 520  	    in_fee_deb_or_cred,
14:28:21 521  	    in_fee_amount,
14:28:21 522  	    in_fee_currency,
14:28:21 523  	    in_custom_field,
14:28:21 524  	    var_date,
14:28:21 525  	    in_created_by
14:28:21 526  	  );
14:28:21 527  
14:28:21 528  	out_pp_settlement_id := var_pp_settlement_id;
14:28:21 529  END CREATE_PP_SETTLEMENT;
14:28:21 530  
14:28:21 531  PROCEDURE CREATE_PP_DISPUTE (
14:28:21 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
14:28:21 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
14:28:21 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:21 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
14:28:21 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
14:28:21 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
14:28:21 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
14:28:21 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
14:28:21 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
14:28:21 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
14:28:21 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
14:28:21 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
14:28:21 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
14:28:21 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
14:28:21 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
14:28:21 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
14:28:21 548  ) AS
14:28:21 549  -- VARIABLES
14:28:21 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
14:28:21 551  var_date DATE := SYSDATE;
14:28:21 552  BEGIN
14:28:21 553  	IF in_pp_dispute_id IS NULL THEN
14:28:21 554  	  SELECT
14:28:21 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
14:28:21 556  	  FROM DUAL;
14:28:21 557  	ELSE
14:28:21 558  	  var_pp_dispute_id := in_pp_dispute_id;
14:28:21 559  	END IF;
14:28:21 560  	INSERT INTO
14:28:21 561  	  RCN_PP_DISPUTE (
14:28:21 562  	    id,
14:28:21 563  	    rcn_ext_source_log_id,
14:28:21 564  	    dispute_type,
14:28:21 565  	    claimant_name,
14:28:21 566  	    claimant_email,
14:28:21 567  	    transaction_id,
14:28:21 568  	    trans_date,
14:28:21 569  	    disputed_amount,
14:28:21 570  	    disputed_amount_currency,
14:28:21 571  	    dispute_reason,
14:28:21 572  	    dispute_filing_date,
14:28:21 573  	    dispute_status,
14:28:21 574  	    dispute_case_id,
14:28:21 575  	    invoice_id,
14:28:21 576  	    create_date,
14:28:21 577  	    created_by
14:28:21 578  	  ) VALUES (
14:28:21 579  	    var_pp_dispute_id,
14:28:21 580  	    in_ext_source_log_id,
14:28:21 581  	    in_dispute_type,
14:28:21 582  	    in_claimant_name,
14:28:21 583  	    in_claimant_email,
14:28:21 584  	    in_transaction_id,
14:28:21 585  	    in_trans_date,
14:28:21 586  	    in_disputed_amount,
14:28:21 587  	    in_disputed_amount_currency,
14:28:21 588  	    in_dispute_reason,
14:28:21 589  	    in_dispute_filing_date,
14:28:21 590  	    in_dispute_status,
14:28:21 591  	    in_dispute_case_id,
14:28:21 592  	    in_invoice_id,
14:28:21 593  	    var_date,
14:28:21 594  	    in_created_by
14:28:21 595  	  );
14:28:21 596  
14:28:21 597  	out_pp_dispute_id := var_pp_dispute_id;
14:28:21 598  END CREATE_PP_DISPUTE;
14:28:21 599  
14:28:21 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
14:28:21 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
14:28:21 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
14:28:21 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
14:28:21 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
14:28:21 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
14:28:21 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
14:28:21 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
14:28:21 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
14:28:21 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
14:28:21 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
14:28:21 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
14:28:21 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
14:28:21 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
14:28:21 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
14:28:21 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
14:28:21 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
14:28:21 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
14:28:21 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
14:28:21 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
14:28:21 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
14:28:21 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
14:28:21 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
14:28:21 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
14:28:21 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
14:28:21 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
14:28:21 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
14:28:21 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
14:28:21 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
14:28:21 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
14:28:21 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
14:28:21 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
14:28:21 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
14:28:21 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
14:28:21 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
14:28:21 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
14:28:21 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
14:28:21 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
14:28:21 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
14:28:21 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
14:28:21 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
14:28:21 641  ) AS
14:28:21 642  -- VARIABLES
14:28:21 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
14:28:21 644  var_date DATE := SYSDATE;
14:28:21 645  BEGIN
14:28:21 646  	IF in_pp_trans_detail_id IS NULL THEN
14:28:21 647  	  SELECT
14:28:21 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
14:28:21 649  	  FROM DUAL;
14:28:21 650  	ELSE
14:28:21 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
14:28:21 652  	END IF;
14:28:21 653  	INSERT INTO
14:28:21 654  	  RCN_PP_TRANS_DETAIL (
14:28:21 655  	    id,
14:28:21 656  	    rcn_ext_source_log_id,
14:28:21 657  	    transaction_id,
14:28:21 658  	    invoice_id,
14:28:21 659  	    pp_ref_id,
14:28:21 660  	    trans_event_code,
14:28:21 661  	    trans_init_date,
14:28:21 662  	    trans_comp_date,
14:28:21 663  	    trans_deb_or_cred,
14:28:21 664  	    gross_trans_amount,
14:28:21 665  	    gross_trans_currency,
14:28:21 666  	    fee_deb_or_cred,
14:28:21 667  	    fee_amount,
14:28:21 668  	    fee_currency,
14:28:21 669  	    trans_status,
14:28:21 670  	    insurance_amount,
14:28:21 671  	    sales_tax_amount,
14:28:21 672  	    shipping_amount,
14:28:21 673  	    trans_subject,
14:28:21 674  	    trans_note,
14:28:21 675  	    payer_acct_id,
14:28:21 676  	    payer_addr_status,
14:28:21 677  	    item_name,
14:28:21 678  	    item_id,
14:28:21 679  	    option_1_name,
14:28:21 680  	    option_1_value,
14:28:21 681  	    option_2_name,
14:28:21 682  	    option_2_value,
14:28:21 683  	    auction_site,
14:28:21 684  	    auction_buyer_id,
14:28:21 685  	    auction_closing_date,
14:28:21 686  	    shipping_addr_line_1,
14:28:21 687  	    shipping_addr_line_2,
14:28:21 688  	    shipping_addr_city,
14:28:21 689  	    shipping_addr_state,
14:28:21 690  	    shipping_addr_zip,
14:28:21 691  	    shipping_addr_country,
14:28:21 692  	    custom_field,
14:28:21 693  	    create_date,
14:28:21 694  	    created_by
14:28:21 695  	  ) VALUES (
14:28:21 696  	    var_pp_trans_detail_id,
14:28:21 697  	    in_ext_source_log_id,
14:28:21 698  	    in_transaction_id,
14:28:21 699  	    in_invoice_id,
14:28:21 700  	    in_pp_ref_id,
14:28:21 701  	    in_trans_event_code,
14:28:21 702  	    in_trans_init_date,
14:28:21 703  	    in_trans_comp_date,
14:28:21 704  	    in_trans_deb_or_cred,
14:28:21 705  	    in_gross_trans_amount,
14:28:21 706  	    in_gross_trans_currency,
14:28:21 707  	    in_fee_deb_or_cred,
14:28:21 708  	    in_fee_amount,
14:28:21 709  	    in_fee_currency,
14:28:21 710  	    in_trans_status,
14:28:21 711  	    in_insurance_amount,
14:28:21 712  	    in_sales_tax_amount,
14:28:21 713  	    in_shipping_amount,
14:28:21 714  	    in_trans_subject,
14:28:21 715  	    in_trans_note,
14:28:21 716  	    in_payer_acct_id,
14:28:21 717  	    in_payer_addr_status,
14:28:21 718  	    in_item_name,
14:28:21 719  	    in_item_id,
14:28:21 720  	    in_option_1_name,
14:28:21 721  	    in_option_1_value,
14:28:21 722  	    in_option_2_name,
14:28:21 723  	    in_option_2_value,
14:28:21 724  	    in_auction_site,
14:28:21 725  	    in_auction_buyer_id,
14:28:21 726  	    in_auction_closing_date,
14:28:21 727  	    in_shipping_addr_line_1,
14:28:21 728  	    in_shipping_addr_line_2,
14:28:21 729  	    in_shipping_addr_city,
14:28:21 730  	    in_shipping_addr_state,
14:28:21 731  	    in_shipping_addr_zip,
14:28:21 732  	    in_shipping_addr_country,
14:28:21 733  	    in_custom_field,
14:28:21 734  	    var_date,
14:28:21 735  	    in_created_by
14:28:21 736  	  );
14:28:21 737  
14:28:21 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
14:28:21 739  END CREATE_PP_TRANS_DETAIL;
14:28:21 740  
14:28:21 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
14:28:21 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:28:21 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
14:28:21 744  ) AS
14:28:21 745  BEGIN
14:28:21 746  	DELETE FROM
14:28:21 747  	  RCN_EXT_SOURCE_LOG
14:28:21 748  	WHERE
14:28:21 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
14:28:21 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
14:28:21 751  END DELETE_EXT_SOURCE_LOG;
14:28:21 752  
14:28:21 753  PROCEDURE GET_EXT_SOURCE_LOG (
14:28:21 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:28:21 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
14:28:21 756  	out_result_set		 OUT SYS_REFCURSOR
14:28:21 757  ) AS
14:28:21 758  BEGIN
14:28:21 759  	OPEN out_result_set FOR
14:28:21 760  	SELECT * FROM
14:28:21 761  	  RCN_EXT_SOURCE_LOG
14:28:21 762  	WHERE
14:28:21 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
14:28:21 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
14:28:21 765  END GET_EXT_SOURCE_LOG;
14:28:21 766  
14:28:21 767  FUNCTION CHECK_EXT_SOURCE_LOG (
14:28:21 768  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
14:28:21 769  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
14:28:21 770  ) RETURN NUMBER AS
14:28:21 771  var_exists NUMBER;
14:28:21 772  BEGIN
14:28:21 773  	SELECT count(1) INTO var_exists
14:28:21 774  	FROM
14:28:21 775  	  RCN_EXT_SOURCE_LOG
14:28:21 776  	WHERE
14:28:21 777  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
14:28:21 778  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
14:28:21 779  
14:28:21 780  	IF var_exists > 1 THEN
14:28:21 781  	  var_exists := 1;
14:28:21 782  	END IF;
14:28:21 783  
14:28:21 784  	RETURN var_exists;
14:28:21 785  END;
14:28:21 786  
14:28:21 787  PROCEDURE CREATE_AMEX_CHARGEBACK (
14:28:21 788  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
14:28:21 789  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
14:28:21 790  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
14:28:21 791  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
14:28:21 792  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
14:28:21 793  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
14:28:21 794  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
14:28:21 795  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
14:28:21 796  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
14:28:21 797  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
14:28:21 798  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
14:28:21 799  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
14:28:21 800  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
14:28:21 801  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
14:28:21 802  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
14:28:21 803  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
14:28:21 804  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
14:28:21 805  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
14:28:21 806  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
14:28:21 807  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
14:28:21 808  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
14:28:21 809  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
14:28:21 810  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
14:28:21 811  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
14:28:21 812  ) AS
14:28:21 813  var_amex_chargeback_id RCN_AMEX_CHARGEBACK.ID%TYPE;
14:28:21 814  var_date DATE := SYSDATE;
14:28:21 815  BEGIN
14:28:21 816  	SELECT
14:28:21 817  	  RCNAMEXCB_ID_SEQ.nextVal into var_amex_chargeback_id
14:28:21 818  	FROM DUAL;
14:28:21 819  
14:28:21 820  	INSERT INTO
14:28:21 821  	  RCN_AMEX_CHARGEBACK (
14:28:21 822  	    id,
14:28:21 823  	    rcn_ext_source_log_id,
14:28:21 824  	    resolution,
14:28:21 825  	    from_system,
14:28:21 826  	    rejects_to_system,
14:28:21 827  	    disputes_to_system,
14:28:21 828  	    date_of_adjustment,
14:28:21 829  	    date_of_charge,
14:28:21 830  	    case_type,
14:28:21 831  	    cb_reas_code,
14:28:21 832  	    cb_amount,
14:28:21 833  	    cb_adjustment_number,
14:28:21 834  	    billed_amount,
14:28:21 835  	    soc_amount,
14:28:21 836  	    foreign_amount,
14:28:21 837  	    currency,
14:28:21 838  	    note1,
14:28:21 839  	    note2,
14:28:21 840  	    note3,
14:28:21 841  	    note4,
14:28:21 842  	    note5,
14:28:21 843  	    note6,
14:28:21 844  	    note7,
14:28:21 845  	    ind_ref_number,
14:28:21 846  	    create_date,
14:28:21 847  	    created_by,
14:28:21 848  	    update_date,
14:28:21 849  	    updated_by
14:28:21 850  	  ) VALUES (
14:28:21 851  	    var_amex_chargeback_id,
14:28:21 852  	    in_rcn_ext_source_log_id,
14:28:21 853  	    in_resolution,
14:28:21 854  	    in_from_system,
14:28:21 855  	    in_rejects_to_system,
14:28:21 856  	    in_disputes_to_system,
14:28:21 857  	    in_date_of_adjustment,
14:28:21 858  	    in_date_of_charge,
14:28:21 859  	    in_case_type,
14:28:21 860  	    in_cb_reas_code,
14:28:21 861  	    in_cb_amount,
14:28:21 862  	    in_cb_adjustment_number,
14:28:21 863  	    in_billed_amount,
14:28:21 864  	    in_soc_amount,
14:28:21 865  	    in_foreign_amount,
14:28:21 866  	    in_currency,
14:28:21 867  	    in_note1,
14:28:21 868  	    in_note2,
14:28:21 869  	    in_note3,
14:28:21 870  	    in_note4,
14:28:21 871  	    in_note5,
14:28:21 872  	    in_note6,
14:28:21 873  	    in_note7,
14:28:21 874  	    in_ind_ref_number,
14:28:21 875  	    var_date,
14:28:21 876  	    in_created_by,
14:28:21 877  	    var_date,
14:28:21 878  	    in_created_by
14:28:21 879  	  );
14:28:21 880  
14:28:21 881  END CREATE_AMEX_CHARGEBACK;
14:28:21 882  
14:28:21 883  END PROCS_RECONCILIATION_CRU_V23;
14:28:21 884  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.07
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_subscription_cru.sql
Compiling body for procs_subscription_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_SUBSCRIPTION(
14:28:21   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
14:28:21   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
14:28:21   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
14:28:21   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
14:28:21   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
14:28:21  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
14:28:21  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
14:28:21  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
14:28:21  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
14:28:21  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
14:28:21  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
14:28:21  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
14:28:21  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
14:28:21  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
14:28:21  19  ) AS
14:28:21  20  -- VARIABLES
14:28:21  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
14:28:21  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21  23  var_date DATE := SYSDATE;
14:28:21  24  BEGIN
14:28:21  25  	IF in_subscription_id IS NULL THEN
14:28:21  26  	  SELECT
14:28:21  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
14:28:21  28  	  FROM DUAL;
14:28:21  29  	ELSE
14:28:21  30  	  var_new_subscription_id := in_subscription_id;
14:28:21  31  	END IF;
14:28:21  32  	INSERT INTO SUBSCRIPTION (
14:28:21  33  	  ID,
14:28:21  34  	  SUSPEND_DATE,
14:28:21  35  	  ACCOUNT_ID,
14:28:21  36  	  PURCHASE_DATE,
14:28:21  37  	  OFFER_CHAIN_ID,
14:28:21  38  	  TERMINATION_DATE,
14:28:21  39  	  DAYS_REMAINING_ADJUSTMENT,
14:28:21  40  	  SCT_ID,
14:28:21  41  	  CREATE_DATE,
14:28:21  42  	  CREATED_BY,
14:28:21  43  	  UPDATE_DATE,
14:28:21  44  	  UPDATED_BY,
14:28:21  45  	  INSTRUMENT_TYPE_ID,
14:28:21  46  	  INSTRUMENT_ID,
14:28:21  47  	  SUBSCRIPTION_STATUS_ID,
14:28:21  48  	  CANCELLATION_DATE,
14:28:21  49  	  REACTIVATION_DATE
14:28:21  50  	) VALUES (
14:28:21  51  	  var_new_subscription_id,
14:28:21  52  	  in_suspend_date,
14:28:21  53  	  in_account_id,
14:28:21  54  	  in_purchase_date,
14:28:21  55  	  in_offer_chain_id,
14:28:21  56  	  in_termination_date,
14:28:21  57  	  in_days_remainning_ajustment,
14:28:21  58  	  in_sct_id,
14:28:21  59  	  var_date,
14:28:21  60  	  in_created_by,
14:28:21  61  	  var_date,
14:28:21  62  	  in_created_by,
14:28:21  63  	  in_instrument_type_id,
14:28:21  64  	  in_instrument_id,
14:28:21  65  	  in_subscription_status_id,
14:28:21  66  	  in_cancelation_date,
14:28:21  67  	  in_reactivation_date
14:28:21  68  	);
14:28:21  69  
14:28:21  70  	out_subscription_id := var_new_subscription_id;
14:28:21  71  END CREATE_SUBSCRIPTION;
14:28:21  72  
14:28:21  73  /******************************************************************************/
14:28:21  74  
14:28:21  75  PROCEDURE UPDATE_SUBSCRIPTION(
14:28:21  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
14:28:21  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
14:28:21  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
14:28:21  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
14:28:21  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
14:28:21  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
14:28:21  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
14:28:21  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
14:28:21  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
14:28:21  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
14:28:21  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
14:28:21  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
14:28:21  88  ) AS
14:28:21  89  BEGIN
14:28:21  90  	-- Create history
14:28:21  91  	PROCS_HISTORY_V23.CREATE_SUBSCRIPTION_HISTORY(
14:28:21  92  	  in_subscription_id	       => in_subscription_id,
14:28:21  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21  94  	);
14:28:21  95  
14:28:21  96  	UPDATE SUBSCRIPTION SET
14:28:21  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
14:28:21  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
14:28:21  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
14:28:21 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
14:28:21 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
14:28:21 102  	  UPDATE_DATE		    = SYSDATE,
14:28:21 103  	  UPDATED_BY		    = in_updated_by,
14:28:21 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
14:28:21 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
14:28:21 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
14:28:21 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
14:28:21 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
14:28:21 109  	WHERE
14:28:21 110  	  ID = in_subscription_id;
14:28:21 111  END UPDATE_SUBSCRIPTION;
14:28:21 112  
14:28:21 113  /******************************************************************************/
14:28:21 114  
14:28:21 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
14:28:21 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
14:28:21 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:28:21 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
14:28:21 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:28:21 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
14:28:21 121  ) AS
14:28:21 122  BEGIN
14:28:21 123  	IF inout_subscription_note_id IS NULL THEN
14:28:21 124  	  SELECT
14:28:21 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
14:28:21 126  	  FROM DUAL;
14:28:21 127  	END IF;
14:28:21 128  	INSERT INTO SUBSCRIPTION_NOTE (
14:28:21 129  	  ID,
14:28:21 130  	  AGENT_ID,
14:28:21 131  	  SUBSCRIPTION_ID,
14:28:21 132  	  NOTE,
14:28:21 133  	  CREATE_DATE,
14:28:21 134  	  CREATED_BY
14:28:21 135  	) VALUES (
14:28:21 136  	  inout_subscription_note_id,
14:28:21 137  	  in_agent_id,
14:28:21 138  	  in_subscription_id,
14:28:21 139  	  in_note,
14:28:21 140  	  SYSDATE,
14:28:21 141  	  in_created_by
14:28:21 142  	);
14:28:21 143  END CREATE_SUBSCRIPTION_NOTE;
14:28:21 144  
14:28:21 145  END PROCS_SUBSCRIPTION_CRU_V23;
14:28:21 146  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_taxes_cru.sql
Compiling body for procs_taxes_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_TAX (
14:28:21   4  	inout_tax_id		 IN OUT NUMBER,
14:28:21   5  	in_tax_type_id		 IN NUMBER,
14:28:21   6  	in_calculated_amount	 IN NUMBER,
14:28:21   7  	in_created_by		 IN VARCHAR2,
14:28:21   8  	in_line_item_id 	 IN NUMBER,
14:28:21   9  	in_effective_rate	 IN VARCHAR2,
14:28:21  10  	in_taxable_amount	 IN NUMBER,
14:28:21  11  	in_tax_rule_id		 IN NUMBER,
14:28:21  12  	in_jurisdiction_level_id IN NUMBER,
14:28:21  13  	in_jurisdiction_name	 IN VARCHAR2,
14:28:21  14  	in_jurisdiction_id	 IN VARCHAR2,
14:28:21  15  	in_ext_tax_type 	 IN VARCHAR2,
14:28:21  16  	in_ext_result		 IN VARCHAR2,
14:28:21  17  	in_imposition_type	 IN VARCHAR2,
14:28:21  18  	in_imposition		 IN VARCHAR2
14:28:21  19  ) AS
14:28:21  20  var_date DATE := SYSDATE;
14:28:21  21  BEGIN
14:28:21  22  
14:28:21  23  	IF inout_tax_id IS NULL THEN
14:28:21  24  	  SELECT
14:28:21  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
14:28:21  26  	  FROM DUAL;
14:28:21  27  	END IF;
14:28:21  28  
14:28:21  29  	INSERT INTO TAX (
14:28:21  30  	  ID,
14:28:21  31  	  TAX_TYPE_ID,
14:28:21  32  	  CALCULATED_AMOUNT,
14:28:21  33  	  CREATE_DATE,
14:28:21  34  	  CREATED_BY,
14:28:21  35  	  LINE_ITEM_ID,
14:28:21  36  	  EFFECTIVE_RATE,
14:28:21  37  	  TAXABLE_AMOUNT,
14:28:21  38  	  TAX_RULE_ID,
14:28:21  39  	  JURISDICTION_LEVEL_ID,
14:28:21  40  	  JURISDICTION_NAME,
14:28:21  41  	  JURISDICTION_ID,
14:28:21  42  	  EXT_TAX_TYPE,
14:28:21  43  	  EXT_RESULT,
14:28:21  44  	  IMPOSITION_TYPE,
14:28:21  45  	  IMPOSITION
14:28:21  46  	) VALUES (
14:28:21  47  	  inout_tax_id,
14:28:21  48  	  in_tax_type_id,
14:28:21  49  	  in_calculated_amount,
14:28:21  50  	  var_date,
14:28:21  51  	  in_created_by,
14:28:21  52  	  in_line_item_id,
14:28:21  53  	  in_effective_rate,
14:28:21  54  	  in_taxable_amount,
14:28:21  55  	  in_tax_rule_id,
14:28:21  56  	  in_jurisdiction_level_id,
14:28:21  57  	  in_jurisdiction_name,
14:28:21  58  	  in_jurisdiction_id,
14:28:21  59  	  in_ext_tax_type,
14:28:21  60  	  in_ext_result,
14:28:21  61  	  in_imposition_type,
14:28:21  62  	  in_imposition
14:28:21  63  	);
14:28:21  64  
14:28:21  65  END CREATE_TAX;
14:28:21  66  
14:28:21  67  END PROCS_TAXES_CRU_V23;
14:28:21  68  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_transaction_cru.sql
Compiling body for procs_transaction_cru.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_TRANSACTION (
14:28:21   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
14:28:21   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
14:28:21   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
14:28:21   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
14:28:21   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
14:28:21   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
14:28:21  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V23.FALSE,
14:28:21  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
14:28:21  12  ) AS
14:28:21  13  -- VARIABLES
14:28:21  14  var_transaction_id TRANSACTION.ID%TYPE;
14:28:21  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:21  16  var_date DATE := SYSDATE;
14:28:21  17  BEGIN
14:28:21  18  	IF in_transaction_id IS NULL THEN
14:28:21  19  	  SELECT
14:28:21  20  	    TRN_ID_SEQ.nextVal into var_transaction_id
14:28:21  21  	  FROM DUAL;
14:28:21  22  	ELSE
14:28:21  23  	  var_transaction_id := in_transaction_id;
14:28:21  24  	END IF;
14:28:21  25  	INSERT INTO
14:28:21  26  	  TRANSACTION (
14:28:21  27  	    ID,
14:28:21  28  	    TRANSACTION_STATUS_ID,
14:28:21  29  	    TRANSACTION_AMOUNT,
14:28:21  30  	    CREATE_DATE,
14:28:21  31  	    CREATED_BY,
14:28:21  32  	    UPDATE_DATE,
14:28:21  33  	    UPDATED_BY,
14:28:21  34  	    ORDER_ID,
14:28:21  35  	    IS_REFUND,
14:28:21  36  	    TRANSACTION_TYPE_CODE
14:28:21  37  	  ) VALUES (
14:28:21  38  	    var_transaction_id,
14:28:21  39  	    in_transaction_status_id,
14:28:21  40  	    in_transaction_amount,
14:28:21  41  	    var_date,
14:28:21  42  	    in_created_by,
14:28:21  43  	    var_date,
14:28:21  44  	    in_created_by,
14:28:21  45  	    in_order_id,
14:28:21  46  	    in_is_refund,
14:28:21  47  	    in_transaction_type_code
14:28:21  48  	  );
14:28:21  49  
14:28:21  50  	out_transaction_id := var_transaction_id;
14:28:21  51  END CREATE_TRANSACTION;
14:28:21  52  
14:28:21  53  /*******************************************************************/
14:28:21  54  
14:28:21  55  PROCEDURE UPDATE_TRANSACTION (
14:28:21  56  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
14:28:21  57  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
14:28:21  58  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
14:28:21  59  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
14:28:21  60  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
14:28:21  61  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
14:28:21  62  ) AS
14:28:21  63  BEGIN
14:28:21  64  	-- Create history
14:28:21  65  	PROCS_HISTORY_V23.CREATE_TRANSACTION_HISTORY(
14:28:21  66  	  in_transaction_id	       => in_transaction_id,
14:28:21  67  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21  68  	);
14:28:21  69  	UPDATE
14:28:21  70  	  TRANSACTION
14:28:21  71  	SET
14:28:21  72  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
14:28:21  73  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
14:28:21  74  	  UPDATE_DATE		= SYSDATE,
14:28:21  75  	  UPDATED_BY		= in_updated_by,
14:28:21  76  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
14:28:21  77  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
14:28:21  78  	WHERE
14:28:21  79  	  ID = in_transaction_id;
14:28:21  80  END UPDATE_TRANSACTION;
14:28:21  81  
14:28:21  82  /*******************************************************************/
14:28:21  83  
14:28:21  84  PROCEDURE READ_TRANSACTION (
14:28:21  85  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:28:21  86  	out_result_set	  OUT SYS_REFCURSOR
14:28:21  87  ) AS
14:28:21  88  BEGIN
14:28:21  89  	OPEN out_result_set FOR
14:28:21  90  	SELECT
14:28:21  91  	  ID,
14:28:21  92  	  TRANSACTION_STATUS_ID,
14:28:21  93  	  TRANSACTION_TYPE_CODE,
14:28:21  94  	  TRANSACTION_AMOUNT,
14:28:21  95  	  CREATE_DATE,
14:28:21  96  	  CREATED_BY,
14:28:21  97  	  UPDATE_DATE,
14:28:21  98  	  UPDATED_BY,
14:28:21  99  	  ORDER_ID,
14:28:21 100  	  IS_REFUND,
14:28:21 101  	  IS_SETTLED
14:28:21 102  	FROM
14:28:21 103  	  TRANSACTION
14:28:21 104  	WHERE
14:28:21 105  	  ID = in_transaction_id;
14:28:21 106  END READ_TRANSACTION;
14:28:21 107  
14:28:21 108  /*******************************************************************/
14:28:21 109  
14:28:21 110  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
14:28:21 111  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
14:28:21 112  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
14:28:21 113  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
14:28:21 114  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:28:21 115  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
14:28:21 116  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
14:28:21 117  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
14:28:21 118  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
14:28:21 119  ) AS
14:28:21 120  BEGIN
14:28:21 121  	IF inout_transaction_attempt_id IS NULL THEN
14:28:21 122  	  SELECT
14:28:21 123  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
14:28:21 124  	  FROM DUAL;
14:28:21 125  	END IF;
14:28:21 126  	INSERT INTO TRANSACTION_ATTEMPT (
14:28:21 127  	  ID,
14:28:21 128  	  TRANSACTION_ID,
14:28:21 129  	  EXTERNAL_STATUS_CODE,
14:28:21 130  	  EXTERNAL_STATUS_MESSAGE,
14:28:21 131  	  CREATE_DATE,
14:28:21 132  	  CREATED_BY,
14:28:21 133  	  EXTERNAL_TRANSACTION_ID,
14:28:21 134  	  TRANSACTION_START_TIME,
14:28:21 135  	  TRANSACTION_ATTEMPT_STATUS_ID
14:28:21 136  	) VALUES (
14:28:21 137  	  inout_transaction_attempt_id,
14:28:21 138  	  in_transaction_id,
14:28:21 139  	  in_external_status_code,
14:28:21 140  	  in_external_status_message,
14:28:21 141  	  SYSDATE,
14:28:21 142  	  in_created_by,
14:28:21 143  	  in_external_transaction_id,
14:28:21 144  	  in_transaction_start_time,
14:28:21 145  	  in_status_id
14:28:21 146  	);
14:28:21 147  END;
14:28:21 148  
14:28:21 149  /*******************************************************************/
14:28:21 150  
14:28:21 151  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
14:28:21 152  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
14:28:21 153  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
14:28:21 154  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:28:21 155  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
14:28:21 156  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
14:28:21 157  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
14:28:21 158  ) AS
14:28:21 159  BEGIN
14:28:21 160  	UPDATE
14:28:21 161  	  TRANSACTION_ATTEMPT
14:28:21 162  	SET
14:28:21 163  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
14:28:21 164  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
14:28:21 165  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
14:28:21 166  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
14:28:21 167  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
14:28:21 168  	WHERE
14:28:21 169  	  ID = in_transaction_attempt_id;
14:28:21 170  END;
14:28:21 171  
14:28:21 172  /*******************************************************************/
14:28:21 173  
14:28:21 174  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:28:21 175  /*
14:28:21 176  Throws exceptions:
14:28:21 177  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:21 178  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
14:28:21 179  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21 180  */
14:28:21 181  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:28:21 182  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:28:21 183  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:28:21 184  ) AS
14:28:21 185  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
14:28:21 186  -- EXCEPTIONS
14:28:21 187  BAD_TRANSACTION_ID EXCEPTION;
14:28:21 188  BEGIN
14:28:21 189  
14:28:21 190  	PROCS_HISTORY_V23.CREATE_TRANSACTION_HISTORY(
14:28:21 191  	  in_transaction_id	       => in_transaction_id,
14:28:21 192  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21 193  	);
14:28:21 194  
14:28:21 195  	UPDATE
14:28:21 196  	  TRANSACTION
14:28:21 197  	SET
14:28:21 198  	  TRANSACTION.ORDER_ID	 = in_order_id,
14:28:21 199  	  TRANSACTION.UPDATED_BY = in_updated_by,
14:28:21 200  	  TRANSACTION.UPDATE_DATE= SYSDATE
14:28:21 201  	WHERE
14:28:21 202  	  TRANSACTION.ID = in_transaction_id
14:28:21 203  	  AND TRANSACTION.ORDER_ID IS NULL;
14:28:21 204  
14:28:21 205  	IF SQL%ROWCOUNT = 0 THEN
14:28:21 206  	  RAISE BAD_TRANSACTION_ID;
14:28:21 207  	END IF;
14:28:21 208  EXCEPTION
14:28:21 209  WHEN BAD_TRANSACTION_ID THEN
14:28:21 210  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:21 211  	  SPROC_NAME, 'No such transaction');
14:28:21 212  END UPDATE_TRANSACTION_ORDER_ID;
14:28:21 213  
14:28:21 214  END PROCS_TRANSACTION_CRU_V23;
14:28:21 215  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.04
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_address.sql
Compiling body for procs_address.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_ADDRESS(
14:28:21   4  /*
14:28:21   5  Throws exceptions:
14:28:21   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21   7  */
14:28:21   8  	  out_address_id	OUT NUMBER,
14:28:21   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:28:21  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:28:21  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:28:21  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:28:21  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:21  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:28:21  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
14:28:21  16  ) AS
14:28:21  17  -- VARIABLES
14:28:21  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
14:28:21  19  -- EXCEPTIONS
14:28:21  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:21  21  BEGIN
14:28:21  22  
14:28:21  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V23.CREATE_ADDRESS(
14:28:21  24  	  out_address_id      => out_address_id,
14:28:21  25  	  in_address_id       => null,
14:28:21  26  	  in_address1	      => in_address1,
14:28:21  27  	  in_address2	      => in_address2,
14:28:21  28  	  in_city	      => in_city,
14:28:21  29  	  in_state	      => in_state,
14:28:21  30  	  in_postal_code      => in_postal_code,
14:28:21  31  	  in_country	      => in_country,
14:28:21  32  	  in_created_by       => in_created_by
14:28:21  33  	);
14:28:21  34  
14:28:21  35  END CREATE_ADDRESS;
14:28:21  36  
14:28:21  37  PROCEDURE UPDATE_ADDRESS(
14:28:21  38  /*
14:28:21  39  Throws exceptions:
14:28:21  40  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  41  */
14:28:21  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
14:28:21  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
14:28:21  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
14:28:21  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
14:28:21  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
14:28:21  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:21  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
14:28:21  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
14:28:21  50  ) AS
14:28:21  51  BEGIN
14:28:21  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V23.UPDATE_ADDRESS(
14:28:21  53  	  in_address_id 	=> in_address_id,
14:28:21  54  	  in_address1		=> in_address1,
14:28:21  55  	  in_address2		=> in_address2,
14:28:21  56  	  in_city		=> in_city,
14:28:21  57  	  in_state		=> in_state,
14:28:21  58  	  in_postal_code	=> in_postal_code,
14:28:21  59  	  in_country		=> in_country,
14:28:21  60  	  in_updated_by 	=> in_updated_by
14:28:21  61  	);
14:28:21  62  END UPDATE_ADDRESS;
14:28:21  63  
14:28:21  64  PROCEDURE GET_ADDRESS (
14:28:21  65  /*
14:28:21  66  Throws exceptions:
14:28:21  67  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:21  68  */
14:28:21  69  	  in_id 		IN ADDRESS.ID%TYPE,
14:28:21  70  	  out_result_set	OUT SYS_REFCURSOR
14:28:21  71  ) AS
14:28:21  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
14:28:21  73  BEGIN
14:28:21  74  
14:28:21  75  OPEN out_result_set FOR
14:28:21  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
14:28:21  77  
14:28:21  78  END GET_ADDRESS;
14:28:21  79  
14:28:21  80  END PROCS_ADDRESS_V23;
14:28:21  81  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.02
14:28:21 SQL> 
14:28:21 SQL> prompt Compiling body for procs_adjustments.sql
Compiling body for procs_adjustments.sql
14:28:21 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V23" AS
14:28:21   2  
14:28:21   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
14:28:21   4  	in_invoice_id		  IN NUMBER,
14:28:21   5  	in_adjustment_reason	  IN VARCHAR2,
14:28:21   6  	in_is_credit		  IN NUMBER,
14:28:21   7  	in_charge_id		  IN NUMBER,
14:28:21   8  	in_business_date	  IN DATE,
14:28:21   9  	in_created_by		  IN VARCHAR2,
14:28:21  10  	out_invoice_adjustment_id OUT NUMBER
14:28:21  11  ) AS
14:28:21  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
14:28:21  13  -- VARIABLES
14:28:21  14  var_current_date	    DATE := SYSDATE;
14:28:21  15  var_new_entity_id     NUMBER;
14:28:21  16  var_inv_adj_reason_id NUMBER;
14:28:21  17  -- EXCEPTIONS
14:28:21  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
14:28:21  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
14:28:21  20  BEGIN
14:28:21  21  
14:28:21  22  	IF in_is_credit != GLOBAL_CONSTANTS_V23.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:21  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
14:28:21  24  	END IF;
14:28:21  25  
14:28:21  26  	BEGIN
14:28:21  27  	  SELECT
14:28:21  28  	    ID into var_inv_adj_reason_id
14:28:21  29  	  FROM
14:28:21  30  	    INVOICE_ADJUSTMENT_REASON
14:28:21  31  	  WHERE
14:28:21  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
14:28:21  33  	  EXCEPTION
14:28:21  34  	    WHEN NO_DATA_FOUND THEN
14:28:21  35  	      RAISE DAB_ADJUSTMENT_REASON;
14:28:21  36  	END;
14:28:21  37  
14:28:21  38  	SELECT
14:28:21  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
14:28:21  40  	FROM
14:28:21  41  	  DUAL;
14:28:21  42  
14:28:21  43  	INSERT INTO INVOICE_ADJUSTMENT (
14:28:21  44  	  ID,
14:28:21  45  	  INVOICE_ID,
14:28:21  46  	  INVOICE_ADJUSTMENT_REASON_ID,
14:28:21  47  	  IS_CREDIT,
14:28:21  48  	  CHARGE_ID,
14:28:21  49  	  ADJUSTMENT_DATE,
14:28:21  50  	  CREATE_DATE,
14:28:21  51  	  CREATED_BY,
14:28:21  52  	  UPDATE_DATE,
14:28:21  53  	  UPDATED_BY
14:28:21  54  	)
14:28:21  55  	VALUES (
14:28:21  56  	  var_new_entity_id,
14:28:21  57  	  in_invoice_id,
14:28:21  58  	  var_inv_adj_reason_id,
14:28:21  59  	  in_is_credit,
14:28:21  60  	  in_charge_id,
14:28:21  61  	  in_business_date,
14:28:21  62  	  var_current_date,
14:28:21  63  	  in_created_by,
14:28:21  64  	  var_current_date,
14:28:21  65  	  in_created_by
14:28:21  66  	);
14:28:21  67  
14:28:21  68  	out_invoice_adjustment_id := var_new_entity_id;
14:28:21  69  
14:28:21  70  EXCEPTION
14:28:21  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
14:28:21  72  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:21  73  	  SPROC_NAME, 'Bad in_is_credit value');
14:28:21  74  WHEN DAB_ADJUSTMENT_REASON THEN
14:28:21  75  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:21  76  	  SPROC_NAME, 'Bad adjustment reason');
14:28:21  77  WHEN OTHERS THEN
14:28:21  78  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21  80  END CREATE_INVOICE_ADJUSTMENT;
14:28:21  81  
14:28:21  82  /******************************************************************************/
14:28:21  83  
14:28:21  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
14:28:21  85  	  in_invoice_id 	    IN NUMBER,
14:28:21  86  	  in_original_charge_id     IN NUMBER,
14:28:21  87  	  in_charge_id		    IN NUMBER,
14:28:21  88  	  in_updated_by 	    IN VARCHAR2
14:28:21  89  ) AS
14:28:21  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
14:28:21  91  var_invoice_adjustment_id NUMBER;
14:28:21  92  BEGIN
14:28:21  93  	SELECT
14:28:21  94  	  id into var_invoice_adjustment_id
14:28:21  95  	FROM
14:28:21  96  	  INVOICE_ADJUSTMENT
14:28:21  97  	WHERE INVOICE_ID = in_invoice_id
14:28:21  98  	      AND CHARGE_ID = in_original_charge_id;
14:28:21  99  
14:28:21 100  	--create history
14:28:21 101  	PROCS_HISTORY_V23.CREATE_INVOICE_ADJ_HISTORY(
14:28:21 102  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
14:28:21 103  	  in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:21 104  	);
14:28:21 105  
14:28:21 106  	UPDATE INVOICE_ADJUSTMENT
14:28:21 107  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
14:28:21 108  	WHERE ID = var_invoice_adjustment_id;
14:28:21 109  
14:28:21 110  EXCEPTION
14:28:21 111  WHEN NO_DATA_FOUND THEN
14:28:21 112  	    NULL;
14:28:21 113  END UPDATE_INVOICE_ADJUSTMENT;
14:28:21 114  
14:28:21 115  /******************************************************************************/
14:28:21 116  
14:28:21 117  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
14:28:21 118  	in_line_item_id 	    IN NUMBER,
14:28:21 119  	in_invoice_adjustment_id    IN NUMBER,
14:28:21 120  	in_amount		    IN NUMBER,
14:28:21 121  	in_tax			    IN NUMBER,
14:28:21 122  	in_discount		    IN NUMBER,
14:28:21 123  	in_created_by		    IN VARCHAR2,
14:28:21 124  	out_line_item_adjustment_id OUT NUMBER
14:28:21 125  ) AS
14:28:21 126  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
14:28:21 127  -- VARIABLES
14:28:21 128  var_current_date DATE := SYSDATE;
14:28:21 129  var_new_entity_id NUMBER;
14:28:21 130  BEGIN
14:28:21 131  
14:28:21 132  	SELECT
14:28:21 133  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
14:28:21 134  	FROM
14:28:21 135  	  DUAL;
14:28:21 136  
14:28:21 137  	INSERT INTO LINE_ITEM_ADJUSTMENT (
14:28:21 138  	  ID,
14:28:21 139  	  LINE_ITEM_ID,
14:28:21 140  	  INVOICE_ADJUSTMENT_ID,
14:28:21 141  	  AMOUNT,
14:28:21 142  	  TAX,
14:28:21 143  	  DISCOUNT,
14:28:21 144  	  CREATE_DATE,
14:28:21 145  	  CREATED_BY
14:28:21 146  	)
14:28:21 147  	VALUES (
14:28:21 148  	  var_new_entity_id,
14:28:21 149  	  in_line_item_id,
14:28:21 150  	  in_invoice_adjustment_id,
14:28:21 151  	  in_amount,
14:28:21 152  	  in_tax,
14:28:21 153  	  in_discount,
14:28:21 154  	  var_current_date,
14:28:21 155  	  in_created_by
14:28:21 156  	);
14:28:21 157  
14:28:21 158  	out_line_item_adjustment_id := var_new_entity_id;
14:28:21 159  
14:28:21 160  EXCEPTION
14:28:21 161  WHEN OTHERS THEN
14:28:21 162  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 163  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 164  END CREATE_LINE_ITEM_ADJUSTMENT;
14:28:21 165  
14:28:21 166  /******************************************************************************/
14:28:21 167  
14:28:21 168  PROCEDURE CREATE_TAX_ADJUSTMENT (
14:28:21 169  	in_tax_id		   IN NUMBER,
14:28:21 170  	in_line_item_adjustment_id IN NUMBER,
14:28:21 171  	in_amount		   IN NUMBER,
14:28:21 172  	in_created_by		   IN VARCHAR2,
14:28:21 173  	out_tax_adjustment_id	   OUT NUMBER
14:28:21 174  ) AS
14:28:21 175  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
14:28:21 176  -- VARIABLES
14:28:21 177  var_current_date DATE := SYSDATE;
14:28:21 178  var_new_entity_id NUMBER;
14:28:21 179  BEGIN
14:28:21 180  
14:28:21 181  	SELECT
14:28:21 182  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
14:28:21 183  	FROM
14:28:21 184  	  DUAL;
14:28:21 185  
14:28:21 186  	INSERT INTO TAX_ADJUSTMENT (
14:28:21 187  	  ID,
14:28:21 188  	  TAX_ID,
14:28:21 189  	  LINE_ITEM_ADJUSTMENT_ID,
14:28:21 190  	  AMOUNT,
14:28:21 191  	  CREATE_DATE,
14:28:21 192  	  CREATED_BY
14:28:21 193  	)
14:28:21 194  	VALUES (
14:28:21 195  	  var_new_entity_id,
14:28:21 196  	  in_tax_id,
14:28:21 197  	  in_line_item_adjustment_id,
14:28:21 198  	  in_amount,
14:28:21 199  	  var_current_date,
14:28:21 200  	  in_created_by
14:28:21 201  	);
14:28:21 202  
14:28:21 203  	out_tax_adjustment_id := var_new_entity_id;
14:28:21 204  
14:28:21 205  EXCEPTION
14:28:21 206  WHEN OTHERS THEN
14:28:21 207  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 208  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 209  END CREATE_TAX_ADJUSTMENT;
14:28:21 210  
14:28:21 211  /******************************************************************************/
14:28:21 212  
14:28:21 213  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
14:28:21 214  	in_discount_id		   NUMBER,
14:28:21 215  	in_line_item_id 	   NUMBER,
14:28:21 216  	in_line_item_adjustment_id IN NUMBER,
14:28:21 217  	in_amount		   IN NUMBER,
14:28:21 218  	in_created_by		   IN VARCHAR2,
14:28:21 219  	out_discount_li_id	   OUT NUMBER
14:28:21 220  ) AS
14:28:21 221  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
14:28:21 222  -- VARIABLES
14:28:21 223  var_current_date DATE := SYSDATE;
14:28:21 224  var_new_entity_id NUMBER;
14:28:21 225  BEGIN
14:28:21 226  
14:28:21 227  	SELECT
14:28:21 228  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
14:28:21 229  	FROM
14:28:21 230  	  DUAL;
14:28:21 231  
14:28:21 232  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
14:28:21 233  	  ID,
14:28:21 234  	  DISCOUNT_ID,
14:28:21 235  	  LINE_ITEM_ID,
14:28:21 236  	  LINE_ITEM_ADJUSTMENT_ID,
14:28:21 237  	  AMOUNT,
14:28:21 238  	  CREATE_DATE,
14:28:21 239  	  CREATED_BY
14:28:21 240  	)
14:28:21 241  	VALUES (
14:28:21 242  	  var_new_entity_id,
14:28:21 243  	  in_discount_id,
14:28:21 244  	  in_line_item_id,
14:28:21 245  	  in_line_item_adjustment_id,
14:28:21 246  	  in_amount,
14:28:21 247  	  var_current_date,
14:28:21 248  	  in_created_by
14:28:21 249  	);
14:28:21 250  
14:28:21 251  	out_discount_li_id := var_new_entity_id;
14:28:21 252  
14:28:21 253  EXCEPTION
14:28:21 254  WHEN OTHERS THEN
14:28:21 255  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:21 256  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:21 257  END CREATE_DISCOUNT_LI_ADJUSTMENT;
14:28:21 258  
14:28:21 259  END PROCS_ADJUSTMENTS_V23;
14:28:21 260  .
14:28:21 SQL> /

Package body created.

Elapsed: 00:00:00.08
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_adx.sql
Compiling body for procs_adx.sql
14:28:22 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V23" AS
14:28:22   2  
14:28:22   3  PROCEDURE GET_SUB_ADX_INFO (
14:28:22   4  /*
14:28:22   5  Throws exceptions:
14:28:22   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22   7  */
14:28:22   8  	out_result_set	    OUT SYS_REFCURSOR,
14:28:22   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
14:28:22  10  ) AS
14:28:22  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
14:28:22  12  BEGIN
14:28:22  13  OPEN out_result_set FOR
14:28:22  14  SELECT /*+ FIRST_ROWS(5) */
14:28:22  15  	s.offer_chain_id,
14:28:22  16  	s.create_date,
14:28:22  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
14:28:22  18  	ocmd.value,
14:28:22  19  	a.group_id,
14:28:22  20  	s.id subscription_id
14:28:22  21  FROM
14:28:22  22  	account a,
14:28:22  23  	subscription s,
14:28:22  24  	offer_chain_meta_data ocmd,
14:28:22  25  	group_account g,
14:28:22  26  	subscription_share ss,
14:28:22  27  	account a2
14:28:22  28  WHERE
14:28:22  29  	s.account_id = a.id and
14:28:22  30  	s.offer_chain_id = ocmd.offer_chain_id and
14:28:22  31  	g.id = ss.group_account_id and
14:28:22  32  	ss.borrower_account_id = a2.id and
14:28:22  33  	s.id = g.subscription_id and
14:28:22  34  	ocmd.name = 'ADX_BUNDLE' and
14:28:22  35  	a2.group_id = in_group_id and
14:28:22  36  	rownum < 5
14:28:22  37  union all
14:28:22  38  SELECT /*+ FIRST_ROWS(5) */
14:28:22  39  	s.offer_chain_id,
14:28:22  40  	s.create_date,
14:28:22  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
14:28:22  42  	ocmd.value,
14:28:22  43  	a.group_id,
14:28:22  44  	s.id subscription_id
14:28:22  45  FROM
14:28:22  46  	account a,
14:28:22  47  	subscription s,
14:28:22  48  	offer_chain_meta_data ocmd
14:28:22  49  WHERE
14:28:22  50  	s.account_id = a.id and
14:28:22  51  	s.offer_chain_id = ocmd.offer_chain_id and
14:28:22  52  	ocmd.name = 'ADX_BUNDLE' and
14:28:22  53  	a.group_id = in_group_id and
14:28:22  54  	rownum < 5
14:28:22  55  ;
14:28:22  56  
14:28:22  57  END GET_SUB_ADX_INFO;
14:28:22  58  
14:28:22  59  END PROCS_ADX_V23;
14:28:22  60  .
14:28:22 SQL> /

Package body created.

Elapsed: 00:00:00.05
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_amazon.sql
Compiling body for procs_amazon.sql
14:28:22 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V23" AS
14:28:22   2  
14:28:22   3  PROCEDURE AASR_PURCHASE_TOKEN_USED(
14:28:22   4  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
14:28:22   5  	out_data	  OUT NUMBER
14:28:22   6  ) AS
14:28:22   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'AASR_PURCHASE_TOKEN_USED';
14:28:22   8  BEGIN
14:28:22   9  	SELECT
14:28:22  10  	  COUNT(1)
14:28:22  11  	INTO OUT_DATA
14:28:22  12  	FROM AMAZON_APPSTORE_RECEIPT
14:28:22  13  	WHERE PURCHASE_TOKEN = in_purchase_token;
14:28:22  14  	EXCEPTION
14:28:22  15  	WHEN NO_DATA_FOUND THEN
14:28:22  16  	out_data := 0;
14:28:22  17  END;
14:28:22  18  
14:28:22  19  PROCEDURE UPDATE_AASR_LAST_CHECK_DATE(
14:28:22  20  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:22  21  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
14:28:22  22  ) AS
14:28:22  23  BEGIN
14:28:22  24  	CORE_OWNER.PROCS_AMAZON_CRU_V23.UPDATE_AMAZON_APPSTORE_RECEIPT(
14:28:22  25  	  in_id 	     => in_id,
14:28:22  26  	  in_updated_by      => in_updated_by,
14:28:22  27  	  in_last_check_date => SYSDATE
14:28:22  28  	);
14:28:22  29  END UPDATE_AASR_LAST_CHECK_DATE;
14:28:22  30  
14:28:22  31  PROCEDURE EXPIRED_AASR_SUB_IDS(
14:28:22  32  	out_data   OUT SYS_REFCURSOR
14:28:22  33  ) AS
14:28:22  34  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRED_AASR_SUB_IDS';
14:28:22  35  BEGIN
14:28:22  36  	OPEN out_data FOR
14:28:22  37  	SELECT
14:28:22  38  	  *
14:28:22  39  	FROM
14:28:22  40  	  (
14:28:22  41  	    SELECT
14:28:22  42  	      AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
14:28:22  43  	    FROM AMAZON_APPSTORE_RECEIPT
14:28:22  44  	      INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
14:28:22  45  	    WHERE
14:28:22  46  	      AMAZON_APPSTORE_RECEIPT.END_DATE <= SYSDATE AND
14:28:22  47  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:22  48  	    ORDER BY dbms_random.value
14:28:22  49  	  )
14:28:22  50  	WHERE
14:28:22  51  	  ROWNUM <= 1000;
14:28:22  52  END EXPIRED_AASR_SUB_IDS;
14:28:22  53  
14:28:22  54  PROCEDURE UPDATE_AASR_PURCHASE_TOKEN(
14:28:22  55  	in_id		  IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:22  56  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
14:28:22  57  	in_updated_by	  IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
14:28:22  58  ) AS
14:28:22  59  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AASR_PURCHASE_TOKEN';
14:28:22  60  BEGIN
14:28:22  61  	  CORE_OWNER.PROCS_AMAZON_CRU_V23.UPDATE_AMAZON_APPSTORE_RECEIPT(
14:28:22  62  	      in_id		  => in_id,
14:28:22  63  	      in_updated_by	  => in_updated_by,
14:28:22  64  	      in_purchase_token   => in_purchase_token
14:28:22  65  	  );
14:28:22  66  END UPDATE_AASR_PURCHASE_TOKEN;
14:28:22  67  
14:28:22  68  PROCEDURE UPDATE_AASR_END_DATE(
14:28:22  69  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:22  70  	in_end_date   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE,
14:28:22  71  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
14:28:22  72  ) AS
14:28:22  73  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AASR_END_DATE';
14:28:22  74  BEGIN
14:28:22  75  	CORE_OWNER.PROCS_AMAZON_CRU_V23.UPDATE_AMAZON_APPSTORE_RECEIPT(
14:28:22  76  	    in_id	  => in_id,
14:28:22  77  	    in_updated_by => in_updated_by,
14:28:22  78  	    in_end_date   => in_end_date
14:28:22  79  	);
14:28:22  80  END UPDATE_AASR_END_DATE;
14:28:22  81  
14:28:22  82  PROCEDURE AASR_RECEIPTS_WITH_ACTIVE_SUBS(
14:28:22  83  	out_data   OUT SYS_REFCURSOR,
14:28:22  84  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:22  85  ) AS
14:28:22  86  SPROC_NAME CONSTANT VARCHAR2(32) := 'AASR_RECEIPTS_WITH_ACTIVE_SUBS';
14:28:22  87  BEGIN
14:28:22  88  	OPEN out_data FOR
14:28:22  89  	SELECT
14:28:22  90  	  *
14:28:22  91  	FROM (
14:28:22  92  	  SELECT
14:28:22  93  	    AMAZON_APPSTORE_RECEIPT.ID,
14:28:22  94  	    AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
14:28:22  95  	    AMAZON_APPSTORE_RECEIPT.USER_ID,
14:28:22  96  	    AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
14:28:22  97  	    AMAZON_APPSTORE_RECEIPT.START_DATE,
14:28:22  98  	    AMAZON_APPSTORE_RECEIPT.END_DATE,
14:28:22  99  	    AMAZON_APPSTORE_RECEIPT.SKU,
14:28:22 100  	    AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
14:28:22 101  	    AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
14:28:22 102  	    AMAZON_APPSTORE_RECEIPT.CREATED_BY,
14:28:22 103  	    AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
14:28:22 104  	    AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
14:28:22 105  	    AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
14:28:22 106  	  FROM AMAZON_APPSTORE_RECEIPT
14:28:22 107  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
14:28:22 108  	  WHERE
14:28:22 109  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:22 110  	    AND NOT EXISTS
14:28:22 111  	    (
14:28:22 112  		SELECT
14:28:22 113  		  NULL
14:28:22 114  		FROM PROCESS_RETRY_THROTTLE
14:28:22 115  		WHERE PROCESS_NAME = in_process_name
14:28:22 116  		      AND GENERIC_ID = AMAZON_APPSTORE_RECEIPT.ID
14:28:22 117  	    )
14:28:22 118  	  ORDER BY dbms_random.value
14:28:22 119  	)
14:28:22 120  	WHERE
14:28:22 121  	  ROWNUM <= 1000;
14:28:22 122  END AASR_RECEIPTS_WITH_ACTIVE_SUBS;
14:28:22 123  
14:28:22 124  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
14:28:22 125  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:22 126  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
14:28:22 127  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
14:28:22 128  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
14:28:22 129  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
14:28:22 130  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
14:28:22 131  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
14:28:22 132  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
14:28:22 133  ) AS
14:28:22 134  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE_RECEIPT';
14:28:22 135  BEGIN
14:28:22 136  	CORE_OWNER.PROCS_AMAZON_CRU_V23.ADD_AMAZON_APPSTORE_RECEIPT(
14:28:22 137  	    in_subscription_id =>  in_subscription_id,
14:28:22 138  	    in_user_id	       =>  in_user_id,
14:28:22 139  	    in_item_type       =>  in_item_type,
14:28:22 140  	    in_start_date      =>  in_start_date,
14:28:22 141  	    in_end_date        =>  in_end_date,
14:28:22 142  	    in_sku	       =>  in_sku,
14:28:22 143  	    in_purchase_token  =>  in_purchase_token,
14:28:22 144  	    in_created_by      =>  in_created_by
14:28:22 145  	);
14:28:22 146  END ADD_AMAZON_APPSTORE_RECEIPT;
14:28:22 147  
14:28:22 148  PROCEDURE AMAZON_APPSTORE_RECEIPTS(
14:28:22 149  	in_user_id IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
14:28:22 150  	in_sku	   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
14:28:22 151  	out_data   OUT SYS_REFCURSOR
14:28:22 152  ) AS
14:28:22 153  SPROC_NAME CONSTANT VARCHAR2(32) := 'AMAZON_APPSTORE_RECEIPTS';
14:28:22 154  BEGIN
14:28:22 155  	OPEN out_data FOR
14:28:22 156  	SELECT
14:28:22 157  	  AMAZON_APPSTORE_RECEIPT.ID,
14:28:22 158  	  AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
14:28:22 159  	  AMAZON_APPSTORE_RECEIPT.USER_ID,
14:28:22 160  	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
14:28:22 161  	  AMAZON_APPSTORE_RECEIPT.START_DATE,
14:28:22 162  	  AMAZON_APPSTORE_RECEIPT.END_DATE,
14:28:22 163  	  AMAZON_APPSTORE_RECEIPT.SKU,
14:28:22 164  	  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
14:28:22 165  	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
14:28:22 166  	  AMAZON_APPSTORE_RECEIPT.CREATED_BY,
14:28:22 167  	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
14:28:22 168  	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
14:28:22 169  	  AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
14:28:22 170  	FROM AMAZON_APPSTORE_RECEIPT
14:28:22 171  	  INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
14:28:22 172  	WHERE AMAZON_APPSTORE_RECEIPT.USER_ID = in_user_id AND
14:28:22 173  	      AMAZON_APPSTORE_RECEIPT.SKU = in_sku AND
14:28:22 174  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
14:28:22 175  END AMAZON_APPSTORE_RECEIPTS;
14:28:22 176  
14:28:22 177  	PROCEDURE CREATE_AMAZON_SUB(
14:28:22 178  	  out_id	      OUT NUMBER,
14:28:22 179  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
14:28:22 180  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
14:28:22 181  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
14:28:22 182  ) AS
14:28:22 183  -- VARIABLES
14:28:22 184  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
14:28:22 185  -- EXCEPTIONS
14:28:22 186  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 187  BEGIN
14:28:22 188  
14:28:22 189  	CORE_OWNER.PROCS_AMAZON_CRU_V23.CREATE_AMAZON_SUB(
14:28:22 190  	  out_id	      =>  out_id,
14:28:22 191  	  in_subscription_id  =>  in_subscription_id,
14:28:22 192  	  in_amazon_id	      =>  in_amazon_id,
14:28:22 193  	  in_created_by       =>  in_created_by
14:28:22 194  	);
14:28:22 195  
14:28:22 196  END CREATE_AMAZON_SUB;
14:28:22 197  
14:28:22 198  PROCEDURE GET_ACTIVE_SUB_IDS (
14:28:22 199  	out_result_set	    OUT SYS_REFCURSOR,
14:28:22 200  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
14:28:22 201  ) AS
14:28:22 202  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
14:28:22 203  BEGIN
14:28:22 204  OPEN out_result_set FOR
14:28:22 205  SELECT s.id
14:28:22 206  FROM subscription s, amazon_sub am
14:28:22 207  WHERE
14:28:22 208  	s.id = am.subscription_id
14:28:22 209  	and s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:22 210  	and am.amazon_id = in_amazon_id
14:28:22 211  ;
14:28:22 212  
14:28:22 213  END GET_ACTIVE_SUB_IDS;
14:28:22 214  
14:28:22 215  PROCEDURE GET_ACTIVE_GROUP_IDS (
14:28:22 216  	out_result_set	    OUT SYS_REFCURSOR,
14:28:22 217  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
14:28:22 218  ) AS
14:28:22 219  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
14:28:22 220  BEGIN
14:28:22 221  OPEN out_result_set FOR
14:28:22 222  SELECT distinct a.group_id id
14:28:22 223  FROM subscription s, amazon_sub am, account a
14:28:22 224  WHERE
14:28:22 225  	s.id = am.subscription_id
14:28:22 226  	and a.id = s.account_id
14:28:22 227  	and s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:22 228  	and am.amazon_id = in_amazon_id
14:28:22 229  ;
14:28:22 230  
14:28:22 231  END GET_ACTIVE_GROUP_IDS;
14:28:22 232  
14:28:22 233  END PROCS_AMAZON_V23;
14:28:22 234  .
14:28:22 SQL> /

Package body created.

Elapsed: 00:00:00.05
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_cupy.sql
Compiling body for procs_cupy.sql
14:28:22 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
14:28:22   2  
14:28:22   3  	/****************************************************************************/
14:28:22   4  
14:28:22   5  	PROCEDURE POPULATE_REQUEST_INFO(
14:28:22   6  	  in_hours_prior    IN	NUMBER,
14:28:22   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
14:28:22   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
14:28:22   9  	) AS
14:28:22  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
14:28:22  11  	var_start_date	    DATE := SYSDATE;
14:28:22  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
14:28:22  13  	var_request_file_id NUMBER := 0;
14:28:22  14  	var_license_count   NUMBER := 0;
14:28:22  15  	var_cc_update_count NUMBER := 0;
14:28:22  16  	BEGIN
14:28:22  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
14:28:22  18  	    INSERT INTO CC_REQUEST_FILE (ID,
14:28:22  19  					 FILE_NAME,
14:28:22  20  					 CC_REQUEST_FILE_STATUS,
14:28:22  21  					 CREATE_DATE,
14:28:22  22  					 CREATED_BY,
14:28:22  23  					 UPDATE_DATE,
14:28:22  24  					 UPDATED_BY)
14:28:22  25  					 VALUES (
14:28:22  26  					 var_request_file_id,
14:28:22  27  					 in_filename,
14:28:22  28  					 'NOT_CREATED',
14:28:22  29  					 var_start_date,
14:28:22  30  					 in_creator,
14:28:22  31  					 var_start_date,
14:28:22  32  					 in_creator);
14:28:22  33  
14:28:22  34  	   FOR record IN (SELECT
14:28:22  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
14:28:22  36  			  FROM
14:28:22  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
14:28:22  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
14:28:22  39  			  WHERE
14:28:22  40  			    s.INSTRUMENT_TYPE_ID	 = 1
14:28:22  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
14:28:22  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
14:28:22  43  			    AND l.LICENSE_STATUS_ID	 = 2
14:28:22  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
14:28:22  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
14:28:22  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
14:28:22  47  	   LOOP
14:28:22  48  	     var_license_count := 0;
14:28:22  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
14:28:22  50  
14:28:22  51  	     IF var_license_count = 0 THEN
14:28:22  52  		INSERT INTO CC_UPDATE (ID,
14:28:22  53  				       CREDIT_CARD_ID,
14:28:22  54  				       LICENSE_ID,
14:28:22  55  				       CC_UPDATE_STATUS,
14:28:22  56  				       CC_REQUEST_FILE_ID,
14:28:22  57  				       CREATE_DATE,
14:28:22  58  				       UPDATE_DATE,
14:28:22  59  				       CREATED_BY,
14:28:22  60  				       UPDATED_BY
14:28:22  61  				       ) VALUES (
14:28:22  62  				       CC_UPDATE_SEQ.NEXTVAL,
14:28:22  63  				       record.CREDIT_CARD_ID,
14:28:22  64  				       record.LICENSE_ID,
14:28:22  65  				       'NOT_ADDED_TO_FILE',
14:28:22  66  				       var_request_file_id,
14:28:22  67  				       var_start_date,
14:28:22  68  				       var_start_date,
14:28:22  69  				       in_creator,
14:28:22  70  				       in_creator
14:28:22  71  				       );
14:28:22  72  	     END IF;
14:28:22  73  	   END LOOP;
14:28:22  74  
14:28:22  75  	   SELECT COUNT(1) INTO var_cc_update_count
14:28:22  76  	   FROM CC_UPDATE
14:28:22  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
14:28:22  78  	   IF var_cc_update_count <= 0 THEN
14:28:22  79  	     UPDATE CC_REQUEST_FILE
14:28:22  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
14:28:22  81  	     WHERE ID = var_request_file_id;
14:28:22  82  	   END IF;
14:28:22  83  
14:28:22  84  	END POPULATE_REQUEST_INFO;
14:28:22  85  
14:28:22  86  	/****************************************************************************/
14:28:22  87  
14:28:22  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
14:28:22  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:28:22  90  	  in_start	     IN NUMBER,
14:28:22  91  	  in_end	     IN NUMBER,
14:28:22  92  	  out_result_set     OUT SYS_REFCURSOR
14:28:22  93  	) AS
14:28:22  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
14:28:22  95  	var_range_diff	    NUMBER := 0;
14:28:22  96  	var_upper_bond_diff NUMBER := 0;
14:28:22  97  	var_l_start	    NUMBER := 0;
14:28:22  98  	var_l_end	    NUMBER := 0;
14:28:22  99  	BEGIN
14:28:22 100  	  --Normalize the end points [START]
14:28:22 101  	  IF (in_start IS NULL OR in_start < 0) Then
14:28:22 102  	    var_l_start := 0;
14:28:22 103  	  ELSE
14:28:22 104  	    var_l_start := in_start;
14:28:22 105  	  END IF;
14:28:22 106  
14:28:22 107  	  IF (in_end IS NULL) Then
14:28:22 108  	    var_l_end := 500;
14:28:22 109  	  ELSE
14:28:22 110  	    var_l_end := in_end;
14:28:22 111  	  END IF;
14:28:22 112  
14:28:22 113  	  var_l_start := var_l_start + 1;
14:28:22 114  	  var_l_end   := var_l_end   + 1;
14:28:22 115  
14:28:22 116  	  var_range_diff  := var_l_end - var_l_start;
14:28:22 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
14:28:22 118  
14:28:22 119  	  IF (var_upper_bond_diff > 0) Then
14:28:22 120  	    var_l_end := var_l_end - var_upper_bond_diff;
14:28:22 121  	  END IF;
14:28:22 122  	  --Normalize the end points [END]
14:28:22 123  
14:28:22 124  	  OPEN out_result_set FOR
14:28:22 125  	    SELECT CHASE_PROFILE_ID FROM
14:28:22 126  	      (SELECT rownum rnum, q.* FROM
14:28:22 127  		 (SELECT
14:28:22 128  		    cc.CHASE_PROFILE_ID
14:28:22 129  		  FROM
14:28:22 130  		    CREDIT_CARD cc,
14:28:22 131  		    CC_UPDATE ccu
14:28:22 132  		  WHERE
14:28:22 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
14:28:22 134  		    AND ccu.CREDIT_CARD_ID = cc.id
14:28:22 135  		) Q
14:28:22 136  	      WHERE rownum <= var_l_end)
14:28:22 137  	    WHERE rnum >= var_l_Start;
14:28:22 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
14:28:22 139  
14:28:22 140  	/****************************************************************************/
14:28:22 141  
14:28:22 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
14:28:22 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
14:28:22 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
14:28:22 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
14:28:22 146  	)AS
14:28:22 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
14:28:22 148  	BEGIN
14:28:22 149  	  UPDATE CC_REQUEST_FILE
14:28:22 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
14:28:22 151  	      UPDATE_DATE = SYSDATE,
14:28:22 152  	      UPDATED_BY  = in_updated_by
14:28:22 153  	  WHERE ID = in_request_file_id;
14:28:22 154  	END UPDATE_REQUEST_FILE_STATUS;
14:28:22 155  
14:28:22 156  	/****************************************************************************/
14:28:22 157  
14:28:22 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
14:28:22 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:28:22 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:28:22 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
14:28:22 162  	) AS
14:28:22 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
14:28:22 164  	BEGIN
14:28:22 165  	  UPDATE CC_UPDATE
14:28:22 166  	  SET CC_UPDATE_STATUS = in_status,
14:28:22 167  	      UPDATE_DATE      = SYSDATE,
14:28:22 168  	      UPDATED_BY       = in_updated_by
14:28:22 169  	  WHERE
14:28:22 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
14:28:22 171  	END UPDATE_CC_REQUEST_STATUS;
14:28:22 172  
14:28:22 173  	/****************************************************************************/
14:28:22 174  
14:28:22 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
14:28:22 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
14:28:22 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
14:28:22 178  	  out_request_files   OUT SYS_REFCURSOR
14:28:22 179  	) AS
14:28:22 180  	var_older_than_hours NUMBER := in_older_than_hours;
14:28:22 181  	BEGIN
14:28:22 182  	 IF (var_older_than_hours IS NULL) THEN
14:28:22 183  	   var_older_than_hours := -288;
14:28:22 184  	 END IF;
14:28:22 185  
14:28:22 186  	 OPEN out_request_files FOR
14:28:22 187  	 SELECT
14:28:22 188  	   ID,
14:28:22 189  	   FILE_NAME
14:28:22 190  	 FROM
14:28:22 191  	   CC_REQUEST_FILE
14:28:22 192  	 WHERE
14:28:22 193  	   CC_REQUEST_FILE_STATUS = in_status
14:28:22 194  	 AND
14:28:22 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
14:28:22 196  	END REQUEST_FILES_BY_STATUS;
14:28:22 197  
14:28:22 198  	/****************************************************************************/
14:28:22 199  
14:28:22 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
14:28:22 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
14:28:22 202  	  out_count OUT NUMBER
14:28:22 203  	) AS
14:28:22 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
14:28:22 205  	BEGIN
14:28:22 206  	  SELECT COUNT(1) INTO out_count
14:28:22 207  	  FROM CC_UPDATE
14:28:22 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
14:28:22 209  	END COUNT_BY_REQUEST_FILE_ID;
14:28:22 210  
14:28:22 211  	/****************************************************************************/
14:28:22 212  
14:28:22 213  	PROCEDURE GET_CREDIT_CARD_INFO (
14:28:22 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
14:28:22 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
14:28:22 216  	  out_card_info        OUT SYS_REFCURSOR
14:28:22 217  	) AS
14:28:22 218  	BEGIN
14:28:22 219  	  OPEN out_card_info FOR
14:28:22 220  	  SELECT
14:28:22 221  	    u.LICENSE_ID,
14:28:22 222  	    cc.ACCOUNT_ID,
14:28:22 223  	    cc.ID CREDIT_CARD_ID,
14:28:22 224  	    cc.CHASE_PROFILE_ID,
14:28:22 225  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
14:28:22 226  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
14:28:22 227  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
14:28:22 228  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
14:28:22 229  	    u.ID CC_UPDATE_ID,
14:28:22 230  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
14:28:22 231  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf
14:28:22 232  	  WHERE cc.ID = u.CREDIT_CARD_ID
14:28:22 233  	  AND u.CC_REQUEST_FILE_ID = rf.ID
14:28:22 234  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
14:28:22 235  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
14:28:22 236  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
14:28:22 237  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
14:28:22 238  	  ORDER BY cc.UPDATE_DATE DESC;
14:28:22 239  	END GET_CREDIT_CARD_INFO;
14:28:22 240  
14:28:22 241  	/****************************************************************************/
14:28:22 242  
14:28:22 243  	PROCEDURE UPDATE_CC_UPDATE(
14:28:22 244  	  in_id 	     IN CC_UPDATE.ID%TYPE,
14:28:22 245  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:28:22 246  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
14:28:22 247  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
14:28:22 248  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
14:28:22 249  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
14:28:22 250  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
14:28:22 251  	) AS
14:28:22 252  	BEGIN
14:28:22 253  	  UPDATE CC_UPDATE
14:28:22 254  	  SET CC_UPDATE_STATUS = in_status,
14:28:22 255  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
14:28:22 256  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
14:28:22 257  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
14:28:22 258  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
14:28:22 259  	  UPDATE_DATE = SYSDATE,
14:28:22 260  	  UPDATED_BY = in_updated_by
14:28:22 261  	  WHERE ID = in_id;
14:28:22 262  	END UPDATE_CC_UPDATE;
14:28:22 263  
14:28:22 264  	/****************************************************************************/
14:28:22 265  
14:28:22 266  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
14:28:22 267  	  in_id 	IN CC_UPDATE.ID%TYPE,
14:28:22 268  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
14:28:22 269  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
14:28:22 270  	) AS
14:28:22 271  	BEGIN
14:28:22 272  	  UPDATE CC_UPDATE
14:28:22 273  	  SET CC_UPDATE_STATUS = in_status,
14:28:22 274  	  UPDATE_DATE = SYSDATE,
14:28:22 275  	  UPDATED_BY = in_updated_by
14:28:22 276  	  WHERE ID = in_id;
14:28:22 277  	END UPDATE_CC_UPDATE_STATUS;
14:28:22 278  
14:28:22 279  	/****************************************************************************/
14:28:22 280  
14:28:22 281  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
14:28:22 282  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
14:28:22 283  	  out_request_file     OUT SYS_REFCURSOR
14:28:22 284  	) AS
14:28:22 285  	BEGIN
14:28:22 286  	  OPEN out_request_file FOR
14:28:22 287  	  SELECT ID, FILE_NAME
14:28:22 288  	  FROM CC_REQUEST_FILE
14:28:22 289  	  WHERE FILE_NAME = in_request_filename;
14:28:22 290  	END GET_REQUEST_FILE_BY_FILENAME;
14:28:22 291  
14:28:22 292  	/****************************************************************************/
14:28:22 293  
14:28:22 294  	PROCEDURE SUSPEND_CREDIT_CARD (
14:28:22 295  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
14:28:22 296  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
14:28:22 297  	) AS
14:28:22 298  	BEGIN
14:28:22 299  	  -- Create history
14:28:22 300  	  PROCS_HISTORY_V23.CREATE_CREDIT_CARD_HISTORY(
14:28:22 301  	      in_credit_card_id 	   => in_credit_card_id,
14:28:22 302  	      in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:22 303  	  );
14:28:22 304  
14:28:22 305  	  UPDATE CREDIT_CARD
14:28:22 306  	  SET UPDATE_DATE = SYSDATE,
14:28:22 307  	  UPDATED_BY = in_updated_by,
14:28:22 308  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V23.CREDIT_CARD_DISABLED
14:28:22 309  	  WHERE ID = in_credit_card_id;
14:28:22 310  	END SUSPEND_CREDIT_CARD;
14:28:22 311  
14:28:22 312  	/****************************************************************************/
14:28:22 313  
14:28:22 314  	PROCEDURE UPDATE_CREDIT_CARD (
14:28:22 315  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
14:28:22 316  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:28:22 317  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
14:28:22 318  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
14:28:22 319  	) AS
14:28:22 320  	BEGIN
14:28:22 321  	  -- Create history
14:28:22 322  	  PROCS_HISTORY_V23.CREATE_CREDIT_CARD_HISTORY(
14:28:22 323  	      in_credit_card_id 	   => in_credit_card_id,
14:28:22 324  	      in_system_activity_reason_id => GLOBAL_ENUMS_V23.SAC_SYSTEM_APPLIED_RULE
14:28:22 325  	  );
14:28:22 326  
14:28:22 327  	  UPDATE CREDIT_CARD
14:28:22 328  	  SET UPDATE_DATE = SYSDATE,
14:28:22 329  	  UPDATED_BY = in_updated_by,
14:28:22 330  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
14:28:22 331  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
14:28:22 332  	  WHERE ID = in_credit_card_id;
14:28:22 333  	END UPDATE_CREDIT_CARD;
14:28:22 334  
14:28:22 335  	/****************************************************************************/
14:28:22 336  
14:28:22 337  	PROCEDURE COMPLETABLE_REQUESTS (
14:28:22 338  	  out_request_files OUT SYS_REFCURSOR
14:28:22 339  	) AS
14:28:22 340  	BEGIN
14:28:22 341  	  OPEN out_request_files FOR
14:28:22 342  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
14:28:22 343  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
14:28:22 344  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
14:28:22 345  	  AND rf.ID = u.CC_REQUEST_FILE_ID
14:28:22 346  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
14:28:22 347  	  MINUS
14:28:22 348  	  SELECT rf.ID, rf.FILE_NAME
14:28:22 349  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
14:28:22 350  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
14:28:22 351  	  AND rf.ID = u.CC_REQUEST_FILE_ID
14:28:22 352  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
14:28:22 353  	END COMPLETABLE_REQUESTS;
14:28:22 354  
14:28:22 355  	/****************************************************************************/
14:28:22 356  
14:28:22 357  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
14:28:22 358  	  in_max_hours_before_report IN  NUMBER,
14:28:22 359  	  out_request_files	     OUT SYS_REFCURSOR
14:28:22 360  	) AS
14:28:22 361  	BEGIN
14:28:22 362  	  OPEN out_request_files FOR
14:28:22 363  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
14:28:22 364  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
14:28:22 365  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
14:28:22 366  	  AND rf.ID = u.CC_REQUEST_FILE_ID
14:28:22 367  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
14:28:22 368  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
14:28:22 369  	  MINUS
14:28:22 370  	  SELECT rf.ID, rf.FILE_NAME
14:28:22 371  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
14:28:22 372  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
14:28:22 373  	  AND rf.ID = u.CC_REQUEST_FILE_ID
14:28:22 374  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
14:28:22 375  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
14:28:22 376  	END COMPLETABLE_REQUESTS_W_FAILS;
14:28:22 377  
14:28:22 378  	/****************************************************************************/
14:28:22 379  
14:28:22 380  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
14:28:22 381  	  in_account_id IN NUMBER,
14:28:22 382  	  out_group_id	OUT NUMBER
14:28:22 383  	) AS
14:28:22 384  	BEGIN
14:28:22 385  	  PROCS_ACCOUNT_V23.GET_GROUP_ID_BY_ACCOUNT_ID(
14:28:22 386  	    in_account_id => in_account_id,
14:28:22 387  	    out_group_id => out_group_id
14:28:22 388  	  );
14:28:22 389  	END GET_GROUP_ID_BY_ACCOUNT_ID;
14:28:22 390  
14:28:22 391  	/****************************************************************************/
14:28:22 392  
14:28:22 393  	PROCEDURE GET_LICENSE_BY_ID (
14:28:22 394  	  in_license_id  IN NUMBER,
14:28:22 395  	  out_result_set OUT SYS_REFCURSOR
14:28:22 396  	) AS
14:28:22 397  	BEGIN
14:28:22 398  	  PROCS_LICENSE_V23.GET_LICENSE_BY_ID(
14:28:22 399  	    in_license_id => in_license_id,
14:28:22 400  	    out_result_set => out_result_set
14:28:22 401  	  );
14:28:22 402  	END GET_LICENSE_BY_ID;
14:28:22 403  
14:28:22 404  END PROCS_CUPY;
14:28:22 405  .
14:28:22 SQL> /

Package body created.

Elapsed: 00:00:00.44
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_entitlement.sql
Compiling body for procs_entitlement.sql
14:28:22 SQL> CREATE OR REPLACE
14:28:22   2  PACKAGE BODY PROCS_ENTITLEMENT_V23 AS
14:28:22   3  
14:28:22   4  	PROCEDURE GET_ALL_ENTITLEMENTS(
14:28:22   5  	  in_group_id	 IN  NUMBER,
14:28:22   6  	  out_result_set OUT SYS_REFCURSOR)
14:28:22   7  	AS
14:28:22   8  	  -- CONSTANTS
14:28:22   9  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
14:28:22  10  	  -- EXCEPTIONS
14:28:22  11  	  NOT_FOUND	  EXCEPTION;
14:28:22  12  	  UNKNOWN_ERROR   EXCEPTION;
14:28:22  13  	  -- VARIABLES
14:28:22  14  	  var_subs	  SYS_REFCURSOR;
14:28:22  15  	BEGIN
14:28:22  16  	  OPEN out_result_set FOR
14:28:22  17  
14:28:22  18  	SELECT
14:28:22  19  	  P.ENTITLEMENT,
14:28:22  20  	  P.NAME,
14:28:22  21  	  0 INHERITED,
14:28:22  22  	  P.IS_SHAREABLE,
14:28:22  23  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
14:28:22  24  	FROM
14:28:22  25  	  SUBSCRIPTION SB
14:28:22  26  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
14:28:22  27  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
14:28:22  28  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
14:28:22  29  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
14:28:22  30  	  INNER JOIN PRODUCT P ON P.ID = PO.PRODUCT_ID
14:28:22  31  	WHERE
14:28:22  32  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
14:28:22  33  	  AND LIC.START_DATE <= SYSDATE
14:28:22  34  	  AND AC.GROUP_ID = in_group_id
14:28:22  35  	GROUP BY
14:28:22  36  	  P.ENTITLEMENT, 0, P.IS_SHAREABLE, P.NAME
14:28:22  37  UNION ALL
14:28:22  38  	SELECT
14:28:22  39  	  P.ENTITLEMENT,
14:28:22  40  	  P.NAME,
14:28:22  41  	  1 INHERITED,
14:28:22  42  	  P.IS_SHAREABLE,
14:28:22  43  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
14:28:22  44  	FROM
14:28:22  45  	  ACCOUNT BORROWER,
14:28:22  46  	  SUBSCRIPTION S,
14:28:22  47  	  LICENSE LIC,
14:28:22  48  	  OFFER_PRODUCT_OFFERING OPO,
14:28:22  49  	  PRODUCT_OFFERING PO,
14:28:22  50  	  PRODUCT P,
14:28:22  51  	  GROUP_ACCOUNT GA,
14:28:22  52  	  SUBSCRIPTION_SHARE SS
14:28:22  53  	WHERE
14:28:22  54  	  BORROWER.GROUP_ID = in_group_id
14:28:22  55  	  AND LIC.SUBSCRIPTION_ID = S.ID
14:28:22  56  	  AND OPO.OFFER_ID = LIC.OFFER_ID
14:28:22  57  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
14:28:22  58  	  AND PO.PRODUCT_ID = P.ID
14:28:22  59  	  AND GA.SUBSCRIPTION_ID = S.ID
14:28:22  60  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
14:28:22  61  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
14:28:22  62  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
14:28:22  63  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
14:28:22  64  	  AND P.IS_SHAREABLE = 1
14:28:22  65  	GROUP BY
14:28:22  66  	  P.ENTITLEMENT, 0, P.IS_SHAREABLE, P.NAME;
14:28:22  67  
14:28:22  68  	EXCEPTION
14:28:22  69  	  WHEN OTHERS THEN
14:28:22  70  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22  71  	      SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22  72  	END GET_ALL_ENTITLEMENTS;
14:28:22  73  
14:28:22  74  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
14:28:22  75  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:22  76  	  out_result_set OUT SYS_REFCURSOR)
14:28:22  77  	AS
14:28:22  78  	  -- CONSTANTS
14:28:22  79  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
14:28:22  80  	  -- EXCEPTIONS
14:28:22  81  	  NOT_FOUND	  EXCEPTION;
14:28:22  82  	  UNKNOWN_ERROR   EXCEPTION;
14:28:22  83  	  -- VARIABLES
14:28:22  84  	  var_subs	  SYS_REFCURSOR;
14:28:22  85  	BEGIN
14:28:22  86  	  OPEN out_result_set FOR
14:28:22  87  
14:28:22  88  	      SELECT
14:28:22  89  		p.entitlement,
14:28:22  90  		p.name,
14:28:22  91  		0 INHERITED,
14:28:22  92  		p.IS_SHAREABLE,
14:28:22  93  		sysdate as EXPIRES
14:28:22  94  	      FROM
14:28:22  95  		offer_offer_chain ooc,
14:28:22  96  		offer o,
14:28:22  97  		offer_product_offering opo,
14:28:22  98  		product_offering po,
14:28:22  99  		product p
14:28:22 100  	      WHERE
14:28:22 101  		o.id = ooc.offer_id AND
14:28:22 102  		opo.offer_id = o.id AND
14:28:22 103  		po.id = opo.product_offering_id AND
14:28:22 104  		p.id = po.product_id AND
14:28:22 105  		ooc.offer_chain_id =
14:28:22 106  		(SELECT
14:28:22 107  		    ocmd.offer_chain_id
14:28:22 108  		  FROM
14:28:22 109  		      offer_chain_meta_data ocmd
14:28:22 110  		  WHERE
14:28:22 111  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
14:28:22 112  		      ocmd.value = in_product_id AND
14:28:22 113  		      rownum < 2
14:28:22 114  		)
14:28:22 115  	      ;
14:28:22 116  
14:28:22 117  	EXCEPTION
14:28:22 118  	  WHEN OTHERS THEN
14:28:22 119  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 120  	      SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 121  	END GET_ITUNES_ENTITLEMENTS;
14:28:22 122  
14:28:22 123  END PROCS_ENTITLEMENT_V23;
14:28:22 124  .
14:28:22 SQL> /

Package body created.

Elapsed: 00:00:00.07
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_history.sql
Compiling body for procs_history.sql
14:28:22 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V23" AS
14:28:22   2  
14:28:22   3  PROCEDURE CREATE_AASR_HISTORY(
14:28:22   4  	in_id			     IN CORE_OWNER.AMAZON_APPSTORE_RECEIPT.ID%TYPE,
14:28:22   5  	in_system_activity_reason_id IN NUMBER,
14:28:22   6  	in_created_by		     IN VARCHAR2
14:28:22   7  ) AS
14:28:22   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_AASR_HISTORY';
14:28:22   9  var_id		  AMAZON_APPSTORE_RECEIPT.ID%TYPE;
14:28:22  10  var_subscription_id AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE;
14:28:22  11  var_user_id	  AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE;
14:28:22  12  var_item_type	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE;
14:28:22  13  var_start_date	  AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE;
14:28:22  14  var_end_date	  AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE;
14:28:22  15  var_sku		  AMAZON_APPSTORE_RECEIPT.SKU%TYPE;
14:28:22  16  var_purchase_token  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE;
14:28:22  17  var_create_date	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE%TYPE;
14:28:22  18  var_created_by	  AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE;
14:28:22  19  var_update_date	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE%TYPE;
14:28:22  20  var_updated_by	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE;
14:28:22  21  var_last_check_date AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE;
14:28:22  22  BEGIN
14:28:22  23  	SELECT
14:28:22  24  	  AMAZON_APPSTORE_RECEIPT.ID,
14:28:22  25  	  AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
14:28:22  26  	  AMAZON_APPSTORE_RECEIPT.USER_ID,
14:28:22  27  	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
14:28:22  28  	  AMAZON_APPSTORE_RECEIPT.START_DATE,
14:28:22  29  	  AMAZON_APPSTORE_RECEIPT.END_DATE,
14:28:22  30  	  AMAZON_APPSTORE_RECEIPT.SKU,
14:28:22  31  	  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
14:28:22  32  	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
14:28:22  33  	  AMAZON_APPSTORE_RECEIPT.CREATED_BY,
14:28:22  34  	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
14:28:22  35  	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
14:28:22  36  	  AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
14:28:22  37  	INTO
14:28:22  38  	  var_id,
14:28:22  39  	  var_subscription_id,
14:28:22  40  	  var_user_id,
14:28:22  41  	  var_item_type,
14:28:22  42  	  var_start_date,
14:28:22  43  	  var_end_date,
14:28:22  44  	  var_sku,
14:28:22  45  	  var_purchase_token,
14:28:22  46  	  var_create_date,
14:28:22  47  	  var_created_by,
14:28:22  48  	  var_update_date,
14:28:22  49  	  var_updated_by,
14:28:22  50  	  var_last_check_date
14:28:22  51  	FROM
14:28:22  52  	  AMAZON_APPSTORE_RECEIPT
14:28:22  53  	WHERE
14:28:22  54  	  AMAZON_APPSTORE_RECEIPT.ID = in_id;
14:28:22  55  
14:28:22  56  	CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_AASR_HISTORY(
14:28:22  57  	    var_id,
14:28:22  58  	    var_subscription_id,
14:28:22  59  	    var_user_id,
14:28:22  60  	    var_item_type,
14:28:22  61  	    var_start_date,
14:28:22  62  	    var_end_date,
14:28:22  63  	    var_sku,
14:28:22  64  	    var_purchase_token,
14:28:22  65  	    var_create_date,
14:28:22  66  	    var_created_by,
14:28:22  67  	    var_update_date,
14:28:22  68  	    var_updated_by,
14:28:22  69  	    in_system_activity_reason_id,
14:28:22  70  	    in_created_by,
14:28:22  71  	    var_last_check_date
14:28:22  72  	);
14:28:22  73  END CREATE_AASR_HISTORY;
14:28:22  74  
14:28:22  75  PROCEDURE CREATE_ADDRESS_HISTORY(
14:28:22  76  	in_address_id		     IN NUMBER,
14:28:22  77  	in_system_activity_reason_id IN NUMBER
14:28:22  78  ) AS
14:28:22  79  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
14:28:22  80  -- VARIABLES
14:28:22  81  var_address1    ADDRESS.ADDRESS1%TYPE;
14:28:22  82  var_address2    ADDRESS.ADDRESS2%TYPE;
14:28:22  83  var_city	      ADDRESS.CITY%TYPE;
14:28:22  84  var_state       ADDRESS.STATE%TYPE;
14:28:22  85  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
14:28:22  86  var_country     ADDRESS.COUNTRY%TYPE;
14:28:22  87  var_created_by  ADDRESS.CREATED_BY%TYPE;
14:28:22  88  var_create_date ADDRESS.CREATE_DATE%TYPE;
14:28:22  89  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
14:28:22  90  var_update_date ADDRESS.UPDATE_DATE%TYPE;
14:28:22  91  -- EXCEPTIONS
14:28:22  92  BAD_ADDRESS_ID	     EXCEPTION;
14:28:22  93  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:28:22  94  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22  95  BEGIN
14:28:22  96  
14:28:22  97  	BEGIN
14:28:22  98  	  SELECT
14:28:22  99  	    ADDRESS.ADDRESS1,
14:28:22 100  	    ADDRESS.ADDRESS2,
14:28:22 101  	    ADDRESS.CITY,
14:28:22 102  	    ADDRESS.STATE,
14:28:22 103  	    ADDRESS.POSTAL_CODE,
14:28:22 104  	    ADDRESS.COUNTRY,
14:28:22 105  	    ADDRESS.CREATED_BY,
14:28:22 106  	    ADDRESS.CREATE_DATE,
14:28:22 107  	    ADDRESS.UPDATED_BY,
14:28:22 108  	    ADDRESS.UPDATE_DATE
14:28:22 109  	    into
14:28:22 110  	    var_address1,
14:28:22 111  	    var_address2,
14:28:22 112  	    var_city,
14:28:22 113  	    var_state,
14:28:22 114  	    var_postal_code,
14:28:22 115  	    var_country,
14:28:22 116  	    var_created_by,
14:28:22 117  	    var_create_date,
14:28:22 118  	    var_updated_by,
14:28:22 119  	    var_update_date
14:28:22 120  	  FROM
14:28:22 121  	    ADDRESS
14:28:22 122  	  WHERE
14:28:22 123  	    ADDRESS.ID = in_address_id;
14:28:22 124  	  EXCEPTION
14:28:22 125  	    WHEN NO_DATA_FOUND THEN
14:28:22 126  	      RAISE BAD_ADDRESS_ID;
14:28:22 127  	END;
14:28:22 128  
14:28:22 129  	BEGIN
14:28:22 130  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_ADDRESS_HISTORY(
14:28:22 131  	    in_address_id,
14:28:22 132  	    in_system_activity_reason_id,
14:28:22 133  	    var_address1,
14:28:22 134  	    var_address2,
14:28:22 135  	    var_city,
14:28:22 136  	    var_state,
14:28:22 137  	    var_postal_code,
14:28:22 138  	    var_country,
14:28:22 139  	    var_created_by,
14:28:22 140  	    var_create_date,
14:28:22 141  	    var_updated_by,
14:28:22 142  	    var_update_date
14:28:22 143  	  );
14:28:22 144  	  EXCEPTION
14:28:22 145  	    WHEN OTHERS THEN
14:28:22 146  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 147  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 148  	END;
14:28:22 149  
14:28:22 150  EXCEPTION
14:28:22 151  WHEN BAD_ADDRESS_ID THEN
14:28:22 152  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 153  	  SPROC_NAME, 'Bad recipientAddress id');
14:28:22 154  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 155  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 156  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 157  WHEN OTHERS THEN
14:28:22 158  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 159  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 160  END CREATE_ADDRESS_HISTORY;
14:28:22 161  
14:28:22 162  /********************************************************************/
14:28:22 163  
14:28:22 164  PROCEDURE CREATE_ACCOUNT_HISTORY(
14:28:22 165  	in_account_id		     IN NUMBER,
14:28:22 166  	in_system_activity_reason_id IN NUMBER
14:28:22 167  ) AS
14:28:22 168  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
14:28:22 169  -- VARIABLES
14:28:22 170  var_account_status_id  NUMBER;
14:28:22 171  var_suspend_date	     DATE;
14:28:22 172  var_group_id	     NUMBER;
14:28:22 173  var_instrument_type_id NUMBER;
14:28:22 174  var_instrument_id      NUMBER;
14:28:22 175  var_updated_by	     VARCHAR2(255);
14:28:22 176  var_update_date	     DATE;
14:28:22 177  -- EXCEPTIONS
14:28:22 178  BAD_ACCOUNT_ID	     EXCEPTION;
14:28:22 179  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:28:22 180  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 181  BEGIN
14:28:22 182  
14:28:22 183  	BEGIN
14:28:22 184  	  SELECT
14:28:22 185  	    ACCOUNT.ACCOUNT_STATUS_ID,
14:28:22 186  	    ACCOUNT.GROUP_ID,
14:28:22 187  	    ACCOUNT.INSTRUMENT_TYPE_ID,
14:28:22 188  	    ACCOUNT.INSTRUMENT_ID,
14:28:22 189  	    ACCOUNT.UPDATED_BY,
14:28:22 190  	    ACCOUNT.UPDATE_DATE
14:28:22 191  	    into
14:28:22 192  	    var_account_status_id,
14:28:22 193  	    var_group_id,
14:28:22 194  	    var_instrument_type_id,
14:28:22 195  	    var_instrument_id,
14:28:22 196  	    var_updated_by,
14:28:22 197  	    var_update_date
14:28:22 198  	  FROM
14:28:22 199  	    ACCOUNT
14:28:22 200  	  WHERE
14:28:22 201  	    ACCOUNT.ID = in_account_id;
14:28:22 202  	  EXCEPTION
14:28:22 203  	    WHEN NO_DATA_FOUND THEN
14:28:22 204  	      RAISE BAD_ACCOUNT_ID;
14:28:22 205  	END;
14:28:22 206  
14:28:22 207  	BEGIN
14:28:22 208  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_ACCOUNT_HISTORY(
14:28:22 209  	    in_account_id,
14:28:22 210  	    var_suspend_date,
14:28:22 211  	    var_group_id,
14:28:22 212  	    var_updated_by,
14:28:22 213  	    var_update_date,
14:28:22 214  	    in_system_activity_reason_id,
14:28:22 215  	    var_account_status_id,
14:28:22 216  	    var_instrument_type_id,
14:28:22 217  	    var_instrument_id
14:28:22 218  	  );
14:28:22 219  	  EXCEPTION
14:28:22 220  	    WHEN OTHERS THEN
14:28:22 221  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 222  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 223  	END;
14:28:22 224  
14:28:22 225  EXCEPTION
14:28:22 226  WHEN BAD_ACCOUNT_ID THEN
14:28:22 227  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 228  	  SPROC_NAME, 'Bad account id');
14:28:22 229  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 230  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 231  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 232  WHEN OTHERS THEN
14:28:22 233  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 234  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 235  END CREATE_ACCOUNT_HISTORY;
14:28:22 236  
14:28:22 237  /********************************************************************/
14:28:22 238  
14:28:22 239  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
14:28:22 240  	in_subscription_id	     IN NUMBER,
14:28:22 241  	in_system_activity_reason_id IN NUMBER
14:28:22 242  ) AS
14:28:22 243  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
14:28:22 244  -- VARIABLES
14:28:22 245  var_account_id		    NUMBER;
14:28:22 246  var_purchase_date 	    DATE;
14:28:22 247  var_offer_chain_id	    NUMBER;
14:28:22 248  var_suspend_date		    DATE;
14:28:22 249  var_termination_date	    DATE;
14:28:22 250  var_days_ramaining_adjustment NUMBER;
14:28:22 251  var_sct_id		    NUMBER;
14:28:22 252  var_updated_by		    VARCHAR2(255);
14:28:22 253  var_update_date		    DATE;
14:28:22 254  -- EXCEPTIONS
14:28:22 255  BAD_SUBSCRIPTION_ID    EXCEPTION;
14:28:22 256  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:28:22 257  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 258  BEGIN
14:28:22 259  
14:28:22 260  	BEGIN
14:28:22 261  	  SELECT
14:28:22 262  	    SUBSCRIPTION.account_id,
14:28:22 263  	    SUBSCRIPTION.PURCHASE_DATE,
14:28:22 264  	    SUBSCRIPTION.OFFER_CHAIN_ID,
14:28:22 265  	    SUBSCRIPTION.SUSPEND_DATE,
14:28:22 266  	    SUBSCRIPTION.TERMINATION_DATE,
14:28:22 267  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
14:28:22 268  	    SUBSCRIPTION.SCT_ID,
14:28:22 269  	    SUBSCRIPTION.UPDATED_BY,
14:28:22 270  	    SUBSCRIPTION.UPDATE_DATE
14:28:22 271  	    into
14:28:22 272  	    var_account_id,
14:28:22 273  	    var_purchase_date,
14:28:22 274  	    var_offer_chain_id,
14:28:22 275  	    var_suspend_date,
14:28:22 276  	    var_termination_date,
14:28:22 277  	    var_days_ramaining_adjustment,
14:28:22 278  	    var_sct_id,
14:28:22 279  	    var_updated_by,
14:28:22 280  	    var_update_date
14:28:22 281  	  FROM
14:28:22 282  	    SUBSCRIPTION
14:28:22 283  	  WHERE
14:28:22 284  	    SUBSCRIPTION.ID = in_subscription_id;
14:28:22 285  	  EXCEPTION
14:28:22 286  	    WHEN NO_DATA_FOUND THEN
14:28:22 287  	      RAISE BAD_SUBSCRIPTION_ID;
14:28:22 288  	END;
14:28:22 289  
14:28:22 290  	BEGIN
14:28:22 291  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_SUBSCRIPTION_HISTORY(
14:28:22 292  	    in_subscription_id,
14:28:22 293  	    var_account_id,
14:28:22 294  	    var_purchase_date,
14:28:22 295  	    var_offer_chain_id,
14:28:22 296  	    var_suspend_date,
14:28:22 297  	    var_termination_date,
14:28:22 298  	    var_days_ramaining_adjustment,
14:28:22 299  	    var_sct_id,
14:28:22 300  	    var_updated_by,
14:28:22 301  	    var_update_date,
14:28:22 302  	    in_system_activity_reason_id
14:28:22 303  	  );
14:28:22 304  	  EXCEPTION
14:28:22 305  	    WHEN OTHERS THEN
14:28:22 306  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 307  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 308  	END;
14:28:22 309  
14:28:22 310  EXCEPTION
14:28:22 311  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:22 312  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 313  	  SPROC_NAME, 'No such subscription');
14:28:22 314  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 315  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 316  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 317  WHEN OTHERS THEN
14:28:22 318  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 320  END CREATE_SUBSCRIPTION_HISTORY;
14:28:22 321  
14:28:22 322  /********************************************************************/
14:28:22 323  
14:28:22 324  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
14:28:22 325  	in_credit_card_id	      IN NUMBER,
14:28:22 326  	in_system_activity_reason_id  IN NUMBER
14:28:22 327  ) AS
14:28:22 328  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
14:28:22 329  -- VARIABLES
14:28:22 330  var_account_id		     NUMBER;
14:28:22 331  var_instrument_name	     VARCHAR2(255);
14:28:22 332  var_private_card_holder_name   VARCHAR2(256);
14:28:22 333  var_private_street_address     VARCHAR2(256);
14:28:22 334  var_private_street_address2    VARCHAR2(256);
14:28:22 335  var_state 		     VARCHAR2(50);
14:28:22 336  var_city			     VARCHAR2(50);
14:28:22 337  var_postal_code		     VARCHAR2(20);
14:28:22 338  var_country		     CHAR(2);
14:28:22 339  var_last_four_cc		     VARCHAR2(4);
14:28:22 340  var_expiration_date	     DATE;
14:28:22 341  var_credit_card_type_id	     NUMBER;
14:28:22 342  var_secret_token		     VARCHAR2(255);
14:28:22 343  var_chase_profile_id	     VARCHAR2(255);
14:28:22 344  var_credit_card_status_id      NUMBER;
14:28:22 345  var_updated_by		     VARCHAR2(255);
14:28:22 346  var_update_date		     DATE;
14:28:22 347  -- EXCEPTIONS
14:28:22 348  BAD_CREDIT_CARD_ID     EXCEPTION;
14:28:22 349  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:28:22 350  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 351  BEGIN
14:28:22 352  
14:28:22 353  	BEGIN
14:28:22 354  	  SELECT
14:28:22 355  	    ACCOUNT_ID,
14:28:22 356  	    INSTRUMENT_NAME,
14:28:22 357  	    PRIVATE_CARD_HOLDER_NAME,
14:28:22 358  	    PRIVATE_STREET_ADDRESS,
14:28:22 359  	    PRIVATE_STREET_ADDRESS2,
14:28:22 360  	    STATE,
14:28:22 361  	    CITY,
14:28:22 362  	    POSTAL_CODE,
14:28:22 363  	    COUNTRY,
14:28:22 364  	    LAST_FOUR_CC,
14:28:22 365  	    EXPIRATION_DATE,
14:28:22 366  	    CREDIT_CARD_TYPE_ID,
14:28:22 367  	    SECRET_TOKEN,
14:28:22 368  	    CHASE_PROFILE_ID,
14:28:22 369  	    CREDIT_CARD_STATUS_ID,
14:28:22 370  	    UPDATED_BY,
14:28:22 371  	    UPDATE_DATE
14:28:22 372  	    into
14:28:22 373  	    var_account_id,
14:28:22 374  	    var_instrument_name,
14:28:22 375  	    var_private_card_holder_name,
14:28:22 376  	    var_private_street_address,
14:28:22 377  	    var_private_street_address2,
14:28:22 378  	    var_state,
14:28:22 379  	    var_city,
14:28:22 380  	    var_postal_code,
14:28:22 381  	    var_country,
14:28:22 382  	    var_last_four_cc,
14:28:22 383  	    var_expiration_date,
14:28:22 384  	    var_credit_card_type_id,
14:28:22 385  	    var_secret_token,
14:28:22 386  	    var_chase_profile_id,
14:28:22 387  	    var_credit_card_status_id,
14:28:22 388  	    var_updated_by,
14:28:22 389  	    var_update_date
14:28:22 390  	  FROM
14:28:22 391  	    CREDIT_CARD
14:28:22 392  	  WHERE
14:28:22 393  	    CREDIT_CARD.ID = in_credit_card_id;
14:28:22 394  	  EXCEPTION
14:28:22 395  	    WHEN NO_DATA_FOUND THEN
14:28:22 396  	      RAISE BAD_CREDIT_CARD_ID;
14:28:22 397  	END;
14:28:22 398  
14:28:22 399  	BEGIN
14:28:22 400  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_CREDIT_CARD_HISTORY(
14:28:22 401  	    in_credit_card_id,
14:28:22 402  	    var_account_id,
14:28:22 403  	    var_instrument_name,
14:28:22 404  	    var_private_card_holder_name,
14:28:22 405  	    var_private_street_address,
14:28:22 406  	    var_private_street_address2,
14:28:22 407  	    var_state,
14:28:22 408  	    var_city,
14:28:22 409  	    var_postal_code,
14:28:22 410  	    var_country,
14:28:22 411  	    var_last_four_cc,
14:28:22 412  	    var_expiration_date,
14:28:22 413  	    var_credit_card_type_id,
14:28:22 414  	    var_secret_token,
14:28:22 415  	    var_chase_profile_id,
14:28:22 416  	    var_credit_card_status_id,
14:28:22 417  	    var_updated_by,
14:28:22 418  	    var_update_date,
14:28:22 419  	    in_system_activity_reason_id
14:28:22 420  	  );
14:28:22 421  	  EXCEPTION
14:28:22 422  	    WHEN OTHERS THEN
14:28:22 423  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 424  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 425  	END;
14:28:22 426  
14:28:22 427  EXCEPTION
14:28:22 428  WHEN BAD_CREDIT_CARD_ID THEN
14:28:22 429  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 430  	  SPROC_NAME, 'No such credit card');
14:28:22 431  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 432  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 433  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 434  WHEN OTHERS THEN
14:28:22 435  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 437  END CREATE_CREDIT_CARD_HISTORY;
14:28:22 438  
14:28:22 439  /********************************************************************/
14:28:22 440  
14:28:22 441  PROCEDURE CREATE_PAYPAL_HISTORY(
14:28:22 442  /*
14:28:22 443  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 444  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 445  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:22 446  */
14:28:22 447  	in_paypal_id		      IN NUMBER,
14:28:22 448  	in_system_activity_reason_id  IN NUMBER
14:28:22 449  ) AS
14:28:22 450  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
14:28:22 451  -- VARIABLES
14:28:22 452  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
14:28:22 453  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
14:28:22 454  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
14:28:22 455  var_created_by		   PAYPAL.CREATED_BY%TYPE;
14:28:22 456  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
14:28:22 457  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
14:28:22 458  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
14:28:22 459  var_state 		   PAYPAL.STATE%TYPE;
14:28:22 460  var_city			   PAYPAL.CITY%TYPE;
14:28:22 461  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
14:28:22 462  var_country		   PAYPAL.COUNTRY%TYPE;
14:28:22 463  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
14:28:22 464  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
14:28:22 465  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
14:28:22 466  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
14:28:22 467  -- EXCEPTION
14:28:22 468  BAD_PAYPAL_ID	  EXCEPTION;
14:28:22 469  CAN_NOT_ADD_HISTORY EXCEPTION;
14:28:22 470  EXCEPTION_MESSAGE   VARCHAR2(1024);
14:28:22 471  BEGIN
14:28:22 472  
14:28:22 473  	BEGIN
14:28:22 474  	  SELECT
14:28:22 475  	    ACCOUNT_ID,
14:28:22 476  	    INSTRUMENT_NAME,
14:28:22 477  	    PRIVATE_EMAIL_ADDRESS,
14:28:22 478  	    UPDATE_DATE,
14:28:22 479  	    UPDATED_BY,
14:28:22 480  	    PAYPAL_STATUS_ID,
14:28:22 481  	    PRIVATE_STREET_ADDRESS,
14:28:22 482  	    PRIVATE_STREET_ADDRESS2,
14:28:22 483  	    STATE,
14:28:22 484  	    CITY,
14:28:22 485  	    POSTAL_CODE,
14:28:22 486  	    COUNTRY,
14:28:22 487  	    EXPIRATION_DATE,
14:28:22 488  	    SECRET_TOKEN
14:28:22 489  	  INTO
14:28:22 490  	    var_account_id,
14:28:22 491  	    var_instrument_name,
14:28:22 492  	    var_private_email_address,
14:28:22 493  	    var_update_date,
14:28:22 494  	    var_updated_by,
14:28:22 495  	    var_paypal_status_id,
14:28:22 496  	    var_paypal_prvt_street_addr,
14:28:22 497  	    var_paypal_prvt_street_addr2,
14:28:22 498  	    var_state,
14:28:22 499  	    var_city,
14:28:22 500  	    var_postal_code,
14:28:22 501  	    var_country,
14:28:22 502  	    var_expiration_date,
14:28:22 503  	    var_secret_token
14:28:22 504  	  FROM
14:28:22 505  	    PAYPAL
14:28:22 506  	  WHERE
14:28:22 507  	    ID = in_paypal_id;
14:28:22 508  	  EXCEPTION
14:28:22 509  	    WHEN NO_DATA_FOUND THEN
14:28:22 510  	      RAISE BAD_PAYPAL_ID;
14:28:22 511  	END;
14:28:22 512  
14:28:22 513  	BEGIN
14:28:22 514  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_PAYPAL_HISTORY(
14:28:22 515  	    in_paypal_id,
14:28:22 516  	    var_account_id,
14:28:22 517  	    var_instrument_name,
14:28:22 518  	    var_private_email_address,
14:28:22 519  	    var_updated_by,
14:28:22 520  	    var_update_date,
14:28:22 521  	    var_paypal_status_id,
14:28:22 522  	    var_paypal_prvt_street_addr,
14:28:22 523  	    var_paypal_prvt_street_addr2,
14:28:22 524  	    var_state,
14:28:22 525  	    var_city,
14:28:22 526  	    var_postal_code,
14:28:22 527  	    var_country,
14:28:22 528  	    var_expiration_date,
14:28:22 529  	    in_system_activity_reason_id,
14:28:22 530  	    var_secret_token
14:28:22 531  	  );
14:28:22 532  	  EXCEPTION
14:28:22 533  	    WHEN OTHERS THEN
14:28:22 534  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 535  	      RAISE CAN_NOT_ADD_HISTORY;
14:28:22 536  	END;
14:28:22 537  
14:28:22 538  EXCEPTION
14:28:22 539  WHEN BAD_PAYPAL_ID THEN
14:28:22 540  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 541  	  SPROC_NAME, 'No such paypal');
14:28:22 542  WHEN CAN_NOT_ADD_HISTORY THEN
14:28:22 543  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 544  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
14:28:22 545  WHEN OTHERS THEN
14:28:22 546  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 547  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 548  END CREATE_PAYPAL_HISTORY;
14:28:22 549  
14:28:22 550  /********************************************************************/
14:28:22 551  
14:28:22 552  PROCEDURE CREATE_GIFT_CERT_HISTORY(
14:28:22 553  	in_gift_certificate_id	      IN NUMBER,
14:28:22 554  	in_system_activity_reason_id  IN NUMBER
14:28:22 555  ) AS
14:28:22 556  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
14:28:22 557  -- VARIABLES
14:28:22 558  var_purchaser_group_id	     NUMBER;
14:28:22 559  var_purchase_invoice_id	     NUMBER;
14:28:22 560  var_offer_chain_id	     NUMBER;
14:28:22 561  var_expiration_date	     DATE;
14:28:22 562  var_purchase_date 	     DATE;
14:28:22 563  var_gift_certificate_status_id NUMBER;
14:28:22 564  var_code			     VARCHAR2(255);
14:28:22 565  var_recipient_name	     VARCHAR2(255);
14:28:22 566  var_gift_message		     VARCHAR2(500);
14:28:22 567  var_recipient_email	     VARCHAR2(255);
14:28:22 568  var_finalized_invoice_id	     NUMBER;
14:28:22 569  var_sender_email		     VARCHAR2(50);
14:28:22 570  var_sender_name		     VARCHAR2(50);
14:28:22 571  var_redemption_date	     DATE;
14:28:22 572  var_redeemer_group_id	     NUMBER;
14:28:22 573  var_cancelation_date	     DATE;
14:28:22 574  var_updated_by		     VARCHAR2(255);
14:28:22 575  var_update_date		     DATE;
14:28:22 576  var_recipient_address_id	     NUMBER;
14:28:22 577  var_redeemer_address_id	     NUMBER;
14:28:22 578  var_recipient_notify_date      DATE;
14:28:22 579  -- EXCEPTIONS
14:28:22 580  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
14:28:22 581  CAN_NOT_CREATE_HISTORY  EXCEPTION;
14:28:22 582  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:28:22 583  BEGIN
14:28:22 584  
14:28:22 585  	BEGIN
14:28:22 586  	  SELECT
14:28:22 587  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
14:28:22 588  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
14:28:22 589  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
14:28:22 590  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
14:28:22 591  	    GIFT_CERTIFICATE.PURCHASE_DATE,
14:28:22 592  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
14:28:22 593  	    GIFT_CERTIFICATE.CODE,
14:28:22 594  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
14:28:22 595  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
14:28:22 596  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
14:28:22 597  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
14:28:22 598  	    GIFT_CERTIFICATE.SENDER_EMAIL,
14:28:22 599  	    GIFT_CERTIFICATE.SENDER_NAME,
14:28:22 600  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
14:28:22 601  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
14:28:22 602  	    GIFT_CERTIFICATE.CANCELATION_DATE,
14:28:22 603  	    GIFT_CERTIFICATE.UPDATED_BY,
14:28:22 604  	    GIFT_CERTIFICATE.UPDATE_DATE,
14:28:22 605  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
14:28:22 606  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
14:28:22 607  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
14:28:22 608  	    into
14:28:22 609  	    var_purchaser_group_id,
14:28:22 610  	    var_purchase_invoice_id,
14:28:22 611  	    var_offer_chain_id,
14:28:22 612  	    var_expiration_date,
14:28:22 613  	    var_purchase_date,
14:28:22 614  	    var_gift_certificate_status_id,
14:28:22 615  	    var_code,
14:28:22 616  	    var_recipient_name,
14:28:22 617  	    var_gift_message,
14:28:22 618  	    var_recipient_email,
14:28:22 619  	    var_finalized_invoice_id,
14:28:22 620  	    var_sender_email,
14:28:22 621  	    var_sender_name,
14:28:22 622  	    var_redemption_date,
14:28:22 623  	    var_redeemer_group_id,
14:28:22 624  	    var_cancelation_date,
14:28:22 625  	    var_updated_by,
14:28:22 626  	    var_update_date,
14:28:22 627  	    var_recipient_address_id,
14:28:22 628  	    var_redeemer_address_id,
14:28:22 629  	    var_recipient_notify_date
14:28:22 630  	  FROM
14:28:22 631  	    GIFT_CERTIFICATE
14:28:22 632  	  WHERE
14:28:22 633  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
14:28:22 634  	END;
14:28:22 635  
14:28:22 636  	BEGIN
14:28:22 637  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_GIFT_CERT_HISTORY(
14:28:22 638  	    in_gift_certificate_id,
14:28:22 639  	    var_purchaser_group_id,
14:28:22 640  	    var_purchase_invoice_id,
14:28:22 641  	    var_offer_chain_id,
14:28:22 642  	    var_expiration_date,
14:28:22 643  	    var_purchase_date,
14:28:22 644  	    var_gift_certificate_status_id,
14:28:22 645  	    var_code,
14:28:22 646  	    var_updated_by,
14:28:22 647  	    var_update_date,
14:28:22 648  	    in_system_activity_reason_id,
14:28:22 649  	    var_recipient_name,
14:28:22 650  	    var_gift_message,
14:28:22 651  	    var_recipient_email,
14:28:22 652  	    var_finalized_invoice_id,
14:28:22 653  	    var_sender_email,
14:28:22 654  	    var_sender_name,
14:28:22 655  	    var_redemption_date,
14:28:22 656  	    var_redeemer_group_id,
14:28:22 657  	    var_cancelation_date,
14:28:22 658  	    var_recipient_address_id,
14:28:22 659  	    var_redeemer_address_id,
14:28:22 660  	    var_recipient_notify_date
14:28:22 661  	  );
14:28:22 662  	  EXCEPTION
14:28:22 663  	    WHEN OTHERS THEN
14:28:22 664  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 665  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 666  	END;
14:28:22 667  
14:28:22 668  EXCEPTION
14:28:22 669  WHEN BAD_GIFT_CERTIFICATE_ID THEN
14:28:22 670  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 671  	  SPROC_NAME, 'No such gift certificate');
14:28:22 672  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 673  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 674  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 675  WHEN OTHERS THEN
14:28:22 676  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 677  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 678  END CREATE_GIFT_CERT_HISTORY;
14:28:22 679  
14:28:22 680  /********************************************************************/
14:28:22 681  
14:28:22 682  PROCEDURE CREATE_TRANSACTION_HISTORY (
14:28:22 683  	in_transaction_id	     IN NUMBER,
14:28:22 684  	in_system_activity_reason_id IN NUMBER
14:28:22 685  ) AS
14:28:22 686  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
14:28:22 687  -- VARIABLES
14:28:22 688  var_transaction_status_id  TRANSACTION.TRANSACTION_STATUS_ID%TYPE;
14:28:22 689  var_transaction_amount	 TRANSACTION.TRANSACTION_AMOUNT%TYPE;
14:28:22 690  var_updated_by		 TRANSACTION.UPDATED_BY%TYPE;
14:28:22 691  var_update_date		 TRANSACTION.UPDATE_DATE%TYPE;
14:28:22 692  var_order_id		 TRANSACTION.ORDER_ID%TYPE;
14:28:22 693  var_charge_id		 TRANSACTION.CHARGE_ID%TYPE;
14:28:22 694  var_is_refund		 TRANSACTION.IS_REFUND%TYPE;
14:28:22 695  var_is_settled		 TRANSACTION.IS_SETTLED%TYPE;
14:28:22 696  var_transaction_type_code  TRANSACTION.TRANSACTION_TYPE_CODE%TYPE;
14:28:22 697  -- EXCEPTIONS
14:28:22 698  BAD_TRANSACTION_ID     EXCEPTION;
14:28:22 699  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:28:22 700  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 701  BEGIN
14:28:22 702  
14:28:22 703  	BEGIN
14:28:22 704  	  SELECT
14:28:22 705  	    TRANSACTION.TRANSACTION_STATUS_ID,
14:28:22 706  	    TRANSACTION.TRANSACTION_AMOUNT,
14:28:22 707  	    TRANSACTION.UPDATED_BY,
14:28:22 708  	    TRANSACTION.UPDATE_DATE,
14:28:22 709  	    TRANSACTION.ORDER_ID,
14:28:22 710  	    TRANSACTION.CHARGE_ID,
14:28:22 711  	    TRANSACTION.IS_REFUND,
14:28:22 712  	    TRANSACTION.IS_SETTLED,
14:28:22 713  	    TRANSACTION.TRANSACTION_TYPE_CODE
14:28:22 714  	    into
14:28:22 715  	    var_transaction_status_id,
14:28:22 716  	    var_transaction_amount,
14:28:22 717  	    var_updated_by,
14:28:22 718  	    var_update_date,
14:28:22 719  	    var_order_id,
14:28:22 720  	    var_charge_id,
14:28:22 721  	    var_is_refund,
14:28:22 722  	    var_is_settled,
14:28:22 723  	    var_transaction_type_code
14:28:22 724  	  FROM
14:28:22 725  	    TRANSACTION
14:28:22 726  	  WHERE
14:28:22 727  	    TRANSACTION.ID = in_transaction_id;
14:28:22 728  	  EXCEPTION
14:28:22 729  	    WHEN NO_DATA_FOUND THEN
14:28:22 730  	      RAISE BAD_TRANSACTION_ID;
14:28:22 731  	END;
14:28:22 732  
14:28:22 733  	BEGIN
14:28:22 734  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_TRANSACTION_HISTORY(
14:28:22 735  	    in_transaction_id,
14:28:22 736  	    var_transaction_status_id,
14:28:22 737  	    var_transaction_amount,
14:28:22 738  	    var_updated_by,
14:28:22 739  	    var_update_date,
14:28:22 740  	    var_order_id,
14:28:22 741  	    var_charge_id,
14:28:22 742  	    var_is_refund,
14:28:22 743  	    var_is_settled,
14:28:22 744  	    var_transaction_type_code,
14:28:22 745  	    in_system_activity_reason_id
14:28:22 746  	  );
14:28:22 747  	  EXCEPTION
14:28:22 748  	    WHEN OTHERS THEN
14:28:22 749  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 750  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 751  	END;
14:28:22 752  
14:28:22 753  EXCEPTION
14:28:22 754  WHEN BAD_TRANSACTION_ID THEN
14:28:22 755  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 756  	  SPROC_NAME, 'No such transaction');
14:28:22 757  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 758  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 759  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 760  WHEN OTHERS THEN
14:28:22 761  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 762  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 763  END CREATE_TRANSACTION_HISTORY;
14:28:22 764  
14:28:22 765  /********************************************************************/
14:28:22 766  
14:28:22 767  PROCEDURE CREATE_INVOICE_HISTORY (
14:28:22 768  /*
14:28:22 769  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 770  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 771  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:22 772  */
14:28:22 773  	in_invoice_id		     IN NUMBER,
14:28:22 774  	in_system_activity_reason_id IN NUMBER
14:28:22 775  ) AS
14:28:22 776  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
14:28:22 777  -- VARIABLES
14:28:22 778  var_invoice_status_id NUMBER;
14:28:22 779  var_updated_by	    VARCHAR2(255);
14:28:22 780  var_update_date	    DATE;
14:28:22 781  -- EXCEPTIONS
14:28:22 782  BAD_INVOICE_ID	     EXCEPTION;
14:28:22 783  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:28:22 784  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 785  BEGIN
14:28:22 786  
14:28:22 787  	BEGIN
14:28:22 788  	  SELECT
14:28:22 789  	    INVOICE.INVOICE_STATUS_ID,
14:28:22 790  	    INVOICE.UPDATED_BY,
14:28:22 791  	    INVOICE.UPDATE_DATE
14:28:22 792  	    into
14:28:22 793  	    var_invoice_status_id,
14:28:22 794  	    var_updated_by,
14:28:22 795  	    var_update_date
14:28:22 796  	  FROM
14:28:22 797  	    INVOICE
14:28:22 798  	  WHERE
14:28:22 799  	    INVOICE.ID = in_invoice_id;
14:28:22 800  	  EXCEPTION
14:28:22 801  	    WHEN NO_DATA_FOUND THEN
14:28:22 802  	      RAISE BAD_INVOICE_ID;
14:28:22 803  	END;
14:28:22 804  
14:28:22 805  	BEGIN
14:28:22 806  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_INVOICE_HISTORY(
14:28:22 807  	    in_invoice_id,
14:28:22 808  	    var_invoice_status_id,
14:28:22 809  	    var_updated_by,
14:28:22 810  	    var_update_date,
14:28:22 811  	    in_system_activity_reason_id
14:28:22 812  	  );
14:28:22 813  	  EXCEPTION
14:28:22 814  	    WHEN OTHERS THEN
14:28:22 815  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 816  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 817  	END;
14:28:22 818  
14:28:22 819  EXCEPTION
14:28:22 820  WHEN BAD_INVOICE_ID THEN
14:28:22 821  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 822  	  SPROC_NAME, 'No such invoice');
14:28:22 823  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 824  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 825  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 826  WHEN OTHERS THEN
14:28:22 827  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 828  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 829  END CREATE_INVOICE_HISTORY;
14:28:22 830  
14:28:22 831  /********************************************************************/
14:28:22 832  
14:28:22 833  PROCEDURE CREATE_LICENSE_HISTORY (
14:28:22 834  /*
14:28:22 835  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 836  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 837  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:22 838  */
14:28:22 839  	in_license_id		     IN NUMBER,
14:28:22 840  	in_system_activity_reason_id IN NUMBER
14:28:22 841  ) AS
14:28:22 842  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
14:28:22 843  -- VARIABLES
14:28:22 844  var_license_status_id	    NUMBER;
14:28:22 845  var_needs_entitlements	    NUMBER;
14:28:22 846  var_start_date		    DATE;
14:28:22 847  var_offer_id		    NUMBER;
14:28:22 848  var_subscription_id	    NUMBER;
14:28:22 849  var_invoice_id		    NUMBER;
14:28:22 850  var_end_date		    DATE;
14:28:22 851  var_is_extension		    NUMBER;
14:28:22 852  var_current_offer_index	    NUMBER;
14:28:22 853  var_current_offer_recurr_num  NUMBER;
14:28:22 854  var_updated_by		    VARCHAR2(255);
14:28:22 855  var_update_date		    DATE;
14:28:22 856  var_entitlement_end_date	    DATE;
14:28:22 857  var_grace_start_date	    DATE;
14:28:22 858  var_grace_end_date	    DATE;
14:28:22 859  -- EXCEPTIONS
14:28:22 860  BAD_LICENSE_ID	     EXCEPTION;
14:28:22 861  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:28:22 862  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 863  BEGIN
14:28:22 864  
14:28:22 865  	BEGIN
14:28:22 866  	  SELECT
14:28:22 867  	    LICENSE.LICENSE_STATUS_ID,
14:28:22 868  	    LICENSE.NEEDS_ENTITLEMENTS,
14:28:22 869  	    LICENSE.START_DATE,
14:28:22 870  	    LICENSE.OFFER_ID,
14:28:22 871  	    LICENSE.SUBSCRIPTION_ID,
14:28:22 872  	    LICENSE.INVOICE_ID,
14:28:22 873  	    LICENSE.END_DATE,
14:28:22 874  	    LICENSE.IS_EXTENSION,
14:28:22 875  	    LICENSE.CURRENT_OFFER_INDEX,
14:28:22 876  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
14:28:22 877  	    LICENSE.UPDATED_BY,
14:28:22 878  	    LICENSE.UPDATE_DATE,
14:28:22 879  	    LICENSE.ENTITLEMENT_END_DATE,
14:28:22 880  	    LICENSE.GRACE_START_DATE,
14:28:22 881  	    LICENSE.GRACE_END_DATE
14:28:22 882  	    into
14:28:22 883  	    var_license_status_id,
14:28:22 884  	    var_needs_entitlements,
14:28:22 885  	    var_start_date,
14:28:22 886  	    var_offer_id,
14:28:22 887  	    var_subscription_id,
14:28:22 888  	    var_invoice_id,
14:28:22 889  	    var_end_date,
14:28:22 890  	    var_is_extension,
14:28:22 891  	    var_current_offer_index,
14:28:22 892  	    var_current_offer_recurr_num,
14:28:22 893  	    var_updated_by,
14:28:22 894  	    var_update_date,
14:28:22 895  	    var_entitlement_end_date,
14:28:22 896  	    var_grace_start_date,
14:28:22 897  	    var_grace_end_date
14:28:22 898  	  FROM
14:28:22 899  	    LICENSE
14:28:22 900  	  WHERE
14:28:22 901  	    LICENSE.ID = in_license_id;
14:28:22 902  	  EXCEPTION
14:28:22 903  	    WHEN NO_DATA_FOUND THEN
14:28:22 904  	      RAISE BAD_LICENSE_ID;
14:28:22 905  	END;
14:28:22 906  
14:28:22 907  	BEGIN
14:28:22 908  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_LICENSE_HISTORY(
14:28:22 909  	    in_license_id,
14:28:22 910  	    var_license_status_id,
14:28:22 911  	    var_needs_entitlements,
14:28:22 912  	    var_start_date,
14:28:22 913  	    var_offer_id,
14:28:22 914  	    var_subscription_id,
14:28:22 915  	    var_invoice_id,
14:28:22 916  	    var_end_date,
14:28:22 917  	    var_updated_by,
14:28:22 918  	    var_update_date,
14:28:22 919  	    var_is_extension,
14:28:22 920  	    var_current_offer_index,
14:28:22 921  	    var_current_offer_recurr_num,
14:28:22 922  	    in_system_activity_reason_id,
14:28:22 923  	    var_entitlement_end_date,
14:28:22 924  	    var_grace_start_date,
14:28:22 925  	    var_grace_end_date
14:28:22 926  	  );
14:28:22 927  	  EXCEPTION
14:28:22 928  	    WHEN OTHERS THEN
14:28:22 929  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 930  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 931  	END;
14:28:22 932  
14:28:22 933  EXCEPTION
14:28:22 934  WHEN BAD_LICENSE_ID THEN
14:28:22 935  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 936  	  SPROC_NAME, 'No such license');
14:28:22 937  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 938  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 939  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 940  WHEN OTHERS THEN
14:28:22 941  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 942  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 943  END CREATE_LICENSE_HISTORY;
14:28:22 944  
14:28:22 945  /********************************************************************/
14:28:22 946  
14:28:22 947  PROCEDURE CREATE_CHARGE_HISTORY (
14:28:22 948  /*
14:28:22 949  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 950  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 951  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:22 952  */
14:28:22 953  	in_charge_id		    IN NUMBER,
14:28:22 954  	in_system_activity_reason_id IN NUMBER
14:28:22 955  ) AS
14:28:22 956  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
14:28:22 957  -- VARIABLES
14:28:22 958  var_invoice_id	     NUMBER;
14:28:22 959  var_transaction_id     NUMBER;
14:28:22 960  var_instrument_type_id NUMBER;
14:28:22 961  var_instrument_id      NUMBER;
14:28:22 962  var_charge_amount      NUMBER;
14:28:22 963  var_charge_status_id   NUMBER;
14:28:22 964  var_updated_by	     VARCHAR2(255);
14:28:22 965  var_update_date	     DATE;
14:28:22 966  -- EXCEPTIONS
14:28:22 967  BAD_CHARGE_ID	     EXCEPTION;
14:28:22 968  CAN_NOT_CREATE_HISTORY EXCEPTION;
14:28:22 969  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 970  BEGIN
14:28:22 971  
14:28:22 972  	BEGIN
14:28:22 973  	  SELECT
14:28:22 974  	    CHARGE.INVOICE_ID,
14:28:22 975  	    CHARGE.TRANSACTION_ID,
14:28:22 976  	    CHARGE.INSTRUMENT_TYPE_ID,
14:28:22 977  	    CHARGE.INSTRUMENT_ID,
14:28:22 978  	    CHARGE.CHARGE_AMOUNT,
14:28:22 979  	    CHARGE.CHARGE_STATUS_ID,
14:28:22 980  	    CHARGE.UPDATED_BY,
14:28:22 981  	    CHARGE.UPDATE_DATE
14:28:22 982  	    into
14:28:22 983  	    var_invoice_id,
14:28:22 984  	    var_transaction_id,
14:28:22 985  	    var_instrument_type_id,
14:28:22 986  	    var_instrument_id,
14:28:22 987  	    var_charge_amount,
14:28:22 988  	    var_charge_status_id,
14:28:22 989  	    var_updated_by,
14:28:22 990  	    var_update_date
14:28:22 991  	  FROM
14:28:22 992  	    CHARGE
14:28:22 993  	  WHERE
14:28:22 994  	    CHARGE.ID = in_charge_id;
14:28:22 995  	  EXCEPTION
14:28:22 996  	    WHEN NO_DATA_FOUND THEN
14:28:22 997  	      RAISE BAD_CHARGE_ID;
14:28:22 998  	END;
14:28:22 999  
14:28:22 1000  	 BEGIN
14:28:22 1001  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_CHARGE_HISTORY (
14:28:22 1002  	     in_charge_id,
14:28:22 1003  	     var_invoice_id,
14:28:22 1004  	     var_transaction_id,
14:28:22 1005  	     var_instrument_type_id,
14:28:22 1006  	     var_instrument_id,
14:28:22 1007  	     var_charge_amount,
14:28:22 1008  	     var_updated_by,
14:28:22 1009  	     var_update_date,
14:28:22 1010  	     var_charge_status_id,
14:28:22 1011  	     in_system_activity_reason_id
14:28:22 1012  	   );
14:28:22 1013  	   EXCEPTION
14:28:22 1014  	     WHEN OTHERS THEN
14:28:22 1015  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:22 1016  	       RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 1017  	 END;
14:28:22 1018  
14:28:22 1019  EXCEPTION
14:28:22 1020  WHEN BAD_CHARGE_ID THEN
14:28:22 1021  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1022  	   SPROC_NAME, 'No such license');
14:28:22 1023  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 1024  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 1025  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 1026  WHEN OTHERS THEN
14:28:22 1027  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1028  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1029  END CREATE_CHARGE_HISTORY;
14:28:22 1030  
14:28:22 1031  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
14:28:22 1032  /*
14:28:22 1033  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 1034  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 1035  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:22 1036  */
14:28:22 1037  	 in_invoice_adjustment_id  IN NUMBER,
14:28:22 1038  	 in_system_activity_reason_id IN NUMBER
14:28:22 1039  ) AS
14:28:22 1040  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
14:28:22 1041  --VARIABLED
14:28:22 1042  var_invoice_adj_id	   INVOICE_ADJUSTMENT.ID%TYPE;
14:28:22 1043  var_invoice_id		   INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
14:28:22 1044  var_is_credit		   INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
14:28:22 1045  var_charge_id		   INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
14:28:22 1046  var_adjustment_date	   INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
14:28:22 1047  var_create_date		   INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
14:28:22 1048  var_created_by		   INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
14:28:22 1049  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
14:28:22 1050  var_update_date		   INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
14:28:22 1051  var_updated_by		   INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
14:28:22 1052  BAD_INVOICE_ADJ_ID	   EXCEPTION;
14:28:22 1053  CAN_NOT_CREATE_HISTORY	   EXCEPTION;
14:28:22 1054  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22 1055  BEGIN
14:28:22 1056  
14:28:22 1057  	 BEGIN
14:28:22 1058  	   SELECT
14:28:22 1059  	     INVOICE_ADJUSTMENT.ID,
14:28:22 1060  	     INVOICE_ADJUSTMENT.INVOICE_ID,
14:28:22 1061  	     INVOICE_ADJUSTMENT.IS_CREDIT,
14:28:22 1062  	     INVOICE_ADJUSTMENT.CHARGE_ID,
14:28:22 1063  	     INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
14:28:22 1064  	     INVOICE_ADJUSTMENT.CREATE_DATE,
14:28:22 1065  	     INVOICE_ADJUSTMENT.CREATED_BY,
14:28:22 1066  	     INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
14:28:22 1067  	     INVOICE_ADJUSTMENT.UPDATE_DATE,
14:28:22 1068  	     INVOICE_ADJUSTMENT.UPDATED_BY
14:28:22 1069  	     into
14:28:22 1070  	     var_invoice_adj_id,
14:28:22 1071  	     var_invoice_id,
14:28:22 1072  	     var_is_credit,
14:28:22 1073  	     var_charge_id,
14:28:22 1074  	     var_adjustment_date,
14:28:22 1075  	     var_create_date,
14:28:22 1076  	     var_created_by,
14:28:22 1077  	     var_invoice_adj_reason_id,
14:28:22 1078  	     var_update_date,
14:28:22 1079  	     var_updated_by
14:28:22 1080  	   FROM
14:28:22 1081  	     INVOICE_ADJUSTMENT
14:28:22 1082  	   WHERE
14:28:22 1083  	     INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
14:28:22 1084  	   EXCEPTION
14:28:22 1085  	     WHEN NO_DATA_FOUND THEN
14:28:22 1086  	       RAISE BAD_INVOICE_ADJ_ID;
14:28:22 1087  	 END;
14:28:22 1088  
14:28:22 1089  	 BEGIN
14:28:22 1090  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_INVOICE_ADJ_HISTORY (
14:28:22 1091  	     var_invoice_adj_id,
14:28:22 1092  	     var_invoice_id,
14:28:22 1093  	     var_is_credit,
14:28:22 1094  	     var_charge_id,
14:28:22 1095  	     var_adjustment_date,
14:28:22 1096  	     var_create_date,
14:28:22 1097  	     var_created_by,
14:28:22 1098  	     var_invoice_adj_reason_id,
14:28:22 1099  	     var_update_date,
14:28:22 1100  	     var_updated_by
14:28:22 1101  	   );
14:28:22 1102  	   EXCEPTION
14:28:22 1103  	     WHEN OTHERS THEN
14:28:22 1104  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:22 1105  	       RAISE CAN_NOT_CREATE_HISTORY;
14:28:22 1106  	 END;
14:28:22 1107  
14:28:22 1108  EXCEPTION
14:28:22 1109  WHEN BAD_INVOICE_ADJ_ID THEN
14:28:22 1110  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1111  	   SPROC_NAME, 'No such invoice adjustment');
14:28:22 1112  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:22 1113  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 1114  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:22 1115  WHEN OTHERS THEN
14:28:22 1116  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1117  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1118  END CREATE_INVOICE_ADJ_HISTORY;
14:28:22 1119  
14:28:22 1120  END PROCS_HISTORY_V23;
14:28:22 1121  .
14:28:22 SQL> /

Package body created.

Elapsed: 00:00:00.10
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_itunes_receipt.sql
Compiling body for procs_itunes_receipt.sql
14:28:22 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V23" AS
14:28:22   2  
14:28:22   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
14:28:22   4  /*
14:28:22   5  Throws exceptions:
14:28:22   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22   7  */
14:28:22   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:22   9  	out_result_set	    OUT SYS_REFCURSOR
14:28:22  10  ) AS
14:28:22  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
14:28:22  12  BEGIN
14:28:22  13  OPEN out_result_set FOR
14:28:22  14  	      SELECT
14:28:22  15  	      i.id as ITUNES_RECEIPT_ID,
14:28:22  16  	      s.id as SUBSCRIPTION_ID,
14:28:22  17  	      s.SUBSCRIPTION_STATUS_ID,
14:28:22  18  	      i.STATUS,
14:28:22  19  	      a.GROUP_ID
14:28:22  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
14:28:22  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
14:28:22  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
14:28:22  23  	      AND a.ID(+) = s.ACCOUNT_ID;
14:28:22  24  END ITUNES_RECEIPT_SUBSCRIPTION;
14:28:22  25  
14:28:22  26  
14:28:22  27  PROCEDURE CREATE_RECEIPT(
14:28:22  28  /*
14:28:22  29  Throws exceptions:
14:28:22  30  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22  31  */
14:28:22  32  	  out_id      OUT NUMBER,
14:28:22  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:22  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
14:28:22  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
14:28:22  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
14:28:22  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:22  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:28:22  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:28:22  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:22  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:28:22  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:28:22  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:28:22  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
14:28:22  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
14:28:22  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:28:22  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
14:28:22  48  ) AS
14:28:22  49  -- VARIABLES
14:28:22  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
14:28:22  51  -- EXCEPTIONS
14:28:22  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:22  53  BEGIN
14:28:22  54  
14:28:22  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V23.CREATE_RECEIPT(
14:28:22  56  	  out_id	      =>  out_id,
14:28:22  57  	  in_subscription_id  =>  in_subscription_id,
14:28:22  58  	  in_receipt	      =>  in_receipt,
14:28:22  59  	  in_status	      =>  in_status,
14:28:22  60  	  in_quantity	      =>  in_quantity,
14:28:22  61  	  in_product_id       =>  in_product_id,
14:28:22  62  	  in_transaction_id   =>  in_transaction_id,
14:28:22  63  	  in_purchase_date    =>  in_purchase_date,
14:28:22  64  	  in_original_transaction_id  =>  in_original_transaction_id,
14:28:22  65  	  in_original_purchase_date => in_original_purchase_date,
14:28:22  66  	  in_app_item_id      =>  in_app_item_id,
14:28:22  67  	  in_version_external_id  =>  in_version_external_id,
14:28:22  68  	  in_bid	      =>  in_bid,
14:28:22  69  	  in_bvrs	      =>  in_bvrs,
14:28:22  70  	  in_expires_date     =>  in_expires_date,
14:28:22  71  	  in_created_by       =>  in_created_by
14:28:22  72  	);
14:28:22  73  
14:28:22  74  END CREATE_RECEIPT;
14:28:22  75  
14:28:22  76  PROCEDURE UPDATE_RECEIPT(
14:28:22  77  /*
14:28:22  78  Throws exceptions:
14:28:22  79  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22  80  */
14:28:22  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
14:28:22  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
14:28:22  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
14:28:22  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
14:28:22  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
14:28:22  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
14:28:22  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
14:28:22  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
14:28:22  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
14:28:22  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
14:28:22  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
14:28:22  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
14:28:22  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
14:28:22  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
14:28:22  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
14:28:22  96  	  in_is_expired       IN NUMBER
14:28:22  97  ) AS
14:28:22  98  CANCEL_DATE DATE;
14:28:22  99  BEGIN
14:28:22 100  	-- see if cancel date is already set
14:28:22 101  	BEGIN
14:28:22 102  	  SELECT
14:28:22 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
14:28:22 104  	  FROM
14:28:22 105  	    ITUNES_RECEIPT IR
14:28:22 106  	  WHERE
14:28:22 107  	    IR.ID = in_id;
14:28:22 108  	EXCEPTION
14:28:22 109  	  WHEN NO_DATA_FOUND THEN
14:28:22 110  	    CANCEL_DATE := NULL;
14:28:22 111  	END;
14:28:22 112  
14:28:22 113  	-- only update cancel date if it isn't already set and the receipt is expired
14:28:22 114  	IF in_is_expired = 1 THEN
14:28:22 115  	  IF CANCEL_DATE IS NULL THEN
14:28:22 116  	    CANCEL_DATE := SYSDATE;
14:28:22 117  	  END IF;
14:28:22 118  	ELSE
14:28:22 119  	  CANCEL_DATE := NULL;
14:28:22 120  	END IF;
14:28:22 121  
14:28:22 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V23.UPDATE_RECEIPT(
14:28:22 123  	  in_id => in_id,
14:28:22 124  	  in_receipt => in_receipt,
14:28:22 125  	  in_status => in_status,
14:28:22 126  	  in_quantity => in_quantity,
14:28:22 127  	  in_product_id => in_product_id,
14:28:22 128  	  in_transaction_id => in_transaction_id,
14:28:22 129  	  in_purchase_date => in_purchase_date,
14:28:22 130  	  in_original_transaction_id => in_original_transaction_id,
14:28:22 131  	  in_original_purchase_date => in_original_purchase_date,
14:28:22 132  	  in_app_item_id => in_app_item_id,
14:28:22 133  	  in_version_external_id => in_version_external_id,
14:28:22 134  	  in_bid => in_bid,
14:28:22 135  	  in_bvrs => in_bvrs,
14:28:22 136  	  in_expires_date => in_expires_date,
14:28:22 137  	  in_updated_by => in_updated_by,
14:28:22 138  	  in_cancel_date => CANCEL_DATE
14:28:22 139  	);
14:28:22 140  END UPDATE_RECEIPT;
14:28:22 141  
14:28:22 142  PROCEDURE LINK_ITUNES_RECEIPT(
14:28:22 143  /*
14:28:22 144  Throws exceptions:
14:28:22 145  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 146  */
14:28:22 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
14:28:22 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
14:28:22 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
14:28:22 150  ) AS
14:28:22 151  BEGIN
14:28:22 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V23.LINK_ITUNES_RECEIPT(
14:28:22 153  		      in_id => in_id,
14:28:22 154  		      in_subscription_id => in_subscription_id,
14:28:22 155  		      in_updated_by => in_updated_by
14:28:22 156  		      );
14:28:22 157  END LINK_ITUNES_RECEIPT;
14:28:22 158  
14:28:22 159  PROCEDURE MARK_RECEIPT_CHECKED(
14:28:22 160  /*
14:28:22 161  Throws exceptions:
14:28:22 162  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 163  */
14:28:22 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
14:28:22 165  ) AS
14:28:22 166  BEGIN
14:28:22 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V23.MARK_RECEIPT_CHECKED(
14:28:22 168  	  in_id => in_id
14:28:22 169  	);
14:28:22 170  END MARK_RECEIPT_CHECKED;
14:28:22 171  
14:28:22 172  PROCEDURE GET_ITUNES_RECEIPTS (
14:28:22 173  /*
14:28:22 174  Throws exceptions:
14:28:22 175  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 176  */
14:28:22 177  	out_result_set	    OUT SYS_REFCURSOR,
14:28:22 178  	in_row_number	    IN NUMBER DEFAULT 500
14:28:22 179  ) AS
14:28:22 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
14:28:22 181  BEGIN
14:28:22 182  OPEN out_result_set FOR
14:28:22 183  SELECT * FROM
14:28:22 184  (
14:28:22 185  	SELECT * FROM
14:28:22 186  	(
14:28:22 187  	  SELECT
14:28:22 188  	    IR.ID,
14:28:22 189  	    IR.SUBSCRIPTION_ID,
14:28:22 190  	    IR.RECEIPT,
14:28:22 191  	    IR.STATUS,
14:28:22 192  	    IR.QUANTITY,
14:28:22 193  	    IR.PRODUCT_ID,
14:28:22 194  	    IR.TRANSACTION_ID,
14:28:22 195  	    IR.PURCHASE_DATE,
14:28:22 196  	    IR.ORIGINAL_TRANSACTION_ID,
14:28:22 197  	    IR.ORIGINAL_PURCHASE_DATE,
14:28:22 198  	    IR.APP_ITEM_ID,
14:28:22 199  	    IR.VERSION_EXTERNAL_ID,
14:28:22 200  	    IR.BID,
14:28:22 201  	    IR.BVRS,
14:28:22 202  	    IR.EXPIRES_DATE,
14:28:22 203  	    IR.CREATE_DATe,
14:28:22 204  	    IR.CREATED_BY,
14:28:22 205  	    IR.UPDATE_DATE,
14:28:22 206  	    IR.UPDATED_BY,
14:28:22 207  	    IR.LAST_CHECK_DATE,
14:28:22 208  	    OC.VENDOR_SOURCE_ID
14:28:22 209  	  FROM
14:28:22 210  	    CORE_OWNER.ITUNES_RECEIPT IR
14:28:22 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
14:28:22 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
14:28:22 213  	  WHERE
14:28:22 214  	    NOT EXISTS
14:28:22 215  	    (
14:28:22 216  	      SELECT NULL
14:28:22 217  	      FROM PROCESS_RETRY_THROTTLE
14:28:22 218  	      WHERE PROCESS_NAME = SPROC_NAME
14:28:22 219  		AND GENERIC_ID = IR.ID
14:28:22 220  	    ) AND
14:28:22 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
14:28:22 222  	    ROWNUM <= in_row_number*10
14:28:22 223  	)
14:28:22 224  	ORDER BY dbms_random.value
14:28:22 225  )
14:28:22 226  WHERE
14:28:22 227  	ROWNUM <= in_row_number;
14:28:22 228  
14:28:22 229  END GET_ITUNES_RECEIPTS;
14:28:22 230  
14:28:22 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
14:28:22 232  /*
14:28:22 233  Throws exceptions:
14:28:22 234  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 235  */
14:28:22 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
14:28:22 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
14:28:22 238  ) AS
14:28:22 239  BEGIN
14:28:22 240  
14:28:22 241  SELECT
14:28:22 242  	  oc.vendor_source_id
14:28:22 243  INTO
14:28:22 244  	  out_vendor_source_id
14:28:22 245  FROM
14:28:22 246  	  offer_chain_meta_data ocmd
14:28:22 247  JOIN
14:28:22 248  	  offer_chain oc
14:28:22 249  ON
14:28:22 250  	  ocmd.offer_chain_id = oc.id
14:28:22 251  WHERE
14:28:22 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
14:28:22 253  AND ocmd.value = in_itunes_pid
14:28:22 254  AND rownum <= 1;
14:28:22 255  
14:28:22 256  END GET_VENDOR_FROM_ITUNES_PID;
14:28:22 257  
14:28:22 258  END PROCS_ITUNES_RECEIPT_V23;
14:28:22 259  .
14:28:22 SQL> /

Package body created.

Elapsed: 00:00:00.06
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_line_items.sql
Compiling body for procs_line_items.sql
14:28:22 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V23" AS
14:28:22   2  
14:28:22   3  PROCEDURE ADD_LINE_ITEMS(
14:28:22   4  /*
14:28:22   5  Throws exceptions:
14:28:22   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22   8  */
14:28:22   9  	in_invoice_id IN NUMBER,
14:28:22  10  	in_offer_id   IN NUMBER,
14:28:22  11  	in_created_by IN VARCHAR2
14:28:22  12  ) AS
14:28:22  13  -- VARIABLES
14:28:22  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
14:28:22  15  temp_invoice_id NUMBER;
14:28:22  16  temp_offer_id   NUMBER;
14:28:22  17  
14:28:22  18  var_line_item_data SYS_REFCURSOR;
14:28:22  19  var_new_line_item_id NUMBER;
14:28:22  20  var_product_unit_price NUMBER (10,6);
14:28:22  21  var_product_offering_price NUMBER(10,6);
14:28:22  22  var_product_offering_oprice NUMBER(10,6);
14:28:22  23  var_product_quantity NUMBER;
14:28:22  24  var_product_offering_id NUMBER;
14:28:22  25  
14:28:22  26  var_line_item_price	  NUMBER(10,2);
14:28:22  27  var_discount_fixed_amount   NUMBER(10,6);
14:28:22  28  var_discount_percent_amount NUMBER(10,2);
14:28:22  29  
14:28:22  30  
14:28:22  31  -- EXCEPTIONS
14:28:22  32  BAD_INVOICE_ID EXCEPTION;
14:28:22  33  BAD_OFFER_ID EXCEPTION;
14:28:22  34  BAD_DISCOUNT EXCEPTION;
14:28:22  35  BEGIN
14:28:22  36  
14:28:22  37  	-- Check that given invoice exists
14:28:22  38  	BEGIN
14:28:22  39  	  SELECT
14:28:22  40  	    INVOICE.ID into temp_invoice_id
14:28:22  41  	  FROM
14:28:22  42  	    INVOICE
14:28:22  43  	  WHERE
14:28:22  44  	    INVOICE.ID = in_invoice_id;
14:28:22  45  
14:28:22  46  	  EXCEPTION
14:28:22  47  	    WHEN NO_DATA_FOUND THEN
14:28:22  48  	      RAISE BAD_INVOICE_ID;
14:28:22  49  	END;
14:28:22  50  
14:28:22  51  	-- Check that given offer exists
14:28:22  52  	BEGIN
14:28:22  53  	  SELECT
14:28:22  54  	    OFFER.ID into temp_offer_id
14:28:22  55  	  FROM
14:28:22  56  	    OFFER
14:28:22  57  	  WHERE
14:28:22  58  	    OFFER.ID = in_offer_id;
14:28:22  59  
14:28:22  60  	  EXCEPTION
14:28:22  61  	    WHEN NO_DATA_FOUND THEN
14:28:22  62  	      RAISE BAD_OFFER_ID;
14:28:22  63  	END;
14:28:22  64  
14:28:22  65  	-- Get product_offering data
14:28:22  66  	OPEN var_line_item_data FOR
14:28:22  67  	SELECT
14:28:22  68  	  PRODUCT_OFFERING.ID,
14:28:22  69  	  PRODUCT_OFFERING.UNIT_PRICE,
14:28:22  70  	  PRODUCT_OFFERING.QUANTITY
14:28:22  71  	FROM
14:28:22  72  	  OFFER_PRODUCT_OFFERING
14:28:22  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:28:22  74  	WHERE
14:28:22  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
14:28:22  76  
14:28:22  77  	-- insert line items
14:28:22  78  	-- add discounts to line items
14:28:22  79  	LOOP
14:28:22  80  	  FETCH var_line_item_data INTO
14:28:22  81  	    var_product_offering_id,
14:28:22  82  	    var_product_unit_price,
14:28:22  83  	    var_product_quantity;
14:28:22  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
14:28:22  85  
14:28:22  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
14:28:22  87  	  var_product_offering_price := var_product_offering_oprice;
14:28:22  88  
14:28:22  89  	  -- Apply discounts to line_item
14:28:22  90  	  BEGIN
14:28:22  91  	    SELECT
14:28:22  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
14:28:22  93  	    FROM
14:28:22  94  	      DISCOUNT_PRODUCT_OFFERING
14:28:22  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:28:22  96  	    WHERE
14:28:22  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:28:22  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
14:28:22  99  	    EXCEPTION
14:28:22 100  	    WHEN NO_DATA_FOUND THEN
14:28:22 101  	      var_discount_fixed_amount := NULL;
14:28:22 102  	  END;
14:28:22 103  
14:28:22 104  	  BEGIN
14:28:22 105  	    SELECT
14:28:22 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
14:28:22 107  	    FROM
14:28:22 108  	      DISCOUNT_PRODUCT_OFFERING
14:28:22 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:28:22 110  	    WHERE
14:28:22 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:28:22 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
14:28:22 113  	    EXCEPTION
14:28:22 114  	    WHEN NO_DATA_FOUND THEN
14:28:22 115  	      var_discount_percent_amount := NULL;
14:28:22 116  	  END;
14:28:22 117  
14:28:22 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
14:28:22 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
14:28:22 120  	  END IF;
14:28:22 121  
14:28:22 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
14:28:22 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
14:28:22 124  	  END IF;
14:28:22 125  
14:28:22 126  	  var_line_item_price := PROCS_COMMON_V23.ROUND_10_6_TO_10_2(var_product_offering_price);
14:28:22 127  
14:28:22 128  	  IF (var_line_item_price < 0) THEN
14:28:22 129  	      RAISE BAD_DISCOUNT;
14:28:22 130  	  END IF;
14:28:22 131  
14:28:22 132  	  var_new_line_item_id := NULL;
14:28:22 133  	  PROCS_LINE_ITEMS_CRU_V23.CREATE_LINE_ITEM(
14:28:22 134  	    inout_line_item_id	=> var_new_line_item_id,
14:28:22 135  	    in_product_offer_id => var_product_offering_id,
14:28:22 136  	    in_invoice_id	=> in_invoice_id,
14:28:22 137  	    in_amount		=> var_line_item_price,
14:28:22 138  	    in_created_by	=> in_created_by,
14:28:22 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
14:28:22 140  	    in_taxes_amount	=> NULL
14:28:22 141  	  );
14:28:22 142  
14:28:22 143  	  FOR f_discount IN (
14:28:22 144  	    SELECT
14:28:22 145  	      DISCOUNT.ID
14:28:22 146  	    FROM
14:28:22 147  	      DISCOUNT_PRODUCT_OFFERING
14:28:22 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:28:22 149  	    WHERE
14:28:22 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:28:22 151  	  )
14:28:22 152  	  LOOP
14:28:22 153  	    PROCS_LINE_ITEMS_CRU_V23.CREATE_DISCOUNT_LINE_ITEM(
14:28:22 154  	      in_discount_id =>  f_discount.ID,
14:28:22 155  	      in_line_item_id => var_new_line_item_id
14:28:22 156  	    );
14:28:22 157  	  END LOOP;
14:28:22 158  	END LOOP;
14:28:22 159  
14:28:22 160  EXCEPTION
14:28:22 161  WHEN BAD_INVOICE_ID THEN
14:28:22 162  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 163  	  SPROC_NAME, 'No such license');
14:28:22 164  WHEN BAD_OFFER_ID THEN
14:28:22 165  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 166  	  SPROC_NAME, 'No such offer');
14:28:22 167  WHEN BAD_DISCOUNT THEN
14:28:22 168  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 169  	  SPROC_NAME, 'Bad Discount');
14:28:22 170  WHEN OTHERS THEN
14:28:22 171  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 173  END ADD_LINE_ITEMS;
14:28:22 174  
14:28:22 175  /******************************************************************************/
14:28:22 176  
14:28:22 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
14:28:22 178  	in_line_item_id    IN NUMBER,
14:28:22 179  	in_amount	   IN NUMBER,
14:28:22 180  	in_discount_amount IN NUMBER,
14:28:22 181  	in_taxes_amount    IN NUMBER
14:28:22 182  ) AS
14:28:22 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
14:28:22 184  -- VARIABLES
14:28:22 185  temp_line_item_id NUMBER;
14:28:22 186  -- EXCEPTIONS
14:28:22 187  BAD_LINE_ITEM_ID EXCEPTION;
14:28:22 188  BEGIN
14:28:22 189  
14:28:22 190  	-- Check that line item exists
14:28:22 191  	BEGIN
14:28:22 192  	  SELECT
14:28:22 193  	    LINE_ITEM.ID into temp_line_item_id
14:28:22 194  	  FROM
14:28:22 195  	    LINE_ITEM
14:28:22 196  	  WHERE
14:28:22 197  	    LINE_ITEM.ID = in_line_item_id;
14:28:22 198  	  EXCEPTION
14:28:22 199  	    WHEN NO_DATA_FOUND THEN
14:28:22 200  	      RAISE BAD_LINE_ITEM_ID;
14:28:22 201  	END;
14:28:22 202  
14:28:22 203  	-- Update line item
14:28:22 204  	PROCS_LINE_ITEMS_CRU_V23.UPDATE_LINE_ITEM(
14:28:22 205  	  in_line_item_id    => in_line_item_id,
14:28:22 206  	  in_amount	     => in_amount,
14:28:22 207  	  in_discount_amount => in_discount_amount,
14:28:22 208  	  in_taxes_amount    => in_taxes_amount
14:28:22 209  	);
14:28:22 210  
14:28:22 211  EXCEPTION
14:28:22 212  WHEN BAD_LINE_ITEM_ID THEN
14:28:22 213  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 214  	  SPROC_NAME, 'No such line item');
14:28:22 215  WHEN OTHERS THEN
14:28:22 216  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 218  END UPDATE_LINE_ITEM_AMOUNT;
14:28:22 219  
14:28:22 220  /******************************************************************************/
14:28:22 221  
14:28:22 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:28:22 223  /*
14:28:22 224  Throws exceptions:
14:28:22 225  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 226  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 227  */
14:28:22 228  	in_invoice_id  IN NUMBER,
14:28:22 229  	out_result_set OUT SYS_REFCURSOR
14:28:22 230  ) AS
14:28:22 231  -- VARIABLES
14:28:22 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
14:28:22 233  temp_invoice_id NUMBER;
14:28:22 234  
14:28:22 235  -- EXCEPTIONS
14:28:22 236  BAD_INVOICE_ID EXCEPTION;
14:28:22 237  BEGIN
14:28:22 238  
14:28:22 239  	-- Check that given invoice exists
14:28:22 240  	BEGIN
14:28:22 241  	  SELECT
14:28:22 242  	    INVOICE.ID into temp_invoice_id
14:28:22 243  	  FROM
14:28:22 244  	    INVOICE
14:28:22 245  	  WHERE
14:28:22 246  	    INVOICE.ID = in_invoice_id;
14:28:22 247  	  EXCEPTION
14:28:22 248  	    WHEN NO_DATA_FOUND THEN
14:28:22 249  	      RAISE BAD_INVOICE_ID;
14:28:22 250  	END;
14:28:22 251  
14:28:22 252  	-- Select line items
14:28:22 253  	OPEN out_result_set FOR
14:28:22 254  	SELECT
14:28:22 255  	  LINE_ITEM.ID,
14:28:22 256  	  LINE_ITEM.AMOUNT,
14:28:22 257  	  LINE_ITEM.CREATE_DATE,
14:28:22 258  	  LINE_ITEM.CREATED_BY,
14:28:22 259  	  LINE_ITEM.INVOICE_ID,
14:28:22 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
14:28:22 261  	  LINE_ITEM.TAXES_AMOUNT,
14:28:22 262  	  LINE_ITEM.PRODUCT_OFFER_ID
14:28:22 263  	FROM
14:28:22 264  	  LINE_ITEM
14:28:22 265  	WHERE
14:28:22 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
14:28:22 267  
14:28:22 268  EXCEPTION
14:28:22 269  WHEN BAD_INVOICE_ID THEN
14:28:22 270  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 271  	  SPROC_NAME, 'No such invoice');
14:28:22 272  WHEN OTHERS THEN
14:28:22 273  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 275  END GET_INVOICE_LINE_ITEMS;
14:28:22 276  
14:28:22 277  /******************************************************************************/
14:28:22 278  
14:28:22 279  PROCEDURE GET_LINE_ITEM_TAXES (
14:28:22 280  /*
14:28:22 281  Throws exceptions:
14:28:22 282  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 283  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 284  */
14:28:22 285  	in_line_item_id IN  NUMBER,
14:28:22 286  	out_result_set	OUT SYS_REFCURSOR
14:28:22 287  ) AS
14:28:22 288  -- VARIABLES
14:28:22 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
14:28:22 290  temp_line_item_id NUMBER;
14:28:22 291  -- EXCEPTIONS
14:28:22 292  BAD_LINE_ITEM_ID EXCEPTION;
14:28:22 293  BEGIN
14:28:22 294  
14:28:22 295  	-- Check that line item exists
14:28:22 296  	BEGIN
14:28:22 297  	  SELECT
14:28:22 298  	    LINE_ITEM.ID into temp_line_item_id
14:28:22 299  	  FROM
14:28:22 300  	    LINE_ITEM
14:28:22 301  	  WHERE
14:28:22 302  	    LINE_ITEM.ID = in_line_item_id;
14:28:22 303  	  EXCEPTION
14:28:22 304  	    WHEN NO_DATA_FOUND THEN
14:28:22 305  	      RAISE BAD_LINE_ITEM_ID;
14:28:22 306  	END;
14:28:22 307  
14:28:22 308  	-- Get all taxes for given line item
14:28:22 309  	OPEN out_result_set FOR
14:28:22 310  	SELECT
14:28:22 311  	  TAX.ID,
14:28:22 312  	  TAX.CALCULATED_AMOUNT,
14:28:22 313  	  TAX.CREATE_DATE,
14:28:22 314  	  TAX.CREATED_BY,
14:28:22 315  	  TAX.EFFECTIVE_RATE,
14:28:22 316  	  TAX.EXT_RESULT,
14:28:22 317  	  TAX.EXT_TAX_TYPE,
14:28:22 318  	  TAX.IMPOSITION,
14:28:22 319  	  TAX.IMPOSITION_TYPE,
14:28:22 320  	  TAX.JURISDICTION_ID,
14:28:22 321  	  TAX.JURISDICTION_LEVEL_ID,
14:28:22 322  	  TAX.JURISDICTION_NAME,
14:28:22 323  	  TAX.LINE_ITEM_ID,
14:28:22 324  	  TAX.TAX_RULE_ID,
14:28:22 325  	  TAX.TAX_TYPE_ID,
14:28:22 326  	  TAX.TAXABLE_AMOUNT
14:28:22 327  	FROM
14:28:22 328  	  TAX
14:28:22 329  	WHERE
14:28:22 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
14:28:22 331  
14:28:22 332  EXCEPTION
14:28:22 333  WHEN BAD_LINE_ITEM_ID THEN
14:28:22 334  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 335  	  SPROC_NAME, 'No such line item');
14:28:22 336  WHEN OTHERS THEN
14:28:22 337  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 339  END GET_LINE_ITEM_TAXES;
14:28:22 340  
14:28:22 341  -- norlov: #38770
14:28:22 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
14:28:22 343  /*
14:28:22 344  Throws exceptions:
14:28:22 345  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 346  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 347  */
14:28:22 348  	in_line_item_id IN  NUMBER,
14:28:22 349  	out_result_set	OUT SYS_REFCURSOR
14:28:22 350  ) AS
14:28:22 351  -- VARIABLES
14:28:22 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
14:28:22 353  temp_line_item_id NUMBER;
14:28:22 354  -- EXCEPTIONS
14:28:22 355  BAD_LINE_ITEM_ID EXCEPTION;
14:28:22 356  BEGIN
14:28:22 357  
14:28:22 358  	-- Check that line item exists
14:28:22 359  	BEGIN
14:28:22 360  	  SELECT
14:28:22 361  	    LINE_ITEM.ID into temp_line_item_id
14:28:22 362  	  FROM
14:28:22 363  	    LINE_ITEM
14:28:22 364  	  WHERE
14:28:22 365  	    LINE_ITEM.ID = in_line_item_id;
14:28:22 366  	  EXCEPTION
14:28:22 367  	    WHEN NO_DATA_FOUND THEN
14:28:22 368  	      RAISE BAD_LINE_ITEM_ID;
14:28:22 369  	END;
14:28:22 370  
14:28:22 371  	-- Get all discounts for given line item
14:28:22 372  	OPEN out_result_set FOR
14:28:22 373  	SELECT
14:28:22 374  	  DISCOUNT.FIXED_AMOUNT,
14:28:22 375  	  DISCOUNT.NAME,
14:28:22 376  	  DISCOUNT.ID,
14:28:22 377  	  DISCOUNT.PERCENT_AMOUNT
14:28:22 378  	FROM
14:28:22 379  	  DISCOUNT_LINE_ITEM
14:28:22 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
14:28:22 381  	WHERE
14:28:22 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
14:28:22 383  
14:28:22 384  EXCEPTION
14:28:22 385  WHEN BAD_LINE_ITEM_ID THEN
14:28:22 386  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 387  	  SPROC_NAME, 'No such line item');
14:28:22 388  WHEN OTHERS THEN
14:28:22 389  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 391  END GET_LINE_ITEM_DISCOUNTS;
14:28:22 392  /******************************************************************************/
14:28:22 393  
14:28:22 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
14:28:22 395  /*
14:28:22 396  Throws exceptions:
14:28:22 397  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 398  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 399  */
14:28:22 400  	in_line_item_id     IN	NUMBER,
14:28:22 401  	out_amount	    OUT NUMBER
14:28:22 402  ) AS
14:28:22 403  -- VARIABLES
14:28:22 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
14:28:22 405  -- EXCEPTIONS
14:28:22 406  BAD_LINE_ITEM_ID EXCEPTION;
14:28:22 407  BEGIN
14:28:22 408  
14:28:22 409  	BEGIN
14:28:22 410  	  SELECT
14:28:22 411  	    LINE_ITEM.AMOUNT into out_amount
14:28:22 412  	  FROM
14:28:22 413  	    LINE_ITEM
14:28:22 414  	  WHERE
14:28:22 415  	    LINE_ITEM.ID = in_line_item_id;
14:28:22 416  	  EXCEPTION
14:28:22 417  	    WHEN NO_DATA_FOUND THEN
14:28:22 418  	      RAISE BAD_LINE_ITEM_ID;
14:28:22 419  	END;
14:28:22 420  
14:28:22 421  EXCEPTION
14:28:22 422  WHEN BAD_LINE_ITEM_ID THEN
14:28:22 423  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 424  	  SPROC_NAME, 'No such line item');
14:28:22 425  WHEN OTHERS THEN
14:28:22 426  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 428  END CALCULATE_LINE_ITEM_AMOUNT;
14:28:22 429  
14:28:22 430  /******************************************************************************/
14:28:22 431  
14:28:22 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
14:28:22 433  /*
14:28:22 434  Throws exceptions:
14:28:22 435  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:22 436  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:22 437  */
14:28:22 438  	in_line_item_id     IN	NUMBER
14:28:22 439  ) RETURN NUMBER AS
14:28:22 440  var_invoice_amount NUMBER(10, 2);
14:28:22 441  BEGIN
14:28:22 442  	PROCS_LINE_ITEMS_V23.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
14:28:22 443  	RETURN var_invoice_amount;
14:28:22 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
14:28:22 445  
14:28:22 446  END PROCS_LINE_ITEMS_V23;
14:28:22 447  .
14:28:22 SQL> /

Package body created.

Elapsed: 00:00:00.07
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_locking.sql
Compiling body for procs_locking.sql
14:28:22 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V23" AS
14:28:22   2  
14:28:22   3  /*
14:28:22   4  PROCEDURE INITIALIZE_SYSTEM AS
14:28:22   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
14:28:22   6  -- VARIABLES
14:28:22   7  var_account_ids SYS_REFCURSOR;
14:28:22   8  var_account_id  NUMBER;
14:28:22   9  BEGIN
14:28:22  10  
14:28:22  11  	OPEN var_account_ids FOR
14:28:22  12  	SELECT
14:28:22  13  	  ACCOUNT.ID
14:28:22  14  	FROM
14:28:22  15  	  ACCOUNT;
14:28:22  16  
14:28:22  17  	LOOP
14:28:22  18  	  FETCH var_account_ids into var_account_id;
14:28:22  19  	  EXIT WHEN var_account_ids%NOTFOUND;
14:28:22  20  	  BEGIN
14:28:22  21  	    INITIALIZE_ACCOUNT(var_account_id);
14:28:22  22  	    EXCEPTION
14:28:22  23  	      WHEN OTHERS THEN
14:28:22  24  		NULL;
14:28:22  25  	  END;
14:28:22  26  	END LOOP;
14:28:22  27  
14:28:22  28  END INITIALIZE_SYSTEM;
14:28:22  29  
14:28:22  30  PROCEDURE INITIALIZE_ACCOUNT (
14:28:22  31  	in_account_id IN NUMBER
14:28:22  32  ) AS
14:28:22  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
14:28:22  34  -- EXCEPTIONS
14:28:22  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
14:28:22  36  BEGIN
14:28:22  37  
14:28:22  38  	BEGIN
14:28:22  39  	  INSERT INTO ACCOUNT_LOCK(
14:28:22  40  	    ACCOUNT_ID,
14:28:22  41  	    LOCK_KEY,
14:28:22  42  	    END_DATE,
14:28:22  43  	    CREATED_BY,
14:28:22  44  	    REASON
14:28:22  45  	  ) VALUES (
14:28:22  46  	    in_account_id,
14:28:22  47  	    'initialization key',
14:28:22  48  	    SYSDATE,
14:28:22  49  	    'system',
14:28:22  50  	    'initialization'
14:28:22  51  	  );
14:28:22  52  	  EXCEPTION
14:28:22  53  	    WHEN DUP_VAL_ON_INDEX THEN
14:28:22  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
14:28:22  55  	END;
14:28:22  56  
14:28:22  57  EXCEPTION
14:28:22  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
14:28:22  59  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:22  60  	  SPROC_NAME, 'Account already initialized');
14:28:22  61  WHEN OTHERS THEN
14:28:22  62  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22  64  END;
14:28:22  65  
14:28:22  66  PROCEDURE INITIALIZE_GROUP (
14:28:22  67  	in_group_id IN NUMBER
14:28:22  68  ) AS
14:28:22  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
14:28:22  70  -- VARIABLES
14:28:22  71  var_account_id NUMBER;
14:28:22  72  -- EXCEPTIONS
14:28:22  73  BAD_GROUP_ID		EXCEPTION;
14:28:22  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
14:28:22  75  BEGIN
14:28:22  76  
14:28:22  77  	BEGIN
14:28:22  78  	  SELECT
14:28:22  79  	    ACCOUNT.ID into var_account_id
14:28:22  80  	  FROM
14:28:22  81  	    ACCOUNT
14:28:22  82  	  WHERE
14:28:22  83  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:22  84  	  EXCEPTION
14:28:22  85  	    WHEN NO_DATA_FOUND THEN
14:28:22  86  	     RAISE BAD_GROUP_ID;
14:28:22  87  	END;
14:28:22  88  
14:28:22  89  	BEGIN
14:28:22  90  	  INSERT INTO ACCOUNT_LOCK (
14:28:22  91  	    ACCOUNT_ID,
14:28:22  92  	    LOCK_KEY,
14:28:22  93  	    END_DATE,
14:28:22  94  	    CREATED_BY,
14:28:22  95  	    REASON
14:28:22  96  	  ) VALUES (
14:28:22  97  	    var_account_id,
14:28:22  98  	    'initialization key',
14:28:22  99  	    SYSDATE,
14:28:22 100  	    'system',
14:28:22 101  	    'initialization'
14:28:22 102  	  );
14:28:22 103  	  EXCEPTION
14:28:22 104  	    WHEN DUP_VAL_ON_INDEX THEN
14:28:22 105  	      RAISE GROUP_ALREADY_INITIALIZED;
14:28:22 106  	END;
14:28:22 107  
14:28:22 108  EXCEPTION
14:28:22 109  WHEN BAD_GROUP_ID THEN
14:28:22 110  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 111  	  SPROC_NAME, 'No such account with given group id');
14:28:22 112  WHEN GROUP_ALREADY_INITIALIZED THEN
14:28:22 113  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:22 114  	  SPROC_NAME, 'Group already initialized');
14:28:22 115  WHEN OTHERS THEN
14:28:22 116  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 118  END INITIALIZE_GROUP;
14:28:22 119  */
14:28:22 120  
14:28:22 121  PROCEDURE LOCK_ACCOUNT (
14:28:22 122  	in_group_id    IN NUMBER,
14:28:22 123  	in_lock_key    IN VARCHAR2,
14:28:22 124  	in_seconds_num IN NUMBER,
14:28:22 125  	in_created_by  IN VARCHAR2,
14:28:22 126  	in_reason      IN VARCHAR2
14:28:22 127  ) AS
14:28:22 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
14:28:22 129  -- CONSTANTS
14:28:22 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
14:28:22 131  -- VARIABLES
14:28:22 132  var_account_id NUMBER;
14:28:22 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:22 134  var_date		DATE := SYSDATE;
14:28:22 135  var_lock_end_date DATE;
14:28:22 136  -- EXCEPTIONS
14:28:22 137  BAD_GROUP_ID   EXCEPTION;
14:28:22 138  ALREADY_LOCKED EXCEPTION;
14:28:22 139  BEGIN
14:28:22 140  
14:28:22 141  	BEGIN
14:28:22 142  	  SELECT
14:28:22 143  	    ACCOUNT.ID into var_account_id
14:28:22 144  	  FROM
14:28:22 145  	    ACCOUNT
14:28:22 146  	  WHERE
14:28:22 147  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:22 148  	  EXCEPTION
14:28:22 149  	    WHEN NO_DATA_FOUND THEN
14:28:22 150  	      RAISE BAD_GROUP_ID;
14:28:22 151  	END;
14:28:22 152  
14:28:22 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
14:28:22 154  
14:28:22 155  	BEGIN
14:28:22 156  
14:28:22 157  	  INSERT INTO ACCOUNT_LOCK (
14:28:22 158  	    ACCOUNT_ID,
14:28:22 159  	    LOCK_KEY,
14:28:22 160  	    END_DATE,
14:28:22 161  	    CREATED_BY,
14:28:22 162  	    REASON
14:28:22 163  	  ) VALUES (
14:28:22 164  	    var_account_id,
14:28:22 165  	    in_lock_key,
14:28:22 166  	    var_lock_end_date,
14:28:22 167  	    in_created_by,
14:28:22 168  	    in_reason
14:28:22 169  	  );
14:28:22 170  
14:28:22 171  	  EXCEPTION
14:28:22 172  	    WHEN DUP_VAL_ON_INDEX THEN
14:28:22 173  	      -- This rows was created before... I will try to update it
14:28:22 174  	      BEGIN
14:28:22 175  
14:28:22 176  		UPDATE
14:28:22 177  		  ACCOUNT_LOCK
14:28:22 178  		SET
14:28:22 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
14:28:22 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
14:28:22 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
14:28:22 182  		  ACCOUNT_LOCK.REASON = in_reason
14:28:22 183  		WHERE
14:28:22 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
14:28:22 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
14:28:22 186  
14:28:22 187  		IF SQL%ROWCOUNT = 0 THEN
14:28:22 188  		  RAISE ALREADY_LOCKED;
14:28:22 189  		END IF;
14:28:22 190  
14:28:22 191  	      END;
14:28:22 192  	END;
14:28:22 193  
14:28:22 194  EXCEPTION
14:28:22 195  WHEN BAD_GROUP_ID THEN
14:28:22 196  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 197  	  SPROC_NAME, 'No such group id');
14:28:22 198  WHEN ALREADY_LOCKED THEN
14:28:22 199  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:22 200  	  SPROC_NAME, 'Account already locked');
14:28:22 201  WHEN OTHERS THEN
14:28:22 202  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 204  END LOCK_ACCOUNT;
14:28:22 205  
14:28:22 206  /******************************************************************************/
14:28:22 207  
14:28:22 208  PROCEDURE RELEASE_LOCK (
14:28:22 209  	in_group_id IN NUMBER,
14:28:22 210  	in_lock_key IN VARCHAR2
14:28:22 211  ) AS
14:28:22 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
14:28:22 213  -- VARIABLES
14:28:22 214  var_account_id NUMBER;
14:28:22 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
14:28:22 216  var_date DATE := SYSDATE;
14:28:22 217  -- EXCEPTIONS
14:28:22 218  BAD_GROUP_ID		EXCEPTION;
14:28:22 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
14:28:22 220  BEGIN
14:28:22 221  
14:28:22 222  	BEGIN
14:28:22 223  	  SELECT
14:28:22 224  	    ACCOUNT.ID into var_account_id
14:28:22 225  	  FROM
14:28:22 226  	    ACCOUNT
14:28:22 227  	  WHERE
14:28:22 228  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:22 229  	  EXCEPTION
14:28:22 230  	    WHEN NO_DATA_FOUND THEN
14:28:22 231  	      RAISE BAD_GROUP_ID;
14:28:22 232  	END;
14:28:22 233  
14:28:22 234  	UPDATE
14:28:22 235  	  ACCOUNT_LOCK
14:28:22 236  	SET
14:28:22 237  	  ACCOUNT_LOCK.END_DATE = var_date
14:28:22 238  	WHERE
14:28:22 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
14:28:22 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
14:28:22 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
14:28:22 242  
14:28:22 243  	IF SQL%ROWCOUNT = 0 THEN
14:28:22 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
14:28:22 245  	END IF;
14:28:22 246  
14:28:22 247  EXCEPTION
14:28:22 248  WHEN BAD_GROUP_ID THEN
14:28:22 249  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 250  	  SPROC_NAME, 'No such group id');
14:28:22 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
14:28:22 252  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:22 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
14:28:22 254  WHEN OTHERS THEN
14:28:22 255  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 256  	  SPROC_NAME, 'Unknown error');
14:28:22 257  END RELEASE_LOCK;
14:28:22 258  
14:28:22 259  END PROCS_LOCKING_V23;
14:28:22 260  .
14:28:22 SQL> /

Package body created.

Elapsed: 00:00:00.06
14:28:22 SQL> 
14:28:22 SQL> prompt Compiling body for procs_offer_chain.sql
Compiling body for procs_offer_chain.sql
14:28:22 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V23" AS
14:28:22   2  
14:28:22   3  PROCEDURE IS_GC_OFFER_CHAIN(
14:28:22   4  	in_offer_chain_id IN OFFER_CHAIN.ID%TYPE,
14:28:22   5  	out_data OUT NUMBER
14:28:22   6  ) AS
14:28:22   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_GC_OFFER_CHAIN';
14:28:22   8  var_purchase_oc NUMBER := 0;
14:28:22   9  var_redeem_oc   NUMBER := 0;
14:28:22  10  BEGIN
14:28:22  11  	SELECT
14:28:22  12  	  COUNT(1) INTO var_purchase_oc
14:28:22  13  	FROM
14:28:22  14  	  Offer_Chain
14:28:22  15  	WHERE
14:28:22  16  	  Offer_Chain.Id		      = in_offer_chain_id
14:28:22  17  	  AND Offer_Chain.Is_Gift_Certificate = GLOBAL_CONSTANTS_V23.TRUE;
14:28:22  18  
14:28:22  19  	SELECT
14:28:22  20  	  COUNT(1) INTO var_redeem_oc
14:28:22  21  	FROM
14:28:22  22  	  Offer_Chain_Meta_Data
14:28:22  23  	WHERE
14:28:22  24  	  Offer_Chain_Meta_Data.Name = 'redemption offer chain id'
14:28:22  25  	  AND REGEXP_LIKE(Offer_Chain_Meta_Data.Value,'(^|\s|,)' || TO_CHAR(in_offer_chain_id) || '(,|\s|$)');
14:28:22  26  
14:28:22  27  	out_data := var_purchase_oc + var_redeem_oc;
14:28:22  28  END;
14:28:22  29  
14:28:22  30  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
14:28:22  31  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
14:28:22  32  	out_data	     OUT OFFER_CHAIN.ID%TYPE
14:28:22  33  ) AS
14:28:22  34  	SPROC_NAME CONSTANT VARCHAR2(32) := 'OC_ID_BY_ITUNES_PRODUCT_ID';
14:28:22  35  BEGIN
14:28:22  36  	SELECT
14:28:22  37  	  ID INTO out_data
14:28:22  38  	FROM
14:28:22  39  	  OFFER_CHAIN
14:28:22  40  	WHERE
14:28:22  41  	  ITUNES_PRODUCT_ID = in_itunes_product_id;
14:28:22  42  EXCEPTION
14:28:22  43  	WHEN NO_DATA_FOUND THEN NULL;
14:28:22  44  END OC_ID_BY_ITUNES_PRODUCT_ID;
14:28:22  45  
14:28:22  46  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
14:28:22  47  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
14:28:22  48  	out_data	       OUT OFFER_CHAIN.ID%TYPE
14:28:22  49  ) AS
14:28:22  50  SPROC_NAME CONSTANT VARCHAR2(32) := 'OFFER_CHAIN_ID_BY_AMAZON_SKU';
14:28:22  51  BEGIN
14:28:22  52  	SELECT
14:28:22  53  	  ID INTO out_data
14:28:22  54  	FROM
14:28:22  55  	  OFFER_CHAIN
14:28:22  56  	WHERE
14:28:22  57  	  AMAZON_APPSTORE_SKU = in_amazon_appstore_sku;
14:28:22  58  EXCEPTION
14:28:22  59  	WHEN NO_DATA_FOUND THEN NULL;
14:28:22  60  END OFFER_CHAIN_ID_BY_AMAZON_SKU;
14:28:22  61  
14:28:22  62  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:28:22  63  	in_offer_chain_id IN   NUMBER,
14:28:22  64  	out_result_set	  OUT  SYS_REFCURSOR
14:28:22  65  ) AS
14:28:22  66  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OFFER_CHAIN_BY_ID';
14:28:22  67  BEGIN
14:28:22  68  
14:28:22  69  	-- Get offer chain informations
14:28:22  70  	OPEN out_result_set FOR
14:28:22  71  	  SELECT
14:28:22  72  	    OC.ID,
14:28:22  73  	    OC.NAME,
14:28:22  74  	    OC.ADOPTABILITY_WINDOW_START_DATE,
14:28:22  75  	    OC.ADOPTABILITY_WINDOW_END_DATE,
14:28:22  76  	    OC.DESCRIPTION,
14:28:22  77  	    OC.IS_GIFT_CERTIFICATE,
14:28:22  78  	    OC.OFFER_CHAIN_STATUS_ID,
14:28:22  79  	    OC.PRODUCT_URI,
14:28:22  80  	    OC.BILLING_SOURCE_ID,
14:28:22  81  	    OC.VENDOR_SOURCE_ID,
14:28:22  82  	    OC.GROUP_ACCOUNT_TYPE_ID,
14:28:22  83  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED,
14:28:22  84  	    OC.AMAZON_APPSTORE_SKU,
14:28:22  85  	    OC.ITUNES_PRODUCT_ID
14:28:22  86  	  FROM
14:28:22  87  	    OFFER_CHAIN OC
14:28:22  88  	  WHERE
14:28:22  89  	    OC.ID = in_offer_chain_id
14:28:22  90  	    AND ROWNUM <= 1;
14:28:22  91  
14:28:22  92  EXCEPTION
14:28:22  93  WHEN OTHERS THEN
14:28:22  94  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22  95  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22  96  END GET_OFFER_CHAIN_BY_ID;
14:28:22  97  
14:28:22  98  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
14:28:22  99  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:28:22 100  	out_result_set	   OUT SYS_REFCURSOR
14:28:22 101  ) AS
14:28:22 102  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
14:28:22 103  -- EXCEPTIONS
14:28:22 104  BAD_OFFER_CHAINS_IDS EXCEPTION;
14:28:22 105  BEGIN
14:28:22 106  
14:28:22 107  	IF (in_offer_chain_ids IS NULL) THEN
14:28:22 108  	  RAISE BAD_OFFER_CHAINS_IDS;
14:28:22 109  	END IF;
14:28:22 110  
14:28:22 111  	OPEN out_result_set FOR
14:28:22 112  	SELECT
14:28:22 113  	  OCH.ID,
14:28:22 114  	  OCH.NAME,
14:28:22 115  	  OCH.DESCRIPTION,
14:28:22 116  	  OCH.OFFER_CHAIN_STATUS_ID,
14:28:22 117  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
14:28:22 118  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
14:28:22 119  	  OCH.IS_GIFT_CERTIFICATE,
14:28:22 120  	  PROCS_OFFER_CHAIN_V23.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
14:28:22 121  	  PROCS_OFFER_CHAIN_V23.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
14:28:22 122  	  OCH.VENDOR_SOURCE_ID,
14:28:22 123  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
14:28:22 124  	FROM
14:28:22 125  	  OFFER_CHAIN OCH
14:28:22 126  	WHERE
14:28:22 127  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
14:28:22 128  
14:28:22 129  EXCEPTION
14:28:22 130  WHEN BAD_OFFER_CHAINS_IDS THEN
14:28:22 131  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:22 132  	  SPROC_NAME, 'Invalid offer chains ids');
14:28:22 133  WHEN OTHERS THEN
14:28:22 134  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 135  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 136  END GET_OFFER_CHAINS_BY_IDS;
14:28:22 137  
14:28:22 138  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
14:28:22 139  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:28:22 140  	out_result_set	   OUT SYS_REFCURSOR
14:28:22 141  ) AS
14:28:22 142  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
14:28:22 143  -- EXCEPTIONS
14:28:22 144  BAD_OFFER_CHAINS_IDS EXCEPTION;
14:28:22 145  BEGIN
14:28:22 146  
14:28:22 147  	IF (in_offer_chain_ids IS NULL) THEN
14:28:22 148  	  RAISE BAD_OFFER_CHAINS_IDS;
14:28:22 149  	END IF;
14:28:22 150  
14:28:22 151  	OPEN out_result_set FOR
14:28:22 152  	SELECT
14:28:22 153  	  OOCH.OFFER_CHAIN_ID,
14:28:22 154  	  PO.PRODUCT_ID
14:28:22 155  	FROM
14:28:22 156  	  PRODUCT_OFFERING PO
14:28:22 157  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
14:28:22 158  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
14:28:22 159  	WHERE
14:28:22 160  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
14:28:22 161  
14:28:22 162  EXCEPTION
14:28:22 163  WHEN BAD_OFFER_CHAINS_IDS THEN
14:28:22 164  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:22 165  	  SPROC_NAME, 'Invalid offer chains ids');
14:28:22 166  WHEN OTHERS THEN
14:28:22 167  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 168  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 169  END GET_OFFER_CHAINS_PRODUCTS;
14:28:22 170  
14:28:22 171  PROCEDURE GET_OFFER_CHAINS_OFFERS (
14:28:22 172  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:28:22 173  	out_result_set	   OUT SYS_REFCURSOR
14:28:22 174  ) AS
14:28:22 175  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
14:28:22 176  -- EXCEPTIONS
14:28:22 177  BAD_OFFER_CHAINS_IDS EXCEPTION;
14:28:22 178  BEGIN
14:28:22 179  
14:28:22 180  	IF (in_offer_chain_ids IS NULL) THEN
14:28:22 181  	  RAISE BAD_OFFER_CHAINS_IDS;
14:28:22 182  	END IF;
14:28:22 183  
14:28:22 184  	OPEN out_result_set FOR
14:28:22 185  	SELECT
14:28:22 186  	  OOCH.OFFER_CHAIN_ID,
14:28:22 187  	  OOCH.OFFER_ID,
14:28:22 188  	  OOCH.INDEX_VALUE,
14:28:22 189  	  OOCH.NUM_RECURRENCES,
14:28:22 190  	  O.ENTITLEMENT_DURATION,
14:28:22 191  	  PROCS_OFFER_CHAIN_V23.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
14:28:22 192  	FROM
14:28:22 193  	  OFFER O
14:28:22 194  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
14:28:22 195  	WHERE
14:28:22 196  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
14:28:22 197  
14:28:22 198  EXCEPTION
14:28:22 199  WHEN BAD_OFFER_CHAINS_IDS THEN
14:28:22 200  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:22 201  	  SPROC_NAME, 'Invalid offer chains ids');
14:28:22 202  WHEN OTHERS THEN
14:28:22 203  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 204  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 205  END GET_OFFER_CHAINS_OFFERS;
14:28:22 206  
14:28:22 207  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
14:28:22 208  	in_product_id  IN  NUMBER,
14:28:22 209  	out_result_set OUT SYS_REFCURSOR
14:28:22 210  )AS
14:28:22 211  -- VARIBLES
14:28:22 212  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
14:28:22 213  temp_product_id NUMBER;
14:28:22 214  
14:28:22 215  -- EXCEPTIONS
14:28:22 216  BAD_PRODUCT_ID EXCEPTION;
14:28:22 217  BEGIN
14:28:22 218  
14:28:22 219  	-- Check that given product exists
14:28:22 220  	BEGIN
14:28:22 221  	  SELECT
14:28:22 222  	    PRODUCT.ID into temp_product_id
14:28:22 223  	  FROM
14:28:22 224  	    PRODUCT
14:28:22 225  	  WHERE
14:28:22 226  	    PRODUCT.ID = in_product_id;
14:28:22 227  	  EXCEPTION
14:28:22 228  	    WHEN NO_DATA_FOUND THEN
14:28:22 229  	      RAISE BAD_PRODUCT_ID;
14:28:22 230  	END;
14:28:22 231  
14:28:22 232  	-- Select all offer chains that contains given product
14:28:22 233  	OPEN out_result_set FOR
14:28:22 234  	SELECT
14:28:22 235  	  OFFER_CHAIN.ID,
14:28:22 236  	  OFFER_CHAIN.NAME,
14:28:22 237  	  OFFER_CHAIN.DESCRIPTION,
14:28:22 238  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
14:28:22 239  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
14:28:22 240  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
14:28:22 241  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
14:28:22 242  	FROM
14:28:22 243  	  OFFER_CHAIN
14:28:22 244  	WHERE
14:28:22 245  	  OFFER_CHAIN.ID IN (
14:28:22 246  	    SELECT DISTINCT
14:28:22 247  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
14:28:22 248  	    FROM
14:28:22 249  	      OFFER_OFFER_CHAIN
14:28:22 250  	    WHERE
14:28:22 251  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
14:28:22 252  		SELECT DISTINCT
14:28:22 253  		  OFFER_PRODUCT_OFFERING.OFFER_ID
14:28:22 254  		FROM
14:28:22 255  		  OFFER_PRODUCT_OFFERING
14:28:22 256  		WHERE
14:28:22 257  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
14:28:22 258  	      )
14:28:22 259  	  );
14:28:22 260  
14:28:22 261  EXCEPTION
14:28:22 262  WHEN BAD_PRODUCT_ID THEN
14:28:22 263  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 264  	  SPROC_NAME, 'No such product');
14:28:22 265  WHEN OTHERS THEN
14:28:22 266  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 267  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 268  END GET_OFFER_CHAINS_BY_PRODUCT;
14:28:22 269  
14:28:22 270  PROCEDURE GET_OFFER_CHAIN_PRICE (
14:28:22 271  	in_offer_chain_id IN NUMBER,
14:28:22 272  	out_price	  OUT NUMBER
14:28:22 273  ) AS
14:28:22 274  -- VARIABLES
14:28:22 275  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
14:28:22 276  temp_offer_chain_id NUMBER;
14:28:22 277  
14:28:22 278  -- EXCEPTION
14:28:22 279  BAD_OFFER_CHAIN_ID       EXCEPTION;
14:28:22 280  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
14:28:22 281  EXCEPTION_MESSAGE        VARCHAR2(1024);
14:28:22 282  BEGIN
14:28:22 283  
14:28:22 284  	-- Check that given offer chain exists
14:28:22 285  	BEGIN
14:28:22 286  	  SELECT
14:28:22 287  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 288  	  FROM
14:28:22 289  	    OFFER_CHAIN
14:28:22 290  	  WHERE
14:28:22 291  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:28:22 292  
14:28:22 293  	  EXCEPTION
14:28:22 294  	  WHEN NO_DATA_FOUND THEN
14:28:22 295  	    RAISE BAD_OFFER_CHAIN_ID;
14:28:22 296  	END;
14:28:22 297  
14:28:22 298  	BEGIN
14:28:22 299  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
14:28:22 300  	  EXCEPTION
14:28:22 301  	    WHEN OTHERS THEN
14:28:22 302  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 303  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
14:28:22 304  	END;
14:28:22 305  
14:28:22 306  EXCEPTION
14:28:22 307  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:22 308  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 309  	  SPROC_NAME, 'Bad offer chain id');
14:28:22 310  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
14:28:22 311  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 312  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
14:28:22 313  WHEN OTHERS THEN
14:28:22 314  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 315  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 316  END GET_OFFER_CHAIN_PRICE;
14:28:22 317  
14:28:22 318  PROCEDURE GET_FIRST_OFFER(
14:28:22 319  	in_offer_chain_id IN  NUMBER,
14:28:22 320  	out_offer_id	  OUT NUMBER
14:28:22 321  ) AS
14:28:22 322  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
14:28:22 323  BEGIN
14:28:22 324  	-- Seect first offer in offer chain
14:28:22 325  	SELECT
14:28:22 326  	  OFFER_ID into out_offer_id
14:28:22 327  	FROM (
14:28:22 328  	  SELECT
14:28:22 329  	    OFFER_OFFER_CHAIN.OFFER_ID
14:28:22 330  	  FROM
14:28:22 331  	    OFFER_OFFER_CHAIN
14:28:22 332  	  WHERE
14:28:22 333  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 334  	  ORDER BY
14:28:22 335  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
14:28:22 336  	)
14:28:22 337  	WHERE
14:28:22 338  	  ROWNUM <= 1;
14:28:22 339  
14:28:22 340  EXCEPTION
14:28:22 341  WHEN NO_DATA_FOUND THEN
14:28:22 342  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 343  	  SPROC_NAME, 'No such offer chain');
14:28:22 344  WHEN OTHERS THEN
14:28:22 345  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 346  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 347  END GET_FIRST_OFFER;
14:28:22 348  
14:28:22 349  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
14:28:22 350  	out_result_set OUT SYS_REFCURSOR
14:28:22 351  ) AS
14:28:22 352  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
14:28:22 353  BEGIN
14:28:22 354  	OPEN out_result_set FOR
14:28:22 355  	SELECT
14:28:22 356  	  OFFER_CHAIN.ID,
14:28:22 357  	  OFFER_CHAIN.NAME,
14:28:22 358  	  OFFER_CHAIN.DESCRIPTION,
14:28:22 359  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
14:28:22 360  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
14:28:22 361  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
14:28:22 362  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
14:28:22 363  	  PROCS_OFFER_CHAIN_V23.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
14:28:22 364  	  PRODUCT_OFFERING.PRODUCT_ID
14:28:22 365  	FROM
14:28:22 366  	  OFFER_CHAIN,
14:28:22 367  	  OFFER_OFFER_CHAIN,
14:28:22 368  	  OFFER_PRODUCT_OFFERING,
14:28:22 369  	  PRODUCT_OFFERING
14:28:22 370  	WHERE
14:28:22 371  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
14:28:22 372  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
14:28:22 373  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:28:22 374  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE;
14:28:22 375  
14:28:22 376  EXCEPTION
14:28:22 377  WHEN OTHERS THEN
14:28:22 378  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 379  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 380  END GET_ACTIVE_OFFER_CHAINS;
14:28:22 381  
14:28:22 382  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
14:28:22 383  	in_offer_chain_id IN NUMBER,
14:28:22 384  	out_result_set	  OUT SYS_REFCURSOR
14:28:22 385  ) AS
14:28:22 386  -- VARIABLES
14:28:22 387  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
14:28:22 388  temp_offer_chain_id NUMBER;
14:28:22 389  
14:28:22 390  -- EXCEPTIONS
14:28:22 391  BAD_OFFER_CHAIN EXCEPTION;
14:28:22 392  BEGIN
14:28:22 393  
14:28:22 394  	-- Check that offer chain exists
14:28:22 395  	BEGIN
14:28:22 396  	  SELECT
14:28:22 397  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 398  	  FROM
14:28:22 399  	    OFFER_CHAIN
14:28:22 400  	  WHERE
14:28:22 401  	    OFFER_CHAIN.ID = in_offer_chain_id
14:28:22 402  	    AND ROWNUM <= 1;
14:28:22 403  
14:28:22 404  	  EXCEPTION
14:28:22 405  	    WHEN OTHERS THEN
14:28:22 406  	      RAISE BAD_OFFER_CHAIN;
14:28:22 407  	END;
14:28:22 408  
14:28:22 409  	-- Select all products for given offer chain
14:28:22 410  	OPEN out_result_set FOR
14:28:22 411  	SELECT DISTINCT
14:28:22 412  	  PRODUCT_OFFERING.PRODUCT_ID
14:28:22 413  	FROM
14:28:22 414  	  PRODUCT_OFFERING
14:28:22 415  	WHERE
14:28:22 416  	  PRODUCT_OFFERING.ID IN (
14:28:22 417  	    SELECT DISTINCT
14:28:22 418  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:28:22 419  	    FROM
14:28:22 420  	      OFFER_PRODUCT_OFFERING
14:28:22 421  	    WHERE
14:28:22 422  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:28:22 423  		SELECT
14:28:22 424  		  OFFER_OFFER_CHAIN.OFFER_ID
14:28:22 425  		FROM
14:28:22 426  		  OFFER_OFFER_CHAIN
14:28:22 427  		WHERE
14:28:22 428  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 429  	      )
14:28:22 430  	  );
14:28:22 431  
14:28:22 432  EXCEPTION
14:28:22 433  WHEN BAD_OFFER_CHAIN THEN
14:28:22 434  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 435  	  SPROC_NAME, 'No such offer chain');
14:28:22 436  WHEN OTHERS THEN
14:28:22 437  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 438  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 439  END GET_OFFER_CHAIN_PRODUCTS;
14:28:22 440  
14:28:22 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
14:28:22 442  	in_offer_chain_id	  IN NUMBER,
14:28:22 443  	in_offer_chain_start_date IN DATE
14:28:22 444  ) RETURN DATE AS
14:28:22 445  -- VARIABLES
14:28:22 446  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
14:28:22 447  temp_offer_chain_id    NUMBER;
14:28:22 448  var_offer_chain_length NUMBER;
14:28:22 449  var_offer_duration     VARCHAR2(30);
14:28:22 450  var_offer_recurrences  NUMBER;
14:28:22 451  var_end_date	     DATE;
14:28:22 452  
14:28:22 453  var_offer_ym_interval INTERVAL YEAR TO MONTH;
14:28:22 454  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
14:28:22 455  var_offer_years	    NUMBER;
14:28:22 456  var_offer_months	    NUMBER;
14:28:22 457  var_offer_days	    NUMBER;
14:28:22 458  var_infinity_offers_count NUMBER;
14:28:22 459  
14:28:22 460  var_offers_set SYS_REFCURSOR;
14:28:22 461  
14:28:22 462  -- EXCEPTIONS
14:28:22 463  BAD_OFFER_CHAIN_ID EXCEPTION;
14:28:22 464  BEGIN
14:28:22 465  
14:28:22 466  	var_end_date := in_offer_chain_start_date;
14:28:22 467  
14:28:22 468  	-- Check that offer chain exists
14:28:22 469  	BEGIN
14:28:22 470  	  SELECT
14:28:22 471  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 472  	  FROM
14:28:22 473  	    OFFER_CHAIN
14:28:22 474  	  WHERE
14:28:22 475  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:28:22 476  	  EXCEPTION
14:28:22 477  	    WHEN NO_DATA_FOUND
14:28:22 478  	      THEN RAISE BAD_OFFER_CHAIN_ID;
14:28:22 479  	END;
14:28:22 480  
14:28:22 481  	SELECT
14:28:22 482  	  COUNT(*) into var_infinity_offers_count
14:28:22 483  	FROM
14:28:22 484  	  OFFER_OFFER_CHAIN
14:28:22 485  	WHERE
14:28:22 486  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 487  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V23.OFFER_REC_INFINITY;
14:28:22 488  
14:28:22 489  	IF var_infinity_offers_count > 0 THEN
14:28:22 490  	  -- Offer chain contains offers with infinity num of recurrences
14:28:22 491  	  RETURN NULL;
14:28:22 492  	END IF;
14:28:22 493  
14:28:22 494  	-- Select offers durations
14:28:22 495  	OPEN var_offers_set FOR
14:28:22 496  	SELECT
14:28:22 497  	  OFFER.ENTITLEMENT_DURATION,
14:28:22 498  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
14:28:22 499  	FROM
14:28:22 500  	  OFFER_OFFER_CHAIN
14:28:22 501  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:28:22 502  	WHERE
14:28:22 503  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
14:28:22 504  
14:28:22 505  	-- Calculate sum of offers durations
14:28:22 506  	LOOP
14:28:22 507  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
14:28:22 508  	  EXIT WHEN var_offers_set%NOTFOUND;
14:28:22 509  	  PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
14:28:22 510  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
14:28:22 511  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
14:28:22 512  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
14:28:22 513  	END LOOP;
14:28:22 514  
14:28:22 515  	RETURN var_end_date;
14:28:22 516  
14:28:22 517  EXCEPTION
14:28:22 518  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:22 519  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 520  	  SPROC_NAME, 'No such offer chain');
14:28:22 521  WHEN OTHERS THEN
14:28:22 522  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 523  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 524  END CALCULATE_OFFER_CHAIN_END_DATE;
14:28:22 525  
14:28:22 526  FUNCTION CALCULATE_OFFER_AMOUNT (
14:28:22 527  	in_offer_id IN NUMBER
14:28:22 528  ) RETURN NUMBER AS
14:28:22 529  -- VARIABLES
14:28:22 530  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
14:28:22 531  temp_offer_id NUMBER;
14:28:22 532  
14:28:22 533  var_product_offering_set	    SYS_REFCURSOR;
14:28:22 534  var_product_offering_id	    NUMBER;
14:28:22 535  var_product_offering_price    NUMBER(10,6);
14:28:22 536  var_product_offering_t_amount NUMBER(10,6);
14:28:22 537  var_product_offering_quantity NUMBER;
14:28:22 538  
14:28:22 539  var_total_amount NUMBER(10,6);
14:28:22 540  var_final_amount NUMBER(10,2);
14:28:22 541  
14:28:22 542  var_percent_discount NUMBER(10,2);
14:28:22 543  var_fixed_discount NUMBER(10,6);
14:28:22 544  
14:28:22 545  -- EXCEPTIONS
14:28:22 546  BAD_OFFER_ID EXCEPTION;
14:28:22 547  BEGIN
14:28:22 548  
14:28:22 549  	BEGIN
14:28:22 550  	  SELECT
14:28:22 551  	    OFFER.ID into temp_offer_id
14:28:22 552  	  FROM
14:28:22 553  	    OFFER
14:28:22 554  	  WHERE
14:28:22 555  	    OFFER.ID = in_offer_id;
14:28:22 556  	  EXCEPTION
14:28:22 557  	    WHEN NO_DATA_FOUND THEN
14:28:22 558  	      RAISE BAD_OFFER_ID;
14:28:22 559  	END;
14:28:22 560  
14:28:22 561  	OPEN var_product_offering_set FOR
14:28:22 562  	SELECT
14:28:22 563  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
14:28:22 564  	  PRODUCT_OFFERING.UNIT_PRICE,
14:28:22 565  	  PRODUCT_OFFERING.QUANTITY
14:28:22 566  	FROM
14:28:22 567  	  OFFER_PRODUCT_OFFERING
14:28:22 568  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:28:22 569  	WHERE
14:28:22 570  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
14:28:22 571  
14:28:22 572  	var_total_amount := 0;
14:28:22 573  
14:28:22 574  	LOOP
14:28:22 575  	  FETCH var_product_offering_set into
14:28:22 576  	    var_product_offering_id,
14:28:22 577  	    var_product_offering_price,
14:28:22 578  	    var_product_offering_quantity;
14:28:22 579  	  EXIT WHEN var_product_offering_set%NOTFOUND;
14:28:22 580  
14:28:22 581  	  SELECT
14:28:22 582  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
14:28:22 583  	  FROM
14:28:22 584  	    DISCOUNT_PRODUCT_OFFERING
14:28:22 585  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:28:22 586  	  WHERE
14:28:22 587  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:28:22 588  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
14:28:22 589  
14:28:22 590  	  SELECT
14:28:22 591  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
14:28:22 592  	  FROM
14:28:22 593  	    DISCOUNT_PRODUCT_OFFERING
14:28:22 594  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
14:28:22 595  	  WHERE
14:28:22 596  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
14:28:22 597  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
14:28:22 598  
14:28:22 599  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
14:28:22 600  
14:28:22 601  	  IF var_percent_discount IS NOT NULL THEN
14:28:22 602  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
14:28:22 603  	  END IF;
14:28:22 604  
14:28:22 605  	  IF var_fixed_discount IS NOT NULL THEN
14:28:22 606  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
14:28:22 607  	  END IF;
14:28:22 608  
14:28:22 609  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
14:28:22 610  	END LOOP;
14:28:22 611  	var_final_amount := var_total_amount;
14:28:22 612  	RETURN var_final_amount;
14:28:22 613  
14:28:22 614  EXCEPTION
14:28:22 615  WHEN BAD_OFFER_ID THEN
14:28:22 616  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 617  	  SPROC_NAME, 'No such offer');
14:28:22 618  WHEN OTHERS THEN
14:28:22 619  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 620  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 621  END CALCULATE_OFFER_AMOUNT;
14:28:22 622  
14:28:22 623  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
14:28:22 624  	in_offer_chain_id IN NUMBER
14:28:22 625  ) RETURN NUMBER AS
14:28:22 626  -- VARIABLES
14:28:22 627  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
14:28:22 628  temp_offer_chain_id    NUMBER;
14:28:22 629  var_first_offer_id     NUMBER;
14:28:22 630  -- EXCEPTIONS
14:28:22 631  BAD_OFFER_CHAIN_ID      EXCEPTION;
14:28:22 632  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
14:28:22 633  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:28:22 634  BEGIN
14:28:22 635  
14:28:22 636  	BEGIN
14:28:22 637  	  SELECT
14:28:22 638  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 639  	  FROM
14:28:22 640  	    OFFER_CHAIN
14:28:22 641  	  WHERE
14:28:22 642  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:28:22 643  	  EXCEPTION
14:28:22 644  	    WHEN NO_DATA_FOUND THEN
14:28:22 645  	      RAISE BAD_OFFER_CHAIN_ID;
14:28:22 646  	END;
14:28:22 647  
14:28:22 648  	BEGIN
14:28:22 649  	  PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER(
14:28:22 650  	    in_offer_chain_id => in_offer_chain_id,
14:28:22 651  	    out_offer_id      => var_first_offer_id
14:28:22 652  	  );
14:28:22 653  	  EXCEPTION
14:28:22 654  	    WHEN OTHERS THEN
14:28:22 655  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 656  	      RAISE CAN_NOT_GET_FIRST_OFFER;
14:28:22 657  	END;
14:28:22 658  
14:28:22 659  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
14:28:22 660  
14:28:22 661  EXCEPTION
14:28:22 662  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:22 663  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 664  	  SPROC_NAME, 'No such offer chain');
14:28:22 665  WHEN CAN_NOT_GET_FIRST_OFFER THEN
14:28:22 666  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 667  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
14:28:22 668  WHEN OTHERS THEN
14:28:22 669  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 670  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 671  END CALCULATE_OFFER_CHAIN_AMOUNT;
14:28:22 672  
14:28:22 673  FUNCTION GET_FIRST_OFFER_INDEX (
14:28:22 674  	in_offer_chain_id IN NUMBER
14:28:22 675  ) RETURN NUMBER AS
14:28:22 676  -- VARIABLES
14:28:22 677  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
14:28:22 678  var_first_offer_index NUMBER;
14:28:22 679  BEGIN
14:28:22 680  
14:28:22 681  	SELECT
14:28:22 682  	  INDEX_VALUE into var_first_offer_index
14:28:22 683  	FROM (
14:28:22 684  	  SELECT
14:28:22 685  	    OFFER_OFFER_CHAIN.INDEX_VALUE
14:28:22 686  	  FROM
14:28:22 687  	    OFFER_OFFER_CHAIN
14:28:22 688  	  WHERE
14:28:22 689  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 690  	  ORDER BY
14:28:22 691  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
14:28:22 692  	)
14:28:22 693  	WHERE
14:28:22 694  	  ROWNUM <= 1;
14:28:22 695  
14:28:22 696  	RETURN var_first_offer_index;
14:28:22 697  
14:28:22 698  EXCEPTION
14:28:22 699  WHEN NO_DATA_FOUND THEN
14:28:22 700  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 701  	  SPROC_NAME, 'No such offer chain');
14:28:22 702  WHEN OTHERS THEN
14:28:22 703  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 704  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 705  END GET_FIRST_OFFER_INDEX;
14:28:22 706  
14:28:22 707  FUNCTION GET_NEXT_OFFER_INDEX (
14:28:22 708  	in_offer_chain_id	     IN NUMBER,
14:28:22 709  	in_offer_chain_current_index IN NUMBER
14:28:22 710  ) RETURN NUMBER AS
14:28:22 711  -- VARIABLES
14:28:22 712  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
14:28:22 713  temp_offer_chain_id	     NUMBER;
14:28:22 714  temp_offer_chain_current_index NUMBER;
14:28:22 715  var_result		     NUMBER;
14:28:22 716  -- EXCEPTIONS
14:28:22 717  BAD_OFFER_CHAIN_ID      EXCEPTION;
14:28:22 718  BAD_CURRENT_INDEX_VALUE EXCEPTION;
14:28:22 719  BEGIN
14:28:22 720  
14:28:22 721  	-- Check that offer chain exists
14:28:22 722  	BEGIN
14:28:22 723  	  SELECT
14:28:22 724  	    OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 725  	  FROM
14:28:22 726  	    OFFER_CHAIN
14:28:22 727  	  WHERE
14:28:22 728  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:28:22 729  	  EXCEPTION
14:28:22 730  	    WHEN NO_DATA_FOUND THEN
14:28:22 731  	      RAISE BAD_OFFER_CHAIN_ID;
14:28:22 732  	END;
14:28:22 733  
14:28:22 734  	-- Check that current offer index exists
14:28:22 735  	BEGIN
14:28:22 736  	  SELECT
14:28:22 737  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
14:28:22 738  	  FROM
14:28:22 739  	    OFFER_OFFER_CHAIN
14:28:22 740  	  WHERE
14:28:22 741  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 742  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
14:28:22 743  	    -- TODO: delete next line
14:28:22 744  	    AND ROWNUM <= 1;
14:28:22 745  	  EXCEPTION
14:28:22 746  	    WHEN NO_DATA_FOUND THEN
14:28:22 747  	      RAISE BAD_CURRENT_INDEX_VALUE;
14:28:22 748  	END;
14:28:22 749  
14:28:22 750  	-- Get next offer index
14:28:22 751  	BEGIN
14:28:22 752  	  SELECT
14:28:22 753  	    INDEX_VALUE into var_result
14:28:22 754  	  FROM (
14:28:22 755  	    SELECT
14:28:22 756  	      OFFER_OFFER_CHAIN.INDEX_VALUE
14:28:22 757  	    FROM
14:28:22 758  	      OFFER_OFFER_CHAIN
14:28:22 759  	    WHERE
14:28:22 760  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 761  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
14:28:22 762  	    ORDER BY
14:28:22 763  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
14:28:22 764  	  )
14:28:22 765  	  WHERE
14:28:22 766  	    ROWNUM <= 1;
14:28:22 767  	  EXCEPTION
14:28:22 768  	    WHEN NO_DATA_FOUND THEN
14:28:22 769  	      var_result := NULL;
14:28:22 770  	END;
14:28:22 771  
14:28:22 772  	RETURN var_result;
14:28:22 773  
14:28:22 774  EXCEPTION
14:28:22 775  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:22 776  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 777  	  SPROC_NAME, 'No such offer chain');
14:28:22 778  WHEN BAD_CURRENT_INDEX_VALUE THEN
14:28:22 779  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 780  	  SPROC_NAME, 'Bad current index value');
14:28:22 781  WHEN OTHERS THEN
14:28:22 782  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 784  END GET_NEXT_OFFER_INDEX;
14:28:22 785  
14:28:22 786  PROCEDURE P_GET_NEXT_OFFER_INDEX (
14:28:22 787  	in_offer_chain_id	     IN NUMBER,
14:28:22 788  	in_offer_chain_current_index IN NUMBER,
14:28:22 789  	out_next_offer_index	     OUT NUMBER
14:28:22 790  ) AS
14:28:22 791  BEGIN
14:28:22 792  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
14:28:22 793  	  in_offer_chain_id,
14:28:22 794  	  in_offer_chain_current_index
14:28:22 795  	);
14:28:22 796  END P_GET_NEXT_OFFER_INDEX;
14:28:22 797  
14:28:22 798  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
14:28:22 799  	in_license_id		     IN NUMBER,
14:28:22 800  	in_offer_chain_current_index IN NUMBER,
14:28:22 801  	out_next_offer_index	     OUT NUMBER
14:28:22 802  ) AS
14:28:22 803  -- VARIABLES
14:28:22 804  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
14:28:22 805  var_offer_chain_id NUMBER;
14:28:22 806  -- EXCEPTIONS
14:28:22 807  BAD_LICENSE_ID		   EXCEPTION;
14:28:22 808  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
14:28:22 809  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
14:28:22 810  BEGIN
14:28:22 811  
14:28:22 812  	BEGIN
14:28:22 813  	  SELECT
14:28:22 814  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
14:28:22 815  	  FROM
14:28:22 816  	    SUBSCRIPTION
14:28:22 817  	  WHERE
14:28:22 818  	    SUBSCRIPTION.ID = (
14:28:22 819  	      SELECT
14:28:22 820  		LICENSE.SUBSCRIPTION_ID
14:28:22 821  	      FROM
14:28:22 822  		LICENSE
14:28:22 823  	      WHERE
14:28:22 824  		LICENSE.ID = in_license_id
14:28:22 825  	    );
14:28:22 826  	  EXCEPTION
14:28:22 827  	    WHEN NO_DATA_FOUND THEN
14:28:22 828  	      RAISE BAD_LICENSE_ID;
14:28:22 829  	END;
14:28:22 830  
14:28:22 831  	BEGIN
14:28:22 832  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
14:28:22 833  	    var_offer_chain_id,
14:28:22 834  	    in_offer_chain_current_index
14:28:22 835  	  );
14:28:22 836  	  EXCEPTION
14:28:22 837  	    WHEN OTHERS THEN
14:28:22 838  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 839  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
14:28:22 840  	END;
14:28:22 841  
14:28:22 842  EXCEPTION
14:28:22 843  WHEN BAD_LICENSE_ID THEN
14:28:22 844  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 845  	  SPROC_NAME, 'No such license');
14:28:22 846  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
14:28:22 847  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 848  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
14:28:22 849  WHEN OTHERS THEN
14:28:22 850  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 851  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 852  END GET_NEXT_OFFER_INDEX_BY_LCNS;
14:28:22 853  
14:28:22 854  FUNCTION IS_OFFER_INDEX_EXISTS (
14:28:22 855  	in_offer_chain_id	   IN NUMBER,
14:28:22 856  	in_offer_chain_offer_index IN NUMBER
14:28:22 857  ) RETURN NUMBER AS
14:28:22 858  -- VARIABLES
14:28:22 859  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
14:28:22 860  temp_count NUMBER;
14:28:22 861  BEGIN
14:28:22 862  
14:28:22 863  	SELECT
14:28:22 864  	  COUNT(*) into temp_count
14:28:22 865  	FROM
14:28:22 866  	  OFFER_OFFER_CHAIN
14:28:22 867  	WHERE
14:28:22 868  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 869  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
14:28:22 870  
14:28:22 871  	IF temp_count > 0 THEN
14:28:22 872  	  RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:22 873  	ELSE
14:28:22 874  	  RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:22 875  	END IF;
14:28:22 876  
14:28:22 877  EXCEPTION
14:28:22 878  WHEN OTHERS THEN
14:28:22 879  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 880  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 881  END IS_OFFER_INDEX_EXISTS;
14:28:22 882  
14:28:22 883  PROCEDURE GET_OFFER_LENGTH (
14:28:22 884  	in_offer_id IN NUMBER,
14:28:22 885  	out_years   OUT NUMBER,
14:28:22 886  	out_months  OUT NUMBER,
14:28:22 887  	out_days    OUT NUMBER
14:28:22 888  ) AS
14:28:22 889  -- VARIABLES
14:28:22 890  var_offer_duration VARCHAR2(30);
14:28:22 891  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
14:28:22 892  -- EXCEPTIONS
14:28:22 893  BAD_OFFER_ID	     EXCEPTION;
14:28:22 894  CAN_NOT_PARSE_DURATION EXCEPTION;
14:28:22 895  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:28:22 896  BEGIN
14:28:22 897  
14:28:22 898  	BEGIN
14:28:22 899  	  SELECT
14:28:22 900  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
14:28:22 901  	  FROM
14:28:22 902  	    OFFER
14:28:22 903  	  WHERE
14:28:22 904  	    OFFER.ID = in_offer_id;
14:28:22 905  	  EXCEPTION
14:28:22 906  	    WHEN NO_DATA_FOUND THEN
14:28:22 907  	      RAISE BAD_OFFER_ID;
14:28:22 908  	END;
14:28:22 909  
14:28:22 910  	BEGIN
14:28:22 911  	  PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(
14:28:22 912  	    var_offer_duration,
14:28:22 913  	    out_years,
14:28:22 914  	    out_months,
14:28:22 915  	    out_days
14:28:22 916  	  );
14:28:22 917  	  EXCEPTION
14:28:22 918  	    WHEN OTHERS THEN
14:28:22 919  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:22 920  	      RAISE CAN_NOT_PARSE_DURATION;
14:28:22 921  	END;
14:28:22 922  
14:28:22 923  EXCEPTION
14:28:22 924  WHEN BAD_OFFER_ID THEN
14:28:22 925  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 926  	  SPROC_NAME, 'No such offer');
14:28:22 927  WHEN CAN_NOT_PARSE_DURATION THEN
14:28:22 928  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 929  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
14:28:22 930  WHEN OTHERS THEN
14:28:22 931  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 933  END GET_OFFER_LENGTH;
14:28:22 934  
14:28:22 935  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
14:28:22 936  	in_offer_id   IN NUMBER,
14:28:22 937  	in_start_date IN DATE DEFAULT SYSDATE,
14:28:22 938  	out_days      OUT NUMBER
14:28:22 939  ) AS
14:28:22 940  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
14:28:22 941  -- VARIABLES
14:28:22 942  var_offer_duration VARCHAR2(30);
14:28:22 943  var_offer_years	 NUMBER;
14:28:22 944  var_offer_months	 NUMBER;
14:28:22 945  var_offer_days	 NUMBER;
14:28:22 946  var_offer_end_date DATE;
14:28:22 947  -- EXCEPTIONS
14:28:22 948  BAD_OFFER_ID EXCEPTION;
14:28:22 949  BEGIN
14:28:22 950  
14:28:22 951  	BEGIN
14:28:22 952  	  SELECT
14:28:22 953  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
14:28:22 954  	  FROM
14:28:22 955  	    OFFER
14:28:22 956  	  WHERE
14:28:22 957  	    OFFER.ID = in_offer_id;
14:28:22 958  	  EXCEPTION
14:28:22 959  	    WHEN NO_DATA_FOUND THEN
14:28:22 960  	      RAISE BAD_OFFER_ID;
14:28:22 961  	END;
14:28:22 962  
14:28:22 963  	PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS (
14:28:22 964  	  var_offer_duration,
14:28:22 965  	  var_offer_years,
14:28:22 966  	  var_offer_months,
14:28:22 967  	  var_offer_days
14:28:22 968  	);
14:28:22 969  
14:28:22 970  	var_offer_end_date := ( ( in_start_date
14:28:22 971  	  + GLOBAL_CONSTANTS_V23.ONE_DAY_INTERVAL * var_offer_days )
14:28:22 972  	  + GLOBAL_CONSTANTS_V23.ONE_MONTH_INTERVAL * var_offer_months )
14:28:22 973  	  + GLOBAL_CONSTANTS_V23.ONE_YEAR_INTERVAL * var_offer_years;
14:28:22 974  
14:28:22 975  	out_days := var_offer_end_date - in_start_date;
14:28:22 976  
14:28:22 977  EXCEPTION
14:28:22 978  WHEN BAD_OFFER_ID THEN
14:28:22 979  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 980  	  SPROC_NAME, 'No such offer');
14:28:22 981  WHEN OTHERS THEN
14:28:22 982  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 983  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 984  END GET_OFFER_LENGTH_IN_DAYS;
14:28:22 985  
14:28:22 986  PROCEDURE GET_OFFER_PRODUCTS (
14:28:22 987  	in_offer_id    IN NUMBER,
14:28:22 988  	out_result_set OUT SYS_REFCURSOR
14:28:22 989  ) AS
14:28:22 990  -- VARIABLES
14:28:22 991  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
14:28:22 992  temp_offerr_id NUMBER;
14:28:22 993  -- EXCEPTIONS
14:28:22 994  BAD_OFFER_ID EXCEPTION;
14:28:22 995  BEGIN
14:28:22 996  
14:28:22 997  	BEGIN
14:28:22 998  	  SELECT
14:28:22 999  	    OFFER.ID into temp_offerr_id
14:28:22 1000  	   FROM
14:28:22 1001  	     OFFER
14:28:22 1002  	   WHERE
14:28:22 1003  	     OFFER.ID = in_offer_id;
14:28:22 1004  	   EXCEPTION
14:28:22 1005  	     WHEN NO_DATA_FOUND THEN
14:28:22 1006  	       RAISE BAD_OFFER_ID;
14:28:22 1007  	 END;
14:28:22 1008  
14:28:22 1009  	 OPEN out_result_set FOR
14:28:22 1010  	 SELECT DISTINCT
14:28:22 1011  	   PRODUCT.ID,
14:28:22 1012  	   PRODUCT.NAME
14:28:22 1013  	 FROM
14:28:22 1014  	   PRODUCT
14:28:22 1015  	 WHERE
14:28:22 1016  	   PRODUCT.ID IN (
14:28:22 1017  	       SELECT
14:28:22 1018  		 PRODUCT_OFFERING.PRODUCT_ID
14:28:22 1019  	       FROM
14:28:22 1020  		 OFFER_PRODUCT_OFFERING
14:28:22 1021  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:28:22 1022  	       WHERE
14:28:22 1023  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
14:28:22 1024  	     );
14:28:22 1025  
14:28:22 1026  EXCEPTION
14:28:22 1027  WHEN BAD_OFFER_ID THEN
14:28:22 1028  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1029  	   SPROC_NAME, 'No such offer');
14:28:22 1030  WHEN OTHERS THEN
14:28:22 1031  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1032  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1033  END GET_OFFER_PRODUCTS;
14:28:22 1034  
14:28:22 1035  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
14:28:22 1036  	 in_offer_chain_id IN NUMBER,
14:28:22 1037  	 out_result_set    OUT SYS_REFCURSOR
14:28:22 1038  ) AS
14:28:22 1039  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
14:28:22 1040  -- VARIABLES
14:28:22 1041  temp_offer_chain_id NUMBER;
14:28:22 1042  -- EXCEPTIONS
14:28:22 1043  BAD_OFFER_CHAIN_ID EXCEPTION;
14:28:22 1044  BEGIN
14:28:22 1045  
14:28:22 1046  	 BEGIN
14:28:22 1047  	   SELECT
14:28:22 1048  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 1049  	   FROM
14:28:22 1050  	     OFFER_CHAIN
14:28:22 1051  	   WHERE
14:28:22 1052  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:28:22 1053  	   EXCEPTION
14:28:22 1054  	     WHEN NO_DATA_FOUND THEN
14:28:22 1055  	       RAISE BAD_OFFER_CHAIN_ID;
14:28:22 1056  	 END;
14:28:22 1057  
14:28:22 1058  	 OPEN out_result_set FOR
14:28:22 1059  	 SELECT
14:28:22 1060  	   PRODUCT_OFFERING.ID,
14:28:22 1061  	   PRODUCT_OFFERING.PRODUCT_ID,
14:28:22 1062  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
14:28:22 1063  	   PRODUCT_OFFERING.UNIT_PRICE,
14:28:22 1064  	   PRODUCT_OFFERING.QUANTITY,
14:28:22 1065  	   PRODUCT_OFFERING.CREATE_DATE,
14:28:22 1066  	   PRODUCT_OFFERING.CREATED_BY,
14:28:22 1067  	   PRODUCT.ID P_ID,
14:28:22 1068  	   PRODUCT.NAME,
14:28:22 1069  	   PRODUCT.TAX_CATEGORY_ID,
14:28:22 1070  	   PRODUCT.ENTITLEMENT,
14:28:22 1071  	   PRODUCT.IS_SHAREABLE,
14:28:22 1072  	   PRODUCT.PRODUCT_STATUS_ID,
14:28:22 1073  	   PRODUCT.DEFAULT_VAT_RATE
14:28:22 1074  	 FROM
14:28:22 1075  	   PRODUCT_OFFERING
14:28:22 1076  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:28:22 1077  	 WHERE
14:28:22 1078  	   PRODUCT_OFFERING.ID IN (
14:28:22 1079  	     SELECT DISTINCT
14:28:22 1080  	       PRODUCT_OFFERING_ID
14:28:22 1081  	     FROM
14:28:22 1082  	       OFFER_PRODUCT_OFFERING
14:28:22 1083  	     WHERE
14:28:22 1084  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:28:22 1085  		 SELECT DISTINCT
14:28:22 1086  		   OFFER_ID
14:28:22 1087  		 FROM
14:28:22 1088  		   OFFER_OFFER_CHAIN
14:28:22 1089  		 WHERE
14:28:22 1090  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 1091  	       )
14:28:22 1092  	   );
14:28:22 1093  
14:28:22 1094  EXCEPTION
14:28:22 1095  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:22 1096  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1097  	   SPROC_NAME, 'Bad offer chain id');
14:28:22 1098  WHEN OTHERS THEN
14:28:22 1099  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1100  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1101  END GET_OFFER_CHAIN_PROD_OFFERINGS;
14:28:22 1102  
14:28:22 1103  FUNCTION CHECK_FOR_SAME_PRODUCTS (
14:28:22 1104  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
14:28:22 1105  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
14:28:22 1106  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
14:28:22 1107  ) RETURN NUMBER AS
14:28:22 1108  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
14:28:22 1109  -- CONSTANTS
14:28:22 1110  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
14:28:22 1111  -- VARIABLES
14:28:22 1112  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
14:28:22 1113  var_same_products	SYS_REFCURSOR;
14:28:22 1114  var_same_product_id	NUMBER;
14:28:22 1115  same_product_count	NUMBER;
14:28:22 1116  var_product_eligibility_limit NUMBER := 1;
14:28:22 1117  -- EXCEPTIONS
14:28:22 1118  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
14:28:22 1119  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
14:28:22 1120  BEGIN
14:28:22 1121  
14:28:22 1122  	 -- Check that first offer chain exists
14:28:22 1123  	 BEGIN
14:28:22 1124  	   SELECT
14:28:22 1125  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 1126  	   FROM
14:28:22 1127  	     OFFER_CHAIN
14:28:22 1128  	   WHERE
14:28:22 1129  	     OFFER_CHAIN.ID = in_offer_chain_1;
14:28:22 1130  	   EXCEPTION
14:28:22 1131  	     WHEN NO_DATA_FOUND THEN
14:28:22 1132  	       RAISE BAD_FIRST_OFFER_CHAIN;
14:28:22 1133  	 END;
14:28:22 1134  
14:28:22 1135  	 -- Check that second offer chain exists
14:28:22 1136  	 BEGIN
14:28:22 1137  	   SELECT
14:28:22 1138  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 1139  	   FROM
14:28:22 1140  	     OFFER_CHAIN
14:28:22 1141  	   WHERE
14:28:22 1142  	     OFFER_CHAIN.ID = in_offer_chain_2;
14:28:22 1143  	   EXCEPTION
14:28:22 1144  	     WHEN NO_DATA_FOUND THEN
14:28:22 1145  	       RAISE BAD_SECOND_OFFER_CHAIN;
14:28:22 1146  	 END;
14:28:22 1147  
14:28:22 1148  	 PROCS_OFFER_CHAIN_V23.GET_OFF_CHAINS_SAME_PRODUCTS(
14:28:22 1149  	   in_offer_chain_1 => in_offer_chain_1,
14:28:22 1150  	   in_offer_chain_2 => in_offer_chain_2,
14:28:22 1151  	   out_result_set   => var_same_products
14:28:22 1152  	 );
14:28:22 1153  
14:28:22 1154  	 LOOP
14:28:22 1155  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
14:28:22 1156  	   EXIT WHEN var_same_products%NOTFOUND;
14:28:22 1157  
14:28:22 1158  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:22 1159  	     -- Return false because this offer chains having same products
14:28:22 1160  	     RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:22 1161  	   ELSE
14:28:22 1162  	     -- Check for limit
14:28:22 1163  	     IF var_product_eligibility_limit < same_product_count THEN
14:28:22 1164  	       RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:22 1165  	     END IF;
14:28:22 1166  
14:28:22 1167  	   END IF;
14:28:22 1168  	 END LOOP;
14:28:22 1169  
14:28:22 1170  	 RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:22 1171  
14:28:22 1172  EXCEPTION
14:28:22 1173  WHEN BAD_FIRST_OFFER_CHAIN THEN
14:28:22 1174  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1175  	   SPROC_NAME, 'First offer chain not found');
14:28:22 1176  WHEN BAD_SECOND_OFFER_CHAIN THEN
14:28:22 1177  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1178  	   SPROC_NAME, 'Second offer chain not found');
14:28:22 1179  WHEN OTHERS THEN
14:28:22 1180  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1181  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1182  END CHECK_FOR_SAME_PRODUCTS;
14:28:22 1183  
14:28:22 1184  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
14:28:22 1185  	 in_offer_chain_id IN NUMBER
14:28:22 1186  ) RETURN NUMBER AS
14:28:22 1187  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
14:28:22 1188  -- VARIABLES
14:28:22 1189  var_is_cancelable_str VARCHAR2(1);
14:28:22 1190  var_is_cancelable     NUMBER;
14:28:22 1191  BEGIN
14:28:22 1192  
14:28:22 1193  	 BEGIN
14:28:22 1194  	   SELECT
14:28:22 1195  	     VALUE INTO var_is_cancelable_str
14:28:22 1196  	   FROM (
14:28:22 1197  	     SELECT
14:28:22 1198  	       VALUE, NAME
14:28:22 1199  	     FROM
14:28:22 1200  	       OFFER_CHAIN_META_DATA
14:28:22 1201  	     WHERE
14:28:22 1202  	       OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 1203  	     )
14:28:22 1204  	   WHERE
14:28:22 1205  	     UPPER(NAME) = 'CANCELABLE';
14:28:22 1206  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
14:28:22 1207  	   EXCEPTION
14:28:22 1208  	     WHEN NO_DATA_FOUND THEN
14:28:22 1209  	       var_is_cancelable := GLOBAL_CONSTANTS_V23.FALSE;
14:28:22 1210  	 END;
14:28:22 1211  
14:28:22 1212  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:22 1213  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:22 1214  	 END IF;
14:28:22 1215  
14:28:22 1216  	 RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:22 1217  
14:28:22 1218  EXCEPTION
14:28:22 1219  WHEN OTHERS THEN
14:28:22 1220  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1221  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1222  END IS_OFFER_CHAIN_CANCELABLE;
14:28:22 1223  
14:28:22 1224  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
14:28:22 1225  	 in_offer_chain_id IN NUMBER
14:28:22 1226  ) RETURN NUMBER AS
14:28:22 1227  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
14:28:22 1228  -- VARIABLES
14:28:22 1229  var_max_concurrent_subs_str VARCHAR2(100);
14:28:22 1230  var_max_concurrent_subs	   NUMBER;
14:28:22 1231  BEGIN
14:28:22 1232  
14:28:22 1233  	 BEGIN
14:28:22 1234  	   SELECT
14:28:22 1235  	     VALUE into var_max_concurrent_subs_str
14:28:22 1236  	   FROM
14:28:22 1237  	     (
14:28:22 1238  	       SELECT
14:28:22 1239  		 NAME,
14:28:22 1240  		 VALUE
14:28:22 1241  	       FROM
14:28:22 1242  		 OFFER_CHAIN_ELIGIBILITY
14:28:22 1243  	       WHERE
14:28:22 1244  		 OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 1245  	     )
14:28:22 1246  	   WHERE
14:28:22 1247  	     NAME LIKE GLOBAL_CONSTANTS_V23.MAX_CONCURRENT_SUBS;
14:28:22 1248  
14:28:22 1249  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V23.MAX_CONCURRENT_SUBS_UNLIM THEN
14:28:22 1250  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V23.INFINITY;
14:28:22 1251  	   ELSE
14:28:22 1252  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
14:28:22 1253  	   END IF;
14:28:22 1254  
14:28:22 1255  	   EXCEPTION
14:28:22 1256  	     WHEN NO_DATA_FOUND THEN
14:28:22 1257  	       var_max_concurrent_subs := 1;
14:28:22 1258  	 END;
14:28:22 1259  
14:28:22 1260  	 RETURN var_max_concurrent_subs;
14:28:22 1261  
14:28:22 1262  EXCEPTION
14:28:22 1263  WHEN OTHERS THEN
14:28:22 1264  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1265  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1266  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
14:28:22 1267  
14:28:22 1268  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
14:28:22 1269  	 in_offer_chain_id   IN NUMBER,
14:28:22 1270  	 in_eligibility_name IN VARCHAR2,
14:28:22 1271  	 out_result_set      OUT SYS_REFCURSOR
14:28:22 1272  ) AS
14:28:22 1273  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
14:28:22 1274  -- VARIABLES
14:28:22 1275  temp_offer_chain_id NUMBER;
14:28:22 1276  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
14:28:22 1277  -- EXCEPTIONS
14:28:22 1278  BAD_OFFER_CHAIN_ID EXCEPTION;
14:28:22 1279  BEGIN
14:28:22 1280  
14:28:22 1281  	 BEGIN
14:28:22 1282  	   SELECT
14:28:22 1283  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 1284  	   FROM
14:28:22 1285  	     OFFER_CHAIN
14:28:22 1286  	   WHERE
14:28:22 1287  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:28:22 1288  	   EXCEPTION
14:28:22 1289  	     WHEN NO_DATA_FOUND THEN
14:28:22 1290  	       RAISE BAD_OFFER_CHAIN_ID;
14:28:22 1291  	 END;
14:28:22 1292  
14:28:22 1293  	 var_eligibility_name := UPPER(in_eligibility_name);
14:28:22 1294  
14:28:22 1295  	 OPEN out_result_set FOR
14:28:22 1296  	 SELECT
14:28:22 1297  	   OFFER_CHAIN_ELIGIBILITY.ID,
14:28:22 1298  	   OFFER_CHAIN_ELIGIBILITY.NAME,
14:28:22 1299  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
14:28:22 1300  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
14:28:22 1301  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
14:28:22 1302  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
14:28:22 1303  	 FROM
14:28:22 1304  	   OFFER_CHAIN_ELIGIBILITY
14:28:22 1305  	 WHERE
14:28:22 1306  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 1307  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
14:28:22 1308  
14:28:22 1309  EXCEPTION
14:28:22 1310  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:22 1311  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1312  	   SPROC_NAME, 'No such offer chain');
14:28:22 1313  WHEN OTHERS THEN
14:28:22 1314  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1315  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1316  END GET_OFFER_CHAIN_ELIGIBILITY;
14:28:22 1317  
14:28:22 1318  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
14:28:22 1319  	 in_offer_chain_ids  IN VARCHAR2,
14:28:22 1320  	 in_eligibility_name IN VARCHAR2,
14:28:22 1321  	 out_result_set      OUT SYS_REFCURSOR
14:28:22 1322  ) AS
14:28:22 1323  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
14:28:22 1324  -- VARIABLES
14:28:22 1325  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
14:28:22 1326  BEGIN
14:28:22 1327  
14:28:22 1328  	 var_eligibility_name := UPPER(in_eligibility_name);
14:28:22 1329  
14:28:22 1330  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
14:28:22 1331  
14:28:22 1332  	 open out_result_set for
14:28:22 1333  	 'SELECT
14:28:22 1334  	   ID,
14:28:22 1335  	   NAME,
14:28:22 1336  	   VALUE,
14:28:22 1337  	   OFFER_CHAIN_ID,
14:28:22 1338  	   CREATE_DATE,
14:28:22 1339  	   CREATED_BY
14:28:22 1340  	 FROM
14:28:22 1341  	   OFFER_CHAIN_ELIGIBILITY
14:28:22 1342  	 WHERE
14:28:22 1343  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
14:28:22 1344  	   AND UPPER(NAME) = :1'
14:28:22 1345  	 using var_eligibility_name;
14:28:22 1346  
14:28:22 1347  EXCEPTION
14:28:22 1348  WHEN OTHERS THEN
14:28:22 1349  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1350  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1351  END GET_OFFER_CHAINS_ELIGIBILITY;
14:28:22 1352  
14:28:22 1353  PROCEDURE GET_OFFER_CHAINS_META_DATA (
14:28:22 1354  	 in_offer_chain_ids IN VARCHAR2,
14:28:22 1355  	 in_meta_data_name  IN VARCHAR2,
14:28:22 1356  	 out_result_set     OUT SYS_REFCURSOR
14:28:22 1357  ) AS
14:28:22 1358  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
14:28:22 1359  -- VARIABLES
14:28:22 1360  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
14:28:22 1361  BEGIN
14:28:22 1362  
14:28:22 1363  	 var_meta_data_name := UPPER(in_meta_data_name);
14:28:22 1364  
14:28:22 1365  	 open out_result_set for
14:28:22 1366  	 'select
14:28:22 1367  	   ID,
14:28:22 1368  	   NAME,
14:28:22 1369  	   VALUE,
14:28:22 1370  	   OFFER_CHAIN_ID,
14:28:22 1371  	   CREATED_BY,
14:28:22 1372  	   CREATE_DATE
14:28:22 1373  	 from
14:28:22 1374  	   OFFER_CHAIN_META_DATA
14:28:22 1375  	 where
14:28:22 1376  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
14:28:22 1377  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
14:28:22 1378  	 using var_meta_data_name;
14:28:22 1379  
14:28:22 1380  EXCEPTION
14:28:22 1381  WHEN OTHERS THEN
14:28:22 1382  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1383  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1384  END GET_OFFER_CHAINS_META_DATA;
14:28:22 1385  
14:28:22 1386  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:28:22 1387  	 in_offer_chain_id IN NUMBER,
14:28:22 1388  	 in_meta_data_name IN VARCHAR2,
14:28:22 1389  	 out_result_set    OUT SYS_REFCURSOR
14:28:22 1390  ) AS
14:28:22 1391  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
14:28:22 1392  -- VARIABLES
14:28:22 1393  temp_offer_chain_id NUMBER;
14:28:22 1394  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
14:28:22 1395  -- EXCEPTIONS
14:28:22 1396  BAD_OFFER_CHAIN_ID EXCEPTION;
14:28:22 1397  BEGIN
14:28:22 1398  
14:28:22 1399  	 BEGIN
14:28:22 1400  	   SELECT
14:28:22 1401  	     OFFER_CHAIN.ID into temp_offer_chain_id
14:28:22 1402  	   FROM
14:28:22 1403  	     OFFER_CHAIN
14:28:22 1404  	   WHERE
14:28:22 1405  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:28:22 1406  	   EXCEPTION
14:28:22 1407  	     WHEN NO_DATA_FOUND THEN
14:28:22 1408  	       RAISE BAD_OFFER_CHAIN_ID;
14:28:22 1409  	 END;
14:28:22 1410  
14:28:22 1411  	 var_meta_data_name := UPPER(in_meta_data_name);
14:28:22 1412  
14:28:22 1413  	 OPEN out_result_set FOR
14:28:22 1414  	 SELECT
14:28:22 1415  	   OFFER_CHAIN_META_DATA.ID,
14:28:22 1416  	   OFFER_CHAIN_META_DATA.NAME,
14:28:22 1417  	   OFFER_CHAIN_META_DATA.VALUE,
14:28:22 1418  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
14:28:22 1419  	   OFFER_CHAIN_META_DATA.CREATED_BY,
14:28:22 1420  	   OFFER_CHAIN_META_DATA.CREATE_DATE
14:28:22 1421  	 FROM
14:28:22 1422  	   OFFER_CHAIN_META_DATA
14:28:22 1423  	 WHERE
14:28:22 1424  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 1425  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
14:28:22 1426  
14:28:22 1427  EXCEPTION
14:28:22 1428  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:22 1429  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1430  	   SPROC_NAME, 'No such offer chain');
14:28:22 1431  WHEN OTHERS THEN
14:28:22 1432  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1433  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1434  END GET_OFFER_CHAIN_META_DATA;
14:28:22 1435  
14:28:22 1436  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
14:28:22 1437  	 in_offer_id	IN NUMBER,
14:28:22 1438  	 out_result_set OUT SYS_REFCURSOR
14:28:22 1439  ) AS
14:28:22 1440  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
14:28:22 1441  -- VARIABLES
14:28:22 1442  temp_offer_id NUMBER;
14:28:22 1443  -- EXCEPTIONS
14:28:22 1444  BAD_OFFER_ID EXCEPTION;
14:28:22 1445  BEGIN
14:28:22 1446  
14:28:22 1447  	 BEGIN
14:28:22 1448  	   SELECT
14:28:22 1449  	     OFFER.ID into temp_offer_id
14:28:22 1450  	   FROM
14:28:22 1451  	     OFFER
14:28:22 1452  	   WHERE
14:28:22 1453  	     OFFER.ID = in_offer_id;
14:28:22 1454  	   EXCEPTION
14:28:22 1455  	     WHEN NO_DATA_FOUND THEN
14:28:22 1456  	       RAISE BAD_OFFER_ID;
14:28:22 1457  	 END;
14:28:22 1458  
14:28:22 1459  	 OPEN out_result_set FOR
14:28:22 1460  	 SELECT DISTINCT
14:28:22 1461  	   PRODUCT_OFFERING.ID,
14:28:22 1462  	   PRODUCT_OFFERING.PRODUCT_ID,
14:28:22 1463  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
14:28:22 1464  	   PRODUCT_OFFERING.UNIT_PRICE,
14:28:22 1465  	   PRODUCT_OFFERING.QUANTITY,
14:28:22 1466  	   PRODUCT_OFFERING.CREATE_DATE,
14:28:22 1467  	   PRODUCT_OFFERING.CREATED_BY,
14:28:22 1468  	   PRODUCT.ID P_ID,
14:28:22 1469  	   PRODUCT.NAME,
14:28:22 1470  	   PRODUCT.TAX_CATEGORY_ID,
14:28:22 1471  	   PRODUCT.ENTITLEMENT,
14:28:22 1472  	   PRODUCT.IS_SHAREABLE,
14:28:22 1473  	   PRODUCT.PRODUCT_STATUS_ID,
14:28:22 1474  	   PRODUCT.DEFAULT_VAT_RATE
14:28:22 1475  	 FROM
14:28:22 1476  	   OFFER_PRODUCT_OFFERING
14:28:22 1477  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:28:22 1478  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:28:22 1479  	 WHERE
14:28:22 1480  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
14:28:22 1481  
14:28:22 1482  EXCEPTION
14:28:22 1483  WHEN BAD_OFFER_ID THEN
14:28:22 1484  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1485  	   SPROC_NAME, 'No such offer');
14:28:22 1486  WHEN OTHERS THEN
14:28:22 1487  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1488  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1489  END GET_PROD_OFFERINGS_BY_OFFER_ID;
14:28:22 1490  
14:28:22 1491  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
14:28:22 1492  	 in_offer_chain_1 IN NUMBER,
14:28:22 1493  	 in_offer_chain_2 IN NUMBER,
14:28:22 1494  	 out_result_set   OUT SYS_REFCURSOR
14:28:22 1495  ) AS
14:28:22 1496  BEGIN
14:28:22 1497  
14:28:22 1498  	 OPEN out_result_set FOR
14:28:22 1499  	 SELECT
14:28:22 1500  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
14:28:22 1501  	   COUNT_1 + COUNT_2	    AS "COUNT"
14:28:22 1502  	 FROM
14:28:22 1503  	   (
14:28:22 1504  	     SELECT
14:28:22 1505  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
14:28:22 1506  	       COUNT(*) 		   as "COUNT_1"
14:28:22 1507  	     FROM
14:28:22 1508  	       (
14:28:22 1509  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
14:28:22 1510  	       )
14:28:22 1511  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
14:28:22 1512  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:28:22 1513  	     GROUP BY
14:28:22 1514  	       PRODUCT_OFFERING.PRODUCT_ID
14:28:22 1515  	   )
14:28:22 1516  	   INNER JOIN
14:28:22 1517  	   (
14:28:22 1518  	     SELECT
14:28:22 1519  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
14:28:22 1520  	       COUNT(*) 		   as "COUNT_2"
14:28:22 1521  	     FROM
14:28:22 1522  	       (
14:28:22 1523  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
14:28:22 1524  	       )
14:28:22 1525  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
14:28:22 1526  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:28:22 1527  	     GROUP BY
14:28:22 1528  	       PRODUCT_OFFERING.PRODUCT_ID
14:28:22 1529  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
14:28:22 1530  
14:28:22 1531  END GET_OFF_CHAINS_SAME_PRODUCTS;
14:28:22 1532  
14:28:22 1533  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
14:28:22 1534  	 in_offer_chain_id IN NUMBER,
14:28:22 1535  	 in_meta_data_name IN VARCHAR2,
14:28:22 1536  	 out_value	   OUT VARCHAR2
14:28:22 1537  ) AS
14:28:22 1538  BEGIN
14:28:22 1539  	 BEGIN
14:28:22 1540  	   SELECT
14:28:22 1541  	     OFFER_CHAIN_META_DATA.VALUE into out_value
14:28:22 1542  	   FROM
14:28:22 1543  	     OFFER_CHAIN_META_DATA
14:28:22 1544  	   WHERE
14:28:22 1545  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 1546  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
14:28:22 1547  
14:28:22 1548  	   EXCEPTION
14:28:22 1549  	     WHEN NO_DATA_FOUND THEN
14:28:22 1550  	       out_value := NULL;
14:28:22 1551  	 END;
14:28:22 1552  END GET_OFFER_CHAIN_MD_VALUE;
14:28:22 1553  
14:28:22 1554  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
14:28:22 1555  	 in_offer_chain_id   IN NUMBER,
14:28:22 1556  	 in_eligibility_name IN VARCHAR2,
14:28:22 1557  	 out_value	     OUT VARCHAR2
14:28:22 1558  ) AS
14:28:22 1559  BEGIN
14:28:22 1560  	 BEGIN
14:28:22 1561  	   SELECT
14:28:22 1562  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
14:28:22 1563  	   FROM
14:28:22 1564  	     OFFER_CHAIN_ELIGIBILITY
14:28:22 1565  	   WHERE
14:28:22 1566  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:28:22 1567  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
14:28:22 1568  
14:28:22 1569  	   EXCEPTION
14:28:22 1570  	     WHEN NO_DATA_FOUND THEN
14:28:22 1571  	       out_value := NULL;
14:28:22 1572  	 END;
14:28:22 1573  END GET_OFFER_CHAIN_EL_VALUE;
14:28:22 1574  
14:28:22 1575  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
14:28:22 1576  	 in_offer_id	IN NUMBER,
14:28:22 1577  	 out_result_set OUT SYS_REFCURSOR
14:28:22 1578  ) AS
14:28:22 1579  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
14:28:22 1580  -- VARIABLES
14:28:22 1581  temp_offer_id NUMBER;
14:28:22 1582  -- EXCEPTIONS
14:28:22 1583  BAD_OFFER_ID EXCEPTION;
14:28:22 1584  BEGIN
14:28:22 1585  
14:28:22 1586  	 BEGIN
14:28:22 1587  	   SELECT
14:28:22 1588  	     OFFER.ID into temp_offer_id
14:28:22 1589  	   FROM
14:28:22 1590  	     OFFER
14:28:22 1591  	   WHERE
14:28:22 1592  	     OFFER.ID = in_offer_id;
14:28:22 1593  	   EXCEPTION
14:28:22 1594  	     WHEN NO_DATA_FOUND THEN
14:28:22 1595  	       RAISE BAD_OFFER_ID;
14:28:22 1596  	 END;
14:28:22 1597  
14:28:22 1598  	 OPEN out_result_set FOR
14:28:22 1599  	 SELECT
14:28:22 1600  	   PRODUCT_OFFERING.ID,
14:28:22 1601  	   PRODUCT_OFFERING.PRODUCT_ID,
14:28:22 1602  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
14:28:22 1603  	   PRODUCT_OFFERING.UNIT_PRICE,
14:28:22 1604  	   PRODUCT_OFFERING.QUANTITY,
14:28:22 1605  	   PRODUCT_OFFERING.CREATE_DATE,
14:28:22 1606  	   PRODUCT_OFFERING.CREATED_BY,
14:28:22 1607  	   PRODUCT.ID P_ID,
14:28:22 1608  	   PRODUCT.NAME,
14:28:22 1609  	   PRODUCT.TAX_CATEGORY_ID,
14:28:22 1610  	   PRODUCT.ENTITLEMENT,
14:28:22 1611  	   PRODUCT.IS_SHAREABLE,
14:28:22 1612  	   PRODUCT.PRODUCT_STATUS_ID,
14:28:22 1613  	   PRODUCT.DEFAULT_VAT_RATE
14:28:22 1614  	 FROM
14:28:22 1615  	   PRODUCT_OFFERING
14:28:22 1616  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:28:22 1617  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:28:22 1618  	 WHERE
14:28:22 1619  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
14:28:22 1620  
14:28:22 1621  EXCEPTION
14:28:22 1622  WHEN BAD_OFFER_ID THEN
14:28:22 1623  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1624  	   SPROC_NAME, 'No such offer');
14:28:22 1625  WHEN OTHERS THEN
14:28:22 1626  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1627  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1628  END GET_OFFER_PRODUCT_OFFERINGS;
14:28:22 1629  
14:28:22 1630  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
14:28:22 1631  	 in_meta_data_name  IN VARCHAR2,
14:28:22 1632  	 in_meta_data_value IN VARCHAR2,
14:28:22 1633  	 out_result_set     OUT SYS_REFCURSOR
14:28:22 1634  ) AS
14:28:22 1635  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
14:28:22 1636  -- VARIABLES
14:28:22 1637  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
14:28:22 1638  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
14:28:22 1639  BEGIN
14:28:22 1640  
14:28:22 1641  	 OPEN out_result_set FOR
14:28:22 1642  	 SELECT
14:28:22 1643  	   och.ID,
14:28:22 1644  	   och.NAME,
14:28:22 1645  	   och.DESCRIPTION,
14:28:22 1646  	   och.OFFER_CHAIN_STATUS_ID,
14:28:22 1647  	   PROCS_OFFER_CHAIN_V23.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
14:28:22 1648  	   och.ADOPTABILITY_WINDOW_START_DATE,
14:28:22 1649  	   och.ADOPTABILITY_WINDOW_END_DATE,
14:28:22 1650  	   PROCS_OFFER_CHAIN_V23.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
14:28:22 1651  	   och.IS_GIFT_CERTIFICATE,
14:28:22 1652  	   'false' as comf_offer_chain, -- TODO
14:28:22 1653  	   po.PRODUCT_ID,
14:28:22 1654  	   och.GROUP_ACCOUNT_TYPE_ID
14:28:22 1655  	 FROM
14:28:22 1656  	   OFFER_CHAIN och,
14:28:22 1657  	   OFFER_OFFER_CHAIN ooch,
14:28:22 1658  	   OFFER_PRODUCT_OFFERING opo,
14:28:22 1659  	   PRODUCT_OFFERING po
14:28:22 1660  	 WHERE
14:28:22 1661  	   och.ID = ooch.OFFER_CHAIN_ID
14:28:22 1662  	   and ooch.OFFER_ID = opo.OFFER_ID
14:28:22 1663  	   and opo.PRODUCT_OFFERING_ID = po.ID
14:28:22 1664  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE
14:28:22 1665  	   and och.id in (
14:28:22 1666  	     SELECT DISTINCT
14:28:22 1667  	       och2.id
14:28:22 1668  	     from
14:28:22 1669  	       offer_chain och2
14:28:22 1670  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
14:28:22 1671  	     where
14:28:22 1672  	       UPPER(ochmd.name) = v_meta_data_name
14:28:22 1673  	       AND UPPER(ochmd.value) = v_meta_data_value
14:28:22 1674  	   );
14:28:22 1675  
14:28:22 1676  EXCEPTION
14:28:22 1677  WHEN OTHERS THEN
14:28:22 1678  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1679  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1680  END GET_OFFER_CHAINS_BY_META_DATA;
14:28:22 1681  
14:28:22 1682  PROCEDURE GET_ALL_META_DATA (
14:28:22 1683  	 in_offer_chain_id IN NUMBER,
14:28:22 1684  	 out_result_set    OUT SYS_REFCURSOR
14:28:22 1685  ) AS
14:28:22 1686  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
14:28:22 1687  -- Variables
14:28:22 1688  temp_offer_chain_id NUMBER;
14:28:22 1689  -- Exceptions
14:28:22 1690  BAD_OFFER_CHAIN_ID EXCEPTION;
14:28:22 1691  BEGIN
14:28:22 1692  
14:28:22 1693  	 BEGIN
14:28:22 1694  	   SELECT
14:28:22 1695  	     OCH.ID into temp_offer_chain_id
14:28:22 1696  	   FROM
14:28:22 1697  	     OFFER_CHAIN OCH
14:28:22 1698  	   WHERE
14:28:22 1699  	     OCH.ID = in_offer_chain_id;
14:28:22 1700  	   EXCEPTION
14:28:22 1701  	     WHEN NO_DATA_FOUND THEN
14:28:22 1702  	       RAISE BAD_OFFER_CHAIN_ID;
14:28:22 1703  	 END;
14:28:22 1704  
14:28:22 1705  	 OPEN out_result_set FOR
14:28:22 1706  	 SELECT
14:28:22 1707  	   OCHMD.ID,
14:28:22 1708  	   OCHMD.OFFER_CHAIN_ID,
14:28:22 1709  	   OCHMD.NAME,
14:28:22 1710  	   OCHMD.VALUE,
14:28:22 1711  	   OCHMD.CREATE_DATE,
14:28:22 1712  	   OCHMD.CREATED_BY
14:28:22 1713  	 FROM
14:28:22 1714  	   OFFER_CHAIN_META_DATA OCHMD
14:28:22 1715  	 WHERE
14:28:22 1716  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
14:28:22 1717  
14:28:22 1718  EXCEPTION
14:28:22 1719  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:22 1720  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1721  	   SPROC_NAME, 'No such offer chain', SQLERRM);
14:28:22 1722  WHEN OTHERS THEN
14:28:22 1723  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1724  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1725  END GET_ALL_META_DATA;
14:28:22 1726  
14:28:22 1727  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
14:28:22 1728  	 in_group_id	   IN NUMBER,
14:28:22 1729  	 in_offer_chain_id IN NUMBER,
14:28:22 1730  	 out_is_eligible   OUT NUMBER,
14:28:22 1731  	 out_concurrent_subscription_id OUT NUMBER
14:28:22 1732  ) AS
14:28:22 1733  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
14:28:22 1734  -- Variables
14:28:22 1735  var_account_id  NUMBER;
14:28:22 1736  var_is_eligible NUMBER;
14:28:22 1737  var_is_gc       NUMBER;
14:28:22 1738  -- Exceptions
14:28:22 1739  BAD_GROUP_ID		   EXCEPTION;
14:28:22 1740  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
14:28:22 1741  BAD_OC_ID		   EXCEPTION;
14:28:22 1742  EXCEPTION_MESSAGE	   VARCHAR(1024);
14:28:22 1743  BEGIN
14:28:22 1744  
14:28:22 1745  	 var_is_eligible := GLOBAL_CONSTANTS_V23.TRUE;
14:28:22 1746  
14:28:22 1747  	 out_concurrent_subscription_id := NULL;
14:28:22 1748  
14:28:22 1749  	 BEGIN
14:28:22 1750  	   SELECT
14:28:22 1751  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
14:28:22 1752  	   FROM
14:28:22 1753  	     OFFER_CHAIN OC
14:28:22 1754  	   WHERE
14:28:22 1755  	     OC.ID = in_offer_chain_id;
14:28:22 1756  	   EXCEPTION
14:28:22 1757  	     WHEN NO_DATA_FOUND THEN
14:28:22 1758  	       RAISE BAD_OC_ID;
14:28:22 1759  	 END;
14:28:22 1760  
14:28:22 1761  	 -- only check eligibility if this is not a gift certificate
14:28:22 1762  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
14:28:22 1763  	   BEGIN
14:28:22 1764  	     SELECT
14:28:22 1765  	       A.ID into var_account_id
14:28:22 1766  	     FROM
14:28:22 1767  	       ACCOUNT A
14:28:22 1768  	     WHERE
14:28:22 1769  	       A.GROUP_ID = in_group_id;
14:28:22 1770  	     EXCEPTION
14:28:22 1771  	       WHEN NO_DATA_FOUND THEN
14:28:22 1772  		 RAISE BAD_GROUP_ID;
14:28:22 1773  	   END;
14:28:22 1774  
14:28:22 1775  
14:28:22 1776  	   FOR f_offer_chain IN (
14:28:22 1777  	       SELECT
14:28:22 1778  		 S.ID as SUBSCRIPTION_ID,
14:28:22 1779  		 S.OFFER_CHAIN_ID
14:28:22 1780  	       FROM
14:28:22 1781  		 SUBSCRIPTION S
14:28:22 1782  	       WHERE
14:28:22 1783  		 S.ACCOUNT_ID = var_account_id
14:28:22 1784  		 AND (S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:22 1785  		      OR S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
14:28:22 1786  	   )
14:28:22 1787  	   LOOP
14:28:22 1788  	     BEGIN
14:28:22 1789  	       IF (
14:28:22 1790  		 PROCS_OFFER_CHAIN_V23.CHECK_FOR_SAME_PRODUCTS(
14:28:22 1791  		   in_offer_chain_id,
14:28:22 1792  		   f_offer_chain.offer_chain_id,
14:28:22 1793  		   GLOBAL_CONSTANTS_V23.TRUE
14:28:22 1794  		 ) = GLOBAL_CONSTANTS_V23.TRUE
14:28:22 1795  	       ) THEN
14:28:22 1796  		 var_is_eligible := GLOBAL_CONSTANTS_V23.FALSE;
14:28:22 1797  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
14:28:22 1798  	       END IF;
14:28:22 1799  	       EXCEPTION
14:28:22 1800  		 WHEN OTHERS THEN
14:28:22 1801  		   EXCEPTION_MESSAGE := SQLERRM;
14:28:22 1802  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
14:28:22 1803  	     END;
14:28:22 1804  	   END LOOP;
14:28:22 1805  	 END IF;
14:28:22 1806  	 out_is_eligible := var_is_eligible;
14:28:22 1807  
14:28:22 1808  EXCEPTION
14:28:22 1809  WHEN BAD_GROUP_ID THEN
14:28:22 1810  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1811  	   SPROC_NAME, 'No such offer chain', SQLERRM);
14:28:22 1812  WHEN BAD_OC_ID THEN
14:28:22 1813  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:22 1814  	   SPROC_NAME, 'No such offer chain', SQLERRM);
14:28:22 1815  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
14:28:22 1816  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:22 1817  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
14:28:22 1818  WHEN OTHERS THEN
14:28:22 1819  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:22 1820  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:22 1821  END CHECK_PRODUCT_ELIGIBILITY;
14:28:22 1822  
14:28:22 1823  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:28:22 1824  	 in_offer_chain_id	  IN NUMBER,
14:28:22 1825  	 in_action_name 	  IN VARCHAR2,
14:28:22 1826  	 out_notification_type_id OUT NUMBER
14:28:22 1827  ) AS
14:28:22 1828  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
14:28:22 1829  -- Variables
14:28:22 1830  var_action_id NUMBER;
14:28:22 1831  -- Exceptions
14:28:22 1832  BAD_ACTION_NAME	      EXCEPTION;
14:28:22 1833  MULTIPLY_ACTIONS_FOUND EXCEPTION;
14:28:22 1834  BEGIN
14:28:22 1835  
14:28:22 1836  	 BEGIN
14:28:22 1837  	   SELECT
14:28:22 1838  	     A.ID into var_action_id
14:28:22 1839  	   FROM
14:28:22 1840  	     ACTION A
14:28:22 1841  	   WHERE
14:28:22 1842  	     UPPER(A.NAME) = UPPER(in_action_name);
14:28:22 1843  	   EXCEPTION
14:28:22 1844  	     WHEN NO_DATA_FOUND THEN
14:28:22 1845  	       RAISE BAD_ACTION_NAME;
14:28:22 1846  	     WHEN TOO_MANY_ROWS THEN
14:28:22 1847  	       RAISE MULTIPLY_ACTIONS_FOUND;
14:28:22 1848  	 END;
14:28:22 1849  
14:28:23 1850  	 SELECT
14:28:23 1851  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
14:28:23 1852  	 FROM
14:28:23 1853  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
14:28:23 1854  	 WHERE
14:28:23 1855  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
14:28:23 1856  	   AND OCNT.ACTION_ID = var_action_id;
14:28:23 1857  
14:28:23 1858  EXCEPTION
14:28:23 1859  WHEN NO_DATA_FOUND THEN
14:28:23 1860  	 out_notification_type_id := NULL;
14:28:23 1861  WHEN BAD_ACTION_NAME THEN
14:28:23 1862  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:23 1863  	   SPROC_NAME, 'Bad action name', SQLERRM);
14:28:23 1864  WHEN MULTIPLY_ACTIONS_FOUND THEN
14:28:23 1865  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:23 1866  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
14:28:23 1867  WHEN OTHERS THEN
14:28:23 1868  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 1869  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 1870  END GET_NOTIFICATION_TYPE_ID;
14:28:23 1871  
14:28:23 1872  END PROCS_OFFER_CHAIN_V23;
14:28:23 1873  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.15
14:28:23 SQL> 
14:28:23 SQL> prompt Compiling body for procs_polling_sync.sql
Compiling body for procs_polling_sync.sql
14:28:23 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
14:28:23   2  AS
14:28:23   3  	  --------------------------------------------------------------------------------
14:28:23   4  PROCEDURE GATHER_SYNC_EVENTS
14:28:23   5  	  (
14:28:23   6  	      in_last_timestamp TIMESTAMP,
14:28:23   7  	      out_new_timestamp OUT TIMESTAMP)
14:28:23   8  IS
14:28:23   9  BEGIN
14:28:23  10  	  out_new_timestamp := systimestamp;
14:28:23  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
14:28:23  12  END;
14:28:23  13  	  --------------------------------------------------------------------------------
14:28:23  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
14:28:23  15  IS
14:28:23  16  BEGIN
14:28:23  17  	  INSERT
14:28:23  18  	  INTO
14:28:23  19  	      core_owner.polling_sync
14:28:23  20  	      (
14:28:23  21  		  account_id,
14:28:23  22  		  group_id,
14:28:23  23  		  event_type,
14:28:23  24  		  event_date
14:28:23  25  	      )
14:28:23  26  	  select id, group_id, event_type, event_date from (
14:28:23  27  	      SELECT
14:28:23  28  		  a.id,
14:28:23  29  		  a.group_id,
14:28:23  30  		  'I' event_type,
14:28:23  31  		  in_end_ts event_date,
14:28:23  32  		  max(cl.change_time) last_change_time
14:28:23  33  	      FROM
14:28:23  34  		  core_hist_owner.change_log cl,
14:28:23  35  		  core_owner.credit_card cc,
14:28:23  36  		  core_owner.account a
14:28:23  37  	      WHERE
14:28:23  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
14:28:23  39  	      AND cl.item = 'CREDIT_CARD'
14:28:23  40  	      AND cl.id = cc.id
14:28:23  41  	      AND cc.account_id = a.id
14:28:23  42  	      GROUP BY a.id, a.group_id
14:28:23  43  	      UNION ALL
14:28:23  44  	      SELECT
14:28:23  45  		  a.id,
14:28:23  46  		  a.group_id,
14:28:23  47  		  'I',
14:28:23  48  		  in_end_ts,
14:28:23  49  		  max(cl.change_time) last_change_time
14:28:23  50  	      FROM
14:28:23  51  		  core_hist_owner.change_log cl,
14:28:23  52  		  core_owner.paypal p,
14:28:23  53  		  core_owner.account a
14:28:23  54  	      WHERE
14:28:23  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
14:28:23  56  	      AND cl.item = 'PAYPAL'
14:28:23  57  	      AND cl.id = p.id
14:28:23  58  	      AND p.account_id = a.id
14:28:23  59  	      GROUP BY a.id, a.group_id
14:28:23  60  	      UNION ALL
14:28:23  61  	      SELECT
14:28:23  62  		  a.id,
14:28:23  63  		  a.group_id,
14:28:23  64  		  'S',
14:28:23  65  		  in_end_ts,
14:28:23  66  		  max(cl.change_time) last_change_time
14:28:23  67  	      FROM
14:28:23  68  		  core_hist_owner.change_log cl,
14:28:23  69  		  core_owner.subscription s,
14:28:23  70  		  core_owner.account a
14:28:23  71  	      WHERE
14:28:23  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
14:28:23  73  	      AND cl.item = 'SUBSCRIPTION'
14:28:23  74  	      AND cl.id = s.id
14:28:23  75  	      AND s.account_id = a.id
14:28:23  76  	      GROUP BY a.id, a.group_id
14:28:23  77  	      UNION ALL
14:28:23  78  	      SELECT
14:28:23  79  		  a.id,
14:28:23  80  		  a.group_id,
14:28:23  81  		  'G',
14:28:23  82  		  in_end_ts,
14:28:23  83  		  max(cl.change_time) last_change_time
14:28:23  84  	      FROM
14:28:23  85  		  core_hist_owner.change_log cl,
14:28:23  86  		  core_owner.gift_certificate gc,
14:28:23  87  		  core_owner.account a
14:28:23  88  	      WHERE
14:28:23  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
14:28:23  90  	      AND cl.item = 'GIFT_CERTIFICATE'
14:28:23  91  	      AND cl.id = gc.id
14:28:23  92  	      AND gc.purchaser_group_id = a.group_id
14:28:23  93  	      GROUP BY a.id, a.group_id
14:28:23  94  	  ) t
14:28:23  95  	  where not exists (
14:28:23  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
14:28:23  97  	      from polling_sync ps
14:28:23  98  	      where ps.account_id = t.id
14:28:23  99  		and ps.group_id = t.group_id
14:28:23 100  		and ps.event_type = t.event_type
14:28:23 101  		and ps.event_date >= t.last_change_time
14:28:23 102  	  )
14:28:23 103  	  ;
14:28:23 104  END;
14:28:23 105  --------------------------------------------------------------------------------
14:28:23 106  FUNCTION CREATE_NEW_TRANSFER_SET
14:28:23 107  	  (
14:28:23 108  	      in_set_maximum NUMBER)
14:28:23 109  	  RETURN core_owner.polling_sync.set_id%type
14:28:23 110  IS
14:28:23 111  	  pragma autonomous_transaction;
14:28:23 112  	  v_set_id core_owner.polling_sync.set_id%type;
14:28:23 113  BEGIN
14:28:23 114  	  SELECT
14:28:23 115  	      pollsync_setid_seq.nextval
14:28:23 116  	  INTO
14:28:23 117  	      v_set_id
14:28:23 118  	  FROM
14:28:23 119  	      dual;
14:28:23 120  	  update
14:28:23 121  	    core_owner.polling_sync ps
14:28:23 122  	  set
14:28:23 123  	    ps.set_id = v_set_id
14:28:23 124  	  where
14:28:23 125  	    ps.set_id IS NULL and
14:28:23 126  	    rownum <= in_set_maximum
14:28:23 127  	  ;
14:28:23 128  	  COMMIT;
14:28:23 129  	  RETURN v_set_id;
14:28:23 130  END;
14:28:23 131  --------------------------------------------------------------------------------
14:28:23 132  FUNCTION RETREIVE_TRANSFER_SET
14:28:23 133  	  (
14:28:23 134  	      in_set_id core_owner.polling_sync.set_id%type)
14:28:23 135  	  RETURN sys_refcursor
14:28:23 136  IS
14:28:23 137  	  v_refcursor sys_refcursor;
14:28:23 138  BEGIN
14:28:23 139  	  UPDATE
14:28:23 140  	      core_owner.polling_sync ps
14:28:23 141  	  SET
14:28:23 142  	      ps.last_send_date = sysdate,
14:28:23 143  	      ps.num_calls = ps.num_calls + 1
14:28:23 144  	  WHERE
14:28:23 145  	      ps.set_id = in_set_id ;
14:28:23 146  	  OPEN v_refcursor FOR
14:28:23 147  	  SELECT
14:28:23 148  	      ps.set_id,
14:28:23 149  	      ps.group_id,
14:28:23 150  	      ps.event_type,
14:28:23 151  	      ps.event_date
14:28:23 152  	  FROM
14:28:23 153  	      core_owner.polling_sync ps
14:28:23 154  	  WHERE
14:28:23 155  	      ps.set_id = in_set_id
14:28:23 156  	  AND ps.group_id IS NOT NULL ;
14:28:23 157  	  RETURN v_refcursor;
14:28:23 158  END;
14:28:23 159  --------------------------------------------------------------------------------
14:28:23 160  PROCEDURE GET_TRANSFER_SET
14:28:23 161  	  (
14:28:23 162  	      in_set_maximum NUMBER,
14:28:23 163  	      in_max_retries NUMBER,
14:28:23 164  	      out_refcursor OUT sys_refcursor)
14:28:23 165  IS
14:28:23 166  	  v_set_id core_owner.polling_sync.set_id%type;
14:28:23 167  BEGIN
14:28:23 168  	  /* Look for previously sent but unconfirmed sets and
14:28:23 169  	  send again until max_retries calls */
14:28:23 170  	  FOR x IN
14:28:23 171  	  (
14:28:23 172  	      SELECT
14:28:23 173  		  ps.set_id,
14:28:23 174  		  COUNT( *) set_size
14:28:23 175  	      FROM
14:28:23 176  		  core_owner.polling_sync ps
14:28:23 177  	      WHERE
14:28:23 178  		  ps.event_date > sysdate - 14
14:28:23 179  	      AND ps.confirm_date IS NULL
14:28:23 180  	      AND ps.last_send_date IS NOT NULL
14:28:23 181  	      AND ps.num_calls < in_max_retries
14:28:23 182  	      GROUP BY
14:28:23 183  		  ps.set_id
14:28:23 184  	      ORDER BY
14:28:23 185  		  ps.set_id
14:28:23 186  	  )
14:28:23 187  	  LOOP
14:28:23 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
14:28:23 189  	      RETURN;
14:28:23 190  	  END LOOP;
14:28:23 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
14:28:23 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
14:28:23 193  	  RETURN;
14:28:23 194  END;
14:28:23 195  --------------------------------------------------------------------------------
14:28:23 196  PROCEDURE CONFIRM_TRANSFER_SET
14:28:23 197  	  (
14:28:23 198  	      in_set_id core_owner.polling_sync.set_id%type)
14:28:23 199  IS
14:28:23 200  	  v_unconfirmable EXCEPTION;
14:28:23 201  BEGIN
14:28:23 202  	  UPDATE
14:28:23 203  	      core_owner.polling_sync ps
14:28:23 204  	  SET
14:28:23 205  	      ps.confirm_date = systimestamp
14:28:23 206  	  WHERE
14:28:23 207  	      ps.set_id = in_set_id
14:28:23 208  	  AND ps.confirm_date IS NULL ;
14:28:23 209  	  IF(sql%rowcount < 1) THEN
14:28:23 210  	      raise v_unconfirmable;
14:28:23 211  	  END IF;
14:28:23 212  END;
14:28:23 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
14:28:23 214  IS
14:28:23 215  BEGIN
14:28:23 216  	  UPDATE POLLING_SYNC_LASTRUN
14:28:23 217  	  SET last_run = current_timestamp;
14:28:23 218  	  IF ( sql%rowcount = 0 )
14:28:23 219  	  THEN
14:28:23 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
14:28:23 221  	  END if;
14:28:23 222  	  COMMIT;
14:28:23 223  END;
14:28:23 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
14:28:23 225  IS
14:28:23 226  BEGIN
14:28:23 227  	  SELECT LAST_RUN INTO ts
14:28:23 228  	  FROM POLLING_SYNC_LASTRUN
14:28:23 229  	  WHERE ROWNUM < 2;
14:28:23 230  EXCEPTION
14:28:23 231  	WHEN NO_DATA_FOUND
14:28:23 232  	THEN
14:28:23 233  	  ts := current_timestamp;
14:28:23 234  END;
14:28:23 235  END PROCS_POLLING_SYNC;
14:28:23 236  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:23 SQL> 
14:28:23 SQL> prompt Compiling body for procs_product.sql
Compiling body for procs_product.sql
14:28:23 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V23" AS
14:28:23   2  
14:28:23   3  PROCEDURE GET_PRODUCTS (
14:28:23   4  /*
14:28:23   5  Throws exceptions:
14:28:23   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23   7  */
14:28:23   8  	in_status_id   IN  NUMBER,
14:28:23   9  	out_result_set OUT SYS_REFCURSOR
14:28:23  10  ) AS
14:28:23  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
14:28:23  12  BEGIN
14:28:23  13  	OPEN out_result_set FOR
14:28:23  14  	SELECT
14:28:23  15  	  PRODUCT.ID,
14:28:23  16  	  PRODUCT.NAME,
14:28:23  17  	  PRODUCT.TAX_CATEGORY_ID,
14:28:23  18  	  PRODUCT.ENTITLEMENT,
14:28:23  19  	  PRODUCT.IS_SHAREABLE,
14:28:23  20  	  PRODUCT.CREATE_DATE,
14:28:23  21  	  PRODUCT.CREATED_BY,
14:28:23  22  	  PRODUCT.PRODUCT_STATUS_ID,
14:28:23  23  	  PRODUCT.DEFAULT_VAT_RATE
14:28:23  24  	FROM
14:28:23  25  	  PRODUCT
14:28:23  26  	WHERE
14:28:23  27  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
14:28:23  28  EXCEPTION
14:28:23  29  WHEN OTHERS THEN
14:28:23  30  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23  31  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23  32  END GET_PRODUCTS;
14:28:23  33  
14:28:23  34  /******************************************************************************/
14:28:23  35  
14:28:23  36  PROCEDURE GET_PRODUCT_BY_ID (
14:28:23  37  	in_product_id  IN NUMBER,
14:28:23  38  	out_result_set OUT SYS_REFCURSOR
14:28:23  39  ) AS
14:28:23  40  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
14:28:23  41  -- VARIABLES
14:28:23  42  temp_product_id NUMBER;
14:28:23  43  -- EXCEPTIONS
14:28:23  44  BAD_PRODUCT_ID EXCEPTION;
14:28:23  45  BEGIN
14:28:23  46  
14:28:23  47  	BEGIN
14:28:23  48  	  SELECT
14:28:23  49  	    PRODUCT.ID into temp_product_id
14:28:23  50  	  FROM
14:28:23  51  	    PRODUCT
14:28:23  52  	  WHERE
14:28:23  53  	    PRODUCT.ID = in_product_id;
14:28:23  54  	  EXCEPTION
14:28:23  55  	    WHEN NO_DATA_FOUND THEN
14:28:23  56  	      RAISE BAD_PRODUCT_ID;
14:28:23  57  	END;
14:28:23  58  
14:28:23  59  	OPEN out_result_set FOR
14:28:23  60  	SELECT
14:28:23  61  	  PRODUCT.ID,
14:28:23  62  	  PRODUCT.NAME,
14:28:23  63  	  PRODUCT.TAX_CATEGORY_ID,
14:28:23  64  	  PRODUCT.ENTITLEMENT,
14:28:23  65  	  PRODUCT.IS_SHAREABLE,
14:28:23  66  	  PRODUCT.CREATE_DATE,
14:28:23  67  	  PRODUCT.CREATED_BY,
14:28:23  68  	  PRODUCT.PRODUCT_STATUS_ID,
14:28:23  69  	  PRODUCT.DEFAULT_VAT_RATE
14:28:23  70  	FROM
14:28:23  71  	  PRODUCT
14:28:23  72  	WHERE
14:28:23  73  	  PRODUCT.ID = in_product_id;
14:28:23  74  
14:28:23  75  EXCEPTION
14:28:23  76  WHEN BAD_PRODUCT_ID THEN
14:28:23  77  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23  78  	  SPROC_NAME, 'No such product');
14:28:23  79  WHEN OTHERS THEN
14:28:23  80  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23  81  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23  82  END GET_PRODUCT_BY_ID;
14:28:23  83  
14:28:23  84  /******************************************************************************/
14:28:23  85  
14:28:23  86  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
14:28:23  87  	in_line_item_id IN NUMBER,
14:28:23  88  	out_result_set	OUT SYS_REFCURSOR
14:28:23  89  ) AS
14:28:23  90  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
14:28:23  91  -- VARIABLES
14:28:23  92  temp_line_item_id NUMBER;
14:28:23  93  -- EXCEPTIONS
14:28:23  94  BAD_LINE_ITEM_ID EXCEPTION;
14:28:23  95  BEGIN
14:28:23  96  
14:28:23  97  	BEGIN
14:28:23  98  	  SELECT
14:28:23  99  	    LINE_ITEM.ID into temp_line_item_id
14:28:23 100  	  FROM
14:28:23 101  	    LINE_ITEM
14:28:23 102  	  WHERE
14:28:23 103  	    LINE_ITEM.ID = in_line_item_id;
14:28:23 104  	  EXCEPTION
14:28:23 105  	    WHEN NO_DATA_FOUND THEN
14:28:23 106  	      RAISE BAD_LINE_ITEM_ID;
14:28:23 107  	END;
14:28:23 108  
14:28:23 109  	OPEN out_result_set FOR
14:28:23 110  	SELECT
14:28:23 111  	  PRODUCT_OFFERING.ID,
14:28:23 112  	  PRODUCT_OFFERING.PRODUCT_ID,
14:28:23 113  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
14:28:23 114  	  PRODUCT_OFFERING.UNIT_PRICE,
14:28:23 115  	  PRODUCT_OFFERING.QUANTITY,
14:28:23 116  	  PRODUCT_OFFERING.CREATE_DATE,
14:28:23 117  	  PRODUCT_OFFERING.CREATED_BY,
14:28:23 118  	  PRODUCT.ID P_ID,
14:28:23 119  	  PRODUCT.NAME,
14:28:23 120  	  PRODUCT.TAX_CATEGORY_ID,
14:28:23 121  	  PRODUCT.ENTITLEMENT,
14:28:23 122  	  PRODUCT.IS_SHAREABLE,
14:28:23 123  	  PRODUCT.PRODUCT_STATUS_ID,
14:28:23 124  	  PRODUCT.DEFAULT_VAT_RATE
14:28:23 125  	FROM
14:28:23 126  	  PRODUCT_OFFERING
14:28:23 127  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
14:28:23 128  	  INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:28:23 129  	WHERE
14:28:23 130  	  LINE_ITEM.ID = in_line_item_id;
14:28:23 131  
14:28:23 132  EXCEPTION
14:28:23 133  WHEN BAD_LINE_ITEM_ID THEN
14:28:23 134  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 135  	  SPROC_NAME, 'No such line item');
14:28:23 136  WHEN OTHERS THEN
14:28:23 137  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 138  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 139  END GET_PRD_OFFERING_BY_LINE_IT_ID;
14:28:23 140  
14:28:23 141  
14:28:23 142  /******************************************************************************/
14:28:23 143  
14:28:23 144  PROCEDURE GET_PRD_OFFERING_BY_ID (
14:28:23 145  	in_product_offering_id IN NUMBER,
14:28:23 146  	out_result_set	OUT SYS_REFCURSOR
14:28:23 147  ) AS
14:28:23 148  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
14:28:23 149  BEGIN
14:28:23 150  	OPEN out_result_set FOR
14:28:23 151  	SELECT
14:28:23 152  	  PRODUCT_OFFERING.ID,
14:28:23 153  	  PRODUCT_OFFERING.PRODUCT_ID,
14:28:23 154  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
14:28:23 155  	  PRODUCT_OFFERING.UNIT_PRICE,
14:28:23 156  	  PRODUCT_OFFERING.QUANTITY,
14:28:23 157  	  PRODUCT_OFFERING.CREATE_DATE,
14:28:23 158  	  PRODUCT_OFFERING.CREATED_BY,
14:28:23 159  	  PRODUCT.ID P_ID,
14:28:23 160  	  PRODUCT.NAME,
14:28:23 161  	  PRODUCT.TAX_CATEGORY_ID,
14:28:23 162  	  PRODUCT.ENTITLEMENT,
14:28:23 163  	  PRODUCT.IS_SHAREABLE,
14:28:23 164  	  PRODUCT.DEFAULT_VAT_RATE,
14:28:23 165  	  PRODUCT.PRODUCT_STATUS_ID,
14:28:23 166  	  PRODUCT.DEFAULT_VAT_RATE
14:28:23 167  	FROM
14:28:23 168  	    PRODUCT_OFFERING
14:28:23 169  	    INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:28:23 170  	WHERE
14:28:23 171  	  PRODUCT_OFFERING.ID = in_product_offering_id;
14:28:23 172  
14:28:23 173  EXCEPTION
14:28:23 174  WHEN OTHERS THEN
14:28:23 175  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 176  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 177  END GET_PRD_OFFERING_BY_ID;
14:28:23 178  
14:28:23 179  /******************************************************************************/
14:28:23 180  
14:28:23 181  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
14:28:23 182  	in_product_offering_id IN NUMBER,
14:28:23 183  	out_result_set	       OUT SYS_REFCURSOR
14:28:23 184  ) AS
14:28:23 185  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
14:28:23 186  -- VARIABLES
14:28:23 187  temp_product_offering_id NUMBER;
14:28:23 188  -- EXCEPTIONS
14:28:23 189  BAD_PRODUCT_OFFERING_ID EXCEPTION;
14:28:23 190  BEGIN
14:28:23 191  
14:28:23 192  	BEGIN
14:28:23 193  	  SELECT
14:28:23 194  	    PRODUCT_OFFERING.ID into temp_product_offering_id
14:28:23 195  	  FROM
14:28:23 196  	    PRODUCT_OFFERING
14:28:23 197  	  WHERE
14:28:23 198  	    PRODUCT_OFFERING.ID = in_product_offering_id;
14:28:23 199  	  EXCEPTION
14:28:23 200  	    WHEN NO_DATA_FOUND THEN
14:28:23 201  	      RAISE BAD_PRODUCT_OFFERING_ID;
14:28:23 202  	END;
14:28:23 203  
14:28:23 204  	OPEN out_result_set FOR
14:28:23 205  	SELECT
14:28:23 206  	  DISCOUNT.ID,
14:28:23 207  	  DISCOUNT.NAME,
14:28:23 208  	  DISCOUNT.FIXED_AMOUNT,
14:28:23 209  	  DISCOUNT.PERCENT_AMOUNT,
14:28:23 210  	  DISCOUNT.DISCOUNT_TYPE_ID,
14:28:23 211  	  DISCOUNT.CREATE_DATE,
14:28:23 212  	  DISCOUNT.CREATED_BY,
14:28:23 213  	  DISCOUNT.DESCRIPTION
14:28:23 214  	FROM
14:28:23 215  	  DISCOUNT
14:28:23 216  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
14:28:23 217  	WHERE
14:28:23 218  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
14:28:23 219  
14:28:23 220  EXCEPTION
14:28:23 221  WHEN BAD_PRODUCT_OFFERING_ID THEN
14:28:23 222  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 223  	  SPROC_NAME, 'No such product offering');
14:28:23 224  WHEN OTHERS THEN
14:28:23 225  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 226  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 227  END GET_PRODUCT_OFFERING_DISCOUNTS;
14:28:23 228  
14:28:23 229  END PROCS_PRODUCT_V23;
14:28:23 230  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:23 SQL> 
14:28:23 SQL> prompt Compiling body for procs_reporting.sql
Compiling body for procs_reporting.sql
14:28:23 SQL> CREATE OR REPLACE
14:28:23   2  PACKAGE BODY PROCS_REPORTING AS
14:28:23   3  
14:28:23   4  ----
14:28:23   5  --------------------------------------------------------------------------------
14:28:23   6  ----
14:28:23   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23   8  	  is
14:28:23   9  	  begin
14:28:23  10  	      open out_cursor for
14:28:23  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
14:28:23  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
14:28:23  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
14:28:23  14  			,c.create_date, c.update_date
14:28:23  15  		  from charge c
14:28:23  16  		      ,charge_status cs
14:28:23  17  		      ,instrument_type it
14:28:23  18  		      ,ids
14:28:23  19  		  where c.id = ids.id
14:28:23  20  		    and c.charge_status_id = cs.id
14:28:23  21  		    and c.instrument_type_id = it.id
14:28:23  22  	      ;
14:28:23  23  	  end;
14:28:23  24  ----
14:28:23  25  --------------------------------------------------------------------------------
14:28:23  26  ----
14:28:23  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23  28  	  is
14:28:23  29  	  begin
14:28:23  30  	      open out_cursor for
14:28:23  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
14:28:23  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
14:28:23  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date, l.grace_start_date, l.grace_end_date
14:28:23  35  		  from license l
14:28:23  36  		      ,license_status ls
14:28:23  37  		      ,ids
14:28:23  38  		  where l.id = ids.id
14:28:23  39  		    and l.license_status_id = ls.id
14:28:23  40  	      ;
14:28:23  41  	  end;
14:28:23  42  ----
14:28:23  43  --------------------------------------------------------------------------------
14:28:23  44  ----
14:28:23  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23  46  	  is
14:28:23  47  	  begin
14:28:23  48  	      open out_cursor for
14:28:23  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
14:28:23  50  		  select
14:28:23  51  		    i.id invoice_id,
14:28:23  52  		    i.create_date,
14:28:23  53  		    i.update_date,
14:28:23  54  		    i.invoice_status_id,
14:28:23  55  		    istat.value invoice_status,
14:28:23  56  		    NVL(
14:28:23  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
14:28:23  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
14:28:23  59  		    ) offer_chain_id
14:28:23  60  		  from	   invoice i
14:28:23  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
14:28:23  62  		      join ids			on ids.id = i.id
14:28:23  63  		  where 1 = 1
14:28:23  64  	      ;
14:28:23  65  	  end;
14:28:23  66  ----
14:28:23  67  --------------------------------------------------------------------------------
14:28:23  68  ----
14:28:23  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23  70  	  is
14:28:23  71  	  begin
14:28:23  72  	      open out_cursor for
14:28:23  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
14:28:23  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
14:28:23  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
14:28:23  76  		  from line_item li
14:28:23  77  		    , ids
14:28:23  78  		  where li.id = ids.id
14:28:23  79  	      ;
14:28:23  80  	  end;
14:28:23  81  ----
14:28:23  82  --------------------------------------------------------------------------------
14:28:23  83  ----
14:28:23  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23  85  	  is
14:28:23  86  	  begin
14:28:23  87  	      open out_cursor for
14:28:23  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
14:28:23  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
14:28:23  91  			,a.instrument_id, a.tax_exempt_id
14:28:23  92  			-- need system category??
14:28:23  93  		  from account a
14:28:23  94  		      ,account_status astat
14:28:23  95  		      ,instrument_type it
14:28:23  96  		      , ids
14:28:23  97  		  where a.id = ids.id
14:28:23  98  		    and astat.id = a.account_status_id
14:28:23  99  		    and a.instrument_type_id = it.id(+)
14:28:23 100  	      ;
14:28:23 101  	  end;
14:28:23 102  ----
14:28:23 103  --------------------------------------------------------------------------------
14:28:23 104  ----
14:28:23 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 106  	  is
14:28:23 107  	  begin
14:28:23 108  	      open out_cursor for
14:28:23 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
14:28:23 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
14:28:23 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
14:28:23 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
14:28:23 114  		  from subscription s
14:28:23 115  		      ,subscription_status ss
14:28:23 116  		      ,subscription_cancel_reason sct
14:28:23 117  		      ,instrument_type it
14:28:23 118  		      , ids
14:28:23 119  		  where s.id = ids.id
14:28:23 120  		    and ss.id = s.subscription_status_id
14:28:23 121  		    and s.instrument_type_id = it.id
14:28:23 122  		    and sct.id(+) = s.sct_id
14:28:23 123  	      ;
14:28:23 124  	  end;
14:28:23 125  ----
14:28:23 126  --------------------------------------------------------------------------------
14:28:23 127  ----
14:28:23 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 129  	  is
14:28:23 130  	  begin
14:28:23 131  	      open out_cursor for
14:28:23 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 133  		  select t.id transaction_id, t.transaction_amount
14:28:23 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
14:28:23 135  			,t.create_date, t.update_date, t.is_settled
14:28:23 136  		  from transaction t
14:28:23 137  		      ,transaction_status ts
14:28:23 138  		      , ids
14:28:23 139  		  where t.id = ids.id
14:28:23 140  		    and t.transaction_status_id = ts.id
14:28:23 141  	      ;
14:28:23 142  	  end;
14:28:23 143  ----
14:28:23 144  --------------------------------------------------------------------------------
14:28:23 145  ----
14:28:23 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 147  	  is
14:28:23 148  	  begin
14:28:23 149  	      open out_cursor for
14:28:23 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
14:28:23 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
14:28:23 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
14:28:23 154  			,oc.billing_source_id, bs.name billing_source_name
14:28:23 155  			,oc.is_seat_license,oc.group_account_type_id
14:28:23 156  		  from offer_chain oc
14:28:23 157  		      , offer_chain_status ocs
14:28:23 158  		      , ids
14:28:23 159  		      , vendor_source vs
14:28:23 160  		      , billing_source bs
14:28:23 161  		  where oc.id = ids.id
14:28:23 162  		    and oc.offer_chain_status_id = ocs.id
14:28:23 163  		    and oc.vendor_source_id = vs.id
14:28:23 164  		    and oc.billing_source_id = bs.id
14:28:23 165  	      ;
14:28:23 166  	  end;
14:28:23 167  ----
14:28:23 168  --------------------------------------------------------------------------------
14:28:23 169  ----
14:28:23 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 171  	  is
14:28:23 172  	  begin
14:28:23 173  	      open out_cursor for
14:28:23 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
14:28:23 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
14:28:23 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
14:28:23 177  		  from offer_offer_chain ooc
14:28:23 178  		  , ids
14:28:23 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
14:28:23 180  	      ;
14:28:23 181  	  end;
14:28:23 182  ----
14:28:23 183  --------------------------------------------------------------------------------
14:28:23 184  ----
14:28:23 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 186  	  is
14:28:23 187  	  begin
14:28:23 188  	      open out_cursor for
14:28:23 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
14:28:23 191  		  from offer o
14:28:23 192  		      ,offer_status os
14:28:23 193  		      , ids
14:28:23 194  		  where o.id = ids.id
14:28:23 195  		    and o.offer_status_id = os.id
14:28:23 196  	      ;
14:28:23 197  	  end;
14:28:23 198  ----
14:28:23 199  --------------------------------------------------------------------------------
14:28:23 200  ----
14:28:23 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 202  	  is
14:28:23 203  	  begin
14:28:23 204  	      open out_cursor for
14:28:23 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
14:28:23 207  			 ,gc.expiration_date, gc.purchase_date
14:28:23 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
14:28:23 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
14:28:23 210  			 ,recipient_address_id
14:28:23 211  			 ,redeemer_address_id
14:28:23 212  			 ,recipient_notify_date
14:28:23 213  			 ,recipient_name
14:28:23 214  			 ,redemption_date
14:28:23 215  			 ,recipient_email
14:28:23 216  		  from gift_certificate gc
14:28:23 217  		      ,gift_certificate_status gcs
14:28:23 218  		      , ids
14:28:23 219  		  where gc.id = ids.id
14:28:23 220  		    and gc.gift_certificate_status_id = gcs.id
14:28:23 221  	      ;
14:28:23 222  	  end;
14:28:23 223  ----
14:28:23 224  --------------------------------------------------------------------------------
14:28:23 225  ----
14:28:23 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 227  	  is
14:28:23 228  	  begin
14:28:23 229  	      open out_cursor for
14:28:23 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
14:28:23 232  		  from product_offering po
14:28:23 233  		  , ids
14:28:23 234  		  where po.id = ids.id
14:28:23 235  	      ;
14:28:23 236  	  end;
14:28:23 237  ----
14:28:23 238  --------------------------------------------------------------------------------
14:28:23 239  ----
14:28:23 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 241  	  is
14:28:23 242  	  begin
14:28:23 243  	      open out_cursor for
14:28:23 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 245  		  select p.id product_id, p.name, p.entitlement, p.is_shareable, p.tax_category_id, p.product_status_id, ps.value product_status
14:28:23 246  			,p.create_date
14:28:23 247  		  from product p
14:28:23 248  		      ,product_status ps
14:28:23 249  		      , ids
14:28:23 250  		  where p.id = ids.id
14:28:23 251  		    and p.product_status_id = ps.id
14:28:23 252  	      ;
14:28:23 253  	  end;
14:28:23 254  
14:28:23 255  
14:28:23 256  ----
14:28:23 257  --------------------------------------------------------------------------------
14:28:23 258  ----
14:28:23 259  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 260  	  is
14:28:23 261  	  begin
14:28:23 262  	      open out_cursor for
14:28:23 263  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
14:28:23 264  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
14:28:23 265  		  from offer_product_offering opo
14:28:23 266  		  , ids
14:28:23 267  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
14:28:23 268  	      ;
14:28:23 269  	  end;
14:28:23 270  ----
14:28:23 271  --------------------------------------------------------------------------------
14:28:23 272  ----
14:28:23 273  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 274  	  is
14:28:23 275  	  begin
14:28:23 276  	      open out_cursor for
14:28:23 277  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
14:28:23 278  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
14:28:23 279  		  from discount_product_offering dpo
14:28:23 280  		  , ids
14:28:23 281  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
14:28:23 282  	      ;
14:28:23 283  	  end;
14:28:23 284  ----
14:28:23 285  --------------------------------------------------------------------------------
14:28:23 286  ----
14:28:23 287  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 288  	  is
14:28:23 289  	  begin
14:28:23 290  	      open out_cursor for
14:28:23 291  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 292  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
14:28:23 293  			,d.discount_type_id, dt.value discount_type, d.create_date
14:28:23 294  		  from discount d
14:28:23 295  		      ,discount_type dt
14:28:23 296  		      , ids
14:28:23 297  		  where d.id = ids.id
14:28:23 298  		    and d.discount_type_id = dt.id
14:28:23 299  	      ;
14:28:23 300  	  end;
14:28:23 301  ----
14:28:23 302  --------------------------------------------------------------------------------
14:28:23 303  ----
14:28:23 304  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 305  	  is
14:28:23 306  	  begin
14:28:23 307  	      open out_cursor for
14:28:23 308  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 309  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
14:28:23 310  		  from offer_chain_eligibility oce
14:28:23 311  		  , ids
14:28:23 312  		  where oce.id = ids.id
14:28:23 313  	      ;
14:28:23 314  	  end;
14:28:23 315  ----
14:28:23 316  --------------------------------------------------------------------------------
14:28:23 317  ----
14:28:23 318  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 319  	  is
14:28:23 320  	  begin
14:28:23 321  	      open out_cursor for
14:28:23 322  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 323  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
14:28:23 324  		  from offer_chain_meta_data ocm
14:28:23 325  		  , ids
14:28:23 326  		  where ocm.id = ids.id
14:28:23 327  	      ;
14:28:23 328  	  end;
14:28:23 329  ----
14:28:23 330  --------------------------------------------------------------------------------
14:28:23 331  ----
14:28:23 332  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 333  	  is
14:28:23 334  	  begin
14:28:23 335  	      open out_cursor for
14:28:23 336  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 337  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
14:28:23 338  		  from subscription_meta_data sm
14:28:23 339  		  , ids
14:28:23 340  		  where sm.id = ids.id
14:28:23 341  	      ;
14:28:23 342  	  end;
14:28:23 343  ----
14:28:23 344  --------------------------------------------------------------------------------
14:28:23 345  ----
14:28:23 346  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 347  	  is
14:28:23 348  	  begin
14:28:23 349  	      open out_cursor for
14:28:23 350  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 351  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
14:28:23 352  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
14:28:23 353  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
14:28:23 354  		  from credit_card cc
14:28:23 355  		      ,credit_card_type cct
14:28:23 356  		      ,credit_card_status ccs
14:28:23 357  		      , ids
14:28:23 358  		  where cc.id = ids.id
14:28:23 359  		    and cc.credit_card_type_id = cct.id(+)
14:28:23 360  		    and cc.credit_card_status_id = ccs.id
14:28:23 361  	      ;
14:28:23 362  	  end;
14:28:23 363  ----
14:28:23 364  --------------------------------------------------------------------------------
14:28:23 365  ----
14:28:23 366  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 367  	  is
14:28:23 368  	  begin
14:28:23 369  	      open out_cursor for
14:28:23 370  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 371  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
14:28:23 372  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
14:28:23 373  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
14:28:23 374  			,ta.create_date
14:28:23 375  		  from transaction_attempt ta
14:28:23 376  		      ,transaction_attempt_status tas
14:28:23 377  		      , ids
14:28:23 378  		  where ta.id = ids.id
14:28:23 379  		    and ta.transaction_attempt_status_id = tas.id
14:28:23 380  	      ;
14:28:23 381  	  end;
14:28:23 382  ----
14:28:23 383  --------------------------------------------------------------------------------
14:28:23 384  ----
14:28:23 385  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 386  	  is
14:28:23 387  	  begin
14:28:23 388  	      open out_cursor for
14:28:23 389  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 390  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
14:28:23 391  			,ia.adjustment_date, ia.create_date
14:28:23 392  		  from invoice_adjustment ia, invoice_adjustment_reason ir
14:28:23 393  		  , ids
14:28:23 394  		  where ia.id = ids.id
14:28:23 395  		  and ir.id = ia.invoice_adjustment_reason_id
14:28:23 396  	      ;
14:28:23 397  	  end;
14:28:23 398  ----
14:28:23 399  --------------------------------------------------------------------------------
14:28:23 400  ----
14:28:23 401  
14:28:23 402  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 403  	  is
14:28:23 404  	  begin
14:28:23 405  	      open out_cursor for
14:28:23 406  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 407  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
14:28:23 408  		  from line_item_adjustment lia
14:28:23 409  		  , ids
14:28:23 410  		  where lia.id = ids.id
14:28:23 411  	      ;
14:28:23 412  	  end;
14:28:23 413  ----
14:28:23 414  --------------------------------------------------------------------------------
14:28:23 415  ----
14:28:23 416  
14:28:23 417  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 418  	  is
14:28:23 419  	  begin
14:28:23 420  	      open out_cursor for
14:28:23 421  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 422  		  select
14:28:23 423  		    tax.id tax_id,
14:28:23 424  		    ttype.code tax_type,
14:28:23 425  		    tax.calculated_amount,
14:28:23 426  		    tax.create_date,
14:28:23 427  		    tax.line_item_id,
14:28:23 428  		    tax.effective_rate,
14:28:23 429  		    tax.taxable_amount,
14:28:23 430  		    tax.tax_rule_id,
14:28:23 431  		    j.name jurisdiction_level,
14:28:23 432  		    tax.jurisdiction_name,
14:28:23 433  		    tax.jurisdiction_id,
14:28:23 434  		    tax.ext_tax_type,
14:28:23 435  		    tax.ext_result,
14:28:23 436  		    tax.imposition_type,
14:28:23 437  		    tax.imposition
14:28:23 438  		  from tax
14:28:23 439  		  , tax_type ttype
14:28:23 440  		  , jurisdiction_level j
14:28:23 441  		  , ids
14:28:23 442  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
14:28:23 443  	      ;
14:28:23 444  	  end;
14:28:23 445  ----
14:28:23 446  --------------------------------------------------------------------------------
14:28:23 447  ----
14:28:23 448  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
14:28:23 449  	  is
14:28:23 450  	  begin
14:28:23 451  	      open out_cursor for
14:28:23 452  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
14:28:23 453  		  select
14:28:23 454  		    tax.id tad_adjustment_id,
14:28:23 455  		    tax.tax_id tax_id,
14:28:23 456  		    tax.line_item_adjustment_id line_item_adjustment_id,
14:28:23 457  		    tax.amount tax_amount,
14:28:23 458  		    tax.create_date create_date
14:28:23 459  		  from tax_adjustment tax
14:28:23 460  		  , ids
14:28:23 461  		  where tax.id = ids.id
14:28:23 462  	      ;
14:28:23 463  	  end;
14:28:23 464  ----
14:28:23 465  --------------------------------------------------------------------------------
14:28:23 466  ----
14:28:23 467  /**/
14:28:23 468  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 469  	  BEGIN
14:28:23 470  	    OPEN OUT_CURSOR FOR
14:28:23 471  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 472  	    SELECT
14:28:23 473  		t.id rcn_ext_source_log_id
14:28:23 474  	      , t.extraction_timestamp
14:28:23 475  	      , t.report_date
14:28:23 476  	      , t.report_generation_datetime
14:28:23 477  	      , t.record_type
14:28:23 478  	      , t.report_file_name
14:28:23 479  	      , t.create_date
14:28:23 480  	      , t.created_by
14:28:23 481  	    FROM rcn_ext_source_log t, ids
14:28:23 482  	    WHERE ids.id = t.id;
14:28:23 483  	  END;
14:28:23 484  
14:28:23 485  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 486  	  BEGIN
14:28:23 487  	    OPEN OUT_CURSOR FOR
14:28:23 488  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 489  	    SELECT
14:28:23 490  		t.id rcn_cpt_svc_chg_dtl_id
14:28:23 491  	      , t.rcn_ext_source_log_id
14:28:23 492  	      , t.record_type
14:28:23 493  	      , t.category
14:28:23 494  	      , t.sub_category
14:28:23 495  	      , t.entity_type
14:28:23 496  	      , t.entity_number
14:28:23 497  	      , t.funds_transfer_inst_number
14:28:23 498  	      , t.secure_ba_number
14:28:23 499  	      , t.settlement_currency
14:28:23 500  	      , t.fee_schedule
14:28:23 501  	      , t.mop
14:28:23 502  	      , t.interchange_qualification
14:28:23 503  	      , t.fee_type_description
14:28:23 504  	      , t.action_type
14:28:23 505  	      , t.unit_quantity
14:28:23 506  	      , t.unit_fee
14:28:23 507  	      , t.amount
14:28:23 508  	      , t.percentage_rate
14:28:23 509  	      , t.total_charge
14:28:23 510  	      , t.create_date
14:28:23 511  	      , t.created_by
14:28:23 512  	    FROM rcn_cpt_service_charge_detail t, ids
14:28:23 513  	    WHERE ids.id = t.id;
14:28:23 514  	  END;
14:28:23 515  ----
14:28:23 516  --------------------------------------------------------------------------------
14:28:23 517  ----
14:28:23 518  
14:28:23 519  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 520  	  BEGIN
14:28:23 521  	    OPEN OUT_CURSOR FOR
14:28:23 522  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 523  	    SELECT
14:28:23 524  		t.id rcn_cpt_excp_dtl_id
14:28:23 525  	      , t.rcn_ext_source_log_id
14:28:23 526  	      , t.record_type
14:28:23 527  	      , t.submission_date
14:28:23 528  	      , t.pid_number
14:28:23 529  	      , t.pid_short_name
14:28:23 530  	      , t.submission_number
14:28:23 531  	      , t.record_number
14:28:23 532  	      , t.entity_type
14:28:23 533  	      , t.entity_number
14:28:23 534  	      , t.presentment_currency
14:28:23 535  	      , t.merchant_order_number
14:28:23 536  	      , t.rdfi_number
14:28:23 537  	      , t.account_number
14:28:23 538  	      , t.expiration_date
14:28:23 539  	      , t.amount
14:28:23 540  	      , t.mop
14:28:23 541  	      , t.action_code
14:28:23 542  	      , t.auth_date
14:28:23 543  	      , t.auth_code
14:28:23 544  	      , t.auth_response_code
14:28:23 545  	      , t.trace_number
14:28:23 546  	      , t.consumer_country_code
14:28:23 547  	      , t.category
14:28:23 548  	      , t.mcc
14:28:23 549  	      , t.reject_code
14:28:23 550  	      , t.submission_status
14:28:23 551  	      , t.create_date
14:28:23 552  	      , t.created_by
14:28:23 553  	    FROM rcn_cpt_exception_detail t, ids
14:28:23 554  	    WHERE ids.id = t.id;
14:28:23 555  	  END;
14:28:23 556  ----
14:28:23 557  --------------------------------------------------------------------------------
14:28:23 558  ----
14:28:23 559  
14:28:23 560  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 561  	  BEGIN
14:28:23 562  	    OPEN OUT_CURSOR FOR
14:28:23 563  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 564  	      SELECT
14:28:23 565  		t.id rcn_cpt_deposit_dtl_id
14:28:23 566  	      , t.rcn_ext_source_log_id
14:28:23 567  	      , t.record_type
14:28:23 568  	      , t.submission_date
14:28:23 569  	      , t.pid_number
14:28:23 570  	      , t.pid_short_name
14:28:23 571  	      , t.submission_number
14:28:23 572  	      , t.record_number
14:28:23 573  	      , t.entity_type
14:28:23 574  	      , t.entity_number
14:28:23 575  	      , t.presentment_currency
14:28:23 576  	      , t.merchant_order_number
14:28:23 577  	      , t.rdfi_number
14:28:23 578  	      , t.account_number
14:28:23 579  	      , t.expiration_date
14:28:23 580  	      , t.amount
14:28:23 581  	      , t.mop
14:28:23 582  	      , t.action_code
14:28:23 583  	      , t.auth_date
14:28:23 584  	      , t.auth_code
14:28:23 585  	      , t.auth_response_code
14:28:23 586  	      , t.trace_number
14:28:23 587  	      , t.consumer_country_code
14:28:23 588  	      , t.mcc
14:28:23 589  	      , t.create_date
14:28:23 590  	      , t.created_by
14:28:23 591  	      , t.fee_code
14:28:23 592  	      , t.unit_fee
14:28:23 593  	      , t.percent_fee
14:28:23 594  	      , t.total_interchange_fee
14:28:23 595  	      , t.total_assessment_fee
14:28:23 596  	      , t.other_fee
14:28:23 597  	    FROM rcn_cpt_deposit_detail t, ids
14:28:23 598  	    WHERE ids.id = t.id;
14:28:23 599  	  END;
14:28:23 600  ----
14:28:23 601  --------------------------------------------------------------------------------
14:28:23 602  ----
14:28:23 603  
14:28:23 604  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 605  	  BEGIN
14:28:23 606  	    OPEN OUT_CURSOR FOR
14:28:23 607  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 608  	    SELECT
14:28:23 609  		t.id rcn_cpt_chgbk_act_dtl_id
14:28:23 610  	      , t.rcn_ext_source_log_id
14:28:23 611  	      , t.record_type
14:28:23 612  	      , t.entity_type
14:28:23 613  	      , t.entity_number
14:28:23 614  	      , t.chargeback_amount_issuer
14:28:23 615  	      , t.prev_partial_representment
14:28:23 616  	      , t.presentment_currency
14:28:23 617  	      , t.chargeback_category
14:28:23 618  	      , t.status_flag
14:28:23 619  	      , t.sequence_number
14:28:23 620  	      , t.merchant_order_number
14:28:23 621  	      , t.account_number
14:28:23 622  	      , t.reason_code
14:28:23 623  	      , t.transaction_date
14:28:23 624  	      , t.chargeback_date
14:28:23 625  	      , t.activity_date
14:28:23 626  	      , t.chargeback_amount_action
14:28:23 627  	      , t.fee_amount
14:28:23 628  	      , t.usage_code
14:28:23 629  	      , t.mop_code
14:28:23 630  	      , t.authorization_date
14:28:23 631  	      , t.chargeback_due_date
14:28:23 632  	      , t.create_date
14:28:23 633  	      , t.created_by
14:28:23 634  	    FROM rcn_cpt_chargeback_act_detail t, ids
14:28:23 635  	    WHERE ids.id = t.id;
14:28:23 636  	  END;
14:28:23 637  ----
14:28:23 638  --------------------------------------------------------------------------------
14:28:23 639  ----
14:28:23 640  
14:28:23 641  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 642  	  BEGIN
14:28:23 643  	    OPEN OUT_CURSOR FOR
14:28:23 644  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 645  	    SELECT
14:28:23 646  		t.id rcn_pp_settlement_id
14:28:23 647  	      , t.rcn_ext_source_log_id
14:28:23 648  	      , t.transaction_id
14:28:23 649  	      , t.invoice_id
14:28:23 650  	      , t.pp_ref_id
14:28:23 651  	      , t.pp_ref_id_type
14:28:23 652  	      , t.trans_event_code
14:28:23 653  	      , t.trans_init_date
14:28:23 654  	      , t.trans_comp_date
14:28:23 655  	      , t.trans_deb_or_cred
14:28:23 656  	      , t.gross_trans_amount
14:28:23 657  	      , t.gross_trans_currency
14:28:23 658  	      , t.fee_deb_or_cred
14:28:23 659  	      , t.fee_amount
14:28:23 660  	      , t.fee_currency
14:28:23 661  	      , t.custom_field
14:28:23 662  	      , t.create_date
14:28:23 663  	      , t.created_by
14:28:23 664  	    FROM rcn_pp_settlement t, ids
14:28:23 665  	    WHERE ids.id = t.id;
14:28:23 666  	  END;
14:28:23 667  ----
14:28:23 668  --------------------------------------------------------------------------------
14:28:23 669  ----
14:28:23 670  
14:28:23 671  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 672  	  BEGIN
14:28:23 673  	    OPEN OUT_CURSOR FOR
14:28:23 674  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 675  	    SELECT
14:28:23 676  		t.id rcn_pp_dispute_id
14:28:23 677  	      , t.rcn_ext_source_log_id
14:28:23 678  	      , t.dispute_type
14:28:23 679  	      , t.claimant_name
14:28:23 680  	      , t.claimant_email
14:28:23 681  	      , t.transaction_id
14:28:23 682  	      , t.trans_date
14:28:23 683  	      , t.disputed_amount
14:28:23 684  	      , t.disputed_amount_currency
14:28:23 685  	      , t.dispute_reason
14:28:23 686  	      , t.dispute_filing_date
14:28:23 687  	      , t.dispute_status
14:28:23 688  	      , t.dispute_case_id
14:28:23 689  	      , t.invoice_id
14:28:23 690  	      , t.create_date
14:28:23 691  	      , t.created_by
14:28:23 692  	    FROM
14:28:23 693  	    rcn_pp_dispute t, ids
14:28:23 694  	    WHERE ids.id = t.id;
14:28:23 695  	  END;
14:28:23 696  ----
14:28:23 697  --------------------------------------------------------------------------------
14:28:23 698  ----
14:28:23 699  
14:28:23 700  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 701  	  BEGIN
14:28:23 702  	    OPEN OUT_CURSOR FOR
14:28:23 703  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 704  	    SELECT
14:28:23 705  		t.id rcn_pp_trans_dtl_id
14:28:23 706  	      , t.rcn_ext_source_log_id
14:28:23 707  	      , t.transaction_id
14:28:23 708  	      , t.invoice_id
14:28:23 709  	      , t.pp_ref_id
14:28:23 710  	      , t.trans_event_code
14:28:23 711  	      , t.trans_init_date
14:28:23 712  	      , t.trans_comp_date
14:28:23 713  	      , t.trans_deb_or_cred
14:28:23 714  	      , t.gross_trans_amount
14:28:23 715  	      , t.gross_trans_currency
14:28:23 716  	      , t.fee_deb_or_cred
14:28:23 717  	      , t.fee_amount
14:28:23 718  	      , t.fee_currency
14:28:23 719  	      , t.trans_status
14:28:23 720  	      , t.insurance_amount
14:28:23 721  	      , t.sales_tax_amount
14:28:23 722  	      , t.shipping_amount
14:28:23 723  	      , t.trans_subject
14:28:23 724  	      , t.trans_note
14:28:23 725  	      , t.payer_acct_id
14:28:23 726  	      , t.payer_addr_status
14:28:23 727  	      , t.item_name
14:28:23 728  	      , t.item_id
14:28:23 729  	      , t.option_1_name
14:28:23 730  	      , t.option_1_value
14:28:23 731  	      , t.option_2_name
14:28:23 732  	      , t.option_2_value
14:28:23 733  	      , t.auction_site
14:28:23 734  	      , t.auction_buyer_id
14:28:23 735  	      , t.auction_closing_date
14:28:23 736  	      , t.shipping_addr_line_1
14:28:23 737  	      , t.shipping_addr_line_2
14:28:23 738  	      , t.shipping_addr_city
14:28:23 739  	      , t.shipping_addr_state
14:28:23 740  	      , t.shipping_addr_zip
14:28:23 741  	      , t.shipping_addr_country
14:28:23 742  	      , t.custom_field
14:28:23 743  	      , t.create_date
14:28:23 744  	      , t.created_by
14:28:23 745  	    FROM rcn_pp_trans_detail t, ids
14:28:23 746  	    WHERE ids.id = t.id;
14:28:23 747  	  END;
14:28:23 748  ----
14:28:23 749  --------------------------------------------------------------------------------
14:28:23 750  ----
14:28:23 751  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 752  	  BEGIN
14:28:23 753  	    OPEN OUT_CURSOR FOR
14:28:23 754  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_AMEX_CHARGEBACK' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 755  	    SELECT
14:28:23 756  	      rac.id
14:28:23 757  	    , rac.rcn_ext_source_log_id
14:28:23 758  	    , rac.resolution
14:28:23 759  	    , rac.from_system
14:28:23 760  	    , rac.rejects_to_system
14:28:23 761  	    , rac.disputes_to_system
14:28:23 762  	    , rac.date_of_adjustment
14:28:23 763  	    , rac.date_of_charge
14:28:23 764  	    , rac.case_type
14:28:23 765  	    , rac.cb_reas_code
14:28:23 766  	    , rac.cb_amount
14:28:23 767  	    , rac.cb_adjustment_number
14:28:23 768  	    , rac.billed_amount
14:28:23 769  	    , rac.soc_amount
14:28:23 770  	    , rac.foreign_amount
14:28:23 771  	    , rac.currency
14:28:23 772  	    , rac.note1
14:28:23 773  	    , rac.note2
14:28:23 774  	    , rac.note3
14:28:23 775  	    , rac.note4
14:28:23 776  	    , rac.note5
14:28:23 777  	    , rac.note6
14:28:23 778  	    , rac.note7
14:28:23 779  	    , rac.ind_ref_number
14:28:23 780  	    , rac.create_date
14:28:23 781  	    , rac.created_by
14:28:23 782  	    , rac.update_date
14:28:23 783  	    , rac.updated_by
14:28:23 784  	    FROM rcn_amex_chargeback rac, ids
14:28:23 785  	    WHERE ids.id = rac.id;
14:28:23 786  	  END;
14:28:23 787  ----
14:28:23 788  --------------------------------------------------------------------------------
14:28:23 789  ----
14:28:23 790  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 791  	  BEGIN
14:28:23 792  	    OPEN OUT_CURSOR FOR
14:28:23 793  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 794  	    SELECT
14:28:23 795  		t.ID PAYPAL_ID
14:28:23 796  	      , ACCOUNT_ID
14:28:23 797  	      , INSTRUMENT_NAME
14:28:23 798  	      , CREATE_DATE
14:28:23 799  	      , CREATED_BY
14:28:23 800  	      , UPDATE_DATE
14:28:23 801  	      , UPDATED_BY
14:28:23 802  	      , s.value PAYPAL_STATUS
14:28:23 803  	      , STATE
14:28:23 804  	      , CITY
14:28:23 805  	      , POSTAL_CODE
14:28:23 806  	      , COUNTRY
14:28:23 807  	      , EXPIRATION_DATE
14:28:23 808  	    FROM paypal t, paypal_status s, ids
14:28:23 809  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
14:28:23 810  	  END;
14:28:23 811  ----
14:28:23 812  --------------------------------------------------------------------------------
14:28:23 813  ----
14:28:23 814  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
14:28:23 815  	  BEGIN
14:28:23 816  	    OPEN OUT_CURSOR FOR
14:28:23 817  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
14:28:23 818  	    SELECT
14:28:23 819  	      a.id ADDRESS_ID,
14:28:23 820  	      address1,
14:28:23 821  	      address2,
14:28:23 822  	      city,
14:28:23 823  	      state,
14:28:23 824  	      postal_code,
14:28:23 825  	      country,
14:28:23 826  	      create_date,
14:28:23 827  	      created_by,
14:28:23 828  	      update_date,
14:28:23 829  	      updated_by
14:28:23 830  	    FROM address a, ids
14:28:23 831  	    WHERE ids.id = a.id;
14:28:23 832  	  END;
14:28:23 833  ----
14:28:23 834  --------------------------------------------------------------------------------
14:28:23 835  ----
14:28:23 836  /**/
14:28:23 837  END PROCS_REPORTING;
14:28:23 838  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.42
14:28:23 SQL> 
14:28:23 SQL> prompt Compiling body for procs_reports.sql
Compiling body for procs_reports.sql
14:28:23 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V23" AS
14:28:23   2  
14:28:23   3  FUNCTION GET_PRODUCT_NAMES(
14:28:23   4  	in_offer_id IN NUMBER
14:28:23   5  ) RETURN VARCHAR2 AS
14:28:23   6  var_result_names VARCHAR2(1024);
14:28:23   7  BEGIN
14:28:23   8  
14:28:23   9  	var_result_names := NULL;
14:28:23  10  
14:28:23  11  	FOR f_product IN (
14:28:23  12  	  SELECT
14:28:23  13  	    PRODUCT.NAME
14:28:23  14  	  FROM
14:28:23  15  	    PRODUCT
14:28:23  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:28:23  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
14:28:23  18  	  WHERE
14:28:23  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
14:28:23  20  	)
14:28:23  21  	LOOP
14:28:23  22  
14:28:23  23  	  IF var_result_names IS NULL THEN
14:28:23  24  	    var_result_names := f_product.NAME;
14:28:23  25  	  ELSE
14:28:23  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
14:28:23  27  	  END IF;
14:28:23  28  
14:28:23  29  	END LOOP;
14:28:23  30  
14:28:23  31  	RETURN var_result_names;
14:28:23  32  
14:28:23  33  END GET_PRODUCT_NAMES;
14:28:23  34  
14:28:23  35  /******************************************************************************/
14:28:23  36  
14:28:23  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
14:28:23  38  	in_start_date  IN DATE,
14:28:23  39  	in_end_date    IN DATE,
14:28:23  40  	out_result_set OUT SYS_REFCURSOR
14:28:23  41  ) AS
14:28:23  42  -- CONSTANTS
14:28:23  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:28:23  44  BEGIN
14:28:23  45  
14:28:23  46  	OPEN out_result_set FOR
14:28:23  47  	SELECT
14:28:23  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
14:28:23  49  	  "Offer_Id",
14:28:23  50  	  "New_Purchases_Num",
14:28:23  51  	  "Number_Of_renewals",
14:28:23  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
14:28:23  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
14:28:23  54  	FROM (
14:28:23  55  	  SELECT
14:28:23  56  	    "Offer_Id",
14:28:23  57  	    "Number_Of_renewals",
14:28:23  58  	    "New_Purchases_Num"
14:28:23  59  	  FROM (
14:28:23  60  	    SELECT
14:28:23  61  	      OFFER.ID as "Offer_Id",
14:28:23  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
14:28:23  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
14:28:23  64  	    FROM
14:28:23  65  	      OFFER
14:28:23  66  	  )
14:28:23  67  	  WHERE
14:28:23  68  	    "New_Purchases_Num" > 0
14:28:23  69  	    OR "Number_Of_renewals" > 0
14:28:23  70  	);
14:28:23  71  
14:28:23  72  	/*
14:28:23  73  	OPEN out_result_set FOR
14:28:23  74  	SELECT
14:28:23  75  	  "Product_Names",
14:28:23  76  	  "Offer_Id",
14:28:23  77  	  "New_Purchases_Num",
14:28:23  78  	  "Number_Of_renewals",
14:28:23  79  	  "Total_Dollar_Value",
14:28:23  80  	  "Unique_Purchasers_num"
14:28:23  81  	FROM (
14:28:23  82  	  SELECT
14:28:23  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
14:28:23  84  	    offer.id as "Offer_Id",
14:28:23  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
14:28:23  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
14:28:23  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
14:28:23  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
14:28:23  89  	  FROM
14:28:23  90  	    OFFER
14:28:23  91  	)
14:28:23  92  	WHERE
14:28:23  93  	  "New_Purchases_Num" > 0
14:28:23  94  	  OR "Number_Of_renewals" > 0
14:28:23  95  	  OR "Total_Dollar_Value" > 0
14:28:23  96  	  OR "Unique_Purchasers_num" > 0;
14:28:23  97  	*/
14:28:23  98  
14:28:23  99  END GET_FULL_FLASH_REPORT_PURCH;
14:28:23 100  
14:28:23 101  /******************************************************************************/
14:28:23 102  
14:28:23 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
14:28:23 104  	in_offer_id	       IN NUMBER,
14:28:23 105  	in_start_date	       IN DATE,
14:28:23 106  	in_end_date	       IN DATE,
14:28:23 107  	out_new_purchasers_num OUT NUMBER,
14:28:23 108  	out_renewals_num       OUT NUMBER,
14:28:23 109  	out_product_names      OUT VARCHAR2,
14:28:23 110  	out_total_dollar_value OUT NUMBER,
14:28:23 111  	out_unique_purchasers  OUT NUMBER
14:28:23 112  ) AS
14:28:23 113  -- CONSTANTS
14:28:23 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:28:23 115  BEGIN
14:28:23 116  
14:28:23 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
14:28:23 118  
14:28:23 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
14:28:23 120  	  in_offer_id,
14:28:23 121  	  in_start_date,
14:28:23 122  	  in_end_date
14:28:23 123  	);
14:28:23 124  
14:28:23 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
14:28:23 126  	  in_offer_id,
14:28:23 127  	  in_start_date,
14:28:23 128  	  in_end_date
14:28:23 129  	);
14:28:23 130  
14:28:23 131  	out_renewals_num := FLR_RENEWALS_NUM(
14:28:23 132  	  in_offer_id,
14:28:23 133  	  in_start_date,
14:28:23 134  	  in_end_date
14:28:23 135  	);
14:28:23 136  
14:28:23 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
14:28:23 138  	  in_offer_id,
14:28:23 139  	  in_start_date,
14:28:23 140  	  in_end_date
14:28:23 141  	);
14:28:23 142  
14:28:23 143  END GET_FLASH_REPORT_PURCHASES;
14:28:23 144  
14:28:23 145  /******************************************************************************/
14:28:23 146  
14:28:23 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
14:28:23 148  	in_offer_id	       IN NUMBER,
14:28:23 149  	in_start_date	       IN DATE,
14:28:23 150  	in_end_date	       IN DATE
14:28:23 151  ) RETURN NUMBER AS
14:28:23 152  -- CONSTANTS
14:28:23 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:28:23 154  -- VARIABLES
14:28:23 155  var_new_purchases_num NUMBER;
14:28:23 156  BEGIN
14:28:23 157  	SELECT
14:28:23 158  	  COUNT(LICENSE.ID)
14:28:23 159  	  into
14:28:23 160  	  var_new_purchases_num
14:28:23 161  	FROM
14:28:23 162  	  LICENSE
14:28:23 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
14:28:23 164  	WHERE
14:28:23 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
14:28:23 166  	  AND LICENSE.OFFER_ID = in_offer_id
14:28:23 167  	  AND CHARGE.CHARGE_AMOUNT > 0
14:28:23 168  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V23.TRUE
14:28:23 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
14:28:23 170  
14:28:23 171  	RETURN var_new_purchases_num;
14:28:23 172  END FLR_NEW_PURCHASERS_NUM;
14:28:23 173  
14:28:23 174  /******************************************************************************/
14:28:23 175  
14:28:23 176  FUNCTION FLR_RENEWALS_NUM (
14:28:23 177  	in_offer_id	       IN NUMBER,
14:28:23 178  	in_start_date	       IN DATE,
14:28:23 179  	in_end_date	       IN DATE
14:28:23 180  ) RETURN NUMBER AS
14:28:23 181  -- CONSTANTS
14:28:23 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:28:23 183  -- VARIABLES
14:28:23 184  var_renewals_num NUMBER;
14:28:23 185  BEGIN
14:28:23 186  	SELECT
14:28:23 187  	  COUNT(LICENSE.ID)
14:28:23 188  	  into
14:28:23 189  	  var_renewals_num
14:28:23 190  	FROM
14:28:23 191  	  LICENSE
14:28:23 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
14:28:23 193  	WHERE
14:28:23 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
14:28:23 195  	  AND LICENSE.OFFER_ID = in_offer_id
14:28:23 196  	  AND CHARGE.CHARGE_AMOUNT > 0
14:28:23 197  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V23.TRUE
14:28:23 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
14:28:23 199  
14:28:23 200  	RETURN var_renewals_num;
14:28:23 201  END FLR_RENEWALS_NUM;
14:28:23 202  
14:28:23 203  /******************************************************************************/
14:28:23 204  
14:28:23 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
14:28:23 206  	in_offer_id	       IN NUMBER,
14:28:23 207  	in_start_date	       IN DATE,
14:28:23 208  	in_end_date	       IN DATE
14:28:23 209  ) RETURN NUMBER AS
14:28:23 210  var_dollar_value NUMBER(10,2);
14:28:23 211  BEGIN
14:28:23 212  	SELECT
14:28:23 213  	  SUM(CHARGE.CHARGE_AMOUNT)
14:28:23 214  	  into
14:28:23 215  	  var_dollar_value
14:28:23 216  	FROM
14:28:23 217  	  LICENSE
14:28:23 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
14:28:23 219  	WHERE
14:28:23 220  	  LICENSE.OFFER_ID = in_offer_id
14:28:23 221  	  AND CHARGE.CHARGE_AMOUNT > 0
14:28:23 222  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V23.TRUE
14:28:23 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
14:28:23 224  
14:28:23 225  	RETURN var_dollar_value;
14:28:23 226  END FLR_TOTAL_DOLLAR_VALUE;
14:28:23 227  
14:28:23 228  /******************************************************************************/
14:28:23 229  
14:28:23 230  FUNCTION FLR_UNIQUE_PURCHASERS (
14:28:23 231  	in_offer_id	       IN NUMBER,
14:28:23 232  	in_start_date	       IN DATE,
14:28:23 233  	in_end_date	       IN DATE
14:28:23 234  ) RETURN NUMBER AS
14:28:23 235  -- CONSTANTS
14:28:23 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
14:28:23 237  -- VARIABLES
14:28:23 238  var_unique_purchasers NUMBER;
14:28:23 239  BEGIN
14:28:23 240  	SELECT
14:28:23 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
14:28:23 242  	FROM
14:28:23 243  	  LICENSE
14:28:23 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
14:28:23 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:23 246  	WHERE
14:28:23 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
14:28:23 248  	  AND LICENSE.OFFER_ID = in_offer_id
14:28:23 249  	  AND CHARGE.CHARGE_AMOUNT > 0
14:28:23 250  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V23.TRUE
14:28:23 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
14:28:23 252  
14:28:23 253  	RETURN var_unique_purchasers;
14:28:23 254  END;
14:28:23 255  
14:28:23 256  END PROCS_REPORTS_V23;
14:28:23 257  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.04
14:28:23 SQL> 
14:28:23 SQL> prompt Compiling body for procs_system.sql
Compiling body for procs_system.sql
14:28:23 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V23" AS
14:28:23   2  
14:28:23   3  PROCEDURE INCREMENT_VERSION
14:28:23   4  /*
14:28:23   5  Throws exceptions:
14:28:23   6  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23   7  */
14:28:23   8  AS
14:28:23   9  BEGIN
14:28:23  10  
14:28:23  11  	UPDATE SYS_VERSION SET version=version+1;
14:28:23  12  
14:28:23  13  END INCREMENT_VERSION;
14:28:23  14  
14:28:23  15  /*************************************************************/
14:28:23  16  
14:28:23  17  PROCEDURE CHECK_VERSION(
14:28:23  18  	  in_vers    IN NUMBER,
14:28:23  19  	  out_result OUT NUMBER
14:28:23  20  ) AS
14:28:23  21  	current_version NUMBER;
14:28:23  22  BEGIN
14:28:23  23  	SELECT version INTO current_version FROM SYS_VERSION;
14:28:23  24  	IF(current_version != in_vers) THEN
14:28:23  25  	  out_result := 1;
14:28:23  26  	ELSE
14:28:23  27  	  out_result := 0;
14:28:23  28  	END IF;
14:28:23  29  END CHECK_VERSION;
14:28:23  30  
14:28:23  31  END PROCS_SYSTEM_V23;
14:28:23  32  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.04
14:28:23 SQL> 
14:28:23 SQL> prompt Compiling body for procs_taxes.sql
Compiling body for procs_taxes.sql
14:28:23 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V23" AS
14:28:23   2  
14:28:23   3  PROCEDURE ADD_TAX (
14:28:23   4  	in_tax_type_id		 IN NUMBER,
14:28:23   5  	in_calculated_amount	 IN NUMBER,
14:28:23   6  	in_created_by		 IN VARCHAR2,
14:28:23   7  	in_line_item_id 	 IN NUMBER,
14:28:23   8  	in_effective_rate	 IN VARCHAR2,
14:28:23   9  	in_taxable_amount	 IN NUMBER,
14:28:23  10  	in_tax_rule_id		 IN NUMBER,
14:28:23  11  	in_jurisdiction_level_id IN NUMBER,
14:28:23  12  	in_jurisdiction_name	 IN VARCHAR2,
14:28:23  13  	in_jurisdiction_id	 IN VARCHAR2,
14:28:23  14  	in_ext_tax_type 	 IN VARCHAR2,
14:28:23  15  	in_ext_result		 IN VARCHAR2,
14:28:23  16  	in_imposition_type	 IN VARCHAR2,
14:28:23  17  	in_imposition		 IN VARCHAR2
14:28:23  18  ) AS
14:28:23  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
14:28:23  20  -- VARIABLES
14:28:23  21  var_new_tax_id	NUMBER;
14:28:23  22  temp_line_item_id NUMBER;
14:28:23  23  -- EXCEPTIONS
14:28:23  24  BAD_LINE_ITEM_ID EXCEPTION;
14:28:23  25  BEGIN
14:28:23  26  
14:28:23  27  	BEGIN
14:28:23  28  	  SELECT
14:28:23  29  	    LINE_ITEM.ID into temp_line_item_id
14:28:23  30  	  FROM
14:28:23  31  	    LINE_ITEM
14:28:23  32  	  WHERE
14:28:23  33  	    LINE_ITEM.ID = in_line_item_id;
14:28:23  34  	  EXCEPTION
14:28:23  35  	    WHEN NO_DATA_FOUND THEN
14:28:23  36  	      RAISE BAD_LINE_ITEM_ID;
14:28:23  37  	END;
14:28:23  38  
14:28:23  39  	var_new_tax_id := NULL;
14:28:23  40  
14:28:23  41  	PROCS_TAXES_CRU_V23.CREATE_TAX(
14:28:23  42  	  var_new_tax_id,
14:28:23  43  	  in_tax_type_id,
14:28:23  44  	  in_calculated_amount,
14:28:23  45  	  in_created_by,
14:28:23  46  	  in_line_item_id,
14:28:23  47  	  in_effective_rate,
14:28:23  48  	  in_taxable_amount,
14:28:23  49  	  in_tax_rule_id,
14:28:23  50  	  in_jurisdiction_level_id,
14:28:23  51  	  in_jurisdiction_name,
14:28:23  52  	  in_jurisdiction_id,
14:28:23  53  	  in_ext_tax_type,
14:28:23  54  	  in_ext_result,
14:28:23  55  	  in_imposition_type,
14:28:23  56  	  in_imposition
14:28:23  57  	);
14:28:23  58  
14:28:23  59  EXCEPTION
14:28:23  60  WHEN BAD_LINE_ITEM_ID THEN
14:28:23  61  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23  62  	  SPROC_NAME, 'No such line item');
14:28:23  63  WHEN OTHERS THEN
14:28:23  64  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23  66  END ADD_TAX;
14:28:23  67  
14:28:23  68  /******************************************************************************/
14:28:23  69  
14:28:23  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
14:28:23  71  	in_country_code IN CHAR,
14:28:23  72  	in_check_date IN DATE,
14:28:23  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V23.FALSE
14:28:23  74  ) AS
14:28:23  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
14:28:23  76  -- VARIABLES
14:28:23  77  var_countries_count NUMBER;
14:28:23  78  var_result	  NUMBER;
14:28:23  79  BEGIN
14:28:23  80  
14:28:23  81  	SELECT
14:28:23  82  	  COUNT(1) into var_countries_count
14:28:23  83  	FROM
14:28:23  84  	  TAX_COUNTRY_EXCLUSION_LIST
14:28:23  85  	WHERE
14:28:23  86  	  country_code = in_country_code
14:28:23  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
14:28:23  88  	  AND (
14:28:23  89  	    end_date is null
14:28:23  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
14:28:23  91  	  );
14:28:23  92  
14:28:23  93  	IF var_countries_count > 1 THEN
14:28:23  94  	  -- [REVU] Should not happen. DB structure error
14:28:23  95  	  var_result := GLOBAL_CONSTANTS_V23.TRUE;
14:28:23  96  	ELSIF var_countries_count = 1 THEN
14:28:23  97  	  var_result := GLOBAL_CONSTANTS_V23.TRUE;
14:28:23  98  	ELSE
14:28:23  99  	  var_result := GLOBAL_CONSTANTS_V23.FALSE;
14:28:23 100  	END IF;
14:28:23 101  
14:28:23 102  	out_is_founded := var_result;
14:28:23 103  
14:28:23 104  EXCEPTION
14:28:23 105  WHEN OTHERS THEN
14:28:23 106  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 108  END CHECK_COUNTRY_FOR_EXCLUSION;
14:28:23 109  
14:28:23 110  /******************************************************************************/
14:28:23 111  
14:28:23 112  PROCEDURE GET_TAX_CATEGORY (
14:28:23 113  	in_tax_category_id IN NUMBER,
14:28:23 114  	out_result_set	   OUT SYS_REFCURSOR
14:28:23 115  ) AS
14:28:23 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
14:28:23 117  BEGIN
14:28:23 118  
14:28:23 119  	OPEN out_result_set FOR
14:28:23 120  	SELECT
14:28:23 121  	  ID,
14:28:23 122  	  CODE,
14:28:23 123  	  DESCRIPTION
14:28:23 124  	FROM
14:28:23 125  	  TAX_CATEGORY
14:28:23 126  	WHERE
14:28:23 127  	  ID = in_tax_category_id;
14:28:23 128  
14:28:23 129  EXCEPTION
14:28:23 130  WHEN OTHERS THEN
14:28:23 131  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 133  END GET_TAX_CATEGORY;
14:28:23 134  
14:28:23 135  END PROCS_TAXES_V23;
14:28:23 136  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.06
14:28:23 SQL> 
14:28:23 SQL> prompt Compiling body for procs_transaction.sql
Compiling body for procs_transaction.sql
14:28:23 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V23" AS
14:28:23   2  
14:28:23   3  PROCEDURE CREATE_TRANSACTION (
14:28:23   4  /*
14:28:23   5  Throws exceptions:
14:28:23   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23   8  */
14:28:23   9  	in_transaction_id	  IN NUMBER,
14:28:23  10  	in_status_id		  IN NUMBER,
14:28:23  11  	in_amount		  IN NUMBER,
14:28:23  12  	in_created_by		  IN VARCHAR2,
14:28:23  13  	in_order_id		  IN VARCHAR2,
14:28:23  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE,
14:28:23  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
14:28:23  16  	out_transaction_id	  OUT NUMBER
14:28:23  17  ) AS
14:28:23  18  -- VARIABLES
14:28:23  19  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
14:28:23  20  var_transaction_count  NUMBER;
14:28:23  21  -- EXCEPTIONS
14:28:23  22  BAD_TRANSACTION_ID     EXCEPTION;
14:28:23  23  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:23  24  BEGIN
14:28:23  25  
14:28:23  26  	IF in_transaction_id IS NOT NULL THEN
14:28:23  27  	  SELECT
14:28:23  28  	    COUNT(*) into var_transaction_count
14:28:23  29  	  FROM
14:28:23  30  	    TRANSACTION
14:28:23  31  	  WHERE
14:28:23  32  	    TRANSACTION.ID = in_transaction_id;
14:28:23  33  	  IF var_transaction_count > 0 THEN
14:28:23  34  	    RAISE BAD_TRANSACTION_ID;
14:28:23  35  	  END IF;
14:28:23  36  	END IF;
14:28:23  37  
14:28:23  38  	PROCS_TRANSACTION_CRU_V23.CREATE_TRANSACTION(
14:28:23  39  	  out_transaction_id	   => out_transaction_id,
14:28:23  40  	  in_transaction_id	   => in_transaction_id,
14:28:23  41  	  in_transaction_status_id => in_status_id,
14:28:23  42  	  in_transaction_amount    => in_amount,
14:28:23  43  	  in_created_by 	   => in_created_by,
14:28:23  44  	  in_order_id		   => in_order_id,
14:28:23  45  	  in_is_refund		   => in_is_refund,
14:28:23  46  	  in_transaction_type_code => in_transaction_type_code
14:28:23  47  	);
14:28:23  48  
14:28:23  49  EXCEPTION
14:28:23  50  WHEN BAD_TRANSACTION_ID THEN
14:28:23  51  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:23  52  	  SPROC_NAME, 'Transaction with given id already exists');
14:28:23  53  WHEN OTHERS THEN
14:28:23  54  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23  55  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23  56  END CREATE_TRANSACTION;
14:28:23  57  
14:28:23  58  /******************************************************************************/
14:28:23  59  
14:28:23  60  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
14:28:23  61  /*
14:28:23  62  Throws exceptions:
14:28:23  63  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23  64  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23  65  */
14:28:23  66  	in_transaction_id	   IN NUMBER,
14:28:23  67  	in_trans_attempt_status    IN NUMBER,
14:28:23  68  	in_external_status_code    IN VARCHAR2,
14:28:23  69  	in_external_status_message IN VARCHAR2,
14:28:23  70  	in_created_by		   IN VARCHAR2,
14:28:23  71  	in_ext_transaction_id	   IN VARCHAR2,
14:28:23  72  	out_transaction_attempt_id OUT NUMBER
14:28:23  73  ) AS
14:28:23  74  -- VARIABLES
14:28:23  75  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
14:28:23  76  var_transaction_create_date DATE;
14:28:23  77  var_transaction_attempt_id  NUMBER;
14:28:23  78  
14:28:23  79  -- EXCEPTIONS
14:28:23  80  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
14:28:23  81  BAD_TRANSACTION_ID       EXCEPTION;
14:28:23  82  BEGIN
14:28:23  83  
14:28:23  84  	-- Check that transaction exists
14:28:23  85  	BEGIN
14:28:23  86  	  SELECT
14:28:23  87  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
14:28:23  88  	  FROM
14:28:23  89  	    TRANSACTION
14:28:23  90  	  WHERE
14:28:23  91  	    TRANSACTION.ID = in_transaction_id;
14:28:23  92  	  EXCEPTION
14:28:23  93  	    WHEN OTHERS THEN
14:28:23  94  	      RAISE BAD_TRANSACTION_ID;
14:28:23  95  	END;
14:28:23  96  
14:28:23  97  	-- Check that transaction status is correct
14:28:23  98  	IF in_trans_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_IN_PROGRESS
14:28:23  99  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
14:28:23 100  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_FAILED THEN
14:28:23 101  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
14:28:23 102  	END IF;
14:28:23 103  
14:28:23 104  	var_transaction_attempt_id := NULL;
14:28:23 105  	PROCS_TRANSACTION_CRU_V23.CREATE_TRANSACTION_ATTEMPT(
14:28:23 106  	  inout_transaction_attempt_id => var_transaction_attempt_id,
14:28:23 107  	  in_transaction_id	       => in_transaction_id,
14:28:23 108  	  in_external_status_code      => in_external_status_code,
14:28:23 109  	  in_external_status_message   => in_external_status_message,
14:28:23 110  	  in_created_by 	       => in_created_by,
14:28:23 111  	  in_external_transaction_id   => in_ext_transaction_id,
14:28:23 112  	  in_transaction_start_time    => var_transaction_create_date,
14:28:23 113  	  in_status_id		       => in_trans_attempt_status
14:28:23 114  	);
14:28:23 115  
14:28:23 116  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION(
14:28:23 117  	  in_transaction_id => in_transaction_id,
14:28:23 118  	  in_updated_by     => in_created_by
14:28:23 119  	);
14:28:23 120  
14:28:23 121  	out_transaction_attempt_id := var_transaction_attempt_id;
14:28:23 122  
14:28:23 123  EXCEPTION
14:28:23 124  WHEN BAD_TRANSACTION_ID THEN
14:28:23 125  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 126  	  SPROC_NAME, 'No such transaction');
14:28:23 127  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
14:28:23 128  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:23 129  	  SPROC_NAME, 'Bad transaction attempt status');
14:28:23 130  WHEN OTHERS THEN
14:28:23 131  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 133  END CREATE_TRANSACTION_ATTEMPT;
14:28:23 134  
14:28:23 135  /******************************************************************************/
14:28:23 136  
14:28:23 137  PROCEDURE UPDATE_TRANSACTION_STATUS (
14:28:23 138  /*
14:28:23 139  Throws exceptions:
14:28:23 140  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 141  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 142  */
14:28:23 143  	in_transaction_id	 IN NUMBER,
14:28:23 144  	in_updated_by		 IN VARCHAR2,
14:28:23 145  	in_transaction_status_id IN NUMBER
14:28:23 146  ) AS
14:28:23 147  -- VARIABLES
14:28:23 148  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
14:28:23 149  temp_transaction_id NUMBER;
14:28:23 150  
14:28:23 151  -- EXCEPTIONS
14:28:23 152  BAD_TRANSACTION_ID     EXCEPTION;
14:28:23 153  BAD_TRANSACTION_STATUS EXCEPTION;
14:28:23 154  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:23 155  BEGIN
14:28:23 156  
14:28:23 157  	-- Check that transaction exists
14:28:23 158  	BEGIN
14:28:23 159  	  SELECT
14:28:23 160  	    TRANSACTION.ID into temp_transaction_id
14:28:23 161  	  FROM
14:28:23 162  	    TRANSACTION
14:28:23 163  	  WHERE
14:28:23 164  	    TRANSACTION.ID = in_transaction_id;
14:28:23 165  	  EXCEPTION
14:28:23 166  	    WHEN OTHERS THEN
14:28:23 167  	      RAISE BAD_TRANSACTION_ID;
14:28:23 168  	END;
14:28:23 169  
14:28:23 170  	-- Check that transaction status is correct
14:28:23 171  	IF    in_transaction_status_id != GLOBAL_STATUSES_V23.TRANSACTION_PENDING
14:28:23 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V23.TRANSACTION_CLOSED
14:28:23 173  	  AND in_transaction_status_id != GLOBAL_STATUSES_V23.TRANSACTION_CHARGEBACK
14:28:23 174  	  AND in_transaction_status_id != GLOBAL_STATUSES_V23.TRANSACTION_DECLINED THEN
14:28:23 175  	  RAISE BAD_TRANSACTION_STATUS;
14:28:23 176  	END IF;
14:28:23 177  
14:28:23 178  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION(
14:28:23 179  	  in_transaction_id	   => in_transaction_id,
14:28:23 180  	  in_updated_by 	   => in_updated_by,
14:28:23 181  	  in_transaction_status_id => in_transaction_status_id
14:28:23 182  	);
14:28:23 183  
14:28:23 184  EXCEPTION
14:28:23 185  WHEN BAD_TRANSACTION_ID THEN
14:28:23 186  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 187  	  SPROC_NAME, 'No such transaction');
14:28:23 188  WHEN BAD_TRANSACTION_STATUS THEN
14:28:23 189  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:23 190  	  SPROC_NAME, 'Bad transaction status');
14:28:23 191  WHEN OTHERS THEN
14:28:23 192  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 193  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 194  END UPDATE_TRANSACTION_STATUS;
14:28:23 195  
14:28:23 196  /******************************************************************************/
14:28:23 197  
14:28:23 198  PROCEDURE UPDATE_TRANSACTION_SETTLED (
14:28:23 199  /*
14:28:23 200  Throws exceptions:
14:28:23 201  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 202  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 203  */
14:28:23 204  	in_transaction_id	 IN NUMBER,
14:28:23 205  	in_updated_by		 IN VARCHAR2,
14:28:23 206  	in_is_settled		 IN NUMBER
14:28:23 207  ) AS
14:28:23 208  -- VARIABLES
14:28:23 209  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
14:28:23 210  temp_transaction_id NUMBER;
14:28:23 211  
14:28:23 212  -- EXCEPTIONS
14:28:23 213  BAD_TRANSACTION_ID     EXCEPTION;
14:28:23 214  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:23 215  BEGIN
14:28:23 216  
14:28:23 217  	-- Check that transaction exists
14:28:23 218  	BEGIN
14:28:23 219  	  SELECT
14:28:23 220  	    TRANSACTION.ID into temp_transaction_id
14:28:23 221  	  FROM
14:28:23 222  	    TRANSACTION
14:28:23 223  	  WHERE
14:28:23 224  	    TRANSACTION.ID = in_transaction_id;
14:28:23 225  	  EXCEPTION
14:28:23 226  	    WHEN OTHERS THEN
14:28:23 227  	      RAISE BAD_TRANSACTION_ID;
14:28:23 228  	END;
14:28:23 229  
14:28:23 230  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION(
14:28:23 231  	  in_transaction_id	   => in_transaction_id,
14:28:23 232  	  in_updated_by 	   => in_updated_by,
14:28:23 233  	  in_is_settled 	   => in_is_settled
14:28:23 234  	);
14:28:23 235  
14:28:23 236  EXCEPTION
14:28:23 237  WHEN BAD_TRANSACTION_ID THEN
14:28:23 238  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 239  	  SPROC_NAME, 'No such transaction');
14:28:23 240  WHEN OTHERS THEN
14:28:23 241  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 242  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 243  END UPDATE_TRANSACTION_SETTLED;
14:28:23 244  
14:28:23 245  /******************************************************************************/
14:28:23 246  
14:28:23 247  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
14:28:23 248  /*
14:28:23 249  Throws exceptions:
14:28:23 250  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 251  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 252  */
14:28:23 253  	in_transaction_attempt_id IN NUMBER,
14:28:23 254  	in_updated_by		  IN VARCHAR2
14:28:23 255  ) AS
14:28:23 256  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
14:28:23 257  -- VARIABLES
14:28:23 258  var_transaction_id NUMBER;
14:28:23 259  -- EXCEPTION
14:28:23 260  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
14:28:23 261  BEGIN
14:28:23 262  
14:28:23 263  	BEGIN
14:28:23 264  	  SELECT
14:28:23 265  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
14:28:23 266  	  FROM
14:28:23 267  	    TRANSACTION_ATTEMPT
14:28:23 268  	  WHERE
14:28:23 269  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
14:28:23 270  	  EXCEPTION
14:28:23 271  	    WHEN NO_DATA_FOUND THEN
14:28:23 272  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
14:28:23 273  	END;
14:28:23 274  
14:28:23 275  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION(
14:28:23 276  	  in_transaction_id => var_transaction_id,
14:28:23 277  	  in_updated_by     => in_updated_by
14:28:23 278  	);
14:28:23 279  
14:28:23 280  EXCEPTION
14:28:23 281  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
14:28:23 282  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 283  	  SPROC_NAME, 'No such transaction attempt');
14:28:23 284  WHEN OTHERS THEN
14:28:23 285  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 286  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 287  END UPDATE_TRNSCTN_ATTEMPT_TIME;
14:28:23 288  
14:28:23 289  /******************************************************************************/
14:28:23 290  
14:28:23 291  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
14:28:23 292  /*
14:28:23 293  Throws exceptions:
14:28:23 294  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 295  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 296  */
14:28:23 297  	in_transaction_attempt_id     IN NUMBER,
14:28:23 298  	in_transaction_attempt_status IN NUMBER
14:28:23 299  ) AS
14:28:23 300  -- VARIABLES
14:28:23 301  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
14:28:23 302  temp_transaction_attempt_id NUMBER;
14:28:23 303  
14:28:23 304  -- EXCEPTION
14:28:23 305  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
14:28:23 306  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
14:28:23 307  BEGIN
14:28:23 308  
14:28:23 309  	-- Check that transaction attempt exists
14:28:23 310  	BEGIN
14:28:23 311  	  SELECT
14:28:23 312  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
14:28:23 313  	  FROM
14:28:23 314  	    TRANSACTION_ATTEMPT
14:28:23 315  	  WHERE
14:28:23 316  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
14:28:23 317  	  EXCEPTION
14:28:23 318  	    WHEN NO_DATA_FOUND THEN
14:28:23 319  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
14:28:23 320  	END;
14:28:23 321  
14:28:23 322  	-- Check that transaction attempt is correct
14:28:23 323  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_IN_PROGRESS
14:28:23 324  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
14:28:23 325  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_FAILED THEN
14:28:23 326  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
14:28:23 327  	END IF;
14:28:23 328  
14:28:23 329  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION_ATTEMPT(
14:28:23 330  	  in_transaction_attempt_id => in_transaction_attempt_id,
14:28:23 331  	  in_status_id		    => in_transaction_attempt_status
14:28:23 332  	);
14:28:23 333  
14:28:23 334  EXCEPTION
14:28:23 335  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
14:28:23 336  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 337  	  SPROC_NAME, 'No such transaction attempt');
14:28:23 338  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
14:28:23 339  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:23 340  	  SPROC_NAME, 'Bad transaction attempt status');
14:28:23 341  WHEN OTHERS THEN
14:28:23 342  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 343  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 344  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
14:28:23 345  
14:28:23 346  /******************************************************************************/
14:28:23 347  
14:28:23 348  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
14:28:23 349  /*
14:28:23 350  Throws exceptions:
14:28:23 351  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 352  */
14:28:23 353  	in_transaction_id	      IN NUMBER,
14:28:23 354  	in_transaction_attempt_status IN NUMBER,
14:28:23 355  	out_result_set		      OUT SYS_REFCURSOR
14:28:23 356  ) AS
14:28:23 357  -- VARIABLES
14:28:23 358  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
14:28:23 359  temp_transaction_id NUMBER;
14:28:23 360  -- EXCEPTIONS
14:28:23 361  BAD_TRANSACTION_ID       EXCEPTION;
14:28:23 362  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
14:28:23 363  BEGIN
14:28:23 364  
14:28:23 365  	-- Check that transaction exists
14:28:23 366  	BEGIN
14:28:23 367  	  SELECT
14:28:23 368  	    TRANSACTION.ID into temp_transaction_id
14:28:23 369  	  FROM
14:28:23 370  	    TRANSACTION
14:28:23 371  	  WHERE
14:28:23 372  	    TRANSACTION.ID = in_transaction_id;
14:28:23 373  	  EXCEPTION
14:28:23 374  	    WHEN OTHERS THEN
14:28:23 375  	      RAISE BAD_TRANSACTION_ID;
14:28:23 376  	END;
14:28:23 377  
14:28:23 378  	-- Check that transaction attempt status is correct
14:28:23 379  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_IN_PROGRESS
14:28:23 380  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
14:28:23 381  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V23.TRANS_ATTEMPT_FAILED THEN
14:28:23 382  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
14:28:23 383  	END IF;
14:28:23 384  
14:28:23 385  	OPEN out_result_set FOR
14:28:23 386  	SELECT
14:28:23 387  	  TRANSACTION_ATTEMPT.ID,
14:28:23 388  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
14:28:23 389  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
14:28:23 390  	  TRANSACTION_ATTEMPT.CREATE_DATE,
14:28:23 391  	  TRANSACTION_ATTEMPT.CREATED_BY,
14:28:23 392  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
14:28:23 393  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
14:28:23 394  	  TRANSACTION.TRANSACTION_AMOUNT,
14:28:23 395  	  TRANSACTION.ID as "TRANSACTION_ID",
14:28:23 396  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
14:28:23 397  	FROM
14:28:23 398  	  TRANSACTION_ATTEMPT
14:28:23 399  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
14:28:23 400  	WHERE
14:28:23 401  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
14:28:23 402  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
14:28:23 403  
14:28:23 404  EXCEPTION
14:28:23 405  WHEN BAD_TRANSACTION_ID THEN
14:28:23 406  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 407  	  SPROC_NAME, 'No such transaction');
14:28:23 408  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
14:28:23 409  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:23 410  	  SPROC_NAME, 'Bad transaction attempt status');
14:28:23 411  WHEN OTHERS THEN
14:28:23 412  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 413  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 414  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
14:28:23 415  
14:28:23 416  /******************************************************************************/
14:28:23 417  
14:28:23 418  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
14:28:23 419  /*
14:28:23 420  Throws exceptions:
14:28:23 421  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 422  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 423  */
14:28:23 424  	in_transaction_attempt_id IN NUMBER,
14:28:23 425  	in_ext_status_code	  IN VARCHAR2,
14:28:23 426  	in_ext_status_message	  IN VARCHAR2,
14:28:23 427  	in_ext_transaction_id	  IN VARCHAR2
14:28:23 428  ) AS
14:28:23 429  -- VARIABLES
14:28:23 430  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
14:28:23 431  temp_trans_attempt_count NUMBER;
14:28:23 432  -- EXCEPTIONS
14:28:23 433  BAD_ATTEMPT_ID EXCEPTION;
14:28:23 434  BEGIN
14:28:23 435  
14:28:23 436  	SELECT
14:28:23 437  	  COUNT(*) into temp_trans_attempt_count
14:28:23 438  	FROM
14:28:23 439  	  TRANSACTION_ATTEMPT
14:28:23 440  	WHERE
14:28:23 441  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
14:28:23 442  
14:28:23 443  	IF temp_trans_attempt_count = 0 THEN
14:28:23 444  	  RAISE BAD_ATTEMPT_ID;
14:28:23 445  	END IF;
14:28:23 446  
14:28:23 447  	PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION_ATTEMPT(
14:28:23 448  	  in_transaction_attempt_id  => in_transaction_attempt_id,
14:28:23 449  	  in_external_status_code    => in_ext_status_code,
14:28:23 450  	  in_external_status_message => in_ext_status_message,
14:28:23 451  	  in_external_transaction_id => in_ext_transaction_id
14:28:23 452  	);
14:28:23 453  
14:28:23 454  EXCEPTION
14:28:23 455  WHEN BAD_ATTEMPT_ID THEN
14:28:23 456  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 457  	  SPROC_NAME, 'No such attempt');
14:28:23 458  WHEN OTHERS THEN
14:28:23 459  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 460  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 461  END UPDATE_TRANSACTION_ATTEMPT_INF;
14:28:23 462  
14:28:23 463  /******************************************************************************/
14:28:23 464  
14:28:23 465  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
14:28:23 466  /*
14:28:23 467  Throws exceptions:
14:28:23 468  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 469  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 470  */
14:28:23 471  	in_transaction_id IN  NUMBER,
14:28:23 472  	out_attempts_num  OUT NUMBER
14:28:23 473  ) AS
14:28:23 474  -- VARIABLES
14:28:23 475  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
14:28:23 476  temp_transaction_count NUMBER;
14:28:23 477  
14:28:23 478  -- EXCEPTIONS
14:28:23 479  BAD_TRANSACTION_ID EXCEPTION;
14:28:23 480  BEGIN
14:28:23 481  
14:28:23 482  	SELECT
14:28:23 483  	  COUNT(*) into temp_transaction_count
14:28:23 484  	FROM
14:28:23 485  	  TRANSACTION
14:28:23 486  	WHERE
14:28:23 487  	  TRANSACTION.ID = in_transaction_id;
14:28:23 488  
14:28:23 489  	IF temp_transaction_count = 0 THEN
14:28:23 490  	  RAISE BAD_TRANSACTION_ID;
14:28:23 491  	END IF;
14:28:23 492  
14:28:23 493  	SELECT
14:28:23 494  	  COUNT(*) into out_attempts_num
14:28:23 495  	FROM
14:28:23 496  	  TRANSACTION_ATTEMPT
14:28:23 497  	WHERE
14:28:23 498  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
14:28:23 499  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_FAILED;
14:28:23 500  
14:28:23 501  EXCEPTION
14:28:23 502  WHEN BAD_TRANSACTION_ID THEN
14:28:23 503  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 504  	  SPROC_NAME, 'No such transaction');
14:28:23 505  WHEN OTHERS THEN
14:28:23 506  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 507  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 508  END GET_FAILED_ATTEMPTS_NUMBER;
14:28:23 509  /******************************************************************************/
14:28:23 510  
14:28:23 511  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
14:28:23 512  /*
14:28:23 513  Throws exceptions:
14:28:23 514  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 515  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 516  */
14:28:23 517  	in_transaction_id IN  NUMBER,
14:28:23 518  	out_is_successfull  OUT NUMBER
14:28:23 519  ) AS
14:28:23 520  -- VARIABLES
14:28:23 521  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
14:28:23 522  temp_transaction_count NUMBER;
14:28:23 523  
14:28:23 524  -- EXCEPTIONS
14:28:23 525  BAD_TRANSACTION_ID EXCEPTION;
14:28:23 526  BEGIN
14:28:23 527  
14:28:23 528  	SELECT
14:28:23 529  	  COUNT(*) into temp_transaction_count
14:28:23 530  	FROM
14:28:23 531  	  TRANSACTION
14:28:23 532  	WHERE
14:28:23 533  	  TRANSACTION.ID = in_transaction_id;
14:28:23 534  
14:28:23 535  	IF temp_transaction_count = 0 THEN
14:28:23 536  	  RAISE BAD_TRANSACTION_ID;
14:28:23 537  	END IF;
14:28:23 538  
14:28:23 539  	SELECT
14:28:23 540  	  COUNT(*) into out_is_successfull
14:28:23 541  	FROM
14:28:23 542  	  TRANSACTION_ATTEMPT
14:28:23 543  	WHERE
14:28:23 544  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
14:28:23 545  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS;
14:28:23 546  
14:28:23 547  EXCEPTION
14:28:23 548  WHEN BAD_TRANSACTION_ID THEN
14:28:23 549  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 550  	  SPROC_NAME, 'No such transaction');
14:28:23 551  WHEN OTHERS THEN
14:28:23 552  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 553  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 554  END IS_TRANSACTION_SUCCESSFULL;
14:28:23 555  /******************************************************************************/
14:28:23 556  
14:28:23 557  PROCEDURE GET_TRANSACTION_AMOUNT (
14:28:23 558  /*
14:28:23 559  Throws exceptions:
14:28:23 560  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 561  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 562  */
14:28:23 563  	in_transaction_id      IN  NUMBER,
14:28:23 564  	out_transaction_amount OUT NUMBER
14:28:23 565  ) AS
14:28:23 566  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
14:28:23 567  BEGIN
14:28:23 568  
14:28:23 569  	SELECT
14:28:23 570  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
14:28:23 571  	FROM
14:28:23 572  	  TRANSACTION
14:28:23 573  	WHERE
14:28:23 574  	  TRANSACTION.ID = in_transaction_id;
14:28:23 575  
14:28:23 576  EXCEPTION
14:28:23 577  WHEN NO_DATA_FOUND THEN
14:28:23 578  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 579  	  SPROC_NAME, 'No such transaction');
14:28:23 580  WHEN OTHERS THEN
14:28:23 581  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 582  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 583  END GET_TRANSACTION_AMOUNT;
14:28:23 584  
14:28:23 585  /******************************************************************************/
14:28:23 586  
14:28:23 587  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
14:28:23 588  /*
14:28:23 589  Throws exceptions:
14:28:23 590  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 591  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 592  */
14:28:23 593  	in_charge_id   IN  NUMBER,
14:28:23 594  	out_result_set OUT SYS_REFCURSOR
14:28:23 595  ) AS
14:28:23 596  -- VARIABLES
14:28:23 597  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
14:28:23 598  temp_charge_id NUMBER;
14:28:23 599  -- EXCEPTIONS
14:28:23 600  BAD_CHARGE_ID EXCEPTION;
14:28:23 601  BEGIN
14:28:23 602  
14:28:23 603  	BEGIN
14:28:23 604  	  SELECT
14:28:23 605  	    CHARGE.ID into temp_charge_id
14:28:23 606  	  FROM
14:28:23 607  	    CHARGE
14:28:23 608  	  WHERE
14:28:23 609  	    CHARGE.ID = in_charge_id;
14:28:23 610  	  EXCEPTION
14:28:23 611  	    WHEN NO_DATA_FOUND THEN
14:28:23 612  	      RAISE BAD_CHARGE_ID;
14:28:23 613  	END;
14:28:23 614  
14:28:23 615  	OPEN out_result_set FOR
14:28:23 616  	SELECT DISTINCT
14:28:23 617  	  TRANSACTION.ID,
14:28:23 618  	  TRANSACTION.TRANSACTION_STATUS_ID,
14:28:23 619  	  TRANSACTION.CREATE_DATE,
14:28:23 620  	  TRANSACTION.TRANSACTION_AMOUNT,
14:28:23 621  	  TRANSACTION.IS_REFUND,
14:28:23 622  	  TRANSACTION.ORDER_ID
14:28:23 623  	FROM
14:28:23 624  	  CHARGE INNER JOIN TRANSACTION ON
14:28:23 625  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:28:23 626  	WHERE
14:28:23 627  	  CHARGE.ID = in_charge_id;
14:28:23 628  
14:28:23 629  EXCEPTION
14:28:23 630  WHEN BAD_CHARGE_ID THEN
14:28:23 631  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 632  	  SPROC_NAME, 'No such charge');
14:28:23 633  WHEN OTHERS THEN
14:28:23 634  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 635  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 636  END GET_TRANSACTIONS_BY_CHARGE_ID;
14:28:23 637  /******************************************************************************/
14:28:23 638  
14:28:23 639  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
14:28:23 640  /*
14:28:23 641  Throws exceptions:
14:28:23 642  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 643  */
14:28:23 644  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
14:28:23 645  	out_result_set OUT SYS_REFCURSOR
14:28:23 646  ) AS
14:28:23 647  -- VARIABLES
14:28:23 648  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
14:28:23 649  BEGIN
14:28:23 650  	OPEN out_result_set FOR
14:28:23 651  	SELECT DISTINCT
14:28:23 652  	  TRANSACTION.ID
14:28:23 653  	FROM
14:28:23 654  	  TRANSACTION
14:28:23 655  	WHERE
14:28:23 656  	  TRANSACTION.ORDER_ID = in_order_id;
14:28:23 657  
14:28:23 658  EXCEPTION
14:28:23 659  WHEN OTHERS THEN
14:28:23 660  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 661  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 662  END GET_TRANSACTION_BY_ORDER_ID;
14:28:23 663  /******************************************************************************/
14:28:23 664  
14:28:23 665  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
14:28:23 666  /*
14:28:23 667  Throws exceptions:
14:28:23 668  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 669  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 670  */
14:28:23 671  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
14:28:23 672  	out_result_set OUT SYS_REFCURSOR
14:28:23 673  ) AS
14:28:23 674  -- VARIABLES
14:28:23 675  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
14:28:23 676  temp_order_id TRANSACTION.ORDER_ID%TYPE;
14:28:23 677  -- EXCEPTIONS
14:28:23 678  BAD_ORDER_ID EXCEPTION;
14:28:23 679  BEGIN
14:28:23 680  
14:28:23 681  	--TODO BOO, REMOVE ME
14:28:23 682  	BEGIN
14:28:23 683  	  SELECT
14:28:23 684  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
14:28:23 685  	  FROM
14:28:23 686  	    TRANSACTION
14:28:23 687  	  WHERE
14:28:23 688  	    TRANSACTION.ORDER_ID = in_order_id;
14:28:23 689  	  EXCEPTION
14:28:23 690  	    WHEN NO_DATA_FOUND THEN
14:28:23 691  	      RAISE BAD_ORDER_ID;
14:28:23 692  	END;
14:28:23 693  
14:28:23 694  	OPEN out_result_set FOR
14:28:23 695  	SELECT c.ID CHARGE_ID,
14:28:23 696  	  c.CHARGE_AMOUNT,
14:28:23 697  	  c.CHARGE_STATUS_ID,
14:28:23 698  	  c.INSTRUMENT_ID,
14:28:23 699  	  c.INSTRUMENT_TYPE_ID,
14:28:23 700  	  c.INVOICE_ID,
14:28:23 701  	  t.ID TRANSACTION_ID,
14:28:23 702  	  t.IS_REFUND,
14:28:23 703  	  t.IS_SETTLED,
14:28:23 704  	  t.ORDER_ID,
14:28:23 705  	  t.TRANSACTION_AMOUNT,
14:28:23 706  	  t.TRANSACTION_STATUS_ID,
14:28:23 707  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
14:28:23 708  	  t.CREATED_BY TRANSACTION_CREATED_BY,
14:28:23 709  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
14:28:23 710  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
14:28:23 711  	FROM CHARGE c
14:28:23 712  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
14:28:23 713  	WHERE TRANSACTION_ID IN (
14:28:23 714  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
14:28:23 715  	);
14:28:23 716  
14:28:23 717  EXCEPTION
14:28:23 718  WHEN BAD_ORDER_ID THEN
14:28:23 719  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 720  	  SPROC_NAME, 'No such order');
14:28:23 721  WHEN OTHERS THEN
14:28:23 722  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 723  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 724  END GET_TRANSACTIONS_BY_ORDER_ID;
14:28:23 725  /******************************************************************************/
14:28:23 726  
14:28:23 727  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
14:28:23 728  /*
14:28:23 729  Throws exceptions:
14:28:23 730  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 731  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 732  */
14:28:23 733  	in_invoice_id	IN  NUMBER,
14:28:23 734  	out_result_set OUT SYS_REFCURSOR
14:28:23 735  ) AS
14:28:23 736  -- VARIABLES
14:28:23 737  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
14:28:23 738  temp_invoice_id NUMBER;
14:28:23 739  -- EXCEPTIONS
14:28:23 740  BAD_INVOICE_ID EXCEPTION;
14:28:23 741  BEGIN
14:28:23 742  
14:28:23 743  	BEGIN
14:28:23 744  	  SELECT
14:28:23 745  	    INVOICE.ID into temp_invoice_id
14:28:23 746  	  FROM
14:28:23 747  	    INVOICE
14:28:23 748  	  WHERE
14:28:23 749  	    INVOICE.ID = in_invoice_id;
14:28:23 750  	  EXCEPTION
14:28:23 751  	    WHEN NO_DATA_FOUND THEN
14:28:23 752  	      RAISE BAD_INVOICE_ID;
14:28:23 753  	END;
14:28:23 754  
14:28:23 755  	OPEN out_result_set FOR
14:28:23 756  	SELECT DISTINCT
14:28:23 757  	  TRANSACTION.ID,
14:28:23 758  	  TRANSACTION.TRANSACTION_STATUS_ID,
14:28:23 759  	  TRANSACTION.CREATE_DATE,
14:28:23 760  	  TRANSACTION.UPDATE_DATE,
14:28:23 761  	  TRANSACTION.ORDER_ID,
14:28:23 762  	  TRANSACTION.TRANSACTION_AMOUNT
14:28:23 763  	FROM
14:28:23 764  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
14:28:23 765  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
14:28:23 766  	WHERE
14:28:23 767  	  INVOICE.ID = in_invoice_id
14:28:23 768  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V23.TRUE
14:28:23 769  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
14:28:23 770  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_CLOSED;
14:28:23 771  
14:28:23 772  EXCEPTION
14:28:23 773  WHEN BAD_INVOICE_ID THEN
14:28:23 774  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 775  	  SPROC_NAME, 'No such invoice');
14:28:23 776  WHEN OTHERS THEN
14:28:23 777  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 778  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 779  END GET_CLOSED_REFUNDS_BY_INVOICE;
14:28:23 780  
14:28:23 781  /******************************************************************************/
14:28:23 782  
14:28:23 783  PROCEDURE GET_TRANSACTION_ATTEMPTS (
14:28:23 784  /*
14:28:23 785  Throws exceptions:
14:28:23 786  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 787  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 788  */
14:28:23 789  	in_transaction_id IN  NUMBER,
14:28:23 790  	out_result_set	  OUT SYS_REFCURSOR
14:28:23 791  ) AS
14:28:23 792  -- VARIABLES
14:28:23 793  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
14:28:23 794  temp_transaction_id NUMBER;
14:28:23 795  -- EXCEPTIONS
14:28:23 796  BAD_TRANSACTION_ID EXCEPTION;
14:28:23 797  BEGIN
14:28:23 798  
14:28:23 799  	BEGIN
14:28:23 800  	  SELECT
14:28:23 801  	    TRANSACTION.ID into temp_transaction_id
14:28:23 802  	  FROM
14:28:23 803  	    TRANSACTION
14:28:23 804  	  WHERE
14:28:23 805  	    TRANSACTION.ID = in_transaction_id;
14:28:23 806  	  EXCEPTION
14:28:23 807  	    WHEN NO_DATA_FOUND THEN
14:28:23 808  	      RAISE BAD_TRANSACTION_ID;
14:28:23 809  	END;
14:28:23 810  
14:28:23 811  	OPEN out_result_set FOR
14:28:23 812  	SELECT
14:28:23 813  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
14:28:23 814  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
14:28:23 815  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
14:28:23 816  	  TRANSACTION_ATTEMPT.CREATE_DATE,
14:28:23 817  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
14:28:23 818  	FROM
14:28:23 819  	  TRANSACTION_ATTEMPT
14:28:23 820  	WHERE
14:28:23 821  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
14:28:23 822  
14:28:23 823  EXCEPTION
14:28:23 824  WHEN BAD_TRANSACTION_ID THEN
14:28:23 825  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 826  	  SPROC_NAME, 'No such transaction');
14:28:23 827  WHEN OTHERS THEN
14:28:23 828  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 829  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 830  END GET_TRANSACTION_ATTEMPTS;
14:28:23 831  
14:28:23 832  /******************************************************************************/
14:28:23 833  
14:28:23 834  PROCEDURE RESERVE_TRANSACTION_ID (
14:28:23 835  /*
14:28:23 836  Throws exceptions:
14:28:23 837  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 838  */
14:28:23 839  	out_transaction_id OUT NUMBER
14:28:23 840  ) AS
14:28:23 841  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
14:28:23 842  BEGIN
14:28:23 843  	SELECT
14:28:23 844  	  TRN_ID_SEQ.nextVal into out_transaction_id
14:28:23 845  	FROM DUAL;
14:28:23 846  EXCEPTION
14:28:23 847  WHEN OTHERS THEN
14:28:23 848  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 849  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 850  END RESERVE_TRANSACTION_ID;
14:28:23 851  
14:28:23 852  /******************************************************************************/
14:28:23 853  
14:28:23 854  PROCEDURE GET_TRANSACTION_BY_ID (
14:28:23 855  /*
14:28:23 856  Throws exceptions:
14:28:23 857  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 858  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 859  */
14:28:23 860  	in_transaction_id IN NUMBER,
14:28:23 861  	out_result_set	  OUT SYS_REFCURSOR
14:28:23 862  ) AS
14:28:23 863  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
14:28:23 864  -- VARIABLES
14:28:23 865  temp_transaction_id NUMBER;
14:28:23 866  -- EXCPTIONS
14:28:23 867  BAD_TRANSACTION_ID EXCEPTION;
14:28:23 868  BEGIN
14:28:23 869  	BEGIN
14:28:23 870  	  SELECT
14:28:23 871  	    TRANSACTION.ID into temp_transaction_id
14:28:23 872  	  FROM
14:28:23 873  	    TRANSACTION
14:28:23 874  	  WHERE
14:28:23 875  	    TRANSACTION.ID = in_transaction_id;
14:28:23 876  	  EXCEPTION
14:28:23 877  	    WHEN NO_DATA_FOUND THEN
14:28:23 878  	      RAISE BAD_TRANSACTION_ID;
14:28:23 879  	END;
14:28:23 880  
14:28:23 881  	PROCS_TRANSACTION_CRU_V23.READ_TRANSACTION(
14:28:23 882  	  in_transaction_id => in_transaction_id,
14:28:23 883  	  out_result_set    => out_result_set
14:28:23 884  	);
14:28:23 885  
14:28:23 886  EXCEPTION
14:28:23 887  WHEN NO_DATA_FOUND THEN
14:28:23 888  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 889  	  SPROC_NAME, 'No such transaction');
14:28:23 890  WHEN OTHERS THEN
14:28:23 891  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 892  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 893  END GET_TRANSACTION_BY_ID;
14:28:23 894  
14:28:23 895  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:28:23 896  /*
14:28:23 897  Throws exceptions:
14:28:23 898  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 899  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
14:28:23 900  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 901  */
14:28:23 902  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:28:23 903  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:28:23 904  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:28:23 905  ) AS
14:28:23 906  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
14:28:23 907  -- VARIABLES
14:28:23 908  temp_transaction_id TRANSACTION.ID%TYPE;
14:28:23 909  -- EXCEPTIONS
14:28:23 910  BAD_TRANSACTION_ID   EXCEPTION;
14:28:23 911  ORDER_ID_IS_NOT_NULL EXCEPTION;
14:28:23 912  CRU_UNKNOWN_ERROR    EXCEPTION;
14:28:23 913  EXCEPTION_MESSAGE VARCHAR2(1024);
14:28:23 914  BEGIN
14:28:23 915  	BEGIN
14:28:23 916  	  SELECT
14:28:23 917  	    TRANSACTION.ID into temp_transaction_id
14:28:23 918  	  FROM
14:28:23 919  	    TRANSACTION
14:28:23 920  	  WHERE
14:28:23 921  	    TRANSACTION.ID = in_transaction_id;
14:28:23 922  	  EXCEPTION
14:28:23 923  	    WHEN NO_DATA_FOUND THEN
14:28:23 924  	      RAISE BAD_TRANSACTION_ID;
14:28:23 925  	END;
14:28:23 926  
14:28:23 927  	BEGIN
14:28:23 928  	  PROCS_TRANSACTION_CRU_V23.UPDATE_TRANSACTION_ORDER_ID(
14:28:23 929  	    in_transaction_id => in_transaction_id,
14:28:23 930  	    in_order_id       => in_order_id,
14:28:23 931  	    in_updated_by     => in_updated_by
14:28:23 932  	  );
14:28:23 933  	  EXCEPTION
14:28:23 934  	    WHEN OTHERS THEN
14:28:23 935  	      IF SQLCODE = APP_EXCEPTION_CODES_V23.NOT_FOUND THEN
14:28:23 936  		RAISE ORDER_ID_IS_NOT_NULL;
14:28:23 937  	      ELSE
14:28:23 938  		EXCEPTION_MESSAGE := SQLERRM;
14:28:23 939  		RAISE CRU_UNKNOWN_ERROR;
14:28:23 940  	      END IF;
14:28:23 941  	END;
14:28:23 942  
14:28:23 943  EXCEPTION
14:28:23 944  WHEN BAD_TRANSACTION_ID THEN
14:28:23 945  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 946  	  SPROC_NAME, 'No such transaction');
14:28:23 947  WHEN ORDER_ID_IS_NOT_NULL THEN
14:28:23 948  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:23 949  	  SPROC_NAME, 'Order id is not null');
14:28:23 950  WHEN CRU_UNKNOWN_ERROR THEN
14:28:23 951  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:23 952  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
14:28:23 953  WHEN OTHERS THEN
14:28:23 954  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 955  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 956  END UPDATE_TRANSACTION_ORDER_ID;
14:28:23 957  
14:28:23 958  /******************************************************************************/
14:28:23 959  
14:28:23 960  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
14:28:23 961  	in_transaction_id IN NUMBER
14:28:23 962  ) RETURN NUMBER AS
14:28:23 963  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
14:28:23 964  -- Variables
14:28:23 965  var_tax_amount NUMBER(10,2);
14:28:23 966  BEGIN
14:28:23 967  
14:28:23 968  	SELECT
14:28:23 969  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
14:28:23 970  	FROM
14:28:23 971  	  LINE_ITEM LI
14:28:23 972  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
14:28:23 973  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
14:28:23 974  	WHERE
14:28:23 975  	  CH.TRANSACTION_ID = in_transaction_id;
14:28:23 976  
14:28:23 977  	IF var_tax_amount IS NULL THEN
14:28:23 978  	  var_tax_amount := 0;
14:28:23 979  	END IF;
14:28:23 980  
14:28:23 981  	RETURN var_tax_amount;
14:28:23 982  
14:28:23 983  END GET_TRANSACTION_TAX_AMOUNT;
14:28:23 984  
14:28:23 985  /******************************************************************************/
14:28:23 986  
14:28:23 987  FUNCTION GET_TRANSACTION_INTRL_TAXES (
14:28:23 988  	in_transaction_id IN NUMBER
14:28:23 989  ) RETURN NUMBER AS
14:28:23 990  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
14:28:23 991  -- Variables
14:28:23 992  var_intrl_tax_amount NUMBER(10, 2);
14:28:23 993  BEGIN
14:28:23 994  
14:28:23 995  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
14:28:23 996  	FROM
14:28:23 997  	  LINE_ITEM LI
14:28:23 998  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
14:28:23 999  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
14:28:23 1000  	   INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
14:28:23 1001  	 WHERE
14:28:23 1002  	   CH.TRANSACTION_ID = in_transaction_id
14:28:23 1003  	   AND T.TAX_TYPE_ID IN (
14:28:23 1004  	     SELECT GLOBAL_ENUMS_V23.TAX_TYPE_VAT FROM DUAL
14:28:23 1005  	   );
14:28:23 1006  
14:28:23 1007  	 IF var_intrl_tax_amount IS NULL THEN
14:28:23 1008  	   var_intrl_tax_amount := 0;
14:28:23 1009  	 END IF;
14:28:23 1010  
14:28:23 1011  	 RETURN var_intrl_tax_amount;
14:28:23 1012  
14:28:23 1013  END GET_TRANSACTION_INTRL_TAXES;
14:28:23 1014  
14:28:23 1015  /******************************************************************************/
14:28:23 1016  -- norlov: #38796
14:28:23 1017  PROCEDURE GET_TRANSACTIONS (
14:28:23 1018  /*
14:28:23 1019  Throws exceptions:
14:28:23 1020  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 1021  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 1022  */
14:28:23 1023  	 in_group_id	       IN  NUMBER,
14:28:23 1024  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
14:28:23 1025  	 in_subscription_id    IN NUMBER DEFAULT NULL,
14:28:23 1026  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
14:28:23 1027  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
14:28:23 1028  	 in_transaction_status IN NUMBER DEFAULT NULL,
14:28:23 1029  	 out_result_set        OUT SYS_REFCURSOR
14:28:23 1030  ) AS
14:28:23 1031  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
14:28:23 1032  -- VARIABLES
14:28:23 1033  var_account_id ACCOUNT.ID%TYPE;
14:28:23 1034  statement VARCHAR2(2000);
14:28:23 1035  -- EXCEPTIONS
14:28:23 1036  BAD_GROUP_ID   EXCEPTION;
14:28:23 1037  BEGIN
14:28:23 1038  	-- check group id
14:28:23 1039  	BEGIN
14:28:23 1040  	   SELECT
14:28:23 1041  	     ACCOUNT.ID into var_account_id
14:28:23 1042  	   FROM
14:28:23 1043  	     ACCOUNT
14:28:23 1044  	   WHERE
14:28:23 1045  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:23 1046  	   EXCEPTION
14:28:23 1047  	     WHEN NO_DATA_FOUND THEN
14:28:23 1048  	       RAISE BAD_GROUP_ID;
14:28:23 1049  	 END;
14:28:23 1050  
14:28:23 1051  	 OPEN out_result_set FOR
14:28:23 1052  	 SELECT
14:28:23 1053  	   TRANSACTION.ID,
14:28:23 1054  	   TRANSACTION.TRANSACTION_STATUS_ID,
14:28:23 1055  	   TRANSACTION.TRANSACTION_AMOUNT,
14:28:23 1056  	   TRANSACTION.CREATE_DATE,
14:28:23 1057  	   TRANSACTION.CREATED_BY,
14:28:23 1058  	   TRANSACTION.IS_REFUND,
14:28:23 1059  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
14:28:23 1060  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
14:28:23 1061  	 FROM
14:28:23 1062  	   TRANSACTION
14:28:23 1063  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
14:28:23 1064  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
14:28:23 1065  	 WHERE
14:28:23 1066  	   -- Filter by invoice ID
14:28:23 1067  	   (
14:28:23 1068  	     INVOICE.ID IN (
14:28:23 1069  	       -- Gift certificate invoices
14:28:23 1070  	       SELECT
14:28:23 1071  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
14:28:23 1072  	       FROM
14:28:23 1073  		 GIFT_CERTIFICATE
14:28:23 1074  	       WHERE
14:28:23 1075  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
14:28:23 1076  		 -- If subscription_id is set then return nothing
14:28:23 1077  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
14:28:23 1078  	     )
14:28:23 1079  	     OR
14:28:23 1080  	     INVOICE.ID IN (
14:28:23 1081  	       SELECT
14:28:23 1082  		 LICENSE.INVOICE_ID
14:28:23 1083  	       FROM
14:28:23 1084  		 LICENSE
14:28:23 1085  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:23 1086  	       WHERE
14:28:23 1087  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:23 1088  		 -- Filter by subscription id
14:28:23 1089  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
14:28:23 1090  	     )
14:28:23 1091  	   )
14:28:23 1092  	   -- Filter by invoice id
14:28:23 1093  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
14:28:23 1094  	   -- Filter by start date
14:28:23 1095  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
14:28:23 1096  	   -- Filter by end date
14:28:23 1097  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
14:28:23 1098  	   -- Filter by transaction status
14:28:23 1099  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
14:28:23 1100  
14:28:23 1101  /*
14:28:23 1102  
14:28:23 1103  statement :=  'select distinct '||CHR(10)
14:28:23 1104  || ' TRANSACTION.ID,'||CHR(10)
14:28:23 1105  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
14:28:23 1106  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
14:28:23 1107  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
14:28:23 1108  || ' TRANSACTION.CREATED_BY, '||CHR(10)
14:28:23 1109  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
14:28:23 1110  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
14:28:23 1111  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
14:28:23 1112  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
14:28:23 1113  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
14:28:23 1114  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
14:28:23 1115  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
14:28:23 1116  
14:28:23 1117  IF (in_transaction_status IS NOT NULL) THEN
14:28:23 1118  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
14:28:23 1119  END IF;
14:28:23 1120  
14:28:23 1121  IF (in_invoice_id IS NOT NULL) THEN
14:28:23 1122  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
14:28:23 1123  END IF;
14:28:23 1124  
14:28:23 1125  IF (in_subscription_id IS NOT NULL) THEN
14:28:23 1126  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
14:28:23 1127  END IF;
14:28:23 1128  
14:28:23 1129  IF (in_start_date IS NOT NULL) THEN
14:28:23 1130  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
14:28:23 1131  END IF;
14:28:23 1132  
14:28:23 1133  IF (in_end_date IS NOT NULL) THEN
14:28:23 1134  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
14:28:23 1135  END IF;
14:28:23 1136  dbms_output.put_line(statement);
14:28:23 1137  OPEN out_result_set FOR statement;
14:28:23 1138  
14:28:23 1139  */
14:28:23 1140  
14:28:23 1141  EXCEPTION
14:28:23 1142  WHEN BAD_GROUP_ID THEN
14:28:23 1143  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 1144  	   SPROC_NAME, 'No such group');
14:28:23 1145  WHEN OTHERS THEN
14:28:23 1146  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 1147  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 1148  END GET_TRANSACTIONS;
14:28:23 1149  
14:28:23 1150  FUNCTION IS_TRANSACTION_COLLECTED (
14:28:23 1151  /*
14:28:23 1152  Throws:
14:28:23 1153  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 1154  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 1155  Returns:
14:28:23 1156  GLOBAL_CONST.TRUE if transaction collected,
14:28:23 1157  GLOBAL_CONST.FALSE else
14:28:23 1158  */
14:28:23 1159  	 in_transaction_id IN NUMBER
14:28:23 1160  ) RETURN NUMBER AS
14:28:23 1161  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
14:28:23 1162  -- VARIABLES
14:28:23 1163  temp_transaction_id     NUMBER;
14:28:23 1164  var_success_attemps_num NUMBER;
14:28:23 1165  -- EXCEPTIONS
14:28:23 1166  BAD_TRANSACTION_ID EXCEPTION;
14:28:23 1167  BEGIN
14:28:23 1168  
14:28:23 1169  	 BEGIN
14:28:23 1170  	   SELECT
14:28:23 1171  	     TRANSACTION.ID into temp_transaction_id
14:28:23 1172  	   FROM
14:28:23 1173  	     TRANSACTION
14:28:23 1174  	   WHERE
14:28:23 1175  	     TRANSACTION.ID = in_transaction_id;
14:28:23 1176  	   EXCEPTION
14:28:23 1177  	     WHEN NO_DATA_FOUND THEN
14:28:23 1178  	       RAISE BAD_TRANSACTION_ID;
14:28:23 1179  	 END;
14:28:23 1180  
14:28:23 1181  	 SELECT
14:28:23 1182  	   COUNT(*) into var_success_attemps_num
14:28:23 1183  	 FROM
14:28:23 1184  	   TRANSACTION_ATTEMPT
14:28:23 1185  	 WHERE
14:28:23 1186  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
14:28:23 1187  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS FROM DUAL );
14:28:23 1188  
14:28:23 1189  	 IF var_success_attemps_num > 0 THEN
14:28:23 1190  	   RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:23 1191  	 ELSE
14:28:23 1192  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:23 1193  	 END IF;
14:28:23 1194  
14:28:23 1195  EXCEPTION
14:28:23 1196  WHEN BAD_TRANSACTION_ID THEN
14:28:23 1197  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 1198  	   SPROC_NAME, 'No such transaction');
14:28:23 1199  WHEN OTHERS THEN
14:28:23 1200  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 1201  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 1202  END IS_TRANSACTION_COLLECTED;
14:28:23 1203  
14:28:23 1204  
14:28:23 1205  /******************************************************************************/
14:28:23 1206  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
14:28:23 1207  /*
14:28:23 1208  Throws exceptions:
14:28:23 1209  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 1210  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 1211  */
14:28:23 1212  	 in_charge_id	in  number,
14:28:23 1213  	 out_attempt_count OUT NUMBER
14:28:23 1214  ) AS
14:28:23 1215  -- VARIABLES
14:28:23 1216  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_NEXT_ATTEMPT_NUMBER';
14:28:23 1217  temp_transaction_id NUMBER;
14:28:23 1218  -- EXCEPTIONS
14:28:23 1219  BAD_CHARGE_ID EXCEPTION;
14:28:23 1220  BEGIN
14:28:23 1221  
14:28:23 1222  	 BEGIN
14:28:23 1223  	   SELECT
14:28:23 1224  	     TRANSACTION_ID into temp_transaction_id
14:28:23 1225  	   FROM
14:28:23 1226  	     CHARGE
14:28:23 1227  	   WHERE
14:28:23 1228  	     CHARGE.ID = in_charge_id;
14:28:23 1229  	   EXCEPTION
14:28:23 1230  	     WHEN NO_DATA_FOUND THEN
14:28:23 1231  	       RAISE BAD_CHARGE_ID;
14:28:23 1232  	 END;
14:28:23 1233  
14:28:23 1234  	 select
14:28:23 1235  	   count(1)
14:28:23 1236  	 into
14:28:23 1237  	   out_attempt_count
14:28:23 1238  	 from
14:28:23 1239  	   transaction tr
14:28:23 1240  	 inner join
14:28:23 1241  	   transaction_attempt ta
14:28:23 1242  	 on (tr.id = ta.transaction_id)
14:28:23 1243  	 where
14:28:23 1244  	   tr.ID = temp_transaction_id;
14:28:23 1245  
14:28:23 1246  	 out_attempt_count := out_attempt_count + 1;
14:28:23 1247  
14:28:23 1248  EXCEPTION
14:28:23 1249  WHEN BAD_CHARGE_ID THEN
14:28:23 1250  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 1251  	   SPROC_NAME, 'No such charge');
14:28:23 1252  WHEN OTHERS THEN
14:28:23 1253  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 1254  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 1255  end GET_NEXT_ATTEMPT_NUMBER;
14:28:23 1256  /******************************************************************************/
14:28:23 1257  
14:28:23 1258  END PROCS_TRANSACTION_V23;
14:28:23 1259  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.13
14:28:23 SQL> 
14:28:23 SQL> prompt Compiling body for procs_license.sql
Compiling body for procs_license.sql
14:28:23 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V23" AS
14:28:23   2  
14:28:23   3  PROCEDURE CREATE_LICENSE(
14:28:23   4  /*
14:28:23   5  Throws exceptions:
14:28:23   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23   8  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:23   9  */
14:28:23  10  	in_status_id		    IN NUMBER,
14:28:23  11  	in_needs_entitlements	    IN NUMBER,
14:28:23  12  	in_start_date		    IN DATE,
14:28:23  13  	in_end_date		    IN DATE,
14:28:23  14  	in_offer_id		    IN NUMBER,
14:28:23  15  	in_subscription_id	    IN NUMBER,
14:28:23  16  	in_invoice_id		    IN NUMBER,
14:28:23  17  	in_created_by		    IN VARCHAR2,
14:28:23  18  	in_is_extension 	    IN NUMBER,
14:28:23  19  	in_current_offer_index	    IN NUMBER,
14:28:23  20  	in_current_offer_recurr_num IN NUMBER,
14:28:23  21  	out_license_id		    OUT NUMBER
14:28:23  22  ) AS
14:28:23  23  -- VARIABLES
14:28:23  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
14:28:23  25  temp_offer_id	   NUMBER;
14:28:23  26  temp_subscription_id NUMBER;
14:28:23  27  temp_invoice_id	   NUMBER;
14:28:23  28  
14:28:23  29  var_new_license_id NUMBER;
14:28:23  30  var_offer_duration VARCHAR2(30);
14:28:23  31  
14:28:23  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
14:28:23  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
14:28:23  34  var_offer_years	    NUMBER;
14:28:23  35  var_offer_months	    NUMBER;
14:28:23  36  var_offer_days	    NUMBER;
14:28:23  37  
14:28:23  38  -- EXCEPTIONS
14:28:23  39  BAD_OFFER_ID	     EXCEPTION;
14:28:23  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
14:28:23  41  BAD_INVOICE_ID	     EXCEPTION;
14:28:23  42  BAD_OFFER_DURATION     EXCEPTION;
14:28:23  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:23  44  BEGIN
14:28:23  45  
14:28:23  46  	-- TODO:
14:28:23  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
14:28:23  48  
14:28:23  49  	out_license_id := NULL;
14:28:23  50  
14:28:23  51  	-- get offer id and offer entitlement duration
14:28:23  52  	BEGIN
14:28:23  53  	  SELECT
14:28:23  54  	    OFFER.ID,
14:28:23  55  	    OFFER.ENTITLEMENT_DURATION
14:28:23  56  	    into
14:28:23  57  	    temp_offer_id,
14:28:23  58  	    var_offer_duration
14:28:23  59  	  FROM
14:28:23  60  	    OFFER
14:28:23  61  	  WHERE
14:28:23  62  	    OFFER.ID = in_offer_id;
14:28:23  63  	  EXCEPTION
14:28:23  64  	  WHEN NO_DATA_FOUND THEN
14:28:23  65  	    RAISE BAD_OFFER_ID;
14:28:23  66  	END;
14:28:23  67  
14:28:23  68  	-- Check that subscription exists
14:28:23  69  	BEGIN
14:28:23  70  	  SELECT
14:28:23  71  	    SUBSCRIPTION.ID into temp_subscription_id
14:28:23  72  	  FROM
14:28:23  73  	    SUBSCRIPTION
14:28:23  74  	  WHERE
14:28:23  75  	    SUBSCRIPTION.ID = in_subscription_id;
14:28:23  76  	  EXCEPTION
14:28:23  77  	  WHEN NO_DATA_FOUND THEN
14:28:23  78  	    RAISE BAD_SUBSCRIPTION_ID;
14:28:23  79  	END;
14:28:23  80  
14:28:23  81  	-- Check that invoice exists
14:28:23  82  	BEGIN
14:28:23  83  	  SELECT
14:28:23  84  	    INVOICE.ID into temp_invoice_id
14:28:23  85  	  FROM
14:28:23  86  	    INVOICE
14:28:23  87  	  WHERE
14:28:23  88  	    INVOICE.ID = in_invoice_id;
14:28:23  89  	  EXCEPTION
14:28:23  90  	  WHEN NO_DATA_FOUND THEN
14:28:23  91  	    RAISE BAD_INVOICE_ID;
14:28:23  92  	END;
14:28:23  93  
14:28:23  94  	-- convert offer duration into intervals
14:28:23  95  	BEGIN
14:28:23  96  	  PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(
14:28:23  97  	    var_offer_duration,
14:28:23  98  	    var_offer_years,
14:28:23  99  	    var_offer_months,
14:28:23 100  	    var_offer_days);
14:28:23 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
14:28:23 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
14:28:23 103  	  EXCEPTION
14:28:23 104  	    WHEN OTHERS THEN
14:28:23 105  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:23 106  	      RAISE BAD_OFFER_DURATION;
14:28:23 107  	END;
14:28:23 108  
14:28:23 109  	-- insert new row into license table
14:28:23 110  	PROCS_LICENSE_CRU_V23.CREATE_LICENSE(
14:28:23 111  	  out_license_id	      => var_new_license_id,
14:28:23 112  	  in_license_status_id	      => in_status_id,
14:28:23 113  	  in_needs_entitlements       => in_needs_entitlements,
14:28:23 114  	  in_start_date 	      => in_start_date,
14:28:23 115  	  in_offer_id		      => in_offer_id,
14:28:23 116  	  in_subscription_id	      => in_subscription_id,
14:28:23 117  	  in_invoice_id 	      => in_invoice_id,
14:28:23 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
14:28:23 119  	  in_created_by 	      => in_created_by,
14:28:23 120  	  in_is_extension	      => in_is_extension,
14:28:23 121  	  in_current_offer_index      => in_current_offer_index,
14:28:23 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
14:28:23 123  	);
14:28:23 124  
14:28:23 125  	out_license_id := var_new_license_id;
14:28:23 126  
14:28:23 127  EXCEPTION
14:28:23 128  WHEN BAD_OFFER_DURATION THEN
14:28:23 129  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:23 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
14:28:23 131  WHEN BAD_OFFER_ID THEN
14:28:23 132  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 133  	  SPROC_NAME, 'No such offer');
14:28:23 134  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:23 135  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 136  	  SPROC_NAME, 'No such subscription');
14:28:23 137  WHEN BAD_INVOICE_ID THEN
14:28:23 138  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 139  	  SPROC_NAME, 'No such invoice');
14:28:23 140  WHEN OTHERS THEN
14:28:23 141  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 143  END;
14:28:23 144  
14:28:23 145  /******************************************************************************/
14:28:23 146  
14:28:23 147  PROCEDURE UPDATE_LICENSE_STATUS(
14:28:23 148  	  in_license_id     IN NUMBER,
14:28:23 149  	  in_license_status IN NUMBER,
14:28:23 150  	  in_updated_by     IN VARCHAR2,
14:28:23 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
14:28:23 152  ) AS
14:28:23 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
14:28:23 154  -- VARIABLES
14:28:23 155  temp_license_id NUMBER;
14:28:23 156  -- EXCEPTIONS
14:28:23 157  BAD_LICENSE_ID	     EXCEPTION;
14:28:23 158  BAD_LICENSE_STATUS     EXCEPTION;
14:28:23 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:23 160  BEGIN
14:28:23 161  
14:28:23 162  	BEGIN
14:28:23 163  	  SELECT
14:28:23 164  	    ID into temp_license_id
14:28:23 165  	  FROM
14:28:23 166  	    LICENSE
14:28:23 167  	  WHERE
14:28:23 168  	    LICENSE.ID = in_license_id;
14:28:23 169  	  EXCEPTION
14:28:23 170  	    WHEN NO_DATA_FOUND THEN
14:28:23 171  	      RAISE BAD_LICENSE_ID;
14:28:23 172  	END;
14:28:23 173  
14:28:23 174  	IF in_license_status != GLOBAL_STATUSES_V23.LICENSE_CLOSED
14:28:23 175  	   AND in_license_status != GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:23 176  	   AND in_license_status != GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD THEN
14:28:23 177  	  RAISE BAD_LICENSE_STATUS;
14:28:23 178  	END IF;
14:28:23 179  
14:28:23 180  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V23.TRUE) then
14:28:23 181  	  PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:23 182  	    in_license_id	 => in_license_id,
14:28:23 183  	    in_updated_by	 => in_updated_by,
14:28:23 184  	    in_license_status_id => in_license_status,
14:28:23 185  	    in_entitlement_end_date	 => sysdate
14:28:23 186  	  );
14:28:23 187  	ELSE
14:28:23 188  	  PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:23 189  	    in_license_id	 => in_license_id,
14:28:23 190  	    in_updated_by	 => in_updated_by,
14:28:23 191  	    in_license_status_id => in_license_status
14:28:23 192  	  );
14:28:23 193  	END IF;
14:28:23 194  
14:28:23 195  EXCEPTION
14:28:23 196  WHEN BAD_LICENSE_STATUS THEN
14:28:23 197  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:23 198  	  SPROC_NAME, 'Bad status id');
14:28:23 199  WHEN BAD_LICENSE_ID THEN
14:28:23 200  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 201  	  SPROC_NAME, 'No such license');
14:28:23 202  WHEN OTHERS THEN
14:28:23 203  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 204  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 205  END UPDATE_LICENSE_STATUS;
14:28:23 206  
14:28:23 207  /******************************************************************************/
14:28:23 208  
14:28:23 209  PROCEDURE GET_ENDING_LICENSES (
14:28:23 210  	in_hours_number IN NUMBER,
14:28:23 211  	out_result_set	OUT SYS_REFCURSOR
14:28:23 212  ) AS
14:28:23 213  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
14:28:23 214  -- VARIABLES
14:28:23 215  var_days		NUMBER;
14:28:23 216  var_hours 	NUMBER;
14:28:23 217  var_time_interval INTERVAL DAY (3) TO SECOND;
14:28:23 218  BEGIN
14:28:23 219  
14:28:23 220  	var_hours := mod(in_hours_number,24);
14:28:23 221  	var_days := (in_hours_number - var_hours) / 24;
14:28:23 222  	var_time_interval := var_days||' '||var_hours||':0:0';
14:28:23 223  
14:28:23 224  	OPEN out_result_set FOR
14:28:23 225  SELECT * FROM
14:28:23 226  (
14:28:23 227  	SELECT
14:28:23 228  	  LICENSE.ID,
14:28:23 229  	  LICENSE.CREATE_DATE,
14:28:23 230  	  LICENSE.CREATED_BY,
14:28:23 231  	  LICENSE.CURRENT_OFFER_INDEX,
14:28:23 232  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
14:28:23 233  	  LICENSE.END_DATE,
14:28:23 234  	  LICENSE.ENTITLEMENT_END_DATE,
14:28:23 235  	  LICENSE.INVOICE_ID,
14:28:23 236  	  LICENSE.IS_EXTENSION,
14:28:23 237  	  LICENSE.LICENSE_STATUS_ID,
14:28:23 238  	  LICENSE.OFFER_ID,
14:28:23 239  	  LICENSE.START_DATE,
14:28:23 240  	  LICENSE.SUBSCRIPTION_ID,
14:28:23 241  	  LICENSE.UPDATE_DATE,
14:28:23 242  	  LICENSE.UPDATED_BY
14:28:23 243  	FROM
14:28:23 244  	  LICENSE
14:28:23 245  	WHERE
14:28:23 246  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
14:28:23 247  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:23 248  	  AND NOT EXISTS
14:28:23 249  	  (
14:28:23 250  	    SELECT NULL
14:28:23 251  	    FROM PROCESS_RETRY_THROTTLE
14:28:23 252  	    WHERE PROCESS_NAME = SPROC_NAME
14:28:23 253  	      AND GENERIC_ID = LICENSE.ID
14:28:23 254  	  )
14:28:23 255  	  AND ROWNUM <= 40000
14:28:23 256  	  ORDER BY dbms_random.value
14:28:23 257  ) WHERE
14:28:23 258  	  ROWNUM <= 4000;
14:28:23 259  EXCEPTION
14:28:23 260  WHEN OTHERS THEN
14:28:23 261  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 263  END GET_ENDING_LICENSES;
14:28:23 264  
14:28:23 265  
14:28:23 266  /******************************************************************************/
14:28:23 267  
14:28:23 268  PROCEDURE GET_ENDING_LICENSES_CC (
14:28:23 269  	in_hours_number IN NUMBER,
14:28:23 270  	out_result_set	OUT SYS_REFCURSOR,
14:28:23 271  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:23 272  ) AS
14:28:23 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
14:28:23 274  -- VARIABLES
14:28:23 275  var_days		NUMBER;
14:28:23 276  var_hours 	NUMBER;
14:28:23 277  var_time_interval INTERVAL DAY (3) TO SECOND;
14:28:23 278  BEGIN
14:28:23 279  
14:28:23 280  	var_hours := mod(in_hours_number,24);
14:28:23 281  	var_days := (in_hours_number - var_hours) / 24;
14:28:23 282  	var_time_interval := var_days||' '||var_hours||':0:0';
14:28:23 283  
14:28:23 284  	OPEN out_result_set FOR
14:28:23 285  SELECT * FROM
14:28:23 286  (
14:28:23 287  	SELECT
14:28:23 288  	  LICENSE.ID,
14:28:23 289  	  LICENSE.CREATE_DATE,
14:28:23 290  	  LICENSE.CREATED_BY,
14:28:23 291  	  LICENSE.CURRENT_OFFER_INDEX,
14:28:23 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
14:28:23 293  	  LICENSE.END_DATE,
14:28:23 294  	  LICENSE.ENTITLEMENT_END_DATE,
14:28:23 295  	  LICENSE.INVOICE_ID,
14:28:23 296  	  LICENSE.IS_EXTENSION,
14:28:23 297  	  LICENSE.LICENSE_STATUS_ID,
14:28:23 298  	  LICENSE.OFFER_ID,
14:28:23 299  	  LICENSE.START_DATE,
14:28:23 300  	  LICENSE.SUBSCRIPTION_ID,
14:28:23 301  	  LICENSE.UPDATE_DATE,
14:28:23 302  	  LICENSE.UPDATED_BY
14:28:23 303  	FROM
14:28:23 304  	  LICENSE
14:28:23 305  	WHERE
14:28:23 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
14:28:23 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:23 308  	  AND NOT EXISTS
14:28:23 309  	  (
14:28:23 310  	    SELECT NULL
14:28:23 311  	    FROM PROCESS_RETRY_THROTTLE
14:28:23 312  	    WHERE PROCESS_NAME = in_process_name
14:28:23 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
14:28:23 314  	  )
14:28:23 315  	  AND ROWNUM <= 10000
14:28:23 316  	  ORDER BY dbms_random.value
14:28:23 317  ) WHERE
14:28:23 318  	  ROWNUM <= 1000
14:28:23 319  	  ;
14:28:23 320  EXCEPTION
14:28:23 321  WHEN OTHERS THEN
14:28:23 322  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 324  END GET_ENDING_LICENSES_CC;
14:28:23 325  
14:28:23 326  /******************************************************************************/
14:28:23 327  
14:28:23 328  PROCEDURE GET_RECURRING_OFFER (
14:28:23 329  	in_license_id  IN NUMBER,
14:28:23 330  	out_result_set OUT SYS_REFCURSOR
14:28:23 331  ) AS
14:28:23 332  -- VARIABLES
14:28:23 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
14:28:23 334  var_offer_chain_id	    NUMBER;
14:28:23 335  var_offer_id		    NUMBER;
14:28:23 336  var_offer_num_recurrences     NUMBER;
14:28:23 337  var_license_cur_offer_rec_num NUMBER;
14:28:23 338  var_offer_index		    NUMBER;
14:28:23 339  -- EXCEPTIONS
14:28:23 340  BAD_LICENSE_ID	     EXCEPTION;
14:28:23 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
14:28:23 342  BEGIN
14:28:23 343  
14:28:23 344  	BEGIN
14:28:23 345  	  SELECT
14:28:23 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
14:28:23 347  	    LICENSE.OFFER_ID,
14:28:23 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
14:28:23 349  	    into
14:28:23 350  	    var_offer_chain_id,
14:28:23 351  	    var_offer_id,
14:28:23 352  	    var_license_cur_offer_rec_num
14:28:23 353  	  FROM
14:28:23 354  	    LICENSE
14:28:23 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:23 356  	  WHERE
14:28:23 357  	    LICENSE.ID = in_license_id;
14:28:23 358  	  EXCEPTION
14:28:23 359  	    WHEN NO_DATA_FOUND THEN
14:28:23 360  	      RAISE BAD_LICENSE_ID;
14:28:23 361  	END;
14:28:23 362  
14:28:23 363  	BEGIN
14:28:23 364  	  SELECT
14:28:23 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
14:28:23 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
14:28:23 367  	    into
14:28:23 368  	    var_offer_num_recurrences,
14:28:23 369  	    var_offer_index
14:28:23 370  	  FROM
14:28:23 371  	    OFFER_OFFER_CHAIN
14:28:23 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:28:23 373  	  WHERE
14:28:23 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:28:23 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
14:28:23 376  	  EXCEPTION
14:28:23 377  	    WHEN NO_DATA_FOUND THEN
14:28:23 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
14:28:23 379  	END;
14:28:23 380  
14:28:23 381  	IF var_offer_num_recurrences = 0 THEN
14:28:23 382  	  --out_result_set := NULL;
14:28:23 383  	  -- TODO: Remove this hardcode
14:28:23 384  	  OPEN out_result_set FOR
14:28:23 385  	  SELECT
14:28:23 386  	    OFFER.ID,
14:28:23 387  	    OFFER.OFFER_STATUS_ID,
14:28:23 388  	    OFFER.ENTITLEMENT_DURATION,
14:28:23 389  	    OFFER.CREATED_BY,
14:28:23 390  	    OFFER.CREATE_DATE,
14:28:23 391  	    OFFER.UPDATED_BY,
14:28:23 392  	    OFFER.UPDATE_DATE,
14:28:23 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
14:28:23 394  	    var_offer_index as "OFFER_INDEX"
14:28:23 395  	  FROM
14:28:23 396  	    OFFER_OFFER_CHAIN
14:28:23 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:28:23 398  	  WHERE ROWNUM = 0;
14:28:23 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
14:28:23 400  	  --out_result_set := NULL;
14:28:23 401  	  -- TODO: Remove this hardcode
14:28:23 402  	  OPEN out_result_set FOR
14:28:23 403  	  SELECT
14:28:23 404  	    OFFER.ID,
14:28:23 405  	    OFFER.OFFER_STATUS_ID,
14:28:23 406  	    OFFER.ENTITLEMENT_DURATION,
14:28:23 407  	    OFFER.CREATED_BY,
14:28:23 408  	    OFFER.CREATE_DATE,
14:28:23 409  	    OFFER.UPDATED_BY,
14:28:23 410  	    OFFER.UPDATE_DATE,
14:28:23 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
14:28:23 412  	    var_offer_index as "OFFER_INDEX"
14:28:23 413  	  FROM
14:28:23 414  	    OFFER_OFFER_CHAIN
14:28:23 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:28:23 416  	  WHERE ROWNUM = 0;
14:28:23 417  	ELSE
14:28:23 418  	  OPEN out_result_set FOR
14:28:23 419  	  SELECT
14:28:23 420  	    OFFER.ID,
14:28:23 421  	    OFFER.OFFER_STATUS_ID,
14:28:23 422  	    OFFER.ENTITLEMENT_DURATION,
14:28:23 423  	    OFFER.CREATED_BY,
14:28:23 424  	    OFFER.CREATE_DATE,
14:28:23 425  	    OFFER.UPDATED_BY,
14:28:23 426  	    OFFER.UPDATE_DATE,
14:28:23 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
14:28:23 428  	    var_offer_index as "OFFER_INDEX"
14:28:23 429  	  FROM
14:28:23 430  	    OFFER
14:28:23 431  	  WHERE
14:28:23 432  	    OFFER.ID = var_offer_id;
14:28:23 433  	END IF;
14:28:23 434  
14:28:23 435  EXCEPTION
14:28:23 436  WHEN BAD_LICENSE_ID THEN
14:28:23 437  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 438  	  SPROC_NAME, 'No such license');
14:28:23 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
14:28:23 440  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
14:28:23 442  WHEN OTHERS THEN
14:28:23 443  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 445  END GET_RECURRING_OFFER;
14:28:23 446  
14:28:23 447  /******************************************************************************/
14:28:23 448  
14:28:23 449  PROCEDURE GET_NEXT_OFFER (
14:28:23 450  /*
14:28:23 451  Throws exceptions:
14:28:23 452  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:23 453  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:23 454  */
14:28:23 455  	in_license_id  IN NUMBER,
14:28:23 456  	out_result_set OUT SYS_REFCURSOR
14:28:23 457  ) AS
14:28:23 458  -- VARIABLES
14:28:23 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
14:28:23 460  var_offer_chain_id	NUMBER;
14:28:23 461  var_offer_id		NUMBER;
14:28:23 462  var_license_current_index NUMBER;
14:28:23 463  var_next_offer_index	NUMBER;
14:28:23 464  -- EXCEPTIONS
14:28:23 465  BAD_LICENSE_ID	      EXCEPTION;
14:28:23 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
14:28:23 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:28:23 468  BEGIN
14:28:23 469  
14:28:23 470  	BEGIN
14:28:23 471  	  SELECT
14:28:23 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
14:28:23 473  	    LICENSE.OFFER_ID,
14:28:23 474  	    LICENSE.CURRENT_OFFER_INDEX
14:28:23 475  	    into
14:28:23 476  	    var_offer_chain_id,
14:28:23 477  	    var_offer_id,
14:28:23 478  	    var_license_current_index
14:28:23 479  	  FROM
14:28:23 480  	    LICENSE
14:28:23 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:23 482  	  WHERE
14:28:23 483  	    LICENSE.ID = in_license_id;
14:28:23 484  	  EXCEPTION
14:28:23 485  	    WHEN NO_DATA_FOUND THEN
14:28:23 486  	      RAISE BAD_LICENSE_ID;
14:28:23 487  	END;
14:28:23 488  
14:28:23 489  	BEGIN
14:28:23 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V23.GET_NEXT_OFFER_INDEX(
14:28:23 491  	    var_offer_chain_id,
14:28:23 492  	    var_license_current_index
14:28:23 493  	  );
14:28:23 494  	  EXCEPTION
14:28:23 495  	    WHEN OTHERS THEN
14:28:23 496  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:23 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
14:28:23 498  	END;
14:28:23 499  
14:28:23 500  	IF var_next_offer_index IS NULL THEN
14:28:23 501  	  -- RETURN NULL;
14:28:23 502  	  -- TODO: Remove this hardcode
14:28:23 503  	  OPEN out_result_set FOR
14:28:23 504  	  SELECT
14:28:23 505  	    OFFER.ID,
14:28:23 506  	    OFFER.OFFER_STATUS_ID,
14:28:23 507  	    OFFER.ENTITLEMENT_DURATION,
14:28:23 508  	    OFFER.CREATED_BY,
14:28:23 509  	    OFFER.CREATE_DATE,
14:28:23 510  	    OFFER.UPDATED_BY,
14:28:23 511  	    OFFER.UPDATE_DATE,
14:28:23 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
14:28:23 513  	  FROM
14:28:23 514  	    OFFER_OFFER_CHAIN
14:28:23 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:28:23 516  	  WHERE
14:28:23 517  	    1=2;
14:28:23 518  	ELSE
14:28:23 519  	  OPEN out_result_set FOR
14:28:23 520  	  SELECT
14:28:23 521  	    OFFER.ID,
14:28:23 522  	    OFFER.OFFER_STATUS_ID,
14:28:23 523  	    OFFER.ENTITLEMENT_DURATION,
14:28:23 524  	    OFFER.CREATED_BY,
14:28:23 525  	    OFFER.CREATE_DATE,
14:28:23 526  	    OFFER.UPDATED_BY,
14:28:23 527  	    OFFER.UPDATE_DATE,
14:28:23 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
14:28:23 529  	  FROM
14:28:23 530  	    OFFER_OFFER_CHAIN
14:28:23 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:28:23 532  	  WHERE
14:28:23 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:28:23 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
14:28:23 535  	END IF;
14:28:23 536  
14:28:23 537  EXCEPTION
14:28:23 538  WHEN BAD_LICENSE_ID THEN
14:28:23 539  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 540  	  SPROC_NAME, 'No such license');
14:28:23 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
14:28:23 542  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:23 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
14:28:23 544  WHEN OTHERS THEN
14:28:23 545  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 547  END GET_NEXT_OFFER;
14:28:23 548  
14:28:23 549  /******************************************************************************/
14:28:23 550  
14:28:23 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
14:28:23 552  	in_license_id IN NUMBER,
14:28:23 553  	out_group_id  OUT NUMBER
14:28:23 554  ) AS
14:28:23 555  -- VARIABLES
14:28:23 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
14:28:23 557  var_subscription_id NUMBER;
14:28:23 558  var_group_id	  NUMBER;
14:28:23 559  -- EXCEPTIONS
14:28:23 560  BAD_LICENSE_ID	   EXCEPTION;
14:28:23 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
14:28:23 562  BEGIN
14:28:23 563  
14:28:23 564  	-- Get subscription id
14:28:23 565  	BEGIN
14:28:23 566  	  SELECT
14:28:23 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
14:28:23 568  	  FROM
14:28:23 569  	    LICENSE
14:28:23 570  	  WHERE
14:28:23 571  	    LICENSE.ID = in_license_id;
14:28:23 572  	  EXCEPTION
14:28:23 573  	    WHEN NO_DATA_FOUND THEN
14:28:23 574  	      RAISE BAD_LICENSE_ID;
14:28:23 575  	END;
14:28:23 576  
14:28:23 577  	-- Get group id
14:28:23 578  	BEGIN
14:28:23 579  	  SELECT
14:28:23 580  	    ACCOUNT.GROUP_ID into var_group_id
14:28:23 581  	  FROM
14:28:23 582  	    SUBSCRIPTION
14:28:23 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:28:23 584  	  WHERE
14:28:23 585  	    SUBSCRIPTION.ID = var_subscription_id;
14:28:23 586  	  EXCEPTION
14:28:23 587  	    WHEN NO_DATA_FOUND THEN
14:28:23 588  	      RAISE CAN_NOT_GET_GROUP_ID;
14:28:23 589  	END;
14:28:23 590  
14:28:23 591  	out_group_id := var_group_id;
14:28:23 592  
14:28:23 593  EXCEPTION
14:28:23 594  WHEN BAD_LICENSE_ID THEN
14:28:23 595  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 596  	  SPROC_NAME, 'No such license');
14:28:23 597  WHEN CAN_NOT_GET_GROUP_ID THEN
14:28:23 598  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 599  	  SPROC_NAME, 'Could not get group id');
14:28:23 600  WHEN OTHERS THEN
14:28:23 601  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 603  END GET_GROUP_ID_BY_LICENSE_ID;
14:28:23 604  
14:28:23 605  /******************************************************************************/
14:28:23 606  
14:28:23 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
14:28:23 608  	out_result_set OUT SYS_REFCURSOR
14:28:23 609  ) AS
14:28:23 610  BEGIN
14:28:23 611  	OPEN out_result_set FOR
14:28:23 612  SELECT * FROM
14:28:23 613  (
14:28:23 614  	SELECT
14:28:23 615  	  LICENSE.ID,
14:28:23 616  	  LICENSE.INVOICE_ID,
14:28:23 617  	  LICENSE.IS_EXTENSION,
14:28:23 618  	  LICENSE.START_DATE,
14:28:23 619  	  LICENSE.END_DATE,
14:28:23 620  	  LICENSE.ENTITLEMENT_END_DATE,
14:28:23 621  	  LICENSE.CURRENT_OFFER_INDEX,
14:28:23 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
14:28:23 623  	  LICENSE.CREATE_DATE,
14:28:23 624  	  LICENSE.CREATED_BY,
14:28:23 625  	  LICENSE.LICENSE_STATUS_ID,
14:28:23 626  	  LICENSE.OFFER_ID,
14:28:23 627  	  LICENSE.SUBSCRIPTION_ID,
14:28:23 628  	  LICENSE.UPDATE_DATE,
14:28:23 629  	  LICENSE.UPDATED_BY,
14:28:23 630  	  LICENSE.NEEDS_ENTITLEMENTS
14:28:23 631  	FROM
14:28:23 632  	  LICENSE
14:28:23 633  	WHERE
14:28:23 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V23.TRUE
14:28:23 635  	AND ROWNUM <= 5000
14:28:23 636  	ORDER BY dbms_random.value
14:28:23 637  ) WHERE
14:28:23 638  	ROWNUM <= 500;
14:28:23 639  
14:28:23 640  END GET_NEED_ENTITLEMENTS_LICENSES;
14:28:23 641  
14:28:23 642  /******************************************************************************/
14:28:23 643  
14:28:23 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
14:28:23 645  	in_license_id	      IN NUMBER,
14:28:23 646  	in_needs_entitlements IN NUMBER,
14:28:23 647  	in_updated_by	      IN VARCHAR2
14:28:23 648  ) AS
14:28:23 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
14:28:23 650  -- VARIABLES
14:28:23 651  temp_license_id NUMBER;
14:28:23 652  -- EXCEPTIONS
14:28:23 653  BAD_LICENSE_ID	     EXCEPTION;
14:28:23 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
14:28:23 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:23 656  BEGIN
14:28:23 657  
14:28:23 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V23.TRUE
14:28:23 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:23 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
14:28:23 661  	END IF;
14:28:23 662  
14:28:23 663  	BEGIN
14:28:23 664  	  SELECT
14:28:23 665  	    LICENSE.ID into temp_license_id
14:28:23 666  	  FROM
14:28:23 667  	    LICENSE
14:28:23 668  	  WHERE
14:28:23 669  	    LICENSE.ID = in_license_id;
14:28:23 670  	  EXCEPTION
14:28:23 671  	    WHEN NO_DATA_FOUND THEN
14:28:23 672  	      RAISE BAD_LICENSE_ID;
14:28:23 673  	END;
14:28:23 674  
14:28:23 675  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:23 676  	  in_license_id 	=> in_license_id,
14:28:23 677  	  in_needs_entitlements => in_needs_entitlements,
14:28:23 678  	  in_updated_by 	=> in_updated_by
14:28:23 679  	);
14:28:23 680  
14:28:23 681  EXCEPTION
14:28:23 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
14:28:23 683  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:23 684  	  SPROC_NAME, 'Bad entitlements flag value');
14:28:23 685  WHEN BAD_LICENSE_ID THEN
14:28:23 686  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 687  	  SPROC_NAME, 'No such license');
14:28:23 688  WHEN OTHERS THEN
14:28:23 689  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
14:28:23 692  
14:28:23 693  
14:28:23 694  /******************************************************************************/
14:28:23 695  
14:28:23 696  PROCEDURE GET_ENDED_GC_LICENSES (
14:28:23 697  	out_result_set		OUT SYS_REFCURSOR,
14:28:23 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:28:23 699  	in_num_rows		IN NUMBER DEFAULT 10000,
14:28:23 700  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:23 701  ) AS
14:28:23 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
14:28:23 703  var_days		NUMBER;
14:28:23 704  var_hours 	NUMBER;
14:28:23 705  var_time_interval INTERVAL DAY (3) TO SECOND;
14:28:23 706  BEGIN
14:28:23 707  	var_hours := mod(in_hours_number,24);
14:28:23 708  	var_days := (in_hours_number - var_hours) / 24;
14:28:23 709  	var_time_interval := var_days||' '||var_hours||':0:0';
14:28:23 710  	OPEN out_result_set FOR
14:28:23 711  SELECT * FROM
14:28:23 712  (
14:28:23 713  	SELECT
14:28:23 714  	  l.ID,
14:28:23 715  	  l.CREATE_DATE,
14:28:23 716  	  l.CREATED_BY,
14:28:23 717  	  l.CURRENT_OFFER_INDEX,
14:28:23 718  	  l.CURRENT_OFFER_RECURR_NUM,
14:28:23 719  	  l.END_DATE,
14:28:23 720  	  l.ENTITLEMENT_END_DATE,
14:28:23 721  	  l.INVOICE_ID,
14:28:23 722  	  l.IS_EXTENSION,
14:28:23 723  	  l.LICENSE_STATUS_ID,
14:28:23 724  	  l.OFFER_ID,
14:28:23 725  	  l.START_DATE,
14:28:23 726  	  l.SUBSCRIPTION_ID,
14:28:23 727  	  l.UPDATE_DATE,
14:28:23 728  	  l.UPDATED_BY
14:28:23 729  	FROM
14:28:23 730  	  GIFT_CERTIFICATE gc
14:28:23 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
14:28:23 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
14:28:23 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
14:28:23 734  	WHERE
14:28:23 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:23 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
14:28:23 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
14:28:23 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_CLOSED
14:28:23 739  	  AND NOT EXISTS (
14:28:23 740  	    SELECT NULL
14:28:23 741  	    FROM PROCESS_RETRY_THROTTLE
14:28:23 742  	    WHERE PROCESS_NAME = in_process_name
14:28:23 743  	      AND GENERIC_ID = l.ID
14:28:23 744  	  )
14:28:23 745  	  AND ROWNUM <= in_num_rows*10
14:28:23 746  	  ORDER BY dbms_random.value
14:28:23 747  ) WHERE
14:28:23 748  	  ROWNUM <= in_num_rows
14:28:23 749  	  GROUP BY SUBSCRIPTION_ID;
14:28:23 750  EXCEPTION
14:28:23 751  WHEN OTHERS THEN
14:28:23 752  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 754  END GET_ENDED_GC_LICENSES;
14:28:23 755  
14:28:23 756  PROCEDURE GET_LICENSE_BY_ID (
14:28:23 757  	in_license_id  IN NUMBER,
14:28:23 758  	out_result_set OUT SYS_REFCURSOR
14:28:23 759  ) AS
14:28:23 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
14:28:23 761  -- VARIABLES
14:28:23 762  temp_license_id NUMBER;
14:28:23 763  -- EXCEPTIONS
14:28:23 764  BAD_LICENSE_ID EXCEPTION;
14:28:23 765  BEGIN
14:28:23 766  
14:28:23 767  	BEGIN
14:28:23 768  	  SELECT
14:28:23 769  	    l.id into temp_license_id
14:28:23 770  	  FROM
14:28:23 771  	    license l
14:28:23 772  	  WHERE
14:28:23 773  	    l.id = in_license_id;
14:28:23 774  	  EXCEPTION
14:28:23 775  	    WHEN NO_DATA_FOUND THEN
14:28:23 776  	      RAISE BAD_LICENSE_ID;
14:28:23 777  	END;
14:28:23 778  
14:28:23 779  	OPEN out_result_set FOR
14:28:23 780  	SELECT
14:28:23 781  	  l.id,
14:28:23 782  	  l.license_status_id,
14:28:23 783  	  l.subscription_id,
14:28:23 784  	  l.invoice_id,
14:28:23 785  	  l.offer_id,
14:28:23 786  	  l.start_date,
14:28:23 787  	  l.end_date,
14:28:23 788  	  l.entitlement_end_date,
14:28:23 789  	  l.is_extension,
14:28:23 790  	  l.create_date,
14:28:23 791  	  l.created_by,
14:28:23 792  	  l.update_date,
14:28:23 793  	  l.updated_by,
14:28:23 794  	  l.current_offer_index,
14:28:23 795  	  l.current_offer_recurr_num,
14:28:23 796  	  l.needs_entitlements
14:28:23 797  	FROM
14:28:23 798  	  LICENSE l
14:28:23 799  	WHERE
14:28:23 800  	  l.id = in_license_id;
14:28:23 801  
14:28:23 802  EXCEPTION
14:28:23 803  WHEN BAD_LICENSE_ID THEN
14:28:23 804  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:23 805  	  SPROC_NAME, 'No such license');
14:28:23 806  WHEN OTHERS THEN
14:28:23 807  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 809  END GET_LICENSE_BY_ID;
14:28:23 810  
14:28:23 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
14:28:23 812  	in_subscription_id IN NUMBER,
14:28:23 813  	in_end_date IN DATE,
14:28:23 814  	in_updated_by IN VARCHAR2
14:28:23 815  ) AS
14:28:23 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
14:28:23 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:23 818  var_latest_lice NUMBER;
14:28:23 819  BEGIN
14:28:23 820  	SELECT max(id)
14:28:23 821  	INTO  var_latest_lice
14:28:23 822  	FROM LICENSE
14:28:23 823  	WHERE
14:28:23 824  	  subscription_id = in_subscription_id
14:28:23 825  	;
14:28:23 826  
14:28:23 827  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:23 828  	  in_license_id        => var_latest_lice,
14:28:23 829  	  in_updated_by        => in_updated_by,
14:28:23 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V23.TRUE,
14:28:23 831  	  in_end_date	       => in_end_date,
14:28:23 832  	  in_entitlement_end_date => in_end_date
14:28:23 833  	);
14:28:23 834  
14:28:23 835  EXCEPTION
14:28:23 836  WHEN NO_DATA_FOUND THEN
14:28:23 837  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
14:28:23 839  WHEN OTHERS THEN
14:28:23 840  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:23 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:23 842  END UP_LATEST_LICE_END_BY_SUBID;
14:28:23 843  
14:28:23 844  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
14:28:23 845  	in_days_before_close	 IN NUMBER,
14:28:23 846  	in_num_licenses_to_fetch IN NUMBER,
14:28:23 847  	out_result_set		 OUT SYS_REFCURSOR
14:28:23 848  ) AS
14:28:23 849  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRACE_LICE_FOR_FINAL_TRANS';
14:28:23 850  BEGIN
14:28:23 851  	OPEN out_result_set FOR
14:28:23 852  	SELECT
14:28:23 853  	    *
14:28:23 854  	FROM
14:28:23 855  	    (
14:28:23 856  		SELECT
14:28:23 857  		    l.id
14:28:23 858  		FROM
14:28:23 859  		    license l
14:28:23 860  		JOIN
14:28:23 861  		    invoice i
14:28:23 862  		ON
14:28:23 863  		    l.invoice_id = i.id
14:28:23 864  		WHERE
14:28:23 865  		    i.invoice_status_id = GLOBAL_STATUSES_V23.INVOICE_OPEN
14:28:23 866  		AND l.license_status_id = GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD
14:28:23 867  		AND SYSDATE + in_days_before_close >= l.grace_end_date
14:28:23 868  		AND NOT EXISTS
14:28:23 869  		    (
14:28:23 870  			SELECT
14:28:23 871  			    1
14:28:23 872  			FROM
14:28:23 873  			    charge c
14:28:23 874  			WHERE
14:28:23 875  			    c.invoice_id = i.id
14:28:23 876  			AND c.charge_status_id = GLOBAL_STATUSES_V23.CHARGE_OPENED)
14:28:23 877  		AND rownum <= in_num_licenses_to_fetch * 10
14:28:23 878  		ORDER BY
14:28:23 879  		    dbms_random.value)
14:28:23 880  	WHERE
14:28:23 881  	    rownum <= in_num_licenses_to_fetch;
14:28:23 882  END GET_GRACE_LICE_FOR_FINAL_TRANS;
14:28:23 883  
14:28:23 884  END PROCS_LICENSE_V23;
14:28:23 885  .
14:28:23 SQL> /

Package body created.

Elapsed: 00:00:00.08
14:28:24 SQL> 
14:28:24 SQL> prompt Compiling body for procs_charge.sql
Compiling body for procs_charge.sql
14:28:24 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V23" AS
14:28:24   2  
14:28:24   3  PROCEDURE CREATE_CHARGE(
14:28:24   4  /*
14:28:24   5  Throws exceptions:
14:28:24   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24   8  */
14:28:24   9  	in_invoice_id	      IN NUMBER,
14:28:24  10  	in_transaction_id     IN NUMBER,
14:28:24  11  	in_instrument_type_id IN NUMBER,
14:28:24  12  	in_instrument_id      IN NUMBER,
14:28:24  13  	in_charge_amount      IN NUMBER,
14:28:24  14  	in_created_by	      IN VARCHAR2,
14:28:24  15  	in_charge_status_id   IN NUMBER,
14:28:24  16  	out_charge_id	      OUT NUMBER
14:28:24  17  ) AS
14:28:24  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
14:28:24  19  -- VARIABLES
14:28:24  20  temp_invoice_id	  NUMBER;
14:28:24  21  temp_transaction_id NUMBER;
14:28:24  22  var_new_charge_id   NUMBER;
14:28:24  23  -- EXCEPTIONS
14:28:24  24  BAD_INVOICE_ID	     EXCEPTION;
14:28:24  25  BAD_TRANSACTION_ID     EXCEPTION;
14:28:24  26  BAD_PAYPAL_ID	     EXCEPTION;
14:28:24  27  BAD_CREDIT_CARD_ID     EXCEPTION;
14:28:24  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
14:28:24  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
14:28:24  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24  31  BEGIN
14:28:24  32  	-- Check that incoming data is correct
14:28:24  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
14:28:24  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
14:28:24  35  	  RAISE BAD_INSTRUMENT_TYPE;
14:28:24  36  	END IF;
14:28:24  37  
14:28:24  38  	-- Check that status is correct
14:28:24  39  	IF in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_OPENED
14:28:24  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_PROCESSED
14:28:24  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_CANCELED THEN
14:28:24  42  	  RAISE BAD_CHARGE_STATUS_ID;
14:28:24  43  	END IF;
14:28:24  44  
14:28:24  45  	-- Check that invoice exists
14:28:24  46  	BEGIN
14:28:24  47  	  SELECT
14:28:24  48  	    INVOICE.ID into temp_invoice_id
14:28:24  49  	  FROM
14:28:24  50  	    INVOICE
14:28:24  51  	  WHERE
14:28:24  52  	    INVOICE.ID = in_invoice_id;
14:28:24  53  	  EXCEPTION
14:28:24  54  	    WHEN NO_DATA_FOUND THEN
14:28:24  55  	      RAISE BAD_INVOICE_ID;
14:28:24  56  	END;
14:28:24  57  
14:28:24  58  	-- Check that transaction exists
14:28:24  59  	BEGIN
14:28:24  60  	  SELECT
14:28:24  61  	    TRANSACTION.ID into temp_transaction_id
14:28:24  62  	  FROM
14:28:24  63  	    TRANSACTION
14:28:24  64  	  WHERE
14:28:24  65  	    TRANSACTION.ID = in_transaction_id;
14:28:24  66  	  EXCEPTION
14:28:24  67  	    WHEN NO_DATA_FOUND THEN
14:28:24  68  	      RAISE BAD_TRANSACTION_ID;
14:28:24  69  	END;
14:28:24  70  
14:28:24  71  	-- Check that instrument exists
14:28:24  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
14:28:24  73  	  IF PROCS_FIN_INSTRUMENTS_V23.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24  74  	    RAISE BAD_CREDIT_CARD_ID;
14:28:24  75  	  END IF;
14:28:24  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
14:28:24  77  	  IF PROCS_FIN_INSTRUMENTS_V23.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24  78  	    RAISE BAD_PAYPAL_ID;
14:28:24  79  	  END IF;
14:28:24  80  	END IF;
14:28:24  81  
14:28:24  82  	-- Create new charge
14:28:24  83  	PROCS_CHARGE_CRU_V23.CREATE_CHARGE(
14:28:24  84  	  out_charge_id 	=> var_new_charge_id,
14:28:24  85  	  in_invoice_id 	=> in_invoice_id,
14:28:24  86  	  in_transaction_id	=> in_transaction_id,
14:28:24  87  	  in_instrument_type_id => in_instrument_type_id,
14:28:24  88  	  in_instrument_id	=> in_instrument_id,
14:28:24  89  	  in_charge_amount	=> in_charge_amount,
14:28:24  90  	  in_charge_status_id	=> in_charge_status_id,
14:28:24  91  	  in_created_by 	=> in_created_by
14:28:24  92  	);
14:28:24  93  
14:28:24  94  	out_charge_id := var_new_charge_id;
14:28:24  95  
14:28:24  96  EXCEPTION
14:28:24  97  WHEN BAD_CHARGE_STATUS_ID THEN
14:28:24  98  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
14:28:24 100  WHEN BAD_INSTRUMENT_TYPE THEN
14:28:24 101  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 102  	  PROCS_NAME, 'Bad instrument type id');
14:28:24 103  WHEN BAD_INVOICE_ID THEN
14:28:24 104  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 105  	  PROCS_NAME, 'No such invoice');
14:28:24 106  WHEN BAD_TRANSACTION_ID THEN
14:28:24 107  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 108  	  PROCS_NAME, 'No such transaction');
14:28:24 109  WHEN BAD_PAYPAL_ID THEN
14:28:24 110  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 111  	  PROCS_NAME, 'No such paypal');
14:28:24 112  WHEN BAD_CREDIT_CARD_ID THEN
14:28:24 113  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 114  	  PROCS_NAME, 'No such credit card');
14:28:24 115  WHEN OTHERS THEN
14:28:24 116  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
14:28:24 118  END CREATE_CHARGE;
14:28:24 119  
14:28:24 120  /********************************************************/
14:28:24 121  -- norlov #38562 :
14:28:24 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
14:28:24 123  /*
14:28:24 124  Throws exceptions:
14:28:24 125  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 126  */
14:28:24 127  	out_result_set	    OUT SYS_REFCURSOR,
14:28:24 128  	in_row_number	    IN NUMBER DEFAULT NULL
14:28:24 129  ) AS
14:28:24 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
14:28:24 131  -- COMSTANTS
14:28:24 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
14:28:24 133  -- VARIABLES
14:28:24 134  var_row_number NUMBER;
14:28:24 135  BEGIN
14:28:24 136  	IF in_row_number IS NULL THEN
14:28:24 137  	  var_row_number := DEFAULT_ROW_NUMBER;
14:28:24 138  	ELSE
14:28:24 139  	  var_row_number := in_row_number;
14:28:24 140  	END IF;
14:28:24 141  
14:28:24 142  	-- Select charges
14:28:24 143  	OPEN out_result_set FOR
14:28:24 144  SELECT * FROM
14:28:24 145  (
14:28:24 146  	SELECT
14:28:24 147  	  CHARGE.ID,
14:28:24 148  	  CHARGE.TRANSACTION_ID,
14:28:24 149  	  CHARGE.INSTRUMENT_ID,
14:28:24 150  	  CHARGE.INSTRUMENT_TYPE_ID,
14:28:24 151  	  CHARGE.CHARGE_AMOUNT,
14:28:24 152  	  CHARGE.CREATE_DATE,
14:28:24 153  	  CHARGE.CREATED_BY,
14:28:24 154  	  CHARGE.INVOICE_ID
14:28:24 155  	FROM
14:28:24 156  	  CHARGE
14:28:24 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:28:24 158  	WHERE
14:28:24 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING
14:28:24 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V23.TRUE
14:28:24 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
14:28:24 162  	  AND NOT EXISTS
14:28:24 163  	  (
14:28:24 164  	    SELECT NULL
14:28:24 165  	    FROM PROCESS_RETRY_THROTTLE
14:28:24 166  	    WHERE PROCESS_NAME = SPROC_NAME
14:28:24 167  	      AND GENERIC_ID = CHARGE.ID
14:28:24 168  	  )
14:28:24 169  	  AND ROWNUM <= var_row_number*10
14:28:24 170  	  ORDER BY dbms_random.value
14:28:24 171  ) WHERE
14:28:24 172  	  ROWNUM <= var_row_number;
14:28:24 173  
14:28:24 174  END GET_PENDING_REFUND_CHARGES;
14:28:24 175  /******************************************************************************/
14:28:24 176  
14:28:24 177  PROCEDURE GET_UNPROCESSED_CHARGES (
14:28:24 178  /*
14:28:24 179  Throws exceptions:
14:28:24 180  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 181  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 182  */
14:28:24 183  	in_invoice_id  IN NUMBER,
14:28:24 184  	out_result_set OUT SYS_REFCURSOR
14:28:24 185  ) AS
14:28:24 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
14:28:24 187  -- VARIABLES
14:28:24 188  temp_invoice_id NUMBER;
14:28:24 189  -- EXCEPTIONS
14:28:24 190  BAD_INVOICE_ID EXCEPTION;
14:28:24 191  BEGIN
14:28:24 192  
14:28:24 193  	-- Check that invoice exists
14:28:24 194  	BEGIN
14:28:24 195  	  SELECT
14:28:24 196  	    INVOICE.ID into temp_invoice_id
14:28:24 197  	  FROM
14:28:24 198  	    INVOICE
14:28:24 199  	  WHERE
14:28:24 200  	    INVOICE.ID = in_invoice_id;
14:28:24 201  	  EXCEPTION
14:28:24 202  	    WHEN NO_DATA_FOUND THEN
14:28:24 203  	      RAISE BAD_INVOICE_ID;
14:28:24 204  	END;
14:28:24 205  
14:28:24 206  	-- Select charges
14:28:24 207  	OPEN out_result_set FOR
14:28:24 208  	SELECT
14:28:24 209  	  CHARGE.ID,
14:28:24 210  	  CHARGE.TRANSACTION_ID,
14:28:24 211  	  CHARGE.INSTRUMENT_ID,
14:28:24 212  	  CHARGE.INSTRUMENT_TYPE_ID,
14:28:24 213  	  CHARGE.CHARGE_AMOUNT,
14:28:24 214  	  CHARGE.CREATE_DATE,
14:28:24 215  	  CHARGE.CREATED_BY,
14:28:24 216  	  CHARGE.INVOICE_ID
14:28:24 217  	FROM
14:28:24 218  	  CHARGE
14:28:24 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:28:24 220  	WHERE
14:28:24 221  	  CHARGE.INVOICE_ID = in_invoice_id
14:28:24 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
14:28:24 223  	  AND
14:28:24 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING;
14:28:24 225  
14:28:24 226  EXCEPTION
14:28:24 227  WHEN BAD_INVOICE_ID THEN
14:28:24 228  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 229  	  SPROC_NAME, 'No such invoice');
14:28:24 230  WHEN OTHERS THEN
14:28:24 231  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 233  END GET_UNPROCESSED_CHARGES;
14:28:24 234  
14:28:24 235  /******************************************************************************/
14:28:24 236  
14:28:24 237  PROCEDURE GET_PROCESSED_CHARGES (
14:28:24 238  /*
14:28:24 239  Throws exceptions:
14:28:24 240  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 241  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 242  */
14:28:24 243  	in_invoice_id  IN NUMBER,
14:28:24 244  	out_result_set OUT SYS_REFCURSOR
14:28:24 245  ) AS
14:28:24 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
14:28:24 247  -- VARIABLES
14:28:24 248  temp_invoice_id NUMBER;
14:28:24 249  -- EXCEPTIONS
14:28:24 250  BAD_INVOICE_ID  EXCEPTION;
14:28:24 251  BEGIN
14:28:24 252  
14:28:24 253  	-- Check that invoice exists
14:28:24 254  	BEGIN
14:28:24 255  	  SELECT
14:28:24 256  	    INVOICE.ID into temp_invoice_id
14:28:24 257  	  FROM
14:28:24 258  	    INVOICE
14:28:24 259  	  WHERE
14:28:24 260  	    INVOICE.ID = in_invoice_id;
14:28:24 261  	  EXCEPTION
14:28:24 262  	    WHEN NO_DATA_FOUND THEN
14:28:24 263  	      RAISE BAD_INVOICE_ID;
14:28:24 264  	END;
14:28:24 265  
14:28:24 266  	-- Select charges
14:28:24 267  	OPEN out_result_set FOR
14:28:24 268  	SELECT /*+ STAR_TRANSFORMATION */
14:28:24 269  	  CHARGE.ID,
14:28:24 270  	  CHARGE.TRANSACTION_ID,
14:28:24 271  	  CHARGE.INSTRUMENT_ID,
14:28:24 272  	  CHARGE.INSTRUMENT_TYPE_ID,
14:28:24 273  	  CHARGE.CHARGE_AMOUNT,
14:28:24 274  	  CHARGE.CREATE_DATE,
14:28:24 275  	  CHARGE.CREATED_BY,
14:28:24 276  	  CHARGE.INVOICE_ID
14:28:24 277  	FROM
14:28:24 278  	  CHARGE
14:28:24 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:28:24 280  	WHERE
14:28:24 281  	  CHARGE.INVOICE_ID = in_invoice_id
14:28:24 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
14:28:24 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_CLOSED;
14:28:24 284  
14:28:24 285  EXCEPTION
14:28:24 286  WHEN BAD_INVOICE_ID THEN
14:28:24 287  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 288  	  SPROC_NAME, 'No such invoice');
14:28:24 289  WHEN OTHERS THEN
14:28:24 290  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 292  END GET_PROCESSED_CHARGES;
14:28:24 293  
14:28:24 294  /******************************************************************************/
14:28:24 295  
14:28:24 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
14:28:24 297  /*
14:28:24 298  Throws exceptions:
14:28:24 299  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 300  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 301  */
14:28:24 302  	in_charge_id	    IN NUMBER,
14:28:24 303  	out_subscription_id OUT NUMBER
14:28:24 304  ) AS
14:28:24 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
14:28:24 306  -- VARIABLES
14:28:24 307  var_invoice_id	  NUMBER;
14:28:24 308  var_subscription_id NUMBER;
14:28:24 309  -- EXCEPTIONS
14:28:24 310  BAD_CHARGE_ID		EXCEPTION;
14:28:24 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
14:28:24 312  BEGIN
14:28:24 313  
14:28:24 314  	BEGIN
14:28:24 315  	  SELECT
14:28:24 316  	    CHARGE.INVOICE_ID into var_invoice_id
14:28:24 317  	  FROM
14:28:24 318  	    CHARGE
14:28:24 319  	  WHERE
14:28:24 320  	    CHARGE.ID = in_charge_id;
14:28:24 321  	  EXCEPTION
14:28:24 322  	    WHEN NO_DATA_FOUND THEN
14:28:24 323  	      RAISE BAD_CHARGE_ID;
14:28:24 324  	END;
14:28:24 325  
14:28:24 326  	BEGIN
14:28:24 327  	  SELECT
14:28:24 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
14:28:24 329  	  FROM
14:28:24 330  	    LICENSE
14:28:24 331  	  WHERE
14:28:24 332  	    LICENSE.INVOICE_ID = var_invoice_id
14:28:24 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
14:28:24 334  	  EXCEPTION
14:28:24 335  	    WHEN NO_DATA_FOUND THEN
14:28:24 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
14:28:24 337  	END;
14:28:24 338  
14:28:24 339  	out_subscription_id := var_subscription_id;
14:28:24 340  
14:28:24 341  EXCEPTION
14:28:24 342  WHEN BAD_CHARGE_ID THEN
14:28:24 343  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 344  	  SPROC_NAME, 'No such charge');
14:28:24 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
14:28:24 346  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 347  	  SPROC_NAME, 'Could not find subscription for given charge');
14:28:24 348  WHEN OTHERS THEN
14:28:24 349  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
14:28:24 352  
14:28:24 353  /******************************************************************************/
14:28:24 354  
14:28:24 355  PROCEDURE UPDATE_CHARGE_STATUS (
14:28:24 356  /*
14:28:24 357  Throws exceptions:
14:28:24 358  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 359  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 360  */
14:28:24 361  	in_charge_id	    IN CHARGE.ID%TYPE,
14:28:24 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:28:24 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
14:28:24 364  ) AS
14:28:24 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
14:28:24 366  -- EXCEPTIONS
14:28:24 367  BAD_CHARGE_ID	     EXCEPTION;
14:28:24 368  BAD_STATUS_ID	     EXCEPTION;
14:28:24 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 370  BEGIN
14:28:24 371  
14:28:24 372  	IF in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_OPENED
14:28:24 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_PROCESSED
14:28:24 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V23.CHARGE_CANCELED THEN
14:28:24 375  	  RAISE BAD_STATUS_ID;
14:28:24 376  	END IF;
14:28:24 377  
14:28:24 378  	PROCS_CHARGE_CRU_V23.UPDATE_CHARGE(
14:28:24 379  	  in_charge_id	      => in_charge_id,
14:28:24 380  	  in_charge_status_id => in_charge_status_id,
14:28:24 381  	  in_updated_by       => in_updated_by
14:28:24 382  	);
14:28:24 383  
14:28:24 384  	IF SQL%ROWCOUNT = 0 THEN
14:28:24 385  	  RAISE BAD_CHARGE_ID;
14:28:24 386  	END IF;
14:28:24 387  
14:28:24 388  EXCEPTION
14:28:24 389  WHEN BAD_CHARGE_ID THEN
14:28:24 390  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 391  	  SPROC_NAME, 'No such charge');
14:28:24 392  WHEN BAD_STATUS_ID THEN
14:28:24 393  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 394  	  SPROC_NAME, 'Bad status id');
14:28:24 395  WHEN OTHERS THEN
14:28:24 396  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 398  END UPDATE_CHARGE_STATUS;
14:28:24 399  
14:28:24 400  FUNCTION IS_CHARGE_COLLECTED (
14:28:24 401  /*
14:28:24 402  Throws:
14:28:24 403  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 404  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 405  Returns:
14:28:24 406  GLOBAL_CONST.TRUE if transaction collected,
14:28:24 407  GLOBAL_CONST.FALSE else
14:28:24 408  */
14:28:24 409  	in_charge_id IN NUMBER
14:28:24 410  ) RETURN NUMBER AS
14:28:24 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
14:28:24 412  -- VARIABLES
14:28:24 413  var_transaction_id NUMBER;
14:28:24 414  is_transaction_collected NUMBER;
14:28:24 415  -- EXCEPTIONS
14:28:24 416  BAD_CHARGE_ID	       EXCEPTION;
14:28:24 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
14:28:24 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
14:28:24 419  BEGIN
14:28:24 420  
14:28:24 421  	BEGIN
14:28:24 422  	  SELECT
14:28:24 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
14:28:24 424  	  FROM
14:28:24 425  	    CHARGE
14:28:24 426  	  WHERE
14:28:24 427  	    CHARGE.ID = in_charge_id;
14:28:24 428  	  EXCEPTION
14:28:24 429  	    WHEN NO_DATA_FOUND THEN
14:28:24 430  	      RAISE BAD_CHARGE_ID;
14:28:24 431  	END;
14:28:24 432  
14:28:24 433  	BEGIN
14:28:24 434  	  is_transaction_collected := PROCS_TRANSACTION_V23.IS_TRANSACTION_COLLECTED(var_transaction_id);
14:28:24 435  	  EXCEPTION
14:28:24 436  	    WHEN OTHERS THEN
14:28:24 437  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
14:28:24 439  	END;
14:28:24 440  
14:28:24 441  	RETURN is_transaction_collected;
14:28:24 442  
14:28:24 443  EXCEPTION
14:28:24 444  WHEN BAD_CHARGE_ID THEN
14:28:24 445  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 446  	  SPROC_NAME, 'No such charge');
14:28:24 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
14:28:24 448  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
14:28:24 450  WHEN OTHERS THEN
14:28:24 451  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 453  END;
14:28:24 454  
14:28:24 455  PROCEDURE GET_COLLECTED_CHARGES (
14:28:24 456  /*
14:28:24 457  Throws exceptions:
14:28:24 458  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 459  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 460  */
14:28:24 461  	in_invoice_id  IN NUMBER,
14:28:24 462  	out_result_set OUT SYS_REFCURSOR
14:28:24 463  ) AS
14:28:24 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
14:28:24 465  -- VARIABLES
14:28:24 466  temp_invoice_id NUMBER;
14:28:24 467  -- EXCEPTIONS
14:28:24 468  BAD_INVOICE_ID  EXCEPTION;
14:28:24 469  BEGIN
14:28:24 470  
14:28:24 471  	-- Check that invoice exists
14:28:24 472  	BEGIN
14:28:24 473  	  SELECT
14:28:24 474  	    INVOICE.ID into temp_invoice_id
14:28:24 475  	  FROM
14:28:24 476  	    INVOICE
14:28:24 477  	  WHERE
14:28:24 478  	    INVOICE.ID = in_invoice_id;
14:28:24 479  	  EXCEPTION
14:28:24 480  	    WHEN NO_DATA_FOUND THEN
14:28:24 481  	      RAISE BAD_INVOICE_ID;
14:28:24 482  	END;
14:28:24 483  
14:28:24 484  	-- Select charges
14:28:24 485  	OPEN out_result_set FOR
14:28:24 486  	SELECT
14:28:24 487  	  CHARGE.ID,
14:28:24 488  	  CHARGE.TRANSACTION_ID,
14:28:24 489  	  CHARGE.INSTRUMENT_ID,
14:28:24 490  	  CHARGE.INSTRUMENT_TYPE_ID,
14:28:24 491  	  CHARGE.CHARGE_AMOUNT,
14:28:24 492  	  CHARGE.CREATE_DATE,
14:28:24 493  	  CHARGE.CREATED_BY,
14:28:24 494  	  CHARGE.INVOICE_ID
14:28:24 495  	FROM
14:28:24 496  	  CHARGE
14:28:24 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:28:24 498  	WHERE
14:28:24 499  	  CHARGE.INVOICE_ID = in_invoice_id
14:28:24 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V23.CHARGE_PROCESSED FROM DUAL)
14:28:24 501  	  AND PROCS_CHARGE_V23.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 502  
14:28:24 503  EXCEPTION
14:28:24 504  WHEN BAD_INVOICE_ID THEN
14:28:24 505  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 506  	  SPROC_NAME, 'No such invoice');
14:28:24 507  WHEN OTHERS THEN
14:28:24 508  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 510  END GET_COLLECTED_CHARGES;
14:28:24 511  
14:28:24 512  END PROCS_CHARGE_V23;
14:28:24 513  .
14:28:24 SQL> /

Package body created.

Elapsed: 00:00:00.05
14:28:24 SQL> 
14:28:24 SQL> prompt Compiling body for procs_subscription.sql
Compiling body for procs_subscription.sql
14:28:24 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V23" AS
14:28:24   2  
14:28:24   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
14:28:24   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
14:28:24   5  	in_updater	     IN VARCHAR2,
14:28:24   6  	in_duration_in_hours IN NUMBER
14:28:24   7  ) AS
14:28:24   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
14:28:24   9  var_subs_id	  SUBSCRIPTION.ID%TYPE;
14:28:24  10  var_lic_id	  LICENSE.ID%TYPE;
14:28:24  11  var_grace_start	  DATE;
14:28:24  12  var_grace_end	  DATE;
14:28:24  13  BEGIN
14:28:24  14  	SELECT
14:28:24  15  	  ID,
14:28:24  16  	  SUBSCRIPTION_ID,
14:28:24  17  	  START_DATE,
14:28:24  18  	  START_DATE + (in_duration_in_hours / 24)
14:28:24  19  	INTO var_lic_id, var_subs_id, var_grace_start, var_grace_end
14:28:24  20  	FROM
14:28:24  21  	  LICENSE
14:28:24  22  	WHERE
14:28:24  23  	  INVOICE_ID = in_invoice_id
14:28:24  24  	  AND ROWNUM <= 1;
14:28:24  25  
14:28:24  26  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:24  27  	    in_license_id	    => var_lic_id,
14:28:24  28  	    in_updated_by	    => in_updater,
14:28:24  29  	    in_grace_start_date     => var_grace_start,
14:28:24  30  	    in_grace_end_date	    => var_grace_end,
14:28:24  31  	    in_entitlement_end_date => var_grace_end,
14:28:24  32  	    in_license_status_id    => GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD
14:28:24  33  	);
14:28:24  34  
14:28:24  35  	PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
14:28:24  36  	    in_subscription_id	      => var_subs_id,
14:28:24  37  	    in_updated_by	      => in_updater,
14:28:24  38  	    in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD
14:28:24  39  	  );
14:28:24  40  END START_GRACE_BY_INVOICE_ID;
14:28:24  41  
14:28:24  42  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
14:28:24  43  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
14:28:24  44  	in_updater    IN VARCHAR2
14:28:24  45  ) AS
14:28:24  46  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
14:28:24  47  var_subs_id	  SUBSCRIPTION.ID%TYPE;
14:28:24  48  var_lic_id	  LICENSE.ID%TYPE;
14:28:24  49  var_lic_end_date	  DATE;
14:28:24  50  BEGIN
14:28:24  51  	SELECT
14:28:24  52  	  ID,
14:28:24  53  	  SUBSCRIPTION_ID,
14:28:24  54  	  END_DATE
14:28:24  55  	INTO var_lic_id, var_subs_id, var_lic_end_date
14:28:24  56  	FROM
14:28:24  57  	  LICENSE
14:28:24  58  	WHERE
14:28:24  59  	  INVOICE_ID = in_invoice_id
14:28:24  60  	  AND ROWNUM <= 1;
14:28:24  61  
14:28:24  62  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:24  63  	    in_license_id	    => var_lic_id,
14:28:24  64  	    in_updated_by	    => in_updater,
14:28:24  65  	    in_grace_end_date	    => SYSDATE,
14:28:24  66  	    in_entitlement_end_date => var_lic_end_date,
14:28:24  67  	    in_license_status_id    => GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:24  68  	);
14:28:24  69  
14:28:24  70  	PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
14:28:24  71  	    in_subscription_id	      => var_subs_id,
14:28:24  72  	    in_updated_by	      => in_updater,
14:28:24  73  	    in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24  74  	);
14:28:24  75  END STOP_GRACE_BY_INVOICE_ID;
14:28:24  76  
14:28:24  77  
14:28:24  78  PROCEDURE START_SUBSCRIPTION_CREATION (
14:28:24  79  	in_group_id	      IN NUMBER,
14:28:24  80  	in_created_by	      IN VARCHAR2,
14:28:24  81  	in_offer_chain_id     IN NUMBER,
14:28:24  82  	in_instrument_type_id IN NUMBER,
14:28:24  83  	in_instrument_id      IN NUMBER,
14:28:24  84  	in_agent_id	      IN NUMBER,
14:28:24  85  	in_note 	      IN VARCHAR2,
14:28:24  86  	out_subscription_id   OUT NUMBER,
14:28:24  87  	out_invoice_id	      OUT NUMBER,
14:28:24  88  	out_new_license_id    OUT NUMBER,
14:28:24  89  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.TRUE
14:28:24  90  ) AS
14:28:24  91  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
14:28:24  92  -- VARIABLES
14:28:24  93  var_account_id		 NUMBER;
14:28:24  94  var_account_status	 NUMBER;
14:28:24  95  var_offer_chain_status_id  NUMBER;
14:28:24  96  var_is_gift_certificate	 NUMBER;
14:28:24  97  var_is_for_redemption	 NUMBER;
14:28:24  98  var_same_offer_chains_num  NUMBER;
14:28:24  99  var_max_concurrent_subscrs NUMBER;
14:28:24 100  var_first_offer_id	 NUMBER;
14:28:24 101  var_new_invoice_id	 NUMBER;
14:28:24 102  var_new_subscription_id	 NUMBER;
14:28:24 103  var_date			 DATE := SYSDATE;
14:28:24 104  var_account_tax_exempt_id  VARCHAR2(255);
14:28:24 105  var_concur_subscription_id NUMBER;
14:28:24 106  -- EXCEPTIONS
14:28:24 107  BAD_GROUP_ID		    EXCEPTION;
14:28:24 108  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
14:28:24 109  BAD_OFFER_CHAIN		    EXCEPTION;
14:28:24 110  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
14:28:24 111  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
14:28:24 112  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
14:28:24 113  LIMIT_REACHED		    EXCEPTION;
14:28:24 114  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
14:28:24 115  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
14:28:24 116  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
14:28:24 117  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
14:28:24 118  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
14:28:24 119  CAN_NOT_CREATE_NOTE	    EXCEPTION;
14:28:24 120  
14:28:24 121  EXCEPTION_MESSAGE VARCHAR2(1024);
14:28:24 122  BEGIN
14:28:24 123  
14:28:24 124  	-- Get account id and status
14:28:24 125  	BEGIN
14:28:24 126  	  SELECT
14:28:24 127  	    ACCOUNT.ID,
14:28:24 128  	    ACCOUNT.ACCOUNT_STATUS_ID,
14:28:24 129  	    ACCOUNT.TAX_EXEMPT_ID
14:28:24 130  	    into
14:28:24 131  	    var_account_id,
14:28:24 132  	    var_account_status,
14:28:24 133  	    var_account_tax_exempt_id
14:28:24 134  	  FROM
14:28:24 135  	    ACCOUNT
14:28:24 136  	  WHERE
14:28:24 137  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 138  	  EXCEPTION
14:28:24 139  	  WHEN NO_DATA_FOUND THEN
14:28:24 140  	    RAISE BAD_GROUP_ID;
14:28:24 141  	END;
14:28:24 142  
14:28:24 143  	-- Could not create subscription for disabled account
14:28:24 144  	IF var_account_status = GLOBAL_STATUSES_V23.ACCOUNT_DISABLED THEN
14:28:24 145  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
14:28:24 146  	END IF;
14:28:24 147  
14:28:24 148  	-- Get offer chain status
14:28:24 149  	BEGIN
14:28:24 150  	  SELECT
14:28:24 151  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
14:28:24 152  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
14:28:24 153  	    into
14:28:24 154  	    var_offer_chain_status_id,
14:28:24 155  	    var_is_gift_certificate
14:28:24 156  	  FROM
14:28:24 157  	    OFFER_CHAIN
14:28:24 158  	  WHERE
14:28:24 159  	    OFFER_CHAIN.ID = in_offer_chain_id;
14:28:24 160  
14:28:24 161  	  EXCEPTION
14:28:24 162  	    WHEN NO_DATA_FOUND THEN
14:28:24 163  	      RAISE BAD_OFFER_CHAIN;
14:28:24 164  	END;
14:28:24 165  
14:28:24 166  	-- Could not subscribe to inactive/disabled offer chain
14:28:24 167  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE THEN
14:28:24 168  	  RAISE BAD_OFFER_CHAIN_STATUS;
14:28:24 169  	END IF;
14:28:24 170  
14:28:24 171  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
14:28:24 172  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V23.TRUE THEN
14:28:24 173  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
14:28:24 174  	END IF;
14:28:24 175  
14:28:24 176  	-- check if the OC is for Redemption:
14:28:24 177  	SELECT
14:28:24 178  	  COUNT(*) into var_is_for_redemption
14:28:24 179  	FROM
14:28:24 180  	  OFFER_CHAIN_ELIGIBILITY
14:28:24 181  	WHERE
14:28:24 182  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 183  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V23.GIFT_CERTIFICATE_REQUIRED
14:28:24 184  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V23.ELIGIBILITY_FLAG_SET;
14:28:24 185  
14:28:24 186  	IF var_is_for_redemption > 0 THEN
14:28:24 187  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
14:28:24 188  	END IF;
14:28:24 189  
14:28:24 190  	SELECT
14:28:24 191  	  COUNT(*) into var_same_offer_chains_num
14:28:24 192  	FROM
14:28:24 193  	  SUBSCRIPTION
14:28:24 194  	WHERE
14:28:24 195  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:24 196  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 197  	  AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 198  	       OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
14:28:24 199  
14:28:24 200  	-- ELIGIBILITY LOGIC CHANGED TO:
14:28:24 201  	-- FOR EACH offer chain eligibility rule in OC:
14:28:24 202  	--   IF offer chain eligibility rule fails:
14:28:24 203  	--     deny purchase;
14:28:24 204  	--   END IF
14:28:24 205  	-- END FOR
14:28:24 206  	-- FOR EACH product eligibility rule in OC:
14:28:24 207  	--   IF product eligibilty rule fails:
14:28:24 208  	--     deny purchase;
14:28:24 209  	--   END IF
14:28:24 210  	-- END FOR
14:28:24 211  	-- allow purchase;
14:28:24 212  
14:28:24 213  	-- if user have any active existing subscriptions to the offer chain
14:28:24 214  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
14:28:24 215  	-- then deny purchase
14:28:24 216  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
14:28:24 217  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V23.INFINITY
14:28:24 218  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
14:28:24 219  	  -- Find first concurrent subscription id:
14:28:24 220  	  SELECT
14:28:24 221  	    ID into var_concur_subscription_id
14:28:24 222  	  FROM (
14:28:24 223  	    SELECT
14:28:24 224  	      ID
14:28:24 225  	    FROM
14:28:24 226  	      SUBSCRIPTION
14:28:24 227  	    WHERE
14:28:24 228  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:24 229  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 230  	      AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 231  		   OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
14:28:24 232  	    ORDER BY
14:28:24 233  	      ID
14:28:24 234  	  )
14:28:24 235  	  WHERE
14:28:24 236  	    ROWNUM <= 1;
14:28:24 237  	  RAISE LIMIT_REACHED;
14:28:24 238  	END IF;
14:28:24 239  
14:28:24 240  	-- if user does not have any active existing subscriptions to the offer chain
14:28:24 241  	-- and if product from the offer chain is already owned from another offer chain
14:28:24 242  	-- then deny purchase
14:28:24 243  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V23.FALSE) THEN
14:28:24 244  	  FOR f_account_offer_chains IN (
14:28:24 245  	    SELECT DISTINCT
14:28:24 246  	      OFFER_CHAIN_ID
14:28:24 247  	    FROM
14:28:24 248  	      SUBSCRIPTION
14:28:24 249  	    WHERE
14:28:24 250  	      ACCOUNT_ID = var_account_id
14:28:24 251  	      AND (
14:28:24 252  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 253  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
14:28:24 254  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
14:28:24 255  	  )
14:28:24 256  	  LOOP
14:28:24 257  	    IF PROCS_OFFER_CHAIN_V23.CHECK_FOR_SAME_PRODUCTS(
14:28:24 258  	      in_offer_chain_1	       => in_offer_chain_id,
14:28:24 259  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
14:28:24 260  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V23.TRUE
14:28:24 261  	    ) = GLOBAL_CONSTANTS_V23.TRUE THEN
14:28:24 262  
14:28:24 263  	      -- Find first concurrent subscription id:
14:28:24 264  	      SELECT
14:28:24 265  		ID into var_concur_subscription_id
14:28:24 266  	      FROM (
14:28:24 267  		SELECT
14:28:24 268  		  ID
14:28:24 269  		FROM
14:28:24 270  		  SUBSCRIPTION
14:28:24 271  		WHERE
14:28:24 272  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:24 273  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
14:28:24 274  		  AND (
14:28:24 275  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 276  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
14:28:24 277  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
14:28:24 278  		ORDER BY
14:28:24 279  		  ID
14:28:24 280  	      )
14:28:24 281  	      WHERE
14:28:24 282  		ROWNUM <= 1;
14:28:24 283  
14:28:24 284  	      RAISE PRODUCT_ALREADY_PURCHASED;
14:28:24 285  	    END IF;
14:28:24 286  	  END LOOP;
14:28:24 287  	END IF;
14:28:24 288  
14:28:24 289  	BEGIN
14:28:24 290  	  PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
14:28:24 291  	  EXCEPTION
14:28:24 292  	    WHEN OTHERS THEN
14:28:24 293  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 294  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
14:28:24 295  	END;
14:28:24 296  
14:28:24 297  	BEGIN
14:28:24 298  	  PROCS_INVOICE_V23.CREATE_INVOICE(
14:28:24 299  	    in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_OPEN,
14:28:24 300  	    in_created_by     => in_created_by,
14:28:24 301  	    in_tax_exempt_id  => var_account_tax_exempt_id,
14:28:24 302  	    out_invoice_id    => var_new_invoice_id
14:28:24 303  	  );
14:28:24 304  	  EXCEPTION
14:28:24 305  	    WHEN OTHERS THEN
14:28:24 306  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 307  	      RAISE CAN_NOT_CREATE_INVOICE;
14:28:24 308  	END;
14:28:24 309  
14:28:24 310  	BEGIN
14:28:24 311  	  PROCS_LINE_ITEMS_V23.ADD_LINE_ITEMS(
14:28:24 312  	    in_invoice_id => var_new_invoice_id,
14:28:24 313  	    in_offer_id   => var_first_offer_id,
14:28:24 314  	    in_created_by => in_created_by
14:28:24 315  	  );
14:28:24 316  	  EXCEPTION
14:28:24 317  	    WHEN OTHERS THEN
14:28:24 318  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 319  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
14:28:24 320  	END;
14:28:24 321  
14:28:24 322  	PROCS_SUBSCRIPTION_CRU_V23.CREATE_SUBSCRIPTION(
14:28:24 323  	  out_subscription_id	    => var_new_subscription_id,
14:28:24 324  	  in_account_id 	    => var_account_id,
14:28:24 325  	  in_purchase_date	    => var_date,
14:28:24 326  	  in_offer_chain_id	    => in_offer_chain_id,
14:28:24 327  	  in_created_by 	    => in_created_by,
14:28:24 328  	  in_instrument_type_id     => in_instrument_type_id,
14:28:24 329  	  in_instrument_id	    => in_instrument_id,
14:28:24 330  	  in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 331  	);
14:28:24 332  
14:28:24 333  	BEGIN
14:28:24 334  	  PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
14:28:24 335  	    in_subscription_id => var_new_subscription_id,
14:28:24 336  	    in_agent_id        => in_agent_id,
14:28:24 337  	    in_note	       => in_note,
14:28:24 338  	    in_created_by      => in_created_by
14:28:24 339  	  );
14:28:24 340  	  EXCEPTION
14:28:24 341  	   WHEN OTHERS THEN
14:28:24 342  	     EXCEPTION_MESSAGE := SQLERRM;
14:28:24 343  	     RAISE CAN_NOT_CREATE_NOTE;
14:28:24 344  	END;
14:28:24 345  
14:28:24 346  	BEGIN
14:28:24 347  	  PROCS_LICENSE_V23.CREATE_LICENSE(
14:28:24 348  	    in_status_id		=> GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
14:28:24 349  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 350  	    in_start_date		=> var_date,
14:28:24 351  	    in_end_date 		=> NULL, -- Will be calculated automatically
14:28:24 352  	    in_offer_id 		=> var_first_offer_id,
14:28:24 353  	    in_subscription_id		=> var_new_subscription_id,
14:28:24 354  	    in_invoice_id		=> var_new_invoice_id,
14:28:24 355  	    in_created_by		=> in_created_by,
14:28:24 356  	    in_is_extension		=> GLOBAL_CONSTANTS_V23.FALSE,
14:28:24 357  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
14:28:24 358  	    in_current_offer_recurr_num => 1,
14:28:24 359  	    out_license_id		=> out_new_license_id
14:28:24 360  	  );
14:28:24 361  	  EXCEPTION
14:28:24 362  	    WHEN OTHERS THEN
14:28:24 363  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 364  	      RAISE CAN_NOT_CREATE_LICENSE;
14:28:24 365  	END;
14:28:24 366  
14:28:24 367  	out_subscription_id := var_new_subscription_id;
14:28:24 368  	out_invoice_id := var_new_invoice_id;
14:28:24 369  
14:28:24 370  EXCEPTION
14:28:24 371  WHEN BAD_OFFER_CHAIN_STATUS THEN
14:28:24 372  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 373  	  SPROC_NAME, 'Offer chain is not active');
14:28:24 374  WHEN LIMIT_REACHED THEN
14:28:24 375  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.CONFLICT_ERROR,
14:28:24 376  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
14:28:24 377  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
14:28:24 378  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 379  	  SPROC_NAME, 'Can not create subsscription for disabled account');
14:28:24 380  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
14:28:24 381  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 382  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
14:28:24 383  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
14:28:24 384  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 385  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
14:28:24 386  WHEN BAD_OFFER_CHAIN THEN
14:28:24 387  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 388  	  SPROC_NAME, 'No such offer chain');
14:28:24 389  WHEN PRODUCT_ALREADY_PURCHASED THEN
14:28:24 390  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.CONFLICT_ERROR,
14:28:24 391  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
14:28:24 392  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
14:28:24 393  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 394  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
14:28:24 395  WHEN CAN_NOT_CREATE_INVOICE THEN
14:28:24 396  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 397  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
14:28:24 398  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
14:28:24 399  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 400  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
14:28:24 401  WHEN CAN_NOT_CREATE_LICENSE THEN
14:28:24 402  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 403  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
14:28:24 404  WHEN BAD_GROUP_ID THEN
14:28:24 405  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 406  	  SPROC_NAME, 'Bad group id');
14:28:24 407  WHEN CAN_NOT_CREATE_NOTE THEN
14:28:24 408  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 409  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:28:24 410  WHEN OTHERS THEN
14:28:24 411  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 412  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 413  END START_SUBSCRIPTION_CREATION;
14:28:24 414  
14:28:24 415  /******************************************************************************/
14:28:24 416  
14:28:24 417  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
14:28:24 418  	in_subscription_id    IN NUMBER,
14:28:24 419  	in_invoice_id	      IN NUMBER,
14:28:24 420  	in_instrument_type_id IN NUMBER,
14:28:24 421  	in_instrument_id      IN NUMBER,
14:28:24 422  	in_created_by	      IN VARCHAR2
14:28:24 423  ) AS
14:28:24 424  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
14:28:24 425  -- VARIABLES
14:28:24 426  var_invoice_amount     NUMBER(10, 2);
14:28:24 427  var_new_transaction_id NUMBER;
14:28:24 428  var_new_charge_id      NUMBER;
14:28:24 429  -- EXCEPTIONS
14:28:24 430  CAN_NOT_USE_FCINSTR	  EXCEPTION;
14:28:24 431  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
14:28:24 432  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
14:28:24 433  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
14:28:24 434  
14:28:24 435  EXCEPTION_MESSAGE VARCHAR2(1024);
14:28:24 436  BEGIN
14:28:24 437  
14:28:24 438  	-- Calculate invoice amount ( + discounts, taxes)
14:28:24 439  	BEGIN
14:28:24 440  	  PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT(
14:28:24 441  	    in_invoice_id => in_invoice_id,
14:28:24 442  	    out_amount	  => var_invoice_amount
14:28:24 443  	  );
14:28:24 444  	  EXCEPTION
14:28:24 445  	   WHEN OTHERS THEN
14:28:24 446  	     EXCEPTION_MESSAGE := SQLERRM;
14:28:24 447  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:28:24 448  	END;
14:28:24 449  
14:28:24 450  	IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT
14:28:24 451  	  AND var_invoice_amount > 0 THEN
14:28:24 452  	  RAISE CAN_NOT_USE_FCINSTR;
14:28:24 453  	END IF;
14:28:24 454  
14:28:24 455  	IF var_invoice_amount = 0 THEN
14:28:24 456  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
14:28:24 457  	  PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
14:28:24 458  	    in_invoice_id		   => in_invoice_id,
14:28:24 459  	    in_updated_by		   => in_created_by,
14:28:24 460  	    in_invoice_status_id	   => GLOBAL_STATUSES_V23.INVOICE_CLOSED
14:28:24 461  	  );
14:28:24 462  	ELSE
14:28:24 463  	  -- Create transaction and charge
14:28:24 464  	  BEGIN
14:28:24 465  	    PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
14:28:24 466  	      in_transaction_id 	=> NULL,
14:28:24 467  	      in_status_id		=> GLOBAL_STATUSES_V23.TRANSACTION_PENDING,
14:28:24 468  	      in_amount 		=> var_invoice_amount,
14:28:24 469  	      in_created_by		=> in_created_by,
14:28:24 470  	      in_order_id		=> NULL,
14:28:24 471  	      in_transaction_type_code	=> 'START_SUBSCRIPTION',
14:28:24 472  	      out_transaction_id	=> var_new_transaction_id
14:28:24 473  	    );
14:28:24 474  	    EXCEPTION
14:28:24 475  	      WHEN OTHERS THEN
14:28:24 476  		EXCEPTION_MESSAGE := SQLERRM;
14:28:24 477  		RAISE CAN_NOT_CREATE_TRANSACTION;
14:28:24 478  	  END;
14:28:24 479  
14:28:24 480  	  BEGIN
14:28:24 481  	    PROCS_CHARGE_V23.CREATE_CHARGE(
14:28:24 482  	      in_invoice_id	    => in_invoice_id,
14:28:24 483  	      in_transaction_id     => var_new_transaction_id,
14:28:24 484  	      in_instrument_type_id => in_instrument_type_id,
14:28:24 485  	      in_instrument_id	    => in_instrument_id,
14:28:24 486  	      in_charge_amount	    => var_invoice_amount,
14:28:24 487  	      in_created_by	    => in_created_by,
14:28:24 488  	      in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
14:28:24 489  	      out_charge_id	    => var_new_charge_id
14:28:24 490  	    );
14:28:24 491  	    EXCEPTION
14:28:24 492  	      WHEN OTHERS THEN
14:28:24 493  		EXCEPTION_MESSAGE := SQLERRM;
14:28:24 494  		RAISE CAN_NOT_CREATE_CHARGE;
14:28:24 495  	  END;
14:28:24 496  	END IF;
14:28:24 497  
14:28:24 498  EXCEPTION
14:28:24 499  WHEN CAN_NOT_USE_FCINSTR THEN
14:28:24 500  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 501  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
14:28:24 502  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:28:24 503  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 504  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
14:28:24 505  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:28:24 506  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 507  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:28:24 508  WHEN CAN_NOT_CREATE_CHARGE THEN
14:28:24 509  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 510  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:28:24 511  WHEN OTHERS THEN
14:28:24 512  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 513  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 514  END FINALIZE_SUBSCRIPTION_CREATION;
14:28:24 515  
14:28:24 516  /******************************************************************************/
14:28:24 517  
14:28:24 518  PROCEDURE SUSPEND_SUBSCRIPTION(
14:28:24 519  /*
14:28:24 520  Throws exceptions:
14:28:24 521  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 522  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:24 523  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 524  */
14:28:24 525  	  in_subs_id	IN NUMBER,
14:28:24 526  	  in_updated_by IN VARCHAR2
14:28:24 527  ) AS
14:28:24 528  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
14:28:24 529  var_subscription_status_id  NUMBER;
14:28:24 530  var_license_id		  NUMBER;
14:28:24 531  var_offer_id		  NUMBER;
14:28:24 532  var_license_start_date	  DATE;
14:28:24 533  var_license_end_date	  DATE;
14:28:24 534  
14:28:24 535  var_entitlement_dupration   VARCHAR2(30);
14:28:24 536  var_d_entitlement_dupration NUMBER;
14:28:24 537  
14:28:24 538  var_ym_interval INTERVAL YEAR TO MONTH;
14:28:24 539  var_ds_interval INTERVAL DAY(3) TO SECOND;
14:28:24 540  
14:28:24 541  -- EXCEPTIONS
14:28:24 542  BAD_SUBSCRIPTION_ID     EXCEPTION;
14:28:24 543  BAD_SUBSCRIPTION_STATUS EXCEPTION;
14:28:24 544  NO_LICENSE_FOUND	      EXCEPTION;
14:28:24 545  NO_OFFER_FOUND	      EXCEPTION;
14:28:24 546  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:28:24 547  BEGIN
14:28:24 548  	-- TODO: Finish this prcedure (in Phase II)
14:28:24 549  
14:28:24 550  	-- Get subscription by id. FAULT if no such subscription.
14:28:24 551  	-- begin TX
14:28:24 552  	--   Get for update associated license (subscription.license_id). FAULT if not found.
14:28:24 553  	--   Set status to PROCESSED.
14:28:24 554  	--   updated record.
14:28:24 555  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
14:28:24 556  	--   new subscription status is SUSPENDED.
14:28:24 557  	--   suspend_date is now.
14:28:24 558  	--   update subscription record.
14:28:24 559  	-- end TX
14:28:24 560  
14:28:24 561  	BEGIN
14:28:24 562  	  SELECT
14:28:24 563  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
14:28:24 564  	  FROM
14:28:24 565  	    SUBSCRIPTION
14:28:24 566  	  WHERE
14:28:24 567  	    SUBSCRIPTION.ID = in_subs_id;
14:28:24 568  	  EXCEPTION
14:28:24 569  	  WHEN NO_DATA_FOUND THEN
14:28:24 570  	    RAISE BAD_SUBSCRIPTION_ID;
14:28:24 571  	END;
14:28:24 572  
14:28:24 573  	IF var_subscription_status_id != GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE THEN
14:28:24 574  	  RAISE BAD_SUBSCRIPTION_STATUS;
14:28:24 575  	END IF;
14:28:24 576  
14:28:24 577  	BEGIN
14:28:24 578  	  SELECT
14:28:24 579  	    LICENSE.ID,
14:28:24 580  	    LICENSE.OFFER_ID,
14:28:24 581  	    LICENSE.START_DATE
14:28:24 582  	    into
14:28:24 583  	    var_license_id,
14:28:24 584  	    var_offer_id,
14:28:24 585  	    var_license_start_date
14:28:24 586  	  FROM
14:28:24 587  	    LICENSE
14:28:24 588  	  WHERE
14:28:24 589  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
14:28:24 590  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE;
14:28:24 591  	  EXCEPTION
14:28:24 592  	  WHEN NO_DATA_FOUND THEN
14:28:24 593  	    RAISE NO_LICENSE_FOUND;
14:28:24 594  	END;
14:28:24 595  
14:28:24 596  	PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:24 597  	  in_license_id        => var_license_id,
14:28:24 598  	  in_updated_by        => in_updated_by,
14:28:24 599  	  in_license_status_id => GLOBAL_STATUSES_V23.LICENSE_CLOSED
14:28:24 600  	);
14:28:24 601  
14:28:24 602  	BEGIN
14:28:24 603  	  SELECT
14:28:24 604  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
14:28:24 605  	  FROM
14:28:24 606  	    OFFER
14:28:24 607  	  WHERE
14:28:24 608  	    OFFER.ID = var_offer_id;
14:28:24 609  	  EXCEPTION
14:28:24 610  	  WHEN NO_DATA_FOUND THEN
14:28:24 611  	    RAISE NO_OFFER_FOUND;
14:28:24 612  	END;
14:28:24 613  
14:28:24 614  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
14:28:24 615  	var_ds_interval := substr(var_entitlement_dupration, 4);
14:28:24 616  
14:28:24 617  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
14:28:24 618  
14:28:24 619  	var_d_entitlement_dupration := var_license_end_date - current_date;
14:28:24 620  
14:28:24 621  	PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
14:28:24 622  	  in_subscription_id	       => in_subs_id,
14:28:24 623  	  in_updated_by 	       => in_updated_by,
14:28:24 624  	  in_suspend_date	       => SYSDATE,
14:28:24 625  	  in_subscription_status_id    => GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED,
14:28:24 626  	  in_days_remainning_ajustment => var_d_entitlement_dupration
14:28:24 627  	);
14:28:24 628  
14:28:24 629  EXCEPTION
14:28:24 630  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 631  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 632  	  SPROC_NAME, 'No such subscription');
14:28:24 633  WHEN BAD_SUBSCRIPTION_STATUS THEN
14:28:24 634  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 635  	  SPROC_NAME, 'Subscription is not active');
14:28:24 636  WHEN NO_LICENSE_FOUND THEN
14:28:24 637  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 638  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
14:28:24 639  WHEN NO_OFFER_FOUND THEN
14:28:24 640  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 641  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
14:28:24 642  WHEN OTHERS THEN
14:28:24 643  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 644  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 645  END SUSPEND_SUBSCRIPTION;
14:28:24 646  
14:28:24 647  /******************************************************************************/
14:28:24 648  
14:28:24 649  PROCEDURE REACTIVATE_SUBSCRIPTION (
14:28:24 650  	in_subscription_id IN  NUMBER,
14:28:24 651  	in_updated_by	   IN  VARCHAR2
14:28:24 652  ) AS
14:28:24 653  BEGIN
14:28:24 654  	-- TODO: finish this function (in Phase II)
14:28:24 655  	NULL;
14:28:24 656  END REACTIVATE_SUBSCRIPTION;
14:28:24 657  
14:28:24 658  /******************************************************************************/
14:28:24 659  
14:28:24 660  PROCEDURE GET_SUBSCRIPTION_INFO (
14:28:24 661  	  in_subscription_id  IN  NUMBER,
14:28:24 662  	  out_result_set      OUT SYS_REFCURSOR
14:28:24 663  ) AS
14:28:24 664  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
14:28:24 665  -- VARIABLES
14:28:24 666  temp_subscription_id NUMBER;
14:28:24 667  -- EXCEPTIONS
14:28:24 668  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 669  BEGIN
14:28:24 670  	-- Find subscription by id
14:28:24 671  	-- Return its details
14:28:24 672  
14:28:24 673  	BEGIN
14:28:24 674  	  SELECT
14:28:24 675  	    SUBSCRIPTION.ID into temp_subscription_id
14:28:24 676  	  FROM
14:28:24 677  	    SUBSCRIPTION
14:28:24 678  	  WHERE
14:28:24 679  	    SUBSCRIPTION.ID = in_subscription_id;
14:28:24 680  	  EXCEPTION
14:28:24 681  	    WHEN NO_DATA_FOUND THEN
14:28:24 682  	      RAISE BAD_SUBSCRIPTION_ID;
14:28:24 683  	END;
14:28:24 684  
14:28:24 685  	OPEN out_result_set FOR
14:28:24 686  	SELECT
14:28:24 687  	  SUBSCRIPTION.ACCOUNT_ID,
14:28:24 688  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
14:28:24 689  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
14:28:24 690  	  SUBSCRIPTION.PURCHASE_DATE,
14:28:24 691  	  SUBSCRIPTION.SUSPEND_DATE,
14:28:24 692  	  SUBSCRIPTION.REACTIVATION_DATE,
14:28:24 693  	  SUBSCRIPTION.CANCELLATION_DATE,
14:28:24 694  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
14:28:24 695  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
14:28:24 696  	  OFFER_CHAIN.NAME,
14:28:24 697  	  OFFER_CHAIN.DESCRIPTION,
14:28:24 698  	  OFFER_CHAIN.PRODUCT_URI,
14:28:24 699  	  SUBSCRIPTION.INSTRUMENT_ID,
14:28:24 700  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
14:28:24 701  	  PROCS_SUBSCRIPTION_V23.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
14:28:24 702  	  PROCS_SUBSCRIPTION_V23.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
14:28:24 703  	  PROCS_SUBSCRIPTION_V23.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
14:28:24 704  	  PROCS_SUBSCRIPTION_V23.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
14:28:24 705  	  (
14:28:24 706  	    SELECT
14:28:24 707  	      ACCOUNT.GROUP_ID
14:28:24 708  	      FROM ACCOUNT
14:28:24 709  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
14:28:24 710  	  ) as "GROUP_ID",
14:28:24 711  	  (
14:28:24 712  	    SELECT
14:28:24 713  	      MAX(ENTITLEMENT_END_DATE)
14:28:24 714  	      FROM LICENSE
14:28:24 715  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 716  	  )
14:28:24 717  	  as "ENT_END_DATE",
14:28:24 718  	  (
14:28:24 719  	    SELECT
14:28:24 720  	      MIN(START_DATE)
14:28:24 721  	      FROM LICENSE
14:28:24 722  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 723  	  )
14:28:24 724  	  as "ENT_START_DATE",
14:28:24 725  	  PROCS_SUBSCRIPTION_V23.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
14:28:24 726  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
14:28:24 727  	  GROUP_ACCOUNT.ID GA_ID,
14:28:24 728  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
14:28:24 729  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
14:28:24 730  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
14:28:24 731  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
14:28:24 732  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
14:28:24 733  	  GROUP_ACCOUNT.PHONE GA_PHONE,
14:28:24 734  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
14:28:24 735  	  GROUP_ACCOUNT.SEATS GA_SEATS,
14:28:24 736  	  PROCS_GROUP_ACCOUNT_V23.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
14:28:24 737  	  GROUP_ACCOUNT.IP GA_IP,
14:28:24 738  	  PROCS_SUBSCRIPTION_V23.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code,
14:28:24 739  	  PROCS_ACCOUNT_V23.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
14:28:24 740  	  PROCS_ACCOUNT_V23.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
14:28:24 741  	FROM
14:28:24 742  	  SUBSCRIPTION
14:28:24 743  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 744  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
14:28:24 745  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
14:28:24 746  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
14:28:24 747  	WHERE
14:28:24 748  	  SUBSCRIPTION.ID = in_subscription_id;
14:28:24 749  
14:28:24 750  EXCEPTION
14:28:24 751  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 752  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 753  	  SPROC_NAME, 'No such subscription');
14:28:24 754  WHEN OTHERS THEN
14:28:24 755  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 757  END GET_SUBSCRIPTION_INFO;
14:28:24 758  
14:28:24 759  /******************************************************************************/
14:28:24 760  
14:28:24 761  PROCEDURE GET_SUBSCRIPTION_INVOICES (
14:28:24 762  	in_subscription_id  IN	NUMBER,
14:28:24 763  	out_result_set	    OUT SYS_REFCURSOR
14:28:24 764  ) AS
14:28:24 765  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
14:28:24 766  temp_subscription_id NUMBER;
14:28:24 767  BEGIN
14:28:24 768  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
14:28:24 769  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
14:28:24 770  	--   for each license
14:28:24 771  	--     get associated invoice
14:28:24 772  	--     add to results list
14:28:24 773  	--   end loop
14:28:24 774  	-- end
14:28:24 775  
14:28:24 776  	SELECT
14:28:24 777  	  SUBSCRIPTION.ID into temp_subscription_id
14:28:24 778  	FROM
14:28:24 779  	  SUBSCRIPTION
14:28:24 780  	WHERE
14:28:24 781  	  SUBSCRIPTION.ID = in_subscription_id;
14:28:24 782  
14:28:24 783  	OPEN out_result_set FOR
14:28:24 784  	SELECT
14:28:24 785  	  INVOICE.ID,
14:28:24 786  	  INVOICE.INVOICE_STATUS_ID,
14:28:24 787  	  INVOICE.CREATE_DATE,
14:28:24 788  	  INVOICE.CREATED_BY,
14:28:24 789  	  INVOICE.UPDATE_DATE,
14:28:24 790  	  INVOICE.UPDATED_BY,
14:28:24 791  	  INVOICE.TAX_EXEMPT_ID
14:28:24 792  	FROM
14:28:24 793  	  LICENSE
14:28:24 794  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:28:24 795  	WHERE
14:28:24 796  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
14:28:24 797  
14:28:24 798  EXCEPTION
14:28:24 799  WHEN NO_DATA_FOUND THEN
14:28:24 800  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 801  	  SPROC_NAME, 'Could not find subscription with given ID');
14:28:24 802  WHEN OTHERS THEN
14:28:24 803  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 804  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 805  END GET_SUBSCRIPTION_INVOICES;
14:28:24 806  
14:28:24 807  /******************************************************************************/
14:28:24 808  
14:28:24 809  PROCEDURE GET_SUBSCRIPTION_NOTES (
14:28:24 810  	in_subscription_id  IN	NUMBER,
14:28:24 811  	out_result_set	    OUT SYS_REFCURSOR
14:28:24 812  ) AS
14:28:24 813  -- VARIABLES
14:28:24 814  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
14:28:24 815  temp_subscription_id NUMBER;
14:28:24 816  -- EXCEPTIONS
14:28:24 817  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 818  BEGIN
14:28:24 819  
14:28:24 820  	-- Check that subscription exists
14:28:24 821  	BEGIN
14:28:24 822  	  SELECT
14:28:24 823  	    SUBSCRIPTION.ID into temp_subscription_id
14:28:24 824  	  FROM
14:28:24 825  	    SUBSCRIPTION
14:28:24 826  	  WHERE
14:28:24 827  	    SUBSCRIPTION.ID = in_subscription_id;
14:28:24 828  	  EXCEPTION
14:28:24 829  	    WHEN NO_DATA_FOUND THEN
14:28:24 830  	      RAISE BAD_SUBSCRIPTION_ID;
14:28:24 831  	END;
14:28:24 832  
14:28:24 833  	OPEN out_result_set FOR
14:28:24 834  	SELECT
14:28:24 835  	  SUBSCRIPTION_NOTE.NOTE,
14:28:24 836  	  SUBSCRIPTION_NOTE.CREATED_BY,
14:28:24 837  	  SUBSCRIPTION_NOTE.CREATE_DATE
14:28:24 838  	FROM
14:28:24 839  	  SUBSCRIPTION_NOTE
14:28:24 840  	WHERE
14:28:24 841  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
14:28:24 842  	ORDER BY
14:28:24 843  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
14:28:24 844  
14:28:24 845  EXCEPTION
14:28:24 846  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 847  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 848  	  SPROC_NAME, 'No such subscription');
14:28:24 849  WHEN OTHERS THEN
14:28:24 850  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 851  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 852  END GET_SUBSCRIPTION_NOTES;
14:28:24 853  
14:28:24 854  /******************************************************************************/
14:28:24 855  
14:28:24 856  PROCEDURE ANNOTATE_SUBSCRIPTION (
14:28:24 857  	in_subscription_id IN  NUMBER,
14:28:24 858  	in_agent_id	   IN  NUMBER,
14:28:24 859  	in_note 	   IN  VARCHAR2,
14:28:24 860  	in_created_by	   IN  VARCHAR2
14:28:24 861  ) AS
14:28:24 862  -- VARIABLES
14:28:24 863  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
14:28:24 864  temp_subscription_id     NUMBER;
14:28:24 865  var_subscription_note_id NUMBER;
14:28:24 866  -- EXCEPTIONS
14:28:24 867  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 868  BEGIN
14:28:24 869  
14:28:24 870  	-- Check that subscription exists
14:28:24 871  	BEGIN
14:28:24 872  	  SELECT
14:28:24 873  	    SUBSCRIPTION.ID into temp_subscription_id
14:28:24 874  	  FROM
14:28:24 875  	    SUBSCRIPTION
14:28:24 876  	  WHERE
14:28:24 877  	    SUBSCRIPTION.ID = in_subscription_id;
14:28:24 878  	  EXCEPTION
14:28:24 879  	    WHEN NO_DATA_FOUND THEN
14:28:24 880  	      RAISE BAD_SUBSCRIPTION_ID;
14:28:24 881  	END;
14:28:24 882  
14:28:24 883  	PROCS_SUBSCRIPTION_CRU_V23.CREATE_SUBSCRIPTION_NOTE(
14:28:24 884  	  inout_subscription_note_id => var_subscription_note_id,
14:28:24 885  	  in_agent_id		     => in_agent_id,
14:28:24 886  	  in_subscription_id	     => in_subscription_id,
14:28:24 887  	  in_note		     => in_note,
14:28:24 888  	  in_created_by 	     => in_created_by
14:28:24 889  	);
14:28:24 890  
14:28:24 891  EXCEPTION
14:28:24 892  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 893  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 894  	  SPROC_NAME, 'No such subscription');
14:28:24 895  WHEN OTHERS THEN
14:28:24 896  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 897  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 898  END ANNOTATE_SUBSCRIPTION;
14:28:24 899  
14:28:24 900  /******************************************************************************/
14:28:24 901  
14:28:24 902  PROCEDURE GET_CANCEL_REASONS (
14:28:24 903  	out_result_set	  OUT SYS_REFCURSOR
14:28:24 904  ) AS
14:28:24 905  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCEL_REASONS';
14:28:24 906  BEGIN
14:28:24 907  	OPEN out_result_set FOR
14:28:24 908  	SELECT
14:28:24 909  	  SUBSCRIPTION_CANCEL_REASON.ID,
14:28:24 910  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
14:28:24 911  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION,
14:28:24 912  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID AS STATUS_ID
14:28:24 913  	FROM
14:28:24 914  	  SUBSCRIPTION_CANCEL_REASON;
14:28:24 915  
14:28:24 916  END GET_CANCEL_REASONS;
14:28:24 917  
14:28:24 918  /******************************************************************************/
14:28:24 919  
14:28:24 920  FUNCTION GET_RENEWAL_DATE (
14:28:24 921  	in_subscription_id in NUMBER
14:28:24 922  ) RETURN DATE AS
14:28:24 923  -- VARIABLES
14:28:24 924  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
14:28:24 925  var_subscription_status NUMBER;
14:28:24 926  var_licenses_count      NUMBER;
14:28:24 927  var_license_end_date    DATE;
14:28:24 928  var_last_offer_id       NUMBER;
14:28:24 929  var_offer_chain_id      NUMBER;
14:28:24 930  var_last_license_id     NUMBER;
14:28:24 931  var_current_offer_index NUMBER;
14:28:24 932  var_current_offer_recurr_num NUMBER;
14:28:24 933  var_offer_recurr_num    NUMBER;
14:28:24 934  -- EXCEPTIONS
14:28:24 935  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 936  NO_LICENSES_FOUND EXCEPTION;
14:28:24 937  BEGIN
14:28:24 938  
14:28:24 939  	-- Get subscription id and offer chain id
14:28:24 940  	BEGIN
14:28:24 941  	  SELECT
14:28:24 942  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
14:28:24 943  	    SUBSCRIPTION.OFFER_CHAIN_ID
14:28:24 944  	    into
14:28:24 945  	    var_subscription_status,
14:28:24 946  	    var_offer_chain_id
14:28:24 947  	  FROM
14:28:24 948  	    SUBSCRIPTION
14:28:24 949  	  WHERE
14:28:24 950  	    SUBSCRIPTION.ID = in_subscription_id;
14:28:24 951  	  EXCEPTION
14:28:24 952  	    WHEN NO_DATA_FOUND THEN
14:28:24 953  	      RAISE BAD_SUBSCRIPTION_ID;
14:28:24 954  	END;
14:28:24 955  
14:28:24 956  	IF var_subscription_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE THEN
14:28:24 957  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
14:28:24 958  	  -- AND var_subscription_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED THEN
14:28:24 959  	  RETURN NULL;
14:28:24 960  	END IF;
14:28:24 961  
14:28:24 962  	BEGIN
14:28:24 963  	  SELECT
14:28:24 964  	    LICENSE_ID,
14:28:24 965  	    END_DATE,
14:28:24 966  	    OFFER_ID,
14:28:24 967  	    CURRENT_OFFER_INDEX,
14:28:24 968  	    CURRENT_OFFER_RECURR_NUM
14:28:24 969  	    into
14:28:24 970  	    var_last_license_id,
14:28:24 971  	    var_license_end_date,
14:28:24 972  	    var_last_offer_id,
14:28:24 973  	    var_current_offer_index,
14:28:24 974  	    var_current_offer_recurr_num
14:28:24 975  	  FROM
14:28:24 976  	    (
14:28:24 977  	      SELECT
14:28:24 978  		LICENSE.ID as "LICENSE_ID",
14:28:24 979  		LICENSE.END_DATE,
14:28:24 980  		LICENSE.OFFER_ID,
14:28:24 981  		LICENSE.CURRENT_OFFER_INDEX,
14:28:24 982  		LICENSE.CURRENT_OFFER_RECURR_NUM
14:28:24 983  	      FROM
14:28:24 984  		LICENSE
14:28:24 985  	      WHERE
14:28:24 986  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:24 987  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:28:24 988  	      ORDER BY END_DATE DESC
14:28:24 989  	    )
14:28:24 990  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
14:28:24 991  	  WHERE
14:28:24 992  	    ROWNUM <= 1;
14:28:24 993  
14:28:24 994  	  EXCEPTION
14:28:24 995  	    WHEN NO_DATA_FOUND THEN
14:28:24 996  	      -- RAISE NO_LICENSES_FOUND;
14:28:24 997  	      RETURN NULL;
14:28:24 998  	END;
14:28:24 999  
14:28:24 1000  	 SELECT
14:28:24 1001  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
14:28:24 1002  	 FROM
14:28:24 1003  	   OFFER_OFFER_CHAIN
14:28:24 1004  	 WHERE
14:28:24 1005  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:28:24 1006  	   AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
14:28:24 1007  
14:28:24 1008  	 IF PROCS_OFFER_CHAIN_V23.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
14:28:24 1009  	   AND var_offer_recurr_num = var_current_offer_recurr_num THEN
14:28:24 1010  	   -- There is no next offer for this subscription
14:28:24 1011  	   RETURN NULL;
14:28:24 1012  	 END IF;
14:28:24 1013  
14:28:24 1014  	 RETURN var_license_end_date;
14:28:24 1015  
14:28:24 1016  EXCEPTION
14:28:24 1017  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 1018  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1019  	   SPROC_NAME, 'No such subscription');
14:28:24 1020  WHEN NO_LICENSES_FOUND THEN
14:28:24 1021  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1022  	   SPROC_NAME, 'No licenses found');
14:28:24 1023  WHEN OTHERS THEN
14:28:24 1024  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1025  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1026  END GET_RENEWAL_DATE;
14:28:24 1027  
14:28:24 1028  /******************************************************************************/
14:28:24 1029  
14:28:24 1030  FUNCTION GET_RECENT_CHARGE (
14:28:24 1031  	 in_subscription_id IN NUMBER
14:28:24 1032  ) RETURN NUMBER AS
14:28:24 1033  -- VARIABLES
14:28:24 1034  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
14:28:24 1035  temp_subscription_id NUMBER;
14:28:24 1036  var_recent_charge    NUMBER(10,2);
14:28:24 1037  
14:28:24 1038  -- EXCEPTIONS
14:28:24 1039  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 1040  BEGIN
14:28:24 1041  
14:28:24 1042  	 BEGIN
14:28:24 1043  	   SELECT
14:28:24 1044  	     SUBSCRIPTION.ID into temp_subscription_id
14:28:24 1045  	   FROM
14:28:24 1046  	     SUBSCRIPTION
14:28:24 1047  	   WHERE
14:28:24 1048  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1049  	   EXCEPTION
14:28:24 1050  	     WHEN NO_DATA_FOUND THEN
14:28:24 1051  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 1052  	 END;
14:28:24 1053  
14:28:24 1054  	 BEGIN
14:28:24 1055  	   SELECT
14:28:24 1056  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
14:28:24 1057  	   FROM
14:28:24 1058  	     LICENSE
14:28:24 1059  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 1060  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:28:24 1061  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
14:28:24 1062  	   WHERE
14:28:24 1063  	     -- TODO: Review
14:28:24 1064  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_PROCESSED
14:28:24 1065  	     -- AND
14:28:24 1066  	     SUBSCRIPTION.ID = in_subscription_id
14:28:24 1067  	     AND CHARGE.CHARGE_AMOUNT >= 0
14:28:24 1068  	     AND ROWNUM <= 1
14:28:24 1069  	   ORDER BY
14:28:24 1070  	     LICENSE.ID ASC, CHARGE.ID DESC;
14:28:24 1071  	   EXCEPTION
14:28:24 1072  	     WHEN NO_DATA_FOUND THEN
14:28:24 1073  	       var_recent_charge := 0;
14:28:24 1074  	 END;
14:28:24 1075  
14:28:24 1076  	 RETURN var_recent_charge;
14:28:24 1077  
14:28:24 1078  EXCEPTION
14:28:24 1079  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 1080  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1081  	   SPROC_NAME, 'No such subscription');
14:28:24 1082  WHEN OTHERS THEN
14:28:24 1083  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1084  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1085  END GET_RECENT_CHARGE;
14:28:24 1086  
14:28:24 1087  /******************************************************************************/
14:28:24 1088  
14:28:24 1089  FUNCTION GET_BILLING_CYCLE (
14:28:24 1090  	 in_subscription_id IN NUMBER
14:28:24 1091  ) RETURN VARCHAR2 AS
14:28:24 1092  -- VARIABLES
14:28:24 1093  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
14:28:24 1094  temp_subscription_id NUMBER;
14:28:24 1095  var_offer_duration   VARCHAR2(30);
14:28:24 1096  
14:28:24 1097  -- EXCEPTIONS
14:28:24 1098  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 1099  BEGIN
14:28:24 1100  
14:28:24 1101  	 BEGIN
14:28:24 1102  	   SELECT
14:28:24 1103  	     SUBSCRIPTION.ID into temp_subscription_id
14:28:24 1104  	   FROM
14:28:24 1105  	     SUBSCRIPTION
14:28:24 1106  	   WHERE
14:28:24 1107  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1108  	   EXCEPTION
14:28:24 1109  	     WHEN NO_DATA_FOUND THEN
14:28:24 1110  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 1111  	 END;
14:28:24 1112  
14:28:24 1113  	 SELECT
14:28:24 1114  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
14:28:24 1115  	 FROM
14:28:24 1116  	   LICENSE
14:28:24 1117  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 1118  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
14:28:24 1119  	 WHERE
14:28:24 1120  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_PROCESSED
14:28:24 1121  	   --AND
14:28:24 1122  	   SUBSCRIPTION.ID = in_subscription_id
14:28:24 1123  	   AND ROWNUM <= 1
14:28:24 1124  	 ORDER BY
14:28:24 1125  	   LICENSE.ID ASC;
14:28:24 1126  
14:28:24 1127  	 RETURN var_offer_duration;
14:28:24 1128  
14:28:24 1129  EXCEPTION
14:28:24 1130  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 1131  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1132  	   SPROC_NAME, 'No such subscription');
14:28:24 1133  WHEN OTHERS THEN
14:28:24 1134  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1135  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1136  END GET_BILLING_CYCLE;
14:28:24 1137  
14:28:24 1138  /******************************************************************************/
14:28:24 1139  
14:28:24 1140  PROCEDURE REFUND_SUBSCRIPTION (
14:28:24 1141  	 in_subscription_id IN NUMBER,
14:28:24 1142  	 in_invoice_id	    IN NUMBER,
14:28:24 1143  	 in_refund_amount   IN NUMBER,
14:28:24 1144  	 in_note	    IN VARCHAR2,
14:28:24 1145  	 in_created_by	    IN VARCHAR2,
14:28:24 1146  	 out_charge_id	    OUT NUMBER
14:28:24 1147  ) AS
14:28:24 1148  -- VARIABLES
14:28:24 1149  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
14:28:24 1150  var_invoice_status_id  NUMBER;
14:28:24 1151  var_account_id	      NUMBER;
14:28:24 1152  var_account_status_id  NUMBER;
14:28:24 1153  var_new_transaction_id NUMBER;
14:28:24 1154  var_instrument_type_id NUMBER;
14:28:24 1155  var_instrument_id      NUMBER;
14:28:24 1156  var_new_charge_id      NUMBER;
14:28:24 1157  var_invoice_amount     NUMBER(10,2);
14:28:24 1158  var_refunds_before     NUMBER(10,2);
14:28:24 1159  var_charges_amount     NUMBER(10,2);
14:28:24 1160  -- EXCEPTIONS
14:28:24 1161  BAD_SUBSCRIPTION_ID	     EXCEPTION;
14:28:24 1162  ACCOUNT_IS_FROZEN	     EXCEPTION;
14:28:24 1163  BAD_INVOICE_ID		     EXCEPTION;
14:28:24 1164  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
14:28:24 1165  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
14:28:24 1166  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
14:28:24 1167  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
14:28:24 1168  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
14:28:24 1169  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
14:28:24 1170  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
14:28:24 1171  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
14:28:24 1172  EXCEPTION_MESSAGE	      VARCHAR2(1024);
14:28:24 1173  BEGIN
14:28:24 1174  
14:28:24 1175  	 BEGIN
14:28:24 1176  	   SELECT
14:28:24 1177  	     SUBSCRIPTION.INSTRUMENT_ID,
14:28:24 1178  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
14:28:24 1179  	     SUBSCRIPTION.ACCOUNT_ID
14:28:24 1180  	     into
14:28:24 1181  	     var_instrument_id,
14:28:24 1182  	     var_instrument_type_id,
14:28:24 1183  	     var_account_id
14:28:24 1184  	   FROM
14:28:24 1185  	     SUBSCRIPTION
14:28:24 1186  	   WHERE
14:28:24 1187  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1188  	   EXCEPTION
14:28:24 1189  	     WHEN NO_DATA_FOUND THEN
14:28:24 1190  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 1191  	 END;
14:28:24 1192  
14:28:24 1193  	 -- Check account status. It should not to be frozen
14:28:24 1194  	 SELECT
14:28:24 1195  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
14:28:24 1196  	 FROM
14:28:24 1197  	   ACCOUNT
14:28:24 1198  	 WHERE
14:28:24 1199  	   ACCOUNT.ID = var_account_id;
14:28:24 1200  
14:28:24 1201  	 IF var_account_status_id = GLOBAL_STATUSES_V23.ACCOUNT_FROZEN THEN
14:28:24 1202  	   RAISE ACCOUNT_IS_FROZEN;
14:28:24 1203  	 END IF;
14:28:24 1204  
14:28:24 1205  	 BEGIN
14:28:24 1206  	   SELECT
14:28:24 1207  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
14:28:24 1208  	   FROM
14:28:24 1209  	     INVOICE
14:28:24 1210  	   WHERE
14:28:24 1211  	     INVOICE.ID = in_invoice_id;
14:28:24 1212  	   EXCEPTION
14:28:24 1213  	     WHEN NO_DATA_FOUND THEN
14:28:24 1214  	       RAISE BAD_INVOICE_ID;
14:28:24 1215  	 END;
14:28:24 1216  
14:28:24 1217  	 IF var_invoice_status_id != GLOBAL_STATUSES_V23.INVOICE_CLOSED THEN
14:28:24 1218  	   RAISE INVOICE_IS_NOT_CLOSED;
14:28:24 1219  	 END IF;
14:28:24 1220  
14:28:24 1221  	 BEGIN
14:28:24 1222  	   PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT (
14:28:24 1223  	     in_invoice_id => in_invoice_id,
14:28:24 1224  	     out_amount    => var_invoice_amount
14:28:24 1225  	   );
14:28:24 1226  	   EXCEPTION
14:28:24 1227  	     WHEN OTHERS THEN
14:28:24 1228  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1229  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:28:24 1230  	 END;
14:28:24 1231  
14:28:24 1232  	 IF ( in_refund_amount > var_invoice_amount ) THEN
14:28:24 1233  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
14:28:24 1234  	 END IF;
14:28:24 1235  
14:28:24 1236  	 SELECT /*+ STAR_TRANSFORMATION */
14:28:24 1237  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
14:28:24 1238  	 FROM
14:28:24 1239  	   CHARGE
14:28:24 1240  	 WHERE
14:28:24 1241  	   CHARGE.INVOICE_ID = in_invoice_id
14:28:24 1242  	   AND (
14:28:24 1243  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
14:28:24 1244  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
14:28:24 1245  	   )
14:28:24 1246  	   AND CHARGE.CHARGE_AMOUNT < 0;
14:28:24 1247  
14:28:24 1248  	 -- Refunds are negative
14:28:24 1249  	 var_refunds_before := -var_refunds_before;
14:28:24 1250  
14:28:24 1251  	 var_charges_amount := 0;
14:28:24 1252  
14:28:24 1253  	 FOR f_processed_charges IN (
14:28:24 1254  	   SELECT
14:28:24 1255  	     CHARGE.CHARGE_AMOUNT
14:28:24 1256  	   FROM
14:28:24 1257  	     CHARGE
14:28:24 1258  	   WHERE
14:28:24 1259  	     CHARGE.INVOICE_ID = in_invoice_id
14:28:24 1260  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V23.CHARGE_PROCESSED FROM DUAL)
14:28:24 1261  	 )
14:28:24 1262  	 LOOP
14:28:24 1263  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
14:28:24 1264  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
14:28:24 1265  	   END IF;
14:28:24 1266  	 END LOOP;
14:28:24 1267  
14:28:24 1268  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
14:28:24 1269  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
14:28:24 1270  	 END IF;
14:28:24 1271  
14:28:24 1272  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
14:28:24 1273  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
14:28:24 1274  	 END IF;
14:28:24 1275  
14:28:24 1276  	 BEGIN
14:28:24 1277  	   PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
14:28:24 1278  	     in_transaction_id	       => NULL,
14:28:24 1279  	     in_status_id	       => GLOBAL_STATUSES_V23.TRANSACTION_PREPARE,
14:28:24 1280  	     in_amount		       => -in_refund_amount,
14:28:24 1281  	     in_created_by	       => in_created_by,
14:28:24 1282  	     in_order_id	       => NULL,
14:28:24 1283  	     in_is_refund	       => GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 1284  	     in_transaction_type_code  => 'REFUND',
14:28:24 1285  	     out_transaction_id        => var_new_transaction_id
14:28:24 1286  	   );
14:28:24 1287  	   EXCEPTION
14:28:24 1288  	     WHEN OTHERS THEN
14:28:24 1289  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1290  	       RAISE CAN_NOT_CREATE_TRANSACTION;
14:28:24 1291  	 END;
14:28:24 1292  
14:28:24 1293  	 BEGIN
14:28:24 1294  	   PROCS_CHARGE_V23.CREATE_CHARGE(
14:28:24 1295  	     in_invoice_id	   => in_invoice_id,
14:28:24 1296  	     in_transaction_id	   => var_new_transaction_id,
14:28:24 1297  	     in_instrument_type_id => var_instrument_type_id,
14:28:24 1298  	     in_instrument_id	   => var_instrument_id,
14:28:24 1299  	     in_charge_amount	   => -in_refund_amount,
14:28:24 1300  	     in_created_by	   => in_created_by,
14:28:24 1301  	     in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
14:28:24 1302  	     out_charge_id	   => var_new_charge_id
14:28:24 1303  	   );
14:28:24 1304  	   EXCEPTION
14:28:24 1305  	     WHEN OTHERS THEN
14:28:24 1306  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1307  	       RAISE CAN_NOT_CREATE_CHARGE;
14:28:24 1308  	 END;
14:28:24 1309  
14:28:24 1310  	 IF in_note IS NOT NULL THEN
14:28:24 1311  	   BEGIN
14:28:24 1312  	     PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
14:28:24 1313  	       in_subscription_id => in_subscription_id,
14:28:24 1314  	       in_agent_id	  => 0, -- AGENT_ID??
14:28:24 1315  	       in_note		  => in_note,
14:28:24 1316  	       in_created_by	  => in_created_by
14:28:24 1317  	     );
14:28:24 1318  	     EXCEPTION
14:28:24 1319  	       WHEN OTHERS THEN
14:28:24 1320  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1321  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
14:28:24 1322  	   END;
14:28:24 1323  	 END IF;
14:28:24 1324  
14:28:24 1325  	 out_charge_id := var_new_charge_id;
14:28:24 1326  
14:28:24 1327  EXCEPTION
14:28:24 1328  WHEN INVOICE_IS_NOT_CLOSED THEN
14:28:24 1329  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1330  	   SPROC_NAME, 'Invoice is not closed');
14:28:24 1331  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 1332  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1333  	   SPROC_NAME, 'No such subscription');
14:28:24 1334  WHEN ACCOUNT_IS_FROZEN THEN
14:28:24 1335  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1336  	   SPROC_NAME, 'Could not refund subscription for frozen account');
14:28:24 1337  WHEN BAD_INVOICE_ID THEN
14:28:24 1338  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1339  	   SPROC_NAME, 'No such invoice');
14:28:24 1340  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:28:24 1341  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1342  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
14:28:24 1343  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
14:28:24 1344  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1345  	   SPROC_NAME, 'Refund is greater than amount');
14:28:24 1346  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
14:28:24 1347  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1348  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
14:28:24 1349  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
14:28:24 1350  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1351  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
14:28:24 1352  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:28:24 1353  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1354  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:28:24 1355  WHEN CAN_NOT_CREATE_CHARGE THEN
14:28:24 1356  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1357  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:28:24 1358  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
14:28:24 1359  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1360  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:28:24 1361  WHEN OTHERS THEN
14:28:24 1362  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1363  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1364  END REFUND_SUBSCRIPTION;
14:28:24 1365  
14:28:24 1366  /******************************************************************************/
14:28:24 1367  
14:28:24 1368  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
14:28:24 1369  	 in_subscription_id	 IN NUMBER,
14:28:24 1370  	 in_effective_start_date IN DATE,
14:28:24 1371  	 in_effective_end_date	 IN DATE,
14:28:24 1372  	 in_note		 IN VARCHAR2,
14:28:24 1373  	 in_updated_by		 IN VARCHAR2
14:28:24 1374  ) AS
14:28:24 1375  -- VARIABLES
14:28:24 1376  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
14:28:24 1377  temp_subscription_id	    NUMBER;
14:28:24 1378  var_current_license_id	    NUMBER;
14:28:24 1379  var_current_license_start_date DATE;
14:28:24 1380  var_current_license_end_date DATE;
14:28:24 1381  var_current_offer_id	    NUMBER;
14:28:24 1382  var_current_invoice_id	    NUMBER;
14:28:24 1383  var_current_date 	    DATE;
14:28:24 1384  var_current_offer_index	    NUMBER;
14:28:24 1385  var_current_offer_recurr_num NUMBER;
14:28:24 1386  var_account_tax_exempt_id    VARCHAR2(255);
14:28:24 1387  
14:28:24 1388  var_free_invoice_id NUMBER;
14:28:24 1389  var_free_license_id NUMBER;
14:28:24 1390  var_new_license_id  NUMBER;
14:28:24 1391  var_ext_license_id  NUMBER;
14:28:24 1392  -- EXCEPTIONS
14:28:24 1393  BAD_SUBSCRIPTION_ID	     EXCEPTION;
14:28:24 1394  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
14:28:24 1395  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
14:28:24 1396  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
14:28:24 1397  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
14:28:24 1398  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
14:28:24 1399  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
14:28:24 1400  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
14:28:24 1401  EXT_START_DATE_LATER_THEN_END EXCEPTION;
14:28:24 1402  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
14:28:24 1403  EXCEPTION_MESSAGE	     VARCHAR2(1024);
14:28:24 1404  BEGIN
14:28:24 1405  
14:28:24 1406  	 var_current_date := PROCS_COMMON_V23.NORMALIZE_DATE(SYSDATE);
14:28:24 1407  
14:28:24 1408  	 -- Check that subscription exists
14:28:24 1409  	 BEGIN
14:28:24 1410  	   SELECT
14:28:24 1411  	     SUBSCRIPTION.ID into temp_subscription_id
14:28:24 1412  	   FROM
14:28:24 1413  	     SUBSCRIPTION
14:28:24 1414  	   WHERE
14:28:24 1415  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1416  	   EXCEPTION
14:28:24 1417  	     WHEN NO_DATA_FOUND THEN
14:28:24 1418  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 1419  	 END;
14:28:24 1420  
14:28:24 1421  	 -- Get account tax exempt id
14:28:24 1422  	 SELECT DISTINCT
14:28:24 1423  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
14:28:24 1424  	 FROM
14:28:24 1425  	   ACCOUNT
14:28:24 1426  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:28:24 1427  	 WHERE
14:28:24 1428  	   SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1429  
14:28:24 1430  	 -- Select current data
14:28:24 1431  	 BEGIN
14:28:24 1432  	   SELECT
14:28:24 1433  	     LICENSE.ID,
14:28:24 1434  	     LICENSE.START_DATE,
14:28:24 1435  	     LICENSE.END_DATE,
14:28:24 1436  	     LICENSE.CURRENT_OFFER_INDEX,
14:28:24 1437  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
14:28:24 1438  	     OFFER.ID,
14:28:24 1439  	     INVOICE.ID
14:28:24 1440  	   INTO
14:28:24 1441  	     var_current_license_id,
14:28:24 1442  	     var_current_license_start_date,
14:28:24 1443  	     var_current_license_end_date,
14:28:24 1444  	     var_current_offer_index,
14:28:24 1445  	     var_current_offer_recurr_num,
14:28:24 1446  	     var_current_offer_id,
14:28:24 1447  	     var_current_invoice_id
14:28:24 1448  	   FROM
14:28:24 1449  	     LICENSE
14:28:24 1450  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 1451  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
14:28:24 1452  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:28:24 1453  	   WHERE
14:28:24 1454  	     SUBSCRIPTION.ID = in_subscription_id
14:28:24 1455  	     AND PROCS_COMMON_V23.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
14:28:24 1456  	     AND PROCS_COMMON_V23.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
14:28:24 1457  	     AND ROWNUM <= 1
14:28:24 1458  	   ORDER BY
14:28:24 1459  	     LICENSE.ID DESC;
14:28:24 1460  	   EXCEPTION
14:28:24 1461  	     WHEN NO_DATA_FOUND THEN
14:28:24 1462  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
14:28:24 1463  	 END;
14:28:24 1464  
14:28:24 1465  	 IF var_current_license_end_date < in_effective_start_date THEN
14:28:24 1466  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
14:28:24 1467  	 END IF;
14:28:24 1468  
14:28:24 1469  	 IF var_current_license_start_date > in_effective_start_date THEN
14:28:24 1470  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
14:28:24 1471  	 END IF;
14:28:24 1472  
14:28:24 1473  	 IF in_effective_start_date > in_effective_end_date THEN
14:28:24 1474  	   RAISE EXT_START_DATE_LATER_THEN_END;
14:28:24 1475  	 END IF;
14:28:24 1476  
14:28:24 1477  	 -- Closing curent license
14:28:24 1478  	 BEGIN
14:28:24 1479  	   PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:24 1480  	     in_license_id	   => var_current_license_id,
14:28:24 1481  	     in_updated_by	   => in_updated_by,
14:28:24 1482  	     in_license_status_id  => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
14:28:24 1483  	     in_end_date	   => in_effective_start_date,
14:28:24 1484  	     in_needs_entitlements => GLOBAL_CONSTANTS_V23.TRUE
14:28:24 1485  	   );
14:28:24 1486  	   EXCEPTION
14:28:24 1487  	     WHEN OTHERS THEN
14:28:24 1488  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1489  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
14:28:24 1490  	 END;
14:28:24 1491  
14:28:24 1492  	 -- Creating new "free" invoice
14:28:24 1493  	 BEGIN
14:28:24 1494  	   PROCS_INVOICE_V23.CREATE_INVOICE(
14:28:24 1495  	     in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_CLOSED,
14:28:24 1496  	     in_created_by     => in_updated_by,
14:28:24 1497  	     in_tax_exempt_id  => var_account_tax_exempt_id,
14:28:24 1498  	     out_invoice_id    => var_free_invoice_id
14:28:24 1499  	   );
14:28:24 1500  	   EXCEPTION
14:28:24 1501  	     WHEN OTHERS THEN
14:28:24 1502  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1503  	       RAISE CAN_NOT_CREATE_INVOICE;
14:28:24 1504  	 END;
14:28:24 1505  
14:28:24 1506  	 -- Creating new "free" license
14:28:24 1507  	 BEGIN
14:28:24 1508  	   PROCS_LICENSE_V23.CREATE_LICENSE (
14:28:24 1509  	     in_status_id		 => GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
14:28:24 1510  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 1511  	     in_start_date		 => in_effective_start_date,
14:28:24 1512  	     in_end_date		 => in_effective_end_date,
14:28:24 1513  	     in_offer_id		 => var_current_offer_id,
14:28:24 1514  	     in_subscription_id 	 => in_subscription_id,
14:28:24 1515  	     in_invoice_id		 => var_free_invoice_id,
14:28:24 1516  	     in_created_by		 => in_updated_by,
14:28:24 1517  	     in_is_extension		 => GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 1518  	     in_current_offer_index	 => var_current_offer_index,
14:28:24 1519  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
14:28:24 1520  	     out_license_id		 => var_free_license_id
14:28:24 1521  	   );
14:28:24 1522  	   EXCEPTION
14:28:24 1523  	     WHEN OTHERS THEN
14:28:24 1524  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1525  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
14:28:24 1526  	 END;
14:28:24 1527  
14:28:24 1528  	 -- Creating new license
14:28:24 1529  	 IF PROCS_COMMON_V23.NORMALIZE_DATE(var_current_license_end_date) >
14:28:24 1530  	    PROCS_COMMON_V23.NORMALIZE_DATE(in_effective_start_date) THEN
14:28:24 1531  	   BEGIN
14:28:24 1532  	     PROCS_LICENSE_V23.CREATE_LICENSE (
14:28:24 1533  	       in_status_id		   => GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
14:28:24 1534  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 1535  	       in_start_date		   => in_effective_end_date,
14:28:24 1536  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
14:28:24 1537  	       in_offer_id		   => var_current_offer_id,
14:28:24 1538  	       in_subscription_id	   => in_subscription_id,
14:28:24 1539  	       in_invoice_id		   => var_current_invoice_id,
14:28:24 1540  	       in_created_by		   => in_updated_by,
14:28:24 1541  	       in_is_extension		   => GLOBAL_CONSTANTS_V23.FALSE,
14:28:24 1542  	       in_current_offer_index	   => var_current_offer_index,
14:28:24 1543  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
14:28:24 1544  	       out_license_id		   => var_ext_license_id
14:28:24 1545  	     );
14:28:24 1546  	     EXCEPTION
14:28:24 1547  	       WHEN OTHERS THEN
14:28:24 1548  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1549  		 RAISE CAN_NOT_CREATE_END_LICENSE;
14:28:24 1550  	   END;
14:28:24 1551  	 END IF;
14:28:24 1552  
14:28:24 1553  	 -- Create new note for subscription
14:28:24 1554  	 BEGIN
14:28:24 1555  	   PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION (
14:28:24 1556  	     in_subscription_id => in_subscription_id,
14:28:24 1557  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
14:28:24 1558  	     in_note		=> in_note,
14:28:24 1559  	     in_created_by	=> in_updated_by
14:28:24 1560  	   );
14:28:24 1561  	   EXCEPTION
14:28:24 1562  	     WHEN OTHERS THEN
14:28:24 1563  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1564  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
14:28:24 1565  	 END;
14:28:24 1566  
14:28:24 1567  EXCEPTION
14:28:24 1568  WHEN EXT_START_DATE_LATER_THEN_END THEN
14:28:24 1569  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1570  	   SPROC_NAME, 'Extension start date is bigger then end date');
14:28:24 1571  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
14:28:24 1572  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1573  	   SPROC_NAME, 'Extension start date is too far');
14:28:24 1574  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
14:28:24 1575  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1576  	   SPROC_NAME, 'Extension start date is too small');
14:28:24 1577  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 1578  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1579  	   SPROC_NAME, 'No such subscription');
14:28:24 1580  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
14:28:24 1581  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1582  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
14:28:24 1583  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
14:28:24 1584  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1585  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
14:28:24 1586  WHEN CAN_NOT_CREATE_INVOICE THEN
14:28:24 1587  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1588  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
14:28:24 1589  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
14:28:24 1590  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1591  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
14:28:24 1592  WHEN CAN_NOT_CREATE_END_LICENSE THEN
14:28:24 1593  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1594  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
14:28:24 1595  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
14:28:24 1596  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1597  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
14:28:24 1598  WHEN OTHERS THEN
14:28:24 1599  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1600  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1601  END ADD_SUBSCRIPTION_EXTENSION;
14:28:24 1602  
14:28:24 1603  /******************************************************************************/
14:28:24 1604  
14:28:24 1605  FUNCTION CALC_SUBSCRIPTION_END_DATE (
14:28:24 1606  	 in_subscription_id IN NUMBER
14:28:24 1607  ) RETURN DATE AS
14:28:24 1608  -- VARIABLES
14:28:24 1609  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
14:28:24 1610  last_license_id		     NUMBER;
14:28:24 1611  last_license_end_date	     DATE;
14:28:24 1612  last_license_offer_id	     NUMBER;
14:28:24 1613  last_license_offer_index      NUMBER;
14:28:24 1614  last_license_offer_recurr_num NUMBER;
14:28:24 1615  var_last_license_id	     NUMBER;
14:28:24 1616  var_offer_chain_id	     NUMBER;
14:28:24 1617  var_current_offer_rec_number  NUMBER;
14:28:24 1618  var_next_offers_set	     SYS_REFCURSOR;
14:28:24 1619  var_next_offer_duration	     VARCHAR2(30);
14:28:24 1620  var_next_offer_recur	     NUMBER;
14:28:24 1621  var_infinity_offers_number    NUMBER;
14:28:24 1622  
14:28:24 1623  var_result_date DATE;
14:28:24 1624  
14:28:24 1625  var_ym_interval	INTERVAL YEAR TO MONTH;
14:28:24 1626  var_ds_interval	INTERVAL DAY(3) TO SECOND;
14:28:24 1627  var_offer_years	NUMBER;
14:28:24 1628  var_offer_months NUMBER;
14:28:24 1629  var_offer_days	NUMBER;
14:28:24 1630  
14:28:24 1631  -- EXCEPTIONS
14:28:24 1632  BAD_SUBSCRIPTION_ID	  EXCEPTION;
14:28:24 1633  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
14:28:24 1634  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
14:28:24 1635  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
14:28:24 1636  EXCEPTION_MESSAGE	  VARCHAR2(1024);
14:28:24 1637  BEGIN
14:28:24 1638  
14:28:24 1639  	 BEGIN
14:28:24 1640  	   SELECT
14:28:24 1641  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
14:28:24 1642  	   FROM
14:28:24 1643  	     SUBSCRIPTION
14:28:24 1644  	   WHERE
14:28:24 1645  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1646  	   EXCEPTION
14:28:24 1647  	     WHEN NO_DATA_FOUND THEN
14:28:24 1648  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 1649  	 END;
14:28:24 1650  
14:28:24 1651  	 BEGIN
14:28:24 1652  	   SELECT
14:28:24 1653  	     ID into var_last_license_id
14:28:24 1654  	   FROM
14:28:24 1655  	     (
14:28:24 1656  	       SELECT
14:28:24 1657  		 LICENSE.ID
14:28:24 1658  	       FROM
14:28:24 1659  		 LICENSE
14:28:24 1660  	       WHERE
14:28:24 1661  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:28:24 1662  	       ORDER BY
14:28:24 1663  		 LICENSE.END_DATE DESC
14:28:24 1664  	     )
14:28:24 1665  	   WHERE
14:28:24 1666  	     ROWNUM <= 1;
14:28:24 1667  	   EXCEPTION
14:28:24 1668  	     WHEN NO_DATA_FOUND THEN
14:28:24 1669  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
14:28:24 1670  	 END;
14:28:24 1671  
14:28:24 1672  	 SELECT
14:28:24 1673  	   COUNT(*) into var_infinity_offers_number
14:28:24 1674  	 FROM
14:28:24 1675  	   OFFER_OFFER_CHAIN
14:28:24 1676  	 WHERE
14:28:24 1677  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:28:24 1678  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V23.OFFER_REC_INFINITY;
14:28:24 1679  
14:28:24 1680  	 IF var_infinity_offers_number > 0 THEN
14:28:24 1681  	   RETURN NULL;
14:28:24 1682  	 END IF;
14:28:24 1683  
14:28:24 1684  	 BEGIN
14:28:24 1685  	   SELECT
14:28:24 1686  	     LICENSE.ID,
14:28:24 1687  	     LICENSE.END_DATE,
14:28:24 1688  	     LICENSE.CURRENT_OFFER_INDEX,
14:28:24 1689  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
14:28:24 1690  	     LICENSE.OFFER_ID
14:28:24 1691  	     into
14:28:24 1692  	     last_license_id,
14:28:24 1693  	     last_license_end_date,
14:28:24 1694  	     last_license_offer_index,
14:28:24 1695  	     last_license_offer_recurr_num,
14:28:24 1696  	     last_license_offer_id
14:28:24 1697  	   FROM
14:28:24 1698  	     LICENSE
14:28:24 1699  	   WHERE
14:28:24 1700  	     LICENSE.ID = var_last_license_id;
14:28:24 1701  	   EXCEPTION
14:28:24 1702  	     WHEN NO_DATA_FOUND THEN
14:28:24 1703  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
14:28:24 1704  	 END;
14:28:24 1705  
14:28:24 1706  	 var_result_date := last_license_end_date;
14:28:24 1707  
14:28:24 1708  	 -- Find current recurrence number
14:28:24 1709  	 SELECT
14:28:24 1710  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
14:28:24 1711  	 FROM
14:28:24 1712  	   OFFER_OFFER_CHAIN
14:28:24 1713  	 WHERE
14:28:24 1714  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
14:28:24 1715  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
14:28:24 1716  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
14:28:24 1717  
14:28:24 1718  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
14:28:24 1719  	   BEGIN
14:28:24 1720  	     PROCS_OFFER_CHAIN_V23.GET_OFFER_LENGTH(
14:28:24 1721  	       last_license_offer_id,
14:28:24 1722  	       var_offer_years,
14:28:24 1723  	       var_offer_months,
14:28:24 1724  	       var_offer_days
14:28:24 1725  	     );
14:28:24 1726  
14:28:24 1727  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
14:28:24 1728  	     var_ds_interval := var_offer_days||' 0:0:0';
14:28:24 1729  
14:28:24 1730  	     var_result_date := var_result_date
14:28:24 1731  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
14:28:24 1732  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
14:28:24 1733  	     EXCEPTION
14:28:24 1734  	       WHEN OTHERS THEN
14:28:24 1735  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1736  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
14:28:24 1737  	   END;
14:28:24 1738  	 END IF;
14:28:24 1739  
14:28:24 1740  	 OPEN var_next_offers_set FOR
14:28:24 1741  	 SELECT
14:28:24 1742  	   OFFER.ENTITLEMENT_DURATION,
14:28:24 1743  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
14:28:24 1744  	 FROM
14:28:24 1745  	   OFFER_OFFER_CHAIN
14:28:24 1746  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
14:28:24 1747  	 WHERE
14:28:24 1748  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
14:28:24 1749  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
14:28:24 1750  
14:28:24 1751  	 LOOP
14:28:24 1752  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
14:28:24 1753  	   EXIT WHEN var_next_offers_set%NOTFOUND;
14:28:24 1754  	   BEGIN
14:28:24 1755  	     PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(
14:28:24 1756  	       var_next_offer_duration,
14:28:24 1757  	       var_offer_years,
14:28:24 1758  	       var_offer_months,
14:28:24 1759  	       var_offer_days
14:28:24 1760  	     );
14:28:24 1761  
14:28:24 1762  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
14:28:24 1763  	     var_ds_interval := var_offer_days||' 0:0:0';
14:28:24 1764  
14:28:24 1765  	     var_result_date := var_result_date
14:28:24 1766  	       + ( var_ym_interval * var_next_offer_recur )
14:28:24 1767  	       + ( var_ds_interval * var_next_offer_recur );
14:28:24 1768  	     EXCEPTION
14:28:24 1769  	       WHEN OTHERS THEN
14:28:24 1770  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1771  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
14:28:24 1772  	   END;
14:28:24 1773  	 END LOOP;
14:28:24 1774  
14:28:24 1775  	 RETURN var_result_date;
14:28:24 1776  
14:28:24 1777  EXCEPTION
14:28:24 1778  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 1779  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1780  	   SPROC_NAME, 'No such subscription');
14:28:24 1781  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
14:28:24 1782  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1783  	   SPROC_NAME, 'Could not find last license for given subscription');
14:28:24 1784  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
14:28:24 1785  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1786  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
14:28:24 1787  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
14:28:24 1788  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1789  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
14:28:24 1790  WHEN OTHERS THEN
14:28:24 1791  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1792  	   SPROC_NAME, 'Unkown error', SQLERRM);
14:28:24 1793  END CALC_SUBSCRIPTION_END_DATE;
14:28:24 1794  
14:28:24 1795  /******************************************************************************/
14:28:24 1796  
14:28:24 1797  PROCEDURE HAS_FUTURE_LICENSE (
14:28:24 1798  	 in_license_id IN  NUMBER,
14:28:24 1799  	 out_result    OUT NUMBER
14:28:24 1800  ) AS
14:28:24 1801  -- VARIABLES
14:28:24 1802  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
14:28:24 1803  var_subscription_id	 NUMBER;
14:28:24 1804  var_future_licenses_count NUMBER;
14:28:24 1805  -- EXCEPTIONS
14:28:24 1806  BAD_LICENSE_ID	    EXCEPTION;
14:28:24 1807  BEGIN
14:28:24 1808  
14:28:24 1809  	 BEGIN
14:28:24 1810  	   SELECT
14:28:24 1811  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
14:28:24 1812  	   FROM
14:28:24 1813  	     LICENSE
14:28:24 1814  	   WHERE
14:28:24 1815  	     LICENSE.ID = in_license_id;
14:28:24 1816  	   EXCEPTION
14:28:24 1817  	     WHEN NO_DATA_FOUND THEN
14:28:24 1818  	       RAISE BAD_LICENSE_ID;
14:28:24 1819  	 END;
14:28:24 1820  
14:28:24 1821  	 SELECT
14:28:24 1822  	   COUNT(*) into var_future_licenses_count
14:28:24 1823  	 FROM
14:28:24 1824  	   LICENSE
14:28:24 1825  	 WHERE
14:28:24 1826  	   LICENSE.ID != in_license_id
14:28:24 1827  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
14:28:24 1828  	   AND LICENSE.END_DATE > sysdate;
14:28:24 1829  
14:28:24 1830  	 IF var_future_licenses_count > 0 THEN
14:28:24 1831  	   out_result := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 1832  	 ELSE
14:28:24 1833  	   out_result := GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 1834  	 END IF;
14:28:24 1835  
14:28:24 1836  EXCEPTION
14:28:24 1837  WHEN BAD_LICENSE_ID THEN
14:28:24 1838  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1839  	   SPROC_NAME, 'No such license');
14:28:24 1840  WHEN OTHERS THEN
14:28:24 1841  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1842  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1843  END HAS_FUTURE_LICENSE;
14:28:24 1844  
14:28:24 1845  /******************************************************************************/
14:28:24 1846  
14:28:24 1847  PROCEDURE CLOSE_SUBSCRIPTION (
14:28:24 1848  	 in_subscription_id IN NUMBER,
14:28:24 1849  	 in_updated_by	    IN VARCHAR2
14:28:24 1850  ) AS
14:28:24 1851  -- VARIABLES
14:28:24 1852  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
14:28:24 1853  temp_subscription_id NUMBER;
14:28:24 1854  var_licenses_count   NUMBER;
14:28:24 1855  -- EXCEPTIONS
14:28:24 1856  BAD_SUBSCRIPTION_ID    EXCEPTION;
14:28:24 1857  ACTIVE_LICENSES_FOUND  EXCEPTION;
14:28:24 1858  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 1859  BEGIN
14:28:24 1860  
14:28:24 1861  	 BEGIN
14:28:24 1862  	   SELECT
14:28:24 1863  	     SUBSCRIPTION.ID into temp_subscription_id
14:28:24 1864  	   FROM
14:28:24 1865  	     SUBSCRIPTION
14:28:24 1866  	   WHERE
14:28:24 1867  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1868  	   EXCEPTION
14:28:24 1869  	     WHEN NO_DATA_FOUND THEN
14:28:24 1870  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 1871  	 END;
14:28:24 1872  
14:28:24 1873  	 SELECT
14:28:24 1874  	   COUNT(*) into var_licenses_count
14:28:24 1875  	 FROM
14:28:24 1876  	   LICENSE
14:28:24 1877  	 WHERE
14:28:24 1878  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:28:24 1879  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE;
14:28:24 1880  
14:28:24 1881  	 IF var_licenses_count > 0 THEN
14:28:24 1882  	   RAISE ACTIVE_LICENSES_FOUND;
14:28:24 1883  	 END IF;
14:28:24 1884  
14:28:24 1885  	 PROCS_SUBSCRIPTION_V23.UPDATE_SUBSCRIPTION_STATUS(
14:28:24 1886  	   in_subscription_id	     => in_subscription_id,
14:28:24 1887  	   in_updated_by	     => in_updated_by,
14:28:24 1888  	   in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_CLOSED
14:28:24 1889  	 );
14:28:24 1890  
14:28:24 1891  EXCEPTION
14:28:24 1892  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 1893  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1894  	   SPROC_NAME, 'No such subscription');
14:28:24 1895  WHEN ACTIVE_LICENSES_FOUND THEN
14:28:24 1896  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1897  	   SPROC_NAME, 'Active licenses found');
14:28:24 1898  WHEN OTHERS THEN
14:28:24 1899  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1900  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1901  END CLOSE_SUBSCRIPTION;
14:28:24 1902  
14:28:24 1903  /******************************************************************************/
14:28:24 1904  
14:28:24 1905  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
14:28:24 1906  	 in_subscription_id IN NUMBER,
14:28:24 1907  	 out_group_id	    OUT NUMBER
14:28:24 1908  ) AS
14:28:24 1909  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
14:28:24 1910  BEGIN
14:28:24 1911  	 SELECT
14:28:24 1912  	   ACCOUNT.GROUP_ID into out_group_id
14:28:24 1913  	 FROM
14:28:24 1914  	   SUBSCRIPTION
14:28:24 1915  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:28:24 1916  	 WHERE
14:28:24 1917  	   SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1918  EXCEPTION
14:28:24 1919  WHEN NO_DATA_FOUND THEN
14:28:24 1920  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1921  	   SPROC_NAME, 'No such subscription');
14:28:24 1922  WHEN OTHERS THEN
14:28:24 1923  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1924  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1925  END GET_GROUP_ID_BY_SBSCRPTN_ID;
14:28:24 1926  
14:28:24 1927  /******************************************************************************/
14:28:24 1928  
14:28:24 1929  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
14:28:24 1930  	 in_subscription_id IN NUMBER,
14:28:24 1931  	 out_result_set     OUT SYS_REFCURSOR
14:28:24 1932  ) AS
14:28:24 1933  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
14:28:24 1934  -- VARIABLES
14:28:24 1935  var_offer_chain NUMBER;
14:28:24 1936  -- EXCEPTIONS
14:28:24 1937  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 1938  BEGIN
14:28:24 1939  	 BEGIN
14:28:24 1940  	   SELECT
14:28:24 1941  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
14:28:24 1942  	   FROM
14:28:24 1943  	     SUBSCRIPTION
14:28:24 1944  	   WHERE
14:28:24 1945  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 1946  	   EXCEPTION
14:28:24 1947  	     WHEN NO_DATA_FOUND THEN
14:28:24 1948  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 1949  	 END;
14:28:24 1950  
14:28:24 1951  	 OPEN out_result_set FOR
14:28:24 1952  	 SELECT DISTINCT
14:28:24 1953  	   PRODUCT.ID,
14:28:24 1954  	   PRODUCT.NAME
14:28:24 1955  	 FROM
14:28:24 1956  	   PRODUCT
14:28:24 1957  	 WHERE
14:28:24 1958  	   PRODUCT.ID IN (
14:28:24 1959  	     SELECT DISTINCT
14:28:24 1960  	       PRODUCT_OFFERING.PRODUCT_ID
14:28:24 1961  	     FROM
14:28:24 1962  	       PRODUCT_OFFERING
14:28:24 1963  	     WHERE
14:28:24 1964  	       PRODUCT_OFFERING.ID IN (
14:28:24 1965  		 SELECT DISTINCT
14:28:24 1966  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:28:24 1967  		 FROM
14:28:24 1968  		   OFFER_PRODUCT_OFFERING
14:28:24 1969  		 WHERE
14:28:24 1970  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:28:24 1971  		     SELECT DISTINCT
14:28:24 1972  		       OFFER_OFFER_CHAIN.OFFER_ID
14:28:24 1973  		     FROM
14:28:24 1974  		       OFFER_OFFER_CHAIN
14:28:24 1975  		     WHERE
14:28:24 1976  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
14:28:24 1977  		   )
14:28:24 1978  	       )
14:28:24 1979  	   );
14:28:24 1980  
14:28:24 1981  EXCEPTION
14:28:24 1982  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 1983  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1984  	   SPROC_NAME, 'No such subscription');
14:28:24 1985  WHEN OTHERS THEN
14:28:24 1986  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1987  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1988  END GET_SUBSCRIPTION_PRODUCTS;
14:28:24 1989  
14:28:24 1990  /******************************************************************************/
14:28:24 1991  
14:28:24 1992  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
14:28:24 1993  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
14:28:24 1994  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
14:28:24 1995  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
14:28:24 1996  ) AS
14:28:24 1997  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
14:28:24 1998  BEGIN
14:28:24 1999  	 PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
14:28:24 2000  	   in_subscription_id	     => in_subscription_id,
14:28:24 2001  	   in_subscription_status_id => in_subscription_status_id,
14:28:24 2002  	   in_updated_by	     => in_updated_by
14:28:24 2003  	 );
14:28:24 2004  END UPDATE_SUBSCRIPTION_STATUS;
14:28:24 2005  
14:28:24 2006  /******************************************************************************/
14:28:24 2007  
14:28:24 2008  PROCEDURE GET_ACTIVE_INVOICES_IDS (
14:28:24 2009  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
14:28:24 2010  	 in_subscription_id IN NUMBER,
14:28:24 2011  	 out_result_set     OUT SYS_REFCURSOR
14:28:24 2012  ) AS
14:28:24 2013  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
14:28:24 2014  -- VARIABLES
14:28:24 2015  temp_subscription_id SUBSCRIPTION.ID%TYPE;
14:28:24 2016  -- EXCEPTIONS
14:28:24 2017  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 2018  BEGIN
14:28:24 2019  
14:28:24 2020  	 BEGIN
14:28:24 2021  	   SELECT
14:28:24 2022  	     SUBSCRIPTION.ID into temp_subscription_id
14:28:24 2023  	   FROM
14:28:24 2024  	     SUBSCRIPTION
14:28:24 2025  	   WHERE
14:28:24 2026  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 2027  	   EXCEPTION
14:28:24 2028  	     WHEN NO_DATA_FOUND THEN
14:28:24 2029  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 2030  	 END;
14:28:24 2031  
14:28:24 2032  	 OPEN out_result_set FOR
14:28:24 2033  	 SELECT DISTINCT
14:28:24 2034  	   LICENSE.INVOICE_ID as "ID"
14:28:24 2035  	 FROM
14:28:24 2036  	   LICENSE
14:28:24 2037  	 WHERE
14:28:24 2038  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V23.LICENSE_ACTIVE, GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD)
14:28:24 2039  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
14:28:24 2040  
14:28:24 2041  EXCEPTION
14:28:24 2042  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 2043  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2044  	   SPROC_NAME, 'No such subscription');
14:28:24 2045  WHEN OTHERS THEN
14:28:24 2046  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2047  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2048  END GET_ACTIVE_INVOICES_IDS;
14:28:24 2049  
14:28:24 2050  /******************************************************************************/
14:28:24 2051  
14:28:24 2052  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
14:28:24 2053  	 in_invoice_id	      IN NUMBER,
14:28:24 2054  	 in_updated_by	      IN VARCHAR2,
14:28:24 2055  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
14:28:24 2056  ) AS
14:28:24 2057  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
14:28:24 2058  -- VARIABLES
14:28:24 2059  temp_invoice_id	      INVOICE.ID%TYPE;
14:28:24 2060  var_chargeback_amount  NUMBER(10,2);
14:28:24 2061  ver_refund_charge_id   NUMBER;
14:28:24 2062  -- EXCEPTIONS
14:28:24 2063  BAD_INVOICE_ID		    EXCEPTION;
14:28:24 2064  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
14:28:24 2065  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
14:28:24 2066  EXCEPTION_MESSAGE	    VARCHAR2(1024);
14:28:24 2067  -- STUB
14:28:24 2068  var_now DATE;
14:28:24 2069  var_revoke NUMBER;
14:28:24 2070  var_refund NUMBER;
14:28:24 2071  var_billed NUMBER;
14:28:24 2072  var_subscription_in_grace NUMBER;
14:28:24 2073  BEGIN
14:28:24 2074  
14:28:24 2075  	 var_now := sysdate;
14:28:24 2076  
14:28:24 2077  	 -- Check that invoice exists
14:28:24 2078  	 BEGIN
14:28:24 2079  	   SELECT
14:28:24 2080  	     INVOICE.ID into temp_invoice_id
14:28:24 2081  	   FROM
14:28:24 2082  	     INVOICE
14:28:24 2083  	   WHERE
14:28:24 2084  	     INVOICE.ID = in_invoice_id;
14:28:24 2085  	   EXCEPTION
14:28:24 2086  	     WHEN NO_DATA_FOUND THEN
14:28:24 2087  	       RAISE BAD_INVOICE_ID;
14:28:24 2088  	 END;
14:28:24 2089  
14:28:24 2090  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V23.FALSE, GLOBAL_CONSTANTS_V23.TRUE) into var_revoke
14:28:24 2091  	 from license l, subscription s, offer_chain oc
14:28:24 2092  	 where
14:28:24 2093  	   l.subscription_id = s.id and
14:28:24 2094  	   s.offer_chain_id = oc.id and
14:28:24 2095  	   l.invoice_id = in_invoice_id and
14:28:24 2096  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V23.TRUE and
14:28:24 2097  	   rownum < 2;
14:28:24 2098  
14:28:24 2099  	 select
14:28:24 2100  	   decode(s.subscription_status_id, GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD, 1, 0)
14:28:24 2101  	 into
14:28:24 2102  	   var_subscription_in_grace
14:28:24 2103  	 from license l, subscription s
14:28:24 2104  	 where
14:28:24 2105  	   l.subscription_id = s.id and
14:28:24 2106  	   l.invoice_id = in_invoice_id and
14:28:24 2107  	   rownum < 2;
14:28:24 2108  
14:28:24 2109  	 var_billed := PROCS_INVOICE_V23.IS_INVOICE_PAYING_STARTED(in_invoice_id);
14:28:24 2110  	 var_refund := GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 2111  
14:28:24 2112  	 -- Check that transaction for given invoice not started
14:28:24 2113  	 -- if refund enabled calculate and apply chargeback
14:28:24 2114  	 IF (
14:28:24 2115  	     var_billed = GLOBAL_CONSTANTS_V23.TRUE
14:28:24 2116  	   )THEN
14:28:24 2117  	   if (in_refundable = GLOBAL_CONSTANTS_V23.TRUE) then
14:28:24 2118  	     -- If started then we need to calculate refund
14:28:24 2119  	     BEGIN
14:28:24 2120  	       PROCS_INVOICE_V23.CALCULATE_INVOICE_CHARGEBACK(
14:28:24 2121  		 in_invoice_id,
14:28:24 2122  		 var_now,
14:28:24 2123  		 var_chargeback_amount
14:28:24 2124  	       );
14:28:24 2125  	       EXCEPTION
14:28:24 2126  		 WHEN OTHERS THEN
14:28:24 2127  		   EXCEPTION_MESSAGE := SQLERRM;
14:28:24 2128  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
14:28:24 2129  	     END;
14:28:24 2130  	     IF var_chargeback_amount > 0 THEN
14:28:24 2131  	       BEGIN
14:28:24 2132  		 PROCS_INVOICE_V23.APPLY_REFUND(
14:28:24 2133  		   in_invoice_id,
14:28:24 2134  		   var_chargeback_amount,
14:28:24 2135  		   in_updated_by,
14:28:24 2136  		   ver_refund_charge_id
14:28:24 2137  		 );
14:28:24 2138  		 EXCEPTION
14:28:24 2139  		   WHEN OTHERS THEN
14:28:24 2140  		     EXCEPTION_MESSAGE := SQLERRM;
14:28:24 2141  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
14:28:24 2142  	       END;
14:28:24 2143  	       var_refund := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2144  	     END IF;
14:28:24 2145  	   end if;
14:28:24 2146  	 ELSE
14:28:24 2147  
14:28:24 2148  	   FOR f_transaction_to_close IN (
14:28:24 2149  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
14:28:24 2150  	   )
14:28:24 2151  	   LOOP
14:28:24 2152  	     PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_STATUS(
14:28:24 2153  	       in_transaction_id	=> f_transaction_to_close.ID,
14:28:24 2154  	       in_updated_by		=> in_updated_by,
14:28:24 2155  	       in_transaction_status_id => GLOBAL_STATUSES_V23.TRANSACTION_CLOSED
14:28:24 2156  	     );
14:28:24 2157  	   END LOOP;
14:28:24 2158  	   -- Needs to close charges. No refund.
14:28:24 2159  	   FOR f_charge_to_close IN (
14:28:24 2160  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
14:28:24 2161  	   )
14:28:24 2162  	   LOOP
14:28:24 2163  	     PROCS_CHARGE_V23.UPDATE_CHARGE_STATUS(
14:28:24 2164  	       in_charge_id	   => f_charge_to_close.ID,
14:28:24 2165  	       in_updated_by	   => in_updated_by,
14:28:24 2166  	       in_charge_status_id => GLOBAL_STATUSES_V23.CHARGE_CANCELED
14:28:24 2167  	     );
14:28:24 2168  	   END LOOP;
14:28:24 2169  
14:28:24 2170  	   PROCS_INVOICE_V23.UPDATE_INVOICE_STATUS(
14:28:24 2171  	     in_invoice_id		    => in_invoice_id,
14:28:24 2172  	     in_updated_by		    => in_updated_by,
14:28:24 2173  	     in_invoice_status_id	    => GLOBAL_STATUSES_V23.INVOICE_CLOSED
14:28:24 2174  	   );
14:28:24 2175  
14:28:24 2176  	 END IF;
14:28:24 2177  	 -- update licenses
14:28:24 2178  	 IF(var_revoke = GLOBAL_CONSTANTS_V23.TRUE OR var_chargeback_amount > 0 OR (var_subscription_in_grace = GLOBAL_CONSTANTS_V23.FALSE AND var_billed = GLOBAL_CONSTANTS_V23.FALSE)) THEN
14:28:24 2179  	   FOR f_license_to_cancel IN (
14:28:24 2180  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:24 2181  	   )
14:28:24 2182  	   LOOP
14:28:24 2183  	     PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:24 2184  	       in_license_id	     => f_license_to_cancel.ID,
14:28:24 2185  	       in_license_status_id  => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
14:28:24 2186  	       in_needs_entitlements => GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 2187  	       in_updated_by	     => in_updated_by,
14:28:24 2188  	       in_entitlement_end_date => var_now
14:28:24 2189  	     );
14:28:24 2190  	   END LOOP;
14:28:24 2191  	 ELSE
14:28:24 2192  	   FOR f_license_to_cancel IN (
14:28:24 2193  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V23.LICENSE_ACTIVE, GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD)
14:28:24 2194  	   )
14:28:24 2195  	   LOOP
14:28:24 2196  	     PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:24 2197  	       in_license_id	     => f_license_to_cancel.ID,
14:28:24 2198  	       in_license_status_id  => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
14:28:24 2199  	       in_updated_by	     => in_updated_by
14:28:24 2200  	     );
14:28:24 2201  	   END LOOP;
14:28:24 2202  	 END IF;
14:28:24 2203  
14:28:24 2204  
14:28:24 2205  EXCEPTION
14:28:24 2206  WHEN BAD_INVOICE_ID THEN
14:28:24 2207  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2208  	   SPROC_NAME, 'No such invoice');
14:28:24 2209  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
14:28:24 2210  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 2211  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
14:28:24 2212  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
14:28:24 2213  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 2214  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
14:28:24 2215  WHEN OTHERS THEN
14:28:24 2216  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2217  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2218  END CANCEL_SUBSCRIPTION_INVOICE;
14:28:24 2219  
14:28:24 2220  /******************************************************************************/
14:28:24 2221  
14:28:24 2222  PROCEDURE FINALIZE_CANCELATION (
14:28:24 2223  	 in_subscription_id    IN NUMBER,
14:28:24 2224  	 in_cancelation_reason IN VARCHAR2,
14:28:24 2225  	 in_cancelation_date   IN DATE,
14:28:24 2226  	 in_note	       IN VARCHAR2,
14:28:24 2227  	 in_agent_id	       IN NUMBER,
14:28:24 2228  	 in_updated_by	       IN VARCHAR2
14:28:24 2229  ) AS
14:28:24 2230  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
14:28:24 2231  -- VARIABLES
14:28:24 2232  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
14:28:24 2233  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
14:28:24 2234  var_active_invoices_count NUMBER;
14:28:24 2235  var_license_to_disgrace	 LICENSE.ID%TYPE;
14:28:24 2236  var_now			 DATE := SYSDATE;
14:28:24 2237  -- EXCEPTIONS
14:28:24 2238  BAD_SUBSCRIPTION_ID	   EXCEPTION;
14:28:24 2239  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
14:28:24 2240  BAD_CANCELATION_REASON	   EXCEPTION;
14:28:24 2241  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
14:28:24 2242  ACTIVE_INVOICES_FOUND	   EXCEPTION;
14:28:24 2243  CAN_NOT_CREATE_NOTE	   EXCEPTION;
14:28:24 2244  EXCEPTION_MESSAGE	   VARCHAR2(1024);
14:28:24 2245  BEGIN
14:28:24 2246  
14:28:24 2247  	 -- Get current subscription status
14:28:24 2248  	 BEGIN
14:28:24 2249  	   SELECT
14:28:24 2250  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
14:28:24 2251  	   FROM
14:28:24 2252  	     SUBSCRIPTION
14:28:24 2253  	   WHERE
14:28:24 2254  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 2255  	   EXCEPTION
14:28:24 2256  	     WHEN NO_DATA_FOUND THEN
14:28:24 2257  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 2258  	 END;
14:28:24 2259  
14:28:24 2260  	 -- Check that subscription reason is correct
14:28:24 2261  	 BEGIN
14:28:24 2262  	   SELECT
14:28:24 2263  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
14:28:24 2264  	   FROM
14:28:24 2265  	     SUBSCRIPTION_CANCEL_REASON
14:28:24 2266  	   WHERE
14:28:24 2267  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
14:28:24 2268  	     AND ROWNUM <= 1;
14:28:24 2269  	   EXCEPTION
14:28:24 2270  	     WHEN NO_DATA_FOUND THEN
14:28:24 2271  	       RAISE BAD_CANCELATION_REASON;
14:28:24 2272  	 END;
14:28:24 2273  
14:28:24 2274  	 -- Check for invoices with active licenses
14:28:24 2275  	 SELECT
14:28:24 2276  	   COUNT(*) into var_active_invoices_count
14:28:24 2277  	 FROM
14:28:24 2278  	   LICENSE
14:28:24 2279  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:28:24 2280  	 WHERE
14:28:24 2281  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V23.LICENSE_ACTIVE, GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD)
14:28:24 2282  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
14:28:24 2283  
14:28:24 2284  	 IF var_active_invoices_count > 0 THEN
14:28:24 2285  	   RAISE ACTIVE_INVOICES_FOUND;
14:28:24 2286  	 END IF;
14:28:24 2287  
14:28:24 2288  	 -- Check that subscription is active
14:28:24 2289  	 IF var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE AND
14:28:24 2290  	    var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED AND
14:28:24 2291  	    var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD THEN
14:28:24 2292  	   RAISE BAD_SUBSCRIPTION_STATUS;
14:28:24 2293  	 END IF;
14:28:24 2294  
14:28:24 2295  	 -- Update subscription data
14:28:24 2296  	 BEGIN
14:28:24 2297  	   PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
14:28:24 2298  	     in_subscription_id        => in_subscription_id,
14:28:24 2299  	     in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_CANCELED,
14:28:24 2300  	     in_cancelation_date       => in_cancelation_date,
14:28:24 2301  	     in_updated_by	       => in_updated_by,
14:28:24 2302  	     in_sct_id		       => var_sct_id
14:28:24 2303  	   );
14:28:24 2304  	   EXCEPTION
14:28:24 2305  	     WHEN OTHERS THEN
14:28:24 2306  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 2307  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
14:28:24 2308  	 END;
14:28:24 2309  
14:28:24 2310  	 -- Terminate grace period for licenses in grace [SAR-31]
14:28:24 2311  	 BEGIN
14:28:24 2312  	   SELECT
14:28:24 2313  	     LICENSE.ID into var_license_to_disgrace
14:28:24 2314  	   FROM
14:28:24 2315  	     LICENSE
14:28:24 2316  	   WHERE
14:28:24 2317  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:28:24 2318  	     AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD
14:28:24 2319  	     AND ROWNUM <= 1
14:28:24 2320  	   ORDER BY
14:28:24 2321  	     CREATE_DATE DESC;
14:28:24 2322  	 EXCEPTION
14:28:24 2323  	   WHEN NO_DATA_FOUND THEN
14:28:24 2324  	     var_license_to_disgrace := NULL;
14:28:24 2325  	 END;
14:28:24 2326  
14:28:24 2327  	 IF var_license_to_disgrace IS NOT NULL THEN
14:28:24 2328  	   PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:24 2329  	     in_license_id	     => var_license_to_disgrace,
14:28:24 2330  	     in_license_status_id    => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
14:28:24 2331  	     in_updated_by	     => in_updated_by
14:28:24 2332  	   );
14:28:24 2333  	 END IF;
14:28:24 2334  
14:28:24 2335  	 -- Annotate subscription
14:28:24 2336  	 IF in_note IS NOT NULL THEN
14:28:24 2337  	   BEGIN
14:28:24 2338  	     PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
14:28:24 2339  	       in_subscription_id,
14:28:24 2340  	       in_agent_id,
14:28:24 2341  	       in_note,
14:28:24 2342  	       in_updated_by
14:28:24 2343  	     );
14:28:24 2344  	     EXCEPTION
14:28:24 2345  	      WHEN OTHERS THEN
14:28:24 2346  		EXCEPTION_MESSAGE := SQLERRM;
14:28:24 2347  		RAISE CAN_NOT_CREATE_NOTE;
14:28:24 2348  	   END;
14:28:24 2349  	 END IF;
14:28:24 2350  
14:28:24 2351  EXCEPTION
14:28:24 2352  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 2353  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2354  	   SPROC_NAME, 'No such subscription');
14:28:24 2355  WHEN BAD_SUBSCRIPTION_STATUS THEN
14:28:24 2356  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2357  	   SPROC_NAME, 'Bad current subscription status');
14:28:24 2358  WHEN BAD_CANCELATION_REASON THEN
14:28:24 2359  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2360  	   SPROC_NAME, 'Bad cancellation reason');
14:28:24 2361  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
14:28:24 2362  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 2363  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
14:28:24 2364  WHEN ACTIVE_INVOICES_FOUND THEN
14:28:24 2365  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 2366  	   SPROC_NAME, 'Invoices with active licenses found');
14:28:24 2367  WHEN CAN_NOT_CREATE_NOTE THEN
14:28:24 2368  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 2369  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:28:24 2370  --WHEN OTHERS THEN
14:28:24 2371  --  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2372  --    SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2373  END FINALIZE_CANCELATION;
14:28:24 2374  
14:28:24 2375  /******************************************************************************/
14:28:24 2376  
14:28:24 2377  PROCEDURE FINALIZE_FALSE_START (
14:28:24 2378  	 in_subscription_id    IN NUMBER,
14:28:24 2379  	 in_cancelation_date   IN DATE,
14:28:24 2380  	 in_note	       IN VARCHAR2,
14:28:24 2381  	 in_agent_id	       IN NUMBER,
14:28:24 2382  	 in_updated_by	       IN VARCHAR2
14:28:24 2383  ) AS
14:28:24 2384  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
14:28:24 2385  FALSE_START_REASON CONSTANT NUMBER := 41;
14:28:24 2386  -- VARIABLES
14:28:24 2387  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
14:28:24 2388  var_active_invoices_count NUMBER;
14:28:24 2389  -- EXCEPTIONS
14:28:24 2390  BAD_SUBSCRIPTION_ID	   EXCEPTION;
14:28:24 2391  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
14:28:24 2392  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
14:28:24 2393  ACTIVE_INVOICES_FOUND	   EXCEPTION;
14:28:24 2394  CAN_NOT_CREATE_NOTE	   EXCEPTION;
14:28:24 2395  EXCEPTION_MESSAGE	   VARCHAR2(1024);
14:28:24 2396  BEGIN
14:28:24 2397  
14:28:24 2398  	 -- Get current subscription status
14:28:24 2399  	 BEGIN
14:28:24 2400  	   SELECT
14:28:24 2401  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
14:28:24 2402  	   FROM
14:28:24 2403  	     SUBSCRIPTION
14:28:24 2404  	   WHERE
14:28:24 2405  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 2406  	   EXCEPTION
14:28:24 2407  	     WHEN NO_DATA_FOUND THEN
14:28:24 2408  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 2409  	 END;
14:28:24 2410  
14:28:24 2411  	 -- Check for invoices with active licenses
14:28:24 2412  	 SELECT
14:28:24 2413  	   COUNT(*) into var_active_invoices_count
14:28:24 2414  	 FROM
14:28:24 2415  	   LICENSE
14:28:24 2416  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:28:24 2417  	 WHERE
14:28:24 2418  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:24 2419  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
14:28:24 2420  
14:28:24 2421  	 IF var_active_invoices_count > 0 THEN
14:28:24 2422  	   RAISE ACTIVE_INVOICES_FOUND;
14:28:24 2423  	 END IF;
14:28:24 2424  
14:28:24 2425  	 -- Check that subscription is active
14:28:24 2426  	 IF var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 2427  	    AND var_current_subscr_status != GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED THEN
14:28:24 2428  	   RAISE BAD_SUBSCRIPTION_STATUS;
14:28:24 2429  	 END IF;
14:28:24 2430  
14:28:24 2431  	 -- Update subscription data
14:28:24 2432  	 BEGIN
14:28:24 2433  	   PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
14:28:24 2434  	     in_subscription_id        => in_subscription_id,
14:28:24 2435  	     in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_FALSE_START,
14:28:24 2436  	     in_cancelation_date       => in_cancelation_date,
14:28:24 2437  	     in_updated_by	       => in_updated_by,
14:28:24 2438  	     in_sct_id		       => FALSE_START_REASON
14:28:24 2439  	   );
14:28:24 2440  	   EXCEPTION
14:28:24 2441  	     WHEN OTHERS THEN
14:28:24 2442  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 2443  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
14:28:24 2444  	 END;
14:28:24 2445  
14:28:24 2446  	 -- Annotate subscription
14:28:24 2447  	 IF in_note IS NOT NULL THEN
14:28:24 2448  	   BEGIN
14:28:24 2449  	     PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
14:28:24 2450  	       in_subscription_id,
14:28:24 2451  	       in_agent_id,
14:28:24 2452  	       in_note,
14:28:24 2453  	       in_updated_by
14:28:24 2454  	     );
14:28:24 2455  	     EXCEPTION
14:28:24 2456  	      WHEN OTHERS THEN
14:28:24 2457  		EXCEPTION_MESSAGE := SQLERRM;
14:28:24 2458  		RAISE CAN_NOT_CREATE_NOTE;
14:28:24 2459  	   END;
14:28:24 2460  	 END IF;
14:28:24 2461  
14:28:24 2462  EXCEPTION
14:28:24 2463  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 2464  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2465  	   SPROC_NAME, 'No such subscription');
14:28:24 2466  WHEN BAD_SUBSCRIPTION_STATUS THEN
14:28:24 2467  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2468  	   SPROC_NAME, 'Bad current subscription status');
14:28:24 2469  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
14:28:24 2470  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 2471  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
14:28:24 2472  WHEN ACTIVE_INVOICES_FOUND THEN
14:28:24 2473  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 2474  	   SPROC_NAME, 'Invoices with active licenses found');
14:28:24 2475  WHEN CAN_NOT_CREATE_NOTE THEN
14:28:24 2476  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 2477  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:28:24 2478  WHEN OTHERS THEN
14:28:24 2479  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2480  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2481  END FINALIZE_FALSE_START;
14:28:24 2482  
14:28:24 2483  /******************************************************************************/
14:28:24 2484  
14:28:24 2485  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
14:28:24 2486  	 in_subscription_id IN NUMBER
14:28:24 2487  ) RETURN NUMBER AS
14:28:24 2488  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
14:28:24 2489  -- VARIABLES
14:28:24 2490  var_is_offer_chain_cancelable NUMBER;
14:28:24 2491  --64603
14:28:24 2492  var_end_date date;
14:28:24 2493  today_date date := current_date;
14:28:24 2494  offer_id number;
14:28:24 2495  -- EXCEPTIONS
14:28:24 2496  COULD_NOT_CHECK	   EXCEPTION;
14:28:24 2497  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 2498  EXCEPTION_MESSAGE   VARCHAR2(1024);
14:28:24 2499  BEGIN
14:28:24 2500  
14:28:24 2501  	 BEGIN
14:28:24 2502  	   -- find offer_chain_id for given in_subscription_id
14:28:24 2503  	   SELECT OFFER_CHAIN_ID into offer_id
14:28:24 2504  	   FROM SUBSCRIPTION
14:28:24 2505  	   WHERE ID = in_subscription_id;
14:28:24 2506  	   EXCEPTION
14:28:24 2507  	     WHEN NO_DATA_FOUND THEN
14:28:24 2508  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 2509  	     WHEN OTHERS THEN
14:28:24 2510  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 2511  	       RAISE COULD_NOT_CHECK;
14:28:24 2512  	 END;
14:28:24 2513  
14:28:24 2514  	 -- find if it was redeemed from a gift certificate
14:28:24 2515  	 BEGIN
14:28:24 2516  	   SELECT l.end_date INTO var_end_date
14:28:24 2517  	   FROM LICENSE l, GIFT_CERTIFICATE g
14:28:24 2518  	   WHERE l.invoice_id = g.finalized_invoice_id
14:28:24 2519  	   AND l.subscription_id = in_subscription_id;
14:28:24 2520  
14:28:24 2521  	   -- if the license end_date is bigger than today, we are in the
14:28:24 2522  	   -- first period, so we cannot cancel; otherwise can cancel
14:28:24 2523  	   IF var_end_date > today_date THEN
14:28:24 2524  	       RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 2525  	   ELSE
14:28:24 2526  	       RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2527  	   END IF;
14:28:24 2528  
14:28:24 2529  	   EXCEPTION
14:28:24 2530  	       -- not coming from a gift certificate,
14:28:24 2531  	       -- use old logic
14:28:24 2532  	       WHEN NO_DATA_FOUND THEN
14:28:24 2533  		   SELECT
14:28:24 2534  		       PROCS_OFFER_CHAIN_V23.IS_OFFER_CHAIN_CANCELABLE(offer_id)
14:28:24 2535  		       INTO var_is_offer_chain_cancelable
14:28:24 2536  		   FROM DUAL;
14:28:24 2537  		   RETURN var_is_offer_chain_cancelable;
14:28:24 2538  	 END;
14:28:24 2539  
14:28:24 2540  EXCEPTION
14:28:24 2541  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 2542  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2543  	   SPROC_NAME, 'No such subscription');
14:28:24 2544  WHEN COULD_NOT_CHECK THEN
14:28:24 2545  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 2546  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
14:28:24 2547  WHEN OTHERS THEN
14:28:24 2548  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2549  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2550  
14:28:24 2551  END IS_SUBSCRIPTION_CANCELABLE;
14:28:24 2552  /******************************************************************************/
14:28:24 2553  
14:28:24 2554  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
14:28:24 2555  	 in_subscription_id IN NUMBER,
14:28:24 2556  	 out_result_set     OUT SYS_REFCURSOR
14:28:24 2557  ) AS
14:28:24 2558  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
14:28:24 2559  -- VARIABLES
14:28:24 2560  var_offer NUMBER;
14:28:24 2561  -- EXCEPTIONS
14:28:24 2562  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 2563  BEGIN
14:28:24 2564  
14:28:24 2565  	 OPEN out_result_set FOR
14:28:24 2566  	 SELECT DISTINCT
14:28:24 2567  	   PRODUCT_OFFERING.ID,
14:28:24 2568  	   PRODUCT_OFFERING.PRODUCT_ID,
14:28:24 2569  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
14:28:24 2570  	   PRODUCT_OFFERING.UNIT_PRICE,
14:28:24 2571  	   PRODUCT_OFFERING.QUANTITY,
14:28:24 2572  	   PRODUCT_OFFERING.CREATE_DATE,
14:28:24 2573  	   PRODUCT_OFFERING.CREATED_BY,
14:28:24 2574  	   PRODUCT.ID P_ID,
14:28:24 2575  	   PRODUCT.NAME,
14:28:24 2576  	   PRODUCT.TAX_CATEGORY_ID,
14:28:24 2577  	   PRODUCT.ENTITLEMENT,
14:28:24 2578  	   PRODUCT.IS_SHAREABLE,
14:28:24 2579  	   PRODUCT.PRODUCT_STATUS_ID,
14:28:24 2580  	   PRODUCT.DEFAULT_VAT_RATE
14:28:24 2581  	 FROM
14:28:24 2582  	   OFFER_PRODUCT_OFFERING
14:28:24 2583  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:28:24 2584  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:28:24 2585  	 WHERE
14:28:24 2586  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:28:24 2587  	     SELECT
14:28:24 2588  	       LICENSE.OFFER_ID
14:28:24 2589  	     FROM
14:28:24 2590  	       SUBSCRIPTION
14:28:24 2591  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V23.TRUE
14:28:24 2592  	     WHERE
14:28:24 2593  	       SUBSCRIPTION.ID = in_subscription_id
14:28:24 2594  	   );
14:28:24 2595  
14:28:24 2596  EXCEPTION
14:28:24 2597  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 2598  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2599  	   SPROC_NAME, 'No such subscription');
14:28:24 2600  WHEN OTHERS THEN
14:28:24 2601  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2602  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2603  END GET_SUBSCR_PROD_OFFERRINGS;
14:28:24 2604  
14:28:24 2605  
14:28:24 2606  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
14:28:24 2607  /*
14:28:24 2608  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 2609  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 2610  */
14:28:24 2611  	 in_subscription_id IN NUMBER,
14:28:24 2612  	 out_result_set     OUT SYS_REFCURSOR
14:28:24 2613  ) AS
14:28:24 2614  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
14:28:24 2615  -- VARIABLES
14:28:24 2616  var_offer NUMBER;
14:28:24 2617  -- EXCEPTIONS
14:28:24 2618  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 2619  BEGIN
14:28:24 2620  
14:28:24 2621  	 OPEN out_result_set FOR
14:28:24 2622  	 SELECT DISTINCT
14:28:24 2623  	   PRODUCT_OFFERING.ID,
14:28:24 2624  	   PRODUCT_OFFERING.PRODUCT_ID,
14:28:24 2625  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
14:28:24 2626  	   PRODUCT_OFFERING.UNIT_PRICE,
14:28:24 2627  	   PRODUCT_OFFERING.QUANTITY,
14:28:24 2628  	   PRODUCT_OFFERING.CREATE_DATE,
14:28:24 2629  	   PRODUCT_OFFERING.CREATED_BY,
14:28:24 2630  	   PRODUCT.ID P_ID,
14:28:24 2631  	   PRODUCT.NAME,
14:28:24 2632  	   PRODUCT.TAX_CATEGORY_ID,
14:28:24 2633  	   PRODUCT.ENTITLEMENT,
14:28:24 2634  	   PRODUCT.IS_SHAREABLE,
14:28:24 2635  	   PRODUCT.PRODUCT_STATUS_ID,
14:28:24 2636  	   PRODUCT.DEFAULT_VAT_RATE
14:28:24 2637  	 FROM
14:28:24 2638  	   OFFER_PRODUCT_OFFERING
14:28:24 2639  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:28:24 2640  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
14:28:24 2641  	 WHERE
14:28:24 2642  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:28:24 2643  	     SELECT
14:28:24 2644  	       LICENSE.OFFER_ID
14:28:24 2645  	     FROM
14:28:24 2646  	       SUBSCRIPTION
14:28:24 2647  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 2648  	     WHERE
14:28:24 2649  	       SUBSCRIPTION.ID = in_subscription_id
14:28:24 2650  	   );
14:28:24 2651  
14:28:24 2652  EXCEPTION
14:28:24 2653  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 2654  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2655  	   SPROC_NAME, 'No such subscription');
14:28:24 2656  WHEN OTHERS THEN
14:28:24 2657  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2658  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2659  END RETRIEVE_SUB_PROD_OFFER;
14:28:24 2660  /******************************************************************************/
14:28:24 2661  PROCEDURE GET_SUBSCR_LIC_OFFER(
14:28:24 2662  	 in_subscription_id IN NUMBER,
14:28:24 2663  	 out_result_set     OUT SYS_REFCURSOR
14:28:24 2664  ) AS
14:28:24 2665  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
14:28:24 2666  -- VARIABLES
14:28:24 2667  var_offer_chain NUMBER;
14:28:24 2668  -- EXCEPTIONS
14:28:24 2669  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 2670  BEGIN
14:28:24 2671  	 BEGIN
14:28:24 2672  	   SELECT
14:28:24 2673  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
14:28:24 2674  	   FROM
14:28:24 2675  	     SUBSCRIPTION
14:28:24 2676  	   WHERE
14:28:24 2677  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 2678  	   EXCEPTION
14:28:24 2679  	     WHEN NO_DATA_FOUND THEN
14:28:24 2680  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 2681  	 END;
14:28:24 2682  
14:28:24 2683  	 OPEN out_result_set FOR
14:28:24 2684  	 SELECT DISTINCT
14:28:24 2685  	   po.ID po_id,
14:28:24 2686  	   po.PRODUCT_ID po_product_id,
14:28:24 2687  	   p.TAX_CATEGORY_ID po_tax_category_id,
14:28:24 2688  	   po.UNIT_PRICE po_unit_price,
14:28:24 2689  	   po.QUANTITY po_quantity,
14:28:24 2690  	   po.CREATE_DATE po_create_date,
14:28:24 2691  	   po.CREATED_BY po_created_by,
14:28:24 2692  	   l.ID l_id,
14:28:24 2693  	   l.license_status_id l_license_status_id,
14:28:24 2694  	   l.start_date l_start_date,
14:28:24 2695  	   l.offer_id l_offer_id,
14:28:24 2696  	   l.subscription_id l_subscription_id,
14:28:24 2697  	   l.invoice_id l_invoice_id,
14:28:24 2698  	   l.end_date l_end_date,
14:28:24 2699  	   l.entitlement_end_date l_entitlement_end_date,
14:28:24 2700  	   l.create_date l_create_date,
14:28:24 2701  	   l.created_by l_created_by,
14:28:24 2702  	   l.is_extension l_is_extension,
14:28:24 2703  	   l.current_offer_index l_current_offer_index,
14:28:24 2704  	   l.current_offer_recurr_num l_current_offer_recurr_num,
14:28:24 2705  	   l.needs_entitlements l_needs_entitlements
14:28:24 2706  	 FROM
14:28:24 2707  	   OFFER_PRODUCT_OFFERING opo,
14:28:24 2708  	   PRODUCT_OFFERING po,
14:28:24 2709  	   SUBSCRIPTION s,
14:28:24 2710  	   LICENSE l,
14:28:24 2711  	   PRODUCT p
14:28:24 2712  	 WHERE
14:28:24 2713  	   opo.product_offering_id = po.id
14:28:24 2714  	   and po.id = l.offer_id
14:28:24 2715  	   and l.subscription_id = s.id
14:28:24 2716  	   and po.product_id = p.id
14:28:24 2717  	   and l.license_status_id = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:24 2718  	   and s.id = in_subscription_id
14:28:24 2719  	 ;
14:28:24 2720  EXCEPTION
14:28:24 2721  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 2722  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2723  	   SPROC_NAME, 'No such subscription');
14:28:24 2724  WHEN OTHERS THEN
14:28:24 2725  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2726  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2727  END GET_SUBSCR_LIC_OFFER;
14:28:24 2728  
14:28:24 2729  /******************************************************************************/
14:28:24 2730  
14:28:24 2731  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
14:28:24 2732  	 in_subscription_id IN NUMBER,
14:28:24 2733  	 out_result	    OUT NUMBER
14:28:24 2734  ) AS
14:28:24 2735  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
14:28:24 2736  -- VARIABLES
14:28:24 2737  temp_subscription_id NUMBER;
14:28:24 2738  var_local_result     NUMBER;
14:28:24 2739  -- EXCEPTIONS
14:28:24 2740  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 2741  BEGIN
14:28:24 2742  
14:28:24 2743  	 -- Check that subscription exists
14:28:24 2744  	 BEGIN
14:28:24 2745  	   SELECT
14:28:24 2746  	     SUBSCRIPTION.ID into temp_subscription_id
14:28:24 2747  	   FROM
14:28:24 2748  	     SUBSCRIPTION
14:28:24 2749  	   WHERE
14:28:24 2750  	     SUBSCRIPTION.ID = in_subscription_id;
14:28:24 2751  	   EXCEPTION
14:28:24 2752  	     WHEN NO_DATA_FOUND THEN
14:28:24 2753  	       RAISE BAD_SUBSCRIPTION_ID;
14:28:24 2754  	 END;
14:28:24 2755  
14:28:24 2756  	 var_local_result := NULL;
14:28:24 2757  
14:28:24 2758  	 -- Check charges for each invoice associated with gived subscription
14:28:24 2759  	 FOR f_invoice IN (
14:28:24 2760  	   SELECT DISTINCT
14:28:24 2761  	     LICENSE.INVOICE_ID as "ID"
14:28:24 2762  	   FROM
14:28:24 2763  	     LICENSE
14:28:24 2764  	   WHERE
14:28:24 2765  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:28:24 2766  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V23.LICENSE_ACTIVE FROM DUAL )
14:28:24 2767  	 )
14:28:24 2768  	 LOOP
14:28:24 2769  
14:28:24 2770  	   -- Check each charge in invoice
14:28:24 2771  	   FOR f_charge IN (
14:28:24 2772  	     SELECT
14:28:24 2773  	       CHARGE.ID,
14:28:24 2774  	       CHARGE.CHARGE_STATUS_ID,
14:28:24 2775  	       CHARGE.CHARGE_AMOUNT
14:28:24 2776  	     FROM
14:28:24 2777  	       CHARGE
14:28:24 2778  	     WHERE
14:28:24 2779  	       CHARGE.INVOICE_ID = f_invoice.ID
14:28:24 2780  	   )
14:28:24 2781  	   LOOP
14:28:24 2782  
14:28:24 2783  	     -- Charge amount < 0     => it is a refund
14:28:24 2784  	     -- Charge status is OPEN => means that it is not processed yet
14:28:24 2785  	     IF f_charge.CHARGE_AMOUNT < 0
14:28:24 2786  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED THEN
14:28:24 2787  	       var_local_result := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2788  	     END IF;
14:28:24 2789  
14:28:24 2790  	   END LOOP;
14:28:24 2791  
14:28:24 2792  	 END LOOP;
14:28:24 2793  
14:28:24 2794  	 IF var_local_result IS NULL THEN
14:28:24 2795  	   out_result := GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 2796  	 ELSE
14:28:24 2797  	   out_result := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2798  	 END IF;
14:28:24 2799  
14:28:24 2800  EXCEPTION
14:28:24 2801  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 2802  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2803  	   SPROC_NAME, 'No such transaction id');
14:28:24 2804  WHEN OTHERS THEN
14:28:24 2805  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2806  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2807  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
14:28:24 2808  
14:28:24 2809  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
14:28:24 2810  	 in_group_id	    IN NUMBER,
14:28:24 2811  	 in_offer_chain_id  IN NUMBER,
14:28:24 2812  	 out_result	    OUT NUMBER
14:28:24 2813  ) AS
14:28:24 2814  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
14:28:24 2815  -- VARIABLES
14:28:24 2816  temp_acct_id	    NUMBER;
14:28:24 2817  temp_oc_id	    NUMBER;
14:28:24 2818  -- EXCEPTIONS
14:28:24 2819  BAD_GROUP_ID EXCEPTION;
14:28:24 2820  BAD_OFFER_CHAIN_ID EXCEPTION;
14:28:24 2821  BEGIN
14:28:24 2822  	 -- Check that group id exists
14:28:24 2823  	 BEGIN
14:28:24 2824  	   SELECT
14:28:24 2825  	     ACCOUNT.ID into temp_acct_id
14:28:24 2826  	   FROM
14:28:24 2827  	     ACCOUNT
14:28:24 2828  	   WHERE
14:28:24 2829  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:24 2830  	   EXCEPTION
14:28:24 2831  	     WHEN NO_DATA_FOUND THEN
14:28:24 2832  	       RAISE BAD_GROUP_ID;
14:28:24 2833  	 END;
14:28:24 2834  	 -- Check that offer chain id exists
14:28:24 2835  	 BEGIN
14:28:24 2836  	   SELECT
14:28:24 2837  	     OFFER_CHAIN.ID into temp_oc_id
14:28:24 2838  	   FROM
14:28:24 2839  	     OFFER_CHAIN
14:28:24 2840  	   WHERE
14:28:24 2841  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:28:24 2842  	   EXCEPTION
14:28:24 2843  	     WHEN NO_DATA_FOUND THEN
14:28:24 2844  	       RAISE BAD_OFFER_CHAIN_ID;
14:28:24 2845  	 END;
14:28:24 2846  	 SELECT
14:28:24 2847  	   COUNT(*) into out_result
14:28:24 2848  	 FROM
14:28:24 2849  	   SUBSCRIPTION
14:28:24 2850  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:28:24 2851  	 WHERE
14:28:24 2852  	   ACCOUNT.GROUP_ID = in_group_id
14:28:24 2853  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 2854  	   AND (
14:28:24 2855  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 2856  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
14:28:24 2857  
14:28:24 2858  EXCEPTION
14:28:24 2859  WHEN BAD_GROUP_ID THEN
14:28:24 2860  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2861  	   SPROC_NAME, 'No such transaction id');
14:28:24 2862  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:24 2863  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2864  	   SPROC_NAME, 'No such offer chain id');
14:28:24 2865  WHEN OTHERS THEN
14:28:24 2866  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2867  	   sproc_name, 'Unknown error', sqlerrm);
14:28:24 2868  END GET_EXISTING_SUBSCR_NUMBER;
14:28:24 2869  
14:28:24 2870  PROCEDURE GET_EXISTING_SUBSCR_IDS (
14:28:24 2871  	 in_group_id	    IN NUMBER,
14:28:24 2872  	 in_offer_chain_id  IN NUMBER,
14:28:24 2873  	 out_result_set     OUT SYS_REFCURSOR
14:28:24 2874  ) AS
14:28:24 2875  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
14:28:24 2876  -- VARIABLES
14:28:24 2877  temp_acct_id	    NUMBER;
14:28:24 2878  temp_oc_id	    NUMBER;
14:28:24 2879  -- EXCEPTIONS
14:28:24 2880  BAD_GROUP_ID EXCEPTION;
14:28:24 2881  BAD_OFFER_CHAIN_ID EXCEPTION;
14:28:24 2882  BEGIN
14:28:24 2883  
14:28:24 2884  	 -- Check that group id exists
14:28:24 2885  	 BEGIN
14:28:24 2886  	   SELECT
14:28:24 2887  	     ACCOUNT.ID into temp_acct_id
14:28:24 2888  	   FROM
14:28:24 2889  	     ACCOUNT
14:28:24 2890  	   WHERE
14:28:24 2891  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:24 2892  	   EXCEPTION
14:28:24 2893  	     WHEN NO_DATA_FOUND THEN
14:28:24 2894  	       RAISE BAD_GROUP_ID;
14:28:24 2895  	 END;
14:28:24 2896  	 -- Check that offer chain id exists
14:28:24 2897  	 BEGIN
14:28:24 2898  	   SELECT
14:28:24 2899  	     OFFER_CHAIN.ID into temp_oc_id
14:28:24 2900  	   FROM
14:28:24 2901  	     OFFER_CHAIN
14:28:24 2902  	   WHERE
14:28:24 2903  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:28:24 2904  	   EXCEPTION
14:28:24 2905  	     WHEN NO_DATA_FOUND THEN
14:28:24 2906  	       RAISE BAD_OFFER_CHAIN_ID;
14:28:24 2907  	 END;
14:28:24 2908  
14:28:24 2909  	 OPEN out_result_set FOR
14:28:24 2910  	 SELECT
14:28:24 2911  	   SUBSCRIPTION.ID
14:28:24 2912  	 FROM
14:28:24 2913  	   SUBSCRIPTION
14:28:24 2914  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:28:24 2915  	 WHERE
14:28:24 2916  	   ACCOUNT.GROUP_ID = in_group_id
14:28:24 2917  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 2918  	   AND (
14:28:24 2919  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 2920  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
14:28:24 2921  
14:28:24 2922  EXCEPTION
14:28:24 2923  WHEN BAD_GROUP_ID THEN
14:28:24 2924  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2925  	   SPROC_NAME, 'No such transaction id');
14:28:24 2926  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:24 2927  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2928  	   SPROC_NAME, 'No such offer chain id');
14:28:24 2929  WHEN OTHERS THEN
14:28:24 2930  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2931  	   sproc_name, 'Unknown error', sqlerrm);
14:28:24 2932  END GET_EXISTING_SUBSCR_IDS;
14:28:24 2933  
14:28:24 2934  PROCEDURE ADD_META_DATA (
14:28:24 2935  	 in_subscription_id IN NUMBER,
14:28:24 2936  	 in_name	    IN VARCHAR2,
14:28:24 2937  	 in_value	    IN VARCHAR2,
14:28:24 2938  	 in_created_by	    IN VARCHAR2
14:28:24 2939  ) AS
14:28:24 2940  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
14:28:24 2941  BEGIN
14:28:24 2942  
14:28:24 2943  	 INSERT INTO SUBSCRIPTION_META_DATA (
14:28:24 2944  	   ID,
14:28:24 2945  	   SUBSCRIPTION_ID,
14:28:24 2946  	   NAME,
14:28:24 2947  	   VALUE,
14:28:24 2948  	   CREATE_DATE,
14:28:24 2949  	   CREATED_BY
14:28:24 2950  	 ) VALUES (
14:28:24 2951  	   SUBMD_ID_SEQ.nextVal,
14:28:24 2952  	   in_subscription_id,
14:28:24 2953  	   in_name,
14:28:24 2954  	   in_value,
14:28:24 2955  	   sysdate,
14:28:24 2956  	   in_created_by
14:28:24 2957  	 );
14:28:24 2958  
14:28:24 2959  EXCEPTION
14:28:24 2960  WHEN OTHERS THEN
14:28:24 2961  	 IF SQLCODE = -2291 THEN
14:28:24 2962  	   PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2963  	     SPROC_NAME, 'No such subscription');
14:28:24 2964  	 ELSE
14:28:24 2965  	   PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2966  	     SPROC_NAME, 'Unknown error', sqlerrm);
14:28:24 2967  	 END IF;
14:28:24 2968  END ADD_META_DATA;
14:28:24 2969  
14:28:24 2970  /******************************************************************************/
14:28:24 2971  
14:28:24 2972  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
14:28:24 2973  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
14:28:24 2974  	 out_result_set       OUT SYS_REFCURSOR
14:28:24 2975  ) AS
14:28:24 2976  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
14:28:24 2977  -- Exceptions
14:28:24 2978  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
14:28:24 2979  BEGIN
14:28:24 2980  
14:28:24 2981  	 IF in_subscriptions_ids IS NULL THEN
14:28:24 2982  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
14:28:24 2983  	 END IF;
14:28:24 2984  
14:28:24 2985  	 OPEN out_result_set FOR
14:28:24 2986  	 SELECT
14:28:24 2987  	   SMD.SUBSCRIPTION_ID,
14:28:24 2988  	   SMD.NAME,
14:28:24 2989  	   SMD.VALUE
14:28:24 2990  	 FROM
14:28:24 2991  	   SUBSCRIPTION_META_DATA SMD
14:28:24 2992  	 WHERE
14:28:24 2993  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
14:28:24 2994  
14:28:24 2995  EXCEPTION
14:28:24 2996  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
14:28:24 2997  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2998  	   SPROC_NAME, 'Bad subscription ids parameter');
14:28:24 2999  WHEN OTHERS THEN
14:28:24 3000  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 3001  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 3002  END GET_SUBSCRIPTIONS_META_DATA;
14:28:24 3003  
14:28:24 3004  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
14:28:24 3005  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
14:28:24 3006  	 out_result_set     OUT SYS_REFCURSOR
14:28:24 3007  ) AS
14:28:24 3008  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
14:28:24 3009  BEGIN
14:28:24 3010  	 OPEN out_result_set FOR
14:28:24 3011  	 SELECT subscription.id FROM
14:28:24 3012  	   subscription
14:28:24 3013  	 INNER JOIN license ON license.subscription_id = subscription.id
14:28:24 3014  	 INNER JOIN invoice ON invoice.id = license.invoice_id
14:28:24 3015  	 INNER JOIN charge ON invoice.id = charge.invoice_id
14:28:24 3016  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
14:28:24 3017  	 WHERE transaction.order_id = in_order_id;
14:28:24 3018  EXCEPTION
14:28:24 3019  WHEN OTHERS THEN
14:28:24 3020  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 3021  	   SPROC_NAME, 'Unknown error', sqlerrm);
14:28:24 3022  END GET_SUBS_BY_TRNS_ORDER_ID;
14:28:24 3023  
14:28:24 3024  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
14:28:24 3025  	(
14:28:24 3026  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:28:24 3027  	 out_result_set      OUT SYS_REFCURSOR
14:28:24 3028  )
14:28:24 3029  AS
14:28:24 3030  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
14:28:24 3031  BEGIN
14:28:24 3032  	 OPEN out_result_set FOR
14:28:24 3033  	 SELECT
14:28:24 3034  	   c.ID,
14:28:24 3035  	   c.TRANSACTION_ID,
14:28:24 3036  	   c.INSTRUMENT_ID,
14:28:24 3037  	   c.INSTRUMENT_TYPE_ID,
14:28:24 3038  	   c.CHARGE_AMOUNT,
14:28:24 3039  	   c.CREATE_DATE,
14:28:24 3040  	   c.CREATED_BY,
14:28:24 3041  	   c.INVOICE_ID
14:28:24 3042  	  FROM
14:28:24 3043  	   subscription s,
14:28:24 3044  	   license l,
14:28:24 3045  	   charge c
14:28:24 3046  	 WHERE
14:28:24 3047  	   s.id = l.subscription_id and
14:28:24 3048  	   l.invoice_id = c.invoice_id and
14:28:24 3049  	   c.charge_status_id = GLOBAL_STATUSES_V23.CHARGE_OPENED and
14:28:24 3050  	   exists (
14:28:24 3051  	     select null
14:28:24 3052  	     from transaction t
14:28:24 3053  	     where
14:28:24 3054  	       t.id = c.transaction_id
14:28:24 3055  	   ) and
14:28:24 3056  	   s.id = in_subscription_id;
14:28:24 3057  EXCEPTION
14:28:24 3058  WHEN OTHERS THEN
14:28:24 3059  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 3060  	   SPROC_NAME, 'Unknown error', sqlerrm);
14:28:24 3061  END GET_OPEN_CHARGES_BY_SUBID;
14:28:24 3062  
14:28:24 3063  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
14:28:24 3064  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
14:28:24 3065  ) RETURN NUMBER
14:28:24 3066  AS
14:28:24 3067  var_gift_certificate_id NUMBER;
14:28:24 3068  BEGIN
14:28:24 3069  	     SELECT id INTO var_gift_certificate_id
14:28:24 3070  	     FROM
14:28:24 3071  	       gift_certificate gc
14:28:24 3072  	     WHERE
14:28:24 3073  	       gc.finalized_invoice_id in (
14:28:24 3074  		 SELECT invoice_id
14:28:24 3075  		 FROM (
14:28:24 3076  		   SELECT l.invoice_id
14:28:24 3077  		   FROM
14:28:24 3078  		     license l
14:28:24 3079  		   WHERE
14:28:24 3080  		     l.subscription_id = in_subscription_id
14:28:24 3081  		   ORDER BY l.create_date asc
14:28:24 3082  		 )
14:28:24 3083  	       )
14:28:24 3084  	       and rownum <= 1;
14:28:24 3085  	     return var_gift_certificate_id;
14:28:24 3086  END GET_GIFT_CERT_ID_BY_SUB_ID;
14:28:24 3087  
14:28:24 3088  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
14:28:24 3089  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
14:28:24 3090  ) RETURN VARCHAR2
14:28:24 3091  AS
14:28:24 3092  var_gift_certificate_code VARCHAR2(255 BYTE);
14:28:24 3093  BEGIN
14:28:24 3094  	     SELECT code INTO var_gift_certificate_code
14:28:24 3095  	     FROM
14:28:24 3096  	       gift_certificate gc
14:28:24 3097  	     WHERE
14:28:24 3098  	       gc.finalized_invoice_id in (
14:28:24 3099  		 SELECT invoice_id
14:28:24 3100  		 FROM (
14:28:24 3101  		   SELECT l.invoice_id
14:28:24 3102  		   FROM
14:28:24 3103  		     license l
14:28:24 3104  		   WHERE
14:28:24 3105  		     l.subscription_id = in_subscription_id
14:28:24 3106  		 )
14:28:24 3107  	       )
14:28:24 3108  	       and rownum <= 1;
14:28:24 3109  	     return var_gift_certificate_code;
14:28:24 3110  END GET_GIFT_CERT_CODE_BY_SUB_ID;
14:28:24 3111  
14:28:24 3112  PROCEDURE GET_ACTIVE_MEU_SUBS (
14:28:24 3113  	 out_result_set      OUT SYS_REFCURSOR
14:28:24 3114  )
14:28:24 3115  AS
14:28:24 3116  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
14:28:24 3117  BEGIN
14:28:24 3118  	 OPEN out_result_set FOR
14:28:24 3119  	       SELECT
14:28:24 3120  		   s.id,
14:28:24 3121  		   s.instrument_type_id,
14:28:24 3122  		   s.instrument_id,
14:28:24 3123  		   a.group_id,
14:28:24 3124  		   s.offer_chain_id
14:28:24 3125  	       FROM
14:28:24 3126  		   core_owner.subscription s,
14:28:24 3127  		   core_owner.account a
14:28:24 3128  	       WHERE
14:28:24 3129  		   a.id = s.account_id AND(
14:28:24 3130  		       s.offer_chain_id = 1745992781 OR
14:28:24 3131  		       s.offer_chain_id = 3902149773 OR
14:28:24 3132  		       s.offer_chain_id = 2240201337) AND
14:28:24 3133  		   NOT EXISTS
14:28:24 3134  		   (
14:28:24 3135  		       SELECT
14:28:24 3136  			   1
14:28:24 3137  		       FROM
14:28:24 3138  			   core_owner.subscription ss
14:28:24 3139  		       WHERE
14:28:24 3140  			   ss.account_id = a.id AND(
14:28:24 3141  			       ss.offer_chain_id = 2794122734 OR
14:28:24 3142  			       ss.offer_chain_id = 3564368005 OR
14:28:24 3143  			       ss.offer_chain_id = 757934392)) AND
14:28:24 3144  		   rownum < 5000;
14:28:24 3145  END GET_ACTIVE_MEU_SUBS;
14:28:24 3146  
14:28:24 3147  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
14:28:24 3148  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:28:24 3149  	 out_offer_id	     OUT LICENSE.ID%TYPE
14:28:24 3150  )
14:28:24 3151  AS
14:28:24 3152  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
14:28:24 3153  BEGIN
14:28:24 3154  	 SELECT OFFER_ID INTO out_offer_id
14:28:24 3155  	 FROM LICENSE L,
14:28:24 3156  	 (
14:28:24 3157  	   SELECT MIN(ID) ID FROM LICENSE
14:28:24 3158  	   WHERE SUBSCRIPTION_ID = in_subscription_id
14:28:24 3159  	   AND LICENSE_STATUS_ID = 2
14:28:24 3160  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
14:28:24 3161  	 ) EARLIEST_ACTIVE_LICENSE
14:28:24 3162  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
14:28:24 3163  END GET_EARLIEST_ACTIVE_OFFER_ID;
14:28:24 3164  
14:28:24 3165  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
14:28:24 3166  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
14:28:24 3167  	 out_license_id      OUT LICENSE.ID%TYPE
14:28:24 3168  )
14:28:24 3169  AS
14:28:24 3170  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
14:28:24 3171  BEGIN
14:28:24 3172  	 SELECT MIN(ID) into out_license_id
14:28:24 3173  	 FROM LICENSE
14:28:24 3174  	 WHERE SUBSCRIPTION_ID = in_subscription_id
14:28:24 3175  	   AND LICENSE_STATUS_ID = 2
14:28:24 3176  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
14:28:24 3177  END GET_EARLIEST_ACTIVE_LICENSE_ID;
14:28:24 3178  
14:28:24 3179  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
14:28:24 3180  	 out_result_set      OUT SYS_REFCURSOR
14:28:24 3181  )
14:28:24 3182  AS
14:28:24 3183  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
14:28:24 3184  BEGIN
14:28:24 3185  	 OPEN out_result_set FOR
14:28:24 3186  	   SELECT
14:28:24 3187  	     s.id
14:28:24 3188  	   FROM
14:28:24 3189  	     core_owner.transaction t
14:28:24 3190  	   INNER JOIN
14:28:24 3191  	     core_owner.charge c
14:28:24 3192  	   ON
14:28:24 3193  	     c.transaction_id = t.id
14:28:24 3194  	   INNER JOIN
14:28:24 3195  	     core_owner.invoice i
14:28:24 3196  	   ON
14:28:24 3197  	     i.id = c.invoice_id
14:28:24 3198  	   INNER JOIN
14:28:24 3199  	     core_owner.license l
14:28:24 3200  	   ON
14:28:24 3201  	     i.id = l.invoice_id
14:28:24 3202  	   INNER JOIN
14:28:24 3203  	     core_owner.subscription s
14:28:24 3204  	   ON
14:28:24 3205  	     l.subscription_id = s.id
14:28:24 3206  	   INNER JOIN
14:28:24 3207  	     core_owner.account a
14:28:24 3208  	   ON
14:28:24 3209  	     s.account_id = a.id
14:28:24 3210  	   JOIN
14:28:24 3211  	     core_owner.rcn_cpt_chargeback_act_detail ccad
14:28:24 3212  	   ON
14:28:24 3213  	     t.order_id = ccad.merchant_order_number
14:28:24 3214  	   WHERE
14:28:24 3215  	     ccad.chargeback_category = 'RECD'
14:28:24 3216  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
14:28:24 3217  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
14:28:24 3218  
14:28:24 3219  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
14:28:24 3220  	 out_result_set      OUT SYS_REFCURSOR
14:28:24 3221  )
14:28:24 3222  AS
14:28:24 3223  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
14:28:24 3224  BEGIN
14:28:24 3225  	 OPEN out_result_set FOR
14:28:24 3226  	   SELECT
14:28:24 3227  	     s.id
14:28:24 3228  	   FROM
14:28:24 3229  	     core_owner.transaction t
14:28:24 3230  	   INNER JOIN
14:28:24 3231  	     core_owner.charge c
14:28:24 3232  	   ON
14:28:24 3233  	     c.transaction_id = t.id
14:28:24 3234  	   INNER JOIN
14:28:24 3235  	     core_owner.invoice i
14:28:24 3236  	   ON
14:28:24 3237  	     i.id = c.invoice_id
14:28:24 3238  	   INNER JOIN
14:28:24 3239  	     core_owner.license l
14:28:24 3240  	   ON
14:28:24 3241  	     i.id = l.invoice_id
14:28:24 3242  	   INNER JOIN
14:28:24 3243  	     core_owner.subscription s
14:28:24 3244  	   ON
14:28:24 3245  	     l.subscription_id = s.id
14:28:24 3246  	   INNER JOIN
14:28:24 3247  	     core_owner.account a
14:28:24 3248  	   ON
14:28:24 3249  	     s.account_id = a.id
14:28:24 3250  	   INNER JOIN
14:28:24 3251  	     core_owner.rcn_pp_trans_detail ptd
14:28:24 3252  	   ON
14:28:24 3253  	     t.order_id = ptd.invoice_id
14:28:24 3254  	   WHERE
14:28:24 3255  	     ptd.trans_status = 'D'
14:28:24 3256  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
14:28:24 3257  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
14:28:24 3258  
14:28:24 3259  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
14:28:24 3260  	 in_max_days_until_close IN NUMBER,
14:28:24 3261  	 in_num_subs_to_fetch	 IN NUMBER,
14:28:24 3262  	 out_result_set 	 OUT SYS_REFCURSOR
14:28:24 3263  )
14:28:24 3264  AS
14:28:24 3265  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GRACE_PERIOD_SUB_REGIS';
14:28:24 3266  BEGIN
14:28:24 3267  	 OPEN out_result_set FOR
14:28:24 3268  	 SELECT
14:28:24 3269  	     *
14:28:24 3270  	 FROM
14:28:24 3271  	     (
14:28:24 3272  		 SELECT
14:28:24 3273  		     a.group_id group_id,
14:28:24 3274  		     l.grace_end_date grace_end_date
14:28:24 3275  		 FROM
14:28:24 3276  		     license l
14:28:24 3277  		 JOIN
14:28:24 3278  		     subscription s
14:28:24 3279  		 ON
14:28:24 3280  		     s.id = l.subscription_id
14:28:24 3281  		 JOIN
14:28:24 3282  		     account a
14:28:24 3283  		 ON
14:28:24 3284  		     a.id = s.account_id
14:28:24 3285  		 WHERE
14:28:24 3286  		     l.license_status_id = GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD
14:28:24 3287  		 AND l.grace_end_date - SYSDATE <= in_max_days_until_close
14:28:24 3288  		 AND NOT EXISTS
14:28:24 3289  		     (
14:28:24 3290  			 SELECT
14:28:24 3291  			     NULL
14:28:24 3292  			 FROM
14:28:24 3293  			     process_retry_throttle
14:28:24 3294  			 WHERE
14:28:24 3295  			     process_name = sproc_name
14:28:24 3296  			 AND generic_id = a.group_id)
14:28:24 3297  		 AND rownum <= in_num_subs_to_fetch * 10
14:28:24 3298  		 ORDER BY
14:28:24 3299  		     dbms_random.value)
14:28:24 3300  	 WHERE
14:28:24 3301  	     rownum <= in_num_subs_to_fetch;
14:28:24 3302  END GET_GRACE_PERIOD_SUB_REGIS;
14:28:24 3303  
14:28:24 3304  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
14:28:24 3305  	 out_result_set      OUT SYS_REFCURSOR
14:28:24 3306  )
14:28:24 3307  AS
14:28:24 3308  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_AMEX_CB';
14:28:24 3309  BEGIN
14:28:24 3310  	 OPEN out_result_set FOR
14:28:24 3311  	   SELECT
14:28:24 3312  	     s.id
14:28:24 3313  	   FROM
14:28:24 3314  	     core_owner.transaction t
14:28:24 3315  	   INNER JOIN
14:28:24 3316  	     core_owner.charge c
14:28:24 3317  	   ON
14:28:24 3318  	     c.transaction_id = t.id
14:28:24 3319  	   INNER JOIN
14:28:24 3320  	     core_owner.invoice i
14:28:24 3321  	   ON
14:28:24 3322  	     i.id = c.invoice_id
14:28:24 3323  	   INNER JOIN
14:28:24 3324  	     core_owner.license l
14:28:24 3325  	   ON
14:28:24 3326  	     i.id = l.invoice_id
14:28:24 3327  	   INNER JOIN
14:28:24 3328  	     core_owner.subscription s
14:28:24 3329  	   ON
14:28:24 3330  	     l.subscription_id = s.id
14:28:24 3331  	   INNER JOIN
14:28:24 3332  	     core_owner.account a
14:28:24 3333  	   ON
14:28:24 3334  	     s.account_id = a.id
14:28:24 3335  	   INNER JOIN
14:28:24 3336  	     core_owner.rcn_amex_chargeback ac
14:28:24 3337  	   ON
14:28:24 3338  	     t.order_id = lower(ac.ind_ref_number)
14:28:24 3339  	   WHERE
14:28:24 3340  	     s.subscription_status_id in (GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
14:28:24 3341  END GET_ACT_SUBS_W_AMEX_CB;
14:28:24 3342  
14:28:24 3343  END PROCS_SUBSCRIPTION_V23;
14:28:24 3344  .
14:28:24 SQL> /

Package body created.

Elapsed: 00:00:00.27
14:28:24 SQL> 
14:28:24 SQL> prompt Compiling body for procs_invoice.sql
Compiling body for procs_invoice.sql
14:28:24 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V23" AS
14:28:24   2  
14:28:24   3  PROCEDURE GET_INVOICE_IDS(
14:28:24   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
14:28:24   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
14:28:24   6  	out_result_set OUT SYS_REFCURSOR
14:28:24   7  ) AS
14:28:24   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_INVOICE_IDS';
14:28:24   9  BEGIN
14:28:24  10  	OPEN out_result_set FOR
14:28:24  11  	  SELECT
14:28:24  12  	    Invoice.ID
14:28:24  13  	  FROM
14:28:24  14  	      Invoice
14:28:24  15  	      INNER JOIN License
14:28:24  16  		ON
14:28:24  17  		  License.Invoice_Id = Invoice.Id
14:28:24  18  	      INNER JOIN Subscription
14:28:24  19  		ON
14:28:24  20  		  License.Subscription_Id = Subscription.Id
14:28:24  21  	      INNER JOIN account
14:28:24  22  		ON
14:28:24  23  		  Subscription.Account_Id = account.id
14:28:24  24  	  WHERE
14:28:24  25  	    Account.Group_Id = in_group_id
14:28:24  26  	    AND SUBSCRIPTION.INSTRUMENT_ID = in_fin_id
14:28:24  27  	    AND Invoice.Invoice_Status_Id = GLOBAL_STATUSES_V23.INVOICE_OPEN;
14:28:24  28  END GET_INVOICE_IDS;
14:28:24  29  
14:28:24  30  
14:28:24  31  PROCEDURE IS_INVOICE_FOR_GC (
14:28:24  32  	in_invoice_id IN NUMBER,
14:28:24  33  	out_result    OUT NUMBER
14:28:24  34  ) AS
14:28:24  35  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
14:28:24  36  var_is_for_gc NUMBER;
14:28:24  37  BEGIN
14:28:24  38  	SELECT
14:28:24  39  	  count(1) into var_is_for_gc
14:28:24  40  	FROM GIFT_CERTIFICATE GC
14:28:24  41  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
14:28:24  42  
14:28:24  43  	IF var_is_for_gc > 0 THEN
14:28:24  44  	  out_result := 1;
14:28:24  45  	ELSE
14:28:24  46  	  out_result := 0;
14:28:24  47  	END IF;
14:28:24  48  END IS_INVOICE_FOR_GC;
14:28:24  49  
14:28:24  50  PROCEDURE CREATE_INVOICE(
14:28:24  51  /*
14:28:24  52  Throws exceptions:
14:28:24  53  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24  54  */
14:28:24  55  	  in_invoice_status IN NUMBER,
14:28:24  56  	  in_created_by     IN VARCHAR2,
14:28:24  57  	  in_tax_exempt_id  IN VARCHAR2,
14:28:24  58  	  out_invoice_id    OUT NUMBER
14:28:24  59  ) AS
14:28:24  60  -- VARIABLES
14:28:24  61  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
14:28:24  62  var_new_invoice_id NUMBER;
14:28:24  63  -- EXCEPTIONS
14:28:24  64  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24  65  BEGIN
14:28:24  66  
14:28:24  67  	PROCS_INVOICE_CRU_V23.CREATE_INVOICE(
14:28:24  68  	  out_invoice_id		 => var_new_invoice_id,
14:28:24  69  	  in_created_by 		 => in_created_by,
14:28:24  70  	  in_invoice_status_id		 => in_invoice_status,
14:28:24  71  	  in_tax_exempt_id		 => in_tax_exempt_id
14:28:24  72  	);
14:28:24  73  
14:28:24  74  	out_invoice_id := var_new_invoice_id;
14:28:24  75  
14:28:24  76  EXCEPTION
14:28:24  77  WHEN OTHERS THEN
14:28:24  78  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24  80  END CREATE_INVOICE;
14:28:24  81  
14:28:24  82  /************************************************************/
14:28:24  83  
14:28:24  84  PROCEDURE GET_PENDING_INVOICES (
14:28:24  85  /*
14:28:24  86  Throws exceptions:
14:28:24  87  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24  88  */
14:28:24  89  	out_result_set	     OUT SYS_REFCURSOR,
14:28:24  90  	in_row_number	     IN NUMBER DEFAULT NULL
14:28:24  91  ) AS
14:28:24  92  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
14:28:24  93  -- COMSTANTS
14:28:24  94  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
14:28:24  95  -- VARIABLES
14:28:24  96  var_row_number NUMBER;
14:28:24  97  BEGIN
14:28:24  98  
14:28:24  99  	IF in_row_number IS NULL THEN
14:28:24 100  	  var_row_number := DEFAULT_ROW_NUMBER;
14:28:24 101  	ELSE
14:28:24 102  	  var_row_number := in_row_number;
14:28:24 103  	END IF;
14:28:24 104  
14:28:24 105  	-- Invoices with one or more payments(charges) with transaction status PENDING
14:28:24 106  	OPEN out_result_set FOR
14:28:24 107  SELECT * FROM
14:28:24 108  (
14:28:24 109  	SELECT
14:28:24 110  	  INVOICE.ID
14:28:24 111  	FROM
14:28:24 112  	  CHARGE
14:28:24 113  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
14:28:24 114  	WHERE
14:28:24 115  	  EXISTS(
14:28:24 116  	    SELECT NULL
14:28:24 117  	    FROM TRANSACTION
14:28:24 118  	    WHERE
14:28:24 119  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING
14:28:24 120  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
14:28:24 121  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V23.TRUE
14:28:24 122  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
14:28:24 123  	  )
14:28:24 124  	  AND
14:28:24 125  	  NOT EXISTS(
14:28:24 126  	    SELECT NULL
14:28:24 127  	    FROM PROCESS_RETRY_THROTTLE
14:28:24 128  	    WHERE PROCESS_NAME = SPROC_NAME
14:28:24 129  	      AND GENERIC_ID = INVOICE.ID
14:28:24 130  	  )
14:28:24 131  	  AND ROWNUM <= var_row_number*10
14:28:24 132  	  ORDER BY dbms_random.value
14:28:24 133  ) WHERE
14:28:24 134  	  ROWNUM <= var_row_number;
14:28:24 135  
14:28:24 136  EXCEPTION
14:28:24 137  WHEN OTHERS THEN
14:28:24 138  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 139  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 140  END GET_PENDING_INVOICES;
14:28:24 141  
14:28:24 142  /************************************************************/
14:28:24 143  
14:28:24 144  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
14:28:24 145  	in_invoice_id IN  NUMBER
14:28:24 146  ) RETURN NUMBER AS
14:28:24 147  var_amount NUMBER;
14:28:24 148  BEGIN
14:28:24 149  
14:28:24 150  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
14:28:24 151  	RETURN var_amount;
14:28:24 152  
14:28:24 153  END;
14:28:24 154  
14:28:24 155  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:28:24 156  /*
14:28:24 157  Throws exceptions:
14:28:24 158  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 159  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 160  */
14:28:24 161  	in_invoice_id IN  NUMBER,
14:28:24 162  	out_amount    OUT NUMBER
14:28:24 163  ) AS
14:28:24 164  -- VARIABLES
14:28:24 165  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
14:28:24 166  temp_invoice_id	     NUMBER;
14:28:24 167  var_total_amount	     NUMBER(10,6);
14:28:24 168  var_final_amount	     NUMBER(10,2);
14:28:24 169  var_line_item_amount   NUMBER(10,6);
14:28:24 170  
14:28:24 171  var_line_items_set     SYS_REFCURSOR;
14:28:24 172  var_line_item_id	     NUMBER;
14:28:24 173  var_line_item_quantity NUMBER;
14:28:24 174  var_line_item_price    NUMBER (10,2);
14:28:24 175  
14:28:24 176  var_discount_fixed_amount NUMBER (10,2);
14:28:24 177  var_discount_percent_amount NUMBER (10,2);
14:28:24 178  
14:28:24 179  -- EXCEPTIONS
14:28:24 180  BAD_INVOICE_ID		    EXCEPTION;
14:28:24 181  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
14:28:24 182  EXCEPTION_MESSAGE VARCHAR2(1024);
14:28:24 183  BEGIN
14:28:24 184  
14:28:24 185  	var_total_amount := 0;
14:28:24 186  
14:28:24 187  	-- Check that given invoice exists
14:28:24 188  	BEGIN
14:28:24 189  	  SELECT
14:28:24 190  	    INVOICE.ID into temp_invoice_id
14:28:24 191  	  FROM
14:28:24 192  	    INVOICE
14:28:24 193  	  WHERE
14:28:24 194  	    INVOICE.ID = in_invoice_id
14:28:24 195  	    AND ROWNUM <= 1;
14:28:24 196  	  EXCEPTION
14:28:24 197  	    WHEN NO_DATA_FOUND THEN
14:28:24 198  	      RAISE BAD_INVOICE_ID;
14:28:24 199  	END;
14:28:24 200  
14:28:24 201  	-- Calculate amount for each line item in invoice
14:28:24 202  	FOR f_line_item IN (
14:28:24 203  	  SELECT
14:28:24 204  	    LINE_ITEM.ID
14:28:24 205  	  FROM
14:28:24 206  	    LINE_ITEM
14:28:24 207  	  WHERE
14:28:24 208  	    LINE_ITEM.INVOICE_ID = in_invoice_id
14:28:24 209  	)
14:28:24 210  	LOOP
14:28:24 211  	  BEGIN
14:28:24 212  	    PROCS_LINE_ITEMS_V23.CALCULATE_LINE_ITEM_AMOUNT(
14:28:24 213  	      in_line_item_id => f_line_item.ID,
14:28:24 214  	      out_amount      => var_line_item_amount
14:28:24 215  	    );
14:28:24 216  	    var_total_amount := var_total_amount + var_line_item_amount;
14:28:24 217  	    EXCEPTION
14:28:24 218  	      WHEN OTHERS THEN
14:28:24 219  		EXCEPTION_MESSAGE := SQLERRM;
14:28:24 220  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
14:28:24 221  	  END;
14:28:24 222  	END LOOP;
14:28:24 223  	var_final_amount := var_total_amount;
14:28:24 224  	out_amount := var_final_amount;
14:28:24 225  
14:28:24 226  EXCEPTION
14:28:24 227  WHEN BAD_INVOICE_ID THEN
14:28:24 228  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 229  	  SPROC_NAME, 'No such invoice');
14:28:24 230  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
14:28:24 231  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 232  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
14:28:24 233  WHEN OTHERS THEN
14:28:24 234  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 235  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 236  END;
14:28:24 237  
14:28:24 238  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
14:28:24 239  /*
14:28:24 240  Throws exceptions:
14:28:24 241  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 242  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 243  */
14:28:24 244  	in_invoice_id  IN  NUMBER,
14:28:24 245  	out_account_id OUT NUMBER
14:28:24 246  ) AS
14:28:24 247  -- VARIABLES
14:28:24 248  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
14:28:24 249  temp_gc_account_id NUMBER;
14:28:24 250  temp_ss_account_id NUMBER;
14:28:24 251  temp_invoice_id	 NUMBER;
14:28:24 252  -- EXCEPTIONS
14:28:24 253  BAD_INVOICE_ID	   EXCEPTION;
14:28:24 254  CAN_NOT_FIND_ACCOUNT EXCEPTION;
14:28:24 255  BEGIN
14:28:24 256  
14:28:24 257  	-- Check that given invoice exists
14:28:24 258  	BEGIN
14:28:24 259  	  SELECT
14:28:24 260  	    INVOICE.ID into temp_invoice_id
14:28:24 261  	  FROM
14:28:24 262  	    INVOICE
14:28:24 263  	  WHERE
14:28:24 264  	    INVOICE.ID = in_invoice_id;
14:28:24 265  	  EXCEPTION
14:28:24 266  	    WHEN NO_DATA_FOUND THEN
14:28:24 267  	      RAISE BAD_INVOICE_ID;
14:28:24 268  	END;
14:28:24 269  
14:28:24 270  	-- Try to find gift certificate with given invoice
14:28:24 271  	BEGIN
14:28:24 272  	  SELECT
14:28:24 273  	    ACCOUNT.GROUP_ID into temp_gc_account_id
14:28:24 274  	  FROM
14:28:24 275  	    GIFT_CERTIFICATE
14:28:24 276  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
14:28:24 277  	  WHERE
14:28:24 278  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
14:28:24 279  	    AND ROWNUM <= 1;
14:28:24 280  	  EXCEPTION
14:28:24 281  	    WHEN NO_DATA_FOUND THEN
14:28:24 282  	      temp_gc_account_id := NULL;
14:28:24 283  	END;
14:28:24 284  
14:28:24 285  	-- check subscriptions for given invoice
14:28:24 286  	IF temp_gc_account_id IS NOT NULL THEN
14:28:24 287  	  out_account_id := temp_gc_account_id;
14:28:24 288  	ELSE
14:28:24 289  	  BEGIN
14:28:24 290  	    SELECT
14:28:24 291  	      ACCOUNT.GROUP_ID into temp_ss_account_id
14:28:24 292  	    FROM
14:28:24 293  	      LICENSE
14:28:24 294  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 295  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:28:24 296  	    WHERE
14:28:24 297  	      LICENSE.INVOICE_ID = in_invoice_id
14:28:24 298  	      AND ROWNUM <= 1;
14:28:24 299  	    EXCEPTION
14:28:24 300  	      WHEN NO_DATA_FOUND THEN
14:28:24 301  		temp_ss_account_id := NULL;
14:28:24 302  	  END;
14:28:24 303  	  IF temp_ss_account_id IS NULL THEN
14:28:24 304  	    RAISE CAN_NOT_FIND_ACCOUNT;
14:28:24 305  	  ELSE
14:28:24 306  	    out_account_id := temp_ss_account_id;
14:28:24 307  	  END IF;
14:28:24 308  	END IF;
14:28:24 309  
14:28:24 310  EXCEPTION
14:28:24 311  WHEN BAD_INVOICE_ID THEN
14:28:24 312  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 313  	  SPROC_NAME, 'No such invoice');
14:28:24 314  WHEN CAN_NOT_FIND_ACCOUNT THEN
14:28:24 315  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 316  	  SPROC_NAME, 'Could not find account by given invoice id');
14:28:24 317  WHEN OTHERS THEN
14:28:24 318  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 320  END GET_ACCOUNT_BY_INVOICE_ID;
14:28:24 321  
14:28:24 322  /*****************************************************************/
14:28:24 323  
14:28:24 324  PROCEDURE GET_INVOICE_DETAILS (
14:28:24 325  /*
14:28:24 326  Throws exceptions:
14:28:24 327  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 328  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 329  */
14:28:24 330  	in_invoice_id	   IN  NUMBER,
14:28:24 331  	out_group_id	   OUT NUMBER,
14:28:24 332  	out_status_id	   OUT NUMBER,
14:28:24 333  	out_line_items_set OUT SYS_REFCURSOR,
14:28:24 334  	out_pp_charges_set OUT SYS_REFCURSOR,
14:28:24 335  	out_cc_charges_set OUT SYS_REFCURSOR,
14:28:24 336  	out_gc_charges_set OUT SYS_REFCURSOR
14:28:24 337  ) AS
14:28:24 338  -- VARIABLES
14:28:24 339  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
14:28:24 340  
14:28:24 341  -- EXCEPTIONS
14:28:24 342  BAD_INVOICE_ID	     EXCEPTION;
14:28:24 343  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
14:28:24 344  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 345  BEGIN
14:28:24 346  
14:28:24 347  	-- get invoice status
14:28:24 348  	BEGIN
14:28:24 349  	  SELECT
14:28:24 350  	    INVOICE.INVOICE_STATUS_ID into out_status_id
14:28:24 351  	  FROM
14:28:24 352  	    INVOICE
14:28:24 353  	  WHERE
14:28:24 354  	    INVOICE.ID = in_invoice_id;
14:28:24 355  	  EXCEPTION
14:28:24 356  	    WHEN NO_DATA_FOUND THEN
14:28:24 357  	      RAISE BAD_INVOICE_ID;
14:28:24 358  	END;
14:28:24 359  
14:28:24 360  	-- get group id
14:28:24 361  	BEGIN
14:28:24 362  	  PROCS_INVOICE_V23.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
14:28:24 363  	  EXCEPTION
14:28:24 364  	    WHEN OTHERS THEN
14:28:24 365  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 366  	      RAISE CAN_NOT_FIND_ACCOUNT;
14:28:24 367  	END;
14:28:24 368  
14:28:24 369  	-- get all line items for given invoice
14:28:24 370  	OPEN out_line_items_set FOR
14:28:24 371  	SELECT
14:28:24 372  	  LINE_ITEM.AMOUNT,
14:28:24 373  	  LINE_ITEM.ID,
14:28:24 374  	  LINE_ITEM.CREATED_BY,
14:28:24 375  	  LINE_ITEM.CREATE_DATE,
14:28:24 376  	  LINE_ITEM.DISCOUNT_AMOUNT,
14:28:24 377  	  LINE_ITEM.TAXES_AMOUNT,
14:28:24 378  	  LINE_ITEM.PRODUCT_OFFER_ID,
14:28:24 379  	  LINE_ITEM.INVOICE_ID
14:28:24 380  	FROM
14:28:24 381  	  LINE_ITEM
14:28:24 382  	WHERE
14:28:24 383  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
14:28:24 384  
14:28:24 385  	-- get all pp charges for given invoice
14:28:24 386  	OPEN out_pp_charges_set FOR
14:28:24 387  	SELECT
14:28:24 388  	  CHARGE.ID as "CHARGE_ID",
14:28:24 389  	  CHARGE_AMOUNT,
14:28:24 390  	  CHARGE.INSTRUMENT_ID,
14:28:24 391  	  CHARGE.CHARGE_STATUS_ID
14:28:24 392  	FROM
14:28:24 393  	  CHARGE
14:28:24 394  	WHERE
14:28:24 395  	  CHARGE.INVOICE_ID = in_invoice_id
14:28:24 396  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL;
14:28:24 397  
14:28:24 398  	-- get all credir cards for given invoice
14:28:24 399  	OPEN out_cc_charges_set FOR
14:28:24 400  	SELECT
14:28:24 401  	  CHARGE.ID as "CHARGE_ID",
14:28:24 402  	  CHARGE.CHARGE_AMOUNT,
14:28:24 403  	  CHARGE.INSTRUMENT_ID,
14:28:24 404  	  CHARGE.CHARGE_STATUS_ID
14:28:24 405  	FROM
14:28:24 406  	  CHARGE
14:28:24 407  	WHERE
14:28:24 408  	  CHARGE.INVOICE_ID = in_invoice_id
14:28:24 409  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD;
14:28:24 410  
14:28:24 411  	OPEN out_gc_charges_set FOR
14:28:24 412  	SELECT
14:28:24 413  	  CHARGE.ID as "CHARGE_ID",
14:28:24 414  	  CHARGE.CHARGE_AMOUNT,
14:28:24 415  	  CHARGE.INSTRUMENT_ID,
14:28:24 416  	  CHARGE.CHARGE_STATUS_ID
14:28:24 417  	FROM
14:28:24 418  	  CHARGE
14:28:24 419  	WHERE
14:28:24 420  	  CHARGE.INVOICE_ID = in_invoice_id
14:28:24 421  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_GIFT_CERTIFICATE;
14:28:24 422  
14:28:24 423  EXCEPTION
14:28:24 424  WHEN BAD_INVOICE_ID THEN
14:28:24 425  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 426  	  SPROC_NAME, 'No such invoice');
14:28:24 427  WHEN CAN_NOT_FIND_ACCOUNT THEN
14:28:24 428  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 429  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
14:28:24 430  WHEN OTHERS THEN
14:28:24 431  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 432  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 433  END GET_INVOICE_DETAILS;
14:28:24 434  
14:28:24 435  /******************************************************/
14:28:24 436  -- norlov: #38796
14:28:24 437  PROCEDURE GET_TRANSACTION_INVOICE (
14:28:24 438  /*
14:28:24 439  Throws exceptions:
14:28:24 440  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 441  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 442  */
14:28:24 443  	in_transaction_id  IN  NUMBER,
14:28:24 444  	out_result_set	      OUT SYS_REFCURSOR
14:28:24 445  ) AS
14:28:24 446  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
14:28:24 447  -- VARIABLES
14:28:24 448  temp_transaction_id  NUMBER;
14:28:24 449  var_invoice_id	   NUMBER;
14:28:24 450  var_subscription_id  NUMBER;
14:28:24 451  var_offer_chain_id   NUMBER;
14:28:24 452  var_offer_chain_name VARCHAR2(255);
14:28:24 453  -- EXCEPTIONS
14:28:24 454  BAD_TRANSACTION_ID     EXCEPTION;
14:28:24 455  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 456  BEGIN
14:28:24 457   -- check if there is the transaction
14:28:24 458  	BEGIN
14:28:24 459  	  SELECT
14:28:24 460  	    TRANSACTION.ID into temp_transaction_id
14:28:24 461  	  FROM
14:28:24 462  	    TRANSACTION
14:28:24 463  	  WHERE
14:28:24 464  	    TRANSACTION.ID = in_transaction_id;
14:28:24 465  	  EXCEPTION
14:28:24 466  	    WHEN NO_DATA_FOUND THEN
14:28:24 467  	      RAISE BAD_TRANSACTION_ID;
14:28:24 468  	END;
14:28:24 469  
14:28:24 470  	-- Get invoice id
14:28:24 471  	SELECT DISTINCT
14:28:24 472  	  CHARGE.INVOICE_ID into var_invoice_id
14:28:24 473  	FROM
14:28:24 474  	  CHARGE
14:28:24 475  	WHERE
14:28:24 476  	  CHARGE.TRANSACTION_ID = in_transaction_id;
14:28:24 477  
14:28:24 478  	-- Get subscription id if exists
14:28:24 479  	BEGIN
14:28:24 480  	  SELECT DISTINCT
14:28:24 481  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
14:28:24 482  	  FROM
14:28:24 483  	    LICENSE
14:28:24 484  	  WHERE
14:28:24 485  	    LICENSE.INVOICE_ID = var_invoice_id;
14:28:24 486  	  EXCEPTION
14:28:24 487  	    WHEN NO_DATA_FOUND THEN
14:28:24 488  	      var_subscription_id := NULL;
14:28:24 489  	END;
14:28:24 490  
14:28:24 491  	IF var_subscription_id IS NOT NULL THEN
14:28:24 492  	  -- Fetch offer chain from subscription
14:28:24 493  	  SELECT
14:28:24 494  	    OFFER_CHAIN.ID,
14:28:24 495  	    OFFER_CHAIN.NAME
14:28:24 496  	    into
14:28:24 497  	    var_offer_chain_id,
14:28:24 498  	    var_offer_chain_name
14:28:24 499  	  FROM
14:28:24 500  	    OFFER_CHAIN
14:28:24 501  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 502  	  WHERE
14:28:24 503  	    SUBSCRIPTION.ID = var_subscription_id;
14:28:24 504  	ELSE
14:28:24 505  	  -- Fetch offer chain from GC
14:28:24 506  	  SELECT
14:28:24 507  	    OFFER_CHAIN.ID,
14:28:24 508  	    OFFER_CHAIN.NAME
14:28:24 509  	    into
14:28:24 510  	    var_offer_chain_id,
14:28:24 511  	    var_offer_chain_name
14:28:24 512  	  FROM
14:28:24 513  	    OFFER_CHAIN
14:28:24 514  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 515  	  WHERE
14:28:24 516  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
14:28:24 517  	END IF;
14:28:24 518  
14:28:24 519  	OPEN out_result_set FOR
14:28:24 520  	SELECT DISTINCT
14:28:24 521  	  var_invoice_id       AS "INVOICE_ID",
14:28:24 522  	  var_subscription_id  AS "SUBSCRIPTION_ID",
14:28:24 523  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
14:28:24 524  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
14:28:24 525  	FROM
14:28:24 526  	  DUAL;
14:28:24 527  
14:28:24 528  EXCEPTION
14:28:24 529  WHEN BAD_TRANSACTION_ID THEN
14:28:24 530  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 531  	  SPROC_NAME, 'No such transaction');
14:28:24 532  WHEN OTHERS THEN
14:28:24 533  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 534  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 535  END GET_TRANSACTION_INVOICE;
14:28:24 536  
14:28:24 537  /******************************************************/
14:28:24 538  
14:28:24 539  PROCEDURE UPDATE_INVOICE_STATUS (
14:28:24 540  /*
14:28:24 541  Throws exceptions:
14:28:24 542  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 543  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 544  */
14:28:24 545  	in_invoice_id		       IN NUMBER,
14:28:24 546  	in_invoice_status_id	       IN NUMBER,
14:28:24 547  	in_updated_by		       IN VARCHAR2
14:28:24 548  ) AS
14:28:24 549  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
14:28:24 550  -- VARIABLES
14:28:24 551  temp_invoice_id NUMBER;
14:28:24 552  -- EXCEPTIONS
14:28:24 553  BAD_INVOICE_ID		      EXCEPTION;
14:28:24 554  BAD_INVOICE_STATUS_ID	      EXCEPTION;
14:28:24 555  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
14:28:24 556  BEGIN
14:28:24 557  
14:28:24 558  	-- Check if invoice exists
14:28:24 559  	BEGIN
14:28:24 560  	  SELECT
14:28:24 561  	    INVOICE.ID into temp_invoice_id
14:28:24 562  	  FROM
14:28:24 563  	    INVOICE
14:28:24 564  	  WHERE
14:28:24 565  	    INVOICE.ID = in_invoice_id;
14:28:24 566  	  EXCEPTION
14:28:24 567  	    WHEN NO_DATA_FOUND THEN
14:28:24 568  	      RAISE BAD_INVOICE_ID;
14:28:24 569  	END;
14:28:24 570  
14:28:24 571  	IF in_invoice_status_id != GLOBAL_STATUSES_V23.INVOICE_OPEN
14:28:24 572  	  AND in_invoice_status_id != GLOBAL_STATUSES_V23.INVOICE_CLOSED THEN
14:28:24 573  	  RAISE BAD_INVOICE_STATUS_ID;
14:28:24 574  	END IF;
14:28:24 575  
14:28:24 576  	PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
14:28:24 577  	  in_invoice_id 		 => in_invoice_id,
14:28:24 578  	  in_invoice_status_id		 => in_invoice_status_id,
14:28:24 579  	  in_updated_by 		 => in_updated_by
14:28:24 580  	);
14:28:24 581  
14:28:24 582  EXCEPTION
14:28:24 583  WHEN BAD_INVOICE_STATUS_ID THEN
14:28:24 584  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 585  	  SPROC_NAME, 'Bad invoice status id');
14:28:24 586  WHEN BAD_INVOICE_ID THEN
14:28:24 587  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 588  	  SPROC_NAME, 'No such invoice');
14:28:24 589  WHEN OTHERS THEN
14:28:24 590  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 591  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 592  END UPDATE_INVOICE_STATUS;
14:28:24 593  
14:28:24 594  /****************************************************************/
14:28:24 595  
14:28:24 596  FUNCTION IS_INVOICE_PAYING_STARTED (
14:28:24 597  /*
14:28:24 598  Throws exceptions:
14:28:24 599  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 600  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 601  */
14:28:24 602  	in_invoice_id IN NUMBER
14:28:24 603  ) RETURN NUMBER AS
14:28:24 604  -- VARIABLES
14:28:24 605  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
14:28:24 606  temp_invoice_id		 NUMBER;
14:28:24 607  var_processed_charges_num  NUMBER;
14:28:24 608  var_processed_transac_num  NUMBER;
14:28:24 609  var_success_attempts_num	 NUMBER;
14:28:24 610  var_is_gc 		 NUMBER;
14:28:24 611  -- EXCEPTIONS
14:28:24 612  BAD_INVOICE_ID EXCEPTION;
14:28:24 613  BEGIN
14:28:24 614  
14:28:24 615  	-- Check that invoice exists
14:28:24 616  	BEGIN
14:28:24 617  	  SELECT
14:28:24 618  	    INVOICE.ID into temp_invoice_id
14:28:24 619  	  FROM
14:28:24 620  	    INVOICE
14:28:24 621  	  WHERE
14:28:24 622  	    INVOICE.ID = in_invoice_id;
14:28:24 623  	  EXCEPTION
14:28:24 624  	   WHEN NO_DATA_FOUND THEN
14:28:24 625  	     RAISE BAD_INVOICE_ID;
14:28:24 626  	END;
14:28:24 627  
14:28:24 628  	-- Check that there are tansaction attempts with status success
14:28:24 629  	SELECT
14:28:24 630  	  COUNT(1) into var_success_attempts_num
14:28:24 631  	FROM
14:28:24 632  	  TRANSACTION_ATTEMPT ta,
14:28:24 633  	  TRANSACTION t,
14:28:24 634  	  CHARGE c
14:28:24 635  	WHERE
14:28:24 636  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS and
14:28:24 637  	  ta.transaction_id = t.id and
14:28:24 638  	  c.transaction_id = t.id and
14:28:24 639  	  t.is_refund = GLOBAL_CONSTANTS_V23.FALSE and
14:28:24 640  	  c.invoice_id = in_invoice_id
14:28:24 641  	;
14:28:24 642  
14:28:24 643  	IF var_success_attempts_num > 0 THEN
14:28:24 644  	  RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 645  	END IF;
14:28:24 646  
14:28:24 647  	SELECT
14:28:24 648  	  COUNT(1) into var_success_attempts_num
14:28:24 649  	FROM
14:28:24 650  	  TRANSACTION t,
14:28:24 651  	  CHARGE c
14:28:24 652  	WHERE
14:28:24 653  	  c.transaction_id = t.id and
14:28:24 654  	  t.is_refund = GLOBAL_CONSTANTS_V23.FALSE and
14:28:24 655  	  t.is_settled = GLOBAL_CONSTANTS_V23.TRUE and
14:28:24 656  	  c.invoice_id = in_invoice_id
14:28:24 657  	;
14:28:24 658  
14:28:24 659  	IF var_success_attempts_num > 0 THEN
14:28:24 660  	  RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 661  	END IF;
14:28:24 662  
14:28:24 663  	SELECT
14:28:24 664  	  COUNT(1) into var_is_gc
14:28:24 665  	FROM
14:28:24 666  	  gift_certificate gc
14:28:24 667  	WHERE
14:28:24 668  	  gc.finalized_invoice_id = in_invoice_id
14:28:24 669  	;
14:28:24 670  
14:28:24 671  	IF var_is_gc > 0 THEN
14:28:24 672  	  RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 673  	END IF;
14:28:24 674  
14:28:24 675  	RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 676  
14:28:24 677  EXCEPTION
14:28:24 678  WHEN BAD_INVOICE_ID THEN
14:28:24 679  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 680  	  SPROC_NAME, 'No such invoice');
14:28:24 681  WHEN OTHERS THEN
14:28:24 682  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 683  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 684  END IS_INVOICE_PAYING_STARTED;
14:28:24 685  
14:28:24 686  /******************************************************************************/
14:28:24 687  
14:28:24 688  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
14:28:24 689  	in_invoice_id  IN NUMBER,
14:28:24 690  	out_is_started OUT NUMBER
14:28:24 691  ) AS
14:28:24 692  BEGIN
14:28:24 693  	-- Just a wrapper
14:28:24 694  	out_is_started := PROCS_INVOICE_V23.IS_INVOICE_PAYING_STARTED(in_invoice_id);
14:28:24 695  END P_IS_INVOICE_PAYING_STARTED;
14:28:24 696  
14:28:24 697  /******************************************************************************/
14:28:24 698  
14:28:24 699  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
14:28:24 700  	in_invoice_id	      IN NUMBER,
14:28:24 701  	in_chargeback_date    IN DATE,
14:28:24 702  	out_chargeback_amount OUT NUMBER
14:28:24 703  ) AS
14:28:24 704  -- VARIABLES
14:28:24 705  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
14:28:24 706  var_chargeback_date    DATE;
14:28:24 707  temp_invoice_id	     NUMBER;
14:28:24 708  var_licenses_number    NUMBER;
14:28:24 709  var_invoice_start_date DATE;
14:28:24 710  var_invoice_end_date   DATE;
14:28:24 711  var_offer_id	     NUMBER;
14:28:24 712  var_offer_days_interval NUMBER;
14:28:24 713  var_license_days_used  NUMBER;
14:28:24 714  var_invoice_amount     NUMBER(10,2);
14:28:24 715  var_offer_chain_id     NUMBER;
14:28:24 716  var_offer_chain_meta_data_val VARCHAR2(1024);
14:28:24 717  var_offer_chain_full_refund   NUMBER;
14:28:24 718  var_offer_chain_prorated_ref  NUMBER;
14:28:24 719  var_chargeback_calculated NUMBER;
14:28:24 720  var_max_invoice_refund	NUMBER;
14:28:24 721  -- EXCEPTIONS
14:28:24 722  BAD_INVOICE_ID		  EXCEPTION;
14:28:24 723  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
14:28:24 724  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
14:28:24 725  BEGIN
14:28:24 726  
14:28:24 727  	IF in_chargeback_date IS NULL THEN
14:28:24 728  	  var_chargeback_date := PROCS_COMMON_V23.NORMALIZE_DATE(current_date);
14:28:24 729  	ELSE
14:28:24 730  	  var_chargeback_date := PROCS_COMMON_V23.NORMALIZE_DATE(in_chargeback_date);
14:28:24 731  	END IF;
14:28:24 732  
14:28:24 733  	-- Check that invoice exists
14:28:24 734  	BEGIN
14:28:24 735  	  SELECT
14:28:24 736  	    INVOICE.ID into temp_invoice_id
14:28:24 737  	  FROM
14:28:24 738  	    INVOICE
14:28:24 739  	  WHERE
14:28:24 740  	    INVOICE.ID = in_invoice_id;
14:28:24 741  	  EXCEPTION
14:28:24 742  	    WHEN NO_DATA_FOUND THEN
14:28:24 743  	      RAISE BAD_INVOICE_ID;
14:28:24 744  	END;
14:28:24 745  
14:28:24 746  	-- Check that invoice has at least one license
14:28:24 747  	SELECT
14:28:24 748  	  COUNT(*) into var_licenses_number
14:28:24 749  	FROM
14:28:24 750  	  LICENSE
14:28:24 751  	WHERE
14:28:24 752  	  LICENSE.INVOICE_ID = in_invoice_id;
14:28:24 753  
14:28:24 754  	IF var_licenses_number = 0 THEN
14:28:24 755  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
14:28:24 756  	END IF;
14:28:24 757  
14:28:24 758  	SELECT
14:28:24 759  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
14:28:24 760  	FROM
14:28:24 761  	  LICENSE
14:28:24 762  	WHERE
14:28:24 763  	  LICENSE.INVOICE_ID = in_invoice_id;
14:28:24 764  
14:28:24 765  	var_invoice_start_date := PROCS_COMMON_V23.NORMALIZE_DATE(var_invoice_start_date);
14:28:24 766  
14:28:24 767  	SELECT DISTINCT
14:28:24 768  	  LICENSE.OFFER_ID into var_offer_id
14:28:24 769  	FROM
14:28:24 770  	  LICENSE
14:28:24 771  	WHERE
14:28:24 772  	  LICENSE.INVOICE_ID = in_invoice_id;
14:28:24 773  
14:28:24 774  	SELECT
14:28:24 775  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
14:28:24 776  	FROM
14:28:24 777  	  LICENSE
14:28:24 778  	WHERE
14:28:24 779  	  LICENSE.INVOICE_ID = in_invoice_id;
14:28:24 780  
14:28:24 781  	-- All licenses for given invoice should point into the same offer
14:28:24 782  
14:28:24 783  	PROCS_OFFER_CHAIN_V23.GET_OFFER_LENGTH_IN_DAYS(
14:28:24 784  	  in_offer_id	=> var_offer_id,
14:28:24 785  	  in_start_date => var_invoice_start_date,
14:28:24 786  	  out_days	=> var_offer_days_interval
14:28:24 787  	);
14:28:24 788  
14:28:24 789  	IF var_offer_days_interval = 0 THEN
14:28:24 790  	  RAISE OFFER_LENGTH_IS_ZERO;
14:28:24 791  	END IF;
14:28:24 792  
14:28:24 793  	PROCS_INVOICE_V23.GET_INVOICE_DAYS_USED_NUMBER(
14:28:24 794  	  in_invoice_id      => in_invoice_id,
14:28:24 795  	  in_chargeback_date => var_chargeback_date,
14:28:24 796  	  out_days_num	     => var_license_days_used
14:28:24 797  	);
14:28:24 798  
14:28:24 799  	PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT(
14:28:24 800  	  in_invoice_id => in_invoice_id,
14:28:24 801  	  out_amount	=> var_invoice_amount
14:28:24 802  	);
14:28:24 803  
14:28:24 804  	-- 39437
14:28:24 805  	-- Get offer chain id by invoice id
14:28:24 806  	SELECT DISTINCT
14:28:24 807  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
14:28:24 808  	FROM
14:28:24 809  	  SUBSCRIPTION
14:28:24 810  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 811  	WHERE
14:28:24 812  	  LICENSE.INVOICE_ID = in_invoice_id;
14:28:24 813  
14:28:24 814  	-- Get offer chain's meta data full amount value
14:28:24 815  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MD_VALUE(
14:28:24 816  	  in_offer_chain_id => var_offer_chain_id,
14:28:24 817  	  in_meta_data_name => GLOBAL_CONSTANTS_V23.OFFER_CHAIN_FULL_REFUND,
14:28:24 818  	  out_value	    => var_offer_chain_meta_data_val
14:28:24 819  	);
14:28:24 820  	IF var_offer_chain_meta_data_val IS NULL THEN
14:28:24 821  	  var_offer_chain_full_refund := NULL;
14:28:24 822  	ELSE
14:28:24 823  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
14:28:24 824  	END IF;
14:28:24 825  
14:28:24 826  	-- Get offer chain's meta data prorated amount value
14:28:24 827  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MD_VALUE(
14:28:24 828  	  in_offer_chain_id => var_offer_chain_id,
14:28:24 829  	  in_meta_data_name => GLOBAL_CONSTANTS_V23.OFFER_CHAIN_PRORATED_REFUND,
14:28:24 830  	  out_value	    => var_offer_chain_meta_data_val
14:28:24 831  	);
14:28:24 832  	IF var_offer_chain_meta_data_val IS NULL THEN
14:28:24 833  	  var_offer_chain_prorated_ref := NULL;
14:28:24 834  	ELSE
14:28:24 835  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
14:28:24 836  	END IF;
14:28:24 837  
14:28:24 838  	var_chargeback_calculated := GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 839  
14:28:24 840  	IF var_offer_chain_full_refund IS NOT NULL
14:28:24 841  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 842  	  IF var_license_days_used < var_offer_chain_full_refund THEN
14:28:24 843  	    out_chargeback_amount := var_invoice_amount;
14:28:24 844  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 845  	  END IF;
14:28:24 846  	END IF;
14:28:24 847  
14:28:24 848  	IF var_offer_chain_prorated_ref IS NOT NULL
14:28:24 849  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 850  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
14:28:24 851  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
14:28:24 852  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 853  	  END IF;
14:28:24 854  	END IF;
14:28:24 855  
14:28:24 856  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V23.TRUE THEN
14:28:24 857  	  PROCS_INVOICE_V23.GET_MAX_REFUND(
14:28:24 858  	    in_invoice_id => in_invoice_id,
14:28:24 859  	    out_amount	  => var_max_invoice_refund
14:28:24 860  	  );
14:28:24 861  	  IF var_max_invoice_refund < out_chargeback_amount THEN
14:28:24 862  	    out_chargeback_amount := var_max_invoice_refund;
14:28:24 863  	  END IF;
14:28:24 864  	END IF;
14:28:24 865  
14:28:24 866  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 867  	  out_chargeback_amount := 0;
14:28:24 868  	END IF;
14:28:24 869  
14:28:24 870  EXCEPTION
14:28:24 871  WHEN BAD_INVOICE_ID THEN
14:28:24 872  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 873  	  SPROC_NAME, 'No such invoice');
14:28:24 874  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
14:28:24 875  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 876  	  SPROC_NAME, 'No licenses found');
14:28:24 877  WHEN OFFER_LENGTH_IS_ZERO THEN
14:28:24 878  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 879  	  SPROC_NAME, 'Offer length is zero');
14:28:24 880  WHEN OTHERS THEN
14:28:24 881  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 883  END CALCULATE_INVOICE_CHARGEBACK;
14:28:24 884  
14:28:24 885  /********************************************************************/
14:28:24 886  
14:28:24 887  PROCEDURE APPLY_REFUND (
14:28:24 888  	in_invoice_id	     IN NUMBER,
14:28:24 889  	in_chargeback_amount IN NUMBER,
14:28:24 890  	in_created_by	     IN VARCHAR2,
14:28:24 891  	out_charge_id	     OUT NUMBER
14:28:24 892  ) AS
14:28:24 893  -- VARIABLES
14:28:24 894  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
14:28:24 895  temp_invoice_id		 NUMBER;
14:28:24 896  var_total_charges_amount	 NUMBER(10,2);
14:28:24 897  var_charge_amount_to_apply NUMBER(10,2);
14:28:24 898  var_transaction_id	 NUMBER;
14:28:24 899  var_instrument_type_id	 NUMBER;
14:28:24 900  var_instrument_id 	 NUMBER;
14:28:24 901  var_charge_id		 NUMBER;
14:28:24 902  -- EXCEPTIONS
14:28:24 903  BAD_INVOICE_ID		 EXCEPTION;
14:28:24 904  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
14:28:24 905  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
14:28:24 906  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
14:28:24 907  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
14:28:24 908  BEGIN
14:28:24 909  
14:28:24 910  	BEGIN
14:28:24 911  	  SELECT
14:28:24 912  	    INVOICE.ID into temp_invoice_id
14:28:24 913  	  FROM
14:28:24 914  	    INVOICE
14:28:24 915  	  WHERE
14:28:24 916  	    INVOICE.ID = in_invoice_id;
14:28:24 917  	  EXCEPTION
14:28:24 918  	    WHEN NO_DATA_FOUND THEN
14:28:24 919  	      RAISE BAD_INVOICE_ID;
14:28:24 920  	END;
14:28:24 921  
14:28:24 922  	SELECT
14:28:24 923  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
14:28:24 924  	FROM
14:28:24 925  	  CHARGE
14:28:24 926  	WHERE
14:28:24 927  	  CHARGE.INVOICE_ID = in_invoice_id
14:28:24 928  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
14:28:24 929  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V23.INSTRUMENT_GIFT_CERTIFICATE;
14:28:24 930  
14:28:24 931  	-- FIXME: Maybe whe should throw exception here?
14:28:24 932  	IF var_total_charges_amount < in_chargeback_amount THEN
14:28:24 933  	  var_charge_amount_to_apply := var_total_charges_amount;
14:28:24 934  	ELSE
14:28:24 935  	  var_charge_amount_to_apply := in_chargeback_amount;
14:28:24 936  	END IF;
14:28:24 937  
14:28:24 938  	BEGIN
14:28:24 939  	  PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
14:28:24 940  	    in_transaction_id	      => NULL,
14:28:24 941  	    in_status_id	      => GLOBAL_STATUSES_V23.TRANSACTION_PREPARE,
14:28:24 942  	    in_amount		      => -var_charge_amount_to_apply,
14:28:24 943  	    in_created_by	      => in_created_by,
14:28:24 944  	    in_order_id 	      => NULL,
14:28:24 945  	    in_is_refund	      => GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 946  	    in_transaction_type_code  => 'REFUND',
14:28:24 947  	    out_transaction_id	      => var_transaction_id
14:28:24 948  	  );
14:28:24 949  	  EXCEPTION
14:28:24 950  	    WHEN OTHERS THEN
14:28:24 951  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 952  	      RAISE CAN_NOT_CREATE_TRANSACTION;
14:28:24 953  	END;
14:28:24 954  
14:28:24 955  	BEGIN
14:28:24 956  	  SELECT
14:28:24 957  	    C.INSTRUMENT_TYPE_ID,
14:28:24 958  	    C.INSTRUMENT_ID
14:28:24 959  	    into
14:28:24 960  	    var_instrument_type_id,
14:28:24 961  	    var_instrument_id
14:28:24 962  	  FROM
14:28:24 963  	    CHARGE C,
14:28:24 964  	    TRANSACTION_ATTEMPT TA,
14:28:24 965  	    TRANSACTION T
14:28:24 966  	  WHERE
14:28:24 967  	    C.INVOICE_ID = in_invoice_id and
14:28:24 968  	    C.TRANSACTION_ID = T.ID and
14:28:24 969  	    TA.TRANSACTION_ID = T.ID and
14:28:24 970  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS and
14:28:24 971  	    T.IS_REFUND = GLOBAL_CONSTANTS_V23.FALSE and
14:28:24 972  	    T.TRANSACTION_AMOUNT >= 0 and
14:28:24 973  	    rownum < 2;
14:28:24 974  	EXCEPTION
14:28:24 975  	    WHEN NO_DATA_FOUND THEN
14:28:24 976  	      RAISE CAN_NOT_FIND_INSTRUMENT;
14:28:24 977  	END;
14:28:24 978  	BEGIN
14:28:24 979  	  PROCS_CHARGE_V23.CREATE_CHARGE(
14:28:24 980  	    in_invoice_id	  => in_invoice_id,
14:28:24 981  	    in_transaction_id	  => var_transaction_id,
14:28:24 982  	    in_instrument_type_id => var_instrument_type_id,
14:28:24 983  	    in_instrument_id	  => var_instrument_id,
14:28:24 984  	    in_charge_amount	  => -var_charge_amount_to_apply,
14:28:24 985  	    in_created_by	  => in_created_by,
14:28:24 986  	    in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
14:28:24 987  	    out_charge_id	  => var_charge_id
14:28:24 988  	  );
14:28:24 989  	  EXCEPTION
14:28:24 990  	    WHEN OTHERS THEN
14:28:24 991  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 992  	      RAISE CAN_NOT_CREATE_CHARGE;
14:28:24 993  	END;
14:28:24 994  
14:28:24 995  	out_charge_id := var_charge_id;
14:28:24 996  
14:28:24 997  EXCEPTION
14:28:24 998  WHEN BAD_INVOICE_ID THEN
14:28:24 999  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1000  	   SPROC_NAME, 'No such invoice');
14:28:24 1001  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:28:24 1002  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1003  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:28:24 1004  WHEN CAN_NOT_FIND_INSTRUMENT THEN
14:28:24 1005  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1006  	   SPROC_NAME, 'Could not find financial instrument');
14:28:24 1007  WHEN CAN_NOT_CREATE_CHARGE THEN
14:28:24 1008  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1009  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:28:24 1010  WHEN OTHERS THEN
14:28:24 1011  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1012  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1013  END APPLY_REFUND;
14:28:24 1014  
14:28:24 1015  /******************************************************************************/
14:28:24 1016  
14:28:24 1017  PROCEDURE GET_MAX_REFUND (
14:28:24 1018  	 in_invoice_id IN NUMBER,
14:28:24 1019  	 out_amount    OUT NUMBER
14:28:24 1020  ) AS
14:28:24 1021  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
14:28:24 1022  -- VARIABLES
14:28:24 1023  temp_invoice_id	       NUMBER;
14:28:24 1024  var_invoice_refunds_sum NUMBER(10,2);
14:28:24 1025  var_invoice_charges_sum NUMBER(10,2);
14:28:24 1026  -- EXCEPTIONS
14:28:24 1027  BAD_INVOICE_ID EXCEPTION;
14:28:24 1028  BEGIN
14:28:24 1029  
14:28:24 1030  	 BEGIN
14:28:24 1031  	   SELECT
14:28:24 1032  	     INVOICE.ID into temp_invoice_id
14:28:24 1033  	   FROM
14:28:24 1034  	     INVOICE
14:28:24 1035  	   WHERE
14:28:24 1036  	     INVOICE.ID = in_invoice_id;
14:28:24 1037  	   EXCEPTION
14:28:24 1038  	     WHEN NO_DATA_FOUND THEN
14:28:24 1039  	       RAISE BAD_INVOICE_ID;
14:28:24 1040  	 END;
14:28:24 1041  
14:28:24 1042  	 var_invoice_refunds_sum := 0;
14:28:24 1043  	 var_invoice_charges_sum := 0;
14:28:24 1044  
14:28:24 1045  	 FOR f_charge IN (
14:28:24 1046  	   SELECT
14:28:24 1047  	     CHARGE.ID,
14:28:24 1048  	     CHARGE.CHARGE_STATUS_ID,
14:28:24 1049  	     CHARGE.CHARGE_AMOUNT,
14:28:24 1050  	     CHARGE.TRANSACTION_ID
14:28:24 1051  	   FROM
14:28:24 1052  	     CHARGE
14:28:24 1053  	   WHERE
14:28:24 1054  	     CHARGE.INVOICE_ID = in_invoice_id
14:28:24 1055  	 )
14:28:24 1056  	 LOOP
14:28:24 1057  	   -- If charge.status = canceled then continue
14:28:24 1058  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V23.CHARGE_CANCELED THEN
14:28:24 1059  
14:28:24 1060  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
14:28:24 1061  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
14:28:24 1062  		  AND PROCS_TRANSACTION_V23.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V23.TRUE THEN
14:28:24 1063  		 -- Transaction collected
14:28:24 1064  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
14:28:24 1065  	       ELSE
14:28:24 1066  		 -- Transaction is not collected. Do nothing
14:28:24 1067  		 NULL;
14:28:24 1068  	       END IF;
14:28:24 1069  	     ELSE
14:28:24 1070  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
14:28:24 1071  		  AND PROCS_TRANSACTION_V23.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 1072  		 -- If charge is processed transaction is not collected then do nothing
14:28:24 1073  		 NULL;
14:28:24 1074  	       ELSE
14:28:24 1075  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
14:28:24 1076  	       END IF;
14:28:24 1077  	     END IF;
14:28:24 1078  
14:28:24 1079  	   END IF;
14:28:24 1080  	 END LOOP;
14:28:24 1081  
14:28:24 1082  	 -- Refunds are negative
14:28:24 1083  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
14:28:24 1084  
14:28:24 1085  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
14:28:24 1086  
14:28:24 1087  EXCEPTION
14:28:24 1088  WHEN BAD_INVOICE_ID THEN
14:28:24 1089  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1090  	   SPROC_NAME, 'No such invoice');
14:28:24 1091  WHEN OTHERS THEN
14:28:24 1092  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1093  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1094  END GET_MAX_REFUND;
14:28:24 1095  
14:28:24 1096  /******************************************************************************/
14:28:24 1097  
14:28:24 1098  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
14:28:24 1099  	 in_invoice_id	     IN NUMBER,
14:28:24 1100  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
14:28:24 1101  	 out_days_num	     OUT NUMBER
14:28:24 1102  ) AS
14:28:24 1103  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
14:28:24 1104  -- VARIABLES
14:28:24 1105  temp_invoice_id	      NUMBER;
14:28:24 1106  var_license_start_date DATE;
14:28:24 1107  var_license_end_date   DATE;
14:28:24 1108  var_chargeback_date    DATE;
14:28:24 1109  var_invoice_days_used  NUMBER;
14:28:24 1110  -- EXCEPTIONS
14:28:24 1111  BAD_INVOICE_ID EXCEPTION;
14:28:24 1112  BEGIN
14:28:24 1113  
14:28:24 1114  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
14:28:24 1115  
14:28:24 1116  	 BEGIN
14:28:24 1117  	   SELECT
14:28:24 1118  	     INVOICE.ID into temp_invoice_id
14:28:24 1119  	   FROM
14:28:24 1120  	     INVOICE
14:28:24 1121  	   WHERE
14:28:24 1122  	     INVOICE.ID = in_invoice_id;
14:28:24 1123  	   EXCEPTION
14:28:24 1124  	     WHEN NO_DATA_FOUND THEN
14:28:24 1125  	       RAISE BAD_INVOICE_ID;
14:28:24 1126  	 END;
14:28:24 1127  
14:28:24 1128  	 var_invoice_days_used := 0;
14:28:24 1129  
14:28:24 1130  	 FOR f_license IN (
14:28:24 1131  	   SELECT
14:28:24 1132  	     LICENSE.START_DATE,
14:28:24 1133  	     LICENSE.END_DATE
14:28:24 1134  	   FROM
14:28:24 1135  	     LICENSE
14:28:24 1136  	   WHERE
14:28:24 1137  	     LICENSE.INVOICE_ID = in_invoice_id
14:28:24 1138  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V23.FALSE
14:28:24 1139  	 )
14:28:24 1140  	 LOOP
14:28:24 1141  	   var_license_start_date := PROCS_COMMON_V23.NORMALIZE_DATE(f_license.START_DATE);
14:28:24 1142  	   var_license_end_date := PROCS_COMMON_V23.NORMALIZE_DATE(f_license.END_DATE);
14:28:24 1143  
14:28:24 1144  	   IF var_license_start_date <= var_chargeback_date THEN
14:28:24 1145  	     IF var_license_end_date <= var_chargeback_date THEN
14:28:24 1146  	       -- License is passed
14:28:24 1147  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
14:28:24 1148  	     ELSE
14:28:24 1149  	       -- This is current license
14:28:24 1150  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
14:28:24 1151  	     END IF;
14:28:24 1152  	   ELSE
14:28:24 1153  	     -- if var_license_start_date > in_chargeback_date then do nothing
14:28:24 1154  	     NULL;
14:28:24 1155  	   END IF;
14:28:24 1156  	 END LOOP;
14:28:24 1157  
14:28:24 1158  	 out_days_num := var_invoice_days_used;
14:28:24 1159  
14:28:24 1160  EXCEPTION
14:28:24 1161  WHEN BAD_INVOICE_ID THEN
14:28:24 1162  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1163  	   SPROC_NAME, 'No such invoice');
14:28:24 1164  WHEN OTHERS THEN
14:28:24 1165  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1166  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1167  END GET_INVOICE_DAYS_USED_NUMBER;
14:28:24 1168  
14:28:24 1169  /******************************************************************************/
14:28:24 1170  
14:28:24 1171  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:28:24 1172  	 in_invoice_id	IN NUMBER,
14:28:24 1173  	 out_result_set OUT SYS_REFCURSOR
14:28:24 1174  ) AS
14:28:24 1175  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
14:28:24 1176  -- VARIABLES
14:28:24 1177  temp_invoice_id NUMBER;
14:28:24 1178  -- EXCEPTIONS
14:28:24 1179  BAD_INVOICE_ID EXCEPTION;
14:28:24 1180  BEGIN
14:28:24 1181  
14:28:24 1182  	 BEGIN
14:28:24 1183  	   SELECT
14:28:24 1184  	     INVOICE.ID into temp_invoice_id
14:28:24 1185  	   FROM
14:28:24 1186  	     INVOICE
14:28:24 1187  	   WHERE
14:28:24 1188  	     INVOICE.ID = in_invoice_id;
14:28:24 1189  	   EXCEPTION
14:28:24 1190  	     WHEN NO_DATA_FOUND THEN
14:28:24 1191  	       RAISE BAD_INVOICE_ID;
14:28:24 1192  	 END;
14:28:24 1193  
14:28:24 1194  	 OPEN out_result_set FOR
14:28:24 1195  	 SELECT
14:28:24 1196  	   LINE_ITEM.ID,
14:28:24 1197  	   LINE_ITEM.PRODUCT_OFFER_ID,
14:28:24 1198  	   LINE_ITEM.INVOICE_ID,
14:28:24 1199  	   LINE_ITEM.AMOUNT,
14:28:24 1200  	   LINE_ITEM.DISCOUNT_AMOUNT,
14:28:24 1201  	   LINE_ITEM.TAXES_AMOUNT,
14:28:24 1202  	   LINE_ITEM.CREATE_DATE,
14:28:24 1203  	   LINE_ITEM.CREATED_BY
14:28:24 1204  	 FROM
14:28:24 1205  	   LINE_ITEM
14:28:24 1206  	 WHERE
14:28:24 1207  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
14:28:24 1208  
14:28:24 1209  EXCEPTION
14:28:24 1210  WHEN BAD_INVOICE_ID THEN
14:28:24 1211  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1212  	   SPROC_NAME, 'No such invoice');
14:28:24 1213  WHEN OTHERS THEN
14:28:24 1214  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1216  END GET_INVOICE_LINE_ITEMS;
14:28:24 1217  
14:28:24 1218  /******************************************************************************/
14:28:24 1219  
14:28:24 1220  PROCEDURE GET_INVOICE_LICENSES (
14:28:24 1221  	 in_invoice_id	IN NUMBER,
14:28:24 1222  	 out_result_set OUT SYS_REFCURSOR
14:28:24 1223  ) AS
14:28:24 1224  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
14:28:24 1225  -- VARIABLES
14:28:24 1226  temp_invoice_id NUMBER;
14:28:24 1227  -- EXCEPTIONS
14:28:24 1228  BAD_INVOICE_ID EXCEPTION;
14:28:24 1229  BEGIN
14:28:24 1230  
14:28:24 1231  	 BEGIN
14:28:24 1232  	   SELECT
14:28:24 1233  	     INVOICE.ID into temp_invoice_id
14:28:24 1234  	   FROM
14:28:24 1235  	     INVOICE
14:28:24 1236  	   WHERE
14:28:24 1237  	     INVOICE.ID = in_invoice_id;
14:28:24 1238  	   EXCEPTION
14:28:24 1239  	     WHEN NO_DATA_FOUND THEN
14:28:24 1240  	       RAISE BAD_INVOICE_ID;
14:28:24 1241  	 END;
14:28:24 1242  
14:28:24 1243  	 OPEN out_result_set FOR
14:28:24 1244  	 SELECT
14:28:24 1245  	   LICENSE.ID,
14:28:24 1246  	   LICENSE.INVOICE_ID,
14:28:24 1247  	   LICENSE.CREATE_DATE,
14:28:24 1248  	   LICENSE.CREATED_BY,
14:28:24 1249  	   LICENSE.CURRENT_OFFER_INDEX,
14:28:24 1250  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
14:28:24 1251  	   LICENSE.END_DATE,
14:28:24 1252  	   LICENSE.ENTITLEMENT_END_DATE,
14:28:24 1253  	   LICENSE.IS_EXTENSION,
14:28:24 1254  	   LICENSE.LICENSE_STATUS_ID,
14:28:24 1255  	   LICENSE.NEEDS_ENTITLEMENTS,
14:28:24 1256  	   LICENSE.OFFER_ID,
14:28:24 1257  	   LICENSE.START_DATE,
14:28:24 1258  	   LICENSE.SUBSCRIPTION_ID,
14:28:24 1259  	   LICENSE.UPDATE_DATE,
14:28:24 1260  	   LICENSE.UPDATED_BY
14:28:24 1261  	 FROM
14:28:24 1262  	   LICENSE
14:28:24 1263  	 WHERE
14:28:24 1264  	   LICENSE.INVOICE_ID = in_invoice_id;
14:28:24 1265  
14:28:24 1266  EXCEPTION
14:28:24 1267  WHEN BAD_INVOICE_ID THEN
14:28:24 1268  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1269  	   SPROC_NAME, 'No such invoice');
14:28:24 1270  WHEN OTHERS THEN
14:28:24 1271  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1272  	   SPROC_NAME, 'Unknown error');
14:28:24 1273  END GET_INVOICE_LICENSES;
14:28:24 1274  
14:28:24 1275  /******************************************************************************/
14:28:24 1276  
14:28:24 1277  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
14:28:24 1278  	 in_invoice_id	    IN NUMBER,
14:28:24 1279  	 out_offer_chain_id OUT NUMBER
14:28:24 1280  ) AS
14:28:24 1281  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
14:28:24 1282  -- VARIABLES
14:28:24 1283  temp_invoice_id NUMBER;
14:28:24 1284  -- EXCEPTIONS
14:28:24 1285  BAD_INVOICE_ID EXCEPTION;
14:28:24 1286  BEGIN
14:28:24 1287  
14:28:24 1288  	 BEGIN
14:28:24 1289  	   SELECT
14:28:24 1290  	     INVOICE.ID into temp_invoice_id
14:28:24 1291  	   FROM
14:28:24 1292  	     INVOICE
14:28:24 1293  	   WHERE
14:28:24 1294  	     INVOICE.ID = in_invoice_id;
14:28:24 1295  	   EXCEPTION
14:28:24 1296  	     WHEN NO_DATA_FOUND THEN
14:28:24 1297  	       RAISE BAD_INVOICE_ID;
14:28:24 1298  	 END;
14:28:24 1299  
14:28:24 1300  	 BEGIN
14:28:24 1301  	   SELECT DISTINCT
14:28:24 1302  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
14:28:24 1303  	   FROM
14:28:24 1304  	     LICENSE
14:28:24 1305  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 1306  	   WHERE
14:28:24 1307  	     LICENSE.INVOICE_ID = in_invoice_id;
14:28:24 1308  	   EXCEPTION
14:28:24 1309  	     WHEN NO_DATA_FOUND THEN
14:28:24 1310  	       out_offer_chain_id := NULL;
14:28:24 1311  	 END;
14:28:24 1312  
14:28:24 1313  EXCEPTION
14:28:24 1314  WHEN BAD_INVOICE_ID THEN
14:28:24 1315  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1316  	   SPROC_NAME, 'No such invoice');
14:28:24 1317  WHEN OTHERS THEN
14:28:24 1318  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1319  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1320  END GET_OFFER_CH_ID_BY_INVOICE_ID;
14:28:24 1321  
14:28:24 1322  /******************************************************************************/
14:28:24 1323  
14:28:24 1324  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
14:28:24 1325  -- Closing invoice without refund
14:28:24 1326  	 in_invoice_id IN NUMBER,
14:28:24 1327  	 in_updated_by IN VARCHAR2
14:28:24 1328  ) AS
14:28:24 1329  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
14:28:24 1330  -- VARIABLES
14:28:24 1331  temp_invoice_id NUMBER;
14:28:24 1332  -- EXCEPTIONS
14:28:24 1333  BAD_INVOICE_ID EXCEPTION;
14:28:24 1334  BEGIN
14:28:24 1335  
14:28:24 1336  	 BEGIN
14:28:24 1337  	   SELECT
14:28:24 1338  	     INVOICE.ID into temp_invoice_id
14:28:24 1339  	   FROM
14:28:24 1340  	     INVOICE
14:28:24 1341  	   WHERE
14:28:24 1342  	     INVOICE.ID = in_invoice_id;
14:28:24 1343  	   EXCEPTION
14:28:24 1344  	     WHEN NO_DATA_FOUND THEN
14:28:24 1345  	       RAISE BAD_INVOICE_ID;
14:28:24 1346  	 END;
14:28:24 1347  
14:28:24 1348  	 -- Needs to close charges. No refund.
14:28:24 1349  	 FOR f_charge_to_close IN (
14:28:24 1350  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
14:28:24 1351  	 )
14:28:24 1352  	 LOOP
14:28:24 1353  	   PROCS_CHARGE_V23.UPDATE_CHARGE_STATUS(
14:28:24 1354  	     in_charge_id	 => f_charge_to_close.ID,
14:28:24 1355  	     in_updated_by	 => in_updated_by,
14:28:24 1356  	     in_charge_status_id => GLOBAL_STATUSES_V23.CHARGE_CANCELED
14:28:24 1357  	   );
14:28:24 1358  	 END LOOP;
14:28:24 1359  
14:28:24 1360  	 --FOR f_license_to_cancel IN (
14:28:24 1361  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V23.LICENSE_ACTIVE
14:28:24 1362  	 --)
14:28:24 1363  	 --LOOP
14:28:24 1364  	 --  PROCS_LICENSE_CRU_V23.UPDATE_LICENSE(
14:28:24 1365  	 --    in_license_id	     => f_license_to_cancel.ID,
14:28:24 1366  	 --    in_license_status_id  => GLOBAL_STATUSES_V23.LICENSE_CLOSED,
14:28:24 1367  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V23.FALSE,
14:28:24 1368  	 --    in_updated_by	     => in_updated_by
14:28:24 1369  	 --  );
14:28:24 1370  	 --END LOOP;
14:28:24 1371  
14:28:24 1372  	 PROCS_INVOICE_V23.UPDATE_INVOICE_STATUS(
14:28:24 1373  	   in_invoice_id		  => in_invoice_id,
14:28:24 1374  	   in_updated_by		  => in_updated_by,
14:28:24 1375  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V23.INVOICE_CLOSED
14:28:24 1376  	 );
14:28:24 1377  
14:28:24 1378  	 FOR f_transaction_to_close IN (
14:28:24 1379  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
14:28:24 1380  	 )
14:28:24 1381  	 LOOP
14:28:24 1382  	   PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_STATUS(
14:28:24 1383  	     in_transaction_id	      => f_transaction_to_close.ID,
14:28:24 1384  	     in_updated_by	      => in_updated_by,
14:28:24 1385  	     in_transaction_status_id => GLOBAL_STATUSES_V23.TRANSACTION_CLOSED
14:28:24 1386  	   );
14:28:24 1387  	 END LOOP;
14:28:24 1388  
14:28:24 1389  EXCEPTION
14:28:24 1390  WHEN BAD_INVOICE_ID THEN
14:28:24 1391  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1392  	   SPROC_NAME, 'No such invoice');
14:28:24 1393  WHEN OTHERS THEN
14:28:24 1394  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1395  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1396  END CLOSE_INVOICE_AS_NOT_COLLECTED;
14:28:24 1397  
14:28:24 1398  /******************************************************************************/
14:28:24 1399  
14:28:24 1400  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
14:28:24 1401  	 in_invoice_id	     IN NUMBER,
14:28:24 1402  	 out_subscription_id OUT NUMBER
14:28:24 1403  ) AS
14:28:24 1404  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
14:28:24 1405  -- VARIABLES
14:28:24 1406  temp_invoice_id NUMBER;
14:28:24 1407  -- EXCEPTIONS
14:28:24 1408  BAD_INVOICE_ID		 EXCEPTION;
14:28:24 1409  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
14:28:24 1410  BEGIN
14:28:24 1411  
14:28:24 1412  	 BEGIN
14:28:24 1413  	   SELECT
14:28:24 1414  	     INVOICE.ID into temp_invoice_id
14:28:24 1415  	   FROM
14:28:24 1416  	     INVOICE
14:28:24 1417  	   WHERE
14:28:24 1418  	     INVOICE.ID = in_invoice_id;
14:28:24 1419  	   EXCEPTION
14:28:24 1420  	     WHEN NO_DATA_FOUND THEN
14:28:24 1421  	       RAISE BAD_INVOICE_ID;
14:28:24 1422  	 END;
14:28:24 1423  
14:28:24 1424  	 BEGIN
14:28:24 1425  	   SELECT DISTINCT
14:28:24 1426  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
14:28:24 1427  	   FROM
14:28:24 1428  	     LICENSE
14:28:24 1429  	   WHERE
14:28:24 1430  	     LICENSE.INVOICE_ID = in_invoice_id;
14:28:24 1431  	   EXCEPTION
14:28:24 1432  	     WHEN NO_DATA_FOUND THEN
14:28:24 1433  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
14:28:24 1434  	 END;
14:28:24 1435  
14:28:24 1436  EXCEPTION
14:28:24 1437  WHEN BAD_INVOICE_ID THEN
14:28:24 1438  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1439  	   SPROC_NAME, 'No such invoice');
14:28:24 1440  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
14:28:24 1441  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1442  	   SPROC_NAME, 'Could not find subscription for given invoice');
14:28:24 1443  WHEN OTHERS THEN
14:28:24 1444  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1445  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1446  END GET_SUBSCR_ID_BY_INVOICE_ID;
14:28:24 1447  
14:28:24 1448  /******************************************************************************/
14:28:24 1449  
14:28:24 1450  PROCEDURE IS_INVOICE_TAX_EXEMPT (
14:28:24 1451  /*
14:28:24 1452  Throws exceptions:
14:28:24 1453  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1454  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 1455  Return:
14:28:24 1456  	 GLOBAL_CONSTANTS_V23.TRUE if ACCOUNT.EXEMPT_ID is not null
14:28:24 1457  	 GLOBAL_CONSTANTS_V23.FALSE else
14:28:24 1458  */
14:28:24 1459  	 in_invoice_id	   IN NUMBER,
14:28:24 1460  	 out_is_tax_exempt OUT NUMBER
14:28:24 1461  ) AS
14:28:24 1462  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
14:28:24 1463  -- VARIABLES
14:28:24 1464  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
14:28:24 1465  -- EXCEPTIONS
14:28:24 1466  BAD_INVOICE_ID EXCEPTION;
14:28:24 1467  BEGIN
14:28:24 1468  
14:28:24 1469  	 BEGIN
14:28:24 1470  	   SELECT
14:28:24 1471  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
14:28:24 1472  	   FROM
14:28:24 1473  	     INVOICE
14:28:24 1474  	   WHERE
14:28:24 1475  	     INVOICE.ID = in_invoice_id;
14:28:24 1476  	   EXCEPTION
14:28:24 1477  	     WHEN NO_DATA_FOUND THEN
14:28:24 1478  	       RAISE BAD_INVOICE_ID;
14:28:24 1479  	 END;
14:28:24 1480  
14:28:24 1481  	 IF var_is_tax_exempt IS NULL THEN
14:28:24 1482  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 1483  	 ELSE
14:28:24 1484  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 1485  	 END IF;
14:28:24 1486  
14:28:24 1487  EXCEPTION
14:28:24 1488  WHEN BAD_INVOICE_ID THEN
14:28:24 1489  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1490  	   SPROC_NAME, 'No such invoice');
14:28:24 1491  WHEN OTHERS THEN
14:28:24 1492  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1493  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1494  END IS_INVOICE_TAX_EXEMPT;
14:28:24 1495  
14:28:24 1496  /******************************************************************************/
14:28:24 1497  
14:28:24 1498  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
14:28:24 1499  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
14:28:24 1500  	 out_result_set OUT SYS_REFCURSOR
14:28:24 1501  ) AS
14:28:24 1502  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
14:28:24 1503  -- VARIABLE
14:28:24 1504  temp_order_id TRANSACTION.ORDER_ID%TYPE;
14:28:24 1505  -- EXCEPTIONS
14:28:24 1506  BAD_ORDER_ID EXCEPTION;
14:28:24 1507  CAN_NOT_FIND_INVOICE EXCEPTION;
14:28:24 1508  BEGIN
14:28:24 1509  
14:28:24 1510  	 OPEN out_result_set FOR
14:28:24 1511  	   SELECT DISTINCT
14:28:24 1512  	     CHARGE.INVOICE_ID
14:28:24 1513  	   FROM
14:28:24 1514  	     CHARGE
14:28:24 1515  	   INNER JOIN
14:28:24 1516  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
14:28:24 1517  	   WHERE
14:28:24 1518  	     TRANSACTION.ORDER_ID = in_order_id;
14:28:24 1519  
14:28:24 1520  EXCEPTION
14:28:24 1521  WHEN BAD_ORDER_ID THEN
14:28:24 1522  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1523  	   SPROC_NAME, 'No such transaction');
14:28:24 1524  WHEN CAN_NOT_FIND_INVOICE THEN
14:28:24 1525  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1526  	   SPROC_NAME, 'Could not find invoice for given order id');
14:28:24 1527  WHEN OTHERS THEN
14:28:24 1528  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1529  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1530  END GET_INVOICE_BY_TRNS_ORDER_ID;
14:28:24 1531  
14:28:24 1532  /******************************************************************************/
14:28:24 1533  
14:28:24 1534  PROCEDURE GET_INVOICE_BY_ID (
14:28:24 1535  	 in_invoice_id	IN NUMBER,
14:28:24 1536  	 out_result_set OUT SYS_REFCURSOR
14:28:24 1537  ) AS
14:28:24 1538  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
14:28:24 1539  -- VARIABLE
14:28:24 1540  temp_invoice_id NUMBER;
14:28:24 1541  -- EXCEPTIONS
14:28:24 1542  BAD_INVOCIE_ID EXCEPTION;
14:28:24 1543  BEGIN
14:28:24 1544  
14:28:24 1545  	 BEGIN
14:28:24 1546  	   SELECT
14:28:24 1547  	     INVOICE.ID into temp_invoice_id
14:28:24 1548  	   FROM
14:28:24 1549  	     INVOICE
14:28:24 1550  	   WHERE
14:28:24 1551  	     INVOICE.ID = in_invoice_id;
14:28:24 1552  	   EXCEPTION
14:28:24 1553  	     WHEN NO_DATA_FOUND THEN
14:28:24 1554  	       RAISE BAD_INVOCIE_ID;
14:28:24 1555  	 END;
14:28:24 1556  
14:28:24 1557  	 OPEN out_result_set FOR
14:28:24 1558  	 SELECT
14:28:24 1559  	   INVOICE.ID,
14:28:24 1560  	   INVOICE.INVOICE_STATUS_ID,
14:28:24 1561  	   INVOICE.TAX_EXEMPT_ID,
14:28:24 1562  	   INVOICE.UPDATE_DATE,
14:28:24 1563  	   INVOICE.UPDATED_BY,
14:28:24 1564  	   INVOICE.CREATE_DATE,
14:28:24 1565  	   INVOICE.CREATED_BY
14:28:24 1566  	 FROM
14:28:24 1567  	   INVOICE
14:28:24 1568  	 WHERE
14:28:24 1569  	   INVOICE.ID = in_invoice_id;
14:28:24 1570  
14:28:24 1571  EXCEPTION
14:28:24 1572  WHEN BAD_INVOCIE_ID THEN
14:28:24 1573  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1574  	   SPROC_NAME, 'No such invoice');
14:28:24 1575  WHEN OTHERS THEN
14:28:24 1576  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1577  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1578  END GET_INVOICE_BY_ID;
14:28:24 1579  
14:28:24 1580  /******************************************************************************/
14:28:24 1581  
14:28:24 1582  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
14:28:24 1583  	 in_invoice_id		       IN NUMBER,
14:28:24 1584  	 out_is_tax_calculation_needed OUT NUMBER
14:28:24 1585  ) AS
14:28:24 1586  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
14:28:24 1587  BEGIN
14:28:24 1588  
14:28:24 1589  	 SELECT
14:28:24 1590  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
14:28:24 1591  	 FROM
14:28:24 1592  	   INVOICE I
14:28:24 1593  	 WHERE
14:28:24 1594  	   I.ID = in_invoice_id;
14:28:24 1595  
14:28:24 1596  EXCEPTION
14:28:24 1597  WHEN NO_DATA_FOUND THEN
14:28:24 1598  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1599  	   SPROC_NAME, 'No such invoice');
14:28:24 1600  WHEN OTHERS THEN
14:28:24 1601  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1602  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1603  END GET_IS_TAX_CALCULATION_NEEDED;
14:28:24 1604  
14:28:24 1605  /******************************************************************************/
14:28:24 1606  
14:28:24 1607  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
14:28:24 1608  	 in_invoice_id		      IN NUMBER,
14:28:24 1609  	 in_updated_by		      IN VARCHAR2,
14:28:24 1610  	 in_is_tax_calculation_needed IN NUMBER
14:28:24 1611  ) AS
14:28:24 1612  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
14:28:24 1613  -- VARIABLES
14:28:24 1614  temp_invoice_id	      NUMBER;
14:28:24 1615  -- EXCEPTIONS
14:28:24 1616  BAD_INVOICE_ID	      EXCEPTION;
14:28:24 1617  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
14:28:24 1618  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 1619  BEGIN
14:28:24 1620  
14:28:24 1621  	 BEGIN
14:28:24 1622  	   SELECT
14:28:24 1623  	     i.id into temp_invoice_id
14:28:24 1624  	   FROM
14:28:24 1625  	     invoice i
14:28:24 1626  	   WHERE
14:28:24 1627  	     i.id = in_invoice_id;
14:28:24 1628  	   EXCEPTION
14:28:24 1629  	     WHEN NO_DATA_FOUND THEN
14:28:24 1630  	       RAISE BAD_INVOICE_ID;
14:28:24 1631  	 END;
14:28:24 1632  
14:28:24 1633  	 BEGIN
14:28:24 1634  	   PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
14:28:24 1635  	     in_invoice_id => in_invoice_id,
14:28:24 1636  	     in_updated_by => in_updated_by,
14:28:24 1637  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
14:28:24 1638  	   );
14:28:24 1639  	   EXCEPTION
14:28:24 1640  	     WHEN OTHERS THEN
14:28:24 1641  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1642  	       RAISE CAN_NOT_UPDATE_INVOCIE;
14:28:24 1643  	 END;
14:28:24 1644  
14:28:24 1645  EXCEPTION
14:28:24 1646  WHEN BAD_INVOICE_ID THEN
14:28:24 1647  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1648  	   SPROC_NAME, 'No such invoice');
14:28:24 1649  WHEN CAN_NOT_UPDATE_INVOCIE THEN
14:28:24 1650  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1651  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
14:28:24 1652  WHEN OTHERS THEN
14:28:24 1653  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1654  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1655  END SET_IS_TAX_CALCULATION_NEEDED;
14:28:24 1656  
14:28:24 1657  /******************************************************************************/
14:28:24 1658  
14:28:24 1659  PROCEDURE REFUND_INVOICE (
14:28:24 1660  	 in_invoice_id	    IN NUMBER,
14:28:24 1661  	 in_refund_amount   IN NUMBER,
14:28:24 1662  	 in_note	    IN VARCHAR2,
14:28:24 1663  	 in_created_by	    IN VARCHAR2,
14:28:24 1664  	 out_charge_id	    OUT NUMBER
14:28:24 1665  ) AS
14:28:24 1666  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
14:28:24 1667  -- VARIABLES
14:28:24 1668  var_invoice_status_id  NUMBER;
14:28:24 1669  var_subscription_id    NUMBER;
14:28:24 1670  var_account_id	      NUMBER;
14:28:24 1671  var_group_id	      NUMBER;
14:28:24 1672  var_account_status_id  NUMBER;
14:28:24 1673  var_new_transaction_id NUMBER;
14:28:24 1674  var_instrument_type_id NUMBER;
14:28:24 1675  var_instrument_id      NUMBER;
14:28:24 1676  var_new_charge_id      NUMBER;
14:28:24 1677  var_invoice_amount     NUMBER(10,2);
14:28:24 1678  var_refunds_before     NUMBER(10,2);
14:28:24 1679  var_charges_amount     NUMBER(10,2);
14:28:24 1680  -- EXCEPTIONS
14:28:24 1681  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
14:28:24 1682  ACCOUNT_IS_FROZEN	     EXCEPTION;
14:28:24 1683  BAD_INVOICE_ID		     EXCEPTION;
14:28:24 1684  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
14:28:24 1685  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
14:28:24 1686  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
14:28:24 1687  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
14:28:24 1688  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
14:28:24 1689  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
14:28:24 1690  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
14:28:24 1691  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
14:28:24 1692  EXCEPTION_MESSAGE	      VARCHAR2(1024);
14:28:24 1693  BEGIN
14:28:24 1694  
14:28:24 1695  	 BEGIN
14:28:24 1696  	   SELECT
14:28:24 1697  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
14:28:24 1698  	   FROM
14:28:24 1699  	     INVOICE
14:28:24 1700  	   WHERE
14:28:24 1701  	     INVOICE.ID = in_invoice_id;
14:28:24 1702  	   EXCEPTION
14:28:24 1703  	     WHEN NO_DATA_FOUND THEN
14:28:24 1704  	       RAISE BAD_INVOICE_ID;
14:28:24 1705  	 END;
14:28:24 1706  
14:28:24 1707  	 -- Get instrument and subscription id if exists
14:28:24 1708  	 BEGIN
14:28:24 1709  	   SELECT
14:28:24 1710  	     SUBSCRIPTION.INSTRUMENT_ID,
14:28:24 1711  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
14:28:24 1712  	     SUBSCRIPTION.ACCOUNT_ID,
14:28:24 1713  	     SUBSCRIPTION.ID
14:28:24 1714  	     into
14:28:24 1715  	     var_instrument_id,
14:28:24 1716  	     var_instrument_type_id,
14:28:24 1717  	     var_account_id,
14:28:24 1718  	     var_subscription_id
14:28:24 1719  	   FROM
14:28:24 1720  	     SUBSCRIPTION
14:28:24 1721  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
14:28:24 1722  	   WHERE
14:28:24 1723  	     LICENSE.INVOICE_ID = in_invoice_id
14:28:24 1724  	     AND ROWNUM <= 1;
14:28:24 1725  	   EXCEPTION
14:28:24 1726  	     WHEN NO_DATA_FOUND THEN
14:28:24 1727  	       BEGIN
14:28:24 1728  
14:28:24 1729  		 var_subscription_id := NULL;
14:28:24 1730  
14:28:24 1731  		 SELECT
14:28:24 1732  		   CHARGE.INSTRUMENT_ID,
14:28:24 1733  		   CHARGE.INSTRUMENT_TYPE_ID,
14:28:24 1734  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
14:28:24 1735  		   into
14:28:24 1736  		   var_instrument_id,
14:28:24 1737  		   var_instrument_type_id,
14:28:24 1738  		   var_group_id
14:28:24 1739  		 FROM
14:28:24 1740  		   INVOICE
14:28:24 1741  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
14:28:24 1742  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
14:28:24 1743  		 WHERE
14:28:24 1744  		   INVOICE.ID = in_invoice_id
14:28:24 1745  		   AND ROWNUM <= 1;
14:28:24 1746  
14:28:24 1747  		 SELECT
14:28:24 1748  		   ACCOUNT.ID into var_account_id
14:28:24 1749  		 FROM
14:28:24 1750  		   ACCOUNT
14:28:24 1751  		 WHERE
14:28:24 1752  		   ACCOUNT.GROUP_ID = var_group_id;
14:28:24 1753  
14:28:24 1754  		 EXCEPTION
14:28:24 1755  		   WHEN NO_DATA_FOUND THEN
14:28:24 1756  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
14:28:24 1757  	       END;
14:28:24 1758  	 END;
14:28:24 1759  
14:28:24 1760  	 -- Check account status. It should not to be frozen
14:28:24 1761  	 SELECT
14:28:24 1762  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
14:28:24 1763  	 FROM
14:28:24 1764  	   ACCOUNT
14:28:24 1765  	 WHERE
14:28:24 1766  	   ACCOUNT.ID = var_account_id;
14:28:24 1767  
14:28:24 1768  	 IF var_account_status_id = GLOBAL_STATUSES_V23.ACCOUNT_FROZEN THEN
14:28:24 1769  	   RAISE ACCOUNT_IS_FROZEN;
14:28:24 1770  	 END IF;
14:28:24 1771  
14:28:24 1772  	 IF var_invoice_status_id != GLOBAL_STATUSES_V23.INVOICE_CLOSED THEN
14:28:24 1773  	   RAISE INVOICE_IS_NOT_CLOSED;
14:28:24 1774  	 END IF;
14:28:24 1775  
14:28:24 1776  	 BEGIN
14:28:24 1777  	   PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT (
14:28:24 1778  	     in_invoice_id => in_invoice_id,
14:28:24 1779  	     out_amount    => var_invoice_amount
14:28:24 1780  	   );
14:28:24 1781  	   EXCEPTION
14:28:24 1782  	     WHEN OTHERS THEN
14:28:24 1783  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1784  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:28:24 1785  	 END;
14:28:24 1786  
14:28:24 1787  	 IF ( in_refund_amount > var_invoice_amount ) THEN
14:28:24 1788  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
14:28:24 1789  	 END IF;
14:28:24 1790  
14:28:24 1791  	 SELECT /*+ STAR_TRANSFORMATION */
14:28:24 1792  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
14:28:24 1793  	 FROM
14:28:24 1794  	   CHARGE
14:28:24 1795  	 WHERE
14:28:24 1796  	   CHARGE.INVOICE_ID = in_invoice_id
14:28:24 1797  	   AND (
14:28:24 1798  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_OPENED
14:28:24 1799  	     OR (
14:28:24 1800  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V23.CHARGE_PROCESSED
14:28:24 1801  	       AND EXISTS (
14:28:24 1802  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
14:28:24 1803  	       )
14:28:24 1804  	     )
14:28:24 1805  	   )
14:28:24 1806  	   AND CHARGE.CHARGE_AMOUNT < 0;
14:28:24 1807  
14:28:24 1808  	 -- Refunds are negative
14:28:24 1809  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
14:28:24 1810  	 var_refunds_before := 0 - var_refunds_before;
14:28:24 1811  
14:28:24 1812  	 var_charges_amount := 0;
14:28:24 1813  
14:28:24 1814  	 FOR f_processed_charges IN (
14:28:24 1815  	   SELECT
14:28:24 1816  	     CHARGE.CHARGE_AMOUNT
14:28:24 1817  	   FROM
14:28:24 1818  	     CHARGE
14:28:24 1819  	   WHERE
14:28:24 1820  	     CHARGE.INVOICE_ID = in_invoice_id
14:28:24 1821  	     AND CHARGE.CHARGE_AMOUNT > 0
14:28:24 1822  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V23.CHARGE_PROCESSED FROM DUAL)
14:28:24 1823  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS)
14:28:24 1824  	 )
14:28:24 1825  	 LOOP
14:28:24 1826  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
14:28:24 1827  	 END LOOP;
14:28:24 1828  
14:28:24 1829  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
14:28:24 1830  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
14:28:24 1831  	 END IF;
14:28:24 1832  
14:28:24 1833  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
14:28:24 1834  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
14:28:24 1835  	 END IF;
14:28:24 1836  
14:28:24 1837  	 BEGIN
14:28:24 1838  	   PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
14:28:24 1839  	     in_transaction_id	       => NULL,
14:28:24 1840  	     in_status_id	       => GLOBAL_STATUSES_V23.TRANSACTION_PREPARE,
14:28:24 1841  	     in_amount		       => -in_refund_amount,
14:28:24 1842  	     in_created_by	       => in_created_by,
14:28:24 1843  	     in_order_id	       => NULL,
14:28:24 1844  	     in_is_refund	       => GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 1845  	     in_transaction_type_code  => 'REFUND',
14:28:24 1846  	     out_transaction_id        => var_new_transaction_id
14:28:24 1847  	   );
14:28:24 1848  	   EXCEPTION
14:28:24 1849  	     WHEN OTHERS THEN
14:28:24 1850  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1851  	       RAISE CAN_NOT_CREATE_TRANSACTION;
14:28:24 1852  	 END;
14:28:24 1853  
14:28:24 1854  	 BEGIN
14:28:24 1855  	   PROCS_CHARGE_V23.CREATE_CHARGE(
14:28:24 1856  	     in_invoice_id	   => in_invoice_id,
14:28:24 1857  	     in_transaction_id	   => var_new_transaction_id,
14:28:24 1858  	     in_instrument_type_id => var_instrument_type_id,
14:28:24 1859  	     in_instrument_id	   => var_instrument_id,
14:28:24 1860  	     in_charge_amount	   => -in_refund_amount,
14:28:24 1861  	     in_created_by	   => in_created_by,
14:28:24 1862  	     in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
14:28:24 1863  	     out_charge_id	   => var_new_charge_id
14:28:24 1864  	   );
14:28:24 1865  	   EXCEPTION
14:28:24 1866  	     WHEN OTHERS THEN
14:28:24 1867  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1868  	       RAISE CAN_NOT_CREATE_CHARGE;
14:28:24 1869  	 END;
14:28:24 1870  
14:28:24 1871  	 out_charge_id := var_new_charge_id;
14:28:24 1872  
14:28:24 1873  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
14:28:24 1874  	   BEGIN
14:28:24 1875  	     PROCS_SUBSCRIPTION_V23.ANNOTATE_SUBSCRIPTION(
14:28:24 1876  	       in_subscription_id => var_subscription_id,
14:28:24 1877  	       in_agent_id	  => 0, -- AGENT_ID??
14:28:24 1878  	       in_note		  => in_note,
14:28:24 1879  	       in_created_by	  => in_created_by
14:28:24 1880  	     );
14:28:24 1881  	     EXCEPTION
14:28:24 1882  	       WHEN OTHERS THEN
14:28:24 1883  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1884  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
14:28:24 1885  	   END;
14:28:24 1886  	 END IF;
14:28:24 1887  
14:28:24 1888  EXCEPTION
14:28:24 1889  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
14:28:24 1890  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1891  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
14:28:24 1892  WHEN INVOICE_IS_NOT_CLOSED THEN
14:28:24 1893  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1894  	   SPROC_NAME, 'Invoice is not closed');
14:28:24 1895  WHEN ACCOUNT_IS_FROZEN THEN
14:28:24 1896  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1897  	   SPROC_NAME, 'Could not refund subscription for frozen account');
14:28:24 1898  WHEN BAD_INVOICE_ID THEN
14:28:24 1899  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1900  	   SPROC_NAME, 'No such invoice');
14:28:24 1901  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:28:24 1902  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1903  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
14:28:24 1904  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
14:28:24 1905  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1906  	   SPROC_NAME, 'Refund is greater than amount');
14:28:24 1907  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
14:28:24 1908  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1909  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
14:28:24 1910  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
14:28:24 1911  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1912  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
14:28:24 1913  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:28:24 1914  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1915  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:28:24 1916  WHEN CAN_NOT_CREATE_CHARGE THEN
14:28:24 1917  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1918  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:28:24 1919  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
14:28:24 1920  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1921  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
14:28:24 1922  WHEN OTHERS THEN
14:28:24 1923  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1924  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1925  END REFUND_INVOICE;
14:28:24 1926  
14:28:24 1927  /******************************************************************************/
14:28:24 1928  
14:28:24 1929  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
14:28:24 1930  	 in_invoice_id		     IN NUMBER,
14:28:24 1931  	 out_order_id		     OUT VARCHAR2,
14:28:24 1932  	 out_external_transaction_id OUT VARCHAR2
14:28:24 1933  ) AS
14:28:24 1934  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
14:28:24 1935  -- VARIABLES
14:28:24 1936  temp_invoice_id number;
14:28:24 1937  cnt_matched_instr number := 0;
14:28:24 1938  -- EXCEPTIONS
14:28:24 1939  BAD_INVOICE_ID EXCEPTION;
14:28:24 1940  BEGIN
14:28:24 1941  
14:28:24 1942  	 BEGIN
14:28:24 1943  	   SELECT
14:28:24 1944  	     i.id into temp_invoice_id
14:28:24 1945  	   from
14:28:24 1946  	     invoice i
14:28:24 1947  	   where
14:28:24 1948  	     i.id = in_invoice_id;
14:28:24 1949  	   EXCEPTION
14:28:24 1950  	     WHEN NO_DATA_FOUND THEN
14:28:24 1951  	       RAISE BAD_INVOICE_ID;
14:28:24 1952  	 END;
14:28:24 1953  
14:28:24 1954  	 select
14:28:24 1955  	   count(1) into cnt_matched_instr
14:28:24 1956  	 from
14:28:24 1957  	   charge ch
14:28:24 1958  	 inner join
14:28:24 1959  	   subscription s
14:28:24 1960  	 on
14:28:24 1961  	   s.instrument_id = ch.instrument_id
14:28:24 1962  	 where
14:28:24 1963  	   ch.invoice_id = in_invoice_id;
14:28:24 1964  
14:28:24 1965  	 if cnt_matched_instr = 0 then
14:28:24 1966  	   out_external_transaction_id := null;
14:28:24 1967  	   out_order_id := null;
14:28:24 1968  	   return;
14:28:24 1969  	 end if;
14:28:24 1970  
14:28:24 1971  	 SELECT
14:28:24 1972  	   t.order_id,
14:28:24 1973  	   ta.external_transaction_id
14:28:24 1974  	   into
14:28:24 1975  	   out_order_id,
14:28:24 1976  	   out_external_transaction_id
14:28:24 1977  	 from
14:28:24 1978  	   charge ch
14:28:24 1979  	   inner join transaction t on ch.transaction_id = t.id
14:28:24 1980  	   inner join transaction_attempt ta on ta.transaction_id = t.id
14:28:24 1981  	 where
14:28:24 1982  	   ch.invoice_id = in_invoice_id
14:28:24 1983  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
14:28:24 1984  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
14:28:24 1985  
14:28:24 1986  EXCEPTION
14:28:24 1987  WHEN BAD_INVOICE_ID THEN
14:28:24 1988  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1989  	   SPROC_NAME, 'No such invoice');
14:28:24 1990  WHEN NO_DATA_FOUND THEN
14:28:24 1991  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1992  	   SPROC_NAME, 'No payment data found');
14:28:24 1993  WHEN OTHERS THEN
14:28:24 1994  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1995  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1996  END GET_PAYMENT_INFO_BY_INVOICE_ID;
14:28:24 1997  
14:28:24 1998  PROCEDURE IS_REVOKE_ENTITLEMENTS(
14:28:24 1999  	 in_invoice_id IN NUMBER,
14:28:24 2000  	 out_is_revoke OUT NUMBER
14:28:24 2001  ) AS
14:28:24 2002  BEGIN
14:28:24 2003  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V23.FALSE, GLOBAL_CONSTANTS_V23.TRUE)
14:28:24 2004  	   into out_is_revoke
14:28:24 2005  	 FROM
14:28:24 2006  	   offer_chain oc,
14:28:24 2007  	   subscription s,
14:28:24 2008  	   license l,
14:28:24 2009  	   invoice i
14:28:24 2010  	 where
14:28:24 2011  	   oc.id = s.offer_chain_id and
14:28:24 2012  	   s.id = l.subscription_id and
14:28:24 2013  	   l.invoice_id = i.id and
14:28:24 2014  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V23.TRUE and
14:28:24 2015  	   i.id = in_invoice_id and
14:28:24 2016  	   rownum < 2
14:28:24 2017  	 ;
14:28:24 2018  END IS_REVOKE_ENTITLEMENTS;
14:28:24 2019  
14:28:24 2020  END PROCS_INVOICE_V23;
14:28:24 2021  .
14:28:24 SQL> /

Package body created.

Elapsed: 00:00:00.13
14:28:24 SQL> 
14:28:24 SQL> prompt Compiling body for procs_fin_instruments.sql
Compiling body for procs_fin_instruments.sql
14:28:24 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V23" AS
14:28:24   2  
14:28:24   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
14:28:24   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:24   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
14:28:24   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
14:28:24   7  AS
14:28:24   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
14:28:24   9  BEGIN
14:28:24  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
14:28:24  11  	  PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_GIFT_CERTIFICATE (
14:28:24  12  	    in_gift_certificate_id	  => rec.Id,
14:28:24  13  	    in_gift_certificate_status_id => in_status_id,
14:28:24  14  	    in_updated_by		  => in_updater
14:28:24  15  	  );
14:28:24  16  	END LOOP;
14:28:24  17  END UPDATE_GC_STATUS_BY_INVOICE;
14:28:24  18  
14:28:24  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
14:28:24  20  	in_invoice_id		     IN NUMBER,
14:28:24  21  	out_is_invoice_for_redeem_gc OUT NUMBER
14:28:24  22  ) AS
14:28:24  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
14:28:24  24  var_is_for_gc NUMBER;
14:28:24  25  BEGIN
14:28:24  26  	SELECT
14:28:24  27  	  count(1) into var_is_for_gc
14:28:24  28  	FROM GIFT_CERTIFICATE GC
14:28:24  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
14:28:24  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
14:28:24  31  
14:28:24  32  	IF var_is_for_gc > 0 THEN
14:28:24  33  	  out_is_invoice_for_redeem_gc := 1;
14:28:24  34  	ELSE
14:28:24  35  	  out_is_invoice_for_redeem_gc := 0;
14:28:24  36  	END IF;
14:28:24  37  END IS_INVOICE_FOR_REDEEMED_GC;
14:28:24  38  
14:28:24  39  PROCEDURE GET_UNREDEEMED_GCS (
14:28:24  40  	out_result_set		OUT SYS_REFCURSOR,
14:28:24  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:28:24  42  	in_num_rows		IN NUMBER DEFAULT 10000,
14:28:24  43  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:24  44  ) AS
14:28:24  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
14:28:24  46  BEGIN
14:28:24  47  	OPEN out_result_set FOR
14:28:24  48  SELECT * FROM
14:28:24  49  (
14:28:24  50  	SELECT
14:28:24  51  	  gc.EXPIRATION_DATE,
14:28:24  52  	  ch.name,
14:28:24  53  	  ch.id offer_chain_id,
14:28:24  54  	  gc.sender_email,
14:28:24  55  	  gc.sender_name,
14:28:24  56  	  gc.recipient_email,
14:28:24  57  	  gc.recipient_name,
14:28:24  58  	  gc.purchase_date,
14:28:24  59  	  gc.redemption_date,
14:28:24  60  	  gc.purchaser_group_id,
14:28:24  61  	  gc.redeemer_group_id,
14:28:24  62  	  gc.code,
14:28:24  63  	  gc.gift_message,
14:28:24  64  	  gc.recipient_notify_date,
14:28:24  65  	  gc.id
14:28:24  66  	FROM
14:28:24  67  	  GIFT_CERTIFICATE gc,
14:28:24  68  	  OFFER_CHAIN ch
14:28:24  69  	WHERE
14:28:24  70  	  ch.id = gc.offer_chain_id
14:28:24  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
14:28:24  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
14:28:24  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
14:28:24  74  	  AND gc.redeemer_group_id is null
14:28:24  75  	  AND NOT EXISTS(
14:28:24  76  	    SELECT NULL
14:28:24  77  	    FROM PROCESS_RETRY_THROTTLE
14:28:24  78  	    WHERE PROCESS_NAME = in_process_name
14:28:24  79  	      AND GENERIC_ID = gc.id
14:28:24  80  	  ) AND EXISTS(
14:28:24  81  	    SELECT NULL
14:28:24  82  	    FROM
14:28:24  83  	      charge c,
14:28:24  84  	      transaction_attempt ta,
14:28:24  85  	      transaction t
14:28:24  86  	    WHERE
14:28:24  87  	      c.invoice_id = gc.purchase_invoice_id and
14:28:24  88  	      c.transaction_id = t.id and
14:28:24  89  	      t.id = ta.transaction_id and
14:28:24  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS
14:28:24  91  	  ) AND NOT EXISTS (
14:28:24  92  	    SELECT NULL
14:28:24  93  	    FROM
14:28:24  94  	      charge c,
14:28:24  95  	      transaction t
14:28:24  96  	    WHERE
14:28:24  97  	      c.invoice_id = gc.purchase_invoice_id and
14:28:24  98  	      c.transaction_id = t.id and
14:28:24  99  	      t.is_refund = GLOBAL_CONSTANTS_V23.TRUE
14:28:24 100  	  )
14:28:24 101  	  AND ROWNUM <= in_num_rows*10
14:28:24 102  	  ORDER BY dbms_random.value
14:28:24 103  ) WHERE
14:28:24 104  	  ROWNUM <= in_num_rows;
14:28:24 105  EXCEPTION
14:28:24 106  WHEN OTHERS THEN
14:28:24 107  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 109  END GET_UNREDEEMED_GCS;
14:28:24 110  
14:28:24 111  PROCEDURE ADD_CREDIT_CARD (
14:28:24 112  /*
14:28:24 113  Throws exceptions:
14:28:24 114  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 115  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 116  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:24 117  */
14:28:24 118  	in_group_id		  IN NUMBER,
14:28:24 119  	in_updated_by		  IN VARCHAR2,
14:28:24 120  	in_instrument_name	  IN VARCHAR2,
14:28:24 121  	in_card_holder_name	  IN VARCHAR2,
14:28:24 122  	in_street_address	  IN VARCHAR2,
14:28:24 123  	in_street_address2	  IN VARCHAR2,
14:28:24 124  	in_state		  IN VARCHAR2,
14:28:24 125  	in_city 		  IN VARCHAR2,
14:28:24 126  	in_postal_code		  IN VARCHAR2,
14:28:24 127  	in_country		  IN CHAR,
14:28:24 128  	in_last_four_cc 	  IN VARCHAR2,
14:28:24 129  	in_expiration_date	  IN DATE,
14:28:24 130  	in_credit_card_type_id	  IN NUMBER,
14:28:24 131  	in_token		  IN VARCHAR2,
14:28:24 132  	in_chase_profile_id	  IN VARCHAR2,
14:28:24 133  	in_credit_card_status_id  IN NUMBER,
14:28:24 134  	in_private_first_name	  IN VARCHAR2,
14:28:24 135  	in_private_last_name	  IN VARCHAR2,
14:28:24 136  	out_credit_card_id	  OUT NUMBER
14:28:24 137  ) AS
14:28:24 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
14:28:24 139  -- VARIABLES
14:28:24 140  var_account_id	      NUMBER;
14:28:24 141  var_account_status      NUMBER;
14:28:24 142  var_credit_card_id      NUMBER;
14:28:24 143  temp_old_credit_card_id NUMBER;
14:28:24 144  -- EXCEPTIONS
14:28:24 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
14:28:24 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
14:28:24 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
14:28:24 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
14:28:24 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
14:28:24 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
14:28:24 151  var_charges_set		SYS_REFCURSOR;
14:28:24 152  var_charge_id		NUMBER;
14:28:24 153  var_charge_invoice_id	NUMBER;
14:28:24 154  var_charge_transaction_id NUMBER;
14:28:24 155  var_charge_amount 	NUMBER(10,2);
14:28:24 156  temp_out_charge_id	NUMBER;
14:28:24 157  temp_out_transaction_id	NUMBER;
14:28:24 158  var_order_id			VARCHAR2(1024);
14:28:24 159  BEGIN
14:28:24 160  
14:28:24 161  	-- Get account id
14:28:24 162  	-- Get account status
14:28:24 163  	SELECT
14:28:24 164  	  ACCOUNT.ID,
14:28:24 165  	  ACCOUNT.ACCOUNT_STATUS_ID
14:28:24 166  	  into
14:28:24 167  	  var_account_id,
14:28:24 168  	  var_account_status
14:28:24 169  	FROM
14:28:24 170  	  ACCOUNT
14:28:24 171  	WHERE
14:28:24 172  	  ACCOUNT.GROUP_ID = in_group_id;
14:28:24 173  
14:28:24 174  	SELECT
14:28:24 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
14:28:24 176  	FROM DUAL;
14:28:24 177  
14:28:24 178  	-- Insert new row in CREDIT_CARD table
14:28:24 179  	PROCS_FIN_INSTRUMENTS_CRU_V23.CREATE_CREDIT_CARD(
14:28:24 180  	  out_credit_card_id	      => var_credit_card_id,
14:28:24 181  	  in_account_id 	      => var_account_id,
14:28:24 182  	  in_instrument_name	      => in_instrument_name,
14:28:24 183  	  in_private_card_holder_name => in_card_holder_name,
14:28:24 184  	  in_private_street_address   => in_street_address,
14:28:24 185  	  in_private_street_address2  => in_street_address2,
14:28:24 186  	  in_state		      => in_state,
14:28:24 187  	  in_city		      => in_city,
14:28:24 188  	  in_postal_code	      => in_postal_code,
14:28:24 189  	  in_country		      => in_country,
14:28:24 190  	  in_last_four_cc	      => in_last_four_cc,
14:28:24 191  	  in_expiration_date	      => in_expiration_date,
14:28:24 192  	  in_credit_card_type_id      => in_credit_card_type_id,
14:28:24 193  	  in_secret_token	      => in_token,
14:28:24 194  	  in_chase_profile_id	      => in_chase_profile_id,
14:28:24 195  	  in_created_by 	      => in_updated_by,
14:28:24 196  	  in_credit_card_status_id    => in_credit_card_status_id,
14:28:24 197  	  in_private_first_name       => in_private_first_name,
14:28:24 198  	  in_private_last_name	      => in_private_last_name
14:28:24 199  	);
14:28:24 200  
14:28:24 201  	out_credit_card_id := var_credit_card_id;
14:28:24 202  
14:28:24 203  EXCEPTION
14:28:24 204  WHEN NO_DATA_FOUND THEN
14:28:24 205  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 206  	  SPROC_NAME, 'No such account');
14:28:24 207  WHEN BAD_OLD_CREDIT_CARD THEN
14:28:24 208  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 209  	  SPROC_NAME, 'Bad old credit card id');
14:28:24 210  WHEN BAD_IS_DEFAULT_VALUE THEN
14:28:24 211  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 212  	  SPROC_NAME, 'Bad is_default value');
14:28:24 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
14:28:24 214  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
14:28:24 216  WHEN BAD_ACCOUNT_STATUS THEN
14:28:24 217  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 218  	  SPROC_NAME, 'Account is not active');
14:28:24 219  WHEN OTHERS THEN
14:28:24 220  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 222  END ADD_CREDIT_CARD;
14:28:24 223  
14:28:24 224  /******************************************************************************/
14:28:24 225  
14:28:24 226  PROCEDURE ADD_PAYPAL (
14:28:24 227  /*
14:28:24 228  Throws exceptions:
14:28:24 229  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 230  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 231  */
14:28:24 232  	in_group_id			IN NUMBER,
14:28:24 233  	in_instrument_name		IN VARCHAR2,
14:28:24 234  	in_private_email_address	IN VARCHAR2,
14:28:24 235  	in_created_by			IN VARCHAR2,
14:28:24 236  	in_paypal_status_id		IN NUMBER,
14:28:24 237  	in_paypal_prvt_street_address	IN VARCHAR2,
14:28:24 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
14:28:24 239  	in_state			IN VARCHAR2,
14:28:24 240  	in_city 			IN VARCHAR2,
14:28:24 241  	in_postal_code			IN VARCHAR2,
14:28:24 242  	in_country			IN CHAR,
14:28:24 243  	in_expiration_date		IN DATE,
14:28:24 244  	in_secret_token 		IN VARCHAR2,
14:28:24 245  	out_paypal_id			OUT NUMBER
14:28:24 246  ) AS
14:28:24 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
14:28:24 248  var_paypal_id NUMBER;
14:28:24 249  var_account_id  NUMBER;
14:28:24 250  -- EXCEPTIONS
14:28:24 251  BAD_GROUP_ID	    EXCEPTION;
14:28:24 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
14:28:24 253  BAD_PAYPAL_STATUS     EXCEPTION;
14:28:24 254  EXCEPTION_MESSAGE VARCHAR2(1024);
14:28:24 255  BEGIN
14:28:24 256  
14:28:24 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_ACTIVE
14:28:24 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_INACTIVE
14:28:24 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_FROZEN THEN
14:28:24 260  	  RAISE BAD_PAYPAL_STATUS;
14:28:24 261  	END IF;
14:28:24 262  
14:28:24 263  	BEGIN
14:28:24 264  	  SELECT
14:28:24 265  	    a.id into var_account_id
14:28:24 266  	  from
14:28:24 267  	    account a
14:28:24 268  	  where
14:28:24 269  	    a.group_id = in_group_id;
14:28:24 270  	  EXCEPTION
14:28:24 271  	    WHEN NO_DATA_FOUND THEN
14:28:24 272  	      RAISE BAD_GROUP_ID;
14:28:24 273  	END;
14:28:24 274  
14:28:24 275  	BEGIN
14:28:24 276  	  PROCS_FIN_INSTRUMENTS_CRU_V23.CREATE_PAYPAL(
14:28:24 277  	    out_paypal_id		   => var_paypal_id,
14:28:24 278  	    in_paypal_id		   => NULL,
14:28:24 279  	    in_account_id		   => var_account_id,
14:28:24 280  	    in_instrument_name		   => in_instrument_name,
14:28:24 281  	    in_private_email_address	   => in_private_email_address,
14:28:24 282  	    in_created_by		   => in_created_by,
14:28:24 283  	    in_paypal_status_id 	   => in_paypal_status_id,
14:28:24 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
14:28:24 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
14:28:24 286  	    in_state			   => in_state,
14:28:24 287  	    in_city			   => in_city,
14:28:24 288  	    in_postal_code		   => in_postal_code,
14:28:24 289  	    in_country			   => in_country,
14:28:24 290  	    in_expiration_date		   => in_expiration_date,
14:28:24 291  	    in_secret_token		   => in_secret_token
14:28:24 292  	  );
14:28:24 293  	  EXCEPTION
14:28:24 294  	    WHEN OTHERS THEN
14:28:24 295  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
14:28:24 297  	END;
14:28:24 298  
14:28:24 299  	out_paypal_id := var_paypal_id;
14:28:24 300  
14:28:24 301  EXCEPTION
14:28:24 302  WHEN BAD_GROUP_ID THEN
14:28:24 303  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 304  	  SPROC_NAME, 'No such group id');
14:28:24 305  WHEN BAD_PAYPAL_STATUS THEN
14:28:24 306  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 307  	  SPROC_NAME, 'Bad paypal status');
14:28:24 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
14:28:24 309  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
14:28:24 311  WHEN OTHERS THEN
14:28:24 312  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 314  END ADD_PAYPAL;
14:28:24 315  
14:28:24 316  /******************************************************************************/
14:28:24 317  
14:28:24 318  PROCEDURE DISABLE_CREDIT_CARD (
14:28:24 319  /*
14:28:24 320  Throws exceptions:
14:28:24 321  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 322  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 323  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:24 324  */
14:28:24 325  	in_credit_card_id IN NUMBER,
14:28:24 326  	in_updated_by	  IN VARCHAR2
14:28:24 327  ) AS
14:28:24 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
14:28:24 329  -- VARIBLES
14:28:24 330  var_account_id		     NUMBER;
14:28:24 331  var_group_id		     NUMBER;
14:28:24 332  var_credit_card_status	     NUMBER;
14:28:24 333  var_pending_transactions_num   NUMBER;
14:28:24 334  var_pending_invoices_num	     NUMBER;
14:28:24 335  current_def_instrument_type_id NUMBER;
14:28:24 336  current_def_instrument_id      NUMBER;
14:28:24 337  -- EXCEPTIONS
14:28:24 338  BAD_CC_STATUS		   EXCEPTION;
14:28:24 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
14:28:24 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
14:28:24 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
14:28:24 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
14:28:24 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
14:28:24 344  BEGIN
14:28:24 345  
14:28:24 346  	-- Get credit card status
14:28:24 347  	-- Get account id
14:28:24 348  	SELECT
14:28:24 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
14:28:24 350  	  CREDIT_CARD.ACCOUNT_ID
14:28:24 351  	  into
14:28:24 352  	  var_credit_card_status,
14:28:24 353  	  var_account_id
14:28:24 354  	FROM
14:28:24 355  	  CREDIT_CARD
14:28:24 356  	WHERE
14:28:24 357  	  CREDIT_CARD.ID = in_credit_card_id;
14:28:24 358  
14:28:24 359  	-- Check that we can disable this credit card (STUB)
14:28:24 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
14:28:24 362  	END IF;
14:28:24 363  
14:28:24 364  	-- Get account id
14:28:24 365  	SELECT
14:28:24 366  	  ACCOUNT.GROUP_ID into var_group_id
14:28:24 367  	FROM
14:28:24 368  	  ACCOUNT
14:28:24 369  	WHERE
14:28:24 370  	  ACCOUNT.ID = var_account_id;
14:28:24 371  
14:28:24 372  	-- Card should to be active
14:28:24 373  	IF var_credit_card_status != GLOBAL_STATUSES_V23.CREDIT_CARD_ACTIVE THEN
14:28:24 374  	  RAISE BAD_CC_STATUS;
14:28:24 375  	END IF;
14:28:24 376  
14:28:24 377  	-- Looking for pending transactions associated with given credit card
14:28:24 378  	SELECT
14:28:24 379  	  COUNT(*) into var_pending_invoices_num
14:28:24 380  	FROM
14:28:24 381  	  CHARGE
14:28:24 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:28:24 383  	WHERE
14:28:24 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
14:28:24 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
14:28:24 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING;
14:28:24 387  
14:28:24 388  	IF var_pending_invoices_num > 0 THEN
14:28:24 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
14:28:24 390  	END IF;
14:28:24 391  
14:28:24 392  	-- Getting current default financial instrument
14:28:24 393  	BEGIN
14:28:24 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
14:28:24 395  	    in_group_id 	   => var_group_id,
14:28:24 396  	    out_instrument_type_id => current_def_instrument_type_id,
14:28:24 397  	    out_instrument_id	   => current_def_instrument_id
14:28:24 398  	  );
14:28:24 399  	  EXCEPTION
14:28:24 400  	    WHEN OTHERS THEN
14:28:24 401  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
14:28:24 403  	END;
14:28:24 404  
14:28:24 405  	-- Checking that credit card is not default
14:28:24 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
14:28:24 407  	  AND current_def_instrument_id = in_credit_card_id THEN
14:28:24 408  	  BEGIN
14:28:24 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
14:28:24 410  	      in_group_id => var_group_id
14:28:24 411  	    );
14:28:24 412  	  EXCEPTION
14:28:24 413  	    WHEN OTHERS THEN
14:28:24 414  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
14:28:24 416  	  END;
14:28:24 417  	END IF;
14:28:24 418  
14:28:24 419  	-- Update credit card status
14:28:24 420  	PROCS_FIN_INSTRUMENTS_V23.UPDATE_CREDIT_CARD_STATUS(
14:28:24 421  	  in_credit_card_id	   => in_credit_card_id,
14:28:24 422  	  in_updated_by 	   => in_updated_by,
14:28:24 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V23.CREDIT_CARD_DISABLED
14:28:24 424  	);
14:28:24 425  
14:28:24 426  EXCEPTION
14:28:24 427  WHEN NO_DATA_FOUND THEN
14:28:24 428  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 429  	  SPROC_NAME, 'No such credit card');
14:28:24 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
14:28:24 431  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
14:28:24 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
14:28:24 434  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
14:28:24 436  WHEN BAD_CC_STATUS THEN
14:28:24 437  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 438  	  SPROC_NAME, 'Credit card is not active');
14:28:24 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
14:28:24 440  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
14:28:24 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
14:28:24 443  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
14:28:24 445  WHEN OTHERS THEN
14:28:24 446  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 448  END DISABLE_CREDIT_CARD;
14:28:24 449  
14:28:24 450  /******************************************************************************/
14:28:24 451  
14:28:24 452  PROCEDURE DISABLE_PAYPAL (
14:28:24 453  /*
14:28:24 454  Throws exceptions:
14:28:24 455  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 456  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 457  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:24 458  */
14:28:24 459  	in_paypal_id  IN NUMBER,
14:28:24 460  	in_updated_by IN VARCHAR2
14:28:24 461  ) AS
14:28:24 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
14:28:24 463  -- VARIABLES
14:28:24 464  var_paypal_status_id NUMBER;
14:28:24 465  var_account_id	   NUMBER;
14:28:24 466  var_group_id	   NUMBER;
14:28:24 467  var_pending_invoices_num NUMBER;
14:28:24 468  current_def_instrument_type_id NUMBER;
14:28:24 469  current_def_instrument_id NUMBER;
14:28:24 470  -- EXCEPTIONS
14:28:24 471  BAD_PAYPAL_ID EXCEPTION;
14:28:24 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
14:28:24 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
14:28:24 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
14:28:24 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
14:28:24 476  EXCEPTION_MESSAGE VARCHAR2(1024);
14:28:24 477  BEGIN
14:28:24 478  
14:28:24 479  	-- Get Paypal status
14:28:24 480  	-- Get account
14:28:24 481  	BEGIN
14:28:24 482  	  SELECT
14:28:24 483  	    PAYPAL.PAYPAL_STATUS_ID,
14:28:24 484  	    PAYPAL.ACCOUNT_ID
14:28:24 485  	    into
14:28:24 486  	    var_paypal_status_id,
14:28:24 487  	    var_account_id
14:28:24 488  	  FROM
14:28:24 489  	    PAYPAL
14:28:24 490  	  WHERE
14:28:24 491  	    PAYPAL.ID = in_paypal_id;
14:28:24 492  	  EXCEPTION
14:28:24 493  	    WHEN NO_DATA_FOUND THEN
14:28:24 494  	      RAISE BAD_PAYPAL_ID;
14:28:24 495  	END;
14:28:24 496  
14:28:24 497  	-- Get group id
14:28:24 498  	SELECT
14:28:24 499  	  ACCOUNT.GROUP_ID into var_group_id
14:28:24 500  	FROM
14:28:24 501  	  ACCOUNT
14:28:24 502  	WHERE
14:28:24 503  	  ACCOUNT.ID = var_account_id;
14:28:24 504  
14:28:24 505  	-- Card should not be disabled
14:28:24 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V23.PAYPAL_INACTIVE THEN
14:28:24 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
14:28:24 508  	END IF;
14:28:24 509  
14:28:24 510  	-- Looking for pending transactions associated with given credit card
14:28:24 511  	SELECT
14:28:24 512  	  COUNT(*) into var_pending_invoices_num
14:28:24 513  	FROM
14:28:24 514  	  CHARGE
14:28:24 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
14:28:24 516  	WHERE
14:28:24 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
14:28:24 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
14:28:24 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V23.TRANSACTION_PENDING;
14:28:24 520  
14:28:24 521  	IF var_pending_invoices_num > 0 THEN
14:28:24 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
14:28:24 523  	END IF;
14:28:24 524  
14:28:24 525  	-- Getting current default financial instrument
14:28:24 526  	BEGIN
14:28:24 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
14:28:24 528  	    in_group_id 	   => var_group_id,
14:28:24 529  	    out_instrument_type_id => current_def_instrument_type_id,
14:28:24 530  	    out_instrument_id	   => current_def_instrument_id
14:28:24 531  	  );
14:28:24 532  	  EXCEPTION
14:28:24 533  	    WHEN OTHERS THEN
14:28:24 534  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
14:28:24 536  	END;
14:28:24 537  
14:28:24 538  	-- Checking that credit card is not default
14:28:24 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
14:28:24 540  	  AND current_def_instrument_id = in_paypal_id THEN
14:28:24 541  	  BEGIN
14:28:24 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
14:28:24 543  	      in_group_id => var_group_id
14:28:24 544  	    );
14:28:24 545  	  EXCEPTION
14:28:24 546  	    WHEN OTHERS THEN
14:28:24 547  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
14:28:24 549  	  END;
14:28:24 550  	END IF;
14:28:24 551  
14:28:24 552  	PROCS_FIN_INSTRUMENTS_V23.UPDATE_PAYPAL_STATUS(
14:28:24 553  	  in_paypal_id	      => in_paypal_id,
14:28:24 554  	  in_updated_by       => in_updated_by,
14:28:24 555  	  in_paypal_status_id => GLOBAL_STATUSES_V23.PAYPAL_INACTIVE
14:28:24 556  	);
14:28:24 557  
14:28:24 558  EXCEPTION
14:28:24 559  WHEN BAD_PAYPAL_ID THEN
14:28:24 560  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 561  	  SPROC_NAME, 'No such paypal');
14:28:24 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
14:28:24 563  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 564  	  SPROC_NAME, 'Paypal already inactive');
14:28:24 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
14:28:24 566  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
14:28:24 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
14:28:24 569  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
14:28:24 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
14:28:24 572  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
14:28:24 574  WHEN OTHERS THEN
14:28:24 575  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 577  END DISABLE_PAYPAL;
14:28:24 578  
14:28:24 579  /******************************************************************************/
14:28:24 580  
14:28:24 581  PROCEDURE UPDATE_CREDIT_CARD (
14:28:24 582  /*
14:28:24 583  Throws exceptions:
14:28:24 584  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:24 585  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 586  */
14:28:24 587  	in_credit_card_id	  IN NUMBER,
14:28:24 588  	in_updated_by		  IN VARCHAR2,
14:28:24 589  	in_instrument_name	  IN VARCHAR2,
14:28:24 590  	in_is_default		  IN NUMBER
14:28:24 591  ) AS
14:28:24 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
14:28:24 593  -- VARIABLES
14:28:24 594  var_account_id NUMBER;
14:28:24 595  var_group_id   NUMBER;
14:28:24 596  temp_cc_rownum NUMBER;
14:28:24 597  current_def_instrument_type_id NUMBER;
14:28:24 598  current_def_instrument_id      NUMBER;
14:28:24 599  -- EXCEPTION
14:28:24 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
14:28:24 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
14:28:24 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
14:28:24 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
14:28:24 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
14:28:24 605  BEGIN
14:28:24 606  
14:28:24 607  	-- Get account id
14:28:24 608  	SELECT
14:28:24 609  	  CREDIT_CARD.ACCOUNT_ID
14:28:24 610  	  into
14:28:24 611  	  var_account_id
14:28:24 612  	FROM
14:28:24 613  	  CREDIT_CARD
14:28:24 614  	WHERE
14:28:24 615  	  CREDIT_CARD.ID = in_credit_card_id;
14:28:24 616  
14:28:24 617  	-- Get group id
14:28:24 618  	SELECT
14:28:24 619  	  ACCOUNT.GROUP_ID into var_group_id
14:28:24 620  	FROM
14:28:24 621  	  ACCOUNT
14:28:24 622  	WHERE
14:28:24 623  	  ACCOUNT.ID = var_account_id;
14:28:24 624  
14:28:24 625  	-- Check that passed data is correct
14:28:24 626  	IF in_is_default != GLOBAL_CONSTANTS_V23.TRUE
14:28:24 627  	  AND in_is_default != GLOBAL_CONSTANTS_V23.FALSE
14:28:24 628  	  AND in_is_default IS NOT NULL THEN
14:28:24 629  	  RAISE BAD_IS_DEFAULT_VALUE;
14:28:24 630  	END IF;
14:28:24 631  
14:28:24 632  	-- Update credit card
14:28:24 633  	IF in_instrument_name IS NOT NULL THEN
14:28:24 634  	  PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_CREDIT_CARD(
14:28:24 635  	    in_credit_card_id  => in_credit_card_id,
14:28:24 636  	    in_updated_by      => in_updated_by,
14:28:24 637  	    in_instrument_name => in_instrument_name
14:28:24 638  	  );
14:28:24 639  	END IF;
14:28:24 640  
14:28:24 641  	-- Set default financial instrument
14:28:24 642  	IF in_is_default = GLOBAL_CONSTANTS_V23.TRUE THEN
14:28:24 643  	  BEGIN
14:28:24 644  	    PROCS_FIN_INSTRUMENTS_V23.SET_DEF_FINANCIAL_INSTRUMENT(
14:28:24 645  	      in_group_id	    => var_group_id,
14:28:24 646  	      in_instrument_type_id => GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD,
14:28:24 647  	      in_instrument_id	    => in_credit_card_id,
14:28:24 648  	      in_updated_by	    => in_updated_by
14:28:24 649  	    );
14:28:24 650  	    EXCEPTION
14:28:24 651  	      WHEN OTHERS THEN
14:28:24 652  		EXCEPTION_MESSAGE := SQLERRM;
14:28:24 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
14:28:24 654  	  END;
14:28:24 655  	END IF;
14:28:24 656  
14:28:24 657  	-- Set default financial instrument
14:28:24 658  	IF in_is_default = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 659  	  BEGIN
14:28:24 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
14:28:24 661  	      in_group_id	     => var_group_id,
14:28:24 662  	      out_instrument_type_id => current_def_instrument_type_id,
14:28:24 663  	      out_instrument_id      => current_def_instrument_id
14:28:24 664  	    );
14:28:24 665  	  EXCEPTION
14:28:24 666  	    WHEN OTHERS THEN
14:28:24 667  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
14:28:24 669  	  END;
14:28:24 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
14:28:24 671  	    AND current_def_instrument_id = in_credit_card_id THEN
14:28:24 672  	    BEGIN
14:28:24 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
14:28:24 674  		in_group_id => var_group_id
14:28:24 675  	      );
14:28:24 676  	      EXCEPTION
14:28:24 677  		WHEN OTHERS THEN
14:28:24 678  		  EXCEPTION_MESSAGE := SQLERRM;
14:28:24 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
14:28:24 680  	    END;
14:28:24 681  	  END IF;
14:28:24 682  	END IF;
14:28:24 683  
14:28:24 684  EXCEPTION
14:28:24 685  WHEN NO_DATA_FOUND THEN
14:28:24 686  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 687  	  SPROC_NAME, 'No such credit card');
14:28:24 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
14:28:24 689  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
14:28:24 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
14:28:24 692  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
14:28:24 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
14:28:24 695  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
14:28:24 697  WHEN OTHERS THEN
14:28:24 698  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 700  END UPDATE_CREDIT_CARD;
14:28:24 701  
14:28:24 702  /******************************************************************************/
14:28:24 703  
14:28:24 704  	PROCEDURE START_GC_PURCHASING (
14:28:24 705  	  in_group_id		    IN NUMBER,
14:28:24 706  	  in_offer_chain_id	    IN VARCHAR2,
14:28:24 707  	  in_gift_certificate_code  IN	VARCHAR2,
14:28:24 708  	  in_created_by 	    IN	VARCHAR2,
14:28:24 709  	  in_recipient_name	    IN	VARCHAR2,
14:28:24 710  	  in_recipient_email	    IN	VARCHAR2,
14:28:24 711  	  in_recipient_address_id   IN NUMBER,
14:28:24 712  	  in_recipient_notify_date  IN DATE,
14:28:24 713  	  in_sender_name	    IN VARCHAR2,
14:28:24 714  	  in_sender_email	    IN VARCHAR2,
14:28:24 715  	  in_gift_message	    IN	VARCHAR2,
14:28:24 716  	  in_expiration_date	    IN DATE,
14:28:24 717  	  in_campaign		    IN VARCHAR2,
14:28:24 718  	  in_reference_code	    IN VARCHAR2,
14:28:24 719  	  out_gift_certificate_id   OUT NUMBER,
14:28:24 720  	  out_invoice_id	    OUT NUMBER
14:28:24 721  	) AS
14:28:24 722  	  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
14:28:24 723  -- VARIABLES
14:28:24 724  	  var_account_id	    NUMBER;
14:28:24 725  	  temp_gc_code		    GIFT_CERTIFICATE.CODE%TYPE;
14:28:24 726  	  var_och_is_gc 	    NUMBER;
14:28:24 727  	  var_offer_chain_status_id NUMBER;
14:28:24 728  	  var_is_for_redemption     NUMBER;
14:28:24 729  	  var_new_invoice_id	    NUMBER;
14:28:24 730  	  var_gift_cert_id	    NUMBER;
14:28:24 731  	  var_account_tax_exempt_id VARCHAR2(255);
14:28:24 732  -- EXCEPTIONS
14:28:24 733  	    BAD_GROUP_ID		  EXCEPTION;
14:28:24 734  	    GC_CODE_ALREADY_EXISTS	  EXCEPTION;
14:28:24 735  	    BAD_OFFER_CHAIN_ID		  EXCEPTION;
14:28:24 736  	    OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
14:28:24 737  	    BAD_OFFER_CHAIN_STATUS	  EXCEPTION;
14:28:24 738  	    CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
14:28:24 739  	    CAN_NOT_CREATE_INVOICE	  EXCEPTION;
14:28:24 740  	    OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
14:28:24 741  	    CAN_NOT_CREATE_LINE_ITEMS	  EXCEPTION;
14:28:24 742  	    REF_CODE_ALREADY_EXISTS	  EXCEPTION;
14:28:24 743  
14:28:24 744  	  EXCEPTION_MESSAGE VARCHAR2(1024);
14:28:24 745  	  BEGIN
14:28:24 746  -- Get account id
14:28:24 747  	    BEGIN
14:28:24 748  	      SELECT
14:28:24 749  		ACCOUNT.ID,
14:28:24 750  		ACCOUNT.TAX_EXEMPT_ID
14:28:24 751  	      into
14:28:24 752  		var_account_id,
14:28:24 753  		var_account_tax_exempt_id
14:28:24 754  	      FROM
14:28:24 755  		ACCOUNT
14:28:24 756  	      WHERE
14:28:24 757  		ACCOUNT.GROUP_ID = in_group_id;
14:28:24 758  	      EXCEPTION
14:28:24 759  	      WHEN NO_DATA_FOUND THEN
14:28:24 760  	      RAISE BAD_GROUP_ID;
14:28:24 761  	    END;
14:28:24 762  
14:28:24 763  -- Check for the same code
14:28:24 764  	    BEGIN
14:28:24 765  	      SELECT
14:28:24 766  		GIFT_CERTIFICATE.CODE into temp_gc_code
14:28:24 767  	      FROM
14:28:24 768  		GIFT_CERTIFICATE
14:28:24 769  	      WHERE
14:28:24 770  		GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
14:28:24 771  
14:28:24 772  	      RAISE GC_CODE_ALREADY_EXISTS;
14:28:24 773  
14:28:24 774  	      EXCEPTION
14:28:24 775  	      WHEN NO_DATA_FOUND THEN
14:28:24 776  	      NULL;
14:28:24 777  	    END;
14:28:24 778  
14:28:24 779  -- Get offer chain flag "is_gift_certificate"
14:28:24 780  	    BEGIN
14:28:24 781  	      SELECT
14:28:24 782  		OFFER_CHAIN.IS_GIFT_CERTIFICATE,
14:28:24 783  		OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
14:28:24 784  	      into
14:28:24 785  		var_och_is_gc,
14:28:24 786  		var_offer_chain_status_id
14:28:24 787  	      FROM
14:28:24 788  		OFFER_CHAIN
14:28:24 789  	      WHERE
14:28:24 790  		OFFER_CHAIN.ID = in_offer_chain_id;
14:28:24 791  	      EXCEPTION
14:28:24 792  	      WHEN NO_DATA_FOUND THEN
14:28:24 793  	      RAISE BAD_OFFER_CHAIN_ID;
14:28:24 794  	    END;
14:28:24 795  
14:28:24 796  	    IF var_och_is_gc != GLOBAL_CONSTANTS_V23.TRUE
14:28:24 797  	       OR var_och_is_gc IS NULL THEN
14:28:24 798  	      RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
14:28:24 799  	    END IF;
14:28:24 800  
14:28:24 801  	    IF var_offer_chain_status_id != GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE THEN
14:28:24 802  	      RAISE BAD_OFFER_CHAIN_STATUS;
14:28:24 803  	    END IF;
14:28:24 804  
14:28:24 805  -- norlov: #38151 check if the OC is for Redemption:
14:28:24 806  	    SELECT
14:28:24 807  	      COUNT(*) into var_is_for_redemption
14:28:24 808  	    FROM
14:28:24 809  	      OFFER_CHAIN_ELIGIBILITY
14:28:24 810  	    WHERE
14:28:24 811  	      OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 812  	      AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V23.GIFT_CERTIFICATE_REQUIRED
14:28:24 813  	      AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V23.ELIGIBILITY_FLAG_SET;
14:28:24 814  
14:28:24 815  	    IF var_is_for_redemption > 0 THEN
14:28:24 816  	      RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
14:28:24 817  	    END IF;
14:28:24 818  
14:28:24 819  -- Create new invoice
14:28:24 820  	    BEGIN
14:28:24 821  	      PROCS_INVOICE_V23.CREATE_INVOICE(
14:28:24 822  		  in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_OPEN,
14:28:24 823  		  in_created_by     => in_created_by,
14:28:24 824  		  in_tax_exempt_id  => var_account_tax_exempt_id,
14:28:24 825  		  out_invoice_id    => var_new_invoice_id
14:28:24 826  	      );
14:28:24 827  	      EXCEPTION
14:28:24 828  	      WHEN OTHERS THEN
14:28:24 829  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 830  	      RAISE CAN_NOT_CREATE_INVOICE;
14:28:24 831  	    END;
14:28:24 832  
14:28:24 833  -- Add line items for new invoice
14:28:24 834  	    BEGIN
14:28:24 835  	      FOR f_offer_data IN (
14:28:24 836  	      SELECT
14:28:24 837  		OFFER_ID,
14:28:24 838  		NUM_RECURRENCES
14:28:24 839  	      FROM
14:28:24 840  		OFFER_OFFER_CHAIN
14:28:24 841  	      WHERE
14:28:24 842  		OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 843  	      )
14:28:24 844  	      LOOP
14:28:24 845  	      IF f_offer_data.NUM_RECURRENCES < 1 THEN
14:28:24 846  		RAISE OFFER_REC_NUM_LESS_THAN_ONE;
14:28:24 847  	      END IF;
14:28:24 848  	      FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
14:28:24 849  	      LOOP
14:28:24 850  		PROCS_LINE_ITEMS_V23.ADD_LINE_ITEMS(
14:28:24 851  		    in_invoice_id => var_new_invoice_id,
14:28:24 852  		    in_offer_id   => f_offer_data.OFFER_ID,
14:28:24 853  		    in_created_by => in_created_by
14:28:24 854  		);
14:28:24 855  	      END LOOP;
14:28:24 856  	      END LOOP;
14:28:24 857  
14:28:24 858  	      EXCEPTION
14:28:24 859  	      WHEN OTHERS THEN
14:28:24 860  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 861  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
14:28:24 862  	    END;
14:28:24 863  
14:28:24 864  	    BEGIN
14:28:24 865  	      PROCS_FIN_INSTRUMENTS_CRU_V23.CREATE_GIFT_CERTIFICATE(
14:28:24 866  		  out_gift_certificate_id	=> var_gift_cert_id,
14:28:24 867  		  in_purchaser_group_id 	=> in_group_id,
14:28:24 868  		  in_purchaser_invoice_id	=> var_new_invoice_id,
14:28:24 869  		  in_offer_chain_id		=> in_offer_chain_id,
14:28:24 870  		  in_expiration_date		=> in_expiration_date,
14:28:24 871  		  in_purchase_date		=> SYSDATE,
14:28:24 872  		  in_gift_certificate_status_id => GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE,
14:28:24 873  		  in_code			=> in_gift_certificate_code,
14:28:24 874  		  in_created_by 		=> in_created_by,
14:28:24 875  		  in_recipient_name		=> in_recipient_name,
14:28:24 876  		  in_gift_message		=> in_gift_message,
14:28:24 877  		  in_recipient_email		=> in_recipient_email,
14:28:24 878  		  in_sender_email		=> in_sender_email,
14:28:24 879  		  in_sender_name		=> in_sender_name,
14:28:24 880  		  in_recipient_address_id	=> in_recipient_address_id,
14:28:24 881  		  in_recipient_notify_date	=> in_recipient_notify_date,
14:28:24 882  		  in_campaign			=> in_campaign,
14:28:24 883  		  in_reference_code		=> in_reference_code
14:28:24 884  	      );
14:28:24 885  	      EXCEPTION WHEN DUP_VAL_ON_INDEX THEN RAISE REF_CODE_ALREADY_EXISTS;
14:28:24 886  	    END;
14:28:24 887  
14:28:24 888  	    out_gift_certificate_id := var_gift_cert_id;
14:28:24 889  	    out_invoice_id := var_new_invoice_id;
14:28:24 890  
14:28:24 891  	    EXCEPTION
14:28:24 892  	    WHEN BAD_OFFER_CHAIN_STATUS THEN
14:28:24 893  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 894  					     SPROC_NAME, 'Offer chain is not active');
14:28:24 895  	    WHEN GC_CODE_ALREADY_EXISTS THEN
14:28:24 896  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:24 897  					     SPROC_NAME, 'Gift certificate with same code already exists');
14:28:24 898  	    WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
14:28:24 899  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 900  					     SPROC_NAME, 'This offer chain can not be used for gift certificate');
14:28:24 901  	    WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
14:28:24 902  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 903  					     SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
14:28:24 904  	    WHEN CAN_NOT_CREATE_INVOICE THEN
14:28:24 905  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 906  					     SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
14:28:24 907  	    WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
14:28:24 908  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 909  					     SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
14:28:24 910  	    WHEN BAD_GROUP_ID THEN
14:28:24 911  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 912  					     SPROC_NAME, 'No such group id');
14:28:24 913  	    WHEN BAD_OFFER_CHAIN_ID THEN
14:28:24 914  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 915  					     SPROC_NAME, 'No such offer chain');
14:28:24 916  	    WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
14:28:24 917  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 918  					     SPROC_NAME, 'Some offer has recurrences number less than 1');
14:28:24 919  	    WHEN REF_CODE_ALREADY_EXISTS THEN
14:28:24 920  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 921  					     SPROC_NAME, 'reference_code already used');
14:28:24 922  	    WHEN OTHERS THEN
14:28:24 923  	    PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 924  					     SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 925  	  END START_GC_PURCHASING;
14:28:24 926  /******************************************************************************/
14:28:24 927  
14:28:24 928  	PROCEDURE FINALIZE_GC_PURCHASING (
14:28:24 929  	  in_invoice_id 	IN NUMBER,
14:28:24 930  	  in_created_by 	IN VARCHAR2,
14:28:24 931  	  in_instrument_id	IN NUMBER,
14:28:24 932  	  in_instrument_type_id IN NUMBER,
14:28:24 933  	  in_order_id		IN VARCHAR2,
14:28:24 934  	  in_transaction_id	IN NUMBER,
14:28:24 935  	  out_charge_amount	OUT NUMBER
14:28:24 936  	) AS
14:28:24 937  	  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
14:28:24 938  -- VARIABLES
14:28:24 939  	  temp_transaction_id_count NUMBER;
14:28:24 940  	  var_invoice_amount	    NUMBER(10,2);
14:28:24 941  	  var_transaction_id	    NUMBER;
14:28:24 942  	  var_new_charge_id	    NUMBER;
14:28:24 943  -- EXCEPTIONS
14:28:24 944  	    BAD_CREDIT_CARD_ID		EXCEPTION;
14:28:24 945  	    BAD_PAYPAL_ID		EXCEPTION;
14:28:24 946  	    BAD_INSTRUMENT_TYPE 	EXCEPTION;
14:28:24 947  	    TRANSACTION_EXISTS		EXCEPTION;
14:28:24 948  	    CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
14:28:24 949  	    CAN_NOT_USE_FCINSTR 	EXCEPTION;
14:28:24 950  	    CAN_NOT_CREATE_TRANSACTION	EXCEPTION;
14:28:24 951  	    CAN_NOT_CREATE_CHARGE	EXCEPTION;
14:28:24 952  	  EXCEPTION_MESSAGE   VARCHAR2(1024);
14:28:24 953  	  BEGIN
14:28:24 954  
14:28:24 955  -- Check that instrument exists
14:28:24 956  	    IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
14:28:24 957  	      IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 958  		RAISE BAD_CREDIT_CARD_ID;
14:28:24 959  	      END IF;
14:28:24 960  	    ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
14:28:24 961  	      IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 962  		RAISE BAD_PAYPAL_ID;
14:28:24 963  	      END IF;
14:28:24 964  	    ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT THEN
14:28:24 965  	      NULL;
14:28:24 966  	    ELSE
14:28:24 967  	      RAISE BAD_INSTRUMENT_TYPE;
14:28:24 968  	    END IF;
14:28:24 969  
14:28:24 970  -- Check that transaction with given id do not exists
14:28:24 971  	    SELECT
14:28:24 972  	      COUNT(*) into temp_transaction_id_count
14:28:24 973  	    FROM
14:28:24 974  	      TRANSACTION
14:28:24 975  	    WHERE
14:28:24 976  	      TRANSACTION.ID = in_transaction_id;
14:28:24 977  
14:28:24 978  	    IF temp_transaction_id_count > 0 THEN
14:28:24 979  	      RAISE TRANSACTION_EXISTS;
14:28:24 980  	    END IF;
14:28:24 981  
14:28:24 982  -- Calculate new invoice amount
14:28:24 983  	    BEGIN
14:28:24 984  	      PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
14:28:24 985  	      EXCEPTION
14:28:24 986  	      WHEN OTHERS THEN
14:28:24 987  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 988  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:28:24 989  	    END;
14:28:24 990  
14:28:24 991  	    IF var_invoice_amount > 0
14:28:24 992  	       AND in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT THEN
14:28:24 993  	      RAISE CAN_NOT_USE_FCINSTR;
14:28:24 994  	    END IF;
14:28:24 995  
14:28:24 996  -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
14:28:24 997  	    IF var_invoice_amount = 0 THEN
14:28:24 998  	      PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
14:28:24 999  		  in_invoice_id 		 => in_invoice_id,
14:28:24 1000  		   in_updated_by		  => in_created_by,
14:28:24 1001  		   in_invoice_status_id 	  => GLOBAL_STATUSES_V23.INVOICE_CLOSED
14:28:24 1002  	       );
14:28:24 1003  	     END IF;
14:28:24 1004  
14:28:24 1005  	     IF var_invoice_amount > 0 THEN
14:28:24 1006  -- Create transaction
14:28:24 1007  	       BEGIN
14:28:24 1008  		 PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
14:28:24 1009  		     in_transaction_id	      => in_transaction_id,
14:28:24 1010  		     in_status_id	      => GLOBAL_STATUSES_V23.TRANSACTION_PENDING,
14:28:24 1011  		     in_amount		      => var_invoice_amount,
14:28:24 1012  		     in_created_by	      => in_created_by,
14:28:24 1013  		     in_order_id	      => in_order_id,
14:28:24 1014  		     in_transaction_type_code => 'GIFT_CERTIFICATE_PURCHASE',
14:28:24 1015  		     out_transaction_id       => var_transaction_id
14:28:24 1016  		 );
14:28:24 1017  		 EXCEPTION
14:28:24 1018  		 WHEN OTHERS THEN
14:28:24 1019  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1020  		 RAISE CAN_NOT_CREATE_TRANSACTION;
14:28:24 1021  	       END;
14:28:24 1022  
14:28:24 1023  -- Create charge
14:28:24 1024  	       BEGIN
14:28:24 1025  		 PROCS_CHARGE_V23.CREATE_CHARGE(
14:28:24 1026  		     in_invoice_id	   => in_invoice_id,
14:28:24 1027  		     in_transaction_id	   => var_transaction_id,
14:28:24 1028  		     in_instrument_type_id => in_instrument_type_id,
14:28:24 1029  		     in_instrument_id	   => in_instrument_id,
14:28:24 1030  		     in_charge_amount	   => var_invoice_amount,
14:28:24 1031  		     in_created_by	   => in_created_by,
14:28:24 1032  		     in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
14:28:24 1033  		     out_charge_id	   => var_new_charge_id
14:28:24 1034  		 );
14:28:24 1035  		 out_charge_amount := var_invoice_amount;
14:28:24 1036  		 EXCEPTION
14:28:24 1037  		 WHEN OTHERS THEN
14:28:24 1038  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1039  		 RAISE CAN_NOT_CREATE_CHARGE;
14:28:24 1040  	       END;
14:28:24 1041  	     ELSE
14:28:24 1042  	       out_charge_amount := 0;
14:28:24 1043  	     END IF;
14:28:24 1044  
14:28:24 1045  	     EXCEPTION
14:28:24 1046  	     WHEN CAN_NOT_USE_FCINSTR THEN
14:28:24 1047  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1048  					      SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
14:28:24 1049  	     WHEN BAD_CREDIT_CARD_ID THEN
14:28:24 1050  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1051  					      SPROC_NAME, 'Bad credit card id');
14:28:24 1052  	     WHEN BAD_PAYPAL_ID THEN
14:28:24 1053  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1054  					      SPROC_NAME, 'Bad paypal id');
14:28:24 1055  	     WHEN BAD_INSTRUMENT_TYPE THEN
14:28:24 1056  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1057  					      SPROC_NAME, 'Bad instrument type');
14:28:24 1058  	     WHEN TRANSACTION_EXISTS THEN
14:28:24 1059  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:24 1060  					      SPROC_NAME, 'Transaction with given id already exists');
14:28:24 1061  	     WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:28:24 1062  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1063  					      SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:28:24 1064  	     WHEN CAN_NOT_CREATE_CHARGE THEN
14:28:24 1065  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1066  					      SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:28:24 1067  	     WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:28:24 1068  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1069  					      SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
14:28:24 1070  	     WHEN OTHERS THEN
14:28:24 1071  	     PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1072  					      SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1073  	   END FINALIZE_GC_PURCHASING;
14:28:24 1074  
14:28:24 1075  /******************************************************************************/
14:28:24 1076  
14:28:24 1077  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
14:28:24 1078  	 in_group_id		   IN NUMBER,
14:28:24 1079  	 in_offer_chain_id	   IN VARCHAR2,
14:28:24 1080  	 in_gift_certificate_code  IN VARCHAR2,
14:28:24 1081  	 in_created_by		   IN VARCHAR2,
14:28:24 1082  	 in_recipient_name	   IN VARCHAR2,
14:28:24 1083  	 in_recipient_email	   IN VARCHAR2,
14:28:24 1084  	 in_sender_name 	   IN VARCHAR2,
14:28:24 1085  	 in_sender_email	   IN VARCHAR2,
14:28:24 1086  	 in_gift_message	   IN VARCHAR2,
14:28:24 1087  	 in_instrument_id	   IN NUMBER,
14:28:24 1088  	 in_instrument_type_id	   IN NUMBER,
14:28:24 1089  	 in_expiration_date	   IN DATE,
14:28:24 1090  	 in_order_id		   IN VARCHAR2,
14:28:24 1091  	 in_transaction_id	   IN NUMBER
14:28:24 1092  ) AS
14:28:24 1093  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
14:28:24 1094  -- VARIABLES
14:28:24 1095  var_gift_cert_id   NUMBER;
14:28:24 1096  var_account_id	  NUMBER;
14:28:24 1097  var_invoice_amount NUMBER (10,2);
14:28:24 1098  var_new_invoice_id NUMBER;
14:28:24 1099  var_new_charge_id  NUMBER;
14:28:24 1100  var_och_is_gc	  NUMBER;
14:28:24 1101  var_offer_chain_status_id NUMBER;
14:28:24 1102  var_is_for_redemption	 NUMBER;
14:28:24 1103  var_account_tax_exempt_id VARCHAR2(255);
14:28:24 1104  
14:28:24 1105  temp_transaction_id_count NUMBER;
14:28:24 1106  var_transaction_id	 NUMBER;
14:28:24 1107  temp_gc_code VARCHAR2(255);
14:28:24 1108  
14:28:24 1109  var_invoice_status_id NUMBER;
14:28:24 1110  -- EXCEPTIONS
14:28:24 1111  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
14:28:24 1112  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
14:28:24 1113  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
14:28:24 1114  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
14:28:24 1115  BAD_GROUP_ID			   EXCEPTION;
14:28:24 1116  BAD_OFFER_CHAIN_ID		   EXCEPTION;
14:28:24 1117  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
14:28:24 1118  TRANSACTION_EXISTS		   EXCEPTION;
14:28:24 1119  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
14:28:24 1120  BAD_INSTRUMENT_TYPE		   EXCEPTION;
14:28:24 1121  BAD_CREDIT_CARD_ID		   EXCEPTION;
14:28:24 1122  BAD_PAYPAL_ID			   EXCEPTION;
14:28:24 1123  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
14:28:24 1124  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
14:28:24 1125  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
14:28:24 1126  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
14:28:24 1127  CAN_NOT_USE_FCINSTR		   EXCEPTION;
14:28:24 1128  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
14:28:24 1129  EXCEPTION_MESSAGE		   VARCHAR2(1024);
14:28:24 1130  BEGIN
14:28:24 1131  
14:28:24 1132  	 -- Get account id
14:28:24 1133  	 BEGIN
14:28:24 1134  	   SELECT
14:28:24 1135  	     ACCOUNT.ID,
14:28:24 1136  	     ACCOUNT.TAX_EXEMPT_ID
14:28:24 1137  	     into
14:28:24 1138  	     var_account_id,
14:28:24 1139  	     var_account_tax_exempt_id
14:28:24 1140  	   FROM
14:28:24 1141  	     ACCOUNT
14:28:24 1142  	   WHERE
14:28:24 1143  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:24 1144  	   EXCEPTION
14:28:24 1145  	   WHEN NO_DATA_FOUND THEN
14:28:24 1146  	     RAISE BAD_GROUP_ID;
14:28:24 1147  	 END;
14:28:24 1148  
14:28:24 1149  	 -- Check that instrument exists
14:28:24 1150  	 IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
14:28:24 1151  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 1152  	     RAISE BAD_CREDIT_CARD_ID;
14:28:24 1153  	   END IF;
14:28:24 1154  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
14:28:24 1155  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 1156  	     RAISE BAD_PAYPAL_ID;
14:28:24 1157  	   END IF;
14:28:24 1158  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT THEN
14:28:24 1159  	   NULL;
14:28:24 1160  	 ELSE
14:28:24 1161  	   RAISE BAD_INSTRUMENT_TYPE;
14:28:24 1162  	 END IF;
14:28:24 1163  
14:28:24 1164  	 -- Check for the same code
14:28:24 1165  	 BEGIN
14:28:24 1166  	   SELECT
14:28:24 1167  	     GIFT_CERTIFICATE.CODE into temp_gc_code
14:28:24 1168  	   FROM
14:28:24 1169  	     GIFT_CERTIFICATE
14:28:24 1170  	   WHERE
14:28:24 1171  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
14:28:24 1172  
14:28:24 1173  	   RAISE GC_CODE_ALREADY_EXISTS;
14:28:24 1174  
14:28:24 1175  	   EXCEPTION
14:28:24 1176  	     WHEN NO_DATA_FOUND THEN
14:28:24 1177  	       NULL;
14:28:24 1178  	 END;
14:28:24 1179  
14:28:24 1180  	 -- Get offer chain flag "is_gift_certificate"
14:28:24 1181  	 BEGIN
14:28:24 1182  	   SELECT
14:28:24 1183  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
14:28:24 1184  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
14:28:24 1185  	     into
14:28:24 1186  	     var_och_is_gc,
14:28:24 1187  	     var_offer_chain_status_id
14:28:24 1188  	   FROM
14:28:24 1189  	     OFFER_CHAIN
14:28:24 1190  	   WHERE
14:28:24 1191  	     OFFER_CHAIN.ID = in_offer_chain_id;
14:28:24 1192  	   EXCEPTION
14:28:24 1193  	   WHEN NO_DATA_FOUND THEN
14:28:24 1194  	     RAISE BAD_OFFER_CHAIN_ID;
14:28:24 1195  	 END;
14:28:24 1196  
14:28:24 1197  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V23.TRUE
14:28:24 1198  	   OR var_och_is_gc IS NULL THEN
14:28:24 1199  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
14:28:24 1200  	 END IF;
14:28:24 1201  
14:28:24 1202  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V23.OFFER_CHAIN_ACTIVE THEN
14:28:24 1203  	   RAISE BAD_OFFER_CHAIN_STATUS;
14:28:24 1204  	 END IF;
14:28:24 1205  
14:28:24 1206  	 -- norlov: #38151 check if the OC is for Redemption:
14:28:24 1207  	 SELECT
14:28:24 1208  	   COUNT(*) into var_is_for_redemption
14:28:24 1209  	 FROM
14:28:24 1210  	   OFFER_CHAIN_ELIGIBILITY
14:28:24 1211  	 WHERE
14:28:24 1212  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 1213  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V23.GIFT_CERTIFICATE_REQUIRED
14:28:24 1214  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V23.ELIGIBILITY_FLAG_SET;
14:28:24 1215  
14:28:24 1216  	 IF var_is_for_redemption > 0 THEN
14:28:24 1217  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
14:28:24 1218  	 END IF;
14:28:24 1219  
14:28:24 1220  	 -- Check that transaction with given id do not exists
14:28:24 1221  	 SELECT
14:28:24 1222  	   COUNT(*) into temp_transaction_id_count
14:28:24 1223  	 FROM
14:28:24 1224  	   TRANSACTION
14:28:24 1225  	 WHERE
14:28:24 1226  	   TRANSACTION.ID = in_transaction_id;
14:28:24 1227  
14:28:24 1228  	 IF temp_transaction_id_count > 0 THEN
14:28:24 1229  	   RAISE TRANSACTION_EXISTS;
14:28:24 1230  	 END IF;
14:28:24 1231  
14:28:24 1232  	 -- Create new invoice
14:28:24 1233  	 BEGIN
14:28:24 1234  	   PROCS_INVOICE_V23.CREATE_INVOICE(
14:28:24 1235  	     in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_OPEN,
14:28:24 1236  	     in_created_by     => in_created_by,
14:28:24 1237  	     in_tax_exempt_id  => var_account_tax_exempt_id,
14:28:24 1238  	     out_invoice_id    => var_new_invoice_id
14:28:24 1239  	   );
14:28:24 1240  	   EXCEPTION
14:28:24 1241  	     WHEN OTHERS THEN
14:28:24 1242  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1243  	       RAISE CAN_NOT_CREATE_INVOICE;
14:28:24 1244  	 END;
14:28:24 1245  
14:28:24 1246  	 -- Add line items for new invoice
14:28:24 1247  	 BEGIN
14:28:24 1248  	   FOR f_offer_data IN (
14:28:24 1249  	     SELECT
14:28:24 1250  	       OFFER_ID,
14:28:24 1251  	       NUM_RECURRENCES
14:28:24 1252  	     FROM
14:28:24 1253  	       OFFER_OFFER_CHAIN
14:28:24 1254  	     WHERE
14:28:24 1255  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
14:28:24 1256  	   )
14:28:24 1257  	   LOOP
14:28:24 1258  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
14:28:24 1259  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
14:28:24 1260  	     END IF;
14:28:24 1261  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
14:28:24 1262  	     LOOP
14:28:24 1263  	       PROCS_LINE_ITEMS_V23.ADD_LINE_ITEMS(
14:28:24 1264  		 in_invoice_id => var_new_invoice_id,
14:28:24 1265  		 in_offer_id   => f_offer_data.OFFER_ID,
14:28:24 1266  		 in_created_by => in_created_by
14:28:24 1267  	       );
14:28:24 1268  	     END LOOP;
14:28:24 1269  	   END LOOP;
14:28:24 1270  
14:28:24 1271  	   EXCEPTION
14:28:24 1272  	     WHEN OTHERS THEN
14:28:24 1273  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1274  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
14:28:24 1275  	 END;
14:28:24 1276  
14:28:24 1277  	 -- Calculate new invoice amount
14:28:24 1278  	 BEGIN
14:28:24 1279  	   PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
14:28:24 1280  	   EXCEPTION
14:28:24 1281  	     WHEN OTHERS THEN
14:28:24 1282  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1283  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
14:28:24 1284  	 END;
14:28:24 1285  
14:28:24 1286  	 IF var_invoice_amount > 0
14:28:24 1287  	   AND in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_ZCI_INSTRUMENT THEN
14:28:24 1288  	   RAISE CAN_NOT_USE_FCINSTR;
14:28:24 1289  	 END IF;
14:28:24 1290  
14:28:24 1291  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
14:28:24 1292  	 IF var_invoice_amount = 0 THEN
14:28:24 1293  	   PROCS_INVOICE_CRU_V23.UPDATE_INVOICE(
14:28:24 1294  	     in_invoice_id		    => var_new_invoice_id,
14:28:24 1295  	     in_updated_by		    => in_created_by,
14:28:24 1296  	     in_invoice_status_id	    => GLOBAL_STATUSES_V23.INVOICE_CLOSED
14:28:24 1297  	   );
14:28:24 1298  	 END IF;
14:28:24 1299  
14:28:24 1300  	 IF var_invoice_amount > 0 THEN
14:28:24 1301  	   -- Create transaction
14:28:24 1302  	   BEGIN
14:28:24 1303  	     PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
14:28:24 1304  	       in_transaction_id  => in_transaction_id,
14:28:24 1305  	       in_status_id	  => GLOBAL_STATUSES_V23.TRANSACTION_PENDING,
14:28:24 1306  	       in_amount	  => var_invoice_amount,
14:28:24 1307  	       in_created_by	  => in_created_by,
14:28:24 1308  	       in_order_id	  => in_order_id,
14:28:24 1309  	       out_transaction_id => var_transaction_id
14:28:24 1310  	     );
14:28:24 1311  	     EXCEPTION
14:28:24 1312  	       WHEN OTHERS THEN
14:28:24 1313  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1314  		 RAISE CAN_NOT_CREATE_TRANSACTION;
14:28:24 1315  	   END;
14:28:24 1316  
14:28:24 1317  	   -- Create charge
14:28:24 1318  	   BEGIN
14:28:24 1319  	     PROCS_CHARGE_V23.CREATE_CHARGE(
14:28:24 1320  	       in_invoice_id	     => var_new_invoice_id,
14:28:24 1321  	       in_transaction_id     => var_transaction_id,
14:28:24 1322  	       in_instrument_type_id => in_instrument_type_id,
14:28:24 1323  	       in_instrument_id      => in_instrument_id,
14:28:24 1324  	       in_charge_amount      => var_invoice_amount,
14:28:24 1325  	       in_created_by	     => in_created_by,
14:28:24 1326  	       in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
14:28:24 1327  	       out_charge_id	     => var_new_charge_id
14:28:24 1328  	     );
14:28:24 1329  	     EXCEPTION
14:28:24 1330  	       WHEN OTHERS THEN
14:28:24 1331  		 EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1332  		 RAISE CAN_NOT_CREATE_CHARGE;
14:28:24 1333  	   END;
14:28:24 1334  	 END IF;
14:28:24 1335  
14:28:24 1336  	 -- Create new row in GIFT_CERTIFICATE table
14:28:24 1337  	 PROCS_FIN_INSTRUMENTS_CRU_V23.CREATE_GIFT_CERTIFICATE(
14:28:24 1338  	   out_gift_certificate_id	 => var_gift_cert_id,
14:28:24 1339  	   in_purchaser_group_id	 => in_group_id,
14:28:24 1340  	   in_purchaser_invoice_id	 => var_new_invoice_id,
14:28:24 1341  	   in_offer_chain_id		 => in_offer_chain_id,
14:28:24 1342  	   in_expiration_date		 => in_expiration_date,
14:28:24 1343  	   in_purchase_date		 => SYSDATE,
14:28:24 1344  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE,
14:28:24 1345  	   in_code			 => in_gift_certificate_code,
14:28:24 1346  	   in_created_by		 => in_created_by,
14:28:24 1347  	   in_recipient_name		 => in_recipient_name,
14:28:24 1348  	   in_gift_message		 => in_gift_message,
14:28:24 1349  	   in_recipient_email		 => in_recipient_email,
14:28:24 1350  	   in_sender_email		 => in_sender_email,
14:28:24 1351  	   in_sender_name		 => in_sender_name
14:28:24 1352  	 );
14:28:24 1353  
14:28:24 1354  EXCEPTION
14:28:24 1355  WHEN CAN_NOT_USE_FCINSTR THEN
14:28:24 1356  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1357  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
14:28:24 1358  WHEN BAD_OFFER_CHAIN_STATUS THEN
14:28:24 1359  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1360  	   SPROC_NAME, 'Offer chain is not active');
14:28:24 1361  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
14:28:24 1362  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1363  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
14:28:24 1364  WHEN BAD_CREDIT_CARD_ID THEN
14:28:24 1365  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1366  	   SPROC_NAME, 'Bad credit card id');
14:28:24 1367  WHEN BAD_PAYPAL_ID THEN
14:28:24 1368  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1369  	   SPROC_NAME, 'Bad paypal id');
14:28:24 1370  WHEN BAD_INSTRUMENT_TYPE THEN
14:28:24 1371  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1372  	   SPROC_NAME, 'Bad instrument type');
14:28:24 1373  WHEN GC_CODE_ALREADY_EXISTS THEN
14:28:24 1374  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:24 1375  	   SPROC_NAME, 'Gift certificate with same code already exists');
14:28:24 1376  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
14:28:24 1377  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1378  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
14:28:24 1379  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
14:28:24 1380  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1381  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
14:28:24 1382  WHEN TRANSACTION_EXISTS THEN
14:28:24 1383  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR,
14:28:24 1384  	   SPROC_NAME, 'Transaction with given id already exists');
14:28:24 1385  WHEN CAN_NOT_CREATE_INVOICE THEN
14:28:24 1386  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1387  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
14:28:24 1388  WHEN CAN_NOT_CREATE_TRANSACTION THEN
14:28:24 1389  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1390  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
14:28:24 1391  WHEN CAN_NOT_CREATE_CHARGE THEN
14:28:24 1392  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1393  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
14:28:24 1394  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
14:28:24 1395  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1396  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
14:28:24 1397  WHEN BAD_GROUP_ID THEN
14:28:24 1398  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1399  	   SPROC_NAME, 'No such group id');
14:28:24 1400  WHEN BAD_OFFER_CHAIN_ID THEN
14:28:24 1401  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1402  	   SPROC_NAME, 'No such offer chain');
14:28:24 1403  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
14:28:24 1404  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1405  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
14:28:24 1406  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
14:28:24 1407  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1408  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
14:28:24 1409  WHEN OTHERS THEN
14:28:24 1410  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1411  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1412  END PURCHASE_GIFT_CERTIFICATE;
14:28:24 1413  
14:28:24 1414  /******************************************************************************/
14:28:24 1415  
14:28:24 1416  PROCEDURE REDEEM_GIFT_CERTIFICATE (
14:28:24 1417  	 in_group_id			 IN NUMBER,
14:28:24 1418  	 in_gift_certificate_code	 IN VARCHAR2,
14:28:24 1419  	 in_created_by			 IN VARCHAR2,
14:28:24 1420  	 in_redeemer_address_id 	 IN NUMBER,
14:28:24 1421  	 in_fin_instrument_id		 IN NUMBER,
14:28:24 1422  	 in_fin_instrument_type_id	 IN NUMBER,
14:28:24 1423  	 in_redemption_offer_chain_id	 IN NUMBER,
14:28:24 1424  	 out_subscription_id		 OUT NUMBER,
14:28:24 1425  	 out_license_id 		 OUT NUMBER
14:28:24 1426  ) AS
14:28:24 1427  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
14:28:24 1428  -- VARIABLES
14:28:24 1429  var_gift_certificate_id NUMBER;
14:28:24 1430  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
14:28:24 1431  var_purchased_oc_id     NUMBER;
14:28:24 1432  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
14:28:24 1433  var_offer_duration      VARCHAR2(30);
14:28:24 1434  var_invoice_id	       NUMBER;
14:28:24 1435  var_succ_purch_attempts_num NUMBER;
14:28:24 1436  var_subscription_id     NUMBER;
14:28:24 1437  var_license_id	       NUMBER;
14:28:24 1438  var_account_id	       NUMBER;
14:28:24 1439  var_gc_status_id        NUMBER;
14:28:24 1440  var_gc_charges_amount   NUMBER;
14:28:24 1441  var_gc_expiration_date  DATE;
14:28:24 1442  var_gc_redeemer_group_id NUMBER;
14:28:24 1443  var_gc_purchase_invoice_id NUMBER;
14:28:24 1444  var_gc_purchase_inv_status_id NUMBER;
14:28:24 1445  var_offer_index		     NUMBER;
14:28:24 1446  var_purchaser_group_id	     NUMBER;
14:28:24 1447  temp_license_id		     NUMBER;
14:28:24 1448  var_same_offer_chains_num     NUMBER;
14:28:24 1449  var_max_concurrent_subscrs    NUMBER;
14:28:24 1450  var_account_tax_exempt_id     VARCHAR2(255);
14:28:24 1451  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
14:28:24 1452  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
14:28:24 1453  var_first_offer_id	  NUMBER;
14:28:24 1454  var_date 	     DATE := SYSDATE;
14:28:24 1455  
14:28:24 1456  var_offers SYS_REFCURSOR;
14:28:24 1457  
14:28:24 1458  -- EXCEPTIONS
14:28:24 1459  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
14:28:24 1460  BAD_GROUP_ID		      EXCEPTION;
14:28:24 1461  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
14:28:24 1462  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
14:28:24 1463  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
14:28:24 1464  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
14:28:24 1465  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
14:28:24 1466  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
14:28:24 1467  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
14:28:24 1468  LIMIT_REACHED		      EXCEPTION;
14:28:24 1469  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
14:28:24 1470  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
14:28:24 1471  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
14:28:24 1472  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
14:28:24 1473  EXCEPTION_MESSAGE	      VARCHAR2(1024);
14:28:24 1474  BEGIN
14:28:24 1475  
14:28:24 1476  	 -- Get account id
14:28:24 1477  	 BEGIN
14:28:24 1478  	   SELECT
14:28:24 1479  	     ACCOUNT.ID,
14:28:24 1480  	     ACCOUNT.TAX_EXEMPT_ID
14:28:24 1481  	     into
14:28:24 1482  	     var_account_id,
14:28:24 1483  	     var_account_tax_exempt_id
14:28:24 1484  	   FROM
14:28:24 1485  	     ACCOUNT
14:28:24 1486  	   WHERE
14:28:24 1487  	     ACCOUNT.GROUP_ID = in_group_id
14:28:24 1488  	     AND ROWNUM <= 1;
14:28:24 1489  
14:28:24 1490  	   EXCEPTION
14:28:24 1491  	   WHEN NO_DATA_FOUND THEN
14:28:24 1492  	     RAISE BAD_GROUP_ID;
14:28:24 1493  	 END;
14:28:24 1494  
14:28:24 1495  	 -- Get gift certificate data
14:28:24 1496  	 BEGIN
14:28:24 1497  	   SELECT
14:28:24 1498  	     GIFT_CERTIFICATE.ID,
14:28:24 1499  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
14:28:24 1500  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
14:28:24 1501  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
14:28:24 1502  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
14:28:24 1503  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
14:28:24 1504  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
14:28:24 1505  	     into
14:28:24 1506  	     var_gift_certificate_id,
14:28:24 1507  	     var_purchased_oc_id,
14:28:24 1508  	     var_gc_status_id,
14:28:24 1509  	     var_purchaser_group_id,
14:28:24 1510  	     var_gc_expiration_date,
14:28:24 1511  	     var_gc_redeemer_group_id,
14:28:24 1512  	     var_gc_purchase_invoice_id
14:28:24 1513  	   FROM
14:28:24 1514  	     GIFT_CERTIFICATE
14:28:24 1515  	   WHERE
14:28:24 1516  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
14:28:24 1517  	     AND ROWNUM <= 1;
14:28:24 1518  
14:28:24 1519  	   EXCEPTION
14:28:24 1520  	   WHEN NO_DATA_FOUND THEN
14:28:24 1521  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
14:28:24 1522  	 END;
14:28:24 1523  
14:28:24 1524  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
14:28:24 1525  	 -- but in that case a redemption offer chain id should always be passed in
14:28:24 1526  	 IF var_oc_id_to_redeem IS NULL THEN
14:28:24 1527  	   BEGIN
14:28:24 1528  	     SELECT
14:28:24 1529  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
14:28:24 1530  	       into
14:28:24 1531  	       var_oc_id_to_redeem
14:28:24 1532  	     FROM
14:28:24 1533  	       OFFER_CHAIN_META_DATA
14:28:24 1534  	     WHERE
14:28:24 1535  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
14:28:24 1536  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V23.REDEMPTION_OC_ID
14:28:24 1537  	       AND ROWNUM = 1;
14:28:24 1538  -- requested by ticket so (but above is correct for the actual migrated data):
14:28:24 1539  --  SELECT
14:28:24 1540  --      OFFER_CHAIN.ID
14:28:24 1541  --      into
14:28:24 1542  --      var_oc_id_to_redeem
14:28:24 1543  --    FROM
14:28:24 1544  --      OFFER_CHAIN
14:28:24 1545  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
14:28:24 1546  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
14:28:24 1547  --    WHERE
14:28:24 1548  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 1549  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V23.GIFT_CERTIFICATE_REQUIRED
14:28:24 1550  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V23.ELIGIBILITY_FLAG_SET
14:28:24 1551  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 1552  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V23.REDEMPTION_OC_ID
14:28:24 1553  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
14:28:24 1554  --      AND ROWNUM = 1;
14:28:24 1555  
14:28:24 1556  	     EXCEPTION
14:28:24 1557  	     WHEN NO_DATA_FOUND THEN
14:28:24 1558  	       RAISE OC_TO_REDEEM_NOT_FOUND;
14:28:24 1559  	   END;
14:28:24 1560  	 END IF;
14:28:24 1561  
14:28:24 1562  	 -- Check that purchase invoice for this GC was closed
14:28:24 1563  	 SELECT
14:28:24 1564  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
14:28:24 1565  	 FROM
14:28:24 1566  	   INVOICE
14:28:24 1567  	 WHERE
14:28:24 1568  	   INVOICE.ID = var_gc_purchase_invoice_id;
14:28:24 1569  
14:28:24 1570  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V23.INVOICE_CLOSED THEN
14:28:24 1571  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
14:28:24 1572  	 END IF;
14:28:24 1573  
14:28:24 1574  	 -- Check that this invoice was successfully processed by billing
14:28:24 1575  	 SELECT
14:28:24 1576  	   COUNT(1) into var_succ_purch_attempts_num
14:28:24 1577  	 FROM
14:28:24 1578  	   TRANSACTION_ATTEMPT TA
14:28:24 1579  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
14:28:24 1580  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
14:28:24 1581  	 WHERE
14:28:24 1582  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
14:28:24 1583  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V23.TRANS_ATTEMPT_SUCCESS;
14:28:24 1584  
14:28:24 1585  	 IF var_succ_purch_attempts_num = 0 THEN
14:28:24 1586  	   SELECT
14:28:24 1587  	     COUNT(1) into var_succ_purch_attempts_num
14:28:24 1588  	   FROM
14:28:24 1589  	     DUAL
14:28:24 1590  	   WHERE
14:28:24 1591  	     PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
14:28:24 1592  	 END IF;
14:28:24 1593  
14:28:24 1594  	 IF var_succ_purch_attempts_num = 0 THEN
14:28:24 1595  	   RAISE PURCHASE_INVOICES_NOT_PAID;
14:28:24 1596  	 END IF;
14:28:24 1597  
14:28:24 1598  	 -- Check limit for gc's offer chain
14:28:24 1599  	 SELECT
14:28:24 1600  	   COUNT(*) into var_same_offer_chains_num
14:28:24 1601  	 FROM
14:28:24 1602  	   SUBSCRIPTION
14:28:24 1603  	 WHERE
14:28:24 1604  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:24 1605  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
14:28:24 1606  	   AND (
14:28:24 1607  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 1608  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
14:28:24 1609  IF var_same_offer_chains_num = 0 THEN
14:28:24 1610  	   -- if user does not have any active existing subscriptions to the offer chain
14:28:24 1611  	   -- and if product from the offer chain is already owned from another offer chain
14:28:24 1612  	   -- then deny purchase
14:28:24 1613  	   FOR f_account_offer_chains IN (
14:28:24 1614  	     SELECT DISTINCT
14:28:24 1615  	       OFFER_CHAIN_ID
14:28:24 1616  	     FROM
14:28:24 1617  	       SUBSCRIPTION
14:28:24 1618  	     WHERE
14:28:24 1619  	       ACCOUNT_ID = var_account_id
14:28:24 1620  	       AND (
14:28:24 1621  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 1622  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
14:28:24 1623  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
14:28:24 1624  	   )
14:28:24 1625  	   LOOP
14:28:24 1626  	     IF PROCS_OFFER_CHAIN_V23.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V23.TRUE THEN
14:28:24 1627  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
14:28:24 1628  	     END IF;
14:28:24 1629  	   END LOOP;
14:28:24 1630  	 ELSE
14:28:24 1631  
14:28:24 1632  	   -- if user have any active existing subscriptions to the offer chain
14:28:24 1633  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
14:28:24 1634  	   -- then deny purchase
14:28:24 1635  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
14:28:24 1636  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V23.INFINITY
14:28:24 1637  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
14:28:24 1638  	     RAISE LIMIT_REACHED;
14:28:24 1639  	   END IF;
14:28:24 1640  	 END IF;
14:28:24 1641  -- norlov: END OF TODO
14:28:24 1642  
14:28:24 1643  
14:28:24 1644  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
14:28:24 1645  	   RAISE GIFT_CERTIFICATE_REDEEMED;
14:28:24 1646  	 END IF;
14:28:24 1647  
14:28:24 1648  	 IF var_gc_expiration_date < sysdate THEN
14:28:24 1649  	   RAISE GIFT_CERTIFICATE_EXPIRED;
14:28:24 1650  	 END IF;
14:28:24 1651  
14:28:24 1652  	  IF var_gc_status_id = GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_REFUNDED THEN
14:28:24 1653  	   RAISE GIFT_CERT_IS_REFUNDED;
14:28:24 1654  	 END IF;
14:28:24 1655  
14:28:24 1656  	 IF var_gc_status_id = GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_FINALIZED THEN
14:28:24 1657  	   RAISE GIFT_CERT_IS_FINALIZED;
14:28:24 1658  	 END IF;
14:28:24 1659  
14:28:24 1660  	 -- Check that user did not subscribed to same product already
14:28:24 1661  	 -- norlov: get rid of this since there is already the check?
14:28:24 1662  	 FOR f_user_offer_chain IN (
14:28:24 1663  	   SELECT DISTINCT
14:28:24 1664  	     OFFER_CHAIN_ID
14:28:24 1665  	   FROM
14:28:24 1666  	     SUBSCRIPTION
14:28:24 1667  	   WHERE
14:28:24 1668  	     ACCOUNT_ID=var_account_id
14:28:24 1669  	     AND (
14:28:24 1670  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 1671  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
14:28:24 1672  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
14:28:24 1673  	 )
14:28:24 1674  	 LOOP
14:28:24 1675  	   IF PROCS_OFFER_CHAIN_V23.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V23.TRUE THEN
14:28:24 1676  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
14:28:24 1677  	   END IF;
14:28:24 1678  	 END LOOP;
14:28:24 1679  
14:28:24 1680  	 -- Check for gift certificate amount
14:28:24 1681  	 SELECT
14:28:24 1682  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
14:28:24 1683  	 FROM
14:28:24 1684  	   CHARGE
14:28:24 1685  	 WHERE
14:28:24 1686  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
14:28:24 1687  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V23.INSTRUMENT_GIFT_CERTIFICATE;
14:28:24 1688  
14:28:24 1689  	 -- Create new invoice
14:28:24 1690  	 PROCS_INVOICE_V23.CREATE_INVOICE(
14:28:24 1691  	   out_invoice_id    => var_invoice_id,
14:28:24 1692  	   in_invoice_status => GLOBAL_STATUSES_V23.INVOICE_CLOSED,
14:28:24 1693  	   in_tax_exempt_id  => var_account_tax_exempt_id,
14:28:24 1694  	   in_created_by     => in_created_by
14:28:24 1695  	 );
14:28:24 1696  
14:28:24 1697  	 -- If a financial instrument wasn't passed in, use the gift certificate id
14:28:24 1698  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
14:28:24 1699  	 IF var_fin_instrument_id is null THEN
14:28:24 1700  	   var_fin_instrument_id := var_gift_certificate_id;
14:28:24 1701  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V23.INSTRUMENT_GIFT_CERTIFICATE;
14:28:24 1702  	 END IF;
14:28:24 1703  
14:28:24 1704  	 -- Insert new row into subscription table
14:28:24 1705  	 PROCS_SUBSCRIPTION_CRU_V23.CREATE_SUBSCRIPTION(
14:28:24 1706  	   out_subscription_id	     => var_subscription_id,
14:28:24 1707  	   in_account_id	     => var_account_id,
14:28:24 1708  	   in_purchase_date	     => var_date,
14:28:24 1709  	   in_offer_chain_id	     => var_oc_id_to_redeem,
14:28:24 1710  	   in_created_by	     => in_created_by,
14:28:24 1711  	   in_instrument_type_id     => var_fin_instrument_type_id,
14:28:24 1712  	   in_instrument_id	     => var_fin_instrument_id,
14:28:24 1713  	   in_subscription_status_id => GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 1714  	 );
14:28:24 1715  
14:28:24 1716  	 out_subscription_id := var_subscription_id;
14:28:24 1717  
14:28:24 1718  	 BEGIN
14:28:24 1719  	   PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
14:28:24 1720  	   EXCEPTION
14:28:24 1721  	     WHEN OTHERS THEN
14:28:24 1722  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1723  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
14:28:24 1724  	 END;
14:28:24 1725  
14:28:24 1726  	 BEGIN
14:28:24 1727  	   PROCS_LICENSE_V23.CREATE_LICENSE (
14:28:24 1728  	     out_license_id		 => out_license_id,
14:28:24 1729  	     in_status_id		 => GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
14:28:24 1730  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V23.TRUE,
14:28:24 1731  	     in_start_date		 => var_date,
14:28:24 1732  	     in_offer_id		 => var_first_offer_id,
14:28:24 1733  	     in_subscription_id 	 => var_subscription_id,
14:28:24 1734  	     in_invoice_id		 => var_invoice_id,
14:28:24 1735  	     in_created_by		 => in_created_by,
14:28:24 1736  	     in_end_date		 => NULL, -- Will be calculated automatically
14:28:24 1737  	     in_is_extension		 => GLOBAL_CONSTANTS_V23.FALSE,
14:28:24 1738  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V23.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
14:28:24 1739  	     in_current_offer_recurr_num => 1
14:28:24 1740  	   );
14:28:24 1741  
14:28:24 1742  	   EXCEPTION
14:28:24 1743  	     WHEN OTHERS THEN
14:28:24 1744  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1745  	       RAISE CAN_NOT_CREATE_LICENSE;
14:28:24 1746  	 END;
14:28:24 1747  
14:28:24 1748  	 -- Update original gift certificate
14:28:24 1749  	 BEGIN
14:28:24 1750  	   PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_GIFT_CERTIFICATE(
14:28:24 1751  	     in_gift_certificate_id	   => var_gift_certificate_id,
14:28:24 1752  	     in_updated_by		   => in_created_by,
14:28:24 1753  	     in_redeemer_group_id	   => in_group_id,
14:28:24 1754  	     in_finalized_invoice_id	   => var_invoice_id,
14:28:24 1755  	     in_redemption_date 	   => var_date,
14:28:24 1756  	     in_redeemer_address_id	   => in_redeemer_address_id,
14:28:24 1757  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_FINALIZED
14:28:24 1758  	   );
14:28:24 1759  	   EXCEPTION
14:28:24 1760  	     WHEN OTHERS THEN
14:28:24 1761  	       EXCEPTION_MESSAGE := SQLERRM;
14:28:24 1762  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
14:28:24 1763  	 END;
14:28:24 1764  
14:28:24 1765  EXCEPTION
14:28:24 1766  WHEN LIMIT_REACHED THEN
14:28:24 1767  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.CONFLICT_ERROR,
14:28:24 1768  	   SPROC_NAME, 'Limit reached for given offer chain');
14:28:24 1769  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
14:28:24 1770  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.CONFLICT_ERROR,
14:28:24 1771  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
14:28:24 1772  WHEN GIFT_CERTIFICATE_REDEEMED THEN
14:28:24 1773  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1774  	   SPROC_NAME, 'Gift certificate already redeemed');
14:28:24 1775  WHEN GIFT_CERTIFICATE_EXPIRED THEN
14:28:24 1776  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 1777  	   SPROC_NAME, 'Gift certificate expired');
14:28:24 1778  WHEN GIFT_CERT_IS_FINALIZED THEN
14:28:24 1779  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1780  	   SPROC_NAME, 'Gift certificate is finalized');
14:28:24 1781  WHEN GIFT_CERT_IS_REFUNDED THEN
14:28:24 1782  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1783  	   SPROC_NAME, 'Gift certificate has been refunded');
14:28:24 1784  WHEN BAD_GROUP_ID THEN
14:28:24 1785  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1786  	   SPROC_NAME, 'No such account with given group id');
14:28:24 1787  WHEN OC_TO_REDEEM_NOT_FOUND THEN
14:28:24 1788  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1789  	   SPROC_NAME, 'Offer chain to redeem not found');
14:28:24 1790  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
14:28:24 1791  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1792  	   SPROC_NAME, 'No such gift certificate code');
14:28:24 1793  WHEN CAN_NOT_CREATE_LICENSE THEN
14:28:24 1794  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1795  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
14:28:24 1796  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
14:28:24 1797  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 1798  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
14:28:24 1799  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
14:28:24 1800  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1801  	   SPROC_NAME, 'Purchase invoice is not closed');
14:28:24 1802  WHEN PURCHASE_INVOICES_NOT_PAID THEN
14:28:24 1803  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 1804  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
14:28:24 1805  WHEN OTHERS THEN
14:28:24 1806  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1807  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1808  END;
14:28:24 1809  
14:28:24 1810  /******************************************************************************/
14:28:24 1811  
14:28:24 1812  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
14:28:24 1813  /*
14:28:24 1814  Throws exceptions:
14:28:24 1815  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1816  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 1817  */
14:28:24 1818  	 in_code	IN VARCHAR,
14:28:24 1819  	 out_result_set OUT SYS_REFCURSOR
14:28:24 1820  ) AS
14:28:24 1821  -- VARIABLES
14:28:24 1822  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
14:28:24 1823  temp_gift_certificate_id NUMBER;
14:28:24 1824  -- EXCEPTIONS
14:28:24 1825  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
14:28:24 1826  BEGIN
14:28:24 1827  
14:28:24 1828  	 BEGIN
14:28:24 1829  	   SELECT
14:28:24 1830  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
14:28:24 1831  	   FROM
14:28:24 1832  	     GIFT_CERTIFICATE
14:28:24 1833  	   WHERE
14:28:24 1834  	     GIFT_CERTIFICATE.CODE = in_code;
14:28:24 1835  	   EXCEPTION
14:28:24 1836  	     WHEN NO_DATA_FOUND THEN
14:28:24 1837  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
14:28:24 1838  	 END;
14:28:24 1839  
14:28:24 1840  	 -- Select all gift certificates with given code
14:28:24 1841  	 OPEN out_result_set FOR
14:28:24 1842  	 SELECT
14:28:24 1843  	   gc.EXPIRATION_DATE,
14:28:24 1844  	   ch.name,
14:28:24 1845  	   ch.id,
14:28:24 1846  	   gc.sender_email,
14:28:24 1847  	   gc.sender_name,
14:28:24 1848  	   gc.recipient_email,
14:28:24 1849  	   gc.recipient_name,
14:28:24 1850  	   gc.purchase_date,
14:28:24 1851  	   gc.redemption_date,
14:28:24 1852  	   gc.purchaser_group_id,
14:28:24 1853  	   gc.redeemer_group_id,
14:28:24 1854  	   gc.gift_message,
14:28:24 1855  	   ocmd.value redemption_offer_chain_ids,
14:28:24 1856  	   s.offer_chain_id redeemed_offer_chain_id,
14:28:24 1857  	   gc.recipient_notify_date,
14:28:24 1858  	   gc.gift_certificate_status_id,
14:28:24 1859  	   gc.purchase_invoice_id,
14:28:24 1860  	   gc.finalized_invoice_id,
14:28:24 1861  	   gccr.reference_code
14:28:24 1862  	 FROM
14:28:24 1863  	   GIFT_CERTIFICATE gc
14:28:24 1864  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
14:28:24 1865  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
14:28:24 1866  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
14:28:24 1867  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
14:28:24 1868  	 LEFT JOIN GC_CAMPAIGN_AND_REF gccr ON gc.id = gccr.GC_ID
14:28:24 1869  	 WHERE
14:28:24 1870  	   gc.code = in_code;
14:28:24 1871  
14:28:24 1872  EXCEPTION
14:28:24 1873  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
14:28:24 1874  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1875  	   SPROC_NAME, 'No such gift certificate');
14:28:24 1876  
14:28:24 1877  WHEN OTHERS THEN
14:28:24 1878  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1879  	   SPROC_NAME, 'Unknown Error', SQLERRM);
14:28:24 1880  END;
14:28:24 1881  
14:28:24 1882  /******************************************************************************/
14:28:24 1883  
14:28:24 1884  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
14:28:24 1885  /*
14:28:24 1886  Throws exceptions:
14:28:24 1887  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1888  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:24 1889  */
14:28:24 1890  	 in_gift_certificate_id IN NUMBER,
14:28:24 1891  	 out_result_set 	OUT SYS_REFCURSOR
14:28:24 1892  ) AS
14:28:24 1893  -- VARIABLES
14:28:24 1894  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
14:28:24 1895  temp_gift_certificate_id NUMBER;
14:28:24 1896  -- EXCEPTIONS
14:28:24 1897  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
14:28:24 1898  BEGIN
14:28:24 1899  
14:28:24 1900  	 BEGIN
14:28:24 1901  	   SELECT
14:28:24 1902  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
14:28:24 1903  	   FROM
14:28:24 1904  	     GIFT_CERTIFICATE
14:28:24 1905  	   WHERE
14:28:24 1906  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
14:28:24 1907  	   EXCEPTION
14:28:24 1908  	     WHEN NO_DATA_FOUND THEN
14:28:24 1909  	       RAISE BAD_GIFT_CERTIFICATE_ID;
14:28:24 1910  	 END;
14:28:24 1911  
14:28:24 1912  	 -- Select all gift certificates with given code
14:28:24 1913  	 OPEN out_result_set FOR
14:28:24 1914  	 SELECT
14:28:24 1915  	   gc.EXPIRATION_DATE,
14:28:24 1916  	   ch.name,
14:28:24 1917  	   ch.id,
14:28:24 1918  	   gc.sender_email,
14:28:24 1919  	   gc.sender_name,
14:28:24 1920  	   gc.recipient_email,
14:28:24 1921  	   gc.recipient_name,
14:28:24 1922  	   gc.purchase_date,
14:28:24 1923  	   gc.redemption_date,
14:28:24 1924  	   gc.purchaser_group_id,
14:28:24 1925  	   gc.redeemer_group_id,
14:28:24 1926  	   gc.code,
14:28:24 1927  	   gc.gift_message,
14:28:24 1928  	   gc.recipient_notify_date
14:28:24 1929  	 FROM
14:28:24 1930  	   GIFT_CERTIFICATE gc
14:28:24 1931  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
14:28:24 1932  	 WHERE
14:28:24 1933  	   gc.id = in_gift_certificate_id;
14:28:24 1934  
14:28:24 1935  EXCEPTION
14:28:24 1936  WHEN BAD_GIFT_CERTIFICATE_ID THEN
14:28:24 1937  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1938  	   SPROC_NAME, 'No such gift certificate');
14:28:24 1939  WHEN OTHERS THEN
14:28:24 1940  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1941  	   SPROC_NAME, 'Unknown Error', SQLERRM);
14:28:24 1942  END GET_GIFT_CERTIFICATE_BY_ID;
14:28:24 1943  
14:28:24 1944  /******************************************************************************/
14:28:24 1945  
14:28:24 1946  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
14:28:24 1947  	 in_group_id		IN  NUMBER,
14:28:24 1948  	 out_instrument_type_id OUT NUMBER,
14:28:24 1949  	 out_instrument_id	OUT NUMBER
14:28:24 1950  ) AS
14:28:24 1951  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
14:28:24 1952  BEGIN
14:28:24 1953  
14:28:24 1954  	 SELECT
14:28:24 1955  	   ACCOUNT.INSTRUMENT_TYPE_ID,
14:28:24 1956  	   ACCOUNT.INSTRUMENT_ID
14:28:24 1957  	   into
14:28:24 1958  	   out_instrument_type_id,
14:28:24 1959  	   out_instrument_id
14:28:24 1960  	 FROM
14:28:24 1961  	   ACCOUNT
14:28:24 1962  	 WHERE
14:28:24 1963  	   ACCOUNT.GROUP_ID = in_group_id;
14:28:24 1964  
14:28:24 1965  EXCEPTION
14:28:24 1966  WHEN NO_DATA_FOUND THEN
14:28:24 1967  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1968  	   SPROC_NAME, 'Bad group id');
14:28:24 1969  WHEN OTHERS THEN
14:28:24 1970  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1971  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1972  END GET_DEF_FINANCIAL_INSTRUMENT;
14:28:24 1973  
14:28:24 1974  /******************************************************************************/
14:28:24 1975  
14:28:24 1976  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
14:28:24 1977  	 in_group_id	       IN NUMBER,
14:28:24 1978  	 in_instrument_type_id IN NUMBER,
14:28:24 1979  	 in_instrument_id      IN NUMBER,
14:28:24 1980  	 in_updated_by	       IN VARCHAR2
14:28:24 1981  ) AS
14:28:24 1982  -- VARIABLES
14:28:24 1983  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
14:28:24 1984  var_account_id	      NUMBER;
14:28:24 1985  -- EXCEPTIONS
14:28:24 1986  BAD_GROUP_ID	      EXCEPTION;
14:28:24 1987  BAD_CREDIT_CARD	      EXCEPTION;
14:28:24 1988  BAD_PAYPAL	      EXCEPTION;
14:28:24 1989  BAD_INSTRUMENT_TYPE    EXCEPTION;
14:28:24 1990  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 1991  BEGIN
14:28:24 1992  
14:28:24 1993  	 -- get account id
14:28:24 1994  	 BEGIN
14:28:24 1995  	   SELECT
14:28:24 1996  	     ACCOUNT.ID into var_account_id
14:28:24 1997  	   FROM
14:28:24 1998  	     ACCOUNT
14:28:24 1999  	   WHERE
14:28:24 2000  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:24 2001  	   EXCEPTION
14:28:24 2002  	     WHEN NO_DATA_FOUND THEN
14:28:24 2003  	       RAISE BAD_GROUP_ID;
14:28:24 2004  	 END;
14:28:24 2005  
14:28:24 2006  	 -- Chech that given instrument exists
14:28:24 2007  	 IF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
14:28:24 2008  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 2009  	     RAISE BAD_CREDIT_CARD;
14:28:24 2010  	   END IF;
14:28:24 2011  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
14:28:24 2012  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 2013  	     RAISE BAD_PAYPAL;
14:28:24 2014  	   END IF;
14:28:24 2015  	 ELSE
14:28:24 2016  	   RAISE BAD_INSTRUMENT_TYPE;
14:28:24 2017  	 END IF;
14:28:24 2018  
14:28:24 2019  	 -- update account information
14:28:24 2020  	 PROCS_ACCOUNT_CRU_V23.UPDATE_ACCOUNT(
14:28:24 2021  	   in_account_id	 => var_account_id,
14:28:24 2022  	   in_updated_by	 => in_updated_by,
14:28:24 2023  	   in_instrument_type_id => in_instrument_type_id,
14:28:24 2024  	   in_instrument_id	 => in_instrument_id
14:28:24 2025  	 );
14:28:24 2026  
14:28:24 2027  EXCEPTION
14:28:24 2028  WHEN BAD_GROUP_ID THEN
14:28:24 2029  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2030  	   SPROC_NAME, 'No such account');
14:28:24 2031  WHEN BAD_CREDIT_CARD THEN
14:28:24 2032  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2033  	   SPROC_NAME, 'Could not find credit card with given ID');
14:28:24 2034  WHEN BAD_PAYPAL THEN
14:28:24 2035  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2036  	   SPROC_NAME, 'Could not find paypal with given ID');
14:28:24 2037  WHEN BAD_INSTRUMENT_TYPE THEN
14:28:24 2038  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2039  	   SPROC_NAME, 'Bad instrument type id');
14:28:24 2040  WHEN OTHERS THEN
14:28:24 2041  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2042  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2043  END SET_DEF_FINANCIAL_INSTRUMENT;
14:28:24 2044  
14:28:24 2045  /******************************************************************************/
14:28:24 2046  
14:28:24 2047  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
14:28:24 2048  	 in_group_id IN NUMBER
14:28:24 2049  ) AS
14:28:24 2050  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
14:28:24 2051  -- VARIABLES
14:28:24 2052  var_account_id NUMBER;
14:28:24 2053  -- EXCEPTIONS
14:28:24 2054  BAD_GROUP_ID	 EXCEPTION;
14:28:24 2055  EXCEPTION_MESSAGE VARCHAR2(1024);
14:28:24 2056  BEGIN
14:28:24 2057  
14:28:24 2058  	 BEGIN
14:28:24 2059  	   SELECT
14:28:24 2060  	     ACCOUNT.ID into var_account_id
14:28:24 2061  	   FROM
14:28:24 2062  	     ACCOUNT
14:28:24 2063  	   WHERE
14:28:24 2064  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:24 2065  	   EXCEPTION
14:28:24 2066  	     WHEN NO_DATA_FOUND THEN
14:28:24 2067  	       RAISE BAD_GROUP_ID;
14:28:24 2068  	 END;
14:28:24 2069  
14:28:24 2070  	 PROCS_ACCOUNT_CRU_V23.UPDATE_DEF_FIN_INSTRUMENT(
14:28:24 2071  	   in_account_id => var_account_id,
14:28:24 2072  	   in_instrument_type_id => NULL,
14:28:24 2073  	   in_instrument_id => NULL,
14:28:24 2074  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
14:28:24 2075  	 );
14:28:24 2076  
14:28:24 2077  EXCEPTION
14:28:24 2078  WHEN BAD_GROUP_ID THEN
14:28:24 2079  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2080  	   SPROC_NAME, 'No such group id');
14:28:24 2081  WHEN OTHERS THEN
14:28:24 2082  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2083  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2084  END DEL_DEF_FINANCIAL_INSTRUMENT;
14:28:24 2085  
14:28:24 2086  /******************************************************************************/
14:28:24 2087  
14:28:24 2088  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:28:24 2089  	 in_credit_card_id IN  NUMBER,
14:28:24 2090  	 out_result_set    OUT SYS_REFCURSOR
14:28:24 2091  ) AS
14:28:24 2092  SPROC_NAME    CONSTANT VARCHAR2(32) := 'GET_CREDIT_CARD_BY_ID';
14:28:24 2093  BEGIN
14:28:24 2094  	 OPEN out_result_set FOR
14:28:24 2095  	 SELECT
14:28:24 2096  	   ID,
14:28:24 2097  	   ACCOUNT_ID,
14:28:24 2098  	   INSTRUMENT_NAME,
14:28:24 2099  	   PRIVATE_CARD_HOLDER_NAME,
14:28:24 2100  	   PRIVATE_STREET_ADDRESS,
14:28:24 2101  	   PRIVATE_STREET_ADDRESS2,
14:28:24 2102  	   STATE,
14:28:24 2103  	   CITY,
14:28:24 2104  	   POSTAL_CODE,
14:28:24 2105  	   COUNTRY,
14:28:24 2106  	   LAST_FOUR_CC,
14:28:24 2107  	   EXPIRATION_DATE,
14:28:24 2108  	   CREDIT_CARD_TYPE_ID,
14:28:24 2109  	   SECRET_TOKEN,
14:28:24 2110  	   CREATE_DATE,
14:28:24 2111  	   CREATED_BY,
14:28:24 2112  	   UPDATE_DATE,
14:28:24 2113  	   UPDATED_BY,
14:28:24 2114  	   CREDIT_CARD_STATUS_ID,
14:28:24 2115  	   PRIVATE_FIRST_NAME,
14:28:24 2116  	   PRIVATE_LAST_NAME,
14:28:24 2117  	   CHASE_PROFILE_ID
14:28:24 2118  	 FROM
14:28:24 2119  	   CREDIT_CARD
14:28:24 2120  	 WHERE
14:28:24 2121  	   ID = in_credit_card_id;
14:28:24 2122  END GET_CREDIT_CARD_BY_ID;
14:28:24 2123  
14:28:24 2124  /******************************************************************************/
14:28:24 2125  
14:28:24 2126  PROCEDURE GET_PAYPAL_BY_ID (
14:28:24 2127  	 in_paypal_id	IN  NUMBER,
14:28:24 2128  	 out_result_set OUT SYS_REFCURSOR
14:28:24 2129  ) AS
14:28:24 2130  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PAYPAL_BY_ID';
14:28:24 2131  BEGIN
14:28:24 2132  	 OPEN out_result_set FOR
14:28:24 2133  	 SELECT
14:28:24 2134  	   ID,
14:28:24 2135  	   ACCOUNT_ID,
14:28:24 2136  	   INSTRUMENT_NAME,
14:28:24 2137  	   PRIVATE_EMAIL_ADDRESS,
14:28:24 2138  	   CREATE_DATE,
14:28:24 2139  	   CREATED_BY,
14:28:24 2140  	   UPDATE_DATE,
14:28:24 2141  	   UPDATED_BY,
14:28:24 2142  	   PAYPAL_STATUS_ID,
14:28:24 2143  	   PRIVATE_STREET_ADDRESS,
14:28:24 2144  	   PRIVATE_STREET_ADDRESS2,
14:28:24 2145  	   STATE,
14:28:24 2146  	   CITY,
14:28:24 2147  	   POSTAL_CODE,
14:28:24 2148  	   COUNTRY,
14:28:24 2149  	   EXPIRATION_DATE,
14:28:24 2150  	   SECRET_TOKEN
14:28:24 2151  	 FROM
14:28:24 2152  	   PAYPAL
14:28:24 2153  	 WHERE
14:28:24 2154  	   ID = in_paypal_id;
14:28:24 2155  END GET_PAYPAL_BY_ID;
14:28:24 2156  
14:28:24 2157  /******************************************************************************/
14:28:24 2158  
14:28:24 2159  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
14:28:24 2160  	 in_credit_card_id NUMBER
14:28:24 2161  ) RETURN NUMBER AS
14:28:24 2162  BEGIN
14:28:24 2163  	 -- STUB
14:28:24 2164  	 RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2165  END F_CAN_DISABLE_CREDIT_CARD;
14:28:24 2166  
14:28:24 2167  /******************************************************************************/
14:28:24 2168  
14:28:24 2169  PROCEDURE GET_PURCHASED_GCERTIFICATES (
14:28:24 2170  	 in_group_id	IN NUMBER,
14:28:24 2171  	 out_result_set OUT SYS_REFCURSOR
14:28:24 2172  ) AS
14:28:24 2173  -- VARIABLES
14:28:24 2174  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
14:28:24 2175  var_account_id NUMBER;
14:28:24 2176  -- EXCEPTIONS
14:28:24 2177  BAD_GROUP_ID EXCEPTION;
14:28:24 2178  BEGIN
14:28:24 2179  
14:28:24 2180  	 BEGIN
14:28:24 2181  	   SELECT
14:28:24 2182  	     ACCOUNT.ID into var_account_id
14:28:24 2183  	   FROM
14:28:24 2184  	     ACCOUNT
14:28:24 2185  	   WHERE
14:28:24 2186  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:24 2187  	   EXCEPTION
14:28:24 2188  	     WHEN NO_DATA_FOUND THEN
14:28:24 2189  	       RAISE BAD_GROUP_ID;
14:28:24 2190  	 END;
14:28:24 2191  
14:28:24 2192  	 OPEN out_result_set FOR
14:28:24 2193  	 SELECT
14:28:24 2194  	   GIFT_CERTIFICATE.CODE,
14:28:24 2195  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
14:28:24 2196  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
14:28:24 2197  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
14:28:24 2198  	   GIFT_CERTIFICATE.SENDER_EMAIL,
14:28:24 2199  	   GIFT_CERTIFICATE.SENDER_NAME,
14:28:24 2200  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
14:28:24 2201  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
14:28:24 2202  	   GIFT_CERTIFICATE.PURCHASE_DATE,
14:28:24 2203  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
14:28:24 2204  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
14:28:24 2205  	 FROM
14:28:24 2206  	   GIFT_CERTIFICATE
14:28:24 2207  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 2208  	 WHERE
14:28:24 2209  	   ROWNUM <= 100 AND
14:28:24 2210  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
14:28:24 2211  
14:28:24 2212  EXCEPTION
14:28:24 2213  WHEN BAD_GROUP_ID THEN
14:28:24 2214  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2215  	   SPROC_NAME, 'No such group id');
14:28:24 2216  WHEN OTHERS THEN
14:28:24 2217  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2218  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2219  END GET_PURCHASED_GCERTIFICATES;
14:28:24 2220  
14:28:24 2221  /******************************************************************************/
14:28:24 2222  
14:28:24 2223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
14:28:24 2224  	 in_gift_certificate_id IN NUMBER,
14:28:24 2225  	 in_charge_id		IN NUMBER,
14:28:24 2226  	 out_result		OUT NUMBER
14:28:24 2227  ) AS
14:28:24 2228  -- VARIABLES
14:28:24 2229  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
14:28:24 2230  var_invoice_id	    NUMBER;
14:28:24 2231  var_offer_chain_id   NUMBER;
14:28:24 2232  var_offer_chain_s_id NUMBER;
14:28:24 2233  -- EXCEPTIONS
14:28:24 2234  BAD_CHARGE_ID		 EXCEPTION;
14:28:24 2235  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
14:28:24 2236  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
14:28:24 2237  BEGIN
14:28:24 2238  
14:28:24 2239  	 BEGIN
14:28:24 2240  	   SELECT
14:28:24 2241  	     CHARGE.INVOICE_ID into var_invoice_id
14:28:24 2242  	   FROM
14:28:24 2243  	     CHARGE
14:28:24 2244  	   WHERE
14:28:24 2245  	     CHARGE.ID = in_charge_id;
14:28:24 2246  	   EXCEPTION
14:28:24 2247  	     WHEN NO_DATA_FOUND THEN
14:28:24 2248  	       RAISE BAD_CHARGE_ID;
14:28:24 2249  	 END;
14:28:24 2250  
14:28:24 2251  	 BEGIN
14:28:24 2252  	   SELECT
14:28:24 2253  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
14:28:24 2254  	   FROM
14:28:24 2255  	     GIFT_CERTIFICATE
14:28:24 2256  	   WHERE
14:28:24 2257  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
14:28:24 2258  	   EXCEPTION
14:28:24 2259  	     WHEN NO_DATA_FOUND THEN
14:28:24 2260  	       RAISE BAD_GIFT_CERTIFICATE_ID;
14:28:24 2261  	 END;
14:28:24 2262  
14:28:24 2263  	 BEGIN
14:28:24 2264  	   SELECT
14:28:24 2265  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
14:28:24 2266  	   FROM
14:28:24 2267  	     SUBSCRIPTION
14:28:24 2268  	   WHERE
14:28:24 2269  	     SUBSCRIPTION.ID IN (
14:28:24 2270  	       SELECT DISTINCT
14:28:24 2271  		 LICENSE.SUBSCRIPTION_ID
14:28:24 2272  	       FROM
14:28:24 2273  		 LICENSE
14:28:24 2274  	       WHERE
14:28:24 2275  		 LICENSE.INVOICE_ID = var_invoice_id
14:28:24 2276  	     );
14:28:24 2277  	   EXCEPTION
14:28:24 2278  	     WHEN NO_DATA_FOUND THEN
14:28:24 2279  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
14:28:24 2280  	 END;
14:28:24 2281  
14:28:24 2282  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
14:28:24 2283  	   out_result := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2284  	 ELSE
14:28:24 2285  	   out_result := GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 2286  	 END IF;
14:28:24 2287  
14:28:24 2288  EXCEPTION
14:28:24 2289  WHEN BAD_CHARGE_ID THEN
14:28:24 2290  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2291  	   SPROC_NAME, 'No such charge');
14:28:24 2292  WHEN BAD_GIFT_CERTIFICATE_ID THEN
14:28:24 2293  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2294  	   SPROC_NAME, 'No such gift certificate');
14:28:24 2295  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
14:28:24 2296  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2297  	   SPROC_NAME, 'Could not find subscription for given charge');
14:28:24 2298  WHEN OTHERS THEN
14:28:24 2299  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2300  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2301  END IS_GCERT_FOR_PROPER_OFFER;
14:28:24 2302  
14:28:24 2303  /******************************************************************************/
14:28:24 2304  
14:28:24 2305  FUNCTION IS_CREDIT_CARD_EXISTS (
14:28:24 2306  /*
14:28:24 2307  GLOBAL_CONSTANTS_V23.TRUE - if instrument exists
14:28:24 2308  GLOBAL_CONSTANTS_V23.FALSE - else
14:28:24 2309  */
14:28:24 2310  	 in_credit_card_id IN NUMBER
14:28:24 2311  ) RETURN NUMBER AS
14:28:24 2312  -- VARIABLES
14:28:24 2313  var_cc_count NUMBER;
14:28:24 2314  BEGIN
14:28:24 2315  	 SELECT
14:28:24 2316  	   COUNT(*) into var_cc_count
14:28:24 2317  	 FROM
14:28:24 2318  	   CREDIT_CARD
14:28:24 2319  	 WHERE
14:28:24 2320  	   CREDIT_CARD.ID = in_credit_card_id;
14:28:24 2321  
14:28:24 2322  	 IF var_cc_count = 0 THEN
14:28:24 2323  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 2324  	 ELSE
14:28:24 2325  	   RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2326  	 END IF;
14:28:24 2327  
14:28:24 2328  END IS_CREDIT_CARD_EXISTS;
14:28:24 2329  
14:28:24 2330  /******************************************************************************/
14:28:24 2331  
14:28:24 2332  FUNCTION IS_PAYPAL_EXISTS (
14:28:24 2333  /*
14:28:24 2334  GLOBAL_CONSTANTS_V23.TRUE - if instrument exists
14:28:24 2335  GLOBAL_CONSTANTS_V23.FALSE - else
14:28:24 2336  */
14:28:24 2337  	 in_paypal_id IN NUMBER
14:28:24 2338  ) RETURN NUMBER AS
14:28:24 2339  -- VARIABLES
14:28:24 2340  var_pp_count NUMBER;
14:28:24 2341  BEGIN
14:28:24 2342  	 SELECT
14:28:24 2343  	   COUNT(*) into var_pp_count
14:28:24 2344  	 FROM
14:28:24 2345  	   PAYPAL
14:28:24 2346  	 WHERE
14:28:24 2347  	   PAYPAL.ID = in_paypal_id;
14:28:24 2348  
14:28:24 2349  	 IF var_pp_count = 0 THEN
14:28:24 2350  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 2351  	 ELSE
14:28:24 2352  	   RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2353  	 END IF;
14:28:24 2354  
14:28:24 2355  END IS_PAYPAL_EXISTS;
14:28:24 2356  
14:28:24 2357  /******************************************************************************/
14:28:24 2358  
14:28:24 2359  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
14:28:24 2360  /*
14:28:24 2361  GLOBAL_CONSTANTS_V23.TRUE - if instrument exists
14:28:24 2362  GLOBAL_CONSTANTS_V23.FALSE - else
14:28:24 2363  */
14:28:24 2364  	 in_gift_certificate_id IN NUMBER
14:28:24 2365  ) RETURN NUMBER AS
14:28:24 2366  -- VARIABLES
14:28:24 2367  var_gc_count NUMBER;
14:28:24 2368  BEGIN
14:28:24 2369  	 SELECT
14:28:24 2370  	   COUNT(*) into var_gc_count
14:28:24 2371  	 FROM
14:28:24 2372  	   GIFT_CERTIFICATE
14:28:24 2373  	 WHERE
14:28:24 2374  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
14:28:24 2375  
14:28:24 2376  	 IF var_gc_count = 0 THEN
14:28:24 2377  	   RETURN GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 2378  	 ELSE
14:28:24 2379  	   RETURN GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 2380  	 END IF;
14:28:24 2381  
14:28:24 2382  END IS_GIFT_CERTIFICATE_EXISTS;
14:28:24 2383  
14:28:24 2384  /******************************************************************************/
14:28:24 2385  
14:28:24 2386  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
14:28:24 2387  	 in_credit_card_id IN NUMBER,
14:28:24 2388  	 out_group_id	   OUT NUMBER
14:28:24 2389  ) AS
14:28:24 2390  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
14:28:24 2391  BEGIN
14:28:24 2392  	 SELECT
14:28:24 2393  	   ACCOUNT.GROUP_ID into out_group_id
14:28:24 2394  	 FROM
14:28:24 2395  	   CREDIT_CARD
14:28:24 2396  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
14:28:24 2397  	 WHERE
14:28:24 2398  	   CREDIT_CARD.ID = in_credit_card_id;
14:28:24 2399  EXCEPTION
14:28:24 2400  WHEN NO_DATA_FOUND THEN
14:28:24 2401  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2402  	   SPROC_NAME, 'No such credit card');
14:28:24 2403  WHEN OTHERS THEN
14:28:24 2404  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2405  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2406  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
14:28:24 2407  
14:28:24 2408  /******************************************************************************/
14:28:24 2409  
14:28:24 2410  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
14:28:24 2411  	 in_paypal_id IN NUMBER,
14:28:24 2412  	 out_group_id OUT NUMBER
14:28:24 2413  ) AS
14:28:24 2414  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
14:28:24 2415  BEGIN
14:28:24 2416  	 SELECT
14:28:24 2417  	   ACCOUNT.GROUP_ID into out_group_id
14:28:24 2418  	 FROM
14:28:24 2419  	   PAYPAL
14:28:24 2420  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
14:28:24 2421  	 WHERE
14:28:24 2422  	   PAYPAL.ID = in_paypal_id;
14:28:24 2423  EXCEPTION
14:28:24 2424  WHEN NO_DATA_FOUND THEN
14:28:24 2425  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2426  	   SPROC_NAME, 'No such paypal');
14:28:24 2427  WHEN OTHERS THEN
14:28:24 2428  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2429  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2430  END GET_GROUP_ID_BY_PAYPAL_ID;
14:28:24 2431  
14:28:24 2432  /******************************************************************************/
14:28:24 2433  
14:28:24 2434  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
14:28:24 2435  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
14:28:24 2436  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
14:28:24 2437  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
14:28:24 2438  ) AS
14:28:24 2439  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
14:28:24 2440  -- EXCEPTIONS
14:28:24 2441  BAD_CREDIT_CARD_ID     EXCEPTION;
14:28:24 2442  BAD_STATUS_ID	      EXCEPTION;
14:28:24 2443  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 2444  BEGIN
14:28:24 2445  
14:28:24 2446  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V23.CREDIT_CARD_ACTIVE
14:28:24 2447  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V23.CREDIT_CARD_INVALID
14:28:24 2448  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V23.CREDIT_CARD_DISABLED
14:28:24 2449  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V23.CREDIT_CARD_EXPIRED THEN
14:28:24 2450  	   RAISE BAD_STATUS_ID;
14:28:24 2451  	 END IF;
14:28:24 2452  
14:28:24 2453  	 PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_CREDIT_CARD(
14:28:24 2454  	   in_credit_card_id	    => in_credit_card_id,
14:28:24 2455  	   in_updated_by	    => in_updated_by,
14:28:24 2456  	   in_credit_card_status_id => in_credit_card_status_id
14:28:24 2457  	 );
14:28:24 2458  
14:28:24 2459  	 IF SQL%ROWCOUNT = 0 THEN
14:28:24 2460  	   RAISE BAD_CREDIT_CARD_ID;
14:28:24 2461  	 END IF;
14:28:24 2462  
14:28:24 2463  EXCEPTION
14:28:24 2464  WHEN BAD_CREDIT_CARD_ID THEN
14:28:24 2465  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2466  	   SPROC_NAME, 'No such credit card');
14:28:24 2467  WHEN BAD_STATUS_ID THEN
14:28:24 2468  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2469  	   SPROC_NAME, 'Bad credit card status id');
14:28:24 2470  WHEN OTHERS THEN
14:28:24 2471  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2472  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2473  END UPDATE_CREDIT_CARD_STATUS;
14:28:24 2474  
14:28:24 2475  /******************************************************************************/
14:28:24 2476  
14:28:24 2477  PROCEDURE UPDATE_PAYPAL_STATUS (
14:28:24 2478  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
14:28:24 2479  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
14:28:24 2480  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
14:28:24 2481  ) AS
14:28:24 2482  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
14:28:24 2483  -- EXCEPTIONS
14:28:24 2484  BAD_PAYPAL_ID	      EXCEPTION;
14:28:24 2485  BAD_STATUS_ID	      EXCEPTION;
14:28:24 2486  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 2487  BEGIN
14:28:24 2488  
14:28:24 2489  	 IF in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_ACTIVE
14:28:24 2490  	   AND in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_INACTIVE
14:28:24 2491  	   AND in_paypal_status_id != GLOBAL_STATUSES_V23.PAYPAL_FROZEN THEN
14:28:24 2492  	   RAISE BAD_STATUS_ID;
14:28:24 2493  	 END IF;
14:28:24 2494  
14:28:24 2495  	 PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_PAYPAL(
14:28:24 2496  	   in_paypal_id        => in_paypal_id,
14:28:24 2497  	   in_paypal_status_id => in_paypal_status_id,
14:28:24 2498  	   in_updated_by       => in_updated_by
14:28:24 2499  	 );
14:28:24 2500  
14:28:24 2501  	 IF SQL%ROWCOUNT = 0 THEN
14:28:24 2502  	   RAISE BAD_PAYPAL_ID;
14:28:24 2503  	 END IF;
14:28:24 2504  
14:28:24 2505  EXCEPTION
14:28:24 2506  WHEN BAD_PAYPAL_ID THEN
14:28:24 2507  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2508  	   SPROC_NAME, 'No such paypal');
14:28:24 2509  WHEN BAD_STATUS_ID THEN
14:28:24 2510  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2511  	   SPROC_NAME, 'Bad paypal status id');
14:28:24 2512  WHEN OTHERS THEN
14:28:24 2513  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2514  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2515  END UPDATE_PAYPAL_STATUS;
14:28:24 2516  
14:28:24 2517  /******************************************************************************/
14:28:24 2518  
14:28:24 2519  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
14:28:24 2520  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
14:28:24 2521  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
14:28:24 2522  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
14:28:24 2523  ) AS
14:28:24 2524  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
14:28:24 2525  -- EXCEPTIONS
14:28:24 2526  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
14:28:24 2527  BAD_STATUS_ID	       EXCEPTION;
14:28:24 2528  EXCEPTION_MESSAGE       VARCHAR2(1024);
14:28:24 2529  BEGIN
14:28:24 2530  
14:28:24 2531  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE
14:28:24 2532  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_FINALIZED THEN
14:28:24 2533  	   RAISE BAD_STATUS_ID;
14:28:24 2534  	 END IF;
14:28:24 2535  
14:28:24 2536  	 PROCS_FIN_INSTRUMENTS_CRU_V23.UPDATE_GIFT_CERTIFICATE(
14:28:24 2537  	   in_gift_certificate_id	 => in_gift_certificate_id,
14:28:24 2538  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
14:28:24 2539  	   in_updated_by		 => in_updated_by
14:28:24 2540  	 );
14:28:24 2541  
14:28:24 2542  	 IF SQL%ROWCOUNT = 0 THEN
14:28:24 2543  	   RAISE BAD_GIFT_CERTIFICATE_ID;
14:28:24 2544  	 END IF;
14:28:24 2545  
14:28:24 2546  EXCEPTION
14:28:24 2547  WHEN BAD_GIFT_CERTIFICATE_ID THEN
14:28:24 2548  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2549  	   SPROC_NAME, 'No such gift certificate');
14:28:24 2550  WHEN BAD_STATUS_ID THEN
14:28:24 2551  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2552  	   SPROC_NAME, 'Bad paypal status id');
14:28:24 2553  WHEN OTHERS THEN
14:28:24 2554  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2555  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2556  END UPDATE_GIFT_CERTIFICATE_STATUS;
14:28:24 2557  
14:28:24 2558  /******************************************************************************/
14:28:24 2559  
14:28:24 2560  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:28:24 2561  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:24 2562  	 out_result_set OUT SYS_REFCURSOR
14:28:24 2563  ) AS
14:28:24 2564  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
14:28:24 2565  -- VARIABLES
14:28:24 2566  temp_invoice_id NUMBER;
14:28:24 2567  -- EXCEPTIONS
14:28:24 2568  BAD_INVOICE_ID EXCEPTION;
14:28:24 2569  BEGIN
14:28:24 2570  
14:28:24 2571  	 BEGIN
14:28:24 2572  	   SELECT
14:28:24 2573  	     I.ID into temp_invoice_id
14:28:24 2574  	   FROM
14:28:24 2575  	     INVOICE I
14:28:24 2576  	   WHERE
14:28:24 2577  	     I.ID = in_invoice_id;
14:28:24 2578  	   EXCEPTION
14:28:24 2579  	     WHEN NO_DATA_FOUND THEN
14:28:24 2580  	       RAISE BAD_INVOICE_ID;
14:28:24 2581  	 END;
14:28:24 2582  
14:28:24 2583  	 OPEN out_result_set FOR
14:28:24 2584  	   SELECT
14:28:24 2585  	     gc.EXPIRATION_DATE,
14:28:24 2586  	     ch.name,
14:28:24 2587  	     ch.id offer_chain_id,
14:28:24 2588  	     gc.sender_email,
14:28:24 2589  	     gc.sender_name,
14:28:24 2590  	     gc.recipient_email,
14:28:24 2591  	     gc.recipient_name,
14:28:24 2592  	     gc.purchase_date,
14:28:24 2593  	     gc.redemption_date,
14:28:24 2594  	     gc.purchaser_group_id,
14:28:24 2595  	     gc.redeemer_group_id,
14:28:24 2596  	     gc.code,
14:28:24 2597  	     gc.gift_message,
14:28:24 2598  	     gc.recipient_notify_date,
14:28:24 2599  	     gc.id
14:28:24 2600  	   FROM
14:28:24 2601  	     GIFT_CERTIFICATE gc
14:28:24 2602  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
14:28:24 2603  	   WHERE
14:28:24 2604  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
14:28:24 2605  
14:28:24 2606  EXCEPTION
14:28:24 2607  WHEN BAD_INVOICE_ID THEN
14:28:24 2608  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2609  	   SPROC_NAME, 'No such invoice');
14:28:24 2610  WHEN OTHERS THEN
14:28:24 2611  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2612  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2613  END GET_GC_BY_PURCH_INVOICE_ID;
14:28:24 2614  
14:28:24 2615  
14:28:24 2616  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
14:28:24 2617  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:24 2618  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
14:28:24 2619  ) AS
14:28:24 2620  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
14:28:24 2621  -- VARIABLES
14:28:24 2622  temp_invoice_id NUMBER;
14:28:24 2623  -- EXCEPTIONS
14:28:24 2624  BAD_INVOICE_ID EXCEPTION;
14:28:24 2625  BEGIN
14:28:24 2626  
14:28:24 2627  	 BEGIN
14:28:24 2628  	   SELECT
14:28:24 2629  	     I.ID into temp_invoice_id
14:28:24 2630  	   FROM
14:28:24 2631  	     INVOICE I
14:28:24 2632  	   WHERE
14:28:24 2633  	     I.ID = in_invoice_id;
14:28:24 2634  	   EXCEPTION
14:28:24 2635  	     WHEN NO_DATA_FOUND THEN
14:28:24 2636  	       RAISE BAD_INVOICE_ID;
14:28:24 2637  	 END;
14:28:24 2638  
14:28:24 2639  	 BEGIN
14:28:24 2640  	   SELECT
14:28:24 2641  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
14:28:24 2642  	   FROM
14:28:24 2643  	     GIFT_CERTIFICATE
14:28:24 2644  	   WHERE
14:28:24 2645  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
14:28:24 2646  	   EXCEPTION
14:28:24 2647  	     WHEN NO_DATA_FOUND THEN
14:28:24 2648  	       out_gift_certificate_id := NULL;
14:28:24 2649  	 END;
14:28:24 2650  
14:28:24 2651  EXCEPTION
14:28:24 2652  WHEN BAD_INVOICE_ID THEN
14:28:24 2653  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2654  	   SPROC_NAME, 'No such invoice');
14:28:24 2655  WHEN OTHERS THEN
14:28:24 2656  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2658  END GET_GC_ID_BY_PURCH_INVOICE_ID;
14:28:24 2659  
14:28:24 2660  /******************************************************************************/
14:28:24 2661  
14:28:24 2662  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
14:28:24 2663  	 in_old_fin_instrument_id   IN NUMBER,
14:28:24 2664  	 in_old_fin_instrument_type IN NUMBER,
14:28:24 2665  	 in_new_fin_instrument_id   IN NUMBER,
14:28:24 2666  	 in_new_fin_instrument_type IN NUMBER,
14:28:24 2667  	 in_updated_by		    IN VARCHAR2
14:28:24 2668  ) AS
14:28:24 2669  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
14:28:24 2670  -- variables
14:28:24 2671  temp_out_transaction_id NUMBER;
14:28:24 2672  temp_out_charge_id      NUMBER;
14:28:24 2673  var_accounts_count      NUMBER;
14:28:24 2674  var_transaction_type_old  "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
14:28:24 2675  var_transaction_type	 "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
14:28:24 2676  -- EXCEPTIONS
14:28:24 2677  BAD_OLD_CC   EXCEPTION;
14:28:24 2678  BAD_OLD_PP   EXCEPTION;
14:28:24 2679  BAD_OLD_TYPE EXCEPTION;
14:28:24 2680  BAD_NEW_CC   EXCEPTION;
14:28:24 2681  BAD_NEW_PP   EXCEPTION;
14:28:24 2682  BAD_NEW_TYPE EXCEPTION;
14:28:24 2683  DIFFERENT_OWNERS EXCEPTION;
14:28:24 2684  BEGIN
14:28:24 2685  
14:28:24 2686  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
14:28:24 2687  	   IF PROCS_FIN_INSTRUMENTS_V23.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 2688  	     -- throw exception: bad old credit card
14:28:24 2689  	     RAISE BAD_OLD_CC;
14:28:24 2690  	   END IF;
14:28:24 2691  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
14:28:24 2692  	   IF PROCS_FIN_INSTRUMENTS_V23.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 2693  	     -- throw exception: bad old paypal
14:28:24 2694  	     RAISE BAD_OLD_PP;
14:28:24 2695  	   END IF;
14:28:24 2696  	 ELSE
14:28:24 2697  	   -- throw exception: bad instrument type
14:28:24 2698  	   RAISE BAD_OLD_TYPE;
14:28:24 2699  	 END IF;
14:28:24 2700  
14:28:24 2701  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD THEN
14:28:24 2702  	   IF PROCS_FIN_INSTRUMENTS_V23.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 2703  	     -- throw exception: bad new credit card
14:28:24 2704  	     RAISE BAD_NEW_CC;
14:28:24 2705  	   END IF;
14:28:24 2706  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL THEN
14:28:24 2707  	   IF PROCS_FIN_INSTRUMENTS_V23.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 2708  	     -- throw exception: bad new paypal
14:28:24 2709  	     RAISE BAD_NEW_PP;
14:28:24 2710  	   END IF;
14:28:24 2711  	 ELSE
14:28:24 2712  	   -- throw exception: bad new instrument type
14:28:24 2713  	   RAISE BAD_NEW_TYPE;
14:28:24 2714  	 END IF;
14:28:24 2715  
14:28:24 2716  	 -- Check that owner of both instruments - same man
14:28:24 2717  
14:28:24 2718  	 SELECT count(1) into var_accounts_count FROM (
14:28:24 2719  	   SELECT
14:28:24 2720  	     CC.ACCOUNT_ID
14:28:24 2721  	   FROM
14:28:24 2722  	     CREDIT_CARD CC
14:28:24 2723  	   WHERE
14:28:24 2724  	     (
14:28:24 2725  	       CC.ID = in_old_fin_instrument_id
14:28:24 2726  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
14:28:24 2727  	     )
14:28:24 2728  	     OR
14:28:24 2729  	     (
14:28:24 2730  	       CC.ID = in_new_fin_instrument_id
14:28:24 2731  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_CREDIT_CARD
14:28:24 2732  	     )
14:28:24 2733  	   UNION
14:28:24 2734  	   SELECT
14:28:24 2735  	     PP.ACCOUNT_ID
14:28:24 2736  	   FROM
14:28:24 2737  	     PAYPAL PP
14:28:24 2738  	   WHERE
14:28:24 2739  	     (
14:28:24 2740  	       PP.ID = in_old_fin_instrument_id
14:28:24 2741  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
14:28:24 2742  	     )
14:28:24 2743  	     OR
14:28:24 2744  	     (
14:28:24 2745  	       PP.ID = in_new_fin_instrument_id
14:28:24 2746  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
14:28:24 2747  	     )
14:28:24 2748  	 )
14:28:24 2749  	 WHERE
14:28:24 2750  	   account_id IS NOT NULL;
14:28:24 2751  
14:28:24 2752  	 IF (var_accounts_count > 1) THEN
14:28:24 2753  	   -- Throw exception: different owners of instruments
14:28:24 2754  	   RAISE DIFFERENT_OWNERS;
14:28:24 2755  	 END IF;
14:28:24 2756  
14:28:24 2757  	 FOR f_sub IN (
14:28:24 2758  	   select
14:28:24 2759  	     s.id
14:28:24 2760  	   FROM
14:28:24 2761  	     subscription s
14:28:24 2762  	   WHERE
14:28:24 2763  	     (
14:28:24 2764  	       s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE OR
14:28:24 2765  	       s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED OR
14:28:24 2766  	       s.subscription_status_id = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD
14:28:24 2767  	     )
14:28:24 2768  	     AND
14:28:24 2769  	     s.instrument_type_id = in_old_fin_instrument_type AND
14:28:24 2770  	     s.instrument_id = in_old_fin_instrument_id
14:28:24 2771  	 ) LOOP
14:28:24 2772  	   PROCS_SUBSCRIPTION_CRU_V23.UPDATE_SUBSCRIPTION(
14:28:24 2773  	     in_subscription_id => f_sub.id,
14:28:24 2774  	     in_instrument_type_id => in_new_fin_instrument_type,
14:28:24 2775  	     in_instrument_id => in_new_fin_instrument_id,
14:28:24 2776  	     in_updated_by => in_updated_by
14:28:24 2777  	   );
14:28:24 2778  	 END LOOP;
14:28:24 2779  
14:28:24 2780  	 FOR f_open_charge IN (
14:28:24 2781  	   select
14:28:24 2782  	     ch.id,
14:28:24 2783  	     ch.invoice_id,
14:28:24 2784  	     ch.transaction_id,
14:28:24 2785  	     ch.charge_amount
14:28:24 2786  	   FROM
14:28:24 2787  	     charge ch
14:28:24 2788  	   WHERE
14:28:24 2789  	     ch.instrument_type_id = in_old_fin_instrument_type
14:28:24 2790  	     AND ch.instrument_id = in_old_fin_instrument_id
14:28:24 2791  	     AND ch.charge_status_id = GLOBAL_STATUSES_V23.CHARGE_OPENED
14:28:24 2792  	 ) LOOP
14:28:24 2793  
14:28:24 2794  	   FOR f_pending_transaction IN (
14:28:24 2795  	     select
14:28:24 2796  	       id, transaction_amount, order_id, is_refund
14:28:24 2797  	     from
14:28:24 2798  	       transaction
14:28:24 2799  	     where
14:28:24 2800  	       id = f_open_charge.transaction_id
14:28:24 2801  	       and transaction_status_id = GLOBAL_STATUSES_V23.TRANSACTION_PENDING
14:28:24 2802  	   ) LOOP
14:28:24 2803  
14:28:24 2804  	     SELECT
14:28:24 2805  	       DECODE(TRANSACTION_TYPE_CODE, 'RECURRING_BILLING', 'RECURRING_BILLING_USER_UPDATE',
14:28:24 2806  					     'GRACE_PERIOD_FINAL', 'GRACE_PERIOD_USER_UPDATE',
14:28:24 2807  					     TRANSACTION_TYPE_CODE)
14:28:24 2808  	     INTO var_transaction_type
14:28:24 2809  	     FROM
14:28:24 2810  	       Transaction
14:28:24 2811  	     WHERE
14:28:24 2812  	       id = f_pending_transaction.id
14:28:24 2813  	       AND ROWNUM <= 1;
14:28:24 2814  
14:28:24 2815  	     PROCS_TRANSACTION_V23.CREATE_TRANSACTION (
14:28:24 2816  	       in_transaction_id => NULL,
14:28:24 2817  	       in_status_id  => GLOBAL_STATUSES_V23.TRANSACTION_PENDING,
14:28:24 2818  	       in_amount     => f_pending_transaction.transaction_amount,
14:28:24 2819  	       in_created_by => in_updated_by,
14:28:24 2820  	       in_order_id   => null,
14:28:24 2821  	       in_is_refund  => f_pending_transaction.is_refund,
14:28:24 2822  	       in_transaction_type_code => var_transaction_type,
14:28:24 2823  	       out_transaction_id => temp_out_transaction_id
14:28:24 2824  	     );
14:28:24 2825  
14:28:24 2826  	     PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_STATUS(
14:28:24 2827  	       in_transaction_id => f_pending_transaction.id,
14:28:24 2828  	       in_updated_by	 => in_updated_by,
14:28:24 2829  	       in_transaction_status_id  => GLOBAL_STATUSES_V23.TRANSACTION_CLOSED
14:28:24 2830  	     );
14:28:24 2831  
14:28:24 2832  	     -- Create new charge
14:28:24 2833  	     PROCS_CHARGE_V23.CREATE_CHARGE (
14:28:24 2834  	       in_invoice_id	     => f_open_charge.invoice_id,
14:28:24 2835  	       in_transaction_id     => temp_out_transaction_id,
14:28:24 2836  	       in_instrument_type_id => in_new_fin_instrument_type,
14:28:24 2837  	       in_instrument_id      => in_new_fin_instrument_id,
14:28:24 2838  	       in_charge_amount      => f_open_charge.charge_amount,
14:28:24 2839  	       in_created_by	     => in_updated_by,
14:28:24 2840  	       in_charge_status_id   => GLOBAL_STATUSES_V23.CHARGE_OPENED,
14:28:24 2841  	       out_charge_id	     => temp_out_charge_id
14:28:24 2842  	     );
14:28:24 2843  	     -- Cancel old charge
14:28:24 2844  	     PROCS_CHARGE_V23.UPDATE_CHARGE_STATUS(
14:28:24 2845  	       in_charge_id	   => f_open_charge.id,
14:28:24 2846  	       in_updated_by	   => in_updated_by,
14:28:24 2847  	       in_charge_status_id => GLOBAL_STATUSES_V23.CHARGE_CANCELED
14:28:24 2848  	     );
14:28:24 2849  
14:28:24 2850  	     PROCS_ADJUSTMENTS_V23.UPDATE_INVOICE_ADJUSTMENT(
14:28:24 2851  	       IN_INVOICE_ID => f_open_charge.invoice_id,
14:28:24 2852  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
14:28:24 2853  	       IN_CHARGE_ID => temp_out_charge_id,
14:28:24 2854  	       IN_UPDATED_BY => in_updated_by
14:28:24 2855  	     );
14:28:24 2856  
14:28:24 2857  	   END LOOP;
14:28:24 2858  	 END LOOP;
14:28:24 2859  
14:28:24 2860  EXCEPTION
14:28:24 2861  WHEN BAD_OLD_CC THEN
14:28:24 2862  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2863  	   SPROC_NAME, 'Trying to switch from non existing credit card');
14:28:24 2864  WHEN BAD_OLD_PP THEN
14:28:24 2865  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2866  	   SPROC_NAME, 'Trying to switch from non existing paypal');
14:28:24 2867  WHEN BAD_OLD_TYPE THEN
14:28:24 2868  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2869  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
14:28:24 2870  WHEN BAD_NEW_CC THEN
14:28:24 2871  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2872  	   SPROC_NAME, 'Trying to switch to non existing credit card');
14:28:24 2873  WHEN BAD_NEW_PP THEN
14:28:24 2874  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2875  	   SPROC_NAME, 'Trying to switch to non existing paypal');
14:28:24 2876  WHEN BAD_NEW_TYPE THEN
14:28:24 2877  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 2878  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
14:28:24 2879  WHEN DIFFERENT_OWNERS THEN
14:28:24 2880  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 2881  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
14:28:24 2882  WHEN OTHERS THEN
14:28:24 2883  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 2884  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 2885  END SWITCH_FINANCIAL_INSTRUMENT;
14:28:24 2886  
14:28:24 2887  /******************************************************************************/
14:28:24 2888  
14:28:24 2889  /*
14:28:24 2890  	   Note, this returns paypal records which are in the given window of time
14:28:24 2891  	   based on their creation date, not their expiration date, because we've seen
14:28:24 2892  	   suspicious values in the data for expiration dates. The java layer should
14:28:24 2893  	   inspect the expiration dates and decide whether or not to act on the data.
14:28:24 2894  */
14:28:24 2895  
14:28:24 2896  PROCEDURE GET_EXPIRING_PAYPAL (
14:28:24 2897  	 in_expire_window_days	 IN NUMBER,
14:28:24 2898  	 in_creation_limit_days  IN NUMBER,
14:28:24 2899  	 in_retry_throttle_name  IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
14:28:24 2900  	 out_result_set 	 OUT SYS_REFCURSOR
14:28:24 2901  ) AS
14:28:24 2902  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_EXPIRING_PAYPAL';
14:28:24 2903  var_rows_to_return CONSTANT NUMBER := 1000;
14:28:24 2904  BEGIN
14:28:24 2905  	 OPEN out_result_set FOR
14:28:24 2906  	 SELECT * FROM (
14:28:24 2907  	       SELECT
14:28:24 2908  	       ac.group_id	   AS group_id,
14:28:24 2909  	       pp.id		   AS paypal_id,
14:28:24 2910  	       sb.id		   AS subscription_id,
14:28:24 2911  	       pp.create_date	   AS paypal_creation_date,
14:28:24 2912  	       pp.expiration_date  AS paypal_expiration_date,
14:28:24 2913  	       lc.end_date	   AS license_end_date
14:28:24 2914  	   FROM license lc
14:28:24 2915  	   INNER JOIN subscription sb
14:28:24 2916  	   ON lc.subscription_id = sb.id
14:28:24 2917  	   INNER JOIN paypal pp
14:28:24 2918  	   ON pp.account_id = sb.account_id
14:28:24 2919  	   INNER JOIN account ac
14:28:24 2920  	   ON pp.account_id = ac.id
14:28:24 2921  	   WHERE SYSDATE <= lc.end_date
14:28:24 2922  	     AND SYSDATE + in_expire_window_days > lc.end_date
14:28:24 2923  	     AND pp.paypal_status_id = GLOBAL_STATUSES_V23.PAYPAL_ACTIVE
14:28:24 2924  	     AND lc.license_status_id IN (GLOBAL_STATUSES_V23.LICENSE_ACTIVE,
14:28:24 2925  					  GLOBAL_STATUSES_V23.LICENSE_IN_GRACE_PERIOD)
14:28:24 2926  	     AND pp.id = sb.instrument_id
14:28:24 2927  	     AND sb.instrument_type_id = GLOBAL_ENUMS_V23.INSTRUMENT_PAYPAL
14:28:24 2928  	     AND sb.subscription_status_id IN (GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE,
14:28:24 2929  					       GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD)
14:28:24 2930  	     AND pp.create_date + in_creation_limit_days <= lc.end_date
14:28:24 2931  	     AND NOT EXISTS(
14:28:24 2932  	       SELECT NULL
14:28:24 2933  	       FROM process_retry_throttle rt
14:28:24 2934  	       WHERE rt.process_name = in_retry_throttle_name
14:28:24 2935  		 AND rt.generic_id = pp.id
14:28:24 2936  	     )
14:28:24 2937  	     AND ROWNUM <= 10 * var_rows_to_return
14:28:24 2938  	   ORDER BY dbms_random.value
14:28:24 2939  	 )
14:28:24 2940  	 WHERE ROWNUM <= var_rows_to_return;
14:28:24 2941  END GET_EXPIRING_PAYPAL;
14:28:24 2942  
14:28:24 2943  /******************************************************************************/
14:28:24 2944  
14:28:24 2945  END PROCS_FIN_INSTRUMENTS_V23;
14:28:24 2946  .
14:28:24 SQL> /

Package body created.

Elapsed: 00:00:00.24
14:28:24 SQL> 
14:28:24 SQL> prompt Compiling body for procs_group_account.sql
Compiling body for procs_group_account.sql
14:28:24 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V23" AS
14:28:24   2  
14:28:24   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
14:28:24   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
14:28:24   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
14:28:24   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:24   7  ) AS
14:28:24   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
14:28:24   9  BEGIN
14:28:24  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23.UPDATE_SUBSCRIPTION_SHARE (
14:28:24  11  	  in_id 		=> in_sub_share_id,
14:28:24  12  	  in_needs_entitlements => in_need_entitlements,
14:28:24  13  	  in_updated_by 	=> in_updater
14:28:24  14  	);
14:28:24  15  END UPDATE_SS_NEED_ENTITLEMENTS;
14:28:24  16  
14:28:24  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
14:28:24  18  	out_result_set OUT SYS_REFCURSOR
14:28:24  19  ) AS
14:28:24  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
14:28:24  21  BEGIN
14:28:24  22  	OPEN out_result_set FOR
14:28:24  23  	SELECT * FROM (
14:28:24  24  	  SELECT DISTINCT
14:28:24  25  	    ga.Subscription_Id,
14:28:24  26  	    A.Group_Id Borrower_Group_Id,
14:28:24  27  	    L.Offer_Id,
14:28:24  28  	    ss.id Subscription_Share_id
14:28:24  29  	  FROM
14:28:24  30  	    Subscription_Share Ss,
14:28:24  31  	    Group_Account Ga,
14:28:24  32  	    Account A,
14:28:24  33  	    License l
14:28:24  34  	  WHERE
14:28:24  35  	    Ss.Group_Account_Id        = ga.id
14:28:24  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V23.TRUE
14:28:24  37  	    AND Ss.Borrower_Account_Id = A.Id
14:28:24  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
14:28:24  39  	    AND ROWNUM <= 5000
14:28:24  40  	  ORDER BY dbms_random.value
14:28:24  41  ) WHERE
14:28:24  42  	ROWNUM <= 1000;
14:28:24  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
14:28:24  44  
14:28:24  45  PROCEDURE EXPIRE_SUB_SHARE(
14:28:24  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
14:28:24  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:24  48  ) AS
14:28:24  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
14:28:24  50  BEGIN
14:28:24  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23.UPDATE_SUBSCRIPTION_SHARE (
14:28:24  52  	  in_id 	=> in_sub_share_id,
14:28:24  53  	  in_end_date	=> SYSDATE,
14:28:24  54  	  in_updated_by => in_updater,
14:28:24  55  	  in_needs_entitlements => 1
14:28:24  56  	);
14:28:24  57  END EXPIRE_SUB_SHARE;
14:28:24  58  
14:28:24  59  PROCEDURE EXPIRE_ALL_SHARES (
14:28:24  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
14:28:24  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:24  62  ) AS
14:28:24  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
14:28:24  64  BEGIN
14:28:24  65  	UPDATE SUBSCRIPTION_SHARE SET
14:28:24  66  	  END_DATE = SYSDATE,
14:28:24  67  	  UPDATED_BY = in_updated_by,
14:28:24  68  	  UPDATE_DATE = SYSDATE
14:28:24  69  	WHERE
14:28:24  70  	  GROUP_ACCOUNT_ID = in_group_account_id
14:28:24  71  	AND
14:28:24  72  	  SYSDATE < END_DATE;
14:28:24  73  EXCEPTION
14:28:24  74  	WHEN OTHERS THEN
14:28:24  75  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
14:28:24  77  END EXPIRE_ALL_SHARES;
14:28:24  78  
14:28:24  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
14:28:24  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
14:28:24  81  	in_start	 IN  NUMBER,
14:28:24  82  	in_end		 IN  NUMBER,
14:28:24  83  	in_expired	 IN  NUMBER,
14:28:24  84  	out_result_set	 OUT SYS_REFCURSOR,
14:28:24  85  	out_shares_count OUT NUMBER
14:28:24  86  ) AS
14:28:24  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
14:28:24  88  range_diff NUMBER := 0;
14:28:24  89  upper_bond_diff NUMBER := 0;
14:28:24  90  l_start NUMBER := 0;
14:28:24  91  l_end   NUMBER := 0;
14:28:24  92  BEGIN
14:28:24  93  	--Normalize the end points [START]
14:28:24  94  	IF (in_start IS NULL OR in_start < 0) Then
14:28:24  95  	  l_start := 0;
14:28:24  96  	ELSE
14:28:24  97  	  l_start := in_start;
14:28:24  98  	END IF;
14:28:24  99  
14:28:24 100  	IF (in_end IS NULL) Then
14:28:24 101  	  l_end := 11;
14:28:24 102  	ELSE
14:28:24 103  	  l_end := in_end;
14:28:24 104  	END IF;
14:28:24 105  
14:28:24 106  	l_start := l_start + 1;
14:28:24 107  	l_end	:= l_end   + 1;
14:28:24 108  
14:28:24 109  	range_diff := l_end - l_start;
14:28:24 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V23.MAX_RETURN_COUNT;
14:28:24 111  
14:28:24 112  	IF (upper_bond_diff > 0) Then
14:28:24 113  	  l_end := l_end - upper_bond_diff;
14:28:24 114  	END IF;
14:28:24 115  	--Normalize the end points [END]
14:28:24 116  
14:28:24 117  	BEGIN
14:28:24 118  	  SELECT
14:28:24 119  	    COUNT(1) INTO out_shares_count
14:28:24 120  	  FROM
14:28:24 121  	    GROUP_ACCOUNT ga,
14:28:24 122  	    SUBSCRIPTION_SHARE ss,
14:28:24 123  	    ACCOUNT a
14:28:24 124  	  WHERE
14:28:24 125  	    a.GROUP_ID		= in_group_id AND
14:28:24 126  	    a.Id		= ss.borrower_account_id And
14:28:24 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
14:28:24 128  	END;
14:28:24 129  
14:28:24 130  	IF in_expired > 0 THEN
14:28:24 131  	BEGIN
14:28:24 132  	    OPEN out_result_set FOR
14:28:24 133  	    SELECT
14:28:24 134  	      *
14:28:24 135  	    FROM
14:28:24 136  	      (SELECT rownum rnum, q.*
14:28:24 137  	       FROM
14:28:24 138  		(SELECT
14:28:24 139  		   ga.SUBSCRIPTION_ID,
14:28:24 140  		   ss.START_DATE,
14:28:24 141  		   ss.END_DATE,
14:28:24 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
14:28:24 143  		 FROM
14:28:24 144  		   GROUP_ACCOUNT ga,
14:28:24 145  		   SUBSCRIPTION_SHARE ss,
14:28:24 146  		   ACCOUNT a,
14:28:24 147  		   SUBSCRIPTION s,
14:28:24 148  		   ACCOUNT a2
14:28:24 149  		 WHERE
14:28:24 150  		   a.GROUP_ID	       = in_group_id AND
14:28:24 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
14:28:24 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
14:28:24 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
14:28:24 154  		   s.ACCOUNT_ID        = a2.ID
14:28:24 155  		) Q
14:28:24 156  	      WHERE rownum <= l_end)
14:28:24 157  	    WHERE rnum >= l_Start;
14:28:24 158  	END;
14:28:24 159  	ELSE
14:28:24 160  	BEGIN
14:28:24 161  	    OPEN out_result_set FOR
14:28:24 162  	    SELECT
14:28:24 163  	      *
14:28:24 164  	    FROM
14:28:24 165  	      (SELECT rownum rnum, q.*
14:28:24 166  	       FROM
14:28:24 167  		(SELECT
14:28:24 168  		   ga.SUBSCRIPTION_ID,
14:28:24 169  		   ss.START_DATE,
14:28:24 170  		   ss.END_DATE,
14:28:24 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
14:28:24 172  		 FROM
14:28:24 173  		   GROUP_ACCOUNT ga,
14:28:24 174  		   SUBSCRIPTION_SHARE ss,
14:28:24 175  		   ACCOUNT a,
14:28:24 176  		   SUBSCRIPTION s,
14:28:24 177  		   ACCOUNT a2
14:28:24 178  		 WHERE
14:28:24 179  		   a.GROUP_ID	       = in_group_id AND
14:28:24 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
14:28:24 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
14:28:24 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
14:28:24 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
14:28:24 184  		   s.ACCOUNT_ID        = a2.ID
14:28:24 185  		) Q
14:28:24 186  	      WHERE rownum <= l_end)
14:28:24 187  	    WHERE rnum >= l_start;
14:28:24 188  	  END;
14:28:24 189  	END IF;
14:28:24 190  EXCEPTION
14:28:24 191  WHEN NO_DATA_FOUND THEN
14:28:24 192  	NULL;
14:28:24 193  WHEN OTHERS THEN
14:28:24 194  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
14:28:24 196  END SUB_SHARE_BY_GROUP_ID;
14:28:24 197  
14:28:24 198  PROCEDURE IS_VALID_IP_ADDRESS (
14:28:24 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:24 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:28:24 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:28:24 202  	out_is_valid	    OUT NUMBER
14:28:24 203  ) AS
14:28:24 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
14:28:24 205  BEGIN
14:28:24 206  	SELECT
14:28:24 207  	  COUNT(1) INTO out_is_valid
14:28:24 208  	FROM
14:28:24 209  	  GROUP_ACCOUNT_IP_RANGE,
14:28:24 210  	  GROUP_ACCOUNT,
14:28:24 211  	  SUBSCRIPTION,
14:28:24 212  	  OFFER_CHAIN
14:28:24 213  	WHERE
14:28:24 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
14:28:24 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:28:24 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
14:28:24 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
14:28:24 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
14:28:24 219  	 (
14:28:24 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
14:28:24 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
14:28:24 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
14:28:24 223  	 ) AND
14:28:24 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE;
14:28:24 225  EXCEPTION
14:28:24 226  WHEN OTHERS THEN
14:28:24 227  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
14:28:24 229  END IS_VALID_IP_ADDRESS;
14:28:24 230  
14:28:24 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
14:28:24 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:24 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:28:24 234  	out_is_valid	    OUT NUMBER
14:28:24 235  ) AS
14:28:24 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
14:28:24 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
14:28:24 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
14:28:24 239  BEGIN
14:28:24 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
14:28:24 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
14:28:24 242  
14:28:24 243  	SELECT
14:28:24 244  	  COUNT(1) INTO out_is_valid
14:28:24 245  	FROM
14:28:24 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
14:28:24 247  	  GROUP_ACCOUNT ga,
14:28:24 248  	  SUBSCRIPTION s,
14:28:24 249  	  OFFER_CHAIN oc
14:28:24 250  	WHERE
14:28:24 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
14:28:24 252  	  ga.SUBSCRIPTION_ID = s.ID AND
14:28:24 253  	  s.OFFER_CHAIN_ID = oc.ID AND
14:28:24 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
14:28:24 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
14:28:24 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
14:28:24 257  	  gaed.IS_ACTIVE = 1;
14:28:24 258  EXCEPTION
14:28:24 259  WHEN OTHERS THEN
14:28:24 260  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
14:28:24 262  END IS_VALID_EMAIL_DOMAIN;
14:28:24 263  
14:28:24 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
14:28:24 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
14:28:24 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
14:28:24 267  	out_Result_Set	       OUT Sys_Refcursor
14:28:24 268  ) AS
14:28:24 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
14:28:24 270  BEGIN
14:28:24 271  	BEGIN
14:28:24 272  	   OPEN out_result_set FOR
14:28:24 273  	   SELECT
14:28:24 274  	      ss.ID,
14:28:24 275  	      ss.GROUP_ACCOUNT_ID,
14:28:24 276  	      ss.BORROWER_ACCOUNT_ID,
14:28:24 277  	      ss.IP_ADDRESS,
14:28:24 278  	      ss.START_DATE,
14:28:24 279  	      ss.END_DATE,
14:28:24 280  	      ss.CREATED_BY,
14:28:24 281  	      ss.CREATE_DATE,
14:28:24 282  	      ss.UPDATED_BY,
14:28:24 283  	      ss.UPDATE_DATE,
14:28:24 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
14:28:24 285  	   FROM
14:28:24 286  	     SUBSCRIPTION_SHARE ss,
14:28:24 287  	     ACCOUNT a
14:28:24 288  	   WHERE
14:28:24 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
14:28:24 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
14:28:24 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
14:28:24 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
14:28:24 293  	END;
14:28:24 294  EXCEPTION
14:28:24 295  WHEN OTHERS THEN
14:28:24 296  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
14:28:24 298  END GET_SUBSCRIPTION_SHARE;
14:28:24 299  
14:28:24 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
14:28:24 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
14:28:24 302  	out_result_set	   OUT SYS_REFCURSOR
14:28:24 303  ) As
14:28:24 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
14:28:24 305  BEGIN
14:28:24 306  OPEN out_result_set FOR
14:28:24 307  	SELECT
14:28:24 308  	  ID,
14:28:24 309  	  SUBSCRIPTION_ID,
14:28:24 310  	  GROUP_NAME,
14:28:24 311  	  FIRST_NAME,
14:28:24 312  	  LAST_NAME,
14:28:24 313  	  EMAIL,
14:28:24 314  	  PHONE,
14:28:24 315  	  ORGANIZATION_TYPE,
14:28:24 316  	  SEATS,
14:28:24 317  	  SEAT_TTL_IN_HOURS,
14:28:24 318  	  CREATE_DATE,
14:28:24 319  	  CREATED_BY,
14:28:24 320  	  UPDATE_DATE,
14:28:24 321  	  UPDATED_BY
14:28:24 322  	FROM
14:28:24 323  	  GROUP_ACCOUNT
14:28:24 324  	Where
14:28:24 325  	  Subscription_Id = in_subscription_id;
14:28:24 326  EXCEPTION
14:28:24 327  WHEN OTHERS THEN
14:28:24 328  	Procs_Common_V23.Throw_Exception(APP_EXCEPTION_CODES_V23.Unknown_Error,
14:28:24 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 330  
14:28:24 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
14:28:24 332  
14:28:24 333  PROCEDURE CREATE_GROUP_ACCOUNT (
14:28:24 334  	in_subscription_id	 IN NUMBER,
14:28:24 335  	in_group_name		 IN VARCHAR2,
14:28:24 336  	in_first_name		 IN VARCHAR2,
14:28:24 337  	in_last_name		 IN VARCHAR2,
14:28:24 338  	in_email		 IN VARCHAR2,
14:28:24 339  	in_phone		 IN VARCHAR2,
14:28:24 340  	in_organization_type	 IN VARCHAR2,
14:28:24 341  	in_seats		 IN NUMBER,
14:28:24 342  	in_seat_ttl_in_hours	 IN NUMBER,
14:28:24 343  	in_ip			 IN NUMBER,
14:28:24 344  	in_created_by		 IN VARCHAR2
14:28:24 345  ) AS
14:28:24 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
14:28:24 347  BEGIN
14:28:24 348  
14:28:24 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23.CREATE_GROUP_ACCOUNT(
14:28:24 350  	  in_subscription_id => in_subscription_id,
14:28:24 351  	  in_group_name => in_group_name,
14:28:24 352  	  in_first_name => in_first_name,
14:28:24 353  	  in_last_name => in_last_name,
14:28:24 354  	  in_email => in_email,
14:28:24 355  	  in_phone => in_phone,
14:28:24 356  	  in_organization_type => in_organization_type,
14:28:24 357  	  in_seats => in_seats,
14:28:24 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
14:28:24 359  	  in_ip => in_ip,
14:28:24 360  	  in_created_by => in_created_by
14:28:24 361  	);
14:28:24 362  
14:28:24 363  END CREATE_GROUP_ACCOUNT;
14:28:24 364  
14:28:24 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
14:28:24 366  	in_group_account_id IN NUMBER,
14:28:24 367  	in_start	    IN NUMBER,
14:28:24 368  	in_end		    IN NUMBER,
14:28:24 369  	out_Result_Set	    OUT Sys_Refcursor
14:28:24 370  ) AS
14:28:24 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
14:28:24 372  range_diff NUMBER := 0;
14:28:24 373  upper_bond_diff NUMBER := 0;
14:28:24 374  l_start NUMBER := 0;
14:28:24 375  l_end   NUMBER := 0;
14:28:24 376  BEGIN
14:28:24 377  	-- Normalize the end points [START]
14:28:24 378  	IF (in_start IS NULL OR in_start < 0) Then
14:28:24 379  	  l_start := 0;
14:28:24 380  	ELSE
14:28:24 381  	  l_start := in_start;
14:28:24 382  	END IF;
14:28:24 383  
14:28:24 384  	IF (in_end IS NULL) Then
14:28:24 385  	  l_end := 11;
14:28:24 386  	ELSE
14:28:24 387  	  l_end := in_end;
14:28:24 388  	END IF;
14:28:24 389  
14:28:24 390  	l_start := l_start + 1;
14:28:24 391  	l_end	:= l_end   + 1;
14:28:24 392  
14:28:24 393  	range_diff := l_end - l_start;
14:28:24 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V23.MAX_RETURN_COUNT;
14:28:24 395  
14:28:24 396  	IF (upper_bond_diff > 0) Then
14:28:24 397  	  l_end := l_end - upper_bond_diff;
14:28:24 398  	END IF;
14:28:24 399  	-- Normalize the end points [END]
14:28:24 400  
14:28:24 401  	BEGIN
14:28:24 402  	   OPEN out_result_set FOR
14:28:24 403  	   SELECT *
14:28:24 404  	   FROM
14:28:24 405  	     (SELECT rownum rnum, Q.*
14:28:24 406  	      FROM
14:28:24 407  	       (SELECT
14:28:24 408  		  ss.ID,
14:28:24 409  		  ss.GROUP_ACCOUNT_ID,
14:28:24 410  		  ss.BORROWER_ACCOUNT_ID,
14:28:24 411  		  ss.IP_ADDRESS,
14:28:24 412  		  ss.START_DATE,
14:28:24 413  		  ss.END_DATE,
14:28:24 414  		  ss.CREATED_BY,
14:28:24 415  		  ss.CREATE_DATE,
14:28:24 416  		  ss.UPDATED_BY,
14:28:24 417  		  ss.UPDATE_DATE,
14:28:24 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
14:28:24 419  		FROM
14:28:24 420  		  SUBSCRIPTION_SHARE ss,
14:28:24 421  		  ACCOUNT a,
14:28:24 422  		  LICENSE l,
14:28:24 423  		  GROUP_ACCOUNT ga
14:28:24 424  		WHERE
14:28:24 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
14:28:24 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
14:28:24 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
14:28:24 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
14:28:24 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
14:28:24 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
14:28:24 431  	      ) Q
14:28:24 432  	    WHERE rownum <= l_end)
14:28:24 433  	  WHERE rnum >= l_start;
14:28:24 434  	END;
14:28:24 435  EXCEPTION
14:28:24 436  WHEN OTHERS THEN
14:28:24 437  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
14:28:24 439  END GET_SUBSCRIPTION_SHARES;
14:28:24 440  
14:28:24 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
14:28:24 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:28:24 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:28:24 444  	out_result_set	      OUT SYS_REFCURSOR
14:28:24 445  ) AS
14:28:24 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
14:28:24 447  BEGIN
14:28:24 448  	BEGIN
14:28:24 449  	  OPEN out_result_set FOR
14:28:24 450  	  SELECT
14:28:24 451  	    ID,
14:28:24 452  	    SUBSCRIPTION_ID,
14:28:24 453  	    GROUP_NAME,
14:28:24 454  	    FIRST_NAME,
14:28:24 455  	    LAST_NAME,
14:28:24 456  	    EMAIL,
14:28:24 457  	    PHONE,
14:28:24 458  	    ORGANIZATION_TYPE,
14:28:24 459  	    SEATS,
14:28:24 460  	    SEAT_TTL_IN_HOURS,
14:28:24 461  	    CREATE_DATE,
14:28:24 462  	    CREATED_BY,
14:28:24 463  	    UPDATE_DATE,
14:28:24 464  	    UPDATED_BY
14:28:24 465  	  FROM
14:28:24 466  	    GROUP_ACCOUNT
14:28:24 467  	  WHERE
14:28:24 468  	    ID IN (
14:28:24 469  	      SELECT
14:28:24 470  		GROUP_ACCOUNT_ID
14:28:24 471  	      FROM
14:28:24 472  		GROUP_ACCOUNT_IP_RANGE,
14:28:24 473  		GROUP_ACCOUNT,
14:28:24 474  		SUBSCRIPTION,
14:28:24 475  		OFFER_CHAIN
14:28:24 476  	      WHERE
14:28:24 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
14:28:24 478  	      AND
14:28:24 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:28:24 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
14:28:24 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
14:28:24 482  	      AND
14:28:24 483  		(
14:28:24 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
14:28:24 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
14:28:24 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
14:28:24 487  		)
14:28:24 488  	      AND
14:28:24 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE
14:28:24 490  	    );
14:28:24 491  	  END;
14:28:24 492  EXCEPTION
14:28:24 493  WHEN OTHERS THEN
14:28:24 494  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 496  END GET_GROUP_ACCOUNT_BY_IP;
14:28:24 497  
14:28:24 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
14:28:24 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:28:24 500  	out_result_set	    OUT SYS_REFCURSOR
14:28:24 501  ) AS
14:28:24 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
14:28:24 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
14:28:24 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
14:28:24 505  BEGIN
14:28:24 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
14:28:24 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
14:28:24 508  	BEGIN
14:28:24 509  	  OPEN out_result_set FOR
14:28:24 510  	  SELECT
14:28:24 511  	    ID,
14:28:24 512  	    SUBSCRIPTION_ID,
14:28:24 513  	    GROUP_NAME,
14:28:24 514  	    FIRST_NAME,
14:28:24 515  	    LAST_NAME,
14:28:24 516  	    EMAIL,
14:28:24 517  	    PHONE,
14:28:24 518  	    ORGANIZATION_TYPE,
14:28:24 519  	    SEATS,
14:28:24 520  	    SEAT_TTL_IN_HOURS,
14:28:24 521  	    CREATE_DATE,
14:28:24 522  	    CREATED_BY,
14:28:24 523  	    UPDATE_DATE,
14:28:24 524  	    UPDATED_BY
14:28:24 525  	  FROM
14:28:24 526  	    GROUP_ACCOUNT
14:28:24 527  	  WHERE
14:28:24 528  	    ID IN (
14:28:24 529  	      SELECT
14:28:24 530  		GROUP_ACCOUNT_ID
14:28:24 531  	      FROM
14:28:24 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
14:28:24 533  		GROUP_ACCOUNT ga,
14:28:24 534  		SUBSCRIPTION s,
14:28:24 535  		OFFER_CHAIN oc
14:28:24 536  	      WHERE
14:28:24 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
14:28:24 538  		ga.SUBSCRIPTION_ID = s.ID AND
14:28:24 539  		s.OFFER_CHAIN_ID = oc.ID AND
14:28:24 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
14:28:24 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
14:28:24 542  		gaed.IS_ACTIVE = 1
14:28:24 543  	    );
14:28:24 544  	  END;
14:28:24 545  EXCEPTION
14:28:24 546  WHEN OTHERS THEN
14:28:24 547  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
14:28:24 550  
14:28:24 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
14:28:24 552  	in_group_account_id   IN NUMBER,
14:28:24 553  	in_start	      IN NUMBER,
14:28:24 554  	in_end		      IN NUMBER,
14:28:24 555  	in_status	      IN NUMBER,
14:28:24 556  	out_record_count      OUT NUMBER,
14:28:24 557  	out_result_set	      OUT SYS_REFCURSOR
14:28:24 558  ) AS
14:28:24 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
14:28:24 560  range_diff NUMBER := 0;
14:28:24 561  upper_bond_diff NUMBER := 0;
14:28:24 562  l_start NUMBER := 0;
14:28:24 563  l_end   NUMBER := 0;
14:28:24 564  BEGIN
14:28:24 565  	--Normalize the end points [START]
14:28:24 566  	IF (in_start IS NULL OR in_start < 0) Then
14:28:24 567  	  l_start := 0;
14:28:24 568  	ELSE
14:28:24 569  	  l_start := in_start;
14:28:24 570  	END IF;
14:28:24 571  
14:28:24 572  	IF (in_end IS NULL) Then
14:28:24 573  	  l_end := 11;
14:28:24 574  	ELSE
14:28:24 575  	  l_end := in_end;
14:28:24 576  	END IF;
14:28:24 577  
14:28:24 578  	l_start := l_start + 1;
14:28:24 579  	l_end	:= l_end   + 1;
14:28:24 580  
14:28:24 581  	range_diff := l_end - l_start;
14:28:24 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V23.MAX_RETURN_COUNT;
14:28:24 583  
14:28:24 584  	IF (upper_bond_diff > 0) Then
14:28:24 585  	  l_end := l_end - upper_bond_diff;
14:28:24 586  	END IF;
14:28:24 587  	--Normalize the end points [END]
14:28:24 588  
14:28:24 589  	--Total count of records [START]
14:28:24 590  	SELECT
14:28:24 591  	  COUNT(1) INTO out_record_count
14:28:24 592  	FROM
14:28:24 593  	  GROUP_ACCOUNT_IP_RANGE
14:28:24 594  	WHERE
14:28:24 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
14:28:24 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
14:28:24 597  	--Total count of records [END]
14:28:24 598  
14:28:24 599  	OPEN out_result_set FOR
14:28:24 600  	SELECT
14:28:24 601  	  *
14:28:24 602  	FROM
14:28:24 603  	  (SELECT rownum rnum, q.*
14:28:24 604  	   FROM
14:28:24 605  	    (SELECT
14:28:24 606  	       ID,
14:28:24 607  	       GROUP_ACCOUNT_ID,
14:28:24 608  	       MINIMUM_IP_STRING,
14:28:24 609  	       MAXIMUM_IP_STRING,
14:28:24 610  	       GROUP_ACC_IP_RNG_STATUS_ID
14:28:24 611  	     FROM
14:28:24 612  	       GROUP_ACCOUNT_IP_RANGE
14:28:24 613  	     WHERE
14:28:24 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
14:28:24 615  	       (in_status IS NULL OR
14:28:24 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
14:28:24 617  	    ) Q
14:28:24 618  	  WHERE rownum <= l_end)
14:28:24 619  	WHERE rnum >= l_Start;
14:28:24 620  EXCEPTION
14:28:24 621  WHEN OTHERS THEN
14:28:24 622  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
14:28:24 624  END GET_GROUP_ACCOUNT_IP_RANGES;
14:28:24 625  
14:28:24 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
14:28:24 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:24 628  	in_start	      IN NUMBER,
14:28:24 629  	in_end		      IN NUMBER,
14:28:24 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
14:28:24 631  	out_record_count      OUT NUMBER,
14:28:24 632  	out_result_set	      OUT SYS_REFCURSOR
14:28:24 633  ) AS
14:28:24 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
14:28:24 635  range_diff NUMBER := 0;
14:28:24 636  upper_bond_diff NUMBER := 0;
14:28:24 637  l_start NUMBER := 0;
14:28:24 638  l_end   NUMBER := 0;
14:28:24 639  BEGIN
14:28:24 640  	--Normalize the end points [START]
14:28:24 641  	IF (in_start IS NULL OR in_start < 0) Then
14:28:24 642  	  l_start := 0;
14:28:24 643  	ELSE
14:28:24 644  	  l_start := in_start;
14:28:24 645  	END IF;
14:28:24 646  
14:28:24 647  	IF (in_end IS NULL) Then
14:28:24 648  	  l_end := 11;
14:28:24 649  	ELSE
14:28:24 650  	  l_end := in_end;
14:28:24 651  	END IF;
14:28:24 652  
14:28:24 653  	l_start := l_start + 1;
14:28:24 654  	l_end	:= l_end   + 1;
14:28:24 655  
14:28:24 656  	range_diff := l_end - l_start;
14:28:24 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V23.MAX_RETURN_COUNT;
14:28:24 658  
14:28:24 659  	IF (upper_bond_diff > 0) Then
14:28:24 660  	  l_end := l_end - upper_bond_diff;
14:28:24 661  	END IF;
14:28:24 662  	--Normalize the end points [END]
14:28:24 663  
14:28:24 664  	--Total count of records [START]
14:28:24 665  	SELECT
14:28:24 666  	  COUNT(1) INTO out_record_count
14:28:24 667  	FROM
14:28:24 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
14:28:24 669  	WHERE
14:28:24 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
14:28:24 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
14:28:24 672  	--Total count of records [END]
14:28:24 673  
14:28:24 674  	OPEN out_result_set FOR
14:28:24 675  	SELECT
14:28:24 676  	  *
14:28:24 677  	FROM
14:28:24 678  	  (SELECT rownum rnum, q.*
14:28:24 679  	   FROM
14:28:24 680  	    (SELECT
14:28:24 681  	      ID,
14:28:24 682  	      GROUP_ACCOUNT_ID,
14:28:24 683  	      EMAIL_DOMAIN,
14:28:24 684  	      IS_ACTIVE
14:28:24 685  	     FROM
14:28:24 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
14:28:24 687  	     WHERE
14:28:24 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
14:28:24 689  	       (in_status IS NULL OR
14:28:24 690  		IS_ACTIVE = in_status)
14:28:24 691  	    ) Q
14:28:24 692  	  WHERE rownum <= l_end)
14:28:24 693  	WHERE rnum >= l_Start;
14:28:24 694  
14:28:24 695  EXCEPTION
14:28:24 696  WHEN OTHERS THEN
14:28:24 697  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
14:28:24 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
14:28:24 700  
14:28:24 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
14:28:24 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:24 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:24 704  ) AS
14:28:24 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
14:28:24 706  BEGIN
14:28:24 707  	  PROCS_GROUP_ACCOUNT_CRU_V23.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
14:28:24 708  	    in_group_account_id => in_group_account_id,
14:28:24 709  	    in_updated_by => in_updated_by
14:28:24 710  	  );
14:28:24 711  EXCEPTION
14:28:24 712  WHEN OTHERS THEN
14:28:24 713  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
14:28:24 716  
14:28:24 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
14:28:24 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
14:28:24 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
14:28:24 720  ) AS
14:28:24 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
14:28:24 722  BEGIN
14:28:24 723  	  PROCS_GROUP_ACCOUNT_CRU_V23.DISABLE_EMAIL_DOMAIN_BY_ID(
14:28:24 724  	    in_id => in_id,
14:28:24 725  	    in_updated_by => in_updated_by
14:28:24 726  	  );
14:28:24 727  EXCEPTION
14:28:24 728  WHEN OTHERS THEN
14:28:24 729  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
14:28:24 732  
14:28:24 733  PROCEDURE ADD_EMAIL_DOMAIN (
14:28:24 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
14:28:24 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
14:28:24 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
14:28:24 737  ) AS
14:28:24 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
14:28:24 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
14:28:24 740  var_is_dupe NUMBER(1);
14:28:24 741  var_group_account_count NUMBER := 0;
14:28:24 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
14:28:24 743  NOT_GL EXCEPTION;
14:28:24 744  BEGIN
14:28:24 745  
14:28:24 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
14:28:24 747  	  FROM
14:28:24 748  	    GROUP_ACCOUNT,
14:28:24 749  	    SUBSCRIPTION,
14:28:24 750  	    OFFER_CHAIN
14:28:24 751  	  WHERE
14:28:24 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
14:28:24 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:28:24 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 755  	  ;
14:28:24 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
14:28:24 757  	    RAISE NOT_GL;
14:28:24 758  	  END IF;
14:28:24 759  
14:28:24 760  	  PROCS_GROUP_ACCOUNT_CRU_V23.ADD_EMAIL_DOMAIN(
14:28:24 761  	     in_group_account_id => in_group_account_id,
14:28:24 762  	     in_email_domain => in_email_domain,
14:28:24 763  	     in_is_active => GLOBAL_STATUSES_V23.GROUP_ACC_EMAIL_DOMAIN_ACT,
14:28:24 764  	     in_created_by => in_created_by
14:28:24 765  	  );
14:28:24 766  
14:28:24 767  EXCEPTION
14:28:24 768  WHEN NOT_GL THEN
14:28:24 769  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 770  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
14:28:24 771  WHEN OTHERS THEN
14:28:24 772  	IF (sqlcode=APP_EXCEPTION_CODES_V23.DUPLICATE_ERROR) THEN
14:28:24 773  	   RAISE;
14:28:24 774  	ELSE
14:28:24 775  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 776  	    SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 777  	END IF;
14:28:24 778  END ADD_EMAIL_DOMAIN;
14:28:24 779  
14:28:24 780  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
14:28:24 781  	in_group_account_id    IN NUMBER,
14:28:24 782  	in_borrower_account_id IN NUMBER,
14:28:24 783  	in_ip_address	       IN VARCHAR2,
14:28:24 784  	in_email_domain        IN VARCHAR2,
14:28:24 785  	in_created_by	       IN VARCHAR2
14:28:24 786  ) AS
14:28:24 787  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
14:28:24 788  ga_ttl_in_hours NUMBER := NULL;
14:28:24 789  start_date DATE := NULL;
14:28:24 790  end_date DATE := NULL;
14:28:24 791  BEGIN
14:28:24 792  	start_date := sysdate;
14:28:24 793  	end_date   := GLOBAL_CONSTANTS_V23.MAX_DATE;
14:28:24 794  
14:28:24 795  	BEGIN
14:28:24 796  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
14:28:24 797  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
14:28:24 798  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
14:28:24 799  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:28:24 800  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
14:28:24 801  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
14:28:24 802  	EXCEPTION
14:28:24 803  	  WHEN no_data_found THEN
14:28:24 804  	    ga_ttl_in_hours := NULL;
14:28:24 805  	END;
14:28:24 806  
14:28:24 807  	IF (ga_ttl_in_hours IS NOT NULL) THEN
14:28:24 808  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
14:28:24 809  	END IF;
14:28:24 810  
14:28:24 811  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23.CREATE_SUBSCRIPTION_SHARE(
14:28:24 812  	  in_group_account_id => in_group_account_id,
14:28:24 813  	  in_borrower_account_id => in_borrower_account_id,
14:28:24 814  	  in_ip_address => in_ip_address,
14:28:24 815  	  in_email_domain => in_email_domain,
14:28:24 816  	  in_start_date => start_date,
14:28:24 817  	  in_end_date => end_date,
14:28:24 818  	  in_created_by => in_created_by
14:28:24 819  	);
14:28:24 820  END CREATE_SUBSCRIPTION_SHARE;
14:28:24 821  
14:28:24 822  
14:28:24 823  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
14:28:24 824  	in_group_account_id   IN NUMBER,
14:28:24 825  	out_occupied_seats   OUT NUMBER
14:28:24 826  ) AS
14:28:24 827  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
14:28:24 828  BEGIN
14:28:24 829  	SELECT
14:28:24 830  	  PROCS_GROUP_ACCOUNT_V23.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
14:28:24 831  	FROM dual;
14:28:24 832  EXCEPTION
14:28:24 833  WHEN OTHERS THEN
14:28:24 834  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 835  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 836  END GET_NUM_OCCUPIED_GROUP_SEATS;
14:28:24 837  
14:28:24 838  
14:28:24 839  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
14:28:24 840  	in_group_account_id   IN NUMBER
14:28:24 841  ) RETURN NUMBER IS
14:28:24 842  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
14:28:24 843  num_seats NUMBER;
14:28:24 844  BEGIN
14:28:24 845  	SELECT
14:28:24 846  	  COUNT(1) INTO num_seats
14:28:24 847  	FROM
14:28:24 848  	  SUBSCRIPTION_SHARE
14:28:24 849  	WHERE
14:28:24 850  	  GROUP_ACCOUNT_ID = in_group_account_id AND
14:28:24 851  	  SYSDATE BETWEEN START_DATE AND END_DATE;
14:28:24 852  	RETURN num_seats;
14:28:24 853  EXCEPTION
14:28:24 854  WHEN OTHERS THEN
14:28:24 855  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 856  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 857  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
14:28:24 858  
14:28:24 859  -- *********************************************************************
14:28:24 860  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
14:28:24 861  -- *********************************************************************
14:28:24 862  -- I'm debating if this should be in a different package, but right now
14:28:24 863  -- I'm too lazy to move this else where.
14:28:24 864  -- *********************************************************************
14:28:24 865  
14:28:24 866  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
14:28:24 867  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:24 868  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:28:24 869  ) AS
14:28:24 870  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
14:28:24 871  BEGIN
14:28:24 872  	  PROCS_GROUP_ACCOUNT_CRU_V23.DISABLE_IP_RANGES_BY_GA_ID(
14:28:24 873  	    in_group_account_id => in_group_account_id,
14:28:24 874  	    in_updated_by => in_updated_by
14:28:24 875  	  );
14:28:24 876  EXCEPTION
14:28:24 877  WHEN OTHERS THEN
14:28:24 878  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 879  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 880  END DISABLE_IP_RANGES_BY_GA_ID;
14:28:24 881  
14:28:24 882  PROCEDURE DISABLE_IP_RANGE_BY_ID (
14:28:24 883  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
14:28:24 884  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
14:28:24 885  ) AS
14:28:24 886  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
14:28:24 887  BEGIN
14:28:24 888  	  PROCS_GROUP_ACCOUNT_CRU_V23.DISABLE_IP_RANGE_BY_ID(
14:28:24 889  	    in_id => in_id,
14:28:24 890  	    in_updated_by => in_updated_by
14:28:24 891  	  );
14:28:24 892  EXCEPTION
14:28:24 893  WHEN OTHERS THEN
14:28:24 894  	IF SQLCODE = APP_EXCEPTION_CODES_V23.INVALID_PARAMETER THEN
14:28:24 895  	  RAISE;
14:28:24 896  	ELSE
14:28:24 897  	  PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 899  	END IF;
14:28:24 900  END DISABLE_IP_RANGE_BY_ID;
14:28:24 901  
14:28:24 902  PROCEDURE ADD_IP_RANGE (
14:28:24 903  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
14:28:24 904  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
14:28:24 905  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
14:28:24 906  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
14:28:24 907  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
14:28:24 908  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
14:28:24 909  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
14:28:24 910  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
14:28:24 911  ) AS
14:28:24 912  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
14:28:24 913  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
14:28:24 914  var_is_dupe NUMBER(1);
14:28:24 915  NOT_GL EXCEPTION;
14:28:24 916  DUPE EXCEPTION;
14:28:24 917  BEGIN
14:28:24 918  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
14:28:24 919  	  FROM
14:28:24 920  	    GROUP_ACCOUNT,
14:28:24 921  	    SUBSCRIPTION,
14:28:24 922  	    OFFER_CHAIN
14:28:24 923  	  WHERE
14:28:24 924  	    GROUP_ACCOUNT.ID = in_group_account_id AND
14:28:24 925  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
14:28:24 926  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 927  	  ;
14:28:24 928  	  IF(var_ga_type != 'GL') THEN
14:28:24 929  	    RAISE NOT_GL;
14:28:24 930  	  END IF;
14:28:24 931  
14:28:24 932  	  PROCS_GROUP_ACCOUNT_CRU_V23.ADD_IP_RANGE(
14:28:24 933  	    in_group_account_id => in_group_account_id,
14:28:24 934  	    in_minimum_ip_string => in_minimum_ip_string,
14:28:24 935  	    in_minimum_ip_low => in_minimum_ip_low,
14:28:24 936  	    in_minimum_ip_high => in_minimum_ip_high,
14:28:24 937  	    in_maximum_ip_string => in_maximum_ip_string,
14:28:24 938  	    in_maximum_ip_low => in_maximum_ip_low,
14:28:24 939  	    in_maximum_ip_high => in_maximum_ip_high,
14:28:24 940  	    in_created_by => in_created_by
14:28:24 941  	  );
14:28:24 942  
14:28:24 943  	  -- Check for overlapping ip address range after insert.  Note that if another
14:28:24 944  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
14:28:24 945  	  SELECT count(1) into var_is_dupe
14:28:24 946  	  FROM
14:28:24 947  	    GROUP_ACCOUNT_IP_RANGE
14:28:24 948  	  WHERE
14:28:24 949  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V23.GROUP_ACC_IP_RNG_ACTIVE AND
14:28:24 950  		((
14:28:24 951  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
14:28:24 952  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
14:28:24 953  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
14:28:24 954  		) OR
14:28:24 955  
14:28:24 956  		(
14:28:24 957  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
14:28:24 958  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
14:28:24 959  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
14:28:24 960  		)) AND
14:28:24 961  	    ROWNUM < 3;
14:28:24 962  
14:28:24 963  	  If(var_is_dupe > 1) THEN
14:28:24 964  	    RAISE DUPE;
14:28:24 965  	  END IF;
14:28:24 966  EXCEPTION
14:28:24 967  WHEN NOT_GL THEN
14:28:24 968  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 969  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
14:28:24 970  WHEN DUPE THEN
14:28:24 971  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 972  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
14:28:24 973  WHEN OTHERS THEN
14:28:24 974  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 975  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 976  END ADD_IP_RANGE;
14:28:24 977  
14:28:24 978  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
14:28:24 979  	in_group_account_id IN NUMBER,
14:28:24 980  	out_group_id OUT NUMBER
14:28:24 981  ) AS
14:28:24 982  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
14:28:24 983  BEGIN
14:28:24 984  	SELECT
14:28:24 985  	  a.group_id into out_group_id
14:28:24 986  	FROM
14:28:24 987  	  account a,
14:28:24 988  	  subscription s,
14:28:24 989  	  group_account ga
14:28:24 990  	WHERE
14:28:24 991  	  a.id = s.account_id and
14:28:24 992  	  s.id = ga.subscription_id and
14:28:24 993  	  ga.id = in_group_account_id and
14:28:24 994  	  rownum < 2
14:28:24 995  	;
14:28:24 996  EXCEPTION
14:28:24 997  WHEN NO_DATA_FOUND THEN
14:28:24 998  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 999  	  SPROC_NAME, 'Bad group_account_id');
14:28:24 1000  WHEN OTHERS THEN
14:28:24 1001  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1002  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1003  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
14:28:24 1004  
14:28:24 1005  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
14:28:24 1006  	 in_group_account_ip_range_id IN NUMBER,
14:28:24 1007  	 out_group_id OUT NUMBER
14:28:24 1008  ) AS
14:28:24 1009  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
14:28:24 1010  BEGIN
14:28:24 1011  	 SELECT
14:28:24 1012  	   a.group_id into out_group_id
14:28:24 1013  	 FROM
14:28:24 1014  	   account a,
14:28:24 1015  	   subscription s,
14:28:24 1016  	   group_account ga,
14:28:24 1017  	   group_account_ip_range ir
14:28:24 1018  	 WHERE
14:28:24 1019  	   a.id = s.account_id and
14:28:24 1020  	   s.id = ga.subscription_id and
14:28:24 1021  	   ga.id = ir.group_account_id and
14:28:24 1022  	   ir.id = in_group_account_ip_range_id and
14:28:24 1023  	   rownum < 2
14:28:24 1024  	 ;
14:28:24 1025  EXCEPTION
14:28:24 1026  WHEN NO_DATA_FOUND THEN
14:28:24 1027  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1028  	   SPROC_NAME, 'Bad group_account_ip_range_id');
14:28:24 1029  WHEN OTHERS THEN
14:28:24 1030  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1031  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1032  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
14:28:24 1033  
14:28:24 1034  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
14:28:24 1035  	 in_group_account_email_dom_id IN NUMBER,
14:28:24 1036  	 out_group_id OUT NUMBER
14:28:24 1037  ) AS
14:28:24 1038  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
14:28:24 1039  BEGIN
14:28:24 1040  	 SELECT
14:28:24 1041  	   a.group_id into out_group_id
14:28:24 1042  	 FROM
14:28:24 1043  	   account a,
14:28:24 1044  	   subscription s,
14:28:24 1045  	   group_account ga,
14:28:24 1046  	   group_account_email_domain ir
14:28:24 1047  	 WHERE
14:28:24 1048  	   a.id = s.account_id and
14:28:24 1049  	   s.id = ga.subscription_id and
14:28:24 1050  	   ga.id = ir.group_account_id and
14:28:24 1051  	   ir.id = in_group_account_email_dom_id and
14:28:24 1052  	   rownum < 2
14:28:24 1053  	 ;
14:28:24 1054  EXCEPTION
14:28:24 1055  WHEN NO_DATA_FOUND THEN
14:28:24 1056  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 1057  	   SPROC_NAME, 'Bad group_account_ip_range_id');
14:28:24 1058  WHEN OTHERS THEN
14:28:24 1059  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 1060  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 1061  END GET_GRP_ID_BY_EMAIL_DOM_ID;
14:28:24 1062  
14:28:24 1063  PROCEDURE UPDATE_GROUP_ACCOUNT (
14:28:24 1064  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
14:28:24 1065  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
14:28:24 1066  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
14:28:24 1067  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
14:28:24 1068  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
14:28:24 1069  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
14:28:24 1070  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:28:24 1071  ) AS
14:28:24 1072  BEGIN
14:28:24 1073  	 PROCS_GROUP_ACCOUNT_CRU_V23.UPDATE_GROUP_ACCOUNT(
14:28:24 1074  	   in_group_account_id => in_group_account_id,
14:28:24 1075  	   in_group_name => in_group_name,
14:28:24 1076  	   in_first_name => in_first_name,
14:28:24 1077  	   in_last_name => in_last_name,
14:28:24 1078  	   in_email => in_email,
14:28:24 1079  	   in_phone => in_phone,
14:28:24 1080  	   in_updated_by => in_updated_by
14:28:24 1081  	 );
14:28:24 1082  END UPDATE_GROUP_ACCOUNT;
14:28:24 1083  
14:28:24 1084  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
14:28:24 1085  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
14:28:24 1086  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
14:28:24 1087  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
14:28:24 1088  ) AS
14:28:24 1089  BEGIN
14:28:24 1090  	 PROCS_GROUP_ACCOUNT_CRU_V23.UPDATE_GROUP_ACCOUNT_SEATS(
14:28:24 1091  	   in_group_account_id => in_group_account_id,
14:28:24 1092  	   in_seats => in_seats,
14:28:24 1093  	   in_updated_by => in_updated_by
14:28:24 1094  	 );
14:28:24 1095  END UPDATE_GROUP_ACCOUNT_SEATS;
14:28:24 1096  
14:28:24 1097  END PROCS_GROUP_ACCOUNT_V23;
14:28:24 1098  .
14:28:24 SQL> /

Package body created.

Elapsed: 00:00:00.09
14:28:24 SQL> 
14:28:24 SQL> prompt Compiling body for procs_test.sql
Compiling body for procs_test.sql
14:28:24 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V23" AS
14:28:24   2  
14:28:24   3  PROCEDURE TEST_CLEAR_ALL IS
14:28:24   4  BEGIN
14:28:24   5  	DELETE FROM TAX_ADJUSTMENT;
14:28:24   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
14:28:24   7  	DELETE FROM INVOICE_ADJUSTMENT;
14:28:24   8  	DELETE FROM LICENSE;
14:28:24   9  	DELETE FROM OFFER_OFFER_CHAIN;
14:28:24  10  	delete from offer_product_offering;
14:28:24  11  	delete from tax;
14:28:24  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
14:28:24  13  	delete from discount_line_item; -- ?
14:28:24  14  	delete from discount; -- ?
14:28:24  15  	DELETE FROM LINE_ITEM;
14:28:24  16  	DELETE FROM PRODUCT_OFFERING;
14:28:24  17  	DELETE FROM PRODUCT;
14:28:24  18  	DELETE FROM INVOICE_NOTE;
14:28:24  19  	DELETE FROM GIFT_CERTIFICATE;
14:28:24  20  	DELETE FROM OFFER;
14:28:24  21  	DELETE FROM OFFER_CHAIN_META_DATA;
14:28:24  22  	DELETE FROM SUBSCRIPTION_NOTE;
14:28:24  23  	DELETE FROM SUBSCRIPTION_META_DATA;
14:28:24  24  	DELETE FROM SUBSCRIPTION;
14:28:24  25  	DELETE FROM CREDIT_CARD;
14:28:24  26  	DELETE FROM FLAGGED_ACCOUNTS;
14:28:24  27  	DELETE FROM ACCOUNT_NOTE;
14:28:24  28  	DELETE FROM ACCOUNT_LOCK;
14:28:24  29  	DELETE FROM ACCOUNT;
14:28:24  30  	DELETE FROM CHARGE;
14:28:24  31  	DELETE FROM TRANSACTION_ATTEMPT;
14:28:24  32  	DELETE FROM CHARGEBACK;
14:28:24  33  	DELETE FROM TRANSACTION;
14:28:24  34  	DELETE FROM INVOICE_NOTE;
14:28:24  35  	DELETE FROM INVOICE;
14:28:24  36  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
14:28:24  37  	DELETE FROM OFFER_CHAIN;
14:28:24  38  END TEST_CLEAR_ALL;
14:28:24  39  
14:28:24  40  PROCEDURE TEST_CLEAR_PRODUCTS AS
14:28:24  41  BEGIN
14:28:24  42  	DELETE FROM OFFER_OFFER_CHAIN;
14:28:24  43  	DELETE FROM OFFER_PRODUCT_OFFERING;
14:28:24  44  	DELETE FROM TAX;
14:28:24  45  	DELETE FROM PRODUCT_OFFERING;
14:28:24  46  	DELETE FROM PRODUCT;
14:28:24  47  	DELETE FROM OFFER;
14:28:24  48  	DELETE FROM OFFER_CHAIN_META_DATA;
14:28:24  49  	DELETE FROM OFFER_CHAIN;
14:28:24  50  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
14:28:24  51  END;
14:28:24  52  
14:28:24  53  /******************************************/
14:28:24  54  
14:28:24  55  PROCEDURE TEST_GET_ACCOUNT (
14:28:24  56  	in_group_id	IN NUMBER,
14:28:24  57  	out_result_set	OUT SYS_REFCURSOR
14:28:24  58  ) AS
14:28:24  59  BEGIN
14:28:24  60  
14:28:24  61  	OPEN out_result_set FOR
14:28:24  62  	SELECT *
14:28:24  63  	FROM
14:28:24  64  	  ACCOUNT
14:28:24  65  	WHERE
14:28:24  66  	  ACCOUNT.GROUP_ID = in_group_id;
14:28:24  67  
14:28:24  68  END TEST_GET_ACCOUNT;
14:28:24  69  
14:28:24  70  /*******************************************/
14:28:24  71  
14:28:24  72  PROCEDURE TEST_GET_SUBSCRIPTION (
14:28:24  73  	in_subscription_id IN NUMBER,
14:28:24  74  	out_result_set	   OUT SYS_REFCURSOR
14:28:24  75  ) AS
14:28:24  76  BEGIN
14:28:24  77  	OPEN out_result_set FOR
14:28:24  78  	SELECT *
14:28:24  79  	FROM
14:28:24  80  	  SUBSCRIPTION
14:28:24  81  	WHERE
14:28:24  82  	  SUBSCRIPTION.ID = in_subscription_id;
14:28:24  83  
14:28:24  84  END TEST_GET_SUBSCRIPTION;
14:28:24  85  
14:28:24  86  /***************************************************/
14:28:24  87  
14:28:24  88  PROCEDURE TEST_DELETE_INVOICE (
14:28:24  89  	in_invoice_id IN NUMBER
14:28:24  90  ) AS
14:28:24  91  var_line_item_id_set SYS_REFCURSOR;
14:28:24  92  var_line_item_id	   NUMBER;
14:28:24  93  
14:28:24  94  var_charge_id_set  SYS_REFCURSOR;
14:28:24  95  var_charge_id	 NUMBER;
14:28:24  96  var_transaction_id NUMBER;
14:28:24  97  BEGIN
14:28:24  98  	-- GET ACCOUNT'S LINE_ITEMS
14:28:24  99  	OPEN var_line_item_id_set FOR
14:28:24 100  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
14:28:24 101  	LOOP
14:28:24 102  	  FETCH var_line_item_id_set into var_line_item_id;
14:28:24 103  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
14:28:24 104  
14:28:24 105  	  -- DELETE ADJUSTMENTS
14:28:24 106  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
14:28:24 107  	  LOOP
14:28:24 108  
14:28:24 109  	    -- DELETE DISCOUNT ADJUSTMENTS
14:28:24 110  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
14:28:24 111  
14:28:24 112  	    -- DELETE TAX ADJUSTMENTS
14:28:24 113  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
14:28:24 114  	  END LOOP;
14:28:24 115  
14:28:24 116  	  -- DELETE LINE ITEM ADJUSTMENTS
14:28:24 117  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
14:28:24 118  
14:28:24 119  	  -- DELETE DISCOUNT_LINE_ITEM
14:28:24 120  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
14:28:24 121  
14:28:24 122  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
14:28:24 123  
14:28:24 124  	  -- DELETE LINE ITEM
14:28:24 125  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
14:28:24 126  
14:28:24 127  	END LOOP;
14:28:24 128  
14:28:24 129  	-- DELETE INVOICE ADJUSTMENTS
14:28:24 130  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
14:28:24 131  
14:28:24 132  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
14:28:24 133  	OPEN var_charge_id_set FOR
14:28:24 134  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
14:28:24 135  	LOOP
14:28:24 136  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
14:28:24 137  	  EXIT WHEN var_charge_id_set%NOTFOUND;
14:28:24 138  	  -- DELETE CHARGEBACK
14:28:24 139  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
14:28:24 140  
14:28:24 141  	  -- DELETE TRANSACTION ATTEMP
14:28:24 142  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
14:28:24 143  
14:28:24 144  	  -- DELETE CHARGE
14:28:24 145  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
14:28:24 146  
14:28:24 147  	  -- DELETE TRANSACTION
14:28:24 148  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
14:28:24 149  	END LOOP;
14:28:24 150  
14:28:24 151  	-- DELETE INVOICE NOTES
14:28:24 152  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
14:28:24 153  
14:28:24 154  	-- DELETE INVOICE
14:28:24 155  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
14:28:24 156  END;
14:28:24 157  
14:28:24 158  PROCEDURE TEST_DELETE_USER_ACCOUNT (
14:28:24 159  	in_group_id IN NUMBER
14:28:24 160  ) AS
14:28:24 161  -- VARIABLES
14:28:24 162  var_account_id NUMBER;
14:28:24 163  
14:28:24 164  -- CURSORS
14:28:24 165  var_subscription_id_set SYS_REFCURSOR;
14:28:24 166  var_subscription_id     NUMBER;
14:28:24 167  
14:28:24 168  var_license_id_set SYS_REFCURSOR;
14:28:24 169  var_license_id	 NUMBER;
14:28:24 170  var_invoice_id	 NUMBER;
14:28:24 171  
14:28:24 172  var_gift_certificate_id_set SYS_REFCURSOR;
14:28:24 173  var_gift_certificate_id	  NUMBER;
14:28:24 174  var_gc_purchase_invoice_id  NUMBER;
14:28:24 175  BEGIN
14:28:24 176  
14:28:24 177   /*FOR f_account in (
14:28:24 178  	  select id from account where group_id = in_group_id
14:28:24 179  	)
14:28:24 180  	loop
14:28:24 181  
14:28:24 182  	  -- delete account
14:28:24 183  	  delete from account where id = f_account.id;
14:28:24 184  
14:28:24 185  	end loop;*/
14:28:24 186  
14:28:24 187  	BEGIN
14:28:24 188  	  SELECT
14:28:24 189  	    ACCOUNT.ID into var_account_id
14:28:24 190  	  FROM
14:28:24 191  	    ACCOUNT
14:28:24 192  	  WHERE
14:28:24 193  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 194  	  EXCEPTION
14:28:24 195  	    WHEN NO_DATA_FOUND THEN
14:28:24 196  	      -- Nothing to do
14:28:24 197  	      RETURN;
14:28:24 198  	END;
14:28:24 199  
14:28:24 200  	-- GET ACCOUNT'S SUBSCRIPTIONS
14:28:24 201  	OPEN var_subscription_id_set FOR
14:28:24 202  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
14:28:24 203  	LOOP
14:28:24 204  	  FETCH var_subscription_id_set into var_subscription_id;
14:28:24 205  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
14:28:24 206  
14:28:24 207  	  -- GET ACCOUNT'S LICENSES AND INVOICES
14:28:24 208  	  OPEN var_license_id_set FOR
14:28:24 209  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
14:28:24 210  	  LOOP
14:28:24 211  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
14:28:24 212  	    EXIT WHEN var_license_id_set%NOTFOUND;
14:28:24 213  
14:28:24 214  
14:28:24 215  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
14:28:24 216  	    OPEN var_gift_certificate_id_set FOR
14:28:24 217  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
14:28:24 218  	    LOOP
14:28:24 219  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
14:28:24 220  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
14:28:24 221  
14:28:24 222  	      -- DELETE GIFT_CERTIFICATE
14:28:24 223  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
14:28:24 224  
14:28:24 225  	      -- DELETE LICENSE
14:28:24 226  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
14:28:24 227  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
14:28:24 228  	      END IF;
14:28:24 229  
14:28:24 230  	    END LOOP;
14:28:24 231  
14:28:24 232  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
14:28:24 233  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
14:28:24 234  
14:28:24 235  	    -- DELETE LICENSE
14:28:24 236  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
14:28:24 237  
14:28:24 238  	    -- DELETE INVOICE
14:28:24 239  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
14:28:24 240  	      TEST_DELETE_INVOICE(var_invoice_id);
14:28:24 241  	    END IF;
14:28:24 242  	  END LOOP;
14:28:24 243  
14:28:24 244  	  -- DELETE SUBSCRIPTION_NOTE
14:28:24 245  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
14:28:24 246  
14:28:24 247  	  -- DELETE SUBSCRIPTION META_DATA
14:28:24 248  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
14:28:24 249  
14:28:24 250  	  -- DELETE SUBSCRIPTION
14:28:24 251  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
14:28:24 252  	END LOOP;
14:28:24 253  
14:28:24 254  	-- DELETE CREDIT_CARDS
14:28:24 255  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
14:28:24 256  
14:28:24 257  	-- DELETE PAYPAL
14:28:24 258  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
14:28:24 259  
14:28:24 260  	-- DELETE FLAGS
14:28:24 261  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
14:28:24 262  
14:28:24 263  	-- DELETE ACCOUNT NOTES
14:28:24 264  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
14:28:24 265  
14:28:24 266  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
14:28:24 267  	OPEN var_gift_certificate_id_set FOR
14:28:24 268  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
14:28:24 269  	LOOP
14:28:24 270  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
14:28:24 271  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
14:28:24 272  
14:28:24 273  	  -- DELETE GIFT CERTIFICATE
14:28:24 274  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
14:28:24 275  
14:28:24 276  	  -- DELETE INVOICE
14:28:24 277  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
14:28:24 278  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
14:28:24 279  	  END IF;
14:28:24 280  	END LOOP;
14:28:24 281  
14:28:24 282  	-- DELETE LOCKS
14:28:24 283  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
14:28:24 284  
14:28:24 285  	-- DELETE ACCOUNT
14:28:24 286  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
14:28:24 287  
14:28:24 288  END TEST_DELETE_USER_ACCOUNT;
14:28:24 289  
14:28:24 290  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
14:28:24 291  	in_start_group_id IN NUMBER,
14:28:24 292  	in_end_group_id   IN NUMBER
14:28:24 293  ) IS
14:28:24 294   gid ACCOUNT.GROUP_ID%TYPE;
14:28:24 295   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
14:28:24 296  BEGIN
14:28:24 297  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
14:28:24 298  	/*
14:28:24 299  	FOR var_group_id IN in_start_group_id..in_end_group_id
14:28:24 300  	LOOP
14:28:24 301  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
14:28:24 302  	END LOOP;*/
14:28:24 303  	OPEN c(in_start_group_id, in_end_group_id);
14:28:24 304  	WHILE c%ISOPEN LOOP
14:28:24 305  	  FETCH c INTO gid;
14:28:24 306  	  IF c%NOTFOUND THEN
14:28:24 307  	   CLOSE c;
14:28:24 308  	  END IF;
14:28:24 309  	  TEST_DELETE_USER_ACCOUNT(gid);
14:28:24 310  	END LOOP;
14:28:24 311  END;
14:28:24 312  
14:28:24 313  /**********************************************************/
14:28:24 314  
14:28:24 315  FUNCTION TEST_IS_INVOICE_EXISTS(
14:28:24 316  /*
14:28:24 317  1 - exists
14:28:24 318  0 - not exists
14:28:24 319  */
14:28:24 320  	in_invoice_id IN NUMBER
14:28:24 321  ) RETURN NUMBER AS
14:28:24 322  var_invoice_count NUMBER;
14:28:24 323  BEGIN
14:28:24 324  	SELECT
14:28:24 325  	  COUNT(*) into var_invoice_count
14:28:24 326  	FROM
14:28:24 327  	  INVOICE
14:28:24 328  	WHERE
14:28:24 329  	  INVOICE.ID = in_invoice_id;
14:28:24 330  	IF var_invoice_count = 0 THEN
14:28:24 331  	  RETURN 0;
14:28:24 332  	ELSE
14:28:24 333  	  RETURN 1;
14:28:24 334  	END IF;
14:28:24 335  END;
14:28:24 336  
14:28:24 337  PROCEDURE TEST_GET_INVOICE_INFO (
14:28:24 338  	in_invoice_id  IN NUMBER,
14:28:24 339  	out_result_set OUT SYS_REFCURSOR
14:28:24 340  ) AS
14:28:24 341  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
14:28:24 342  BEGIN
14:28:24 343  
14:28:24 344  	 OPEN out_result_set FOR SELECT
14:28:24 345  	    in_invoice_id AS "INVOICE_ID",
14:28:24 346  	    INVOICE.INVOICE_STATUS_ID,
14:28:24 347  	    PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
14:28:24 348  	    CHARGE.ID AS "CHARGE_ID",
14:28:24 349  	    CHARGE.CHARGE_AMOUNT,
14:28:24 350  	    CHARGE.TRANSACTION_ID,
14:28:24 351  	    TRANSACTION.TRANSACTION_STATUS_ID
14:28:24 352  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
14:28:24 353  
14:28:24 354  END TEST_GET_INVOICE_INFO;
14:28:24 355  
14:28:24 356  /******************************************************************************/
14:28:24 357  
14:28:24 358  PROCEDURE TEST_DELETE_OFFER_CHAIN(
14:28:24 359  	in_offer_chain_id in number
14:28:24 360  ) as
14:28:24 361  begin
14:28:24 362  
14:28:24 363  	for v_offer_chain in (
14:28:24 364  	  select och.id from offer_chain och where och.id = in_offer_chain_id
14:28:24 365  	)
14:28:24 366  	loop
14:28:24 367  
14:28:24 368  	  for v_offer in (
14:28:24 369  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
14:28:24 370  	  )
14:28:24 371  	  loop
14:28:24 372  
14:28:24 373  	    for v_product_offering in (
14:28:24 374  	      select
14:28:24 375  		product_offering.id,
14:28:24 376  		product_offering.product_id
14:28:24 377  	      from
14:28:24 378  		offer_product_offering
14:28:24 379  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
14:28:24 380  	      where offer_product_offering.offer_id = v_offer.id
14:28:24 381  	    )
14:28:24 382  	    loop
14:28:24 383  
14:28:24 384  	      -- delete product
14:28:24 385  	      delete from product where id = v_product_offering.product_id;
14:28:24 386  
14:28:24 387  	      -- delete product_offering
14:28:24 388  	      delete from product_offering where id = v_product_offering.id;
14:28:24 389  
14:28:24 390  	    end loop;
14:28:24 391  
14:28:24 392  	    -- delete data from offer_product_offering table
14:28:24 393  	    delete from offer_product_offering where offer_id = v_offer.id;
14:28:24 394  
14:28:24 395  	    -- delete data from offer_offer_chain table
14:28:24 396  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
14:28:24 397  
14:28:24 398  	    -- delete offer
14:28:24 399  	    delete from offer where id = v_offer.id;
14:28:24 400  
14:28:24 401  	  end loop;
14:28:24 402  
14:28:24 403  	  -- delete offer_chain_eligibility
14:28:24 404  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
14:28:24 405  
14:28:24 406  	  -- delete metadata
14:28:24 407  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
14:28:24 408  
14:28:24 409  	  -- delete offer chain
14:28:24 410  	  delete from offer_chain where id = v_offer_chain.id;
14:28:24 411  
14:28:24 412  	end loop;
14:28:24 413  
14:28:24 414  end;
14:28:24 415  
14:28:24 416  END PROCS_TEST_V23;
14:28:24 417  .
14:28:24 SQL> /

Package body created.

Elapsed: 00:00:00.07
14:28:24 SQL> 
14:28:24 SQL> prompt Compiling body for procs_account.sql
Compiling body for procs_account.sql
14:28:24 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V23" AS
14:28:24   2  
14:28:24   3  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
14:28:24   4  	in_group_id    IN  NUMBER,
14:28:24   5  	out_result_set OUT SYS_REFCURSOR
14:28:24   6  ) AS
14:28:24   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'INVOICE_IDS_BY_GROUP_ID';
14:28:24   8  BEGIN
14:28:24   9  	OPEN out_result_set FOR
14:28:24  10  	SELECT
14:28:24  11  	  Invoice.Id
14:28:24  12  	FROM
14:28:24  13  	  LICENSE
14:28:24  14  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24  15  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:28:24  16  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24  17  	  INNER JOIN INVOICE_STATUS ON INVOICE.INVOICE_STATUS_ID = INVOICE_STATUS.ID
14:28:24  18  	Where
14:28:24  19  	  SUBSCRIPTION.ACCOUNT_ID IN (SELECT ID FROM ACCOUNT WHERE GROUP_ID = in_group_id) AND
14:28:24  20  	  INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V23.INVOICE_OPEN;
14:28:24  21  END INVOICE_IDS_BY_GROUP_ID;
14:28:24  22  
14:28:24  23  FUNCTION GET_GRACE_START_DATE(
14:28:24  24  	in_subscription_id IN NUMBER
14:28:24  25  ) RETURN DATE AS
14:28:24  26  SPROC_NAME	   CONSTANT VARCHAR2(32) := 'GET_GRACE_START_DATE';
14:28:24  27  grace_start_date_var DATE;
14:28:24  28  BEGIN
14:28:24  29  	SELECT GRACE_START_DATE into grace_start_date_var
14:28:24  30  	FROM
14:28:24  31  	  (
14:28:24  32  	    SELECT
14:28:24  33  	      GRACE_START_DATE
14:28:24  34  	    FROM
14:28:24  35  	      LICENSE
14:28:24  36  	    WHERE
14:28:24  37  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:28:24  38  	    ORDER BY
14:28:24  39  	      LICENSE.END_DATE DESC
14:28:24  40  	  )
14:28:24  41  	WHERE
14:28:24  42  	  ROWNUM <= 1;
14:28:24  43  
14:28:24  44  	RETURN grace_start_date_var;
14:28:24  45  END GET_GRACE_START_DATE;
14:28:24  46  
14:28:24  47  FUNCTION GET_GRACE_END_DATE(
14:28:24  48  	in_subscription_id IN NUMBER
14:28:24  49  ) RETURN DATE AS
14:28:24  50  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'GET_GRACE_END_DATE';
14:28:24  51  grace_end_date_var DATE;
14:28:24  52  BEGIN
14:28:24  53  	SELECT GRACE_END_DATE into grace_end_date_var
14:28:24  54  	FROM
14:28:24  55  	  (
14:28:24  56  	    SELECT
14:28:24  57  	      GRACE_END_DATE
14:28:24  58  	    FROM
14:28:24  59  	      LICENSE
14:28:24  60  	    WHERE
14:28:24  61  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
14:28:24  62  	    ORDER BY
14:28:24  63  	      LICENSE.END_DATE DESC
14:28:24  64  	  )
14:28:24  65  	WHERE ROWNUM <= 1;
14:28:24  66  
14:28:24  67  	RETURN grace_end_date_var;
14:28:24  68  END GET_GRACE_END_DATE;
14:28:24  69  
14:28:24  70  
14:28:24  71  
14:28:24  72  PROCEDURE ANNOTATE_ACCOUNT (
14:28:24  73  	in_group_id   IN  NUMBER,
14:28:24  74  	in_agent_id   IN  NUMBER,
14:28:24  75  	in_note       IN  VARCHAR2,
14:28:24  76  	in_created_by IN  VARCHAR2
14:28:24  77  ) AS
14:28:24  78  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
14:28:24  79  -- VARIABLES
14:28:24  80  var_account_id	  NUMBER;
14:28:24  81  var_account_note_id NUMBER;
14:28:24  82  -- EXCEPTIONS
14:28:24  83  BAD_ACCOUNT_ID EXCEPTION;
14:28:24  84  BEGIN
14:28:24  85  
14:28:24  86  	-- Get account id
14:28:24  87  	BEGIN
14:28:24  88  	  SELECT
14:28:24  89  	    ACCOUNT.ID into var_account_id
14:28:24  90  	  FROM
14:28:24  91  	    ACCOUNT
14:28:24  92  	  WHERE
14:28:24  93  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24  94  	  EXCEPTION
14:28:24  95  	    WHEN NO_DATA_FOUND THEN
14:28:24  96  	      RAISE BAD_ACCOUNT_ID;
14:28:24  97  	END;
14:28:24  98  
14:28:24  99  	-- Insert new row into ACCOUNT_NOTE table
14:28:24 100  	PROCS_ACCOUNT_CRU_V23.CREATE_ACCOUNT_NOTE(
14:28:24 101  	  inout_account_note_id => var_account_note_id,
14:28:24 102  	  in_agent_id		=> in_agent_id,
14:28:24 103  	  in_account_id 	=> var_account_id,
14:28:24 104  	  in_note		=> in_note,
14:28:24 105  	  in_created_by 	=> in_created_by
14:28:24 106  	);
14:28:24 107  
14:28:24 108  EXCEPTION
14:28:24 109  WHEN BAD_ACCOUNT_ID THEN
14:28:24 110  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 111  	  SPROC_NAME, 'No such group id');
14:28:24 112  WHEN OTHERS THEN
14:28:24 113  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 114  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 115  END ANNOTATE_ACCOUNT;
14:28:24 116  
14:28:24 117  PROCEDURE ASSERT_ACCOUNT_EXISTS (
14:28:24 118  	in_group_id IN	NUMBER,
14:28:24 119  	out_exists  OUT NUMBER
14:28:24 120  ) AS
14:28:24 121  -- VARIABLES
14:28:24 122  var_found_id  NUMBER;
14:28:24 123  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
14:28:24 124  BEGIN
14:28:24 125  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
14:28:24 126  	out_exists := GLOBAL_CONSTANTS_V23.TRUE;
14:28:24 127  EXCEPTION
14:28:24 128  WHEN NO_DATA_FOUND THEN
14:28:24 129  	out_exists := GLOBAL_CONSTANTS_V23.FALSE;
14:28:24 130  WHEN OTHERS THEN
14:28:24 131  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 133  END ASSERT_ACCOUNT_EXISTS;
14:28:24 134  
14:28:24 135  PROCEDURE DISABLE_ACCOUNT (
14:28:24 136  	in_group_id   IN NUMBER,
14:28:24 137  	in_updated_by IN VARCHAR2,
14:28:24 138  	in_note       IN VARCHAR2,
14:28:24 139  	in_agent_id   IN NUMBER
14:28:24 140  ) AS
14:28:24 141  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
14:28:24 142  var_account_id	      NUMBER;
14:28:24 143  current_account_status  NUMBER;
14:28:24 144  
14:28:24 145  var_active_subscriptions_num NUMBER;
14:28:24 146  var_pending_invoices_num	   NUMBER;
14:28:24 147  
14:28:24 148  -- EXCEPTIONS
14:28:24 149  BAD_ACOUNT_ID		EXCEPTION;
14:28:24 150  BAD_CURRENT_ACC_STATUS	EXCEPTION;
14:28:24 151  PENDING_INVOICES_FOUND	EXCEPTION;
14:28:24 152  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
14:28:24 153  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
14:28:24 154  EXCEPTION_MESSAGE 	VARCHAR2(1024);
14:28:24 155  BEGIN
14:28:24 156  
14:28:24 157  	-- Get account's status and id
14:28:24 158  	BEGIN
14:28:24 159  	  SELECT
14:28:24 160  	    ACCOUNT.ACCOUNT_STATUS_ID,
14:28:24 161  	    ACCOUNT.ID
14:28:24 162  	  INTO
14:28:24 163  	    current_account_status,
14:28:24 164  	    var_account_id
14:28:24 165  	  FROM ACCOUNT
14:28:24 166  	  WHERE
14:28:24 167  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 168  	  EXCEPTION
14:28:24 169  	    WHEN NO_DATA_FOUND THEN
14:28:24 170  	      RAISE BAD_ACOUNT_ID;
14:28:24 171  	END;
14:28:24 172  
14:28:24 173  	-- For now, we can disable account whenever
14:28:24 174  	IF current_account_status = GLOBAL_STATUSES_V23.ACCOUNT_DISABLED THEN
14:28:24 175  	  RAISE BAD_CURRENT_ACC_STATUS;
14:28:24 176  	END IF;
14:28:24 177  
14:28:24 178  	-- Checks for out outstanding balances
14:28:24 179  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
14:28:24 180  	SELECT
14:28:24 181  	  COUNT(*) into var_pending_invoices_num
14:28:24 182  	FROM
14:28:24 183  	  LICENSE
14:28:24 184  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 185  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:28:24 186  	WHERE
14:28:24 187  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:24 188  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V23.INVOICE_OPEN FROM DUAL );
14:28:24 189  
14:28:24 190  	IF var_pending_invoices_num > 0 THEN
14:28:24 191  	  RAISE PENDING_INVOICES_FOUND;
14:28:24 192  	END IF;
14:28:24 193  
14:28:24 194  	SELECT
14:28:24 195  	  COUNT(*) into var_active_subscriptions_num
14:28:24 196  	FROM
14:28:24 197  	  SUBSCRIPTION
14:28:24 198  	WHERE
14:28:24 199  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:24 200  	  AND (
14:28:24 201  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE
14:28:24 202  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_SUSPENDED
14:28:24 203  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_IN_GRACE_PERIOD);
14:28:24 204  
14:28:24 205  	IF var_active_subscriptions_num > 0 THEN
14:28:24 206  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
14:28:24 207  	END IF;
14:28:24 208  
14:28:24 209  	PROCS_ACCOUNT_V23.UPDATE_ACCOUNT_STATUS(
14:28:24 210  	  in_account_id        => var_account_id,
14:28:24 211  	  in_account_status_id => GLOBAL_STATUSES_V23.ACCOUNT_DISABLED,
14:28:24 212  	  in_updated_by        => in_updated_by
14:28:24 213  	);
14:28:24 214  
14:28:24 215  	-- Annotate account
14:28:24 216  	IF in_note IS NOT NULL THEN
14:28:24 217  	  BEGIN
14:28:24 218  	    PROCS_ACCOUNT_V23.ANNOTATE_ACCOUNT(
14:28:24 219  	      in_group_id   => in_group_id,
14:28:24 220  	      in_agent_id   => in_agent_id,
14:28:24 221  	      in_note	    => in_note,
14:28:24 222  	      in_created_by => in_updated_by
14:28:24 223  	    );
14:28:24 224  	    EXCEPTION
14:28:24 225  	      WHEN OTHERS THEN
14:28:24 226  		EXCEPTION_MESSAGE := SQLERRM;
14:28:24 227  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
14:28:24 228  	  END;
14:28:24 229  	END IF;
14:28:24 230  
14:28:24 231  EXCEPTION
14:28:24 232  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
14:28:24 233  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 234  	  SPROC_NAME, 'Account has active or suspended subsciptions');
14:28:24 235  WHEN BAD_CURRENT_ACC_STATUS THEN
14:28:24 236  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 237  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
14:28:24 238  WHEN PENDING_INVOICES_FOUND THEN
14:28:24 239  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 240  	  SPROC_NAME, 'Opened/Pending invoices founded');
14:28:24 241  WHEN BAD_ACOUNT_ID THEN
14:28:24 242  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 243  	  SPROC_NAME, 'No such account');
14:28:24 244  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
14:28:24 245  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 246  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
14:28:24 247  WHEN OTHERS THEN
14:28:24 248  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 249  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 250  END DISABLE_ACCOUNT;
14:28:24 251  
14:28:24 252  PROCEDURE CREATE_ACTIVE_ACCOUNT(
14:28:24 253  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
14:28:24 254  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
14:28:24 255  	out_new_account_id OUT ACCOUNT.ID%TYPE
14:28:24 256  ) AS
14:28:24 257  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_ACTIVE_ACCOUNT';
14:28:24 258  var_count  NUMBER  := 0;
14:28:24 259  BEGIN
14:28:24 260  	SELECT COUNT(1) INTO var_count FROM ACCOUNT WHERE GROUP_ID = in_group_id;
14:28:24 261  
14:28:24 262  	IF (var_count = 0) THEN
14:28:24 263  	  PROCS_ACCOUNT_CRU_V23.CREATE_ACCOUNT(
14:28:24 264  	      out_account_id	    => out_new_account_id,
14:28:24 265  	      in_account_status_id  => GLOBAL_STATUSES_V23.ACCOUNT_ACTIVE,
14:28:24 266  	      in_group_id	    => in_group_id,
14:28:24 267  	      in_created_by	    => in_created_by,
14:28:24 268  	      in_system_category_id => GLOBAL_ENUMS_V23.SYSTEM_CATEGORY_LIVE
14:28:24 269  	  );
14:28:24 270  	ELSE
14:28:24 271  	  out_new_account_id := NULL;
14:28:24 272  	END IF;
14:28:24 273  END CREATE_ACTIVE_ACCOUNT;
14:28:24 274  
14:28:24 275  PROCEDURE REACTIVATE_ACCOUNT (
14:28:24 276  	in_group_id   IN NUMBER,
14:28:24 277  	in_updated_by IN VARCHAR2,
14:28:24 278  	in_note       IN VARCHAR2,
14:28:24 279  	in_agent_id   IN NUMBER
14:28:24 280  ) AS
14:28:24 281  -- VARIABLES
14:28:24 282  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
14:28:24 283  var_account_id	      NUMBER;
14:28:24 284  current_account_status  NUMBER;
14:28:24 285  
14:28:24 286  -- EXCEPTIONS
14:28:24 287  BAD_CURRENT_ACC_STATUS EXCEPTION;
14:28:24 288  CAN_NOT_CREATE_NOTE    EXCEPTION;
14:28:24 289  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:24 290  BEGIN
14:28:24 291  	-- Get account id, status
14:28:24 292  	SELECT
14:28:24 293  	  ACCOUNT.ACCOUNT_STATUS_ID,
14:28:24 294  	  ACCOUNT.ID
14:28:24 295  	INTO
14:28:24 296  	  current_account_status,
14:28:24 297  	  var_account_id
14:28:24 298  	FROM ACCOUNT
14:28:24 299  	WHERE
14:28:24 300  	  ACCOUNT.GROUP_ID = in_group_id;
14:28:24 301  
14:28:24 302  	IF current_account_status != GLOBAL_STATUSES_V23.ACCOUNT_FROZEN THEN
14:28:24 303  	  RAISE BAD_CURRENT_ACC_STATUS;
14:28:24 304  	END IF;
14:28:24 305  
14:28:24 306  	-- Change account status
14:28:24 307  	PROCS_ACCOUNT_V23.UPDATE_ACCOUNT_STATUS(
14:28:24 308  	  in_account_id        => var_account_id,
14:28:24 309  	  in_updated_by        => in_updated_by,
14:28:24 310  	  in_account_status_id => GLOBAL_STATUSES_V23.ACCOUNT_ACTIVE
14:28:24 311  	);
14:28:24 312  
14:28:24 313  	-- Add note
14:28:24 314  	BEGIN
14:28:24 315  	  PROCS_ACCOUNT_V23.ANNOTATE_ACCOUNT(
14:28:24 316  	    in_group_id   => in_group_id,
14:28:24 317  	    in_agent_id   => in_agent_id,
14:28:24 318  	    in_note	  => in_note,
14:28:24 319  	    in_created_by => in_updated_by
14:28:24 320  	  );
14:28:24 321  	  EXCEPTION
14:28:24 322  	    WHEN OTHERS THEN
14:28:24 323  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 324  	      RAISE CAN_NOT_CREATE_NOTE;
14:28:24 325  	END;
14:28:24 326  
14:28:24 327  EXCEPTION
14:28:24 328  WHEN BAD_CURRENT_ACC_STATUS THEN
14:28:24 329  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 330  	  SPROC_NAME, 'Current account status is not "frozen"');
14:28:24 331  WHEN NO_DATA_FOUND THEN
14:28:24 332  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 333  	  SPROC_NAME, 'Could not find account with given group ID');
14:28:24 334  WHEN CAN_NOT_CREATE_NOTE THEN
14:28:24 335  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 336  	  SPROC_NAME, 'Could not annotate account');
14:28:24 337  WHEN OTHERS THEN
14:28:24 338  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 339  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 340  END REACTIVATE_ACCOUNT;
14:28:24 341  
14:28:24 342  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
14:28:24 343  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
14:28:24 344  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V23.CREDIT_CARD_ACTIVE,
14:28:24 345  	out_result_set OUT SYS_REFCURSOR
14:28:24 346  ) AS
14:28:24 347  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_CREDIT_CARDS';
14:28:24 348  BEGIN
14:28:24 349  	OPEN out_result_set FOR
14:28:24 350  	  SELECT
14:28:24 351  	    CREDIT_CARD.ID,
14:28:24 352  	    CREDIT_CARD.ACCOUNT_ID,
14:28:24 353  	    CREDIT_CARD.INSTRUMENT_NAME,
14:28:24 354  	    CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
14:28:24 355  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS,
14:28:24 356  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
14:28:24 357  	    CREDIT_CARD.STATE,
14:28:24 358  	    CREDIT_CARD.CITY,
14:28:24 359  	    CREDIT_CARD.POSTAL_CODE,
14:28:24 360  	    CREDIT_CARD.COUNTRY,
14:28:24 361  	    CREDIT_CARD.LAST_FOUR_CC,
14:28:24 362  	    CREDIT_CARD.EXPIRATION_DATE,
14:28:24 363  	    CREDIT_CARD.CREDIT_CARD_TYPE_ID,
14:28:24 364  	    CREDIT_CARD.SECRET_TOKEN,
14:28:24 365  	    CREDIT_CARD.CREATE_DATE,
14:28:24 366  	    CREDIT_CARD.CREATED_BY,
14:28:24 367  	    CREDIT_CARD.UPDATE_DATE,
14:28:24 368  	    CREDIT_CARD.UPDATED_BY,
14:28:24 369  	    CREDIT_CARD.CREDIT_CARD_STATUS_ID,
14:28:24 370  	    CREDIT_CARD.PRIVATE_FIRST_NAME,
14:28:24 371  	    Credit_Card.Private_Last_Name,
14:28:24 372  	    decode((SELECT Instrument_Id FROM ACCOUNT WHERE group_id = in_group_id and Instrument_Id = CREDIT_CARD.ID),null,'false', 'true') is_default
14:28:24 373  	  From
14:28:24 374  	      CREDIT_CARD left join account on account.id = CREDIT_CARD.Account_Id
14:28:24 375  	  Where
14:28:24 376  	    Account.Group_Id = in_group_id
14:28:24 377  	    AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_status_id;
14:28:24 378  END GET_ACCOUNT_CREDIT_CARDS;
14:28:24 379  
14:28:24 380  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
14:28:24 381  	in_group_id	  IN NUMBER,
14:28:24 382  	out_result_gc_set OUT SYS_REFCURSOR,
14:28:24 383  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.TRUE
14:28:24 384  ) AS
14:28:24 385  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
14:28:24 386  var_account_id NUMBER;
14:28:24 387  
14:28:24 388  -- Exceptions
14:28:24 389  WRONG_INSTR_EXCEPTION	 EXCEPTION;
14:28:24 390  BEGIN
14:28:24 391  
14:28:24 392  	-- Get account id
14:28:24 393  	SELECT
14:28:24 394  	  ACCOUNT.ID INTO var_account_id
14:28:24 395  	FROM
14:28:24 396  	  ACCOUNT
14:28:24 397  	WHERE
14:28:24 398  	  ACCOUNT.GROUP_ID = in_group_id;
14:28:24 399  
14:28:24 400  	-- Check that incoming data is correct
14:28:24 401  	IF in_instr_status != GLOBAL_CONSTANTS_V23.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V23.FALSE THEN
14:28:24 402  	  RAISE WRONG_INSTR_EXCEPTION;
14:28:24 403  	END IF;
14:28:24 404  
14:28:24 405  	OPEN out_result_gc_set FOR
14:28:24 406  	SELECT
14:28:24 407  	  GIFT_CERTIFICATE.ID,
14:28:24 408  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
14:28:24 409  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
14:28:24 410  	  GIFT_CERTIFICATE.PURCHASE_DATE,
14:28:24 411  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
14:28:24 412  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
14:28:24 413  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
14:28:24 414  	  GIFT_CERTIFICATE.CODE,
14:28:24 415  	  GIFT_CERTIFICATE.CREATE_DATE,
14:28:24 416  	  GIFT_CERTIFICATE.CREATED_BY,
14:28:24 417  	  GIFT_CERTIFICATE.UPDATE_DATE,
14:28:24 418  	  GIFT_CERTIFICATE.UPDATED_BY,
14:28:24 419  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
14:28:24 420  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
14:28:24 421  	  GIFT_CERTIFICATE.SENDER_NAME,
14:28:24 422  	  GIFT_CERTIFICATE.SENDER_EMAIL,
14:28:24 423  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
14:28:24 424  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
14:28:24 425  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
14:28:24 426  	  GIFT_CERTIFICATE.GIFT_MESSAGE
14:28:24 427  	FROM
14:28:24 428  	  GIFT_CERTIFICATE
14:28:24 429  	WHERE
14:28:24 430  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
14:28:24 431  	  AND (
14:28:24 432  		( in_instr_status = GLOBAL_CONSTANTS_V23.TRUE AND
14:28:24 433  		  (
14:28:24 434  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
14:28:24 435  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE
14:28:24 436  		  )
14:28:24 437  		)
14:28:24 438  		OR
14:28:24 439  		(
14:28:24 440  		  in_instr_status = GLOBAL_CONSTANTS_V23.FALSE AND
14:28:24 441  		  (
14:28:24 442  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
14:28:24 443  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V23.GIFT_CERTIFICATE_ACTIVE
14:28:24 444  		  )
14:28:24 445  		)
14:28:24 446  	      );
14:28:24 447  
14:28:24 448  EXCEPTION
14:28:24 449  WHEN NO_DATA_FOUND THEN
14:28:24 450  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 451  	  SPROC_NAME, 'Can not find account with given group id');
14:28:24 452  WHEN WRONG_INSTR_EXCEPTION THEN
14:28:24 453  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:24 454  	  SPROC_NAME, 'Wrong gift certificate type');
14:28:24 455  WHEN OTHERS THEN
14:28:24 456  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 457  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 458  END GET_ACCOUNT_GIFT_CERTIFICATES;
14:28:24 459  
14:28:24 460  PROCEDURE GET_ACCOUNT_INFO  (
14:28:24 461  	  in_group_id	    IN	NUMBER,
14:28:24 462  	  out_account_info  OUT SYS_REFCURSOR
14:28:24 463  ) AS
14:28:24 464  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
14:28:24 465  var_account_id  NUMBER;
14:28:24 466  BEGIN
14:28:24 467  
14:28:24 468  	-- Get account id
14:28:24 469  	SELECT
14:28:24 470  	  ACCOUNT.ID INTO var_account_id
14:28:24 471  	FROM
14:28:24 472  	  ACCOUNT
14:28:24 473  	WHERE
14:28:24 474  	  ACCOUNT.GROUP_ID = in_group_id;
14:28:24 475  
14:28:24 476  	-- Get account info
14:28:24 477  	OPEN out_account_info FOR
14:28:24 478  	  SELECT
14:28:24 479  	    ACCOUNT.ACCOUNT_STATUS_ID
14:28:24 480  	  FROM ACCOUNT
14:28:24 481  	  WHERE
14:28:24 482  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 483  
14:28:24 484  EXCEPTION
14:28:24 485  WHEN NO_DATA_FOUND THEN
14:28:24 486  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 487  	  SPROC_NAME, 'No such account');
14:28:24 488  WHEN OTHERS THEN
14:28:24 489  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 490  	  SPROC_NAME, 'Unknown Error', SQLERRM);
14:28:24 491  END GET_ACCOUNT_INFO;
14:28:24 492  
14:28:24 493  PROCEDURE GET_ACCOUNT_NOTES (
14:28:24 494  	  in_group_id	 IN  NUMBER,
14:28:24 495  	  out_result_set OUT SYS_REFCURSOR
14:28:24 496  ) AS
14:28:24 497  -- VARIABLES
14:28:24 498  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
14:28:24 499  var_account_id NUMBER;
14:28:24 500  -- EXCEPTIONS
14:28:24 501  BAD_ACCOUNT_ID EXCEPTION;
14:28:24 502  BEGIN
14:28:24 503  
14:28:24 504  	-- Check that account is exists
14:28:24 505  	BEGIN
14:28:24 506  	  SELECT
14:28:24 507  	    ACCOUNT.ID into var_account_id
14:28:24 508  	  FROM
14:28:24 509  	    ACCOUNT
14:28:24 510  	  WHERE
14:28:24 511  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 512  	  EXCEPTION
14:28:24 513  	    WHEN NO_DATA_FOUND THEN
14:28:24 514  	      RAISE BAD_ACCOUNT_ID;
14:28:24 515  	END;
14:28:24 516  
14:28:24 517  	-- Get account notes
14:28:24 518  	OPEN out_result_set FOR
14:28:24 519  	SELECT
14:28:24 520  	  ACCOUNT_NOTE.ACCOUNT_ID,
14:28:24 521  	  ACCOUNT_NOTE.AGENT_ID,
14:28:24 522  	  ACCOUNT_NOTE.CREATE_DATE,
14:28:24 523  	  ACCOUNT_NOTE.CREATED_BY,
14:28:24 524  	  ACCOUNT_NOTE.ID,
14:28:24 525  	  ACCOUNT_NOTE.NOTE
14:28:24 526  	FROM
14:28:24 527  	  ACCOUNT_NOTE
14:28:24 528  	WHERE
14:28:24 529  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
14:28:24 530  	ORDER BY
14:28:24 531  	  ACCOUNT_NOTE.CREATE_DATE ASC;
14:28:24 532  
14:28:24 533  EXCEPTION
14:28:24 534  WHEN BAD_ACCOUNT_ID THEN
14:28:24 535  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 536  	  SPROC_NAME, 'No such account');
14:28:24 537  WHEN OTHERS THEN
14:28:24 538  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 539  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 540  END GET_ACCOUNT_NOTES;
14:28:24 541  
14:28:24 542  PROCEDURE GET_ACCOUNT_PAYPALS(
14:28:24 543  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
14:28:24 544  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V23.PAYPAL_ACTIVE,
14:28:24 545  	out_result_set OUT SYS_REFCURSOR
14:28:24 546  ) AS
14:28:24 547  SPROC_NAME     CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_PAYPALS';
14:28:24 548  BEGIN
14:28:24 549  	OPEN out_result_set FOR
14:28:24 550  	  SELECT
14:28:24 551  	    DISTINCT
14:28:24 552  	    PAYPAL.ID,
14:28:24 553  	    PAYPAL.ACCOUNT_ID,
14:28:24 554  	    PAYPAL.INSTRUMENT_NAME,
14:28:24 555  	    PAYPAL.PRIVATE_EMAIL_ADDRESS,
14:28:24 556  	    PAYPAL.CREATE_DATE,
14:28:24 557  	    PAYPAL.CREATED_BY,
14:28:24 558  	    PAYPAL.UPDATE_DATE,
14:28:24 559  	    PAYPAL.UPDATED_BY,
14:28:24 560  	    PAYPAL.PAYPAL_STATUS_ID,
14:28:24 561  	    PAYPAL.PRIVATE_STREET_ADDRESS,
14:28:24 562  	    PAYPAL.PRIVATE_STREET_ADDRESS2,
14:28:24 563  	    PAYPAL.STATE,
14:28:24 564  	    PAYPAL.CITY,
14:28:24 565  	    PAYPAL.POSTAL_CODE,
14:28:24 566  	    PAYPAL.COUNTRY,
14:28:24 567  	    Paypal.Expiration_Date,
14:28:24 568  	    Paypal.Secret_Token,
14:28:24 569  	    decode((SELECT
14:28:24 570  	    Instrument_Id
14:28:24 571  		    FROM ACCOUNT
14:28:24 572  		    WHERE group_id = in_group_id AND Instrument_Id = PAYPAL.ID), null, 'false', 'true') is_default
14:28:24 573  	  FROM
14:28:24 574  	      PAYPAL
14:28:24 575  	      LEFT JOIN ACCOUNT ON ACCOUNT.id = PAYPAL.ACCOUNT_ID
14:28:24 576  	  WHERE
14:28:24 577  	    ACCOUNT.GROUP_ID = in_group_id
14:28:24 578  	    AND PAYPAL.PAYPAL_STATUS_ID = in_status_id;
14:28:24 579  END GET_ACCOUNT_PAYPALS;
14:28:24 580  
14:28:24 581  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
14:28:24 582  	  in_group_id	 IN  NUMBER,
14:28:24 583  	  in_start_date  IN DATE,
14:28:24 584  	  in_end_date	 IN DATE,
14:28:24 585  	  in_status	 IN NUMBER,
14:28:24 586  	  in_group_account_type IN VARCHAR2,
14:28:24 587  	  out_result_set OUT SYS_REFCURSOR
14:28:24 588  ) AS
14:28:24 589  -- VARIABLES
14:28:24 590  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
14:28:24 591  var_account_id NUMBER;
14:28:24 592  -- EXCEPTIONS
14:28:24 593  BAD_GROUP_ID	      EXCEPTION;
14:28:24 594  BEGIN
14:28:24 595  	-- Get account id
14:28:24 596  	BEGIN
14:28:24 597  	  SELECT
14:28:24 598  	    ACCOUNT.ID INTO var_account_id
14:28:24 599  	  FROM
14:28:24 600  	    ACCOUNT
14:28:24 601  	  WHERE
14:28:24 602  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 603  	  EXCEPTION
14:28:24 604  	    WHEN NO_DATA_FOUND THEN
14:28:24 605  	      RAISE BAD_GROUP_ID;
14:28:24 606  	END;
14:28:24 607  
14:28:24 608  	-- Get information about account subscriptions
14:28:24 609  	OPEN out_result_set FOR
14:28:24 610  	SELECT
14:28:24 611  	  SUBSCRIPTION.ACCOUNT_ID,
14:28:24 612  	  in_group_id AS "GROUP_ID",
14:28:24 613  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
14:28:24 614  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
14:28:24 615  	  SUBSCRIPTION.PURCHASE_DATE,
14:28:24 616  	  SUBSCRIPTION.SUSPEND_DATE,
14:28:24 617  	  SUBSCRIPTION.REACTIVATION_DATE,
14:28:24 618  	  SUBSCRIPTION.CANCELLATION_DATE,
14:28:24 619  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
14:28:24 620  	  SUBSCRIPTION.INSTRUMENT_ID,
14:28:24 621  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
14:28:24 622  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
14:28:24 623  	  OFFER_CHAIN.NAME,
14:28:24 624  	  OFFER_CHAIN.DESCRIPTION,
14:28:24 625  	  OFFER_CHAIN.PRODUCT_URI,
14:28:24 626  	  PROCS_SUBSCRIPTION_V23.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
14:28:24 627  	  PROCS_SUBSCRIPTION_V23.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
14:28:24 628  	  PROCS_SUBSCRIPTION_V23.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
14:28:24 629  	  PROCS_SUBSCRIPTION_V23.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
14:28:24 630  	  PROCS_SUBSCRIPTION_V23.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
14:28:24 631  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
14:28:24 632  	  (
14:28:24 633  	    SELECT
14:28:24 634  	      MAX(ENTITLEMENT_END_DATE)
14:28:24 635  	      FROM LICENSE
14:28:24 636  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 637  	  )
14:28:24 638  	  as "ENT_END_DATE",
14:28:24 639  	  (
14:28:24 640  	    SELECT
14:28:24 641  	      MIN(START_DATE)
14:28:24 642  	      FROM LICENSE
14:28:24 643  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 644  	  )
14:28:24 645  	  as "ENT_START_DATE",
14:28:24 646  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
14:28:24 647  	  GROUP_ACCOUNT.ID GA_ID,
14:28:24 648  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
14:28:24 649  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
14:28:24 650  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
14:28:24 651  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
14:28:24 652  	  GROUP_ACCOUNT.PHONE GA_PHONE,
14:28:24 653  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
14:28:24 654  	  GROUP_ACCOUNT.SEATS GA_SEATS,
14:28:24 655  	  PROCS_GROUP_ACCOUNT_V23.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
14:28:24 656  	  GROUP_ACCOUNT.IP GA_IP,
14:28:24 657  	  PROCS_SUBSCRIPTION_V23.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE,
14:28:24 658  	  PROCS_ACCOUNT_V23.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
14:28:24 659  	  PROCS_ACCOUNT_V23.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
14:28:24 660  	FROM
14:28:24 661  	  SUBSCRIPTION
14:28:24 662  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 663  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
14:28:24 664  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
14:28:24 665  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
14:28:24 666  	WHERE
14:28:24 667  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:24 668  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V23.REAL_TIME_CANCEL_REASON)
14:28:24 669  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
14:28:24 670  	  AND PROCS_COMMON_V23.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V23.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
14:28:24 671  	  AND PROCS_COMMON_V23.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V23.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
14:28:24 672  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
14:28:24 673  
14:28:24 674  EXCEPTION
14:28:24 675  WHEN BAD_GROUP_ID THEN
14:28:24 676  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 677  	  SPROC_NAME, 'Can not find account with given group id');
14:28:24 678  WHEN OTHERS THEN
14:28:24 679  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 680  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 681  END GET_ACCOUNT_SUBSCRIPTIONS;
14:28:24 682  
14:28:24 683  PROCEDURE FREEZE_ACCOUNT (
14:28:24 684  	in_group_id   IN NUMBER,
14:28:24 685  	in_updated_by IN VARCHAR2,
14:28:24 686  	in_note       IN VARCHAR2,
14:28:24 687  	in_agent_id   IN NUMBER
14:28:24 688  ) AS
14:28:24 689  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
14:28:24 690  -- VARIABLES
14:28:24 691  var_account_id	    NUMBER;
14:28:24 692  var_account_status_id NUMBER;
14:28:24 693  -- EXCEPTIONS
14:28:24 694  BAD_GROUP_ID	    EXCEPTION;
14:28:24 695  BAD_ACCOUNT_STATUS_ID EXCEPTION;
14:28:24 696  CAN_NOT_CREATE_NOTE   EXCEPTION;
14:28:24 697  EXCEPTION_MESSAGE     VARCHAR2(1024);
14:28:24 698  BEGIN
14:28:24 699  
14:28:24 700  	-- Get account status, account id
14:28:24 701  	BEGIN
14:28:24 702  	  SELECT
14:28:24 703  	    ACCOUNT.ID,
14:28:24 704  	    ACCOUNT.ACCOUNT_STATUS_ID
14:28:24 705  	    into
14:28:24 706  	    var_account_id,
14:28:24 707  	    var_account_status_id
14:28:24 708  	  FROM
14:28:24 709  	    ACCOUNT
14:28:24 710  	  WHERE
14:28:24 711  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 712  	  EXCEPTION
14:28:24 713  	    WHEN NO_DATA_FOUND THEN
14:28:24 714  	      RAISE BAD_GROUP_ID;
14:28:24 715  	END;
14:28:24 716  
14:28:24 717  	-- We can freeze only ACTIVE accounts
14:28:24 718  	IF var_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_ACTIVE
14:28:24 719  	  AND var_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_FROZEN THEN
14:28:24 720  	  RAISE BAD_ACCOUNT_STATUS_ID;
14:28:24 721  	END IF;
14:28:24 722  
14:28:24 723  	-- Set account status
14:28:24 724  	PROCS_ACCOUNT_V23.UPDATE_ACCOUNT_STATUS(
14:28:24 725  	  in_account_id        => var_account_id,
14:28:24 726  	  in_updated_by        => in_updated_by,
14:28:24 727  	  in_account_status_id => GLOBAL_STATUSES_V23.ACCOUNT_FROZEN
14:28:24 728  	);
14:28:24 729  
14:28:24 730  	-- Annotate account
14:28:24 731  	BEGIN
14:28:24 732  	  PROCS_ACCOUNT_V23.ANNOTATE_ACCOUNT(
14:28:24 733  	    in_group_id   => in_group_id,
14:28:24 734  	    in_agent_id   => in_agent_id,
14:28:24 735  	    in_note	  => in_note,
14:28:24 736  	    in_created_by => in_updated_by
14:28:24 737  	  );
14:28:24 738  	  EXCEPTION
14:28:24 739  	    WHEN OTHERS THEN
14:28:24 740  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:24 741  	      RAISE CAN_NOT_CREATE_NOTE;
14:28:24 742  	END;
14:28:24 743  
14:28:24 744  EXCEPTION
14:28:24 745  WHEN BAD_GROUP_ID THEN
14:28:24 746  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 747  	  SPROC_NAME, 'No such group id');
14:28:24 748  WHEN BAD_ACCOUNT_STATUS_ID THEN
14:28:24 749  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.STATE_ERROR,
14:28:24 750  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
14:28:24 751  WHEN CAN_NOT_CREATE_NOTE THEN
14:28:24 752  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:24 753  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
14:28:24 754  WHEN OTHERS THEN
14:28:24 755  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 757  END FREEZE_ACCOUNT;
14:28:24 758  
14:28:24 759  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
14:28:24 760  	in_group_id	   IN  NUMBER,
14:28:24 761  	in_subscription_id IN NUMBER,
14:28:24 762  	out_result_set	   OUT SYS_REFCURSOR
14:28:24 763  ) AS
14:28:24 764  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
14:28:24 765  -- VARIABLES
14:28:24 766  var_account_id	   NUMBER;
14:28:24 767  temp_subscription_id NUMBER;
14:28:24 768  -- EXCEPTIONS
14:28:24 769  BAD_GROUP_ID	  EXCEPTION;
14:28:24 770  BAD_SUBSCRIPTION_ID EXCEPTION;
14:28:24 771  BEGIN
14:28:24 772  	-- Get account id
14:28:24 773  	BEGIN
14:28:24 774  	  SELECT
14:28:24 775  	    ACCOUNT.ID into var_account_id
14:28:24 776  	  FROM
14:28:24 777  	    ACCOUNT
14:28:24 778  	  WHERE
14:28:24 779  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 780  	  EXCEPTION
14:28:24 781  	    WHEN NO_DATA_FOUND THEN
14:28:24 782  	      RAISE BAD_GROUP_ID;
14:28:24 783  	END;
14:28:24 784  
14:28:24 785  	-- Check that subscription exists
14:28:24 786  	BEGIN
14:28:24 787  	  IF in_subscription_id IS NOT NULL THEN
14:28:24 788  	    SELECT
14:28:24 789  	      SUBSCRIPTION.ID into temp_subscription_id
14:28:24 790  	    FROM
14:28:24 791  	      SUBSCRIPTION
14:28:24 792  	    WHERE
14:28:24 793  	      SUBSCRIPTION.ID = in_subscription_id;
14:28:24 794  	  END IF;
14:28:24 795  	  EXCEPTION
14:28:24 796  	    WHEN NO_DATA_FOUND THEN
14:28:24 797  	      RAISE BAD_SUBSCRIPTION_ID;
14:28:24 798  	END;
14:28:24 799  
14:28:24 800  	OPEN out_result_set FOR
14:28:24 801  	SELECT DISTINCT
14:28:24 802  	  INVOICE.ID as "INVOICE_ID",
14:28:24 803  	  INVOICE.CREATE_DATE,
14:28:24 804  	  INVOICE.INVOICE_STATUS_ID,
14:28:24 805  	  PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
14:28:24 806  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
14:28:24 807  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
14:28:24 808  	  SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
14:28:24 809  	  NULL as "GC_CODE",
14:28:24 810  	  NULL as "GC_ID"
14:28:24 811  	FROM
14:28:24 812  	  LICENSE
14:28:24 813  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:24 814  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
14:28:24 815  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:24 816  	WHERE
14:28:24 817  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:24 818  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V23.REAL_TIME_CANCEL_REASON)
14:28:24 819  	  AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
14:28:24 820  
14:28:24 821  EXCEPTION
14:28:24 822  WHEN BAD_GROUP_ID THEN
14:28:24 823  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 824  	  SPROC_NAME, 'No such account');
14:28:24 825  WHEN BAD_SUBSCRIPTION_ID THEN
14:28:24 826  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:24 827  	  SPROC_NAME, 'No such subscription');
14:28:24 828  WHEN OTHERS THEN
14:28:24 829  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:24 830  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:24 831  END GET_ACCOUNT_SUBSCR_INVOICES;
14:28:24 832  
14:28:24 833  PROCEDURE GET_ACCOUNT_GC_INVOICES (
14:28:24 834  	in_group_id    IN  NUMBER,
14:28:24 835  	out_result_set OUT SYS_REFCURSOR
14:28:24 836  ) AS
14:28:24 837  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
14:28:24 838  -- VARIABLES
14:28:24 839  var_account_id NUMBER;
14:28:24 840  -- EXCEPTIONS
14:28:24 841  BAD_GROUP_ID EXCEPTION;
14:28:24 842  BEGIN
14:28:24 843  	-- Get account id
14:28:24 844  	BEGIN
14:28:24 845  	  SELECT
14:28:24 846  	    ACCOUNT.ID into var_account_id
14:28:24 847  	  FROM
14:28:24 848  	    ACCOUNT
14:28:24 849  	  WHERE
14:28:24 850  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:24 851  	  EXCEPTION
14:28:24 852  	    WHEN NO_DATA_FOUND THEN
14:28:24 853  	      RAISE BAD_GROUP_ID;
14:28:24 854  	END;
14:28:25 855  
14:28:25 856  	-- Get invoices
14:28:25 857  	OPEN out_result_set FOR
14:28:25 858  	SELECT DISTINCT
14:28:25 859  	  INVOICE.ID as "INVOICE_ID",
14:28:25 860  	  INVOICE.CREATE_DATE,
14:28:25 861  	  INVOICE.INVOICE_STATUS_ID,
14:28:25 862  	  PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
14:28:25 863  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
14:28:25 864  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
14:28:25 865  	  NULL as "SUBSCRIPTION_ID",
14:28:25 866  	  GIFT_CERTIFICATE.CODE as "GC_CODE",
14:28:25 867  	  GIFT_CERTIFICATE.ID as "GC_ID"
14:28:25 868  	FROM
14:28:25 869  	  GIFT_CERTIFICATE
14:28:25 870  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
14:28:25 871  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:25 872  	WHERE
14:28:25 873  	  ROWNUM <= 100 AND
14:28:25 874  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
14:28:25 875  
14:28:25 876  EXCEPTION
14:28:25 877  WHEN BAD_GROUP_ID THEN
14:28:25 878  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 879  	  SPROC_NAME, 'No such account');
14:28:25 880  WHEN OTHERS THEN
14:28:25 881  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 883  END GET_ACCOUNT_GC_INVOICES;
14:28:25 884  
14:28:25 885  -- norlov: #38580
14:28:25 886  PROCEDURE GET_GC_INVOICE (
14:28:25 887  	in_group_id    IN  NUMBER,
14:28:25 888  	in_gc_code     IN  VARCHAR2,
14:28:25 889  	out_result_set OUT SYS_REFCURSOR
14:28:25 890  ) AS
14:28:25 891  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
14:28:25 892  -- VARIABLES
14:28:25 893  var_account_id NUMBER;
14:28:25 894  -- EXCEPTIONS
14:28:25 895  BAD_GROUP_ID EXCEPTION;
14:28:25 896  BEGIN
14:28:25 897  	-- Get account id
14:28:25 898  	BEGIN
14:28:25 899  	  SELECT
14:28:25 900  	    ACCOUNT.ID into var_account_id
14:28:25 901  	  FROM
14:28:25 902  	    ACCOUNT
14:28:25 903  	  WHERE
14:28:25 904  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:25 905  	  EXCEPTION
14:28:25 906  	    WHEN NO_DATA_FOUND THEN
14:28:25 907  	      RAISE BAD_GROUP_ID;
14:28:25 908  	END;
14:28:25 909  
14:28:25 910  	-- Get invoice for the GC
14:28:25 911  	OPEN out_result_set FOR
14:28:25 912  	SELECT DISTINCT
14:28:25 913  	  INVOICE.ID as "INVOICE_ID",
14:28:25 914  	  INVOICE.CREATE_DATE,
14:28:25 915  	  INVOICE.INVOICE_STATUS_ID,
14:28:25 916  	  PROCS_INVOICE_V23.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
14:28:25 917  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
14:28:25 918  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
14:28:25 919  	  NULL as "SUBSCRIPTION_ID",
14:28:25 920  	  GIFT_CERTIFICATE.CODE as "GC_CODE"
14:28:25 921  	FROM
14:28:25 922  	  GIFT_CERTIFICATE
14:28:25 923  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
14:28:25 924  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
14:28:25 925  	WHERE
14:28:25 926  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
14:28:25 927  	  AND GIFT_CERTIFICATE.CODE = in_gc_code;
14:28:25 928  
14:28:25 929  EXCEPTION
14:28:25 930  WHEN BAD_GROUP_ID THEN
14:28:25 931  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 932  	  SPROC_NAME, 'No such account');
14:28:25 933  WHEN OTHERS THEN
14:28:25 934  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 935  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 936  END GET_GC_INVOICE;
14:28:25 937  
14:28:25 938  PROCEDURE GET_ACCOUNT_PRODUCTS (
14:28:25 939  	in_group_id    IN  NUMBER,
14:28:25 940  	out_result_set OUT SYS_REFCURSOR
14:28:25 941  ) AS
14:28:25 942  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
14:28:25 943  -- VARIABLES
14:28:25 944  var_account_id NUMBER;
14:28:25 945  -- EXCEPTIONS
14:28:25 946  BAD_GROUP_ID EXCEPTION;
14:28:25 947  BEGIN
14:28:25 948  	-- Get account id
14:28:25 949  	BEGIN
14:28:25 950  	  SELECT
14:28:25 951  	    ACCOUNT.ID into var_account_id
14:28:25 952  	  FROM
14:28:25 953  	    ACCOUNT
14:28:25 954  	  WHERE
14:28:25 955  	    ACCOUNT.GROUP_ID = in_group_id;
14:28:25 956  	  EXCEPTION
14:28:25 957  	    WHEN NO_DATA_FOUND THEN
14:28:25 958  	      RAISE BAD_GROUP_ID;
14:28:25 959  	END;
14:28:25 960  
14:28:25 961  	OPEN out_result_set FOR
14:28:25 962  	SELECT DISTINCT
14:28:25 963  	  PRODUCT.ID,
14:28:25 964  	  PRODUCT.NAME
14:28:25 965  	FROM
14:28:25 966  	  PRODUCT
14:28:25 967  	WHERE
14:28:25 968  	  PRODUCT.ID IN (
14:28:25 969  	    SELECT DISTINCT
14:28:25 970  	      PRODUCT_OFFERING.PRODUCT_ID
14:28:25 971  	    FROM
14:28:25 972  	      PRODUCT_OFFERING
14:28:25 973  	    WHERE
14:28:25 974  	      PRODUCT_OFFERING.ID IN (
14:28:25 975  		SELECT DISTINCT
14:28:25 976  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
14:28:25 977  		FROM
14:28:25 978  		  OFFER_PRODUCT_OFFERING
14:28:25 979  		WHERE
14:28:25 980  		  OFFER_PRODUCT_OFFERING.OFFER_ID IN (
14:28:25 981  		    SELECT DISTINCT
14:28:25 982  		      OFFER_OFFER_CHAIN.OFFER_ID
14:28:25 983  		    FROM
14:28:25 984  		      OFFER_OFFER_CHAIN
14:28:25 985  		    WHERE
14:28:25 986  		      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
14:28:25 987  			SELECT DISTINCT
14:28:25 988  			  SUBSCRIPTION.OFFER_CHAIN_ID
14:28:25 989  			FROM
14:28:25 990  			  SUBSCRIPTION
14:28:25 991  			WHERE
14:28:25 992  			  SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:25 993  		      )
14:28:25 994  		  )
14:28:25 995  	      )
14:28:25 996  	  );
14:28:25 997  
14:28:25 998  EXCEPTION
14:28:25 999  WHEN BAD_GROUP_ID THEN
14:28:25 1000  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1001  	   SPROC_NAME, 'No such account');
14:28:25 1002  WHEN OTHERS THEN
14:28:25 1003  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1004  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1005  END GET_ACCOUNT_PRODUCTS;
14:28:25 1006  
14:28:25 1007  PROCEDURE UPDATE_ACCOUNT_STATUS (
14:28:25 1008  	 in_account_id	      IN ACCOUNT.ID%TYPE,
14:28:25 1009  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
14:28:25 1010  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
14:28:25 1011  ) AS
14:28:25 1012  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
14:28:25 1013  -- EXCEPTIONS
14:28:25 1014  BAD_ACCOUNT_ID	      EXCEPTION;
14:28:25 1015  BAD_STATUS_ID	      EXCEPTION;
14:28:25 1016  EXCEPTION_MESSAGE      VARCHAR2(1024);
14:28:25 1017  BEGIN
14:28:25 1018  
14:28:25 1019  	 IF in_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_ACTIVE
14:28:25 1020  	   AND in_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_FROZEN
14:28:25 1021  	   AND in_account_status_id != GLOBAL_STATUSES_V23.ACCOUNT_DISABLED THEN
14:28:25 1022  	   RAISE BAD_STATUS_ID;
14:28:25 1023  	 END IF;
14:28:25 1024  
14:28:25 1025  	 PROCS_ACCOUNT_CRU_V23.UPDATE_ACCOUNT(
14:28:25 1026  	   in_account_id	=> in_account_id,
14:28:25 1027  	   in_account_status_id => in_account_status_id,
14:28:25 1028  	   in_updated_by	=> in_updated_by
14:28:25 1029  	 );
14:28:25 1030  
14:28:25 1031  	 IF SQL%ROWCOUNT = 0 THEN
14:28:25 1032  	   RAISE BAD_ACCOUNT_ID;
14:28:25 1033  	 END IF;
14:28:25 1034  
14:28:25 1035  EXCEPTION
14:28:25 1036  WHEN BAD_ACCOUNT_ID THEN
14:28:25 1037  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1038  	   SPROC_NAME, 'No such account');
14:28:25 1039  WHEN BAD_STATUS_ID THEN
14:28:25 1040  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:25 1041  	   SPROC_NAME, 'Bad status id');
14:28:25 1042  WHEN OTHERS THEN
14:28:25 1043  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1044  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1045  END UPDATE_ACCOUNT_STATUS;
14:28:25 1046  
14:28:25 1047  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
14:28:25 1048  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
14:28:25 1049  	 out_licenses_num OUT NUMBER
14:28:25 1050  ) AS
14:28:25 1051  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
14:28:25 1052  -- VARIABLES
14:28:25 1053  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
14:28:25 1054  -- EXCEPTIONS
14:28:25 1055  BAD_ACCOUNT_ID EXCEPTION;
14:28:25 1056  BEGIN
14:28:25 1057  
14:28:25 1058  	 BEGIN
14:28:25 1059  	   SELECT
14:28:25 1060  	     ACCOUNT.ID into var_account_id
14:28:25 1061  	   FROM
14:28:25 1062  	     ACCOUNT
14:28:25 1063  	   WHERE
14:28:25 1064  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:25 1065  	   EXCEPTION
14:28:25 1066  	     WHEN NO_DATA_FOUND THEN
14:28:25 1067  	       RAISE BAD_ACCOUNT_ID;
14:28:25 1068  	 END;
14:28:25 1069  
14:28:25 1070  	 SELECT
14:28:25 1071  	   COUNT(LICENSE.ID) into out_licenses_num
14:28:25 1072  	 FROM
14:28:25 1073  	   LICENSE
14:28:25 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:25 1075  	 WHERE
14:28:25 1076  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
14:28:25 1077  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V23.TRUE;
14:28:25 1078  
14:28:25 1079  EXCEPTION
14:28:25 1080  WHEN BAD_ACCOUNT_ID THEN
14:28:25 1081  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1082  	   SPROC_NAME, 'No such group id');
14:28:25 1083  WHEN OTHERS THEN
14:28:25 1084  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1085  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1086  END GET_NEEDS_ENTTL_LICENSES_NUM;
14:28:25 1087  
14:28:25 1088  PROCEDURE SET_TAX_EXEMPT (
14:28:25 1089  	 in_group_id  IN NUMBER,
14:28:25 1090  	 in_exempt_id IN VARCHAR2
14:28:25 1091  ) AS
14:28:25 1092  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
14:28:25 1093  -- VARIABLES
14:28:25 1094  var_account_id NUMBER;
14:28:25 1095  -- EXCEPTIONS
14:28:25 1096  BAD_GROUP_ID EXCEPTION;
14:28:25 1097  BEGIN
14:28:25 1098  
14:28:25 1099  	 BEGIN
14:28:25 1100  	   SELECT
14:28:25 1101  	     ACCOUNT.ID into var_account_id
14:28:25 1102  	   FROM
14:28:25 1103  	     ACCOUNT
14:28:25 1104  	   WHERE
14:28:25 1105  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:25 1106  	   EXCEPTION
14:28:25 1107  	     WHEN NO_DATA_FOUND THEN
14:28:25 1108  	       RAISE BAD_GROUP_ID;
14:28:25 1109  	 END;
14:28:25 1110  
14:28:25 1111  	 UPDATE
14:28:25 1112  	   ACCOUNT
14:28:25 1113  	 SET
14:28:25 1114  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
14:28:25 1115  	 WHERE
14:28:25 1116  	   ACCOUNT.ID = var_account_id;
14:28:25 1117  
14:28:25 1118  EXCEPTION
14:28:25 1119  WHEN BAD_GROUP_ID THEN
14:28:25 1120  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1121  	   SPROC_NAME, 'No such group id');
14:28:25 1122  WHEN OTHERS THEN
14:28:25 1123  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1124  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1125  END SET_TAX_EXEMPT;
14:28:25 1126  
14:28:25 1127  PROCEDURE IS_TAX_EXEMPT (
14:28:25 1128  	 in_group_id	   IN NUMBER,
14:28:25 1129  	 out_is_tax_exempt OUT NUMBER
14:28:25 1130  ) AS
14:28:25 1131  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
14:28:25 1132  -- VARIABLES
14:28:25 1133  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
14:28:25 1134  -- EXCEPTIONS
14:28:25 1135  BAD_GROUP_ID EXCEPTION;
14:28:25 1136  BEGIN
14:28:25 1137  
14:28:25 1138  	 BEGIN
14:28:25 1139  	   SELECT
14:28:25 1140  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
14:28:25 1141  	   FROM
14:28:25 1142  	     ACCOUNT
14:28:25 1143  	   WHERE
14:28:25 1144  	     ACCOUNT.GROUP_ID = in_group_id;
14:28:25 1145  	   EXCEPTION
14:28:25 1146  	     WHEN NO_DATA_FOUND THEN
14:28:25 1147  	       RAISE BAD_GROUP_ID;
14:28:25 1148  	 END;
14:28:25 1149  
14:28:25 1150  	 IF var_is_tax_exempt IS NULL THEN
14:28:25 1151  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V23.FALSE;
14:28:25 1152  	 ELSE
14:28:25 1153  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V23.TRUE;
14:28:25 1154  	 END IF;
14:28:25 1155  
14:28:25 1156  EXCEPTION
14:28:25 1157  WHEN BAD_GROUP_ID THEN
14:28:25 1158  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1159  	   SPROC_NAME, 'No such group id');
14:28:25 1160  WHEN OTHERS THEN
14:28:25 1161  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1162  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1163  END IS_TAX_EXEMPT;
14:28:25 1164  
14:28:25 1165  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
14:28:25 1166  	 in_account_id IN NUMBER,
14:28:25 1167  	 out_group_id  OUT NUMBER
14:28:25 1168  ) AS
14:28:25 1169  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
14:28:25 1170  BEGIN
14:28:25 1171  
14:28:25 1172  	 SELECT
14:28:25 1173  	   ACCOUNT.GROUP_ID into out_group_id
14:28:25 1174  	 FROM
14:28:25 1175  	   ACCOUNT
14:28:25 1176  	 WHERE
14:28:25 1177  	   ACCOUNT.ID = in_account_id;
14:28:25 1178  
14:28:25 1179  EXCEPTION
14:28:25 1180  WHEN NO_DATA_FOUND THEN
14:28:25 1181  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1182  	   SPROC_NAME, 'No such account');
14:28:25 1183  WHEN OTHERS THEN
14:28:25 1184  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1185  	   SPROC_NAME, 'Unknown error');
14:28:25 1186  END GET_GROUP_ID_BY_ACCOUNT_ID;
14:28:25 1187  
14:28:25 1188  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:28:25 1189  	 in_group_id IN NUMBER,
14:28:25 1190  	 out_account_id  OUT NUMBER
14:28:25 1191  ) AS
14:28:25 1192  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
14:28:25 1193  BEGIN
14:28:25 1194  
14:28:25 1195  	 SELECT
14:28:25 1196  	   ACCOUNT.ID into out_account_id
14:28:25 1197  	 FROM
14:28:25 1198  	   ACCOUNT
14:28:25 1199  	 WHERE
14:28:25 1200  	   ACCOUNT.GROUP_ID = in_group_id;
14:28:25 1201  
14:28:25 1202  EXCEPTION
14:28:25 1203  WHEN NO_DATA_FOUND THEN
14:28:25 1204  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1205  	   SPROC_NAME, 'No such account');
14:28:25 1206  WHEN OTHERS THEN
14:28:25 1207  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1208  	   SPROC_NAME, 'Unknown error');
14:28:25 1209  END GET_ACCOUNT_ID_BY_GROUP_ID;
14:28:25 1210  
14:28:25 1211  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
14:28:25 1212  	 in_invoice_id IN NUMBER,
14:28:25 1213  	 out_group_ids OUT SYS_REFCURSOR
14:28:25 1214  ) AS
14:28:25 1215  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
14:28:25 1216  -- VARIABLES
14:28:25 1217  temp_invoice_id		 NUMBER;
14:28:25 1218  var_subscrib_group_id	 NUMBER;
14:28:25 1219  var_gc_purchaser_group_id NUMBER;
14:28:25 1220  var_gc_redeemer_group_id  NUMBER;
14:28:25 1221  -- EXCEPTIONS
14:28:25 1222  BAD_INVOICE_ID	    EXCEPTION;
14:28:25 1223  CAN_NOT_FIND_ACCOUNT EXCEPTION;
14:28:25 1224  BEGIN
14:28:25 1225  
14:28:25 1226  	 BEGIN
14:28:25 1227  	   SELECT
14:28:25 1228  	     INVOICE.ID into temp_invoice_id
14:28:25 1229  	   FROM
14:28:25 1230  	     INVOICE
14:28:25 1231  	   WHERE
14:28:25 1232  	     INVOICE.ID = in_invoice_id;
14:28:25 1233  	   EXCEPTION
14:28:25 1234  	     WHEN NO_DATA_FOUND THEN
14:28:25 1235  	       RAISE BAD_INVOICE_ID;
14:28:25 1236  	 END;
14:28:25 1237  
14:28:25 1238  	 BEGIN
14:28:25 1239  	   SELECT DISTINCT
14:28:25 1240  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
14:28:25 1241  	   FROM
14:28:25 1242  	     ACCOUNT
14:28:25 1243  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
14:28:25 1244  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
14:28:25 1245  	   WHERE
14:28:25 1246  	     LICENSE.INVOICE_ID = in_invoice_id;
14:28:25 1247  	   EXCEPTION
14:28:25 1248  	     WHEN NO_DATA_FOUND THEN
14:28:25 1249  	       var_subscrib_group_id := NULL;
14:28:25 1250  	 END;
14:28:25 1251  
14:28:25 1252  	 IF var_subscrib_group_id IS NULL THEN
14:28:25 1253  	   BEGIN
14:28:25 1254  	     SELECT
14:28:25 1255  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
14:28:25 1256  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
14:28:25 1257  	       into
14:28:25 1258  	       var_gc_purchaser_group_id,
14:28:25 1259  	       var_gc_redeemer_group_id
14:28:25 1260  	     FROM
14:28:25 1261  	       GIFT_CERTIFICATE
14:28:25 1262  	     WHERE
14:28:25 1263  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
14:28:25 1264  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
14:28:25 1265  	     EXCEPTION
14:28:25 1266  	       WHEN NO_DATA_FOUND THEN
14:28:25 1267  		 var_gc_purchaser_group_id := NULL;
14:28:25 1268  		 var_gc_redeemer_group_id  := NULL;
14:28:25 1269  	   END;
14:28:25 1270  	 END IF;
14:28:25 1271  
14:28:25 1272  	 IF var_subscrib_group_id IS NULL
14:28:25 1273  	   AND var_gc_purchaser_group_id IS NULL
14:28:25 1274  	   AND var_gc_redeemer_group_id IS NULL THEN
14:28:25 1275  	     RAISE CAN_NOT_FIND_ACCOUNT;
14:28:25 1276  	 END IF;
14:28:25 1277  
14:28:25 1278  	 OPEN out_group_ids FOR
14:28:25 1279  	 SELECT GROUP_ID FROM (
14:28:25 1280  	   SELECT
14:28:25 1281  	     var_subscrib_group_id as "GROUP_ID"
14:28:25 1282  	   FROM
14:28:25 1283  	     DUAL
14:28:25 1284  	   UNION
14:28:25 1285  	   SELECT
14:28:25 1286  	     var_gc_purchaser_group_id as "GROUP_ID"
14:28:25 1287  	   FROM
14:28:25 1288  	     DUAL
14:28:25 1289  	   UNION
14:28:25 1290  	   SELECT
14:28:25 1291  	     var_gc_redeemer_group_id as "GROUP_ID"
14:28:25 1292  	   FROM
14:28:25 1293  	     DUAL
14:28:25 1294  	 )
14:28:25 1295  	 WHERE
14:28:25 1296  	   GROUP_ID IS NOT NULL;
14:28:25 1297  
14:28:25 1298  EXCEPTION
14:28:25 1299  WHEN BAD_INVOICE_ID THEN
14:28:25 1300  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1301  	   SPROC_NAME, 'No such invoice');
14:28:25 1302  WHEN CAN_NOT_FIND_ACCOUNT THEN
14:28:25 1303  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1304  	   SPROC_NAME, 'Could not find account for given invoice');
14:28:25 1305  WHEN OTHERS THEN
14:28:25 1306  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1307  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1308  END GET_GROUPS_ID_BY_INVOICE_ID;
14:28:25 1309  
14:28:25 1310  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
14:28:25 1311  	 in_group_id	   IN NUMBER,
14:28:25 1312  	 out_tax_exempt_id OUT VARCHAR2
14:28:25 1313  ) AS
14:28:25 1314  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
14:28:25 1315  -- VARIABLES
14:28:25 1316  -- EXCEPTIONS
14:28:25 1317  BEGIN
14:28:25 1318  
14:28:25 1319  	 SELECT
14:28:25 1320  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
14:28:25 1321  	 FROM
14:28:25 1322  	   ACCOUNT
14:28:25 1323  	 WHERE
14:28:25 1324  	   ACCOUNT.GROUP_ID = in_group_id;
14:28:25 1325  
14:28:25 1326  EXCEPTION
14:28:25 1327  WHEN NO_DATA_FOUND THEN
14:28:25 1328  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1329  	   SPROC_NAME, 'No such account');
14:28:25 1330  WHEN OTHERS THEN
14:28:25 1331  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1332  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1333  END GET_ACCOUNT_TAX_EXEMPT_ID;
14:28:25 1334  
14:28:25 1335  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
14:28:25 1336  	 in_group_id	IN NUMBER,
14:28:25 1337  	 out_result_set OUT SYS_REFCURSOR
14:28:25 1338  ) AS
14:28:25 1339  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
14:28:25 1340  -- Variables
14:28:25 1341  var_account_id NUMBER;
14:28:25 1342  -- Exceptions
14:28:25 1343  BAD_GROUP_ID   EXCEPTION;
14:28:25 1344  BEGIN
14:28:25 1345  
14:28:25 1346  	 BEGIN
14:28:25 1347  	   SELECT
14:28:25 1348  	     ID into var_account_id
14:28:25 1349  	   FROM
14:28:25 1350  	     ACCOUNT
14:28:25 1351  	   WHERE
14:28:25 1352  	     GROUP_ID = in_group_id;
14:28:25 1353  	   EXCEPTION
14:28:25 1354  	     WHEN NO_DATA_FOUND THEN
14:28:25 1355  	       RAISE BAD_GROUP_ID;
14:28:25 1356  	 END;
14:28:25 1357  
14:28:25 1358  	 OPEN out_result_set FOR
14:28:25 1359  	 SELECT
14:28:25 1360  	   S.ID as SUBSCRIPTION_ID,
14:28:25 1361  	   OCHMD.OFFER_CHAIN_ID
14:28:25 1362  	 FROM
14:28:25 1363  	   SUBSCRIPTION S
14:28:25 1364  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
14:28:25 1365  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V23.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
14:28:25 1366  	 WHERE
14:28:25 1367  	   S.ACCOUNT_ID = var_account_id;
14:28:25 1368  
14:28:25 1369  EXCEPTION
14:28:25 1370  WHEN BAD_GROUP_ID THEN
14:28:25 1371  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1372  	   SPROC_NAME, 'No such account');
14:28:25 1373  WHEN OTHERS THEN
14:28:25 1374  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1375  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1376  END GET_UPGRADABLE_SUBSCRIPTIONS;
14:28:25 1377  
14:28:25 1378  PROCEDURE GET_USR_ALL_SBSCR_IDS (
14:28:25 1379  	 in_group_id	    IN NUMBER,
14:28:25 1380  	 out_result_set     OUT SYS_REFCURSOR
14:28:25 1381  ) AS
14:28:25 1382  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
14:28:25 1383  -- VARIABLES
14:28:25 1384  var_account_id NUMBER;
14:28:25 1385  -- EXCEPTIONS
14:28:25 1386  BAD_GROUP_ID EXCEPTION;
14:28:25 1387  BEGIN
14:28:25 1388  
14:28:25 1389  	 BEGIN
14:28:25 1390  	   SELECT
14:28:25 1391  	     A.ID INTO var_account_id
14:28:25 1392  	   FROM
14:28:25 1393  	     ACCOUNT A
14:28:25 1394  	   WHERE
14:28:25 1395  	     A.GROUP_ID = in_group_id;
14:28:25 1396  	   EXCEPTION
14:28:25 1397  	     WHEN NO_DATA_FOUND THEN
14:28:25 1398  	       RAISE BAD_GROUP_ID;
14:28:25 1399  	 END;
14:28:25 1400  
14:28:25 1401  	 OPEN out_result_set FOR
14:28:25 1402  	 SELECT
14:28:25 1403  	   S.ID
14:28:25 1404  	 FROM
14:28:25 1405  	   SUBSCRIPTION S
14:28:25 1406  	 WHERE
14:28:25 1407  	   S.ACCOUNT_ID = var_account_id
14:28:25 1408  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
14:28:25 1409  
14:28:25 1410  EXCEPTION
14:28:25 1411  WHEN BAD_GROUP_ID THEN
14:28:25 1412  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1413  	   SPROC_NAME, 'No such account');
14:28:25 1414  WHEN OTHERS THEN
14:28:25 1415  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1416  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1417  END GET_USR_ALL_SBSCR_IDS;
14:28:25 1418  
14:28:25 1419  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
14:28:25 1420  	 in_group_id	    IN NUMBER,
14:28:25 1421  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
14:28:25 1422  	 out_result_set     OUT SYS_REFCURSOR
14:28:25 1423  ) AS
14:28:25 1424  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
14:28:25 1425  -- VARIABLES
14:28:25 1426  var_account_id NUMBER;
14:28:25 1427  -- EXCEPTIONS
14:28:25 1428  BAD_GROUP_ID	   EXCEPTION;
14:28:25 1429  BAD_OFFER_CHAIN_IDS EXCEPTION;
14:28:25 1430  BEGIN
14:28:25 1431  
14:28:25 1432  	 IF in_offer_chain_ids IS NULL THEN
14:28:25 1433  	   RAISE BAD_OFFER_CHAIN_IDS;
14:28:25 1434  	 END IF;
14:28:25 1435  
14:28:25 1436  	 BEGIN
14:28:25 1437  	   SELECT
14:28:25 1438  	     A.ID INTO var_account_id
14:28:25 1439  	   FROM
14:28:25 1440  	     ACCOUNT A
14:28:25 1441  	   WHERE
14:28:25 1442  	     A.GROUP_ID = in_group_id;
14:28:25 1443  	   EXCEPTION
14:28:25 1444  	     WHEN NO_DATA_FOUND THEN
14:28:25 1445  	       RAISE BAD_GROUP_ID;
14:28:25 1446  	 END;
14:28:25 1447  
14:28:25 1448  	 OPEN out_result_set FOR
14:28:25 1449  	 SELECT
14:28:25 1450  	   S.ID
14:28:25 1451  	 FROM
14:28:25 1452  	   SUBSCRIPTION S
14:28:25 1453  	 WHERE
14:28:25 1454  	   S.ACCOUNT_ID = var_account_id
14:28:25 1455  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
14:28:25 1456  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V23.SUBSCRIPTION_ACTIVE;
14:28:25 1457  
14:28:25 1458  EXCEPTION
14:28:25 1459  WHEN BAD_OFFER_CHAIN_IDS THEN
14:28:25 1460  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INVALID_PARAMETER,
14:28:25 1461  	   SPROC_NAME, 'Offer chains ids parameter is null');
14:28:25 1462  WHEN BAD_GROUP_ID THEN
14:28:25 1463  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 1464  	   SPROC_NAME, 'No such account');
14:28:25 1465  WHEN OTHERS THEN
14:28:25 1466  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1468  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
14:28:25 1469  
14:28:25 1470  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
14:28:25 1471  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
14:28:25 1472  	 in_expiration_date IN DATE,
14:28:25 1473  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
14:28:25 1474  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
14:28:25 1475  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
14:28:25 1476  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
14:28:25 1477  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
14:28:25 1478  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
14:28:25 1479  	 in_lower_bound IN NUMBER DEFAULT 1,
14:28:25 1480  	 in_upper_bound IN NUMBER DEFAULT 11,
14:28:25 1481  	 out_result_set OUT SYS_REFCURSOR
14:28:25 1482  ) AS
14:28:25 1483  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
14:28:25 1484  BEGIN
14:28:25 1485  
14:28:25 1486  	 OPEN out_result_set FOR
14:28:25 1487  	     SELECT
14:28:25 1488  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
14:28:25 1489  	     FROM
14:28:25 1490  	       account a,
14:28:25 1491  	       credit_card cc
14:28:25 1492  	     WHERE
14:28:25 1493  	       cc.expiration_date = in_expiration_date and
14:28:25 1494  	       cc.last_four_cc = in_last_four_cc and
14:28:25 1495  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
14:28:25 1496  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
14:28:25 1497  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
14:28:25 1498  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
14:28:25 1499  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
14:28:25 1500  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
14:28:25 1501  	       a.id = cc.account_id and
14:28:25 1502  	       rownum >= in_lower_bound and
14:28:25 1503  	       rownum <= in_upper_bound
14:28:25 1504  	   ;
14:28:25 1505  
14:28:25 1506  EXCEPTION
14:28:25 1507  WHEN OTHERS THEN
14:28:25 1508  	 PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 1509  	   SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 1510  END GET_GROUP_IDS_BY_CC_INFO;
14:28:25 1511  
14:28:25 1512  END PROCS_ACCOUNT_V23;
14:28:25 1513  .
14:28:25 SQL> /

Package body created.

Elapsed: 00:00:00.14
14:28:25 SQL> 
14:28:25 SQL> prompt Compiling body for procs_process_retry.sql
Compiling body for procs_process_retry.sql
14:28:25 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PROCESS_RETRY_V23" AS
14:28:25   2  
14:28:25   3  PROCEDURE LOG_RETRY(
14:28:25   4  	  in_process_name IN VARCHAR2,
14:28:25   5  	  in_generic_id   IN NUMBER,
14:28:25   6  	  in_date	  IN VARCHAR2,
14:28:25   7  	  out_success	   OUT NUMBER
14:28:25   8  ) AS
14:28:25   9  SPROC_NAME CONSTANT VARCHAR2(32) := 'LOG_RETRY_V23';
14:28:25  10  BEGIN
14:28:25  11  
14:28:25  12  	out_success := 1;
14:28:25  13  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
14:28:25  14  	VALUES (in_process_name, in_generic_id, 1, to_date(in_date, 'DD-Mon-YYYY HH24:MI:SS'), sysdate);
14:28:25  15  	commit;
14:28:25  16  EXCEPTION
14:28:25  17  WHEN DUP_VAL_ON_INDEX THEN
14:28:25  18  	rollback;
14:28:25  19  	out_success := 0;
14:28:25  20  WHEN OTHERS THEN
14:28:25  21  	rollback;
14:28:25  22  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25  23  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25  24  
14:28:25  25  END;
14:28:25  26  
14:28:25  27  PROCEDURE LOG_RETRY_DATE(
14:28:25  28  	  in_process_name IN VARCHAR2,
14:28:25  29  	  in_generic_id   IN NUMBER,
14:28:25  30  	  in_date	  IN DATE,
14:28:25  31  	  out_success	   OUT NUMBER
14:28:25  32  ) AS
14:28:25  33  SPROC_NAME CONSTANT VARCHAR2(32) := 'LOG_RETRY_DATE_V23';
14:28:25  34  BEGIN
14:28:25  35  
14:28:25  36  	out_success := 1;
14:28:25  37  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
14:28:25  38  	VALUES (in_process_name, in_generic_id, 1, in_date, sysdate);
14:28:25  39  	commit;
14:28:25  40  EXCEPTION
14:28:25  41  WHEN DUP_VAL_ON_INDEX THEN
14:28:25  42  	rollback;
14:28:25  43  	out_success := 0;
14:28:25  44  WHEN OTHERS THEN
14:28:25  45  	rollback;
14:28:25  46  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25  47  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25  48  
14:28:25  49  END;
14:28:25  50  
14:28:25  51  PROCEDURE DELETE_RETRY(
14:28:25  52  	  in_process_name IN VARCHAR2,
14:28:25  53  	  in_remove_minutes  IN NUMBER
14:28:25  54  ) AS
14:28:25  55  BEGIN
14:28:25  56  
14:28:25  57  delete from PROCESS_RETRY_THROTTLE
14:28:25  58  where
14:28:25  59  	process_name = in_process_name and
14:28:25  60  	create_date <= sysdate - (in_remove_minutes / (60 * 24));
14:28:25  61  commit;
14:28:25  62  END;
14:28:25  63  
14:28:25  64  PROCEDURE GET_SYSDATE (
14:28:25  65  	out_date  OUT VARCHAR2
14:28:25  66  ) AS
14:28:25  67  BEGIN
14:28:25  68  	SELECT to_char(SYSDATE, 'DD-Mon-YYYY HH24:MI:SS') into out_date from dual;
14:28:25  69  END;
14:28:25  70  
14:28:25  71  END PROCS_PROCESS_RETRY_V23;
14:28:25  72  .
14:28:25 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:25 SQL> 
14:28:25 SQL> prompt Compiling body for procs_notification.sql
Compiling body for procs_notification.sql
14:28:25 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_NOTIFICATION_V23" AS
14:28:25   2  
14:28:25   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
14:28:25   4  /*
14:28:25   5  Throws exceptions:
14:28:25   6  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25   7  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25   8  */
14:28:25   9  	in_notification_type_name IN VARCHAR2,
14:28:25  10  	out_notification_type_id  OUT NUMBER
14:28:25  11  ) AS
14:28:25  12  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NOTIFICATION_TYPE_BY_NAME';
14:28:25  13  BEGIN
14:28:25  14  	SELECT
14:28:25  15  	  NOTIFICATION_TYPE.ID into out_notification_type_id
14:28:25  16  	FROM
14:28:25  17  	  NOTIFICATION_TYPE
14:28:25  18  	WHERE
14:28:25  19  	  NOTIFICATION_TYPE.VALUE = in_notification_type_name;
14:28:25  20  EXCEPTION
14:28:25  21  WHEN NO_DATA_FOUND THEN
14:28:25  22  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25  23  	  SPROC_NAME, 'No such type');
14:28:25  24  WHEN OTHERS THEN
14:28:25  25  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25  26  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25  27  END GET_NOTIFICATION_TYPE_BY_NAME;
14:28:25  28  
14:28:25  29  /******************************************************************/
14:28:25  30  
14:28:25  31  PROCEDURE ADD_NOTIFICATION (
14:28:25  32  /*
14:28:25  33  Throws exceptions:
14:28:25  34  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25  35  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  36  */
14:28:25  37  	in_sender_account_id	 IN NUMBER DEFAULT 0,
14:28:25  38  	in_recipient_group_id	 IN NUMBER,
14:28:25  39  	in_notification_type_id  IN NUMBER,
14:28:25  40  	in_date_to_notify	 IN DATE,
14:28:25  41  	in_email_template_params IN CLOB
14:28:25  42  ) AS
14:28:25  43  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION';
14:28:25  44  -- VARIABLES
14:28:25  45  temp_type_count NUMBER;
14:28:25  46  var_create_date DATE := SYSDATE;
14:28:25  47  -- EXCEPTIONS
14:28:25  48  BAD_NOTIFICATION_TYPE_ID EXCEPTION;
14:28:25  49  CAN_NOT_CREATE_HISTORY   EXCEPTION;
14:28:25  50  EXCEPTION_MESSAGE        VARCHAR2(1024);
14:28:25  51  BEGIN
14:28:25  52  
14:28:25  53  	SELECT
14:28:25  54  	  COUNT(*) into temp_type_count
14:28:25  55  	FROM
14:28:25  56  	  NOTIFICATION_TYPE
14:28:25  57  	WHERE
14:28:25  58  	  NOTIFICATION_TYPE.ID = in_notification_type_id;
14:28:25  59  
14:28:25  60  	IF temp_type_count = 0 THEN
14:28:25  61  	  RAISE BAD_NOTIFICATION_TYPE_ID;
14:28:25  62  	END IF;
14:28:25  63  
14:28:25  64  	INSERT INTO NOTIFICATION (
14:28:25  65  	  ID,
14:28:25  66  	  ACCOUNT_ID,
14:28:25  67  	  GROUP_ID,
14:28:25  68  	  NOTIFICATION_TYPE_ID,
14:28:25  69  	  NOTIFICATION_STATUS_ID,
14:28:25  70  	  EMAIL_TEMPLATE_PARAMS,
14:28:25  71  	  UPDATE_DATE,
14:28:25  72  	  CREATE_DATE,
14:28:25  73  	  DATE_TO_NOTIFY
14:28:25  74  	) VALUES (
14:28:25  75  	  NOT_ID_SEQ.nextVal,
14:28:25  76  	  in_sender_account_id,
14:28:25  77  	  in_recipient_group_id,
14:28:25  78  	  in_notification_type_id,
14:28:25  79  	  NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING,
14:28:25  80  	  in_email_template_params,
14:28:25  81  	  var_create_date,
14:28:25  82  	  var_create_date,
14:28:25  83  	  in_date_to_notify
14:28:25  84  	);
14:28:25  85  
14:28:25  86  	--BEGIN
14:28:25  87  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V23.CREATE_NOTIFICATION_HISTORY (
14:28:25  88  	--    in_account_id		  => 0, -- ACCOUNT_ID. Can we delete it?
14:28:25  89  	--    in_group_id		  => in_recipient_group_id,
14:28:25  90  	--    notification_reason_type_id => in_notification_type_id,
14:28:25  91  	--    notification_status_id	  => NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING,
14:28:25  92  	--    email_template_params	  => in_email_template_params,
14:28:25  93  	--    in_create_date		  => var_create_date
14:28:25  94  	--  );
14:28:25  95  	--  EXCEPTION
14:28:25  96  	--    WHEN OTHERS THEN
14:28:25  97  	--	EXCEPTION_MESSAGE := SQLERRM;
14:28:25  98  	--	RAISE CAN_NOT_CREATE_HISTORY;
14:28:25  99  	--END;
14:28:25 100  
14:28:25 101  EXCEPTION
14:28:25 102  WHEN BAD_NOTIFICATION_TYPE_ID THEN
14:28:25 103  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 104  	  SPROC_NAME, 'No such notification status');
14:28:25 105  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:25 106  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:25 107  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:25 108  WHEN OTHERS THEN
14:28:25 109  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 110  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 111  END ADD_NOTIFICATION;
14:28:25 112  
14:28:25 113  /******************************************************************************/
14:28:25 114  
14:28:25 115  PROCEDURE GET_PENDING_NOTIFICATIONS (
14:28:25 116  /*
14:28:25 117  Throws exceptions:
14:28:25 118  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 119  */
14:28:25 120  	out_result_set OUT SYS_REFCURSOR
14:28:25 121  ) AS
14:28:25 122  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PENDING_NOTIFICATIONS';
14:28:25 123  -- CONSTANTS
14:28:25 124  C_NOTIFICATION_COUNT_LIMIT CONSTANT NUMBER := 500;
14:28:25 125  BEGIN
14:28:25 126  	OPEN out_result_set FOR
14:28:25 127  SELECT * FROM
14:28:25 128  (
14:28:25 129  	SELECT
14:28:25 130  	  NOTIFICATION.ID
14:28:25 131  	FROM
14:28:25 132  	  NOTIFICATION
14:28:25 133  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
14:28:25 134  	WHERE
14:28:25 135  	  ROWNUM <= C_NOTIFICATION_COUNT_LIMIT*10
14:28:25 136  	  AND NOT EXISTS (
14:28:25 137  	    SELECT NULL
14:28:25 138  	    FROM PROCESS_RETRY_THROTTLE
14:28:25 139  	    WHERE GENERIC_ID = NOTIFICATION.ID AND PROCESS_NAME = SPROC_NAME
14:28:25 140  	  )
14:28:25 141  	  AND (
14:28:25 142  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING
14:28:25 143  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V23.NOTIFICATION_FAILED
14:28:25 144  	  )
14:28:25 145  	  AND (
14:28:25 146  	    NOTIFICATION.DATE_TO_NOTIFY IS NULL OR SYSDATE > NOTIFICATION.DATE_TO_NOTIFY
14:28:25 147  	  )ORDER BY dbms_random.value
14:28:25 148  ) WHERE
14:28:25 149  	ROWNUM <= C_NOTIFICATION_COUNT_LIMIT;
14:28:25 150  
14:28:25 151  EXCEPTION
14:28:25 152  WHEN OTHERS THEN
14:28:25 153  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 155  END GET_PENDING_NOTIFICATIONS;
14:28:25 156  
14:28:25 157  /******************************************************************************/
14:28:25 158  
14:28:25 159  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
14:28:25 160  /*
14:28:25 161  Throws exceptions:
14:28:25 162  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 163  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 164  */
14:28:25 165  	in_notification_id IN NUMBER
14:28:25 166  ) AS
14:28:25 167  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_NOTIFICATION_TIMESTAMP';
14:28:25 168  -- VARIABLES
14:28:25 169  temp_notification_id NUMBER;
14:28:25 170  -- EXCEPTIONS
14:28:25 171  BAD_NOTIFICATION_ID EXCEPTION;
14:28:25 172  BEGIN
14:28:25 173  
14:28:25 174  	BEGIN
14:28:25 175  	  SELECT
14:28:25 176  	    NOTIFICATION.ID into temp_notification_id
14:28:25 177  	  FROM
14:28:25 178  	    NOTIFICATION
14:28:25 179  	  WHERE
14:28:25 180  	    NOTIFICATION.ID = in_notification_id;
14:28:25 181  	  EXCEPTION
14:28:25 182  	    WHEN NO_DATA_FOUND THEN
14:28:25 183  	      RAISE BAD_NOTIFICATION_ID;
14:28:25 184  	END;
14:28:25 185  
14:28:25 186  	UPDATE
14:28:25 187  	  NOTIFICATION
14:28:25 188  	SET
14:28:25 189  	  NOTIFICATION.UPDATE_DATE = sysdate
14:28:25 190  	WHERE
14:28:25 191  	  NOTIFICATION.ID = in_notification_id;
14:28:25 192  
14:28:25 193  EXCEPTION
14:28:25 194  WHEN BAD_NOTIFICATION_ID THEN
14:28:25 195  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 196  	  SPROC_NAME, 'No such notification');
14:28:25 197  WHEN OTHERS THEN
14:28:25 198  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 199  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 200  END UPDATE_NOTIFICATION_TIMESTAMP;
14:28:25 201  
14:28:25 202  /******************************************************************************/
14:28:25 203  
14:28:25 204  PROCEDURE SET_NOTIFICATION_STATUS (
14:28:25 205  /*
14:28:25 206  Throws exceptions:
14:28:25 207  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 208  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 209  */
14:28:25 210  	in_notification_id	  IN NUMBER,
14:28:25 211  	in_notification_status_id IN NUMBER,
14:28:25 212  	in_error_message	  IN VARCHAR2
14:28:25 213  ) AS
14:28:25 214  SPROC_NAME CONSTANT VARCHAR2(32) := 'SET_NOTIFICATION_STATUS';
14:28:25 215  -- VARIABLES
14:28:25 216  var_group_id		NUMBER;
14:28:25 217  var_account_id		NUMBER;
14:28:25 218  var_notification_type_id	NUMBER;
14:28:25 219  var_email_template_params CLOB;
14:28:25 220  var_create_history_date	DATE := SYSDATE;
14:28:25 221  var_notification_status_id   NUMBER;
14:28:25 222  var_date_to_notify	DATE;
14:28:25 223  max_fails   NUMBER := 5;
14:28:25 224  num_fails   NUMBER;
14:28:25 225  -- EXCEPTIONS
14:28:25 226  BAD_NOTIFICATION_ID	 EXCEPTION;
14:28:25 227  BAD_NOTIFICATION_STATUS_ID EXCEPTION;
14:28:25 228  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
14:28:25 229  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
14:28:25 230  BEGIN
14:28:25 231  
14:28:25 232  	IF in_notification_status_id != NOTIFICATION_STATUSES_V23.NOTIFICATION_SENT
14:28:25 233  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING
14:28:25 234  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V23.NOTIFICATION_FAILED THEN
14:28:25 235  	  RAISE BAD_NOTIFICATION_STATUS_ID;
14:28:25 236  	END IF;
14:28:25 237  
14:28:25 238  	BEGIN
14:28:25 239  	  SELECT
14:28:25 240  	    NOTIFICATION.GROUP_ID,
14:28:25 241  	    NOTIFICATION.ACCOUNT_ID,
14:28:25 242  	    NOTIFICATION.NOTIFICATION_TYPE_ID,
14:28:25 243  	    NOTIFICATION.NOTIFICATION_STATUS_ID,
14:28:25 244  	    NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
14:28:25 245  	    NOTIFICATION.DATE_TO_NOTIFY
14:28:25 246  	    into
14:28:25 247  	    var_group_id,
14:28:25 248  	    var_account_id,
14:28:25 249  	    var_notification_type_id,
14:28:25 250  	    var_notification_status_id,
14:28:25 251  	    var_email_template_params,
14:28:25 252  	    var_date_to_notify
14:28:25 253  	  FROM
14:28:25 254  	    NOTIFICATION
14:28:25 255  	  WHERE
14:28:25 256  	    NOTIFICATION.ID = in_notification_id;
14:28:25 257  	  EXCEPTION
14:28:25 258  	    WHEN NO_DATA_FOUND THEN
14:28:25 259  	      RAISE BAD_NOTIFICATION_ID;
14:28:25 260  	END;
14:28:25 261  
14:28:25 262  	BEGIN
14:28:25 263  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_NOTIFICATION_HISTORY (
14:28:25 264  	    in_notification_id		=> in_notification_id,
14:28:25 265  	    in_account_id		=> var_account_id,
14:28:25 266  	    in_group_id 		=> var_group_id,
14:28:25 267  	    notification_reason_type_id => var_notification_type_id,
14:28:25 268  	    notification_status_id	=> var_notification_status_id,
14:28:25 269  	    email_template_params	=> var_email_template_params,
14:28:25 270  	    in_create_date		=> var_create_history_date,
14:28:25 271  	    in_date_to_notify		=> var_date_to_notify
14:28:25 272  	  );
14:28:25 273  	  EXCEPTION
14:28:25 274  	    WHEN OTHERS THEN
14:28:25 275  	      EXCEPTION_MESSAGE := SQLERRM;
14:28:25 276  	      RAISE CAN_NOT_CREATE_HISTORY;
14:28:25 277  	END;
14:28:25 278  
14:28:25 279  	UPDATE
14:28:25 280  	  NOTIFICATION
14:28:25 281  	SET
14:28:25 282  	  NOTIFICATION.NOTIFICATION_STATUS_ID = in_notification_status_id,
14:28:25 283  	  NOTIFICATION.UPDATE_DATE = sysdate
14:28:25 284  	WHERE
14:28:25 285  	  NOTIFICATION.ID = in_notification_id;
14:28:25 286  
14:28:25 287  	IF ( in_error_message IS NOT NULL ) THEN
14:28:25 288  	  ADD_NOTIFICATION_FAILURE(
14:28:25 289  	    in_notification_id => in_notification_id,
14:28:25 290  	    in_error_message => in_error_message
14:28:25 291  	  );
14:28:25 292  	END IF;
14:28:25 293  
14:28:25 294  	SELECT COUNT(1) INTO num_fails
14:28:25 295  	FROM NOTIFICATION_FAILURE
14:28:25 296  	WHERE NOTIFICATION_ID = in_notification_id;
14:28:25 297  
14:28:25 298  	IF (in_notification_status_id = NOTIFICATION_STATUSES_V23.NOTIFICATION_SENT OR num_fails >= max_fails) then
14:28:25 299  	  FOR REC IN (
14:28:25 300  	      SELECT ID, NOTIFICATION_ID, ERROR_MESSAGE, CREATE_DATE
14:28:25 301  	      FROM NOTIFICATION_FAILURE
14:28:25 302  	      WHERE NOTIFICATION_ID = in_notification_id
14:28:25 303  	      ) LOOP
14:28:25 304  	      BEGIN
14:28:25 305  		CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_NOTIF_FAILURE_HISTORY(
14:28:25 306  		  in_error_message	   => REC.ERROR_MESSAGE,
14:28:25 307  		  in_notification_id	   => REC.NOTIFICATION_ID,
14:28:25 308  		  in_create_date	   => REC.CREATE_DATE
14:28:25 309  		);
14:28:25 310  		EXCEPTION
14:28:25 311  		  WHEN OTHERS THEN
14:28:25 312  		    EXCEPTION_MESSAGE := SQLERRM;
14:28:25 313  		    RAISE CAN_NOT_CREATE_HISTORY;
14:28:25 314  	      END;
14:28:25 315  	  END LOOP;
14:28:25 316  	  DELETE FROM NOTIFICATION_FAILURE WHERE NOTIFICATION_ID = in_notification_id;
14:28:25 317  
14:28:25 318  	  BEGIN
14:28:25 319  	    SELECT
14:28:25 320  	      NOTIFICATION.GROUP_ID,
14:28:25 321  	      NOTIFICATION.ACCOUNT_ID,
14:28:25 322  	      NOTIFICATION.NOTIFICATION_TYPE_ID,
14:28:25 323  	      NOTIFICATION.NOTIFICATION_STATUS_ID,
14:28:25 324  	      NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
14:28:25 325  	      NOTIFICATION.DATE_TO_NOTIFY
14:28:25 326  	      into
14:28:25 327  	      var_group_id,
14:28:25 328  	      var_account_id,
14:28:25 329  	      var_notification_type_id,
14:28:25 330  	      var_notification_status_id,
14:28:25 331  	      var_email_template_params,
14:28:25 332  	      var_date_to_notify
14:28:25 333  	    FROM
14:28:25 334  	      NOTIFICATION
14:28:25 335  	    WHERE
14:28:25 336  	      NOTIFICATION.ID = in_notification_id;
14:28:25 337  	    EXCEPTION
14:28:25 338  	      WHEN NO_DATA_FOUND THEN
14:28:25 339  		RAISE BAD_NOTIFICATION_ID;
14:28:25 340  	  END;
14:28:25 341  
14:28:25 342  	  BEGIN
14:28:25 343  	    CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V23.CREATE_NOTIFICATION_HISTORY (
14:28:25 344  	      in_notification_id	  => in_notification_id,
14:28:25 345  	      in_account_id		  => var_account_id,
14:28:25 346  	      in_group_id		  => var_group_id,
14:28:25 347  	      notification_reason_type_id => var_notification_type_id,
14:28:25 348  	      notification_status_id	  => var_notification_status_id,
14:28:25 349  	      email_template_params	  => var_email_template_params,
14:28:25 350  	      in_create_date		  => var_create_history_date,
14:28:25 351  	      in_date_to_notify 	  => var_date_to_notify
14:28:25 352  	    );
14:28:25 353  	    EXCEPTION
14:28:25 354  	      WHEN OTHERS THEN
14:28:25 355  		EXCEPTION_MESSAGE := SQLERRM;
14:28:25 356  		RAISE CAN_NOT_CREATE_HISTORY;
14:28:25 357  	  END;
14:28:25 358  
14:28:25 359  	  DELETE FROM NOTIFICATION WHERE ID = in_notification_id;
14:28:25 360  
14:28:25 361  	END IF;
14:28:25 362  	commit;
14:28:25 363  
14:28:25 364  EXCEPTION
14:28:25 365  WHEN BAD_NOTIFICATION_STATUS_ID THEN
14:28:25 366  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 367  	  SPROC_NAME, 'Bad notification status');
14:28:25 368  WHEN BAD_NOTIFICATION_ID THEN
14:28:25 369  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 370  	  SPROC_NAME, 'No such notification');
14:28:25 371  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:25 372  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:25 373  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:25 374  WHEN OTHERS THEN
14:28:25 375  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 376  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 377  END SET_NOTIFICATION_STATUS;
14:28:25 378  
14:28:25 379  /******************************************************************************/
14:28:25 380  
14:28:25 381  PROCEDURE ADD_NOTIFICATION_FAILURE (
14:28:25 382  /*
14:28:25 383  Throws exceptions:
14:28:25 384  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 385  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 386  */
14:28:25 387  	in_notification_id IN NUMBER,
14:28:25 388  	in_error_message   IN VARCHAR2
14:28:25 389  ) AS
14:28:25 390  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION_FAILURE';
14:28:25 391  -- VARIABLES
14:28:25 392  temp_notification_id NUMBER;
14:28:25 393  var_create_date	   DATE := SYSDATE;
14:28:25 394  -- EXCEPTIONS
14:28:25 395  BAD_NOTIFICATION_ID	 EXCEPTION;
14:28:25 396  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
14:28:25 397  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
14:28:25 398  BEGIN
14:28:25 399  
14:28:25 400  	BEGIN
14:28:25 401  	  SELECT
14:28:25 402  	    NOTIFICATION.ID into temp_notification_id
14:28:25 403  	  FROM
14:28:25 404  	    NOTIFICATION
14:28:25 405  	  WHERE
14:28:25 406  	    NOTIFICATION.ID = in_notification_id;
14:28:25 407  	  EXCEPTION
14:28:25 408  	    WHEN NO_DATA_FOUND THEN
14:28:25 409  	      RAISE BAD_NOTIFICATION_ID;
14:28:25 410  	END;
14:28:25 411  
14:28:25 412  	INSERT INTO NOTIFICATION_FAILURE (
14:28:25 413  	  ID,
14:28:25 414  	  NOTIFICATION_ID,
14:28:25 415  	  ERROR_MESSAGE,
14:28:25 416  	  CREATE_DATE
14:28:25 417  	) VALUES (
14:28:25 418  	  NOTF_ID_SEQ.nextVal,
14:28:25 419  	  in_notification_id,
14:28:25 420  	  in_error_message,
14:28:25 421  	  sysdate
14:28:25 422  	);
14:28:25 423  
14:28:25 424  	--BEGIN
14:28:25 425  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V23.CREATE_NOTIF_FAILURE_HISTORY(
14:28:25 426  	--    in_error_message	       => in_error_message,
14:28:25 427  	--    in_notification_queue_id => in_notification_id,
14:28:25 428  	--    in_create_date	       => var_create_date
14:28:25 429  	--  );
14:28:25 430  	--  EXCEPTION
14:28:25 431  	--    WHEN OTHERS THEN
14:28:25 432  	--	EXCEPTION_MESSAGE := SQLERRM;
14:28:25 433  	--	RAISE CAN_NOT_CREATE_HISTORY;
14:28:25 434  	--END;
14:28:25 435  
14:28:25 436  EXCEPTION
14:28:25 437  WHEN BAD_NOTIFICATION_ID THEN
14:28:25 438  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 439  	  SPROC_NAME, 'No such notification');
14:28:25 440  WHEN CAN_NOT_CREATE_HISTORY THEN
14:28:25 441  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
14:28:25 442  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
14:28:25 443  WHEN OTHERS THEN
14:28:25 444  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 445  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 446  END ADD_NOTIFICATION_FAILURE;
14:28:25 447  
14:28:25 448  /******************************************************************************/
14:28:25 449  
14:28:25 450  PROCEDURE LOCK_PENDING_NOTIFICATION (
14:28:25 451  /*
14:28:25 452  Result: GLOBAL_STATUSES.TRUE if notification locked
14:28:25 453  GLOBA_STATUSES.FALSE - else
14:28:25 454  */
14:28:25 455  	in_notification_id IN NUMBER,
14:28:25 456  	out_lock_status    OUT NUMBER
14:28:25 457  ) AS
14:28:25 458  SPROC_NAME CONSTANT VARCHAR2(25) := 'LOCK_PENDING_NOTIFICATION';
14:28:25 459  -- VARIABLE
14:28:25 460  temp_notification_id NUMBER;
14:28:25 461  BEGIN
14:28:25 462  	SELECT
14:28:25 463  	  NOTIFICATION.ID into temp_notification_id
14:28:25 464  	FROM
14:28:25 465  	  NOTIFICATION
14:28:25 466  	WHERE
14:28:25 467  	  NOTIFICATION.ID = in_notification_id
14:28:25 468  	  AND (
14:28:25 469  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V23.NOTIFICATION_PENDING
14:28:25 470  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V23.NOTIFICATION_FAILED
14:28:25 471  	  )
14:28:25 472  	FOR UPDATE;
14:28:25 473  
14:28:25 474  	out_lock_status := 1;
14:28:25 475  
14:28:25 476  EXCEPTION
14:28:25 477  WHEN NO_DATA_FOUND THEN
14:28:25 478  	out_lock_status := 0;
14:28:25 479  WHEN OTHERS THEN
14:28:25 480  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 481  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 482  END LOCK_PENDING_NOTIFICATION;
14:28:25 483  
14:28:25 484  /******************************************************************************/
14:28:25 485  
14:28:25 486  PROCEDURE GET_NOTIFICATION_DATA (
14:28:25 487  	in_notification_id IN NUMBER,
14:28:25 488  	out_result_set	   OUT SYS_REFCURSOR
14:28:25 489  ) AS
14:28:25 490  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_NOTIFICATION_DATA';
14:28:25 491  BEGIN
14:28:25 492  	OPEN out_result_set FOR
14:28:25 493  	SELECT
14:28:25 494  	  NOTIFICATION.ID,
14:28:25 495  	  NOTIFICATION.GROUP_ID,
14:28:25 496  	  NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
14:28:25 497  	  NOTIFICATION.NOTIFICATION_STATUS_ID,
14:28:25 498  	  NOTIFICATION.CREATE_DATE,
14:28:25 499  	  NOTIFICATION.UPDATE_DATE,
14:28:25 500  	  NOTIFICATION.NOTIFICATION_TYPE_ID,
14:28:25 501  	  NOTIFICATION_TYPE.VALUE as "TYPE_VALUE",
14:28:25 502  	  NOTIFICATION_TYPE.TEMPLATE_URL
14:28:25 503  	FROM
14:28:25 504  	  NOTIFICATION
14:28:25 505  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
14:28:25 506  	WHERE
14:28:25 507  	  NOTIFICATION.ID = in_notification_id;
14:28:25 508  
14:28:25 509  EXCEPTION
14:28:25 510  WHEN OTHERS THEN
14:28:25 511  	PROCS_COMMON_V23.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
14:28:25 512  	  SPROC_NAME, 'Unknown error', SQLERRM);
14:28:25 513  END GET_NOTIFICATION_DATA;
14:28:25 514  
14:28:25 515  END PROCS_NOTIFICATION_V23;
14:28:25 516  .
14:28:25 SQL> /

Package body created.

Elapsed: 00:00:00.05
14:28:25 SQL> 
14:28:25 SQL> prompt Compiling body for public_procs_billing.sql
Compiling body for public_procs_billing.sql
14:28:25 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V23" AS
14:28:25   2  
14:28:25   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:28:25   4  /*
14:28:25   5  Throws exceptions:
14:28:25   6  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25   7  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25   8  */
14:28:25   9  	  in_offer_chain_id IN	 NUMBER,
14:28:25  10  	  out_result_set    OUT  SYS_REFCURSOR
14:28:25  11  ) AS
14:28:25  12  BEGIN
14:28:25  13  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_BY_ID (
14:28:25  14  	  in_offer_chain_id => in_offer_chain_id,
14:28:25  15  	  out_result_set => out_result_set
14:28:25  16  	);
14:28:25  17  END GET_OFFER_CHAIN_BY_ID;
14:28:25  18  
14:28:25  19  PROCEDURE GET_PENDING_INVOICES (
14:28:25  20  /*
14:28:25  21  Throws exceptions:
14:28:25  22  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  23  */
14:28:25  24  	out_result_set	     OUT SYS_REFCURSOR,
14:28:25  25  	in_row_number	     IN NUMBER DEFAULT NULL
14:28:25  26  ) AS
14:28:25  27  BEGIN
14:28:25  28  	PROCS_INVOICE_V23.GET_PENDING_INVOICES(
14:28:25  29  	  out_result_set,
14:28:25  30  	  in_row_number
14:28:25  31  	);
14:28:25  32  END GET_PENDING_INVOICES;
14:28:25  33  
14:28:25  34  /********************************************************/
14:28:25  35  PROCEDURE GET_PENDING_REFUND_CHARGES (
14:28:25  36  /*
14:28:25  37  Throws exceptions:
14:28:25  38  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  39  */
14:28:25  40  	out_result_set	    OUT SYS_REFCURSOR,
14:28:25  41  	in_row_number	    IN NUMBER DEFAULT NULL
14:28:25  42  ) AS
14:28:25  43  BEGIN
14:28:25  44  	PROCS_CHARGE_V23.GET_PENDING_REFUND_CHARGES(
14:28:25  45  	  out_result_set,
14:28:25  46  	  in_row_number
14:28:25  47  	);
14:28:25  48  END GET_PENDING_REFUND_CHARGES;
14:28:25  49  /********************************************************/
14:28:25  50  
14:28:25  51  PROCEDURE GET_UNPROCESSED_CHARGES (
14:28:25  52  /*
14:28:25  53  Throws exceptions:
14:28:25  54  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25  55  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  56  */
14:28:25  57  	in_invoice_id  IN NUMBER,
14:28:25  58  	out_result_set OUT SYS_REFCURSOR
14:28:25  59  ) AS
14:28:25  60  BEGIN
14:28:25  61  	PROCS_CHARGE_V23.GET_UNPROCESSED_CHARGES(
14:28:25  62  	  in_invoice_id,
14:28:25  63  	  out_result_set
14:28:25  64  	);
14:28:25  65  END GET_UNPROCESSED_CHARGES;
14:28:25  66  
14:28:25  67  /********************************************************/
14:28:25  68  
14:28:25  69  PROCEDURE GET_PROCESSED_CHARGES (
14:28:25  70  /*
14:28:25  71  Throws exceptions:
14:28:25  72  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25  73  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  74  */
14:28:25  75  	in_invoice_id  IN NUMBER,
14:28:25  76  	out_result_set OUT SYS_REFCURSOR
14:28:25  77  ) AS
14:28:25  78  BEGIN
14:28:25  79  	PROCS_CHARGE_V23.GET_PROCESSED_CHARGES(
14:28:25  80  	  in_invoice_id,
14:28:25  81  	  out_result_set
14:28:25  82  	);
14:28:25  83  END GET_PROCESSED_CHARGES;
14:28:25  84  
14:28:25  85  /********************************************************/
14:28:25  86  
14:28:25  87  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
14:28:25  88  /*
14:28:25  89  Throws exceptions:
14:28:25  90  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  91  */
14:28:25  92  	in_transaction_id	      IN NUMBER,
14:28:25  93  	in_transaction_attempt_status IN NUMBER,
14:28:25  94  	out_result_set		      OUT SYS_REFCURSOR
14:28:25  95  ) AS
14:28:25  96  BEGIN
14:28:25  97  	PROCS_TRANSACTION_V23.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
14:28:25  98  	  in_transaction_id,
14:28:25  99  	  in_transaction_attempt_status,
14:28:25 100  	  out_result_set
14:28:25 101  	);
14:28:25 102  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
14:28:25 103  
14:28:25 104  /********************************************************/
14:28:25 105  
14:28:25 106  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
14:28:25 107  /*
14:28:25 108  Throws exceptions:
14:28:25 109  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 110  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 111  */
14:28:25 112  	in_transaction_attempt_id     IN NUMBER,
14:28:25 113  	in_transaction_attempt_status IN NUMBER
14:28:25 114  ) AS
14:28:25 115  BEGIN
14:28:25 116  	PROCS_TRANSACTION_V23.UPDATE_TRNSCTN_ATTEMPT_STATUS(
14:28:25 117  	   in_transaction_attempt_id,
14:28:25 118  	   in_transaction_attempt_status
14:28:25 119  	);
14:28:25 120  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
14:28:25 121  
14:28:25 122  /********************************************************/
14:28:25 123  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
14:28:25 124  /*
14:28:25 125  Throws exceptions:
14:28:25 126  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 127  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 128  */
14:28:25 129  	in_invoice_id	IN  NUMBER,
14:28:25 130  	out_result_set OUT SYS_REFCURSOR
14:28:25 131  ) AS
14:28:25 132  BEGIN
14:28:25 133  	PROCS_TRANSACTION_V23.GET_CLOSED_REFUNDS_BY_INVOICE(
14:28:25 134  	   in_invoice_id,
14:28:25 135  	   out_result_set
14:28:25 136  	);
14:28:25 137  END GET_CLOSED_REFUNDS_BY_INVOICE;
14:28:25 138  
14:28:25 139  /********************************************************/
14:28:25 140  
14:28:25 141  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
14:28:25 142  /*
14:28:25 143  Throws exceptions:
14:28:25 144  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 145  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 146  */
14:28:25 147  	in_transaction_attempt_id IN NUMBER,
14:28:25 148  	in_updated_by		  IN VARCHAR2
14:28:25 149  ) AS
14:28:25 150  BEGIN
14:28:25 151  	PROCS_TRANSACTION_V23.UPDATE_TRNSCTN_ATTEMPT_TIME(
14:28:25 152  	  in_transaction_attempt_id,
14:28:25 153  	  in_updated_by
14:28:25 154  	);
14:28:25 155  END UPDATE_TRNSCTN_ATTEMPT_TIME;
14:28:25 156  
14:28:25 157  /********************************************************/
14:28:25 158  
14:28:25 159  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
14:28:25 160  /*
14:28:25 161  Throws exceptions:
14:28:25 162  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 163  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 164  */
14:28:25 165  	in_transaction_id	   IN NUMBER,
14:28:25 166  	in_trans_attempt_status    IN NUMBER,
14:28:25 167  	in_external_status_code    IN VARCHAR2,
14:28:25 168  	in_external_status_message IN VARCHAR2,
14:28:25 169  	in_created_by		   IN VARCHAR2,
14:28:25 170  	in_ext_transaction_id	   IN VARCHAR2,
14:28:25 171  	out_transaction_attempt_id OUT NUMBER
14:28:25 172  ) AS
14:28:25 173  BEGIN
14:28:25 174  	PROCS_TRANSACTION_V23.CREATE_TRANSACTION_ATTEMPT(
14:28:25 175  	  in_transaction_id,
14:28:25 176  	  in_trans_attempt_status,
14:28:25 177  	  in_external_status_code,
14:28:25 178  	  in_external_status_message,
14:28:25 179  	  in_created_by,
14:28:25 180  	  in_ext_transaction_id,
14:28:25 181  	  out_transaction_attempt_id
14:28:25 182  	);
14:28:25 183  END CREATE_TRANSACTION_ATTEMPT;
14:28:25 184  
14:28:25 185  /********************************************************/
14:28:25 186  
14:28:25 187  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
14:28:25 188  /*
14:28:25 189  Throws exceptions:
14:28:25 190  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 191  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 192  */
14:28:25 193  	in_transaction_attempt_id IN NUMBER,
14:28:25 194  	in_ext_status_code	  IN VARCHAR2,
14:28:25 195  	in_ext_status_message	  IN VARCHAR2,
14:28:25 196  	in_ext_transaction_id	  IN VARCHAR2
14:28:25 197  ) AS
14:28:25 198  BEGIN
14:28:25 199  	PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_ATTEMPT_INF(
14:28:25 200  	  in_transaction_attempt_id,
14:28:25 201  	  in_ext_status_code,
14:28:25 202  	  in_ext_status_message,
14:28:25 203  	  in_ext_transaction_id
14:28:25 204  	);
14:28:25 205  END UPDATE_TRANSACTION_ATTEMPT_INF;
14:28:25 206  
14:28:25 207  /********************************************************/
14:28:25 208  
14:28:25 209  PROCEDURE UPDATE_TRANSACTION_STATUS (
14:28:25 210  /*
14:28:25 211  Throws exceptions:
14:28:25 212  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 213  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 214  */
14:28:25 215  	in_transaction_id	 IN NUMBER,
14:28:25 216  	in_updated_by		 IN VARCHAR2,
14:28:25 217  	in_transaction_status_id IN NUMBER
14:28:25 218  ) AS
14:28:25 219  BEGIN
14:28:25 220  	PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_STATUS(
14:28:25 221  	  in_transaction_id,
14:28:25 222  	  in_updated_by,
14:28:25 223  	  in_transaction_status_id
14:28:25 224  	);
14:28:25 225  END UPDATE_TRANSACTION_STATUS;
14:28:25 226  
14:28:25 227  /********************************************************/
14:28:25 228  
14:28:25 229  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
14:28:25 230  /*
14:28:25 231  Throws exceptions:
14:28:25 232  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 233  */
14:28:25 234  	in_transaction_id IN  NUMBER,
14:28:25 235  	out_attempts_num  OUT NUMBER
14:28:25 236  ) AS
14:28:25 237  BEGIN
14:28:25 238  	PROCS_TRANSACTION_V23.GET_FAILED_ATTEMPTS_NUMBER(
14:28:25 239  	  in_transaction_id,
14:28:25 240  	  out_attempts_num
14:28:25 241  	);
14:28:25 242  END GET_FAILED_ATTEMPTS_NUMBER;
14:28:25 243  
14:28:25 244  /********************************************************/
14:28:25 245  
14:28:25 246  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
14:28:25 247  /*
14:28:25 248  Throws exceptions:
14:28:25 249  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 250  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 251  */
14:28:25 252  	in_transaction_id IN  NUMBER,
14:28:25 253  	out_is_successfull  OUT NUMBER
14:28:25 254  ) AS
14:28:25 255  BEGIN
14:28:25 256  	PROCS_TRANSACTION_V23.IS_TRANSACTION_SUCCESSFULL(
14:28:25 257  	  in_transaction_id,
14:28:25 258  	  out_is_successfull
14:28:25 259  	);
14:28:25 260  END IS_TRANSACTION_SUCCESSFULL;
14:28:25 261  /********************************************************/
14:28:25 262  
14:28:25 263  PROCEDURE UPDATE_INVOICE_STATUS (
14:28:25 264  /*
14:28:25 265  Throws exceptions:
14:28:25 266  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 267  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 268  */
14:28:25 269  	in_invoice_id		       IN NUMBER,
14:28:25 270  	in_invoice_status_id	       IN NUMBER,
14:28:25 271  	in_updated_by		       IN VARCHAR2
14:28:25 272  ) AS
14:28:25 273  BEGIN
14:28:25 274  	PROCS_INVOICE_V23.UPDATE_INVOICE_STATUS(
14:28:25 275  	  in_invoice_id,
14:28:25 276  	  in_invoice_status_id,
14:28:25 277  	  in_updated_by
14:28:25 278  	);
14:28:25 279  END UPDATE_INVOICE_STATUS;
14:28:25 280  
14:28:25 281  /********************************************************/
14:28:25 282  
14:28:25 283  PROCEDURE SUSPEND_SUBSCRIPTION(
14:28:25 284  /*
14:28:25 285  Throws exceptions:
14:28:25 286  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 287  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:25 288  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 289  */
14:28:25 290  	  in_subs_id	IN NUMBER ,
14:28:25 291  	  in_updated_by IN VARCHAR2
14:28:25 292  ) AS
14:28:25 293  BEGIN
14:28:25 294  	PROCS_SUBSCRIPTION_V23.SUSPEND_SUBSCRIPTION(
14:28:25 295  	  in_subs_id,
14:28:25 296  	  in_updated_by
14:28:25 297  	);
14:28:25 298  END SUSPEND_SUBSCRIPTION;
14:28:25 299  
14:28:25 300  /********************************************************/
14:28:25 301  
14:28:25 302  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:28:25 303  /*
14:28:25 304  Throws exceptions:
14:28:25 305  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 306  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 307  */
14:28:25 308  	in_credit_card_id IN  NUMBER,
14:28:25 309  	out_result_set	  OUT SYS_REFCURSOR
14:28:25 310  ) AS
14:28:25 311  BEGIN
14:28:25 312  	PROCS_FIN_INSTRUMENTS_V23.GET_CREDIT_CARD_BY_ID(
14:28:25 313  	  in_credit_card_id,
14:28:25 314  	  out_result_set
14:28:25 315  	);
14:28:25 316  END GET_CREDIT_CARD_BY_ID;
14:28:25 317  
14:28:25 318  /*********************************************************/
14:28:25 319  
14:28:25 320  PROCEDURE GET_TRANSACTION_AMOUNT (
14:28:25 321  /*
14:28:25 322  Throws exceptions:
14:28:25 323  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 324  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 325  */
14:28:25 326  	in_transaction_id      IN  NUMBER,
14:28:25 327  	out_transaction_amount OUT NUMBER
14:28:25 328  ) AS
14:28:25 329  BEGIN
14:28:25 330  	PROCS_TRANSACTION_V23.GET_TRANSACTION_AMOUNT(
14:28:25 331  	  in_transaction_id,
14:28:25 332  	  out_transaction_amount
14:28:25 333  	);
14:28:25 334  END GET_TRANSACTION_AMOUNT;
14:28:25 335  
14:28:25 336  /***********************************************************/
14:28:25 337  
14:28:25 338  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
14:28:25 339  /*
14:28:25 340  Throws exceptions:
14:28:25 341  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 342  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 343  */
14:28:25 344  	in_invoice_id  IN  NUMBER,
14:28:25 345  	out_account_id OUT NUMBER
14:28:25 346  ) AS
14:28:25 347  BEGIN
14:28:25 348  	PROCS_INVOICE_V23.GET_ACCOUNT_BY_INVOICE_ID(
14:28:25 349  	  in_invoice_id,
14:28:25 350  	  out_account_id
14:28:25 351  	);
14:28:25 352  END GET_ACCOUNT_BY_INVOICE_ID;
14:28:25 353  
14:28:25 354  /************************************************************/
14:28:25 355  
14:28:25 356  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
14:28:25 357  /*
14:28:25 358  Throws exceptions:
14:28:25 359  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 360  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 361  */
14:28:25 362  	in_gift_certificate_id IN NUMBER,
14:28:25 363  	out_result_set	       OUT SYS_REFCURSOR
14:28:25 364  ) AS
14:28:25 365  BEGIN
14:28:25 366  	PROCS_FIN_INSTRUMENTS_V23.GET_GIFT_CERTIFICATE_BY_ID (
14:28:25 367  	  in_gift_certificate_id,
14:28:25 368  	  out_result_set
14:28:25 369  	);
14:28:25 370  END GET_GIFT_CERTIFICATE_BY_ID;
14:28:25 371  
14:28:25 372  /**************************************************************/
14:28:25 373  
14:28:25 374  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
14:28:25 375  /*
14:28:25 376  Throws exceptions:
14:28:25 377  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 378  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 379  */
14:28:25 380  	in_charge_id	    IN NUMBER,
14:28:25 381  	out_subscription_id OUT NUMBER
14:28:25 382  ) AS
14:28:25 383  BEGIN
14:28:25 384  	PROCS_CHARGE_V23.GET_SUBSCR_ID_BY_CHARGE_ID(
14:28:25 385  	  in_charge_id,
14:28:25 386  	  out_subscription_id
14:28:25 387  	);
14:28:25 388  END GET_SUBSCR_ID_BY_CHARGE_ID;
14:28:25 389  
14:28:25 390  /**************************************************************/
14:28:25 391  
14:28:25 392  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
14:28:25 393  /*
14:28:25 394  Throws exceptions:
14:28:25 395  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 396  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 397  */
14:28:25 398  	in_gift_certificate_id IN NUMBER,
14:28:25 399  	in_charge_id	       IN NUMBER,
14:28:25 400  	out_result	       OUT NUMBER
14:28:25 401  ) AS
14:28:25 402  BEGIN
14:28:25 403  	PROCS_FIN_INSTRUMENTS_V23.IS_GCERT_FOR_PROPER_OFFER (
14:28:25 404  	  in_gift_certificate_id,
14:28:25 405  	  in_charge_id,
14:28:25 406  	  out_result
14:28:25 407  	);
14:28:25 408  END IS_GCERT_FOR_PROPER_OFFER;
14:28:25 409  
14:28:25 410  /**************************************************************/
14:28:25 411  
14:28:25 412  PROCEDURE GET_SUBSCRIPTION_INFO (
14:28:25 413  /*
14:28:25 414  Throws exceptions:
14:28:25 415  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 416  */
14:28:25 417  	  in_subscription_id IN  NUMBER,
14:28:25 418  	  out_result_set      OUT SYS_REFCURSOR
14:28:25 419  ) AS
14:28:25 420  BEGIN
14:28:25 421  	PROCS_SUBSCRIPTION_V23.GET_SUBSCRIPTION_INFO (
14:28:25 422  	  in_subscription_id,
14:28:25 423  	  out_result_set
14:28:25 424  	);
14:28:25 425  END GET_SUBSCRIPTION_INFO;
14:28:25 426  
14:28:25 427  /****************************************************************/
14:28:25 428  
14:28:25 429  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:28:25 430  /*
14:28:25 431  Throws exceptions:
14:28:25 432  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 433  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 434  */
14:28:25 435  	in_invoice_id IN  NUMBER,
14:28:25 436  	out_amount    OUT NUMBER
14:28:25 437  ) AS
14:28:25 438  BEGIN
14:28:25 439  	PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT (
14:28:25 440  	  in_invoice_id,
14:28:25 441  	  out_amount
14:28:25 442  	);
14:28:25 443  END CALCULATE_INVOICE_AMOUNT;
14:28:25 444  
14:28:25 445  /****************************************************************/
14:28:25 446  
14:28:25 447  PROCEDURE GET_TRANSACTION_BY_ID (
14:28:25 448  /*
14:28:25 449  Throws exceptions:
14:28:25 450  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 451  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 452  */
14:28:25 453  	in_transaction_id IN NUMBER,
14:28:25 454  	out_result_set	  OUT SYS_REFCURSOR
14:28:25 455  ) AS
14:28:25 456  BEGIN
14:28:25 457  	PROCS_TRANSACTION_V23.GET_TRANSACTION_BY_ID(
14:28:25 458  	  in_transaction_id,
14:28:25 459  	  out_result_set
14:28:25 460  	);
14:28:25 461  END GET_TRANSACTION_BY_ID;
14:28:25 462  
14:28:25 463  /****************************************************************/
14:28:25 464  
14:28:25 465  PROCEDURE UPDATE_CHARGE_STATUS (
14:28:25 466  /*
14:28:25 467  Throws exceptions:
14:28:25 468  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 469  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 470  */
14:28:25 471  	in_charge_id	    IN CHARGE.ID%TYPE,
14:28:25 472  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
14:28:25 473  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
14:28:25 474  ) AS
14:28:25 475  BEGIN
14:28:25 476  	PROCS_CHARGE_V23.UPDATE_CHARGE_STATUS(
14:28:25 477  	  in_charge_id,
14:28:25 478  	  in_charge_status_id,
14:28:25 479  	  in_updated_by
14:28:25 480  	);
14:28:25 481  END UPDATE_CHARGE_STATUS;
14:28:25 482  
14:28:25 483  /****************************************************************/
14:28:25 484  
14:28:25 485  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:28:25 486  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:25 487  	out_result_set OUT SYS_REFCURSOR
14:28:25 488  ) AS
14:28:25 489  BEGIN
14:28:25 490  	PROCS_FIN_INSTRUMENTS_V23.GET_GC_BY_PURCH_INVOICE_ID(
14:28:25 491  	  in_invoice_id,
14:28:25 492  	  out_result_set
14:28:25 493  	);
14:28:25 494  END GET_GC_BY_PURCH_INVOICE_ID;
14:28:25 495  
14:28:25 496  /****************************************************************/
14:28:25 497  
14:28:25 498  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
14:28:25 499  /*
14:28:25 500  Throws exceptions:
14:28:25 501  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 502  APP_EXCEPTION_CODES_V23.INTRNAL_ERROR
14:28:25 503  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 504  */
14:28:25 505  	in_transaction_id IN TRANSACTION.ID%TYPE,
14:28:25 506  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
14:28:25 507  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
14:28:25 508  ) AS
14:28:25 509  BEGIN
14:28:25 510  	PROCS_TRANSACTION_V23.UPDATE_TRANSACTION_ORDER_ID(
14:28:25 511  	  in_transaction_id,
14:28:25 512  	  in_order_id,
14:28:25 513  	  in_updated_by
14:28:25 514  	);
14:28:25 515  END UPDATE_TRANSACTION_ORDER_ID;
14:28:25 516  
14:28:25 517  /****************************************************************/
14:28:25 518  
14:28:25 519  PROCEDURE GET_ACTIVE_INVOICES_IDS (
14:28:25 520  /*
14:28:25 521  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 522  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 523  */
14:28:25 524  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
14:28:25 525  	in_subscription_id IN NUMBER,
14:28:25 526  	out_result_set	   OUT SYS_REFCURSOR
14:28:25 527  ) AS
14:28:25 528  BEGIN
14:28:25 529  	PROCS_SUBSCRIPTION_V23.GET_ACTIVE_INVOICES_IDS(
14:28:25 530  	  in_subscription_id,
14:28:25 531  	  out_result_set
14:28:25 532  	);
14:28:25 533  END GET_ACTIVE_INVOICES_IDS;
14:28:25 534  
14:28:25 535  /****************************************************************/
14:28:25 536  
14:28:25 537  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
14:28:25 538  /*
14:28:25 539  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 540  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 541  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:25 542  */
14:28:25 543  --  in_invoice_id        IN INVOICE.ID%TYPE,
14:28:25 544  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
14:28:25 545  -- norlov: in_refundable	      IN refund enabled
14:28:25 546  	in_invoice_id	     IN NUMBER,
14:28:25 547  	in_updated_by	     IN VARCHAR2,
14:28:25 548  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V23.FALSE
14:28:25 549  --  in_cancellation_date IN DATE DEFAULT current_timestamp
14:28:25 550  ) AS
14:28:25 551  BEGIN
14:28:25 552  	PROCS_SUBSCRIPTION_V23.CANCEL_SUBSCRIPTION_INVOICE(
14:28:25 553  	  in_invoice_id,
14:28:25 554  	  in_updated_by,
14:28:25 555  	  in_refundable
14:28:25 556  	);
14:28:25 557  END CANCEL_SUBSCRIPTION_INVOICE;
14:28:25 558  
14:28:25 559  /****************************************************************/
14:28:25 560  
14:28:25 561  PROCEDURE FINALIZE_CANCELATION (
14:28:25 562  /*
14:28:25 563  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 564  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 565  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:25 566  */
14:28:25 567  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
14:28:25 568  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
14:28:25 569  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
14:28:25 570  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
14:28:25 571  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
14:28:25 572  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
14:28:25 573  	in_subscription_id    IN NUMBER,
14:28:25 574  	in_cancelation_reason IN VARCHAR2,
14:28:25 575  	in_cancelation_date   IN DATE,
14:28:25 576  	in_note 	      IN VARCHAR2,
14:28:25 577  	in_agent_id	      IN NUMBER,
14:28:25 578  	in_updated_by	      IN VARCHAR2
14:28:25 579  ) AS
14:28:25 580  BEGIN
14:28:25 581  	PROCS_SUBSCRIPTION_V23.FINALIZE_CANCELATION(
14:28:25 582  	  in_subscription_id,
14:28:25 583  	  in_cancelation_reason,
14:28:25 584  	  in_cancelation_date,
14:28:25 585  	  in_note,
14:28:25 586  	  in_agent_id,
14:28:25 587  	  in_updated_by
14:28:25 588  	);
14:28:25 589  END FINALIZE_CANCELATION;
14:28:25 590  
14:28:25 591  /****************************************************************/
14:28:25 592  
14:28:25 593  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
14:28:25 594  /*
14:28:25 595  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 596  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 597  */
14:28:25 598  	in_subscription_id IN NUMBER,
14:28:25 599  	out_result_set	   OUT SYS_REFCURSOR
14:28:25 600  ) AS
14:28:25 601  BEGIN
14:28:25 602  	PROCS_SUBSCRIPTION_V23.GET_SUBSCR_PROD_OFFERRINGS(
14:28:25 603  	  in_subscription_id,
14:28:25 604  	  out_result_set
14:28:25 605  	);
14:28:25 606  END GET_SUBSCR_PROD_OFFERRINGS;
14:28:25 607  
14:28:25 608  /****************************************************************/
14:28:25 609  
14:28:25 610  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:28:25 611  /*
14:28:25 612  Throws exceptions (codes):
14:28:25 613  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 614  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 615  */
14:28:25 616  	in_offer_chain_id IN NUMBER,
14:28:25 617  	in_meta_data_name IN VARCHAR2,
14:28:25 618  	out_result_set	  OUT SYS_REFCURSOR
14:28:25 619  )AS
14:28:25 620  BEGIN
14:28:25 621  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_META_DATA(
14:28:25 622  	  in_offer_chain_id,
14:28:25 623  	  in_meta_data_name,
14:28:25 624  	  out_result_set
14:28:25 625  	);
14:28:25 626  END GET_OFFER_CHAIN_META_DATA;
14:28:25 627  
14:28:25 628  /****************************************************************/
14:28:25 629  
14:28:25 630  PROCEDURE READ_ACCOUNT (
14:28:25 631  	in_account_id  IN ACCOUNT.ID%TYPE,
14:28:25 632  	out_result_set OUT SYS_REFCURSOR
14:28:25 633  )AS
14:28:25 634  BEGIN
14:28:25 635  	PROCS_ACCOUNT_CRU_V23.READ_ACCOUNT(
14:28:25 636  	  in_account_id,
14:28:25 637  	  out_result_set
14:28:25 638  	);
14:28:25 639  END READ_ACCOUNT;
14:28:25 640  
14:28:25 641  /****************************************************************/
14:28:25 642  
14:28:25 643  PROCEDURE GET_COLLECTED_CHARGES (
14:28:25 644  /*
14:28:25 645  Throws exceptions:
14:28:25 646  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 647  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 648  */
14:28:25 649  	in_invoice_id  IN NUMBER,
14:28:25 650  	out_result_set OUT SYS_REFCURSOR
14:28:25 651  ) AS
14:28:25 652  BEGIN
14:28:25 653  	PROCS_CHARGE_V23.GET_COLLECTED_CHARGES(
14:28:25 654  	  in_invoice_id,
14:28:25 655  	  out_result_set
14:28:25 656  	);
14:28:25 657  END GET_COLLECTED_CHARGES;
14:28:25 658  
14:28:25 659  /****************************************************************/
14:28:25 660  
14:28:25 661  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
14:28:25 662  /*
14:28:25 663  Throws exceptions:
14:28:25 664  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 665  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 666  */
14:28:25 667  	in_invoice_id IN NUMBER,
14:28:25 668  	out_group_ids OUT SYS_REFCURSOR
14:28:25 669  ) AS
14:28:25 670  BEGIN
14:28:25 671  
14:28:25 672  	PROCS_ACCOUNT_V23.GET_GROUPS_ID_BY_INVOICE_ID(
14:28:25 673  	  in_invoice_id,
14:28:25 674  	  out_group_ids
14:28:25 675  	);
14:28:25 676  
14:28:25 677  END GET_GROUPS_ID_BY_INVOICE_ID;
14:28:25 678  
14:28:25 679  /****************************************************************/
14:28:25 680  
14:28:25 681  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:28:25 682  /*
14:28:25 683  Throws exceptions:
14:28:25 684  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 685  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 686  */
14:28:25 687  	in_group_id IN NUMBER,
14:28:25 688  	out_account_id	OUT NUMBER
14:28:25 689  ) AS
14:28:25 690  BEGIN
14:28:25 691  
14:28:25 692  	PROCS_ACCOUNT_V23.GET_ACCOUNT_ID_BY_GROUP_ID(
14:28:25 693  	  in_group_id,
14:28:25 694  	  out_account_id
14:28:25 695  	);
14:28:25 696  
14:28:25 697  END GET_ACCOUNT_ID_BY_GROUP_ID;
14:28:25 698  
14:28:25 699  /****************************************************************/
14:28:25 700  
14:28:25 701  PROCEDURE LOCK_ACCOUNT (
14:28:25 702  	in_group_id    IN NUMBER,
14:28:25 703  	in_lock_key    IN VARCHAR2,
14:28:25 704  	in_seconds_num IN NUMBER,
14:28:25 705  	in_created_by  IN VARCHAR2,
14:28:25 706  	in_reason      IN VARCHAR2
14:28:25 707  ) AS
14:28:25 708  BEGIN
14:28:25 709  	PROCS_LOCKING_V23.LOCK_ACCOUNT(
14:28:25 710  	  in_group_id,
14:28:25 711  	  in_lock_key,
14:28:25 712  	  in_seconds_num,
14:28:25 713  	  in_created_by,
14:28:25 714  	  in_reason
14:28:25 715  	);
14:28:25 716  END LOCK_ACCOUNT;
14:28:25 717  
14:28:25 718  /****************************************************************/
14:28:25 719  
14:28:25 720  PROCEDURE RELEASE_LOCK (
14:28:25 721  	in_group_id IN NUMBER,
14:28:25 722  	in_lock_key IN VARCHAR2
14:28:25 723  ) AS
14:28:25 724  BEGIN
14:28:25 725  	PROCS_LOCKING_V23.RELEASE_LOCK(
14:28:25 726  	  in_group_id,
14:28:25 727  	  in_lock_key
14:28:25 728  	);
14:28:25 729  END RELEASE_LOCK;
14:28:25 730  
14:28:25 731  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
14:28:25 732  	in_invoice_id		    IN NUMBER,
14:28:25 733  	out_order_id		    OUT VARCHAR2,
14:28:25 734  	out_external_transaction_id OUT VARCHAR2
14:28:25 735  ) AS
14:28:25 736  BEGIN
14:28:25 737  	PROCS_INVOICE_V23.GET_PAYMENT_INFO_BY_INVOICE_ID(
14:28:25 738  	  in_invoice_id,
14:28:25 739  	  out_order_id,
14:28:25 740  	  out_external_transaction_id
14:28:25 741  	);
14:28:25 742  END GET_PAYMENT_INFO_BY_INVOICE_ID;
14:28:25 743  
14:28:25 744  /******************************************************************************/
14:28:25 745  
14:28:25 746  PROCEDURE GET_PAYPAL_BY_ID (
14:28:25 747  	in_paypal_id   IN  NUMBER,
14:28:25 748  	out_result_set OUT SYS_REFCURSOR
14:28:25 749  ) AS
14:28:25 750  BEGIN
14:28:25 751  	PROCS_FIN_INSTRUMENTS_V23.GET_PAYPAL_BY_ID(
14:28:25 752  	  in_paypal_id,
14:28:25 753  	  out_result_set
14:28:25 754  	);
14:28:25 755  END GET_PAYPAL_BY_ID;
14:28:25 756  
14:28:25 757  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
14:28:25 758  /*
14:28:25 759  Throws exceptions:
14:28:25 760  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 761  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 762  */
14:28:25 763  	in_charge_id   in  number,
14:28:25 764  	out_attempt_count out number
14:28:25 765  ) as
14:28:25 766  begin
14:28:25 767  	PROCS_TRANSACTION_V23.GET_NEXT_ATTEMPT_NUMBER(
14:28:25 768  	  in_charge_id,
14:28:25 769  	  out_attempt_count
14:28:25 770  	);
14:28:25 771  end GET_NEXT_ATTEMPT_NUMBER;
14:28:25 772  
14:28:25 773  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:28:25 774  	in_offer_chain_id	 IN NUMBER,
14:28:25 775  	in_action_name		 IN VARCHAR2,
14:28:25 776  	out_notification_type_id out number
14:28:25 777  ) as
14:28:25 778  begin
14:28:25 779  	PROCS_OFFER_CHAIN_V23.GET_NOTIFICATION_TYPE_ID(
14:28:25 780  	  in_offer_chain_id,
14:28:25 781  	  in_action_name,
14:28:25 782  	  out_notification_type_id
14:28:25 783  	);
14:28:25 784  end GET_NOTIFICATION_TYPE_ID;
14:28:25 785  
14:28:25 786  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
14:28:25 787  /*
14:28:25 788  Throws exceptions:
14:28:25 789  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 790  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 791  */
14:28:25 792  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:25 793  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
14:28:25 794  ) AS
14:28:25 795  BEGIN
14:28:25 796  PROCS_FIN_INSTRUMENTS_V23.GET_GC_ID_BY_PURCH_INVOICE_ID(
14:28:25 797  in_invoice_id,
14:28:25 798  out_gift_certificate_id
14:28:25 799  );
14:28:25 800  END GET_GC_ID_BY_PURCH_INVOICE_ID;
14:28:25 801  
14:28:25 802  /****************************************************************************/
14:28:25 803  
14:28:25 804  PROCEDURE SHOULD_MOVE_TO_GRACE(
14:28:25 805  	in_invoice_id  IN INVOICE.ID%TYPE,
14:28:25 806  	out_result     OUT NUMBER
14:28:25 807  ) AS
14:28:25 808  BEGIN
14:28:25 809  	-- if the invoice preceding the given invoice has no transaction attempts, then
14:28:25 810  	-- it is not billed out of Sartre. if so, then the associated subscription
14:28:25 811  	-- should be canceled after a final failed billing attempt--not moved to grace.
14:28:25 812  	SELECT DECODE(COUNT(1), 0, 0, 1) INTO out_result
14:28:25 813  	FROM CHARGE c
14:28:25 814  	INNER JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
14:28:25 815  	INNER JOIN TRANSACTION_ATTEMPT ta ON ta.TRANSACTION_ID = t.ID
14:28:25 816  	WHERE c.INVOICE_ID = (
14:28:25 817  	  -- select previous invoice_id, or -1 if there is none
14:28:25 818  	  SELECT PREV_INVOICE_ID FROM (
14:28:25 819  	    SELECT i.ID, LAG(i.ID, 1, -1) OVER (ORDER BY i.CREATE_DATE) AS PREV_INVOICE_ID
14:28:25 820  	    FROM INVOICE i
14:28:25 821  	    INNER JOIN LICENSE l ON i.ID = l.INVOICE_ID
14:28:25 822  	    WHERE l.SUBSCRIPTION_ID = (
14:28:25 823  	      SELECT SUBSCRIPTION_ID FROM LICENSE WHERE INVOICE_ID = in_invoice_id
14:28:25 824  	    )
14:28:25 825  	  ) WHERE ID = in_invoice_id
14:28:25 826  	);
14:28:25 827  END SHOULD_MOVE_TO_GRACE;
14:28:25 828  
14:28:25 829  /****************************************************************************/
14:28:25 830  
14:28:25 831  PROCEDURE MOVE_TO_GRACE(
14:28:25 832  	in_invoice_id		      IN INVOICE.ID%TYPE,
14:28:25 833  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
14:28:25 834  	in_grace_period_length_hours  IN NUMBER
14:28:25 835  ) AS
14:28:25 836  BEGIN
14:28:25 837  	PROCS_SUBSCRIPTION_V23.START_GRACE_BY_INVOICE_ID(
14:28:25 838  	  in_invoice_id        => in_invoice_id,
14:28:25 839  	  in_updater	       => in_updated_by,
14:28:25 840  	  in_duration_in_hours => in_grace_period_length_hours
14:28:25 841  	);
14:28:25 842  END MOVE_TO_GRACE;
14:28:25 843  
14:28:25 844  /****************************************************************************/
14:28:25 845  
14:28:25 846  PROCEDURE MOVE_OUT_OF_GRACE(
14:28:25 847  	in_invoice_id	IN INVOICE.ID%TYPE,
14:28:25 848  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
14:28:25 849  ) AS
14:28:25 850  BEGIN
14:28:25 851  	PROCS_SUBSCRIPTION_V23.STOP_GRACE_BY_INVOICE_ID(
14:28:25 852  	  in_invoice_id => in_invoice_id,
14:28:25 853  	  in_updater	=> in_updated_by
14:28:25 854  	);
14:28:25 855  END MOVE_OUT_OF_GRACE;
14:28:25 856  
14:28:25 857  END PUBLIC_PROCS_BILLING_V23;
14:28:25 858  .
14:28:25 SQL> /

Package body created.

Elapsed: 00:00:00.05
14:28:25 SQL> 
14:28:25 SQL> prompt Compiling body for public_procs_notification.sql
Compiling body for public_procs_notification.sql
14:28:25 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V23" AS
14:28:25   2  
14:28:25   3  PROCEDURE LOCK_ACCOUNT (
14:28:25   4  	in_group_id    IN NUMBER,
14:28:25   5  	in_lock_key    IN VARCHAR2,
14:28:25   6  	in_seconds_num IN NUMBER,
14:28:25   7  	in_created_by  IN VARCHAR2,
14:28:25   8  	in_reason      IN VARCHAR2
14:28:25   9  ) AS
14:28:25  10  BEGIN
14:28:25  11  	PROCS_LOCKING_V23.LOCK_ACCOUNT(
14:28:25  12  	  in_group_id,
14:28:25  13  	  in_lock_key,
14:28:25  14  	  in_seconds_num,
14:28:25  15  	  in_created_by,
14:28:25  16  	  in_reason
14:28:25  17  	);
14:28:25  18  END LOCK_ACCOUNT;
14:28:25  19  
14:28:25  20  /******************************************************************************/
14:28:25  21  
14:28:25  22  PROCEDURE RELEASE_LOCK (
14:28:25  23  	in_group_id IN NUMBER,
14:28:25  24  	in_lock_key IN VARCHAR2
14:28:25  25  ) AS
14:28:25  26  BEGIN
14:28:25  27  	PROCS_LOCKING_V23.RELEASE_LOCK(
14:28:25  28  	  in_group_id,
14:28:25  29  	  in_lock_key
14:28:25  30  	);
14:28:25  31  END RELEASE_LOCK;
14:28:25  32  
14:28:25  33  END PUBLIC_PROCS_NOTIFICATION_V23;
14:28:25  34  .
14:28:25 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:25 SQL> 
14:28:25 SQL> prompt Compiling body for public_procs_renewal.sql
Compiling body for public_procs_renewal.sql
14:28:25 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V23" AS
14:28:25   2  
14:28:25   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
14:28:25   4  	out_result_set OUT SYS_REFCURSOR
14:28:25   5  ) AS
14:28:25   6  BEGIN
14:28:25   7  	PROCS_GROUP_ACCOUNT_V23.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
14:28:25   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
14:28:25   9  
14:28:25  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
14:28:25  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
14:28:25  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
14:28:25  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
14:28:25  14  ) AS
14:28:25  15  BEGIN
14:28:25  16  	PROCS_GROUP_ACCOUNT_V23.UPDATE_SS_NEED_ENTITLEMENTS(
14:28:25  17  	  in_sub_share_id => in_sub_share_id,
14:28:25  18  	  in_need_entitlements => in_need_entitlements,
14:28:25  19  	  in_updater => in_updater
14:28:25  20  	);
14:28:25  21  END UPDATE_SS_NEED_ENTITLEMENTS;
14:28:25  22  
14:28:25  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
14:28:25  24  /*
14:28:25  25  Throws exceptions:
14:28:25  26  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25  27  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  28  */
14:28:25  29  	  in_offer_chain_id IN	 NUMBER,
14:28:25  30  	  out_result_set    OUT  SYS_REFCURSOR
14:28:25  31  ) AS
14:28:25  32  BEGIN
14:28:25  33  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_BY_ID (
14:28:25  34  	  in_offer_chain_id => in_offer_chain_id,
14:28:25  35  	  out_result_set => out_result_set
14:28:25  36  	);
14:28:25  37  END GET_OFFER_CHAIN_BY_ID;
14:28:25  38  
14:28:25  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
14:28:25  40  /*
14:28:25  41  Throws exceptions (codes):
14:28:25  42  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25  43  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  44  */
14:28:25  45  	in_offer_chain_id IN NUMBER,
14:28:25  46  	in_meta_data_name IN VARCHAR2,
14:28:25  47  	out_result_set	  OUT SYS_REFCURSOR
14:28:25  48  )AS
14:28:25  49  BEGIN
14:28:25  50  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_META_DATA(
14:28:25  51  	  in_offer_chain_id,
14:28:25  52  	  in_meta_data_name,
14:28:25  53  	  out_result_set
14:28:25  54  	);
14:28:25  55  END GET_OFFER_CHAIN_META_DATA;
14:28:25  56  
14:28:25  57  PROCEDURE GET_ENDING_LICENSES (
14:28:25  58  /*
14:28:25  59  Throws exceptions:
14:28:25  60  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  61  */
14:28:25  62  	in_hours_number IN NUMBER,
14:28:25  63  	out_result_set OUT SYS_REFCURSOR
14:28:25  64  ) AS
14:28:25  65  BEGIN
14:28:25  66  	PROCS_LICENSE_V23.GET_ENDING_LICENSES(in_hours_number,out_result_set);
14:28:25  67  END GET_ENDING_LICENSES;
14:28:25  68  
14:28:25  69  PROCEDURE GET_ENDING_LICENSES_CC (
14:28:25  70  /*
14:28:25  71  Throws exceptions:
14:28:25  72  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  73  */
14:28:25  74  	in_hours_number IN NUMBER,
14:28:25  75  	out_result_set OUT SYS_REFCURSOR,
14:28:25  76  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:25  77  ) AS
14:28:25  78  BEGIN
14:28:25  79  	PROCS_LICENSE_V23.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
14:28:25  80  END GET_ENDING_LICENSES_CC;
14:28:25  81  
14:28:25  82  /*******************************************************/
14:28:25  83  
14:28:25  84  PROCEDURE GET_RECURRING_OFFER (
14:28:25  85  /*
14:28:25  86  Throws exceptions:
14:28:25  87  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  88  */
14:28:25  89  	in_license_id  IN NUMBER,
14:28:25  90  	out_result_set OUT SYS_REFCURSOR
14:28:25  91  ) AS
14:28:25  92  BEGIN
14:28:25  93  	PROCS_LICENSE_V23.GET_RECURRING_OFFER (
14:28:25  94  	  in_license_id,
14:28:25  95  	  out_result_set
14:28:25  96  	);
14:28:25  97  END GET_RECURRING_OFFER;
14:28:25  98  
14:28:25  99  /********************************************************/
14:28:25 100  
14:28:25 101  PROCEDURE GET_NEXT_OFFER (
14:28:25 102  /*
14:28:25 103  Throws exceptions:
14:28:25 104  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 105  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:25 106  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 107  */
14:28:25 108  	in_license_id  IN NUMBER,
14:28:25 109  	out_result_set OUT SYS_REFCURSOR
14:28:25 110  ) AS
14:28:25 111  BEGIN
14:28:25 112  	PROCS_LICENSE_V23.GET_NEXT_OFFER (
14:28:25 113  	  in_license_id,
14:28:25 114  	  out_result_set
14:28:25 115  	);
14:28:25 116  END GET_NEXT_OFFER;
14:28:25 117  
14:28:25 118  /*********************************************************/
14:28:25 119  
14:28:25 120  PROCEDURE UPDATE_LICENSE_STATUS(
14:28:25 121  /*
14:28:25 122  Throws exceptions:
14:28:25 123  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 124  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 125  */
14:28:25 126  	  in_license_id     IN NUMBER,
14:28:25 127  	  in_license_status IN NUMBER,
14:28:25 128  	  in_updated_by     IN VARCHAR2
14:28:25 129  ) AS
14:28:25 130  BEGIN
14:28:25 131  	PROCS_LICENSE_V23.UPDATE_LICENSE_STATUS (
14:28:25 132  	  in_license_id,
14:28:25 133  	  in_license_status,
14:28:25 134  	  in_updated_by
14:28:25 135  	);
14:28:25 136  END UPDATE_LICENSE_STATUS;
14:28:25 137  
14:28:25 138  /**********************************************************/
14:28:25 139  
14:28:25 140  PROCEDURE UPDATE_INVOICE_STATUS (
14:28:25 141  /*
14:28:25 142  Throws exceptions:
14:28:25 143  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 144  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 145  */
14:28:25 146  	in_invoice_id		       IN NUMBER,
14:28:25 147  	in_invoice_status_id	       IN NUMBER,
14:28:25 148  	in_updated_by		       IN VARCHAR2
14:28:25 149  ) AS
14:28:25 150  BEGIN
14:28:25 151  	PROCS_INVOICE_V23.UPDATE_INVOICE_STATUS(
14:28:25 152  	  in_invoice_id,
14:28:25 153  	  in_invoice_status_id,
14:28:25 154  	  in_updated_by
14:28:25 155  	);
14:28:25 156  END UPDATE_INVOICE_STATUS;
14:28:25 157  
14:28:25 158  /***********************************************************/
14:28:25 159  
14:28:25 160  PROCEDURE CREATE_LICENSE(
14:28:25 161  /*
14:28:25 162  Throws exceptions:
14:28:25 163  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 164  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 165  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
14:28:25 166  */
14:28:25 167  	in_status_id		    IN NUMBER,
14:28:25 168  	in_needs_entitlements	    IN NUMBER,
14:28:25 169  	in_start_date		    IN DATE,
14:28:25 170  	in_end_date		    IN DATE,
14:28:25 171  	in_offer_id		    IN NUMBER,
14:28:25 172  	in_subscription_id	    IN NUMBER,
14:28:25 173  	in_invoice_id		    IN NUMBER,
14:28:25 174  	in_created_by		    IN VARCHAR2,
14:28:25 175  	in_is_extension 	    IN NUMBER,
14:28:25 176  	in_current_offer_index	    IN NUMBER,
14:28:25 177  	in_current_offer_recurr_num IN NUMBER,
14:28:25 178  	out_license_id		    OUT NUMBER
14:28:25 179  ) AS
14:28:25 180  BEGIN
14:28:25 181  	PROCS_LICENSE_V23.CREATE_LICENSE (
14:28:25 182  	  in_status_id,
14:28:25 183  	  in_needs_entitlements,
14:28:25 184  	  in_start_date,
14:28:25 185  	  in_end_date,
14:28:25 186  	  in_offer_id,
14:28:25 187  	  in_subscription_id,
14:28:25 188  	  in_invoice_id,
14:28:25 189  	  in_created_by,
14:28:25 190  	  in_is_extension,
14:28:25 191  	  in_current_offer_index,
14:28:25 192  	  in_current_offer_recurr_num,
14:28:25 193  	  out_license_id
14:28:25 194  	);
14:28:25 195  END CREATE_LICENSE;
14:28:25 196  
14:28:25 197  /******************************************************/
14:28:25 198  
14:28:25 199  PROCEDURE CREATE_INVOICE(
14:28:25 200  /*
14:28:25 201  Throws exceptions:
14:28:25 202  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 203  */
14:28:25 204  	  in_invoice_status IN NUMBER,
14:28:25 205  	  in_created_by     IN VARCHAR2,
14:28:25 206  	  in_tax_exempt_id  IN VARCHAR2,
14:28:25 207  	  out_invoice_id    OUT NUMBER
14:28:25 208  ) AS
14:28:25 209  BEGIN
14:28:25 210  	PROCS_INVOICE_V23.CREATE_INVOICE (
14:28:25 211  	  in_invoice_status,
14:28:25 212  	  in_created_by,
14:28:25 213  	  in_tax_exempt_id,
14:28:25 214  	  out_invoice_id
14:28:25 215  	);
14:28:25 216  END CREATE_INVOICE;
14:28:25 217  
14:28:25 218  /*******************************************************/
14:28:25 219  
14:28:25 220  PROCEDURE CREATE_CHARGE(
14:28:25 221  /*
14:28:25 222  Throws exceptions:
14:28:25 223  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 224  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 225  */
14:28:25 226  	in_invoice_id	      IN NUMBER,
14:28:25 227  	in_transaction_id     IN NUMBER,
14:28:25 228  	in_instrument_type_id IN NUMBER,
14:28:25 229  	in_instrument_id      IN NUMBER,
14:28:25 230  	in_charge_amount      IN NUMBER,
14:28:25 231  	in_created_by	      IN VARCHAR2,
14:28:25 232  	in_charge_status_id   IN NUMBER,
14:28:25 233  	out_charge_id	      OUT NUMBER
14:28:25 234  ) AS
14:28:25 235  BEGIN
14:28:25 236  	PROCS_CHARGE_V23.CREATE_CHARGE (
14:28:25 237  	  in_invoice_id,
14:28:25 238  	  in_transaction_id,
14:28:25 239  	  in_instrument_type_id,
14:28:25 240  	  in_instrument_id,
14:28:25 241  	  in_charge_amount,
14:28:25 242  	  in_created_by,
14:28:25 243  	  in_charge_status_id,
14:28:25 244  	  out_charge_id
14:28:25 245  	);
14:28:25 246  END CREATE_CHARGE;
14:28:25 247  
14:28:25 248  /**********************************************************/
14:28:25 249  
14:28:25 250  PROCEDURE HAS_FUTURE_LICENSE (
14:28:25 251  /*
14:28:25 252  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 253  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 254  --
14:28:25 255  RETURNS:
14:28:25 256  1 - if has,
14:28:25 257  0 - else
14:28:25 258  */
14:28:25 259  	in_license_id IN NUMBER,
14:28:25 260  	out_result	   OUT NUMBER
14:28:25 261  ) AS
14:28:25 262  BEGIN
14:28:25 263  	PROCS_SUBSCRIPTION_V23.HAS_FUTURE_LICENSE (
14:28:25 264  	  in_license_id,
14:28:25 265  	  out_result
14:28:25 266  	);
14:28:25 267  END HAS_FUTURE_LICENSE;
14:28:25 268  
14:28:25 269  /***********************************************************/
14:28:25 270  
14:28:25 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
14:28:25 272  /*
14:28:25 273  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 274  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 275  */
14:28:25 276  	in_license_id IN NUMBER,
14:28:25 277  	out_group_id  OUT NUMBER
14:28:25 278  ) AS
14:28:25 279  BEGIN
14:28:25 280  	PROCS_LICENSE_V23.GET_GROUP_ID_BY_LICENSE_ID (
14:28:25 281  	  in_license_id,
14:28:25 282  	  out_group_id
14:28:25 283  	);
14:28:25 284  END GET_GROUP_ID_BY_LICENSE_ID;
14:28:25 285  
14:28:25 286  /**********************************************************/
14:28:25 287  
14:28:25 288  PROCEDURE GET_OFFER_PRODUCTS (
14:28:25 289  /*
14:28:25 290  Throws exceptions (codes):
14:28:25 291  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 292  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 293  */
14:28:25 294  	in_offer_id    IN NUMBER,
14:28:25 295  	out_result_set OUT SYS_REFCURSOR
14:28:25 296  ) AS
14:28:25 297  BEGIN
14:28:25 298  	PROCS_OFFER_CHAIN_V23.GET_OFFER_PRODUCTS (
14:28:25 299  	  in_offer_id,
14:28:25 300  	  out_result_set
14:28:25 301  	);
14:28:25 302  END GET_OFFER_PRODUCTS;
14:28:25 303  
14:28:25 304  /***********************************************************/
14:28:25 305  
14:28:25 306  PROCEDURE CREATE_TRANSACTION (
14:28:25 307  /*
14:28:25 308  Throws exceptions:
14:28:25 309  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 310  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 311  */
14:28:25 312  	in_transaction_id	  IN NUMBER,
14:28:25 313  	in_status_id		  IN NUMBER,
14:28:25 314  	in_amount		  IN NUMBER,
14:28:25 315  	in_created_by		  IN VARCHAR2,
14:28:25 316  	in_order_id		  IN VARCHAR2,
14:28:25 317  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
14:28:25 318  	out_transaction_id	  OUT NUMBER
14:28:25 319  ) AS
14:28:25 320  BEGIN
14:28:25 321  	PROCS_TRANSACTION_V23.CREATE_TRANSACTION(
14:28:25 322  	  in_transaction_id,
14:28:25 323  	  in_status_id,
14:28:25 324  	  in_amount,
14:28:25 325  	  in_created_by,
14:28:25 326  	  in_order_id,
14:28:25 327  	  GLOBAL_CONSTANTS_V23.FALSE, -- is_refund should be false in renewal
14:28:25 328  	  in_transaction_type_code,
14:28:25 329  	  out_transaction_id
14:28:25 330  	);
14:28:25 331  END CREATE_TRANSACTION;
14:28:25 332  
14:28:25 333  /************************************************************/
14:28:25 334  
14:28:25 335  PROCEDURE ADD_LINE_ITEMS(
14:28:25 336  /*
14:28:25 337  Throws exceptions:
14:28:25 338  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 339  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 340  */
14:28:25 341  	in_invoice_id IN NUMBER,
14:28:25 342  	in_offer_id   IN NUMBER,
14:28:25 343  	in_created_by IN VARCHAR2
14:28:25 344  ) AS
14:28:25 345  BEGIN
14:28:25 346  	PROCS_LINE_ITEMS_V23.ADD_LINE_ITEMS(
14:28:25 347  	  in_invoice_id,
14:28:25 348  	  in_offer_id,
14:28:25 349  	  in_created_by
14:28:25 350  	);
14:28:25 351  END ADD_LINE_ITEMS;
14:28:25 352  
14:28:25 353  /************************************************************/
14:28:25 354  
14:28:25 355  PROCEDURE CALCULATE_INVOICE_AMOUNT (
14:28:25 356  /*
14:28:25 357  Throws exceptions:
14:28:25 358  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 359  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 360  */
14:28:25 361  	in_invoice_id IN  NUMBER,
14:28:25 362  	out_amount    OUT NUMBER
14:28:25 363  ) AS
14:28:25 364  BEGIN
14:28:25 365  	PROCS_INVOICE_V23.CALCULATE_INVOICE_AMOUNT (
14:28:25 366  	  in_invoice_id,
14:28:25 367  	  out_amount
14:28:25 368  	);
14:28:25 369  END CALCULATE_INVOICE_AMOUNT;
14:28:25 370  
14:28:25 371  /*************************************************************/
14:28:25 372  
14:28:25 373  PROCEDURE RESERVE_TRANSACTION_ID (
14:28:25 374  /*
14:28:25 375  Throws exceptions:
14:28:25 376  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 377  */
14:28:25 378  	out_transaction_id OUT NUMBER
14:28:25 379  ) AS
14:28:25 380  BEGIN
14:28:25 381  	PROCS_TRANSACTION_V23.RESERVE_TRANSACTION_ID (
14:28:25 382  	  out_transaction_id
14:28:25 383  	);
14:28:25 384  END RESERVE_TRANSACTION_ID;
14:28:25 385  
14:28:25 386  /***************************************************************/
14:28:25 387  
14:28:25 388  PROCEDURE P_GET_NEXT_OFFER_INDEX (
14:28:25 389  	in_offer_chain_id	     IN NUMBER,
14:28:25 390  	in_offer_chain_current_index IN NUMBER,
14:28:25 391  	out_next_offer_index	     OUT NUMBER
14:28:25 392  ) AS
14:28:25 393  BEGIN
14:28:25 394  	PROCS_OFFER_CHAIN_V23.P_GET_NEXT_OFFER_INDEX(
14:28:25 395  	  in_offer_chain_id,
14:28:25 396  	  in_offer_chain_current_index,
14:28:25 397  	  out_next_offer_index
14:28:25 398  	);
14:28:25 399  END P_GET_NEXT_OFFER_INDEX;
14:28:25 400  
14:28:25 401  /***************************************************************/
14:28:25 402  
14:28:25 403  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
14:28:25 404  	in_license_id		     IN NUMBER,
14:28:25 405  	in_offer_chain_current_index IN NUMBER,
14:28:25 406  	out_next_offer_index	     OUT NUMBER
14:28:25 407  ) AS
14:28:25 408  BEGIN
14:28:25 409  	PROCS_OFFER_CHAIN_V23.GET_NEXT_OFFER_INDEX_BY_LCNS(
14:28:25 410  	  in_license_id,
14:28:25 411  	  in_offer_chain_current_index,
14:28:25 412  	  out_next_offer_index
14:28:25 413  	);
14:28:25 414  END GET_NEXT_OFFER_INDEX_BY_LCNS;
14:28:25 415  
14:28:25 416  /******************************************************************/
14:28:25 417  
14:28:25 418  PROCEDURE GET_SUBSCRIPTION_INFO (
14:28:25 419  /*
14:28:25 420  Throws exceptions:
14:28:25 421  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 422  */
14:28:25 423  	  in_subscription_id IN  NUMBER,
14:28:25 424  	  out_result_set      OUT SYS_REFCURSOR
14:28:25 425  ) AS
14:28:25 426  BEGIN
14:28:25 427  	PROCS_SUBSCRIPTION_V23.GET_SUBSCRIPTION_INFO(
14:28:25 428  	  in_subscription_id,
14:28:25 429  	  out_result_set
14:28:25 430  	);
14:28:25 431  END GET_SUBSCRIPTION_INFO;
14:28:25 432  
14:28:25 433  /*******************************************************************/
14:28:25 434  
14:28:25 435  PROCEDURE CLOSE_SUBSCRIPTION (
14:28:25 436  	in_subscription_id IN NUMBER,
14:28:25 437  	in_updated_by	   IN VARCHAR2
14:28:25 438  ) AS
14:28:25 439  BEGIN
14:28:25 440  	PROCS_SUBSCRIPTION_V23.CLOSE_SUBSCRIPTION(
14:28:25 441  	  in_subscription_id,
14:28:25 442  	  in_updated_by
14:28:25 443  	);
14:28:25 444  END CLOSE_SUBSCRIPTION;
14:28:25 445  
14:28:25 446  /*******************************************************************/
14:28:25 447  
14:28:25 448  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
14:28:25 449  	out_result_set OUT SYS_REFCURSOR
14:28:25 450  ) AS
14:28:25 451  BEGIN
14:28:25 452  	PROCS_LICENSE_V23.GET_NEED_ENTITLEMENTS_LICENSES(
14:28:25 453  	  out_result_set
14:28:25 454  	);
14:28:25 455  END GET_NEED_ENTITLEMENTS_LICENSES;
14:28:25 456  
14:28:25 457  /*******************************************************************/
14:28:25 458  
14:28:25 459  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
14:28:25 460  	in_license_id	      IN NUMBER,
14:28:25 461  	in_needs_entitlements IN NUMBER,
14:28:25 462  	in_updated_by	      IN VARCHAR2
14:28:25 463  ) AS
14:28:25 464  BEGIN
14:28:25 465  	PROCS_LICENSE_V23.UPDATE_NEED_ENTITLEMENTS_FLAG(
14:28:25 466  	  in_license_id,
14:28:25 467  	  in_needs_entitlements,
14:28:25 468  	  in_updated_by
14:28:25 469  	);
14:28:25 470  END UPDATE_NEED_ENTITLEMENTS_FLAG;
14:28:25 471  
14:28:25 472  /*******************************************************/
14:28:25 473  
14:28:25 474  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
14:28:25 475  /*
14:28:25 476  Throws exceptions (codes):
14:28:25 477  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 478  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 479  */
14:28:25 480  	in_offer_id    IN NUMBER,
14:28:25 481  	out_result_set OUT SYS_REFCURSOR
14:28:25 482  ) AS
14:28:25 483  BEGIN
14:28:25 484  	PROCS_OFFER_CHAIN_V23.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
14:28:25 485  END GET_PROD_OFFERINGS_BY_OFFER_ID;
14:28:25 486  
14:28:25 487  /*******************************************************/
14:28:25 488  
14:28:25 489  PROCEDURE LOCK_ACCOUNT (
14:28:25 490  	in_group_id    IN NUMBER,
14:28:25 491  	in_lock_key    IN VARCHAR2,
14:28:25 492  	in_seconds_num IN NUMBER,
14:28:25 493  	in_created_by  IN VARCHAR2,
14:28:25 494  	in_reason      IN VARCHAR2
14:28:25 495  ) AS
14:28:25 496  BEGIN
14:28:25 497  	PROCS_LOCKING_V23.LOCK_ACCOUNT(
14:28:25 498  	  in_group_id,
14:28:25 499  	  in_lock_key,
14:28:25 500  	  in_seconds_num,
14:28:25 501  	  in_created_by,
14:28:25 502  	  in_reason
14:28:25 503  	);
14:28:25 504  END LOCK_ACCOUNT;
14:28:25 505  
14:28:25 506  /****************************************************************/
14:28:25 507  
14:28:25 508  PROCEDURE RELEASE_LOCK (
14:28:25 509  	in_group_id IN NUMBER,
14:28:25 510  	in_lock_key IN VARCHAR2
14:28:25 511  ) AS
14:28:25 512  BEGIN
14:28:25 513  	PROCS_LOCKING_V23.RELEASE_LOCK(
14:28:25 514  	  in_group_id,
14:28:25 515  	  in_lock_key
14:28:25 516  	);
14:28:25 517  END RELEASE_LOCK;
14:28:25 518  
14:28:25 519  /******************************************************************************/
14:28:25 520  
14:28:25 521  PROCEDURE GET_INVOICE_LINE_ITEMS (
14:28:25 522  	in_invoice_id  IN NUMBER,
14:28:25 523  	out_result_set OUT SYS_REFCURSOR
14:28:25 524  ) AS
14:28:25 525  BEGIN
14:28:25 526  	PROCS_INVOICE_V23.GET_INVOICE_LINE_ITEMS(
14:28:25 527  	  in_invoice_id,
14:28:25 528  	  out_result_set
14:28:25 529  	);
14:28:25 530  END GET_INVOICE_LINE_ITEMS;
14:28:25 531  
14:28:25 532  /******************************************************************************/
14:28:25 533  
14:28:25 534  PROCEDURE ADD_TAX (
14:28:25 535  	in_tax_type_id		 IN NUMBER,
14:28:25 536  	in_calculated_amount	 IN NUMBER,
14:28:25 537  	in_created_by		 IN VARCHAR2,
14:28:25 538  	in_line_item_id 	 IN NUMBER,
14:28:25 539  	in_effective_rate	 IN VARCHAR2,
14:28:25 540  	in_taxable_amount	 IN NUMBER,
14:28:25 541  	in_tax_rule_id		 IN NUMBER,
14:28:25 542  	in_jurisdiction_level_id IN NUMBER,
14:28:25 543  	in_jurisdiction_name	 IN VARCHAR2,
14:28:25 544  	in_jurisdiction_id	 IN VARCHAR2,
14:28:25 545  	in_ext_tax_type 	 IN VARCHAR2,
14:28:25 546  	in_ext_result		 IN VARCHAR2,
14:28:25 547  	in_imposition_type	 IN VARCHAR2,
14:28:25 548  	in_imposition		 IN VARCHAR2
14:28:25 549  ) AS
14:28:25 550  BEGIN
14:28:25 551  	PROCS_TAXES_V23.ADD_TAX(
14:28:25 552  	  in_tax_type_id,
14:28:25 553  	  in_calculated_amount,
14:28:25 554  	  in_created_by,
14:28:25 555  	  in_line_item_id,
14:28:25 556  	  in_effective_rate,
14:28:25 557  	  in_taxable_amount,
14:28:25 558  	  in_tax_rule_id,
14:28:25 559  	  in_jurisdiction_level_id,
14:28:25 560  	  in_jurisdiction_name,
14:28:25 561  	  in_jurisdiction_id,
14:28:25 562  	  in_ext_tax_type,
14:28:25 563  	  in_ext_result,
14:28:25 564  	  in_imposition_type,
14:28:25 565  	  in_imposition
14:28:25 566  	);
14:28:25 567  END ADD_TAX;
14:28:25 568  
14:28:25 569  /******************************************************************************/
14:28:25 570  
14:28:25 571  PROCEDURE GET_CREDIT_CARD_BY_ID (
14:28:25 572  	in_credit_card_id IN  NUMBER,
14:28:25 573  	out_result_set	  OUT SYS_REFCURSOR
14:28:25 574  ) AS
14:28:25 575  BEGIN
14:28:25 576  	PROCS_FIN_INSTRUMENTS_V23.GET_CREDIT_CARD_BY_ID(
14:28:25 577  	  in_credit_card_id,
14:28:25 578  	  out_result_set
14:28:25 579  	);
14:28:25 580  END GET_CREDIT_CARD_BY_ID;
14:28:25 581  
14:28:25 582  /******************************************************************************/
14:28:25 583  
14:28:25 584  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
14:28:25 585  	in_line_item_id IN NUMBER,
14:28:25 586  	out_result_set	OUT SYS_REFCURSOR
14:28:25 587  ) AS
14:28:25 588  BEGIN
14:28:25 589  	PROCS_PRODUCT_V23.GET_PRD_OFFERING_BY_LINE_IT_ID(
14:28:25 590  	  in_line_item_id,
14:28:25 591  	  out_result_set
14:28:25 592  	);
14:28:25 593  END GET_PRD_OFFERING_BY_LINE_IT_ID;
14:28:25 594  
14:28:25 595  /******************************************************************************/
14:28:25 596  
14:28:25 597  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
14:28:25 598  /*
14:28:25 599  Throws exceptions:
14:28:25 600  APP_EXCEPTION_CODES_V23.NOT_FOUND,
14:28:25 601  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 602  */
14:28:25 603  	in_group_id IN NUMBER,
14:28:25 604  	out_account_id	OUT NUMBER
14:28:25 605  ) AS
14:28:25 606  BEGIN
14:28:25 607  	PROCS_ACCOUNT_V23.GET_ACCOUNT_ID_BY_GROUP_ID(
14:28:25 608  	  in_group_id,
14:28:25 609  	  out_account_id
14:28:25 610  	);
14:28:25 611  END GET_ACCOUNT_ID_BY_GROUP_ID;
14:28:25 612  
14:28:25 613  /******************************************************************************/
14:28:25 614  
14:28:25 615  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
14:28:25 616  /*
14:28:25 617  Throws exceptions:
14:28:25 618  APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25 619  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 620  */
14:28:25 621  	in_line_item_id IN  NUMBER,
14:28:25 622  	out_result_set	OUT SYS_REFCURSOR
14:28:25 623  ) AS
14:28:25 624  BEGIN
14:28:25 625  	PROCS_LINE_ITEMS_V23.GET_LINE_ITEM_DISCOUNTS(
14:28:25 626  	  in_line_item_id,
14:28:25 627  	  out_result_set
14:28:25 628  	);
14:28:25 629  END GET_LINE_ITEM_DISCOUNTS;
14:28:25 630  
14:28:25 631  /******************************************************************************/
14:28:25 632  
14:28:25 633  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
14:28:25 634  	in_line_item_id    IN NUMBER,
14:28:25 635  	in_amount	   IN NUMBER,
14:28:25 636  	in_discount_amount IN NUMBER,
14:28:25 637  	in_taxes_amount    IN NUMBER
14:28:25 638  ) AS
14:28:25 639  BEGIN
14:28:25 640  	PROCS_LINE_ITEMS_V23.UPDATE_LINE_ITEM_AMOUNT(
14:28:25 641  	  in_line_item_id,
14:28:25 642  	  in_amount,
14:28:25 643  	  in_discount_amount,
14:28:25 644  	  in_taxes_amount
14:28:25 645  	);
14:28:25 646  END UPDATE_LINE_ITEM_AMOUNT;
14:28:25 647  
14:28:25 648  /******************************************************************************/
14:28:25 649  
14:28:25 650  PROCEDURE GET_PAYPAL_BY_ID (
14:28:25 651  	in_paypal_id   IN  NUMBER,
14:28:25 652  	out_result_set OUT SYS_REFCURSOR
14:28:25 653  ) AS
14:28:25 654  BEGIN
14:28:25 655  	PROCS_FIN_INSTRUMENTS_V23.GET_PAYPAL_BY_ID(
14:28:25 656  	  in_paypal_id,
14:28:25 657  	  out_result_set
14:28:25 658  	);
14:28:25 659  END GET_PAYPAL_BY_ID;
14:28:25 660  
14:28:25 661  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
14:28:25 662  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
14:28:25 663  	out_result_set OUT SYS_REFCURSOR
14:28:25 664  ) AS
14:28:25 665  BEGIN
14:28:25 666  	PROCS_FIN_INSTRUMENTS_V23.GET_GC_BY_PURCH_INVOICE_ID (
14:28:25 667  	  in_invoice_id,
14:28:25 668  	  out_result_set
14:28:25 669  	);
14:28:25 670  END GET_GC_BY_PURCH_INVOICE_ID;
14:28:25 671  
14:28:25 672  PROCEDURE GET_LICENSE_BY_ID (
14:28:25 673  	in_license_id  IN NUMBER,
14:28:25 674  	out_result_set OUT SYS_REFCURSOR
14:28:25 675  ) AS
14:28:25 676  BEGIN
14:28:25 677  	PROCS_LICENSE_V23.GET_LICENSE_BY_ID (
14:28:25 678  	  in_license_id,
14:28:25 679  	  out_result_set
14:28:25 680  	);
14:28:25 681  END GET_LICENSE_BY_ID;
14:28:25 682  
14:28:25 683  /******************************************************************************/
14:28:25 684  
14:28:25 685  PROCEDURE GET_NOTIFICATION_TYPE_ID (
14:28:25 686  	in_offer_chain_id	 IN NUMBER,
14:28:25 687  	in_action_name		 IN VARCHAR2,
14:28:25 688  	out_notification_type_id OUT NUMBER
14:28:25 689  ) AS
14:28:25 690  BEGIN
14:28:25 691  	PROCS_OFFER_CHAIN_V23.GET_NOTIFICATION_TYPE_ID(
14:28:25 692  	  in_offer_chain_id,
14:28:25 693  	  in_action_name,
14:28:25 694  	  out_notification_type_id
14:28:25 695  	);
14:28:25 696  END GET_NOTIFICATION_TYPE_ID;
14:28:25 697  
14:28:25 698  /******************************************************************************/
14:28:25 699  
14:28:25 700  PROCEDURE GET_ALL_OCH_META_DATA (
14:28:25 701  	in_offer_chain_id IN NUMBER,
14:28:25 702  	out_result_set	  OUT SYS_REFCURSOR
14:28:25 703  ) AS
14:28:25 704  BEGIN
14:28:25 705  	PROCS_OFFER_CHAIN_V23.GET_ALL_META_DATA (
14:28:25 706  	  in_offer_chain_id,
14:28:25 707  	  out_result_set
14:28:25 708  	);
14:28:25 709  END GET_ALL_OCH_META_DATA;
14:28:25 710  
14:28:25 711  /******************************************************************************/
14:28:25 712  
14:28:25 713  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
14:28:25 714  /*
14:28:25 715  APP_EXCEPTION_CODES_V23.INVALID_PARAMETER
14:28:25 716  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25 717  */
14:28:25 718  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
14:28:25 719  	out_result_set	     OUT SYS_REFCURSOR
14:28:25 720  ) AS
14:28:25 721  BEGIN
14:28:25 722  	PROCS_SUBSCRIPTION_V23.GET_SUBSCRIPTIONS_META_DATA(
14:28:25 723  	  in_subscriptions_ids,
14:28:25 724  	  out_result_set
14:28:25 725  	);
14:28:25 726  END GET_SUBSCRIPTIONS_META_DATA;
14:28:25 727  
14:28:25 728  PROCEDURE GET_UNREDEEMED_GCS (
14:28:25 729  	out_result_set		OUT SYS_REFCURSOR,
14:28:25 730  	in_hours_number 	IN NUMBER DEFAULT 14*24,
14:28:25 731  	in_num_rows		IN NUMBER DEFAULT 10000,
14:28:25 732  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
14:28:25 733  ) AS
14:28:25 734  BEGIN
14:28:25 735  	PROCS_FIN_INSTRUMENTS_V23.GET_UNREDEEMED_GCS(
14:28:25 736  	  out_result_set => out_result_set,
14:28:25 737  	  in_hours_number => in_hours_number,
14:28:25 738  	  in_num_rows => in_num_rows,
14:28:25 739  	  in_process_name => in_process_name
14:28:25 740  	);
14:28:25 741  END GET_UNREDEEMED_GCS;
14:28:25 742  
14:28:25 743  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
14:28:25 744  	in_offer_chain_id IN NUMBER,
14:28:25 745  	in_meta_data_name IN VARCHAR2,
14:28:25 746  	out_value	  OUT VARCHAR2
14:28:25 747  ) AS
14:28:25 748  BEGIN
14:28:25 749  	PROCS_OFFER_CHAIN_V23.GET_OFFER_CHAIN_MD_VALUE(
14:28:25 750  	  in_offer_chain_id => in_offer_chain_id,
14:28:25 751  	  in_meta_data_name => in_meta_data_name,
14:28:25 752  	  out_value => out_value
14:28:25 753  	);
14:28:25 754  END GET_OFFER_CHAIN_MD_VALUE;
14:28:25 755  
14:28:25 756  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
14:28:25 757  	out_result_set	    OUT SYS_REFCURSOR
14:28:25 758  )
14:28:25 759  AS
14:28:25 760  BEGIN
14:28:25 761  	PROCS_SUBSCRIPTION_V23.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
14:28:25 762  	  out_result_set => out_result_set
14:28:25 763  	);
14:28:25 764  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
14:28:25 765  
14:28:25 766  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
14:28:25 767  	out_result_set	    OUT SYS_REFCURSOR
14:28:25 768  )
14:28:25 769  AS
14:28:25 770  BEGIN
14:28:25 771  	PROCS_SUBSCRIPTION_V23.GET_ACT_SUBS_W_PP_CHARGEBACKS(
14:28:25 772  	  out_result_set => out_result_set
14:28:25 773  	);
14:28:25 774  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
14:28:25 775  
14:28:25 776  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
14:28:25 777  	in_max_days_until_close IN NUMBER,
14:28:25 778  	in_num_subs_to_fetch	IN NUMBER,
14:28:25 779  	out_result_set		OUT SYS_REFCURSOR
14:28:25 780  )
14:28:25 781  AS
14:28:25 782  BEGIN
14:28:25 783  	PROCS_SUBSCRIPTION_V23.GET_GRACE_PERIOD_SUB_REGIS(
14:28:25 784  	  in_max_days_until_close => in_max_days_until_close,
14:28:25 785  	  in_num_subs_to_fetch => in_num_subs_to_fetch,
14:28:25 786  	  out_result_set => out_result_set
14:28:25 787  	);
14:28:25 788  END GET_GRACE_PERIOD_SUB_REGIS;
14:28:25 789  
14:28:25 790  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
14:28:25 791  	out_result_set	    OUT SYS_REFCURSOR
14:28:25 792  )
14:28:25 793  AS
14:28:25 794  BEGIN
14:28:25 795  	PROCS_SUBSCRIPTION_V23.GET_ACT_SUBS_W_AMEX_CB(
14:28:25 796  	  out_result_set => out_result_set
14:28:25 797  	);
14:28:25 798  END GET_ACT_SUBS_W_AMEX_CB;
14:28:25 799  
14:28:25 800  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
14:28:25 801  	in_days_before_close	 IN NUMBER,
14:28:25 802  	in_num_licenses_to_fetch IN NUMBER,
14:28:25 803  	out_result_set		 OUT SYS_REFCURSOR
14:28:25 804  ) AS
14:28:25 805  BEGIN
14:28:25 806  	PROCS_LICENSE_V23.GET_GRACE_LICE_FOR_FINAL_TRANS(
14:28:25 807  	  in_days_before_close => in_days_before_close,
14:28:25 808  	  in_num_licenses_to_fetch => in_num_licenses_to_fetch,
14:28:25 809  	  out_result_set => out_result_set
14:28:25 810  	);
14:28:25 811  END GET_GRACE_LICE_FOR_FINAL_TRANS;
14:28:25 812  
14:28:25 813  PROCEDURE GET_EXPIRING_PAYPAL (
14:28:25 814  	in_expire_window_days	  IN NUMBER,
14:28:25 815  	in_creation_limit_days	  IN NUMBER,
14:28:25 816  	in_retry_throttle_name	  IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
14:28:25 817  	out_result_set		  OUT SYS_REFCURSOR
14:28:25 818  ) AS
14:28:25 819  BEGIN
14:28:25 820  	PROCS_FIN_INSTRUMENTS_V23.GET_EXPIRING_PAYPAL(
14:28:25 821  	  in_expire_window_days   => in_expire_window_days,
14:28:25 822  	  in_creation_limit_days  => in_creation_limit_days,
14:28:25 823  	  in_retry_throttle_name  => in_retry_throttle_name,
14:28:25 824  	  out_result_set	  => out_result_set
14:28:25 825  	);
14:28:25 826  END GET_EXPIRING_PAYPAL;
14:28:25 827  
14:28:25 828  END PUBLIC_PROCS_RENEWAL_V23;
14:28:25 829  .
14:28:25 SQL> /

Package body created.

Elapsed: 00:00:00.16
14:28:25 SQL> 
14:28:25 SQL> prompt Compiling body for public_procs_client.sql
Compiling body for public_procs_client.sql
14:28:25 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_CLIENT_V23" AS
14:28:25   2  
14:28:25   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
14:28:25   4  /*
14:28:25   5  Throws exceptions:
14:28:25   6  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25   7  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25   8  */
14:28:25   9  	in_notification_type_name IN VARCHAR2,
14:28:25  10  	out_notification_type_id  OUT NUMBER
14:28:25  11  ) AS
14:28:25  12  BEGIN
14:28:25  13  	PROCS_NOTIFICATION_V23.GET_NOTIFICATION_TYPE_BY_NAME (
14:28:25  14  	  in_notification_type_name,
14:28:25  15  	  out_notification_type_id
14:28:25  16  	);
14:28:25  17  END;
14:28:25  18  
14:28:25  19  /*****************************************************************/
14:28:25  20  
14:28:25  21  PROCEDURE ADD_NOTIFICATION (
14:28:25  22  /*
14:28:25  23  Throws exceptions:
14:28:25  24  CORE_OWNER.APP_EXCEPTION_CODES_V23.NOT_FOUND
14:28:25  25  CORE_OWNER.APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
14:28:25  26  */
14:28:25  27  	in_sender_account_id	 IN NUMBER DEFAULT 0,
14:28:25  28  	in_recipient_group_id	 IN NUMBER,
14:28:25  29  	in_notification_type_id  IN NUMBER,
14:28:25  30  	in_date_to_notify	 IN DATE,
14:28:25  31  	in_email_template_params IN CLOB
14:28:25  32  ) AS
14:28:25  33  BEGIN
14:28:25  34  	PROCS_NOTIFICATION_V23.ADD_NOTIFICATION (
14:28:25  35  	  in_sender_account_id,
14:28:25  36  	  in_recipient_group_id,
14:28:25  37  	  in_notification_type_id,
14:28:25  38  	  in_date_to_notify,
14:28:25  39  	  in_email_template_params
14:28:25  40  	);
14:28:25  41  END;
14:28:25  42  
14:28:25  43  END PUBLIC_PROCS_CLIENT_V23;
14:28:25  44  .
14:28:25 SQL> /

Package body created.

Elapsed: 00:00:00.03
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ADX_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_TEST_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V23 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> 
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V23 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V23 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V23 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.03
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V23 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V23 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V23 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> 
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.02
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:25 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V23 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> 
14:28:25 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.05
14:28:25 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
14:28:25 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:25 SQL> 
14:28:25 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.02
14:28:26 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> 
14:28:26 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> 
14:28:26 SQL> grant select, insert, update, delete ON CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.02
14:28:26 SQL> grant select ON CORE_OWNER.NOTTID_SEQ to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> 
14:28:26 SQL> Grant Execute On Core_Owner.App_Exception_Codes_V23 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> 
14:28:26 SQL> Grant Execute On Core_Owner.GLOBAL_ENUMS_V23 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
14:28:26 SQL> 
14:28:26 SQL> Grant Execute On Core_Owner.Global_Statuses_V23 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.01
14:28:26 SQL> 
14:28:26 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
14:28:26 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECPR@rac01.prd.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com
Cc: nytd_oracledba@nytimes.com

Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.prd.ewr1.nytimes.com
        DB Role: PRIMARY
        SID: ECPR
        Schema: core_owner
        Migration: 75.4-release-1.17.0-3-CORE-all
        SVN Revision: 13502
        Duration: 7 sec.
        DBA: apathrose
        