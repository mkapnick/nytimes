15:40:04 SQL> @/dbbackups/ECST2/migrations/core_owner/20.4-release-1.11.1-common/upgrade.sql
15:40:04 SQL> --------------------------------------------------------------------------------
15:40:04 SQL> -- DDL for package APP_EXCEPTION_CODES
15:40:04 SQL> --------------------------------------------------------------------------------
15:40:04 SQL> 
15:40:04 SQL> CREATE OR REPLACE PACKAGE "APP_EXCEPTION_CODES_V17"
15:40:04   2  AS
15:40:04   3  -- norlov 09.09 : current_timestamp replaced by sysdate
15:40:04   4  -- in comparisons (according to #38816)
15:40:04   5  -- 2010-09-13: according to #38860, current_timestamp calls replaced by SYSDATE variable
15:40:04   6  -- to use the same date in whole procedure, also single current_timestamp calls
15:40:04   7  -- replaced by SYSDATE calls
15:40:04   8  
15:40:04   9  
15:40:04  10  	-- EXCEPTION CODES
15:40:04  11  	UNKNOWN_ERROR	  CONSTANT NUMBER := -20001;
15:40:04  12  	NOT_FOUND	  CONSTANT NUMBER := -20002;
15:40:04  13  	STATE_ERROR	  CONSTANT NUMBER := -20003;
15:40:04  14  	DUPLICATE_ERROR   CONSTANT NUMBER := -20004;
15:40:04  15  	HISTORY_ERROR	  CONSTANT NUMBER := -20005;
15:40:04  16  	INVALID_PARAMETER CONSTANT NUMBER := -20006;
15:40:04  17  	INTERNAL_ERROR	  CONSTANT NUMBER := -20007;
15:40:04  18  	CONFLICT_ERROR	  CONSTANT NUMBER := -20008;
15:40:04  19  END APP_EXCEPTION_CODES_V17;
15:40:04  20  .
15:40:04 SQL> /

Package created.

Elapsed: 00:00:00.08
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> -- DDL for package GLOBAL_CONSTANTS
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> 
15:40:05 SQL> CREATE OR REPLACE PACKAGE "GLOBAL_CONSTANTS_V17" AS
15:40:05   2  
15:40:05   3  TRUE  CONSTANT NUMBER := 1;
15:40:05   4  FALSE CONSTANT NUMBER := 0;
15:40:05   5  
15:40:05   6  INFINITY CONSTANT NUMBER := -1;
15:40:05   7  
15:40:05   8  ONE_DAY_INTERVAL	 CONSTANT INTERVAL DAY TO SECOND := INTERVAL '1' DAY;
15:40:05   9  ONE_MONTH_INTERVAL CONSTANT INTERVAL YEAR TO MONTH := INTERVAL '1' MONTH;
15:40:05  10  ONE_YEAR_INTERVAL   CONSTANT INTERVAL YEAR TO MONTH := INTERVAL '1' YEAR;
15:40:05  11  
15:40:05  12  -- Exception delimeter
15:40:05  13  EXCEPTION_DELIMETER CONSTANT VARCHAR2(1) := chr(10);
15:40:05  14  
15:40:05  15  -- Number of days when core should return all money
15:40:05  16  OFFER_START_GRACE_PERIOD CONSTANT NUMBER := 7;
15:40:05  17  
15:40:05  18  -- NUmber of days when core should not return any money
15:40:05  19  OFFER_END_GRACE_PERIOD   CONSTANT NUMBER := 7;
15:40:05  20  
15:40:05  21  -- OFFER CHAIN: is refundable META DATTA RULE
15:40:05  22  OFFER_CHAIN_IS_REFUNDABLE   CONSTANT NUMBER := 1;
15:40:05  23  OFFER_CHAIN_REFUNDABLE_RULE CONSTANT VARCHAR2(10) := 'REFUNDABLE';
15:40:05  24  
15:40:05  25  -- OFFER CHAIN REFUNDABLE RULES
15:40:05  26  OFFER_CHAIN_FULL_REFUND	  CONSTANT VARCHAR2(22) := 'FULL_REFUND_DAYS_LIMIT';
15:40:05  27  OFFER_CHAIN_PRORATED_REFUND CONSTANT VARCHAR2(26) := 'PRORATED_REFUND_DAYS_LIMIT';
15:40:05  28  
15:40:05  29  -- norlov: name of the OC eligibility
15:40:05  30  GIFT_CERTIFICATE_REQUIRED CONSTANT VARCHAR2(25) := 'gift certificate required';
15:40:05  31  
15:40:05  32  -- norlov: flag for set elibility
15:40:05  33  ELIGIBILITY_FLAG_SET CONSTANT VARCHAR2(1) := '1';
15:40:05  34  
15:40:05  35  -- norlov: name of OC metadata
15:40:05  36  REDEMPTION_OC_ID CONSTANT VARCHAR2(25) := 'redemption offer chain id';
15:40:05  37  
15:40:05  38  -- norlov: name of the OC eligibility
15:40:05  39  MAX_CONCURRENT_SUBS CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
15:40:05  40  
15:40:05  41  -- norlov: 'unlimited' value for max concurrent subscription number
15:40:05  42  MAX_CONCURRENT_SUBS_UNLIM CONSTANT VARCHAR2(9) := 'UNLIMITED';
15:40:05  43  
15:40:05  44  -- 'unlimited' value for max concurrent products number
15:40:05  45  MAX_CONSURRENT_PRD_UNLIM CONSTANT VARCHAR2(9) := 'UNLIMITED';
15:40:05  46  
15:40:05  47  -- UPGRADABLE_OFFER_CHAIN_ID
15:40:05  48  OCMD_UPGRADABLE_OFFER_CHAIN_ID CONSTANT VARCHAR(25) := 'UPGRADABLE_OFFER_CHAIN_ID';
15:40:05  49  
15:40:05  50  -- Max number of records that should be return
15:40:05  51  MAX_RETURN_COUNT NUMBER := 1000;
15:40:05  52  
15:40:05  53  -- Share end date for non-group-pass group accounts
15:40:05  54  MAX_DATE CONSTANT DATE := TO_DATE('12/31/9999', 'MM/DD/YYYY');
15:40:05  55  
15:40:05  56  END GLOBAL_CONSTANTS_V17;
15:40:05  57  .
15:40:05 SQL> /

Package created.

Elapsed: 00:00:00.05
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> -- DDL for package GLOBAL_ENUMS
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> 
15:40:05 SQL> CREATE OR REPLACE PACKAGE "GLOBAL_ENUMS_V17" AS
15:40:05   2  
15:40:05   3  ----
15:40:05   4  -- CREDIT CARD TYPES
15:40:05   5  
15:40:05   6  CREDIT_CARD_AMEX	      CONSTANT NUMBER := 1;
15:40:05   7  CREDIT_CARD_VISA	      CONSTANT NUMBER := 2;
15:40:05   8  CREDIT_CARD_MASTER_CARD CONSTANT NUMBER := 3;
15:40:05   9  CREDIT_CARD_DISCOVER    CONSTANT NUMBER := 4;
15:40:05  10  
15:40:05  11  ----
15:40:05  12  -- INSTRUMENT TYPE
15:40:05  13  
15:40:05  14  INSTRUMENT_CREDIT_CARD	   CONSTANT NUMBER := 1;
15:40:05  15  INSTRUMENT_PAYPAL 	   CONSTANT NUMBER := 2;
15:40:05  16  INSTRUMENT_GIFT_CERTIFICATE  CONSTANT NUMBER := 3;
15:40:05  17  INSTRUMENT_ZCI_INSTRUMENT    CONSTANT NUMBER := 4;
15:40:05  18  
15:40:05  19  ----
15:40:05  20  -- SYSTEM ACTIVITY REASONS
15:40:05  21  
15:40:05  22  SAC_SYSTEM_APPLIED_RULE CONSTANT NUMBER := 1;
15:40:05  23  
15:40:05  24  ----
15:40:05  25  -- GIFT CERTIFICATES TYPE
15:40:05  26  
15:40:05  27  GSTYPE_GSTYPE1 CONSTANT NUMBER := 1;
15:40:05  28  GSTYPE_GSTYPE2 CONSTANT NUMBER := 2;
15:40:05  29  
15:40:05  30  ----
15:40:05  31  -- SYSTEM CATEGORY
15:40:05  32  
15:40:05  33  SYSTEM_CATEGORY_LIVE CONSTANT NUMBER := 1;
15:40:05  34  SYSTEM_CATEGORY_TEST CONSTANT NUMBER := 2;
15:40:05  35  
15:40:05  36  ----
15:40:05  37  -- OFFER_RECURRENCES
15:40:05  38  
15:40:05  39  OFFER_REC_INFINITY CONSTANT NUMBER := -1;
15:40:05  40  
15:40:05  41  ----
15:40:05  42  -- TAX JURISDICTION LEVELS
15:40:05  43  -- We need only international right now
15:40:05  44  
15:40:05  45  JURIS_INTERNATIONAL CONSTANT NUMBER := 5;
15:40:05  46  
15:40:05  47  ----
15:40:05  48  -- TAX TYPES
15:40:05  49  
15:40:05  50  TAX_TYPE_SALES CONSTANT NUMBER := 1;
15:40:05  51  TAX_TYPE_VAT   CONSTANT NUMBER := 2;
15:40:05  52  
15:40:05  53  END GLOBAL_ENUMS_V17;
15:40:05  54  .
15:40:05 SQL> /

Package created.

Elapsed: 00:00:00.05
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> -- DDL for package GLOBAL_STATUSES
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> 
15:40:05 SQL> CREATE OR REPLACE PACKAGE "GLOBAL_STATUSES_V17" AS
15:40:05   2  
15:40:05   3  
15:40:05   4  ----
15:40:05   5  -- ACCOUNT STATUSES
15:40:05   6  
15:40:05   7  ACCOUNT_ACTIVE   CONSTANT NUMBER := 1;
15:40:05   8  ACCOUNT_FROZEN   CONSTANT NUMBER := 2;
15:40:05   9  ACCOUNT_DISABLED CONSTANT NUMBER := 3;
15:40:05  10  
15:40:05  11  ----
15:40:05  12  -- SUBSCRIPTION STATUSES
15:40:05  13  
15:40:05  14  SUBSCRIPTION_ACTIVE	  CONSTANT NUMBER := 1;
15:40:05  15  SUBSCRIPTION_SUSPENDED	  CONSTANT NUMBER := 2;
15:40:05  16  SUBSCRIPTION_CANCELED	  CONSTANT NUMBER := 3;
15:40:05  17  SUBSCRIPTION_CLOSED	  CONSTANT NUMBER := 4;
15:40:05  18  SUBSCRIPTION_FALSE_START	  CONSTANT NUMBER := 5;
15:40:05  19  
15:40:05  20  ----
15:40:05  21  -- CREDIT_CARD STATUSES
15:40:05  22  
15:40:05  23  CREDIT_CARD_ACTIVE   CONSTANT NUMBER := 1;
15:40:05  24  CREDIT_CARD_INVALID  CONSTANT NUMBER := 2; -- WAS INACTIVE
15:40:05  25  CREDIT_CARD_DISABLED CONSTANT NUMBER := 3; -- WAS FROZEN
15:40:05  26  CREDIT_CARD_EXPIRED  CONSTANT NUMBER := 4;
15:40:05  27  
15:40:05  28  ----
15:40:05  29  -- PAYPAL STATUSES
15:40:05  30  
15:40:05  31  PAYPAL_ACTIVE   CONSTANT NUMBER := 1;
15:40:05  32  PAYPAL_INACTIVE CONSTANT NUMBER := 2;
15:40:05  33  PAYPAL_FROZEN   CONSTANT NUMBER := 3;
15:40:05  34  
15:40:05  35  ----
15:40:05  36  -- GIFT_CERTIFICATE STATUSES
15:40:05  37  
15:40:05  38  GIFT_CERTIFICATE_ACTIVE	 CONSTANT NUMBER := 1;
15:40:05  39  GIFT_CERTIFICATE_FINALIZED CONSTANT NUMBER := 2;
15:40:05  40  GIFT_CERTIFICATE_REFUNDED  CONSTANT NUMBER := 3;
15:40:05  41  
15:40:05  42  ----
15:40:05  43  -- TRANSACTION STATUSES
15:40:05  44  
15:40:05  45  TRANSACTION_PENDING	     CONSTANT NUMBER := 1;
15:40:05  46  TRANSACTION_CLOSED	     CONSTANT NUMBER := 2;
15:40:05  47  TRANSACTION_CHARGEBACK	     CONSTANT NUMBER := 3;
15:40:05  48  TRANSACTION_PREPARE	     CONSTANT NUMBER := 1;
15:40:05  49  TRANSACTION_DECLINED	     CONSTANT NUMBER := 7;
15:40:05  50  
15:40:05  51  ----
15:40:05  52  -- TRANSACTION_ATTEMPT_STATUS
15:40:05  53  TRANS_ATTEMPT_IN_PROGRESS CONSTANT NUMBER := 1;
15:40:05  54  TRANS_ATTEMPT_SUCCESS	CONSTANT NUMBER := 2;
15:40:05  55  TRANS_ATTEMPT_FAILED	CONSTANT NUMBER := 3;
15:40:05  56  
15:40:05  57  ----
15:40:05  58  -- PRODUCT STATUSES
15:40:05  59  
15:40:05  60  PRODUCT_ACTIVE	CONSTANT NUMBER := 1;
15:40:05  61  PRODUCT_INACTIVE	CONSTANT NUMBER := 2;
15:40:05  62  PRODUCT_DISABLED	CONSTANT NUMBER := 3;
15:40:05  63  
15:40:05  64  ----
15:40:05  65  -- LICENSE STATUSES
15:40:05  66  
15:40:05  67  LICENSE_CLOSED CONSTANT NUMBER := 1;
15:40:05  68  LICENSE_ACTIVE CONSTANT NUMBER := 2;
15:40:05  69  
15:40:05  70  ----
15:40:05  71  -- INVOICE STATUSES
15:40:05  72  
15:40:05  73  INVOICE_OPEN		  CONSTANT NUMBER := 1; -- IN SPECS INVOICE_PENDING
15:40:05  74  INVOICE_CLOSED		  CONSTANT NUMBER := 3; -- IN SPECS INVOICE_PAID
15:40:05  75  /*
15:40:05  76  Next statuses were deleted by Sergey.
15:40:05  77  INVOICE_PENDING_TRANSACTION CONSTANT NUMBER := 2; -- IN SPECS INVOICE_PENDING_TRANSACTION
15:40:05  78  INVOICE_LEGACY		  CONSTANT NUMBER := 4;
15:40:05  79  INVOICE_FAILED		  CONSTANT NUMBER := 5; -- FAILED INVOICE
15:40:05  80  INVOICE_CANCELED		  CONSTANT NUMBER := 6; -- CANCELED INVOICE
15:40:05  81  */
15:40:05  82  
15:40:05  83  ----
15:40:05  84  -- CHARGE STATUSES
15:40:05  85  
15:40:05  86  CHARGE_OPENED    CONSTANT NUMBER := 1;
15:40:05  87  CHARGE_PROCESSED CONSTANT NUMBER := 2;
15:40:05  88  CHARGE_CANCELED  CONSTANT NUMBER := 3;
15:40:05  89  
15:40:05  90  ----
15:40:05  91  -- OFFER STATUSES
15:40:05  92  
15:40:05  93  OFFER_ACTIVE   CONSTANT NUMBER := 1;
15:40:05  94  OFFER_INACTIVE CONSTANT NUMBER := 2;
15:40:05  95  OFFER_DISABLED CONSTANT NUMBER := 3;
15:40:05  96  
15:40:05  97  ----
15:40:05  98  -- OFFER_CHAIN STATUSES
15:40:05  99  
15:40:05 100  OFFER_CHAIN_ACTIVE   CONSTANT NUMBER := 1;
15:40:05 101  OFFER_CHAIN_INACTIVE CONSTANT NUMBER := 2;
15:40:05 102  OFFER_CHAIN_DISABLED CONSTANT NUMBER := 3;
15:40:05 103  
15:40:05 104  ----
15:40:05 105  -- ZERO_CHARGE_INSTRUMENT STATUSES
15:40:05 106  
15:40:05 107  ZERO_CHARGE_INSTR_ACTIVE CONSTANT NUMBER := 1;
15:40:05 108  ZERO_CHARGE_INSTR_DISABLED CONSTANT NUMBER := 2;
15:40:05 109  
15:40:05 110  ----
15:40:05 111  -- SUBSCRIPTION_CANCELATION_REASONS
15:40:05 112  
15:40:05 113  SUBSCR_CANC_REASON_ACTIVE CONSTANT NUMBER := 1;
15:40:05 114  SUBSCR_CANC_REASON_INACTIVE CONSTANT NUMBER := 1;
15:40:05 115  
15:40:05 116  GROUP_ACC_IP_RNG_ACTIVE CONSTANT NUMBER := 1;
15:40:05 117  GROUP_ACC_IP_RNG_INACTIVE CONSTANT NUMBER := 2;
15:40:05 118  
15:40:05 119  GROUP_ACC_EMAIL_DOMAIN_ACT CONSTANT NUMBER := 1;
15:40:05 120  GROUP_ACC_EMAIL_DOMAIN_INACT CONSTANT NUMBER := 0;
15:40:05 121  
15:40:05 122  END GLOBAL_STATUSES_V17;
15:40:05 123  .
15:40:05 SQL> /

Package created.

Elapsed: 00:00:00.04
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> -- DDL for package NOTIFICATION_STATUSES
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> 
15:40:05 SQL> CREATE OR REPLACE PACKAGE "NOTIFICATION_STATUSES_V17" AS
15:40:05   2  
15:40:05   3  ----
15:40:05   4  -- NOTIFICATION STATUSES
15:40:05   5  
15:40:05   6  NOTIFICATION_SENT    CONSTANT NUMBER := 1;
15:40:05   7  NOTIFICATION_PENDING CONSTANT NUMBER := 2;
15:40:05   8  NOTIFICATION_FAILED  CONSTANT NUMBER := 3;
15:40:05   9  
15:40:05  10  END NOTIFICATION_STATUSES_V17;
15:40:05  11  .
15:40:05 SQL> /

Package created.

Elapsed: 00:00:00.03
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> 
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> -- DDL for package PROCS_COMMON
15:40:05 SQL> --------------------------------------------------------------------------------
15:40:05 SQL> 
15:40:05 SQL> CREATE OR REPLACE PACKAGE "PROCS_COMMON_V17" AS
15:40:05   2  
15:40:05   3  FUNCTION ADD_ISO8601DURATION_TO_DATE(
15:40:05   4  	in_duration IN VARCHAR2,
15:40:05   5  	in_start_date IN DATE
15:40:05   6  ) RETURN DATE;
15:40:05   7  
15:40:05   8  PROCEDURE ISO8601DURATION_TO_INTERVALS(
15:40:05   9  /*
15:40:05  10  Throws exceptions:
15:40:05  11  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:40:05  12  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:40:05  13  */
15:40:05  14  	in_duration IN	VARCHAR2,
15:40:05  15  	out_years   OUT NUMBER,
15:40:05  16  	out_months  OUT NUMBER,
15:40:05  17  	out_days    OUT NUMBER
15:40:05  18  );
15:40:05  19  
15:40:05  20  FUNCTION NORMALIZE_DATE(
15:40:05  21   in_date IN DATE
15:40:05  22  ) RETURN DATE;
15:40:05  23  
15:40:05  24  FUNCTION GENERATE_EXCEPTION_MESSAGE(
15:40:05  25  	in_sproc_name	    IN VARCHAR2,
15:40:05  26  	in_error_message    IN VARCHAR2,
15:40:05  27  	in_error_stacktrace IN VARCHAR2 DEFAULT NULL
15:40:05  28  ) RETURN VARCHAR2;
15:40:05  29  
15:40:05  30  PROCEDURE THROW_EXCEPTION(
15:40:05  31  	in_exception_code   IN NUMBER,
15:40:05  32  	in_sproc_name	    IN VARCHAR2,
15:40:05  33  	in_error_message    IN VARCHAR2,
15:40:05  34  	in_error_stacktrace IN VARCHAR2 DEFAULT NULL
15:40:05  35  );
15:40:05  36  
15:40:05  37  FUNCTION ROUND_10_6_TO_10_2 (
15:40:05  38  	in_number NUMBER
15:40:05  39  ) RETURN NUMBER;
15:40:05  40  
15:40:05  41  END PROCS_COMMON_V17;
15:40:05  42  .
15:40:05 SQL> /

Package created.

Elapsed: 00:00:00.13
15:40:05 SQL> 
15:40:05 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_COMMON_V17" AS
15:40:05   2  
15:40:05   3  FUNCTION ADD_ISO8601DURATION_TO_DATE(
15:40:05   4  	in_duration IN VARCHAR2,
15:40:05   5  	in_start_date IN DATE
15:40:05   6  ) RETURN DATE AS
15:40:05   7  	var_end_date DATE;
15:40:05   8  	var_years NUMBER;
15:40:05   9  	var_months NUMBER;
15:40:05  10  	var_days NUMBER;
15:40:05  11  	var_ym_interval INTERVAL YEAR TO MONTH;
15:40:05  12  	var_ds_interval INTERVAL DAY(3) TO SECOND;
15:40:05  13  BEGIN
15:40:05  14  	PROCS_COMMON_V17.ISO8601DURATION_TO_INTERVALS(in_duration, var_years, var_months, var_days);
15:40:05  15  	var_ym_interval := var_years || '-' || var_months;
15:40:05  16  	var_ds_interval := var_days || ' 0:0:0';
15:40:05  17  
15:40:05  18  	var_end_date := in_start_date + var_ym_interval + var_ds_interval;
15:40:05  19  	RETURN var_end_date;
15:40:05  20  END ADD_ISO8601DURATION_TO_DATE;
15:40:05  21  
15:40:05  22  PROCEDURE ISO8601DURATION_TO_INTERVALS(
15:40:05  23  /*
15:40:05  24  Throws exceptions:
15:40:05  25  APP_EXCEPTION_CODES_V17.INTERNAL_ERROR
15:40:05  26  APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR
15:40:05  27  */
15:40:05  28  	in_duration IN	VARCHAR2,
15:40:05  29  	out_years   OUT NUMBER,
15:40:05  30  	out_months  OUT NUMBER,
15:40:05  31  	out_days    OUT NUMBER
15:40:05  32  ) AS
15:40:05  33  SPROC_NAME	  CONSTANT VARCHAR2(28) := 'ISO8601DURATION_TO_INTERVALS';
15:40:05  34  -- VARIABLES
15:40:05  35  var_checking_status NUMBER;
15:40:05  36  temp_duration	  VARCHAR2(29);
15:40:05  37  var_is_t_founded	  NUMBER;
15:40:05  38  
15:40:05  39  var_date_duration VARCHAR2(29);
15:40:05  40  var_time_duration VARCHAR2(29);
15:40:05  41  
15:40:05  42  var_years   VARCHAR2(4);
15:40:05  43  var_monthes VARCHAR2(4);
15:40:05  44  var_days	  VARCHAR2(4);
15:40:05  45  var_hours   VARCHAR2(4);
15:40:05  46  var_minutes VARCHAR2(4);
15:40:05  47  var_seconds VARCHAR2(4);
15:40:05  48  
15:40:05  49  -- EXCEPTIONS
15:40:05  50  BAD_ISO_FORMAT EXCEPTION;
15:40:05  51  BEGIN
15:40:05  52  
15:40:05  53  	var_years   := '0';
15:40:05  54  	var_monthes := '0';
15:40:05  55  	var_days    := '0';
15:40:05  56  	var_hours   := '0';
15:40:05  57  	var_minutes := '0';
15:40:05  58  	var_seconds := '0';
15:40:05  59  
15:40:05  60  	SELECT
15:40:05  61  	  COUNT(*) into var_checking_status
15:40:05  62  	FROM
15:40:05  63  	  DUAL
15:40:05  64  	WHERE
15:40:05  65  	  REGEXP_LIKE(in_duration, '^P')
15:40:05  66  	  AND ROWNUM <= 1;
15:40:05  67  
15:40:05  68  	IF var_checking_status = 0 THEN
15:40:05  69  	  RAISE BAD_ISO_FORMAT;
15:40:05  70  	END IF;
15:40:05  71  
15:40:05  72  	SELECT
15:40:05  73  	  SUBSTR(in_duration, 2) into temp_duration
15:40:05  74  	FROM DUAL
15:40:05  75  	WHERE ROWNUM <= 1;
15:40:05  76  
15:40:05  77  	var_is_t_founded := INSTR(temp_duration, 'T');
15:40:05  78  
15:40:05  79  	IF var_is_t_founded > 1 OR var_is_t_founded = 0 THEN
15:40:05  80  	  -- RESOLVING DATE FROM ISO STRING
15:40:05  81  	  IF var_is_t_founded != 0 THEN
15:40:05  82  	    var_date_duration := SUBSTR(temp_duration, 1, var_is_t_founded - 1);
15:40:05  83  	  ELSE
15:40:05  84  	    var_date_duration := temp_duration;
15:40:05  85  	  END IF;
15:40:05  86  
15:40:05  87  	  SELECT
15:40:05  88  	    COUNT(*) into var_checking_status
15:40:05  89  	  FROM
15:40:05  90  	    DUAL
15:40:05  91  	  WHERE
15:40:05  92  	    REGEXP_LIKE(var_date_duration, '^(\d{1,3}Y){0,1}(\d{1,3}M){0,1}(\d{1,3}D){0,1}$')
15:40:05  93  	    AND ROWNUM <= 1;
15:40:05  94  
15:40:05  95  	  IF var_checking_status = 0 THEN
15:40:05  96  	    RAISE BAD_ISO_FORMAT;
15:40:05  97  	  END IF;
15:40:05  98  
15:40:05  99  	  IF INSTR(var_date_duration, 'Y') != 0 THEN
15:40:05 100  	    SELECT
15:40:05 101  	      REGEXP_SUBSTR(var_date_duration, '\d+Y') into var_years
15:40:05 102  	    FROM
15:40:05 103  	      DUAL;
15:40:05 104  	    var_years := SUBSTR(var_years, 1, LENGTH(var_years) - 1);
15:40:05 105  	  END IF;
15:40:05 106  
15:40:05 107  	  IF INSTR(var_date_duration, 'M') != 0 THEN
15:40:05 108  	    SELECT
15:40:05 109  	      REGEXP_SUBSTR(var_date_duration, '\d+M') into var_monthes
15:40:05 110  	    FROM
15:40:05 111  	      DUAL;
15:40:05 112  	    var_monthes := SUBSTR(var_monthes, 1, LENGTH(var_monthes) - 1);
15:40:05 113  	  END IF;
15:40:05 114  
15:40:05 115  	  IF INSTR(var_date_duration, 'D') != 0 THEN
15:40:05 116  	    SELECT
15:40:05 117  	      REGEXP_SUBSTR(var_date_duration, '\d+D') into var_days
15:40:05 118  	    FROM
15:40:05 119  	      DUAL;
15:40:05 120  	    var_days := SUBSTR(var_days, 1, LENGTH(var_days) - 1);
15:40:05 121  	  END IF;
15:40:05 122  	END IF;
15:40:05 123  
15:40:05 124  	IF (var_is_t_founded > 0) THEN
15:40:05 125  	  -- RESOLVING TIME FROM ISO STRING
15:40:05 126  	  var_time_duration := SUBSTR(temp_duration, var_is_t_founded + 1);
15:40:05 127  
15:40:05 128  	  SELECT
15:40:05 129  	    COUNT(*) into var_checking_status
15:40:05 130  	  FROM
15:40:05 131  	    DUAL
15:40:05 132  	  WHERE
15:40:05 133  	    REGEXP_LIKE(var_time_duration, '^(\d{1,3}H){0,1}(\d{1,3}M){0,1}(\d{1,3}S){0,1}$')
15:40:05 134  	    AND ROWNUM <= 1;
15:40:05 135  
15:40:05 136  	  IF var_checking_status = 0 THEN
15:40:05 137  	    RAISE BAD_ISO_FORMAT;
15:40:05 138  	  END IF;
15:40:05 139  
15:40:05 140  	  IF INSTR(var_time_duration, 'H') != 0 THEN
15:40:05 141  	    SELECT
15:40:05 142  	      REGEXP_SUBSTR(var_time_duration, '\d+H') into var_hours
15:40:05 143  	    FROM
15:40:05 144  	      DUAL;
15:40:05 145  	    var_hours := SUBSTR(var_hours, 1, LENGTH(var_hours) - 1);
15:40:05 146  	  END IF;
15:40:05 147  
15:40:05 148  	  IF INSTR(var_time_duration, 'M') != 0 THEN
15:40:05 149  	    SELECT
15:40:05 150  	      REGEXP_SUBSTR(var_time_duration, '\d+M') into var_minutes
15:40:05 151  	    FROM
15:40:05 152  	      DUAL;
15:40:05 153  	    var_minutes := SUBSTR(var_minutes, 1, LENGTH(var_minutes) - 1);
15:40:05 154  	  END IF;
15:40:05 155  
15:40:05 156  	  IF INSTR(var_time_duration, 'S') != 0 THEN
15:40:05 157  	    SELECT
15:40:05 158  	      REGEXP_SUBSTR(var_time_duration, '\d+S') into var_seconds
15:40:05 159  	    FROM
15:40:05 160  	      DUAL;
15:40:05 161  	    var_seconds := SUBSTR(var_seconds, 1, LENGTH(var_seconds) - 1);
15:40:05 162  	  END IF;
15:40:05 163  
15:40:05 164  	  var_time_duration := SUBSTR(temp_duration, var_is_t_founded);
15:40:05 165  	END IF;
15:40:05 166  
15:40:05 167  	out_years  := var_years;
15:40:05 168  	out_months := var_monthes;
15:40:05 169  	out_days   := var_days;
15:40:05 170  
15:40:05 171  EXCEPTION
15:40:05 172  WHEN BAD_ISO_FORMAT THEN
15:40:05 173  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.INTERNAL_ERROR,
15:40:05 174  	  SPROC_NAME, 'Bad date format');
15:40:05 175  WHEN OTHERS THEN
15:40:05 176  	PROCS_COMMON_V17.THROW_EXCEPTION(APP_EXCEPTION_CODES_V17.UNKNOWN_ERROR,
15:40:05 177  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:40:05 178  END ISO8601DURATION_TO_INTERVALS;
15:40:05 179  
15:40:05 180  /******************************************************************************/
15:40:05 181  
15:40:05 182  FUNCTION NORMALIZE_DATE(
15:40:05 183   in_date IN DATE
15:40:05 184  ) RETURN DATE AS
15:40:05 185  -- VARIABLES
15:40:05 186  var_normalized_date DATE;
15:40:05 187  BEGIN
15:40:05 188  	var_normalized_date := TRUNC(in_date);
15:40:05 189  	RETURN var_normalized_date;
15:40:05 190  END NORMALIZE_DATE;
15:40:05 191  
15:40:05 192  /******************************************************************************/
15:40:05 193  
15:40:05 194  FUNCTION GENERATE_EXCEPTION_MESSAGE(
15:40:05 195  	in_sproc_name	    IN VARCHAR2,
15:40:05 196  	in_error_message    IN VARCHAR2,
15:40:05 197  	in_error_stacktrace IN VARCHAR2 DEFAULT NULL
15:40:05 198  ) RETURN VARCHAR2 AS
15:40:05 199  BEGIN
15:40:05 200  	IF in_error_stacktrace IS NOT NULL THEN
15:40:05 201  	  RETURN in_sproc_name || ': ' || in_error_message || ': ' || GLOBAL_CONSTANTS_V17.EXCEPTION_DELIMETER || in_error_stacktrace;
15:40:05 202  	END IF;
15:40:05 203  	RETURN
15:40:05 204  	  in_sproc_name || ': ' || in_error_message;
15:40:05 205  END GENERATE_EXCEPTION_MESSAGE;
15:40:05 206  
15:40:05 207  /******************************************************************************/
15:40:05 208  
15:40:05 209  PROCEDURE THROW_EXCEPTION(
15:40:05 210  	in_exception_code   IN NUMBER,
15:40:05 211  	in_sproc_name	    IN VARCHAR2,
15:40:05 212  	in_error_message    IN VARCHAR2,
15:40:05 213  	in_error_stacktrace IN VARCHAR2 DEFAULT NULL
15:40:05 214  ) AS
15:40:05 215  BEGIN
15:40:05 216  	RAISE_APPLICATION_ERROR(in_exception_code, GENERATE_EXCEPTION_MESSAGE(in_sproc_name, in_error_message, in_error_stacktrace));
15:40:05 217  END;
15:40:05 218  
15:40:05 219  FUNCTION ROUND_10_6_TO_10_2 (
15:40:05 220  	in_number NUMBER
15:40:05 221  ) RETURN NUMBER AS
15:40:05 222  v_result NUMBER(10,2);
15:40:05 223  BEGIN
15:40:05 224  	v_result := in_number;
15:40:05 225  	return v_result;
15:40:05 226  END;
15:40:05 227  
15:40:05 228  END PROCS_COMMON_V17;
15:40:05 229  .
15:40:05 SQL> /

Package body created.

Elapsed: 00:00:00.09
15:40:05 SQL> 
15:40:05 SQL> grant execute on CORE_OWNER.APP_EXCEPTION_CODES_V17 to core_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.02
15:40:05 SQL> grant execute on CORE_OWNER.APP_EXCEPTION_CODES_V17 to ops_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:05 SQL> grant execute on CORE_OWNER.APP_EXCEPTION_CODES_V17 to ops_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:05 SQL> 
15:40:05 SQL> grant execute on CORE_OWNER.GLOBAL_ENUMS_V17 to core_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:05 SQL> grant execute on CORE_OWNER.GLOBAL_ENUMS_V17 to ops_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:05 SQL> grant execute on CORE_OWNER.GLOBAL_ENUMS_V17 to ops_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:05 SQL> 
15:40:05 SQL> grant execute on CORE_OWNER.GLOBAL_STATUSES_V17 to core_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:05 SQL> grant execute on CORE_OWNER.GLOBAL_STATUSES_V17 to ops_owner;

Grant succeeded.

Elapsed: 00:00:00.00
15:40:05 SQL> grant execute on CORE_OWNER.GLOBAL_STATUSES_V17 to ops_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:40:05 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
15:40:05 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECST2@rac01.stg.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: nytd_oracledba@nytimes.com
Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.stg.ewr1.nytimes.com
        SID: ECST2
        Schema: core_owner
        Migration: 20.4-release-1.11.1-common
        SVN Revision: 10382
        Duration: 1 sec.
        Service Request: https://jira.em.nytimes.com/browse/ORA-339