15:35:00 SQL> @/dbbackups/ECST/migrations/core_owner/75.3-release-1.17.0-1-CORE-common/upgrade.sql
15:35:00 SQL> --------------------------------------------------------------------------------
15:35:00 SQL> -- DDL for package APP_EXCEPTION_CODES
15:35:00 SQL> --------------------------------------------------------------------------------
15:35:00 SQL> 
15:35:00 SQL> CREATE OR REPLACE PACKAGE "APP_EXCEPTION_CODES_V23"
15:35:00   2  AS
15:35:00   3  -- norlov 09.09 : current_timestamp replaced by sysdate
15:35:00   4  -- in comparisons (according to #38816)
15:35:00   5  -- 2010-09-13: according to #38860, current_timestamp calls replaced by SYSDATE variable
15:35:00   6  -- to use the same date in whole procedure, also single current_timestamp calls
15:35:00   7  -- replaced by SYSDATE calls
15:35:00   8  
15:35:00   9  
15:35:00  10  	-- EXCEPTION CODES
15:35:00  11  	UNKNOWN_ERROR	  CONSTANT NUMBER := -20001;
15:35:00  12  	NOT_FOUND	  CONSTANT NUMBER := -20002;
15:35:00  13  	STATE_ERROR	  CONSTANT NUMBER := -20003;
15:35:00  14  	DUPLICATE_ERROR   CONSTANT NUMBER := -20004;
15:35:00  15  	HISTORY_ERROR	  CONSTANT NUMBER := -20005;
15:35:00  16  	INVALID_PARAMETER CONSTANT NUMBER := -20006;
15:35:00  17  	INTERNAL_ERROR	  CONSTANT NUMBER := -20007;
15:35:00  18  	CONFLICT_ERROR	  CONSTANT NUMBER := -20008;
15:35:00  19  END APP_EXCEPTION_CODES_V23;
15:35:00  20  .
15:35:00 SQL> /

Package created.

Elapsed: 00:00:00.27
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> -- DDL for package GLOBAL_CONSTANTS
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> 
15:35:01 SQL> CREATE OR REPLACE PACKAGE "GLOBAL_CONSTANTS_V23" AS
15:35:01   2  
15:35:01   3  TRUE  CONSTANT NUMBER := 1;
15:35:01   4  FALSE CONSTANT NUMBER := 0;
15:35:01   5  
15:35:01   6  INFINITY CONSTANT NUMBER := -1;
15:35:01   7  
15:35:01   8  ONE_DAY_INTERVAL	 CONSTANT INTERVAL DAY TO SECOND := INTERVAL '1' DAY;
15:35:01   9  ONE_MONTH_INTERVAL CONSTANT INTERVAL YEAR TO MONTH := INTERVAL '1' MONTH;
15:35:01  10  ONE_YEAR_INTERVAL   CONSTANT INTERVAL YEAR TO MONTH := INTERVAL '1' YEAR;
15:35:01  11  
15:35:01  12  -- Exception delimeter
15:35:01  13  EXCEPTION_DELIMETER CONSTANT VARCHAR2(1) := chr(10);
15:35:01  14  
15:35:01  15  -- Number of days when core should return all money
15:35:01  16  OFFER_START_GRACE_PERIOD CONSTANT NUMBER := 7;
15:35:01  17  
15:35:01  18  -- NUmber of days when core should not return any money
15:35:01  19  OFFER_END_GRACE_PERIOD   CONSTANT NUMBER := 7;
15:35:01  20  
15:35:01  21  -- OFFER CHAIN: is refundable META DATTA RULE
15:35:01  22  OFFER_CHAIN_IS_REFUNDABLE   CONSTANT NUMBER := 1;
15:35:01  23  OFFER_CHAIN_REFUNDABLE_RULE CONSTANT VARCHAR2(10) := 'REFUNDABLE';
15:35:01  24  
15:35:01  25  -- OFFER CHAIN REFUNDABLE RULES
15:35:01  26  OFFER_CHAIN_FULL_REFUND	  CONSTANT VARCHAR2(22) := 'FULL_REFUND_DAYS_LIMIT';
15:35:01  27  OFFER_CHAIN_PRORATED_REFUND CONSTANT VARCHAR2(26) := 'PRORATED_REFUND_DAYS_LIMIT';
15:35:01  28  
15:35:01  29  -- norlov: name of the OC eligibility
15:35:01  30  GIFT_CERTIFICATE_REQUIRED CONSTANT VARCHAR2(25) := 'gift certificate required';
15:35:01  31  
15:35:01  32  -- norlov: flag for set elibility
15:35:01  33  ELIGIBILITY_FLAG_SET CONSTANT VARCHAR2(1) := '1';
15:35:01  34  
15:35:01  35  -- norlov: name of OC metadata
15:35:01  36  REDEMPTION_OC_ID CONSTANT VARCHAR2(25) := 'redemption offer chain id';
15:35:01  37  
15:35:01  38  -- norlov: name of the OC eligibility
15:35:01  39  MAX_CONCURRENT_SUBS CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
15:35:01  40  
15:35:01  41  -- norlov: 'unlimited' value for max concurrent subscription number
15:35:01  42  MAX_CONCURRENT_SUBS_UNLIM CONSTANT VARCHAR2(9) := 'UNLIMITED';
15:35:01  43  
15:35:01  44  -- 'unlimited' value for max concurrent products number
15:35:01  45  MAX_CONSURRENT_PRD_UNLIM CONSTANT VARCHAR2(9) := 'UNLIMITED';
15:35:01  46  
15:35:01  47  -- UPGRADABLE_OFFER_CHAIN_ID
15:35:01  48  OCMD_UPGRADABLE_OFFER_CHAIN_ID CONSTANT VARCHAR(25) := 'UPGRADABLE_OFFER_CHAIN_ID';
15:35:01  49  
15:35:01  50  -- Max number of records that should be return
15:35:01  51  MAX_RETURN_COUNT NUMBER := 1000;
15:35:01  52  
15:35:01  53  -- Share end date for non-group-pass group accounts
15:35:01  54  MAX_DATE CONSTANT DATE := TO_DATE('12/31/9999', 'MM/DD/YYYY');
15:35:01  55  
15:35:01  56  END GLOBAL_CONSTANTS_V23;
15:35:01  57  .
15:35:01 SQL> /

Package created.

Elapsed: 00:00:00.05
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> -- DDL for package GLOBAL_ENUMS
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> 
15:35:01 SQL> CREATE OR REPLACE PACKAGE "GLOBAL_ENUMS_V23" AS
15:35:01   2  
15:35:01   3  ----
15:35:01   4  -- CREDIT CARD TYPES
15:35:01   5  
15:35:01   6  CREDIT_CARD_AMEX	      CONSTANT NUMBER := 1;
15:35:01   7  CREDIT_CARD_VISA	      CONSTANT NUMBER := 2;
15:35:01   8  CREDIT_CARD_MASTER_CARD CONSTANT NUMBER := 3;
15:35:01   9  CREDIT_CARD_DISCOVER    CONSTANT NUMBER := 4;
15:35:01  10  
15:35:01  11  ----
15:35:01  12  -- INSTRUMENT TYPE
15:35:01  13  
15:35:01  14  INSTRUMENT_CREDIT_CARD	   CONSTANT NUMBER := 1;
15:35:01  15  INSTRUMENT_PAYPAL 	   CONSTANT NUMBER := 2;
15:35:01  16  INSTRUMENT_GIFT_CERTIFICATE  CONSTANT NUMBER := 3;
15:35:01  17  INSTRUMENT_ZCI_INSTRUMENT    CONSTANT NUMBER := 4;
15:35:01  18  
15:35:01  19  ----
15:35:01  20  -- SYSTEM ACTIVITY REASONS
15:35:01  21  
15:35:01  22  SAC_SYSTEM_APPLIED_RULE CONSTANT NUMBER := 1;
15:35:01  23  
15:35:01  24  ----
15:35:01  25  -- GIFT CERTIFICATES TYPE
15:35:01  26  
15:35:01  27  GSTYPE_GSTYPE1 CONSTANT NUMBER := 1;
15:35:01  28  GSTYPE_GSTYPE2 CONSTANT NUMBER := 2;
15:35:01  29  
15:35:01  30  ----
15:35:01  31  -- SYSTEM CATEGORY
15:35:01  32  
15:35:01  33  SYSTEM_CATEGORY_LIVE CONSTANT NUMBER := 1;
15:35:01  34  SYSTEM_CATEGORY_TEST CONSTANT NUMBER := 2;
15:35:01  35  
15:35:01  36  ----
15:35:01  37  -- OFFER_RECURRENCES
15:35:01  38  
15:35:01  39  OFFER_REC_INFINITY CONSTANT NUMBER := -1;
15:35:01  40  
15:35:01  41  ----
15:35:01  42  -- TAX JURISDICTION LEVELS
15:35:01  43  -- We need only international right now
15:35:01  44  
15:35:01  45  JURIS_INTERNATIONAL CONSTANT NUMBER := 5;
15:35:01  46  
15:35:01  47  ----
15:35:01  48  -- TAX TYPES
15:35:01  49  
15:35:01  50  TAX_TYPE_SALES CONSTANT NUMBER := 1;
15:35:01  51  TAX_TYPE_VAT   CONSTANT NUMBER := 2;
15:35:01  52  
15:35:01  53  END GLOBAL_ENUMS_V23;
15:35:01  54  .
15:35:01 SQL> /

Package created.

Elapsed: 00:00:00.02
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> -- DDL for package GLOBAL_STATUSES
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> 
15:35:01 SQL> CREATE OR REPLACE PACKAGE "GLOBAL_STATUSES_V23" AS
15:35:01   2  
15:35:01   3  REAL_TIME_CANCEL_REASON CONSTANT NUMBER := 41;
15:35:01   4  
15:35:01   5  ----
15:35:01   6  -- ACCOUNT STATUSES
15:35:01   7  
15:35:01   8  ACCOUNT_ACTIVE   CONSTANT NUMBER := 1;
15:35:01   9  ACCOUNT_FROZEN   CONSTANT NUMBER := 2;
15:35:01  10  ACCOUNT_DISABLED CONSTANT NUMBER := 3;
15:35:01  11  
15:35:01  12  ----
15:35:01  13  -- SUBSCRIPTION STATUSES
15:35:01  14  
15:35:01  15  SUBSCRIPTION_ACTIVE	   CONSTANT NUMBER := 1;
15:35:01  16  SUBSCRIPTION_SUSPENDED	   CONSTANT NUMBER := 2;
15:35:01  17  SUBSCRIPTION_CANCELED	   CONSTANT NUMBER := 3;
15:35:01  18  SUBSCRIPTION_CLOSED	   CONSTANT NUMBER := 4;
15:35:01  19  SUBSCRIPTION_FALSE_START	   CONSTANT NUMBER := 5;
15:35:01  20  SUBSCRIPTION_IN_GRACE_PERIOD CONSTANT NUMBER := 6;
15:35:01  21  
15:35:01  22  ----
15:35:01  23  -- CREDIT_CARD STATUSES
15:35:01  24  
15:35:01  25  CREDIT_CARD_ACTIVE   CONSTANT NUMBER := 1;
15:35:01  26  CREDIT_CARD_INVALID  CONSTANT NUMBER := 2; -- WAS INACTIVE
15:35:01  27  CREDIT_CARD_DISABLED CONSTANT NUMBER := 3; -- WAS FROZEN
15:35:01  28  CREDIT_CARD_EXPIRED  CONSTANT NUMBER := 4;
15:35:01  29  
15:35:01  30  ----
15:35:01  31  -- PAYPAL STATUSES
15:35:01  32  
15:35:01  33  PAYPAL_ACTIVE   CONSTANT NUMBER := 1;
15:35:01  34  PAYPAL_INACTIVE CONSTANT NUMBER := 2;
15:35:01  35  PAYPAL_FROZEN   CONSTANT NUMBER := 3;
15:35:01  36  
15:35:01  37  ----
15:35:01  38  -- GIFT_CERTIFICATE STATUSES
15:35:01  39  
15:35:01  40  GIFT_CERTIFICATE_ACTIVE	 CONSTANT NUMBER := 1;
15:35:01  41  GIFT_CERTIFICATE_FINALIZED CONSTANT NUMBER := 2;
15:35:01  42  GIFT_CERTIFICATE_REFUNDED  CONSTANT NUMBER := 3;
15:35:01  43  
15:35:01  44  ----
15:35:01  45  -- TRANSACTION STATUSES
15:35:01  46  
15:35:01  47  TRANSACTION_PENDING	     CONSTANT NUMBER := 1;
15:35:01  48  TRANSACTION_CLOSED	     CONSTANT NUMBER := 2;
15:35:01  49  TRANSACTION_CHARGEBACK	     CONSTANT NUMBER := 3;
15:35:01  50  TRANSACTION_PREPARE	     CONSTANT NUMBER := 1;
15:35:01  51  TRANSACTION_DECLINED	     CONSTANT NUMBER := 7;
15:35:01  52  
15:35:01  53  ----
15:35:01  54  -- TRANSACTION_ATTEMPT_STATUS
15:35:01  55  TRANS_ATTEMPT_IN_PROGRESS CONSTANT NUMBER := 1;
15:35:01  56  TRANS_ATTEMPT_SUCCESS	CONSTANT NUMBER := 2;
15:35:01  57  TRANS_ATTEMPT_FAILED	CONSTANT NUMBER := 3;
15:35:01  58  
15:35:01  59  ----
15:35:01  60  -- PRODUCT STATUSES
15:35:01  61  
15:35:01  62  PRODUCT_ACTIVE	CONSTANT NUMBER := 1;
15:35:01  63  PRODUCT_INACTIVE	CONSTANT NUMBER := 2;
15:35:01  64  PRODUCT_DISABLED	CONSTANT NUMBER := 3;
15:35:01  65  
15:35:01  66  ----
15:35:01  67  -- LICENSE STATUSES
15:35:01  68  
15:35:01  69  LICENSE_CLOSED CONSTANT NUMBER := 1;
15:35:01  70  LICENSE_ACTIVE CONSTANT NUMBER := 2;
15:35:01  71  LICENSE_IN_GRACE_PERIOD CONSTANT NUMBER := 4;
15:35:01  72  
15:35:01  73  ----
15:35:01  74  -- INVOICE STATUSES
15:35:01  75  
15:35:01  76  INVOICE_OPEN		  CONSTANT NUMBER := 1; -- IN SPECS INVOICE_PENDING
15:35:01  77  INVOICE_CLOSED		  CONSTANT NUMBER := 3; -- IN SPECS INVOICE_PAID
15:35:01  78  
15:35:01  79  
15:35:01  80  ----
15:35:01  81  -- CHARGE STATUSES
15:35:01  82  
15:35:01  83  CHARGE_OPENED    CONSTANT NUMBER := 1;
15:35:01  84  CHARGE_PROCESSED CONSTANT NUMBER := 2;
15:35:01  85  CHARGE_CANCELED  CONSTANT NUMBER := 3;
15:35:01  86  
15:35:01  87  ----
15:35:01  88  -- OFFER STATUSES
15:35:01  89  
15:35:01  90  OFFER_ACTIVE   CONSTANT NUMBER := 1;
15:35:01  91  OFFER_INACTIVE CONSTANT NUMBER := 2;
15:35:01  92  OFFER_DISABLED CONSTANT NUMBER := 3;
15:35:01  93  
15:35:01  94  ----
15:35:01  95  -- OFFER_CHAIN STATUSES
15:35:01  96  
15:35:01  97  OFFER_CHAIN_ACTIVE   CONSTANT NUMBER := 1;
15:35:01  98  OFFER_CHAIN_INACTIVE CONSTANT NUMBER := 2;
15:35:01  99  OFFER_CHAIN_DISABLED CONSTANT NUMBER := 3;
15:35:01 100  
15:35:01 101  ----
15:35:01 102  -- ZERO_CHARGE_INSTRUMENT STATUSES
15:35:01 103  
15:35:01 104  ZERO_CHARGE_INSTR_ACTIVE CONSTANT NUMBER := 1;
15:35:01 105  ZERO_CHARGE_INSTR_DISABLED CONSTANT NUMBER := 2;
15:35:01 106  
15:35:01 107  ----
15:35:01 108  -- SUBSCRIPTION_CANCELATION_REASONS
15:35:01 109  
15:35:01 110  SUBSCR_CANC_REASON_ACTIVE CONSTANT NUMBER := 1;
15:35:01 111  SUBSCR_CANC_REASON_INACTIVE CONSTANT NUMBER := 2;
15:35:01 112  SUBSCR_CANC_REASON_INT_ONLY CONSTANT NUMBER := 3;
15:35:01 113  
15:35:01 114  GROUP_ACC_IP_RNG_ACTIVE CONSTANT NUMBER := 1;
15:35:01 115  GROUP_ACC_IP_RNG_INACTIVE CONSTANT NUMBER := 2;
15:35:01 116  
15:35:01 117  GROUP_ACC_EMAIL_DOMAIN_ACT CONSTANT NUMBER := 1;
15:35:01 118  GROUP_ACC_EMAIL_DOMAIN_INACT CONSTANT NUMBER := 0;
15:35:01 119  
15:35:01 120  END GLOBAL_STATUSES_V23;
15:35:01 121  .
15:35:01 SQL> /

Package created.

Elapsed: 00:00:00.11
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> -- DDL for package NOTIFICATION_STATUSES
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> 
15:35:01 SQL> CREATE OR REPLACE PACKAGE "NOTIFICATION_STATUSES_V23" AS
15:35:01   2  
15:35:01   3  ----
15:35:01   4  -- NOTIFICATION STATUSES
15:35:01   5  
15:35:01   6  NOTIFICATION_SENT    CONSTANT NUMBER := 1;
15:35:01   7  NOTIFICATION_PENDING CONSTANT NUMBER := 2;
15:35:01   8  NOTIFICATION_FAILED  CONSTANT NUMBER := 3;
15:35:01   9  
15:35:01  10  END NOTIFICATION_STATUSES_V23;
15:35:01  11  .
15:35:01 SQL> /

Package created.

Elapsed: 00:00:00.05
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> 
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> -- DDL for package PROCS_COMMON
15:35:01 SQL> --------------------------------------------------------------------------------
15:35:01 SQL> 
15:35:01 SQL> CREATE OR REPLACE PACKAGE "PROCS_COMMON_V23" AS
15:35:01   2  
15:35:01   3  FUNCTION ADD_ISO8601DURATION_TO_DATE(
15:35:01   4  	in_duration IN VARCHAR2,
15:35:01   5  	in_start_date IN DATE
15:35:01   6  ) RETURN DATE;
15:35:01   7  
15:35:01   8  PROCEDURE ISO8601DURATION_TO_INTERVALS(
15:35:01   9  /*
15:35:01  10  Throws exceptions:
15:35:01  11  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:35:01  12  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:35:01  13  */
15:35:01  14  	in_duration IN	VARCHAR2,
15:35:01  15  	out_years   OUT NUMBER,
15:35:01  16  	out_months  OUT NUMBER,
15:35:01  17  	out_days    OUT NUMBER
15:35:01  18  );
15:35:01  19  
15:35:01  20  FUNCTION NORMALIZE_DATE(
15:35:01  21   in_date IN DATE
15:35:01  22  ) RETURN DATE;
15:35:01  23  
15:35:01  24  FUNCTION GENERATE_EXCEPTION_MESSAGE(
15:35:01  25  	in_sproc_name	    IN VARCHAR2,
15:35:01  26  	in_error_message    IN VARCHAR2,
15:35:01  27  	in_error_stacktrace IN VARCHAR2 DEFAULT NULL
15:35:01  28  ) RETURN VARCHAR2;
15:35:01  29  
15:35:01  30  PROCEDURE THROW_EXCEPTION(
15:35:01  31  	in_exception_code   IN NUMBER,
15:35:01  32  	in_sproc_name	    IN VARCHAR2,
15:35:01  33  	in_error_message    IN VARCHAR2,
15:35:01  34  	in_error_stacktrace IN VARCHAR2 DEFAULT NULL
15:35:01  35  );
15:35:01  36  
15:35:01  37  FUNCTION ROUND_10_6_TO_10_2 (
15:35:01  38  	in_number NUMBER
15:35:01  39  ) RETURN NUMBER;
15:35:01  40  
15:35:01  41  END PROCS_COMMON_V23;
15:35:01  42  .
15:35:01 SQL> /

Package created.

Elapsed: 00:00:00.08
15:35:01 SQL> 
15:35:01 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_COMMON_V23" AS
15:35:01   2  
15:35:01   3  FUNCTION ADD_ISO8601DURATION_TO_DATE(
15:35:01   4  	in_duration IN VARCHAR2,
15:35:01   5  	in_start_date IN DATE
15:35:01   6  ) RETURN DATE AS
15:35:01   7  	var_end_date DATE;
15:35:01   8  	var_years NUMBER;
15:35:01   9  	var_months NUMBER;
15:35:01  10  	var_days NUMBER;
15:35:01  11  	var_ym_interval INTERVAL YEAR TO MONTH;
15:35:01  12  	var_ds_interval INTERVAL DAY(3) TO SECOND;
15:35:01  13  BEGIN
15:35:01  14  	PROCS_COMMON_V23.ISO8601DURATION_TO_INTERVALS(in_duration, var_years, var_months, var_days);
15:35:01  15  	var_ym_interval := var_years || '-' || var_months;
15:35:01  16  	var_ds_interval := var_days || ' 0:0:0';
15:35:01  17  
15:35:01  18  	var_end_date := in_start_date + var_ym_interval + var_ds_interval;
15:35:01  19  	RETURN var_end_date;
15:35:01  20  END ADD_ISO8601DURATION_TO_DATE;
15:35:01  21  
15:35:01  22  PROCEDURE ISO8601DURATION_TO_INTERVALS(
15:35:01  23  /*
15:35:01  24  Throws exceptions:
15:35:01  25  APP_EXCEPTION_CODES_V23.INTERNAL_ERROR
15:35:01  26  APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR
15:35:01  27  */
15:35:01  28  	in_duration IN	VARCHAR2,
15:35:01  29  	out_years   OUT NUMBER,
15:35:01  30  	out_months  OUT NUMBER,
15:35:01  31  	out_days    OUT NUMBER
15:35:01  32  ) AS
15:35:01  33  SPROC_NAME	  CONSTANT VARCHAR2(28) := 'ISO8601DURATION_TO_INTERVALS';
15:35:01  34  -- VARIABLES
15:35:01  35  var_checking_status NUMBER;
15:35:01  36  temp_duration	  VARCHAR2(29);
15:35:01  37  var_is_t_founded	  NUMBER;
15:35:01  38  
15:35:01  39  var_date_duration VARCHAR2(29);
15:35:01  40  var_time_duration VARCHAR2(29);
15:35:01  41  
15:35:01  42  var_years   VARCHAR2(4);
15:35:01  43  var_monthes VARCHAR2(4);
15:35:01  44  var_days	  VARCHAR2(4);
15:35:01  45  var_hours   VARCHAR2(4);
15:35:01  46  var_minutes VARCHAR2(4);
15:35:01  47  var_seconds VARCHAR2(4);
15:35:01  48  
15:35:01  49  -- EXCEPTIONS
15:35:01  50  BAD_ISO_FORMAT EXCEPTION;
15:35:01  51  BEGIN
15:35:01  52  
15:35:01  53  	var_years   := '0';
15:35:01  54  	var_monthes := '0';
15:35:01  55  	var_days    := '0';
15:35:01  56  	var_hours   := '0';
15:35:01  57  	var_minutes := '0';
15:35:01  58  	var_seconds := '0';
15:35:01  59  
15:35:01  60  	SELECT
15:35:01  61  	  COUNT(*) into var_checking_status
15:35:01  62  	FROM
15:35:01  63  	  DUAL
15:35:01  64  	WHERE
15:35:01  65  	  REGEXP_LIKE(in_duration, '^P')
15:35:01  66  	  AND ROWNUM <= 1;
15:35:01  67  
15:35:01  68  	IF var_checking_status = 0 THEN
15:35:01  69  	  RAISE BAD_ISO_FORMAT;
15:35:01  70  	END IF;
15:35:01  71  
15:35:01  72  	SELECT
15:35:01  73  	  SUBSTR(in_duration, 2) into temp_duration
15:35:01  74  	FROM DUAL
15:35:01  75  	WHERE ROWNUM <= 1;
15:35:01  76  
15:35:01  77  	var_is_t_founded := INSTR(temp_duration, 'T');
15:35:01  78  
15:35:01  79  	IF var_is_t_founded > 1 OR var_is_t_founded = 0 THEN
15:35:01  80  	  -- RESOLVING DATE FROM ISO STRING
15:35:01  81  	  IF var_is_t_founded != 0 THEN
15:35:01  82  	    var_date_duration := SUBSTR(temp_duration, 1, var_is_t_founded - 1);
15:35:01  83  	  ELSE
15:35:01  84  	    var_date_duration := temp_duration;
15:35:01  85  	  END IF;
15:35:01  86  
15:35:01  87  	  SELECT
15:35:01  88  	    COUNT(*) into var_checking_status
15:35:01  89  	  FROM
15:35:01  90  	    DUAL
15:35:01  91  	  WHERE
15:35:01  92  	    REGEXP_LIKE(var_date_duration, '^(\d{1,3}Y){0,1}(\d{1,3}M){0,1}(\d{1,3}D){0,1}$')
15:35:01  93  	    AND ROWNUM <= 1;
15:35:01  94  
15:35:01  95  	  IF var_checking_status = 0 THEN
15:35:01  96  	    RAISE BAD_ISO_FORMAT;
15:35:01  97  	  END IF;
15:35:01  98  
15:35:01  99  	  IF INSTR(var_date_duration, 'Y') != 0 THEN
15:35:01 100  	    SELECT
15:35:01 101  	      REGEXP_SUBSTR(var_date_duration, '\d+Y') into var_years
15:35:01 102  	    FROM
15:35:01 103  	      DUAL;
15:35:01 104  	    var_years := SUBSTR(var_years, 1, LENGTH(var_years) - 1);
15:35:01 105  	  END IF;
15:35:01 106  
15:35:01 107  	  IF INSTR(var_date_duration, 'M') != 0 THEN
15:35:01 108  	    SELECT
15:35:01 109  	      REGEXP_SUBSTR(var_date_duration, '\d+M') into var_monthes
15:35:01 110  	    FROM
15:35:01 111  	      DUAL;
15:35:01 112  	    var_monthes := SUBSTR(var_monthes, 1, LENGTH(var_monthes) - 1);
15:35:01 113  	  END IF;
15:35:01 114  
15:35:01 115  	  IF INSTR(var_date_duration, 'D') != 0 THEN
15:35:01 116  	    SELECT
15:35:01 117  	      REGEXP_SUBSTR(var_date_duration, '\d+D') into var_days
15:35:01 118  	    FROM
15:35:01 119  	      DUAL;
15:35:01 120  	    var_days := SUBSTR(var_days, 1, LENGTH(var_days) - 1);
15:35:01 121  	  END IF;
15:35:01 122  	END IF;
15:35:01 123  
15:35:01 124  	IF (var_is_t_founded > 0) THEN
15:35:01 125  	  -- RESOLVING TIME FROM ISO STRING
15:35:01 126  	  var_time_duration := SUBSTR(temp_duration, var_is_t_founded + 1);
15:35:01 127  
15:35:01 128  	  SELECT
15:35:01 129  	    COUNT(*) into var_checking_status
15:35:01 130  	  FROM
15:35:01 131  	    DUAL
15:35:01 132  	  WHERE
15:35:01 133  	    REGEXP_LIKE(var_time_duration, '^(\d{1,3}H){0,1}(\d{1,3}M){0,1}(\d{1,3}S){0,1}$')
15:35:01 134  	    AND ROWNUM <= 1;
15:35:01 135  
15:35:01 136  	  IF var_checking_status = 0 THEN
15:35:01 137  	    RAISE BAD_ISO_FORMAT;
15:35:01 138  	  END IF;
15:35:01 139  
15:35:01 140  	  IF INSTR(var_time_duration, 'H') != 0 THEN
15:35:01 141  	    SELECT
15:35:01 142  	      REGEXP_SUBSTR(var_time_duration, '\d+H') into var_hours
15:35:01 143  	    FROM
15:35:01 144  	      DUAL;
15:35:01 145  	    var_hours := SUBSTR(var_hours, 1, LENGTH(var_hours) - 1);
15:35:01 146  	  END IF;
15:35:01 147  
15:35:01 148  	  IF INSTR(var_time_duration, 'M') != 0 THEN
15:35:01 149  	    SELECT
15:35:01 150  	      REGEXP_SUBSTR(var_time_duration, '\d+M') into var_minutes
15:35:01 151  	    FROM
15:35:01 152  	      DUAL;
15:35:01 153  	    var_minutes := SUBSTR(var_minutes, 1, LENGTH(var_minutes) - 1);
15:35:01 154  	  END IF;
15:35:01 155  
15:35:01 156  	  IF INSTR(var_time_duration, 'S') != 0 THEN
15:35:01 157  	    SELECT
15:35:01 158  	      REGEXP_SUBSTR(var_time_duration, '\d+S') into var_seconds
15:35:01 159  	    FROM
15:35:01 160  	      DUAL;
15:35:01 161  	    var_seconds := SUBSTR(var_seconds, 1, LENGTH(var_seconds) - 1);
15:35:01 162  	  END IF;
15:35:01 163  
15:35:01 164  	  var_time_duration := SUBSTR(temp_duration, var_is_t_founded);
15:35:01 165  	END IF;
15:35:01 166  
15:35:01 167  	out_years  := var_years;
15:35:01 168  	out_months := var_monthes;
15:35:01 169  	out_days   := var_days;
15:35:01 170  
15:35:01 171  EXCEPTION
15:35:01 172  WHEN BAD_ISO_FORMAT THEN
15:35:01 173  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.INTERNAL_ERROR,
15:35:01 174  	  SPROC_NAME, 'Bad date format');
15:35:01 175  WHEN OTHERS THEN
15:35:01 176  	PROCS_COMMON_V23.THROW_EXCEPTION(APP_EXCEPTION_CODES_V23.UNKNOWN_ERROR,
15:35:01 177  	  SPROC_NAME, 'Unknown error', SQLERRM);
15:35:01 178  END ISO8601DURATION_TO_INTERVALS;
15:35:01 179  
15:35:01 180  /******************************************************************************/
15:35:01 181  
15:35:01 182  FUNCTION NORMALIZE_DATE(
15:35:01 183   in_date IN DATE
15:35:01 184  ) RETURN DATE AS
15:35:01 185  -- VARIABLES
15:35:01 186  var_normalized_date DATE;
15:35:01 187  BEGIN
15:35:01 188  	var_normalized_date := TRUNC(in_date);
15:35:01 189  	RETURN var_normalized_date;
15:35:01 190  END NORMALIZE_DATE;
15:35:01 191  
15:35:01 192  /******************************************************************************/
15:35:01 193  
15:35:01 194  FUNCTION GENERATE_EXCEPTION_MESSAGE(
15:35:01 195  	in_sproc_name	    IN VARCHAR2,
15:35:01 196  	in_error_message    IN VARCHAR2,
15:35:01 197  	in_error_stacktrace IN VARCHAR2 DEFAULT NULL
15:35:01 198  ) RETURN VARCHAR2 AS
15:35:01 199  BEGIN
15:35:01 200  	IF in_error_stacktrace IS NOT NULL THEN
15:35:01 201  	  RETURN in_sproc_name || ': ' || in_error_message || ': ' || GLOBAL_CONSTANTS_V23.EXCEPTION_DELIMETER || in_error_stacktrace;
15:35:01 202  	END IF;
15:35:01 203  	RETURN
15:35:01 204  	  in_sproc_name || ': ' || in_error_message;
15:35:01 205  END GENERATE_EXCEPTION_MESSAGE;
15:35:01 206  
15:35:01 207  /******************************************************************************/
15:35:01 208  
15:35:01 209  PROCEDURE THROW_EXCEPTION(
15:35:01 210  	in_exception_code   IN NUMBER,
15:35:01 211  	in_sproc_name	    IN VARCHAR2,
15:35:01 212  	in_error_message    IN VARCHAR2,
15:35:01 213  	in_error_stacktrace IN VARCHAR2 DEFAULT NULL
15:35:01 214  ) AS
15:35:01 215  BEGIN
15:35:01 216  	RAISE_APPLICATION_ERROR(in_exception_code, GENERATE_EXCEPTION_MESSAGE(in_sproc_name, in_error_message, in_error_stacktrace));
15:35:01 217  END;
15:35:01 218  
15:35:01 219  FUNCTION ROUND_10_6_TO_10_2 (
15:35:01 220  	in_number NUMBER
15:35:01 221  ) RETURN NUMBER AS
15:35:01 222  v_result NUMBER(10,2);
15:35:01 223  BEGIN
15:35:01 224  	v_result := in_number;
15:35:01 225  	return v_result;
15:35:01 226  END;
15:35:01 227  
15:35:01 228  END PROCS_COMMON_V23;
15:35:01 229  .
15:35:01 SQL> /

Package body created.

Elapsed: 00:00:00.15
15:35:01 SQL> 
15:35:01 SQL> grant execute on CORE_OWNER.APP_EXCEPTION_CODES_V23 to core_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.04
15:35:01 SQL> grant execute on CORE_OWNER.GLOBAL_ENUMS_V23 to core_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.00
15:35:01 SQL> grant execute on CORE_OWNER.GLOBAL_STATUSES_V23 to core_hist_owner;

Grant succeeded.

Elapsed: 00:00:00.01
15:35:01 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
15:35:01 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECST@rac01.stg.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com
Cc: nytd_oracledba@nytimes.com

Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.stg.ewr1.nytimes.com
        DB Role: PRIMARY
        SID: ECST
        Schema: core_owner
        Migration: 75.3-release-1.17.0-1-CORE-common
        SVN Revision: 13448
        Duration: 1 sec.
        DBA: apathrose
        